00:00 - hey friends it's me again today I'm
00:02 - going to explain keyword arguments a
00:04 - keyword argument is an argument preceded
00:07 - by an identifier it has a few benefits
00:09 - it helps with readability and the Order
00:12 - of the arguments doesn't matter if
00:13 - they're keywords keyword arguments are
00:16 - one of four basic styles of arguments we
00:18 - discuss positional default then next
00:21 - we'll discuss arbitrary but today we'll
00:23 - be focusing on keyword suppose I have a
00:25 - function to display a message like a
00:28 - greeting
00:29 - I will name this function the hello
00:31 - function we will need a greeting
00:34 - a title Mr Mrs doctor
00:39 - a first name then a last name
00:43 - all I'm going to do within this function
00:44 - is print an upstring I will print
00:48 - my greeting
00:52 - the user's title
00:55 - first name
00:58 - last name
01:00 - then to invoke the hello function I will
01:03 - need to pass in four arguments
01:05 - a greeting a title a first name and a
01:08 - last name
01:09 - so for my greeting let's say
01:12 - hello
01:14 - the title will be Mr
01:17 - the first name will be SpongeBob
01:20 - last name SquarePants
01:25 - so you know this does work we're
01:27 - currently using positional arguments the
01:29 - position of these arguments does matter
01:31 - so what if I were to switch these around
01:34 - we have hello SpongeBob SquarePants
01:37 - followed by Mr hello SpongeBob
01:39 - SquarePants mister
01:41 - an optional feature when sending
01:43 - arguments to a function is that we could
01:46 - turn these into keyword arguments prefix
01:49 - any arguments with the name of the
01:50 - parameter followed by equals
01:52 - title equals Mr
01:55 - first equal SpongeBob
01:58 - last equal SquarePants
02:00 - then with these keyword arguments the
02:02 - order really doesn't matter maybe we
02:04 - move the first name to the end
02:09 - and the Stillwood printout is the same
02:10 - thing we have title first name last name
02:13 - if you're mixing and matching positional
02:15 - arguments and keyword arguments you want
02:18 - to be sure that the positional arguments
02:19 - are first so if I was to move the string
02:22 - our greeting to the end
02:26 - well this technically wouldn't work we
02:28 - have a syntax error positional arguments
02:31 - follow keyword arguments so make sure
02:33 - any positional arguments are first
02:35 - before using any keyword arguments two
02:38 - helpful benefits of using keyword
02:40 - arguments is that it helps with
02:41 - readability and the Order of the
02:43 - arguments doesn't matter we know what
02:45 - this argument is as well as these two
02:47 - title last name first name
02:51 - let's say we have
02:53 - a first name and a last name John
02:56 - James
02:59 - these two names kind of sound like first
03:01 - names
03:02 - is our first name John or is it James we
03:05 - could use keyword arguments to clarify
03:07 - which is which
03:08 - you thought John was the first name but
03:10 - it's actually the last name and the
03:12 - first name is James
03:15 - then our title is still the same
03:18 - hello Mr James John
03:20 - let's cover another example
03:23 - I'm going to print the numbers 1 through
03:25 - 10 using a for Loop 4 x in range 1 comma
03:31 - 11 because the second argument is
03:33 - exclusive
03:34 - then I will print X
03:38 - after each print statement we print a
03:40 - new line do you remember in previous
03:42 - topics how we would follow our print
03:44 - statement with comma and then a new
03:47 - character
03:48 - such as a space
03:50 - while end is a keyword argument found
03:53 - within the built-in print statement
03:56 - in place of ending each print statement
03:58 - with a new line we are using this
04:00 - keyword argument of end and sending it
04:02 - to be a space
04:04 - another one is separate that's found
04:06 - within the print statement
04:08 - maybe we have some numbers
04:11 - they're all separate strings
04:16 - the numbers one through five
04:18 - I can use the separate keyword argument
04:20 - then separate each of these strings with
04:23 - a given character or characters I will
04:26 - separate each of these strings with a
04:28 - dash
04:30 - a lot of built-in functions such as the
04:32 - print function they have some keyword
04:34 - arguments you can use
04:36 - let's go over an exercise now
04:39 - we're going to create a function to
04:41 - generate a phone number but we'll need
04:43 - to pass in a country code area code the
04:46 - first three digits in the last four
04:47 - digits let's define this function as
04:49 - Define
04:50 - get phone to get a phone number
04:54 - we have a country code
04:58 - area code
05:00 - first meeting first few digits then last
05:04 - meaning last few digits we will return
05:07 - an F string
05:10 - we will place our country code first
05:13 - Dash
05:14 - then our area code
05:17 - Dash
05:18 - the first few digits
05:21 - Dash
05:22 - the last few digits
05:25 - my phone number phone num equals I will
05:29 - invoke the get phone number function we
05:31 - just created
05:33 - but we'll need a country code
05:37 - an area code
05:40 - first few digits then last few digits
05:43 - and remember the order doesn't
05:45 - necessarily matter
05:46 - usually I try and be consistent with the
05:49 - order of the parameters make up a phone
05:51 - number I'm in the United States my
05:53 - country code is one area code one two
05:57 - three
05:58 - the next few digits will be four five
06:00 - six the last few will be seven eight
06:02 - nine zero then let's print this phone
06:04 - number print phone num
06:09 - and here's my phone number
06:11 - although you can change it up based on
06:13 - how you do phone numbers in your country
06:15 - this is typically how you would see a
06:17 - phone number in the United States
06:18 - alright everybody so those are keyword
06:21 - arguments they are just arguments
06:23 - preceded by an identifier that matches
06:26 - the name of a function's parameters it
06:28 - does help with readability and the Order
06:31 - of the arguments doesn't matter when
06:33 - invoking a function it could be helpful
06:35 - to identify some of these arguments and
06:37 - well everybody those are keyword
06:39 - arguments in Python