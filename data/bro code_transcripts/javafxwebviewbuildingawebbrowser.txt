00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - and in this video i'm going to
00:04 - demonstrate the webview node in javafx
00:07 - so sit back relax and enjoy the show
00:12 - all right welcome back we're discussing
00:14 - webviews today a web view is a node that
00:17 - displays the contents of a web engine
00:19 - meaning that we can display a web page
00:21 - within our web view
00:23 - web views are found underneath the
00:24 - controls drop down menu just drag and
00:26 - drop it place it anywhere within your
00:28 - pane
00:28 - i'll give this webview a unique id of
00:31 - web
00:32 - view let's also add a button sort of
00:34 - like a load button like load webpage
00:36 - so place it anywhere not in front of
00:38 - your webview though
00:40 - i'll change the text to maybe a load
00:44 - then let's go to code on action load
00:48 - page so we will declare this method
00:50 - later upload page
00:51 - let's create a text field so that we can
00:53 - enter in a website url
00:55 - so let's drag and drop it i'll expand it
00:57 - a little bit i'll give this text field a
01:00 - unique id of text
01:01 - field on action load page
01:04 - so let's make sure that we add our
01:06 - controller class
01:08 - let's save and then head to our
01:09 - controller class also be sure to refresh
01:12 - your fxml document
01:14 - then within our controller class we will
01:16 - implement the initializable interface
01:20 - then add any unimplemented methods and
01:23 - we'll need to declare a few things using
01:24 - fxml injection
01:26 - so at fxml we need our web view private
01:29 - web view web view
01:33 - and our text field at fxml
01:36 - private text field text
01:41 - field we need a web engine as well the
01:43 - web view is in charge of displaying the
01:45 - contents of a web engine
01:47 - so private web engine
01:51 - and let's just call this engine okay
01:54 - within
01:55 - our initialize method we're going to
01:56 - instantiate an engine using
01:58 - the get engine method of web view so
02:01 - engine equals web view
02:04 - dot get engine
02:09 - now before we can test this program and
02:11 - run it we need to declare our load page
02:13 - method so let's take care of that after
02:15 - our initialize method
02:17 - public void load
02:21 - page and at the end of our initialize
02:24 - method
02:24 - let's call the load page method
02:28 - if we were to compile and run this
02:29 - program this may not work and here's the
02:31 - reason why
02:32 - so let's take a look at this error
02:34 - illegal access error
02:36 - blah blah blah blah blah web so this
02:39 - means that we need to add a virtual
02:41 - machine argument we can do so by going
02:43 - to run
02:44 - run configurations click on your project
02:47 - arguments
02:48 - underneath vm arguments we are going to
02:50 - add this
02:51 - vm argument add modules javafx dot web
02:55 - apply then run
02:58 - so currently we just have an empty
03:00 - webview a button
03:02 - and a text field so let's load a web
03:04 - page of our choosing
03:06 - within our load page method let's use
03:08 - the
03:09 - load method of our engine and we need to
03:12 - pass in a string this will be a string
03:15 - representation of a url how about we go
03:19 - to google
03:20 - so type in http call into forward
03:22 - slashes
03:25 - www.google.com
03:27 - and let's try it all right
03:30 - we are at google nice so we didn't have
03:33 - to type in anything for our text field
03:35 - or use the load button
03:37 - that's because we immediately loaded
03:39 - this webpage
03:40 - after we used the initialize method now
03:42 - let's change this a little bit
03:44 - i'll keep this line of code in as a
03:46 - reference but turn it into a comment
03:48 - let's say we would like to get the text
03:51 - from our text field
03:52 - so let's edit this portion out
03:55 - plus text field dot
03:59 - get text
04:02 - so immediately this isn't gonna bring us
04:04 - anywhere
04:05 - but then we can type in a url
04:09 - okay let's head to maybe what about
04:11 - facebook
04:12 - facebook.com we can either hit enter or
04:15 - click this load button
04:19 - and we are on facebook cool let's try a
04:22 - different website what about twitter
04:26 - www.twitter.com
04:29 - that's a good sign we are on twitter
04:31 - cool so we know that it's working
04:32 - now let's set a home page there's a
04:35 - bunch of different ways in which we
04:36 - could do that
04:37 - but using only what we know we could
04:39 - write something like this
04:41 - let's create a variable named homepage
04:44 - this will be a string
04:45 - string home page we could initialize it
04:49 - here or within our initialize method
04:52 - so let's say homepage equals maybe
04:54 - google
04:57 - www.google.com
05:00 - and let's set the text of our text field
05:03 - text field dot set text
05:08 - and we will set this to home page
05:11 - remember we don't have to type in http
05:13 - because we're adding that when we use
05:15 - the load method of our engine
05:17 - okay let's try it so we should
05:19 - immediately be brought to google
05:25 - nice so remember there's a bunch of
05:27 - different ways in which we could create
05:29 - a homepage but we're only using what we
05:30 - know so far
05:32 - let's add some more functionality what
05:33 - about a refresh button to refresh our
05:36 - current page that we're on
05:37 - so let's declare an additional method
05:39 - public void
05:41 - refresh page then to refresh a page
05:45 - type engine dot reload
05:49 - we'll need to create an additional
05:50 - button too so let's head to scene
05:52 - builder
05:52 - within scene builder let's add an
05:54 - additional button next to our load
05:56 - button
05:57 - let's change the text to refresh
06:02 - then within our code section on action
06:05 - refresh
06:06 - page make sure that your controller
06:08 - class is linked
06:09 - save then head back to our controller
06:13 - update your fxml document or reload it
06:16 - then let's run this
06:22 - currently we're on google let's type
06:24 - something bro
06:25 - code is the best and i should be able to
06:29 - refresh this page
06:31 - yep and it's refreshed nice let's zoom
06:34 - in and out of our web view we'll need
06:37 - two additional methods
06:39 - public void zoom in
06:43 - and public void zoom out
06:50 - now to zoom in or out of a webview you
06:52 - type webview.set
06:55 - zoom and remember that our webview is in
06:58 - charge of displaying the contents of a
07:00 - web engine
07:02 - now to zoom in you have to set a number
07:04 - above one
07:06 - for the time being let's say 1.25
07:09 - zoom out let's set to 0.75
07:12 - so a number below one okay now we need
07:16 - two additional buttons let's head back
07:18 - to scene builder again
07:19 - we'll need a zoom in and a zoom out
07:21 - button
07:24 - zoom in what about just plus
07:29 - then within the code section on action
07:32 - zoom
07:34 - in and we'll need another button
07:38 - maybe just minus
07:42 - on action zoom
07:45 - out okay let's save
07:48 - then head back to our controller and let
07:51 - me
07:51 - make that a little bit bigger there all
07:54 - right after refreshing my fxml document
07:56 - i'm going to run this
07:58 - we should be brought to google right
08:00 - away then i can zoom
08:02 - in or out zoom in
08:05 - zoom out now that we know that our set
08:09 - zoom method is working
08:10 - let's expand the range in which we can
08:12 - zoom in or out currently we only have
08:14 - 1.25 and 0.75
08:17 - let's create a variable outside of our
08:19 - initialize method
08:20 - private double web
08:23 - zoom and i will assign a value within my
08:27 - initialize method
08:28 - web zoom equals one one for 100
08:32 - then after we zoom in let's increment
08:35 - zoom by maybe 0.25 or
08:38 - some other amount that you prefer and i
08:42 - will set
08:42 - zoom with web zoom then when we zoom out
08:46 - we will
08:46 - decrement web zoom
08:51 - and then set zoom with web
08:54 - zoom let's try so we can zoom in
08:59 - or we can zoom out nice
09:02 - let's get the history of our web engine
09:05 - object so that we can display
09:07 - what pages that we visited at which time
09:09 - we'll need to declare
09:10 - a web history object private web
09:14 - history i will name this history
09:18 - we'll need an additional method as well
09:21 - public
09:22 - void display
09:26 - history within our display history
09:30 - method
09:30 - we will assign our history object
09:34 - with engine dot get history
09:38 - we'll need to declare an observable list
09:41 - this is a type of collection that we did
09:42 - not discuss yet
09:44 - observable list and list a generic
09:48 - type of web history
09:52 - dot entry
09:56 - we will name this observable list
09:59 - entries equals history
10:03 - dot get entries
10:07 - then we'll need to iterate over our
10:09 - observable list
10:11 - we can use a for each loop for that for
10:14 - web history dot
10:18 - entry entry in
10:22 - entries we will system.out.printline
10:28 - each entry now we'll need to invoke this
10:31 - method some way
10:32 - so let's create an additional button
10:34 - within our scene
10:35 - so within scene builder let's drag and
10:37 - drop a button for maybe browser history
10:41 - or i'll just say history for short
10:44 - history
10:46 - on action display
10:51 - history okay
10:54 - let's save then head back let's refresh
10:58 - our fxml document
10:59 - then run and test this
11:04 - okay our first website is google let's
11:06 - try maybe
11:07 - facebook next
11:12 - then what about twitter
11:17 - then click history to get our current
11:20 - engine history
11:21 - so here's our history it's a little
11:23 - difficult to read though that's what
11:24 - happens when you display the entry
11:26 - directly
11:27 - so let's format this a little bit let's
11:30 - get the url of each entry
11:32 - i'll place this within a print line
11:33 - statement entry dot
11:35 - get url
11:39 - then you can also get the last visited
11:41 - day too
11:42 - i'll just add a space between these plus
11:46 - entry dot get last visited date
11:50 - let's try this again
11:54 - so we have google then let's try twitter
11:58 - next
12:01 - then facebook
12:06 - then get our history so this is a little
12:08 - bit more readable you can always use
12:10 - a printf statement too if you want to
12:13 - format this
12:14 - but we have our url as well as the date
12:17 - that we last visited this site
12:19 - there's quite a bit that we can do with
12:20 - this history object let's create two
12:22 - buttons a
12:23 - move back button and move forward button
12:25 - so that we can visit a recently visited
12:27 - page
12:28 - so let's head to scene builder and add
12:30 - two additional buttons
12:32 - let's add a back button i'll change the
12:35 - text
12:35 - to back
12:40 - on action we'll create a back method
12:45 - then a forward button
12:50 - forward on action
12:54 - forward okay let's save head back to our
12:56 - controller
12:58 - okay we'll need to declare those methods
13:00 - of back and forward
13:02 - public void back
13:08 - public void forward
13:13 - from our display history method copy
13:15 - these two lines of code
13:17 - history equals engine.get as well as the
13:20 - line where we create our
13:22 - observable list named entries so paste
13:24 - these two lines within both back and
13:26 - forward
13:27 - now to move back through our history to
13:29 - visit a recently visited page
13:32 - type the name of your history object dot
13:34 - go
13:35 - and pass in negative one as an argument
13:38 - to move forward all you have to do is
13:41 - pass in
13:42 - positive one and let's run it
13:49 - our first web page is google let's go to
13:52 - facebook next
13:56 - then twitter
14:01 - okay so remember the order is google
14:03 - facebook twitter
14:05 - so let's move back to facebook then back
14:07 - to google
14:08 - now let's move forward facebook then
14:11 - twitter
14:12 - so our next project is to change the
14:15 - text field currently
14:16 - this will be stuck on twitter so we'll
14:18 - change that after hitting the back or
14:20 - forward button
14:21 - and we can use the get url of our entry
14:24 - to do that
14:25 - to get the current url of the webpage
14:28 - that we're on
14:29 - we would type something like this so we
14:32 - need to
14:32 - set the text of our text field text
14:35 - field
14:35 - dot set text will pass in a string the
14:38 - string will be
14:40 - entries dot get we'll pass in
14:44 - an index the index is history
14:48 - dot get current
14:51 - index then follow this with
14:54 - dot get url
14:58 - so copy and paste this for our forward
15:01 - method as well
15:04 - so let's fill up our history currently
15:06 - we're on google let's go to facebook
15:10 - next
15:12 - then twitter
15:16 - okay as we move back through our history
15:18 - pay attention to our text field
15:20 - our url so we're back to facebook then
15:23 - back to google
15:24 - then back to facebook then to twitter
15:27 - so if you prefer you can also create a
15:29 - substring to format this that might be
15:31 - overkill for this video
15:33 - but that's always an option too one of
15:35 - the last things that i'll show you in
15:36 - this video is how we can execute some
15:38 - javascript code within
15:40 - our controller so let's add a button to
15:42 - execute javascript
15:44 - and we'll write some javascript code
15:46 - within our java file
15:48 - so the text let's change to execute
15:52 - js then on action
15:55 - we'll create a execute js method
15:59 - okay let's save then head back then we
16:01 - need to declare
16:02 - our execute js method public void
16:05 - execute js i'm assuming that we don't
16:08 - know any javascript that's fine i'll
16:10 - teach you all just one line of code of
16:11 - javascript
16:12 - so to execute some javascript code type
16:16 - engine.execute.js
16:18 - and pass in some javascript code as a
16:20 - string one line of code that we can
16:22 - write in javascript
16:23 - is to change our window location so
16:26 - remember that we need to pass
16:28 - this in as a string so within double
16:30 - quotes
16:31 - window dot location
16:35 - equals and i need to use the escape
16:38 - sequence to
16:38 - literally print a double quote equals
16:42 - let's head to maybe youtube so https
16:46 - colon two forward slashes
16:48 - www.youtube.com
16:52 - then escape sequence for a double quote
16:55 - semicolon
16:56 - all right let's run this
16:59 - so after clicking this execute js button
17:02 - this will execute
17:03 - some line of javascript code for us
17:06 - which will redirect us
17:07 - to youtube which it has now you may also
17:11 - want to
17:11 - change the text of your text field to
17:13 - match the website that you're on
17:15 - i don't really think it's necessary for
17:16 - this video demonstration but that's
17:18 - another thing to consider
17:19 - by the way speaking of javascript here's
17:22 - a shameless plug to my free
17:24 - javascript course if you're interested
17:26 - in learning more about web development
17:27 - feel free to check it out or not well
17:30 - alright then everybody that is the
17:32 - basics of the webview node in
17:34 - javafx it displays the contents of a web
17:37 - engine
17:38 - if you would like a copy of all this
17:39 - code i will post this to the comment
17:41 - section down below
17:42 - but yeah that's the basics of the
17:44 - webview node in
17:46 - javafx