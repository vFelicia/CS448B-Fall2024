00:00 - how's it going everybody it's bro hope
you're doing well
00:03 - and in this video i'm going to teach you
guys everything you need to know to get
00:06 - started with java so
sit back relax and enjoy the show
00:10 - if you wouldn't mind please like comment
and subscribe
00:16 - one like equals one prayer for the
youtube algorithm
00:20 - here's an outline of the topics covered
in this video if you would like to skip
00:24 - ahead to a certain section
feel free to click on any of the
00:27 - timestamps posted in the description
also at the end of this video we're
00:30 - going to be discussing some tips and
tricks
00:33 - so be sure to watch until the very end
i'll give you three reasons why you need
00:37 - to learn java besides being one of the
top three most popular programming
00:41 - languages worldwide
java is an extremely flexible language
00:45 - it's used extensively by
business enterprises android apps games
00:49 - and if you learn java you could land a
job as a java developer
00:53 - according to glassdoor entry-level java
developers have an average starting
00:57 - salary
of 70 000 that's nothing to sneeze at
01:01 - so why not learn java are you still here
okay cool
01:04 - let's begin with the basics computer
languages are on a spectrum between
01:08 - being high level
and low level computers only understand
01:12 - binary it's referred to as machine code
it's a low level format that a machine
01:17 - can understand
however humans have difficulty reading
01:20 - binary since it's all ones and zeros
to create machine code we write in a
01:24 - format called source code
which is understandable by humans and
01:28 - compile
to machine code when we create
01:31 - javasource code the file ends with a
dot java file extension think of
01:36 - compiling code as
transforming source code to machine code
01:40 - we do this because machines can't read
source code and vice versa
01:44 - humans have trouble reading machine code
unless you're a robot or an android or
01:47 - something
however when we compile our source code
01:51 - to machine code it's
machine specific if we write source code
01:54 - and compile on a mac
we can only run that code on a mac and
01:59 - the same concept
applies for pcs although the java
02:03 - language has a solution for this problem
with java we have an intermediary step
02:08 - where we can compile our source code to
a format called
02:11 - bytecode bytecode is cross platform and
ends with a
02:15 - dot class file extension here's an
example of java source code
02:19 - and here's an example of that same
source code after we compile it to
02:23 - bytecode
it's kind of funky right since bytecode
02:25 - is cross-platform you could write your
code on a mac
02:28 - and then send your bytecode file to your
friend who can then run it on their pc
02:33 - using a jvm to translate the bytecode
to machine code but we are going to need
02:38 - the help of a jvm to translate bytecode
to machine code but where can we get a
02:43 - jvm well it's included with a
jdk and what is a jdk well
02:48 - jdk is an acronym for java development
kit
02:52 - it contains developers tools to help us
code as well as a
02:55 - jre a java runtime environment which
contains a library
03:00 - toolkits and our jvm which is another
acronym
03:04 - for java virtual machine which
translates by code for us
03:08 - to machine code so all you need to worry
about
03:11 - is downloading a jdk and everything else
will be included
03:14 - and now that we know what a jdk is it's
time to download
03:18 - one so open up the internet and go to
any search engine
03:21 - and look this up java jdk download
go to the first link java se downloads
03:27 - sc stands for
standard edition go to
03:32 - jdk download scroll down and find the
appropriate file
03:36 - for your operating system since i'm
running windows i'm going to download
03:40 - this exe version
03:43 - agree to whatever and download
and when this finishes downloading i'm
03:50 - going to open this
open when done on my computer i
03:53 - currently have a jdk
already installed but i'm going to go
03:56 - ahead and reinstall it for the sake of
this video click
04:00 - next next then wait a little bit
and close i would also recommend
04:09 - an ide that's another acronym and it
stands for
04:12 - integrated development environment think
of it as software that helps us write
04:17 - other software
you could write code with a text editor
04:20 - such as notepad
and then compile the text file but doing
04:24 - so is not really beginner friendly
so an ide provides an interface for us
04:29 - to write code
check for errors compile and run code
04:33 - there's two ides that i would recommend
they are both eclipse or intellij idea
04:38 - it doesn't matter which one you download
because the code that we write is still
04:42 - the same
so let's download an ide now it's time
04:45 - to install the
ide i would recommend either the eclipse
04:49 - ide
or intellij idea i'm more comfortable
04:52 - with eclipse so i'm going to stick with
the clips
04:55 - so go back to the interwebs and look up
either
04:58 - eclipse ide or intellij idea ide
so i'm going to look up the clips click
05:04 - the first link
click this orange download button go to
05:08 - download packages and select eclipse ide
for java developers
05:13 - and select the correct download for your
machine i'm going to select the download
05:18 - for windows
and click download and then just wait a
05:23 - little bit again like usual
for me this is currently a zip file so i
05:27 - need to select this file
and extract all
05:34 - with the newly extracted folder navigate
to this eclipse application
05:38 - so you can select this to launch eclipse
for convenience i'm going to create a
05:43 - desktop shortcut
so for me i'm going to go to where is it
05:47 - send to create desktop shortcut and then
click to launch
05:56 - you can select a workspace i'm going to
use the default and
05:59 - click launch
06:03 - we are now within eclipse and we can
begin a new project
06:06 - we are now ready to rock and roll so
let's begin by creating our first
06:10 - java program but in order to do so we
need to create a
06:14 - java project if you're brought to this
welcome screen
06:17 - you can close out of this because it's
annoying and in order to create a java
06:21 - project
navigate to your package explorer and
06:24 - select create a java project
if you're missing the package explorer
06:28 - you can go to file
new dropper project and that will take
06:32 - you to the same place
we need a unique name for this java
06:35 - project i will call this
my first program
06:42 - and i will want to configure the jre
the java runtime environment and we
06:47 - downloaded that
with the jdk because the jre is a
06:52 - component
of the jdk so i'm currently using 13.
06:56 - i'm going to change this to 15.
06:58 - that was
the one that i more recently
07:00 - downloaded just now so go to configure
jres and i'm going to click add
07:07 - select standard vm vm is virtual machine
click next go to jre home
07:15 - go to directory and i'm going to make
sure that i'm selecting the most
07:20 - recent jdk for me that is 15
select folder finish apply
07:27 - apply and close then finish
if this window pops up you can select
07:33 - don't create that's to create a module
if you look to the left hand side within
07:36 - the projects folder we now have a java
project called
07:40 - my first program but we will need to add
what is called
07:43 - a class to this project a class is a
collection
07:47 - of related code so in order to add a
class to this project i'm going to
07:51 - select this project folder
then go to file new class
07:57 - and we need a unique name for this class
i usually call this main but you can
08:02 - name it whatever you want
and then we are going to check this
08:06 - public static
void main checkbox and then click finish
08:11 - with that out of the way take a look
back within your project folder and you
08:14 - should now have
a java file that shares the same name as
08:18 - your class name
my class name is named main therefore
08:22 - my java file is also called main so
this has the dot java file extension
08:29 - and with what we discussed before this
is source code
08:32 - it's in a format that humans can easily
read and understand
08:36 - and when we compile this source code to
bytecode
08:40 - we're going to create a new file that
has the
08:43 - dot class file extension and with that
bytecode file
08:47 - we can run that and translate it using a
jvm
08:50 - a java virtual machine here's our java
file and we have
08:54 - our class and mine is called main so all
the class
08:57 - is is that it's a collection of related
code
09:00 - we won't be exploring in depth on the
topic of classes until we reach the
09:03 - subject of
object-oriented programming which is
09:07 - about 20 videos into this playlist
so you have some time so this is our
09:11 - class mine is called main anything
within the outer set of curly braces
09:15 - belongs to the class and is contained
within
09:19 - and within our class we have what is
called a main
09:22 - method our program won't run without
this method because when we run our code
09:27 - we begin by calling the main method so
if we were to compile and run this code
09:32 - you can do so by clicking the screenplay
button
09:35 - all output is displayed to the console
window and nothing appears to happen
09:39 - because we haven't written anything yet
so if we were to remove this main method
09:44 - and tried to do this again
we would encounter an error because our
09:49 - main method was not
found in the class main it's asking us
09:53 - to please define
the main method now looking back when we
09:57 - created our class we went to
file new class and in order to generate
10:02 - the main method we checked this checkbox
here
10:05 - that states public static void main
so the main method generated for us when
10:11 - we created
this class but if we're missing it we
10:14 - can easily just type it in
a textbook that i read in college said
10:17 - to think of the main method
as a magical spell or incantation that
10:21 - we have to say
in order to get this program to run so
10:25 - we are currently missing a main method
but we can easily just type it in
10:28 - so repeat after me public static
void main then we need some parentheses
10:35 - string straight braces args and then
a set of curly braces and that is it we
10:41 - now have a main method
and our program runs and compiles just
10:46 - fine
so any code within the main method will
10:50 - execute starting at the top
and then work its way down so with the
10:54 - main method
any code you place at the top will be
10:57 - executed first
so let's print something to the console
11:00 - window in order to display some text
all you have to do is type this system
11:05 - with a capital s dot out
dot print then you need a set of
11:12 - parentheses
and then a semicolon at the end so
11:16 - within the parentheses
of this print method we can type some
11:20 - text to display to the console window
but we need to make sure that our text
11:25 - is within a set of double quotes
and we can display some text let's say
11:30 - i don't know what's a food you like i
love
11:34 - pizza so if i were to run and compile
this
11:37 - it's now going to print i love pizza to
the console window
11:41 - let's say that we would like to display
another line of text
11:44 - directly underneath the first we can
accomplish that by using
11:47 - another print statement so for
convenience i'm going to copy this first
11:52 - line
paste it directly underneath and display
11:55 - some other text
such as it's really good
12:00 - so when i compile and run this pay
attention the output is
12:04 - one long line of text the reason that
this is all displaying as
12:08 - one long line of text is because after
printing the first statement
12:13 - our cursor does not move down to the
next line
12:16 - in order to do so we could use a print
ln statement
12:20 - short for print line it's as if we're
hitting
12:23 - enter when we finish outputting our text
so let's try this again
12:27 - using a print ln statement
and now each line of text is on its own
12:34 - individual line so that's what
distinguishes a print and
12:38 - print line statement a print line will
add a new line character as if you're
12:42 - hitting enter when you finish outputting
your text
12:44 - whereas a print statement does not so
that's the difference between the two
12:49 - an alternative to using a print line
statement is that we could stick with
12:53 - the standard print statement and at the
end of our text add what is referred to
12:56 - as an escape sequence for a new
character
13:00 - now an escape sequence is a character
preceded with
13:03 - a backslash and one of a few characters
that follows directly afterwards
13:07 - this is an escape sequence for a new
line character
13:11 - when we add this escape sequence for a
new line it's as if we're hitting enter
13:15 - wherever we place
this escape sequence so within our
13:18 - string of text
for our first line at the end we're
13:20 - going to add
backslash n and this will have the same
13:24 - effect as
a print line statement it's going to
13:27 - display our text
and then move the cursor down to the
13:29 - next line as you can see there is no
additional change to the output within
13:33 - the console window
now what if we reverted our print
13:36 - statements back to print line statements
and kept the additional escape sequence
13:40 - in for a new line character
well we're going to have an extra empty
13:45 - line of text because we're displaying
our line of output plus an additional
13:49 - character for a
new line and then we're hitting enter at
13:52 - the end via
the print line statement so we're going
13:55 - to have an additional empty line between
these two lines of text if we were to do
13:59 - that
so a few other escape sequences that you
14:02 - might be interested in
include the following a backslash t will
14:06 - add a tab
so let's precede our text with an escape
14:09 - sequence for
a tab which is backslash t
14:14 - so this is if we're hitting tab before
displaying our text
14:17 - and we now have some empty space
preceding our line of output
14:21 - if you need to put something within
quotes let's try to do so normally
14:25 - so our compiler is actually going to be
confused because we cannot normally add
14:30 - a set of quotes because our text already
needs to be surrounded with quotes
14:35 - so if we need to literally display some
quotes
14:38 - some double quotes we need to precede
our double quotes with
14:42 - an escape sequence so backslash
then quotes so this will allow us to
14:47 - literally
print some double quotes so we're going
14:51 - to surround our first line of text
with some double quotes now and if you
14:55 - need to display
a backslash then you need to use
15:00 - double backslashes because if you use
just one your compiler thinks you're
15:04 - trying to use an escape sequence
and that's how to display a backslash in
15:08 - summary anything preceding with a
backslash is the beginning of an escape
15:13 - sequence and there's one of a multitude
of characters
15:15 - that could follow afterwards and
depending on the character
15:19 - this has special meaning for your
compiler to do something specific
15:23 - now anything that is following two
forward slashes
15:26 - is the beginning of a single line
comment i could write
15:30 - this is a comment and this line of text
is going to be ignored by the compiler
15:36 - so there's going to be
no change to this program with the
15:39 - additional comment
anything that is a comment is ignored by
15:42 - the compiler so it's useful if you need
to leave yourself a note
15:45 - or for somebody else that's looking over
your code if you need a multi-line
15:49 - comment
that is a forward slash followed by an
15:52 - asterisk
and anything up to an asterisk and
15:57 - another forward slash
will be the bounds of this comment so i
16:00 - could write
on a new line for each word this is a
16:05 - comment and all of this will also be
ignored by the compiler
16:09 - so that's how to write a multi-line
comment a forward slash and an asterisk
16:15 - and anything up to another asterisk and
forward slash
16:19 - so those are comments alright ladies and
gentlemen it's time for this section on
16:23 - tips and tricks and for my first trick
i'm going to change the color scheme of
16:27 - my ide
we're currently using the light theme
16:30 - but i much prefer the dark theme
i'm going to be joining the dark side so
16:33 - in order to change
the color scheme of your ide go to if
16:37 - you're using eclipse
window preferences under the general tab
16:42 - go to appearance theme and you can
change the theme here
16:47 - i will click dark i'm going to select
apply
16:51 - okay and then apply and close so the
dark theme is great if you want to feel
16:55 - like a pretend elite hacker for my next
trick i'm going to change
16:59 - the font color as well as the background
color of my console window in order to
17:03 - do so
head back to window preferences
17:07 - under run debug go to console and you
can change the color schemes here
17:12 - i'm going to change the text color to a
bright green
17:15 - click ok as well as the background color
to
17:18 - a slightly lighter shade of black
that should be good when you're finished
17:24 - click apply
and then apply and close and you may
17:26 - need to run this again to see the
changes
17:28 - so that's how to change the font color
as well as the background
17:32 - color of your console window so it's
somewhat tedious to have to write a
17:36 - print line statement correct
system dot out dot print line normally
17:40 - that's a lot to type
so a shortcut would be to type sys out
17:44 - then hold control space and your ide
will auto generate the rest of this
17:49 - print line statement for you
let's move on to trick number four let's
17:53 - say that we have
hundreds of different print line
17:56 - statements and we need to change the
text
17:58 - to print because we made a mistake so
there's a feature
18:02 - where we can replace some text in your
program with another
18:06 - so let's pretend we would like to
replace print line with print
18:10 - so go to edit find replace and we can
replace
18:13 - some text with something else let's find
each instance of print line
18:18 - and replace this with print then click
replace all so that will take care of
18:24 - all that for you
let's move on to some final tips so with
18:27 - spaces spaces don't make much of a
difference within your code for example
18:32 - after this dot and my print portion
of this print statement i could add a
18:37 - bunch of spaces
for no reason and this would run and
18:40 - compile just fine
i'm not sure why you would do that but
18:44 - that's just to reinforce the point that
spaces don't make much of a difference
18:48 - unless you're using a space to split up
some keywords
18:51 - then you might run into an issue or if
you're adding space to a string
18:55 - well then that's going to have a
noticeable effect so spaces
18:58 - for the most part don't really matter
too much depending on where they are
19:02 - here's a trick on zooming in
or out hold control minus to zoom out or
19:07 - control plus
to zoom in or you could go to window
19:10 - editor
then zoom in or zoom out within this
19:13 - menu
here's my last tip for you let's say you
19:16 - accidentally close out of your package
explorer
19:19 - or your console window you can easily
bring those back by going to
19:23 - window show view and then they are all
listed here
19:26 - so i would like to bring back my package
explorer as well as my console window
19:31 - alright guys and gals you should be
ready to get started with java be sure
19:35 - to check out the full 100 video playlist
as well
19:38 - and if you could do me a small tiny
favor i would
19:41 - greatly appreciate it if you could help
me defeat the youtube algorithm by
19:45 - smashing the like button drop a comment
down below
19:49 - and subscribe if you'd like to become a
fellow bro
19:51 - hey you yeah i'm talking to you if you
learn something new
19:56 - then you can help me help you in three
easy steps
20:00 - by smashing that like button drop a
comment down below
20:04 - and subscribe if you'd like to become a
fellow bro
20:06 - [Music]
20:15 - hey how's it going everybody it's your
bro hope you're doing well and in this
20:30 - video i'm going to teach you guys all
about variables in java so
20:33 - sit back relax and enjoy the show
20:38 - if you find this video helpful please
remember to like
20:41 - comment and subscribe your support will
help keep this channel running
20:46 - all right guys and gals let's talk about
variables
20:49 - now a variable is a placeholder for a
value
20:54 - and it behaves as the value that it
contains do you remember from either
20:58 - elementary school or middle school when
we were working with
21:01 - algebra we usually had to solve for some
sort of variable like
21:04 - x or y and x or y contained
some sort of numeric value and for all
21:10 - intents and purposes
this variable behaved exactly as this
21:14 - value
well with programming we can perform
21:17 - something similar to that
but we are not limited to just numbers
21:21 - we could also store
words whole sentences and these things
21:25 - called boolean values which hold either
true or
21:27 - false but if we're going to store a
value within a variable
21:31 - we have to list the data type of what
we're planning to store within
21:35 - that variable is it going to be a number
a word
21:39 - a boolean so we need to discuss data
types
21:43 - there are eight primitive data types and
a special
21:46 - reference data type called a string
anything that i have noted with a star
21:50 - is particularly important
so i would pay special attention to
21:54 - these our first data type
is boolean this has a size of one
21:59 - bit so it can only hold two values that
being
22:02 - true or false if we're attempting to
sign a boolean value
22:06 - we would type either equals true or
equals false
22:10 - something similar would be let's say we
have a light switch program
22:13 - well if the light switch is on we could
say that the light switch has a value of
22:18 - true if it's off
it has a value of false so this is
22:21 - binary that's why it only uses
one bit it only needs one bit of memory
22:26 - to function
next we have byte this isn't as
22:29 - important as a few others
but with one byte we can hold an integer
22:33 - number between negative 128 to 127
because a byte only has one byte of
22:39 - memory
a short has two bytes of memory so can
22:43 - hold a
larger number between negative 32 000
22:46 - and some change
to 32 000 and some change so integers
22:51 - integers are important these use 4 bytes
of memory
22:55 - and they can store a number to just
under 2 billion
22:58 - to just over 2 billion because they use
4 bytes of memory and a long
23:05 - they use eight bytes of memory so they
can hold a very
23:08 - large number in fact they can hold a
number between
23:12 - just under negative nine quintillion to
just over
23:16 - positive nine quintillion now a float
they can store a fractional number
23:22 - specifically
up to six to seven digits what makes
23:26 - floats different from
these data types on the top here is that
23:31 - bytes shorts integers and longs can only
store a whole
23:34 - integer they cannot store this decimal
portion
23:38 - so if you're working with a program or a
variable
23:41 - that uses a fractional number you'll
need to use either a float
23:45 - or a double and a double has more
precision it uses eight bytes of memory
23:50 - and it can store a fractional number up
to 15 digits
23:53 - so in comparison with a float this has
less precision
23:57 - than a double and for an example i just
listed a few of the digits of pi
24:02 - with this example we can only store six
to seven digits of pi but with a double
24:06 - we can store up to 15.
24:08 - there is one
strange convention with floats if you're
24:11 - going to assign a value to a variable
that's of the float data type you need
24:15 - to follow the value
with the letter f with double variables
24:19 - you actually do not need to do so
so that's one major difference when
24:23 - assigning values between
these two now let's move on to
24:27 - characters pronounced
char for short think of charizard this
24:31 - uses two bytes of memory
and this will store a single character
24:35 - letter or ascii value
an example would be the letter f but a
24:40 - common convention with
assigning values to a char variable is
24:44 - that you need to surround
this value with a pair of single quotes
24:49 - and our last data type is the string
data type the size really varies because
24:53 - these are
reference data types they store a
24:57 - sequence of characters
like a word or a sentence you could
25:01 - store a single character within a string
but chars and strings behave differently
25:06 - because
chars are primitive data types and
25:09 - strings are reference data types
so let's distinguish the difference
25:13 - between primitive and reference data
types
25:15 - here's a super quick description between
the differences of primitive
25:19 - and reference data types primitive data
types there are it and we
25:23 - just discussed them they are boolean by
short integer longs
25:27 - all those cool things that we just
discussed reference data types
25:31 - like strings well there's an unlimited
amount because
25:34 - they are user defined primitives store
data reference data types store an
25:40 - address
primitives can only hold one value
25:44 - reference data types could hold more
than one value
25:47 - primitives use less memory compared to
reference data types
25:50 - which use more memory and primitive data
types are faster compared to reference
25:55 - data types
which are slower now you're probably
25:58 - thinking cool story bro but how do we
create a variable
26:01 - well i'm glad you asked that question so
the first process with
26:04 - creating a variable is that we need to
declare
26:07 - the data type of what value that this
variable is going to store
26:11 - so come up with a variable name like x
and we will precede this variable with
26:18 - the data type of the value that we're
planning to store within
26:21 - this variable and then with all
statements we follow this
26:24 - with a semicolon at the end the next
step
26:27 - is called assignment we will take our
variable and assign it equal
26:31 - to some sort of value of the data type
that we declared this variable to be
26:36 - but you could combine steps one and two
together
26:40 - and this process is called
initialization
26:43 - we would take the data type followed by
the variable name and set it equal to
26:47 - some value and then add a semicolon at
the end to finish the statement
26:51 - so you can either do this in two steps
with declaration and assignment
26:56 - or combine them both together which is
initialization
26:59 - how about we create a few variables does
that sound good to you guys so let's
27:02 - begin with creating an
integer variable let's say int x
27:06 - this step is called declaration we are
declaring the data type
27:11 - of what value is going to be contained
within this variable the second step
27:15 - is called assignment we can assign our
variable a value
27:19 - let's say x equals 123 and
this step is called assignment or
27:25 - we could combine both of these steps
together and this process is called
27:30 - initialization intex equals 123
and this would be initialization
27:38 - so we can do stuff with this variable it
will behave as the value that it
27:42 - contains
we could print this to the console
27:44 - window so within a print or print line
statement
27:47 - we could print the value of x so make
sure you do not write this within quotes
27:53 - right now this will display the value
that is contained within x
27:56 - which is 123 because this variable
behaves as the value that it contains if
28:02 - you were to surround this with quotes
what we are doing now is printing a
28:06 - string literal
you can also print text as well as a
28:11 - variable together
let's say we have a sentence a string
28:15 - literal that states
my number is
28:20 - and then if we want to do some string
concatenation with a variable
28:24 - we would add plus and then the variable
name make sure this is not within quotes
28:28 - so this will display the sentence my
number is plus our variable
28:32 - and in the console window it states my
number is 123.
28:36 - so with integer variables
28:37 - the largest number that you can store
within an integer variable
28:41 - is just over 2 billion let's say we are
working with an extremely large number
28:45 - like the amount of student debt that i
owe well this number is too large to
28:50 - store it within an integer variable
we would probably want to use the long
28:54 - data type
and one convention with assigning values
28:57 - to a long
variable is that you need to follow this
29:01 - number
with a capital l for some reason so we
29:05 - can now work with extremely large
numbers
29:07 - so this might be useful if you're
working with numbers like the speed of
29:10 - light or something
so we now have a long variable and we
29:14 - can display
this value a few of the other data types
29:18 - that we mentioned were
bytes and shorts they have a lesser
29:21 - number that they can store
so with bytes you can only store up to i
29:25 - believe 127
so we could store like 100 within here
29:30 - and this would be fine but 130 would
be a little too much though so we don't
29:35 - tend to use bytes and shorts too much as
a beginner because it's just way more
29:40 - convenient to work with integers
um but you might use longs every once in
29:44 - a while too but
as beginners we're mostly going to be
29:47 - sticking with integers
now a double can store a number with a
29:53 - fractional portion with integers we
cannot store
29:55 - a decimal portion so if this was 123.01
well we cannot store this decimal
30:02 - portion
we can only do so with a float or a
30:05 - double
so with a float you would type in float
30:09 - for the data type let's create a new
variable like
30:11 - y float y equals 3.14
and a common convention for assigning
30:18 - numbers
well values to float variables is that
30:21 - you have to follow this
with f so you can store
30:26 - a number with a decimal portion within a
float
30:29 - or a double and then we could display
whatever this value is
30:33 - so y is equal to 3.14
but people tend to use doubles more
30:38 - because they have more precision
and then you do not need this f at the
30:42 - end
so this will store up to 15 digits after
30:47 - the decimal portion
so we also have booleans let's say
30:51 - boolean
z equals this holds either true
30:56 - or false and then we can display
what value is within this boolean so if
31:02 - we print
our variable z this will display false
31:06 - or we could hold true and this will
display
31:10 - true but we can't display anything else
besides those two
31:13 - like we cannot hold the word pizza
because booleans only hold
31:17 - true or false we have characters
char for short char and we don't
31:23 - necessarily need to
come up with a variable that's only one
31:27 - letter we could have a name or something
that's descriptive for this
31:30 - let's say we have a variable called
symbol
31:34 - char symbol equals and then place
a character within single quotes let's
31:40 - say we
want the at sign so we now have
31:44 - a variable called symbol that contains
the at sign
31:48 - so if i were to display this variable
symbol to the console window
31:52 - it will display the value that is
contained within which is the at sign
31:56 - and lastly we have strings so with
strings these start with a capital s
32:01 - because they are of the reference
data type anything that's a reference
32:04 - data type begins with a capital letter
and let's say we want to store our name
32:10 - so string is the data type
let's say the variable name is name
32:14 - equals
and to store a string it works similar
32:17 - to a string literal
we're going to use a set of double
32:20 - quotes and display
or add a bunch of text like my name
32:27 - and then i can now display my name to
the console window
32:31 - or i could do some string concatenation
too and display
32:35 - the word hello plus my name
and within the console window it's now
32:39 - going to display hello
bro so that is everything you need to
32:44 - know to get started with
variables in java if you would like a
32:48 - copy of all this code i will post all of
this in the comments down
32:51 - below don't be afraid to smash that like
button
32:54 - drop a comment down below and subscribe
if you'd like to become a fellow bro
32:59 - how's it going everybody it's your bro
here hope you're doing well and in this
33:02 - video I'm going to teach you guys how we
can swap two variables using Java let's
33:06 - get into it
33:09 - if you find this video helpful please
remember to Like comment and subscribe
33:14 - your support will help keep this channel
running alright well here we got two
33:19 - variables we got variable X which
contains water and variable Y which I'm
33:23 - gonna put kool-aid in more specifically
black cherry kool-aid so let's just put
33:27 - this in good enough and let's mix it
33:34 - perfect so we're going to create two
variables and these are going to be of
33:42 - the string datatype so we'll have string
x equals the word water and string y
33:51 - equals the word kool-aid and then let's
display these with a simple print line
33:58 - statement and within here I'll just type
in X colon space plus the variable X and
34:08 - then let's do the same thing for y so
we'll change X to Y and let's display
34:13 - these so X currently has water and Y
currently has kool-aid so what happens
34:19 - if we set X to equal Y well we get
kool-aid for both x and y okay we're
34:27 - gonna assign variable Y to variable X
shit so yeah it looks like we have
34:34 - kool-aid in both variable X and variable
Y let's try again maybe we can set Y to
34:40 - equal X no we just got water everywhere
let's try this again we're gonna assign
34:46 - variable X to variable Y this time okay
that doesn't seem to work guys my floor
34:53 - is getting really sticky so it appears
that we're going to have to store one of
34:58 - these values within another variable in
order to switch these so one thing
35:01 - though we can do is introduce another
variable and let's call this temp and
35:05 - temp is empty let's create another
string so we'll create string temp and
35:09 - we can either set this to null or
can assign no value at all where we
35:14 - simply just declared temp a variable so
what we're gonna do is actually take X
35:20 - and store X whatever value isn't here
within temp so we're gonna type temp
35:26 - equals x so now X can be filled with
something so we're going to fill it with
35:32 - variable Y so on our next line we're
going to set X to equal Y then we're
35:42 - going to take our temp variable and
store this within Y and lastly y equals
35:53 - temp breaking news ladies and gentlemen
we have switched the contents of X and
35:57 - white with the help of our variable temp
now back to you bro thank you for the
36:01 - live update news anchor bro it appears on
our
36:03 - end that we have also switched the
36:05 - contents of X and y as well so in
conclusion if the programming language
36:10 - you're using doesn't have any direct
function to switch to variables you
36:15 - could do this manually and you can
create another variable such as temp and
36:19 - temp is a temporary value to temporarily
store one of these values you can set
36:24 - temp to equal X or you can do this with
Y and then set X to equal Y and then Y
36:30 - to equal temp so your assignment for
today is to post two variables in the
36:35 - comments down below and the code that
you used to swap them and that ladies
36:38 - and gentlemen is how you can swap two
variables
36:42 - hey how's it going everybody it's you
bro hope you're doing well and in this
36:45 - video i'm going to teach you guys how we
can accept some user input
36:48 - in java so sit back relax and enjoy the
show
36:54 - make sure you like comment and subscribe
one like equals one prayer for the
36:59 - youtube algorithm
welcome back ladies and gentlemen i'm
37:03 - going to explain how we can use a
scanner to accept some user input
37:07 - the scanner class is found in the java
utility package of your library and we
37:11 - need to import that before we can use
the scanner so outside of the class at
37:16 - the top of our program
this is what we're going to type import
37:20 - java dot util and the name of the class
we would like to import which is scanner
37:27 - then a semicolon now we can use the
scanner class to create
37:30 - a scanner object so we're going to be
performing a little bit of object
37:34 - oriented programming
we'll be covering object oriented
37:37 - programming in the later part of the
series so don't worry
37:40 - so repeat after me scanner then we need
a name for the scanner
37:43 - let's call it scanner a lowercase equals
new
37:47 - scanner then a set of parentheses and a
semicolon
37:51 - within the parentheses we're going to
type system dot in
37:55 - and there we go we have our scanner so
we can use the scanner to accept some
37:59 - user input
so let's let the user know that we would
38:03 - like them to type in something
maybe a name let's create a prompt that
38:07 - will ask somebody for their name
so within a print line statement we'll
38:10 - type what
is your name
38:16 - and next what we'll do is take our user
input and assign it to
38:19 - a variable perhaps a string variable
called name
38:23 - string name equals and now we're going
to use our scanner so we type in
38:28 - the name of the scanner dot and to enter
a
38:31 - line of text we're going to use a
certain method of the scanner
38:35 - it is the next line method
and when we type in user input we type
38:41 - it into the console window
here at the bottom so let's do something
38:45 - with this name
maybe display this within a message
38:50 - system.out.printline hello
plus whatever your name is so let's
38:55 - compile and run this
what is your name now our program is
38:59 - currently paused
until we type in some user input and
39:03 - then press the enter key
when you press enter that's how you
39:06 - submit some user input into the console
window
39:09 - so i'm going to click within my console
window and type in something
39:13 - i'm going to type in bro and to submit
some user input you press the enter key
39:17 - and it states hello plus my name which
is what i entered
39:21 - bro now there's different types of input
that we can accept
39:26 - this time let's accept only an integer
number perhaps we can ask somebody for
39:31 - their age
so let's write a prompt for that
39:34 - system.out.printline
how old are you
39:41 - and this time we will declare an integer
variable
39:44 - maybe called age int age equals
scanner dot next
39:52 - and we are looking for int
so we can only accept a whole integer
39:59 - u r
plus age plus
40:05 - years old
okay let's try this again what is your
40:12 - name
bro how old are you let's just say that
40:15 - i'm
18. hit enter hello bro you
40:19 - are 18 years old so what happens if we
do not enter in
40:24 - a number so let's try and break this
what is your name
40:27 - bro how old are you we're not going to
enter a number this time
40:32 - let's type in the word pizza and see
what happens well we encountered
40:36 - an exception we encountered an input
mismatch
40:39 - exception because when our scanner is
looking for an integer
40:43 - we typed in a string so we need to make
sure that the input
40:47 - type the data type matches in a future
lesson we'll be covering
40:52 - exception handling where we can prevent
this very thing from happening
40:55 - but for now since we're beginners we'll
just have to be sure to type in
40:59 - the correct data type of the input that
our program
41:02 - is looking for now there's one more
thing that i want to show you guys this
41:05 - is a common problem
if you use next line after next int or
41:10 - anything else that's not next line so
let's ask somebody for their favorite
41:16 - food this time
so let's add that at the end
41:19 - system.out.printline
what is your favorite
41:25 - food then we'll create a string variable
called food
41:30 - string food equals scanner dot
next line and we will display this
41:39 - system.out.printline you
like plus food
41:46 - all right so here are the questions what
is your name
41:49 - bro how old are you 18. now pay
attention to this when i press
41:54 - enter when we reached the question on
what is your favorite food
41:58 - well our program skipped our user input
and continued on with the rest of the
42:02 - code
so it states hello bro you are 18 years
42:05 - old but we were not able to
input anything for our favorite food
42:10 - here's the reason why
here's what's going on let's pretend
42:13 - that this box
is a representation of our scanner and
42:17 - we're going to use the next
line method of our scanner to read a
42:21 - line of text
so we type in our name and then press
42:24 - the enter key to submit
so this backslash n is an escape
42:28 - sequence for a new line
the next line method will read an entire
42:31 - line of text
and stop when it reaches a new line
42:35 - character so
after we call the next line method our
42:38 - scanner is going to be empty
however if we were to call a different
42:42 - method that doesn't read a new line
character such as
42:45 - next ins so we type in our input such as
the number 18
42:49 - and then press the enter key that will
add a new line character
42:53 - so our next int method is only going to
read this numeric portion of our scanner
42:58 - and then when we submit it well this new
line character is still going to be
43:02 - within our scanner
and if we were to use our scanner again
43:06 - and call a different method
like next line well our next line method
43:11 - thinks that we're at the end because
there's this new line character within
43:15 - our scanner so we would need some way to
clear out that new line
43:19 - one easy fix for this is that after you
call the
43:22 - next and method what we could do is call
the next
43:26 - line method to clear our scanner so i'm
just going to copy this
43:29 - portion and paste it we're not really
going to do anything with that newline
43:33 - character this will just clear the
scanner for us
43:36 - so now we should be able to answer all
three questions
43:39 - so type in your name what is your name
it is bro
43:43 - how old are you let's say i'm 18. what
is your favorite food and you can see
43:47 - that it paused to this time
unlike the first time and my favorite
43:51 - food is pizza
press enter hello bro you are 18 years
43:55 - old you like pizza
well then that is one way in which you
43:59 - can use a scanner to accept some user
input
44:02 - scanners are capable of much more you
can also use them to read
44:05 - the contents of a file and a few other
things but we'll learn about those in
44:09 - future videos
and if you need to use a scanner be sure
44:12 - to include this import at the top
import java.util.scanner because the
44:17 - scanner class is found within the
utility package
44:20 - and then you'll need to create a scanner
object just by following these steps
44:24 - scanner you can call it scanner equals
new scanner
44:28 - well guys and gals that is how scanners
work in java before you go
44:32 - i would greatly appreciate it if you
could do a favor for me and
44:35 - like this video leave a comment down
below and subscribe if you'd like to
44:39 - become a fellow bro
44:43 - how's it going everybody it's you bro
hope you're doing well and in this video
44:46 - i'm going to teach you guys about
expressions in java so
44:49 - sit back relax and enjoy the show
44:55 - you can become a hero and save our
channel by smashing that like button
44:58 - drop a comment down below and subscribe
if you'd like to become a fellow bro
45:03 - now an expression is a combination of
operands and
45:07 - operators an operand is the values
variables numbers or different
45:12 - quantities that you might see
in a program and operators they are
45:16 - those
arithmetic symbols that you might see
45:19 - such as the plus sign for addition
subtraction multiplication division
45:25 - and then modulus so let's go over a few
examples
45:28 - just so that we know how they work let's
say i have
45:31 - an integer variable called friends and i
will set this equal to maybe 10.
45:37 - so we can change the value of the
friends variable by using an arithmetic
45:41 - expression
so let's say that we make a new friend
45:44 - so we're going to add one
to my variable of friends to increment
45:48 - my variable friends i can just use the
plus
45:50 - operator and then add a new operand to
my variable friends
45:54 - so if i would like to assign a new value
to my friends variable i'm going to type
45:59 - in the name of my variable
equals friends plus one because we made
46:04 - a new friend
and then i will print the value of
46:07 - friends so
our friends variable now contains 11.
46:12 - so we could also subtract take a wild
guess as to what's gonna happen
46:16 - we just lost a friend let's multiply
uh let's multiply our friends by two and
46:22 - now we
have 20 friends and let's divide
46:26 - we're going to divide our friends into
two and we have five friends
46:31 - now the modulus gives you the remainder
of division
46:34 - so we have 10 friends what if we had
modulus 3
46:37 - well that does not divide evenly so
we're going to have a remainder of
46:41 - one friend it's kind of like in group
projects where everybody has to get into
46:45 - a group of three
and there's always somebody that's left
46:47 - over think of it that way
although if our group of friends was
46:52 - divided into groups of 2
there would be no remainder because 10
46:56 - divided by 2
equals 5 evenly and there is no
46:59 - remainder so that's all what the modulus
is it gives you the remainder of any
47:03 - division that occurs
now there is a shorthand to increment a
47:07 - variable by one
so normally the long way of writing this
47:11 - out would be type in the name of the
variable
47:13 - equals because we're going to reassign a
value friends
47:17 - plus one right well there's a shorthand
way of incrementing this
47:21 - and that is to use the increment
operator which is just
47:24 - plus plus and then a semicolon so this
will add one
47:28 - to a value and now we have 11 friends
if you want to decrement that would be
47:34 - minus minus and now we have nine friends
hold up wait a minute before you go i
47:40 - gotta discuss
integer division because i forgot to
47:43 - talk about it so
if we divide a number by an integer
47:48 - if there is normally a remainder well
our program is going to truncate the
47:53 - remainder
here's an example let's say we have 10
47:56 - friends and we're going to divide our
friends
47:59 - by three so we're dividing by a
whole integer so our result should be
48:05 - 3.33 repeating right
wrong it's three that's because with
48:09 - integer division
we truncate any decimal portion because
48:13 - we cannot store it one easy fix for that
is we can cast our result as a double
48:19 - value or a float as well
to cast a value as a different data type
48:24 - to the left hand side
of our expression we're going to list
48:27 - the new data type that we would like to
convert this value to
48:31 - so we would like to convert our integer
as
48:34 - a double value because we would like to
retain
48:37 - that decimal portion of our result
however
48:41 - our data type friends is an integer so
it cannot store a double
48:45 - data type so we should probably convert
this to a double
48:49 - so that we can store this value and now
this program
48:53 - will successfully store this decimal
portion of our expression
48:57 - well that's really all you need to know
to get started with expressions
49:00 - if you would like a copy of all this i
will post this in the comments down
49:04 - below
and if i could ask for a favor of you
49:06 - guys just to like this video
drop a comment down below and subscribe
49:11 - if you'd like to become a fellow bro
49:13 - hey what's going on everybody it's your
bro hope you're doing well and in this
49:16 - video i'm going to teach you guys how we
can make a very basic
49:19 - gui application in java so sit back
relax
49:23 - and enjoy the show
49:27 - if you find this video helpful please
remember to like
49:30 - comment and subscribe your support will
help keep this channel running
49:34 - all right guys and gals i'm going to
teach you all how to create a very basic
49:38 - gui program gui is an acronym for
graphical
49:42 - user interface it's a visual program
that we can see
49:45 - and interact with kind of like this
so we'll be using the j option pane
49:51 - class and be creating a few message
dialog boxes
49:55 - before we begin we'll need an import so
outside your class let's type this
49:59 - import java x dot swing
dot j option pin
50:06 - so we will be working with the j option
pane
50:09 - class now what we would like to do is
type in some user information into a
50:14 - sort of
dialog box and we'll store this as a
50:18 - string variable called
name kind of like what we did on the
50:21 - video on user input
string name and in order to create an
50:26 - input dialog box we're going to type
the name of the class j option pane
50:33 - dot and there's a few options what we
would like is
50:36 - show input dialog and you can really
just pick any of these
50:40 - and we can type in a message so with
this message
50:44 - let's state enter your
name and when we run this
50:51 - this is what we have we have the small
gui dialog box and we can type in our
50:55 - name and submit it
but it currently doesn't do anything so
50:59 - let's create another message dialog box
that will display our name along with a
51:03 - message
so j option
51:07 - pain dot show message
dialogue for now you can just type in no
51:16 - comma and then a message let's say
hello plus
51:23 - name and let's try it so our first
dialog box is the show input dialog
51:29 - message
and we can type in our name and submit a
51:33 - name
and our second box here is a message
51:36 - dialog box this just displays some
information
51:39 - such as a string of text and it says
hello bro
51:43 - this time let's ask for an edge and
store this value within an integer
51:46 - variable called age int
age equals and we can just copy all of
51:51 - this
j option pane dot show input dialog
51:55 - and the message will be enter your edge
there is one issue though
52:00 - when you use the show input dialog box
it's going to return
52:03 - a string and we're attempting to assign
the string into an integer
52:08 - variable so what we would need to do is
convert this
52:12 - to an integer and there is actually a
method to do that
52:16 - so what i'm going to do is use the
integer
52:19 - wrapper class and use the parseint
method
52:24 - and within the parenthesis we're going
to take all of this
52:29 - and copy it within our parseint method
and then add a semicolon at the end so
52:35 - this will return
a string based on what the user types in
52:39 - and the parseint method will convert it
to an integer that we can store it
52:42 - within our integer variable of age
and then we can display this so let's
52:47 - display this with another
message dialog box j option pane dot
52:51 - show message dialog
null will be the first argument and our
52:57 - message will be
u r plus age
53:03 - plus years old
and let's try it
53:10 - enter your name bro press okay
hello bro then when we click okay again
53:16 - it's going to go to our next
input dialog box enter your age let's
53:20 - say that i'm 18
click ok you are 18 years old now let's
53:25 - try this with a double data type
53:30 - this time let's create a variable called
maybe height
53:34 - this will be a double value and the
variable name will be height
53:38 - so since we're working with double
values we're going to change integer to
53:42 - double double with a capital d dot parse
double and the message will be enter
53:50 - your height and our message dialog
will be u r height
54:00 - and let's say this is in centimeters
tall
54:04 - so we have to be sure that we're getting
the right data type because when you use
54:07 - the input dialog box it's going to
return a string
54:11 - so if you're attempting to assign that
string to a certain data type you have
54:15 - to convert it
to that specific data type so let's try
54:18 - this
enter your name bro okay hello bro
54:23 - what is your age let's say i'm 18 press
okay
54:26 - you're 18 years old enter your height i
don't know what a good height is
54:30 - 240 centimeters and then click ok
you are 240.0 centimeters tall
54:37 - in conclusion ladies and gentlemen what
we have made is a
54:40 - very simple graphical user interface for
fun
54:44 - this is completely optional at this
point but we will be learning more about
54:47 - gooeys later in this playlist
so if you would like a copy of all this
54:51 - code i will post all of this in the
comments down below
54:54 - and if you could do me a favor down
below smash the like button
54:58 - drop a comment and subscribe if you'd
like to become a fellow bro
55:02 - how's it going everybody it's your bro
here hope you're doing well and in this
55:05 - video i'm going to teach you guys a few
useful methods of the math class and at
55:09 - the end of this video we're going to
create a program
55:11 - where we will find the hypotenuse of a
triangle so
55:15 - sit back relax and enjoy the show
make sure you like comment and subscribe
55:23 - one like equals one prayer for the
youtube algorithm
55:26 - alrighty then guys and gals in this
video i'm going to demonstrate a few
55:32 - useful methods of the math class to
begin we'll need maybe two numbers
55:36 - let's say that these will be double
variables double
55:39 - x let's set the sequel to 3.14
and double y we will set this
55:46 - to let's say negative 10. all right the
first useful method is the max method
55:51 - this will find the larger of two numbers
so in order to use the
55:56 - max method we're going to type math with
a capital m
55:59 - dot and there's a few recommendations
here what we would like is the
56:04 - max method that is right here so there's
a few to choose from we can
56:09 - compare two integers two long values two
floats
56:13 - and two doubles i'm going to compare the
values of
56:16 - x and y so i'm going to put these within
the parentheses of my max method and
56:23 - then we can either display
the result or assign this to a new
56:26 - variable let's say double
z equals math.max and we'll compare
56:32 - x and y and assign the larger number to
variable z
56:37 - and we will display the result
system.out.printline
56:40 - z and the larger of these two numbers
is in fact x which is 3.14
56:47 - and there is also a min method which
will find
56:50 - the lesser of two values which is
variable y
56:53 - which is negative 10. another useful
method
56:57 - is the absolute function method it's
just abs
57:01 - like abs six-pack abs and we'll pass
in y and this will display the absolute
57:08 - value
of y which is 10. so the absolute value
57:11 - is
basically a number without the negative
57:14 - sign i'm not a mathematician so
i could be wrong in that definition all
57:18 - right we also have the square root
function
57:21 - that is sqrt square root of
y i don't know what the square root of
57:29 - negative 10 is but we're about to find
out
57:31 - uh i don't know i guess that didn't work
let's change y to 10.
57:36 - 3.16 blah blah blah blah
all right that is the square root
57:41 - function we can also round
let's round x
57:48 - so x rounded is 3.0
on the other hand seal like ceiling this
57:55 - will always round up
so 3.4 or 3.14 always rounded up
58:01 - is four and floor will always round
down so 3.14
58:08 - always rounded down is 3.0
here's a project that we can work on
58:14 - let's create a program
that will find the hypotenuse of a
58:18 - triangle
and we will ask the user for side x and
58:22 - side y so to begin let's declare two
variables
58:26 - double x and double
y actually i take that back let's
58:32 - declare
double z as well because z will be the
58:36 - result
the hypotenuse we'll also need a scanner
58:40 - to accept some user input
scanner scanner equals new
58:45 - scanner within the parentheses we're
going to type
58:49 - system.in we'll need an import so
include
58:52 - this import at the top import
java.util.scanner
58:56 - we'll need a prompt for side x and side
y
59:01 - we can do that with a print line
statement enter
59:04 - side x
i can't type today and we will store the
59:12 - result within
variable x x equals we need some user
59:17 - input
scanner dot next double because we would
59:21 - like a double value
let's repeat the process for side y
59:28 - enter side y will store the result
within variable y now here's the tricky
59:34 - part
there is a mathematical formula to
59:37 - calculate the hypotenuse given
two angles well two sides of a triangle
59:42 - so this is what we're going to do first
we'll multiply
59:45 - x times x plus
y times y then we need to put this
59:52 - within the square root
function of the math class math
59:57 - make sure it's with a capital m dot sqrt
and we are going to take all of this and
60:05 - place this within
the square root function and we will
60:09 - assign this to
our variable of z
60:14 - so z equals math
dot square root x times x plus y
60:20 - times y and with a print line statement
we can display
60:25 - the hypotenuse is
60:31 - plus z that should be good
oh then it's good practice to close your
60:37 - scanner i always forget to do that
although it's not necessary
60:40 - scanner.close all right let's test this
enter side x that is four enter
60:48 - side y let's say five the hypotenuse is
six point four add some change all right
60:55 - so that's just
a simple program that you can make using
60:58 - a function of the math class
so if you would like a copy of this code
61:02 - i will post this in the comments down
below
61:04 - but yeah that's a few useful methods of
the math class
61:08 - oh and i forgot to tell you guys like
comment and subscribe
61:12 - how's it going everybody to bro hope
you're doing well and in this video i'm
61:17 - going to teach you guys how we can
generate some random
61:19 - values in java so sit back relax
and enjoy the show
61:27 - you can become a hero and save our
channel by smashing that like button
61:30 - drop a comment down below and subscribe
if you'd like to become a fellow bro
61:36 - all right welcome back ladies and
gentlemen in this video we're going to
61:39 - be generating some random values
some random integers doubles and boolean
61:44 - values
so if you're interested in game design
61:47 - at all this video is a must for you
so in order to use random values we
61:52 - should probably
import the random class bond within the
61:55 - library
so outside of the class this is where
61:58 - we're going to type we're going to
import java dot util
62:04 - dot random semicolon and now we have
access to the random class and that
62:09 - provides us a few options
we need an instance of the random class
62:13 - for us to use
within the main method we're going to
62:16 - create an instance of the random class
by typing random with a capital r
62:20 - it's the same name as the class random
we need a name for this instance
62:24 - let's call it random all lower case kind
of like what we did with that video on
62:28 - scanners
random random equals new random that's
62:32 - kind of random
then a set of parenthesis then a
62:34 - semicolon we now have access to this
random instance to generate some random
62:39 - values for us
but there's a disclaimer here these are
62:42 - not true random numbers but something
called
62:45 - pseudorandom numbers which are pretty
darn close so i just wanted to give you
62:49 - that disclaimer before we got started
so you don't call me a liar let's
62:53 - generate a random integer
and store this within an integer
62:56 - variable like
into x into x equals and to generate a
63:02 - random integer
we're going to type the name of our
63:05 - random instance
random dot next and
63:09 - there's also a few others like next
boolean next double
63:13 - next float i'll get to those later what
we would like for now is
63:17 - next int and then we will display
the result with a print line statement
63:23 - we will display the value of
x so the results are on
63:28 - a scale between i would say just under
negative 2 billion to just over
63:34 - positive 2 billion so you'll probably
want to limit that
63:38 - let's pretend that we're going to roll a
six sided dice
63:41 - so to limit the scale or the size of the
random number that will generate
63:47 - we can pass in a value to our next
int method so within the parentheses of
63:53 - our next int method
we'll limit the size of the integer
63:57 - that's going to generate
if we would like a six-sided dice we're
64:00 - going to place
six here but there's one catch with this
64:03 - though
this will generate a random number
64:06 - between zero and five
because computers always start with zero
64:10 - and let's see if i can roll a zero
nope there we go all right so one way to
64:16 - solve this is that if we want the
numbers
64:18 - one through six we can just add one so
now we'll get a random
64:23 - number between one and six just like
that
64:26 - this time let's generate a random double
value
64:29 - for now i'll turn this line into a
comment
64:32 - and let's create a new variable called
double
64:35 - y double y equals random
dot next where is it
64:42 - double and we will display
the value of y next double is going to
64:49 - give us
a random value between zero and one
64:53 - so this probably has some uses for
something
64:56 - what that is i'm not really sure but hey
you know you can do this now
65:00 - let's also generate a random boolean
value so
65:03 - boolean z equals random
dot next boolean
65:11 - and we will display the value of z so
this is going to give us either true
65:17 - or false well everybody that's how we
can use the random class to generate
65:22 - some
pseudo-random values for us if you would
65:25 - like a copy of this code i will post
this in the comments down below
65:29 - but yeah that's a few uses of the random
class also be sure to
65:33 - leave a like drop a random comment down
below
65:37 - and subscribe if you'd like to become a
fellow bro