00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how we can animate multiple objects in
00:06 - python so
00:07 - sit back relax and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - welcome back my fellow bros in this
00:21 - video we're going to be animating
00:23 - multiple objects within a window
00:24 - more specifically we'll animate some
00:26 - circles and each of these circles will
00:28 - have their own characteristics
00:30 - speeds and directions so we'll need two
00:33 - imports to begin
00:34 - from ck enter import everything we'll
00:37 - also be importing everything from the
00:38 - time module as well
00:40 - we'll need a window window equals tk
00:42 - followed by window.main
00:44 - loop i'm going to create two constants
00:46 - one for the width and one for the height
00:48 - let's set the width equal to 500 and the
00:50 - height equal to
00:51 - 500 as well we'll create a canvas and
00:53 - we'll be animating the circles that
00:55 - we're going to create
00:56 - on the canvas so let's create a canvas
00:59 - canvas
01:00 - equals canvas we're going to be adding
01:03 - the canvas to the window
01:05 - and we'll set the width of our canvas
01:07 - equal to our constant width which is 500
01:10 - and our height equal to our constant of
01:12 - height which is also 500
01:14 - and we will add this canvas by using the
01:16 - pack function
01:18 - canvas.pack here's our canvas and we're
01:21 - going to be creating multiple circles
01:23 - let's pretend that they're all different
01:24 - sports balls like a tennis ball baseball
01:27 - volleyball bowling ball
01:29 - they'll all be bouncing off of the
01:31 - borders and once
01:32 - each of them encounters a border they
01:33 - will change direction
01:35 - since we're going to be creating
01:37 - multiple objects i think it's best if we
01:39 - do this with
01:40 - another class so let's create another
01:42 - class
01:43 - i'm going to go to file new python file
01:47 - and let's call this class ball and click
01:50 - python file
01:51 - and we need to define this class class
01:55 - ball and we also need a constructor for
02:00 - this ball class
02:01 - we can create one with def two
02:04 - underscores
02:04 - i-n-i-t two underscores again
02:08 - and we can set up the parameters of what
02:10 - we want to receive
02:11 - if we were to create a ball object so
02:14 - let's pretend that
02:16 - we're going to be creating a volleyball
02:18 - to begin with so
02:20 - let's call this ball volley
02:23 - underscore ball equals
02:26 - ball and we'll pass in some arguments so
02:29 - let's set up the parameters first
02:31 - what do we want to receive one we want
02:33 - to receive
02:34 - our canvas so that we can actually draw
02:36 - this oval we can draw this ball
02:39 - we should also have an x and y position
02:43 - a diameter
02:47 - x velocity y velocity
02:51 - and a color all right so
02:54 - when we create a ball like a volleyball
02:57 - we're going to pass
02:58 - in whatever the parameters require so we
03:01 - need a canvas
03:02 - x y a diameter an x velocity
03:06 - y velocity and a color so within the
03:08 - constructor for the ball
03:10 - we're passing in our canvas it's kind of
03:13 - like what we do with widgets
03:14 - we're specifying what we're going to be
03:16 - adding this widget to
03:18 - we're going to be adding this ball to
03:20 - our canvas we also need
03:22 - x y and a diameter let's make this
03:24 - simple by setting x and y to both zero
03:27 - for the diameter let's set this to maybe
03:30 - 100 and we also need an x velocity and y
03:34 - velocity
03:35 - let's set this both to one and a color
03:38 - so let's pass in a string
03:40 - like white let's head back to our ball
03:43 - class and finish assigning
03:44 - all of these arguments that we're going
03:46 - to receive the first step is that we'll
03:48 - say
03:49 - self dot canvas equals
03:52 - the canvas that we receive when it's
03:54 - passed to us as an argument
03:57 - our next step is to draw this oval draw
04:00 - this ball
04:01 - and we'll say self dot image
04:05 - equals canvas dot create
04:09 - underscore oval and with creating ovals
04:12 - we can pass in x y
04:15 - and with circles the diameter is equal
04:18 - for both the width and the height
04:20 - so we'll pass in our diameter twice
04:24 - and lastly a fill color
04:28 - and we'll say this is equal to the color
04:30 - that we receive
04:31 - which is white
04:34 - we're going to set the x velocity and
04:36 - the y velocity
04:38 - this is related to the direction that
04:40 - it's initially going to head in
04:42 - so self dot x velocity
04:46 - equals the x velocity that we receive
04:51 - and we'll do the same thing for y
04:52 - velocity
04:55 - self.y velocity equals y velocity
04:59 - now since this is in another class we
05:01 - need to import this class
05:05 - from ball import
05:08 - everything and you can see that this red
05:10 - underline went away
05:12 - so let's see what happens now
05:15 - we have our volleyball but it's not
05:18 - currently moving
05:18 - so that's the next step so let's create
05:21 - a
05:22 - function within the ball class called
05:23 - move that we can call upon
05:25 - so we'll do this after the constructor
05:27 - cef
05:29 - move and this will take self as an
05:32 - argument
05:34 - the first thing that we should do is get
05:36 - the coordinates
05:38 - so we'll say coordinates and this is a
05:40 - list coordinates
05:41 - equals self dot canvas
05:45 - dot c-o-o-r-d-s
05:50 - and we'll pass in self dot image
05:54 - and we will print these coordinates just
05:56 - to see what's here
06:02 - all right now we'll create a while loop
06:05 - within
06:05 - our main class so let's add that near
06:07 - the end
06:09 - and we'll just say while true
06:13 - so while this is running let's move our
06:16 - volleyball
06:17 - so volleyball dot move so this will call
06:21 - the move function of our volleyball and
06:24 - then we will update the window
06:27 - window dot update so that this refreshes
06:30 - and we will sleep for maybe a hundredth
06:33 - of a second
06:34 - time dot sleep 0.01 but you can put
06:38 - whatever you want here
06:40 - so this is going to at first just print
06:42 - the coordinates of this ball
06:45 - so it's not currently moving and this
06:47 - time with our list we have
06:49 - four coordinates zero zero that's the
06:51 - top left corner and one hundred one
06:53 - hundred that's the bottom
06:54 - right corner so this time we have four
06:57 - coordinates that we have to deal with
06:59 - the top left corner as well as the
07:01 - bottom right corner
07:02 - our next step is that we should move
07:04 - this image
07:06 - self dot canvas dot move
07:10 - what object are we going to move we're
07:12 - going to move self
07:14 - dot image and in what directions
07:17 - self.x velocity as well as
07:21 - self.y velocity now
07:24 - our ball is going to move across the
07:26 - window and it right now it's displaying
07:28 - all of the coordinates
07:29 - we don't have any bounds set up so it's
07:31 - just going to continue into the void
07:32 - forever
07:33 - so we should set up some if statements
07:35 - to check to see if one of the borders
07:38 - touches one of the walls of the window
07:40 - if so it's going to change
07:41 - direction so let's check to see
07:45 - if the left or right side of our ball
07:47 - touches one of the left or right borders
07:49 - so let's write an if statement if
07:53 - and then let's take a look at these
07:54 - coordinates if
07:56 - coordinates at index two
08:00 - that is this one zero one
08:03 - two so this is the bottom right corner
08:07 - with these two sets of coordinates if
08:09 - coordinates at index two
08:11 - is greater than or equal to
08:14 - i'm going to put these within
08:15 - parentheses self
08:17 - dot canvas and we need to get the width
08:20 - of the canvas
08:21 - one way which we can do that is to use
08:23 - the w
08:25 - info underscore with function
08:29 - so this is going to get the width of the
08:31 - canvas
08:33 - and then let's add one more thing
08:36 - or coordinates at index
08:39 - zero is less than zero
08:43 - so if this ball touches the left or
08:46 - right border
08:47 - we want to change direction so we can
08:50 - flip
08:50 - the x velocity self.x velocity
08:54 - equals negative self x
08:58 - velocity and let's do the same thing for
09:00 - the top
09:01 - and bottom borders so let's copy what we
09:04 - have
09:07 - and we'll replace coordinates at index
09:09 - two with
09:10 - three and we'll also replace
09:14 - w info underscore width with height
09:19 - and coordinates at index one
09:22 - change self dot x velocity with y
09:25 - velocity
09:26 - same thing here as well all right and
09:30 - that should be everything let's try it
09:34 - so let's see if this ball actually
09:35 - bounces off the borders
09:38 - which it does pretty cool so that's
09:40 - everything we need to do within our ball
09:42 - class
09:42 - now if we need to create multiple balls
09:45 - we can just construct them
09:46 - so let's say this time we would like a
09:48 - tennis ball
09:50 - i'm going to name this volleyball as
09:52 - tennis ball
09:53 - and let's make the diameter smaller like
09:56 - five
09:56 - but we'll make this a lot faster like
09:59 - for the velocity let's say four
10:01 - and three and the color let's make this
10:03 - yellow
10:05 - and we also need to call the move
10:07 - function of this tennis ball
10:09 - so within the while loop tennis ball dot
10:12 - move
10:13 - and then we should also have a tennis
10:15 - ball moving across the screen in a
10:17 - different direction
10:18 - now technically we don't need to print
10:20 - the coordinates but i tend to do that
10:21 - just for
10:22 - teaching purposes to better demonstrate
10:24 - all of this
10:25 - now our ball class is acting as a
10:28 - blueprint
10:29 - for how balls should be created and the
10:31 - behavior
10:32 - that they exhibit and if we need to
10:34 - create a ball
10:35 - we can just come up with a name for the
10:37 - ball and call the ball constructor to
10:39 - take care of that for us
10:41 - kind of like what we've been doing with
10:42 - widgets so all we need to do to create
10:45 - another ball
10:46 - is come up with a unique name for the
10:47 - ball and instantiate it using our ball
10:50 - class that we created
10:51 - so this time let's create a basketball
10:54 - i'll rename this
10:55 - as basketball and we'll pass in
10:58 - different arguments based on how we want
10:59 - to customize
11:01 - this unique ball so for the diameter
11:04 - let's say this is now 125
11:06 - and the x and y velocity let's set this
11:08 - to something very fast like
11:11 - eight and seven and with the color let's
11:14 - change this to orange
11:16 - and make sure you also call the move
11:18 - function
11:20 - so basketball dot move and we should
11:23 - have a basketball moving across the
11:25 - screen
11:26 - all right everybody so that's the basics
11:29 - of animating multiple objects in python
11:31 - if you want a copy of all this code i'll
11:33 - post all of this in the comments down
11:35 - below
11:35 - but yeah that's how to animate multiple
11:37 - objects in python
11:41 - hey you yeah i'm talking to you if you
11:44 - learn something new
11:45 - then you can help me help you in three
11:48 - easy steps
11:49 - by smashing that like button drop a
11:51 - comment down below
11:52 - and subscribe if you'd like to become a
11:54 - fellow bro
11:56 - [Music]
12:15 - you