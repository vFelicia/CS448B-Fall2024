00:00 - yo what's going on everybody so today
00:02 - I'm going to discuss Lambda functions in
00:04 - Python a Lambda function is a small
00:07 - anonimous function for a onetime use
00:10 - then we throw them away they take any
00:13 - number of arguments but only have one
00:15 - expression a few of the benefits of
00:17 - Lambda functions is that they help keep
00:19 - the namespace clean because we don't
00:21 - have to think of a unique name for that
00:23 - function we're only going to use it once
00:25 - we don't need to give it a name and
00:27 - they're useful with something called
00:28 - higher order functions which we still
00:30 - need to talk about there sort map filter
00:34 - and reduce for example here's an example
00:36 - of a Lambda function that you may see
00:38 - within a map method we have Lambda our
00:42 - parameters colon our expression I
00:45 - haven't talked about the map function
00:46 - yet a Lambda function is a function you
00:49 - would commonly see within the map
00:51 - function a higher order function but
00:54 - that's a topic for a future video in
00:56 - this video we're going to focus more on
00:57 - the syntax of Lambda functions
01:00 - so what we'll do is we will create a
01:02 - variable let's say double we'll write a
01:05 - Lambda function to double a number
01:08 - following this formula we have to type
01:11 - the keyword Lambda to specify that this
01:13 - is a Lambda function we have our
01:15 - parameters we will accept one parameter
01:18 - which we will name X colon then a
01:21 - oneline expression let's say with X I
01:24 - would like to double it x * 2 so what
01:28 - we're doing is we're assigning a Lambda
01:30 - function to a variable although you
01:33 - could assign a Lambda function to a
01:34 - variable that's not the primary use of
01:37 - them you would more likely see Lambda
01:39 - functions within higher order functions
01:41 - like I said we're just covering the
01:43 - syntax of a Lambda function with this
01:45 - variable of double it contains a
01:48 - function meaning we can call it to
01:50 - demonstrate that I'm going to print my
01:53 - double variable since it contains a
01:55 - function within it we can call it we
01:58 - have to pass in one AR arent let's say
02:01 - two we will double two and print the
02:03 - result which gives me four if I were to
02:06 - double three that would give me six if I
02:09 - doubled four that gives me eight with
02:12 - Lambda functions we can have any number
02:14 - of arguments this time we'll create two
02:17 - arguments we will assign a variable of
02:20 - ADD and add two numbers together with a
02:22 - Lambda
02:23 - function Lambda our parameters are X
02:27 - comma y colon then expression let's add
02:31 - X and Y together x +
02:35 - y I will take my variable of add it
02:38 - contains a function within it I can call
02:41 - it but I have to pass in two arguments
02:43 - for X and Y let's add
02:46 - two and three then we have to print it
02:50 - in order to see
02:52 - it and the result is
02:56 - five let's write a more complicated
02:58 - expression
03:00 - we'll find the greater of two numbers I
03:03 - will create a variable of max value
03:06 - equals again following this
03:08 - formula Lambda then we need the
03:11 - parameters we'll compare two numbers X
03:14 - and Y we return x if x is greater than
03:20 - y else we will return y this is similar
03:24 - to a list
03:26 - comprehension I will print take my
03:29 - variable of max
03:31 - value call the Lambda function that's
03:33 - within it pass in two numbers what is
03:37 - the greater number between four and
03:39 - five
03:40 - five what about six and five well we get
03:44 - six okay let's do the opposite let's
03:47 - find the minimum
03:50 - value we have X and Y return x if x is
03:55 - less than y else
03:58 - Y what is the minimum value between 6
04:01 - and
04:03 - 7 6 what about between 8 and 7 seven
04:09 - we'll create a Lambda function to
04:11 - concatenate a string I will create a
04:13 - variable of full name equals Lambda we
04:18 - will have two parameters first meaning
04:20 - first name and last meaning last name
04:24 - we'll take our first name first plus a
04:27 - space plus the last last
04:31 - name I will print our full name variable
04:35 - call the Lambda function that's within
04:37 - it passing a first name and a last name
04:40 - I will pick SpongeBob last name
04:45 - SquarePants this will give me a full
04:47 - name of SpongeBob space SquarePants all
04:51 - one long string because we're using
04:53 - string
04:55 - catenation using a Lambda function we
04:57 - can check to see if a number is even
05:00 - I will create a variable of is
05:03 - even this will give us a
05:06 - Boolean
05:07 - Lambda X will be the parameter X modulus
05:12 - 2 modulus gives you the remainder of any
05:15 - Division if x is divisible by two that
05:19 - means there is going to be no remainder
05:21 - we can check to see if that is equal to
05:24 - zero so I will
05:26 - print our is even variable call the
05:30 - Lambda function that's within it let's
05:32 - see if the number four is even four
05:35 - divides by two evenly that's true but
05:38 - what about five that's
05:41 - false Let's do an age verification check
05:44 - I will create a variable of age check
05:48 - equals Lambda we have one parameter of
05:52 - age I will return
05:55 - true if our age is greater than or equal
05:59 - Al to
06:01 - 18 else we will return
06:04 - false I will print our age check
06:08 - variable and pass in
06:11 - 21 that returns true but what about 12
06:15 - that returns false all right everybody
06:18 - so those are Lambda functions they're
06:20 - small Anonymous functions for a one-time
06:22 - use they take any number of arguments
06:25 - but only have one expression using
06:27 - Lambda functions helps keep the space
06:30 - clean because we don't need to
06:31 - constantly think of different function
06:32 - names especially within a larger program
06:35 - and they're extremely useful with
06:37 - something called higher order functions
06:39 - such as sort map filter and reduce which
06:42 - we'll be covering in the next few videos
06:44 - and well everybody those are Lambda
06:46 - functions in Python