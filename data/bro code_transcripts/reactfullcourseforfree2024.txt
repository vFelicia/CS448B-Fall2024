00:00 - hey what's going on everybody it's your
00:01 - bro hope you're doing well and in
00:03 - today's video I'm going to show you
00:04 - everything you need to know to get
00:05 - started working with reactjs so why
00:08 - don't you go ahead and sit back relax
00:10 - and enjoy the
00:12 - show react is a JavaScript library not
00:16 - framework that's used to easily build
00:18 - and arrange user interfaces for web
00:21 - applications react focuses on building a
00:23 - web application using these things
00:25 - called components a component is a
00:27 - self-contained section of code that
00:29 - functions as as a reusable building
00:31 - block think of Legos you could say a
00:32 - Lego is similar to react component each
00:35 - Lego represents a section of reusable
00:37 - JavaScript and HTML code we can build a
00:39 - diarama or other complicated structure
00:42 - from these Legos if we use enough of
00:44 - them and in the correct places react
00:46 - uses a syntax extension of JavaScript
00:48 - known as jsx meaning JavaScript XML jsx
00:52 - allows you to write HTML like code
00:55 - within your JavaScript files react also
00:57 - utilizes a virtual Dom it's a
00:59 - lightweight version of the real Dom of a
01:01 - web page we can keep track of any
01:03 - changes made to the virtual Dom and only
01:05 - apply that specific change to the real
01:07 - Dom without needing to refresh the
01:09 - entire web page only that specific
01:11 - section this reduces rendering
01:13 - performance overhead before we do begin
01:15 - you will need to know JavaScript since
01:17 - react is a JavaScript library everything
01:19 - up to arrays classes objects and es6
01:22 - feature such as Arrow functions will be
01:24 - necessary HTML will also be mandatory
01:27 - since our react components involve
01:29 - rendering HTML elements and applying CSS
01:32 - I do have full free courses on my
01:33 - YouTube channel on these topics if you
01:35 - need to catch up or you need a refresher
01:37 - so that's a quick overview of react
01:38 - we'll move on to the installation
01:40 - instructions next we're going to
01:42 - download nodejs from this URL nodejs.org
01:46 - node.js is a backend JavaScript runtime
01:49 - environment it executes JavaScript code
01:51 - outside of a web browser we're mostly
01:53 - interested in the node package manager
01:55 - that comes with it let's download the
01:58 - latest version of node.js
02:01 - open it when the download is
02:06 - complete select next read the license
02:09 - agreement yes I did read it that fast
02:12 - next select a destination folder I'll
02:15 - keep it as
02:16 - is you can define a custom setup but
02:19 - that's outside of the scope of this
02:21 - tutorial series we'll press next we'll
02:24 - skip tools for Native modules press next
02:28 - and
02:28 - install
02:32 - then
02:33 - finish you'll also need a text editor I
02:36 - recommend vs code since you've made it
02:39 - this far in my web development series
02:41 - I'm assuming you already have one
02:42 - downloaded which you can get from this
02:44 - site code dovisual studio.com and select
02:46 - the correct download for your operating
02:48 - system within VSS code I'm going to
02:51 - create a project folder let's go to
02:53 - explore open folder just for convenience
02:57 - I'll place my project folder on my
02:59 - desktop
03:00 - I'll create a new folder I'll name mine
03:04 - website then we will select this
03:07 - folder we're going to need to open up
03:09 - command prompt if you're using Windows
03:11 - or terminal if you're on Mac you can
03:13 - also do this within vs code go to the
03:15 - hamburger menu up top terminal new
03:21 - terminal we within our website folder we
03:24 - will type the command npm meaning node
03:27 - package
03:28 - manager
03:30 - create vit at latest meaning latest
03:34 - version V's a development server it's a
03:38 - modern replacement to create react app
03:40 - which is now
03:42 - outdated hit
03:44 - enter we'll need a name for this project
03:47 - a common naming convention for a user's
03:49 - first react project is my react app
03:54 - that's a common name that you'll see
03:56 - enter select a framework using the arrow
03:59 - keys we can select whatever framework we
04:01 - would like to use we will select react
04:04 - hit enter are we going to use typescript
04:07 - or JavaScript we'll stick with plain
04:10 - JavaScript all right here are the last
04:12 - few commands and they are given to us
04:15 - we'll change the directory to our react
04:18 - app CD meaning change directory my react
04:23 - app and that's the name of the folder
04:25 - where our project is
04:27 - located npm install that is the second
04:35 - command the last command is npm runev to
04:39 - start the development server npm
04:43 - runev all right so our web server is
04:45 - found at this address let's copy it then
04:48 - open up a web browser let's paste that
04:51 - address and here we are within our
04:53 - development server this is a sample
04:56 - project that's given to us it even
04:58 - includes this little counter
05:01 - hey this is future bro I was editing
05:03 - this video and I totally forgot to
05:05 - mention how you can restart the server
05:07 - if you close out of it all you got to do
05:09 - is open up a terminal let's go to
05:10 - terminal new terminal we have to be sure
05:13 - that we're within our application folder
05:15 - I'm going to change my directory by
05:17 - typing CD the name of the folder my
05:21 - react
05:23 - app then npm run Dev to start the
05:27 - development
05:28 - server
05:30 - and let's refresh that yep it seems like
05:33 - it's working so yes I forgot to mention
05:35 - that that is all I'm quickly going to
05:37 - cover the project structure of our react
05:39 - application we'll begin with the node
05:41 - modules folder this folder contains
05:44 - external libraries and packages that our
05:46 - project relies on a few of which are
05:49 - build tools utility libraries routing
05:51 - libraries just to name a few we won't be
05:55 - spending any time directly in this
05:56 - folder but you should still be aware
05:58 - what it's for if it just contains
06:00 - external libraries and packages that our
06:02 - project relies on next we have the
06:04 - public folder the public folder contains
06:07 - any public assets one of which in here
06:10 - is a vit image it should be this image
06:12 - right here this folder can contain
06:15 - public fonts images videos they're not
06:18 - bundled during the final output they're
06:20 - typically available via a URL just to
06:23 - demonstrate I'm going to delete this
06:25 - image file and see what
06:27 - happens yep and that logo is gone so my
06:31 - vit logo was a public asset via a URL
06:35 - and let's put that
06:36 - back then we have the source folder
06:39 - we'll spend 99% of our time within the
06:42 - source folder we have an assets folder
06:44 - that can contain images and videos the
06:47 - assets folder is very similar to the
06:49 - public folder but files within the
06:51 - assets folder are bundled during the
06:53 - final output public assets are not and
06:55 - they're generally available via a URL my
06:59 - re act image is within the assets folder
07:02 - currently we have a main jsx file
07:05 - remember that jsx is Javascript XML in a
07:08 - way this functions as our main
07:10 - Javascript file react works with
07:13 - components we're adding a single
07:14 - component an app component which we are
07:18 - importing so let's take a look at our
07:20 - app component the app component in this
07:23 - example you could say is the root
07:24 - component we have two different
07:26 - stylesheets a stylesheet for app and we
07:30 - have an index CSS stylesheet this is the
07:32 - main CSS file for our application we're
07:35 - importing this file from our main jsx
07:38 - file right here so that's the source
07:40 - folder then we have an index HTML file
07:43 - this is the main entry point into our
07:45 - program within the body of our document
07:48 - we have a development with an ID of root
07:51 - as well as a script to our main jsx file
07:54 - a few other things you should know about
07:56 - is this package Json file Json file
07:59 - files are structured in key value pairs
08:01 - this file contains metadata about our
08:03 - project such as the project name the
08:06 - version number what build we're using
08:08 - we're using vit and the react version
08:11 - number just to name a few all right
08:14 - everybody so in just a moment we will be
08:15 - creating our first react component we
08:18 - already do have one component that is
08:20 - app right now this is serving as a
08:22 - sample project for us then we are
08:24 - importing app to main jsx this is our
08:28 - main J s x file think of it as the main
08:30 - JavaScript file we are creating a root
08:33 - element and including our app component
08:37 - within our app component we do have a
08:39 - function delete everything within this
08:45 - function that should eliminate our
08:47 - sample
08:49 - project and we no longer need these
08:52 - Imports we can delete them
08:54 - too but you do want to keep this export
08:57 - statement components can have dedicated
08:59 - stylesheets which you can see here for
09:01 - app CSS we are going to delete this
09:04 - because we no longer need
09:06 - it we do have an app component that's
09:08 - going to serve as the root we will add
09:10 - other components to our app component
09:12 - our app component ties them all together
09:15 - to create a new component go to your
09:16 - Source folder we're going to rightclick
09:18 - then go to new file we will create a
09:21 - component for a header the extension is
09:25 - jsx because it's a JavaScript XML file
09:30 - we will be working with function based
09:33 - components we will create a function
09:36 - with the name of header do pay attention
09:39 - to the
09:40 - capitalization then we would like to
09:42 - export this component so we can import
09:44 - it elsewhere at the end of this file
09:47 - type
09:48 - export default the name of the
09:52 - component header within our header
09:55 - function we can write a combination of
09:57 - JavaScript and HTML
09:59 - all we're going to do within this
10:00 - function is return something return
10:04 - parentheses semicolon within the return
10:07 - statement you can write pure HTML I will
10:10 - create a header
10:11 - element so react components they're only
10:14 - capable of returning a single element
10:17 - but you can place children elements
10:19 - within within our header element I will
10:21 - create an H1 element with text of my
10:27 - website just to be sure everything is
10:29 - working let's save I'm holding contrl s
10:32 - on Windows we will go to our app
10:34 - component then import the header
10:36 - component So within app we will type the
10:40 - statement import the name of the
10:43 - component
10:45 - header from a location that location is
10:49 - going to be do SL header.
10:54 - jsx we can now use this header component
10:57 - within our app component we will also be
10:59 - returning something so we will need a
11:02 - return statement return parentheses
11:04 - semicolon what are we going to return I
11:08 - would like to use my header component so
11:10 - to add a component we need a set of
11:13 - angle brackets then type the name of the
11:15 - component
11:18 - header like this they're a pair of two
11:22 - and the second one is closed that's why
11:24 - we have a forward slash preceding it we
11:26 - now have a header component you can
11:29 - shorten the syntax as well take your
11:32 - component end it with the forward slash
11:35 - that also works too it's a shorthand way
11:37 - of writing the same thing let's head
11:39 - back to our header component We'll add a
11:41 - few more
11:42 - elements after our H1 element let's
11:45 - create a navigation
11:47 - element then within the navigation
11:49 - element we'll create an unordered
11:52 - list within the unordered list we'll
11:54 - create a few list
11:57 - items the first will be
12:01 - home these are list items you would
12:03 - typically see for a navigation bar
12:07 - home
12:11 - about
12:15 - services and
12:17 - contact we now have our unordered list
12:21 - I'll enclose our list items within
12:23 - anchor tags to make them
12:25 - hyperlinks a hre equals
12:29 - I don't want these to go anywhere I'm
12:30 - just going to leave these empty I'll add
12:33 - a pound
12:34 - sign and then be sure to close these
12:37 - anchor
12:38 - tags we'll place our text within the
12:40 - anchor tag so they are now hyperlinks
12:43 - okay let's do that for the other list
12:53 - items there we are then after my
12:56 - navigation element I will add a
12:58 - horizontal rule to make it look
13:00 - nice okay there is our header component
13:04 - we no longer need to work with this
13:05 - header component we do have some styling
13:08 - already applied those Styles can be
13:09 - found within index.css if you would like
13:13 - to start fresh and eliminate all of
13:14 - these Styles you can delete everything
13:16 - from here then you do have HTML with no
13:20 - CSS in a future video I'll show you
13:22 - various ways in which we can apply CSS
13:24 - to a react component but for now we'll
13:26 - just keep this the same our head element
13:29 - is now complete we will create a new
13:31 - element for a footer again go to our
13:34 - source folder right click go to new
13:37 - file
13:38 - footer.
13:41 - jsx we are creating a function based
13:44 - component it's a function that's going
13:47 - to return a footer
13:50 - component then at the end of our script
13:53 - we will export default the name of the
13:56 - component footer so that we we can
13:58 - import it elsewhere our footer is going
14:01 - to return something so we need a return
14:04 - statement then within the set of
14:06 - parentheses we can return a single
14:08 - element we will return a footer
14:13 - element but remember you can place
14:15 - children elements within an element it
14:17 - still only counts as one then so what do
14:20 - we want to do for our
14:21 - footer I'll include a paragraph
14:27 - element
14:29 - within the paragraph element I'm going
14:30 - to add a copyright symbol to add a
14:32 - copyright Mark Type ampersand copy semi
14:36 - call
14:37 - in then afterwards I'll add your website
14:43 - name all right now we need to import
14:46 - this footer going back to our app
14:49 - component we will
14:51 - import
14:53 - footer from footer.
14:57 - jsx then I would like to include a
15:00 - footer component after the
15:03 - header now pay attention to
15:06 - this we're returning two
15:09 - components we have this warning we only
15:12 - have the capability of returning a
15:14 - single component that's how our return
15:16 - statements are designed jsx elements
15:18 - must be wrapped in an enclosing tag do
15:21 - you want a jsx fragment so since we only
15:25 - have the capability of returning a
15:26 - single enclosing tag we're we're going
15:28 - to enclose our components with what's
15:30 - known as a
15:32 - fragment it's just an empty set of ankle
15:35 - brackets so we will enclose all
15:37 - components within a
15:40 - fragment and that should work we have
15:42 - our footer component following our
15:44 - header component we have our
15:47 - header and our footer let's make a few
15:50 - more changes to our
15:52 - footer I'm going to zoom out a little
15:55 - bit within our return statement we can
15:57 - insert some Javas script to insert some
16:00 - JavaScript you need a set of curly
16:02 - braces I will create a new date object
16:06 - this is some JavaScript code
16:09 - new date parentheses I would just like
16:13 - the year I will follow this object with
16:16 - get full year method let's save and take
16:20 - a look so I'm filming this video near
16:23 - the end of 2023 your web application
16:26 - should return the current year when ever
16:28 - you're watching this all right our
16:30 - footer component is now
16:32 - done I'm going to create a component for
16:35 - a unordered list to sandwich between our
16:37 - header and our footer I'll create a
16:40 - component for food we will go to our
16:42 - source folder create a new file this
16:46 - component will be food.
16:50 - jsx again we are creating a function
16:53 - based component with the name of
16:57 - food then we will export this component
16:59 - when we're done export default
17:03 - food be sure to add a return
17:07 - statement before we add anything to the
17:09 - return statement I will create some
17:11 - JavaScript variables so normally if
17:14 - you're adding JavaScript code within the
17:16 - return statement you need a set of curly
17:18 - braces but outside of the return
17:20 - statement you don't I will create two
17:23 - JavaScript constants const food one pick
17:28 - some food for me I will pick an
17:31 - orange let's make that
17:34 - Capital all right then let's create a
17:36 - second food
17:38 - variable food 2 for me will be a
17:42 - banana within the return statement we
17:44 - can utilize these
17:46 - constants what do we want to return
17:49 - exactly I will return an unordered
17:54 - list we'll have a few list
17:57 - items three to be
18:00 - exact my first list item I'll just add
18:03 - some text I'll add an
18:05 - apple just to be sure that everything is
18:08 - working let's import this food component
18:10 - from our app
18:12 - component again we need an import
18:14 - statement import food from food. jsx we
18:20 - can now use the food component we will
18:23 - add that after the header we will add
18:27 - food then here is our first list item an
18:30 - apple okay let's head back to our food
18:33 - component for our second list item I
18:35 - will add food one that's our constant
18:38 - now pay attention to this if I type food
18:40 - one well we're literally printing the
18:43 - text food one since we're within our
18:45 - return statement I would like to include
18:47 - some JavaScript code we're including a
18:49 - JavaScript variable so I need to enclose
18:53 - this variable within a set of curly
18:55 - braces because we're within the return
18:57 - statement and now now my second list
18:59 - item is an orange then let's include
19:02 - food 2 but I'm going to add one more
19:04 - thing food 2 however I'm going to use
19:08 - the builtin 2 uppercase method just to
19:12 - demonstrate that we can use JavaScript
19:14 - functions all right and there is our
19:16 - unordered list we have an apple orange
19:18 - and a
19:19 - banana so these components are now
19:21 - complete and the cool thing about react
19:23 - as well is that we can keep on reusing
19:25 - these components if we would like I
19:27 - would like a couple food components so I
19:29 - will just paste another component we now
19:31 - have two food components or even three
19:34 - or
19:35 - four you can rearrange these components
19:38 - however you would like by rearranging
19:40 - them we can change the feel and style of
19:42 - our web application for demonstration
19:44 - purposes I will put our footer on the
19:46 - top that doesn't make any sense but I
19:48 - just want to demonstrate so our footer
19:51 - is now on the top followed by the header
19:53 - then the food component or maybe I would
19:56 - like the food component on top
20:00 - we now have our food component footer
20:03 - component then our header
20:06 - component all right everybody that is an
20:08 - introduction to react react is all about
20:11 - reusing components a component is a
20:14 - small section of code that can include
20:16 - JavaScript and HTML your function will
20:19 - return that code and make it reusable
20:21 - and that is your introduction to
20:25 - react hey what's going on everybody and
20:28 - today's video I'm going to get a little
20:29 - more in depth with creating components
20:31 - and by the end of this topic we will be
20:33 - creating our own card component so sit
20:36 - back relax and enjoy the
20:39 - show in today's topic I'm going to get a
20:41 - little more in depth with react
20:43 - components as we've discussed in the
20:45 - previous topic a component is a section
20:47 - of reusable jsx code it's HTML like code
20:51 - that can contain JavaScript I thought
20:53 - today we could create some card
20:54 - components card components are fairly
20:56 - popular with react app applications
20:59 - typically they involve a picture a title
21:01 - and a description you can use cards for
21:03 - all sorts of things in the previous
21:05 - topic we did delete all of the contents
21:07 - within our app function let's go ahead
21:09 - and do that now if we haven't already
21:11 - and we'll delete these Imports we will
21:13 - not need them for this lesson in the
21:15 - previous topic we did have a stylesheet
21:17 - for our app component we can delete this
21:19 - too we are now ready to begin within our
21:23 - source folder we will create a new file
21:26 - the name of the component will be card
21:28 - this is a jsx file jsx meaning
21:31 - JavaScript XML our components will be
21:34 - function based function type the name of
21:37 - the component card parenthesis then
21:40 - curly
21:42 - braces we will be exporting this
21:44 - component so that we can import it
21:46 - elsewhere so type export default the
21:49 - name of the component
21:51 - card within our card function we will be
21:54 - returning some HTML like code
21:59 - we'll begin with the div
22:03 - element we will be applying some CSS
22:06 - Styles we will need to set the
22:08 - class however with jsx class is a
22:12 - reserved keyword to set an elements
22:14 - class we have to instead use class name
22:17 - do pay attention to the capitalization
22:19 - the N is
22:20 - uppercase okay we will set this div
22:23 - section equal to
22:26 - card so cards typically have an image
22:29 - we'll include an image element we'll set
22:32 - the source
22:34 - later they usually have a title we'll
22:36 - use an H2 element and a description
22:39 - we'll include a
22:40 - paragraph for our H2 title why don't you
22:43 - go ahead and type in your name I'll type
22:45 - in my YouTube channel name but feel free
22:47 - to use your own
22:49 - name then let's add a description for
22:52 - the description of Year card type in
22:54 - what you do for a living or if you're a
22:56 - student what are you studying for me
22:59 - personally I make YouTube
23:03 - videos and add a hobby of viers I make
23:07 - YouTube videos and play video
23:12 - games so far so good let's import our
23:15 - card component just to be sure that it's
23:17 - working within our app component I will
23:20 - at the top import the name of the
23:22 - component card from a file location
23:27 - these files are right next to each other
23:29 - so I will
23:31 - type SLC card.
23:36 - jsx within our app component we will
23:39 - return within the return statement list
23:42 - the component we would like to return we
23:45 - will return our card component to
23:47 - include a component within angle
23:49 - brackets type the name of the
23:51 - component these are typically in
23:54 - pairs you need an opening tag and a
23:56 - closing tag and there's our card so far
23:59 - we'll be applying some CSS styling
24:02 - momentarily there is a shortcut in place
24:04 - of using an opening and closing
24:06 - tag take the opening tag end it with a
24:10 - forward slash that's also valid let's
24:13 - head back to our card component we'll
24:15 - include an
24:16 - image within our opening image tag it is
24:19 - good practice to set the alt attribute
24:22 - just in case this image can't be
24:23 - displayed or if somebody is using a
24:25 - screen reader the alternate text will be
24:28 - displayed or read out loud will include
24:30 - a profile picture for us let's set the
24:33 - alternative text to be profile
24:37 - picture we're going to set the source
24:42 - attribute now I recommend pausing the
24:44 - video and finding a profile picture of
24:46 - yourself from you know Facebook or
24:48 - Twitter or whatever you use for social
24:50 - media pick a smaller picture something
24:53 - around 200 x 200 pixels would be decent
24:56 - if you don't want to follow along you
24:58 - can include a placeholder image just for
25:00 - this lesson which you can get from this
25:02 - site this will be an external URL https
25:06 - colon to slashes Via
25:11 - placeholder doc1 15 that will give you a
25:15 - placeholder image otherwise if you have
25:18 - an image you would like to use I'm using
25:20 - the profile picture from my YouTube
25:21 - channel all we got to do is place this
25:24 - image within our assets
25:26 - folder
25:29 - from our card class we will import that
25:33 - image
25:35 - import then we need a name for this
25:38 - import I'll name my import profile pick
25:44 - from a
25:46 - location so we need to navigate to the
25:49 - assets directory then get our
25:53 - image slash the assets directory slash
25:57 - the the name of the image so mine is
25:59 - profile and it's a JPEG yours is likely
26:02 - going to be different do pay attention
26:03 - to
26:04 - that profile.
26:07 - jpeg for the source
26:11 - attribute I will set the SQL to a set of
26:13 - curly braces then we will include our
26:16 - profile pick that we're
26:19 - importing there's my profile picture
26:22 - depending on the dimensions of your
26:24 - profile picture it might be fairly big
26:26 - you may want to choose a smaller image
26:28 - or otherwise within our CSS file we can
26:31 - change the dimensions of the picture
26:33 - okay let's head to our CSS stylesheet we
26:36 - already do have some Global CSS
26:38 - properties already applied but I'd like
26:40 - to start fresh let's delete everything
26:42 - within the CSS stylesheet that should
26:45 - eliminate all CSS within our web
26:47 - page we will select the name of the
26:50 - class card remember that with jsx we use
26:54 - class name not
26:56 - class with within our index CSS
26:58 - stylesheet let's select our card class
27:01 - I'm going to go through these CSS
27:03 - properties real quick we should already
27:05 - have some experience with CSS okay let's
27:07 - add a border border one pixel
27:12 - solid I'll set this to be
27:14 - black I do like using hsl values I'll
27:18 - pick a light gray
27:20 - color let's set the lightness to about
27:22 - 80 for the
27:25 - Border I'll set the Border radi to be 10
27:28 - pixels to round the corners the corners
27:31 - should now be rounded as you can see
27:33 - here I'll add a box
27:36 - Shadow the first value is for the
27:39 - horizontal offset the second is for the
27:41 - vertical offset the third value is for
27:44 - the blur
27:46 - radius I'm going to pick a lighter color
27:48 - though so I'm going to select black
27:51 - change this to an hsl
27:54 - value but I'm going to change the
27:56 - transparency to be
28:00 - 10% so 0.1 that is not bad
28:04 - looking okay let's add a little bit of
28:07 - padding 20
28:09 - pixels padding is found between the
28:12 - elements and the border so if I were to
28:15 - increase this we have more padding but
28:17 - let's stick with
28:19 - 20 I'll add some
28:21 - margin margin is for the space outside
28:24 - of the Border let's go with 10 pixels
28:28 - I'll text align Center to Center the
28:30 - elements within text align
28:33 - Center I'll set a Max width for the
28:37 - card to be 250
28:40 - pixels then I will set the display to be
28:44 - an inline
28:46 - Block in case we have more cards they'll
28:49 - at least flow within our container if we
28:50 - have
28:51 - more because normally divs are Block
28:54 - Level elements okay so let's work on the
28:56 - card image
28:57 - next we'll head back to our card
29:00 - component
29:01 - class we'll add a class name to the
29:04 - image element class name
29:10 - equals let's say card image go back to
29:14 - our CSS stylesheet we are accessing our
29:18 - cards class then access the card image
29:21 - class
29:23 - within I will set a Max width I will set
29:26 - a Max WI width to be 60% of the width
29:30 - available I will set the height to be
29:33 - Auto to automatically resize if you
29:37 - would like a circular image you can set
29:39 - the Border radius to be
29:43 - 50% I'll add a little bit of margin on
29:45 - the bottom with margin bottom 10
29:51 - pixels all right let's work on our title
29:53 - next going back to our card
29:56 - component let's add a class
30:00 - name the class name will be
30:03 - card-
30:05 - title going back to our CSS
30:09 - stylesheet we will select our card class
30:12 - then select the card title
30:16 - class with my card title I will set a
30:18 - font family to be pick a font I like
30:22 - Ariel I'll set a backup of s serif in
30:26 - case Ariel can't be displayed for some
30:28 - reason I'll set margin to be zero to
30:32 - remove any
30:34 - margin I'll set the text color to we'll
30:37 - set the color property to be pick a
30:40 - color again I'm using hsl
30:43 - values I'll set the lightness to be
30:47 - 20% now let's change our card text going
30:50 - back to our card
30:52 - component within our paragraph element
30:54 - we will set the class name to equal
30:59 - card-
31:01 - text going to our CSS
31:03 - stylesheet we will access the card class
31:07 - then access the card- text
31:11 - class I'll set the font family to be
31:13 - aerial as
31:15 - well and I will change the
31:18 - color I'll set the lightness to be 40%
31:21 - again I'm using hsl
31:23 - values uh maybe
31:25 - 30 I would say that looks decent enough
31:29 - we have now created and styled a card
31:32 - component within our app component we
31:34 - can reuse the card component however if
31:37 - I were to add
31:38 - another Well jsx elements must be
31:41 - wrapped in an enclosing tag our return
31:43 - statements are only designed to return a
31:46 - single element you can enclose all
31:48 - elements within what is known as a
31:50 - fragment it's an empty set of angle
31:54 - brackets then technically we're only
31:56 - returning a single El element we now
31:58 - have two cards however they are
32:00 - identical though and we can use this
32:02 - card component whenever we want I can
32:04 - include four if I would like all right
32:07 - everybody so that is us making a card
32:09 - component in the next video I'll discuss
32:11 - props where each component can have
32:13 - different values because we don't want
32:15 - all of our components to look the same
32:17 - and that was some react practice by
32:19 - making a card
32:24 - component yo what's going on everybody
32:27 - so in today's video I'm going to show
32:28 - you a few ways in which we can style
32:30 - react components with CSS this topic
32:33 - doesn't include external Frameworks such
32:35 - as Tailwind or pre-processors such as
32:38 - SAS I'm going to cover a few of the more
32:40 - basic techniques including external
32:43 - modules and inline CSS styling we will
32:46 - need a component to work with let's
32:47 - begin with a button component let's go
32:49 - to our source folder new file button.
32:54 - jsx we'll create a function based comp
32:57 - component because we like function based
32:59 - components be sure to export it because
33:02 - I sometimes forget to do that so let's
33:04 - do it now export default the name of the
33:08 - component then we will
33:10 - return a single button
33:16 - element with text that says click me
33:20 - normally when setting a CSS class you
33:22 - use the keyword class however in jsx
33:25 - that's a reserved keyword
33:27 - we'll instead use class name with a
33:30 - capital N I'll set my class name to be
33:35 - button all right then we just need to
33:38 - import this button component going back
33:40 - to our app component that's the parent
33:43 - we will import button from its
33:48 - location SL button. jsx and now we have
33:53 - a button component to work
33:55 - with there's my button let's begin with
33:58 - external CSS styling we should already
34:00 - be a little familiar with it already
34:02 - heading to our index CSS stylesheet we
34:05 - can apply some Global Styles we will
34:07 - select the class name of button dot to
34:10 - select a class button let's apply the
34:14 - following CSS properties but feel free
34:16 - to make any changes or alterations I
34:19 - will begin with a background color I've
34:21 - already pre-picked a color personally I
34:23 - like using hsl
34:25 - values 200 for the Hue 100% for the
34:31 - saturation 50% for the lightness that
34:34 - will give you a light blue color for the
34:36 - font color that would be the color
34:38 - property I will set that to be
34:41 - white for
34:43 - padding let's say 10 pixels by 20
34:48 - pixels border radius to round the
34:50 - corners I will set that to be five
34:54 - pixels border none to remove the
34:58 - Border then let's change our cursor to
35:01 - be a pointer when we hover over the
35:04 - button that's not a bad looking button I
35:07 - am zoomed in to like 300% just for this
35:10 - demonstration all right we have utilized
35:12 - an external CSS stylesheet they're easy
35:15 - to use for simple projects such as
35:17 - making a YouTube video tutorial it gives
35:20 - you flexibility with media queries and
35:21 - pseudo selectors you can use external
35:24 - stylesheets to apply Global Styles
35:26 - throughout your application however
35:28 - using external stylesheets can lead to
35:30 - naming conflicts especially when you
35:32 - have more components and classes to work
35:33 - with if you have a large web application
35:36 - you'll likely have all sorts of
35:37 - different buttons you would need a
35:39 - strong naming convention and good
35:41 - organization two buttons you may create
35:44 - might have the same class Name by
35:45 - mistake and with large applications it
35:47 - might be difficult to keep track of all
35:49 - the different class names moving on to
35:51 - Method two let's cut all of these
35:53 - properties save we're going to create a
35:56 - module now that's the second method
35:59 - we'll create a dedicated CSS stylesheet
36:02 - specifically for each component what you
36:05 - may see some developers do is they'll
36:07 - create a new folder specifically for
36:09 - their component let's create a new
36:12 - folder which we will name button the
36:14 - name of our
36:15 - component let's move our button
36:17 - component to the button folder let's
36:20 - move it be sure to update any Imports as
36:23 - well my app component is now importing
36:26 - the button component from the button
36:29 - directory within our button folder we'll
36:32 - create a new file this will be a CSS
36:34 - stylesheet which we will name the name
36:37 - of the component in this case
36:39 - button. module.
36:43 - CSS let's paste all of those properties
36:45 - that we cut
36:46 - before now from our button component we
36:50 - will need to import this module at the
36:53 - top we will import styles
36:57 - from the location of that
36:59 - module
37:01 - SL
37:03 - button. module.
37:06 - CSS for our class name we will use a set
37:09 - of curly braces to use a dynamic
37:13 - value our class name will equal our
37:16 - import of styles dot the name of the
37:19 - class
37:23 - button and there's our button again the
37:26 - thing about modules is that it avoids
37:28 - naming conflicts because a unique class
37:30 - is going to be generated for you via a
37:32 - hashing algorithm if I were to right
37:34 - click on this button and go to
37:37 - inspect this class name is unique it's
37:40 - generated via a hash so with modules we
37:43 - don't have to worry about naming
37:45 - conflicts modules are also convenient if
37:47 - each component has its own unique style
37:50 - however a few of the downsides though
37:52 - with using modules is that it does
37:54 - require additional setup and Global
37:56 - Style aren't applied easily you would
37:58 - have to import them from elsewhere and
38:00 - that's a whole thing let's remove our
38:02 - button component from the button
38:03 - directory let's put it back in
38:06 - source and delete our button
38:10 - directory going to our button component
38:13 - then remove the import as well we don't
38:15 - need that anymore now we're going to use
38:17 - inline
38:19 - Styles what you see some people do is
38:21 - they'll create a JavaScript object named
38:25 - styles Styles equals a set of curly
38:28 - braces for an object let's paste all of
38:31 - those CSS properties we're within jsx
38:34 - code right now we can't use any dashes
38:37 - we'll switch to a camel case naming
38:43 - convention all values Should Be
38:55 - Strings each property should be comma
39:03 - separated let's remove our class
39:06 - name we will set the style attribute to
39:10 - equal use a set of curly braces to
39:13 - insert a dynamic value we will insert
39:16 - our Styles object that contains all of
39:18 - these CSS properties and now we have
39:21 - done inline CSS styling inline CSS
39:24 - styling is convenient and easy easy to
39:27 - understand it prevents Global style
39:28 - conflicts because we're not working with
39:30 - class names it's great for isolated
39:32 - components with minimal styling such as
39:35 - a like button or a subscribe button
39:37 - however inline styling can be
39:39 - increasingly Less maintainable in large
39:41 - applications it reduces the readability
39:44 - of your components especially if you
39:45 - have a lot of CSS properties it's not
39:48 - great for any complex styling such as
39:50 - responsive CSS it tends to be better for
39:52 - components with minimal styling all
39:55 - right everybody so those those are three
39:56 - different ways in which we can style
39:58 - react components with CSS external which
40:01 - is great for Global Styles or small
40:03 - projects modules which is preferred for
40:06 - individual components that have their
40:08 - own unique Styles and inline which tends
40:11 - to be good for any small components with
40:13 - minimal styling use what's best for your
40:15 - project or your own personal preference
40:17 - or whatever your team prefers if you're
40:19 - working on a project together there's no
40:21 - one siiz fits-all approach unfortunately
40:23 - myself I prefer to use modules but
40:25 - throughout the series I'm going to be
40:27 - using a lot of external CSS just because
40:29 - our projects are really small and well
40:31 - everybody those are a few ways in which
40:33 - you can style react components with
40:39 - CSS hello everybody so today I got to
40:42 - explain props props short for properties
40:45 - they are readon properties that are
40:47 - shared between components a parent
40:50 - component can send data to a child
40:52 - component when you include a component
40:54 - within a parent you can send that that
40:56 - child component key value pairs in the
40:59 - last video we made cards but all of our
41:01 - cards were identical using props we can
41:04 - send a child component individual values
41:07 - so that they're all unique let's go over
41:09 - an example we're within our app
41:11 - component I will create a new
41:13 - component let's go to our source folder
41:16 - go to new file we will create a
41:18 - component for students to display
41:20 - student data student.
41:25 - jsx we need to create a function
41:27 - function student parenthesis curly
41:30 - braces then don't forget to export
41:33 - default the name of the component
41:35 - student in order for this component to
41:38 - accept props this function needs a props
41:41 - parameter props is going to be a
41:43 - JavaScript object so let's add our
41:46 - return statement we'll include a few
41:48 - HTML
41:50 - elements we'll start with a
41:52 - div within our div I will include a
41:55 - paragraph element
41:57 - within our paragraph We'll add the text
41:59 - Name colon space we'll include a set of
42:03 - curly braces to inject some JavaScript
42:06 - let's take our props this is an object
42:09 - access the name property however we
42:12 - still need to pass in a value for the
42:14 - key name so heading back to our app
42:17 - component we need to import the student
42:19 - component let's do so at the top import
42:23 - student from the location where the
42:26 - student file is
42:29 - found/ student.
42:33 - jsx let's include a student component
42:36 - within our app
42:38 - component
42:40 - student now if I would like to send some
42:43 - data to my student component student is
42:45 - going to be the child in this case app
42:47 - is the parent we'll need to list key
42:50 - value pairs the key will be name equals
42:54 - some value for the value associated with
42:57 - the name key let's say
43:00 - SpongeBob when I save and update
43:02 - everything we have the name
43:05 - SpongeBob when we send key value pairs
43:07 - to a component they're all stored within
43:10 - this props object to get the value
43:12 - associated with the key you type props
43:15 - dot the name of the key that will give
43:18 - you the associated value on my web page
43:20 - I'm going to zoom in a little bit just
43:21 - so you can see it that's good for now
43:24 - heading back to our app component
43:26 - let's send another key value pair let's
43:28 - send an age if you're going to store
43:31 - some data as a value if it's not a
43:33 - string literal you got to enclose it
43:35 - within curly braces let's say Spongebob
43:38 - his age is 30 we now have access to this
43:41 - age key heading back to our student
43:44 - component let's create a new
43:46 - paragraph age colon space to include
43:50 - some JavaScript we got to use a set of
43:52 - curly braces we are accessing the props
43:55 - object do access the key of age
44:00 - SpongeBob's age is
44:01 - 30 okay let's send is student is
44:04 - SpongeBob a student we'll create a key
44:07 - of is student equals add a set of cly
44:12 - braces is student will be a Boolean true
44:15 - or false SpongeBob is in boting school
44:17 - currently he is a student let's save
44:21 - heading back to our student component
44:24 - I'll include a new paragraph
44:27 - student colon space curly
44:31 - braces props do is student SpongeBob is
44:36 - a student that is true however our
44:39 - Boolean is not displaying so with a
44:42 - Boolean I recommend using the trary
44:45 - operator if is student within props is
44:49 - true then we'll return a string literal
44:52 - of yes otherwise we'll return a string
44:56 - literal of
44:57 - no let's update everything yes SpongeBob
45:01 - is a student you can place complex
45:04 - JavaScript code within your HTML code
45:06 - booleans don't display directly to the
45:08 - Dom you typically find them used within
45:11 - tary operators or some sort of
45:12 - conditional if some value is true return
45:16 - or do this if not do something else now
45:19 - if I were to pass in a Boolean value of
45:22 - false well that will change to no
45:25 - SpongeBob is not a student let's change
45:28 - that back to
45:29 - true now before I include a few more
45:31 - components I'm going to do a little bit
45:32 - of CSS styling just so that all of this
45:35 - is going to be more readable I'm going
45:37 - to zoom out to 100% where it was
45:40 - originally within my student component
45:43 - within the enclosing div element I will
45:46 - set a class name remember that with jsx
45:49 - you have to use class name not class
45:51 - because class is a reserved
45:54 - keyword let's name this class
45:57 - student then heading to our CSS
45:59 - stylesheet index.css feel free to clear
46:02 - out anything within here I will select
46:05 - the class of
46:07 - student I'll change the font family to
46:11 - be aiel I'll add a backup of s serif in
46:15 - case aiel can't display for some
46:18 - reason let's change the font size to 2
46:22 - em for 200% I'll add a little bit of
46:25 - padding
46:26 - 10
46:28 - pixels I'll add a
46:30 - border border one pixel
46:33 - solid pick a color I like hsl
46:37 - values I'll set the transparency down a
46:40 - little bit to like
46:42 - 80% let's go with like 50%
46:45 - lightness I'll remove any margin around
46:48 - the paragraph elements we are accessing
46:50 - the class student then access any
46:53 - paragraph
46:54 - elements margin
46:56 - zero okay that's not too bad so this is
47:00 - a student component to display some
47:02 - student data we'll reuse the student
47:04 - component but pass in different data
47:06 - each
47:07 - time we'll create a new student
47:12 - component this Student's name will be
47:17 - Patrick Patrick's age Patrick will be
47:22 - 42 is Patrick a student is student
47:26 - I will set that to be false let's update
47:29 - our web application and there is
47:31 - Patrick's data name Patrick age 42
47:35 - student no let's add a few
47:39 - more
47:41 - student name
47:44 - equals
47:46 - Squidward Squidward's age will be
47:51 - 50 is
47:54 - student Squidward will not be a student
47:56 - that will be
47:58 - false then let's add Sandy she'll be the
48:01 - last
48:04 - student student
48:07 - name equals
48:10 - Sandy sy's
48:12 - age will be
48:16 - 27 is Sandy a student she will be that
48:20 - will be true there we are all right we
48:23 - have created four student components
48:26 - each has different values depending on
48:27 - what we pass into props we're going to
48:30 - move on to prop types prop types prop
48:34 - types are a mechanism that ensures that
48:36 - the past value is of the correct data
48:38 - type for example within props we have an
48:41 - age we would like to ensure that the age
48:44 - value passed in is a number not a string
48:47 - or a Boolean if it isn't then react can
48:50 - emit a warning within our console mostly
48:52 - for debugging purposes if you're working
48:55 - with props it is good practice to also
48:57 - use prop types so here's how to create
49:00 - prop
49:01 - types after our student function we'll
49:04 - type the name of the component
49:07 - student. prop
49:10 - types equals curly
49:13 - braces now we do have to import prop
49:16 - types it's found within the node modules
49:19 - folder where is it this should be an
49:22 - alphabetical order there it is prop
49:24 - types
49:28 - at the top of our jsx file we will
49:30 - import prop
49:32 - types
49:34 - from prop types
49:38 - prop-types within our prop types I would
49:41 - like to ensure that any name passed in
49:44 - is going to be a string if it's not
49:46 - we'll issue a warning within our
49:48 - console Name colon
49:51 - space prop
49:53 - types. string
49:56 - let's do this with age age will be a
49:58 - number age colon
50:00 - space prop types.
50:05 - number then is student is student will
50:08 - be a Boolean is student colon space prop
50:13 - types dob for
50:16 - Boolean all right and those are our prop
50:18 - types heading back to our app component
50:21 - for SpongeBob's age if I don't pass in a
50:23 - number let's say I pass in a string a
50:25 - string of 30 well this won't prevent the
50:28 - program from running but it will issue a
50:31 - warning within our console if we
50:33 - rightclick go to inspect go to
50:37 - console we can see a warning failed prop
50:40 - type invalid prop age of type string
50:44 - supplied to student expected number and
50:47 - here's a location so this is good for
50:49 - debugging it won't stop the application
50:52 - from running just issue a warning it is
50:55 - good practice ice to include prop types
50:56 - if you're accepting props then lastly
50:59 - we're going to discuss default
51:02 - props default props are default values
51:05 - for props in case they are not passed
51:08 - from the parent
51:09 - component let's say we create a new
51:11 - student component but we don't pass in a
51:13 - name we can add a default value such as
51:16 - guest just in case that value isn't
51:18 - passed in one way or
51:21 - another okay let's add default props
51:24 - down here
51:29 - student. default
51:32 - props
51:34 - equals set of curly braces for the name
51:38 - the default value will be
51:42 - guest age will be
51:46 - zero is
51:48 - student will be
51:51 - false to test this let's go to our app
51:54 - component
51:56 - we'll create a new student component but
51:58 - don't pass in any props we'll create an
52:01 - empty student component with no
52:04 - props that appears to work the name is
52:06 - guessed the age is zero student is set
52:09 - to know so if I were to include a name
52:12 - let's say name equals
52:16 - Larry well Larry's name is going to be
52:18 - set we didn't include any key value
52:21 - pairs for age or is student we ended up
52:23 - using the default values zero and no all
52:27 - right everybody so those are props they
52:29 - are readon properties that are shared
52:31 - between components a parent component
52:34 - can send data to a child component when
52:37 - you include a component you can send
52:39 - that component key value pairs which
52:41 - allows you to reuse that component but
52:43 - have unique data and those are props
52:45 - with
52:48 - react hey sup everybody in today's video
52:51 - I'm going to give you an introduction to
52:54 - conditional rendering in react
52:56 - conditional rendering allows you to
52:57 - control what gets rendered in your
52:59 - application based on certain conditions
53:01 - by utilizing conditional rendering we
53:03 - can show hide or change components
53:06 - here's an example we'll create a user
53:09 - greeting
53:10 - component let's go to our source folder
53:13 - new file user greeting and this will be
53:18 - a jsx
53:19 - file I will be using function based
53:22 - components function the name of the
53:24 - component
53:25 - user
53:26 - greeting we will have one parameter
53:30 - props we learned about props in the last
53:32 - video before I forget I'm going to
53:35 - export default the component name just
53:39 - so that we can import it later heading
53:41 - back to our app component we will return
53:44 - a user greeing
53:47 - component user greeting by using props
53:51 - we'll send two key value pairs to our
53:53 - user greeing component
53:55 - is logged in this will be a Boolean
53:59 - value we'll check to see if we're logged
54:01 - in or not and a username username equals
54:07 - this is a string so we do not need a
54:09 - placeholder type in your name or
54:12 - username then we do need to import user
54:16 - greeting import user greeting from a
54:22 - location. slash user
54:26 - greeting.
54:31 - jsx let's save everything head to our
54:34 - user greeting component we have these
54:36 - two key value pairs that are stored
54:38 - within our props object I'll use an if
54:41 - statement to check to see if we're
54:42 - logged in or not if props is an object
54:47 - we will access props followed by dot is
54:52 - logged
54:53 - in is this true or not not if it is then
54:57 - let's return an H2 element with text of
55:02 - Welcome I'd like to include some
55:04 - JavaScript I'll use curly
55:06 - braces let's take props dot our
55:11 - username let's see if this
55:13 - works welcome bro code or whatever your
55:16 - name
55:17 - is so what if we're not logged in I will
55:20 - set is logged in to be
55:23 - false well nothing appears to happen
55:26 - going back to our user greeting let's
55:29 - add an else
55:30 - statement else we will return an H2
55:34 - element with text of please log in to
55:41 - continue please log in to continue
55:44 - within our function based component we
55:46 - can check some logic using an if
55:48 - statement if some condition is true
55:50 - return this if not return something else
55:54 - now Technic technically you don't need
55:55 - the else statement you could just say
55:58 - return because when you return you exit
56:01 - this would work
56:03 - too as you can see I don't think it's as
56:06 - explicit as using an lse statement
56:09 - another option is to use the tary
56:11 - operator which we learned in
56:13 - JavaScript we will
56:17 - return check props do is logged in add a
56:22 - question mark is this true or is it
56:24 - false
56:25 - if it's true then we'll return an H2
56:27 - element that says
56:30 - welcome I'll add some
56:32 - JavaScript props do
56:36 - username I'm going to close this menu
56:38 - just so we can see if this condition is
56:41 - true return this otherwise add a colon
56:45 - we'll return something
56:48 - else we'll add an H2
56:50 - element please log
56:53 - into
56:56 - continue this statement is pretty
56:58 - lengthy I'm going to put each part of
57:00 - the statement on a new line just so we
57:02 - can read it
57:06 - easily if is logged in is true return
57:10 - this H2 element if not return this H2
57:14 - element currently we're logged in that
57:17 - is true if I set this to be
57:20 - false well then we get that login prompt
57:23 - please log in to continue you'll more
57:25 - commonly see people use tary operators
57:28 - rather than IFL statements just because
57:29 - they're more concise let's apply some
57:32 - CSS
57:33 - styling going back to our app component
57:35 - we'll set is logged in to be
57:38 - true We'll add a class name to each of
57:40 - these H2 components class name equals
57:45 - the first H2 element if our condition is
57:47 - true we'll have a class name of Welcome
57:51 - Dash
57:53 - message
57:55 - our second H2 element will have a class
57:57 - name of login D
58:01 - prompt going to our CSS stylesheet let's
58:05 - select the class of Welcome
58:07 - message I'll apply the following CSS
58:10 - properties let's set the font size to be
58:13 - 2.5
58:16 - em I'll change the background
58:20 - color I like using hsl
58:23 - values
58:27 - I'll go with this shade of
58:29 - green let's change the font color to be
58:33 - white I'll add a little bit of padding
58:36 - 10
58:38 - pixels I'll add a border radius around
58:41 - the
58:44 - corners then set margin to be
58:48 - zero here is our user greeting component
58:52 - if the user is logged
58:53 - in let's style the login prompt class
58:58 - next do login prompt really I'll just
59:01 - copy these properties but we'll change
59:03 - the background
59:04 - color let's change the background color
59:07 - to be
59:08 - red all right let's set is logged in to
59:11 - be
59:12 - false then our user greeing component
59:14 - should have those different CSS
59:18 - properties please log in to continue if
59:21 - I set that to be true well then we're
59:24 - logged in welcome your
59:27 - username within our user greeting this
59:29 - tary operator is very verbose here's
59:33 - another way in which we can use the tary
59:35 - operator in this
59:36 - situation let's create two constants
59:39 - const the first will be welcome
59:42 - message be sure not to include any
59:44 - dashes
59:46 - though separately we'll store these H2
59:50 - elements I'm getting a copy of this
59:52 - first H2
59:53 - element we'll store that within our
59:55 - welcome
59:57 - message just so we can read it I'm going
59:59 - to place each line on a new
60:05 - line then let's create another
60:09 - constant const login
60:12 - prompt be sure to eliminate any dashes
60:15 - we will be using a camel case naming
60:18 - convention take our second H2 cut
60:23 - it paste
60:29 - it and there we go I find that a lot
60:31 - easier to
60:33 - read so we're going to take our
60:35 - condition is logged in if that's true
60:39 - we'll return our constant our welcome
60:42 - message otherwise we'll return our other
60:45 - constant our login prompt and that will
60:48 - work still the same let's set that to be
60:50 - false please log to continue set it back
60:53 - to be true welcome your username I find
60:57 - this syntax a lot easier to read now it
60:59 - is good practice if you're accepting
61:01 - props to set up prop types just in case
61:04 - the values that are passed in are not of
61:06 - the correct data type you'll at least
61:08 - get a warning for debugging purposes
61:10 - it's a good habit that we should develop
61:12 - we learned about prop types in the last
61:14 - video so at the top let's
61:17 - import prop types from
61:23 - prop-types after our function take our
61:26 - user greeing component do propop types
61:32 - equals take our keys is logged in the
61:36 - value with this Associated key should be
61:39 - a Boolean prop that's capital T types
61:44 - dob then a string for
61:46 - username user
61:49 - name prop types. string all right the
61:54 - last thing we're going to do is set up
61:55 - default props what if somebody's logged
61:57 - in but they don't have a username we'll
62:00 - set a default for the username as guest
62:03 - so after our prop types we'll set up
62:05 - some default props again take user
62:08 - greeting that's the name of our
62:10 - component. default
62:13 - props
62:15 - equals is logged in will be
62:20 - false and
62:22 - username will be G
62:25 - if there's no username passed in all
62:28 - right going back to our app component if
62:30 - a user is logged in but there's no
62:33 - username let's eliminate that we'll get
62:36 - the welcome message of Welcome guest now
62:39 - if a user is not logged
62:41 - in regardless we don't display the
62:44 - username all right everybody so that's
62:46 - conditional rendering you can check some
62:48 - sort of condition based on if that
62:50 - condition is true or false we can show
62:53 - hide or change components there's many
62:55 - different ways in which you can do that
62:57 - and well everybody that is an
62:58 - introduction to conditional rendering in
63:03 - react hey everybody I have a huge video
63:06 - for you today today we're going to talk
63:08 - about rendering lists in reactjs this
63:11 - can be pretty complex we'll go through
63:12 - it step by step what we'll do in this
63:14 - tutorial is create a new component to
63:16 - hold our list let's go to our source
63:19 - folder create a new file I'll name this
63:21 - component list this will be a Js x file
63:26 - to finish creating this component this
63:28 - will be a function based
63:30 - component with the name of list then be
63:34 - sure to export it export default
63:39 - list we'll start with something very
63:42 - simple we'll create an array of fruit
63:44 - this will be const fruits equals think
63:48 - of some fruit for me I'll pick an
63:51 - apple
63:53 - Orange
63:56 - banana coconut and a
64:01 - pineapple let me show you what would
64:03 - happen if we were to return our array
64:06 - within our list component we will
64:08 - return our array of fruits but we will
64:12 - need to import it going back to the app
64:15 - component we will import our list
64:18 - component import list from a location .
64:25 - SL list.
64:28 - jsx we need a return statement to be
64:30 - sure you have one we will return a list
64:38 - component and here is our list let me
64:40 - zoom
64:41 - in it's all one big string Apple orange
64:45 - banana coconut pineapple heading back to
64:47 - our list component we need to convert
64:49 - our array of strings into an array of
64:52 - list item elements we can use the
64:54 - built-in map method to do that we'll
64:57 - create a new array of list items the map
65:00 - method is going to return a new array
65:02 - after running it through a function
65:04 - const list items equals take our
65:08 - original array a fruits use the built-in
65:12 - map method then we'll either pass in a
65:15 - callback a function expression or an
65:18 - arrow function we'll use Arrow functions
65:20 - because I like Arrow functions for every
65:23 - fruit in fruits Arrow meaning do this
65:28 - we'll create a new list item
65:32 - element that has the text of our fruit
65:36 - the array item we're not going to return
65:38 - our fruits array we're going to return
65:40 - an unordered
65:43 - list we're going to insert some
65:46 - JavaScript with curly braces will
65:48 - include our list items it's an array of
65:52 - list items and here's our array whoops
65:55 - but I forgot to enclose fruit with curly
66:00 - braces my mistake they much better or if
66:05 - you prefer we can turn this unordered
66:07 - list into an ordered list with a pair of
66:10 - O
66:11 - tags
66:13 - o there they're all numbered that's how
66:15 - to render a simple array if you're
66:17 - working with an array of strings and
66:19 - you'd like to sort this array beforehand
66:21 - you can use the sort method fruit do
66:24 - sort the sort method will sort an array
66:27 - in place however this doesn't work with
66:29 - numbers because we're sorting lexico
66:32 - graphically we would treat numbers and
66:34 - symbols as characters more on that later
66:37 - let's go over example two we'll convert
66:40 - our array of strings into an array of
66:42 - objects each object will have a name
66:45 - property and calories calories per
66:48 - serving so let's enclose all of our
66:50 - elements within a set of curly braces to
66:52 - make them objects
67:00 - I'm going to place each of these objects
67:02 - on a new line just so that I can read it
67:04 - more
67:07 - easily each of these objects will have a
67:09 - name property the name property will be
67:12 - set to the original string for our array
67:15 - the first object will have a name of
67:17 - Apple let's add calories too calories
67:19 - per
67:21 - serving I did a quick Google search of
67:23 - some the calories per serving for these
67:25 - fruits I don't know how accurate these
67:27 - are but they seemed right our first
67:29 - object has a name of Apple calories is
67:32 - set to
67:34 - 95 name orange
67:38 - calories
67:41 - 45 name
67:45 - banana calories
67:49 - 105 name
67:52 - coconut
67:56 - coconut
67:58 - calories
68:01 - 159 name
68:04 - pineapple
68:06 - calories
68:09 - 37 all right we now have an array of
68:12 - objects there's a few changes we're
68:14 - going to make if I run this again our
68:17 - list isn't rendering I need to display
68:19 - the name property of each fruit fruit.
68:23 - name property
68:25 - we have one issue behind the scenes I'm
68:27 - going to right click go to inspect then
68:30 - go to
68:36 - console warning each child in a list
68:39 - should have a unique key prop react
68:42 - wants us to assign a key to each list
68:44 - item each key should be unique in my
68:47 - array of objects each fruit has a unique
68:49 - name I could use that we will set the
68:53 - key attribute to equal include some
68:56 - JavaScript fruit. name that warning
69:00 - should go
69:04 - away which it did if there's a
69:08 - possibility that two objects can share
69:09 - the same name you'll want to use some
69:12 - sort of unique ID in a real world
69:14 - scenario if you're pulling data from a
69:16 - database each row of data is going to
69:18 - have some sort of unique ID so we're
69:20 - going to mimic that let's add a new
69:23 - property for
69:24 - id id will be one for Apple these will
69:28 - be in ascending order orange will have
69:31 - an ID of two banana is
69:34 - three coconut is four pineapple is
69:39 - five we'll set the key to be each
69:43 - ID this would be much better than using
69:46 - the name you can have a naming conflict
69:48 - if two objects share the same name like
69:51 - if these were people you could have two
69:52 - people named Bob
69:54 - that warning should be
69:57 - gone which it is react would like a
70:00 - unique key for each item just so it can
70:02 - more easily keep track of items being
70:04 - inserted and removed along with each
70:07 - element I'm going to display the
70:09 - calories next to each
70:10 - element so we'll make a few changes I'm
70:13 - going to put these HTML elements on a
70:15 - new line for
70:16 - readability after the fruit's name I'm
70:19 - going to add a
70:20 - colon a non-breaking space character and
70:24 - Pand nbsp for space oh then not a
70:29 - semicolon forgot about
70:31 - that then we'll insert some
70:34 - JavaScript fruit. calories for the
70:37 - calories of each
70:38 - fruit I'll make it bold I'll enclose our
70:42 - calories with a pair of bold tags which
70:44 - is just
70:51 - B now we're going to sort the items in
70:53 - our list we'll do that before the map
70:56 - method I'm going to sort our array of
70:59 - objects by their name property we'll
71:02 - take
71:03 - fruits use the sort method the sort
71:06 - method will sort an array in place we'll
71:09 - write a custom sorting function we have
71:11 - two parameters A and B A for the first
71:15 - item B for the second then we iterate
71:18 - over the entire
71:19 - array we need an arrow meaning do
71:22 - something to lexicographically sort
71:25 - string properties within an array we can
71:27 - use the following method we'll take the
71:29 - name property of a use the built-in
71:33 - local or local some people
71:36 - say compare method I misspelled
71:39 - that yeah I can't spell
71:42 - compare to b.n
71:45 - name that should sort our aray of
71:47 - objects by their name property for
71:50 - reverse order let me turn this line into
71:53 - a comment
71:54 - this is
71:58 - alphabetical for reverse alphabetical
72:02 - order we just have to replace a with B
72:06 - and B with a there pineapple orange
72:09 - coconut banana apple with apple being at
72:11 - the
72:12 - bottom let's sort by
72:15 - calories fruits. sort this one's easier
72:19 - again we have our parameters a comma B
72:23 - Arrow
72:24 - the calories of a a.
72:26 - calories minus b.
72:30 - calories that one's easy we have
72:32 - pineapple at the top followed by orange
72:34 - apple banana
72:35 - coconut this is in numeric
72:39 - order for reverse numeric
72:45 - order reverse
72:47 - numeric or descending you could say the
72:51 - calories of B minus the calories of a
72:54 - now we have coconut at the top with
72:56 - pineapple at the bottom with the least
72:57 - amount of
72:59 - calories in this next section I'm going
73:01 - to demonstrate to you how we can filter
73:03 - objects by a certain criteria we'll
73:05 - filter anything that's greater than 100
73:07 - calories we'll create a new array of
73:09 - fruit that has low
73:11 - calories we'll create a new array const
73:14 - low cal
73:17 - fruit equals take our original array of
73:20 - fruits use the built-in fil
73:25 - method we'll have one parameter of fruit
73:29 - examine each fruit in our array of
73:32 - fruits Arrow then a condition here's the
73:36 - criteria check the calories property of
73:39 - our
73:41 - fruit if it's less than 100 filter it
73:45 - and add it to a new array instead of
73:48 - displaying our array of fruits let's
73:50 - display our new array of low calorie
73:52 - fruit oh that should be plural local
73:55 - fruits when we create our array of list
73:57 - items replace fruits with local fruits
74:01 - and any instance of fruit with lcal
74:04 - fruit
74:06 - singular so we have three instances of
74:08 - fruit let's replace
74:11 - those let me clean this up a
74:14 - little feel free to pause the video if
74:16 - you need to write this
74:18 - down we have three fruits that are low
74:20 - calories the calories is less than
74:23 - 100 let's find any high calorie
74:28 - fruits we can just copy this line of
74:30 - code paste it but change the condition
74:34 - examine the calories of each fruit
74:36 - filter it out if the calories are
74:38 - greater than or equal to
74:40 - 100 the name of this array will be high
74:43 - Cal
74:45 - fruits replace low cal fruits with high
74:48 - Cal
74:49 - fruits replace low cal fruit with high
74:53 - Cal fruit
74:55 - singular and do that for the other
74:57 - instances as
75:00 - well there we are we have two fruits
75:02 - that are high in calories bananas and
75:05 - coconuts that is US using the filter
75:07 - method to filter out list items let's
75:10 - replace High Cal fruits with fruits high
75:13 - Cal fruit with fruit to display our
75:16 - original
75:22 - array for the next part of this lesson
75:24 - we're going to transform this list
75:26 - component so it's reusable with
75:28 - different lists currently the way that
75:30 - we set this up is that each list
75:31 - component that we create has its own
75:33 - list of fruit so we're going to make
75:36 - some
75:37 - changes let's cut our list of
75:41 - fruits going to the parent component of
75:44 - app we'll paste our list of fruits then
75:47 - pass it as props to our list
75:52 - component
75:54 - with our list component we will have a
75:57 - key of items equals insert some
76:02 - JavaScript our list of fruits let's also
76:06 - add a category
76:07 - key category equals for my category
76:12 - let's say fruits eventually we'll add an
76:15 - H3 heading we're now going to send all
76:18 - of this data to the list component but
76:21 - we have to set up props with in the list
76:24 - function we have a parameter of
76:28 - props we'll access the items of props to
76:31 - get our
76:33 - fruit we'll create const item list
76:38 - equals not to be confused with list
76:41 - items list items is what we get after we
76:44 - map
76:45 - it item list equals props do items and
76:50 - remember that items is our fruits array
76:54 - replace fruits with item
76:57 - list replace fruit with
77:00 - item do that here here and
77:04 - here there's our list
77:07 - again if you're going to sort or use the
77:09 - filter method be sure it's item list not
77:12 - fruits because now list is a reusable
77:15 - component I'll add our Category 2 that's
77:18 - stored within props const category
77:22 - equals
77:23 - props do
77:27 - category currently we're returning a
77:29 - single ordered list I'll also include an
77:31 - H3
77:35 - element include some JavaScript we need
77:37 - curly braces add our
77:40 - category however with our return
77:42 - statement we can only return a single
77:44 - element or many elements that are
77:46 - wrapped within a fragment let's create a
77:49 - fragment that will enclose all of our
77:52 - markup
78:00 - there we
78:01 - are going back to our app component
78:04 - let's create a new list just to make
78:06 - sure that our list component is
78:09 - reusable let's copy our array of
78:13 - fruits paste
78:15 - it we'll create an array of
78:21 - vegetables the IDS will be 6 7 8 9
78:27 - 10 the name of my first item will be
78:31 - potatoes calories 110 per
78:34 - serving
78:36 - celery calories will be
78:41 - 15 carrots calories
78:46 - 25 corn calories
78:51 - 63 broccoli
78:55 - calories
78:57 - 50 now we should be able to create a new
78:59 - list
79:01 - component within our return statement
79:03 - we're going to need a fragment
79:10 - again we'll return a second list item
79:14 - component the items will be vegetables
79:18 - the category will be a string of
79:21 - vegetables Bo boom there we go here's
79:24 - our second list
79:25 - component so our list component is now
79:28 - reusable we can pass in many different
79:30 - types of lists to make this look better
79:33 - let's apply some CSS styling we'll have
79:36 - to set a class name
79:38 - first our H3 element will have a class
79:41 - name equal
79:43 - to list-
79:47 - category our ordered list will have a
79:50 - class name of list items
79:56 - all right going to our CSS stylesheet
79:59 - index.css let's work on our list
80:02 - category
80:03 - first use dot to select a class list
80:08 - category I'm just going to run through
80:09 - these real quick I'm going to make sure
80:12 - I'm zoomed in to 100 because I was
80:14 - zoomed in
80:15 - beforehand font size 2.5
80:20 - em font weight will be
80:26 - gold pick a
80:28 - color I'm going to stick with hsl values
80:32 - I'll set the lightness to be
80:35 - 20% I'll add a little bit of margin on
80:37 - the
80:40 - bottom 10
80:43 - pixels text align
80:50 - Center I'll add a border
80:53 - three pixel
80:56 - solid I'll add a border radius to round
80:59 - the
81:05 - corners and a background
81:09 - color pick a color again I'll use
81:15 - hsl this one I pre-picked already
81:19 - 185
81:21 - 100% 50% % that's not a bad looking
81:25 - color pick whatever color you would like
81:27 - let's work on our list item
81:29 - elements we need to select the class of
81:32 - list
81:33 - items do list items select each list
81:38 - item within this
81:40 - class I'll increase the font size to be
81:43 - 2
81:46 - em I'll remove the list style but you
81:49 - don't have
81:50 - to list Style
81:53 - will be
81:54 - none pick a color again I'm using hsl
82:01 - values I'll set the lightness to be
82:06 - 25% text align
82:11 - Center and margin will be
82:15 - zero all right now when I hover over one
82:18 - of these list items I'll apply a hover
82:21 - effect
82:23 - take our class list items take each list
82:25 - item access the hover sudo
82:28 - class I'll change the brightness the
82:32 - color will be something a little bit
82:34 - brighter I'll set the lightness to be
82:37 - 45% and then the cursor will be a
82:41 - pointer yeah not bad that's how we can
82:44 - apply some CSS styling to list
82:46 - components all right heading back to our
82:48 - app component what if we have an empty
82:51 - list for example with our fruits I'm
82:53 - going to cut
82:55 - it we can use conditional rendering to
82:58 - render our list only if there's elements
83:02 - let's put those back we're going to
83:04 - write some JavaScript we need some curly
83:06 - braces let's take our array of fruits
83:10 - access the length
83:12 - property is it greater than
83:15 - zero question mark if it is we'll return
83:19 - our list
83:21 - component
83:23 - colon if it's false we can return null
83:27 - let's do that with our vegetables
83:29 - too take our array of vegetables access
83:33 - the length property is it greater than
83:36 - zero tary operator if it is return our
83:40 - list
83:42 - component if not we can return
83:45 - null if one of these lists doesn't have
83:47 - any elements we won't render that
83:51 - component
83:56 - there is a short hand to the tary
83:58 - operator we don't need to write or else
84:00 - return null what we'll use instead of
84:03 - the tary operator is the and logical
84:05 - operator we can effectively shortcircuit
84:08 - the first
84:09 - expression then we don't need colon null
84:13 - it's a little less
84:17 - code our list component will always be
84:20 - true because it exists
84:23 - however the first expression might not
84:25 - be so if this condition is false we
84:29 - don't render this if it is true we will
84:32 - render this let's try that again let's
84:35 - remove these
84:37 - elements we don't display the fruits
84:39 - list
84:40 - component and we will not display the
84:43 - vegetable list
84:44 - component this is known as short
84:47 - circuiting one thing to consider what if
84:50 - our category is missing let's remove our
84:53 - category from
84:54 - fruits well I would like to add some
84:56 - sort of placeholder here or what if one
84:59 - of these arrays was
85:01 - missing well nothing displays not even
85:04 - vegetables we should add some default
85:06 - props in case one of these properties is
85:08 - missing so going back to our list
85:11 - component before we export it let's set
85:14 - up some default props take our component
85:17 - name
85:18 - list. default props equals
85:22 - within a set of curly braces let's set
85:25 - our
85:26 - category category
85:29 - property to be category as a
85:34 - placeholder if for some reason these
85:36 - components don't have a
85:38 - category We'll add a placeholder of
85:40 - category which at least looks better if
85:43 - we're missing an array that's a bigger
85:45 - problem let me go to inspect then
85:51 - console
85:53 - we're trying to map something that's
85:55 - undefined we have no array to work with
85:58 - so nothing is rendering so as a backup
86:01 - within default props let's set our items
86:05 - to be an empty
86:06 - array items will be an empty
86:11 - array if one of these arrays was missing
86:13 - for some
86:15 - reason at least the category is
86:17 - displayed as well as the subsequent
86:19 - components at least something will
86:21 - display
86:23 - okay then lastly as good practice if
86:25 - we're accepting props we should set up
86:28 - prop types I'll walk you through it if
86:30 - you're just joining us with prop types
86:33 - if the incorrect data type is passed
86:35 - into props when we debug it'll give us a
86:38 - warning to use prop types we have to
86:41 - import it at the top of our list
86:43 - component we will
86:45 - import prop
86:47 - types
86:49 - from prop
86:51 - types
86:54 - take our component of
86:56 - list
86:58 - list. prop
87:02 - types equals set of curly braces for our
87:07 - category this will be a
87:09 - string category colon
87:12 - space prop types.
87:17 - string add a comma for another line okay
87:21 - this is where it's going to get tricky
87:23 - we have an array of
87:25 - objects we'll access the items
87:28 - property items colon space prop types
87:34 - I'm going to move down a little
87:37 - bit dot we have an
87:40 - array
87:41 - array of we have an array of
87:45 - objects prop
87:47 - types. shape method we have to define
87:51 - the shape of each object object each
87:53 - object is going to have its own data
87:55 - types we have a number string then
87:59 - number we're defining an object we need
88:01 - a set of curly
88:02 - braces ID
88:05 - colon prop types do
88:09 - number comma for another
88:12 - property I'll put the next one on a new
88:14 - line for
88:18 - readability we have a name property
88:20 - which will be a string
88:22 - prop types.
88:27 - string then
88:31 - calories prop types.
88:35 - number and that's
88:38 - it let's head back to our app
88:41 - component our prop types should raise a
88:43 - warning if some of our data is of the
88:45 - wrong data type for example let's say
88:48 - that calories is now the string Apple
88:52 - maybe somebody mistyped it
88:54 - twice you can see that right here it
88:56 - changed let's go to
88:58 - inspect
89:01 - console and here's our warning because
89:03 - we have prop type set up invalid prop
89:06 - items index zero calories of type
89:10 - string if we didn't have prop type setup
89:12 - we wouldn't receive that warning this
89:14 - may go unnoticed it is good practice if
89:16 - you're accepting props to also set up
89:18 - prop types it's a little more
89:20 - complicated if you have an array of
89:22 - objects but here are the steps all right
89:24 - everybody I know this was a massive
89:26 - topic thank you all for watching feel
89:28 - free to take some time to study and work
89:30 - with this before moving on to the next
89:32 - topic if you would like we did Cover a
89:34 - lot of material and well those are
89:36 - various ways in which we can render
89:38 - lists in
89:43 - react hey uh so today I'm going to
89:45 - explain click events and how to handle
89:47 - them in react a click event is an
89:49 - interaction when a user clicks on a
89:52 - specific element we can respond to
89:54 - clicks by passing a call back to the
89:56 - onclick event handler in this example
89:59 - we'll create a button let's create a
90:02 - button component go to new
90:04 - file button.
90:08 - jsx we will use a function base
90:11 - component function
90:14 - button then be sure to export it export
90:17 - default
90:19 - button going back to our parent
90:22 - component of app we will need to import
90:24 - our button import button from its
90:29 - location button.
90:31 - jsx then we will create one button
90:36 - component going to our button component
90:40 - we will return a single button
90:44 - element the button will have text of
90:47 - Click
90:49 - me hey for fun I'm just going to add it
90:51 - an emoji but you don't have
90:57 - to and I will zoom in so you can see it
91:01 - many HTML elements have an onclick event
91:05 - handler we can set the SQL to a
91:07 - JavaScript callback but we need a
91:09 - function to work with So within our
91:12 - button function we can write an inner
91:15 - function const handle click I will
91:20 - assign this equal to either a function
91:22 - expression or an arrow function I like
91:25 - Arrow functions so I'm going to stick
91:26 - with an arrow function when we click on
91:29 - the button what do we want to do let's
91:32 - console.log the word
91:36 - ouch so we have our function we will set
91:39 - the onclick event handler equal to a
91:42 - callback a call back to this function
91:45 - when we click on the button do this if I
91:48 - went to my console inspect console
91:52 - Let me refresh this if I click on the
91:55 - button we execute this code we will
91:58 - output the word ouch every time I click
92:01 - the
92:01 - button if your function has parameters
92:04 - there's one change we'll need to make
92:06 - let's create a second function const
92:10 - handle Click
92:13 - 2 this function will have a parameter of
92:16 - name we'll use an arrow function we will
92:20 - console.log
92:22 - I'll use a template string let's display
92:25 - the
92:26 - name stop clicking
92:30 - me for the onclick event handler we will
92:33 - set a call back of handle click to but
92:36 - we have parameters that means we need to
92:38 - send a matching number of arguments I
92:41 - will send my first name but feel free to
92:43 - use your name I didn't click on the
92:45 - button yet I'm going to go to inspect
92:49 - console uh Let me refresh all this
92:52 - I didn't click on the button yet but
92:54 - we've already called that function if
92:56 - you add a set of parentheses after a
92:58 - call back you'll invoke it right away so
93:01 - we don't want to do that if we have
93:03 - arguments we need to send to a function
93:05 - we could wrap this call back within a
93:07 - function expression or an arrow function
93:10 - let's use an arrow function when we
93:12 - click on the button do this that will
93:15 - prevent us from calling this function
93:17 - right away so let's refresh
93:20 - everything then when I click on the
93:22 - button then we execute this code bro
93:25 - stop clicking me bro stop clicking me
93:28 - bro stop clicking me so that's how to
93:30 - send arguments to a
93:32 - function now in this next example We'll
93:34 - add some
93:36 - conditions let's set the onclick
93:38 - attribute to be a call back to handle
93:40 - click if you have more than one line of
93:43 - code for your arrow function you'll need
93:44 - to use a set of curly
93:47 - braces let's add a count variable let
93:51 - count equal
93:53 - Z with our handle click function let's
93:57 - have one parameter a name what would we
94:00 - like to do let's check to see if our
94:04 - count
94:05 - variable is less than three if it is
94:09 - let's increase count by
94:11 - one then
94:15 - console.log I'll use a template
94:18 - string let's add our name parameter
94:22 - you clicked me add a
94:25 - placeholder
94:27 - count time or
94:30 - times else if the user clicked me more
94:34 - than three times let's console. log a
94:38 - different
94:39 - message let's
94:41 - say add a placeholder name stop clicking
94:49 - me with the onclick event Handler we
94:52 - have a parameter that means we have to
94:54 - wrap this call back within a function
94:56 - expression or an arrow function let's
94:58 - use an arrow function for
95:02 - Simplicity we'll pass in a first name
95:05 - pass in your own first
95:06 - name so let's save and refresh
95:09 - everything go to inspect
95:12 - console when I click on the button once
95:15 - it's going to display bro you clicked me
95:17 - one time bro you clicked me two times
95:20 - bro you clicked me three times after the
95:23 - third time we'll display a different
95:24 - message bro stop clicking me bro stop
95:27 - clicking me bro stop clicking
95:30 - Me So within your functions you can
95:32 - write some
95:33 - conditions now I need to explain the
95:36 - event
95:38 - parameter let's recreate that handle
95:40 - click
95:41 - function const handle click equals with
95:47 - click events were automatically provided
95:49 - with an event argument it's an object
95:52 - that describes the event that occurred
95:54 - but as a parameter people usually
95:56 - shorten the event parameter to be simply
95:59 - e let's print our
96:02 - event
96:04 - console.log e our event we'll need to
96:08 - set the onclick event handler we have
96:10 - one parameter so we need to wrap this
96:13 - within an arrow
96:15 - function handle click for the arrow
96:18 - function we'll have e for the parameter
96:21 - and E for an argument for the handle
96:23 - click
96:28 - function let's click on the button we're
96:31 - now outputting the event its type is
96:34 - synthetic base event and it has all of
96:37 - these properties and
96:39 - methods such as where you clicked on the
96:42 - screen there's a timestamp and a Target
96:45 - by utilizing this event object that
96:48 - gives us many different possibilities
96:50 - for this demonstration let's change the
96:52 - text content of the
96:54 - button so there should be a Target
96:56 - property here I am going to change the
97:00 - text content that should be a
97:03 - property yep there it
97:07 - is so what we'll do after clicking on
97:10 - the button we will access that event
97:13 - object follow this with DOT that's the
97:16 - property
97:17 - accessor we're selecting the inner
97:20 - target object
97:22 - then selecting the text content property
97:26 - let's set that equal to be
97:29 - ouch so now when you click on the button
97:32 - the text of the button should change to
97:35 - ouch I'm going to add an emoji
97:38 - too there we go okay let's try this
97:41 - again this will be fun click me
97:45 - ouch there's also the on doubleclick
97:48 - event handler instead of onclick you'll
97:50 - say say on double click so when we click
97:54 - on the button once now nothing
97:57 - happens but once I double click that's
98:00 - when we'll execute this function now I'm
98:02 - going to double click
98:05 - ouch if you need to handle a double
98:07 - click you just have to use the on double
98:10 - click event
98:11 - handler all right let's move on from
98:13 - using a button this time let's use an
98:15 - image in my assets folder I do have my
98:18 - profile picture from my YouTube channel
98:21 - find a profile picture of yourself or a
98:23 - picture you
98:24 - like we're going to create a new
98:26 - component let's go to our source folder
98:29 - I will name this component profile
98:32 - picture.
98:35 - jsx we will create a function with the
98:38 - name of profile
98:42 - picture then be sure to export it export
98:47 - default profile
98:49 - picture then going back back to our app
98:52 - component we will import our profile
98:55 - picture component from its
98:58 - location profile picture.
99:02 - jsx let's include our profile picture
99:05 - component instead of our
99:10 - button all right so within our profile
99:12 - picture component I will store a URL
99:15 - within a constant constant image
99:20 - URL I will list a relative file
99:23 - path so my image is within my assets
99:27 - folder my file location but it might be
99:30 - different for you mine is going to
99:33 - be SL Source SL assets slash the name of
99:39 - the image including the extension mine
99:42 - is profile.
99:44 - jpeg we will return an image on
99:49 - lint I AMG for an image
99:52 - element I will set the source equal to
99:55 - some JavaScript I need to set a curly
99:58 - braces I will set it equal to my image
100:02 - URL and let's see if that worked yes it
100:05 - did but I'm going to zoom out to like
100:09 - 150 my image is
100:12 - small let's add a handle click function
100:15 - const handle click equals an arrow
100:19 - function to test it let's console.log
100:23 - the
100:24 - word
100:26 - ouch then we'll need to set the onclick
100:29 - event handler within our
100:31 - image on click equals a callback to
100:36 - handle
100:37 - click so let's save and refresh
100:40 - everything let's go to inspect console
100:43 - when you click on your image it should
100:45 - display the word ouch every time you
100:47 - click
100:49 - it let's utilize the event object that's
100:52 - generated we have one parameter e for
100:55 - our event that means we'll have to
100:57 - change the call back to Be an Arrow
101:00 - function e for the parameter
101:04 - Arrow handle click we have one argument
101:08 - of e so what should we do now when we
101:12 - click on the image let's hide the image
101:16 - we'll need to access that event
101:18 - object access the target object that's
101:21 - found within access its style then the
101:25 - display
101:27 - property we will set the display to be
101:29 - none when we click on it so then if you
101:32 - were to click on your image it should
101:35 - disappear so by accessing the event
101:37 - object that gives us a load of different
101:40 - possibilities for what we can do all
101:42 - right everybody so that is an
101:43 - introduction to handling click events in
101:46 - react a click event is an interaction
101:49 - when a user clicks on a specific element
101:51 - we can respond to clicks by passing a
101:53 - call back to the onclick event handler
101:56 - and well everybody that is an
101:57 - introduction to click events in
102:03 - react hey what's going on everybody in
102:06 - today's video I'm going to explain the
102:07 - usate react hook and near the end of
102:09 - this video we're going to create a
102:11 - reactive counter program so sit back
102:13 - relax and enjoy the show I haven't
102:16 - explained what react hooks are yet a
102:18 - react Hook is a special function that
102:21 - allows functional components to use
102:23 - react features without writing class
102:25 - components this was a change made in
102:27 - react version 16.8 basically we no
102:29 - longer need to write class components we
102:31 - can write function-based components that
102:34 - use react hooks to use react features
102:36 - there are many react hooks if a function
102:39 - begins with use it's probably a react
102:41 - hook use State use effect use context
102:43 - use reducer use callback and more UST
102:46 - state is the most widely used UST state
102:49 - is a react hook that allows the the
102:50 - creation of a stateful variable and a
102:53 - Setter function to update its value in
102:55 - the virtual Dom basically by using the
102:58 - usate hook we can create not just a
103:00 - variable but a stateful variable when
103:03 - you update this variable that change
103:05 - will be reflected in the virtual domum
103:07 - normal variables don't when you use the
103:09 - UST State hook you're given a variable
103:11 - and a Setter function specifically for
103:13 - that variable so what we'll do in this
103:15 - example is create a new component going
103:17 - to our source folder we're going to
103:19 - create a new file we'll name this
103:21 - component my
103:24 - component we use react hooks in function
103:27 - based components so make sure you're not
103:29 - writing a class
103:31 - component with this component we will
103:34 - export it export default my component
103:38 - then be sure to import this because I'm
103:40 - probably going to forget if we don't do
103:41 - it now so we will import my
103:46 - component from its
103:49 - location slash my component and this is
103:53 - a jsx file let's return one my
103:59 - component and we are ready to begin in
104:02 - order to use a react hook we need to
104:04 - import it at the top of this component
104:06 - we will import the react Library however
104:10 - we don't need the entire react Library
104:13 - we can use object destructuring to
104:15 - extract individual variables or
104:17 - functions I would just like the UST
104:19 - State function we don't need the entire
104:22 - react library from its location react we
104:27 - now have access to this UST State
104:29 - function using the UST State function
104:31 - we'll create a stateful variable and a
104:34 - Setter function to update that variable
104:36 - so let's declare const we're going to
104:39 - use a set of straight brackets for array
104:41 - destructuring equals use State
104:46 - function the use State function returns
104:49 - an array with two ele elements a
104:51 - variable and a Setter function we're
104:54 - going to use array destructuring to
104:56 - destructure these two elements we'll
104:58 - create a stateful variable for name then
105:00 - we're given a Setter function
105:02 - specifically for this variable a common
105:04 - naming convention is to type set than
105:07 - the variable name with camel case naming
105:10 - convention and that's it if we ever need
105:13 - to change the value of the stateful
105:15 - variable we have to do so with this
105:17 - Setter it's a function at the bottom
105:19 - we're going to return
105:21 - return a div
105:24 - element within this div element we'll
105:27 - create a paragraph element and a button
105:30 - we'll begin with a paragraph element
105:32 - that has text of name and I'm going to
105:35 - zoom in a little bit I will insert some
105:38 - JavaScript using curly braces let's
105:40 - display our name following our paragraph
105:44 - element let's include a button the
105:46 - button will have an onclick attribute
105:49 - equal to a JavaScript function so we
105:52 - need a set of curly braces to embed that
105:54 - let's create a function to
105:57 - update name for the text of the button
106:02 - let's say set
106:04 - name all right now we just need to
106:07 - declare this function I'll use an arrow
106:09 - function const update name equals Arrow
106:16 - function so what would we like to do
106:19 - okay let's attempt to set our name equal
106:23 - to type your name or some other name I'm
106:25 - just going to type in
106:27 - SpongeBob if I click on this button we
106:30 - should update our name right well that
106:33 - doesn't appear to
106:35 - work so if I were to
106:38 - console.log my name
106:41 - variable then attempt to update it using
106:43 - this button if I were to go to my
106:46 - console hold on I'm going to use let so
106:49 - we can update it if I attempt to change
106:52 - this name of the
106:54 - variable it does so within our
106:56 - console but it doesn't update in react
106:59 - the virtual Dom is still displaying the
107:01 - previous state so if I would like to
107:03 - display any changes I will want to use
107:06 - that Setter instead of setting our name
107:08 - equal to a new value I'm going to change
107:10 - this back to be a
107:12 - constant we will use the setter function
107:16 - and pass in a new value so let me type
107:19 - in a new value
107:22 - and that should work we have updated our
107:24 - name when you use the setter function of
107:26 - a stateful variable it will trigger a
107:28 - render of the virtual Dom normal
107:31 - variables don't that's why the UST State
107:33 - react Hook is useful we can create a
107:36 - stateful variable when the stateful
107:38 - variable gets updated with its Setter
107:40 - function it triggers a rerender of the
107:42 - virtual Dom with the usate function you
107:45 - can pass in an initial state currently
107:47 - we're not passing in anything for the
107:49 - initial state State I will set this to
107:51 - be
107:52 - guested when I refresh everything and
107:54 - start over the initial state is guessed
107:57 - whatever value you pass in to the UST
107:59 - State hook then I can set my name again
108:02 - to something else now we're going to
108:04 - create an age variable and increment
108:07 - it const we're going to use array to
108:09 - structuring we need a stateful variable
108:13 - like age and a Setter function for that
108:16 - age set age equals use
108:21 - state if you would like an initial value
108:24 - you can place that within the UST State
108:25 - function I'll set the initial value of
108:28 - AG to be
108:30 - zero I'm going to copy this paragraph
108:33 - and this
108:35 - button change name to be
108:39 - age we'll create a function to increment
108:43 - age the text on the button will
108:46 - be increment age now we just need this
108:51 - function
108:53 - const increment age I'll use an arrow
109:00 - function to increment our age we will
109:02 - use the set age
109:06 - function let's take our age +
109:10 - one so our initial value for our age is
109:13 - zero but every time I click on the
109:15 - button we will update the value of that
109:18 - variable so every time I click the
109:19 - button button we're increasing our age
109:21 - by
109:22 - one or even a different number this time
109:25 - I'll increase our age by two on each
109:27 - button click so we start at zero then
109:30 - we'll increment by two 2 4 6 8 10 now
109:34 - this time we'll create a Boolean
109:36 - variable and toggle it between being
109:38 - true and false using the US state hook
109:42 - we will create const is
109:45 - employed the setter function will be set
109:49 - is
109:51 - employed equals the use State
109:56 - hook I would like an initial value a
110:00 - false let's create a paragraph element
110:02 - and a
110:04 - button I will set the text of the
110:06 - paragraph to be is
110:10 - employed instead of displaying a Boolean
110:13 - directly let's use the tary operator for
110:16 - conditional rendering is employed if
110:19 - that is true will display yes otherwise
110:24 - no when we click on the button let's
110:27 - create a function
110:28 - to
110:30 - toggle toggle employed status that's
110:35 - kind of a Long Function name all right
110:38 - let's create a function const toggle
110:41 - employed status equals an arrow
110:46 - function we will use the setter function
110:49 - set is employed
110:51 - pass in a new value let's switch this
110:53 - value from being false to true and true
110:55 - to false every time we click the button
110:57 - since this is a Boolean we can use the
111:00 - not logical operator to reverse it so
111:03 - let's say not is
111:06 - employed and let's see if this works is
111:08 - employed no oh let's change the text on
111:11 - the button
111:13 - too toggle
111:17 - status there we go all right when we
111:20 - click on the button we can toggle this
111:21 - Boolean from being true to false and
111:23 - false to true and this should happen
111:26 - every time I click the
111:28 - button as a project what we're going to
111:30 - do now is create a counter program so
111:33 - let's close out of my
111:35 - component we'll create a new component
111:37 - for a counter component counter.
111:41 - jsx this will be a function base
111:45 - component
111:46 - function
111:48 - counter then be sure to export it export
111:53 - default
111:55 - counter going back to our app component
111:58 - we will import our counter component
112:01 - from its location counter. jsx then we
112:05 - will include one counter component and
112:09 - that's it in order for us to use the US
112:12 - state hook we have to import it from the
112:14 - react Library import react we'll use
112:17 - object destructuring just to get the UST
112:20 - State hook and nothing else from its
112:23 - location of
112:25 - react all we need is one variable a
112:29 - counter let's say const we'll use array
112:32 - destructuring create a stateful variable
112:35 - of count and a Setter function for that
112:38 - count set count equals the use State
112:44 - hook would we like an initial value for
112:46 - count we would like the initial value to
112:49 - be zero
112:50 - we'll create a few functions to
112:52 - increment decrement and reset the
112:55 - counter const
112:57 - increment equals I'll use an arrow
113:02 - function to update the count to
113:04 - increment it we will use the set count
113:07 - function the value we'll pass in is
113:10 - Count +
113:12 - one then let's do this for
113:16 - decrement
113:18 - const decrement
113:20 - count minus one then
113:24 - reset const reset for set count we'll
113:29 - pass in zero to reset the
113:31 - count now we're going to return some
113:35 - elements we'll also style this with CSS
113:39 - let's begin with the div
113:41 - element I'm going to scroll down a
113:42 - little
113:46 - bit my div element will have a class
113:49 - name name equal to
113:53 - counter-
113:55 - container I will create a paragraph
113:57 - element with a class
114:00 - name equal to count display to display
114:05 - the
114:05 - number for the text of the paragraph I
114:08 - will insert some JavaScript and display
114:11 - our count
114:13 - variable we'll create three buttons for
114:16 - the first we'll create a button element
114:19 - this button will have a class
114:22 - name of
114:24 - counter-
114:26 - button the onclick attribute will be set
114:29 - equal to a JavaScript function this
114:32 - first button will be the decrement
114:34 - button for the unclick attribute we will
114:36 - set this equal to the decrement function
114:39 - for the text on the button we'll say
114:45 - decrement and there's our first button
114:48 - so let's copy this button paste it the
114:52 - second button will be for reset the text
114:55 - will be
114:57 - reset then the third button will be
115:00 - increment onclick will be the increment
115:03 - function the text will be
115:06 - increment all right and that's all that
115:08 - we need let's check it for functionality
115:10 - to be sure that everything works we can
115:12 - increment this number we can decrement
115:16 - it and we can reset it so for the icing
115:20 - on the cake let's style it with
115:22 - CSS going to our index CSS stylesheet
115:26 - we'll apply the following CSS let's
115:29 - select our counter
115:32 - container do counter container I will
115:36 - text align
115:39 - Center change the font
115:43 - family I will pick a s serif font of
115:46 - Arial with a backup of s serif
115:50 - next we'll select the count
115:53 - display select the class of count
115:56 - display that would be this number will
115:59 - increase the font size to something
116:00 - massive like 10 em RM works too oh okay
116:05 - that's a little too big but I am zoomed
116:06 - in actually you know what that's perfect
116:09 - I will set the margin top to be zero to
116:13 - close this Gap and I will set the margin
116:17 - on the bottom to be 50
116:20 - pixels then let's work on the counter
116:23 - buttons
116:25 - next select the class of counter button
116:29 - I will set the width to be 150
116:34 - pixels the height to be 50
116:39 - pixels the font
116:42 - size to be 1.5
116:46 - em I will set the font weight to be
116:51 - bold set the margin to
116:54 - be 0 pixels by 5
116:57 - pixels this would be for the left and
116:59 - right of the
117:01 - buttons change the background
117:05 - color pick a color that you
117:08 - like I'm going to use hsl values
117:13 - though that's pretty good I will set the
117:17 - color of the font to be white
117:20 - remove the
117:21 - border border
117:24 - none set the Border radius to round the
117:29 - corners five
117:32 - pixels and change our cursor to be a
117:36 - pointer if we hover over the button when
117:39 - we hover over the button I'm going to
117:40 - change the background color of the
117:42 - button so with the counter button class
117:45 - with the counter button class we will
117:47 - select the hover sudo class
117:50 - we'll take our background color decrease
117:53 - the lightness to be 10%
117:55 - darker there we are and that is all the
117:58 - CSS styling that we need we have our
118:00 - counter program we can increment the
118:03 - counter we can decrement it and we can
118:06 - reset
118:07 - it all right everybody so that is the US
118:10 - state react hook it allows the creation
118:12 - of a stateful variable and a Setter
118:14 - function to update its value in the
118:17 - virtual Dom when you include the UST
118:19 - State hook you're given an array of two
118:21 - elements we use array destructuring to
118:24 - create a stateful variable and a Setter
118:26 - function to update that variable and
118:29 - well everybody that is the UST State
118:31 - hook in
118:36 - react yo yo yo yo yo what's going on
118:38 - people so today I got to explain the
118:40 - onchange event handler in react onchange
118:44 - is an event handler used primarily with
118:47 - form elements including but not limited
118:49 - lied to input text area select and radio
118:53 - buttons onchange triggers a function
118:56 - every time the value of the input
118:58 - changes so let me give you an example we
119:00 - will be using the UST State hook so we
119:03 - need to import it import react I would
119:07 - like the use State Hook from
119:11 - react using the use State hook we're
119:14 - going to create a name variable a
119:15 - stateful variable const name and we need
119:20 - a Setter function for this variable set
119:23 - name equals the use State hook you can
119:28 - set an initial value I'll set mine to be
119:30 - an empty string I will be returning a
119:33 - div element to enclose all of our
119:37 - markup within my div element I will
119:39 - create an input
119:43 - element and here's my input element I
119:47 - will set the value of the input element
119:50 - to be some JavaScript my stateful name
119:54 - variable then I will set the
119:56 - onchange event
119:58 - handler to be a reference to a
120:01 - JavaScript function which we still need
120:03 - to create this will be a call back let's
120:07 - create a function to handle a name
120:09 - change it's going to be similar to
120:11 - handle
120:12 - click function handle name change we
120:18 - have one parameter an event that's going
120:21 - to be provided to us when we change the
120:24 - value of this input element I will
120:26 - invoke our set name
120:29 - function we will set our name variable
120:32 - to be access our event
120:35 - object access its Target then get the
120:39 - value property onchange is going to be
120:42 - set equal to a call back to this
120:44 - function when we type something or
120:46 - somehow change the value within here
120:48 - call the this function and then
120:51 - afterwards I will include a paragraph
120:53 - element that has the text of name and
120:57 - include some JavaScript I will include
121:00 - my name variable so what should happen
121:03 - is when I type in a name it will update
121:06 - in real
121:10 - time with use State I can set the
121:13 - initial value to be something too I'll
121:15 - set my initial value to be
121:18 - guested
121:21 - the onchange event handler triggers a
121:24 - function every time the value of the
121:26 - input
121:27 - changes right now we have an initial
121:29 - value if I start deleting this my name
121:31 - is going to
121:32 - update this time we'll create an input
121:35 - element for a number instead of text I
121:37 - will create a stateful variable for a
121:40 - quantity as if we're ordering something
121:43 - quantity and we need a Setter function
121:47 - set quantity
121:50 - equals the use State
121:53 - hook would we like an initial value not
121:57 - yet but we'll get to that later I will
121:59 - create a function to handle quantity
122:05 - change it's the same formula as before
122:08 - we will be provided with an event so
122:11 - let's write a parameter for that we will
122:13 - use the setter function for the
122:15 - quantity set quantity
122:20 - we'll pass in Access our event access
122:23 - its Target then access its
122:26 - value then we need some HTML elements
122:30 - let me scroll down I will create an
122:33 - input
122:36 - element I will set the value of this
122:39 - element to be our
122:43 - quantity then I will set the onchange
122:46 - event handler to be a call back to a job
122:48 - JavaScript function handle quantity
122:52 - change I will set the type of this
122:54 - element to be a
122:56 - number type
122:58 - equals
123:01 - number afterwards I will add a paragraph
123:05 - with our
123:06 - quantity and display our quantity
123:11 - variable so now we have arrows to select
123:15 - a number I will update the quantity to
123:18 - be one two 3 4
123:21 - five I'll set an initial value of one
123:25 - let's pretend that we're ordering
123:27 - something we're going to assume that the
123:29 - user wants to buy at least one of
123:30 - something that's how you can use
123:32 - onchange to reflect a number that's
123:34 - changing within an input
123:36 - element all right now we're going to
123:38 - create a text area a user is going to be
123:41 - buying something we'll have a user leave
123:43 - a comment I will create const comment
123:50 - set comment equals use
123:55 - State I'll set the initial state of my
123:57 - comment to be an empty
123:59 - string then I'll create a function to
124:02 - handle comment
124:04 - change
124:06 - function handle comment
124:10 - change we have one parameter and event
124:14 - we will use our Setter for our comment
124:17 - then pass in Access our event access its
124:20 - Target then access its
124:23 - value then we need our HTML
124:26 - elements we will create a text area
124:31 - element I will set the value to be our
124:36 - comment
124:37 - variable then set the onchange event
124:40 - handler to
124:42 - be a call back to handle comment
124:45 - change I'm also going to add a
124:47 - placeholder for some placeholder
124:50 - text
124:52 - placeholder
124:53 - equals in my specific example this text
124:57 - area will be for specific delivery
124:59 - instructions if somebody's shopping on
125:02 - your site and they order something they
125:04 - might want to provide additional
125:05 - delivery instructions leave package on
125:08 - the back porch ring the doorbell after
125:10 - the delivery is complete stuff like that
125:13 - so for my placeholder I'll type in enter
125:17 - delivery
125:20 - instructions and there's my placeholder
125:22 - text then just to see if this updates
125:25 - I'll add a paragraph
125:27 - element with my
125:30 - comment then insert my comment
125:33 - variable all right let's see if this
125:36 - works
125:38 - leave package on front porch and avoid
125:45 - the killer
125:47 - Chihuahua
125:49 - that's how we can use onchange with a
125:51 - text area all right the next one's going
125:53 - to be a little more
125:55 - complicated we're going to use a select
125:57 - element for a drop- down menu we'll
125:59 - create a drop- down menu for a payment
126:01 - is somebody going to pay with a Visa a
126:03 - MasterCard a gift card
126:07 - const payment set payment this will be a
126:12 - payment type we'll use use
126:15 - State I will set the initial value to be
126:18 - an empty
126:19 - string then we need a Handler
126:23 - function function
126:26 - handle payment
126:30 - change we have one parameter and
126:33 - event then we'll use that Setter
126:35 - function for the
126:37 - payment set
126:39 - payment event access its Target then the
126:46 - value our select element has as a pair
126:48 - of
126:50 - tags we'll Place option elements within
126:53 - our select element the opening select
126:56 - element is going to have a value equal
126:59 - to our payment
127:02 - variable I will set the onchange event
127:05 - handler equal to a call back to the
127:09 - handle payment change function we have
127:11 - some options within our select
127:16 - element the text on my first stop option
127:18 - will be
127:20 - select an
127:23 - option so now my drop- down menu has
127:25 - select an option for this option's value
127:29 - I will set it to be an empty string this
127:32 - will be the
127:33 - default let's create another
127:38 - option the text on this option element
127:40 - will be a Visa if somebody's paying with
127:42 - a Visa
127:43 - card the value will be a string of Visa
127:49 - besides the defaults we do have an
127:51 - option for Visa then
127:57 - MasterCard Master
127:59 - Card the value will be a string of
128:04 - MasterCard and then a gift
128:09 - card gift card the value will be gift
128:14 - card so besides our default we have Visa
128:18 - MasterCard and gift
128:20 - card after our select element I'll
128:23 - create a
128:24 - paragraph the text on the paragraph will
128:26 - be payment then I'll display our payment
128:29 - stateful
128:32 - variable when I select Visa our payment
128:35 - is going to update with
128:36 - Visa Mastercard and gift
128:40 - card with use State I can even set an
128:43 - initial value I could set the initial
128:45 - value to be for example
128:47 - Visa
128:49 - Master
128:50 - Card or a gift
128:53 - card but I'll keep it as an empty string
128:55 - so we get that default text of Select an
128:58 - option the last form element I'll cover
129:01 - is radio buttons and these are going to
129:03 - be the most complicated we'll create a
129:05 - pair of two radio buttons for a delivery
129:07 - method either pickup or a delivery does
129:11 - somebody want to come into a store to
129:12 - pick up our package or is a driver going
129:14 - to take it to their
129:15 - residence I will create comp
129:20 - let's say
129:21 - shipping for the shipping method and a
129:24 - Setter function for set shipping equals
129:29 - use State for the time being I will set
129:33 - the initial state to be an empty
129:35 - string we'll create a Handler
129:38 - function function handle shipping
129:43 - change we have one parameter of
129:46 - event I will use that Setter function of
129:49 - set
129:52 - shipping access our event argument
129:56 - access its Target access its
129:59 - value within our HTML
130:02 - markup we're going to create a pair of
130:04 - radio buttons we'll create a label we
130:07 - need a pair of label
130:09 - elements the text on the first label
130:11 - will be pickup are we going to pick up
130:14 - our package from a store we'll create a
130:16 - second label I'll just copy what we have
130:19 - paste it the second label will be for a
130:24 - delivery within my label I'll create an
130:27 - input
130:31 - element I will set the type to equal
130:36 - radio I will set the value of this radio
130:39 - button to
130:41 - be
130:46 - pickup I'll place the these additional
130:48 - properties on a new line just for
130:51 - readability I will set the checked
130:53 - attribute equal to a JavaScript
130:56 - expression let's check to see if our
130:59 - shipping stateful variable is strictly
131:03 - equal to our value of
131:06 - pickup this will evaluate to be true or
131:10 - false if this expression is
131:13 - true then we'll trigger our onchange
131:16 - vent Handler and set it equal to a
131:19 - JavaScript function it's going to be a
131:22 - call back to handle shipping
131:26 - change let's copy this input element
131:29 - then within our second label paste
131:32 - it but we'll change our value to be pick
131:35 - up to
131:38 - delivery within our checked property
131:40 - check to see if shipping is strictly
131:43 - equal to
131:44 - delivery if this expression is true then
131:47 - checked will be true through this will
131:49 - trigger the onchange event
131:51 - handler just to reflect the change I'm
131:53 - going to add a paragraph
131:55 - element with text of
131:58 - shipping I will insert some
132:01 - JavaScript I will insert our shipping
132:03 - stateful
132:05 - variable I'm going to add a break after
132:07 - our first label just for readability I
132:10 - think that looks better if I were to
132:12 - select pickup the shipping method
132:14 - changes to pickup we're going to pick up
132:16 - our delivery from a nearby store
132:19 - if I change it to delivery the shipping
132:21 - method changes to delivery with the US
132:24 - state hook we can set an initial State
132:28 - let's assume that if somebody is
132:29 - ordering something from our site they
132:31 - will want it delivered I will set the
132:34 - initial state to be
132:36 - delivery and that did update but if
132:39 - somebody does want to pick it up they
132:41 - can easily just change that by selecting
132:43 - this radio button all right everybody so
132:45 - that is the onchange event handler it's
132:47 - used primarily with form elements
132:50 - including but not limited to input text
132:53 - area select and radio buttons onchange
132:57 - triggers a function every time the value
132:59 - of the input changes so for example if I
133:02 - were to type in my name into this input
133:04 - element that change is immediately going
133:06 - to be reflected in real time and well
133:09 - everybody that is the onchange vent
133:10 - Handler in
133:15 - react hey what's going on everybody in
133:17 - today video we're going to create a
133:19 - Color Picker program using react this
133:21 - serves as more of an exercise now that
133:23 - we know how the UST State Hook and the
133:25 - onchange event handlers work so let's
133:28 - get started all right let's begin
133:29 - everybody within our source folder we'll
133:31 - create a new file for a Color Picker
133:35 - component this will be a jsx file we
133:38 - will use function based components
133:41 - function Color Picker there are no
133:45 - parameters then let's be sure to export
133:47 - this export default Color
133:51 - Picker we need to return something for
133:54 - the time being I'm going to return a
133:56 - fragment just so that everything works
133:59 - going back to our app component we will
134:02 - import our Color Picker component from
134:06 - its
134:09 - location SLC colorpicker
134:13 - djsx then let's include one Color Picker
134:16 - component and that is all we need with
134:19 - the app component heading to the Color
134:21 - Picker component we will need to import
134:23 - the UST State hook import from react
134:27 - we'll use object destructuring just to
134:30 - get the UST State Hook from
134:34 - react within our Color Picker function
134:37 - at the top we'll use the UST State hook
134:40 - to create a stateful color
134:42 - variable const we're going to use array
134:45 - D structuring and create a color and a
134:48 - Setter function for that color we will
134:51 - use the use State
134:53 - hook for the color if you would like to
134:56 - set an initial color you can do that I
134:58 - recommend using hexadecimal values to
135:01 - keep it simple for example if you would
135:03 - like white that would be
135:05 - 6fs personally I'm a fan of using hsl
135:08 - values for Hue saturation and lightness
135:11 - but that can get kind of complicated you
135:14 - would need to pass in a JavaScript
135:15 - object with those three properties we
135:17 - stick with heximal values just to keep
135:19 - it
135:20 - simple then we'll create our HTML
135:22 - elements So within the return statement
135:25 - I will create a div
135:30 - element this div element will have a
135:32 - class
135:34 - name of Color Picker
135:39 - container with react when using CSS I
135:42 - like to use a hyphenated naming
135:43 - convention this development will contain
135:46 - everything we need for our Color Picker
135:48 - component within this St elment I will
135:50 - create an H1 element for a heading The
135:53 - Heading will be Color
135:56 - Picker after this H1 element I will
135:59 - create a nested div
136:01 - element this nested div element will
136:03 - have a class name equal to
136:08 - color- display this is what's going to
136:11 - change color this
136:13 - development now I will set the style
136:15 - attribute equal to some Java script if I
136:19 - attempt to set the background
136:21 - color to our color
136:25 - variable well with any CSS properties in
136:27 - JavaScript we need to enclose them
136:29 - within an object so we will use a double
136:32 - set of curly braces and that would work
136:35 - if you're embedding some JavaScript and
136:37 - then you're changing some CSS properties
136:40 - you'll need to enclose those CSS
136:41 - properties within a JavaScript object
136:44 - within this Nesta div element we'll
136:46 - create a paragraph element ment that has
136:49 - text of selected
136:52 - color embed some JavaScript include our
136:56 - stateful color
136:58 - variable after this development I will
137:01 - create a
137:02 - label this label will have text of
137:06 - select a
137:09 - color I'll create an input
137:12 - element
137:16 - input
137:18 - the type attribute is going to be
137:20 - color we'll have an input element for a
137:24 - color the default is black I'll set the
137:28 - value equal
137:29 - to our state full color
137:33 - variable then to change the color I will
137:36 - set the onchange event handler equal to
137:40 - a call back to a
137:42 - function we will handle color change but
137:47 - we still need to to Define this function
137:49 - that's the last step in this
137:51 - component so we will create a function
137:54 - to handle color
137:56 - change there will be one parameter an
138:00 - event all we're going to do is use our
138:02 - Setter function for our color whichever
138:06 - color we
138:07 - select that's going to be its value
138:09 - either RGB hsl or
138:13 - hexadecimal we will access this
138:16 - event Target
138:18 - access its value set the color to
138:21 - whatever that value is so if I set the
138:24 - color to be I don't know blue well that
138:29 - color is going to change to be blue and
138:32 - that is everything we need for this
138:33 - component we haven't applied any CSS yet
138:35 - so it's not very impressive although it
138:38 - does have functionality so be sure to
138:40 - save everything we will go to our CSS
138:44 - stylesheet let's select the body of our
138:46 - document I will set the font family to
138:50 - be aial with a backup of s
138:54 - serif I will take our class of Color
138:59 - Picker
139:01 - container this is what contains
139:04 - everything this div
139:07 - element take our Color Picker container
139:10 - I will use
139:11 - flexbox because I like
139:13 - flexbox display
139:16 - Flex Flex
139:18 - direction will be a column right now
139:20 - it's a
139:22 - row and
139:24 - align items in the
139:27 - center much
139:29 - better let's take our H1 element that
139:31 - would be this heading we are selecting
139:35 - H1 let's add some margin of 50
139:40 - pixels and increase the font size to 3
139:46 - r
139:48 - let's select our color display that
139:49 - would be this element right
139:51 - here that has a class of color-
139:57 - display I will set a width of 300
140:02 - pixels a height of 300
140:06 - pixels I'll use flex box for all the
140:08 - elements within display
140:13 - Flex
140:14 - justify
140:16 - content
140:17 - in the
140:19 - center then
140:21 - align items
140:24 - Center I'll add a border around this
140:28 - element border 5 pixel
140:33 - solid I'll use hsl for the
140:37 - color let's pick something light gray
140:41 - I'll set the lightness to be
140:43 - 80% then I'll round the corners with
140:45 - border
140:46 - radius
140:48 - border
140:49 - radius 25
140:52 - pixels I'll add a little bit of margin
140:54 - to the bottom margin bottom 25
140:58 - pixels so when we select a color it's
141:02 - going to
141:04 - change I'm going to add a transition
141:06 - effect so the transition is a little
141:09 - more
141:09 - smooth I will set the transition
141:14 - property after a quarter of a second 0 2
141:17 - 5 Seconds we will ease this
141:20 - transition so this animation should be
141:23 - more
141:30 - smooth let's select this paragraph
141:32 - element and style it take our color
141:35 - display
141:36 - class access the paragraph element
141:39 - within for the color I'll use hsl
141:42 - values 0
141:46 - 0% then
141:48 - 20% this will make the text a dark gray
141:51 - color although it's kind of small you
141:53 - can't really see
141:54 - it I'll increase the font
141:56 - size to 2
142:00 - RM then text align
142:04 - Center let's work on the text of the
142:07 - label we're going to select our label
142:10 - increase the font size to 1.5
142:14 - RM let's set the font weight to be
142:20 - bold and add a little bit of margin to
142:22 - the
142:23 - bottom margin bottom 10
142:27 - pixels the last thing we need to do is
142:29 - change this input element so it's a
142:31 - little bigger I will select our input
142:34 - element but I don't want to select all
142:36 - input elements I'll use an attribute
142:38 - selector select all input elements that
142:40 - have a type of
142:43 - color so that'll be just this
142:46 - one I will set a width of 75
142:51 - pixels a height of 50
142:55 - pixels some padding of 5
143:00 - pixels I'll set a border radius to round
143:02 - the
143:03 - corners of 10
143:06 - pixels then set the border to be 3
143:09 - pixels solid and for the color I'll use
143:13 - hsl zero for the Hue zero for the
143:16 - saturation
143:18 - 80% for the lightness that should give
143:20 - us a thick gray border all right
143:22 - everybody so that is a Color Picker
143:24 - program you can create as an exercise
143:26 - for
143:30 - react yo what's going on everybody so in
143:33 - today's video I got to explain updator
143:35 - functions in react an updator function
143:38 - is a function passed as an argument to
143:41 - set State usually for example I have a
143:44 - Setter function for a year if I need to
143:46 - increment my year by one I would just
143:48 - add plus one to year this does in fact
143:51 - work but a better practice would be to
143:54 - pass in an updator function as an
143:57 - argument usually this is represented as
144:00 - an arrow function by passing in an
144:03 - updater function this allows for safe
144:05 - updates based on the previous state you
144:08 - typically see updator functions used
144:10 - with multiple State updates and
144:12 - asynchronous functions it is a good
144:15 - practice to use updator functions when
144:17 - ever possible so in this basic example
144:20 - I've made a counter program we can
144:22 - increment count decrement count and
144:25 - reset count within each of these
144:28 - functions I'm taking my state variable
144:30 - of count adding + one minus one or set
144:34 - and count to equal zero in the case of
144:36 - reset I don't want to increment once I
144:39 - would like to increment twice I will
144:42 - take set count update the state again
144:45 - using count plus one this is different
144:47 - for me adding two to count I want to
144:50 - increment count by one twice I will set
144:53 - the state of count twice count + one
144:56 - then count plus one if I attempt to run
144:59 - this I will increment count twice with
145:02 - every button click however our count
145:05 - only increases by one during each button
145:07 - click I'm very persistent let's try and
145:10 - set count again because you know the
145:13 - first two times didn't work during each
145:16 - button click
145:17 - I would like to increment count by one
145:19 - three times but we're still only
145:21 - updating by one still here's the reason
145:23 - why we're using the current state of
145:26 - count to calculate the next state after
145:29 - using a Setter function this doesn't
145:31 - trigger an update react batches together
145:34 - updates for performance reasons you
145:36 - would imagine that after these functions
145:38 - we would
145:42 - update but that's not necessarily the
145:45 - case using react we batch together the
145:48 - State updates for performance reasons in
145:50 - reality it's going to look something
145:52 - like
145:53 - this we're taking count which is zero
145:56 - adding one to it count didn't update yet
145:59 - it's still zero add one to it take count
146:02 - which is still zero because we didn't
146:03 - update add one to it in reality what
146:06 - we're doing is setting count to be one
146:09 - three separate times and then updating
146:12 - this would be similar to me hitting the
146:13 - refresh button on my web browser a bunch
146:15 - of times
146:17 - we've sent a bunch of commands to
146:18 - refresh the web browser but we may only
146:21 - end up refreshing once not each time I
146:23 - click the button that's because our web
146:25 - browser has its own event Loop cycle
146:28 - that's a similar way of thinking about
146:29 - it if for some reason you need to use
146:32 - multiple State updates you'll want to
146:34 - use an updator function here's
146:37 - how we're going to write a function our
146:40 - function has one
146:41 - parameter count in this case Arrow then
146:45 - do this let's write an arrow function
146:48 - for each set
146:53 - count so this will work however you'll
146:56 - want to rename count to be something
146:58 - else we're going to be working with the
147:00 - previous state of count not the current
147:03 - state we're using the previous state of
147:05 - count to calculate the next state
147:08 - according to the react documents you'll
147:10 - want to rename count as either something
147:12 - like previous
147:15 - count
147:20 - such as this or you can take the first
147:23 - letter of the state variable in this
147:25 - case
147:30 - C I find taking the first letter of the
147:33 - state variable much more easier to read
147:35 - it's less ver Bose so this will work
147:37 - then when I press the increment button
147:40 - we're updating the state three separate
147:42 - times C represents the previous count
147:46 - not the current count with our updator
147:48 - function we're taking the pending state
147:51 - to calculate the next state not the
147:54 - current state we don't update until
147:57 - later when we pass in an updator
147:59 - function we're adding all of these
148:01 - updator functions to a q a q is a type
148:04 - of data structure a q is similar to a
148:07 - bunch of people waiting in line it's
148:09 - first come first serve the first person
148:11 - in line is going to be helped first so
148:13 - during the next render it will call all
148:16 - of these functions in order rather than
148:18 - batch them all together when using
148:21 - multiple State updates you'll want to be
148:23 - sure to use updator functions it is good
148:25 - practice whenever possible to use
148:26 - updator functions just for consistency
148:29 - even if you're only going to update the
148:31 - state
148:34 - once it would still be good practice to
148:36 - use an updator function it will help
148:38 - future proof your code in case you ever
148:40 - need to update the state
148:43 - again so now let's take our decrement
148:46 - function currently we're updating the
148:48 - current state of count not the previous
148:50 - state let's begin by setting up a
148:52 - parameter of count Arrow then do this
148:57 - but we'll want to be sure to rename
148:58 - count just to show that we're working
149:00 - with the previous state not the current
149:02 - state let's rename count as the first
149:05 - letter of the state variable which is c
149:08 - c arrow take C minus 1 let's do this two
149:12 - additional times now when we increment
149:15 - we will increment 3 separate times and
149:18 - we can decrement three separate times
149:21 - now last we have
149:22 - reset with the setter function we're not
149:25 - dependent on the previous state all
149:27 - we're doing is setting count to be zero
149:30 - if I was going to use an updator
149:31 - function it would look like this C Arrow
149:35 - C equals z we really don't care about
149:38 - the previous state this would still
149:41 - technically work we don't really need
149:43 - our count for anything we're setting c
149:45 - equal to zero because by passing in zero
149:48 - we're already setting it to be zero in
149:50 - this specific example an updator
149:52 - function wouldn't be necessary because
149:54 - we don't need the previous state all
149:56 - right everybody so those are updator
149:57 - functions it's a function passed as an
150:00 - argument to set State usually when
150:04 - updating a state variable you'll pass in
150:06 - an arrow function if we were working
150:08 - with a state variable of year I would
150:10 - pass in an arrow function that looked
150:11 - like this we have a parameter of Y Arrow
150:15 - let's take y + 1 if I was incrementing
150:19 - our year by one in this case by using
150:21 - updator functions they allow for safe
150:23 - updates based on the previous state not
150:26 - the current state this allows for
150:28 - multiple State updates and is used with
150:31 - asynchronous functions it's a good
150:33 - practice to use updator functions
150:34 - whenever possible we will be using
150:36 - updator functions in the future and well
150:38 - everybody those are updator functions in
150:44 - react hey everybody so in today's video
150:47 - I'm going to show you how we can update
150:49 - the state of objects be sure that you're
150:51 - importing the UST State Hook from react
150:53 - so we'll Begin by creating a constant
150:56 - use array D structuring our object will
150:59 - be a state variable of car then we need
151:02 - a Setter variable for this car set car
151:06 - equals the use State hook you can set
151:10 - the initial state with you state so what
151:12 - we're going to do in this lesson is
151:14 - create a JavaScript object we're going
151:16 - to create your favorite car with three
151:18 - properties a
151:20 - year a make who manufactured the car and
151:24 - a model so pick a car that you like I
151:28 - like a
151:31 - 2024
151:33 - Ford
151:35 - Mustang if you would like although not
151:37 - necessary you can put each of these
151:39 - properties on a new line for
151:42 - readability personally I find that
151:44 - easier to read so car is going to be an
151:47 - object with these three properties but
151:50 - later on we're going to update these
151:51 - properties with a few text boxes within
151:54 - our return statement we will create a
151:56 - development to wrap
151:59 - everything I will create a paragraph
152:01 - with some
152:02 - text your favorite car is so we have
152:07 - that text currently We'll add our cars
152:11 - year followed by The Cars
152:15 - make then the cars
152:19 - model so for me my paragraph States your
152:23 - favorite car is a 2024 Ford Mustang
152:28 - after our paragraph element we're going
152:30 - to create three input elements one for
152:33 - year make and model so let's do that I
152:36 - will create an input
152:39 - element the type of this input element
152:42 - will be number for the year so we should
152:45 - have some arrows on this input element
152:47 - to increment or decrement I will set the
152:50 - initial value to equal the year of our
152:55 - car car
152:57 - doe I'll add a break
153:03 - afterwards let's copy this input element
153:05 - paste it twice the second input element
153:08 - is going to have a type of text for a
153:12 - string the initial value will be the
153:15 - make of our car
153:16 - in my case Ford the third input element
153:19 - will have type text the value will be
153:23 - model I have a 2024 Ford Mustang when I
153:27 - interact with these input elements I
153:29 - would like to change the property of my
153:31 - object we'll need to use the onchange
153:34 - event handler the onchange event handler
153:36 - is going to accept a call back to some
153:39 - functions function handle year change
153:44 - there will be one parameter
153:46 - an
153:47 - event the event object is going to be
153:50 - provided to us through the onchange
153:51 - event handler when we add that in in a
153:54 - moment let's copy this function we'll
153:56 - fill it in
153:58 - later then we will have a function to
154:01 - handle make
154:02 - change then handle model
154:05 - change we have our three functions to
154:08 - change the year the make and the model
154:10 - properties of our object with our input
154:13 - elements we will set the on change event
154:16 - handler equal to a call back a call back
154:20 - to handle year
154:21 - change so let's set the onchange event
154:24 - handler to the other two input
154:27 - elements onchange handle make change
154:32 - onchange handle model
154:36 - change the last thing we got to do is
154:38 - finish filling in our functions we'll
154:40 - begin with handle year change if I want
154:43 - to change the state of my car object I
154:46 - will use the setter function that's
154:48 - provided to us with use
154:50 - State set car set of
154:53 - parenthesis we will be using an updator
154:55 - function but there's something I want to
154:57 - explain first we're going to set our car
154:59 - to be a JavaScript object if I were to
155:02 - take the year and set it equal to
155:05 - 2025 this is what happens if I interact
155:07 - with this input element let's say I
155:10 - decrease this input element well the
155:12 - value changes to 2025 that worked but
155:16 - the make and the model of our car
155:17 - disappeared these properties no longer
155:19 - exist what we've ended up doing is
155:22 - replacing the initial object that has
155:25 - these three properties with a new object
155:27 - that has this one property of year we
155:31 - need some way to retain the make and
155:32 - model of our car the previous properties
155:34 - that we're not updating that's why we're
155:37 - going to precede this property to be
155:39 - changed with the spread operator of our
155:41 - car when we update the state of our car
155:44 - we're going to be creating a new new
155:46 - object spread all of the current
155:48 - properties of our car and add a year
155:51 - after using the spread operator it's
155:53 - going to look like
156:00 - this we'll have a year make model and
156:03 - year again if you have an object with
156:05 - two properties with the same name you'll
156:07 - end up using the later one and
156:09 - disregarding the first JavaScript
156:11 - doesn't allow for duplicate Keys that's
156:14 - why we're going to be using the spread
156:15 - operator on our car object than updating
156:18 - the year that should allow us to retain
156:20 - the previous properties if I were to
156:22 - interact with the year we'll retain the
156:25 - previous properties they won't change
156:28 - currently the setter is only set to
156:30 - change the year to 2025 we're going to
156:32 - access the event object provided to us
156:34 - from the onchange event handler behind
156:36 - the scenes I will change the year to be
156:39 - access our event object access its
156:42 - Target access its
156:44 - value when I interact with this input
156:47 - element the year property is going to
156:49 - change
156:50 - accordingly but a better practice with
156:52 - use state would be to use an updator
156:54 - function which we learned about in the
156:56 - last video we don't want to modify the
156:59 - current state of car but rather make a
157:01 - reference to the previous state this
157:03 - allows for safe updates we're going to
157:05 - turn this object to be part of an arrow
157:07 - function so let's create our Arrow
157:09 - function we will take our car Arrow do
157:13 - this so with an arrow function if you
157:16 - have a set of curly braces after the
157:17 - arrow function JavaScript thinks you're
157:20 - trying to write a multi-line statement
157:22 - but that's not the case we're trying to
157:23 - create a JavaScript object what you
157:26 - could do is surround your set of curly
157:27 - braces with a set of
157:29 - parentheses that will allow you to
157:31 - create an object within an arrow
157:33 - function since we're working with the
157:35 - previous state of car and not the
157:37 - current state we would want to name this
157:39 - to something else one common naming
157:40 - convention is to take the first letter
157:43 - of the state variable and use that to
157:45 - indicate that this is the previous state
157:48 - so c will be our parameter we will use
157:51 - the spread operator on the previous
157:53 - state of car represented as
157:55 - C and that should work this allows for
157:58 - safe updates especially if you're
158:00 - updating the state of your car more than
158:02 - one time within a function see my video
158:05 - on updator functions if you'd like to
158:06 - learn more about that all right then we
158:08 - have to handle make change we will use
158:12 - our setter set car we're going to be
158:15 - replacing the initial object with a new
158:17 - object we will use the spread operator
158:20 - on our
158:21 - car access the make set it equal to
158:25 - access our event parameter that's
158:27 - provided to us access its Target access
158:31 - its value we'll upgrade the statement so
158:33 - that it's an updater function let's take
158:35 - our car Arrow do
158:40 - this then we will rename car as C to
158:43 - indicate that we're working with the
158:45 - previous state of car not the current
158:48 - state I can change my year and I can
158:51 - change the
158:52 - make and that should
158:54 - update we have one last function to work
158:57 - with handle model change again set
159:01 - car we're creating a JavaScript object
159:05 - use the spread operator on our card to
159:07 - spread the properties so we don't lose
159:09 - them update the model with our access
159:13 - our event access its Target access its
159:16 - value then we'll change this to be an
159:18 - updator function we have parameter of
159:21 - car Arrow do this since we're creating a
159:24 - JavaScript object within an arrow
159:26 - function we need to surround it with a
159:28 - set of
159:29 - parentheses and then rename car as C to
159:33 - indicate we're working with the previous
159:34 - state and that should work I will change
159:38 - the
159:39 - year the
159:41 - make and the
159:44 - model
159:46 - all right everybody so that is how we
159:47 - can update the state of an object using
159:54 - react hey what's going on everybody in
159:56 - today's video I'm going to show you how
159:58 - we can update the state of an array
159:59 - using react all right everybody here's
160:02 - how we can update the state of an array
160:03 - using react be sure to import the UST
160:05 - State Hook from react we'll Begin by
160:08 - creating a constant use array D
160:10 - structuring the name of our array will
160:13 - be Foods because I'm hungry like you ual
160:16 - we'll need a Setter function for the
160:17 - state variable set Foods equals use
160:23 - State we will set the initial state to
160:26 - be an empty array if you would like to
160:29 - include some initial elements you can
160:30 - put that within here such as an
160:33 - apple an orange and a
160:38 - banana we'll create two functions a
160:40 - function to add an element to this array
160:43 - and another function to remove an
160:44 - element we'll create a function
160:47 - to handle add
160:51 - food there are no
160:53 - parameters and we'll declare a function
160:56 - to handle remove
160:59 - food we'll fill these in later within
161:02 - our return statement let's wrap
161:04 - everything within a div
161:08 - element I will create an H2
161:13 - heading that says list of
161:17 - food we'll create an unordered list with
161:20 - a pair of UL tags within my unordered
161:23 - list we will embed some JavaScript code
161:26 - let's take our array of
161:28 - foods use the built-in map method the
161:31 - map method will return a new array what
161:33 - would we like to do with all of these
161:35 - elements of our array well we're
161:37 - provided with an element which we will
161:39 - name as food and an index these are the
161:43 - parameters that we'll receive
161:44 - automatically
161:45 - we'll write an arrow function to do
161:47 - something I will create a list item
161:50 - element we have three already because
161:53 - our array initially has three elements
161:55 - an apple orange and a banana if I were
161:57 - to go to my
161:59 - console react wants us to add a key for
162:02 - each list item so it can keep track of
162:05 - them so with the opening list item tag I
162:08 - will set the key attribute to equal our
162:12 - index within each list item I I will add
162:16 - the current food element and let's see
162:19 - if this works yes it does Apple orange
162:22 - banana if I were to change the initial
162:25 - values of this array within new state
162:27 - that should be
162:28 - reflected after the unordered list we'll
162:31 - create an input element to enter in the
162:32 - names of some
162:34 - food I will create an input
162:37 - element the type the type will be text
162:41 - because we're adding a
162:42 - string I will set the ID equal to be
162:47 - food
162:48 - input I'll add a placeholder too I will
162:52 - set the placeholder attribute to be
162:55 - enter food
162:59 - name after this input element let's
163:02 - create a
163:04 - button the button will have text of add
163:09 - food with this button I will set the
163:12 - onclick event handler equal to to a call
163:16 - back to handle ad food let's work on the
163:19 - handle ad food function we need to get
163:21 - the value found within this input
163:23 - element if I were to type coconut then
163:26 - press the button I need to get this
163:28 - value but first we'll select this input
163:30 - element to access it I will create a
163:33 - constant of new food new food will be a
163:37 - string it's going to contain this value
163:40 - I will access this element this input
163:43 - element document. get element by ID the
163:48 - ID that I'm getting is food
163:51 - input I would just like the value not
163:54 - the entire
163:55 - element so if I were to type in coconut
163:58 - press the button new food is going to be
164:00 - a string of coconut then after pressing
164:03 - the button I'm going to reset this input
164:06 - element so it clears like this I can do
164:09 - that by copying this line of code where
164:11 - we access the value set it equal to be
164:13 - an empty string so if I were to type in
164:16 - something it should reset after hitting
164:19 - the button which it does let's try a
164:22 - mango and that resets too so we have the
164:26 - string that contains our new
164:28 - food we'll use our Setter to update our
164:34 - array if I were to pass in a new array
164:37 - then add new
164:39 - food this is what happens I will attempt
164:42 - to add a coconut add food our initial
164:45 - values of Apple orange and banana
164:47 - they're all gone we've replaced the
164:50 - initial array with the new one that
164:52 - contains only one string element our new
164:54 - food that we're trying to add we need to
164:57 - copy over the previous elements of this
165:00 - initial state within this new array when
165:02 - setting the state we will use the spread
165:05 - operator and access our array of
165:08 - foods the spread operator when used on
165:10 - an array will spread all of these
165:12 - elements into separate values it'll look
165:15 - something like
165:20 - this we're replacing the initial state
165:22 - of this array with a new one so we need
165:25 - to copy the old elements over so this
165:28 - does work I will attempt to add a
165:30 - coconut and a main
165:33 - go however it would be best practice if
165:36 - we were to use an updator function we
165:38 - don't want to directly work with the
165:40 - current state of a state variable rather
165:43 - the previous state I will will upgrade
165:45 - the statement into an updator function
165:48 - we will take Foods Arrow do this you
165:52 - don't want to use the same name as the
165:54 - current state variable a common naming
165:56 - convention is to take the first letter
165:58 - of your state variable and use that as a
166:01 - parameter foods will become f for the
166:04 - previous state we will use the spread
166:06 - operator on the previous state of foods
166:10 - and that should work we have an apple
166:12 - orange banana we can add a coconut
166:16 - or a
166:18 - Maino now we're going to complete the
166:20 - handle remove food function there's one
166:23 - or two things I need to change make sure
166:25 - we use camel case naming convention I
166:28 - accidentally made the r lowercase
166:30 - there's going to be one parameter an
166:32 - index number because we'll be working
166:35 - with the index numbers of these list
166:37 - item
166:38 - elements within our unordered list we'll
166:41 - be working with the opening list item
166:42 - tag just for readability I'm going to
166:45 - put this on a new
166:49 - line like so within the opening list
166:52 - item tag we will set the onclick event
166:55 - handler equal to a callback a call back
166:58 - to the handle remove food
167:01 - function this function needs a parameter
167:04 - in order for us to pass in a parameter
167:05 - to the handle remove food callback we
167:08 - need to convert this to an arrow
167:10 - function we'll create an arrow with no
167:12 - parameters Arrow do this
167:16 - within the map method we're provided
167:17 - with an index number we'll be passing in
167:19 - that index number to this function so we
167:22 - can work with it within the handle
167:24 - remove food function we will use the
167:27 - setter for our
167:28 - Foods within the setter we'll use the
167:31 - filter method we will take our Foods use
167:35 - the built-in filter method of
167:37 - arrays with the filter method of an
167:39 - array we are
167:41 - provided with an element and an index
167:44 - number for that element however we do
167:47 - have a naming conflict we've already
167:49 - stated that the parameter of this
167:51 - function is going to be index just to
167:53 - differentiate it I'm going to rename
167:55 - index as I so within the filter function
167:58 - we will use an arrow function to do
168:00 - something we're going to filter all
168:03 - elements where the current index
168:06 - represented as I does not equal the
168:09 - index that we
168:10 - receive so if you take a look our
168:13 - element parameter is provided to us but
168:15 - we're not using it you can see that it's
168:17 - kind of grayed out we're going to
168:19 - replace this with an underscore using an
168:21 - underscore for a parameter is a
168:23 - convention to indicate that the
168:25 - parameter being passed to the function
168:27 - is ignored so with parameters if you see
168:29 - an underscore that means ignore it all
168:32 - right and this should
168:33 - work I will add a
168:36 - coconut a
168:38 - mango then I can click on one of these
168:40 - list items to remove it let's remove our
168:43 - banana our Apple
168:45 - and the mango all right everybody so
168:48 - that is how we can update the state of
168:49 - arrays using
168:54 - react hey everybody in today's video I'm
168:57 - going to show you how we can update the
168:59 - state of an array of objects if you're
169:01 - able to comprehend this lesson and
169:02 - you've watched previous topics we'll be
169:04 - ready to make a few projects and react
169:07 - so let's get started like we've done in
169:09 - Prior lessons be sure to import the UST
169:11 - State hook in this topic we're not going
169:14 - to create one state variable but
169:17 - four const cars cars is going to be an
169:21 - array of objects then we need a Setter
169:24 - for our array of cars equals use
169:29 - state I'm going to set the initial state
169:32 - to be an empty
169:33 - array then we will create a state
169:36 - variable for the cars year and a Setter
169:40 - for car
169:42 - year use state
169:46 - if we're going to be adding car objects
169:48 - to make it easier for me I could set the
169:50 - initial state to be a year like 2024
169:54 - something that's kind of recent but I
169:56 - think it would be a lot cooler if we use
169:59 - JavaScript to get the current year right
170:01 - now I'm filming this video in December
170:03 - 2023 for the initial state I'm going to
170:06 - create a new date object then get the
170:10 - full year method for me this is going to
170:14 - turn
170:15 - 2023 but depending on when you're
170:17 - watching this video it might be later
170:20 - we'll create a state variable for our
170:22 - cars make who manufactured the
170:25 - car set car make equals use State I will
170:32 - set the initial state to be an empty
170:34 - string then we need the model I'll just
170:37 - copy this because I'm lazy change make
170:39 - to be
170:41 - model set car model
170:45 - the initial State for the model will be
170:46 - a string all right now we're going to
170:49 - declare all the functions we'll need
170:51 - throughout this
170:52 - application we'll create a function to
170:54 - add a car remove a car change the year
170:57 - change the make change the model five
171:00 - functions total we'll declare a function
171:04 - to handle add
171:09 - car then a function to handle remove car
171:14 - are there is one parameter an
171:18 - index what is the index of the object
171:21 - that we're removing from this
171:23 - array we need a Handler for year make
171:26 - and
171:27 - model function
171:29 - handle year
171:32 - change there is one parameter an event
171:35 - that will be provided to us through the
171:37 - onchange event handler we need a
171:40 - function to handle make change handle
171:44 - make
171:46 - change and handle model
171:49 - change so we should have five functions
171:52 - total add car remove car change the year
171:56 - change the make change the
171:58 - model let's create our HTML elements So
172:02 - within our return statement I will
172:04 - create a div to enclose
172:07 - everything let's create an H2 element
172:10 - for a heading list of car
172:16 - objects afterwards I will create an
172:18 - unordered
172:19 - list we will populate this unordered
172:22 - list
172:25 - later we will create three input
172:27 - elements for the year the make and the
172:30 - model of our car that we're trying to
172:31 - add we will begin with input that has a
172:36 - type of
172:39 - number I will set the value to equal
172:44 - this state of car year and for me that's
172:49 - 2023 that's because I'm creating a date
172:51 - object of the current date and time then
172:54 - returning the year depending on what
172:56 - year you're watching this it might be
172:58 - different I will set the on change event
173:01 - handler equal to a call back to handle
173:05 - year
173:06 - change I'll add a break
173:11 - afterwards okay let's copy this input
173:14 - element including the break the type of
173:16 - the second input element will be
173:18 - text the value will be the cars make who
173:23 - made the car the onchange event handler
173:25 - will be a call back to handle make
173:28 - change we should add a placeholder to
173:30 - tell the user what we want them to type
173:32 - in it's not very apparent I'll put this
173:35 - on a new line for readability I will set
173:37 - the placeholder attribute equal
173:40 - to enter car make
173:45 - let's copy this element paste it for the
173:48 - third input element the value will be
173:51 - car model the onchange event handler
173:54 - will be a call back to handle model
173:57 - change the placeholder will be enter car
174:01 - model then we'll create a button to
174:03 - submit our car
174:05 - object
174:07 - button the text on the button will be
174:10 - add
174:11 - car we will set the on click event
174:15 - handler equal to handle
174:21 - Adar all right now we have to fill in
174:23 - these
174:24 - functions we'll begin with handle year
174:26 - change because it's easy we will use the
174:29 - setter for set car
174:32 - Year we will pass in Access our event
174:36 - object that's provided to us access its
174:39 - Target access its
174:41 - value then we have to do this with make
174:43 - and
174:45 - model set car
174:47 - make access the value of the target of
174:50 - the event pass it as an
174:53 - argument set car
174:56 - model again take our event access its
174:59 - Target access its value so now we should
175:03 - be able to update these values let's try
175:10 - it when I click on the button I would
175:13 - like to add this object to my array of
175:16 - objects within our handle Adar function
175:19 - we have a few things to write it's not
175:21 - as complicated as what you think it
175:22 - might be using these State variables of
175:25 - year making model we will create a new
175:27 - car const new car equals a JavaScript
175:33 - object with these properties the year
175:36 - will equal the current state of car
175:40 - year the make will equal the current
175:43 - state of of car make the model will
175:46 - equal the current state of car model
175:50 - then just for readability I'm going to
175:51 - put all these properties on a new line
175:53 - not necessary but I find it easier to
175:55 - read we will use the setter for our
175:58 - array of car
176:01 - objects we will use an updator function
176:04 - we will take
176:05 - cars Arrow create a new array use the
176:10 - spread operator on cars we need to copy
176:14 - the previous elements over to the new
176:16 - array we don't want to lose them then we
176:18 - will add a new element our new car
176:22 - object so we don't want to use the
176:24 - current state of cars but rather the
176:27 - previous state with this updator
176:29 - function a common naming convention for
176:31 - your parameter is to use the first
176:33 - letter of that state variable let's
176:36 - rename cars as
176:38 - C so what we're going to do now is go to
176:42 - our unordered list we need we need to
176:44 - populate it with list items I will embed
176:46 - some JavaScript take our array of cars
176:50 - use the built-in map method to return a
176:52 - new array we're provided with two
176:55 - arguments an element and an index with
176:58 - the map method but I'm going to rename
177:01 - element as car so it's more
177:03 - understandable what would we like to do
177:06 - I'll use an arrow function we will
177:09 - return a list item element and for
177:12 - readability I'm just going to place
177:13 - these on a new
177:14 - line react wants us to add a key to each
177:18 - list item element so let's take care of
177:20 - that I will set the key of each list
177:23 - item element to be our index that's
177:26 - provided to us within each list item
177:29 - element I will display the cars year
177:33 - followed by The Cars make and the cars
177:38 - model all right let's see if this works
177:42 - let's add a 2023 Ford Mustang and that
177:47 - worked how about a
177:49 - 2024
177:51 - Chevrolet
177:53 - Corvette and a
177:56 - 2022 Dodge
178:01 - Challenger one thing I'm going to add to
178:03 - the handle Adar function after
178:06 - submitting a car I would like to reset
178:08 - these
178:09 - values at the end of this function let's
178:12 - use the setters
178:14 - I will set the car year when we're done
178:16 - with it to be the current year we'll
178:19 - create a new date object get the F year
178:22 - update the state to whatever value is
178:24 - returned we'll use the setter for the
178:27 - car make and reset it to be an empty
178:29 - string same thing with the car
178:36 - model all right let's see if this resets
178:40 - 2023 Ford Mustang and it
178:44 - does
178:47 - 2025
178:49 - Chevrolet
178:52 - Camaro and that does reset you can see
178:55 - that my year went back to 2023 even
178:58 - though I adjusted it to 2025 the make
179:00 - and model were both replaced with empty
179:02 - strings now I would like to remove a car
179:05 - when I click on one of these list item
179:07 - elements we'll make one change to the
179:10 - opening list item tag I will set the
179:14 - unclick event handler to a call back to
179:18 - handle remove
179:21 - car we do have to pass in an argument
179:23 - though to this function we have to pass
179:26 - in an index what is the index of the car
179:29 - we're trying to
179:30 - remove if I attempt to pass in an
179:33 - argument we will call this function
179:35 - right away we will convert this call
179:37 - back to an arrow
179:39 - function that has no
179:42 - parameters
179:44 - So within the handle remove car function
179:47 - there's not a lot to write we will use
179:50 - the setter for our
179:54 - cars we'll use an updator function we
179:57 - don't want to use cars but we'll use the
179:59 - first letter to indicate we're working
180:00 - with the previous state
180:03 - arrow take the previous state of our
180:05 - array of cars represented as C use the
180:08 - built-in filter method we will filter
180:11 - any cars that don't meet a certain
180:12 - criteria the filter method provides us
180:16 - with an element and an index but we do
180:19 - have a naming conflict we already have a
180:21 - parameter with the name of index let's
180:23 - rename the index of each element within
180:26 - our array as
180:28 - I then do this with an arrow function
180:31 - we'll write our condition check to see
180:34 - if the index of the current element I is
180:38 - not strictly equal
180:40 - to the index we would like to remove
180:44 - we'll filter out that element when we
180:46 - create a new array so we're not working
180:48 - with the current element even though
180:50 - it's provided to us so what people do as
180:53 - a convention if you have a parameter
180:54 - you're not using people will change the
180:56 - name of that parameter to be an
180:58 - underscore that tells other people to
181:00 - ignore this parameter and that should
181:02 - work let's run and test everything let's
181:05 - add a 2023 forward Mustang but feel free
181:08 - to pick some different
181:10 - cars
181:11 - 2024 shev roll
181:17 - Corvette
181:20 - 2022
181:21 - Dodge
181:23 - Challenger and I should be able to
181:24 - remove a car when I click on it that
181:26 - list item element our Corvette is gone
181:30 - our Mustang and our challenger all right
181:33 - everybody so that is how to create an
181:35 - array of objects and update their state
181:37 - using
181:41 - react hey everybody in today's video I'm
181:44 - going to walk you through creating a
181:45 - to-do list app using react so sit back
181:48 - relax and enjoy the
181:52 - show all right let's do this everybody
181:54 - we'll need to create a new jsx file
181:56 - going to our source folder we will
181:58 - rightclick new file this component will
182:00 - be named too list.
182:04 - jsx this will be a function-based
182:07 - component function to do list no
182:11 - parameters then let's be sure to export
182:13 - it because because if I don't do it now
182:14 - I'm going to forget export default to do
182:18 - list we will be using the use State hook
182:21 - we should import that
182:24 - import react use object D structuring I
182:28 - would like just the use State Hook from
182:31 - its location of
182:33 - react we do need to return something for
182:36 - now we're just going to return a
182:39 - fragment going back to our app component
182:41 - we need to import our to-do list
182:43 - component
182:44 - component import to-do list from its
182:48 - relative file path SL too list.
182:53 - jsx we will return one to-do list
182:57 - component and we are ready to move on
183:00 - within our to-do list component we will
183:02 - have two State variables const tasks
183:06 - tasks will be an array of strings we
183:08 - need a Setter function for tasks set
183:11 - tasks equals the use State hook the
183:16 - initial state of tasks is going to be an
183:18 - empty array but eventually we're going
183:20 - to populate this array with strings one
183:22 - string for each task to add and we will
183:26 - create a state variable for a new
183:29 - task new task is whatever we're
183:32 - currently editing with the text box we
183:34 - will be adding our new task to our array
183:37 - of tasks then we need a Setter function
183:39 - for new task set new task
183:44 - equals U State the initial state will be
183:48 - an empty string let's declare the
183:50 - functions we'll need throughout this
183:51 - program we will need a function to
183:54 - handle input change there will be one
183:58 - parameter an event this function is for
184:01 - our text box when we type in something
184:04 - we'll need a function to add a task
184:07 - function add task there will be no
184:11 - parameters function delete task there
184:15 - will be one parameter an
184:18 - index an index of the list item we would
184:21 - like to delete let me scroll down a
184:24 - function to move task up there is one
184:30 - parameter an index what is the index of
184:33 - the list item we would like to move up
184:35 - within our
184:36 - list and a function to move task down we
184:42 - will also accept an index
184:44 - okay and these are the functions we'll
184:45 - need until we fill these in I'm going to
184:48 - close these
184:51 - functions okay now we'll go to our
184:53 - return statement we have a lot of HTML
184:56 - elements to add we'll begin with a div
185:01 - element our div element will have a
185:04 - class
185:05 - name of two do
185:10 - list within this development we'll
185:12 - create an H1 ment for a
185:14 - heading The Heading will be a to do
185:19 - list after this H1 element I'll create
185:22 - another div
185:23 - element within this div element I will
185:26 - create an input
185:28 - element this will be a self-closing tag
185:31 - just for readability I'm going to place
185:33 - each attribute on a new line we have a
185:35 - lot of attributes to write I will set
185:38 - the type of this input element to be
185:42 - text I'm going to zoom in so you can see
185:44 - it more
185:46 - easily I'll add a
185:49 - placeholder of enter a task dot dot dot
185:54 - enter a
185:56 - task I will set the value of this text
186:00 - box to be some JavaScript our new task
186:04 - State variable this
186:07 - one when we type within this input
186:10 - element we will use the onchange event
186:12 - handler
186:13 - equal to a callback to a JavaScript
186:17 - function a callback to handle input
186:22 - change we'll fill in this function since
186:24 - we're here going to handle input change
186:28 - we will use the setter for our new
186:30 - task access our event parameter access
186:33 - its Target access its value so when we
186:37 - type within the text box it should
186:40 - change eat breakfast
186:44 - if we didn't set the new
186:46 - task and we type within the text box we
186:49 - don't see the text it doesn't change
186:51 - that's why we need this function so we
186:53 - can see the text when we write within
186:55 - the input element let's scroll back down
186:57 - to the bottom after our input element we
186:59 - will create a button
187:02 - element with text of add to add a task
187:07 - for the class name of the
187:08 - button we'll set the class name
187:11 - attribute of the button to be
187:13 - add button add-
187:16 - button I will set the onclick event
187:19 - handler equal to a JavaScript call back
187:24 - we will call the function of add
187:29 - task now temporarily until we apply some
187:32 - CSS I'll write a few tasks within our
187:34 - array just temporarily let's say our
187:37 - first task is to eat
187:41 - breakfast take a sh
187:46 - shower and walk the
187:51 - dog after our development we'll create
187:54 - an ordered list with a pair of O
187:57 - tags within this pair of O tags we'll be
188:00 - embedding some JavaScript we have a lot
188:02 - to write we're going to take all of our
188:05 - tasks and use the map method we will
188:08 - create a list item element for each task
188:11 - for each element within this array
188:13 - we'll use the map method we're provided
188:16 - with two parameters the current element
188:19 - and the index of the current element but
188:21 - I'll rename this element parameter as
188:23 - task so it's more easily understandable
188:26 - within the map method we will use an
188:28 - arrow function what would we like to do
188:30 - with each task I'll put this on a new
188:33 - line we will create a list
188:36 - item a list item element So currently we
188:39 - have three list item elements now react
188:41 - wants us to add a key
188:43 - for each
188:45 - element so it can more easily keep track
188:48 - of each element with the opening list
188:51 - item tag I will set the key attribute
188:53 - equal to the current
188:56 - index within the list item element I
188:59 - will create a span element for some
189:03 - text the class name for this span
189:06 - element will be text this will be for
189:08 - the text of each list item
189:10 - element within the span element we will
189:13 - include the current task we have three
189:16 - tasks eat breakfast take a shower walk
189:20 - the dog after our span element we'll
189:23 - create a button element this button
189:25 - element will be for a delete button to
189:27 - delete this
189:28 - task this button will have a class
189:32 - name of
189:34 - delete dasb
189:36 - button I will set the onclick event
189:40 - handler equal to a call back
189:43 - a call back to delete task now we do
189:46 - have to pass in a parameter the index of
189:49 - the list item we would like to
189:52 - delete delete task pass in the urrent
189:55 - index with a call back if you add a set
189:58 - of parentheses right away when we pass
190:00 - in an argument this will call the
190:01 - function right away instead we will use
190:04 - an arrow function to prevent that let's
190:08 - copy this button paste it we'll now
190:11 - create a move up button to move a task
190:14 - up if we need to change the priority the
190:17 - text on the button will be
190:20 - up but you know what I like to use
190:23 - emojis I'll use a pointer finger I think
190:27 - that would be more fun the class name
190:29 - will be move button on click will be set
190:35 - equal to a call back to move task
190:39 - up we'll be passing in the current index
190:42 - make sure that this is an arrow function
190:44 - too let's copy this button again paste
190:47 - it this next button will be for moove
190:50 - task down we can either write down for
190:53 - the text or I'll use an emoji for
190:57 - fun
190:59 - down all right and that is all the HTML
191:02 - that we need before we fill in these
191:04 - functions let's apply some CSS to
191:08 - everything I'm zoomed in to 100%
191:11 - currently let's select the container of
191:14 - to-do list this development so this has
191:17 - a class of to-do
191:19 - list let's change the font
191:23 - family to be aial with a backup of son
191:28 - serif text align
191:31 - Center denter the text and add a little
191:35 - bit of margin to the
191:36 - top of 100
191:39 - pixels let's select our H1 element in
191:42 - increase the font size to 4
191:47 - RM then we'll select all
191:51 - buttons increase the font size to 1.7
191:56 - RM set the font weight to be
192:01 - bold add some padding around each button
192:04 - padding 10 pixels by 20
192:08 - pixels set the font color to be
192:11 - white we'll add some background color
192:13 - pretty
192:14 - soon remove the border border
192:18 - none border radius to smooth the
192:21 - corners by five
192:24 - pixels change our cursor to be a pointer
192:27 - when we hover over a
192:29 - button that does appear to
192:32 - work we'll add a transition effect when
192:34 - we hover over a
192:36 - button let's change the background color
192:39 - and have it ease after 0.5 5
192:44 - Seconds let's work on the background
192:46 - color of the buttons next we'll select
192:48 - the class of add
192:50 - button add-
192:52 - button pick a background color I'll pick
192:56 - Green but I will use hsl
193:01 - values I've already pre-picked a
193:06 - color now when I hover my cursor over
193:08 - the add button access the hover sudo
193:11 - class take the lightness make it 10%
193:15 - darker let's do this with the delete
193:18 - button let's copy what we have paste it
193:21 - for the next set change add to
193:28 - delete I'll pick a red
193:33 - color again I've already picked some
193:36 - values and when I hover make the shade
193:39 - 10%
193:41 - darker and the move
193:51 - buttons I'll make the move buttons
193:55 - blue again I've already picked a
194:07 - color not bad it looks like with the
194:10 - transition I forgot to add s for seconds
194:14 - that's better we'll work on the input
194:16 - element next so after our
194:21 - buttons let's select our input element
194:25 - we'll select all input elements that
194:27 - have a type attribute of
194:31 - text I'll increase the font
194:34 - size to 1.6
194:37 - RM add a little bit of padding 10
194:41 - pixels add a
194:44 - border two pixel solid pick a
194:51 - color I'll set the lightess to be 80%
194:54 - but lower the alpha to
195:00 - 50% not bad border radius to smooth the
195:03 - corners five
195:05 - pixels and for the font
195:09 - color H let's find
195:11 - something I'll just lower the alpha to
195:16 - 50% here's the text
195:18 - currently I'm happy with that we'll work
195:21 - on the list items we'll begin with our
195:24 - ordered list remove all padding padding
195:28 - zero so that should delete the
195:30 - numbers we will style each list item
195:34 - element increase the font
195:37 - size to 2
195:40 - RM set the font weight to be
195:44 - bold add some padding of 15
195:48 - pixels change the background
195:56 - color I'll set the lightness to
195:59 - 97% add some margin to the bottom of
196:02 - each list item of 10 pixels to separate
196:05 - each of them add a
196:08 - border three pixel solid pick a color
196:13 - for the lightness I'll pick
196:16 - 85% and the alpha down to
196:20 - 75% border radius to round the corners 5
196:26 - pixels for the elements within each list
196:28 - item I'll use flex box display Flex to
196:32 - align everything and align items
196:37 - Center I would like the text to take up
196:40 - as much space as possible so I will
196:42 - select the class of text use flex box
196:46 - set it to One Flex one it's a shortcut
196:50 - for these three CSS properties Flex grow
196:53 - Flex shrink and flex bases this is more
196:56 - advanced Flex box if you set an element
196:58 - to have Flex one you're applying these
197:01 - three properties basically speaking that
197:04 - element should take up as much space as
197:07 - possible and grow and Shrink with the
197:09 - size of the web browser so all these
197:11 - buttons are going to be pushed to the
197:12 - right because the text wants to take up
197:14 - as much space as possible okay now we
197:17 - will select the class of our delete
197:21 - button and move
197:26 - button these two sets of buttons let's
197:29 - add some
197:31 - padding 8 pixels by 12
197:35 - pixels increase the font size to 1.4
197:40 - R I'll add some margin to the left of
197:42 - each button margin left 10 pixels much
197:46 - better this is optional but I'm going to
197:49 - change the background color of the body
197:51 - of my document I will select the body
197:55 - change the background
197:59 - color I'll go with a dark gray color
198:02 - I'll set the lightness to
198:04 - 10% I'll also take our H1 element and
198:08 - set the font color to be white I think
198:10 - that looks pretty good but you don't
198:11 - necess neily need to change the
198:13 - background color if you don't want to
198:15 - our CSS is now done we just have to add
198:18 - some functionality let's go back to our
198:20 - to-do list
198:21 - component we'll begin with add task
198:24 - after hitting the add button we'll call
198:26 - this function to add a new task we have
198:28 - to get the text within this text box
198:32 - we'll use the setter for set tasks pass
198:34 - in a new array spread the current
198:37 - elements of
198:39 - tasks and add our new task that state
198:43 - variable we should update this to use an
198:45 - updator function we will use the
198:48 - previous state of tasks represented as T
198:51 - Arrow spread the previous state of tasks
198:55 - represented as
198:57 - T we would like to clear this input
198:59 - element so we can set new task set it to
199:03 - be an empty string to reset it now we
199:06 - should be able to add a new task go to
199:09 - work and add and and that has worked eat
199:15 - lunch now if somebody doesn't type in
199:17 - anything they can still add a
199:21 - task to prevent that with an add task
199:25 - we'll wrap everything within an if
199:30 - statement take our new task use the trim
199:34 - method to remove any white space if
199:36 - after removing any white space if this
199:39 - is still strictly not equal to an empty
199:41 - string then add a new task so now when I
199:45 - try and add an empty task it doesn't do
199:47 - anything let's add some text go to work
199:52 - and that will
199:53 - work the add task function is now done
199:56 - let's work on delete
199:58 - task delete task provides us with an
200:00 - index an index of the element we would
200:03 - like to delete maybe I don't want to
200:05 - take a shower I'm only a little bit
200:09 - stinky So within delete task we will
200:12 - create a new array of updated
200:16 - tasks so we need to use the filter
200:18 - method take our array of tasks use the
200:21 - filter method with the filter method
200:24 - we're provided with an element and each
200:26 - index of that element during each
200:29 - iteration but we have a naming conflict
200:31 - we already have a parameter named index
200:34 - for the index we would like to delete
200:36 - we'll rename index within the filter
200:38 - method as I to differentiate it Arrow
200:43 - then a condition if the current index of
200:45 - I is strictly not equal to the index we
200:49 - would like to delete put it within our
200:51 - new array of updated tasks if these two
200:55 - indexes match we will filter it out we
200:57 - don't want it cuz we want to delete it
201:00 - then once we have our new array of
201:02 - updated tasks it should be missing that
201:05 - element now we're currently not using
201:07 - this element parameter even though it's
201:08 - provided to us a common convention that
201:10 - people do if a parameter should be
201:12 - ignored people will change this to an
201:14 - underscore that's a convention to say
201:17 - ignore this we will set our new tasks
201:20 - with our updated tasks and this is an
201:23 - array an array that's missing one
201:25 - element whichever one we filter out
201:27 - using the filter method now we should be
201:30 - able to delete an element I do not want
201:32 - to take a shower
201:34 - delete and I don't feel like going to
201:37 - work delete delete task is now done now
201:41 - we need need to be able to move a task
201:42 - up or down using the directional buttons
201:45 - so let's work on task up first let's
201:48 - check to see if our index that's passed
201:52 - in as an argument is greater than zero
201:56 - if the element is already at the top we
201:58 - don't need to move it up further we need
202:00 - to create a new array of updated tasks
202:06 - equals spread the current
202:08 - tasks and create a new array of updated
202:11 - tasks to work
202:13 - with now we're going to use array
202:15 - destructuring to swap two elements
202:17 - within an array here's the
202:21 - formula we have the current
202:24 - index and the index minus
202:27 - one we will be swapping these with index
202:31 - minus
202:33 - one and the current
202:36 - index so take our updated tasks at the
202:40 - current index and the updated tasks at
202:43 - index minus one set these equal to
202:47 - updated tasks at index minus one and
202:50 - updated tasks at the current index I do
202:53 - have a separate video on destructuring
202:55 - if you need a refresher this code will
202:57 - swap two elements within an
202:59 - array and then we will set our tasks
203:02 - using the setter function set tasks pass
203:06 - in our updated
203:08 - array and now we should be able to move
203:10 - an element up
203:12 - whoops looks like we have two functions
203:13 - for move task up move task down all
203:17 - right let's see if this
203:18 - works and now we should be able to move
203:20 - these
203:23 - up with move task down we're going to
203:26 - copy everything within move task
203:28 - up the condition is if our index is less
203:32 - than our task length property minus
203:37 - one if our element is already at the
203:39 - bottom we don't want to move down any
203:41 - further
203:42 - take index +
203:45 - one and then update our tasks now we
203:48 - should be able to move tasks up and
203:51 - down and even add new
203:57 - tasks and delete
204:00 - tasks and of course to initially have no
204:02 - elements within this array we can delete
204:04 - all these so then we start with an empty
204:06 - array all right everybody so that is a
204:08 - somewhat extensive program to create a
204:10 - to-do list applic
204:12 - using
204:16 - react hey everybody we have an important
204:19 - topic to discuss today and that is the
204:21 - use effect react hook use effect is a
204:24 - react hook basically speaking use effect
204:27 - tells react to do some code when then
204:31 - pick one of the following do some code
204:34 - when this component rerenders or do this
204:37 - code when the component mounts when you
204:40 - mount a component that's when you create
204:42 - and append it to the Dum that is known
204:44 - as mounting or do some code when the
204:47 - state of a value changes think of an
204:50 - effect as some side code you would like
204:51 - to perform I don't really think use
204:54 - effect is a great name if I could rename
204:56 - use effect I feel like a more
204:58 - appropriate name would be use side code
205:01 - but that's just my opinion so think of
205:03 - an effect SM side code you'll write your
205:06 - side code within a function this can be
205:08 - a callback an anonymous function or an
205:11 - arrow
205:12 - function and optionally for the second
205:15 - argument you can pass in an array of
205:18 - dependencies if we would like to run our
205:20 - side effect on every render of the
205:22 - component we would just need to pass in
205:24 - a function such as an arrow function do
205:28 - this code every time the component
205:30 - renders if you would like to perform
205:32 - some side code only when the component
205:34 - mounts and not during every render you
205:37 - would pass in an empty array of
205:40 - dependencies that tells react perform
205:42 - this code only once when the component
205:45 - mounts within your array of dependencies
205:47 - if you were to pass in a value this code
205:50 - would run when the component mounts plus
205:53 - when this value changes use effect has a
205:56 - bunch of different uses you'll see use
205:58 - effect with event listeners do
206:01 - manipulation subscriptions to real-time
206:03 - updates fetching data from an API and
206:06 - clean up when a component unmounts
206:09 - unmounting is when you remove a
206:10 - component from the DOT
206:12 - whereas in mounting is adding a
206:13 - component to the Dom okay let me give
206:15 - you a few examples in order for us to
206:18 - use use effect we have to import it from
206:20 - the react Library we have use State as
206:23 - well as use effect in this example we're
206:27 - going to create a count State
206:29 - variable const count and a Setter for
206:34 - count set count equals use State the
206:39 - initial state of count will be be zero
206:42 - and we'll display our count within our
206:44 - return
206:45 - statement let's create one paragraph
206:48 - element that has text of count as well
206:53 - as our state variable of count and a
206:57 - button let's create a button element
206:59 - that has text of add when we click on
207:03 - ADD we will add one to our count we'll
207:06 - need a function to work with I will set
207:08 - the onclick event handler equal to a
207:12 - JavaScript function let's name this
207:14 - function add
207:16 - count then we just need to declare this
207:20 - function function add
207:25 - count all we'll do is use our Setter for
207:29 - count take the previous state of count
207:32 - as a parameter Arrow do this take the
207:36 - previous state of count add one every
207:39 - time I press the button we will add one
207:41 - one to
207:42 - count now let's use use effect I can run
207:46 - some side code every time this component
207:48 - renders I would just have to place that
207:50 - code within a function that will pass to
207:53 - use effect every time this component
207:55 - renders I will change the title of the
207:58 - document we'll need to use use effect be
208:02 - sure to place use effect near the top of
208:04 - your component we will call use effect
208:09 - there are two arguments a function
208:12 - and an array of
208:15 - dependencies I would like to perform
208:17 - some code every time the component
208:19 - renders I do not need that second
208:22 - argument now we just need a function
208:25 - this can be a callback an anonymous
208:27 - function or an arrow
208:29 - function we're going to be using an
208:31 - arrow function every time this component
208:34 - rerenders what would we like to do let's
208:37 - access our document access the title set
208:41 - it equal to be a template string of
208:45 - count and insert our state variable of
208:49 - count Let me
208:51 - refresh every time this component
208:53 - rerenders including initially when we
208:56 - Mount the component we will perform this
208:58 - code where we update the title every
209:01 - time I press the added button the title
209:03 - is going to
209:07 - update if you would like your side code
209:09 - to run only when the component it mounts
209:12 - when we create and add it to the Dom
209:14 - initially you'll pass in as a second
209:16 - argument an empty array an empty array
209:19 - of dependencies so if I were to run this
209:22 - again and press add well our title only
209:26 - updates
209:28 - once and no other time after that for
209:32 - example I might want to set my title to
209:34 - be my counter
209:37 - program I only need to update this title
209:40 - once I I don't need to update it every
209:42 - time the component
209:43 - renders it's a oneandone effect in this
209:47 - case I would like to add an empty Ray of
209:49 - dependencies because if I didn't well we
209:52 - would update this title every time the
209:55 - component
209:55 - renders when we really don't need to in
209:59 - this specific example it doesn't benefit
210:01 - us to update the title every time we add
210:03 - one to
210:04 - count let's revert those changes
210:08 - back you could pass in a value to your
210:10 - array of
210:11 - dependencies within your array of
210:13 - dependencies you can add a value let's
210:16 - add our count State variable what we're
210:18 - telling react is that when our component
210:21 - mounts plus when this value changes of
210:24 - count then do the side code so with what
210:28 - I've written currently every time I
210:30 - press the button the title is going to
210:34 - update if our count State variable
210:37 - updates perform our side code this is
210:40 - very s similar to us not having that
210:42 - dependency array you know this will work
210:45 - too however since we don't have any
210:48 - dependencies this code is going to run
210:50 - for any reason that this component
210:52 - rerenders even for something completely
210:54 - unrelated by adding an array of
210:57 - dependencies and placing a value within
211:00 - do this code only when this value
211:02 - updates now to demonstrate we'll create
211:05 - another button to
211:08 - subtract the text will be subtract
211:12 - we'll create a function to subtract
211:17 - count we can copy this function paste it
211:22 - change the name to subtract count take
211:25 - the previous state of count minus one so
211:29 - if our count changes whether we add one
211:32 - or minus one the title of our document
211:35 - is still going to
211:37 - change if the value of count changes for
211:40 - any reason do the side code let's add
211:43 - another value to our dependency array we
211:45 - will create a state variable for
211:48 - color color and set
211:52 - color equals use State the initial state
211:57 - for my color will be green we'll flip
212:00 - between green and red green means go red
212:03 - means stop after our subtract button I
212:06 - will add a break and button two change
212:09 - the color
212:12 - change
212:14 - color the onclick event handler will
212:17 - equal this function of change
212:21 - color and we just need to Define this
212:24 - function
212:26 - function change
212:29 - color we will use the setter for set
212:35 - color we will use the previous state of
212:39 - color is the previous state of
212:42 - color strictly equal to
212:45 - Green tary operator is this true if it
212:49 - is return Red otherwise return
212:53 - green then we will take our paragraph of
212:56 - count access the style attribute set it
213:00 - equal to embed some JavaScript we need a
213:03 - JavaScript object so we need another set
213:05 - of curly braces take the color property
213:08 - set it equal to our color State
213:12 - variable so now the count is green with
213:15 - our title let's also add the
213:19 - color so I'm not going to add our color
213:22 - to our dependency array quite yet we can
213:26 - add the title updates we can subtract
213:29 - the title still updates but if we change
213:32 - the color the color changes of this
213:34 - paragraph element but not the title
213:37 - we're executing this code only when the
213:40 - count changes
213:41 - so even though I'm flipping between red
213:43 - and green the title is still staying the
213:45 - same if I were to add our color to our
213:48 - dependency array anytime the count or
213:51 - the color changes update the title so
213:54 - let's try this again the title updates
213:56 - when I add or
213:59 - subtract or change the color now the
214:02 - title is count one red count one green
214:06 - count one red count one green so that's
214:09 - where your dependency array comes in
214:11 - anytime one of these values change
214:13 - perform the side code now you may have
214:16 - noticed if you remove use
214:21 - effect well your title is still going to
214:25 - update so why would you need use effect
214:28 - there are a couple benefits of using use
214:30 - effect the first benefit is that by
214:33 - using use effect it keeps your code more
214:35 - organized if you were to look over some
214:37 - react code and look within the use
214:40 - effect hook
214:41 - you could tell when exactly this code
214:43 - runs does it run during every
214:46 - render only when the component mounts or
214:50 - when one of these values change if you
214:52 - didn't use use
214:54 - effect well then this code would run
214:56 - every single time regardless every time
214:59 - the component rerenders which you may
215:01 - not always want but not only that but
215:03 - with more advanced features such as
215:05 - event listeners or subscriptions you may
215:07 - want to remove or free up those
215:09 - resources you can return a cleanup
215:12 - function if you were to return a
215:14 - function when this component unmounts
215:17 - when we remove it from the Dom or before
215:19 - the next render you can perform some
215:23 - cleanup
215:24 - code for example if we were to add an
215:26 - event listener when the component mounts
215:28 - we would like to remove it before
215:30 - unmounting if we don't it may lead to
215:33 - unexpected Behavior so that's another
215:35 - benefit of using use effect perform some
215:37 - code only in certain situations and you
215:40 - do have the option to do some cleanup
215:42 - code before the next reender or when you
215:45 - unmount the component I'll discuss the
215:47 - return statement in this next
215:48 - demonstration and how it can be useful
215:51 - in this next example we're going to
215:53 - create a width and a height what the
215:55 - width and the height of our window is
215:59 - every time we adjust the size of the
216:00 - window the width and the height
216:02 - displayed is going to change we'll need
216:04 - two State variables to work with a
216:08 - width set width
216:11 - we will be using use
216:14 - state so the initial state of the width
216:17 - of the window access our window give me
216:21 - the inner width property then let's do
216:24 - this with
216:26 - height const height set height window do
216:33 - inner
216:35 - height within our return statement we
216:37 - will create a paragraph element that has
216:40 - text
216:41 - of window width we will display our
216:45 - width State variable then add pixels for
216:49 - a unit of
216:50 - measurement then let's do this with
216:52 - height
216:53 - window height display our height State
216:58 - variable so we have window width and
217:00 - window height if I were to adjust this
217:03 - window nothing
217:05 - happens there's no change let's create a
217:08 - function to handle
217:11 - size
217:13 - function
217:14 - handle
217:17 - resize no parameters we're going to set
217:20 - our
217:22 - width to be the inner width property of
217:26 - our
217:27 - window and set height H should be
217:31 - Capital set
217:33 - height take our inner height of our
217:36 - window and reset it so now we need to
217:40 - add a an event listener because this
217:41 - still doesn't change we're going to add
217:43 - an event listener that will listen for a
217:46 - resize event whenever we resize our
217:48 - window if we attempt to use this without
217:51 - use effect but within the body of our
217:53 - component we will take our window add an
217:57 - event
217:59 - listener we need an
218:02 - event and a function to do something the
218:05 - event is going to be a resize event when
218:09 - the window is resized perform this code
218:12 - we will pass in a call back to handle
218:15 - resize and then for demonstration
218:18 - purposes I'm going to
218:21 - console.log
218:23 - event
218:24 - listener
218:26 - added we only need one event listener to
218:29 - make this program work now if I were to
218:32 - resize my window this does work our
218:35 - width State variable changes same thing
218:38 - goes with the height
218:41 - now let's take a look at our console
218:43 - there's an
218:44 - issue we only need one event listener to
218:47 - make this program
218:50 - work however every time the component
218:52 - rerenders we're adding a new event
218:55 - listener we have added over 1,000 event
218:58 - listeners that's really not good how
219:00 - about this only when our component
219:03 - mounts when we append it to the Dom we
219:05 - will add one event listener and that's
219:08 - it so guess what we're going to place
219:10 - our code within use
219:13 - effect we will pass in a
219:17 - function and an array of dependencies
219:20 - when would we like to add an event
219:22 - listener let's add an event listener
219:25 - only when the component mounts so we
219:27 - need to add an empty array of
219:29 - dependencies let's try that again I'm
219:32 - going to resize our
219:35 - window that should be good go to
219:39 - inspect
219:42 - yeah you can ignore all this
219:45 - garbage so if you have strict mode on
219:48 - which I do use effect is going to run
219:51 - twice it will run a development only
219:53 - setup and then a cleanup cycle so this
219:55 - is normal so we didn't add thousands of
219:58 - event listeners besides the first
220:01 - cleanup cycle because I have strict mode
220:02 - on we're only adding one event listener
220:05 - because that's all we need we don't need
220:07 - thousands of event listeners if you ever
220:10 - need to unmount the component meaning
220:12 - remove it from the Dom use effect has
220:14 - another use and that is adding a return
220:17 - statement to do any cleanup you will
220:20 - return a function do this code either
220:24 - before the next render or when the
220:27 - component unmounts if we add an event
220:29 - listener then we unmount the component
220:32 - it would be good practice to remove that
220:34 - same event listener if you don't that
220:37 - can lead to unexpected behavior when and
220:40 - we unmount our component we will take
220:42 - our
220:44 - window then
220:46 - remove
220:48 - event
220:50 - listener we will remove the event of
220:54 - resize and a call back to handle
220:58 - resize when we are done with this
221:00 - component free up any resources so that
221:03 - it doesn't lead to unexpected Behavior
221:05 - let me add one more line of code too
221:08 - let's console.log
221:12 - event listener
221:14 - removed let's refresh resize our window
221:18 - a few
221:20 - times go to
221:22 - inspect
221:24 - console okay let's take a look since I
221:27 - am in strict mode we'll run our use once
221:30 - during the development cycle and then
221:32 - clean it up right away then we will add
221:35 - that event listener only once we didn't
221:37 - unmount this component yet so we didn't
221:40 - remove it so by adding a return
221:42 - statement you can do any cleanup either
221:45 - before the next reender or when you
221:47 - unmount the
221:48 - component within a component you can add
221:51 - more than one use effect hook we're
221:53 - going to add a second use effect hook if
221:56 - the width or the height changes we're
221:58 - going to update the title of our
222:00 - document to display the width and the
222:02 - height so let's add a another use effect
222:05 - hook use
222:08 - effect what code would we'd like to
222:11 - perform let's access our document take
222:15 - the title set it equal to be let's use a
222:18 - template string let's say size
222:23 - placeholder width x
222:29 - height when would we like to use this
222:31 - effect let's use this effect when the
222:34 - width and the height update we will need
222:37 - that dependency array we will list
222:40 - the width and the height State
222:43 - variables so on Mount we'll get the size
222:46 - right away 227 by
222:49 - 396 now every time the width and the
222:52 - height changes the title is going to
223:05 - update so you can have more than one use
223:08 - effect hook within your component
223:10 - all right everybody so that is the use
223:12 - effect hook it's a react hook that tells
223:14 - react to do this code when either the
223:18 - component renders this component mounts
223:21 - or the state of a value changes there
223:23 - are two arguments a function that
223:26 - contains the code you would like to
223:27 - perform and optionally an array of
223:30 - dependencies based on what you pass in
223:33 - to use effect you'll either run this
223:35 - code after every render run only when
223:38 - the component mounts
223:40 - or run when the component initially
223:42 - mounts plus when the value changes use
223:45 - effect is great with event listeners Dom
223:48 - manipulation subscriptions to real-time
223:51 - updates fetching data from an API or
223:54 - cleanup when a component unmounts we
223:56 - will have more practice with use effect
223:57 - in the next video where we will create a
223:59 - digital clock and well everybody that is
224:02 - an introduction to use effect in
224:07 - react hey everybody in today's video I'm
224:10 - going to show you how we can create a
224:11 - digital clock using react so sit back
224:14 - relax and enjoy the show okay let's get
224:17 - started everybody if you would like a
224:19 - background image for your app place that
224:21 - image within your assets folder here's
224:23 - the image that I'm going to use I found
224:25 - it online we will create a digital clock
224:28 - component within our source
224:30 - folder digital clock.
224:34 - jsx we will need to import two hooks
224:37 - import from react use object
224:40 - destructuring to get the use State hook
224:45 - as well as the use effect Hook from its
224:49 - location of
224:51 - react we're going to create a function
224:53 - based component of
224:56 - digital clock no parameters then be sure
225:00 - to export it at the end export
225:04 - default defaulty default digital
225:08 - clock we do need to return something for
225:11 - the time being we are going to return a
225:15 - fragment just so that everything runs
225:18 - back within our app component we need to
225:23 - import our digital clock component from
225:26 - its
225:29 - locationd digital clock.
225:32 - jsx we will include one digital clock
225:37 - component within our digital clock comp
225:39 - component we'll create the following
225:42 - HTML we will create a div element to
225:44 - contain
225:49 - everything this outer div element is
225:51 - going to have a class
225:53 - name of
225:55 - clock
225:57 - container within this development we
225:59 - will create a nested development this
226:02 - development will have a class
226:04 - name of
226:06 - clock we have a clock within a clock
226:09 - contain container within this in div
226:11 - element we will create a span element to
226:15 - display a time until we get the time
226:17 - working let's display a bunch of zeros
226:20 - for the hours minutes and seconds and
226:24 - here's our time but it's a little small
226:27 - I'm zoomed in currently okay let's go to
226:30 - our CSS stylesheet we will select the
226:33 - following the body of our
226:35 - document our clock container class
226:41 - and our class of clock if you would like
226:45 - to add a background image here's what
226:47 - you can do within the body of your
226:49 - document we will set the background
226:52 - image
226:53 - property to be we will use the URL
226:58 - function within this function we will
227:00 - pass in a relative or absolute file path
227:03 - to your image from the index file we'll
227:06 - have to access the assets
227:08 - folder asset that's the name of the
227:10 - image my image is named background and
227:14 - this is a
227:15 - JPEG okay here's my
227:18 - image but it's a little big then we will
227:22 - take our
227:23 - background position property set it to
227:26 - be Center to Center the image now it
227:30 - does
227:32 - repeat we'll set the background repeat
227:35 - property to be no repeat
227:40 - we'll set the background size to cover
227:43 - to cover this div element the outer div
227:47 - element background size cover now we'll
227:52 - take the background attachment property
227:56 - set it to be
227:58 - fixed as we adjust the size of the
228:01 - window the image is going to adjust
228:04 - accordingly and maintain its aspect
228:08 - ratio
228:10 - we do have a little bit of margin around
228:11 - the body of our document I'm going to
228:13 - remove that margin
228:16 - zero next we have to work on the clock
228:19 - itself it's a little small within the
228:21 - clock class I will set a color of
228:26 - white I'll increase the font size CU we
228:29 - can barely see it to 6 RM that should be
228:32 - a decent
228:34 - size and a font weight of
228:38 - bold pick a font
228:41 - family I will pick monospace I think
228:44 - that'll look good for a
228:46 - clock I will also add a text Shadow
228:50 - effect with a horizontal and vertical
228:52 - offset of three pixels each and a blur
228:56 - of five pixels pick a color I'll pick
228:59 - black but I'll lower the alpha to 75% or
229:06 - so then I will Center align my text
229:10 - text align
229:14 - Center our clock is centered
229:16 - horizontally but not vertically within
229:18 - the window if you would like the clock
229:21 - in the exact middle of the window here
229:23 - are some following optional CSS
229:24 - properties you can add these are
229:29 - optional we'll use flex box display Flex
229:33 - to display all the
229:36 - elements
229:37 - justify content
229:41 - Center to Center this clock vertically
229:43 - within the middle of our window we have
229:45 - to set the maximum height of the body to
229:48 - be 100% of the viewport height we'll add
229:51 - this following property set the minimum
229:55 - height of the body to be 100 VH for the
229:59 - viewport height 100% of the viewport
230:03 - height then use the Align items property
230:08 - set it to be Center to vertically align
230:11 - it and I think that looks pretty good
230:13 - now we'll select our clock container for
230:15 - the background of the clock container I
230:18 - would like it so it looks like we're
230:19 - looking through glass here's how to do
230:21 - that we will use the backdrop filter
230:26 - property use a function of blur pass in
230:30 - a number in an amount of pixels the
230:33 - greater the number the greater the blur
230:36 - here's five pixels here's 50 what's 500
230:40 - look
230:41 - like okay let's go with five pixels we
230:44 - have a little bit of a blur effect if
230:46 - you would like the clock container to
230:48 - take up 100% of the viewport width you
230:51 - can add the following
230:54 - property set the width of the clock
230:56 - container to be 100 VW for viewport
231:01 - width so now the clock container takes
231:04 - up 100% of the width of the
231:07 - window then I'll add a little bit of
231:09 - padding to the top and bottom but not
231:11 - the sides padding 10 pixels for the top
231:15 - and bottom zero for the sides we should
231:18 - get a little bit of padding on the top
231:19 - and bottom I like that I think that
231:21 - looks pretty good okay we can save
231:23 - everything we no longer need our CSS
231:26 - stylesheet and now we will be working
231:28 - within the digital clock
231:31 - component we'll be using the uate hook
231:34 - we will create a state variable of time
231:37 - const time and a Setter for time named
231:41 - set time equals the use State hook for
231:45 - the initial state of the use State hook
231:47 - we will pass in a new date object
231:50 - whatever the current date and time
231:52 - currently is that's what the initial
231:54 - state of time is going to be it will be
231:57 - an
231:58 - object we will also use the use effect
232:02 - hook we can perform some code during
232:04 - each render or when we Mount or anytime
232:08 - some sort of value
232:09 - updates when this component mounts we'll
232:12 - start an interval to move the clock
232:14 - forward there's two parameters within
232:16 - use effect a function to do
232:19 - something and an array of
232:23 - dependencies for our function we'll use
232:25 - an arrow function parameters Arrow do
232:30 - this and for our dependencies based on
232:33 - the last video we're just going to set
232:35 - an empty array I would like to start a
232:37 - timer only when when we Mount the
232:39 - component we don't need to start a new
232:42 - timer every time the component renders
232:44 - what would we like to do once when our
232:46 - component mounts we will create a
232:48 - constant of interval ID equals set
232:56 - interval with set interval we can pass
232:58 - in a call back and a time in
233:01 - milliseconds to repeat this call back
233:04 - let's do some code every 1,000
233:07 - milliseconds meaning every 1 second
233:10 - let's do the following we'll write an
233:12 - arrow function to do this every 1,000
233:16 - milliseconds we will update the state of
233:19 - time using our Setter of set time we
233:22 - will pass in a new date
233:25 - object and that's all we need so after
233:29 - every second we will update the state of
233:32 - time with the new current date and time
233:36 - now if we do unmount this component it
233:38 - would be good practice if we were to
233:40 - clear our timer if we don't it may lead
233:42 - to unexpected Behavior we will add a
233:45 - cleanup function when this component
233:48 - unmounts we will return the
233:51 - following do this function we will call
233:54 - the function to clear interval and pass
233:58 - in that interval
234:00 - ID to stop this interval if we ever
234:03 - unmount our digital clock we don't want
234:05 - it to continue running we want to free
234:07 - up any resources
234:09 - if we don't that may lead to unexpected
234:11 - Behavior so that is all we need with use
234:14 - effect when we Mount and that's it
234:17 - create an interval that updates once
234:19 - every second when we unmount the
234:21 - component clear that interval and that's
234:25 - it now we will also need a function to
234:28 - format time function format time there
234:33 - are no
234:34 - parameters we need to get the hours
234:36 - minutes and seconds of our time the
234:39 - state variable of time that's pretty
234:42 - simple though we will declare using let
234:45 - let hours equals our time State
234:49 - variable use the method of get
234:53 - hours let's do this with
234:56 - minutes let minutes actually let's
235:00 - declare this as const const
235:04 - minutes time. getet minutes and
235:09 - seconds const seconds equals
235:14 - time.get
235:16 - seconds we will also find what the
235:19 - meridium is is it am or p.m we'll have
235:23 - to write the following const meridium
235:27 - equals let's examine our hours is our
235:31 - hours greater than or equal to 12 our
235:35 - time in hours is going to be in military
235:37 - time I believe that's 0 through 23
235:39 - technically if ours is greater than or
235:42 - equal to 12 tary operator if this is
235:46 - true meridium will be
235:50 - PM otherwise meridium will be
235:56 - am with hours we're going to reassign it
236:00 - let's say that it is 1 p.m. so hours
236:03 - will be 13 1 hour after 12 if I don't
236:07 - want to display my time and military
236:09 - time I'm going to reassign hours we'll
236:12 - take hours modulus 12 modulus gives you
236:16 - the remainder of any division for
236:18 - example if ours is 13 13 modulus 12 has
236:22 - a remainder of 1 so that's how you can
236:24 - convert from military time use modulus
236:27 - 12 what if ours is 12 12 modulus 12 is
236:31 - 0o if it's 12:00 we don't want to
236:34 - display zero we can add the following
236:37 - use the or logical oper operator or
236:40 - return 12 if this equation is zero that
236:44 - is equivalent to false so using the or
236:47 - logical operator ours would instead
236:50 - equal
236:51 - 12 then within format time we're going
236:54 - to return one long template
236:57 - string we will display a placeholder
237:01 - with ours colon a placeholder with
237:06 - minutes colon a placeholder with
237:11 - seconds space placeholder our
237:15 - meridium then within our span element we
237:18 - will display embed some
237:21 - JavaScript called The Format time
237:24 - function here's the current time for me
237:26 - it is 7:52 at night p.m. and the time is
237:31 - updating now we have a problem if one of
237:35 - our units of time is a single digit we
237:37 - don't have any leading Zer so let's fix
237:41 - that we will declare a function function
237:45 - pad
237:48 - zero there's one parameter we have to
237:50 - pass in a
237:52 - number with hours minutes and seconds we
237:55 - will pass each of these units of time to
237:57 - the pad zero function so we will enclose
238:00 - each of these within the pad zero
238:03 - function then return a result so let's
238:06 - pad our hours with zero
238:09 - pad our minutes with
238:12 - zero and Pad seconds with
238:20 - zero okay we have undefined undefined
238:23 - undefined that's okay so within pad zero
238:27 - we have to return something we need to
238:30 - check to see if our number is a single
238:33 - digit we can do that with checking to
238:35 - see if number is less than 10 if it is
238:38 - it's a single digit we'll use the tary
238:41 - operator is our number a single digit is
238:44 - it less than 10 if that's true we're
238:47 - going to return a string of zero if not
238:51 - we don't have to do anything we'll
238:52 - return an empty string we will take all
238:55 - of this and close it within a set of
238:57 - parentheses return either zero or an
239:00 - empty string plus the original
239:03 - number for example if our number was 1 1
239:07 - is less than 10 that is true we'll
239:10 - return a string of zero the new string
239:12 - concatenation and add our original
239:14 - number of one so we would return
239:18 - 01 if our number was 12 well this
239:22 - condition is false we would return an
239:24 - empty string plus the original number of
239:26 - 12 which would give me a string of 12 so
239:30 - here's the
239:32 - result we have each unit of time with
239:34 - the leading zero if it needs it and we
239:37 - have success F created a digital clock
239:40 - component and the cool thing about doing
239:42 - this in react is that we can reuse this
239:44 - component whenever we want we can create
239:47 - one digital clock component or another
239:51 - or another or another and Let me refresh
239:54 - these to synchronize them these are all
239:57 - individual components running their own
239:59 - code all right everybody so that is how
240:02 - to create a digital clock component
240:04 - using
240:07 - react hey everybody today I got to
240:09 - explain use context in react use context
240:13 - is a react hook it allows you to share
240:15 - values between multiple levels of
240:17 - components without passing props through
240:20 - each level what we'll do in this example
240:23 - is create four components components a
240:26 - through D each component will be nested
240:28 - within one another so within our source
240:30 - folder let's create a new file for
240:33 - component a this will be a jsx file we
240:37 - will create a function based component
240:40 - named component a no parameters for now
240:44 - and be sure to export it export default
240:48 - component
240:49 - a within this component we will return
240:52 - some HTML we will return a div
240:59 - element the div element will have a
241:01 - class name of
241:04 - box within the div element we will
241:06 - create an H1 element
241:09 - that as text of component
241:11 - a within our app component we will
241:14 - import component
241:16 - a import component
241:19 - a from its
241:23 - location component a.
241:25 - jsx we will return a single component a
241:31 - component we're also going to add a
241:33 - little bit of CSS to visualize it we
241:36 - will select our class of box add a
241:39 - border of three pixel
241:42 - solid and padding of 25
241:46 - pixels here's component
241:48 - a we're going to copy this file of
241:51 - component
241:52 - a and paste it three
241:57 - times we will rename the second copy as
242:00 - component
242:02 - B the third as component
242:07 - C
242:08 - the fourth as component
242:14 - D we have component a b c and d within
242:19 - component B rename any instance of
242:21 - component a with component
242:23 - B the same goes for
242:28 - C and
242:33 - D from component a we're going to import
242:36 - component B
242:39 - import component B from its
242:44 - location component b.
242:48 - jsx after our H1 element we will include
242:52 - one component B
242:54 - component we have component B within
242:57 - component a now within component B we
243:00 - will import component
243:02 - C import component C from its
243:07 - location
243:08 - component c.
243:11 - jsx after our H1 element we will include
243:14 - one component C
243:18 - component so we have component C within
243:21 - component B within component a within
243:24 - component C we will import component D
243:27 - import component D from its
243:32 - location component d.
243:36 - jsx after our H1 element we will include
243:39 - one component D
243:42 - component we have component D within
243:45 - component C within component B within
243:46 - component a I've organized my tabs a b c
243:52 - d within component a we're going to
243:54 - create a state
243:56 - variable const user and a Setter for
244:01 - user equals the U State hook we will
244:04 - need to import
244:06 - it type in your username I'll type in
244:09 - bro code for
244:11 - mine at the top we need to import from
244:15 - react use object destructuring to get
244:17 - the use State Hook from its location of
244:23 - react now after our H1 element I will
244:26 - create an H2 heading we will embed some
244:29 - JavaScript we'll display a template
244:31 - string of
244:33 - hello add a
244:35 - placeholder your username
244:40 - So within component a you should have an
244:42 - H2 heading that displays hello and your
244:46 - username within component D what if I
244:49 - would also like to display my username
244:51 - well from component a I would have to
244:54 - pass props down all the way to component
244:56 - D I'll have to pass them to B which will
244:59 - pass them to C which will pass them to D
245:02 - so if we were using props this is what
245:05 - we would have to do within component B
245:08 - we will pass in props set user to equal
245:13 - our user within component B we'll have
245:16 - to set up
245:17 - props props will be the parameter within
245:21 - component C we will set user to equal
245:25 - embed some JavaScript props do user
245:29 - within component C we'll set up props
245:32 - again within component D we will set
245:35 - user to equal embed some Java JavaScript
245:38 - props do user then within component D
245:42 - set up props again after our H1 element
245:46 - let's create an H2 element we'll embed
245:49 - some JavaScript use a template string
245:52 - display by add a
245:55 - placeholder access props our parameter
245:59 - access the
246:00 - user within component a we have hello
246:04 - your username within component D we have
246:07 - by your username by passing props down
246:11 - each of these nested components this is
246:13 - known as prop drilling where drilling
246:15 - down to the center the center component
246:18 - passing props down this long chain can
246:20 - become very tedious but there's a better
246:22 - solution and that is with the use
246:24 - context hook the use context hook allows
246:27 - us to share values between multiple
246:30 - levels of components without passing
246:32 - props down through each level however we
246:35 - have to set up a provider component
246:38 - which component has the data we would
246:39 - like access to in this case it would be
246:42 - component a in component a we have that
246:45 - state variable of our username which we
246:48 - named user So within our provider
246:50 - component we have three steps we have to
246:53 - import create context from react So
246:56 - within component a we already have used
246:59 - state but we also need create
247:03 - context we need to create some context
247:06 - and Export it
247:08 - export const then we need a unique name
247:12 - for this context we're working with the
247:14 - username let's name our context user
247:18 - context the context name should be
247:20 - descriptive of what you're working with
247:23 - if the data we're working with as a
247:24 - color we could say color context equals
247:29 - create context and this is a
247:32 - function now the last thing we need to
247:34 - do is wrap any children components with
247:37 - within this special provider
247:40 - component we are going to wrap component
247:42 - B within another component we will take
247:45 - our user
247:47 - context access provider set the value
247:51 - equal to be some JavaScript our value of
247:58 - user and we just need to wrap this
248:01 - component of component
248:06 - B component a is now the provider
248:09 - component it's going to provide a value
248:12 - of user we no longer need props we can
248:15 - get rid of these for each
248:18 - component after I deleted props from
248:21 - component B well our username is now
248:23 - undefined within component D we broke
248:25 - that
248:34 - chain all
248:36 - right any component that needs this data
248:39 - we will set up to be a consumer
248:41 - component you can have more than one
248:44 - we'll have to import the use context
248:46 - Hook from react as well as the context
248:49 - that we set up we're exporting it so we
248:52 - need to import it elsewhere within
248:54 - component D we will import from react
248:58 - use object
248:59 - destructuring the use context Hook from
249:03 - its location of
249:06 - react we also need the user
249:09 - context import use object D structuring
249:12 - to get user context from its
249:17 - location of component
249:21 - a that was the original location where
249:24 - we exported it
249:28 - from we'll use the context get the
249:32 - context and store the value we'll do
249:35 - that inside of our
249:36 - component
249:38 - const user
249:41 - equals use context hook we're going to
249:45 - pass in our user context as an argument
249:49 - and now we have access to
249:51 - user we'll use a placeholder and add our
249:56 - user and that has appeared to work we
249:59 - have displayed bu your
250:02 - username we have avoided prop drilling
250:05 - instead of drilling down to the center
250:06 - component to pass down a value by using
250:09 - use context we Traverse up the component
250:12 - tree to find the nearest provider which
250:15 - would be component a component a is the
250:18 - provider component component D is a
250:21 - consumer component and you can have more
250:23 - than one so let's do the same thing with
250:25 - component C we need these two lines of
250:28 - code really we can just copy them
250:31 - because I'm
250:34 - lazy and we need to create a constant
250:38 - of user or some other descriptive name
250:40 - for this value use context pass in our
250:44 - context of user
250:46 - context let's add another H2 element
250:50 - we'll embed some JavaScript use a
250:52 - template string let's say hello again
250:57 - add a placeholder our
251:00 - username So within component C we have
251:03 - used use context again without prop
251:06 - drilling we're just playing hello again
251:09 - your
251:10 - username any component that's a child
251:13 - component of our provider component of a
251:16 - has access to this value that we set up
251:19 - all right everybody so that is the use
251:20 - context react hook it allows you to
251:23 - share values between multiple levels of
251:25 - components without passing props through
251:28 - each level if you have a lot of nested
251:30 - components passing props down to each
251:33 - level can become very tedious this is a
251:35 - way to avoid that and well every
251:37 - everybody that is the use context hook
251:39 - in
251:44 - react okay let's do this everybody we
251:46 - got to talk about the use ref hook in
251:48 - react use ref meaning use reference is
251:51 - very similar to use State use state
251:54 - store some sort of value or an object or
251:57 - an array whenever the state value
251:59 - changes use State renders the component
252:02 - which isn't always what we want use ref
252:05 - meaning use reference it does cause
252:07 - reenders when its value changes use use
252:11 - ref when you want the component to
252:13 - remember some information but you don't
252:15 - want that information to trigger new
252:17 - renders use ref is helpful with
252:20 - accessing and interacting with dom
252:21 - elements handling Focus animations and
252:25 - transitions as well as managing timers
252:27 - and intervals use State triggers renders
252:31 - use ref doesn't in order for us to use
252:33 - the US ref hook we have to import it
252:35 - from react import use ref for this
252:39 - sample program we'll be using UST State
252:41 - originally then we'll switch it up and
252:43 - use use ref to see the
252:45 - differences we'll Begin by using the use
252:47 - State hook we will have a state variable
252:51 - of number and a Setter for number equals
252:55 - U State I will set the initial state of
252:58 - number to be zero we will return a
253:01 - button
253:06 - element the button will have text of
253:09 - Click me I will set the onclick event
253:12 - handler equal to a function of handle
253:17 - click then we just need to declare this
253:20 - function function handle click no
253:24 - parameters what do we want to do when we
253:27 - click on the button let's use the setter
253:29 - for
253:31 - number and increment the previous state
253:34 - of number by
253:35 - one n + one whenever my number updates
253:40 - it's going to cause my component to
253:42 - render I can demonstrate that with the
253:44 - use effect hook so before our function
253:47 - of handle click let's use use effect
253:51 - with use effect if we don't pass in a
253:53 - dependency array we'll perform some code
253:56 - every time this component renders so for
253:58 - this demonstration let's
254:01 - console.log component rendered anytime
254:05 - this component renders using effect is
254:07 - going to execute this code where we
254:09 - display component rendered so I'm going
254:12 - to go to my
254:15 - console when your component mounts
254:17 - you'll render your component twice
254:19 - that's if you're in strict mode just
254:21 - temporarily for this demonstration I am
254:22 - going to remove strict
254:25 - mode so our component renders once on
254:28 - Mount whenever we update the state of a
254:30 - state variable that causes the component
254:33 - to
254:35 - reender that's where use ref comes in
254:38 - use ref doesn't cause a component to
254:40 - render when its value changes it's kind
254:43 - of like an escape hatch so instead of
254:45 - using a state variable we're going to
254:47 - use ref use ref means use reference
254:50 - we're referring to something we will
254:53 - declare a const of ref equals use ref
254:59 - function use ref returns an object an
255:02 - object that has one property of current
255:05 - if you pass in a value to use ref you
255:08 - can set the property of current to some
255:10 - value I will set the current property of
255:13 - my ref object to be zero then within
255:16 - handle click within handle click I will
255:19 - access my ref object access the current
255:22 - property then I'll have access to that
255:25 - value I will set the current property of
255:27 - ref to be ref. current property plus one
255:33 - or we could use the increment
255:35 - operator every every time we click the
255:37 - button we will increase the current
255:40 - property of ref by one and then I will
255:43 - display what that value is console.log
255:46 - access our ref object access the current
255:49 - property let's go to inspect
255:53 - console our component rendered once
255:56 - every time I click the button our
255:58 - component isn't rendering we've only
256:01 - rendered it once the value stored within
256:04 - the current property of my ref object
256:06 - isn't increasing each time I click the
256:08 - button without the component rendering
256:11 - use ref returns an object an object that
256:14 - has one property a property of current
256:17 - let me show you what would happen if I
256:18 - were to
256:21 - console.log ref my
256:26 - reference so here's ref it's an object
256:30 - it's an object with one property when we
256:33 - create this reference the initial value
256:35 - is going to be the initial value we pass
256:37 - in to use ref zero but if I were to
256:40 - change this let's say that the initial
256:42 - value is
256:45 - pizza ref is an object an object with
256:49 - one property of current the value stored
256:52 - within my current property is a string
256:54 - of pizza so what we'll do in this next
256:56 - demonstration is create an input
257:00 - element but we do need to wrap all this
257:02 - HTML within a single element because we
257:05 - can only return a single element at a
257:07 - time
257:09 - normally so we will enclose all of our
257:11 - HTML within a
257:13 - div so we have a button and an input
257:16 - element the current property of your ref
257:19 - object can also refer to an HTML element
257:22 - and that's where use ref is really
257:24 - helpful your reference should be
257:27 - descriptive of what you're referencing
257:29 - we will reference this input element I
257:31 - will name this reference as input ref I
257:35 - will set the initial value value to be
257:37 - null meaning no value within that HTML
257:40 - element we have to set the ref attribute
257:44 - equal to that reference of input
257:48 - ref the ref attribute of an HTML element
257:51 - it's a special attribute used to create
257:53 - references to elements after our
257:55 - component renders I'm going to
257:58 - console.log input ref we'll take a look
258:01 - at what it
258:05 - contains
258:08 - so here's our input ref object it's an
258:11 - object the property of current is set
258:14 - equal to this input element and this
258:16 - input element is one gigantic HTML
258:20 - object if we make any changes to this
258:22 - HTML element it's not going to cause
258:24 - this component to reender and to even
258:27 - check that I have console.log component
258:29 - rendered within use effect if this
258:32 - component renders we'll console.log this
258:35 - message so what would we like to do when
258:38 - we click the button let's take our
258:41 - object of input
258:42 - ref access the current property that
258:46 - will give me my HTML element my input
258:48 - element I will use the built-in Focus
258:51 - method to give this element Focus if I
258:55 - were to click on this button our input
258:57 - element is going to have focus and it
258:59 - doesn't cause the component to render
259:02 - just to check that let's go to
259:05 - inspect console
259:07 - our component rendered once when we
259:10 - initially mounted it every time I click
259:12 - the button the component isn't rendering
259:15 - which is good we don't necessarily need
259:17 - the component to reender every single
259:19 - time not only that let's change the
259:21 - background color of our text box we can
259:23 - really do anything we want with this
259:25 - HTML element without causing the
259:26 - component to reender Let's access our
259:29 - input ref object access the current
259:32 - property that will give me this HTML
259:35 - element let's access the style property
259:38 - access the background color and set it
259:41 - to be
259:43 - yellow now when I click the button we
259:46 - have focus and the background color
259:49 - changes of this input element let's
259:52 - create a few more HTML elements let's
259:54 - copy this button and this input element
259:57 - paste it twice we'll have clickme one
260:00 - click me2 click
260:03 - me3 we'll have to create a few more
260:05 - references let's copy our current
260:08 - reference paste it twice input ref 1
260:11 - input ref two input ref three the ref
260:15 - attribute of each input element will be
260:18 - input ref one then input ref two input
260:21 - ref
260:22 - three we'll create two more handle click
260:25 - functions just to keep it
260:27 - simple handle click one handle click two
260:30 - handle click
260:32 - three handle click one handle Click 2
260:35 - handle click three
260:38 - so we need input ref one input ref two
260:41 - input ref three when we click on one of
260:44 - these buttons the background color is
260:46 - going to change as well as the input
260:48 - element having
260:51 - focus when we click on one of these
260:53 - buttons I need the background color of
260:56 - the other input elements to reset back
260:58 - to normal so really we can just copy
261:00 - what we have for the background color
261:03 - but access input ref two and three set
261:07 - the background color to be an empty
261:08 - string for the
261:20 - default if I were to click on button one
261:24 - input ref one is now yellow when I click
261:27 - on button two the background color is
261:29 - yellow input element 1 and three now use
261:33 - the default color and the same thing
261:35 - goes with input element three
261:37 - if I were again to go to
261:39 - inspect
261:42 - console well our component still only
261:45 - rendered once by interacting with these
261:47 - buttons it doesn't cause the component
261:49 - to
261:50 - reender that's because we're using use
261:53 - ref and not use State you don't need to
261:55 - write all this but I changed my program
261:58 - around so it's using use State rather
262:00 - than use ref every time I click one of
262:03 - these buttons now since we're using use
262:04 - State the component rerun ERS by
262:07 - avoiding rendering when it's not needed
262:10 - it's going to make your component more
262:12 - efficient all right everybody so that is
262:14 - used ref use State renders the component
262:17 - when the state value changes use ref
262:20 - means use reference we're storing a
262:22 - reference to something when you use use
262:25 - ref it returns an object an object with
262:28 - one property of current that current
262:30 - property can store a value an array an
262:33 - object or an HTML element when the
262:35 - stored value changes it doesn't cause
262:38 - the component to render this is helpful
262:40 - with accessing and interacting with dom
262:42 - elements handling Focus animations and
262:45 - transitions as well as managing timers
262:48 - and intervals we'll be working with us
262:50 - ref in the next video where we will be
262:52 - making a stopwatch component and well
262:54 - everybody that is the US ref hook in
263:00 - react what's up everybody in today's
263:03 - video we're going to create a working
263:05 - stopwatch using us react so sit back
263:08 - relax and enjoy the show okay let's get
263:11 - started within our source folder we're
263:13 - going to create a stopwatch component
263:16 - stopwatch and this is going to be a jsx
263:19 - file we will be working with function
263:21 - based components function stopwatch no
263:25 - parameters then be sure to export it
263:28 - export default
263:31 - stopwatch in this program we'll need
263:33 - three different hooks let's import them
263:36 - import from react use object
263:39 - destructuring we'll need the use State
263:42 - hook use effect as well as use
263:46 - ref from its location of
263:50 - react we do need to return something for
263:53 - the time being we're going to return a
263:55 - fragment okay let's import our
263:58 - stopwatch from our app component we will
264:00 - import stopwatch from its
264:04 - location slash
264:07 - of stopwatch
264:10 - jsx we will return a single stopwatch
264:15 - component and that is all we need for
264:17 - the app component within our stopwatch
264:20 - component we'll make a few declarations
264:23 - we'll be using the use State hook as
264:25 - well as the use ref hook we'll need to
264:27 - check to see if our stopwatch is
264:28 - currently running we will use use state
264:32 - const is running and a Setter for or is
264:37 - running equals use State I will set the
264:41 - initial state of is running to be a
264:44 - Boolean of false our stopwatch is not
264:47 - currently
264:48 - running we'll also need to keep track of
264:51 - how much time has he elapsed that will
264:53 - also be a state
264:54 - variable const elapsed time and a Setter
265:00 - for
265:01 - elapsed time again we're going to use
265:04 - you state I will set the initial state
265:07 - of our elapsed time to be zero for 0
265:10 - milliseconds we'll be working with
265:12 - intervals if we start an interval we
265:14 - need to clear it if we're not using it
265:16 - we will use ref to create a constant of
265:20 - interval ID ref equals use ref we will
265:27 - set the initial value of current to be
265:30 - null when we start our stopwatch we'll
265:33 - have to get the current time we'll store
265:35 - that as a reference using use ref const
265:39 - start time ref equals use ref I will set
265:44 - the initial value to be zero our start
265:47 - time will be 0 milliseconds a few things
265:50 - we'll need we'll need to use the use
265:53 - effect hook we will pass in a
265:57 - function and a dependency
266:00 - array the dependency array is going to
266:02 - have one state variable of is
266:05 - running basically speaking when we Mount
266:07 - our component and if is running ever
266:10 - changes we'll perform some side code
266:12 - whatever is within use effect this is
266:14 - where we'll start our interval to move
266:16 - time forward we'll get back to that
266:19 - later we will create a function to start
266:23 - to start or
266:24 - stopwatch a function to
266:28 - stop a
266:30 - function to
266:33 - reset and a function to format
266:37 - time format
266:40 - time within our return statement let's
266:43 - return all the HTML we'll need for this
266:47 - program I will create a div element to
266:49 - act as a
266:54 - container this div element will have a
266:56 - class name of
267:00 - stopwatch within this div element we
267:02 - will create a nested div element that
267:04 - has a class name of display to display
267:07 - the
267:08 - time when we display the time we will
267:12 - embed some JavaScript and call the
267:14 - format time function within our format
267:17 - time function just so we can display
267:19 - something I'm going to return a template
267:22 - string that displays a bunch of zeros
267:24 - really I'm just using this as a
267:26 - placeholder so we are returning a string
267:30 - of a bunch of zeros we'll have three
267:32 - buttons these three buttons will be
267:35 - within another develop
267:37 - vment this development will have a class
267:40 - name of
267:44 - controls we will create a button that
267:47 - has text of start to start the
267:51 - stopwatch this button will have a class
267:54 - name of start-
267:57 - button with this button we will set the
268:00 - onclick event handler to be a JavaScript
268:04 - function we will pass in call back to
268:06 - the start function to start the
268:09 - stopwatch then we need a button for stop
268:12 - let's copy this button paste it change
268:14 - any instance of start to stop onclick
268:18 - will be a call back to stop the class
268:20 - name will be stop- button the text will
268:24 - be
268:25 - sto then we need to reset button let's
268:29 - copy our button paste it change any
268:31 - instance of stop to reset we will pass
268:34 - in a call back to the reset
268:37 - function the class name will be reset
268:40 - dasb button and the text will be
268:43 - reset and that is all the HTML that we
268:46 - need go to our CSS stylesheet now we'll
268:49 - apply some CSS within the body of our
268:52 - document we'll use flex box to display
268:55 - each component display
268:58 - Flex I will set the flex direction to be
269:02 - a
269:04 - column there's not really be any
269:06 - apparent changes until we add more
269:08 - components then I will align
269:12 - items in the
269:15 - center and set the background color to
269:17 - be light
269:21 - gray but I'll use hsl
269:24 - values I will set the lightness to be
269:28 - 95% okay let's zoom out then I will
269:31 - select the class of
269:34 - stopwatch this class contains our
269:36 - stopwatch everything within
269:38 - it I will again use flex box and really
269:41 - I'll just copy these three properties
269:42 - from the
269:43 - body so display Flex Flex Direction
269:46 - column align item
269:48 - Center I will add a
269:51 - border a 5 pixel
269:54 - solid border radius to smooth the
269:58 - corners a 50
270:01 - pixels set the background color to be
270:04 - white
270:07 - then add some
270:08 - padding of 30
270:13 - pixels all right let's work on our
270:15 - display next the text is pretty
270:18 - small we will select the class of
270:21 - display increase the font size to 5
270:27 - RM set the font family to be monospace
270:32 - or some other font that you like let me
270:34 - Zoom back out
270:37 - I will set the font weight to be
270:42 - bold I'll change the
270:44 - color pick a color for the font color I
270:47 - will set the lightness to be
270:50 - 30% I'll add a text Shadow effect text
270:54 - Shadow 2 pixels by two pixels for the
270:57 - vertical and horizontal offset and a
271:00 - blur radius of two pixels and pick a
271:03 - color I'm just going to lower the Al to
271:09 - 75% just so it's more transparent then
271:12 - add a little bit of margin to the bottom
271:14 - margin bottom 25
271:17 - pixels okay and that is what we need for
271:19 - our display let's work on our buttons
271:22 - next So within our div element of
271:25 - controls I would like to select all
271:27 - button elements within this class select
271:30 - our class of controls select any buttons
271:33 - within our controls class let's set the
271:36 - font size to be 1.5
271:41 - RM set the font weight to be
271:45 - bold add some padding of 10 pixels by 20
271:51 - pixels surround each button with some
271:53 - margin 5
271:55 - pixels I will set a minimum width of
271:58 - each button to be 125
272:02 - pixels remove the border with border
272:04 - none
272:07 - use border radius to round the corners
272:10 - 10
272:11 - pixels when we hover our cursor over a
272:14 - button let's change our cursor to be a
272:17 - pointer and that does
272:20 - work I will set the color the font color
272:24 - to be white we'll change the background
272:26 - color pretty soon we'll also add a
272:28 - transition
272:30 - effect let's select the background
272:34 - color and use use an ease transition
272:37 - after 0.5 seconds we will
272:41 - ease let's select our class of start
272:44 - button class start dash button pick a
272:48 - background color I'll pick something
272:50 - green meaning go cuz we're starting our
272:52 - stopwatch background color green but
272:55 - I'll use hsl values cuz I think they
272:58 - look better I've already pre-picked a
273:00 - color I will select these values for the
273:03 - Hue 115 for the saturation 100% for the
273:08 - lightness
273:10 - 40% let's also access the hover sudo
273:12 - class let's copy and paste our start
273:15 - button access the hover sudo class when
273:18 - we hover our cursor over the button what
273:20 - do we want to do let's take the
273:22 - lightness and subtract 5% 5% from
273:26 - whatever it currently owes I'll set mine
273:28 - to be
273:29 - 35% so the color should get a little bit
273:31 - darker when you hover your cursor over
273:33 - the button let's do this with with our
273:35 - stop button we'll copy and paste what we
273:38 - have for our start button change start
273:41 - to
273:45 - stop I'll make the background color
273:48 - red but I'll select something specific
273:51 - for the Stop button I'll set the Hue to
273:52 - be 10 the saturation to be 90 90% And
273:57 - for the lightness 50% let's copy and
273:59 - paste this background color within the
274:02 - hover sudo class set the lightness to be
274:05 - 5 %
274:06 - darker and that does work now for the
274:09 - reset button let's make it
274:12 - blue change stop to
274:16 - reset and pick a blue
274:22 - color for the Hue I'll select
274:25 - 205 90% for the saturation for the
274:29 - lightness
274:30 - 60% when we hover our cursor over the
274:33 - reset button I will set the lightness to
274:36 - be 5% darker so
274:38 - 55% and that looks pretty good and we
274:41 - can close out of our CSS Styles sheet
274:43 - let's go back to our stopwatch
274:45 - component let's work on the start stop
274:48 - and reset functions when we press the
274:51 - start button we will call this function
274:53 - of start so to start the stopwatch we're
274:56 - going to use the setter for is running
274:59 - and set that to be true we will set the
275:02 - state of is running to be true once we
275:05 - press the start button we want this
275:07 - program to be
275:09 - running we also need to set the start
275:11 - time reference updating a reference
275:14 - doesn't cause our component to render if
275:17 - a state changes it does cause the
275:19 - component to render we're going to set
275:21 - the start time reference this is an
275:24 - object we will access the current
275:26 - property and set it equal to now we need
275:29 - to calculate what the start time is so
275:31 - if we were to get the date right now
275:34 - this is is going to return the current
275:36 - date and time in
275:38 - milliseconds minus the elapse time which
275:41 - is initially
275:43 - zero so just to show you what this looks
275:45 - like I'm going to
275:48 - console.log the current property of my
275:51 - start time reference object if I was to
275:54 - start or
275:55 - stopwatch we be given the current date
275:58 - and time in millisecs since epic think
276:01 - of Epic as when your computer thinks
276:03 - time began it's usually a dat around the
276:05 - year 1970 1.7 trillion milliseconds has
276:09 - passed since epic if I were to start the
276:12 - stopwatch again you can see that this
276:14 - number increased slightly we're
276:16 - converting the current date and time
276:17 - into milliseconds by keeping a reference
276:20 - to when we started the stopwatch we can
276:22 - see how many milliseconds has elapsed
276:24 - since then that's kind of the general
276:26 - idea we can get rid of console.log we
276:29 - don't necessarily need it keep it if you
276:30 - would like to stop the stopwatch we're
276:33 - going to set our Boolean of is running
276:36 - to be false that's all we need to do now
276:40 - for reset we're going to set the elapse
276:44 - time to be zero because we would like to
276:47 - reset everything set the state of elapse
276:50 - time to be zero and we will also set is
276:54 - running to be false set is running
276:58 - false if you would like to stop the
277:00 - stopwatch when you reset set is running
277:02 - to be false then since we have a
277:05 - dependency array when we Mount this
277:07 - component and anytime the state of is
277:10 - running changes we'll perform some side
277:12 - code I think what we'll do first is
277:15 - check to see if is running is true if is
277:19 - running if our stopwatch is now running
277:23 - we'll need to create an interval to move
277:24 - time forward we will use the set
277:28 - interval
277:29 - function this has two
277:31 - arguments a call back to a function and
277:34 - a Time in milliseconds to repeat this
277:36 - interval let's say after every 10
277:39 - milliseconds we'll perform some code
277:42 - I'll use an arrow
277:44 - function after every 10 milliseconds we
277:47 - will set our elapse
277:49 - time to be a new state we will get the
277:53 - date right now minus whatever our start
277:57 - time was we can use our
277:59 - reference start time ref access the
278:02 - current property remember that was
278:05 - milliseconds so get the time right now
278:08 - subtract what our start time was and
278:11 - that will give us our elapse time
278:13 - because we're using the setter for
278:14 - elapse time in order to clear this
278:17 - interval we'll need to keep track of it
278:19 - by its unique ID the set interval
278:21 - function returns that ID we will take
278:24 - our reference of interval ID ref it is
278:27 - an object we will access its current
278:30 - property and set it equal to that
278:32 - reference we should add a cleanup
278:34 - function to the end of our use effect
278:36 - hook we will return a function a cleanup
278:40 - function when is running changes or we
278:43 - unmount our component what would we like
278:45 - to do we need to stop the interval from
278:48 - continuing if we don't it may lead to
278:50 - unexpected Behavior we will use the
278:52 - clear interval function and pass in that
278:56 - unique
278:58 - ID access the current property of our
279:01 - interval ID reference and clear it that
279:05 - will allow us to clear this interval so
279:07 - our program stops running now we just
279:09 - need to fill in the format time
279:12 - function we have a lapse time it's going
279:14 - to be in milliseconds we need to convert
279:17 - it to hours minutes seconds and
279:19 - milliseconds we'll start with hours let
279:23 - hours equals take our elapse time now to
279:27 - convert milliseconds to hours you can
279:29 - follow this formula take our elapse time
279:32 - which is in milliseconds divided by
279:35 - there's 1,000 milliseconds in a second
279:38 - time 60 seconds in a minute time 60
279:42 - minutes in an hour and close this
279:45 - equation with the floor method of math
279:48 - math. floor okay let's calculate
279:54 - minutes let's change hours to minutes
279:58 - what we got to do is take 1,00 *
280:01 - 60 modulus 60 mod modulus gives you the
280:05 - remainder of any division once our
280:07 - minutes unit hits 60 we need to reset it
280:09 - back to zero that's why we're adding
280:11 - modulus 60 we don't want it to continue
280:13 - to 60 or something above 60 then we have
280:18 - seconds let seconds equals elapse time
280:23 - divid 1,00 modulus
280:27 - 60 and
280:31 - milliseconds
280:33 - let milliseconds
280:36 - equals our lapse
280:38 - time modulus
280:41 - 1000 if you don't want to display all
280:43 - four digits of milliseconds we can
280:46 - divide this by 10 to display only the
280:48 - first two
280:53 - digits we will return a template
280:56 - string we will display the hours colon
281:02 - placeholder minutes colon placeholder
281:07 - seconds colon placeholder
281:12 - milliseconds now if you don't want to
281:14 - display hours you can remove that I'll
281:17 - only display minutes seconds and
281:20 - milliseconds so here's what's going on
281:22 - currently let me stop
281:25 - it so we can start we can stop and we
281:29 - can
281:30 - reset however I would like to format the
281:32 - time I would like to display a leading
281:35 - zero well we can use the pad start
281:37 - method of
281:38 - strings so let's take ours equals we'll
281:42 - use typ casting to convert ours to a
281:47 - string then follow this with pad start
281:52 - method pad this number with two zero
281:56 - characters let's do this with
281:59 - minutes minutes equals convert minutes
282:02 - to a string and then pad it with two
282:05 - zeros
282:11 - seconds and
282:18 - milliseconds all right let's see if this
282:21 - works we can start we can stop we can
282:25 - start again we can stop again we can
282:28 - reset we can start and we can stop now
282:32 - the cool thing about doing this in react
282:34 - our stop watch is a reusable component
282:36 - if I were to go back to my app component
282:39 - I can include as many stopwatches as I
282:40 - would like let's include one two or even
282:44 - three these are all individual
282:46 - components that have their own code to
282:48 - run they all run
282:51 - independently and I can stop them
282:52 - whenever I would
282:54 - like all right everybody that is how to
282:57 - create a stopwatch component using
283:00 - react