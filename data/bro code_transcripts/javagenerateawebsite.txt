00:00 - how's it going everybody its bro here
00:02 - hope you're doing well and in this video
00:04 - I'm going to teach you guys about how we
00:05 - can generate HTML files using Java so
00:09 - let's get into it if you find this video
00:13 - helpful please remember to Like comment
00:16 - and subscribe
00:17 - your support will help keep this channel
00:19 - running everybody so we're gonna create
00:22 - a program that's going to create an HTML
00:25 - file that can be used to display on a
00:27 - web page so HTML stands for hypertext
00:30 - markup language and it's used for
00:32 - creating web pages so we're going to do
00:34 - this in five different steps the first
00:37 - step is that we're going to ask the user
00:38 - for a file name and then we're gonna
00:40 - check to see if that file actually
00:42 - exists then we're going to determine if
00:45 - the file is empty then we're going to
00:47 - rename this file as an HTML file and the
00:51 - last step is probably the most difficult
00:53 - is that we're going to read each line
00:55 - and insert the necessary tags that is
00:57 - needed for an HTML file so if you're
00:59 - ready let's begin let's create another
01:02 - file within our project folder so an
01:04 - easy way to do this is that you'll go to
01:06 - the project folder go to file new and
01:09 - then go to file and I'll call this hello
01:14 - world and click finish so now you should
01:18 - have an empty file within the same
01:20 - project folder as the class that you
01:22 - plan on using for this lesson and later
01:25 - on in this video I'll show you guys how
01:27 - to read a file that's elsewhere on your
01:28 - computer but we'll keep it simple for
01:30 - now and just place it within the same
01:32 - project folder now going back to your
01:34 - main class make sure you have these two
01:36 - imports before you begin everything
01:38 - related to Java dot IO and Java dot util
01:42 - and there's going to be a few things
01:44 - that we'll need to declare before we get
01:45 - started on step one so the first thing
01:48 - is that we're going to need a scanner so
01:50 - to do that type in scanner we'll need a
01:52 - name for the scanner I usually call it
01:54 - scanner with a lowercase s equals new
01:56 - scanner and then within parentheses
01:58 - system dot in now we're going to declare
02:04 - a scanner but not instantiate it so
02:06 - we'll call this second scanner file in
02:09 - and the purpose of this is that it's
02:11 - going to serve as our input
02:14 - connection and then we're going to
02:17 - create a print writer and we'll call
02:21 - this file out and this is going to serve
02:24 - as our HTML file connection and then
02:31 - we're going to create a string so this
02:33 - is going to store the file name so file
02:37 - name in it's what the user types in when
02:40 - we search for a file on their computer
02:43 - so original files name and we'll create
02:50 - another string and this is going to be
02:51 - file name out and this is going to be
02:55 - the new HTML files name so we're going
03:03 - to rename file name in as an HTML file
03:06 - so that's the purpose of each of these
03:08 - and then we're going to need an integer
03:11 - and we'll call this dot index and what
03:17 - this is going to do is hold the position
03:19 - of any dots within the file name so let
03:26 - me explain on this further for locating
03:27 - the position of any dots within the file
03:30 - name so let's say that we search for a
03:32 - file called hello world dot txt so when
03:37 - we get to step four we're going to be
03:39 - renaming this txt file as HTML so we're
03:43 - going to create a substring starting at
03:45 - position 0 and ending wherever this dot
03:49 - is and we're going to chop off the rest
03:51 - of this and add HTML here instead and
03:54 - then save it so that's kind of the
03:56 - purpose of this variable we just want to
03:58 - find out where that dot is located in
04:00 - the file name and then lastly what we
04:02 - need is a string to hold the current in
04:06 - the line that we are on when we read the
04:08 - file line-by-line and we can set this to
04:11 - null for now so this is a line from the
04:16 - input file and that is everything that
04:20 - we need to declare so let's work on step
04:22 - 1 ask the user for a file name all right
04:25 - everybody we're on step 1 so we're
04:27 - going to ask the user for a file name or
04:30 - the file path and this is probably the
04:32 - easiest step so we're going to create a
04:34 - prompt that says enter file name or file
04:40 - path that works alright and then for the
04:44 - second line what we're going to type in
04:46 - is file name in and we're going to
04:50 - actually add a value to this because
04:54 - it's only declared right now so file
04:56 - name in equals scanner dot next line and
05:03 - that's it that is step one so let's move
05:06 - on to step two check if this file exists
05:10 - so what we're gonna do for step two is
05:12 - create a try and catch block so try and
05:15 - then catch parentheses curly braces and
05:19 - what we'll put within the parentheses is
05:22 - that we will catch file not found
05:26 - exception eat and within here we'll just
05:31 - create a print line statement that says
05:34 - file not found all right so this is
05:40 - going to be underlined red for now but
05:42 - as we fill things in this should go away
05:44 - so within the try block what we're gonna
05:47 - type in here is file in equals and then
05:52 - file in is our other scanner so we're
05:56 - going to finish instantiating this so
05:59 - file in new scanner then within the
06:04 - parentheses of scanner what we're gonna
06:06 - type within here is new file reader
06:12 - parentheses and within this inner set of
06:15 - parentheses what we're gonna type in
06:16 - here is the name of our file file name
06:19 - in and you can see that this red line
06:23 - went away now so we should be good
06:25 - alright so that is step two check to see
06:29 - if this file exists let's move on to
06:31 - step three all right so I actually just
06:34 - switched steps three and four what we're
06:36 - actually going to do next is rename this
06:38 - file as an HTML file because
06:41 - this is part of step three so we're
06:43 - going to rename this file as an HTML
06:46 - file and we're gonna do that within this
06:49 - try block alright so after this line
06:52 - file in equals new scanner blah blah
06:54 - blah what we're gonna type in here is
06:57 - that we're going to get the index of
07:00 - where the dot is within the file name if
07:03 - there is one so dot index equals file
07:08 - name in and we're going to use the last
07:14 - index of and then we are going to search
07:19 - for any dots and then this will return
07:24 - the last index of any dots and store it
07:27 - within this variable so if there are no
07:30 - dots within the file name so some files
07:33 - might not have one we need to account
07:35 - for that so what we can do is check to
07:37 - see if dot index is equal to negative
07:42 - one that means there were no dots found
07:44 - within the file name so what we're gonna
07:47 - do is take our file name out so this is
07:50 - going to store the new name of the HTML
07:53 - file so file name out equals file name
07:58 - in and then we're going to add dot HTML
08:02 - at the very end so now we're going to
08:05 - create an else statement so else this
08:09 - means that there was a dot found within
08:11 - the file name and we're going to chop
08:13 - off everything after the last one so
08:16 - we're going to take our file name out
08:19 - equals file name in and we're going to
08:26 - use the dot substring method and there's
08:30 - two indexes within here we're going to
08:33 - create a substring of the first
08:35 - character and wherever the last dot was
08:40 - found so the dot index and then add HTML
08:45 - at the very end so basically what we're
08:50 - doing with this if-else statement is
08:52 - that let's say there is no file
08:55 - at the end like we just locate the file
08:57 - hello world well what we'll do here is
09:00 - just add HTML at the very end and then
09:03 - we're going to save this otherwise if
09:05 - there is a file extension such as hello
09:10 - world dot txt we're going to create a
09:14 - substring of the first character and
09:16 - wherever the last dot is so we're going
09:19 - to take this disregard the rest of this
09:23 - and then add HTML at the end and then
09:26 - save it so it depends on what the user
09:29 - types in and then the last up here is
09:32 - that we're going to type in file out and
09:36 - file out is the HTML file connection and
09:40 - this is a printwriter equals new print
09:46 - writer and then we are going to place
09:50 - within the parentheses the name of this
09:53 - file file name out and that is it for
09:57 - step three now let's work on step 4
10:00 - determine if the file is empty and when
10:02 - you write this next section make sure
10:04 - you do it within the try block so what
10:07 - we're going to do within this try block
10:08 - at the end is actually create another
10:10 - try and catch block so try and then
10:14 - catch parentheses curly braces and what
10:18 - we want to catch is no such element
10:23 - exception E and then we'll create a
10:29 - print line statement and perhaps we'll
10:31 - just say error plus e get message all
10:43 - right and then within the try block
10:44 - we're going to read the first line so we
10:48 - have a line variable that's a string and
10:50 - it's going to read our file line by line
10:52 - but we're going to check the first line
10:55 - of this file so line equals file in dot
11:03 - next line and now what we're going to do
11:08 - after this
11:09 - clock is that we're going to check to
11:10 - see if our line variable is equal to
11:14 - null and then we can just display a
11:17 - print line statements such as this file
11:22 - is empty and then we'll create an else
11:28 - block after this and then move on to
11:31 - step 5
11:32 - so step 5 is to read each line and
11:34 - insert the necessary tags for an HTML
11:37 - document so we're going to write this
11:40 - within the else block so let me give you
11:43 - a demonstration of how HTML documents
11:45 - work real quick all right so here's the
11:48 - framework for an HTML document so of
11:51 - course HTML documents end with the dot
11:53 - HTML file extension and the framework is
11:57 - that there is usually a set of tags we
12:00 - need a pair of HTML tags there's an
12:03 - opening tag and a closing tag the
12:06 - closing tag has a forward slash before
12:08 - the tag name so we need a set of HTML
12:12 - tags and then within here we have a set
12:15 - of head tags and a set of body tags so
12:18 - anything within the body will actually
12:20 - appear on the web page and anything
12:24 - within the head does not appear within
12:29 - the web page so the head is usually
12:33 - reserved for like the web page title or
12:35 - any metadata and the body is well the
12:39 - body of your web page so when we create
12:42 - our HTML document we need to insert
12:44 - these specific tags HTML head body and
12:48 - the associated closing tags so to add
12:51 - these tags to our HTML document what
12:53 - we're going to type is first file out
12:56 - dot print line it's kind of like system
13:01 - dot out dot print line but it's file out
13:03 - dot print line and what we're gonna type
13:06 - within here is the first tag and that
13:09 - was HTML within angle brackets and then
13:13 - we're going to create an opening tag for
13:17 - head
13:19 - and then we can just close this head tag
13:22 - right away so /head and then we need to
13:28 - create an opening body tag so file out
13:32 - dot print line body and then after the
13:37 - body this is where we're going to start
13:39 - adding all the lines from the file that
13:41 - we're going to read but first since we
13:44 - already read the first line we still
13:46 - have the first line stored within this
13:48 - variable so let's add that before we
13:50 - move on to that portion so file out dot
13:55 - print line and we will put our line
14:00 - variable within here so we're going to
14:03 - create a while loop that's going to
14:04 - continuously read our file until it's
14:07 - finished so we'll create a while loop
14:09 - and within the parentheses we're going
14:13 - to check to see if file in dot has next
14:19 - line and within the parentheses of the
14:25 - curly braces we're going to type file
14:28 - out dot print line so we're going to
14:37 - move down to the next line on our HTML
14:40 - document so in order to do that we're
14:42 - going to add a break tag and it's just
14:45 - BR with in angle brackets and that
14:48 - allows us to move down on the web page
14:50 - and then we're going to reassign our
14:54 - line variable with file in dot next line
15:02 - now for some reason if this line is
15:05 - empty what we'll want to do is actually
15:08 - print a br tag so let's check to see if
15:13 - line dot is empty and then what we'll do
15:19 - within the curly braces is that we will
15:22 - just file out dot print line a break tag
15:27 - else
15:29 - what we'll do is file out print line our
15:34 - line and now we need to close everything
15:37 - we're on the homestretch now so you'll
15:40 - want to be sure you're writing this
15:41 - outside of your while loop so that is
15:44 - between these two curly braces so make
15:46 - sure you put it in the right place so
15:47 - we're going to file out dot print line
15:53 - the closing body tag so that's forward
15:57 - slash body and then we need to close the
16:02 - HTML tag so that is file out dot print
16:05 - line HTML and you know what for fun
16:11 - let's let the user know that this file
16:13 - is finished processing HTML file is
16:18 - processed I don't know how to spell
16:21 - processed I think that's okay all right
16:26 - and then we just need to close our file
16:28 - in and close our file out so we're going
16:31 - to add that after the next curly brace
16:33 - so it's a good idea to close all the
16:37 - scanners afterwards so file in dot close
16:40 - and file out dot close all right and
16:50 - that should be everything so let's run
16:52 - this first we're going to search for a
16:54 - file that does not exist so enter the
16:57 - file name or the path file not found
17:02 - yeah I'm not too surprised all right
17:04 - let's locate our hello world file so
17:08 - enter file name or path hello world and
17:13 - it says this file is empty because we
17:17 - didn't write anything within here so
17:19 - let's write a poem or some song lyrics
17:21 - or something so I think for me I'm going
17:24 - to type in roses are red violets are
17:29 - blue
17:32 - booty booty booty rockin every where so
17:39 - I'm going to save this and let's run
17:44 - this again this is hello world hit enter
17:49 - and it says HTML file is processed so we
17:53 - can actually refresh this project folder
17:57 - so you can right-click it and refresh
17:58 - and here is our HTML file so I'm going
18:02 - to view it within Eclipse and it kind of
18:04 - looks like this it has all the lines and
18:07 - this is kind of like our own mini web
18:09 - browser otherwise if you want to view
18:12 - this with a legit web browser like
18:14 - Google Chrome what you can do is go to
18:16 - your Eclipse workspace within your C
18:19 - Drive and then we can right-click this
18:21 - open with Google Chrome and here is our
18:25 - web page but I probably need to zoom in
18:26 - a little bit and you can see that it
18:28 - printed all the lines of our file
18:30 - line-by-line
18:31 - and it's now saved as an HTML document
18:33 - now let's take a look at the same file
18:36 - with a text editor like sublime text or
18:39 - notepad plus plus any one of those would
18:41 - work so I'm going to open this with
18:43 - sublime text and you can see that we
18:46 - have all of the tags that we inserted
18:48 - with our Java program we have the
18:50 - opening and closing HTML tags the head
18:52 - tags the body tags and then it has all
18:55 - of the lines of our text plus some brake
18:58 - line tags to move down to the next line
19:00 - so hopefully this project gave you some
19:03 - ideas and you can take this a step
19:04 - further if you know some HTML you can
19:06 - change the fonts add some colors add
19:09 - pictures stuff like that but we just
19:11 - kept it very basic for now by the way I
19:14 - do have an HTML tutorial series as well
19:17 - as a CSS tutorial series if you want to
19:20 - learn more about web development feel
19:22 - free to check those out if you want
19:23 - alright well that concludes this project
19:26 - of generating an HTML file I'll include
19:29 - all of this code and the comments down
19:30 - below and well that's how you can
19:33 - generate an HTML file with Java hey you
19:37 - yeah I'm talking to you if you learn
19:40 - something new then you can help me help
19:42 - you in 3 easy steps bye
19:45 - smashing that light button drop a
19:47 - comment down below and subscribe if
19:49 - you'd like to become a fellow bro
19:52 - [Music]
19:58 - you
20:05 - [Music]