00:00 - what is going on everybody so today I
00:02 - got to talk about inheritance in Python
00:05 - inheritance allows a class to inherit
00:08 - the attributes and methods from another
00:10 - class much like how a child in real life
00:13 - can inherit traits from A parent by
00:15 - having a class inherit attributes and
00:17 - methods from another class this helps
00:19 - with code reusability and extensibility
00:22 - in this example we're going to create an
00:24 - animal class the dog cat and mouse class
00:27 - will inherit attributes and methods from
00:29 - the animal class we will create a class
00:33 - of
00:34 - animal then I will Define the
00:39 - Constructor when we construct an animal
00:41 - object let's pass in a name it's not
00:44 - required but it might be good for this
00:47 - example we will assign the attribute of
00:50 - name equal to the name we
00:52 - receive let's also add an attribute of
00:56 - is alive whenever we create an animal we
00:59 - will set there is a live attribute to be
01:02 - true and that is a capital
01:04 - T all animals can eat Define eat we will
01:10 - print using an F string at a placeholder
01:15 - self. name the name of this animal is
01:19 - eating all animals should be able to
01:22 - sleep Define
01:25 - sleep print I'll use an FST string
01:29 - insert
01:30 - self. name is sleeping and that is all
01:35 - we need for the animal class let's
01:38 - define class dog for a child class to
01:42 - inherit the attributes and methods from
01:44 - another class after the class name
01:46 - that's going to inherit we need to add
01:49 - an inheritance list with the set of
01:51 - parentheses then list the name of the
01:53 - class we're inheriting from the parent
01:56 - the dog class is going to inherit all of
01:58 - the attributes and methods of its parent
02:02 - animal for the time being as a
02:04 - placeholder I'll add pass just to
02:06 - demonstrate this class cat is also going
02:10 - to inherit from
02:14 - animal and class Mouse will also inherit
02:18 - from
02:21 - animal okay I will collapse this for now
02:24 - we'll create a dog object dog equals dog
02:28 - then pass it a name for this dog because
02:30 - we have one parameter set up of
02:32 - name this dog will be
02:35 - named Scooby as in
02:39 - Scooby-Doo cat equals call the cat
02:45 - Constructor this cat will be named
02:48 - Garfield and
02:50 - mouse mouse equals Mouse our Mouse will
02:54 - have a name of
02:56 - Mickey even though there's nothing
02:58 - within this dog cat or Mouse class we
03:01 - should still have these attributes and
03:03 - these methods if you inherit the animal
03:06 - class you should have a name attribute
03:08 - and is alive attribute set to true you
03:11 - can eat and you can sleep let's print
03:14 - our dog's name dog.
03:18 - name
03:21 - Scooby Print Dog dot is
03:27 - alive our dog is alive that is true
03:31 - let's have our dog object use the eat
03:34 - method Scooby is eating and sleep dog
03:39 - dos
03:40 - sleep scoy is sleeping let's replace dog
03:44 - with
03:48 - cat the name of the cat is Garfield
03:51 - Garfield is alive Garfield is eating
03:53 - Garfield is sleeping and
03:56 - mouse replace any instance of cat with
03:59 - mouse
04:00 - our mouse's name is Mickey Mickey is
04:02 - alive Mickey is eating Mickey is
04:05 - sleeping even though these children
04:07 - classes are empty we're still inheriting
04:10 - these attributes and methods from its
04:11 - parent of animal this is convenient
04:14 - because you don't need to copy and paste
04:16 - these attributes and methods for every
04:18 - single class for example if I were to
04:21 - copy these attributes and methods and
04:23 - paste
04:26 - them well we have a lot more code to
04:28 - write and as a a consequence if I need
04:31 - to make a change to one of these methods
04:33 - I would have to do that to every single
04:35 - instance of this method for example
04:37 - let's replace is sleeping with is asleep
04:41 - well now I need to find every single
04:43 - Sleep Method and change it
04:50 - manually it's not too bad if you only
04:52 - have a few classes but imagine if you
04:54 - have hundreds of classes that's going to
04:56 - take a lot of work it's a lot easier to
04:59 - write the code once and then reuse it
05:01 - and I only need to make that change in
05:03 - one place rather than make that change
05:05 - many times so let's change is sleeping
05:08 - to is asleep and see if that works
05:13 - again Mickey is
05:15 - asleep let's replace Mouse with
05:19 - dog Scooby is asleep not only that but
05:24 - with children classes they can have
05:26 - their own attributes and methods that
05:27 - are different from one another
05:30 - so dogs have all these attributes and
05:32 - methods and they can
05:34 - speak let's create a speak method and I
05:38 - will print a unique message for dogs
05:41 - woof cats will also have a speak method
05:44 - but it's going to be
05:46 - different cats will
05:51 - meow then for our Mouse class they will
05:58 - squeak let's have our dog
06:04 - speak woof let's have our cat
06:08 - speak meow and our
06:10 - Mouse
06:12 - squeak all right everybody so that's an
06:14 - introduction to inheritance inheritance
06:17 - allows a class to inherit attributes and
06:20 - methods from another class much like in
06:22 - real life a child can inherit traits
06:25 - from A parent these are also known as
06:28 - sub and super classes which is a topic
06:32 - for another day inheritance helps with
06:34 - code reusability and extensibility if
06:37 - all of these children classes inherit
06:39 - these attributes and methods from
06:40 - another class we only need to write that
06:43 - code once and not copy it for every
06:45 - single class that needs it we can write
06:47 - and change the code in one place for
06:50 - better reusability and extensibility and
06:52 - well everybody that is an introduction
06:54 - to inheritance in Python