00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well and in
00:03 - this video i'm going to teach you guys
00:04 - how we can create
00:05 - labels in python so sit back relax and
00:08 - enjoy the show
00:11 - if you find this video helpful please
00:12 - remember to like
00:14 - comment and subscribe your support will
00:16 - help keep this channel running
00:18 - what is a label well i'm glad you asked
00:20 - that question
00:21 - it's an area widget that holds text and
00:24 - or
00:24 - an image within a window so to begin
00:27 - we'll need to create a window to act as
00:29 - a container
00:30 - to hold this label we can create a
00:32 - window with
00:33 - window equals tk followed by
00:36 - window.mainloop
00:37 - and this will give us a window in which
00:39 - we can add a label to
00:41 - now let's give our label a unique name
00:43 - such as
00:44 - label and in order to instantiate a
00:46 - label we'll follow this label name with
00:48 - equals
00:49 - label with a capital l and a set of
00:52 - parentheses
00:53 - the parentheses are acting as the
00:54 - constructor for this widget
00:56 - our label and we can pass in arguments
00:59 - into
00:59 - these parentheses the first argument
01:02 - that we're going to pass
01:03 - in is a master the container for this
01:06 - label
01:06 - we're going to pass in the name of our
01:08 - window because our window is acting as
01:10 - the container with widgets and python
01:13 - we can de-eliminate the arguments that
01:15 - we're passing in with a comma
01:17 - and there are options available to us
01:20 - options are
01:21 - keyword arguments that we can pass in to
01:24 - the constructor for this widget
01:26 - one option available to us is text and
01:28 - we can set the text of this label equal
01:31 - to
01:31 - a string that we set so let's say that
01:33 - we want this label to say
01:35 - hello world well we're going to pass in
01:38 - this option
01:39 - text and it's a keyword argument
01:42 - so if we were to do this we're going to
01:44 - set the text
01:45 - of the label but this label currently
01:48 - doesn't appear within our window
01:50 - what gives bro i thought you knew how to
01:52 - code hold up wait a minute
01:54 - there's one more thing that we need to
01:55 - do so we're going to actually add
01:57 - this label to the window now we set
02:01 - the master of the label to be our window
02:03 - but now we actually have to add it as
02:05 - step two
02:06 - one way which we can do that is to use a
02:09 - pack
02:09 - function of our label so follow label
02:12 - equals label and pass in all of your
02:14 - arguments
02:15 - and then follow this with the name of
02:17 - the label dot pack
02:19 - so with the pack option by default this
02:22 - will place our widget
02:23 - in the top center of our window another
02:26 - way in which we can add a label to a
02:29 - container or window
02:30 - is to use the place function and we can
02:32 - set some coordinates of where we want
02:34 - this label or other widget to appear
02:37 - within the window
02:38 - if we want this to appear in the top
02:40 - left corner we can set
02:42 - x to equal zero and y t equals zero and
02:44 - these are
02:45 - options available to us too that we can
02:47 - pass in so
02:48 - this place function will place our label
02:51 - at some position or some set of
02:54 - coordinates within
02:56 - the window and with x equals zero and y
02:58 - equals zero
02:59 - that will place our widget in the top
03:01 - left corner of the window
03:03 - and if i were to change these to let's
03:04 - say x equals 100
03:06 - and y equals 100 well this is going to
03:09 - be placed
03:10 - down by 100 pixels and to the right by
03:13 - 100 pixels
03:14 - so you can use pack or place there's a
03:17 - few others
03:18 - like grid but they're a little more
03:19 - complex so we'll get to that in a future
03:21 - video
03:22 - for the time being i'm going to use the
03:24 - pack function of the label
03:25 - and turn this place function into a
03:27 - comment
03:29 - label dot pack all right
03:32 - now how can we customize this label we
03:35 - can pass in
03:36 - different options when we instantiate
03:38 - this label let's change the font and
03:40 - that's another option
03:41 - we can change the font with font equals
03:45 - and then we can pass in a font let's
03:47 - begin with a font
03:48 - family i will say maybe ariel a size
03:52 - perhaps 40 and then a style if you so
03:55 - choose
03:56 - like bold there's also italic and
03:59 - underline
04:00 - but this will work just fine then so
04:02 - this will change the font
04:04 - of the text of our label and it says
04:06 - hello world still
04:08 - now let's change the foreground color
04:11 - so that is another option the foreground
04:14 - is the font color
04:16 - and the option is fg for foreground it's
04:19 - short for foreground
04:20 - foreground equals we can state a color
04:23 - name
04:23 - such as green and our text should now be
04:27 - green
04:28 - you can select something more specific
04:30 - by passing in a
04:31 - hex value so a custom color that i like
04:35 - is hashtag zero zero ff00
04:39 - this is bright green you can always look
04:41 - up what different hex values are
04:42 - and we can also change the background
04:44 - color too
04:46 - that is bg short for background color
04:48 - and we can pass in a color name or a hex
04:51 - value
04:52 - i'm just going to set this to black just
04:54 - to demonstrate that we can pass in both
04:56 - either hex values or color names and
04:59 - what we have is
05:00 - green text on a black background and
05:03 - this is the
05:04 - limits of our label within the window
05:06 - because when we expand
05:08 - this window the label is still going to
05:10 - stay the same size
05:11 - if we were to change the text within the
05:14 - label
05:15 - our label is only going to take up the
05:17 - room that it needs
05:18 - and you can see that our label is now
05:20 - smaller now we have all of these
05:22 - arguments within our constructor and
05:24 - it's getting a little bit difficult to
05:25 - actually read
05:26 - so i'm going to separate each of these
05:28 - arguments line by line just so that this
05:30 - is more organized
05:32 - but it'll work just the same as it did
05:33 - before now how do we add a
05:36 - border around our label one we can set
05:38 - the border style
05:39 - with the relief option and one border
05:42 - that i like
05:43 - is raised but right now the border width
05:47 - is one so it's a little difficult for us
05:49 - to actually see the border
05:51 - let's increase the border width with the
05:53 - option b
05:54 - d and i'll set this equal to maybe 10.
05:58 - so this border is now more visible
06:01 - another relief
06:02 - which is the border style is sunken and
06:05 - this will give
06:06 - our label a sunken appearance but i
06:08 - think i'll change this back to raised
06:10 - we can also add some padding around the
06:13 - text
06:14 - between the text and the border we can
06:16 - pad x and pad y
06:18 - pad x will add some padding some space
06:20 - between
06:21 - the x-axis of our text between the
06:23 - border so let's set this to maybe 20
06:26 - and we now have 20 pixels worth of space
06:29 - between the text and the border let's
06:31 - also pad
06:32 - y this will add
06:36 - some space above and below our text
06:39 - between
06:40 - the text and the border now how do we
06:42 - add an
06:43 - image to a label we first need to create
06:45 - what's called
06:46 - a photo image and we will create this
06:49 - within the lines of window equals tk and
06:52 - window.main loop
06:54 - and let's give this photo image a unique
06:56 - name like
06:57 - photo and in order to create a photo
06:59 - image we're going to follow this with
07:01 - photo equals photo image
07:05 - and within the constructor of our photo
07:07 - image there's an option called
07:08 - file and we can list a file path or a
07:11 - file name
07:12 - right now on my desktop there is a image
07:15 - that i want to use and i need to convert
07:16 - this to
07:17 - a photo image here's my desktop and this
07:20 - is an image that i want to use to add to
07:22 - my label
07:23 - i need to get the file path and i can
07:25 - get that by going to
07:26 - properties then underneath location i
07:29 - can copy
07:30 - this location address and paste it
07:33 - within
07:33 - the quotes for file and then i need to
07:36 - add
07:37 - the image name and this is person.png
07:40 - and with these backslashes these need to
07:42 - be double backslashes because
07:45 - that is the escape character for a
07:47 - backslash
07:49 - but what would be a better option is to
07:51 - add
07:52 - this image to my project folder that
07:54 - contains the python file that i'm
07:56 - working with
07:56 - so in place of listing the entire file
07:59 - path
08:00 - i'm going to copy the image that i want
08:02 - to use go to my project folder
08:04 - and then paste it and i no longer need
08:08 - this entire file path
08:10 - i can just list the image name that i
08:12 - have and now what we need to do is add
08:15 - this photo to the label
08:16 - and there's an option to do so that is
08:18 - the image option
08:20 - and we'll place this within the
08:21 - constructor for the label we're going to
08:23 - set
08:23 - image equal to the photo image that we
08:26 - have
08:26 - and our photo image is called photo this
08:29 - will add
08:29 - our photo image to our label or other
08:32 - widget depending on what we're working
08:33 - with
08:35 - so we have our image but it replaced all
08:37 - of the text that we had for this label
08:40 - how do we add both text and an image
08:43 - to a window well we can follow this with
08:45 - the compound
08:46 - option we can set a direction of where
08:49 - we want this image to be placed
08:51 - relative to the text that we have so i'm
08:54 - going to set compound equal to
08:56 - bottom so that the image appears on the
08:59 - bottom or
08:59 - underneath our text so we can both have
09:02 - text
09:03 - and an image or if i want this to be in
09:05 - a different location i could set this to
09:07 - maybe top
09:08 - left or right if i were to set this to
09:10 - top we have our image
09:12 - on top of our text and one thing to know
09:15 - about labels and many other widgets in
09:17 - python is that
09:18 - the size of the widget will actually
09:21 - increase to accommodate
09:22 - the size of all the components that's
09:24 - contained within if i were to give the
09:27 - text a longer string of characters such
09:29 - as
09:30 - bro do you even code then
09:33 - the width of our label is actually going
09:36 - to expand
09:37 - to accommodate the size of the longer
09:39 - string of text that we have
09:41 - so that's the basics of labels everyone
09:44 - if you would like a copy of all this
09:45 - code
09:45 - i will post all of this in the comments
09:47 - down below but yeah that's the basics
09:50 - of labels in python
09:53 - hey you yeah i'm talking to you if you
09:56 - learn something new
09:57 - then you can help me help you in three
10:00 - easy steps
10:01 - by smashing that like button drop a
10:03 - comment down below
10:04 - and subscribe if you'd like to become a
10:06 - fellow bro
10:21 - [Music]
10:27 - you