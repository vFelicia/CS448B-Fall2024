00:02 - hey welcome back so nested loops a
00:05 - nested loop is a loop inside of another
00:08 - loop when you'll encounter them it's
00:09 - really situational so i don't really
00:11 - have one good example but what i'm
00:13 - thinking will do is use a nested loop
00:16 - for an exercise what i'm thinking is
00:18 - that we'll let a user type in a number
00:20 - of rows and columns and a symbol and
00:22 - print a rectangle of that given symbol
00:25 - but the user is going to specify a
00:27 - number of rows and columns so let's
00:29 - begin by declaring all of the different
00:31 - variables that we'll need intros and
00:33 - columns and char
00:36 - symbol we'll let the user type in a
00:38 - number of rows and columns
00:42 - enter number of rows
00:45 - then use scanf to accept some user input
00:48 - we are accepting an integer so use d for
00:51 - the format specifier
00:53 - address of operator rows
00:55 - then do the same thing with columns
01:00 - enter number of columns
01:04 - let's create our nested loops you can
01:06 - use either for loops or while loops it's
01:08 - just the concept of one loop inside of
01:10 - another so let's use for loops for our
01:13 - outer loop and inner loop
01:16 - the outer loop is in charge of keeping
01:18 - track of the rows the inner loop will be
01:20 - in charge of keeping track of the
01:21 - columns so i need this outer for loop to
01:24 - iterate once for every row that we have
01:27 - so we could write something like this
01:29 - into i set this equal to one i need to
01:32 - continue this for loop as long as i is
01:35 - less than or equal to rows
01:39 - and then increment i by one after each
01:41 - iteration so now let's create a nested
01:44 - for loop we will declare a loop inside
01:46 - of another loop
01:48 - and this inner for loop is in charge of
01:50 - the columns we should probably not reuse
01:52 - our index of i so let's create a new
01:54 - index and a common naming convention for
01:57 - an inner for loop is to use j because j
02:00 - comes after i in the alphabet
02:02 - so i will set int j equal to one we will
02:05 - continue this as long as j is less than
02:09 - or equal to columns
02:12 - then increment j by 1. for the time
02:14 - being until we let a user type in a
02:16 - symbol let's just print our index so
02:19 - let's use printf
02:23 - we're displaying an integer
02:26 - and let's display j
02:28 - and let's take a look at this
02:30 - okay enter number of rows how about
02:32 - three rows and five columns
02:35 - so here's our output we have the numbers
02:37 - one through five three times
02:41 - so to make this more of a rectangle a
02:43 - grid i'm going to add a new line
02:45 - character whenever we finish a row
02:48 - so printf
02:51 - new line character let's try that again
02:55 - enter number of rows three number of
02:57 - columns five so we have three rows and
03:01 - five columns basically speaking to
03:03 - complete one iteration of our outer loop
03:06 - we have to escape our inner loop first
03:09 - once this condition is no longer true
03:11 - then we will escape the inner loop and
03:13 - complete one iteration of the outer for
03:16 - loop but then once we begin in the next
03:18 - iteration of our for loop we're stuck
03:20 - back within our inner for loop again so
03:22 - that's kind of the concept now this time
03:24 - let's let a user type in a symbol and we
03:27 - will create a sort of rectangle
03:31 - enter a symbol to use then scanf we are
03:36 - accepting a character so use the c
03:38 - format specifier address of operator r
03:42 - symbol variable
03:44 - now we're going to replace j
03:46 - with our symbol
03:48 - and the format specifier for a character
03:51 - is c
03:52 - then let's try this again
03:55 - so how about three rows and six columns
03:59 - okay here's the issue so we have all of
04:01 - this empty space
04:02 - now when we entered our number of
04:04 - columns after hitting enter we have the
04:07 - new line character within our input
04:09 - buffer so our next scana function
04:12 - actually picked that up so what we need
04:14 - to do is clear our buffer and one simple
04:17 - way of doing that there's a couple
04:18 - different ways is that we can just use
04:20 - scanf again
04:22 - and we will read a character and that's
04:25 - one way to do it basically with this
04:26 - line we're just getting rid of the new
04:28 - line character after the last time we
04:31 - used scanf because that's still within
04:32 - our buffer okay let's try this one last
04:34 - time what about four rows
04:37 - and five columns enter a symbol to use
04:40 - uh how about the dollar sign
04:42 - there we go here's our rectangle it has
04:45 - five columns
04:46 - and four rows so yeah that's basically a
04:49 - nested loop it's a loop inside of
04:51 - another loop and when you'll encounter
04:53 - them it's really situational i thought
04:55 - this would be good practice to
04:57 - understand how they work to complete one
04:59 - iteration of the outer loop you have to
05:02 - first escape the inner loop and that may
05:04 - involve completing all iterations of the
05:07 - inner loop so yeah those are nested
05:09 - loops if you would like a copy of this
05:10 - code i will post this to the comment
05:12 - section down below and well yeah those
05:14 - are nested loops in c