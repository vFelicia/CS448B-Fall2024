00:00 - hey what's going on everybody it's you
00:01 - bro here hope you're doing well and in
00:02 - this video i'm going to teach you guys
00:04 - how we can create some labels in java so
00:06 - sit back relax and enjoy the show
00:10 - if you find this video helpful please
00:12 - remember to like
00:13 - comment and subscribe your support will
00:16 - help keep this channel running
00:18 - okay people so let's discuss the labels
00:20 - a label
00:21 - is a gui component and functions like a
00:23 - display area for a string of text
00:26 - an image or even both so before we begin
00:29 - we'll need
00:30 - a frame so we can add a label to the
00:32 - frame because a label is a component
00:35 - so we'll need to be sure to create a
00:36 - frame i'm just going to paste what i
00:38 - have here from the last lesson
00:40 - so jframe frame equals new frame frame
00:43 - dot set default close operation
00:45 - jframe exit on close set a size i just
00:48 - picked 500 by 500
00:50 - and frame dot set visible to true and
00:52 - then we'll just need this import as well
00:54 - so how do we create a label well that's
00:56 - a good question it's very similar to
00:58 - what we did with our jframe
00:59 - so instead of saying jframe frame equals
01:02 - new frame we can instead say
01:04 - jlabel we can call this label equals new
01:07 - j label we can set some string of text
01:11 - an image or both uh but we'll need an
01:13 - import as well so let's include that
01:15 - i'm just going to be adding imports as
01:17 - we go along so
01:18 - let's set the text for the label so we
01:20 - can do that using the
01:21 - label dot set text function
01:25 - and then we can set some text so maybe
01:27 - i'll say
01:29 - bro do you even code
01:33 - so there's two different ways that you
01:34 - can set text for a label you can either
01:36 - use the set
01:37 - text method otherwise what you could do
01:40 - let's say that we delete this
01:42 - when you create an instance of your
01:43 - label you can just pass in some text
01:45 - like this
01:46 - but i'll just do this on a different
01:48 - line for now just for teaching purposes
01:50 - so what this will do is set text
01:55 - of label and this will
01:58 - create a label
02:01 - so now what we need to do is actually
02:03 - add the label to the frame and this is a
02:05 - very easy step to forget about
02:08 - so we'll type in frame dot add
02:11 - and what do we want to add so you can
02:13 - see that it's adjusting a component
02:15 - we're going to add our label and then
02:18 - we're going to compile this and run this
02:23 - so here's our string of text bro do even
02:26 - code
02:26 - so normally with our label with how our
02:29 - layout manager is for our frame
02:31 - it's using a border layout so it likes
02:34 - to take
02:34 - strings or images and it likes to center
02:38 - it and put it on the left hand side but
02:39 - we'll change
02:40 - that later so let's begin next by
02:43 - creating an image icon
02:44 - so we can add an image to this label so
02:47 - let's create an image icon
02:49 - image icon and i have a picture that i
02:52 - want to use
02:54 - i call it dude.png so i would like to
02:57 - add
02:58 - this image to my label as well as my
03:00 - text
03:01 - so i'm going to create a name for this
03:03 - image i'll just call it image
03:05 - image icon image equals new image
03:09 - icon and then we can put a file path
03:12 - here
03:13 - or a file name if it's within the same
03:15 - folder so this is in the same
03:17 - project folder as my java file here
03:21 - so this is dude.png
03:25 - and then we'll need an import for this
03:27 - too
03:29 - so then we're going to set the icon for
03:31 - this label so label
03:33 - dot set icon
03:37 - and you can see that it's asking for an
03:39 - icon luckily
03:40 - our image is an icon so we'll put image
03:43 - here
03:44 - and then run this again
03:47 - so here's our image well it's an image
03:50 - icon
03:50 - and our text now let's take a closer
03:53 - examination of our label
03:55 - with java's swing graphical user
03:57 - interface it likes to take
03:58 - a string of text and put it on the right
04:01 - hand side of your image when creating a
04:03 - label
04:03 - so we can actually move the string of
04:06 - text around
04:07 - relative to the image this is how we can
04:09 - do that there's two functions to help us
04:11 - with that
04:12 - that is set horizontal text position and
04:15 - set
04:15 - vertical text position let's begin by
04:18 - setting the horizontal text position
04:20 - so we're going to take label dot set
04:23 - horizontal text position and we can pass
04:26 - in
04:26 - a constant so there's three options that
04:29 - we can use really to help us with this
04:31 - they are j label dot left center
04:35 - or right let's say that i want to put
04:36 - this in the center that would be
04:38 - j label dot center
04:44 - so now when we run this our text
04:47 - is going to be overlapping our image
04:50 - so by default horizontal text position
04:53 - will put the text on the right so if you
04:56 - want this centered you would use
04:57 - jlabel.center otherwise you can use
05:00 - jlabel.left if you want this on the left
05:02 - so the options for this would be set
05:05 - text
05:07 - left center or right
05:10 - of image icon
05:14 - so then let's set the vertical text
05:16 - position so that is
05:18 - label dot set vertical
05:21 - text position and we have top center
05:25 - or bottom so let's set this to j
05:28 - label dot top
05:32 - and then our text is going to be to the
05:34 - center
05:35 - and above our image so this
05:38 - will set text top
05:42 - center or bottom
05:45 - of image icon okay guys
05:48 - let's get a little crazy let's change
05:50 - the font color as well
05:52 - as the font styling of the string of
05:54 - text of our label
05:55 - so let's begin with the font color and
05:57 - we can use the
05:58 - label dot set foreground method to do
06:01 - that for us
06:02 - we can pass in a color and there's a few
06:05 - constants that you can use
06:06 - so let's say that we want green we can
06:08 - say color dot
06:10 - green alternatively what you could do
06:13 - if you want a more customized color is
06:16 - that you can pass
06:16 - in a new color and you can
06:20 - set the rgb values
06:23 - or you can set a hex value here
06:26 - so if you're using hex color values if
06:28 - you want green that would be
06:30 - 0x 0 0 f ff00
06:34 - so now the font color of our text
06:37 - is now green what if you want to change
06:39 - the font styling well there is a
06:42 - method that will do that for you so that
06:43 - is label.set
06:45 - font and we can pass in a new font kind
06:47 - of like what we did with our new color
06:50 - so let's create a new font we can set
06:53 - the type of font that we want so one of
06:55 - my personal favorites
06:57 - is mv fully but use whatever font that
07:00 - you personally want
07:01 - and we can set the styling if it's plain
07:05 - bold underline italic so there's a few
07:07 - constants for this
07:08 - so font dot and you can pick one of
07:10 - these i'll just set this to
07:13 - plane and then you can set a size so
07:16 - i will pick 20. so then after compiling
07:19 - and running this
07:20 - the font is now changed for the text of
07:23 - our label
07:25 - so this will set font
07:28 - of text and this will
07:31 - set font color of text
07:34 - here's another useful method there is a
07:37 - set icon
07:38 - text gap where you can adjust how far
07:40 - away your text is
07:42 - from your image so let's try that so
07:45 - label dot set icon text gap
07:48 - and we place an integer number within
07:51 - here so if i set this to
07:53 - let's say 100 there is going to be a
07:55 - fairly
07:56 - large gap between our text and our image
07:59 - you can also set this to a negative
08:01 - number and you can pull things in closer
08:03 - so if i set this to negative 25
08:06 - now our text is very close to our image
08:09 - so this will set gap
08:13 - of text to image now let's change the
08:17 - background color
08:18 - so we're going to use the label dot set
08:21 - background color method and we can pass
08:23 - in a color
08:24 - i'm just going to use a constant this
08:26 - time so let's say black
08:28 - color dot black
08:33 - like that alright so this will set
08:36 - the background color however let's take
08:38 - a look to see what happens
08:41 - so the color does not really necessarily
08:43 - change
08:44 - there is another method that we have to
08:46 - follow this up with
08:47 - and that is the label.set opaque method
08:50 - and we're going to set this to true
08:52 - so if true the component our label
08:55 - paints every pixel
08:56 - within its bounds so basically to
08:59 - display the background color you need to
09:01 - set opaque to true so this will display
09:06 - background color so now this should be
09:09 - black
09:11 - so our label is not just this little
09:14 - section
09:15 - the label likes to take up as much room
09:17 - as possible
09:18 - even if we were to expand this window
09:21 - the label is going to expand
09:23 - as well later on i'll show you a few
09:25 - ways that we can
09:26 - limit the size of this label if you want
09:28 - to place this label specifically
09:30 - somewhere within your frame
09:32 - but for now there's a few different
09:34 - methods where we can move
09:35 - the contents of the label around so
09:37 - right now this entire
09:39 - area is the label because the label
09:41 - likes to take up as much room as
09:43 - possible
09:44 - even if we were to resize this the
09:46 - entire thing is our label
09:47 - and i'll prove it to you by setting the
09:49 - border color
09:50 - so first we'll actually need a border so
09:53 - i'm going to create a border right after
09:55 - we create our image icon
09:57 - so we'll type in border border
10:00 - equals border factory
10:05 - i misspelt factory let me fix that
10:07 - border factory
10:08 - dot create and there's a few borders
10:11 - that you can pick from
10:12 - i'm just going to pick a simple line
10:15 - border and we can set this to a
10:17 - color so maybe color dot green
10:20 - and then you can set a border width so
10:23 - i will pick three three sounds good so
10:26 - then we'll probably need an
10:27 - import too so import
10:30 - border dot border i guess all right so
10:34 - then
10:34 - let's set the border for this label so
10:37 - label
10:38 - dot set border
10:42 - and we're going to use the border that
10:44 - we created it's just called border
10:46 - so then after running this the border of
10:49 - our label is now green so it's not just
10:52 - this little area with our text and our
10:54 - image
10:55 - the label likes to take up as much room
10:57 - as possible and you can see that with
10:59 - the border
11:00 - so one trick that you have available to
11:02 - you is that you can move the text
11:04 - as well as the image around within the
11:06 - label so by default it likes to be in
11:09 - the center
11:10 - vertically and to the left horizontally
11:13 - so we can change
11:14 - where this text and this image is placed
11:17 - within the label
11:19 - so we can move this to maybe the right
11:21 - side maybe
11:22 - the top to the bottom one of the corners
11:24 - this is how we can do that
11:25 - so we're going to use label dot set
11:29 - vertical alignment if we want to change
11:32 - the vertical positioning
11:33 - within the label so we'll set a constant
11:37 - j label dot and we can pick either top
11:40 - center or bottom so right now
11:43 - it's uh center so let's try moving this
11:46 - to the top
11:50 - so now this is in the top left of our
11:52 - label the text
11:54 - as well as the image but i think i'll
11:56 - keep this
11:57 - in the center because i want this to be
12:00 - in the middle
12:00 - so this will set vertical
12:04 - position of icon plus
12:07 - text within
12:11 - label and then we can do the same thing
12:12 - with set horizontal alignment so
12:15 - label dot set horizontal
12:18 - alignment and it's either let's see
12:22 - left center or right so i'm just going
12:24 - to set this
12:25 - to center so label dot center
12:30 - so now this text
12:33 - and image will always stay in the center
12:36 - of our label even if we were to resize
12:39 - this frame so this will
12:42 - set horizontal
12:45 - position of icon
12:48 - plus text within
12:52 - label now you're probably thinking that
12:54 - it's kind of stupid
12:55 - that the label is taking up the entire
12:58 - frame
12:58 - well that's because of the default
13:00 - layout manager that we're using
13:02 - so one thing that we can do at least
13:05 - until we get to the lesson
13:06 - on layout managers is that we can set
13:10 - the layout manager that we're using to
13:12 - null and then we can manually set the
13:14 - size and the placement of this label
13:16 - so it won't really take up the entire
13:19 - frame that we have
13:20 - so let's take our frame not the label
13:24 - frame dot set layout
13:29 - and for the layout manager that we're
13:31 - going to use
13:32 - normally with the default it's border
13:34 - layout let's set this to null
13:37 - and then when we run this it doesn't
13:40 - display anything
13:41 - well that's because now we have to set
13:43 - the bounds
13:44 - for the label so we're going to set
13:46 - where we want this label placed
13:48 - the x coordinates as well as the y
13:50 - coordinates and
13:52 - the dimensions of this label so let's
13:54 - add
13:55 - label dot set bounds
14:00 - so we have to pass in a value for x y
14:03 - the width and the height so for
14:06 - x let's say zero y is zero for the width
14:09 - let's make this 250 and the height 250
14:12 - as well
14:13 - and then let's take a look at this
14:16 - so you can see that with our label it
14:19 - places
14:20 - the top left corner of our label where
14:23 - we set the
14:24 - x and y positioning to so 0 0 is the top
14:27 - left of our frame and it also set a size
14:30 - for our label so 250 by 250
14:33 - if we were to change the size of our
14:35 - label let's say
14:36 - 350 by 350 well this label is going to
14:40 - expand in size
14:41 - however it still likes to stick to the
14:43 - top left corner because we set the
14:44 - coordinates to be
14:45 - 0 0 so let's change the coordinates as
14:48 - well but i
14:49 - will change this back to maybe 250 by
14:51 - 250
14:52 - and then let's say x is now 100
14:55 - so now the positioning for this label
14:58 - will move
14:59 - on the x-axis to the right by 100 pixels
15:02 - and if i set y to maybe 100 well then
15:05 - this is going to be
15:06 - also pushed down by 100 pixels and then
15:09 - if we were to resize our frame
15:11 - this is actually going to stay in the
15:13 - same place so
15:15 - use what works for you what you want for
15:16 - your program so
15:18 - this will set
15:21 - x and y position
15:24 - within frame as well as
15:28 - dimensions now i have one last trick for
15:31 - you guys that you might find
15:33 - very useful and that is the use of the
15:35 - pack functions of
15:37 - frames so to demonstrate this i need to
15:40 - get rid of our set bounds method that we
15:43 - have for our label
15:44 - i'll just turn this into a comment and
15:46 - the same thing with frame.set
15:48 - layout we'll just use the default layout
15:51 - manager that we have
15:52 - and the method is called frame
15:55 - dot pack it's the pack method of frames
15:59 - so what this does is that this will
16:01 - resize
16:02 - the size of the frame to accommodate all
16:05 - of the components that you have
16:07 - so after running this actually we don't
16:09 - even really necessarily need a
16:11 - size for the frame the size of the frame
16:14 - will adjust
16:14 - to fit all of the components that you
16:16 - have and then you can resize this if you
16:18 - want to otherwise you can use a
16:21 - set resizable false if you don't want
16:22 - people to resize this
16:24 - so if we were to actually expand the
16:27 - size
16:28 - of the components within the label such
16:30 - as the text
16:31 - size so let's say that i want this to be
16:33 - 50 well
16:34 - the size of the frame since we're using
16:37 - the pack method
16:38 - is going to adjust to accommodate the
16:41 - size of whatever's within the label so
16:44 - that's something that you might find
16:46 - useful
16:46 - but however you might like to use the
16:49 - set bounds method
16:50 - or the default layout manager it depends
16:53 - on what you want for your program but
16:55 - you have options
16:56 - oh and i forgot to mention this if
16:58 - you're going to use the pack method
16:59 - make sure that you add all of your
17:01 - components before using pack
17:03 - otherwise this doesn't work so i'll
17:05 - prove it to you so we're going to pack
17:07 - and then add our label so you can see
17:10 - that it doesn't work we just get this
17:11 - little tiny box so make sure that you
17:14 - add all the components
17:15 - and then pack well that's the basics of
17:18 - creating labels in java if you want a
17:20 - copy of all this code i'll post all of
17:22 - this in the comments down below
17:23 - but yeah that's how to create labels in
17:25 - java hey you
17:27 - yeah i'm talking to you if you learn
17:29 - something new then you can help
17:31 - me help you in three easy steps
17:34 - by smashing that like button drop a
17:36 - comment down below
17:37 - and subscribe if you'd like to become a
17:39 - fellow bro
17:49 - [Music]
17:59 - you