00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well
00:03 - and in this video i'm going to explain
00:04 - exception handling in python so
00:06 - sit back relax and enjoy the show
00:11 - if you wouldn't mind please like comment
00:14 - and subscribe
00:15 - one like equals one prayer for the
00:17 - youtube algorithm
00:19 - well everyone let's talk about
00:21 - exceptions an exception is an event
00:23 - detected
00:24 - during execution that interrupts the
00:26 - normal flow of a program
00:28 - here's a program that i've written and
00:30 - we're intentionally going to cause an
00:31 - exception
00:32 - so this program that i've written we
00:34 - will accept a numerator and a
00:36 - denominator from the user
00:37 - we'll divide the numerator by the
00:39 - denominator we'll get a result
00:40 - and print the result so what if i were
00:42 - to divide a number such as 5
00:45 - divided by 0 which we cannot
00:47 - mathematically do
00:48 - well this will cause an exception an
00:50 - event detected
00:51 - during execution that interrupts the
00:53 - flow of a program
00:55 - so our program was interrupted and
00:57 - within our console window we have this
00:59 - traceback message
01:00 - which states what went wrong and a name
01:03 - for this exception that occurred
01:04 - this specific exception that occurred is
01:06 - a zero division error
01:08 - so this video is all about handling
01:10 - these exceptions
01:11 - so they do not interrupt the normal flow
01:13 - of a program
01:14 - now a very basic form of exception
01:16 - handling is to surround any code that is
01:19 - considered dangerous
01:20 - as in it might cause an exception within
01:22 - a try block
01:23 - anytime you accept user input would be a
01:25 - good indicator too
01:27 - so this code is considered dangerous
01:29 - because we don't know what the user is
01:30 - going to type in
01:31 - so we will try all of this code if an
01:34 - exception occurs
01:35 - we can catch it and handle it so to do
01:37 - that
01:38 - we'll add an accept block accept and
01:40 - then we will catch
01:42 - exception normally having this block by
01:45 - itself
01:45 - isn't considered good practice but i'll
01:47 - explain why later so
01:48 - this accept exception block will catch
01:51 - all sorts of different exceptions
01:53 - and it will prevent our program from
01:54 - being interrupted and we can do
01:56 - something else entirely
01:57 - such as print a message something went
02:01 - wrong so let's try this again we will
02:04 - divide 5
02:05 - by 0 which we cannot do we no longer
02:07 - have that traceback message within our
02:09 - console window
02:10 - we caught the exception and we did
02:12 - something else we printed
02:14 - something went wrong like i said before
02:16 - it's not considered good practice to
02:18 - have a single accept block that will
02:20 - handle
02:21 - all exceptions it's much better to first
02:23 - handle specific exceptions when they
02:26 - occur
02:26 - and we can do so by writing additional
02:28 - accept blocks
02:29 - so let's create an additional accept
02:32 - block
02:32 - that will catch any zero division error
02:35 - exceptions
02:36 - that occurs when somebody attempts to
02:38 - divide by zero so if
02:40 - this exception occurs how do we want to
02:42 - handle it let's just print the message
02:44 - let's print you can't divide
02:48 - by zero idiot
02:51 - and let's try this again so five divided
02:53 - by zero
02:55 - you can't divide by zero idiot here's
02:57 - another one i'm going to turn
02:59 - this accept block into a comment so we
03:01 - can take a look at something
03:03 - what if i divide by something that's not
03:05 - a number like we take 5 and divide it by
03:07 - the word pizza
03:08 - well pizza is not a number and we ran
03:10 - into a
03:11 - value error exception so we should
03:14 - probably handle this too
03:15 - so let's create another accept block
03:17 - that will handle that
03:19 - accept value error
03:23 - and how do we want to handle this let's
03:25 - print something
03:27 - enter only numbers
03:30 - please okay let's try this again and see
03:34 - if
03:34 - this exception is caught five divided by
03:37 - the word
03:37 - pizza enter only numbers please
03:41 - not only that but you can also add the
03:45 - exception block at the very end just in
03:47 - case there's something you won't
03:48 - anticipate
03:49 - but it's always considered good practice
03:51 - to first catch any specific exceptions
03:53 - and let the user know exactly what went
03:55 - wrong an additional way in which we can
03:58 - handle these exceptions
03:59 - is that we could display the exception
04:01 - that occurs although it is completely
04:03 - optional
04:04 - so to do that what we'll do is that
04:06 - after each of these accept block
04:07 - definitions
04:08 - let's add as e so we're calling the
04:12 - exception as
04:12 - e that's just standard practice although
04:14 - it's not necessary
04:16 - so let's do that for each of these
04:18 - except blocks
04:19 - and then we can print whatever e is so
04:22 - let's add that
04:23 - to each of these blocks so
04:26 - it should now look something like this
04:28 - so when we encounter an exception
04:30 - we can display what exception occurred
04:32 - too as well
04:33 - so let's divide five by pizza invalid
04:37 - literal for
04:38 - int with base 10 pizza enter only
04:41 - numbers please
04:42 - so like i said this is an additional way
04:49 - you can add an else statement
04:51 - to the end of your accept blocks so
04:54 - what's happening here is that we're
04:55 - going to
04:56 - try all of this code if an exception
04:58 - happens
04:59 - then catch it and handle it if not then
05:02 - do something else
05:03 - so why don't we print our result only if
05:06 - there are no exceptions
05:07 - that occur so if there are no exceptions
05:10 - we will execute
05:11 - this else statement if not then we won't
05:14 - so
05:15 - let's divide 5 by an actual number this
05:17 - time like
05:18 - 2. so there are no exceptions that
05:20 - occurred so
05:21 - we executed this else statement whatever
05:24 - code is within
05:25 - our else block and this printed the
05:26 - result of 2.5
05:28 - but if an exception were to occur like
05:30 - we divide 5 by
05:31 - 0 then we will catch our exception and
05:35 - handle it
05:35 - and we do not execute whatever block of
05:42 - should be aware of that is the
05:43 - final clause this is always at the end
05:46 - how this works
05:47 - is that whether or not we catch an
05:49 - exception we will always execute
05:51 - any code that is within the block of
05:53 - code for our finale clause
05:55 - so this is a good opportunity if you
05:57 - open files
05:58 - to close them within the finally block
06:01 - but
06:01 - we haven't dealt with opening files yet
06:03 - so we won't do that
06:04 - all we'll do is just print something
06:06 - print this
06:08 - will always execute so
06:11 - whether or not we encounter an exception
06:13 - this finally block will always execute
06:15 - at the end
06:16 - so let's try this again so this time
06:18 - let's cause an exception
06:20 - let's divide five by zero you can't
06:22 - divide by zero
06:24 - this will always execute and this time
06:26 - let's take this seriously and divide
06:28 - five
06:28 - by another number such as three so this
06:31 - will give us a result
06:32 - and like i said the finally clause the
06:34 - code within the finale clause will
06:36 - always execute
06:37 - but we won't really be working with this
06:39 - until we get to the section on file
06:41 - handling
06:42 - well everybody those are exceptions in
06:44 - python they are events detected
06:47 - during execution that interrupt the flow
06:49 - of a program
06:50 - and we can handle these exceptions by
06:52 - using try and accept blocks
06:54 - so if you would like a copy of all this
06:56 - code i will post all of this in the
06:58 - comments down below
06:59 - but yeah that is how exceptions work in
07:02 - python
07:04 - hey you yeah i'm talking to you if you
07:06 - learned something new
07:07 - then help me help you in three easy
07:09 - steps
07:10 - by smashing that like button drop a
07:12 - comment down below
07:13 - and subscribe if you'd like to become a
07:15 - fellow bro
07:17 - [Music]