00:00 - yo so uh what's up today I'm going to be
00:02 - talking about the sort method in
00:04 - JavaScript the sort method is used to
00:06 - sort elements of an array in place
00:09 - however with the sort method we sort
00:11 - elements as strings in lexicographic
00:14 - order not alphabetical if I could
00:16 - summarize what lexicographic means it
00:19 - means alphabet Plus numbers plus symbols
00:21 - as strings let me give you an example
00:23 - with just alphabetical characters I have
00:26 - an array of fruits to sort this array I
00:28 - can take the array name fruits use the
00:31 - built-in sort method then
00:35 - console.log my array of fruits let me
00:39 - expand this and here's my array all
00:42 - sorted when sorting we treat any
00:45 - elements as strings what if my array
00:47 - were numbers I'll add the numbers 1
00:49 - through 10 in a somewhat random
00:57 - order let's change our array to be
01:00 - numbers numbers. sort console.log
01:03 - numbers here's the result we have one
01:08 - then 10 then the rest seem to be in
01:10 - order we're not sorting this array
01:12 - numerically we're sorting this array
01:15 - lexor graphically we're treating each of
01:17 - these numbers as strings that's why we
01:19 - have one then 10 10 isn't at the end
01:22 - where we expect it would be there's a
01:24 - couple extra steps we need to do
01:25 - involving sorting
01:27 - numbers inside of the sort method we
01:29 - have to write a custom comparison
01:31 - function this is normally a callback but
01:34 - you can write a function expression or
01:35 - even better yet an arrow function we'll
01:38 - write an arrow function in this case let
01:40 - me zoom in with an arrow function we
01:43 - first need
01:44 - parameters we'll have parameters A and B
01:48 - we'll examine two contiguous elements 1
01:51 - then 10 10 then 2 two then nine N9 and
01:55 - three so on and so forth then we need an
01:58 - arrow
02:00 - then we'll write a minus B our function
02:04 - a minus B will return either a0 or
02:08 - positive value depending on what values
02:10 - we're examining the sort method will
02:12 - sort those values into place depending
02:14 - on what the value returned is our array
02:17 - should be sorted you can see that 10 is
02:20 - at the end instead of right after one
02:23 - for reverse order you could say B minus
02:28 - a now we're starting with 10 and ending
02:31 - with
02:32 - one you can even sort objects by a given
02:36 - property let's go over that
02:38 - example we will create an array of
02:40 - people const people equals this will be
02:45 - an array will include four objects all
02:48 - comma
02:50 - separated the first will have a name
02:53 - property of
02:58 - SpongeBob age
03:00 - 30 and a GPA
03:04 - GPA
03:06 - 3.0 I'm going to zoom out for the next
03:10 - object just going to put that on a new
03:12 - line let's copy all these properties
03:15 - change name to be Patrick age will be
03:19 - 37 GPA
03:23 - 1.5 again for the next
03:26 - object we will have
03:28 - Squidward
03:30 - age
03:32 - 51 GPA
03:36 - 2.5 then lastly we'll have Sandy name
03:41 - Sandy let's make Sandy
03:45 - 27 GPA of course it's going to be a
03:49 - 4.0 I would like to sort this array of
03:51 - objects by each person's age we'll take
03:54 - our array of objects that's stored
03:56 - within
03:58 - people use the built-in sort
04:02 - method use our Arrow
04:04 - function a comma B
04:08 - Arrow we'll take parameter a that's
04:11 - person one do access their age property
04:15 - minus parameter B access their age
04:19 - property and that's all you got to do
04:22 - now let's
04:24 - console.log R
04:28 - people
04:33 - there we are we have Sandy who's the
04:35 - youngest then SpongeBob Patrick
04:38 - Squidward for reverse order you'll just
04:41 - change a to be B and B to be
04:47 - a Squidward Patrick SpongeBob Sandy or
04:51 - we can sort by a different property
04:52 - let's do GPA this
04:55 - time a. GPA b. GPA
05:03 - we have Patrick with the lowest GPA
05:05 - followed by Squidward SpongeBob Sandy
05:08 - then reverse order would be b. GPA minus
05:12 - a.
05:13 - GPA Sandy SpongeBob Squidward Patrick
05:17 - let's try sorting by the name property
05:19 - and see what happens
05:22 - a.name minus b.n
05:27 - name we have SpongeBob Patrick's
05:29 - Squidward Sandy but that doesn't seem to
05:31 - make sense these aren't in alphabetical
05:33 - order if you need to sort by a property
05:36 - that contains a string within an object
05:38 - there's a different
05:40 - formula we will take
05:43 - a.name do use the built-in
05:47 - local compare
05:49 - method compare to b.
05:53 - name this method will examine two
05:55 - strings for lexicographic
05:58 - order now these are all arranged
06:02 - lexicographically starting with Patrick
06:04 - then Sandy SpongeBob Squidward for
06:07 - reverse lexicographic order we would
06:09 - take b.n name. local compare then
06:12 - examine
06:14 - a.name I've just now realized that
06:16 - there's a lot of SpongeBob characters
06:18 - whose first name starts with an S like
06:20 - we have three right here Squidward
06:22 - SpongeBob Sandy Patrick all right
06:24 - everybody so that is the sort method
06:26 - it's used to sort elements of an array
06:28 - in place it sorts elements as strings in
06:31 - lexicographic order not alphabetical and
06:34 - well everybody that is the sort method
06:36 - in
06:40 - JavaScript