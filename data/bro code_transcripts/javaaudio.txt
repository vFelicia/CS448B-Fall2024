00:00 - how's it going everybody it's your bro
00:01 - hope you're doing well and in this video
00:03 - i'm going to teach you guys how we can
00:04 - create an
00:05 - audio player in java so sit back relax
00:08 - and enjoy the show make sure you
00:16 - like comment and subscribe one like
00:20 - equals one prayer for the youtube
00:21 - algorithm
00:23 - for this project we're going to be using
00:25 - the package
00:27 - javax.sound.sampled however this is not
00:30 - compatible
00:30 - with mp3 files but it is compatible with
00:33 - wav
00:34 - files so make sure that you have a wav
00:36 - file that you want to use
00:38 - i'll direct you to a resource to get
00:39 - some audio files if you need a sample
00:41 - audio file i would recommend
00:43 - youtube's audio library and you can do a
00:45 - quick google search to find this and
00:47 - click the first link and then you can
00:48 - search for any song
00:50 - or sound effect that you need and to
00:52 - download a song just click this download
00:54 - button
00:55 - and then once you have your song
00:56 - downloaded it's probably going to be an
00:58 - mp3 file
00:59 - look up a wav file converter and click
01:02 - any one of these links
01:03 - and then you can begin the process of
01:05 - converting your mp3 file to a wav
01:08 - audio file once you have downloaded your
01:10 - wav file i would recommend
01:12 - copying it go to your project folder and
01:15 - then paste it
01:16 - so within my project folder i now have
01:18 - this wav audio file called
01:20 - level up with that out of the way we can
01:22 - begin our first step is to include
01:24 - this import at the top import
01:27 - javax.sound.sampled
01:28 - and we will import everything related to
01:30 - this package
01:32 - our next step is to create a file file
01:34 - file
01:35 - equals new file parentheses semicolon
01:39 - within the constructor of my file i'm
01:41 - going to list
01:42 - my file name and or the file path
01:45 - since my wav file is within my projects
01:48 - folder i only have to list the file name
01:50 - and the name of my wav file is level
01:53 - underscore
01:54 - up dot wave so be sure to include the
01:57 - extension at the m2 if you have one
01:59 - so i'm going to include some imports as
02:01 - we go along
02:03 - our next step is to create an audio
02:05 - input stream
02:06 - audio input stream
02:09 - i will call this audio stream for short
02:13 - equals audio system
02:17 - dot get audio input stream
02:22 - and place your file as an argument to
02:25 - this method now we will either need to
02:27 - surround this with a try and catch block
02:29 - or add a throws declaration
02:31 - just to make this more readable i'm
02:33 - going to add a throws declaration
02:37 - we also need to create a clip object
02:39 - clip
02:40 - clip equals audio
02:44 - system dot get
02:48 - clip
02:52 - and then we need to open this clip by
02:54 - using the open method of our clip
02:56 - clip dot open and we are going to pass
03:00 - in
03:00 - our audio stream as an argument to the
03:03 - open method
03:04 - of our clip and also add a throws
03:07 - declaration or surround with a try and
03:09 - catch block
03:11 - and we should be good now we are going
03:14 - to use the start
03:16 - method to begin playing this audio file
03:19 - so clip dot start
03:23 - and let's run this and nothing appears
03:26 - to be playing and our program terminated
03:29 - well what gives bro
03:30 - you're a liar hold on wait a second so
03:34 - with our audio clip it's actually
03:35 - attempting to play in a background
03:37 - thread
03:38 - and our program does not wait around for
03:40 - background threads
03:41 - so as soon as it runs out of code it's
03:43 - going to terminate which you can see
03:44 - here
03:45 - what we need to do is somehow keep our
03:47 - program open
03:48 - and running so it doesn't terminate
03:50 - there's one of a few ways we can do this
03:52 - one we could create some sort of gui
03:54 - system and as long as we don't hit that
03:56 - x in the corner at the top it will
03:58 - continue to play
03:59 - our clip or we could create a scanner
04:02 - that will wait around
04:03 - for some user input so the program will
04:05 - not terminate
04:06 - just for simplicity let's create a
04:08 - scanner
04:10 - scanner scanner equals new scanner
04:12 - system.in
04:13 - be sure to include this import at the
04:15 - top as well
04:16 - so i'm going to wait around for some
04:18 - user input so this should
04:20 - pause our program while our program is
04:22 - waiting for us to type in something
04:24 - and let's save the response that we have
04:27 - into a variable called
04:29 - response string response
04:32 - equals scanner.next
04:37 - since our program is going to wait
04:39 - around for some user input it's not
04:41 - going to terminate
04:42 - let's try it
04:50 - since we now have a clip created it's
04:52 - just a matter of calling the appropriate
04:54 - method for this clip we have start we
04:56 - have stop
04:57 - we can reset we can also quit too so
05:00 - let's create a sort of audio player
05:02 - within our console window
05:04 - so i'm going to move our start method
05:07 - and move it near the bottom
05:08 - what we'll do is create a while loop
05:10 - that will ask for
05:12 - a response and depending on the response
05:14 - we can play
05:15 - we can stop we can reset or we can quit
05:18 - so let's create a while loop
05:19 - while our response
05:24 - equals
05:27 - let's say uppercase q but we should use
05:30 - the not logical operator while our
05:33 - response
05:34 - does not equal q and for good measure we
05:37 - should use the two uppercase method to
05:40 - make all responses
05:41 - uppercase because somebody might type in
05:43 - something that's lowercase
05:45 - response equals response
05:50 - dot 2 uppercase
05:55 - all right and then let's create a prompt
05:58 - let's say p equals
06:02 - play and s
06:06 - equals stop r
06:09 - equals reset and q
06:13 - equals quit
06:20 - then within a maybe print statement
06:24 - enter your choice
06:29 - and then we will accept a response
06:34 - actually we should move all this within
06:35 - the while loop
06:39 - and we are going to declare our string
06:41 - outside of the while loop
06:44 - string response equals and we'll just
06:46 - set this to
06:48 - a blank set of quotes
06:52 - response equals scanner.next response
06:54 - equals response
06:55 - to uppercase and now our next step
06:59 - is that we should create a switch
07:03 - switch we will examine our response and
07:06 - look for a matching case
07:08 - our first case will be p for play
07:12 - case p
07:15 - what are we gonna do we should use
07:19 - the start method of our clip
07:23 - and we will break
07:27 - all right and then we should also have a
07:28 - default as well default
07:32 - system.out.printline
07:35 - not a valid response
07:39 - so let's test the p command that we have
07:45 - and to your choice and you have noticed
07:47 - that our audio clip is not actually
07:49 - playing yet until i type
07:51 - p or lowercase p and hit enter
07:57 - and you can click this red button to
07:58 - terminate as well
08:00 - so let's create a stop method a case for
08:04 - stopping
08:06 - case capital s clip
08:12 - dot stop
08:16 - and then break let's test this too
08:20 - so i'm going to press p to play hit
08:24 - enter
08:25 - and then s to stop
08:29 - we can also reset as well let's make a
08:31 - case for that
08:32 - case
08:35 - r for reset this one's a little
08:38 - different
08:40 - clip dot set
08:43 - microsecond position so we can set our
08:46 - clip at a certain position
08:48 - at a amount of milliseconds if we want
08:51 - to reset this clip we will set this to
08:53 - zero that is the beginning
08:55 - and then break and now we should be able
08:59 - to reset our audio clip
09:01 - so i'm going to press p to play
09:04 - and then i'm just going to reset a bunch
09:06 - of times
09:11 - and then stop and lastly we should
09:14 - create
09:15 - a case to quit and exit out of our while
09:18 - loop
09:21 - we should probably close our clip as
09:22 - well case
09:24 - q and to close a clip
09:28 - clip dot close
09:33 - and break and we should be able to quit
09:38 - i'm going to press p to play
09:41 - and q to quit actually let's add a print
09:45 - line too just to verify that we actually
09:47 - did escape the while loop
09:49 - bye all right let's run this one last
09:53 - time
09:56 - so we can play
09:59 - we can stop we can reset we can play
10:04 - again
10:06 - and we can quit bye
10:10 - all right everybody so that's one way in
10:12 - which you can play
10:13 - an audio clip in java if you would like
10:15 - a copy of all this code i will post all
10:17 - of this
10:18 - in the comments down below feel free to
10:20 - do me a favor and smash that like button
10:22 - drop a comment down below and subscribe
10:24 - if you'd like to become a fellow bro