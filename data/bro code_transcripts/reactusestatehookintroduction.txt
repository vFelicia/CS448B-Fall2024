00:00 - hey what's going on everybody in today's
00:01 - video I'm going to explain the usate
00:03 - react hook and near the end of this
00:05 - video we're going to create a reactive
00:07 - counter program so sit back relax and
00:10 - enjoy the show I haven't explained what
00:12 - react hooks are yet a react Hook is a
00:15 - special function that allows functional
00:17 - components to use react features without
00:19 - writing class components this was a
00:21 - change made in react version 16.8
00:24 - basically we no longer need to write
00:26 - class components we can write function
00:28 - based components that use rea hooks to
00:30 - use react features there are many react
00:33 - hooks if a function begins with use it's
00:36 - probably a react hook use State use
00:38 - effect use context use reducer use
00:40 - callback and more use state is the most
00:42 - widely used use state is a react hook
00:45 - that allows the creation of a stateful
00:47 - variable and a Setter function to update
00:50 - its value in the virtual Dom basically
00:53 - by using the UST State hook we can
00:55 - create not just a variable but a
00:57 - stateful variable when you update this
00:59 - variable that change will be reflected
01:01 - in the virtual Dom normal variables
01:03 - don't when you use the UST State hook
01:06 - you're given a variable and a Setter
01:07 - function specifically for that variable
01:10 - so what we'll do in this example is
01:11 - create a new component going to our
01:13 - source folder we're going to create a
01:15 - new file we'll name this component my
01:19 - component we use react hooks in function
01:22 - based components so make sure you're not
01:24 - writing a class
01:26 - component with this component we will
01:29 - export it export default my component
01:34 - then be sure to import this because I'm
01:35 - probably going to forget if we don't do
01:37 - it now so we will import my
01:41 - component from its location
01:45 - do/ my component and this is a jsx file
01:50 - let's return one my
01:54 - component and we are ready to begin in
01:57 - order to use a react hook we need to
01:59 - import it it at the top of this
02:01 - component we will import the react
02:04 - Library however we don't need the entire
02:07 - react Library we can use object
02:09 - destructuring to extract individual
02:12 - variables or functions I would just like
02:14 - the UST State function we don't need the
02:17 - entire react library from its location
02:21 - react we now have access to this use
02:24 - State function using the use State
02:26 - function we'll create a stateful
02:28 - variable and a set function to update
02:31 - that variable so let's declare const
02:34 - we're going to use a set of straight
02:35 - brackets for array
02:37 - destructuring equals use State function
02:43 - the use State function returns an array
02:45 - with two elements a variable and a
02:48 - Setter function we're going to use array
02:50 - destructuring to destructure these two
02:52 - elements we'll create a stateful
02:54 - variable for name then we're given a
02:57 - Setter function specifically for this
02:59 - variable a common naming convention is
03:01 - to typee set then the variable name with
03:04 - camel case naming convention and that's
03:07 - it if we ever need to change the value
03:09 - of the stateful variable we have to do
03:11 - so with this Setter it's a function at
03:14 - the bottom we're going to
03:16 - return a
03:20 - development within this development
03:22 - we'll create a paragraph element and a
03:25 - button we'll begin with a paragraph
03:27 - element that has text of name
03:30 - and I'm going to zoom in a little bit I
03:32 - will insert some JavaScript using curly
03:35 - braces let's display our name following
03:38 - our paragraph element let's include a
03:41 - button the button will have an onclick
03:44 - attribute equal to a JavaScript function
03:47 - so we need a set of curly braces to
03:49 - embed that let's create a function to
03:53 - update name for the text of the button
03:57 - let's say set name
04:00 - name all right now we just need to
04:02 - declare this function I'll use an arrow
04:05 - function const update name equals Arrow
04:12 - function so what would we like to do
04:15 - okay let's attempt to set our name equal
04:18 - to type your name or some other name I'm
04:21 - just going to type in
04:23 - SpongeBob if I click on this button we
04:26 - should update our name right well that
04:29 - doesn't appear
04:30 - work so if I were to
04:33 - console.log my name
04:36 - variable then attempt to update it using
04:39 - this button if I were to go to my
04:42 - console hold on I'm going to use let so
04:45 - we can update it if I attempt to change
04:48 - this name of the
04:49 - variable it does so within our
04:52 - console but it doesn't update in react
04:55 - the virtual Dom is still displaying the
04:57 - previous state so if I would like to
04:59 - display display any changes I will want
05:01 - to use that Setter instead of setting
05:03 - our name equal to a new value I'm going
05:06 - to change this back to be a
05:08 - constant we will use the setter function
05:11 - and pass in a new value so let me type
05:14 - in a new
05:16 - value and that should work we have
05:18 - updated our name when you use the setter
05:21 - function of a stateful variable it will
05:23 - trigger a rerender of the virtual Dom
05:26 - normal variables don't that's why the US
05:29 - state Hook is useful we can create a
05:31 - stateful variable when the stateful
05:33 - variable gets updated with its Setter
05:35 - function it triggers a render of the
05:37 - virtual Dom with the UST State function
05:40 - you can pass in an initial state
05:43 - currently we're not passing in anything
05:44 - for the initial State I will set this to
05:46 - be
05:47 - guested when I refresh everything and
05:50 - start over the initial state is guessed
05:53 - whatever value you pass in to the UST
05:55 - State hook then I can set my name again
05:57 - to something else now we're going going
05:59 - to create an age variable and increment
06:02 - it const we're going to use array to
06:05 - structuring we need a stateful variable
06:08 - like age and a Setter function for that
06:11 - age set age equals use
06:17 - state if you would like an initial value
06:19 - you can place that within the UST State
06:21 - function I'll set the initial value of
06:23 - age to be
06:26 - zero I'm going to copy this paragraph
06:28 - and this button
06:31 - change name to be
06:34 - age we'll create a function to increment
06:39 - age the text on the button will
06:42 - be increment
06:44 - age now we just need this
06:47 - function
06:49 - const increment age I'll use an arrow
06:55 - function to increment our age we will
06:58 - use the set age
07:01 - function let's take our age +
07:05 - one so our initial value for our age is
07:09 - zero but every time I click on the
07:10 - button we will update the value of that
07:13 - variable so every time I click the
07:15 - button we're increasing our age by
07:18 - one or even a different number this time
07:21 - I'll increase our age by two on each
07:22 - button click so we start at zero then
07:25 - we'll increment by two 2 4 6 8 10
07:29 - now this time we'll create a Boolean
07:31 - variable and toggle it between being
07:34 - true and false using the usate hook we
07:37 - will create const is
07:41 - employed the setter function will be set
07:45 - is
07:47 - employed equals the use State
07:51 - hook I would like an initial value of
07:55 - false let's create a paragraph element
07:58 - and a button
08:01 - I will set the text of the paragraph to
08:03 - be is
08:06 - employed instead of displaying a Boolean
08:09 - directly let's use the tary operator for
08:12 - conditional rendering is employed if
08:15 - that is true we'll display yes otherwise
08:20 - no when we click on the button let's
08:22 - create a function
08:24 - to
08:25 - toggle toggle employed
08:30 - status that's kind of a Long Function
08:32 - name all right let's create a function
08:35 - const toggle employed status equals an
08:40 - arrow
08:41 - function we will use the setter function
08:44 - set is employed pass in a new value
08:48 - let's switch this value from being false
08:50 - to true and true to false every time we
08:51 - click the button since this is a Boolean
08:54 - we can use the not logical operator to
08:56 - reverse it so let's say not is
09:01 - employed and let's see if this works is
09:04 - employed no oh let's change the text on
09:07 - the button
09:08 - too toggle
09:12 - status there we go all right when we
09:15 - click on the button we can toggle this
09:17 - Boolean from being true to false and
09:19 - false to true and this should happen
09:21 - every time I click the
09:23 - button as a project what we're going to
09:26 - do now is create a counter program so
09:28 - let's close out of my
09:30 - component we'll create a new component
09:33 - for a counter component counter.
09:37 - jsx this will be a function base
09:40 - component
09:42 - function
09:44 - counter then be sure to export it export
09:48 - default
09:51 - counter going back to our app component
09:53 - we will import our counter component
09:56 - from its
09:58 - location counter. jsx then we will
10:01 - include one counter component and that's
10:05 - it in order for us to use the use State
10:07 - hook we have to import it from the react
10:10 - Library import react we'll use object
10:13 - destructuring just to get the US state
10:16 - hook and nothing else from its location
10:20 - of
10:21 - react all we need is one variable a
10:24 - counter let's say const we'll use array
10:28 - destructuring create a stateful variable
10:31 - of count and a Setter function for that
10:33 - count set count equals the use State
10:39 - hook would we like an initial value for
10:42 - count we would like the initial value to
10:44 - be
10:45 - zero we'll create a few functions to
10:47 - increment decrement and reset the
10:50 - counter const
10:53 - increment equals I'll use an arrow
10:57 - function to up update the count to
11:00 - increment it we will use the set count
11:03 - function the value we pass in is Count +
11:08 - one then let's do this for
11:12 - decrement const decrement count minus
11:17 - one then
11:20 - reset const reset for set count we'll
11:25 - pass in zero to reset the
11:27 - count now we're going to return some
11:31 - elements we'll also style this with CSS
11:34 - let's begin with the div
11:36 - element I'm going scroll down a little
11:42 - bit my div element will have a class
11:45 - name equal to
11:48 - counter-
11:51 - container I will create a paragraph
11:53 - element with a class
11:56 - name equal to count
11:59 - display to display the
12:01 - number for the text of the paragraph I
12:04 - will insert some JavaScript and display
12:06 - our count
12:09 - variable we'll create three buttons for
12:12 - the first we'll create a button element
12:14 - this button will have a class
12:17 - name of
12:19 - counter-
12:21 - button the onclick attribute will be set
12:25 - equal to a JavaScript function this
12:28 - first button will be the decrement
12:29 - button for the unclick attribute we will
12:32 - set this equal to the decrement function
12:35 - for the text on the button we'll say
12:40 - decrement and there's our first button
12:43 - so let's copy this button paste it the
12:47 - second button will be for reset the text
12:50 - will be
12:52 - reset then the third button will be
12:55 - increment onclick will be the increment
12:58 - function
12:59 - the text will be
13:01 - increment all right and that's all that
13:04 - we need let's check it for functionality
13:05 - to be sure that everything works we can
13:08 - increment this number we can decrement
13:11 - it and we can reset
13:13 - it so for the icing on the cake let's
13:16 - style it with
13:18 - CSS going to our index CSS stylesheet
13:22 - we'll apply the following CSS let's
13:24 - select our counter
13:27 - container do counter container I will
13:31 - text align
13:35 - Center change the font
13:38 - family I will pick a s serif font of
13:41 - Ariel with a backup of s
13:45 - serif next we'll select the count
13:49 - display select the class of count
13:51 - display that would be this number will
13:54 - increase the font size to something
13:56 - massive like 10 em RM works too okay
14:00 - that's a little too big but I am zoomed
14:02 - in actually you know what that's perfect
14:05 - I will set the margin top to be zero to
14:09 - close this Gap and I will set the margin
14:13 - on the bottom to be 50
14:16 - pixels then let's work on the counter
14:18 - buttons
14:20 - next select the class of counter button
14:24 - I will set the width to be 150 pixels
14:31 - the height to be 50
14:35 - pixels the font
14:37 - size to be 1.5
14:42 - em I will set the font weight to be
14:47 - bold set the margin to
14:49 - be 0 pixels by 5
14:53 - pixels this would be for the left and
14:55 - right of the
14:56 - buttons change the background
15:00 - color pick a color that you
15:03 - like I'm going to use hsl values
15:08 - though that's pretty good I will set the
15:12 - color of the font to be
15:15 - white remove the
15:17 - border border
15:20 - none set the Border radius to around the
15:24 - corners five
15:27 - pixels
15:29 - and change our cursor to be a pointer if
15:32 - we hover over the button when we hover
15:35 - over the button I'm going to change the
15:36 - background color of the button so with
15:39 - the counter button class with the
15:41 - counter button class we will select the
15:43 - hover sudo class we'll take our
15:46 - background color decrease the lightness
15:49 - to be 10%
15:51 - darker there we
15:52 - are and that is all the CSS styling that
15:55 - we need we have our counter program we
15:57 - can increment the counter we can
15:59 - decrement it and we can reset
16:02 - it all right everybody so that is the
16:05 - use State react hook it allows the
16:07 - creation of a stateful variable and a
16:10 - Setter function to update its value in
16:12 - the virtual Dom when you include the UST
16:15 - State hook you're given an array of two
16:17 - elements we use array destructuring to
16:20 - create a stateful variable and a Setter
16:22 - function to update that variable and
16:24 - well everybody that is the UST State
16:26 - hook in react