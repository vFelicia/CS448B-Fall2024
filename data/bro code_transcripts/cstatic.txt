00:00 - oh yeah let's do this all right
00:03 - the static modifier the static modifier
00:05 - is used to declare a
00:07 - static member one which belongs to the
00:09 - class itself
00:10 - rather than any one specific object i
00:13 - have a class named car cars have a field
00:16 - named model
00:17 - and a constructor to assign a model when
00:19 - we instantiate a car object
00:21 - and i have two car objects car one and
00:23 - car two car one is a mustang
00:25 - car two is a corvette here's the
00:27 - situation let's say that we're going to
00:29 - have a race but we need to keep track of
00:31 - how many cars are instantiated that are
00:34 - entering our race
00:35 - one way in which we can do that is to
00:37 - create a static field to keep track of
00:39 - how many cars are created
00:41 - so let me show you what this looks like
00:42 - with a non-static field first
00:45 - so let's declare an integer variable
00:47 - named
00:48 - number of cars to keep track of how many
00:50 - cars we create
00:52 - so i will declare this but not yet
00:55 - assign it
00:55 - and within my constructor i will
00:57 - increment number of cars by one
00:59 - remember that with constructors you're
01:01 - not limited to
01:02 - only assigning values to fields you can
01:05 - do like any sort of code that you want
01:07 - remember that it's just another kind of
01:08 - method okay so every time we instantiate
01:11 - a car object we will increment
01:13 - number of cars by one and then let's
01:16 - display a number of cars
01:18 - so we need to access this in a
01:19 - non-static way by typing
01:21 - the name of a car object like car one
01:23 - dot followed by the name of the field
01:25 - but it looks like we need to make this
01:27 - public
01:29 - public and number of cars car one
01:32 - dot number of cars let's do the same
01:34 - thing for
01:35 - car two car two dot number of cars
01:38 - now you would think that the number of
01:40 - cars would be two
01:41 - right and that's where you're wrong
01:43 - number of cars
01:44 - for both car one and car two are both
01:47 - one
01:48 - because each car object has their own
01:51 - copy of the number of cars field and
01:54 - within the constructor when we
01:55 - increment each copy of number of cars
01:58 - well it's only ever going to be a
02:00 - maximum of one
02:01 - so one way in which we could fix that is
02:04 - to change
02:04 - this field to a static field after
02:07 - public
02:08 - type static public static int number of
02:11 - cars
02:12 - and we can no longer access this field
02:15 - in a non-static way
02:16 - by typing the name of an object followed
02:19 - by the name of the field
02:20 - we would have to access this field in a
02:23 - static way
02:24 - by typing the name of its class followed
02:26 - by the name of the field
02:28 - so type the name of the class car
02:30 - followed by you know dot
02:31 - then the name of the field so this field
02:34 - now belongs to the car class
02:36 - and no one object has complete ownership
02:39 - of it it's kind of like they're all
02:41 - sharing
02:41 - the same variable and let's try this
02:44 - again
02:44 - so the number of cars that we have
02:46 - created
02:47 - is two now just to test everything let's
02:50 - create a third car we have a third
02:52 - racer within our race so car 3 will be
02:55 - a what about a lambo and we now have
02:59 - created
02:59 - three cars so again by preceding this
03:02 - field with the static modifier
03:04 - the class now owns it we can also apply
03:07 - the static modifier to a method as well
03:10 - public static and we'll create a method
03:13 - to begin our race let's call this start
03:16 - race
03:18 - so we don't want each object to be able
03:21 - to start the race on their own terms
03:23 - right
03:23 - so it would be better if the car class
03:25 - itself has a start race method
03:28 - so then if we would like to begin our
03:30 - race we can access it in a static way
03:32 - the race has begun
03:36 - then if i need to invoke this method i
03:39 - type
03:40 - the name of the class car dot
03:43 - the name of the static method start race
03:46 - then a set of parenthesis to invoke it
03:48 - and this should now begin our race
03:51 - the race has begun and then you can also
03:54 - apply the static modifier to a class
03:56 - itself but then you can't instantiate
03:58 - objects from this class you can see that
04:00 - we're getting errors
04:01 - cannot declare a variable of static type
04:04 - cart
04:04 - so that's kind of like the deal with the
04:06 - math class
04:07 - in order to use a method of the math
04:09 - class we wouldn't create like a map
04:11 - object right like
04:12 - math math1 equals new math right
04:15 - and then we wouldn't type math1 dot
04:18 - round to round a number
04:19 - it's a lot easier just to use directly
04:22 - the math class and type
04:25 - math.round so that's kind of the idea
04:27 - behind
04:28 - a static class you can't create objects
04:30 - from a static
04:31 - class and we kind of learned about that
04:33 - in the video on classes
04:36 - well in conclusion the static modifier
04:38 - can be applied to a field
04:40 - a method or a class itself anything that
04:43 - is declared static
04:45 - now belongs to the class and no one
04:47 - object has
04:48 - ownership of it so that is the static
04:51 - modifier
04:52 - if this video helped you out help me out
04:54 - by smashing that like button drop
04:56 - a random comment down below and well
04:58 - yeah that's the static modifier
04:59 - in c-sharp