00:00 - hey what's going on everybody it's your
00:02 - bro hope you're doing well and in this
00:03 - video i'm going to show you all how list
00:05 - comprehensions work in python so sit
00:07 - back
00:08 - relax and enjoy the show
00:12 - if you find this video helpful please
00:14 - remember to like
00:15 - comment and subscribe your support will
00:18 - help keep this channel running
00:19 - all right everybody so list
00:21 - comprehensions a list comprehension
00:23 - is a way to create a new list with less
00:26 - syntax
00:27 - you can also use a list comprehension to
00:29 - mimic certain lambda functions
00:31 - such as in the previous videos where we
00:33 - use the map and the filter functions
00:35 - and not only that but a list
00:37 - comprehension is easier to read than a
00:39 - lambda function
00:40 - but there is a formula that we're going
00:42 - to follow when we create our list
00:44 - within our list we're going to write an
00:46 - expression for
00:47 - item in iterable now let me give you an
00:50 - example of where a list comprehension
00:52 - would be useful
00:53 - let's take this program that will create
00:55 - a list of all the numbers
00:57 - 1 through 10 squared so if i were to
01:00 - print this we'll get the numbers 1
01:01 - through 10
01:02 - whatever their square is right so we
01:04 - have 1 through
01:05 - 10 and the square of 10 is 100 so we
01:08 - wrote this program
01:09 - in three lines of code we're creating an
01:11 - empty list we're creating a for loop
01:13 - and then we're writing an expression for
01:15 - what we want each loop iteration to do
01:17 - now let's write the same program but
01:19 - used a list comprehension
01:20 - and we can write the same program with
01:23 - less syntax
01:24 - so i would write something like this and
01:25 - we're going to follow this formula
01:28 - so our list is going to be named
01:31 - squares equals then within a set of
01:34 - straight brackets
01:35 - we're going to write our expression
01:37 - which is this portion i times i
01:41 - for item so that would be for i
01:44 - in our iterable that would be range
01:47 - one through eleven because remember
01:50 - eleven's exclusive
01:52 - and then let's print our squares print
01:56 - squares and there you go
02:00 - we made the exact same program using a
02:02 - list comprehension
02:03 - so basically speaking you just follow
02:06 - this formula
02:06 - you set your list equal to your
02:09 - expression
02:10 - and our expression for this example is i
02:12 - times i
02:13 - for item for i in
02:16 - your iterable in range 1 through 11.
02:20 - so this took three lines of code well if
02:22 - you exclude us
02:23 - printing our list and this program took
02:26 - one line of code now we can also use a
02:29 - list comprehension
02:30 - to mimic certain lambda functions i
02:32 - wrote a program where we will be
02:34 - filtering
02:35 - a list of student grades let's pretend
02:37 - that all of these students took some
02:38 - sort of exam
02:39 - so we have one student that received a
02:41 - 100 90 80 70 60 50 40 30
02:45 - and then one student got a zero because
02:47 - they didn't show up so what i would like
02:48 - to do is to filter
02:50 - all of these student grades into a list
02:52 - that only contains
02:54 - students that passed and the criteria
02:56 - for a passing grade will be
02:58 - a 60 or above so i would like to filter
03:01 - all passing students and if i was to
03:03 - write this program using the filter
03:05 - function i would probably write
03:06 - something like this
03:07 - so i need a function and then my list
03:09 - that i'm working with
03:11 - lambda x colon x is greater than or
03:14 - equal to 60
03:15 - will filter all of the results and then
03:17 - convert it to a list named past students
03:20 - so the result will look something like
03:21 - this i have five student grades in here
03:24 - with 100 90 80 70 and 60.
03:27 - now let's write the same program using a
03:29 - list comprehension
03:30 - now there's just one portion to this
03:32 - formula for list comprehension that
03:34 - we're going to add
03:35 - at the end we're going to add if
03:37 - conditional we can check
03:38 - some sort of condition after each
03:40 - iteration so let's write the same
03:42 - program using a list comprehension
03:44 - following
03:45 - this new updated formula that we have so
03:47 - we need our list
03:49 - which will be named past students
03:52 - equals first comes our expression and
03:55 - it's just i for this example
03:57 - for item i in our
04:00 - interval of students and then if
04:04 - we can check our conditional if i is
04:07 - greater than or equal to 60 and
04:10 - this will have the same effect as our
04:12 - previous program but instead
04:14 - it uses a list comprehension now if your
04:17 - program
04:17 - has multiple output if you need an else
04:20 - statement within your conditional
04:21 - you're actually going to move this
04:22 - portion of the if conditional within our
04:25 - formula to right after the expression
04:27 - so let's write an if else statement here
04:31 - so let's say that instead of just
04:33 - excluding any student that didn't pass
04:35 - we'll replace their grade with the word
04:37 - failed and we can do that using an if
04:40 - else statement
04:40 - so let's do this again i'm going to copy
04:42 - what we have here
04:44 - paste it and we'll move our conditional
04:46 - from the end
04:48 - to just after the expression portion i
04:52 - if i is greater than or equal to 60 and
04:55 - you can see here that we need to add
04:56 - an else statement else will return
05:00 - the word failed
05:04 - so we're replacing each instance of
05:07 - a failing grade with the word failed
05:09 - instead so if your condition
05:11 - returns whatever i is you can just add
05:13 - that to the end
05:14 - if you need an if else statement you're
05:16 - going to add it right after the
05:17 - expression
05:18 - so everybody in conclusion a list
05:20 - comprehension is a way to create a
05:23 - new list with less syntax you can even
05:25 - mimic
05:26 - certain lambda functions which we did
05:28 - with the filter function
05:29 - and it has the added benefit of being
05:31 - easier to read than a lambda function
05:34 - so you just follow one of these formulas
05:36 - depending on what you're trying to do
05:37 - so you need at least list equals your
05:40 - expression
05:41 - for item and your interval if you have a
05:43 - condition that you want to check
05:44 - you just add that to the end of your
05:46 - list comprehension if you have an
05:48 - if else statement then you'll add that
05:50 - to right after the expression
05:52 - so you just follow one of these formulas
05:54 - depending on how you want to write your
05:55 - program
05:56 - so that is a list comprehension if you
05:58 - would like a copy of this code i will
06:00 - post all of this to the comments section
06:02 - down below
06:03 - and well yeah that's how list
06:04 - comprehensions work in python