00:00 - hey it's me again today I got to explain
00:02 - the map method in JavaScript the map
00:04 - method accepts a callback and applies
00:07 - that function to each element of an
00:09 - array it's very similar to the for each
00:11 - method however it returns a new array
00:14 - that's a key difference for example
00:17 - let's create an array of constants I'm
00:19 - picking constants just to demonstrate
00:21 - that we're not changing any elements in
00:22 - this array we have const numbers I'll
00:26 - select the numbers 1 through 5 to keep
00:28 - it simple I will create a function to
00:31 - square each
00:32 - number function
00:35 - Square we have one parameter we have an
00:38 - element all I'm going to do is return
00:43 - math.pow this will raise a base to a
00:46 - given power we are raising our element
00:49 - to the power of two then returning it
00:52 - we're going to take our array of numbers
00:54 - use the built-in map method then pass in
00:58 - our function as a call back the map
01:00 - method will return a new array we will
01:03 - create a new array to store the values
01:04 - that are returned so I will create
01:08 - const
01:10 - squares equals numbers. map and then
01:14 - let's display our squares I'll use
01:17 - console.log for now
01:19 - console.log R squares here are all the
01:23 - numbers squared 1 4 9 16 25 let's create
01:27 - a function to cube these numbers now
01:30 - we'll copy and paste our Square function
01:33 - but change it to cube we'll raise our
01:36 - element to the power of
01:38 - three const cubes equals take our
01:43 - original array numbers dot use the map
01:46 - method pass in a call back to the
01:48 - function we would like to use
01:50 - Cube then we will console.log rray of
01:54 - cubes and we have some new numbers 1 8
01:58 - 27 64 125 the map method is very similar
02:02 - to four each but after completion the
02:05 - map method returns a new array we still
02:08 - have our original numbers whereas in
02:10 - four each will'll change them that's a
02:12 - key difference let's go over a new
02:14 - example we'll create an array of
02:17 - students const students
02:21 - equals for my first student I will pick
02:25 - SpongeBob then
02:28 - Patrick
02:31 - Squidward Sandy that's good enough I
02:34 - will create a function to make all of
02:36 - these strings
02:38 - uppercase
02:40 - function
02:42 - uppercase there is a single element
02:45 - remember the element is going to be
02:47 - provided for us with the map method
02:49 - element index and array but we only need
02:51 - element in this case I will return our
02:55 - element dot to uppercase method
03:00 - and that's it we'll create a new
03:04 - array students what can we name this uh
03:08 - students upper I suppose we will take
03:12 - our array of students use the Bap method
03:16 - pass in the function we would like to
03:18 - apply as a
03:19 - callback then I will
03:23 - console.log students
03:26 - upper within my array all of the
03:29 - students names are all uppercase let's
03:31 - create a function for
03:34 - lowercase function lowercase to
03:38 - lowercase I will create a new array
03:42 - const
03:43 - students lower equals the name of the
03:47 - array
03:48 - students map pass in our function as a
03:51 - call
03:51 - back then display the array of students
03:55 - lower now all of the names are now
03:57 - lowercase all right third example
04:00 - this one is more practical we'll create
04:03 - an array of dates const dates
04:07 - equals certain regions will order their
04:10 - dates differently for example you might
04:12 - have the year followed by a month then a
04:16 - day we're going to rearrange the order
04:19 - of these dates using the map method so
04:22 - come up with a few dates I picked 2024
04:25 - January 10th
04:28 - 2025 February
04:32 - 20th
04:34 - 2026 March 30th feel free to rearrange
04:39 - these however you want I will create a
04:41 - function to
04:43 - format
04:46 - dates we have one parameter a single
04:49 - element within this function I will
04:51 - create a temporary array named Parts
04:55 - we're going to split each state into
04:57 - parts and store it within an array
04:59 - within this function const Parts equals
05:04 - element. split we are going to split
05:08 - each element but where we are going to
05:11 - split at each dash for example with my
05:14 - first element we'll split this date into
05:17 - 2024 that will be the first element 1
05:20 - and 10 then we'll reformat these parts I
05:23 - will return a template string so I'm
05:27 - going to need some
05:28 - placeholders
05:30 - so dollar sign curly braces let's take
05:33 - our array of parts at index of one that
05:38 - will be the month I live in the United
05:40 - States we arrange our dates with month
05:43 - then day then year I will place my month
05:47 - first forward slash let's include
05:50 - another
05:51 - placeholder Parts at index of two that
05:55 - will be the day of the month
05:58 - slash
06:00 - Parts at
06:03 - index0 that will be the year we will
06:06 - create a new
06:07 - array
06:09 - const
06:11 - formatted dates equals take our original
06:15 - array dates use the map
06:18 - method then pass the function name as a
06:21 - callback then after I will
06:24 - console.log our formatted
06:27 - dates and here they are for me the dates
06:30 - are now January 10th 2024 February 2nd
06:33 - 2025 March 30th 2026 feel free to
06:37 - arrange these however you like all right
06:40 - everybody that is the map method it's
06:42 - very similar to the for each method the
06:44 - math method accepts a callback and
06:46 - applies that function to each element of
06:48 - an array however it returns a new array
06:50 - when it's finished that's nice if you
06:52 - need to preserve the original array that
06:54 - the elements came from and well
06:56 - everybody that is the map method in
06:58 - JavaScript