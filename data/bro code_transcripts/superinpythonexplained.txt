00:00 - hey everybody so today I got to talk
00:02 - about the super function in Python super
00:05 - is a function it's used within a child
00:08 - class to call methods from a parent
00:10 - class the child class is the subass the
00:13 - parent class is the super class hence
00:16 - why this function is named the super
00:18 - function using the super function it
00:20 - allows you to extend the functionality
00:22 - of the inherited methods here's an
00:24 - example we'll create a few shape objects
00:27 - we'll need to set up the classes though
00:29 - we'll have class
00:31 - Circle for the time being I'll just
00:33 - write pass we'll fill it in later class
00:39 - square and
00:41 - class
00:45 - triangle for each of these classes in
00:47 - order to instantiate objects we'll need
00:49 - a Constructor we will Define our
00:51 - Constructor our init
00:54 - method when creating circles what sorts
00:57 - of attributes should a circle have let's
01:00 - say a color what's the color of the
01:03 - circle is it filled or not filled will
01:06 - be another attribute and a
01:09 - radius then let's assign
01:12 - these self. color equals the color that
01:16 - we receive
01:18 - self. filed equals
01:21 - filled self. radius equals
01:26 - radius let's do this with the square and
01:29 - triangle really I'll just copy our
01:31 - Constructor and paste it squares don't
01:34 - have a radius with a square the width
01:37 - and the height are the same let's
01:39 - replace radius with width we'll also
01:42 - keep the color and filled attributes
01:45 - self. width equals width now with
01:49 - triangles again let's copy our
01:51 - Constructor we'll need a width and a
01:56 - height self. height equals
02:00 - height so with programming we try not to
02:03 - repeat ourselves if we don't have to
02:05 - what do all of these classes have in
02:07 - common they all share the attributes of
02:10 - color and
02:13 - filled the ways in which they are
02:15 - different is that Circle has a radius
02:17 - attribute square has a width triangle
02:20 - has a width and a height if we have to
02:22 - make any changes to one of these
02:24 - attributes we would have to do so
02:26 - manually for example let's replace
02:28 - filled with isil
02:30 - now I need to look throughout my code
02:32 - for any instance of filled and replace
02:34 - it with is
02:36 - filled it's a lot of work and I might
02:38 - make a
02:40 - mistake such as here and here it's
02:43 - better to write your code once and try
02:45 - and reuse it so that's where inheritance
02:48 - and the super function can come in handy
02:49 - we're going to take the attributes of
02:51 - color and is filled and place it within
02:53 - app parent class these children classes
02:56 - will inherit those
02:58 - attributes so class what do they all
03:00 - have in common they're all shapes class
03:03 - shape and for now I'll write pass circle
03:07 - is going to inherit from its parent of
03:09 - shape that also applies with square and
03:13 - triangle we'll set up a Constructor for
03:16 - shape Define
03:20 - init we will pass in the color and is
03:27 - filled then we will assign these add
03:30 - attributes self. color equals
03:34 - color self. is filled equals is filled
03:41 - we don't need to manually assign these
03:43 - attributes within each of these
03:44 - Constructors for the
03:46 - children instead what we have to do is
03:49 - within the Constructor for each of these
03:50 - children classes we have to call the
03:53 - Constructor for the parent also known as
03:55 - the super class of shape so we will
03:59 - eliminate these two lines of
04:01 - code use the super
04:04 - function dot call The Constructor of the
04:07 - parent that is the dunder init method
04:11 - but we need to pass in the color that we
04:14 - receive and is filled this will be a
04:18 - Boolean and let's do this with the
04:21 - square
04:22 - class and the triangle
04:25 - class we still need radius for the
04:27 - circle width for the square width and
04:30 - height for the triangle we're going to
04:32 - call the super function to take care of
04:34 - whatever our attributes all these types
04:36 - of shapes have in common such as color
04:39 - and is filled now let's see if this
04:41 - works let's construct a few objects we
04:43 - will create a circle named
04:45 - Circle call The Constructor for Circle
04:48 - we have to pass in a color a Boolean if
04:51 - it's filled or not and a radius so for
04:54 - the color of the circle let's say
04:57 - red is filled let's say that is true and
05:01 - a radius of five you could even use
05:04 - keyword arguments for better readability
05:07 - although not necessary but for clarity
05:09 - let's say color equals
05:11 - red is filled equals
05:14 - true radius equals
05:18 - 5 let's see if this works I will print
05:22 - our circles
05:27 - color it is red
05:31 - print our colors is filled
05:34 - attribute the circle is filled that is
05:37 - true and the
05:39 - radius print
05:42 - circle. rius the radius of the circle is
05:46 - five we could even convert this to an F
05:49 - string I'll add a
05:54 - placeholder then add centimeters
05:59 - 5 cm let's construct a square
06:03 - object square equals
06:06 - Square we'll need a color is filled and
06:10 - a width I'll just copy what we have and
06:11 - make a few changes replace radius with
06:15 - width the color will be blue is filled
06:19 - will be false the width will be six we
06:22 - don't need a height because squares have
06:24 - an even width and height if we ever need
06:27 - the height we can assume it's the same
06:28 - as the width in this case six let's
06:31 - check out our square square do color
06:34 - Square do is filled Square do
06:39 - width our square is blue it's not filled
06:42 - in the width is 6
06:45 - cm let's create a triangle object
06:48 - triangle equals
06:51 - triangle pass in our
06:54 - arguments the color will be yellow is
06:58 - filled will be true
07:00 - the width will be seven and the height
07:04 - will be
07:05 - eight let's print our triangle's color
07:09 - is it filled its width and its
07:16 - height our triangle is yellow it's
07:19 - filled in the width is 7 cm the height
07:23 - is 8
07:24 - cm so that's how you can use the super
07:26 - function to reuse the Constructor of a
07:29 - parent CL class we don't need to
07:30 - manually assign each of these attributes
07:33 - within each of the children classes we
07:35 - can do that in just one place when we
07:37 - refer to Super imagine that we're
07:39 - replacing this with the parent class
07:42 - name such as
07:44 - shape that might be a good way to think
07:46 - of
07:47 - it use the Constructor of the parent
07:50 - class of shape and pass these arguments
07:54 - in what you could do as well is extend
07:56 - the functionality of a method So within
07:59 - our shape class let's create a method of
08:03 - describe we will describe the attributes
08:06 - of this shape we will
08:09 - print use an FST string when we want to
08:12 - describe our shape let's say it is at a
08:16 - placeholder self. color what is the
08:19 - color of this shape and is it fil or not
08:23 - and add a placeholder we'll use a tary
08:26 - operator print filled
08:30 - if self. is filled is true else we will
08:37 - print not
08:41 - filled each of these types of shapes
08:43 - circle square and triangle will have
08:46 - access to a describe
08:48 - method let's attempt to use
08:50 - it take our Circle use the describe
08:54 - method that's
08:55 - inherited it is red and filled Square
09:00 - it is blue and not filled
09:03 - triangle it is yellow and
09:06 - filled so then we also have method
09:09 - overwriting what if we create a similar
09:11 - method of describe within circle square
09:14 - and triangle let's do
09:17 - that
09:19 - Define a describe
09:23 - method within our Circle let's calculate
09:26 - the area what's the area of the circle
09:29 - I'll use an F string it is a
09:32 - circle with an area of then we'll
09:37 - calculate the area given the
09:40 - radius to calculate the area of a circle
09:42 - we can take Pi I'll just say 3.14 just
09:45 - to keep it simple times the radius
09:48 - squared self. rius time self.
09:53 - rius if I were to call the describe
09:55 - method will we use the parents version
09:58 - of describe
09:59 - or the
10:01 - child so let's take our Circle use the
10:05 - describe
10:07 - method the
10:09 - result it is a circle with an area of
10:12 - 78.5 I should really add cenim squar
10:15 - after
10:16 - that cm
10:19 - squared this is called method
10:21 - overwriting if a child shares a similar
10:24 - method with a parent you'll use the
10:27 - child's version and not the parents this
10:29 - is Method overwriting if you would like
10:32 - to extend the functionality of a method
10:34 - from a parent you can use the super
10:37 - function not only do I want to use the
10:39 - describe method of the child I would
10:41 - also like to use the describe method of
10:43 - the parent So within this function we
10:45 - will use the super function access the
10:49 - describe method of the
10:51 - parent what we're doing is extending the
10:54 - functionality of the describe
10:58 - method if it is a circle with an area of
11:01 - 78.5 cm squared the circle is red and
11:04 - it's
11:05 - filled or you can change up the
11:10 - order let's use the parent classes
11:12 - describe method and extend the
11:14 - functionality with our own print
11:17 - statement it is red and filled it is a
11:20 - circle with an area of 78.5 cm squared
11:23 - let's finish this with the square and
11:25 - triangle classes I'll copy what we have
11:28 - for the described method Within the
11:29 - circle
11:30 - class but we'll make a different
11:34 - calculation describe the square it is a
11:37 - square with an area of take self. width
11:42 - times self.
11:45 - width the height and the width are going
11:47 - to be the same if it's a
11:49 - square then describe our
11:56 - triangle it is a triangle
11:59 - with an area of width time height we
12:02 - have a height in this case divided two
12:05 - we've already described our Circle let's
12:07 - describe our
12:09 - Square it is a square with an area of 36
12:12 - CM squar it is blue and not filled let's
12:16 - describe our
12:18 - triangle it is a triangle with an area
12:20 - of 28.0 CM squar it is yellow and
12:24 - filled all right everybody that is the
12:26 - super function it's used in a child
12:29 - class to call the methods from a parent
12:31 - class also known as the super class it
12:34 - allows you to extend the functionality
12:36 - of the inherited methods within a child
12:39 - class you could use it within a
12:41 - Constructor to assign any attributes
12:44 - that all of its siblings have in common
12:46 - such as color or if that shape is filled
12:49 - when used within any other method you
12:51 - can extend the functionality of that
12:53 - method not only are we printing this
12:56 - message from the parent we're tacking on
12:58 - another PR statement before that and
13:01 - well everybody that is the super
13:03 - function in Python