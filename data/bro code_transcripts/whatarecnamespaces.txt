00:01 - hey everyone i have a quick video on
00:04 - namespaces a namespace provides a
00:06 - solution for preventing name conflicts
00:09 - especially in larger projects each
00:11 - entity needs a unique name a namespace
00:14 - allows for identically named entities as
00:17 - long as the namespaces are different now
00:19 - what the heck does that mean suppose we
00:21 - have variable x x equals zero
00:25 - each variable needs a unique name i
00:27 - couldn't create a second variable named
00:29 - x and give this a different value if i
00:31 - were to compile and run this program we
00:33 - would run into an error read declaration
00:36 - of int x
00:37 - so each entity needs unique name but if
00:40 - we use namespaces then two or more
00:42 - entities can share the same name to
00:44 - create a namespace
00:46 - let's do so outside of the main function
00:49 - i will type
00:50 - namespace
00:52 - then some name for the namespace let's
00:54 - say first then a set of parentheses
00:57 - i could create a different version of x
01:00 - i'll give this a different value like
01:02 - one
01:03 - well this would run and compile just
01:05 - fine
01:06 - you can have different versions of the
01:08 - same variable as long as they're within
01:10 - a different namespace just for fun let's
01:12 - create a second namespace namespace
01:15 - second
01:16 - x equals two this is also valid
01:19 - so just to demonstrate a few things i'm
01:21 - going to display what x is
01:24 - if i don't explicitly state what
01:26 - namespace we're using we will use the
01:28 - local version of an entity
01:31 - if i display x
01:32 - x would be zero
01:34 - if i would like the version of x that is
01:36 - found within the first namespace
01:38 - i would take that entity in this case x
01:42 - prefix the namespace let's say first
01:45 - then two colons
01:47 - the two colons is known as the scope
01:49 - resolution operator i'm referring to the
01:52 - version of x that is found within the
01:54 - first namespace
01:56 - and that version of x has a value of one
01:59 - if i need the value of x found within
02:02 - the second namespace i would precede
02:04 - that entity with the second namespace
02:07 - followed by the scope resolution
02:09 - operator
02:10 - so that version of x is two
02:13 - so entities can have the same name as
02:15 - long as they're within a different
02:16 - namespace now one line that you may see
02:19 - is
02:20 - using
02:21 - namespace
02:22 - then the name of a namespace let's say
02:24 - first if we have some entity without a
02:27 - prefix of the namespace it's assumed
02:29 - that we're using the entity found within
02:31 - that particular namespace
02:34 - so if i was to display x
02:36 - while we're using namespace first
02:40 - x would be one
02:41 - and i don't need to add that prefix but
02:44 - if i need xbond within the second
02:46 - namespace i would still need to prefix
02:48 - it with second
02:50 - x is two
02:52 - if i changed using name space to second
02:55 - it's implied we're using the second name
02:56 - space and i don't need that prefix
03:01 - two but i still would if i need x from
03:03 - the first name space
03:06 - one
03:07 - now there's this evil line called using
03:10 - it namespace std for standard now the
03:13 - reason that people include this line is
03:15 - to save a little bit of typing
03:17 - if we're using a namespace std we don't
03:20 - need to include that prefix when we
03:21 - declare strings or we display output
03:24 - with c out just for example
03:26 - like this would still compile and run
03:28 - however the standard namespace has
03:30 - hundreds of different entities let me
03:33 - show you
03:34 - standard
03:36 - there's a high likelihood of a naming
03:38 - conflict for example we have an entity
03:41 - named data
03:42 - one alternative is that we could say
03:45 - using
03:47 - standard
03:48 - output
03:49 - that will cut down on some of the
03:50 - repetitions or
03:52 - using
03:53 - standard
03:54 - string
03:58 - it's a safer alternative to using
04:00 - namespace standard
04:03 - in the future i'm not going to be using
04:04 - namespace standard because i would like
04:06 - to steer people away from that but just
04:09 - in case you see that line you know what
04:10 - it's there for
04:11 - so in conclusion a namespace provides a
04:14 - solution for preventing name conflicts
04:17 - each entity needs a unique name and a
04:20 - namespace allows for identically named
04:22 - entities as long as the namespaces are
04:24 - different so those are namespaces hey if
04:27 - you're enjoying this series let me know
04:29 - by smashing that like button leave a
04:31 - random comment down below and subscribe
04:33 - if you'd like to become a fellow bro