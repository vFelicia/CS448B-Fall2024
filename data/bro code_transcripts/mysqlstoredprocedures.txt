00:00 - why hello again it's me so today I gotta
00:03 - explain stored procedures a stored
00:05 - procedure is prepared SQL code that you
00:08 - can save it's great if there's a query
00:10 - that you write often for example I have
00:12 - this statement it's very verbose there's
00:15 - a lot we have to write if this statement
00:17 - is something I have to write often I
00:19 - could save it and reuse it later this
00:21 - statement will interjoin the
00:23 - transactions table and my customers
00:25 - table then display all customers that
00:27 - made a transaction this statement is
00:29 - very verbose if I have to write the
00:31 - statement often I could save it as a
00:34 - stored procedure I can refer to the
00:36 - nickname that I gave that snippet of
00:37 - code the name I gave this procedure was
00:40 - get customers
00:43 - then I need to call this stored
00:45 - procedure
00:47 - and that does the same thing and it's a
00:49 - lot less to write there's also a few
00:51 - other benefits which we'll discuss at
00:52 - the end of the video let's begin with
00:54 - something simple I would like to select
00:56 - all from my customers table to turn the
01:00 - statement or statements into a stored
01:03 - procedure I will type create
01:07 - procedure
01:08 - then a name for the statement or
01:10 - statements I will name this statement
01:13 - get customers
01:15 - add a set of parentheses
01:18 - type the keyword begin
01:20 - wherever your statement or statements
01:22 - end type end then for clarity I'm going
01:26 - to tab all of my statements between
01:28 - begin and end
01:29 - so we have a problem we're trying to
01:32 - create this procedure however MySQL is
01:34 - stopping at this semicolon here we end
01:37 - all statements with a semicolon rather
01:39 - than at the end our semicolon is known
01:41 - as a delimiter it's kind of like the
01:43 - period at the end of a sentence we're
01:45 - telling MySQL that our statement ends
01:47 - here but we need our statement to end
01:49 - here after the end keyword we can
01:52 - actually change the delimiter
01:53 - temporarily type delimiter before we
01:57 - create the procedure
01:58 - typically when people change their
02:00 - delimiter temporarily they'll either use
02:02 - two forward slashes or two dollar signs
02:05 - I'll stick with the dollar signs because
02:06 - I think that's cooler after we create
02:09 - our procedure let's change our delimiter
02:11 - back to the semicolon MySQL no longer
02:14 - recognizes our semicolon as the
02:16 - delimiter after the end keyword I will
02:19 - use our new delimiter to end this
02:21 - statement that should work now let's
02:24 - execute the statement
02:25 - we have created our procedure I'm going
02:27 - to refresh my navigator window
02:30 - underneath stored procedures we have our
02:32 - stored procedure of get customers
02:35 - to invoke the stored procedure type call
02:38 - the name of the procedure get customers
02:42 - add a set of parentheses then a
02:44 - semicolon
02:46 - that will execute whatever code you
02:48 - stored within your stored procedure to
02:50 - drop a stored procedure you would type
02:52 - drop
02:54 - procedure
02:56 - the name of the procedure
02:58 - get
02:59 - customers
03:01 - let's try another example
03:03 - this time we will send our procedure a
03:07 - piece of data within the set of
03:08 - parentheses a customer ID number such as
03:11 - 1 2 3 4 so on and so forth
03:14 - we will get a customer by their customer
03:17 - ID we will create a procedure
03:23 - I will name this procedure find
03:26 - customer
03:27 - add a set of parentheses to find a
03:30 - customer by their customer ID when we
03:33 - invoke the stored procedure within the
03:35 - set of parentheses we will need to place
03:37 - a customer ID but when we create the
03:40 - stored procedure we have to set up what
03:41 - is called a parameter we will type in
03:44 - then a nickname for that piece of data
03:47 - we're passing in a transaction ID I'll
03:50 - give this parameter a nickname of ID
03:52 - then we need the data type of what we're
03:54 - passing in we're passing in an integer
03:57 - so we have one parameter set up let's
04:00 - use that begin keyword that end keyword
04:04 - list our statement or statements between
04:06 - these two keywords I will select all
04:10 - from my customers table
04:14 - where my customer ID equals the ID that
04:19 - we pass in that nickname
04:22 - we need to change the delimiter because
04:24 - MySQL thinks we're trying to end our
04:26 - statement here but we need it to end
04:28 - after the end keyword so let's change
04:31 - the delimiter to double dollar signs
04:35 - then change it back
04:40 - all right we have created that stored
04:42 - procedure let's invoke it
04:44 - call
04:46 - find customer
04:49 - within the set of parentheses we need to
04:51 - pass in a customer ID number
04:53 - let's pass in one
04:56 - that would give us Fred fish
04:58 - two is Larry Lobster
05:01 - three is bubble Bass
05:04 - five is Pearl crabs when you invoke a
05:07 - stored procedure you can pass in some
05:08 - data depending on what you need exactly
05:11 - for your stored procedure let's drop
05:13 - this procedure then do one last example
05:16 - drop procedure find
05:19 - customer
05:21 - [Music]
05:23 - this time we will send two arguments two
05:25 - pieces of data a first name and a last
05:28 - name
05:29 - create
05:30 - procedure
05:33 - find customer
05:36 - within our set of parentheses the first
05:38 - piece of data we'll pass in will be a
05:41 - first name
05:43 - but first is already a keyword maybe F
05:46 - name meaning first name then the data
05:50 - type let's see for customers the data
05:53 - type of first and last names is
05:56 - varchar50
05:58 - varchar
06:00 - 50.
06:02 - for your next piece of data you would
06:04 - separate that with a comma
06:07 - in
06:08 - our nickname will be lname for last name
06:11 - data type is varchar
06:14 - 50.
06:16 - then I'm just going to put that on a new
06:18 - line for clarity
06:19 - type the begin keyword
06:22 - and
06:24 - write your statements between begin and
06:26 - end
06:27 - we will select all from our customers
06:30 - table
06:32 - where
06:33 - first name equals
06:36 - the name of the data that we pass in
06:39 - and
06:41 - last name equals
06:44 - the other piece of data the second piece
06:46 - the last name
06:49 - again we need to change the delimiter to
06:51 - create this procedure
06:54 - double dollar signs
06:57 - then change it back
07:00 - we have created our stored procedure
07:02 - let's invoke it
07:05 - call find customer
07:08 - within the set of parentheses we will
07:09 - list a first name and a last name
07:13 - Larry
07:15 - comma
07:16 - Lobster
07:18 - get Larry Lobster's information let's
07:21 - find him
07:22 - and there he is customer id2 first name
07:25 - Larry last name Lobster referral ID of
07:27 - one email is L Lobster gmail.com all
07:31 - right everybody that is a sword
07:32 - procedure it's prepared SQL code that
07:35 - you can save it's great if there's a
07:37 - query that you write often a few of the
07:39 - benefits is that it reduces Network
07:41 - traffic it increases performance and is
07:44 - more secure and administrator can grant
07:46 - permission to a user or an application
07:49 - to use a stored procedure one of the
07:51 - downsides though is that it increases
07:53 - memory usage of every connection and
07:55 - well everybody those are stored
07:57 - procedures in MySQL