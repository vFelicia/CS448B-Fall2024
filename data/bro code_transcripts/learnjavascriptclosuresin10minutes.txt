00:00 - hey what's going on everybody so in
00:01 - today's video I got to explain closures
00:03 - in JavaScript a closure is a function
00:06 - defined inside of another function the
00:09 - inner function has access to the
00:11 - variables and scope of the outer
00:13 - function by using closures they allow
00:16 - for private variables and state
00:18 - maintenance JS libraries and Frameworks
00:21 - such as react View and angular use
00:24 - closures all of the time you'll see
00:26 - closures fairly often with
00:27 - function-based components you have
00:29 - function inside of other functions let
00:32 - me give you a very basic example we'll
00:34 - have an outer function named
00:38 - outer within the outer function we'll
00:41 - have a function named
00:45 - inner the inner function has access to
00:48 - everything within the outer function
00:50 - this scope if I was to create a variable
00:53 - let message equal the word
00:58 - hello with this in my inner function I
01:01 - can use this message
01:03 - variable
01:05 - console.log my message now if I invoke
01:09 - the outer function nothing appears to
01:11 - happen when we call the outer function
01:14 - we're now within the scope but then what
01:17 - there's one of a few things we could do
01:19 - if I would like to call the inner
01:21 - function from within the outer function
01:24 - I would need to call it somewhere here
01:26 - let's call the inner function at the end
01:29 - there we go we have displayed the word
01:31 - hello everything within the outer
01:33 - function is part of a closure we have a
01:36 - function defined inside of a function
01:39 - this inner function has access to
01:40 - everything within that scope including
01:43 - this message variable one benefit using
01:45 - closures is that any variables are
01:48 - considered private outside of the outer
01:51 - function I will attempt to update our
01:53 - message message equals goodbye now this
01:57 - doesn't work as you can see this message
02:00 - variable is in a different scope it's
02:02 - kind of like it's in another dimension
02:05 - what we've done here is we have created
02:07 - a different message variable in a
02:09 - different scope outside of the outer
02:11 - scope I have no way of accessing the
02:13 - message variable so that's one of the
02:15 - benefits of closures you can encapsulate
02:17 - variables and make them private let me
02:20 - give you another example a closure can
02:22 - maintain the state of a variable we'll
02:25 - create a counter program so I'm going to
02:27 - create a function to increment
02:32 - within the increment function I will set
02:35 - a count variable equal to zero I will
02:38 - increment our count by one then
02:43 - console.log I'll use a template
02:45 - string count increased to I'll add a
02:50 - placeholder we'll display our count
02:53 - variable now anytime I attempt to call
02:56 - the increment function it'll increase
02:58 - our count by one
03:00 - but if I was to execute this function
03:02 - again well we're redeclaring this
03:04 - variable of count we're resetting it
03:07 - every time we call this
03:08 - function I can't get the count to go
03:11 - past one because we keep on resetting it
03:15 - but by using a closure we can have state
03:17 - maintenance we can maintain the state of
03:20 - this variable and remember where this
03:22 - variable was previously I mean I could
03:24 - take this variable and declare it
03:27 - outside of the function but then we
03:29 - don't have any security for that
03:30 - variable I will set the count equal to a
03:34 - million we're maintaining the state of
03:36 - that variable but it's not private
03:39 - anybody and anything can access and
03:40 - change that variable a closure maintains
03:43 - the state of a variable and makes a
03:45 - private what we'll do is enclose all of
03:48 - this code within another
03:51 - function we'll create a function to
03:55 - create a
03:58 - counter
04:05 - how do we access the scope within the
04:06 - create counter function here's another
04:10 - possibility we will return an object we
04:14 - will need a set of curly
04:15 - braces our object will have a property
04:19 - of increment and its Associated value
04:22 - will be a reference to increment there
04:25 - is a shorthand version of this you can
04:28 - just use the function name as a property
04:30 - we're returning an object with the
04:33 - method of
04:34 - increment so now I'm going to create an
04:36 - object named counter counter equals
04:41 - invoke the create counter function this
04:44 - will return an object that has an
04:46 - increment
04:48 - method so I'm going to take our counter
04:51 - object use the increment
04:54 - method count increase to one not only do
04:57 - we have an increment method we have a
04:59 - count variable as well you could say
05:01 - that what we've done with this outer
05:02 - function it's very similar to creating a
05:05 - class we can use classes to instantiate
05:08 - objects in this case we used a function
05:11 - to return an object so if I was to take
05:13 - my counter and increment it again our
05:17 - closure should maintain the state of
05:19 - that variable count count increase to
05:21 - two it's not resetting every time we
05:23 - call the method count increase to
05:26 - three let's attempt to access our count
05:30 - variable counter. count equals
05:35 - 0 then I will console. log R
05:41 - count reference error count is not
05:45 - defined let's attempt to display our
05:47 - count
05:48 - variable
05:51 - console.log take our counter object
05:54 - access the account
05:56 - variable it is undefined we don't know
05:58 - what it is it's hidden your closure can
06:02 - have more than one
06:04 - function so what we'll do is create a
06:07 - get count function we'll use the get
06:09 - count function to return our count if we
06:11 - need access to it function get
06:16 - count we will return our count
06:20 - variable within the return statement
06:23 - where returning an object we will add
06:25 - another property of a reference to the
06:28 - get count function
06:31 - so now within our counter we have a
06:33 - method to get the count variable let's
06:38 - console.log I'll use a template string
06:41 - the current count is I'll add a
06:45 - placeholder take our counter object use
06:49 - the get count method the current count
06:54 - is three if I was to increment our
06:57 - counter again well that increased to
06:59 - four all right last
07:02 - example we're going to create a closure
07:04 - for a game where we keep track of points
07:07 - we have a score let score equals zero
07:11 - we'll Define the
07:13 - functions
07:15 - function increase
07:17 - score we'll have one parameter points in
07:21 - order to score some points we have to
07:23 - pass in some points as an
07:26 - argument take our score Plus equals R
07:31 - Points then let's
07:34 - console.log I'll use a template string
07:37 - plus add a placeholder R
07:41 - Points then I'll add pts meaning points
07:44 - it
07:45 - shortened let's create a function for
07:48 - decrease
07:49 - score change increase to
07:52 - decrease score minus equals
07:56 - points minus points and then let's get
07:59 - our
08:00 - score function get
08:05 - score
08:07 - return the
08:10 - score if I need to increase the score I
08:13 - will invoke The increased score function
08:16 - but I have to pass in points we scored
08:18 - five points let's do this
08:21 - again we scored six points let's
08:25 - decrease the
08:27 - score I will subtract three
08:32 - points minus three points let's get the
08:35 - current
08:36 - score
08:39 - console.log I'll use a template string
08:42 - the final score is add a
08:46 - placeholder get
08:50 - score the final score is eight I'm going
08:53 - to add points after that eight points
08:57 - all right problem with this is that we
08:59 - can take our score and set it to
09:02 - anything you scored like a kajillion
09:05 - points so for some security let's
09:08 - enclose all of this code within a
09:11 - closure I'll create an outer function
09:15 - function create game this will return an
09:19 - object let's cut all of this
09:22 - code paste it within the outer function
09:25 - of create
09:26 - game and then at the end
09:29 - we will return an object that has
09:32 - references to these
09:34 - functions return an object we need curly
09:37 - braces for that a reference to increase
09:42 - score decrease
09:45 - score and get
09:48 - score so now I will use the create game
09:53 - function to return an
09:56 - object const game game will be our
10:00 - object we will invoke the create game
10:03 - function and return an
10:06 - object so now if I want to increase the
10:09 - score decrease it or get the score I
10:12 - have to use the methods of this object
10:15 - game. increase
10:17 - score game. decrease score and game.get
10:23 - score we have five points six points
10:27 - minus three points and then we have the
10:29 - final score of eight points well
10:31 - everybody those are closures think of
10:33 - them as a function defined inside of
10:35 - another function the inner function has
10:38 - access to the variables and scope of the
10:40 - outer function these are used frequently
10:43 - with JS libraries and Frameworks such as
10:45 - react View and angular especially when
10:48 - you work with function-based components
10:50 - and well everybody those are closures in
10:56 - JavaScript