00:00 - hey everyone welcome back so today I got
00:02 - to talk about abstract classes in Python
00:05 - an abstract class is a class that cannot
00:08 - be instantiated on its own abstract
00:10 - classes are meant to be subclassed
00:13 - they're supposed to be parents to
00:14 - children classes they can contain
00:17 - abstract methods which are declared but
00:20 - have no implementation abstract classes
00:22 - have a few benefits we can't create an
00:25 - object from a class that's abstract
00:27 - abstract classes you can say are
00:30 - incomplete we don't want to create an
00:31 - object that's incomplete also any
00:34 - children that inherit from an abstract
00:36 - class if there's any abstract methods we
00:39 - have to implement them so let me give
00:41 - you a demonstration we're going to
00:43 - create a class of vehicle for now I'll
00:47 - write pass to work with abstract classes
00:49 - we'll need to import
00:52 - ABC ABC meaning abstract base
00:56 - classes we need import ABC all capital
01:02 - meaning abstract Base
01:04 - Class as well as abstract
01:08 - method so my vehicle class it's going to
01:11 - be an abstract class we will inherit
01:14 - from ABC the abstract based class I
01:18 - don't want myself or any other
01:20 - developers to be able to create a
01:21 - vehicle object I will make this vehicle
01:24 - an abstract class also I can add some
01:27 - abstract methods these methods will be
01:29 - in herited by its
01:31 - children to declare an abstract method
01:33 - we need to use a decorator at abstract
01:39 - method so what should all vehicles be
01:42 - able to do let's say go and stop if
01:46 - you're a vehicle you can
01:49 - go with abstract methods we declare them
01:52 - but we don't Define them we'll Define
01:54 - them within each of the children classes
01:56 - that inherit from
01:58 - vehicle let's create another abstract
02:00 - method abstract method Define
02:06 - stop if you're a vehicle you can stop
02:09 - all right we have finished our abstract
02:11 - class A vehicle just to demonstrate that
02:14 - we can instantiate an object from this
02:16 - class let's attempt to do so and see
02:18 - what happens I will attempt to create a
02:21 - vehicle object vehicle equals
02:24 - vehicle and then run
02:26 - this type error can't instantiate
02:28 - abstract class vehicle with abstract
02:31 - methods go and stop this is good this is
02:34 - what we want our vehicle class is
02:36 - incomplete we don't want to accidentally
02:38 - make a vehicle object if we were it's
02:40 - kind of like the invisible boat mobile
02:42 - from SpongeBob instead we will create
02:45 - some children to inherit from this class
02:48 - so now we will create a class of car
02:52 - which will inherit from vehicle car is
02:55 - the child vehicle is the parent but we
02:58 - are receiving a warning Class Car must
03:01 - Implement all abstract methods what
03:04 - we're saying is hey if you inherit from
03:06 - the vehicle class you need to include
03:08 - these abstract methods so I'm not going
03:10 - to currently let's just see what
03:13 - happens I will attempt to create a car
03:17 - object and run
03:19 - it type error can't instantiate abstract
03:22 - class car with abstract methods go and
03:25 - stop if a class is inheriting from a
03:28 - parent that's abstract and there's
03:30 - abstract methods we have to finish
03:33 - defining those
03:35 - methods So within our car class really
03:37 - I'll just copy this because I'm
03:40 - lazy our method is go we will
03:43 - print you drive the car we also need
03:52 - stop I will
03:54 - print you stop the
03:57 - car okay let's see if this works
04:00 - this has run with no problems I will
04:03 - have my car go then stop we're calling
04:07 - the go method then the stop method you
04:09 - drive the car you stop the car let's
04:12 - create a few more children for the
04:14 - vehicle class class
04:18 - motorcycle will inherit from the vehicle
04:23 - class again we have to implement the
04:25 - abstract methods found within the parent
04:28 - go and stop
04:36 - for go I will
04:38 - print you ride the
04:43 - motorcycle then with
04:47 - stop you stop the
04:51 - motorcycle motorcycle equals motorcycle
04:55 - we're calling the Constructor
04:59 - then I will have our
05:01 - motorcycle
05:03 - go then
05:06 - stop you ride the motorcycle you stop
05:08 - the
05:09 - motorcycle all right last example let's
05:12 - say we create a boat class which will
05:15 - inherit from the abstract class A
05:19 - vehicle I will include a go method where
05:23 - I will
05:25 - print you sail the boat
05:29 - but I will forget to add a stop method
05:32 - because I'm not paying attention let's
05:34 - attempt to create a
05:39 - boat well what the heck is this type A
05:42 - can instantiate abstract class boat with
05:45 - abstract method stop then I'll look over
05:47 - my code and see oh I forgot to include a
05:50 - stop method with including abstract
05:53 - methods within a parent it acts as a set
05:55 - of checks and balances all vehicles
05:58 - should be able to go and stop if I
06:00 - forget to Define one of these methods
06:03 - well we'll receive a type error if we
06:05 - didn't I may not have noticed that we're
06:07 - missing a method so now we need to
06:09 - include that stop
06:12 - method I will
06:14 - print you anchor the
06:19 - boat this seems to have run with no
06:22 - problems I will have my boat
06:25 - go and stop
06:29 - you sail the boat you anchor the boat
06:32 - all right everybody so those are
06:34 - abstract classes it's a class that can't
06:37 - be instanciated on its own we can't
06:39 - create any objects from this class we
06:42 - don't want to because it's well
06:44 - incomplete they're meant to be
06:46 - subclassed they can contain abstract
06:48 - methods which are declared but we don't
06:51 - finish defining them we Define them
06:53 - within the children classes in this
06:55 - example car motorcycle and boat and
06:58 - while everybody those are abstract
06:59 - classes in Python