00:00 - Hey, what's going on everybody it's you bro here and in this video
00:03 - I'm going to teach you guys how we can accept user input using C++. Let's get into it
00:10 - Computer programs are usually a two-way street
00:13 - They accept user input they do something with that input and they produce
00:17 - output not always but most of the time so up until now we have only been displaying output without
00:23 - Accepting any user input but today that's all going to change
00:26 - Because I'll show you how what we can do is that we can accept user input and store it within a variable that we can
00:33 - Use later on in our program
00:34 - So to begin we'll want to create a variable and for our example
00:38 - Let's create a string variable simply named name
00:42 - So we'll say string name and we don't necessarily need to assign this variable a value right away
00:48 - We can simply just declare it without assigning it
00:51 - so effectively this
00:53 - Variable will not contain any value until we enter in some user input and that user input will be assigned to this variable later on
01:01 - in this program so next we'll want to create a sea out statement that will function as a prompt to let the user know that
01:08 - We want them to enter in their name. So we'll use the sea out statement and
01:14 - Let's create a problem - such as please enter your name
01:22 - Alright and this is what you do
01:24 - if you want to accept user input you need to type C in for input and
01:30 - Next you need to use the extraction operator, which is to write angle brackets, and then you're going to put your variable here
01:37 - So in our case, it's going to be name
01:40 - So this is what you do to assign user input
01:44 - Next we can use this variable elsewhere in our program
01:48 - So now we can display a message using another C out statement that includes our variable so we can say well gum
01:58 - Name
02:00 - So let's try this out and see if it works
02:02 - All right, so let's run this. So here's our prompt. Please enter your name
02:07 - So here I'm going to type in bro and hit enter and it says welcome, bro
02:12 - And that was our user input that we entered in. So going back to our code
02:17 - I'd like to show you guys something now with the C out stem and you'll notice a pattern
02:22 - We say see out for output then we use the insertion operator and then we write whatever we want to display as output
02:30 - Then with input we do something kind of like the opposite
02:33 - We write C in for input then we use the extraction operator
02:37 - Which is to write angle brackets instead of two left angle brackets
02:42 - And then we write something to function as input
02:46 - It's kind of like the C out and the C in statements are kind of opposites
02:49 - We have C out and C in output input
02:53 - We have the insertion operator, which is two left angle brackets and the extraction operator
02:59 - which is 2 right angle brackets and then for C out we have the output that we want and
03:04 - For C and the input that we want, so you're also not limited to only using strings as variables
03:11 - for example
03:11 - let's create an int which is an integer and we can change this to perhaps age and we could say please enter your age and
03:19 - we'll change name to age and
03:22 - for our output we'll say something such as your age is
03:29 - Whatever we enter in all right, so let's try this out. It's going to be the same process basically
03:37 - Please enter your age
03:38 - I'll just make up an age and say I'm 18 hit enter and it says your age is 18
03:43 - So you can enter in whatever sort of data type that you need
03:47 - So one problem that you may encounter in the beginning stages of your programming career
03:53 - Is that if somebody enters an input that's not of the type that you anticipate for example
03:59 - For our prompt here
04:01 - it says please enter your age and if I don't enter a number and put a word here such as
04:06 - Pizza because that's the first thing that comes to mind and hit enter
04:09 - it's actually going to cause an unexpected result and
04:13 - Sometimes cause an exception so later on in a future lesson
04:17 - We're going to cover exception handling where we can prevent people from doing things such as this and take corrective actions
04:24 - so in the meantime
04:25 - You just have to be sure that you're entering in information that is of the correct data type that you're anticipating
04:30 - All right. So there's another type of input function that you guys should be aware of and I'll give you guys a scenario
04:36 - So what I'm going to do is reverse all these changes back to when we entered in our name
04:42 - Alright, so let's run this and I'll show you an example
04:49 - All right
04:49 - So let's say that we enter in a first name and a last name and I'll just enter in a last name that I make
04:56 - Up like bro
04:58 - Washington and
04:59 - Then I'll hit enter. All right, so you can see that it actually didn't enter in my last name
05:05 - it wasn't stored within that name variable because when we use this cien statement
05:12 - It stops at any blank space
05:14 - see n considers any white spaces as
05:18 - terminating characters
05:20 - So that means we can only use this to assign a single value or word without any white or empty spaces
05:27 - so if we were to rerun this and we entered in this first name and last name all within
05:34 - One word this would still work then but any blank spaces are treated as terminating characters
05:40 - so if you need to accept user input that will ignore spaces there's a
05:45 - Different form of user input that we need to use and that is the get blind
05:50 - Function that will read a line of text for us
05:53 - So in order for us to use this get line function, we need to include something at the top of our program
05:59 - So we're going to at the top right include then within a set of angle brackets type in string
06:07 - All right
06:09 - so then what we'll do is we'll replace this cin statement with
06:14 - Get line then a set of parentheses and what we're going to type within here is first
06:20 - CN comma and then the name of the variable in which we want to store something and then type a semicolon at the end
06:28 - Then let's rerun this and see what our result is
06:32 - So it says please enter your name. So what if we typed in our full name so bro?
06:38 - Washington hit enter and it now displays our entire full name despite there being
06:44 - A blank space between the first name and the last name so you can use this get line function
06:50 - To read an entire line of text and it really doesn't matter the length
06:54 - I'll just type in something. That's
06:56 - Insanely long and hit enter and you can see that it read this entire line of text up until we hit Enter
07:03 - jasira
07:04 - Where you can't use the get line function for any data type that is of the integer
07:10 - Float, or double data type for example, if I were to change name to an integer data type, this would not work
07:17 - But the same thing would also apply to a char value
07:20 - I guess it would only apply to string data types because it reads a line of text and
07:26 - Basically a string is one or more characters. It's basically like a line of text
07:31 - You can think of it that way. So it's useful if you need to read a line of text that includes spaces
07:36 - So that's the basics of accepting user input using
07:41 - C++ now if you're looking for practice or a project what we're going to do is
07:45 - That we're going to create a program that's going to simulate a cash register
07:50 - Where we can ring up an item, and we'll actually accept user input
07:54 - We'll ask the user what item they'd like to buy we'll record a price
07:58 - We'll have the user enter that in as well a quantity and then we'll generate like a final total or bill
08:04 - So let's work on that program. Let's clear all this out and start over
08:08 - Alright, so if we want to write this program, we're going to want to declare all of our variables right away
08:13 - So what we'll do is create a string and we'll call this item what item do we want the user to buy or what?
08:20 - Item, will they enter in we'll want a price. This will be a double value
08:25 - So that's basically a decimal value for a price. We'll need a quantity. That could be a integer value
08:32 - So we'll say int
08:34 - quantity and lastly a
08:37 - Double value which will function as the total which is the total
08:41 - Amount that the user has to pay alright
08:45 - So first, we'll want to create a prompt that will ask the user what item they want to buy
08:50 - so let's create a prompt using the C out statement and we'll say
08:54 - What?
08:56 - Item, do you want to buy?
09:02 - Alright then we need to use the get line function for this because the user input might include a
09:10 - Space if they're entering in an item name, so we'll say get line
09:15 - Parenthesis. Well type C in comma then item because
09:20 - This is the item name. We're going to store the name of an item within here
09:24 - All right next we'll ask for a price so we'll need another prompt
09:30 - Will say what is the price for?
09:35 - Each
09:38 - Then use whatever type of currency you want, I'll use American dollars
09:42 - All right, and then we can use simply the C in statement for this. We don't need to use getline
09:50 - C in price and we can use the cin statement for double values
09:56 - All right. So next we'll use the C out statement to ask for a quantity
10:04 - How many do you want to buy
10:13 - Then we'll use C and again and ask for the quantity or store the quantity
10:19 - Quantity I can't spell
10:22 - all right, and then lastly we need to
10:26 - Generate what the total price is going to be
10:29 - But first I'm going to add a headline just to give us some space after generating the total bill. So I'll just say C out
10:38 - En DL for and aligned. Alright, so now what we can do to create the total is we can say total
10:46 - equals price times quantity
10:52 - So but make sure you spelt right now for the second part of this program, let's create a receipt that will display the results
10:59 - So we'll type this after we calculate the total. So let's create a C out statement and
11:05 - We'll write something such as item, or you can type in like item name. Whatever you want doesn't matter too much what you type here
11:12 - so we'll type in item and
11:15 - Let's add an end line keyword after this and it's going to be a similar process for the other inputs that we have
11:23 - so
11:24 - price
11:28 - And then price
11:34 - So you don't have to type these strings exactly the way that I do
11:38 - This is just how I would create like some sort of bill every suit, but you know do whatever you want here
11:46 - So perhaps for a quantity
11:48 - I'll just put X for like a multiplier of some sort like you bought this at this price times. However, many you bought
11:57 - So we'll say a quantity here
12:01 - then end line
12:04 - All right, and then we will say C out
12:09 - Your total is
12:14 - Then I'll just have the dollar sign or whatever currency you're using you can add that here
12:21 - Total E. And DL. All right, it all looks good. Let's run this
12:35 - Alright what item do you want to buy bag of chips
12:43 - Potato chips
12:45 - What is the price for each how about one dollar and five cents, how many do you want to buy?
12:51 - I feel like five bags of potato chips
12:55 - Alright item bag of potato chips price
12:59 - 105 times five your total is
13:04 - $5.25 I
13:05 - Forgot to add the dollar sign for the price, but it would still work regardless without it. I'm just very
13:11 - particular with small details like that for output
13:14 - But yeah, that is some of the basics for accepting user input if you would like a copy of this program
13:20 - I'll post it as source code in the comments down below
13:24 - so feel free to try this out for yourself and if you you know practice with us or
13:29 - Generate some output post it in the comments down below as well because I'd like to see what you came up with basically
13:35 - Or if you'd like to create your own version of this feel free to post that as well
13:40 - But yeah, that is how to accept user input using
13:44 - C++
13:45 - Hey you if you enjoyed this lesson
13:48 - Then you can help me
13:49 - Help you in 3 easy steps by smashing that like button
13:53 - Drop a comment down below and subscribe if you'd like to become a fellow, bro