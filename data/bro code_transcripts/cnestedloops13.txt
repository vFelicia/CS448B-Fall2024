00:00 - hey it's your bro hope you're doing well
and in this video we're going to be
00:03 - discussing
nested loops in c plus plus let's get
00:06 - into it
00:09 - all that nested loops are is this
concept of having
00:12 - one loop that's inside of another loop
and these come in handy when we get to
00:16 - this topic
on 2d arrays they're going to be heavily
00:19 - used these nested loops
so the generic syntax of a nested loop
00:24 - you can either have a for loop or a
while loop
00:26 - there's other types of loops out there
i'm not going to bother with filling
00:30 - this in
so it's basically you have one loop
00:32 - that's inside of another loop
so it's as if we're stuck within two
00:36 - loops now instead of just one
there's an outer loop and there's an
00:39 - inner loop and it's still possible to
have
00:41 - more levels to this than just two but
let's keep it simple for now
00:45 - so when we enter this inner for loop
we're going to be stuck
00:49 - cycling through this inner for loop a
certain amount of times and once we're
00:53 - able to exit
we can finish an iteration of the outer
00:56 - loop but we may
have to continue cycling through this
01:00 - outer for loop
depending on what kind of condition we
01:03 - have and once we
begin a new iteration we get stuck back
01:07 - within this inner for loop again and
have to keep on cycling through this
01:11 - so i think it would be best if i give
you a demonstration of this
01:14 - so we're going to create a program where
we can print out a rectangle
01:19 - of a certain symbol that the user
chooses
01:22 - and we're going to give a symbol a width
and a height to this rectangle and this
01:27 - is a good demonstration of how a nested
loop works
01:30 - so let's begin then step one is that
we're going to accept
01:33 - a character from the user and then we're
going to print
01:37 - a single line depending on what the user
types in
01:41 - for a width and then after we complete
that program we'll upgrade it to
01:46 - printing out a rectangle like it has two
different dimensions
01:49 - so let's create a
char variable and we'll call this
01:55 - perhaps symbol
and we will want a integer
02:00 - variable named perhaps with and then
later on when we upgrade this program to
02:07 - a
2d rectangle will include length all
02:10 - right so
we'll create a display and we will have
02:14 - a prompt that says
enter the oops
02:19 - enter the symbol to use
02:24 - and then we will see in whatever the
symbol the user types in okay
02:31 - and we are going to see out
enter the width
02:38 - and then we will see in whatever
the width the user types in all right so
02:45 - we'll create a for loop and then later
on we'll turn this into a
02:50 - nested loop so we'll need some sort of
index or counter
02:54 - the standard programming practice is to
have a
02:58 - integer variable named i and we'll set
this equal to
03:02 - zero and then add a semicolon at the end
so remember there's three statements
03:06 - within this for loop
the first is declaring an index or
03:10 - counter of some sort second is the
condition so we want this for loop to
03:15 - iterate
depending on what the width is so we can
03:18 - just simply say
we're going to continue this for loop as
03:22 - long as
i is less than whatever our width is
03:26 - semicolon and lastly we want to
increment
03:29 - our index so we can just type in i plus
plus
03:34 - so what do we want to do during each
iteration of this for loop
03:38 - we want to display so c out whatever our
symbol is that the user types in okay so
03:44 - let's run this program to test it
so this is only going to print a single
03:49 - line
enter the symbol to use how about a
03:53 - money symbol
enter the width how about five money
03:58 - symbols
all right so we ended up with a single
04:01 - line
and the width was five and this just
04:04 - prints a single line of characters
now let's turn this into a program that
04:09 - will display a rectangle
so we're going to add a height so
04:14 - integer
height and we will create
04:18 - a prompt to enter the
height and we're going to change width
04:24 - to
height for this line here all right so
04:28 - what we're going to do now
is that we're going to surround this for
04:33 - loop
with another for loop and this outer for
04:36 - loop is going to be
in charge of keeping track of the height
04:40 - of our rectangle so we're going to take
these curly brackets and surround
04:45 - this for loop so now we have an outer
for loop
04:48 - and an inner for loop so this is now a
nested loop
04:52 - so this outer for loop is going to be in
charge of the height of the rectangle so
04:58 - it's going to be a similar process to
what we have with these
05:01 - three statements within the inner for
loop um
05:04 - one thing though is that with standard
programming practice with nested loops
05:08 - they usually use a index or counter
called j and the reason that i think
05:14 - that they use this
is because typically the default is
05:18 - i for an index and i think they use j as
the next one just because it comes next
05:23 - in the alphabet
that's my reasoning behind it so it's
05:27 - going to be the same process as before
and i equals zero semicolon
05:32 - and we're going to continue this outer
for loop
05:35 - as long as i is
less than our height
05:42 - semicolon and lastly we're going to
increment
05:45 - our eye counter after we exit
this inner for loop we would like to
05:51 - move down to the next line think of it
like a typewriter
05:54 - so after we complete one line we would
like to
05:58 - go down to the next line so a simple way
to do that here
06:02 - is that we can just c out e n d
l to move down to the next line as if
06:07 - it's like a typewriter or maybe a 3d
printer
06:10 - we'll finish printing one line and then
we will
06:14 - jump down to the next line and just
continue the cycle
06:17 - until we can escape the outer for loop
so let's run this program to try it
06:26 - so enter the symbol to use this time
let's try
06:29 - the at sign enter the width
perhaps 10 and the height maybe
06:35 - 12. all right so here's our rectangle
so let's just check to see that this is
06:40 - accurate so width of 10
1 2 3 4 5 6 7 8
06:45 - 9 10 height of 12 1 2 3
4 5 6 7 8 9 10 11 12. yeah that works
06:53 - just fine then
so this is a fun little program you can
06:56 - do to create or
print a rectangle with a symbol width
07:01 - and a height that you specify so that's
basically how nested loops work
07:05 - it's just this general concept of having
one loop that's inside of another loop
07:10 - and you're not limited to just having
one inner loop and one outer loop for
07:14 - example we could take this a step
further
07:17 - and put this all within another loop and
it's kind of like we would have
07:21 - three different levels then we have an
inner loop a middle loop
07:25 - and then an outer loop i can't really
think of any practical
07:28 - applications for three different levels
of loops but i'm sure they're out there
07:32 - though
um really for this tutorial series we'll
07:36 - only be dealing with like
two levels at the very most i would say
07:40 - uh but this could be useful for maybe
printing some sort of like
07:44 - 2d layout or something and when we get
to this topic
07:47 - on 2d arrays these nested loops are
actually going to come in handy to
07:51 - display
all these elements of like a chart
07:55 - basically
if you need to take anything away from
07:57 - this basically just a nested loop is one
loop that's inside of another
08:02 - we will cycle through the inner loop and
once we exit the inner loop
08:06 - then we will complete one cycle of the
outer loop
08:10 - and restart the process all over again
oh and a quick note that i forgot to
08:14 - mention when originally filming this
video
08:17 - is that with nested loops you're not
required to have
08:20 - four loops for example you could have a
set of
08:23 - while loops of course you know you would
have to have different
08:27 - statements you couldn't have these three
statements you would have to have like a
08:31 - single condition
um but yeah you can mix it up you can
08:34 - have nested loops that
are while loops or for loops or a
08:38 - combination of four loops and while
loops
08:41 - it doesn't matter just for this example
we used for loops for the inner loop and
08:45 - the outer loop
if you're having some trouble
08:47 - understanding this concept of nested
loops don't worry we'll be revisiting
08:51 - this topic again when we get to 2d
arrays
08:54 - and we won't really be using these
anytime too
08:57 - soon i would say uh so you have some
time to actually
09:00 - play around with these but that's pretty
much this lesson on
09:04 - nested loops if you would like a copy of
this program i'll post all this code in
09:09 - the comments down below
and pin it to the top if you're looking
09:12 - for additional practice or a project to
work on
09:15 - why don't you create a program that
involves a nested loop
09:19 - and post it in the comments down below
because i would like to see it as well
09:22 - but yeah that is this topic on nested
loops and c
09:26 - plus plus hey you if you enjoyed this
lesson
09:30 - then you can help me help you in three
easy steps
09:33 - by smashing that like button drop a
comment down below
09:37 - and subscribe if you'd like to become a
fellow bro
10:02 - you