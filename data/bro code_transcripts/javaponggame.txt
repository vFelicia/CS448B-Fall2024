00:00 - I think I mistyped something what's
going on guys it's your bro here hope
00:05 - you're doing well and in this video I'm
going to teach you guys how we can
00:08 - create a simple game of pong using Java
so without further ado let's get into it
00:15 - if you find this video helpful please
remember to Like comment and subscribe
00:20 - your support will help keep this channel
running alright guys so pong let's do it
00:26 - let's create a new project file new Java
project I will call this just pong
00:32 - finish don't create go to your project
folder we're going to create a few
00:38 - different classes so file new class I'll
call my main class pong game and check
00:46 - public static void bin cuz this is going
to contain our main method click finish
00:51 - so what I'm going to do I kind of like
to separate a lot of my code into
00:56 - different classes just to help keep
things organized and consistent so I'm
01:00 - going to create another class just for
the jframe so file new class I'll call
01:06 - this perhaps game frame so game make
sure it's uppercase game frame that
01:15 - should be good and then game panel file
new class game panel finish what else do
01:29 - we got so we got the paddles so let's
make a class called paddles so file new
01:37 - class maybe just paddle singular finish
file new class we'll make a class for
01:48 - both finish and then one last one for
score file new class score and finish so
01:57 - all of these classes really aren't
necessary but that's just a habit of
02:01 - mine I like to separate my code into
different classes just because you have
02:05 - like chunks of code for each separate
like entity like we have everything
02:08 - related to fall within here everything
related to the score to the paddle game
02:13 - panel etc that's just what I like to do
but everybody has their own unique
02:18 - coding habits now it's about that time
that we import everything that we need
02:22 - from the JRE system library so there's 4
imports will need Java a double
02:28 - to import java.awt event Java dot util
and lastly Java X dot swing so some of
02:50 - these classes won't necessarily use all
of these what I'm thinking we can do is
02:54 - just copy these and paste it within each
of these classes then at the end of the
02:58 - program if there's anything that we
don't need we can just take it out from
03:02 - each class but this is just a save time
so we're not importing things constantly
03:07 - okay so that should be good then for our
imports so let's begin by creating all
03:13 - of the separate methods within each of
these individual classes so let's begin
03:18 - with the constructor for our game frame
because that's kind of like a special
03:23 - method so with our game frame we're
going to create the constructor it's the
03:28 - same name as the class game frame let's
create the constructor for our game
03:33 - panel so game panel same thing with our
paddle ball and score so let's finish
03:51 - declaring some of these methods so
there's no methods we'll need within our
03:55 - pong game class done within our game
frame but we do have a bunch of methods
03:59 - to declare within our game at panel
class so let's create a method called
04:04 - new ball so whenever we call this method
will create a new ball on the screen and
04:11 - then another for new paddles so public
avoid new paddles so we can call these
04:21 - methods if we ever want to reset a level
or a game we'll want a paint method so
04:27 - we can paint stuff on the screen so
public void paint and there is one
04:33 - parameter here graphics and we'll call
it G and we'll want a draw method as
04:40 - well so public
Boyd draw and this also has one
04:46 - parameter graphics G and we'll want a
move method so we'll move things after
04:55 - each iteration of our game loop so
public void move and then another method
05:05 - for check collision think I misspelled
collision collision and another for run
05:21 - I know there's a lot of methods in this
class public void run okay so we're also
05:31 - going to create an inner class so public
class and this will be an action
05:38 - listener Al and it's going to extends
key adapter and there's two methods
05:50 - within here so public void key pressed
key event E and another for key released
06:05 - so key released so let's double check
what we have to the game panel we have
06:13 - our constructor game panel a new ball
method new paddles paint draw move check
06:19 - collision run an inner class called al
short for action listener that contains
06:24 - a key pressed method and key released so
if you have all that let's go to our
06:29 - paddle class so there's not as many
methods to fill in within our paddle
06:34 - class so let's create a method called
key pressed public void key pressed and
06:45 - this takes one argument let's set up a
parameter for a key event E and there's
06:54 - also another for key rule
least so what we're going to be doing
06:58 - within our game panel with this inner
class al we're going to be adding this
07:03 - action listener to our game panel and
then we're going to call the appropriate
07:08 - keep pressed method or key release of
our paddle so key pressed as well as key
07:16 - released and then we will want a method
called set y direction so public void
07:27 - set y direction and this will take one
argument an integer named y direction so
07:40 - public void move and then another for
draw so public void draw this has a
07:55 - argument or parameter of graphics G and
we're good let's move on to the ball
08:02 - class okay so we have set X direction
basically with our paddles they're only
08:10 - going to be moving up and down so we're
only going to set the y direction we
08:14 - don't have to worry about the x axis but
the ball has well it travels on the x
08:18 - axis as well as the y axis so we'll need
a set X direction as well as set Y so
08:25 - public void set X direction and this
will take an integer value and we'll
08:34 - call it random X direction because when
we create a new ball it's going to go in
08:40 - a random direction so we'll set up an
instance of the random class to take
08:45 - care of that
so set X Direction as well as set y
08:49 - direction and change that here as well
int rendom y direction and then a move
08:58 - method so public void move and then a
draw method so public void
09:09 - is draw and this has graphics G and then
lastly our score class so we only have
09:20 - one method within here
well besides our constructor we're only
09:23 - going to draw the score we don't need it
to move or anything so public void draw
09:30 - this takes graphics G so moving on with
a few of our classes we're going to turn
09:38 - these into subclasses so let's begin
with our game frame so next to the
09:43 - declaration let's have this extends the
jframe class so we can treat our game
09:49 - frame as a dray frame basically our game
panel will extends J panel and it's also
09:55 - going to implements the runnable
interface so we can actually have this
10:01 - run on a thread so paddle will extends
rectangle same thing for ball extends
10:10 - rectangle and same thing for score
extends rectangle so let's head back to
10:18 - our pong game class and we'll start here
and then work our way over to the right
10:23 - and declare and instantiate basically
most of the things that we'll need
10:27 - throughout the rest of this program so
beginning with our pong game class we're
10:32 - going to create an instance of our game
frame and the game frame is going to
10:35 - hold a game panel so the game frame is
basically the window frame that has the
10:41 - minimize button maximized the X button
all that cool stuff so let's create an
10:46 - instance of the game frame so game frame
I'll call this frame equals new game
10:52 - frame and that's it for this class let's
move on to our game frame and before the
10:59 - constructor we're going to create an
instance of the game panel class so game
11:03 - panel will call this panel equals new
game panel and then within our game that
11:12 - panel class we have quite a few things
to declare within here so we'll create a
11:16 - static final and detered variable called
game underscore wit and let's set this
11:23 - to 1000 that's a good size so let me
explain some of my reasoning for using
11:28 - these static as well as the final
keyword modifiers so the reason that
11:32 - we're making the static is because if
for some reason we had in multiple
11:36 - instances of our game panel class they
would all share just one variable and
11:40 - they wouldn't each have their own
individual game with they'd all be
11:44 - sharing the same one and the reason that
we use the final key word is that this
11:49 - prohibits us from accidentally modifying
our game with later on in the program
11:54 - also if used the final key word it also
makes this run a little bit faster not
12:00 - anything significant but it's considered
good practice if you don't really plan
12:04 - on modifying this variable elsewhere and
one naming convention with final
12:09 - variables is to make all letters in your
variable name all uppercase so it's more
12:13 - easily identifiable and in past videos
in this tutorial series we really
12:18 - haven't used the static as well as the
final keyword modifiers to often because
12:22 - they weren't really relevant to the
topics we were discussing but since
12:25 - we're starting to get into games a
little bit more I thought it'd be a good
12:28 - time to reintroduce these so with a few
of these variables I'm going to use the
12:33 - static as well as the final keyword
modifiers if they apply now let's also
12:37 - do the same thing for our game height so
we'll create a static final int called
12:41 - game height now with this game table
this game panel I'm going to be copying
12:48 - the dimensions for a standard ping-pong
table and it has a ratio of five to nine
12:53 - five feet to nine feet so I'm actually
going to copy that ratio so we'll take
12:57 - our game width and multiply this by our
ratio five divided by 9 and then I'm
13:07 - going to cast this as an integer so this
will give us a corresponding height to
13:15 - our game width and if we were to
actually change our game with the game
13:19 - height would adjust accordingly to
whatever we assign for our game width so
13:24 - let's also create a dimension so static
final dimension
13:31 - and we'll call this screen underscore
size equals new dimension and we're
13:40 - going to pass in a width and a height so
we're going to pass in our game with as
13:44 - well as our game height okay now let's
create the diameter for the ball so
13:54 - static final int ball underscore
diameter I think that's how you spell
14:03 - diameter and let's assign this as 20
pixels so the higher number the higher
14:09 - the ball diameter and let's work on the
paddle dimensions so static final int
14:17 - paddle underscore width and 25 is good
for this and then a paddle height static
14:26 - final int paddle height and maybe 100
that should be good okay so we're going
14:35 - to declare a few instances but not
actually initialize them yet so let's
14:41 - begin with a thread since we're
implementing the runnable interface so
14:45 - thread game thread and then an image so
image and we'll call this image graphics
14:55 - graphics random random paddle paddle one
so this will be player 1
15:06 - paddle paddle 2 ball ball and score
score now let's head to our paddle class
15:18 - and there's just two variables to
declare so before the constructor will
15:22 - declare an int called ID so this will be
either 1 or 2 1 for player 1 or paddle 1
15:29 - and ID 2 or paddle 2 and then we will
also want an int called Y velocity so Y
15:38 - velocity is going to be how fast the
paddle is moving up and down when we
15:42 - press a button so let's move to
our ball class now and before the
15:47 - constructor this is what we're gonna
type an instance of the random class int
15:53 - X velocity how fast it's gonna move on
the x axis and int Y velocity how fast
16:04 - this ball is going to move on the y axis
and then for our score let's make a
16:13 - static int game underscore with we're
actually going to pass in a copy using
16:22 - our constructor and then a static int
game underscore hi it an int player 1 so
16:36 - this variable will hold the score the
current score of player 1 and another
16:42 - for player 2 and that should be
everything we need to declare before the
16:47 - constructors okay guys so let's head
back to our pong game so we're pretty
16:52 - much done with this class there's
nothing else that we need to do so let's
16:56 - move on to game frame next so the game
panel is going to be the canvas on which
17:01 - we're painting and the frame is kind of
like the frame around the painting it
17:06 - really doesn't do much it just houses
our panel so it kind of contains that
17:11 - minimize button and that maximize button
that X button so that's our jane frame
17:15 - basically so the panel is going to be
surrounded with the frame and actually
17:20 - just one quick change that I want to
make real quick is that I want to finish
17:25 - instantiating this instance within my
constructor all right so let's add our
17:33 - game panel to our frame so this dot add
panel and let's set a title this set
17:41 - title
17:44 - pong game and we do not want people to
resize this so this dot set resizable
17:57 - pulse and let's add a background color
so this dot set background color dot
18:08 - black and this dot set default close
operation jframe dot exit on close so
18:23 - when we hit that X button it will close
out of our application now for this next
18:28 - line we're going to use the pack method
of the jframe class and here's a quick
18:33 - description so this causes the window to
be sized to fit the preferred size and
18:39 - layout of its subcomponents and in our
case what this is going to do once we
18:44 - create our game panel this is kind of
like a painting we're going to use the
18:48 - game frame class and it will fit snugly
around our game panel so we don't
18:54 - necessarily need to set the size of our
J frame it's going to adjust accordingly
18:59 - to accommodate the size of our game
panel now for the next line we just need
19:04 - to set visible true so we can actually
see this alright so we shouldn't really
19:12 - have anything yet just a little box here
and you can see that the background is
19:16 - black so when we use the pack method and
we add that to our game frame the window
19:22 - frame is actually going to adjust to fit
the size of the game panel and one other
19:28 - trick you can do too is that since this
appears in the top left corner we can
19:32 - actually set this to appear in the
middle of our window here on our
19:37 - computer so the method for that is set
location relative to and then put no so
19:46 - now when you run this it's going to
appear in the middle of your screen
19:50 - although we still have to add a game
panel to this frame but yeah that is it
19:55 - for our game frame class let's move
- game panel no here we are within our
20:01 - game panel class so when we construct
our game panel what we want to do
20:06 - exactly so let's begin by calling the
new paddles method which we still have
20:11 - to fill in though but we will eventually
so when we create our game panel we also
20:16 - want to create some new paddles so we're
going to call the new paddles method as
20:20 - well as the new ball method and let's
finish instantiating our instance of the
20:29 - score class called score so a score
equals new score so one thing that I
20:37 - want to do is pass in our game width as
well as our game height variables so I'm
20:43 - going to pass these into the constructor
so game width as well as our game pipe
20:52 - so let's finish setting up these
constructors well the constructor for
20:57 - the score class so this takes an integer
variable and the first one was game
21:04 - width
the second one was game height all right
21:11 - so we'll return to this later let's head
back to our game panel so with this game
21:19 - panel we want this to be focusable so if
we press any Keys it's going to have
21:24 - focus then so it's actually going to
read these key presses these keystrokes
21:29 - so this dot set focusable true then we
want to add an action listener so this
21:39 - will respond to keystrokes so this dot
key listener and we will pass in new al
21:49 - so al is our inner class short for
action listener so this extends the key
21:55 - adapter class and this dot set preferred
size and we need to pass in a dimension
22:06 - good thing we have a dimension here
called
22:08 - screen size so we're going to pass in
our screen size and then lastly let's
22:15 - start our thread so game thread equals
new thread and we're going to pass in
22:23 - this since we're implementing the
runnable interface and then we just need
22:28 - to start this thread so game thread dot
start and that is it for our constructor
22:36 - for our game panel hey guys so there's
one little mistake that I made that I
22:40 - wanted to bring to your attention so we
have this ratio of the height to width
22:45 - of 5 to 9 to match a standard ping-pong
table however I forgot that here we're
22:50 - doing integer division so this will
round down to 0 so when I ran this
22:55 - program I had a game frame with the
width but no height so we should
23:00 - actually place a double value here
instead so 5 divided by 9 equals 0.5
23:08 - repeating so I'm just going to change
this from 5 divided by 9 to zero point 5
23:14 - 5 5 5
so that should be good then let's try
23:17 - rerunning this so now we have our game
panel that's added to our game frame so
23:24 - this panel will house all of the
components for our pong game so we're
23:29 - still within our game panel class let's
work on the paint method next so we're
23:35 - going to take our image and we're going
to create an image that has the
23:41 - dimensions of the width and the height
of our game panel so we're going to use
23:46 - the get with method to retrieve the
width of this panel as well as the get
23:53 - height method so then we're going to
take our graphics and set this equal to
24:01 - image and we're going to create a
graphic so image dot get graphics
24:13 - and then we're going to call the draw
method to draw all of the components but
24:20 - we're going to pass in our graphic that
we created from our image so we're going
24:24 - to pass in our graphics and then after
we draw all of the components we're
24:32 - going to take our graphics G and we're
going to draw our image so there's a few
24:40 - things to pass in here
not all of these just a few things we're
24:45 - going to pass in our image as well as
the coordinates so we want this to start
24:49 - in the top left corner that's where X is
zero and Y is zero and we're also going
24:54 - to pass in this RJ panel called game
panel alright everyone so let's move on
25:00 - to the run method of the game panel
class we're going to create a basic game
25:05 - loop this isn't anything too
sophisticated it's just something I
25:09 - would say very basic I'm hoping to get
like 60 frames per second or so with
25:14 - this granted though I'm not really a
game loop expert so you guys can
25:19 - probably code something better than this
but we'll just start with something
25:22 - basic so I actually am copying a game
loop for Minecraft I just made a few
25:28 - adjustments so we're going to use a very
similar game loop so I'm going to create
25:32 - a long value called
last time we're going to set this equal
25:35 - to system dot nano time so this is going
to be a long value and then we're going
25:43 - to create a double variable called
amount of ticks and we'll set this equal
25:51 - to 60 all right so then we're going to
create another double value called NS
25:57 - for nanoseconds and set this to 1
billion so I think that's the right
26:03 - amount of zeros let me double check so
that's a thousand that's a hundred
26:08 - thousand million ok so that should be 1
billion divided by ammount of ticks then
26:18 - we're going to create a double value
called Delta and set this equal to zero
26:24 - so these are all the variables we'll
26:26 - need
to declare to sign so we're going to
26:28 - create a while loop there's a few
different ways to do this you could have
26:31 - a boolean value called it running and
you can do this while the game is
26:35 - running otherwise if you just want this
to be simple you could just say well
26:39 - true I'll just go with the simple
version to this and you can always
26:42 - adjust this later on depending on how
you want to write your game so while
26:45 - true we're going to take log variable
now equals whatever our system dot nano
26:55 - time method is and then we're going to
take our delta value plus equals
27:03 - whatever now is minus last time and this
will be divided by NS for nanoseconds
27:12 - then last time equals now and if our
delta value is greater than or equal to
27:24 - 1 then we're going to first move all of
the components and then we're going to
27:33 - check for any collisions so check
collision and then repaint everything
27:41 - and then subtract 1 from Delta so I'm
just going to do a print line statement
27:46 - just to be sure that everything is
working so let me fix that I'm using the
27:52 - shortcut system dot out dot print line
test so this should repeatedly print out
27:59 - test ok it looks like the game loop is
running then so this isn't the best game
28:04 - loop but it's just something basic for
pong so that's everything for the run
28:08 - method of the game panel class ok guys
let's head to our new paddles method and
28:14 - we're going to finish instantiating
instances of paddle 1 and paddle 2 so
28:19 - within the new paddles method we're
going to take paddle 1 and set this
28:24 - equal to a new paddle and we're going to
send in some arguments and we'll need to
28:30 - finish setting up the constructor for
our paddle class so we're going to send
28:35 - in where we want this paddle to be on
the x-axis so for player 1 let's
28:40 - say we want this on the very left so
that would be where X is zero so then
28:45 - what if we want this paddle right in the
middle of our game frame so what we can
28:52 - do is that we can take our game
underscore height divided by two so it's
28:58 - gonna be like right near the middle okay
but we'll also want to subtract half of
29:04 - the paddle height so it ends up right in
the middle so game height divided by two
29:09 - - paddle underscore height divided by
two then we need to state what the
29:18 - paddle width and the paddle height is
and send this into the constructor so
29:22 - we're going to send in our constant
paddle height and petal width I think
29:28 - it's petal width first so paddle width
and then paddle underscore height and
29:36 - then we'll also pass in a unique ID
number for this paddle so just 1 for
29:41 - this paddle so let's copy this and do
this for paddle two so if we set the x
29:51 - position to be 0 it's going to be on the
very left of our window so for this
29:56 - argument we're going to place something
else the game underscore with - the
30:03 - paddle with there was gonna be a lot of
text here all right so game would -
30:11 - paddle with so we can keep the Y
positioning the same but we need to pass
30:17 - in a unique ID number so let's pass in
two instead of one okay so let's finish
30:25 - setting up the constructor for this
class so we'll head to the paddle class
30:30 - so for this class the first thing we're
taking in is an x position Y position
30:35 - width and height and then an ID number
so int X into y int
30:44 - paddle with inte paddle height and int
ID now within the paddle constructor
30:56 - since this is a subclass of the
rectangle superclass we can actually
31:02 - call the super constructor to assign
some of these arguments for us so we're
31:06 - going to send the super constructor the
x value Y as well as width and height so
31:13 - paddle width and paddle height and then
we just need to assign this ID that we
31:19 - receive so this ID equals ID and that's
it for our constructor for now so let's
31:26 - go down to the draw method and actually
draw these rectangles these paddles
31:31 - so if our ID is equal to 1 this will be
player 1 so let's set the color for
31:40 - player 1 so G dot set color and maybe
we'll make player 1 blue so color dot
31:50 - blue so if our ID is not one it must be
2 so we don't necessarily need to say if
31:58 - ID is equal to 2 we can just use an else
statement because that's more simple so
32:04 - else our ID must be 2 so we're going to
set player 2 to a different color and I
32:10 - will pick maybe red so color dot red and
then we just need to fill this rectangle
32:16 - so G dot fill rect so we need X Y width
and height so X Y width and height all
32:32 - right so let's go to our game at panel
class and actually it draw this
32:36 - rectangle so when we go to the paint
method we're going to draw all of the
32:40 - graphics that we have so we're going to
take our paddle paddle 1 and use the
32:47 - draw function but we need to pass in our
graphics G and we'll do the same thing
32:53 - for paddle 2
paddle to draw and let's take a look to
32:59 - see if they appear yeah here's our two
paddles paddle one which will be player
33:04 - one and paddle two which will be player
two however we would like these paddles
33:09 - to move up and down on the y-axis when
we type in certain keystrokes so let's
33:13 - work on that next so let's go to the
inner class of the game panel class and
33:17 - we named this AL short for action
listener and this extends key adapter so
33:22 - with key pressed
let's take paddle one and we're going to
33:28 - call the key pressed method of this
class and then let's do the same thing
33:34 - for paddle to paddle to key pressed and
let's do something similar for key
33:40 - released when we release a key so paddle
one and we'll use key released and then
33:47 - the same thing for paddle to paddle to
dot key it released then let's head to
33:53 - our paddle class so now at this point
we're going to work within the key
33:58 - pressed method of the paddle class so
we're going to create a switch that's
34:03 - going to examine the contents of our ID
variable so this is either one or two so
34:09 - case one this is referring to paddle one
so if I get key code is equal to key
34:22 - event dot V K underscore let's say W so
if somebody types in W on their keyboard
34:31 - it's going to execute this block of code
so let's set the Y direction of paddle
34:38 - one so set Y direction and let's pass in
maybe negative ten pixels so this is
34:45 - going to move up on the y-axis and let's
also call the move function and I'm
34:51 - going to copy this and do the same thing
for s so W to move up s to move down and
35:00 - this applies to only paddle one and we
need to pass and let's say ten pixels
35:05 - and you know what I'm actually going to
change this around let's
35:09 - create a variable called speed and we
will pass in negative speed and we'll
35:17 - assign speed to maybe 10 and you can
adjust this later I think it'd be easier
35:21 - if we have a variable you can change at
the top of this class so we'll just pass
35:25 - in speed I think that would be better
okay then let's do this for case two so
35:32 - I'm going to copy this paste it change
case 1 to case 2 and let's set this to
35:40 - up on the arrow pads up and down okay
that is it for the key pressed method oh
35:48 - we should also brake as well so I'm
going to add that so brake as well as
35:58 - here ok now we can actually copy all
this and paste it within our key
36:06 - released method so I'm going to copy
this paste it and forkie released we're
36:12 - going to change this from speed to zero
because otherwise this will just keep on
36:18 - moving forever so zero zero zero zero so
make sure 4 key pressed you're passing
36:28 - in a value such as a number or a
variable that contains a number so here
36:33 - I just have negative speed and speed and
you can want this to move faster or move
36:37 - further you can just upgrade this to a
higher number and that is it for key
36:42 - released so let's set the Y direction so
all we do here is take our Y velocity
36:50 - and set this equal to Y direction and
that's it for this method and then we're
36:59 - going to fill in the move method so
we're going to take the Y positioning
37:03 - equals y plus y velocity okay that is
everything for this class actually let's
37:15 - take a look to see if this works now
let's begin with paddle one which is on
37:20 - the Left I'm holding up W so if you just
press it
37:22 - real quick it only moves up by 10 pixels
and I'm moving it down however if you
37:27 - hold it down it starts to slide one
problem that we're running into though
37:32 - is that this can go off the screen so
we'll need to limit that so we'll work
37:37 - on that soon and then let's do this for
player 2 otherwise known as paddle 2 so
37:42 - now on the arrow keys I'm pressing up
and down cool so we know that that is
37:48 - working now to prevent the paddles from
going off the screen we're going to fill
37:54 - in a few things within the check
collision method of the game panel class
37:59 - so I'm just going to add a comment that
this stops paddles at I should call this
38:07 - window window edges okay so what we'll
check is if paddle 1 dot Y is less than
38:20 - or equal to 0 what we'll do is set
paddle 1 dot Y to equal 0 and the next
38:34 - thing we'll check is if paddle 1 dot Y
is greater than or equal to and this is
38:44 - a little more complicated so this is if
you're moving down so game underscore
38:51 - height minus the paddle underscore
height and if this is true we're going
39:01 - to take paddle 1 dot Y and set this
equal to game height - paddle height and
39:16 - let's do the same thing for paddle - so
paddle 2
39:27 - okay that looks good let's try this
again so let's test paddle one I'm
39:34 - trying to go off the screen and it's not
letting me it stops right at this border
39:38 - for our frame and let's do the same
thing for the bottom side all right so
39:43 - I'm pressing down but I can't move any
further so these are the bounds the
39:47 - boundaries of our game and let's try the
same thing for paddle - all right that
39:54 - looks good so it looks like our paddles
are fully functional so congratulations
39:59 - if you made it this far so let's work on
the ball next hold up you're not going
40:08 - anywhere because we forgot to fill in
the move method of the game panel class
40:12 - so let's take a closer examination of
these paddles so even though these
40:18 - paddles are functioning as they are
intended they are somewhat sluggish and
40:22 - slow so we can actually make their
movement more smooth and one way we can
40:27 - do that is call each of these individual
move methods after each iteration of our
40:33 - game loop and we do that right here
after each game loop cycle we're calling
40:38 - the move method of the game panel class
so right now let's just call paddle ones
40:44 - move method just to compare the
differences between the two now
40:48 - so here's paddle - it's somewhat slow
and it's kind of laggy and here is
40:54 - paddle one and it's way more smooth and
faster so let's also apply this to
41:00 - paddle - so we'll call paddle to move
and they are both silky smooth well at
41:08 - least for Javas swing graphical user
interface at least and let's do the same
41:13 - thing for ball because I'll probably
forget it if I don't do it now so ball
41:18 - dot move and that is it for the move
method of the game panel class for now
41:26 - with the ball dot move method I'm just
going to turn this into a comment just
41:30 - so we can run this to test it every once
in a while and then when we get to the
41:34 - point where we need this we'll just
remove the comment so let's go to the
41:39 - new ball method of the game panel class
so what we'll do is that since we
41:45 - already have our random random instance
we are going to finish instantiating
41:51 - this so random equals new random and we
won't quite need this yet and I'll
42:00 - explain why in just a moment so let's
say that we want this ball to start in
42:05 - the very center of our window so right
about here so we're going to pass in the
42:11 - coordinates of the ball that we have to
our ball constructor so we're going to
42:18 - take ball and ball equals new ball and
let's set the X positioning so that
42:26 - would be game underscore width divided
by 2 but we also want to subtract the
42:35 - ball diameter so minus ball underscore
diameter divided by 2 so this will
42:44 - appear in the middle of the x axis let's
do the same thing for the Y axis for now
42:51 - so that would be game underscore height
divided by 2 - ball diameter divided by
43:03 - 2 then let's also pass in the ball
diameter for the width and the same
43:11 - thing for the height so ball diameter
and ball diameter and then end this with
43:19 - a semicolon
ok then we need to fill in the
43:23 - constructor for the ball class so let's
head there next so we need to set up the
43:29 - parameters for this ball constructor and
they need to be the same as when we
43:33 - create this instance of ball so we have
the x position the Y position the width
43:40 - and the height however with a perfect
circle the width and the height are the
43:45 - same because that would be the diameter
so we just passed in ball diameter twice
43:49 - so let's go to the paddle constructor
and let's set up the parameters so int X
43:56 - int y int let's say with int pipe and
since ball is a subclass of the
44:06 - rectangle superclass we can call these
super constructors to assign these
44:11 - arguments for us so we're going to send
in X Y the width which is basically our
44:17 - ball diameter and height which is also
ball diameter all right so then within
44:24 - the constructor let's set a random
direction in which this ball is going to
44:29 - head so we have our own instance of the
random class within our ball class and
44:34 - this is also named random so random
equals new random and let's create an
44:43 - integer so this is going to be a local
variable for the ball constructor so int
44:48 - random X Direction is equal to random
dot next int and let's send in two so
45:02 - this is either going to be 0 or 1 if
it's 0 let's have this ball go left if
45:07 - it's 1 it's going to go right so after
this if random X Direction is equal to 0
45:19 - we'll have this ball go left so what
we'll type is random x-direction and
45:28 - will decrement this by 1 because it's
going to begin at 0 so this will just be
45:33 - a negative 1 and then let's set the
x-direction
45:38 - so we need to pass in a random
x-direction so set X direction and we're
45:44 - going to pass in our random direction
45:51 - okay let's do the same thing with the Y
direction so I'm going to copy this
45:57 - paste it change X to Y that can stay the
same
46:04 - random y-direction same thing here and
we're going to set y direction and pass
46:12 - in random y direction and that should be
good so let's go to set X direction so X
46:22 - velocity so we have an X velocity and a
Y velocity with our paddles we only had
46:28 - a Y velocity since they only move up and
down so X velocity equals the random
46:35 - x-direction that we receive so random
x-direction and our Y velocity equals
46:45 - random Y direction alright let's fill in
the move method so X plus equals our X
47:00 - velocity and y plus equals our Y
velocity and lastly we just need to draw
47:11 - this ball so let's set the color first
so g dot set color and let's make this
47:18 - white like a ping-pong ball so color dot
white and instead of a rectangle we can
47:25 - actually draw a circle so we're going to
use the g dot fill oval method so this
47:33 - will take X Y our height and width so
height and width are going to be the
47:41 - same because they are both the ball
diameter value which was 20 right here
47:47 - okay and then lastly we just need to
draw this ball so let's head to our game
47:53 - panel class and we are going to yeah we
can move this ball too so let's remove
47:59 - that comment and go to the draw method
and we're going to draw our ball so ball
48:05 - and we're going to call the draw method
and pass in our graphics G so let's take
48:12 - a look at what we have so far okay
here's our ball it's going kind of slow
48:18 - and it's just going to disappear off the
screen so we want to set some limits on
48:23 - the game boundaries for the ball so to
bounce the ball off the top and bottom
48:28 - window edges we're going to do this
within the check collision method of the
48:32 - game panel class so I'm just going to
add a comment that this section of our
48:36 - code of our method will bounce the ball
off the top and bottom window edges so
48:43 - what we'll check if the Y positioning of
our boss of ball dot y is less than or
48:51 - equal to zero
we'll have this if statement do this so
48:58 - ball dot set Y direction and we're going
to take our ball dot Y velocity and
49:11 - we're just going to reverse the velocity
by adding a minus sign so it's going to
49:16 - go in the opposite direction and let's
also do this for if ball dot Y is
49:24 - greater than or equal to game underscore
height but we also have to consider the
49:34 - balls diameter because it checks the top
left corner
49:37 - that's the y-coordinate so if ball dot y
is greater than or equal to game height
49:44 - minus ball diameter and then we're just
going to do the same thing where we're
49:55 - going to reverse the Y velocity okay
let's try this again so this is moving
50:03 - kind of slow I'm probably going to speed
this up a little bit next but you can
50:06 - see that yeah it bounced off the bottom
wall and the same thing should apply to
50:10 - the top wall as well but let's speed up
this ball a little bit so let's go to
50:15 - the ball class so I wasn't planning on
this but let's add one more variable and
50:20 - we'll call this speed actually better
yet initial speed that reminds me of
50:25 - initial D so initial speed and we'll
multiply
50:32 - our random x-direction when we set the
x-direction
50:35 - so we'll multiply random x-direction by
our initial speed and let's do this for
50:43 - y but we should probably assign a value
to this so let's begin at two because if
50:49 - we did one this would stay the same so
this should be a little bit faster now
50:53 - yeah
it's about twice as fast as what it was
50:57 - before let's try a higher number like
three okay yeah that's a lot faster now
51:04 - I think I'll stick with two to begin
with what you can adjust this to
51:08 - whatever number you like like 20 yeah
can't even really see that that was too
51:14 - fast for me I'll just stick with two for
now so that should be decent what we
51:18 - have to work on next is to check to see
if our ball collides with our paddle
51:23 - because right now it'll just go straight
through it kind of like so so we'll want
51:28 - to bounce this ball off these paddles
when they intersect and since we're
51:33 - using rectangles we can actually use the
intersects method which is actually kind
51:38 - of useful for this situation so let's go
to the Czech collision method of the
51:42 - game panel class and I'll add a comment
that this bounces ball off paddles so
51:53 - we're first going to check to see if our
ball is intersecting with paddle one so
51:58 - we're going to do this with an if
statement so if ball dot and we're going
52:03 - to use the intersects method since this
ball class is a subclass of the
52:09 - rectangle superclass it inherits all the
methods and properties of this rectangle
52:14 - class including the intersects method
and we'll pass in paddle one so this
52:19 - method is going to compare these two
objects to see if there is any collision
52:24 - between the two so if there is a
collision we're going to reverse reverse
52:29 - the velocity of the ball so we can
actually reassign this so ball dot X
52:35 - velocity and we're going to reassign
this width using the math classes
52:42 - absolute value method
it's just dot
52:46 - and we're going to pass in balls X
velocity so this will be negative and
52:56 - basically all we're doing is turning it
into a positive number I suppose you can
53:02 - always multiply this by negative one as
well but too late already wrote it so
53:07 - this is totally optional if you want to
increase the velocity after it bounces
53:12 - off a player's paddle you can increment
that by taking ball dot X velocity and
53:20 - you can increment this by one or a
different number I'll just add a note
53:24 - that this is optional for more
difficulty you can always leave it out
53:31 - to whatever you want to do all right
so let's also check the Y velocity so
53:37 - let's see if our Y velocity of the ball
is greater than 0 so if ball dot Y
53:46 - velocity is greater than zero
53:52 - well increment the Y velocity as well
for more difficulty so ball dot Y
54:01 - velocity plus plus and this is totally
optional too so I'll add a note so else
54:12 - we're going to decrease it so that means
if the Y velocity is negative that means
54:21 - it's going upwards so we're just going
to increase the upwards velocity so then
54:28 - we're going to set the X direction and
the y direction with these new values so
54:34 - ball dot set X direction and we're going
to pass in the ball dot X velocity as
54:46 - well as the ball dot set Y direction
54:54 - so ball dot Y velocity all right so
let's check this with paddle one so we
55:04 - need to wait for the ball to go left
though so we can actually test it okay
55:09 - so we can move the paddle up and down
and let's see if it bounces yep and it
55:12 - does and it moves a little bit faster
now because we added these two lines of
55:17 - code to increase the X&Y velocity of
this ball but this is totally optional
55:22 - if you want to add these two so let's
work on paddle two so let's copy this
55:29 - and paste it and we're going to change
paddle one to you paddle two and one
55:36 - less change that we need when we set the
X direction for this fall we're going to
55:41 - add a negative sign so we're going to
flip the X velocity so let's test this
55:46 - so they should bounce off the paddles
now yep and it gets a little bit faster
55:53 - too for more difficulty if you want to
keep that feature in all right so let's
56:00 - say it goes past the paddle so we want
some way for this to score and create a
56:06 - new ball for us so let's work on that
next
56:10 - we're going to head back to the check
collision method of the game panel class
56:14 - and let's add this maybe at the end so
this section is going to give a player
56:24 - one point and creates new paddles and
ball so we're going to check to see if
56:38 - the ball dot x value is less than or
equal to 0 that means that player to
56:47 - score at a point so that means that this
touched the left boundary so let's give
56:53 - player to a point so we have our score
class that we need to fill in still but
56:58 - we do have integer variables player 1
and player 2 so score dot player 2
57:06 - and we'll increment this by one and
let's call the new paddles method that
57:12 - we filled in already so that's at the
top here somewhere
57:16 - yep right here and then we're also going
to create a new ball so that is right
57:23 - here all right and then that is it
oh let's also uh system dot out dot
57:35 - print line the current score just so we
can be sure that this is working we can
57:39 - test it so we'll take this out later
okay let's see if player one squared at
57:46 - all so this is a little different if
ball dot X is greater than or equal to
57:53 - game underscore width and we need to
subtract the ball underscore diameter
58:05 - but I misspelled diameter there so
scored dot player one will be
58:13 - incremented by one and let's also
display the score for player one with a
58:18 - simple print line statement just to test
this I forgot to add something within
58:23 - the print line statement I'm just going
to add some text before this player two
58:29 - plus the score for player two and the
same thing for player one player 1 plus
58:36 - score of player one okay so I'm not
going to catch this ball so player two
58:45 - scored and they have one point and
player 1 scored as well and you can see
58:50 - that when a point is scored it's going
to reset the paddles to the middle and
58:55 - it's going to create a new ball for us
in a I would say random direction so
59:01 - another thing you can do to this ball
always starts in the middle if you want
59:06 - you can actually have this start
somewhere randomly on the y-axis so this
59:11 - part is optional if you want some more
difficulty so let's head back to where
59:16 - is it the new ball method of the
game panel class and we're going to
59:22 - create an instance of the random class
within the new vault method so if you
59:28 - want this ball to start randomly on the
y-axis right now it begins
59:33 - right in the center so we're going to
change the Y positioning within the
59:38 - constructor for our ball object so it
looks like that is right here so let's
59:45 - use this instance of the random class so
we're going to type in random dot next
59:51 - int and we'll need to set some values so
this is going to be on a range of the
60:00 - game underscore height but we also need
to subtract the ball diameter so minus
60:07 - ball underscore diameter this is totally
optional but I think it would be fun and
60:13 - I keep the spelling diameter alright
let's test this so yeah it's no longer
60:19 - appearing right in the middle of the
y-axis it's appearing somewhat randomly
60:24 - okay let's head to the scorer class and
I believe that is it so with our score
60:31 - constructor we passed in a game width
and a game height so let's just assign
60:35 - these to our game with and game high
variables of the score class so these
60:40 - are static so what we can type in here
is the name of the class instead of the
60:44 - name of this instance so score dot game
underscore width is equal to game
60:53 - underscore width but I can never spell
ever okay then let's do this for height
61:02 - so score dot game height equals game
underscore height all right so let's go
61:13 - to the draw method so let's actually
draw the score on the screen so let's
61:20 - set the color G dot set color and maybe
we'll make this white so color dot white
61:30 - and let's set a font Shoji set font
let's pass in a new font and I will pick
61:42 - the font style of I believe it's
pronounced console us I don't know
61:48 - I'm probably mispronouncing that and
let's have this font be plain and let's
61:56 - pick a font size so 60
let's also draw a line like right down
62:03 - the middle of this game so that would be
G dot draw line and we have a few
62:14 - coordinates to fill in the starting x
and y position as well as the ending x
62:19 - and y position so we're going to start
this right in the middle of the x axis
62:24 - so we're going to take our game
underscore width and divide this by 2
62:29 - and for the starting y position that
will be 0 now for the x position of the
62:38 - ending position this is going to be the
same game underscore width divided by 2
62:46 - and the y position is going to be the
game underscore height and let's test
62:54 - this but we forgot to add something so
let's go back to the game panel and we
63:03 - forgot to draw the score so let's add
that score dot draw so here it is that
63:12 - line that we wanted to draw that divides
our game panel into right down the
63:17 - center so lastly let's draw the score
maybe in the top around here somewhere
63:22 - so let's head to the score class and I
already kind of measured this out so
63:28 - this is what I came up with that was
decent so I'm going to take G and use
63:33 - the draw string method so we can pass in
a string the x position and the y
63:40 - position so I'm going to
and in the string dot value of and we're
63:51 - going to take player 1 so this is going
to be the score of player 1 we're
63:57 - turning it into a string we're
converting it and then we'll display
64:00 - this we're let's see game underscore
width divided by 2 and there's a little
64:10 - bit of an offset so I'm just going to
subtract 85 from this because it looked
64:16 - nice in this position and we'll place
this where Y is 50 so let's do the same
64:21 - thing for player 2 so player 2 and for
the exposition of the second string I'm
64:29 - just going to change this from minus 85
to plus 20 so let's run this and I just
64:35 - want to explain a few things so here are
the two scores and you can see right now
64:39 - that they are not quite even from the
middle line so what I'm actually
64:44 - planning to make this look a little more
arcade-like is that I want a number for
64:49 - the tens digit of the score as well as a
single-stage it to be displayed so
64:55 - basically I want this score to proceed
with a zero for the tens digit so to
65:01 - make this look a little more rk2 like
I'm actually going to take the string
65:06 - value of player 1 and player 2 again and
then add a few things so for the first
65:15 - portion of string dot value of player 1
I'm going to divide this by 10 so it's
65:21 - initially going to begin at 0 and for
player 1 I'm going to add for the second
65:27 - portion modulus 10 so this will give us
the remainder of player 1 modulus 10 and
65:34 - then I'm also going to do this for
player 2 so string dot value of player 2
65:43 - divided by 10 plus the string value of
player 2 modulus 10 so let's test this
65:51 - so we have two digits the first is the
tens position and the other digit on the
65:57 - is the singles position so I'm just
going to fast forward this video until
66:02 - we can actually see this I reached the
tenth position here we are it went from
66:08 - zero nine to one zero so we know that
this is working fine all right guys well
66:13 - that should be everything so let's run
this one last time
66:52 - so that will be the end of this video
congratulations by making it this far by
66:56 - the way it was a long video if you would
like a copy of all this code I'll post
67:00 - all of this in the comments down below
but yeah that's how you can create a
67:04 - simple game of pong using Java hey you
yeah I'm talking to you if you learn
67:11 - something new then you can help me help
you in 3 easy steps by smashing that
67:17 - like button drop a comment down below
and subscribe if you'd like to become a
67:21 - fellow bro
67:29 - you
67:37 - you