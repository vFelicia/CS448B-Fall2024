00:02 - all right
00:03 - interfaces an interface is much like a
00:05 - parent class
00:06 - or base class it defines a sort of
00:09 - contract
00:10 - that all classes inheriting from need to
00:12 - follow
00:13 - an interface can contain properties
00:15 - methods events
00:17 - and if there's any of those declared
00:18 - within an interface
00:20 - anything that inherits from that
00:22 - interface needs to be implemented within
00:24 - an inheriting class
00:26 - an interface declares what a class
00:28 - should have and the class that it
00:30 - inherits from
00:31 - defines how it should do it exactly so
00:34 - here's an example
00:35 - we'll create three classes rabbit hawk
00:38 - and fish and two interfaces prey
00:42 - and predator
00:48 - all right now let's create two
00:50 - interfaces to create an interface you
00:52 - type
00:53 - interface and then the name of the
00:54 - interface however a common naming
00:57 - convention with
00:58 - interfaces is that you precede the
01:00 - interface name
01:01 - with capital i so if we would like a
01:04 - prey interface
01:05 - we would type i pray and then let's
01:08 - create a predator interface
01:11 - interface i predator
01:14 - now with these interfaces we can pretty
01:16 - much declare anything within these
01:17 - interfaces but if one of these classes
01:20 - would like to inherit from this
01:21 - interface
01:22 - they need to implement anything declared
01:24 - within them
01:25 - so let's say that if your prey then you
01:28 - need a method
01:29 - to flee because you're fleeing from
01:31 - predators i'm going to declare
01:33 - a flea method void flee
01:36 - we will declare it but not implement it
01:39 - implementing
01:40 - this method is the job of the inheriting
01:42 - class that would like to use
01:43 - this interface let's say that rabbits
01:46 - will inherit this interface i pray
01:49 - colon i pray and in order to do so
01:54 - we need to implement this method of
01:56 - fleet within the rabbit class in order
01:57 - to use it
01:59 - public void flea
02:03 - and then be sure to add a body to this
02:04 - method so when we invoke this method
02:08 - let's write the rabbit runs away
02:12 - okay now we can create a rabbit object
02:16 - rabbit rabbit equals new
02:20 - rabbit and i bet there's a flea method
02:23 - rabbit dot flea
02:27 - and let's try it the rabbit runs away
02:30 - now let's have our hawk class inherit
02:32 - this predator interface
02:34 - now with our predator interface let's
02:37 - create a method
02:38 - to hunt void hunt
02:41 - we will declare it but not implemented
02:43 - implementing this method
02:45 - is the job of the classes inheriting
02:47 - this interface
02:48 - so hawk will inherit the i
02:51 - predator interface but we need to
02:54 - implement
02:54 - that hunt method public
02:57 - void hunt
03:01 - and then let's display the hawk
03:04 - is searching for food
03:08 - and we can create a hawk object hawk
03:11 - hawk equals new hawk
03:15 - so let's take a look at our hawk object
03:18 - hawk
03:19 - dot and there's no flea method because
03:21 - we're not implementing
03:22 - the prey interface we're implementing
03:25 - the predator interface
03:26 - so there is a hunt method and not a flea
03:29 - method
03:31 - hawk.hunt
03:34 - the hawk is searching for food now with
03:36 - interfaces
03:37 - you can inherit more than one unlike
03:39 - with standard inheritance
03:40 - so fish they could be both prey and
03:43 - predators
03:44 - two inherit two interfaces after the
03:46 - colon you can separate each with a comma
03:49 - so fish will inherit the i prey and i
03:52 - predator interfaces but now they need to
03:55 - implement
03:56 - both of these methods flea and hunt so
03:58 - let's do so
04:00 - public void flea
04:06 - the fish swims away
04:09 - and now we need to implement that hunt
04:12 - method
04:14 - public void hunt
04:21 - the fish is searching
04:25 - for smaller fish
04:28 - all right now let's create a fish object
04:31 - fish
04:32 - fish equals new fish
04:38 - so fish have both a flea and a hunt
04:41 - method
04:42 - fish dot flea fish dot hunt
04:47 - the fish swims away the fish is
04:49 - searching for smaller fish
04:51 - so an interface defines a sort of
04:53 - contract that all class is inheriting
04:56 - from
04:56 - should follow an interface declares what
04:59 - a class
05:00 - should have and the inheritance class
05:02 - defines
05:03 - how it should do it the benefits of
05:05 - using interfaces for one
05:07 - is that you can inherit multiple
05:09 - interfaces
05:10 - unlike with standard inheritance there's
05:12 - added security
05:14 - and this gives us a plug-and-play style
05:16 - of coding because
05:18 - anything that has the same interface
05:20 - will definitely have the same
05:22 - implemented methods and properties so
05:24 - you can swap these out for like a
05:25 - different creature if you would like
05:27 - so yeah those are interfaces if you
05:29 - found this video helpful please be sure
05:31 - to give this video a thumbs up
05:32 - leave a random comment down below and
05:34 - subscribe if you'd like to become a
05:35 - fellow bro