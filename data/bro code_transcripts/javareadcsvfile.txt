00:00 - how's it going everybody it's a bro here
hope you're doing well
00:03 - and in this video I'm going to teach you
guys how we can read a CSV file using
00:07 - Java so sit back relax and enjoy the
show if you find this video helpful
00:14 - please remember to Like comment and
subscribe
00:18 - your support will help keep this channel
running alright everybody so CSV this is
00:23 - an acronym for comma separated values
it's a text file that uses a comma to
00:29 - separate values so let's say that you're
using either Microsoft Excel or maybe
00:34 - Google sheets
so there's rows and there's columns and
00:37 - there's individual values within each of
these boxes and we can actually save
00:42 - these documents as a CSV file and it's
going to be a plain text file and each
00:47 - value is separated with a comma so what
we can actually do is use a Java program
00:52 - or create a Java program that can read
these individual values so here I'm
00:57 - using Google sheets if you have access
to Google sheets or maybe Microsoft
01:01 - Excel we can create a CSV file so let's
make up some students so let's just
01:07 - create three I suppose so let's create a
student named Chad Karen and how about
01:13 - Snoop Dogg and then let's assign some
grades to each of these students so
01:18 - we'll say that Chad got 61% Karen failed
at 50% and that Snoop Dogg got 100% so
01:27 - this is pass or fail let's say that Chad
passed and then Karen failed and then
01:36 - Snoop Dogg passed ok so I can actually
save this document as a CSV file so I'm
01:44 - just going to go to file then where is
it download here it is CSV comma
01:53 - separated values so I'm just going to
save this on my desktop no here we are
01:59 - on my desktop so this is that file I
downloaded so let's right click on this
02:03 - and take a look so it's a CSV file and
if you were to open this with let's say
02:09 - notepad this is what you'll see so I'm
just going to zoom in
02:12 - a little bit so here are all the values
from that table that we had they're all
02:18 - separated with a comma and they're all
organized by individual rows so what
02:23 - we're going to be doing is uploading
this plain text file line-by-line and
02:27 - splitting each of these lines by this
comma so that we can get individual
02:32 - values so let's head back to our Java
program and get started so here I am
02:37 - within my IDE
what I'm going to do just for
02:40 - convenience is actually copy our CSV
file then go to the source folder of my
02:46 - project folder and then just paste it
within here but if you want to leave it
02:50 - on your desktop that is completely fine
so the first thing that we're going to
02:54 - do is create a string that will serve as
the file name so we'll declare a string
03:00 - variable named file equals and then the
file name or file path here so since
03:07 - this is within the source folder of my
project folder what I'm going to type is
03:12 - SRC and then two backslashes
students dot CSV so if this is on your
03:20 - desktop you'll probably write something
such as like c colon yada yada yada just
03:27 - put the file path within there basically
but since this is within my source
03:31 - folder this is all i have to type really
all right so let's create a
03:35 - bufferedreader we're just going to
declare it right now
03:38 - so buffered reader this will be named
reader and we'll set this equal to null
03:45 - for now and then we'll create a string
variable named line and this will just
03:52 - be blank basically for now we'll be
using this to read each line of our file
03:57 - okay let's create a try-catch and
finally black so tri followed by catch
04:05 - and we need a set of parentheses for
this and then within the parentheses
04:10 - we're just going to catch all exceptions
although it's better to list them
04:14 - individually and then a finally block
okay let's begin with the try block the
04:21 - first line is that we're going to finish
instantiating our reader so reader
04:26 - equals new buffered reader okay then
within the parentheses we're going to
04:36 - pass in an anonymous file reader so new
file reader then within the parentheses
04:44 - of this file reader we will pass in our
file name and that's it for this line
04:51 - next let's create a while loop this
while loop is going to continuously read
04:56 - the next line so while and then for our
condition what we're going to type here
05:03 - I'm just going to add another set of
parentheses within here line equals
05:09 - reader dot read line method so we're
going to read the next line each time
05:17 - and then what we're going to do is check
to see if this is not null so basically
05:23 - with this while loop we're going to
continue reading the next line and if
05:27 - there is no next line we'll break out of
the while loop and continue on with the
05:31 - rest of the program
so what we're going to write within the
05:34 - while loop is that we're going to create
an array of strings so string then a set
05:39 - of straight braces and we'll call this
row equals our line and we're going to
05:45 - use the split method and then we can
specify a character that's a string that
05:51 - we want to split our line at so we were
going to split this line at all commas
05:57 - and then we're going to take all of
these values and assign them to an array
06:02 - of strings and then what we'll do is
actually display all these and we can
06:06 - use a for each loop also known as the
enhanced for loop so for we're going to
06:12 - display strings so list that as the data
type and we'll just display index
06:17 - doesn't really matter what you type here
then colon row and we can use maybe a
06:24 - printf statement so system dot out dot
print F I tend to like printf for
06:32 - printing tables so we need a format
specifier so we're going to
06:38 - type n % s because we're displaying
strings
06:42 - let's allocate 10 spaces of room for
each of these strings and if we want to
06:49 - left justify them we put a minus sign
here and then we are just going to
06:53 - display whatever is at our index and
then after the for loop when we escape
07:01 - out of this we will just do a simple
print line statement okay that's
07:06 - everything for our try block let's move
on to the catch block quite honestly we
07:11 - don't necessarily need to write anything
within the catch block but I'm just
07:14 - going to display a dot print stack trace
so if something does go wrong this is
07:19 - just going to display what went wrong
exactly now with this finally block what
07:24 - we're going to do is close our reader so
typically with programs if you open a
07:29 - scanner or a reader it's good practice
to close those at the very end so within
07:34 - our finally block we're just going to
type in the name of our reader dot and
07:38 - use the close method so that's pretty
much it however we do have to surround
07:43 - this with a try and catch block so make
sure you do that now before we run this
07:47 - program also make sure that you have
this import because I was a dummy and
07:51 - forgot to mention that at the beginning
of this video so let's read this file
07:55 - now and here it is everything that was
in our CSV file so everything that was
08:01 - separated with a comma is now split and
it was placed into an array of strings
08:07 - that we displayed so they're all
organized by rows and columns so we have
08:11 - the row students grades and if they
passed or they failed so another thing
08:16 - that you can do is actually you could
store these within some sort of 2d array
08:20 - or a collection if you want to save
these or edit them so yeah that's
08:24 - basically one way that you can read a
CSV file if you would like a copy of all
08:30 - this code I'll post this in the comments
down below but yeah that's how to read a
08:33 - CSV file using Java hey you yeah I'm
talking to you if you learn something
08:40 - new then you can help me help you in
three easy steps
08:44 - by smashing that like button drop a
comment down below
08:48 - and subscribe if you'd like to become a
fellow bro
09:04 - you