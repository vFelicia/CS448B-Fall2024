00:01 - hey guys in this topic we're going to
00:03 - create a banking program for practice
00:06 - we'll be able to deposit money withdraw
00:08 - money and show a balance this is more or
00:10 - less just for practice let's begin by
00:12 - creating our functions
00:15 - void show
00:17 - balance
00:19 - there will be one parameter double
00:21 - balance
00:22 - whatever our bank account balance is
00:24 - we'll show it
00:27 - the return type is double
00:29 - deposit
00:31 - no parameters
00:34 - double
00:35 - withdraw
00:36 - and there will be one parameter double
00:39 - balance
00:41 - let's fill in a few things within the
00:43 - main function
00:45 - double
00:46 - balance and i will go ahead and set this
00:48 - to zero
00:49 - as well as int
00:51 - choice i will set that to zero as well
00:54 - we'll use a switch to determine if the
00:56 - user wants to show their balance
00:58 - make a deposit a withdrawal or exit
01:02 - let's display some output some prompts
01:05 - standard output
01:07 - enter your choice
01:12 - and i'm just going to add some text
01:14 - decorations because i think that'll be
01:15 - cool
01:17 - maybe a bunch of asterisks
01:20 - and one more
01:24 - okay
01:24 - we have option one
01:26 - one
01:28 - show
01:29 - balance
01:34 - two will be deposit money
01:41 - three is withdrawal money
01:49 - four will be exit
01:57 - then we'll accept some user input
01:58 - standard
02:00 - input
02:01 - choice
02:04 - now we're going to create a switch
02:06 - we're examining the user's choice
02:10 - switch
02:13 - we're examining our choice against many
02:15 - matching cases
02:17 - we have case one
02:19 - case two
02:22 - three
02:24 - four
02:25 - then a default case
02:29 - okay case one the user wants to show
02:31 - their balance we'll invoke the show
02:34 - balance function but we need to pass in
02:37 - our balance
02:41 - balance
02:43 - and then we are going to break
02:46 - case two the user wants to deposit money
02:50 - so we're going to take our balance
02:53 - equals
02:54 - balance
02:56 - plus our deposit function
02:58 - so deposit will return a double
03:01 - right here
03:03 - so we're going to add that to our
03:04 - balance once we verify it actually we
03:07 - can shorten this to balance plus equals
03:10 - whatever value is returned with the
03:12 - deposit function
03:14 - then we are going to break
03:17 - case three withdraw money
03:20 - balance
03:21 - minus equals
03:24 - the withdraw function
03:25 - pass in our balance
03:28 - we're withdrawing money from our balance
03:30 - once we verify it
03:33 - then we're going to break
03:35 - we'll exit with case 4
03:37 - i'll display some output standard output
03:41 - thanks for visiting
03:47 - then i'm going to break
03:50 - okay default case
03:52 - standard
03:53 - output
03:56 - invalid
03:57 - choice
04:00 - okay now we're going to place all of
04:02 - this code within a do while loop
04:08 - do all of this
04:10 - while some condition is true
04:12 - so let's take all this code
04:14 - cut it
04:16 - put it within that do while loop
04:19 - let me just format this a little bit
04:24 - the condition will be while choice does
04:27 - not equal four
04:29 - four is what we used to exit
04:31 - we'll need to add some function
04:32 - definitions
04:35 - but i'm going to fill these in later
04:39 - we'll need to return something
04:41 - so let's return zero for the time being
04:44 - for two of these functions at least
04:46 - return zero
04:48 - okay let's run and compile this just to
04:50 - test our do while loop
04:53 - okay enter your choice uh one show
04:56 - balance that doesn't show our balance
04:58 - yet but it will deposit money withdraw
05:02 - now we should be able to exit by
05:03 - pressing four
05:05 - thanks for visiting okay so we know that
05:07 - the do while loop is working
05:09 - let's fill in our functions let's begin
05:10 - with show balance
05:13 - now with the show balance function we're
05:15 - receiving our balance as an argument
05:18 - so i'm going to display standard output
05:23 - your
05:25 - balance
05:26 - is
05:28 - dollar sign or some other currency if
05:30 - you choose
05:32 - i'll display our balance
05:34 - then add a new line
05:40 - so let's say we have 123 dollars in our
05:44 - account
05:47 - i'm going to show my balance
05:50 - 123. even but i would like to display
05:53 - cents i'll need two decimal places after
05:55 - the decimal
05:57 - so there's one thing we can include
05:59 - we'll include this header file
06:02 - include
06:04 - io man ip
06:06 - there's a function in here to set some
06:08 - precision for floating point numbers
06:11 - i'm going to make this change after the
06:13 - dollar sign
06:16 - standard
06:18 - set
06:18 - precision
06:20 - pass in 2 for 2 decimal places
06:25 - then add
06:27 - standard
06:28 - fixed
06:30 - this will display our balance up to 2
06:32 - decimal places after the decimal point
06:35 - so let's try that again
06:38 - okay show balance 123 dollars and zero
06:42 - cents
06:43 - if i were to change this to
06:46 - 123.01 we should display two decimal
06:49 - places
06:52 - yep 123 dollars and one cent
06:55 - okay that is the show balance function
06:58 - let's work on the deposit function
07:01 - okay now we're within the deposit
07:03 - function i'm going to create a local
07:05 - variable named amount
07:07 - set this equal to zero
07:10 - we'll ask the user how much they would
07:11 - like to deposit standard output
07:15 - enter amount
07:17 - to be
07:18 - deposited
07:23 - standard
07:24 - input
07:26 - r amount
07:28 - so i'm gonna set balance back to zero
07:31 - then let's test it
07:34 - show balance
07:35 - one your balance is zero dollars and
07:37 - zero cents i would like to make a
07:39 - deposit
07:40 - uh 420
07:42 - 69 cents
07:46 - okay now i would like to show my balance
07:47 - after we make a deposit
07:52 - so within case two after making a
07:54 - deposit let's show our balance pass in
07:57 - the balance variable
07:59 - now let's do so after withdrawal 2.
08:03 - okay let's try that again
08:07 - show balance zero dollars zero cents
08:09 - make a deposit
08:11 - 420 69 cents
08:14 - your balance is zero dollars and zero
08:16 - cents
08:17 - so what we're going to do is return our
08:20 - amount at the end of this function
08:22 - return amount
08:25 - 420 dollars 69 cents
08:28 - all right we have our balance
08:31 - the user is able to enter in negative
08:33 - money enter amount to be deposited
08:35 - negative one thousand your balance is
08:38 - now negative one thousand dollars
08:40 - we need to prevent somebody from making
08:42 - a negative deposit
08:45 - so before we return our amount let's use
08:47 - an if statement
08:50 - if
08:52 - amount
08:53 - is greater than zero
08:55 - then we will return the amount
09:02 - else
09:04 - standard
09:06 - output that's
09:08 - not a valid amount
09:14 - then let's return zero
09:16 - okay let's try that again
09:19 - deposit money negative one thousand
09:21 - dollars
09:24 - that's not a valid amount your balance
09:26 - is zero dollars
09:28 - i'm just going to add a new line
09:30 - like right here
09:31 - then let's make a legitimate deposit
09:33 - deposit money i will deposit one
09:36 - thousand dollars in one cent
09:38 - your balance is one thousand dollars and
09:40 - one cent
09:41 - okay that is the deposit function that
09:43 - is complete
09:45 - then we have the withdrawal function
09:47 - we'll create a local variable named
09:50 - amount of the double data type
09:52 - we'll create a prompt standard output
09:56 - enter amount to be withdrawn
10:03 - standard input
10:05 - amount
10:08 - at the end of this program we will
10:09 - return amount
10:12 - okay let's test it
10:13 - okay i need to deposit some money first
10:15 - i will deposit one thousand dollars and
10:18 - one cent
10:20 - then let's withdraw money
10:22 - i will withdraw one hundred dollars and
10:25 - one cent
10:26 - my new balance is nine hundred dollars
10:28 - but we can overdraw our account still so
10:31 - i'm going to withdraw a million dollars
10:34 - and one cent
10:36 - our balance shouldn't be negative so
10:38 - let's prevent our user from overdrafting
10:40 - their account
10:41 - within our withdrawal function let's add
10:43 - an if statement
10:45 - if amount
10:46 - is greater than our balance
10:49 - will display
10:53 - insufficient
10:56 - funds
11:01 - then we will return zero
11:06 - okay i'm going to withdraw
11:08 - one million dollars
11:10 - and one cent
11:13 - insufficient funds your balance is zero
11:16 - okay now what if the user would like to
11:18 - deposit negative money withdraw money
11:21 - negative one thousand
11:24 - your balance is one thousand dollars
11:26 - we'll need to make sure that the amount
11:28 - is a legitimate amount i'll add an elsif
11:30 - statement
11:32 - if amount
11:34 - is less than zero
11:38 - standard output
11:41 - that's not a valid amount
11:48 - now else
11:50 - we will return the amount to be
11:52 - withdrawn
11:56 - then within the elsif statement we'll
11:57 - need to return zero
12:00 - there
12:02 - okay let's withdraw money
12:04 - enter amount to be withdrawn negative
12:06 - one thousand dollars
12:08 - that's not a valid amount that's good
12:10 - let's withdraw again
12:12 - i would like to withdraw 100
12:15 - insufficient funds my balance is zero
12:18 - let's deposit some money
12:20 - 99.99
12:22 - our balance is 99.90
12:24 - let's withdraw again
12:26 - let's try and withdraw 100
12:28 - nope we can't
12:30 - let's withdraw again 99.99
12:33 - your balance is zero that's good then
12:35 - let's exit
12:39 - press 4 to exit thanks for visiting okay
12:41 - so these functions are done
12:44 - there's just one more thing we should
12:46 - add
12:48 - if i type in some characters like the
12:50 - word pizza well this will break our
12:52 - program
12:54 - we'll want to clear the input buffer so
12:56 - after our choice let's add these two
12:58 - lines
13:00 - standard
13:02 - input dot clear function
13:06 - so i haven't talked about this function
13:08 - this function will reset any error flags
13:10 - when the standard input fails to
13:12 - interpret the input then follow this
13:14 - with
13:15 - f
13:16 - flush
13:18 - this is a function pass in standard
13:21 - input this will clear the input buffer
13:23 - basically speaking once we hit enter we
13:25 - have a new line character within our
13:27 - input buffer so we just need to flush
13:29 - that and get rid of it that should
13:30 - prevent our program from going crazy so
13:33 - let's type in some characters
13:36 - invalid choice cool then i would like to
13:38 - exit
13:40 - all right everybody that is a banking
13:42 - program for some practice
13:44 - if you would like a copy of this code
13:45 - i'll post this in the comments section
13:47 - down below and well yeah that's a
13:48 - banking practice program in c plus plus