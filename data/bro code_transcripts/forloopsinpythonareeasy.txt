00:00 - hey everybody in this topic I need to
00:02 - explain for Loops a for Loop will
00:04 - execute a block of code a fixed number
00:07 - of times you can iterate over a range a
00:10 - string a sequence anything that is
00:13 - considered iterable I'll have more
00:15 - examples for you in future topics there
00:17 - is a lot of overlap where you could use
00:19 - either a while loop or a for Loop but
00:21 - for Loops tend to be better in
00:22 - situations where you have to do
00:24 - something only a fixed number of times
00:26 - here's an example suppose we need to
00:28 - count to ten if we were to use a for
00:30 - Loop we could write something like this
00:32 - we would type four
00:34 - then we would need some sort of counter
00:36 - typically you see people write X
00:38 - 4 x in then we will use the range
00:43 - function
00:44 - what number would we like to start at
00:47 - I would like to start at one
00:49 - then count to ten but the second number
00:52 - is exclusive so really we're going to
00:54 - write 11 if we want to count to 10.
00:57 - so then colon then hit enter whatever
01:00 - code you would like to repeat a certain
01:01 - number of times you will list underneath
01:03 - the for Loop and make sure the code is
01:05 - indented too I will print whatever our
01:08 - counter X is when I run this code we
01:11 - will begin at 1 then stop once we reach
01:14 - 11.
01:16 - so yeah there we are we have been going
01:18 - at one and we have counted all the way
01:20 - to ten so that's the basic Syntax for a
01:22 - for Loop four some counter really you
01:25 - can name this anything sometimes you'll
01:27 - see people name this as counter
01:30 - and that would work too but let's stick
01:32 - with x
01:33 - in
01:34 - some range where would we like to begin
01:37 - where do we stop
01:39 - okay now let's count backwards let's
01:41 - start at 10 then count down to zero when
01:44 - we escape the for Loop let's print
01:47 - Happy New Year
01:51 - when we print Happy New Year we are
01:53 - outside of the for Loop to count
01:55 - backwards you can enclose your range
01:57 - function within the Reversed function
02:00 - reversed
02:05 - so we begin at 10 count down to one then
02:08 - print happy New Year in this case two
02:11 - count backwards you would enclose the
02:13 - range function within the Reversed
02:15 - function there is an additional
02:16 - parameter too you could add that is the
02:19 - step if you would like to count by twos
02:21 - you would add comma two
02:24 - so I'm going to get rid of Happy New
02:26 - Year
02:27 - let's print the numbers 1 through 10 but
02:30 - we will count by twos
02:32 - and this does begin at one though so one
02:35 - three five seven nine if you were to
02:38 - change the step to three you would count
02:39 - by threes
02:41 - beginning at one four seven ten
02:44 - so the range function isn't the only
02:46 - thing you can iterate over you can
02:48 - iterate over a string let's say we have
02:50 - a credit card number
02:51 - credit card equals I'll make up some
02:55 - credit card number with dashes
03:00 - that is good enough
03:02 - for X in credit card print x x will hold
03:07 - our current position
03:09 - at first it'll be one then two three
03:11 - four dash so on and so forth so here's
03:14 - our credit card number one two three
03:16 - four dash five six seven eight I think
03:19 - you get the idea so you can iterate over
03:22 - a string with the for loop as well we'll
03:24 - have a few projects involving that there
03:26 - are two useful keywords as well these
03:28 - aren't exclusive to for Loops you can
03:30 - use these within while Loops as well
03:31 - they are continue and break suppose we
03:35 - are going to count to 20.
03:36 - 4X in range we will begin at 1
03:41 - stop at 21. I think this is kind of a
03:44 - dumb example but it gets the point
03:46 - across 13 is considered an unlucky
03:48 - number right what if our counter reaches
03:50 - 13 I would like to skip over it well we
03:53 - can do that with the continue keyword
03:56 - if x is equal to 13 we will continue and
04:01 - skip over that iteration
04:03 - else we will print whatever our counter
04:06 - is
04:07 - so let's take a look
04:10 - yeah we have the numbers 1 through 20
04:12 - but we have skipped the number 13.
04:15 - to skip over an iteration you can use
04:18 - the continue keyword
04:19 - whereas the break keyword we will break
04:22 - out of this Loop entirely
04:24 - if x is equal to 13 then break
04:29 - so yeah we have only counted to 12. once
04:32 - we reach 13 we have escaped the loop
04:35 - so yeah everybody those are for Loops
04:37 - you can execute a block of code a fixed
04:40 - number of times you can iterate over a
04:43 - range a string a sequence anything that
04:46 - is considered iterable there is a lot of
04:48 - overlap where you could use either a
04:50 - while loop or a for Loop while Loops
04:52 - tend to be better if you need to execute
04:54 - something possibly infinite amount of
04:56 - times such as when you're accepting user
04:58 - input for example but yeah everybody
05:00 - those are for Loops in Python