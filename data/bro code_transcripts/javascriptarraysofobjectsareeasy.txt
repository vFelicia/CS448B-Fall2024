00:00 - hey what's up everybody so in today's
00:02 - video I'm going to show you how we can
00:03 - work with an array of objects in
00:04 - JavaScript what we'll do is create an
00:07 - array of fruit objects we'll create five
00:10 - fruit objects to create an object you
00:12 - need a set of curly braces each object
00:15 - will be comma
00:17 - separated just for my own readability
00:20 - I'm going to place each object on a new
00:23 - line objects can have their own unique
00:26 - properties and methods our first fruit
00:28 - object will have a name name of
00:32 - Apple a
00:34 - color of red and calories meaning
00:39 - calories per serving of
00:42 - 95 this is our first object let's copy
00:46 - these properties paste them for object
00:47 - two change name to be orange color will
00:51 - also be
00:54 - orange calories
00:56 - 45 object three name will be banana
01:00 - color yellow calories
01:05 - 105 object
01:07 - 4 coconut color white calories
01:13 - 159 then our last object will be
01:18 - pineapple color yellow calories
01:23 - 37 all right and here is our array of
01:26 - objects there's a lot we can do with
01:28 - this if you ever need a property within
01:30 - one of these objects of your array you
01:32 - would take the array in this case fruits
01:35 - add an index number dot the name of the
01:38 - property for example name I need the
01:41 - name property of the first object which
01:44 - would be Apple so let's test that
01:48 - console.log what is the name property of
01:52 - our array fruits at index zero that
01:54 - would be apple one is orange two is
01:58 - banana three is is coconut for pineapple
02:03 - let's select a different property let's
02:05 - go with the
02:07 - calories
02:09 - 95
02:11 - 45 105
02:14 - 159 37 that's how to access a property
02:18 - within an array of objects to add a new
02:20 - object you can use the push method let's
02:23 - take our array of fruits use the push
02:26 - method we will push a new object into
02:29 - our array
02:31 - the name will be
02:34 - grapes
02:36 - Color
02:39 - Purple
02:40 - calories
02:43 - 62 then let's console.log
02:48 - rray console.log fruits so we have six
02:53 - Apple orange banana coconut pineapple
02:55 - and grapes uh which I misspelled
02:58 - grap you can use the pop method to
03:01 - remove an
03:02 - element fruits. pop this should remove
03:08 - pineapple Apple orange banana coconut no
03:11 - pineapple or splice splice will remove
03:14 - elements at certain indices fruits.
03:20 - splice let's select indices 1 through
03:23 - two all we're left with is Apple coconut
03:27 - pineapple you can use the four method to
03:30 - Loop through the elements of your array
03:32 - let's display each object's name
03:35 - fruits. for each we need a call back a
03:39 - function expression or an arrow function
03:42 - let's use an arrow function for every
03:44 - fruit do this
03:47 - console.log each fruit this will return
03:51 - entire
03:52 - objects for one of the properties we'll
03:55 - select dot the property name we have
03:59 - have all the fruit
04:01 - names let's go with the
04:03 - colors and the
04:06 - calories there we
04:08 - are there's also the map method the map
04:11 - method will run each element through a
04:13 - function and return a new array let's
04:15 - create an array of fruit names const
04:18 - fruit names equals take our array of
04:21 - fruits use the built-in map method we'll
04:25 - use an arrow function for every
04:28 - fruit Arrow
04:30 - return the fruits
04:32 - name then we will
04:37 - console.log our array of fruit
04:40 - names and here's our array of fruit
04:43 - names let's do this with
04:45 - colors fruit
04:49 - colors return every color property of
04:53 - each
04:53 - fruit then console.log are fruit
04:58 - colors red orange yellow white yellow
05:01 - let's do this with
05:03 - calories fruit
05:06 - calories return each calories
05:10 - property
05:11 - console.log our fruit calories
05:14 - array so the map method will return a
05:17 - new array let's cover filter filter will
05:21 - return a new array after using each
05:23 - element and checking a condition let's
05:26 - return a new array where the color of
05:28 - each fruit is yellow there's two const
05:32 - yellow
05:33 - fruits equals take our array of
05:37 - fruits use the filter method we have one
05:40 - parameter a fruit Arrow then a condition
05:45 - we'll return this fruit if the fruit's
05:48 - color property is strictly equal to
05:54 - Yellow then
05:56 - console.log array of yellow fruit
06:00 - and there's two bananas and pineapples
06:03 - their colors are both yellow let's
06:06 - create a new array of any fruits that
06:08 - are low in calories where the calories
06:10 - are below
06:12 - 100 const low cal fruits take our array
06:17 - of fruits use the built-in filter method
06:20 - for every
06:22 - fruit Arrow check the calories of each
06:26 - fruit is it less than 100 if it is put
06:30 - it within this new
06:31 - array and here we are we have three
06:34 - fruits that are low in
06:35 - calories Apple orange pineapple the
06:39 - calories are 95 45 37 they're all less
06:42 - than
06:44 - 100 let's find any high calorie
06:48 - fruits change our Ray to be high Cal
06:52 - fruits where the calories of each fruit
06:54 - is greater than or equal to 100
06:57 - console.log Ray of High Cal fruits there
07:01 - are
07:02 - two bananas and coconuts the calories
07:05 - are 105 and
07:08 - 159 let's use the reduce method now I'll
07:11 - admit this is going to be a little
07:12 - tricky but I'll try my best to walk you
07:14 - through it the reduceed method will
07:16 - return a single value in this case an
07:19 - object one of these objects let's return
07:22 - the object with the greatest amount of
07:25 - calories we'll store that within a
07:27 - constant const Max X
07:30 - fruit equals take our array of fruits
07:34 - use the reduce method there's going to
07:37 - be two
07:38 - parameters an
07:41 - accumulator which keeps track of the
07:43 - greatest value during each iteration and
07:45 - the next element but I think we should
07:48 - rename these let's rename our
07:50 - accumulator as Max it's going to be the
07:54 - current record holder of the object with
07:56 - the greatest amount of calories element
07:59 - will be fruit meaning the next fruit
08:02 - here are the two
08:03 - parameters Arrow what are we going to
08:06 - check is our fruit the next fruit in
08:10 - line are the calories
08:13 - greater than our current record holders
08:16 - calories max.
08:19 - calories just for readability I'm going
08:21 - to put this on a new
08:24 - line we're going to use the trary
08:26 - operator is this true does the next
08:29 - fruit have more calories than our record
08:31 - holder if it does will return our fruit
08:36 - meaning the next fruit colon meaning
08:39 - otherwise return the max again let's see
08:42 - if this works let's
08:45 - console. log our fruit with the maximum
08:48 - amount of calories which is our coconut
08:52 - with 159 calories if you just need the
08:55 - calories you would type dot calories
08:59 - that will just give you the calories but
09:01 - in this case we're returning an entire
09:03 - object let's find the fruit with the
09:06 - least amount of calories let's copy our
09:09 - code paste
09:12 - it and make a few
09:15 - changes Min
09:17 - fruit change Max to be
09:22 - Min the condition will be is the
09:25 - calories of the next fruit less than the
09:28 - Cal iies of the minimum record
09:32 - holder then console.log are Min fruit
09:36 - which is our pineapple with 37
09:40 - calories all right everybody so those
09:42 - are a few ways in which you can work
09:43 - with an array of objects there's a lot
09:45 - you can do with them you can map you can
09:47 - filter you can reduce you can splice you
09:50 - can pop you can push all sorts of things
09:52 - and well that is an example of an array
09:54 - of objects in
09:58 - JavaScript