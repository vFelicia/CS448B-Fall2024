00:00 - hey everybody so today I got to talk
00:02 - about duck typing in Python duck typing
00:05 - is another way to achieve polymorphism
00:07 - besides using inheritance objects can be
00:09 - treated as if they're a different type
00:12 - as long as they meet the minimum
00:13 - necessary attributes and methods
00:15 - required of them it follows this adage
00:17 - if it looks like a duck and quacks like
00:20 - a duck it must be a duck as long as an
00:23 - object resembles another it could also
00:26 - be treated of that type so in this
00:28 - example let's create a CL CL of animal
00:32 - we will have a class attribute of aive
00:35 - if you're an animal you will have an
00:38 - attribute of alive you're a living
00:40 - creature let's create a class of dog the
00:45 - dog class will inherit from the animal
00:47 - class they will inherit the alive
00:50 - attribute let's also Define a speak
00:52 - method if you're a dog you gain the
00:54 - ability to speak we will
00:58 - print woof
01:00 - then we'll create a cat
01:03 - class class cat inherits from animal for
01:07 - the speak method we will print
01:11 - meow let's create a list of animals what
01:13 - do these two classes have in common they
01:16 - both could be considered animals let's
01:18 - create a list of
01:20 - animals we will construct a dog object
01:24 - and a cat
01:25 - object if I was to write a for Loop for
01:29 - every animal
01:30 - in my list of
01:32 - animals have each animal use its speak
01:37 - method which will result in the dog
01:40 - going woof the cat going meow they're
01:42 - both
01:43 - speaking what if we add a class that has
01:46 - nothing to do with
01:48 - animals like class
01:51 - car cars will have a horn method that's
01:55 - how they
01:56 - speak when you honk the horn you you
02:00 - will
02:00 - print
02:02 - honk within my list of animals let's
02:06 - create a car object it really doesn't
02:08 - belong in here but let's see what
02:13 - happens we have an attribute error car
02:15 - object has no attribute
02:18 - speak our car object doesn't have the
02:21 - minimum necessary attributes and
02:24 - methods when iterating through this list
02:26 - of animals we're calling each animal
02:29 - speak method
02:30 - which our car object doesn't have but it
02:33 - does have a horn method so what if we
02:36 - rename our horn method as speak maybe
02:39 - it's an AI car or
02:42 - something well this would work the dog
02:45 - goes woof the cat goes meow the car goes
02:49 - honk so our car
02:52 - object it quacks like a duck we could
02:55 - consider it a duck it has the minimum
02:58 - necessary methods to be considered an
03:01 - animal animals inherit this alive
03:04 - attribute let's utilize that after the
03:07 - animal
03:08 - speaks let's print their Al live
03:12 - attribute print my animals alive
03:15 - attribute my car object doesn't have
03:18 - that attribute we get an attribute error
03:21 - car object has no attribute
03:24 - alive but if I was to add that
03:27 - attribute alive
03:32 - false we have true for the dog it's
03:35 - living true for the cat it's living but
03:38 - false for the car it's not living it's
03:40 - not a living
03:42 - creature my car meets the minimum
03:44 - necessary requirements to be considered
03:47 - an animal if I were to set this to be
03:51 - alive well then it would be a living car
03:54 - kind of like the movie Cars so with
03:57 - python duck typing is another another
03:59 - way to achieve polymorphism besides
04:02 - using inheritance as long as an object
04:04 - has the minimum necessary attributes and
04:06 - methods you could treat it as a
04:08 - different type of object if it looks
04:10 - like a duck and quacks like a duck it
04:13 - must be a duck and well everybody that
04:15 - is duck typing in Python