00:00 - hello everybody so today I got to
00:01 - explain props props short for properties
00:05 - they are readon properties that are
00:07 - shared between components a parent
00:09 - component can send data to a child
00:12 - component when you include a component
00:14 - within a parent you can send that child
00:16 - component key value pairs in the last
00:19 - video we made cards but all of our cards
00:21 - were identical using props we can send a
00:24 - child component individual values so
00:27 - that they're all unique let's go over an
00:28 - example we're within our app component I
00:31 - will create a new
00:33 - component let's go to our source folder
00:36 - go to new file we will create a
00:37 - component for students to display
00:40 - student data student.
00:45 - jsx we need to create a function
00:47 - function student parentheses curly
00:50 - braces then don't forget to export
00:53 - default the name of the component
00:55 - student in order for this component to
00:57 - accept props this function needs a props
01:01 - parameter props is going to be a
01:03 - JavaScript object so let's add our
01:06 - return statement we'll include a few
01:08 - HTML
01:09 - elements we'll start with a
01:12 - div within our div I will include a
01:15 - paragraph element within our paragraph
01:17 - We'll add the text Name colon space
01:22 - we'll include a set of curly braces to
01:23 - inject some JavaScript let's take our
01:26 - props this is an object access the name
01:30 - property however we still need to pass
01:32 - in a value for the key name so heading
01:36 - back to our app component we need to
01:38 - import the student component let's do so
01:41 - at the top import student from the
01:45 - location where the student file is
01:48 - found SL student.
01:53 - jsx let's include a student component
01:56 - within our app
01:58 - component student
02:01 - now if I would like to send some data to
02:03 - my student component student is going to
02:05 - be the child in this case app is the
02:07 - parent we'll need to list key value
02:10 - pairs the key will be name equals some
02:14 - value for the value associated with the
02:17 - name key let's say
02:20 - SpongeBob when I save and update
02:22 - everything we have the name
02:24 - SpongeBob when we send key value pairs
02:27 - to a component they're all stored within
02:29 - the props object to get the value
02:32 - associated with the key you type props
02:35 - dot the name of the key that will give
02:37 - you the associated value on my web page
02:40 - I'm going to zoom in a little bit just
02:41 - so you can see it that's good for now
02:44 - heading back to our app component let's
02:46 - send another key value pair let's send
02:48 - an age if you're going to store some
02:51 - data as a value if it's not a string
02:53 - literal you got to enclose it within
02:55 - curly braces let's say Spongebob his age
02:58 - is 30 we now have access to this age
03:01 - keyy heading back to our student
03:03 - component let's create a new
03:06 - paragraph age colon space to include
03:10 - some JavaScript we got to use a set of
03:11 - krly braces we are accessing the props
03:15 - object do access the key of age
03:19 - SpongeBob's age is
03:21 - 30 okay let's send is student is
03:24 - SpongeBob a student we'll create a key
03:26 - of is student equals add a set of krly
03:32 - braces is student will be a Boolean true
03:34 - or false SpongeBob is in boting school
03:37 - currently he is a student let's save
03:41 - heading back to our student component
03:43 - I'll include a new
03:45 - paragraph
03:47 - student colon space curly
03:51 - braces props do is student SpongeBob is
03:56 - a student that is true however our
03:58 - Boolean is not displaying so with a
04:01 - Boolean I recommend using the tary
04:05 - operator if is student within props is
04:08 - true then we'll return a string literal
04:12 - of yes otherwise we'll return a string
04:16 - literal of
04:17 - no let's update everything yes SpongeBob
04:21 - is a student you can place complex
04:23 - JavaScript code within your HTML code
04:26 - booleans don't display directly to the
04:28 - Dom you typically find them used within
04:30 - tary operators or some sort of
04:32 - conditional if some value is true return
04:35 - or do this if not do something else now
04:39 - if I were to pass in a Boolean value of
04:42 - false well that will change to no
04:45 - SpongeBob is not a student let's change
04:47 - that back to
04:48 - true now before I include a few more
04:51 - components I'm going to do a little bit
04:52 - of CSS styling just so that all of this
04:55 - is going to be more readable I'm going
04:57 - to zoom out to 100% where it was
04:59 - originally within my student component
05:03 - within the enclosing div element I will
05:05 - set a class name remember that with jsx
05:09 - you have to use class name not class
05:11 - because class is a reserved
05:13 - keyword let's name this class
05:16 - student then heading to our CSS
05:19 - stylesheet index.css feel free to clear
05:22 - out anything within here I will select
05:25 - the class of
05:27 - student I'll change the f
05:30 - family to be Ariel I'll add a backup of
05:34 - s's serif in case Ariel can't display
05:36 - for some
05:37 - reason let's change the font size to 2
05:41 - em for 200% I'll add a little bit of
05:45 - padding 10
05:48 - pixels I'll add a
05:50 - border border one pixel
05:53 - solid pick a color I like hsl
05:57 - values I'll set the transparency down a
05:59 - little bit to like
06:02 - 80% let's go with like 50%
06:05 - lightness I'll remove any margin around
06:07 - the paragraph elements we are accessing
06:10 - the class student then access any
06:12 - paragraph
06:13 - elements margin
06:16 - zero okay that's not too bad so this is
06:19 - a student component to display some
06:21 - student data we'll reuse the student
06:24 - component but pass in different data
06:25 - each
06:27 - time we'll create a new student
06:32 - component the student's name will be
06:36 - Patrick Patrick's age Patrick will be
06:41 - 42 is Patrick a student is student I
06:46 - will set that to be false let's update
06:49 - our web application and there is
06:51 - Patrick's data name Patrick age 42
06:55 - student no let's add a few
06:58 - more
07:01 - student name
07:04 - equals Squidward Squidward's age will be
07:10 - 50 is
07:13 - student Squidward will not be a student
07:16 - that will be
07:18 - false then let's add Sandy she'll be the
07:21 - last
07:24 - student student
07:26 - name equals Sandy
07:30 - sy's age will be
07:36 - 27 is Sandy a student she will be that
07:40 - will be true there we are all right we
07:43 - have created four student components
07:45 - each has different values depending on
07:47 - what we pass into props we're going to
07:50 - move on to prop types prop types prop
07:54 - types are a mechanism that ensures that
07:56 - the past value is of the correct data
07:58 - type for for example within props we
08:01 - have an age we would like to ensure that
08:03 - the age value passed in is a number not
08:06 - a string or a Boolean if it isn't then
08:09 - react can emit a warning within our
08:11 - console mostly for debugging purposes if
08:14 - you're working with props it is good
08:16 - practice to also use prop types so
08:19 - here's how to create prop
08:21 - types after our student function we'll
08:24 - type the name of the component
08:27 - student. propop
08:30 - types equals curly
08:33 - braces now we do have to import prop
08:36 - types it's found within the node modules
08:39 - folder where is it this should be an
08:41 - alphabetical order there it is prop
08:46 - types at the top of our jsx file we will
08:50 - import prop
08:52 - types
08:54 - from prop types
08:58 - prop-types within our prop types I would
09:00 - like to ensure that any name passed in
09:03 - is going to be a string if it's not
09:05 - we'll issue a warning within our
09:08 - console Name colon
09:11 - space prop types do
09:15 - string let's do this with age age will
09:17 - be a number age colon
09:20 - space prop types.
09:25 - number then is student is student will
09:28 - be a Boolean
09:29 - is student colon space prop
09:33 - types dob for
09:36 - Boolean all right and those are our prop
09:38 - types heading back to our app component
09:41 - for SpongeBob's age if I don't pass in a
09:43 - number let's say I pass in a string a
09:45 - string of 30 well this won't prevent the
09:48 - program from running but it will issue a
09:50 - warning within our console if we
09:53 - rightclick go to inspect go to
09:56 - console we can see a warning failed prop
10:00 - type invalid prop age of type string
10:03 - supplied to student expected number and
10:06 - here's a location so this is good for
10:09 - debugging it won't stop the application
10:11 - from running just issue a warning it is
10:14 - good practice to include prop types if
10:16 - you're accepting props then lastly we're
10:19 - going to discuss default
10:22 - props default props are default values
10:25 - for props in case they are not passed
10:28 - from the parent component
10:30 - let's say we create a new student
10:31 - component but we don't pass it a name we
10:34 - can add a default value such as guest
10:37 - just in case that value isn't passed in
10:38 - one way or
10:41 - another okay let's add default props
10:44 - down
10:46 - here student
10:48 - dot default
10:52 - props
10:53 - equals set of curly braces for the name
10:58 - the default value value will be
11:02 - guest age will be
11:05 - zero is
11:08 - student will be
11:10 - false to test this let's go to our app
11:14 - component we'll create a new student
11:16 - component but don't pass in any props
11:20 - we'll create an empty student component
11:21 - with no
11:23 - props that appears to work the name is
11:26 - guest the age is zero student is set to
11:29 - no so if I were to include a name let's
11:32 - say name equals
11:36 - Larry while Larry's name is going to be
11:38 - set we didn't include any key value
11:40 - pairs for age or is student we ended up
11:43 - using the default values zero and no all
11:47 - right everybody so those are props they
11:49 - are readon properties that are shared
11:51 - between components a parent component
11:54 - can send data to a child component when
11:57 - you include a component you can send
11:59 - that component key value pairs which
12:01 - allows you to reuse that component but
12:03 - have unique data and those are props
12:05 - with
12:07 - react