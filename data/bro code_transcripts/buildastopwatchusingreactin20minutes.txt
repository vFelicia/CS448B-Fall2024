00:00 - what's up everybody in today's video
00:02 - we're going to create a working
00:03 - stopwatch using react so sit back relax
00:07 - and enjoy the show okay let's get
00:09 - started within our source folder we're
00:11 - going to create a stopwatch component
00:14 - stopwatch and this is going to be a jsx
00:17 - file we will be working with function
00:19 - based components function stopwatch no
00:23 - parameters then be sure to export it
00:26 - export default
00:28 - stopwatch
00:30 - in this program we'll need three
00:32 - different hooks let's import them import
00:35 - from react use object destructuring
00:38 - we'll need the use State hook use effect
00:43 - as well as use
00:44 - ref from its location of
00:48 - react we do need to return something for
00:51 - the time being we're going to return a
00:54 - fragment okay let's import our
00:56 - stopwatch from our app component we will
00:59 - import stopwatch from its
01:02 - location slash of stopwatch
01:08 - jsx we will return a single stopwatch
01:14 - component and that is all we need for
01:16 - the app component within our stopwatch
01:18 - component we'll make a few declarations
01:21 - we'll be using the use State hook as
01:23 - well as the use ref hook we'll need to
01:25 - check to see if our stopwatch is
01:27 - currently running we will use use state
01:30 - const is running and a Setter for is
01:35 - running equals use State I will set the
01:39 - initial state of is running to be a
01:42 - Boolean of false our stopwatch is not
01:45 - currently
01:47 - running we'll also need to keep track of
01:49 - how much time has elapsed that will also
01:51 - be a state
01:53 - variable const elapsed time and a Setter
01:58 - for elapsed
02:00 - time again we're going to use use State
02:03 - I will set the initial state of our
02:05 - elapsed time to be zero for 0
02:08 - milliseconds we'll be working with
02:10 - intervals if we start an interval we
02:13 - need to clear it if we're not using it
02:15 - we will use ref to create a constant of
02:18 - interval ID ref equals use ref we will
02:25 - set the initial value of current to be
02:28 - null when we stter stop watch we'll have
02:31 - to get the current time we'll store that
02:33 - as a reference using use ref const start
02:38 - time ref equals use ref I will set the
02:43 - initial value to be zero our start time
02:46 - will be 0 milliseconds a few things
02:48 - we'll need we'll need to use the use
02:51 - effect
02:52 - hook we will pass in a
02:56 - function and a dependency
02:58 - array the dependency array is going to
03:01 - have one state variable of is
03:03 - running basically speaking when we Mount
03:06 - our component and if is running ever
03:08 - changes we'll perform some side code
03:11 - whatever is within use effect this is
03:13 - where we'll start our interval to move
03:15 - time forward we'll get back to that
03:17 - later we will create a function to start
03:21 - to start our
03:23 - stopwatch a function to
03:27 - stop a function to
03:31 - reset and a function to format
03:35 - time format
03:38 - time within our return statement let's
03:41 - return all the HTML we'll need for this
03:45 - program I will create a div element to
03:47 - act as a
03:52 - container this div element will have a
03:54 - class name of
03:58 - stopwatch with this in this div element
04:00 - we will create a nested div element that
04:02 - has a class name of display to display
04:05 - the
04:07 - time when we display the time we will
04:10 - embed some JavaScript and call the
04:13 - format time function within our format
04:16 - time function just so we can display
04:17 - something I'm going to return a template
04:20 - string that displays a bunch of zeros
04:23 - really I'm just using this as a
04:25 - placeholder so we are returning a string
04:28 - of a bunch of zeros
04:30 - we'll have three buttons these three
04:32 - buttons will be within another div
04:35 - element this div element will have a
04:37 - class name of
04:42 - controls we will create a button that
04:46 - has text of start to start the
04:49 - stopwatch this button will have a class
04:52 - name of start dasb
04:56 - button with this button we will set the
04:58 - onclick click event handler to be a
05:01 - JavaScript
05:02 - function we will pass in a call back to
05:05 - the start function to start the
05:07 - stopwatch then we need a button for stop
05:10 - let's copy this button paste it change
05:13 - any instance of start to stop on click
05:16 - will be a call back to stop the class
05:19 - name will be stop- button the text will
05:22 - be
05:24 - stop then we need to reset button let's
05:27 - copy our button paste it change any
05:29 - instance of stop to reset we will pass
05:33 - in a call back to the reset
05:35 - function the class name will be reset
05:38 - dasb button and the text will be
05:41 - reset and that is all the HTML that we
05:44 - need go to our CSS stylesheet now we'll
05:48 - apply some CSS within the body of our
05:50 - document we'll use flexbox to display
05:53 - each component display
05:56 - Flex I will set the flex Direction
06:00 - to be a
06:02 - column there's not really going to be
06:04 - any apparent changes until we add more
06:06 - components then I will align
06:10 - items in the
06:13 - center and set the background color to
06:16 - be a light
06:19 - gray but I'll use hsl
06:22 - values I will set the lightness to be
06:26 - 95% okay let's zoom out then I will
06:29 - select the class of
06:32 - stopwatch this class contains our
06:34 - stopwatch everything within
06:36 - it I will again use flex box and really
06:39 - I'll just copy these three properties
06:41 - from the body so display Flex Flex
06:44 - Direction column align item
06:46 - Center I will add a
06:49 - border of 5 pixel
06:53 - solid border radius to smooth the
06:56 - corners of 50 pixels
07:00 - set the background color to be
07:04 - white then add some
07:07 - padding of 30
07:11 - pixels all right let's work on our
07:13 - display next the text is pretty
07:16 - small we will select the class of
07:20 - display increase the font size to 5
07:25 - RM set the font family to be mon space
07:30 - or some other font that you like let me
07:32 - Zoom back
07:34 - out I will set the font weight to be
07:40 - bold I'll change the
07:42 - color pick a color for the font color I
07:46 - will set the lightness to be
07:49 - 30% I'll add a text Shadow effect text
07:53 - Shadow 2 pixels by 2 pixels for the
07:56 - vertical and horizontal offset and a
07:58 - blur radius of two pixels and pick a
08:02 - color I'm just going to lower the alpha
08:04 - to
08:07 - 75% just so it's more transparent then
08:10 - add a little bit of margin to the bottom
08:12 - margin bottom 25
08:16 - pixels okay and that is what we need for
08:18 - our display let's work on our buttons
08:21 - next So within our div element of
08:23 - controls I would like to select all
08:25 - button elements within this class select
08:28 - our class of controls select any buttons
08:31 - within our controls class let's set the
08:34 - font size to be 1.5
08:39 - RM set the font weight to be
08:43 - bold add some padding of 10 pixels by 20
08:49 - pixels surround each button with some
08:52 - margin 5
08:53 - pixels I will set a minimum width of
08:56 - each button to be 125
09:00 - pixels remove the border with border
09:04 - none use border radius to round the
09:07 - corners 10
09:09 - pixels when we hover our cursor over a
09:12 - button let's change our cursor to be a
09:16 - pointer and that does
09:19 - work I will set the color the font color
09:22 - to be white we'll change the background
09:24 - color pretty soon we'll also add a
09:27 - transition effect
09:30 - let's select the background
09:32 - color and use an ease transition after
09:35 - 0.5 seconds we will
09:39 - ease let's select our class of start
09:42 - button class start- button pick a
09:46 - background color I'll pick something
09:48 - green meaning go cuz we're starting our
09:51 - stopwatch background color green but
09:54 - I'll use hsl values cuz I think they
09:56 - look better I've already pre-picked a
09:58 - color
09:59 - I will select these values for the Hue
10:02 - 115 for the saturation 100% for the
10:06 - lightness
10:08 - 40% let's also access the hover sudo
10:11 - class let's copy and paste our start
10:13 - button access the hovers class when we
10:16 - hover our cursor over the button what do
10:19 - we want to do let's take the lightness
10:21 - and subtract 5% 5% from whatever it
10:24 - currently owes I'll set mine to be
10:27 - 35% so the color should get a little bit
10:29 - darker when you hover your cursor over
10:31 - the button let's do this with our stop
10:34 - button we'll copy and paste what we have
10:36 - for our start
10:37 - button change start to
10:43 - stop I'll make the background color
10:46 - red but I'll select something specific
10:49 - for the Stop button I'll set the Hue to
10:51 - be 10 the saturation to be 90 90% And
10:55 - for the lightness 50% let's copy and
10:58 - paste this background color within the
11:00 - hover sudo class set the lightness to be
11:03 - 5%
11:04 - darker and that does work now for the
11:07 - reset button let's make it
11:10 - blue change stop to
11:14 - reset and pick a blue
11:20 - color for the Hue I'll select
11:23 - 205 90% for the saturation for the
11:27 - lightness 60%
11:30 - when we hover our cursor over the reset
11:32 - button I will set the lightness to be 5%
11:35 - darker so
11:36 - 55% and that looks pretty good and we
11:39 - can close out of our CSS
11:41 - stylesheet let's go back to our
11:42 - stopwatch
11:44 - component let's work on the start stop
11:46 - and reset functions when we press the
11:49 - start button we will call this function
11:51 - of start so to start the stopwatch we're
11:55 - going to use the setter for is running
11:58 - and set that to be true true we will set
12:00 - the state of is running to be true once
12:04 - we press the start button we want this
12:06 - program to be running we also need to
12:09 - set the start time reference updating a
12:12 - reference doesn't cause our component to
12:14 - rerender if a state changes it does
12:16 - cause the component to reender we're
12:19 - going to set the start time reference
12:21 - this is an object we will access the
12:23 - current property and set it equal to now
12:27 - we need to calculate what the start time
12:28 - is
12:29 - so if we were to get the date right now
12:33 - this is going to return the current date
12:35 - and time in
12:36 - milliseconds minus the elapse time which
12:39 - is initially
12:41 - zero so just to show you what this looks
12:44 - like I'm going to
12:46 - console.log the current property of my
12:49 - starttime reference object if I was to
12:52 - start or
12:53 - stopwatch will be given the current date
12:56 - and time in milliseconds since Epic
12:59 - think of Epic as when your computer
13:01 - thinks time began it's usually a date
13:03 - around the year 1970 1.7 trillion
13:07 - milliseconds has passed since epic if I
13:09 - were to start the stopwatch again you
13:11 - can see that this number increased
13:13 - slightly we're converting the current
13:15 - date and time into milliseconds by
13:17 - keeping a reference to when we started
13:19 - the stopwatch we can see how many
13:21 - milliseconds has elapsed since then
13:23 - that's kind of the general idea we can
13:26 - get rid of console.log we don't
13:27 - necessarily need it keep it if you would
13:29 - like to stop the stopwatch we're going
13:32 - to set our Boolean of is running to be
13:36 - false that's all we need to do now for
13:39 - reset we're going to set the elapse time
13:43 - to be zero because we would like to
13:45 - reset
13:46 - everything set the state of elapse time
13:49 - to be zero and we will also set is
13:52 - running to be
13:53 - false set is running false if you would
13:57 - like to stop the stop watch when you
13:59 - reset set is running to be false then
14:02 - since we have a dependency array when we
14:05 - Mount this component and anytime the
14:07 - state of is running changes we'll
14:10 - perform some side code I think what
14:12 - we'll do first is check to see if is
14:15 - running is true if is running if our
14:19 - stopwatch is now running we'll need to
14:21 - create an interval to move time forward
14:24 - we will use the set interval function
14:28 - this has two
14:29 - arguments a call back to a function and
14:32 - a time in milliseconds to repeat this
14:34 - interval let's say after every 10
14:38 - milliseconds we'll perform some code
14:40 - I'll use an arrow
14:42 - function after every 10 milliseconds we
14:45 - will set our elapse
14:47 - time to be a new state we will get the
14:51 - date right now minus whatever our start
14:55 - time was we can use our reference
14:59 - start time ref access the current
15:01 - property remember that was in
15:03 - milliseconds so get the time right now
15:06 - subtract what our start time was and
15:09 - that will give us our elapse time
15:11 - because we're using the setter for
15:12 - elapse time in order to clear this
15:15 - interval we'll need to keep track of it
15:17 - by its unique ID the set interval
15:20 - function returns that ID we will take
15:22 - our reference of interval ID ref it is
15:25 - an object we will access its current
15:28 - property and set it equal to that
15:30 - reference we should add a cleanup
15:32 - function to the end of our use effect
15:34 - hook we will return a function a cleanup
15:38 - function when is running changes or we
15:41 - unmount our component what would we like
15:44 - to do we need to stop the interval from
15:46 - continua if we don't it may lead to
15:48 - unexpected Behavior we will use the
15:51 - clear interval function and pass in that
15:54 - unique
15:56 - ID access the current property of our
15:59 - interval ID reference and clear it that
16:03 - will allow us to clear this interval so
16:05 - our program stops running now we just
16:08 - need to fill in the format time
16:10 - function we have aapse time it's going
16:12 - to be in milliseconds we need to convert
16:15 - it to hours minutes seconds and
16:18 - milliseconds we'll start with hours let
16:21 - hours equals take our elapse time now to
16:25 - convert milliseconds to hours you can
16:28 - follow the formula take our elapse time
16:30 - which is in milliseconds divided by
16:33 - there's 1,000 milliseconds in a second
16:36 - time 60 seconds in a minute time 60
16:40 - minutes in an hour enclose this
16:43 - equation with the floor method of math
16:47 - math. floor okay let's calculate
16:52 - minutes let's change hours to minutes
16:56 - what we got to do is take 1,00 *
17:00 - 60 modulus 60 modulus gives you the
17:03 - remainder of any division once our
17:05 - minutes unit hit 60 we need to reset it
17:08 - back to zero that's why we're adding
17:10 - modulus 60 we don't want it to continue
17:12 - to 60 or something above 60 then we have
17:17 - seconds let seconds equals elapse time
17:22 - divided 1,00 modulus
17:25 - 60 and milliseconds
17:31 - let
17:33 - milliseconds equals our lapse
17:36 - time modulus
17:39 - 1000 if you don't want to display all
17:42 - four digits of milliseconds we can
17:44 - divide this by 10 to display only the
17:47 - first two
17:51 - digits we will return a template
17:54 - string we will display the hours colon
18:00 - placeholder
18:02 - minutes colon placeholder
18:06 - seconds colon placeholder
18:11 - milliseconds now if you don't want to
18:13 - display hours you can remove that I'll
18:15 - only display minutes seconds and
18:18 - milliseconds so here's what's going on
18:21 - currently let me stop
18:23 - it so we can start we can stop and we
18:27 - can reset
18:29 - however I would like to format the time
18:31 - I would like to display a leading zero
18:34 - while we can use the pad start method of
18:36 - strings so let's take ours equals we'll
18:41 - use typ casting to convert ours to a
18:46 - string then follow this with pad start
18:50 - method pad this number with two zero
18:54 - characters let's do this with minutes
18:59 - minutes equals convert minutes to a
19:01 - string and then pad it with two
19:04 - zeros
19:09 - seconds and
19:16 - milliseconds all right let's see if this
19:19 - works we can start we can stop we can
19:23 - start again we can stop again we can
19:26 - reset we can start and we can stop now
19:30 - the cool thing about doing this in react
19:32 - our stopwatch is a reusable component if
19:35 - I were to go back to my app component I
19:37 - can include as many stopwatches as I
19:39 - would like let's include one two or even
19:43 - three these are all individual
19:45 - components that have their own code to
19:47 - run they all run
19:49 - independently and I can stop them
19:51 - whenever I would
19:53 - like all right everybody that is how to
19:55 - create a stopwatch component using react