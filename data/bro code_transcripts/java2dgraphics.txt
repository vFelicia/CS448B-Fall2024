00:00 - hey what's going on everybody it's your
00:01 - bro here hope you're doing well
00:03 - and in this video i'm going to teach you
00:04 - guys how we can paint some simple
00:06 - 2d graphics in java so sit back relax
00:08 - and enjoy the show
00:12 - if you find this video helpful please
00:13 - remember to like
00:15 - comment and subscribe your support will
00:17 - help keep this channel running
00:19 - okay everybody let's create some 2d
00:21 - graphics but before we begin here's my
00:23 - setup that i have so far
00:25 - i have two classes a class called main
00:27 - that just contains my main method
00:29 - and an instance of my other class called
00:31 - my frame
00:32 - and this class my frame extends jframe
00:35 - so it behaves exactly like a jframe
00:37 - within the constructor for my frame i
00:39 - have this dot set default close
00:41 - operation jframe exit on close
00:43 - i'm using a size of 500x500 this dot set
00:46 - location relative to
00:48 - null this allows the frame to appear in
00:50 - the middle of the computer screen and
00:51 - not just the top left corner
00:53 - and lastly this.visible is set to true
00:57 - now i'm on oracle's website looking up
00:59 - some java documentation
01:00 - and for the component class the
01:02 - component class is a parent class to
01:04 - many of the java gui components that we
01:07 - work with
01:08 - there is a paint method underneath the
01:10 - component class and this has
01:12 - a parameter of graphics g it takes a
01:16 - graphics object
01:17 - and what this paint method does is that
01:19 - this method is called when the contents
01:21 - of the component should be painted
01:23 - such as when the component is first
01:25 - being shown
01:26 - so most if not all gui components
01:29 - actually have
01:30 - component somewhere as a parent class
01:33 - somewhere down the line
01:34 - and with our my frame class we're going
01:37 - to be overriding
01:38 - this paint method and be drawing some
01:40 - stuff so within
01:41 - this my frame class let's define and
01:44 - declare what we want this paint method
01:46 - to do
01:47 - so we'll say public void
01:50 - paint and this has a parameter of
01:52 - graphics
01:53 - a graphics object and we'll just call
01:55 - this graphics
01:56 - g so g is going to be our graphics
02:00 - object
02:01 - and this paint method is actually called
02:04 - behind the scenes it's invoked
02:05 - automatically when we instantiate
02:07 - a component such as a j frame so we do
02:11 - not need to explicitly invoke
02:12 - this paint method it'll do so for us
02:14 - behind the scenes
02:16 - now with graphics it's somewhat outdated
02:19 - we're actually better off using
02:20 - something called
02:21 - graphics 2d which is an updated version
02:24 - graphics 2d is a child class or subclass
02:27 - of the graphics class and what we're
02:30 - going to be doing
02:31 - is casting our graphics g as a 2d
02:34 - graphic
02:35 - so for the very first line after we call
02:37 - the paint method
02:38 - we're going to cast this graphics g
02:41 - object as
02:42 - a graphics 2d object so let's say
02:45 - graphics 2d and let's call this
02:49 - instance g to d
02:52 - equals g and then we need to cast this
02:55 - so within parenthesis we're going to add
02:58 - the cast
02:59 - graphics to d
03:02 - now this graphics 2d object has more
03:05 - options available to us
03:07 - as to what we can draw and do compared
03:09 - to a graphics
03:10 - g object now let's attempt to draw a few
03:12 - things
03:13 - so there's a few methods available to us
03:15 - to do that so let's say
03:17 - g to d dot and there are all sorts of
03:20 - things that we can draw
03:22 - let's begin by drawing a simple line so
03:24 - that's
03:25 - dot draw line
03:28 - and there are a few parameters a
03:30 - starting point x and y
03:32 - all i guess starting coordinates and
03:34 - then ending coordinates of where you
03:36 - want this line to end
03:37 - so if our frame is 500 by 500
03:41 - let's draw a line from the top left
03:43 - corner to the bottom right
03:44 - and the coordinates for the top left
03:46 - corner of the frame would be where
03:48 - x is 0 and y is 0 and since the size of
03:51 - the frame is 500 by 500
03:53 - the bottom right corner would be where x
03:55 - is 500
03:56 - and y is 500 so there's just going to be
03:59 - one problem with this
04:01 - this will draw a line however it's not
04:04 - necessarily
04:04 - in the starting position that we thought
04:06 - it would be so
04:08 - here's the issue with our frame the size
04:10 - of the frame also includes this window
04:12 - bar at the top
04:14 - so with the starting coordinate it's
04:16 - actually starting in the top left of the
04:18 - window
04:19 - and this window bar is somewhat
04:21 - overlapping
04:22 - our graphics area in which we can
04:23 - display so it may be better for us if we
04:26 - were to create a panel
04:28 - draw on the panel and then add the panel
04:31 - to the frame
04:32 - so let's actually create a class called
04:35 - my panel which will extend
04:37 - jpanel so let's create one more class
04:40 - and then we're going to draw on this
04:42 - panel so file
04:43 - new class we'll call this my
04:46 - panel and then click finish my panel
04:50 - extends jpanel so it will behave exactly
04:53 - like
04:54 - a jpanel and then we'll need to import
04:56 - something as well
04:58 - and then we'll need a constructor for my
05:00 - panel
05:03 - okay now going back to my frame we're
05:05 - going to change a few things
05:07 - we're going to get rid of this paint
05:09 - method and since
05:11 - a panel a jpanel is considered a
05:13 - component
05:14 - we can actually call the paint method
05:17 - so take the paint method from my frame
05:20 - and paste it within
05:21 - my panel and then we'll want to create
05:23 - an instance of my panel
05:25 - so let's declare this outside of the
05:28 - constructor
05:29 - my panel and we'll call this panel and
05:32 - then instantiate it within the
05:33 - constructor
05:34 - panel equals new my
05:38 - panel and we'll need to add
05:42 - this panel to the frame so let's do that
05:46 - right about here this dot add
05:49 - we're adding our panel
05:53 - and we no longer need a size and we
05:56 - should probably pack this
05:58 - so after you add all the components that
06:00 - you want follow this with
06:02 - this dot pack so this should
06:05 - fit nicely now what's going to happen
06:08 - is that this is going to create a panel
06:10 - for us and then we should probably set a
06:12 - size for this panel too before i forget
06:15 - this dot set preferred
06:18 - size new dimension
06:23 - and we'll make this 500 by 500
06:28 - what ends up happening now is that this
06:30 - panel is fully visible
06:32 - before we were drawing directly on the
06:34 - frame and this window bar at the top is
06:36 - part of the frame
06:37 - so it was overlapping a portion of the
06:39 - visible area
06:41 - so now this entire panel is fully
06:44 - visible to us
06:45 - let's head back to our my panel class
06:47 - and draw a few things within the paint
06:49 - method
06:50 - so we drew one line let's change the
06:53 - width
06:53 - of the line this is kind of like the
06:56 - stroke
06:57 - the brush size that we're using so we
06:59 - can actually change that
07:01 - g2d dot set
07:05 - there's actually all sorts of things
07:06 - that you can set but we're looking for
07:08 - set stroke and we can pass in a new
07:11 - basic stroke and then we set the size
07:15 - of the stroke so if we want this to be 5
07:18 - pixels we'll pass
07:19 - in 5 and what we get is an extra thick
07:22 - line and it's not just
07:24 - a 1 pixel brush stroke you can also
07:27 - change the color too
07:28 - so g to d and
07:31 - this would be dot set paint
07:34 - and you pass in a color so let's say we
07:38 - want this line to be
07:39 - blue color dot blue you can also pass in
07:44 - uh some hex values or some rgb values
07:47 - too
07:47 - but we'll just stick with simple colors
07:49 - so now we have a
07:51 - blue line going across the screen let's
07:54 - draw a few other shapes
07:55 - for now i'm just going to comment out
07:57 - this line where we
07:58 - draw a line let's draw a rectangle
08:01 - we type in the name of our 2d graphic
08:03 - which is g2d
08:05 - dot draw and there's all sorts of things
08:08 - that we can draw let's draw a rectangle
08:10 - and this is draw rect like get rekt
08:14 - so we place starting coordinates as
08:17 - arguments as well as a width and height
08:19 - for this rectangle
08:20 - let's say we want this to begin in the
08:22 - top left corner of the panel
08:24 - so that would be where x is zero y is
08:26 - zero and let's make this one hundred by
08:29 - two hundred if you want this to be a
08:31 - square you can make this one hundred by
08:32 - one hundred
08:34 - so now we have a rectangle on our panel
08:37 - and it retains that blue color that we
08:39 - set as well as the stroke size
08:41 - that's kind of like the line thickness
08:44 - so if you need to draw
08:45 - another graphic you can actually set the
08:48 - paint color to something else before you
08:50 - actually draw this
08:51 - let's set this to pink i don't know why
08:54 - i just picked a random color
08:56 - and now we have a pink rectangle and if
08:59 - you need to
09:00 - fill this that's actually a different
09:02 - method
09:03 - that would be fill rect so that would be
09:06 - g2d dot fill and you can fill all sorts
09:09 - of shapes here
09:10 - we're looking for fill rect and we'll
09:12 - keep the same coordinates
09:15 - so 0 0 then 100 and 200 for the height
09:22 - and here's our rectangle in the top left
09:24 - corner of the screen and it is
09:26 - completely filled
09:27 - one important thing that you should keep
09:29 - in mind and know is that
09:30 - as you're drawing graphics any more
09:33 - recently created graphics
09:34 - are going to overlap any previously
09:37 - created ones
09:38 - so if we were to draw this line and then
09:40 - draw our rectangle
09:41 - the rectangle is going to overlap this
09:44 - line
09:44 - kind of like there's a z-axis so
09:47 - anything that is more recently created
09:49 - is going to overlap any previous items
09:52 - or graphics
09:53 - let's draw a circle next and i'll get
09:55 - rid of our rectangle that we have
09:57 - as well as this line we'll just turn
09:59 - these into comments if you need to draw
10:01 - a circle
10:02 - you use either draw or fill oval
10:06 - g2d dot let's draw an oval first
10:09 - so this will be just an outline draw
10:12 - oval
10:15 - now the coordinates are the top left of
10:17 - the drawable area for this oval
10:20 - so if we want this to start in the top
10:22 - left corner of the panel that would be
10:23 - where x is zero
10:24 - y is zero and let's make the width 100
10:27 - and the height
10:28 - 100 i suppose and we should have a
10:32 - actually let's change the color to g2d
10:36 - set paint let's make this
10:39 - i guess orange kind of like it's the sun
10:42 - i suppose yellow would work too
10:45 - we'll keep the same stroke size of five
10:49 - and we have a orange outline of a circle
10:53 - or oval and if you need to fill this in
10:55 - you would instead
10:56 - use fill oval which will do
11:01 - g2d dot fill
11:05 - and we're looking for oval and we'll
11:08 - place this at the same coordinates
11:10 - same width and height too
11:15 - and we have an orange
11:18 - circle or oval in the top left corner of
11:21 - our panel
11:23 - okay this next one is a little tricky
11:25 - this is
11:26 - draw arc
11:30 - and let's set a color so we're actually
11:32 - going to use draw arc to draw
11:34 - a pokeball for practice g2d
11:37 - dot let's draw arc first then fill arc
11:41 - draw arc and there's a few more
11:45 - arguments
11:46 - starting coordinates a width and a
11:48 - height a starting
11:49 - angle and an arc angle so we'll place
11:52 - this in the top left corner just to keep
11:54 - things simple
11:55 - for the width let's make this 100 and
11:58 - the height
11:58 - 100 so for the starting angle let's set
12:02 - this to zero
12:02 - and the arc angle will make this 180. so
12:05 - this will be a half circle
12:08 - because it's 180 degrees
12:11 - now if we were to change the starting
12:13 - angle let's say 180
12:16 - it's going to flip counterclockwise
12:20 - let's practice drawing a pokeball so
12:21 - let's set the paint
12:23 - to red for the top i would say
12:26 - hemisphere
12:28 - and set this to zero and we're going to
12:30 - use fill arc
12:37 - and we'll get rid of draw arc actually
12:40 - we should uh get rid of the stroke size
12:42 - too
12:44 - all right so we should have a red half
12:46 - circle
12:47 - and the bottom is going to be white but
12:49 - i'm not sure how well this is going to
12:50 - display
12:53 - so let's set the paint after we fill the
12:56 - first arc
12:57 - and color this white color.white
13:01 - and we'll have the starting angle be 180
13:03 - but we'll keep
13:05 - the full extent of the arc at 180 so
13:07 - it's another half circle
13:09 - and we should have a pokeball or at
13:12 - least something that
13:13 - slightly resembles a pokeball i would
13:15 - say that's close enough since we're just
13:17 - beginners at this
13:18 - all right we can also draw a triangle
13:21 - and for that we'll actually use a method
13:24 - called draw
13:25 - or fill polygon and we actually have to
13:28 - pass in an array of coordinates
13:30 - or integers so this would be
13:33 - g2d dot let's begin with draw
13:37 - draw polygon
13:41 - okay so this takes an array of integers
13:43 - and a number of points
13:45 - a triangle would be three points so
13:47 - let's just pass in three points
13:49 - but we'll need to pass in an array of
13:51 - integers so let's declare these
13:54 - right before we actually draw this
13:55 - polygon so we'll say
14:00 - int x points
14:02 - and we'll pass in some x coordinates
14:06 - let's say 150 250 and
14:10 - 350. we'll pass in some y coordinates as
14:13 - well
14:14 - so this has to be another array of
14:17 - integers
14:18 - and this will be y points let's set this
14:21 - to
14:22 - 300 150 and 300.
14:31 - and we should have the outline of a
14:35 - triangle
14:36 - let's set this to yellow
14:39 - so that would be g2d dot set paint
14:43 - and we'll pass in color dot yellow
14:49 - now we'll fill the polygon
14:52 - it's the same process as before but
14:55 - replace straw with fill
15:00 - and we have a yellow triangle it's kind
15:03 - of like a piece of the triforce from the
15:05 - legend of zelda series
15:07 - well one of them at least we also have
15:10 - the capability of drawing
15:12 - a string of text on our graphic g2d
15:16 - dot draw string
15:19 - we pass in a string as an argument as
15:21 - well as coordinates
15:22 - for the string let's say you
15:26 - are a winner
15:31 - so for now let's set the x coordinate to
15:34 - zero and the y coordinate to zero
15:38 - but when we compile and run this we
15:40 - actually cannot see the string
15:42 - that's because it's hidden right now
15:44 - let's change this to
15:46 - 50 by 50 and you'll see why
15:50 - so now the string is visible that's
15:52 - because when we display
15:54 - the string the starting position
15:57 - of our string of text is the bottom left
16:00 - corner
16:01 - since we set this to 0 0 well that's
16:04 - going to be the very
16:05 - top left corner of our panel so it's
16:08 - actually not being displayed because
16:10 - it's kind of off screen now let's change
16:13 - the font and the font color of the
16:15 - string g2d
16:17 - dot set font and you can pass in a
16:21 - new font and pass whatever font you want
16:24 - i will pick ink
16:27 - free because i like that font that's a
16:30 - font family
16:31 - then we can pick a font style let's say
16:34 - bold and a size i will make this
16:39 - 50 i suppose
16:43 - you are a winner and changing the font
16:47 - color is the same process as before we
16:49 - just set
16:50 - paint to whatever color we want what
16:52 - color do we not pick yet
16:55 - let's pick why not magenta
16:59 - and the font color is now magenta let's
17:02 - say that you want to add your
17:04 - own image to this graphic i have this
17:07 - png file and it's called sky
17:09 - and i just created this myself so i want
17:11 - to add
17:12 - this image to my graphic my 2d graphic
17:16 - so there is a method to do that g2d
17:21 - dot and that is draw
17:25 - image and there's a few to pick from
17:28 - uh so let's begin with something simple
17:31 - uh here so this takes an image
17:34 - coordinates and then an image observer
17:36 - we have not covered image observers so
17:38 - we're just going to set this to
17:39 - null for now so we need an image and
17:42 - coordinates
17:43 - we want this to begin in the top left
17:44 - corner now we need to create
17:46 - an image out of this file that we have
17:48 - within our project folder
17:50 - let's call this image and we're going to
17:52 - declare and instantiate this
17:55 - so let's say image image
17:58 - and then within the constructor we'll
18:00 - instantiate this
18:03 - image equals and this is a little bit
18:06 - different
18:07 - we're going to create image equals new
18:11 - image icon
18:14 - and list the file name or the file path
18:18 - sky.png is my file name
18:21 - follow this with dot get
18:24 - image this will create an image out of
18:26 - the image icon
18:30 - and then we follow this with draw image
18:32 - and then add your image here
18:34 - and we should have our image added to
18:38 - our graphic
18:39 - and then you can draw on top of this
18:40 - image this could be a background image
18:42 - let's say
18:43 - so i'm going to move this and place this
18:46 - near the top and let's draw
18:50 - i don't know maybe the triforce that we
18:52 - have so i'm going to re-enable all these
18:57 - why not the pokeball too
19:04 - well yeah that image that we created is
19:06 - kind of serving as a background for us
19:09 - so that's how you can include your own
19:10 - image into a graphic to display
19:12 - well everybody that's the basics of
19:14 - creating 2d graphics this video is
19:16 - getting kind of long so i think i'll cut
19:18 - it off here i was hoping to walk you
19:20 - guys through some practice with drawing
19:22 - a simple landscape kind of like what bob
19:24 - ross does with his paintings but
19:26 - i might have to wrap it up here so if
19:28 - you want to copy of all this code i'll
19:30 - post all of this in the comments down
19:31 - below
19:32 - but yeah that's the basics of creating
19:34 - 2d graphics in java
19:36 - hey you yeah i'm talking to you if you
19:39 - learn something new
19:40 - then you can help me help you in three
19:43 - easy steps
19:44 - by smashing that like button drop a
19:46 - comment down below
19:48 - and subscribe if you'd like to become a
19:49 - fellow bro
19:55 - [Music]
20:02 - [Music]
20:10 - you