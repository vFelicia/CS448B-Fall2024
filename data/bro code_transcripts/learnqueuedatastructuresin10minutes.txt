00:00 - hey what's going on everybody it's you
00:02 - bro hope you're doing well
00:03 - in this video i'm going to explain cues
00:05 - in computer science
00:06 - so sit back relax and enjoy the show
00:11 - if you find this video helpful please
00:12 - remember to like
00:14 - comment and subscribe your support will
00:16 - help keep this channel running
00:18 - whoa hey we're talking about cues today
00:21 - so cues
00:21 - are a fifo data structure not to be
00:24 - confused with fifa
00:25 - fifo as in first in first out an example
00:28 - would be a line of people it's first
00:30 - come first serve whoever's there first
00:32 - gets helped first
00:33 - so this is a collection designed for
00:35 - holding elements prior to processing
00:37 - it's a linear data structure here's an
00:39 - example imagine that we're a cashier and
00:41 - we're selling tickets to a concert we
00:43 - will help
00:44 - whoever approaches our register first
00:46 - it's first come
00:47 - first serve in other words it's fifo
00:50 - first in
00:50 - first out unfortunately a wild karen
00:53 - appears and she would like to talk to
00:54 - the manager
00:55 - now karen is going to waste everybody's
00:57 - time so it's going to be a while
00:59 - in the meantime chad enters the line he
01:01 - will enter in at the back and wait his
01:02 - turn
01:03 - followed by steve and then harold so
01:06 - karen is at the head of our queue
01:07 - our line and harold is all the way at
01:09 - the back our tail
01:11 - as you can see harold is very anxious
01:13 - right now once karen has been defeated
01:15 - chad will move to the head of our queue
01:18 - so
01:18 - chad will now be helped next and harold
01:21 - will still be at the tail until somebody
01:23 - else enters the line
01:24 - once chad has been helped he will move
01:26 - out of our queue
01:27 - and steve is at the head now and the
01:30 - tail will move as well
01:31 - and then once steve has been held harold
01:34 - is the only one currently waiting in
01:36 - line for his tickets he will be at both
01:38 - the head and
01:39 - the tail of our queue so that's kind of
01:41 - how a queue works it's first come
01:43 - first serve fifo first in first out if
01:45 - you were here first then you will be
01:47 - helped first
01:48 - now the concepts of adding and removing
01:50 - objects from a queue are known as both
01:52 - enqueuing and dequeueing enqueuing is
01:55 - the concept of adding an object
01:57 - to the end of our cue our tail and
02:00 - dequeueing
02:01 - is when we remove an object from the
02:03 - head of our queue
02:04 - now what methods do you need to enqueue
02:06 - and dq from a queue
02:08 - well it really depends on the
02:09 - programming language that you're working
02:11 - with
02:11 - a lot of you voted for data structures
02:13 - and algorithms using java so i'll
02:15 - probably stick with java then
02:16 - here's an example now to enqueue and dq
02:19 - we need well a queue so let's create one
02:22 - q
02:23 - then we need to list the data type of
02:25 - the objects that we're going to add to
02:26 - this queue
02:27 - let's work with strings because strings
02:29 - are objects and they're fairly simple
02:31 - and i will name this queue q equals new
02:34 - now check this out i will attempt to
02:36 - create a queue object and instantiate it
02:38 - and the data type is string and i will
02:40 - add a constructor
02:42 - now we cannot instantiate the type q
02:44 - here's the reason why
02:46 - so if we take a look at the queue class
02:49 - right here q is actually an interface
02:52 - and not a class and based on our lesson
02:54 - on interfaces we cannot create an
02:56 - instance of an interface
02:58 - an interface is meant to be more of like
03:00 - a template that we can apply to another
03:02 - class
03:03 - so to utilize q technology we need a
03:05 - class
03:06 - that implements q now taking a look at
03:09 - our java collections hierarchy
03:11 - there are two classes that implement
03:13 - cues one of which is the linked list
03:16 - and the other is the priority queue now
03:18 - priority queues they will rearrange
03:20 - their elements based on a certain
03:21 - priority
03:22 - so they wouldn't be a good example so to
03:24 - utilize the features of a queue
03:26 - we are going to create a linked list
03:28 - because we cannot instantiate a queue
03:30 - itself because it's an interface
03:32 - with that being said let's change equals
03:35 - new q
03:36 - to equals new linked list
03:39 - we won't be focusing on any of the
03:41 - features of linked lists we'll save that
03:43 - for another video maybe the next one i
03:45 - haven't decided
03:46 - yet so we will only cover the features
03:49 - that linked lists will utilize via the q
03:52 - interface now with the q interface
03:55 - there are three methods that we inherit
03:57 - from the collections parent class
04:00 - add remove and element these will do
04:02 - approximately the same thing
04:04 - as enqueuing dequeuing and peaking at
04:07 - the topmost element
04:08 - however they throw exceptions and
04:10 - according to the documentation
04:12 - it's actually better to use this column
04:14 - of methods instead
04:15 - these will return a special value we
04:18 - have offer
04:19 - which will enqueue or add an element to
04:21 - the
04:22 - tail of our queue poll will dequeue
04:25 - it will remove the head of our current
04:28 - queue and
04:28 - then there is also peak it will not
04:31 - remove the head but it will examine it
04:33 - and return it so those are the three
04:35 - dedicated methods
04:37 - that we implement via the queue
04:38 - interface there are some additional
04:40 - methods too which we'll cover later
04:42 - which we inherit from the collections
04:44 - class so let's begin
04:46 - by offering a bunch of people to our
04:48 - queue this is how we enqueue or add
04:50 - elements to our queue so first in our
04:53 - line we have karen
04:54 - so to add her to the queue we would type
04:57 - the name of our queue
04:58 - q dot offer
05:01 - and we will offer karen to the front of
05:04 - our queue and she would like to complain
05:05 - to the manager
05:06 - next we have chad q dot offer
05:12 - chad then we have steve
05:17 - and lastly harold
05:22 - okay now if we were to display our cue
05:25 - we'll place it within a print line
05:27 - statement we will pass in
05:29 - q as an argument and this should display
05:31 - our q in order
05:33 - first we have karen at the head then
05:35 - chad
05:36 - steve then harold at the tail one method
05:38 - that we implement
05:39 - from the q interface is the peak method
05:42 - we can use the peak method to examine
05:45 - and take a look at the object
05:47 - at the head of our queue we're not
05:49 - actually going to remove
05:50 - the object at the head of the cube but
05:52 - take a look at it so within
05:54 - a print line statement i will use q
05:57 - dot peak method and after peaking over
06:00 - our cash register
06:01 - unfortunately karen is at the front of
06:03 - the line now
06:05 - to dq we can use the pull method
06:08 - so type q dot poll
06:12 - and this will dequeue your q
06:15 - so karen is no longer at the head of our
06:18 - queue so let's pull a couple more times
06:20 - for practice
06:21 - so after polling twice karen and chad
06:25 - are now
06:25 - gone using pull a third time will remove
06:29 - steve and lastly
06:33 - now the nice thing about the poll method
06:35 - is that it will not cause an exception
06:38 - according to the java documentation you
06:40 - can use element to peak
06:42 - but it will throw an exception so if i
06:44 - was to use
06:45 - element at the end this would cause an
06:48 - exception then
06:49 - so usually it's preferable to use this
06:52 - column of methods even though they're
06:53 - similar
06:54 - these will not throw exceptions offer
06:56 - pull and peek now with cues there are
06:58 - some additional methods that you might
07:00 - be interested in
07:01 - the q class will extend the collection
07:04 - class
07:04 - so the q class inherits everything that
07:06 - the collection class has
07:08 - and there's some pretty useful methods
07:09 - within here i'll show you a few
07:11 - so the first is that we can check to see
07:13 - if our queue is empty
07:15 - so within a print line statement i will
07:17 - type q
07:19 - dot is empty and if our queue is empty
07:22 - this will return true
07:24 - so if i move this line of code after we
07:27 - offer a bunch of
07:28 - strings a bunch of people to our queue
07:30 - if we check to see if our queue is empty
07:33 - that will be false there are people
07:35 - currently within our line
07:37 - so that is the is md method we can also
07:40 - check to see
07:40 - the size of our queue how long is our
07:43 - line system.out.printline
07:45 - q dot size and the size of our line
07:49 - our q is four four objects we have four
07:52 - people waiting in line to be helped
07:54 - so that is the size method and another
07:57 - is the contains method
07:58 - we can check to see if our queue has a
08:00 - certain object that we're looking for
08:03 - so within a print line statement i will
08:05 - type
08:06 - q dot contains and then pass in an
08:09 - object
08:10 - let's check to see if harold is at the
08:11 - back of the line he's been waiting here
08:13 - patiently
08:14 - q dot contains herald and according to
08:17 - the contains method
08:18 - herald is in fact within our line that
08:21 - is true
08:21 - however this method does not give the
08:24 - index the position in which herald is in
08:26 - imagine that we yell out hey harold are
08:29 - you there and he yells back
08:30 - yeah or true that's kind of how the
08:33 - contains method works
08:34 - so these are three useful methods that
08:37 - cues
08:37 - inherit from the collection class now
08:40 - where could cues be useful they're
08:41 - actually used in quite a number of
08:43 - things but here's a few examples that
08:44 - came to mind
08:45 - so one that can be used in keyboard
08:47 - buffers have you ever typed so fast that
08:50 - the computer couldn't render all the
08:51 - characters onto the screen
08:53 - and all of those characters were added
08:54 - to a buffer they were all displayed in
08:56 - sequence and they were waiting for their
08:58 - turn to be displayed
08:59 - so with a keyboard buffer letters should
09:02 - appear on the screen
09:03 - in the order that they're pressed right
09:05 - first in first out
09:06 - they're also used in printer cues print
09:09 - jobs should be completed
09:10 - in order so we would start with page one
09:12 - then page two
09:13 - and just follow that pattern and as we
09:15 - discussed before they're used in
09:17 - linked lists priority queues as well as
09:20 - breadth
09:21 - first search algorithms well everybody
09:23 - in conclusion
09:24 - a queue is a fifo data structure first
09:27 - in
09:28 - first out it's a collection designed for
09:30 - holding elements
09:31 - prior to some sort of processing it's a
09:34 - linear data structure
09:36 - imagine a bunch of people waiting in
09:38 - line to enqueue
09:39 - that means to add an element to the tail
09:42 - of our queue to the end
09:44 - we can use the offer method in java to
09:47 - dequeue we would use the poll method in
09:50 - java
09:50 - that will remove the element at the head
09:52 - of our queue
09:53 - so that is the q data structure in the
09:56 - comments down below
09:57 - let me know what you would tell karen if
09:59 - she asked to speak with your manager
10:01 - and that ladies and gentlemen is the q
10:03 - data structure in the field of computer
10:05 - science