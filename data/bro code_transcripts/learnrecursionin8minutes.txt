00:02 - well howdy y'all we're talking about
00:04 - recursion
00:05 - now recursion is when a thing is defined
00:08 - in terms of itself
00:09 - i stole that definition from wikipedia
00:11 - really doesn't make too much sense
00:13 - a thing is defined in terms of itself so
00:16 - basically with recursion we apply
00:18 - the result of a procedure to a procedure
00:20 - a recursive
00:22 - method is one that calls itself and this
00:24 - can be a substitute for iteration
00:27 - there's a lot of overlap where you could
00:28 - use either recursion or
00:30 - iteration with recursion we divide a
00:33 - problem
00:33 - into sub problems of the same type as
00:36 - the original
00:37 - and recursion tends to be used within
00:39 - advanced sorting algorithms
00:41 - and navigating trees some of the
00:43 - benefits of recursive code is that it's
00:45 - easier to read and write
00:46 - and it's easier to debug but the
00:48 - disadvantages is that it's sometimes
00:50 - slower
00:50 - and uses more memory let's begin with a
00:53 - very simple example let's create a
00:55 - method
00:55 - to simulate walking we'll do this both
00:58 - iteratively and recursively
00:59 - then take a look at the differences
01:01 - between the two so let's write
01:03 - an iterative walk method so we will need
01:06 - to
01:06 - invoke this method and then we will pass
01:08 - in the amount of steps that we would
01:10 - like to walk
01:10 - like five steps and then we'll need to
01:13 - declare this method
01:14 - private static void walk and i'll change
01:16 - i to
01:17 - maybe steps just so that it's more
01:19 - descriptive
01:20 - now let's use an iterative approach so
01:23 - iteration
01:24 - is the repetition of an internal process
01:27 - so we can use a for loop that will
01:29 - repeat a process
01:31 - and let's say that int i equals zero we
01:34 - will continue this as long as i
01:35 - is less than steps and then let's
01:38 - increment i
01:39 - by one during each iteration and then
01:41 - during each iteration i will print
01:44 - you take a step and really that's it
01:48 - and after running this code we have
01:50 - walked
01:51 - five steps now let's write the same
01:53 - method recursively recursion is the
01:55 - repetition of a procedure
01:57 - iteration is the repetition of a process
02:00 - so with recursion we need a base case
02:03 - that's what we do
02:04 - when we would like to stop and a
02:06 - recursive case what do we do when we
02:08 - would like to continue
02:09 - so our base case is going to be if
02:12 - steps is less than one then we will
02:16 - return
02:17 - and if you only have one statement
02:19 - within
02:20 - your if statement you don't really need
02:22 - these curly braces
02:23 - so i'm just going to omit those all
02:26 - right
02:26 - then we will print
02:29 - you take a step so this is our
02:33 - base case this is what we do when we
02:36 - would like to stop
02:37 - then our recursive case is what we're
02:39 - going to do when we would like to
02:40 - continue
02:41 - we will invoke the walk method within
02:44 - itself
02:44 - but we will pass in steps minus one
02:48 - and this is our recursive case and
02:51 - this will do the same thing however it's
02:53 - just written a little bit different
02:55 - now one thing that you should know is
02:57 - that programs have a data structure
02:59 - called a
03:00 - call stack a call stack keeps track of
03:03 - the order in which our program needs to
03:05 - function
03:06 - so with the main method we call the main
03:08 - method first
03:09 - and that's added to the bottom of our
03:11 - call stack
03:12 - so in order to complete our program we
03:14 - have to complete
03:15 - the main method and get to the end of it
03:18 - however when we took an iterative
03:19 - approach
03:20 - we invoked the walk method and that was
03:22 - added to the top of our stack
03:24 - remember that video on stacks it's a
03:27 - lifo data structure
03:28 - last in first out we have to take care
03:31 - of anything at the top of our stack
03:32 - first
03:33 - and then work our way down with a
03:35 - recursive approach
03:37 - we're adding multiple frames onto our
03:39 - call stack because one
03:40 - we're calling the main method then we're
03:43 - calling the walk method passing in
03:44 - five is an argument then we're calling
03:46 - the walk method again
03:48 - passing in four as an argument then
03:50 - three then two
03:51 - then one then zero then we return and we
03:54 - have to solve this
03:55 - in a lifo order last in first out we
03:58 - begin at the top and remove frames
04:00 - from the top until we reach the end so
04:02 - that's why using recursion is sometimes
04:04 - slower and uses more memory
04:05 - we're adding more frames to the call
04:07 - stack there's more methods that we have
04:09 - to keep track of
04:10 - now check this out what if we take 1
04:12 - million recursive steps
04:14 - we're going to call this walk method a
04:16 - million times
04:17 - and that's going to be a problem and we
04:19 - ran into an exception let's take a look
04:21 - at this
04:22 - so we encountered an exception a stack
04:24 - overflow error
04:26 - it's kind of like that one website when
04:28 - working with recursion it is possible to
04:30 - run out of memory although this is
04:32 - sometimes slower and uses more memory
04:34 - recursive code
04:35 - tends to be easier to read and write and
04:37 - easier to debug
04:38 - for a small method like this i would
04:40 - probably stick with an iterative
04:42 - approach
04:43 - just because it already is fairly simple
04:45 - but it's going to really come in handy
04:47 - when we get two topics on advanced
04:49 - sorting algorithms so let's try
04:51 - something a little more complex
04:53 - let's create a program to find the
04:55 - factorial of a number
04:56 - so let's create a factorial method and
04:59 - we'll write this recursively
05:01 - so let's find factorial what about 7 and
05:04 - then we'll need to define this method
05:06 - and we no longer need our walk method so
05:09 - if we're taking a recursive approach
05:11 - finding the factorial of a number
05:13 - let's say that i is num so we'll need a
05:17 - base case
05:18 - if num is less than
05:21 - one we will return one
05:24 - this is our base case then we need a
05:28 - recursive case
05:30 - we will return num times
05:34 - factorial then pass in
05:37 - num minus one and then eventually we'll
05:41 - hit our base case because
05:42 - num is going to be zero and this is our
05:45 - recursive case
05:47 - oh then change void to int because i
05:49 - forgot
05:50 - okay then let's display factorial seven
05:53 - within
05:54 - a print line statement factorial seven
05:58 - and the factorial of seven is
06:01 - five thousand forty so you can see that
06:03 - this was fairly
06:04 - easy to write it only took two lines of
06:06 - code by the way i found a great example
06:09 - of recursion on its wikipedia page and
06:11 - that's by the process of creating
06:12 - refreshed sourdough so the recipe calls
06:15 - for some sourdough
06:17 - leftover from the last time the same
06:19 - recipe was made
06:20 - i thought that was a fairly descriptive
06:22 - example of recursion
06:23 - let's move on to level three let's
06:25 - create a recursive method to find a base
06:27 - raised to a given power
06:29 - let's create a power method and we need
06:31 - a base and an exponent
06:33 - let's find it two to the power of eight
06:35 - and then we'll need to define this
06:36 - method
06:37 - private static let's change void to int
06:41 - i to base and j to exponent
06:46 - we need a base case and a recursive case
06:49 - the base case will be if exponent
06:53 - is less than one we will return
06:57 - one this is our base case
07:02 - our recursive case will be return
07:05 - base times invoke
07:08 - the power method pass in base
07:12 - and exponent minus one
07:17 - and this is our recursive case
07:21 - and then we will need to display the
07:23 - result
07:25 - system.out.printline
07:28 - two to the power of 8 which is 256.
07:33 - all right everybody so that's recursion
07:35 - it's when a thing
07:36 - is defined in terms of itself we apply
07:39 - the result
07:40 - of a procedure to a procedure and a
07:42 - recursive method is one
07:44 - that calls itself and this can be a
07:46 - substitute for iteration
07:48 - we divide a problem into subproblems of
07:51 - the same type
07:52 - as the original and recursion is
07:54 - commonly used within
07:56 - advanced sorting algorithms and
07:58 - navigating trees
07:59 - some of the advantages is that recursive
08:01 - code is easier to read and write
08:04 - and easier to debug however it's
08:06 - sometimes slower and uses more memory
08:08 - so yeah that is recursion if you learn
08:10 - something new be sure to smash that like
08:12 - button
08:13 - leave a random comment down below and
08:15 - well yeah that's recursion in computer
08:17 - science