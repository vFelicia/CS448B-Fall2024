00:00 - hey everybody today I got to explain use
00:02 - context in react use context is a react
00:05 - hook it allows you to share values
00:08 - between multiple levels of components
00:10 - without passing props through each level
00:13 - what we'll do in this example is create
00:15 - four components components a through D
00:19 - each component will be nested within one
00:21 - another so within our source folder
00:23 - let's create a new file for component a
00:27 - this will be a jsx file we will create a
00:30 - function based component named component
00:34 - a no parameters for now and be sure to
00:37 - export it export default component
00:41 - a within this component we will return
00:44 - some HTML we will return a div
00:51 - element the div element will have a
00:53 - class name of
00:56 - box within the div element we will
00:58 - create an H1 element
01:01 - that has text of component
01:03 - a within our app component we will
01:06 - import component
01:08 - a import component
01:11 - a from its
01:15 - location component a.
01:17 - jsx we will return a single component a
01:23 - component we're also going to add a
01:25 - little bit of CSS to visualize it we
01:28 - will select our class of box add a
01:31 - border of three pixel
01:34 - solid and padding of 25
01:38 - pixels here's component
01:40 - a we're going to copy this file of
01:43 - component
01:44 - a and paste it three
01:49 - times we will rename the second copy as
01:52 - component
01:54 - B the third as component
01:58 - C
02:00 - the fourth as component
02:06 - D we have component a b c and d within
02:11 - component B rename any instance of
02:13 - component a with component
02:15 - B the same goes for
02:20 - C and
02:25 - D from component a we're going to import
02:28 - component B
02:31 - import component B from its
02:36 - location component b.
02:40 - jsx after our H1 element we will include
02:44 - one component B
02:46 - component we have component B within
02:48 - component a now within component B we
02:52 - will import component
02:54 - C import component C from its
02:58 - location
03:00 - component c.
03:03 - jsx after our H1 element we will include
03:06 - one component C
03:10 - component so we have component C within
03:13 - component B within component a within
03:15 - component C we will import component D
03:19 - import component D from its
03:24 - location component d.
03:28 - jsx after H1 element we will include one
03:32 - component D
03:34 - component we have component D within
03:36 - component C within component B within
03:38 - component a I've organized my tabs a b c
03:44 - d within component a we're going to
03:46 - create a state
03:48 - variable const user and a Setter for
03:53 - user equals the US state hook we will
03:56 - need to import
03:58 - it type in your username I'll type in
04:01 - bro code for
04:03 - mine at the top we need to import from
04:06 - react use object destructuring to get
04:09 - the use State Hook from its location of
04:15 - react now after our H1 element I will
04:18 - create an H2 heading we will embed some
04:21 - JavaScript we'll display a template
04:23 - string of
04:25 - hello add a
04:27 - placeholder your username
04:31 - name So within component a you should
04:34 - have an H2 heading that displays hello
04:37 - and your username within component D
04:41 - what if I would also like to display my
04:42 - username well from component a I would
04:45 - have to pass props down all the way to
04:48 - component D I'll have to pass them to B
04:50 - which will pass them to C which will
04:53 - pass them to D so if we were using props
04:57 - this is what we would have to do within
04:59 - component component B we will pass in
05:01 - props set user to equal our user within
05:06 - component B we'll have to set up
05:09 - props props will be the parameter within
05:13 - component C we will set user to equal
05:16 - embed some JavaScript props do user
05:21 - within component C we'll set up props
05:24 - again within component D we will set
05:27 - user to equal embeds JavaScript props do
05:31 - user then within component D set up
05:35 - props again after our H1 element let's
05:38 - create an H2 element we'll embed some
05:41 - JavaScript use a template string display
05:45 - by add a
05:47 - placeholder access props our parameter
05:51 - access the
05:52 - user within component a we have hello
05:56 - your username within component D we have
05:59 - by
06:00 - your username by passing props down each
06:03 - of these nested components this is known
06:05 - as prop drilling where drilling down to
06:07 - the center the center component passing
06:10 - props down this long chain can become
06:12 - very tedious but there's a better
06:14 - solution and that is with the use
06:16 - context hook the use context hook allows
06:19 - us to share values between multiple
06:22 - levels of components without passing
06:24 - props down through each level however we
06:27 - have to set up a provider component
06:29 - component which component has the data
06:31 - we would like access to in this case it
06:34 - would be component a in component a we
06:37 - have that state variable of our username
06:39 - which we named user So within our
06:42 - provider component we have three steps
06:45 - we have to import create context from
06:47 - react So within component a we already
06:50 - have used state but we also need create
06:55 - context we need to create some context
06:57 - and Export it
07:00 - export const then we need a unique name
07:04 - for this context we're working with the
07:06 - username let's name our context user
07:10 - context the context name should be
07:12 - descriptive of what you're working with
07:15 - if the data we're working with is a
07:16 - color we could say color context equals
07:21 - create context and this is a
07:23 - function now the last thing we need to
07:26 - do is wrap any children components
07:29 - within this special provider
07:32 - component we are going to wrap component
07:34 - B within another component we will take
07:37 - our user
07:39 - context access provider set the value
07:43 - equal to be some Java Script our value
07:47 - of
07:50 - user and we just need to wrap this
07:53 - component of component
07:58 - B component a is now the provider
08:01 - component it's going to provide a value
08:04 - of user we no longer need props we can
08:07 - get rid of these for each
08:10 - component after I deleted props from
08:12 - component B well our username is now
08:15 - undefined within component D we broke
08:17 - that
08:26 - chain all right any component that needs
08:30 - this data we will set up to be a
08:32 - consumer component you can have more
08:34 - than one we'll have to import the use
08:37 - context Hook from react as well as the
08:40 - context that we set up we're exporting
08:43 - it so we need to import it elsewhere
08:46 - within component D we will import from
08:49 - react use object
08:51 - destructuring the use context Hook from
08:55 - its location of
08:58 - react we also need the user
09:01 - context import use object destructuring
09:04 - to get user context from its
09:09 - location of component
09:13 - a that was the original location where
09:16 - we exported it
09:20 - from we'll use the context get the
09:23 - context and store the value we'll do
09:27 - that inside of our component
09:30 - const user
09:33 - equals use context hook we're going to
09:37 - pass in our user context as an argument
09:41 - and now we have access to
09:43 - user we'll use a placeholder and add our
09:48 - user and that has appeared to work we
09:51 - have displayed by your
09:54 - username we have avoided prop drilling
09:57 - instead of drilling down to the center
09:58 - component to pass down a value by using
10:01 - use context we Traverse up the component
10:04 - tree to find the nearest provider which
10:06 - would be component a component a is the
10:10 - provider component component D is a
10:13 - consumer component and you can have more
10:15 - than one so let's do the same thing with
10:17 - component C we need these two lines of
10:20 - code really we can just copy them
10:23 - because I'm
10:26 - lazy and we need to create a con
10:29 - of user or some other descriptive name
10:32 - for this value use context pass in our
10:36 - context of user
10:38 - context let's add another H2 element
10:42 - we'll embed some JavaScript use a
10:44 - template string let's say hello again
10:49 - add a placeholder our
10:52 - username So within component C we have
10:55 - used use context again without prop
10:58 - Drilling we're displaying hello again
11:01 - your
11:02 - username any component that's a child
11:05 - component of our provider component of a
11:08 - has access to this value that we set up
11:11 - all right everybody so that is the use
11:12 - context react hook it allows you to
11:15 - share values between multiple levels of
11:17 - components without passing props through
11:20 - each level if you have a lot of nested
11:22 - components passing props down to each
11:25 - level can become very tedious this is a
11:27 - way to avoid that and well everybody
11:29 - that is the use context hook in
11:35 - react