00:00 - what's going on everybody it's bro here
00:02 - hope you're doing well then in this
00:03 - video we're going to be discussing the
00:05 - print f function in C++ let's get into
00:09 - it
00:11 - before we begin this lesson just so you
00:13 - know this lesson is optional we won't
00:16 - really be using the printf function too
00:18 - much but it's something you might want
00:20 - to consider for your own future programs
00:22 - so let's begin
00:23 - all the printf function is is that it
00:26 - acts as a control for displaying our
00:28 - output a certain way for example this
00:31 - might be useful for maybe some sort of
00:33 - cash register program and if you add a
00:36 - bunch of numbers together or use a
00:38 - coupon you might get a result like one
00:41 - hundred dollars and twenty five point
00:44 - five cents so when you display this
00:47 - number you probably don't want three
00:49 - decimal places because well that doesn't
00:52 - really work for currency so we can use
00:54 - the printf function to truncate the last
00:57 - decimal or only display two decimal
01:00 - places when we produce output otherwise
01:02 - if we're working with columns of data we
01:05 - can do things like line up all of our
01:08 - columns together and add a certain
01:10 - amount of spaces before our information
01:12 - is displayed so this could be useful if
01:14 - you're displaying like tabular data or
01:17 - columns of data too so we can do unique
01:20 - things like this involving the printf
01:22 - function so let's practice by creating
01:25 - some variables related to cars well
01:27 - because I like cars so let's create a
01:30 - few variables so maybe it will make a
01:32 - make that's a string a model an integer
01:37 - named here a double value named price
01:41 - and we need a char value so perhaps
01:45 - maybe a variable named for sale so if
01:49 - you have your own favorite car in mind
01:51 - feel free to assign some of these
01:52 - variables with your favorite car I will
01:55 - assign some of these variables with my
01:57 - favorite cars so come up with your own
01:59 - or copy me doesn't matter so for the
02:03 - make it's going to be Ford the model is
02:06 - going to be Mustang the year is going to
02:10 - be 2021 the price I'll make sure that
02:16 - this is not within quotes all right
02:19 - we're good then nine thousand nine
02:21 - hundred ninety nine dollars and zero
02:24 - zero zero cents and for sale this is a
02:28 - single character so we could put like Y
02:32 - for yes or n for no it doesn't
02:35 - necessarily have to be those two but I
02:38 - guess that would make sense all right so
02:40 - let's use the printf function to display
02:43 - some of this information so to use the
02:45 - printf function all you do is type in
02:47 - print F then you need a set of
02:50 - parentheses and let's add a semicolon to
02:52 - the end before I forget now we can add a
02:55 - format string within the parentheses so
02:57 - perhaps I will say your car is made by
03:04 - alright now we can insert a value or
03:08 - variable and we're going to insert it
03:10 - wherever we place a % so this begins the
03:15 - format specifier and we can add a value
03:20 - or variable that we want to display but
03:22 - we have to separate it with a comma then
03:25 - we're going to put our value or variable
03:27 - here so to begin we're just going to
03:29 - display the word Ford not the variable
03:32 - just the string literal all right so now
03:36 - with this format specifier this % will
03:39 - begin this and this variable or value
03:42 - will be inserted right where this % is
03:46 - and there's a certain combination of
03:48 - values and characters we can add after
03:51 - this % and each of these is going to
03:54 - have a particular effect on how our
03:57 - output is displayed so here's a chart
04:00 - that I made let's take a look all right
04:02 - well here's a little cheat sheet that I
04:04 - made so we begin the format specifier
04:07 - with a % and at the end we need to list
04:11 - the datatype of what value or variable
04:14 - that we want to display so there's going
04:17 - to be a certain character we're going to
04:19 - add here to display certain information
04:22 - for example if we want to display a
04:24 - string we're going to put us here and if
04:27 - we're going to display a character this
04:29 - would be C and there's a few others and
04:31 - we'll cover those in just a moment so
04:32 - there's other optional fields that we
04:35 - can add that will edit the width
04:38 - the precision the length and there's
04:41 - certain flags too and we'll cover those
04:42 - in just a moment so to begin let's cover
04:45 - just the different format specifiers we
04:48 - can use for data types and then once we
04:51 - get the hang of that we'll cover
04:52 - flags with precision and length let's
04:56 - head back to our program so if we want
04:58 - to display a string literal where this
05:01 - format specifier is after the percent
05:03 - sign we just type in the letter s to
05:06 - display a string let's see what this
05:08 - looks like when we run it okay your car
05:14 - is made by Ford let's try another
05:17 - example so what I'm going to do is just
05:20 - see out en DL to move down to the next
05:23 - line you could put backslash n for new
05:27 - line but I don't want things to get too
05:29 - complicated in this area so I'm just
05:31 - going to add a new line after our printf
05:34 - function so what would happen if we did
05:37 - the same exact thing but instead of a
05:39 - string literal we used a string variable
05:41 - so this is what the result is going to
05:43 - be and I'm just going to copy and paste
05:45 - this but we're going to change this
05:47 - string literal to a variable so we can
05:51 - use the variable make and pay attention
05:53 - to see what happens here all right so
05:58 - our car is made by Ford and this time we
06:01 - used a string variable and we actually
06:04 - got an unexpected result and let's run
06:06 - this one more time and this should
06:08 - actually change again here's the problem
06:10 - with string variables and the printf
06:12 - function so the printf function was
06:15 - designed to work with the C language but
06:17 - it doesn't have the built-in data type
06:20 - of string and if you were to use this
06:23 - you would get an unexpected result so
06:25 - one trick that I found is that there's a
06:27 - way around this if you want to display a
06:30 - string variable in your printf function
06:33 - in place of a string literal this is
06:36 - what you can do after the string
06:38 - variable just type in dot C underscore
06:41 - then use the STR function so you need a
06:45 - set of parentheses here so what this
06:47 - does is that it returns a pointer to an
06:50 - array
06:51 - contains a null-terminated sequence of
06:54 - characters representing the current
06:57 - value of the string object so basically
06:59 - what that means is that this function
07:02 - will return whatever value is at this
07:06 - variable so these should work the same
07:08 - now if we were to run this so your car
07:11 - is made by Ford your car is made by Ford
07:13 - so just keep that in mind if you're
07:15 - using the printf function to display a
07:17 - string variable you'll want to use this
07:20 - function after the variable name
07:23 - otherwise if you're using a string
07:26 - literal you could just type that here
07:28 - another trick is that with the printf
07:30 - format string you can add multiple
07:33 - format specifiers if you want to include
07:35 - multiple values or variables so let's
07:38 - display the make and the model in one
07:41 - single string so printf your car is a
07:49 - maybe a colon alright so we want to
07:52 - display the make and the model but let's
07:54 - display the string literals first and
07:57 - then in the next example we'll do the
07:59 - variables so we want to display the make
08:02 - so % s because it's a string now we also
08:06 - want to display the model so we can add
08:08 - a another format specifier here and
08:10 - we'll display another string so % s now
08:13 - after the format string we're going to
08:16 - add two values so the first one it needs
08:19 - to be separated with a comma we're just
08:21 - going to type in a string literal Ford
08:23 - now we need a another string to add so
08:26 - we're going to add another comma and
08:28 - then type in our model which is Mustang
08:32 - and then let's add a semicolon at the
08:36 - end ok
08:37 - so then this will display two strings so
08:40 - we can add multiple format specifiers to
08:44 - a single formatted string so your car is
08:47 - a Ford Mustang
08:49 - so with these format specifiers it's as
08:52 - if we're inserting this value or
08:54 - variable wherever this format specifier
08:57 - is located and it's an order so the
09:00 - first format specifier is going to be
09:03 - assigned with the first value and the
09:06 - second one is going to be assigned with
09:07 - the second value so on and so forth in
09:10 - that pattern so if we had three format
09:12 - specifiers we would need a third value
09:15 - or variable here so let's try the same
09:17 - thing but we're going to assign the
09:20 - string variables in place of these so
09:23 - I'm just going to move down to the next
09:24 - line by saying C out en DL and let's try
09:28 - the same thing but we're going to use
09:30 - the variables this time so print F your
09:35 - car is a colon space we need the first
09:39 - format specifier so % s and the second
09:43 - so % s again so we want the make first
09:48 - so make dot C underscore STR then a set
09:54 - of parentheses now we want the model so
09:57 - model dot C underscore STR and a set of
10:02 - parentheses and I am missing a semicolon
10:05 - at the end all right let's run this to
10:08 - see if it works
10:09 - your car is a Ford Mustang your car is a
10:12 - Ford Mustang alright so I think we got
10:14 - string format specifiers down then so
10:17 - and before we move on to the next
10:19 - example I'm just going to move down to
10:21 - the next line and I think I'm going to
10:24 - make this a little more organized so I'm
10:26 - just going to line these up okay that
10:29 - should be good let's display the year
10:31 - which is an integer variable so print F
10:35 - then we need a format string the year is
10:40 - so if we want to include a integer
10:43 - variable we need to use the % format
10:46 - specifier then we're going to put the
10:49 - letter D here and then we'll need to
10:52 - insert a comma then the value or
10:55 - variable so if you're inserting an
10:59 - integer variable a double variable or a
11:02 - character variable basically anything
11:05 - but a string you actually don't need to
11:07 - use this function because with the C
11:09 - programming language these string
11:11 - variables really aren't compatible with
11:14 - the printf function but if you're using
11:16 - a primitive data type like a
11:19 - integer a floating-point number or HR
11:22 - value you don't need to use this
11:24 - function so we could just use this
11:26 - variable and this would work just fine
11:27 - then so the year is % decimal the year
11:32 - is 2021 so I'm going to move down to the
11:35 - next line just by typing C out en dl
11:38 - let's display the price so printf the
11:43 - price is if we want to display a double
11:47 - or floating-point number we're going to
11:49 - put % F for floating-point number comma
11:53 - then our price variable C out en DL not
12:00 - necessary but I want to move down to the
12:02 - next line after this there alright so if
12:07 - we want to display a double variable or
12:11 - a floating-point number we just use % F
12:14 - or floating-point number so the price is
12:21 - $9,999 point zero zero zero zero zero
12:23 - zero zero so we're actually going to be
12:26 - formatting this fairly soon now if you
12:29 - want to include a char value it's gonna
12:31 - be a similar process so print F then a
12:36 - formatted string is it for sale % seat
12:45 - to display a char value then a comma
12:48 - then the variable will go here so for
12:52 - underscore sale see out Ian deal
13:02 - okay is it for sale yes so remember that
13:06 - if you're using a primitive data type or
13:09 - variable when using the printf function
13:12 - you don't need to use this C underscore
13:15 - STR function but if you're using a
13:18 - string variable here for your printf
13:20 - function then you would need to use this
13:22 - to return whatever value is located at
13:25 - this variable well I think we have the
13:28 - different datatypes down with using the
13:30 - printf function let's cover a few of the
13:32 - flags the width fields and the precision
13:35 - fields that we can use to format our
13:37 - output for the next example let's try
13:40 - and display the price but we're going to
13:42 - limit the amount of decimal places that
13:45 - are displayed because that would
13:46 - accurately reflect a price instead of
13:49 - three decimal portions so if we want to
13:52 - display a floating-point number or a
13:55 - double number of some sort we'll use the
13:59 - percent F format specifier so the price
14:03 - is so normally we would type in percent
14:06 - F then a comma then our price however if
14:11 - we want to limit the amount of decimal
14:13 - places that are displayed we're going to
14:15 - type this after the percent sign but
14:18 - before the F dot - to limit this to two
14:23 - decimal places so let's see what this
14:25 - looks like right now yeah the price is
14:32 - $9,999 zero point zero zero so zero
14:35 - cents but you know what I think I want a
14:38 - dollar sign so I'm going to add that
14:40 - before the format specifier so let's try
14:45 - that now yep 9999 dollars and zero cents
14:52 - alright now we can have our output be
14:55 - preceded with blank spaces kind of like
14:58 - we're hitting tab so what we're going to
15:00 - type is print F and maybe I'll just add
15:03 - a note this time this precedes with
15:07 - blank spaces and maybe we'll display a
15:11 - string so percent s and let's add a
15:16 - string literal like whatever the make of
15:19 - the car was and that was port then : see
15:23 - out en deal alright so we can specify or
15:28 - allocate a certain amount of space to
15:31 - actually display whatever value is here
15:34 - let's say that we want to give our
15:37 - string our formatted string ten spaces
15:40 - to work with and actually display this
15:42 - information where our format specifier
15:45 - is so after the percent sign but before
15:48 - the datatype we're going to type in
15:50 - however much space we want to give this
15:53 - value to display so we could say maybe
15:56 - ton we can pick a different amount too
15:58 - so what happens is that if we were to
16:01 - run this we would actually have all of
16:04 - this blank space before displaying our
16:07 - value but let's count how many spaces
16:09 - out here so we have 1 2 3 4 5 6 and we
16:15 - actually don't apparently have ton
16:17 - that's because we're actually including
16:20 - the space that the value takes up to so
16:24 - altogether we would have 1 2 3 4 5 6 7 8
16:29 - 9 10 so you're basically giving or
16:33 - assigning room to actually display your
16:36 - value so this would be really useful if
16:38 - you're displaying like a column of
16:39 - information and you want things to be
16:42 - lined up naturally so that would be a
16:44 - good use to proceed some information
16:47 - with some blank spaces and you can have
16:49 - your value be preceded with zeros so
16:53 - what I'm going to do is just copy this
16:54 - and we're going to make one change so
16:57 - after the % in the format specifier but
17:01 - before the amount of space we want to
17:04 - have this proceed with we're just going
17:06 - to put 0 and I'm just going to change
17:09 - this string here this proceeds with
17:12 - zeros all right
17:20 - yep here's all of the zeros and we
17:23 - should still have 10 spaces of room
17:25 - assigned to displaying this value so 1 2
17:29 - 3 4 5 6 7 8 9 10 I think lastly for this
17:34 - video I'm just going to show you guys
17:36 - one flag that you can use to left
17:39 - justify any value within any space
17:42 - allocated using the printf function so
17:45 - what I'm going to do is just copy this
17:47 - line that says this proceeds with blank
17:49 - spaces and we're just going to make one
17:52 - minor change so if we want to left
17:54 - justify this value because normally it
17:57 - is right justified so any extra space is
18:00 - assigned before the actual value that's
18:03 - displayed if we want to left justify it
18:06 - we're just going to add a minus sign so
18:08 - % minus the amount of room that we want
18:12 - to give this value to display and then
18:15 - the data type of the value so this we
18:18 - should probably change this message
18:19 - maybe we'll just type in left justify
18:23 - all right so let's see what this looks
18:27 - like right now so it says left justify
18:32 - then the make of our car but we have all
18:35 - this blank space after but we can't
18:37 - really see it right now so let's add a
18:39 - another format specifier to display
18:42 - after this I'm just going to copy this
18:44 - so we're just going to add % minus 10s
18:49 - and then we'll add a make or a model for
18:52 - the car so we'll just add Mustang so
18:55 - let's try this again so it should be a
18:57 - parrot now yeah that's fairly clear so
19:02 - now we have 10 spaces to work with 1 2 3
19:06 - 4 5 6 7 8 9 10 and the value is now left
19:12 - justified within the space that we gave
19:14 - to display our value and the same thing
19:17 - is going to be with the other string
19:20 - that we assigned here as well but it's
19:22 - not as apparent here but just pretend
19:24 - that all this room is here well that's
19:27 - the basics of the printf function I do
19:29 - apologize for this long video this was a
19:32 - fairly difficult
19:33 - topic to cover but if you would like to
19:35 - learn more I'll include a link in the
19:37 - description for the C++ website where
19:40 - you can learn more information about
19:41 - this there's still more flags and
19:43 - different values you can add to your
19:45 - format specifier for different effects
19:48 - but these are just a few of the basics
19:50 - and I'll include all of this code in the
19:53 - comments down below and pin it to the
19:55 - top if you would like a copy for
19:56 - yourself but yeah those are the basics
19:59 - of the printf function in C++
20:02 - hey you if you enjoyed this lesson then
20:05 - you can help me help you in 3 easy steps
20:08 - by smashing that like button drop a
20:11 - comment down below and subscribe if
20:13 - you'd like to become a fellow bro
20:14 - [Music]