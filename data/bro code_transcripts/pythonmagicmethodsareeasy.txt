00:00 - yo what's going on people so today I'm
00:02 - going to explain magic methods in Python
00:05 - magic methods are also known as Dunder
00:08 - methods meaning double underscore you
00:10 - typically find these within classes
00:12 - we're already familiar with one of them
00:14 - our Dunder init method we have double
00:16 - underscores on the left and double
00:18 - underscores on the right but there are
00:20 - others I'll cover a few of the more
00:22 - beginner friendly ones so what these
00:24 - methods do is that they're automatically
00:27 - called by using some of Python's
00:29 - built-in operation ations such as
00:31 - printing an object seeing if two objects
00:33 - are equal greater than or less than when
00:37 - we use many of Python's built-in
00:38 - operations with objects we can Define
00:41 - and customize the behavior of those
00:43 - objects so in this demonstration I'm
00:46 - going to create a class of book we will
00:49 - construct some book objects we will
00:51 - Define a magic method a Dunder method of
00:55 - init to initialize these objects for a
00:58 - book we need a title an
01:01 - author and the number of pages we'll say
01:05 - num
01:07 - Pages self. tile equals
01:11 - title self.
01:14 - author equals
01:16 - author self. number of
01:20 - pages equals number of pages when we
01:23 - call the class of book we Are
01:25 - automatically calling Dunder init so
01:27 - let's create a book object book one
01:30 - equals
01:32 - book we need a title an author and
01:35 - number of pages so since we're dealing
01:37 - with this topic of magic methods I'll
01:39 - pick some fantasy related books for my
01:42 - first book I'll pick the
01:43 - Hobbit that's the title the author is
01:49 - JRR token the number of pages is
01:53 - 310 so for my next
01:56 - book book
01:58 - two I will pick
02:01 - Harry
02:03 - Potter and the philosopher
02:10 - stone the author is JK
02:14 - rolling the number of pages is
02:18 - 223 then we have book
02:22 - three for my third book I will pick The
02:26 - Lion the
02:28 - Witch and the
02:33 - wardrobe the author is CS
02:36 - Lewis the number of pages is
02:40 - 172 okay here are my three book objects
02:44 - when we call the class of book and pass
02:46 - an arguments we will call the dunder
02:48 - init method it's a magic method it's
02:51 - automatically called behind the scenes
02:53 - within this magic method we can Define
02:56 - and customize the behavior of objects
02:58 - and in this example we're just assigning
03:00 - the attributes of title author and
03:03 - number of pages that is one built-in
03:06 - operation of python what would happen if
03:08 - I was to print book one directly to the
03:12 - console here's what happens well we're
03:15 - given a memory address here's book two
03:19 - and book
03:20 - three well we can customize this
03:25 - Behavior we will use the dunder string
03:28 - method
03:30 - double underscore St Str meaning string
03:33 - double underscore again we have one
03:35 - parameter of self instead of returning a
03:38 - memory address we can customize this
03:41 - behavior let's instead return an FST
03:45 - string I'll add two placeholders we will
03:48 - display self. tile the title of the book
03:52 - by self.
03:54 - author and I'll place the title within
03:57 - single quotes
03:59 - now let's print book one we have The
04:02 - Hobbit by JRR
04:04 - tolken let's print book
04:07 - two Harry Potter and the philosopher
04:09 - stone by JK Rowling and book three The
04:13 - Lion the Witch and the Wardrobe by CS
04:16 - Lewis so that is Dunder string we can
04:19 - return a string representation of the
04:21 - object when we print it directly to the
04:24 - console here's another Dunder method we
04:27 - can check to see if two objects are
04:29 - equal
04:30 - I will
04:31 - print is book one equal to book
04:36 - two that gives me false if they were to
04:40 - have the same
04:43 - title the same
04:45 - author and the same number of
04:48 - pages then python would say they're not
04:51 - equal still so let's customize this
04:57 - Behavior we will Define a method of
05:00 - Dunder equals which is just
05:03 - EQ for parameters we have self the first
05:06 - book we're examining in this case book
05:08 - one and other other means the other book
05:12 - we're examining two objects for
05:14 - equality to do that we'll see if the
05:17 - title of two books and the author is the
05:21 - same we'll disregard the number of pages
05:24 - you can have two different versions of
05:26 - the same book they might have different
05:28 - font sizes or the dimensions of the
05:30 - physical Pages might be
05:32 - different so we will return a Boolean
05:35 - value we will examine if self that's the
05:39 - first book is the title
05:41 - attribute equal to our other books title
05:46 - and is the author of the first book
05:49 - self. author equal to our other book's
05:54 - author if I were to run this we get
05:56 - false book one does not equal book to
06:00 - but if they have the same title I'm
06:02 - going to replace these and the same
06:07 - author then they would be equal and
06:10 - we'll disregard the number of pages
06:12 - let's say that with this version of The
06:14 - Hobbit they're using a smaller font size
06:16 - so there's less
06:18 - Pages we're using Dunder equals to
06:21 - compare if two objects are
06:23 - equal what if I was to print book two is
06:28 - less than book 3
06:31 - like what does that even mean and I'm
06:33 - just going to get rid of these two
06:36 - lines type error less than is not
06:39 - supported between instances of book and
06:42 - book so we can't use less than on two
06:45 - objects but we can customize that
06:47 - behavior by using Dunder less than which
06:50 - is just LT we're examining one book and
06:55 - the other
06:56 - book self and other
06:59 - let's compare the number of pages we'll
07:02 - compare if the pages of book two is less
07:05 - than book three we will return a Boolean
07:09 - value is self. number of pages less than
07:15 - other. number of
07:18 - pages so now this should not give us an
07:21 - error book two does not have less Pages
07:25 - than book
07:26 - three another would be greater than I'll
07:29 - just copy what we have Dunder GT for
07:33 - greater than for our first book of self
07:36 - is it greater than the number of pages
07:38 - of the other
07:43 - book well that's true the number of
07:46 - pages of book two is greater than book
07:49 - three let's use Dunder ad to add the
07:52 - pages of two books together what would
07:54 - happen if I were to add two books
07:56 - together book two plus book three
07:59 - well we get a type error unsupported
08:02 - operand for book and
08:04 - book well to customize the behavior of
08:07 - addition we will Define Dunder
08:11 - add we have self and other for the other
08:15 - object let's add the pages together of
08:17 - two books maybe we need a summer reading
08:20 - list and we would like to see what the
08:21 - total number of pages is I will return
08:26 - self. number of pages attribute
08:30 - plus our other books number of
08:35 - pages that would give me
08:37 - 395 that's 223 + 172 heck I'll even put
08:42 - this within an F string cuz why
08:50 - not then I will add the word
08:52 - Pages 395
08:56 - Pages within an object we can search for
08:59 - a keyword within one of the attributes
09:03 - so let's find the word lion within book
09:05 - three to do that I would write a
09:07 - statement like this Lion in book
09:13 - three type error argument of type book
09:17 - is not
09:18 - iterable we will Define Dunder
09:24 - contains besides self we will pass in a
09:27 - keyword a keyword that we're searching
09:31 - for I will return then we'll use the in
09:34 - membership operator is our keyword in
09:39 - self. tile I'm looking for the word lion
09:42 - that's going to return true if lion is
09:45 - in the title of this book or is our
09:49 - keyword in self. author maybe we're
09:53 - searching for an author let's try that
09:57 - again that returns true lion is in book
10:01 - three however lion is not within book
10:04 - one that's
10:06 - false is rolling in book two that's the
10:11 - author that is true is rolling in book
10:16 - three that is
10:18 - false that is thund contains we are
10:21 - searching for a keyword in an
10:25 - object now we could search for a key
10:27 - given an object for book one we'll use
10:30 - the index operator and look up an
10:33 - attribute let's get the title of book
10:37 - one the default behavior is that we get
10:41 - a type error book object is not
10:45 - subscriptable so to customize this
10:47 - Behavior we will use Dunder get
10:53 - item besides self we have one parameter
10:56 - of key we're accessing book attributes
10:59 - by indexing with this object return the
11:03 - value at this key what's that
11:06 - attribute we will check if our key that
11:09 - we
11:10 - receive is equal to title which it is in
11:15 - this case we will return self. tile
11:19 - What's the title of the
11:21 - book so that would give me The Hobbit
11:24 - here's book two and book three
11:29 - what if the key is
11:33 - author none we didn't set that up
11:37 - yet if key is equal to
11:41 - author then return self.
11:46 - author the author of book three is CS
11:50 - Lewis two is JK
11:54 - rolling book one is JRR
11:57 - tolken what if about number of pages num
12:03 - Pages well we're not set up for that
12:05 - yet I'm going to turn this into an else
12:08 - if
12:09 - statement else if
12:12 - key is equal to
12:15 - num
12:17 - Pages then we will return self.
12:21 - num
12:23 - Pages the number of pages in book one is
12:27 - 310 book two is
12:31 - 223 book three is
12:34 - 172 what if there is no key otherwise if
12:37 - there is no matching key I'll add an L
12:40 - statement let's return an F
12:44 - string key
12:47 - placeholder our key that we pass in as
12:49 - an argument was not
12:53 - found what do books not have well they
12:56 - don't have audio I guess unless it's an
12:58 - audio
12:59 - book is there a key of audio in book
13:03 - three there is not key audio was not
13:06 - found and I'll place that within single
13:10 - quotes much better all right everybody
13:13 - so those are magic methods also known as
13:16 - Thunder methods meaning double
13:18 - underscore they are automatically called
13:21 - by many of Python's built-in operations
13:23 - they allow developers to define or
13:26 - customize the behavior of objects when
13:28 - we use those those built-in operations
13:31 - and well everybody those are magic
13:32 - methods in Python