00:00 - hey it's bro hope you're doing well and
00:02 - in today's video we're going to discuss
00:04 - object-oriented programming in c sharp
00:06 - so
00:07 - sit back relax and enjoy the show
00:12 - all right objects an object is an
00:14 - instance of a class that means that we
00:16 - can use a class
00:18 - as a type of blueprint to create objects
00:20 - with object-oriented programming
00:22 - so look around you right now you're
00:24 - surrounded by objects next to me i have
00:26 - a microphone
00:27 - a monitor a mouse and a cup of coffee
00:30 - so we can use code to mimic real world
00:33 - objects
00:34 - objects can have fields and methods
00:37 - these are defining characteristics
00:39 - and actions that an object can perform
00:42 - they describe what an object has
00:44 - and what an object can do and in today's
00:46 - video we will be instantiating
00:48 - human objects but will need the help of
00:50 - a human class
00:51 - as a type of blueprint to design what
00:54 - sorts of fields and methods that all
00:56 - humans should have
00:57 - so outside of our class program you can
00:59 - either do this within the same
01:01 - c-sharp file or a separate one within
01:03 - your solution explorer
01:04 - i'll keep it all within the same c sharp
01:06 - file this time let's create a class
01:09 - named human then curly braces so let's
01:12 - add some fields
01:13 - fields are kind of like the defining
01:15 - attributes of what all humans should
01:17 - have
01:17 - let's say that humans have a name and an
01:20 - age
01:20 - so i'll define those much like what we
01:22 - do with variables string
01:24 - name i will declare this but not yet
01:26 - assign it as well as
01:27 - int edge so these are fields they're
01:31 - defining characteristics of what an
01:33 - object has
01:34 - now let's create some methods what kinds
01:36 - of actions can humans perform
01:38 - they can eat and they can sleep void
01:42 - eat and then i will display something
01:44 - when we invoke this method
01:46 - let's say name plus
01:49 - is eating and then let's create a
01:54 - sleep method void sleep
01:57 - name plus is sleeping
02:00 - okay now this is what we need to do to
02:03 - instantiate an object from a class
02:05 - type the name of the class human we need
02:08 - a unique
02:08 - name for this human object let's call
02:11 - this human object just human one
02:13 - human human one equals new human again
02:17 - add a set of parentheses and a semicolon
02:20 - there we go we now have a human object
02:23 - named human
02:24 - one now there's just one problem the
02:27 - fields and methods of this human object
02:29 - are not visible
02:30 - so if i type human one dot we can't
02:33 - access the name
02:34 - and h fields as well as the eat and
02:36 - sleep methods
02:38 - so normally i wouldn't recommend doing
02:39 - this because this isn't secure but just
02:42 - for learning purposes
02:43 - let's precede our fields and methods
02:46 - with the axis modifier of public
02:48 - so that these are publicly accessible
02:50 - from another class
02:52 - so if we type human one dot we should be
02:55 - able to access our name
02:57 - and age fields as well as the eat and
02:59 - sleep methods
03:00 - so let's give humanoid a name humanone
03:04 - dot name and let's assign human one
03:07 - a first name of rick like from rick and
03:09 - morty and let's give him an age too
03:12 - human1.h and he will be 65 years old
03:17 - and we should be able to use the eat and
03:19 - sleep methods now
03:21 - humanone dot
03:24 - eat and then human
03:28 - one dot sleep
03:32 - so after invoking these two methods eat
03:34 - and sleep
03:35 - this will display rick is eating and
03:38 - rick is sleeping so congratulations we
03:41 - have successfully instantiated a human
03:43 - object
03:44 - and the nice thing about classes is that
03:46 - we can keep on reusing this class to
03:48 - create more humans if we need more than
03:50 - one
03:50 - so this time let's create a second human
03:53 - so follow this formula the name of the
03:55 - class
03:55 - human then we need a unique name for
03:58 - this human object
03:59 - human one is taken so let's name the
04:01 - second human human too
04:03 - equals new human and then we can assign
04:05 - some of the fields of
04:07 - our human class so we need a name and an
04:10 - age
04:11 - so human two's name will be morty
04:15 - and his age will be 16 and this time
04:18 - let's have human 2 use the eat and
04:22 - sleep method so rick is eating
04:25 - rick is sleeping morty is eating more
04:27 - he's sleeping
04:28 - so that's basically what an object is
04:31 - it's an instance of a class
04:32 - and a class can be used as a blueprint
04:34 - to create objects
04:36 - and objects can have fields and methods
04:39 - fields are what an object has
04:41 - methods are what an object can do think
04:43 - of it that way
04:44 - so yeah those are objects they're an
04:46 - instance of a class
04:47 - and a class can be used as a blueprint
04:49 - to create objects
04:50 - so if this video helped you out help me
04:53 - out by smashing that like button
04:54 - leave a random comment down below and as
04:56 - always subscribe if you'd like to become
04:58 - a fellow bro