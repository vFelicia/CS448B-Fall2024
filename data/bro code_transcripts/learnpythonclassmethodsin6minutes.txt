00:00 - hey what's going on people so today I
00:02 - got to talk about class methods in
00:04 - Python a class method allows operations
00:07 - related to the class itself they take
00:10 - CLS as the first parameter whereas
00:12 - instance methods will take self self
00:15 - refers to any object created from that
00:17 - class CLS meaning class refers to the
00:20 - class not any objects here's an example
00:24 - we will create a class of
00:27 - student we'll need a Constructor to
00:29 - construct some student
00:31 - objects all students will have a name
00:35 - and a
00:37 - GPA
00:38 - selfname equals name self. GPA equals
00:45 - GPA we will also create a class variable
00:48 - for this demonstration of count we will
00:51 - count how many students we
00:54 - create whenever we construct a student
00:57 - object we will access the class of
00:59 - student student take our count variable
01:03 - increment it by one whenever we create a
01:05 - student object increase count by
01:09 - one I will create an instance method of
01:13 - get
01:15 - info instance methods have self as the
01:18 - first parameter we're referring to the
01:21 - object we're currently working with I
01:24 - will return an F string where we will
01:28 - display the students name and and their
01:30 - GPA self.
01:33 - name self.
01:36 - GPA I'll add a comment that this is an
01:40 - instance
01:42 - method Now to create a class method to
01:46 - work with class data we will declare a
01:48 - class method with a class method
01:51 - decorator class
01:54 - method what we're going to do is Def
01:56 - find a method to get the count the class
02:00 - variable of
02:01 - count this method will be called get
02:05 - count rather than self as the first
02:08 - parameter we'll be working with a class
02:11 - CLS meaning
02:13 - class I will return ANF
02:16 - string total number of
02:21 - students at a
02:23 - placeholder CLS
02:26 - count Let's test this to call a class
02:30 - method you take the name of the class
02:32 - followed by the class method get count
02:36 - and then we do need to print
02:41 - this what is the count of my current
02:43 - students total number of students is
02:46 - zero let's create a few student
02:49 - objects we will create student one
02:51 - equals call the student Constructor we
02:54 - have to pass in a name and a GPA let's
02:57 - say that the name is SpongeBob SpongeBob
03:00 - has a GPA of
03:02 - 3.2 we'll create two more
03:05 - students student two student three
03:09 - student two will be
03:11 - Patrick Patrick has a
03:15 - 2.0 then Sandy Sandy Smart in fact she's
03:19 - a genius she has a perfect
03:22 - 4.0 now let's count the number of
03:25 - students total number of students is
03:27 - three
03:29 - when we call this class
03:31 - method we can access or modify class
03:35 - data this class variable of count rather
03:39 - than using self we use CLS for the
03:42 - class let's create one more class method
03:46 - this time I'll calculate the total GPA
03:48 - of all my
03:50 - students we'll need a class variable to
03:53 - hold that data let's say total GPA
03:58 - equals z
04:00 - whenever we construct a student object
04:03 - we will access our class of student get
04:06 - the total
04:08 - GPA then add plus equals this students
04:12 - GPA that we have just
04:14 - created basically speaking the total GPA
04:18 - this variable is going to accumulate all
04:20 - of the GPA of every student and store it
04:23 - as a sum to find the average we're going
04:26 - to divide it by the count the number of
04:28 - students we'll do that within a class
04:30 - method to create a class method again we
04:33 - need to use the class method
04:36 - decorator I will Define a method of get
04:40 - average GPA the first parameter is CLS
04:44 - for
04:45 - class I will check if CLS count the
04:50 - count variable of my
04:52 - class is equal to zero that means if we
04:56 - have no students if that's the case if
04:58 - there's no students we're going to
05:00 - return
05:01 - zero because otherwise we're going to
05:03 - divide by zero and we'll get an
05:06 - error else we're going to return an F
05:10 - string follow this formula we're going
05:13 - to take the total GPA of my class class.
05:17 - total GPA divided by class. count the
05:21 - number of students we have that's how to
05:24 - calculate the average
05:26 - GPA after getting the count of the
05:28 - number students tax us a class method we
05:31 - take the name of the class student call
05:34 - the class method get average
05:37 - GPA then I will print
05:43 - it total number of students is three the
05:47 - average GPA is 3.06
05:51 - repeating after calculating the average
05:53 - I'm going to add a format specifier of.
05:56 - 2f just around to two decimal places
06:00 - and I'll add average GPA coin space then
06:05 - we'll calculate the
06:07 - average all right everybody those are
06:10 - class methods instance methods are best
06:13 - for operations on instances of the class
06:16 - any objects static methods are best for
06:19 - General utility functions which do not
06:22 - need access to class data class methods
06:25 - are best used when we're working with
06:27 - class level data or we require access to
06:30 - the class itself such as when we're
06:32 - working with class variables rather than
06:35 - using self as the first parameter we're
06:37 - going to use CLS meaning class and well
06:41 - everybody those are class methods in
06:43 - Python