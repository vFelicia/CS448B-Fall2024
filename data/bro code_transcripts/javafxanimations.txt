00:00 - hey what's going on everybody it's bro
00:02 - hope you're doing well and in this video
00:04 - i'm going to demonstrate some simple
00:05 - animations in javafx
00:08 - so sit back relax and enjoy the show
00:12 - all right everybody so i recommend
00:15 - finding an image that you want to use
00:17 - for this demonstration if you're too
00:19 - lazy to you can always go to shapes and
00:21 - drag and drop a random shape maybe a
00:22 - rectangle or something
00:24 - but i think it'd be more fun to use an
00:26 - image so i will add
00:28 - an image view node and place it on my
00:30 - pane
00:31 - to add an image to this image view go to
00:33 - properties image
00:35 - and select an image of your choosing i
00:37 - will use this picture of
00:38 - sanic the hedgehog and i'll place this
00:41 - little guy right in the middle
00:42 - so i will give this image view a unique
00:45 - id i'll call it
00:46 - my image be sure to add your controller
00:49 - save then let's head to our controller
00:51 - class as always be sure to refresh your
00:54 - fxml document
00:55 - we're going to implement the
00:57 - initializable interface
01:01 - and add any unimplemented methods
01:05 - all right since we added an image view
01:08 - let's use fxml injection to add our
01:10 - image view and instantiate it
01:12 - private image view my
01:16 - image okay let's begin with a simple
01:20 - translation so i'll add a comment that
01:23 - this will be
01:23 - the translate section now with the
01:26 - translate section we can move our image
01:28 - on
01:28 - our scene so we need to use a translate
01:31 - transition object translate
01:35 - transition i'll name this translate
01:39 - equals new
01:42 - translate transition our next step
01:46 - is to add our image to our translate
01:48 - object by using the
01:50 - set node method of translate so
01:53 - translate dot set node and
01:56 - pass in your node of my image as an
01:58 - argument
01:59 - by using our translate object we can
02:01 - translate our node on the x
02:04 - y or z axis let's make a simple x
02:07 - translation so we would type translate
02:10 - dot set by x
02:14 - now how far do we want to move our node
02:16 - on the x
02:17 - axis let's say 250 and to begin this we
02:21 - need to use
02:22 - translate dot play
02:26 - let's give it a go okay
02:29 - so my image moved 250 pixels to the
02:32 - right but it was fairly quick
02:34 - let's slow that down a little bit so
02:37 - we're going to
02:37 - set the duration and here's how we would
02:40 - type
02:41 - translate dot set duration
02:45 - and pass in a duration duration
02:48 - dot let's say milliseconds
02:53 - 1 000 milliseconds so this entire
02:55 - translation will take
02:57 - a full second to complete so it should
03:00 - be a little bit slower now
03:02 - now with our translation this will only
03:05 - cycle
03:06 - once and no more but we can easily
03:08 - change that by using the
03:09 - set cycle count of our translate object
03:13 - translate dot set cycle count
03:16 - the default is one but if i was to pass
03:19 - in two as an argument
03:20 - then our translation would occur twice
03:23 - and no more than that
03:25 - or we can do so indefinitely by using
03:28 - translate transition dot indefinite
03:32 - so this would be continuous
03:37 - okay so when our translation ends it
03:40 - will reset
03:41 - how can we send our image backwards
03:43 - here's how
03:44 - so i'll add that here we would type in
03:48 - this method of translate dot set
03:51 - auto reverse and then pass in a boolean
03:54 - value of true now our image will
03:58 - reverse once we get to the end of our
04:00 - translation so it looks like he's moving
04:02 - back and forth
04:03 - so that is the set auto reverse method
04:06 - by default it is false but you can
04:08 - switch this to true if you need to
04:10 - let's also translate our image on the
04:12 - y-axis as well
04:14 - set by y to move up you would pass
04:18 - in a negative number as an argument down
04:20 - would be a positive number
04:22 - let's say -250 now our image should move
04:25 - to the right
04:26 - and up together so it's moving
04:28 - diagonally
04:29 - so that's the basics of translate let's
04:32 - work on
04:32 - rotate next i'm just going to copy what
04:35 - we have here there's a lot of similar
04:36 - code
04:38 - so this will be the rotate section and
04:41 - let me turn
04:42 - all of this into one giant comment so
04:44 - that it doesn't get in the way
04:46 - okay so we need to create a rotate
04:49 - transition object
04:51 - rotate transition we will name this
04:54 - rotate
04:55 - equals new rotate transition
05:01 - okay let's get rid of these lines
05:05 - all right so we need to set an angle in
05:08 - which we wrote it
05:10 - so let's rotate our image a full 360
05:13 - degrees
05:15 - rotate dot set by angle
05:19 - then pass in 360 as an argument
05:23 - so our image should rotate 360 degrees
05:28 - now you can see that it starts to slow
05:30 - down when it gets to the end
05:32 - of its rotation we can make that a
05:34 - little bit more smooth
05:36 - by using rotate dot
05:39 - set interpolator pass
05:43 - in interpolator
05:46 - dot linear so this
05:50 - should be a smooth transition
05:55 - our image is currently rotating on the
05:57 - z-axis
05:58 - but we can change that rotate dot set
06:01 - axis
06:03 - let's set him on the rotate dot x-axis
06:08 - so it should rotate onto the x-axis
06:12 - like that there's also y
06:20 - and z is the default
06:25 - cool then to speed up the rotation you
06:28 - can just
06:29 - shorten the duration maybe 500.
06:34 - so he's going a little bit faster now so
06:36 - that is
06:37 - the rotate animation okay
06:40 - let's work on fade next let me get rid
06:43 - of all this code
06:44 - this will be the fade section i'll copy
06:47 - what we have here
06:48 - we need to create a fade transition
06:51 - object
06:52 - fade transition fade equals fade
07:00 - transition
07:02 - all right get rid of these two lines
07:04 - we'll need to utilize the
07:06 - set from value and set to value of fade
07:10 - fade dot set from value
07:13 - this will be the original opacity
07:15 - between zero and
07:17 - one so to create a fade out effect
07:20 - we would set from value pass in one
07:24 - fade dot set to value this will be the
07:28 - ending opacity
07:29 - let's set this to zero but honestly you
07:31 - can place this anywhere between
07:33 - zero and one but a full fade out effect
07:36 - would be
07:36 - one to zero i'll change the duration
07:39 - back to 1000 as well
07:41 - okay so this should fade out our image
07:45 - then to fade in this would be zero set
07:47 - from value
07:49 - set to value would be one this would
07:51 - cause a fade
07:52 - in effect so that is the fade animation
07:56 - lastly we have scale so let's create a
07:59 - scale section
08:02 - scale will change the dimensions of your
08:05 - image
08:08 - we need to create a scale transition
08:10 - object scale
08:11 - transition scale equals new
08:15 - scale transition
08:23 - i'll be setting auto reverse to true
08:26 - although it's not necessary
08:28 - to stretch your image on the x-axis type
08:31 - scale
08:31 - dot set by x then pass in
08:35 - a value greater than 1. if i set this to
08:39 - 2
08:39 - then my image is going to stretch to
08:41 - become twice as large
08:43 - twice as wide as what it was before so
08:45 - we have extra thick
08:47 - sonic now set by y will stretch your
08:50 - image on the
08:51 - y so anything greater than one
08:55 - will stretch it so it's larger anything
08:57 - less than one will compress it
08:59 - so by combining both set by x and set by
09:02 - y
09:03 - this will stretch my image on the x and
09:06 - y dimensions
09:08 - well all right everybody that is the
09:10 - basics of some simple animations in
09:13 - javafx
09:14 - if you would like a copy of all this
09:15 - code i will post this to the comment
09:17 - section down below
09:18 - but yeah those are some simple
09:20 - animations in javafx