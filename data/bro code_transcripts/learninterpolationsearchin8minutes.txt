00:02 - all right what's going on everybody
00:03 - interpolation searches these are an
00:05 - improvement over binary searches that
00:08 - are best used for uniformly distributed
00:10 - data basically speaking we're going to
00:12 - make a guess and i'm saying that within
00:14 - quotes we're guessing where a value
00:17 - might be based on calculated probe
00:20 - results if our probe is incorrect our
00:22 - search area is narrowed and a new probe
00:25 - is calculated basically we're guessing
00:27 - where a value is going to be and return
00:29 - the index
00:30 - so using an interpolation search this
00:33 - has an average runtime complexity of big
00:36 - o of log log n and in a worst case
00:39 - scenario where our values within our
00:42 - collection increase exponentially
00:44 - this can have a runtime complexity of
00:47 - big o of n so to demonstrate this let's
00:49 - create an array of integers
00:51 - int array we'll name this array equals
00:55 - and assign this some numbers all
00:56 - uniformly distributed let's say the
00:58 - numbers one through nine all in order
01:00 - this would be i would say a best case
01:02 - scenario
01:04 - then let's find an index int index
01:07 - equals and we will invoke an
01:09 - interpolation search function so
01:12 - interpolation search we will pass in our
01:15 - ray
01:16 - and a value we would like to search for
01:19 - let's search for the number maybe eight
01:22 - okay then let's declare this
01:24 - function private static and
01:27 - interpolation search
01:29 - there are two parameters an array of
01:30 - integers
01:31 - and our value we are searching for i'm
01:33 - going to rename this parameter as value
01:35 - so it's more descriptive
01:37 - the first thing that we're going to do
01:39 - is calculate the upper bound and the
01:41 - lower bound of our searchable area
01:43 - so int high will be the higher bound of
01:45 - our searchable area and this will be our
01:48 - arrays length -1
01:51 - and the lower bound is well the first
01:52 - index and low and i will set this equal
01:55 - to zero using a while loop we will
01:57 - continue probing the condition within
02:00 - our while loop is while our value is
02:03 - greater than or equal to
02:05 - our array at index of low the lower
02:08 - bound
02:09 - and
02:10 - our value
02:12 - is less than or equal to
02:14 - our array at index of higher bound
02:19 - and our sizable search area is going to
02:21 - shrink after each iteration
02:23 - so while our value is within the new
02:26 - searchable area keep on probing keep on
02:28 - searching i'm going to add another
02:30 - condition too
02:32 - low is less than or equal to high
02:35 - after each iteration our searchable area
02:37 - is going to shrink once our searchable
02:39 - area is zero elements well we can't
02:41 - search anymore so we might as well exit
02:43 - now here's the formula to calculate
02:45 - where our value is probably going to be
02:48 - and our guess will be referred to as our
02:50 - probe int probe equals and here's the
02:54 - formula
02:55 - high minus low
02:58 - times
03:00 - r value
03:02 - minus array at index of low our lower
03:05 - bound divided by
03:08 - array at index of high
03:12 - minus array
03:14 - at index of low just going to add low to
03:17 - the front of this and i'm just going to
03:19 - make this a little bit more readable for
03:20 - us here's the formula to calculate where
03:23 - our value is likely going to be it's a
03:26 - little complex to read this a few of the
03:27 - contributing factors are the size of our
03:30 - current searchable area high minus low
03:33 - so to begin with we have nine elements
03:36 - times the value we're searching for
03:38 - minus the value at the lower bound so
03:41 - eight minus one divided by the value at
03:44 - the higher bound minus the array at the
03:47 - lower bound then at the end we're just
03:49 - tacking on whatever our lower bound
03:51 - currently is
03:52 - so it's a complex formula all you have
03:54 - to do is just copy this so during each
03:56 - iteration i'm going to display our probe
04:00 - this is going to be essentially our
04:02 - guess
04:04 - and let's check to see if our probe is
04:06 - equal to our value
04:08 - so using an if statement let's check to
04:10 - see if array
04:12 - at index of probe
04:15 - is equal to
04:16 - our value that we're searching for
04:18 - if it is let's return our probe this is
04:21 - the correct index else if our guess our
04:24 - probe is incorrect we'll need to narrow
04:26 - down our search area
04:28 - so using an else if statement
04:31 - let's check to see if array
04:33 - at index of probe
04:37 - is less than our value if that's the
04:40 - case we will need to set the new lower
04:42 - bound low equals probe plus one
04:47 - else
04:48 - high equals probe
04:50 - minus one
04:52 - now here's the deal with these
04:53 - statements
04:54 - we're currently searching for the number
04:56 - eight
04:57 - if we guess our probe is at let's say
04:59 - five and our value is greater than this
05:02 - probe we can disregard this portion of
05:04 - the searchable area so we're moving the
05:07 - new lower limit the new lower bound to
05:10 - just after where our probe was six so
05:12 - this is the new searchable area and then
05:15 - we'll calculate a new probe based on
05:16 - this data if we're looking for let's say
05:19 - two and our probe says it's likely here
05:22 - at five well then since 2 is less than
05:24 - our probe we can disregard all of this
05:26 - data and this would be our new
05:28 - searchable area we would move the higher
05:30 - bound of our data down to just below our
05:33 - probe so that's kind of the idea
05:36 - so at the end if we do not find our
05:38 - value let's return negative one as a
05:40 - sentinel value
05:42 - so back within our main function let's
05:44 - check to see if the value returned does
05:46 - not equal negative one using if else
05:48 - statements
05:51 - if index does not equal negative one
05:55 - then let's print a message
05:56 - system.out.printline
05:59 - element found at index
06:03 - plus
06:04 - index
06:06 - else
06:08 - element not found okay so this should
06:11 - work let's run it
06:13 - so we are searching for a so this
06:16 - formula calculated that this value is
06:18 - likely at probe seven index seven
06:22 - zero one two three four five six seven
06:25 - and this was the first iteration of our
06:27 - while loop we were able to find our
06:29 - value eight on the first iteration so
06:31 - let's find a different value how about
06:33 - one
06:34 - element found at index zero that's the
06:37 - first element
06:38 - so interpolation searches work very well
06:41 - with uniformly distributed data these
06:43 - numbers are all increasing by one so
06:46 - this is a little too easy for our
06:48 - interpolation search it's guessing the
06:49 - likely index on the first try so let's
06:52 - create a more difficult data set
06:54 - so with our new data set let's say that
06:56 - we will start with one and then double
06:58 - the number of the previous element so
07:00 - one
07:01 - 2
07:02 - 4
07:03 - 8 16
07:05 - 32
07:06 - 64
07:07 - 128
07:09 - 256
07:11 - 512
07:12 - and 1024
07:14 - and let's search for the number what
07:16 - about 256
07:18 - let's see how many probes this is going
07:19 - to take
07:22 - all right so here's the results
07:24 - we iterated our while loop five times we
07:27 - had five different guesses after the
07:29 - first guess this was not correct so we
07:31 - narrowed down our search area then we
07:33 - probed again this still wasn't the
07:35 - correct answer so we probed again add
07:37 - again and again until we got the right
07:40 - value so that's an interpolation search
07:42 - it's an improvement over a binary search
07:44 - that is best used for uniformly
07:47 - distributed data it guesses where a
07:49 - value might be based on a calculated
07:52 - probe result if the probe is incorrect
07:55 - the search area is narrowed and a new
07:57 - probe is calculated the interpolation
08:00 - search has an average runtime complexity
08:02 - of big o of log log n and a worst case
08:05 - runtime complexity of big o of n this
08:08 - would be if our values increase
08:10 - exponentially so yeah that is the
08:12 - interpolation search if you would like a
08:14 - copy of this code i'll post this to the
08:16 - comment section down below and well yeah
08:18 - that is the interpolation search in
08:20 - computer science