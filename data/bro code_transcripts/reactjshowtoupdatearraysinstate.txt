00:00 - hey what's going on everybody in today's
00:01 - video I'm going to show you how we can
00:03 - update the state of an array using react
00:06 - all right everybody here's how we can
00:07 - update the state of an array using react
00:09 - be sure to import the UST State Hook
00:11 - from react we'll Begin by creating a
00:14 - constant use array destructuring the
00:16 - name of our array will be Foods because
00:19 - I'm hungry like usual we'll need a
00:21 - Setter function for this state variable
00:24 - set Foods equals use
00:28 - State we will set the initial state to
00:31 - be an empty array if you would like to
00:33 - include some initial elements you can
00:35 - put that within here such as an
00:38 - apple an orange and a
00:42 - banana we'll create two functions a
00:45 - function to add an element to this array
00:48 - and another function to remove an
00:49 - element we'll create a function
00:52 - to handle add
00:56 - food there are no
00:58 - parameters and and we'll declare a
01:00 - function to handle remove
01:04 - food we'll fill these in later within
01:07 - our return statement let's wrap
01:09 - everything within a div
01:13 - element I will create an H2
01:18 - heading that says list of
01:22 - food we'll create an unordered list with
01:25 - a pair of UL tags within my unordered
01:28 - list we will embed some JavaScript code
01:31 - let's take our array of
01:33 - foods use the built-in map method the
01:36 - map method will return a new array what
01:38 - would we like to do with all of these
01:40 - elements of our array well we're
01:42 - provided with an element which we will
01:44 - name as food and an index these are the
01:48 - parameters that we'll receive
01:49 - automatically we'll write an arrow
01:51 - function to do something I will create a
01:54 - list item element we have three already
01:57 - because our array initially has three
01:59 - elements an apple orange and a banana if
02:02 - I were to go to my
02:04 - console react wants us to add a key for
02:07 - each list item so it can keep track of
02:10 - them so with the opening list item tag I
02:13 - will set the key attribute to equal our
02:17 - index within each list item I will add
02:21 - the current food element and let's see
02:24 - if this works yes it does Apple orange
02:27 - banana if I were to change the IAL
02:30 - values of this array within you state
02:32 - that should be
02:33 - reflected after the unordered list we'll
02:36 - create an input element to enter in the
02:37 - names of some
02:39 - food I will create an input
02:42 - element the type the type will be text
02:46 - because we're adding a
02:47 - string I will set the ID equal to be
02:52 - food
02:53 - input I'll add a placeholder too I will
02:56 - set the placeholder attribute to be
03:00 - enter food
03:04 - name after this input element let's
03:07 - create a
03:09 - button the button will have text of add
03:14 - food with this button I will set the
03:17 - onclick event handler equal to a call
03:21 - back to handle ad food let's work on the
03:24 - handle ad food function we need to get
03:26 - the value found within this input
03:28 - element if I were to type coconut then
03:31 - press the button I need to get this
03:32 - value but first we'll select this input
03:35 - element to access it I will create a
03:38 - constant of new food new food will be a
03:42 - string it's going to contain this value
03:45 - I will access this element this input
03:48 - element document. getet element by ID
03:53 - the ID that I'm getting is food
03:56 - input I would just like the value not
03:59 - the entire
04:00 - element so if I were to type in coconut
04:03 - press the button new food is going to be
04:05 - a string of coconut then after pressing
04:08 - the button I'm going to reset this input
04:10 - element so it clears like this I can do
04:14 - that by copying this line of code where
04:16 - we access the value set it equal to be
04:18 - an empty string so if I were to type in
04:21 - something it should reset after hitting
04:24 - the button which it does let's try a
04:27 - mango and that resets too
04:30 - so we have the string that contains our
04:32 - new
04:33 - food we'll use our Setter to update our
04:39 - array if I were to pass in a new array
04:42 - then add new
04:44 - food this is what happens I will attempt
04:47 - to add a coconut add food our initial
04:50 - values of Apple orange and banana
04:52 - they're all gone we've replaced the
04:55 - initial array with the new one that
04:57 - contains only one string element our our
04:59 - new food that we're trying to add we
05:01 - need to copy over the previous elements
05:04 - of this initial state within this new
05:07 - array when setting the state we will use
05:09 - the spread operator and access our array
05:12 - of foods the spread operator when used
05:15 - on an array will spread all of these
05:17 - elements into separate values it'll look
05:20 - something like
05:25 - this we're replacing the initial state
05:27 - of this array with a new one
05:30 - so we need to copy the old elements over
05:33 - so this does work I will attempt to add
05:35 - a coconut and a
05:38 - mango however it would be best practice
05:41 - if we were to use an updator function we
05:43 - don't want to directly work with the
05:45 - current state of a state variable rather
05:48 - the previous state I will upgrade the
05:50 - statement into an updator function we
05:53 - will take Foods Arrow do this you don't
05:57 - want to use the same name as the current
05:59 - state variable a common naming
06:01 - convention is to take the first letter
06:03 - of your state variable and use that as a
06:05 - parameter foods will become f for the
06:08 - previous state we will use the spread
06:11 - operator on the previous state of foods
06:15 - and that should work we have an apple
06:17 - orange banana we can add a
06:20 - coconut or a
06:23 - mango now we're going to complete the
06:25 - handle remove food function there's one
06:28 - or two things I need to change
06:30 - make sure we use camel case naming
06:31 - convention I accidentally made the r
06:34 - lowercase there's going to be one
06:36 - parameter an index number because we'll
06:39 - be working with the index numbers of
06:41 - these list item
06:43 - elements within our unordered list we'll
06:46 - be working with the opening list item
06:47 - tag just for readability I'm going to
06:49 - put this on a new
06:54 - line like so within the opening list
06:57 - item tag we will set the onclick event
07:00 - handler equal to a call back a call back
07:03 - to the handle remove food function this
07:07 - function needs a parameter in order for
07:09 - us to pass in a parameter to the handle
07:11 - remove food callback we need to convert
07:13 - this to an arrow
07:15 - function we'll create an arrow with no
07:17 - parameters Arrow do this within the map
07:21 - method we're provided with an index
07:23 - number we'll be passing in that index
07:25 - number to this function so we can work
07:27 - with it within the hand remove food
07:30 - function we will use the setter for our
07:33 - Foods within the setter we'll use the
07:36 - filter method we will take our Foods use
07:40 - the built-in filter method of
07:42 - arrays with the filter method of an
07:44 - array we are
07:46 - provided with an element and an index
07:49 - number for that
07:50 - element however we do have a naming
07:52 - conflict we've already stated that the
07:55 - parameter of this function is going to
07:57 - be index just to differentiate it I'm
07:59 - going to rename index as I so within the
08:02 - filter function we will use an arrow
08:04 - function to do something we're going to
08:07 - filter all elements where the current
08:10 - index represented as I does not equal
08:14 - the index that we
08:15 - receive so if you take a look our
08:18 - element parameter is provided to us but
08:20 - we're not using it you can see that it's
08:22 - kind of grayed out we're going to
08:24 - replace this with an underscore using an
08:26 - underscore for a parameter is a
08:28 - convention to indicate that the
08:30 - parameter being passed to the function
08:32 - is ignored so with parameters if you see
08:34 - an underscore that means ignore it all
08:37 - right and this should
08:38 - work I will add a
08:41 - coconut a
08:43 - mango then I can click on one of these
08:45 - list items to remove it let's remove our
08:48 - banana our apple and the mango all right
08:52 - everybody so that is how we can update
08:54 - the state of arrays using
08:58 - react