00:01 - all right everybody we finally made it
00:04 - to pointers a pointer is just a variable
00:07 - that stores a memory address of another
00:09 - variable that's it the reason that we
00:11 - use pointers is because well sometimes
00:14 - it's just easier to work with an address
00:16 - here's an example i have a stack of
00:19 - maybe 20 pizzas that i'm going to give
00:21 - out for free to my neighborhood instead
00:23 - of going around house to house carrying
00:25 - the free pizza and handing it out it's a
00:27 - lot easier to go door-to-door and tell
00:29 - people where the pizza is located hey
00:31 - there's free pizza at my house at this
00:34 - address come and get some and that's one
00:36 - of the uses of pointers sometimes it's
00:38 - easier to just work with an address i'll
00:40 - tell people where the free pizza is
00:42 - rather than carry it around with me so
00:44 - when working with pointers we'll need to
00:46 - use the address of operator which is an
00:48 - ampersand as well as the d reference
00:51 - operator which is an asterisk let's
00:53 - begin with a name i'll create a pointer
00:55 - to a name
00:56 - standard string
00:58 - name
00:59 - assign your first name
01:02 - then we'll create a pointer to name
01:04 - where is my name located in my
01:06 - computer's memory to create a pointer it
01:08 - should be of the same data type as the
01:10 - variable it's pointing to
01:12 - i'm creating a pointer to a string
01:14 - this pointer will be of the string data
01:16 - type
01:17 - then type
01:18 - asterisk
01:20 - that dereference operator then a common
01:22 - naming convention for pointers is you
01:24 - type p
01:25 - then the variable name
01:27 - but i'm going to make the first letter
01:29 - uppercase
01:30 - i will set this pointer equal to
01:33 - the address of that name variable
01:36 - and there we go we have a pointer so if
01:38 - i was to display this pointer standard
01:41 - output
01:43 - p
01:44 - name
01:46 - my pointer contains this value it
01:49 - contains a memory address as its value
01:52 - to access the value at this address you
01:54 - would use the dereference operator
02:00 - i'm accessing the value of that address
02:03 - that's stored within this pointer which
02:05 - contains my first name by using this d
02:07 - reference operator i'm accessing the
02:10 - value that's at this given address which
02:12 - contains my first name let's create a
02:14 - couple other pointers
02:18 - let's create
02:19 - a variable age int age equals make up
02:23 - some age
02:25 - i'll create a pointer to age
02:27 - the data type of the pointer should be
02:28 - the same as the variable
02:30 - int dereference operator
02:33 - p
02:34 - age equals
02:36 - the address
02:38 - of age
02:41 - then let's display
02:44 - whatever value is located at the address
02:47 - that's stored within my pointer of ph
02:54 - so we have my first name and then an age
02:56 - i think i'm just gonna add a new line
02:58 - real quick
03:01 - going back to that analogy with the free
03:02 - pizzas i'll create an array
03:06 - an array of strings
03:08 - i'll name this array
03:10 - free
03:11 - pizzas
03:12 - i'll give this a size of five
03:17 - we have pizza one
03:21 - pizza two
03:23 - pizza three
03:25 - pizza four
03:27 - then pizza five
03:30 - like i said in my example it's a lot
03:32 - easier instead of carrying around five
03:34 - free pizzas house to house giving away
03:36 - pizza i can just tell people where the
03:39 - pizza is located i'll give them an
03:41 - address i'll create a pointer to this
03:43 - array we'll use the same data type we're
03:45 - storing strings
03:48 - dereference operator
03:50 - p
03:52 - free
03:53 - pizzas
03:55 - now i'm going to attempt to set this to
03:58 - the address
03:59 - of free pizzas
04:02 - now we're going to run into a problem
04:05 - my array is already an address
04:08 - so i don't need to use the address of
04:10 - operator
04:11 - let me demonstrate
04:16 - i will display
04:17 - see out
04:19 - free
04:20 - pizzas
04:28 - when accessing my array free pizzas it's
04:31 - already a memory address if i display
04:33 - the value contained within my pointer to
04:36 - my free pizzas
04:38 - it's going to be a memory address then
04:40 - if i was to use the dereference operator
04:45 - that would give me the first element
04:47 - within that array pizza one so those are
04:50 - pointers it's a variable that stores a
04:52 - memory address of another variable
04:55 - sometimes it's easier to work with an
04:56 - address instead of carrying five free
04:59 - pizzas with me and going house to house
05:01 - giving it away i'll just tell people
05:03 - where the free pizza is so those are
05:05 - pointers your assignment is to post a
05:08 - pointer in the comment section down
05:09 - below and well yeah that's an
05:11 - introduction to pointers in c plus