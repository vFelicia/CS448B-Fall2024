00:00 - so uh yeah I'm going to talk about
00:01 - multi-threading in Python today
00:03 - multi-threading is used to perform
00:05 - multiple tasks concurrently think of it
00:09 - like we're multitasking we're performing
00:11 - a few different actions at once for
00:13 - example I could study and listen to
00:15 - music and eat something at the same time
00:18 - multi-threading is good for Io bound
00:20 - tasks IO meaning input output such as
00:24 - reading files or fetching data from an
00:26 - API things that may take some time to do
00:29 - and we don't know when it's going to end
00:30 - exactly to use multi-threading we'll
00:32 - import the threading module import
00:38 - threading we access the threading module
00:41 - then call the thread Constructor and
00:43 - pass in a Target function what we'll do
00:45 - for this demonstration let's say we have
00:47 - a bunch of chores to do we have to walk
00:49 - the dog get the mail and take out the
00:51 - trash let's define some functions to
00:53 - handle that we have a function to walk
00:57 - the
00:58 - dog that I will print the following
01:02 - message you finish walking the
01:08 - dog let's create a function to take out
01:15 - trash then we will
01:18 - print you take out the
01:23 - trash then another function of get mail
01:28 - as in get the mail from the mailbox
01:31 - then I will
01:32 - print you get the
01:38 - mail just to simulate these functions
01:41 - taking an indeterminate amount of time
01:43 - I'm going to import the time module to
01:46 - help
01:47 - us let's say walking the dog takes 8
01:52 - seconds I will access the time module
01:55 - call the Sleep Method and pass in 8 for
01:58 - 8 Seconds
02:01 - when we call the walk dog function we'll
02:03 - wait around for 8 seconds then finish
02:05 - walking the dog this chore will take
02:08 - quite a bit of time to
02:09 - complete taking out the trash it's
02:12 - fairly
02:13 - quick taking out the trash will take 2
02:16 - seconds getting the mill will take 4
02:23 - seconds let's call these functions and
02:25 - see what happens we will Begin by
02:28 - walking the dog
02:30 - I will call the walk dog
02:32 - function followed by take out trash
02:38 - function and the get mail
02:41 - function here's the
02:44 - result we're going to wait around for 8
02:47 - seconds until the walk dog function is
02:50 - complete right about
02:54 - now you finish walking the dog you take
02:56 - out the
02:58 - trash and you get the the
03:02 - mail these functions are running on the
03:04 - same thread the main thread our main
03:06 - Python program we have to complete these
03:09 - chores in order one by one because
03:12 - they're all running on the same thread
03:14 - instead of walking the dog and then when
03:16 - we're done taking out the trash and then
03:19 - when that's done we get the mail we
03:21 - could accomplish all three tasks at the
03:23 - same
03:24 - time let's say we have a thread object
03:27 - we could say thread one or to be more
03:29 - descriptive let's say we have chore
03:32 - one let me zoom in a little
03:36 - bit chore one is going to contain a
03:39 - thread we will access the threading
03:42 - module call The Constructor for a thread
03:46 - we have to pass in a keyword argument of
03:48 - Target what is the first chore that we
03:51 - have to do let's walk the
03:54 - dog to start this thread we will take
03:56 - our thread object of chore one
04:00 - and call the start method to start it
04:03 - okay let's do this with chore
04:06 - 2 access the threading
04:09 - module call the thread Constructor pass
04:12 - in a
04:14 - Target then the name of a function take
04:16 - out
04:17 - trash chore 2.
04:21 - start and then we have chore
04:24 - 3 I'll just copy what we have cuz I'm
04:26 - feeling
04:28 - lazy chore 3 will be get
04:32 - mail here's the result
04:36 - now we finish taking out the trash first
04:40 - then we get the
04:41 - mail then we finish walking the dog so
04:45 - we're executing these functions
04:47 - concurrently we're multitasking we're
04:50 - taking out the trash and getting the
04:52 - mail and walking the dog all at the same
04:55 - time one thing that I did want to point
04:57 - out notice how we finished taking the
04:59 - trash first followed by getting the mail
05:02 - then walking the dog these tasks
05:05 - finished in a different order compared
05:07 - to when we weren't
05:08 - multi-threading that's because taking
05:10 - out the trash finished first it took 2
05:13 - seconds getting the mail took 4 seconds
05:16 - and walking the dog took the longest it
05:18 - took 8 seconds previously we finished
05:21 - walking the dog first then took out the
05:23 - trash then got the mail when all the
05:26 - chores are complete I would like to
05:27 - print a message I will print the
05:30 - following all
05:33 - chores are
05:35 - complete here's what happens
05:38 - currently we get this message that all
05:40 - chores are complete but we haven't
05:42 - finished any yet we're still completing
05:46 - them there may be a times you want your
05:49 - program to wait for all threads to
05:53 - finish before we print that confirmation
05:55 - message that all chores are complete
05:58 - we're going to use the join method
05:59 - method take each thread use the join
06:04 - method we'll do this with chore 2 and
06:07 - chore 3 as
06:09 - well with the join method we will wait
06:12 - for these threads to finish before
06:14 - continuing with the rest of the program
06:16 - here's the result
06:19 - now you take out the trash you get the
06:25 - mail and you finish walking the dog all
06:28 - chores are complete complete when
06:31 - constructing a thread object and we have
06:33 - a keyword argument of Target if some of
06:36 - these functions take parameters for
06:38 - example with the function of walk dog
06:40 - let's say we have a first name I will
06:43 - convert this print statement to an F
06:46 - string we will display first for the
06:49 - first name you finish walking whatever
06:53 - your dog's name
06:55 - is so when we're creating a thread and
06:58 - the target is that function and that
07:00 - function accepts arguments we need one
07:02 - more keyword argument and that is args
07:06 - we will send this function a tupple we
07:08 - need to set a parentheses within this
07:11 - tupple we will list our arguments let's
07:14 - say that our dog's first name is
07:17 - Scooby now since this is a tupple if we
07:20 - only have one argument we have to end
07:22 - that tupple with a comma to let python
07:24 - know that this is a tupple here's the
07:27 - result
07:30 - you take out the trash you get the
07:36 - mail you finish walking Scooby all
07:39 - chores are
07:40 - complete if we were missing this
07:43 - comma this is what would happen we're no
07:46 - longer passing in a
07:48 - tuple what if we have multiple
07:50 - parameters we have first for first name
07:53 - and last for last name you finish
07:57 - walking first and last
08:01 - we have first name of Scooby last name
08:03 - of
08:06 - do you take out the trash you get the
08:12 - mail you finish walking
08:15 - Scooby-Doo all chores are
08:18 - complete all right everybody so that is
08:20 - multi- threading it's used to perform
08:23 - multiple tasks concurrently as if we're
08:26 - multitasking we're executing multiple
08:28 - functions at at the same time
08:30 - multi-threading is good for Io bound
08:32 - tasks such as reading files or fetching
08:35 - data from apis and while everybody that
08:38 - is an introduction to multi-threading in
08:40 - Python