00:00 - how's it going everybody its bro here
00:02 - hope you're doing well and in this video
00:03 - I'm going to teach you guys all about
00:05 - anonymous inner classes in Java so let's
00:08 - get into it
00:11 - if you find this video helpful please
00:13 - remember to Like comment and subscribe
00:16 - your support will help keep this channel
00:18 - running hey everyone we're gonna be
00:20 - discussing anonymous inner classes and
00:22 - I've quite the definition here for you
00:24 - but don't worry it won't be too bad so
00:26 - an anonymous inner class is an inner
00:28 - class without a name hence the term
00:30 - anonymous right so only a single object
00:33 - is created from one when we use this and
00:35 - this object may have extras or changes
00:38 - and there's really no need to create a
00:40 - separate inner class because we only
00:42 - really use this once and the reason that
00:44 - we use an anonymous inner class is that
00:46 - it helps us to avoid cluttering code
00:48 - with a separate class name so the syntax
00:51 - is very similar to using a constructor
00:53 - except there is also a class definition
00:56 - that comes afterwards within a block of
00:57 - code and these anonymous inner classes
01:00 - are amazing for action listeners and
01:03 - you'll see why pretty soon so what I'm
01:05 - gonna do is that I'm gonna give you guys
01:06 - two examples one we'll just make a basic
01:09 - like welcome message and then for the
01:12 - second example we'll actually use an
01:14 - anonymous inner class for an action
01:16 - listener and you'll see why these are
01:18 - pretty great so let's go to our project
01:20 - folder go to the source folder and click
01:22 - file new class and let's call this class
01:25 - maybe greeting and we're just gonna
01:28 - display a welcome message within this
01:29 - class here so we'll make a public method
01:33 - that doesn't return anything so it's
01:35 - void and we'll call this welcome all
01:39 - right and then what we'll do with in
01:41 - here is just display a message such as
01:44 - maybe something lame like hello world
01:48 - okay let's create an instance of this
01:51 - greeting class so normally we would type
01:54 - in greeting the name of the class then
01:56 - come up with a name for this unique
01:58 - object so maybe greeting with a
02:00 - lowercase G equals new greeting okay and
02:05 - then we can use the hello function or
02:08 - the Welcome function of our greeting
02:11 - class so we type in the name of our
02:13 - object
02:14 - reading dot welcome and when we run this
02:20 - it displays hello world now we can use
02:23 - an anonymous inner class with this
02:26 - object here this greeting class so what
02:28 - we do after the constructor we're going
02:31 - to add a set of curly braces and now
02:34 - this is like a whole new class
02:36 - definition we can actually make a change
02:38 - to one of the methods within here and
02:41 - I'll actually copy this and paste it
02:44 - within here and what I'll do is maybe
02:46 - change this message to something
02:49 - professional like yo bro and now if we
02:52 - were to run this this Welcome function
02:55 - is actually going to display yo bro
02:57 - because it's as if we over rid this
03:00 - welcome method within our greeting
03:02 - function and it's usually good practice
03:04 - to add a message that says override if
03:07 - you override a function of some sort now
03:10 - what would happen if we created another
03:12 - instance of the greeting class but we
03:14 - did not use an anonymous inner class so
03:16 - we're going to create a greeting to
03:18 - object and then we're going to use the
03:21 - Welcome function of this greeting to
03:24 - object so we'll add that right after so
03:26 - greeting too and we'll use the welcome
03:29 - message and run the program so greeting
03:32 - one is yo bro and greeting two is
03:35 - HelloWorld and that's to be expected
03:37 - because the greeting to instance isn't
03:41 - using this anonymous inner class then so
03:44 - that's one of the uses for anonymous
03:45 - inner classes is because you can make
03:47 - some sort of like extras or changes to
03:50 - one specific object and that's really if
03:53 - you don't feel like creating a separate
03:55 - inner class within another class if you
03:58 - really only need plan on using it once
03:59 - then so that's the first example I'm
04:02 - going to give you guys another example
04:03 - of why these are actually great for
04:05 - using action listeners so I'm actually
04:07 - going to delete all this and don't worry
04:09 - I'll post all of this in the comments
04:10 - down below if you'd like a copy then
04:13 - I'll also delete this greeting class
04:20 - all right well for our
04:21 - what I think we'll do is create a simple
04:24 - jframe that contains three buttons and
04:26 - each of these three buttons will have a
04:29 - action listener that utilizes an
04:31 - anonymous inner class so they each can
04:34 - do something separate and you'll see the
04:36 - main benefit of this pretty soon so
04:38 - let's create a new class so go to your
04:41 - source folder then go to file new class
04:44 - and we'll call this maybe my frame
04:47 - because I can't think of any better
04:49 - ideas
04:50 - alright and we'll want this to extends
04:53 - j-frame
04:54 - so then go back to your main class make
04:58 - sure you get this import to go back to
05:00 - your main class we're going to create an
05:02 - instance of my frame so my frame and
05:05 - we'll call this instance maybe my frame
05:08 - with a lowercase M equals new my frame
05:13 - alright we're going to do everything
05:15 - else within our my frame class so what
05:19 - we'll want to do is create the
05:20 - constructor for the my frame class so
05:23 - we'll add that here my frame parenthesis
05:25 - curly braces let's create three buttons
05:29 - so will instantiate three buttons before
05:31 - our constructor so to do that type in J
05:35 - button we'll call the first button
05:36 - button 1 equals new J button and let's
05:41 - add some text right away so within the
05:43 - parenthesis just type in button number
05:47 - one I guess okay then we'll need to
05:51 - import something so Java x-wing dot J
05:55 - frame actually I'll just import
05:56 - everything here okay so then let's copy
06:00 - these and add a few more buttons so
06:03 - maybe button two and change it here as
06:06 - well and button three alright now we'll
06:11 - need to create the frame so we'll do
06:13 - that within our constructor so since my
06:17 - frame extends the jframe interface or
06:20 - parent class i should say well type in
06:22 - this dot set default close operation
06:27 - jframe dot exit on close you probably
06:31 - know the drill by now with J frames
06:34 - and this dot set size probably 500 by
06:40 - 500 for this example and this dot set
06:45 - layout to null because we don't want a
06:48 - layout manager not really necessary and
06:51 - this dot set visible to true okay let's
06:58 - add all of the buttons to our jframe so
07:01 - this dot add button one same thing with
07:08 - button two and button three okay we'll
07:13 - also need to set the bounds for each of
07:14 - these buttons so button one dot set
07:17 - bounds will place this where X is 100 y
07:22 - is 100 this will be 100 by 100 pixels
07:26 - long so it's a square ok so let's do
07:29 - this for buttons 2 & 3 so button 2 and
07:33 - button 3 and we'll just change the x
07:35 - position to 200 and 300 okay let's see
07:39 - what we have so far okay that's not too
07:43 - bad to begin with currently they don't
07:45 - do anything
07:45 - so with fast lessons if we wanted to
07:47 - utilize an action listener we would need
07:50 - RJ frame to implement the action
07:53 - listener interface and I wouldn't copy
07:55 - this down we're just going to delete
07:56 - this right away
07:57 - so we would have this class implement
07:59 - the action listener interface we would
08:01 - need an action performed method and then
08:04 - we would also need to add the action
08:07 - listener to each of these individual
08:09 - buttons so for example we would say a
08:11 - button 1 dot add action listener and
08:13 - then we need to pass in an action
08:16 - listener and we can just type in this so
08:18 - we're passing in an action listener as
08:20 - an argument but if we use an anonymous
08:22 - inner class we actually don't have to do
08:25 - all this crap so we can actually get rid
08:26 - of these and I'll show you a better way
08:28 - of doing this now so we're going to get
08:31 - rid of implements action listener if you
08:33 - did write that down and instead of
08:35 - passing in this we're going to create a
08:38 - new action listener so new action
08:42 - listener parentheses and then we're
08:46 - going to create an anonymous
08:47 - in her class within this set of
08:50 - parentheses so add a set of curly braces
08:52 - and then you'll probably get a prompt
08:56 - for add unimplemented methods so this
08:59 - button has its own actionperformed
09:01 - method now and we can do something very
09:03 - specific
09:04 - just for button one and this is kind of
09:06 - like in the first example where we
09:08 - displayed a different print lining
09:10 - statement that said yo bro so let's type
09:13 - in something different so if system dot
09:15 - out dot print line maybe you pressed
09:20 - button number one all right so let's
09:25 - actually copy all this and paste it and
09:28 - make a few changes for each of these
09:29 - buttons so button two will have its own
09:32 - action listener and we're utilizing an
09:35 - anonymous inner class and this action
09:37 - performed method will do something else
09:39 - such as you press button two and let's
09:42 - do the same thing for button three and
09:44 - you pressed button three so it's like we
09:48 - don't have to have all these buttons
09:50 - share the same action performed method
09:52 - they can all have their own and we don't
09:54 - need this whole class to implement the
09:56 - action listener interface so this is a
09:59 - lot cleaner coding so let's try this now
10:02 - okay so here are the three buttons you
10:06 - press button one you press button two
10:08 - you press button three so we know that
10:10 - it works so that's one of the great
10:12 - things about using an anonymous inner
10:14 - class there's no need to create a
10:16 - separate inner class when we're really
10:17 - only going to use this class for one
10:19 - specific thing like make one specific
10:22 - change like for example an action
10:25 - listener where we can hook up an action
10:27 - listener to each individual button and
10:29 - they'll each have their own action
10:30 - performed method so that's everything
10:33 - you need to know to get started with
10:34 - anonymous inner classes if you want a
10:37 - copy of all this code I'll post this in
10:38 - the comments down below and well yeah
10:41 - that's how an anima sinter classes work
10:43 - in Java
10:43 - hey you yeah I'm talking to you if you
10:46 - learn something new then you can help me
10:49 - help you in three easy steps
10:51 - by smashing that like button drop a
10:54 - comment down below
10:55 - and subscribe if you'd like to become a
10:57 - Bella bro
10:59 - [Music]
11:10 - [Music]