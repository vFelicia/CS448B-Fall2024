let's go hi I'm green I'm the director of curriculum at codable the short video is going to introduce you to the concept you'll be teaching in this unit thanks for watching a class is a definition for an object all objects are created from classes and can't exist without them a class holds information or the details about an object an objectoriented programming classes are used like a blueprint or a template to create new objects from in our objectoriented programming video we talked about the way that objectoriented programming mirrors the way the world around us works we talked about how objects interact with each other to do certain things using an example of vehicles we talked about how cars and trucks are both subclasses of the vehicle class let's talk a little bit more about vehicles and how we can understand classes as blueprints to create new objects from we know that all vehicles share fundamental similarities they all have wheels and engine breaks and the ability to drive picture yourself at a car dealership and think about every one of those shiny new cars on the lot automakers don't need to start from scratch each time they design a new vehicle like thinking about how it's going to run stop move or steer this is already defined and used over and over again to produce new vehicles automakers essentially have a blueprint that they can create new objects from which can be modified or tailored to create a specific make or model of a car we know that an objectoriented programming classes work like a blueprint or a template to create new objects from encoder bowls onscreen practice and bug world's students will actually see the JavaScript code that defines the Tower class which they'll be working with to create new objects in order to defend the fuzz family from the bugs in their slide in the code for the tower class students will see the name of the class properties of the class and functions of the class students are able to create new objects from this class and see the JavaScript code with each step in the process in this lesson there are different types of slimes that are moving at different paces coming toward the fuzz family students need to choose either the Flamingo class the mighty gnome class or the shield class to build new towers from each of these classes have different properties so students need to think critically about the properties of their classes and choose to build towers that will best defend from the fast and slowmoving slimes an actual code that our programmers wrote for the onscreen independent practice mazes a sweet morg each of the arrows belongs to something called the command class every object in a command class has the ability to be dragged dropped or deleted and has a property for direction each of the arrows has a different direction property and image property which makes them look different to the user and allows them to move the fuzz in the right direction depending on which arrow they select in the program classes give programmers a simpler interface to use with a complex object while giving users a common interface to use think back to our vehicle example any driver can get into any car and expect that the steering wheel is going to be in the same location the gas pedal is going to be on the right and the brake pedal is going to be on the left without classes we couldn't do anything in objectoriented programming classes define what our objects look like and what they do in our programs