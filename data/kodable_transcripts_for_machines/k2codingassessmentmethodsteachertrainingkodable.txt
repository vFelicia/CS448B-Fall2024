our next section will be about how to assess k2 coding so we've talked about the standards kind of where we're coming from what different learning outcomes we might be looking towards for our k2 students and now we're going to talk specifically about methods for evaluation and again i mentioned it on the last slide but you get to decide what success looks like in your computer science classroom there's no one way to teach and measure progress in coding for elementary students so the essential question becomes if we want to approach measuring progress in like a holistic way but the standards are not one size fits all what methods can we actually employ that will reflect the unique experiences and strengths of our students and this is where i believe that formative authentic assessment is crucial and the methods i'm going to chat about today the three of them were developed at the harvard graduate school of education where they're conducting research about computer science assessments in elementary grades and they've outlined three approaches to assessing computational thinking which is what i will touch on now and i'm gonna mention engagement at the end but i think that these three evaluation strategies plus a general measurement of your student engagement will make for a really strong assessment strategy i do love this quote from the harvard graduate school of education in one of their research papers they mentioned that most conceptoriented assessments like quizzes on the definitions of concepts were insufficient in representing a learner's development as a computational thinker so that just sort of gives an introduction for the idea that quizzes and tests about coding concepts might not be enough and we'll figure out some other ways to to reflect learning so first up is artifactbased interviews so this is one the first method that they mention that can be used to gauge computational thinking skills so in this approach learners are engaged in some sort of conversation about their computational product so like what project they're working on in class and how so typically these it's called an interview but i think of it more like a conversation are with a student using a work sample something the student has produced to guide the discussion it's just a conversation so basically learners have a chance to describe what they worked on and why and there's a ton of ways that interviews like this can happen commonly it would be with a teacher but i understand that interviewing all if you have like 50 students interviewing all of them oneonone about a project might be really timeconsuming these conversations can also be peertopeer they can be formal or like an informal checkin throughout class kind of in passing and it can even be tracked with a rubric if that's desirable and will help you stay organized i included a screenshot here of an example rubric that the graduate school offers that shows some example questions that you might pose to your students about the coding project that they're working on and then different ways to score um their types of responses you can see that the questions are super openended i mean it's important to approach any sort of conversation like this with an openminded mentality so why this method during conversations learners might offer insights or reasoning for their decisions that you the teacher may not have been aware of and taking time to have these conversations it'll really help students build confidence knowing that their work matters it's worth the time to talk about it and that you are curious to learn more about it down's how downsides as i mentioned depending on how many students you teach and interviewing all of them about their work could be very involved but i just feel like this type of evaluation this type of interview when it comes to a coding project where there's so many layers and different mindsets and concepts that are coming into it you can really dig in and find nuggets of insight that you're that you had no idea your student was thinking about when they created what they did all right the second evaluation method after the artifactbased interviews is design scenarios so in this approach learners will encounter like a series of creative projects or challenges and engage with them using knowledge and skills that they've developed over time so this method is effective because it invites students to synthesize their learning and they're going to use a bunch of skills that they've developed in new creative innovative ways so as the teacher you're able to evaluate not only if they're applying certain concepts correctly like for example are they showing are they demonstrating an understanding of sequence is the code that they wrote or the blocks they put together or the puzzle they're trying to solve is the answer in the correct sequence but also how creative the application of that knowledge is projects design scenarios are openended and there's not one right way to solve them so students can really synthesize their own learning and what they found important in their own way another really interesting way to use design scenarios would be to do sort of like a reverse a reverse process so you the teacher could create a project or find a project that exists online already from another teacher and then have students evaluate it by explaining what the project does describing how it could be extended or added to finding a bug in the project or an error and trying to fix it or taking the project and remixing it in their own way so this type of process where it's like a design scenario but flipped where the students are doing the critique it'll really demonstrate if students have a grasp on the mechanics of the project and if they know enough about the content to add and remix it so i love love this assessment method students can approach it in their own way there's no one right way to solve it so every child has the opportunity to be successful and bring selfexpression to the projects and again there are rubrics and different tools out there that can help you evaluate projects like this design scenarios but again since you know your students best you can really lead the charge there and i included images here from different projects we have available at codable where this sort of design scenario could take place and the final method that the harvard graduate school recommends for assessing computational thinking is learner documentation so in this approach learners are engaged in developing like reflective traces of their learning as an accompaniment to any other creations or work that they've done so one approach to learner documentation that i've seen for a lot of teachers work well is to have students create a design journal in which they are reflecting on their process and their progress throughout a project and i think selfreflection like this is really important it will help highlight areas in which learners demonstrate selfefficacy selfconfidence and may also illuminate areas where students might be struggling that's not obvious just from looking at the project or looking at their work but they might dig into it when asked to reflect on it later and it's basically just an added layer that goes beyond the what and the when of schoolwork and hones in on the why and the how of it uh if we only look at the quantifiable amount of work that a child has completed in a given time period we'd miss a lot of nuance so learner documentation and reflection is crucial and then my final piece on these evaluation methods what about rubrics quizzes tests i i think all of these are still okay in fact i think rubrics are extremely useful tools i mentioned one on the artifact based interview slide i'm definitely not one of those teachers that never did a quiz or a test but i do recognize that it's difficult to capture student performance like in a set time period in one hour and 30 minutes so feel free to incorporate these you probably won't want to rely on them as your sole means of evaluation especially for computer science education because there are so many nuances to computational thinking so many softer skills that are really difficult to capture in a quiz or a test so these tools are still useful definitely not saying to throw them aside just recognize that for a for a subject as intricate as computer science having more of these selfreflective pieces projects conversations will be needed to kind of get to the bottom of it and then finally before we move on to a breakdown of projectbased learning i will just take one minute to talk engagement i feel like this is a real buzzword especially in the age of virtual learning uh but it is important here especially with coding education measuring progress is informative for your teaching practice standards are useful absolutely and demonstrating learning to admin and parents is of course very important but i do invite you to think about why you want to bring coding into your classroom in the first place it's likely because you know coding is a skill that will benefit your students for their entire lives it's also likely because you want to foster a love of learning and an excitement to interact with technology in new ways and a desire to persist when faced with challenges find solutions all of this stuff this is all only possible if kids stick with it and if they don't give up when it gets hard because i can tell you i am currently in the process of learning how to code myself and oh boy it really does get hard so all of this to say that engagement and enjoyment of coding is paramount and i'd say a thousand times over that regardless of standards and evaluation methods if your students are excited and motivated to learn then it's a success they will keep keep going with it they will learn more as they grow so at the end of the day when you're thinking about all these different methods to gauge learning outcomes and progress i definitely encourage you to think about how you're measuring engagement whether that be time spent or number of projects created but for a lot of students it would just be you know motivation and interest in continuing so it's going to be up to you to decide what that looks like but definitely an important piece of the puzzle