picture this you're in bug world there's an approaching slime you have never seen before yikes it looks faster and stronger than the others you have approximately five seconds to choose a tower to defend against this oncoming slime which one do you choose blue blaster has unlimited range jalapeno popper has more strength and rainbow rush is the fastest this slime is gaining quickly and there are more to follow so you choose rainbow rush the tower with the fastest speed quick and easy right but did you know that in those five seconds you used the tower class and the rainbow rush subclass to create an object that defeated the slime not sure what I'm talking about let's break this down from the beginning in our last video on object oriented programming we answered the question what is a class if you need a reminder a class is a definition or a blueprint from which individual objects are created think about the blueprint for a car there are properties that all cars have like a body wheels and engine and functions all cars can perform like drive break and turn but the blueprint itself doesn't really do anything on its own it just gives you instructions for how to make something take the blueprint and use it to build a car now you've created an object you can use the same blueprint to create lots of objects each one will have the same properties and functions in programming it's actually pretty similar when coding you can create a new class and write out all your instructions for how to make it just like in a blueprint then you can write a little bit of code that says I want to use the class to make a brand new object and bam the object is created so back to our car example you can get into any car and expect it to have a body wheels and an engine and now no this is because all cars are built from the same class blueprint but if they're made from the same blueprint then why do so many cars look so different from each other of course there isn't just one thing called a car there are hundreds of makes and models in different colors and shapes in programming we can use subclasses to create similar yet different classes that share characteristics even though they look different both a Porsche and Mustang are still cars so we would consider them subclasses of the car parent class you know how creatures inherit certain characteristics from their parents subclasses inherit all the same properties and functions from the parent class too this means that if a car class blueprint has instructions for four wheels the blueprint used to create a Porsche will also have four wheels same with the Mustang blueprint all of this information gets passed along or inherited without you needing to repeat any code that's already in the card blueprint this helps keep your code dry which is especially helpful when you have lots of subclasses and you want to create multiple objects from each one remember our earlier example from bug world the car class we've been talking about works the same way as the tower class in bug world similar to the car class there isn't just one thing called a tower bug world has many different subclasses of tower objects created from each subclass look and behave differently and are responsible for different things in the end they all work together to defend against the slimes now it's your turn to jump into bug world use the classes to create objects that work together to stop this lines happy coding