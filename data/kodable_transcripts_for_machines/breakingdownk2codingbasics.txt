hello everyone uh thank you so much for joining us for today's teacher training about breaking down k2 coding i'm going to wait just a couple more minutes to see if more people will be joining us but this webinar will be recorded so if you need to leave for whatever reason if you want to review some of the things we talk about without taking notes today you will be able to do that so in this webinar today we're going to be covering some of the most very basics of bringing coding into your k2 classroom and this is for complete beginners or if you are someone who has already shown interest in coding with your k2 students and want a little bit of a refresher going into next school year this is made for you as well we're going to be covering what k2 coding means for five to sevenyearolds as well as some of the benefits not just for your students but for you the teacher or the administrators at your school there's a lot of benefits when you bring coding into your classroom so we'll chat about that and we'll be sure to cover how to join the amazing community of stem teachers that exist in the k2 coding sphere and there's some really awesome teachers doing great work so i'll talk about how you can connect with them if you want to learn a little bit more before we begin yeah i just want to mention one more housekeeping item which is that we have a couple other webinars coming up we have this one today which is really about the basics introducing you to k2 coding in general but next week on wednesday or on tuesday excuse me we'll be talking about the steps to take to actually start coding with your students so step by step where to start what to do next so if that's interesting to you that's happening next tuesday and then in october we're also going to be chatting about progress tracking measuring achievement and evaluating success in a coding classroom so be sure to check that out that'll be in october we have links to those webinars on our website and if you have any questions please feel free to reach out to us at codable or to me and we can tell you a little bit more about what those webinars will be about so i am going to jump into the training today breaking down k2 coding and i do want to mention that if you have any questions throughout the webinar please feel free to write into the chat i have my colleagues brie and gretchen hanging out in there they're ready to answer any questions you might have and then i will of course be checking that chat throughout the webinar and answering anything that i can do as well so i am going to hop into our slides today breaking down k2 coding and i'm going to kick us off with the agenda for today's training session um this training is going to be a little bit more conversational in style than some webinars that i've seen in the past the reason being that this information is not one size fits all it's really going to change or evolve based on the needs of your students and your classroom so hopefully the information we cover today will provide a bit of a background and then we're here as well if you want to reach out and and make a plan a little bit more specific for your school so this is going to be an overview i will give a short introduction about me where i'm from and why i'm hosting this webinar today we'll go over what coding really means for a kindergarten a first or a second grader it's not the same as what coding will mean for us adults next we'll chat about the benefits of introducing coding to your youngest elementary students and like i mentioned before we'll chat about benefits not just for students but for teachers and for admin as well we will do a short vocabulary review i love how much teachers love vocabulary so we're going to cover some terminology that you might see as you're researching or investigating k2 coding resources a lot of words kind of look the same but they mean something different so we'll break down some some coding terms i will give some tips and tricks for how to connect with other teachers doing similar work in this field and finally at the end we'll leave some time for question and answers but like i mentioned before i'll be checking that chat on the side oh hello everyone thank you for joining i'll be checking that chat on the side and answering questions as we go and brie and gretchen are in there too to check in and answer any questions you might have so again here's our roadmap for the training today and we're going to start with a quick introduction so a little bit about me my name is hannah i'm based out of san francisco and i'm the instructional designer at codable here i am hello and i love teaching kids to code i've been doing work in this field both as a teacher and a curriculum designer and have had the pleasure of doing so in a wide variety of settings i've been a museum educator a camp director a preschool teacher and taught computer science both at the elementary and middle school levels so i really just love kids coding in general i earned my master's of education in learning design and technology with a focus in designing kids coding apps and resources and was thrilled when i joined the codable team in 2019 so i'm so excited to have all of you joining me today if you feel like it i love that many of you are already introducing yourself in the comments if you want to tell us where you're from or what role you hold and why you're interested in kids coding please feel free i want that to be a real community where you guys can ask questions and introduce yourself throughout the webinar and i'm excited to learn from all of you as well so like i said i work at codable codable teaches kids to code using fun interactive games and a large audience that we that we have are k through two classrooms but our games do cover topics ranging all the way up to fifth grade computer science standards so a k5 uh a k5 range so this teach this training is geared for any teacher using any tool you do not need to know about codable or have a free codable account to learn alongside me today and that said i will be using codeable in most of my examples during the webinar today since that is the tool that i know the best so if you're interested in learning more about codable please don't hesitate to reach out to me directly or the codeable team we're happy to chat and brainstorm about how to make codable work for your classroom and again this is for any teacher but i wanted to point out that codable is the tool that i will be talking about the most so let's jump in with the big one this is the the main topic of today's training what does coding mean in kindergarten for first or second grade um when i tell people that i work for a company that teaches elementary students to code i often get uh skeptical responses people saying really how does how exactly does that work are are those kids really learning how to code and i get the skepticism when we think of coding we often think of you know a a person working alone in a dark room with a glowing computer screen writing sentences and sentences of this random jar bowl of symbols and numbers and text so it's not going to look like that but yes i'm here to tell you that kids can code it'll look different than this picture we have in our head but they can do it so that's what the first part of our chat will be about we're going to break down some assumptions about what is coding and what does it mean for our youngest students so what is coding at its core coding means giving a computer clear instructions in a language it understands to produce a specific result so in other words it's telling a computer what to do and we can't do that just by telling it what to do in english or any other human speaking language we do that with code that's the language that computers understand so like i said you might picture someone coding like this maybe they're working in isolation they're writing lines and lines and lines of letters and numbers and symbols and this is what coding might look like for a lot of adults in certain settings but when we talk about kids coding we are definitely referring to something different we would not expect our elementary students to type lines and lines of syntax in front of a screen for hours we know that that's not developmentally appropriate or interesting for them at all however kids can absolutely do what this definition of coding describes they can give a computer really clear instructions to produce a result to have some sort of outcome so this is what we mean when we say kids can code and you might ask well if kids aren't typing out lines of code then how exactly are they still coding what does coding mean in this case and typically effective k2 coding apps or resources will employ some sort of drag and drop interactive something that engages fine motor skills that might cater to prereaders with symbols and shapes and colors as opposed to text and words so this picture on the right this is an example of a young student working in codable and you can see already that it's a bit more interactive than that picture prior where you're just typing on a keyboard kids coding can be really visual really interactive and engaging and it doesn't have to be like what we sometimes picture adults doing when they're coding so let's dive in a little bit more to what k kindergarten first second or really elementary school in general what coding can be like what else is out there so one way to teach young students to code is through blockbased coding and you might have seen examples of blockbased coding maybe it's in a recommended curriculum for you to use or just through your own research of examples like scratch junior that's what you see here regular scratch so here's this example code.org does blockbased coding there's a lot of other options as well so these platforms utilize some sort of draganddrop learning environment where learners use these coding instructional blocks you can see those colorful blocks that sort of snap together like puzzle pieces in a certain order to create their code those instructions we talked about on the last slide the the instructions you're giving to a computer so that's an example of blockbased coding coding that is appropriate for younger students and then another way to teach k2 students to code is through gamebased puzzles gamebased tasks so here is an example in codable this is a gamebased puzzle that also employs a drag and drop mechanic so students are dragging those arrow commands or those other commands up into those boxes in a certain order just like in block based coding where they link together in a certain order that will produce some sort of result in the game so in the codable example students are putting arrow commands in order to tell a little fuzzy character what directions to roll through the maze so in both examples in blockbased coding and in the codable gamebased puzzle there is a program there's code somewhere on the screen and then there's also a stage and the stage is the outcome it's showing what the code what the code does it's having some sort of a cause and effect and that's a really strong connection for our young students to make so when we think about why this works why these platforms really work for young students to learn how to code it's because there is that sensory feedback to every action changing the code or the input will change the output so what the learner sees or hears and students can utilize a lot of tools and resources that they might use in other subjects like the scientific method when they're learning to code so they're forming hypotheses about what their code will do and then they actually get to see the outcome what the code actually did and if there is something wrong in the code if one of those blocks are out of order or it's the wrong arrow command then they'll be able to see it immediately that feedback is right there they'll know that their code has a bug and then they can search they can go out and try to start fixing it so these platforms work to teach kids to code because they're visual they're interactive and they're oftentimes there's many possible solutions so there's not just one single way that a kid can solve a gamebased puzzle or put together a blockbased code there's many possible solutions to serve all different types of students but i do want to say that k2 coding does not only need to take place online or on tech devices i would say it's a little easier because if it's online then students can iterate faster and if they make a mistake they can change it and try something new a little bit faster than if they were writing with pen or paper but there are tons of unplugged pen and paper coding options that are a wonderful way to engage and get started with coding so if you don't have tech devices or you don't have onetoone devices that doesn't need to be the reason why you don't pursue coding in your classroom here are some examples of worksheets that engage some of the similar computational thinking skills that those online coding platforms do and you can find a lot of these on our website but we've also seen some awesome examples on teachers pay teachers or pinterest or blogs there's a lot of options out there if you don't have tech devices for your students so how exactly do these programs teach kids to code we know why they might work but what are kids actually learning from these different types of programs they're doing two main things the first is that they are helping learners develop a real understanding of coding concepts the fundamental concepts like sequencing so putting things in order conditional statements so if then statements which are like if something happens then something else will happen that's a core coding concept also loops so having some sort of repetition debugging solving problems these core coding concepts students can learn in kindergarten or even before so they are able to learn some of the main coding concepts that they would then use for their entire coding trajectory and the reason why it's possible for kids to learn about these fundamentals at such a young age is because there are truly examples of all of these concepts all around us these coding concepts all have a real world analogy that kids have likely already seen they've already experienced and the role of a coding teacher is just to help them reframe it when we teach code we're helping them draw on this existing knowledge around the world and apply it in a new way so a good example might be sequence putting something in order your students have likely followed some sort of set of instructions in their life maybe they've put together a lego build where they followed stepbystep instructions perhaps they've executed a recipe they've baked something and they followed stepbystep instructions they know that if one of their instructions are out of order then the thing won't happen the way that they expect so they've seen examples of sequence and we just reframe it we say just like you follow a recipe step by step your computer is going to follow your instructions and code step by step there's really clear links and that's why it's possible for even our youngest students to to learn the concepts and to learn how to code and i do see i have a comment on the side from mona who's asking if we have vocabulary cards for the coding concepts and we do have vocabulary cards um at codable we're happy to connect you with those and if you want to create your own it's pretty easy to put these words onto cards and then to have them up in your classroom so that way if you see an example of sequence in an everyday life throughout the school day you can point to it and make that connection a little bit clearer so that's a great question and then the second way that kids coding programs can help teach kids to code besides just learning the coding concepts is to help develop a coding mindset and this is a really core piece of why it's important to teach kids to code especially at a young age so we're talking about skills that coders have that can benefit students in all walks of their life so this includes you know creative problem solving resilience creativity logical thinking knowing when to ask for help these are skills that will permeate into all other subjects and not just be helpful when learning to code so i always like to say that these programs are doing both of these things at the same time and that's why they're really effective learning tools now because coding education is drawing on such a wide range of personal skills the way that coding looks in a k2 classroom is going to be hugely diverse and different from class to class the way that your students code and engage with these coding platforms is going to be totally different from the way students in another classroom might engage with the same tools so i just wanted to show some images of what k2 coding might look like sometimes it could be head down focus i remember when i was teaching my middle schoolers how to code there were some class periods where it was totally silent you could hear a pin drop nobody was talking they were all in flow and really focused on their work but most of the time i would say because coding is so fun it might be a little bit more lively than other classes so there could be cheering and pointing and leaning into each other hands up talking chatter it there's there's a little bit of a spark in the classroom when kids are are learning how to code because it's a new skill and it's something that's engaging all of those those coding mindsets that i mentioned on the last slide so there will also be some frustrated size and some you know some noises that are indicating that kids are are stuck and that's also the beauty of coding they will ask their classmates or find a way on their own to solve the problems and that's important too okay wow i went through a lot just then so that was our section of the webinar where we were talking about what is coding for a young student we went through some of the platforms that you might see when looking up what to bring into your classroom as well as what kids are actually learning from these programs and what it might look like in your classroom i am going to take a quick pause right here i'm going to turn my attention over to the side and the comments on the side to say if you have any questions about what we talked about please type it now and i can help address them before we move on to the benefits so i'm just going to look for a couple minutes seconds really and to see if anything comes in and it looks like brie and gretchen have been popping in over there to help with some questions so thank you both great well it looks like we don't have any specific questions coming in of course another reminder if you have any questions that come up later please feel free to reach out and i will have a little q a moment at the end of the of the training as well so now that we've talked about the what of k2 coding what it is we can talk about the why and my guess is if you're watching this webinar chances are you do have some idea of how coding education can benefit your students but you might not know all the details and that's why we're here so i've broken this section down into three parts the benefits for students the benefits for teachers because there are some benefits for you and some benefits for admin and and schoolwide benefits as well so first benefits for students this is likely why we're bringing coding into the classroom we want uh to help our students be the best that they can be and that's what we're going to talk about now so the first big benefit is the soft skills that students learn while coding that can be helpful in all areas of school and beyond so unlike hard skills that can be learned and evaluated these soft skills are they're a little bit more subtle they're they're harder to identify and they might be a little bit more difficult to measure but they are developed and fostered and nurtured through practice so we're talking about skills like teamwork and collaboration creative thinking and problem solving mental flexibility resilience and work ethic traditional schooling requires teachers to cover so much specific content knowledge that kids will be tested on so finding time to nurture and practice these soft skills can be really difficult and coding is one way to actively practice these soft skills that are you know they're equally as important these are skills that are going to serve them for their entire life so coding can really help with those soft skills for sure the next is developing executive functioning skills so similar to soft skills that are a little bit harder to target in traditional school but are still vital for future success coding can help target executive function skills like planning planning ahead selfpacing figuring out what pace would work best for you if working on a task by yourself working memory so remembering things in a short period of time and adaptability when faced with challenges so when presented with a challenge how do you respond and get through that challenge coding since there are so many opportunities to make mistakes but then also identify them and solve them it's really great for staying adaptable when faced with challenge and in general developing those executive function skills the third benefit for students is language development i think we all know that children are are better able to learn new languages when they're younger and code is just that it's a language and sometimes it's easy to forget that but it is a language that children can learn when they're younger they'll have a faster time to catch on as opposed to us adults who are interested in learning to code when we're older and we have a little bit more difficulty as well as being able to learn a language faster when they're younger language learning has been shown to improve a lot of things with student cognitive function so that includes you know enhanced problemsolving skills improved verbal abilities again better memory and creative thinking so because code is a language and language development has a lot of these benefits i just like to point that out it's one more benefit for your students and then the fourth one is increased selfefficacy so when we're talking about selfefficacy we're referring to a couple things one includes mental flexibility so how children are judging their own abilities their confidence levels their confidence in the ability to like exert control over one's own motivation and behavior and social environment uh coding and computer science lessons have been linked to increased selfefficacy especially for early elementary students these students have been shown to be more likely to stay on task to stay motivated to control their responses to stimuli in the classroom so that's another huge benefit for coding education so in summary for your benefits for students coding skills translate to many different areas and benefits students far beyond just learning to code which is why i love it so much okay up next is benefits for teachers so while i'm guessing most of you might be implementing a coding program for the benefit of your students there are some additional benefits for teachers that are a huge added bonus so the first is a classroom culture crafting a classroom culture that is meaningful for you and your students so what i mean by this is that coding can be difficult and by incorporating it you're telling your students that your classroom is a safe place to try something new to take a risk to come up and generate with multiple possible solutions when i was teaching i know my students would come to my classroom at their recess or their lunch breaks to just to ask crazy questions or to pitch a project idea just to let their creativity kind of run wild because they knew that the coding classroom that they entered was a place where they could do that they didn't have to do everything perfect they just had to put forward effort and express themselves how they wanted so even if you don't have your own classroom dedicated to coding if you are trying to incorporate coding or computer science into a math classroom or an english classroom just know that by doing so you are bringing in opportunities for problem solving and for risk taking and that's something really special for classroom culture and as well coding is oftentimes you know projectbased which means students have the opportunity to bring in their own personal expression to your classroom so you have that opportunity for responsive teaching the second benefit for teachers is we talked about it a little bit on the last slide but student engagement and motivation as i mentioned on that student benefits slide coding and computer science has been linked to increased student engagement and motivation to learn really so this is obviously great news for your kiddos but it's a huge plus for you as the teacher it's so much more fun and easy to teach when students are excited to be at school and excited to be learning which really is the key coding is fun and my students were motivated in class because it was something different it was something that was drawing on parts of their their brain that the other classes weren't the other subjects weren't you get to make things and share projects so seeing my students happy was a real benefit to me and i'm happy and engaged and motivated and i'm sure it would be for you too and then the third benefit for teachers is going to be student selfsufficiency again they all kind of weave together but the nature of coding is filled with trial and error forming hypotheses testing iterating debugging you know there will be an uncountable number of times where students need to get unstuck and the joy of coding is that there are possible ways to make that happen so you'll see students helping themselves helping their classmates to solve their problems in a way that works for them and practice is key right so if you bring coding into your classroom and there are so many chances for them to solve their own problems they are going to reach selfsufficiency faster this example on the right this picture you're seeing was sent to us from a teacher who uses codable in their classroom and it's filled with recommendation questions that students can ask each other when they get stuck so it's a way for kids to help each other and to not have to raise their hand and ask the teacher when they're stuck every single time they can solve the problem on their own with the help from their classmates and that's really great finally there are benefits for school admin or for schoolwide benefits as well and these are somewhat similar to benefits for teachers but i do think it's worth mentioning them on a schoolwide a schoolwide scale a bigger scale so the first bringing coding into your school can increase that culture of hard work we've talked about it a bunch but it's asking questions creative problem solving this doesn't need to be siloed to a single computer science room and frankly it shouldn't be it should be schoolwide and i've seen a lot of schools have success when teachers buy in and are infusing coding or stem into every subject and not treating it just as an extra um i think this is important because when we treat computer science or stem as an addon then our students are smart and they're learning that that stem and coding is separate from english and math and science and social studies when in the real world they're all really linked together stem and coding and computer science touch all of these subjects once they leave the school yard so i do like to encourage schools to be incorporating this and not treat it as separate that said fully integrating stem into a curriculum takes a ton of time and it's not going to happen overnight but i do think that coding especially is a a good smaller place to start and then a third benefit for admin is exposing children to new career paths you've likely seen some sort of a chart or like a bar graph that shows how exposure to computer science at a young age increases the likelihood that that child will pursue it again in the future either in graduate study or as a career and that is still totally true we never know what sort of interest we can spark with a new subject or a new experience so bringing coding into the classroom or into the school is a good way to expose students to something that they might not have realized was a possibility for them all right so we just went through the benefits we talked about benefits for students for teachers and for admin i'm again going to pause and just peek over to the the questions on the side to see if anything hasn't been touched on yet and if you have a question that you've been holding on to for this section please ask it now and i will see if i can get to it oh great yes i see some questions about digital citizenship cyber security oh goodness those are so important um we do have yeah i see that um brie responded we do have some introductory lessons on that i would also say that there are some other great digital citizenship resources with common sense media and code.org has a couple so there are digital citizenship resources out there if you have more questions okay great i don't see any more questions coming in specifically about the benefits so i'll move on to our buzzword review this is our vocabulary it's not a test we're just going to walk through some some vocab that if you're thinking about starting a coding program at your school you might run into and like i mentioned at the introduction some of these terms sound the same but mean different things and it can get confusing so i'm going to walk through all of them some of them are specifically related to coding they're coding terms and then some are more fieldwide terms that you might run into in your research so the first we've talked about this one a bunch already but coding is giving a computer instructions for k2 students we talked about how this can happen in the form of games or puzzles or worksheets or projects and a lot more options coding for k2 students is really all about sequencing so putting things in order recognizing when they're out of order and then employing other commands or other tools that can change the sequence can change the path of your code and again a huge emphasis for k2 coding specifically is debugging so recognizing when there's a problem being able to locate it and then trying many different possibilities for how to solve it now you've you've likely also heard me say program a couple times sometimes i use those interchangeably so if coding is giving a computer instructions then a program is the instructions themselves that's the word we use to refer to the actual instructions that a programmer gives to a computer so as you can see from this definition a program is the specific set of instructions that is that we give to a computer to read and follow and the the key here in a program order sequence as i mentioned before it really matters a computer will read a computer program the same way that we read a book from left to right top to bottom and if one of the instructions is out of order or written incorrectly then the program will not do what it's supposed to do it will not run properly and the third term here is algorithm and this is kind of one level deeper so i before i before i wrap up algorithm i do want to say if this is confusing and if these words mean the same thing um this again will be recorded you can always revisit i know sometimes if you're a super beginner to coding and you you have not been exposed to these words they can all kind of sound the same um but let's talk about algorithms so this is an exact specific set of steps needed for a computer to reach a specific outcome to do a specific thing so in code written by adults like the code that was written that allows me to speak to you on this live stream there are tons and tons and tons of algorithms in a single program tons of little tasks that the computer has to do for this to work properly in k2 coding because our students are so young there will often only be one or possibly two algorithms two tasks that students are controlling at any time so this will help with focus and they won't get bogged down with needing to remember tons of little things they want the computer to do there's typically only one and algorithms are all around us a great example is a recipe so you can see the image on the right is an algorithm showing how to make a peanut butter and jelly sandwich and this is an example of something that like mona had mentioned you can put on a word wall or you can put up on your wall as an anchor chart to show an everyday algorithm so in this case you need to follow the steps in the specific order in order to have the outcome you want make a peanut butter and jelly sandwich and if one of these things are out of order like you spread the peanut butter before you've cut the bread then you won't be able to make your sandwich properly so that is an example of an algorithm we're going on we're we're entering the world of computer science now so you've heard me jump between coding and computer science and here's the clarification computer science includes coding coding is a part of computer science but this field also looks at how computers and programs work and interact in the real world so there are some broader implications in computer science that might include things like robotics game design hardware and software digital citizenship like we were talking about in the chat these are all things that make up the field of computer science so you might be interested in just teaching coding really honing in on giving a computer specific instructions or if you're incorporating computer science you might be also looking at how things like robots and hardware and software and being a digital citizen what these things mean um in the real world stem we likely all know what stem stands for science technology engineering and math but something that i've noticed when i do my own research is that stem is really used quite frequently nowadays um in a lot to mean a lot of different things sometimes it means all four of these topics on their own but i personally think the key to stem is when these four words are grouped together it's that strong integration so i believe that with stem we're intentionally melding these disciplines together and this integration will encourage students to draw a connection between all four components so a good example is computer science it's a wonderful representation of the spirit of stem because as a field it integrates science technology engineering and math all for our are super incorporated which is also great if you're a math teacher and perhaps you've been prompted to bring coding into your math curriculum computer science already has so much math involved that it's a it's a really easy integration and is possible for any of us to do even with our youngest students okay we're almost done we have two more words the first is makerspace so if you're looking to start off with stem but you're not sure if you want to dive straight into coding there is another place to start and that's with maker spaces so maker spaces don't they do not need to be hightech and they do not need to look like a pinterest board a maker space is really defined by the mindset having a maker's mindset is really powerful when students are constructing and building and creating things we're emphasizing that the process is as important as the product and having that maker's mindset is what defines the space you don't need all the bells and whistles to make it happen computer science concepts like robotics design or engineering app design um game design these are all things that can organically evolve from work in maker spaces and if uh i think makerspaces are a really stellar place to start if you want to see what your students are interested in you can give them openended creation time you'll see where they gravitate towards you'll see what sorts of things they are innately interested in making and then you can kind of build off of that to construct your stem or your computer science curriculum and you have options so you could have a maker corner in your classroom you could do like a popup maker space for a singular project when i taught computer science we did a game design unit where the classroom was transformed into a makerspace for a couple weeks so they could build board games before we then coded them using scratch so that's an option but you could also do a virtual maker space we saw virtual maker spaces really become popular during the school shutdowns with the pandemic so having some sort of place online that your students can go to like a google slide deck or some other website where there's multiple projects they can choose from they can click on them and then do you know a level encodable for example that's one option if you don't have a space to actually make a physical maker um it's not required and i'm wondering if maybe brie or gretchen you guys can uh plop the link to the blog post for the virtual makerspaces that we wrote we have a good one just for getting started if you're interested in that all right and then our final word today is project based learning this is a big one and honestly i could do an entire webinar just on this so i'm going to keep it brief but i did want to bring it up here because i think it's a fabulous way to help students start to draw connections between computer science and the world around them so projectbased learning is really what it sounds like it's projects and learning through working on a longer project and these are often presented as like a challenge or a real world problem that will ask students to come up with a real solution and since computer science as we mentioned it it covers a wide range of topics that students are interacting with every day through technology or the apps on their phones hopefully your k2 students don't have phones but i know that they do because i saw when i was a teacher all of these things that they're interacting with daily you can they can come up with better solutions for them if there's a problem that they're facing and projectbased learning is one way to do that oh okay we made it we're on to our last section before i dive in i'm gonna one more time turn my attention to the the questions and the comments just to see what you guys are chatting about over there and then we will jump into our final section which is how to connect with members of the stem community um oh great so i see some of us talking about our goals for the school year erica said my goal is to collaborate with teachers and combine coding and lessons being taught in the classroom i love that mona said i would like to incorporate coding into science and social studies we will be talking more about subject integration in next week's webinar so i recommend if you are interested in figuring out how computer science or coding might be integrated into whatever what other subjects you're teaching i highly recommend giving that one a peek we're going to dive into it a little bit more and make those connections clearer okey dokes so i don't see any more questions coming in i'm going to wrap up our webinar today with how to ask questions and get ideas from other teachers so if there's before i began i realized i don't have a slide for this but i did want to mention it if there's a coding or a stem program that you're curious about like codable or scratch and before you start you you would love to talk to a teacher who's already using it just to see how they're doing it and to learn a little bit more about the practical application i would recommend reaching out to somebody on that team somebody who works on the product like a customer service rep or somebody at the company i can speak from codable's experience we have teachers all over the world using codable in a wide variety of educational environments and we would love to connect you with a teacher who is also using that also using codable or whatever program in a similar way to offer insights or to answer questions since um they would be able to know some of the ins and outs better than we would since they have a similar teaching experience so that's just one thing i wanted to mention if you have specific questions about a program see if they can't connect you with a teacher who is also using that program i think it's a really nice way to learn okay so two ways to get involved and to get some of your questions answered are webinars and conferences these are two webinars that we love but there are a ton out there that one on the bottom that's computer science for rhode island those are not just rhode island themed webinars they just have a nice section on their website that maps out some free webinars that are coming up that you might be interested in signing up for and then as i mentioned at the beginning we have a couple webinars through codable happening next week on tuesday and then again in october and hopefully we can offer a lot more in the future as well and then conferences are an option they're a little bit more intensive because you are putting time aside to attend sometimes there is cost involved but it is a great place to meet with likeminded teachers and admin and learn about programs that you didn't even know existed so those are two options to start and then social media is really alive with stem and coding communities they're super active and these are two on facebook that we that we love and then a couple of our favorite instagram influencers stem influencers i mean they're a great place to get ideas like project ideas or classroom ideas and i know that many are really willing to connect and chat i mean they are teachers and parents just like you so that's one other place to go for for quick inspiration if you are interested in learning more about what coding might look like in different classrooms and actually see real pictures and videos from their work and with that we have reached the end of the presentation portion of this training i really hope that you gained some new ideas and some insights into k2 coding and that you you might be able to start picturing what it would mean for you and your students i don't see any more questions that have come in but i am going to quickly check my other list of questions to see if there were any more that might have come in throughout the webinar that we didn't have a chance to quickly answer and as i mentioned before if you don't if we don't have a chance to touch on your question or you didn't have a chance to ask it please do not hesitate to reach out i'm going to pop my um let me see if i can pop my oh it's already on there go hannah um i have my email on the screen here so if you have any other questions you can reach out to me directly and i'm happy to connect with you one to talk through how to bring codable into your classroom but also just to answer any other questions you might have so let's see great well i think that is it i'm going to close my presentation again thank you so much for joining us for today's webinar i had a blast i hope you learned something and you get to take something away i mentioned it before this webinar will be recorded please come back feel free to check in and review anything that you might have missed or to check in on our other free webinars that are coming up but i hope you have a wonderful day and happy coding bye