woohoo let's go hi I'm Bri and I'm the director of curriculum at codable the short video is going to introduce you to the concept you'll be teaching in this unit thanks for watching the codable curriculum teaches four objectoriented programming units classes properties functions and subclasses before we get into what each unit really is let's talk about what objectoriented programming is why it's important and how we'll learn it through the codable curriculum objectoriented programming is a programming language Paradigm that categorizes pieces of code into logical selfcontained objects each object has its own clearly defined set of tasks in a program a lot of different programming languages are objectoriented including JavaScript which is what we'll be learning in the codable curriculum so a programming language Paradigm what does all this technical jargon actually mean objectoriented programming is a lot like the way the world around us Works which makes it a lot easier to understand let's consider the world as a giant collection of objects some of these objects are similar to each other and some are not objectoriented programming mirrors the way objects interact with each other to do things let's talk about Vehicles like cars trucks vans or sports cars all vehicles are fundamentally similar that's why there's a name for this group of objects called vehicles in programming similar objects belong to something called a class your car is part of the vehicle class let's say you drive a car but your neighbor drives a truck your neighbor's truck is a vehicle but it isn't a car both cars and trucks are fundamentally similar but have clear differences in programming we use the term subclass here cars and trucks or subclasses of the vehicle class so we've talked a little bit about objects being fundamentally similar and a little bit different from each other when we use classes and subclasses we're talking about characteristics and actions that make objects either similar or different in programming these are called properties and functions we'll talk more in depth about classes properties functions and subclasses later in our units objectoriented programming takes something that's very complicated and simplifies it by breaking it down pieces of code are categorized into logical selfcontained objects that are each responsible for their own defined set of tasks in a program everything in codable bug world is objectoriented programming the fuzz family's only defense against the bugs in their slime is the tower class students will use this Tower class to create new towers which will be their own individual objects students will be able to edit properties and functions of their new towers as well as create sub classes in the independent practice portion of this introductory lesson students will apply their knowledge of classes and objects to create new towers which are objects from the tower class students will build a new tower from the tower class that best fits their defensive needs to protect the fuzz family from the oncoming slime since students will have more than one choice they'll need need to think critically considering the properties of each Tower class which are shown in the property Editor to the left as students Advance through bug world they'll be awarded new properties and be able to modify properties of individual objects when thinking about a real program that's objectoriented a game is a great example games are often written in objectoriented languages because there are a lot of different objects interacting with each other to do different things what makes objectoriented programming so useful here is the programmer having the ability to manipulate or change certain parts of the game programmers can change what a character does for example like giving them the ability to throw something without having to change everything about the character or certain parts of the whole program think about codable onscreen independent practice lessons the fuzz family can be thought of as the fuzz class and each type of fuzz like prism fuzz Ruby fuzz Simon fuzz and so on are subclasses of fuzzes every time your student unlocks or earns a new fuzz that individual fuzz that shows up on their screen is a new object what a fuzz looks like like its color shape etc those are properties of that fuzz and what it does like roll or squeal is a function of the fuzz objectoriented programming makes it easier to control control the program by compartmentalizing we can manipulate individual objects without having to change everything this adds complexity to the overall program and allows us to create Dynamic complex programs that have a lot of different and exciting moving parts