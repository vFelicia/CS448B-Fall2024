00:00 - [Music]
00:01 - woohoo let's go hi I'm Bri and I'm the
00:05 - director of curriculum at codable the
00:07 - short video is going to introduce you to
00:09 - the concept you'll be teaching in this
00:10 - unit thanks for
00:18 - watching the codable curriculum teaches
00:20 - four object-oriented programming units
00:23 - classes properties functions and
00:27 - subclasses before we get into what each
00:30 - unit really is let's talk about what
00:32 - object-oriented programming is why it's
00:34 - important and how we'll learn it through
00:36 - the codable
00:38 - curriculum object-oriented programming
00:40 - is a programming language Paradigm that
00:43 - categorizes pieces of code into logical
00:45 - self-contained objects each object has
00:48 - its own clearly defined set of tasks in
00:51 - a program a lot of different programming
00:53 - languages are object-oriented including
00:55 - JavaScript which is what we'll be
00:56 - learning in the codable
00:58 - curriculum so a programming language
01:01 - Paradigm what does all this technical
01:03 - jargon actually mean object-oriented
01:06 - programming is a lot like the way the
01:08 - world around us Works which makes it a
01:10 - lot easier to understand let's consider
01:12 - the world as a giant collection of
01:14 - objects some of these objects are
01:16 - similar to each other and some are not
01:19 - objectoriented programming mirrors the
01:21 - way objects interact with each other to
01:23 - do things let's talk about Vehicles like
01:26 - cars trucks vans or sports cars all
01:30 - vehicles are fundamentally similar
01:32 - that's why there's a name for this group
01:33 - of objects called vehicles in
01:36 - programming similar objects belong to
01:38 - something called a class your car is
01:41 - part of the vehicle
01:42 - class let's say you drive a car but your
01:45 - neighbor drives a truck your neighbor's
01:47 - truck is a vehicle but it isn't a car
01:50 - both cars and trucks are fundamentally
01:52 - similar but have clear differences in
01:55 - programming we use the term subclass
01:58 - here cars and trucks or subclasses of
02:01 - the vehicle
02:02 - class so we've talked a little bit about
02:05 - objects being fundamentally similar and
02:07 - a little bit different from each other
02:09 - when we use classes and subclasses we're
02:12 - talking about characteristics and
02:14 - actions that make objects either similar
02:16 - or different in programming these are
02:19 - called properties and functions we'll
02:21 - talk more in depth about classes
02:24 - properties functions and subclasses
02:26 - later in our
02:28 - units object-oriented programming takes
02:31 - something that's very complicated and
02:33 - simplifies it by breaking it down pieces
02:36 - of code are categorized into logical
02:38 - self-contained objects that are each
02:41 - responsible for their own defined set of
02:42 - tasks in a
02:44 - program everything in codable bug world
02:47 - is object-oriented
02:48 - programming the fuzz family's only
02:51 - defense against the bugs in their slime
02:53 - is the tower class students will use
02:55 - this Tower class to create new towers
02:58 - which will be their own individual
02:59 - objects students will be able to edit
03:02 - properties and functions of their new
03:04 - towers as well as create sub classes in
03:07 - the independent practice portion of this
03:09 - introductory lesson students will apply
03:12 - their knowledge of classes and objects
03:14 - to create new towers which are objects
03:16 - from the tower class students will build
03:19 - a new tower from the tower class that
03:21 - best fits their defensive needs to
03:23 - protect the fuzz family from the
03:24 - oncoming
03:26 - slime since students will have more than
03:28 - one choice they'll need need to think
03:30 - critically considering the properties of
03:32 - each Tower class which are shown in the
03:33 - property Editor to the
03:39 - left as students Advance through bug
03:42 - world they'll be awarded new properties
03:44 - and be able to modify properties of
03:46 - individual objects when thinking about a
03:49 - real program that's objectoriented a
03:51 - game is a great example games are often
03:54 - written in object-oriented languages
03:56 - because there are a lot of different
03:58 - objects interacting with each other to
03:59 - do different things what makes
04:01 - object-oriented programming so useful
04:04 - here is the programmer having the
04:05 - ability to manipulate or change certain
04:08 - parts of the game programmers can change
04:10 - what a character does for example like
04:13 - giving them the ability to throw
04:14 - something without having to change
04:16 - everything about the character or
04:18 - certain parts of the whole program think
04:20 - about codable onscreen independent
04:22 - practice lessons the fuzz family can be
04:25 - thought of as the fuzz class and each
04:27 - type of fuzz like prism fuzz Ruby fuzz
04:30 - Simon fuzz and so on are subclasses of
04:34 - fuzzes every time your student unlocks
04:37 - or earns a new fuzz that individual fuzz
04:40 - that shows up on their screen is a new
04:42 - object what a fuzz looks like like its
04:45 - color shape etc those are properties of
04:48 - that fuzz and what it does like roll or
04:51 - squeal is a function of the
04:55 - fuzz objectoriented programming makes it
04:58 - easier to control control the program by
05:01 - compartmentalizing we can manipulate
05:03 - individual objects without having to
05:05 - change everything this adds complexity
05:07 - to the overall program and allows us to
05:10 - create Dynamic complex programs that
05:12 - have a lot of different and exciting
05:14 - moving
05:17 - [Music]
05:24 - parts