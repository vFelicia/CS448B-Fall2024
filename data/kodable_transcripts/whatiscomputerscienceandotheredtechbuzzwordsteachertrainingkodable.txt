00:06 - [Music]
00:15 - [Music]
00:18 - i'll
00:18 - move on to our buzzword review it's not
00:21 - a test we're just gonna walk through
00:22 - some some vocab that if you're thinking
00:25 - about starting a coding program at your
00:27 - school you might run into
00:30 - some of these terms sound the same but
00:32 - mean different things and it can get
00:33 - confusing so
00:34 - i'm going to walk through all of them
00:36 - some of them are specifically related to
00:38 - coding they're coding terms and then
00:41 - some are more
00:42 - field-wide terms that you might run into
00:45 - in your research
00:46 - so the first we've talked about this one
00:48 - a bunch already but coding
00:50 - is giving a computer instructions for k2
00:53 - students we talked about how this can
00:55 - happen in the form of games or
00:57 - puzzles or worksheets or projects and a
00:59 - lot more options
01:01 - coding for k2 students is really all
01:03 - about sequencing
01:04 - so putting things in order recognizing
01:06 - when they're out of order
01:08 - and then employing other commands
01:11 - or other tools that can change the
01:14 - sequence
01:14 - can change the path of your code and
01:17 - again a huge emphasis for k2 coding
01:19 - specifically
01:20 - is debugging so recognizing when there's
01:23 - a problem
01:24 - being able to locate it and then trying
01:26 - many different
01:28 - possibilities for how to solve it you've
01:31 - likely
01:31 - also heard me say program a couple times
01:34 - sometimes i use those interchangeably
01:36 - so if coding is giving a computer
01:39 - instructions then a program is
01:43 - the instructions themselves that's the
01:44 - word we use to refer to
01:47 - the actual instructions that a
01:49 - programmer
01:50 - gives to a computer so as you can see
01:54 - from this definition a program is the
01:55 - specific set of instructions that
01:57 - is that we give to a computer to read
02:00 - and follow
02:01 - and the the key here in a program
02:04 - order sequence as i mentioned before it
02:06 - really matters a computer will read
02:10 - a computer program the same way that we
02:12 - read a book from left to right top to
02:14 - bottom and if one of the instructions is
02:15 - out of order
02:16 - or written incorrectly then the program
02:20 - will not do what it's supposed to do it
02:22 - will not run properly
02:24 - um the third term here is algorithm and
02:27 - this is kind of one level deeper
02:28 - so before i before i wrap up algorithm i
02:31 - do want to say
02:32 - if this is confusing and if these words
02:34 - mean the same thing um
02:36 - this again will be recorded you can
02:37 - always revisit
02:39 - i know sometimes if you're a super
02:41 - beginner to coding and you you have not
02:42 - been exposed to these words they can all
02:44 - kind of sound the same um but let's talk
02:46 - about algorithms so this
02:48 - is an exact specific set of steps
02:52 - needed for a computer to reach a
02:54 - specific outcome to do a specific thing
02:58 - in code written by adults like the code
03:01 - that was written that allows me to
03:03 - speak to you on this live stream there
03:05 - are tons and tons and tons
03:07 - of algorithms in a single program tons
03:10 - of little tasks
03:12 - that the computer has to do for this to
03:14 - work properly
03:16 - in k2 coding because our students are so
03:19 - young
03:20 - there will often only be one or possibly
03:22 - two
03:23 - algorithms two tasks that students are
03:26 - controlling at any time so this will
03:28 - help with focus
03:29 - and they won't get bogged down with
03:31 - needing to remember
03:33 - tons of little things they want the
03:34 - computer to do there's typically
03:36 - only one and algorithms
03:39 - are all around us a great example is a
03:42 - recipe so you can see the image on the
03:44 - right
03:45 - is an algorithm showing how to
03:48 - make a peanut butter and jelly sandwich
03:51 - and
03:51 - this is an example of something that you
03:54 - can put on
03:55 - a word wall or you can put up on your
03:57 - wall as an anchor chart
03:59 - to show an everyday algorithm so in this
04:02 - case
04:03 - you need to follow the steps in the
04:05 - specific order
04:07 - to have the outcome you want make a
04:10 - peanut butter and jelly sandwich
04:11 - and if one of these things are out of
04:12 - order like you
04:14 - spread the peanut butter before you've
04:16 - cut the bread then
04:17 - you won't be able to make your sandwich
04:19 - properly so that is an example of an
04:21 - algorithm
04:22 - we're entering the world of computer
04:24 - science now so you've heard me jump
04:26 - between coding and computer science
04:28 - and here's the clarification computer
04:30 - science includes coding
04:32 - coding is a part of computer science but
04:34 - this field also looks at how
04:37 - computers and programs work and interact
04:40 - in the real world so there are some
04:43 - broader implications in computer science
04:45 - that might include
04:46 - things like robotics game design
04:49 - hardware and software digital
04:51 - citizenship like we were talking about
04:53 - in the chat
04:54 - these are all things that make up the
04:56 - field of computer science
04:58 - so you might be interested in just
05:00 - teaching coding
05:02 - really honing in on giving a computer
05:04 - specific instructions
05:06 - or if you're incorporating computer
05:09 - science you might be also looking at
05:11 - how things like robots and hardware and
05:14 - software
05:15 - and being a digital citizen what these
05:17 - things mean
05:18 - in the real world stem we likely all
05:22 - know what stem stands for
05:23 - science technology engineering and math
05:26 - but something that i've noticed when i
05:27 - do my own research is that
05:29 - stem is really used quite frequently
05:32 - nowadays
05:33 - in a lot to mean a lot of different
05:35 - things sometimes it means all four of
05:37 - these
05:37 - topics on their own but i personally
05:39 - think the key to stem
05:41 - is when these four words are grouped
05:43 - together it's that strong
05:44 - integration so i believe that
05:47 - with stem we're intentionally melding
05:49 - these disciplines together
05:51 - and this integration will encourage
05:53 - students to draw a connection between
05:55 - all four components so a good example is
05:58 - computer science it's a wonderful
05:59 - representation of the spirit of stem
06:02 - because as a field it integrates science
06:04 - technology engineering
06:06 - and math all four are are super
06:08 - incorporated
06:09 - which is also great if you're a math
06:11 - teacher and perhaps you've been prompted
06:13 - to bring coding into your
06:15 - math curriculum computer science already
06:18 - has so much math
06:19 - involved that it's a it's a really easy
06:21 - integration and
06:23 - is possible for any of us to do even
06:24 - with our youngest students
06:27 - okay we're almost done we have two more
06:28 - words the first is makerspace
06:31 - so if you're looking to start off with
06:33 - stem but
06:35 - you're not sure if you want to dive
06:36 - straight into coding
06:38 - there is another place to start and
06:39 - that's with maker spaces
06:41 - so maker spaces don't they do not need
06:44 - to be high-tech
06:45 - and they do not need to look like a
06:46 - pinterest board a makerspace
06:49 - is really defined by the mindset
06:52 - having a maker's mindset is really
06:54 - powerful
06:55 - when students are constructing and
06:57 - building and creating
06:59 - things we're emphasizing that the
07:02 - process
07:03 - is as important as the product and
07:06 - having that maker's mindset is what
07:08 - defines the space you don't need all the
07:09 - bells and whistles to make it happen
07:11 - computer science concepts like robotics
07:14 - design
07:15 - or engineering app design
07:18 - game design these are all things that
07:20 - can organically
07:22 - evolve from work in maker spaces
07:25 - and if uh i think maker spaces are a
07:29 - really stellar
07:30 - place to start if you want to see what
07:32 - your students are interested in
07:34 - you can give them open-ended creation
07:36 - time you'll see where they gravitate
07:38 - towards you'll see what sorts of things
07:40 - they are
07:40 - innately interested in making and then
07:43 - you can kind of build off of that
07:44 - to construct your stem or your
07:47 - computer science curriculum and you have
07:51 - options so you could have a maker corner
07:54 - in your classroom
07:55 - you could do like a pop-up maker space
07:58 - for a singular
07:59 - project um when i taught computer
08:02 - science we did
08:03 - a game design unit where the classroom
08:06 - was transformed into a maker space for a
08:08 - couple weeks so they could build
08:09 - board games before we then coded them
08:13 - using scratch so that's an option but
08:16 - you could also do a virtual
08:17 - makerspace we saw virtual maker spaces
08:20 - really
08:21 - become popular during the school
08:23 - shutdowns with the pandemic
08:24 - so having some sort of place online that
08:27 - your students
08:28 - can go to like a google slide deck or
08:31 - some other website where there's
08:34 - multiple projects they can choose from
08:36 - they can click on them and then
08:38 - do you know a level encodable for
08:40 - example that's one option if you don't
08:42 - have a space to actually
08:44 - make a physical makerspace all right and
08:47 - then our final word today is project
08:48 - based learning
08:49 - this is a big one and honestly i could
08:51 - do an entire webinar just on this
08:53 - so i'm going to keep it brief but i did
08:55 - want to bring it up here because i think
08:56 - it's a fabulous way to
08:58 - help students start to draw connections
09:00 - between computer science and the world
09:02 - around them
09:03 - so project-based learning is really what
09:05 - it sounds like
09:06 - it's projects and learning
09:09 - through working on a longer project
09:12 - and these are often presented as like a
09:14 - challenge or a real world problem
09:16 - that will ask students to come up with a
09:19 - real
09:20 - solution and since computer science as
09:22 - we mentioned it
09:23 - it covers a wide range of topics that
09:26 - students are
09:26 - interacting with every day through
09:28 - technology or
09:30 - the apps on their phones hopefully your
09:31 - k2 students don't have phones but i know
09:33 - that they do because
09:34 - i saw when i was a teacher um all of
09:36 - these things that they're interacting
09:37 - with daily
09:39 - you can they can come up with better
09:41 - solutions for them if there's a problem
09:42 - that they're facing and project-based
09:44 - learning
09:44 - is one way to do that
09:50 - [Music]
09:52 - you