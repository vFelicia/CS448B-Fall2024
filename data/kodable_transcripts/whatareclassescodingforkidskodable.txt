00:02 - picture this you're in bug world there's
00:06 - an approaching slime you have never seen
00:08 - before
00:08 - yikes it looks faster and stronger than
00:11 - the others you have approximately five
00:14 - seconds to choose a tower to defend
00:17 - against this oncoming slime which one do
00:19 - you choose blue blaster has unlimited
00:22 - range jalapeno popper has more strength
00:25 - and rainbow rush is the fastest this
00:29 - slime is gaining quickly and there are
00:31 - more to follow so you choose rainbow
00:33 - rush the tower with the fastest speed
00:39 - quick and easy right but did you know
00:43 - that in those five seconds
00:45 - you used the tower class and the rainbow
00:48 - rush subclass to create an object that
00:51 - defeated the slime not sure what I'm
00:54 - talking about
00:54 - let's break this down from the beginning
00:56 - in our last video on object oriented
01:00 - programming we answered the question
01:02 - what is a class if you need a reminder a
01:05 - class is a definition or a blueprint
01:07 - from which individual objects are
01:09 - created think about the blueprint for a
01:12 - car there are properties that all cars
01:15 - have like a body wheels and engine and
01:19 - functions all cars can perform like
01:21 - drive break and turn but the blueprint
01:25 - itself doesn't really do anything on its
01:27 - own it just gives you instructions for
01:29 - how to make something take the blueprint
01:32 - and use it to build a car now you've
01:34 - created an object you can use the same
01:37 - blueprint to create lots of objects each
01:39 - one will have the same properties and
01:41 - functions in programming it's actually
01:44 - pretty similar when coding you can
01:46 - create a new class and write out all
01:48 - your instructions for how to make it
01:50 - just like in a blueprint then you can
01:53 - write a little bit of code that says I
01:55 - want to use the class to make a brand
01:57 - new object and bam the object is created
02:01 - so back to our car example you can get
02:05 - into any car and expect it to have a
02:06 - body wheels and an engine and now
02:09 - no this is because all cars are built
02:11 - from the same class blueprint but if
02:14 - they're made from the same blueprint
02:15 - then why do so many cars look so
02:18 - different from each other of course
02:20 - there isn't just one thing called a car
02:22 - there are hundreds of makes and models
02:25 - in different colors and shapes in
02:27 - programming we can use subclasses to
02:30 - create similar yet different classes
02:33 - that share characteristics even though
02:36 - they look different both a Porsche and
02:38 - Mustang are still cars so we would
02:41 - consider them subclasses of the car
02:43 - parent class you know how creatures
02:47 - inherit certain characteristics from
02:49 - their parents subclasses inherit all the
02:53 - same properties and functions from the
02:55 - parent class too this means that if a
02:57 - car class blueprint has instructions for
03:00 - four wheels the blueprint used to create
03:03 - a Porsche will also have four wheels
03:05 - same with the Mustang blueprint all of
03:09 - this information gets passed along or
03:11 - inherited without you needing to repeat
03:14 - any code that's already in the card
03:16 - blueprint this helps keep your code dry
03:19 - which is especially helpful when you
03:21 - have lots of subclasses and you want to
03:24 - create multiple objects from each one
03:26 - remember our earlier example from bug
03:29 - world the car class we've been talking
03:31 - about works the same way as the tower
03:33 - class in bug world similar to the car
03:37 - class there isn't just one thing called
03:39 - a tower bug world has many different
03:42 - subclasses of tower objects created from
03:45 - each subclass look and behave
03:47 - differently and are responsible for
03:49 - different things in the end they all
03:51 - work together to defend against the
03:53 - slimes now it's your turn to jump into
03:56 - bug world
04:00 - use the classes to create objects that
04:04 - work together to stop this lines happy
04:09 - coding