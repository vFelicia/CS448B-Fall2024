00:01 - let's go
00:03 - hi I'm green I'm the director of
00:06 - curriculum at codable the short video is
00:08 - going to introduce you to the concept
00:09 - you'll be teaching in this unit thanks
00:11 - for watching a class is a definition for
00:20 - an object all objects are created from
00:23 - classes and can't exist without them a
00:25 - class holds information or the details
00:28 - about an object an object-oriented
00:31 - programming classes are used like a
00:33 - blueprint or a template to create new
00:35 - objects from in our object-oriented
00:38 - programming video we talked about the
00:40 - way that object-oriented programming
00:42 - mirrors the way the world around us
00:44 - works we talked about how objects
00:46 - interact with each other to do certain
00:48 - things using an example of vehicles we
00:51 - talked about how cars and trucks are
00:53 - both subclasses of the vehicle class
00:55 - let's talk a little bit more about
00:57 - vehicles and how we can understand
00:59 - classes as blueprints to create new
01:01 - objects from we know that all vehicles
01:04 - share fundamental similarities they all
01:06 - have wheels and engine breaks and the
01:09 - ability to drive picture yourself at a
01:12 - car dealership and think about every one
01:14 - of those shiny new cars on the lot
01:16 - automakers don't need to start from
01:18 - scratch each time they design a new
01:20 - vehicle like thinking about how it's
01:22 - going to run stop move or steer this is
01:26 - already defined and used over and over
01:29 - again to produce new vehicles automakers
01:32 - essentially have a blueprint that they
01:34 - can create new objects from which can be
01:36 - modified or tailored to create a
01:38 - specific make or model of a car we know
01:41 - that an object-oriented programming
01:43 - classes work like a blueprint or a
01:45 - template to create new objects from
01:47 - encoder bowls on-screen practice and bug
01:50 - world's students will actually see the
01:53 - JavaScript code that defines the Tower
01:55 - class which they'll be working with to
01:57 - create new objects in order to defend
01:59 - the fuzz family from the bugs in their
02:01 - slide in the code for the tower class
02:04 - students will see the name of the class
02:07 - properties of the class and functions of
02:10 - the class
02:11 - students are able to create new objects
02:14 - from this class and see the JavaScript
02:16 - code with each step in the process in
02:18 - this lesson
02:20 - there are different types of slimes that
02:22 - are moving at different paces coming
02:24 - toward the fuzz family students need to
02:26 - choose either the Flamingo class the
02:29 - mighty gnome class or the shield class
02:31 - to build new towers from each of these
02:34 - classes have different properties so
02:36 - students need to think critically about
02:37 - the properties of their classes and
02:39 - choose to build towers that will best
02:41 - defend from the fast and slow-moving
02:43 - slimes an actual code that our
02:47 - programmers wrote for the on-screen
02:49 - independent practice mazes a sweet morg
02:51 - each of the arrows belongs to something
02:54 - called the command class every object in
02:57 - a command class has the ability to be
02:58 - dragged dropped or deleted and has a
03:01 - property for direction each of the
03:04 - arrows has a different direction
03:06 - property and image property which makes
03:08 - them look different to the user and
03:10 - allows them to move the fuzz in the
03:12 - right direction depending on which arrow
03:14 - they select in the program classes give
03:17 - programmers a simpler interface to use
03:19 - with a complex object while giving users
03:21 - a common interface to use think back to
03:24 - our vehicle example any driver can get
03:27 - into any car and expect that the
03:29 - steering wheel is going to be in the
03:30 - same location the gas pedal is going to
03:32 - be on the right and the brake pedal is
03:34 - going to be on the left without classes
03:36 - we couldn't do anything in
03:37 - object-oriented programming classes
03:39 - define what our objects look like and
03:41 - what they do in our programs