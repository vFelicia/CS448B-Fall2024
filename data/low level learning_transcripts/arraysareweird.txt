00:00 - we've all seen arrays before and array
00:02 - is just a block of memory that stores
00:04 - elements that are all the same size
00:06 - continuously in memory and then to
00:08 - access an array we do some kind of
00:09 - expression like this but why do arrays
00:13 - start at zero and also what if I told
00:15 - you that this was also legal in C today
00:19 - we're talking about the math behind
00:20 - arrays and why languages that use
00:22 - one-based indexing Lua are incorrect
00:25 - let's Jump Right In when we're
00:26 - programming and we have variables that
00:28 - are all of the same type and can similar
00:30 - kinds of information we want to store
00:32 - those variables into what is called an
00:34 - array and an array is just a block of
00:36 - memory that is meant to house variables
00:38 - that are the same type and the same size
00:40 - that are contiguous together in memory
00:42 - so to make one we'll make an INT array
00:44 - and we'll call it my array and two
00:46 - denote that it's an array all we have to
00:47 - do is put these square brackets after
00:49 - the name and we can place the size of
00:51 - the array in one of two locations we can
00:53 - either put it here and not preassign
00:55 - values or we can leave this blank and
00:57 - then preassign the values here I can do
00:59 - one 1 2 3 4 for example meaning I have
01:02 - an array now that is of size four and it
01:04 - contains the values 1 2 3 and four and
01:07 - maybe these are user IDs maybe these are
01:09 - lines we read in from a file this could
01:11 - be any kind of information that are all
01:13 - the same type and represent similar
01:15 - kinds of information when we're talking
01:17 - about arrays the first question that
01:18 - comes up for a lot of people is what is
01:20 - the type of this keyword and you're
01:23 - probably thinking well it's an array
01:24 - type no it's not in C the type of an
01:28 - array label is actually a pointer we can
01:31 - prove that by printing it right here so
01:33 - we'll compile the program and then print
01:36 - the array variable and that array
01:38 - variable is going to be hex 7f something
01:40 - something something and we can see that
01:41 - it's a stack based variable because it
01:43 - has this 7f here that 7f means that it's
01:45 - in the stack on a 64-bit system so now
01:49 - the question is how do we use the array
01:51 - right well like I said before to get a
01:53 - value out of an array all we have to do
01:55 - is index into it and to index into it we
01:58 - use the same syntax as the assignment we
02:00 - put the index that we want to use now to
02:02 - get the first element of the array you
02:04 - would think we'd use the number one but
02:06 - here we actually use the number zero
02:08 - which is really interesting because why
02:10 - do we even use zero if I want to get the
02:12 - first element shouldn't I use the number
02:13 - one let's just compile this real quick
02:15 - and show you that the number revealed
02:16 - here is in fact the first element now
02:19 - the reason that this happens actually
02:21 - has to do with the math that happens
02:23 - under the hood when we use the array
02:26 - pointer so like I said before an array
02:28 - is just a block of M memory that
02:30 - contains elements that are of the same
02:32 - size and they're all contiguous right
02:33 - this is like one 2 and three and it goes
02:36 - on until however many elements there are
02:37 - but this is our array in a nutshell the
02:40 - base of this array the keyword we use to
02:42 - describe it is called my array now under
02:46 - the hood when we actually want to access
02:48 - elements in this array the compiler does
02:50 - some math to generate the instructions
02:53 - to get the elements out of it we use the
02:55 - address of the array so my array plus
02:59 - the index you give it and this is in
03:01 - parenthesis here times the size of the
03:05 - elements so the size of int in this case
03:07 - right so what we're doing here is we're
03:09 - actually saying to get an element in my
03:12 - array we do my array plus the index
03:15 - times the size of the integer which is
03:18 - going to be four bytes so when I give it
03:20 - the zero withth index I actually end up
03:22 - doing my array plus 0 which gets us the
03:27 - first element because the my array is is
03:29 - just a pointer what I'm able to do is
03:31 - use basic pointer arithmetic to
03:34 - dreference values inside of it here so
03:36 - by saying the zero with index I'm saying
03:38 - my array plus zero which gets us this
03:40 - element and then the same math applies
03:42 - to get the next element in the array if
03:43 - I want to get the second element I
03:45 - actually going to use one because I'm
03:47 - going to index plus the size of the
03:49 - array to access the memory at that
03:51 - location pretty neat now that's all well
03:53 - and good and I think we all agree that
03:55 - that's what's happening under the hood
03:56 - here but what if I also told you that to
03:58 - get the zero with element of this array
04:01 - we could do this notation here we could
04:03 - say zero of my array now you're probably
04:07 - going to think no surely that won't work
04:09 - right zero isn't a pointer and my aray
04:11 - is a pointer we're using it as an index
04:14 - how how does that all happen under the
04:15 - hood and you can even Pro and we can
04:17 - prove that it works right now by running
04:18 - this command and seeing that we still
04:21 - get did I actually save this and seeing
04:23 - that we still get the piece of
04:25 - information that we did before so how
04:28 - how is this happening how is it possible
04:30 - that we can use zero as an array an
04:33 - index off by the my array pointer you
04:36 - may be thinking that it works the exact
04:38 - same way you're thinking oh well surely
04:40 - the transitive property of addition
04:42 - means that a plus b is the same as b + a
04:47 - and while this holds true in math it
04:50 - actually falls apart in programming
04:53 - because I have my array which in the
04:55 - previous example is equal to zero and
04:58 - the index is equal to the pointer value
05:01 - of my array multiplying that by four the
05:04 - size of an integer would make that array
05:07 - index overflow and none of this math
05:09 - would work out we would get some random
05:11 - address it' be some value mod 64 bits
05:14 - and then it would just crash we wouldn't
05:16 - get to the location that we need to do
05:17 - it's much simpler than this and it ends
05:19 - up being a bit of an optimization that
05:21 - the compiler does so in the event that I
05:23 - have the array of an index or an index
05:27 - of the array in both cases all this
05:30 - turns into is the thing pointed to the
05:33 - dfference value of a + I where a is a
05:39 - pointer type and I is a integer type now
05:44 - if I were to flip these if I made a the
05:46 - index and I the base at the end of the
05:48 - day internally one of these is still a
05:50 - pointer what's happening internal in the
05:52 - compiler is it's taking the value that
05:55 - is the integer type the non-p pointer
05:58 - type and it is upgrading it to the index
06:02 - so it's multiplying it times 4 and in
06:05 - this case it's multiplying still 0 * 4
06:09 - because Zer is that index value so all
06:11 - we have left is I which is our my array
06:15 - value What's Happening Here is not so
06:17 - much of a transitive property of
06:18 - addition thing it's just the compiler
06:20 - deciding which value gets upgraded to
06:23 - the pointer in which value does not so
06:25 - at the end of the day both of these are
06:27 - legal but not for the reason you
06:29 - probably thought so this is why I very
06:32 - much dislike languages like Lua I'm
06:34 - thinking about what's happening under
06:35 - the hood when I see an array where you
06:37 - index into the first element to get the
06:39 - first element I'm I'm thinking in the
06:41 - back of my head well then where is that
06:42 - first element there where is the zeroeth
06:44 - element now if you learned anything here
06:46 - you'll probably learn something too
06:47 - about why void pointers exist they're a
06:50 - typeless pointer that actually has a lot
06:52 - of power in the C language go check that
06:54 - out right there see you guys there