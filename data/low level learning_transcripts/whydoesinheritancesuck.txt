00:00 - I wrote two Snippets of code that have
00:02 - the same functionality they both use a
00:05 - low-level language to perform some basic
00:08 - math one in C and the other in C plus
00:10 - plus but one program runs almost 20
00:13 - percent slower than the other
00:16 - in this video we'll break down how C
00:17 - plus plus polymorphism Works under the
00:20 - hood with the keyword virtual is used
00:22 - for and why it's ultimately kind of slow
00:25 - but why is it so slow I guess we'll see
00:30 - we're trying to make a calculator that
00:32 - can perform several types of math
00:34 - operations but a generic operation
00:37 - doesn't just exist on its own an
00:40 - operation has specific functionality
00:42 - like addition multiplication Etc
00:44 - this problem is referred to as
00:46 - polymorphism or simply writing something
00:49 - in code that can take multiple forms by
00:53 - designing our code around a generic form
00:55 - of the class in our example in operation
00:58 - we can create what is called an
01:00 - interface which describes the behavior
01:02 - of a derived class without specifying
01:05 - the details of its implementation
01:07 - the code written in C uses a structure
01:10 - to represent a generic operation and at
01:13 - runtime uses an enum to determine what
01:16 - operation to perform so if the enum says
01:19 - hi I'm an ad it'll add if it's a
01:22 - multiply it'll multiply
01:23 - Etc
01:24 - but hold on C doesn't allow for objects
01:28 - so inherently this code isn't really
01:31 - object oriented actually it can't be
01:34 - object oriented C is not an
01:36 - object-oriented language so technically
01:39 - this code isn't polymorphic it's just
01:42 - well written code
01:44 - also notice that we can't use functions
01:46 - inside of the structure like we can in
01:49 - an object-oriented language we can't say
01:52 - operation dot execute or operation
01:55 - dereference and execute
01:57 - well in C technically we can use
01:59 - function pointers in a structure but the
02:01 - syntax is kind of gross
02:03 - so if we wanted to do formal object
02:06 - oriented programming this would not pass
02:08 - the test
02:09 - instead we have to use C plus plus C
02:12 - plus plus allows us to use classes which
02:15 - are basically just structures with
02:17 - function pointers inside of them classes
02:20 - in C plus plus can also be derived from
02:22 - one another meaning that if I have a
02:24 - Base Class B in a derived class D which
02:28 - is derived from B all of B's attributes
02:32 - become part of d
02:34 - first we have to define the parent class
02:36 - which represents the generic thing we're
02:39 - trying to represent in this case we'll
02:41 - Define a generic operation class the
02:44 - operation class will have two operands
02:46 - called operand one and operand two
02:50 - the operation class will also have a
02:52 - function called execute where the
02:54 - operation will take place
02:55 - by not implementing any functions this
02:58 - operation can be considered an interface
03:00 - it describes what needs to be
03:02 - implemented but not how
03:06 - but again remember a generic operation
03:09 - doesn't exist the execute method needs
03:11 - to be overridden by a child class that
03:14 - will implement this method to make this
03:16 - possible in the parent we have to call
03:19 - this a virtual method or a method that
03:22 - is allowed to be overridden by a child
03:24 - class
03:25 - by making this virtual and setting it
03:27 - equal to zero inside of the class in its
03:30 - memory it creates what is known as a v
03:32 - table or virtual table which later will
03:35 - account for the Slowdown inner code it
03:38 - is important to note that by default
03:40 - functions with the same signature in a
03:43 - derived class are virtual in the parent
03:45 - by default however for code readability
03:48 - it's important to use the virtual
03:50 - keyword so that readers of the code know
03:52 - that the code is intended to be
03:54 - overwritten
03:56 - to override this function execute let's
03:59 - make our child class
04:01 - and the execute function for add which
04:04 - adds operand 1 and operand2
04:07 - now that we have our derived class how
04:09 - do we use the polymorphism in our code
04:12 - to invoke the polymorphic class we
04:15 - create a pointer for the generic class
04:18 - in operation and point it to an instance
04:21 - of our derived class for example our add
04:23 - and then we call execute on the
04:26 - operation class and our ad happens
04:29 - but wait a minute how did Operation know
04:31 - what method to call you know we defined
04:33 - a zero method and our add method how did
04:36 - it know which one to go to
04:38 - when we call Operations execute method
04:41 - the operation classes V table is invoked
04:44 - and this is where things start to slow
04:46 - down for the generic operation class to
04:49 - know what function to call all derived
04:52 - classes contain a pointer to a v table
04:55 - or virtual table in the child class
04:59 - object memory now I know I've said V
05:01 - table a few times now in this video so
05:04 - what exactly is a v table
05:06 - a v table is just an array of function
05:09 - pointers to functions that are
05:11 - overridden by the child class
05:14 - B tables from the same parent all have
05:17 - the functions in the same order so that
05:19 - when a parent invokes a virtual method
05:21 - it knows what index in the table to call
05:24 - for example the virtual method execute
05:27 - is always in position 1 in a derived
05:30 - operation V table this way whether it's
05:33 - an add or a multiply or a subtract the
05:36 - base class will always invoke execute
05:39 - and not something else so while the
05:41 - order of the V table is the same the
05:43 - function itself will be different
05:45 - depending on the implementation by the
05:48 - child class let's walk through a
05:49 - Constructor and see it happen live
05:51 - here in the assembly for our calculator
05:53 - program we see the Constructor for the
05:56 - add operation calling the parent
05:58 - Constructor for operation after this it
06:02 - copies a pointer to its specific V table
06:04 - into its memory before returning from
06:07 - The Constructor
06:08 - so when the operation eventually calls
06:11 - the execute method it looks into its own
06:13 - memory finds the V table pointer finds
06:16 - the function pointer in the v table at
06:18 - the known offset and then calls that
06:21 - Jared I said yeah it not only has to
06:25 - dereference the pointer to itself in
06:27 - memory but then dereference another
06:29 - pointer to find its veto only to figure
06:32 - out what function to call and this is
06:35 - why V tables are so slow every
06:38 - invocation of a child class method
06:40 - requires at a minimum two pointer
06:43 - dereferences which is a memory load into
06:46 - memory before any code execution takes
06:49 - place
06:49 - now that may not sound awful but memory
06:52 - lookups are some of the slowest
06:54 - operations in Computing if your child
06:57 - class is V table isn't loaded Into Cash
06:59 - the cash Miss on RAM could result in a
07:02 - significant performance hit this is why
07:04 - RC code was ultimately faster and why C
07:07 - plus plus polymorphism using virtual
07:09 - methods is generally thought to be
07:11 - slower in our C code we used a structure
07:14 - that contained a variable to tell us
07:16 - which area in our switch statement to
07:18 - jump to this was only one layer of
07:21 - memory misdirection and could possibly
07:24 - be even further optimized using
07:26 - additional caching schemes using
07:28 - registers in the background
07:30 - our C plus plus code on the other hand
07:32 - wasn't so lucky every time we invoked
07:34 - our operations virtual execute method
07:36 - two memory loads occurred and the
07:39 - craziest part is that in my example I
07:42 - called the same V table every single
07:44 - time which means that this program
07:46 - wasn't even cash missing imagine if it
07:49 - was so maybe polymorphism just sucks
07:54 - you see what I mean now if you want to
07:57 - learn other ways to make your code
07:58 - faster check out one of these two videos
08:00 - and I'll see you next time