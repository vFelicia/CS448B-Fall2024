00:00 - are go-tos illegal you've probably heard
00:02 - the argument that go-tos make your code
00:04 - unreadable but this code is unreadable
00:07 - and there's not a go-to in sight so
00:09 - what's the deal with go-tos in this
00:11 - video we'll talk about what a go-to is
00:12 - under the hood how you can use go-tos
00:15 - incorrectly and how to correctly use
00:16 - them to make your code not only more
00:18 - readable but more efficient let's Dive
00:20 - Right In to discuss go-tos we need to
00:21 - First understand what a go-to actually
00:23 - is here I'm looking at some code and in
00:25 - the code we do some pretty
00:26 - straightforward stuff if argc is equal
00:29 - to two which means that we gave it two
00:30 - command line arguments we invoke the
00:33 - goto statement that tells the compiler
00:35 - to insert code that will make the code
00:37 - run at the print label we Define a label
00:40 - which is different from a function
00:41 - that's just an area of code inside of a
00:43 - function with the name of the label and
00:45 - then a colon and then code after that so
00:47 - if we give it to arguments we go to the
00:50 - print label and then we go there and we
00:52 - print that we got two arguments awesome
00:54 - otherwise if this didn't happen we go to
00:56 - leave and then from there we return zero
00:59 - and we can see under the the H it's
01:00 - actually going on in our program by just
01:01 - doing an object dump tacd Mel on what is
01:05 - and then in main you'll actually see the
01:07 - exact logic here that we wrote in C in
01:09 - assembly if you don't fully understand
01:11 - assembly that's okay all we're doing
01:12 - here is we're comparing the variable ARG
01:14 - C to two and if it's not equal we go to
01:18 - one label but if it is equal we go to
01:21 - another label what a go to literally is
01:24 - it inserts a jump instruction in our
01:27 - code in assembly now you're probably
01:29 - wonder ing what does this do for us why
01:31 - would we actually use this and that's
01:32 - actually a great question because if you
01:34 - look at this code already we've began to
01:36 - very heavily obfuscate what the code
01:38 - does and make it very difficult to read
01:40 - I'm already just looking at this code
01:42 - having a hard time understanding what's
01:44 - going on so this is a bad example of
01:46 - when go-tos are good and I would argue
01:48 - using logic like this to use go-tos is
01:51 - actually really bad but let's go to a
01:53 - good example pun intended here I have
01:56 - some basic server functionality and
01:57 - obviously this is not broken out into
01:59 - same functions that all do one thing
02:01 - this is all happening in one function
02:03 - but this demonstrates the point that I'm
02:04 - trying to make so to run the server we
02:06 - open a file and like good C programmers
02:09 - we check that the return value of that
02:11 - open call is a good value and if it's
02:13 - not we print the error for open we leave
02:15 - our program if we don't fail if we
02:18 - succeed we move forward and then we
02:20 - maloc room on the Heap to readin data
02:22 - from that file if that Malo buffer
02:25 - returns null a bad value and again we're
02:27 - checking for that every time because
02:28 - we're good SE programmers we have to go
02:30 - and close that file descriptor then go
02:33 - to print the error for Malik then return
02:35 - negative 1 and then if that succeeds we
02:38 - call socket check for a bad value and
02:41 - then we have to free the previous buffer
02:42 - we got before we have to close the file
02:45 - that we opened before and what's
02:46 - Happening Here is we are increasing
02:48 - every time there's a possible failure
02:51 - the amount of duplicative code that we
02:52 - have to insert right because we already
02:54 - have close written here and written here
02:57 - now we have to add free if we have more
03:00 - conditionally failable code that we
03:01 - insert this gets very very ugly to
03:03 - maintain and then even if it succeeds as
03:06 - good programmers we have to close our
03:08 - file descriptors and free our memory so
03:10 - we have to duplicate this code again
03:12 - this is where go-tos get really magical
03:15 - I'm going to insert goto into this code
03:17 - and show you how you can make it a
03:18 - little bit cleaner so here I've
03:20 - Rewritten the code but I'm using goto
03:22 - statements and you should immediately
03:23 - see that the code is not only more
03:26 - legible it's less chaotic and every
03:28 - error State as a Cascade down in the
03:30 - code doesn't get longer with the
03:32 - duplicate of code like close FD and free
03:34 - Malik for example and by the way if any
03:36 - of the syntax is confusing to you I am
03:38 - running a course right now called Zero
03:39 - to Hero C programmer Link in the
03:40 - description below go check it out if you
03:42 - want to learn more about the C language
03:43 - the C syntax really anything C or
03:46 - assembly related so the major change to
03:47 - the structure is that I've put a return
03:49 - value variable at the top of the code
03:51 - that will use to store our return value
03:54 - right it's zero success and if we return
03:56 - anything other than zero we have a
03:57 - non-success state right and then later
03:59 - on in the code like for example when our
04:02 - socket fails right instead of the socket
04:04 - failing and us having to close a file
04:06 - descriptor free Malik and that same code
04:08 - appears all over the place we just do
04:10 - one go to that goto is a label that will
04:14 - then fall through and run all those
04:17 - pieces of code that we had in the
04:18 - previous example so instead of having to
04:20 - do free here and close here we can put
04:23 - free at this label and then the next
04:25 - line of code will run it'll close the FD
04:27 - after that and then return the return
04:29 - value Val which is set to1 and in the
04:31 - success case where none of this actually
04:33 - happens and everything succeeds we set
04:35 - the return value equal to zero and after
04:37 - our code runs we close the socket file
04:39 - descriptor we free the file buff we
04:41 - close the FD and we return the success
04:44 - value and you can see the structure is
04:46 - that the lowest function the one that's
04:48 - further on in the code goes to the top
04:50 - level error Handler because it has to
04:51 - handle the most things that has to do it
04:54 - has to free the buffer it has to close
04:56 - the file the scriptor ETC while go-to in
04:57 - a lot of other cases make code a lot
04:59 - harder harder to read using goto to
05:01 - handle error cases allows you to write
05:04 - the same code one time in your error
05:06 - Handler and then use the go-tos to jump
05:08 - to what layer of error handling you're
05:10 - at now another cool thing about C is
05:12 - that the switch statement is actually
05:14 - way faster than the if statement and the
05:16 - reason behind it is really interesting
05:18 - you'll find out about that in this video
05:20 - go go click goodbye