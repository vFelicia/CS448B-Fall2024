00:00 - warning I'm about to blow your mind when
00:02 - making decisions with your data in C you
00:04 - basically have two options for the
00:06 - majority of the control flow in your
00:08 - program switch statements and if
00:10 - statements now a lot of new programmers
00:12 - struggle with which ones should they use
00:14 - and what have I told you switch
00:15 - statements are actually significantly
00:17 - faster than if statements in this video
00:20 - we're going to talk about how that works
00:21 - under the hood why switch is actually
00:24 - faster than if statements in most of the
00:26 - cases and if this all really matters
00:29 - let's dive into it let's say for example
00:30 - we're writing a program and we want to
00:32 - have a basic option menu where we
00:34 - iterate through a series of options that
00:36 - the user can give us and then we have to
00:38 - parse through which option did they give
00:40 - us and then take the appropriate action
00:42 - so for example maybe we have the stop
00:43 - command that says to stop the menu and
00:45 - quit the programs we use Q for the quit
00:47 - C for continue just means cycle the menu
00:49 - again n maybe we make a new object for
00:52 - our program maybe we're making a
00:53 - database program we do edit we do delete
00:55 - you know these are the various options
00:57 - we can add and obviously we're using an
00:58 - enum because using an enum allows us to
01:00 - use the word stop instead of the actual
01:03 - character the character can be thought
01:04 - of as like a magic value where if maybe
01:07 - we want to translate this program to
01:08 - another language where Q doesn't mean
01:10 - quit we can still use the keyword stop
01:13 - and instead make a separate enum for
01:15 - that language and change this maybe to
01:16 - like Z or something we have two primary
01:19 - options for the control flow of this
01:21 - program to run this menu and figure out
01:24 - what action do we take based on user
01:26 - input in our code we are going to need
01:28 - to create a buffer for the option that
01:30 - the user gives us and then we have to do
01:32 - some Logic on the first character of
01:34 - that buffer right and I'm creating four
01:35 - characters of buffer space just because
01:37 - maybe the user has a Unicode character
01:40 - set that has multiple values per
01:42 - character maybe we have multiple control
01:43 - characters like SL r/n and windows or
01:45 - just SL end for the enter key we're
01:47 - making a lot of room for effectively
01:48 - what ends up being one character and
01:50 - then we have to do some Logic on that
01:52 - one character and figure out what do we
01:54 - have to do and then take some
01:55 - appropriate action there are two ways we
01:57 - can do this we can do this with the if
01:59 - else tree as are seeing here or we can
02:02 - do it with the switch statement and I
02:03 - think a lot of new programmers really
02:05 - struggle with you know when do I do one
02:07 - or the other when is the most
02:09 - appropriate so here there's actually a
02:11 - significant difference in the way the
02:14 - program will process this code so when
02:16 - you do an if statement basically you
02:17 - have the if statement here and you have
02:19 - some condition you have to meet and
02:20 - we're saying here if the first value in
02:22 - the option buffer is equal to stop we do
02:24 - the stop action same with continue Etc
02:26 - when we say if if this condition gets
02:29 - met we will run the code here and the
02:32 - rest of these evaluations will not
02:34 - happen we will not check to see if
02:36 - option buff zero is equal to continue
02:37 - because we met this first one but if for
02:41 - example none of these are true so it
02:43 - does not equal stop it does not equal
02:45 - continue it does not equal new Etc it'll
02:48 - run all four of these evaluations here
02:51 - before we get down to the final
02:52 - evaluation to see if it equals delete
02:54 - we've run the number of instructions it
02:56 - takes to compare all these values before
02:58 - we get to delete and in certain cases
03:00 - maybe you're running on an embedded
03:01 - device that has really no room for
03:03 - errors in terms of Mis caches or maybe
03:05 - you just need the program to run quickly
03:07 - you are wasting a lot of Cycles by going
03:09 - through this entire list now how does
03:12 - this compare to the switch statement so
03:14 - let's say for example I have a switch
03:16 - statement here and I say that if the
03:18 - case new happens we print F you said new
03:22 - and then we move on with our day and
03:23 - then we do a break statement so let's
03:25 - kind of talk about the syntax of a
03:26 - switch statement so a switch statement
03:29 - here we give it the option buffer zero
03:32 - it has to take a literal as inputs at
03:34 - this time the option buffer value of
03:36 - zero is a literal value meaning it's
03:37 - just like a character it's a number and
03:39 - we're saying in the case that the value
03:41 - is new we say you said new in the case
03:44 - the value is stop continue or something
03:46 - else we have not defined in the
03:48 - statement to break and all break means
03:50 - is we go back and we leave the switch
03:52 - statement and then because we say while
03:54 - our option is not equal to stop this
03:56 - Loop will continue forever the reason
03:58 - why this is faster is actually a really
04:00 - really neat performance optimization
04:02 - that goes on under the hood in a switch
04:05 - statement versus an IFL statement before
04:07 - we keep going I want to get serious for
04:08 - a second I know a lot of you here maybe
04:10 - new programmers maybe you've written
04:12 - literally zero lines of code maybe
04:13 - you're in college trying to learn about
04:15 - computer science if you're looking for a
04:16 - free and easy way to learn about
04:18 - computer science data science and
04:20 - machine learning then I highly recommend
04:22 - brilliant.org brilliant.org is an easy
04:25 - way to learn about all these topics and
04:26 - their lessons are interactive brilliant
04:28 - is written in a way where you use the
04:30 - knowledge as you go through the system
04:32 - you learn as you go and you get to test
04:34 - yourself on that knowledge lessons and
04:37 - brilliant are bite-sized so if you only
04:38 - have time in between classes to learn
04:40 - something you can take a 10-minute class
04:42 - on brilliant and then move on with your
04:43 - day now to support the channel you can
04:45 - go and use my link right now www.
04:47 - brilliant.org larning for 30 days free
04:51 - and 20% off an annual subscription when
04:53 - you sign up thanks again brilliant for
04:55 - sponsoring this video now let's talk
04:57 - about what's going on under the hood
04:59 - when we execute the if version of this
05:01 - versus the switch statement version of
05:03 - this and why switch is actually a lot
05:05 - faster I've added a little bit of a code
05:07 - for the program to execute when option
05:10 - is evaluated if it equals stop we go to
05:12 - stop if it equals continue we go to
05:13 - continue Etc and all those functions all
05:14 - they do is they print the thing we said
05:16 - and obviously in our code we could
05:17 - actually handle that stuff later on in
05:19 - the program and then in Switcheroo I've
05:21 - done effectively the same thing but
05:22 - instead of using the if else tree I've
05:25 - converted it to a switch statement where
05:26 - we switch on the en of the case and then
05:29 - we handle the option accordingly now
05:30 - we're going to go look at the Iero the
05:33 - the if tree version and I want to show
05:35 - you under the hood what's actually
05:36 - happening in assembly now don't be
05:38 - afraid assembly isn't that bad it looks
05:41 - a little scary but I can actually
05:42 - explain to you what's going on here
05:43 - pretty quickly we run our call to scan F
05:46 - right here which actually gets the input
05:47 - from the user what we're doing is we're
05:49 - comparing
05:51 - eax what we're doing is we're moving and
05:53 - zero extending the bite pointer at this
05:56 - location into eax all that means we're
05:58 - grabbing the first BTE of our input and
06:01 - putting it into eax which is a 4 byte
06:04 - register in the CPU we are then going to
06:06 - compare Al to this value hex 71 and
06:10 - interesting what is hex
06:13 - 71 hex 71 is Q what is q q is our quit
06:17 - option so the code is going through and
06:19 - it's saying if these are not equal go to
06:22 - 1245 what's at 1245 well we move that
06:26 - bite again and we compare it to 63 what
06:28 - is 63
06:30 - it's C our continue option so here in
06:32 - the if AO code you are seeing that if
06:35 - else trig get worked out it's just a
06:37 - series of jump not equals and then
06:40 - Compares jump not equals and then
06:42 - Compares and again like I said before if
06:44 - you're at the bottom of that tree if
06:46 - you're the last option then effectively
06:49 - we have to run through all these
06:51 - instructions all these very very long
06:53 - branch instructions that may invoke a
06:56 - cache Miss on your computer to get to
06:58 - that option now you could code your
07:00 - program in a way so that the least
07:02 - likely option is at the bottom but a lot
07:04 - of instances of this don't play out like
07:06 - that maybe you need maybe all of these
07:08 - happen at the same occurrence but you're
07:10 - going to miss out on all this
07:11 - performance here now how does that
07:13 - differ from the switch AR root State
07:15 - again like I said there's a little bit
07:16 - of magic going on under the hood that
07:18 - makes a little bit faster so same thing
07:20 - as before we are going to run our call
07:22 - to scan F we are going to pull out our
07:25 - value into eax so this is the lower
07:26 - first bite of our input but then we do
07:29 - something pretty weird we sign extended
07:31 - don't worry about that but then we
07:32 - subtract 63 in HEX from our value and we
07:36 - compare it to hex e so now we have this
07:39 - really really tiny number just a number
07:40 - that's up to 15 and then if we are below
07:45 - that so this is Jump above if we're
07:47 - below hex e what it does is it loads
07:52 - some magic value into RDX you may just
07:55 - see a bunch of garbage a bunch of fs and
07:58 - 42s but I see something pretty magic the
08:02 - jump table begins at this location here
08:04 - hex
08:05 - 2054 and because these numbers are
08:07 - packed little Indian they're actually in
08:09 - Reverse so the number actually is FF FF
08:13 - f242 now that is a negative number we
08:16 - can tell that because the first bit is
08:18 - set and that number actually translates
08:20 - into this number here now warning I'm
08:24 - about to blow your mind this number here
08:27 - that we saw in our jump table hex FF FF
08:30 - f242 is a very large number that is
08:33 - actually a negative number to convert
08:36 - that big number to its negative
08:38 - representation we go hex ffffff F the
08:41 - max size 32 bits can represent and we
08:44 - convert that by subtracting it and then
08:46 - adding one to its value so this is
08:48 - actually a negative hex dbe now what's
08:52 - going on here is the program takes the
08:55 - address of that jump table so 205 before
09:00 - and then it adds that value we've pulled
09:03 - from the jump table and then it jumps to
09:06 - that we jump RX so we go to the value of
09:09 - the jump table and we go to the address
09:10 - of the jump table we subtract one from
09:13 - the other and then we jump to it we can
09:15 - do that math calculation here and we see
09:18 - that the address is hex
09:20 - 1296 because we take the address of the
09:23 - jump table and subtract the value in the
09:26 - jump table which we got from our
09:28 - previous math calcul here and guess what
09:31 - hex 1296 is hex
09:34 - 1296 is one of the entries in our jump
09:37 - table it is the value of the address of
09:41 - the option where we run handle
09:47 - continue how cool is that dude
09:50 - the computer decided no we're not going
09:52 - to do if statements we're going to do a
09:54 - switch statement by doing some magical
09:56 - value math we will use our input from
09:59 - the user as an index into a table of
10:02 - negative numbers we will subtract that
10:04 - number from the address of that table
10:07 - and boom just go to that location it's
10:09 - exactly where you want it to go there is
10:11 - no comparison going on effectively this
10:14 - is O of end time and this is constant
10:18 - time obviously there's a little bigger
10:19 - of a constant having to set all this up
10:21 - and you know most of the time if you
10:23 - only have a couple of statements here
10:25 - like maybe we have two or three options
10:27 - here versus our if statement if we have
10:29 - two or three options here the
10:31 - performance difference is going to be
10:32 - extremely negligible but if we're
10:34 - getting into a scenario where we have
10:36 - maybe 10 or 20 options that we have to
10:39 - run through you will see a significant
10:41 - performance increase in the switch
10:43 - statement because we're not going to
10:45 - have to process all of these dead cases
10:47 - in the event that these are likely to
10:49 - happen at the same probability how cool
10:51 - is that computers are amazing assembly
10:54 - isn't hard if you like this video go
10:56 - watch this other video and figure out
10:58 - why void star pointers even exist cuz
11:01 - honestly I'm not that