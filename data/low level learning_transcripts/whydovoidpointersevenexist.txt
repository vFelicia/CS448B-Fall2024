00:00 - one concept that I see messing up new
00:01 - programmers all the time is void
00:03 - pointers they've just begun to
00:05 - understand pointers and then this new
00:06 - type shows up that they really can't use
00:08 - correctly and it just messes everything
00:09 - up my name is l level learning I teach
00:11 - people how to write faster and safer
00:13 - code and today we're going to talk about
00:14 - what a void pointer is why they exist
00:17 - and how to deal with them let's Jump
00:19 - Right In first you have to talk about
00:20 - pointers in general what are Pointers so
00:23 - pointers are actually really simple
00:24 - despite how often they confuse new
00:26 - programmers a pointer is just a variable
00:28 - that contains the addess of another
00:31 - variable so for example if we have a
00:32 - variable int a that is an integer
00:34 - variable we'll say that its value is
00:36 - equal to four so now the value a
00:38 - contains four bytes that represent the
00:40 - number four so later on in the code we
00:42 - can say that int star PA that means that
00:46 - we have now a variable that points to an
00:48 - integer it is an integer pointer we can
00:51 - say that it contains the address of a so
00:54 - now we can say that PA points to a I get
00:57 - a lot of questions like why do we even
00:59 - use pointers and in the case that we use
01:01 - integers like this where I'm pointing a
01:03 - pointer to an integer that's actually a
01:05 - very good question we don't really need
01:07 - to use pointers here because the size of
01:09 - an integer is four bytes and that's
01:11 - actually within the word size of our
01:14 - architecture and because I'm on a 64bit
01:16 - machine that's 8 bytes so this 4 byte
01:19 - type can actually just get passed around
01:20 - by value I can make a function called
01:23 - int do a thing and it takes int X and I
01:26 - can return you know x + 2 right I don't
01:30 - need to do anything special with
01:32 - pointers because I can pass a by value I
01:34 - can literally pass in a equals do a
01:37 - thing on a and that will add you know
01:40 - two to a a will be six but what if we
01:43 - wanted to use values that were bigger
01:44 - what if we wanted to use variables that
01:46 - were bigger than the word size something
01:48 - that wasn't an integer so instead of
01:49 - using a 4 byte value like an integer
01:52 - what if I made a structure that is
01:53 - greater than the word size greater than
01:55 - 8 bytes and here I've made a structure
01:57 - called person that has 60 8 bytes of
02:00 - data it has a 4 byte integer ID and it
02:03 - has a 64 byte buffer for its name for
02:05 - example so if I wanted to do any
02:07 - operations on person P IID have to pass
02:10 - P by reference I could not pass it by
02:12 - value and the way we would handle that
02:14 - is we would make a function that's
02:15 - called you know do a thing only now it
02:18 - takes a person pointer we'll call it P
02:21 - person and we can say that and inside
02:24 - this function uh P person ID equals z or
02:29 - something and then maybe we U memet the
02:32 - address of P
02:34 - person name 64 bytes or 2 Z of 64 bytes
02:39 - right maybe this is like our our
02:40 - initialize a person structure because
02:42 - person is such a large structure we have
02:44 - to pass it by reference and the way that
02:46 - we do that to call the function is we
02:48 - say do a thing on P awesome so that's
02:53 - pretty straightforward and we could
02:54 - check the return value you know int R
02:55 - equals do a thing and obviously this
02:57 - would return um some status code and
02:59 - we'll say return zero for here so then
03:01 - we've talked about pointers for a minute
03:02 - now now what does a void pointer the
03:04 - whole point of this video what does a
03:06 - void pointer do for us so when you
03:09 - actually have a pointer and you's go
03:12 - back to our in a example we have in Star
03:14 - PA is the address of a if I wanted to
03:17 - dreference
03:19 - or look up the value at an address I
03:23 - would add a star character which is the
03:25 - D reference operator which tells the
03:27 - computer to go to that address and get
03:30 - the value that lives there well the
03:32 - question is how much data do we get we
03:35 - need to go get the value at an address
03:38 - but a lot of structures are bigger than
03:40 - just one bite like I said before the int
03:42 - value is actually Four bytes wide so by
03:46 - dereferencing the type I use the type
03:48 - information that's defined at compile
03:50 - time to tell the computer how far out to
03:53 - go and the reason this is so problematic
03:57 - with the void pointer is because the
03:59 - void type does not have a size because
04:02 - of that if I say that void pointer we'll
04:04 - call it VA is equal to the address of a
04:08 - I'm actually unable to dreference VA and
04:11 - we'll compile this real quick and I'll
04:12 - show you that so I get an error here
04:15 - invalid use of void expression the
04:17 - reason is the compiler is trying to make
04:19 - an assembly instruction to reach out to
04:22 - the address that's contained in our
04:24 - pointer variable and go get that many
04:26 - bytes but the problem is it's a void
04:28 - type it does not know how many bytes to
04:31 - get so then you're probably wondering
04:33 - why does this variable type even exist
04:35 - like why would we create a type that
04:37 - does not have type information it breaks
04:39 - all of our code we can't use it when we
04:41 - use functions that give us memory or
04:43 - free memory memory allocation functions
04:46 - like Malik for example all of these pass
04:49 - around a void Star as as a type right so
04:52 - Malik returns a void star calic realic
04:55 - realic uh realic array all use the void
04:58 - star type and also when you free you
05:00 - pass in a void star type the reason for
05:03 - all of this is because the C language is
05:05 - giving you the power to tell the
05:08 - compiler what type is stored there so
05:10 - let's kind of go through that in in a
05:12 - practical example so let's say I wanted
05:14 - to make room on the Heap for my person
05:17 - structure because right now my person
05:18 - structure is all being contained on the
05:20 - stack let's delete all this and I say
05:22 - that I have I have a person pointer
05:25 - right so it's a it's a person pointer
05:27 - we'll call it P person and I want to
05:30 - maloc it from the Heap and how big do I
05:33 - Malik that's the input to Malik right is
05:34 - the size that I'm getting I'm going to
05:36 - Malik a size of a
05:40 - person well by default the equal sign
05:44 - will throw a warning and if you have W
05:46 - error enabled this will actually be an
05:47 - error because the Malik type is
05:49 - returning a void star and we are
05:52 - implicitly casting it to a p person type
05:55 - so what we actually have to do is tell
05:57 - the compiler hey I'm aware this returns
06:00 - a void star type but I need to convert
06:02 - it to a p person type all we're going to
06:04 - say is a person star and by putting it
06:06 - in parenthesis like this with just a
06:08 - type or do what's called a type cast so
06:10 - the type that comes out of this is being
06:12 - converted at compile time to a person
06:15 - star and put into our variable and then
06:18 - obviously we have to check our value
06:19 - right if we say if null double equals P
06:21 - person and we say you know uh puts the
06:25 - Heap failed uh Runway or whatever
06:30 - uh and then we return negative 1 because
06:31 - the program failed we can't use our our
06:33 - code here and then if we want to later
06:34 - on in the code free it we then free P
06:37 - person and this does take a void Star as
06:40 - input but the implicit cast here is
06:41 - actually okay and don't forget when
06:43 - you're using the Heap you also have to
06:44 - include standard lib because that's the
06:46 - library um that contains those functions
06:49 - and there we go so now we've compiled
06:51 - the pointers program with no errors so
06:53 - when is it a good idea to use a void
06:55 - star well a void star is meant to
06:57 - represent what is referred to as
06:58 - typelist memory right so if you are
07:01 - maling from the Heap or you have a
07:03 - variable that is undefined in its type
07:05 - it just represents a raw blob of memory
07:07 - that's where the void pointer makes the
07:09 - most sense and then the minute that you
07:10 - know the type of that variable you
07:12 - should then be casting it to that type
07:14 - or just use that type in general like
07:16 - for example because this function is a
07:18 - you know let's say that this is the
07:21 - initialized person function right
07:23 - there's never a we should never be
07:25 - passing a void star pointer and then
07:28 - saying uh person P person equals person
07:32 - star of pointer right like if we know
07:35 - the type of the memory ahead of time a
07:37 - person star of pointer if we know the
07:40 - type of the memory ahead of time we
07:41 - should never be using void star we
07:43 - should always include type information
07:44 - in our code as often as possible but in
07:47 - cases like this where we are maling and
07:49 - freeing raw memory that is not known by
07:51 - the allocator at the time to can include
07:54 - the type information then we just use
07:56 - the void star the way it's intended and
07:58 - then cast it when we get that memory now
08:00 - another question people typically have
08:02 - is why do header files exist like why do
08:04 - I even have to include standard i.h
08:07 - standard li. and if you're curious about
08:08 - that like I was go watch th this this
08:12 - video this video this video and uh go
08:15 - find out see you guys there