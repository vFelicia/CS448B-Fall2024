00:00 - if you've coded in C for a minute you've
00:01 - probably used all the features of the
00:03 - language you've probably made some
00:05 - structures written some functions you
00:06 - maybe even have used the C pre-processor
00:09 - but one feature of the C language that
00:11 - gets a lot less attention is kind of a
00:13 - weird one today we're talking about
00:15 - unions a lesser known feature of the C
00:17 - language with some interesting
00:19 - properties we'll talk about what the
00:20 - union type does how it's used in memory
00:23 - and three examples of how to use them
00:26 - let's Dive Right In Here I have some C
00:28 - code written out and you'll notice up
00:29 - top a familiar C feature the structure a
00:32 - structure is just a way in C to
00:34 - logically organize variables in a way
00:36 - that makes sense in your program so my
00:38 - structure may need to have an INT and a
00:41 - float and then some character array a
00:43 - string of 16 bytes of characters now the
00:47 - struct in memory what this will do is
00:49 - this will actually allocate on the stack
00:50 - or the Heap or wherever we use the
00:52 - structure the sum of the size of all
00:54 - these elements so an INT being 4 bytes a
00:57 - float being 4 bytes and the string being
00:59 - 16 Byes this will allocate 24 bytes of
01:02 - memory now this makes sense because we
01:04 - want to have access to all of the
01:05 - different elements of the structure so
01:07 - we're going to have room for every
01:09 - single element here is the new thing
01:11 - we're talking about the union and the
01:13 - union is a little more interesting when
01:15 - you have a union with different types
01:17 - inside of it instead of allocating room
01:19 - for every element that's inside the
01:22 - union the union will only allocate
01:24 - enough memory for the largest element
01:27 - all of the elements inside of the Union
01:29 - lay on top of each other and share the
01:32 - same memory space and this is going to
01:34 - be reflected by printing the size of all
01:36 - of our structures here in our code we
01:38 - print the size of our Union my onion
01:40 - onion and my structure stred and by
01:42 - printing these out we can see that the
01:44 - size of our Union is 16 bytes and the
01:47 - size of our structure is the previously
01:48 - reported 24 bytes now what makes the
01:51 - union so interesting is that all of the
01:52 - elements in the union share the same
01:55 - memory space so here for example I'm
01:57 - stir copying the string hello world into
01:59 - to the buffer that's allocated in the
02:01 - union for the 16 by string I'm then able
02:04 - to print out the float of the Union
02:07 - which means that it'll try to represent
02:09 - the string hello world as a float type
02:12 - and we can see the float representation
02:14 - of that string which is this crazy long
02:17 - number here okay so you're probably
02:19 - wondering what is the practical
02:21 - application of the Union right like why
02:22 - even have this type in C what does this
02:25 - do for us well the first example is it
02:27 - actually makes data conversions and
02:29 - access to members within a structure
02:31 - that have different data types very easy
02:33 - so for example let's say here that I
02:34 - have the ipv4 address structure which
02:37 - can be represented as a union now if you
02:39 - didn't know an ipv4 address is just four
02:42 - bytes which can be accessed either as
02:44 - four individual bytes or as the long 4
02:48 - by version the word right so if we
02:50 - wanted to set the address for example to
02:53 - Local Host 127.0.0.1 we could do this in
02:57 - two ways we could do the really painful
02:59 - thing where we have 1 27 and then we
03:00 - shift it over 24 bytes and then we make
03:02 - the value equal to this or the current
03:05 - value right and that that gets very
03:07 - mathematically complicated and very kind
03:08 - of hard to represent in code in a way
03:10 - that's easy to read or we could use the
03:12 - magic of unions and essentially just
03:14 - overlay two different data types so by
03:16 - doing this we can take the bytes
03:19 - 12701 put that into the address and then
03:21 - when I print this as the actual long
03:24 - form of the address in HEX we get the
03:26 - normal representation of Local Host in
03:28 - HEX the second example goes along that
03:30 - same line of thinking where we overlay
03:32 - two different structures that have the
03:34 - same value but are represented in two
03:36 - different ways in particular this has a
03:38 - lot of power in the world of embedded
03:40 - programming if you're not aware of how
03:42 - embedded programming Works essentially
03:44 - registers on a CPU live at an address
03:47 - and when you set certain values in those
03:49 - registers things on the chip physically
03:51 - change so here for example we have a
03:54 - hardware register that has an anonymous
03:56 - structure inside of it by putting an
03:58 - anonymous structure in inside of the
04:00 - Union Ru will be allocated for all of
04:02 - the values inside of the structure on
04:04 - top of this integer value so here we can
04:08 - set the register to you know this value
04:10 - here but then we can actually go in and
04:12 - pull out the individual parts of that
04:14 - register that control different parts of
04:16 - the CPU so here for example we have some
04:18 - madeup gpio register that has different
04:21 - properties like setting the control of
04:23 - that register the direction of the data
04:25 - if it's an input or an output the par
04:27 - maybe it's even par or odd parity or if
04:29 - it does or does not have start bits by
04:31 - setting the register to some value we
04:33 - then can use this to go in and
04:35 - individually access and set and change
04:38 - the parts of the register that control
04:39 - specific parts of that peripheral before
04:41 - we keep going I want to tell you guys
04:43 - about low-level Academy a place where
04:44 - I'm running courses to teach you more
04:46 - about the C programming language and
04:48 - others you can check it out at low
04:50 - level. Academy and get 20% off a
04:52 - lifetime subscription until the end of
04:54 - the month we'll see you there maybe you
04:56 - don't care about data conversion maybe
04:57 - you're not an embedded programmer and
04:59 - that's completely okay the last one that
05:01 - unions can be used for which I think is
05:03 - the most interesting and probably the
05:05 - most practical example of a union is
05:07 - this idea of polymorphism right so in C
05:11 - right we don't have classes there are no
05:13 - class types there really aren't any
05:14 - additional types other than the basics
05:16 - of like int care Etc and when we make up
05:19 - types in C we're essentially just
05:20 - concatenating all the Primitive types
05:22 - like int care float and then naming them
05:24 - something else like person address
05:26 - Whatever by using a union we can do a a
05:29 - little bit of polymorphism by having
05:31 - variables that have three different
05:33 - types in a structure at the same time
05:36 - and then using an outer type tracker to
05:38 - track which type is being used at any
05:41 - given time we then can write functions
05:43 - that will behave differently based on
05:46 - the type of the structure at that time
05:48 - so for example here I have defined a
05:50 - Json type right maybe we're making a
05:52 - Json parser and the enum says that there
05:55 - can be three types inside of our
05:56 - structure there could be a string a bite
05:58 - or an INT we have that Json type inside
06:01 - of our structure that is used to track
06:03 - what version of the Union is being used
06:06 - at any given time and then inside of
06:07 - that Union we have those three types we
06:09 - have it could be a string it could be an
06:11 - individual bite or it could be a number
06:14 - and that whole thing the structure with
06:16 - the union inside of it is called the
06:18 - Json T and just so you know a little
06:20 - quick check on learning right the size
06:22 - of this structure will be the size of
06:24 - the type which is one single bite plus
06:28 - the maximum size of the Union which is
06:30 - going to be the size of the string here
06:32 - that's the biggest type which will be 64
06:33 - bytes so this structure will be around
06:35 - 68 bytes not accounting for padding or
06:38 - optimization or anything like that now
06:39 - when we want to use this Json type what
06:41 - we're going to do is we're going to
06:42 - check the type tracked inside of the
06:44 - structure and then handle it accordingly
06:46 - so if it's being tracked as a Json
06:48 - string we're going to print out the
06:49 - string using percent s if it's a Json
06:52 - bite we're going to print that bite
06:53 - alone using percent C if it's ajon on
06:55 - int we're going to print it using
06:57 - percent D Now by doing this we can make
06:59 - this type a basic structure in C
07:02 - polymorphic we could say this type is a
07:04 - Json int and set the number and by
07:06 - printing it using my special print Json
07:08 - function it'll treat it almost like a
07:11 - polymorphic class in C++ but using a lot
07:14 - less overhead than the class internals
07:16 - do in C++ let's try it out right now
07:18 - there we go 42 there are some dangers in
07:20 - this obviously because we're in C the
07:23 - types are not tightly coupled they're
07:24 - not enforced by the compiler so if I
07:27 - accidentally in programming said this is
07:28 - a j on string and not ajon int and went
07:31 - to go compile this and print it you know
07:33 - it'll print the ask your representation
07:36 - of 42 and not the actual value 42 that's
07:39 - on you as a programmer to figure out and
07:41 - to do correctly so what do you think
07:42 - about unions do you think they're useful
07:44 - do you think they're not useful go ahead
07:45 - and do me a favor leave a like on this
07:47 - video and leave a comment about your
07:49 - thoughts on unions and if you've used
07:51 - them before in the past unions while
07:53 - powerful are controversial not everyone
07:55 - agrees if they should or should not be
07:57 - used in code bases kind of like how
07:59 - people feel about the go-to statement in
08:01 - C as well I made a video about that here
08:03 - talking about if go-to statements are
08:05 - illegal should they be go find
08:07 - out
08:09 - go okay goodbye