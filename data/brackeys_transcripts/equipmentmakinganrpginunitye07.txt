00:00 - in this video we'll be adding equipment
00:01 - to our game we'll be making it easy to
00:03 - add new equipment inside of the editor
00:05 - as well as adding an equipment manager
00:06 - that will allow us to equip and
00:08 - unequipped these items from the
00:10 - inventory and thanks to a hands-off turn
00:11 - for the support on patron if you want to
00:13 - support the videos as well and make sure
00:15 - this channel keeps going you can do so
00:16 - at patreon.com slash practice and that
00:19 - let's get started so let's begin by
00:20 - going to our scripts folder and under
00:22 - items that's right click go create
00:24 - c-sharp script and let's create a
00:26 - scriptable object called equipment it's
00:29 - been double click it to open it up in
00:30 - Visual Studio and in the last couple of
00:32 - videos we created an item and inventory
00:34 - system so now instead of deriving from
00:36 - scriptable object we actually have a
00:38 - base class called item and so now if we
00:40 - just leave this class completely empty
00:42 - and go to the top here and make sure
00:44 - that we can create the object in the
00:46 - editor by going create asset menu we'll
00:48 - choose a default file name of say new
00:51 - equipment and a menu name of inventory /
00:56 - equipment so now if we go into unity and
00:59 - go into our items folder here we can
01:01 - right click go create and we now under
01:03 - inventory create a new equipment I'm
01:06 - just going to call this one the helmet
01:07 - of fire and I'm going to delete the two
01:10 - previous items we made we also have a
01:12 - bunch of test items lying around in our
01:14 - scene I'm just going to delete the third
01:16 - one and let's rename the first one here
01:18 - to helmet of fire let's rename the
01:21 - second one to helmet of protection we
01:23 - then duplicate our helmet of fire here
01:25 - and rename this one to a helmet of
01:27 - protection we also put the name here
01:30 - into the name slot and the same thing
01:32 - for helmet of protection and we can
01:35 - choose an icon for each one I'm going to
01:37 - give this one a placeholder sphere and
01:39 - this one a placeholder cube none of
01:42 - these are going to be default items we
01:44 - then take our helmet of fire and drag in
01:46 - our helmet of fire object and do the
01:49 - same thing for the other item so now we
01:52 - have created two pieces of equipment but
01:54 - so far they only have the default item
01:57 - properties we want to be able to define
01:59 - stuff like an equipment slot armor and
02:01 - damage modifiers and of course a graphic
02:04 - for our equipment so let's go into
02:06 - visual studio and first off we want to
02:08 - have a public int this is going to be
02:11 - our armor modifiers
02:13 - we'll
02:13 - also create one for our damage modifier
02:16 - and we'll be using these when we create
02:17 - our players stats but we also want to
02:19 - define an equipment slot you could of
02:21 - course go up here and define this as an
02:23 - integer public int equipped slot and
02:26 - then simply remember what number
02:28 - corresponds to what slot but this is
02:30 - very prone to error and doesn't feel
02:32 - very intuitive instead let's use what's
02:34 - called an enum and we'll actually write
02:36 - this outside of our class we do that
02:39 - because we don't want it to be
02:40 - encapsulated by our equipment class now
02:43 - we want to be able to use this in
02:44 - multiple places so we'll create a public
02:46 - enum equipment slot and then we can go
02:49 - ahead and define the different slides
02:51 - I'll just write head chest legs weapon
02:55 - you can put a shield in there and then
02:58 - some feet so now we've defined these
02:59 - different slots and instead of writing
03:01 - int we can now write equipment slot if
03:04 - we save that and go into unity you can
03:07 - see that we now get a drop-down menu
03:08 - where we can choose between these
03:10 - different options and of course our
03:11 - armor and damage modifier so for our
03:13 - helmet of protection I'm going to give
03:14 - this a big armor modifier say 3a no
03:17 - damage modifier but for a hundred of
03:19 - fire I'm going to give it an armor
03:21 - modifier of say two and a damage
03:23 - modifier of 1 now when we play this and
03:25 - pick up our items we can see that it's
03:28 - definitely working and they will show up
03:30 - in our inventory but currently nothing
03:31 - happens when we click on them it says
03:33 - using and then the item name but we're
03:36 - not really equipping them to do that we
03:38 - need to go into our equipment and in
03:40 - here we need to override our use method
03:42 - so we'll go public
03:43 - override void use and first off we'll
03:46 - call the base class as you can see this
03:48 - only prints out the name of the object
03:50 - that we're using but we might add
03:51 - something more important later we then
03:53 - want to equip the item and finally
03:56 - remove it from the inventory now in
04:00 - order to equip the item we need to
04:01 - define some kind of equipment manager to
04:04 - do that let's go to unity select the
04:06 - game manager hit add component and let's
04:08 - create an equipment manager let's say
04:11 - create an ad and open it up and the
04:12 - first thing we want here is a simple
04:14 - singleton pattern the exact same way we
04:16 - did it for the inventory script again if
04:19 - you want to learn more about Singleton's
04:20 - I will have a link in the description
04:21 - let's create a public static equipment
04:24 - manager called instance
04:26 - and India weight method will simply said
04:29 - instance equal to this let's wrap this
04:31 - in a region called singleton so we can
04:35 - easily collapse it now the most
04:37 - essential thing in this equipment
04:39 - manager is an array of all the items
04:41 - that we currently have equipped so let's
04:43 - create an equipment array called current
04:45 - equipment then when we start the game so
04:48 - inside of our start method we need to
04:50 - initialize this array and we need to
04:52 - give it the same length so as many slots
04:54 - as we have in our equipment slot innum
04:57 - now here we can use a pretty handy
04:58 - little trick in order to get the amount
05:00 - of elements in an enum we can use system
05:03 - enum here we have a function called get
05:06 - names and we give it the type which is
05:09 - our equipment slot and now this is
05:12 - actually a string array of all of the
05:14 - elements inside of our equipment slot so
05:16 - we can simply use the length of this in
05:19 - order to get the amount of elements and
05:20 - then we can store this in an integer
05:22 - called say number of slots and we can
05:25 - use this number to initialize our array
05:27 - so we'll set current equipment equal to
05:29 - a new equipment array with the length of
05:32 - number of slots cool next up we want to
05:35 - define a few methods first one is for
05:38 - equipping items so we'll create a public
05:40 - void called equip this is going to take
05:43 - in a piece of equipment let's call this
05:45 - the new item and of course we want to
05:47 - insert this item into our array but the
05:50 - placement matters because we want the
05:52 - different elements of our array to
05:53 - correspond to different slots luckily
05:56 - when we create an enum every element is
05:58 - associated with an index we can actually
06:01 - see this if we hover over one of them
06:03 - when see equipment slot head is 0 chest
06:06 - is one lexis two and so on so what we
06:09 - can actually do is get the index of the
06:11 - slot our new item is supposed to be
06:13 - inserted into so we can create some kind
06:15 - of integer called slot index and we can
06:17 - set this equal to new item got equipped
06:21 - slide and then we simply cast this into
06:23 - an integer so now if the equip start of
06:25 - our new item is say a chest we can see
06:28 - here that the corresponding index is 1
06:30 - and so our slot index will be 1 and this
06:33 - will be the case for any chest piece
06:35 - equipment and so we can simply set
06:36 - current equipment and we get the element
06:38 - corresponding to our slot
06:40 - index and set it equal to our new item
06:42 - so if we now go into our equipment
06:44 - object and where we want to equip the
06:47 - item we simply call equipment manager
06:49 - dot instance dot equip and we feed it
06:53 - this item well then we should see that
06:55 - if we go into unity and here we can
06:57 - switch into debug mode in the inspector
06:59 - so that we can actually see the current
07:01 - equipment array we can then hit play we
07:03 - can see that when the game start it
07:05 - initializes with the size of six
07:07 - elements because we have six different
07:08 - slots in our enum when we then pick up a
07:11 - couple of items and try and equip one of
07:13 - them we can see the item gets inserted
07:15 - into the proper slot and if I try and
07:17 - equip the helmet of protection it gets
07:19 - swapped out this is also the case if we
07:22 - go ahead and create say a third item
07:23 - here just going to move this over and
07:25 - we'll call this one the sword of Destiny
07:27 - let's just switch out of debug mode here
07:30 - so let's right-click or create inventory
07:32 - equipment sword of Destiny and we'll
07:36 - give it the name of here as well we can
07:38 - set the icon just to one of the
07:39 - placeholders change the equipment slot
07:41 - to a weapon and the damage modifier to
07:44 - save 3 then we can select our sword of
07:46 - Destiny object and drag in our
07:48 - scriptable object and if we now hit play
07:50 - and pick up this sword of Destiny select
07:53 - our game manager and go back into debug
07:56 - view we can then click on it and you now
07:58 - see that our sword maps to a different
08:00 - part of the array awesome there's of
08:03 - course one problem and that is that
08:04 - items stay in our inventory after
08:06 - equipping them and so we can actually
08:08 - crypt them infinite amounts of times
08:10 - changing this is very simple inside of
08:12 - our equipment object we say here that we
08:14 - want to remove it from the inventory
08:16 - well let's go ahead and create a method
08:18 - for this let's actually put it inside of
08:20 - item since we have multiple items that
08:22 - might want to do this that then create a
08:24 - public void remove from inventory and
08:28 - this is simply going to get the
08:30 - inventory instance and call remove where
08:34 - we insert the item then inside of our
08:36 - equipment we can simply call remove from
08:39 - inventory so now when we play and pick
08:42 - up a few items we can see that when
08:44 - equipping them they get removed we can
08:46 - also see however that if we try now and
08:48 - equip the helmet of protection when we
08:51 - already have the helmet of fire equipped
08:53 - that it is going to swap out but the
08:55 - helmet of fire doesn't reappear in our
08:58 - inventory so we need to put in some code
09:00 - for swapping items we'll do that in the
09:02 - equipment manager here we can put in an
09:04 - if statement where we check if that's
09:06 - already an item in this slide so if
09:09 - current equipment and we give it the
09:11 - slot index is not equal to null but
09:14 - something is already there well then we
09:16 - want to add our item back into the
09:18 - inventory to do that we need a reference
09:20 - to the inventory we could just access
09:22 - the instance here but it's probably
09:23 - better to cache it so we'll go to the
09:25 - top here create an inventory variable
09:28 - called inventory instead of this start
09:30 - method will set inventory equal to
09:33 - inventory instance and now down here we
09:36 - can simply write inventory dot add and
09:38 - feed it the old item of course we also
09:41 - have to get the old item here so let's
09:43 - just go to the top here actually create
09:45 - a variable of type equipment and it's
09:47 - called this old item so by default this
09:49 - will be null and then if we actually
09:51 - discover that there is an old item will
09:54 - set old item equal to the item that sits
09:57 - in the slide so current equipment at
09:59 - this slot index place and then we'll add
10:02 - that back into the inventory so now we
10:05 - should see that if we save this go to
10:07 - unity and hit play we'll pick up a bunch
10:10 - of items here hit I and equip them you
10:14 - can see that every time we try and equip
10:16 - a helmet it simply swaps out with the
10:18 - previous one awesome but of course
10:21 - there's currently no way to unequip
10:23 - items and we haven't really integrated
10:25 - this as part of the UI but I thought our
10:27 - equipment manager should at least be
10:28 - able to do it so let's add the
10:30 - functionality and then we can make it so
10:31 - that when we press a hotkey we unequip
10:34 - all of items to do that let's create a
10:36 - public void called unequip and you will
10:40 - check in an integer with the slot index
10:43 - we'll check if there is any item at this
10:45 - slide index so if current equipment or
10:48 - input slot index is not equal to null
10:51 - well then we'll get the old items so
10:54 - equipment old item equals current
10:57 - equipment to slot index we'll add back
11:00 - the old items so inventory add old items
11:03 - will then set current equipment to slot
11:06 - index
11:07 - equal to null because we are unequipping
11:10 - everything so there will be nothing
11:11 - there now and that should be it we're
11:13 - going to create another public void
11:15 - called say unequip all and here we'll
11:20 - simply loop through all of the elements
11:23 - in our current equipment array and for
11:25 - each one we'll call unequip then we can
11:28 - check if we press a certain hotkey in
11:31 - order to do that or you could make some
11:32 - UI to trigger it
11:34 - we'll just create an update method where
11:36 - each frame we check if we press and the
11:40 - key that we're looking for here is key
11:42 - code view for unequip and if we do well
11:45 - then we can go ahead and unequip all so
11:47 - now we should see that if we're going to
11:49 - unity and hit play and we try to equip
11:52 - some items we can then hit you and all
11:55 - the items disappear from our equipment
11:57 - manager and reappear in our inventory
11:59 - awesome so that's pretty much our entire
12:01 - equipment manager the last thing that I
12:04 - want to do is add in a callback method
12:06 - that will trigger whenever our current
12:08 - equipment changes this is really good
12:09 - job because you want to update different
12:11 - things when we equip or unequip items we
12:13 - want to display the changes on our
12:15 - character and we also want to update our
12:17 - stats accordingly let's go to the top of
12:19 - our equipment manager and let's create a
12:21 - public delegate void we're going to call
12:24 - it on equipment changed and we're going
12:27 - to take in a piece of equipment which is
12:29 - our new item and another piece of
12:31 - equipment which is our old item we then
12:34 - create a public on equipment changed
12:36 - variable called on equipment change with
12:39 - a non-capital oh and now other scripts
12:41 - can subscribe to this callback method
12:43 - and we'll make sure to invoke it when we
12:45 - equip an item so we'll go if on
12:47 - equipment changed is not equal to null
12:50 - so if we have any methods to notify well
12:52 - then we want to invoke those methods so
12:54 - on equipment change dot invoke and we'll
12:57 - input our new item and then our old item
13:00 - and we want to do the exact same thing
13:02 - when we unequip an item so there and
13:05 - here of course we don't have a new item
13:07 - our new item is simply no let's now save
13:11 - that and we are going to be using this
13:13 - functionality yet but it's going to make
13:14 - it so much easier later on that's pretty
13:17 - much it for this video if you enjoyed it
13:18 - make sure to subscribe to them it's a
13:20 - future one
13:21 - is going to be doing the next to do in
13:22 - this series well show how you can
13:24 - display armor and weapons on your
13:26 - character so make sure to subscribe to
13:27 - this channel if you aren't already
13:28 - button that thanks for watching and I
13:30 - will see you in the next video thanks of
13:32 - the awesome patreon supporters who
13:33 - donated in July and especially thanks to
13:35 - hands of tuned Derek in skirt face
13:37 - Tamara Phi yes for Mickelson Stone gamer
13:39 - summer's volley
13:40 - Sybok Marine corporal Jason Lotito Erin
13:43 - Robert Burns and kudamon if you want to
13:45 - become a picture in yourself you can do
13:46 - so a pigeon come / cracky you guys Rock