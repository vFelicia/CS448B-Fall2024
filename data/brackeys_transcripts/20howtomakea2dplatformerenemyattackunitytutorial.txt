00:00 - thanks for tuning in at
00:02 - braies hello everyone welcome to video
00:05 - number 20 in the how to make a 2d
00:07 - platformer course in today's video we're
00:10 - going to be touching on a lot of
00:11 - different subjects but overall we are
00:13 - going to finally make our enemy uh
00:16 - damage our player and when he hits him
00:19 - we're also going to make the enemy
00:21 - explode so that means that we will need
00:23 - to also uh make the battle status
00:26 - indicator actually work with our player
00:29 - um to display his current health and his
00:31 - max health and uh yeah so we'll set that
00:35 - up cool but before we get started I
00:37 - quickly want to mention that I've int uh
00:40 - just uploaded a huge update to UPA
00:43 - toolkit if you don't know what it is
00:46 - it's a pixel art editor of made so you
00:48 - can create pixel art inside of the unity
00:50 - engine and uh uh a new version has just
00:54 - been introduced uh which uh comes with
00:57 - blend mode modes a bunch of uh layer
01:00 - controls you can see here you can now
01:02 - log layers there's an opacity slider you
01:06 - can uh duplicated merge layers and all
01:10 - that uh kind of cool stuff so uh if you
01:13 - want to quickly make some uh Sprites for
01:14 - your game I suggest you download that
01:18 - cool so uh without further Ado let's
01:21 - head into unity and you can see that the
01:23 - scenus is exactly as we left it off uh
01:26 - the last time and uh the first thing
01:30 - we'll be doing here is uh jumping into
01:32 - the player script so uh let's go ahead
01:35 - on and go under uh scripts let's find
01:38 - the player script here and this uh
01:40 - script of course sits on the player
01:43 - himself and uh let's just zoom in a bit
01:46 - on this and uh I basically just want to
01:49 - expand a bit on this player stats uh
01:51 - class so the first uh thing we're going
01:54 - to be doing here is uh much like when we
01:57 - uh introduced the status indicator to
02:00 - enemy will be changing this idea of a
02:03 - health to uh instead include a Max
02:06 - health and a current health so we'll say
02:09 - that Max Health equals uh 100 and then
02:13 - we'll make a private integer and if this
02:16 - is new to you you can just go back and
02:18 - watch the latest video or the last video
02:21 - and uh then we'll have a private end a
02:23 - storing our current health and we'll
02:26 - also have an accessor for that a getter
02:29 - and a set which is a public in uh
02:32 - current health without the underscore
02:35 - and um that's not going to have a
02:37 - default value instead we're going to if
02:41 - I can format this
02:43 - correctly give it a getter and whenever
02:47 - we get this value we simply want to
02:49 - return the current health private
02:52 - variable and a
02:54 - Setter whenever we set this we simply
02:57 - want to say that uh current Health
03:00 - should equal math. clamp and the value
03:04 - that we want to clamp is uh the uh value
03:07 - that is passed or that um is passed in
03:11 - uh that it's set equal to uh and uh then
03:15 - the minimum which is zero and the
03:17 - maximum which is going to be our maximum
03:19 - health so this this will just ensure
03:21 - that whenever we set our health equal to
03:23 - something that it doesn't go below zero
03:26 - or above our maximum health amount cool
03:29 - and then we want to quickly make a uh
03:32 - public
03:33 - method uh called init and that will
03:36 - simply uh set our current
03:40 - health um current health equal to our
03:43 - Max
03:45 - Health it's that simple and you can
03:48 - either set the private variable here or
03:50 - the uh non-private uh the accessor I
03:54 - suggest using the access accessor so
03:56 - that if we've messed something up with
03:58 - the max Health uh it'll let us know cool
04:02 - uh and you can see if we just open up
04:04 - our enemy script here that this is an
04:06 - pretty much an exact duplicate so far of
04:08 - the enemy stats
04:11 - class so uh now that that's done I
04:14 - simply want to rename this player stats
04:16 - to Stats because it sits under the
04:18 - player object and I think that uh the
04:20 - naming is clear enough already and
04:22 - whoops that's from when I was testing
04:24 - some stuff out Simply ignore that and
04:26 - then down here in our damage player we
04:28 - want to change uh player stats. Health
04:31 - to stats. uh current
04:34 - health and we want to do the same here
04:38 - stats. current
04:40 - health and uh yeah now that should
04:44 - actually be working uh next up we want
04:47 - to integrate our uh status indicator so
04:50 - remember we created this status
04:52 - indicator script uh that basically
04:54 - allows us to uh set the health uh on
04:57 - some uh gooey objects and it's pretty
05:00 - easy to expand upon so basically what
05:03 - we'll do here is we'll create this could
05:05 - be a public because we want to change it
05:08 - inside of the unity editor but actually
05:10 - I want to keep this private and then
05:12 - just make it accessible by marking it as
05:15 - a serialized field so uh this needs to
05:19 - be a private status
05:21 - indicator and we'll just call it status
05:24 - indicator with a small s and uh inside
05:28 - of our start function
05:30 - we make a start method
05:32 - here we'll just check if status
05:35 - indicator whoops status indicator is
05:39 - equal to null and if it is we'll just
05:43 - throw an error here uh on our enemy we
05:46 - did the exact same thing except we made
05:49 - the status indicator optional and I
05:52 - think uh we force it uh to be on the
05:55 - player so if it's not we'll just print
05:57 - out an error message that says um um no
06:01 - status indicator referenced on
06:07 - player cool and uh inside of the stat
06:10 - method we want to do one more thing and
06:12 - that is init our stats so we'll just
06:14 - call the init method there cool then
06:18 - inside of our damage player um oh
06:21 - actually uh we have to do one more thing
06:23 - if it's not equal to null then we want
06:26 - to
06:27 - set uh our
06:29 -  so we'll call the Set uh status
06:33 - indicator. set health and that takes in
06:35 - our current health amount so that's
06:38 - stats. current
06:40 - health and our maximum health so that's
06:43 - stats. Max
06:46 - Health awesome and we simply want to
06:50 - copy this and do the same every time we
06:53 - uh have damaged the
06:55 - player cool so that should actually
06:58 - integrate any St is indicator uh into
07:01 - our player object and uh now all we have
07:05 - to do is uh go under our player here and
07:10 - actually make the gooey for that and for
07:12 - now I think we should simply copy the
07:14 - status indicator from our enemy into our
07:17 - player object and reset the
07:21 - transform whoops wow that made it huge I
07:24 - simply wanted to uh reset the position
07:27 - there we go and then uh move it up a bit
07:30 - on the
07:31 - Y something like that so it just floats
07:34 - above the players something like
07:37 - 0.7 cool and now we can simply select
07:40 - the player and drag in our status
07:42 - indicator uh and that should update
07:45 - everything so now when I uh we we play
07:48 - the game we should see our status
07:51 - indicator updating to our current health
07:54 - and our Max health and we can test this
07:56 - by going onto our player stats and
07:58 - changing our Max health to something
08:00 - like 120 and just see if that
08:04 - updates and indeed it says 120 if you
08:08 - don't believe me I'll just uh full
08:10 - screen
08:12 - this maximize on
08:14 - play there you go it says 120 there but
08:18 - currently our enemy isn't damaging us um
08:21 - and we simply are able able to kill him
08:25 - so let's make that a bit harder also I
08:26 - want to go into the enemy here and Sim
08:29 - the I disable that debug.log under the
08:32 - weapon I mean uh I find that kind of
08:34 - annoying cool so um how do we change
08:38 - this well basically we have this uh
08:40 - Central enemy uh component and uh all I
08:44 - want to do here is uh now we are going
08:46 - to make our enemy damage our player on
08:49 - impact so let's double click on the
08:51 - enemy and let's go under do the um and
08:54 - let's just check out the script and uh
08:57 - basically I want to create a method void
09:02 - uh called on Collis enter
09:07 - 2D and I know that we've used the on
09:10 - trigger enter before I don't know if
09:13 - we've used the on Collis enter uh
09:15 - basically Unity will make sure that if
09:18 - you spell this exactly as I've done it
09:20 - uh that every time we collide with
09:22 - another object this method will be
09:25 - called so um basically we we can collect
09:30 - information about what we've collided
09:33 - with by saying that we it should pass in
09:36 - an a parameter call Collis
09:40 - 2D uh and we can uh simply name this
09:43 - collider info or call
09:45 - info and uh what we can then do is we
09:48 - can uh grab the player component of that
09:52 - collider info and then we can check if
09:54 - that uh if the player component is equal
09:57 - to null if that simply isn't
10:00 - uh a player component well then we
10:02 - probably haven't hit a player and
10:04 - therefore we don't need to do anything
10:06 - but if there is a player component then
10:09 - we can call the damage player method so
10:12 - first uh let's just call this player
10:14 - component _ player and set it equal to
10:18 - collider info. collider doget component
10:22 - of type player then we check if there is
10:26 - a player component so if uh underscore
10:29 - player is not equal to
10:32 - null then we can say player Dot and then
10:37 - we can say damage player and we can
10:40 - input a damage
10:43 - amount so but in order to input an an
10:46 - amount we need to have a variable and uh
10:48 - let's add that into our enemy stats so
10:51 - let's just make a public integer called
10:54 - damage and we don't really need to get
10:56 - set for that uh we will have we will
10:59 - give it a default amount of let's say um
11:04 - 40 cool so now down here all we need to
11:07 - do is simply say stats. damage and it'll
11:11 - pass in the damage that this enemy
11:15 - does awesome uh and that's basically as
11:19 - far as I can see that's all we need to
11:22 - do uh so far in order to damage our
11:25 - player so if we hit the maximize on play
11:27 - and stop playing here we should see that
11:30 - the moment our enemy collides with us
11:33 - our health should go down and indeed it
11:36 - did so let's try that
11:39 - again there you see cool but currently
11:43 - uh nothing happens to our enemy it would
11:46 - just stay there and maybe move a little
11:48 - bit and maybe hit the player a few more
11:50 - times uh but the effect isn't really
11:54 - that epic so what we need to do here is
11:58 - uh we need to simply kill off our enemy
12:01 - the second that it has killed our player
12:04 - so if it is our player we've hit we
12:08 - damage the player and we then simply
12:10 - damage the
12:12 - Enemy by like a very big number just typ
12:16 - in a bunch of nines here we could also
12:18 - just call the kill enemy uh if that's
12:22 - what you wanted to do on the game master
12:23 - object but I like go doing it through
12:26 - the damage enemy method because then we
12:28 - can um add uh sounds or whatever custom
12:32 - logic in here without having to do it uh
12:35 - separately cool so we simply damage our
12:38 - enemy uh so now whenever he hits our
12:45 - player he will
12:48 - self-destruct cool so that's basically
12:51 - the foundation of what I wanted to do
12:54 - today uh but I also really would like if
12:58 - our player or if our enemy uh self
13:02 - exploded in a by spawning a particle
13:05 - system and also if our camera uh if we
13:08 - we applied a camera Shake every time
13:10 - that happened so in order to do this all
13:14 - we need to do is go into our scripts
13:18 - oops scripts and find our game master
13:20 - object because this is responsible for
13:23 - killing off both the player and the
13:25 - enemy so this is kind of the place we
13:27 - need to be in order to add this function
13:29 - functionality and you can see that
13:31 - currently we are simply using this
13:32 - public static void called kill enemy
13:35 - which just destroys our enemy object but
13:38 - I would like a local uh method a a
13:42 - non-static method uh that sits on the GM
13:46 - object uh so that we can use some uh
13:49 - variables such as uh using some uh
13:53 - particles of reference to those and uh
13:56 - also of reference to our camera Shake uh
13:59 - so in order to do this we basically need
14:01 - to call a local method uh an instance
14:04 - method uh through the static method so
14:08 - uh first off let's add some variables
14:10 - the first one is going to be a public
14:13 - and uh that when we're going to add a
14:16 - transform and we're going to call this
14:19 - um enemy death
14:23 - particles we also need a public camera
14:27 - Shake remember we created that in an
14:30 - earlier video and we'll simply call this
14:33 - camera
14:35 - shake and I think I'll bring this up
14:37 - because we might use this in in several
14:40 - contexts so I'll just bring it up here
14:42 - because it doesn't necessarily have
14:44 - anything to do with our any dying and uh
14:47 - basically all we need to do here is
14:48 - create that local uh method and I think
14:52 - I'll just create it under the static one
14:56 - and it's just going to be a uh public
15:00 - void and I'll do underscore kill
15:05 - enemy to really signify that this is
15:08 - local and not
15:11 - static and then we simply want to pass
15:14 - in the enemy as a parameter and I like
15:18 - uh I've introduced this naming
15:19 - Convention of using an underscore when
15:21 - youever you're passing passing in an
15:25 - argument and so we can move this destroy
15:28 - enemy game object down here and then
15:30 - here we simply want to say GM do uh kill
15:35 - enemy oops GM
15:38 - doore kill
15:41 - enemy there we go and uh if we want to
15:44 - stick with the same naming convention
15:46 - here let's do an underscore on the
15:48 - respawn player two there we go and uh of
15:53 - course when we calling this we need to
15:55 - pass in the
15:56 - enemy and down here we need this to to
15:59 - beore enemy so now we've set up this
16:02 - system where we have this static method
16:04 - that we can easily call and that calls
16:07 - the local method that will be able to
16:09 - access these instance
16:12 - parameters awesome so basically now what
16:15 - we can do is we can
16:17 - instantiate our enemy death particles at
16:21 - the position of our enemy so Enemy
16:25 - doore enemy do transform
16:29 - do position and just with a zero
16:32 - rotation so we'll just do
16:35 - querian do
16:39 - identity awesome and uh also we can
16:42 - apply some camera shake so we'll just do
16:44 - camera Shake do shake and we want to
16:47 - shake uh a certain amount depending on
16:50 - the enemy I think it could be cool if
16:53 - like big enemies died in this huge
16:56 - explosion and smaller enemies died in
16:58 - another another one uh actually we
17:01 - should make sepal uh separate death
17:04 - particles depending on the enemy that
17:06 - would be way cooler so let's just remove
17:09 - that and um just keep the camera Shake
17:13 - here uh and then let's go into the enemy
17:17 - here and uh let's give him a death
17:21 - particle you could do this under enemy
17:23 - stats or you could just do it here I
17:26 - think I'll just uh do it here instead of
17:28 - going through the stats uh but we simply
17:31 - need to add a public uh
17:34 - transform Called Death
17:37 - particles like this and uh do the same
17:41 - in and inside the enemy stats we need to
17:43 - add a public
17:46 - float with uh the shake
17:52 - amount and will default that to
17:56 - 0.1 and a public
18:00 - float with the shake length we also
18:04 - default that to
18:07 - 0.1 put in an F
18:09 - there and
18:12 - uh that should be all we need then ins
18:15 - inside the start method we'll simply
18:17 - check if our death particles is equal to
18:21 - null then debug.log
18:25 - error no death particle is
18:30 - referenced on
18:33 - enemy cool so now inside of our game
18:36 - master all we need to do is call camera
18:38 - shake. shake and we'll input uh the
18:42 - underscore
18:44 - enemy. oops
18:46 - enemy. stats actually I don't want this
18:50 - inside of the stats I think this should
18:52 - be inside of
18:57 - the of the just enemy
19:00 - class so let's go back here enemy. Shake
19:05 - amount and the
19:08 - enemy. shake
19:11 - length and here instead of the enemy
19:13 - death particles we'll simply make that
19:15 - specific by calling it through the enemy
19:18 - so we'll just get the uh death particles
19:22 - there so now we can have separate Shake
19:25 - amounts Shake lengths and death
19:27 - particles for every enemy that we create
19:31 - now the only uh thing I want to do here
19:34 - lastly is just a check where we say void
19:39 - start and I just want to check if camera
19:43 - Shake is equal to null then we want to
19:47 - complain that no camera Shake
19:53 - referenced in game master
19:59 - cool that should be every uh all the
20:02 - code that we need to uh do for now at
20:06 - least let's look at the alien uh
20:09 - spaceship and see that we now have an a
20:11 - spot for the death particles a shake
20:14 - amount and a shake length so now I want
20:17 - to go ahead and create a particle system
20:20 - uh that we can spawn whenever we die so
20:24 - in order to do this uh let's right click
20:27 - in the hierarchy let's go under and uh
20:30 - let's just select particle system let's
20:33 - focus in on this on the scene let's
20:36 - reset the
20:37 - transform and let's move it up a bit so
20:40 - we have some space where we can play
20:41 - around with it let's set the uh duration
20:45 - to two and the start lifetime to two
20:48 - let's go and do emission and change the
20:50 - rate to zero let's go under shape change
20:54 - the type uh or the shape to sphere and
20:57 - uh let's
20:59 - uh change the radius to something like
21:03 - 0.2 and we want to emit in a random
21:07 - Direction Let's now add a burst here of
21:10 - about 30 particles and you can see that
21:13 - currently they are just go out in this
21:16 - very huge sphere like formation so let's
21:20 - change the start Speed to be uh random
21:23 - between two constants that's going to be
21:26 - between uh 10 and 20
21:29 - and you can see that's kind of aot right
21:30 - now but what we also want to do is we
21:33 - want to limit the velocity over lifetime
21:36 - we want to Damen it by
21:38 - 0.1 and we want to set the speed to be
21:42 - equal to a curve that starts at one and
21:46 - then
21:48 - whoops and then goes down to like about
21:53 - 0.5 and you can see that this gives a
21:56 - pretty cool explosion look where
21:58 - everything just very quickly slows down
22:01 - you can of of course adjust how much you
22:03 - want it to slow down uh this might be
22:07 - better actually cool so now that we have
22:10 - that in place uh we could actually I
22:14 - want to damp this a lot more let's do
22:20 - 0.2 that looks pretty
22:24 - nice and this is all about just
22:26 - adjusting the values to what you want
22:28 - want to
22:30 - see this looks fine for now we can then
22:33 - add a gravity modifier so if we give
22:36 - this a gravity scale of one I think
22:37 - that's a bit too much let's try
22:39 - something like
22:42 - 0.3 still a bit too much for my taste I
22:45 - think
22:46 - 0.15 might be
22:49 - good yeah that looks pretty
22:56 - awesome cool then next up we can gohe go
23:00 - ahead and create a cool looking material
23:04 - for this so let's right click in the
23:06 - project go into material and rename this
23:09 - to
23:10 - additive and we'll change the Shader
23:13 - from standard to particles additive and
23:18 - as the texture will'll select the
23:19 - default particle for now you can of
23:22 - course uh use any kind of texture and uh
23:25 - be nerdy about this there also a lot of
23:27 - cool looking free particles on the
23:30 - Internet or a lot of of good assets at
23:33 - the unity asset store if you wanted to
23:36 - uh really get serious with your particle
23:38 - systems uh but then uh we want to drag
23:41 - this into the uh renderer
23:44 - material to actually apply that and you
23:47 - can see that already looks it makes it
23:49 - look a lot cooler then we can go under
23:51 - the size over Lifetime and just um make
23:56 - this shrink down
23:59 - not too much just shrink a little
24:04 - bit that looks pretty good uh let's also
24:07 - randomize the start size so make that
24:10 - random between two between two constants
24:14 - and I want that to be between uh maybe
24:17 - 1.5 and
24:20 - 1 which looks pretty good and uh next up
24:25 - I want to go under the color of a
24:27 - lifetime
24:29 - and make sure that they very quickly
24:31 - fade in
24:33 - and slowly Fade
24:39 - Out that looks much better also we can
24:42 - maybe change the start color here to a
24:45 - very yellowish
24:48 - color very bright and then the end color
24:53 - to something more
24:55 - red so it will like fade like spar
25:02 - that looks actually pretty nice uh we
25:06 - might uh limit the
25:09 - uh the velocity even
25:12 - more let's try
25:19 - 0.3 0.2 I don't know you can play around
25:22 - with this as much as you want I mean uh
25:25 - it's really just about messing around
25:27 - with the values until so you get
25:28 - something that looks right you can play
25:30 - around with how uh many you want to
25:32 - actually emit uh but I think we are just
25:34 - going to use this for now and we'll call
25:36 - these alien
25:39 - spaceship uh death
25:42 - particles and we'll drag them under the
25:45 - prefabs
25:47 - folder there we go delete them from our
25:50 - scene and also make sure to select the
25:53 - prefab and uncheck looping and uh then
25:57 - we can simply select our alien spaceship
25:59 - and drag in the particles there and also
26:02 - I just remember that if we go under our
26:04 - GM object we want to tell it to actually
26:08 - kill this off after a certain amount of
26:11 - uh time so let's just quickly do that
26:14 - let's uh store this firstly in a as a
26:18 - game object and we'll just call this
26:20 - clone equals inate blah blah blah as a
26:23 - game
26:24 - object and uh then we simply want to
26:27 - call destroy
26:29 - clone after 5
26:34 - Seconds see if that
26:37 - works cool and uh now that we are
26:41 - actually ready to hit
26:43 - play whoops no camera Shake referenced
26:46 - in game master it's very nice that we
26:48 - actually made it uh give us uh error
26:51 - messages like that uh because they are
26:54 - very important once your game uh gets
26:56 - bigger so we'll simply find our um find
27:01 - our camera shake you and drag it in and
27:03 - let's try that
27:06 - again and you can see our enemy explodes
27:09 - and our camera shakes and this will also
27:11 - work if we kill him by shooting him so
27:15 - that looks very nice so now we finally
27:18 - have a game where our opponents can
27:22 - damage us and where we can kill off our
27:24 - opponents and it doesn't look horrible
27:28 - so let's hit apply on the GM object
27:30 - apply on the spaceship and apply on the
27:33 - player and uh just for fun let's drag
27:35 - around some
27:38 - spaceships duplicate
27:40 - these and see them in
27:45 - action responding 3 two
27:50 - one cool so that was the ending of this
27:53 - video I hope you enjoyed it and I'll see
27:56 - you in the next one
27:58 - n
28:04 - [Music]