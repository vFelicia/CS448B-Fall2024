00:00 - lately unity has been making some huge
00:02 - improvements in terms of performance and
00:04 - writing optimized multi-threaded code
00:06 - and at the center of these changes is
00:08 - the new entity component system but
00:11 - before we get into what ECS is we need
00:13 - to know why it's useful also this video
00:15 - is sponsored by unity
00:17 - so using ECS has a lot of benefits it
00:20 - allows us to write extremely performing
00:22 - code we can code in a way that is easier
00:24 - to read it makes it easier to reuse code
00:28 - and with ECS we can take advantage of
00:30 - the new burst compiler for high
00:32 - performance c-sharp plus it's integrated
00:34 - nicely with the c-sharp job system so
00:37 - using easy s not only allows us to write
00:39 - extremely performing code but it's also
00:41 - a much better way to structure our data
00:43 - now that sounds great but what is easy s
00:47 - easy s is basically a new way of writing
00:50 - code in unity with easy as we are moving
00:52 - from traditional object-oriented
00:54 - programming to something called data
00:56 - oriented design so far when using unity
00:59 - pretty much everything has been based
01:01 - around game objects and mono behaviors
01:03 - say for example we wanted to create a
01:05 - player we would make a game object and
01:07 - name it player and on this object we
01:09 - would place monobehaviour components to
01:11 - give the player functionality these
01:13 - components would take care of stuff like
01:15 - rendering physics and movement with ECS
01:18 - we are taking a different approach by
01:20 - splitting our game into three parts
01:22 - entities components and systems entities
01:27 - are used to group together components
01:29 - they're much like traditional game
01:31 - objects but way lighter components are
01:34 - just containers for data unlike
01:36 - traditional amount of behaviors these
01:38 - components don't have any logic in them
01:40 - instead we use systems systems define
01:43 - component based behavior what this means
01:46 - is that a system is responsible for
01:48 - operating on all entities with a
01:50 - specific set of components these are the
01:52 - only objects that actually contain any
01:55 - logic so now if we wanted to create a
01:57 - player we would make an entity and on
01:59 - this entity we would place components
02:02 - however the only job of these components
02:04 - is to store data about a player so
02:06 - currently it wouldn't do anything to
02:08 - change this we create systems we could
02:11 - for example create a render system to
02:12 - render all in
02:13 - with the render component and a physics
02:16 - system to apply physics to all entities
02:18 - with the physics component of course the
02:20 - ECS package already has several of these
02:22 - basic systems ready to use so that is
02:25 - the general explanation let's see how we
02:27 - can apply this in praxis first we need
02:30 - to install EC s ec s is currently
02:32 - available as a preview package to get it
02:34 - we first need to install you in the 2018
02:36 - point 1 or later we can then create a
02:39 - new project once it's up and running we
02:41 - can go to edit project settings player
02:44 - open up the other settings tab and under
02:47 - configuration will change the scripting
02:49 - runtime version to.net for X this will
02:52 - require a quick restart after that we
02:57 - can open our project folder navigate to
03:00 - packages and open the manifest.json file
03:03 - here we need to add a few lines I'll
03:05 - make sure to include a link to a text
03:07 - file in the description that you can
03:09 - copy from we can then save the file and
03:11 - unity should start loading in the ECS
03:13 - package when it's done we can go to
03:17 - window and open up the package manager
03:20 - and we should now see the entities
03:22 - package installed here now say we want
03:24 - to rotate an object over time first
03:27 - let's create a cube and let's create a
03:29 - new script on this cube called rotator
03:32 - if we open up the script we can see that
03:34 - as expected this automatically creates a
03:36 - rotated class that derives from
03:38 - monobehaviour
03:39 - with the old system we could then use an
03:41 - update method to change the rotation of
03:43 - the transform component and maybe create
03:45 - a variable to control the speed by
03:48 - running this code all objects with this
03:50 - script attached will rotate according to
03:52 - our speed variable and if we take a
03:54 - second to analyze the code we can
03:56 - actually see that the monobehaviour
03:58 - contains both the data which in this
04:00 - case is our speed variable and the
04:02 - behavior where we update the rotation
04:05 - now this might look fine on the surface
04:07 - but it's actually not a very performant
04:09 - way of doing things and it also makes it
04:11 - a bit hard to distinguish what is going
04:13 - on to avoid this with ECS we separate
04:16 - the data from the behavior and there are
04:18 - currently two ways to do this the first
04:21 - is using pure ECS this system is
04:24 - completely separate from the old way of
04:26 - coding with pure
04:27 - yes we stopped using game objects and
04:29 - mana behaviors all together the second
04:31 - way is using hybrid ecs to make it
04:34 - easier to transition from the old system
04:37 - to ecs unity has created a way to
04:39 - combine the two now this won't unlock
04:41 - the full performance benefits of pure
04:43 - ECS but it's great way to start
04:45 - converting your scripts to easy s and
04:47 - learning this new way of thinking the
04:49 - cool thing is that by using hybrid ecs
04:51 - we can continue using mana behaviors for
04:54 - storing data so currently we have some
04:57 - scripts sitting on different objects
04:59 - each script has some data and some
05:01 - behavior now with hybrid ECS we still
05:04 - keep a script on each object that has
05:06 - the data we need but we use a system to
05:09 - handle the behavior in other words we
05:12 - can use a class called the component
05:14 - system to update the rotation of all our
05:17 - objects now if this all sounds a bit
05:19 - overwhelming that's totally fine but
05:21 - let's try to take it from the top
05:23 - like before we first create a class
05:25 - deriving from monobehaviour but this
05:27 - time we only put our variable here then
05:30 - for our behavior we create a new class
05:32 - and derive it from component system we
05:35 - can name this class anything we want
05:37 - here we'll just name it rotator system
05:39 - also whenever we're working with ECS we
05:42 - need to include the unity entities
05:44 - namespace so now we've separated our
05:46 - behavior and data into two different
05:48 - classes but our behavior class is
05:50 - currently empty
05:51 - the next step is to tell our component
05:54 - system what components it should operate
05:56 - on here we're filtering all of our
05:58 - objects to look for those with a certain
06:00 - set of components in our case that is
06:02 - our rotator because we need the speed
06:04 - variable as well as the transform
06:06 - component so that we can change its
06:08 - rotation to do this we create a struct
06:11 - let's name it components and in here we
06:14 - create two public variables one for the
06:16 - rotator and one for the transform and
06:19 - now we're ready to make the object
06:21 - rotate for that we'll need an update
06:24 - method note that when using update
06:26 - inside of a component system we use the
06:28 - override and protected keywords and the
06:31 - name of the function must be on update
06:33 - instead of just update just like the
06:35 - regular update function on update will
06:37 - run on the component system every frame
06:40 - now we
06:40 - need to search for all the objects that
06:42 - we want to rotate to do this we use the
06:45 - get entities function and at this point
06:47 - you might be thinking I thought entities
06:49 - and game objects with two different
06:51 - things and they are but unity has made a
06:54 - handy component that can be used to
06:56 - convert a game object into an entity if
06:58 - we go to the editor and open up the
07:01 - entity debugger window we can see that
07:04 - the entity manager currently has no
07:06 - entities however if we then add a game
07:09 - object entity component to our cube it
07:11 - immediately shows up in our update
07:14 - method we can then use get entities to
07:16 - search for all entities with a matching
07:18 - set of components in our case we want to
07:21 - search for entities that have both a
07:23 - rotator and transform component we've
07:25 - already defined this with a struct and
07:27 - so we can simply feed that in we can
07:29 - then iterate over all the entities using
07:32 - a for each loop we'll call each entity
07:34 - efore short and now inside our loop we
07:37 - can update the rotation to access the
07:39 - transform of each entity we use edit
07:41 - transform and to access the rotator we
07:43 - use a rotator and that should actually
07:46 - work just fine if we run the game our
07:48 - objects rotate accordingly and we can
07:51 - easily adjust the rotation speed just
07:53 - like before and that's already an
07:54 - optimization that we can make because
07:57 - our Delta time variable is the same for
07:59 - all the objects we can move this out of
08:01 - our for each loop and keep it in a local
08:04 - variable to get better performance if
08:06 - you run the game once more everything is
08:08 - still working and if we go to the entity
08:11 - debugger we can actually see our
08:13 - rotators system and even cooler we can
08:16 - see the components it operates on as
08:18 - well as the entities in it awesome so
08:21 - that is how you can get started using
08:22 - ECS in unity again what we're using here
08:25 - is hybrid ECS if you want to learn more
08:28 - about pure ACS and the performance
08:30 - benefits that come with it I'll make
08:31 - sure to include a link for that in the
08:33 - description on that thanks for watching
08:35 - and I will see you in the next video
08:37 - thanks to all the awesome patreon
08:39 - supporters who donated in May and a
08:41 - special thanks to Michael Neely twins
08:42 - infants giver token ed Murphy Oh
08:44 - infinity PPR cheetah 3d Alex and the
08:47 - player
08:47 - Sybok mummy dark Eames Kirk Fresnel
08:49 - Murphy Daniel Sullivan thanks a long
08:51 - Superman
08:52 - great John Burkhart Lila set tennis
08:54 - sullivan jayson the Tito car Jackson for
08:56 - Brizzy Alex akatsuki Bruins cat Matthew
08:59 - Knight cool sweater ski
09:00 - James P Gregory Pierce James Rogers
09:02 - Naoki Misaki Robert pond now a tweet Tim
09:05 - of Hoda Park Jimin Adrienne has Nina and
09:07 - Erasmus you guys Rock