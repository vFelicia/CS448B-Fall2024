00:00 - in this video we're gonna have a look at
00:01 - creating obstacles and how to make
00:02 - things happen when two objects collide
00:04 - also Before we jump into the tutorial I
00:05 - have a quick update for you guys I'm
00:07 - really glad the feedback on this series
00:08 - has been so positive so far I'm having a
00:10 - blast making it if you don't follow me
00:12 - on social media when you're watching
00:14 - this video I'm actually on my first
00:15 - vacation for a very very long time
00:18 - because of that the recent videos and
00:20 - the next ones are all scheduled I really
00:22 - tried to fit in all of the blanks while
00:24 - I was gone but unfortunately I had to
00:26 - skip a video that means that this
00:27 - witness stayed there will be no new
00:29 - video however there will of course be
00:31 - another how to make a video game this
00:32 - Sunday alright enough rambling let's get
00:35 - started so if we select our player we
00:37 - can see that we currently have a player
00:38 - movement script and we could definitely
00:39 - go ahead and add our coalition code to
00:42 - this script as well but to make things
00:43 - easier to understand let's go ahead and
00:45 - create a separate script let's add a
00:46 - component let's call it something like
00:48 - player collision hit new script select C
00:51 - sharp and hit create an ad let's double
00:53 - click the script to open it up in visual
00:54 - studio let's delete the two using tags
00:56 - appear and both the start and the update
00:59 - method so adding code to colliding
01:00 - objects in unity is actually really easy
01:02 - to do just like start an update unity
01:05 - has created a function with a specific
01:06 - name that is called whenever two objects
01:09 - collide let's write void just as we
01:11 - would do with start an update and then
01:13 - write on collision enter make sure to
01:16 - use capital letters the same way that I
01:17 - do and that you spell this in the right
01:19 - way if you do this wrong unity is not
01:21 - going to throw an error it's not going
01:23 - to complain in any way but it's just not
01:25 - going to be working we can then open and
01:27 - close some parentheses and some curly
01:28 - brackets this now means that whatever
01:30 - code replaced within these two curly
01:32 - brackets will be called whenever this
01:34 - object collides with something so if we
01:36 - save this and go back into unity we can
01:38 - add our player collision script to
01:40 - whatever object we want as long as the
01:42 - object has a rigidbody and a Collider we
01:44 - can be sure that this code will be
01:46 - called so to test this let's just go
01:48 - ahead and throw a debug dialogue
01:49 - statement that says we hit something
01:52 - let's save this go into unity and hit
01:54 - play and you can see now that right off
01:56 - the gate a message displays in our
01:59 - console saying that we hit something and
02:01 - you might think that's a bit weird
02:02 - because we don't currently have any
02:03 - obstacles in our scene
02:04 - but you need to text collision between
02:06 - all objects so what we actually hit here
02:09 - is the ground so when we hit play and
02:11 - our player falls down this message is
02:13 - display
02:14 - let's try and add an obstacle to our
02:15 - scene we can go over here in the
02:17 - hierarchy right click go 3d object and
02:20 - then cube we can then reset the
02:22 - transform off this object let's move it
02:24 - forward a bit let's put it add one on
02:26 - the y-axis hit F to focus on it and we
02:29 - can see that it's standing on our ground
02:30 - it's currently totally white so let's go
02:32 - into our project panel right click go
02:34 - create material and this one is going to
02:37 - be our obstacle mat we can make this a
02:39 - bit darker and we can drag it on to our
02:41 - obstacle we can also consider turning
02:43 - down the smoothness you will notice the
02:45 - preview down here changing the higher
02:47 - the smoothness the more light will
02:48 - bounce off the surface let's just leave
02:50 - that at zero we can now take this cube
02:52 - move it forward a bit more and give it a
02:54 - scale on the x-axis of about two we can
02:57 - rename it to something like obstacle and
02:59 - you will notice this right away has a
03:01 - box Collider so all we need to do is add
03:03 - a rigidbody as well we can go ahead and
03:05 - increase the mass a tiny bit this is a
03:07 - bit bigger than the cube so let's set it
03:09 - to something like 2 and that should be
03:11 - all the settings we need to configure
03:12 - now if we go to our console clear all
03:14 - the stuff we have in it and hit play we
03:16 - should see that we both collide with the
03:18 - ground and the obstacle object however
03:20 - we need a way of keeping track of what
03:22 - we head because we don't want this to
03:24 - trigger whenever we hit the ground to do
03:26 - that we go into our script and we tell
03:28 - unity we want some information about
03:30 - what object we hit we can do that by
03:32 - inserting a bit of code within these two
03:34 - parentheses let's write collision this
03:36 - lets unity know that we want to gather
03:38 - some information about the collision and
03:40 - then we need to give that information a
03:42 - name again we can choose any name you
03:43 - want here I'm just gonna type collision
03:45 - info then down here instead of simply
03:48 - writing we hit something let's display
03:50 - what we hit to do that we can replace
03:52 - our text with collision info we then use
03:54 - the dot to access different parts of
03:57 - this information you can see that we can
03:58 - get information about the contact points
04:00 - between the colliders stuff like the
04:02 - impact force sum and other handy
04:04 - parameters the most important one for us
04:06 - is that we can get info about the
04:08 - collider we here so that's right dot
04:10 - Collider and again we can type dot and
04:12 - we'll get all of the information about
04:13 - that Collider here we can access the
04:16 - rigidbody if our Collider the material
04:18 - of our Collider or just display its name
04:20 - so by accessing the collider within
04:22 - collision info and the name within the
04:24 - collider we should now display the name
04:26 - of whatever we here
04:27 - let's see if this works in unity let's
04:29 - hit play and we should see that it first
04:30 - shows ground and then obstacle this
04:33 - makes it really easy for us to have
04:34 - different stuff happen depending on what
04:36 - we hit we could write if collision info
04:39 - dark Collider name is equal to obstacle
04:43 - and remember to put this within
04:44 - quotation marks let's then open and
04:46 - close the curly brackets and now
04:48 - everything we write within these two
04:49 - curly brackets will only happen if the
04:51 - name of the collider that we hate is
04:53 - obstacle let's see if that works let's
04:55 - write a debug deadlock statement here
04:57 - saying we hit an obstacle again let's
05:00 - save this head back into unity and hit
05:02 - play and you can see nothing happens
05:04 - when we hit the ground but as soon as we
05:05 - collide with the obstacle it displays a
05:07 - message in our case it actually
05:09 - displayed - that's because we had two
05:11 - quick collisions with the obstacle it
05:13 - was hard to see with the naked eye but
05:15 - unity actually detected it however most
05:17 - of the times we'll only see one one
05:19 - thing that we should correct about this
05:21 - piece of code is that checking for an
05:22 - obstacles name is not the best way to go
05:24 - about things if you create a larger game
05:26 - you can quickly have hundreds if not
05:28 - thousands of objects in your scene and
05:30 - searching through all of them can be
05:32 - really taxing on the computer it also
05:34 - means that if we were to go ahead and
05:35 - rename the object our code would no
05:38 - longer work a much better way to go
05:40 - about things is using tags tags can be
05:43 - used to group objects together so in our
05:45 - case we could mark all of our different
05:47 - obstacles with an obstacle tag to do
05:50 - that we go up here weÂ´d says tag we
05:52 - click untagged and you can see the
05:54 - different tags created by unity
05:55 - automatically we need to go ahead and
05:57 - add a new one hit the plus sign to
05:59 - create a new entry let's call this one
06:01 - obstacle we can then select our obstacle
06:03 - object and change the tag to obstacle
06:05 - then in our code instead of checking for
06:07 - the name we'll check for tag this is
06:10 - much better because it allows us to
06:11 - create a bunch of different objects and
06:13 - as long as they share the same tag we
06:15 - can configure them in any way we want
06:17 - let's just make sure that this is
06:19 - working by hitting play and indeed it is
06:22 - of course displaying a message in the
06:23 - console isn't very exciting what you
06:25 - should probably do is add some kind of
06:27 - in screen or maybe just restart the
06:29 - level those are great things to add but
06:31 - it's enough for a separate video instead
06:32 - let's make sure to disable our players
06:34 - movement because right now when we hit
06:36 - the object we actually just keep flying
06:38 - instead we can simply go in through
06:40 - Scribd and turn off our player movement
06:43 - script to do that we need to have a
06:44 - reference to a player movement script
06:46 - let's go into Visual Studio and before a
06:49 - function let's add a variable let's type
06:51 - public then the name of our script which
06:54 - is player movement and then we need to
06:55 - give the variable a name in our case
06:57 - let's call it just movement when we now
07:00 - save this and go into unity we can see
07:02 - that there's now an empty slot here so
07:04 - by simply dragging I'll play a movement
07:05 - script into that slot we've now created
07:08 - a reference from the play a collision
07:10 - script to the player movement script and
07:12 - we've called this movement now in our
07:14 - code we can replace our debug deadlock
07:16 - statement with movement dot enabled and
07:19 - we can set this to false again let's
07:21 - save hit play and hit an obstacle we can
07:24 - now see that our player movement script
07:25 - turns off so that was pretty much it for
07:28 - this video if you enjoyed it make sure
07:29 - to subscribe so you don't miss a future
07:31 - episode thanks for watching and I will
07:33 - see you in the next video thanks to have
07:35 - the awesome people who donated in
07:36 - January and a special thanks to Derrick
07:38 - heaps Kirk Chaisson Merrifield James
07:39 - Calhoun Robert Vaughn and Peter Locke
07:41 - and Jason Lotito
07:42 - if you want to become a patron yourself
07:44 - you can do so aperture intercom /
07:45 - practice thanks a lot guys