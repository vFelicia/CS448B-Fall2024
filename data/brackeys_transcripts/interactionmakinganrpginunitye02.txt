00:00 - in this video we'll start building
00:01 - everything that we can interact with in
00:02 - the world we'll be laying the foundation
00:04 - for items enemies chests stores pretty
00:07 - much anything that you can think of we
00:08 - also make sure that we can focus an
00:09 - object and follow it around let's get
00:11 - started so the first thing that we want
00:12 - to do is go to our scripts folder and
00:14 - Define some kind of interactable object
00:17 - let's create a new script called
00:19 - interactable and let's open it up now
00:21 - the idea is that this will be a base
00:22 - class that all objects the player can
00:24 - interact with Will derive from and so we
00:27 - need to think about what are
00:28 - interactable objects such as I items
00:30 - chests and enemies will have in common
00:32 - so let's start by deleting our two using
00:34 - tags at the top and let's also delete
00:36 - our two methods instead I want to go
00:38 - ahead and add a public float which we
00:40 - will call the radius and we can default
00:43 - this to say three units this is going to
00:45 - be the distance that specifies how close
00:47 - our player needs to get to the object in
00:49 - order to interact with it whether that
00:51 - be picking up an item or attacking an
00:53 - enemy and a cool little trick here is
00:55 - that we can actually visualize this in
00:57 - the editor all we need to do is create a
00:59 - function called on draw gizmos selected
01:02 - and you need to write this in the exact
01:04 - same way because it's a callback
01:05 - function used by unity and in here we
01:07 - can draw Graphics in the scene first off
01:09 - let's set our color to a color. yellow
01:13 - and let's then use gizmos do draw wire
01:17 - sphere here we need a center for our
01:19 - sphere which is just going to be our
01:21 - current position so transform. position
01:24 - and a radius and for that we'll just use
01:26 - our radius so now when we save this and
01:28 - head into Unity we can go ahead and and
01:30 - create an interactable object let's
01:32 - right click in our hierar key go 3D
01:33 - object and let's create a sphere let's
01:36 - then snap to the top here and go into
01:38 - orthographic View and let's place this
01:40 - somewhere on our Bridge let's also look
01:42 - at it from the side in order to place it
01:44 - just above the bridge let's now add the
01:46 - interactable component to this object
01:49 - and you can see now in the scene view
01:50 - that this wire sphere appears and it
01:52 - will update as we change our radius so
01:54 - now we have to find a way to turn an
01:56 - object into an interactable object and
01:59 - that means that we can actually go
02:00 - inside of our player controller in here
02:02 - we can go to the update method and at
02:04 - the bottom of that we check for a right
02:06 - Mouse button click we want to check if
02:08 - we hit an interactable and we can now do
02:10 - that we can use hit. collider doget
02:13 - component and the component that we want
02:14 - to check for is our new interactable
02:17 - component we can then store this in a
02:19 - variable so let's make an interactable
02:21 - let's just call it interactable as well
02:23 - and set it equal to our get component
02:25 - call and then here if we did hit an
02:27 - interactable we want to set it as our
02:29 - Focus well we can check if we hit an
02:31 - interactable by going if interactable is
02:34 - not equal to no meaning if we actually
02:37 - found an interactable component on what
02:39 - we hit well then we want to set it as
02:41 - our Focus so let's create some kind of
02:43 - method that will allow us to do that
02:45 - let's put in a set Focus method and
02:47 - let's feed our interactable into that
02:49 - then below our update method we can go
02:51 - void set focus and as an argument will
02:54 - take in an interactable let's call it
02:56 - our new focus and how do we set our
02:59 - Focus well first let's go to the top
03:01 - here and let's Define a variable that
03:03 - will keep track of what we currently
03:04 - have focused so let's create a public
03:07 - interactable and let's call this our
03:09 - Focus then when we set our Focus we can
03:11 - simply set Focus equal to the new focus
03:15 - in the same way we also want to be able
03:16 - to defocus from objects we'll do that
03:19 - whenever we press the left Mouse button
03:21 - that's up here when we press left Mouse
03:23 - we want to move to a certain point and
03:25 - stop focusing in the objects and so
03:27 - let's call another function here called
03:29 - remove focus and we can go ahead and
03:31 - create that as well void remove
03:34 - focus and here we'll just set our Focus
03:37 - equal to null so let's go into Unity hit
03:40 - play and let's focus on our player and
03:42 - you can see by default we have no Focus
03:44 - if we now rightclick on our sphere you
03:47 - can see our sphere is set as the focus
03:49 - and if we then start moving it's set
03:51 - back to null but whenever we focus
03:53 - something we also want to move our
03:54 - player towards it to do that we'll have
03:56 - to tell our player motor where to move
03:58 - now you might think that we can go in
04:00 - here and call motor. move to point and
04:03 - then move to the point of our new Focus
04:05 - however this will only move our player
04:07 - once if our focus is an enemy he might
04:09 - be moving as well and so we can't just
04:12 - move to a single point instead let's go
04:14 - into our motor and add support for
04:15 - tracking a Target let's create a public
04:19 - void called follow Target we'll take in
04:22 - an interactable which is going to be our
04:24 - new Target we'll also create another
04:27 - public void this one will be called stop
04:29 - follow blowing
04:30 - Target so let's now go to the top and
04:33 - add a variable for the current Target
04:35 - let's make this of type transform and
04:37 - call it Target whenever we want to
04:39 - follow a Target we'll Now set our Target
04:42 - equal to the new target. transform and
04:45 - when we stop following it we want to set
04:47 - Target equal to null so now we should be
04:49 - changing this variable to whatever our
04:51 - focus is but we need to also update our
04:54 - destination on our agent if you want to
04:56 - be very performant you could do that in
04:57 - a co- routine and so only update the
05:00 - position a few times a second I'll have
05:02 - a link for using Co routines in the
05:03 - description in this example we'll just
05:05 - use the update method here we'll check
05:08 - if our Target is not equal to null and
05:11 - so if we have a Target we want to access
05:12 - our agent set the destination for that
05:15 - agent and the point that we want to use
05:17 - is our Target's current position so now
05:19 - our player motor should have the
05:21 - functionality needed we simply need to
05:22 - go into our player controller and when
05:24 - we set a new Focus we want to call motor
05:27 - do follow Target and the Target that we
05:29 - want to follow is our new focus and
05:32 - inside of remove Focus we can go motor
05:35 - do stop following Target now if we save
05:37 - these scripts go into unity and hit play
05:40 - we should be able to right click on a
05:42 - sphere to focus it and our player will
05:44 - move to it and if we take our sphere and
05:46 - move it our player will follow you will
05:49 - see however that our player only stops
05:51 - once he's inside the sphere to get rid
05:53 - of this error inside of our player motor
05:55 - once we start following a Target we'll
05:57 - access the agent aent agent Dot and here
06:00 - we can set the stopping distance so
06:02 - we'll set stopping distance equal to our
06:05 - new Target's radius and here we want to
06:07 - make sure that we always get inside of
06:09 - the radius not just on the border so
06:11 - we'll just multiply this with something
06:13 - like8 when we then stop following the
06:15 - target will set our stoping distance
06:18 - back to zero let's now save that go into
06:20 - unity and hit play we should see that we
06:22 - still move accurately when moving around
06:25 - and when we then move to the sphere our
06:27 - player stops at the appropriate distance
06:29 - there is one slight problem with this
06:31 - however and that is we can still move
06:32 - our sphere inside of the stopping
06:34 - distance and our player will not change
06:37 - rotation until we get outside a certain
06:40 - radius to fix this let's handle rotation
06:42 - ourself whenever we are following a
06:44 - Target we can do that by going to the
06:46 - agent and setting update rotation equal
06:49 - to false then when we stop following the
06:51 - target we can set update rotation back
06:53 - to true then inside of our update method
06:56 - whenever we set the destination for our
06:58 - agent we'll also go ahead and phas the
07:00 - Target and this of course involves a
07:02 - tiny bit of math let's create a method
07:05 - called phase Target here we want to get
07:07 - the direction from our position to the
07:09 - target's position we'll create a vector
07:11 - 3 called Direction and we'll set it
07:14 - equal to our Target's position minus our
07:17 - current position if this is confusing to
07:20 - you I have a video on Vector math that I
07:21 - suggest you check out we then want to
07:23 - normalize this Vector then we'll turn
07:25 - the direction into a rotation we'll
07:27 - store this rotation in a queral called
07:30 - look rotation and set it equal to quion
07:33 - DOL rotation look rotation takes a
07:35 - vector with a direction and looks in
07:38 - that direction we could just pass in
07:39 - Direction here but I don't want our
07:41 - player to look up and down to avoid that
07:43 - we'll create a new Vector 3 where we
07:45 - pass it our Direction dox then on the Y
07:49 - we'll leave it at zero and on the Z
07:51 - we'll pass in direction do Z then
07:53 - finally we can set transform. rotation
07:57 - equal to our look rotation directly or
07:59 - if you want to smooth this out we can
08:01 - use querian do slurp slurp allows us to
08:03 - spherically interpolate between two
08:05 - points we want to go between our current
08:08 - rotation and our look rotation and we'll
08:10 - do this using time. Delta time multiply
08:13 - with a speed and I'm just going to
08:14 - hardcode in A5 here again this part is
08:17 - fairly math heavy we get a direction
08:19 - towards our Target we find out how we
08:21 - should rotate ourselves in order to look
08:23 - in that direction and we make sure to
08:25 - avoid any changes in Direction on the Y
08:27 - and we then smoothly interpolate towards
08:29 - that rotation let's now save this go
08:31 - into unity and hit play and you should
08:33 - now see that when I focus our sphere
08:35 - voila it will always face our sphere
08:38 - even though we aren't outside of our
08:39 - stopping distance and it will also make
08:41 - sure to do these changes in rotation
08:43 - smoothly so now we can move towards our
08:45 - interactable but we don't have much
08:47 - interaction going to do that let's go
08:49 - inside of our interactable script and in
08:51 - here we want to know whether or not
08:52 - we're currently being focused this way
08:54 - we can check if the player that's
08:55 - focusing this object is close enough to
08:57 - interact with it so let's create a bow
09:00 - let's call it is focus and set it to
09:02 - false by default let's also create a
09:04 - transform called player then we can
09:06 - create two methods first a public void
09:09 - this is going to be the on focused and
09:11 - here we'll take in a transform which is
09:13 - going to be the player transform inside
09:16 - of this method we'll set is focus to
09:18 - true and we'll set the player equal to
09:21 - our player transform similarly will
09:23 - create a public void called On
09:27 - defocused and Here will of course say is
09:29 - focused to false and our player variable
09:32 - to null then we'll create a update
09:36 - method and here we can check if we are
09:38 - currently being focused if we are well
09:41 - then we can check for the distance to
09:42 - the player so let's create a float
09:44 - called distance set it equal to Vector
09:46 - 3. distance this Returns the distance
09:49 - between two points the first point is
09:51 - going to be our player's position the
09:53 - second one is going to be our current
09:55 - position so transform. position we can
09:57 - then check if our players inside of the
09:59 - radius by going if distance is less than
10:02 - or equal to our radius and if it is well
10:05 - then we want to go ahead and interact so
10:07 - let's write out debug.log
10:10 - interact let's save this going to the
10:12 - player controller and here when we set
10:14 - the focus we want to go new Focus do on
10:17 - focused and we'll also make sure to pass
10:19 - in all players transform when we then
10:21 - remove the focus we'll go Focus do on
10:25 - defocused however there's one thing that
10:27 - we need to remember and that is when
10:29 - when we set the focus we might already
10:31 - have a focus and so we need to make sure
10:33 - to defocus the previous one to do that
10:35 - we'll go in here and write if new focus
10:38 - is not equal to our current Focus well
10:40 - then we'll call on defocused on the
10:43 - previous one and we actually only need
10:44 - to update all these different things if
10:46 - our Focus has changed one thing I do
10:49 - want to leave out of this if statement
10:50 - is calling the unfocused method that's
10:52 - because I want to notify our
10:53 - interactable every time we click on it
10:55 - and just in case our previous focus is
10:57 - null we want to go in here and say if
10:59 - focus is not equal to null well then we
11:02 - want to defocus it and we actually want
11:03 - to make the same check down here so if
11:06 - focus is not equal to null well then we
11:09 - want to defocus it let's save that now
11:12 - go into unity and hit play We Should now
11:14 - be able to focus our sphere and once we
11:17 - get close enough start interacting and
11:19 - when we then move away we can see that
11:21 - it stops of course we don't want an
11:22 - interaction to happen a bunch of times a
11:25 - frame to fix this let's go to our
11:26 - interactable script let's add a new bull
11:29 - here called has
11:31 - interacted and set this equal to false
11:34 - then in our update method once we go
11:36 - ahead and interact we'll set has
11:39 - interacted equal to true and we actually
11:42 - only want to do this distance check if
11:44 - we are currently in focus and we haven't
11:46 - already interacted we'll also make sure
11:48 - to set has interacted to false inside of
11:51 - our unfocused method so every time we
11:53 - focus an object we'll make sure to
11:54 - interact once and just for good measure
11:57 - let's do the same in the on defocused
11:59 - method
12:00 - meod let's now save this go into Unity
12:03 - hit play Focus that sphere and you will
12:05 - see now that once we reach the stoping
12:07 - distance it prints out one interact the
12:10 - fun thing that we need in our interact
12:11 - script is an actual method for
12:13 - interacting so at the very top here
12:15 - let's create a public virtual void
12:19 - called interact and down here we'll
12:21 - simply call it so let's call interact
12:24 - now what is a virtual method and why are
12:27 - we using it here well remember the gr
12:29 - plan for this script is to have all
12:31 - objects such as items and enemies
12:34 - derived from it whenever we do that we
12:36 - inherit all of the fields and all of the
12:38 - methods but one thing that we don't want
12:39 - to be uniform across all of them is how
12:41 - we interact with the object in fact we
12:43 - want that to be different for each one
12:45 - that's why we've marked this method as
12:47 - virtual that means that we can call it
12:49 - from within this base class in other
12:51 - words we can trigger this method but
12:53 - inside of our enemy or item script we
12:55 - will be able to overwrite it and so we
12:57 - can put in our own functionality for
12:59 - each type of interactable so I'll just
13:01 - write here that this method is meant to
13:04 - be overwritten and by default we can
13:07 - just write out a message saying debug
13:09 - log interacting with and then the name
13:13 - of our transform if we would play you
13:15 - will see that this works in the exact
13:16 - same way as it did before but we've now
13:19 - laid the solid foundation for all
13:21 - interactables in the game finally at
13:22 - some point Sebastian is going to be
13:24 - adding some cool graphics for items and
13:26 - when he does he might want control over
13:27 - where we stand and look towards these
13:29 - items for example if we have a chest in
13:32 - the game we only want to be able to open
13:33 - it from the front of the chest to do
13:35 - this let's go in here let's create
13:37 - another public variable this one is
13:39 - going to be of type transform and let's
13:41 - just call it the interaction transform
13:44 - we'll then insert this in all the places
13:46 - that we're currently using transform so
13:48 - here where we check for distance instead
13:49 - of using transform. position we'll use
13:51 - interaction transform. position we'll
13:54 - also place it inside of our on draal
13:56 - Gizmo selected and we also make sure to
13:58 - go inside of player motor and here when
14:00 - we start following a new Target we want
14:02 - to use the new targets interaction
14:04 - transform instead now instead of unity
14:06 - we can simply select our sphere and it
14:08 - might throw you a single error because
14:09 - we currently have no interaction
14:10 - transform if you want you can use the
14:12 - transform of the same object or we could
14:14 - go in here and create a new Mt and we
14:16 - could call this the interaction point we
14:19 - then say move this forward from the
14:21 - object and then when we select the
14:23 - sphere we can drag in the interaction
14:24 - transform you can now see that we can
14:26 - control the point of interaction for our
14:28 - sphere so if you were creating a chest
14:30 - you would do something like this and
14:32 - when we play our player will try and go
14:34 - to that point but for this object I'm
14:36 - just going to get rid of it and set all
14:38 - the settings back to theault to wrap
14:39 - everything up let's rename our sphere to
14:41 - interactable yay we made it through
14:44 - that's pretty much it for this video
14:45 - Sebastian will be doing the next one in
14:46 - this series where he'll be implementing
14:48 - a player character also if you want to
14:50 - support these videos you can do so at
14:51 - patreon.com bra here you can donate a
14:54 - monthly amount of your choosing it's
14:55 - cancelable at any time on that thanks
14:57 - for watching and I will see you in the
14:59 - next video thanks to all the awesome
15:00 - Patron supporters who donated in July
15:02 - and a special thanks to Hans huun Cole
15:04 - cabal Will goat Yesa melson Thomas vley
15:07 - stone gamer cybor mummy Jason latio
15:10 - Derek Heir facal marifi Robert Bund and
15:13 - Peter lock if your name's not on the
15:14 - list I we make sure to include you in
15:16 - videos later this month and the next
15:17 - month as well thanks a lot guys