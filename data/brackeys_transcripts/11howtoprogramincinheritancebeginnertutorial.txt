00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:05 - video number 11 in the how to program in
00:07 - C course today's video we are going to
00:10 - take a look at inheritance basically
00:13 - deriving classes from other classes and
00:17 - uh what inheritance means uh we'll get
00:19 - into in a second but first of all I just
00:22 - want to explain that inheritance is an
00:24 - extremely important subject and it's
00:27 - considered one of the three pillars or
00:30 - uh primary characteristics of the an
00:32 - objectoriented programming language
00:34 - because basically what inheritance
00:36 - allows us to do and I've made this
00:39 - horrible looking graphic here but it
00:40 - will do for now is it will allow us to
00:43 - share code between classes uh basically
00:47 - if you have a base class imagine uh that
00:50 - we are making an
00:51 - RPG and uh we have this Base Class
00:54 - called our hero and he has different
00:57 - properties um that are general for all
01:00 - Heroes uh such as um a uh a health
01:04 - amount a um maybe a strength amount a
01:08 - amount of intelligence and all of that
01:10 - and uh then we have some derived classes
01:13 - that basically share all of those
01:16 - properties uh but also add on uh some
01:19 - new ones so uh a derived derived class
01:23 - could be a shaman and he might have some
01:25 - abilities and another one could be a
01:27 - warrior he might be able to yield a
01:29 - specific kind of of weapon all those
01:31 - kind of things uh can be derived from
01:34 - the same base class and then basically
01:37 - what we do is we instance the derived
01:40 - class so um when we then change this
01:42 - instance um it's not going to be uh the
01:45 - base uh Val values are not going to be
01:48 - changed for all of the instances uh
01:50 - that's not the point the point is just
01:52 - reusing uh the code so uh let's try this
01:56 - out so let's open up uh sumar and Studio
02:00 - and I've started with a clean slate here
02:02 - and uh we're going to start out by
02:03 - creating our Base Class and we do that
02:06 - just as with any uh other class and we
02:08 - are going to call this animal stick to
02:11 - the same uh the kind of idea that we've
02:14 - been using so far uh this concept of an
02:18 - animal that then has some different
02:20 - properties and that's going to be a
02:21 - public string which will be the name
02:24 - we're not going to default it to
02:25 - anything uh a public public integer
02:28 - which is going to be the a
02:30 - and a public float which is going to be
02:33 - the happiness I think these values will
02:35 - be pretty General and will pretty much
02:38 - apply to any kind of
02:40 - animal uh so other than that we can also
02:43 - give it a method so we're going to do a
02:45 - public void and uh this um method is
02:49 - going to Simply print the base uh values
02:53 - so this could also be something that
02:55 - alters maybe we could call this um age
02:59 - uh to to make it actually uh age so
03:02 - simply just add one onto the uh age
03:05 - value uh we could call it um um be happy
03:09 - and we could add on to the happiness
03:11 - value we could print out only the name
03:13 - we could do a bunch of things with this
03:15 - but for now we are simply going to print
03:17 - all of the base
03:19 - values and uh in here we're simply going
03:21 - to do uh console do right line uh name
03:26 - and then plus the name we're going to do
03:30 - console. right line
03:32 - H
03:34 - oops H and then the H and finally we're
03:39 - going to write out the
03:45 - happiness cool so this is going to be
03:48 - our Base Class and you will notice that
03:52 - we don't uh give this a keyword to say
03:55 - that this is our Base Class and the
03:57 - reason why is we don't really need to
03:59 - specify that
04:00 - um classes can derive from other classes
04:03 - that derive from other classes so the
04:05 - term with a a base and a derived class
04:09 - is relative so um next up we're going to
04:12 - create our derived class and uh this is
04:16 - going to be called uh
04:18 - dog and it's going to derive from and
04:21 - therefore we do a
04:22 - colon animal like this now the uh dark
04:26 - class will uh share all of uh the um
04:31 - basee values here or the base Fields
04:34 - with the animal class so inside of this
04:37 - we could maybe do a um public integer
04:41 - and this is just what we want to add
04:42 - onto it and this could be uh the spot
04:45 - count the number of spots that it has uh
04:48 - on its body and uh also we could do
04:51 - maybe a method in here just to show that
04:53 - that will work too and we're simply
04:55 - going to call this bark and uh what this
04:58 - will do is it will simply print
05:03 - out a
05:06 - wolf awesome and we can simply just copy
05:09 - this change this to
05:12 - a to a cat which is also going to derive
05:17 - from animal and this is going to have a
05:18 - different property here or the point
05:21 - wouldn't be so this could maybe be a
05:23 - float of cuteness and I know that dogs
05:27 - to can be cute but uh stick with me here
05:31 - uh and this is going to have a meow
05:34 - method and then in here we simply do
05:38 - print
05:41 - out
05:43 - yeah cool so basically this is kind of
05:47 - the base of inheritance uh what we can
05:49 - do now is simply use this so it's it's
05:53 - very easy to use I mean it doesn't
05:55 - require that much more syntax but it can
05:58 - really help organize uh your program
06:01 - make it easier to read uh minimize
06:04 - errors and uh definitely minimize
06:07 - redundancy uh you don't want to do the
06:09 - same thing over and over and inheritance
06:11 - will definitely help you on that I mean
06:14 - this is Central to many different kinds
06:16 - of programs you can write an entire
06:18 - program without using inheritance though
06:21 - that would normally uh be not a very
06:24 - good idea I mean if you're making an RPD
06:28 - you cannot get through that without
06:29 - using inheritance so um now inside of
06:33 - our main method um we can start
06:35 - instantiating these derived classes so
06:37 - now we have if we go back to our graphic
06:39 - we have a base class called animal we
06:41 - have a derived class called cat and
06:44 - another one called Dog and now we'll
06:46 - instance these and uh we'll see what we
06:49 - can do with that so let's start out by
06:51 - making a dark and we're going to call
06:54 - this one Spidey and we're going to set
06:56 - him to a new dark and and uh first off
07:00 - let's set his name whoops spotty do name
07:05 - equal to
07:07 - spotty we'll set his
07:09 - age equal to
07:12 - um what are we going to do uh we going
07:15 - to say 4 years old we're going to set
07:18 - his uh happiness to
07:22 - 0.8 and uh next up we can access the
07:26 - values that are specific to this derived
07:28 - instance so the spot count and you will
07:31 - notice that we of course can't access
07:33 - the cuteness because that's um specific
07:36 - to the cat but we can access the spot
07:38 - count and we're going to set that equal
07:40 - to 25 hence his name and uh finally
07:44 - we're going to say spotty dot oops spoty
07:49 - uh Dot and uh we are going to print his
07:53 - base and uh then we can maybe uh make
07:57 - him B
08:00 - so if we just test this and uh hit play
08:02 - here whoops uh of course we need and
08:05 - it's just going to say that this is
08:06 - going to always have a defa value of
08:08 - zero because we're not using it and
08:10 - that's only a warning so we can just
08:12 - ignore it for now we're going to be
08:13 - using it in a sec uh so for now we can
08:15 - just do console. re key here
08:21 - um so it won't quit immediately so let's
08:24 - try that again and you can see that it
08:26 - prints out the name spdy he's 4 years
08:28 - old he has happiness of 0.8 and he can
08:32 - say
08:33 - w great so uh let's see let's say that
08:37 - inside of this derived class we want to
08:40 - access one of the parameters inside of
08:42 - the animal class so basically we can do
08:45 - this by simply typing and this is very
08:49 - easy by simply
08:51 - typing happiness and now we've accessed
08:54 - that parameter so it's simply going to
08:56 - do that for us but let's say we had a a
09:00 - value of Happiness here and a value of
09:02 - Happiness here I don't know why you
09:04 - would do this uh but sometimes you need
09:07 - to do this um if especially uh this can
09:10 - be custom if you're uh passing in some
09:13 - um arguments and you want to set the
09:15 - Base Class through the derived class uh
09:18 - then this can be a normal thing but
09:19 - basically if you have uh happiness here
09:22 - and happiness here uh you can make sure
09:24 - that this is the one you're accessing uh
09:26 - by doing
09:28 - base. happiness
09:30 - and some people like to do this even
09:31 - though it's not necessary to be um
09:35 - very um to be very thorough and and show
09:40 - that uh the uh value that we accessing
09:43 - is not actually a member of this class
09:45 - but of the uh Base Class so if we uh say
09:50 - that we want our happiness to uh go up
09:52 - with 0.1 every time we woof uh then uh
09:56 - we can simply do that there and then we
09:57 - can uh print out
09:59 - down here um we can print out uh his
10:04 - new
10:08 - happiness and that's going to be equal
10:10 - to
10:12 - spy. happiness now that we've backed so
10:15 - let's try that again and you can see
10:18 - that his happiness goes up with uh
10:21 - 0.1 so we've accessed and changed a
10:25 - value in the um Base Class so let's just
10:30 - for uh uh just to show you this uh let's
10:34 - make an instance of the cat also and we
10:37 - simply going to call this uh
10:39 - Heisenberg and we equal going to equal
10:42 - him to a new cat we are then going to
10:44 - say
10:47 - Heisenberg name equals
10:51 - Heisenberg uh Heisenberg do AG equals
10:55 - and we are going to make him old so
10:56 - we're going to do 13 uh his happiness
11:00 - is
11:01 - unfortunately uh not too
11:04 - high it's an old Grumpy Cat and uh his
11:09 - acuteness uh is not too high either so
11:12 - that's maybe why he's grumpy and uh then
11:15 - we're going to print out the
11:19 - base and uh we're going to make him do a
11:24 - meow cool and uh in uh in between these
11:27 - I simply want to make some space here so
11:30 - let's just make an empty line
11:33 - there awesome and and this Arrow should
11:35 - go away when we run and you can see now
11:38 - that it first prints out all the data
11:40 - about the U the dog and then it goes on
11:43 - to print out data about the cat so that
11:46 - was basically it for this tutorial it
11:49 - was kind of a quick one compared to some
11:51 - of the others but I thought that I would
11:52 - really just encapsulate this in uh one
11:55 - single video I mean there's much more to
11:58 - talk about when it comes to inheritance
12:00 - and how it can be used uh especially
12:03 - when it comes to um kind of protection
12:06 - levels um but I think that this is what
12:09 - we're going to stick for uh stick to for
12:12 - now I I don't think U we're going to
12:14 - need to kind of delve into more until we
12:17 - get a little more advanced um with uh C
12:21 - so um that's basically it for this video
12:23 - I will just quickly uh go through
12:25 - exactly what happen what is happening
12:28 - here if you haven't got it uh if if you
12:30 - feel like you've got this covered uh you
12:32 - can just skip this so basically what
12:35 - we're doing is we're creating the Base
12:37 - Class called animal we are giving him
12:40 - some different properties and we are
12:41 - making sure that these are public so
12:43 - that we can access them we also making a
12:46 - method called print base that will just
12:48 - print all of the values in our base
12:50 - class then we are creating a class
12:52 - called Dark that derives from the animal
12:55 - based class this basically takes all of
12:59 - these
13:00 - parameters and copies them in at the top
13:03 - here including our
13:07 - method and what this will allow us to do
13:09 - is simply add on to these values a spot
13:13 - count and a method for backing and we do
13:15 - the same with the cad it basically deres
13:18 - from this class meaning that all of
13:20 - these are just copied in here and uh
13:24 - then we add on acuteness level and a
13:26 - method for saying meow then down here
13:29 - here we creating an instance of the dog
13:32 - we are naming this spoty we're filling
13:34 - out a bunch of different parameters for
13:36 - spotty we then printing out his space we
13:39 - are backing and then we are uh checking
13:43 - our new happiness so when we run this uh
13:47 - uh you can see the result of that and
13:50 - that's basically all there is to it so
13:52 - that was it for today's video I hope you
13:55 - enjoyed it and I'll see you in the next
13:56 - one
14:03 - [Music]