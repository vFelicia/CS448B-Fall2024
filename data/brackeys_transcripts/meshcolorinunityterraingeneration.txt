00:00 - in this video we'll have a look at
00:01 - adding textures to a mesh as well as how
00:03 - you can generate custom colors to fit
00:05 - the layout of your terrain but first
00:07 - this video is sponsored by Jason Wyman
00:09 - he's the creator of the amazing unity 3d
00:11 - master class which takes you all the way
00:13 - from the very fundamentals of game dev
00:16 - to using unity on a professional level
00:18 - it will teach you the principles of
00:20 - solid game architecture and how to build
00:22 - a variety of game types on top of that
00:24 - you will also get familiar with packages
00:25 - like cinema Sheen timeline and Pro
00:28 - builder what makes this course unique is
00:29 - that you get to work along with other
00:31 - students and get live one-on-one help
00:33 - from Jason himself it's also possible to
00:35 - extend the course to learn vr
00:37 - development and he even offers one full
00:39 - year money-back guarantee and then you
00:41 - will have made three games and have the
00:43 - opportunity to customize and show off
00:44 - your work to the class so if you want to
00:46 - become a pro unity developer I
00:48 - definitely recommend you click the link
00:49 - in the description and get started also
00:51 - special thanks to make a game and your
00:53 - kiln in Co Harmon true VR systems
00:55 - extended Blair and infinity PPR for
00:58 - their support on patreon now at the end
01:00 - of the last video we talked about adding
01:01 - multiple layers of noise to make it
01:03 - terrain more interesting I've gone ahead
01:05 - and added two more layers of noise on
01:07 - top of the one we created in the last
01:08 - video and as you can see the result is
01:10 - already so much nicer in fact it's such
01:12 - a common technique to use that it has a
01:14 - named octaves definitely let us know if
01:17 - you want to learn more about how octaves
01:18 - work and how to apply them to your
01:20 - terrain until then you can check out the
01:22 - links in the description to learn more
01:23 - for now let's add some color to a
01:25 - terrain so let's start by adding a
01:26 - custom material to our mesh to do this
01:29 - let's select our mesh generator and here
01:31 - you can see that there's a slot for a
01:32 - material so under a project we can go
01:34 - create material and let's call it
01:37 - something like terrain material I mean
01:39 - then select Amish generator and drag
01:41 - that right in and now when we hit play
01:44 - we should be able to control our terrain
01:46 - using this material we can for example
01:48 - tinned it to add color or control the
01:51 - metallic Ness and smoothness of the
01:54 - surface pretty cool we can also try and
01:56 - add a texture so I've gone ahead and
01:58 - imported the practice logo and if we
02:01 - drag this into the albedo Channel we can
02:03 - see that something weird is happening
02:05 - here the logo itself is nowhere to be
02:07 - seen but the environment does take on
02:09 - this blue color from the texture the
02:11 - reason why this is happening is that we
02:13 - haven't
02:13 - our terrain how to display textures in
02:16 - other words in order to show a texture
02:18 - we first need to define the UVs uvs is a
02:21 - set of data that tells our object how to
02:23 - display textures the job of UVs
02:26 - is to map point on our object two points
02:28 - on a 2d image for 3d objects like a cube
02:31 - we refer to the process of making the
02:33 - UVs as unwrapping because we essentially
02:36 - unwrapping our object - laid out on a 2d
02:38 - plane however in our case this process
02:40 - is super easy
02:42 - since our grid is already created flat
02:44 - so all we need to do is go through each
02:46 - of our vertices and map it to our image
02:48 - since UV coordinates go between 0 and 1
02:52 - we can't just use the position of the
02:54 - vertex directly we need to first take
02:56 - the X and divide it by the X size and
02:58 - then take the Z and divide it by the Z
03:01 - size the result is a value between 0 and
03:03 - 1 for the coordinates that's all you v's
03:06 - so to do this in code we can open up our
03:08 - mesh generator script and at the top
03:11 - here we now need another array so this
03:13 - is going to be an array of vector twos
03:16 - which is going to store our UVs
03:18 - we can then scroll down to where we
03:20 - create our shape and in here you can see
03:22 - first we create our vertices then we
03:25 - create our triangles and then down here
03:27 - we can define our UVs now since we are
03:30 - going to have a UV for each vertex we
03:33 - can go ahead and set our UVs array equal
03:36 - to a new vector to array and then simply
03:38 - give it the same size as our vertex
03:40 - array so we'll use vertices dot length
03:43 - and because it has the same size we can
03:45 - also use the same for loop so let's just
03:48 - copy the for loop for our vertices and
03:50 - paste it down here and of course we need
03:52 - to remove the code regarding our
03:53 - vertices and now we have two for loops
03:55 - that will go through every UV in our
03:58 - array and with this we can simply go UVs
04:00 - and then I equals a new vector - and
04:04 - instead of just inputting X and Z here
04:07 - this is where we're going to do the
04:08 - calculation we talked about so we're
04:09 - going to go X divided by X size
04:12 - comma Z divided by Z size and since of
04:16 - these variables are currently integers
04:18 - we need to explicitly say that we want
04:20 - this calculation to use decimal points
04:22 - so at the beginning of each calculation
04:23 - here we'll write float in parentheses in
04:26 - order to specify
04:27 - that we want to cast this value into a
04:29 - float and that is actually all we need
04:31 - to do to define our UVs now we just need
04:34 - to assign them to our mesh so in our
04:36 - update mesh method let go mesh dot UV
04:39 - equals R UVs array and if we save that
04:43 - and go into unity and play voila
04:46 - right away we can see that the brackets
04:48 - logo is indeed showing up awesome and we
04:52 - can of course go in and play around with
04:53 - all the material settings and it's gonna
04:55 - work just fine or we can change the
04:56 - texture to something else the
04:58 - possibilities are pretty much endless
04:59 - however this is fine if you want to
05:01 - overlay some kind of image on top of
05:03 - your mesh but most of the time when
05:05 - doing stuff like procedural terrain you
05:07 - probably want to create colors that vary
05:09 - depending on the layout of your terrain
05:12 - luckily we can do this fairly easily
05:13 - using vertex colors just like we can
05:16 - define UVs for each of our vertices we
05:19 - can also define a color the cool thing
05:21 - about this is that we basically loop
05:23 - over all of our vertices and depending
05:26 - on the height we assign it a color to
05:28 - define what colors to display at what
05:30 - Heights we can use a gradient gradients
05:33 - in unity are super handy they allow us
05:35 - to input a number between 0 & 1 and it
05:38 - will then return the color at that point
05:40 - the color data is then stored in the
05:42 - mesh and can be displayed using a vertex
05:45 - shader so to do this in our code will go
05:48 - into our script let's go to the top and
05:50 - instead of defining a vector 2 for the
05:52 - UVs let's define a color array for all
05:56 - of our vertex colors then if we go into
05:58 - our create shape method we're currently
06:00 - setting the UVs to be equal to the same
06:02 - length as the vertex array and in fact
06:05 - we want to do the same thing for colors
06:07 - again this is because we have one color
06:09 - for each vertex of course we need to
06:11 - change the type from vector to 2 color
06:13 - but that's pretty much it now to loop
06:15 - over all the colors we can use the same
06:17 - two for loops we just need to get rid of
06:19 - this piece of code and we can then set
06:21 - colors I equal to and this is where we
06:25 - want to specify our gradient so let's go
06:28 - to the top and let's create a public
06:30 - gradient and let's just call it gradient
06:33 - then back in our for loop we can simply
06:35 - set the color equal to gradient dot
06:38 - evaluate and this then takes in the high
06:41 - of the terrain at this point and we can
06:43 - of course get that from the vertex erase
06:45 - let's create a float height let's set it
06:48 - equal to vertices and we'll go i dot y
06:52 - that's the height of this particular
06:54 - vertices so we can simply pass in this
06:56 - height to our gradient function and that
06:58 - should in theory work however there's
07:00 - one issue with this and I'm gonna show
07:03 - you that in a sec for now we can just go
07:05 - down here and just like we set our UV so
07:07 - we can go mesh dot colors and set it
07:10 - equal to our colors array so if we now
07:12 - save this code and go into unity we can
07:14 - see that we now have this gradient and
07:16 - if we click on it it brings up the
07:18 - gradient editor here we can define all
07:20 - bunch of colors along the height of our
07:22 - terrain I'm just gonna make it go from
07:24 - black to white for now and if we were to
07:27 - hit play right now you can see that
07:28 - there are definitely a few problems the
07:31 - first one is that we are not currently
07:32 - using a shade a that is able to display
07:35 - these vertex colors this is just a
07:37 - standard shader that is meant to use
07:39 - with textures the other problem is the
07:42 - height of our terrain if we go in and
07:44 - look at our terrain here first of all
07:46 - it's floating above our grid and second
07:49 - of all it's really really large so the
07:52 - height of our terrain here might vary
07:54 - between say 3 and 20 and this is not
07:57 - really good when working with gradients
07:59 - because when inputting a value on a
08:02 - gradient it needs to go between 0 and 1
08:05 - so how do we take this height variable
08:06 - that is currently all over the place and
08:08 - normalize it to make it only go between
08:10 - 0 and 1 well we can actually do that
08:13 - fairly easily but we need to know the
08:15 - minimum and maximum height of our
08:17 - terrain so let's go to the top here and
08:19 - let's create two private variables the
08:21 - first one is going to be a float with
08:23 - the minimum terrain height and the
08:25 - second one is going to be another float
08:27 - with the maximum terrain height then
08:29 - when we loop over all of our vertices we
08:31 - can add a few lines first we'll say if
08:34 - the y-coordinate is greater than or
08:37 - maximum terrain height well then we want
08:39 - to set our maximum terrain height equal
08:41 - to that y-coordinate and similarly if Y
08:44 - is less than or minimum terrain height
08:47 - well then we can set minimum terrain
08:48 - height equal to Y so this will make sure
08:51 - that as we go over our terrain and
08:53 - generate all the various
08:54 - it's gonna also update on max and
08:57 - minimum terrain height and so when we
08:59 - generate our colors we can now normalize
09:01 - this height to do this we'll use
09:03 - something called math dot inverse loop
09:06 - and this first takes in our minimum
09:08 - height then our maximum height and then
09:11 - finally it takes in the height of the
09:13 - terrain at this point so vertices i dot
09:16 - y and this is in fact going to give us a
09:18 - value between zero and one pretty cool
09:21 - so we can now save that and go into
09:23 - unity however when we play it's still
09:25 - not going to look very cool because
09:27 - again our shader isn't displaying these
09:29 - vertex colors so now we're basically
09:30 - left with three options we'd either go
09:33 - online and find a vertex shader to use
09:35 - we could also write one ourselves but
09:37 - shady writing can be a bit confusing so
09:39 - luckily there's a third option and that
09:41 - is using shader graph so those of you
09:44 - who haven't used that shader graph is a
09:45 - visual tool for creating shaders and we
09:48 - can really really really easily use it
09:51 - to set up a vertex shader so do you
09:53 - share the graph we need to set up our
09:54 - project to use the lightweight render
09:56 - pipeline to do this we'll go window and
09:58 - select package manager will then go undo
10:00 - all and somewhere in here we can find
10:03 - the lightweight render pipeline make
10:05 - sure to install it if it isn't already
10:07 - once that's done we can go to our
10:09 - project and create a rendering
10:11 - lightweight pipeline asset and we'll
10:14 - just hit enter here there's some
10:16 - settings here you can adjust for the
10:17 - graphics of your game however I'm just
10:18 - going to leave mine as default we then
10:20 - go edit project settings graphics and
10:23 - drag in this lightweight asset and now
10:26 - our project is using the lightweight
10:27 - render pipeline it's that simple
10:29 - we can now go window package manager and
10:31 - if you don't already see shader graph
10:33 - here you can find it under all and
10:35 - simply install it and that's it we can
10:37 - now go under our project and hit create
10:39 - go onto a shader and let's select PBR
10:41 - graph let's name it the terrain shader
10:44 - and let's double click it to open it up
10:46 - in shader graph and we don't need this
10:47 - to be full screen so I'm just gonna dark
10:49 - it here by the scene view and as you can
10:51 - see we currently have one node here
10:52 - that's the PBR master node and this is
10:54 - where we can change properties for our
10:56 - material and one of these properties is
10:58 - the albedo in other words the basic
11:00 - color of an object so all we need to do
11:02 - is add a node that will get our vertex
11:05 - color and then link it to the albedo
11:08 - let's hit space let's search for vertex
11:10 - color and here we go
11:12 - that's a vertex color node it's simply
11:14 - going to get the color of the current
11:15 - vertex when then take the color of that
11:17 - vertex and drag it into the albedo and
11:20 - that's pretty much it I'm not kidding
11:23 - that's all we need to do we can now hit
11:25 - save acid go to our terrain material and
11:27 - make sure to select this shaders that
11:29 - we'll go and select our terrain shader
11:31 - and now when we play foam a gradient is
11:34 - now showing on our mesh in fact because
11:36 - I'm currently updating the terrain every
11:38 - frame I can adjust it in real time so
11:40 - I'm gonna go into the gradient here and
11:42 - we could try and make it look a bit like
11:44 - a real terrain so at the bottom here
11:46 - we'll add some water so some kind of
11:49 - light blue here then we'll add some
11:52 - grass so some kind of a bit darker green
11:55 - we can maybe add some mountain like rock
11:58 - formation so we'll add a darker gray and
12:02 - we can add some more dark gray something
12:04 - like that and then we can have snow on
12:06 - top there we go and it kind of already
12:08 - looks like a terrain of course you can
12:10 - play around with this as much as you'd
12:12 - like in order to create different
12:13 - looking landscapes but you can see just
12:16 - how easy it is to start doing this on
12:18 - your own and if you find something you
12:20 - like we can simply right-click on the
12:21 - mesh generator hit copy component stop
12:23 - playing and hit paste component values
12:25 - and now we've saved it in our gradient
12:28 - amazing that's pretty much it for this
12:30 - video if you enjoyed it make sure to
12:31 - subscribe and bring that notification
12:33 - post so you don't miss the next one also
12:35 - don't forget to check out the unity3d
12:36 - master class simply click the link in
12:38 - the description to get started on that
12:40 - thanks for watching and I will see you
12:41 - in the next video thanks to the awesome
12:43 - patreon supporters who donated in
12:45 - October and especially thanks to Andrew
12:47 - Carnegie art Arman true VR systems
12:49 - simmer IO extended player cheetah 3d
12:51 - Jeff Johnson infinity PBR Sybok mommy
12:54 - Dennis Sullivan Chris Sheriff Abdullah
12:56 - pizza Murphy thanks along clear the set
12:58 - Vincent and skewer shreya ste turkeys
13:00 - Kirk Ronan Tim a polar bear
13:02 - Bruins cat Noah Kiyosaki Gregory Pierce
13:04 - Larry tweed James Rogers Rathbun
13:06 - pecan Vania Erasmus Robert pond Kerr
13:09 - Jackson James P Anthony patio Swedish
13:11 - key and a breeze see you guys rock