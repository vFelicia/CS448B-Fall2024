00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to video number 15 in the how to
00:06 - program in c-sharp course in today's
00:09 - video we're going to take a look at
00:10 - generics first off we'll talk about what
00:13 - generics are creating generic classes
00:16 - and methods and using some of the stuff
00:19 - inside the system that collections that
00:21 - generic namespace so generics might
00:24 - sound really frightening but they are
00:26 - extremely useful for a bunch of things
00:29 - when programming so I'm kind of excited
00:31 - to show you this and also I want to
00:34 - mention that the reason why it's been so
00:36 - long since the last video is because
00:38 - I've started a new series that I'm
00:40 - really enjoying and it's called making a
00:42 - multiplayer FPS in unity so if you have
00:45 - ever used unity or been wanting to make
00:48 - a multiplayer game or an FPS of course
00:50 - well then I definitely suggest to check
00:52 - that out by clicking the screen now and
00:54 - if I if not we'll then enjoy today's
00:57 - video so the very concept of generic
01:00 - classes and methods is actually fairly
01:03 - simple but it can sound complex at times
01:06 - so the idea is that when we don't know
01:09 - the type of our object we use generics
01:12 - so it allows us to handle objects of an
01:14 - unknown datatype so if we start here by
01:17 - Anik making an example out of a generic
01:20 - class so let's start by making a class
01:22 - giving it a name and I'm going to call
01:26 - this a key value pair and the reason why
01:29 - is in programming it's often useful to
01:32 - group together two pieces of data I mean
01:35 - this can be used for a number of
01:38 - different things for example if we
01:40 - wanted to create this idea of a library
01:43 - that its associated a name of a book
01:46 - with a certain book well then we will
01:50 - create a key value pair where the key
01:52 - was the name of the book and the value
01:55 - was the actual book we could also have
01:58 - this idea of a price list for example
02:01 - where we had the name of the product
02:03 - associated with the price of the product
02:06 - so we can do many things and store them
02:09 - in these tuples so now that we know what
02:13 - a key
02:13 - your Paris let's try using generics to
02:16 - model this sounding code so normally
02:19 - when making a class we would go in here
02:21 - and we would open and close some curly
02:22 - brackets that's also what we want to do
02:25 - but right after the name we want to add
02:27 - on a bit of code and then we start by
02:30 - open and closing some of these less-than
02:34 - and greater-than signs and in here we
02:37 - want to give it give the computer a name
02:42 - for the types that we are going to be
02:45 - using in the class so we often start by
02:48 - calling these t sometimes you will see
02:51 - in programming that it's only called T
02:54 - but I like to kind of infer some kind of
02:57 - usage so we'll call this one the T key
03:01 - and this one the T value so these are
03:05 - now the types so whatever we pass in
03:08 - let's say that we wanted to have the the
03:10 - name of the product and the price well
03:13 - then we would pass in the a string here
03:16 - and T key would now be a string and T
03:19 - value would be an integer because we are
03:21 - a float value if you wanted to have
03:23 - decimal places in your price so these
03:26 - are now types not values then what we
03:30 - can do in here is we can basically treat
03:32 - these as any other data type so we can
03:35 - make a public T key and we can call this
03:40 - key and this is now just a variable of
03:42 - type T key meaning whatever we passed in
03:45 - and the value we are going to assign it
03:48 - in a second and then we'll have a T
03:50 - value which we are going to call value
03:52 - so I know this maybe feels a bit
03:55 - abstract but just how useful it is you
03:58 - are going to realize in a moment so now
04:01 - we can go ahead and create a constructor
04:03 - for this key value pair class and we do
04:07 - this as we would with any other class so
04:10 - we make a public whoops
04:11 - key value pair and let's give it some
04:15 - arguments so we can maybe get a T key
04:19 - and we'll call this key and a T value
04:22 - and we'll call this underscore value
04:26 - and then we will simply assign key or ET
04:32 - key to key and set value equal to
04:35 - underscore value there we go so this
04:39 - looks like any other class except the
04:42 - types that we are using either general
04:45 - or generic types up here okay so now
04:50 - that we have this idea of a key value
04:52 - pair and this is able to store data
04:53 - already we need to kind of visualize
04:56 - this in some way so let's create a
04:58 - method that will print out the data in
05:01 - at this class so let's simply make a
05:03 - print method and in order to do this we
05:06 - just make a public void I'm going to
05:08 - call this print and it is simply going
05:12 - to say a console dot write line and then
05:17 - it will do key I are not underscore key
05:21 - but key dot to string and we can maybe
05:25 - just say that this is the key plus and
05:32 - copy that down here and this is now the
05:37 - value and this is the value dot to
05:43 - string so this will print out the key
05:45 - and the value
05:47 - all right so now that we've modeled out
05:51 - this class let's try using it so we
05:54 - could go ahead and create a new key
05:57 - value pair and for this we of course
05:58 - just give it the type and then the name
06:01 - and I want to call this a meaning and I
06:04 - want to set it oh yeah of course this is
06:06 - a generic so we have to put in and the
06:08 - data type that we want to be using and
06:10 - here first one to give it a string and
06:13 - then an integer so this is kind of the
06:16 - syntax for doing that we are saying that
06:19 - T key should be the string type and T
06:22 - value should be the integer type then we
06:25 - name the variable as with any other and
06:28 - we'll name this meaning and we'll set it
06:31 - equal to a new key value pair and again
06:34 - we have to pass in string and integer
06:37 - nothing's changed
06:39 - and then we want to pass in the key and
06:42 - the value into the constructor here so
06:44 - the key is going to be life and the
06:48 - value is going to be 42 so now that we
06:52 - cuz when we've closed that off
06:54 - we should be able to run the program but
06:56 - of course we want to print this out
06:58 - let's do meaning dot print and now when
07:03 - we run this hit play you can see it
07:05 - prints out that the key was life and the
07:07 - value was 42 and this is all stored in
07:10 - one very one variable called meaning so
07:14 - now we've created a data type that's
07:16 - much more complex than a sim
07:19 - single standard data type like stringer
07:22 - int we've actually paired these two
07:24 - together and created a way for us to
07:27 - print them out so that's a fairly simple
07:32 - use of a generic type but something that
07:36 - is used all the time I mean if we go up
07:40 - here and say using system dot
07:43 - collections dot generic will then
07:48 - include included in the c-sharp language
07:51 - is this collections just dot generic
07:55 - name space and this hosts a bunch of
07:58 - kind of utility classes and methods for
08:03 - handling on generic things and one of
08:06 - these is the list that's basically a
08:11 - resizable array as we've seen but it
08:14 - also has another class called the
08:19 - dictionary and the dictionary is
08:21 - basically a list of key value pairs I
08:24 - mean if we have this idea of a
08:26 - dictionary where we have a whole book
08:29 - where we associate a word with the
08:32 - description of the word well then you
08:35 - can see that we have in a list of a
08:38 - bunch of key value pairs so that's
08:41 - basically what a dictionary is and if we
08:43 - wanted to go ahead and use this you can
08:45 - see just how similarity it is to what we
08:48 - just created I mean we can go ahead and
08:50 - the new dictionary here and we can say
08:52 - that we want this to be a string and
08:55 - integer again and we can call this
08:59 - prices set it equal to a new dictionary
09:03 - and we would again give it a string and
09:06 - an integer and in here we would give it
09:10 - the capacity how many elements are in
09:13 - can be in the dictionary so we would
09:16 - maybe set this equal to five and then we
09:19 - can simply go ahead and say prices dot
09:22 - add and we could add a key value pair so
09:25 - we give it the key here and that could
09:27 - maybe be a watermelon pretty sure that's
09:32 - in one word right and then the value
09:36 - could maybe be a five we could also add
09:39 - a car and this is pretty much any car
09:45 - apparently and the value for this is
09:48 - going to be one hundred thousand and we
09:54 - could of course just go on here we could
09:56 - remove elements and all that and we can
09:59 - print them out so you can see that this
10:01 - has exactly the same principle applied
10:04 - here so now we can go ahead and maybe
10:06 - print out prices and then we'll take the
10:09 - first element here so I think we are
10:13 - able to just say console dot write line
10:18 - and then input prices at zero index
10:22 - fairly sure
10:23 - so nope we have to maybe do that to
10:27 - string still doesn't work so I'll just
10:32 - check for the way to do this okay so I
10:34 - was being stupid there it's apparently
10:36 - too late for me to do a video so the
10:39 - whole idea with the dictionary is of
10:40 - course you don't put in the index of the
10:43 - value but instead we give it the key so
10:47 - we would put in watermelon here and we
10:50 - should get the value five so that's kind
10:53 - of the whole point so if we remove that
10:56 - and go like that we should be able to
10:59 - get the value of five then you can see
11:01 - that we indeed
11:03 - we indeed did and we could put in the
11:05 - value car and we get the value of
11:07 - 100,000 there and so you can see just
11:11 - how useful that actually is good
11:14 - so let's now remove this system data
11:16 - collection stud generic namespace and
11:19 - let's take a look at the generic method
11:22 - so if we wanted to go ahead and create a
11:25 - generic method inside a non-generic
11:27 - class we could make a non-generic class
11:31 - here called maybe our utility and this
11:34 - is something I do for a lot of the
11:36 - applications that I write is I create
11:39 - some kind of utility class that hosts a
11:42 - bunch of generic methods for doing
11:44 - things that I often do especially
11:48 - because sometimes I like to model out
11:50 - the way of handling handling this data
11:54 - myself instead of using the collections
11:57 - just that generic namespace because that
12:00 - can sometimes act funny and it's better
12:03 - if you know exactly what it's doing so
12:05 - inside of this on utility class let's
12:08 - create a method called compare values
12:11 - and that will basically check if two
12:13 - values of unknown types are equal so
12:17 - let's create a public void and the
12:22 - method here or a pool of course public
12:25 - static bold let's make that static and
12:28 - we'll call this compare values and the
12:33 - first type is just going to be type one
12:36 - and the second one we're going to call T
12:39 - two just like that and we're going to
12:42 - take use these two types as arguments so
12:48 - in here we're going to have an argument
12:50 - of type t1 and we're going to call this
12:54 - value one and an argument of T type 2 or
12:58 - t2 and we're going to call this value
13:00 - two so now we can pass in two values
13:04 - with different or the same data types
13:08 - and then we can compare them so we can
13:11 - simply return and then we can check so
13:14 - we can say value 1 dot
13:17 - cause value too and we don't need to
13:21 - cast these objects in any way we don't
13:24 - need to generalize them into an object
13:26 - or anything like that we simply say that
13:30 - we this could be an integer a string it
13:32 - could be a custom class it could be
13:34 - anything and it will check its value up
13:37 - against this one so and it will be
13:39 - stored in these two variables so it will
13:43 - simply then take the value 1 use the
13:46 - equals method to see if it's equal to
13:49 - value 2 if it is it will return true if
13:52 - not it will return false so let's try
13:55 - that so console dot write line and
14:00 - inside of this will simply call utility
14:03 - dot compare value or maybe compare
14:07 - values there we go and you would think
14:11 - that you needed to go ahead and put in
14:13 - string and int here or whatever but
14:16 - actually you can exclude this and it
14:18 - will infer the types upon the usage so
14:22 - if we could actually just go ahead ahead
14:24 - and write 10 and 3 here and it will work
14:29 - you can see that it gives us no errors
14:31 - and when we play here it says false if I
14:35 - change this to 10 it is going to say
14:39 - true and you can see I can put in the a
14:42 - boolean value there and it's of course
14:44 - going to say false I could also put in a
14:47 - string here and it's still going to say
14:50 - false but it doesn't give me an error if
14:53 - I then put in another string here that
14:55 - is different it's still going to say
14:57 - false until it is exactly the same so we
15:01 - have hello and hello here and now if it
15:04 - says true and we could of course expand
15:07 - upon this create another method that
15:09 - will compare types so we could make a
15:12 - public static pool here that instead of
15:14 - comparing the value simply check if the
15:16 - two values we put in are of the same
15:19 - data type so we have the t1 and t2 here
15:23 - and it's going to take a little call
15:27 - these type 1 and type 2
15:30 - and it's going to return and now we can
15:34 - simply take the tie off type one could
15:40 - go ahead and do it like that or we could
15:42 - simply use the t1 and t2 so we don't
15:47 - actually need to do any values in here
15:52 - if we don't want to we can simply use
15:53 - those but I'm going to go ahead and say
15:56 - type of type 1 just to make this very
16:03 - explicit dot equals and then type of
16:09 - type 2 so it will simply take the type
16:16 - of type 1 which is of course t1 and see
16:19 - if it is the same as t2 so I think that
16:26 - should do it
16:28 - nope already define some Emma code
16:33 - compare values okay that's because we
16:35 - need to rename this to compare types and
16:38 - let's see if we are error-free we are
16:41 - not the terminate could not be found
16:43 - are you missing a I oh of course we need
16:46 - to put in t1 there and t2 there I think
16:52 - what is going on t1 2 2 like this okay
17:01 - so this is the way and then we do
17:03 - console dot write line utility and dot
17:09 - compare types yeah there we go and then
17:13 - we simply check if let's say hello it's
17:20 - the same as 10 so that's the string and
17:23 - an integer and now when we hit play here
17:27 - it's expecting a parenthesis of course
17:32 - and it has it now you can see it of
17:35 - course says false but if I go in and
17:37 - write hello here it's going to say true
17:41 - and the cool thing is that if I now
17:44 - change the
17:44 - value here it's still going to say true
17:47 - because it's no longer comparing the
17:49 - value it's simply comparing the type so
17:54 - that is kind of a way to think about
17:57 - generics and some pretty useful use
18:01 - cases both for the generic class and the
18:06 - generic method and if you want to not
18:09 - maybe not jump right into modeling your
18:12 - own classes and methods using generics
18:14 - you should definitely get familiar with
18:17 - a lot of the stuff inside of the system
18:21 - tech collections that generic namespace
18:24 - I mean there are a bunch of useful
18:27 - things in there I mean if we just take a
18:30 - look at it here and we can simply do
18:33 - generic OOP collections so we have the
18:38 - dictionary we have the list we have the
18:43 - maybe I should just do this so you can
18:47 - see that it's actually there so we have
18:49 - the list we also have the stack and a
18:54 - bunch of others so definitely play
18:57 - around with that look them up try and
18:59 - use this them in your program and maybe
19:02 - even try adding your own so that was
19:05 - kind of it for this video I hope you
19:07 - enjoyed it and I'll see you in the next
19:09 - one