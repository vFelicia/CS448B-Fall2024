00:00 - so I really liked articles and I used to
00:02 - think that a thousand particles were fun
00:04 - but then I tried 1 million and it's
00:06 - about a thousand times more fun and with
00:08 - unities visual effect graph having this
00:11 - many particles on screen at once is no
00:13 - longer a problem the reason for this is
00:15 - that VFX graph creates particles that
00:17 - are simulated on the GPU this is unlike
00:20 - the standard shuriken particle system
00:22 - where particles are simulated on the CPU
00:24 - and because doing calculations on the
00:26 - GPU is so much faster we can create much
00:28 - more complex systems with a huge amount
00:31 - of particles on screen the drawbacks of
00:33 - this is that because it's simulated on
00:35 - the GPU it doesn't work with the
00:36 - underlying physics system there are of
00:38 - course ways to cheat this but in general
00:40 - if you want your particles to interact
00:42 - with your game world consider using
00:44 - these shuriken particle system another
00:46 - thing that makes the effects graph
00:47 - extremely powerful is that it's built as
00:49 - a fully node-based toll this means that
00:51 - similar to shader graph we can quickly
00:53 - add and chained together nodes to change
00:55 - the behavior and appearance of our
00:57 - particles so in this video we'll get
00:59 - started using the visual effect graph to
01:01 - create cool-looking particle systems
01:02 - also this video is sponsored by unity
01:04 - and with that let's create some
01:06 - particles so the first thing we want to
01:08 - do is make sure that we're running unity
01:09 - 2000 18.3 or later also our project
01:12 - needs to be using the High Definition
01:14 - render pipeline and before we can
01:16 - actually start using the visual effect
01:17 - graph we need to install it through the
01:19 - package manager so let's go to your
01:21 - window and open up the package manager
01:23 - make sure to go under all packages and
01:25 - let's find the visual effect graph here
01:28 - we can hit install and unity is now
01:30 - going to import the effects graph into
01:32 - our project and once that's done we also
01:34 - want to make sure that we are using the
01:37 - newest version of the HD render pipeline
01:39 - so I'm going to go ahead and update that
01:41 - as well and we are now ready to start
01:43 - using visual effect graph in our project
01:45 - so let's close down the package manager
01:47 - and let's try creating a new graph to do
01:50 - this we'll go to the project panel hit
01:51 - create we'll go under visual effects and
01:54 - select visual effect graph and let's
01:56 - just call it call effect and to actually
01:59 - add this effect to our scene we can
02:01 - simply drag it from the project into the
02:03 - hierarchy and it is going to create an
02:05 - empty object with the name of our effect
02:07 - and on this object is going to be a
02:09 - visual effect component that has a
02:11 - reference to this cool effect as
02:13 - right away we can see particles in our
02:16 - scene now to start editing this effect
02:18 - all we need to do is double click it and
02:21 - it's going to open up in its own
02:22 - separate window and as with any other
02:24 - window in unity we can of course dark
02:26 - this anywhere in the UI so I'm gonna
02:29 - dock it to the side here and make a bit
02:31 - of room for it now if you've ever used
02:32 - shader graph you'll immediately notice
02:34 - quite a few similar looking things we
02:37 - have the blackboard here for parameters
02:39 - and we have this huge open space where
02:41 - we can add notes and navigating around
02:43 - works in just the same way as shader
02:45 - graph we can use middle mouse button to
02:47 - drag and do the same thing with alt and
02:49 - then left-click we can scroll to zoom
02:52 - and if there's ever something that we
02:53 - want to focus on we can always select it
02:55 - and hit F or hit a to show all now what
02:59 - we see here is the structure of a basic
03:01 - particle system it contains a chain of
03:04 - contexts where each context is
03:06 - responsible for one aspect of the system
03:08 - let's just quickly go through these to
03:10 - make sure we understand how each context
03:12 - effects our particles so at the top of
03:14 - the list here we have spawn this context
03:17 - is fairly simple it's where we define
03:19 - when to create particles and how many
03:21 - next one is initialized here we set up
03:23 - the particles starting values we can
03:26 - choose stuff like where will the
03:27 - particle start how long is it going to
03:29 - live and what color does it spawn with
03:31 - the next one is update here we ask what
03:34 - happens to the particle over time this
03:36 - is where we would apply incremental
03:38 - forces or noise to the particle and
03:40 - finally we have the output in other
03:43 - words what will each particle look like
03:45 - how will it be rendered here we can
03:47 - control things like the size and color
03:49 - of each particle and we Neve inhabit its
03:52 - lifetime
03:52 - now the boxes inside of these contexts
03:55 - are called
03:56 - blocks they are small chunks of features
03:59 - that can be added to a context to do a
04:01 - specific task take for example the set
04:04 - velocity random block inside of our
04:06 - initialize context this gives each
04:08 - particle a random velocity between a
04:10 - minimum and maximum value we can tweak
04:13 - this to change the behavior or simply
04:15 - remove it and it will no longer affect
04:17 - our system let's for example change this
04:19 - to spread out evenly in all directions
04:20 - so let go - 1 - 1 on the X - 1 - 1 on
04:24 - the Y a - 1 - 1 on the
04:27 - and we see that our particles are now
04:29 - travelling evenly in all directions if
04:31 - we simply remove it and also disable our
04:34 - gizmos here we can see that our
04:36 - particles are now all just staying at
04:38 - the same point let's undo that by
04:40 - hitting ctrl Z we can always rearrange
04:42 - bugs to control which are applied first
04:45 - and some blocks like this one will even
04:47 - work in multiple contexts if for example
04:50 - we move it to the update context the
04:52 - particles are going to change direction
04:54 - every frame which gives this jittery
04:57 - look I'm just gonna go ahead and drag it
05:00 - back let's also set the minimum Y
05:02 - velocity to point two again now creating
05:05 - a new block is actually super simple we
05:07 - simply hover over the context where we
05:09 - want to create it and hit space and here
05:11 - we have some different categories for
05:13 - the types of blocks that we can create
05:15 - and the cool thing here is that this
05:16 - menu is context aware so it's only going
05:18 - to present you with the options that
05:20 - actually make sense for the given
05:22 - context in my case here I'd like to add
05:24 - gravity to our particles so I'm just
05:26 - going to go ahead and search for it and
05:27 - indeed we have one called gravity force
05:29 - and as you can see as soon as we add
05:31 - this block our particles start falling
05:33 - because of gravity you'll also notice
05:35 - that in the top right corner we're
05:37 - currently set to auto compile this means
05:39 - that our effect is set to automatically
05:41 - update when we make changes so let's try
05:44 - turning this off and one thing you'll
05:46 - notice is that this doesn't actually
05:47 - apply to the values that we input in our
05:50 - blocks if we change the force to minus
05:52 - two it's going to update right away even
05:54 - though auto compile is turned off
05:55 - however if we go ahead and actually
05:57 - remove a block this isn't going to
06:00 - update because it needs to recompile to
06:03 - reflect this change to do this manually
06:04 - we can always hit compile or simply turn
06:07 - auto compile back on now what we're
06:09 - using here is an extremely simple
06:11 - particle system with a very low amount
06:13 - of particles and as we talked about one
06:15 - of the awesome things about running
06:17 - these systems on the GPU is that we can
06:19 - handle a lot of particles at once
06:22 - in fact let's just try going to the top
06:24 - here and increasing our spawn rate to
06:25 - say 10,000 you'll notice that nothing
06:28 - changes and that's because we also have
06:30 - to increase our capacity which is the
06:32 - maximum amount of particles allowed at
06:34 - any given time let's set this to 20,000
06:37 - and there we go we're now creating a
06:40 - huge amount of particles at once now
06:42 - with this many particles it might be
06:44 - hard to see each individual one so let's
06:46 - go to the bottom here and let's go into
06:48 - the set size of a lifetime block here we
06:52 - have a graph where we can set the size
06:54 - of our particle during its lifetime
06:55 - let's still have it start at a fairly
06:57 - low value but let's decrease the maximum
07:00 - value and now we really start to see
07:02 - just how many particles are actually in
07:04 - here so you've probably already start to
07:07 - see just how efficiently the effects
07:08 - graph can handle large particle systems
07:10 - now unity has also included a few
07:13 - templates to help you get started with
07:14 - the system you would like to create
07:16 - that's it a to show current system let's
07:18 - select all of it and hit delete let's
07:20 - then hit space and let's go under the
07:22 - system category here we have four
07:25 - different options the empty particle
07:26 - system which is going to create a
07:28 - particle system without any blocks in it
07:31 - however it has all the same contexts the
07:33 - spawn initialized update and output you
07:36 - can also create a simple particle system
07:38 - this was the one that we started with
07:40 - the last two ones are the simple static
07:42 - mesh which is going to create just that
07:44 - it's going to display a 3d mesh as a
07:47 - particle
07:47 - and finally this simple swarm particle
07:50 - system I think this template is the
07:52 - perfect example to show that by just
07:54 - adding a few blocks to these context we
07:56 - can create really interesting effects I
07:58 - mean this system is much larger than
08:00 - this symbol particle system however the
08:02 - real power of the effects graph is that
08:05 - we can create and chain together nodes
08:06 - that edit properties on these blocks if
08:09 - we go to the top of our system under the
08:11 - spawn context we could for example
08:13 - change the spawn rate of our system over
08:15 - time using a sine wave and doing this is
08:18 - super simple we simply go to the left
08:20 - here hit space and we can create a sine
08:23 - wave node this is going to plug right
08:26 - into our spawn rate it's going to have a
08:28 - frequency of 1 and it's going to go
08:30 - between 0 and 25,000 now using the input
08:34 - variable we can actually shift through
08:37 - this sine wave and we can of course have
08:39 - the input variable change over time now
08:42 - let's drag out from our input and
08:43 - release and let's search for time and
08:46 - let's use the one called
08:48 - total time and there we go we are now
08:50 - using time to shift the input of our
08:53 - sine wave and based on the output of the
08:55 - sine wave we're changing a spawn rate to
08:57 - be between 0 and 25,000 so we can see it
09:00 - pulsating in the scene view which is
09:03 - just super cool and this is just by
09:05 - adding two symbol notes and just to
09:07 - really signify this effect that's go
09:09 - down under initialize and set the
09:11 - lifetime random to go between 0.5 and
09:13 - two really cool now if you're using a
09:16 - lot of different notes it might be a
09:17 - good idea to add notes to allow yourself
09:20 - to quickly figure out what's happening
09:22 - at a specific place to do this we can
09:24 - always right-click and create a sticky
09:26 - note we change the size of it and give
09:28 - it a title say sine wave as well as a
09:31 - description
09:32 - finally something that is really handy
09:35 - is the ability to expose parameters to
09:37 - be edited from the inspector this is
09:39 - especially great if you're working with
09:40 - really complicated effects or would like
09:42 - to easily be able to add variations to
09:44 - the same effect without having to create
09:46 - a new graph each time now creating a new
09:49 - parameter is super easy simply hit the
09:51 - plus sign on the blackboard and we can
09:53 - choose from a bunch of different types
09:55 - I'm gonna create a simple float value
09:57 - and let's use this parameter to control
09:59 - the frequency of our sine wave let's
10:02 - first of all rename it by right clicking
10:04 - and hitting rename and let's call it
10:05 - frequency let's then set the default
10:08 - value to one and drag it in
10:10 - we then link up this parameter to the
10:13 - frequency on a sine wave and we can now
10:15 - control this frequency from our
10:17 - blackboard so we could set it to four to
10:19 - make it pulsate really quickly or 20.1
10:22 - to make that go real slow I'm just going
10:25 - to default it back to 1 and right now we
10:26 - can only access and change this
10:28 - parameter from within the graph so if we
10:31 - want to be able to change it in the
10:32 - inspector we need to expose it so let's
10:35 - hit the exposed check box and that's all
10:38 - we need to do let's go to a graph and
10:40 - save it and close down this window and
10:42 - over here we can now see that we have a
10:44 - parameter called frequency and if we
10:47 - click this check box here we can
10:49 - override it with our own value so let's
10:51 - set this one to two and let's also
10:53 - duplicate the effect and move it over
10:56 - and let's set this one to 0.5 and we see
11:00 - that using this same graph we have now
11:02 - created two different effects and you
11:05 - can even override parameters through
11:07 - script to really help integrate your
11:08 - effects with your game so for now switch
11:11 - to the game view we can see our V
11:13 - effects in all their glory yay that's
11:15 - pretty much it for this video if you
11:17 - enjoyed it make sure to subscribe so you
11:18 - don't miss a future one nowadays of
11:20 - course so much more that you can do with
11:21 - the effects graph this video is barely
11:23 - scratching the surface of the tip of the
11:25 - iceberg so if you'd like to see more and
11:27 - how you can use the effects graph to
11:28 - create cool-looking effects definitely
11:30 - let us know in the comments also as you
11:32 - might know we recently launched line of
11:34 - code which is a clothing store for game
11:36 - developers go check it out at line of
11:38 - code IO if you haven't already on that
11:40 - thanks for watching and I will see you
11:41 - in the next video thanks of the awesome
11:44 - patreon supporters who donated in
11:45 - member and special thanks to make a gain
11:47 - and Yochanan Enco heart Arman to VR
11:50 - systems extend the player infinity PBR
11:52 - Sybok mummy didn't Sullivan chef
11:54 - Abdullah Chris mr. Murphy
11:55 - thanks along Luna set fits and fensky wa
11:57 - shrah st ronan bruins cat no Kiyosaki
12:00 - Gregory Pierce Mary tweet kill Swedish
12:02 - key tips rogers repair car Jackson /
12:05 - companion Robert bond Erasmus Anthony
12:07 - patent of breezy James P Chima pulled
12:09 - over John Shannon Alex Jerrod Sookie
12:11 - Travis Dylan Rudy in Toronto and Caston
12:14 - Sue Ellen you guys Rock