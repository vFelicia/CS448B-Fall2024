00:00 - I think one of the most important
00:01 - features in unity is being able to
00:02 - extend the editor it's something that
00:04 - people often forget about especially
00:06 - beginners but being able to create your
00:07 - own tools to make game development
00:08 - easier it can just save you so much time
00:11 - this video will be an introduction to
00:12 - creating editor scripts in unity we
00:14 - create our own editor window and talk
00:15 - about how you can use it also huge
00:17 - thanks to Commander Firestone 38 for his
00:19 - Support over on patreon if you want to
00:21 - support the videos yourself you can do
00:22 - so at patreon.com Brees so let's get
00:24 - started to create an editor window we
00:26 - need to start in the same way when
00:27 - adding scripts to our game so let's go
00:29 - to the project panel and hit create and
00:31 - let's select C script let's call this
00:33 - script example window let's hit enter
00:37 - and let's double click it to open it up
00:38 - in visual studio now first we want to
00:40 - delete the two using tags at the top
00:42 - here we won't be needing those and we
00:44 - can also go ahead and delete our two
00:45 - methods now normally when we codeing
00:47 - Unity everything that we need to use is
00:49 - inside of the unity engine namespace but
00:52 - when programming for the editor we have
00:53 - a separate namespace let's write using
00:56 - Unity editor and of course we don't want
00:59 - to put the script on a game object
01:01 - instead we want Unity to recognize it as
01:03 - an editor script to do that instead of
01:05 - writing mono Behavior we write editor
01:08 - window so now we should have all the
01:10 - functionality needed available to us
01:12 - what we then do is create a function
01:14 - we'll write void and this function is
01:17 - called on GUI we don't need any
01:19 - arguments here and let's just open and
01:21 - close our curly brackets so those of you
01:23 - who've been using Unity before the new
01:25 - guy system in 4.3 you might recognize
01:28 - this function that's because the on GUI
01:30 - method was used to draw UI in the game
01:32 - as well but now we pretty much only use
01:34 - it in the editor this is where we'll put
01:36 - all of our window code so if we want to
01:38 - add buttons to our window editable
01:40 - Fields labels and even some
01:43 - functionality we'll put it in here so
01:45 - this is our window code but first of
01:47 - course we need to display the window to
01:50 - do that we create a separate function
01:51 - now this needs to be a public static
01:54 - void and let's call it show window again
01:57 - it won't take in any arguments and in
01:59 - here we want one of two things to happen
02:01 - if the window isn't already shown on the
02:03 - screen we want to create one and if it
02:05 - is we just want to focus on it but we
02:07 - don't actually need to check for this
02:08 - sort of stuff ourselves if we write
02:10 - editor window. getet window this method
02:13 - will actually open up a window for us
02:15 - and make sure not to create another one
02:17 - if one is already open all we need to do
02:19 - is specify the type of the window and
02:21 - that's going to be our class name so in
02:23 - our case the type of window is going to
02:25 - be example window we can even go in here
02:27 - and give it a title if you don't specify
02:29 - title it's just going to use the class
02:30 - name which is fine but I just want to go
02:33 - ahead and shorten this to example note
02:35 - how it kind of Grays out the first part
02:37 - here that's because since we're deriving
02:39 - from editor window this function is
02:41 - available to us without needing to call
02:43 - the specific class and so we can
02:45 - actually just get rid of that so as you
02:47 - can see opening up a window is really
02:48 - easy but we're not currently calling
02:50 - this show window method anywhere so
02:52 - right now it's never going to get opened
02:54 - we could call this from another script
02:56 - or we could make a menu item that would
02:58 - call this method and there for show the
03:00 - window to do that we use a simple
03:02 - attribute attributes are used by using
03:04 - square brackets we then write menu item
03:07 - let open and close the parenthesis and
03:09 - here we simply write the item name we
03:11 - want ours to be under the window Tab and
03:14 - we want it to be called example so now
03:16 - when we save this head into Unity wait
03:19 - for it to load then go under window we
03:22 - can now see our example when we press
03:24 - this a new window called examle opens up
03:27 - and we can go ahead and dug this
03:29 - anywhere in our editor but currently the
03:31 - window is totally blank let's go ahead
03:33 - and add some stuff to it remember this
03:34 - is done inside of the enu method first
03:37 - of all we can add a label by going
03:39 - layout layout is a class that has
03:41 - function for all sorts of stuff like
03:42 - drawing buttons labels spaces Etc and
03:46 - the cool thing is that it will
03:47 - automatically lay out everything for us
03:49 - so if we now create a label we want the
03:52 - label to say something like this is a
03:54 - label and we can even give it a style so
03:57 - we can go in here and specify a editor
03:59 - Style dot let's just choose bold label
04:03 - now when we save this go into unity and
04:05 - wait for it to reload we can see that it
04:08 - says this is a label in a bold fund of
04:11 - course this is very static we can also
04:12 - add a text field here to do that we
04:15 - first want to create a variable that is
04:16 - going to store our text let's create a
04:18 - string I'm just going to call it my
04:20 - string and set it equal to hello world
04:24 - then in our on GUI method we write
04:27 - editor guy layout. Tex text field we
04:30 - then give the text field a label so that
04:33 - the user knows what to input here in our
04:35 - case we could put in something like name
04:37 - and we then feeded the variable that we
04:39 - want the text field to display in our
04:41 - case that's going to be my string and
04:43 - then finally of course we'll set my
04:46 - string equal to the result of this text
04:49 - field so that we're both displaying the
04:51 - string and updating it now you might
04:53 - notice that in one place here I'm using
04:55 - guy layout and in the other one I'm
04:57 - using editor guy layout well the
04:59 - distinction between between the two is
05:00 - actually really vague some functions are
05:02 - only in one class and only in the other
05:04 - and sometimes the same function will be
05:06 - in both but they will look different as
05:09 - a rule of thumb though we use edit a
05:11 - gooey layout whenever we want to edit
05:12 - fields and properties and we use gooey
05:15 - layout whenever we want to create labels
05:17 - spaces between properties and buttons
05:20 - but you really just have to get a feel
05:21 - of the two if you see the same function
05:23 - in both start by trying out the editor
05:25 -  layout after all it's made for this
05:27 - particular purpose so now when we save
05:29 - this head into Unity we can see that we
05:31 - have a field here called name that is
05:33 - currently set to hello world I'm going
05:35 - to set this to Dwayne Johnson just
05:38 - because you know he's cool so now we're
05:41 - going to add labels and Fields let's add
05:43 - a button to do that we write if
05:46 - layout. button and then we write the
05:48 - text for that button I'm just going to
05:50 - write press me we then open and close
05:53 - some curly brackets and everything in
05:55 - here will be called if our button is
05:57 - pressed so let's just throw a debug.
05:59 - dark statement here saying button was
06:02 - pressed let's save that go into Unity we
06:05 - can now see a button does appear called
06:07 - press me and when we press it button was
06:10 - pressed awesome but this is just showing
06:12 - off the technology let's try and apply
06:14 - this to a simple topic here I have three
06:16 - Primitives I have a cube a sphere and a
06:18 - capsule and each one of these objects
06:21 - also have a material which is currently
06:23 - just a simple standard Shader but
06:25 - they're all white say I had a ton of
06:28 - these objects and I wanted to be able to
06:30 - Simply select them and then color all of
06:32 - the selected objects to another color
06:35 - well we could go and edit a million
06:37 - materials and try and find all the
06:38 - matching ones or we could make an editor
06:41 - extension so in our example window let's
06:43 - go ahead and rename our example to
06:45 - colorizer let's do the same thing for
06:47 - our menu item colorizer let's delete our
06:50 - string and the text field for our string
06:53 - as well we can then change the label to
06:56 - color the selected objects then
06:59 - exclamation mark we then change the
07:01 - button to colorize instead of throwing
07:05 - out a debug.log what we want to go
07:07 - through and colorize stuff so let's just
07:09 - delete that for now of course we want to
07:11 - be able to specify a color so let's go
07:13 - to the top here and create a color and
07:16 - let's just call it color notice how this
07:18 - is the exact same process as when we
07:20 - were creating a editable string in our
07:23 - on go method after our label we can now
07:25 - go and call editor layout. color
07:29 - feed field again we want to give this a
07:31 - name we'll call it color and we want to
07:33 - give it a color to show which is going
07:34 - to be our color variable and of course
07:37 - we also want to set our color variable
07:39 - equal to the result of this color field
07:42 - let's just save to see if these changes
07:44 - are applied you can see how the title of
07:46 - my window didn't change immediately so
07:48 - let's just collapse that go window and
07:50 - now we have the colorizer and you can
07:52 - see that it's changed here as well and
07:54 - we have this color field here that we
07:56 - can edit in any way that we want but of
07:58 - course if we select a few objects here
08:00 - and hit colorize nothing currently
08:02 - happens so when we press the button we
08:04 - want to Loop through all of the
08:05 - currently selected objects to do that we
08:08 - use selection under the selection
08:10 - namespace we have stuff like the active
08:12 - game object whether or not the selection
08:14 - changed and most importantly we have a
08:16 - variable called game objects this is
08:18 - simply an array of game objects with all
08:21 - of the currently selected objects as it
08:23 - says here this also includes prefabs
08:26 - non-modifiable objects and so this
08:28 - includes pretty much everything for now
08:30 - we won't worry too much about that so
08:33 - now that we have a way to get all of the
08:34 - currently selected game objects we can
08:36 - Loop through it so let's create a for
08:38 - each Loop and for each game object and
08:41 - we'll call the game object we're
08:42 - currently looking at opj in our
08:46 - selection. game objects array well then
08:48 - we want to go ahead and set obj Dot and
08:51 - to access the color here we first need
08:52 - to get the renderer component so we go
08:54 - get component of type renderer and if we
08:58 - just go ahead and access the material
09:00 - here directly we might get a case where
09:02 - we have objects selected that don't have
09:04 - a renderer and so that would display an
09:06 - error let's instead store this in a
09:08 - temporary variable the variable is going
09:09 - to be of type renderer and let's just
09:12 - call it renderer with a non capital r
09:14 - then we can check if renderer is not
09:18 - equal to null so if we actually found a
09:20 - renderer on the object well then we can
09:22 - set renderer do shared material do color
09:26 - equal to our color variable and that's
09:29 - should actually be it so now for each
09:31 - object in our selected game objects we
09:34 - get the renderer and if it's not null
09:36 - well then we go ahead and change the
09:37 - color and of course all of this happens
09:39 - when we hit the colorized button to make
09:41 - this just a tiny bit cleano let's go
09:43 - ahead and cut our code and wrap this in
09:44 - a separate function called colorize and
09:47 - let's create that right here void
09:49 - colorize no arguments and then simply
09:52 - paste all that code in there editor
09:54 - scripts can get really long and weird so
09:56 - it's a good idea to separate it out in
09:58 - multiple functions let's now save this
10:00 - go into Unity try selecting say the cube
10:03 - and the sphere here and hitting colorize
10:06 - and there we go we can change to any
10:08 - color here and do any kind of selection
10:11 - and really easily we can colorize our
10:13 - game
10:15 - objects that's pretty much it for this
10:17 - video I have another video coming on the
10:19 - topic of extending the editor this one
10:21 - is going to be about custom inspectors
10:23 - which are just super useful so make sure
10:24 - to subscribe so you get notified when
10:26 - that comes out on that thanks for
10:27 - watching and I will see you in the next
10:29 - video thanks to all the awesome Patron
10:30 - supporters who donated in June and a
10:32 - special thanks to hen huun Commander
10:34 - Firestone 38 will go yesper mlon Thomas
10:37 - voley stone gamer cyu mommy Jason latio
10:40 - Derek Heir facal marifi and Peter lock
10:43 - if your name is not on the list I will
10:44 - make sure to includeed in videos later
10:46 - this month and the next month as well
10:48 - thanks a lot guys