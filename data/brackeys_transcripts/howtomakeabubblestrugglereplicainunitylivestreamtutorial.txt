00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:05 - this um video this is a live stream um
00:08 - on creating a um kind of uh Bubble
00:12 - Trouble bubble struggle uh replica
00:14 - inside of unity what we're going to be
00:16 - making is this and if we just hit play
00:19 - here I'm just going to show you how it
00:21 - works um we have U some character
00:23 - Movement we have a ball jumping around
00:25 - and when we hit that ball using this uh
00:28 - uh chain arrow shooty thing you can see
00:30 - that the ball splits into two and it
00:32 - will keep doing that until we get to the
00:34 - final stage which which is these little
00:37 - green ones and once we uh hit those and
00:39 - you can see if the ball hit us uh the
00:41 - level restarts and uh so the goal of the
00:45 - game is of course to clear out all of
00:47 - the balls without getting hit yourself
00:49 - and I'm really really bad at that that
00:52 - especially when uh streaming I just tend
00:54 - to crumble in terms of gameplay I would
00:56 - never be able to make it as a
00:58 - professional gamer so um but that's what
01:00 - we're going to be doing today so really
01:02 - exciting stuff and um yeah let's just go
01:05 - ahead and get started so let's begin by
01:07 - creating a new project inside of unity
01:09 - so let's go file new project and um I'm
01:13 - just going to be naming this something
01:15 - like bubble
01:17 - struggle uh
01:20 - replica
01:21 - and we can go and save it under my
01:24 - projects that's fine and we'll select 2D
01:27 - as a standard doesn't really matter and
01:29 - let's also create a project there and
01:31 - unity is just going to go ahead and
01:33 - create all of the necessary files um in
01:35 - order to um make the project run in the
01:39 - background and I'll have a sip of water
01:41 - while we wait for that and again I can
01:43 - see in the chat uh this will be on
01:45 - YouTube so don't worry about that and
01:47 - later we'll do a Q&A so that's super uh
01:50 - that's going to be super fun so we have
01:53 - this clear Unity Pro uh project here and
01:56 - what I want to do is Begin by just
01:59 - creating ourselves a level so let's
02:01 - start by saving the scene control s or
02:03 - command s if you're on the Mac let's
02:05 - just save this as main level and let's
02:08 - also kind of sketch out what we need to
02:10 - have in here we need a player we need
02:12 - some balls jumping around and we need
02:14 - some walls to kind of encapsulate our
02:18 - level and maybe some kind of background
02:20 - as well so in terms of uh creating the
02:24 - player and the walls and the background
02:26 - I want to use very very simple Sprites
02:28 - for this actually just want to use
02:30 - squares which are white so that we can
02:33 - tint them inside of unity and we could
02:35 - just go inside of Photoshop go on
02:37 - Google search for white square there's
02:39 - so much there but I've prepared some
02:41 - here um just in case so we have a square
02:44 - here and again it's just a 2X two wide
02:48 - rectangle really really easy um and in
02:51 - case it's too hard for you to create a
02:54 - 2X two rectangle you can always get this
02:56 - off GitHub later so let's drag this
02:58 - inside of the
03:00 - project panel and then directly inside
03:02 - of the hierarchy and we now have it in
03:04 - our scene and this is going to act as
03:06 - our wall so let's just go ahead and
03:07 - rename this to wall let's also give this
03:10 - a um box collider
03:13 - 2D and um we don't want that to be
03:15 - trigger but I do actually want to U mark
03:18 - it as a rigid body 2D which is going to
03:21 - be kinematic and the reason for that is
03:24 - uh later when we handle Collision
03:26 - detection it's going to be really nice
03:28 - to have these marked as rigid body Tod
03:30 - because then we don't need to do it on
03:32 - our chain and it will make things easier
03:34 - but we'll talk about that later for now
03:36 - just add this component and follow along
03:39 - with me and uh the next thing is of
03:41 - course uh scaling this so I want to give
03:43 - it a y position of negative let's say
03:47 - 4.5 something like that just make sure
03:49 - it's in within the confines of our
03:51 - screen and I also want to scale this up
03:54 - so we can scale it up to maybe something
03:56 - like 75 is going to look quite okay I
03:59 - think think yeah I think that looks just
04:01 - fine so we can take this wall here and
04:04 - we can turn it into a preab down here
04:07 - and that means that we can just easily
04:08 - duplicate it and we can uh move this one
04:11 - up so we're just going to do p positive
04:13 - 4.5 and we can um maybe rename these so
04:17 - this first one is going to be wallor
04:20 - bottom could also call it ground if you
04:22 - wanted to we're going to have wallor
04:25 - top and we can duplicate this wall
04:28 - wallor top and we can rotate it by 90Â°
04:32 - on the Z AIS so just flip it over so uh
04:35 - make it into a sidew wall and we want to
04:37 - zero the Y and we can drag it over on
04:40 - the X and I don't know exactly how much
04:42 - we're going to need this um to be but I
04:44 - think something like negative six is
04:47 - going to look fine yeah that looks just
04:49 - fine and then we can uh change the scale
04:51 - a bit here so maybe bump it down to I
04:55 - don't know exactly how much I think uh
04:58 - 57
05:00 - might be good actually not totally so we
05:03 - might need to do .5 that's too much
05:06 - that's kind of annoying uh we can do 57
05:09 - on that and we can uh take the other
05:11 - ones here the top and the bottom and we
05:13 - can maybe adjust
05:16 - those let's see um if we just need to
05:19 - drag those over there so that's 76 for
05:23 - those and that's a whole number that's a
05:24 - lot better something like that that
05:26 - looks perfect cool so we can take this
05:29 - side wall now and we can rename that to
05:32 - wall left we can duplicate it rename it
05:35 - to wall right and then uh flip that exp
05:39 - position so we're just going to make
05:41 - this from a -6 to a positive 6 so now
05:44 - you can see we have the frame for a
05:47 - level and let's just see how the chat is
05:49 - doing you guys are being immature again
05:53 - I'm just going to ignore that and then
05:56 - um we can maybe drag in a background
05:58 - here as well so let's take our Square
06:00 - drag it in as a new thing um we don't
06:03 - want to have this with any ciers or
06:05 - anything like that this just needs to be
06:07 - a Sprite renderer and we can go ahead
06:08 - and add a sorting layer here uh so that
06:11 - we will draw it behind everything else
06:14 - and that means that the layer needs to
06:16 - be drawn or placed on top because then
06:19 - it will be drawn first and then
06:20 - everything else will be placed on top of
06:22 - that so on the background that's awesome
06:25 - and then we can um Mark that as a
06:27 - background we can also change the color
06:29 - we'll do that in a sec first let's scale
06:31 - this up so let's just have a look at it
06:33 - in here see we can bump up the X whoops
06:37 - that's too much what was it I believe it
06:40 - was 76 awesome that looks good and on
06:43 - the Y here it was 65 what was it it was
06:48 - 6 57 Jesus all right
06:51 - 57 uh there awesome and now when we
06:55 - change the color of this of course it's
06:57 - not going to blend together so that's
06:58 - perfect so we can do just make it kind
07:00 - of a darker gray and we can take our
07:04 - walls as well and change the color of
07:06 - those and I'm just going to change the
07:07 - color on the prefab to affect all of
07:09 - them directly uh so I wanted to do kind
07:12 - of a
07:14 - greenish uh feel for this one because we
07:17 - haven't done much with green maybe even
07:19 - bluish actually I want it to be kind of
07:22 - green and um we can take our main camera
07:25 - and change the background to something
07:26 - that looks like it so let's just first
07:28 - off color pick this one and you can
07:30 - totally use this I mean that looks just
07:32 - fine but I want it to be a bit darker
07:35 - and less saturated just to make the uh
07:38 - actual level part stand out and give it
07:40 - this nice Edge so that already looks
07:44 - quite decent and I mean uh currently we
07:46 - don't have any gameplay in here but that
07:48 - is really our environment sort to say
07:51 - we've pretty much done everything we
07:52 - need to do for that so let's just rename
07:55 - this one to background let's also clean
07:58 - it up by creating a new mty object and
08:00 - that's just control shift n or command
08:02 - shift n to create a new empty object
08:04 - let's reset the transform and let's call
08:06 - this one walls and we can take all of
08:09 - our four walls and drag those uh to be a
08:12 - child of the walls object just to clean
08:14 - things up in the hierarchy just simply
08:17 - looks
08:18 - nicer awesome uh everything else yes
08:21 - this is a 2d game and um I am going to
08:24 - be using the unity physics engine
08:27 - definitely and uh yeah
08:30 - awesome we can just go ahead and
08:31 - continue so the next thing that we need
08:33 - in here is of course some player
08:35 - controls so let's just go in here and I
08:38 - actually want to duplicate this Square
08:40 - to create a new one and you might ask
08:42 - why don't we just drag in the Square
08:44 - here and use that to create our player
08:46 - and the reason why is I want this Square
08:49 - to have a pivot in the very center I
08:52 - want it to be anchored in the center of
08:54 - the square however for a player who's
08:56 - going to be standing on the ground I
08:58 - would like him to have a pivot at the
09:01 - very foot of the character so that when
09:04 - we zero him out or at least Place him on
09:07 - here that's what the coordinate system
09:10 - is going to be oriented towards and
09:12 - that's going to help us later so let's
09:14 - just go ahead and rename this one to
09:17 - player as player square or something
09:19 - let's just do player and um in here we
09:22 - simply want to change the perod from
09:24 - Center to bottom that's bottom cender
09:27 - and we can hit apply and that should
09:29 - pretty much be it so now when we go in
09:31 - here you can see that our anchor is
09:32 - indeed down there so that's perfect and
09:35 - we definitely want to scale him up he's
09:37 - very tiny so let's do something like
09:40 - four on the Y and two on the X that's
09:42 - going to look just fine we can rename
09:45 - him player and we can also definitely
09:49 - drag him down on the Y here we want to
09:51 - place him just on
09:54 - top something like that and he has is
09:57 - actually going to have gravity so we can
09:58 - place him with a bit of um distance here
10:02 - and then he will fall onto the ground
10:04 - once we have played so let's now go in
10:06 - here add a box collider
10:08 - 2D and that is just going to Auto scale
10:11 - to fit I believe Yep looks good it might
10:14 - be hard to see on the live stream but I
10:15 - can definitely see a green box there and
10:19 - um we shouldn't need to edit that might
10:21 - need to strink it a little bit but that
10:23 - shouldn't be too much maybe let's just
10:25 - do that right away
10:27 - so15 on the X five on the Y I just think
10:31 - that Unity tends to exaggerate their
10:32 - collisions and it looks better if you
10:34 - shrink the colliders a tiny bit and uh
10:37 - next up we need a rigid body so let's do
10:40 - a rigid body 2D and someone asked what
10:43 - the difficulty rating of this tutorial
10:45 - is I would say it's somewhere between a
10:48 - beginner and intermediate mostly
10:50 - beginner really um we are going to be
10:52 - doing some C scripting of course so if
10:55 - that really scares you um you'll just
10:58 - have to of follow along and and take my
11:01 - explanation for what it is and then you
11:02 - can copy my code and get it to work that
11:04 - way but what we are going to be
11:06 - programming isn't super Advanced we're
11:08 - going to be instantiating we're going to
11:10 - be uh changing some positions adding a
11:12 - bit of force uh doing a bit with
11:14 - triggers and that's pretty much it so
11:17 - yeah so now we have our rigid uh body 2D
11:20 - on here and uh let's see we can pretty
11:23 - much leave all of the different values
11:26 - exactly as is and we do actually want it
11:28 - to be dynamic as well sometimes with
11:30 - player characters uh you want them to
11:32 - use kinematic so you have full control
11:34 - over their movement but we wanted to
11:35 - react to our colliders on the side walls
11:38 - and therefore I'll just leave it as
11:39 - Dynamic one thing that we do want to do
11:41 - is add some constraints because we don't
11:43 - want to be able to rotate on the Z in
11:46 - that case our player would be able to
11:48 - fall over which would look super weird
11:51 - and uh you can also freeze the position
11:53 - on the y- axis but I'm not going to be
11:55 - doing that because you might want to
11:57 - have your player on different levels I
11:58 - mean you can have say platforms where
12:01 - he's able to move as well and from where
12:03 - he can shoot his Arrow thingy and that
12:06 - should work just fine and I know that
12:09 - the bubble strule games that I played
12:11 - utilize that in order to create smaller
12:13 - distances where the uh balls jump um to
12:18 - give the impression that the balls jump
12:19 - faster because there's not as much room
12:22 - and you you get scared and it's it's a
12:24 - whole crazy thing so yeah so U we'll put
12:27 - a constraint on only the rot
12:30 - so now when we hit play we should see
12:33 - that our play Just falls to the ground
12:35 - Awesome everything looks good but we
12:36 - can't move him in any way so let's go in
12:39 - here and add a tiny bit of movement to
12:42 - our player in order to do that let's
12:44 - select our player hit add component and
12:47 - let's create a new script called let's
12:49 - just call it player actually and some of
12:52 - you guys requested some cat action and
12:54 - the reason for my typo there was that
12:56 - one of them just laid his head upon the
13:00 - keyboard because he fell asleep so I
13:02 - just moved in over here and maybe when
13:04 - he wakes up we can get him on camera so
13:07 - um awesome so we have our player here
13:10 - and um let's double click on the player
13:13 - script and let's have that open up in
13:15 - visual studio and I can see that I
13:18 - currently have two instances that's
13:19 - something that happens um when you
13:22 - create a new project sometimes Visual
13:24 - Studio won't open that it's going to
13:26 - open it in a new instance so just yeah
13:28 - remove the other one there and we're not
13:30 - going to be using system. collections or
13:33 - collections. generic so we can just
13:35 - remove those we're actually only going
13:37 - to be using Unity engine and the first
13:39 - thing that I want to do is create a v uh
13:42 - variable of type float that is going to
13:44 - store our players speed so let's just do
13:47 - a speed here and defold it to something
13:50 - like four in the original games that I
13:52 - played the speed of the player was
13:55 - actually quite low and that definitely
13:57 - made the games more difficult because
13:59 - you had to time it better because you
14:00 - weren't able to escape out of really
14:02 - tricky situations you simply weren't
14:04 - fast enough but I think the game just
14:07 - feels in place nicer when you have a
14:10 - higher speed I thought the old speed
14:12 - limit was a bit frustrating so I'm just
14:14 - going to put it at four which is a bit
14:15 - higher but you can definitely go in and
14:17 - edit that uh to suit your
14:21 - needs um cool so I don't think we need
14:24 - to do anything in the start method
14:26 - really but we do need a reference to a
14:29 - rigid body and we can just uh do that by
14:32 - making a public rigid body 2D variable
14:35 - and calling it something like RB and
14:37 - then when we save that head into Unity
14:39 - here um that gives us a slot where we
14:43 - can then drag in that rig body TD so
14:46 - that now means that we have a reference
14:49 - to this component that allows us to
14:50 - change things on this component and
14:52 - utilize its functions by simply
14:55 - referencing the RB name that we just
14:57 - declared and we could call this anything
14:59 - just don't call it rigid body with non-
15:01 - capital letters because that is a Unity
15:03 - shortcut that means something else and
15:05 - then you're going to have a conflict and
15:07 - it's going to throw a weird warning and
15:09 - just stay away from that and call it
15:11 - something like RB or anything
15:14 - really and uh yeah cool and I'm just
15:18 - going to check chat here to make sure
15:20 - that I'm not going totally um off on a
15:23 - tangent or anything um yeah everything
15:28 - looks good cool
15:29 - so uh now inside of the update method
15:31 - what we will do is we will uh gather
15:34 - some input and again we've done this
15:36 - before in previous live streams uh Unity
15:39 - has a really really easy way of getting
15:41 - some input and that's using
15:44 - input.getaxis raw and this basically
15:47 - allows us to specify whether or not we
15:49 - want to get input for the horizontal or
15:52 - the vertical axis and uh if we just
15:55 - write horizontal here and it needs to be
15:57 - in quotes this here if we just write
15:59 - this it's basically going to give us a
16:01 - value between Min -1 and 1 and if it's
16:05 - zero that's if the user hasn't pressed
16:08 - any buttons If it's minus one that is if
16:11 - the user has pressed to the left and
16:13 - that means either the a key if you're
16:16 - using vast the left Arrow key or using a
16:19 - controller that he points to the left
16:21 - and it's going to be one if he points to
16:23 - the right so if you press this D right
16:25 - arrow or a controller where he points to
16:28 - the right so this here is a value that
16:30 - represents in which direction our player
16:33 - wants to move so all we need to do is
16:35 - now store this in some variable and then
16:37 - we can use it to add forces or move that
16:41 - player so let's store it in a private
16:43 - float variable and let's call this one
16:46 - movement and we can set it equal to Zer
16:49 - by default then in here we simply set
16:52 - movement equal to input. get access raw
16:55 - but again this is going to be always
16:56 - between minus one and 1 so if we want to
16:59 - control the speed at which our player
17:00 - moves we're going to have to multiply
17:02 - that with our speed value so now if we U
17:05 - multiply this and uh the user wants to
17:07 - go to the left it's going to be minus 4
17:09 - if it wants to go to the right it's
17:11 - going to be four because that speed
17:12 - value is four and 1 * 4 is four cool
17:16 - then in the separate Loop here and this
17:19 - is um why okay so we need to write fixed
17:23 - update here and the reason why we're not
17:26 - doing the actual movement inside of the
17:28 - update I mean the logic is fine every
17:30 - frame we want to move a little bit so
17:32 - let's just move the player inside the
17:33 - update is that unity's physics system
17:36 - really likes if movement is done in
17:38 - fixed update because the physics system
17:40 - itself uses that to do all of its
17:43 - calculations so that's why we gather all
17:45 - of our input inside of the update so
17:47 - that it feels really responsive and then
17:50 - we do the actual movement the actual
17:52 - moving of our character inside of the
17:54 - fixed update because that's where Unity
17:56 - wants to calculate physics so in here
17:58 - here uh we're going to say something
18:01 - like RB which is our rigid body do move
18:04 - position and this is a function again
18:06 - that moves the rigid body to a certain
18:09 - position and the position is given by
18:11 - two values which means a vector two that
18:14 - has an xaxis and a y AIS an X position
18:17 - and a y
18:18 - position so the two values that we want
18:21 - to give aren't just Zer and two we want
18:25 - to give our current position plus our
18:28 - movement
18:29 - so in that case what we'll do um is kind
18:33 - of there's several ways that you can do
18:35 - this actually I just want to go rb.
18:38 - position and then we can add onto that
18:42 - our um Vector
18:44 - 2 do WR multiplied with movement so
18:49 - basically what we're doing here and this
18:51 - is the exact same as actually I should
18:53 - maybe be a bit more clear here this is
18:55 - the exact same thing as saying rb.
18:57 - position plus vector two and then as the
19:00 - first coordinate we specify movement and
19:03 - then
19:04 - zero so what we're saying is we want to
19:06 - move to a new position and the position
19:08 - that we want to move to is our current
19:10 - position plus a bit of movement on the X
19:13 - and no movement on the Y so that's
19:16 - currently what we're doing and um if you
19:18 - think this is a bit confusing that's
19:20 - because this is about vectors and um
19:22 - vectors are a whole mathematical concept
19:25 - that you kind of had to have to get in
19:27 - order to fully understand what's going
19:28 - on here so if you want to learn more
19:30 - about that I actually have a video uh in
19:32 - the game math Theory course on vectors I
19:36 - believe it was the first video actually
19:38 - so if you just go to the YouTube channel
19:39 - youtube.com/ Brees you can go in there
19:42 - find the video gamean Theory forces and
19:45 - learn a lot more about how this actually
19:48 - works but for now you can just copy
19:49 - after me and the final thing that we
19:51 - need to do is actually not use movement
19:53 - but multipli it with time. fix Delta
19:56 - time as well and that's because
19:59 - this um fixed update here runs at a
20:02 - fixed interval and we just multiply with
20:05 - that interval in order to um have it be
20:09 - consistent on different systems so no
20:11 - matter the rate that this uh function
20:14 - runs at we're going to have the same
20:16 - amount of movement so it's just
20:17 - something that you're going to have to
20:18 - do and you do that all the time if you
20:20 - want to do movement over time awesome I
20:23 - believe that was pretty much all we
20:24 - needed to do for movement so now we
20:26 - should be able to go into Unity here and
20:29 - we should be able to uh hit play and
20:33 - let's just move to the left here you can
20:34 - see that works and to the right that's
20:36 - awesome and I can both use a and d and
20:38 - left and right on the arrow keys and
20:41 - when we hit a wall you can see we bump
20:43 - into it and it doesn't work so we do
20:45 - actually have Collision here but it's in
20:47 - a very controlled uh way and you can see
20:50 - just how Snappy the movement is I think
20:52 - that feels really really
20:54 - good cool so that was play movement and
20:57 - I'm going to take a SI of water
20:59 - here and I'm also just going to have a
21:02 - look in uh the
21:05 - chat let's see
21:07 - here um yeah someone says if um we want
21:11 - this to be smooth instead of really
21:12 - really Snappy Movement we can go in here
21:15 - and remove the raw part so just get axis
21:18 - will um also give you a value between
21:20 - minus one and one but it will smooth it
21:22 - out so that when you press a key you can
21:24 - see that it slowly
21:26 - starts and um in interpolates as it's
21:29 - called Uh to the desired Direction
21:33 - that's also uh super nice for a lot of
21:35 - games but I am an old school guy and I
21:38 - like the raw motion uh so we're just
21:40 - going to do that uh for this game at
21:42 - least but again you're totally fine just
21:45 - changing that and then continuing with
21:47 - the uh
21:48 - tutorial um so yeah cool so the next
21:54 - thing that we want to look at is having
21:56 - some bouncy balls in here so let's go
21:59 - ahead and create those so again I'm
22:00 - going to be using a very very simple
22:03 - Sprite that I just created in Photoshop
22:05 - I basically just took the circle tool
22:07 - created a circle exported it and that's
22:10 - it and if we um go out to my desktop
22:13 - here you can see that I've prepared it
22:15 - here it's just a circle don't mind that
22:17 - it's in Photoshop format it could be U
22:19 - PNG as well just make sure that it has
22:22 - transparency and um all we want to do
22:25 - here is maybe change the pixels per unit
22:27 - to something higher just to make it a
22:28 - bit smaller and I also want to change
22:31 - the max size to 64 I believe I exported
22:34 - at a 128 and that's just too high we
22:37 - don't need it so let's now drag this
22:39 - inside of our game and we can see that
22:41 - that already looks uh really good in
22:43 - terms of size for kind of a mediumsized
22:46 - ball so we'll call this one ball and
22:50 - we'll go in here and um maybe play
22:53 - around with this a bit so I want the
22:55 - color of this ball to be yellow this
22:58 - variation can be uh can be yellow I
23:00 - think it's going to look good inside the
23:03 - game yeah that looks just fine and um we
23:07 - want to of course add some properties to
23:08 - this so the first thing is a collider
23:10 - and I think we want to use a circle
23:12 - collider 2D and if we focus on it you
23:15 - can see that the radius fits exactly the
23:17 - way that it should but I do actually
23:19 - want to decrease this a tiny bit again
23:21 - again I think it just produces better
23:23 - results so let's just try that and if it
23:26 - looks like it's clipping through the
23:27 - ground um of of course we'll just bump
23:30 - that back up so um now that we have our
23:33 - Circle collider we also want a rigid
23:35 - body component again rigid body 2D of
23:37 - course and uh all we really need to do
23:40 - here is nothing I believe this should
23:43 - work just fine at least for now I'll
23:46 - show you a glitch with this so if we
23:48 - just go ahead and hit the uh hit play
23:50 - now you can see that it's already
23:52 - working however it's not really bouncing
23:54 - anywhere so what we need to do is add
23:56 - bounciness to the ball and we do that by
23:59 - adding a physics material that defines
24:01 - how um the collider and the rigid body
24:05 - acts in physics space that has two
24:07 - properties um it has bounciness and
24:10 - friction so let's go and create that
24:13 - create a new physics material 2D let's
24:16 - just call this one ball we'll select the
24:19 - ball and drag in our new physics 2D
24:21 - material there we go and that sits under
24:23 - the collider not under the rigid
24:25 - actually you can do it under the rigid
24:27 - body as well I didn't know that I
24:30 - believe that's a new thing doesn't
24:31 - really matter this works fine and then
24:34 - we can select the ball we can pump down
24:35 - the friction to zero we don't want any
24:38 - kind of forces acting there and then we
24:40 - can bump the bounciness all the way up
24:43 - to one so now we can just hit play and
24:46 - we should see that the ball jumps so
24:48 - that's awesome one problem with this is
24:51 - that I tested it and I just left it
24:54 - there jumping around and actually it was
24:57 - increasing ing in height and you might
25:00 - be able to see this on stream or it
25:02 - might not be happening because we are
25:03 - not applying forces actually it looks
25:05 - like it is and for some reason when our
25:08 - bouncing this is one it should bounce to
25:10 - the exact same height you can see it is
25:12 - actually jumping Higher and Higher and
25:13 - the moment it's going to hit the ceiling
25:16 - we have the B Sy s at one why is it
25:19 - gaining momentum that shouldn't be
25:22 - possible for this ball to jump higher
25:24 - and higher we're defying all laws of
25:26 - physics right now and just
25:28 - creating new Force out of nothing but
25:32 - yeah it's really interesting Behavior
25:34 - and the reason for this really is that
25:37 - if we just go ahead and pause it we
25:38 - might be able to see it happen even go
25:40 - frame by frame you can see just how far
25:44 - the ball actually goes into the ground I
25:46 - mean it's not because of the collider
25:48 - adjustment that I made you can see it
25:50 - goes way below the wall and it's
25:53 - actually going into the wall and it's
25:55 - bouncing a bit there and it's creating
25:57 - this negative forth that shoots it right
26:00 - back and that allows it to gain momentum
26:03 - so in order to fix that what we need to
26:05 - do is Select our ball and change the
26:08 - Collision detection from discreete to
26:11 - continuous and this just means that when
26:14 - it's going to collide against other uh
26:17 - static colliders or things that don't
26:19 - move which our walls do not it's going
26:22 - to do it in a much more precise way and
26:24 - I could of course leave this running for
26:27 - a long time just show you that it won't
26:29 - do it again but just trust me the
26:30 - dynamic Collision actually works or at
26:33 - least I haven't had any problems with it
26:35 - whatsoever it's something that not a lot
26:37 - of people know but it's a really really
26:40 - handy trick so what we need to do now is
26:43 - add some start Force to our ball in
26:46 - order to actually make it kind of move
26:48 - across our level because it's not really
26:50 - U that exciting that it's just bouncing
26:52 - up and down in one place so to do this
26:54 - let's go ahead and create a new script
26:56 - and we'll call this one the Bal C script
26:59 - and we'll double click it to open it up
27:01 - in visual
27:02 - studio and um we can delete all the
27:06 - system. collection things and uh let's
27:08 - go ahead and create a new variable and
27:10 - this is going to be a public Vector 2
27:14 - and this is going to be our start Force
27:17 - so basically what this allows us to do
27:19 - is now inside of unity and this is one
27:21 - of the really nicer things that Unity
27:23 - does is allowing us to edit Vector twos
27:26 - and Vector 3
27:28 - inside of our scripts inside of the
27:31 - inspector so in here we can now say that
27:32 - we want this to start with a force of
27:35 - positive2 on the X and zero on the Y and
27:39 - then of course we need to also script
27:40 - this so uh that means that we want to
27:42 - apply this Force inside of the start
27:44 - method so when we start we want to do um
27:48 - of course when we're applying a force we
27:49 - need a reference to a rigid body and
27:52 - again we can just do that by creating a
27:53 - public rigid body to the RB saving that
27:58 - going into Unity here and dragging in
28:01 - the appropriate rigid body and that
28:03 - should work fine there we go whoops back
28:05 - into visal studio now we just go rb. add
28:08 - force and the force that we want to add
28:11 - is our start
28:13 - Force which currently is two on the X
28:16 - and zero on the Y and when it comes to
28:18 - forces it can be a bit confusing as to
28:21 - how big does the force need to be u in
28:23 - order to gain uh this much um movement
28:27 - and stuff stuff like that because it's
28:29 - not really using any units we don't have
28:31 - any units on this it's not using Newtons
28:34 - or anything like that uh but really just
28:36 - play around with it one thing that I
28:38 - will say is we need to go in here and
28:40 - specify the Force Mode 2D to be Force
28:43 - Mode 2D to be uh not force but impulse
28:48 - and this U basically means that it uh
28:51 - the values will need to be much much
28:54 - smaller um in order to actually move the
28:57 - ball you use impulse for One Time Force
29:00 - adds such as in the start method say uh
29:03 - in an explosion stuff like that you want
29:04 - to use the impulse mode and you use
29:06 - Force if you want to use a continuous
29:09 - Force application such as for a Thruster
29:12 - on a plane or stuff like that so we can
29:15 - save that now and we should see that
29:17 - when we just head in here hit play the
29:20 - ball should actually be yeah it's it
29:23 - just shoots over and it keeps going
29:26 - until something stops it such just our
29:28 - player and you can see that it can even
29:30 - interact with our player without any
29:33 - issue so I'm just going to move this
29:35 - over here so we won't get hit by it
29:37 - right away but it's going to do a bit of
29:39 - bouncing first but it is coming to get
29:43 - us cool so um that was kind of the um
29:47 - basic functionality for a ball next up
29:50 - we need to do something in order to be
29:53 - able to shoot out some uh kind of
29:55 - grappling hook or a harpoon uh that
29:58 - chain that you saw me shoot uh straight
30:01 - up in the air uh earlier when I was
30:03 - demonstrating the game and uh before we
30:06 - go ahead and do that I'm just again
30:08 - going to have a quick look in the chat
30:09 - to see how everyone is doing are you
30:12 - fine um everything looks good
30:21 - um let's see
30:23 - here everything looks good cool yeah so
30:27 - let's just continue so um what we need
30:31 - to do is of course create some graphics
30:32 - for this so let's start by creating a
30:34 - new uh mty game object again control
30:37 - shift n and let's call this one uh
30:40 - chain and I want this to be the parent
30:43 - object just sit in the middle at the
30:45 - moment and for this chain we can drag in
30:48 - a square which is going to be the
30:49 - graphics of our chain and I want the
30:52 - scale heat here to be something like3 on
30:55 - the X I think it's it should just be
30:57 - really really thin
30:58 - and basically what I wanted to do was
31:00 - move our chain here down to kind of the
31:03 - same level as our players so just let's
31:05 - imagine that it's sitting on top just on
31:09 - top of our ground here and let's move it
31:11 - over and basically why I've nested these
31:15 - object is so that we can have the chain
31:18 - uh we can give the chain a pivot point
31:20 - down here and then we can have the
31:21 - square here move that up and extend all
31:24 - the way up and you can see the chain
31:26 - still has a pivot down here so make sure
31:28 - you're viewing that in pivot and not
31:29 - Center and that just allows us to now if
31:32 - we uh say scale this um up a bit here so
31:35 - just scale it up here to Simply change
31:38 - the Y scale of our chain in order to
31:42 - edit that graphic and if we then go onto
31:45 - a square here and even add a box
31:48 - collider
31:49 - 2D uh that should automatically snap
31:52 - onto it here that's going to scale with
31:56 - it and that might be to see in the video
31:59 - uh or on the stream but I can actually
32:01 - see that we have the screen wrap around
32:04 - so that's awesome so now we can take our
32:06 - Square here and basically I want when
32:08 - this has a y value of one I would like
32:10 - this to be uh go from the bottom of our
32:13 - screen to the top just to kind of give
32:15 - ourselves an impression of what how um
32:19 - the sizes our values need to be in order
32:22 - to reach the top of our level so I'm
32:24 - just going to uh drag this up here and
32:28 - you need to be careful when doing this
32:31 - that you don't mess whoops mess things
32:33 - up I was just saying it here and of
32:37 - course this doesn't need to be perfect
32:39 - uh because the way that we're going to
32:41 - be uh checking if our wave should be
32:44 - pulled back is not by saying if our
32:45 - chain is at one but instead by checking
32:48 - for Collision um collisions with either
32:51 - the balls or on the top wall here the
32:54 - ceiling cool so this is going to be our
32:57 - uh
32:59 - I don't know we can do this
33:02 - chain uh what do we need to call this
33:05 - chain Graphics but it also has a
33:07 - collider so that's not really fitting
33:09 - let's just call this one chain
33:12 - pivot and then we can just call that one
33:14 - chain I think that's actually
33:16 - best I don't like it let's call this one
33:19 - chain and let's call this one
33:21 - chain Graphics there we go that's how
33:24 - we're going to do it and yes it has a
33:25 - collider so it's not only graphics and
33:27 - it's also going to have a script for
33:29 - quite dumb people I don't know what to
33:31 - call it awesome so um what we can do now
33:34 - is of course add a script onto this
33:36 - chain in order to actually make it
33:38 - interactable inside the game so let's go
33:40 - ahead and add a new C
33:43 - component um and let's call
33:46 - it
33:47 - chain let's keep it simple and we can
33:50 - double click this to open it up in
33:51 - Visual Studio as well and uh what I want
33:54 - to do is um start by creating a
34:00 - public
34:02 - static ban called is fired or is firing
34:07 - is um doing something whatever is active
34:11 - something to indicate whether or not we
34:13 - fired our chain or if it's waiting to be
34:16 - fired and we want to default that to
34:18 - false and because this is a static
34:20 - bullion meaning that it can be accessed
34:23 - from all other places without needing a
34:26 - reference to the instance of the class
34:28 - but only the type that's very technical
34:31 - explanation I'm going to show you what
34:32 - that means in a second but because it's
34:34 - marked as static it's going to move or
34:38 - keep its value when we change scene so
34:41 - when we reload our level and if this is
34:43 - true it's also going to be true in the
34:45 - next one so what we need to do is inside
34:47 - of our start set is fired to false to
34:51 - force it to be false even though we've
34:53 - changed levels and uh we can therefore
34:55 - remove that one up there that's a
34:57 - necessary so in our start we're just
34:59 - always going to set it to false cool
35:02 - then in our update we can say that if
35:04 - the chain is fired well then we want to
35:07 - do one thing and if it's not then we
35:10 - want to do another thing and let's have
35:12 - a look at what we want to do in these
35:14 - two cases so if it's fired we want it to
35:18 - stay still and slowly animate upwards
35:21 - which means that we want to animate our
35:23 - wire scale and if it um is if it isn't
35:28 - fired we want it to just snap to the
35:30 - position and follow the position of our
35:33 - character so let's start by doing
35:36 - exactly that so um in order to follow
35:39 - around our player we'll need a reference
35:41 - to our player and that means we need a
35:43 - public transform and let's just call
35:45 - this one player then inside of our
35:48 - update if we aren't firing or if it
35:50 - isn't fired we can go here and say
35:54 - player or we could say um our current
35:57 - position
35:58 - so
35:59 - transform. position equals player.
36:02 - position and because we've gone in and
36:06 - solved all of the problems with our
36:08 - pivot Points because the chain here has
36:11 - a pivot at the very bottom and because
36:14 - our player also because we went in and
36:16 - created a separate object has a pivot on
36:18 - at the bottom center we can just say
36:21 - transform.position equals player.
36:23 - position and we don't need to
36:24 - differentiate between all of the
36:26 - coordinates we can just have all the
36:28 - coordinates be the same and that just
36:29 - makes everything so much easier awesome
36:32 - so when we aren't firing we just wanted
36:34 - to snap to the position of our player
36:36 - and let's just see if that works so I'm
36:38 - just going to leave it at one the chain
36:40 - here and that's fine and we can drag in
36:42 - our player and we can hit play and it
36:46 - should snap over awesome so I don't know
36:49 - what's going on with a player here okay
36:51 - so the reason why our player just went
36:52 - crazy there I want I'm not holding down
36:55 - anything and you can see it's still just
36:58 - goes crazy is the is because we
37:00 - currently have a collision between our
37:02 - chain and our player and we don't want
37:04 - that and in general this game depends a
37:08 - lot on collision so we are going to take
37:10 - a look at at the Collision
37:15 - Matrix I believe that's worth taking a
37:20 - waterf Yeah so basically the Collision
37:23 - Matrix is a way to control what layers
37:27 - and you can assign layers to an object
37:29 - by simply going up here and selecting a
37:30 - layer and you can add new ones what
37:33 - layers which meaning what groups of
37:35 - objects can collide with other layers
37:38 - and the thing uh that this is really
37:41 - handy for is that you can do stuff like
37:43 - disable internal collisions so if you
37:45 - have a lot of balls which are all in the
37:47 - layer ball well then you can disable
37:51 - balls collision with other balls and
37:54 - that means that they can just move
37:55 - around freely without any weird Behavior
37:58 - the same way we can go in here and
38:00 - assign a layer to our player we can also
38:04 - let's just create one for our chain and
38:06 - create one for the wall and let's create
38:09 - one for ball and we can go into a player
38:13 - assign the player go into our chain
38:16 - assign the chain and yes we do do want
38:18 - to change the children not that it
38:20 - really matters um actually here it does
38:22 - because our children is the one with the
38:24 - collider so that's really important and
38:27 - in our ball we'll change that to ball
38:30 - and our walls here I want to change all
38:34 - of them except the bottom one and the
38:36 - reason for that uh to wall so we'll just
38:39 - go in there change all of them to wall
38:41 - um actually I want to go
38:43 - into this one and then change this one
38:46 - back to theault I think that's cleaner
38:48 - cool so the reason why I don't want to
38:51 - change the bottom one to wall is because
38:54 - I want to enable collisions between the
38:57 - play player and the walls um but
39:01 - actually what was my reasoning I think
39:04 - i' I I I know we know to why to do this
39:08 - but I can't really figure out why yet
39:11 - okay so we'll just leave that at default
39:12 - for now and we'll find out why it was
39:15 - that I knew that we should do that at a
39:16 - later
39:17 - point this is the good thing about doing
39:20 - things over and over is that at some
39:22 - point you just do them and you don't
39:23 - really know why but you don't really
39:25 - care so it just works okay so uh what
39:28 - we're going to do now is go under edit
39:31 - project settings and then physics 2D and
39:34 - I reveal to you the layer Collision
39:37 - Matrix and it looks
39:38 - scary really scary and it is because you
39:43 - always are going to mess this up if
39:45 - you're anything like me um but it's it's
39:48 - just so handy so the first thing here is
39:50 - you can see we have our ball here and we
39:52 - also have our ball here so this is our
39:54 - ball with ball collision and we're going
39:56 - to dis that because we don't want those
39:59 - to bump each into each other we also
40:01 - have our wall with wall Collision we
40:03 - don't want our walls to collide we want
40:05 - our ball to collide with walls that's
40:08 - totally fine we don't want our chain um
40:12 - we want our chain to collide with balls
40:14 - that's totally fine as well we uh want
40:16 - our chain to collide with walls and this
40:19 - is why this is why that I uh I don't did
40:22 - not Mark the bottom wall um as a wall
40:25 - and that's because we don't want our
40:27 - chain to collide with that part we don't
40:29 - want that because that would mean that
40:31 - it would sometimes trigger as soon as
40:33 - it's sent out and that would mean that
40:35 - it would return even though we don't see
40:37 - it and things would look super weird so
40:39 - we don't want our chain uh to collide
40:43 - with that particular wall but all other
40:45 - walls um but we do want it to yeah
40:47 - collide with uh objects tagged as or in
40:50 - the wall
40:52 - layer and we don't want the chain to
40:54 - collide with itself we don't want the
40:56 - player to collide with the chain and we
41:01 - don't want the player to collide with
41:02 - the player so you can just go through
41:04 - here and do all kinds of things we don't
41:06 - want our ball to collide with default
41:08 - yes we do uh we don't want our wall to
41:12 - collide with default objects we don't
41:14 - want our chain to collide with default
41:16 - objects but we do want our player to do
41:18 - that so this is how your um layer
41:21 - Collision Matrix should be set up it's
41:24 - super confusing and you can see why it's
41:25 - so easy to mess this up uh but really
41:28 - it's also really really easy to change
41:30 - and this is just an awesome part of
41:32 - unity I really like this because it
41:34 - allows you to do so much with physics
41:37 - without needing to C code all of this
41:39 - functionality in and change it in the
41:41 - code if you just change around some
41:43 - layers you can just go in here have a
41:45 - visual representation of what's going on
41:47 - even though it might be a bit confusing
41:49 - and uh yeah it's just really really
41:51 - nice so um we should be able to now hit
41:55 - play and not explode and we uh we we are
41:59 - able to do that and you can see I can
42:01 - hit the ball here with the um with our
42:04 - chain and one thing I want to do is go
42:06 - under a chain and change this to a
42:09 - trigger I don't think there's any reason
42:11 - why this should be applying forces or
42:14 - anything like that we just want this to
42:16 - be uh to notice whenever it's hit so
42:17 - that we can reset and do stuff like
42:20 - that uh cool so that was the initial
42:24 - part of our chain that was um what is
42:26 - going to happen when we aren't firing
42:29 - and one thing that we want to do here as
42:30 - well is just set our local scale on the
42:33 - y equal to zero so we can say transform.
42:37 - local
42:38 - scale equals a new Vector
42:43 - 3 um with 1 Zer and one so one on the X
42:47 - Zer on the Y and one on the Z and this
42:50 - is also a handy part um when nesting
42:53 - these is that we can set this x to one
42:55 - and still remain the uh the fact that we
42:57 - have 3 on the X of the
43:01 - graphics good uh so that should mean
43:03 - that when we now play this down sizes
43:06 - and we can't actually see it you can see
43:07 - here that it is down here but it's so
43:10 - tiny that we cannot see it it's scaled
43:12 - to zero isn't it y scale y 55 oh it's
43:18 - this one cool yeah I'm confusing myself
43:21 - already so what we can do now is go
43:23 - under our um visual studio and we can
43:26 - have a look at what's going to happen
43:27 - when we do actually fire but first let's
43:30 - actually create some user input that
43:31 - allows us to do that so let's go in here
43:34 - create an if statement say if input dot
43:38 - input. getet bottom down and if we get a
43:43 - button called fire
43:45 - one then we want
43:48 - to um say is fired equals true that's
43:54 - all we still want to pass through to
43:56 - handle all of the rest and um the cooler
43:59 - thing cool thing about this input. getet
44:01 - button fire one is that it allows us
44:04 - currently to use on the mouse for
44:06 - clicking but we can go in here and go
44:08 - edit project settings and then input we
44:11 - can find the fire one and we can add
44:15 - alternative buttons on here as well you
44:17 - can see it has a positive button here
44:18 - called Mouse zero which is our left
44:20 - click uh and you can also do it using
44:22 - the control I want to change that to
44:25 - space so now when we go in here we
44:27 - should be able to and you can really see
44:29 - this click and use space but again not
44:32 - visible so let's actually go in and make
44:33 - this visible so if we are firing what we
44:37 - want to do is um add a bit onto the Y
44:41 - scale of our object each frame so we
44:43 - just want to slowly increase this number
44:47 - and the way that we do that is by going
44:50 - transform do local scale is equal to our
44:54 - current transform. local scale scale and
44:58 - then plus Vector
45:00 - 3. op multiplied with time dot um Delta
45:07 - time. fix Delta time here yeah cool so
45:11 - basically what we're saying here is that
45:14 - we want to have the same one uh or the
45:17 - same x coordinate as we've already
45:19 - always had we want to have the same
45:21 - y-coordinate but the coordinate but our
45:25 - y-coordinate should slow slowly increase
45:28 - and the rate at which it should do that
45:30 - is from 0 to 1 at 1 second so one unit a
45:34 - second and if you want to speed this up
45:37 - what we could do is add a speed up here
45:40 - public float um speed for the chain and
45:43 - set that equal to say two and that means
45:46 - now that when we go down here and
45:48 - multiply that in so multiply with speed
45:52 - we uh will now shoot a lot faster so let
45:54 - me just show you that this is actually
45:55 - working so we can go in here we should
45:58 - be able to hit play and when I now click
46:00 - you can see that our chain goes up we
46:03 - can set the speed to one instead and we
46:05 - should see it go half the speed and it
46:08 - does and we can of course also go below
46:10 - one here if you want some really slow
46:13 - chain awesome so that's working and also
46:16 - you can see that we can move away from
46:17 - the chain once it's fired so that's a
46:19 - really important part of the script you
46:22 - will also notice that the chain doesn't
46:24 - reset when it hits the ceiling it just
46:26 - keeps going or whenever a ball bounces
46:28 - centered that simply nothing happens and
46:31 - that's because of course we marked it as
46:33 - trigger but also we haven't implemented
46:35 - any code for actually resetting this is
46:38 - fired variable that's just going to
46:40 - remain true so what we go uh and do now
46:43 - is add a bit of collision detection or
46:46 - trigger detection on our chain Graphics
46:49 - object and then we simply reset that
46:51 - variable so that's the next part of this
46:54 - whole thing and we are getting closer to
46:56 - actually having a game here the next
46:58 - thing that we're going to be doing after
47:00 - that is actually splitting the balls in
47:02 - two and spawning that and that's
47:04 - actually the most uh fun part if you ask
47:07 - me so don't worry we're getting to it
47:10 - just in a moment
47:12 - so again
47:14 - water and um you guys are being awesome
47:18 - in chat really awesome to see so many
47:20 - people in here
47:22 - um and people are still talking about a
47:25 - lud Dar that's awesome and uh yeah I
47:29 - think we're just going to go ahead and
47:34 - continue cool so uh yeah the next part
47:38 - is of course uh registering when some
47:40 - object enters this uh TR chain trigger
47:44 - and to do that let's add a new component
47:46 - let's call this something like chain
47:48 - Collision or chain trigger chain
47:52 - event ah we can do a lot of stuff this
47:55 - with this let's just call it chain coll
47:57 - let's double click it again to open it
47:59 - up in Vis
48:01 - studio and uh now we can go in here and
48:04 - we can have just a single function here
48:07 - the function that we want and we can
48:08 - delete this as well there we go the
48:12 - function that we want is a void ont
48:14 - trigger enter
48:16 - 2D there we go and you need to write
48:19 - this out the exact same way that I've
48:20 - done it here no improvising on capital
48:23 - letters or anything like that because
48:25 - this is a Unity call back back just like
48:28 - start awake update fixed update this is
48:31 - called by unity when Unity Unity decides
48:34 - to do so in our case this function is
48:37 - going to call whenever a um collider so
48:40 - that means our ball for example or our
48:43 - walls hit the trigger collider on our
48:47 - chain then this method is going to call
48:50 - but only once only when it's actually
48:52 - hit when another collider enters the
48:54 - trigger so this basically allows us to
48:58 - uh just throw out a debug.log statement
49:00 - when this happens so something hit the
49:03 - chain there you go and this should
49:05 - actually work right away um we don't do
49:07 - any checking on what uh what hit it but
49:09 - you can see right off the bat it says
49:11 - something hit the chain and I'm not
49:14 - totally sure what hit the chain but
49:16 - something did and we can we can go ahead
49:18 - and hit um and fire it here and you can
49:20 - see when it hits the wall it says
49:22 - something hit the chain it should also
49:24 - do so when our um yeah does so when our
49:27 - ball does it as well so you can see that
49:29 - that is working and it shouldn't be a
49:31 - problem that something hits it in the
49:33 - very beginning I don't quite know what
49:36 - it is that it's colliding with because
49:38 - it shouldn't be able to oh it might be
49:40 - the top here before we reset the
49:42 - position that could be it if we just go
49:44 - in here and set the Y scale to zero just
49:47 - to test this just to test this out you
49:49 - can see that disappears so that's why it
49:52 - it triggered right off the bat so what
49:54 - we can do now is go in here and and
49:56 - every time something hits this trigger
49:59 - um we're simply going to reset our chain
50:01 - and we don't need to check if it was a
50:04 - ball or wall because that's the only
50:06 - things that our chain is able to collide
50:08 - with because of our physics uh trigger
50:11 - our physics layer physics Collision
50:13 - Matrix thing cool so what we can do is
50:16 - simply say
50:18 - chain dot is fired equals false and
50:23 - that's it and that's the awesome part
50:25 - about using a static bullion is because
50:28 - we only have one player in here one
50:31 - chain we can use this static one to
50:33 - control this instance here without any
50:36 - issues I mean if if we had multiple
50:38 - people we couldn't do it this way
50:40 - because U that would reset the chain for
50:43 - all of the players but it just allows us
50:45 - to say chain do is fired and we don't
50:47 - need to reference this particular object
50:49 - so that's really cool and also I
50:51 - actually want to change the I here to
50:53 - Capital I not a not a capital s and uh
50:57 - just to make things uh make it clear
50:59 - that this is a static variable that's a
51:00 - naming convention that I like to use and
51:03 - the way that I quickly rename everything
51:05 - here and it's also going to rename in
51:06 - the other script is by using control R
51:09 - control R so you need to do that twice
51:12 - and that forces uh Unity forces Vis
51:15 - Visual Studio to do refracturing so can
51:17 - also right click I believe you can go
51:20 - something like rename here you can see
51:21 - there it's called refracturing awesome
51:24 - so that should actually reset our chain
51:26 - when we go in and hit play now um we
51:29 - should see that working so if I just
51:32 - let's try hitting the wall awesome
51:34 - resets it and the same thing when we hit
51:36 - a ball of course nothing is currently
51:38 - happening to our bow so um before we
51:41 - make that happen I'm just going to go in
51:44 - here and change the color of on this
51:47 - chain here I don't think it's too pretty
51:49 - just want to tint it the same color
51:52 - actually as um our border I think that
51:55 - looks good so I just used the color
51:56 - piger to do that and uh I'm pretty
51:59 - pleased with that so we can change that
52:00 - back to
52:01 - zero and uh yeah good so the next thing
52:05 - is of course we need to check if what
52:07 - we've hit is actually a ball because we
52:09 - are both colliding with walls and balls
52:12 - and so we need to check if it's the one
52:13 - it's if it's one or the other and the
52:15 - way to do this is we gather information
52:18 - about what we hit by creating a variable
52:21 - up here collider 2D and we're just going
52:22 - to call this uh call for collider and
52:26 - what we can can then do is say no matter
52:28 - what we want to set chain that this F to
52:29 - false but we can then check if call do
52:32 - say tag is equal to ball or wall in
52:37 - which case we want to uh do some stuff
52:41 - um with the ball we want to split it so
52:43 - debug. log
52:45 - split ball in
52:48 - two there we go and all we need to do in
52:51 - order to trigger this is now go into our
52:53 - ball object and change the tag here to a
52:56 - new one that we're going to be making
52:58 - called you guested ball cool so we'll
53:01 - just tag that as ball we can also drag
53:04 - this down to make a prefab out of it
53:05 - that's going to be yeah it's just good
53:07 - practice and now we should see that when
53:09 - we hit play when we hit our uh roof here
53:12 - nothing happens when we hit our ball it
53:14 - says split ball into two and that is the
53:17 - next thing that we will be doing so let
53:19 - me just see everything is going on
53:24 - well uh a lot of discussion about visual
53:26 - studio and mono develop I mean it's
53:29 - really about what you're comfortable
53:30 - with but um I will say if you're on
53:34 - Windows and have free access to visual
53:36 - Studios I don't see a lot of reasons to
53:39 - use mono develop maybe the Simplicity
53:41 - and that's of course a good reason if
53:43 - you're starting out but visual studio
53:45 - just has so many nice features it's so
53:48 - ex extendable and
53:50 - um it's just really solid mono develop
53:54 - has a lot of issues in terms of crashing
53:56 - and stuff like that but then to be fair
53:58 - I haven't been using model developed for
54:00 - a year now so I don't really know what
54:02 - the current state of the software is but
54:05 - yeah just wanted to comment on that cool
54:09 - so
54:11 - um yeah the next thing is splitting the
54:13 - ball in two and what we want to do here
54:15 - is create a script actually we already
54:17 - have a script um but we want to modify
54:19 - our ball script a bit what I want to do
54:22 - is create a public function a public
54:24 - void which means that we will be able to
54:26 - call it from in within our chain
54:28 - Collision script whenever this happened
54:30 - we'll be able to grab the ball and call
54:33 - the function this function on it and
54:35 - it's going to be called something like
54:38 - split and U what we need to do here is
54:41 - of course destroy the current object so
54:43 - we want to destroy our ball and uh we do
54:46 - that by simply calling destroy and then
54:48 - giving it game object with a non capital
54:50 - G which refers to this game object that
54:53 - the script is sitting on which is our
54:54 - ball U but we of course we don't want to
54:56 - do this first because then the rest of
54:58 - the code won't be called so we want to
55:00 - do some stuff and then destroy the ball
55:03 - and what we want to do is instantiate
55:06 - some new ones in case there are any more
55:09 - uh to instantiate at least so let's
55:11 - create up here a public game object and
55:14 - this is going to be a reference to the
55:16 - next ball preat so let's just call that
55:19 - next ball and that allows us now to go
55:21 - in here and you can see there's an empty
55:23 - slot where we can drag in the prefab of
55:25 - the next ball that we we want to spawn
55:27 - we can even drag in our own prefab which
55:30 - means that each time this ball gets hit
55:32 - it's just going to spawn two copies of
55:34 - itself and that's already pretty fun so
55:36 - let's just actually try that now it's
55:38 - going to be an infinite game but and hit
55:41 - apply on the prefab and that's an
55:43 - important part it's going to be an
55:44 - infinite game but it's going to be fun
55:47 - so what we can do then is um if our next
55:51 - ball is not equal to null so if we've
55:53 - actually dragged something in there if
55:55 - we haven't that means that it's the last
55:57 - ball or we forgot but uh it should be
56:00 - mean that it's the last ball and
56:03 - therefore we simply want to destroy it
56:04 - so that we can continue on to the next
56:06 - level uh but if we have something in
56:08 - there we want to instantiate next ball
56:12 - and we want to instantiate it at our
56:15 - current position which means rb.
56:17 - position and the reason why I'm using
56:19 - rb. position and not transform. position
56:22 - here is because rb. position gives us
56:24 - our position in X and Y and ignores the
56:27 - Z component so as a vector 2 but
56:29 - transformed opposition always gives a
56:31 - vector three which is annoying so we'll
56:33 - just use RB position and then um we can
56:36 - use Quan do identity because we don't
56:40 - want any rotation on
56:42 - this and uh we can go ahead and
56:44 - duplicate uh this entire thing and um I
56:48 - want them to be spawned at slightly
56:51 - different positions I don't want them to
56:52 - be spawned totally on top of each other
56:54 - you can do that and it's going to look
56:56 - look fine but I think in the original
56:58 - games that they offset them a bit so
57:00 - that they start a bit to the right and a
57:02 - bit to the left and to do that we simply
57:04 - add on to here Vector 2.
57:07 - right and then we can maybe divide by
57:10 - say four so that we don't uh offset them
57:13 - by a full unit by only a fourth of a
57:15 - unit and we can uh do the same thing
57:17 - here so plus Vector 3 and then left
57:21 - divided by four so just offsetting them
57:24 - a tiny tiny bit and this should already
57:26 - work um if we go in here and hit play we
57:29 - should see that when we hit this ball it
57:33 - destroys itself whoops of course we also
57:35 - need to call the method so now we need
57:37 - to go into our chain collision and we
57:39 - need to go in here and use the fact that
57:41 - we have a reference to the collider so
57:43 - our ball is currently called coal and
57:45 - then we need to get the um ball script
57:49 - on that object so this here this ball
57:51 - object is called coal here it's the
57:53 - collider and we need need to get this
57:56 - particular script so we can call a
57:57 - function in that script and we do that
57:59 - by going call. getet component of type
58:03 - ball and then we do dot in order to
58:06 - access all the things on in that ball
58:08 - script and we then uh go um split the
58:13 - the split method and we call that
58:15 - particular method so again when
58:17 - something enters our chain we're going
58:19 - to collect a bit of information about
58:21 - what entered we're going to say that
58:23 - we're no longer firing we're going to
58:25 - check if the the thing that enters um
58:28 - had a tag of ball and if it does we're
58:31 - going to get the ball script off or
58:34 - component of that object and call the
58:36 - split method on that which is going to
58:38 - go in here or not in here um and
58:42 - actually check if we have another ball
58:44 - to spawn if we do it's going to spawn
58:46 - too and destroy the current one cool so
58:50 - now we should be able to play here and
58:52 - things should work so let's see there
58:55 - you can see it's instantiates two new
58:57 - balls but you can see our forces here
58:59 - are acting really weird I mean they're
59:03 - going all over the place and we do not
59:06 - want that what we want instead is of
59:08 - course reset our start first down here
59:11 - we want that to be zero and then on this
59:13 - particular ball here that we placed in
59:15 - the level we want that to be two so from
59:18 - now on we want all of the balls in the
59:20 - project to have zero and then we can
59:22 - change them for the individual instances
59:24 - but without hitting apply
59:27 - then uh what we can do is control the
59:31 - start force of the balls that spawn
59:35 - inside the script and we do that by
59:37 - first getting a reference to the objects
59:39 - that we've instantiated themselves so
59:41 - the entire game objects and we do that
59:43 - by first saying game object and then
59:46 - creating kind of a temporary variable to
59:49 - store it in and this is going to be B uh
59:52 - one actually I'm just going to do one
59:54 - like that and we are going to set that
59:56 - equal to what we just instantiated what
59:59 - we just spawned we're going to create a
60:01 - second one here called Ball 2 and set
60:04 - that equal to the second ball that we
60:06 - just spawned what we can then do is use
60:09 - get component on both of these so ball
60:11 - one. get component of type ball just in
60:14 - the same way that we did our chain
60:16 - Collis here we want to do get component
60:19 - ball and um what we can then do is set
60:23 - the start force on these B so we can set
60:26 - start Force here equal to a new Vector 2
60:32 - and the first coordinate needs to be
60:33 - something like two is going to be fine
60:36 - and I also want to give them a bit of
60:38 - force on the Y AIS and this allows them
60:41 - to kind of get that nice bouncing TR um
60:44 - tra trajectory whatever how you say that
60:48 - um where they kind of Bounce upwards and
60:51 - over so they apply a bit of upwards
60:53 - momentum each time we split them in half
60:55 - and that just gives a bit of liveliness
60:57 - to the game and I want to set that to
60:59 - something like five on the Y so we can
61:02 - now duplicate this entire thing and we
61:04 - can change the uh this to be bold two
61:06 - and here we want to apply -2 on the X so
61:10 - that this will go in the opposite
61:13 - direction and uh that should actually
61:15 - work so I believe that's pretty much all
61:18 - of the core functionality that we need
61:20 - in here now it's just a matter of
61:21 - setting it up in unity and maybe also
61:23 - adding an in condition so if we we hit
61:26 - play here we should see that when we hit
61:30 - the ball awesome it splits in two and
61:32 - it's just going to keep doing this
61:35 - infinitely so this is another example of
61:37 - what how you can take this same concept
61:40 - and these same mechanics to create a fun
61:42 - little mini game kind of a spin-off to
61:45 - the original
61:47 - series and you can see that I currently
61:49 - cannot die so this is just happy times
61:52 - where we can keep doing this until the
61:54 - computer gets really TI fired and maybe
61:56 - crashes but it is definitely fun so we
61:59 - won't worry about that and you can see
62:01 - here how important it is that we used
62:03 - our layer Collision Matrix to make the
62:05 - balls not collide with each other but
62:08 - yeah that was uh kind of the base of
62:10 - what we need um to
62:13 - do so before we continue on and actually
62:15 - make this into a playable game let me
62:17 - just have again a quick look look in the
62:20 - uh in the chat
62:23 - here um
62:27 - let's
62:28 - see no need to get component because I'm
62:31 - already in the ball script that's not
62:33 - totally true because uh this ball script
62:37 - here refers to the ball that is
62:39 - currently being split in half and that's
62:41 - a separate object from the two balls
62:43 - that we want to create so what we do is
62:46 - actually uh spawn two balls from this um
62:50 - this ball from the current ball being
62:52 - split in half and then we have
62:54 - references to each each individual ball
62:57 - and we get their individual versions of
63:00 - the ball script and change their start
63:02 - force not the start Force for all of
63:04 - them but they particular start Force so
63:07 - that's why we need to use get component
63:09 - and that's kind of the base of
63:10 - understanding the difference between a
63:12 - type which is our class up here which is
63:14 - our ball type and the fact that we can
63:16 - have multiple balls in there different
63:18 - instances of that type so yeah I can see
63:22 - why you get confused because the naming
63:23 - is the same but now we are not talking
63:25 - about a type we are talking about a
63:27 - particular instance a particular
63:29 - creation a particular ball um so yeah
63:33 - that's the difference there really good
63:34 - question though all right so um where to
63:38 - go from here I think uh we need to link
63:40 - up all the balls and then we need to do
63:42 - an uh a game over condition so the first
63:45 - thing is is really really easy and it's
63:47 - really something that you should just go
63:48 - nuts with in terms of imagination and
63:51 - just um figuring out exactly what what
63:53 - you want to do I'm just going to create
63:55 - a ball let's make this ball
63:59 - four and I'm going to do ball 04 here
64:02 - and um we can duplicate this inside of
64:05 - the inspector here and we can um so this
64:07 - is ball five and we can see how Unity
64:09 - automatically names it it names it it's
64:13 - totally awesome um and we can take our
64:15 - ball four and drag it into the next ball
64:17 - of our ball five and that means that
64:20 - when not ball five splits in half it's
64:21 - going to split into ball four and yeah
64:23 - you get the drill and we can change the
64:25 - color of this bow and actually let's
64:27 - just get it inside the inspector so we
64:29 - can see what's going on so this is bow
64:31 - five we can change the color of this to
64:33 - Something red to indicate that this is
64:35 - really large and dangerous let's also
64:37 - bump up the size to say
64:40 - 1.5 and uh that looks just just fine
64:43 - actually uh the ball four is fine we can
64:46 - duplicate that and we can rename this
64:48 - one to ball three because we want them
64:51 - to get increasingly smaller now and uh
64:54 - we can make this one uh say blue I
64:58 - believe I made it blue in the video so
65:01 - let's do the same thing here and we can
65:03 - bump down the scale to say
65:05 - 6 on all the axes and that's going to
65:08 - look fine and notice how the collider
65:10 - follows our scaling so that's really
65:12 - really nice we don't have to worry about
65:13 - scaling that um
65:15 - separately and I changed that inside of
65:18 - the uh game itself I want to change it
65:20 - in here instead so 6 on all the axes
65:24 - there we go but really we could just hit
65:27 - apply makes no difference awesome and we
65:29 - want to not drag in ball three here we
65:31 - want to have our ball four reference the
65:34 - ball three and we want to have our ball
65:36 - three reference ball two which we're
65:38 - going to be creating now so let's create
65:40 - a new ball here
65:41 - ball uh two and we can just keep going
65:45 - with this to create as many stages of
65:47 - these balls that we want to so I'm just
65:49 - going to have B two in here and um this
65:52 - one again let's drag it into the scene
65:55 - this one I would like to be uh
65:57 - green so let's make it green here and
66:01 - we're going to make it even smaller
66:02 - something
66:03 - like3 I think is good that might be too
66:07 - small because we want one to be even
66:08 - smaller than this so maybe
66:11 - 045 is going to be good and we can make
66:14 - that green that's cool and we want to
66:17 - reference that under the ball three of
66:18 - course something like that again I'm
66:20 - creating One More Level than or level
66:23 - one more ball type than uh what I did
66:26 - for the video but I just thought that I
66:28 - would show you how easy this is to do we
66:30 - can create ball one now as well I drag
66:33 - that inside the inspector have this be
66:36 - uh some other maybe even just
66:39 - gray could be fine because it needs to
66:42 - be so small but still it's really
66:45 - dangerous when they they're this small
66:46 - because they are really hard to hit but
66:49 - we can make this say 2 on all the axes I
66:53 - think that's kind of fun to have a
66:54 - really small devil in there um and I
66:57 - actually want them to maybe be yeah
66:59 - let's just make it gray and U we need to
67:01 - reference that in ball two so ball two
67:04 - references ball one and ball one doesn't
67:07 - reference anything so that will actually
67:09 - Pop um and that should work just fine so
67:12 - you can see how that is set up hit apply
67:14 - on that um we apply this we apply that
67:19 - the ball four here we don't want to
67:21 - apply the start Force we want that to be
67:23 - zero apply that we delete all of them
67:27 - except for the biggest one which is our
67:29 - ball five move that somewhere over here
67:32 - for example and now we should see that
67:35 - this is working so let's hit play and
67:38 - try the game out so okay so we need a
67:40 - start force on that so ball five here we
67:43 - can set two on the X for the start
67:46 - force and we should be able to see them
67:48 - splitting and that's awesome so you can
67:51 - see how that looks and again when we
67:53 - kill off the gray ones uh they are
67:56 - indeed going to disappear so this is
67:58 - actually quite difficult luckily I'm not
68:00 - able to die yet we haven't implemented
68:02 - that yet but it's still woo not totally
68:05 - easy but I feel that this is already a
68:07 - pretty nice spin-off game and it's
68:09 - actually a lot more fastpac in action
68:12 - pack because um everything moves a lot
68:14 - quicker and the player does as well so
68:17 - yeah it's a lot of fun so the last thing
68:19 - that I wanted to do was just implement
68:21 - the um the game over and in order to do
68:24 - this we just have to look uh uh we just
68:27 - have to have a look at our player we can
68:29 - double click on our player we can create
68:31 - a new on trigger actually this is going
68:35 - to
68:36 - be uh this is going to be an on collider
68:39 - enter Because this is a collider so on
68:42 - collider uh enter
68:45 - 2D again this is not a trigger so we are
68:48 - have a collision that's not a trigger
68:50 - enter and um we don't want to use
68:53 - collider 2D because we actually get more
68:56 - information we get Collision 2D and this
68:59 - is the same as collider 2D but instead
69:01 - of just having a reference to what we
69:02 - collided with we also get some
69:05 - information about how the Collision uh
69:07 - went so the force at which they collided
69:10 - and the point at which they hid and
69:12 - stuff like that so we simply get some
69:14 - Physics information that you don't get
69:15 - when using a trigger um and whoops what
69:19 - we do I turned on insert there we go so
69:23 - what we do here is simply go call as
69:26 - well and then we say if uh
69:30 - call.
69:32 - tag. collider do tag is equal to uh
69:39 - ball well then we want to restart so we
69:43 - can just throw a debug.log here saying
69:46 - game let's do a more dramatic one game
69:50 - over and in order to restart our current
69:52 - level we simply going into Unity uh we
69:55 - import Unity engine Unity engine. sort.
69:59 - scene management there we go and down
70:02 - here we simply go scene
70:04 - manager. load scene and the scene that
70:06 - we want to load is the currently active
70:08 - scene so we go scene
70:10 - manager. get active scene and then we
70:13 - need to do either name or build index
70:16 - because we can't feed the actual scene
70:18 - we need to feed it either a build index
70:20 - or a name that's the exact same thing
70:22 - and that should actually be it I believe
70:24 - that's all all um we needed to do on not
70:30 - on collider enter it needs to be on
70:33 - Collis
70:35 - enter like that yes good that wouldn't
70:38 - have worked thank you to the chat for
70:41 - the people to skyex with just saying
70:43 - that and I would totally have been stuck
70:45 - at that on that for a long time it's the
70:48 - worst so um yeah we should see now that
70:52 - when we get hit by a ball it's a game
70:54 - over and just quits the game and you can
70:56 - easily add a slow motion effect or
70:59 - something cool in here uh to make the
71:01 - game over look better you can add some
71:02 - UI and then delay so that it doesn't
71:05 - just restart immediately check out the
71:07 - Dodge the blocks uh tutorial it's on the
71:10 - YouTube channel that was also recorded
71:11 - live live stream again dodg the blocks
71:14 - if you want to see that kind of um
71:16 - bullet time slowmo uh when you get hit
71:19 - by something and and then it
71:22 - restarts so I think that was all one
71:26 - thing that I just noticed is that our
71:28 - chain is in front of our player but all
71:29 - we need to do here is simply change the
71:31 - order and layer to something smaller
71:33 - than our player so we could just do
71:34 - minus two there and that is now fixed so
71:38 - that's the entire game everyone I hope
71:40 - you enjoyed it um I really don't have
71:43 - anything more to add I'm just going to
71:45 - attempt a playr here now that we are
71:48 - finally done with the game and then we
71:50 - can go ahead and do some Q&A so prepare
71:53 - your questions actually just Spam them
71:54 - in the chat CH already and we can kind
71:56 - of transition to that part I really hope
71:58 - that you enjoyed this again if you
72:00 - missed out on something if there's
72:01 - something that you find difficult um
72:03 - right after the stream this is going to
72:05 - be available in the um twitch archive
72:08 - I'm also going to upload it to YouTube
72:10 - as soon as possible and um I'm also
72:14 - going to be uploading the project to
72:15 - GitHub at the same time that I upload to
72:18 - Youtube so you can get your hands on all
72:20 - of the code all of the really super high
72:23 - Advanced graphics and um uh the full
72:26 - Unity project so I'm just going to hit
72:29 - play here and let's have a play through
72:30 - and let's see how this goes so I'm just
72:34 - going to attempt attempt to beat the
72:37 - game and it's not going to happen I can
72:39 - promise you that I think we need to
72:42 - start with some of the smaller ones
72:43 - instead of splitting up some of the
72:45 - others uh immediately or else we're just
72:48 - going to have a lot of things flying
72:50 - around this is actually going a lot
72:52 - better than I
72:53 - expected and I know that right after
72:55 - saying that oh I shouldn't have done
72:57 - that no no no no this is where the
72:59 - decision making
73:01 - crumbles uh it's actually going whoa
73:04 - Jesus all right so these live game plays
73:06 - are Al always really scary I cannot
73:09 - believe people who yeah I messed it up
73:12 - I'm sorry we didn't get to the end of
73:13 - the game
73:16 - ah I will never ever do a separate
73:19 - gaming channel don't worry uh it's just
73:24 - embarrassing cool so let's change to
73:26 - some uh questions and answers and for
73:29 - this part I'm going to change over to
73:33 - the chat twitch layout so you can see
73:35 - the chat on YouTube as well and uh yeah
73:40 - give me some questions so um why don't I
73:43 - use autocomplete I do use autocomplete
73:46 - uh I don't know if it's just turned off
73:47 - on V visual studio right now sometimes
73:49 - it bugs out no no it's here I use that
73:52 - all the time uh sometimes I just write
73:54 - it out if too lazy to actually select it
73:56 - on the list but I do that a
73:59 - lot um is it easy to get the line uh to
74:04 - go to the mouse position so um do you
74:08 - mean that the line should just follow
74:10 - around the mouse you can definitely do
74:12 - that quite easily you just need to use
74:14 - input. getet Mouse position and then you
74:16 - can do some things on the camera uh to
74:19 - turn turn that into a from a
74:22 - screen coordinate thing into a world de
74:25 - ision thing and there's a lot of stuff
74:26 - on that on both the breus Forum the
74:29 - unity Forum um there's a lot of
74:31 - tutorials on that it should be
74:32 - relatively uh
74:34 - simple um I will not stream at ludum Dar
74:38 - uh unfortunately I will be participating
74:40 - but I cannot really say how much I'm
74:43 - time I'm able to dedicate yet and so
74:45 - setting up streams and all of that it's
74:47 - both really time consuming and frankly
74:50 - quite taxing especially if you need to
74:52 - uh uh to stream for so long so I'm I'm
74:55 - really sorry but I'm not going to be
74:56 - streaming it on this time I am however
74:58 - going to be recording my progress on the
75:00 - game and unless it turns out really
75:02 - really bad I'm going to make a
75:04 - postmortem uh video the same way that I
75:06 - did where it's kind of behind
75:08 - the scenes and I show the creation of it
75:11 - that was just really really fun I think
75:13 - it's one of the best videos uh on the
75:15 - channel if I if I may say so myself I
75:17 - think it's uh it's just a lot of fun
75:19 - because it combines a lot of subjects
75:21 - and and shows kind of the full process
75:23 - of game development at least the fun
75:26 - process cool so
75:30 - um
75:34 - um yeah so um someone asks keywords like
75:38 - rigid body are being called obsolete by
75:40 - unity I know it's for downwards comp uh
75:43 - compatibility but how old is this why
75:46 - don't they just remove them they also
75:47 - change networking stuff so old projects
75:49 - don't work anymore why keep this old not
75:51 - working stuff I think um
75:55 - yeah that one is a tiny bit silly I mean
75:57 - what they do is they have this automatic
76:00 - Patcher that just takes all of your code
76:03 - and makes it use modern Unity standards
76:05 - and that worked a lot when they did a
76:07 - big um API change in the beginning of
76:11 - five um Unity 5 um I think really what
76:14 - they did to the API is a lot better and
76:17 - so I don't use those OBS obsolete things
76:20 - anymore it is for backwards
76:23 - compatibility and some people are just
76:25 - too used to it and need some time uh but
76:27 - yeah I mean it's not really helping me
76:30 - but again if I had a huge Unity project
76:32 - that would be kind of annoyed if they
76:34 - didn't support it for at least um some
76:36 - months or a year so but I'm sure they'll
76:40 - remove it at some point uh it's also
76:42 - really nice for tutorial channels like
76:44 - my own that they keep stuff like that
76:46 - working just so that when people watch a
76:48 - tutorial that might be a a tiny bit
76:50 - dated um they can actually use the code
76:53 - it's not just going to break and they
76:54 - get and they say well F this I'm out
76:57 - this I don't want to do game development
76:59 - it's just a warning saying that you're
77:01 - not using it totally optimally uh but
77:03 - frankly beginners don't care about
77:05 - what's optimal so I I I actually kind of
77:07 - like that they support that stuff um in
77:10 - terms of being able to follow along with
77:12 - um with
77:14 - tutorials
77:16 - um all you guys are giving me
77:18 - compliments that's so that's so thank
77:20 - I'm so thankful for that
77:23 - um what kind of pro products do I use
77:27 - for my
77:29 - beard I have a I actually use nothing um
77:33 - I don't use any kind of products I I use
77:35 - soap uh and I trim it a bit and that's
77:40 - it if it looks like I'm using product I
77:43 - don't know if I need to take that as a
77:44 - compliment but I'm sorry I don't really
77:46 - use anything and uh Sophia is laughing
77:49 - over here she's having a blast um so uh
77:54 - let let me see what else we
77:57 - have um do I still need a model designer
78:00 - I'm actually it's kind of an ongoing
78:02 - project and I'm always looking for 3D
78:04 - artists and it's something that I wanted
78:06 - to talk about here I don't want to say
78:08 - what it is that I'm doing just yet but
78:11 - if you are a 3D artist and have some
78:13 - experience especially if you I mean U
78:16 - modeling texturing exper experience is
78:18 - pretty much required uh it's really nice
78:21 - if you can do concept art if you know
78:22 - how to do character design and riging an
78:25 - animation but all of those are just plus
78:28 - uh extra things that are really nice to
78:29 - have but if you know how to do 3D models
78:31 - and have some experience feel free to
78:33 - just throw me an email at apply bra.com
78:36 - again apply brais I'm just going to put
78:39 - that in the chat apply bra.com and um
78:43 - yeah it would be super awesome to work
78:45 - with you guys we already have a lot of
78:46 - people working uh on the project and
78:48 - it's just it's so much fun so feel free
78:51 - to uh throw me an email right away after
78:52 - the uh stream ends um with a link and
78:55 - make sure you include a link to your
78:57 - portfolio or previous works I'm not
78:59 - going to um consider you unless you
79:02 - actually show me some of your work
79:04 - because this is an artistic thing and I
79:06 - need to see uh some some work so that I
79:08 - know we're kind of in line in terms of
79:11 - uh yeah you
79:14 - know um cool so what else are is going
79:17 - on here how much knowledge in C++ do I
79:20 - have um limited amount I know my way
79:22 - around C++ I can read uh a lot of C++ I
79:26 - don't feel fluent um but I I feel like I
79:28 - know the language pretty well but then
79:30 - again C++ is such a huge language so
79:33 - it's just really something that I feel
79:35 - that I know the surface of uh but I I
79:38 - can code a bit in C++ but don't hire me
79:40 - as a proficient C++ coder just just
79:44 - saying don't do
79:45 - that cool um do I watch The Walking Dead
79:49 - um I have watched it I don't anymore I
79:52 - watched I believe three or four Seasons
79:55 - um fun
79:57 - show uh really in a decline of quality I
80:01 - think I think the first season was
80:02 - really exciting then the second one was
80:04 - n and then it just got worse so I kind
80:06 - of lost interest but yeah fun show
80:11 - um let's see what's else what else is
80:13 - going on here um am I planning on
80:16 - starting a bit more advanced series on
80:18 - YouTube and RTS would be amazing again I
80:20 - I would say that an itts would be really
80:22 - fun as well it's just one of the most
80:24 - heavy things that you can do um at all
80:28 - and I would like to do some more
80:29 - advanced stuff um but it really depends
80:31 - on kind of what most of my audience want
80:33 - to see if you guys a lot of you guys
80:36 - want to see some advanced stuff that's
80:38 - awesome but in terms of Engagement I
80:41 - feel like most of you or most of my
80:44 - subscribers at least maybe not all the
80:46 - ones who are here but you guys are
80:47 - probably more hardcore uh than the
80:50 - average subscriber but most of of the
80:53 - subscribers I feel want to see more
80:55 - beginner related stuff but I of course
80:58 - want to do some advanced stuff and of
80:59 - course we're going to do that at uh some
81:01 - point also want to do maybe not quite as
81:04 - long series but more tailored towards a
81:07 - specific subject for a long time I
81:09 - really wanted to do like realistic car
81:11 - movement uh for like racing games and
81:14 - stuff like that that could be so fun so
81:16 - I want to create some miniseries of
81:18 - Standalone tutorials as well and though
81:20 - uh one of those might be really Advanced
81:22 - I mean uh we could look into that
81:26 - do I have any advice for young game
81:27 - developers um I'm 14 years old yeah just
81:30 - keep at it man just keep making stuff um
81:33 - try and um Set uh realistic goals for
81:37 - yourself so don't try to create these
81:39 - huge projects where you get burn out and
81:41 - um really what you learn most doing is
81:46 - just small finished projects even though
81:48 - it's maybe just something like this just
81:51 - getting some core um mechanics in there
81:53 - trying to make it fun and trying to make
81:55 - it work tuning the colors even though it
81:57 - feels really simple and might not have
82:00 - AAA Graphics or uh a huge networking
82:03 - system or anything like that just try
82:05 - and make something that you know that
82:07 - you can complete because finishing a
82:09 - game and getting the experience of
82:10 - putting it out there and getting your
82:11 - friends to play it is one of the most
82:13 - important parts I mean it's something
82:14 - that you're are going to need experience
82:16 - in if you decide to do a uh project
82:19 - that's larger and will require multiple
82:22 - years of development so that you don't
82:23 - make a mistakes takes on the later
82:25 - stages of development and also kind of
82:27 - just to put fuel on the fire so that you
82:30 - don't lose interest I mean that would
82:32 - just be really really not cool so yeah
82:35 - just practice man it's it's a lot of fun
82:36 - find some friends who who want to do it
82:39 - with you and and make some games with
82:41 - them that's sometimes the most fun
82:44 - part um what is programming H Jesus
82:48 - programming is getting to do computers
82:51 - to do stuff that you want them to do
82:54 - it's pretty much my best explanation I
82:56 - think um and you often have to do that
83:00 - by telling them really obvious and
83:01 - stupid
83:04 - things um so let me
83:07 - see
83:09 - [Music]
83:12 - uh
83:16 - um how cost this uh to call the
83:19 - component of an object I assume you mean
83:23 - finding a component using get component
83:25 - or calling a function on the component
83:28 - that's two separate things it's not too
83:31 - costly Unity has really optimized
83:33 - finding game objects and finding
83:35 - components uh a lot since they started
83:38 - of course it does require tiny bit of
83:41 - time but really if you want to see how
83:43 - costly it is and it totally depends on
83:45 - the uh scale of the game object if it's
83:46 - a huge game object with 20000 components
83:49 - it's going to be really slow uh so they
83:51 - do optimize it in that way um but really
83:55 - you can just open the profile and have a
83:56 - look at how long it
83:58 - takes
84:03 - um
84:06 - see
84:07 - [Music]
84:09 - um am I planning to do a 2d terrain
84:12 - generation series like the terrain in
84:14 - the 2D physics based card game um that
84:17 - wasn't actually generated that was just
84:20 - um me jumping in Photoshop and creating
84:22 - a ridiculously large um path and then
84:25 - just filling it out with color it's only
84:28 - cuz I never showed you kind of the
84:30 - confines of the level that you would
84:32 - think that that was actually generated I
84:35 - mean if enough guys uh enough of you
84:37 - guys suggested I definitely could look
84:39 - into that it's kind of advanced um but
84:43 - it could also be really really fun so
84:44 - again I I pretty much want to do
84:46 - anything guys um as long as enough of
84:48 - you guys want to see it um I'm up for it
84:51 - I mean programming is fun and and trying
84:53 - to do stuff that I maybe hadn't thought
84:55 - of myself as always a challenge so
84:58 - that's
84:59 - awesome um let's
85:04 - see uh next episode of Game man Theory
85:06 - when what is about an aquatan
85:08 - explanation um yeah next episode of uh
85:11 - game man theory is going to come don't
85:14 - worry it's not over when I don't know
85:17 - when I when I get time uh the side
85:19 - project that I haven't told you about
85:21 - yet which is the reason why I'm looking
85:22 - for artist has taken up a lot of time
85:24 - I'm sorry um but um I definitely want to
85:27 - do more game ma Theory I think it's
85:29 - probably some of the videos I have the
85:31 - most fun creating but they are also
85:34 - hugely time uh um huge time swallowers I
85:38 - mean it took
85:40 - me about five to six seven times as long
85:44 - to do just one of those videos as a
85:46 - normal video so it's it's really a lot
85:48 - but and what is it about I have some
85:50 - ideas querian might be in there that
85:52 - could be pretty fun I've seen a lot of
85:54 - you guys suggested but also curnan is a
85:57 - more difficult subject than what some of
85:59 - the other uh videos entail and it kind
86:03 - of requires some understanding of some
86:05 - fields that I don't feel like I've
86:07 - covered yet so I might want to do other
86:09 - videos first and then we can always look
86:11 - into quas later but I'm still figuring
86:13 - that out it depends on how much I can
86:14 - feel like I can squeeze into a video
86:16 - without having it be like too much to to
86:19 - follow along
86:21 - with um let's see
86:30 - uh can I make a multiplayer RPG again
86:34 - I'm sorry I'm not going to be making a
86:35 - multiplayer RPG it's simply too heavy
86:38 - both when it comes to code when it comes
86:40 - to Art sound everything in a multiplayer
86:44 - RPG
86:45 - is oh it just requires a lot I
86:50 - mean maybe not a massively online multi
86:54 - player RPG that's for sure maybe an RPG
86:58 - maybe multiplayer I don't know I don't
87:00 - want to say never I mean if all of you
87:02 - guys just suddenly started saying Mega
87:04 - multiplayer RPG you would have one
87:06 - tomorrow I'm kidding I I wouldn't be
87:08 - able to do that but I would definitely
87:10 - do my best to to kind of cram everything
87:12 - I could into a
87:14 - tutorial uh what was my first
87:16 - programming language my first um non
87:19 - visual programming language was on
87:22 - Visual Basic
87:25 - uh didn't like it not one bit um I also
87:29 - tried to kind of read some python
87:31 - because I played around with the uh
87:33 - blend new game engine and that had some
87:35 - visual scripting but also also python U
87:39 - but yeah the first programming language
87:41 - that I really fell in love with was uh
87:43 - was JavaScript and then
87:46 - C is is now my I feel like my main main
87:50 - language um make a m in the next live
87:53 - stream
87:54 - yeah
87:55 - [Music]
87:56 - no um in the project do I need animators
88:00 - and rigers um yeah I mean not as many as
88:05 - I need modelers and and people who can
88:07 - texture uh but if you feel like you want
88:10 - to be part and uh if you're I mean it
88:14 - would have to be combined so you would
88:15 - have to know both rigging and the
88:16 - animation I wouldn't include just an
88:19 - animator just a rigger unfortunately
88:21 - because um we work in smaller teams and
88:23 - so yeah uh we would have to you would
88:27 - have to know both um do I need low poly
88:30 - or detail 3D models I actually need um
88:33 - both so yeah you can just submit and
88:35 - show me your work and I will let you
88:37 - know if if it
88:39 - works
88:41 - um any advice on starting a YouTube
88:44 - channel that's interesting this is not
88:46 - the sort of thing that you guys normally
88:48 - ask me
88:50 - um yeah do I have any advice I think the
88:54 - greatest advice is kind of figuring out
88:58 - your Niche is figuring out who is
89:01 - actually going to be interested in these
89:03 - videos and once you have that who how
89:07 - are they actually going to discover it I
89:09 - mean it's it's to core question and it
89:11 - it might sound obvious but I I think a
89:13 - lot of people find uh make some really
89:16 - really interesting videos and I follow a
89:18 - lot of uh YouTubers who make awesome
89:22 - content but the problem is that no one
89:24 - is discovering it and that's the whole
89:26 - thing with tutorials is uh you could go
89:28 - ahead and make a how to make a
89:29 - multiplayer FPS series or you could go
89:32 - me in how to make a cyberpunk RPG FPS um
89:38 - for uh beginners
89:41 - only and uh that targets a certain am
89:44 - you want it to be as spec or as general
89:46 - as possible but while without being well
89:50 - annoying you still want to answer the
89:52 - questions that you say in the title but
89:54 - not use clickbait I don't do that at
89:56 - least uh I don't think so uh but yeah
89:58 - you want to kind of figure out something
90:01 - that people will actually be searching
90:02 - for especially if you do tutorials you
90:04 - want people to discover it through
90:06 - search so yeah but again I'm not the one
90:09 - to give YouTube advice I mean I'm a
90:11 - tutorial maker more than I feel like I'm
90:13 - a YouTuber so yeah
90:17 - um yeah so how would you find multiple
90:20 - game objects with a specific tag in a r
90:24 - yeah uh game game object. find game
90:27 - objects with tag will give you an array
90:30 - of all of the game objects with a
90:32 - specific tag then you need to sort
90:34 - through that array so Loop through it um
90:37 - with a four or four each Loop and then
90:39 - you want to check the distance from your
90:41 - current object to that object and uh if
90:44 - it's greater than your range discarded
90:46 - if it's less than the range well then
90:48 - you can use that so that's that's how
90:51 - you do it it's not performant but it's
90:53 - hard to get that stuff really uh really
90:56 - fast
90:58 - um
91:01 - uh oh I'm try having a really hard time
91:04 - keeping up with all the questions
91:07 - here uh let's
91:11 - see
91:14 - uh advice for turn-based fighting system
91:17 - I've never created a turn-based fighting
91:19 - system I'm sorry that's not something I
91:21 - have experienced in so I wouldn't really
91:23 - know
91:24 - um any specific advice for this
91:28 - genre uh
91:31 - yeah
91:34 - um RPG game Basics will be awesome I
91:37 - mean that could be really fun I mean we
91:39 - can definitely do something with um some
91:42 - RPG basic mechanics that's totally
91:45 - possible again it quickly becomes very
91:48 - feature heavy these RPGs and very
91:50 - content heavy especially uh but we could
91:52 - stick to the basics and just get
91:54 - something working on there that's
91:56 - totally possible even make it
91:57 - multiplayer but that adds some
91:59 - development time
92:01 - [Music]
92:02 - um yeah do I understand shaders depends
92:05 - on the uh Shader Shader language but I
92:08 - feel like I know most of what it
92:10 - requires to um write and understand
92:13 - shaders uh but really it's really nice
92:16 - that uh Unity standard Shader does so
92:19 - much now I feel like it does really 90
92:23 - maybe even 90 5% of what I need when
92:26 - when creating graphics for um for a game
92:29 - for 3D game um that's just so many
92:33 - texture Maps so many settings I mean
92:34 - it's PBR so that's awesome um if you
92:37 - don't know PBR stands for physically
92:39 - based rendering and it basically means
92:41 - that you calculate how the light um
92:44 - actually interacts with the object based
92:46 - on properties that you would find in
92:48 - real light like roughness roughness
92:51 - metallic um and stuff like that color
92:55 - emission uh and uh the really cool thing
92:58 - about that is when you have PBR rendered
93:01 - materials and textures um you can take
93:04 - one object make it look awesome in one
93:05 - scene and one lighting condition and
93:07 - then take it into another scene in
93:09 - another lighting condition and it will
93:11 - still look great because we're actually
93:13 - calculating it based on real values and
93:16 - not just B based on some madeup hacky
93:19 - way so yeah uh looks a lot
93:22 - better
93:26 - um yeah so I think we're kind of getting
93:30 - to the end of the stream now I am my
93:33 - voice is almost giving up and um also I
93:36 - feel like um we've covered a lot so if
93:39 - you have any final questions ask away
93:42 - now we'll just take a few more minutes I
93:44 - had so much fun guys really um I think
93:48 - uh the result of the game it turned out
93:50 - awesome and again this will be on the
93:53 - YouTube Channel it will be immediately
93:56 - available as a twitch archive and um it
94:01 - will also um yeah the project will also
94:04 - be uploaded to GitHub so that's um yeah
94:08 - you have all of it there accessible
94:10 - afterwards in case you miss something so
94:12 - let me just see the final questions here
94:16 - um can you add player teams to your
94:19 - multiplayer PS Pro modes like CTF and
94:21 - Team Deathmatch um that would be
94:24 - interesting it also requires a lot of
94:26 - code changing so I might not do that uh
94:29 - right now just thinking about what it
94:31 - would require at least I have some
94:33 - things that I want to do first I want to
94:34 - do weapon switching it's a really
94:36 - important one also kind of wanted to do
94:38 - a sniper with scope and stuff like that
94:41 - um also wanted to add some more weapons
94:43 - so yeah uh I have some other things that
94:46 - I want to do first how about NPCs in the
94:49 - multiplayer FPS I think if I'm going to
94:51 - do something with NPCs and AI should be
94:54 - for a separate video because uh NPCs and
94:56 - pathfinding and stuff like that is
94:58 - really
95:00 - um is really quite I mean if you're just
95:05 - going to have someone uh follow the
95:07 - player just have an enemy follow the
95:08 - player and use pathfinding it's really a
95:10 - general thing you can you can reuse th
95:13 - those sorts of scripts in a lot of
95:15 - different places and I don't think it's
95:16 - too specific for the multiplay FPS
95:18 - especially because you know all you need
95:19 - to do to make a network is put a
95:21 - transform component on it or Network
95:23 - transform and it will synchronize or you
95:25 - could have them move independently so
95:28 - yeah I think that uh that's not work uh
95:31 - it's not highest on the priority list
95:33 - but again just suggest it I'll write it
95:36 - down I keep track of what you guys
95:38 - suggest and I'll figure out what we
95:39 - should do
95:41 - next um breus would you consider doing a
95:43 - new AARP algorithm series that's more
95:45 - adjustable I know there are a few but
95:48 - they all have some flaws totally true uh
95:51 - I would definitely consider that if a
95:52 - lot of you guys want to see
95:54 - um that was just what I was touching on
95:56 - as well I mean AAR path pathf finding is
95:58 - is awesome and it's really easy um to
96:01 - use I also know that um Sebastian leg
96:04 - has some awesome uh videos on scripting
96:07 - uh pathf finding and stuff like that uh
96:09 - yourself I think he both has using a
96:12 - library like AAR and also from scratch
96:15 - but you can check that out Sebastian leg
96:17 - so yeah shout out to him he makes
96:19 - awesome content
96:21 - um yeah so so I guess we will uh wrap up
96:25 - the stream right here thank you so much
96:28 - to all of the U people who were here and
96:31 - to those of you viewing afterwards I had
96:33 - so much fun really successful stream and
96:36 - thank you to all the guys asking
96:38 - questions and stuff like that if you
96:40 - have a burning question you don't feel
96:41 - like was answered you can go to forum.
96:44 - breast.com make a post there um there
96:46 - are a lot of awesome you guys some of
96:48 - them in here uh who um is ready to
96:51 - answer your questions and uh I'm also on
96:54 - there once in a while I'm sorry if I
96:56 - don't spend too much there but um I do
96:58 - have a YouTube channel to make videos
97:00 - for or you guys will get really mad so
97:03 - yeah later tonight um I think I'm uh
97:07 - going to have a new video up so that's
97:09 - awesome and also I just wanted to
97:11 - mention that I am on a fixed video
97:13 - schedule now so that means that
97:15 - Wednesdays and Sundays is when I upload
97:20 - new videos so if you don't see a video
97:22 - on Wednesday on Sunday ping me let me
97:25 - know what's going on or ask what's going
97:27 - on because then there's something wrong
97:29 - so yeah that's pretty much it thank you
97:31 - so much for watching this stream I had a
97:33 - blast if you want to support the streams
97:35 - and uh support the videos and all that
97:37 - you can go to patreon.com slra that
97:40 - what's makes what makes this whole thing
97:43 - possible you can donate a monthly amount
97:46 - so recurring donations and you can
97:48 - cancel them at any time and get some
97:50 - rewards as well it's so awesome that you
97:52 - guys are donating on there thank you so
97:53 - much to all the people who are already
97:55 - donating and to the people who might
97:57 - donate when we're done here so yeah
97:59 - that's totally optional and uh thanks
98:01 - guys I'll see you soon bye thanks to all
98:04 - the awesome Patron supporters who
98:05 - donated in November and a special thanks
98:07 - to Sultan Al Sheriff fil Mari James Kell
98:10 - hound and Robert bonam become a patreon
98:12 - yourself at patreon.com
98:15 - braies