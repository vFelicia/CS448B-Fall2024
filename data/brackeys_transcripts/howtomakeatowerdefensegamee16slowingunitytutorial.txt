00:00 - this video is brought to you by our own
00:01 - Metta thank you so much for donating if
00:03 - you want to support breakage yourself
00:04 - you can go to patreon.com/scishow Cheers
00:06 - thanks for tuning in at brac ease hello
00:11 - we want to look into this video in
00:12 - creating a tower defense game in unity
00:13 - today we'll be finishing off our laser
00:15 - beam err but actually making a damage
00:17 - and slow our opponents in the process
00:20 - we'll also clean up our code a bit
00:21 - separating out some of the enemy
00:23 - movement from some of the stats and
00:26 - dying in that kind of stuff so yeah a
00:29 - much needed video and it's just dig
00:30 - right into it so as you can see I'm
00:33 - community and what I want to begin with
00:34 - is just remove this laser beam er from
00:36 - our scene and then we'll only spawn it
00:39 - through our shop because there's really
00:40 - no reason for it to sit there cool and
00:43 - then what we'll do is we'll find the
00:45 - prefab down here and we'll have a look
00:47 - at how it's composed so we have the
00:49 - turret here and this is where we handle
00:51 - all of our shooting so let's double
00:53 - click that to open it up and basically
00:55 - what we want to do is just add another
00:58 - variable on to the part that is
01:00 - exclusive to our laser here so under the
01:03 - hitter use laser this is where we'll go
01:05 - ahead and make a new float and we're
01:07 - going to make it a public float and
01:09 - actually let's make it an integer I
01:11 - don't think we need that much control
01:13 - and let's make this our damage over time
01:16 - and whatever this is set to is the
01:19 - amount of damage that the enemy will
01:21 - receive each second it's hit by our
01:24 - lasers so by default let's just set it
01:27 - to something like I said it's something
01:28 - like 30 and that means that each second
01:31 - our laser will be damaged by 30 hit
01:33 - points or our laser will damage our
01:36 - enemy by 30 hit points great and then we
01:39 - can go down here and inside of our
01:41 - update loop you can see we call a laser
01:44 - each frame and then we can go down here
01:46 - to where we do all that stuff
01:48 - lasering and we could either add it to
01:52 - the top or to the bottom this is all of
01:55 - the graphic stuff and then down here we
01:57 - could damage actually I think I'm going
01:59 - to do this before all of the graphics
02:01 - stuff because it is the most important
02:03 - port important part is actually damaging
02:07 - the enemy so what we could do here is
02:09 - just simply go target and our target has
02:12 - a compare
02:13 - in code enemies so we could go get
02:15 - component of type enemy and then we can
02:18 - do dot take damage and we could input
02:21 - some amount in our case we want to input
02:23 - our damage over time and then multiply
02:26 - that by time.deltatime in order to
02:29 - cancel out any differences that might be
02:33 - are between one computer's frame rate
02:35 - and another computer's frame rate and
02:37 - this will also make sure that this is
02:39 - per second and not per frame so cool so
02:44 - this should actually work however I take
02:46 - damage method currently is only used to
02:49 - receiving an integer and because we are
02:51 - damaging the enemy a tiny bit each frame
02:54 - we can't really deal in integers we
02:56 - might damage him by point zero five one
02:59 - frame or whatever depending on the
03:01 - damage over time and depending on the
03:03 - frame rate so let's go in and just
03:04 - modify our take damage and this is super
03:07 - easy we just need to find our enemy
03:08 - script double click it and instead of
03:10 - having a public integer health here
03:13 - we'll make that into a float gives us
03:15 - more control and then down here we can
03:17 - make this into a float as well so we'll
03:19 - take the amount as a float and that's
03:22 - all we need to do and we should actually
03:23 - see this working out so if we go in here
03:26 - hit play and I'll scroll over and spawn
03:30 - one of these guys in you can see that if
03:32 - we wait I'm a pasta game here and select
03:36 - our enemy you can see he's currently on
03:38 - 14 health here and if we just keep going
03:41 - you can see quickly decreases and then
03:43 - he dies so that is indeed already
03:46 - working however there are a few issues
03:49 - with this the first one is that um
03:52 - currently we are getting the component
03:54 - of our target every single frame and
03:57 - that's a super taxing operation
03:59 - especially if you have a really complex
04:01 - object so what we're going to do instead
04:03 - is cash this into a variable much like
04:06 - we have a variable up here containing
04:08 - our target we'll create another one one
04:11 - which is going to be of type enemy
04:13 - containing our target enemy oil just
04:16 - call it enemy the enemy component of our
04:19 - target and we're not going to default
04:21 - that to anything but we are going to set
04:23 - this instead inside of this if statement
04:25 - here so
04:27 - we update our target search for the
04:29 - nearest enemy we get the nearest enemy
04:32 - and we set target equal to the nearest
04:34 - enemy dot transform and what we then do
04:37 - is simply say that we want our target
04:41 - enemy to be equal to the nearest enemy
04:44 - dot getcomponent of type enemy so
04:47 - basically the same thing that we did
04:49 - down here but we're just making sure
04:52 - that we only do this when we actually
04:54 - update our target and that is a lot less
04:57 - than every frame cool so um then we can
05:01 - just replace this piece of code here
05:03 - with our target enemy and things should
05:06 - still work just fine so the next thing
05:09 - that we want to do is add some slowing
05:11 - to our enemy and before we actually do
05:14 - that I want to separate out some of the
05:16 - code because if we currently have a look
05:18 - at our enemy script I find it's a bit
05:20 - more complicated than it necessarily
05:22 - need to be because we have speed
05:24 - variable we have a health variable then
05:26 - we have some value which is the enemy's
05:29 - worth and I am actually going to go in
05:32 - here and replace that with words and in
05:34 - order to rename something and substitute
05:38 - the name all other places as well you
05:40 - can just to control RR in visual studio
05:43 - and you could also go right click and I
05:46 - believe it's called rename here in some
05:48 - programs it's called refractor or you
05:51 - could of course just write a new thing
05:52 - and then place it all the other places
05:54 - that it appears so now it's called our
05:57 - worth there and um then we have a death
06:00 - effect and that these things all make
06:02 - sense this is stuff central to the enemy
06:04 - it's things that describe the enemy
06:06 - speed health birth and how it looks when
06:09 - it dies and then we get to the target
06:12 - and the wave point index and this is
06:14 - something that's very specific to
06:16 - movement so what I want to do is take
06:18 - stuff like this and move it into a
06:19 - separate script just to kind of make our
06:21 - whole code easily easier to read and
06:24 - more modular so we'll go inside and find
06:28 - our enemy prefab here let's create a new
06:31 - component called well enemy movement and
06:34 - let's make this a new script and it
06:36 - create an ADD and let's double click
06:37 - that to open it up in Visual Studio as
06:39 - well
06:40 - and reload all there and let's just
06:44 - remove all of the default stuff in here
06:46 - and let's paste some stuff from here so
06:48 - let's select the start method and these
06:50 - two variables because that's all
06:52 - movement code
06:53 - let's hit control X to cut it out and
06:55 - then that's paste it inside of our enemy
06:58 - movement and we have more to go then the
07:00 - take damage method again specific to
07:03 - describing the enemy and changing the
07:05 - health around the same thing with our
07:07 - dying and then we have our update and
07:09 - all everything we do inside of the
07:11 - update is movement related we get a
07:13 - direction we translated we also find the
07:15 - distance to the next point and stuff
07:17 - like that and getting the next Waypoint
07:19 - and ending the path all of this is
07:22 - specific to movement so let's take all
07:23 - of this code as well and simply cut that
07:26 - out
07:26 - control the X or command X if you're on
07:28 - the Mac and it's then copy that in here
07:31 - instead and this should work right off
07:34 - the bat except for one thing and that is
07:36 - our speed variable because that speed
07:39 - right here that we're using to determine
07:41 - well how far we want to move each frame
07:44 - um that actually sits still inside of
07:47 - our enemy and we could of course go
07:48 - ahead and move our speed inside of our
07:50 - enemy movement but then we wouldn't have
07:53 - a central place for all of this stuff
07:55 - that we want to change about our enemy
07:57 - and I think it's a good player good to
07:59 - have a place you could call it enemy
08:01 - stats or just enemy um with all of the
08:04 - characteristics of your enemy and then
08:06 - have other components connect to that
08:08 - enemy in order to get information about
08:10 - speed and health and stuff like that so
08:13 - let's just sync up our enemy movement to
08:15 - the enemy our script so in order to do
08:19 - this we'll first required it as a
08:21 - component so we'll say our enemy
08:23 - movement won't work on this we have a
08:25 - component of type enemy that sits on the
08:28 - object that will just ensure that and
08:30 - then we'll also make a reference to this
08:34 - a private variable called enemy and
08:36 - we'll just call this one enemy with a
08:38 - non-capital either and in the start
08:41 - method will set enemy equal to get
08:44 - component of type enemy so now we find
08:48 - the enemy on our objects and we call it
08:50 - enemy and then we can simply instead of
08:53 - going speed we can go
08:54 - enemy speed and it's it's actually that
08:57 - easy to do awesome so I believe that's
09:01 - all we needed to do here so on the next
09:04 - thing that we could do and let's just
09:06 - test out if this is working here so you
09:07 - can see we have enemy movement but it
09:09 - has no attributes we only have all of
09:12 - our attributes in here and they should
09:15 - link up nicely so that when we now hit
09:16 - play and wait for an enemy to spawn it
09:19 - works just as before and what this
09:22 - allows us to do now is if we go inside
09:24 - of our turret we have our target enemy
09:26 - and we can go in here and add a new
09:28 - function say we want to go target enemy
09:30 - dot slow and then we want to give it
09:32 - some slow factors say 0.5 meaning that
09:36 - we will cut the speed in half we could
09:40 - also do 0.3 meaning that it should only
09:42 - have 30% speed or you could turn it
09:46 - around and say that at 30% slow which
09:49 - means it will have 70 points percent
09:51 - speed you can do whatever you want there
09:54 - let's actually do some kind of
09:56 - percentage so the number that we input
10:00 - will be the amount that we want to slow
10:02 - so in order to do this let's make this
10:06 - into a variable first of all so let's
10:08 - make a public float here and this is
10:09 - going to be our slow percent or
10:12 - percentage and we're going to set that
10:13 - equal to something like maybe 0.5 is
10:17 - going to be just fine for now it might
10:20 - be quite a heavy slow but we're not
10:23 - going to have it so that turrets if you
10:25 - have multiple turrets on one target that
10:27 - it will stack we're just going to set
10:31 - this as a limit so even though you have
10:34 - two turrets on the same target it's
10:36 - still just going to be half the normal
10:37 - speed and so let's do that and let's go
10:40 - down here and let's just call the
10:42 - function right away and then we'll go in
10:44 - and create that so we'll have some
10:46 - method called slow and we'll put inside
10:48 - of that our slow percentage or actually
10:51 - I'm going to do slow amount and that is
10:55 - going to be a value between zero and one
10:58 - zero between meaning that we want slow
11:00 - at all and one meaning that we will on
11:03 - completely remove
11:06 - this speed so we'll just make the enemy
11:09 - stop so yeah and then we'll add this
11:13 - function in here and we can use pretty
11:15 - much on this way of writing the method
11:18 - as inspiration so this is also going to
11:20 - be public because we will call it
11:21 - outside the cut class it's going to be a
11:23 - void because we don't want to return
11:25 - anything it's going to be called slow
11:27 - and it's going to take in some kind of
11:29 - amount or percentage or whatever you
11:32 - want to call it I'm just going to call
11:33 - this one percentage and um percentage is
11:36 - a bit misleading because it's a valuable
11:38 - to zero and one and not in hundreds but
11:41 - that's alright we don't need to get too
11:44 - technical with this and then we can say
11:47 - here we simply want to set speed equal
11:51 - to and now comes the problem because
11:52 - what do we really want to write here do
11:55 - we want to say that we want to multiply
11:56 - speed by the one - the percentage here
12:02 - so this would mean that our new speed
12:05 - would be equal to our old speed and then
12:08 - multiplied with and we would have to do
12:10 - this multiplied with one - our
12:13 - percentage so in case we want to slow by
12:15 - 30% we would write point three and that
12:19 - means that we want our speed to be 70
12:21 - percent of the original speed so one
12:23 - minus 0.3 is equal to 0.7 and speed
12:27 - times 0.7 would be 70 percent of our
12:31 - speed so that this makes sense however
12:33 - if we do this every frame our speed will
12:37 - keep on the our speed will keep
12:40 - decreasing because we'll do that every
12:42 - frame will reduce by thirty percent
12:44 - every single frame and then eventually
12:46 - we are going to gradually go on towards
12:49 - zero it's never going to reach zero but
12:51 - it's going to get really close and slow
12:53 - up really quickly so instead we want
12:55 - this idea of a start speed some base
12:59 - speed that we work off and use as a base
13:03 - line so on this speed here we're
13:06 - actually going to keep that and then
13:07 - we're also going to have a public float
13:09 - which is going to be our start speed and
13:13 - we're going to set this equal to ten by
13:15 - default as well and we can now remove
13:17 - this here because we don't want a speed
13:20 - be equal to anything we want that to
13:21 - start off at the start speed and then be
13:23 - modified as we go and then we can go in
13:26 - here and create a void start and inside
13:30 - of this start method is where we want to
13:32 - set speed equal to start speed so when
13:36 - we start the game or speed variable
13:37 - becomes side speed and then down here we
13:40 - want to set speed equal to start speed
13:42 - and because start speed is never
13:45 - modified we can do this every frame no
13:47 - problem so on there we go
13:49 - so that should actually modify our speed
13:52 - however a few problems again will arise
13:55 - so if we have a look inside of unity
13:58 - here you can see now that our enemy has
14:01 - a start speed but this speed still shows
14:03 - up and it's annoying because we don't
14:05 - want to be able to modify this it's not
14:07 - going to have any effect you can see as
14:09 - soon as I start on the game here and
14:11 - then find an enemy that is actually
14:13 - spawned in here we go so we'll select
14:16 - this enemy here you can see that the
14:18 - speed is just set to the same as the
14:20 - start speed it doesn't matter and so
14:22 - what we'll do about this is um we'll
14:28 - simply remove this start of this speed
14:30 - here from the inspector we still want it
14:33 - to be public because we want it to be
14:34 - accessible from within our enemy
14:36 - movement but we don't want it to show up
14:38 - so we use a tag here called hide in
14:41 - inspector and writing this right before
14:44 - any variable simply means that it will
14:47 - not show up so it says here makes a
14:48 - variable not show up in the inspector
14:50 - but be serialized so there we go
14:54 - cool so that is all the functionality we
14:57 - are going to need here and you will
14:59 - notice that if we go in here now and
15:01 - create one of these and make him shoot
15:03 - you can see that it actually slows the
15:05 - opponent however um however if we were
15:09 - to put in a bit further away here maybe
15:13 - here it slows and you will see that when
15:17 - he gets out of range he's still slowed
15:19 - so we need some way of cancelling this
15:21 - back out and the way that we are going
15:24 - to do this is we're going to utilize on
15:25 - how unity calls update loops ghost
15:30 - currently our turret here is calling the
15:33 - laser
15:34 - function inside of the update loop and
15:35 - the laser function then slows the target
15:38 - enemy and we go in here and that changes
15:41 - our speed then in our enemy movement the
15:45 - update loop is called
15:46 - and that means that we will use that
15:49 - speed to actually move what we could
15:51 - then do is just in here change the speed
15:55 - variable back so we could say enemy dot
15:58 - speed equals enemy enemy dot start speed
16:04 - there we go so we've now reset our speed
16:07 - and that's going to be fine because it
16:09 - means that if our turret is no longer
16:11 - slowing us we've just reset our variable
16:13 - but if it's still slowing us well then
16:16 - it's just going to call this again and
16:17 - slow it again it's going to go in and
16:20 - change the speed and then it's going to
16:22 - use the speed to move and then reset it
16:24 - again so we have this loop here where
16:27 - one update changes the speed one update
16:29 - uses it and then resets it and unless
16:32 - the other one is called again
16:33 - fine it's just reset and if it does well
16:36 - then we just go in a cycle and that's
16:41 - because the way that unity handles these
16:43 - update functions is that it calls all of
16:45 - the awake functions then it calls all of
16:47 - this start functions and there's a whole
16:49 - hierarchy to this and all of the update
16:51 - functions are called
16:53 - on not at the same time but just after
16:55 - one another and you might say well what
16:58 - happens then if our enemy movement is
17:01 - called before our enemy thing here but
17:04 - well that isn't actually necessarily a
17:07 - problem because that just means that we
17:10 - will call this code an enemy speed will
17:12 - be the normal speed and then it's going
17:14 - to reset it and then the other thing
17:17 - here is going to be cold so the next
17:18 - time that this is cold this speed will
17:20 - have changed so that will just offset by
17:22 - a single frame which is definitely not
17:24 - noticeable but if we wanted to get rid
17:26 - of that I will show you how you can do
17:28 - that in just a second but for now let me
17:30 - just demonstrate that this should in
17:32 - fact be working so if we now go in here
17:34 - and place a guy and that is not going to
17:37 - work because he is going to kill the
17:39 - enemy before we can do anything about it
17:41 - so that just place one here you can see
17:43 - it slows the enemy and then he speeds
17:46 - but right up again so it already works
17:50 - just the way we want it to and this is
17:51 - going to work with all of the different
17:53 - towards no many no matter how many torch
17:56 - we have so we could go ahead here and
17:58 - place multiple of these in there and
18:00 - let's just do that by allowing ourselves
18:02 - to start with a bit more money so let's
18:04 - just start with a lot of money here hit
18:08 - play and we can go in here and we can
18:13 - put some of these guys down and you can
18:15 - see right now they will damage the
18:17 - enemies a lot but as and the amount of
18:19 - enemies spawn increases you will see how
18:21 - they easily just switch between targets
18:24 - so you can see that's the first one then
18:26 - it's those the second one and and that
18:28 - this should just be working so what we
18:31 - can then do is easing a is maybe a
18:34 - better practice than just having the
18:37 - movement be offset by a single frame
18:39 - would be to go in and ensure in some way
18:42 - that on the enemy script here is called
18:46 - before the enemy movement and a way we
18:49 - can do this and of course unity supports
18:50 - this is we go under edit then project
18:53 - settings and go under what is called the
18:55 - script execution order and normally I
18:58 - tell beginners not to mess around with
19:00 - this because normally you can get around
19:03 - this by writing different code and in
19:05 - this case you could do that as well you
19:07 - could have some kind of for example a
19:09 - list of all of the different debuffs
19:12 - that you want to put on your chart and
19:14 - then or on your enemy and turrets can
19:16 - then register a debuff and then
19:18 - unregister it when it stops shooting and
19:20 - then on the enemy will just be
19:22 - responsible but for going through all of
19:24 - the deep buffs and adding them on each
19:26 - frame and that's maybe a more solid way
19:29 - to do it but I think it's definitely
19:30 - overkill for what we're doing because we
19:32 - only want one type of debuff but on what
19:35 - you can do here is you can go ahead and
19:37 - add a new script so we're going to add
19:39 - our enemy movement and icloud still
19:42 - demands of me to purchase something and
19:46 - you can see here it add scripts to the
19:49 - custom order and drag them to reorder so
19:51 - in our case here the default time is
19:54 - when all of the different scripts will
19:56 - be are executed and we can go ahead and
19:59 - put a
19:59 - small delay on our enemy movement and
20:01 - that means that all of our scripts will
20:03 - execute along with the enemy script that
20:05 - changes and our turret script that
20:08 - changes our speed and then when they're
20:11 - done exactly 100 milliseconds after we
20:15 - are going to execute the enemy movement
20:16 - so this just allows us to put an order
20:18 - if we wanted this to execute before we
20:20 - could simply drag it up there and it's
20:22 - now executed negative a hundred on so
20:25 - that means 100 milliseconds before the
20:27 - default time and we could actually go in
20:30 - here and be explicit about it as well so
20:31 - we could go in here and put our enemy
20:33 - before there and do that but I think
20:36 - this is going to work just fine so if
20:38 - you hit a plan that you won't see any
20:40 - real noticeable difference but the
20:43 - scripts are now executing in the proper
20:47 - manner here so you can just see that
20:49 - working they're awesome so I'm actually
20:53 - really happy with what we've done with
20:55 - the lasers here and they are just so
20:57 - much fun to play around with and this
20:58 - was pretty much all I wanted to show for
21:01 - this video if you have suggestions as to
21:02 - what you want to see next definitely
21:05 - leave them in a comment I want to do
21:06 - some something about ending the game we
21:09 - also have to look at game ballots at
21:11 - some point and I also kind of want to
21:13 - expand on the different types of enemies
21:16 - that we're able to spawn and how they
21:18 - increase in our difficulty as the game
21:21 - goes on so thanks for watching that was
21:24 - all for this video and I will see you in
21:26 - the next one thank you so much to all of
21:28 - the awesome people who donated in
21:29 - September and especially thanks to our
21:31 - own Metta Robert Rhodes James Calhoun
21:34 - Kim Rose cuccos Bao and Damned Wong and
21:37 - vixen pea thank you so much for donating
21:39 - you guys are awesome if you want to
21:41 - support brackets yourself you could go
21:42 - to patreon.com/scishow