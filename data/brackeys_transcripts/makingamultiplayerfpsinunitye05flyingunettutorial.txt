00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number
00:05 - five on making a multiplayer FPS in
00:08 - unity in this video we take a look at
00:10 - adding some really cool spring physics
00:12 - to our movement and also we're going to
00:16 - add a camera rotation limit which a lot
00:19 - of you have has been requesting and
00:20 - which is definitely something you need
00:22 - to do before release and finally we are
00:25 - going to add some thrusters to our
00:28 - players so that we can actually fly so
00:29 - we're going to script all of this and
00:31 - it's going to be a lot of coding and
00:33 - some physics stuff and it's going to be
00:35 - a lot of fun so let's go ahead and get
00:36 - started so let's start by adding these
00:38 - cool spring physics to our player in
00:41 - order to do this let's just hit play and
00:43 - go on the land host in order to get our
00:45 - player in the game now in the scene view
00:48 - let's select our player and have a look
00:49 - at his components we need to add a new
00:52 - component and you can see I've already
00:53 - searched for joined in here but if we go
00:56 - under physics and scroll down you can
00:59 - see the configurable joint which is the
01:02 - one that we are going to be using the
01:04 - effect that we want kind of resembles
01:07 - the spring joint effect but we need to
01:09 - tweak a few things that are only
01:12 - configurable in well the configurable
01:14 - joint so let's click that and you can
01:17 - see just why it is called what it is I
01:20 - mean we can pretty much change anything
01:22 - from in here and create any kind of
01:25 - joint effect so therefore it also looks
01:28 - very frightening but don't worry we're
01:30 - only going to use a few of the settings
01:32 - and I'll explain everything along the
01:33 - way so the tab that we kind of want to
01:37 - look under here is the wide drive tab
01:39 - and in here we can set a mode and we
01:44 - want to set this to position and that
01:46 - means that our ball will now try and
01:49 - reach a certain position and the
01:51 - position that it tries to reach is what
01:54 - it's spawned at up here so you can see
01:57 - our cube was at position 1 when it was
02:01 - spawned a Y position of 1 and therefore
02:04 - this becomes kind of the anchor point
02:07 - the point that this object will apply
02:11 - forces in order to reach
02:13 - so therefore the point of the spawn
02:17 - position suddenly becomes very important
02:19 - and this is something that we are going
02:22 - to need to change later in order for our
02:25 - ball to be able to land on all the
02:28 - objects and have that as kind of the
02:30 - position that it wants to reach so that
02:33 - it doesn't stand on a cube and applies a
02:35 - lot of force in order to get down to the
02:37 - ground plane well we want that to become
02:40 - the new ground plane but that's
02:42 - something that we're going to add in the
02:44 - future for now we are just going to have
02:46 - him float at the one point so if we now
02:52 - that we know that that's the position
02:54 - that we're going to strive for well then
02:56 - we would think that if we drag this up
02:58 - he's just going to bump down there but
03:00 - he stays the same and the reason why we
03:03 - need to bump up this position spring
03:05 - amount and this is the amount of force
03:07 - that we want to apply to our spring so
03:10 - if we set this to something like 20 you
03:12 - can see that now we get this spring
03:14 - effect however at the moment it's a very
03:17 - loose string a spring and it's it's very
03:19 - bouncy and the bounciness is definitely
03:22 - something we want but we want to limit
03:24 - this a bit then you would think that we
03:26 - would use the precision damper but this
03:28 - has absolutely no effect so we leave
03:31 - that at zero instead we go up and take a
03:34 - look at our rigid body settings under
03:36 - here we have a property called drag drag
03:40 - is different from mass because if we
03:42 - increase the drag we are going to slow
03:45 - down quicker but it doesn't actually
03:47 - make our object heavier I like to think
03:50 - of drag as air resistance so how much
03:53 - much resistance do we need and therefore
03:56 - how quickly do wish slow down after
03:58 - force has been applied so if I change
04:01 - this to something like 10 you can see
04:03 - just how effective this will be we slow
04:06 - down very quickly and this takes away
04:08 - all bounciness and that's way too high
04:11 - instead I found something like for it to
04:13 - be a fairly reasonable amount you can
04:15 - see we still get that bounce
04:18 - but it's nowhere is nowhere near as
04:21 - crazy so I think that kind of resembles
04:25 - this thrust the force that we want to be
04:27 - applied under our object you will also
04:31 - notice now that when I do this we don't
04:35 - collide with the ground and the reason
04:37 - why is fairly simple there is no real
04:40 - collider on the ground at the moment so
04:43 - we are going to add that so let's just
04:45 - copy our actually let's add that in a
04:48 - second because we have one last thing
04:50 - that we want to set under your
04:51 - configurable joint and that's the
04:53 - maximum force because right now if I
04:55 - drag this cube up really high you can
04:57 - see just how much force is applied this
05:00 - is not very realistic with gravity as
05:03 - gravity is a constant force of negative
05:07 - 9.81 and therefore we need to set a
05:11 - maximum force so that our it doesn't act
05:15 - like a spring but instead acts like
05:17 - gravity's pulling it down therefore we
05:20 - set this to something like I don't know
05:23 - 30 or 40 and this is not the same as
05:26 - gravity we don't set it to negative 9.81
05:30 - nor ATU but still trust me this is
05:34 - normally a pretty good numbers now you
05:36 - can see when I drag this up it's much
05:38 - more reasonable speed it's falling down
05:42 - with so that becomes much much more
05:45 - realistic and now it looks like a
05:47 - constant force so now that we have these
05:51 - settings what we want to do is we want
05:52 - to copy this component exit play mode
05:55 - and remember we've been playing mode
05:57 - this entire time go down here click here
06:01 - and hit paste component a sneer so now
06:03 - we've added it to the prefab and it's
06:06 - going to spawn with these settings you
06:07 - can see under why Drive these position
06:09 - size set in a moment we're going to set
06:12 - these through a script but firstly I
06:14 - want to go to the environment and add a
06:16 - box Collider to a ground plane so let's
06:18 - just enter box Collider there and that's
06:20 - pretty much all we need to do now when
06:22 - we hit play it's like land host and go
06:26 - in here to mess with our player
06:28 - there is we can see that if we dragon up
06:32 - very far enough and let go is simply
06:35 - going to collide with the ground there
06:41 - cool so now that we have these proper
06:46 - physics working I think it's time to add
06:48 - some kind of flying mechanic so we in
06:51 - order to do this we're going to edit our
06:52 - player motor and play a controller
06:54 - script so first off let's lick look at
06:57 - the player motor so let's double click
06:58 - that and open it up in visual studio and
07:03 - we're going to open up the player
07:05 - controller too so I'm just going to
07:07 - double click that so actually let's
07:09 - start with the player controller now
07:11 - that it's already open so you can see in
07:13 - here we have a few variables we have the
07:16 - speed and the look sensitivity well of
07:18 - course we want to create a new one for
07:20 - the thruster speed so let's also make
07:23 - this side serialize field in order to be
07:27 - able to keep it private and still view
07:28 - it in the inspector and we'll call this
07:30 - thruster force
07:31 - I will default that to a fairly high
07:34 - number and that's going to be a thousand
07:37 - now in the start method I actually want
07:41 - to do something but let's just stay away
07:45 - from that for now and let's just
07:46 - implement the thruster force and then
07:48 - I'll talk about how we can make sure
07:50 - that the spring ignores or that the
07:53 - player ignores the spring when we are
07:56 - using a thruster because when we have
07:59 - the both applied at the same time it's
08:02 - hard to get cool results but we'll talk
08:04 - about that in second so that's just how
08:06 - look applying applying this first a
08:08 - force so down here we can say that we
08:11 - want to apply the thruster force and if
08:17 - we look at our movement script we can
08:19 - kind of see where we're going so we have
08:21 - this velocity variable that we put into
08:25 - a move method down here and that
08:28 - basically takes care of everything well
08:30 - we can do something similar here so we
08:33 - can say that if we get an input dot get
08:39 - button so if the button jump is
08:42 - rest and this is again one of those
08:44 - inputs defined in the unity editor well
08:49 - then we want to kind of set our thruster
08:52 - force variable on the player motor to
08:55 - the thruster force variable defined here
08:58 - so let's start out by making a vector3
09:01 - and we are going to call this underscore
09:05 - thruster force so this is going to be
09:08 - our local thruster force and we want to
09:10 - default that to vector 3.0 so unless we
09:15 - get this jump button we are going to
09:18 - apply a force of zero comma zero comma
09:20 - zero meaning that we are not going to do
09:22 - a thing if we then get that button well
09:25 - then we want to set underscore thruster
09:27 - force equal to vector three dot up
09:31 - that's going to be a vector of 0 comma 1
09:33 - comma zero and then multiply that with
09:37 - our thruster force as defined above so
09:41 - that's kind of the logic that we need
09:44 - here and then we want to call something
09:46 - on the motor that will apply this force
09:50 - for us so I'm just going to move this
09:52 - down apply the thruster force down here
09:54 - and we simply want to say motor dot
09:58 - apply thrusters and in here we want to
10:03 - set or we want to input our underscore
10:08 - thruster force so again this is going to
10:11 - be zero comma zero comma zero if we
10:13 - don't get a new input and if we do it's
10:16 - going to be zero comma thruster for is
10:19 - come as zero cone so here we calculate
10:24 - the thruster force based on player input
10:32 - awesome so let's save that and let's
10:34 - head into the player motor and in here
10:37 - we want to go up here and create a new
10:39 - private variable that will store our
10:41 - thruster force vector three and we'll
10:46 - just call this thruster force again and
10:48 - then it's going to default to vector
10:50 - three that's zero because unless we get
10:52 - any input we wanted to have a serosa
10:55 - root of zero value
10:56 - and then down here we we use some kind
10:59 - of get of setter so public void and
11:05 - let's just call this thruster force and
11:09 - it's going to take in a vector or what
11:13 - we we call this apply thrusters what we
11:16 - call this so apply thruster and it's
11:20 - going to take in a vector three thruster
11:23 - force and remember the underscore there
11:25 - and it's simply going to set our
11:27 - thruster force variable equal to the
11:31 - value passed in to underscore thruster
11:33 - force there just as we've done with
11:35 - anything else and this is going to get a
11:38 - force vector for our thruster thrusters
11:45 - cool and now under our perform movement
11:50 - I think it's fine if we do our thruster
11:52 - force in here sense it is actually
11:55 - movement we are simply going to check
11:57 - just like we do with velocity if
11:59 - thruster force is not equal to vector
12:02 - 3.0 because we can save ourselves the
12:06 - the move position call if we don't need
12:09 - to do anything at all and of course this
12:11 - is not going to be moved position this
12:13 - is going to be add force and we do this
12:16 - because we actually want this to behave
12:19 - as a force not just a rigid movement we
12:23 - want this to calculate or to slowly
12:27 - speed up and all that so add force and
12:30 - it's going to take in a vector3 force
12:32 - and this is of course going to be our
12:34 - thruster force and we want to multiply
12:37 - with that with time that fixed Delta
12:40 - times just as we do up here and then in
12:43 - order for this to stay constant no
12:47 - matter our mass because I I want us to
12:49 - be able to change the mass of our player
12:51 - without having to tweak this value all
12:54 - the time well then we can set force mode
12:56 - equal to force mode on acceleration so
13:00 - we can simply put that in as a second
13:02 - argument and you can see if I just hover
13:05 - over this it says adds a continuous
13:07 - acceleration to the rigid
13:09 - the ignoring its mass so that's simply
13:12 - all we have to do in order to make mass
13:15 - or take mass out of this calculation so
13:19 - now it's actually going to perform this
13:22 - calculation for us and it should apply
13:24 - it to the rigid body you can see that we
13:29 - have this thruster variable so if we
13:31 - were to go into play land host we can
13:34 - actually apply some thruster force
13:37 - however you will notice that the spring
13:41 - quickly forces us down and a solution to
13:47 - this would be going under the
13:50 - configurable joint and setting the
13:53 - maximum force to something smaller than
13:56 - the force that we are applying and
13:58 - therefore and our this will have to be
14:01 - really small maximum force of 5 maybe we
14:04 - are almost there
14:05 - of two you can see we can go further now
14:10 - but it's still forcing us down so
14:13 - instead what we are going to do and
14:17 - we're going to set this back to 40 what
14:19 - we're going to do is we're going to
14:20 - disable the configurable joint while we
14:23 - are using our thrusters but as you can
14:26 - see the configurable joint can't just be
14:29 - disabled and there are many reasons for
14:33 - these for this not something I'm going
14:35 - to go into but I'm going to show you how
14:37 - we can work around this well basically
14:40 - we want to control our precision spring
14:43 - so it equals zero Y we have our first
14:46 - two supplied and where we are not using
14:48 - them well then we want to go back to the
14:51 - amount that we've set and in order to do
14:55 - this let's actually strain away from
14:58 - setting anything in the configurable
15:00 - joint and then have some variables
15:01 - inside of the controller instead or our
15:05 - motor now let's have them inside of our
15:09 - controller that will configure the joint
15:11 - so instead of setting all the values
15:13 - down here let's simply require that
15:15 - component and then set all of the stuff
15:18 - in here I think that works way smoother
15:20 - especially if other people want
15:23 - use the same script or we want to use it
15:25 - on other objects well we don't have to
15:27 - set any custom settings we simply add
15:29 - the script that adds to configure the
15:31 - Joan giant a component and sets it up
15:34 - all right so let's integrate this
15:36 - configurable joined into our script so
15:39 - let's open up the player controller
15:42 - script here let's just expand that and
15:45 - up here let's make a reference to it
15:48 - first of all and if we make a reference
15:50 - well then we want to require it also
15:53 - because we are not going to do any kind
15:55 - of component checking so I require a
15:57 - component type off and then configurable
16:01 - joint and we want to add the reference
16:05 - down here so that's going to be a
16:06 - private configurable joint I'm just
16:10 - going to call this joint and in the stat
16:13 - method we simply want to set joint equal
16:16 - to get component of type configurable
16:19 - joint awesome and now down here all we
16:26 - need to do ah is right okay so I just
16:35 - had something there for a moment well
16:37 - basically we want to set up this
16:38 - configurable giant with some different
16:40 - options and the first thing we have to
16:43 - do is well make these options available
16:46 - in the inspector so under the thrusted
16:49 - force here I want to create a new
16:52 - section and in order to organize this
16:54 - properly in the inspector we can create
16:56 - a header for this so in here we'll
16:58 - simply type on joint options or
17:04 - something like you could also do spring
17:07 - settings whatever you want to do now
17:10 - we'll just do spring settings now and a
17:13 - colon and that will just make if we save
17:17 - this and hit into unity and wait for
17:20 - this to update we actually have to have
17:23 - some variables below it looks like so
17:25 - let's just make some we have a
17:27 - serialized field and this is going to be
17:30 - a private and this is going to be a
17:33 - joint our mode
17:36 - gende DriveMode there and we just want
17:39 - this to be called the mode we also want
17:42 - another serialize field and this is
17:45 - going to be a private float and this is
17:49 - going to be our joint spring and that's
17:52 - actually called this joint mode and a
17:59 - third serialized field because we don't
18:02 - want to change our dampening effect
18:05 - because then dampening amount because
18:07 - that has no effect so this is going to
18:09 - be our joint max force and we are going
18:14 - to default that to let's say 40 and the
18:18 - joint spring to 20 cool so now when we
18:22 - say that and hit into unity we should be
18:25 - able to see this in the inspector and
18:26 - you can see the header that the spring
18:28 - settings and then we have these
18:29 - different settings here and the join
18:32 - mode we want to set that to position and
18:34 - we can also maybe set that to a default
18:36 - value so we'll say joined drive mode
18:39 - that position is going to be the default
18:43 - value there cool so now we have the
18:47 - different settings but then we want to
18:49 - apply them to our joint component and
18:51 - let's do this through a function so
18:53 - let's make a private method down here
18:56 - because we only want to access it from
18:58 - within our controller and we are simply
19:00 - going to call this set joint settings
19:03 - and in here because the join settings is
19:09 - a struct which which we haven't talked
19:12 - much about this we need to use a certain
19:15 - syntax and the syntax looks like this
19:18 - so we access our joint and then we go to
19:21 - the Y Drive because that is the drive
19:25 - settings that we want to control so and
19:27 - you configure the joint you can see the
19:29 - Y Drive here and that is the settings
19:31 - that we've made so the Y Drive is a
19:36 - struct called a new joint Drive so the
19:41 - joint Drive struct contains information
19:44 - about the mode the spring effect the max
19:48 - force and all that and we
19:50 - want to input that there you can't
19:52 - actually access these individually you
19:56 - cannot set position spring like this if
20:00 - we try and do that you can see that it
20:02 - throws an error here because of the way
20:05 - that this is programmed so we actually
20:07 - have to make this a new joint drive and
20:09 - then we can fill that with information
20:12 - so normally here we would put an open
20:16 - and close parenthesis
20:17 - well now we use these curly brackets and
20:20 - in here we can then set first off we can
20:23 - set mode equal to joint mode comma and
20:29 - then we can set position spring equal to
20:33 - joint spring and we can finally set
20:37 - maximum force equal to joint Max force
20:41 - there we go and I don't want this on one
20:46 - line so we're just going to make some
20:49 - room here
20:50 - to kind of organize the code a little
20:53 - bit there we go that looks much cleaner
20:55 - and maybe actually also move this down
20:57 - there and that looks really nice and
21:01 - private void this is going to be we
21:05 - don't want to return anything and we
21:08 - want to actually be able to input a
21:09 - parameter here because the thing that we
21:11 - are going to be changing dynamically is
21:13 - the joint spring so let's create a flow
21:16 - float here and let's do underscore joint
21:20 - spring and let's set that into there so
21:25 - instead of just using the value up here
21:26 - we're going to use the value passed in
21:29 - and now I've been this start method all
21:32 - we need to do is we want to say set
21:35 - joint settings and we want to input our
21:38 - joint our string so just the default
21:41 - amount that we've said in the inspector
21:43 - then down here when we are applying
21:46 - thruster force so if we get this button
21:48 - jump and we applying the force well then
21:50 - we want to set joint settings and then
21:53 - we want to set a spring amount of 0 we
21:56 - don't want the spring to affect anything
21:58 - at all and if we are not
22:02 - getting this button down bow then we
22:05 - want to set some giant settings and we
22:07 - want them to set set the giant spring to
22:10 - the giant spring passed in okay so if
22:15 - that makes sense to you great if not
22:17 - please just copy my settings here and
22:19 - pick up on what makes sense I mean the
22:22 - reason this might seem a bit clunky but
22:25 - that's because it's programmed as a
22:27 - struct and there are so many settings so
22:29 - selling them individually can be kind of
22:31 - clumsy but once we have this set up here
22:35 - it's just going to work fine and I don't
22:37 - think we're going to have any need to
22:38 - change it awesome so now that we have
22:42 - that in place we should be able to go
22:45 - into unity check if all of this is still
22:48 - working it looks like it and now hit
22:50 - play and select LAN host and now if we
22:54 - go into now if we try and use our
22:57 - thrusters here you can see that they
22:59 - actually completely ignore the joint
23:05 - there so we can continue a far above as
23:08 - we want to but we want to also set our
23:11 - drag here so I forgot about that before
23:13 - so we want to set that to 4 and we can
23:16 - also adjust the thruster force and maybe
23:18 - the spring amount 20 is maybe a bit too
23:21 - much so let's try 15 instead and let's
23:24 - jump in here and we can see what that
23:26 - looks like and that looks a lot better I
23:29 - think so we get this much more smooth
23:32 - effect and I think we actually want to
23:37 - set our thrust of force to something
23:39 - like 1200
23:42 - that feels a lot better but again this
23:45 - is something you can play around with
23:46 - just as you want to so I'm going to set
23:49 - that back up to 20 and maybe try 1300
23:53 - here now oops
23:56 - 1300 hit play land host and yeah this
24:02 - feels much more snappy and and cold so
24:04 - that's basically all for this spring
24:07 - effect so the last thing that we're
24:08 - going to be doing here is clamping the
24:11 - camera rotation so that we cannot look
24:14 - well
24:15 - what is behind us so right now if we go
24:18 - in here and look down you can see we
24:21 - have an issue here we just want that to
24:22 - stop add something like negative 85
24:25 - degrees and the same if we look upwards
24:28 - you can do the same there we want to
24:30 - clamp that too so in order to do this
24:32 - let's open visual studio and let's look
24:36 - at the player motor because we want to
24:39 - do this where we are actually performing
24:41 - the rotation here so first up let's
24:44 - create a variable and I actually want to
24:48 - change how we are doing the camera
24:50 - rotation just a bit so first off let's
24:52 - just create a serialize field here and
24:55 - that's going to be a private float and
24:58 - this is going to be the camera rotation
25:02 - limit and we're going to default that to
25:06 - 85 F because we want that to be a float
25:11 - and we want to apply that but demo at
25:15 - the moment we are using this camera
25:17 - rotation which is basically our input
25:19 - multiplied with our look sensitivity and
25:23 - we're using camera transform rotate to
25:26 - apply this rotation to our current
25:28 - rotation but I want to kind of do this
25:31 - manually instead so we have control over
25:34 - how the rotation is applied and
25:36 - therefore we can clamp the rotation
25:38 - correctly so if we just scroll up here
25:41 - and change this from a vector3 to a
25:44 - float that will allow us to use this as
25:48 - an X rotation only and we are just going
25:52 - to default that to zero and we want to
25:55 - change this down here too and we're
25:57 - changing this to a float because that's
25:59 - going to make it a lot easier for us to
26:03 - apply the rotation we're not having to
26:05 - think about all of the Rd axes so you
26:08 - will see what I mean in a second so we
26:09 - want to change that to an X that to an X
26:12 - that to an X and down here we want to
26:15 - completely replace our rotation code so
26:17 - new rotational calculation and then in
26:25 - our playercontroller we want to change
26:26 - this a bit to account for this change so
26:28 - instead of
26:29 - making a vector3 call camera rotation
26:31 - here I'm going to make a float called
26:33 - camera rotation and you can do an X
26:36 - there which we're going to do I think
26:38 - and instead of making a vector3 here we
26:42 - simply do underscore X rotation
26:45 - multiplied with Luke sensitivity and
26:47 - that's basically all we have to change
26:49 - in here
26:50 - so back in the player motor now we can
26:53 - take a look at actually setting this so
26:56 - basically we want to kind of track our
26:58 - current rotation on the x axis and in
27:01 - order to do this we want to make a new
27:03 - private variable up here and that's also
27:05 - going to be a float and it's going to
27:07 - store our current camera rotation on the
27:10 - X and that's going to also default to 0
27:13 - and then down here under the perform
27:16 - rotation we want to set let me just
27:21 - think about this we want to say that our
27:23 - current camera rotation plus equals our
27:27 - camera rotation on the X
27:30 - so whatever rotational value we get we
27:36 - want to add that onto our current
27:38 - rotation and I've done this before so I
27:40 - know that this is going to be a minus
27:42 - equals but this will basically inverse
27:44 - the rotation so if you get a weirdness
27:48 - in basically the camera being inverted
27:52 - but then you just need to change this
27:54 - from a plus to a minus or a minus to a
27:57 - plus so that's what you're just there
27:59 - and then we basically want to set camera
28:02 - current camera rotation X equal to math
28:06 - dot clamp and we want to clamp the
28:10 - current camera rotation X between a
28:13 - minimum and a maximum value and that's
28:15 - going to be our minimum camera rotation
28:18 - limit comma camera rotation limit there
28:23 - so a negative camera rotation limit come
28:26 - at the positive camera rotation limit so
28:29 - in our case negative 85 degrees 285
28:33 - degrees and then we simply want to apply
28:37 - this to our transform so we simply say
28:39 - cam that transform that local
28:42 - Euler angles equals a new vector3 and
28:48 - this is where it becomes really easy
28:50 - that we've only actually taken into
28:54 - account the rotation on the x-axis
28:56 - because I camera itself is not is a
29:00 - child of the player and therefore it's
29:02 - always going to have a rotation of
29:05 - whatever X amount and then comma 0 comma
29:08 - 0 and therefore we can simply put in
29:11 - here our current camera rotation comma 0
29:16 - comma 0 and we don't need to do any
29:19 - advanced calculations with cut unions or
29:22 - anything like that we can simply input
29:23 - it into the local angles after doing the
29:27 - clamp and that will do the trick so if
29:29 - we just want to kind of comment this out
29:32 - well we set our rotation and clamp it
29:39 - and then we apply our rotation to the to
29:49 - the transform of our camera so if we
29:55 - save this now and collapse that and look
29:59 - at our player we should see the camera
30:01 - mode has a camera rotation limit and we
30:04 - now press play land host and you can see
30:07 - that there's a limit when we look down
30:09 - and there's a limit when we look up so
30:13 - that's basically all we have to do we
30:15 - can now fly we have this spring bouncing
30:19 - s effect we have working fixed physics
30:21 - now because we've added the rigidbody
30:23 - and I'm just going to end this video
30:26 - with showing you that and we have this
30:28 - rotational clamp so just for fun let me
30:31 - actually play the game again here let's
30:35 - let me go into the scene and spawn a 3d
30:37 - cube let me just move this up right
30:41 - above the player and let me add a
30:44 - rigidbody to this cube and let me show
30:46 - you how cool it is when these interact
30:49 - so add a rigidbody and you can see that
30:51 - the physics here are working perfectly
30:54 - so that must be
30:56 - did for this video I hope you enjoyed it
30:58 - and I'll see you in the next one