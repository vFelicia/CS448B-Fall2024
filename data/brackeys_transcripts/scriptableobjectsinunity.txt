00:00 - Often while making a game, you need a good way of storing data
00:02 - Say if you're making an RPG
00:04 - You need to make a whole bunch of items
00:06 - each with their own stats and properties
00:09 - Of course you could create an item prefab and then make copies of it
00:11 - with different values, but this is both prone to error
00:15 - and very inconvenient. So instead we use scriptable objects
00:18 - ♫ [Heavenly Choir] ♫
00:20 - Scriptable objects are basically just data containers
00:23 - First, you create a template that defines what information
00:26 - each object should hold and then you create
00:29 - objects from that template. So in this video we'll learn
00:32 - how to use scriptable objects by looking at the example:
00:34 - creating cards for Hearthstone. Alright
00:37 - Let's go. So here's a simple scene with an empty card. If we have
00:40 - a look at it in the hierarchy, we can see that I have all
00:43 - of these different UI elements. I have a text object for
00:46 - the name, description, mana, attack and health
00:49 - As well as an image for an artwork
00:52 - And I've made sure to mask it out so it fits the card
00:55 - Let's now create a scriptable object that contains all of this
00:58 - information. To do that, we go to the project -> right click
01:02 - Create, C# script
01:04 - and let's call it "Card". Let's now click to open it
01:06 - Now we want to delete both our methods
01:09 - and this time we don't want to derive from MonoBehaviour
01:12 - Because this script is not gonna be sitting on another object
01:14 - It's more going to act as a template for all of the
01:17 - data that we want to store. To do that we want to derive from
01:20 - ScriptableObject. And now we're ready to define what values
01:24 - we want these objects to store
01:26 - And this is pretty simple: we want a string with the name
01:29 - of our cards, so we'll call this "name". We also want
01:32 - a string with the description of our card, we'll call that
01:35 - "description". Now we also wanna be able to define the artwork for our card
01:38 - So this is going to be some kind of image
01:41 - So we create a public sprite
01:43 - And we'll call it "artwork". And then finally we need the game-play stuff
01:46 - So we need a public int with the
01:48 - mana cost, a public int for the attack value
01:51 - and a public int for the health
01:54 - and here we have all information that each card
01:57 - will contain. Notice how we have a green line under the "name"
02:00 - That's because by default any object
02:03 - has a variable called "name". So we can either rename this
02:06 - to say "cardName" or we can just tell the object to use
02:10 - this definition of name from here on out
02:12 - To do that, we write "public new" string. And now every time
02:15 - we write "card.name", this is what it'll use
02:18 - So if we're now save this and go into unity
02:21 - Not much will happen here. You'll notice that I don't
02:24 - have any cards in the project. If I select this script
02:27 - it just shows the script here and for some reason we have a field
02:30 - for the artwork here, but none of the other stuff.
02:33 - Remember, this script is only the template for our cards.
02:35 - So how do we go ahead and create a card from this template?
02:38 - Well that's exactly what we need to define
02:41 - Unity makes this really easy with an attribute
02:44 - called "CreateAssetMenu".
02:46 - We need to always put this right above our class
02:49 - This will basically tell Unity to make
02:51 - it possible to create this object through the create asset menu
02:54 - Which means every time you right click in the project and go
02:57 - Create. So we're basically now adding a new object
03:00 - To this list. Now we need to define a few things here.
03:03 - Set default file name to something like 'New Card'.
03:06 - As well as the "menuName" to something like "Card"
03:09 - And if you have multiple cards you can create a submenu by going
03:12 - "Cards" and then "/" and then you can have all the specific cards in here
03:15 - But we only have one so we'll stick to Card.
03:19 - If we now save this and go to Unity (wait for the editor to
03:22 - compile here) and if we then right click
03:25 - go create, you can now see that there's indeed a card here
03:28 - If we press it, it's going to create an object.
03:31 - By default it says "New Card". Let's call this one "Edwin"
03:34 - Then at the top here we can set the name to "Edwin"
03:37 - We can create a description:
03:39 - "the baddest guy in town"
03:42 - Select some artwork I'm gonna open up here. I've already imported a sprite that we can use
03:46 - Set the Mana Cost, I'm gonna set that to 3, and attack value
03:49 - And the health value. So here we go. We've now created an
03:52 - object that is as simple as can be
03:55 - All it does: it stores information about a given card. And we can go ahead
03:58 - And create as many as these as we want. We can right click again.
04:01 - Go Create, "Card". This time we can create Tirion.
04:05 - His name is going to be "Tirion", his description is going to be:
04:08 - "His light shall burn you!"
04:10 - We can select some artwork. A Mana Cost, let's set that
04:14 - to 6, an attack value, and some health
04:17 - so now we've defined these two cards. But currently they're just sitting inside
04:20 - of the editor. We need some way of putting these cards
04:23 - Into the game.
04:25 - In other words we need to display them on the UI I've created here
04:28 - To do that we need another script. So let's select our card
04:31 - Add Component, and
04:33 - let's call this one "CardDisplay". Let's again
04:36 - select C# and hit create and add.
Let's open up Visual Studio.
04:39 - This time we want to delete our update method
04:42 - But let's leave our start method in here, because it's at the start of the game
04:45 - that we want to setup our card
04:47 - But in order to do this, we first need a reference to the scriptable object
04:51 - That we want to display. To do that, we'll simply create a "public"
04:54 - "Card". And we'll call it "card" with a non-capital "c".
04:57 - And it's actually that easy.
05:00 - Now inside of Unity we get this empty field where we can take any
05:03 - of our two scriptable objects. I'm gonna take Edwin here and drag
05:06 - him in. And now inside of our script we can access
05:09 - all of the data that we stored inside of this object
05:12 - So if we want it, we can just print out the name of the card
05:15 - By going "card.name". If we now save this
05:18 - and play the game, it's going to show
05:21 - "Edwin" in the console. So that's really cool.
05:24 - In fact we can also add symbol methods to our scriptable objects.
05:27 - We can go in here and create a public void
05:30 - called "Print"
05:31 - And this method will simply show some of the card information
05:35 - in the console. So we'll throw a Debug.Log
05:38 - And here we'll print the name of the card, followed by
05:40 - a description. So, a description on the card
05:43 - And then we can print, say, the mana cost, so we'll go
05:46 - The card costs
05:49 - and then the "manaCost". So if we save that and go
05:52 - into CardDisplay, we can simply call
05:55 - "call.Print();"
05:56 - And if we save this and hit play
05:59 - It's going to print:
06:00 - "Edwin, the baddest guy in town. The card costs 3."
06:04 - Awesome! But we can do better
06:05 - Instead of just showing this stuff in the console
06:08 - Let's show it on the UI
06:10 - To do that, instead of printing the card to the console, let's
06:12 - go and reference all of our UI elements
06:15 - To do that, we need to be using
06:18 - "UnityEngine.UI;" and now we can create a public Text
06:21 - This is going to be our "nameText"
06:24 - We'll also create a public Text "descriptionText"
06:27 - then we need a public Image
06:30 - this is going to be our artwork image
06:33 - And then a public Text manaText
06:37 - public Text attackText
06:40 - And you guessed it,
06:42 - a healthText. Then in Unity we'll setup these references
06:45 - So we'll put name into the nameText slot
06:48 - Then description, then the artwork image
06:51 - is under here, so there's an artwork image
06:53 - the manaText, the attackText
06:56 - and the healthText. And now in the start method, we can simply set
06:59 - nameText.text
07:01 - equals to "card.name;"
07:04 - and descriptionText.text = card.description;
07:08 - we can really just continue this way for the artwork image
07:11 - We need to make sure to access the sprite
07:13 - And set it equal to card.artwork. And for
07:16 - the manaText we'll go manaText.text
07:19 - equals card.manaCost. But we remember
07:22 - that manaCost is a number, it's an integer, so we need to convert
07:26 - this to a string. To do that, we simply call .toString();
07:29 - And we do the same thing for the attack and health.
07:32 - ♫ [Music Break] ♫
07:35 - And there we go! That should be all of the code that
07:38 - we need. If we now save this and try and play
07:41 - the game. We can see all of our UI elements
07:44 - get updated to show Edwin's information.
07:47 - And we can input any scriptable object here
07:49 - If you want to show Tirion instead, we simply drag in Tirion
07:52 - and hit play, and there we go! Our card
07:55 - is now Tirion. In fact, we can easily copy this card
07:58 - and place them side by side, let's make one
08:01 - of them Tirion and the other one Edwin. When we now play the game
08:03 - We can see our two cards. And right now we're just doing
08:06 - This in the start method. You can easily update this
08:09 - while the game is running. Because we're just swapping out
08:12 - simple information. And each of these scriptable objects are
08:15 - extremely small. You can see both Edwin
08:18 - and Tirion is only 1 Kb.
08:21 - So yea, scriptable objects are super cool.
08:23 - That's pretty much it for this video. If you enjoyed it, make sure to
08:26 - subscribe, so you don't miss the next one. I hope you guys had a
08:29 - Happy New Years, and I'm looking forward to an awesome 2018
08:31 - With plenty of game dev goodness! On that, thanks for watching!
08:34 - And I will see you in the next video.
08:36 - Thanks to all of the awesome Patreon supporters who donated in December
08:39 - and a special thanks to:
08:40 - @Youdaman, Armin Noroozi, Yorai Omer, beffio,
08:42 - UnnecessaryRoughness, InfinityPBR, Cyborgmummy
08:45 - Cole Cabral, Dan Evans, John Beauregard, SupermanTheG8,
08:48 - James P,  Jason Lotito, Derric Heemskerk,
08:52 - Fasal Marafie, Erasmus, Rob Fearn
08:54 - James Rodgers Alex Rakitsky, Manolis and Robert Bund