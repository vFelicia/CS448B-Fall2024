00:00 - this video is brought to you by our rune
00:01 - Mela I'm really sorry if I butchered
00:03 - your name thank you so much for donating
00:05 - if you want to support brackets yourself
00:07 - you can go to patreon.com/scishow
00:09 - thanks for tuning in at brac ease hello
00:14 - and welcome to this video and making a
00:15 - multi-player fist in unity today we are
00:17 - going to be continuing a bit on our user
00:19 - account system one specifically will
00:21 - finally take a look at synchronizing
00:24 - usually bound data so some data that is
00:26 - bound to the player that will persist
00:29 - through scenes and play sessions and
00:31 - what we are going to be using it for in
00:33 - this video is on players stats so we'll
00:36 - be adding a kill kill count and a death
00:39 - count and we'll be showing that in the
00:41 - menu and this video is focused on
00:43 - getting the data from the server and
00:45 - then in the next video we'll have a look
00:48 - at sending that when we're in the game
00:50 - and killing people and all of that so um
00:53 - I will just put a very quick disclaimer
00:55 - here and that is the way that we are
00:57 - doing this is definitely not safe so if
00:59 - you're really worried about hackers or
01:01 - if you want to expand this to a much
01:04 - larger system to save a lot of stuff
01:07 - what I really recommend is either you
01:09 - check out the database control Pro asset
01:11 - on the asset store that duck does cost a
01:14 - little bit but frankly when you do this
01:16 - kind of stuff
01:17 - it's it's very hard to do everything
01:18 - yourself and do it completely for free
01:20 - the other way is setting up your own
01:22 - MySQL database and then hosting it on
01:25 - some server but again then you have to
01:27 - pay for service space or pay for your
01:29 - own servers and it very quickly gets
01:31 - complicated and costly so that is why I
01:34 - chose to show it in this way in in this
01:37 - video and just to get it working and to
01:39 - show you kind of the basics of how it
01:41 - works and yeah I just wanted to mention
01:43 - that so I don't mislay mislead anyone
01:45 - and without further ado let's just jump
01:48 - right into it so you can see that I'm
01:50 - here you need I'm just gonna go ahead
01:51 - and clear my console and what I want to
01:53 - begin by doing is going on to our login
01:55 - menu here double click that to open it
01:58 - up in Visual Studio and this is the one
02:00 - script that takes care of the entire
02:02 - login process and I'm going to search
02:04 - for hello world and the reason why is
02:07 - right now when we are successfully
02:10 - registered here register register
02:12 - button when we register what on this
02:16 - login menu does is that it populates our
02:21 - it populates our data string our text
02:24 - variable with hello what and instead we
02:27 - want to publish it with something else
02:29 - now the way that we are doing it here is
02:31 - a bit limiting because the free version
02:33 - of database control only gives you a
02:35 - single text variable to sync across the
02:38 - network and that means that if you want
02:40 - to store multiple pieces of information
02:42 - such as both a kill count and a death
02:44 - count you will have to embed all of it
02:47 - into that string and then have some way
02:49 - of reading that string to retrieve it
02:52 - again and the way that we are going to
02:54 - be doing this is using our own little
02:56 - syntax to display that this is the kill
02:59 - count part and this is the death count
03:01 - you can also hook this up to either XML
03:04 - or JSON which is our two different ways
03:07 - of basically formatting some data to
03:13 - easily be written and read in basically
03:16 - just a text file or a string so you can
03:19 - of course hook it up to one of those
03:20 - that's XML or JSON but for what we're
03:24 - going to be doing we'll just do it the
03:25 - only our own way also so you can see
03:27 - kind of how this actually works so the
03:30 - way that I thought that we would do this
03:31 - is that we would have these tags these
03:34 - symbols that mark whether or not it's
03:37 - the kill account on the death count and
03:38 - I'm going to put these in square
03:40 - brackets so this is the amount of kills
03:42 - followed by a number which is of course
03:44 - our kill count so I'm going to put 0
03:46 - here you could also put 128 or whatever
03:49 - you want to do this is the amount of
03:51 - kills that we want to begin with then we
03:53 - do a slash that's going to mean or are
03:56 - we going to program it in in such a way
03:58 - that that's a now separated piece of
04:02 - data so we have kills here and then we
04:05 - separate that and then we have a new
04:07 - piece of data which is going to be our
04:09 - deaths and I'm just going to put 0 there
04:12 - as well and you can see right
04:14 - theoretically have a lot of different
04:17 - things in here we could then go I don't
04:19 - know Katie you could calculate that so I
04:21 - don't know playtime or whatever and then
04:24 - just keep on going but
04:26 - is how I want to format my string and I
04:28 - suggest unless you know what you're
04:30 - doing that you might format yours in the
04:32 - same way cool so let's say that and that
04:35 - just means that new users will have that
04:37 - information however if you're already
04:40 - existing users will not they will have
04:44 - hello world in there so what you can do
04:47 - is go window database control I'm not
04:49 - gonna press here or I have to blur out
04:50 - my ID and then clear out the database
04:53 - using the clear database or remove
04:55 - database or something our button and
04:59 - that will just clear out out all of the
05:00 - users or you can make a script saying
05:02 - that if this variable is equal to hello
05:06 - world change it to something else in
05:09 - case you already have a lot of users in
05:10 - your game I have just cleared out my
05:12 - database for this I suggest you you do
05:14 - the same and then we can continue code
05:17 - so what we want to do here is that now
05:21 - that we have set this up we want to use
05:24 - this information inside of a lobby
05:27 - screen so you can see here we have a
05:29 - joint game and a host game I want to
05:31 - create a new module over here with on
05:33 - the player stats so let's start by just
05:35 - drawing this out on the UI so let's go
05:38 - into canvas and let's create a new empty
05:40 - object here and I'm just gonna call this
05:42 - one modules so I'm gonna go up here
05:46 - modules I'm just gonna scale them to fit
05:49 - the two modules we already have here
05:51 - something like that and then we can take
05:53 - our host game and join game and move
05:55 - them under modules and I'm going to have
05:58 - this a scale on the vertical but not on
06:02 - the horizontal and I'm going to drag it
06:05 - out a bit
06:05 - and then what I'll do is I'll go here
06:08 - and add a layout and then horizontal
06:13 - layout group so it will lay those out
06:15 - automatically and then we can go ahead
06:17 - and maybe move the host game down here
06:20 - and duplicate it and rename this one to
06:22 - our player stats and rename the host
06:26 - game title to player stats title and
06:30 - then we can delete those two pieces of
06:33 - UI there and we can actually go in and
06:35 - change the text to you to player stats
06:38 - so this will of course display our
06:41 - player stats and what we can do here is
06:44 - maybe just select these three modules
06:47 - and then set the child alignment to
06:50 - upper center I think that looks better
06:53 - and then we can maybe add some padding
06:55 - in here or we could just go ahead and
06:57 - change the size of our module so I'm
06:59 - going to do that and I think that looks
07:01 - a lot better and then what we can do is
07:04 - we can duplicate the player stats title
07:06 - we can change the font size to something
07:08 - like maybe 18 we can have both of these
07:13 - maybe anchored to the right here so
07:16 - change that so the text Orient's itself
07:18 - to the right and then we can have this
07:21 - be our kill count and we're just going
07:25 - to put I don't know for now let's
07:28 - actually just put loading in here so
07:30 - that when we haven't retrieved any data
07:32 - it's just gonna say say loading but you
07:34 - could also put in something like 999
07:37 - kills here that's the idea but I'll just
07:41 - put in loading and we'll duplicate that
07:44 - and then have this be the death count
07:46 - and we'll put in loading there as well
07:49 - so I think that already looks fairly
07:52 - decent and yep without further ado let's
07:55 - let's continue the video here so let's
07:58 - add a new component here called player
08:00 - stats and let's double click this to
08:05 - open it up in visual studio and this is
08:09 - going to take care of loading in the
08:11 - player stats which is going to be our
08:13 - kill count and death count so the first
08:16 - thing that we really want here is a
08:18 - reference to that UI element so we're
08:21 - going to do to be using Unity engine UI
08:24 - and down here we'll be using public text
08:28 - and we're going to call this the on
08:31 - death count and public text and we're
08:36 - going to call this our kill count ah
08:39 - cool I'm just gonna switch the audio on
08:42 - those I I did that by holding down alt
08:44 - and then pressing up that's just gonna
08:46 - move the line there alright so now we
08:50 - can reference those inside of the edit
08:52 - and I'm just gonna do that right away so
08:54 - that we don't forget to do this at a
08:55 - later point so let's take our kill count
08:58 - and drag it in there and my death count
09:00 - and drag it in there cool so now we are
09:03 - able to actually change these so now the
09:05 - idea is that in our user account manager
09:09 - so if we go user account manager then
09:12 - dot instance then we have a function
09:15 - called get data and remember we if we
09:19 - find our user account manager we move
09:21 - this from the login menu from the script
09:25 - that was created by the guy who made
09:26 - database control inside of this user
09:29 - account manager so we would be able to
09:31 - access it from anywhere and on what this
09:35 - basically does here is that you can see
09:37 - if we are locked in it sends a request
09:40 - to get some data and if it successfully
09:43 - does that then it says sets locked in
09:47 - data which is a static string equal to
09:50 - that data I'm gonna change the way that
09:52 - this works just a little bit because
09:54 - instead of having this unlocked in data
09:57 - what I want to do is I want to use this
10:00 - get data request and then have a
10:03 - function that is called when it
10:06 - successfully gets the data that then
10:09 - that you can then choose or okay I'm
10:13 - gonna put this a bit differently you're
10:15 - going to call the get data function and
10:17 - then you couldn't go into input of
10:18 - another method that you want to get data
10:21 - function to call when it's successfully
10:23 - gotten some data and then the data
10:25 - itself can be passed in as a string to
10:27 - that function so how do we actually
10:29 - allow ourselves to pass in a function as
10:33 - an argument that means in here we're
10:35 - going to have some function here we're
10:36 - going to have a void on received data
10:41 - for example and it's going to take in a
10:44 - string with the data here and then we
10:46 - simply pass on receive data into that
10:49 - get data method here so that once get
10:52 - data finishes it's going to call on
10:54 - receive data how do we do this well it's
10:57 - actually really simple we use delegates
10:59 - so delegates are ways to UM so to create
11:04 - kind of a
11:05 - event that different functions can
11:07 - subscribe to and then be called when
11:09 - that event happens so we'll create a
11:11 - public delegate void and we're going to
11:17 - call this the on data received callback
11:23 - and it's going to take in a string with
11:25 - the data and we're going to close that
11:28 - off and what this allows us to do is now
11:31 - go down here under get data and take
11:33 - this on data receive callback as an
11:36 - argument and we're just going to call
11:38 - this on data received and we can call it
11:43 - then pass it on to the co-routine as
11:45 - well because we call this function as
11:47 - well so we'll have to call or pass on
11:50 - this on data received to that method
11:52 - down here and we'll have to allow that
11:55 - by adding another argument here there we
11:59 - go so we pass it on to the di enumerated
12:02 - D co-routine here and then down here
12:05 - instead of setting login data equal to
12:08 - data what we can then do is we can say
12:09 - on data received dot invoke and that
12:12 - will just go ahead and call that
12:14 - function whatever it is whatever method
12:17 - that we passed in will be called and it
12:20 - will be called using the data as the
12:25 - argument so that is how you can do that
12:27 - and we can then say if on data received
12:30 - is not equal to null so just in case
12:33 - something wasn't passed in then we don't
12:36 - want to go ahead and call it because
12:38 - that's going to lead to an error it
12:39 - can't call something that is not so in
12:42 - our player stats we have now set this on
12:44 - receive data and here we'll will then
12:46 - receive the data the reason why we have
12:48 - to do all of this is because it takes
12:50 - some time to get the data from the
12:51 - server and so if we were just going get
12:54 - data and then using the data here right
12:56 - afterwards in the side we if we went
12:59 - user account manager god I don't
13:01 - remember logged in and then data that
13:05 - would still be no it would be nothing
13:07 - because it has it hasn't actually
13:09 - received the data yet this is called
13:12 - right after it's a matter of
13:15 - milliseconds and it might take several
13:16 - seconds for it to get this data from the
13:18 - server so instead we use this way so
13:20 - that we're sure that we only use the
13:22 - data once it is actually received so
13:26 - here we can actually go ahead and say
13:27 - kill account equals text equals data
13:32 - however our data is currently in the
13:35 - weed formatted State it has both the
13:37 - kill count and the death count so we
13:39 - have to somehow translate this data but
13:42 - we'll do that in a sec what we'll do
13:44 - right now is we'll just debug that lock
13:46 - out our data here so we can see if it
13:49 - our coast code is at least working so
13:51 - far so what we should see now is that if
13:56 - we just hit play nothing is going to
13:58 - happen and the reason why is that it's
14:00 - only going to okay we get at no
14:03 - reference actually so let's see here
14:05 - okay we're calling the instance so we
14:07 - have to put in here if our user account
14:11 - manager Dodd is locked in we only want
14:16 - to do this if we're actually locked into
14:18 - the account man here there we go so now
14:20 - we should see that nothing happens here
14:22 - because we're not locked in however if
14:24 - we then trend oh I see someone playing
14:26 - here oh that's cool
14:30 - so if we now actually transition over to
14:33 - our let's see our login menu and log in
14:38 - with the user and I'm just gonna put in
14:40 - test one two three and test one two
14:43 - three login it's not going to work of
14:45 - course because I have to create a new
14:47 - user so we'll go ahead and do that test
14:49 - one two three test one two three and
14:52 - test one two three register hopefully
14:56 - this will work
14:57 - cool and you can see it says loading
14:59 - there but down here after a little while
15:01 - it gets our string so now all we have to
15:04 - do is on search loop through that string
15:07 - for the amount of kills and for the
15:09 - amount of deaths and then load that in
15:12 - and for that I think we should create a
15:14 - separate class so let's create a new C
15:16 - subscript here and we'll call this one
15:18 - the data maybe user account data
15:25 - translator or we could just do data
15:29 - translator which I think I'm going to do
15:31 - so we'll just have this
15:32 - be the data translator and let's double
15:34 - click that to open up in Visual Studio
15:36 - and everything we're going to be doing
15:38 - in here is going to be static we're not
15:41 - going to be using systems or collections
15:43 - or anything else we might actually be
15:46 - using system so I'm just gonna put this
15:48 - in here um cool so let's make a public
15:53 - static void and this is going to be the
15:56 - get or let's say data to kills and it's
16:01 - going to take in a string with the data
16:04 - and it's going to return an integer that
16:09 - is the amount of kills so what do we
16:11 - want to do here well first off we want
16:13 - to use our data here what do we want to
16:16 - use it for well we want to split it up
16:18 - into the different values so we have the
16:21 - first value with witches our kill symbol
16:24 - and then the the actual amount of kills
16:26 - and then we have the second value with a
16:28 - which is our deaths and then the amount
16:30 - of deaths so we're going to split that
16:32 - up by searching for this exact symbol
16:36 - here this slash so we'll separate the
16:39 - string into an array of strings where
16:42 - the first one will be kills and the
16:43 - second one will be deaths separated by
16:46 - the slash and the way that we do this is
16:48 - that we create a string array first of
16:50 - all in a a list of strings it's not a
16:53 - list it's an array and we call this um
16:56 - the we could do pieces or values or
17:01 - whatever I'm just going to call this
17:02 - pieces our data pieces and we are going
17:06 - to set that equal to data dot and I
17:11 - believe it is split there we go and it
17:14 - splits it using the slash and I am
17:18 - actually going to use this as a
17:20 - character there we go and it's really
17:23 - that easy so now we'll get two pieces
17:26 - we'll get a 1 with the index of 0 and 1
17:29 - with the index of 1 and the first one
17:31 - will be equal to the first part and the
17:33 - second one will be but equal to the
17:35 - second part then we can loop through
17:37 - this list so we can go for each string
17:41 - piece in pieces
17:44 - what we can then do is we can say if
17:50 - peace dot begins with or starts with
17:55 - there we go starts with so if the first
17:57 - part of the the the piece here is and
18:01 - then we can input kills like that so in
18:06 - case the first part of the string here
18:08 - is kills then we can get the value right
18:11 - after that is the amount of kills we
18:13 - know we've found the right part of the
18:15 - string however instead of just hard
18:18 - coding this in what I'm going to do is
18:20 - I'm going to go up here and make this
18:21 - into a private static string and we can
18:27 - make actually make it a private static
18:29 - constant string I believe there
18:34 - shouldn't be anything wrong with that
18:35 - and we can set that equal to kills here
18:43 - and we want to call this our kills are
18:47 - simple or tag or whatever you want to do
18:49 - with that so I'm just gonna call it the
18:51 - kill symbol here and close that off and
18:54 - then we can put kill symbol the constant
18:58 - okay so we can make a constant static I
19:00 - should I should have known that there we
19:02 - go our kill symbol and we can put that
19:04 - down there so in case we start the piece
19:09 - starts with the kill simple then we can
19:11 - go ahead and remove the kill simple part
19:14 - of the codes that we are only left with
19:16 - arm the numbers so we can imagine that
19:19 - our string goes like this
19:20 - kills and then a number and this is
19:24 - currently our piece so what we want to
19:26 - do is we want to remove this part and we
19:29 - do that by using piece dot substring and
19:37 - then the start index and we want to
19:40 - start at kill symbol dot length so
19:44 - basically piece that substring will
19:47 - basically just go enter string and find
19:49 - a certain part of it in our case because
19:51 - we've just inputted one index it's just
19:53 - going to skip to that index and the
19:56 - index is of course given by
19:58 - of this kills symbol here so that's what
20:02 - we're doing here and that means that we
20:04 - will get the number 0 smart good but we
20:11 - can actually make this code a bit more
20:13 - efficient but in because in a moment
20:15 - we're going to be covering this over to
20:17 - do the same with public static public
20:22 - static int data to deaths string data
20:26 - and I don't want to copy the entire code
20:30 - here so what we'll do is we'll separate
20:32 - this out into a separate method and this
20:36 - is going to be a private static string
20:38 - and we'll make this our data to value
20:46 - and it's going to take in a string data
20:49 - and it's also going to take in a string
20:53 - simple okay
20:56 - so we're kind of getting there now so
20:58 - what we can do here is we can say that
21:00 - we want to loop through the data and all
21:01 - that and once you find that something
21:04 - starts with and now we don't want to use
21:06 - kill symbol we want to use the symbol
21:08 - passed in then we can go and skip
21:10 - through that symbol that we passed in
21:12 - and then return that code if that makes
21:17 - any sense to you that's awesome
21:19 - and in case we didn't find anything
21:21 - we're just going to return an empty
21:23 - string here and we're going to debug log
21:25 - error we're going to say symbol not
21:32 - found in and then data and I need a plus
21:38 - sign there as well and we can close this
21:41 - off there we go and now we can just use
21:45 - this very conveniently up here we're
21:46 - going to say data to value the data is
21:48 - here this symbol is kills symbol and
21:51 - that should get the amount of kills as a
21:54 - string so all we need to do now is
21:56 - return that as an integer and the way
21:58 - that we do that this is using int dot
22:00 - parse that is going to convert it into
22:03 - an integer if that is possible and then
22:06 - it's going to return that and we can do
22:07 - the exact same thing down here except
22:10 - now we don't want to use
22:11 - kill cymbal we want to use death symbol
22:14 - which we need to create up here so we'll
22:16 - have a deaths symbol and it's going to
22:21 - simply say deaths in here and we can put
22:24 - that down there so that is our data
22:27 - translator I know that this can be a bit
22:30 - confusing confusing but if you are at
22:32 - least able to follow along with most of
22:34 - it it is kind of the way that you work
22:37 - with strings and embed data into them
22:39 - this syntax is completely made up by me
22:42 - and you can totally make your own if you
22:44 - find something to be more logical for
22:45 - what you're doing but I just wanted to
22:48 - show some ways that we could work with
22:49 - strings in order to save and load things
22:53 - from them so now on receive data what we
22:56 - are going to do is we are going to set
22:58 - kill count dot text equal to and then we
23:03 - can go down a translator and we can pass
23:08 - in and or data translated dot data to
23:12 - kills data to kills and we can pass in
23:16 - the data and that is going to return an
23:18 - integer for us and then we can go to
23:20 - string of course and we can also add on
23:24 - to that maybe just kills something like
23:27 - that so it just displays that this is
23:29 - our kills count and we can also do the
23:31 - same for our death count so death count
23:33 - of text data two deaths and then deaths
23:38 - back here so if we did this correctly we
23:42 - should now see that once we lock in and
23:47 - we are going to do that now test one two
23:49 - three test one two three it's going to
23:51 - say loading up here in the stats and
23:54 - then once it gets it it says zero kills
23:57 - and zero deaths and if we were to change
24:00 - this it would now update once we load
24:03 - this back in so that was all I wanted to
24:07 - show for this video I know it was a lot
24:09 - to get not much working but that is kind
24:11 - of how it works when you want to do some
24:13 - of this on your own but I definitely
24:16 - think that this was an important lesson
24:18 - it is important to learn how to work
24:20 - with strings and saving data and what
24:25 - if you made it hold the way through
24:26 - thumbs up for that so on that's pretty
24:28 - much all I want to show for now I can't
24:30 - wait to the next video and I'll see you
24:32 - then thank you so much to all of the
24:33 - awesome patreon supporters who donated
24:35 - in August and the special thanks to our
24:37 - and Metta Robert Roche James Calhoun
24:39 - Mixon P and Andrew K