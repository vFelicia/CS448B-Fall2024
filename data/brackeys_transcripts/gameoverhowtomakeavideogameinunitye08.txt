00:00 - in this video we're going to turn our
00:01 - game into an actual game by making a way
00:04 - to lose that's right we'll create a game
00:05 - over stay pretty central to any game
00:07 - this one included let's dive right into
00:09 - it let's begin by dragging our score
00:11 - script under the scripts folder just to
00:12 - clean up from the last video and
00:14 - currently the way we keep track of
00:16 - whether or not we've collided with
00:17 - something it's using a script that sits
00:19 - on the player called player collision
00:20 - and while it makes sense to detect
00:22 - player collision on the player object
00:23 - itself the play object is not a good
00:25 - place to end our game that should be
00:28 - done using some kind of game manager
00:30 - let's go ahead and create one that's
00:31 - right-clicking a hierarchy to create an
00:33 - empty object let's reset the transform
00:35 - and its name it game manager let's also
00:38 - drag it to the top just to make it clear
00:40 - to see let's then add a new component
00:42 - and it's called that game manager as
00:44 - well let's say create an ADD and this
00:46 - component will be responsible for
00:47 - changing States in our game you can do
00:49 - stuff like start and stop a game restart
00:51 - a game and display UI on the screen if
00:53 - you want a score counter a game over
00:55 - screen or transition to other menus like
00:57 - a main menu our level selector in our
00:59 - case we're going to make some code that
01:01 - will restart our game when we hit
01:02 - something or when we fall off the edge
01:04 - let's double click the game manager the
01:06 - first thing we need to do is delete our
01:08 - two standard functions let's also delete
01:10 - the two using tags up here let's then
01:12 - write a new custom function void and
01:15 - let's call it something like end game or
01:17 - game over I'm just gonna write end game
01:19 - here two parentheses and then the curly
01:22 - brackets and in here we'll do some
01:24 - different stuff but for now let's just
01:25 - display a message to the console to let
01:27 - us know whether or not we're calling the
01:29 - function at the right time let's write
01:31 - debug that lock and then insert
01:32 - something like game over we can then
01:35 - save this and hit back into unity so now
01:37 - our game manager has a function called
01:39 - end game that will display a message in
01:41 - the console but we need a way to access
01:42 - our game manager and call this function
01:45 - to do that we go to our player find out
01:47 - player collation script and double click
01:49 - on it normally when we need to access
01:50 - something within another script we use
01:52 - the reference you can see up here we're
01:54 - using a public player movement called
01:56 - movement in order to be able to disable
01:58 - and play a movement when we collide with
01:59 - something and we could go ahead and do
02:01 - the same thing with our game manager
02:02 - here we could write public game manager
02:04 - and then call it something like game
02:06 - manager then save that an indie
02:08 - inspector now drag you know
02:10 - game-manager and this will work fine in
02:12 - our instance but if we wanted our player
02:14 - to die at some point meaning that we
02:16 - would have to remove him from the scene
02:17 - and then maybe spawn him back in because
02:19 - the game manager doesn't sit on the same
02:21 - object we would lose this reference it's
02:23 - actually really easy to show you this
02:25 - let's go and do assets and let's drag
02:27 - our player in here to create a prefab
02:28 - out let's then delete the player from
02:31 - our scene and drag him back in you can
02:33 - see that under game manager it now says
02:35 - none because the prefab itself is not
02:37 - linked to the game manager and that's
02:38 - not really a good way around this so
02:40 - instead we don't use a variable let's
02:42 - delete this here what we do is we
02:44 - actually search for the game manager
02:46 - when we want it and unity has a nice way
02:48 - of searching for scripts to do that
02:50 - let's go to the place in our code where
02:51 - we want to end the game which is right
02:53 - around here and it's right find object
02:56 - of type and the type that we want to
02:58 - find is the game manager we also need to
03:00 - put a open and close parenthesis the
03:03 - syntax is actually very similar to get
03:05 - component which allows us to find a
03:06 - component on the object here we also use
03:08 - the small than and greater than signs
03:10 - and inside we write the component that
03:12 - we want up here for example we could
03:13 - actually replace movement the reference
03:15 - to a player movement script with
03:17 - getcomponent and then make sure to write
03:18 - player movement like this an open could
03:21 - close some parentheses this is actually
03:22 - going to do the exact same thing and
03:24 - it's the same thing with I find object
03:26 - of type we can actually now just use dot
03:28 - and access all of the stuff under our
03:30 - game manager we can then write end game
03:32 - and you will notice that it doesn't show
03:34 - up the reason for this is not that we
03:36 - don't have a valid reference to the game
03:38 - manager but that our game manager
03:39 - actually hides this function that's
03:41 - because it's currently marked as private
03:43 - we need to instead go in here and write
03:45 - public void save that and we should now
03:48 - be able to access it in here so let's
03:50 - write dot end game and you can see that
03:52 - it now shows of course whenever you use
03:54 - fine object of type you need to make
03:56 - sure that you do at least have one
03:57 - object of the type you're searching for
04:00 - or this is going to return an error so
04:02 - just make sure you have game manager in
04:04 - your scene so let's save this head into
04:06 - unity and we should see the variable
04:08 - disappear but that's alright because
04:09 - we're searching for it without a
04:10 - variable if you try and play the game
04:12 - now we're actually going to get some
04:13 - errors you can see here that it says
04:15 - unassigned reference exception the
04:17 - variable player score has not been
04:19 - assigned and the variable of follow
04:20 - player has not been assigned that's
04:22 - because both on our main cap
04:23 - we referenced the player and we need to
04:25 - drag him in there and under a text
04:27 - object that displays our score we also
04:29 - have a reference to the player so we
04:30 - need to drag him in there as well that's
04:32 - two other places where we could use find
04:34 - objective type if we wanted to have the
04:36 - ability to swap a player in and out of
04:38 - the scene I just wanted to show you how
04:39 - it's done do note that it is of course
04:41 - not as performant as creating a direct
04:44 - reference as we do with a variable so
04:45 - let's clear those errors and when we now
04:47 - hit play we should see that when we
04:49 - collide with something
04:50 - it says game over in the console but we
04:52 - don't only want to display this message
04:54 - when we collide with something we also
04:56 - want to display it when we fall off the
04:57 - edge in order to do that let's go into a
04:59 - player again and now let's open the
05:01 - player movement script in here we keep
05:03 - track of the player's position and the
05:05 - forces that we want to add to him in
05:06 - order to make him move inside of a fixed
05:08 - update we can go ahead and add another
05:10 - line and what I want to do is I want to
05:12 - check if our position on the y-axis gets
05:14 - below a certain number that means that
05:16 - if our player falls down and we just say
05:18 - negative one he has fallen off the edge
05:20 - and we want to restart the game so to do
05:22 - that through code we write if then we
05:25 - use our beat up position and we access
05:27 - the y-value we then check if that is
05:30 - less than and I'm just going to
05:31 - hard-code in a small negative number I'm
05:33 - gonna put negative one let's again open
05:36 - or close some curly brackets and if we
05:37 - reach this position we can do the same
05:39 - thing as we did in our player collision
05:41 - we can say find object of type the type
05:43 - we're looking for is the game manager
05:45 - and we can then write dot and game so
05:48 - once you get easy to the syntax it's
05:49 - actually really easy to do we then save
05:51 - the script hit back into unity and we
05:53 - should now see that when we fall off the
05:55 - edge here we see a bunch of game over
05:57 - statements in the console the reason why
05:59 - is that we're checking for this y value
06:01 - each fixed update call that gets done a
06:03 - lot of times a second but we actually
06:05 - only want to do this once we don't want
06:07 - the game to end multiple times so what
06:09 - we do is go inside of the game manager
06:11 - and that's a little nifty trick we can
06:12 - use here all we want to do is create a
06:14 - boolean up here remember boolean czar
06:16 - used to store a value that can either be
06:18 - true or false I'm gonna call this one
06:20 - game has ending will default it to false
06:24 - then in our end game method will set
06:26 - game has ended to true and now we can
06:29 - make an if statement that checks whether
06:30 - or not our game has already ended
06:32 - so we'll say if game has ended its equal
06:35 - to false
06:36 - well then we
06:37 - to do these things then we want to
06:39 - actually end the game so the first time
06:41 - our in-game method is called game
06:43 - ascended is going to be false and so
06:45 - this is going to be true that we are
06:47 - going to set game has ended equal to
06:49 - true we're going to show game over in
06:51 - the console and we could do other stuff
06:52 - like restarting the game and then the
06:55 - next time it's called game ascended is
06:56 - now going to be true and so the if
06:58 - statement here is going to return false
07:00 - and this is not going to be cold so our
07:02 - game will only end once if we save this
07:04 - now we should see it in unity as well
07:06 - quit play and jump off the edge here we
07:09 - can see that only one message is
07:11 - displayed in the console and it doesn't
07:12 - matter whether or not we are colliding
07:14 - with something or falling off the edge
07:16 - it will always only display one so the
07:18 - final thing we need to do is actually
07:20 - restart the game and we do that again
07:22 - inside of our game manager first off I
07:24 - want to create a separate function for
07:26 - this let's call this one void restart we
07:29 - then need to make sure to call this
07:31 - method we do that by writing restart up
07:33 - here so now when our game ends and after
07:36 - we show a message in the console we're
07:37 - going to call the restart method which
07:39 - means that in our code will jump from
07:41 - here to down here
07:42 - and everything inside these two curly
07:44 - brackets will be executed and restarting
07:46 - a scene in unity is actually fairly
07:48 - simple first off we need to go up here
07:50 - and include unity engine dot scene
07:53 - management we need to use this whenever
07:56 - we need to change to a different scene
07:57 - or reload the scene that we are already
07:59 - on we then go into a restart method and
08:02 - rewrite scene manager then press dot and
08:05 - you can see all of the stuff that I've
08:06 - seen manager can do it can merge scenes
08:08 - load scenes get information about active
08:11 - scenes and some other more advanced
08:13 - functions we want to load a scene and
08:15 - the scene that we want to load is
08:16 - currently called level 1 we can see in
08:19 - unity that that's the name of our scene
08:22 - but if you have multiple levels in our
08:23 - game it's not always going to be level 1
08:26 - the scene that we want to load is the
08:28 - scene that is currently active so we can
08:29 - actually get the active scene by going
08:31 - scene manager get active scene again
08:34 - open a close some parentheses make sure
08:36 - you have all of the parentheses in here
08:38 - and we then use dot name so this piece
08:40 - of code returns the name of our current
08:42 - scene and this piece of code loads the
08:45 - scene with a given name everything is
08:46 - done using the scene manager so we now
08:48 - close this with a semicolon and when we
08:50 - say
08:50 - this and head into unity we should
08:52 - actually see it working however there
08:54 - are going to be a slight problem with
08:55 - this let's hit play we can see that when
08:58 - we collide with the block it instantly
08:59 - restarts but it looks a little weird and
09:01 - also it restarts very very quickly we
09:04 - want a slight delay so we can actually
09:06 - see the Commission the first problem is
09:08 - with the lighting and it's something
09:10 - that unity has been doing recently which
09:11 - is a little bit weird if we go to window
09:13 - then lighting it will open the lighting
09:15 - panel in here we can see that this small
09:18 - check box down here is set to auto this
09:21 - means that unity will automatically
09:22 - detect changes in lighting and do the
09:25 - necessary processing to show an accurate
09:26 - lighting representation
09:28 - however when reloading scenes in the
09:30 - unity editor unity doesn't have time to
09:31 - do these calculations and so we get a
09:33 - scene with very very bland lighting all
09:36 - we need to do is disable auto and if the
09:38 - lighting in your scene now looks weird
09:39 - simply hit build and unity is going to
09:41 - calculate the lining of course this
09:43 - means that every time we change
09:44 - something it's probably a good idea to
09:46 - go back and hit build and I normally
09:48 - leave Auto on when testing but if it's
09:50 - annoying you a lot you can disable it
09:51 - and you can now see that when we hit
09:53 - play and the level restarts our lighting
09:55 - looks perfect however we still need to
09:57 - code in a slight delay to do that we go
09:59 - back into our script and instead of
10:00 - directly calling the function we use
10:02 - something called invoke let's write
10:05 - invoke and invoke takes two parameters
10:07 - the first one in quotation marks is the
10:10 - name of a function which is restart the
10:12 - second one is the delay the amount of
10:14 - time before calling the function and we
10:16 - could definitely just hard-code this in
10:18 - we could write to here and it would wait
10:20 - two seconds but I think it's better to
10:22 - go up here and make it into a variable
10:23 - this way we can easily tweak it in the
10:25 - inspector the variable is going to be a
10:27 - public float that means that we're
10:29 - storing some kind of decimal place
10:30 - number we'll call it restart delay and
10:32 - set it equal to one by default we can
10:35 - then take a restart delay and put it in
10:36 - place of the number two here so now
10:38 - whatever our restart delay is equal to
10:40 - is the amount of time that we will wait
10:42 - before invoke is going to call the
10:44 - restart method and are seeing it's going
10:45 - to load let's save this head back into
10:48 - unity and hopefully everything is going
10:49 - to be working now we just need to add
10:51 - play and when we collide with something
10:52 - you can see that we get a second to see
10:54 - the collision which looks a bit nicer
10:56 - and it's the same thing when we fall off
10:58 - the edge the final thing that you might
10:59 - need to do if unity complains a little
11:01 - bit when reloading the scene is added to
11:03 - the build settings to
11:04 - you that you go to file build settings
11:06 - and in here we have a list of all of the
11:08 - scenes that we want to include when we
11:10 - export our game currently there's
11:12 - nothing in here and that's not a problem
11:13 - because we only have a single scene and
11:15 - unit is smart enough to know that that's
11:17 - the same we want to use but if you have
11:19 - multiple scenes it's very very important
11:21 - that you add all of them in here we can
11:23 - just click Add open scenes or you can
11:25 - always just drag them from the project
11:26 - panel you can see that our scene has a
11:28 - name a checkbox to say whether or not
11:30 - it's included and a build index if you
11:32 - have multiple levels you normally
11:34 - download them by name but by build index
11:36 - so that unity will transition to the
11:38 - next scene in the queue it's pretty cool
11:40 - we can just close that now let's also
11:41 - take our game manager and drag it under
11:43 - the scripts folder and that should be it
11:45 - nothing should change in our case but it
11:47 - should hopefully fix some errors if you
11:49 - have any that was pretty much it for
11:50 - this video I hope you enjoyed it if you
11:52 - did make sure to subscribe so you don't
11:53 - miss a future episode thanks for
11:54 - watching and I will see you in the next
11:56 - video thanks of the awesome people who
11:58 - donated in February and a special thanks
12:00 - to Derek Hughes Kirk face'll Merrifield
12:01 - James Calhoun and Jason Lotito
12:03 - if you want to become a picture in
12:05 - yourself you can do so a pitch intercom
12:06 - slash practice thanks a lot guys