00:00 - this video will have a look at something
00:01 - you guys have been requesting for such a
00:03 - long time it's procedural generation
00:05 - this video will have a look at Perlin
00:06 - noise so this is a large subject and can
00:08 - be approached from a variety of
00:10 - different ways from generating textures
00:12 - on the fly
00:12 - creating procedural animation making
00:14 - terrains and then this pretty much goes
00:16 - on so without further ado let's get into
00:18 - it when generating textures the terrains
00:20 - from scratch you normally want to apply
00:22 - some kind of randomness
00:23 - however using completely random numbers
00:25 - to generate a texture looks chaotic and
00:27 - well random instead we use a noise
00:29 - function such as Perlin noise where
00:31 - values aren't totally random but have
00:33 - some relation to each other
00:34 - which allows changes to occur gradually
00:36 - refer to these types of noise as pseudo
00:39 - random Perlin noise is often used
00:41 - because it gives a more organic feel
00:42 - without being too computationally
00:44 - expensive and luckily unity has a
00:46 - function for generating two-dimensional
00:48 - Perlin noise built-in so we're starting
00:50 - with a blank project here the only thing
00:51 - I've done is change the background color
00:53 - to black under the main camera the first
00:55 - thing we need is an object to display
00:57 - our texture on let's right-click in the
00:59 - hierarchy go 3d object and select quad
01:01 - we can now reset the transform on this
01:03 - set the scale to something like 8 by 8
01:05 - we can remove the mesh Collider we won't
01:07 - be needing that and let's now add a new
01:09 - component this component is going to be
01:11 - our script where we'll generate our
01:12 - noise so we could go ahead and call it
01:14 - something like Perlin noise that's it
01:16 - new script and create an ad and let's
01:18 - double click it to open it up in visual
01:19 - studio we can go ahead and remove the
01:21 - two using tags at the top and let's also
01:23 - remove the two methods so the first
01:25 - thing we need to specify is the
01:26 - resolution for our texture we've already
01:28 - chosen the size of the texture on the
01:30 - screen that's the scale of the quad this
01:32 - only determines the quality meaning the
01:34 - number of pixels in our texture and we
01:36 - want to do this both for width and
01:37 - height so let's go ahead and create a
01:39 - public integer this is going to be the
01:41 - width and let's to fold it to something
01:42 - like 256 and now we'll do the same for
01:45 - the height so our text it will be 256 by
01:48 - 256 pixels now let's go ahead and create
01:50 - a start method and in here we first want
01:52 - to get a reference to our current
01:53 - renderer that's because in order to
01:55 - change the texture on our default
01:57 - material we have to first access the
01:59 - mesh renderer component then access the
02:01 - material and then change the texture so
02:03 - that's right getcomponent
02:05 - the type of the component we want to get
02:06 - is renderer and we can go ahead and
02:08 - store this in a variable let's write
02:10 - render up
02:11 - the type I'm also called it renderer
02:13 - with a non capital R as the name so now
02:15 - when we want to change our texture we
02:17 - write renderer dot material dot main
02:20 - texture and we set this equal to the
02:22 - texture that we now generate let's set
02:24 - this equal to a function called generate
02:27 - texture
02:28 - so let's now construct this method first
02:31 - off we'll need it to return a texture so
02:32 - we'll set the return type to texture 2d
02:35 - we'll name the function generate texture
02:37 - we don't need any arguments and then
02:39 - let's open and close some curly brackets
02:40 - now in here we are creating a texture
02:42 - from scratch let's start by making a
02:44 - texture variable it's going to be a type
02:46 - texture 2d let's call it texture and set
02:48 - it equal to a new texture 2d and the
02:51 - texture 2d here takes in a width and a
02:53 - height luckily we've already specified
02:55 - those up here so we simply input our
02:57 - width and our height of 256 pixels then
03:00 - we want to go ahead and generate a
03:03 - purlin noise map for the texture and
03:07 - then we'll send this texture back into
03:09 - the main texture variable up here so
03:11 - we'll say return texture so in order to
03:15 - generate the Perlin noise map we have to
03:17 - loop through all of the different pixels
03:19 - in our texture to do that we either use
03:20 - a four or a while loop in this example
03:23 - we'll use four loops
03:24 - so first let's write four and we'll
03:26 - begin by looping through all of the x
03:28 - coordinates so we'll say int x equals
03:30 - zero we'll create a variable called X
03:33 - and set it equal to zero and we want
03:35 - this loop to continue as long as X is
03:37 - less than the width of our texture and
03:39 - every time we go through an iteration of
03:41 - the loop we add one on to the X variable
03:43 - so now this for loop should run 256
03:46 - times but our texture map is set up in
03:47 - such a way that each time we go one
03:50 - forward on the X there are 256 pixels on
03:53 - the Y so for each of these iterations we
03:56 - also want to iterate through all of the
03:58 - Y pixels so in here we'll say for int y
04:01 - equals 0 and we want to continue as long
04:03 - as Y is less than the height and each
04:05 - time we'll add one onto the Y so now our
04:08 - first folder will run 256 times and for
04:12 - each of those times the second for loop
04:14 - going through all the Y pixels will also
04:16 - run 256 times and so we'll make sure to
04:19 - go over all of our pixels which are and
04:22 - I actually have to bring our
04:24 - my calculator here over sixty five and a
04:26 - half thousand pixels but this is also
04:29 - the reason why there's a lot of
04:30 - optimization when it comes to procedural
04:32 - generation because we are often dealing
04:34 - with really really large values but
04:36 - that's not important for now for now
04:37 - let's just try and get this to work so
04:39 - for each of these times we want to set
04:40 - the pixel we're currently looking at
04:42 - equal to a color determined by a billion
04:44 - noise in other words we want to call
04:46 - texture set pixel and the pixel we want
04:49 - to set is that with the current x
04:50 - coordinate and the current y coordinate
04:52 - and then we want to insert some kind of
04:54 - color here and we'll go ahead and create
04:56 - that color right above let's create a
04:57 - variable of type color and we'll call it
05:00 - color as well and this is why our Perlin
05:02 - noise comes in because we are going to
05:03 - set this equal to a value generated by
05:06 - our Perlin noise function what i want to
05:08 - do that we need to do a tiny bit of math
05:10 - let's wrap that in another function
05:11 - we'll call that function calculate color
05:14 - and we'll give it our x and y
05:16 - coordinates so now we can scroll down
05:17 - and we can create another function this
05:19 - one is going to return a color and we'll
05:21 - call it calculate color it's going to
05:23 - take in an integer X and an integer Y
05:26 - now we can get the value of our purlins
05:29 - function add a certain X&Y coordinate by
05:31 - going math Perlin noise then inserting
05:35 - the X and inserting the Y and that's it
05:37 - this will return a float with the value
05:39 - of the function at these coordinates so
05:40 - we can store that in a float called say
05:43 - sample and then we can create a new
05:44 - color where both the red green and blue
05:47 - coordinates are all set equal to sample
05:51 - this way if sambal is equal to zero
05:53 - we'll get a black color if it's equal to
05:55 - one we'll get a white color and if it's
05:57 - some way in between we get various
05:59 - shades of gray so we can go ahead and
06:00 - just return this new color and we've now
06:03 - written our calculated colored function
06:05 - however there is one huge problem with
06:07 - this and it's the most common mistake I
06:09 - see when people are first dealing with
06:11 - Perlin noise and that is we are
06:12 - currently inputting our x and y and
06:15 - pixel coordinates and pixel coordinates
06:17 - are of course whole numbers either pixel
06:20 - this lid or it is not we're not dealing
06:22 - with 1/2 or 0.3 pixels and that's not
06:25 - too fortunate for our Perlin noise
06:27 - function because Perlin noise actually
06:29 - repeats at whole numbers so what we
06:31 - instead want to do is turn these into
06:33 - decimal place numbers instead of having
06:35 - them go from zero to
06:37 - 2:56 we could have them go from zero to
06:39 - one in order to do that we create two
06:41 - new floats here the first one is going
06:43 - to be our X and I'm just going to put
06:44 - court here so we know that we're not
06:46 - talking about pixel coordinates but
06:47 - pearling coordinates and we'll set that
06:49 - equal to X divided by our width so the
06:52 - smaller the X the closer we get to 0 and
06:55 - the greater the X the closer we get to 1
06:57 - and we do the same thing with our y axis
06:59 - here so Y chord equals y divided by
07:02 - height remember whenever we divide two
07:04 - integers and are expecting some kind of
07:06 - float number we need to also cast this
07:08 - into a float during the calculation so
07:11 - we'll write a float in front of both of
07:13 - these and now we'll make sure to get a
07:15 - decimal place number then we'll replace
07:16 - the x value here with X chord and the Y
07:19 - value with Y chord and that's actually
07:21 - one more trap that I see a lot of people
07:23 - falling into and that is whenever we
07:26 - create a texture like this and then
07:27 - change around some colored data we need
07:29 - to also apply that data and to do that
07:32 - we call texture apply that will take
07:35 - care of everything for you it's just
07:37 - something that is so easy to miss
07:38 - remember to write that in here so if we
07:40 - now save this script and hit into unity
07:42 - we into the Aprilia nice script now has
07:44 - a width and height resolution and if we
07:46 - hit play we should see
07:48 - voila we've got noise now this looks
07:50 - super non interesting and very great now
07:52 - a few reasons for this the first one is
07:54 - that we are currently using the default
07:55 - material which is set up to work with
07:57 - lighting and I have serial lights in my
07:59 - scene so let's just go ahead and right
08:00 - click in the project panel go create
08:02 - material it's called it unlit under the
08:04 - shader instead of standard will choose
08:06 - unlit texture and we can I'll just drag
08:08 - that on top of the quad so we should now
08:10 - see the texture much more clearly the
08:12 - second thing is that we are currently
08:13 - very assumed in to change that we create
08:16 - a scale variable so at the very top here
08:18 - we'll create a public float we'll call
08:21 - this one scale and we can default it to
08:23 - something like 20 then down where we
08:25 - calculate our color after we do our
08:27 - division we write multiplied with scale
08:31 - so this is just going to scale our
08:32 - entire coordinate number up or down and
08:35 - if our scale is 20 it means that our
08:37 - coordinates are going to be bigger and
08:39 - therefore will cram more of our pilla
08:41 - noise into a texture which will give the
08:43 - effect of us zooming out so if we save
08:45 - this and they play we can now see the
08:47 - texture much more clearly let's also go
08:49 - to a purlin no script
08:50 - and change this from start to update now
08:53 - of course there are a few things you can
08:54 - do here to optimize it for example we
08:56 - don't need to get the renderer each
08:57 - frame but it just allows us to very
08:59 - quickly update settings while the game
09:01 - is running you can see what happens when
09:03 - I change the scale finally also want to
09:05 - add the opportunity to pan around in our
09:07 - noise map we do that by adding to offset
09:09 - variables we'll add a public float and
09:11 - call this one offset X and we can
09:14 - default it to say 100 and we'll also
09:15 - create a public float offset Y which
09:19 - will also default to 100 then we again
09:21 - scroll down to our calculate color
09:22 - method and after we multiply with our
09:24 - scale we simply add our offset onto that
09:27 - so here we'll write offset X and here we
09:30 - write offset Y and in our game we can
09:32 - now adjust these offsets in order to
09:34 - scroll along the surface this is also
09:36 - how you make the texture random if we
09:38 - were to create a terrain using Perlin
09:40 - noise and wanting it to be different
09:42 - each time we would simply go and pick
09:44 - random numbers for the offset in fact
09:47 - let's do that now let's go in here and
09:48 - create a start method above the update
09:51 - method and in here we'll set off set X
09:53 - equal to random range and want this to
09:56 - go between zero and a huge number and we
09:59 - want to do the same thing on the Y so
10:02 - now in unity when we hit play it's going
10:04 - to be different every time
10:06 - cool right that's pretty much it for
10:07 - this video I'm planning on doing another
10:09 - one on procedural generation this time
10:11 - we're going to have a look at generating
10:12 - a landscape using Perlin noise so make
10:14 - sure to subscribe so you get notified
10:15 - when that comes out on that thanks for
10:17 - watching and I will see you in the next
10:19 - video thanks to all the awesome patreon
10:21 - supporters who donated in April and a
10:23 - special thanks to Derek Hughes Kirk face
10:25 - will mattify James Calhoun Sybok Nami
10:27 - Cole Cabral
10:28 - and Jason Lotito if you want to become a
10:30 - picture in yourself you can do so a
10:31 - pinch ENCOM slash correctly