00:00 - so in the last video we talked about how
00:01 - to get started generating your own
00:02 - meshes through a code in this video
00:04 - we'll expand on that to try and make
00:06 - something a bit cooler like this piece
00:08 - of procedural terrain to make something
00:10 - like this we basically create a grid of
00:12 - vertices we then fill in the grid with a
00:14 - bunch of triangles and adjust the height
00:16 - of all the vertices in order to create
00:18 - cool-looking shapes so without further
00:20 - ado let's generate some terrain but
00:22 - first this video is sponsored by
00:23 - Skillshare Skillshare is an online
00:25 - learning community with more than 24,000
00:27 - quality classes on game development tech
00:29 - and more if for example you want to
00:31 - learn how to create characters or
00:32 - sprites for a game you're making I
00:34 - recommend you check out this really cool
00:35 - course on how to create pixel art this
00:37 - course teaches you everything you need
00:39 - to know about making pixel art for video
00:41 - games and at the end you will be able to
00:42 - design characters items backgrounds and
00:45 - even make animations a premium
00:47 - Skillshare membership gives you
00:48 - unlimited access to all classes for less
00:50 - than $10 a month so to get started
00:52 - simply click the link in the description
00:54 - and the first 500 people will receive
00:55 - their first two months for free all
00:57 - right let's get to it so to generate a
01:02 - grid we can use the exact same structure
01:03 - as in our previous video we still have
01:06 - an object with a mesh filter and a mesh
01:08 - renderer and then of course a script to
01:10 - generate our mesh and inside the script
01:12 - we have two basic methods one for
01:15 - creating the shape itself and then one
01:17 - for updating the mesh in unity and we
01:19 - really only need to modify this shape
01:21 - function to make it generate a grid
01:23 - instead of a symbol quad so inside of
01:25 - our create shape let's just remove all
01:27 - the code that is currently there and the
01:29 - first thing we need to do is to figure
01:30 - out how many vertices we're going to
01:32 - need for our grid this is of course
01:34 - going to depend on the grid size so
01:36 - let's go to the top here and let's add
01:38 - two public variables a public integer
01:40 - which we're going to call X size and
01:43 - let's set this equal to something like
01:44 - 20 and another public integer called Z
01:47 - size let's also default this to 20 now
01:50 - if we look at this graphic we can see
01:52 - that if we have three squares on the X
01:54 - we actually need four vertices and if
01:57 - our grid is for example two squares tall
01:59 - we need three vertices so the total
02:02 - number of vertices in our grid is equal
02:05 - to our excise plus 1 multiplied by our z
02:08 - size plus 1 so in our code here we can
02:11 - go to a create shape method and we need
02:13 - to set up where
02:14 - sees equal to a new vector3 array and
02:16 - the length of this array is going to be
02:18 - X size plus 1 multiplied with these size
02:22 - plus 1 awesome so we've now created all
02:26 - the vertices that we're going to need we
02:28 - then need to loop over each of the
02:30 - vertices and assign them a position on
02:32 - the grid I would like to do this going
02:34 - from left to right like you see here so
02:36 - to do that let's start by creating a for
02:38 - loop and the variable will call Z and
02:40 - we'll keep going as long as Z is less
02:42 - than this the size however remember it's
02:46 - not only the Z size it's actually the Z
02:48 - size plus 1 so we'll keep going as long
02:51 - as it's less than or equal to the Z size
02:53 - then inside this for loop we're going to
02:55 - need another loop that is going to loop
02:57 - over all of our squares on the X so we
02:59 - create 4 in X equal 0 we keep going as
03:03 - long as X is less than X size and again
03:06 - we want it to be less than or equal to
03:08 - the X eyes so now we're looping over all
03:11 - of the vertices but in order to actually
03:13 - access a vertice and change it we need
03:15 - an index let's go to the top here and
03:18 - create an integer called I and set it
03:20 - equal to 0 then inside of our faux loop
03:22 - we can set vertices and take the eyes
03:25 - vertice and we'll set this equal to a
03:27 - new vector3 and it will feed it the
03:30 - konnex as the x position just zero on
03:33 - the Y because we want it to be a flat
03:34 - plane and then the Z as the Z position
03:37 - and of course after this we'll need to
03:39 - make sure to increment I by 1 and this
03:41 - is going to work just fine this is going
03:43 - to create a grid with all of our
03:44 - vertices however that's actually a neat
03:46 - little trick that we can do to make this
03:48 - a bit prettier and that is we don't
03:49 - actually need to create our integer I up
03:51 - here instead we can delete this and move
03:54 - it into the for loop itself so here when
03:57 - creating the Z we can also set I equal
03:59 - to 0 and then just use a comma and this
04:02 - is going to create both a variable
04:03 - called I set it equal to 0 and one
04:05 - called Z that is also equal to 0 and the
04:08 - good thing about this is that I is now
04:10 - local to this for loop so it can only be
04:12 - used within the for loop and also it
04:14 - saves a bit of space pretty cool and
04:16 - that's pretty much it for our vertices
04:17 - of course we can't really see them at
04:20 - the moment because we haven't defined
04:21 - the triangles that make up our mesh but
04:23 - if you want we can actually use skismo
04:25 - to display the vertices in the
04:27 - to do this that's go to the bottom here
04:29 - let's create a void on drunk isthmus and
04:32 - in here we can loop over all the
04:34 - vertices so we'll create a for loop
04:36 - we'll keep going as long as I is less
04:38 - than vertices darling and for each word
04:41 - you see we'll go ahead and draw a sphere
04:42 - so gizmos that draw sphere will draw it
04:45 - at the vertex position so vertices of I
04:48 - and we'll give it a radius of say point
04:50 - 1 we also need to make sure that we
04:52 - don't do this when we don't have any
04:53 - vertices generated so we'll just add an
04:56 - if statement here is saying that if
04:57 - vertices see equal to null well then
04:59 - chicken out all right so if we save this
05:01 - code now and go into unity let's hit
05:04 - play to generate our vertices then
05:06 - inside of a scene view we can actually
05:08 - see a really nice grid of a bunch of
05:11 - spheres each one representing a vertex
05:13 - and we can of course change the x and z
05:15 - size over here awesome now the next step
05:18 - is to define the triangles that make up
05:20 - our grid let's start by making the first
05:22 - triangle this triangle is going to go
05:24 - from 0 and then up one point but since
05:27 - our vertices are ordered from left to
05:29 - right we can't just add one instead we
05:31 - add the X size plus one to go up one row
05:34 - from there we simply go back down to one
05:37 - so to do this in code we first need to
05:38 - set a length for our triangles array so
05:41 - we'll go triangles equals a new in the
05:43 - Ray and so far we're going to need three
05:46 - points we then set each of the points so
05:48 - the first point triangles 0 is going to
05:51 - be equal to 0 the second one triangles
05:53 - one is going to be equal to X size plus
05:56 - 1 as we just talked about and the
05:58 - triangles 2 is going to be equal to 1 if
06:01 - we save this and go into unity and hit
06:03 - play
06:03 - voila we can now see that a single
06:06 - triangle appears for the second triangle
06:08 - we want to go from 1 then up to excise
06:11 - plus 1 to move up one row and then to
06:14 - exercise plus 2 to stay in the same row
06:16 - but go one to the right this can
06:18 - definitely be a bit confusing at first
06:19 - but don't worry it gets much easier with
06:22 - time so first we of course need to
06:24 - increase the number of triangles in our
06:25 - Ray to 6 and now again we can simply add
06:28 - the points so triangles 3 is going to be
06:31 - equal to 1 triangles 4 is going to be
06:34 - equal to exercise plus 1 and triangles 5
06:37 - is going to be equal to excise plus 2
06:39 - again if we save and run
06:41 - we can see that we've now created a
06:43 - perfect quad now to fill out the rest of
06:45 - the grid we basically repeat the code
06:47 - for the first two triangles and offset
06:49 - them each time to do this will first
06:51 - create a loop that is going to iterate
06:53 - over all the squares on the X so we'll
06:56 - create a four in x equals zero we keep
06:59 - going as long as X is less than the
07:01 - excise we'll take all of our triangle
07:03 - code and put it inside of this for loop
07:05 - we also need to create two variables one
07:07 - to keep track of the vertex we're
07:09 - currently looking at let's call that
07:10 - vert so int vert equals zero I will make
07:14 - sure to increase this by one every time
07:16 - we go through the loop so varis plus we
07:18 - also need one to keep track of the
07:19 - triangles let's call that int tries and
07:22 - set it equal to zero as well and every
07:24 - time we go through and have added six
07:26 - points to our triangles array will
07:27 - increase tries by six we then take our
07:31 - word variable which is going to increase
07:32 - by one each time and add it to each of
07:34 - the points so that as we loop through
07:36 - these squares the triangles will shift
07:38 - by one each time in other words we'll
07:40 - simply covert +0
07:41 - vert plus excise varied plus one another
07:45 - word plus one very plus X is plus 1 and
07:47 - third plus x is plus two so for the
07:50 - first square vert is going to be zero
07:52 - and it's simply going to be zero X is
07:54 - plus 1 1 1 X s plus 2 and so on the
07:57 - second time we go through vert is going
07:58 - to be 1 so it's going to shift
08:00 - everything one to the right so this is
08:02 - going to be one this is going to be x
08:04 - i's plus two that's going to be two
08:06 - that's going to be two and so on and
08:08 - it'll keep doing this until we've gone
08:10 - over all the squares we also need to add
08:12 - the tribes to the triangle index so that
08:14 - we don't keep updating the first six
08:16 - points over and over but we actually
08:18 - shift to the next triangle so in our
08:19 - list so that we don't keep updating the
08:21 - first six points over and over so we'll
08:23 - that tries plus zero tries plus one
08:26 - tries plus two and tries possibly trust
08:29 - us for and tries plus five awesome of
08:32 - course we don't want to create a new
08:33 - triangles array every time inside of
08:35 - this for loop we need to move this out
08:37 - of the for loop
08:38 - there we go so now we're creating a
08:39 - triangles array and then we're updating
08:40 - over the points and this time it's not
08:42 - going to have a fixed amount of six
08:44 - points instead we're basically using six
08:46 - points for each quad and our excise and
08:48 - the size define the amount of quads in
08:50 - our grid so we can simply say X is
08:53 - multiplied by the
08:55 - sighs the amount of quartz x o6 that's
08:58 - the amount of triangle points that we're
08:59 - going to need so if we now save this and
09:01 - go into indy and hit play we can see
09:03 - that we are generating the entire bottom
09:05 - part of our grid if you want we can
09:07 - actually add a bit of code to delay each
09:09 - step of adding the triangles this is
09:11 - pretty cool because it allows us to see
09:12 - how the triangles are gradually being
09:14 - generated to do this we need to change
09:16 - the function here into a corrode team so
09:19 - we'll change it from void to eye
09:20 - enumerator if you've never heard about
09:22 - co-routines before I'll have a link for
09:24 - that in the description for now we can
09:25 - just follow me and then every time we've
09:27 - updated a triangle we can put yield
09:30 - return new waitforseconds and I'm just
09:32 - gonna wait for let's say 0.1 second also
09:35 - we're currently only updating our mesh
09:36 - in the start method this is of course
09:38 - the most effective way of doing things
09:39 - but if you want to see these changes
09:41 - happen over time we need to move this
09:43 - into an update method so we'll create
09:44 - void update and simply paste our update
09:47 - mesh method in there and finally to call
09:49 - a quarantine we can't just call it like
09:51 - a normal function we need to add start
09:53 - corroding there we go so now if we play
09:56 - that we can actually see the triangles
09:58 - gradually being generated pretty cool
10:00 - now to fill out the rest of the rows we
10:03 - simply wrap everything in another loop
10:04 - that will go over each square on the z
10:07 - so in our code here will create another
10:08 - for loop here we'll set Z equal to zero
10:11 - and keep going as long as Z is less than
10:13 - this the size just like with our x loop
10:15 - here and we then take our entire for
10:17 - loop and put it inside of this new loop
10:19 - now if you run this it is going to work
10:21 - however it's not going to look quite
10:23 - right as you can see the triangles are
10:25 - generating but we're getting these weird
10:27 - lighting effects also you can see this
10:29 - orange line that's connecting in a
10:31 - pretty weird way the reason for this is
10:33 - that every time it wraps around to
10:34 - create a new road the script is creating
10:36 - a triangle between the previous square
10:38 - and the next one it results in this
10:40 - weird behavior this is of course not
10:42 - something we want each Square should
10:43 - only be connected to the ones next to it
10:45 - not like it's doing now while you can
10:46 - see it's creating weird connections
10:48 - underneath our plane to get rid of this
10:50 - we go into our script and every time we
10:52 - finished looping over a row we need to
10:55 - increment vert by one this will make
10:57 - sure the script skips generating a
10:58 - triangle that goes from one row to
11:00 - another and simply move on to the next
11:02 - points so after our first four statement
11:05 - finishes we want to write vert plus plus
11:09 - it should not be working we see as it
11:11 - wraps around there's no weird lighting
11:12 - effects or anything like that finally
11:14 - the last and definitely coolest thing is
11:16 - that we can adjust the height of all
11:17 - these vertices for example if we want to
11:19 - make it look like terrain we can add
11:21 - some symbol per than noise if you have
11:23 - no idea what pertinent noise is we have
11:24 - a video on that that I definitely
11:26 - recommend you check out so inside of a
11:28 - script this is actually really simple we
11:29 - just want to go to where we generate all
11:31 - of our vertices instead of just setting
11:33 - the wine to zero we'll create a float
11:35 - called Y we'll set it equal to math per
11:39 - the noise will input our X and Z and
11:42 - let's multiply everything by say two
11:44 - just to make it more clear also we can
11:46 - multiply our X by 0.3 and our Z by 0.3
11:50 - just to zoom out of our noise a bit
11:52 - again all the stuff is explained in the
11:54 - Perlin noise video and we can then
11:55 - simply use this Y value for our vertices
11:58 - I'll also just make this go a bit
12:00 - quicker by reducing the delay and now
12:01 - when we run it we can see that we're
12:03 - creating this really cool uneven terrain
12:05 - like surface now this is only by adding
12:07 - a single line of code
12:09 - I really recommend you experiment with
12:11 - combining multiple layers of noise to
12:13 - create more interesting results or maybe
12:14 - try to use the sine function to create
12:16 - wave-like behavior
12:17 - well of course have some things to where
12:19 - you can learn about that in the
12:20 - description finally we can of course go
12:22 - in here and remove the delay will turn
12:24 - into our normal function we'll put the
12:26 - update mesh at the top here to make it
12:28 - more efficient also we don't need to
12:30 - start it as a kuroh teen and let's also
12:32 - get rid of all the gizmos and now when
12:35 - we play voila we've created this super
12:38 - cool terrain yay that's pretty much it
12:41 - for this video if you enjoyed it make
12:42 - sure to subscribe and bring that
12:44 - notification bell so you don't miss the
12:45 - next one also don't forget to check out
12:46 - Skillshare simply click link in
12:48 - description to get started and if you'd
12:49 - like these videos consider supporting us
12:51 - on patreon patron is an awesome way to
12:53 - help us make these videos by donating a
12:55 - monthly amount you can choose how much
12:57 - and cancel at any time we really
12:59 - appreciate all the support on that
13:00 - thanks watching and I will see you in
13:02 - the next video thanks to the awesome
13:04 - patreon supporters who donated in
13:05 - October and especially thanks to Andrew
13:07 - kerning Co art Arman true VR systems
13:09 - simmer IO X and a player cheetah 3d Jeff
13:12 - Johnson infinity PBR Sybok mami Dennis
13:15 - Sullivan Chris Sheriff Abdullah prism fi
13:17 - thanks so long clear the set Fintan pan
13:19 - skewer
13:19 - where's the turkeys Kirk Ronan Tim Apple
13:22 - debauch burns cat now Kiyosaki
13:24 - Gregory Pierce Larry tweet James Rogers
13:26 - rock Baron pecan Vania Erasmus Robert
13:29 - bond car Jackson James P Anthony patent
13:31 - Q Swedish key and a breeze see you guys
13:33 - Rock