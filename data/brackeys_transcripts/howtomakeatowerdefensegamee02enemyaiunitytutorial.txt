00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to the second video
00:05 - on creating a tower defense game in
00:07 - unity me today we are actually going to
00:08 - be making an enemy and making him move
00:11 - around the scene the graphics for this
00:13 - enemy is going to be very simple at
00:15 - least for now but we are going to
00:17 - program waypoint behavior and enemy
00:20 - movement so that's going to be very fun
00:22 - so let's take right into today's video
00:24 - so you can see that I'm here in unity
00:26 - and this is where we left off with
00:28 - creating a start and ending point and
00:30 - there are lots of different ways to do
00:33 - enemy AI in our case it's very simple we
00:36 - want to move from point A to point B
00:38 - along a pre-specified path and when
00:43 - doing it this way
00:44 - the easiest way is really to set up a
00:46 - set of waypoints in our case just empty
00:49 - game objects that the enemies will use
00:53 - to guide them along the path so they
00:55 - will move towards one Waypoint find the
00:58 - next one and move towards that and it
01:01 - will do that until it reaches the end
01:02 - and then in our game we want that to
01:05 - destroy the enemy and we want to lose
01:07 - some health so how can we really set
01:11 - this up well I think before we go ahead
01:13 - and do anything we should just move our
01:16 - camera into some kind of some position
01:19 - that makes a little more sense than this
01:20 - and then maybe create some kind of
01:22 - ground plane just so we have a game that
01:25 - makes a lot more sense to look at so if
01:28 - we go ahead and take our camera here
01:29 - find our main camera and at the moment
01:32 - it's moved back a bit let's start by
01:34 - moving this up a lot and then are
01:37 - rotating it a bit let's move it over
01:40 - here actually so moving it over like
01:43 - this moving it back and then moving it
01:47 - up some more then rotating it on the I
01:50 - think that's the X we need to rotate it
01:52 - and we need to rotate it about maybe 45
01:55 - degrees maybe even more something like
01:57 - 60 degrees and then move it up even
02:00 - further so that we have a clear overview
02:03 - of what's going on with our map and you
02:05 - can of course adjust your camera's
02:07 - position to change it's going to depend
02:10 - on the map that you've created and I
02:12 - actually want the
02:13 - to be um to be even more at an angle I
02:17 - want it to be almost entirely viewed
02:20 - from above so right now this is going to
02:24 - be ah that's a bit too much so let's do
02:27 - 65 and let's bring it back a bit bring
02:31 - it down a bit something like this is
02:34 - going to work just fine for now at least
02:36 - then we can always change stuff like
02:38 - this later we might also add the a
02:40 - possibility for the player to move the
02:43 - camera around on his own so without
02:45 - further ado what we want to do here is
02:47 - create some kind of a ground plane so
02:50 - let's right-click go to 3d object and
02:52 - then select cube let's reset this and
02:54 - call this the ground plane not to be
02:57 - mistake with staying with our path
03:00 - objects which we just called our ground
03:03 - and what we can do with this is move it
03:05 - into the environment and have it sit at
03:08 - the top here so we can easily find it
03:10 - and we want to take this scale here and
03:14 - bump that up to something crazy like a
03:16 - thousand and by 1 by a thousand
03:20 - something like this and then take some
03:21 - kind of very matte material so let's
03:24 - create a new material and call this the
03:27 - ground plane and drag that on there and
03:30 - then we can go in and change the albedo
03:33 - here to something very dark something
03:36 - like that bump the smoothness all the
03:39 - way down and then the metallic nests are
03:41 - the bit something like this looks pretty
03:43 - nice and then what we need to do is of
03:45 - course move this ground plane down so if
03:49 - we find a ground plane here and then
03:51 - move it down by using ctrl we should be
03:55 - able to get our platforms to just stand
03:58 - on top of this plane and what this does
04:01 - instead of just changing the skybox to a
04:04 - solid color is it gives us a bit of
04:06 - shadowing from our platforms onto the
04:09 - ground and I think that's going to look
04:11 - very sweet at a later State if you don't
04:14 - want this you could of course just go
04:15 - into the main camera change from skybox
04:17 - to solid color and then choose a color
04:19 - similar to this one and what I want to
04:22 - do is I want to change the material of
04:24 - the ground plane to something
04:27 - it blueish just to give it a kind of a
04:29 - tint so that the game looks a tiny bit
04:33 - more interesting just from the
04:34 - background color so it's not just a
04:36 - boring grey so this is a bit better and
04:39 - of course we will be adding more
04:41 - graphics to the game as we proceed so
04:43 - this is fine it's give us it gives us an
04:46 - overview of our map for sure so now we
04:49 - can go ahead and collapse that
04:51 - environment there and we can go ahead
04:53 - and create an enemy so if you
04:55 - right-click here and go on the 3d object
04:57 - and then select sphere reset the
04:59 - transform and call this our enemy and
05:02 - then we can drag this guy up and over
05:05 - and put him somewhere along our path
05:07 - let's do that so that's moving up here
05:10 - and move him over and put him near our
05:14 - path just so we can see what it will
05:18 - look like when he's walking down it and
05:21 - he's going to float about at this height
05:24 - and I think that looks fine and then
05:26 - what we can do maybe just move him over
05:28 - and then scale him up a bit so let's do
05:32 - at least a scale of 2 by 2 by 2 I think
05:36 - that just made him a bit easier to see
05:38 - and let's go ahead and create a material
05:40 - that stands out a bit from the rest here
05:42 - so let's create a new material and call
05:46 - this the enemy material and drag that
05:48 - onto our enemy again changing the albedo
05:51 - and the smoothness all the way down on
05:53 - this one they'll be toe to some kind of
05:56 - light blue almost sign color and I think
06:01 - something like this actually looks
06:02 - pretty great we want it to be very
06:05 - bright and pretty saturated so I think
06:09 - that looks pretty nice and you will
06:11 - notice right now that the light is
06:13 - coming from the same angle as our camera
06:16 - is so if that's something you want to
06:18 - change you can of course rotate around
06:20 - the light here until it looks more like
06:24 - something that you would like so I would
06:27 - like it not to come from the right here
06:29 - but maybe from the left something like
06:31 - this and you can even play around with
06:34 - the intensity of the light so that it
06:37 - will suit you better
06:38 - right now it's kind of tinted and we
06:40 - maybe go ahead and unten that at least
06:43 - just a bit something like that okay so
06:46 - that that was basically our scene set up
06:48 - for now so we can take this enemy here
06:51 - and we can turn him in to a prefab by
06:53 - simply dragging him down into the
06:56 - project panel and we can now save our
06:58 - scene and now it's time to create some
07:01 - waypoints for our enemy to walk along so
07:04 - in order to do this that's right-click
07:06 - go under create empty and let's reset
07:08 - the transform on this and call this one
07:10 - a waypoint and for this we are going to
07:14 - just move it over here and move it up to
07:16 - so it will be right around the path here
07:19 - and what we will do with this is we will
07:22 - add a icon up here so click this button
07:26 - right here and you can select an icon
07:27 - and I'm going to select on this Ruby
07:30 - shape here which I kind of like and I'm
07:33 - going to scale up the 3d icons here
07:36 - quite a bit so it's easy to see in the
07:39 - game and this is of course not visible
07:41 - in the game itself but only in our scene
07:44 - view and the enemies are going to be
07:47 - walking about here so that's going to be
07:49 - fine
07:50 - and we don't need to specify a waypoint
07:52 - right at the beginning because this is
07:54 - where we will spawn them in and then
07:56 - they will seek towards the first
07:58 - Waypoint so our first Waypoint will be
08:00 - over here but again because we're going
08:02 - to be creating many waypoints let's make
08:04 - an empty game object called waypoints
08:07 - that and make sure that this is at
08:09 - position 0 0 0 and then we can take our
08:12 - Waypoint make a prefab out of it and
08:14 - drag it under the Waypoint let's also
08:16 - make a folder in the project panel one
08:19 - cold way how not waypoints but prefabs
08:23 - and we can take our enemy our node and
08:26 - our Waypoint and drag them under there
08:28 - and one cold materials and take our many
08:34 - materials and drag them under there by
08:36 - the way if you want to get the same
08:38 - project old project setup that I have
08:41 - here the old project viewer instead of
08:43 - the large icons what you can do is
08:45 - simply go up here and select one column
08:49 - layout instead of the two column layout
08:51 - I just find this a bit easier because it
08:54 - doesn't
08:54 - take up as much space but it's
08:55 - completely a preference so now we can
08:58 - take this Waypoint here and move him
09:00 - over to that location right there I
09:04 - believe is that correct let's see is he
09:08 - in the center it looks like it and then
09:11 - we can duplicate him and move him down
09:14 - something like there duplicate move over
09:18 - and we're just going to keep doing this
09:21 - every time that is a corner we are going
09:23 - to move it over until it fits there move
09:28 - it down to there and if you want this to
09:31 - be easier to see what you can do is you
09:33 - can press on the Y here to view it from
09:35 - above and then you can press on the
09:38 - center of this up here to turn it into
09:41 - isometric view and that makes it a bit
09:43 - easier because there's no longer
09:45 - perspective involved which makes it
09:48 - easier to line up these arrows so if I
09:50 - select the other ones you can see that's
09:51 - right in the center that's right in the
09:53 - center that's perfect so let's duplicate
09:55 - this one move it down here make sure
09:57 - this arrow is right in the center then
09:59 - I'm just going to keep doing this until
10:02 - I filled out the entire board
10:06 - and finally we are going to also place a
10:08 - waypoint at the end point and that's
10:11 - because we might spawn at the start
10:14 - point but the enemies won't know to go
10:16 - to the end point unless we actually
10:18 - place a waypoint there or add some kind
10:21 - of reference to that place so this is
10:24 - now our map layout and we can go ahead
10:26 - and collapse the waypoints here so what
10:29 - I want to do is basically add a script
10:31 - that has a static reference to all of
10:34 - these different way points so that we
10:36 - can very easily reference them through
10:39 - an enemy script so if we go on our way
10:42 - points here and add a script and this is
10:44 - going to be called waypoints how
10:47 - creative I am and let's double click
10:49 - this to open it up in visual studio and
10:51 - if what I explained doesn't make sense
10:53 - to you it hopefully will in a second or
10:55 - you can of course just write after me
10:58 - and maybe you will get it when we
10:59 - actually implement this in the enemy
11:01 - script so you can see that I've I'm here
11:03 - in visual studio and I'm going to delete
11:07 - this namespace because we are not going
11:08 - to be using it and I'm going to delete
11:10 - both the start and the update method for
11:12 - now and what I want here is basically a
11:16 - public static and we want to make this
11:19 - static so that we don't need a reference
11:21 - to the script we can just access this
11:24 - field from anywhere whatsoever so a
11:27 - public static and then this is going to
11:29 - be a transform array and an array is
11:33 - basically just a list of items and we
11:35 - use transform whenever we want a list of
11:38 - game objects in our scene so that's
11:41 - perfect then we can call this one um
11:43 - maybe points or waypoints whatever you
11:46 - want to call it and then we are going to
11:48 - recreate the start method here and then
11:51 - inside of this stuff as actually let's
11:53 - do this in awake there we go and inside
11:57 - of the awake function we basically want
11:59 - to find all of the different objects
12:01 - that are a child of this object that is
12:05 - parented to this waypoints object and
12:08 - then we want to load them into our
12:10 - points array so in order to do this we
12:14 - make we set points equal to a new
12:17 - transform array
12:19 - and the length of this is going to be
12:23 - our transform dot child count and that's
12:28 - the number of children that is currently
12:31 - on the waypoints and that is in our case
12:33 - going to be it starts at zero so that's
12:37 - in our case going to be 13 Cole so we
12:41 - are going to make an array of 13 points
12:43 - and then we are going to say 4 and then
12:47 - we are going to do int I as long as I is
12:50 - less than and then points dot length we
12:55 - are going to say transform dot get child
13:00 - with the index of I so here we are
13:03 - iterating through every child of the
13:06 - waypoints object and then we are setting
13:10 - or we are pushing that into our array
13:17 - with at the ithe slot so basically we
13:21 - are saying there are 13 children on this
13:24 - object create 13 spaces in the array
13:28 - then loop through them so that I is
13:30 - equal to 0 1 2 3 on all the way up to 12
13:34 - and then set points I that means the
13:38 - zeroth placed in the first place then
13:40 - the second place and so on in the array
13:43 - equal to that child so now we have a
13:45 - list of all of the children that is
13:47 - static at them we can easily access so
13:51 - what we can do now and why this is smart
13:53 - is because when we then spawn in an
13:55 - enemy it does need to be aware of any
13:58 - waypoints it don't it doesn't need to
14:00 - find them or order them we've already
14:02 - done that what we can then do is simply
14:05 - have our enemy prefab here and I'm just
14:08 - going to drag this into the scene and
14:10 - I'm going to have it start at the start
14:12 - position here just for now later what we
14:14 - can do is we can add some kind of wave
14:17 - spawner that will take care of spawning
14:19 - these in what I'm going to add it there
14:21 - and then I'm going to add a script that
14:23 - we call enemy and this is in charge of
14:26 - moving the enemy from one place to
14:29 - another and actually we might even want
14:32 - to call this the
14:33 - movement maybe split that up in some way
14:36 - because we're also going to have health
14:38 - and stuff like that now let's just keep
14:41 - it in one script because I don't think
14:43 - it's going to be that large but if you
14:45 - are planning on adding a lot of
14:47 - functionality you could definitely split
14:49 - this up so but for now we'll keep it in
14:51 - here we might split it up at a later
14:53 - point so what we will do is first off at
14:56 - some kind of speed variable and that is
14:58 - going to be a public float so that we
15:00 - can have decimal places and we are going
15:02 - to set that equal to may be 10 at the
15:05 - moment that numbers of course complete
15:07 - the arbitrary you can adjust it inside
15:09 - of the editor then what we want to do is
15:12 - we want to have some kind of target and
15:15 - I am going to make this private because
15:20 - we are only going to be setting this
15:22 - inside of our enemy script so we are
15:24 - going to have a pipe private and our
15:26 - target is going to be a transform target
15:29 - and also have a private integer which is
15:32 - the wave point index and that is going
15:38 - to be defaulted to 0 and this is going
15:40 - to be the current waypoint index we are
15:43 - pursuing so first the 0th then the fro
15:46 - first then the second all the way up to
15:48 - 12 okay and then inside of our start
15:52 - method we are going to set target equal
15:56 - to and then we are going to use this
15:59 - waypoints dot points array that we just
16:02 - created so now we are referencing the
16:04 - points array inside of the Waypoint
16:07 - script by simply doing this because it's
16:09 - static and then we want the first one
16:11 - which is of course the 0 with the index
16:15 - of zero and now we are pursuing that
16:18 - target with the Waypoint index of 0 so
16:21 - that's perfect and then what we want to
16:24 - do is we want to every every frame that
16:30 - is called so inside of the update method
16:31 - we want to move a little closer to that
16:34 - target and the way we do this is we get
16:37 - some kind of direction in which we have
16:40 - to move in order to get there so the and
16:44 - this is basically the direction
16:46 - have to point in order to get to the
16:49 - Waypoint so we get a vector which is
16:52 - three numbers that represent the X and
16:55 - the y and the Z movement that we need to
16:58 - do in order to point towards the target
17:02 - so in order to do this we make a vector
17:06 - three direction and set that equal to
17:09 - and the way you get a direction vector
17:12 - from one point to another point is that
17:15 - you simply subtract them so this in our
17:18 - case we want to point from our current
17:21 - position to towards the target position
17:25 - so that's going to be target that
17:27 - position minus transform that position
17:31 - and this is going to give us a direction
17:33 - vector what we can then do is um move
17:37 - with this direction vector so we do that
17:40 - use using our whoops transform dot
17:44 - translate and translate basically means
17:47 - moves the transform in the direction and
17:50 - distance of translation and the
17:52 - translation is given by guess what
17:55 - a vector so our vector here is going to
17:57 - be our direction but we also want a
17:59 - speed to move so I'm going to normalize
18:04 - this so I'm going to use direction that
18:06 - normalized to make sure that this is
18:08 - always going to have the same length
18:11 - the same fixed speed so that the only
18:13 - thing controlling our speed will be our
18:16 - speed so if you don't know about vector
18:18 - maths this is just something that you
18:20 - know that you have to do and then you
18:23 - can go ahead and watch some of my other
18:25 - videos maybe explaining more about what
18:27 - this means so let's multiply this with
18:30 - our speed in order to get the actual
18:32 - speed that we want to move at and let's
18:34 - also multiply this with time.deltatime
18:37 - and time that delta time is something we
18:40 - multiply with that will make sure that
18:43 - the speed that we move at is not
18:46 - dependent on the frame rate because the
18:48 - M it's not all computers who run the
18:51 - game at the same frame rate and one
18:53 - computer might even vary depending on
18:55 - what is happening in the background or
18:57 - whatever how much stuff is on the screen
19:00 - and therefore if we moved every frame
19:03 - with the same amount no matter how many
19:05 - frames were drawn then we would suddenly
19:07 - move very fast or very slow so to kind
19:11 - of solve this issue we have the time
19:14 - that Delta time with this which is the
19:17 - time passed since the last frame so if a
19:19 - lot of time passes meaning not a lot of
19:21 - frames are drawn we move more each frame
19:24 - than if a lot of frames are drawn and
19:26 - not so much time passes okay
19:29 - so that's what we're doing here and then
19:31 - we want to simply say that the space
19:33 - that we want to move relative to is the
19:35 - world space and now we are done with
19:39 - this part of the code so on this site
19:43 - and the last thing that we kind of need
19:45 - to implement is some sort of way for us
19:47 - to switch waypoints but I think that
19:49 - before we actually do that we want to
19:52 - jump back into the game and maybe just
19:54 - try this out so I'm going to switch back
19:56 - into perspective mode here and lets us
19:59 - see that this wave point index is a sign
20:02 - but its value is never used that's
20:05 - because we haven't implemented this yet
20:07 - so let's try and hit play and see if
20:09 - this works
20:09 - so you can see that ball starts moving
20:12 - towards the Waypoint and then it stops
20:14 - and that's because we don't have any
20:16 - Waypoint switching but everything is
20:18 - actually happening as we want it to so
20:21 - let's switch white right back here and
20:23 - then we say if we are if we have reached
20:27 - the Waypoint that means that we are
20:29 - within a very small distance to the
20:32 - Waypoint in an ideal world we would be
20:34 - exactly at the wave points position but
20:37 - because this is a computer and it might
20:39 - sometimes do some smaller mathematical
20:43 - uncertainties we are going to say that
20:47 - if we are within maybe point two units
20:49 - of the Waypoint so if our distance from
20:53 - the our current position to the wave
20:56 - point is less than point two we've
20:59 - reached the Ray point so that's what
21:01 - we're going to say here and we're going
21:02 - to check for the distance by using
21:04 - vector three distance and then we give
21:06 - it the first point with this our
21:08 - position so transform the position and
21:11 - the second one which is the target
21:13 - that position if that is less than or
21:16 - equal to point two units well then we've
21:21 - reached I our our Waypoint and then we
21:24 - want to get next Waypoint like this and
21:30 - then we can make that method down here
21:31 - get next Waypoint and we simply do this
21:38 - by saying that we want our on our wave
21:42 - point index to increase by one so that
21:46 - we just say plus plus and then we want
21:49 - our target to be equal to waypoints dot
21:53 - points to the wave point index so the
21:59 - first time that whoops the first time
22:01 - that this code runs through its going to
22:03 - set the target equal to the first wave
22:05 - point it's going to move towards it
22:07 - until it reaches the wave point then
22:10 - it's going to get the next wave point
22:12 - it's going to say that the next wave
22:14 - point we are going to get is this one
22:16 - plus one so the second time this is
22:19 - going to say one and the third time it's
22:21 - going to say two and so on and then it's
22:23 - going to get the wave point at that
22:26 - index and to set it as the target and
22:29 - then it's going to go back move distance
22:33 - check and when that passes it's going to
22:35 - do it again and so keep on going until
22:37 - there are no more wave point and let's
22:40 - just set that in so we can just say that
22:42 - if wave point index is equal to or is
22:53 - larger than or equal to I should say the
22:59 - waypoints dot points dot length so the
23:05 - total amount of waypoints minus one I
23:10 - believe yeah well then we want to
23:13 - destroy this object so we want to
23:15 - destroy our game object here our enemy
23:20 - is dead so let's try and do this and
23:23 - just to speed things up I'm going to
23:26 - increase the speed of our n
23:27 - me so we can see whether or not it works
23:29 - when he gets to the end here so already
23:33 - there that's an era and that was an
23:34 - example of when I need to loosen the
23:38 - requirements here so let's do point four
23:40 - and that's going to depend on on your
23:42 - speed here but I'm just going to say
23:43 - point four now that's going to work just
23:45 - fine and you can see that little guy
23:48 - races through and when he gets to the
23:51 - end oh it's going to say index out of
23:54 - range so it seems that the reason this
23:56 - wasn't working is that the destroy
23:58 - operation sometimes take a bit of time
24:01 - before cleans up the entire object and
24:03 - that means that the code might run
24:05 - further down here before the object is
24:08 - destroyed and in that case we will of
24:10 - course get an error so what we want to
24:12 - do is simply hit return on this so that
24:14 - we are sure that it won't go down here
24:17 - before the object is destroyed so that
24:20 - should fix everything and when you hit
24:22 - play now and I'm even going to show you
24:24 - something really cool about this if we
24:25 - add a lot of enemies in here so I'm just
24:28 - going to add a bunch of enemies here we
24:30 - go just one two three and I'm just going
24:33 - to distance these just a bit it doesn't
24:35 - matter where they start they will seek
24:37 - the first point whenever that is you can
24:39 - see that it works with multiple enemies
24:42 - and for some reason now it's not doing
24:45 - anything at all that's because I forgot
24:47 - to add the enemy script and apply that
24:50 - as a prefab now it's working so if we
24:52 - add these three enemies we can see that
24:54 - they are indeed going down the path and
24:57 - then if I select one of them and change
24:59 - the speed it does this at runtime so I
25:03 - can change the speed of these
25:04 - individually and have them go through
25:07 - the path and you can see that when they
25:09 - reach the end destination they are
25:11 - indeed destroyed so that is the path
25:13 - finding system that we are going to be
25:15 - using that is the very basis of our
25:17 - enemies and I hope that you have enjoyed
25:19 - this tutorial as much as I have without
25:21 - further ado thanks for watching and I'll
25:23 - see you in the next video thanks to all
25:26 - of the awesome patreon supporters who
25:27 - have donated so far and a special thanks
25:30 - to Lux game TV with the real name Jeff
25:32 - sacred