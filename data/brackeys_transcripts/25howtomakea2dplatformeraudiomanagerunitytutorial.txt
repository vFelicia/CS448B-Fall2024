00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:04 - video number 25 in the how to make a 2d
00:07 - platformer course in today's video we're
00:09 - going to be making an audio manager for
00:11 - our game that means we're going to be
00:13 - creating this Central script that is
00:15 - going to store a list for of all of the
00:17 - different audio files that we want to
00:18 - play during our game and then we're
00:20 - going to have an very easy to use
00:22 - function called play sound where we
00:24 - simply insert a string storing the name
00:27 - of the file uh and it's then going to
00:29 - play it for us with some different sound
00:31 - variants so we're going to have a a
00:33 - pitch Randomness and a volume Randomness
00:36 - and that kind of stuff it's going to
00:37 - make it very easy for us to add new
00:39 - sounds to our game so that's awesome so
00:41 - without further Ado let's go ahead and
00:43 - get started so you can see here that I'm
00:46 - in the project as I lifted the last time
00:49 - and uh well basically nothing's changed
00:51 - here I simply move the uh script we
00:53 - created in the last video under the
00:55 - scripts folder and uh we should be
00:58 - pretty much uh ready to to create a new
01:01 - one so under the add component simply
01:03 - type audio manager and then new script
01:05 - and make it of type c so let's hit
01:08 - create an ad and let's double click this
01:10 - to open it up in Visual Studio on Mon to
01:12 - develop whatever you are using so uh
01:16 - this script is actually going to be
01:18 - fairly simple in nature uh but it's
01:20 - going to be very very effective for the
01:22 - stuff that we want to do so first off I
01:25 - want to get rid of the using system doc
01:27 - collections namespace we're not going to
01:29 - be needing that whatsoever and uh we
01:32 - want this to derive from mono
01:35 - behavior um but before we actually go
01:37 - and model out what we want in our audio
01:39 - manager class I want to create a
01:41 - different class I want to create an a
01:44 - custom class up here and this is going
01:45 - to be a a public class and uh this class
01:49 - is going to be called sound so I want to
01:52 - kind of model out the idea of a sound
01:54 - object so if we're going to have a sound
01:57 - that we can play uh in our game
02:00 - well it's going to be uh needing uh some
02:03 - different properties one of these is a
02:06 - string which is going to store the name
02:10 - of our sound so we can very easily refer
02:12 - to the sound or tell it to play uh
02:15 - simply using a name as
02:17 - identification then next up we're going
02:19 - to have a public audio uh clip we want
02:23 - to actually associate an audio file so
02:26 - this is simply going to be the um
02:30 - uh let's just call this the
02:32 - clip and uh finally we want some kind of
02:36 - reference to an object in the game that
02:38 - can play this uh clip so if we think go
02:41 - into Unity here you can see that so far
02:44 - when we've been playing our respawn
02:46 - countdown uh audio file here we've been
02:49 - uh simply attaching an audio source to
02:52 - whatever object this is a DM object and
02:55 - uh we simply add in an audio clip from
02:58 - the uh in from the project here into
03:01 - this slot and the audio Source will
03:03 - actually play this with uh some
03:05 - different settings however what we want
03:07 - to do is we want to create this audio
03:09 - manager where we drag in all of our
03:11 - different clips and do some settings in
03:14 - here and then when we play the game uh
03:17 - in the start method we're going to
03:18 - instantiate a bunch of objects which
03:21 - will which will lie on the GM object and
03:24 - each one is going to have an audio
03:26 - Source uh Associated we could also put
03:29 - all of this on one single object but
03:30 - there's really no reason to so we're
03:32 - going to have these different objects
03:34 - and uh with each their audio source and
03:37 - then we want when we want to play the
03:39 - clip uh we simply uh have a reference to
03:42 - that audio Source uh and tell it to play
03:44 - so that's kind of the idea here and
03:46 - therefore we want to be able to
03:48 - reference an audio source and uh we want
03:51 - this uh reference to be well private
03:53 - because we don't want to be able to uh
03:55 - change it uh instead we're going to be
03:57 - creating a method to access this so
04:00 - we're going to have a private audio
04:02 - Source you can just leave out the
04:04 - private here if you want to and uh we
04:06 - simply going to call this Source then
04:09 - we're going to have a public uh method
04:12 - that's is going to be a void called Uh
04:14 - set source and uh in here we we're going
04:17 - to feed in it an audio Source reference
04:21 - underscore source and uh the method is
04:24 - simply going to say that Source equals
04:27 - underscore source and and uh I believe
04:31 - that's all we're going to do yeah cool
04:36 - uh so now that we have that in there we
04:37 - can also go ahead and create this idea
04:40 - of playing a clip uh so let's say that
04:42 - we have a public void called
04:45 - play and well basically what do we want
04:47 - to do whenever we play this clip oh yeah
04:50 - in here we can also uh add to our source
04:54 - the clip so we can say source. clip
04:57 - equals clip there we go because we don't
04:59 - need to do this each time we play
05:02 - because we know that the audio clip is
05:04 - not going to change uh throughout the
05:06 - game so uh when this method here is
05:08 - called uh the clip is going to be called
05:11 - or set with it okay so my phone went off
05:14 - there for a second but we'll just
05:16 - continue good so uh we simply insert the
05:19 - clip there then in our play Method uh we
05:22 - could very simply go ahead and say
05:24 - source. playay and it would play the
05:27 - clip Associated which is the clip that
05:29 - we've ins inserted up here however I
05:32 - think that there are some more awesome
05:34 - stuff that we can do with this we can
05:35 - add some Randomness to how the sound
05:38 - plays and I definitely think that that's
05:40 - something that we should do so let's uh
05:43 - think about this for a moment we have
05:45 - these uh variables up here well we could
05:47 - start by adding a public float which is
05:50 - going to stall the volume a public uh
05:53 - float which is going to store the pitch
05:55 - so now we have those two settings but
05:57 - those are kind of static and we could
05:59 - just set those directly down here which
06:01 - we're going to start out by doing so
06:02 - we're going to say that
06:04 - source. um volume uh should equal
06:09 - actually let's give these up here some
06:11 - uh default values and let's just add
06:14 - that back in
06:16 - there uh so let's just set that to a
06:18 - default value of
06:20 - 0.7 and this to a default value of one
06:24 - and you can see that we can simply add
06:26 - these in here so that's going to be
06:28 - equal to volume
06:30 - and we could do source. pitch and set
06:33 - that equal to pitch and that's going to
06:36 - be just fine uh and uh maybe we should
06:39 - see if this is showing up in the
06:40 - inspector uh and actually let's go ahead
06:43 - and test test that now so uh we can go
06:45 - in here and we can define a sound array
06:49 - and this is simply going to be a list or
06:51 - an array of sounds uh so that's going to
06:54 - store all of our sounds and we want this
06:56 - to be editable in the inspector but not
06:59 - ACC accessible through script so we'll
07:01 - make this a serialized field however
07:04 - this is not going to work you can see if
07:06 - I save this now and head into unity and
07:08 - wait for it to recompile here you can
07:10 - see that the audio manager still has no
07:13 - Fields showing up you can actually see
07:16 - this array and the reason why is because
07:18 - this class is not marked as a
07:20 - serializable class so again we need to
07:23 - go up here and add system. serializable
07:26 - and now this should work so if we save
07:29 - that and head back in
07:31 - here you can see it showing up and then
07:34 - we can add however many elements that we
07:36 - want to add uh but I'm just going to
07:39 - begin with one we can add a name to it
07:41 - and this is going to be the respawn and
07:44 - we can drag in an audio clip and you can
07:47 - see that we have this volume and Pitch
07:49 - values right here however this kind of
07:52 - sucks um instead of uh changing this
07:56 - value here which is kind of an arbitrary
07:59 - um value well we don't want our volume
08:01 - to ever go above one or below zero we
08:04 - could add some kind of restriction to
08:05 - this and we do that using a uh slider
08:09 - and uh to add a slider we simply use an
08:12 - attribute here called range and uh in
08:16 - this we give it a minimum value of zero
08:19 - and a maximum of one so that's simply
08:22 - going to clamp this volume between zero
08:25 - and one in the inspector uh and we can
08:27 - do the same with the pitch here
08:30 - uh that's going to be clamp between 0.5
08:33 - and 1.5 let's say you can put in
08:37 - whatever values you want here uh so now
08:39 - when we save that and head back in here
08:41 - it's just going to feel uh a lot more uh
08:44 - a lot nicer so now we can set our volume
08:47 - here to 7 and a pitch here to 1 and you
08:52 - can see that we can simply adjust these
08:55 - however we want to so that's very easy
08:57 - and and looks much nicer
09:00 - uh next up the randomness uh so we can
09:03 - actually go ahead and and create two
09:04 - more fields we can uh make a public
09:07 - float which is going to be the
09:11 - uh volume Randomness um volume
09:16 - variance uh random volume whatever you
09:19 - want to do I'm just going to do random
09:21 - volume here uh and uh this is going to
09:24 - be a multiplier so I'm going to default
09:26 - that to 0.1 so that means that if a
09:29 - volum volume was um let's say if our
09:32 - pitch had a random pitch of 0.1 the
09:36 - pitch could vary between uh 0.9 and 1.1
09:40 - because it's simply a multiplication
09:43 - however with the uh 0.7 here it would be
09:46 - 0.1 uh uh it would be 0.7 * 1 plus the
09:52 - random volume but I'm going to show you
09:54 - that in a second so uh public float
09:57 - random pitch and again default that to
10:00 - 0.1 and it's very good to have these
10:03 - random values in the game to make it
10:05 - sound uh not repetitive so uh we're
10:08 - going to uh give this a range also and
10:11 - it's going to go
10:13 - between zero and
10:16 - 0.5
10:18 - maybe uh I think that's actually the
10:21 - volume now that's going to be fine and
10:24 - we're going to do with the uh do the
10:25 - same with the pitch here and then down
10:28 - here we want to set it equal to volume
10:31 - multiplied with 1 + random. range and
10:36 - remember to put a parenthesis here
10:39 - random. range and uh this is going to go
10:43 - between um negative random
10:47 - volume divided by
10:50 - two to positive random volume divided by
10:56 - two so this is what it's going to look
10:59 - like and we're going to do the exact
11:01 - same thing with the pitch only now we
11:03 - change this to
11:06 - pitch and random pitch here and there so
11:12 - that's going to give our sound some
11:14 - variance and of course you can see why
11:16 - this works because we multiply it with
11:19 - uh one if we have uh no Randomness
11:22 - whatsoever then this is going to go
11:24 - from0 to uh zero and the random number
11:27 - between 0 and0 is what Z and therefore
11:31 - this is just going to return one and
11:33 - when multiplied by one this is simply
11:34 - going to be the volume if we go between
11:38 - uh 0.1 uh or if we have a randomness of
11:41 - 0.1 this is going to go from negative
11:44 - 0.05 to positive
11:47 - 0.05 uh which is going to be an a range
11:50 - of
11:51 - 0.1 and uh then we add that onto the one
11:54 - so this could either be 0.95 or 1.05
11:59 - five and then we multiply that with the
12:01 - volume so you can see how that works
12:04 - good so uh let's delete this now and uh
12:08 - I think this is pretty much all we need
12:10 - to do inside of our sound class uh next
12:12 - up is just adding some methods to
12:15 - actually make this work within Unity uh
12:17 - very easily so we can just go in here
12:19 - and check that all of these settings are
12:21 - working uh so just wait for Unity to
12:24 - reload here and you can see that they
12:26 - both both defaulted to 0.1 and how we
12:28 - can drag these around as we want for
12:31 - example uh the um respawn countdown here
12:35 - is not something that I want any
12:36 - variance on uh since it it's basically
12:40 - just my voice and that doesn't get too
12:43 - repetitive if it's only play like every
12:47 - time you fall down it's not a very
12:49 - repetitive sound like a machine gun or a
12:51 - dying effect or anything like that so
12:53 - we're going to be just uh fine uh with
12:56 - that
12:57 - cool uh and uh yeah so inside of our
13:01 - audio manager class we're ready to add
13:03 - some different functions first off let's
13:05 - make in the start
13:07 - function uh we can uh basically Loop
13:10 - through all of our different sounds and
13:12 - add an object uh for each one of them so
13:15 - make a four statement whoops a four
13:17 - statement and this is going to be I and
13:20 - it's going to be
13:21 - sounds.
13:23 - length so for every uh sound in the
13:27 - sound array we are going to add a new
13:30 - game object and we're going to store
13:32 - reference to this so it's going to be
13:33 - game objector go equals new game object
13:37 - and we're going to give it a name and
13:40 - the name that we want to give this is uh
13:43 - well let's prefix it by sound underscore
13:46 - and then the uh number of the sound so
13:49 - let's just do the index here
13:51 - plus uh another underscore plus and then
13:56 - the name of the sound so let's do
13:59 - uh let's do
14:02 - sounds to i. name that's how it's going
14:06 - to be cool and for now it's of course
14:09 - only going to spawn one object but when
14:11 - we add more uh this is going to be make
14:13 - to make it very easy to find the correct
14:15 - sounds and see the settings and if
14:17 - they've been applied correctly and all
14:19 - of that and uh next up we're going to uh
14:22 - actually add a component to this which
14:24 - is going to be the audio Source
14:25 - component because this is going to spawn
14:27 - without anything added to it only a
14:29 - transform component um so we simply
14:33 - goore
14:34 - go. add component of type and then audio
14:40 - Source there we go and uh then we can uh
14:44 - call on the sound so Sounds incremented
14:47 - by I do set source and we want to set
14:52 - the source to the newly added audio
14:55 - Source this is just the same as referen
14:57 - it refer ring s sing it up here so if we
15:02 - do audio Source here and call this
15:04 - underscore Source equals that that is
15:08 - the ex and then putting in the source
15:12 - here that's the exact same as simply
15:15 - doing on this except this is not going
15:18 - to store anything in the variable and so
15:20 - it's not going to uh be cleaned up with
15:22 - the garage collector because it's never
15:24 - really added so this is going to be aign
15:27 - a bit faster
15:29 - cool uh so now that we have that in
15:31 - place let me just think what we need to
15:34 - do we are setting the source and all of
15:36 - that is perfect then we can go ahead and
15:39 - create a method for playing a sound uh
15:42 - so I'm going to make a
15:45 - public void here called play sound and
15:50 - this is the audio manager so later we
15:52 - can do some special things for music if
15:54 - that's something that we want to do uh
15:56 - but we'll we'll see and uh this is going
15:59 - to take in a string which is going to be
16:01 - the uh name of the sound and it's simply
16:05 - going to Loop
16:08 - through uh all of the
16:10 - sounds so I'm creating the same loop as
16:13 - we had up here and uh there are more
16:16 - effective way of finding a specific
16:18 - sound all of that I know uh but this is
16:20 - going to be just fine and it's very easy
16:23 - syntax I mean you understand why this is
16:25 - working so don't worry unless you're
16:27 - going to be having hundreds of thousands
16:30 - of sounds this is going to be fine uh
16:33 - and then we check if
16:35 - sounds make an if statement here if
16:41 - sounds to I
16:45 - do uh name is equal toore name then we
16:50 - found the correct s sound uh and we're
16:53 - just going to play the first sound that
16:55 - comes up with that name if they're
16:57 - multiple uh the other ones are going to
16:59 - be skipped we could just Loop through
17:00 - all of them and let let it play all of
17:02 - them that would be just fine uh but I
17:04 - think it's it's all right if we only
17:06 - play uh one uh so we are going to now
17:09 - play that sound by doing sounds to I do
17:14 - play there we go so once we found it we
17:17 - call play on the sound and uh then we
17:19 - want to return so there we go we exit
17:22 - out of the loop and everything is fine
17:24 - and if we reach this place down here uh
17:28 - well then it's because because it have
17:29 - has not found any sound um with that
17:33 - name so uh no sound with uh
17:37 - name uh and then we we're ready to throw
17:40 - some kind of debug.log statement it's
17:42 - not going to crash or anything uh but we
17:44 - definitely want to let ourselves know
17:46 - because then we are calling something
17:48 - that doesn't need to be called so uh
17:50 - we're just going to throw a warning here
17:51 - saying that uh audio
17:56 - manager uh sound
18:00 - not found in
18:03 - uh in sounds array or in
18:09 - list and then we uh specify the uh name
18:14 - of the sound here so not found in this
18:16 - plus and then we do uh underscore
18:22 - name all right so I'm just going to do a
18:24 - comment there instead looks cleaner cool
18:28 - and that's basically all we need um
18:30 - there's only one thing with this and
18:32 - that is we need a reference to this
18:33 - audio manager and instead of getting
18:36 - that by uh dragging in as a component or
18:39 - whatever uh we're going to be using u a
18:42 - kind of Tey Singleton as we've done
18:45 - before uh so again let's create a static
18:47 - reference and uh then um set that
18:50 - through the awake method so uh here
18:53 - we're going to create a public static
18:56 - Audio Manager
18:58 - and this is going to be the instance and
19:02 - in
19:03 - the void start or uh void a
19:08 - wake we simply want to set instance
19:11 - equal to uh
19:15 - this and we can just check if there are
19:17 - multiple things and then throw an error
19:19 - so if instance is not equal to
19:23 - null
19:24 - debug. log error more than one
19:31 - audio manager in the
19:35 - scene there we go and this is just going
19:39 - to be an
19:43 - else
19:45 - cool and I believe that was
19:49 - all we reference that we go down here
19:52 - and uh just for quick testing we can
19:54 - call the uh audio doplay method through
19:57 - here uh so that just go and do that so
20:00 - we'll just play a sound here so we'll
20:01 - say play sound and the sound we want to
20:04 - try playing is the respond
20:07 - sound just to see if this is working and
20:09 - let me just turn on my audio here so I
20:12 - can listen in uh on whether or not this
20:14 - is working uh let's try respawning 3 2 1
20:19 - so that's actually working and you can
20:21 - see under the GM object uh that we okay
20:25 - so the sound is right here and we
20:27 - probably want to parent it to the GM
20:29 - object I forgot that part but you can
20:30 - see that the volume is randomized the
20:33 - pitch is randomized within the boundary
20:36 - we've set and uh yeah that's all really
20:39 - perfect and you can see its name
20:40 - correctly and all that so uh just to
20:43 - make this a bit cleaner we simply going
20:44 - to go into this uh game object and say
20:49 - uh go. transform. set
20:52 - parent and we want to set it to this.
20:55 - transform
20:59 - there we go and that's just going to
21:00 - look a lot better so if we hit play now
21:02 - it's going to play the sound responding
21:05 - and you can see that it now appears
21:06 - under the GM object we can of course
21:08 - create a sub object for this you can do
21:10 - whatever you want with this in order to
21:12 - organize it uh but this is going to be
21:14 - the very Basics so let's just try and
21:16 - implement this let's remove this play
21:18 - sound call right there let's instead
21:22 - open up our game
21:24 - master and we can now delete this audio
21:26 - Source right here it's not needed uh
21:30 - let's create a reference to our audio
21:32 - manager from within this game master so
21:35 - uh let's create down
21:38 - here let's create it down here uh a
21:42 - private audio manager so we'll just do
21:47 - all of a caching here
21:49 - cache private audio manager and let's
21:52 - just call this the audio manager and in
21:55 - the start method we'll set uh we do all
21:59 - of this and then we
22:03 - cache we'll simply set audio manager
22:07 - whoops audio manager equal to audio
22:12 - manager.
22:15 - instance cool and we can of course check
22:18 - if this is null we should probably do
22:21 - that so if audio manager is equal to
22:23 - null when then we throw a debug. log
22:27 - error say saying that uh freak
22:31 - out um the uh
22:36 - no audio manager found in the
22:41 - scene there we go and uh then under the
22:45 - respawn player where we find our audio s
22:48 - source and play the sound instead what
22:50 - we want to do is we want to say audio
22:55 - manager. playay sound and then we give
22:58 - the name here so respawn and instead of
23:02 - hardcoding this we could add it as a
23:04 - variable up here which I think we are
23:07 - going to do so we already have all of
23:09 - the spawning stuff so let's do a oops
23:11 - let's do a public
23:14 - string and this is of course going to be
23:17 - the uh spawn sound
23:21 - name and we're simply going to feed this
23:25 - down here case save that remember when
23:30 - we go back into Unity to change this
23:34 - variable there we go to respawn now hit
23:39 - apply collapse that collapse that clear
23:43 - that collapse that and that and that
23:48 - okay we want to watch that and now hit
23:50 - play and hopefully it's not going to
23:52 - play right away but it's added here now
23:55 - you can see that the volume and pitch is
23:58 - defaulted to one but this should change
24:01 - as soon as we uh actually respawn so
24:03 - when I jump down now respawning it
24:06 - changes and the sound actually plays so
24:10 - you can see here that the volume just
24:12 - bumped down to
24:14 - 0
24:16 - S uh that might be correct but I
24:19 - actually only wanted it okay so it
24:21 - starts at 0.7 so that's why and that's
24:24 - just fine so you can see that this is
24:26 - now working just as in intended we have
24:29 - the variance and I want to disable this
24:31 - for for that uh there we go hit apply to
24:35 - that and you can go ahead and add all of
24:36 - the different sounds that you want by
24:38 - simply following this very simple
24:40 - pattern of getting a reference to the
24:42 - audio manager and then calling the play
24:44 - sound you don't even need to Cache it if
24:46 - it's not something you want to do you
24:48 - can just call it directly it's not going
24:50 - to H hurt your performance too much so
24:52 - that was basically all I wanted to show
24:54 - you in this video I hope you enjoyed it
24:56 - and I'll see you in the next one one
25:05 - [Music]