00:00 - in this video we're going to have a look
00:01 - at creating a loading bar like this one
00:03 - in unity let's get started so this thing
00:05 - is completely empty except I have a
00:07 - camera and a canvas with a background
00:09 - element and a load level button and this
00:12 - is just a standard unit button I've just
00:14 - changed the way it looks a little bit so
00:16 - we want to create a new script let's
00:17 - also create an empty game object for the
00:19 - script to sit on let's reset the
00:21 - transform on it and let's call it level
00:23 - loader we then take our level loader and
00:25 - drag it to the top and add a component
00:27 - which we will also go ahead and call
00:29 - level loader choose C sharp and hit
00:31 - create an ad
00:32 - let's now double click this to open it
00:33 - up in Visual Studio and the first thing
00:35 - we want to do here is get rid of both
00:37 - the update and the start method we also
00:39 - not be using the system dot collections
00:41 - dot generic name space so the first
00:43 - thing that we want to create is a
00:44 - function that we can call from another
00:46 - script or from our button that will tell
00:49 - this script that we want to load a new
00:50 - level to allow myself to access it from
00:52 - another class let's make it public it's
00:54 - not going to return anything so we'll
00:56 - write floyd-- and let's just call it
00:57 - load level now we'll probably also want
01:00 - to be able to specify what level to load
01:02 - we can either give it a string here for
01:04 - the name of the scene or an integer for
01:07 - the index let's just do a scene index
01:10 - here now we want to access the scene
01:12 - manager in order to load a new scene to
01:14 - do that we go up here and include Unity
01:17 - engine that's scene management this way
01:20 - down here we can now write scene manager
01:22 - does load scene and we want to choose
01:24 - the one called load scene async now the
01:27 - normal load scene method basically
01:29 - pauses the entire game in order to spend
01:31 - all its resources trying to load a new
01:33 - scene however load scene async loads the
01:37 - scene asynchronously
01:38 - in the background that means that it
01:40 - keeps our current scene and all of the
01:42 - behaviors in it running while it's
01:44 - loading our new scene into memory what
01:46 - we can then do is get some information
01:48 - back from our scene manager about the
01:50 - progress of this operation to do that
01:52 - let's first finish off our method here
01:54 - by giving it our scene index and the
01:56 - cool thing about this load scene async
01:58 - method is that it actually returns an
02:00 - object with information about how our
02:02 - operation is going this object is called
02:05 - async operation so if we now go down
02:07 - here and make an async operation
02:09 - variable we can just call it operation
02:11 - and set it equal to or
02:14 - a sync method well then we can actually
02:16 - go into our operation object and access
02:18 - properties storing information about the
02:21 - operation most importantly we can get
02:23 - information about whether or not we are
02:24 - done loading and we also have this
02:26 - progress value this is a flow going from
02:28 - zero to one that indicates the current
02:30 - state of the process so all we need to
02:32 - do is make sure that while this
02:33 - operation is running we continually
02:35 - update our UI to reflect this progress
02:37 - variable and because this method is
02:39 - running asynchronously meaning as a co
02:42 - routine we'll have to do that in a
02:44 - corrode team as well if you've never had
02:46 - a look at corrode teams before this part
02:48 - might be a bit confusing and that's
02:49 - mostly because of how weird the syntax
02:51 - for corrode genes is basically what
02:53 - we'll do is go down here and create a
02:55 - new method and instead of writing void
02:57 - we write I in numerator we can call this
03:00 - method load asynchronously I think I
03:04 - spelled that correctly then as an
03:06 - argument we'll also want to take in the
03:07 - same scene index and we can output this
03:11 - line of code down here instead then we
03:14 - can create a while loop and this loop
03:16 - will continue running as long as
03:18 - operation dot is done is equal to force
03:22 - or if we want to write this in shorthand
03:24 - notation we'll write while the operation
03:27 - is not done then inside of this value
03:29 - we'll first off update our progress that
03:32 - could be by simply writing out our
03:33 - progress in a debug deadlock statement
03:36 - we could simply write operation dot
03:38 - progress into our LOC and then after
03:41 - every message we'll go ahead and wait a
03:43 - frame and then continue our while loop
03:45 - so we'll write yield return null and
03:48 - this is going to wait until the next
03:49 - frame before continuing so what's
03:51 - happening here is that whenever we call
03:53 - this Co routine we go ahead and load a
03:56 - scene asynchronously using this scene
03:58 - index specified within store information
04:00 - about the status of our current
04:02 - operation into a variable called
04:04 - operation then we start a while loop
04:06 - that will run until the process is done
04:08 - and each time it runs through we are
04:10 - going to throw out a message about our
04:11 - current progress and then we are going
04:13 - to wait a frame until we do that again
04:15 - now we of course also need to call this
04:17 - Co routine so appearance of our load
04:19 - level function will write start crow
04:22 - routine and will input the load is
04:24 - synchronously co-routine
04:26 - and of course as an argument we put
04:28 - scene index so then currently a few
04:30 - problems with this but if we go ahead
04:32 - and try it out it should actually be
04:34 - working now of course whenever we load a
04:36 - scene we want to go to file build
04:38 - settings and make sure that the scene we
04:40 - want to load is in here I'm going to add
04:42 - firstly level 1 which is the one that
04:44 - we're currently add and then level 2
04:46 - which is the scene that we want to
04:47 - transition to now the level 2 scene here
04:49 - is super simple it's just a panel with
04:51 - the text element that says level 2 and
04:54 - that also means that this is going to
04:55 - load ridiculously fast and so we'll
04:57 - probably get a few messages down here
04:59 - but it's possible that we only get one
05:00 - when beginning and when we end to find
05:03 - out that set a connection between our
05:04 - button and our level loader to do that
05:06 - let's select our button let's go down
05:08 - here and add an on click event let's
05:10 - drag in the level loaded object and
05:12 - under that let's go to the level loader
05:14 - script and access the load level
05:16 - function the level that we want to load
05:18 - is that with an index of 1 now when we
05:21 - hit play and hit load level when see
05:23 - indeed that the transition happens
05:25 - lightning-fast it goes from 0 to 0.9 and
05:28 - then the levels loaded however this is a
05:31 - bit weird not that the transition
05:32 - happens this fast that's a great thing
05:34 - but the fact that it ends at point 9 the
05:37 - reason for this is that whenever unity
05:39 - wants to load a new scene it does so in
05:41 - two stages the first stage is loading
05:44 - here Unity loads from the memory the
05:46 - assets that make the new scene if you
05:48 - have a big scene this is what is going
05:49 - to take the most time and so this is the
05:51 - face that we want to show using our
05:53 - loading bar the second scene however is
05:55 - activation keys unity goes through and
05:57 - deletes all the old stuff that we don't
05:59 - need anymore and replaces them with the
06:01 - newly loaded ones now when it comes to
06:02 - the progress value unity will during the
06:05 - loading stage go from 0 to 0.9 and it
06:07 - will do so in increments how are we
06:09 - doing the activation stage unity goes
06:11 - from point 9 to 1
06:13 - and it doesn't actually do any values in
06:15 - between that mean so this value is
06:16 - actually only useful for us from 0 to
06:18 - 0.9 and you need to also reflect that by
06:21 - setting is done equal to true as soon as
06:23 - the loading stage is done so what we can
06:25 - do is use a bit of quick math in order
06:27 - to make our value from 0 to 0.9 go from
06:30 - 0 to 1 do that we make a float called
06:33 - progress and we set it equal to mass
06:36 - clamp 1 this climbs the value between 0
06:39 - & 1
06:39 - and in here we fitted our operation dot
06:42 - progress divided by 0.9 now instead of
06:45 - debug that logging our operation dot
06:48 - progress we simply feed it our progress
06:50 - this way if we go back and play and hit
06:53 - load level it goes from 0 to 1 but
06:56 - debugging values like this is boring
06:58 - let's instead add a cold slider and
07:00 - after that I'll show you what it looks
07:01 - like if you're loading a more
07:02 - complicated scene let's go to our canvas
07:04 - here let's add a new UI panel let's
07:07 - change the image here to none to make it
07:10 - just a solid color let's make sure that
07:12 - it scales to our entire screen let's
07:14 - then bump up the Alpha to make it non
07:16 - transparent let's also set the color
07:18 - value to the same as our background here
07:20 - let's call this one the loading screen
07:23 - let's go and right-click and add a UI
07:25 - slider on top now there are a few things
07:28 - that we can change on this lightly the
07:30 - first thing is that we don't need a
07:31 - transition because we don't want to be
07:33 - able to interact with it and so I'll
07:35 - also set interactable to false I'll
07:37 - disable a navigation and let's also go
07:39 - in here and delete our handle slide area
07:42 - it's starting to look like a loading bar
07:44 - when then take our entire slider and
07:46 - maybe scale it up a bit you can see now
07:48 - that we can adjust this value down here
07:50 - which goes between 0 and 1 by default in
07:53 - order to fill up our slider
07:54 - however if we set it to 1 it will
07:56 - actually not go all the way there to
07:58 - change this let's go to our fill area
08:00 - and let's scale this tiny bit to the
08:03 - right
08:03 - we can also select our fill and change
08:05 - the color here to a light red now as we
08:08 - adjust our value we can see that looks
08:10 - much better now all we need to do is
08:12 - reference our loading screen so that we
08:14 - can enable and disable it and reference
08:16 - our sliders so that we can change the
08:18 - value through script let's disable our
08:20 - loading screen let's go into our script
08:22 - let's create a reference to our loading
08:24 - screen we'll make it of type game object
08:26 - and call it loading screen now we also
08:29 - want a reference to a slider to do that
08:31 - we'll have to include unity engine dot
08:34 - UI now we can create a public slider
08:37 - variable called slider then when we
08:40 - start loading the scene we can set
08:41 - loading screen active by calling set
08:44 - active and inserting true and while
08:47 - we're loading instead of debug logging
08:49 - our progress we can set slider dot value
08:53 - equal to progress so let's say that and
08:56 - head into unity let's select our level
08:58 - loader and we should see two
08:59 - appearing let's drag a loading screen
09:01 - into the loading screen slot and I'll
09:03 - slider into the stylish slot now when we
09:05 - play and hit load level we should very
09:07 - quickly see a slider appearing let's try
09:09 - and go under upload settings and change
09:11 - the level here instead of loading up
09:13 - this test level I'll go ahead and load a
09:15 - level from the Unity survival shooter
09:17 - project this is freely available on the
09:19 - asset story and on the link in the
09:21 - description
09:21 - let's drag in the complete game scene
09:23 - let's hit play so let's hit load level
09:25 - cool right now I'm on a really fast
09:28 - computer so that's two loaded pretty
09:29 - quickly but hopefully you get the idea
09:31 - the final thing that we can go in here
09:33 - and add is some kind of text that also
09:35 - shows the progress maybe in percentage
09:38 - so let's right click on our slider go UI
09:41 - text let's go enjoy seeing you I'm going
09:44 - to snap this to the right by holding
09:46 - down alt and clicking here I'm also
09:48 - going to change the font to a robot of
09:50 - font you can download that for free I'll
09:52 - then align it to the right and center
09:55 - also bring up the font size to something
09:57 - like 18 and let's just insert 20% here
10:00 - just so we can see how that looks
10:02 - let's then take the text element and
10:04 - drag it a tiny bit to the left
10:06 - voila we have a percentage text now we
10:08 - can rename this to progress text we can
10:11 - go into a level loader at the top we
10:13 - want the reference to a text object we
10:16 - call it progress text then down here
10:18 - where we set our slider value we also
10:20 - set progress text dot text equal to
10:24 - progress multiply with 100 to make it
10:28 - into a percentage and then we'll add the
10:30 - percentage sign let's say that going to
10:33 - unity select our level loader drag in
10:35 - our progress text disable our loading
10:37 - screen hit play and yay we've got text
10:41 - that's pretty much it for this video if
10:42 - you liked it make sure to subscribe so
10:44 - dome is a future one also it's been a
10:45 - while since I mentioned I have a patreon
10:47 - page patron is a way for you to support
10:48 - me with a monthly donation you can
10:50 - donate any amount and it's cancelable at
10:53 - any time patron is one of the things
10:54 - that keep this channel going on also
10:56 - this video was inspired by a written
10:58 - tutorial by Allen Saucony he has a lot
11:00 - of great tutorials on more advanced
11:01 - unity subjects I definitely suggest you
11:03 - check them out on that thanks for
11:05 - watching and I will see
11:06 - you in the next video thanks - of the
11:08 - awesome patreon supporters who donated
11:09 - in May and a special thanks to Derek
11:11 - James Kirk Faison RFI stone gamer
11:14 - Cmdr fi stone 38 Thomas royally James
11:17 - Calhoun cyborg Rami and Jason Lotito if
11:20 - you want to become a picture in yourself
11:21 - you can do so at patreon.com slash
11:23 - practice