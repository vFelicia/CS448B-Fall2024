00:00 - something really popular in the indie
00:01 - community is top-down or isometric games
00:04 - this perspective is often used in
00:06 - everything from RPGs to rope likes and
00:09 - of course you can't have a top-down game
00:11 - without player movement luckily it's
00:13 - really simple to do in unity and in this
00:16 - video we'll have a look at how to create
00:17 - solid movement with animation but before
00:20 - we get into that this video is sponsored
00:21 - by out Stanley when creating a game you
00:23 - might have an amazing idea and mechanics
00:25 - but if your game doesn't look
00:26 - interesting at first glance you might be
00:28 - missing out on a huge pile of potential
00:30 - players this is where out Stanley comes
00:32 - to the rescue
00:33 - Stanley provides you with personalized
00:35 - art assets and even UI so your game can
00:37 - look amazing and you can focus on
00:39 - development I can definitely think of a
00:41 - couple of projects where I could have
00:43 - used this it is very easy to get started
00:45 - simply share your game idea and goal and
00:47 - outstanding then makes a personalized
00:49 - offer for you the team is extremely nice
00:51 - and easy to work with and you will have
00:52 - the possibility to give feedback and ask
00:54 - for Corrections at any time during the
00:56 - process so if you want some
00:58 - great-looking artwork for your game I
00:59 - definitely recommend you check it out
01:01 - make sure to tell them that break is
01:02 - refered you as they will then provide
01:04 - you with a bonus simply click the link
01:06 - in the description to get started also
01:08 - in case you missed it we are hosting a
01:10 - community game jam the idea is simple
01:12 - you get one week to make a game from
01:14 - scratch around a theme that will be
01:16 - announced at the beginning of the jam
01:17 - it's going to be the biggest gem we've
01:19 - ever hosted in fact at the time of
01:21 - making this video we already have over
01:22 - 3000 signups so that's amazing and we're
01:25 - doing it together with a bunch of
01:27 - awesome guys from the community both
01:28 - Blackthorne prod Danny chip rails and
01:30 - Psyche you are helping host the event
01:32 - and we'll all be documenting our game
01:34 - development process the event will take
01:36 - place the last week of August and I will
01:38 - also be making a video afterwards
01:40 - showing off my favorite entries from the
01:42 - jam so make sure to click the link in
01:43 - the description and join the Jam alright
01:45 - with that said let's get moving
01:48 - [Music]
01:50 - so as you can see I've set up this quick
01:52 - XML level and the sprites that I'm using
01:55 - are from the tiny RPG forest pack which
01:58 - is available for free on the unity asset
01:59 - store I've made a few changes to some
02:01 - colors in Photoshop but otherwise
02:03 - they're completely unchanged so the
02:05 - first thing that we want to do is of
02:06 - course bring in our player so I'm gonna
02:08 - go to the tiny RPG forest folder I'm
02:11 - gonna go under artwork sprites and find
02:14 - the hero folder and in here we have
02:16 - sprites for different animations first
02:19 - of all we need the idle animation so
02:21 - let's go on the idle here and as you can
02:23 - see they've created three different
02:24 - sprites for the different directions our
02:26 - hero can be facing so I'm gonna take the
02:28 - hero idle front here and I'm simply
02:30 - going to drag it into our scene now I've
02:33 - gone ahead and set all these sprites to
02:35 - a pixels per unit of 16 by default this
02:38 - was set to a hundred and so everything
02:39 - was much smaller so if your character is
02:41 - also too small you can simply go in and
02:43 - set this to 16 and hit apply and just a
02:46 - quick tip if you want to do this for all
02:48 - the sprites in your project you can
02:49 - always go here and select texture and
02:52 - then simply shift select everything that
02:54 - comes up and this way you can change the
02:56 - pixels per unit for all of them at once
02:58 - awesome so now that we have our hero
03:00 - here let's go ahead and rename him to
03:02 - player and now we are ready to start
03:04 - moving him around this is done in two
03:06 - step the first step is adding the actual
03:09 - movement to our game object and the
03:11 - second step is adding animation to our
03:13 - player based on that movement so both
03:15 - steps are actually fairly simple the
03:17 - first step is going to require a bit of
03:19 - programming but it isn't too bad so
03:22 - let's start by hitting add component and
03:23 - we want to add in a rigidbody 2d
03:25 - component this will enable physics on an
03:28 - object let's set the gravity scale to
03:30 - zero so that our player doesn't just
03:32 - immediately fall down and we can also go
03:35 - under constraints and freeze the
03:36 - rotation on the Z to make sure our
03:38 - player doesn't rotate and with that
03:40 - we're ready to create our player
03:42 - movement script so that's it a component
03:44 - search for player movement hit new
03:48 - script and create an ad and let's double
03:50 - click it to open it up in visual studio
03:52 - so the first thing that we want to do
03:53 - here is get rid of our start method we
03:56 - won't be needing that and instead we
03:57 - want to add a few variables the first
03:59 - one we're going to need is a movement
04:01 - speed so let's create a public float
04:03 - with our move speed lets default it to
04:06 - something like five will also need a
04:09 - reference to our rigidbody since that is
04:11 - the component that is going to act as
04:13 - the motor that moves our player so let's
04:15 - create a public rigidbody 2d and let's
04:18 - just call it RB for short and now if we
04:20 - save this and go into unity we can see
04:23 - the two variables under our player
04:24 - movement we have the move speed that we
04:26 - can adjust any way that we'd like as
04:28 - well as an empty field for our rigidbody
04:30 - so let's simply take our component and
04:32 - drag it in and we've now linked this
04:34 - component to our player movement and
04:36 - that means that we can now access it to
04:38 - move around our player and we could of
04:40 - course do this
04:41 - inside of our update method update is
04:43 - called once per frame so it makes sense
04:45 - to use it to move around our player
04:46 - since this way we can gradually move him
04:49 - by moving him a tiny bit each frame
04:51 - however update isn't actually a good
04:53 - place to do anything related to physics
04:55 - the reason for this is that your frame
04:57 - rate can constantly change which makes
05:00 - physics fairly unreliable instead it's
05:02 - recommended that we use something called
05:04 - fixed update let's go ahead and create
05:06 - that function right here let go void
05:09 - fixed update and we can then add the
05:11 - parentheses and curly brackets just like
05:14 - our update method so fixed update works
05:16 - in the exact same way that update does
05:18 - it's also called a bunch of times per
05:20 - second however it's executed on a fixed
05:23 - timer and not stuck to the frame rate
05:25 - like update is by default fixed update
05:28 - will be called 50 times a second so this
05:30 - is much more reliable when working with
05:32 - physics however we do still want to use
05:35 - update for registering our input so
05:38 - we'll keep both functions here and we'll
05:40 - handle all of our input inside of update
05:43 - and we'll handle the actual movement
05:45 - inside a fixed update this is a really
05:47 - solid way to handle movement in unity
05:49 - and we'll make sure that we don't get
05:50 - any weird behavior so let's start by
05:52 - registering some input again we do this
05:55 - inside of the update method here we can
05:57 - use input dot get access raw in order to
06:01 - get some input in a certain dimension
06:03 - first of all we're going to get our
06:05 - horizontal input and the cool thing
06:07 - about this function here is that it's
06:09 - going to give us a value between
06:10 - negative 1 and 1 depending on our
06:13 - horizontal input so if I press the
06:15 - left arrow on my keyboard that means we
06:18 - want to move to the left and so this
06:20 - function is going to give us minus 1 if
06:22 - I press the right arrow that means we
06:24 - want to move to the right and this
06:25 - function is going to give us 1 and if I
06:28 - don't press anything at all it's going
06:30 - to simply return 0 by default this will
06:32 - both work with the arrow keys the WASD
06:35 - keys as well as control the input
06:36 - however I will mention that unity is
06:38 - currently working on a new input system
06:40 - that will replace this I can't imagine
06:43 - this not working for quite some time but
06:45 - if you're watching this in the future
06:46 - and you're getting issues you might want
06:48 - to check out our video on the new input
06:50 - system that should help you fix your
06:52 - problems so now that we are getting this
06:54 - value between minus 1 and 1 we want some
06:56 - way to transfer it from our update over
06:58 - to our fixed update so that we can move
07:00 - around our player based on that value
07:02 - and to do that we can simply create a
07:04 - variable up here to store it so let's
07:07 - create a vector to called movement and
07:10 - because this is a vector 2 it will both
07:12 - store an x and a y so a horizontal and a
07:15 - vertical and that way we can simply set
07:18 - movement dot X equal to input get axis
07:22 - raw horizontal and movement dot y equal
07:27 - to input get axis raw vertical so now
07:31 - we're both getting the horizontal and
07:33 - the vertical movement and we're storing
07:35 - it in this vector 2 called movement and
07:37 - this means that we can now go to a fixed
07:40 - update and use this movement variable to
07:42 - actually move a player we'll do that
07:45 - using our rigidbody so RB and a function
07:48 - on here called move position this is
07:51 - simply going to move the rigidbody to a
07:54 - new position and make sure it collides
07:56 - with anything in the way and the new
07:58 - position that we want to move to is our
08:00 - current position so RB the position that
08:03 - is the current position we're in plus
08:05 - our movement and because we want to
08:07 - control the speed of our movement we'll
08:09 - multiply that with our movement speed
08:12 - and that should work however to make
08:14 - sure that our movement speed will always
08:16 - stay the same no matter how many times
08:18 - our fixed update will get called we can
08:21 - also multiply with time that fixed Delta
08:24 - time this variable is simply the amount
08:26 - of time that has elapsed since the last
08:28 - time the phone
08:29 - was called and the sort of that is a
08:31 - constant movement speed if that's a bit
08:33 - confusing to you don't worry I totally
08:35 - get it it was for me in the beginning
08:37 - but for now we can go ahead and hit save
08:39 - let's head on into unity and let's try
08:41 - and hit play and if I now press W you
08:44 - can see I move up s I'm gonna move down
08:46 - a to the left and D to the right and I
08:50 - can do this with the arrow keys as well
08:52 - awesome so we can now move our character
08:54 - around the next step is adding animation
08:57 - to reflect this movement so to do that
08:59 - we of course first need to create some
09:01 - animations you can of course make these
09:03 - yourself in a program like Photoshop in
09:05 - my case the character from the tiny RPG
09:07 - pack actually comes with animation so
09:10 - let's again navigate to the hero folder
09:12 - here and as you can see there a bunch of
09:13 - different animations here you'll also
09:15 - want to go to window animation and open
09:18 - up the animation window not the animator
09:21 - but animation and this is why we can
09:23 - create individual animations so with the
09:26 - player selected we're going to hit
09:27 - create let's create a new folder for
09:29 - this called animation because we're
09:31 - going to be storing multiple of them in
09:33 - here and let's start by creating an
09:35 - animation called player underscore Idol
09:37 - that's it save and as you can see we now
09:40 - have created an animation called player
09:41 - idle and all we want to happen inside
09:44 - this animation is we want to display the
09:45 - hero idle front sprite something we're
09:48 - going to drag that in there and as you
09:50 - can see if we hit play right now that's
09:52 - all it's doing not really that exciting
09:54 - so let's go ahead and create another one
09:56 - let's hit create new clip let's go
09:59 - player underscore walk underscore up so
10:04 - we'll use this whenever we are working
10:05 - in the upwards direction and this is a
10:08 - bit more exciting because for this we'll
10:10 - use the hero walk back animation as you
10:13 - can see this consists of multiple
10:15 - sprites I'm simply going to select the
10:17 - first one hold down shift and select the
10:19 - last one and then we can simply take all
10:21 - of them and drag them into the animation
10:22 - window and right away if we go back to
10:26 - our player and hit play we can see that
10:28 - plays and animation it's currently way
10:31 - too fast so go to the COG here and make
10:34 - sure that show sample rate is selected
10:36 - we then go to the left here and on
10:38 - dissembles that changed that from 60 to
10:40 - 12 samples basically means the
10:43 - frame rate for our animation so if we
10:45 - hit play now we can see that it's much
10:47 - much slower which looks a lot better so
10:49 - that is our walk-up animation that's go
10:51 - ahead and create another one we'll call
10:53 - this one walk down this time we'll go to
10:56 - our hero walk front select all of our
10:58 - sprites drag them in set the sandals to
11:01 - twelve and it's a play that looks good
11:04 - let's do the same thing for walking
11:06 - right so play walk underscore right
11:09 - let's go to our hero Walk Side folder
11:13 - select all these and drag them in
11:15 - Sambo's to twelve and hit play that also
11:18 - looks good and finally we want to create
11:19 - one for walking left
11:21 - however by default this pack doesn't
11:23 - have separate animations for walking
11:25 - left now I've gone it and created these
11:27 - by simply taking each one of these
11:29 - sprites opening it in Photoshop you can
11:32 - use pretty much any image editing
11:34 - software for this and just flipping it
11:36 - on the X so as you can see from this one
11:38 - to this one I've just gone ahead and
11:40 - flipped it and I've done that for all of
11:42 - the different sprites in this folder and
11:44 - put them all inside of a folder called
11:46 - side flipped and you can definitely do
11:48 - that in fact this is a pretty good way
11:50 - to do it because it means you can also
11:51 - create variations depending on if you're
11:54 - walking right or left after all your
11:56 - character might not be completely
11:57 - symmetrical however an alternative to
11:59 - doing this is just selecting the player
12:01 - and then through script whenever you're
12:03 - moving to the left instead of to the
12:05 - right you can go in and scale your
12:07 - graphics to minus 1 on the X and that
12:10 - way flip him inside of the editor that's
12:13 - an alternative route I do recommend you
12:14 - do this in an image editing software and
12:17 - I'll show you why in a sec but for now
12:19 - just know that that's what I've done
12:20 - here and now let's go ahead and create a
12:22 - new clip play a walk on the score left
12:25 - and select all the sprites drag them in
12:28 - set the samples to 12 and voila
12:31 - awesome so now we've created all our
12:33 - different animations and if we go into
12:36 - our animation folder we should be able
12:37 - to see them you have play idle and are
12:40 - for different walk animations
12:41 - however the software has also created
12:43 - another object in here called player and
12:45 - if we have a look at our player it's
12:47 - also created a component here called the
12:49 - animator we're on the controller it
12:51 - references this object that's because
12:54 - this player object here is our anim
12:56 - controller and if we double-click it
12:58 - it's going to open it up in our animated
13:01 - window which looks like this inside of
13:03 - this window we can see all of the
13:05 - different animations we've created and
13:06 - that's because we use this window to
13:08 - transition between animations so this is
13:11 - why we control when we will idle when we
13:13 - walk to what side and so on you can
13:15 - easily add more animations here for
13:17 - shooting dyeing and so on but for now
13:19 - let's focus on these so let's take our
13:21 - player idle here and as you can see it's
13:23 - currently growing orange because this is
13:25 - our default animation you can always
13:27 - change this by right-clicking and going
13:28 - set s layer default state but we
13:31 - definitely want it to be idle by default
13:33 - I'm also going to take these other
13:34 - animations here and delete them because
13:36 - we're not going to be using them like
13:38 - this just yet remember you can always
13:40 - put them back in by simply clicking and
13:42 - dragging so what we want to do is
13:44 - basically have two states we're either
13:46 - going to be idling or we're going to be
13:49 - moving and whenever we're moving we want
13:51 - to move in the right direction now to
13:53 - control this we'll go to the top under
13:55 - parameters and we'll create a new
13:57 - parameter this is going to be a float
13:59 - parameter let's call it horizontal and
14:02 - we can just leave it at zero let's also
14:04 - create another one called you guessed it
14:06 - vertical and we'll also leave this at
14:09 - zero and the cool thing about these
14:10 - parameters is that we can update them
14:12 - through script so in just a sec we can
14:14 - go inside of our player movement script
14:16 - and make sure that horizontal and
14:17 - vertical is constantly updating based on
14:20 - our player input and what we can then do
14:22 - is play animations based on these two
14:24 - values in fact we can use something to
14:26 - transition between animations called a
14:28 - blend tree so let's right-click inside
14:31 - of our animated here go create state and
14:33 - let's select from new blend tree as you
14:36 - can see this creates a node called blend
14:38 - tree I'm gonna go ahead and rename this
14:40 - to movement and the cool thing is that
14:42 - this node is going to be responsible for
14:44 - all of our movement and we then double
14:47 - click on it to kind of move a layer
14:49 - further in and in here we can define
14:51 - what our movement looks like in the
14:53 - different directions so by default here
14:55 - you can see that it's created a node
14:56 - here Copeland tree and it has a slider
14:58 - called horizontal because that's our
15:00 - first parameter and we can add motions
15:03 - to this blend tree so let's hit + add a
15:06 - motion field and let's do that one more
15:08 - and add another motion field
15:10 - and as these two motions we can then add
15:12 - let's say our walk down and our walk up
15:16 - and what you'll notice is that we can
15:18 - now transition from our walk down to our
15:21 - walk up using this slider really really
15:24 - cool in fact if we select our player
15:26 - here and click we can see him
15:29 - transitioning between the two animations
15:31 - when adjusting this slider so currently
15:34 - this slider is going from zero to one we
15:36 - want to change this because our
15:37 - horizontal value again goes between
15:39 - negative one and one so to change it
15:42 - let's go in here and disable automate
15:44 - thresholds and it said I'll play a walk
15:46 - down so here we are moving down the
15:48 - screen and so we want to set that to
15:50 - negative one and for play a walk up
15:52 - we're moving up the screen so let's
15:54 - leave that at one and now this slider
15:56 - will go between negative one for moving
15:58 - down and one for moving up awesome and
16:01 - the coolest thing is that we can expand
16:03 - this to work in multiple directions so
16:06 - not only the vertical also the
16:08 - horizontal and to do that we simply
16:09 - change the blend type from one D or one
16:12 - dimension to 2d symbol directional here
16:16 - we can set the two parameters the first
16:17 - one is horizontal the second one we want
16:19 - to set to vertical we can add more
16:21 - emotions here so that's go ahead and add
16:23 - two more motion fields let's add the
16:25 - player walk left and the player walk
16:28 - right and now for our positions here we
16:31 - want to walk down when our position on
16:33 - the X is zero and on the y is negative
16:36 - one want to walk up when it's zero on
16:38 - the X and one on the Y and then left
16:41 - when it's negative one on the X and zero
16:43 - on the Y and right when it's positive
16:45 - one on the X and zero on the Y and as
16:48 - you can see this places are for
16:50 - different motions in four different
16:52 - places on our screen representing the
16:55 - four directions that we can go and if we
16:57 - take this red dot here and move it
16:59 - around this represents our player so if
17:01 - we are moving to the left he is going to
17:04 - be playing the left animation if he
17:06 - moves to the right he's going to play
17:07 - the right animation if he moves up he's
17:09 - going to play the up animation down the
17:12 - down animation and as you can see it's
17:14 - going to always choose the animation
17:16 - that is closest to that movement really
17:18 - really cool in fact you can go ahead and
17:20 - add more animations in between here if
17:22 - you want him to be able to move back
17:24 - as well awesome so that's our plan tree
17:27 - and that's our movement layer if we now
17:29 - go back up here to a base layer we can
17:31 - see that all of this stuff is currently
17:33 - inside this one node called movement and
17:36 - we just need to transition from our idle
17:38 - to a movement whenever we're actually
17:39 - moving doesn't matter what direction
17:41 - that is taken care of in here so to do
17:44 - that let's go ahead and add a third
17:45 - parameter called speed and this is
17:49 - always going to be a positive number
17:50 - representing how fast we're moving so we
17:52 - can now right-click on a player idle
17:54 - here hit make transition and transition
17:56 - to our movement node let's then click
17:59 - that transition and you can add a
18:01 - condition so we only want to move
18:03 - whenever our speed is greater than 0.01
18:07 - just a really small number and we also
18:10 - want to make sure that this animation is
18:12 - instant so we will disable has exit time
18:15 - so we don't wait for the previous
18:16 - animation to play out and other settings
18:18 - will set the transition duration to zero
18:21 - and we can do the same thing to go back
18:23 - from movement to our idle animation so
18:25 - that's right-click made transition click
18:28 - on our idle animation and now under this
18:30 - transition we'll set a condition that we
18:32 - want to go back to idling whenever our
18:33 - speed is less than 0.01 again we don't
18:38 - want this to have exit time and let's
18:39 - set the transition duration to zero and
18:41 - that's actually it for setting up our
18:43 - animated controller now we could go
18:45 - ahead and add this to the script right
18:46 - away but we can actually preview what's
18:49 - going on by going into our game view and
18:50 - then clicking and dragging and ducking
18:52 - are animated to the right here and then
18:54 - that's hit play and as you can see when
18:56 - we are selecting our player here it's
18:58 - currently playing the player idle
18:59 - animation however if I go ahead and
19:01 - increase the speed here to one we can
19:03 - see that it changes to the movement
19:05 - animation and if I increase the
19:07 - horizontal movement it's going to go to
19:10 - the right if I decrease it below zero
19:12 - it's going to go to the left and the
19:15 - same thing with the verticals so right
19:16 - now he's moving down I can also make him
19:18 - move up and so on so really cool it
19:21 - looks like our animator controller is
19:23 - working so now all we need to do is go
19:25 - into our script in here we'll need a
19:27 - reference to our animator components so
19:30 - we'll create a public animator and let's
19:32 - just call it animated with a non-capital
19:34 - a inside of our update method we'll go
19:37 - meter dot set float this allows us to
19:40 - adjust a parameter we want to set the
19:42 - horizontal parameter to our movement on
19:45 - the X which is the same as what we get
19:48 - right here and we'll do the same thing
19:50 - with the vertical so I'm just gonna copy
19:53 - this line here and we'll go animator
19:55 - that set float on the vertical to our
19:58 - movement on the Y and finally we want to
20:01 - set this speed and to do this we'll use
20:03 - animator that set float as well
20:05 - this time we'll access the speed and
20:07 - instead of setting this to the movement
20:09 - on the X or the movement on the Y we can
20:11 - use something called movement dot
20:13 - magnitude which is going to be the
20:16 - length of a movement vector which means
20:18 - our speed just to optimize this a tiny
20:21 - bit we can actually use square magnitude
20:23 - which is the squared length of the
20:25 - vector and this is going to work just as
20:27 - fine because it's still going to be
20:29 - positive whenever we're moving but it's
20:31 - actually a bit more optimized because we
20:33 - don't need to do a square root
20:34 - calculation on this vector I know that's
20:36 - a bit complicated you can just use
20:38 - magnitude if you want but just know that
20:39 - this is actually a nice little
20:41 - performance trick so if we now save this
20:43 - and go into unity let's select our
20:46 - player and there is now a variable here
20:48 - called animator where we'll drag in our
20:50 - animator component and if we then
20:52 - maximize and hit play we can move up
20:55 - down to the left and to the right and
20:58 - our character is always going to be
21:00 - animating yay that's it that's how to do
21:02 - top-down movement in unity and again if
21:05 - you'd rather flip your playthrough code
21:07 - instead of doing it through animation
21:08 - you can always go in here and adjust
21:11 - transform that local scale and then
21:14 - simply flipping that on the X however I
21:16 - think using animation for this is really
21:19 - nice because it allows us to do all this
21:21 - fancy stuff inside of the blend tree and
21:23 - the animate recently going to take care
21:25 - of everything for us
21:27 - so that's how to make top-down movement
21:29 - in unity now recently I've seen a lot of
21:32 - people making breakdown videos on
21:34 - YouTube things like VFX artists break
21:36 - down movie seams and dialect coach
21:39 - breaks down actors accents and I thought
21:41 - it could be really cool and fun to do
21:43 - something similar but about game
21:45 - development maybe offer some insight
21:47 - into how games are made and what makes
21:49 - some games look
21:50 - better than others so if that is
21:52 - something you would like to see
21:53 - definitely let me know in the comments
21:55 - also make sure to sign up for the
21:56 - community game jam simply click the link
21:58 - in description to read more and join the
22:00 - jam and don't forget to check out out
22:01 - Stanley to spice up your game with some
22:04 - great looking art simply click the link
22:06 - in description to get started on that
22:07 - thanks watching and I will see you in
22:09 - the next video thanks of the awesome
22:11 - patreon supporters who donated in July
22:12 - and a special thanks to infinity PPR
22:14 - Dennis Sullivan loss to violence love
22:16 - forever Chris face Samara Phi David
22:18 - Lipka louisette Ronan Daniel de Sonic
22:21 - Jacob Sanford and sentence commences now
22:23 - Kiyosaki
22:24 - Gregory piers Allison the fierce Erasmus
22:26 - and kuzey is key you guys Rock