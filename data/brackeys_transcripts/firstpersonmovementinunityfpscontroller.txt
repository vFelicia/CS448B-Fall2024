00:00 - first person games of course extremely
00:01 - common and that's actually a surprising
00:04 - lack of information when it comes to
00:05 - creating solid first-person movement so
00:08 - in this video we'll have a look at
00:09 - creating a character controller the
00:11 - theory behind it and how to make it
00:12 - perfectly fit your game but first this
00:14 - video is sponsored by AB City one thing
00:16 - that has always been very difficult when
00:18 - publishing a mobile game is getting it
00:20 - onto the Chinese market which is the
00:22 - biggest mobile game marketplace in the
00:24 - world
00:25 - with up duty this has never been easier
00:26 - they offer several different publishing
00:28 - package solutions with the basic plan
00:30 - that take care of publication to three
00:32 - Chinese app stores and translation of
00:34 - the first thousand words for free they
00:36 - monitor the application each step of the
00:37 - way and can help with IP certificate and
00:40 - Chinese publishing license application
00:42 - they're stupid SDK allows you to use the
00:44 - same build for a multi-story publication
00:46 - which is just extremely convenient get
00:48 - started by clicking the link in the
00:50 - description and use the coupon code
00:51 - break he's 2019 for a 40% discount on
00:54 - upgrading from their basic plan to is PP
00:57 - plus for access to more stores also
00:59 - special thanks to infinity PBR for his
01:01 - support on patreon and with that let's
01:04 - get our move on but before we actually
01:06 - start creating the controller in unity I
01:08 - think it's a good idea to have a look at
01:10 - some of the theory some general movement
01:12 - and unity can be done in two ways using
01:14 - the character controller component or
01:16 - using the rigidbody component and both
01:19 - definitely have their advantages
01:20 - depending on what you want to do now the
01:22 - main problem with creating a universal
01:25 - character controller that works for
01:26 - everyone is that what you want your
01:28 - character controller to do completely
01:30 - depends on your game of course everyone
01:32 - wants movement but there's also gravity
01:35 - jumping drag in air movement handling
01:38 - slopes handling steps sprinting
01:40 - crouching and interacting with physics
01:42 - objects just to name a few and some of
01:45 - these are easier to do with the
01:46 - character controller approach while
01:47 - others are much easier with the
01:49 - rigidbody approach in fact there's also
01:51 - quite a few things that you don't
01:52 - necessarily think about but are pretty
01:54 - important for the movement such as
01:56 - adding a ground check to know if the
01:58 - player is currently standing on the
02:00 - ground and adding logic to make sure
02:02 - that the player doesn't get stuck on
02:04 - walls now over the years I've tried
02:05 - hundreds of different ways to create
02:07 - character controls so for the sake of
02:10 - this video I think we should boil it
02:11 - down to the most simple way of
02:13 - some really nice controls that can still
02:16 - handle movement gravity ground checking
02:18 - jumping in air movement steps slopes and
02:21 - that doesn't get stuck on walls and
02:24 - without a doubt the simplest way to do
02:25 - this is using the character controller
02:27 - component since much of this stuff is
02:29 - already built in this way you can also
02:31 - easily add more things such as crouching
02:34 - or sprinting the only real restriction
02:35 - is that the character control it doesn't
02:37 - interact with physics objects of course
02:39 - there are ways to get around this for
02:41 - most cases but again that is for the
02:43 - future so let's jump into unity and
02:45 - before we start with the movement let's
02:47 - add a player with a camera that can look
02:49 - around so the first thing that we're
02:50 - gonna do is create an empty object so
02:53 - let's go to the hierarchy and hit create
02:54 - adds that create empty let's name this
02:57 - object first person player and let's
03:00 - drag it into the center of our scene
03:02 - next up we want to add a character
03:04 - controller component so that's it a
03:06 - component search for a character
03:08 - controller and hit enter and if we now
03:10 - hit F and turn on gizmos we can see the
03:14 - green outline of our character
03:16 - controller now I'm gonna go ahead and
03:17 - set the radius of this 2.6 to make it a
03:20 - tiny bit wider and I'm gonna set the
03:22 - height to 3.8 to make it taller as well
03:26 - of course this isn't very visible so
03:28 - let's go ahead and create some graphics
03:30 - for us so that we can easily see it
03:32 - within our scene to do this that's right
03:34 - click on our first person player let's
03:36 - go 3d object and let's create a cylinder
03:38 - I'm going to set the scale of this to
03:40 - 1.2 by 1.8 by 1.2 I'm also going to go
03:45 - ahead and remove the capsule Collider
03:47 - the reason for this is that the
03:49 - character controller itself also acts as
03:51 - a Collider and it's also add a material
03:54 - to this that isn't just a power in grade
03:56 - so in our project that's create a
03:58 - material let's call it player material
04:01 - and let's just make it a bright red and
04:03 - drag it onto our player awesome so now
04:06 - that we have our player in place it's
04:08 - time to add a camera so that we can have
04:11 - a look around if you don't have a camera
04:13 - in your scene already you can of course
04:14 - right click and simply create one or to
04:17 - make sure that you don't have multiple
04:18 - cameras you can simply take the one that
04:20 - you already have in my case I have a
04:22 - main camera here and drag it under our
04:24 - first person player I'm gonna reach
04:27 - set the transform here and then I'm
04:28 - gonna move it up on the Y so that it's
04:31 - almost at the top but still leave a tiny
04:33 - bit of space here
04:34 - the reason for this is that if you go
04:36 - ahead and jump into a ceiling I don't
04:37 - want my camera to clip through and also
04:40 - we wanted to stay inside of our graphics
04:42 - object here so that it's not visible to
04:44 - the camera itself and with that a player
04:46 - is set up and we're ready to start
04:48 - adding logic and the first thing that we
04:50 - want to do is create a player look
04:52 - script that is of course responsible for
04:54 - our ability to look around now looking
04:56 - around is actually fairly simple of
04:58 - course everything is controlled with the
05:01 - mouse and the mouse can be moved unto
05:03 - axis Mouse X and mouse Y if we move our
05:07 - mouse on the X or from side to side we
05:10 - want to rotate our entire player around
05:13 - the y axis this allows us to turn around
05:15 - if we move our mouse on the Y or up and
05:19 - down we don't want to rotate our entire
05:21 - player we just want to rotate our camera
05:24 - on the x axis this allows us to look up
05:27 - and down now it's a good idea to limit
05:29 - the rotation of our camera to 180
05:31 - degrees so that it doesn't flip to point
05:34 - behind the player this is called
05:36 - clamping all right with that in place we
05:38 - can go ahead and select our camera and
05:40 - here we want to add a new component and
05:42 - let's call it Mouse look let's hit new
05:45 - script and create an ADD and let's
05:47 - double click it to open it up in visual
05:49 - studio now the first thing that we want
05:51 - to do here is go into our update
05:53 - function and gather some input based on
05:55 - our mouse movement so go ahead and
05:57 - create a float called Mouse X and set
06:00 - this equal to input dot get access and
06:03 - the access that we want to get is the
06:04 - mouse x axis now this is of course a
06:07 - pre-programmed axis inside of unity that
06:10 - is going to change based on our mouse
06:11 - movement if you want to see this for
06:13 - yourself you can always go into unity go
06:15 - edit project settings input and here you
06:18 - can see the mouse x axis now unity is
06:21 - currently redoing the entire input
06:23 - system this year should work for a long
06:26 - time but if you're getting issues
06:27 - definitely check out our video on the
06:29 - new input system so we'll go ahead and
06:31 - gather that input here we'll also do the
06:33 - same for the y-axis so we'll create a
06:35 - mouse y and so the equal to input that
06:38 - get access Mouse Wow
06:41 - of course it would be nice if we could
06:42 - control the speed of our mouse so let's
06:44 - go up here let's create a public float
06:46 - called mouse sensitivity and let's just
06:51 - defaulted to 100 then when we gather the
06:53 - input we can simply multiply with our
06:55 - mouse sensitivity and because we're
06:57 - doing this inside the update function we
06:59 - want to make sure that we rotate
07:01 - independent of our current framerate to
07:03 - do that we also want to multiply with
07:05 - time.deltatime remember time that delta
07:08 - time is the amount of time that has gone
07:10 - by since the last time the update
07:12 - function was called and so we can
07:14 - multiply with this value to make sure
07:16 - that if our frame rate is high we're not
07:18 - going to be rotating quickly than if our
07:20 - frame rate is low and let's just do the
07:22 - exact same thing for a mouse Y awesome
07:26 - so let's start by having our mouse X or
07:28 - our mouse movement from side to side
07:30 - rotate the entire body of our player of
07:33 - course in order to do this we need a
07:35 - reference from our main camera to our
07:38 - entire first-person player object so
07:41 - that we can rotate it around to do this
07:43 - we'll simply create a public transform
07:45 - let's call it player body then inside of
07:50 - our update method we can now access
07:51 - player body dot rotate and here we can
07:55 - specify an axis that we want to rotate
07:57 - around so we're going to rotate around
08:00 - vector three dot up so our y axis and
08:04 - let's multiply that based on our mouse X
08:07 - and if we save that and go into unity
08:11 - and link-up our play body we now look
08:14 - around using our mouse X movement so
08:16 - next up let's implement our mouse Y
08:18 - which means that we want to move up and
08:20 - down and this of course means that we
08:22 - have to rotate around the x axis so
08:25 - let's go ahead and create a private
08:27 - variable up here let's make it a float
08:28 - and let's call it X rotation and by
08:31 - default we'll set this to zero then down
08:34 - here in our update we can say X rotation
08:36 - - equals our mouse
08:39 - why so I refrain we are going to
08:41 - decrease our X rotation based on mouse Y
08:45 - now why are we decreasing here instead
08:47 - of increasing that's simply because I've
08:49 - tried this before and when I increased
08:51 - it the rotation was flipped so
08:54 - simply go ahead and put a minus here and
08:56 - what we can then do is down here we can
08:58 - apply this rotation so we can say
09:00 - transform that local rotation equals
09:04 - quaternion and remember quaternions are
09:07 - responsible for rotation in unity and we
09:10 - want to input some Euler angles so we'll
09:12 - do a jeweler and here we can simply give
09:14 - it an X Y and the rotation so in our
09:18 - case we want to put in our X rotation
09:20 - for the X 0 on Y and 0 on Z and there we
09:24 - go and the reason why we're keeping
09:26 - track of our X rotation in this way
09:28 - instead of just rotating it by calling
09:30 - dot rotate is so that we can go ahead
09:33 - and add just one more step and that is
09:35 - of course clamping this rotation so
09:37 - we'll set X rotation equal two math
09:40 - clamp and here we'll say that the value
09:44 - we want to clamp is our X rotation we
09:46 - want to clamp it between negative 90
09:48 - degrees and 90 degrees this way we make
09:52 - sure that we can never over rotate and
09:53 - look behind the player finally I'm just
09:56 - gonna add a single line of code up here
09:58 - in this start function and this is just
10:00 - going to go ahead and hide and lock our
10:03 - cursor to the center of the screen so
10:05 - that when looking around our cursor
10:07 - won't be visible and just leave the
10:09 - screen and we'll click outside the
10:10 - window that's extremely annoying so
10:12 - we'll just set cursor to lock state
10:14 - equal to cursor lock mode dot locked and
10:19 - with that we can save this script head
10:21 - into unity and hit play and as you can
10:24 - see we can now also look up and down
10:26 - which means that we have a working mouse
10:29 - Dirk script and if we go ahead and try
10:32 - and look very far upwards as you can see
10:34 - we cannot look further than the 90
10:36 - degrees and the same thing when looking
10:39 - down so next up we're ready to create
10:41 - some player movement to move our player
10:44 - we can want to gather some input
10:46 - remember this is using the current input
10:48 - system so this might change in the
10:49 - future but for now we can do this by
10:51 - getting some input on the horizontal and
10:53 - vertical axis just like with the mouse X
10:57 - and mouse Y in unity these are
10:59 - pre-programmed to map to the keyboard so
11:02 - that if we hold down W vertical will be
11:04 - 1 if we hold down s
11:07 - vertical will be minus one the same
11:09 - thing applies to horizontal but with the
11:11 - a and D keys and the cool thing is that
11:14 - these axes also set up to automatically
11:16 - work with controllers so based on this
11:19 - input we can move the player to the
11:21 - sides along the X and forwards and
11:23 - backwards along the Z we also want to
11:26 - make sure that we do this locally so
11:28 - that we are always moving relative to
11:29 - the direction the player is facing so
11:32 - terms amend this in practice let's go
11:34 - ahead and select our player let's add a
11:36 - new component and this is going to be
11:38 - our player movement script let's say
11:41 - create an ad and open it up in Visual
11:43 - Studio and of course the first thing
11:45 - that we want to do here again is get
11:46 - some input so let's create a float
11:48 - called X and so equal to input that get
11:51 - axis of horizontal let's do the same
11:55 - thing with the Z so equal to input that
11:58 - get access vertical and now we've got
12:01 - some input now let's go ahead and take
12:03 - this input and turn it into a direction
12:06 - that we want to move so let's create a
12:08 - vector3 called move and you can simply
12:11 - consider this an arrow that points in
12:13 - the direction that we want to move so
12:15 - we'll set this equal to u and here you
12:17 - would think that we just needed to
12:19 - create a vector three and input our X
12:21 - than zero and then our set value however
12:25 - this would be global coordinates and so
12:27 - we would always move in the same
12:29 - direction no matter what way our player
12:31 - is facing and that's not what we want to
12:33 - do instead when we are moving left and
12:36 - right we want to use transform dot write
12:40 - which takes the direction that the
12:41 - player is facing and then goes to the
12:43 - right and we'll multiply that with X on
12:46 - top of that we'll add transform dot
12:49 - forward which again takes the direction
12:51 - the play is facing and goes forward and
12:53 - we'll multiply that with Z and so we've
12:56 - now created a direction that we want to
12:58 - move based on our X and the movement and
13:01 - the way the player is facing and we can
13:04 - go ahead and simply move with this of
13:06 - course in order to move we need a
13:08 - reference to our character controller
13:10 - because this is kind of the motor that
13:12 - drives our player so to do that we'll go
13:15 - up here and let's create a public
13:18 - character controller let's just call it
13:21 - controller in fact let's also get rid of
13:23 - our start method we don't need it and
13:25 - now down here we can simply call
13:27 - controller dot move which is a function
13:30 - on this character controller that takes
13:32 - in as you can see a vector3 with a
13:35 - motion and here we'd simply put in our
13:37 - move vector three and that should
13:39 - actually work of course it would be
13:42 - really nice if we could control the
13:44 - speed of this movement so let's go ahead
13:45 - and create a public float called speed
13:49 - and set it equal to twelve by default
13:52 - then down here where we move our player
13:54 - we can simply multiply on move motion by
13:57 - our speed and again because we're doing
13:59 - this inside the update method we want to
14:01 - make sure to multiply with
14:02 - time.deltatime this way we make it frame
14:05 - rate independent and that should
14:07 - actually be it for our basic movement if
14:09 - we now go ahead and save this and go
14:12 - into unity remember to reference the
14:14 - character controller and we hit play we
14:17 - should be able to move around and indeed
14:20 - we are and notice how when I turn the
14:22 - camera the direction that I am moving is
14:25 - also turning so that means that we are
14:28 - correctly applying our movement based on
14:30 - the local coordinates of our player
14:32 - awesome now you will also notice that I
14:35 - currently cannot step up the stairs the
14:38 - reason for this is that we need to
14:39 - change the step offset of our character
14:42 - controller I'm gonna increase this to
14:44 - something like 0.7 and that should
14:46 - definitely allow me to climb these
14:47 - stairs you can also see that there's a
14:49 - slope limit here that defines how steep
14:52 - an angle your character controller can
14:54 - climb currently this is set to 45 which
14:57 - i think is just fine so let's go ahead
14:58 - and hit play and you should now see that
15:00 - we can go ahead and walk up these stairs
15:03 - of course we currently have no gravity
15:05 - applied so we're not gonna fall again
15:07 - but you'll also notice that we can walk
15:09 - up this slope so now that we have that
15:11 - working we can go ahead and work on the
15:13 - gravity now applying gravity is actually
15:16 - pretty simple
15:17 - all we need to do is try to move the
15:19 - player down a little bit each frame
15:21 - however one thing about gravity is that
15:23 - it's a force being applied over time and
15:26 - because of this the velocity or speed of
15:29 - the fall is going to gradually ink
15:31 - so to properly simulate this we add a
15:34 - velocity variable this way we can
15:36 - increase our velocity based on our
15:38 - gravity each frame and then apply that
15:40 - velocity to our player of course this
15:42 - also means that we have to reset our
15:44 - velocity when we are on the ground and
15:46 - so we have to add a way to check if
15:49 - we're currently grounded so let's start
15:51 - by implementing our velocity let's go up
15:53 - here to the top and let's create a
15:55 - vector3 that is going to store our
15:58 - current velocity now inside of our
16:00 - update method let's simply go ahead and
16:01 - increase velocity dot Y so our up and
16:05 - down axis by some gravity number and
16:09 - let's just add this here so that we can
16:11 - control that as well
16:12 - up here let's create a public float with
16:16 - our gravity and it's defaulted to
16:18 - negative 9.81 then down here we can
16:21 - simply add that gravity onto our
16:23 - velocity on the Y and we'll of course go
16:26 - ahead and multiply this with
16:27 - time.deltatime as well then in order to
16:30 - add this velocity to our player we can
16:33 - use controller that move once more and
16:35 - here we simply want to move based on our
16:38 - velocity however as you can see from
16:40 - this equation here the amount that we
16:42 - want to move on the Y is actually going
16:44 - to depend on our gravity multiplied with
16:47 - time squared and because this is squared
16:51 - we actually need to multiply with
16:54 - time.deltatime once more why you may ask
16:57 - well that's just the physics of a
16:59 - freefall so if we save that and go into
17:02 - unity and move our play up and it said
17:05 - play as you can see he's now going to
17:08 - appropriately fall to the ground however
17:10 - if we then go ahead and move up a slope
17:13 - here and drop off the edge you can see
17:16 - just how fast that went and the reason
17:19 - for this is that we're currently
17:20 - constantly building up velocity and not
17:22 - resetting it at any point in fact if we
17:26 - go ahead and go to debug mode in the
17:28 - inspector here we can see our velocity
17:30 - on the Y just rising and rising and
17:33 - rising so to change that we're going to
17:35 - go ahead and add a ground check so I'm
17:37 - gonna zoom in on the player here and I'm
17:40 - gonna right click and create an empty
17:41 - object I'm going to move this to the
17:43 - very
17:44 - bottom of the player I'm gonna rename it
17:47 - to ground check and basically all this
17:50 - object is going to do is be responsible
17:52 - for doing a physics check to see if our
17:55 - play is currently standing on anything
17:57 - and it's going to do that using a method
17:59 - called checks fear white simply going to
18:02 - project an invisible sphere around this
18:04 - point and see what it collides with so
18:07 - to do that through script we first of
18:09 - all need a reference to the object that
18:11 - we just created so we'll create a public
18:13 - transform called ground check we'll also
18:17 - create a public float with the ground
18:20 - distance this is going to be the radius
18:23 - of the sphere that we'll be using to
18:25 - check and finally we'll also create a
18:27 - public layer mask and will call this
18:30 - ground mask and that's just because we
18:32 - want to control what objects the spheres
18:34 - should check for we don't want it to
18:36 - register as standing on the ground just
18:38 - because it collides with the player and
18:39 - finally we'll create another private
18:42 - variable this is going to be a pool and
18:44 - it's simply going to store if we are
18:46 - grounded or not so we'll call it is
18:48 - grounded now inside of our update
18:50 - function at the very top here we can
18:52 - check if we're grounded so both set is
18:54 - grounded equal to the result of our
18:58 - physics check
18:59 - so we'll do physics Todd checks fear and
19:02 - this is going to create a sphere based
19:04 - on the ground check dot position it's
19:07 - going to use the ground distance as a
19:10 - radius and as the layer mask it's going
19:13 - to use the ground mask so I know this
19:16 - looks really scary but it's really that
19:19 - simple it's simply going to create a
19:20 - tiny invisible sphere here at this point
19:23 - with the radius specified and if it
19:25 - collides with anything that is in our
19:27 - ground mask well then is grounded is
19:29 - going to be true if not is grounded it's
19:32 - going to be false then we can simply
19:34 - check if is grounded and our velocity
19:39 - dot Y is less than zero well then we can
19:44 - set velocity dot y equal to and here we
19:48 - could put in zero that would make sense
19:49 - since we're not moving down we're
19:51 - standing on the ground however since
19:53 - this might register before we are
19:55 - totally completely on the ground
19:57 - I found that setting this
19:58 - to something like negative to a fairly
20:00 - small number but still there just to
20:02 - force our player down on the ground
20:04 - actually works a bit better so there we
20:07 - go we are now resetting our velocity
20:09 - accordingly and we can now save this go
20:12 - into unity select our player here we
20:15 - want to drag in our ground check and we
20:17 - also want to go to our ground mask and
20:19 - as you can see here we can now see all
20:20 - of the layers currently in our scene as
20:23 - you can see I've already gone ahead and
20:24 - added a layer for ground here if you
20:27 - don't have this already you can go to
20:28 - layers here hit add layer and simply
20:31 - type one in you can go to ground mask
20:34 - and simply select the layers you want
20:36 - I'm just gonna press ground that also
20:38 - means that I want to go ahead and take
20:40 - my environment and I want to change all
20:42 - the objects under here to be of layer
20:44 - ground something we're gonna hit ground
20:47 - here and hit yes change children and now
20:50 - we should see that if we play and fall
20:52 - down here we're gonna land on the ground
20:54 - and if we now walk off of this slope
20:57 - we're just going to fall as normal and
21:00 - it works with slopes it works with
21:03 - stairs and everything is good I
21:06 - definitely think that the fall is
21:07 - currently a bit too slow for my taste so
21:10 - I'm gonna go ahead and multiply our
21:12 - gravity with two just to make that a bit
21:14 - quicker but that's of course completely
21:16 - going to depend on the game and start
21:19 - your going for now with a ground check
21:20 - implemented jumping is extremely simple
21:23 - all we need to do is check if we're
21:25 - currently grounded and if the player is
21:26 - pressing the jump button and if that's
21:28 - true we can simply set our Y velocity to
21:31 - some number depending on how high we
21:33 - want to jump in fact we can use this
21:34 - neat little physics equation to
21:37 - calculate the amount of velocity needed
21:39 - to jump a certain height we simply take
21:41 - the square root of our decide jump
21:43 - height multiply it by minus 2 multiplied
21:46 - by our gravity I love physics so inside
21:49 - of our script before we apply our
21:50 - gravity wins my co if input dot get
21:54 - button down jump this is another default
21:58 - input that automatically maps to the
22:00 - space key and we're kind of grounded
22:03 - well then we can set velocity dot y
22:06 - equal to the square roots of math that
22:10 - square root of our decide
22:12 - Haight and here we need to go up here
22:14 - and create a public float without jump
22:18 - height and I'm just gonna default that
22:20 - to three units and so we can put our
22:22 - jump height here mode supplied by minus
22:25 - 2 multiply it by gravity and that's all
22:29 - we need to do we can now just save that
22:31 - go into unity let's move our first
22:33 - person player down so he doesn't fall
22:34 - every time let's hit play and maximize
22:37 - our game view here and as you can see
22:39 - our player can now jump as well and that
22:42 - means that we now have a working
22:44 - first-person controller that you can
22:46 - easily expand upon awesome that's pretty
22:50 - much it for this video so from here it's
22:52 - up to you to expand on the character
22:53 - controller and add in the features that
22:55 - are right for your game and if that
22:57 - seems too complicated
22:58 - I really recommend picking up an
22:59 - acid-like ultimate FPS on the unity
23:02 - asset store it's an amazing really solid
23:05 - character controller with pretty much
23:06 - all the features you can imagine and of
23:08 - course if you liked this video make sure
23:09 - to subscribe so you don't miss the next
23:11 - one and for example check out our video
23:13 - on shooting which will naturally take
23:15 - you one step closer to a finished FPS
23:17 - also don't forget to check out AB to D
23:19 - simply click the link in the description
23:21 - to get started publishing your game in
23:22 - China and use the coupon code practice
23:24 - 2019 for a 40 percent discount when
23:27 - upgrading your service on that thanks
23:29 - for watching and I will see you in the
23:30 - next video thanks to have the awesome
23:32 - patreon supporters who donated in
23:34 - September and the special thanks to kill
23:35 - sweet escy infinity PPR Dennis Sullivan
23:38 - Peter schwendemann lost a violent love
23:40 - forever Chris face Tamara fine Lear
23:42 - Lissette Ronan Daniel - sonic stick
23:44 - Heston Jacob Stanford no he was sake
23:47 - gregory pierced the midis news Edison
23:49 - the fears and Erasmus you guys Rock