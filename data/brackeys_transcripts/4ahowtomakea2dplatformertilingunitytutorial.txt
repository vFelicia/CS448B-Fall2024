00:00 - thanks for tuning in at
00:02 - braies hello everyone and welcome to the
00:05 - fourth video in the how to make a 2d
00:08 - platformer course today we're going to
00:11 - be taking a look at making our
00:13 - background and foreground elements tile
00:16 - as the player progresses it will allow
00:19 - us to create very small levels but still
00:22 - the player will be able to infinitely
00:24 - explore them so that's going to be
00:27 - really awesome we're going to talk about
00:28 - a lot of cool calcul ations with the
00:31 - camera to World position we're going to
00:33 - do um some performance optimization it's
00:36 - going to be really awesome so yeah let's
00:39 - get started and of course if you don't
00:41 - want to do all of the scripting which is
00:43 - understandable uh though I think it's
00:46 - wise if you do uh please go to bra.com
00:49 - uh where you can go to the 2D platformer
00:53 - page and uh download the all the scripts
00:57 - and assets and everything else right
00:59 - here for free uh so if you have errors
01:02 - that's a good place to go awesome so
01:05 - let's open up unity and uh it's just as
01:09 - we left it the last time one thing I do
01:12 - want to go ahead and tweak though is
01:13 - that I want to get a little bit more
01:16 - parallaxing on the foreground uh right
01:19 - now the effect is a bit too subtle so
01:22 - what I realized is because we have an
01:25 - autographic camera we can simply just
01:27 - move it forward so so let's just drag
01:30 - out the blue background so we won't
01:32 - affect it and let's just uh move the
01:35 - back uh main camera backward is what I
01:37 - meant to say so let's just move move it
01:39 - a bit back here uh you can move it as
01:42 - far as you want as long as it's inside
01:43 - of this rectangle uh but let's just move
01:46 - it like there and uh then let's drag the
01:49 - blue background back on the main camera
01:52 - then we can simply take our foreground
01:54 - and uh we can just move it over so right
01:58 - about here I think it's going to going
01:59 - to be good yeah that's just now the
02:02 - parallaxing is more apparent and it
02:04 - looks like the ground is closer to the
02:07 - camera which is
02:08 - nice cool so let's let's go ahead and
02:11 - actually create the script uh but before
02:14 - we start writing it let me just explain
02:17 - what it's going to do so I've made this
02:19 - drawing uh this explanation drawing here
02:22 - and uh I of course excuse my drawing
02:25 - skills I am not so practiced in the odd
02:28 - of drawing with a computer the mouse but
02:32 - uh what I've drawn here is uh the player
02:34 - in the center which can uh he can move
02:37 - to the uh left and the right up and down
02:40 - won't matter for this tutorial we are
02:42 - going to focus on the
02:43 - x-axis and uh this rectangle here
02:46 - represents what the camera sees this red
02:50 - line down here is the foreground element
02:53 - which is going to work just like the
02:56 - background uh and what we're going to do
02:58 - is we're going to take point a here
03:00 - which is the exposition of the um of the
03:04 - extend of the foreground here so we're
03:07 - going to take the edge here and we're
03:09 - going to take the EXP position of that
03:12 - and then we're going to take the uh B
03:14 - Point here which is going to be um the
03:17 - um extent of the camera so in World
03:21 - points what is the camera seeing and
03:23 - then we're going to ask ourselves is a
03:27 - bigger than b so is this ground
03:30 - further out than
03:32 - b if it's not then we're going to go
03:35 - ahead and instantiate a new one and
03:37 - we're going to do the same over here so
03:39 - it's C lar uh smaller than d uh and if
03:43 - not then we want to uh go ahead and
03:46 - spawn something and the uh the things
03:48 - we're going to spawn are just the same
03:50 - element which we're going to repeat uh
03:53 - and the forground I've made repeatable
03:55 - but the background I have not so we're
03:57 - going to do a cool trick with that uh
03:59 - where we revert its uh size so that we
04:03 - won't get uh weird um clipping issues so
04:07 - we're going to look into that uh but
04:09 - basically we're going to instantiate uh
04:12 - what we're going to refer to as a Budd
04:14 - um which is basically just a clone of
04:17 - the uh the element and then we're going
04:19 - to position it so it just aligns with
04:22 - the element itself and to take care of
04:24 - performance we're going to uh have some
04:27 - variables saying that do we have a left
04:30 - body and do we have a right body and if
04:32 - we have both uh we are not going to do
04:35 - these calculations at all so that's the
04:39 - basics of what we're going to be doing
04:41 - today uh so let's Del right into it so
04:44 - I'll keep that open in case we need it
04:47 - and uh let's go ahead and select our
04:49 - foreground dirt here and uh let's create
04:52 - a new script actually before that let's
04:54 - disable parallaxing in our GM object
04:57 - because uh that will uh
05:00 - interfere with the
05:02 - um with the instantiation of of new
05:05 - grounds uh I have a trick for that and
05:08 - we're going to fix it uh soon but when
05:11 - when we're debugging we're just going to
05:13 - disable that cool so let's select the
05:15 - foreground dirt let's hit add component
05:19 - new script and let's call
05:22 - this
05:24 - tiling let's keep it simple let's double
05:27 - click this to open it up in my develop
05:31 - awesome so this script is going to be
05:33 - pretty long uh but it's not too
05:37 - complicated uh it just has many parts
05:41 - first thing we're going to do is we're
05:43 - going to uh require a component and this
05:46 - is a really awesome feature oops let me
05:48 - zoom in here so you can see what's going
05:49 - on oh man it's good that I didn't forget
05:52 - that um we we're going to require a
05:56 - component uh meaning that once we attach
05:59 - this script uh Unity is automatically
06:02 - going to check if a component is
06:04 - attached to the game object and if not
06:06 - it's going to create one so that's
06:08 - really awesome because we're going to uh
06:10 - only use this script with Sprite
06:12 - renderers so we're going to require a
06:14 - Sprite renderer to do this type two
06:17 - square brackets and inside of those type
06:20 - require component then open up some
06:22 - parentheses where we're going to type
06:24 - type of and then open up another set of
06:27 - parentheses where we're going to do
06:29 - sprad Sprite renderer this is a good way
06:32 - to make sure that we always have a
06:33 - Sprite renderer attached so we won't get
06:36 - errors in our code
06:38 - awesome uh wow I said that like five
06:41 - times already but it's awesome we're
06:43 - going to declare some variables the
06:45 - first one is going to be a
06:48 - public int and this is going to store
06:51 - our offset uh we want to offset this uh
06:55 - just a tiny bit uh because if we check
06:59 - um
07:00 - uh the camera's position versus the
07:03 - grounds uh edge here if you check A and
07:06 - B uh on the exact point it is pretty
07:10 - prone to errors so we are just going to
07:12 - um make sure that b is like maybe two
07:16 - units to the left so that we will uh or
07:19 - to the right so that we will always um
07:22 - make sure uh be sure that a body is
07:25 - instantiated before we get there so
07:28 - we're just going to offset the
07:29 - calculations a tiny bed so we're going
07:31 - to do offset x equals let's just do two
07:37 - it's not that important just a tiny
07:39 - bit then we're going to do uh public
07:44 - bu and aoan is a true or false value and
07:49 - we're going to see uh name this has a
07:52 - right body and we are going to default
07:55 - this to false then we're going to create
07:57 - another one which is also so going to be
07:59 - a public
08:03 - po has a left
08:08 - bud and we're going to also going to
08:10 - default this to
08:11 - false so these two are what we're going
08:14 - to check whenever we instantiating does
08:16 - it already have a body do we even need
08:18 - to do the calculations and such then
08:21 - we're going to do
08:23 - public
08:25 - bull reverse scale
08:30 - and this is also going to be equal to
08:31 - false by default this is what we're
08:34 - going to use for the background elements
08:36 - that I've not made
08:38 - tilable then we're going to do private
08:41 - float and in here we're going to uh
08:44 - store the width of our Sprite so that we
08:47 - know how um how long the element is so
08:52 - we can actually check these positions so
08:54 - we're going to do Sprite
08:56 - width equals z f
09:00 - actually let me comment out some of
09:01 - these so this is going to be the the
09:04 - offset so that we don't get any weird
09:12 - errors
09:15 - uh these are used for
09:18 - [Music]
09:20 - checking if we need to
09:23 - instantiate
09:26 - stuff then we have the reverse scale
09:31 - used if uh the object is not
09:37 - tileable and then we have the Sprite
09:39 - width uh which is uh the
09:43 - width of our
09:47 - texture of our element let's call it
09:49 - that our
09:52 - element awesome and then right below
09:54 - this we're going to do private camera so
09:58 - we're just going to store a short
09:59 - reference to our camera just as we did
10:01 - in the last tutorial for performance
10:03 - reasons and because it's
10:05 - awesome uh and then private
10:10 - transform my
10:12 - transform and this is for performance
10:15 - reason that we storing the objects
10:17 - transform in a variable uh it's just
10:20 - faster and gener good
10:22 - practice cool let's now create a new
10:25 - function so let's do void awake
10:29 - and again a WG is where you want to do
10:32 - all of the referencing uhing between
10:35 - scripts so we're going to do cam equals
10:38 - camera. Main and we're going to do my
10:42 - transform equals
10:45 - transform uh yeah and the void start in
10:49 - here we're going to assign the Sprite
10:51 - renderer and we're going to check the
10:53 - width so we're going to do Sprite
10:58 - renderer uh and let's just call this s
11:01 - renderer it's not something that we're
11:03 - going to use frequently equals get
11:06 - component and
11:09 - then this is the syntax and then inside
11:12 - of these two signs we're going to write
11:14 - Sprite render us so that's the type of
11:17 - component that we want to get and I
11:20 - don't remember I'm pretty sure that you
11:22 - can only have one Sprite renderer that
11:24 - would make sense so but this is just
11:27 - going to grab the first t uh component
11:29 - of the type you insert so if there's
11:31 - multiple it's just going to um going to
11:35 - return the first one and then uh we're
11:38 - going to do Sprite
11:41 - width equals s renderer so our Sprite
11:44 - renderer do
11:46 - Sprite
11:48 - bounds do size do X okay so that will
11:52 - give us the width of our element uh no
11:56 - matter how we size it so that's that's a
11:59 - really great
12:00 - feature cool then in the update function
12:04 - and this is where it gets uh kind of
12:07 - exciting what we're going to do here is
12:09 - first we're going to make an if
12:11 - statement and inside of this we're going
12:13 - to do has a right uh yeah let's do left
12:18 - first has a left body is equal to false
12:21 - uh
12:23 - or um has and the these two signs are
12:28 - used for or the reason why I copy pasted
12:31 - them is because my keyboard is being
12:33 - annoying right now with certain symbols
12:35 - um just have to configure that these are
12:38 - called vertical bars if you cannot
12:40 - figure out how to make them on your
12:41 - keyboard just uh write how to make
12:45 - vertical bar on Google and you'll figure
12:47 - it out many people have asked me this so
12:50 - I just thought I wanted to say but these
12:52 - basically means or so whenever you're
12:54 - checking for something you can check um
12:57 - does it have a left body
12:59 - or does it have a right
13:02 - body
13:04 - cool so then we're going to check has a
13:07 - right
13:10 - bu and this is going uh equal to false
13:15 - and then close it off and let's do the
13:17 - parentheses
13:19 - so open and close these
13:23 - yeah uh so here we're just
13:27 - checking does it still
13:31 - need uh
13:36 - buddies if not do
13:40 - nothing cool so now we're going to
13:43 - calculate the camera's extent meaning
13:46 - half the width of what the camera can
13:48 - see in World coordinates so if we look
13:51 - at our drawing here we're going to
13:53 - calculate the uh uh the position B over
13:58 - here here so we're going to calculate
14:00 - the length from the center of the camera
14:03 - to the point
14:06 - B so we do this by doing
14:10 - float
14:12 - cam
14:14 - horizontal extent is what we're going to
14:17 - call it and it's going to be equal to
14:18 - cam do autographic
14:22 - size times screen.
14:25 - width divided by screen do
14:30 - height so this will return uh this will
14:34 - equal to the uh the um length from the
14:41 - center of the camera to its right
14:45 - bar and uh let's just common this out
14:48 - also so we're going to do
14:51 - calculate the
14:53 - cameras extent meaning half the width
14:59 - of what the camera can see and it's
15:03 - going to be in World coordinates versus
15:07 - pixels
15:10 - coordinates great so now right below
15:13 - this we're going to calculate the EXP
15:15 - position where the camera can see the
15:17 - edge of the Sprite so we're going to
15:20 - take this into consideration we're going
15:22 - to use the Sprite width and the current
15:25 - uh position of our object and we're
15:28 - going to calculate at what position the
15:31 - camera can see uh the edge of the
15:35 - ground so we're going to do uh
15:38 - calculate the X
15:41 - position where the camera can see the
15:46 - edge of the
15:49 - Sprite Which is the
15:52 - element and we are going to write float
15:56 - Edge
15:57 - visible position
16:00 - right so we're going to split it up into
16:03 - the right position and the left position
16:05 - and this one is going to be equal to my
16:09 - transform. position. X so our current X
16:13 - position plus Sprite
16:16 - width divided by two because we we want
16:20 - to only get half of it um because it's
16:23 - it's this distance
16:25 - here and uh then we're going to do uh
16:28 - close off the parentheses and then we're
16:30 - going to do minus cam horizontal
16:35 - extend so we are factoring in our own
16:39 - position then we adding on half the
16:42 - Sprite width which is basically the
16:44 - Sprite
16:45 - extend and then we're subtracting the
16:47 - cam horizontal extend to figure out the
16:51 - position where we would
16:55 - intersect then we're going to do this uh
16:58 - same calcul for the left position so
17:01 - we're going to do Edge
17:04 - visible
17:06 - position left equals my transform.
17:11 - position. X and then this time we're
17:14 - going to do minus Sprite width divided
17:17 - by two plus cam horizontal extend so we
17:22 - are just inverting the calculations
17:27 - basically for