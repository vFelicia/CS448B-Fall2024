00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to video number 10 in the how to
00:06 - program in C sharp course so in today's
00:09 - video we're going to take a look at
00:10 - classes and until now we've pretty much
00:14 - only used one class in that bizarre main
00:17 - class and we've only used it to kind of
00:19 - group together our code but what we're
00:22 - going to be doing now is we are going to
00:25 - look at how classes can be used to kind
00:28 - of build our own sets of data that can
00:31 - then be distributed throughout our
00:34 - application and we can really take a
00:38 - look at how they can improve the way
00:40 - that we write code and allow us to write
00:42 - a whole new kinds of software so that
00:46 - was a very vague kind of explanation but
00:51 - classes are really really useful for a
00:54 - bunch of things and you you don't have
00:57 - to get very fine programming before you
01:00 - use them pretty much all the time so
01:03 - before we get started I just quickly
01:06 - want to mention that if you have any
01:07 - questions go to firmed up register con
01:09 - and also and I feel like I haven't
01:12 - mentioned this for quite a while we do
01:14 - indeed have a Facebook page so if you go
01:17 - to facebook.com slash Brad Keys you can
01:20 - check it out here and I do post quite a
01:22 - few things that doesn't appear on
01:25 - YouTube so if you want to follow along
01:27 - on the software I'm writing or updates
01:30 - like this by the way thank you so much
01:32 - for helping me reach 100,000 subscribers
01:35 - you are incredibly awesome and devoted
01:39 - followers and this could be done without
01:42 - you and yeah really just check it out we
01:46 - also I'm also on Twitter but Facebook is
01:50 - the place to be cool so what we're going
01:54 - to be doing now is we're going to open
01:55 - up summer in studio as always and you
01:59 - can see I've left a comment here that
02:01 - says classes so the first thing we're
02:04 - going to look at is creating a class so
02:08 - just like we have created a class here
02:11 - we're going to make another one
02:12 - just above that make sure it's still
02:14 - inside at the same namespace though and
02:17 - we're going to do that with typing class
02:19 - then the name of the class and kind of
02:23 - to give you a an understanding of what a
02:26 - class is I'm going to call this one
02:28 - animal animal is a pretty general term
02:31 - quite there exists many kinds of animals
02:35 - and animals have different properties
02:37 - and it's basically those kind of things
02:40 - that we try to explain using a class so
02:45 - inside a class we then give it some
02:47 - properties and that's of course done
02:49 - through variables so the first kind of
02:53 - property we could give it could be a
02:56 - name so we could make a string name and
03:00 - we can default this to may be spotty we
03:05 - could then also give it a an H into H
03:09 - equals and let's say that this one is
03:12 - six years old and then maybe just to get
03:16 - the float in there also we could do a
03:19 - happiness amount that ranges from zero
03:25 - to one and we could set that equal to
03:27 - zero point five by default so when we
03:31 - are writing things like this it's very
03:33 - important that we start to talk about
03:35 - what is called access modifiers and
03:39 - basically what access modifiers do is
03:43 - they describe from from where and how a
03:48 - piece of data or a variable can be
03:51 - accessed so now that we are juggling
03:53 - multiple classes it's very important
03:56 - that we know what this does you have
03:59 - noticed that sometimes when or until now
04:02 - when we've written a method we've made
04:04 - sure to make it a public static void
04:07 - where public and Static are modifiers
04:10 - and basically we have three types of
04:14 - modifiers so we are private or actually
04:18 - we have quite a few more but these are
04:21 - the ones that we are going to be using
04:22 - for now we have private public and stat
04:26 - private means that they the data can
04:29 - only be accessed from inside the same
04:32 - class public means that we can access
04:34 - the data from other class classes if we
04:38 - just reference the class and static
04:41 - means that it's not bound to an instance
04:45 - of the class but it's shared by all
04:48 - other instances so this is kind of
04:51 - confusing to you I totally get it but I
04:54 - will make sure to demonstrate what this
04:56 - means so right now we've just written
04:59 - written the data type then the name of
05:02 - the variable when we do this without
05:04 - including any modifier at all it
05:07 - defaults to private so this is the exact
05:10 - same as just writing string so if we put
05:15 - a private here in front of each data
05:17 - type and then tries and then try to
05:21 - access the animal class for this value
05:26 - it's not going to work instead what
05:29 - we'll have to do is put public here
05:33 - because right now we can only access it
05:35 - from within so if we have a method
05:40 - called void and we call this just test
05:43 - then from in here we'll be able to
05:49 - access name just fine you can see it
05:51 - pops up there and we can just maybe
05:54 - write out the name here and that's going
05:56 - to work just fine but if we want to
05:58 - access it from our main method then
06:01 - we're going to have to put public here
06:03 - instead so we're going to do that for
06:05 - all three variables then next up I just
06:10 - quickly want to talk about how you can
06:13 - instantiate a class so now we kind of
06:15 - have this idea of an animal that has
06:18 - these properties that can be changed so
06:21 - how do we create an animal well
06:23 - basically like any other variable with a
06:26 - datatype so down here we could go animal
06:30 - we're going to be creating an animal
06:31 - just like we go int and float or string
06:34 - we now go animal
06:37 - and we can call this maybe dark and set
06:40 - it equal to a new animal this is the
06:44 - syntax for doing that then we can write
06:46 - out dark dot name and you can see here
06:51 - that this creates a new animal and
06:53 - writes out the name spotty what we can
06:57 - also do is change things in this animal
07:00 - class so if we go back here we can
07:04 - access values in a class by just using
07:07 - the dot so we can say dark dot name
07:12 - should now be equal to I don't know test
07:17 - and then we can write out the dark that
07:21 - name again and you can see it changes
07:25 - from spotty to test awesome so that's
07:29 - how you access and change values in a
07:33 - class the next thing that we can do with
07:37 - a class is we can have what is called
07:40 - class methods so we can actually have
07:43 - functions or methods inside of this
07:46 - class that do different things with the
07:48 - data for example we could have a method
07:51 - called void that prints out all the
07:54 - information we have about the animal so
07:56 - we're just going to call this print and
07:59 - it's going to take no arguments and in
08:03 - here we are simply going to write out
08:05 - the animal names we're going to do name
08:10 - plus and then name then we're going to
08:15 - do h plus h and finally happiness plus
08:31 - happiness so now when we call this
08:35 - method over here it should print out all
08:37 - we know about the dark so far but again
08:41 - if we try and do dark dot print it's not
08:45 - there and that's because just like any
08:47 - other variable we have to give our
08:50 - method and access modifier and here we
08:54 - call it public by the way access
08:57 - modifiers are also called
08:59 - protection level or even scope so if you
09:03 - see that we type out dark dot print here
09:07 - it's now there but should we say remove
09:10 - this or change this to a private and
09:12 - then try and compile it's going to say
09:14 - that animal dot print is inaccessible
09:17 - due to its protection level so there we
09:22 - go
09:22 - so now when we hit play there it's going
09:24 - to say names body h6 and happiness of
09:28 - 0.5 cool
09:32 - next up static variable so we've taken a
09:35 - look at the public and static access
09:38 - modifier but already public and private
09:41 - access modifier but what does the static
09:44 - one do so basically all of these
09:49 - variables and methods are bound to this
09:53 - to the instance of the animal that we
09:56 - are going to be creating so here when we
09:58 - are making a dog
10:00 - animal we are creating a new instance of
10:03 - the class animal but we can also have
10:07 - variables and methods that are shared
10:10 - between all instances of the animal
10:14 - class a good example of this would be if
10:18 - we wanted to keep score of how many
10:21 - animals we have so for that we can make
10:25 - a static even a public static so we can
10:29 - access it from outside and we're going
10:33 - to make this of type int and we can
10:35 - simply name this count and default it to
10:38 - zero so what we can do now is basically
10:43 - and we
10:44 - can write dark dot you can see we could
10:48 - change this to public int count and then
10:51 - write dark dot count but this wouldn't
10:55 - make sense because when we say add one
10:58 - on to the dark and then add another
11:00 - animal let's call this one cat and then
11:06 - do cat that count this should return
11:10 - zero so let's try cap dot count so what
11:15 - we're doing here is we are making a dark
11:17 - instance we are upping the count then we
11:20 - are creating a cat instance and we are
11:22 - printing the cats count and they are
11:24 - going to be totally separate you can see
11:25 - that's a zero and if we print out dark
11:28 - count we get a one so in order to
11:34 - eliminate this we use public static int
11:37 - count and then now we access it in a
11:40 - different way we don't do dark dot count
11:42 - instead what we do is we type the name
11:46 - of the class which is animal dot count
11:50 - and then we can directly access it this
11:53 - way so we say that animal the count plus
11:56 - equals one when this case we're making
11:58 - two animals so we're going to say plus
12:01 - equals two and then we can write out dr.
12:05 - we could just write out not dark the
12:09 - count but animal dot count down here and
12:13 - you'll see that it writes out - so now
12:16 - it's shared so that's super cool and but
12:21 - right now we have to kind of increment
12:24 - it every time we are making a another
12:27 - animal and what would be super cool was
12:30 - if it did this itself another super cool
12:34 - thing that we might want to do is feed
12:36 - in a bunch of information for about the
12:40 - animal when we first created instead of
12:42 - just having it default to a bunch of
12:44 - things and then having to go through and
12:46 - do talk that name equals something and
12:49 - and so on and so on so in order to do
12:52 - this we use what is called a class
12:56 - constructor
12:58 - so let's take a look at creating a class
13:00 - constructor for our animal class so
13:03 - firstly we make some room then we type
13:06 - the name of the class which is animal
13:08 - and then we do a open and close
13:11 - parenthesis followed by an opening
13:14 - closed bracket so basically if you
13:18 - notice this looks very much like a
13:20 - method call where a method definition
13:24 - bunt and and in reality it's it's quite
13:28 - a lot a class constructor is very much
13:31 - like a method that is called right the
13:34 - second that we create a new instance of
13:37 - the class and so basically what we can
13:40 - use this for is if we just delete all of
13:43 - the default values up here so we'll make
13:49 - what is called a default class
13:51 - constructor and we'll just do a name
13:54 - equals body H equals R six and happiness
14:02 - equals zero point five F so this is
14:06 - going to function basically the same as
14:08 - what we did up there so when we kind of
14:13 - run this now oops it's inaccessible now
14:17 - that's because we have to make this a
14:19 - public animal it's going to run
14:23 - basically the same but what we can do is
14:26 - we can now create another version of
14:28 - this and that where we can input the
14:33 - values down here and also what we can do
14:36 - is we can simply up the count right in
14:40 - here so we can simply say count plus
14:43 - plus so now what we do is we create an
14:46 - animal called I'm dark and then we
14:49 - create an animal called cat and I want
14:52 - this to be a new animal and I want to
14:55 - give this some values so in order for us
14:59 - to make to do that we simply make
15:00 - another class constructor so I think
15:03 - it's time to create some comments here
15:05 - so we're going to take these class
15:09 - constructors
15:11 - down here you're going to say class
15:14 - methods and up here we're going to say
15:21 - class variables so here we create
15:26 - another constructor call this public
15:28 - animal and open and close parentheses
15:32 - and some curly brackets and in here we
15:37 - then simply give it some arguments just
15:39 - like we've done with method methods so
15:42 - we simply do a string call this
15:44 - underscore name a an int call this
15:49 - underscore age and and and a float call
15:55 - this underscore happiness so the
15:59 - underscore is just there to distinguish
16:03 - it from the public variables up here
16:05 - it's a very common naming convention
16:08 - when it comes to temporary variables
16:11 - like this that are passed through an
16:14 - argument so what we can do now is simply
16:18 - say that our name should equals
16:20 - underscore name our h equals underscore
16:23 - h our happiness equals underscore
16:30 - happiness and count plus plus so now we
16:35 - have two ways of creating an animal the
16:37 - default way and the with using the kind
16:42 - of the constructor that actually has
16:47 - some parameters that we can pass to it
16:49 - and let me simply say we want a new
16:51 - animal we want this to be called um mr.
16:57 - Bean's we want him to have an age of ten
17:01 - and a happiness of are 0.8 and then we
17:09 - can of course take this cat here and we
17:12 - can print out the information we have of
17:15 - it and then at last we can maybe make a
17:18 - new line and followed by the car
17:24 - count of animals so num of animals I'm
17:30 - going to set that equal to animal dot
17:32 - count so when we hit play you can see
17:37 - whoops just to make this pretty I'm
17:40 - going to put in an empty line here too
17:42 - so we can see now that we have a an
17:46 - animal named spotty hf6 happiness of 0.5
17:50 - another one called
17:52 - mr. Bean's age of 10 happiness of 0.8
17:55 - and the total number of animals that we
17:58 - have is equal to 2 comme so that was a
18:05 - basic kind of rundown of classes now you
18:08 - know everything you need to know to
18:10 - create 90% of the classes that you are
18:14 - going to be writing and this is so
18:16 - essential for structuring your code
18:19 - reusing code and really opening up the
18:22 - possibilities of kind of creating your
18:25 - own pieces of data that you can then
18:28 - distribute so that's super super cool
18:31 - and if you you got this already well
18:34 - done if not that's completely
18:36 - understandable this can be a lot of
18:39 - information and quite a bit of new
18:41 - syntax but either way I hope you enjoyed
18:44 - the video and I'll see you in the next
18:46 - one