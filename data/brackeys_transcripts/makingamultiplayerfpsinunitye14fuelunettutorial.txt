00:00 - thanks for tuning in at
00:02 - braies hello everyone welcome to this
00:05 - video on making a multiplayer FPS in
00:07 - unity today we will be improving our
00:09 - flying mechanic by first off adding a
00:12 - fuel Thruster amount or a Thruster fuel
00:14 - amount so that we can run out of fuel
00:16 - when flying and then it will replenish
00:18 - when we are not flying we will also be
00:21 - fixing the uh bug where when we fly on
00:24 - top of obstacles or just stuff uh higher
00:27 - than the actual ground plane um it will
00:30 - kind of collide with the ground instead
00:31 - of uh using that as a new base to hover
00:34 - over so that's something that we will
00:36 - fix also on to display the fuel amount
00:39 - will have a cool graphic uh so that's
00:41 - something we're also going to add so
00:43 - today's video is going to be super fun
00:45 - and super important so let's just dig
00:47 - right into it and you can see here that
00:49 - I'm in my web browser and that's because
00:51 - I want to mention that all of the
00:53 - different uh models we are using right
00:55 - now for the environment are placeholder
00:57 - they're only temporary and I'm working
00:59 - together with a cool friend of mine to
01:01 - um um U make this environment look a lot
01:04 - more awesome and uh if you get impatient
01:07 - or just want to do some of this stuff on
01:09 - your own maybe create uh weapons on your
01:12 - own a player on your own or different
01:14 - environment props you should check out
01:16 - this tutorial that the same friend of
01:17 - mine has made it's called introduction
01:19 - to 3D modeling it's a blended tutorial
01:23 - and it uh gives a very practical
01:24 - introduction on how to model some of
01:26 - this stuff out on your own and you can
01:28 - see here that he modeled a tactical grip
01:31 - for a weapon so it's very relevant for
01:33 - our tutorial you should definitely check
01:35 - that out so without further do let's
01:38 - jump back into unity and get started
01:40 - with today's uh subject so you can see
01:44 - here that currently on our player we
01:46 - have this idea of a player controller uh
01:49 - which has a speed a look sensitivity and
01:51 - a Thruster Force what I want to do is
01:53 - kind of expand onto this to create a
01:56 - limit uh for or kind of create a fuel
02:00 - variable that will decrease whenever we
02:02 - are using uh our thrusters and increase
02:06 - when we are not using them so to do this
02:09 - let's double click on the player
02:10 - controller to open it up in visual
02:12 - studio and we'll have a go at this I
02:15 - also want to create some UI to display
02:17 - this stuff so um you can see here that
02:20 - I've opened up the player controller and
02:23 - I think that we should maybe um start by
02:25 - just implementing this limit and then uh
02:28 - in a moment actually let's start with
02:30 - the UI so just keep this open we can
02:33 - close the player shoot and the actual
02:36 - player script will also be editing the
02:38 - player setup script so I have these two
02:40 - open here good so let's start by
02:43 - modeling out the UI so we'll find our uh
02:47 - prefabs player UI remember this is the
02:49 - prefab that spawns in with our player to
02:52 - display UI only for that local player
02:55 - and it currently only has a Crosshair
02:57 - let's right click on the player UI go on
02:59 - UI and let's go down to find the uh
03:03 - image here and as the Sprite we'll just
03:06 - go in and select UI Sprite this is a
03:08 - standard Sprite that is included with uh
03:10 - the UI system and uh we can go ahead and
03:13 - maybe anchor this to the button left B
03:16 - bottom left corner and uh we can go
03:19 - ahead and maybe drag this out like this
03:22 - make it a bit uh
03:25 - smaller position it there somehow I
03:27 - think this looks um pretty good uh we
03:30 - can of course always edit this later I
03:32 - might want it looking a bit
03:36 - smaller something like that looks pretty
03:38 - good to work of as as a base uh what we
03:41 - can then do is we can make this uh black
03:44 - and we can then uh change the alpha here
03:47 - so this is going to be the background of
03:49 - our um Thruster fill so U this is going
03:53 - to be the uh fuel or Thruster
03:58 - Fuel and here we're going to duplicate
04:01 - that and drag that under using controll
04:03 - D and then just dragging and we are
04:05 - going to have this as the Thruster fuel
04:09 - fill and this is going to be uh a much
04:12 - brighter color still a bit transparent
04:15 - uh and let's make it like a light blue I
04:18 - think that could look fairly cool
04:21 - something like that maybe a San color
04:24 - and maybe a bit less transparent there
04:26 - we go so it it looks like something that
04:29 - we definit itely want to have a lot of
04:31 - and you can see what we can do now now
04:33 - we can take this and we can scale it
04:35 - down and you can see kind of what effect
04:36 - that gives us so that is super cool but
04:39 - instead of using the uh height here to
04:41 - scale down uh what we want to do is use
04:44 - the scale here because that goes between
04:47 - Zer and one and this way we don't have
04:49 - to manage any kind of start height and
04:51 - uh minimum height or anything we can
04:53 - just scale this on the Y and uh to make
04:56 - this even easier on ourselves we should
04:58 - change the pivot point so uh we want it
05:01 - to be halfway over on the X and we want
05:04 - it to be zero on the Y this way we can
05:07 - simply scale here and it will scale
05:09 - downwards like we wanted to so you can
05:12 - see just how easy it is to regulate this
05:14 - using this variable cool you could also
05:18 - do a custom image type uh and use fil
05:20 - here uh but uh the way that this Sprite
05:23 - is set up with the uh borders that's
05:25 - going to look super weird so we're going
05:27 - to keep that at sliced and simply use
05:29 - the scale
05:31 - factor uh cool so next up I just want to
05:34 - uh add an icon here to display that this
05:37 - is some kind of uh fuel amount something
05:39 - that controls whenever we can fly and I
05:42 - found that Unity had a pretty cool icon
05:44 - actually that we can use so let's right
05:46 - click here go into UI and choose image
05:49 - and you can of course make this yourself
05:51 - in Photoshop if that's what you want to
05:52 - do then let's go under uh Sprite here
05:55 - and select the button accelerator up
05:58 - Sprite this is part of the standard
06:00 - assets cross platform input which you
06:02 - can of course just right uh click and go
06:05 - under import package and select
06:08 - crossplatform input to import if it's
06:11 - not already in your project uh so we can
06:14 - take this
06:15 - here we can uh drag it down here scale
06:19 - it
06:20 - down something like
06:23 - that and we'll make sure to Anchor this
06:25 - to the bottom so if we want to change
06:31 - the way this looks it's going to scale
06:33 - just fine I think that looks super cool
06:36 - uh I do want the Thruster fuel here to
06:38 - be a bit bit brighter
06:42 - maybe and maybe change the Hue just a
06:49 - tad I think something like this looks
06:52 - super cool and we're going to stick with
06:54 - this for now I also want to not anchor
06:56 - this to the uh left but instead anchor
06:59 - it uh so that it scales with the entire
07:01 - object something like
07:05 - this cool that looks good and we can
07:08 - just make sure that it this snaps to the
07:12 - sides all right uh so now when we go
07:15 - into the game you can see that we have
07:16 - this cool looking bar but we still need
07:18 - to animate this so we need this to be
07:20 - controlled by the fuel amount that we'll
07:22 - introduce in a second and to do that I'm
07:24 - going to add a separate new component
07:27 - you can see here it's going to be called
07:28 - player UI
07:30 - and we're going to go new script C
07:32 - create an ad now let's double click this
07:34 - to open it up in mono develop what we
07:36 - want to do here is first off import
07:39 - actually we don't need to import
07:40 - anything because we're just going to be
07:41 - using a r transform um to do the scaling
07:44 - and that's included under Unity engine
07:46 - so first off let's add a
07:50 - reference whoops serialized field add a
07:54 - reference to the um the fill fuel fill
07:58 - amount so uh the actual object that we
08:01 - just created that's going to
08:04 - be it's going to be this one Thruster
08:06 - fuel fill and this is just going to be
08:09 - the
08:09 - Thruster oops
08:13 - Thruster uh
08:14 - fuel amount or fill or whatever uh
08:18 - that's going to be let's do
08:20 - fill and uh then we want to add a um
08:24 - public or just a void let's just do a
08:26 - void which is going to set fuel amount
08:30 - on the UI here and uh that's going to
08:33 - take in a float which is going to be the
08:36 - actual amount and what we can then do is
08:39 - simply say that
08:40 - Thruster uh fuel fill. local
08:44 - scale equals a new Vector 3 where on the
08:48 - X we want a one on the Y we want uh the
08:53 - amount and on the Z we want a one two
08:56 - you can also UT uh the current local
08:59 - scale here instead of just the ones but
09:01 - since I don't think we're going to be
09:02 - changing that uh this is going to work
09:04 - just fine it's going to run a tiny bit
09:07 - faster good so now that we have this um
09:10 - we should be able to just call this this
09:12 - method whenever we want however we don't
09:15 - currently know what the current fuel
09:17 - amount is is both because we don't have
09:20 - a reference to our player controller but
09:22 - also because we kind of haven't made the
09:24 - variable yet so let's go ahead and do
09:26 - that so in our player controller let's
09:29 - go up here where it says uh thrusted
09:31 - force and let's add another serialized
09:33 - field this one is going to store a
09:36 - private float which is going to be the
09:39 - uh Thruster
09:41 - fuel uh region
09:44 - speed something like that actually let's
09:47 - uh start off by uh doing the um Burn
09:53 - Speed how fast we been through it I
09:56 - don't know this is going to be fine and
09:57 - we're going to default that to something
09:59 - like
10:00 - 0.9 F or 1 if or whatever you want to do
10:03 - so that means that it will be gone uh
10:06 - after 1 second of flying then we can
10:08 - make another uh serialized
10:12 - field
10:14 - private
10:17 - oops private float uh Thruster
10:21 - Fuel and this is going to be the
10:24 - replenish speed I'm going to call this
10:27 - regen speed and it's going to be set to
10:28 - something like like 0.3 F so we will uh
10:31 - gain back the fuel a lot slower then we
10:34 - will uh burn it and uh then we can have
10:37 - a private
10:39 - float and this is going to be the ACT
10:42 - actual Thruster fuel
10:46 - amount and that's going to be default
10:50 - that's going to default to one that
10:51 - means the maximum amount then we can go
10:54 - down into our update method scroll down
10:56 - to where we handle some of the thruster
10:59 - Force you can see here calculate the
11:00 - Thruster Force based on player input
11:03 - well what we want to do here is we want
11:05 - to uh
11:07 - also and I'm just going to do this up
11:10 - here
11:11 - whoops we're going to want to say that
11:14 - Thruster amount Thruster fuel amount
11:18 - minus
11:19 - equals uh Thruster fuel burn speed time
11:23 - time. Delta
11:25 - time so how much the fuel amount
11:28 - decreases when we are actually flying
11:31 - depends on the Thruster fuel burn speed
11:33 - and of course um we want to make that
11:35 - frame rate frame rate frame rate
11:39 - independent good I apologize for my
11:41 - English there uh so we can take an uh
11:45 - and do the same down here so uh we
11:47 - simply want to say Thruster fuel amount
11:51 - plus equals
11:53 - thrust region
11:56 - speed time time. Delta time so here we
11:58 - will gain back thrust uh Thruster
12:02 - fuel at the uh rate of the Thruster fuel
12:06 - region speed and of course again frame
12:09 - rate independent so that's kind of how
12:12 - we do this and you can see of course
12:14 - this means that we are flying and this
12:16 - means that we are not flying so that
12:18 - should work just fine and uh we don't
12:22 - all only want to uh kind of limit this
12:25 - we also want this uh or I mean we don't
12:28 - only want to control this variable we
12:30 - also want to actually make this limit
12:33 - whenever we can fly so we need to add an
12:36 - and here so we don't only want to fly if
12:39 - we get the button down jump we also want
12:42 - to say that thrust the fuel amount needs
12:45 - to be larger than zero so we need to
12:47 - have some kind of some amount of
12:49 - thrusted fuel in order to fly this Frame
12:52 - good so that's perfect and the last
12:56 - thing that we want to do here is we make
12:57 - want to make sure that we SL this value
13:00 - between 0 and 1 because right now when
13:02 - we are not flying this is just going to
13:05 - uh increase and increase and then when
13:07 - we actually decide to fly we can maybe
13:09 - fly for hours and that's not something
13:11 - we want also it can go below zero so if
13:13 - we keep
13:15 - flying uh can it actually it might be
13:19 - able to go just under this zero but then
13:21 - we will be stopped so but still we want
13:23 - to clamp this so uh we want to say that
13:26 - our
13:27 - Thruster fuel amount
13:29 - equals math. clamp and the number that
13:34 - we want to limit is the actual Thruster
13:36 - fuel amount and we want to limit it
13:38 - between Z and
13:41 - 1 there we go so this should work just
13:44 - fine now and we can
13:46 - actually start
13:49 - to tie this together with uh the actual
13:53 - player UI so we have this system working
13:56 - we have this system working uh now we
13:58 - just need to tie them together and we do
14:01 - that by kind of creating a um link from
14:06 - the uh player UI to the player
14:09 - controller so we can call a method here
14:12 - that checks what the current fuel amount
14:14 - is in the player controller so let's
14:16 - start by adding a getter here getter
14:20 - method so public uh float get
14:27 - Thruster fuel am
14:31 - and this is simply going to return
14:34 - Thruster fuel amount there we go and
14:37 - again the reason why we don't just make
14:39 - this public is to make it more protected
14:41 - so that the only thing controlling this
14:43 - is the actual player controller it just
14:44 - makes more sense doing this uh doing it
14:47 - this way uh then in the U player setup
14:50 - or in the player UI I should say we want
14:53 - to have another public uh method we want
14:55 - here a public uh void and this is going
14:58 - to be a set player controller or it just
15:04 - maybe set controller and this is the
15:07 - reference to our actual controller so uh
15:11 - we want a private player
15:14 - controller and this is just going to be
15:16 - the controller and then here we can uh
15:20 - use this as an argument so it's going to
15:22 - take in a player controller underscore
15:25 - controller and we're going to set
15:27 - controller
15:29 - equal to controller perfect and now we
15:33 - can use player setup to link these
15:35 - together so in the player setup here
15:37 - Down Under the start method where we
15:40 - create this player UI instance and uh
15:43 - remember this requires that we are the
15:45 - local player so we make sure that way
15:47 - that this is only happening for the
15:49 - local player that we want this uh UI to
15:51 - be displayed on and uh what we can do
15:54 - here is first we create player UI then
15:57 - we configure
15:59 - player UI and we do this by saying
16:03 - player um we create a temporal temporary
16:07 - uh variable called player UI and this is
16:09 - just going to be the UI component uh on
16:12 - that player UI object and uh we set that
16:17 - equal to player UI
16:21 - instance do get component of type player
16:26 - UI and of course we aren't certain that
16:29 - there is going to be a player UI
16:30 - component on that instance so we want to
16:34 - say that if UI is equal to null well
16:37 - then something uh has gone terribly
16:39 - wrong so we want to say debug.log
16:41 - error no player UI component on player
16:49 - UI
16:50 - prefab there we go and if that doesn't
16:53 - happen what we want to uh do is we want
16:56 - to say UI do set control controller and
16:59 - we want to set that equal to the uh
17:02 - current controller Uh current player
17:04 - controller that sits on the same object
17:07 - as um this player setup script they
17:10 - always going to sit on the same object
17:12 - in our game if they aren't in yours you
17:14 - should create a reference uh just a
17:16 - variable here that you drag in uh the
17:19 - inspector but here we're just going to
17:21 - require it as a component that a player
17:23 - setup requires a player controller there
17:26 - we go it's that easy and this way we
17:28 - don't need to do any error checking
17:32 - and that was it for this I think then in
17:35 - the player UI we can go ahead and make
17:37 - an update
17:39 - method and I'm doing it this way because
17:42 - we could actually go ahead and make some
17:44 - kind of method call uh that makees sure
17:47 - it only updates whenever the fuel amount
17:50 - actually changes but since this is a
17:52 - very easy check and since the fuel
17:54 - amount is going to uh be changing a lot
17:57 - of times uh because it's almost always
18:00 - going to be either regenerating or um uh
18:05 - or Burning uh therefore we really don't
18:08 - need to do that so in the update method
18:10 - here we're simply going to say that
18:12 - controller do um get Thruster force or
18:19 - Thruster fuel amount there we go so this
18:21 - is our current fuel amount and we can
18:23 - simply say that we want this to set fuel
18:26 - amount to that using our meth it down
18:29 - there so we can simply wrap that in as
18:31 - an argument and now things should
18:34 - actually be working at least if we
18:35 - remember to fill out the correct
18:37 - variable so in our player
18:39 - UI we want to drag in the Thruster fuel
18:43 - fill we want to then hit apply and
18:45 - forget about this object for now then
18:48 - under our player we want to uh yeah
18:51 - these variables look just fine and uh
18:55 - nothing new Under the player setup so
18:57 - now everything should be working working
18:59 - and if we go in and hit play land host
19:02 - and try and thrust here you can see that
19:06 - it's actually working so that is just
19:09 - perfect the only problem that we
19:11 - currently have here is that when we
19:13 - reach as uh zero amount of fuel we can
19:16 - still kind of hang in the air because
19:19 - every frame it replenishes just a bit of
19:21 - fuel and then we spended the next frame
19:24 - and that kind of kind of gives this
19:26 - weird looking Behavior here which which
19:28 - is not really desirable so an easy fix
19:31 - for this is if we go under our player
19:34 - controller go down to where we check uh
19:38 - or where we decrease uh this fuel
19:41 - Thruster fuel amount we want to do that
19:43 - regardless if it's over zero we want to
19:46 - always always do this however we only
19:49 - want to add Thruster Force if Thruster
19:53 - fuel
19:54 - amount is uh greater than or equal to to
19:59 - a very tiny amount something like
20:01 - 0.01 and that's just going to give a
20:04 - tiny margin um that will make
20:10 - sure that we don't uh apply our
20:13 - thrusters unless we have just a bid of
20:16 - fuel in the bank so when we now go go
20:20 - ahead and hit
20:22 - play you can see that we just fall down
20:25 - if we don't have enough
20:27 - fuel so that's just perfect so now our
20:30 - fuel engine s to say should be
20:34 - working
20:36 - good um so the other thing that I wanted
20:39 - to fix is right now when we uh fly on
20:41 - top of an obstacle
20:43 - here I'm just going to fly on top of
20:45 - this one you can see that we collide
20:47 - with the ground if I go into the scene
20:49 - view here find our
20:50 - player he sits on top of that thing
20:54 - which he shouldn't he should be floating
20:56 - actually he is floating just a bit but
20:59 - but that's because of the collider is
21:01 - just a tad bigger than the actual player
21:03 - model you can see that we are colliding
21:05 - with the ground here and that's not what
21:08 - we want so we kind of want to offset uh
21:12 - the uh level at which our spring will
21:14 - try to reach so in order to do this if
21:18 - we just actually let's just hit play
21:20 - here and I'll demonstrate uh when we
21:22 - spawn our player in we spawn him at a y
21:26 - position of one then what we can do is
21:30 - we can kind of uh move him around on the
21:32 - Y which we we do and then it will try to
21:35 - reach this one position again and you
21:37 - can see it gets very very close however
21:40 - whenever we were standing on top of an
21:41 - obstacle we want to um we want to
21:46 - keep kind of change this ground level so
21:50 - we don't want them to strive to be at
21:52 - one we want him to strive to be at that
21:55 - obstacles top position plus one and uh
21:59 - if we go under our configurable joint we
22:01 - have something called a Target position
22:04 - and that is that exact uh offset so
22:07 - let's say that we jump on top of a one
22:10 - one Cube well then we just T type in one
22:14 - here or I'm sorry negative 1 and you can
22:17 - see that offsets his new ground level
22:20 - this way what we can do is we can simply
22:23 - fire down some rays so we can use Ray
22:25 - casting to check how far far above any
22:29 - obstacle or ground we are and then set
22:32 - that position uh in negative down here
22:37 - so that's what we're going to do if that
22:39 - was very complicated don't worry it's
22:41 - very easy to do in code and you can just
22:43 - uh write after me and you'll see just
22:45 - how cool it looks when we are actually
22:47 - done so let's find our
22:50 - um our update method here we can just do
22:53 - it at the very top and this is something
22:55 - that we want to be doing every frame so
22:57 - uh in here here we can first off do a
23:00 - rast hit and this is just going to store
23:02 - information about what we hit where we
23:04 - hit it and stuff like that then we can
23:06 - say if
23:08 - physics. raycast and then we want this
23:11 - to to give this a bunch of variables the
23:14 - first off you can see many different
23:16 - versions of this the first off is going
23:18 - to be the origin so we're going to be
23:20 - using transform. position then we're
23:23 - going to give it a direction which is
23:25 - going to be Vector 3 do down it's always
23:28 - is going to shoot directly down uh then
23:31 - we are going to give it a um out hit so
23:35 - we want to fill information about what
23:37 - we've hit into this variable here that's
23:39 - going to feed that in there then we are
23:42 - going to give a maximum distance that's
23:44 - going to be a 100 and finally we can do
23:46 - a layer mask uh which we'll do in a
23:49 - second so if we actually hit something
23:53 - this is going to return true and
23:55 - therefore this code down here is going
23:57 - to be called and if it has well then
24:00 - what we want to do is we want to say
24:03 - joint. Target
24:05 - position here is going to be equal to a
24:08 - new Vector 3 and it's going to be zero
24:11 - because we don't want any offset on the
24:13 - X then we want something on the Y and uh
24:16 - it's going to be zero on the Z as well
24:19 - and what we want on the Y here is going
24:22 - to Simply Be the point that we hit so
24:26 - the very surface that we hit that exact
24:29 - point doy and then of course we need to
24:33 - inverse this because it's a negative
24:35 - offset and that's all that's all we need
24:38 - to do and if we haven't hid anything
24:40 - we're simply going to set uh this uh
24:43 - Target position equal to the ground
24:45 - plane so that's going to be 0 0 0 there
24:49 - we go that's all uh I hope and uh if we
24:54 - go in and try this now maybe we should
24:55 - just comment what we're doing here so we
24:58 - are
24:59 - setting uh Target position for
25:04 - spring this makes the
25:08 - physics uh act right when it comes
25:15 - to applying gravity when
25:19 - [Music]
25:21 - flying over
25:24 - objects good so that should be working
25:28 - and we can now jump back into unity and
25:30 - if we just try this out everything
25:32 - should be just fine because we don't
25:33 - have a problem with the raycast hitting
25:35 - our actual objects or that at least we
25:37 - shouldn't have and the first thing that
25:39 - you will notice here is that this works
25:41 - just fine and uh if we go over to this
25:44 - object fly on top of it you can see that
25:46 - we are hovering over it and the physics
25:49 - feel a lot nicer you can see here we are
25:52 - actually hovering
25:54 - there so that's just perfect then if we
25:57 - go uh jump off the ledge here you can
26:00 - see just the same thing happen so that's
26:02 - just perfect and the last thing I want
26:05 - to do is just to make sure that this um
26:07 - is a bit more configurable add in the
26:09 - layer mask anyways just so we can have
26:12 - uh objects with colliders that we don't
26:15 - that we aren't actually able to stand on
26:17 - top of so um a cool idea for this would
26:20 - be a player so you can just make like a
26:22 - player Tower uh or anything like that
26:25 - you can if you want to but I don't want
26:28 - to so let's go up here and
26:33 - under maybe just here we could put this
26:36 - on Spring
26:37 - settings but I don't really think it
26:40 - should be on Spring settings uh and this
26:42 - is just going to be a serialized field
26:44 - it's going to be a private layer
26:48 - mask and it's going to be uh called
26:52 - environment mask that will make sure we
26:55 - only collide with the actual environment
26:57 - and we can just add add this here as the
26:59 - last argument in this crazy row uh of
27:03 - parameters and uh then we are going to
27:06 - go and do our player and you can see
27:08 - here we can now select any layer that we
27:10 - want so I'm going to make a new layer
27:12 - here I'm going to add a layer and this
27:14 - is going to be a
27:16 - [Music]
27:18 - collidable environment let's do that uh
27:21 - that's going to be stuff like uh
27:22 - obstacles ground planes stuff like that
27:25 - then let's go under environment and
27:27 - select all of our cubes not the
27:29 - directional light and let's change them
27:31 - to collidable
27:33 - environment uh cool save that uh select
27:36 - our player and then choose as the
27:38 - environment mask remember to choose
27:41 - collidable environment and you can check
27:43 - off any other thing that you want this
27:44 - to be able to uh collide with on the y
27:47 - axis um or I should say able to hover on
27:51 - top of um it will still be able to
27:53 - collide with everything else also now
27:55 - you need to of course make sure to uh
27:58 - change the layer of any objects that you
28:00 - want this to be able to hover on top of
28:02 - um but that should be just fine if you
28:04 - remember to do that the system is going
28:06 - to work so great so now uh when we play
28:09 - we should see absolutely no difference
28:11 - things should be working but it's more
28:13 - stable now and we have more control
28:16 - there you go so that was basically it
28:17 - for this video I hope you enjoyed it a
28:19 - lot and I'm definitely looking forward
28:21 - to the next one so thanks for watching
28:23 - and I'll see you in the next video
28:32 - [Music]