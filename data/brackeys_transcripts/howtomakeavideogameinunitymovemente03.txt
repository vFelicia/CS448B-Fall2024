00:00 - hello everyone in this video we'll make
00:01 - our Player move to do that we'll have a
00:03 - look at variables if statements and
00:05 - player input so if you want to make
00:06 - games in unity this video is pretty much
00:08 - Essential I'm ready are you ready let's
00:10 - go before we get started I just wanted
00:12 - to mention that you can now download the
00:13 - project files and the scripts from each
00:15 - video over at Dev assets so if we go to
00:18 - Dev assets.com this is a website I
00:20 - created where you can download really
00:22 - high quality 3D models such as this
00:24 - Western props pack we have a modern
00:26 - weapons bundle some cool looking sci-fi
00:28 - vehicles and a lot more if we go to to
00:30 - browse scroll down to the bottom here
00:32 - and click how to make a game we get to
00:33 - this page where you can download all of
00:35 - this stuff I've seen a lot of tutorial
00:37 - makers make their project files paid but
00:39 - I don't really think that's fair to you
00:40 - guys instead as with everything on the
00:42 - site here I've made it pay what you want
00:44 - so you can of course go ahead and grab
00:46 - it for free or choose to support me with
00:47 - some amount you can just click the one
00:49 - that you can afford here and then hit
00:50 - the blue button and you're good to go so
00:52 - back to the video in the last one we
00:54 - made our Cube fly forward by adding a
00:56 - force right now our primary issue with
00:58 - this is that our player doesn't stay on
01:00 - the ground he just starts rotating and
01:02 - jumping and goes crazy one way to fix
01:04 - this is to go to the player find the
01:05 - rigid body and add some constraints we
01:08 - could for example freeze the rotation on
01:10 - the x-axis and that should result in
01:12 - smooth movement however we do want our
01:14 - Cube to be able to rotate so that when
01:15 - he collides with something it's going to
01:17 - look cold so let's uncheck that and
01:19 - instead let's create a physics material
01:21 - the reason for the cube jumping around
01:22 - is that by default there's friction
01:24 - between the cube and the ground by using
01:26 - a physics material we can choose how
01:27 - much friction we want so let's right
01:29 - click in the project go create and then
01:30 - select physic material we can rename
01:32 - this to something like slippery and we
01:34 - can set both the dynamic and the static
01:36 - friction to zero then we can drag this
01:39 - onto our ground and you can't see it
01:41 - being applied but if we go ahead and
01:42 - select our ground we can see that the
01:44 - material under the box collider is now
01:46 - set to slippery and that means that if
01:48 - we hit play now there's no friction
01:50 - between the cube and the ground and he's
01:51 - just going to slide off and that's
01:53 - without restraining his rotation so if
01:54 - we now select the player and double
01:56 - click on our player movement script on
01:58 - this line we adding a forward force of
02:00 - 2,000 and then of course multiply it
02:02 - with time. Delta time however it would
02:04 - be really really neat if we were able to
02:06 - modify this value in the inspector
02:08 - instead of just hardcoding this into the
02:10 - line to do that we use variables in C I
02:13 - like to think of variables like
02:14 - containers just like you can store items
02:16 - in a box you can store data in a
02:18 - variable in the beginning we focused on
02:20 - storing symbol values like numbers or
02:22 - text but variables can be used to store
02:23 - way more complicated data each variable
02:25 - is given a name this pretty much just
02:27 - means slapping a label on the container
02:29 - so that each time use that name it
02:30 - refers to the data of the variable we
02:32 - also have to specify what type of data
02:34 - we want to store for starters you should
02:35 - learn and memorize the four fundamental
02:37 - data types integer we just write int
02:40 - this stores a whole number it can also
02:41 - be negative float this stores a number
02:43 - with decimals string this stores a piece
02:46 - of text and bullan we just write bull
02:48 - and this is the simplest of all the data
02:50 - types because it can only have two
02:51 - values true or false so creating a
02:54 - variable looks like
02:55 - this Unity also allows us to edit a
02:58 - variable in the inspector to do that
02:59 - that we mark it as public however this
03:02 - variable is currently unassigned it has
03:04 - no value we can assign the variable at
03:05 - default value by simply typing equals
03:08 - and then the value to get the value of
03:09 - the variable in code we simply write its
03:11 - name like here where we are printing the
03:13 - value 10 to the console we can of course
03:15 - also edit the value of a variable here
03:17 - we set it equal to five and here we add
03:19 - one onto the current value making it six
03:21 - so if you want to turn this number into
03:23 - a variable that we can edit in the
03:24 - inspector we'll go up here and create
03:26 - some space we'll write public float
03:28 - because we want the number that we can
03:30 - fine tune with decimal places then we
03:32 - need a name in our case we could do
03:33 - something like forward force and we can
03:36 - set a default value in our case we will
03:38 - just set that to the same 2,000 then we
03:40 - can substitute this number with forward
03:42 - Force so we'll just take the forward
03:43 - Force here and paste it down there if we
03:46 - now save go back into Unity we can see
03:48 - that we are now able to adjust the
03:49 - forward force in the inspector we could
03:51 - set it to
03:52 - 4,000 or to a
03:55 - th000 if you click and drag on it you
03:57 - can even find tune like this and you can
04:00 - even edit it while playing so now of
04:02 - course we need to change this commment
04:03 - here instead we'll change it to
04:05 - something like add a forward force and
04:08 - it's time to have a look at doing some
04:10 - player input now the fundamental thing
04:12 - to understand when doing player input is
04:14 - the if statement if you make some room
04:16 - beneath our ad force method here we can
04:18 - write if open and close a parentheses
04:20 - and then open and close some curly
04:21 - brackets this is the basic structure of
04:24 - an if statement if statements allow you
04:25 - to only execute code if a certain
04:28 - condition is met this is where you put
04:29 - your your code and inside of these two
04:31 - parentheses is where you put your
04:32 - condition sometimes it's really simple
04:34 - say comparing two numbers we could write
04:36 - if three is bigger than two of course
04:39 - this is always going to be true and so
04:40 - this will always be called we can also
04:42 - say if 3 is equal to 2 and this is of
04:45 - course false so this code will not be
04:47 - called we can also write other stuff say
04:49 - if 1 is equal to 2 - 1 and this is of
04:53 - course true or we could put not equal to
04:55 - and now it's false but this is only the
04:57 - stuff we can do with numbers we can also
04:59 - put other stuff in here if we want to
05:00 - check if the user is pressing a certain
05:02 - key on the keyboard we'll go input.
05:04 - getet key and here we'll also open and
05:06 - close a parenthesis and in here in
05:08 - quotation mics we write the key we want
05:10 - so in our case we want D to go to the
05:12 - right and now everything we put inside
05:14 - of these two curly brackets is only
05:16 - called when the user presses D so we
05:18 - could of course just go ahead and add
05:19 - some more forces here let's say rb. add
05:22 - force and in this case we don't want to
05:23 - add a force on the z-axis we want to do
05:26 - it on the X meaning right and left so we
05:28 - can go in here and add some number say
05:30 - 500 we'll then do Z on the Y and Z on
05:33 - the Z remember to close it up with a
05:34 - semicolon of course we want to multiply
05:36 - our 500 with time. Del time just like we
05:39 - do up here if we now save this I'll just
05:42 - set the forward Force to something
05:43 - pretty low just so a cube doesn't go
05:44 - flying off we can hit play and we should
05:46 - see that when we hold down D our Cube
05:48 - will indeed move so we can go back and
05:50 - add this to the other direction as well
05:53 - to do this we simply copy our code paste
05:54 - it right beneath instead of checking for
05:56 - the D key we'll check for a and we still
05:59 - want to add a force on the x-axis but we
06:01 - want to do so in the opposite direction
06:03 - so we'll just input a minus here again
06:05 - we can save this play the game and see
06:07 - that we can now move in both directions
06:09 - in fact why don't we go ahead and make
06:11 - our movement speed adjustable in the
06:12 - inspector the same way we did with
06:14 - forward Force to do that we just add a
06:16 - new public float up here and we'll call
06:19 - this something like sideways force let's
06:21 - just default that to 500 by the way when
06:23 - we're dealing with float variables you
06:25 - will notice me writing an F at the end
06:27 - of the number this just signifies that
06:29 - we're talking about a float number in
06:30 - some cases we can leave it out like here
06:32 - but other times Unity will complain so
06:34 - it's a good idea to get in the habit of
06:36 - just doing it every time again this only
06:38 - applies to floats not integers so now we
06:40 - can take our sideways force and paste it
06:42 - instead of the 500 here and instead of
06:44 - this 500 here as well you'll notice that
06:46 - it's still fine putting a minus here
06:48 - when we run the game this is just going
06:49 - to be equal to 500 or what we said in
06:52 - the inspector so let's save this go back
06:53 - into unity and we can now see that we
06:55 - can adjust the sideways force as well
06:57 - let's try setting the forward Force to
06:58 - something like a, and the sideways force
07:00 - to something like
07:03 - 600 and it already starts to feel like a
07:05 - game if you were able to follow along
07:07 - with this really good job programming
07:09 - the movement of the player is definitely
07:10 - not the easiest thing that you can do in
07:12 - unity and so it's always annoying that
07:13 - it's really the first thing that you
07:15 - have to do in most cases but I hope you
07:17 - learned something and remember you don't
07:18 - have to understand and definitely not
07:20 - remember all of this the first time I
07:21 - will just mention that the way that
07:22 - we're handling player movement here is
07:24 - not the most efficient way but no one
07:26 - expects you to write perfect code right
07:28 - off the bat I just wanted to let you
07:29 - know know how this could be improved
07:30 - there's two main problems here the first
07:32 - one is how we're getting player input
07:33 - now using input. get key here is totally
07:36 - fine and in our case it works perfectly
07:37 - but as soon as we want to do stuff like
07:39 - smoothing player input supporting
07:41 - alternative keys or maybe even a
07:43 - controller Unity has some much better
07:44 - ways to handle the player input so you
07:46 - can definitely look into that if you
07:47 - want to improve it also we're currently
07:49 - checking for input inside the fixed
07:51 - update well it's fine in our case
07:52 - because what we're doing is movement and
07:53 - that's usually a fairly smooth thing
07:55 - it's definitely not a good idea to do
07:57 - for stuff like jumping or other oneoff
08:00 - events the reason for this is that input
08:02 - is updated in the update method and if
08:04 - the fixed update runs slower you might
08:06 - have a situation where you actually miss
08:08 - some player input first that would just
08:09 - mean that the input gets slightly
08:11 - delayed and that's why I think it's fine
08:12 - here but the recommended thing to do is
08:14 - check for an input in the update method
08:16 - then store that input in some sort of
08:17 - variable up here in our case that could
08:19 - just be two booleans called something
08:20 - like move right and move left that you'd
08:22 - set to true if the keys pressed and
08:24 - false if the keys released and then
08:25 - check if those variables are true or
08:27 - false down here to add a force but a
08:29 - really wouldn't worry too much about
08:30 - that right now so that's pretty much it
08:31 - for this video If you enjoyed it make
08:33 - sure to subscribe so you won't miss the
08:34 - next one also if there's anything you
08:36 - would really like me to include in this
08:37 - miniseries definitely leave a comment
08:39 - and I'll see what I can do so thanks for
08:40 - watching and I will see you in the next
08:42 - video thanks to all the awesome people
08:44 - who donated in January and a special
08:46 - thanks to Derek heemskirk facel marifi
08:48 - James Kell Hound Robert bonam Peter lock
08:50 - and Jason dto if you want to become a
08:52 - patron yourself you can do so at