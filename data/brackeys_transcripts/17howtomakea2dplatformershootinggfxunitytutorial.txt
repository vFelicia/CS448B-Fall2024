00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number 17
00:07 - in how to make it to the platform a
00:09 - course in today's video we're gonna have
00:11 - a look at making our shooting mechanic
00:14 - look a lot more awesome so we're gonna
00:17 - really gonna tie it together with
00:18 - graphics that means that we are gonna
00:21 - make our shooting trail a bullet trail
00:24 - actually stop at the point of impact and
00:27 - we're also gonna add some hit particles
00:29 - so that's gonna make it look a lot
00:31 - better so as always if you have any
00:35 - questions go to front of wreckage to
00:36 - come you can also just open up a
00:38 - discussion about any subject whatever
00:40 - and yeah let's just dig right into it so
00:44 - unity is just where we left it last time
00:47 - I haven't made any changes except one
00:51 - since the last video I've switched from
00:54 - monodevelop to actually using Visual
00:57 - Studio and it's awesome so I've always
01:01 - been a great fan of Visual Studio I
01:04 - think it's one of the best things to
01:06 - have ever come out of Microsoft and if
01:09 - you're on a Microsoft computer on a
01:12 - Windows computer please go ahead and and
01:15 - use it it's it's really really awesome
01:17 - don't get me wrong monodevelop what you
01:20 - just do just find for most of the work
01:23 - that you're going to be doing but Visual
01:25 - Studio is a much more complete and
01:28 - feature-rich development environment so
01:31 - I really recommend it and now it's
01:33 - beautifully integrated with unity and so
01:36 - if you want me to do kind of a video
01:39 - where I show how to set up with Visual
01:41 - Studio Tools and and all that please
01:44 - leave it in a comment and I'll
01:45 - definitely think about it so then I just
01:50 - wanna want it to mention that that's
01:52 - what I'm using now awesome so let's get
01:56 - started with today's subject so first
01:58 - off let's select the player and take
02:00 - onto him and go on your arm and select
02:02 - the pistol and you'll see that on the
02:05 - player here we have a weapon script so
02:08 - if we double click this it will open up
02:10 - in Visual Studio you can of course
02:12 - follow along
02:13 - in monodevelop and I'm just gonna click
02:16 - it again to make it actually open up the
02:18 - script and not only the solution
02:21 - assuming a bit here so you can see
02:23 - what's going on and you can see that we
02:26 - have a shoot method and an effect method
02:30 - and we want to make a few changes to
02:34 - both of these but first off let me
02:36 - explain what we're doing because right
02:38 - now when we hit play it will spawn in
02:42 - whoops what's going on here oh yeah I
02:46 - made a change when I was testing some
02:49 - things out here
02:50 - I was just quickly revert that change so
02:54 - it was just the move trail component I
02:57 - just deleted that for some testing
02:58 - purposes we're gonna delete it again in
03:00 - a sec but where we left off last will
03:03 - have this move trail that spawns in a
03:06 - prefab that then very very quickly
03:08 - travels through our scene and it looks
03:12 - fine it does but it doesn't stop when we
03:15 - hit an enemy or a platform or something
03:17 - and we can go through and add some kind
03:20 - of distance check or collision to this
03:24 - trail to make it stop on its own but I
03:28 - think that that would just be not very
03:31 - intuitive and actually require more work
03:34 - than necessary
03:35 - so instead we're going to change the way
03:37 - that we do these bullet rate trails a
03:39 - little bit and that is from moving the
03:42 - trail to simply changing the Precision's
03:45 - the stun and end position and then just
03:48 - having it display for a single frame and
03:50 - that way the eye will not notice that
03:52 - it's not moving and it will look like an
03:57 - actual bullet trail and this is how so
04:01 - many two-dimensional bullet trails are
04:03 - done in a lot of very beautiful games so
04:05 - it's it's not that this is in any way a
04:08 - bad solution it's just much easier so I
04:12 - think we're gonna go with that one code
04:14 - so the first thing that we'll want to do
04:16 - is of course to need the move trail
04:19 - script and then let's drag it into the
04:21 - scene and make a few changes to this so
04:23 - first off we want to disable cast
04:25 - shadows and receive shadows
04:26 - don't know where they were enabled in
04:29 - the first place and you can of course go
04:32 - into the material here and change around
04:35 - with this I'm just gonna leave it for
04:37 - now and then we are going to go under
04:40 - parametres and bump up the transparency
04:43 - or we are going to remove the
04:46 - transparency from the start color so
04:49 - that's again visible and I'm gonna make
04:51 - it a cool orange color here you can
04:53 - cover my RGB values if you would like
04:56 - and we're gonna do the same with the end
04:57 - color and then most importantly we're
05:02 - gonna check it to use world space that
05:06 - means it will jump down here because now
05:08 - it's no longer affected by its position
05:11 - in 3d space but only sticks to the
05:14 - positions given here and that makes it
05:16 - very easy for us to tell it so kind of
05:21 - give it give it a start an end point
05:23 - through code because we don't have to
05:25 - kind of orient ourselves in the
05:27 - hierarchy we can just give it a position
05:29 - and we know that's a global one and then
05:32 - also I'm gonna bump up this time with an
05:35 - end with to something like zero point
05:37 - zero seven just so it's gonna be a bit
05:39 - clearer to see now we can reset the
05:43 - position that it matters a lot and then
05:45 - we can hit apply on the prefab and
05:47 - delete it from our scene and of course
05:50 - make sure that it's still assigned onto
05:53 - the weapon prefab to spawn cool then
05:57 - let's hit back into our script and what
06:00 - we're going to be doing here is first
06:02 - off we want to store a reference to the
06:07 - trail that we just spawned so we're
06:10 - gonna make this a type transform and
06:12 - we're gonna call the trail and equal it
06:14 - to the newly instantiated prefab and
06:17 - we're gonna cask it cast it to a type
06:20 - transform then on that trail we can grab
06:24 - the line renderer so we're gonna go line
06:26 - renderer and call it LR and we're gonna
06:30 - equal it to trail dot getcomponent
06:34 - and then our line renderer
06:38 - there and then just to make sure that
06:41 - the line renderer is actually assigned
06:44 - we're gonna say if LR is not equal to
06:48 - null just so our code will work in all
06:52 - instances and then in here we'll say
06:56 - we'll set some positions but in order
07:01 - for us to do that we'll have to have
07:03 - both our starting position and our
07:06 - ending position and currently we only
07:08 - have our fire point at position and not
07:11 - whatever we've hit and if we don't hit
07:14 - something we just want to make a point
07:17 - very far in space but in the general
07:20 - direction that we are shooting so that
07:22 - it wants the camera cannot see that the
07:25 - the trail is ending and so that it
07:28 - follows the projectory of the bullet so
07:32 - in order for us to do that I think we're
07:35 - going to restructure a bit here so first
07:37 - off we'll move the effect handling below
07:41 - are actually collision code I just think
07:45 - that makes a bit more sense then also
07:48 - we're going to pass in an argument here
07:50 - and it's going to be of type vector 3
07:53 - and it's going to be the hip position
07:55 - and then here we want to pass in that
08:00 - hit position when we're calling the
08:03 - method and we've first off want to make
08:07 - a hit position variable but we don't
08:11 - want to to assign it just let just yet
08:15 - instead what we initialize it just want
08:19 - to declare it and then down here what we
08:22 - want to do is we want to check if we've
08:23 - hit something so if hit dot Collider
08:27 - it's equal to null if we have not hit
08:30 - anything then we want to actually let's
08:34 - just not use these braces then we want
08:37 - to set hit pass equal to and then a
08:41 - point far off in the distance but
08:44 - continue in the same direction and we
08:46 - can do this just like we did with the
08:48 - draw line up here by simply subtracting
08:52 - two vectors will get a direction and by
08:55 - then multiplying it will make it go
08:57 - farther off into space and I'm not going
09:02 - to multiply with a hundred I'm just
09:04 - gonna multiply with something like 30
09:07 - maybe I think that's gonna be plenty so
09:10 - if we don't hit anything just continue
09:12 - into space else if we do hit anything
09:16 - then we're gonna do hit past equals hit
09:20 - dot point so remember we collect some
09:25 - information about our raycast
09:26 - that's stored in the hit variable and
09:29 - hit that point will return a vector3
09:32 - position of the point that the raycast I
09:36 - had an impact and then we'll just feed
09:38 - in the head pass feed the head pass into
09:41 - the effect method which will be called
09:44 - here and now we can use it down here to
09:46 - set some positions so in order to do
09:49 - this we'll do LR that set position and
09:52 - first off you want to give it an index
09:54 - which is going to be the number let me
09:58 - find it here and pull the trail the
10:02 - number in the array of positions so it's
10:05 - going to be the element number that we
10:08 - want to set so first off we want to set
10:10 - the starting position which is going to
10:12 - be element 0 so we'll type in 0 and then
10:15 - the vector 3 which is going to be fire
10:18 - point that position this way will look
10:23 - like it's appearing from our gun then
10:25 - we'll do lr that set position and then
10:28 - pass in 1 for an ending point and here
10:31 - we simply want to type hit pause and
10:34 - close that off so now when we hit save
10:38 - go back into unity hopefully we have no
10:41 - errors indeed we don't that's amazing
10:43 - always love when that happens
10:45 - not that it's it's actually pretty rare
10:49 - so let's hit play here and let's cross
10:53 - our fingers and indeed it's working you
10:56 - will notice that it doesn't disappear at
10:58 - the moment but you can see that it
11:00 - starts and stops at the correct position
11:02 - and it looks like it's failing here with
11:05 - the plaid
11:05 - forms but that's actually because they
11:07 - are using symbol box colliders which was
11:10 - something that I actually wanted to kind
11:13 - of straighten out let's see if we have
11:15 - the time yeah this is not my first take
11:20 - it doesn't look like it so we're gonna
11:21 - continue on maybe we'll do it in another
11:23 - video maybe it will have time let's see
11:25 - I just want to we'll do it very quickly
11:28 - change my mind again so delete the box
11:32 - colliders instead add we go under
11:36 - physics 2d some polygon Collider some
11:39 - will just make it fit on its own for it
11:43 - for now I think and then lady we can
11:46 - maybe go in and and do it ourselves
11:50 - actually I'm not too satisfied with this
11:55 - we should really go in and edit this
11:57 - Collider manually to get it looking
12:00 - nicely let's see if we play this it's
12:06 - better but it's not really ideal I think
12:11 - it will have to do for now so we'll just
12:12 - leave that and then come back don't
12:14 - worry this is not their final state cool
12:19 - so now that that's working all we need
12:22 - to do oops go back into Visual Studio
12:25 - all we need to do is to remove this
12:29 - prefab after short wah and we're doing
12:33 - the same down here with the muzzle flash
12:35 - so we simply put in destroy and then a
12:38 - cloned out game object but trail that
12:40 - game object after 0.02 seconds now let's
12:45 - hit play and we should see this working
12:48 - as intended and indeed it does but it
12:53 - does seem to destroy rather quickly some
12:56 - frames so we'll maybe just bump this up
12:59 - to 0.04 let's see
13:08 - yeah I like that better cool so you can
13:11 - see that working now and then we can
13:15 - continue on to some hit particles yeah
13:20 - that went pretty quickly awesome
13:23 - so in order to respond some hit
13:26 - particles we need of course a position
13:28 - but we also need a rotation because they
13:32 - need to be facing the opposite direction
13:34 - of our impact so if you follow along a
13:39 - line let's say we hit our enemy here so
13:41 - we fall along this path then we want
13:44 - them to be facing towards our player and
13:47 - there are so many ways to do this but a
13:50 - very easy way is by using the hit normal
13:54 - and that won't always make it face our
13:57 - player and I'll show you just what it
13:59 - will do but it will make it look pretty
14:02 - calm and some like this and do it
14:05 - intentionally and others just do it
14:08 - because they are lazy I actually like
14:10 - this effect but I'll show you what I'm
14:13 - talking about in a second let's just try
14:16 - and implementing this so first off I
14:19 - want to explain that whenever we are
14:20 - casting out a ray let's say that our
14:24 - player is up here and he's casting a ray
14:27 - down towards our platform what the hid
14:31 - dot normal will return is the rotation
14:34 - in Euler angles that or it's actually I
14:40 - should say it's actually a vector three
14:42 - with a direction from where the normal
14:46 - here is facing and the normal will be
14:48 - when you see this collision face here
14:51 - will be pointing exactly upwards from
14:56 - this place so if we hit over here it
14:58 - will point to the left if we hit down
15:01 - here it will point in this direction so
15:04 - it will always be perpendicular to
15:07 - whatever line you have going through and
15:11 - that's kind of what a normal is it's
15:14 - perpendicular to a tangent
15:18 - cool so now that we know that we can use
15:22 - normals to our advantage and let's do
15:28 - that now
15:28 - cool so in order to implement this what
15:32 - we are going to do is we're going to
15:34 - pass in a normal just like we did with
15:36 - the position so in here we're gonna pass
15:40 - in the normal so we're gonna do Carmo
15:42 - vector three oh I'm sorry we're gonna
15:47 - simply do you hit stunt normal I think
15:51 - just put it in there and because we want
15:58 - to check whether or not we've hit
16:00 - something in order to instantiate these
16:03 - so I think what we'll do is set the the
16:09 - normal equal to something crazy if we
16:14 - don't hit anything or we could do that
16:17 - with the hit pass yeah we'll do that
16:19 - with the hit force now if no that's not
16:22 - gonna work okay I've decided now what
16:25 - we're gonna do here is we're gonna make
16:27 - it vector three called hit normal and
16:31 - we're gonna default it to nothing and
16:33 - then down here we want to put in the hit
16:39 - normal and what we can then do is in
16:46 - here now we're actually going to need
16:48 - the braces in there if our collider is
16:54 - equal to zero we're gonna set the hit
16:58 - normal equal to a new vector3 and we're
17:03 - gonna equal it to nine nine nine nine
17:05 - comma nine nine nine nine comma nine
17:08 - nine nine all right there we go
17:11 - and this way we'll be able to check if
17:15 - it's equal to this and if it is we'll
17:17 - know that we shouldn't be using it we
17:19 - could also do this by a separate
17:21 - argument with the pool or within all
17:25 - value type there plenty of use cases but
17:28 - for now we're gonna do it like this and
17:30 - then
17:31 - we're gonna say hit normal equals hit
17:34 - dot normal then down here what we can do
17:38 - is we can say if hit normal oops
17:46 - need to declare up here so comma back to
17:51 - three hit normal and then down here we
17:56 - can say if hit normal is equal to vector
18:00 - three nine nine nine nine common nine
18:06 - nine nine nine comma nine nine nine
18:09 - there we go
18:12 - this is not working it's equal to new
18:14 - vector3 there we go
18:18 - and then we open up this and what we're
18:22 - saying here is now that we know we've
18:24 - hit something because our our hit normal
18:27 - is going crazy what we can do is we can
18:31 - simply say instantiate and then we need
18:38 - a prefab to instantiate instantiate yeah
18:42 - cool and we can declare that up here so
18:45 - we're gonna make a public transform and
18:49 - we're gonna call this hit hit prefab
18:56 - simple as that and then down here will
19:00 - instantiate hit prefab as the position
19:05 - we'll take in the hit position and as
19:09 - the rotation will do quaternion dot from
19:16 - two rotation and then we'll pass in and
19:19 - we'll just try try with I think this is
19:23 - gonna be victor three dot right I
19:26 - believe if it is turned like 90 degrees
19:31 - to to the left or something then just
19:35 - try and mess around with this try up
19:37 - instead or left this is how you can
19:40 - adjust kind of its its rotation on the
19:43 - hit
19:44 - I'll show you than second actually let's
19:47 - do it wrong by purpose sir just so you
19:49 - can see what's going on so it will do a
19:51 - vector3
19:51 - up and then we input the head normal
19:56 - cool quaternions and rotation can be
20:00 - quite difficult just know that this is
20:03 - the standard way to do it for now I
20:05 - don't really have time to go into that
20:07 - cool so let's find a pistol let's make
20:12 - sure we have a hit prefab assigned maybe
20:14 - we should also make a warning if we
20:17 - don't we don't have that for the others
20:21 - let's just ignore that make sure to
20:23 - remember it and let's put in a a prefab
20:27 - of some sorts for now I'll just use the
20:29 - muscle flash prefab so we can clearly
20:31 - see if this is working or not and then
20:33 - we'll create one in a sec so now when we
20:36 - hit stuff it's definitely not working
20:39 - because it's not instantiating so that
20:42 - means that we the code is not being
20:45 - called this is this should be if it's
20:47 - not equal to now it should be working so
20:53 - if we hit up here we don't instantiate
20:56 - anything and then here we do and you can
20:59 - see that the prefab is turned 90 degrees
21:01 - and that's why we are using this vector
21:05 - three got rights instead to make sure
21:08 - that it's turned correctly that's kind
21:10 - of how it Orient's itself let's see and
21:13 - now it's actually using the normal and
21:16 - of course this looks plenty kinds of
21:20 - stupid so in order to make this look a
21:23 - little better let's quickly make a
21:25 - particle system so let's go on the game
21:28 - object particle system focus on it in
21:31 - the scene here and we'll make some spiky
21:34 - looking things can maybe put it over
21:37 - here and first off we'll set looping
21:43 - okay we'll set the duration to one so we
21:45 - can see how this looks every every
21:48 - second and then down here we'll set the
21:51 - rate to zero but instead add a burst you
21:55 - can see what that does and
21:57 - loop and burst once again every one
22:00 - second and the amount of particles I
22:03 - think 30 is gonna be a fine starting
22:05 - point here I of course want to bring
22:07 - down the life time to about maybe 0.5
22:13 - seconds I think that's okay maybe that's
22:16 - even too long 0.4 will make it go out
22:20 - quite a bit faster so 10 looks pretty
22:25 - okay but we want to vary the speed so
22:29 - let's make that a random between two
22:32 - constants and we'll make that between
22:34 - two and ten that looks much better and
22:39 - the start life time should definitely be
22:42 - brought down here and also I'll just
22:44 - turn this particle system sideways so
22:48 - that we can see what will happen if we
22:51 - turn on some gravity so we'll add a
22:53 - gravity modifier let's try one I kind of
22:56 - like that effect then what we can also
22:59 - do is make it change its color over
23:02 - lifetime and we'll start out by making
23:07 - it fade on the Alpha fade out like that
23:11 - also we'll make it fade in just very
23:14 - very quickly yeah like that and then we
23:19 - can make the color maybe make it kind of
23:23 - actually I want to add some additive
23:26 - particles instead of these default ones
23:28 - so let's drag in our article additive
23:32 - material oops that doesn't work with
23:34 - that so let's make another one we have
23:36 - the particle glow we could use that one
23:38 - let's tried see how it looks
23:42 - it's being annoying so let's drag in the
23:47 - particle glow here yeah actually like
23:51 - that quite a bit and then we can change
23:54 - the color in here so we'll do something
23:57 - orangey will do very orange in the
24:02 - beginning and then fade to white I think
24:05 - that looks fairly decent this is not
24:08 - going to be perfect you should really
24:10 - mess around with this a lot more than
24:12 - then I'm doing here but I just want to
24:15 - get something that is alright at least
24:16 - then when it comes to the shape I want
24:18 - this to emit from basically one point
24:25 - very small angle or very small radius I
24:30 - should say maybe we could change it to a
24:33 - different shape I think we're gonna do a
24:36 - hemisphere that kind of looks a lot more
24:40 - light it's emitting from this single
24:42 - point and then just out in a random
24:44 - direction and I think we can add a bit
24:47 - more gravity so let's do 1.5 it's
24:52 - starting to look like something then we
24:54 - can change the size of the particles to
24:56 - be random between two constants between
25:00 - 0 and 1 and maybe we'll bump down the
25:05 - speed a bit again yeah that's better
25:09 - and I think 0 and 0.5 is maybe better
25:13 - yeah it definitely is
25:15 - then we can also vary the lifetime to be
25:18 - random between two constants and now we
25:22 - are we are starting to get something
25:25 - that looks pretty damn cool so I'm just
25:28 - gonna keep that for now at least and
25:30 - we'll try and see if that's working
25:34 - so let's rename this to impact particles
25:42 - or hit particles whatever you want and
25:45 - let's drag it under the prefabs let's
25:49 - delete it from the scene let's select
25:52 - our pistol drag it under the hid prefab
25:56 - and let's try so you can kind of see
26:02 - what that does and I think it looks
26:03 - really really awesome actually
26:06 - however you will see that it's it's
26:08 - currently looping so that's just
26:10 - selected down here and make sure to turn
26:14 - off loop so let's try this again let's
26:17 - actually do that in full-screen because
26:19 - I think we have something that we can be
26:21 - pretty proud of now and yeah that's
26:24 - indeed working and I think it looks
26:26 - really really awesome great and just to
26:31 - make sure that they are facing correctly
26:34 - not that it really matters if it looks
26:36 - great but if we just click on the
26:40 - platform here click on impact particles
26:44 - and then select the tool you can see
26:46 - that they are pointing upwards so that's
26:48 - working like it should and also inside
26:52 - of our weapon code it's a good idea for
26:55 - us to delete these after a little while
26:57 - so what we can do is you can of course
27:00 - delete make them auto-delete in the
27:02 - particle system but I like to have
27:04 - control over that so we are simply going
27:06 - to collect them I call these hit
27:10 - particle and we can gonna cast it as a
27:16 - transform transform and then we will
27:22 - destroy hit particle dot game object in
27:29 - about a second awesome so now when we
27:36 - play we should seen them disappearing
27:39 - from the hierarchy when they are done
27:41 - playing and indeed they do so now we
27:44 - have tied our shooting mechanics
27:46 - together and it really gives this
27:48 - awesome feel when you hit something next
27:51 - up is some particles when we destroy
27:53 - stuff and we kind of need to make this
27:57 - game actually into a game because
27:59 - currently it's very much only for
28:00 - testing so there's plenty of stuff to do
28:03 - yeah that was pretty much it for hit
28:06 - today's video that was quite a long one
28:08 - I hope
28:09 - and I'll see you in the next one