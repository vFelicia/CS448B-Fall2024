00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to the
00:05 - fourth episode in going 2D today we'll
00:08 - be taking a look at making our ball and
00:11 - make it jump around the screen so uh but
00:14 - before we go ahead and get started I
00:16 - just want to quickly plug a couple of
00:18 - wallpapers I made you can see the first
00:20 - one on my desktop here and then also
00:24 - just a bracky logo wallpaper a lot of PE
00:28 - people requested me to make some some
00:30 - wallpapers so I thought I would go ahead
00:31 - and do it uh so you can get them at
00:34 - brack.com
00:35 - wallpapers that's a secret Ur So just
00:38 - type it directly in there and you can
00:40 - download the zip file in HD cool so
00:44 - let's always uh as always open up
00:48 - unity and uh what we're going to go
00:50 - ahead and do first is we're going to
00:52 - import the Sprite uh that will uh be our
00:55 - ball so if I just quickly minimize this
00:59 - go into the 2D assets pack again
01:01 - available at bra.com uh and under the
01:04 - pwn game under individual Sprites we
01:07 - have the ball so let's just drag that on
01:10 - to Unity and release it in the project
01:13 - Pane and now when we select it here we
01:16 - can see that all of the settings are
01:18 - already set up like we want them to so
01:21 - now we can just go ahead and drag our
01:23 - ball into the scene view I'm just going
01:25 - to drag it pretty much in the center
01:27 - here and uh what we can do is we can uh
01:31 - first off add some components so the
01:33 - first thing we want to add is the
01:35 - physics to the circle collider and so we
01:38 - will just scale it down by adjusting the
01:40 - radius to something like
01:42 - [Music]
01:45 - 0.23 that looks pretty good and uh when
01:48 - we play the game now the ball is just
01:51 - static we want it to actually uh act in
01:55 - physics space so let's hit add component
01:58 - physics 2D and add a rigid body 2D which
02:02 - will allow us to make it actually jump
02:04 - around so now when we hit
02:06 - play we can see that it falls and it
02:08 - just sits there uh so basically what we
02:12 - want to do is first off we want it to be
02:13 - set to fixed angle we are going to kill
02:16 - the angular drag set that to zero the
02:19 - gravity we're going to kill that in a
02:21 - sec also but first off let's set the
02:23 - mass to
02:25 - 0.1 just because we don't really want
02:27 - the mass to have an effect on anything
02:30 - uh then what we're going to do is we're
02:32 - going to go down here in the project
02:34 - Pane and we're going to create a physics
02:36 - 2D material and we're going to call this
02:40 - uh ball
02:41 - bounce and uh what this will do is it
02:44 - will allow us to adjust some properties
02:48 - for how this uh ball will act uh in
02:51 - physics space so basically we can kill
02:54 - off its friction so that it won't um be
02:58 - affected by
03:00 - uh basically it won't slow down is what
03:02 - it's going to ultimately mean uh and
03:05 - then we're going to set the bounciness
03:06 - to one uh so that it will bounce off
03:09 - everything it hits and now when we hit
03:12 - play uh we should oh yeah we need to
03:14 - apply it first so select the ball drag
03:17 - on the ball bounce under the material
03:20 - under the circle collider and now hit
03:23 - play and we can see the ball bouncing
03:26 - just beautifully if you want to know
03:28 - more about CIS and rigid bodies and
03:31 - physics materials you can go ahead and
03:33 - watch uh the um mastering Collis
03:36 - tutorial I made uh a while
03:39 - ago cool so what we can do now is we can
03:42 - just uh turn off the gravity scale so
03:45 - set that to zero and uh I think we are
03:48 - ready to create our bow script so let's
03:52 - just uh go ahead and
03:55 - rename uh no actually let's just make
03:58 - the script sit on the ball and then we
04:02 - can handle spawning it through the GM
04:05 - object and uh yeah so let's just start
04:07 - out by making a ball script so let's
04:10 - select the ball hit new script and call
04:13 - this ball
04:16 - control and create an ad let's double
04:19 - click it to open it up in mono
04:21 - [Music]
04:23 - develop here it is and let me zoom in so
04:25 - you can see this better so we can m no
04:29 - actually let's keep the function update
04:31 - because we're just going to rename it so
04:33 - in the function St we first off want to
04:37 - um start the ball we want it to uh start
04:42 - uh traveling in a random Direction so if
04:45 - you have played old school pong you will
04:48 - notice that um once the game starts it
04:50 - shoots out to a random side so what we
04:54 - can do now is we can use a random number
04:58 - to affect which side side it goes goes
05:00 - to so we can use for example
05:03 - random. range there are a lot of random
05:07 - things we can uh call in here so we can
05:10 - use random. range and this will make a
05:15 - uh float uh object or a float value
05:19 - between the minimum and maximum values
05:22 - you you put in so if we do like
05:25 - zero and just let's just do zero Z and
05:30 - one uh we can say that
05:33 - if uh actually let's make this into a
05:36 - variable sorry I'm cling so variable and
05:39 - then random number equals random. range
05:44 - 0 to one and then we can go in here in
05:47 - an if statement and say if random
05:51 - [Music]
05:53 - number is uh less than or equal to
05:58 - 0.5
06:03 - then we wanted to shoot out in One
06:04 - Direction so debug.log
06:09 - shoot
06:12 - right and if it's not so
06:18 - else
06:22 - oops debug.log
06:26 - shoot
06:28 - left
06:30 - so now when we play this we should see
06:33 - that it randomly chooses a number uh or
06:37 - a direction to shoot so right now we've
06:40 - only gotten shoot right but in a sec if
06:42 - we keep on playing this we should get
06:44 - shoot left to appear
06:48 - Also let's see if we can get shoot left
06:50 - to appear for some reason this is not
06:53 - working so if it's less than or equal to
06:56 - 0.5 do we need this to be two
07:01 - that would be
07:02 - weird there it was
07:05 - left and
07:07 - right and
07:09 - left and
07:11 - left well it looks like we need this to
07:14 - be two yeah there's something about that
07:16 - actually random range can confuse you
07:20 - sometimes but okay it works now so let's
07:23 - just go with this it's really not that
07:25 - important it's just so it doesn't shoot
07:26 - out to the same exact side time so in
07:31 - here we're just going to put uh rigid
07:33 - body
07:35 - 2D do add
07:39 - force and then this needs a vector two
07:43 - so a vector two is just a variable
07:45 - storing two coordinates the X and the Y
07:49 - so we're going to do new Vector
07:52 - 2 and inside of this we are just going
07:54 - to do something like maybe 80 and 10
08:01 - this is just an estimate you could make
08:03 - variables for these so you can adjust
08:05 - them inside of unity but I think this is
08:07 - going to be just fine and let's just
08:10 - duplicate the same line down here and
08:12 - then make the 80 to into a minus 80 and
08:16 - the 10 into a minus 10 and of course you
08:20 - could make uh even more if statements
08:23 - you can make a switch uh so that there
08:26 - are more outcomes or you could just use
08:29 - the random that range directly to access
08:32 - the force but again it just gets too
08:35 - complicated we just want this working
08:37 - right so let's save this and hit play
08:42 - and we can see that our ball shoots out
08:45 - so it's acting just how we wanted to and
08:49 - uh yeah things are looking great but we
08:52 - have a problem and that is that the ball
08:55 - is currently very very predictable
08:57 - because in some pong variation ations if
09:00 - I uh if you move upwards while colliding
09:03 - with the ball you will change the um uh
09:08 - the direction of the ball just a bit but
09:10 - right now it doesn't matter which way we
09:12 - are um moving the ball will jump the
09:15 - same no matter what and so these
09:17 - patterns uh that are very easy to
09:19 - predict will uh start
09:22 - appearing so I think we should go ahead
09:24 - and change that and it's it's pretty
09:26 - much a decision whether or not you want
09:28 - to do it um but I think it makes it a
09:30 - little more fun so let's go ahead and do
09:34 - function on
09:36 - collision enter 2D and this will get
09:40 - called whenever we collide with
09:42 - something uh it will that is two
09:45 - dimensional it will get called one
09:47 - time and what we want to do is in here
09:50 - we want to pass some uh variables so we
09:52 - want to basically store some information
09:56 - about the collision and we could call
09:58 - this the call the call info let's
10:02 - actually call it call info for collider
10:04 - information and uh it's going to be a
10:07 - type Collis
10:09 - 2D remember to put a 2d there or you
10:12 - will get an
10:14 - error cool so what we can do now is we
10:16 - can first off check that we have hit the
10:18 - player so let's do if call info.
10:22 - collider the one we collide with tag is
10:26 - equal to player
10:34 - then we want something to happen so
10:35 - let's just do a debug.log
10:38 - it's
10:41 - working and then exit out of this and we
10:46 - will go into unity and we will remember
10:49 - this time to select both our players or
10:52 - you can select the prefab uh in the
10:55 - project paint so this is actually pretty
10:56 - handy because if we were to select let's
10:59 - see our player
11:00 - two and then change it its uh its tag
11:04 - and hit apply we would also apply the
11:07 - move up and down keys and that's not
11:10 - something we want so instead we can go
11:12 - into the prefab in the project Pane and
11:15 - change the values here and they will
11:17 - both automatically update so uh for the
11:20 - tag we'll select the pre prefab go to
11:24 - tag select
11:26 - player uh it will automatically be there
11:29 - if not you can go ahead and hit add tag
11:32 - and you can just type it in there and
11:34 - then afterwards select it great so let's
11:38 - hit play now and once it hits our player
11:41 - we get to see it's working in the
11:44 - console so that's just perfect but you
11:47 - uh might notice that once our ball hits
11:49 - our players they get pushed so uh to
11:53 - change this we can go ahead and select
11:56 - again our player pre preab and we can
12:00 - just bump up the mass quite a bit and
12:03 - this is an easy solution uh but one
12:05 - thing we would want to do also um is go
12:09 - under the player controls and we're
12:11 - going to lock in our prision uh we can
12:14 - also go under the uh con uh normally
12:18 - when when it comes to rigid bodies you
12:20 - have some constraints as to where you
12:23 - want them to move uh but it's not in the
12:25 - 2D rigid bodies yet so instead we're
12:28 - going to open up the um player control
12:31 - script here and then in the function
12:35 - update we simply want to set the um the
12:39 - x velocity to zero so we just do rigid
12:44 - body
12:48 - 2D
12:50 - velocity. x equal 0 and this will mean
12:54 - that
12:57 - our okay so this will mean that our
12:59 - players will stay in place so now when
13:02 - the ball hits they do nothing they move
13:05 - a tiny tiny tiny bit uh but then they
13:09 - the next frame they will just snap into
13:11 - place again so it really doesn't
13:13 - matter cool uh so where were we guys uh
13:18 - our ball is moving and it's colliding
13:21 - and everything is great okay so we want
13:24 - it to be affected by velocity so instead
13:29 - of the its working statement let's go
13:31 - ahead and type
13:33 - VAR velocity y or just v i because this
13:37 - is the name of the variable and this is
13:40 - going to be equal to rigid body 2D do
13:45 - velocity doy so I just want to store it
13:48 - as a variable so you can easily access
13:50 - it then we're going to do v i so the uh
13:54 - the Y velocity of the R Body of our ball
13:58 - is going to be equal to and uh here we
14:02 - could just set it directly to the
14:04 - velocity of the player but I didn't
14:07 - really I don't really think that uh was
14:09 - that great so instead I did this to make
14:12 - a mix out of the two so I mix in the
14:15 - velocity of the ball and mix in the
14:17 - velocity of the player and uh I think
14:19 - this is working pretty great so what I
14:21 - did was I took half the velocity of the
14:24 - Y and plus the collider do
14:29 - collider uh or not the collider I mean
14:32 - collider
14:33 - info.
14:35 - collider rigid body
14:37 - Tod do velocity doy okay and divide that
14:42 - by three uh so half the velocity y plus
14:47 - the a third of the uh velocity of the
14:50 - player uh I found that to be a pretty
14:53 - great match and now if we hit save and
14:58 - go back into to Unity you will notice
15:01 - that we can affect the velocity of the
15:03 - ball by moving up and down so if I can
15:06 - just get it to work so if I stay still
15:09 - and don't really move the ball should
15:12 - slowly cancel out its
15:16 - velocity so if we can get this to slowly
15:20 - just is this
15:22 - working actually I don't think this is
15:24 - working okay so I'll just go ahead and
15:26 - and quickly turn off the uh the record
15:28 - recing and I'll see you in a
15:30 - second okay so I'm back I'm sorry for
15:33 - the smaller confusion there and uh of
15:36 - course as always when you look through
15:38 - code you uh suddenly just find something
15:41 - that is insanely stupid and I did
15:44 - something insanely stupid so basically
15:46 - what what I did was I made a new
15:49 - variable uh which I just declared um as
15:52 - a float value and then I just changed
15:55 - that and the rigid body 2D the velocity
15:59 - didn't really update so we basically
16:01 - just changed this value and not the
16:04 - value we actually wanted to change there
16:06 - are a couple of ways to solve this the
16:08 - easiest of which is just to forget this
16:11 - variable declaration copy the rigid body
16:14 - 2. velocity doy in place of the Velocity
16:19 - doy here and then just delete this and
16:23 - now everything should be working and we
16:25 - can also delete our debug.log statement
16:28 - so now when we go ahead and hit
16:30 - play uh we should see that if we don't
16:34 - move at all yeah the uh the wire
16:37 - movement on of the ball cancel uh
16:40 - cancels out but if we then uh give it
16:43 - some momentum you can see that we can
16:46 - affect the traveling Direction so this
16:48 - is great because it uh it's more like
16:51 - the modified version of P which I really
16:53 - like and uh it makes the game a lot more
16:56 - exciting because you can actually try to
16:59 - score um score goals cool so right now
17:03 - you will notice that when we hit the
17:05 - left and right walls uh nothing happens
17:08 - so I guess that's going to be the
17:10 - objective for next time so we're going
17:13 - to handle scoring yay so thanks for
17:15 - watching and I'll see you in the next
17:17 - [Music]
17:27 - video