00:00 - in this video we'll have a look at how
00:01 - to create power-ups in unity not much to
00:02 - say about that so let's just jump into
00:04 - it so when it comes to making a powerup
00:05 - it can really be split up into three
00:07 - stages first we have some kind of object
00:09 - that will register whenever a player
00:11 - gets near it
00:12 - then when he picks it up we apply some
00:14 - kind of effect to our player this could
00:16 - be making him bigger give him more
00:18 - health or give him a new gun and then
00:20 - finally we create some cool particles
00:22 - and remove our powerup from this scene
00:24 - let's start by focusing on the first
00:26 - step so as you can see I have a scene
00:28 - here in unity where we can move around
00:29 - our player and the first thing that we
00:31 - want to do is create a powerup for him
00:33 - to pick up now you can really use any
00:34 - model here I've created a simple one in
00:36 - blender so here it is in unity all we
00:38 - need to do is drag this into the scene
00:40 - I'm gonna focus on it in the scene view
00:42 - and I'm gonna drag it down here I also
00:44 - want to make sure to apply the proper
00:45 - materials so I'll drag in the center
00:47 - here so now we have a simple model that
00:49 - we can apply our script to let's select
00:51 - our powerup that's it add component and
00:53 - the first thing that we want to add is
00:55 - some way for unity to detect whether or
00:57 - not we're colliding with other objects
00:58 - so we'll of course create a sphere
01:00 - Collider will open this up and we can
01:02 - now adjust the radius to whatever we
01:03 - want I'm gonna make it a bit smaller
01:05 - than the model I find this often looks
01:07 - the best let's also make sure to mark
01:09 - this Collider as a trigger this way
01:11 - other objects won't actually collide
01:13 - with a powerup
01:14 - but our powerup will still be notified
01:15 - whenever an object is near so now we
01:17 - should be able to play the game and of
01:19 - course whenever we collide with our
01:20 - powerup nothing currently happens to
01:23 - change this let's go and add a new
01:24 - component let's create a custom script
01:26 - called powerup let's make new script
01:29 - it's like c-sharp and they create an ADD
01:30 - and let's double click to open it up in
01:32 - visual studio now we can go ahead and
01:33 - delete both the start and update method
01:36 - instead we want to be using another
01:37 - callback method used by unity I'm
01:39 - talking about ontriggerenter so that's
01:42 - right void on trigger enter and you have
01:45 - to spell it the exact same way that I
01:47 - did here in order for it to work well
01:49 - then open and close some parentheses and
01:51 - the curly brackets now this method is
01:53 - called by unity whenever another object
01:55 - enters or trigger I'm gonna actually get
01:57 - some information about the object do
01:59 - that we go up here and write collider
02:01 - because we want to know more about the
02:03 - collider we hit and we can then call
02:04 - this Collider other then we want to make
02:06 - sure that whatever entered our trigger
02:08 - is a player to that we could use the
02:10 - tack of the collider so if we write if
02:13 - other dot compared tag we can check if
02:16 - the tag of the collider is player and if
02:19 - it is well then we are ready to go ahead
02:20 - and pick up our powerup will make a
02:22 - separate method for that down here void
02:24 - pickup and this is of course where we'll
02:26 - actually pick up a powerup so now we've
02:28 - actually taken care of the entire first
02:31 - step we have a function that gets called
02:32 - whenever we collide with something we
02:34 - check if that something is the player
02:36 - and if it is we go ahead and call the
02:38 - pickup method then we'll take care of
02:39 - the second and third step inside of this
02:41 - method for now we'll just write debug
02:43 - the lock powerup picked up just a little
02:47 - self note that this is working let's now
02:49 - save this go into unity and now we of
02:52 - course want to make sure that our player
02:53 - is also tagged as player to do that you
02:56 - go to the tag here at the top and you
02:58 - make sure to select player if you want
03:00 - to use a custom tag we go and do your
03:01 - add tag and you can add any tag that
03:03 - you'd like here if we then go back and
03:05 - select the player we can now use that
03:06 - tag so now we should see that when we
03:09 - hit play and move into the powerup
03:11 - it says powerup picked up of course
03:13 - nothing else happened but that marks the
03:15 - end of step one next up we'll focus on
03:17 - step three which is spawning some cool
03:19 - particles to let us know that something
03:21 - happened as well as removing the power
03:23 - up from our scene to do that let's go
03:24 - into our code and the first thing that
03:26 - we want to do here is spawn a cool
03:28 - effect we then want to apply some kind
03:30 - of useful effect to the player and
03:32 - finally we want to remove the power up
03:35 - from our scene and the first and last
03:36 - part is actually super easy it's the
03:38 - exact same method we use to in creating
03:40 - a hand grenade
03:41 - if you haven't checked out that video I
03:42 - definitely recommend you do to remove
03:44 - the powerup object we simply call it
03:46 - destroy and we input a game object which
03:48 - means the powerup itself to create a
03:50 - cool effect we first need a reference to
03:52 - the effect to do that we'll go to the
03:54 - top here and create a public game object
03:56 - let's call it pickup effect then inside
03:59 - of our pickup method will instantiate
04:00 - the pickup effect at our current
04:03 - position so transformed our position and
04:05 - using our current rotation so
04:06 - transformed rotation if we now save this
04:09 - go into unity select our powerup we now
04:12 - see that we have an empty slot for the
04:14 - pickup effect now I'm using the Unity
04:16 - particle pack that you can get free of
04:17 - the asset store I'll of course have a
04:19 - link for that in the description so if
04:21 - we're now going here we can search for
04:22 - the different effects in the pack and
04:23 - I've taken one of these effect and
04:25 - modified them a bit too
04:26 - a cool power pickup effect I haven't
04:29 - done too much I've basically just
04:30 - switched around a few colors so if we
04:32 - now hit play and try and pick up the
04:34 - powerup we can see that it disappears in
04:36 - a cool puff of lightning and smoke and
04:38 - everything so cool but of course our
04:40 - player is still just as good as he was
04:42 - before which of course brings us to the
04:44 - second step adding effects to our player
04:46 - and we look how happy is and we've
04:48 - already pinpoint the place in our code
04:50 - where we can do this and of course this
04:52 - part is going to completely depend on
04:54 - what you want to modify about your
04:56 - player I'm gonna show you a couple of
04:58 - examples say we wanted to make a player
05:00 - bigger well in that case would go in
05:02 - here and we'd first need a reference to
05:05 - our player up here in our ontriggerenter
05:07 - we actually have a reference to our
05:08 - player and that's the other variable but
05:11 - down here that's disappeared so we need
05:13 - some way to pass this other variable
05:15 - into a pick up method so that we can use
05:17 - it down here to do that we'll use a
05:19 - function argument so just like we write
05:21 - collider other up here we can now write
05:23 - Collider and we could call it other here
05:26 - as well but I think we should call it
05:28 - player instead since at this point we
05:30 - know it's a player and then here when we
05:31 - call our pick up method we'll simply say
05:33 - that our player should be the audio
05:35 - object this way we are taking something
05:37 - from one function and passing it on to
05:39 - the next and now inside of our pickup we
05:41 - can simply use player transform the
05:43 - local scale to modify the scale of a
05:45 - player and I want to go ahead and
05:47 - multiply it by some value and instead of
05:49 - hard-coding this in let's go to the top
05:51 - here and create a variable for this
05:53 - let's create a public float called
05:55 - multiplier I will just default this to
05:58 - something like 1.4 then in our pick up
06:00 - method we can simply write multiplier so
06:02 - now after instantiating our particles we
06:05 - should see that our player gets 40%
06:06 - bigger and then we move on to destroying
06:08 - the powerup object let's try and save
06:10 - this and if we now play and pick up our
06:12 - powerup we can clearly see our player
06:14 - gets bigger awesome but of course you
06:16 - might not always want to just make your
06:18 - player bigger say if we wanted to change
06:20 - some stats on on player so just give him
06:22 - more health well let's have a look at
06:24 - how to do that in this case we would
06:25 - probably have some kind of script
06:26 - sitting on the player called player
06:28 - stats then I've gone ahead and created a
06:30 - very very simple player stat script if
06:32 - we open this up all that you seen here
06:34 - is currently a public float storing the
06:36 - amount of health our player has now this
06:38 - is of course a ridiculous
06:40 - example but the main thing that we need
06:42 - to worry about right now is how to make
06:43 - this health bigger using our power well
06:45 - since this player stats component
06:47 - actually sits on a player object we can
06:49 - simply use dot get component of type
06:52 - player stats in order to get a reference
06:54 - to it we can then store this reference
06:56 - inside of a player stats variable that
06:59 - will call stats and now we can use stats
07:01 - dot health in order to modify this
07:04 - variable and just like we did before we
07:06 - can simply multiply it by our multiplier
07:08 - variable so now we should see that our
07:10 - health go from the default 100 all the
07:13 - way up to 140 if we save this and go
07:16 - into unity and hit play we can keep a
07:19 - look at our health variable over here
07:20 - and we're now now into the powerup we
07:23 - can see that it pumps right up to 140
07:25 - that's how you can make changes to your
07:27 - player by picking up these power-ups but
07:29 - often you don't want these changes to
07:30 - last forever
07:31 - it's very common for power-ups to only
07:33 - last X amount of seconds when that case
07:36 - will need to go in and modify our script
07:37 - what we need to do is go in here and
07:40 - wait X amount of seconds we then need to
07:44 - reverse the effect on our player and
07:48 - then we can go ahead and destroy the
07:50 - game object well this is actually fairly
07:52 - simple in order to reverse the effect on
07:54 - our player all we need to do is go in
07:55 - here and say stats dot health and this
07:57 - time instead of multiplying by a
07:59 - multiplier we'll simply divide by our
08:01 - multiplier and now our health should be
08:04 - back to normal but in order to wait X
08:06 - amount of seconds we actually need to
08:08 - change this method from an ordinary
08:10 - function that returns nothing into what
08:13 - we call a co-wrote team because
08:15 - carotenes allows us to pause and wait if
08:17 - you've never dealt with kuroh teams
08:19 - before you might find that the syntax is
08:20 - really weird and that's probably because
08:22 - it is but for now just write after me so
08:25 - we'll go and replace void here with I in
08:28 - numerator and now we've actually marked
08:30 - this as a current team then when we call
08:33 - the method up here we need to add a tiny
08:34 - bit of extra code and that is the start
08:37 - co-routine function and the kuroh team
08:39 - that we then want to start is our pick
08:42 - up method so we need to wrap this in two
08:44 - parentheses and now we've actually set
08:46 - up a karate now all we need to do is go
08:48 - in here and tell it to wait to do that
08:50 - we'll use yield return
08:53 - new wait four seconds and then inside of
08:57 - these two parentheses we specify the
08:59 - amount of seconds that we want to wait
09:00 - we can wait one second two seconds three
09:02 - seconds you get the idea and of course
09:05 - we want a wait time to be specified by
09:07 - our variables let's go up here and
09:08 - create a public float called duration
09:12 - and set it equal to something like four
09:14 - seconds by default then we'll input our
09:17 - duration
09:17 - down here and this should actually work
09:20 - however there's one slight problem if we
09:22 - now save this and go into unity and hit
09:25 - play you'll see that when we pick up our
09:27 - powerup it does change our health but
09:29 - our powerup is still visible until of
09:32 - course the duration runs out and then
09:33 - finally our powerup disappears but we
09:36 - have to wait until we've done all of
09:37 - this stuff before we can destroy our
09:39 - game object so what we'll do here before
09:41 - we wait is simply disable all the
09:43 - graphics on a powerup as well as the
09:45 - colliders so that we can't collide with
09:47 - it again this is way to do this is get
09:49 - the two components I'm of course talking
09:51 - about the mesh renderer as well as the
09:53 - collider to do that we'll use scape
09:54 - component of type mesh renderer as well
09:57 - as gate component of type Collider and
10:00 - now we can simply use dot enabled in
10:03 - order to change the state of these two
10:04 - components and we'll of course set
10:06 - enable to false make sure to do this for
10:08 - both of them so now we should see our
10:10 - powerup gets disabled as soon as we pick
10:12 - it up for the final time that save this
10:14 - hit play and we should now see that as
10:16 - soon as we pick up the powerup it
10:18 - disappears
10:18 - our health goes to 140 and after four
10:21 - seconds it changes back to 100 and there
10:24 - we go we now have a powerup system
10:26 - implemented inside of our game that's
10:28 - pretty much it for this video if you
10:30 - enjoyed it make sure to subscribe so
10:31 - don't miss a future one thanks for
10:33 - watching and I will see you in the next
10:34 - video thanks of the awesome patreon
10:36 - supporters who donated in October and
10:38 - especial thanks to do teaming armen
10:40 - hence off-tune Kookaburra superman the
10:42 - great James P Thomas Wally
10:44 - Sybok mommy Jason the Tito Derek James
10:47 - Kirk faithful Murphy Manolis Nick Lang
10:49 - Aaron Robert bond and Peter Locke you
10:52 - guys Rock