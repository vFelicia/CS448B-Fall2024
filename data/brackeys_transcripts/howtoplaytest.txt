00:00 - ♪ I have a gaming ♪
00:02 - ♪ I have game dev ♪
00:04 - ♪ Uh ♪
00:05 - ♪ Playtesting ♪
00:07 - (men laughing)
00:09 - - Not long ago, we made a
video on how to game jam.
00:12 - And in that video,
00:13 - we talked about how
important it is to playtest.
00:16 - And a lot of you asked
about more information.
00:18 - So in this video, we will dive
deeper into the playtesting.
00:22 - So playtesting is a crucial
part of game development.
00:25 - No matter how good your
idea and design is,
00:27 - you can never totally predict
how your game will feel
00:29 - in the player's hands.
00:31 - So you will have to play test a lot.
00:33 - And in many stages of development.
00:35 - I also think that
playtesting is super fun.
00:38 - After all, it's the moment
00:39 - where you get to see all
your hard work come to life.
00:41 - Exciting and nerveracking.
00:44 - Also, as most of you
probably know at this point,
00:46 - I love game jams. And
part of the reason why
00:49 - is that it's a way for you
00:50 - to test out a bunch of
ideas really quickly.
00:52 - It's a constant cycle of
prototyping and playtesting,
00:55 - and honestly, it's a philosophy
00:57 - I've applied to all of
my other game projects.
00:59 - So with that said,
01:00 - let's jump into the playing and testing.
01:02 - But first, this video
is sponsored by Unity
01:04 - and the tool, Unity Game Simulation.
01:06 - Unity Game Simulation
allows you to automate
01:08 - different aspects of playtesting
01:10 - that focuses on game
experience, like game balancing,
01:13 - economy balancing, and level progression.
01:15 - While human play testers
are great for feedback
01:17 - on fun factor and feel,
01:18 - this tool is especially
great for exploit hunting,
01:21 - which we will talk more
about later in this video.
01:23 - With Unity Game Simulation,
01:25 - you can run through multiple
levels of gameplay within hours
01:28 - while automatically keeping track
01:29 - of the desired game metrics.
01:31 - Take, for example, the
Canadian game studio, Furion.
01:33 - they were able to balance
their whole weapon system
01:36 - in just three days.
01:37 - They condensed the equivalent
of 165 million playthroughs
01:40 - into just 10 efficient simulations,
01:43 - saving them around 600
hours of development time.
01:45 - So if this sounds interesting to you,
01:47 - check out the links in the description
01:48 - to read more and get started.
01:50 - So before we get into
the playtesting itself,
01:52 - we first have to figure out
when to playtest our game.
01:55 - And I would say,
01:56 - start as soon as you
have a working prototype,
01:58 - you really cannot test too early,
02:00 - because you don't want
to spend a lot of time
02:02 - just to figure out that your
current gameplay isn't fun.
02:04 - I made this mistake with
my jam game, "Farm Alarm",
02:07 - I waited until the last
minute before playtesting,
02:10 - which was a super bad idea.
02:12 - I was lucky though, because
the game worked as intended
02:15 - and I only needed to
tweak a few parameters,
02:17 - but it could just as easily
have been a total disaster
02:21 - and way too late to fix.
02:22 - So as soon as you have a cube
moving around in a level,
02:25 - and maybe some enemies
or puzzles, go for it.
02:28 - Have someone test it
or try it out yourself.
02:30 - This also plays into my
philosophy of basics first.
02:33 - This is something I've learned
02:34 - from all the game jams
I've participated in.
02:37 - I always try to boil my games down
02:39 - to the most essential parts
and focus on that first.
02:41 - This allows you to quick to get an idea
02:43 - of how the game is working
02:44 - before focusing on all the details.
02:46 - Plus it makes it way
easier to change direction
02:49 - without it hurting too much,
02:50 - because you haven't
spent a lot of time yet,
02:52 - but who should you pick
to try out your game?
02:54 - This is actually something
02:55 - that I wouldn't worry too much about
02:57 - because pretty much
anyone can play your game
02:59 - and provide valuable feedback.
03:01 - If they can handle the
basic controls of your game,
03:03 - they can play test it.
03:04 - And it's a good idea to get as
broad of a crowd as possible.
03:07 - Everything from experienced players,
03:09 - who are good at the genre you're making,
03:11 - to more casual ones.
03:12 - Good candidates, depending on
the game of course, are kids,
03:16 - they are both very brutally honest
03:19 - and more immediate in their reactions.
03:21 - But you will, of course also
have to playtest the game
03:24 - a bunch yourself.
03:25 - Keep in mind though,
03:26 - that if you think the
difficulty is just right
03:29 - when you're playing it,
it's probably way too hard.
03:32 - Remember that you made the game
03:34 - and know how everything works.
03:36 - So you know all the tips and tricks
03:38 - that other players have to learn first.
03:40 - But of course, playtesting
isn't just playtesting.
03:43 - You can play a game in different ways,
03:45 - focusing on different aspects.
03:47 - Here's some of the playtests
that I have used in the past
03:50 - that should work on most genres.
03:52 - Number one, playtest with focus.
03:54 - Here, you are playtesting a
specific part of your game.
03:57 - Stuff like movement,
difficulty, enemies, and so on.
04:00 - If you want to know how
jumping feels in your game,
04:02 - you could make a level
04:03 - that completely isolates that mechanic
04:06 - to figure out how it feels
04:07 - with as few distractions as possible.
04:09 - Number two, blind playtesting.
04:11 - Here, just observe the player
doing whatever they want.
04:14 - This is a great way to playtest
04:16 - because you might find stuff
04:17 - that you would have never thought of,
04:18 - like game-breaking tactics and
exploits, or new mechanics.
04:22 - While testing my jam game, "Soul Surge",
04:23 - I found out that you
could ignore all enemies
04:26 - if you simply ran from
one room to another,
04:28 - which of course wasn't intentional.
04:30 - So I made sure that the doors were locked
04:32 - until the player defeated
all enemies in the room.
04:35 - And number three, exploit hunting.
04:37 - Here, the playtester
tries to break your game
04:39 - and discover clearly superior tactics.
04:41 - Here, you'll find out if your
walls and doors actually work.
04:45 - And if you have physics in your game,
04:46 - this is a particularly important step
04:48 - because they probably won't.
04:50 - In fact, I have a few examples of exploits
04:52 - that I didn't manage to fix myself.
04:55 - Two almost identical ones, actually,
04:57 - because I never learn.
04:59 - In my jam game, "Shrinking Planet",
05:01 - players quickly figured out
that just driving straight
05:03 - was the superior tactic,
05:05 - because what are the chances
05:06 - that a meteor will spawn
directly in your path?
05:09 - (cricket chirping)
05:10 - This makes for some very boring gameplay,
05:12 - both to watch and play,
05:15 - and it could have been easily fixed
05:16 - by just throwing a meteor
in front of the player
05:19 - if he kept driving in the same direction.
05:21 - The other example is from another
jam game, "Sugar Warrior",
05:24 - in this game, the
enemies spawn in a circle
05:26 - around the player,
05:27 - this, together with
how the AI was handled,
05:29 - led to the clearly superior
and equally boring strategy
05:32 - of just driving in one direction
and shooting backwards.
05:36 - This could have easily been
fixed in numerous ways,
05:38 - like adding level boundaries or obstacles,
05:41 - or just shifting the spawn circle
05:42 - in the direction of travel.
05:44 - And painfully, I was actually
aware of these issues
05:46 - before the deadline, but
it was too late to fix,
05:49 - which of course could have been avoided
05:51 - with more thorough playtesting earlier on.
05:53 - And remember, most of the time
05:55 - when people are playing your game,
05:56 - it's a good idea to just
step back and observe.
06:00 - You'll probably have an
urge to step in to help
06:02 - or to defend your work,
because it's not done yet
06:05 - and, "Oh, that door will
work in a later build."
06:08 - And, "If you just press E instead of D,"
06:10 - but try to contain yourself.
06:12 - Every time you intervene,
06:13 - the player is taken out of the experience.
06:16 - And in the real world,
06:17 - they won't have you there
as a guide to help them.
06:19 - You get the best results by
simply having the players
06:21 - figure it out by themselves,
06:23 - even though it might
mean that they get stuck
06:25 - for a very long time.
06:27 - And if you have to help,
06:28 - maybe try making the players
06:29 - come up with the answer themselves,
06:31 - instead of giving it to them directly.
06:33 - Asking questions like,
06:34 - "So what are you trying to achieve?"
06:35 - Or, "What does that spell do?"
06:37 - is often enough for the
player to figure it out.
06:40 - And it gives you a good idea
06:41 - of what their thought process is.
06:43 - And of course,
06:44 - make sure to write everything
down with timestamps.
06:46 - When does the player get stuck?
06:48 - How fast were they on this section?
06:50 - Did they do something
that wasn't intended?
06:52 - Do they understand the mechanics?
06:53 - You really cannot get too much data here.
06:56 - And perhaps take a bit of time
afterwards to interview them.
06:59 - "What was your favourite part?"
07:01 - (mumbles)
07:02 - "Did you find something interesting?"
07:04 - (mumbles)
07:05 - What was your favourite
part and what was hard?
07:09 - Yes.
07:10 - You might not be able to use
everything that you gathered,
07:12 - but sometimes there's this one thing
07:14 - that just changes everything. Yes.
07:17 - Another way to take notes
07:18 - would be to programme it into your game.
07:20 - In fact, with modern tools,
07:21 - you can add all kinds of analytics.
07:24 - Time spent per level, aim precision,
07:26 - variety of weapons used,
deaths, hidden treasures found,
07:30 - and so much more.
07:31 - If you're using Unity,
07:32 - there's a tool built in for this,
07:34 - called Unity Analytics, that
sets up a lot of it for you.
07:37 - This, however, shouldn't
substitute manual testing,
07:40 - because subjective feedback
is just as important.
07:43 - Now, sometimes, testers
might make comments
07:46 - or suggestions that completely oppose
07:48 - what you originally intended.
07:50 - This happened to me while
designing "Detective Truth".
07:53 - People around the office kept telling me
07:55 - that it was really frustrating
(man grunting)
07:56 - that they had to start all
over every time they died.
07:59 - But my initial idea was to
make kind of a rage game
08:02 - that was hard and that kind of
played into the frustration.
08:06 - So I just kind of brushed it off.
08:07 - But of course, after submitting,
08:09 - almost all the feedback I got
08:11 - said that the game was too frustrating.
08:13 - (man grunting)
08:14 - So I should have probably
just listened to the feedback
08:15 - and found some kind of middle ground.
08:17 - I could, for example, have made it
08:19 - so that you have three lives
that lead to a checkpoint
08:21 - before having to start all over again.
08:23 - There are many ways
08:24 - that I could have kept
the original intention
08:26 - and still taken some of the
feedback into consideration,
08:29 - but mostly, I just had to
stop being so stubborn.
08:32 - Playtesters can also sometimes
discover new mechanics
08:35 - that you can reiterate on.
08:36 - Many cool features in my games
08:38 - have come from me or someone
else stumbling upon a cool bug
08:41 - that then ended up as a feature.
08:43 - I mean, just look at bhopping
and surfing in Counter-Strike.
08:46 - A guy who makes a weird custom
map with a slanted rooftop,
08:49 - and suddenly, a game dedicated to surfing
08:52 - is being developed.
08:53 - Disclaimer, I know that this is a bug
08:55 - that predates the source
engine and Valve itself
08:56 - because it is based on Goldsource,
08:57 - which is a heavily modified
version of the old Quake engine,
08:58 - but more people know about
bhopping in Counterstrike
08:59 - than a 20 year-old shooter, so
it makes for a good example.
09:01 - Yes.
09:02 - While play-testing Date
Night, for example,
09:03 - I quickly discovered
that many of the levels
09:06 - could be solved in ways
that I hadn't intended.
09:08 - Maybe you could reach a platform
that I hadn't considered,
09:10 - or just solve the puzzle in a
way that I hadn't thought of.
09:13 - And that really left me with
two options, force or embrace.
09:18 - Force, meaning that I would
force my original idea
09:20 - by going back and changing levels,
09:22 - making walls higher and moving
obstacles out of the way
09:25 - so that you could no longer reach them.
09:27 - The other way is to embrace it
09:29 - and try to fit it into
the game in some way.
09:31 - This is the, "It's not a bug,
it's a feature" approach.
09:34 - In my case, this would
mean keeping the levels
09:36 - as they were, with multiple solutions,
09:38 - or making new levels
09:39 - that took these alternate
routes into account.
09:42 - What I ended up doing was a bit of both.
09:44 - Some of the puzzles were tweaked
09:45 - so that only my original solution worked,
09:47 - while alternate routes
ended up as new levels.
09:50 - I see this as a win-win,
09:52 - original idea intact and more levels.
09:54 - - [Both] Nice.
09:55 - - So playtesting can
save you a bunch of time
09:58 - when developing your game.
09:59 - Even though it sounds counterintuitive,
10:01 - spending time will save
you time in the long run.
10:04 - Design flaws catched early in development
10:06 - will always be easier to fix,
10:08 - because levels and systems
10:10 - haven't been built around them yet.
10:12 - Imagine changing the size
and jump height of Mario,
10:15 - just before release. That's
a lot of levels to change.
10:18 - I mean, AAA studios even
have entire QA teams
10:21 - dedicated just to playtesting.
10:23 - And it's also getting common
10:24 - to see beta and even alpha tests of games
10:27 - long before they're released,
10:28 - because playtesting is
just that important.
10:31 - And that's pretty much it for this video.
10:33 - If you enjoyed it, make sure to subscribe
10:35 - and ring that notification bell
10:36 - so you don't miss the next one.
10:37 - Also, don't forget to check
out Unity Game Simulation.
10:40 - Save hours of development time
10:41 - by integrating game
simulation into a design flow
10:44 - by simply clicking the
link in the description.
10:46 - On that, thanks for watching
10:47 - and I will see you in the next video.
10:49 - Oh, and don't forget to playtest.
10:51 - Thanks to all of the
awesome patron supporters
10:53 - who donated in May, and a
special thanks to faisal marafie,
10:56 - Lost to Violence, Loved
Forever, Replica Studios,
10:58 - Nubby Ninja, SRT Mike, Jason Uritescu,
11:01 - Leo Lesetre, Piano
Sathornlak, Donatien Gascoin,
11:04 - Dante Sam, Jacob Sanford, Naoki Iwasaki,
11:06 - Marc-Antoine Girard, Gregory Pierce,
11:08 - Michail Korobov,
TheMightyZeus, Owen Cooper,
11:11 - Alison the Fierce,
Erasmus, and SiriusWolf.
11:13 - You guys rock.