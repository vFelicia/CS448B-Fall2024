00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to video number six in creating
00:05 - a tower defense game in unity today
00:07 - we're going to be focusing on something
00:09 - very essential to the game which is
00:11 - building turrets so without further ado
00:13 - let's just dig right into it you can see
00:15 - that I'm here in unity and what I want
00:17 - to focus on is each of these individual
00:20 - nodes so if we go ahead and find our
00:23 - prefab node prefab here under the
00:25 - prefabs folder let's go ahead and add a
00:28 - component to this cold node and let's go
00:31 - ahead and open this up in Visual Studio
00:33 - so the node script here is going to be
00:37 - responsible for groups let's do that one
00:39 - more time it's going to be responsible
00:41 - for keeping track of whether or not we
00:44 - have something built on top of that node
00:47 - it will also handle some user input so
00:50 - it will make sure to kind of highlight
00:53 - the node when we hover over it to give
00:56 - the user some visual feedback that he
00:58 - can actually press it and something will
01:00 - happen it will also be responsible for
01:02 - checking whether or not the player has
01:05 - pressed that particular node and then
01:08 - building something on top of it if not
01:11 - if something isn't there already so
01:13 - that's what we are going to be using
01:14 - this script for let's begin by making it
01:17 - clear to the user that he can build
01:19 - something here by creating a hover
01:21 - animation and the way we are going to do
01:23 - this is using void on Mouse enter and
01:29 - this is a callback function used by
01:31 - unity just like start or update or on
01:34 - collision and it's basically cold
01:37 - every time the mouse enters the confines
01:40 - of the collider of this object so every
01:43 - time the mouse just passes by or enters
01:46 - the collider this is going to be cold
01:48 - and it's only going to be cold once when
01:51 - you do that so it's not going to call
01:53 - continuously when you hover over and
01:55 - this makes it a great place to change
01:58 - the color of an object and the way we do
02:00 - this is by calling getcomponent and
02:02 - finding the renderer component that sits
02:05 - on our object that's this one right here
02:08 - and that's of course responsible for
02:10 - keeping track of our material so we can
02:13 - go ahead and
02:13 - our current material which is just the
02:15 - first one in the list here and because
02:17 - we only have one that's our default
02:19 - material and then that material has a
02:22 - color that we can set so we're going to
02:24 - set that equal to some color and let's
02:27 - go ahead and make that color defined in
02:29 - the inspector so let's make a public
02:31 - color up here which is going to be our
02:33 - hover color and simply close that off
02:36 - and we can then put our hover color down
02:38 - here and this is going to work just fine
02:41 - however I really want to optimize this
02:44 - just a bit so instead of finding the
02:47 - renderer each time our mouse enters to
02:49 - Collider let's only find it once at the
02:52 - very beginning of the game and then
02:54 - cache it which means storage in a kind
02:58 - of in a private variable which only
03:01 - purpose is storing this information so
03:04 - we don't have to get it all the time so
03:06 - let's make a private renderer and let's
03:10 - just call this our rent and the reason
03:12 - why I don't call it renderer is that
03:13 - renderer is a keyword used by unity and
03:16 - then we have to go and make a private
03:18 - new or we write it and that kind of
03:20 - stuff so use rent or R or whatever and
03:23 - then in this side method here I'm going
03:26 - to create a start method we're going to
03:28 - set rent equal to that get component
03:30 - renderer and now we can instead of using
03:33 - this entire piece of code we can just
03:35 - put rent down here and that's going to
03:37 - work fine and it's going to be more
03:40 - optimized great so on this is going to
03:43 - work however we also want to set the
03:45 - color back to the start color the
03:48 - default color when the mouse exits the
03:51 - collider so down here we're going to
03:53 - make a void on Mouse exit and this does
03:57 - exactly what you would think it does
03:58 - it's again a Unity callback that is
04:01 - called when the mouse now exits the
04:03 - collider and here we can set rent dot
04:06 - material dot color and because our game
04:11 - object here our nodes are wide we could
04:14 - just set it equal to color dot wide
04:16 - however that would look weird if we
04:19 - later decide to change the color of our
04:21 - nodes so instead what we're going to do
04:23 - is we're going to store our start color
04:26 - at the
04:27 - beginning of the game and then we can
04:28 - set it back down here whoo excuse me so
04:31 - we're going to go ahead and make a
04:33 - private color variable and this is going
04:36 - to be our start color and in our stat
04:39 - method we can set start color equal to
04:41 - Rend material dot color and now we've
04:45 - stored that as well and we can put that
04:48 - down there so when our mouse enters
04:50 - we're going to set our current object
04:53 - color to hover color and when it exits
04:57 - we're going to set it back to the start
04:58 - color which we make sure to get at the
05:01 - very start of the game so if I save this
05:04 - now and set our hover color to something
05:07 - that maybe would look a bit better than
05:09 - completely black just some kind of gray
05:11 - here we should see this working so make
05:14 - sure you're hovering over inside the
05:15 - game view and you can see very clearly
05:17 - now that this animation is there and you
05:21 - really want to start pressing these
05:24 - nodes now great so make sure you always
05:27 - leave these small visual cues to let the
05:30 - user know where to press and yeah good
05:35 - so without further ado let's jump back
05:37 - into our node script and that was the
05:41 - visual part what we want to do now is we
05:44 - want to have this node store some
05:45 - information and the first piece of
05:48 - information and maybe the most important
05:50 - piece is the turret that is currently
05:52 - built on top of this node and if there
05:55 - is no chart build we are simply going to
05:57 - have this variable be null so we'll keep
06:01 - track of this using a private game
06:03 - object variable and this is just going
06:05 - to be the current the current toreador
06:07 - I'm just going to call it turret and
06:09 - then we will have a Noddy method down
06:13 - here that is called only when we click
06:15 - that node so as just like we have mouse
06:18 - enter and mouse act exit we also have on
06:20 - Mouse down and this is called when we
06:24 - press down the mouse button while
06:27 - hovering over that object and here we
06:31 - want to say that if our turret is not
06:33 - equal to null meaning that we've already
06:35 - built something here well then we want
06:38 - to throw out some kind of
06:40 - to the user saying well we can't build
06:43 - here because that's already something
06:44 - there lady we might have something like
06:46 - selecting the turret and then selling it
06:49 - for less money than what you bought it
06:51 - for maybe upgrading it and we should
06:55 - definitely also have this message here
06:58 - this can't build their message we should
07:02 - display that on the screen so that the
07:04 - user know why nothing is happening but
07:07 - for now we'll just display this in the
07:08 - debug lock so and I mean in the console
07:12 - so we can maybe put in here to do
07:15 - display on screen just to let us know
07:19 - and then we will return out of this
07:22 - method great so if our chart is equal to
07:27 - null meaning that if we don't have
07:29 - anything built here we want to go ahead
07:31 - and build a turret and this is super
07:37 - easy we've done this a million times you
07:39 - reference some kind of prefab you
07:41 - instantiate the prefab at a position and
07:43 - a rotation and then you can do some
07:46 - stuff with it like destroyed later or
07:47 - something like that but that is the very
07:49 - basics however we might want to have we
07:53 - definitely want to have more than one
07:56 - turret currently we only have one turn
07:58 - type just to standard turret it with a
08:01 - standard range and damage and all that
08:03 - currently does a lot of damage but later
08:06 - this will be kind of the beginning
08:08 - turret and then you want stuff like
08:10 - maybe a missile launcher you want
08:12 - something that slows the opponent you
08:14 - could have something like a something
08:17 - with fire or whatever you want to do and
08:21 - you want the user to be able to select
08:23 - what turn to build and there are
08:25 - multiple ways of doing this my idea is
08:27 - that we create some kind of build
08:29 - manager that will have some kind of UI
08:32 - with different turrets that you will
08:33 - press and after having selected one you
08:36 - can then press on the nodes to build
08:38 - them so that's what we are going to do
08:40 - and therefore instead of just
08:42 - referencing this toward in here let's go
08:45 - ahead and create that build manager
08:47 - right away just so we have a kind of a
08:49 - skeleton kind of a
08:54 - rig to build on top of so I will just
08:57 - draw this out here so let's find our
08:59 - game master script or game master object
09:02 - let's add a new component here called
09:05 - build manager and this build manager is
09:09 - going to be very empty at the moment
09:11 - don't know why it does that
09:12 - let's try that again it's going to be
09:14 - very bare-bones
09:16 - but what we essentially need is some
09:19 - kind of private armed game object and
09:24 - this is going to be our turret to build
09:28 - and by default this is not going to be
09:31 - equal to anything it's not going to be
09:33 - equal to anything until we tell it what
09:35 - turret we need to build and then we want
09:38 - some kind of way of getting this turret
09:41 - to build and therefore let's make a
09:42 - public void or actually a public game
09:48 - object called get chart to build and
09:53 - we'll be able to call this from other
09:55 - scripts and it will return the turret to
09:58 - build so this is just a nice way of
10:00 - calling a method and then getting what
10:03 - turd we want to currently build um
10:06 - excuse me however we still need a
10:10 - reference to our build manager and you
10:13 - can see inside of our node here and that
10:16 - we could go up here and add a public
10:20 - build manager and then say that and go
10:25 - in here and reference it but then we
10:27 - would have all of these notes storing
10:30 - their own reference to the build manager
10:33 - and that would very quickly become well
10:36 - frankly really annoying to deal with so
10:39 - what we're going to do instead so we're
10:41 - going to delete that and then we are
10:43 - going to go into the build manager and
10:45 - make this available without a reference
10:49 - and the way we do this is by using kind
10:52 - of a very simplified version of what is
10:54 - called a singleton pattern and a
10:58 - singleton pattern is basically a way to
11:01 - get the carnot or to make sure that
11:03 - there's only one instance of the build
11:06 - manager in the scene that's only one
11:08 - build manager and making it easy to
11:11 - access that instance so we will go ahead
11:14 - and create a public static variable
11:17 - public because we want to access and
11:19 - access it from without the class and
11:22 - static because we want this to be shared
11:24 - by all build managers we only want this
11:27 - to be one build manager one that is
11:30 - central to the build manager type and we
11:33 - will call make this a build manager and
11:36 - we will call this instance so this
11:39 - variable is a build manager inside the
11:42 - build management it stores the build
11:44 - manager and it basically just stores a
11:46 - reference to itself and that quickly
11:49 - becomes confusing but if we now go into
11:51 - the and create a awake method which is
11:55 - called right before start we can go in
11:58 - here and set instance equal to this so
12:01 - what we're doing is basically every time
12:03 - we start the game that's only going to
12:05 - be one build manager which is this one
12:07 - and it's going to call the awake method
12:10 - I'm just going to say that this build
12:12 - manager right here the one that we are
12:15 - writing the script in here this build
12:16 - manager is going to be put into this
12:19 - instance variable and this instance
12:22 - variable can be accessed from anywhere
12:24 - so now we have a reference to that build
12:26 - manager you can also see that a problem
12:29 - occurs if we then have multiple build
12:31 - managers inside of our scene if we were
12:33 - to go in here and add another build
12:35 - manager here go in and add another build
12:37 - manager now we have a problem because
12:39 - now they will both call this awake
12:42 - method and the first one will set the
12:44 - instance equal to this and then the
12:46 - second one will set the instance equal
12:48 - to the second and then instance can only
12:51 - be equal to one of them at a time and
12:53 - then one of them will mulch just sit
12:55 - idle and not be used at all so this is a
13:00 - really great way of doing it if you know
13:02 - that you only have one instance in there
13:04 - and you can even make an error check we
13:06 - could go in and say if we should put
13:09 - this above the current piece of code
13:11 - here so if instance is not equal to null
13:14 - before we set it well that means that
13:16 - it's been set before and then we can
13:18 - debug that log error that
13:21 - more than one build manager inseam and
13:27 - that's a problem so we're going to
13:29 - return and just let ourselves know okay
13:32 - and this final thing that we want to do
13:35 - here is make a let's do that down here
13:38 - to keep our singleton stuff up there
13:41 - let's make a reference to our standard
13:43 - turret so we're going to make a public
13:45 - game object and this is going to be our
13:47 - standard turret prefab and it will just
13:51 - allow us to drag the turret in there
13:53 - from the inspector and then what we will
13:56 - do is we will have the turret to build
13:58 - default to that standard turd so we will
14:01 - say that turn to build equals standard
14:04 - turd pea prefab right off the bat and
14:07 - then later we can go in and change it by
14:09 - clicking on some other turrets and add a
14:11 - whole piece of UI to go with that so our
14:14 - turn to build will just be our standard
14:16 -  prefab and when we then get the
14:19 - turd to build it's going to return that
14:21 - so in here what we can say is we can
14:24 - simply say and that we want to store a
14:28 - turret to build in a temporary variable
14:30 - and we want that to be equal to build
14:33 - manager dot instance again we get the
14:37 - current build manager active dot and now
14:40 - we can say get chart to build and it's
14:43 - going to go in here call this and return
14:47 - the turret to build which which is
14:48 - currently equal to the standard turret
14:50 - prefab and then we can instantiate this
14:52 - as we've done many times before we can
14:54 - go in here and say instantiate the
14:57 - turret to build at our current position
15:00 - transform that position with a car in
15:02 - rotation transform rotation something
15:07 - like that and then we want to set our
15:09 - turret up here equal to that
15:12 - instantiated object so we set turd equal
15:14 - to that and whenever we do this we need
15:16 - to remember to cast this into a game
15:19 - object again it's just something you
15:21 - have to do so if you find some of this
15:24 - code here with the instancing and the
15:26 - singleton patterns and stuff to be
15:29 - confusing I completely get it I was very
15:32 - confused by this in the beginning
15:34 - singleton patterns or at least these
15:37 - very similar ones there's something that
15:39 - you can't really avoid when when
15:41 - programming at least if you want to get
15:42 - a bit more advanced with it but what you
15:45 - can do is now for now just just memorize
15:50 - how this works and then later you can
15:52 - try and understand why it is exactly
15:54 - that we do it this way so for now just
15:57 - try and see if you can remember and then
16:00 - don't worry about understanding it too
16:03 - much so cool now we have instantiated
16:06 - this turret and everything should be
16:08 - working so now we can jump back into
16:10 - unity we can clear the console we can
16:14 - see that our build manager now has a
16:16 - standard chart prefab slot and I'm going
16:18 - to go in here and rename our turret to
16:20 - the standard turret and then we can have
16:23 - multiple different turret versions in
16:25 - the future let's find our game master
16:28 - and drag our standard turn in there and
16:30 - again I just deleted the three turrets
16:31 - that we currently have in the scene and
16:33 - now when I hit play we should be able to
16:36 - actually build the turret and you can
16:38 - see that we are however it kind of sits
16:41 - inside of our node object so what we
16:43 - want to do is simply take this and
16:45 - offset it by 0.5 on the Y so let's go in
16:49 - here and create a offset and we can make
16:52 - this a variable in here just like on the
16:54 - hover color so we are going to have a
16:56 - vector 3 and this is going to be the
16:58 - position offset and we can set that
17:01 - inside the inspector and then down here
17:03 - we take our current position and we
17:05 - simply add onto that our precision
17:08 - offset it's really that easy so now we
17:12 - can go in and find our node prefab and
17:14 - we can find our position off it off set
17:16 - and set that to 0.5 on the Y and now
17:20 - when we play everything should actually
17:22 - be working so if I go in here and I
17:25 - press this you can see that our turn
17:27 - sits nicely on top of the node and you
17:31 - can see that no matter how many charts
17:34 - are placed here they are all working and
17:36 - if I try and place a turret on top of
17:39 - another turret so you can see it press
17:40 - here it says can't build there to do
17:43 - display this on the screen so now we're
17:45 - able to build turrets inside of the game
17:48 - and they will just immediately work and
17:50 - we have a nice hover animation and we
17:52 - have a centralized way of dealing with
17:54 - what turrets we want to build called the
17:57 - build manager so that was all for this
17:59 - video I hope you enjoy and most of it
18:02 - and if you were able to understand all
18:05 - of it great job if not don't worry about
18:07 - it and without further ado thanks for
18:10 - watching and I'll see you in the next
18:11 - video thank you so much to all of the
18:13 - awesome patreon supporters who donated
18:15 - in July and a special thanks to Vic's
18:17 - infamous own and UK and Locke's game TV
18:21 - these videos wouldn't be possible
18:22 - without you