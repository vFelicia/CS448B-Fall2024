00:00 - [Music]
00:04 - hello everyone and welcome to the third
00:06 - tutorial in our Survival game series
00:08 - done by bra keys I am the CEO of Brack
00:11 - keys and um today we continue on with
00:14 - the m system hopefully we uh finish that
00:18 - off so uh let's go ahead and open up
00:21 - unity and uh the project is just like uh
00:25 - last time and uh we can go ahead and
00:29 - double click on our mely system script
00:32 - to open it up in mono
00:35 - develop and
00:37 - um yes okay so right now if we run this
00:42 - script in unity um it's going to send
00:47 - out this message that our enemy needs to
00:51 - lose
00:52 - damage um but it won't just send this
00:56 - out if we are in a certain distance it
00:59 - will send this out
01:00 - if we just point at him so um it won't
01:03 - matter how far away he is from uh from
01:06 - us so we need to make a new if statement
01:10 - so go to the line on the distance equal
01:13 - hit. distance and make an if statement
01:17 - and in this type
01:19 - if
01:22 - distance is
01:24 - under and now we need to make a new
01:26 - variable so go up to the top and under
01:29 - the variable distance make a new line
01:32 - type VAR and type max distance so this
01:37 - is the variable that we will be
01:39 - declaring in unity and uh I'm sorry
01:42 - setting in unity and uh it's basically
01:47 - how far away the object can be from us
01:51 - um before we can still hit it so um it's
01:54 - going to be a type float and if I did
01:57 - not mention this the difference between
01:59 - an in and a float an integer is just um
02:04 - a whole number a number without decimals
02:06 - but a float has decimals so it's going
02:09 - to be a type
02:11 - float and it's going to be equal let's
02:15 - say about
02:16 - 1.5 um that's a pretty good number I
02:19 - think and then ended up with a
02:23 - semicolon okay so go back to the code we
02:26 - were writing so if distance is under max
02:31 - distance so if the distance from us to
02:35 - the opponent is under the max distance
02:39 - that we want it to be um then we want to
02:43 - send out the message telling our enemy
02:47 - to lose damage so start curly bracket
02:51 - and end the curly bracket after the sent
02:55 - message and we can just go ahead and tap
02:58 - this out to make it a little bit more
03:00 - clear so um go ahead and save this by
03:03 - hitting contrl s and now go back to
03:08 - Unity and if we um go on the player main
03:12 - camera and select our Mele you can see
03:16 - that a new variable has popped up called
03:19 - the max distance so if we go ahead and
03:21 - hit
03:23 - play and now go into unity and and click
03:26 - the mouse you can see that something
03:29 - should happen when the distance is below
03:32 - 1.5 and we can set this to something
03:35 - else so you can fine-tune this play
03:37 - around with it but right now nothing is
03:40 - really happening so we need to create a
03:44 - very very simple opponent and right now
03:47 - our opponent doesn't need to do anything
03:49 - else than Lo lose health I know that's
03:51 - pretty boring but um that's what we'll
03:54 - need him to do so we'll make a new
03:57 - opponent this time we're just going to
03:59 - make a capsu going to game object create
04:02 - other capsu and then saring out the
04:06 - transform to get him in the center of
04:08 - the scene and then hitting F in the
04:10 - scene view to Center on him and then
04:13 - draging him up just above the ground
04:17 - plane and you can position him uh
04:19 - position him wherever you like just so
04:22 - you can reach him with our player and
04:25 - now we can go ahead and rename this game
04:27 - object to enemy
04:31 - and on this game object we want a script
04:34 - so go to add component new scripts and
04:38 - it's going to be a JavaScript um like
04:41 - everything else and we're going to call
04:43 - this enemy logic just for now um and
04:47 - then create um and go ahead and double
04:50 - click the
04:52 - script and this one is going to be
04:55 - really really simple so um going to mon
04:59 - develop
05:00 - and um for now you can just go ahead and
05:02 - delete the two
05:04 - functions and um we're going to start
05:07 - out by creating a variable so VAR and
05:12 - this variable is going to be called
05:14 - health and this is basically how much
05:17 - health does the player have so by
05:19 - default um I'm going to set this to 100
05:23 - um and that's because in our melee
05:25 - system script we set the damage to be 50
05:28 - and I would like him to die in just two
05:32 - hits so uh end this up with a
05:35 - semicolon and now make some more lines
05:39 - and type function because we want
05:42 - something to happen in the script and
05:44 - call it
05:46 - apply
05:48 - damage and uh right now all your bills
05:52 - should be ringing ringing because
05:55 - remember we called this function in our
05:57 - Mele system so this this is really what
06:00 - we're doing here we checking the
06:02 - distance and then we're sending a
06:04 - message to this new script that we want
06:07 - to call the function apply damage so I
06:11 - could call this anything I could call
06:13 - this um hit it or anything like that um
06:18 - as long it's uh it's the same right here
06:22 - so okay but we're doing more than just
06:25 - saying that it should apply damage oh um
06:28 - I typed in either so um we're doing more
06:31 - than just that we also giving it a
06:34 - variable that says how much damage
06:38 - that's what we are going to type in
06:40 - these
06:42 - parentheses so um if we go back we can
06:44 - remember we can see what it was called
06:47 - it was called the damage so it's going
06:49 - to be the
06:51 - damage and just to clarify it we're
06:55 - going to say that it's an integer just
06:57 - so Unity won't get confused on with what
07:00 - kind of variable it is just so it knows
07:03 - so what we basically can do here is that
07:06 - we can um type out the curly brackets so
07:10 - we can do something in this function and
07:12 - we can say that
07:13 - Health minus
07:16 - equals the damage so we can refer to the
07:21 - damage even though that the damage is
07:24 - from another script so this is really
07:26 - cool and uh basically what this minus
07:30 - equals means uh it means that health is
07:34 - equal equal to
07:36 - health minus the
07:39 - damage
07:41 - so these two piece of pieces of code is
07:45 - exactly the same it's just easier to
07:49 - type it out this way so
07:53 - Health minus equals the
07:56 - damage all right so now if we we um save
08:00 - this and go back to Unity and if we hit
08:05 - play and we uh try to Center the capsule
08:10 - in our view and press our Mouse button
08:12 - nothing happens with the health this is
08:15 - the variable you should be looking at
08:18 - but if we try to um get a little closer
08:23 - and then presses our Mouse button you
08:25 - see the health just went down 50 points
08:29 - and if we press again it's zero so our
08:33 - um our mechanics are now working and we
08:36 - continue to click minus zus 100 and so
08:39 - forth on and so forth so um but the the
08:44 - dying and all this will create that in
08:46 - just a second um actually just let's
08:50 - just take out this now so um we could
08:54 - create a whole function for it um but
08:57 - first of all we want to check
09:00 - whether or not our health is above 100
09:04 - or is equal to zero because
09:07 - um this way we'll know whether or not
09:10 - our enemy is De so go into the enemy
09:13 - logic script and type function and um
09:18 - then type
09:20 - um update with um a capital letter and
09:25 - then parentheses and nothing in them and
09:28 - then make the two curly
09:31 - brackets and now we are going to check
09:34 - how much life we have so
09:37 - if
09:39 - Health um and we want this to check if
09:44 - we are on zero or below so if
09:50 - health is under or equal
09:54 - to
09:57 - zero then we want something to happen so
10:01 - curly
10:02 - brackets and then we want to call a
10:07 - function um called de and we'll just
10:10 - type it out this way so de parenthesis
10:13 - and a semicolon this little piece of
10:16 - code is going to try to call a function
10:19 - so what we can then do is go down here
10:22 - and create our function called de and
10:25 - then the
10:26 - parentheses and then um we'll make the
10:29 - the curly brackets and in this we could
10:32 - type something like yeah let's destroy
10:36 - the game object so let's destroy the pl
10:38 - the uh enemy when it's um when it's dead
10:42 - so uh in this function dead we just type
10:46 - um
10:49 - destroy and then in the parenthesis we
10:52 - type game object with a smaller letter
10:56 - and then a capital and then
10:59 - close off and a semicolon so okay let's
11:03 - go through what the script is doing um
11:06 - so when our melee system decides that
11:10 - okay we are close enough and we are
11:12 - hitting the fire one um send the message
11:16 - that we want this amount of damage to be
11:19 - applied um to this script and this
11:23 - script then says okay something needs to
11:26 - happen and um what needs to happen
11:29 - happen is that our health gets um
11:32 - subtracted by this
11:34 - amount and um then in our update we
11:38 - check if our health is equal to or below
11:41 - zero and if it is then we want uh to
11:46 - instant we want to initiate the death
11:49 - the death so um we type death and then
11:53 - uh in our de function we then just
11:57 - destroy the game object so that's what
11:59 - the computer is going to do for us when
12:01 - we hit play so let's try this oh we can
12:04 - just go ahead and clear this error um so
12:07 - let's play and now hit it once and hit
12:11 - it twice and there you go the game
12:13 - object
12:15 - disappears so um that's pretty much it
12:18 - for the scripting part of this tutorial
12:20 - uh now let's do some exciting um
12:22 - animation and um some simple modeling in
12:28 - unity so let's go ahead and make a
12:31 - weapon and you can pretty much make any
12:33 - weapon you want I'm going to make a maze
12:37 - type weapon um and as I've mentioned
12:41 - before please do this in other
12:43 - applications Unity is not meant to
12:47 - model but um just for demon
12:50 - demonstrative purposes I am going to
12:52 - show you how to do this so um create
12:56 - other create a sphere
12:59 - and this is going to be the tip of our
13:02 - maze I'm going go just go ahead and drag
13:05 - this up and even zero out the transforms
13:07 - if you want uh actually I think I'm
13:10 - going to do that so s it out and then
13:13 - drag this up and then I'm going to go
13:16 - ahead and create another game object
13:18 - this is going to be a
13:21 - cylinder and um I'm going to go ahead
13:25 - and make this a child of the sphere
13:27 - because this way we can just
13:29 - zero out the transform and it will be
13:33 - directly in the center of the sphere as
13:35 - we talked about in earlier tutorials and
13:37 - now we're going to uh scale this down
13:41 - and make it longer in the Y
13:43 - AIS and then just drag it down so now we
13:47 - have a grip to hold on to and maybe make
13:50 - this um going to I'm going to just dra
13:55 - it out so I can scale the sphere without
13:57 - scaling anything else and make that a
14:00 - little bit smaller
14:03 - so all right a pretty horrible maze but
14:06 - it will do for now um and oh maybe the
14:11 - grip should be a little small L too so
14:14 - okay let's try that for a beginning so
14:19 - I'm going to rename this cylinder to
14:22 - grip and the sphere to Maze and collapse
14:26 - this and collapse this and I'm going to
14:30 - just drag it over to our player and try
14:34 - to position it in front of the camera um
14:37 - somewhere where it looks all
14:41 - right this is not exactly the easiest
14:45 - thing to
14:47 - do
14:48 - um all right so this will do for now I
14:52 - think
14:53 - um yeah okay that's fine um I'm going to
14:57 - delete this V collider and this is what
15:01 - makes this object collide with other
15:04 - objects in the scene so if we delete
15:06 - this it will simply just pass through
15:09 - them and uh this is only for graphics so
15:13 - we want to uh Delete the colliders and
15:16 - both both the Maze and the grip object
15:19 - okay so now we can go ahead and and play
15:22 - our game and when we play it you see
15:25 - that um our maze is not attached to the
15:28 - players so we need to uh drag it onto
15:31 - the player and then onto the main camera
15:34 - and this way it will follow us
15:36 - around and uh in the scene view this
15:39 - looks pretty silly but in the game view
15:42 - it looks all right and um what we are
15:45 - going to do now is we're going to create
15:47 - an
15:48 - animation that will um make it look like
15:52 - we are attacking uh someone so uh go to
15:56 - window and then animation or press
16:00 - control 6 and I'm going to drag this
16:03 - down to where the console is so now I
16:06 - have the three tabs here and I can drag
16:10 - this up a little bit to get a view out
16:14 - of what I'm doing and now let's select
16:18 - the Maze and let's press this little red
16:22 - button this will ask me to create a new
16:25 - animation and we are going to call this
16:28 - attack
16:31 - and save it and um okay so now we are
16:34 - going to create some key frames so add
16:38 - key on the position y by pressing this
16:40 - little um button and add a key on the
16:45 - rotation to so this will add key frames
16:49 - on both the position values and the
16:52 - rotations and this allow us to go scroll
16:55 - further into our timeline let's try out
16:59 - with about
17:01 - 0.10 and by the way um this is a whole
17:05 - second and this is just milliseconds so
17:08 - Ser on 10 and um we can go ahead and
17:13 - rotate it a bit rotate it down and maybe
17:19 - even sideways and in order to rotate
17:22 - this sideways now um you see if I try to
17:25 - do it now it rotation gets all kinds of
17:28 - weird because it rotates based on
17:31 - earlier rotations so what I want to do
17:33 - is I want to click this Global button
17:36 - and you can see now it says local and I
17:39 - want to uh enable and disable this
17:43 - um when when animating so I can rotate
17:46 - in different ways so this is based on
17:49 - the scene and this is based on um the
17:54 - the object rotation but just play around
17:56 - with it if you can't get it to look
17:58 - quite right uh okay so wanted to hit
18:02 - something like that and then I want to
18:04 - move it down a bit and over like this so
18:10 - if we just take a look at the animation
18:12 - you can see it looks like he's hitting
18:16 - down there and now we just want it to go
18:19 - back to the position that we were in
18:21 - before and uh you can do this but just
18:25 - copying the values so in the position I
18:28 - selected this contrl C or command C if
18:31 - you're on a Mac go to
18:33 - 0.20 contrl V and then and just keep
18:38 - doing this with all the values that
18:40 - change and um this way we'll go back to
18:45 - exactly the same position that we were
18:47 - in before and notice that the rotation
18:50 - was just zero on all axes so we can just
18:53 - go to this 0.20 and type zero in all the
18:57 - rotation axis so now we should have a
19:02 - game object that oh something went
19:05 - wrong here okay so control C to get back
19:10 - we can see okay what did we do wrong so
19:14 - um so 20 and zero out the
19:18 - rotation and well now it's working it's
19:22 - just Unity plane trick resour okay so we
19:26 - need to um take care of the position
19:29 - once again um just remember that you can
19:32 - always go a step back with uh contrl C
19:36 - or command C if you're on a Mac
19:39 - um this animation system really needs
19:42 - some debuging um okay so you can see now
19:45 - that we uh have a smooth animation going
19:48 - on and you can go ahead and select all
19:51 - of this and right click on one of the
19:54 - starts and then select flat and this
19:57 - will just make the animation a little
19:59 - bit more smooth and cool looking so if
20:02 - we play this you can see looping and um
20:06 - it's not perfect but it will do for now
20:10 - and uh you can go ahead and click this
20:13 - red button which will take us out of the
20:15 - animation mode and go back to
20:18 - project and uh now that you can see that
20:21 - our mace has an animation component
20:24 - applied to it and there's one animation
20:27 - in here and that's the attack
20:29 - so if we go ahead and disable the play
20:31 - automatically
20:33 - button um it uh it should be all right
20:37 - so what we need to do now is we need to
20:39 - call this animation we need it to uh
20:43 - play whenever we press the attack button
20:46 - so going back to the melee system by
20:48 - double clicking it and opening up in
20:50 - mono develop I'm sorry if I'm going a
20:52 - little quick here but I don't want this
20:54 - to get too long um we can go say that
20:59 - um this we want to happen no matter how
21:02 - far away we are from the opponent the
21:04 - animation should always play a least so
21:07 - if input. get button down then we want
21:10 - to play the animation so
21:13 - animation with a smaller letter dot play
21:18 - with a capital and then in the
21:21 - parentheses we're going to call the
21:25 - attack this should be pretty
21:27 - self-explain anator if we get the button
21:30 - down then play the animation it's that
21:34 - simple so let's go ahead and open up in
21:37 - unity oh I can see that we have an error
21:41 - so it doesn't know the attack oh I see
21:45 - um you have to
21:48 - create these so okay now go ahead and
21:52 - clear this error up and yes no errors
21:55 - and let's play it in unity and now when
21:59 - we press oh something is going wrong
22:03 - here
22:05 - um un just went hawi um I'm sorry I'll
22:10 - be back in just one second no um okay so
22:14 - we have Unity working but it's not
22:16 - playing um so if we go
22:21 - back oh there's no animation attached to
22:24 - this object okay and this is because we
22:27 - have the script
22:29 - on this meele object but we want the
22:32 - animation to play from this maze object
22:35 - and by simply saying animation. playay
22:38 - it is trying to play off of this object
22:41 - so we want to tell it that this maze
22:45 - needs to play an animation so we can go
22:49 - and ahead and just for
22:52 - um just to
22:55 - get a system to it we can go ahead and
22:57 - drag this under our M and so now it lies
23:02 - there and doing this we can have
23:04 - different kinds of weapon and in our M
23:08 - uh script we're going to uh open up the
23:11 - me system we're going to make a new
23:15 - variable and we're going to call this um
23:19 - the uh the
23:21 - Maze and we're going to make this a type
23:25 - transform and I wanton explain this in
23:28 - this video else it will get too long but
23:31 - um we'll cover the transform later it is
23:35 - used so much um so what we'll then do in
23:39 - this code is we're going to type the
23:42 - maze do animation. playay and this way
23:48 - when we go back to
23:50 - Unity um we'll get a new
23:53 - variable and we can just drag our maze
23:58 - selecting this in the hierarchy into
24:01 - this variable so now what we're doing is
24:04 - we're saying that this object needs to
24:07 - play an animation and this object we can
24:10 - just change in unity this is really cool
24:14 - and this is a very simple way of uh
24:17 - finding objects and doing stuff off of
24:19 - them instead of having to go and search
24:22 - for inside the script um using functions
24:26 - like game object. find okay so now if we
24:29 - go ahead and play Unity you can see the
24:31 - animation playing and it is a little
24:34 - Bucky I can see that um the start
24:37 - position and the end position isn't
24:39 - exactly the same but we can just go
24:41 - ahead and change this in a moment and
24:44 - our uh kill function is still working
24:47 - this is really basic Mechanics for doing
24:50 - the um Mele stuff um all right so um
24:57 - what we can simply do now now is we can
24:59 - take our uh position values for this and
25:03 - copy them into the first key frame here
25:07 - so it's it's really because our first
25:10 - key frames values are different from um
25:15 - our uh our values over here in the scene
25:19 - and this is probably because of the fact
25:23 - that we draged it in under a and that
25:27 - way we changed
25:28 - it's um its zero
25:31 - values so um if you haven't done it
25:35 - already just make sure that you notice
25:39 - this um and now we should just fix the
25:42 - last key
25:44 - frame
25:45 - um I really hate animating in unity I
25:49 - hate creating models in unity um do this
25:53 - in other applications please I I beg you
25:57 - so um now when we just finish
26:02 - this all right and then hit the stop
26:07 - record button and we go into Unity it
26:10 - looks perfect so okay that's is pretty
26:15 - much it for this tutorial we can go
26:17 - ahead and save out the scene by going to
26:20 - file save scene and um yes um thank you
26:25 - for watching you can go ahead and hit us
26:28 - up on Facebook and Twitter
26:31 - um yeah um I'm really uh I'm out of
26:34 - Weights so thanks for watching and have
26:37 - a nice day
26:40 - [Music]