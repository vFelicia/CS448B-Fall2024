00:00 - one of the most essential parts of
00:02 - creating a 2-d game is of course player
00:04 - movement and even though it's one of
00:05 - those basic mechanics that we often take
00:07 - for granted creating a really good
00:09 - player controller can actually be quite
00:11 - challenging in fact it's something that
00:13 - even experienced programmers can spend
00:15 - weeks or even months of development time
00:17 - getting to feel just right of course
00:18 - everything depends on what you want your
00:20 - character to do can you jump can you be
00:22 - controlled in air can you crouch can he
00:24 - wall run does he slide down ledges what
00:26 - about animation and so on now that might
00:29 - sound a bit overwhelming but as always
00:31 - with game development there are ways
00:33 - that we can cheat a little bit if you're
00:34 - just starting out I really recommend
00:36 - finding a good character controller
00:37 - online simply because you don't want to
00:39 - be stuck doing movement when there are
00:41 - so many other aspects of game
00:43 - development that you should explore also
00:45 - this video is sponsored by skill share
00:47 - skill shares an online learning
00:48 - community with more than 21,000 classes
00:50 - on game development tech and more and
00:53 - since this is a 2d video I thought I
00:54 - would introduce you guys to an awesome
00:56 - course on creating a boned faced 2d
00:58 - character in unity this
01:00 - beginner-friendly course is made by game
01:02 - developer vladimir lomachenko and it
01:04 - comes to three downloadable characters
01:05 - to help you get started a premium
01:07 - Skillshare membership gives you
01:09 - unlimited access to all classes for less
01:11 - than $10 a month so to get started
01:13 - simply click the link in the description
01:15 - and the first 500 people will receive
01:17 - their first two months for free now a
01:19 - character controller is basically just a
01:21 - script that takes care of all the more
01:24 - advanced physics calculations that go
01:26 - into making your character move so by
01:28 - using one of these we can focus on
01:29 - writing a much simpler script that will
01:32 - just tell the character controller what
01:33 - to do for the purpose of this video I've
01:35 - of course gone ahead and prepared a
01:37 - character controller that we can use as
01:38 - a base but enough talking about it let's
01:40 - give our player some moves yeah so we're
01:43 - here in unity and I've gone ahead and
01:45 - set up a simple 2d scene using this
01:47 - Sunnyland
01:48 - asset from the unity asset store of
01:50 - course have a link for that in the
01:51 - description there's not much in here
01:53 - there's currently just a player which
01:55 - has nothing on him other than a sprite
01:57 - renderer as well as a main camera of
02:00 - course some different tiles making up
02:01 - our level and I've gone ahead and placed
02:03 - colliders on the platforms as well as
02:06 - the ground and then we have a few
02:08 - background elements so since we're going
02:10 - to be using a character controller to
02:11 - help us with our movement
02:13 - of course first have to get it into
02:14 - unity - right here on the desktop of
02:17 - course have a link to where you can
02:18 - download the script as well as the
02:19 - entire project so I'm just gonna take
02:21 - this and drag it into unity and right
02:23 - away that select our player and drag a
02:25 - script on there if we have a look at the
02:27 - different variables that are in a script
02:29 - we can see that we can adjust a bunch of
02:31 - different things that has to do with our
02:33 - character first of all we have the jump
02:35 - force I'm just gonna set this to a value
02:37 - of 700 we then have the Crouch speed
02:39 - which we can adjust using a slider here
02:41 - and this is basically how much we want
02:43 - to slow down when crouching I'm just
02:45 - gonna set this to something like point
02:47 - four and so we're gonna be moving at 40%
02:49 - speed while we're crouching we can also
02:51 - adjust how much we want to smooth out
02:53 - our movement I'm just going to leave
02:54 - that as is whether or not we want to be
02:56 - able to control the character in air
02:58 - which I definitely do want to and then
03:00 - we have to define this what is ground
03:02 - variable and this basically just allows
03:04 - us to choose what layers we want to act
03:07 - as a walkable surface for our character
03:09 - I'm just gonna set this to everything
03:11 - and then go back in and remove the
03:13 - player layer because we don't want our
03:15 - player to be able to walk on top of
03:17 - himself I'm also going to go to the top
03:19 - and change this layer to player and then
03:22 - we have these three empty slots the
03:25 - first two of what we call checks and we
03:26 - use these to check whether or not we're
03:28 - currently standing on the ground so that
03:30 - we can determine whether or not we can
03:31 - jump and if we're crouching we want to
03:33 - know if there's a ceiling above our
03:35 - heads in order to determine if we can
03:37 - actually stand up again and to make
03:39 - things simple we're using these empty
03:41 - objects to determine where these
03:42 - locations are let's go ahead and create
03:44 - these objects that's right click on the
03:46 - player and let's hit create empty and
03:48 - I'm gonna switch to the move tool here
03:50 - by pressing W and now we can see where
03:53 - the empty object is I think this is
03:54 - pretty close to our ceiling check but
03:56 - I'm just going to go ahead and move it
03:58 - up a tiny bit something around here I'm
04:00 - then gonna duplicate it by pressing ctrl
04:02 - D and move this one down to the feet of
04:05 - our character I'm gonna rename this one
04:07 - to ground check and the other one to
04:11 - ceiling check just to stay organized we
04:14 - can then select our player and drag our
04:16 - ground check into the ground check slot
04:18 - and the same thing for this earring
04:20 - check the last variable here the Crouch
04:22 - disable Collider we'll talk about later
04:24 - but a character controller is now set up
04:26 - and should
04:27 - work just fine however there are a few
04:28 - more components that are required in
04:31 - order to make our player work the first
04:33 - one of these is of course a rigidbody
04:34 - because this will enable physics for our
04:37 - character so that's it a component and
04:39 - let's search for rigidbody 2d we can
04:41 - then open up this component and the
04:43 - first thing that we want to do in here
04:44 - is probably bump up our gravity scale in
04:47 - general it feels nicer if your character
04:49 - has a larger gravity than all the
04:51 - objects it makes stuff like jumping feel
04:53 - more snappy I'm gonna set mine to 3 but
04:56 - you can of course experiment we also
04:58 - don't want our character to be able to
04:59 - rotate at all we simply want him to move
05:02 - around the level but always have him
05:03 - facing upwards
05:04 - because of this we can go under
05:06 - constraints and freeze the rotation on
05:08 - the set axis and now he should stay the
05:11 - same at all times finally we need to go
05:13 - in here and add a Collider for a player
05:14 - because right now if we play the game we
05:16 - can see that he simply just falls down
05:18 - but it can actually be a really good
05:20 - idea to use multiple colliders when
05:23 - you're working with a player
05:24 - this can help smooth out collisions or
05:26 - make them feel more realistic one fairly
05:28 - simple setup that I really like is using
05:30 - two colliders it's circle Collider and a
05:33 - box Collider let's start by creating the
05:35 - box Collider so we're going here and add
05:37 - a box Collider 2d let's open it up and
05:40 - we should now be able to see it however
05:42 - the background makes it pretty hard to
05:44 - see so I'm just gonna go under my main
05:46 - camera and disable the background for a
05:48 - second and now when we select the player
05:50 - we can clearly see the green bounding
05:52 - box I'm gonna hit F to focus on a player
05:54 - and then gonna press edit Collider and
05:57 - we can now scale our Collider to fit our
05:58 - player one thing that I recommend is
06:00 - holding down alt to scale on both axes
06:03 - well the reason for this is that we
06:04 - don't want any offset on the x axis
06:06 - because since we are flipping the
06:08 - character that's gonna make the collider
06:10 - behave really weird so I'm just gonna
06:12 - bring this in and I'm also going to
06:14 - bring it down on the Y and finally
06:16 - actually want to completely remove this
06:18 - Collider from the feed of our character
06:20 - and that's because I found it works much
06:22 - better to use a circle Collider here so
06:24 - I'm gonna stop editing this Collider and
06:26 - add a circle Collider a small circle
06:29 - Collider 2d let's open this up as well
06:32 - and we see right now it isn't really
06:34 - positioned in a way that we would like
06:35 - so we can of course go in and offset it
06:38 - on the Y here as well as press
06:40 - did Collider and kind of bring it in and
06:42 - I'm gonna go ahead and move it up a tiny
06:44 - bit more and if you slide on a value
06:47 - like this in the inspector while holding
06:48 - down all you'll be able to fine tune
06:51 - much more neatly something like that
06:54 - looks pretty good
06:54 - I'm actually gonna adjust the radius to
06:57 - be just a tad larger and bring it up a
06:59 - tiny bit more and finally I'm gonna take
07:01 - the box Collider and bring it down a
07:03 - tiny bit
07:04 - and in whit's a tiny bit there we go
07:06 - let's stop editing the collider and we
07:08 - now have these two overlapping colliders
07:11 - and you can already kind of see what the
07:13 - benefit of this is because say we want
07:16 - to move up a slope like this one if we
07:19 - were only using a box Collider it would
07:21 - take the edge of this Collider and kind
07:23 - of push it towards the slope however
07:25 - since we're using a much more rounded
07:27 - shape a movement is going to feel much
07:29 - cleaner when moving up the slope and
07:31 - that's actually another reason which has
07:33 - to do with crouching but we'll see that
07:35 - later so let's move our player back up
07:37 - and if we now hit play we can see that
07:39 - immediately our player falls to the
07:41 - ground and he's ready to start moving so
07:44 - let's stop playing let's rename the
07:47 - background here let's select the player
07:49 - I'm just gonna close all these
07:50 - components and let's add our player
07:52 - movement script let's hit a component
07:55 - search for player movement select new
07:58 - script create an ad and it's double
08:00 - click it to open it up in visual studio
08:02 - and the script that we're gonna be
08:04 - creating here is fairly simple and the
08:06 - very first thing that we want to do is
08:08 - get a reference from a player movement
08:10 - to our character controller to D so that
08:13 - we can tell this script to move our
08:14 - character to do that at the very top of
08:17 - our script will create a public
08:18 - character controller 2d variable and
08:22 - we'll simply call it something like
08:23 - controller if we then save this and go
08:26 - into unity we can see that we now get
08:28 - this empty slot called controller where
08:30 - we can drag in our character controller
08:32 - script and now every time we write
08:34 - controller in our movement script it's
08:36 - referencing this particular script so if
08:39 - we were to go in here and write
08:40 - controller dot move well this would go
08:43 - ahead and move our character well of
08:45 - course we can't just tell it to move we
08:47 - need to specify where we want to move
08:50 - both in what direction and add what
08:52 - speed so to do that we need to
08:54 - get some input from the player and every
08:56 - time we get input from the player we use
08:58 - the input class so I'm gonna write input
09:01 - dot and then we're going to use the
09:03 - function called get access raw and the
09:06 - access that we want to get here is the
09:08 - horizontal axis now what this is is
09:11 - basically a value between minus 1 and 1
09:13 - that is going to change depending on the
09:16 - user input if we press the left arrow
09:18 - key or the a key on our keyboard this is
09:20 - going to be minus 1 if you press the
09:22 - right arrow key or the D key on a
09:24 - keyboard this is going to be 1 and
09:26 - similarly if you're using a controller
09:28 - and press the thumbstick all the way to
09:30 - the left it's going to be minus 1 and to
09:32 - the right of course it's going to be 1
09:34 - so this simply gives us a value that
09:36 - determines where we want to move on the
09:37 - horizontal axis to kind of show you this
09:39 - happening I'm just gonna use a symbol
09:41 - function called debug deadlock and this
09:43 - will print out a message to the console
09:45 - in other words we can simply display our
09:47 - input here inside the editor so if we
09:49 - just write out this piece of code here
09:51 - and save it and then hit play we can see
09:54 - that in the console here we get a bunch
09:55 - of messages saying 0 however if I then
09:58 - press my left arrow key we can see that
10:00 - it says minus 1 and if I press my right
10:03 - arrow key we can see that it says 1 so
10:06 - now we have a way of detecting input I'm
10:08 - gonna get rid of the debug deadlock here
10:10 - and we could use this input to move our
10:12 - character right here but it's not
10:14 - recommended to move a character inside
10:16 - of the update method instead we want to
10:18 - use another function that is dedicated
10:20 - for physics this function is called
10:23 - fixed update and it works in much the
10:25 - same way as update however instead of
10:27 - being called once every time the
10:29 - computer draws a frame on the screen
10:31 - it's called a fixed amount of times per
10:33 - second hence fixed update so let's just
10:36 - go ahead and create this function I'm
10:37 - gonna write void fixed update let's open
10:41 - and close two parentheses and some curly
10:43 - brackets and this is where we want to
10:44 - move our character so in general when it
10:47 - comes to movement we can say that we use
10:48 - the update method to get input from our
10:51 - player and we use the fixed update
10:52 - method to apply that input to our
10:54 - character we're not really using the
10:56 - start function here so I'm just gonna
10:57 - remove that but we of course need to get
10:59 - this input from one function to the
11:02 - other and to do that we need a variable
11:04 - so at the top here I'm gonna ride float
11:06 - let's create a very
11:08 - called something like horizontal move
11:10 - and by default we'll just set that to
11:12 - zero then inside of our update method we
11:15 - can set horizontal move equal to the
11:18 - result of our input and we'll close that
11:19 - off with the semicolon then when we want
11:22 - to actually move our character down here
11:24 - we can write controller dot move and
11:26 - this of course takes in a float
11:28 - determining how much we want to move and
11:30 - we want to move according to our
11:32 - horizontal move variable and let's then
11:34 - close that off with the semicolon
11:36 - however our move function actually also
11:38 - takes in two other variables the first
11:41 - one determines whether or not we should
11:43 - crouch and the second one determines
11:45 - whether or not we should jump right now
11:47 - we'll just say no to both of these so
11:48 - we'll write comma and then false saying
11:51 - that we don't want a crouch and comma
11:53 - false saying that we don't want to jump
11:55 - but we'll of course implement both of
11:57 - these in a sec also right now we're
11:59 - moving our character in the right
12:00 - direction but we don't have any control
12:02 - over the speed so let's just go to the
12:04 - top here and create another public float
12:07 - and we call this one the run speed and
12:09 - set it to something like 40 by default
12:11 - then when we get the input from our
12:14 - player we'll go ahead and multiply that
12:16 - input with a run speed so that if the
12:18 - player wants to move to the left the
12:20 - horizontal move will be minus 40 and to
12:22 - the right will be 40 and the final thing
12:24 - that we need to do in order for this to
12:26 - work correctly is whenever we're telling
12:29 - our character to move we actually need
12:31 - to multiply that movement speed with
12:33 - time fixed Delta time now time that
12:36 - fixed Delta time is the amount of time
12:38 - that elapsed since the last time this
12:41 - function was called in other words
12:42 - multiplying with time that fixed Delta
12:44 - time is going to ensure that we move the
12:47 - same amount no matter how often this
12:49 - function is called so that if this
12:51 - function is called 60 or a hundred times
12:53 - per second doesn't matter our character
12:55 - speed is still going to be consistent
12:57 - across all systems and platforms and now
13:00 - this should work so let's go ahead and
13:01 - save this and inside unity we can now
13:03 - see our run speed which we can adjust
13:05 - here if we want you let's hit play and
13:07 - we can now move our character back and
13:09 - forth inside of our level you'll also
13:12 - notice that every time our player Falls
13:14 - he kind of shifts into the ground a
13:16 - little bit to get rid of this we can go
13:18 - under rigidbody and change the collision
13:20 - detection for
13:21 - discreet - continuous and this should
13:24 - make sure that he never kind of goes
13:26 - into the ground in any way so now we're
13:28 - ready to make our character jump and
13:30 - this is actually really easy compared to
13:32 - normal movement all we have to do is
13:35 - check whether or not we press the jump
13:37 - key so we'll write if input dot get
13:40 - button-down so if we press down a
13:42 - certain button and the button that we
13:44 - want to check for is jump well then we
13:47 - want to go ahead and jump and of course
13:49 - again we want to jump inside of a fixed
13:51 - update functions so we have to kind of
13:53 - transfer this information down here and
13:55 - again the best way to do that is using a
13:57 - variable so up here will now create a
13:59 - boolean and a boolean can of course only
14:01 - be true or false and we'll call this one
14:04 - jump and we'll set it to false by
14:06 - default and then if we press the jump
14:08 - button we're gonna set jump to true and
14:11 - then down in our fixedupdate
14:13 - instead of saying always false we never
14:15 - want to jump we can now just pass in our
14:17 - jump variable so that if we press this
14:19 - button and jump becomes true we go ahead
14:21 - and tell the controller that we want to
14:23 - jump and of course right after that we
14:25 - want jump to become false again so that
14:27 - we don't keep on jumping forever and if
14:30 - we say that anko into unity and hit play
14:32 - we should now be able to move around and
14:34 - whenever we press space voila our
14:37 - character actually starts jumping super
14:40 - cool also there's currently a quick
14:42 - problem that we need to fix that is
14:44 - whenever we try and jump and then move
14:46 - towards a platform we can kind of get
14:48 - stuck on it of course this is not
14:50 - something that we would like we want to
14:52 - simply slide off and then fall down to
14:54 - get rid of this issue is luckily super
14:56 - easy all we need to do is create a
14:58 - physics material to do that we'll go to
15:00 - our project and hit create and will then
15:02 - select physics material 2d and we want
15:05 - to create a really slippery material so
15:07 - that we will simply slide off so let's
15:09 - just call it slippery and in here we can
15:11 - adjust to settings the friction and the
15:14 - bounciness we want the bouncing s to
15:16 - remain at zero and we'll also set the
15:18 - friction to zero as well then if we used
15:21 - to vector player we take this the pre
15:22 - physics material and drag it into the
15:25 - material on a box Collider and now when
15:27 - we play the game we can see that we
15:28 - slide right off platforms we can still
15:31 - get stuck on the very corner of this
15:33 - circle if this happens on earth is going
15:35 - to depend
15:35 - on the way you've set up your colliders
15:37 - in our case we can simply go ahead and
15:38 - add the slippery material to there as
15:40 - well and you can now see that we fold
15:42 - right off of platforms and at this point
15:44 - some of you might be wondering well we
15:46 - just wrote jump why does this jump
15:49 - variable correlate to space and why does
15:51 - horizontal mean a and D and left and
15:54 - right well this is actually something
15:55 - that we can configure visually because
15:57 - inside of unity if we go to edit project
16:00 - settings input we see the input manager
16:03 - here we have the horizontal axis you can
16:06 - see it's called horizontal here and we
16:08 - can see the different buttons here that
16:09 - is left and right arrow key as well as
16:12 - the a and D key so you can go in here
16:14 - and change it if you want to and there's
16:15 - also one in here called jump which
16:17 - currently has space as the positive
16:19 - button if you wanted to jump on say W we
16:22 - could simply write W here instead in
16:24 - fact let's try right clicking on this
16:26 - jump entry here and hit duplicate array
16:29 - element this is gonna go ahead and
16:31 - create a new button configuration with
16:33 - the same settings let's rename this one
16:35 - to crouch and instead of W we'll use the
16:38 - S key of course if people want to
16:40 - control the character using the arrow
16:42 - keys we can set that up as well we'll
16:44 - just create an alternative positive
16:46 - button so here it will be up for jumping
16:48 - and here it will be down for crouching
16:51 - so now we've set up all of our input and
16:53 - we're ready to make our character crouch
16:55 - and doing this is almost as simple as
16:57 - jumping we go into our update we write
17:00 - if input get button down and the button
17:04 - that we want to look for now is the
17:06 - Crouch that we just created and if this
17:08 - button is pressed well then we want to
17:10 - go ahead and crouch so let's create a
17:12 - variable flat up here it's also gonna be
17:14 - a pole let's call it crouch and let's
17:17 - set it to false by default then if we
17:19 - get the button down we'll set crouch to
17:21 - true and now down in our fixed update
17:23 - instead of just passing in false we'll
17:26 - put in our Crouch valve of course
17:28 - crouching doesn't work in the same way
17:30 - as jumping we don't want to just quickly
17:32 - crouch and then stop instead we want to
17:35 - stop crouching when we release the
17:37 - Crouch button in other words we only
17:38 - want to crouch while holding down Crouch
17:41 - luckily we can also register whenever we
17:43 - release a button to do this let's go to
17:46 - the update function and that's right
17:48 - else if
17:49 - if we don't get a button down we might
17:51 - get a button up so we'll go in put get
17:54 - button up and again the button we're
17:56 - talking about here is the Crouch button
17:58 - and if we get a button up here we'll set
18:01 - Crouch to false so now if we save this
18:04 - and go into unity and hit play we should
18:08 - actually be able to press down in order
18:11 - to crouch however you will really not
18:13 - see anything happen here the reason why
18:15 - is that crouching is of course something
18:17 - that we display with an animation and we
18:19 - don't have any animations on our
18:21 - character however we should see that if
18:24 - we move and then try and crouch and move
18:26 - we move at a much slower pace so it is
18:29 - indeed working we can go between
18:31 - crouching and normal movement and that
18:34 - works just fine however one thing that
18:35 - we also need to have been when crouching
18:37 - is of course the ability to duck under
18:39 - your obstacles for example this platform
18:40 - here if I currently select the player
18:43 - and we make sure that this mouse is
18:44 - enabled at the top here of our game view
18:47 - let's open up our circle and box
18:49 - colliders we can actually see them here
18:51 - if you then try and move onto this
18:52 - platform we can see that we're currently
18:54 - too tall to get under it that's because
18:56 - of this box Collider right here what
18:59 - I've gone ahead and done is under the
19:01 - character controller 2d I've added this
19:03 - Crouch disabled Collider so that if you
19:06 - set up your kaleidos in the same way
19:07 - that I have we can simply take the box
19:10 - Collider and drag it in there and now
19:12 - whenever we crouch the box Collider is
19:14 - going to be disabled and so we're only
19:16 - going to be using this circle Collider
19:18 - in fact we can kind of see this
19:19 - happening if I now press Crouch we can
19:22 - see that the Box disappears and if I try
19:25 - and Crouch my way under the platform it
19:27 - works we can also see that if I try and
19:30 - stop crouching so now I'm gonna release
19:32 - the button while under the platform it's
19:34 - not going to work and that's because
19:36 - we've set up our ceiling check correctly
19:37 - so it's registering that there's
19:39 - something above us and so we don't want
19:41 - to be able to stand up until we get to a
19:43 - point here whether it's no longer
19:45 - something above us and so we'll stop
19:47 - crouching that's super cool of course
19:50 - this currently looks a bit silly since
19:51 - we don't have the Crouch animation but
19:53 - you can see that behind the scenes
19:54 - everything is working as it should and
19:56 - that pretty much includes this first
19:58 - every character controller from here
20:00 - it's completely up to you to try and
20:01 - expand upon it and
20:03 - edit different settings to get the
20:04 - controller feeling the way that you
20:06 - would like it to of course this
20:07 - character could really do with some
20:08 - animation an animation is something
20:10 - that's really fun and simple to add so
20:13 - if that's something that you guys want
20:14 - to see definitely leave a comment down
20:16 - below
20:16 - yeh that's pretty much it for this video
20:19 - if you enjoyed it make sure to subscribe
20:20 - and bring that notification bells so you
20:22 - don't miss the next one also if you
20:24 - haven't joined already make sure to
20:26 - check out the brackish discord channel
20:27 - it was created by some awesome guys from
20:29 - the forum and it's a great place to talk
20:31 - to other developers get feedback or just
20:33 - hang out you can join now by using the
20:35 - link in the description also make sure
20:36 - to check out Skillshare simply click the
20:38 - link in the description to get started
20:39 - on that thanks for watching and I will
20:41 - see you in the next video thanks of the
20:43 - awesome patreon supporters who donated
20:44 - in June and a special thanks to Michael
20:46 - Neely Clintonville Skua andrew kelly
20:48 - Nemco cheetah 3d Alexandra Blair Sybok
20:51 - mummy Jeff Paul sentence Sullivan
20:52 - Superman the great Faisal Merrifield
20:54 - Derek Eames Kirk thanks so long
20:55 - Leela sets Timnath hold up our patron a
20:57 - swinger James Rogers Rob friend Gregory
20:59 - Pierce Nokia vaisakhi Larry tweed The
21:02 - Rasmus joins CAD a breezy car Jackson
21:04 - Chris Wilczewski James P and Robert bond
21:07 - you guys Rock