00:00 - one of the things that we get asked a
00:01 - lot is how to do control input and we've
00:03 - been holding off and doing a video on
00:05 - this while we were waiting for your nice
00:06 - new input system but the input system is
00:09 - now here and it actually makes it really
00:11 - easy to set up everything from gamepad
00:13 - buttons to thumb sticks but before we
00:15 - get into it this video is sponsored by
00:16 - Jason Wyman now of course we've been
00:18 - making videos for a while but sometimes
00:21 - it can be hard to stay motivated when
00:22 - just watching videos by yourself I mean
00:25 - I should know I'm on my ninth year of
00:27 - self-taught game development so to solve
00:29 - this problem
00:29 - Jason is offering courses where you work
00:31 - alongside other students and always have
00:33 - access to one-on-one help from Jason
00:35 - himself I think this is a really cool
00:37 - way to learn and Jason has courses to
00:39 - cover everything from the very
00:40 - fundamentals of game dev to highly
00:42 - professional workflows take for example
00:44 - the unity mastery course he will learn
00:46 - the whole process of creating a game
00:47 - from scratch and really get into topics
00:49 - like audio animation level creation
00:52 - adding abilities to your characters and
00:54 - pretty much everything that is to
00:55 - creating a finished game on top of that
00:57 - Jason has a lot of experience in the
00:59 - industry and it's just really easy and
01:01 - fun to learn from right now we offer the
01:03 - first 50 people who sign up a free
01:04 - t-shirt from line of code as was a big
01:07 - discount and other bonuses on the
01:09 - courses simply click the link in
01:10 - description to get started also special
01:12 - thanks to infinity PBR for his support
01:14 - on patreon and with that pick up your
01:16 - controller and let's get cracking so the
01:18 - first thing that we want to do is go to
01:19 - window and open up the package manager
01:22 - he will make sure to select all packages
01:24 - and under advanced we want to show
01:26 - preview packages we then search for
01:28 - input and you should see the input
01:30 - system here I'm gonna be using version
01:32 - zero point two point ten so make sure
01:35 - you're using this version or later
01:36 - simply click it and install it using
01:39 - this button right here when it's done
01:41 - it's going to ask you if you want to
01:42 - switch over to the new input system
01:43 - simply click yes and make sure to
01:45 - restart unity afterwards to apply the
01:47 - changes otherwise your input won't
01:49 - register in the new system so make sure
01:51 - to restart next up you need to connect
01:53 - your gamepad now this process is going
01:56 - to differ depending on the controller
01:57 - you're using some controllers will be
01:59 - plug and play simply connect them to a
02:01 - computer and your OS will install the
02:03 - needed drivers automatically however in
02:05 - some cases most often if you're using
02:07 - wireless controllers or older
02:09 - controllers like PlayStation 3
02:10 - controllers you need to find the drivers
02:12 - yourself I would
02:13 - looking up your type of controller as
02:15 - well as your operating system and there
02:17 - will be plenty of guides available on
02:18 - how to set up your particular gamepad I
02:20 - have a PlayStation 4 controller here for
02:23 - me it's as simple as connecting it
02:24 - through USB to my Windows 10 stationary
02:26 - computer remember you can always go to
02:28 - settings then devices to see if your
02:31 - device is connected mine is showing up
02:33 - right here once it is you will also see
02:35 - that you Andy prints a lock saying that
02:38 - you connected a joystick finally you can
02:40 - go to window analysis and open up the
02:43 - input debugger if everything is set up
02:45 - correctly you will see all the input
02:47 - devices connected to a computer here and
02:49 - indeed the ps4 controller is showing up
02:51 - yay
02:52 - so now that we have properly connected
02:54 - our gamepad we're ready to start
02:55 - creating our input and with the new
02:57 - input system all this is done using an
02:59 - input actions asset so let's go to the
03:02 - project hit create and let's select
03:03 - input actions at the very bottom here
03:05 - let's call it player controls and it's
03:09 - double click it to open it up in a new
03:11 - window I'm just gonna go ahead and dock
03:13 - this in the center and as you can see
03:15 - it's currently completely empty so the
03:17 - first thing that we need to do is add an
03:19 - action map now action maps are simply
03:21 - used to group together actions that are
03:23 - related to each other in our case we
03:25 - will have very few actions here so we
03:27 - can simply go ahead and create a single
03:28 - one called
03:29 - gameplay which is going to store all of
03:31 - our actions and by default when creating
03:33 - an action map it's also going to create
03:35 - a single action as you can see it's
03:38 - called new action and it currently has
03:40 - no input connected to it so let's go
03:42 - ahead and rename this action here to
03:44 - grow and that's because I've gone it and
03:47 - set up a very very simple example scene
03:49 - here all it has is a camera a light some
03:52 - post-processing and this cube and I
03:54 - thought we could use the inputs to
03:56 - control this cube so let's start by
03:58 - having our cube grow every time we press
04:00 - a button and that's why we're calling
04:02 - this action grow we then need to add a
04:05 - binding to this action which means that
04:07 - we are telling it what we need to press
04:09 - in order for the action to be triggered
04:10 - so let's select the no binding here and
04:13 - to the right we now have a menu for
04:15 - going into all of the different types of
04:17 - input and choosing a button you can see
04:20 - for the gamepad here we have all of the
04:22 - different available buttons and you will
04:24 - notice that these buttons have very
04:25 - generic name
04:27 - this is because they will automatically
04:28 - map to the controller you have connected
04:30 - you can also choose to bind to specific
04:32 - controllers if you want they are at the
04:35 - bottom here and you can see there's a
04:37 - ps4 controller that's an Xbox controller
04:39 - and so on or you can simply select from
04:42 - this list here and everything will be
04:43 - set up for you so in my case here I want
04:46 - to use the button south which is right
04:48 - here
04:49 - however what we can also do is hit this
04:51 - listen button right here we then pick up
04:53 - our gamepad and press the key that we
04:55 - would like to trigger and you can now
04:57 - see that it notices that we've pressed
04:59 - this button the button south and we can
05:02 - then choose it I think that's just a
05:04 - really cool feature and it makes it so
05:05 - much faster to quickly set up your input
05:07 - so now we've set up our grow button
05:09 - let's go ahead and add a couple more
05:11 - actions so let's hit the plus sign here
05:13 - next to action and this one is going to
05:15 - be for moving around our cube so we'll
05:18 - just call it move and I don't want to
05:19 - bind this to a button instead I want to
05:22 - bind it to the left thumbstick so to do
05:24 - that we'll again it's like no binding
05:26 - here and for the path we can again go
05:29 - under the gamepad and we can of course
05:31 - find the thumbstick or we could just hit
05:34 - listen I'm gonna move around the
05:36 - thumbstick a bit and as you can see it
05:37 - shows all the different variants of this
05:39 - input we just want to choose the default
05:41 - left stick for the gamepad and now we've
05:43 - bound the thumbstick really really easy
05:46 - stuff
05:46 - in fact let's go ahead and do this again
05:48 - for the right stick and let's have it
05:50 - control our rotation so we'll create a
05:53 - rotate action let's again go to the path
05:55 - and listen I'm gonna move around the
05:57 - right thumbstick
05:58 - and here we get the right stick that's
06:01 - selected and that's pretty much all we
06:02 - need to do for setting up our input we
06:04 - can now save this input asset it's
06:06 - important that you remember to do this
06:08 - or your changes won't be applied and at
06:10 - this point we're ready to create a
06:11 - script that will do things based on this
06:14 - input and one thing that we can do to
06:16 - make this script writing process much
06:17 - easier is to select our player controls
06:20 - object and check off generate c-sharp
06:23 - class this is going to create a c-sharp
06:25 - script based on the inputs you have
06:27 - specified here this will make it easier
06:29 - for us to program for these inputs
06:31 - because we avoid having to access
06:33 - everything using strings that might
06:35 - sound a bit confusing so let's see this
06:37 - in action let's go ahead and hit apply
06:38 - and you can see on the asset
06:40 - in our project it's now created a player
06:42 - controls c-sharp script now you don't
06:45 - need to edit or worry about this at all
06:46 - just know that it's there so now let's
06:49 - go ahead and create our cube script
06:50 - let's select our cube let's hit add
06:52 - component let's create a cube script and
06:55 - hit create an ad and let's double click
06:57 - this to open it up in Visual Studio so
07:00 - the first thing that we want to do when
07:01 - working with the new input system is
07:03 - make sure that we're using the right
07:04 - namespace so at the top here we'll write
07:06 - using unity engine dot input system we
07:10 - also want to create an instance of the
07:12 - input action acid that we created so we
07:15 - called it player controls so we'll write
07:18 - that here and let's just refer to it as
07:20 - our controls
07:21 - let's also remove our start and update
07:24 - method and that's instead write void
07:26 - awake and remember the awake method is
07:29 - just like start except it's called even
07:31 - before start is then Inc here we can set
07:33 - controls equal to a new player controls
07:37 - object so now we've basically just
07:39 - created a player controls object that we
07:41 - can refer to going forward as controls
07:43 - every time we want to do something with
07:45 - input within this script and the first
07:47 - thing that we want to do is of course
07:48 - make our cube grow whenever the grow
07:51 - action is triggered so let's make some
07:53 - room here and let's go controls dot and
07:56 - if we go into unity now we can see the
07:58 - structure that we need to go through
08:00 - here so first we need to go into the
08:01 - right action map which is game play and
08:04 - we then need to access the grow action
08:06 - so all we need to do through code is to
08:09 - dot then the action map which is game
08:11 - play and then the action which is grow
08:14 - and this is the really neat thing about
08:16 - making sure that we are generating a
08:19 - c-sharp class file because if we didn't
08:21 - do this we would have to go in and for
08:23 - each one of these steps we would have to
08:25 - search for an action map and an action
08:28 - and we'd have to do this using strings
08:31 - which is not at all as solid so that's
08:34 - really cool so now we found the right
08:36 - action but how do we make something
08:38 - happen based on this well first of all
08:40 - we need to understand that each action
08:42 - in the input system has different phases
08:44 - that we can use to trigger input mainly
08:47 - we need to focus on dot started dot
08:50 - performed and dot cancelled in this case
08:53 - we want
08:54 - thing to happen when the player performs
08:56 - the action of pressing the button so
08:57 - we'll use dot performed now this is a
09:00 - callback what that means is that we can
09:03 - add a function to this that will be
09:05 - triggered when the action is performed
09:06 - we do this by writing plus equals and
09:09 - then the name of the function that we
09:11 - want to trigger so let's go ahead and
09:13 - create a function for this so down here
09:16 - we can simply add a function void and
09:18 - let's call it grow and all we want to
09:22 - happen inside this function is we want
09:23 - to go transform dot local scale so we'll
09:26 - take our current scale and let's
09:28 - multiply it so star equals by one point
09:32 - one so this is going to increase our
09:34 - scale a tiny bit and now all we need to
09:36 - do to trigger this function is simply
09:38 - write it up here in other words when
09:41 - this action gets performed we want to
09:43 - make sure that it calls the grow
09:45 - function however you will notice that
09:47 - this is currently giving us a red line
09:49 - and that's because when the performed
09:51 - callback gets triggered it also sends
09:53 - out some information about the context
09:55 - of the event this is great because later
09:57 - when we implement the thumbsticks this
09:59 - will allow us to read a value that tells
10:01 - us what direction they are pointing
10:02 - however in this case here we don't
10:05 - really need this information so to tell
10:07 - you indy how we want to use this context
10:09 - information if at all we can use
10:11 - something called lambda expressions now
10:14 - that might sound really scary but you
10:16 - can basically think of lambda
10:18 - expressions kind of like mini functions
10:20 - so a lambda expression works by
10:22 - inserting a parameter on the left in our
10:25 - case this is the context of our action
10:27 - we can call this anything we want but
10:29 - I'm just going to call it CTX for
10:31 - context then we write equal sign greater
10:34 - than which read says goes to and then on
10:38 - the right we can write an expression and
10:39 - this is why we can do things using our
10:42 - context parameter however in this
10:44 - particular case we just want to ignore
10:45 - it instead we will simply call the grow
10:48 - function so now we're using a lambda
10:50 - expression to tell unity that we are
10:52 - aware that there is some context for
10:54 - this action but we don't really want to
10:56 - use it here we just want to call the
10:58 - function again you will see why
10:59 - performing this step will be useful
11:01 - later when working with some sticks now
11:03 - we're almost ready to test this out we
11:05 - just need to do one thing and that is
11:06 - make sure that we're enabling and
11:08 - disabling these input actions whenever
11:10 - we need them so we can just go ahead and
11:12 - do this inside of an void on enable and
11:16 - as the name suggests this function is
11:18 - going to be called whenever this object
11:19 - gets enabled and here we can just go
11:22 - controls dot game play dot enable so
11:26 - it's simply going to activate all of our
11:28 - actions in this action map and let's do
11:30 - the same thing for disabling so void on
11:33 - disable and here we see me go controls
11:36 - that game play dot disabled and that's
11:40 - all we need to do if we now save this
11:41 - script go into unity let's switch over
11:43 - to our game view and hit play we should
11:46 - see that if I pick up the controller
11:48 - here and press the X button indeed our
11:51 - cube will grow awesome so next up let's
11:54 - implement movement and this really isn't
11:56 - that much harder in fact we're going to
11:58 - start out the exact same way here so
11:59 - we'll do controls dot game play and then
12:03 - instead of using the grow action we'll
12:04 - use dot move dot performed plus equals
12:08 - we'll again
12:09 - name our context CTX goes to and this is
12:13 - where our context gets really useful
12:15 - because we don't just want to know that
12:17 - our thumbstick was moved we want to know
12:19 - in what direction and how far and we can
12:22 - store this in a vector to our movement
12:25 - on the X and our movement on the Y let's
12:27 - go ahead and create a vector to up here
12:29 - and let's call it move then down here we
12:33 - can set move equal to our context
12:37 - dot read value and we're going to read a
12:40 - value of type vector two and let's then
12:44 - just close that off so up here when
12:46 - triggering something we're calling the
12:48 - grow function but down here we don't
12:49 - need to call a function we just need to
12:51 - set move equal to the value of our
12:53 - thumbstick and that's all we need to do
12:56 - we probably also want to reset this
12:58 - value when we're not moving the
12:59 - thumbstick so let's go controls that
13:02 - game play dot move dart canceled so at
13:05 - this point we stop moving the thumbstick
13:07 - and again plus equals context goes to
13:11 - move and this time we can just set it
13:14 - equal to vector to that's zero so just
13:17 - say we're on the X and see wonder why
13:18 - we're not touching the thumbs
13:20 - and now we can use this value anywhere
13:22 - that we'd like so if we want to move our
13:24 - object let's do that inside of an update
13:26 - call so let's go Boyd
13:28 - update and let's create a vector to with
13:31 - the amount that we want to move so let's
13:32 - just call it M here and we'll set it
13:34 - equal to a new vector two which is going
13:37 - to take our movement dot X and our
13:40 - movement dot y and it's multiplied with
13:43 - time that tells a time to make it frame
13:45 - rate independent we then call transform
13:47 - dot translate in order to move our
13:50 - object by our M vector and let's have
13:53 - this be relative to the world space also
13:57 - because I've done this before I know
13:58 - that with my scene we need to reverse
14:01 - the movement on the X so if we save this
14:04 - now and go into unity we should be able
14:06 - to control this cube here up and down
14:09 - and left and right by simply moving
14:12 - around our left thumbstick so let's hit
14:14 - play I'm gonna pick up the controller
14:16 - here and let's try and indeed we can
14:19 - it's working and I can not only control
14:21 - the direction I can also control the
14:23 - speed by only moving the thumbstick so
14:26 - much really really cool so finally let's
14:29 - go ahead and implement the rotation
14:30 - again we'll go controls start gameplay
14:33 - dot rotate this time that performed plus
14:36 - equals our context that goes to and this
14:40 - time we simply want to create a variable
14:41 - for our rotation so let's call it rotate
14:44 - and again we'll set rotate equal to our
14:48 - context that read value of type vector
14:51 - two and the code is so similar that we
14:53 - can simply go ahead and copy from up
14:54 - here so we want to reset it whenever
14:57 - we're canceling it and we just want to
14:59 - change move to rotate and move to rotate
15:03 - over here as well and now inside of our
15:05 - update we can again create a vector two
15:07 - with the amount of rotation we want so
15:10 - let's call it R let's create this based
15:12 - on a new vector to where we'll input our
15:14 - rotate dot Y again we need to reverse
15:18 - this and our rotate dot X and again I'm
15:22 - using the Y here in the X here and I'm
15:24 - inverting some of them just because
15:25 - that's the orientation of my scene if
15:27 - something is flipped for you simply go
15:29 - ahead and remove a minus here or flip
15:31 - the two coordinates we then multiply
15:33 - this
15:34 - by a hundred to make it a bit quicker
15:35 - and also multiply again by time that
15:38 - dealt a time to make it frame rate
15:40 - independent then we're going to write
15:42 - transform that rotate we're gonna rotate
15:44 - based on our R vector and again we'll
15:47 - use world space and that should be it if
15:51 - we now save this go into unity and hit
15:53 - play we can pick up our controller and
15:56 - we should now also be able to rotate and
15:58 - indeed we can awesome so now we can move
16:01 - around we can rotate we can do both at
16:03 - once and we can of course grow the size
16:05 - of our cube by pressing this button yay
16:08 - let's pretty much it for this video if
16:10 - you liked it make sure to subscribe and
16:12 - bring that notification bell so you
16:13 - don't miss the next one also don't
16:15 - forget to check out jason's courses and
16:16 - become a unity wizard in no time simply
16:18 - click the link in the description to get
16:20 - started on that thanks for watching and
16:22 - I will see you in the next video thanks
16:24 - of the awesome patreon supporters who
16:25 - donated in May and especially thanks to
16:27 - infinity PPR Dennis Sullivan Chris
16:29 - Cosentino ski Shane Cleveland face
16:31 - Samara Phi Leela set Ronan Justin Palmer
16:34 - Daniel - sanic Constantinus Corrine says
16:37 - no kirisaki quicker Pierce Erasmus Timah
16:40 - for the park and cool Swedish key you
16:42 - guys Rock