00:00 - hello everyone and Happy Holidays
00:01 - Christmas was three days ago it looks
00:03 - silly now I use unity pretty much every
00:07 - day and for the most part I really enjoy
00:09 - it
00:09 - but there's one big exception to that
00:11 - rule and that is the input system the
00:14 - input system has always been fine when
00:16 - it comes to just quickly slapping
00:17 - something together but as soon as you
00:19 - want to start using multiple controllers
00:20 - through customizable input just use more
00:23 - than a few buttons things start to get
00:25 - really cumbersome so today we'll take a
00:27 - look at a very early version of the new
00:29 - input system that unity is working on
00:31 - but first this video is sponsored by
00:33 - expressvpn expressvpn has several
00:36 - locations in over 90 different countries
00:38 - and is the fastest VPN provider out
00:40 - there by using a VPN you increase your
00:42 - security anonymity and it protects you
00:45 - from hackers expressvpn even uses a
00:47 - strong 256 bit encryption to help
00:49 - protect all your data for me one of the
00:51 - biggest perks has been that it lets me
00:53 - stream the office which isn't available
00:55 - in my country so thanks to expressvpn
00:57 - for allowing me to experienced white in
00:59 - HD a membership is less than seven
01:02 - dollars a month and they even offer a
01:04 - 30-day money-back guarantee so take back
01:06 - your internet privacy today and find out
01:08 - how you can get three months free by
01:09 - clicking the link in the description
01:11 - also special thanks to Andrew clink oh
01:13 - Rudy and Yvonne so hard
01:14 - armand john shannon and extrude ski
01:16 - extended blair and infinity PPR for
01:18 - their support on patreon before we get
01:20 - started i just want to say that the new
01:22 - system is still very much a work in
01:24 - progress
01:24 - and so you'll probably notice some weird
01:26 - behavior here and there that being said
01:28 - i think it looks like a very promising
01:30 - upgrade to the old system especially
01:32 - when it comes to interface it's
01:34 - currently available on github and has
01:36 - been quite a while actually so let's
01:38 - jump right into it so first we of course
01:40 - want to install the new input system
01:41 - currently this is done by a github but i
01:43 - imagine that we'll see some kind of beta
01:45 - release through the package manager at
01:47 - the start of 2019 I'll of course have a
01:50 - link to this in the description you can
01:51 - either clone it or simply hit clone or
01:53 - download and download it as a zip file
01:55 - I've just gone ahead and opened up the
01:57 - project here and created a very simple
01:59 - scene with just a main camera a light
02:00 - and this player object which is just a
02:03 - cube and on this cube I have a player
02:05 - script which is currently just
02:06 - completely empty so to start adding
02:08 - input to our game we first need to
02:10 - create an input asset so if we right
02:12 - click in the project here and go
02:13 - great we can go to the bottom where it
02:16 - says input actions if we click this we
02:18 - can give it a name I'm just gonna call
02:20 - it something like input master this will
02:22 - take care of all the input in this
02:24 - example we then double click this asset
02:26 - and it's going to open up in a separate
02:28 - window I'm just gonna dock this by the
02:30 - game view and as we can see this window
02:32 - is made up of three parts action maps
02:35 - actions and then properties we'll go
02:38 - through these one by one let's start
02:39 - with action maps so action maps are
02:42 - basically categories for actions you
02:44 - could create an action map for your
02:45 - player one for your menu one for
02:48 - vehicles and so on let's go ahead and
02:51 - create a new one for our player now
02:53 - under this action map we can create
02:54 - actions and actions are basically like
02:57 - events examples of actions could be
02:59 - shooting it could be movement it could
03:02 - be reloading or bringing up a menu let's
03:04 - go ahead and create a new action here
03:06 - let's call this one shoot now as you can
03:08 - see once I have an action selected we
03:10 - can adjust properties over here in the
03:12 - properties window this is pretty much
03:13 - like the inspector for actions however
03:16 - under each action there's actually one
03:18 - more thing that we can create these are
03:20 - bindings and bindings are basically like
03:23 - triggers for actions so let's create a
03:26 - binding here for a shoot and with this
03:28 - selected we can go to the right here and
03:29 - under binding we can select a key and
03:32 - you can search for anything I'm just
03:34 - gonna search for the spacebar but you
03:36 - can see here that's one called space and
03:38 - this is under the keyboard device let's
03:40 - click that and now we've found the space
03:43 - key to this shoot action so every time
03:45 - we press space this shoot action is
03:47 - going to be called however you often
03:49 - want multiple keys to do the same thing
03:51 - and we can actually really easily do
03:53 - that here if we want another button to
03:55 - do shooting as well we can simply add
03:57 - another binding and we could for example
03:58 - bind this to mouse click so we'll search
04:01 - for a mouse and now we'll get all the
04:03 - mouse input options
04:04 - we'd input stuff like position or scroll
04:07 - here or simply use the left button so
04:10 - now we can either shoot using space on
04:12 - the keyboard or a left button on the
04:14 - mouse let's go ahead and add another
04:15 - action so we'll hit the plus sign on the
04:18 - actions and that's called this one
04:19 - movement and depending on your game you
04:21 - might want to move in multiple
04:23 - directions and a nice thing about the
04:25 - old system was that
04:27 - we could use this input.getaxis to
04:29 - simply get a value for each axis that's
04:32 - specified in what direction we were
04:34 - traveling and how quickly and we can
04:36 - actually set up the same behavior here
04:38 - really is the using multiple bindings
04:40 - however instead of having to go in and
04:42 - create a bunch of bindings we can
04:43 - actually create these automatically
04:45 - using either a composite axis or a
04:48 - composite d-pad the composite axis is
04:50 - going to use one axis so it's going to
04:52 - go between negative and positive on this
04:55 - axis just like you would get axis
04:57 - horizontal or vertical or use create
05:00 - composite d-pad to move in four
05:02 - directions but before we start binding
05:04 - these keys we need to think about what
05:06 - control scheme we are using so currently
05:09 - everything that we're setting up here is
05:10 - for keyboard and mouse however a lot of
05:13 - the time you want to be able to support
05:15 - both keyboard and mouse game pads of
05:17 - different sorts maybe you want to do
05:19 - touch controls and we of course need a
05:21 - way to configure this in our input
05:22 - system we can do that really easily
05:24 - using control schemes in the left top
05:27 - hand corner here you can see it
05:28 - currently says no control scheme let's
05:30 - go ahead and add a new control scheme
05:32 - instead and it's going to open up this
05:34 - window this might be one of those weird
05:36 - behavior things I was talking about
05:38 - because it really shouldn't appear over
05:40 - here I don't think but nonetheless we
05:41 - can go ahead and create a scheme name
05:43 - and this could be keyboard and mouse we
05:46 - then add a device that we want to use
05:47 - with this control scheme and for some
05:50 - reason the list of devices is only
05:51 - turned on my secondary monitor and I'm
05:54 - unable to move it but I promise you it
05:56 - shows a list of devices and we can
05:58 - search for the one we want I'm just
05:59 - going to search for keyboard and add it
06:01 - and we can now see it on the list and we
06:03 - also want to add a mouse here and we can
06:05 - now see that we've added both a keyboard
06:07 - and a mouse device and it's now hit add
06:09 - to create this control scheme if we then
06:12 - go to the top we can add another control
06:14 - scheme this one is going to be gamepad
06:16 - and let's then add the gamepad device
06:18 - that's it add and we've now created two
06:21 - control schemes keyboard and mouse and
06:22 - the gamepad if it's like no control
06:25 - scheme it's just going to show all of
06:26 - them so for our first two actions here
06:28 - we want to make sure to select these as
06:30 - keyboard and mouse and let's also do
06:33 - that for the for movement once we just
06:35 - created and now we should see that when
06:37 - we switch to the keyboard and mouse
06:38 - scheme all of our bindings for the
06:40 - actions show let's also add some keys to
06:43 - these bindings so for up here we'll
06:44 - choose up arrow for down we'll select
06:47 - down arrow same for left and right let's
06:50 - rename this binding here to arrow keys
06:53 - in fact let's create another set of
06:55 - bindings here so let's create another
06:57 - composite d-pad and let's call this one
06:59 - best keys under up let's go ahead and
07:02 - bind W down it's bind s a for left and D
07:06 - for right and let's set all these to use
07:09 - the keyboard and mouse control scheme
07:11 - and we should now see that if we change
07:12 - our control scheme up here to keyboard
07:14 - and mouse everything still looks the
07:16 - same however if we switch to gamepad we
07:20 - still see both of the actions but all
07:22 - the bindings disappear because the
07:24 - bindings aren't set for the gamepad
07:25 - instead we can go in here and create our
07:27 - own bindings for the gamepad so let's go
07:29 - and add a binding for shoot and this
07:31 - could be something like button West and
07:34 - it automatically goes on the gamepad now
07:36 - for movement we could create a d-pad and
07:39 - up here we'll search for a d-pad so
07:41 - d-pad up d-pad down left and right we
07:45 - now see that for each one of these
07:46 - bindings we can add processors and these
07:49 - will help you configure the input so if
07:51 - we want to invert it clamp it normalize
07:53 - it adjust the sensitivity we can do
07:55 - stuff like that here using processors
07:57 - now let's switch back to keyboard and
07:59 - mouse and it looks like we're now ready
08:01 - to integrate this with our game play so
08:03 - let's save the asset here and one thing
08:05 - that is really nice about the new system
08:07 - when working with it through code is
08:09 - that it allows us to generate a c-sharp
08:11 - class based on our input configuration
08:13 - what this saves us from is using a bunch
08:16 - of strings to get the right actions
08:18 - based on their names this is something
08:20 - the old system was definitely suffering
08:22 - from and it's nice to see that unity is
08:24 - working around this and you definitely
08:26 - still have the possibility to use
08:28 - strings if you'd rather do that now to
08:30 - generate a c-sharp class we just have to
08:32 - toggle that here and we don't need to
08:34 - fill out any of these variables we can
08:35 - simply hit apply and as you can see
08:36 - unity is now going to create an input
08:38 - master c-sharp script next to our input
08:41 - master asset we don't need to make any
08:43 - modifications to this we can actually
08:44 - open it up and change it if we would
08:46 - like to this is just generated code from
08:49 - unity now let's open up our players
08:51 - script and as you can see here it's a
08:53 - completely new school
08:54 - let's just get rid of the two default
08:56 - methods here and at the top here we want
08:58 - to be using the Unity engine dot
09:00 - experimental and this is of course going
09:02 - to go away dot input now the first thing
09:06 - that we want is of course a reference to
09:08 - the input ads that we just created and
09:10 - because we've made it generate a c-sharp
09:12 - class based on this acid we can actually
09:14 - just create a variable of type input
09:17 - master so let's create a public input
09:19 - master and let's call it controls now if
09:22 - we just quickly create a function here
09:24 - that's create avoid awake and if you've
09:26 - never used awake before it's just like
09:28 - start except it's cold even before start
09:31 - is called so it's really good to use for
09:32 - setup now in here if we write controls
09:35 - and then Godot we can actually access
09:37 - our player action map and if we press
09:40 - dot again we can see the different
09:42 - actions under this map we can see
09:44 - movement and shoot here if we go shoot
09:46 - and then right dot performed we can
09:49 - choose what happens when the shoot
09:50 - action is triggered so when any of the
09:53 - keys bound to this action is pressed
09:54 - then we can choose what happens and
09:56 - let's go ahead and create a function for
09:58 - that so let's create some kind of void
10:00 - let's call it shoot let's just right now
10:03 - throw out a debug that large saying we
10:05 - shot the sheriff so now we can simply
10:08 - take this method and register it to this
10:10 - button to do that we go plus equals and
10:13 - the syntax here is a bit weird if you've
10:15 - never worked with delegates or events
10:17 - but think of it like we're adding this
10:19 - function to a list of functions that
10:21 - should be called whenever this action is
10:23 - triggered and because the system is so
10:25 - cold it actually gives us some context
10:28 - as to what is happening with this button
10:30 - we're not going to be using this
10:31 - information here but we actually still
10:33 - need to write it let's create some kind
10:35 - of variable called context and again the
10:37 - syntax here is weird we then do equals
10:39 - and then a greater than sign and then we
10:42 - specify the function so in our case this
10:44 - is going to be shoot again bear with the
10:47 - weird syntax here you can call this
10:48 - variable anything you'd like you can
10:50 - call it context or because we're not
10:52 - going to be using it we could just do an
10:54 - underscore here and then it just looks
10:56 - like we're kind of adding this shoot
10:58 - method to this list think of it like
11:01 - that for now and this should actually
11:03 - probably trigger our function however we
11:06 - do need to first in
11:08 - our input master so because the system
11:11 - is so modular and we want to be able to
11:13 - swap in and out different input assets
11:15 - and we want to switch between control
11:17 - schemes and all that we can basically
11:19 - enable and disable all parts of the
11:21 - system in our case here we just want to
11:23 - enable our controls so let's create a
11:26 - void on enable so whenever this game
11:28 - object is enabled
11:29 - let's also enable our controls so we can
11:32 - do controls dot enable and let's do the
11:35 - same thing for disabling so let's create
11:37 - a void on disable and it's just right
11:39 - controls dot disable so now the controls
11:42 - are going to turn on and off together
11:44 - with this object which is fine for now
11:46 - and now we can actually save this go
11:48 - into unity let's select our player and
11:50 - let's drag in the input master asset not
11:52 - the generated script and now when we hit
11:54 - play we should see that if I press the
11:57 - mouse button here
11:58 - indeed it prints we shut the sheriff and
12:00 - the same thing happens if I press space
12:02 - you also see that it triggers twice each
12:04 - time one for when I press the button and
12:06 - one for when I release it to get rid of
12:09 - this we can go under our input master we
12:11 - can find the button and under into
12:13 - actions we can choose press and let's do
12:16 - the same thing for our left button here
12:18 - so now it's only going to trigger on
12:20 - press and not on release let's save that
12:22 - and try replaying and indeed I now have
12:26 - to press each time we want it to display
12:29 - and nothing is going to happen on
12:30 - release awesome but how do we handle the
12:33 - more complicated case with movement
12:35 - where we are able to travel in all kind
12:37 - of directions for one particular action
12:40 - well this is where the context is
12:43 - extremely cool so let's go ahead and
12:45 - create a function here for what we want
12:48 - to happen with movements let's create a
12:49 - void let's call it move and in here
12:52 - let's throw another debug deadlock
12:54 - saying something like player wants to
12:57 - move well we can of course register this
13:00 - in the exact same way as with the suit
13:02 - function so that's two controls dot
13:04 - player dot movement dot performed plus
13:07 - equals let's write context this time CTX
13:10 - the weird syntax here and then move and
13:14 - now if we save that and go into unity
13:16 - and play and I'm just going to use the
13:18 - arrow keys here we can see that the
13:20 - player wants to move
13:22 - each time I press one of the arrow keys
13:23 - and the same thing for the vast keys
13:25 - hardly this has no indication of which
13:28 - one of the arrow keys we're pressing and
13:30 - so we don't know what direction to
13:32 - specify this we can go in and let's
13:34 - first of all add this as an argument to
13:35 - our move function so let's create some
13:37 - kind of vector - and it's called this
13:40 - direction and then when we debug the
13:42 - locking here we can maybe create a bit
13:44 - of space and add on the direction to
13:47 - this message so now we should be
13:49 - printing the direction that we want to
13:51 - move in and the only thing that we need
13:53 - to change up here is that we now need to
13:55 - use our context to specify what
13:58 - direction we want to move in and luckily
14:00 - we can do that really easily if we do
14:02 - context dot we can get all kinds of
14:04 - information about what's happening with
14:06 - this event so we can see the action that
14:09 - got triggered we can see the control
14:11 - that triggered the action the duration
14:13 - stuff about into action the phase and we
14:16 - can also read a value so if we do dot
14:19 - read value here and we specify that we
14:21 - want to read a vector2 value and open
14:24 - and close some parentheses well now
14:26 - we're basically feeding the value of our
14:28 - input into the move function and so we
14:30 - can simply access it down here as
14:32 - direction and if we save that and go
14:34 - into unity and play we can see that if I
14:37 - move to the right here it goes 1-0 if I
14:40 - go left it goes - 1 0 if I go up it goes
14:44 - 0 1 and if I go down it goes 0 - 1 and I
14:49 - can combine these to create kind of
14:50 - smooth input in different directions and
14:53 - this works without the arrow keys and
14:55 - the vast input if I connected a gamepad
14:58 - and tried this out it would work in just
15:00 - the same way awesome so that's how you
15:02 - can create really complex input
15:04 - scenarios fairly easily using the new
15:07 - input system however a lot of the time
15:08 - especially when just messing around you
15:10 - don't want to go through all these steps
15:12 - of first doing something in the UI and
15:14 - then hooking it up through script this
15:16 - is a really good way of doing things but
15:18 - sometimes you just want to check for a
15:19 - button press and to do this really
15:21 - easily we can actually get rid of all
15:23 - this stuff let's just say we want to
15:25 - check for air press in the update method
15:27 - let's create an update method and the
15:29 - easiest way to do this is using input
15:31 - system dot get device and here we could
15:34 - get any device so
15:36 - in our case we want to get something on
15:37 - the keyboard and let's just store this
15:38 - in a quick variable type keyboard and
15:41 - it's just called a KB and then we can
15:43 - simply check if KB dud space key that
15:47 - was pressed this frame well then let's
15:49 - go ahead and debug that lock someone
15:51 - pressed space and let's save that go
15:55 - into unity and play and now every time I
15:58 - press space that message is going to
16:00 - appear so you can see there's plenty of
16:02 - opportunity for using the system through
16:04 - code as well
16:05 - awesome that's pretty much it for this
16:07 - video if you enjoyed it make sure to
16:08 - subscribe so you don't miss a future one
16:10 - also make sure to check out expressvpn
16:11 - simply click link in the description to
16:14 - find out how you can get three months
16:15 - for free and if you haven't already
16:16 - checked out our new store for game dev
16:18 - clothing definitely make sure to do so
16:20 - simply go to the line of code that I owe
16:21 - and grab a shirt you like and that
16:23 - thanks for watching and I will see you
16:25 - in the new year which is going to be fun
16:30 - thanks of the awesome pitch and
16:32 - supporters who donated in November and
16:34 - special thanks to make a cane and your
16:36 - Canon ink Oh art Arman to VR systems
16:38 - extend the player infinity PPR
16:40 - Sybok mummy and Sullivan chef Abdullah
16:42 - Chris faced murphy thanks Allen Lila set
16:44 - fit sentence Cuba shreya ste Ronan
16:46 - Bruins cat no Kiyosaki Gregory Pierce
16:49 - Mary tweet cool Swedish key tips rogers
16:51 - repair car Jackson / Campania Robert
16:54 - punt Erasmus Anthony Patton of breezy
16:56 - James P Timothy bar John Shannon Alec
16:59 - Sharratt ski Travis Dylan Rudy in
17:00 - Toronto and casting Sue Ellen you guys
17:02 - Rock