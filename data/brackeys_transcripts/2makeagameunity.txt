00:02 - hello everyone and welcome to the second
00:05 - video in make a game a series on making
00:09 - a cool video game in unity in the last
00:13 - one we set up a basic scene install the
00:16 - tools we are going to be using and I
00:18 - explained a few things about the UI in
00:20 - this one we are going to talk about
00:22 - components do a little bit of scripting
00:26 - and therefore we get our character or
00:28 - our ball rolling in our scene so as
00:33 - always I've opened up unity and once I
00:37 - opened it up after having saved my scene
00:40 - and closed down my computer I was met by
00:43 - a completely blue blue screen to fix
00:47 - this you simply have to double click the
00:50 - level or whatever you saved it as I
00:52 - saved it as level 1 this is because by
00:56 - default unity doesn't always load up the
00:58 - scene you want it to so just double
01:01 - click that and say it don't save to the
01:04 - current scene now we have our level
01:07 - loaded to save a level or loader level
01:10 - you could always go up to file save
01:14 - scene or open scene okay so for now
01:20 - let's first of all explain what is a
01:23 - game object and what is a component if
01:27 - you for example select our ball we can
01:30 - see that there is a lot of information
01:32 - over in the inspector panel the bolt is
01:36 - a game object and everything you see on
01:39 - the ball is properties for that game
01:42 - object but the properties has split up
01:45 - into different sections these sections
01:47 - are called components and you can choose
01:50 - whether or not you want on a component
01:52 - to be on a game object it's all up to
01:55 - you by default when we create a sphere
01:58 - it has three basic components it has the
02:02 - sphere mesh filter this is what makes it
02:05 - round it has the sphere Collider which
02:09 - makes it able to collide with other game
02:11 - objects
02:12 - then it has the mesh renderer which will
02:15 - show it in the scene and it will do that
02:18 - using a material and by default that's
02:22 - called default diffuse so that's what
02:25 - giving it the gray color the material
02:30 - also defines stuff like transparency and
02:32 - reflectivity now let's move on so that's
02:38 - the basics of components we want to
02:40 - create a new component a script where we
02:43 - can tell the bowl that whenever it will
02:45 - press certain keys we needed to get
02:48 - rolling but first we wanted to actually
02:51 - collide and move in physics space
02:55 - because right now when we play a game we
02:58 - can see it's completely still even if we
03:01 - go onto our scene select the ball go to
03:05 - the scene view hit F to focus on it and
03:08 - you can see right now I'm in wireframe
03:10 - mode so we can go up here in the left
03:12 - hand corner of the scene view so it's
03:14 - too textured which is where you want to
03:16 - be in the most of the time and move it
03:19 - up and then hit play you can see that
03:23 - the ball doesn't fall to the ground this
03:26 - is because we have to add some physics
03:29 - this is mostly done using a rigidbody go
03:34 - to add component if you don't have this
03:37 - you have an older version of unity then
03:39 - you can go to the top where it says
03:41 - component anyway go to add component go
03:46 - into physics select rigidbody now
03:51 - physics are applied to our ball we have
03:54 - different properties to adjust which you
03:56 - can always look up if you are unsure on
03:59 - what stuff does remember that increasing
04:02 - the mass won't make it fall faster now
04:07 - let's hit play we can now see that our
04:11 - ball drops to the ground if we also move
04:14 - it over a bit we will see it roll off
04:16 - the plane oops maybe a little more like
04:24 - this we can also too
04:26 - take our game view and drag it over so
04:29 - we can all so we can observe the game
04:31 - while it's playing in the scene view
04:33 - also lets it play and the ball rolls off
04:39 - now let's take the game view and put it
04:42 - back
04:43 - let's also adjust the position of our
04:45 - ball back again on the z axis needs to
04:48 - be zero and we can drag it down again
04:51 - not too low oils the bulb will fall
04:54 - through the cube so just a tad over
04:59 - that's perfect if you're experiencing
05:02 - that your ball is falling through the
05:04 - cube no matter what make sure that both
05:07 - the ball has a sphere Collider and that
05:09 - the ground has a box Collider attached
05:12 - if we for example disable the Box
05:14 - Collider the sphere will fall right
05:17 - through
05:19 - notice that our box here our ground is
05:23 - static it isn't moving that's because we
05:25 - haven't added a rigidbody component
05:28 - that's something you want for ground
05:30 - things ok so now let's create the script
05:35 - that will make our ball move to do this
05:38 - go to add component new script and let's
05:43 - call this ball control we are going to
05:50 - be using javascript in this series since
05:53 - I think it's the easiest to learn but
05:55 - you can feel free to follow along in C
05:57 - sharp or boo I recommend you have a
06:00 - script for beginners now let's hit
06:03 - create an ad now it's time to load up
06:07 - the script in monodevelop so
06:10 - double-click it normally unity will open
06:13 - scripts in monodevelop though it's not
06:16 - always installed with unity so sometimes
06:19 - you have to do it manually you can do
06:21 - this by going to mono develop calm
06:26 - Heelys download it and then select it in
06:30 - unity i'll show you how to do that in a
06:33 - sec you can always choose to use another
06:36 - program such as notepad plus plus which
06:38 - is great for window
06:40 - or TextWrangler which is great for mac
06:43 - it's really up to you most beginners are
06:46 - fine with monodevelop
06:48 - to choose what text editor you want to
06:51 - use go to unity edit then preferences
06:56 - under external tools you see the
07:00 - external script editor here you can
07:02 - choose the team between programs if
07:05 - unity doesn't recognize it you can
07:07 - browse and find where you installed it
07:09 - it's that simple
07:12 - okay so here's the script opened up in
07:15 - monodevelop
07:16 - by default unity will include the start
07:20 - function and the update function along
07:23 - with the prac Maastricht the prog
07:26 - Maastricht can just be ignored this will
07:28 - make sure that you don't do things that
07:30 - are completely insane detecting on the
07:33 - computer but least some of them the
07:37 - function stat we can just remove that
07:39 - that's what's called just when you start
07:41 - the game so anything you put between
07:44 - these two bracket keys the open and
07:47 - closed one will be called just when
07:50 - starting the game this is where you can
07:53 - do stuff like finding the player or
07:55 - setting up a level let's just remove
07:59 - this then we have the function update
08:04 - the function update is called every time
08:07 - the computer draws a frame just like
08:10 - movies computer games are drawed by a
08:14 - series of images this is called every
08:18 - time one of those images appear this
08:22 - means that we can put stuff here such as
08:26 - checking for input and then doing
08:28 - something for example movement controls
08:31 - we can also put stuff like checking if
08:34 - the player has entered a certain region
08:36 - and then doing something based on that
08:40 - that's usually done using stuff like
08:43 - function on trigger function on
08:46 - collision and so on so there are many
08:48 - ways to define when something should
08:51 - happen for now let's create
08:54 - something inside the function update
08:56 - what we are going to be here is simple
08:59 - movement we're going to be using the
09:01 - built-in physics system in unity to make
09:04 - our ball rotate and therefore roll off
09:08 - in the direction we wanted to to do this
09:12 - let's type var rotation of type float
09:21 - equals input dot get axis and of course
09:29 - remember that unity is cap sensitive let
09:33 - me just zoom in on this so you can see
09:35 - more clearly what going what's going on
09:38 - input that get axis horizontal times
09:48 - rotation speed this is quite confusing
09:55 - and I don't expect you to understand
09:57 - everything that's going on here
09:58 - basically we are making a variable
10:02 - called rotation a variable is something
10:05 - that stores something such as a number
10:09 - or whether something is true or false it
10:14 - could also store a player by an object
10:18 - this is the name of the variable this
10:21 - can be whatever you want we use this
10:24 - name to reference the this variable so
10:28 - variables are basically used it instead
10:30 - of typing in numbers every time of
10:32 - finding the player all the time we can
10:35 - do it once and then reference it by name
10:38 - this is a type float that means a number
10:42 - with decimals and it's equal to input
10:46 - that get axis horizontal this is
10:50 - something unity are set up for us to
10:52 - easy easily make our game respond to a
10:55 - and D keys such so that we can row to
10:59 - the right and to the left this will also
11:02 - work with the arrow keys and it will
11:06 - also scale to
11:07 - consul's then we are going to multiply
11:11 - it by the rotation speed
11:14 - that's another variable we are going to
11:16 - be creating in a second and that's
11:18 - something we can adjust inside of unity
11:20 - without even doing any scripting that's
11:23 - the easiest way to quickly adjust what
11:26 - how fast you want the ball to rotate so
11:30 - let's make that variable this is done
11:32 - above the function update because we
11:35 - want this to appear inside of unity
11:38 - let's type var space rotation speed
11:44 - again you can call this whatever you
11:46 - want as long as you both change it here
11:49 - and here this is going to be equal to a
11:53 - hundred this is just the lucky guess
11:57 - since I know what kind of number we're
11:59 - looking for you can easily change this
12:02 - however you want and if we save this now
12:05 - it won't be working but we can see that
12:08 - when we select the ball which has our
12:10 - script applied we have a new property
12:13 - called rotation speed which we can drag
12:16 - on or type a new number into it's
12:20 - completely up to you how fast you want
12:22 - your ball to be going cool now let's do
12:28 - more with the rotation so now a new line
12:32 - below var rotation we're going to type
12:35 - rotation x equals time.deltatime we are
12:46 - going to ignore this line for now just
12:48 - type after me basically we're making
12:51 - sure that our ball reel will rotate and
12:54 - keep on rotating in the same amount
12:57 - depending o not depending on your frame
13:00 - rate if that was complete bla bla please
13:04 - just skip this now make a new line type
13:08 - in rigidbody because now we're
13:13 - referencing the rigidbody where we can
13:16 - do stuff like add forces or add torque
13:20 - we are going to add relative torque
13:24 - torque is like pushing an object to make
13:28 - it rotate and that's what we want to do
13:31 - then open up a parentheses type vector
13:35 - three dot back space times rotation
13:43 - close up the parentheses and end it with
13:47 - a semicolon you might have noticed that
13:50 - all these three lines and also the
13:52 - variable one and with semicolons all
13:57 - commands does this so whenever you are
13:59 - making a variable or rotating something
14:03 - or making something another color every
14:06 - time you do something you enter line
14:08 - with a semicolon this is very important
14:11 - also make sure that the function update
14:14 - has a capital u since many forget this
14:17 - and unity won't recognize it cool let me
14:23 - just explain this line we are telling
14:26 - our rigidbody that we want to rotate it
14:28 - that's what the first part does then
14:32 - inside of the parenthesis it asks us how
14:36 - do you want to rotate it we want to use
14:38 - the vector three dot back we can use the
14:43 - vector three which basically means 3d
14:46 - coordinates to do stuff like vector 3
14:49 - dot forward or week 2 3 left if I want
14:58 - to invert it I can simply do x -1 for
15:05 - now we'll do that back since that the
15:07 - axis that's the axis we are going to be
15:09 - working with then we multiplied with the
15:13 - rotation which was the amount we made up
15:16 - here that's going to make it rotate
15:19 - depending on the rotation speed the
15:22 - input axis and the time that Delta time
15:25 - so it won't be dependent on framerate I
15:28 - know this was a lot to take in and I
15:31 - definitely don't expect you to
15:33 - and everything if you do well
15:36 - congratulations you are much quicker
15:38 - than I am now it's same let's head into
15:42 - unity and see if it's working you can go
15:46 - to the console and check for errors just
15:48 - ignore the one that was there we can see
15:52 - right now we don't have any errors
15:53 - should you have an error feel free to
15:56 - write to me oh and also there are always
15:59 - the unity answers page with a lot of
16:03 - nice people willing to help you out of
16:05 - course reach the read the error message
16:08 - and see if you can answer it yourself
16:11 - now let hits let's hit play and if we
16:16 - now hold down the D key we can see the
16:19 - ball rolling off let's replay this and
16:23 - we can also roll the other way and we
16:26 - can basically control it however we want
16:29 - congratulations you have now created
16:31 - your first script and made some pretty
16:34 - cool functionality already this is
16:36 - already a fun game in that you can
16:38 - duplicate the ground and make a lot of
16:41 - these all around to make it hard for the
16:44 - ball to reach a final destination so
16:48 - feel free to play around with this in
16:50 - the next video we are going to be
16:52 - expanding on this to do stuff like
16:54 - jumping and also make it more exciting
16:58 - to look at thank you for watching and
17:01 - I'll see you in the next video