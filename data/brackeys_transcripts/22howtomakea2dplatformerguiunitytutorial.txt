00:05 - you can see that now we've reached the
00:07 - final Point uh which is doing the actual
00:10 - programming so let's hit add component
00:14 - and uh let's crave a wave UI script
00:18 - let's H create an ad and we could
00:20 - implement this directly into the wave
00:22 - spawner but I like the idea of uh
00:24 - keeping these separate so let's double
00:26 - click that to open it up in uh Visual
00:28 - Studio and uh I'm simply going to
00:31 - removing the uh using system.
00:33 - collections namespace and in instead be
00:36 - using uh Unity engine.
00:39 - UI and uh the first thing that we want
00:42 - to be creating here is a uh serialized
00:45 - field because this is going to be
00:47 - private and uh we want a reference to
00:50 - the wave spawner because uh the wave
00:53 - spawner keeps track of its current state
00:56 - uh the countdown timer and all that and
00:58 - we want to have access to those so we
01:00 - need a reference to the wave spawner and
01:02 - we're just going to name this uh
01:04 - spawner and we also need some kind
01:08 - serialized field we also need to uh have
01:12 - a reference to our animator so this is
01:15 - going to be the of type animator and uh
01:19 - let's just call this wave
01:22 - animator and uh in the start method we
01:25 - can check if uh these are actually
01:29 - referenced actually we need some more so
01:31 - let's just do a serialized field we need
01:34 - a text object that stores our uh wave
01:38 - countdown
01:41 - text and a serialized field that
01:46 - stores or a text object that stores a
01:49 - wave count text or a wave number text so
01:54 - cool that's all of the references that
01:57 - we're going to be needing I think and
01:59 - now in the method we can simply uh add
02:01 - some checks to make sure that uh these
02:04 - are actually uh filled in so if spawner
02:08 - is equal to
02:12 - null then we want to throw an
02:18 - error saying that uh no spawner
02:25 - referenced and then we can simply
02:27 - disable the component
02:31 - and we want to do this for all of the
02:33 - variables so let's
02:36 - just copy that if statement a bunch of
02:39 - times and first for the wave animator
02:42 - wave animator wave animator then for the
02:46 - uh wave countdown
02:48 - text and finally the wave count
02:53 - text cool and uh then in the update
02:57 - method uh we want to have some kind of
02:59 - logic that will
03:01 - um that will kind of do things depending
03:04 - on what state the wave spawner is in and
03:07 - therefore we need uh to have access to
03:10 - the state of the wave spawner but with
03:12 - if we go ahead and look at the wave
03:14 - spawner as is you can see that the spawn
03:16 - state is currently private we have this
03:19 - enum that uh can go uh between spawning
03:22 - waiting and Counting uh and that's
03:25 - stored in in state but it's private so
03:29 - instead of just making this public and
03:31 - available uh fully available to the
03:33 - script I want to create a getter for
03:36 - this because I don't want us to be able
03:38 - to change the spawn State that's
03:39 - something that uh the wave spawner
03:41 - should have full authority over uh but I
03:44 - want us to actually access the spawn
03:46 - state so in order to do this uh I simply
03:49 - want to keep that private and then
03:51 - create a public spawn
03:54 - State and uh we'll just name this state
03:57 - with a capital S and uh then open up
04:00 - some curly brackets and create a getter
04:04 - that will return the
04:06 - state and that's all we need to do also
04:10 - I want to maybe move this PO no let's
04:14 - just keep that in here that's fine never
04:16 - mind good so uh now that we have that I
04:19 - want to do the same with the wave
04:21 - countdown because that's also something
04:23 - that we want access to later uh when we
04:26 - change we're changing the uh text so I
04:29 - want to create a a
04:31 - public float wave countdown with a
04:34 - capital W and uh this is going to have a
04:38 - getter that
04:40 - returns wave
04:44 - countdown and finally for
04:47 - the uh next
04:51 - wave
04:53 - uh let's just wait with that I think uh
04:58 - because I don't remember the index of
05:02 - this um okay let's just create the
05:05 - getter now and then we'll change it so
05:07 - for now we'll simply say that public
05:10 - float or public integer uh next
05:14 - wave is going to
05:17 - get
05:19 - next or return next
05:23 - wave we might need to do some kind of
05:27 - subtraction here or addition I don't
05:30 - know so we'll find out so for now we can
05:33 - then go into uh wave UI and we can
05:36 - create a switch statement that will do
05:38 - different stuff depending on the state
05:40 - so switch depending on uh the spawn
05:44 - state so that means that we can get the
05:46 - uh
05:47 - spawner do
05:51 - state and uh the different cases that we
05:54 - want to have is case uh case one where
05:58 - uh
06:00 - spawner do state is equal to wave
06:03 - spawner dos spawn state. counting so we
06:07 - are currently counting in which case we
06:10 - will do the following so then we will
06:13 - call some kind of method that will say
06:15 - that we are counting so let's make that
06:17 - method and it's going to be a void and
06:20 - then it's going to be called update
06:23 - countdown
06:26 - UI and in here for now we're simply
06:29 - going to be saying debug.log
06:34 - counting and uh we can then call this
06:37 - method in here and break because we
06:40 - don't want to fall through to the other
06:43 - layers then case wave
06:46 - spawner do spawn
06:49 - state do
06:52 - spawning and in here we want to update
06:55 - the um incoming
07:01 - UI and
07:04 - break or maybe we should call this
07:06 - despawning UI yeah we should probably do
07:11 - that and maybe we
07:14 - should yeah let's rename this to update
07:18 - counting
07:20 - UI I think that's better cool and let's
07:23 - create this method now so let's just
07:25 - duplicate this rename it to update
07:27 - spawning UI and this should should say
07:31 - spawning so we're calling different
07:34 - methods depending on the state and uh
07:37 - that's all we are going to do for now
07:39 - let's just see if that is indeed working
07:42 - so let's go into Unity we have no errors
07:44 - but we should have a bunch of slots and
07:46 - let's just fill these in so the animator
07:48 - is going to go there the GM object is
07:50 - going to go there because that has the
07:52 - wave spawner the wave countdown text is
07:55 - going to go there and the wave count
07:57 - text is going to go there
08:00 - cool so now when we hit play we should
08:02 - see down here that it says counting
08:04 - Counting counting Counting and when
08:06 - we're done it should say spawning
08:08 - spawning spawning and it does so that's
08:12 - perfect and uh now we need to kind of
08:17 - trigger uh the animation so inside our
08:21 - update counting UI we are going to check
08:24 - if uh this we basically we're only going
08:27 - to trigger uh the counting animation
08:30 - once and therefore we need to check if
08:32 - we've just switched to this state so
08:36 - we'll do that that by storing the
08:38 - previous state and comparing it to the
08:40 - current state so let's create a private
08:42 - variable and this is going to be a uh
08:46 - wave
08:47 - spawner do spawn
08:50 - State and uh we are just going to call
08:52 - this previous
08:53 - state and we don't want to default it to
08:56 - anything and then in the update method
08:59 - after we do our switch statement we want
09:01 - to set previous state equal to
09:05 - uh uh spawner do
09:09 - state and then in here we can simply say
09:12 - that if previous
09:14 - state state is not equal to
09:19 - spawner
09:21 - dot uh or if if the previous state is
09:26 - not equal to spawn state. Counting so
09:29 - wave spawner spawn state. counting so
09:32 - meaning that we've just switched to this
09:35 - state well uh then we want to debug.log
09:38 - that we are
09:46 - counting and uh we want to do the same
09:50 - down here but now with the spawning
09:53 - State and we want to debug.log spawning
09:57 - instead
10:01 - cool so if we were to save that and
10:04 - state is not a
10:06 - method there we go we can now hit play
10:10 - and we should see that uh the
10:13 - state only shows Once so that's only
10:16 - called once and now we're spawning so
10:18 - that's only called once and we can of
10:20 - course go ahead and uh kill off these
10:23 - opponents and you can see that it goes
10:25 - back to Counting there so that's super
10:27 - awesome uh and what we can can do with
10:29 - this is we can trigger the animation
10:31 - correctly so now we can go in here and
10:33 - we can say that we want our wave spawner
10:37 - or our wave
10:38 - animator uh to trigger the animation by
10:41 - setting the
10:44 - bull uh with the name and I
10:47 - remember yeah wave
10:51 - countdown to true because we're
10:55 - currently counting down and uh we want
10:59 - to set wave
11:02 - animator do
11:05 - setp we want to set the uh wave incoming
11:08 - to false because we can have multiple
11:10 - States at once so we'll just disable
11:13 - that and enable
11:15 - this and uh we want to do the same thing
11:18 - uh down here but reversed we'll just
11:21 - duplicate those change uh the order
11:25 - change that to true and this to false
11:32 - perfect so I think that will trigger the
11:35 - animation correctly and uh let's check
11:38 - if it
11:40 - will we're counting
11:44 - down and it goes and says What wave is
11:47 - currently incoming and we can kill off
11:50 - the opponents here
11:51 - responding two one and uh the system
11:55 - will keep going even though we are
11:56 - respawning and you can see that that's
11:58 - working so so now all we need to do is
12:00 - simply update the text so in here we'll
12:02 - simply uh say depending no matter if
12:06 - we've uh just gone to the state or we've
12:09 - um if this is not the first time uh well
12:11 - we're still going to be updating the
12:13 - text so we want to say that uh wave
12:16 - countdown text. text equals and then we
12:20 - want to get the uh
12:23 - spawner Dot and uh the it is wave
12:28 - countdown yep
12:30 - and uh we can't just set it equal to
12:32 - this first of all this is a float so
12:33 - it's going to have decimal points which
12:35 - is not something we want to display and
12:38 - also uh we need to convert it into a
12:41 - string so first off we can simply trunk
12:43 - Cate this uh by converting it into an
12:46 - integer which means that we will just
12:48 - get rid of any decimals it's not going
12:50 - to round it up it's just going to delete
12:53 - the decimals and then we can convert it
12:55 - into a string by uh simply enclosing
12:58 - these in some paren es and hitting do to
13:01 - string and calling this as a method so
13:03 - that will uh make it into a string and
13:07 - down here and we don't want to uh and we
13:10 - only want to do this once so we can do
13:12 - it in here we want to uh set the
13:15 - wave count
13:17 - text. text equal to uh
13:22 - spawner do
13:25 - wave next wave
13:30 - let's close that off and uh why is this
13:34 - okay we need to of course convert this
13:36 - into a string also do two string let's
13:40 - save that and uh now we might see again
13:44 - that the uh wave that we spawning is off
13:46 - but you can see that the countdown is
13:48 - fine and then it says wave zero incoming
13:51 - and we probably want to increment that
13:53 - by uh one that makes most sense to users
13:57 - I think so now it says wave one incoming
14:00 - and that's perfect so we simply need to
14:01 - increase that by one and uh we can do
14:05 - that in the return statement or in here
14:09 - but i s I think that since this is a get
14:11 - only uh we'll have we'll increment it uh
14:15 - by one in here that makes sense so we'll
14:17 - return uh next wave + one and uh if we
14:21 - now hit play and let's do this in full
14:23 - screen because I'm fairly certain that
14:25 - this is going to be working and also
14:27 - let's uh simply comment out the d. log
14:31 - statement there and there and uh let's
14:34 - go into Unity maximize on play and hit
14:37 - play and uh there we go it's counting
14:41 - down it's saying that wave one is
14:44 - incoming and there the enemies are and
14:46 - we can go ahead and just shoot them it's
14:49 - going to start counting down again and
14:53 - waving coming so that's perfect that's
14:56 - exactly what we wanted to do and uh one
14:59 - thing that you will notice here is that
15:01 - the countdown and uh the text up here
15:04 - are not following each other and the
15:07 - reason why is we simply need to go under
15:09 - the UI overlay uh wave UI here and find
15:14 - the wave countdown text and set the
15:16 - Anchor Point to the top here so that
15:19 - will make sure that these will uh follow
15:23 - each other I'm fairly certain at least
15:26 - so let's just check that that and that
15:29 - that needs to
15:31 - be right there
15:34 - and I think that is all and you can see
15:38 - that now they're following cool so that
15:40 - was basically all we had to do let's
15:42 - disable that disable that and let's just
15:46 - enjoy this at final time shall we so
15:49 - clear the
15:50 - console open up the game in full screen
15:53 - H play and now you can see that they're
15:56 - in the same place
15:59 - perfect so that was basically all for
16:01 - this video I hope you enjoyed it I think
16:03 - our uh game is finally starting to come
16:06 - together here and uh be playable and now
16:08 - you can go ahead and play around with uh
16:10 - tweaking stats on the different enemies
16:12 - making some bigger and some smaller
16:15 - enemies uh so that they get harder and
16:17 - harder um changing their uh damage
16:20 - amount and their speed uh there's a lot
16:24 - of stuff you can do with this of course
16:26 - also the hills the mount so I will
16:28 - definitely
16:29 - I would definitely recommend that you
16:30 - play around with these mechanics see
16:33 - what you can get out of them maybe
16:35 - create multiple enemies and uh yeah
16:38 - that's basically all I hope you enjoyed
16:40 - it and I'll see you in the next video
16:49 - [Music]