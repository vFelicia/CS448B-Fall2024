00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number
00:05 - four on creating a tower defense game in
00:07 - unity today we are going to be adding
00:09 - some cool turrets to our game we're
00:11 - going to be importing a nice charred
00:12 - model we are going to be adding a script
00:15 - that will search for the nearest enemy
00:16 - and then lock onto that target so that's
00:19 - basically the plan for today and then in
00:21 - the next video we can focus on shooting
00:23 - so the first thing that you want to do
00:25 - is go ahead and download the tower
00:26 - defense assets pack I'm going to have a
00:28 - link in the description and it's
00:29 - completely free for you to download of
00:32 - course and you can also use your your
00:35 - own model and there's both the blender
00:37 - version and an FBX but you can see that
00:40 - I have two different models in here and
00:43 - that's basically because I wanted you to
00:45 - be able to choose the one that you like
00:47 - so the first one here is just a very
00:49 - simple turret and the second one is the
00:53 - same turret but but with on some front
00:56 - panels and you can either choose one
00:58 - over the other or you can choose to
01:00 - include both of them and then have them
01:02 - in some kind of upgrade system so that
01:05 - one can be upgraded to with the other
01:07 - basically if you have blender installed
01:09 - I recommend using the blender files this
01:11 - way you can easily edit them within
01:13 - unity if not then I recommend using the
01:15 - FBX files I'm going to be using the FBX
01:18 - file so I'm just just going to take the
01:20 - turret here drag that into unity and
01:23 - it's a good idea here to make some kind
01:25 - of imports folder I've already gone
01:27 - ahead and done that so simply
01:29 - right-click create a mem folder and then
01:32 - simply drag the model into that unity
01:35 - we'll quickly import it and we're going
01:37 - to set up some settings so the first
01:38 - thing here is I want to change my scale
01:40 - factor to 3 I want to calculate um I
01:45 - want to calculate normals and I want to
01:48 - do that with a smoothing angle of about
01:50 - 38 that should look fine and then we are
01:53 - going to make sure that we import the
01:55 - materials then go apply go on the rig
01:58 - and select none' so when all that is set
02:01 - up you can see that you have the chart
02:03 - and then you have a materials folder and
02:05 - in here we have three different
02:06 - materials we're going to set this up now
02:09 - so to preview these we should take our
02:12 - turd here and
02:13 - drag it into a hierarchy let then let's
02:16 - hit F to focus in on it and reset the
02:19 - transform if it isn't already and then
02:22 - we can boost this up by 0.5 and you will
02:24 - see that the pivot point is correctly
02:27 - set at the bottom of this turret make
02:31 - sure up here that you're set to pivot
02:32 - and to local this way we can make sure
02:35 - that everything is oriented correctly
02:36 - let's expand the start now and you can
02:39 - see it split up into two parts the first
02:41 - one here which we are going to call the
02:43 - head and the second one here which we
02:46 - are going to call the base and the pivot
02:49 - for these two aren't exactly well placed
02:52 - so we are going to go in and change that
02:54 - in just a second you can see that it has
02:56 - three materials on it and one of it has
02:59 - only two so let's go ahead and rename
03:02 - these materials so this right here is
03:04 - going to be the turret underscore
03:06 - barrels the other one is going to be the
03:09 - turret underscore our main because
03:12 - that's going to be the main colored
03:14 - material and then our maybe a
03:16 - complementary or a secondary color here
03:20 - and first off if we select the chart
03:22 - main go ahead and change the albedo to
03:25 - something a bit darker and also I want
03:27 - to make this a bit metallic and out just
03:30 - a tiny bit smooth actually a lot
03:33 - metallic and a bit of smoothness in
03:35 - there and then let's ah dial this down
03:39 - to make it kind of dark
03:40 - I think this here is actually pretty
03:45 - good
03:45 - I want it to be somewhat grey and you
03:48 - can also preview what it looks like down
03:50 - here okay so I kind of like the look of
03:54 - this material so we're just going to
03:55 - continue with that for now and then
03:57 - let's take the secondary one and adjust
03:59 - the albedo Channel here as well and for
04:01 - for us because we don't have a texture
04:03 - channel or a texture to input the albedo
04:07 - is just going to be the color so our
04:09 - color here is going to be a bit darker
04:13 - so let's bump up the metallic Ness let's
04:16 - dial down the smoothness a bit and let's
04:19 - adjust the albedo Channel here I just
04:22 - want it to be a bit darker great just so
04:24 - we can get that on I shift in color
04:26 - there
04:27 - just adds a bit of detail and then
04:29 - finally we'll take the barrels and I
04:30 - thought because this is going to be our
04:32 - turret let's make it very threatening
04:34 - and make it a some kind of bright red
04:37 - here with a lot more metallic Ness and
04:41 - some smoothness something like that
04:44 - looks pretty nice and of course as
04:45 - always spend more time on this than I do
04:47 - but for the sake of the tutorial I'm
04:50 - just going to continue here so now that
04:52 - we are happy with this let's take this
04:54 - and make it into prefabs so let's drag
04:56 - it down here under our prefabs folder
04:58 - and there we go
05:00 - and let's go ahead and right click
05:01 - create empty to make empty game object
05:04 - and this is going to act as the base
05:08 - which our head will rotate around
05:10 - because right now our problem is that if
05:12 - we rotate our head it looks very silly
05:15 - and we need to rotate our head when we
05:17 - want to log on to a target so instead we
05:19 - are going to create here a part to
05:22 - rotate that we will position if we hit
05:26 - on the Y here then go in to isometric
05:28 - view by clicking the square here switch
05:31 - from orthographic and perspective here
05:35 - and then we can go up here and select
05:36 - wireframe and we can position this in
05:39 - the exact center and you can see that
05:41 - mine is already there then we can switch
05:43 - to this side here and then drag it up to
05:46 - be right there where it switches from
05:48 - the base to the head and now that we
05:51 - have done that we can shift out of this
05:53 - mode and go back to shaded so we
05:55 - unshaded perspective now great now we
05:58 - can take our head here and drag it under
06:00 - the pot to rotate to make it a child of
06:03 - that object and now you can see that we
06:05 - can simply rotate our pot to rotate and
06:07 - the toad will rotate with us this is
06:10 - about great for rotating correctly but
06:13 - also for offsetting the head if that's
06:15 - something we need to do which I think it
06:17 - is but we'll take that in a second so
06:19 - now we can go ahead and hit apply on
06:22 - this prefab again to relink the prefab
06:25 - and that is basically all that we wanted
06:27 - to do graphically and with the empty
06:30 - game objects over here now we can go
06:32 - ahead and actually create a script for
06:34 - this so let's take our turret and just
06:36 - move it over here to someplace that
06:38 - makes a bit more sense for it to stand
06:40 - and I'm just going to position it right
06:43 - there and just make sure again I'm
06:45 - holding down ctrl to snap it that is
06:49 - position correctly and that looks nice
06:52 - and then we can go ahead and hit add
06:53 - component and it's going to be called
06:55 - turret and let's make it a c-sharp
06:57 - script and now we can double click this
06:59 - to open it up in Visual Studio so
07:02 - basically this is a two-part process the
07:05 - first one is finding a target and it
07:08 - should be within a range and it should
07:10 - be the nearest target and the second
07:12 - part is rotating to our aim at that
07:15 - target so the first thing that we're
07:17 - going to be doing is the actual finding
07:20 - the target so to do this we need some
07:23 - kind of way to store our current target
07:26 - in a private variable so I'm going to
07:28 - make a private transform here called
07:31 - target and maybe just while we're
07:34 - creating this we should make this public
07:36 - so we can see if whether or not it works
07:40 - then on next up what we need is on a
07:43 - range so we're going to make a public ha
07:47 - float and this is going to be the range
07:49 - of our turret and I'm just going to
07:50 - default this to something like 15 units
07:52 - and I'm just going to show you something
07:55 - really cool here so basically what we
07:58 - can do is we can have a unity display
08:01 - the range of our turret using gizmos in
08:04 - the scene and this way it's much easier
08:06 - to get a grip or a grasp on what kind of
08:10 - range this chart actually has so if we
08:13 - go in here and type a new function
08:17 - called board on draw gizmos selected and
08:22 - you need to type it exactly like that
08:25 - because it's a unity callback function
08:27 - just like start and update so on drunk
08:30 - is most selected and this will make sure
08:33 - that the range is only drawn if we have
08:35 - the chart selected if you want it to
08:36 - always be drawn you can just delete the
08:38 - selected there then we want to go in
08:40 - here and say gizmos dot our draw wire
08:45 - sphere and that's of course going going
08:48 - to draw a sphere with only the on wire
08:51 - arts are shown so it's not going to be
08:54 - filled out and the position here is
08:56 - going to be transformed a position our
08:58 - current position and the radius is going
09:00 - to be well range and that is basically
09:03 - all and then we can maybe change the
09:05 - color here to something like gizmo stood
09:09 - color equals color dot red just to make
09:12 - it a bit cooler to look at so if we head
09:15 - back into unity now we should already
09:16 - see this working and indeed we can so
09:19 - this is now our range and if we look at
09:22 - this from above you can see just how
09:23 - easy it is to get an idea of what the
09:26 - range of a turd is so that's perfect and
09:28 - it will of course update in real time if
09:31 - we change the value over here and if I
09:32 - deselect the turd
09:33 - it's gone okay cool so let's go ahead
09:37 - and use this range and basically we are
09:39 - going to have a method I'm going to make
09:42 - it down here called it's going to be a
09:45 - void and it's going to be called update
09:47 - target and this is going to do a renewed
09:50 - search for it target and it's basically
09:53 - going to search through all of the
09:55 - objects marked as an enemy we are going
09:58 - to use it be using the tacking system
10:00 - it's going to find the closest one it's
10:03 - going to check if the closest one is
10:04 - within range and if they even is a
10:08 - target and if there is we are going to
10:10 - set our target equal to that object
10:12 - however we don't want to do this every
10:15 - frame because both finding all of our
10:18 - enemies is a pretty comprehensive task
10:22 - and also when you're doing distance
10:25 - checks that take some computer power so
10:27 - instead of doing this every frame inside
10:30 - of the update method I think we should
10:32 - just make a method that will run say two
10:35 - times a second and which is a lot better
10:37 - than 60 or maybe 200 and we'll just have
10:41 - it check on a fixed basis but not as
10:44 - often so another thing you can do is
10:46 - only search for a target if you don't
10:48 - have one already but I think that just
10:50 - quickly becomes a bit too complicated
10:52 - for our case that's really no reason to
10:54 - but it's definitely possible so but for
10:57 - now this is what we're going to be doing
10:59 - so let's make sure that this update
11:01 - target is called two times a second so
11:04 - to do this we
11:05 - going to a start method because this is
11:06 - where we want to invoke this repeating
11:09 - function and we do that by calling
11:11 - invoke repeating and we give it the
11:14 - method name and this needs to be correct
11:16 - so I'm just going to copy it it there
11:18 - because I am not great with typos and
11:21 - then we're going to do this after zero
11:22 - seconds we want it to search for a
11:24 - target right at the beginning and then
11:26 - we want a repeat rate to be 0.5 seconds
11:31 - and you can of course just adjust that
11:32 - to fit your game but I think a few times
11:35 - a second is fine so now we can go into
11:37 - our update target and we can go in here
11:40 - and say that if ah we already know we're
11:44 - not going to be doing that okay great so
11:47 - we're basically going to be looping
11:48 - through all of the different our enemies
11:52 - in our scene and we are going to be
11:54 - using a for each statement but in order
11:56 - to do this we first need to get an array
12:00 - of all of the enemies and to do this we
12:02 - use we store this in a game object array
12:05 - and we're going to call this enemies and
12:07 - we set that equal to and then we use
12:10 - game object dot find game objects with
12:14 - tag and make sure that it's plural here
12:16 - and then we can input a tag and I'm just
12:20 - going to make a public tag here here's
12:23 - our public string and this is going to
12:25 - be the enemy tag and I'm just going to
12:27 - default that to enemy and then we're
12:30 - going to be using that down there just
12:31 - so we don't hard-code this stuffing it's
12:34 - better to have it in the inspector great
12:36 - so we are going to find all the enemies
12:38 - that attacked as enemy and store them in
12:40 - this array then we are going to loop
12:42 - through them using a for each statement
12:43 - so for each game object enemy in enemies
12:50 - what we are going to be doing is we are
12:53 - going to get the distance to that enemy
12:56 - and so we are going to be using a float
12:58 - here distance to enemy equals vector 3
13:02 - dot distance between our position and
13:05 - the enemy position so that's going to be
13:09 - enemy transform dot position so that is
13:13 - going to return the distance in units
13:16 - and you
13:18 - and then it's going to be stored in this
13:21 - flow then basically what we want to do
13:23 - above this for each statement is we want
13:26 - to create a temporary variable and what
13:28 - this variable will do we're going to
13:31 - have a float here it's going to be a
13:32 - float it will store the arm shortest
13:36 - distance to an enemy that we've found so
13:38 - far so this is going to be the shortest
13:41 - distance and it by default we want this
13:44 - to be math dot infinity because when we
13:46 - haven't found any enemy well then we
13:49 - have an infinite distance to that enemy
13:51 - if that makes sense just to make sure
13:54 - that our shortage the shortest distance
13:58 - doesn't get within our range when we
13:59 - don't have an enemy we are just using
14:01 - math that infinity there and also we
14:03 - want to store as a game object the
14:06 - nearest enemy that we found so far and
14:09 - we are going to default this too and no
14:11 - so basically what we can now do enough
14:14 - for each statement is we can say if our
14:17 - shortest distance R is less than or
14:20 - equal to or actually just less than if
14:23 - our shortest distance I'm sorry if our
14:26 - distance to enemy is less than our
14:28 - shortest distance that means that we've
14:31 - now found an enemy that was closer than
14:34 - any we have found previously and if
14:37 - that's the case well then we want to set
14:39 - our shortest distance equal to our
14:43 - distance to our enemy and we want to set
14:47 - our nearest enemy equal to that current
14:50 - enemy that we are iterating over so if
14:52 - this makes sense basically what we're
14:54 - doing is we are finding all of our
14:55 - enemies and then we are saying for each
14:58 - enemy that we found we want to get the
15:01 - distance to that enemy we want to see if
15:04 - that distance is shorter than any
15:06 - distance we found before and if it is we
15:09 - want to set the shortest distance equal
15:11 - to this distance and so so the computer
15:14 - that the nearest enemy that we found so
15:16 - far is this enemy great and then what we
15:19 - can do is we can beneath this for each
15:24 - statement we can go ahead and check if
15:26 - nearest enemy it's not equal to null
15:30 - meaning if we found some kind of
15:32 - me and sure this distance is within our
15:39 - range so it's less than or equal to our
15:41 - range that means that we've we found an
15:43 - enemy and he's within our range well
15:45 - then we can safely go ahead and set our
15:47 - target equal to our nearest enemy dot
15:50 - transform and there we go we found the
15:53 - closest target so that's basically what
15:55 - we're going to be doing here then in our
15:57 - update method we want to make sure that
15:59 - we aren't doing anything unless we
16:01 - actually have a target so we're going to
16:04 - say if targets target is equal to null
16:08 - well then we simply want to return then
16:10 - we don't want to do anything in this
16:12 - update method because we're going to be
16:13 - using the target for everything are
16:15 - going to be using it to log onto to
16:17 - shoot at all that so if we don't have a
16:20 - target let's not do a thing great so
16:24 - that's basically all there is to
16:27 - updating the target and we should now be
16:29 - able to go in here and see this target
16:32 - update as soon as of course we mark our
16:35 - enemy prefab with this tag so let's go
16:38 - in here find our enemy prefab hit add
16:41 - tag add a new tag to the list which is
16:44 - going to be enemy go back and find our
16:47 - enemy prefab and change the tag to enemy
16:50 - now we can play we can select our chart
16:53 - and we should see that when an enemy
16:55 - gets within our range the target updates
16:58 - and you might need to click in the
17:00 - inspector in order for it to update you
17:01 - can also see then it doesn't lose the
17:04 - connection to the enemy if it's not
17:06 - within so we just need to add a quick il
17:09 - statement here that says else target is
17:12 - equal to no so now we need to hit play
17:17 - here and we should see that it will
17:19 - always lock on to the nearest enemy so
17:22 - you can see here it locks on to it there
17:24 - and then it's gone and the next one here
17:27 - it locks on to that one and then it
17:29 - locks on to the second one and then they
17:31 - are both gone
17:32 - so this logic now works now we can go
17:35 - ahead and use this to actually rotate
17:37 - our chart so in order to do this let's
17:40 - first make this into a private variable
17:42 - just so it want clutter up the inspector
17:46 - and people one thing that they shall
17:48 - need to input something here and then
17:51 - what we can do is we can go down into
17:52 - our update method and the here we are
17:55 - going to rotate some stuff
17:57 - and whenever we rotate stuff we're
17:59 - dealing with katooni ins whenever we're
18:01 - dealing with catch aliens people get
18:03 - confused and sometimes so do i but fear
18:07 - not i will try and explain this as best
18:10 - as i can just know it took me so long to
18:13 - finally understand kind of how to work
18:16 - with cooter nians and how rotations
18:18 - really work you really don't need to
18:21 - learn this overnight you don't need to
18:23 - understand everything that is happening
18:24 - here I'm just going to show you kind of
18:26 - my thought process and try and explain
18:28 - this as best as possible and then yeah
18:32 - you will get it at some point don't
18:34 - worry about it so basically what we want
18:36 - to do is we don't want to rotate the
18:39 - actual base of our turret here or this
18:42 - object right here because that rotates
18:45 - our base as well so instead what we want
18:48 - to rotate is only the part to rotate so
18:52 - we just quickly need to set up a
18:53 - reference to that and for that we're
18:55 - just going to be using a public
18:57 - transform oops not attract reference a
19:00 - public transform which is going to be
19:02 - our pot to rotate and we can set that in
19:06 - the inspector right now just so we don't
19:09 - forget drag in the pot to rotate there
19:11 - hit apply boom great now we can go on to
19:14 - our update method and basically what I
19:16 - want to do first is I want to get a
19:18 - vector which is basically just an arrow
19:21 - that will point in the direction of our
19:24 - enemy so to get this I'm going to store
19:27 - this as a vector 3 which is just three
19:30 - coordinates coordinates that will show
19:32 - in which direction we need to point and
19:35 - I'm going to call this tier for a
19:37 - direction and set this equal to and
19:39 - whenever you want to go from point A to
19:41 - point B or get the direction from point
19:44 - A to point B you take the end
19:46 - destination which is B minus point A so
19:50 - in our case this is going to be want to
19:52 - find the direction from our position to
19:55 - the target position so that's going to
19:57 - be target push dot position
19:59 - - transform.position cool so this is our
20:03 - direction and what we can then do is we
20:06 - can go in here and make a new catonian
20:08 - and a catonian is just unities way of
20:10 - dealing with rotation and on this
20:13 - catonian is going to be our look
20:15 - rotation and it's basically going to say
20:17 - how do we need to rotate ourselves in
20:20 - order to look in that direction
20:22 - so we know what direction it is now we
20:24 - just need to know what how to turn in
20:26 - order to look that way and all we need
20:30 - to do here is just use catonian that
20:32 - look rotation and input our direction
20:36 - then we are going to convert this from a
20:40 - quaternion which is this complicated
20:43 - mathematical way of dealing with
20:45 - rotation into what is called Euler
20:47 - angles what we are using in unity here
20:50 - with the XYZ rotation that's Euler
20:54 - angles that is an X and a Y and a C
20:57 - where we rotate around each axis so we
21:01 - just want to convert our quaternion into
21:03 - that and we do that by using vector
21:05 - three or we are going to store it in a
21:08 - vector three and this is going to be our
21:10 - actual rotation the rotation that we
21:12 - want to have and that is going to be
21:14 - equal to quaternion or I mean this is
21:18 - going to be equal to our look rotation
21:19 - so the rotation we need to look dot
21:21 - Euler angles and now it's an Euler
21:24 - angles it's it's really that symbol and
21:27 - then the final thing that we want to do
21:29 - here is we want to set our part to
21:31 - rotate dot rotation equal to the
21:37 - rotation that we just made so this
21:39 - shouldn't in fact rotate our turret to
21:42 - make it lock on to and something's wrong
21:45 - here oh yeah and that's because we don't
21:48 - just want to set our entire rotation
21:51 - equal to this rotation we only want to
21:54 - rotate around the y axis and that's why
21:58 - we convert this into Euler angles we
22:00 - could just have gone like look rotation
22:03 - there and everything would have been
22:04 - fine except we would rotate our body in
22:07 - all directions and we don't want that we
22:09 - only want to rotate around the Y
22:12 - is and to make sure that this happens we
22:15 - first store these user angles and then
22:18 - we do quaternion dot R Euler and we
22:22 - input a zero rotation around the X and
22:25 - then our Y rotation is going to be our
22:27 - rotation dot Y and the rotation we just
22:30 - calculated and then only the Y component
22:33 - and then a zero and a one around the z
22:36 - axis as well so this is going to work
22:39 - it's going to not be very smooth because
22:42 - when it locks onto a target it's it's
22:44 - there like that but it is going to work
22:48 - so if we try this out now oops
22:50 - go into unity and wait for it to load
22:53 - the script here and hit play and
22:55 - hopefully this will work and I do fear
22:59 - however that it will do this yeah so you
23:02 - can see that it actually works it locks
23:04 - on to the target and it rotates
23:06 - however it's offset by a 90-degree angle
23:09 - and this is why this object is so
23:12 - amazingly handy so basically you could
23:16 - sit there and mess around with
23:18 - quaternions and make an offset angle and
23:21 - all that but instead it's just so much
23:23 - more graphical to change it in here so
23:26 - what we are going to do is simply take
23:28 - our head move it out of our pot to
23:30 - rotate take our pot to rotate here that
23:33 - you can see it's currently pointing in
23:34 - this direction and then rotate it by
23:37 - negative 90 degrees to make it point in
23:39 - the same direction with the blue arrow
23:41 - as our barrel and that means that when
23:44 - we turn this back in and then hit apply
23:47 - the pot to rotate will now be oriented
23:50 - with the front
23:53 - facing the barrel so that's perfect and
23:56 - now we can hit play and it should
23:58 - already be fixed we didn't need to do
24:00 - any math or whatever we just needed to
24:02 - move that so this is actually working
24:05 - the only thing that I want to do now is
24:07 - just have it smooth out a bit because
24:10 - when it finds a new target in particular
24:12 - like right now it just jumps there and
24:15 - that is pretty ugly behavior so to do
24:18 - this we use a unity method called loop
24:22 - and loping is basically just smooth
24:25 - transitions
24:26 - from one state to another and you can do
24:28 - this with rotation and position and just
24:31 - numbers and general colors everything we
24:33 - are going to be doing this with rotation
24:35 - and unity of course has a function
24:38 - building for this so I'll look rotation
24:41 - we're going to be looping this and
24:43 - that's going to be equal to let me see
24:47 - you're actually we could do this
24:50 - multiple ways so we have a look rotation
24:52 - which is our desired rotation so let's
24:55 - take that and then instead of just you
24:57 - are getting our look rotation that Euler
25:00 - angles we are going to get quaternion
25:04 - dot lope and then we are going to loop
25:08 - from our our current rotation width
25:11 - which is our part to rotate to our look
25:15 - rotation and we are going to do this as
25:17 - time passes by so we're going to be
25:20 - using time.deltatime so yeah that should
25:24 - be fine and this is going to be part to
25:26 - rotate dot rotation of course and then
25:30 - we need to multiply with some kind of
25:31 - speed variable here so we can adjust how
25:34 - quickly this turret will move to get to
25:39 - a new rotation so let's just add a speed
25:41 - parameter up here which is going to be
25:43 - public float and this is going to be our
25:46 - arm turn speed and we're going to set
25:50 - that to a default of 10 which is pretty
25:53 - quick but I think it should be a snappy
25:55 - definitely just not that snappy and
25:58 - let's multiply this with our turn speed
26:01 - and that might be confusing basically
26:04 - what we're saying is we want to rotate
26:06 - or we want to smooth the transition from
26:09 - our current rotation to the new rotation
26:11 - over time determined the quickness to
26:16 - tournament by our turn speed and then
26:19 - convert it into Euler angles so ok we
26:23 - did it so this is our target lock on
26:27 - great so let's hit play here and
26:30 - hopefully we should see this working now
26:33 - so see there and you can see it's way
26:36 - smoother now when it's it finds a new
26:39 - target
26:39 - and locks onto that as well and
26:42 - basically what you can do now because
26:43 - this is a prefab is you can just
26:45 - duplicate this and we'll duplicate this
26:47 - and move it around your map and you
26:50 - should see these charts functioning just
26:52 - the way that we want them to so
26:55 - basically the next thing that we're
26:56 - going to be doing is we're going to be
26:58 - adding in some bullets that will
27:01 - actually damage our enemies hopefully
27:03 - and then we need some kind of way of
27:05 - spawning these tarts in some kind of way
27:07 - of purchasing them selecting a location
27:09 - for them to be built and yeah so I think
27:13 - this series is moving on nicely and yeah
27:17 - I'm excited about it so thanks for
27:19 - watching today's video and I'll see you
27:20 - in the next one so I'm going to start
27:22 - mentioning patreon supporters the
27:24 - following month after they donate so
27:26 - that there won't be any difference from
27:28 - donating at the beginning of the month
27:30 - to the end of the month this way
27:32 - everyone will get a full month of
27:34 - mentions and yeah everyone will be happy
27:36 - so just wait for the next month and you
27:40 - will see your name here so thanks for
27:41 - watching and I'll see you soon