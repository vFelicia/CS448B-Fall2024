00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to this video on creating a wave
00:06 - spawner inside of unity using c-sharp so
00:10 - this video is not part of any particular
00:12 - series because I thought I could
00:13 - describe the process of making a wave
00:16 - spawner in pretty general terms so on
00:20 - the script that we are going to be
00:21 - making today should be fairly generic
00:23 - and therefore very easy for you to
00:26 - modify to suit your project and well
00:30 - before I get started I quickly want to
00:32 - show you just what we are going to be
00:35 - creating and how you can easily download
00:37 - it if you don't want to be creating it
00:39 - with me today so if you simply want to
00:41 - use this in your own project then you
00:44 - can go to brackish comm and you can
00:46 - navigate under the 2d platform of course
00:49 - it's also under projects click on that
00:51 - and I know this is in the 2d assets pack
00:57 - but it will also work just fine for 3d
01:01 - games you don't actually need to change
01:03 - any code in order to make it work for a
01:06 - 3d game but anyway you just go ahead and
01:09 - download that and I will make sure to
01:11 - put the finished product inside of the
01:14 - 2d assets pack once downloaded and then
01:16 - scripts and I'll make a folder here for
01:18 - the wave spawner cool so now that that's
01:24 - all said and done I think I quickly want
01:27 - to jump into unity here and show you
01:30 - what it is we're going to be making so
01:32 - you can see here I have a currently 3
01:34 - spawn point set up in my level and you
01:37 - can see that I've just make sure that
01:39 - they have this icon so we can easily see
01:42 - them in our scene view and then on the
01:46 - game master object I've been using for
01:48 - the game here we have a script called
01:51 - wave spawner and this is the central
01:53 - component of course and this has a wave
01:57 - class which is then stored in an array
02:00 - called waves and we can easily add more
02:04 - waves by simply changing the size of
02:06 - this to 4 to add another one and each
02:10 - wave currently has a set of properties
02:13 - these are a name the enemy prefab that
02:16 - we want to spawn the number of enemies
02:19 - we want to spawn and the rate that we
02:21 - want them to spawn in and it's very easy
02:25 - for you to add more stuff to this if you
02:29 - want to have more kind of possibilities
02:33 - for each wave so and you can see I've
02:37 - just quickly made three waves here and
02:40 - they are all using the same prefab which
02:42 - is the alien spaceship one and all of
02:45 - this other stuff that I've set up here
02:48 - is part of the 2d platformer course this
02:50 - entire project has been made in a series
02:54 - of videos which you can of course check
02:57 - out so check out the 2d platformer
02:59 - course so um we have these waves we have
03:03 - a list of an array of spawn points which
03:07 - are simply dragged in
03:09 - then we have a time between waves which
03:13 - we can tweak while the game is running
03:15 - too then we have a next wave spawn time
03:18 - or a countdown timer if you will and
03:21 - this shouldn't be touched it's simply
03:24 - there so we can see when the next wave
03:26 - will spawn and this is something you
03:28 - would typically put in the UI some kind
03:31 - of big countdown timer up and there
03:34 - isn't there are no more enemies left and
03:37 - then we have this state and this is
03:40 - simply an enum which shows us whether or
03:43 - not we are currently counting down
03:44 - whether we are spawning the level or
03:46 - whether we're waiting for the player to
03:48 - kill off the enemies cone and that again
03:53 - shouldn't be touched it's just there for
03:54 - display purposes so when I go ahead and
03:57 - hit play now you can see that this goes
03:59 - up to five starts counting down and one
04:02 - once it reaches zero it spawns two
04:06 - enemies and you can see they spawned at
04:09 - the same point and then it starts
04:12 - counting down again once I've killed
04:14 - them and you can also follow what is
04:17 - going on on behind the scene it's down
04:19 - here and you can see that the system
04:22 - keeps going even though I get respond
04:24 - and all that so you can see
04:26 - we've completed it counts down again and
04:28 - here comes the final wave and this is a
04:30 - tough one I'll see if I can do this I
04:33 - could and you can see it says wave
04:36 - completely no more waves and it starts
04:39 - looping so it will simply spawn the next
04:42 - or the first wave and simply keep going
04:44 - that way and one thing you could do here
04:47 - is simply have a game game completed
04:49 - screen if you want to make all the waves
04:52 - yourself or you could also have kind of
04:56 - a stat multiplier that would make the
04:58 - waves harder each time it looped through
05:02 - so that's all something you can add onto
05:05 - the system but this should provide a
05:06 - nice base cool
05:09 - so let's actually take a look at
05:12 - creating this script so let's remove the
05:14 - component here and oops it looks like I
05:17 - have some malware it's currently being
05:20 - deleted and it's a weird thing Windows
05:23 - 10 is doing and I'll quickly remove the
05:26 - wave spawner script here and also will
05:32 - remove the spawn points that I've
05:34 - created and so we should be starting
05:37 - from scratch here so right now when we
05:40 - hit play there is nothing on the GM
05:43 - object and nothing is going on in the
05:45 - console and we actually have nothing set
05:47 - up cool so to start this off let's go
05:52 - ahead and create a wave spawner script
05:55 - and go onto new script and select
05:57 - c-sharp you create an ADD and let's
05:59 - double click this to open it up and I'm
06:02 - actually not using a mono develop here
06:05 - instead I'm using a visual studio and I
06:08 - also have a video on setting that up if
06:10 - you wish to use the same monodevelop
06:14 - should do just fine the namespaces we
06:17 - are going to be using here are unity
06:18 - engine and system dot collections
06:20 - because we are going to be using AI
06:22 - enumerators and well we can go ahead and
06:27 - kill off these methods for now but we
06:29 - are going to be adding them again in a
06:32 - second but first off I simply want to
06:34 - focus on the very first part of creating
06:37 - this wave spawner which is defining
06:40 - what a wave in our game should be so so
06:44 - in order to do that that we need to
06:46 - create a custom class and I'll just put
06:49 - this inside the wave spawner you could
06:51 - also put it outside that's actually
06:55 - completely up to you and I'm simply
06:57 - going to call this wave and then we are
06:59 - going to open up some curly brackets and
07:02 - inside of this we're going to have a a
07:04 - couple of variables the first one is
07:06 - going to be the name of the wave this is
07:09 - cool to have if you want to announce
07:11 - what wave is currently coming as you saw
07:15 - I did that I didn't display it in the UI
07:18 - yet but I had it on displaying in the
07:20 - console then we want a reference to the
07:23 - prefab that we want to instantiate at
07:27 - our spawn point so that the actual enemy
07:30 - game object itself and and for that we
07:34 - could simply do a transform reference
07:37 - and we'll simply call this enemy then we
07:42 - want a public and this is going to be an
07:45 - integer and that's going to store the
07:47 - count simply and the amount we could
07:50 - also call it I'm simply going to call
07:51 - the count here and actually no let's do
07:58 - count I like it better and then finally
08:02 - we'll have a public float which is going
08:04 - to be our rate a spawn rate and we could
08:08 - also do a delay here but I find it a bit
08:12 - more logical to have a spawn rate and
08:14 - then simply do one divided by the rate
08:18 - it's basically the same thing okay so
08:21 - one thing that we will have to make sure
08:24 - that we do with this class I mean you
08:27 - can put all the stuff in here that you
08:29 - want to and the stuff that we are
08:31 - definitely going to be needing in this
08:34 - tutorial is enemy count and rate other
08:37 - than that you can configure this just
08:39 - the way you want to but one thing we
08:41 - will have to do is mark this as
08:44 - serializable so we are going to say
08:46 - system dot serializable up here in
08:49 - square brackets and what this does is
08:52 - simply
08:53 - allows us well basically what it means
08:58 - for us at least is it allows us to
09:01 - change the values of this of instances
09:06 - of this class inside of the unity
09:07 - inspector so when we now go on to making
09:10 - a public wave array and call this waves
09:14 - then while we are including a when when
09:18 - including this tag up here we are
09:21 - actually going to be able to edit it
09:23 - inside of unity so you can see here that
09:26 - we now have this waves array and we can
09:29 - start adding waves and we have all of
09:32 - these properties to edit if we went
09:34 - ahead and deleted this well you can see
09:41 - that that list or array simply
09:44 - disappears so we need this in order to
09:47 - edit it inside of unity cool so that's
09:54 - all fine and dandy next up we are going
09:56 - to create a private integer and this is
10:00 - going to store the index of the wave
10:04 - that we want to be creating next so this
10:06 - is simply going to be called next wave
10:08 - and it's going to be deep is simply
10:11 - going to default to zero cool then we
10:14 - want to have a public float that stores
10:19 - our spawn time between waves and we're
10:29 - going to default that to five seconds
10:31 - and yeah of all of these time
10:35 - measurements are in seconds and next up
10:38 - we want to have a private actually let's
10:43 - just make this public so we can see it
10:44 - in the inspector just to see if
10:46 - everything is working but we will mark
10:48 - this at private when once we're done and
10:50 - this is going to be the wave countdown
10:53 - and that's simply going to default to
10:56 - zero or you could just close it off
11:00 - which I'm going to do
11:02 - cool so now in the start method void
11:07 - start Wow cool
11:15 - oops alright my microphone sometimes
11:21 - gets in the way which makes it kind of
11:23 - hard to type cool so inside of our start
11:26 - method we want to set the wave countdown
11:29 - equal to the time between waves so
11:32 - that's going to start up at 5 seconds
11:35 - then we are also going to have an
11:39 - enumerator or an enum I should say that
11:43 - stores the current state of our spawner
11:48 - but we'll make that in a second first
11:51 - off I want to declare an update method
11:55 - jesuschrist okay an update method and
11:59 - inside of this we are simply going to
12:01 - write that if wave countdown it's less
12:04 - than or equal to zero so if it's time to
12:07 - start spawning waves and then we want to
12:10 - check if we've already started spawning
12:14 - waves so this is where we kind of need
12:16 - that state so because we could do a
12:20 - method here called spawn wave and give
12:25 - it the wave that we wanted to spawn but
12:28 - then we would be spawn start or then we
12:30 - would be starting to spawn a wave every
12:34 - every time the computer to refrain so we
12:37 - have to make sure that we only start
12:38 - spawning a wave one time and in order to
12:42 - do this let's declare an enum here up
12:45 - here and that's going to be a public
12:47 - innum and we are going to call this
12:50 - spawn state and it's going to store on
12:55 - the values spawning waiting and Counting
13:02 - and these do not need to be capitalized
13:07 - then down here we can check that if
13:10 - state o we also need to store this in a
13:14 - variable of course so up here with
13:15 - simply
13:16 - finding the data structure now we also
13:19 - need to actually make that a variable so
13:22 - we'll make a public spawn state called
13:26 - state and default it to spawn state dot
13:31 - counting awesome and I'll change that to
13:37 - private I don't think we need to be
13:38 - viewing that in the inspector so if it's
13:43 - time to start spawning a wave and if
13:45 - state is equal to and if state is not
13:52 - equal to spawn state dot spawning well
13:58 - then we want to start spawning a wave so
14:01 - here we want to start spawning wave then
14:06 - if we haven't reached 0 yet then we
14:11 - simply want to say that wave countdown
14:14 - minus equals time dot Delta time so this
14:19 - will simply make sure that we are go
14:22 - down the appropriate amount of time for
14:26 - each frame and this will make sure that
14:29 - our actual countdown timer will be kind
14:34 - of relevant to time and not to the
14:39 - amount of frames that we drop a second
14:42 - cool so now we could actually go ahead
14:47 - and set up the method for spawning a
14:49 - wave so this is going to be using an I
14:52 - in numerator and the reason for this is
14:54 - that we want to be able to wait a
14:58 - certain amount of seconds inside of the
15:00 - method and in order to do this instead
15:04 - of writing void we write I in numerator
15:09 - and I'm not going to go into exactly
15:11 - what in enumerators actually do and kind
15:18 - of how they work behind the scenes I'm
15:20 - simply going to say that this is the
15:21 - method this is the way of creating
15:24 - methods that will be able to wait a
15:27 - certain amount of seconds
15:29 - continuing and in order to use this you
15:32 - have to also include system data
15:34 - collections so we're going to make an
15:38 - enumerator method and we are going to
15:40 - call it a spawn wave and it's going to
15:44 - take in as an argument a wave which
15:47 - we're going to call underscore wave and
15:50 - eye enumerators basically need to return
15:55 - a value so down here we'll simply do
15:57 - yield break and that will return nothing
16:01 - and that will make sure that we don't
16:04 - get this error that popped up here you
16:07 - can see that not all code paths return a
16:10 - value will simply make sure to end your
16:12 - method with yield break and that should
16:15 - go away cool so basically what do we
16:19 - want to be doing here well first off we
16:21 - want to set our state equal to spawn
16:24 - state don't spawning so now we are
16:27 - actually spawning and when we are done
16:31 - spawning then we want to spawn but a
16:33 - bunch of things and once we are done
16:35 - spawning we want to set state equal to
16:37 - spawn state dot waiting because now we
16:40 - are waiting for our player to kill off
16:42 - all of the enemies then here we want to
16:46 - do a spawning logic but let's first make
16:48 - sure to call this so up here we want to
16:50 - start spawning away well instead of just
16:53 - doing spawn weight and then putting in
16:56 - the wave that we are going currently
16:59 - going to spawn because this is an
17:02 - enumerator we simply need to say start
17:06 - co-routine and then in here we call the
17:10 - method so in here we say spawn wave and
17:12 - we give it the wave that we want to
17:15 - spawn which is currently our waves with
17:22 - an index of next wave like that okay so
17:28 - instead of simply calling this and using
17:31 - a semicolon because this is an
17:32 - enumerator we need to call the start
17:35 - corroding method and that is going to do
17:38 - all of that for us awesome so now in
17:42 - here
17:43 - what we are able to do is we are able to
17:46 - loop through on the we are able to
17:55 - create a full loop that will run the
17:59 - number of enemies that we want to spawn
18:02 - so it will make sure to loop through a
18:06 - count number of times and account this
18:09 - of course equal to the number of enemies
18:11 - that we want to spawn so for I equal
18:14 - zero I is less than wave dot count then
18:17 - we want to increment I and in here we
18:20 - can then say that we want to spawn an
18:23 - enemy so we are going to create a method
18:27 - for that also and we could all do all of
18:30 - this inside of this method but I think
18:32 - it's it's much easier to read if we have
18:35 - a methods for spawning waves for
18:37 - spawning enemies and for searching if
18:41 - checking if enemies are still alive and
18:43 - doing all of that in separate methods
18:45 - just make the code much easier to read
18:48 - so here we're going to have a spawn
18:51 - enemy and that's going to take in as an
18:53 - argument an enemy of some sorts I
18:56 - actually have an enemy class but we
18:59 - declared our allies as a transform and
19:02 - we're going to call it underscore enemy
19:05 - and in here we want to spawn enemy and
19:12 - for now we are simply going to debug
19:14 - deadlock spawning enemy and we are going
19:19 - to print out the name of that enemy so
19:25 - that's going to be fine for now lady
19:27 - will add spawn points and make sure that
19:29 - they are actually instantiating so in
19:32 - here we'll simply call this spawn enemy
19:35 - method and the enemy that we want to be
19:38 - spawning is wave dot enemy and then we
19:43 - want to wait a certain number of seconds
19:45 - so right now if I just go through this
19:47 - will begin at the start method it's
19:50 - going to set our wave countdown equal to
19:53 - the time between waves which is
19:55 - defaulting to five seconds
19:57 - then it's going to go down here and it's
20:00 - going to say well we are not at zero yet
20:02 - so it's simply going to subtract and the
20:04 - number of times or then the amount of
20:07 - time that has passed since the last time
20:11 - we drew a frame meaning that it will
20:13 - simply subtract one of one measurement
20:19 - each second from this wave counter so
20:22 - it's certainly going to count down from
20:24 - five and if it hits zero then we want to
20:28 - check if we've we are already spawning
20:30 - and the first time we of course not
20:33 - going to be spawning so therefore it's
20:35 - going to start spawning which takes us
20:37 - down here and it's going to say well now
20:40 - we are actually spawning then it's going
20:42 - to loop through the amount of enemies
20:45 - that we want to spawn and for each enemy
20:48 - that we want to spawn we are going to
20:50 - call the spawn enemy method which which
20:53 - takes us down here and it's going to
20:55 - instantiate an enemy which we haven't
20:58 - done yet
20:58 - for now it's simply going to write down
20:59 - the in the console that we are spawning
21:02 - an enemy and then we go up here and then
21:05 - we want to wait a certain amount of
21:07 - seconds before looping through again
21:10 - so before continuing to the next
21:12 - iteration of the loop we want to put in
21:15 - a wait four seconds and this is why we
21:19 - put ienumerator here because this allows
21:22 - us to do this yield return new
21:26 - waitforseconds and in here we can simply
21:30 - put 1 / wave dot rate so I know this
21:40 - looks very weird and I know this test
21:44 - you simply ignore it simply know that
21:47 - whenever using an I in numerator we
21:49 - should end with yield break and whenever
21:53 - we want to wait a certain amount of
21:55 - seconds we put in yield return new wait
21:59 - four seconds and then the amount of
22:01 - seconds that we want to wait and in this
22:03 - case that's going to be equal to one
22:06 - divided by our rate or if we had put in
22:09 - a delay
22:10 - we would simply put in wave done delay
22:12 - but that's completely up to you so it's
22:16 - going to wait this certain amount of
22:19 - time and then spawn another your enemy
22:20 - and then wait again and spawn another
22:22 - enemy until we've reached the point
22:24 - where we have as many enemies alive as
22:27 - we want it to spawn and then it's going
22:30 - to set our state equal to spawn state
22:33 - dot waiting
22:43 - you