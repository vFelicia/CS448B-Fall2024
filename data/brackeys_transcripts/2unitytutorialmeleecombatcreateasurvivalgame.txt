00:00 - [Music]
00:03 - hello everyone and welcome to the second
00:05 - tutorial in our Survival game series um
00:08 - done by brais I'm the CEO of braies and
00:12 - uh today we are going to take a look on
00:14 - how to create a me system I know that in
00:16 - the last tutorial I promised you we
00:18 - would take care of some shooting but I
00:21 - just thought that the melee system would
00:24 - be a little bit more interesting and
00:26 - also there are lots of lots of tutorials
00:29 - on how to do shoot out there so um I
00:32 - guess we'll just cover that later for
00:34 - now on we'll do the M system okay so
00:37 - let's get ready um I've opened up uh
00:40 - Unity my Unity project and um as you can
00:44 - see uh it looks just like before I
00:47 - haven't made any changes um one thing
00:50 - though I have saved the scene by going
00:52 - to file um save scene or save scene as
00:56 - and I've called it the main scene 01
01:00 - okay so if you experience that when you
01:02 - start up the project um your scene view
01:05 - is just empty and your game view is just
01:07 - blue um it means that you have to double
01:10 - click on this main scene it's because it
01:12 - haven't loaded the scene yet all right
01:15 - so uh first things first let's just go
01:18 - ahead and rename the first person uh
01:21 - controller by right clicking and hitting
01:23 - rename to
01:25 - player and let's go ahead and make a new
01:29 - game op object called an empty so go to
01:31 - game object create empty or just press
01:34 - contrl shift n and uh this is pretty
01:38 - much just an object that is entirely
01:41 - invisible in the scene it can't be seen
01:44 - anywhere um so you can store scripts and
01:47 - stuff like that just to get a position
01:49 - in the scene but we'll talk about that
01:51 - later um so for now we can just name
01:54 - this
01:55 - m and we can go ahead and drag this onto
01:59 - the player this will parent it to the
02:01 - player and then drag it again onto our
02:03 - main camera and um you can see that if
02:07 - we just zero out the transform on the
02:10 - right hand side to 0000 0 um that it
02:14 - will be directly in the center of the
02:16 - camera and then drag it out a little bit
02:19 - so that it's right in front um one thing
02:24 - that you should notice is that uh right
02:27 - now our position is 0 point 55 or
02:30 - something um but if I drag this mely out
02:34 - again re
02:37 - unparented look the position has changed
02:40 - and this is because when an object is
02:42 - parented to another object It Center
02:46 - meaning the zero values is set to that
02:50 - object but we'll talk about that later
02:52 - now you can just reparent it so um all
02:56 - right now that we have this we can go
02:59 - ahead and add an a new component by
03:00 - clicking add component and new script
03:03 - and call this
03:06 - melee system something like that
03:09 - whatever you want um and we can go ahead
03:12 - and double click this to open it up in
03:14 - mono develop and this script that we're
03:17 - going to create is a little bit more
03:19 - advanced than I would like it to be but
03:22 - um I don't expect you to understand
03:25 - everything if you're a complete beginner
03:27 - and I won't explain everything in
03:28 - complete detail but something I do want
03:31 - to explain you is what is called a
03:34 - raycast function but we'll get to this
03:37 - later for now you can just go ahead and
03:40 - delete the function start and the
03:41 - function
03:43 - update so first of all in this script we
03:46 - want to create a new variable and if
03:50 - variables are completely new to it it's
03:52 - basically a box where I can store things
03:56 - in so it can change it can be um
04:00 - if we type VAR this is a variable that
04:04 - we can access in unity so if I make um a
04:09 - variable and call it something and say
04:12 - this is going to be a number we can go
04:13 - into unity and just without any
04:16 - scripting change the number so in this
04:18 - script we can say if I make a variable
04:21 - called health and then later say that
04:24 - our health is 100 we can do that in
04:27 - unity and just play around with it we
04:29 - you don't have to go back in the script
04:31 - and change it all the time this is
04:32 - really cool so variables is something
04:36 - you need all the time when scripting so
04:39 - VAR this means that we're declaring a
04:41 - variable and now the name of the
04:44 - variable and the name of this variable
04:46 - is going to be the damage or just damage
04:49 - whatever you want um the damage because
04:52 - this is going to be how much damage that
04:55 - will do to an object when we hit it so
04:59 - um
05:00 - simply weet type the damage and then
05:02 - make a colon and then type int and uh
05:07 - this is short for integer and means um a
05:10 - whole number a number without decimals
05:14 - so um it is going to be a number without
05:16 - decimals and just by default it's going
05:19 - to be let's say that we'll do 50 damage
05:24 - if if if the opponent's health is about
05:28 - 100 we'll do 50 so we need to hit it two
05:31 - times and then as always when we declare
05:35 - a variable or call something we'll end
05:38 - up with a
05:39 - semicolon this is very important okay so
05:43 - um that's basically it for this start um
05:48 - we're going to need another variable
05:49 - though and uh this variable is going to
05:52 - be called
05:54 - distance and it's going to be a type
05:57 - float and I want going into too much
06:00 - detail but basically this is going to be
06:04 - the variable that we'll access later to
06:06 - see how far away our opponent is from us
06:10 - so we can't hit him if he's 50 m away um
06:15 - he needs to be in a certain distance
06:18 - from us okay so uh now let's go ahead
06:22 - and create the function updates and the
06:25 - function updates is um everything that
06:29 - is in the function update will be called
06:32 - every time the computer draws a frame so
06:35 - um this might sound confusing it's
06:37 - really not um it's just a function that
06:40 - you call if you want to check if the
06:42 - user has pressed a button or if you want
06:45 - something to happen constantly so it's
06:49 - what you you type when you want
06:50 - something to happen or the computer to
06:53 - check for something all the time so oh I
06:56 - just made a mistake there so um function
07:00 - update um and then the bracket keys and
07:05 - now in this function update we're going
07:08 - to type V hit and then
07:13 - colon
07:15 - raycast
07:17 - hit and um this I want to go I won't go
07:22 - into detail with um it's pretty hard to
07:25 - understand just like this but basically
07:28 - what we're going to do is we want
07:30 - we are going to um draw a
07:33 - line from our um player
07:38 - to what the player is pointing at so let
07:41 - me just open up paint here so I can
07:42 - explain this to you um excuse me for
07:45 - looking over here this is where I have
07:47 - pre-typed the script just so I won't
07:49 - make any mistakes or anything so okay um
07:53 - so basically if we have our player this
07:56 - is our character controller this is our
07:58 - player I can go ahead
08:00 - and type this if you want so um this is
08:03 - our player and um we have an opponent so
08:08 - I'll just quickly draw our oppon
08:10 - opponent and what we want the computer
08:13 - to do using what's called a ray cast is
08:16 - simply measure the distance from the
08:18 - player to the opponent and this is done
08:20 - by telling the computer to draw a line
08:23 - from our player and directly out so from
08:27 - the center of our camera and just just
08:29 - for it it needs to draw a line and
08:32 - whenever that this line hits something
08:34 - it says oh we've hit an object and then
08:37 - what we can do is we can ask okay what
08:39 - have you hit and how long how great of a
08:44 - distance is there to that object so
08:47 - basically what we want to do is we want
08:50 - to use this Ray cast and we want to ask
08:53 - how far away how
08:57 - far is the uh um the object and is it an
09:01 - opponent and if it's um just like half a
09:06 - meter away and it is an opponent then we
09:09 - want it to lose health so that's why we
09:13 - type um this if because it's if the um
09:19 - opponent is closed not not just all the
09:21 - time so just type after me physics that
09:25 - raycast and then open up a parenthesis
09:28 - transform
09:32 - transform with no capital. position
09:36 - comma
09:39 - transform come on do uh transform
09:43 - Direction because we want it to we want
09:45 - to know where it is looking and the
09:48 - transform direction is called is going
09:51 - to be called a
09:54 - vector three and a vector 3 sounds so
09:58 - complicated it's it's really not it's
10:01 - just the X the Y and the C it's just it
10:04 - just means that it's going to be with
10:07 - three axes basically so um do forward so
10:12 - this just means that in these three axes
10:15 - we just wanted to look for it
10:18 - so what this piece of code is going to
10:21 - do just type comma
10:24 - hit and then close parentheses close
10:27 - parentheses um what does code is going
10:30 - to do it is going to cast a line out
10:33 - from the point of this empty object that
10:35 - we created and just forward and when it
10:38 - hits something give us some information
10:41 - so um now that we have typed this out uh
10:45 - let's open up some brackets so uh curly
10:49 - bracket curly bracket close and in this
10:53 - if statement we're going to type
10:56 - distance
11:00 - equals
11:02 - hit.
11:03 - distance so basically what we do here is
11:07 - we say that our variable the distance is
11:09 - going to be equal to how far away the
11:12 - game object is so basically we can see
11:14 - how far it is in in unity when we trying
11:17 - to test this out um I hope I'm not
11:19 - losing you if I am it's completely fine
11:22 - much of the code that we are going to be
11:24 - writing is much easier than this and
11:27 - then
11:29 - um oh what did I do what did I do so
11:35 - hit. transform do send
11:39 - message um and then we're going to send
11:43 - the message to the game object that we
11:45 - hit that it should apply
11:49 - damage and just close this
11:52 - up comma the
11:57 - damage and um
12:00 - um then we're going to tell it that it
12:03 - does not need an a receiver so and then
12:08 - close this and end with a semicolon
12:13 - okay that is it for the code um I know
12:17 - that it's really really
12:19 - confusing um it it's not that bad really
12:24 - um what we're doing here is we're
12:26 - casting out uh the line checking the
12:30 - distance and um then we're sensing we're
12:34 - sending out um a message to the object
12:38 - that we hit that we should apply damage
12:41 - and then the um damage part will do in a
12:45 - script that sits on the object so okay
12:49 - but um right now we have made a mistake
12:52 - because this is going to be called every
12:55 - frame every single frame and that's
12:57 - sometime 30 to 60 times per um
13:03 - second so um we're going to want to do
13:06 - this only when the player presses a
13:10 - certain button presses the um the fire
13:14 - button or whatever so um we'll go up
13:17 - here and we'll create a new if statement
13:20 - and this time we'll say that if
13:24 - input.
13:26 - get uh get
13:29 - button down yes input. get button down
13:34 - so if the
13:36 - computer um gets if the player presses
13:39 - this button then all this stuff will
13:42 - happen so if input. get button down and
13:45 - we are going to check for fire one and
13:48 - fire one is pretty uh is just the preset
13:53 - button that Unity has set up for
13:55 - shooting so this means that instead of
13:57 - saying that if they press P we just say
14:00 - fire one and this means that it it will
14:03 - convert to both both the computer this
14:06 - is the mouse button and the Xbox if
14:09 - you're coding for the Xbox or the
14:11 - PlayStation and all this so um but then
14:14 - just make in a open cly bracket and then
14:20 - make yet another close cly bracket we
14:24 - can just go ahead and hit and make some
14:28 - tab
14:30 - so we get all this in order okay so now
14:34 - go ahead and save this pressing contrl s
14:37 - and go uh go back to Unity and I can see
14:41 - that we have some
14:43 - errors let me just check out on
14:46 - this okay um hit. transform send message
14:52 - the damage Sy don't require receiver um
14:56 - what did we do wrong oh so um there is
15:02 - a parentheses too much there so we can
15:06 - just go ahead and delete this
15:09 - and what is this if input get button
15:13 - down
15:15 - fire one I think that is
15:19 - correct F input
15:25 - forget um so the best overload for the
15:29 - method unity in is not compatible with
15:32 - the argument list
15:35 - string
15:37 - um oh it's get mouse button down we just
15:40 - want get button down okay so now this
15:43 - should be
15:44 - fixed if we go ahead and save this and
15:48 - clear this out yes um Okay cool so now
15:53 - if we select our Mele you can see um
15:57 - that we have the iable damage and that
16:00 - we can change this I'll just leave it at
16:02 - 50 and the variable distance so if we go
16:04 - ahead and press press play and then uh
16:08 - press our Mouse button you can see that
16:10 - depending on what we're looking at the
16:13 - distance um changes when we pressing the
16:15 - mouse button so it is requiring the data
16:20 - correctly so this is
16:24 - perfect okay um I know that's that this
16:27 - was um a lot to take in um we'll
16:30 - continue in the next video um with the
16:34 - damaging parts and just making some
16:36 - animation and making it look really cool
16:39 - this was a lot of of coding I know that
16:42 - but I swear it'll get better so um thank
16:46 - you for watching
17:00 - [Music]