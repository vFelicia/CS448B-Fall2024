00:00 - the reason here came across this really
00:01 - cool effect where the player walks
00:03 - through a portal and it smoothly
00:05 - transitions from one world to another
00:07 - today we'll be using rendered textures a
00:09 - custom shader and some math to achieve
00:11 - this effect also this video is sponsored
00:13 - by udemy udemy is a great site for
00:15 - learning new skills and they have a
00:17 - bunch of really cool courses on making
00:19 - gains I've previously mentioned the
00:20 - ultimate guide to game development with
00:22 - unity which is a great course made in
00:24 - collaboration with unity themselves if
00:26 - you haven't already definitely checked
00:28 - that out
00:28 - but udemy actually has a bunch more cool
00:30 - courses to offer one of the ones that I
00:31 - really enjoyed is called learn to code
00:33 - by making games it takes you from
00:35 - complete beginner to having a solid
00:36 - understanding of unity and C sharp
00:38 - programming on top of that it's made by
00:40 - Penn Tristram who is just really fun to
00:42 - learn from so to get started simply
00:44 - click the link in the description and
00:45 - get a site-wide discount as long the way
00:47 - and with that let's get into the video
00:48 - so basically the way that we are
00:50 - achieving this effect in the editor is
00:53 - by creating two worlds that we run side
00:56 - by side if I go here and dock my game
00:58 - view you can see what I'm talking about
01:01 - interesting we can see that we have two
01:02 - worlds one orange and one green in the
01:05 - left one we have the player and if we
01:07 - move him around we can see him moving in
01:09 - the world in the right one we have a
01:11 - camera this camera is going to mimic the
01:14 - position and rotation of our player but
01:17 - in the other world and we're basically
01:19 - just taking whatever this camera sees
01:21 - and cutting out a chunk the size of our
01:24 - portal and displaying it on a plane so
01:27 - that's basically what's happening then
01:29 - as soon as we move through the portal a
01:31 - player switches to the other world and
01:34 - you can now see another camera over here
01:36 - in the first world that does the exact
01:38 - same thing and because we're using a
01:40 - plane to render this when we go and move
01:43 - around the portal it's invisible because
01:45 - planes are only rendered on one side in
01:48 - fact if I go into the scene here go into
01:51 - world B and find my portal you can see
01:54 - that I have a render plane here which
01:56 - just set up with an ordinary material
01:59 - and this material just shows whatever
02:01 - the camera is seeing over here in our
02:03 - first world this is what we call a
02:05 - render texture and that's basically how
02:07 - we're going to set up this effect so now
02:09 - that we understand how it works let's
02:11 - try and do it ourselves so basically
02:12 - this is what I started
02:13 - with I've created two worlds which are
02:15 - basically just a bunch of cubes and I've
02:18 - put all these cubes in the world as you
02:20 - can see inside two master objects one
02:22 - called world underscore a another one
02:25 - called world underscore B and I've taken
02:27 - world underscore P and moved it over in
02:30 - relation to world a by 32 units but you
02:33 - can move this as far away as you want to
02:35 - it really doesn't matter we just want to
02:37 - make sure that the player only can see
02:39 - one world at a time so right now if I go
02:41 - ahead and play the game you can see that
02:43 - I have my FPS controller and I'm able to
02:45 - move around but of course I see nothing
02:48 - in the portal and if I move through it
02:49 - nothing really happens so let's change
02:52 - that before we start actually moving the
02:54 - player let's make our portal actually
02:56 - look cool and let's start by doing this
02:58 - in world 8 so in here I've created a
03:00 - portal this is just an empty game object
03:01 - as well as another empty game object
03:03 - which just stores all of our graphics
03:06 - which are just three cubes stacked on
03:08 - top of each other so that's really
03:09 - nothing here I have however made sure
03:11 - that the pivot of my portal is pretty
03:14 - much in the center now we can go and
03:15 - right click on a portal and let's create
03:17 - a 3d object and you will select plane
03:19 - and we get this big fat white plane
03:22 - let's start by rotating this negative 90
03:24 - degrees on the X let's use the scale
03:26 - tool to fit this to our polo you don't
03:29 - have to get it exactly right I'm gonna
03:31 - do point to 1 by 0.3 5.3 and I think
03:35 - that fits nicely then let's rename this
03:37 - plane to render plane and this is where
03:39 - we'll be displaying the other world it
03:41 - also means that we don't need a mesh
03:43 - Collider so we'll remove that and we
03:45 - actually want to move this plane back a
03:46 - bit into the far side of the portal
03:48 - let's change the position on the z to
03:50 - point 5
03:51 - next we want to set up a material for
03:53 - this render plane so let's go to the
03:55 - project right click go create material
03:58 - and it's called this camera matte
03:59 - because it's going to be displaying what
04:02 - our camera sees and let's do underscore
04:04 - B because we're going to be displaying
04:06 - what the camera sees in world B let's
04:08 - then go to a render plane and drag that
04:11 - in there but in order to display
04:12 - something from will be we need another
04:14 - camera
04:15 - let's go to our player object and take
04:17 - the player camera from here I'm just
04:19 - gonna use this because we want the same
04:20 - skybox and post-processing settings
04:23 - let's duplicate it move it out and I'm
04:25 - gonna rename this to camera
04:27 - on the score fee let's then Center it in
04:29 - our wallet I'm just gonna put it at the
04:31 - same position as the portal so that's 0
04:33 - by 2 by 0 and let's move it over to
04:36 - world beats that means in my case I'm
04:38 - going to offset it by 32 on the X so
04:40 - this is going to be camera B I don't
04:43 - want this to be tagged as main camera so
04:44 - I'm gonna untag it so down here we can
04:46 - see what the camera is seen but how do
04:49 - we put that onto a material well you
04:51 - guessed it that's of course using a
04:53 - rendered texture so let's go to our
04:54 - project right click go create let's
04:57 - select render texture let's call it
04:59 - camera texture on the score B and now we
05:02 - can select our camera B and under the
05:04 - target texture field we'll drag in our
05:07 - new rendered texture so now you should
05:08 - see that if we select our camera check
05:11 - stupi the texture looks like what our
05:13 - camera sees and if we now go to our
05:15 - camera mat b and drag in our render
05:17 - texture on the albedo channel this now
05:19 - gets displayed on our plane of course
05:22 - it's currently distorted it has lighting
05:25 - applied onto it and it's very low
05:26 - resolution but hey at least it kind of
05:29 - works let's go ahead and fix these
05:31 - different issues the first one is that
05:33 - the shader we're using is completely
05:35 - wrong we can't really use the standard
05:38 - shader for this the reason why is we
05:40 - don't actually want to preview the
05:42 - entire texture we don't want to have
05:44 - everything that this second camera sees
05:46 - be displayed on this portal now we
05:48 - actually only want a cut out of this
05:51 - what I mean by this is if we imagine we
05:53 - take camera B here and we pull it out to
05:56 - a position of the player maybe the
05:58 - player is looking up a bit and a bit to
06:00 - the left here now we don't want to take
06:02 - this entire camera preview this entire
06:05 - image and put it in here instead what we
06:07 - want to do is we want to take only the
06:10 - part that we see through the portal so
06:12 - only this tiny part here and put that
06:15 - onto this texture in other words we want
06:17 - a cut out of the image now this might
06:19 - sound really difficult but it's actually
06:21 - really simple and I've gone ahead and
06:23 - created a shader that does exactly this
06:25 - of course have a link where you can
06:27 - download this in the description so
06:29 - let's take this into unity I'm now going
06:31 - into detail about shader writing
06:33 - basically we're dis courting the UVs of
06:35 - the object and instead we're using our
06:37 - screen coordinates if you want to know
06:39 - more about shader
06:40 - definitely let me know in the comments
06:42 - down below and I might do a separate
06:43 - video on the topic but for now we'll
06:45 - just use it as is so on our camera Matt
06:48 - B will change the shader to our new
06:50 - unlit screen cut out shader and you can
06:53 - already see this acting much much
06:55 - differently now what gets displayed on
06:57 - the cube depends on where it is on the
06:59 - screen and that's exactly what we want
07:02 - let's go ahead and undo all the changes
07:04 - to camera B here and let's now make a
07:06 - script that will take camera B and have
07:08 - it follow the position of a player in
07:10 - relation to its own portal to do that
07:12 - we'll hit add component and we'll create
07:13 - a script called portal camera well of
07:16 - course choose C sharp to create an ad
07:17 - let's open this up in Visual Studio
07:19 - now here we first need to set up a few
07:21 - references so I go public transform and
07:24 - first we need a reference to the player
07:25 - camera because that's what we're going
07:27 - to be following around so player camera
07:30 - will also need a reference to the portal
07:32 - that this camera belongs to so public
07:35 - transform portal as well as a reference
07:39 - to the other portal which the player is
07:41 - currently close to because we need to
07:42 - know the players position relative to
07:45 - his portal in order to calculate this
07:47 - cameras position relative to this portal
07:49 - so create a public transform other
07:52 - portal that's what no no update method
07:54 - we first want to get the players offset
07:57 - from his portal so we go vector3
07:59 - player offset from portal and set it
08:03 - equal to the player cameras position so
08:06 - play a camera position - the other
08:09 - portals position so other portal top
08:11 - position and this should be the offset
08:13 - we can then set our current position so
08:15 - this portal canvas position equal to our
08:18 - portals position so portal dot position
08:20 - plus the offset so plus player offset
08:23 - from portal and it's actually that easy
08:26 - if we go and save now go into unity
08:28 - first drag in our player camera then our
08:32 - portal so that's portal B which is in
08:35 - here then the other portal so that's for
08:38 - a which is in here and I should actually
08:40 - go ahead and name these so it's clear
08:42 - when we drag them in I'll just quickly
08:43 - do that so now we can see that our
08:45 - portal is portal of B and the other
08:47 - portal is portal a and now when we play
08:49 - we might get a few warning saying that
08:51 - there are multiple audio listeners in
08:53 - this scene
08:54 - that's just because we need to go ahead
08:55 - and remove the audio listener from this
08:58 - camera and if I now dock these two
09:00 - side-by-side we should see that the
09:02 - camera moves around with the player and
09:04 - indeed it does so when we look through
09:07 - the portal we are actually already
09:09 - getting a really cool looking through
09:11 - the portal effect it's still very
09:13 - distorted and it definitely has some
09:15 - mistakes but we have definitely
09:17 - introduced perspective through the
09:19 - portal however if I go ahead and rotate
09:21 - my camera the illusion kind of breaks
09:24 - that's because our players camera is
09:26 - rotating but as you can see right here
09:28 - camera B is not so we need to also
09:31 - offset the rotation to that we go back
09:34 - in our script we'll make a few lines at
09:36 - first we need to get the angular
09:38 - difference between the two pole
09:40 - rotations and we'll store this as a
09:42 - float so we'll get the angular
09:44 - difference between portal rotations I
09:48 - will set this equal to quantonium dot
09:51 - angle and the first rotation is going to
09:53 - be the portals rotation so portal dot
09:55 - rotation and then the other portals
09:58 - rotation so our the portal dot rotation
10:00 - so that's the angular difference in
10:02 - rotation we then get the portal
10:04 - rotational difference as a quaternion so
10:07 - we'll go Kryptonian portal rotational
10:10 - difference equals quaternion angle axis
10:13 - and as you can see angle axis creates a
10:15 - rotation which rotates X amount of
10:17 - degrees around a certain axis in our
10:20 - case we have the amount of degrees right
10:22 - here and we just need to specify an axis
10:24 - so the amount of degrees is going to be
10:26 - the angular difference between the two
10:28 - rotations and the axis is going to be
10:30 - vector 3 dot up now if you aren't
10:33 - confused enough already we now need to
10:34 - get the direction that we need to face
10:36 - in so we'll create a vector 3 with the
10:39 - new camera direction and this is going
10:42 - to be the portal rotational difference
10:44 - that we just calculated multiply it with
10:46 - the player cameras forward vector so
10:49 - this should now give us a vector which
10:51 - is the direction that we need to point
10:53 - this camera and so finally we just need
10:55 - to turn that into rotation so to
10:56 - transform the rotation we'll set our
10:58 - rotation to quaternion
11:00 - look rotation to a rotation that looks
11:03 - towards our new camera direction and we
11:06 - want the vector
11:07 - three dot up to beat the up Vector and
11:10 - that is definitely a lot of rotational
11:12 - calculation and I completely understand
11:15 - if you don't get this right away
11:16 - quaternions and rotations can definitely
11:19 - be really hard to grasp but it should
11:21 - work so if we now save this and hit play
11:24 - inside of unity we can see that camera P
11:27 - rotates accordingly and that it now
11:29 - works much nicer when we rotate and look
11:32 - through the portal we're still getting a
11:34 - few weird issues we can see some of the
11:37 - portal sides that doesn't look too good
11:39 - and the fields that the two views aren't
11:41 - totally synced the reason for this is
11:43 - that our camera texture B is not set up
11:45 - to be the same size as our screen
11:48 - because we can't really know beforehand
11:50 - how big our game view is going to be
11:52 - therefore when we start the game we want
11:54 - to set this up through code to do that
11:56 - let's go and create a new empty object
11:58 - let's move this to the top let's reset
12:01 - it and let's call it something like game
12:03 - manager here we can do all of our setup
12:05 - let's add a new component to this and
12:07 - let's call it portal texture setup let's
12:10 - say create an ad let's open it up now
12:12 - here we're not going to be using our
12:13 - update method but we do want to use the
12:15 - start method but first we need a few
12:17 - references we need a public camera which
12:20 - is going to access our camera B as well
12:22 - as a public material which is going to
12:25 - be the material for camera B so camera
12:27 - mad B then when the game starts we want
12:30 - to check if camera B already has a
12:33 - target texture so if it already has a
12:35 - render texture assigned which means it
12:37 - is not equal to null well then we want
12:40 - to remove that texture we do that by
12:42 - going camera B target texture dot
12:44 - release now that we assured the camera
12:46 - is cleared we can go camera P dot target
12:49 - texture and set it equal to a new render
12:52 - texture so we're basically just creating
12:54 - a rendered texture through code and here
12:56 - we can set the dimensions so we of
12:57 - course want the width of the render
12:58 - texture to be screened start with the
13:01 - height to be screened dot height and
13:03 - then we can set the depth of the texture
13:05 - which we'll just set to 24 so now that
13:07 - we've created a rented texture and set
13:09 - our camera to render to that texture we
13:11 - can take this texture and feed it into
13:13 - our material so we'll set camera matte B
13:16 - dot main texture equal to camera B
13:19 - target texture
13:21 - and there we go if we now save this
13:22 - going to unity and reference first
13:24 - camera B then camera mat B and hit play
13:28 - we can see that as soon as we play the
13:30 - game the texture on the plane becomes
13:32 - really really crisp and we now no longer
13:34 - get this weird offsetting that's because
13:37 - unity has recognized the size of our
13:39 - game view and it's gone ahead and
13:41 - automatically created a render texture
13:43 - for camera mat B and C if we go ahead
13:45 - and click on it here with the
13:47 - appropriate size and this rendered
13:49 - texture is not visible anywhere because
13:50 - it's created at runtime behind the
13:52 - scenes but it is definitely there this
13:54 - also means that we can just go ahead and
13:56 - take our camera texture B and remove it
13:58 - because we're creating this
13:59 - automatically when we play awesome so
14:02 - that's actually it for the first part of
14:04 - this tutorial
14:04 - being able to look through the portal
14:06 - and if I go behind the portal you can
14:08 - see that because we're using the plane
14:10 - it disappears but now we need a method
14:12 - of safety transporting the player to the
14:14 - other world to do that we need a
14:16 - separate plane let's go under world a go
14:19 - to our portal and select the render
14:21 - plane now this is all set up correctly
14:22 - but we need a Collider that will trigger
14:25 - whenever a player walks in turn to do
14:27 - that that's duplicate the render plane
14:28 - let's remove the mesh renderer the mesh
14:31 - filter let's rename it to Collider plane
14:33 - and let's add a new component which is
14:35 - going to be a box Collider now we can
14:37 - reset this scale here and start changing
14:39 - the size so first let's bump this up on
14:42 - the X bump it up on the Z as well to
14:45 - make it fit I'm just gonna make it two
14:46 - by three and I'm gonna set the wide to
14:49 - zero we don't want this box to have any
14:51 - width I am however going to move it
14:53 - forward so it's in front of the render
14:55 - plane because I don't want an instance
14:57 - where our player will actually walk
14:58 - through the render plane before we get
15:00 - teleported and see what's behind our
15:02 - portal here that's just not gonna look
15:04 - good so I'm gonna set the Z here to zero
15:06 - so it's half a unit in front of the
15:08 - printer plane I found that works pretty
15:09 - well I'm then gonna mark our box
15:11 - Collider as a trigger and now we're
15:13 - ready to create a nother script this is
15:15 - going to be the portal teleporter script
15:17 - let's say create an ad and open it up we
15:20 - can remove the start method and instead
15:22 - we need a reference to the player so
15:24 - public transform player as well as a
15:27 - reference to the receiving portal
15:29 - because we need to know where we should
15:30 - send our player so we'll create a public
15:32 - transform and
15:34 - the receiver and before we send our
15:36 - player anywhere we need to know whether
15:38 - or not the player is colliding with the
15:40 - portal to do that we use void on trigger
15:42 - enter this method is of course called
15:45 - whenever something enters the trigger
15:46 - and we can gather some information about
15:48 - the object that enters by writing
15:50 - Collider and let's call it author so
15:53 - other of course refers to the other
15:54 - object we are colliding with and we need
15:56 - to make sure that this other object is
15:58 - actually a player so we need to check if
16:00 - other tag is equal to player and if it
16:03 - is well then the portal and the player
16:05 - is overlapping so let's go ahead and
16:07 - create a private boolean called player
16:10 - is overlapping and set it equal to false
16:13 - by default however if this is true we'll
16:16 - set player is overlapping to true we
16:19 - also need to determine when the player
16:20 - is not overlapping anymore in which case
16:23 - we'll go void on trigger exit again
16:26 - we'll take in a Collider farther if
16:29 - other tag is equal to player well then
16:32 - the player has left the portal so player
16:34 - is overlapping is false and now inside
16:37 - of our update method we know whenever
16:38 - the players overlapping so we say if the
16:41 - player is overlapping well then we want
16:43 - to use the dot product and let me show
16:46 - you why so we have a portal as well as a
16:49 - player that wants to enter it but we
16:51 - need to make sure that the player is
16:53 - entering the portal from the right side
16:55 - because from behind we're not drawing
16:57 - the portal and so we don't want to
16:59 - teleport the player if he walks into it
17:01 - from behind to check if the players
17:03 - coming from the right side we use the
17:05 - dot product that means that we get a
17:07 - vector that points upwards from the
17:09 - portal so we'll call this portal up and
17:11 - we also create a vector that's pointing
17:12 - towards the player so we call that
17:14 - player between these two vectors there
17:17 - is an angle and since the dot product is
17:19 - calculated using the cosine of this
17:22 - angle between these two vectors we can
17:24 - use it to determine where our player is
17:26 - in relation to the portal we can do this
17:28 - because the cosine to a angle less than
17:31 - 90 is positive whereas the cosine to an
17:35 - angle greater than 90 is negative and if
17:38 - we have a look at an instance where our
17:40 - player has gone through the portal and
17:42 - has passed to the other side the angle
17:45 - between these two vectors is definitely
17:47 - going to be created
17:48 - 90 and so the cosine to that angle is
17:51 - going to be less than zero and so is the
17:54 - dot product now what does this mean for
17:56 - us in code well it means that we can
17:57 - take the dot product so we can write
17:59 - float dot product which is going to be
18:01 - equal to vector three dot dot between
18:04 - the up vector of our portals so
18:06 - transformed a table and a vector
18:07 - pointing from the portal to the player
18:09 - to do that we get a vector three which
18:12 - we'll call portal to player and set
18:15 - equal to player position minus the
18:18 - portal's position so transformed up
18:19 - position and we'll then just put that in
18:21 - here so we get a dot product between
18:23 - transformed up and a portal to player
18:26 - and we can then check if the dot product
18:28 - is less than zero if this is true the
18:33 - player has moved across the portal and
18:36 - so we want to teleport him and of course
18:39 - here we need to do a bit of offsetting
18:41 - of the position and rotation as well
18:43 - first off we need to get the difference
18:45 - in rotation so we'll create a float
18:47 - rotation difference and set it equal to
18:50 - quaternion dot angle we want to use the
18:53 - rotation of our portal as well as the
18:56 - rotation of the receiving portal so this
18:59 - is the difference in rotation between
19:00 - the two portals and we want to make sure
19:02 - to reverse that will then add 180
19:05 - degrees on top of that so we'll go
19:07 - rotation difference plus equals 180 and
19:10 - that's because if we have a look at our
19:12 - two portals we want them to be flipped
19:13 - so here we want to be able to enter from
19:15 - this side and here we want him to go out
19:18 - from this side and so we also want him
19:19 - to enter from this side so you can see
19:22 - that's flipped by exactly 180 degrees if
19:25 - we do it properly cool so finally we can
19:27 - take our player and rotate him around
19:29 - the other axis so Victor three job by
19:32 - our rotation difference and it's
19:34 - teleport there so now we're rotating him
19:37 - properly now we can also actually move
19:39 - him to do that we create a vector three
19:41 - which is going to be the position offset
19:43 - and this is the current offset between
19:45 - the player and the portal so player top
19:48 - position minus the portals position and
19:51 - as you can see we've actually calculated
19:53 - this once before right up here so we
19:55 - don't need to do that again however we
19:57 - do want to make sure that when we apply
19:59 - our position offset it also gets rotated
20:02 - so we'll calculate quaternion Euler so
20:05 - here we create a rotation that rotates
20:06 - zero degrees around the X rotation
20:09 - difference around the Y and zero degrees
20:12 - on the z and we'll multiply this with
20:14 - our portal to player vector so now
20:16 - finally we can set all players position
20:19 - equal to receiver dub position plus
20:22 - opposition offset and of course once
20:25 - we've teleported him we are no longer
20:27 - overlapping so player is overlapping is
20:30 - again false all right if you go through
20:33 - that you're amazing congratulations now
20:35 - we should be able to select our Collider
20:37 - plane and under here we have two empty
20:39 - slots one for the player we can drag him
20:41 - in there and one for the receiver and
20:43 - this should actually be a separate
20:45 - Collider plane on the other portal but
20:48 - instead of creating that from scratch
20:49 - I'm actually just gonna take the render
20:51 - plane and Collider plane right here and
20:53 - duplicate them by hitting ctrl D and
20:55 - then I'm gonna move them to the second
20:57 - portal be here and I'm just gonna take
20:58 - all their positions on the X here and
21:01 - zero those out so that should actually
21:03 - snap them right over to the other portal
21:05 - here all we want to do is make sure to
21:07 - kind of flip everything so we'll take a
21:08 - render plane and we'll move that by
21:11 - negative 0.5 as well as rotated around
21:14 - the Z by 180 there we go so now it's
21:17 - pointing out here and it's at the back
21:19 - of the portal I will also take our
21:20 - collider plane and rotate that by 180 as
21:23 - well and we don't want these to be named
21:25 - something with one we can just go ahead
21:27 - and do that so now we can take our
21:30 - collider plane for portal a and drag as
21:32 - the receiver the collider plane for
21:34 - portal B as well as take the coil plane
21:38 - for portal B and drag as the receiver
21:40 - the collider plane for portal a and now
21:43 - ladies and gentlemen if we press play we
21:46 - should be able to rock right through the
21:49 - portal and here over here it looks kind
21:51 - of weird I know that that's because we
21:53 - haven't set up the rendering for this
21:54 - portal but we are actually able to walk
21:56 - through it so there we go so now we
21:58 - simply need to also set up rendering for
22:00 - the other portal here and we've actually
22:02 - done this before so it's simply a matter
22:04 - of duplicating everything we can go
22:06 - ahead and duplicate camera B here and
22:08 - call this one of course camera a and
22:11 - this one we want to see row on the X and
22:13 - not be moved by 32 so it's right over
22:15 - in the center of the other portal for
22:18 - this portal camera the player camera is
22:20 - going to be the same but the portal is
22:22 - going to be now portal a so we'll drag
22:24 - in portal a and the other portal is
22:26 - going to be portal B so we'll drag in
22:28 - portal B we're just prover seing the two
22:30 - finally we can go to our game manager
22:32 - and here we need to make our portal
22:34 - texture setup also set up the textures
22:36 - for camera a so I'll just duplicate this
22:39 - I'm a quickly copy some code so we're
22:41 - creating another camera here for camera
22:43 - a and other material for camera matte a
22:46 - as well as all this code down here but
22:49 - instead of camera B we are now referring
22:51 - camera a so Catherine ate a target
22:54 - texture there we go and camera a main
22:57 - texture is equal to camera at target
22:59 - texture there we go make sure to replace
23:01 - everything or else it's going to look
23:02 - really weird let's say that hit into
23:04 - unity and we get two empty fields let's
23:06 - drag in camera a as well as camera Matt
23:10 - a which we still need to create so let's
23:12 - duplicate camera Matt B and rename it to
23:14 - camera Matt underscore a and remember we
23:17 - don't need to set anything up here
23:18 - because the texture is inserted
23:20 - procedurally so we'll just select our
23:21 - game-manager
23:22 - and drag it in as is and now I think
23:25 - it's actually going to fully work this
23:28 - time so if we switch into game you
23:31 - alright that's not quite working and
23:33 - that is because we need to take the
23:35 - depth of both camera a and B and
23:37 - decrease it to make sure that our
23:39 - standard camera always renders on top
23:42 - this won't be a problem when you play
23:43 - the game but it's just annoying when
23:45 - you're in the editor oops I actually
23:46 - forgot one thing and that is we also
23:48 - need to go into weld beam under the
23:51 - render plane here and change the camera
23:53 - mat to a that needs to be swapped out as
23:56 - well to make sure that it's not
23:57 - displaying what camera B is showing but
23:59 - what camera a is showing and now if we
24:02 - maximize our game view and press play we
24:05 - can see that we can look through the
24:06 - portal we can walk around it nothing
24:08 - happens and we can try and go through
24:10 - the portal and now we're involved B and
24:13 - we can look back into world a and we can
24:15 - actually go right back into that so
24:18 - that's it yay so that's pretty much it
24:20 - for this video again definitely check
24:22 - out the many awesome courses over at
24:24 - udemy simply click the link in the
24:25 - description to get a discount on that
24:27 - thanks for watching and I will see
24:28 - you in the next video thanks to of the
24:30 - awesome patreon supporters who donated
24:32 - in December and a special thanks to Judy
24:34 - Minh Vecchio infinity PPR euro Omer and
24:37 - soft tune sighs mommy
24:38 - Derek Eames Kirk Murr free Samara fine
24:40 - Peter died double tap 45 James Pete and
24:43 - Evans
24:43 - thomas morley Superman the great John
24:45 - Burkhart kookaburra Jason Lotito
24:47 - Alex for kid ski suniye Hobson James
24:49 - Rogers Robert Boone Rob fan and Erasmus