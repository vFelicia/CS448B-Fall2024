00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number 26
00:06 - in the how to make a 2d platformer
00:07 - course in today's video we're going to
00:09 - have a look at adding some audio for our
00:11 - game so we'll expand on the audio
00:14 - manager just a bit and we'll be adding a
00:16 - bunch of different sounds and music to
00:18 - make the game a lot more awesome so
00:21 - let's just go ahead and get started so
00:23 - you can see on my desktop here I have
00:26 - the 2d assets pack you can download that
00:28 - from the break keys website break is
00:32 - calm under any of the 2d courses that
00:35 - should be a free download link and under
00:38 - the audio folder here I've gone ahead
00:40 - and added a bunch of different sounds
00:42 - all of these are freely used you can use
00:45 - them both commercially or non
00:47 - commercially and share them any way you
00:50 - want credit to me is of course wonderful
00:53 - I didn't make these sounds I just
00:55 - gathered them so you can see them here
00:58 - actually some of them I made and we also
01:01 - have a folder for music we have this
01:05 - chill music which is from the make game
01:07 - course you can go ahead and add that if
01:09 - you want and we also have these two
01:11 - awesome tracks and these are made by a
01:13 - very good friend of my mind called
01:16 - I kill Box Dean Johnson and link to him
01:20 - is in the description or his name or
01:22 - whatever and you can see here we have if
01:25 - I just expand on the name here we have
01:28 - the percussion space music and I think
01:30 - we should just go ahead and have a
01:31 - listen to that so just double click it
01:35 - here
01:36 - so it's this very laid-back and chill
01:39 - grew and it has this very ambient feel
01:43 - which I really like for the game and we
01:46 - also have the relaxed space music also a
01:54 - very ambient field but this is with the
01:57 - out the groove so if you want this could
02:00 - be fine for a menu or maybe when the
02:02 - action isn't occurring so you can of
02:05 - course choose between these choose the
02:06 - one that you like the best and yeah cool
02:10 - so some of the audio sounds or some of
02:13 - the sound clips here you hear as we use
02:17 - them so I'm not going to play all of
02:18 - those right now
02:19 - so let's still right into unity here and
02:23 - you can see I haven't changed anything
02:24 - since the last time I think I've
02:28 - reversed everything back to normal
02:29 - because I tried to record this last week
02:33 - and that was the reason why you didn't
02:35 - get a video last week is because I
02:36 - recorded like an hour of material and
02:39 - well the sound wasn't working and that
02:42 - is not really good when you're making an
02:44 - episode about audio so that was a real
02:48 - bummer and I it took me like five hours
02:50 - of wasted work or something so but it's
02:53 - hopefully working now and everything
02:56 - should be reversed back to normal so
02:58 - what I basically want to begin with here
03:01 - is create a bit more of an awesome audio
03:04 - manager because right now this is fine
03:06 - for a foundation but what I want to do
03:10 - is I want to create this into a instance
03:14 - that will just transition or don't
03:17 - destroy whenever we know load a new
03:19 - scene so that we can have audio playing
03:21 - from the main menu directly over to the
03:24 - scene or other ways around so if we
03:26 - change a scene no matter where we begin
03:30 - it will spawn in an audio manager and
03:32 - when we then transition to a new scene
03:34 - that audio manager will persist so
03:37 - that's something that I wanted to do for
03:39 - a while with to show you how to do for a
03:43 - while with some other stuff too so I
03:45 - think we'll just begin with the audio
03:47 - manager here so let's double click this
03:49 - to open it up
03:49 - in Visual Studio and I'll show you want
03:52 - you what I mean so the basic idea here
03:55 - is that so far we have had kind of the
03:59 - idea of a Audio Manager instance and
04:03 - that's all fine and dandy and we'll keep
04:05 - that however what we want to do is have
04:09 - an audio manager sit in every scene that
04:12 - we want to have audio in and then we in
04:17 - the awake method we check if instance is
04:20 - not equal to null meaning that if
04:22 - there's already something there well
04:25 - then we want to check if the instance
04:29 - that is there is equal to this and if it
04:33 - is not well then what we want to do is
04:35 - simply destroy this object so we're
04:37 - simply going to say destroy game object
04:40 - so this will you will need to have this
04:44 - um Audio Manager sit on a separate
04:47 - object or you're going to destroy all
04:48 - the scripts with the - I'm just going to
04:51 - make this very apparent but you could of
04:54 - course just go ahead and disable it or
04:56 - something like that I'm just going to
04:58 - completely remove the object so that you
05:00 - won't get confused and then else now we
05:04 - set the instance equal to this and we
05:07 - want to flag this as a don't destroy
05:09 - load so we simply call the don't destroy
05:11 - load method and we input this and don't
05:16 - think that needs to be of type game
05:17 - object and what this will basically do
05:19 - is it will tell unity whatever went well
05:22 - whenever we change to a new scene don't
05:24 - destroy this object just well take it
05:28 - into the new scene as is cool so that
05:31 - was kind of the first thing that I
05:33 - wanted to change here and this will
05:35 - allow us to take this component
05:37 - copy it then remove it and let's create
05:43 - a new object control-shift-n let's make
05:47 - name this as an audio manager and just
05:50 - drag it up here reset the transform and
05:53 - we're going to paste the component as
05:56 - new here and what we can then do is take
05:59 - this make it into a prefab
06:02 - hop into our main menu and then drag the
06:05 - audio manager up there so now we have a
06:09 - prefab instance in both cases and if you
06:13 - will notice here if we start in the main
06:16 - menu scene the audio manager is here
06:20 - when we then hit play and it transitions
06:23 - to the new scene well for some reason
06:26 - there's also an audio manager there now
06:28 - so it looks like I've made some kind of
06:30 - error here let's go back into the awake
06:33 - if instance is not equal to I know so if
06:37 - that's already something there
06:38 - and if instance is equal to this that
06:41 - should be if it's not equal to this and
06:44 - there we go so if we hit play again and
06:49 - play there you can see that there is now
06:53 - only one audio manager in here and that
06:55 - is the audio manager from the first
06:57 - scene the other one notice that there
07:00 - was a new audio manager from the older
07:03 - scene and therefore just destroyed
07:05 - itself it was needed good so that is
07:09 - kind of the good way to do it and some
07:12 - frankly something we should have done
07:14 - from the very beginning next up I think
07:17 - we should begin by adding in a music
07:20 - track because if that's something that
07:22 - really makes your game feel a lot more
07:24 - awesome and add some audio depth to the
07:27 - game well it's music and also it's it's
07:30 - nice to kind of theme some of your
07:31 - sounds around the music that you're
07:33 - playing so let's go into the music
07:37 - folder and I'm going to take the
07:38 - percussion space music and drag it into
07:41 - the audio folder in unity come on drag
07:45 - please first some reason that isn't
07:50 - dragging so let's just import a new
07:51 - asset and then find it here Dropbox to
07:56 - the assets pack audio music and take the
07:59 - percussion space music there I don't
08:01 - know why that didn't want to drag and
08:03 - drop that shouldn't be a reason for that
08:06 - okay cool and notice that all of the
08:09 - audio files in this pack are decomp or
08:12 - compressed already
08:14 - meaning that they are ready to play in
08:18 - your game I mean I've tried and set up
08:20 - the settings so that we get good quality
08:22 - but the files are ridiculously large or
08:25 - anything good so we can hear it in here
08:30 - yeah and that sounds awesome and we're
08:33 - just going to leave all of these
08:34 - settings then we can find our audio
08:36 - manager and expand this array so we
08:39 - already have the respawn here and I want
08:42 - to change this to simply music for now
08:44 - we might need a separate system for
08:46 - blending between different music tracks
08:47 - at a later point but for now we're just
08:50 - going to drag this in as a sound to drag
08:52 - in the clip there change the volume to
08:55 - something like I don't know point four
08:58 - maybe and the pitch at one and we don't
09:01 - want any randomness on this whatsoever
09:03 - then we can double click on our audio
09:05 - manager and in the start method we can
09:08 - simply call the play sound music there
09:12 - we go so if we go ahead and try this out
09:15 - hit play we can hear the music plane in
09:20 - the background now so that's perfect
09:23 - another thing that we want to do with
09:25 - this music track is have it loop and
09:27 - that's actually an option for the audio
09:31 - source so if we go up here where we kind
09:34 - of had have this class called sound
09:36 - where we define some different
09:38 - properties that we want to be able to
09:39 - change for a sound well we can make a
09:41 - new property here let's make this below
09:46 - everything else and this is simply going
09:48 - to be a public Bowl whether or not we
09:53 - should loop the sound so we're just
09:55 - going to call it loop and default it to
09:57 - false and then down here when we set the
10:00 - source because this is not going to
10:03 - change when we play the sound but it's
10:06 - something that's going to be constant
10:07 - for sound we can set it down here and we
10:09 - are simply going to say source dot loop
10:11 - equals loop and it should be that easy
10:17 - actually so that's awesome another thing
10:20 - that I want to do is have our us have
10:24 - the ability to actually stop Essam from
10:27 - playing so on
10:28 - we're going to make a new public void
10:30 - here called stop sound it's going to
10:33 - take in the name and instead of sounds
10:35 - either play we're going to say sounds I
10:39 - stopped and then we can simply scroll up
10:43 - here and add that method up here so
10:45 - instead of public void play we're going
10:47 - to have a public void stop and it's
10:50 - simply going to call that on the source
10:53 - later we can maybe add some kind of
10:56 - fade-out method here or whatever that
10:58 - could be a parameter you could add a
10:59 - fade-out time something like that and
11:02 - new track to transition to the
11:05 - possibilities are endless but for now
11:07 - this is what we're going to do so now
11:09 - that we've added that in let's just test
11:12 - this by let's say making a quick test
11:17 - update loop here and we're simply going
11:22 - to say that if time that time is greater
11:25 - than five seconds then we are going to
11:30 - say stop sound music so we should hear
11:34 - our music stop after exactly five
11:37 - seconds so oh and we also want to check
11:40 - looping here so just going to quit that
11:43 - so click loop on that and hit play
11:48 - and it should stop right about now
11:52 - good so that's perfect
11:55 - and you can see here that if we inspect
11:57 - our sound one music here you can see
11:59 - that it's set to loop now so that is all
12:02 - very perfect cool and that's kind of all
12:06 - I wanted to do with our audio manager
12:10 - today at least so next sound that we
12:15 - want to add and well I think we should
12:17 - go ahead and add some kind of hover
12:19 - sound to the plane quit button so let's
12:22 - go under our menu manager and let's add
12:27 - some method here one called public void
12:31 - maybe on mouse-over
12:37 - and this is simply going to play a sound
12:43 - so therefore we need a reference to our
12:45 - audio manager so you're going to have a
12:48 - void start here whoops where we cache
12:53 - that reference so we're going to have an
12:57 - audio manager we're just going to call
13:00 - this on your manager and in our start
13:03 - method we're going to say Audio Manager
13:07 - equals audio manager dot instance and if
13:12 - on your manager is equal to null but
13:16 - then something else went terribly wrong
13:18 - and you're just going to go ahead and
13:20 - throw an error here so T backlog era
13:23 - no audio manager found good and we're
13:30 - going to be using this piece of code a
13:32 - lot so I'm just going to copy it to my
13:34 - clipboard and then I'm probably going to
13:37 - paste later so what we want to do here
13:39 - is simply say Audio Manager dud what do
13:44 - we want to say dot play sound and then
13:47 - we want to give it the name of the sound
13:49 - that we want to play and this is simply
13:51 - going to be a hover animation or a hover
13:56 - your sound and I have some pretty cool
13:59 - sound clips for that but I think to make
14:01 - it
14:01 - easily exchangeable we are going to go
14:05 - in here and add a public let's make this
14:09 - a serialize field actually so serialize
14:12 - field string and it's simply going to
14:15 - stay store the hover over sapped there
14:19 - we go
14:20 - and that is going to be hover button
14:26 - hover by default and then here we put
14:31 - the hover over sound something like that
14:36 - cool
14:38 - so let's minimize that we should see the
14:41 - field appearing here now there we go the
14:44 - hover over sound button hover and then
14:47 - in our Audio Manager we're going to add
14:49 - in a new sound and this is going to be
14:53 - the button hover we're going to drag in
14:57 - a sound from our sound library and this
15:00 - is going to be the button hover simply
15:03 - and again this is not working I'm just
15:06 - going to go ahead and import a bunch of
15:07 - sounds here I think we should have the
15:10 - button hover in the button press really
15:12 - okay we can only go one at a time that's
15:15 - going to be annoying so you can hear it
15:17 - here just this very very short sound and
15:21 - simply add that to the on your manager
15:25 - there drag that in the volume seems fine
15:30 - the pitch at one random volume of one
15:34 - point one and a random pitch of point
15:37 - one and no looping and that looks good
15:39 - then in our menu manager that's set up
15:42 - correctly good what we can then do is go
15:44 - into our canvas select the play button
15:48 - and down here under the event trigger
15:51 - you can see that I've added this
15:53 - component earlier so basically we want
15:55 - to simply hit add component here event
15:58 - trigger then we add a new event type
16:00 - this is going to be the pointer enter
16:04 - and that's going be then going to add an
16:08 - event we are going to add the menu
16:10 - manager to that event and call the
16:13 - function on the menu
16:14 - menu manager called on mouse-over then
16:18 - we're also going to have another one in
16:20 - a minute for whenever we press a button
16:22 - so that's all we wanted to do with that
16:26 - and we need to remember to copy that
16:28 - over to the quit button as well but we
16:30 - can just have a lesson so we have this
16:34 - very subtle hover over sound and I think
16:37 - that's actually really really nice I
16:39 - want to just make this a bit more clear
16:41 - so something like point five five will
16:44 - be better let's also make another sound
16:46 - for actually pressing the button let's
16:49 - call this button press we're going to
16:52 - import you get another live sound and
16:54 - this is going to be the button press
16:57 - sound then under on the audio manager we
17:01 - drag that in there the volume is
17:03 - probably going to be the same you can
17:05 - just have a listen to the sound here oh
17:09 - cool actually it's a bit louder so I'm
17:13 - going to have that at this at like 0.45
17:16 - the pitch at one and I don't actually
17:19 - want any randomness on this and remember
17:22 - to have an odd loop let's apply that go
17:26 - into our menu manager go into the script
17:29 - here and we're going to make another
17:31 - public void here which is going to be
17:34 - the actually we could just call this
17:36 - through the start game and quit game
17:38 - which I think we're just going to do we
17:41 - could make a separate method that we
17:42 - call but that's really no reason to so
17:46 - let's just have another serialize field
17:48 - this is going to be the press button
17:51 - sound and this is going to be button
17:56 - press there we go and we're simply going
18:00 - to call maybe before we do that so audio
18:06 - manager dot play sound and it's going to
18:12 - be the pressed button sound that we want
18:14 - to play and we're going to do the same
18:16 - here cool so let's say that head back
18:23 - into unity
18:24 - and we are already calling these events
18:27 - so we don't actually need to to do
18:30 - anything except copy this component over
18:33 - to the quit button as well so you can
18:36 - see I have the event trigger there we'll
18:38 - just delete that and paste component as
18:40 - new good so save that apply that prefab
18:45 - hit play and we should hear hover over
18:49 - sounds for both of them and a press
18:53 - sound and you can hear how all of the
18:56 - audio transitions to the new scene
18:58 - without any glitching cool so next up is
19:01 - probably some shooting some explosion
19:03 - sounds maybe some footsteps when we land
19:05 - or something let's just go ahead and
19:07 - continue into the next scene so let's
19:09 - open up our main level and let's add a
19:12 - shooting sound so on our player under
19:14 - our arm and then pistol we have a weapon
19:17 - script let's go ahead and double click
19:19 - this to open it up and you can see in
19:22 - here and then alright down here we have
19:24 - a method called effect where we spawn
19:27 - all the fire effects and right after we
19:29 - shake the camera I basically want to
19:32 - play some audio so here play shoot sound
19:36 - and this basically happens as with any
19:42 - of the other stuff we could have
19:45 - different sounds for different weapons
19:49 - and therefore I think we should have a
19:52 - variable up here with the name of the
19:54 - sound of this weapon uses so let's go
19:57 - ahead and just make that burn quickly we
19:59 - are going to first have a civilized
20:02 - field actually we've just made
20:07 - everything else poppin let's just do the
20:10 - same here so public string and this is
20:13 - going to be the weapon shoot sound and
20:18 - it's going to default to our Glock or
20:26 - default shot let's just make that so we
20:30 - have this for now and we can always add
20:32 - to this just default shot will do and
20:34 - then we are going to have a
20:37 - reference of course to the audio manager
20:40 - now we should actually go ahead and just
20:42 - say caching and here we're going to add
20:46 - the audio manager audio manager and in
20:52 - the start method down here we say audio
20:57 - manager equals audio manager dot
20:59 - instance if audio manager is equal to
21:03 - null then we have done something wrong
21:08 - so debug that lock error
21:10 - freaked out no audio manager found in C
21:19 - cool and then down here we can simply
21:23 - say audio manager dot play sound weapon
21:29 - shoot sound good let's say that say back
21:34 - into unity let's see what we have here
21:38 - right now this is set to default shot
21:42 - that's perfect let's make a sound with
21:45 - that name under the Audio Manager you
21:47 - can see how all of the settings have
21:49 - updated in here because we made it into
21:51 - a prefab let's change that to 5 make a
21:55 - default shot let's actually import the
21:58 - audio so import new asset let's find the
22:02 - one called shot let's just listen to it
22:06 - this very short pop sound we then go
22:10 - into the audio manager drag in the shot
22:13 - the volume is going to be I don't know
22:16 - point seven maybe a random volume of 0.1
22:21 - and a random pitch of point one is going
22:23 - to be fine and let's try and apply that
22:26 - so let's hit play
22:32 - that is perfect so now we can actually
22:34 - shoot our enemies and see what's going
22:38 - on next up is an explosion sound so I'm
22:42 - just going to conclude these there and
22:46 - let's make the explosion so six and this
22:49 - is going to be simply explosion and
22:54 - always make more
22:55 - let's drag in some audio import new
22:58 - asset find the one called explosion and
23:01 - I really like this one kind of very
23:05 - old-school a bit pixelated explosion
23:08 - sound but it sounds so satisfying when
23:11 - we apply that to enemies good so let's
23:14 - drag then under the on your manager
23:17 - explosion the volume is fine maybe even
23:22 - point eight on this one ah we're just
23:25 - going to keep it and yeah all of the
23:27 - settings are just fine too and then we
23:29 - can go out and find the place in our
23:32 - code where we kill off an enemy and I
23:34 - believe that's in the GM script actually
23:37 - so if we go into our game master here we
23:41 - can find the place where we kill the
23:44 - enemy so kill player kill enemy right
23:47 - here so you can see that we instantiate
23:50 - some death particles we shake the camera
23:52 - we should actually go ahead and just add
23:55 - some comments here add particles go
24:03 - camera shake let's play some sounds good
24:14 - and this sound is again going to be
24:17 - depending on dependent on the enemy so
24:19 - let's go ahead and add that variable to
24:22 - the enemy that we have passed in as an
24:25 - argument up here so let's just go enemy
24:28 - dot let's say audio manager and we have
24:36 - that reference set up for from earlier
24:38 - videos so audio manager the play sound
24:40 - and then we're going to say enemy
24:43 - death sound name and that's going to
24:49 - work just fine as long as we remember to
24:52 - find our enemy under prefabs here let's
24:55 - just take the alien spaceship we have
24:57 - our enemy script here we are going to go
25:00 - in and create a new variable we have the
25:05 - all of the stats it's not what we want
25:08 - we want one down here which is going to
25:11 - be a public string enemy death sound or
25:15 - death make button I call this enemy
25:18 - sound name death name game master death
25:22 - sound name that's fine we're just going
25:26 - to go with that death sound name and
25:29 - default that to explosion and that was
25:38 - basically all we needed to do there I
25:40 - think so that is working that looks good
25:44 - you can see here that explosion appears
25:48 - there it is let's try it so play let's
25:55 - get some enemies to shoot that's perfect
26:01 - and notice it also plays the sound if
26:05 - the enemies hit us without us killing
26:07 - them so
26:09 - first okay so this is weird for some
26:14 - reason it waited a bit before spawning
26:17 - something that okay that's a bug we
26:18 - might need to check out later
26:20 - doesn't look game breaking but it
26:21 - definitely annoying so you can see it
26:23 - also spawns in smashing they're three oh
26:26 - yeah and the response the works good so
26:30 - the next thing that I want to do is add
26:32 - some kind of audio feedback for whenever
26:35 - our player takes damage or dies so let's
26:38 - go ahead and import two new audio files
26:40 - now we're going to import new asset and
26:44 - first off we are going to have the death
26:47 - voice and also import the runt voice too
26:54 - so the death voice here is something I
26:58 - want to play whenever a player dies and
27:00 - the grunt voice - oh it's something I
27:03 - want to play whenever our player takes
27:05 - damage you could of course since there
27:08 - are two grunt voice two's play one at
27:11 - random but I'm just going to play this
27:14 - it's it's very similar to do that kind
27:16 - of randomness and frankly I think you
27:19 - know how to do that by now so that's
27:21 - completely up to you
27:23 - so let's find our Audio Manager and
27:26 - let's a make room for two new sounds
27:29 - first off we have the death voice and
27:33 - then we have the grunt voice or let's
27:39 - just call this grunt whine grunt let's
27:42 - just call it grunt there we go
27:44 - dragged in the death voice and drag in
27:50 - the grunt and the volume here things
27:56 - should be like 0.5 and this one like 0.4
28:00 - maybe and don't want any randomness to
28:04 - these whatsoever
28:06 - a bit of random volume on the grunt
28:09 - maybe there we go so let's apply that we
28:13 - then go under rgm again because that's
28:16 - also where we are kill a player no no no
28:20 - no let's do this in our actual
28:22 - a script I would like to have it sit
28:25 - here because what we can then do is play
28:27 - the sound dependent on whether or not we
28:29 - die because that's handled right here in
28:31 - damage player method so let's just mix
28:34 - set up some references here we're going
28:35 - to have a Oh see there I didn't remember
28:39 - to delete these we have the public
28:40 - string death sound name and I default
28:43 - that to death voice and a public string
28:45 - damage sound name and I'd fold that to
28:48 - damage voice so let's just use that and
28:51 - that's fine instead of damage voice here
28:54 - we have grunt good good good and then we
29:00 - want to set up a reference to the audio
29:02 - manager so we're going to have a private
29:05 - audio manager Audio Manager and again in
29:12 - the start method we said on your manager
29:14 - equal to audio manager done instance if
29:18 - audio manager is equal to null
29:27 - debug.error unknown manager in c good
29:41 - and then under the damage player we say
29:44 - if stats that current health is less
29:46 - than or equal to null meaning if we've
29:48 - died well then we kill the player and we
29:50 - also play the play death sound we call
29:56 - audio manager dot play sound death sound
30:01 - name and down here if that did not
30:05 - happen so else we play damage sound and
30:12 - it will play this no matter what has
30:14 - damaged you and no matter yeah well no
30:18 - matter what and so either if we take
30:22 - fall damage if we implement that at some
30:24 - point that's going to apply here if we
30:26 - died from our own missiles in the future
30:28 - that's also going to work and that's
30:30 - fine with me so let's do on your manager
30:32 - play sound and this is going to be the
30:35 - damage
30:36 - sound name good and let's just inspect
30:43 - our player here and make sure that those
30:44 - two variables up here and they do but we
30:49 - have to change this to grunt so let's
30:52 - apply that prefab collapse the scripts
30:57 - there just get rid of all warnings we
30:59 - can ignore them we will fix them in a a
31:01 - future video probably and I think all
31:07 - else should be working out so let's try
31:09 - to play wait to someone something
31:12 - damages us perfect and then in a moment
31:22 - we will die and hopefully here's
31:25 - something else that is perfect you good
31:28 - one and you will notice that also if I
31:30 - jump down we hear the same damn siren
31:34 - that's perfect the next thing that I
31:37 - want to add is a sound point where ever
31:40 - we spawn again because we have the
31:41 - respawn countdown but we don't really
31:43 - have any sound to kind of follow it up
31:49 - so that's the next thing that I want to
31:51 - add also we should have something from
31:54 - for the pause menu or the game over menu
31:57 - and we should probably have some kind of
32:01 - game over sound but I'm pretty sure that
32:03 - I've actually already have something in
32:05 - here that the noise game over game over
32:11 - that's perfect so we'll add that to the
32:14 - game over screen we have a bunch of
32:16 - different things still to add so first
32:21 - up let's add the spawn sound so if we
32:25 - find our TM object go ahead and open up
32:30 - the game master script you can see that
32:32 - we have this respawn player we play the
32:34 - sound respawn countdown then wait for
32:37 - the spawn delay and then we instantiate
32:39 - the player well I want to change this
32:41 - just a bit so instead of having just a
32:44 - spawn sound name here I want to kind of
32:48 - change the terminology here this
32:50 - going to be the respawn countdown sound
32:56 - name yeah that way we don't get confused
33:01 - and then down here we're going to have
33:05 - the spawn sound name and that's going to
33:12 - be a separate variable up here spawn
33:22 - sound name and this is going to default
33:26 - to spawn and this is going to default to
33:30 - respawn countdown alright so now that we
33:36 - have set that up we can just go ahead
33:39 - and add that to the actual audio
33:42 - managers just make sure that everything
33:44 - looks correct here respawn countdown and
33:48 - the spawn sound name should just be
33:50 - spawn so let's apply land find our audio
33:53 - manager and in a new sound here and also
33:58 - under respawn we not want this now to
34:00 - just be our this to be respawn countdown
34:06 - yep and this just to be spawn and again
34:10 - we want to take our audio folder import
34:14 - a new asset the asset that we want to
34:16 - import is spawn cool and let's just drag
34:23 - that into the correct slot the volume is
34:28 - going to be something like point six the
34:32 - pitch is fine no random volume and no
34:35 - random pitch so let's apply that hit
34:38 - play and see if it works
34:41 - honey 3 2 1
34:45 - that's perfect okay just so we get some
34:48 - kind of feedback that our player has
34:51 - actually spawned so that sounds super
34:54 - awesome the next thing that I want to
34:56 - create is some awesome sounds 4d came
34:59 - over menu so let's find our UI overlay
35:02 - let's find our game over here and let's
35:06 - see where we actually spawn the same so
35:09 - we have the game over UI this simply has
35:11 - again two methods what one for each
35:15 - button we're going to make a new one
35:17 - here this is going to be a public void
35:19 - and it's going to be called on on hover
35:24 - on mouse over there we go and in here
35:32 - we're simply going to play a sound so
35:35 - again we want to create a reference to
35:37 - an audio manager and I'm just going to
35:39 - steal that from up here so that here
35:43 - cool so we have an audio manager called
35:50 - audio manager and we have a void start
35:54 - method where we do that
35:58 - good then down under the on mouse over
36:02 - and again we want to probably create
36:05 - some kind of field for this so
36:07 - serialised field this is going to be a
36:10 - string mouse hover sound name if you
36:18 - want to and that's just going to be
36:20 - equal to button hover and down here we
36:26 - call audio manager top play sound Mouse
36:32 - hover sound then undo quit and retry we
36:37 - want to play another sound that's going
36:39 - to be another serialize field and this
36:41 - is going to be the string button press
36:47 - sound that's going to be equal to button
36:50 - press there we go
36:54 - we add that here button press sound and
37:01 - we add that here perfect and now we go
37:08 - under our game over find our retry
37:12 - button or or our quit button add a new
37:15 - component which is going to be the event
37:17 - trigger add a new event type of type
37:20 - pointer enter hit the plus sign drag in
37:26 - the game of your objects go under game /
37:31 - UI and hit the on mouse over there we go
37:35 - and let's just copy this component and
37:39 - paste it over here good and we can just
37:44 - go out and hit and this is not a prefab
37:47 - so that must basically all we needed to
37:49 - do for that let's just hit play here
37:53 - actually let's test this out when we
37:56 - have also got the game over sound
37:59 - working so under our TM object here we
38:03 - need to add another sound and if we go
38:07 - into the kill player here we can see
38:09 - that destroy remaining lives if
38:12 - remainings lives remaining lives are
38:15 - below or equal to zero then we want to
38:18 - end the game so we should have a method
38:20 - here called end game indeed we have
38:22 - where it simply says came over and we
38:25 - get the game over UI well I want to add
38:27 - the game over sound here so again up
38:31 - here let's make a short variable here
38:36 - this is going to be the game over sound
38:39 - name and that's going to be game over
38:42 - and we simply want to say Audio Manager
38:48 - top play sound game over sound name
38:55 - there we go then we go into our Audio
38:58 - Manager we have the spawn sound there
39:01 - but now we want to add the game over
39:04 - sound so let's hit 10 going to audio
39:08 - imput new asset game over
39:11 - Audio Manager drag it in you get the
39:15 - idea by now hopefully game over
39:19 - a volume of I don't know point seven and
39:25 - everything else is good so let's try
39:27 - that play just gonna jump down a few
39:33 - times here to 193 to you and it should
39:40 - happen now over there we go and we get
39:46 - the correct sounds here and if we do
39:48 - quit we can hear that and also if we hit
39:50 - retry perfect and we're back in the game
39:53 - so that was exactly how I wanted it to
39:57 - work and I think that and the game feels
39:59 - a lot more interactive now the very last
40:01 - sound that I want to add is a sample
40:04 - whenever we land after having jumped
40:06 - because currently there are no sounds
40:08 - attached to the player other than the
40:11 - fact that we sometimes shoot and
40:13 - sometimes it can feel nice if you have
40:15 - sounds when you collide with different
40:16 - things
40:17 - just a few sounds around the environment
40:20 - so I'm going to add some kind of landing
40:22 - sound just some footsteps whenever we
40:24 - hit the ground so let's go ahead and
40:27 - import that sound import new asset let's
40:30 - find the landing footsteps and you can
40:33 - listen here I really like the sound then
40:38 - we go into the audio manager and that
40:40 - one too this is going to be the landing
40:45 - foot steps drag the sound in and I think
40:51 - point six is probably correct maybe a
40:55 - bit less you should really be more
40:57 - careful with the mixing than I am here
40:59 - I'm just trying to get all the sounds in
41:01 - here this video is all really ridiculous
41:03 - and probably split into two parts
41:05 - anyways so we're going to have a random
41:07 - volume of like point one or two maybe
41:12 - even and a random pitch of 0.1 and we
41:17 - can just apply that and that's basically
41:19 - all we need to do with the audio manager
41:22 - then on to our player we should have our
41:23 - platformer character to the script this
41:26 - is what controls our movement and this
41:29 - is a very long and confusing script but
41:32 - I'm going to show you exactly where we
41:34 - need to go in and change things first
41:35 - off we need to add a serialized field up
41:39 - here and this is simply going to be a
41:42 - string against knowing the name of our
41:44 - lining footsteps you could just hard
41:46 - code this in if you wanted to so landing
41:49 - or yeah landing sound name it's going to
41:54 - be equal to landing today Kevin lies
41:59 - that landing foot steps I've been
42:05 - programming for too long yeah so that
42:07 - was capitalized let's just do that close
42:11 - it off and then in our fixed update will
42:16 - click the store a boolean called
42:19 - was grounded and set that equal to
42:23 - grounded and then down here we're going
42:28 - to say if once grounded it's not equal
42:33 - to grounded meaning that our state has
42:38 - changed and grounded it's equal to true
42:44 - meaning that our state changed from not
42:49 - on the ground to being on the ground
42:51 - well then we want to play a sound and
42:53 - again we want a reference to Audio
42:55 - Manager for that I don't know if I want
42:59 - to go in and actually catch this just
43:02 - for good orders sake we'll do it so
43:05 - let's have an on your manager god I've
43:09 - done this many times today on you
43:11 - manager and then in the void start
43:14 - method see if our Audio Manager equals
43:22 - audio manager turned instance if on your
43:25 - manager is equal to null debug
43:33 - era this is why we write error messages
43:41 - go no audio audio manager found this way
43:50 - I will be so thankful if this actually
43:53 - throws an error good and why is with a
43:59 - an H there we go and then we down here
44:03 - say audio manager got play sound and the
44:10 - sound we want to play is the landing
44:12 - sound name good save save save save jump
44:17 - into unity close that close that clear
44:20 - that and now ladies and gentlemen
44:23 - hopefully yes we hear some landing
44:30 - footsteps whenever we hit the ground
44:34 - nothing loud fairly subtle they might
44:39 - actually be too loud already so change
44:43 - them down to 0.5 and then we'll call
44:46 - this a day that is it we've successfully
44:48 - added sound to our game made it sync
44:52 - between scenes transition beautifully
44:54 - all of that it's a very easy workflow
44:58 - for adding sounds to your game I mean
45:01 - just look at how much we were able to
45:02 - accomplish at this fairly low of amount
45:06 - of time so thanks a lot for watching I
45:09 - will just mess around with this for a
45:11 - second and then I'll see you in the next
45:14 - video
45:25 - funny
45:26 - three two one