00:00 - in this video we'll be making our
00:01 - inventory system and we'll combine it
00:03 - along the way with the UI from the last
00:04 - video so at the end you should hopefully
00:06 - have a fully working item and inventory
00:08 - system that looks something like this
00:10 - let's get started so the next step is
00:12 - updating our inventory as we go to do
00:14 - that lets go to our canvas let's create
00:16 - a new component called the inventory UI
00:19 - for this component we won't be using
00:21 - anything under your collections but
00:22 - we'll keep the sudden update and the
00:24 - first thing that we want here is a
00:25 - reference to our inventory because we
00:27 - set up a singleton in the last video we
00:29 - can get that by simply going inventory
00:31 - dot instance but to make sure our code
00:33 - runs at optimal speed let's go ahead and
00:35 - cache this let's create an inventory
00:37 - component called inventory and then in
00:40 - the start method that said inventory
00:41 - equal to inventory instance then what we
00:44 - can do is create a method we call this
00:47 - update UI India will have all the code
00:51 - for updating the items in our inventory
00:53 - but now let's just throw a debug
00:54 - deadlock statement saying updating UI
00:57 - but of course we want to call this
00:59 - method somewhere luckily in the last
01:00 - video we set up a nice way to do this as
01:02 - well we set up a callback method so if
01:04 - we go
01:05 - inventory dot on item changed callback
01:08 - we can then subscribe to this event to
01:11 - do that we use plus equals and we write
01:13 - the name of the function which is update
01:15 - UI remember inside of our inventory
01:17 - script
01:17 - we're triggering this event whenever a
01:19 - new item has been added or removed and
01:22 - we've now said that we want the update
01:23 - UI method to be called whenever that
01:25 - happens so just by saving this code
01:27 - going into unity and hitting play we
01:29 - should be able to right-click an item it
01:31 - then says picking up helmet of
01:33 - protection and then updating UI so a
01:36 - function is correctly being called what
01:37 - we then need to do is look through all
01:39 - of our inventory slots until each one
01:41 - what items are stored if any to make
01:43 - this easier let's go ahead and create a
01:45 - script on our inventory slot which we'll
01:47 - just call inventory slot and this will
01:49 - keep track of everything happening on a
01:51 - particular slot this will update the UI
01:53 - on the slot and the functions that
01:55 - define what happens when we press it or
01:56 - press remove so let's open this up again
01:59 - we can delete everything under
02:00 - collections and both the methods instead
02:02 - we want to create a variable of type
02:04 - item this variable is going to keep
02:06 - track of the current item in this slot
02:08 - we then create a method for adding an
02:09 - item to the slot we go public void add
02:12 - ID
02:13 - this is going to take in an item which
02:15 - we'll call the new item and we'll simply
02:17 - set item equal to the new item but we
02:20 - also want to update our icon to do that
02:22 - we need a reference to the image
02:24 - component on our icon object and
02:26 - whenever we deal with UI in scripting we
02:28 - want to be using unity engine dot UI now
02:32 - we can create a public image which is
02:35 - going to be a reference to the icon then
02:37 - you know add item method we go icon
02:40 - sprite equals the item icon and icon dot
02:45 - enabled it's going to be true we also
02:47 - have a method for claiming out a slot so
02:50 - public void clear slot and here we'll
02:55 - simply set item equal to null I can dot
02:58 - sprite equal to null and icon dot
03:00 - enabled equal to false let's then save
03:03 - that go into unity now we have an icon
03:06 - flood that's dragging the icon for this
03:08 - slot that's it apply to apply this to
03:10 - all the other inventory slots and now we
03:12 - simply need to loop through all of the
03:14 - inventory slot components and for each
03:16 - one called
03:17 - add item if there's an item to add if
03:19 - not we want to call clear slot let's
03:22 - jump into our inventory UI script and
03:24 - you when updating the UI we want to find
03:26 - all of the inventory slots and as we can
03:28 - see in our hierarchy all of our
03:30 - inventory slots are children of the
03:32 - items parent object so if we get a
03:34 - reference to this we can simply find all
03:36 - the components in the children so let's
03:38 - reference this in the script let's
03:39 - create a public transform called items
03:43 - parent let's then also create an array
03:46 - of inventory slots so let's create
03:48 - inventory slot array which we're going
03:51 - to call slots and inside of our start
03:53 - method we can set slots equal to Adams
03:56 - parent get components in children and
03:59 - you want to make sure you find the
04:00 - plural version so there's an S here so
04:04 - we want to find all the components and
04:05 - the components we're looking for are the
04:07 - inventory slot components now you could
04:10 - do this every time inside of the update
04:12 - UI method that's of course less
04:13 - performant but if your slots are
04:15 - changing you might be forced to do that
04:17 - but since our image our slots are
04:18 - completely static we'll simply do this
04:20 - once then in the update UI method we'll
04:22 - loop through all the slots that will
04:24 - create a for loop which will want to
04:25 - continue as long as
04:26 - sighs let's then slot that link and so
04:29 - we're looping through all of our slots
04:30 - and for each iteration we want to check
04:32 - if there are more items to add so if I
04:35 - is less than inventory items count
04:38 - within there are more items to add so
04:40 - we'll take our eyes slot called add item
04:44 - on that slide and pass in the
04:46 - corresponding item in our inventory
04:48 - items array then if we don't have any
04:51 - more items so we are the violence to add
04:53 - well then we simply want to call clear
04:55 - slot on that slot now if we save this go
04:59 - into unity and find our canvas we'll
05:01 - need to drag in our items parent let's
05:04 - drag that in and if we now hit play our
05:06 - script should be working so if we right
05:08 - click on one of these objects you can
05:10 - see it says interacting with test item
05:11 - we're picking it up and it's showing in
05:13 - our inventory but we haven't given it an
05:15 - icon yet so it's not looking very good
05:18 - also on our third item it says not
05:20 - enough room it's because we need to go
05:21 - into a game manager and set the amount
05:23 - of spaces to 20 if you haven't done that
05:25 - already then we can find our items here
05:28 - and the three items in the scenes here
05:29 - are all the same item which is the
05:31 - helmet of protection and for this we'll
05:33 - just drag in placeholder one let's
05:35 - actually rename this to helmet let's
05:37 - duplicate it let's rename this one to
05:39 - shield and we'll just set the name here
05:41 - to placeholder shield and here we'll
05:44 - drag in the second place holder and then
05:47 - we can take say the third item here and
05:49 - drag in our shield to use that instead
05:51 - so now when we hit play we should be
05:53 - able to pick up first helmet of
05:55 - protection then another helmet of
05:57 - protection and then third our shield now
06:00 - we can click on these but not much will
06:02 - happen and the remove buttons aren't
06:04 - showing either to get our remove buttons
06:06 - to show inside of our inventory slot
06:08 - will add another reference this one is
06:10 - going to be to the button we'll call it
06:12 - remove button and when we add an item we
06:15 - want to set remove button dot
06:17 - interactable to true and when we then
06:20 - clear it we want to set remove button
06:22 - dot interactable back to false but of
06:25 - course we also want something to happen
06:26 - when we press the remove button to do
06:29 - that let's create a public method that
06:30 - we will call whenever the button is
06:32 - pressed let's create a public void and
06:35 - we'll call this on remove button
06:38 - and here we simply want to go ahead and
06:40 - call inventory dot instance dot remove
06:44 - then we want to pass in our item if we
06:47 - say that go into unity find an inventory
06:49 - slot here we now need to drag in our
06:51 - remove button so let's drag that in
06:53 - we'll also need to select our remove
06:55 - button down here we'll add an on click
06:58 - event and we'll point this to our
06:59 - inventory slot go under the inventory
07:02 - spot script and make sure to call on
07:04 - remove button whenever it's pressed we
07:06 - can then apply this prefab hit play and
07:09 - now when we pick up an object we can see
07:11 - the remove button appearing when we
07:13 - press it we remove it from our inventory
07:15 - now currently the object just disappears
07:18 - into nothing this is actually something
07:20 - a lot of RPGs do including games such as
07:22 - World of Warcraft you might want to put
07:24 - some kind of prompt on the screen or you
07:26 - can have the character actually drop it
07:27 - on the ground that's all up to you
07:29 - what we want to add it's a way to use
07:30 - the item so inside of our inventory slot
07:32 - let's create another public void let's
07:35 - call it use item here we want to check
07:37 - if we actually have an item so if item
07:40 - is not equal to null and if we do we
07:42 - want to go item dot and then we want to
07:45 - have some kind of use function on that
07:47 - item to create this let's go inside of
07:49 - our item script remember we created this
07:51 - in the last video here we want to create
07:53 - a public and we'll actually make this a
07:56 - virtual void called use here we'll use
07:59 - the item and something might happen but
08:03 - no matter what we're going to throw out
08:04 - a tea bar deadlock statement saying
08:06 - something like using and then the name
08:08 - of the item now the reason why we aren't
08:10 - just implementing some functionality
08:12 - here is that for different items we want
08:14 - different things to happen when we try
08:16 - and use them some items might sit in
08:18 - your inventory only to be used as
08:19 - currency or for drafting others might
08:22 - have a direct effect like a potion and
08:24 - some might be equipped onto the
08:26 - character so by marking this as virtual
08:28 - we can certainly derive different
08:29 - objects from the item and then define
08:32 - for each one what we want to happen when
08:33 - it's used but we'll make sure to call
08:35 - this method for all of them inside of
08:37 - our inventory slot so now we'll select
08:39 - our item button and add an on-click
08:42 - event here as well which is going to
08:44 - link to our inventory slot we'll go to
08:46 - the inventory side script and here
08:48 - called use item again let's make sure to
08:50 - reapply and when we now
08:52 - click on an item in the game it's going
08:54 - to say using and then the name of the
08:56 - item we also want to be able to bring up
08:57 - and hide our inventory when needed we're
09:00 - going to our inventory UI script he will
09:02 - create a reference to our entire UI will
09:04 - right public game object inventory UI
09:07 - then in our update method we want to
09:09 - check if input does get button-down and
09:12 - here we want to define some kind of
09:14 - button for the inventory and if you
09:17 - press this button we want to toggle our
09:19 - UI so we'll go inventory UI dot said
09:22 - active and we want to set it to its
09:24 - reverse state so we'll check whether or
09:26 - not it's currently active by going
09:27 - inventory UI dot active cells and we'll
09:31 - then take the inverse of that let's
09:33 - close that off let's save it and now in
09:35 - unity we want to go edit project
09:37 - settings input and if we want to add
09:39 - another element to our list of inputs
09:41 - let's expand this to 19 and this is not
09:44 - going to be canceled instead we want
09:45 - this to be inventory as a positive
09:48 - button will do I
09:49 - and as our alternative button will do B
09:52 - so I for inventory and B for back win
09:55 - then select our canvas and drag our
09:57 - entire inventory object into the
09:59 - inventory UI shot
10:00 - now when playing we can use PI and B to
10:04 - bring up our inventory but we can still
10:06 - move when clicking on our inventory to
10:08 - fix this we'll go under scripts open up
10:10 - the player controller at the top here we
10:12 - want to be using unity engine dot events
10:15 - systems then inside of our update we
10:17 - want to check if event system dot
10:20 - current dot is pointer over game object
10:24 - and this is a function so make sure to
10:26 - put in the parentheses and if it is we
10:28 - want to return so here recently
10:30 - accessing our current event system to
10:31 - check whether or not we're currently
10:33 - hovering over UI if we are well then we
10:35 - want to exit out before we control our
10:37 - player let's save that going to unity
10:39 - let's disable our inventory by default
10:41 - here and hit play now we should be able
10:43 - to pick up some items bring up our
10:44 - inventory pick up some more click around
10:46 - on these to use them and delete them and
10:49 - our character will remain stationary
10:51 - finally let's just organize this by
10:52 - creating a folder under our scripts we
10:55 - call this items here we'll place our
10:57 - item and item pickup we'll also create
10:59 - another one this one we'll call
11:00 - inventory here we'll place all of our
11:03 - taury script finally let's create a
11:05 - folder called prefabs let's just drag
11:07 - our inventory slot into their period
11:10 - that's probably the most complex system
11:11 - we've ever covered in these tutorials
11:13 - great job for hacking your way through
11:14 - that lets really much it for this video
11:16 - and the next one we'll have a look at
11:17 - equipment that's something I'm really
11:19 - looking forward to until then thanks for
11:20 - watching and I will see you in the next
11:22 - video thanks of the awesome patreon
11:24 - supporters who donated in July and a
11:26 - special thanks to hands of stone Derek
11:28 - James Kirk faithful verify yes for
11:29 - Mickelson Stone gamer Thomas volley
11:31 - Sybok Mamiko Cabral Jason Lotito Aaron
11:34 - Robert bond and Judah man if you want to
11:36 - become a picture in yourself you can do
11:37 - so a pigeon come / brekkie you guys Rock