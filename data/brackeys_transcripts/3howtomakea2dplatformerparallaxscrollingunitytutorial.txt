00:00 - thanks for tuning in at
00:02 - braies hello everyone and welcome to the
00:05 - third video in the how to make a 2d
00:08 - platformer course today we're going to
00:10 - be taking a look at how to uh achieve
00:13 - the parallaxing effect that you see in
00:16 - most modern 2D games so parallaxing
00:20 - basically means that the foreground and
00:22 - the background will scroll at different
00:25 - speeds which will uh allow us to create
00:28 - depth in our game and when when I say
00:31 - depth uh many people get confused
00:33 - because they say well it's a 2d game how
00:36 - can you have depth and it's true that we
00:39 - aren't actually creating depth because
00:41 - we using an autographic camera which
00:44 - before it renders stuff will align
00:47 - everything on the uh on the same point
00:50 - on an axis um but it will allow us to
00:54 - cheat a bit when we see them scroll at
00:57 - different speeds in relation to the
00:59 - cameras so please bear with me uh once
01:03 - you see it working it shouldn't be that
01:05 - uh difficult to
01:06 - comprehend awesome before I get started
01:09 - I just want to quickly say that I'm
01:10 - looking for someone to do the character
01:13 - design because I'm not that great with
01:16 - drawing uh I mean the environment in
01:18 - itself was was challenging enough so if
01:21 - you are good with a pen in any way or
01:23 - just up for a challenge please write to
01:25 - me uh the email and subject line is on
01:29 - the screen or reach out to me at Twitter
01:32 - at brai twet or on my personal Facebook
01:35 - which is in the description cool so that
01:38 - was the longest intro yet I think let's
01:41 - now get started so as always I've opened
01:43 - up
01:44 - unity and right now when we hit play you
01:48 - will notice that everything moves in the
01:51 - same speed and this is not really
01:53 - something that we would like so let's go
01:56 - ahead and change this with a script so
01:59 - this is going to be our first script in
02:00 - this series and please note that this is
02:03 - not the easiest script if you have never
02:05 - coded before maybe check out the mega
02:08 - game course or the going 2D one so we're
02:11 - going to go ahead and create a new game
02:13 - object it's going to be an empty game
02:15 - object so let's press contrl shift n and
02:19 - let's rename this to
02:22 - underscore GM the underscore will make
02:25 - sure that it's always at the top of the
02:27 - hierarchy and then GM for a game master
02:30 - I like to censor this just so we know
02:34 - where it is and uh now let's hit add
02:37 - component new script and then change the
02:41 - type to
02:42 - C and let's rename this to um
02:49 - parallaxing yeah so now hit create an ad
02:53 - and now we can double click it to open
02:55 - it up in mono develop so mono develop is
02:58 - unit's builtin um script editor but I
03:04 - feel free to use anything you want
03:06 - whoops let's try and open this up
03:09 - again there we go it's unity spild in
03:12 - script editor uh man develop does a lot
03:15 - of all the stuff uh it's great for c i
03:18 - find uh especially with the new version
03:20 - it's also gotten a lot prettier with
03:22 - unity 4 um but you can also use stuff
03:26 - like notepad++ uh or Visual Studio
03:30 - um yeah so feel free to choose whatever
03:33 - you need cool so now let's go ahead and
03:37 - first off uh declare some variables so
03:41 - and uh we're going to keep the start and
03:43 - the update functions because we're going
03:44 - to need them in just a sec so first
03:48 - let's create a an array that will store
03:51 - all of the elements that we need to
03:53 - apply parallaxing to so we're not going
03:56 - to apply parallaxing to the uh middle
04:00 - where our platforms are going to be and
04:02 - where we're going to have all the
04:03 - gameplay stuff that would be way too
04:05 - complicated we're only going to apply um
04:08 - parallaxing to um the background and the
04:11 - foreground so now let's create a
04:15 - public
04:17 - transform and to make an array meaning a
04:20 - list of objects instead of just one
04:23 - single object we're going to do uh an uh
04:27 - open and close um square brackets and
04:31 - now we can name it so now we can just do
04:34 - let's just do backgrounds for short and
04:38 - close it with a semicolon this is also
04:40 - going to store foregrounds but else we
04:43 - we would have to do elements and yeah
04:45 - backgrounds is just simpler so this is
04:48 - our array meaning a
04:50 - list of all the back and
04:57 - foregrounds to be parallel
05:01 - next awesome now let's create a private
05:05 - float and this is also going to be an
05:07 - array that are going to store all of the
05:10 - parallx scales meaning the value the
05:14 - proportion of the camera's movement to
05:16 - move the background spy and we're going
05:18 - to automate this so that we don't have
05:21 - to apply a a uh value for each one of
05:26 - these elements but we can simply just
05:28 - move them back and fourth and uh on the
05:31 - z-axis and then the script will take
05:34 - care of everything for us so we don't
05:35 - have to like guess how far it's going to
05:39 - back it's going to be we can simply move
05:41 - it on the Z
05:42 - axis so to do this we are going to have
05:45 - a an a list of the object uh object
05:49 - scales so let's call this
05:53 - Parallax scales you could also call it
05:57 - um amount of parallaxing or whatever you
06:00 - want I'm going to call it scales and
06:02 - this is again the
06:04 - proportion of the
06:08 - cameras movement to move the
06:15 - backgrounds
06:17 - by awesome just under this we're going
06:21 - to do public float and this is just a
06:23 - symbol float value not an array uh and
06:27 - we're going to call this smoothing you
06:28 - could also call call it parallaxing
06:30 - amount because it's pretty much what is
06:33 - it does in reality um but in theory what
06:37 - it does is is smooth it so this is how
06:41 - smooth The
06:45 - Parallax is going to
06:48 - be uh make
06:51 - sure to to set
06:54 - this above zero or The Parallax in
06:58 - effect will not work so by default uh
07:02 - let's set this to maybe uh one just to
07:06 - make the effect really apparent cool
07:10 - so uh that was it for our top variable
07:14 - uh declaration now let's do a
07:18 - private
07:20 - transform and we're going to call this
07:22 - Cam and this is simply just a
07:26 - reference to the main cameras
07:30 - transform uh this uh it's it's General
07:34 - good practice to store this in an a
07:37 - variable because it will um it will
07:40 - first of all be faster and also it's
07:43 - just easier uh in writing to just read
07:46 - through it when you when you have a
07:48 - short name for it cool and then we're
07:51 - going to do a private Vector 3 meaning a
07:55 - uh tuplet meaning uh you know a x y and
07:59 - a Z value and we call going to call this
08:04 - previous cam position and uh this is
08:09 - going to store the
08:12 - position of the camera in the
08:16 - previous frame and this is what we're
08:19 - going to use to do uh the calculation of
08:22 - parallaxing and the calculation itself
08:26 - is not need something you need to
08:28 - understand uh it can be hard to wrap
08:29 - your head around uh but please just
08:32 - write this uh after me and and we'll
08:34 - look into understanding it further later
08:37 - um or you can always look up the effect
08:40 - um cool so now let's create a void a
08:45 - wake function whoops
08:49 - awake and let's open up some square
08:51 - brackets here oh not some square
08:54 - brackets curly brackets I
08:55 - mean there cool and uh the reason why we
09:00 - have both an a wake and a start function
09:03 - is because I wanted to explain to you
09:05 - the difference of the two so the awake
09:08 - is called before
09:13 - start and uh what it does is um is it
09:17 - will uh call all the logic before the
09:20 - start function but after all the game
09:22 - objects are set up this means that it's
09:24 - great for assigning uh variables like
09:27 - the camera here so just assigning
09:30 - references between scripts and between
09:32 - objects so uh grade for
09:37 - references awesome uh I try to comment
09:40 - out a lot of the code I write both so
09:42 - you can read it afterwards and also just
09:45 - so you can quickly look back if if you
09:47 - don't get my my uh verbal explanation um
09:50 - so I hope that's
09:52 - okay now we're going to set up the
09:58 - reference
09:59 - uh the camera reference
10:01 - [Music]
10:03 - reference set up camera
10:07 - reference and uh we do this by writing
10:09 - cam equals camera.
10:13 - main.
10:15 - transform we could of course just uh
10:17 - make this a public transform and then
10:19 - drag in the camera inside of unity but
10:22 - this way we just select the main camera
10:24 - uh much more easily and we make sure
10:26 - that we always remember to do this
10:30 - because we don't have
10:31 - Z awesome so the start is used for
10:34 - initialization and that's what we're
10:36 - going to do we're going to initialize
10:38 - our different variables so first off
10:40 - we're going to say um we're going to
10:43 - store the previous frame so the
10:48 - previous oops
10:50 - previous frame had the current
10:55 - [Music]
10:57 - frames C camera
11:00 - position so we're going to do
11:03 - previous campus equals cam. position so
11:08 - this way we assign the cam uh previous
11:11 - cam position to the position of the
11:13 - camera uh just uh when starting out and
11:18 - uh again please just ignore this that's
11:20 - just something we have to
11:22 - do and then what we're going to do now
11:24 - is we're going to Loop through meaning
11:27 - that we're going to uh take the uh
11:30 - backgrounds list here it's technically
11:33 - an array but I will call it list um and
11:36 - we will take every element in it we'll
11:39 - say hey you're an element and then we
11:41 - will uh assign that element a parallx
11:44 - scale so um basically what we'll do is
11:47 - we'll say um that the parallx scales
11:51 - list is going to be just as long as the
11:53 - backgrounds and then we're going to Loop
11:55 - through all of the backgrounds and
11:56 - assign their Z value to the The Parallax
12:00 - scales so uh we're going to do this in
12:02 - the start function um and what we're
12:04 - going to do is we're going to type
12:07 - Parallax uh
12:10 - Parx scales why is this not working
12:14 - let's try this again
12:17 - parallx uh
12:21 - scales
12:22 - equals H have I written yeah I forgot to
12:26 - write this with two L's so let's try try
12:29 - this
12:30 - again you were probably thinking this
12:32 - all along parallx scales
12:35 - equals new float and remember the two
12:39 - square
12:41 - brackets uh and then assume my colon and
12:43 - inside these square brackets we can
12:45 - declare a length so what we're doing
12:47 - here is we're simply saying that the
12:49 - parallx scales uh should be an array of
12:52 - this length and the length is just going
12:54 - to be
12:55 - backgrounds.
12:57 - length awesome so whatever we we set the
13:00 - backgrounds uh to be we are going to uh
13:03 - get the length here and then we're going
13:05 - to Loop through them so
13:08 - four in I equals
13:12 - z i is less than
13:15 - backgrounds.
13:18 - length
13:20 - i++ and then open up the square brackets
13:24 - or I keep on saying square brackets I of
13:27 - course mean the curly brackets
13:29 - cool so what we're doing here is we are
13:32 - using a for statement to iterate through
13:35 - and what we do is we make a variable
13:38 - called I and we set this equal to zero
13:41 - and we say that as long as I is less
13:43 - than the length of the backgrounds we're
13:46 - going to keep on
13:47 - going and every time we have looped
13:50 - through this we are going to set uh I um
13:54 - we're going to increment I by One so
13:59 - this will allow so this will be called
14:01 - as many times as the background. length
14:04 - is long and what we can do in here is we
14:07 - can set the
14:10 - Parallax Parallax
14:15 - scales and then inside the curly
14:17 - brackets we're going to do I equals
14:21 - backgrounds and then inside the colur
14:23 - brackets we're going to do I again
14:26 - position do Z and then we're going to do
14:29 - time minus one just because that's
14:32 - something we need to do don't you don't
14:34 - need to worry about that just make sure
14:36 - that the times minus one is in here or
14:39 - we're going to get the opposite effect
14:40 - of what we want so what we're doing here
14:43 - again in summarize to summarize it is we
14:45 - are um making sure that our parala
14:49 - scales list is just as long as the
14:52 - backgrounds then we are going through
14:54 - each background and we are assigning uh
14:58 - that um background set position to the
15:02 - corresponding parallx scale awesome so
15:06 - that was basically it and again um you
15:08 - don't need to get all of it right away
15:11 - uh but I'll just say here that what
15:13 - we're doing is we
15:16 - are
15:18 - assigning
15:22 - corresponding uh
15:26 - parallx scales
15:29 - cool then in the update function we're
15:32 - going to get to write the actual logic
15:34 - here so what we're going to do is we're
15:36 - going to write uh another four statement
15:40 - so for each
15:43 - background we're going to do this so for
15:47 - I I'm sorry in I equals zero I is less
15:52 - than
15:54 - backgrounds.
15:56 - length I Plus plus so that's the exact
16:00 - same statement as up here we're simply
16:03 - loing through the
16:06 - backgrounds and then the curly
16:08 - brackets and in here we're going to
16:10 - first offset uh say that the
16:15 - Parallax is the
16:19 - opposite of the camera
16:23 - movement because the
16:27 - previous um
16:29 - the
16:30 - previous frame
16:34 - multiplied by the
16:37 - scale so we saying float
16:41 - Parallax equals previous cam position.
16:47 - x minus cam.
16:51 - position do
16:53 - x times The Parallax
16:57 - scales
17:00 - I and close it
17:02 - off so what we're doing here is we are
17:04 - saying that the Parallax in effect
17:06 - should be the difference between what
17:09 - our camera's position is now and what it
17:11 - was before meaning how much is moved and
17:15 - then we are going to uh time this by the
17:18 - uh amount we want the parallaxing to be
17:20 - so the Z value of the
17:23 - background that's basically all we're
17:25 - doing we're taking the movement and we
17:27 - are applying it uh to a v value um and
17:31 - multiplying it by the
17:33 - scale awesome so what we can do now is
17:36 - we can uh
17:38 - here we
17:40 - can
17:42 - set a
17:44 - Target X
17:46 - position which
17:49 - is uh the current
17:52 - position plus The
17:56 - Parallax multiplied
18:00 - uh let's just forget that plus The
18:01 - Parallax awesome so we're going to do
18:05 - float
18:07 - background
18:08 - Target position X so we're making a new
18:12 - variable here equals backgrounds of Y of
18:17 - I do
18:20 - [Music]
18:21 - position X Plus parall
18:26 - X so we are just saying that the new uh
18:29 - we are taking the parallaxing and we're
18:31 - applying it to a actual position so we
18:34 - are storing uh the background Target
18:37 - position um X um in this uh variable we
18:41 - are storing the position of the
18:43 - background plus the
18:45 - parallaxing that's all we are
18:48 - doing and then uh next up we can create
18:52 - a a Target position um with uh the
18:55 - actual X position and the actual y
18:58 - position so we can create uh a vector 3
19:01 - here so let's do create a Target
19:08 - position um which is the
19:14 - backgrounds current
19:19 - position with its Target X
19:24 - position so we're doing Vector 3
19:30 - background uh
19:33 - Target
19:34 - position
19:36 - equals new Vector
19:40 - 3 background Target position X for the x
19:45 - value and then we're just setting it to
19:48 - the Y and Z of the backgrounds So
19:52 - backgrounds
19:54 - I
19:56 - Doos doy
19:59 - and
20:02 - backgrounds
20:04 - i.
20:06 - position do
20:09 - Z so basically all we're doing here is
20:13 - first off we are making a variable for
20:14 - the x value and then we are adding this
20:18 - to the uh Target position uh which is
20:22 - just a vector three um so it's just
20:24 - going to assign the background Target
20:26 - position on the X and then take the same
20:28 - Y and the same Z as it had before we
20:32 - could also do this on the Y but since we
20:35 - are not going to be moving too much up
20:37 - and down I think that we will leave this
20:40 - out uh so far and then maybe add it in
20:43 - later that's a challenge for you if you
20:46 - can figure this out on yourself um
20:48 - please go ahead and and try it out um
20:51 - but it's not something that we're going
20:53 - to add right now I think this is more
20:56 - than plenty and uh I know know that this
20:58 - is maybe too difficult for some of you
21:01 - but please not that that you can of
21:03 - course get this uh script from bra.com
21:06 - um should you be lost and definitely not
21:11 - all of the coding that we're doing is
21:13 - going to be this hard this is pretty
21:15 - much uh the
21:17 - peak I hope cool so then we are simply
21:20 - going to lurp meaning fate between the
21:23 - backgrounds position uh and the new
21:26 - Target position so fate
21:29 - between current
21:32 - position and the target
21:36 - position using what is called lurp and
21:40 - we do this by saying
21:43 - backgrounds of
21:46 - I do position equals Vector
21:52 - 3 do lope so Vector 3 has an automat has
21:57 - a l function build in allowing us to
21:59 - fade between positions and that's really
22:01 - awesome so inside of this we're going to
22:04 - fade between the
22:07 - backgrounds uh
22:09 - I do position so our current position
22:13 - and the background Target
22:16 - position and we're going to do this
22:18 - using the uh smoothing effect times
22:22 - time. Delta time and time. Delta time is
22:25 - hard for some to understand but
22:27 - basically all you need to know is it Con
22:30 - converts uh frames to seconds so instead
22:33 - of doing this uh by frames meaning that
22:36 - if your comp computer was running this
22:39 - uh really well the background effect
22:41 - would be all kinds of crazy uh that
22:43 - we're doing this in seconds instead so
22:46 - we're going to round this off and uh
22:49 - yeah cool then at last when we get out
22:53 - of this for statement we're going to set
22:56 - the previous cam position to the C uh
22:59 - camera position at the end of the frame
23:01 - so we're going to set the
23:04 - previous uh
23:06 - campus to the
23:12 - cameras
23:13 - position at the end of the
23:18 - frame and we can do this by previous cam
23:22 - position equals cam.
23:25 - position just as we did
23:29 - in the start
23:32 - function that was all okay so if anyone
23:36 - still watching that was basically it so
23:38 - now we're going to hit save and we're
23:40 - going to take care of all the
23:43 - errors this I this might be the first
23:47 - time in tutorial history that anyone has
23:50 - done parallaxing without
23:52 - errors something has got to be wrong but
23:55 - let's try this out so what we can do do
23:58 - now is we can actually set this up and
24:00 - if you've downloaded the script this is
24:02 - where you should uh tune in because now
24:04 - we're going to actually achieve this
24:06 - effect so let me just check how long
24:08 - we've been recording here wow okay so
24:12 - this sure was a long one might need to
24:15 - split this up cool so now uh on this
24:19 - parallaxing script you can see that we
24:21 - have a an array here uh which we can uh
24:25 - adjust the size of we're going to set
24:27 - this to three because we want both the
24:29 - background mountains blue and purple and
24:31 - the foreground dirt uh so now we have
24:34 - three elements in here and please note
24:37 - that whenever you're setting the uh
24:38 - background size Unity will sometimes not
24:41 - allow you to do this if you put in a
24:44 - number and then click out it will just
24:45 - cancel so write three and then press
24:48 - enter uh the smoothing we're going to
24:51 - just leave this at one for now to just
24:53 - see how the effect works and then we're
24:55 - going to tune it down a bit later here
24:58 - because it this is going to be a bit too
25:00 - crazy I believe um awesome so now let's
25:04 - just add the different elements and it
25:06 - doesn't really matter which order
25:08 - they're in so just drag in the
25:10 - background mountains purple the
25:12 - background mountains blue and the
25:14 - foreground
25:15 - dirt and uh we're going to hit play and
25:18 - you're going to notice that this is not
25:21 - at all
25:21 - working and that's because we have to
25:24 - also adjust the that position and this
25:26 - is the really cool thing about doing it
25:28 - this way uh with all the arrays and
25:30 - stuff is that we can actually just
25:33 - select the different uh elements and
25:35 - then move them back in relation to each
25:38 - other so we're going to Mo move this
25:41 - almost as far back as the blue
25:43 - background just in front of that and
25:46 - we're going to take the purple one and
25:47 - we're going to move it also pretty far
25:50 - back but a little less so something like
25:55 - this I believe would look pretty nice
25:58 - and then we're going to take the
25:59 - foreground dirt and let's just see where
26:00 - is our camera it's there you can of
26:03 - course view this from the left side if
26:07 - needed uh I'm going to do that and we're
26:10 - going to just move this over uh if you
26:12 - click on this Cube we're going to change
26:15 - wh That's not going to work never mind
26:17 - okay so let's just move this over so
26:19 - it's
26:20 - not behind the camera it will not appear
26:23 - but just in front and let's H hit play
26:26 - and see how it works so now when we move
26:30 - the layers will move accordingly and
26:33 - this actually looks really cool I think
26:36 - this gives it a really nice effect uh
26:39 - you can see that our foreground is
26:40 - moving faster than the uh middle here
26:44 - and the background is of course moving
26:46 - slower so that's awesome and and we
26:48 - still have a little bit of parallaxing
26:50 - occurring between the two background
26:53 - layers which is pretty awesome so uh I
26:56 - might go ahead and bump this effect down
26:59 - a bit and might even see if we select
27:02 - the camera here how far we can push this
27:06 - n this is as f as it's going to get
27:09 - that's that's of course the only thing
27:11 - that might uh be annoying about this
27:13 - technique but uh is that you you have to
27:16 - still be inside the range of the camera
27:18 - but in order uh to change this you can
27:20 - just change the smoothing and then uh
27:22 - simply adjust them afterwards so let's
27:25 - try setting the smoothing to 10 just to
27:27 - see how it looks and this is going to be
27:29 - pretty extreme you can see this is what
27:31 - paradoxing does when it's way too high
27:35 - uh that justes look doesn't look nice at
27:37 - all but maybe something like let's try
27:42 - 0.5 Ah that's too subtle let's actually
27:45 - try maybe
27:46 - two and again just play around with this
27:49 - until you find something that works this
27:51 - is two extreme I think I'm just going to
27:53 - do uh go with one for now and then we
27:55 - can always change it later uh but that
27:57 - just added some real nice depth to the
28:00 - game so I hoped uh I hope that you're
28:03 - pleased with the results uh we still
28:05 - have some things to take care of for
28:07 - example the looping of the ground here
28:09 - right now it's it's cutting off uh when
28:11 - you get too far to the right we have to
28:13 - adjust some colliders there's the whole
28:15 - Player thing plenty of stuff to do it's
28:17 - all going to be much easier than this
28:19 - hopefully and uh yeah thank you for
28:21 - watching and I'll see you in the next
28:23 - [Music]
28:26 - video
28:30 - [Music]