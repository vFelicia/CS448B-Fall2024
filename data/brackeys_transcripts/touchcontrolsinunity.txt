00:00 - probably one of the requests that we get
00:02 - the most is to do tutorials on mobile
00:04 - games and at the top of that list is
00:08 - touch controls so we thought it was
00:10 - finally time here's how to control your
00:12 - game using touch input in unity but
00:14 - before we get started this video is
00:16 - sponsored by unity Pro so of you indie
00:18 - game developers out there unity Pro is
00:20 - the perfect match for freelancers or
00:22 - teams of two people or more when going
00:25 - through you get access to unity experts
00:27 - like three expert training sessions per
00:29 - month where you can get help and
00:30 - guidance on key dev topics along with
00:32 - that the pro membership gives you a free
00:34 - game server along with each seed
00:36 - priority access to a success advisor and
00:38 - maybe most important unity Pro comes
00:40 - with unity teams advanced which allows
00:43 - your team to save share and sync unity
00:45 - projects with each other for me unity
00:47 - teams just makes everything so much
00:49 - easier so if you're a freelancer or a
00:51 - small team who wants to take your game
00:53 - development to the next level I'd
00:54 - recommend you to check out unity Pro
00:55 - simply click the link in description to
00:57 - get started also special thanks to art
00:59 - Arman Michael Neely Andrew Kononenko
01:01 - true VR systems Alexandra Blair SEMA
01:04 - Eyal Cheeta 3d and infinity PPR for
01:06 - their support on patreon now let's look
01:08 - at some touch controls so the first
01:10 - thing that we need to do when working
01:11 - with mobile in general is switching our
01:14 - build target to do this we go file build
01:16 - settings and here we can see a list of
01:18 - all the different platforms available
01:19 - I'm working with iOS so I'm gonna press
01:22 - that and then hit switch platform if you
01:24 - don't have the module installed already
01:26 - there will be a button to download it
01:28 - and then install it and once it's done
01:30 - we are ready to pair up unity with our
01:33 - phone because it's just really nice to
01:35 - be able to test these things on the
01:36 - phone itself
01:37 - luckily unity has a cool app for this
01:39 - called unity remote so to set this up
01:42 - let's go ahead and grab our phone now
01:44 - I'm in the App Store here and I'm gonna
01:45 - go ahead and search for unity remote 5
01:50 - I'm then gonna download the app here
01:52 - press get and wait for it to install I'm
01:55 - gonna press install here and when it's
01:57 - done I'm gonna go ahead and press open
01:58 - to open up the app on my phone and it
02:00 - will then prompt us to connect this
02:02 - device with a USB cable to our computer
02:04 - I've got it and prepared a USB cable
02:07 - here that we can use so I'm gonna go and
02:08 - plug that in and we can hear that it's
02:11 - now connected to my computer then
02:13 - step is to go into unity impressed edit
02:15 - project settings editor and here we want
02:18 - to go to the right on the device and
02:20 - make sure that your device is selected
02:22 - now this process might differ depending
02:24 - on the device that you're using in my
02:27 - case for example I'm using Windows on my
02:29 - computer and so I had to make sure that
02:30 - iTunes was installed I really recommend
02:33 - you check the link in the description
02:34 - for a more detailed guide on setting
02:36 - this up and now we're actually ready to
02:38 - test our game on the device so if I go
02:41 - ahead and press play inside of unity we
02:43 - should see that the game is now being
02:44 - broadcast to our phone of course our
02:47 - game is currently not very exciting it's
02:49 - just a blank white screen but I've gone
02:51 - ahead and prepared a small test for this
02:53 - so in my scene here you can see that I
02:55 - have a canvas and if we enable this we
02:57 - can see that under this canvas there's a
03:00 - simple UI button and as soon as I enable
03:02 - this in the editor it shows up on my
03:04 - phone and the reason why I've put a
03:06 - button here is just to show you that UI
03:08 - elements will work by default with touch
03:11 - you don't have to do any extra code so
03:14 - if you go ahead and press this button
03:15 - you can see that it will pop up with the
03:17 - text element saying that it works and
03:19 - that's because inside of unity I've
03:20 - simply added an event to our button that
03:23 - enables this text element so if your
03:26 - game is only made up of UI well then you
03:28 - actually don't need to do anything at
03:29 - all however we can of course also
03:31 - program other stuff in our game to work
03:33 - with touch here for example I have this
03:35 - crap sprite and currently it has nothing
03:37 - more than a sprite renderer and some
03:39 - animation now what if I wanted to be
03:41 - able to move this crab around by simply
03:44 - touching different places on the screen
03:46 - well doing this is actually super easy
03:48 - let's go ahead and add a new component
03:50 - and the component that we want to create
03:52 - is something like move by touch let's
03:55 - take new script and hit create an ad
03:57 - let's double click it to open it up in
03:59 - visual studio now whenever we're working
04:01 - with input we want to use the update
04:03 - method and we're actually not going to
04:05 - be using start at all so let's just go
04:07 - ahead and remove it inside of our update
04:09 - method we can then check for touch
04:11 - import and the way that we do this is by
04:14 - using an if statement and we want to
04:15 - check if input dot touch count and this
04:19 - is a variable that will change depending
04:21 - on the number of touches currently on
04:23 - the screen because as I'm sure you're
04:25 - aware the
04:26 - thing about a touchscreen is that you
04:27 - can have multiple inputs at once after
04:30 - all you do have five fingers so what we
04:32 - want to check is if touch count is
04:34 - greater than zero in other words are
04:36 - there any touches at all and if there is
04:39 - well then we can go ahead and get
04:40 - information about each touch we do this
04:42 - by using input get touch and here we
04:45 - simply give it the index of the touch so
04:48 - if you want to get the first touch we
04:49 - write zero second one is one third one
04:51 - is two and so on
04:53 - I'm just gonna get the first touch here
04:55 - and we can actually store the
04:56 - information about this touch in a
04:58 - variable so let's go ahead and create a
05:00 - touch variable let's just call it touch
05:02 - with an eye on capital T and set it
05:04 - equal to whatever input we get and now
05:06 - we can use this touch variable to get
05:08 - information about the touch so if we
05:10 - write touched position we get the
05:12 - current position of the touch on the
05:14 - screen in pixel coordinates we can also
05:16 - use touch dot face in order to get
05:19 - information about the current state of
05:20 - the touch did it just begin did it just
05:23 - end did it move was it stationary or did
05:25 - it get canceled by the device so for
05:28 - example we wanted to just move our
05:29 - object to the current point of the touch
05:32 - we would of course use touch dot
05:34 - position however touch that position is
05:36 - in screen coordinates its measured in
05:38 - pixels and the position of our object is
05:41 - in world coordinates its measured in
05:43 - units so we have to convert from screen
05:46 - to world space and this is done really
05:49 - easily by referencing our camera so we
05:52 - can go camera dot main to select our
05:54 - main camera we then do dot screen to
05:57 - world point and is going to take in a
05:59 - screen position in our case touch
06:01 - position and convert it to a place in
06:03 - our world we then store this position in
06:06 - an ordinary vector three so three
06:08 - coordinates XY and Z I will call this
06:10 - something light touch position and now
06:13 - we can simply set transform dub position
06:15 - so the current position of our object
06:17 - equal to our touch position also this is
06:20 - going to set our touch position on the z
06:21 - to the same position as our camera and
06:24 - we don't want that we just want this Z
06:26 - to remain at zero so I'm just gonna set
06:28 - touch position to Z equal to zero and
06:31 - that should fix it so if we now save
06:33 - this and head into unity and hit play
06:36 - and I'm gonna pick up my phone here and
06:38 - now every time I
06:39 - press somewhere on the screen the crap
06:42 - moves to this point awesome but of
06:45 - course if we're able to register
06:46 - multiple touches wouldn't it be cool if
06:49 - we could show all of our touches on
06:51 - screen and this is actually not that
06:53 - much harder to do inside of unity here
06:55 - instead of just getting the first touch
06:58 - we can get all of the touches and then
07:00 - simply loop through them and do
07:02 - something for each touch so let's just
07:04 - go ahead and remove our code here and
07:06 - instead will write input dot touches and
07:09 - this is just an array which means a list
07:12 - of all of our touches and just like with
07:14 - any array we can create a loop that goes
07:16 - over all the touches so I'm gonna go
07:19 - ahead and create a for loop here this
07:21 - for loop is going to create a variable
07:22 - called I and set it equal to zero and
07:25 - it's going to keep going until I reaches
07:28 - input touch count and every time we go
07:31 - through the loop I is going to be
07:32 - increased by one in other words we're
07:35 - going to loop over each touch in our
07:37 - array and we can of course get the
07:38 - position of each touch the same way that
07:41 - we did before by using camera dot main
07:43 - that screen to wall point and the touch
07:46 - position is now input dot touches and
07:49 - then we are going to get the eighth
07:51 - element so whatever I is at this point
07:53 - in our loop that is the touch that we
07:55 - want to get so at first we're going to
07:57 - get the first touch then the second then
07:59 - the third of which one we are going to
08:01 - get the position now we've converted the
08:03 - screen position of each touch into what
08:05 - position and again we can store this in
08:07 - a variable just a regular victor three
08:09 - let's call it touch position again and
08:12 - just like before we could go ahead and
08:14 - create a crab for each one and move them
08:15 - around I'm just going to use a handy
08:17 - method called debug draw line and this
08:20 - is going to draw a line from that just
08:22 - say vector three that's zero so the
08:24 - center of our world to our touch
08:25 - position and I'm going to make the color
08:27 - of this line red so that we can easily
08:30 - see it and now if we head into unity and
08:32 - hit play and we need to make sure in our
08:35 - game view here that we enable gizmos at
08:37 - the top to actually draw the lines and
08:40 - then going to pick up my phone here and
08:42 - now whenever I press somewhere on the
08:44 - screen we can see that a red line gets
08:47 - drawn to my finger and I can use as many
08:49 - fingers as I would like to all of the
08:52 - lines are
08:52 - going to get drawn pretty cool of course
08:56 - if we look at a real game example we
08:57 - might need something like a joystick to
08:59 - move around our character see I'm just
09:01 - using the same scene as we used in the
09:04 - shooting video that of course be a link
09:06 - to everything in the description and
09:07 - currently this character is moved around
09:09 - just using the keys on the keyboard
09:11 - let's instead create a visual joystick
09:14 - that can be moved around by touch and of
09:16 - course you can create joysticks from
09:18 - scratch using C sharp but I think that's
09:20 - overly complicated for what we need to
09:22 - do here instead I really recommend using
09:24 - this free drastic pack from the asset
09:26 - store at least as a base this comes with
09:29 - three types of joysticks and some
09:31 - placeholder sprites to use in your game
09:33 - I'm just gonna go ahead and hit import
09:35 - here and hit import again and we should
09:37 - now see this virtual joystick pack
09:39 - folder in our project it comes with a
09:41 - few example scenes and a guide and most
09:44 - importantly it comes with some really
09:45 - solid scripts and prefabs to use as a
09:48 - base so I'm just gonna go back to game
09:50 - view here and I'm gonna go ahead and
09:52 - create a UI canvas of course we use the
09:56 - canvas for all UI elements and a
09:58 - joystick is definitely a UI element and
10:00 - then gonna take a fixed joystick here
10:03 - and drag it under the canvas and we see
10:05 - everything is pretty much already set up
10:07 - feel free to modify any of these sprites
10:10 - and make them look how you want and also
10:12 - feel free to open up the script here and
10:14 - change it if it doesn't do exactly what
10:16 - you need and once we have this joystick
10:18 - in our scene we can start using it in
10:20 - our player movement so I'm gonna select
10:22 - my player here I'm gonna open up the
10:25 - player movement script I can see if we
10:27 - scroll down here to our update method
10:29 - we're currently moving horizontally by
10:31 - simply getting some input on the
10:33 - horizontal axis and this works fine for
10:35 - the keyboard and for a controller but we
10:38 - of course want to change this code so
10:39 - that it uses our joystick instead and
10:42 - doing this is super simple we simply
10:44 - need to go to the top here and create a
10:46 - reference to a joystick so create a
10:48 - public joystick and we'll just call it
10:51 - joystick we then go down to update
10:53 - method and replace this input line here
10:55 - with joystick dot horizontal and just
10:59 - like with input.getaxis
11:00 - this is going to give us a float value
11:02 - that goes between negative 1 and 1 so if
11:05 - you press the joystick all the way to
11:06 - the
11:06 - it's gonna be one all the way to the
11:08 - left it's gonna be minus one right in
11:10 - the center it's going to be zero and
11:11 - anywhere in between and in fact if we
11:14 - just want to try this out right now we
11:16 - could save this go into unity and I'm
11:18 - just gonna change the aspect ratio here
11:20 - to iPhone five wide just to make sure
11:23 - our pixel art still looks okay I'll then
11:25 - take the fixed joystick and drag it into
11:27 - our joystick slot
11:28 - I'll also quickly disable the gizmos
11:30 - again and now when we hit play and of
11:33 - course pick up our phone again we can
11:35 - already move our character using the
11:37 - joystick now I think for this game I
11:40 - don't actually want to be able to move a
11:42 - tiny bit to the sides
11:44 - I want to either move at full speed or
11:46 - nothing because I think it looks really
11:47 - silly when he's running quickly in his
11:49 - animation but almost not moving at all
11:52 - so in order to go ahead and change this
11:55 - in our script we can of course just play
11:56 - around with our movement variable so
11:59 - inside of visual studio instead of just
12:01 - setting horizontal move equal to
12:03 - joystick toward horizontal and then
12:05 - multiplying with our speed let's go
12:07 - ahead and create a few if statements
12:09 - here so in the case that joystick dot
12:11 - horizontal is greater than or equal to
12:15 - some value and I'm just gonna set point
12:18 - to so this means that we have to move
12:20 - the joystick at least point two in order
12:22 - to move our character you can play
12:24 - around with this it's almost like the
12:25 - sensitivity of the joystick when in this
12:27 - case we want to move right so we can go
12:30 - ahead and set horizontal move equal to
12:32 - our run speed now in the case that this
12:34 - isn't met so L say if we want to check
12:38 - if joystick dot horizontal is less than
12:42 - or equal to negative point two in which
12:45 - case we want to go ahead and move left
12:47 - so here we'll set horizontal move equal
12:49 - to negative run speed of course to move
12:51 - in the opposite direction and if none of
12:53 - these requirements are met so if it's
12:55 - not greater than 0.2 or less than
12:57 - negative point two well then we just
12:59 - don't want to move at all
13:00 - so we'll set horizontal move equal to
13:02 - zero whoops forgotten else there and now
13:05 - we should actually see this working just
13:07 - fine so if we save that go into unity
13:09 - and play again we can see that if I only
13:11 - move the joystick a tiny tiny amount
13:13 - nothing is happening however if I get
13:15 - past our threshold we can see that our
13:17 - characters snaps right to full
13:19 - speed and I think when playing with this
13:21 - it actually feels really nice of course
13:24 - adjust your movement speed adjust you're
13:25 - sensitive in all this stuff to suit your
13:27 - game but I think this feels really nice
13:29 - for mine great now we also want to be
13:32 - able to jump and Crouch in this game and
13:35 - we could of course create buttons for
13:37 - this but I think it would be smoother if
13:38 - we just used the up-and-down part of the
13:41 - joystick to do this so to implement this
13:44 - we'll go in to visual studio and we'll
13:46 - go under our horizontal movement and
13:48 - create a new variable is going to be a
13:50 - float let's call it vertical move and
13:52 - we're going to set it equal to joystick
13:53 - vertical then when we currently check if
13:56 - we want to jump here we're checking if
13:58 - we get the button down jump we can
14:00 - instead just check if vertical move is
14:02 - greater than or equal to some value
14:05 - again this is the sensitivity of our
14:07 - jump I want this to be much less
14:09 - sensitive than our movement because we
14:11 - don't want to be jumping on accident all
14:13 - the time so I'm going to set it to
14:14 - something like point five and now every
14:16 - time we move our joystick further than
14:18 - half way up we're going to trigger a
14:20 - jump and we can do the exact same thing
14:22 - for crouching instead of getting some
14:24 - button input we can check if vertical
14:26 - move is less than or equal to negative
14:29 - 0.5 in which case we want to crouch and
14:31 - if it's not well then we want to stop
14:34 - crouching so we're simply going to put
14:35 - else here and get rid of this if
14:37 - statement entirely and now if we save
14:40 - this code go into unity and play and now
14:42 - by moving up out jump stick we should be
14:45 - able to jump and by moving it down we
14:47 - should be able to crouch I can see how
14:50 - this allows us to fluently move around
14:52 - our level jumping and crouching in any
14:54 - way that we would like and from here on
14:56 - it's really up to you to implement more
14:58 - controls to configure your game I would
15:01 - recommend trying to implement a shooting
15:03 - button yourself you can of course either
15:04 - do this by using a UI button or by
15:07 - registering touch on a certain part of
15:09 - the screen everything can be done using
15:11 - the same methods shown in this video
15:13 - so from here on it's just about having
15:14 - fun with it that's pretty much it for
15:16 - this video if you liked it make sure to
15:17 - subscribe and bring that notification
15:19 - bell so you don't miss the next one also
15:21 - make sure to check out your new pro just
15:23 - click the link in description to get
15:24 - started and in case you haven't seen it
15:26 - we just did a video for the practice
15:27 - game jam and the game that I made for it
15:30 - it's something I'm super proud of
15:31 - he made so many awesome games for the
15:33 - gems so I definitely recommend you check
15:35 - it out if you haven't already on that
15:37 - thanks for watching and I will see you
15:38 - in the next video thanks out the awesome
15:43 - patreon supporters who donated in August
15:45 - and a special thanks to X and a player
15:47 - see Mariah cheetah 3d Infinity PPR 2 VR
15:50 - systems Sybok mommy turkey is Kirk
15:52 - personify thanks to long-lived assets
15:54 - Clinton Vince kuha Ronan Tynan Sullivan
15:57 - for presea Chima for the park James P
15:59 - Bruins cat now Kiyosaki Gregory pierce
16:01 - their retreat cure Swedish ski James
16:03 - Rogers propfan Robert Boone
16:05 - Anthony patent and Erasmus you guys Rock