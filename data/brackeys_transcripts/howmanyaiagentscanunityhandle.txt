00:00 - I think one of the coolest things in computer
00:02 - Programming is AI in particular AI that can be taught how to navigate and move around a 3d world
00:08 - I love playing around with path finding and setting up challenges for my little agents to solve in this video
00:13 - I'll be putting nudity's building AI solution to the test
00:16 - Let's see how it does
00:17 - So first I set out to build a maze for my testing to take placing after having looked at a bunch of different maze layouts
00:23 - I decided to go with a classic a traditional pac-man level after finishing my model in blender
00:29 - I set up a basic nav mesh using the new nav mesh tools which are available on github
00:34 - I then created a few agents with
00:36 - Standard settings as well as a simple script to control them all that did was to tell the agents to move to the same location
00:42 - On the other side of the maze using the shortest possible path to no surprise the test ran smooth
00:48 - However because of the grid like nature of the maze some agents could run straight through
00:52 - So quickly modified the level to avoid this now it was time to start adding in more agents
00:58 - Here's a test with just over 200 still everything was smooth
01:01 - But I found it hard to keep track of each
01:03 - Agents position so tried adding random colors to make them different from each other from looking at it
01:09 - I noticed a few things first the agents tend to clump together
01:13 - It seems that even though each of the agents are said to
01:16 - Continuously look for better paths the queue up instead of altering their route
01:20 - Which ultimately slows them down second it looked to me like the agents in the back was first to reach their destination
01:27 - Where's the agents in the front took a while to get going to confirm this?
01:31 - I colored each row differently and just as I thought the yellow agents in the back were much faster
01:36 - But they also seemed to start first it looked like for some reason the agents were starting
01:41 - one-by-one from the back to the front a quick look at the documentation provided an explanation for this behavior
01:47 - When setting an agent's destination that agent will start calculating a path in the background
01:53 - Once a path is found the agent will start moving so the agents were probably moving one by one because the navmesh
01:58 - System only calculates so many paths at once to confirm this I wrote a quick script
02:03 - That would update the color of each agent depending on its current path
02:06 - Status and indeed the agents would turn green and start moving as soon as a path was no longer
02:12 - Now of course I wanted to add more agents
02:14 - But as soon as I got near
02:16 - 400 things started to slow down so I opened up the profiler to try and find the culprit and to my surprise
02:22 - 75 percent of CPU usage was currently being spent on rendering while actually
02:27 - Updating the AI was only taking around 6% to make the agents render more effectively
02:31 - I gave them all the same material and enable GPU instancing
02:35 - I also made sure to disable vsync under the graphic settings and voila
02:39 - CPU overhead went from over 60 milliseconds to only 6
02:43 - Next I wanted to make all the agents start at the same time to do this
02:47 - I wrote a custom script that would loop over all the agents and calculate a path for each one then once all
02:52 - agents had a valid path
02:54 - I would apply them all at once the result was a smooth simulation of 400 agents
02:59 - But that wasn't enough I wanted more so I expanded the maze and bumped it up to a thousand then
03:05 - 5000 at this point my computer was starting to slow down
03:09 - But before moving on I wanted to try making some modifications to the maze to see how the agents would react
03:15 - So tried adding a wall with a hole in the center
03:18 - I also tried adding a secondary hole to the side as expected to split the army into
03:23 - Those close to the side and those closer to the center now of course
03:27 - 5,000 agents are plenty to do lots of testing with but as I always try to tell people
03:31 - When they want to get into game development the most important thing is to have fun
03:36 - So I made the maze even bigger
03:38 - I also downloaded a framerate
03:40 - counter from the asset store and started tweaking settings to see if anything which make this simulation run smoother
03:46 - I created this spreadsheet to keep track of my findings as expected all settings related to baking the navmesh had no effect on runtime performance
03:53 - So I quickly moved on to the 18 component itself here tried messing around with a bunch of settings
03:59 - But the only thing that really had an impact was obstacle avoidance
04:02 - Turning this off of course meant that the agents wouldn't avoid each other, but it did improve my framerate by about 40%
04:09 - I also tried the different obstacle avoidance qualities
04:12 - But was surprised to see that the different was no more than a couple of frames at this point
04:17 - I just wanted to squeeze as much performance out of unity as possible so I tried
04:21 - Configuring rendering settings and even playing around with custom path findings illusions such as a star
04:27 - I was impressed to find out that unit is built in navmesh tools were still the fastest way to go however
04:33 - I will say that this might just be due to my limited knowledge of a star finally by building the game
04:38 - I managed to get the simulation running at 27 FPS and so it was time
04:43 - Time for ten thousand a I agents of course the simulation wasn't smooth
04:49 - In fact even as a standalone build it was only running at around 10 frames per second
04:53 - But still it was wonderful to witness this swarm of computer-controlled robots
04:58 - Mindlessly moving through the maze now I decided that 10000 might finally be enough, but that doesn't mean that wasn't room for more fun
05:05 - So I created an army then an army of cacti
05:10 - Finally, I thought what would be more suiting to end the day than hundreds of wild running horses
05:15 - I know how about hundreds of wild running horses riding towards the sunset?
05:24 - Perfect
05:45 - Thanks of the awesome patreon supporters who donated in February and a special, thanks to encode
05:49 - We trust Patrick McKinley Diego kike Frank Tristan town donggyun, Murphy
05:53 - Oh infinity PPR yo Rio myrrh and soft tune sighs mom eat turkeys Kirk face on Murphy beard or die
05:59 - DoubleTap 45 James P J
06:01 - delay Superman the great John ProGuard Dennis Sullivan Jason Latino Alex wicked ski beyond Photo Club
06:07 - Sweetland swell enough gin Sasha hafsteinn Sunni Arabs and Gregory Pierce James Rogers Robert Boone Durman Rob fan and Erasmus
06:15 - You guys Rock