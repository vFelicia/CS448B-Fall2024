00:00 - [Music]
00:03 - hello everyone and welcome to this video
00:04 - on creating a bullet time effect in
00:06 - unity here's what we'll be making today
00:07 - throughout this video I'll explain about
00:09 - how time works in unity and how you can
00:10 - manipulate it while still getting really
00:12 - smooth results also just want to mention
00:14 - that I'm on a fixed video schedule so
00:16 - you can expect a new video both witness
00:18 - dayss and Sundays so let's just go ahead
00:20 - and get started so here's the project
00:21 - we're going to be working with today
00:23 - it's fairly simple but I will of course
00:25 - have a download link for you in the
00:26 - description if you want to have it on
00:28 - your own system if you go ahead and play
00:30 - we can see what it currently looks like
00:32 - so we can move around and we are able to
00:34 - shoot these explosions um that will
00:37 - create a force that acts on these rigid
00:40 - body objects which are currently just
00:42 - red cubes however we currently have no
00:45 - slowing down so let's go ahead and
00:47 - create a bullet time effect so to get
00:49 - started let's create an empty game
00:51 - object so right click in the hierarchy
00:53 - go create empty and let's reset the
00:55 - Transformer on that to make sure it's
00:57 - centered in our scene we can now rename
00:59 - this to something like time controller
01:01 - or time manager and we can go ahead and
01:03 - drag it to the top of our Hier key and
01:06 - add a new component and this is where we
01:08 - want to add our actual script so let's
01:10 - just go ahead and call it the same thing
01:12 - the time manager let's hit create an ad
01:15 - and let's double click this to open it
01:16 - up in visual studio so let's clean this
01:18 - up a little bit let's delete our two
01:20 - functions and let's also delete the two
01:22 - using tags up here because we're not
01:24 - going to be using anything under system
01:25 - doc collections now we can create two
01:27 - variables that will allow us to
01:29 - configure how our slow motion will occur
01:31 - the first one is going to be a public
01:34 - float and this one is going to be the
01:36 - Slowdown Factor The Slowdown factor is
01:39 - going to control how much we will slow
01:41 - down time when we do a bullet time
01:43 - effect the lower the number the more
01:45 - slow we're going to be moving so I'm
01:47 - going to default this to something
01:49 - really low say
01:51 - 0.05 we also need a variable to Define
01:53 - for how long the slow down will occur so
01:56 - in that case we'll create another public
01:58 - float called the slow down length and we
02:02 - can go ahead and default this to
02:03 - something like two meaning that we will
02:05 - be slowed down for 2 seconds total now
02:07 - we need to create a method that will
02:09 - change some time settings around in
02:10 - unity in order to make the game engine
02:13 - slow down we'll go ahead and write void
02:15 - and the name of the function is going to
02:16 - be something like bullet time or slow
02:20 - down or slow motion I'm just going to go
02:22 - ahead and call it do slow motion and
02:24 - inside of this function we can set time.
02:27 - time scale so what is time scale time
02:30 - scale is basically a value that
02:31 - determines the scale at which time is
02:33 - passing if time scale is one time will
02:35 - be passing at a normal Pace we say that
02:37 - it's running in real time if time scale
02:40 - is 0.5 time will be passing two times
02:42 - slower than real time and so we can
02:44 - adjust time scale to a value between 0
02:46 - and 1 the lower the value the slower the
02:49 - game will run so let's go ahead and set
02:51 - our time. time scale equal to our slow
02:53 - down Factor because our slowdown factor
02:55 - is equal to
02:57 - 0.05 we can very easily calculate just
03:00 - how many times slower we are going to be
03:01 - moving at and we do that by saying 1 /
03:05 - 0.05 which is equal to 20 that means
03:09 - that we will be moving 20 times slower
03:11 - than normal this function should
03:13 - actually now slow down time but we also
03:15 - need to call the function from somewhere
03:17 - so let's go ahead and find the place in
03:19 - our project where we can do that on my
03:21 - player I created an a script called
03:23 - explosion gun and this is responsible
03:25 - for shooting out an explosion wherever
03:28 - the user is pointing let's go ahead and
03:30 - double click on that to open it up in
03:31 - visual studio and we can have a look at
03:33 - what's in here so I have a few
03:35 - references one to the explosion prefab
03:37 - that we want to spawn and on to the
03:39 - camera in the update loop I basically
03:42 - just check if the user presses the fire
03:44 - button and if he does we shoot then I do
03:46 - a bit of Ray cast triggery to shoot out
03:48 - a ray from our uh camera's current
03:50 - position and then just straight forward
03:52 - and if we hit something I go ahead and
03:54 - create an explosion at the impact point
03:57 - and this is basically where we also have
03:59 - the opportunity to slow down time but in
04:01 - order to do that we need a reference to
04:03 - our time manager so let's go to the top
04:05 - here and create yet another public
04:07 - variable and this is going to be a
04:08 - public time manager and we'll just go
04:11 - ahead and call it time manager with a
04:12 - non capital T so right after we
04:14 - instantiate the explosion we can now say
04:17 - time
04:18 - manager. do slow motion but the problem
04:21 - here is that our slow motion method is
04:24 - currently private so we cannot access it
04:26 - from within this script to change that
04:28 - we simply go into our time manager and
04:31 - insert a public in front of the Void so
04:34 - now this method is public and so we can
04:36 - access it from within this class so we
04:38 - call it do slow motion and hit save so
04:41 - if we now head into Unity we need to
04:43 - select our player and drag in the time
04:45 - manager into the time manager variable
04:48 - there we go we can now hit play and we
04:50 - should see this working but something
04:52 - weird is going to happen so if I hit uh
04:54 - shoot here we can see that time is
04:57 - slowed down quite drastically but but it
04:59 - almost seems that the game is lacking
05:02 - however our Mouse movement and the
05:04 - particles here are smooth so what is
05:08 - causing this well the reason why is that
05:10 - whenever we adjust our time. time scale
05:13 - we also need to adjust time. fixed Delta
05:17 - time fixed Delta time is one of those
05:18 - things in unity that just sounds really
05:20 - scary but actually it's quite simple we
05:23 - know that the update function runs each
05:24 - time the computer draws a frame this
05:26 - normally happens many times each second
05:29 - and allows to make changes to an object
05:31 - over time but how many times the update
05:33 - function runs each second depends on how
05:35 - much load the computer's under and how
05:37 - fast the components in the computer can
05:39 - perform this is normally not an issue
05:41 - but when it comes to doing physics
05:42 - calculations everything becomes much
05:44 - easier and more reliable when we know
05:46 - beforehand how many times a second the
05:49 - function will be called therefore Unity
05:50 - uses a separate function called fixed
05:53 - update to calculate its physics fixed
05:55 - update is of course called a fixed
05:57 - amount of times per second so the bug
05:59 - that we just saw in unity occurred
06:00 - because fixed update got slowed down so
06:02 - much that we could visibly see it
06:04 - updating luckily we can change the time
06:06 - between each fixed update through script
06:08 - that is done by modifying the fixed
06:10 - Delta time variable we normally want our
06:12 - fixed update to run around 50 times per
06:14 - second which means that fixed Delta time
06:16 - should be 1/ 50 which is equal to
06:19 - 0.02 and then we multiply with the
06:22 - time.time scale so that when we slow
06:24 - down time making time scale smaller we
06:27 - will also decrease the time between each
06:28 - fixed update so to make sure that we
06:30 - adjust the fixed Delta time inside of
06:33 - our time manager we simply go time.
06:36 - fixed Delta time equals time.time scale
06:41 - multiplied with some small number say
06:44 - 02 which is the standard make sure you
06:47 - do this after we adjust the time.time
06:49 - scale so now when we save this and head
06:51 - back into Unity we should get a very
06:54 - smooth slow motion effect so if we go
06:56 - over here and hit shoot we can see just
06:59 - how how nice that looks in comparison so
07:02 - much much better however we are
07:05 - currently just staying slowed down time
07:07 - doesn't go back to its normal state so
07:10 - in order to slowly return back to our
07:12 - normal time scale we need to use the
07:15 - update method let's go here and write
07:17 - void update and update is of course
07:19 - called each time the computer draws a
07:21 - frame and unless your game is
07:23 - ridiculously hard to run that means many
07:25 - many times a second so what we'll do is
07:28 - each frame add a find a number to time.
07:30 - time scale in order to slowly return it
07:33 - back to one so to do that we write time
07:35 - do time scale plus equals and in here we
07:38 - write 1 divided by the slow down length
07:42 - so right now our slowdown length is 2
07:44 - which means that this will say 1 / 2
07:47 - which means a half and so each second
07:50 - will add 1/2 back to the time scale and
07:53 - so in 2 seconds it should return to
07:55 - normal however that's not what we are
07:57 - currently doing what we're currently
07:59 - doing is actually adding a half onto the
08:02 - time scale each frame which might be
08:04 - drawn say 60 times a second or 120 times
08:08 - a second so what we need to do is
08:10 - multiply this whole thing with time.
08:13 - Delta time so to do that we wrap this in
08:16 - a few parentheses here and then we say
08:18 - multiply with time. Delta time and time.
08:22 - Delta time is the amount of time passed
08:24 - since we drew the last frame and that
08:26 - means if we are drawing a lot of frames
08:28 - a second this value is going to be small
08:30 - and if we're only drawing a few frames a
08:32 - second this value is going to be big and
08:34 - that means that it is going to even out
08:37 - this value so that over 2 seconds we
08:40 - going to be adding one to the time scale
08:43 - and we'll do that in very small
08:45 - increments if that's kind of hard to
08:47 - wrap your head around I totally get it
08:49 - no one really understands time. Delta
08:51 - time the first time but really the more
08:53 - you get to use it the more you
08:54 - understand however this is currently
08:56 - going to propose a problem and that is
08:58 - that time Delta time is actually also
09:01 - affected when we change the time scale
09:03 - and so this whole equation becomes
09:05 - really weird so what we do instead is
09:07 - use time. unscaled Delta time and this
09:11 - is the exact same thing as Delta time
09:12 - the amount of time elaps since we last
09:14 - Dre a frame but on scale Delta time is
09:17 - not affected when we change the time
09:19 - scale so right now we're altering the
09:20 - time scale in order to have it return to
09:22 - one but time scale can actually be
09:25 - greater than one if we want to speed up
09:27 - our game we can set time. time scale
09:29 - equal to something larger say if we
09:31 - wanted to run two times faster we'll set
09:33 - it to two and so right now unless we are
09:36 - slowed down this is just going to keep
09:39 - increasing and so our game will run
09:41 - faster and faster if we hit save on this
09:43 - right now and then hit play we should
09:46 - see that our game just slowly speeds up
09:49 - and indeed it does we're able to run
09:51 - quicker and quicker until of course we
09:54 - shoot something and then we are reset
09:56 - back to
09:57 - 0.05 so we'll go in here here and say
09:59 - time. time scale equals math. clamp and
10:04 - the value we want to clamp is time. time
10:07 - scale and we want to clamp it between Z
10:10 - and 1 and this means that we'll either
10:13 - be totally slowed down or running at a
10:15 - normal speed and so we won't be able to
10:18 - increase the time scale between or
10:21 - further than to the value one and so
10:23 - when we had save now we should see if we
10:26 - hit play here that time will not
10:28 - increase increase above the one and if
10:31 - we go ahead and shoot something time
10:34 - will slow down and then slowly go back
10:37 - up to one and so now we have that old
10:40 - school bullet time effect what I really
10:43 - suggest you do is combine this with some
10:46 - changes in audio a very normal thing to
10:49 - do is adjust the pitch of your game so
10:51 - that when you're slowed down you will
10:53 - decrease the pitch and then increase it
10:55 - as you slowly increase the time scale
10:57 - but that's really just a lot of things
10:59 - that you can do to play around with this
11:01 - and I suggest you just have a lot of fun
11:03 - finally I just want to say if you're
11:04 - making a shooter and want to grab some
11:07 - weapons you can go to Dev assets.com and
11:09 - select the modern weapons pack here
11:12 - there are some really really nice
11:13 - highquality weapons here for you to
11:15 - download it's pay what you want so you
11:17 - can totally decide the price and uh yeah
11:20 - we really hope that you are going to
11:22 - enjoy them that's pretty much it for
11:23 - this video if you're making a shooter I
11:25 - really suggest you check out my latest
11:26 - tutorial on creating a sniper scope
11:28 - effect in unity I think it turned out
11:29 - pretty well if you want to see more
11:31 - subscribe to the channel you can expect
11:32 - a new video every Wednesday and Sunday
11:34 - thanks for watching and I will see you
11:36 - in the next video thanks to all the
11:37 - awesome Patron supporters who donated in
11:39 - December and a special thanks to Sultan
11:41 - El Sheriff Derek hir facel marifi James
11:44 - Kell Hound Robert Barham and Jason latio
11:46 - if you want to become a patreon yourself
11:48 - you can do so at