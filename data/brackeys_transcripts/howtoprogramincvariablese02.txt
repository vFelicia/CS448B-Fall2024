00:00 - in this video we are going to lay the
00:01 - foundation for pretty much every program
00:03 - you're ever going to write we're going
00:05 - to be talking about one of your most
00:06 - essential tools as the programmer
00:08 - variables variables allow us to hold
00:11 - information this means that we can
00:12 - create programs that react to what the
00:14 - user is telling them a good example of
00:16 - this is a calculator it takes some input
00:18 - does something to it and spits out a
00:20 - result so that's exactly what we're
00:22 - going to be making in this video but
00:24 - first this video is sponsored by Miller
00:25 - node Miller node is a free tool for
00:27 - organizing your creative projects into
00:29 - freeform visual boards it can be used
00:31 - for any creative project but it's
00:33 - particularly well-suited for the early
00:35 - stages of game development which we all
00:37 - know can get pretty overwhelming at
00:39 - times besides just updating their whole
00:41 - template workflow milla node is now also
00:43 - available for both Android and iOS
00:45 - having an organizational tool at your
00:47 - disposal at all times can be so useful
00:49 - as you never know when the next idea for
00:52 - a project might strike that's it I'm
00:55 - genius there are some parties that
00:58 - everything is synchronized with your
00:59 - desktop version so no matter where you
01:01 - are you can make sure that those great
01:02 - ideas aren't lost if you want to have a
01:04 - look at Miller node in action go check
01:06 - out our video where we used it to plan a
01:08 - turn-based battle system and finally
01:10 - Miller node is free so get organized now
01:13 - by simply clicking the link in the
01:14 - description now you can think of a
01:15 - variable like a container variables
01:18 - essentially allow us to hold information
01:20 - in other words we can put stuff inside
01:22 - of that container and at any point
01:24 - during our program we can open the
01:26 - container and access the information and
01:28 - we can do this to either change it or
01:30 - use it to do something with a simple
01:32 - example of this would be if we want to
01:34 - write a program that takes in the name
01:35 - of our user here we would use a variable
01:38 - to store that name then later we can
01:40 - access this information and displayed in
01:42 - the program whenever we want however one
01:45 - thing about variables that we need to
01:46 - understand is that they can have
01:48 - different types the variable type
01:50 - indicates what type of information we
01:52 - want the variable to hold if we go back
01:54 - to our container example we can imagine
01:56 - the variable type as the shape of the
01:58 - container if for example we have a round
02:00 - container we can only put round
02:02 - information inside now variables can
02:04 - have all kinds of types but in c-sharp
02:07 - we work with four fundamental data types
02:10 - number one the integer or just int
02:13 - this type can store a whole number it
02:15 - can be positive or negative as long as
02:17 - it's a whole number number to the float
02:19 - this can store a decimal number again it
02:22 - can be positive or negative but this
02:23 - allows us to have decimals this can of
02:25 - course also store whole numbers but the
02:27 - integer is faster so we use that unless
02:29 - we really need the decimals also
02:31 - sometimes you want a very precise number
02:34 - and the float can only hold up to seven
02:36 - digits in this case we would use a
02:38 - double instead it's just like the float
02:40 - but it can hold up to sixteen digits
02:42 - number three the string this can store
02:45 - it text if for example we wanted to
02:47 - store the name of our user we would do
02:48 - so using a string whenever we write
02:50 - quotation marks in our code like we've
02:53 - done so far every time we've dealt with
02:54 - text we're telling the program that this
02:57 - is a string one thing to note is that we
02:59 - can fit both letters and numbers and all
03:01 - kinds of signs inside of a string but it
03:04 - will always read it as text it's not
03:06 - meant to store numbers like an integer
03:08 - or a float and number for the boolean or
03:11 - just pull this can be either true or
03:13 - false that's it it's either one or the
03:16 - other this is the simplest of the data
03:19 - types so when we want to make a variable
03:21 - the syntax is actually quite simple we
03:23 - write the type of the variable for
03:25 - example int followed by the name let's
03:28 - call it user age followed by an equal
03:31 - sign and then whatever value we wanted
03:33 - to have and of course a semicolon now
03:36 - c-sharp actually allows us to cheat here
03:39 - and just write var instead of the data
03:41 - type you'll sometimes see this when the
03:43 - programmer doesn't know beforehand what
03:45 - type the variable is going to be or if
03:47 - just being lazy in general it's better
03:49 - practice to write the actual type this
03:51 - is called being explicit and it helps us
03:54 - avoid making mistakes but enough talking
03:56 - about it let's try using variables to
03:58 - create something cool let's start out
04:00 - with the example we talked about where
04:01 - our program takes in the name of our
04:03 - user to do this we first need to have
04:05 - the program as the user to input a name
04:07 - so let's go console dot write line what
04:10 - is your name and then we create a
04:14 - variable so on a new line here I'm gonna
04:16 - type a string because a name is made up
04:19 - of text and strings are made to store
04:21 - text we then follow that by the name of
04:23 - our variable let's just call it user
04:26 - the standard naming convention is to
04:28 - have the variable start with a
04:29 - non-capital letter and then have
04:31 - individual words separated with the
04:33 - capital one so user name and we can go
04:36 - ahead and set this equal to some name
04:38 - and again whenever we're working with
04:39 - strings we want to put this inside of
04:41 - quotation marks so we could just put in
04:43 - John here and then end it with the
04:45 - semicolon
04:46 - however we don't know the name
04:47 - beforehand so instead of assigning our
04:49 - variable to John we want to put here
04:52 - console dot read line in other words
04:55 - we're saying that we're creating a
04:57 - variable called username of type string
04:59 - and we're setting it equal to whatever
05:02 - the user types in what we can then do is
05:05 - use this variable however we'd like so
05:08 - underneath here for example we could go
05:10 - console dot write line and have the
05:13 - program respond and we'd have it say
05:15 - something like hello and then here I'm
05:17 - going to go outside of the quotation
05:19 - marks and I'm going to add another word
05:21 - to this so I'm going to use the plus
05:22 - sign to append a word and I'm gonna put
05:25 - in the username and then we can actually
05:27 - keep doing this so we can add on more
05:29 - strings here so we can add on a plus
05:31 - again that goes comma nice to meet you
05:36 - there we go so you can see how we've
05:38 - constructed a sentence here where we
05:40 - first use a string called hello we then
05:42 - input another string which is our
05:44 - username which is going to be equal to
05:45 - what is typed in and then we add comma
05:48 - nice to meet you so if we run this
05:50 - program now let's go run start debugging
05:53 - the program asks us to put in a name I'm
05:55 - gonna put in Dwayne Johnson and indeed
05:58 - it says hello Dwayne Johnson nice to
06:00 - meet you
06:01 - awesome so this is probably the most
06:03 - simple example of gathering some input
06:05 - from the user and then using it
06:07 - afterwards in our program however just
06:09 - displaying a name isn't very exciting
06:11 - let's instead try having the user input
06:13 - two numbers and then multiplying them
06:16 - and showing the result so to do that I'm
06:18 - gonna go ahead and get rid of this code
06:20 - and I'm actually going to start out by
06:22 - creating some variables now I'm gonna
06:23 - make an integer here that means a whole
06:26 - number and I'm gonna call it number one
06:29 - it's okay to have a numerix inside of a
06:32 - variable name as long as you start with
06:33 - a letter so this is totally fine so
06:35 - number one and we could go ahead and set
06:38 - this equal to some numbers
06:40 - five however we want the user to input
06:43 - this so what we're going to do instead
06:45 - is actually not set it equal to anything
06:47 - just put a semicolon here this is called
06:50 - declaring a variable because we're
06:52 - creating a variable but we are not
06:54 - assigning it a value yet and I'm
06:56 - actually going to do that for our second
06:58 - number as well so let's create an INT
07:00 - again let's call it num2 and just put a
07:03 - semicolon as you can see we're currently
07:05 - getting a yellow underline on these two
07:07 - variables and that's because if we hover
07:09 - over them it says that they're declared
07:11 - but they're never used so let's go ahead
07:14 - and use them to do that let's first
07:16 - prompt the user to input a number so
07:18 - let's go consul start right and I'm
07:21 - actually just going to type right here
07:23 - instead of right line this way we can
07:24 - input a number on the same line that
07:26 - we're asking the user to do so this
07:28 - looks a bit cleaner we'll see that in a
07:30 - sec so console dot right and I'm going
07:33 - to tell the user to input a number and
07:36 - I'm gonna put a space here so that's the
07:38 - space between this line and the number
07:40 - that we're inputting and semicolon for
07:42 - that and then we can set our number one
07:45 - so num one variable we set that equal to
07:48 - console dot read line just as we did
07:52 - with our name however as you can see
07:54 - this is giving us a red line and if we
07:57 - hover over it it says that it cannot
07:59 - implicitly convert type string to int
08:01 - what this means is that whenever we read
08:04 - a line from the user
08:05 - these two could really input anything on
08:07 - the keyboard it could be signs text or
08:09 - numbers and so by default when we read a
08:12 - line it's of type string and our number
08:14 - one variable is of type int so we want
08:17 - to go ahead and convert from a string to
08:19 - an integer and we can do that using the
08:22 - convert class so before this line I'm
08:25 - gonna write convert and as you can see
08:27 - we can convert to a bunch of different
08:29 - types here I'm gonna use the to end and
08:32 - again there are some different versions
08:34 - here and that's just because we can have
08:36 - integers of different bit lengths so the
08:39 - standard sort of say is the 32-bit
08:41 - integer and the only difference between
08:43 - these is how much memory they're taking
08:46 - up and in other words how large a number
08:48 - can they actually store so in our case
08:50 - we don't need to store incredibly large
08:52 - numbers so
08:53 - 32 is going to be just fine so I'm going
08:55 - to use 2 in 32 and then because this is
08:58 - a function we need to open a parenthesis
09:00 - and we don't actually want to close it
09:03 - here instead we want to input into this
09:05 - parenthesis here console dot readline
09:07 - because that's what we want to convert
09:09 - and then we're going to close it over
09:11 - here so in other words what we're doing
09:13 - here is we're asking the user to type in
09:14 - a number we're then saying well we want
09:17 - our number 1 to be equal to whatever we
09:19 - pass in and then we make sure to use a
09:22 - convert function to convert that to an
09:24 - integer so that it fits with our
09:26 - variable type I completely understand if
09:28 - that's a bit overwhelming it was for me
09:30 - when I started out but don't worry
09:32 - you'll get the hang of it very soon and
09:34 - before we move on to the second number
09:35 - let's just try this out so I'm gonna hit
09:38 - f5 to start the program as we can see it
09:40 - asked me to input a number I'm just
09:41 - gonna put in 12 here and nothing
09:44 - visually happens but we know that we are
09:47 - now storing this variable this number 12
09:49 - here in our number 1 variable so let's
09:52 - go ahead and close this and let's do
09:54 - that for the second number as well so
09:56 - that we can multiply them together so
09:57 - let's do console dot right we're gonna
10:00 - say input a second number and then we're
10:04 - gonna set num2 equal to convert dot two
10:08 - and 32 and the thing that we want to
10:10 - convert is console dot read line and as
10:14 - you can see we're doing the exact same
10:16 - thing here and here I'm just changing
10:19 - the variable number and so to multiply
10:22 - these two numbers let's go down here and
10:23 - let's create a third variable again int
10:26 - and this is going to store it the result
10:28 - and we can simply set it equal to number
10:31 - one our first variable x number two our
10:35 - second variable and that's it the
10:37 - computer is now going to multiply these
10:39 - two values and we can show it just as
10:41 - easily by going console dot write line
10:44 - and saying the result is and then again
10:48 - we use the plus here to add the result
10:51 - on to this string and if we run this now
10:54 - we can type in a number I'm gonna put in
10:55 - 12 let's type in a second number I'm
10:57 - gonna put in five and indeed the result
11:00 - is 60 really really cool so we've
11:03 - actually now created a simple calculator
11:06 - but kearney
11:07 - this only works with whole numbers if I
11:09 - were to run this program again and
11:10 - inputs a 1.5 it's going to throw us an
11:14 - error because 1.5 is not a whole number
11:17 - and we are using integers so let's stop
11:20 - this program from running and to fix
11:22 - this we can simply change the type of
11:23 - our variables from int to say float to
11:27 - store a decimal number or if you wanted
11:28 - to be really precise we can use the
11:30 - double actually in our case let's just
11:32 - do that so let's change these two
11:35 - variable types to double instead of
11:37 - converting to an int 32 we want to
11:39 - convert to a double here so we simply
11:41 - change this to convert to a double and
11:44 - let's do that here as well so to double
11:46 - and then finally the result as well we
11:49 - also want that to be a double and indeed
11:51 - if we now run our program again let's
11:53 - input a number let's do 4.5 and a second
11:56 - normal let's do 2.5 and indeed the
11:59 - result is 11 point two five awesome so
12:02 - now we can actually do really accurate
12:03 - calculations with decimal numbers and if
12:06 - you want to change this to say divide
12:08 - instead of multiply we simply go into
12:10 - where we calculate the result here and
12:12 - instead of inputting a multiply sign
12:15 - here we use a slash for division and
12:18 - again if we run that we can say divide
12:20 - five by two and the result is two point
12:23 - five awesome now I of course want to
12:25 - give you a challenge to complete before
12:27 - the next video this challenge is going
12:29 - to be to take the average of three
12:31 - numbers see if you can do this in code
12:33 - by having the user input three different
12:35 - numbers then the program can calculate
12:37 - the average and write it in the console
12:39 - remember that to find the average of
12:42 - three numbers we first add them together
12:44 - so number one plus number two plus
12:47 - number three and then we take the result
12:50 - of this sum here and divide it by three
12:52 - so we take the result of that and divide
12:55 - by three that gives us the average of
12:58 - course I'll make sure to post my answer
12:59 - to the challenge on the practice firm in
13:01 - case you want to have a look at how this
13:03 - can be done that's of course anything
13:04 - for that in the description but I
13:06 - recommend you try it out yourself first
13:08 - so good luck and have fun that's pretty
13:10 - much it for this video if you enjoyed it
13:12 - make sure to subscribe and bring that
13:13 - notification Pelzer don't miss the next
13:15 - one also don't forget to check out
13:17 - Miller node again it's free and a great
13:19 - way to organize your projects
13:20 - exhibiting in the description to get
13:22 - started on that thanks for watching and
13:24 - I will see you in the next video thanks
13:26 - to all of the awesome patreon supporters
13:27 - who donated in May and especially thanks
13:29 - to face Samara fire lost to violence
13:31 - love forever replicas studios Navi ninja
13:33 - SRT Mike Jason arretez COO Luna said P&O
13:37 - satin black donut in Cascone tanta Sam
13:39 - Jacob Sanford no Kiawah sake mug Antoine
13:41 - Gerard
13:42 - Gregory Pierce Michael Cobb of the
13:44 - mighty Stu's Owen Cooper
13:45 - as in the Pierce Erasmus and serious
13:47 - warning you guys Rock