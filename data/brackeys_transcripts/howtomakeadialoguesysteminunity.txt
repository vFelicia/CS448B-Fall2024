00:00 - dialogue can be a great way to add
00:01 - character to a game and introduce humor
00:04 - this video will have a look at how to
00:05 - create a simple dialogue system from
00:06 - scratch and will design it in such a way
00:08 - that you can easily expand upon it to
00:10 - suit your needs also on a completely
00:11 - unrelated note Sophia and I were on a
00:14 - podcast it's called game dev Unchained
00:16 - it's super cool go check it out if you
00:17 - want to learn more about the making of
00:19 - Brett keys and the game industry in
00:20 - general there's a link in the
00:21 - description also thanks to hands off
00:23 - tuned for his support on patreon alright
00:24 - let's get started so it's the theme
00:26 - we're going to be working with have a
00:27 - canvas with a dialog box this is just a
00:30 - simple image and under here I have two
00:32 - text objects one for the NPCs name one
00:35 - for the dialogue and then I have a
00:37 - continue button this is all made from
00:39 - the standard UI tools the only thing I'm
00:41 - using is a custom font that'll be a link
00:43 - to where you can download that in the
00:44 - description also in the background here
00:46 - I have some sprites from the 2d mega
00:47 - pack I'll have a link for that as well
00:49 - now above our dialog box I have a button
00:52 - this is just here for testing purposes
00:54 - and will allow us to trigger a new
00:55 - conversation to begin our dialogue
00:57 - system that's right click in the project
00:59 - panel go create and choose C sharp
01:01 - script and let's call this our dialogue
01:03 - manager we can also create an empty
01:06 - object in the hierarchy
01:07 - reset the transform call this one
01:09 - dialogue manager as well and drag our
01:12 - script on to that let's then drag our
01:15 - object to the top so that we can always
01:16 - see it if we now double click our script
01:18 - to open it up in visual studio we can go
01:20 - ahead and delete our update method and
01:22 - right above our start method we want to
01:24 - add a very central variable we want to
01:27 - add the variable that will keep track of
01:29 - all of the sentences in our current
01:31 - dialogue so right off the bat you might
01:33 - think well let's go and create a public
01:35 - string array remember an array is
01:38 - basically just a list of objects and so
01:40 - this here could be a list of text
01:42 - elements we then call it something like
01:43 - sentences and close that off and we
01:46 - could definitely do this using an array
01:48 - but there is actually a data type that
01:50 - is much more fitting for what we want to
01:52 - do this data type is called a queue in
01:55 - order to use a queue make sure that
01:57 - you're using the system duck collection
01:59 - namespace a queue works in many ways
02:01 - like a list except it's a bit more
02:03 - restricted it's what we call a FIFO
02:06 - collection FIFO stands for first in
02:09 - first out so when we go ahead and load a
02:12 - new die
02:12 - we'll put all of the sentences that we
02:15 - want to display into this queue and then
02:17 - as the user reads through the dialog
02:18 - we'll simply load new sentences from the
02:20 - end of the queue now it's good practice
02:22 - here to define a type far queue and
02:24 - that's going to be of type string so
02:26 - we'll make a queue of strings and in our
02:28 - start method here we'll just go ahead
02:29 - and initialize it so let's set sentences
02:31 - equal to a new queue of type string and
02:36 - we actually don't need this variable to
02:37 - be public let's make it private instead
02:40 - so now that we have our queue of
02:42 - sentences let's go ahead and define a
02:44 - non-dairy object let's right-click in
02:46 - the project panel go create c-sharp
02:48 - script and let's call this object
02:50 - dialogue now basically we are going to
02:52 - be using this dialogue class as an
02:55 - object that we can pass into the
02:56 - dialogue manager whenever we want to
02:59 - start a new dialogue and so this class
03:01 - will host all information that we need
03:03 - about a single dialogue that also means
03:06 - that we don't need this to derive from
03:08 - monobehaviour because we don't want it
03:10 - to sit on a script and we can also go
03:12 - ahead and delete or two methods instead
03:14 - we want to create a public string array
03:17 - which is going to be the sentences that
03:19 - we will load into our queue so we'll
03:22 - call this one sentences and we can also
03:24 - maybe put a name of the NPC that we're
03:26 - talking with so let's create a public
03:28 - string called name now remember whenever
03:31 - we create a class like this and want it
03:33 - to show up in the inspector so that we
03:35 - can edit it we need to mark it as
03:37 - serializable to do that we go to the top
03:39 - of our class and add an attribute called
03:42 - system dot serializable now we can save
03:45 - this and if we then go into unity not
03:47 - much should happen because we've only
03:49 - created this object but we haven't
03:50 - really implemented it anywhere and so we
03:53 - can't physically edit these properties
03:55 - so let's go ahead and create a third C
03:57 - subscript and this is going to be our
03:59 - dialog trigger you would also call this
04:01 - NPC or interactable or even story
04:05 - element I'll just stick to the generic
04:07 - name now this group is going to sit on
04:09 - an object and will allow us to trigger a
04:11 - new dialogue so for the purpose of this
04:14 - video let's put it on the test button
04:15 - let's drag in our dialogue trigger and
04:17 - let's open it up let's delete the two
04:19 - methods and let's create a public and
04:22 - now instead of using a normal data type
04:24 - we'll be using the one that we just
04:26 - I did the dialogue class and we'll just
04:29 - call it dialogue with a non-capital B
04:31 - but when we save this in hidden to unity
04:33 - voila we now have a dialogue variable
04:35 - where we can put in a name I'm going to
04:37 - put in Dwayne Johnson and we can also
04:39 - add as many sentences as we would like
04:42 - I'm going to add three here and now we
04:44 - have three text fields however we could
04:46 - easily make these text fields a bit
04:48 - nicer I don't feel there's enough space
04:50 - here to add long sentences to make this
04:52 - nicer we'll go into the dialogue class
04:54 - and right above the sentences variable
04:57 - we'll add another attribute this one is
04:59 - going to be the text area and inside
05:02 - some parentheses we'll specify two
05:04 - variables the first one being the
05:06 - minimum amount of lines the text area
05:07 - will use and the second one being the
05:10 - maximum if we now save that and navigate
05:13 - back into unity we can see three nice
05:15 - text area boxes that we can use so I'm
05:18 - just going to fill in a quick
05:19 - conversation now here I'm just
05:23 - pretending to be a single NPC if we
05:25 - wanted we could put as many dialogue
05:27 - triggers in our game as we wanted to we
05:29 - could simply go and create another empty
05:31 - object we could call this one Linda put
05:33 - a dialogue trigger on her give her a
05:36 - name and some sentences to speak and so
05:38 - this makes it really easy to publish
05:40 - your game with different pieces of
05:41 - dialogue let's just leave then the for
05:44 - now and stick to our test button now of
05:45 - course we currently only have this
05:47 - variable we also need some way to feed
05:49 - this to a dialogue manager to do that
05:51 - let's open up our dialogue trigger let's
05:53 - create a public method of type void
05:55 - let's call it trigger dialogue and in
05:58 - here we simply want to locate our
06:00 - dialogue manager the best way to do this
06:02 - would be using a singleton pattern but I
06:04 - don't want to get into explaining those
06:05 - in this video
06:06 - I'll have a link in the description if
06:08 - you want to learn about them we'll just
06:09 - be using find objects of type the type
06:12 - of object we want to find is the
06:13 - dialogue manager and now that we found
06:16 - this object we can go ahead and call it
06:18 - function on it and we haven't made this
06:20 - function yet but let's just call it
06:21 - something like start dialogue we can
06:24 - then give it a function argument to tell
06:26 - it what conversation to start and we can
06:28 - simply pass in our dialogue variable now
06:31 - if we save this and go into our dialogue
06:33 - manager we can go ahead and add this
06:35 - method so let's create a public void
06:37 - called start dialogue
06:40 - let's have it taken a dialogue object
06:42 - and let's just call that dialogue as
06:44 - well and then inside the method we can
06:47 - go ahead and write debug deadlock
06:49 - starting conversation with and then add
06:53 - dialogue dot name then after this of
06:57 - course we want to go ahead and load in
06:58 - all of our sentences want to update the
07:00 - UI and everything like that but now we
07:02 - should actually see that if we call
07:04 - trigger dialogue on the dialogue trigger
07:06 - script it's going to start a
07:08 - conversation of course there's a million
07:10 - different ways to trigger dialogue you
07:12 - could call the function when the player
07:13 - gets inside of a certain radius you
07:15 - could call it when he discovers an
07:16 - object maybe when he starts the game or
07:19 - lucid on our case we'll just call it
07:21 - when he presses start conversation let's
07:23 - go to the button here let's add an
07:25 - onclick event
07:26 - let's drag in our dialogue trigger let's
07:28 - go under the dialogue trigger and find
07:30 - the trigger dialogue function now when
07:33 - we'd play hit start conversation it says
07:35 - starting conversation with Dwayne
07:37 - Johnson awesome so now on to scripts are
07:40 - communicating but we still need to load
07:42 - in all of our sentences to do that we
07:44 - first want to clear any sentences that
07:45 - were there from a previous conversation
07:47 - to do that we called clear on this
07:50 - sentences cue we then go through all of
07:52 - the strings in our dialogue that
07:54 - sentences array let's write for each
07:57 - string and we'll call each sentence
07:59 - sentence in dialogue sentences we want
08:04 - to queue up a sentence so let's go
08:06 - sentences god and cue and we'll just put
08:09 - in the sentence that we're currently
08:10 - looking at so after looping through all
08:12 - the sentences in our dialogue and adding
08:14 - them to our cue well then we want to
08:17 - display the first one so let's make some
08:18 - kind of method called display next
08:21 - sentence we'll also make this a public
08:24 - method so that we can call it from our
08:26 - continue button let's call it display
08:28 - next sentence and first we want to check
08:31 - if there even is more sentences in the
08:34 - queue so we go if sentences dot count is
08:39 - equal to zero this is true we have
08:41 - reached the end of our queue and we can
08:43 - go ahead and end our dialogue let's
08:45 - create a method called
08:46 - end dialogue and it's also just returned
08:50 - out of the rest of the function let's
08:52 - quickly create our in dialogue
08:54 - function and for now we can just put
08:58 - debug the large end of conversation
09:01 - however in the case that we still have
09:04 - sentences left to say well then we want
09:06 - to get the next sentence in the queue by
09:08 - going sentences dot DQ and we can store
09:11 - this in a string variable called
09:13 - sentence and for now let's just debug
09:16 - log that sentence so when we save this
09:20 - head into unity hit play and then hit
09:22 - start conversation we can see it's a
09:24 - starting conversation with Twain and
09:26 - then the first sentence is loaded hey
09:28 - there my name is Dwayne and then of
09:30 - course we need to be able to skip to the
09:32 - next line we want to do that using the
09:34 - continue button but we first need to
09:36 - hook that up let's go on to our dialogue
09:37 - box let's find the continue button let's
09:40 - add an onclick event
09:41 - let's drag in our dialogue manager
09:43 - that's called the dialogue manager
09:45 - display next sentence function and now
09:48 - when we hit play start the conversation
09:50 - and hit continue we can see that it
09:52 - shows the next line I mean to guide you
09:55 - through your dangerous adventures and
09:56 - wake you up in the morning of course and
09:58 - when we continue past all of our
10:00 - sentences it says end of conversation so
10:03 - now we have a fully working dialogue
10:05 - system all that's left is updating the
10:07 - UI to show it and this is the easiest
10:09 - part we simply need a few references to
10:11 - UI elements let's go up here and say
10:13 - using unity engine dot UI will then
10:18 - create two public text variables the
10:20 - first one is going to be our name text
10:23 - and the second one is going to be our
10:25 - dialogue text then when we display the
10:28 - next sentence instead of showing it in
10:30 - the console will go dialogue text dot
10:33 - text equals the sentence and right when
10:37 - we start the dialogue we can set the
10:39 - name so let's go name text dot text
10:43 - equals dialogue dot name and we can get
10:47 - rid of the debug log now let's say that
10:50 - go into our dialogue manager drag in the
10:53 - name text and the dialogue text hit play
10:56 - start a conversation and voila our text
10:59 - objects appropriately update but we
11:01 - still need our dialogue manager to
11:03 - animate in and out to do that let's use
11:06 - a simple animator
11:07 - let's select our dialog box let's go to
11:09 - the animation tab or go window animation
11:12 - let's hit create we want to add an
11:14 - animation called dialog box and we'll
11:17 - create two states one for when it's open
11:20 - and one for when it's closed let's begin
11:23 - by creating the open state we want to
11:25 - make sure to hit record and let's insert
11:27 - a keyframe on the Y here so just copy
11:29 - the current value move it slightly and
11:31 - paste the value back in and now you can
11:33 - see it's red here and it's added a
11:35 - keyframe we then create another clip
11:37 - this one is going to be the dialogue box
11:39 - close let's leave that here we also want
11:43 - to make sure to hit record and now we
11:44 - want to move it below the screen let's
11:46 - create and drag while holding down shift
11:48 - to only move it on one axis and there we
11:50 - go now it's out of slide so now we can
11:52 - stop recording we can go into our
11:54 - animator
11:56 - this is window animator and you can see
11:58 - in here that we have two states the
12:00 - dialog box open and the dialogue box
12:03 - close first off we want to make the
12:05 - close state the default state so let's
12:07 - right-click and go set as layer default
12:09 - state we're going to go up here and make
12:11 - sure that we under the parameters tab we
12:13 - can add a new parameter let's make it of
12:15 - type pool and let's call it is open this
12:18 - value is going to determine whether or
12:20 - not our dialog box is currently open
12:22 - when then right-click on a closed state
12:23 - hit make transition click on our open
12:26 - state let's also make one the other way
12:29 - on our transition from closed to open
12:31 - let's make sure to add a condition this
12:34 - will make sure that we will only
12:35 - transition to open if the it's open
12:37 - parameter is two and we also want to
12:39 - make sure to disable heads exit time so
12:42 - we want wait for the current animation
12:43 - to play out before transitioning on the
12:46 - way back we can do the same thing slow
12:49 - we don't want it to have exit time and
12:51 - the condition will be is open but this
12:53 - time we want it to be false now in order
12:56 - to control this animation we need a
12:57 - reference to the animator component that
13:00 - is automatically created on a dialog box
13:02 - so let's go inside of our dialog manager
13:05 - let's go to the top and add a public
13:07 - animator let's call it animator then
13:11 - when we start the dialog we can go here
13:13 - to the very top and say animator
13:15 - dot set bowl the bowl that we want to
13:19 - set is the is
13:20 - open parameter and we want to set it to
13:22 - true because we are starting a new
13:24 - dialogue let's copy this same piece of
13:27 - code and paste it in the end dialog
13:29 - function and this time of course we want
13:31 - to set it to false now when we save this
13:34 - and go to our dialogue manager we now
13:36 - have a slot for the animator now this
13:39 - it's on my dialogue box object so I'll
13:41 - just drag that in there let's hit play
13:43 - and you can see by default our dialog
13:45 - box pops out of the way when we then
13:48 - start a conversation it eases onto the
13:50 - screen and if we go through and end it
13:53 - it slides back down finally to add the
13:56 - last bit of polish we can have these
13:57 - letters in our sentences and made one by
13:59 - one onto the screen to do that let's go
14:02 - inside of our script and instead of just
14:04 - updating the dialogue text directly
14:05 - let's create a code team that will do
14:08 - this for us let's write I enumerator
14:11 - we'll call this type sentence and we'll
14:15 - give it a string the descendants to type
14:17 - first off we want to set our dialogue
14:19 - text text equal to an empty string then
14:23 - we want to loop through all of the
14:24 - individual characters in our sentence to
14:27 - do that we use a for each and we want to
14:29 - loop through each character which we'll
14:31 - call the letter in sentence dot to char
14:36 - array to char array is a handy function
14:39 - that will convert a string into a
14:40 - character array and so here we're just
14:42 - looping through each character and the
14:44 - character that we're currently looking
14:46 - at is called letter so now we can simply
14:48 - add our letter onto the dialogue text
14:50 - one by one
14:51 - let's go dialogue text text right plus
14:55 - equals letter this will append our
14:57 - letter to the end of the string and
14:59 - after each letter we'll wait a small
15:01 - amount of time I'm just going to wait a
15:03 - single frame
15:03 - so let's write yield return null all
15:06 - that's left is to call this co-routine
15:08 - we'll do that up here to call it will
15:12 - write start co-routine the co-routine
15:14 - that we want to start is type sentence
15:16 - and we want to make sure to pass in the
15:18 - sentence to type also there is the
15:21 - possibility that the user will start a
15:23 - new sentence before the previous one has
15:25 - finished animating in that case we want
15:27 - to make sure that it stops animating
15:28 - before we start animating the new one to
15:31 - do that we'll call the stop all
15:33 - co-routines
15:34 - function let's make sure that if type
15:36 - sentence is already running it will stop
15:38 - doing so and then we can start a new one
15:40 - so let's now save this and let's hit
15:43 - play inside of unity now we start a
15:45 - conversation and voila the letters are
15:48 - animating onto the screen that's pretty
15:50 - much it for this video if you enjoyed it
15:51 - make sure to subscribe so you don't miss
15:53 - the future one and make sure to check
15:54 - out game dev Unchained
15:55 - also we've been more active on Twitter
15:57 - lately so make sure to follow us at
15:58 - brackets three aren't that thanks for
16:00 - watching and I will see you in the next
16:01 - video thanks to the awesome patreon
16:03 - supporters who donated in June and a
16:05 - special thanks to hands often yes by
16:07 - Mickelson will code Thomas Wally stone
16:09 - gamer
16:10 - Sybok mommy Jason Lotito Derek James
16:13 - Kirk and face of Merrifield if you want
16:14 - to become a picture in yourself you can
16:16 - do so at patreon.com slash practice