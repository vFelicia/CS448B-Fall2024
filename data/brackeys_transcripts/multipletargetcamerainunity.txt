00:00 - in this video we'll make a camera that
00:01 - follows around multiple targets also
00:03 - make the camera zoom in and out to fit
00:05 - the players this video is sponsored by
00:06 - udemy udemy is an awesome site for
00:08 - learning new skills and they have some
00:10 - really cool courses on game development
00:12 - in fact they just launched a unity
00:14 - course that is made in collaboration
00:15 - with unity themselves the course is
00:18 - called the ultimate guide to game
00:19 - development with unity and will take you
00:21 - from complete beginner to having a solid
00:23 - understanding of the engine as well as
00:25 - programming in C sharp the course also
00:27 - includes over 30 interactive challenges
00:30 - that will help you build both a 2d
00:32 - Galaxie shooter and a 3d first-person
00:34 - game and to make things even better the
00:36 - course tutor is a good friend of mine
00:38 - Jonathan Weinberger so to get started
00:40 - simply click the link in the description
00:41 - and get a discount along the way also
00:43 - special thanks to Judy Minh Arman
00:45 - DeRussy and infinity PBR for their
00:48 - support on patreon and with that let's
00:50 - get started so here I have a scene with
00:52 - two players that I can move around but
00:54 - currently the camera is completely
00:56 - static if I select it you can see I have
00:58 - nothing on here other than some color
01:00 - correction so let's fix this by making a
01:02 - new script that's it a component we call
01:04 - it multiple target camera let's hit new
01:08 - script C sharp and hit create an ad and
01:10 - let's double click it to open it up in
01:12 - visual studio now first let's remove our
01:14 - two methods to make some space and the
01:16 - very first thing we need is a list of
01:18 - all the targets that we want to follow
01:20 - so we'll create a public list of
01:22 - transforms and we'll call it our targets
01:25 - then we of course need to update the
01:27 - position of our camera according to
01:29 - these targets and we want to do that
01:31 - inside of the update method because we
01:33 - want to do it each frame however I don't
01:35 - want to use the ordinary update because
01:37 - that's also what I use for moving around
01:39 - the players instead what I want to use
01:41 - is late update this function is called
01:44 - in the exact same way as update but
01:46 - right after which makes it great for
01:48 - camera movement because our camera will
01:50 - only move after everything else has so
01:52 - inside this method we want to move our
01:54 - camera normally we do that by simply
01:56 - saving our cameras position equal to our
01:59 - targets position but in our case we have
02:01 - multiple targets
02:02 - so what position should we use the
02:04 - answer is that we want to set our
02:06 - cameras position to the center of all of
02:08 - the targets to do that will create a
02:10 - vector3 call it our center point and
02:13 - equal to a new method that will create
02:15 - cold get center point I will create that
02:19 - down here it's going to return a victor
02:21 - three we're going to call it get center
02:23 - point and it's not gonna have any
02:26 - arguments now first we want to check if
02:27 - the amount of targets we have is only
02:29 - equal to one in which case we don't need
02:31 - to do any calculations to find the
02:33 - center it's simply going to be the first
02:35 - targets so targets zero positions of dot
02:38 - position however if we have multiple
02:40 - targets we don't know their Center
02:42 - beforehand the way to find this out is
02:44 - by using something unity calls
02:46 - bounce bounce is a class in unity that
02:48 - we can use to encapsulate multiple
02:50 - objects if that sounds confusing to you
02:52 - try and further along so imagine we have
02:54 - three players and we want to create a
02:56 - box around these three players well for
02:59 - this we can use unity bounce if we add
03:01 - an object to this bounce class unity
03:03 - will automatically create a square to
03:06 - surround him as we add more objects
03:07 - unity will resize this square to fit
03:09 - them the cool thing about this is that
03:11 - the center of this box will always be
03:13 - the center between the objects and so
03:15 - this dot here will be where we want our
03:17 - camera to point to create this box
03:19 - through code we go bar
03:21 - bounds and set it equal to a new bounds
03:24 - and here we just want to start off our
03:26 - Bucks at the center of our first target
03:28 - and with the size of zero so vector 3.0
03:31 - we can then loop through all of our
03:33 - targets so for int I equals zero as long
03:36 - as I is less than target's dot count in
03:39 - other words for each target we want to
03:41 - encapsulate this target so bounds that
03:44 - encapsulate and this will resize the box
03:46 - to now fit the new target so we'll feed
03:49 - in targets I dot position I'll close
03:52 - that off and then to get the center
03:54 - point we can simply return bounce dot
03:56 - Center and it will do all the
03:58 - appropriate calculations for us really
04:00 - really cool so now inside of our late
04:02 - update we have the center point of our
04:04 - objects and we could now go ahead and
04:05 - set transform that position equal to
04:08 - this center point directly but instead
04:10 - we probably want to offset our position
04:12 - a bit there's a good chance that we want
04:14 - to pull it back a little bit in order to
04:15 - view more of the scene and we might also
04:17 - want to adjust the height of our camera
04:19 - too this will create a variable will
04:21 - create a public vector three and we'll
04:23 - call it offset and then before we set
04:25 - our position will create a
04:27 - the vector3 we'll call it our new
04:29 - position and set it equal to center
04:31 - point plus our offset then when we set
04:34 - our position we said transformed up
04:35 - position equal to our new position and
04:38 - now our camera should actually follow
04:39 - around our players however if our
04:41 - targets happen to be zero we'll probably
04:43 - get an error so just at the top of our
04:45 - late update we'll make sure to check if
04:47 - targets dot count is equal to zero we'll
04:51 - simply return and not do anything let's
04:53 - now save this and hit into unity and you
04:56 - should now see both a list of targets
04:57 - and an offset if we go ahead and hit
04:59 - play of course at first nothing will
05:02 - happen here but if we now go and drag in
05:04 - player one to a list of targets you can
05:06 - see that our camera snaps immediately to
05:08 - his position we then used the offset to
05:11 - pull our camera back on the Z here I'm
05:13 - gonna pull it all the way up to around
05:15 - 50 as well let's pull it up a little bit
05:17 - so on the Y here I'm gonna erase it and
05:19 - our camera now follows around player 1
05:21 - to also make it follow around the other
05:23 - player will it take player 2 and drag it
05:25 - into a list of targets and boom it's now
05:27 - going to follow the center of our two
05:29 - players so when I move our two players
05:31 - our camera will move with them let's
05:33 - copy these values so right click copy
05:35 - component exit play mode and paste them
05:38 - back in great so now our movement is
05:40 - working but it doesn't look that good
05:42 - yet that's because we want to add in
05:44 - some smoothing in order to make things
05:45 - feel more fluent to do that in our
05:47 - script whenever we set our position
05:49 - instead of just setting it equal to our
05:51 - new position directly we'll use vector 3
05:54 - dot smooth tamp this is a function in
05:56 - unity that allows you to smooth out
05:58 - movement and this takes in a couple of
06:00 - arguments first we want to give it our
06:02 - current position we then want to give it
06:03 - our target position which is our new
06:05 - position and we also want to give it a
06:07 - variable that it can use to keep track
06:10 - of our current velocity to do that we go
06:12 - to the top and create a private vector3
06:14 - called velocity now we don't need to
06:17 - edit this in any way it's only used by
06:19 - the smooth dam function and because
06:21 - we're not just feeding it the value of
06:22 - our velocity but instead want the
06:24 - function to modify it over time we use
06:27 - the keyword ref this stands for
06:29 - reference because we're referencing this
06:31 - variable so that the function knows
06:33 - where it is and then we'll write
06:35 - velocity finally we want to specify a
06:38 - smooth time let's go to the top here and
06:40 - create a
06:40 - public float called smooth time until it
06:44 - equal to something like 0.5 let's now
06:46 - feed it in down here and close it off
06:48 - and if we now save this go into unity
06:50 - and play we can see that our camera
06:53 - moves much much smoother and it's
06:55 - already starting to feel really good but
06:58 - there's something missing
06:59 - whenever the players are close to each
07:01 - other there's no reason to be this
07:03 - zoomed out we want to get as close to
07:05 - the action as possible so let's make our
07:07 - chemists seem in and out according to
07:09 - our players positions you can of course
07:11 - do this by simply moving the camera on
07:13 - the z axis but I think a much nicer
07:15 - effect is if we go to the camera and
07:17 - adjust the field of view through script
07:20 - now notice with the field of view as I
07:22 - increase it it zooms out and as I
07:24 - decrease it it seems in so now inside of
07:27 - our script let's take all of our
07:28 - movement code let's cut it and let's
07:30 - move it into a separate function void
07:32 - called move and let's paste the code
07:35 - here we then simply call move from
07:38 - inside of our late update that looks a
07:39 - lot cleaner and right next to this we
07:41 - can call zoom so again we want to go
07:43 - void zoom and now we can put all of our
07:47 - Suman code in here now the first thing
07:49 - that we need for this is a public float
07:52 - with our minimum zoom distance let's set
07:55 - this to a fill the view of 40 will also
07:57 - create a public float with our Mac zoom
08:00 - and that set this to a field of view of
08:02 - 10 now in order to do the actual
08:04 - assuming we need to figure out when we
08:06 - want to zoom in and when we want to zoom
08:08 - out and I found the best way to
08:10 - determine this is by using the greatest
08:12 - distance between the players so if we
08:14 - again have a look at our three players
08:16 - they all have a distance between them
08:19 - but one of these distance is greater
08:21 - than the others if we always take the
08:23 - greatest distance between the players
08:25 - will know how much to zoom out in order
08:27 - to fit all of them on the screen and in
08:29 - fact we can still use bounds to
08:30 - calculate boxes around our players but
08:33 - this time instead of getting this Center
08:34 - we simply want to get the width of the
08:37 - box so to do that through code let's
08:39 - create a function called get greatest
08:42 - distance and for now we can just show
08:44 - this value in the console so debug
08:46 - deadlock get greatest distance and of
08:49 - course we can create that method down
08:50 - here so this is going to return a float
08:52 - we'll call it get gray
08:54 - distance and again we want to create a
08:57 - variable called bounce and set it equal
08:59 - to a new bounce here we want to feed it
09:01 - our targets zero dot position and give
09:05 - it a size of 0 just like we did down
09:08 - here and again we want to go for and
09:10 - loop through each of the elements that
09:12 - will continue as long as I is less than
09:14 - target start count and for each of them
09:16 - we want to tell our bounding box to
09:18 - encapsulate the target the only thing
09:22 - that's different is that instead of
09:24 - returning bounce dart Center we simply
09:27 - want to return the width of the box so
09:29 - we'll go bounce dot size dot X and there
09:33 - we go so now if we save this go to unity
09:36 - and hit play you can see that it shows
09:38 - the distance between our players as I
09:41 - get closer to the other player it
09:43 - shrinks and as I get further away it
09:45 - grows and the cool thing about this is
09:47 - that if we go ahead and add a third
09:49 - player and remember to add him to our
09:52 - list as well you can now see that it
09:54 - shows the distance between our leftmost
09:56 - and rightmost player so if I move my
09:58 - player in the middle here nothing
10:00 - happens
10:00 - not until I cross one of the other
10:02 - players in which case the value starts
10:04 - changing pretty cool right so now that
10:06 - we have this value we can use it to
10:08 - determine our zoom to do that we'll
10:10 - create a float called our new zoom and
10:13 - we'll set it equal to math dot Lert so
10:16 - this method linearly interpolate between
10:17 - two values depending on a third value so
10:21 - we want to go between our max zoom and
10:23 - our minimum zoom depending on our you
10:26 - guessed it greatest distance however do
10:29 - note that the third value here normally
10:31 - goes between zero and one zero meaning
10:33 - maqsuum and one meaning minimum zoom and
10:36 - the distances in my game is normally
10:39 - around one and fifty so we definitely
10:41 - need to divide this by around 50 let's
10:44 - also make a variable of this so let's go
10:46 - to the top here and write public float
10:48 - and we can call this something like zoom
10:49 - limiter I will write that down here then
10:53 - finally we need a reference to our
10:55 - camera to do that we'll go to the top
10:57 - and create a private camera variable
11:00 - let's call it cam we can then create a
11:02 - start method where we'll set cam equal
11:05 - to get component of type camera
11:07 - and just to make sure that there's
11:09 - always a camera where this script is
11:11 - sitting we can go to the top here and
11:13 - require component of type camera and now
11:16 - down here in our still method we can set
11:18 - cam dot feel the view equal to our new
11:22 - zoom and just like we don't want to set
11:25 - our position directly but instead we
11:26 - want to smooth it we also want to smooth
11:29 - out our field of view so here we can use
11:31 - math dot lubricant to smooth it out we
11:35 - want to go between our current field of
11:37 - view so cam that feel the view and our
11:39 - new field of view so our new zoom and we
11:42 - want to do this based on time delta x so
11:45 - now it should smooth out our assuming
11:47 - and if we save this go into unity and
11:49 - full screen this we should see that our
11:52 - camera zooms in and out as our players
11:54 - get closer together in fact if I go
11:57 - ahead and cram all of them into the
11:59 - closed space here it will zoom all the
12:01 - way down to a field of view of 10 and if
12:04 - I get really far from each other it's
12:06 - going to zoom all the way out to a fill
12:08 - the view of 40 and the super neat part
12:11 - of this script is that you can easily
12:12 - update your targets array at runtime so
12:15 - if you wanted to kill off player 3 all
12:17 - you need to do is simply remove him from
12:19 - the list and there you go the camera now
12:21 - completely ignores him yay
12:23 - so that's pretty much it for this video
12:25 - again definitely check out the ultimate
12:27 - guide to game development with unity
12:28 - simply click the link in the description
12:30 - to get a discount on that
12:31 - thanks for watching and I will see you
12:33 - in the next video text of the awesome
12:35 - patreon supporters who donated in
12:37 - November and especially thanks to Judy
12:38 - Minh Amanda rue C infinity PPR and soft
12:41 - tune cyber crime
12:42 - Derrick Eames Kirk Faisal Murphy James P
12:44 - Dan Evans Thomas Wally
12:45 - Superman the great John Beauregard Kolka
12:47 - brown Jason the Tito Alex Kirk Itsuki
12:49 - manulis James Rogers Robert pond Rob fan
12:52 - and Rasmus you guys Rock