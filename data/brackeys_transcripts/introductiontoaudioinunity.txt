00:00 - in this video we're going to have a look
00:01 - at adding audio to your game the first
00:03 - part of the video will be an
00:04 - introduction to audio in unity we'll be
00:06 - setting up an audio listener and
00:07 - adjusting some audio Source components
00:09 - to add sounds and then in the second
00:10 - part of the video I'll show you how to
00:12 - make an audio manager the audio manager
00:14 - makes it really quick and easy to add
00:15 - new sounds and play them through script
00:17 - I'll have a link where you can download
00:18 - it in the description but to those of
00:20 - you who are interested in how you can
00:21 - program the audio Source component we'll
00:23 - go through and make an audio manager
00:25 - from scratch all right let's get started
00:26 - so as you can see I have a project open
00:28 - this is shrinking Planet it's it's my
00:30 - newest ludum di submission and I've gone
00:32 - ahead and strupped it from all the audio
00:34 - so when we play the game now it should
00:35 - be totally silent so let's add some
00:37 - sounds the first thing we need when
00:39 - adding audio to our game is an audio
00:41 - listener the most common place for this
00:43 - is the camera if you select your main
00:45 - camera you'll probably see an audio
00:47 - listener there already if not you can
00:49 - always just go and add it by hitting add
00:51 - component and searching for audio
00:53 - listener all this component does is well
00:55 - listen for sounds that also means that
00:56 - the game object that you put your audio
00:58 - listener on will be the place from where
01:00 - you hear sounds in 3D that's why it's
01:02 - most commonly put on the camera the next
01:04 - thing we need is an audio Source if we
01:07 - go to any game object in our scene I'm
01:09 - just going to select the player we can
01:11 - go ahead and add a new component let's
01:13 - add the audio Source this component is
01:15 - responsible for playing an audio clip
01:17 - and that's also the first thing we have
01:18 - to specify I've gone ahead and imported
01:20 - a few audio clips Unity supports most
01:22 - file formats all of these are in MP3 if
01:25 - we click on any of them a few settings
01:27 - will appear you can squeeze some
01:28 - performance out of your audio by Miss
01:29 - Ming around with these I'll have a link
01:31 - in the description if you want to read
01:32 - more about that and if we go ahead and
01:33 - hit play we can have a
01:36 - listen so let's now select our player
01:38 - and drag in the car sound by default our
01:41 - audio source is set to play on awake so
01:43 - if we now hit play we should actually
01:44 - hear the
01:46 - sound awesome we have a bunch of ways we
01:48 - can configure this most important is the
01:50 - volume of our sound and the spatial
01:52 - blend this controls whether or not you
01:54 - want your sound to be played in 2D or 3D
01:56 - space if you select 2D it will always be
01:58 - played with the same volume in both
02:00 - speakers however if we slide it towards
02:02 - 3D the volume of the sound is going to
02:04 - depend on how close our audio listener
02:06 - is to the audio source and it's also
02:08 - going to factor in stuff like the
02:09 - doubler effect where sounds moving
02:11 - towards you are more High frequent and
02:13 - sounds moving away get pitched down so
02:15 - let's try and set this to 3D and have a
02:16 - listen I think that's a lot better for
02:18 - our game finally this sound should be
02:20 - looping and so I'm going to check off
02:22 - Loop now in my game I have meteors that
02:24 - crash down upon the planet and when they
02:26 - hit the planet I want them to make an
02:28 - explosion sound luckily I have set up in
02:30 - such a way that every time a meteor hits
02:32 - the ground it's going to spawn a crater
02:35 - object and so we can simply go ahead and
02:37 - find the prefab for this Creator add an
02:39 - audio source and I have a sound setup
02:41 - for this that's the meteor hit it sounds
02:43 - like this so we can simply drag that in
02:45 - make sure it's set to play on awake and
02:47 - here we're using the fact that play on
02:49 - awake means that the audio will play as
02:51 - soon as the object gets spawned in so if
02:53 - it's enabled right when the scene starts
02:55 - it's going to play right away but if it
02:56 - spawned in at a later point it's going
02:58 - to play at that point point and we
03:00 - definitely want this to be in 3D space
03:02 - but we might go for something like8 if
03:04 - we now hit play and wait for a meteor to
03:06 - come crashing we can hear the impact so
03:08 - you should now be able to go through and
03:10 - add audio sources to many of your game
03:12 - objects I've gone ahead and added one to
03:14 - the meteor as well this much like the
03:16 - car is set to play on awake and is set
03:18 - to Loop and it's just the sound of the
03:20 - meteor flying through
03:22 - air and so without any coding we've
03:24 - actually added a bunch of different
03:26 - sounds to our game however some sounds
03:28 - aren't tied to a particular game object
03:31 - an example of this could be the click
03:32 - sound you hear when you hover over a
03:34 - button or the game over voice you hear
03:36 - when your player dies as well as of
03:38 - course music there's a bunch of
03:40 - different ways to go about this you
03:41 - could go in and add a bunch of empty
03:43 - game objects with an audio Source on
03:45 - each and then through script access that
03:47 - component and cplay when necessary but I
03:49 - don't think that's very clean so I've
03:51 - come up with a simple audio manager that
03:53 - I use all the time I'm of course going
03:55 - to have a link to it in the description
03:57 - in case you don't want to code it for
03:58 - yourself but in case you're interested
03:59 - did here's how it's done so first let's
04:01 - go and create an empty game object let's
04:03 - reset the transform and let's call this
04:05 - one audio manager let's drag the game
04:08 - object to the top so we can always see
04:09 - it let's then hit add component and we
04:11 - want to add a component called audio
04:13 - manager it's going to be of type c and
04:15 - let's hit create an ad let's double
04:16 - click it to open it up in Visual Studio
04:18 - in the top here we can now delete the
04:19 - two using tags and instead write using
04:22 - Unity engine. audio many of the new
04:26 - audio features in unity are now wrapped
04:28 - inside of this namespace so it's a good
04:30 - idea to include it whenever you're
04:31 - working with sound now the main idea for
04:33 - this audio manager is to have a list of
04:35 - sounds where we can easily add or remove
04:37 - sounds as we go and each sound has some
04:40 - different properties it has an audio
04:41 - clip a volume and pitch setting the
04:43 - possibility to Loop and you can add
04:45 - stuff like volume and Pitch Randomness
04:47 - or spatial blend then when we start the
04:49 - game we go through the list and for each
04:51 - item we add an audio source with the
04:53 - appropriate settings then when we want
04:54 - to play a sound we simply call a play
04:57 - Method on the audio manager where we
04:59 - input the name of the sound that we want
05:00 - to play and the audio manager is then
05:02 - going to find the source with that name
05:04 - and play the sound this makes everything
05:06 - so easy to use so first we need a list
05:09 - of sounds but we want to control what
05:11 - data is stored in each sound and so
05:13 - let's go ahead and create a custom class
05:14 - called sound to do that we go inside of
05:16 - unity we go to the project and hit
05:18 - create C script and let's call this one
05:21 - sound we then double click it hit reload
05:23 - all and in here we again want to be
05:25 - using Unity engine. audio we also don't
05:28 - want this to Der from mono behavior and
05:31 - we want to delete the two methods the
05:33 - first thing we want is a reference to
05:34 - our audio clip so let's write public
05:36 - audio clip and let's call it clip we
05:39 - also want a volume let's write public
05:41 - float volume and a pitch public float
05:45 - pitch now we'll be adding some more to
05:47 - this as we go but this is the base of a
05:49 - sound class so if we save this we can
05:51 - now go into the audio manager and in
05:53 - here we create a public sound array and
05:57 - let's call it sounds now when we save
05:59 - that and go into unity and have a look
06:01 - under the audio manager we would expect
06:03 - a list to appear however it does not the
06:06 - reason why is that whenever we create a
06:08 - custom class and we want this class to
06:10 - appear in the inspector we have to mark
06:12 - it as serializable so right above the
06:14 - class we make two square brackets and we
06:16 - write system. serializable now when we
06:19 - save and head into Unity we can see that
06:21 - we have a list of sounds let's add an
06:23 - element and the first element here has a
06:25 - clip a volume and a pitch now we can
06:27 - definitely make this more interesting
06:29 - first first off let's go ahead and add a
06:30 - name we'll make this a public string
06:33 - name and we can also add sliders to our
06:36 - volume and Pitch to do that we use the
06:38 - range attribute where we input a minimum
06:41 - and maximum value we want up volume to
06:43 - go between 0 and 1 and we might want our
06:46 - pitch to go between 0.1 and three if we
06:49 - now save and go into Unity we can see it
06:51 - looks much better let's name this first
06:53 - element player death and I'm going to
06:56 - drag in my player death sound now in our
06:58 - Audio Manager whenever we start the game
07:00 - we want to Loop through our list and for
07:02 - each sound add an audio Source let's do
07:04 - this inside of the awake method awake is
07:06 - pretty much the same as the start method
07:08 - except it's called right before so we
07:10 - set up everything in our wake method so
07:12 - that we can play sounds in the start to
07:14 - Loop through our sounds we go for each
07:16 - sound and we'll call the sound that
07:18 - we're currently looking at s in our
07:21 - sounds array we want to go ahead and add
07:23 - an audio Source component we could do
07:25 - that on our current object or on a child
07:27 - object for the sake of Simplicity let's
07:29 - just just do it on the current object so
07:31 - we'll go game object. add component and
07:33 - the component we want to add is the
07:35 - audio source and of course we want to
07:37 - store this audio Source in a variable so
07:39 - that later when we want to play the
07:41 - sound we can call the play Method on the
07:43 - audio Source the simplest way to do this
07:45 - is going to our sound class and add a
07:47 - public audio source and let's call it
07:50 - source of course we don't want this to
07:52 - show up in the inspector because it's a
07:54 - value that we poate automatically in the
07:56 - awake method and so we can MK this with
07:58 - an attribute called hide in inspector so
08:01 - now even though the variable is public
08:03 - it won't show let's save that go into
08:05 - the audio manager and now we can set s
08:07 - meaning the sound that we're currently
08:08 - looking at do Source equal to that new
08:11 - audio Source component and so we can set
08:14 - s. source. clip meaning the clip of our
08:17 - audio Source equal to s. clip and if we
08:20 - want to control our volume and Pitch as
08:22 - well we can set s. source. volume equal
08:26 - to s. volume and s. source. pitch
08:30 - equal to s. pitch so if we save this now
08:32 - and head into unity and hit play we can
08:34 - see that at the start of our game an
08:36 - audio Source gets added for each sound
08:38 - in our sounds array and that the clip
08:41 - the volume and the pitch all get copied
08:43 - over so let's exit play mode and let's
08:45 - add a way to play this sound to do that
08:47 - we create a new method let's make this
08:49 - instead of the update method and this
08:51 - one is going to be public because we
08:53 - want to be able to call this method from
08:55 - outside the class let's call it play and
08:57 - it's going to take in a string with the
08:59 - name of our sound then all we have to do
09:01 - is Loop through all of our sounds and
09:03 - find the sound with the appropriate name
09:05 - we can do that by creating another for
09:06 - each method and checking the name for
09:08 - each element or we could go up here and
09:10 - say using system and this now allows us
09:14 - to find a sound by going array. find we
09:17 - want to find the sound in the sounds
09:19 - array and we want to find the sound
09:21 - where sound. name is equal to the name
09:25 - now this type of syntax might be a bit
09:27 - new to you but it allows us to write
09:29 - code a whole lot faster we then store
09:31 - the sound that we found in a variable
09:32 - called s and finally we can go s.
09:35 - source. playay of course this is going
09:38 - to throw an error if you don't find the
09:40 - sound with the appropriate name we'll
09:41 - have a look at that in a second so now
09:43 - our audio manager should actually work
09:45 - we have a way of defining the sounds
09:47 - that we want we set up audio sources for
09:49 - each sound when we play the game and we
09:50 - have a method that we can call whenever
09:52 - we want to play a certain sound so now
09:54 - we can find the place in our code where
09:55 - we want our player to die let's go into
09:57 - player and here I have a script called
09:58 - player code under this onol enter
10:01 - function I check if what we hit was a
10:03 - meteor and if it was we want to go ahead
10:05 - and end the game and destroy the current
10:07 - game object this is also where we want
10:09 - to play our sound of course we need a
10:10 - reference to audio manager we could
10:12 - create a variable up here and reference
10:14 - it in the inspector or since this is
10:16 - only going to be called a few times we
10:18 - could use find object of type and the
10:20 - type that we want to search for is audio
10:22 - manager we then call Dot play and then
10:25 - the name of the sound that we want to
10:26 - play in our case that's player death so
10:29 - now with a single line of code that we
10:31 - could put anywhere in any of our scripts
10:33 - we can play a sound of our choosing and
10:35 - so we should hear that when we hit play
10:37 - and if I manage to collide with
10:38 - something I'll play a blow sub now we
10:40 - can quickly expand on this to add some
10:41 - music let's add another element to our
10:43 - array let's call this one the theme and
10:46 - I'm going to drag in my main theme here
10:48 - let's set the volume to something a bit
10:49 - lower and make sure the pitch is set to
10:51 - one and we can play this from anywhere
10:53 - but let's just play it from within our
10:54 - audio manager so let's add a void start
10:57 - method and here we simply call play and
10:59 - the sound that we want to play is theme
11:01 - so now when we hit play we can hear the
11:02 - music playing of course we want our main
11:04 - theme to Loop to add this option we go
11:06 - into our sound class and we add a public
11:09 - Bowl called Loop then inside of our
11:12 - audio manager where we set up our
11:14 - different sounds we go s. source. Loop
11:18 - equals s.
11:19 - Loop and now we have an option for
11:21 - looping let's go ahead and enable that
11:23 - and when we now play we can see that our
11:25 - main theme is set to Loop let's see what
11:28 - happens if we make a typo say if we
11:30 - accidentally put a q at the end of theme
11:32 - this happens more often than you think
11:34 - if we now hit play it's going to try
11:36 - andplay a sound that isn't there so we
11:37 - get a null reference exception to get
11:39 - around this we simply check if s is
11:42 - equal to null and if it is we return and
11:44 - so we don't try playing a sound that
11:46 - isn't there now when we hit play even
11:48 - though the name is still spilled wrong
11:50 - nothing happens now we can even go in
11:52 - here and add a tiny aror message for
11:58 - ourselves
12:01 - so now I'm just throwing out a warning
12:02 - saying that the sound with this name
12:04 - wasn't found and now we pretty much
12:05 - can't break it let's change the name
12:07 - back here let's have a look at what
12:08 - happens if we add this to multiple
12:10 - scenes the easiest way to do this is
12:12 - make a prefab out of the audio manager
12:14 - then open up the other scene in our case
12:16 - the menu and drag the audio manager back
12:18 - in the problem with this however is that
12:20 - if we hit
12:21 - play and transition to another scene our
12:25 - music gets cut off and we don't want our
12:27 - music to restart every time we change a
12:30 - scene we want our sounds to be
12:31 - unaffected to change this we make the
12:33 - audio manager persist between scenes
12:35 - let's go into Visual Studio let's go to
12:37 - the top under our wake method let's add
12:39 - some lines and all we need to do is call
12:41 - the don't dist unload method and as the
12:44 - target we put our own game object now
12:46 - this also means that if we currently hit
12:48 - play and transition to a new
12:50 - scene we actually have two audio
12:53 - managers in here the one from the first
12:56 - scene and the one from the second now
12:58 - that's of course not something we one so
12:59 - to get around this we create a public
13:02 - static audio manager and we'll call this
13:05 - instance this is a static reference to
13:07 - the current instance of our audio
13:09 - manager that we have in our scene and we
13:11 - want to make sure that there's only one
13:12 - instance so we simply go in here and
13:14 - check if instance is equal to null
13:17 - meaning that we don't have an audio
13:19 - manager in our scene well then we set
13:21 - instance equal to this object if not
13:24 - meaning that we already have an instance
13:26 - in our scene we want to remove this
13:28 - object d destroy game object and just to
13:31 - make sure that no more code is called
13:33 - before we destroy the object we also hit
13:35 - return now depending on whether or not
13:36 - you've work with Singleton patterns
13:38 - before that might be a bit confusing to
13:40 - you but just know that now when we hit
13:41 - play our audio manager is set under the
13:44 - don't destroy un load scene we hit play
13:46 - and there's still only one audio manager
13:49 - and you can hear that our music simply
13:52 - continues so that's it for audio
13:58 - manager
13:59 - [Music]
14:04 - that's pretty much it for this video I
14:06 - hope you enjoyed it if you did make sure
14:07 - to subscribe so you don't miss a future
14:09 - one so thanks for watching and I will
14:10 - see you in the next video thanks to all
14:12 - the awesome patreon supporters who
14:13 - donated in April and a special thanks to
14:16 - Derek heemskirk fa marifi James Kell
14:18 - Hound cybar mummy Cole cabal and Jason
14:21 - the Tito if you want to become a patron
14:22 - yourself you can do so at patreon.com
14:24 - Brees