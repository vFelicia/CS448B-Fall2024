00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to video number eight on making
00:06 - a multiplayer FPS in unity in today's
00:09 - video we're going to have a look at
00:10 - respawning our player whenever his
00:12 - health amount reaches zero today we're
00:15 - just going to lay the basic mechanics
00:17 - out there and then later we can have a
00:19 - look at making it look really awesome so
00:22 - today's all going to be about coding
00:25 - this functionality and syncing it over
00:27 - the network so before we get started I
00:30 - of course want to say that if you have
00:32 - any questions go to farm practice comp
00:35 - and if you want to support me in making
00:38 - these videos well then you can do so at
00:40 - brackish calm slash donate any support
00:43 - is greatly appreciated so that's
00:47 - basically all I want to plug and now we
00:48 - can just open up unity and get started
00:50 - so the first thing that we want to do
00:53 - here is go to the player object and I
00:55 - just want to fix a quick bug from an a
00:57 - previous video which is that our mask
01:00 - here stating what we can actually hit
01:02 - when we shoot is currently set to
01:04 - everything and the point of this is that
01:07 - it should actually filter out our local
01:09 - player so I want to remove that from the
01:11 - list we were lucky that this actually
01:14 - worked because we were shooting rays
01:15 - from inside the collider and therefore
01:18 - unity we're registering the hits but
01:20 - this should be way more stable if you
01:23 - should decide to move the collider or
01:25 - whatever so great and we can just save
01:28 - that so now we can go ahead and open up
01:31 - this player script in visual studio or
01:33 - mono developer whatever you're using and
01:35 - remember the player script hosts this a
01:38 - current health variable and it's a sink
01:41 - of iron meaning that the state of this
01:43 - variable will be synced across all
01:45 - connected clients and it also has this
01:49 - take damage method but this is just an
01:52 - ordinary method so how is it called well
01:55 - if we open up a player shoot script we
01:57 - which is only enabled on local clients
02:00 - that the player set up that takes care
02:02 - of that you can see here that if we get
02:05 - a button then it calls this a shoot
02:08 - method on the client and this simply
02:12 - checks if
02:13 - what we hid was a player and all that
02:15 - and if it was at cosig method on the
02:18 - server saying that a player was shot and
02:22 - you can see this is mocked as a command
02:23 - in order to make unity understand that
02:26 - this was on the server and you can say
02:29 - that it throws a debug block here that
02:32 - will only be shown on the host of course
02:34 - and it finds the player and calls the
02:37 - tech damaged method so the tech damage
02:40 - is only currently called on the server
02:42 - or at least by the server but the state
02:46 - of the variable is synced to all of the
02:50 - objects using this Ingvar but I kind of
02:53 - want to change this because we want to
02:56 - have other methods in or have other
02:59 - functionality inside the take damage
03:00 - method method such as checking if we've
03:04 - died or not and if we have calling a
03:06 - method that actually displays this and
03:09 - we want to do that on all clients not
03:11 - only the server and therefore I want to
03:14 - change this from an ordinary method into
03:16 - what is called an RPC call and client
03:20 - our pcs are used to make sure that a
03:23 - method is called on all different
03:24 - clients so that's really cool and let's
03:28 - try and do this in code so it's actually
03:31 - really easy just as we are able to mark
03:33 - a method as a command by simply writing
03:38 - command here we can write it a maggot as
03:40 - an RPC call by simply writing client RPC
03:44 - and now as soon as this take damage
03:47 - method is called it will make sure to do
03:49 - so on all computers connected to the
03:53 - network and just as we have to prefix it
03:57 - with a CMD here we now have to prefix it
04:00 - with a RPC so it's now called RPC take
04:03 - damage and inside of Visual Studio if
04:05 - you want to change the name of all
04:08 - references you can just press ctrl R R
04:11 - and then we can say RPC take damage and
04:16 - hit enter and now we can see in the
04:18 - player shoot here that it's changed it
04:21 - there also so that's just a handy
04:23 - shortcut you can of course go ahead and
04:24 - do that yourself that's called we
04:27 - factoring what we can do now is
04:30 - introduce a boolean which will say
04:37 - whether or not the player is currently
04:39 - alive or is whether or not he is dead so
04:42 - let's make a private pool underscore is
04:46 - dead I'm going to default that to false
04:49 - then we'll make an accessor for this so
04:52 - a public pool a property here is dead
04:56 - and we want to have both a getter and a
05:01 - setter but I want the setter to be
05:03 - protected so get here we'll return
05:06 - underscore is dead so anything that has
05:11 - a reference to the instance can check if
05:13 - it's dead but the setter here I don't
05:15 - want to just write said I want to write
05:17 - protected said and this make sure that
05:21 - only the player class or classes that
05:27 - derive from the player class are able to
05:32 - actually change this variable so this
05:34 - will say is dead equals value cool and
05:40 - now we can sync oops
05:43 - we can sync this is that variable so
05:46 - we'll just make this s async var and of
05:49 - course this is the exact same as saying
05:51 - public Bowl is dead and then simply
05:57 - doing get protected set like this but
06:02 - when you write it out like this you
06:03 - cannot Mack a probability as a sync var
06:06 - so that's why we have to do the other
06:08 - thing there cool and now down here in
06:13 - the RPC take damage we can basically
06:14 - check that well we only want to take
06:17 - damage if we are not dead so if is dead
06:23 - well then we just want to return good
06:27 - and then down here we can check if
06:30 - current health is less than or equal to
06:34 - zero so if we've indeed died well then
06:37 - we want to call some kind of die method
06:40 - awesome so that's the very foundation of
06:44 - how we will handle checking whether or
06:47 - not we've died and now we can make this
06:49 - private void die because I want this to
06:54 - only be cold through the take damage
06:56 - method so if you want the player to
06:59 - instantly dial them will just damage him
07:01 - by a very large amount and in here we'll
07:04 - set is that equal to true and then we
07:08 - want to disable some components on the
07:13 - player object this will make sure that
07:15 - he cannot move anymore he cannot be
07:18 - collided with and maybe will also
07:22 - disable some renderers in that this is
07:24 - not going to look very cool right now
07:26 - because we're not going to be changing
07:27 - settings on the rigid body or
07:29 - instantiating particles or anything like
07:34 - that we're just going to make this
07:36 - functional for now and then we'll throw
07:39 - a debug deadlock statement saying that
07:42 - transform done name is dead like that
07:49 - that should be dramatic enough and then
07:52 - we want to call some kind of respawn
07:54 - method so call respawn method so we kind
08:01 - of just have to fill in these holes now
08:03 - and I think we can pretty much just go
08:08 - ahead and do that so yeah why not
08:13 - okay so let's first have a look at
08:16 - disabling the components here so
08:21 - basically how I want to kind of sketch
08:24 - this out is I had this idea that we
08:28 - would have an array of behaviors of
08:31 - components so we can simply drag the
08:34 - minion in the inspector what we want to
08:36 - disable whenever the player dies and
08:38 - then at the very beginning of the game
08:43 - will check which of these components are
08:46 - enabled on the client because some
08:49 - components might be enabled for the
08:51 - local host or the local player but not
08:54 - for other instances and therefore we
08:57 - need to check which components are
08:59 - enabled and store that whether or not
09:01 - they were enabled in a boolean array and
09:04 - then when we respawn we simply go
09:07 - through all of the components that we
09:09 - disabled and set them equal to the
09:12 - corresponding boolean in the boolean
09:17 - array so if that sounds very way vague
09:19 - that's fine we're just going to sketch
09:21 - it out here so first off I want to make
09:24 - a serialize field but I do want this to
09:27 - be private and that's simply going to be
09:30 - a behavior array and disabled on death
09:36 - is what I'm going to call this and then
09:39 - we'll make a private bol array here
09:44 - called was enabled so you can see here
09:47 - that for any given index we are going to
09:49 - have a component and whether or not it
09:51 - was originally enabled then we are also
09:55 - going to change this from an awake
09:57 - function into something else but we'll
09:59 - have a look at that in a second so
10:03 - actually let's let do let's do this now
10:06 - so we want to change this into a setup
10:10 - method and instead of having this code
10:12 - through the start of the awake we want
10:15 - to have this called whenever the player
10:17 - setup is ready because whenever we are
10:22 - checking whether or not a component is
10:24 - enabled we need to do that after we've
10:27 - enabled or disabled components in the
10:30 - player setup script and therefore we
10:32 - could put a a yield wait for a certain
10:38 - amount of second statement in here and
10:40 - that would time it up but I think it
10:42 - would be better to simply tie these
10:45 - together and have the player setup call
10:48 - a setup method on the player here so
10:52 - we're going to make this a public void
10:54 - called set up and for now it's simply
10:58 - going to call this set defaults method
11:01 - but I want to go through here and set
11:04 - the was enabled equal to a new boolean
11:07 - array
11:07 - and the length of this is going to be
11:14 - the disabled on death arrays length here
11:17 - so those are going to be the same and
11:19 - then we can simply loop through this by
11:22 - the way if you write 4 and then hit tab
11:24 - oops 4 and then hit tab here twice and
11:30 - that will allow you to simply use a
11:32 - template for the for statement so I want
11:34 - in this to be I and I want this to be
11:38 - what's enabled dot length and then enter
11:43 - and there you go so that's a very easy
11:45 - way of creating four statements and then
11:47 - we simply say what's enabled to the eyes
11:50 - increment equals disabled on death i dot
11:55 - enabled so we just loop through all of
11:59 - the different components and store
12:02 - whether or not they're enabled in this
12:04 - boolean array and because we are not
12:06 - going to be reordering any of these
12:08 - arrays we can do it just like this if we
12:12 - were going to reorder stuff we might
12:14 - need to have a dictionary in here or
12:16 - something else but this is going to work
12:18 - just fine and then we go on to setting
12:22 - the defaults here and I'm going to want
12:26 - to have a look at the defaults method so
12:30 - in here we of course want to set instead
12:32 - equal to false we're also going to want
12:37 - to say for and again we can use this
12:41 - shortcut here so int I equals 0 and then
12:45 - disabled on death dot length so we want
12:49 - to loop through that and we simply want
12:52 - to say that disabled on death to I dot
12:56 - enabled equals was enabled again the I
13:01 - on position here so here we're doing the
13:07 - exact opposite of what we just did we
13:09 - are saying that we want to loop through
13:11 - all of the components and we want to set
13:15 - the enable state equal to whether or not
13:17 - they were originally disabled or enabled
13:22 - so we are basically just reversing the
13:25 - process there I also want to have a
13:28 - special case for the collider but
13:31 - because it turns out unity has defined
13:35 - this idea of behaviors you can see up
13:37 - here that this is a network behavior a
13:40 - network behavior derives from mono
13:43 - behavior which derives from behavior and
13:46 - a behavior is just a component as stated
13:50 - by unity that can be disabled or enabled
13:53 - however how however unities colliders
13:59 - can both be enabled and disabled but
14:02 - they are not actually derived from
14:04 - behavior they are just derived from
14:07 - component which behavior also derives
14:10 - from but components cannot be enabled or
14:13 - disabled but colliders can so we cannot
14:16 - actually store a Collider in this
14:19 - behavior array and therefore I just want
14:21 - to create a special case sort of say for
14:25 - this Collider and I want to make sure
14:27 - that if we don't have a Collider well
14:29 - then it's just going to ignore it so
14:31 - we're going to say here Collider coal
14:33 - equals gate component type Collider this
14:39 - will work of course with any Collider
14:40 - and then we check if Collider is not
14:43 - equal to null so if we actually have a
14:46 - Collider well then we want to enable it
14:48 - here so enabled equals true and this is
14:52 - of course going to work for our instance
14:54 - and most instances if you have a
14:56 - Collider and only a single one sitting
14:58 - on the game object where the player is
15:00 - this is going to work if you have
15:02 - multiple colliders or don't want it to
15:04 - be enabled from this side or anything
15:05 - like that then you're going to have to
15:08 - write some more code but this should
15:09 - give you an idea of how to do that you
15:11 - can create a similar array using
15:14 - colliders instead of behaviors and do
15:16 - the exact same thing cool
15:20 - so that should set our default just
15:22 - right so now in the die method we can go
15:26 - ahead and loop through these and disable
15:28 - them so for and again I'll use this
15:30 - shortcut here oops and this is going to
15:34 - be I
15:35 - and the length here is going to be
15:37 - disabled on death that length once again
15:40 - cool and then we can simply say that
15:44 - these are able on death the element that
15:50 - enabled equals false simply loop through
15:54 - all of them and disabled them and then
15:56 - manic
15:56 - again going to kind of copy this down
15:58 - here sim you're going to get the
16:01 - Collider component check whether or not
16:03 - it's null and if it's not null well then
16:05 - we want to disable it awesome and we
16:11 - write out the debug deadlock statement
16:13 - and now we are actually ready to call
16:15 - the respawn method because right now it
16:18 - should actually be working however we
16:20 - once we die we don't respawn but that's
16:24 - fine I mean so let's try and set this up
16:28 - first so let's just make sure that we
16:30 - actually call this a setup method so if
16:33 - we go into our player setup script you
16:36 - can see here that in the stat function
16:40 - we check that whether or not we're local
16:42 - player to save with some components
16:43 - assign a remote layer do some stuff with
16:46 - the scene camera which we are later
16:48 - going to move out of this because it
16:50 - doesn't quite belong and well then down
16:53 - here once all of that is finished we're
16:56 - actually ready to call the method and
16:58 - you can see that we already require the
17:01 - component with type player so we're
17:04 - basically able to just make the
17:06 - assumption that it's there and say get
17:08 - component player dot setup if I'm
17:16 - actually able to type this out I just
17:18 - got a new keyboard uh-huh so ah bear
17:21 - with me here all right so now we are
17:25 - calling that method everything seems
17:28 - good whenever you have to do with
17:33 - networking and making sure that all of
17:35 - these things are calling each other on
17:37 - the right lines and all that it requires
17:39 - a lot of debugging so if this actually
17:42 - works I will be the happiest person on
17:45 - earth so let's just go ahead and make
17:47 - room for two
17:49 - here and the first one is going to be
17:52 - the player controller to make sure that
17:55 - we won't move so if we just completely
17:56 - disable our play input with then of
17:59 - course we'll stop moving the second one
18:02 - here is going to be the player shoot
18:06 - script there we go
18:08 - and it will automatically disable the
18:10 - collider and I think that should pretty
18:12 - much be it I mean you can go ahead and
18:15 - drag in stuff like the network transform
18:17 - and all of that but I don't think it's
18:19 - going to be necessary and this should
18:21 - disable the most necessary components
18:25 - all right and I'll also go ahead and
18:30 - leave the max health at 100 but I think
18:33 - I want to just make our weapon a bit
18:35 - more effective here so instead of a
18:37 - damage of 10 let's do a damage of 40
18:41 - cool and yeah so in order to actually
18:48 - try this out we could go ahead and just
18:50 - build it all the time and then start
18:53 - shooting players but I'm going to show
18:56 - you a very quick way to just check if
18:58 - this is actually working
18:59 - so in our update method we are just
19:06 - going to check if we are the local
19:08 - player and if we are not local player
19:10 - well then we're going to return we just
19:12 - want this to call on the local player
19:14 - for now and then here we are simply
19:16 - going to check if we get a key down with
19:23 - the key code or and the key we're going
19:26 - to check for it's the KCAL for kill k
19:31 - key for kill and then we want to call
19:34 - the RPC take damage there we go this is
19:39 - going to poop and of course we need to
19:43 - give it a huge amount here so just a
19:44 - bunch of nines there so now we can
19:47 - simply press the K key and that will
19:49 - simulate us being shot so if we go in
19:52 - here under the line host hit K you can
19:55 - see that I'm unable to move now if we go
19:58 - under the player object here player
20:00 - controller is disabled player shooters
20:02 - too
20:02 - is disabled if we go in here up here and
20:07 - change this to debug we should be able
20:10 - to see that is dead is now true and our
20:14 - current health is something a huge
20:16 - negative number here and you can also
20:19 - inspect the disabled on death here and
20:22 - the once enabled so you can see that
20:24 - both player controller and player
20:27 - shoot was enabled at the very beginning
20:30 - and that's true because this is the
20:32 - localhost so of course they were enabled
20:34 - but if other player or if we viewed a
20:38 - connect the clients instance of this
20:42 - player these would be false both of them
20:45 - that's why we have to have this in here
20:47 - so now we can jump out of debug mode
20:50 - again and I think we are ready to code
20:54 - the actual respawning now so in order to
20:57 - do this what we want to do here is here
21:02 - we want to call a respawn method and
21:05 - we'll do this by using an enumerator
21:08 - because we want to wait a certain amount
21:10 - of seconds and therefore they are really
21:12 - smiled and we've done this before at
21:16 - least in other videos so if we haven't
21:18 - done it here this is how you do it so up
21:21 - here we want to be using system dot
21:24 - collections and don't ask me why that's
21:27 - just something that we're going to do
21:28 - then down here we can make an eye
21:31 - enumerator and this is a method like any
21:34 - other this is a return type just like
21:37 - writing void but it just looks very
21:41 - scary but in reality it's very easy to
21:43 - use I will call this respawn and it's
21:46 - not going to take in any arguments here
21:48 - and we're just going to - private not
21:52 - that it matters and then we're going to
21:57 - write a write after me yield return new
22:00 - waitforseconds and this is with all caps
22:04 - and then we want to wait a certain
22:07 - amount of seconds for now we're just
22:09 - going to wait three seconds and then we
22:12 - want to start the respawning so we are
22:14 - going to set our default values
22:16 - then we're going to find a start point
22:20 - that we want to spawn at so we're going
22:23 - to set create a transform start point
22:25 - here and that's going to find the
22:27 - network manager dot singleton which is
22:30 - the instance of the network manager in
22:32 - RC and we should maybe do some checking
22:35 - here whether or not it's actually then
22:37 - all that part let's just go ahead and do
22:40 - write this out so singleton dot and then
22:43 - get start position and that will return
22:47 - one of the spawn points in the
22:48 - registered in the network manager so now
22:51 - we can simply say that transform that
22:53 - position equals start point dot position
22:58 - actually I'm going to rename this to
23:01 - spawn point I think that's more clean
23:04 - and again look here I use the double
23:07 - control RR you need in order to rename
23:11 - all the variables and then we want to
23:14 - set transform the rotation equal to
23:16 - spawn point dot rotation also so that
23:20 - should actually respawn our player and
23:22 - now all we need to do up here is call it
23:24 - so you might go ahead and do respawn
23:26 - like this but that's not actually valid
23:29 - what we need to do instead is we need to
23:30 - call the stat co-routine and for some
23:36 - reason that sparking outs of the start
23:38 - co-routine and then in here we put the
23:41 - respawn method so that's what we want to
23:43 - start and then a semicolon and there we
23:47 - go so that should basically be all and
23:50 - this should be working out so let's just
23:53 - test it out hit play here select host
23:59 - let's just move out here kill ourselves
24:02 - so now we can move you can see it says
24:04 - player one is dead and there we go we
24:06 - respond so let's just make a debug
24:09 - deadlock statement in the respawn - so
24:12 - down here we'll say debug dot block
24:18 - player re spawned
24:26 - we'll give it the name - so transform
24:30 - the name + respond grade um and the last
24:39 - thing here's respond time is a pretty
24:44 - important value for pretty much any fps
24:48 - and therefore hard coding indeed here
24:51 - would be kind of stupid especially if
24:54 - you wanted to later say let the players
24:56 - control how long it's going to take to
24:59 - respond so let's instead create a class
25:03 - that will store important settings
25:06 - settings for a match so let's define a
25:14 - new class here create C subscript called
25:21 - match settings I will just double click
25:25 - that reload all here and it's not going
25:28 - to be using well neither unity engine or
25:32 - system dark elections and it's not going
25:34 - to derive from anything for now it's
25:37 - actually only going to store a public
25:40 - float spawn or respawn delay respawn
25:48 - time and we are just going to set that
25:51 - equal to 3 seconds for now the only
25:56 - thing that I want to do here is I want
25:58 - to mark this as a system that's
26:00 - serializable and that will allow us to
26:03 - use it correctly and it will allow us to
26:07 - make sure to change these values inside
26:11 - of the unity inspector when we embed it
26:13 - into another class which we're going to
26:15 - do now so we are going to open up the
26:17 - game manager and this is going to host
26:20 - or this is going to have a variable
26:22 - storing the match settings for now we've
26:25 - just used this for registering the
26:28 - player here the kind of keeping track of
26:30 - different players and we are going to be
26:33 - using the game manager for multiple
26:35 - stuff but in order to not clutter this
26:38 - completely and have a very long script
26:40 - I'm just going to quickly define a
26:42 - region here so if you rise write a
26:45 - hashtag region and then you write the
26:48 - name of the region and this is just um
26:51 - player tracking or play registering or
26:55 - whatever you want to do I'm just going
26:56 - to call this player tracking and then
26:58 - down here we want to end the region then
27:02 - we can actually here collapse that and
27:05 - that's really cool so now we have this
27:08 - collapsible kind of part of the script
27:11 - and that makes it very easy to kind of
27:15 - get an overview of your scripts I do
27:17 - this all the time when I write longer
27:20 - scripts because sometimes it's just
27:22 - useful to have a lot of functionality in
27:23 - one place and then regions pretty much
27:27 - saved my life without those getting an
27:30 - overview of what you're doing would be
27:32 - so difficult so now we can kind of
27:34 - create the other part of the game
27:35 - manager here and it's going to start a
27:38 - story a public match settings and it's
27:42 - just going to be called match settings
27:45 - here and we're going to be configuring
27:47 - this in the inspector so I don't want to
27:49 - set it equal to something and of course
27:52 - the game manager here there only exists
27:57 - one in the scene scene at any given time
27:59 - and therefore it would be kind of a good
28:04 - idea to turn this into somewhat of a
28:07 - singleton pattern so a single told
28:10 - pattern I don't think I've talked about
28:12 - this yet but it basically say Glee
28:15 - allows us to only have one instance of
28:17 - something running at any time and we're
28:20 - not going to have any control on this
28:23 - but we are going to store a static
28:26 - reference to that instance so if that
28:29 - sounds very weird to you don't worry
28:32 - it's super as easy to set up the
28:34 - singleton ID or this is going to be a
28:37 - very very cheat C easy way of doing a
28:42 - singleton but it's actually going to
28:44 - work just fine so we're going to define
28:47 - this a
28:49 - public static game manager variable and
28:54 - this is going to be the instance some
28:57 - call it singleton as you saw here the
28:59 - network manager calls it singleton
29:02 - network manager that's singleton others
29:05 - just do ins yeah I've seen a lot of
29:10 - different stuff here but I like instance
29:12 - it's very clean I think and it describes
29:14 - what it does and then inside of the wake
29:18 - method here we simply set instance equal
29:23 - to this and we can check if there's
29:27 - another object in the scene so if
29:31 - instance it's not equal to null that
29:35 - means that something else has set this
29:37 - up before us and that means that we have
29:40 - another game manager in the scene so we
29:42 - want to write out an error here saying
29:44 - diverted LOC error more than one game
29:52 - manager in scene and if not well then we
30:02 - can set the instance variable here good
30:05 - so that will make sure that we can
30:08 - always very easily get a reference to
30:10 - the game manager without it and without
30:12 - having to do a game object dot find or
30:15 - anything like that so when we now head
30:17 - into our player script we can go up here
30:20 - and even create a reference to this up
30:22 - here if we want to do that that might
30:27 - even be stupid I think it's even too
30:28 - much to do that instead we are simply
30:31 - going to go down into the respawn method
30:34 - here and then we are going to say game
30:36 - manager dot instance dot match settings
30:41 - dot respawn time there we go so it's
30:45 - simply going to find the game manager
30:49 - that we have in our scene access the
30:51 - match settings access the respawn time
30:54 - value and that should be all hopefully
30:59 - so now I think we can just comment out
31:02 - this
31:03 - update method here that was just for
31:08 - testing so there we go calm that out by
31:13 - the way in order to comment out actually
31:15 - they change that shortcode
31:16 - yeah I don't know no but you can comment
31:19 - out a lot of stuff by making a
31:20 - multi-line comment like that if you want
31:23 - to boobs
31:28 - alright so let's save that and let's try
31:32 - just clearing out the console here there
31:35 - we go
31:36 - let's try building this there we go
31:39 - and whenever we build the player we have
31:42 - to wait for unity to update the lining
31:44 - here and it is done so now like that so
31:47 - we can making may-maybe make this the
31:49 - host and connect this as a client and
31:55 - I'm just going to go down here I'm going
31:58 - to shoot our host you can see it says
32:02 - his he's dead and he responds and we can
32:05 - see it's it's very cheery and the reason
32:08 - why is that it uh it tries to smooth his
32:12 - precision when he's teleported to the
32:16 - right spawn point but we're not going to
32:18 - be worrying about this because well
32:19 - frankly we don't have anything to show
32:21 - that he's currently dead that's in a
32:23 - later video you can see he can now move
32:25 - around again so we can shoot this guy
32:28 - says he is dead you can see he can't
32:30 - move we respawn and now we can move
32:32 - again so that's basically it for
32:34 - responding and this should work pretty
32:37 - well yep
32:39 - so that's all for this video I hope you
32:42 - enjoyed it and I'll see you in the next
32:44 - one