00:00 - thanks for tuning in at brakus hello
00:04 - everyone and welcome to video number
00:05 - nine in the how to program in C sharp
00:07 - course in today's video we're going to
00:10 - have a look at storing multiple pieces
00:12 - of data at once using a container so
00:15 - there are many different types of
00:18 - containers that allows you to do this
00:20 - and the most basic one the one we are
00:22 - going to be looking at first is what is
00:24 - called an array so arrays I basically
00:28 - lists of items where you know beforehand
00:32 - how many elements are going to be in the
00:34 - list so cannot change the amount of
00:37 - elements then there's another type of
00:40 - container called lists and yeah it's
00:42 - weird that arrays basically are lists in
00:45 - real life and lists are also lists but
00:47 - bear with me here and lists is it's
00:51 - basically something we use when we don't
00:55 - know how many elements we are going to
00:56 - need so you can add and remove to the
00:59 - list as you go and when we're done with
01:02 - all that hopefully we'll have time to
01:04 - look into two-dimensional arrays or
01:07 - jagged arrays and their else as they're
01:09 - also called but those are just a bit
01:13 - different okay
01:14 - so let's dig right into it as always if
01:17 - you have any questions or you'll find
01:19 - something confusing head over to farmed
01:21 - or brackish to come where I am among
01:24 - many others are ready to answer your
01:26 - questions and it's it's very fun awesome
01:30 - so let's open up summer in studios and
01:33 - we're going to have a look at arrays so
01:36 - first off we're going to type the type
01:39 - of element and the variable type the
01:42 - data type of the elements that are going
01:44 - to be stored in the array so let's start
01:46 - out by making an array of integers and
01:49 - to make sure that the machine knows we
01:52 - are going to be creating an array we
01:54 - type an open square bracket and a closed
01:57 - square bracket these are pretty much
01:59 - symbolic of a race in c-sharp then we
02:03 - type the name of the array just like any
02:05 - other variable and we're going to simply
02:06 - do numbers
02:08 - then we set it equal to something and
02:11 - what we are going to equal it to is a
02:13 - new int array and then a semicolon this
02:19 - new keyword here is something we use
02:21 - each time we spawn or create a data let
02:26 - a piece of data and that's what we're
02:28 - doing here but however when we're
02:31 - creating arrays it needs to know how
02:33 - large it should be how many numbers can
02:36 - this array hold so we give it just that
02:40 - information by typing in the number
02:42 - inside these two square brackets and we
02:47 - are going to type in let's say we want
02:48 - five numbers cool so how do we access
02:53 - these numbers and how do we set them
02:56 - equal to something well it's actually
02:58 - really easy we simply do numbers sub
03:01 - let's see zero
03:03 - they arrays are zero based so if you
03:07 - want to access the first element you
03:09 - type in 0 1 for the second two for the
03:12 - third and that and then you just go so
03:16 - we're going to set the first element in
03:18 - the numbers array equal to let's say 12
03:20 - then we're going to have numbers array 1
03:25 - sub 1 be equal to 3 numbers sub 2 equal
03:32 - to 5 and we can just go on here
03:36 - but I'm just going to leave the rest of
03:38 - them and they will default to 0 so if
03:41 - you want to write out a piece of data to
03:43 - the screen from this array we simply do
03:47 - console.writeline and then we can access
03:50 - it very easily by doing numbers and then
03:54 - let's say we want to pick the second
03:57 - element so we're going to do one and
03:59 - then close off the square brackets there
04:02 - so numbers sub one and that's going to
04:05 - write out 3 so now when we hit play what
04:08 - it's basically doing behind the scenes
04:10 - is it's creating a new array that can
04:12 - host up to or that will host five
04:14 - numbers and then it's setting the first
04:17 - one to 12 the second one to three and
04:19 - the third one to five and then it's
04:21 - printing out the second
04:22 - which is three awesome so but let's say
04:27 - we want to write out all of the numbers
04:29 - we have in our array so now we've looked
04:32 - at creating arrays at getting a setting
04:34 - values but now we need to loop through
04:37 - our array and that's actually really
04:40 - easily done using a for loop so we'll
04:43 - just write for int I equals 0 is less
04:46 - than and then what we're going to do
04:49 - here before we've just written a fixed
04:51 - number let's say 210 we want to loop
04:53 - through something 10 times and we could
04:55 - just write 5 here but even better we can
04:59 - access the length of our array so we can
05:02 - do numbers dot length like this and then
05:07 - do I plus plus because we want to
05:09 - increment it each time I'm going to try
05:14 - and force summer in studio to do this
05:16 - because I think it's easier for you to
05:17 - read cool
05:19 - so one thing I quickly want to mention
05:23 - also is we could have an integer up here
05:25 - called let's say amount of numbers and
05:30 - set that equal to 5 and then in here we
05:34 - could put amount of numbers that's
05:37 - totally legitimate if you want to do
05:39 - that just so now cool so inside of this
05:44 - for loop will now write console dot
05:47 - right and inside of this we'll do
05:52 - numbers and then I so basically what is
06:00 - going on here is we are creating this
06:03 - array and populating it then we are
06:05 - doing a for loop that will set creating
06:07 - a variable called I set it equal to 0
06:10 - then it will loop through and increment
06:13 - I each time and it will cou keep doing
06:16 - that until we reach the end of our array
06:20 - and then what we are actually doing is
06:22 - we are writing out the number at the ice
06:25 - precision so the cool thing about this
06:29 - is if we just make this easier to read
06:31 - by doing comma space like that is that
06:35 - it will
06:36 - automatically print out the different
06:37 - numbers in our array which is 12 3 5 and
06:41 - then to default zeros awesome another
06:45 - way to do through an array is with what
06:47 - is called a for each loop and this is
06:51 - very popular especially among beginners
06:53 - because it's much easier to remember
06:56 - syntax wise there are some some
07:01 - differences
07:02 - performance-wise between a for and a for
07:04 - each loop but I don't think at this
07:07 - level that it's something you need to
07:08 - worry about yet because it's not as
07:10 - simple as for it's always faster or for
07:13 - each it it really depends on what you're
07:15 - doing with your for loop but you simply
07:18 - do for each and then you say int number
07:23 - in numbers and then open up the addi
07:30 - brackets I'm going to put them down here
07:34 - and then in here we can write out
07:37 - console dot right and then we simply say
07:40 - number + and then fill the same here
07:44 - like that so this looks much easier and
07:48 - and really it is basically what we are
07:51 - saying is that for each integer in our
07:54 - numbers array will create an INT called
07:58 - number and we can then use that number
08:02 - down here so we're basically making a
08:04 - variable here that is that element so
08:07 - that's super cool and one thing you will
08:10 - notice is that if we change number in
08:13 - here so let's say we said number equal
08:16 - to 5 this will set all of the elements
08:20 - equal to 5 and then we print out console
08:23 - dot write line we'll just make one empty
08:29 - line and then below it will ride out and
08:32 - that's same numbers sub let's say 1 or 2
08:36 - let's do 1 and if we hit play here it
08:42 - will say that we cannot assign to number
08:45 - because it is a for each iteration
08:48 - variable
08:49 - and what does that mean I mean this has
08:51 - confused me from the beginning and a lot
08:54 - of other beginners too and basically
08:57 - what is wrong here is that inside of
09:00 - this for each statement we are basically
09:02 - creating a clone of each element and
09:05 - calling it number so when we try to
09:08 - change number we are not actually
09:09 - changing the elements in the array but
09:13 - we are trying to change this forest
09:15 - variable and that cannot happen
09:18 - so we're basically doing something we
09:20 - cannot so for each statements are
09:22 - awesome if we don't need to change
09:25 - things in the array using them you can
09:28 - do so using some trickery but but really
09:32 - they're awesome for just accessing stuff
09:35 - cool so now that you know that we are
09:38 - going to comment that out and have a
09:40 - look at the next thing in our reign yeah
09:43 - before we move on to lists I quickly
09:45 - want to show you that instead of writing
09:47 - this out each time you want to set a
09:49 - number you can do this much easier and
09:52 - now we're going to create a string array
09:54 - you can use strings or introduce of
09:58 - floats or any data type for the array so
10:02 - we're going to create a string array and
10:03 - we're going to say we want three strings
10:06 - and we're going to call it names and
10:10 - instead of doing a names sub 0 equals
10:15 - and so on what we can do is instead of
10:18 - that semicolon we can open up some
10:21 - brackets and in here we can type first
10:25 - name which is going to be Tom then we're
10:28 - going to have a mark and a Matt like
10:34 - that and then remember at the end here
10:38 - after the second curly bracket the
10:41 - closing bracket you will put in a
10:44 - semicolon or it will not work so the
10:47 - cool thing about this is that it's very
10:49 - very easy to populate array and if we
10:53 - just want to print this out we can use
10:54 - our for each statement again just change
10:56 - this to string change this to name
11:00 - change this to
11:01 - names and that term name and now when we
11:05 - hit play it's going to print out tom
11:07 - mark and Matt so that's super cool great
11:13 - so now we're going to move on to lists
11:15 - so we're going to comment out for each
11:18 - once again and we're going to delete
11:20 - this and we're going to delete the
11:22 - arrays for who because now we are at do
11:25 - any lists awesome so lists are basically
11:31 - function as basically the same as a race
11:34 - just within a tiny bit of different
11:37 - syntax and really you should only use
11:40 - lists when you don't know beforehand how
11:43 - many elements are going to be in them
11:45 - because if you can use an array an array
11:48 - is generally going to be faster and they
11:51 - can be quite a bit faster so now that
11:54 - you know that we're gonna I'm gonna show
11:57 - you how to use them so firstly in order
11:59 - to use a list you're going to have up
12:02 - here to include it so we're going to
12:04 - type using system dot collections dot
12:09 - generic don't ask me why we have to type
12:12 - exactly this yet but basically what
12:14 - we're doing is we are saying we want to
12:16 - import a bunch of functionality that is
12:20 - in this collection a generic namespace
12:23 - so we are basically are importing a
12:26 - bunch of stuff that is really common and
12:29 - really useful now we can then type list
12:32 - and then we're going to do these less
12:35 - than and or and greater than signs and
12:38 - inside of them will give it the data
12:41 - type so that's going to be of type
12:42 - integer whoops and we're going to call
12:46 - this again just numbers and we're going
12:49 - to say get set it equal to a new list
12:51 - again of type int here and then remember
12:55 - eight open open parentheses and a close
12:59 - one that's the syntax for creating a new
13:02 - list so it's a bit different but the
13:05 - cool thing here is that we can then go
13:07 - numbers this is going to be empty by
13:09 - default by the way we and then go
13:11 - numbers dot add
13:13 - and then we can just give it an item
13:15 - here so we're going to add let's say 13
13:18 - numbers dot add we can add maybe it 4
13:24 - and you can do this as long as you want
13:27 - to so we're going to add three numbers
13:28 - here and then we're going to do an 8
13:31 - then if you want to access it just like
13:34 - a normal array you would do console dot
13:37 - write line and basically by the way a
13:42 - easier way to do console dot write line
13:45 - if your tab typing really quickly is
13:47 - just to do CV and then tap tap I just
13:50 - wanted to show you that it's pretty cool
13:52 - then we can write out numbers and then
13:55 - access by doing this up again here so we
13:58 - are accessing let's say the second
14:00 - element and now when we hit play here or
14:03 - run it's going to print out four so you
14:06 - can do that so when actually dealing
14:09 - with a list it's it's the same syntax as
14:12 - an array so that's kind of nice okay so
14:16 - now that we know that how to remove from
14:20 - how do we remove from an array well it's
14:23 - actually pretty easy again so let's add
14:26 - three numbers let's loop through using
14:29 - our for statement and remember when you
14:33 - are using lists don't use that length
14:35 - now use dot count it's a pitfall so many
14:42 - people fall into and get annoyed by this
14:44 - in my code running and all that it's you
14:47 - need to change it don't ask me why
14:49 - cool then what we can do down here is we
14:52 - can do console dot write line just make
14:55 - an empty line there and then we can
14:58 - remove or do numbers dot remove at and
15:04 - then you're given an index so you give
15:07 - it a location you want to remove from
15:09 - and let's say we want to remove the
15:12 - second so we're going to be remove at -
15:15 - I'm pretty sure that's not zero based
15:17 - but we'll find out here so we'll do four
15:20 - and I and then print it all out again so
15:23 - that's hit play here and it's going to
15:25 - print out thirteen four and eight and
15:27 - is actually zero-based so we're going to
15:29 - remove at one there we go so we've we've
15:35 - removed the middle number
15:37 - so we print out thirteen four and eight
15:39 - we add those print them out create a new
15:42 - line remove at the one position which is
15:46 - two four and then print them print them
15:48 - out again cool you can also see here dot
15:55 - remove you can also remove by inserting
16:01 - kind of what element it should sort for
16:03 - so if we want to remove the four by
16:06 - typing in four here it will do so just
16:10 - remember that it will removed the first
16:12 - element that matches its search
16:14 - parameter and then just leave the rest
16:17 - so that's kind of yeah just keep that in
16:21 - mind
16:22 - generally it's it's much better if you
16:24 - know the index awesome
16:27 - so that was lists and how to use them at
16:31 - last we're going to look at something
16:34 - pretty cool which is the two-dimensional
16:37 - or multi-dimensional array so
16:43 - multi-dimensional arrays these are very
16:49 - awesome for a bunch of things you use
16:52 - them quite a lot when constructing games
16:55 - for it for a certain so let's create a
16:59 - new function here and we're going to
17:03 - call this kraid grid let's say we want
17:06 - to make a grid of numbers and that could
17:09 - be used for a map it could be used for
17:12 - some data modeling it could be used for
17:15 - all kinds of stuff and we want to print
17:19 - out this grid when we've created it so
17:21 - let's call the create grid function here
17:24 - and yeah awesome so first off we need to
17:28 - declare the multi-dimensional array and
17:30 - it's actually really easy you just go
17:32 - into open square bracket and then comma
17:36 - close square bracket now it knows that
17:38 - we want a two dimensional for three
17:40 - dimensional you
17:41 - cama cama and so on then we can type on
17:45 - say let's just call this grid and we're
17:50 - going to equal it to a new
17:52 - multi-dimensional array and of course we
17:55 - need to give it a size so we're going to
17:56 - do a 5x5 grid then down here we can of
18:01 - course populated with data if we want to
18:03 - I'm going to do so using a we could do
18:07 - so using a for statement but instead
18:09 - let's just try and print it out because
18:12 - of course if you want to publish a
18:14 - number here we can do one quickly let's
18:17 - say we want to change and the second row
18:23 - and the third position we could do like
18:27 - that and then simply equal it to let's
18:30 - say five or three maybe and that's up to
18:35 - you and then we can print it out using
18:37 - two for loops
18:39 - so let's first create for int and then
18:42 - we could do x equals zero because we're
18:45 - going to have an X and the y here as
18:47 - long as X is less than grid dot and in
18:51 - here if you don't want to do just length
18:55 - because that's going to get you the
18:58 - total number of elements in all of the
19:01 - the arrays dimensions instead you can do
19:05 - get length and then you can give it the
19:09 - dimension that you want to search for or
19:12 - you could just and this is what you're
19:13 - going to be doing most of the time
19:14 - create two variables up here one called
19:18 - int with we're going to set that equal
19:21 - to five and another one called int
19:23 - height which we are also going to equal
19:26 - to five and then instead of five here we
19:28 - are type with and whoops and height and
19:34 - then down here as long as X is less than
19:37 - with X plus plus to increment it open up
19:43 - the brackets it's so annoying that
19:47 - xamarin studio does that and then for
19:49 - int I know you can change it by the way
19:51 - I'm just too lazy so zero
19:55 - y is less than height y plus plus and
20:05 - oops my keyboard spacing out here but
20:13 - we'll get it working so I think this is
20:15 - the first time that we've done a for
20:17 - loop within a for loop and basically for
20:21 - each iteration of X it's going to do y
20:24 - iterations here so for each element in
20:27 - in one direction it's going to one
20:30 - direction it's going to loop through the
20:33 - height amount and then we can simply
20:36 - access each parameter by doing console
20:39 - dot write and we are going to write out
20:44 - the grid at the X comma Y position and
20:50 - then we're going to do a space between
20:53 - them also so nicely done now we can hit
20:59 - play and whoops of course we need to
21:03 - also create a new line for each time
21:06 - we've looped through one iteration on
21:10 - the X so we're going to do console dot
21:12 - rewrite line down here and now we should
21:15 - see a grid created indeed we are
21:17 - we have and this is basically the
21:21 - foundation of creating maps and such in
21:23 - games you're going to use it all the
21:25 - time so that's super super cool and this
21:31 - is the kind of the easy way to make a
21:34 - minecraft clone it all starts with this
21:38 - call and of course we can now increase
21:41 - this to whatever magnets here that we
21:43 - would like we could do a 20 by 20 and I
21:46 - think I'm going to remove the space here
21:48 - and we could also delete this that's no
21:51 - reason for that to be there and we can
21:52 - play and you can see it will create
21:55 - these huge grids for us and we can of
21:58 - course also assign to it as we go along
22:01 - so we can say grid here is going to be
22:06 - grid X comma Y is going to be equal to x
22:11 - times y for example and you can see what
22:16 - that does whoops so now we are starting
22:18 - to need spaces maybe we should just do X
22:21 - plus y and then do a space in here it's
22:25 - a fun way to play around with
22:27 - mathematics because you can get these
22:29 - cool-looking shapes like this awesome
22:33 - so and that was an introduction to kind
22:37 - of arrays and what you can do with them
22:41 - two dimensional arrays how to construct
22:43 - grids lists all that the kind of very
22:47 - accessible containers that you might
22:49 - encounter and the last thing I want to
22:52 - remove just mention is there's something
22:55 - there's another way of creating
22:57 - multi-dimensional arrays which is called
23:00 - jagged arrays and the syntax is just a
23:03 - bit different
23:04 - instead of doing int one think I'm
23:08 - another thing you just do two brackets
23:10 - and this is basically an array of an
23:13 - array and you can of course call this
23:17 - grid also and equal to a new int array
23:20 - of array and then do with color height
23:25 - and everything from here is pretty
23:27 - self-explanatory I just wanted to
23:29 - mention that this is another way of
23:31 - writing the code and again when when you
23:35 - should use one another really depends on
23:38 - the situation it's not going to make a
23:41 - big difference for the kind of
23:42 - applications that we are writing here
23:44 - but you can of course look it up and
23:47 - read about it if you are very interested
23:49 - in making your your application very
23:52 - performant so I just really wanted to
23:55 - show you that that's another way cool so
23:58 - that was basically all four containers
24:00 - for arrays and lists in c-sharp and yeah
24:05 - thanks for watching I hope you enjoyed
24:07 - it and I'll see you in the next video