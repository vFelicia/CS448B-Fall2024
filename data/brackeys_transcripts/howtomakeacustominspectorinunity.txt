00:00 - custom inspectors and unity is one of
00:01 - those tools that can just make
00:02 - developments so much easier we'll have a
00:04 - look at a few practical use cases for
00:06 - custom inspectors but really the
00:08 - possibilities here are endless
00:09 - so let's get into it so here's the basic
00:11 - thing with only a camera a light and a
00:13 - cube and on this cube I have a script
00:16 - called cube as well if you open the
00:18 - script up you will see that it generates
00:20 - a random color it does this when the
00:22 - game starts so inside the start method
00:24 - we are calling the generate color method
00:26 - this is getting the renderer on our
00:28 - object accessing the material then
00:31 - setting the color equal to a random
00:33 - color we also have a function here for
00:35 - resetting the color this is getting the
00:38 - materials color and simply setting it
00:40 - back to white so if we go ahead and hit
00:42 - play each time we play our cube is going
00:44 - to change to a random color but in case
00:47 - it's like this hitting play every time
00:48 - you want to test out your script can be
00:50 - really annoying especially if you have a
00:52 - large game where it takes some time to
00:54 - play so let's write a custom inspector
00:56 - that will give us a button that we can
00:58 - press in order to generate a color to do
01:00 - that let's go and create another folder
01:02 - this folder can sit anywhere in your
01:04 - project but it must be named editor
01:06 - that's because any scripts inside of an
01:08 - editor folder won't be included in
01:09 - builds so let's right-click go create
01:11 - and let's create a c-sharp script we
01:14 - could call this something like cube
01:15 - editor let's then double click it to
01:17 - open it up in Visual Studio and first
01:19 - let's go ahead and delete the two using
01:21 - tags at the top let's also delete our
01:23 - start and update methods remember
01:25 - whenever we want to program for the
01:27 - unity editor we want to be using the
01:29 - unity editor namespace sub here let's
01:32 - write using unity editor and of course
01:35 - we don't want the script to sit on an
01:36 - object we want this to go and modify an
01:39 - already existing script therefore we
01:41 - don't want to derive from monobehaviour
01:43 - but instead from editor we also need to
01:46 - tell unity what script that we want this
01:48 - to be an editor for to do that we go up
01:50 - here and using an attribute we write
01:53 - custom editor then inside two
01:55 - parentheses we write type of then again
01:59 - we write parenthesis and in here we give
02:01 - it the script so in our case we want the
02:03 - custom inspector for our cube script and
02:06 - now we're actually ready to start
02:08 - writing our inspector now 99% of the
02:10 - code that you're going to be writing
02:12 - when doing custom inspectors
02:13 - going to be inside of the on inspector
02:15 - GUI function to create this function
02:17 - rewrite public override void and then on
02:22 - inspector GUI and you will notice how I
02:25 - just used autocomplete there this of
02:27 - course went ahead and rode on Spector
02:29 - GUI of Renta sees are open and closed
02:31 - brackets but it also inserted a line
02:34 - into our function that's because of this
02:36 - keyword right here the override what
02:39 - this means is that we're actually taking
02:40 - a function that unity has already
02:42 - created called on inspector GUI and
02:44 - unity uses this function to display all
02:47 - of the variables that are currently
02:48 - inside of our inspector so for example
02:50 - you have a public float you're going to
02:52 - have a field that allows you to edit
02:53 - that in the inspector and that's what
02:55 - uninspected GUI allows you to do so upon
02:58 - overriding this we're actually going to
03:00 - be ignoring all of the stuff that you
03:02 - needed does for us except however if we
03:05 - call the original on inspector GUI
03:08 - that's what we're doing here base that
03:10 - on inspector GUI goes back and says hey
03:13 - do all of the original GUI code and then
03:16 - allow us to add stuff before that or
03:18 - after that so whenever you want all the
03:21 - default stuff as well as adding
03:23 - something on top leave this in here and
03:25 - if you want to do it completely by
03:26 - yourself simply get rid of it but we'll
03:28 - just leave it in here in case we decide
03:30 - to add variables later on then after
03:32 - this we want to add of course a button
03:34 - well if you have used unity before the
03:36 - GUI system in 4.3 you might recognize
03:39 - this function if we go
03:40 - if GUI layout GUI layout is a class that
03:44 - allows us to do all sort of stuff with
03:45 - UI we can do labels spaces and most
03:49 - importantly for us we can do buttons
03:51 - then we open a close of parentheses and
03:53 - then inside of these two parentheses we
03:55 - can write a title for our button in our
03:58 - case let's call it generate colors then
04:00 - of course we want to open and close some
04:02 - curly brackets for our if statement and
04:03 - the cool thing about this function is
04:05 - that it will return true when the button
04:07 - is pressed and so everything inside of
04:09 - these two curly brackets will only
04:11 - happen if we press the button let's try
04:13 - and write debug that lock here saying we
04:16 - pressed generate color let's try and
04:21 - save this head into unity let's wait for
04:23 - the editor to load and when we now click
04:25 - on the cube we
04:26 - see that we have a custom button when we
04:29 - press on it we get a debug that large
04:31 - statement saying we pressed generate
04:33 - color and our game isn't even running so
04:35 - now you might start to see kind of how
04:37 - easy it is to add functionality into our
04:39 - editor but currently we aren't really
04:41 - communicating with our original script
04:43 - we want from the cube editor to call a
04:46 - function called generate color inside of
04:49 - our cube script to do that we need a
04:51 - reference to the cue locally whenever
04:53 - you derive from editor unity gives you a
04:56 - very simple way to do this we simply use
04:58 - a variable called target as it says here
05:01 - the target is the object currently being
05:04 - inspected and since this is a custom
05:06 - editor for the cube and ever only will
05:08 - show when we're inspecting the cube this
05:10 - is always going to refer to the cube so
05:13 - now we can actually go and store this in
05:15 - a variable so let's create a cube
05:16 - variable let's call it cube the
05:18 - non-capital C and set it equal to that
05:21 - target this will however give you a red
05:23 - line and that's because target is by
05:25 - default of type object so we simply have
05:28 - to cast this meaning change its type
05:30 - into a cube and we do that like this so
05:34 - now we can access all of the stuff
05:36 - inside of our cube so instead of
05:37 - throwing out the debug the log message
05:39 - let's go cube dot generate color
05:42 - remember to mark any function or
05:44 - property that you want to edit through
05:46 - your inspector script as public
05:49 - otherwise you aren't going to be able to
05:50 - see it this works in the exact same way
05:52 - that it would between scripts in game so
05:55 - if we now go into unity and hit the
05:56 - generate color button you can see just
05:58 - how many different colors we can get
06:00 - without even playing the game of course
06:02 - you might also want a reset button in
06:04 - here to do that we use the exact same
06:06 - syntax in fact I'm just going to copy
06:08 - the entire if statement let's now call
06:10 - our button reset and instead of calling
06:13 - the generated color method that's called
06:15 - the reset method and now we have a reset
06:17 - button as well I think it would be a lot
06:19 - prettier if our script had these two
06:20 - buttons side by side to do that that's
06:23 - going to our editor script before the
06:25 - first button we go and write GUI layout
06:27 - dot picking horizontal and after both
06:31 - our button we write GUI layout dot and
06:35 - horizontal
06:37 - so what we're saying here is that
06:39 - everything within the begin horizontal
06:41 - and end horizontal methods well are not
06:44 - going to be laid out vertically but
06:46 - instead horizontally and so these two
06:49 - buttons will show side-by-side let's
06:51 - increment our code to show that clearly
06:53 - let's now say that heading to the
06:55 - inspector and wallah and of course they
06:57 - work as intended but that's that's more
07:00 - that you can do with the custom
07:01 - inspector than just adding buttons here
07:03 - I have another simple scene with the
07:05 - sphere and the sphere has a sphere
07:07 - script inside the script we animate its
07:09 - size based on a sine wave and you can
07:11 - see us changing the local scale here you
07:14 - don't have to understand this code but
07:16 - basically we have a base size from which
07:18 - we apply animation on top so if I hit
07:21 - play you can see that we get this
07:22 - heartbeat like animation I'm going to
07:25 - increase our base size or decrease it we
07:28 - can control the overall size of our
07:29 - sphere but inside of our editor when we
07:32 - increase and decrease our base size it
07:34 - has no impact on our scale let's go
07:37 - ahead and change that to do that let's
07:39 - go and create another editor folder you
07:42 - could also use the original folder and
07:44 - put both scripts in there but I'm just
07:46 - going to put it in here let's
07:48 - right-click go create three sharp script
07:50 - let's call this the sphere editor let's
07:53 - open it up again let's delete our two
07:55 - system tags let's delete our two
07:57 - functions let's use unity editor and
08:01 - let's derive from editor let's make this
08:04 - a custom inspector type of let's input
08:07 - our sphere here now let's again create a
08:10 - public oval write void and the method we
08:14 - want to override here is the on
08:16 - inspector GUI and again we're calling
08:18 - based on inspector GUI now if we save
08:21 - this everything should be the exact same
08:22 - way it was before however we can now
08:25 - make sure that every time we update our
08:28 - inspector we're also going to be
08:30 - changing the size this way we can see
08:32 - the physical change in the editor to do
08:34 - that let's get a reference to our sphere
08:35 - again by using the target variable let's
08:38 - create a variable of type sphere let's
08:40 - call it sphere as well and let's set it
08:42 - equal to our target and remember we
08:44 - always have to cast this into the type
08:46 - of our component in our case that's
08:49 - fear after this we can set the scale of
08:51 - our sphere by going sphere that
08:54 - transform dot local scale and set it
08:57 - equal to vector 3.1 multiplied with and
09:01 - this is where we want to input our base
09:03 - size and so because that variable is
09:05 - public we simply go sphere dot based
09:08 - size if we now save this head into unity
09:11 - and drag on our base size we can see it
09:14 - updating in our game and seeing you and
09:16 - this is actually fairly efficient of
09:18 - course our calculation is super simple
09:20 - but on inspector GUI is also fairly
09:23 - smart because it will only go ahead and
09:25 - update a local scale when something on
09:27 - the GUI has changed it's not like update
09:29 - that runs as often as possible so that
09:32 - works really well for us here but
09:33 - changing the variable like this feels
09:35 - pretty non-intuitive let's instead add a
09:37 - slider to do that we add some space in
09:39 - here and to create a slider we go editor
09:42 - GUI layout as we also talked about in my
09:44 - video on creating a custom editor window
09:46 - GUI layout and editor GUI layout is
09:49 - similar in a whole lot of ways they even
09:51 - have some of the same functions but in
09:53 - general we use editor GUI layout
09:55 - whenever we want to create some kind of
09:56 - editable field in our case we want to go
09:59 - ahead and create a slider and the value
10:01 - that we want to edit here is sphere dot
10:03 - based size and we want it to go between
10:06 - say point 1 and 2 of course we also need
10:09 - to make sure that we actually set Speier
10:12 - dot base size equal to this slider some
10:15 - people find it weird that we need to
10:16 - feed in base size twice that's because
10:19 - this is what this slider should show and
10:21 - this is where we give it the result of
10:23 - our slider that's kind of how that works
10:25 - if we now save this we'll see a few
10:27 - problems well we do in fact have our
10:30 - slide in here and we can definitely
10:31 - tweak it but we also have our original
10:33 - base size variable and that's really
10:35 - nothing indicating what this slider is
10:37 - doing to make our original variable
10:39 - disappear we simply need to delete or
10:41 - base that on inspector GUI call let's
10:43 - simply delete that part of the code and
10:45 - to give it a label we feed it one more
10:48 - argument in the very beginning here
10:50 - let's just call it size and now we
10:53 - should see that there are no distracting
10:55 - variables and that our slider is
10:56 - correctly labeled we can even go super
10:59 - fancy and create a small explanation for
11:01 - our script
11:02 - let's go GUI layout dot label and the
11:06 - label that we want to add here is
11:07 - something like other dates around a base
11:10 - size now in the editor we can see that
11:13 - label awesome that's pretty much it for
11:15 - this video if you enjoyed it make sure
11:16 - to subscribe so don't miss the future
11:18 - one also if you haven't seen it already
11:19 - I have another video on editing
11:21 - extensions this one's about creating
11:22 - windows in the editor on that thanks for
11:24 - watching and I will see you in the next
11:26 - video thanks of the awesome patreon
11:27 - supporters who donated in June and a
11:29 - special thanks to hence off-tune
11:31 - commander firestone 38 will go yes
11:33 - pamita's new thomas volley stone gamer
11:35 - sidewalk mommy Jason the Tito Derrick
11:38 - Eames Kirk Fraser mattify and Peter
11:40 - Locke if your name is not on the list I
11:41 - will make sure to include it in videos
11:43 - later this month and the next month as
11:45 - well thanks a lot guys