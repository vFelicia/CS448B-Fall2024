00:00 - at the roundabout take the second exit
00:04 - keep right you have reached your
00:08 - destination in this video we'll try and
00:11 - find our path to some solid 2d path
00:13 - finding in unity now the Unity
00:15 - navigation system doesn't actually
00:17 - support 2d so instead we'll be using the
00:20 - a-star path finding project to quickly
00:23 - and easily set up an enemy that will
00:25 - find the shortest path available to our
00:27 - player the a-star path finding project
00:29 - is of course completely free and the
00:31 - best part is that we'll be able to do it
00:33 - all without writing any code after that
00:35 - we'll have a look at how you can achieve
00:36 - the same thing by writing your own
00:38 - custom script and the cool thing about
00:40 - this is that you'll be able to extend
00:42 - and modify it in any way that you'd like
00:45 - to fit your AI needs but first this
00:47 - video is sponsored by a skill share
00:49 - skill share is an online learning
00:50 - community with more than 28,000 quality
00:53 - classes on game development tech and
00:54 - more if you've always dreamed of making
00:56 - your own mobile game I can definitely
00:58 - recommend this basic unity course on
01:00 - making mobile games for Android and iOS
01:03 - at the end of the course you will be
01:05 - comfortable with mobile setup and input
01:07 - alongside a bunch of other topics like
01:09 - score systems procedural level
01:11 - generation and unity Zaid system join
01:14 - more than 7 million other creators by
01:16 - simply clicking the link in the
01:17 - description and the first 500 people
01:19 - will receive their first 2 months for
01:21 - free all right let's make some enemies
01:24 - please don't hold grudges so as you can
01:27 - see I've created this simple example
01:28 - level with some environment pieces and a
01:31 - main character that we can move around
01:33 - the scene also has this bird here which
01:36 - is basically just the sprite renderer
01:38 - with an idle animation currently it does
01:41 - nothing and will not chase our player at
01:43 - all so let's go ahead and change that
01:45 - with some AI pathfinding first of all we
01:48 - need to visit the website for the a-star
01:51 - pathfinding project I'll of course have
01:53 - a link to this in the description here
01:55 - we'll go to download will navigate to
01:56 - the free version and we'll hit the
01:59 - download button this should download a
02:01 - small zip file that we can then open up
02:03 - and in here should be a folder
02:05 - containing a unity package let's go
02:08 - ahead and double click that and it
02:09 - should load right into unity you can see
02:12 - all the stuff included
02:13 - most of these are scripts that we are
02:15 - going to be using let's just go ahead
02:17 - and import everything and once that's
02:19 - done we are ready to set up pathfinding
02:21 - to this let's go to the hierarchy let's
02:23 - create an empty object and let's rename
02:26 - this to a star you can call it anything
02:29 - you want I'm just gonna place it at the
02:30 - top here and I'm gonna reset the
02:32 - transform this object is going to be the
02:35 - central part of our pathfinding system
02:37 - and it's going to define in what areas
02:39 - are a I can navigate so let's go ahead
02:42 - and add a new component and let's search
02:44 - for Pathfinder let's hit enter and this
02:47 - is going to create the a star path
02:48 - script here we can go under graphs and
02:51 - you can see that we can now create a new
02:53 - graph we're going to create a symbol
02:55 - grid graph which as the name suggests is
02:58 - just going to lay out a grid on top of
03:01 - our level and then check for each grid
03:03 - cell whether or not there's something
03:05 - blocking it of course we are working in
03:07 - 2d so I'm going to go ahead and check
03:09 - the 2d box right here and now if we go
03:11 - into this scene view we should see a
03:13 - very tiny grid graph let's go ahead and
03:17 - make this a lot bigger so I'm gonna
03:18 - switch into my scale tool and I'm just
03:20 - gonna simply click and drag to increase
03:23 - the size of this let's just have it fit
03:25 - pretty much our entire level here we
03:28 - also want to go down here and check use
03:30 - 2d physics and we can leave the collider
03:33 - type at circle but I want to increase
03:35 - the diameter here to something like 1.3
03:37 - and this basically just means that it
03:39 - will try and overlay a circle on top of
03:42 - each of these nodes to see if it
03:44 - collides with anything in that circle is
03:46 - going to have a diameter of 1.3 we also
03:49 - want to define a layer for all the
03:50 - objects that we don't want our player to
03:53 - be able to pass through we can do this
03:55 - with the obstacle layer mask as you can
03:57 - see by default it's set to nothing let's
03:59 - go ahead and go to our environment I'm
04:02 - just gonna select on my middle tile map
04:05 - here this could also just be a bunch of
04:06 - objects it doesn't have to be a tile map
04:08 - and as you can see I've currently set
04:10 - this to the layer obstacle remember you
04:13 - can always go in and add a new layer
04:15 - test layer and then go back to your
04:18 - object and assign it to that layer I'm
04:20 - just going to leave this one at obstacle
04:22 - then inside of our a-star object we can
04:25 - set the obstacle layer mask to
04:27 - include the obstacle layer and now if we
04:29 - go ahead and hit the Scan button you can
04:32 - see that a star is going to generate a
04:34 - navigation grid for us of course all the
04:36 - areas that are blue are places that our
04:39 - enemy can navigate and places that have
04:42 - red squares are marked as obstacles and
04:44 - our enemy won't be able to move there
04:46 - now with this setup I'm just going to
04:48 - hide the graph here so that it isn't
04:50 - overlaid when we're working with other
04:52 - objects and we are now ready to set up
04:54 - our bird to do this let's go ahead and
04:57 - create an empty object let's call this
04:59 - object enemy and let's parent up bird to
05:02 - that object we can then reset the
05:05 - transform on our bird and you should now
05:07 - have two objects stacked like this the
05:10 - reason why I'm doing this is that I want
05:11 - to separate our graphics which is the
05:14 - bird here let's go ahead and rename it
05:15 - to bird graphics and the logic of our
05:18 - enemy into two different objects this is
05:21 - super cool because it allows us to
05:23 - offset our graphics in any way that we'd
05:25 - like and easily change them out without
05:27 - having to modify our enemy object now
05:30 - it's a quick to get our enemy moving
05:31 - around the scene there's a default
05:33 - script that we can go ahead and use it's
05:35 - called AI path let's select that and as
05:39 - you can see it's going to automatically
05:41 - add a secret script which is something
05:43 - that we'll need for all AI objects as
05:45 - well as the AI path script itself the
05:48 - secret script is responsible for
05:50 - generating a path to the target and the
05:53 - AI path will control the secret script
05:55 - and start moving our object in that
05:57 - direction and we can leave most of the
05:59 - settings here as is I'm just going to go
06:02 - ahead and change the orientation from
06:03 - the axis for 3d games to y axis for 2d
06:07 - games and right away you can see that
06:09 - this circle appears around our enemy I
06:11 - mean of course adjust the radius of this
06:13 - if we want our enemy to be bigger when
06:16 - moving around
06:16 - we'd also adjust the max speed I'm just
06:18 - gonna set that to 3 and finally we can
06:20 - adjust how close our enemies should be
06:22 - to a waypoint on our path before it
06:24 - starts to focus on the next one I'm just
06:26 - gonna set this to something like 1.2 you
06:29 - can see this circle here that should
06:31 - work for now of course I could go ahead
06:33 - and hit play here but you'll see that
06:36 - the only thing that really happens is
06:38 - that our bird flies straight to the
06:40 - ground
06:40 - the reason for this is that it's
06:42 - currently set to use gravity so let's
06:45 - just go ahead and disable that it's also
06:47 - not flying towards our player because we
06:49 - haven't marked our player as a target to
06:52 - do this we want to add a destination
06:54 - setter component this takes in a target
06:57 - let's just drag in the player here and
06:59 - that's pretty much all we need to do if
07:01 - we just hit play now you can see that
07:04 - immediately our bird starts moving
07:07 - towards a player and it's even doing so
07:09 - based on a path you can see that it's
07:11 - flying around objects in order to get to
07:14 - him in fact we can turn on gizmos in the
07:16 - game view and with the drop down button
07:18 - here we can find the seeker script and
07:21 - enable gizmos for that object in
07:23 - particular what this is going to do is
07:25 - it's going to draw the path that an
07:27 - object is taking in order to get to our
07:30 - player really really cool you can also
07:33 - see that our object is currently
07:35 - rotating in a really weird way and we
07:38 - don't want this bird to rotate at all so
07:41 - I'm simply going to go ahead and disable
07:42 - rotation on our object and that should
07:45 - fix it straight away you can also add
07:47 - colliders to your AI to make sure it
07:48 - won't fly through stuff in its path do
07:51 - that let's hit add component and let's
07:53 - add a circle Collider 2d and that
07:56 - already looks pretty good if we now hit
07:58 - play we can see these changes working
08:00 - you can also see that everything looks
08:02 - fine if we stand to the left of our bird
08:05 - but as soon as we go to the right we
08:07 - pretty much want this sprite to flip to
08:09 - a face in this direction similar to what
08:12 - we're doing with the player movement now
08:14 - we could go ahead and create a script
08:16 - from scratch to control our AI and we'll
08:19 - have a look at doing that in a second
08:20 - but if you just want to add this tiny
08:22 - thing to change around your graphics we
08:25 - can add a very small script on top of
08:27 - what we have going on here to do that
08:29 - let's select our bird graphics that's it
08:31 - a component and let's just call this one
08:33 - enemy graphics let's create a new script
08:36 - let's say create an ad let's double
08:38 - click to open it up in visual studio now
08:41 - whenever we're programming something
08:42 - with a star we want to include a
08:44 - specific namespace so we want to be
08:47 - using and the name of this namespace is
08:50 - pathfinding this will allow us to inside
08:53 - of our script here that's the
08:54 - our start function and create a public
08:56 - variable of type AI path remember this
09:00 - is the name of the script that we added
09:02 - to our enemy in order to control it
09:04 - let's just call it AI path with non
09:07 - capital letters then inside of our
09:08 - update method we can check if AI path
09:12 - dot decide velocity and the decide
09:15 - velocity is the velocity that our enemy
09:18 - would like to travel with based on the
09:20 - current path in other words we can take
09:22 - the x value of this so the horizontal
09:25 - movement of our enemy and check that if
09:28 - this is greater to some small value like
09:31 - 0.01 well then we are moving to the
09:34 - right and then we can do transform dot
09:37 - local scale equals a new vector3 and
09:40 - this is going to be negative 1 on the X
09:43 - 1 on the Y and 1 on the Z and if this is
09:47 - not the case we want to check if AI path
09:50 - dot decide with a DX is equal to less
09:54 - than negative 0.01 in which case we are
09:58 - moving to the left and so we want to
10:00 - flip our bird in the opposite direction
10:02 - so we can just cover this here and this
10:05 - is going to be positive and not negative
10:07 - on the X so we're just flipping based on
10:11 - our X speed if it's positive we are
10:14 - traveling to the right and we'll set the
10:15 - scale to this if it's negative we're
10:18 - traveling to the left and we'll set the
10:20 - scale to the opposite on the X so if we
10:23 - save this and go into unity we can
10:25 - select our bird graphics this takes in
10:28 - an AI path we'll drag that in from the
10:30 - enemy and now let's hit play and as you
10:33 - can see as soon as our bird changes
10:36 - direction it's also going to flip the
10:39 - sprite really really cool so that is how
10:42 - you can super easily set up pathfinding
10:44 - using a star however the a star path
10:47 - finding project is crazy powerful and it
10:50 - of course allows us to write our own
10:51 - custom script to control our AI so let's
10:55 - have a look at how we can do that I'm
10:56 - just going to create a backup of our
10:58 - enemy here so I'm gonna duplicate it and
11:00 - I'm gonna disable the old version now
11:03 - for our new enemy we can go ahead and
11:05 - get rid of the AR paths script
11:07 - the AI destination said it and under our
11:10 - graphics we can remove the enemy
11:12 - graphics script instead we're going to
11:14 - handle all of these things that we just
11:17 - removed inside of one master script that
11:19 - will create now called enemy AI this is
11:22 - going to be a new C sub script and
11:24 - before we open this up to edit it we
11:26 - want to add one more component so we
11:29 - have a seeker and circle Collider and
11:31 - our enemy AI we would also like to
11:33 - create a rigidbody 2d now you can pretty
11:36 - much use anything to drive the movement
11:38 - of your enemy it doesn't have to be a
11:40 - rigidbody you could also just use
11:42 - transform to translate or some kind of
11:44 - character controller but in my case I
11:47 - would like to use rigidbody because then
11:49 - we can easily apply other forces to our
11:51 - enemy and it's instantly going to work
11:53 - with the rest of the physics system
11:54 - which is just really nice for now I'm
11:57 - going to leave pretty much all settings
11:59 - as is I'm just going to go ahead and
12:00 - freeze the rotation on the Z and set the
12:03 - gravity scale to zero so if we play it
12:06 - now we can see that our bird is just
12:08 - gently floating in the air so to change
12:10 - this let's open up our enemy AI script
12:13 - now this group does have some links to
12:14 - it so I'm gonna go forward fairly
12:16 - quickly
12:16 - if there's something you don't
12:17 - understand that's totally fine if this
12:19 - is your first time working with AI you
12:21 - might be a tiny bit confused but let's
12:23 - try and take it one step at a time so
12:25 - the first thing that we'll need is some
12:27 - variables of course we'll need a
12:29 - reference to our targets let's create a
12:32 - public transform that will take in our
12:34 - target we also want some control over
12:37 - our speed so we'll create a public float
12:39 - speed and let's just default this to
12:41 - something like 200 next we'll need a
12:44 - public float which is going to store our
12:47 - next Waypoint distance this is the same
12:49 - thing that we adjusted earlier under our
12:51 - previous enemy they just called it pick
12:54 - next Waypoint distance and again it's
12:56 - just how close our enemy needs to be to
12:58 - a waypoint before it moves on to the
13:00 - next one so next Waypoint distance let's
13:04 - just default that to three finally we'll
13:07 - need a few private variables and for
13:09 - these we need to include the pathfinding
13:12 - namespace just like we did before so the
13:15 - first of these variables is going to
13:16 - contain our path this is the current
13:19 - path that we are following we
13:20 - also going to have an int that is going
13:23 - to store the current Waypoint along that
13:25 - path that we're targeting and finally we
13:28 - want to know whether or not we have
13:30 - reached the end of our path so let's
13:32 - create a bull called reached end of path
13:35 - and that's the fold it to false finally
13:38 - we need to be able to reference our CG
13:39 - script as well as our rigidbody 2d let's
13:42 - go ahead and create a seeker variable
13:45 - called seeker and a rigidbody 2d called
13:49 - RB now inside of our start method we can
13:51 - go ahead and find our seeker component
13:54 - so let's go seeker equals gate component
13:57 - of type seeker let's do the same thing
14:00 - for a rigidbody so that said RP equal to
14:02 - get component of type rigidbody 2d this
14:06 - is just going to find the two components
14:08 - on our object and then we're ready to
14:10 - generate a path to do this we access our
14:13 - seeker this is responsible for creating
14:15 - paths and we want to access the function
14:18 - called start path here we first need to
14:21 - define a start point so that's the
14:23 - current position of our enemy which is
14:25 - our beat position next up we give it the
14:28 - end of our path so that's our targets
14:30 - position so target dot position and
14:32 - finally we give it a function this is
14:35 - the function that we would like it to
14:36 - call whenever it's done calculating the
14:38 - path we do it this way because depending
14:40 - on the complexity of your scene
14:41 - generating a path might take a little
14:44 - while and we don't want our game to be
14:45 - hung up with generating a path it should
14:48 - just do this in the background and
14:49 - notify us once it's done so this is just
14:52 - the function that it should call when it
14:53 - is let's just call it on path complete
14:56 - we can then create this function so
14:58 - let's create a void on path complete
15:00 - this is going to take in a path called P
15:04 - and this is the generated path we then
15:06 - check if we got any errors in other
15:08 - words we want to make sure that we
15:10 - didn't get any errors so if we didn't
15:13 - get P error well then we want to set our
15:16 - current path equal to P the newly
15:19 - generated path and we also want to reset
15:21 - our progress along our path so we'll set
15:23 - current Waypoint equal to zero to start
15:26 - at the beginning of our new path awesome
15:29 - so now we should have generated a path
15:31 - and be ready to start following it in
15:33 - fact we can check if this
15:34 - but just saving this going into unity
15:36 - and we now have our target variable
15:39 - where we need to drag in our player and
15:41 - if we then hit play and go to gizmos to
15:44 - make sure our secret is included we can
15:46 - see the generated path we also see that
15:49 - it's not updating to follow our player
15:51 - it's just generated at the very
15:53 - beginning and our bird is also not doing
15:55 - anything to follow it at the moment so
15:57 - let's go ahead and change these two
15:59 - things first of all let's have our bird
16:01 - move to do this we go into our update
16:04 - method and the first thing that we want
16:05 - to make sure is that we have a path so
16:07 - if path is equal to null well then we'll
16:11 - just go ahead and return out of the
16:12 - function we also want to make sure that
16:15 - there are more waypoints in the path and
16:17 - that we haven't reached the end because
16:19 - if we have we want to stop moving so to
16:22 - do this we want to check if our current
16:24 - Waypoint is greater than or equal to
16:27 - path that vector path that count so the
16:31 - total amount of waypoints along our path
16:33 - well then we reached the end of the path
16:36 - so let's go reached end of path equals
16:38 - true and let's just return if a current
16:42 - Waypoint is not greater than or equal to
16:44 - the total amount of waypoints well then
16:47 - we can go ahead and set reached end of
16:49 - path to false and that's it so now we
16:52 - can go ahead and move our bird to do
16:54 - this we want to first of all get the
16:55 - direction to the next Waypoint along our
16:58 - path to do that we create a vector to
17:00 - let's call it direction and we want this
17:03 - to be equal to our path dot vector path
17:06 - and here we want to find our current
17:08 - Waypoint along that path so we'll pass
17:10 - in our current Waypoint so this gives us
17:13 - the precision of our current Waypoint
17:15 - and we'll subtract from that our current
17:17 - position this should give us a vector
17:19 - the points from our position to the next
17:22 - Waypoint we also want to go ahead and
17:24 - mark this as a vector two because our be
17:27 - the position is a vector two and so we
17:29 - need to cast this into one as well and
17:31 - finally we can wrap all of this in
17:33 - parentheses and add a dot normalized in
17:37 - order to make sure that the length of
17:39 - this vector will be one if you haven't
17:41 - worked a lot with vectors before simply
17:43 - think of this like we're pointing an
17:45 - arrow from our composition to the
17:47 - place where we want to be which is our
17:49 - next Waypoint and then making sure the
17:51 - length of that arrow is always 1 and we
17:53 - now get a force that we want to apply to
17:55 - an enemy to make it move in that
17:57 - direction
17:58 - so that's create a vector to its call it
18:00 - force and set it equal to our direction
18:02 - multiplied with our speed multiply it
18:05 - with time.deltatime we multiply it with
18:08 - time that that's a time to make sure
18:09 - it's not going to vary depending on the
18:11 - frame rate I also want to change this
18:13 - from an update to a fixed update fixed
18:16 - update is just like update however it's
18:18 - only called a fixed number of times per
18:20 - second which means that it's ideal
18:22 - whenever you want to work with physics
18:24 - finally we want to figure out the
18:25 - distance to our next Waypoint to do this
18:28 - we will go float distance and set it
18:31 - equal to vector to that distance between
18:34 - our current positions so our bead
18:36 - position and the next Waypoint so path
18:39 - dot vector path and we'll improve the
18:41 - current Waypoint we can then check if
18:44 - that distance is less than our next
18:47 - Waypoint distance well then we've
18:49 - reached the current Waypoint and we're
18:52 - ready to move on to the next one so
18:54 - we'll simply increase current Waypoint
18:55 - by 1 and that should work well then I
18:58 - just forgot the most important part
19:00 - which is actually adding a force to our
19:02 - enemies so let's just go RP dot add
19:05 - force and we'll just import our force
19:08 - vector that's all we need to do but it's
19:10 - quite an important step let's say that
19:13 - going to unity and hit play and as you
19:15 - can see our bird now moves but it does
19:17 - so without stopping the reason is we are
19:20 - applying a lot of force to our bird and
19:21 - it doesn't have anything to stop it
19:23 - again luckily we can easily add some air
19:25 - resistance also called linear drag to
19:28 - slow it down let's just set this to
19:30 - something like 1.5 and it's also
19:32 - increased the speed to something like
19:33 - 400 if we hit play now we can see that
19:37 - our bird indeed comes to a halt much
19:39 - better now we just need the path to
19:41 - update to follow around our player and
19:43 - doing this is actually fairly easy all
19:45 - we need to do is go to the top where we
19:47 - are currently generating our path at the
19:49 - start and stuff just doing this once we
19:52 - need to keep doing it at an interval
19:54 - this is super easy to set up using a
19:56 - function called invoke repeating this
19:59 - allows us to specify a method
20:01 - in our case we can create something like
20:02 - update path then a amount of time we
20:06 - want to wait until we call that method
20:07 - we just want to call it instantly so
20:09 - that set that to zero and then we can
20:11 - give it a repeat rate and this is the
20:13 - awesome part so we can have it update
20:15 - the path every second every other second
20:17 - or every half second which I'm gonna do
20:20 - then all we need to do is take this code
20:22 - that updates our path and put it inside
20:24 - of our own function so we'll create a
20:26 - void update path and we'll paste that
20:29 - code right in we also just want to make
20:31 - sure that we aren't currently updating
20:33 - our path and then begin updating once
20:35 - more so to do that we'll just write if
20:37 - seeker dot is done which means that it
20:41 - isn't currently calculating a path well
20:43 - then we can go ahead and start a new one
20:44 - and with that we can save go back into
20:47 - unity and they play and as you can see
20:49 - our bird is now continuously going to
20:51 - update its path towards our player
20:53 - really really cool now we just need to
20:56 - make our bird actually flip to a point
20:58 - in the direction it's traveling just
21:00 - like we did before with the bird
21:01 - graphics however now I would like to do
21:03 - this within the same script so let's
21:06 - just go to the top here and create a
21:07 - public transform which is going to
21:10 - reference our enemy graphics and then at
21:12 - the bottom here we just need to add some
21:15 - code very similar to what we did inside
21:17 - of our enemy graphics script in fact we
21:20 - can go ahead and copy this and then
21:22 - instead of using a path that decide
21:24 - velocity x-wind simply use RB velocity X
21:29 - and the same thing here RB dot velocity
21:32 - so just the current velocity of a
21:34 - rigidbody and we don't want to adjust
21:36 - transform that local scale instead we
21:38 - want to adjust enemy graphics dot local
21:40 - scale so let's save that go into unity
21:43 - let's drag in our bird graphics and hit
21:46 - play and as you can see our bird is now
21:48 - going to always point in the direction
21:51 - that it's traveling really cool in fact
21:54 - maybe an even better idea is using the
21:57 - force instead of our RB velocity this
22:00 - way it will actually rotate to point in
22:01 - the direction that it wants to travel
22:03 - and not just the result of our velocity
22:05 - so if we say that that should actually
22:07 - look even better yep I definitely like
22:11 - that quite a bit also just if you want
22:13 - to get rid of all these
22:15 - debug logs they might be kind of slowing
22:17 - down your system you can always go to a
22:18 - star and under settings you can go to
22:20 - debug and set path lurking to none that
22:24 - should help get rid of them
22:25 - awesome that's pretty much it for this
22:27 - video if you enjoyed it make sure to
22:29 - subscribe
22:29 - and bring that notification bill so you
22:31 - don't miss the next one also don't
22:33 - forget to check out skills chair simply
22:34 - click the link in the description to get
22:35 - started and the first 500 people we
22:37 - receive the first two months for free on
22:40 - that thanks watching and I hope you'll
22:41 - all find your path to the next video
22:45 - also special thing hey do you want to do
22:48 - it yeah you should do it
22:50 - alright thanks all of the patron
22:52 - supporters who donated April and a
22:54 - special thanks to affinity PBR Sybok
22:56 - mommy Dennis Sullivan Kris Shane
22:58 - Cleveland by basil basil Python Faisal
23:02 - Merrifield Lincoln Chang Lee licit Ronan
23:05 - Daniel - sanic Constantinus clintus
23:08 - nayaki hasaki Gregory Pierce Rob fern
23:11 - dr. poon