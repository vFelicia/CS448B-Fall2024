00:00 - - Now loops allow us to repeat code,
00:02 - now loops allow us to repeat
code, see what I did there?
00:06 - This means that we can repeat
certain parts of our programme.
00:09 - This is extremely handy
00:10 - as we often want things to
happen over and over again,
00:13 - depending on the situation.
00:14 - This allows us to do anything
00:16 - from printing the numbers one through 10,
00:18 - to creating a guessing game
00:20 - where the player has to guess a number.
00:22 - Here, we could have the
computer pick a random number
00:24 - between one and five.
00:26 - Then the player could type in a number.
00:28 - If the player types in the wrong number,
00:30 - we can simply allow them to guess again.
00:32 - We could then repeat this process
00:33 - until the player guesses the right number
00:35 - and we print out correct.
00:37 - So loops are extremely
important and really cool
00:40 - because they allow us to take
advantage of the computer
00:42 - in a way we haven't done before.
00:43 - But before we get into it,
00:44 - this video is sponsored by Jason Weimann.
00:46 - Jason is an industry professional,
00:48 - and he just created an amazing
course on game architecture.
00:51 - The course teaches you how to
structure your game and code
00:54 - in a professional manner
00:55 - to avoid all the headaches
you might run into
00:57 - when creating a bigger game.
00:58 - You'll learn everything
from writing testable code,
01:00 - project structure management,
01:02 - advanced state machine development,
01:03 - and the list goes on.
01:05 - The most awesome part is that
you get to learn everything
01:07 - while building your own unique RPG,
01:10 - where you get to build quest systems,
01:11 - learn about inventory
management, and interfaces,
01:14 - and even branching dialogue systems.
01:16 - New content is constantly being added,
01:18 - and you get access to live Q&A
sessions with Jason himself,
01:21 - along with email support
and a Discord channel
01:24 - where you can chat with
your fellow students.
01:25 - So for those of you
01:26 - who are looking to take your
coding to the next level,
01:28 - simply sign up now using
the link in the description.
01:31 - And the first 50 people
will get a free hoodie
01:34 - from Lines of Code.
01:36 - Isn't it pretty?
01:37 - Now in general, there
are two types of loops,
01:40 - for loop and while loop.
01:42 - Let's start by having
a look at the for loop.
01:44 - For loops are used when
we want to repeat code
01:46 - a certain number of times,
01:48 - let's say we want to print out
the numbers one through 10.
01:50 - Now you could just write
Console.WriteLine 10 times,
01:54 - but that quickly gets pretty cumbersome.
01:56 - Instead, we would simply use
a for loop that runs 10 times.
01:59 - We say that the for loop
runs for 10 iterations.
02:02 - The good thing about a for loop
02:04 - is that it gives us a variable
02:05 - that tells us what iteration
we're currently at.
02:07 - We often just called this i.
02:09 - We normally start this at zero.
02:11 - So the first time the
loop runs, i is zero,
02:14 - then one, then two, then three, and so on.
02:17 - And we can use this in our code.
02:19 - If we want to print out
the numbers one through 10,
02:21 - we just put Console.WriteLine
inside of our for loop
02:24 - and have it write out i plus one.
02:26 - So when we run our
programme, i starts at zero,
02:29 - and so zero plus one is one.
02:31 - The second time it prints
one plus one, which is two,
02:34 - and so on.
02:35 - Of course we still need some code
02:36 - that tells it how many
times it should repeat.
02:38 - We do this inside the parentheses.
02:40 - Now the syntax for this is a bit weird,
02:42 - but don't worry, you
will get the hang of it.
02:44 - So first off we write what should happen
02:46 - before the loop starts.
02:48 - Here we write int i equals
zero and then a semicolon.
02:52 - In other words, we create the i variable
02:54 - and set it equal to zero.
02:55 - We then write the condition
that needs to be met
02:58 - for our loop to keep running.
03:00 - In this case, we want the loop to run
03:01 - as long as i is less than 10.
03:04 - Again, we end this with a semicolon.
03:06 - Then finally, we need to tell the computer
03:07 - what happens after each loop.
03:09 - In our case, each time
we've gone through the loop,
03:11 - we want to increase i by one,
03:13 - the short hand notation
for this is i plus plus.
03:16 - So we are creating a variable called i,
03:18 - we're telling it to increment
by one after each iteration,
03:22 - and we want to keep running the loop
03:23 - as long as i is less than 10.
03:25 - And that's it.
03:25 - If we run our programme now,
03:26 - it prints out all the right numbers.
03:28 - But this is just counting to 10.
03:30 - We can do much cooler stuff
03:32 - by just changing the code
inside of our for loop.
03:34 - Let try it out.
03:35 - All right, so to create
a for loop, we write for,
03:38 - and we could actually create this by hand,
03:40 - or we could go down to this
option that says for loop
03:44 - and simply hit Tab.
03:46 - And as you can see, this
is going to auto complete
03:48 - a for loop for us.
03:49 - And the cool thing is that first here
03:51 - we can go ahead and
specify the variable name.
03:54 - We could set this to x or
j or just the standard i,
03:58 - and if we hit Tab again,
we can choose a length
04:01 - or how many times we
want the for loop to run.
04:03 - So in our case, we can
just set that to say 10.
04:06 - If we then hit Tab again,
04:07 - it's going to complete the for loop,
04:09 - and we can now write some code inside.
04:11 - So a handy little trick there.
04:13 - Now to print out the
numbers one through 10,
04:16 - we Console.WriteLine, and then
we simply feed it i plus one.
04:22 - Again, because i start at zero
04:24 - and we want to go one, two, three,
04:26 - and zero, one, two.
04:28 - And indeed, if we run this programme,
04:30 - we can see that it shows
the numbers one through 10.
04:33 - However, there's actually
another way to do this.
04:35 - Instead of adding one onto i every time,
04:38 - we could go up here and
simply start our i variable,
04:42 - add one, so it doesn't start
at zero, it starts at one,
04:45 - and it will keep going
as long as i is less than
04:48 - or equal to 10.
04:50 - So this way, we're actually
just setting our i variable
04:53 - to what we want it to
be from the beginning.
04:55 - And if we run our programme,
04:56 - we can see that it does
the exact same thing.
04:59 - So what this means
05:00 - is that we can easily change
the parameters of our for loop
05:03 - in order to have it do different things.
05:05 - Say, for example, we wanted
to count down from 10,
05:08 - instead of up to 10,
05:10 - here we could just set i equal
to 10 from the beginning.
05:13 - Then every time the loop is done,
05:15 - instead of incrementing by one,
we want to decrement by one.
05:19 - So i is going to be reduced by one here,
05:22 - and we want to keep doing this
05:24 - for as long as i is greater than zero.
05:28 - So i starts at 10, we're
going to subtract one
05:31 - for every time we've gone through the loop
05:32 - and we're going to keep doing this
05:34 - as long as i is greater than zero.
05:35 - And if we now run the programme,
05:37 - as we can see, it gives us
the numbers 10, nine, eight,
05:40 - all the way down to one,
really, really cool.
05:44 - But just printing out
i isn't very exciting.
05:47 - Let's instead have it calculate
some cool numbers for us.
05:50 - I'm going to set i here back to one.
05:52 - I'm going to change the condition
to less than or equal to 10.
05:57 - And again, I'm going to
change it to i plus plus.
06:00 - So we are back to counting from one to 10.
06:03 - Then instead of just writing out i,
06:05 - let's go ahead and
calculate something cooler.
06:07 - So something that I really like
06:09 - are the numbers that you get,
06:10 - if you take two and raise
it to the power of x.
06:14 - This is going to give some cool numbers
06:16 - because two to the power of one is two,
06:18 - two to the power of two is
two times two, which is four,
06:22 - two to the power of three
is two times two times two,
06:25 - which is eight, and then
16, then 32, 64, and so on.
06:31 - So it gives us these
really cool even numbers
06:33 - that are doubled every time.
06:35 - And if we imagine that instead of x here,
06:38 - we just use our i variable,
06:40 - we can create this series
of numbers really easily.
06:43 - So to calculate this, let's
first create a variable
06:45 - that is going to hold the result.
06:47 - Let's make this an integer,
06:49 - let's call it result, and
let's write an equal sign.
06:52 - And now to calculate
two to the power of i,
06:55 - we actually need a mathematical function.
06:58 - So far, all of the math we've done
06:59 - has been addition or subtraction,
07:01 - multiplication, or division,
07:03 - which has these very simple operators.
07:06 - But now we need to raise two
to the power of another number.
07:09 - To do this, we use the Math class.
07:12 - This has a bunch of mathematical functions
07:14 - that do all kinds of things.
07:16 - So if we write dot here,
07:18 - we can actually see these
different functions,
07:20 - we have sine and tangent,
we have the square root,
07:23 - we can round a number or truncate it,
07:25 - we can do all kinds of things here.
07:27 - And what we want to look
for is the power function,
07:30 - or raising a number to the
power of another number.
07:33 - Here, we open some parentheses,
07:36 - and first we write in the numbers
07:37 - that we want to raise to a power.
07:39 - So in our case, that's
two, then we write comma,
07:42 - and then the number that
specifies the power.
07:44 - In our case, we want to
raise two to the power of i.
07:46 - Let's close this off.
07:48 - And as you can see, this
is giving us a red line.
07:51 - It saying, cannot implicitly
convert type double to int.
07:55 - The reason for this is
that our math function
07:57 - returns a double and our variable
is currently of type int.
08:01 - So we could either convert
this number to an integer,
08:04 - or we could simply change
our variable type to double.
08:07 - Let's just do that.
08:08 - Then instead of writing out i,
08:10 - let's simply write out the result.
08:12 - And if we now run this programme,
08:14 - as we can see, it gives us
the right series of numbers.
08:16 - We have two, four, eight, 16, 32, 64,
08:19 - and it keeps going until
the number gets very big.
08:22 - And indeed, there are 10 of these.
08:24 - But currently, our programme
does the same thing every time.
08:28 - It would be cool if we
could allow the user
08:30 - to determine how many
numbers we should print.
08:32 - To do that, let's go to the top here.
08:35 - And let's write Console.Write,
08:38 - how many cool numbers do you want?
08:42 - And then give them some
space to write that in.
08:45 - Then we can gather the result
into some kind of variable,
08:48 - I'm going to write int,
let's call it count
08:51 - and set it equal to Console.ReadLine.
08:55 - And of course, remember,
08:56 - we need to convert this to an integer.
08:58 - So we'll go Convert.ToInt32,
and wrap that around.
09:02 - There we go, so we're asking
the user to input a number,
09:05 - they input a number, and we call it count.
09:07 - And now right now our for
loop is going from one to 10,
09:10 - instead of just going to 10 every time,
09:12 - we can actually go in
here and have it continue
09:15 - as long as i is less
than or equal to count.
09:19 - And so our for loop will
repeat a number of times
09:22 - determined by what the user has put in.
09:25 - And if we run this now,
09:27 - our programme asks how many
cool numbers do you want,
09:29 - we can put in, say 15.
09:31 - And as you can see, it
prints out 15 of the numbers
09:35 - in this two to the power of i series.
09:37 - Awesome!
09:38 - So that's how you can get
started repeating code
09:40 - using for loops.
09:42 - but one of the most common
ways to use for loops
09:44 - and where they really start to shine
09:46 - is when we have a look
at lists and arrays.
09:49 - And we will do that in the next video.
09:50 - So just know that for loops
are about to get even cooler.
09:54 - Now the second type of
loop is the while loop.
09:57 - This is used when we want to repeat code
09:59 - for as long as a certain condition is met.
10:01 - Here, we often don't know beforehand
10:03 - how many times the loop is going to run.
10:05 - Say we're creating a programme
to simulate dice rolls,
10:08 - and we want to see how many
attempts it takes to roll a six.
10:11 - In this case, a while loop is perfect,
10:13 - because we can keep repeating the code
10:15 - that rolls the die until we hit a six.
10:17 - And the syntax is actually
much simpler than a for loop.
10:20 - In fact, it's completely
identical to an if statement.
10:23 - We write while, then parentheses,
10:25 - followed by some curly brackets.
10:27 - And inside the parentheses,
10:28 - we put the condition that needs to be met
10:30 - in order for a while loop to run.
10:32 - In this case, we probably have
some kind of roll variable
10:35 - that is some number between one and six,
10:37 - depending on what we rolled.
10:39 - So in our condition, we just need to say
10:40 - that we want our loop to keep running
10:42 - as long as roll is not equal to six.
10:45 - Then inside of our curly brackets,
10:46 - we can simply roll the die
10:48 - by setting our roll variable
10:49 - to some number between one and six.
10:51 - And so this will keep repeating
10:52 - until we roll the right number.
10:54 - Now this is also where
we have to be careful
10:56 - with while loops,
10:58 - because if we don't write them correctly,
11:00 - we might accidentally put in a condition
11:02 - that will always be true.
11:03 - So if we accidentally check
11:04 - if a roll is not equal to seven,
11:06 - our roll will always have a
value between one and six.
11:10 - And so this loop will
keep running infinitely
11:12 - and crash our programme.
11:13 - Don't panic if this happens,
11:15 - it just means that our while
loop doesn't know when to stop.
11:18 - And trust me, you will make
this mistake at some point,
11:21 - every programmer has.
11:22 - Now let's try it out in VS Code.
11:24 - Now for this programme, we
want to have the ability
11:26 - to create random numbers.
11:28 - And to do that,
11:29 - we first have to kind of
define a number generator.
11:33 - So we're going to type in a Random here,
11:35 - we're then going to type in
11:36 - the name of our number generator,
11:38 - I'm just going to call it numberGen.
11:41 - And we can set it equal to a new Random,
11:45 - followed by two parentheses
and a semicolon.
11:48 - I know the syntax for this
is currently very weird.
11:50 - It looks kind of like a variable
11:52 - and kind of like a function,
and then there's this new word,
11:55 - just ignore it for now,
11:56 - we'll get into why this
is written this way later
11:59 - when we learn about classes.
12:01 - But for now, just write after me.
12:03 - Just know that what this allows us to do
12:05 - is go numberGen., and then right Next,
12:10 - and this is a function
12:11 - that is going to give us a random number
12:13 - between a minimum and maximum value.
12:15 - So we can put in two values here,
12:17 - and it's going to give us a
random number between the two.
12:21 - And we'll use that in a second.
12:22 - But first, we probably want
to create some variables.
12:25 - We want an integer that is
going to store what we rolled,
12:29 - and let's just default that to zero.
12:31 - We're also going to
create another integer.
12:33 - And this is going to keep track
12:35 - of how many attempts we've
used in order to roll that six.
12:39 - So let's just call it attempts,
12:40 - and also default this to zero.
12:42 - And now we can create our while loop.
12:45 - So we want to create a while,
open and close some parentheses,
12:49 - open and close some curly brackets.
12:51 - And inside of the parentheses here
12:53 - we want to put our condition.
12:55 - In our case, we want to keep rolling
12:57 - as long as our roll is not equal to six,
13:01 - in which case we've rolled a six
13:02 - and we want to exit
out of this while loop.
13:05 - Then inside of the loop,
13:06 - we can go ahead and set
roll equal to a random value
13:11 - between one and six.
13:12 - And this is where we
use a number generator.
13:14 - So we go numberGen.Next,
just like I showed you,
13:18 - this is a function that will
give us a random number.
13:20 - And first we input our minimum number
13:23 - that is going to be one, this
is what we call inclusive,
13:27 - which means that the number that we write
13:29 - is going to be included in
the numbers that are possible.
13:32 - So we can roll one, two, so comma here,
13:36 - and then the second value,
13:37 - which is going to be the
maximum number that we can roll.
13:40 - And this is exclusive.
13:42 - So this number is not included
in what it's possible.
13:46 - So in other words, we
need to write seven here.
13:48 - So we can go from one,
two, three, four, five, six
13:53 - and then the seven is exclusive.
13:55 - I know you might be thinking now,
13:57 - why have the first number be inclusive,
13:59 - and the second number be exclusive,
14:01 - that's just very counterintuitive.
14:03 - But there is actually
a good reason for this,
14:05 - and you will see it later.
14:07 - For now, we can just close
this with a semicolon.
14:09 - And that should give us a random
number between one and six.
14:12 - Then we can maybe write
out what we rolled,
14:14 - so we can do Console.WriteLine,
14:18 - you rolled, and then put in our roll.
14:21 - And finally, after each attempt,
14:24 - we want to go ahead and
increase attempts by one.
14:28 - So we're going to increment attempts here,
14:30 - by just writing attempts plus plus.
14:33 - And if we just run this programme now,
14:35 - we can see that I rolled a two,
a four, a five, then a one,
14:38 - and it keeps going until I rolled a six.
14:41 - Awesome!
14:42 - Now of course, after we roll the six,
14:44 - we want to write out how
many attempts that took,
14:47 - and we do that by adding
some code down here.
14:50 - And the reason for this
14:51 - is that our code is
read from the top here,
14:53 - so we create a random number generator,
14:55 - we create two integers,
14:56 - we then enter into this while loop,
14:58 - and this is going to keep
repeating until we roll that six.
15:02 - And only once we do that is
the code going to continue down
15:06 - and run whatever we put down here.
15:08 - So think of it like our computer
15:10 - is getting stuck on this loop,
15:11 - and it won't get to
whatever we write down here
15:14 - until after it's finished.
15:16 - And once it is, we can
write Console.WriteLine,
15:20 - it took you, then we can
write out how many attempts,
15:24 - and then another string
here, attempts to roll a six.
15:29 - There we go.
15:30 - And indeed, if we run
this programme again,
15:32 - we can see that I rolled a bunch of times,
15:34 - and it took me 10 attempts to roll a six.
15:38 - Awesome!
15:39 - And a cool thing about looping
15:40 - is that we can actually make
it a tiny bit interactive
15:43 - because right now it just
prints all the numbers at once,
15:46 - which is a bit overwhelming.
15:48 - So let's instead have the user press a key
15:50 - before we continue to the next roll.
15:52 - So at the top here, we can
just say Console.WriteLine,
15:57 - press enter to roll the die.
16:00 - Then inside of our while
loop, before we actually roll,
16:03 - we want to go ahead and put in
some kind of Console.ReadKey,
16:08 - so this is just going to wait
for the user to press any key.
16:11 - Right now we're not checking
16:12 - if the user presses the
Enter key or anything else,
16:14 - but I think that's fine for this example.
16:17 - So what we're doing
16:17 - is we're running out press
enter to roll the die,
16:20 - and then inside of our while loop,
16:22 - before we do each roll every
time this loop goes through,
16:25 - we're going to wait for
the user to press a key.
16:28 - So if we now run the programme,
16:29 - it says Press Enter to roll the die.
16:31 - I'm going to press Enter
here, we will do three,
16:33 - I'm going to press again, another three.
16:35 - And I'm going to keep going
like this until we roll a six.
16:38 - And then it says it took you
four attempts to roll the six.
16:41 - Very, very cool.
16:43 - Now for this week's challenge,
16:44 - I want you to expand this
idea of rolling a die.
16:47 - In fact, I want you to create a programme
16:49 - that rolls two dies at once.
16:52 - You can then check how many attempts
16:53 - it takes before you roll two a kind.
16:56 - So here's an example
of how that might look.
16:58 - As you can see, it says
press enter to roll the dice.
17:01 - I'm going to press Enter here,
17:02 - and it's going to roll
both dice one and two.
17:05 - On the first one, I rolled a three,
17:07 - and the second one I rolled one.
17:09 - And I can keep doing this
until a roll two of a kind.
17:12 - As you can see, for my last
roll, I roll two threes,
17:15 - and it took me nine attempts
to roll to of a kind.
17:18 - Now to do this, you need to
create a nother roll variable,
17:21 - then change the condition
of the while loop
17:24 - so that it will run as long as
the two rolls are different.
17:27 - Then inside the while loops,
17:29 - make sure that you're
assigning random numbers
17:31 - to both roll variables.
17:33 - And finally, you want to print
out the number of attempts.
17:36 - So have fun with it.
17:37 - And remember that as always,
I've posted my solution
17:39 - to this week's challenge
on the Brackeys forum.
17:42 - So check that out using
the link in the description
17:44 - if you get stuck.
17:45 - That's pretty much it for this video.
17:47 - If you enjoyed it, make sure you subscribe
17:48 - and ring that notification bell
17:50 - so you don't miss the next one.
17:51 - Also, don't forget to
check out Jason's course
17:53 - on game architecture.
17:54 - Learn how to properly make big games
17:56 - by simply clicking the
link in the description
17:58 - and get a free hoodie included.
18:00 - On that, thanks for watching.
18:01 - And I will see you in the next video.
18:03 - Thanks to all the
awesome patron supporters
18:05 - who donated in June,
18:06 - and especially thanks to Nubby Ninja,
18:08 - Faisal Marafie, Lost to
Violence, Loved Forever,
18:10 - STR Mike, Piano Sathornlak,
18:12 - Replica Studios, Jason
Uritescu, Leo Lisetre,
18:15 - Alison the Fierce, Michail
Korobov, Owen Cooper,
18:18 - Gregory Pierce, Naoki Iwasaki, Dante_Sam,
18:20 - Donatien Gascoin, SiriusWolf,
TheMighyZeus, Jacob Sanford,
18:24 - Marc-Antoine Girard, and Erasmus.
18:26 - You guys rock!