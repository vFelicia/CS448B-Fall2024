00:00 - thanks for tuning in at
00:03 - braies hello everyone and welcome to
00:05 - video number five in the how to make a
00:08 - 2d platformer course today we're going
00:11 - to be taking a look at something really
00:13 - awesome which is importing and setting
00:15 - up our 2D character sprite so um today
00:19 - we're going to be both importing the
00:21 - graphics and setting up the import
00:23 - settings um and we're also going to be
00:26 - rotating the arm to always Point towards
00:29 - the mouse cursor so later we can um do
00:33 - some cool shooting mechanics we are not
00:36 - going to be setting up the animations
00:38 - today that's for a future video cool so
00:42 - throughout this video we're going to be
00:43 - using the 2D assets pack which is of
00:46 - course available at bra.com so if I just
00:50 - load up the 2D course here which you can
00:52 - access from the projects or from the
00:55 - homepage uh then there's a download
00:57 - button uh that says download Tod assets
01:00 - and it's completely free it just
01:02 - downloads a zip file uh so it should be
01:05 - easy to open and it's ready to use
01:07 - basically cool so let's get started with
01:10 - today's video I've already opened up
01:12 - unity and uh there's nothing changed
01:16 - here um everything is like before so
01:18 - let's just start importing so open up
01:21 - the 2D assets pack open up the 2D
01:24 - platform uh folder and in here we have
01:28 - two new files and these uh cool uh this
01:33 - cool astronaut is made by a guy called
01:36 - aramid and I'm probably going to
01:39 - pronounce his last name wrong so it's on
01:42 - the screen and also you should check out
01:44 - his Facebook page which is in the
01:46 - description he's a really cool artist so
01:49 - uh check him out uh also to all of you
01:52 - who uh are currently working on a
01:54 - character or would still like to submit
01:56 - something to the series um please go
01:59 - ahead and just sent me over stuff and I
02:01 - might include it in the 2D assets pack
02:03 - still even though I'm going to be using
02:05 - the astronaut player um for this course
02:09 - other people might choose another one so
02:11 - it's always great to have more in here
02:13 - so cool so let's um actually let me just
02:18 - explain we have a Photoshop file here uh
02:21 - for those of you working in Photoshop if
02:23 - there's something you want to edit here
02:25 - it's split up into different layers and
02:27 - should be pretty easy to access and then
02:30 - we have a PNG which we just going to be
02:32 - using you can import the Photoshop
02:34 - directly into unity and it will take
02:36 - care of everything uh but for Simplicity
02:39 - sake and in case you don't have
02:40 - Photoshop installed we're just going to
02:42 - be using the PNG so let's take this and
02:45 - then simply drag it into unity and
02:47 - release it over the project
02:50 - Pane and now let's select it and uh
02:52 - change the Sprite mode to multiple and
02:56 - change the pixels to units to let's try
02:58 - 15
03:00 - and then change the filter mode to point
03:03 - hit apply now we can go into the Sprite
03:06 - editor and in here we can uh select the
03:09 - different Sprites we'll do what's called
03:12 - slicing up the uh Sprite sheet into
03:15 - multiple Sprites I've set up the Sprite
03:19 - sheet to make automatic slicing pretty
03:22 - easy to do so let's head up in the left
03:24 - hand corner and click slice and select
03:26 - the type automatic and now we actually
03:29 - ready to slice this so you can see it
03:32 - sets it up perfectly by the way if you
03:34 - see these green circles around the
03:37 - screen uh I'm trying out a new piece of
03:39 - recording software and it likes to do
03:41 - that for some reason so now we can have
03:44 - a look at how our Sprites are set
03:47 - up so now we can see that it's actually
03:50 - set up everything perfectly and if we
03:53 - want to check this uh we can go up here
03:55 - in the right hand corner and change from
03:57 - RGB mode to Alpha mode so now we are
04:00 - just seeing the alpha Channel and we can
04:02 - see that everything is actually uh
04:04 - selected just fine so let's head back
04:07 - into RGB mode and let's just select the
04:11 - arm here and let's first off rename this
04:15 - to arm and let's change the pivot to
04:20 - left this way we can simply rotate
04:22 - around this pivot whenever we want the
04:24 - arm to
04:26 - rotate awesome uh you could go ahead and
04:29 - name each of these Sprites uh I'm just
04:31 - going to go ahead and rename the
04:35 - astronaut
04:37 - Idol and the
04:41 - astronaut
04:42 - jump and then I'm going to rename the
04:45 - weapons this up here is a full walk walk
04:48 - cycle which we're going to be using when
04:49 - the character uh needs to walk around so
04:52 - let's select the gun here let's select
04:55 - uh let's call
04:57 - this um machine gun and let's call this
05:03 - one for pistol I just quickly added that
05:06 - just so we had a smaller weapon to work
05:09 - with awesome uh now let's hit apply and
05:13 - let's close this window and we are
05:16 - actually ready to uh start importing
05:20 - this into uh our scene so let's open
05:25 - this up simply click the arrow here to
05:27 - open up the individual Sprite
05:30 - and we can select each one of them and
05:32 - what we want right now is we want to
05:34 - find the idle one here the astronaut
05:38 - whoops I spelled that incorrectly let's
05:40 - head back into the Sprite editor
05:43 - as Dron not
05:45 - idle like so cool so select the
05:48 - astronaut Idol and let's drag this into
05:51 - the scene so simply click and drag and
05:56 - release and this looks pretty nice in
05:58 - scale um it might be just a bit too
06:02 - large I want the pl to be pretty small
06:04 - and then I want to fill up the space
06:06 - with plenty of
06:07 - explosions uh so let's actually go under
06:11 - the import settings here and change this
06:13 - to let's try 18 and it'll apply and this
06:17 - is much nicer it's just a bit smaller
06:20 - than um the player from before which is
06:23 - fine for
06:24 - me cool so now that we have this guy
06:27 - here uh let's go ahead and drag
06:29 - him under the player so first select the
06:31 - player and disable the Sprite renderer
06:34 - so we can get rid of the uh robot and
06:37 - let's have the graphics be a separate
06:40 - object uh just a child of the player
06:43 - this way we have more control over the
06:45 - positioning of the graphics and we can
06:47 - flip them when we change direction um
06:51 - individually so we don't have to
06:53 - constantly follow the player so let's
06:55 - just direct the astronaut Idol under the
06:57 - player object and let's just reset the
07:02 - um
07:04 - position uh and you can do this by right
07:07 - clicking on the transform and hitting
07:08 - reset position so that will just zero
07:11 - out the position and now let's simply
07:14 - drag him down a bit on the y axis here
07:17 - and again if you are dragging something
07:20 - uh click to drag and then hold down
07:22 - shift to constrain it to one
07:24 - axis and uh that actually doesn't look
07:27 - too bad let's try and hit play
07:29 - just see how this functions and it
07:32 - already looks pretty awesome cool so
07:35 - what we want to do now is we want to add
07:37 - in our arm and to do
07:40 - this uh all we really need to do is to
07:44 - select our arm and then drag it into the
07:47 - inspector or I the Hier I mean and let's
07:52 - just drag this under our player object
07:54 - also and let's just reset the position
07:58 - here
08:00 - like so
08:01 - cool now we can take our
08:04 - arm and we can try and position
08:07 - it uh in the center of our player so
08:12 - that when we rotate it it can rotate the
08:16 - whole way around without uh being
08:19 - weirdly placed this looks pretty
08:21 - nice and now let's select both the arm
08:25 - and the as astronut Idle and let's
08:27 - change the Sorting layer to player and
08:30 - let's also to make sure that the arm
08:33 - will always render on top of the player
08:35 - let's change uh the ordering layer to
08:39 - one actually let's change it to two
08:42 - because later when we add weapons we
08:44 - might want them to be below the arm but
08:46 - above the player so let's change this to
08:48 - two that's that just makes sure that
08:51 - even though they're in the same sorting
08:53 - layer uh it will still be on
08:56 - top cool uh so what we can can do now is
08:59 - we can place a script on the arm here
09:03 - that will rotate it towards the mouse
09:06 - cursor but what we also want to do is uh
09:11 - do uh fiddle around with how the arm is
09:14 - uh rotated when we equip weapons and
09:17 - such that's something we're going to
09:18 - look at later because right now you can
09:20 - see that the arm is
09:22 - automatically um is automatically scaled
09:27 - with the character that's not really
09:29 - something we want so actually let's just
09:31 - go ahead and change that first that will
09:33 - make uh debugging easier later so let's
09:36 - go ahead and make sure that the arm is
09:38 - independent of the rest of the graphics
09:40 - because right now it scales with them
09:42 - and that's not something we want we want
09:44 - it to Simply Point towards the mouse
09:46 - cursor so in order to do this all we
09:48 - need to do is we want to select the
09:51 - player and let's find the platformer
09:53 - character 2D script so let's double
09:56 - click this and this was the script
09:59 - script that we imported in the very
10:00 - first
10:01 - tutorial also I might want to mention
10:04 - this uh you can see right now that I
10:06 - have a theme on mono develop which I
10:09 - just think is a bit more relaxing on the
10:11 - eye if you want the same uh cool thing
10:13 - in uh cool theme instead of the uh black
10:17 - text on white background you can simply
10:19 - go under um I think it's uh where are
10:23 - the options it's tools options and then
10:27 - you can go down on
10:30 - uh text editor then syntax uh syntax
10:33 - highlighting and change to Oblivion you
10:36 - will have to click okay before it
10:38 - updates um so simply change it from
10:40 - default to Oblivion and you can get the
10:43 - same color
10:45 - scheme cool so first thing we want to do
10:48 - is we want to establish a connection to
10:51 - our uh Graphics because instead of
10:54 - changing the whole player we simply want
10:57 - to change the a uh the uh the Graphics
10:59 - down here so let's uh rename this to
11:04 - graphics and let's simply store these
11:07 - Graphics in a variable and then simply
11:09 - change the scale of those instead of the
11:12 - scale of the whole player because right
11:14 - now when we uh move all the way down to
11:17 - the button uh we can see that we have a
11:20 - function called
11:22 - flip and what this function does it's uh
11:25 - is it will flip the character to always
11:28 - face the direction it's walking in and
11:30 - it basically does this by creating a
11:32 - vector 3 with the transform. local scale
11:36 - and it then modifies the x value of that
11:40 - uh Vector 3 simply flips it by
11:43 - multiplying with minus one and then it
11:45 - feeds it back in but instead of
11:48 - transform. local scale uh we want the
11:51 - child here being the graphics. local
11:55 - scale so in order to do this let's make
11:57 - a new variable
11:59 - and we're going to do a
12:01 - public um actually let's not let's just
12:04 - make this private because we're not
12:06 - going to be assigning it ourselves we're
12:08 - going to be assigning it in the uh awake
12:10 - function so let's just do um
12:16 - transform and let's call this
12:18 - player
12:20 - graphics and then a semicolon so this
12:25 - will be a
12:27 - reference to the
12:30 - graphics so we can change
12:36 - direction then in the awake function
12:39 - where we are setting up the references
12:41 - we want to do player
12:44 - Graphics equals
12:48 - transform. find child so the transform
12:52 - um uh class has a pretty cool um
12:56 - function that will allow us to find the
12:59 - child of an object and this is better
13:00 - than doing a game object. find because
13:03 - it doesn't have nearly as many game
13:05 - objects to look uh through so we will
13:08 - find the child and we search uh by name
13:12 - so let's open up some parentheses here
13:14 - and inside of these two signs we will
13:16 - type Graphics simply type in the name
13:19 - there and uh we should actually be good
13:22 - to go so now let's move uh what we can
13:25 - also do actually is we can say that
13:30 - if our player Graphics is equal to null
13:35 - meaning that that if it couldn't find
13:38 - oops if it couldn't find the graphics
13:42 - object we are going to give it a uh
13:45 - warning here so we're going to do
13:46 - debug.log
13:48 - uh let's do debug.log error and let's
13:53 - say let's freak
13:56 - out there is is
13:59 - no graphic uh
14:04 - Graphics
14:06 - objects um as a child of the
14:13 - player this way later when we get some
14:16 - bugs and try to change things around we
14:18 - have clever error messages telling us
14:20 - what's going wrong cool so now let's
14:23 - move all the way to the button instead
14:25 - of doing transform. local scale we're
14:28 - going to do player graphics. local scale
14:31 - and the same down here so player
14:33 - graphics. local scale now let's save
14:36 - this out and when we hit uh head back
14:39 - into Unity here and hit play you can see
14:42 - that it's only our Graphics that will
14:45 - change direction the arm will just point
14:47 - the same way now let's make the arm
14:50 - Point towards the mouse cursor and in
14:52 - order to do this uh we're going to have
14:54 - to do a few calculations so let me just
14:57 - show you uh the basics of those
15:00 - here so right now you can see uh I'll
15:04 - just bring over the layers panel here
15:05 - also so I can enable and disable some
15:08 - layers cool so as you can see here we
15:11 - have a uh X and A Y AIS this right here
15:15 - is the Aron so that's 0 comma Z and we
15:19 - have a player who's standing at 1 comma
15:21 - 1 and then we have the mouse cursor
15:24 - which is currently at 3A
15:26 - 3 so what we need to do
15:28 - [Music]
15:30 - is first off we need to subtract the uh
15:35 - position of the player from the position
15:37 - of the mouse cursor so 3A 3 minus 1A 1 =
15:43 - 2a2 so that gets us the point right
15:47 - here then what we need to do is we need
15:49 - to uh use a function called atan
15:52 - 2 that will go ahead and find a line
15:56 - that goes from 0 comma 0
15:59 - up to the point 2 comma
16:02 - 2 and then it will return the um the
16:06 - angle between the x-axis and that line
16:10 - and that's the angle that we want to add
16:13 - to our arm so if that makes any sense uh
16:17 - then great if not then I'm going to show
16:20 - you how to code it right now and you can
16:22 - just skip over it and it might make more
16:24 - sense when you see it in code so let's
16:26 - try this out cool so let's just move
16:29 - this over and let's open up the mono
16:33 - develop oh no we need to add a script so
16:36 - let's select the arm let's hit add
16:40 - component new
16:41 - script and let's call
16:45 - this sorry let's call this arm
16:49 - rotation so I create an ad and let's
16:52 - double click this to open it up in mono
16:55 - develop so here we go it's open it up
16:58 - and uh what we want to do is uh is
17:01 - actually pretty simple uh Unity has a
17:04 - builtin function for this called
17:06 - transform. look at but this will allow
17:09 - us to give uh will give us more control
17:13 - uh the the method we're going to be
17:14 - using now will give us more control than
17:17 - transform that look at and also we it
17:19 - will allow us to constrain the uh
17:21 - movement to just uh one single axis
17:24 - which is the z-axis that's what we're
17:26 - going to be rotating around
17:29 - cool so in order to actually do this
17:32 - this let's this uh just remove the start
17:35 - function and then inside the function
17:38 - update we're going to be writing uh some
17:40 - different stuff let's start out by
17:42 - writing Vector
17:46 - 3 and let's call this
17:49 - difference equals camera main do screen
17:53 - to
17:56 - worldpoint and we're going to feed it
17:59 - our Mouse position so inpoint do mouse
18:05 - position let me just full screen this
18:08 - input. mouse
18:11 - position and then we're going to
18:13 - subtract it with transform.position
18:17 - so this is the first part of everything
18:20 - we are simply uh making a vector 3
18:22 - called difference and uh this is just
18:24 - going to be the difference between uh
18:27 - the position of our Mouse in 3D space
18:31 - and the position of our
18:34 - character then what we doing after is we
18:37 - are normalizing this so we are taking
18:39 - the difference and we're doing Dot
18:42 - normalize this is something you can do
18:44 - to 3D vectors in
18:46 - unity and uh what this does is uh it
18:51 - sounds really complicated but it's
18:53 - really not uh what we're doing is we are
18:56 - um claming all these values to be uh all
19:01 - equal to one so when we take the sum of
19:04 - the vector meaning that we say x + y + z
19:09 - we will uh that will be equal to 1 so
19:13 - normalizing means that we still remain
19:17 - uh we we still keep the same proportions
19:19 - between the different numbers but we are
19:21 - just making all of them smaller so that
19:24 - they when they are added together they
19:27 - will equal one
19:29 - so this will still give us uh the
19:31 - correct point and it will allow us to
19:33 - give us the right direction but it's
19:36 - just doing smaller numbers so here we
19:38 - are
19:42 - normalizing the
19:44 - vector this means
19:47 - meaning uh that all the that the sum of
19:53 - the
19:54 - vector will be will be be
19:59 - equal to
20:01 - one and that's basically it so uh the
20:05 - importance of this I'm not going to go
20:06 - into here and above this we are
20:10 - simply
20:12 - subtracting the
20:14 - position of the
20:17 - player uh from the mouse
20:25 - position cool then next next up we are
20:28 - going to let me just move this up to a
20:31 - line
20:33 - above let's just go like
20:36 - this so we can see everything cool um
20:40 - then in the next line we're going to tie
20:42 - make a new float and let's call this a
20:47 - roation uh let's just do Rod Z for
20:51 - rotation on the Z axis and we're going
20:54 - to equal this to
20:56 - math Dot a turn
21:00 - two and then we're going to input the
21:03 - difference doy and the difference
21:08 - dox and we are going to multiply it by
21:13 - math do R to
21:16 - degree so what we're doing here is we
21:19 - are finding that
21:22 - um we are finding here let me just get
21:24 - this over here we're finding this angle
21:27 - so we are making the V Vector between uh
21:31 - at this point so we are finding the
21:32 - vector that goes from 0 comma 0 and then
21:35 - up to 2 comma 2 and then we are finding
21:39 - the angle between the x axis and that
21:43 - vector and then we're converting that
21:46 - angle from radians over to degrees
21:49 - because they're much easier to deal
21:52 - with so that's all we are doing here we
21:56 - are making a variable stored in
21:58 - here we are finding the angle and here
22:01 - we converting it to
22:04 - degrees cool uh so let's just comment
22:07 - this out we are simply find the angle in
22:12 - degrees as simple as
22:15 - that and uh then at last we're simply
22:18 - going to apply this rotation so we're
22:20 - going to do
22:22 - transform.
22:24 - rotation equals
22:26 - Quan Ula and that means that we will uh
22:31 - pass it uh degrees and not
22:34 - radians and then we are going to do0 f
22:38 - comma 0 f comma rotation
22:43 - set and uh here we might need to add on
22:46 - 90 let's just do Plus 90 and see if this
22:49 - works if it's rotated weirdly maybe
22:52 - pointing in the opposite direction we
22:53 - need to do negative 90 uh this is where
22:56 - you can correct that if you have some
22:58 - offset cool so let's save this out and
23:01 - let's hit back into Unity actually let's
23:04 - just store the offset in a variable
23:06 - that's just good practice so let's open
23:08 - it up here let's make a variable and
23:12 - call this uh public
23:15 - float let's just do an integer that
23:18 - should be plenty so public in um
23:21 - rotation
23:23 - offset and we're going to default this
23:25 - to 90 and then here here instead of 90
23:28 - we're going to do
23:30 - rotation
23:32 - offset awesome so now when we head back
23:34 - into
23:35 - Unity we should see a variable here and
23:38 - we do and when we hit play you can see
23:43 - that the arm actually follows the cursor
23:46 - but we have the wrong siding side
23:49 - pointing towards it so that's why we
23:51 - have the rotation offset let's try and
23:53 - just zero this
23:56 - out and then it's actually working cool
23:59 - so this if again if you're using the arm
24:02 - I am uh then just set that value to zero
24:06 - but if you're using some other acid it
24:08 - might be really
24:10 - useful cool so now we actually have an
24:12 - arm that will Point towards the mouse
24:15 - cursor so that's really great uh we've
24:18 - come a long way
24:20 - already um let me just check the time
24:23 - here so yeah we've been going for a long
24:26 - time I think we're just going to
24:27 - conclude uh with this and then in the
24:30 - next video we can take a look at stuff
24:32 - like um animations adding some weapons
24:37 - uh there's plenty of stuff to do you can
24:39 - see there's also some already some uh
24:42 - weapons inside of the Sprite ADL uh so
24:45 - they're ready to being applied so that's
24:48 - going to be really awesome so thanks for
24:50 - watching and I'll see you in the next
24:56 - video
24:59 - [Music]