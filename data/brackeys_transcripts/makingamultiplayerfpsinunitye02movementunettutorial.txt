00:00 - thanks for tuning in at brackets hello
00:04 - and welcome to the second video on
00:06 - creating a multiplayer FPS in unity
00:08 - today we finish what we started in the
00:10 - last video which is creating the
00:12 - character controls for our player so if
00:16 - you haven't watched that yet I recommend
00:18 - you do so by clicking the screen now and
00:20 - if you have well enjoy so now we can
00:23 - jump over to a player motor and actually
00:25 - make this happen so if we look over here
00:28 - and we are going to have a private
00:32 - vector3 called velocity and we are going
00:37 - to just default this to vector 3.0 you
00:40 - can just leave this that's what it's
00:42 - going to default to anyways I'm also
00:45 - going to have some kind of private
00:46 - reference to our rigidbody so rigid body
00:50 - and we'll just call this RB then in our
00:53 - start method just as before just as we
00:58 - did with the player mode here we can say
01:00 - our B equals get component and of type
01:04 - rigidbody and again we are requiring the
01:11 - component dump here so that's completely
01:13 - legit and then here we can make some
01:17 - kind of method for setting our velocity
01:20 - variable because what basically what we
01:23 - want to do is we want to have this
01:24 - player controller control this variable
01:29 - and then we want to have a fixed update
01:31 - loop here that uses this variable to
01:35 - move the player so the kind of method
01:39 - that we want to control this variable
01:43 - it's simply going to be called move and
01:45 - it takes in a vector3
01:48 - velocity and I'm using underscore
01:50 - velocity here and this is why it's
01:51 - important because we want to
01:53 - differentiate between this velocity and
01:56 - this velocity and then we simply say
02:00 - that we want velocity to be equal to the
02:02 - velocity passed in so this here takes or
02:10 - gets a movement
02:12 - lecture and then we want to have some
02:17 - kind of fixed update loop void fixed
02:20 - update run every physics iteration so
02:30 - this runs on a fixed time and basically
02:34 - we want in here to perform our movement
02:36 - so we want to call some kind of method
02:39 - that will actually do this movement so
02:42 - let's create that now so perform
02:46 - movement based on velocity variable and
02:52 - we'll just make this a private method so
02:55 - void perform movement and this is going
03:03 - to check if velocity it's not equal to
03:07 - vector 3.0 so if we actually want to
03:10 - move well then we want to set or then we
03:15 - want to say that we can call a method
03:20 - called move position on a rigid body and
03:23 - this is a super useful method this takes
03:27 - in the position that we want to move to
03:29 - and this is different from transform to
03:32 - translate because this will actually
03:35 - stop the rigid body from moving there if
03:37 - it collides with something on the way so
03:40 - this does all of the physics checks and
03:42 - the collision checks and all that but is
03:45 - much easier to control than the add
03:48 - force method so in here we want to pass
03:52 - in our current position so we either say
03:54 - transform the position or rigid body
03:57 - back position that's going to be
03:59 - completely the same and then we want to
04:01 - add on to that our velocity multiplied
04:05 - with time dot fixed Delta time and we'll
04:10 - just close that off so this will
04:13 - actually this will move our rigid body
04:16 - our player to the position of our player
04:20 - plus the velocity vector so on that
04:25 - actually
04:26 - once the movement and that's all we have
04:27 - to do in order to get this working so
04:31 - let's go ahead and try this out now and
04:32 - we should be able to move in the game
04:34 - let's it play and you can see that we
04:39 - are indeed now moving we can't jump and
04:42 - we can look around but that's a start of
04:45 - course okay so next up we want to have
04:49 - some kind of rotation so in our
04:54 - playercontroller we want to now
04:56 - calculate calculate rotation as a 3d
05:03 - vector and we do this by first getting
05:08 - some input so our Y rotation is going to
05:12 - be equal to input dot get access raw and
05:16 - this is very similar to what we were
05:18 - doing up here and the input that we want
05:21 - to get is called Mouse X and you want to
05:25 - of course build this completely as I've
05:27 - done here remember the space remember
05:29 - the capital M and X and again that's
05:33 - something set up in the unity input
05:36 - section and then we want to create a
05:40 - vector here which is going to store our
05:43 - rotation and it's going to be equal to a
05:46 - new vector and it's going to be 0 comma
05:52 - Y rotation comma 0 and we'll multiply
05:58 - this by some kind of sensitivity
06:01 - variable so we just like we have the
06:03 - speed up here we also want some kind of
06:05 - look speed or mouse sensitivity or
06:09 - whatever you want to call this I'm going
06:11 - to make this a private float called look
06:16 - sensitivity and we'll just default that
06:20 - to oh I don't know three cool so we'll
06:28 - simply multiply that down here look
06:30 - times look sensitivity so you will
06:33 - notice here that I'm only using our Y
06:36 - rotation which will be when we move
06:38 - mouse to left or to the right side and
06:42 - that means our x-value from the mouse so
06:47 - that's kind of weird when you think
06:48 - about it but when we move our mouse on
06:51 - the X we want to rotate around the Y and
06:53 - I'm only doing this here because the Y
06:57 - rotation is the only thing we won't
06:59 - affect want to affect our player the the
07:03 - rotation around the x axis meaning
07:05 - tilting up and down well that's
07:07 - something we want to only affect our
07:10 - camera because we don't want the entire
07:13 - speed to rate rotate up and down that
07:16 - would mess up our movement so when doing
07:20 - this know that this is just for turning
07:24 - so calculate rotation as a 3d vector and
07:27 - we could just say this applies or let's
07:34 - just do this turning around that's what
07:40 - we're doing here and then we want to
07:43 - apply this so we want to apply camera
07:47 - rotation oh not camera rotation we want
07:50 - to reply rotation I was thinking about
07:53 - the camera now and we simply do a motor
07:56 - route motor dot rotate and this is
07:59 - another method that we're going to be
08:01 - creating so and we then pass in the
08:03 - rotation vector there and let's go ahead
08:06 - and create that in the character motor
08:08 - now with the player motor and in here we
08:11 - then want to go up and make a variable
08:14 - and we call this a or we make this a
08:18 - private vector3 again called rotation
08:21 - and we'll default it to vector 3.0 and
08:27 - then we want to make some kind of a
08:31 - method that will change this so that's
08:34 - the rotate method and we'll take in a
08:37 - rotation and we'll simply set rotation
08:42 - equal to underscore rotation and this
08:47 - gets a rotation no vector in there and
08:51 - then in the fixed update we want to
08:53 - actually perform the rotation and we do
08:59 - this by creating a new method of course
09:02 - so we want to perform rotation Void
09:09 - perform rotation this doesn't take in
09:13 - any arguments just like our perform
09:14 - movement method and we simply want to
09:17 - say RP dot move rotation and whenever it
09:23 - comes to rotation there is some there
09:26 - are some weird stuff basically because
09:28 - rotations in unity goes through what is
09:32 - called the a continuance system if you
09:35 - will so quantonium
09:37 - are basically just like vector threes
09:40 - but with an imaginary component and what
09:44 - this means I will leave to our
09:46 - mathematician to explain because
09:48 - quaternions are quite difficult to
09:50 - understand but we of course have some
09:54 - really cool functions in unity that
09:58 - takes care of all of this weird
10:00 - calculation stuff for us so just like
10:03 - when we are moving moving our player we
10:08 - want to get our rotation just love here
10:10 - we get our position and we add on the
10:12 - velocity well here we get our rotation
10:14 - and then we add on or we multiply that
10:18 - with quaternion this is what I'm talking
10:22 - about quaternion dot Euler and Euler
10:25 - angles are the angles that we know
10:27 - that's the x y&z rotation that's it
10:30 - takes in a simple vector three so in
10:32 - here we can simply input our rotation so
10:35 - our B dot rotation is a quaternion and
10:38 - quaternion Euler will take in our vector
10:40 - 3 and may
10:41 - get into a quaternion so that make sure
10:44 - that we don't have to understand what's
10:46 - going on we can simply do this
10:48 - calculation and that's really awesome
10:50 - so let's simply save that now head into
10:54 - unity here and we should be able to look
10:57 - around on the x-axis or around the
11:01 - y-axis so now we can actually walk
11:03 - around but we can really aim so let's
11:06 - let's make the tilting of the camera
11:11 - let's go back in here find our
11:14 - playercontroller and add another segment
11:16 - so this one is going to be calculating
11:19 - camera rotation so I'm just going to
11:21 - duplicate this entire section and we'll
11:24 - just call this calculate camera rotation
11:26 - as a 3d vector and this is not going to
11:32 - be y rot but instead be oops it's going
11:38 - to be X rod and it's going to equal get
11:44 - access raw of miles Y now and this is
11:48 - not going to be called rotation but
11:49 - camera rotation and it's not going to
11:56 - rotate around the Y but instead rotate
11:59 - around the X and then we apply it by
12:04 - using another function which is going to
12:07 - be called rotate camera and we're going
12:10 - to input our camera rotation instead of
12:12 - the rotation there so apply camera
12:15 - rotation so this is again around the
12:18 - x-axis and then we jump into the player
12:21 - motor then us of course
12:23 - starting to notice a pattern here so we
12:25 - then create a private camera private
12:28 - vector3 camera rotation equals vector
12:35 - 3.0 we jump we jump down here and create
12:43 - create a method for gets a rotational
12:47 - vector for the camera rotate camera
12:53 - and it's going to take in the rotation
12:56 - or you could call this a camera rotation
12:59 - and it's simply going to set camera
13:01 - rotation equal to underscore camera
13:05 - rotation just like we've done with all
13:08 - of the other methods and then down here
13:11 - when we perform the rotation we can do
13:13 - this in the same function call we of
13:16 - course want to apply this to the camera
13:18 - so we need a reference to our camera and
13:21 - even better we can make this reference
13:24 - optional so if we don't have a camera
13:26 - that we want to be controlled we can
13:29 - make a game that only our kind of moves
13:32 - around the Y or rotates around the wine
13:36 - lots of games have a fixed tilt if you
13:39 - will and only allows you to turn so
13:42 - let's just make this optional first off
13:45 - we want to create this reference and
13:46 - agains I want to use a serialized field
13:49 - private camera and we'll just name this
13:52 - cam you won't be able to name this
13:54 - camera because that's a method or that's
13:57 - a member that is included in
14:00 - monobehaviour
14:01 - so um we have the cam and then down here
14:06 - we can simply check if cam is not equal
14:11 - to null meaning we've put in a camera
14:14 - well then we want to say that cam
14:17 - transform
14:18 - God rotate so here we don't need to do
14:21 - any rigid body calculation we can simply
14:24 - rotate using the transformed and rotate
14:27 - method and how do we want to rotate we
14:30 - want to rotate using camera rotation and
14:35 - this might be in the wrong direction so
14:39 - we'll check this now I am boobs of
14:43 - course we need to put in the camera here
14:45 - player you'll see we didn't get an error
14:49 - here just nothing happened really so
14:52 - that makes it optional so we want to
14:54 - drag in our camera and now hit play and
14:57 - now I'm moving up and I'm moving down so
15:01 - you can see that's inwards so the only
15:03 - thing we need to do to fix this is
15:05 - simply put a small
15:07 - - there that will make this the opposite
15:11 - a vector so that will inverse it and now
15:18 - we can look around just like we want to
15:22 - so that feels pretty nice actually and
15:25 - you can of course adjust both your
15:27 - movement speed ooh this is fast and your
15:32 - look sensitivity even while the game is
15:34 - running cool so that's the very base of
15:39 - our movement and I think I'm going to
15:43 - leave the tutorial here then we'll
15:46 - create all of the spring functionality
15:49 - and the flying stuff in a later video
15:52 - just so this won't get crazy long so
15:56 - this was already a really long tutorial
15:58 - and I've probably also have to split it
16:00 - up into two parts but I hope you enjoyed
16:03 - it and that you were able to follow
16:05 - along if you have any great suggestions
16:07 - for where this series might go and what
16:10 - you want to see in this course but then
16:12 - of course leave them down below or on
16:15 - the brakus forum and again thanks for
16:18 - watching and I'll see you in the next
16:20 - video