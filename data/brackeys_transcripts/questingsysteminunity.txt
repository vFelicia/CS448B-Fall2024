00:00 - in this video we'll go on a quest to
00:02 - make the best questing system the world
00:03 - has ever seen or at least a working one
00:06 - but first this video is sponsored by a
00:08 - skill share skill shares an online
00:10 - learning community with more than 25,000
00:12 - quality classes on game development tech
00:14 - and more if for example you're making a
00:16 - 2-d game you can check out this really
00:17 - cool course on how to make 2d video game
00:20 - art this will teach you how to make
00:21 - characters animations backgrounds and
00:24 - all in all how to make custom graphics
00:26 - for your game Skillshare is the perfect
00:27 - platform to keep learning and thriving
00:29 - and a premium skill share membership
00:31 - gives you unlimited access to all
00:32 - classes for less than $10 a month join
00:35 - more than 7 million other creators by
00:37 - simply clicking the link in the
00:38 - description and the first 500 people
00:40 - will receive their first two months for
00:42 - free also I am super excited to announce
00:44 - that the community is hosting a nother
00:46 - practice game jam the gem will start on
00:50 - February 16th and ends a week later on
00:52 - February the 23rd the theme will be
00:54 - announced when the gem starts I
00:56 - encourage all of you to go join now
00:58 - everything is hosted on itch and I'll
01:00 - have a link in the description to where
01:01 - you can read more and join the event and
01:03 - if you've never participated in a jam
01:05 - before I really cannot recommend it
01:08 - enough it's a great way to challenge
01:09 - yourself in a completely stress-free
01:11 - environment after all game jams all
01:13 - about having fun I'll definitely be
01:15 - participating myself and we're also
01:17 - planning to make a video about our
01:19 - favorite entries once the jam is over I
01:21 - recommend visiting the game jam channel
01:23 - on our discord where people are going to
01:25 - be talking about the event and posting
01:27 - progress updates as we go along
01:28 - there's of course a link for that in the
01:30 - description as well now christening
01:32 - systems are one of those mechanics that
01:34 - vary a lot depending on the game both in
01:36 - terms of how you find them what you
01:38 - should do to complete them and also what
01:40 - rewards you get from doing so however
01:42 - I've gone it and created a really simple
01:44 - game that we will use as an example to
01:46 - build a questing system on top of NL of
01:49 - course make sure to show you how you can
01:50 - go about implementing it in your own
01:52 - game with that said let's start questing
01:55 - greetings traveler so as you can see
02:00 - I've gone ahead and created a simple
02:02 - example scene here we have a canvas with
02:04 - a player window that is currently
02:06 - displaying information about our player
02:08 - we have the health experience some gold
02:11 - and the player has two action
02:13 - you can either fight or he can try to
02:16 - pick up a quest to represent the player
02:19 - I have an empty object with a player
02:20 - script and as you can see we have the
02:22 - health experience and gold here if we
02:24 - open up the player script we can see how
02:26 - I've implemented this it's just three
02:28 - basic public int and then we also have
02:30 - this function for going into battle this
02:33 - is called whenever you press the fight
02:35 - button on the UI and it's simply going
02:36 - to subtract one health because we
02:38 - probably lost some health in the fight
02:40 - give us a tiny bit of experience and a
02:42 - tiny bit of gold that's really all there
02:44 - is to the game right now if we go ahead
02:47 - and play you can see that it compressed
02:49 - this fight button and the health is
02:51 - gonna go down and the experience end
02:53 - code is gonna go up a tiny bit however
02:55 - if I hit the quest button nothing
02:57 - happens so now it's up to us to create
02:59 - the questing system also the UI that I'm
03:01 - using is from the ultimate game UI pack
03:03 - from the unity asset store if you want
03:05 - to pick it up for yourself of course
03:07 - have a link to where you can get it in
03:08 - the description now the first thing that
03:10 - we want to do for a questing system is
03:12 - to define what a quest is I've gone
03:14 - ahead and created some UI for this again
03:17 - this is just completely placeholder UI
03:19 - there's no scripting involved here so my
03:22 - window basically has room for a quest
03:24 - title a description of the quest some
03:26 - kind of experience reward a gold reward
03:29 - and a button to accept the quest so
03:32 - let's try and implement these parameters
03:33 - through script we'll go to the project
03:35 - create a new C subscript and let's call
03:38 - it quest let's double click it to open
03:40 - it up in Visual Studio and let's go
03:42 - ahead and remove the two functions and
03:44 - we also don't want it to derive from
03:45 - monobehaviour so we'll go ahead and
03:47 - remove that as well now the first thing
03:49 - that we're going to need is a string
03:51 - with the title so we'll create a public
03:53 - string with the title of the quest also
03:55 - create a public string with the
03:57 - description we create a public int for
04:00 - the experience reward and another public
04:03 - in for the gold reward again what you
04:06 - want to have here completely depends on
04:08 - your game you can fill in extra
04:10 - variables or remove some if you want
04:11 - it's completely up to you we also need a
04:14 - variable to determine whether this quest
04:15 - is currently actives so let's go to the
04:18 - top here and create a public bowl called
04:20 - is active and that's all we'll do for
04:23 - the quest at the moment so let's save
04:25 - that and hit back into unity
04:27 - and the next thing that we want is to
04:28 - have some kind of way for the player to
04:30 - get the quest and this is of course
04:33 - again going to depend on your game in
04:35 - our case we are just gonna press the
04:37 - quest button and we are going to get a
04:38 - quest however in many games there are
04:40 - NPCs that you need to talk to in order
04:42 - to get quests or maybe even items that
04:45 - you need to find that will set you on
04:46 - new quests so how you want to trigger
04:48 - this is completely up to you I'm gonna
04:50 - go ahead and create an empty object
04:52 - which is going to be our quest giver
04:55 - let's go ahead and create a quest giver
04:57 - script on this object let's double click
05:00 - it to open it up in visual studio again
05:02 - we'll remove the two functions here we
05:04 - do want this to derive from
05:05 - monobehaviour and first of all this
05:07 - quest giver needs a quest to give away
05:09 - so we'll create a public quest and here
05:12 - we're referencing the script that we
05:13 - just created so the quest is going to
05:15 - hold all of these variables and let's
05:18 - just call it quest it's probably also a
05:20 - good idea that our quest giver has
05:22 - access to our player so that when he
05:24 - wants to give the quest to our player we
05:26 - can reference him and actually set the
05:28 - quest so let's also create a public
05:30 - player and let's just call it player and
05:33 - if we just save this right now
05:35 - without writing any extra logic we
05:37 - should be able to go into unity and our
05:39 - quest giver now has the field for a
05:41 - player so we can simply take our player
05:42 - object and drag it in there however we
05:45 - are not able to currently see our quest
05:48 - here
05:48 - and that's weird because we should have
05:50 - a title and description and some rewards
05:52 - but they're not currently showing up the
05:55 - reason for this is that if we want this
05:57 - stuff to show up in unity we first need
05:59 - to mark the quest class as system that's
06:02 - serializable this way unity knows that
06:05 - it can serialize these fields and so
06:06 - they will show up in the inspector and
06:08 - indeed it does now under a quest here we
06:10 - can define all these values so I'm gonna
06:12 - give it a title I'm gonna call it on the
06:14 - hunt for the description I'm gonna write
06:17 - venture out into the wild and kill three
06:21 - enemies to get the reward as the
06:24 - experience reward I'll set 30 and for
06:27 - the gold I'm gonna set 780 and by
06:30 - default I don't want this to be active
06:31 - it's now that we have a reference to a
06:33 - player and we've created a quest we're
06:35 - ready to define what's gonna happen when
06:37 - every this quest is given so in my case
06:40 - I'd like to do
06:41 - in two steps the first one is whenever
06:43 - we press quest
06:44 - I want a quest window to pop up then the
06:48 - player has the option to accept this
06:49 - quest and if he does the quest is going
06:51 - to be given to the player if not
06:53 - nothing's gonna happen so to do this I'm
06:56 - gonna disable the quest window and I'm
06:58 - gonna go into our quest giver script and
07:01 - I'm gonna make a function called public
07:03 - void open quest window and to open this
07:08 - window we first need a reference to it
07:10 - so I'm gonna create a public game object
07:12 - I'm gonna call it quest window and now
07:15 - inside of our function we can basically
07:17 - say quest window dot set active to true
07:20 - we also want to make sure that we update
07:22 - all the info on our quest windows so
07:24 - inside of our quest window we of course
07:26 - have the title text the description the
07:29 - experience in gold so let's go ahead and
07:31 - create references for this will create a
07:33 - public text and in order to access the
07:36 - text type we need to be using unity
07:39 - engine WI and will call this title text
07:43 - also create another public text we'll
07:46 - call this one description text create
07:48 - another one you guessed it experience
07:50 - text and gold text then when we open the
07:54 - quest window we'll go ahead and set
07:55 - title text dot text equal to quest title
08:00 - we'll do the same for description text
08:02 - dot text set it equal to quest dot
08:05 - description experience text the text
08:08 - equals quests that experience reward and
08:11 - since this is an integer we need to do
08:14 - dot to string to convert it into a
08:16 - string I will do the same thing with
08:18 - gold text awesome so if we save this go
08:22 - into unity and select our quest giver
08:24 - we now have fields for all this stuff so
08:27 - for quest window we'll drag in the
08:29 - window itself for our title text we'll
08:31 - drag in the UI title here we'll drag in
08:33 - the description XP and gold and if we
08:36 - now disable this quest window and go
08:38 - into our player window and select the
08:40 - quest button we can add an on-click
08:42 - event so I'm gonna add a new one I'm
08:44 - gonna put in our quest giver here and
08:47 - I'm gonna make it so that whenever we
08:48 - press this button we're going to go to a
08:50 - quest giver and called the open quest
08:52 - window function and this is again
08:54 - one of those examples where you might
08:56 - not want to do this using a button on
08:59 - the UI you might want to do this when
09:00 - you speak to an NPC or when you reach a
09:03 - certain level that's completely up to
09:05 - you but just for simplicity's sake I'm
09:07 - calling this through the UI so if we now
09:10 - play and hit the quest button we can see
09:13 - that a window pops up it says on the
09:15 - hunt venture out into the wild and kill
09:18 - three enemies to get the reward we have
09:20 - 30 XP as a reward and 780 gold if we
09:24 - press accept nothing happens that's the
09:27 - next thing that we should do we should
09:28 - go ahead and create a public void here
09:30 - let's call this one accept quest and
09:33 - when we do this we want to go quest
09:35 - window dot set active to false so
09:38 - disabling the quest window again we also
09:40 - want to set the quest to active because
09:42 - we've now accepted it so quest that is
09:44 - active equals true and finally we want
09:47 - to give this quest to our player so how
09:51 - do we most efficiently do this well one
09:54 - way would be to simply go to our player
09:56 - script and create a variable here of
09:59 - type quest called quest this way inside
10:02 - of our quest giver script we can simply
10:04 - go player that quest equals the quest
10:08 - really really simple of course this will
10:11 - only allow you to have one quest at a
10:12 - time if you want to have multiple quests
10:15 - you can simply turn this into a list
10:17 - where you can just add quests and run
10:19 - time but for now let's keep it at one so
10:21 - now in the UI we need to go to the quest
10:24 - window and find the accept button and
10:26 - whenever we click on this we want to go
10:29 - to the quest giver and access the
10:31 - function called accept quest if we play
10:34 - this we should see that if we press a
10:37 - quest hit accept and then select a
10:40 - player he now has a quest that is active
10:42 - with all the information that we've
10:45 - given awesome so the final thing that's
10:47 - left to do is to track our progress in
10:49 - this quest in other words we need to
10:51 - define some kind of quest goal that we
10:53 - can try to reach because right now we
10:55 - can find as many times as we want we're
10:58 - never going to reach the end of this
10:59 - quest so to do that let's go ahead and
11:01 - create a separate script let's create a
11:03 - sub script and let's call it quest goal
11:06 - I'm gonna double click on this
11:08 - we want to remove the two functions and
11:10 - also this shouldn't derive from mono
11:12 - behavior now you're probably going to
11:14 - have different goals for different types
11:16 - of quests some quests are gathering
11:19 - quests where you need to go and find as
11:20 - many objects as possible others are kill
11:23 - quests where you need to kill a bunch of
11:24 - enemies sometimes of a certain type and
11:27 - depending on the type of goal there are
11:29 - different actions that we need to take
11:31 - to further our progress in the quest now
11:34 - they're definitely multiple ways to set
11:35 - this up we're gonna take a fairly
11:37 - similar route here using enums to define
11:39 - the cold type but you could definitely
11:41 - also do this using inheritance in fact
11:43 - if that's the way you want to go I'm
11:45 - gonna have a link in the description to
11:46 - a series that shows you how to do that
11:48 - so first we need to define the different
11:50 - types of goals to do this we'll go under
11:53 - the class and create a public enum and
11:55 - we'll call it gold type and here we can
11:58 - define the different types we're gonna
11:59 - have a kill quest a gathering quest
12:02 - you could easily input more here such as
12:05 - an escort quest or maybe actually not
12:07 - that one
12:08 - I've played too much water for craft to
12:10 - include that one so once you've defined
12:11 - the different types we can go to the top
12:13 - here and we can create a public gold
12:16 - type and let's call it gold type we also
12:19 - need a way to keep track of our progress
12:21 - in the quest so we'll go public int
12:23 - required amount and public int current
12:27 - amount so if we need to kill three
12:29 - enemies we'll set required amount to
12:31 - three and whenever your current amount
12:32 - is three or more the quest is complete
12:35 - let's actually create a quick function
12:37 - for checking this so let's create a
12:39 - public fold because we're going to
12:41 - return true or false
12:42 - and let's call it is reached to check if
12:44 - the goal has been reached here we'll
12:46 - simply return and the boolean that we
12:49 - want to return is current amount is
12:51 - greater than or equal to required amount
12:54 - and if you've never seen this syntax
12:57 - before we're basically just saying that
12:59 - if this here is true so if our current
13:01 - amount is equal to or exceeds the
13:04 - requirement then we'll return true for
13:06 - this function if not then we'll return
13:08 - false so it's pretty cool shorthand
13:11 - syntax we also need to go to the top
13:13 - here and mark this class as system dot
13:15 - serializable because we want to be able
13:17 - to edit it inside the inspector and if
13:20 - we now go into our quest
13:22 - at the bottom here we'll go ahead and
13:23 - add a public quest goal and we'll just
13:27 - call it goal and save this we can go
13:30 - into unity and select our quest giver
13:32 - and we now see that under our quest we
13:34 - also have this goal we can select a goal
13:37 - type between kill and gathering I'm just
13:39 - going to leave this one and kill and a
13:40 - required amount let's set that to three
13:43 - for this quest really really cool but
13:46 - how do we increase the current amount
13:47 - well to do this we could go into the
13:49 - player script and whenever your player
13:52 - goes into battle we lose some health and
13:54 - gain some experience and some gold but
13:56 - we also kill an enemy so this is
13:58 - probably a good place to access our
14:00 - quest and let it know that we've killed
14:02 - an enemy - that will write if quest dot
14:05 - is active we only want to do this if
14:07 - we've accepted the quest in that case we
14:09 - can go quest dot goal and here we want
14:13 - to trigger some kind of function inside
14:14 - of our goal that lets it know that we've
14:16 - killed an enemy so let's go into our
14:18 - quest goal and let's create a public
14:20 - void enemy killed and here we can simply
14:24 - take the current amount and increase it
14:26 - by one but of course we don't want to do
14:28 - this if this is a gathering quest so if
14:30 - the go type is set to gathering then we
14:33 - don't want to further our quest by
14:34 - killing an enemy so let's just create a
14:36 - quick if statement here saying that we
14:38 - only want to do this if the goal type is
14:40 - equal to goal type dot kill and if
14:43 - that's the case but then we'll increase
14:45 - the current amount if you want the quest
14:47 - to only be about certain types of
14:48 - enemies this would also be a good place
14:50 - to do it
14:51 - you could for example give all the
14:52 - enemies for this quest a certain tag and
14:54 - then pass in the tag of the enemy killed
14:57 - as an argument and then in here you
14:59 - could check if the tag of the enemy
15:00 - killed corresponds to the tag for this
15:03 - quest so you can see how this is fairly
15:05 - modular you could also go ahead and do
15:07 - pretty much the same thing for items so
15:09 - if this was a gathering quest
15:12 - well then instead of an enemy killed we
15:13 - could do and item collect it and in this
15:16 - case we only want to increase the
15:18 - current amount if the gold type is equal
15:19 - to gold type gathering so it's really
15:23 - easy to expand upon this with other
15:24 - types of quests again this is not a
15:27 - solid as using inheritance but it will
15:29 - get you pretty far so now we can go into
15:31 - our player and now we have a function
15:33 - here so quest goal dot and
15:35 - killed constantly called that function
15:37 - and we can even check if we completed
15:39 - the quest by doing so so if quest dot
15:43 - goal that is reached well then we just
15:46 - complete the quest and we can go ahead
15:48 - and increase our experience so we'll say
15:50 - experience plus equals quest experience
15:53 - reward gold plus equals quest stud gold
15:57 - reward and we also probably want to mark
15:59 - our quest as complete so let's go quest
16:01 - start complete and this is not a
16:04 - function that we've created yet so let's
16:05 - save that go into our quests let's
16:08 - create some kind of complete function
16:10 - here so public void complete and for
16:13 - this example we'll set is active to
16:15 - false so that we don't have the quest
16:17 - anymore
16:18 - let's also just throw out a debug
16:20 - deadlock saying that the title of the
16:22 - quest was completed and that should be
16:25 - the end of a questing system if we now
16:28 - go into unity hit play take a look and
16:31 - our player here we can currently see
16:32 - that we don't have an active quest all
16:34 - this is empty and the quest is not
16:37 - active if we then hit the quest button a
16:40 - window appears if we accept it we get
16:43 - the quest on the player we can then
16:45 - fight a few enemies you can see each
16:47 - time we do the current amount in our
16:49 - goal goes up and once it reaches three
16:52 - we get a bunch of experience a bunch of
16:54 - gold and it says down here that the
16:57 - quest on the hunt was completed yay from
17:01 - here it's really up to you to implement
17:02 - this system into your own game come up
17:04 - with a bunch of fun quest types and
17:06 - really just go nuts with it this is not
17:08 - a perfect fully fledged system but it
17:11 - should act as a good baseline to build
17:13 - upon again if you want to go more in
17:14 - depth with your questing system I will
17:16 - have a link in the description to where
17:18 - you can learn more about how you can use
17:19 - inheritance and delegates to make it
17:22 - even more solid but I'm just gonna stick
17:24 - with this for now that's pretty much it
17:25 - for this video if you haven't already
17:27 - joined the practice game jam I
17:28 - definitely recommend you do so now and
17:30 - don't forget to check out Skillshare
17:31 - simply click the link in the description
17:33 - to get started on that thanks for
17:34 - watching and I will see you in the next
17:36 - video
17:49 - thanks to have the awesome patreon
17:51 - supporters who donated in January and
17:53 - special thanks to James P Jax - Bert and
17:55 - you can link Oh John Shannon infinity
17:57 - PPI
17:57 - Sybok mommy Dennis Sullivan Travis Dylan
18:00 - faceverify Lila set Ronan Clinton Vince
18:02 - Kyra Chris Gregory Pierce killed Swedish
18:05 - key Rathbun Timah photo park and Rasmus
18:07 - you guys Rock