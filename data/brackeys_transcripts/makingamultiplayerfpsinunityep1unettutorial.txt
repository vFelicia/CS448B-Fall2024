00:00 - thanks for tuning in at brakus hello and
00:04 - welcome to the first video on creating a
00:06 - multiplayer FPS in unity so this is the
00:09 - subject requested by so many of you guys
00:12 - and I thought I would finally go ahead
00:14 - and cover this in a series and it's a
00:17 - great time to do so because unity quite
00:20 - recently released a unit or unity
00:23 - networking which is their new networking
00:25 - solution and I can tell you it's it's
00:28 - actually pretty great so that's what
00:30 - we're going to be doing and we're going
00:32 - to be creating the game in c-sharp and I
00:35 - do expect you to have some understanding
00:38 - of basic unity concepts and programming
00:41 - concepts but that being said I will
00:43 - explain a lot of stuff along the way as
00:46 - much as possible cool
00:48 - so before we go ahead and get started
00:49 - with today's video which is setting up
00:51 - our player and the player controls I
00:55 - just quickly want to mention that if you
00:57 - want to support me and the series and
00:59 - the other series I've going you can go
01:01 - to break is calm and I do have a donate
01:04 - button here it helps out a lot and keeps
01:06 - me going and also if you have any
01:09 - questions throughout this course I
01:11 - suggest you go to forum practice comm
01:13 - where you can make a post or a topic
01:16 - here and you will almost certainly get
01:19 - some answers cool so I just quickly want
01:23 - to give you a taste of what it is we are
01:26 - going to be making and I don't know how
01:28 - much of it we are going to be able to
01:30 - cover in this first video but you can
01:32 - see here I've made this test scene and
01:34 - this is just a project I use for testing
01:36 - some stuff out and this is the actual
01:40 - player and I know that he looks kind of
01:43 - funny but I was pictured thinking that
01:45 - we could make this kind of sci-fi like
01:48 - and make him some kind of Spheeris robot
01:52 - with a thruster down here and I have the
01:56 - weapon rotate around this sphere and
01:58 - therefore because he's kind of
02:01 - levitating in the air while we play I've
02:03 - made the controls almost spring-like
02:07 - and I've made him a gift given him the
02:12 - ability to fly so we have these thrusts
02:14 - of force and fuel and reagent speed and
02:18 - controls down here and you can see that
02:21 - I've created a player motor and a player
02:22 - controller script which which actually
02:25 - controls his movement so that's what
02:27 - we're going to be looking at today and
02:29 - if I go ahead and hit play here and drag
02:31 - the game over here so you can see what's
02:33 - happening to the controller you can see
02:35 - that we can look around like this we can
02:39 - also of course move around and this is
02:41 - not smoothed out yet that's something we
02:43 - can do in a in a future video and then
02:46 - you can see that I can fly away here and
02:48 - when I ran out of thruster I simply fall
02:51 - to the ground and you can see just how
02:53 - smooth that is when I use the thrusters
02:55 - here and that's something you can
02:56 - completely control how how much
02:59 - dampening and spring effect you want on
03:01 - that but I think this should give some
03:03 - really cool controls that are not just
03:05 - like in yadi fps cool you can of course
03:10 - use this tutorial for creating a
03:12 - completely ordinary first-person a
03:15 - character but then you might as well use
03:18 - the standard assets one cool so let's go
03:21 - ahead and close down that project and
03:23 - I've created beforehand here a new one
03:27 - called multiplayer FPS it's an
03:29 - completely empty project and I just set
03:32 - the defaults to 3d and in here you can
03:36 - see I have an empty project folder so
03:38 - let's go ahead and right click on that
03:40 - import package and then environment and
03:43 - this will just allow us to use some of
03:46 - the whoops not an environment that was
03:49 - wrong import package prototyping because
03:54 - a unity has some quite nice prototyping
03:57 - prefabs like the floor plane and some of
03:59 - the cubes that you saw me using and you
04:02 - can see that if you go under standard
04:04 - assets prototyping models there are a
04:07 - lot of different stuff that we can use
04:08 - here so let's just take the big floor
04:11 - prototype the 64 by 64 and drag it in
04:14 - here and let's also take a couple of
04:17 - cubes
04:18 - maybe the 4 by 4 ones and just place
04:23 - them on the ground so let's
04:25 - just place one there duplicated move one
04:29 - over here let's take a smaller one -
04:32 - oops it's not bigger that's a lot nope
04:37 - it's just being placed placed wrongly so
04:41 - let's just drag it in here and reset the
04:43 - transform there we go
04:45 - and we can just drag it over here just
04:48 - so we have something to orient ourselves
04:50 - in the scene and right now all of the
04:53 - colors here are fairly boring and that's
04:56 - something we can change soon for now
04:58 - let's just get cracking on the our
05:00 - player controls so up here let's create
05:03 - an empty game object let's reset the
05:06 - transform on this and let's call this
05:09 - underscore environment you don't need
05:11 - the underscore here it's just a habit of
05:13 - mine whenever I create these kind of
05:17 - grouping objects but actually let's just
05:21 - go ahead and delete that
05:22 - that's unnecessarily confusing and let's
05:24 - just take all of this stuff including
05:27 - the light and drag it under there so now
05:29 - we have this clean hierarchy up here and
05:31 - the main camera which we are going to
05:33 - just delete because we're going to be
05:36 - creating one for the player instead and
05:39 - because I excessively save all of my
05:42 - scenes let's press ctrl s and just I
05:45 - save this scene here so I'm just going
05:49 - to call this main level one so far
05:52 - because we don't know what this is
05:54 - actually going to be doing yet cool so
05:57 - let's start building our player so we
05:59 - are going to start completely from
06:01 - scratch and we are going to do so using
06:04 - a a sphere so let's right click on this
06:08 - go and do game objects or 3d object
06:11 - sphere reset the transform on that and
06:14 - let's set the position on the y-axis to
06:18 - one and this looks nice already and
06:22 - let's go ahead and Bri move the mesh
06:26 - renderer and the mesh sphere here and
06:30 - let's create another object under this
06:34 - an empty object again make sure that's
06:36 - reset let's rename this to
06:38 - graphics and under this we create and
06:42 - create a nother sphere I remove we
06:45 - remove the collider on this so this way
06:47 - we have the graphics separated from the
06:50 - collider and we can move those
06:52 - separately that's just a nice thing to
06:55 - do so we can call this player model here
06:59 - and this is of course temporary and then
07:01 - the sphere here we can go ahead and call
07:05 - player awesome so we're going to need a
07:09 - bunch of stuff on this player first off
07:12 - we're going to need a camera so let's
07:15 - just create a camera object and that's
07:17 - going to sit inside of our sphere so
07:19 - just reset the transform on that and
07:21 - that should be fine and and this has all
07:25 - of the default settings which are going
07:27 - to be fine for now and so that we know
07:31 - which way our player is facing let's go
07:34 - ahead and create a temporary gun model
07:36 - under this camera so that's it right
07:39 - click go on the 3d object select cube
07:41 - let's give this a cool darkened material
07:44 - so let's go down here right-click create
07:47 - material and let's call this week on
07:49 - material for now and let's change the
07:53 - albedo to a greater grayer color here
07:56 - and drag it
07:58 - oops make sure you drag it onto the cube
08:01 - here like this and let's make it kind of
08:04 - dark and that should be just fine and
08:09 - the smoothness here I'm going to drag
08:12 - all the way down so that this isn't
08:14 - shine okay we can give it a bit of shine
08:16 - there that looks fine and we can go
08:20 - ahead and rename this actually let's
08:24 - create another object here and not the
08:26 - empty object reset that that's called
08:29 - this one gun and let's drag the cube
08:32 - under that gun object we can then move
08:35 - this out and then we can start modeling
08:38 - our gun here
08:50 - awesome so now that we have that in
08:53 - place we can go ahead and actually
08:54 - create some logic for our player because
08:57 - not right now when we play the game of
08:59 - course nothing is going to happen
09:01 - whatsoever so we can start out by
09:04 - creating a rigidbody
09:06 - on our player or root object here and we
09:11 - can set the mass to 1 that's fine I do
09:14 - want some drag but we're going to leave
09:16 - it at 0 and then I'll show you what drag
09:18 - does later
09:20 - so constraints we're going to freeze all
09:23 - of the rotation because that's only
09:25 - going to be driven about by our mouse
09:28 - but I don't want to freeze the position
09:30 - because I want to be able to be affected
09:33 - by stuff in our scene when it comes to
09:36 - position then we want to uncheck use
09:39 - gravity because we want this guy to be
09:41 - floating and we are going to make the
09:44 - nice bounciness using some kind of
09:47 - spring component but that's something
09:50 - that we'll add in later so this should
09:53 - be the basic setup for our rigidbody and
09:56 - then I want to make two scripts so the
09:59 - first one is going to be our player
10:02 - motor new scripts of type C sharp and
10:07 - the second one is going to be on player
10:10 - controller so when it comes to movement
10:13 - there is a million ways of doing things
10:16 - and I've tried here to find a nice
10:20 - balance between optimization and
10:22 - readability so when it comes to like
10:26 - thinking about how we want this a
10:28 - movement to work I think it's logically
10:31 - a great idea to split it up into two
10:34 - scripts we have the controller which
10:37 - handles all of the input and stuff like
10:40 - how much fuel is left is we are we
10:43 - jumping or what way should we be looking
10:46 - and then we have the motor which simply
10:49 - has a set of functions which will move
10:53 - move the player make him jump and make
10:56 - him fly all of that so that doesn't
10:58 - handle any of the actual input it's just
11:01 - kind of you could call it a utility
11:04 - script that will take directions and
11:08 - velocities and all that and apply them
11:10 - to the richer body so that's kind of the
11:13 - way you should look at these two scripts
11:14 - you have the controller and the actual
11:16 - motor that drives it and if we go ahead
11:20 - and double click on these it's going to
11:23 - open up in visual studio and yes I'm
11:25 - using Visual Studio it's something that
11:27 - comes with unity now and if you want to
11:29 - be using Visual Studio instead of
11:31 - monodevelop which I do recommend that
11:34 - you do then go under edit then
11:38 - preferences external tools and choose
11:42 - Visual Studio 2015 and if it's not there
11:45 - you can browse for it cool so it's
11:50 - opening up Visual Studio here and should
11:52 - be ready in just a second and there we
11:54 - go it loaded on my other screen and
11:56 - let's just load up the player controller
11:59 - - so we have these two right here I'm
12:03 - just going to close the scripting API so
12:06 - the player motor is going to require a
12:09 - component type of rigid body because we
12:16 - want to always have a rigid body with
12:18 - our item player motor I'm also going to
12:21 - delete that using statement there
12:23 - because it's not needed and in here we
12:27 - are going to have some methods for
12:29 - actually making our player move but
12:32 - first off let's look over in the player
12:34 - controller well the player controller
12:36 - you can delete that too is going to
12:39 - require another component and this is
12:41 - going to require type of player motor so
12:46 - when adding a player controller it's
12:49 - going to add a player motor which is
12:50 - going to add a rigidbody we've already
12:53 - added a rigidbody but just in case it's
12:55 - a good idea to do it like that awesome
12:59 - so the first thing that we are going to
13:02 - be creating here is on the actual
13:04 - movement so we can start
13:06 - by making a serialized field private
13:10 - float called
13:11 - speed and set this to something like ten
13:15 - or maybe five it's going to be fine and
13:18 - if you don't know marking something as
13:21 - serialize field will basically make it
13:23 - show up in the inspector even though
13:25 - it's set to private so this is the exact
13:29 - same as doing public serialize field
13:31 - even though it's still but it's still
13:34 - protected so it so that's really good so
13:39 - then we can make a private reference to
13:42 - our player motor and we'll just call
13:44 - this motor and we can set this in the
13:47 - start method we'll just set motor equal
13:52 - to get component player motor and this
13:57 - is where the required component is
13:59 - really awesome because we don't have to
14:01 - do any checking or error handling we
14:03 - know that there's going to be a player
14:05 - motor on this game object then inside of
14:09 - our update method word update we are
14:14 - simply going to calculate our movement
14:21 - velocity as a 3d vector
14:26 - so basically we're first going to get
14:29 - our horizontal movement so we're going
14:32 - to store that as a float and let's just
14:36 - call this X move and the underscore here
14:40 - is of course optional I just like to do
14:42 - this with variables creating created
14:44 - within a method so X movement is going
14:48 - to be equal to input get axis and I'm
14:53 - going to choose get access wrong because
14:55 - I want to do our Milo looping on my own
15:00 - so if we want any kind of smoothing here
15:01 - it's good to be in complete control on
15:04 - of how we do that and if you use get
15:09 - axis well then a unity is going to
15:11 - perform some processing on it and you
15:13 - want being full control so by default
15:15 - let's get the raw axis and then let's
15:18 - perform our own smoothing lay
15:20 - and the access that we want to get here
15:23 - is the horizontal axis then we want
15:25 - another float and we will call the C and
15:28 - the move and we'll set this to input
15:31 - that get access raw and then vertical
15:34 - and of course the axis that we are axes
15:39 - we are getting here I set up inside of
15:42 - unity so if we go in here go into edit
15:44 - project settings input axis and you can
15:51 - see here that we have the horizontal and
15:52 - the vertical so that's where we are
15:54 - getting these from and if you're not
15:57 - aware whenever we use a keyboard or
15:59 - controller horizontal is going to go
16:02 - between minus 1 and 1 and vertical is
16:05 - going to also go between minus 1 and 1
16:09 - so we can use those to do perform live
16:13 - movement on the two axes then we are
16:15 - going to create a vector 3 I'm going to
16:17 - call this move horizontal and we're
16:22 - going to set it equal to transform dot
16:24 - right that's going to be our direction
16:28 - to the right but this is going to be a
16:32 - local
16:33 - so when using transform that right
16:36 - instead of vector 3 right we'll take
16:40 - into consideration our current rotation
16:43 - which way we are facing and it won't
16:45 - just be relative to the world so
16:47 - transform right and then we'll multiply
16:50 - this by our X movement and we're going
16:56 - to do the same make a vector here called
16:58 - move vertical set it equal to transform
17:02 - dot forward so this is our forward
17:06 - movement and we are going to set that
17:08 - equal to or multiply that with our see
17:12 - movement so transform that right is a
17:15 - vector with the values 0 1 comma 0 comma
17:24 - 0 and the transform dot forward is a
17:30 - vector with a 0 comma 0 comma
17:33 - one and then we multiply this value into
17:37 - it so if we don't move at all this is
17:39 - going to be zero zero zero if we're
17:42 - moving forward then this is going to be
17:43 - one zero zero and if we're moving
17:45 - backwards this is going to be minus zero
17:48 - zero so our minus one zero zero and the
17:51 - same down here so this is just the value
17:54 - that's going to change so if we are not
17:55 - moving if we are moving and if we are
17:59 - moving backwards that's the result of
18:02 - this calculation so we can use this
18:04 - quite effectively to get kind of our
18:08 - local direction or our local velocity
18:12 - vector and then we can compile these two
18:15 - into our final velocity vector and we're
18:18 - going to simply combine them by saying
18:21 - move horizontally plus above vertical
18:25 - and then we are going to normalize them
18:29 - and multiply them oops multiply them by
18:34 - eye speed variable so what we are doing
18:36 - here is we are combining the two
18:39 - when normalizing we are saying that well
18:41 - the length of these shouldn't matter so
18:44 - when we are combining them we are saying
18:46 - that the total length of this combined
18:48 - vector should be one and that means that
18:51 - we won't get a varying speed when
18:55 - multiplying these we will always get a
18:58 - vector with the length of one and that
19:02 - basically means that we are only using
19:04 - this as a direction that we then
19:07 - multiply with the speed cool and then we
19:13 - apply this movement so this is going to
19:15 - be our final movement vector and then we
19:23 - apply our movement and we do this by
19:27 - calling some kind of function on the
19:29 - motor and we're going to make this in a
19:31 - second and we'll just call this function
19:33 - move and we'll pass in the velocity
19:36 - vector so now we can jump over to a
19:38 - player motor and actually make this
19:40 - happen so the video kind of went on for
19:43 - a lot longer
19:43 - then I had expected so I'm sorry but I
19:45 - have to cut this up into two parts I
19:47 - hope that you will enjoy the next one as
19:49 - much as you've enjoyed this one you fed
19:51 - all and I'll upload it as soon as I can
19:54 - I'll see you in the next video