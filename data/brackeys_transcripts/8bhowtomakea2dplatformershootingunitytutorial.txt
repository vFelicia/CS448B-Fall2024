00:03 - actual shooting uh function so let's go
00:07 - ahead and do vo
00:10 - shoot and uh we're going to open up the
00:14 - curly brackets here and inside of the
00:16 - shoot function um we're going to be
00:19 - doing a bunch of stuff with Ray casting
00:22 - and uh bear with me uh you might be a
00:25 - bit confused along the way with all of
00:27 - the calculations and uh there are some
00:30 - longer lines um but it's it's actually
00:33 - not too difficult and uh it's something
00:36 - that you can just memorize and then do
00:40 - uh but I'll do my best to explain it uh
00:42 - for you so um first off let's just go
00:46 - ahead and check if if everything is
00:48 - working let's not get oure ahead of
00:50 - ourselves let's just uh make a test
00:54 - debug. log statement here to see if our
00:57 - fire rate is working so when we hit play
00:59 - now we
01:01 - should get a uh debug.log saying test
01:04 - when we click and indeed we do so you
01:07 - can see here that we are getting some
01:09 - test locks uh let's go ahead and change
01:12 - the fire rate to five
01:14 - now and see uh if we hold this
01:18 - down oops let's bring it up here we are
01:22 - getting uh the uh five tests per second
01:27 - cool so uh let's go ahead and make that
01:30 - zero
01:31 - again and uh now we can go ahead and put
01:34 - some actual code in here so let's do uh
01:37 - Vector
01:39 - 2 and let's call this mouse position so
01:42 - here we're going to store our Mouse
01:44 - position as a uh uh Vector 2 and we're
01:49 - going to set this equal to a new Vector
01:53 - 2 and uh just make sure to open up some
01:57 - uh parentheses and inside of these we're
01:59 - going to type
02:01 - camera main do screen to
02:08 - worldo and we are going to give it the
02:13 - input do mouse
02:17 - position and then we're going to do X
02:21 - outside of the uh uh parenthesis there
02:25 - oops we are missing a parenthesis and
02:28 - then we're going to do comma
02:31 - and then we're going to do camera. main
02:34 - do
02:35 - screen whoops screen to
02:38 - worldpoint and again
02:41 - input do mouse
02:49 - position close it off and then
02:52 - doy so that's the whole line it's a long
02:56 - one but basically what we're doing is
02:58 - we're creating a new V 2 called mouse
03:01 - mouse position and we are assigning it
03:04 - the uh screen to World point of our M
03:07 - Mouse positions X and the screen to well
03:10 - point of our Mouse position y this way
03:13 - we will get uh we will translate the
03:16 - position of the mouse from screen
03:18 - coordinates into the position in the
03:21 - world and therefore we can actually use
03:23 - it to do a ray cast we wouldn't be able
03:26 - to do this with screen coordinates
03:28 - because they are very different
03:30 - from the system that we use in the
03:32 - actual world for the
03:35 - transform that's what we're doing there
03:37 - whoops let's bring it back up here okay
03:41 - so what we're going to do now is uh
03:43 - we're going to go ahead and make another
03:45 - variable and we again going to uh make a
03:49 - vector 2 and let's call this Fire Point
03:54 - position we're going to set this to be
03:57 - equal to a new Vector 2
04:02 - and inside of the parenthesis we're
04:04 - going to say
04:05 - firepoint do
04:08 - positionx comma
04:12 - fireo
04:13 - [Music]
04:15 - doosy so here we're simply taking the uh
04:18 - Fire Point uh which is uh the point on
04:22 - the tip of our gun
04:24 - here and uh we are uh storing that
04:27 - position as a vector 2
04:31 - then next up we are going to go ahead
04:32 - and uh actually make the ray cast so
04:35 - we're going to say
04:37 - raycast hit
04:40 - 2D and we're going to call it hit and
04:44 - we're going to equal it to
04:47 - physics
04:49 - 2D do raycast so now we are casting out
04:53 - the
04:54 - Ray and uh this is going to take some
04:58 - arguments so let's let's do firepoint
05:01 - position is the first one that's the
05:04 - beginning position that's where we're
05:06 - going to cast The Ray
05:08 - from uh which is our firepoint position
05:12 - and then we're going to give it a
05:13 - Direction so what you don't want to do
05:15 - here is just type Mouse position because
05:18 - it's not from and to it's from and
05:21 - direction as you can see here uh the uh
05:24 - the static uh public static r r raycast
05:28 - hit function called raycast takes two
05:32 - arguments the first one is the origin
05:35 - and the second one is the direction so
05:37 - how do we turn the mouse position uh
05:42 - into a direction well we do this by
05:46 - taking point a or point B and
05:50 - subtracting it with point a so this is
05:55 - point a so now we're going to take Mouse
05:57 - position and subtract
06:00 - Fire Point position from that and now we
06:04 - actually have the
06:06 - direction and then we can do
06:09 - comma and here we have the ability to
06:12 - either make a distance so you can input
06:15 - a a float here to say how long out is
06:18 - the ray going to stretch if you want
06:20 - some weapons to only uh hit inside a
06:23 - certain distance we could go ahead and
06:25 - set this to something reasonable maybe
06:27 - 100 or it's just going to continue
06:30 - uh
06:31 - infinitely let's actually go ahead and
06:33 - do that um so let's do 100 and then also
06:39 - we can give it a layer mask so remember
06:42 - we created a layer mask up here with
06:44 - what not to hit well we are simply going
06:47 - to input that here so we're just going
06:49 - to say not to hit
06:52 - there so uh that was it for the actual
06:55 - Ray casting uh we are pretty much done
06:58 - with the hard part here now we can just
07:00 - go ahead and show it because none of
07:01 - this is visible so for now we're just
07:04 - going to be using debug. draw line which
07:06 - will not actually appear in game but
07:09 - we're going to be do a a bit of triggery
07:11 - to make it appear while we're testing so
07:14 - now we can go ahead and do
07:16 - debug.
07:18 - drawline and this is super
07:20 - useful uh and then we're going to give
07:22 - it the starting point unlike the uh the
07:25 - ray cast this just takes a start and an
07:28 - end not a origin and a Direction so we
07:31 - are just going to give it the starting
07:32 - point which is our Fire Point position
07:35 - and then we're going to give
07:38 - it uh we we could just put our Mouse
07:41 - position here but instead let's just
07:44 - make it stretch out infinitely so we can
07:47 - really get a sense of of uh the
07:49 - direction I mean you could just go ahead
07:51 - and do this and now hit back in
07:54 - game and uh we should see oh yeah we
07:58 - need to enable gizmos this was the uh
08:00 - triggery I was talking about so up in
08:03 - the right hand corner you need to select
08:05 - gizmos in order for this to work and you
08:08 - can see now that when I click the mouse
08:11 - it actually draws array out to the mouse
08:14 - point and actually while we are testing
08:17 - this let's go ahead and uh make it just
08:21 - shoot all the time so in the top of the
08:23 - update function we're just going to type
08:25 - shoot uh so we can really see the line
08:28 - here now it's just going to shoot all
08:30 - the time to my mouse and you can see
08:33 - that this is actually
08:34 - working uh but uh what I want to do is I
08:37 - just want to uh make sure that this just
08:40 - continues on infinitely and to do this
08:43 - uh we take the direction uh we find the
08:46 - direction vector and we just multiply it
08:49 - with a value so uh so we're going to say
08:52 - mouse
08:55 - position
08:57 - minus Fire Point position
09:00 - position just like up here now we get
09:04 - the direction
09:06 - vector and then we can just multiply it
09:09 - by multiply it by let's say a 100 to
09:13 - just make it go on really long you could
09:15 - do 200 or whatever so now when we hit
09:18 - play We simply multiplying the direction
09:22 - to make the line continue on so there's
09:26 - a bit of a delay but that's not to worry
09:28 - about yet
09:30 - cool uh and what we can also do is we
09:33 - can give it a pretty color so we can do
09:35 - a
09:36 - comma and then say uh let's do color dot
09:41 - uh sign it's pretty
09:44 - one and uh then we can go ahead and
09:47 - actually
09:48 - check uh if we hit something so we can
09:51 - say if hit.
09:54 - collider is not equal to
09:58 - null then let's open up some brackets so
10:01 - if we actually hit
10:03 - something uh then we can do another
10:06 - debug. draw line that we're just going
10:09 - to put on top of the other one we're
10:11 - going to but we're going to make this
10:12 - one red and only extend on to what we
10:15 - hit that's going to make uh sense in a
10:18 - second so we're just going to put this
10:20 - between the firepoint position and the
10:23 - hit. point and we're going to make this
10:28 - red so this is actually going to show us
10:32 - uh what it's hitting so when we hit
10:34 - something over here you can see whoops
10:38 - no it's not something is not working
10:42 - here uh let's see if hit. collider is
10:47 - not equal to null which it shouldn't be
10:49 - because it was just hitting something
10:51 - firepoint position hit. Point color red
10:57 - hm this should be working is this even
11:00 - being called so let's do a debug.log
11:03 - test is this being
11:05 - called Hit play oops we have an error a
11:10 - passing
11:11 - [Music]
11:12 - error uh what is going on
11:17 - here we are
11:19 - not oh oh I missed I see I missed a uh a
11:25 - curly bracket up
11:26 - here stupid okay so we can go ahead and
11:29 - delete the debug log again there you
11:33 - were probably shaking your head all
11:35 - along okay so now you can see that once
11:37 - we hit this it's still not working okay
11:41 - so I'm just going to go ahead and pause
11:43 - the video here and uh see uh if I can
11:46 - get this working and then I'll come back
11:47 - in a sec okay so I'm back so I figured
11:50 - out the problem and it was actually
11:52 - pretty Elementary so what I I did wrong
11:55 - here was I thought of the layer mask uh
11:58 - the wrong way um I remember that as
12:01 - being um what you have selected will uh
12:05 - is what the ray will not hit uh but
12:08 - actually it's what you have selected is
12:10 - the only thing that the Ray would will
12:12 - hit so let's just rename this to what to
12:15 - hit instead of What Not to hit and let's
12:19 - put it down there also save it and hit
12:22 - back into unity and now under the what
12:25 - to hit we're going to select everything
12:27 - and then we're going to exclude the
12:29 - player and the ignore raycast sorry for
12:31 - lying there and now we can go ahead and
12:33 - hit play and you can see once we hit
12:35 - something that the part of the line that
12:38 - stretches from the hit point to uh our
12:42 - fire um our fire point is now red just
12:46 - to see where it hits and and what it's
12:49 - doing behind the scenes cool so uh that
12:52 - was a bit on on graphics and some useful
12:55 - ways of thinking of of these lines and
12:58 - and and how you can extend them and
13:00 - directions and starting and ending
13:02 - points uh and the last thing we can go
13:04 - ahead and do is uh of course remove this
13:07 - shoot up here so we're not constantly
13:09 - shooting and then we can make a
13:11 - debug.log statement that will say what
13:14 - we hit and uh how much damage we did and
13:18 - then later when we add enemies we can
13:20 - actually add that damage and make it do
13:23 - something so let's do debug.log and
13:27 - we're going to say we hit
13:30 - and then we're going to do plus hit.
13:33 - collider do
13:35 - name plus and
13:39 - did plus
13:41 - damage
13:44 - plus damage like this so uh sounded
13:49 - weird but there it is uh that's going to
13:52 - write out a pretty normal sentence I
13:54 - think so if we hit play here and we uh
13:57 - let's say point towards the um platform
14:00 - 4 over here and and click you can see
14:03 - that it says we hit platform 4 and did
14:05 - 10 damage and you can see that it also
14:08 - draws array and uh we can of course go
14:11 - ahead and play around with the fire rate
14:13 - if we bump this up we can get lots of
14:15 - rays oh it's spaming and yeah so that's
14:18 - how you make um
14:20 - shooting and the cool thing about this
14:23 - here is that the weapon script we can
14:26 - put on pretty much any weapon that we
14:28 - are going to need so far uh so we can
14:31 - just tweak the damage and the fire rate
14:33 - and we have all kinds of weapons
14:34 - available to us already so what I'm
14:37 - going to go ahead and do is I'm going to
14:38 - drag down the pistol into the project
14:41 - pane to make out uh to make a prefab out
14:44 - of it and I'm just going to keep it on
14:46 - the player for now because shooting is
14:48 - always fun to see so that's pretty much
14:50 - it for today's video thanks for watching
14:52 - and of course if you want to support
14:54 - brais or just generally be a bigger part
14:57 - of the brais Comm Community uh you
14:59 - should totally head over to the forum.
15:02 - bra.com and uh become a member it's
15:05 - really easy you can sign it up with both
15:07 - uh both Twitter Facebook or just normal
15:10 - filling out some boxes and hitting join
15:13 - and uh there are lots of useful
15:15 - resources or uh places to get answers
15:17 - here uh you don't even have to to make
15:20 - threats or be active or make an account
15:22 - you can just sit here and read or find
15:25 - cool assets which I've certainly done so
15:28 - uh thanks again for watching and I'll
15:30 - see you in the next
15:31 - [Music]
15:41 - video