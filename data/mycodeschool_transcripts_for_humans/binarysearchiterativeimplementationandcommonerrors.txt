With timestamps:

00:00 - In the previous lesson, We learnt
about binary search as
00:03 - an efficient algorithm to find
00:06 - or search element in a sorted data, in
a sorted collection.
00:10 - In this lesson, in some real code we will
see how to implement binary search
00:15 - and we'll also see what are the common
errors that happen
00:19 - while implementing binary search, but
before that
00:23 - a quick recap. Let's say we have a sorted
array of integers
00:28 - something like this, the elements are arranged
in increasing order
00:32 - and the size of the array is 6 so the indices
are from 0 to 5.
00:36 - Now let us say we want to find out whether
the number 10
00:39 - exists in this array or not, programmatically
using binary search.
00:43 - Now in binary search what we do is, we
take
00:46 - 2 pointers, 2 variables that points
to,
00:50 - that initially point to the first and
the last element in the array.
00:53 - We may call them start and end pointers,
00:57 - we may call these variables start and end or
we may also call these
01:01 -  low and high to mark the lower index and the
higher index.
01:06 - Now start and end, these two variables
01:10 - at any stage in our algorithm give us
the range in which
01:14 - the element can, the element may exist.
01:18 - So this, at the start of the algorithm, the
element may exist anywhere
01:22 - within the array.So that's why start
and end are
01:25 - pointing to the first and the last
element. Now we calculate
01:28 - middle point using the equation
01:31 - middle =  (low + high) upon 2 or
01:34 - (start+end) upon 2 and we take only the
integral part.
01:38 - So here (5 + 0) / 2 would be 2.5 and
taking the integral part will give us
01:43 - this index 2 as the middle index. So we are
searching for
01:46 - the 10 and initially we are in a
state where
01:50 - lower index is 0, higher index is 5
01:53 - and so mid index is 2.
01:57 - Now we see that with the element at the
middle index is the desired element, if it
02:01 - is the desired element our search is
over.
02:03 - So the element at the middle index is 6
02:06 - is 6 = 10? No, it is not. Now
we see whether this
02:09 - element is greater than the target
element
02:12 - or less than the target element. Now six
is less than the
02:16 - target element, which is 10, so we discard 6
02:19 - and all the elements before 6 because
they are also less than 10,
02:23 - and we shift start to point at index 3.
02:27 - So we go to this state, lower index 3 and 
higher index 5
02:31 - and now we search for our number in this
part of the array only.
02:35 - Now if we calculate mid then mid is
equal to 4,
02:39 - (5+3)/2. Is it equal to the target
element 10? Yes it is equal to. So
02:44 - we have found,
02:45 - found our element and our search is over.
We found 10 at index 4.
02:49 - Ok, what if we were, we were
searching for the number nine in the array
02:53 - if we were searching for 9 till this
tape,
02:56 - it would have been the same thing, now
at this tape, the middle element is 10,
03:00 - compare it with 9
03:02 - and I'll also modify it here, now 10 is
greater than 9
03:05 - so definitely 9 can only exist before
10, we need to discard
03:09 - this part of array and we need to go to a
state where
03:13 - our search space is defined by low =3 
and high = 3
03:17 - now 3 is both low and high and mid
element of this range would also be
03:21 - 3 only. Now this mid element is also not
equal to
03:25 - our desired number 9, is not equal to
it.
03:28 - Now once we have only one element in
our search space and we have still not
03:32 - found our desired element our search is over,
03:34 - and we could not find the element.
03:39 - Let us know in the implement binary search and
I will write
03:42 - a C program now. Okay so what
03:45 - I will do here is I will first write
a method named BinarySearch()
03:51 - that will take and an integer array. Its
size let's say the size of the array is
03:57 - n and let's say the element to be searched
for
04:01 - is X and this method returns
04:04 - an integer which will be the L, index
of X.
04:08 - If it is found in the array. Now we will
declare 2 variables.
04:12 - low and high and initialize them
04:15 - to 0 && n-1 respectively. low and high
04:19 - at, at any point give us the segment
within which
04:24 - X may lie. Ok so now we declare 
another variable mid
04:28 - that is calculated as 
04:31 - (low + high) upon 2. Now we compare
04:34 - X to element at index mid and there can
be 3 conditions here.
04:39 - First condition will be even X is equal
to
04:43 - the middle element, the element at index
mid
04:48 - and in this case our search is over, we will
simply return the index mid
04:52 - and when we return from a method we
exit
04:55 - it. Now the second case can be when X
04:58 - is less than the mid, now
05:02 - because X is less than the middle
element, it will lie before mid.
05:06 - So now we redefine our segment by
shifting
05:09 - end, to shifting the higher index to
05:13 - mid-1 and this should be
05:17 - else if, ok and the third and the last
condition which will be the default
05:21 - condition here
05:22 - when X will be greater than the middle
element in this case we will redefine
05:26 - the segment by
05:27 - adjusting the start or
05:30 - lower index, and lower index will
be = mid+1.
05:34 - Now we need to keep repeating these
three steps
05:38 - again and again so how do we do that? so
05:41 - we will definitely need a loop, so we
will put a while
05:45 - look here. Now when do we stop executing
these steps?
05:48 - we stop either when we find the element or 
either when we return
05:53 - or when we are done looking at all the
elements so I will put the condition
05:56 - here
05:57 - while ( low <= high)
while low
06:01 - becomes greater than high then the
segment defined by low and high
06:05 - will not be a valid segment. low is equal
to high then
06:09 - we even have only one element in the
segment, now if we
06:14 - exit this while loop without returning
06:17 - anything then we can say that
06:21 - the element X is not in the array, Lets say
we return -1 to say that X does not
06:25 - exist in the array.
06:26 - Okay so this is the binary search
method and
06:30 - and let us now write the main method and
try to use this function.
06:35 - In the main method I will first declare
06:38 - and initialize an array let's say the
name of that is
06:42 - A and we will fill some elements into this
06:46 - array in sorted order, remember the 
array being sorted
06:50 - is a precondition for binary search. Okay
so this is an
06:54 - array of size 8 now let's ask the user
to enter a number
06:59 - that we would search in the array. so we will
write to printf statement here
07:02 - and now let us take input of this
number.
07:06 - Now I would call binary search to search
whether
07:11 - this number exists in the array A or not,
size of the array is
07:15 - 8 and we want to find out X. ok I will
rather name it as
07:20 - X because we have been naming the
target element
07:25 - as X throughout. Okay so now
07:29 - if index which is the return from
07:32 - the method binary search is not equal to
-1
07:35 - then we have found the element X in A so
07:39 - at this stage we will print something like
number X
07:42 - is at index, index, index is the variable name
as well
07:46 - else we will think that we could not find
07:50 - X in the array. Let us know run this program
and see what happens.
07:54 - So we are asked to enter a number
07:58 - let's say we want to search for a
number 15 in array
08:01 - okay so this says that number 15 is
at index 6
08:04 - and let us now try to search a number
that does not exist in the array
08:09 - lets say we want to search for 18 and output
is number 18
08:15 - not found.
08:17 - There are some common errors that happen
in binary search implementation,
08:21 - resetting these indexes low and high
08:24 - should be done correctly and we should
always be careful about this
08:29 - exit condition from the loop. One more
common error is
08:33 - when people do not put this bracket here,
08:36 - now what will happen here is that
08:40 - the precedence of division operator is
more
08:44 - so high/2 will be calculated first
08:47 - and then it will be added to low, so
this bracket is important, we need to
08:51 - put this bracket here and some people also
calculate
08:55 - mid, as instead of calculating it as
(low+high)/2
08:59 - we also calculated sometimes as 
low+(high-low)/2
09:04 - and this is a better way of doing it
because sometimes low+high 
09:10 - can exceed the maximum valued that
09:13 - an integer can store so like
09:16 - 32-bit integer, a 32-bit signed integer
can store
09:20 - maximum value of 2^31.
Now if both low and high at pretty
09:24 - high,
09:25 - then (high+low) will exceed 2^31
09:28 - and cause issues in our program
execution.
09:32 - It should be pretty evident that this
expression
09:35 - evaluates too (high+low)/2 only
the only difference is that we are
09:40 - avoiding overflow by not calculating
high + low
09:44 - in this expression. Okay so this was
binary search implementation
09:48 - and in this implementation we have
09:51 - used loop so we have written an
iterative implementation.
09:55 - You can write binary search using recursion
also I would recommend that you
09:59 - try that on your own.
10:00 - In the coming lessons, we will see more
variations of binary search and
10:05 - its application in other scenarios so
thanks for watching!!

Cleaned transcript:

In the previous lesson, We learnt about binary search as an efficient algorithm to find or search element in a sorted data, in a sorted collection. In this lesson, in some real code we will see how to implement binary search and we'll also see what are the common errors that happen while implementing binary search, but before that a quick recap. Let's say we have a sorted array of integers something like this, the elements are arranged in increasing order and the size of the array is 6 so the indices are from 0 to 5. Now let us say we want to find out whether the number 10 exists in this array or not, programmatically using binary search. Now in binary search what we do is, we take 2 pointers, 2 variables that points to, that initially point to the first and the last element in the array. We may call them start and end pointers, we may call these variables start and end or we may also call these low and high to mark the lower index and the higher index. Now start and end, these two variables at any stage in our algorithm give us the range in which the element can, the element may exist. So this, at the start of the algorithm, the element may exist anywhere within the array.So that's why start and end are pointing to the first and the last element. Now we calculate middle point using the equation middle = (low + high) upon 2 or (start+end) upon 2 and we take only the integral part. So here (5 + 0) / 2 would be 2.5 and taking the integral part will give us this index 2 as the middle index. So we are searching for the 10 and initially we are in a state where lower index is 0, higher index is 5 and so mid index is 2. Now we see that with the element at the middle index is the desired element, if it is the desired element our search is over. So the element at the middle index is 6 is 6 = 10? No, it is not. Now we see whether this element is greater than the target element or less than the target element. Now six is less than the target element, which is 10, so we discard 6 and all the elements before 6 because they are also less than 10, and we shift start to point at index 3. So we go to this state, lower index 3 and higher index 5 and now we search for our number in this part of the array only. Now if we calculate mid then mid is equal to 4, (5+3)/2. Is it equal to the target element 10? Yes it is equal to. So we have found, found our element and our search is over. We found 10 at index 4. Ok, what if we were, we were searching for the number nine in the array if we were searching for 9 till this tape, it would have been the same thing, now at this tape, the middle element is 10, compare it with 9 and I'll also modify it here, now 10 is greater than 9 so definitely 9 can only exist before 10, we need to discard this part of array and we need to go to a state where our search space is defined by low =3 and high = 3 now 3 is both low and high and mid element of this range would also be 3 only. Now this mid element is also not equal to our desired number 9, is not equal to it. Now once we have only one element in our search space and we have still not found our desired element our search is over, and we could not find the element. Let us know in the implement binary search and I will write a C program now. Okay so what I will do here is I will first write a method named BinarySearch() that will take and an integer array. Its size let's say the size of the array is n and let's say the element to be searched for is X and this method returns an integer which will be the L, index of X. If it is found in the array. Now we will declare 2 variables. low and high and initialize them to 0 && n1 respectively. low and high at, at any point give us the segment within which X may lie. Ok so now we declare another variable mid that is calculated as (low + high) upon 2. Now we compare X to element at index mid and there can be 3 conditions here. First condition will be even X is equal to the middle element, the element at index mid and in this case our search is over, we will simply return the index mid and when we return from a method we exit it. Now the second case can be when X is less than the mid, now because X is less than the middle element, it will lie before mid. So now we redefine our segment by shifting end, to shifting the higher index to mid1 and this should be else if, ok and the third and the last condition which will be the default condition here when X will be greater than the middle element in this case we will redefine the segment by adjusting the start or lower index, and lower index will be = mid+1. Now we need to keep repeating these three steps again and again so how do we do that? so we will definitely need a loop, so we will put a while look here. Now when do we stop executing these steps? we stop either when we find the element or either when we return or when we are done looking at all the elements so I will put the condition here while ( low <= high) while low becomes greater than high then the segment defined by low and high will not be a valid segment. low is equal to high then we even have only one element in the segment, now if we exit this while loop without returning anything then we can say that the element X is not in the array, Lets say we return 1 to say that X does not exist in the array. Okay so this is the binary search method and and let us now write the main method and try to use this function. In the main method I will first declare and initialize an array let's say the name of that is A and we will fill some elements into this array in sorted order, remember the array being sorted is a precondition for binary search. Okay so this is an array of size 8 now let's ask the user to enter a number that we would search in the array. so we will write to printf statement here and now let us take input of this number. Now I would call binary search to search whether this number exists in the array A or not, size of the array is 8 and we want to find out X. ok I will rather name it as X because we have been naming the target element as X throughout. Okay so now if index which is the return from the method binary search is not equal to 1 then we have found the element X in A so at this stage we will print something like number X is at index, index, index is the variable name as well else we will think that we could not find X in the array. Let us know run this program and see what happens. So we are asked to enter a number let's say we want to search for a number 15 in array okay so this says that number 15 is at index 6 and let us now try to search a number that does not exist in the array lets say we want to search for 18 and output is number 18 not found. There are some common errors that happen in binary search implementation, resetting these indexes low and high should be done correctly and we should always be careful about this exit condition from the loop. One more common error is when people do not put this bracket here, now what will happen here is that the precedence of division operator is more so high/2 will be calculated first and then it will be added to low, so this bracket is important, we need to put this bracket here and some people also calculate mid, as instead of calculating it as (low+high)/2 we also calculated sometimes as low+(highlow)/2 and this is a better way of doing it because sometimes low+high can exceed the maximum valued that an integer can store so like 32bit integer, a 32bit signed integer can store maximum value of 2^31. Now if both low and high at pretty high, then (high+low) will exceed 2^31 and cause issues in our program execution. It should be pretty evident that this expression evaluates too (high+low)/2 only the only difference is that we are avoiding overflow by not calculating high + low in this expression. Okay so this was binary search implementation and in this implementation we have used loop so we have written an iterative implementation. You can write binary search using recursion also I would recommend that you try that on your own. In the coming lessons, we will see more variations of binary search and its application in other scenarios so thanks for watching!!
