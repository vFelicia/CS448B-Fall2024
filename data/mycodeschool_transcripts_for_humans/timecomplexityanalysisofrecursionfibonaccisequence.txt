With timestamps:

00:00 - in this lesson we will try to analyze
time complexity of
00:04 - recursive implementation of fibonacci sequence
00:07 - in an earlier lesson we had shown
00:10 - how and why
00:11 - recursive implementation of fibonacci sequence
00:14 - a simple recursive implementation of fibonacci sequence
00:18 - is lot costlier than
00:20 - iterative implementation where we simply
write the loop
00:23 - let's try to deduce it
mathematically
00:26 - as we know fibonacci sequence
00:28 - is a sequence in which the first two
elements
00:31 - are zero and one
00:33 - and all other elements are sum of
00:35 - previous two elements
00:37 - and
00:38 - a recursive program
00:40 - to find an element in the
sequence goes something like this
00:43 - if n is less than or equal to one
00:46 - which accounts for the first two elements in
the sequence
00:48 - we simply return n
00:50 - else we make two recursive calls to calculate fib of n - 1 and fib of n - 2
00:56 - sum them up
00:57 - and return the value
00:59 - let's say time taken to calculate
fib of n is
01:03 - T(n)
01:05 - now when we try to analyze time
complexity of programs
01:08 - we make an assumption that
01:10 - each simple operation
01:12 - takes one unit of time
01:14 - so if we call this method fib of n
01:17 - for n greater than one
01:20 - then first we
01:21 - perform a compassion here
01:24 - with one which is one unit of cost let's
say one unit of cost is there for
01:28 - comparison
01:30 - and because it is greater than one so it
goes to the else conditioned control
01:34 - of the program
01:35 - and here we make two recursive calls where we pass
01:39 - arguments n -1 and n - 2. Sowe make two subtractions
01:43 - so there is one unit of cost for
this subtraction and one unit of cost for this
01:47 - subtraction
01:48 - and then
01:49 - one unit of cost for this
01:51 - addition
01:52 - so for n greater than one there are 
01:54 - four simple operations,  two subtractions
one
01:57 - addition and one comparision
01:59 - now time taken to calculate fib of n can be
02:02 - calculated as
02:03 - time taken to calculate fib of n minus one
which is T (n - 1)
02:07 - plus time taken to calculate fib of n - 2
02:10 - which is T( n - 2)
02:12 - plus 4 units of
02:13 - time for these simple operations
02:16 - if n is less than or equal to one
02:19 - which is the case for T(0) and T(1)
02:22 - we only have one simple question which is
comparision
02:25 - so here the time taken is
02:26 - one unit
02:29 - let's try to reduce T in terms of
02:32 - these known values
02:33 - which are T(0) and T(1)
02:35 - but before I do that
02:36 - i will try an
02:38 - approximation
02:39 - and i will come back to why I am
02:41 - doing this
02:42 - let's say
02:43 - the time taken to calculate fib
of n minus one
02:46 - which is
02:46 - T n minus one
02:48 - is almost equal to the time taken to calculate fib of n minus two
02:52 - which is T n minus two
02:54 - now in reality the time taken to calculate fib of n minus 1
02:58 - is greater than the time taken to calculate fib of n minus 2
03:03 - so what they're trying to do here is we are trying to calculate 
03:06 - a lower bound for
03:09 - T(n) - the time taken to calculate fib of n
03:11 - so now T(n) would be
03:13 - 2 times T of n - 2
03:16 - plus four
03:17 - let's say we write this 4 as a constant C
03:20 - so C is equal to 4
03:22 - is a constant that adds up
03:24 - into this expression
03:25 - now let's try to reduce this expression
03:28 - T(n-2) can be written as
03:31 - 2 times T of n-4
03:33 - plus C
03:35 - so this expression eventually reduces to
03:38 - four T (n -4) plus three C
03:41 - and again and T(n-4)
03:42 - can be reduced to T(n-6)
03:45 - so this will be eight T(n-6) plus seven C
03:49 - and we can go on like
03:51 - sixteen T(n-8) plus fifteen c
03:54 - and so on
03:55 - now if i want to reduce it by some
03:57 - generic
03:58 - value then we can say that this is equal
to
04:01 - 2 to the power k time T of n minus two k plus two to the power k minus one into C
04:08 - and you can
04:09 - veriffy that this expression is true for
all the values of k
04:13 - like this k is equal to 2
04:16 - this is k is equal to 3
04:18 - the this is k is equal to 4
04:21 - and this is our T(n)
04:24 - now if i want to read this in terms of
T(0) which is known to us then
04:27 - that case
04:29 - n minus two k
04:32 - would be equal to 0
04:34 - that will imply k = n by 2
04:36 - and our expression T(n) will be reduced as
04:39 - 2 to the power n by 2 T(0)
04:42 - plus
04:43 - 2 to the power n by 2 minus one C
04:47 - and this
04:48 - is nothing but
04:49 - one pluc C into 2 to the power n by 2 minus C
04:54 - so in simple terms we can say here that
04:57 - T of n
04:57 - is proportional to 2 to the power n by two
05:00 - and this is
05:01 - a lower bound for us
05:03 - the lower bound for the time taken
05:07 - and i will clear this calculation and write here
05:10 - now let's try another approximation this time. Let's say
05:14 - the time taken to calculate fib of n minus 2 which is T(n-2)
05:17 - is almost equal to
05:18 - T of n minus one
05:20 - now this reduces our expression or
05:23 - this simplifies our expression
05:25 - as T(n) is equal to 
05:30 - 2 times T of n-1 plus constant C
05:32 - and C is equal to 4
05:34 - now in reality T of n - 2 will be lesser than T of n - 1
05:38 - so this expression is kind of giving an
upper bound this time
05:42 - and we can go on reducing this
particular expression
05:44 - similar to what we had done before
05:47 - so this would be
05:48 - four T n minus 2 plus three C
05:51 - which is again equal to
05:53 - eight T n minus 3 plus seven C
05:55 - and if I have to reduce it
05:57 - in some generic form then this is equal to
06:01 - 2 to the power k T of n minus k plus
06:03 - 2 to the power k minus 1 into C
06:06 - now if i want to read this expression k
in terms of the T(0) then
06:09 - n minus k
06:11 - will be equal to 0
06:12 - which will imply k
06:14 - is equal to n
06:16 - and that could mean
06:17 - than T(n) is equal to 2 to the power n T of 0
06:20 - plus 2 to the power n minus one into C
06:24 - and t(0) is nothing but 1 so finally
06:27 - it will be 1 plus C into 2 to the power n minus C
06:31 - so in simplest of terms in this
particular case we can say that
06:36 - T(n)
06:37 - is
06:37 - proportional to 2 to the power n
06:40 - and this is
06:41 - our upper bound
06:43 -  because
06:44 - we have approximated
06:46 - T of n minus two to be T of n minus 1 while in reality
06:50 - lesser than t(n-1)
06:53 - we have used approximations because it
was a lot easier using these
06:57 - approximations
06:58 - to reduce this expression and
show you that
07:02 - the time taken by this program grows exponentially with the input
07:06 - so even if we take lower bound of
07:09 - to 2 to the power n by 2
07:11 - then for a simple input like n is equal to 100
07:15 - this program will take years to give you the result
07:18 - the order of growth of T(n)
07:21 - would be somewhere in between the lower bound and upper bound
07:25 - but in complexity analysis we often
07:29 - see the closest of the bound
07:30 - to make a sense of the run time of the worst case
07:32 - thank them of the program in the worst
case
07:35 - now i will clear this calculation and write here
07:38 - big O notation
07:40 - which is one of the most famous
notations to describe
07:43 - time complexity of a program
07:45 - actually represents the upward bound
07:48 - of the growth of the function
07:49 - or rather the upper bound of the growth of the time
07:53 - so we can say in this case that this
particular
07:56 - algorithm
07:57 - is
07:58 - having the time complexity which is big O of 2 to the power n
08:03 - so
08:04 - fib recurssion
08:05 - which is a recursive implementation
of fibonacci sequence
08:09 - has a complexity
08:10 - big O of 2 to the power n
08:12 - if we would have written an iterative implementation using loops
08:16 - then the complexity
08:17 - would have been big O of n
08:20 - or in other words
08:22 - this algorithm is order of n if
08:24 - an algorithm is order of n
08:25 - in terms of time complexity
08:27 - such an algorithm is called linear time algorithm
08:31 - and if
08:32 - an algorithm has
08:35 - time complexity of the order of
08:37 - something like a to the power b then
08:39 - such an algorithm is called
08:41 - exponential time algorithm
08:43 - now a linear time algorithm or an algorithm of order n
08:47 - is lot lot better than
08:49 - exponential time algorithm. infact exponential time algorithm is
08:54 - an algorithm with the worst kind of time
complexity
08:56 - for example in this particular case
08:58 - using the iterative method
09:00 - for an input as high as a million
09:03 - we will get the result in no time
09:07 - while the recursive implemetation which has an
09:09 - exponential run time
09:11 - and for an input as small as 100
09:13 - we will not get the result
09:15 - in a reasonable time
09:17 - we will dig deeper into complexity
analysis of programs and all these
09:21 - notations like big O notation
09:23 - in couple of more lessons
09:25 - so thanks for watching

Cleaned transcript:

in this lesson we will try to analyze time complexity of recursive implementation of fibonacci sequence in an earlier lesson we had shown how and why recursive implementation of fibonacci sequence a simple recursive implementation of fibonacci sequence is lot costlier than iterative implementation where we simply write the loop let's try to deduce it mathematically as we know fibonacci sequence is a sequence in which the first two elements are zero and one and all other elements are sum of previous two elements and a recursive program to find an element in the sequence goes something like this if n is less than or equal to one which accounts for the first two elements in the sequence we simply return n else we make two recursive calls to calculate fib of n 1 and fib of n 2 sum them up and return the value let's say time taken to calculate fib of n is T(n) now when we try to analyze time complexity of programs we make an assumption that each simple operation takes one unit of time so if we call this method fib of n for n greater than one then first we perform a compassion here with one which is one unit of cost let's say one unit of cost is there for comparison and because it is greater than one so it goes to the else conditioned control of the program and here we make two recursive calls where we pass arguments n 1 and n 2. Sowe make two subtractions so there is one unit of cost for this subtraction and one unit of cost for this subtraction and then one unit of cost for this addition so for n greater than one there are four simple operations, two subtractions one addition and one comparision now time taken to calculate fib of n can be calculated as time taken to calculate fib of n minus one which is T (n 1) plus time taken to calculate fib of n 2 which is T( n 2) plus 4 units of time for these simple operations if n is less than or equal to one which is the case for T(0) and T(1) we only have one simple question which is comparision so here the time taken is one unit let's try to reduce T in terms of these known values which are T(0) and T(1) but before I do that i will try an approximation and i will come back to why I am doing this let's say the time taken to calculate fib of n minus one which is T n minus one is almost equal to the time taken to calculate fib of n minus two which is T n minus two now in reality the time taken to calculate fib of n minus 1 is greater than the time taken to calculate fib of n minus 2 so what they're trying to do here is we are trying to calculate a lower bound for T(n) the time taken to calculate fib of n so now T(n) would be 2 times T of n 2 plus four let's say we write this 4 as a constant C so C is equal to 4 is a constant that adds up into this expression now let's try to reduce this expression T(n2) can be written as 2 times T of n4 plus C so this expression eventually reduces to four T (n 4) plus three C and again and T(n4) can be reduced to T(n6) so this will be eight T(n6) plus seven C and we can go on like sixteen T(n8) plus fifteen c and so on now if i want to reduce it by some generic value then we can say that this is equal to 2 to the power k time T of n minus two k plus two to the power k minus one into C and you can veriffy that this expression is true for all the values of k like this k is equal to 2 this is k is equal to 3 the this is k is equal to 4 and this is our T(n) now if i want to read this in terms of T(0) which is known to us then that case n minus two k would be equal to 0 that will imply k = n by 2 and our expression T(n) will be reduced as 2 to the power n by 2 T(0) plus 2 to the power n by 2 minus one C and this is nothing but one pluc C into 2 to the power n by 2 minus C so in simple terms we can say here that T of n is proportional to 2 to the power n by two and this is a lower bound for us the lower bound for the time taken and i will clear this calculation and write here now let's try another approximation this time. Let's say the time taken to calculate fib of n minus 2 which is T(n2) is almost equal to T of n minus one now this reduces our expression or this simplifies our expression as T(n) is equal to 2 times T of n1 plus constant C and C is equal to 4 now in reality T of n 2 will be lesser than T of n 1 so this expression is kind of giving an upper bound this time and we can go on reducing this particular expression similar to what we had done before so this would be four T n minus 2 plus three C which is again equal to eight T n minus 3 plus seven C and if I have to reduce it in some generic form then this is equal to 2 to the power k T of n minus k plus 2 to the power k minus 1 into C now if i want to read this expression k in terms of the T(0) then n minus k will be equal to 0 which will imply k is equal to n and that could mean than T(n) is equal to 2 to the power n T of 0 plus 2 to the power n minus one into C and t(0) is nothing but 1 so finally it will be 1 plus C into 2 to the power n minus C so in simplest of terms in this particular case we can say that T(n) is proportional to 2 to the power n and this is our upper bound because we have approximated T of n minus two to be T of n minus 1 while in reality lesser than t(n1) we have used approximations because it was a lot easier using these approximations to reduce this expression and show you that the time taken by this program grows exponentially with the input so even if we take lower bound of to 2 to the power n by 2 then for a simple input like n is equal to 100 this program will take years to give you the result the order of growth of T(n) would be somewhere in between the lower bound and upper bound but in complexity analysis we often see the closest of the bound to make a sense of the run time of the worst case thank them of the program in the worst case now i will clear this calculation and write here big O notation which is one of the most famous notations to describe time complexity of a program actually represents the upward bound of the growth of the function or rather the upper bound of the growth of the time so we can say in this case that this particular algorithm is having the time complexity which is big O of 2 to the power n so fib recurssion which is a recursive implementation of fibonacci sequence has a complexity big O of 2 to the power n if we would have written an iterative implementation using loops then the complexity would have been big O of n or in other words this algorithm is order of n if an algorithm is order of n in terms of time complexity such an algorithm is called linear time algorithm and if an algorithm has time complexity of the order of something like a to the power b then such an algorithm is called exponential time algorithm now a linear time algorithm or an algorithm of order n is lot lot better than exponential time algorithm. infact exponential time algorithm is an algorithm with the worst kind of time complexity for example in this particular case using the iterative method for an input as high as a million we will get the result in no time while the recursive implemetation which has an exponential run time and for an input as small as 100 we will not get the result in a reasonable time we will dig deeper into complexity analysis of programs and all these notations like big O notation in couple of more lessons so thanks for watching
