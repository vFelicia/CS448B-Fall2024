With timestamps:

00:00 - In our previous lessons, we
00:03 - defined pointer variables
00:05 - and we also saw how to operate upon
pointer variable, how to work with
00:08 - pointer variables in c or c++ program
00:12 - but we did not really talk about
00:14 - the real use cases of pointer variables, in what scenarios we may 
00:18 - want to 
00:19 - use pointer variables
00:21 - So in this lesson we will talk about
00:23 - one of the use cases of pointer variables
00:26 - and the use case is
00:27 - using them, using pointers as
00:30 - function arguments
00:32 - and we also term this as call by reference
00:35 - so
00:36 - let's discuss a scenario
00:39 - Albert is a beginner programmer
00:41 - and he has recently learnt about the
concept
00:44 - user-defined functions
00:46 - Now, he tries to apply this concept
00:48 - and he writes
00:49 - a simple C program
00:51 - like this
00:52 - what he is trying to achieve here is
that he has
00:56 - an integer variable
00:58 - declared and initialized in the main
method
01:01 - and wants to increment the value in this variable by one
01:04 - so instead of writing something like a plus plus, or a equal to a plus one
01:09 - instead of writing a statement like this
01:12 - he writes a function increment
01:14 - that will take an integer 
01:16 - a as argument
01:17 - and inside this function he's writing a
statement like a is equal to a plus
01:21 - one
01:22 - He calls this function increment from
the main method
01:26 - passing
01:26 - a as argument
01:28 - and then he prints the value of a
01:31 - now what he is expecting here
01:33 - is that the value of a will be incremented
to eleven
01:37 - and hence the print statement will print
01:39 - a = 11
01:41 - but when he runs the program, the output of the print statement is a = 10. Now,
01:47 - Albert does not understand why this is
happening
01:50 - he has declared a valuable a
01:52 - and then he has initialized this variable to 10 and
then he is passing the same a
01:57 - to the function increment
01:59 - and the same a is being incremented by one in this function
02:03 - so why the value of a being printed
02:07 - is not eleven
02:08 - why is it 10
02:10 - now what Albert does not understand well
02:13 - or what he probably forgot
02:16 - is that whenever we declare a variable
02:18 - inside a function
02:20 - then we call that variable a local variable
02:23 - because as such
02:24 - just using the variable name
02:26 - we can access that variable only
02:28 - inside the same function in which we
have declared the variable
02:32 - so these two a
02:33 - this a in the function increment and
this a in the function main 
02:37 - are actually not the same a
02:40 - the 'a' in the function increment is another 'a' 
02:43 - when main calls the method increment
02:45 - and passes this
02:47 - a as argument
02:48 - to the function
02:50 - then only the value of a is copied
02:53 - to this another 'a' which is
02:55 - another variable
02:56 - local to the increment function
02:58 - so what i'll do is, i'll do couple of
modifications in this code to show you
03:02 - a better picture
03:04 - I will write two print statements
03:06 - in this code
03:07 - first print statement in the increment method
something like this
03:11 - address of variable 'a' in increment is
03:16 - uh... as we know if we put ampersand
operator in front of a variable name
03:19 - then we get the address
03:22 - of that variable
03:25 - and i'll comment out this print and i'll write
03:28 - one more print in the main method
like this
03:31 - and here i print that the address of variable 'a'
in main is ampersand 'a'
03:36 - let us now run this and see what happens
03:38 - uh... let me also put
03:40 - and en of line after 
03:42 - we print the
03:44 - statement
03:45 - and the output is address of variable 'a'
in increment method is printed as
03:50 - four four five four four six zero
03:53 - and in main it is equal to four four
five four six six two
03:58 - these two look similar but they're
not the same
04:00 - one is having four four six seven zero in the end
and the another is having four four six zero
04:05 - what the values are is not important
04:08 - what the addresses are is not important
what's important is that
04:11 - these addresses are different
04:13 - if the 'a' in main method and the 'a' in increment method were same 
04:18 - these two addresses would have been same
04:21 - To understand this even better, we will
04:24 - try to understand how things happen in
computer's memory when a program
04:28 - executes
04:30 - When a program on an application is started
04:33 - then the computer sets aside
04:35 - the machine sets aside or reserves
04:37 - some amount of memory
04:39 - for the execution of this program
04:41 - the memory that is a set aside for the
application is divided into
04:46 - is typically divided into
04:47 - these four parts
04:49 - that we are showing here
04:51 - one part of memory is allocated
04:53 - to store the various instructions in the program
04:57 - the computer needs to keep all these
instructions in the memory
05:00 - these instructions that we have in the
program like increment or declare these
05:03 - variables
05:05 - all these sequential instructions
05:07 - one part of the memory is
05:09 - one part of the allocated memory is for 
05:11 - static or global variables
05:13 - if we do not declare a variable inside a function 
05:17 - in c++ or c , then it is a global variable
05:21 - Now global variables
05:22 - can be accessed
05:24 - and modified
05:25 - anywhere in the program
05:27 - unlike local variables which can be
05:29 - accessed and modified within a
particular function or within a
05:32 - particular code block
05:34 - now tthe third part of applications memory is
05:37 - called as stack and
05:40 - this is really important
05:42 - this is where all the local variables go
05:45 - and we will mostly be talking about stack
05:48 - in this lesson
05:49 - and the fourth part is heap
05:52 - and we will come to this later
05:55 - in our
05:56 - forthcoming lessons
05:58 - of these four segments of the allocated
memory
06:01 - uh... the text segment
06:03 - the global variable segment and the stack segment
06:06 - these three are fixed and
06:08 - they are decided when the program starts
06:10 - executing
06:12 - the application however can keep asking for
more memory for its
06:15 - it's heap segment
06:17 - during its execution only
06:20 - we will cover all of these things in
detail in our forthcoming lessons, please
06:24 - do not get
06:25 - scared by these terms
06:27 - let us now see what happens when
06:29 - a program
06:30 - executes
06:31 - let us say this is our computer's overall memory
06:34 - the RAM
06:35 - and as we know each
06:37 - byte in the memory is addressable. so, let's say
06:41 - uh... the memory allocated for our
program is from address two zero zero
06:44 - to
06:45 - eight zero zero
06:46 - and these are the various segments
06:48 - of our application's memory and of this
06:51 - let's say uh... address three hundred
06:53 - to six hundred is allocated for stack
06:57 - now there is more memory of course in
the RAM
06:59 - after
07:00 - uh... address 800 and before address 200
07:03 - Ok, so from 200 to 800
07:05 - this part of the memory is assigned for
our program
07:08 - let's say this Cprogram that we have
in the left
07:11 - Now, when a function is invoked
07:14 - like when the
07:15 - program starts the main method is
initially invoked
07:18 - all the information about the method
07:21 - all the information about the method call like its parameters, all the
07:25 - local variables
07:27 - the calling function to which it should return
07:30 - the current
07:31 - instruction at which is executing, all this infromation
07:34 - it's stored in the stack
07:36 - so we will take out from
07:38 - the stack some part for the main method
07:41 - and create a unit
07:43 - which we call stack frame
07:46 - Each function will have a stack frame
07:48 - now we have a variable 'a'
07:51 - now memory is allocated for 'a' from this stack frame and the value of 'a' is 10. 
07:56 - now the main method calls
07:57 - increment function
07:59 - what happens when main method calls
08:01 - increment is that uh... machine says that hey
08:04 - i will stop your execution for some time
08:06 - i will stop at this particular instruction. let me go ahead
08:10 - finish this
08:11 - method increment
08:13 - and then i'll come back to the main
method once I am done with increment
08:16 - now another stack frame is allocated for
the increment method
08:20 - and the parameters in increment method like
08:22 - we have a parameter 'a'
08:24 - so fresh local variables are created
08:26 - corresponding to these parameters
08:28 - and whatever values have been passed
are copied to these variables, these
08:31 - parameters
08:33 - now when we say a = a+1
08:36 - here in this statement
08:38 - then what happens that
08:39 - this 'a' which is local to the increment function, in this particular
08:42 - stack-frame
08:43 - this 'a' is incremented
08:46 - they cannot access a variable outside
08:48 - its stack-frame
08:50 - and now increment finishes
08:52 - When increment finishes, the control
08:54 - returns to the main method
08:56 - and what the machine does is
08:57 - it clears the stack-frame that was allocated for increment
09:01 - and main method resumes again. So, main method was paused at this particular instruction
09:05 - increment
09:06 - so life time of a local variable is
09:09 - till the time the function is executing. Now,
09:13 - the next statement in main method is a call to the function printf
09:17 - printf is not a user defined function. It
is a library function
09:21 - the state of execution of main method is
kind of paused and printf is executing
09:24 - now
09:25 - we often call this particular
09:27 - structure call stack or function
call stack
09:31 - whatever function is at the top of the
stack is executing
09:34 - and remember this stack is
09:36 - fixed in size. So, if you
09:38 - have a scenario where one function keeps
calling another function
09:41 - indefinitely like
09:43 - in the case of indefinite recursion
09:46 - then the memory of this stack will
overflow and our program will crash
09:50 - ok, but that is not relevant for this
scenario
09:53 - so now you must be getting a picture of
what happens when one function calls
09:56 - another function
09:58 - this 'a' is in the stack-frame of the
main method
10:01 - main is our calling function
10:03 - and increment is our called function
10:07 - When we call a function in the
calling function, the argument is also
10:10 - known as
10:11 - actual argument
10:13 - and in the called function, the argument is
known as
10:16 - formal argument
10:17 - all that happens is that actual argument
is actually mapped
10:21 - to a formal agreement
10:23 - so when this function call happens 'a'
mapped to, 'a' as an actual argument
10:28 - is mapped to another 'a' which is a formal argument
10:31 - instead of 'a' , if we were having a 'x' here
10:34 - so we would have written something like
int x is the argument and 'x' is
10:38 - x plus one then
10:40 - 'a' would have been mapped to x
10:42 - so the value of 'a' will be copied to
variable 'x'
10:46 - Now,when we make such a
10:47 - function call where
10:49 - we basically have one variable being
mapped to another variable, the value
10:54 - in one variable
10:55 - copied to another variable, then such a
function call is also called as
10:59 - call by 
11:00 - value
11:02 - so this is what Albert was doing
11:04 - making a call by value
11:06 - and that's why he was he was not able to get the desired result
11:09 - but can we get the result that Albert
11:11 - wanted to have
11:12 - Albert wanted to use this variable 'a'
11:15 - which is local to the main method
inside the
11:18 - increment function
11:20 - Can we really do so?
11:22 - Well ! yes, we can do so
11:24 - if we use pointers as function
arguments. let us now look at this code
11:29 - and I am drawign only the stack here so
that i'm able to show the simulation
11:33 - of program execution neatly. 
11:36 - Now what we're doing here is that we
do not have
11:39 - an argument which is
11:40 - integer
11:41 - in this function increment, we have an argument which is pointer to integer
11:45 - and pointer to integer as we know will store the address of an
11:49 - integer
11:49 - so now what we are doing is that in the increment function, we are passing
11:53 - the address of 'a'
11:55 - so when the program will start executing, the main method will be invoked
11:58 - first. Let's say this is the stack-frame of the main method
12:03 - let's say 300 to
12:05 - 350, this address is the stack-frame of the main method and
of main method
12:09 - there would be
12:10 - a local variable 'a'
12:12 - in this main method, let's say the address at
which 'a' is stored is 308
12:18 - this may not be in proportion but still
let's say
12:21 - this is how it is stored
12:23 - Now when main method calls increment
12:25 - then a local variable corresponding to the
parameter
12:28 - 'p' is created
12:29 - and this is a pointer to integer and the value that is passed to this particular
12:33 - function
12:34 - the value that gets stored in this
particular
12:37 - sorry its not a function, its a variable. the value that gets
12:40 - copied or
12:41 - stored in this particular variable would be
12:43 - 308, the address of 'a'. So. 
12:47 - 'p' is pointing to 'a'
12:49 - Now, in this statement here, when we say asterisk  'p'
12:52 - we de-reference this address, so we are saying here that 
12:57 - *p is value stored in address p 
13:00 - so we say that
13:01 - increment the value stored at address p by one
13:04 - the value stored at address 308 gets incremented by one. So 'a'
13:09 - is now eleven
13:11 - so, now when increments initiatives and
we come back to the main method and the
13:16 - next line gets executed which is the
print statement
13:19 - then a is now 11
13:22 - if u run this program then what gets
printed is a = 11
13:26 - such a function call in which, instead of
passing the value of a variable, we
13:30 - pass the
13:31 - address of the variable, so that we have
a reference to the variable
13:35 - and we can de-reference it and perform some operations is called call by reference
13:40 - so if we use pointers as function
arguments
13:44 - then we are using call by reference. Call by reference can save us a lot of
13:48 - memory because instead of creating a
copy of a large and complex 
13:53 - data-type
13:53 - if we just use a reference to it
13:56 - and using a reference will also cost us some memory, but very small amount of memory, then
14:01 - we are saved from creating a new copy
of a complex datatype
14:05 - in the coming lessons, we will see more of the layout of application's 
14:09 - memory and
14:10 - what all things we can do using pointers
14:13 - So, thanks for watching !

Cleaned transcript:

In our previous lessons, we defined pointer variables and we also saw how to operate upon pointer variable, how to work with pointer variables in c or c++ program but we did not really talk about the real use cases of pointer variables, in what scenarios we may want to use pointer variables So in this lesson we will talk about one of the use cases of pointer variables and the use case is using them, using pointers as function arguments and we also term this as call by reference so let's discuss a scenario Albert is a beginner programmer and he has recently learnt about the concept userdefined functions Now, he tries to apply this concept and he writes a simple C program like this what he is trying to achieve here is that he has an integer variable declared and initialized in the main method and wants to increment the value in this variable by one so instead of writing something like a plus plus, or a equal to a plus one instead of writing a statement like this he writes a function increment that will take an integer a as argument and inside this function he's writing a statement like a is equal to a plus one He calls this function increment from the main method passing a as argument and then he prints the value of a now what he is expecting here is that the value of a will be incremented to eleven and hence the print statement will print a = 11 but when he runs the program, the output of the print statement is a = 10. Now, Albert does not understand why this is happening he has declared a valuable a and then he has initialized this variable to 10 and then he is passing the same a to the function increment and the same a is being incremented by one in this function so why the value of a being printed is not eleven why is it 10 now what Albert does not understand well or what he probably forgot is that whenever we declare a variable inside a function then we call that variable a local variable because as such just using the variable name we can access that variable only inside the same function in which we have declared the variable so these two a this a in the function increment and this a in the function main are actually not the same a the 'a' in the function increment is another 'a' when main calls the method increment and passes this a as argument to the function then only the value of a is copied to this another 'a' which is another variable local to the increment function so what i'll do is, i'll do couple of modifications in this code to show you a better picture I will write two print statements in this code first print statement in the increment method something like this address of variable 'a' in increment is uh... as we know if we put ampersand operator in front of a variable name then we get the address of that variable and i'll comment out this print and i'll write one more print in the main method like this and here i print that the address of variable 'a' in main is ampersand 'a' let us now run this and see what happens uh... let me also put and en of line after we print the statement and the output is address of variable 'a' in increment method is printed as four four five four four six zero and in main it is equal to four four five four six six two these two look similar but they're not the same one is having four four six seven zero in the end and the another is having four four six zero what the values are is not important what the addresses are is not important what's important is that these addresses are different if the 'a' in main method and the 'a' in increment method were same these two addresses would have been same To understand this even better, we will try to understand how things happen in computer's memory when a program executes When a program on an application is started then the computer sets aside the machine sets aside or reserves some amount of memory for the execution of this program the memory that is a set aside for the application is divided into is typically divided into these four parts that we are showing here one part of memory is allocated to store the various instructions in the program the computer needs to keep all these instructions in the memory these instructions that we have in the program like increment or declare these variables all these sequential instructions one part of the memory is one part of the allocated memory is for static or global variables if we do not declare a variable inside a function in c++ or c , then it is a global variable Now global variables can be accessed and modified anywhere in the program unlike local variables which can be accessed and modified within a particular function or within a particular code block now tthe third part of applications memory is called as stack and this is really important this is where all the local variables go and we will mostly be talking about stack in this lesson and the fourth part is heap and we will come to this later in our forthcoming lessons of these four segments of the allocated memory uh... the text segment the global variable segment and the stack segment these three are fixed and they are decided when the program starts executing the application however can keep asking for more memory for its it's heap segment during its execution only we will cover all of these things in detail in our forthcoming lessons, please do not get scared by these terms let us now see what happens when a program executes let us say this is our computer's overall memory the RAM and as we know each byte in the memory is addressable. so, let's say uh... the memory allocated for our program is from address two zero zero to eight zero zero and these are the various segments of our application's memory and of this let's say uh... address three hundred to six hundred is allocated for stack now there is more memory of course in the RAM after uh... address 800 and before address 200 Ok, so from 200 to 800 this part of the memory is assigned for our program let's say this Cprogram that we have in the left Now, when a function is invoked like when the program starts the main method is initially invoked all the information about the method all the information about the method call like its parameters, all the local variables the calling function to which it should return the current instruction at which is executing, all this infromation it's stored in the stack so we will take out from the stack some part for the main method and create a unit which we call stack frame Each function will have a stack frame now we have a variable 'a' now memory is allocated for 'a' from this stack frame and the value of 'a' is 10. now the main method calls increment function what happens when main method calls increment is that uh... machine says that hey i will stop your execution for some time i will stop at this particular instruction. let me go ahead finish this method increment and then i'll come back to the main method once I am done with increment now another stack frame is allocated for the increment method and the parameters in increment method like we have a parameter 'a' so fresh local variables are created corresponding to these parameters and whatever values have been passed are copied to these variables, these parameters now when we say a = a+1 here in this statement then what happens that this 'a' which is local to the increment function, in this particular stackframe this 'a' is incremented they cannot access a variable outside its stackframe and now increment finishes When increment finishes, the control returns to the main method and what the machine does is it clears the stackframe that was allocated for increment and main method resumes again. So, main method was paused at this particular instruction increment so life time of a local variable is till the time the function is executing. Now, the next statement in main method is a call to the function printf printf is not a user defined function. It is a library function the state of execution of main method is kind of paused and printf is executing now we often call this particular structure call stack or function call stack whatever function is at the top of the stack is executing and remember this stack is fixed in size. So, if you have a scenario where one function keeps calling another function indefinitely like in the case of indefinite recursion then the memory of this stack will overflow and our program will crash ok, but that is not relevant for this scenario so now you must be getting a picture of what happens when one function calls another function this 'a' is in the stackframe of the main method main is our calling function and increment is our called function When we call a function in the calling function, the argument is also known as actual argument and in the called function, the argument is known as formal argument all that happens is that actual argument is actually mapped to a formal agreement so when this function call happens 'a' mapped to, 'a' as an actual argument is mapped to another 'a' which is a formal argument instead of 'a' , if we were having a 'x' here so we would have written something like int x is the argument and 'x' is x plus one then 'a' would have been mapped to x so the value of 'a' will be copied to variable 'x' Now,when we make such a function call where we basically have one variable being mapped to another variable, the value in one variable copied to another variable, then such a function call is also called as call by value so this is what Albert was doing making a call by value and that's why he was he was not able to get the desired result but can we get the result that Albert wanted to have Albert wanted to use this variable 'a' which is local to the main method inside the increment function Can we really do so? Well ! yes, we can do so if we use pointers as function arguments. let us now look at this code and I am drawign only the stack here so that i'm able to show the simulation of program execution neatly. Now what we're doing here is that we do not have an argument which is integer in this function increment, we have an argument which is pointer to integer and pointer to integer as we know will store the address of an integer so now what we are doing is that in the increment function, we are passing the address of 'a' so when the program will start executing, the main method will be invoked first. Let's say this is the stackframe of the main method let's say 300 to 350, this address is the stackframe of the main method and of main method there would be a local variable 'a' in this main method, let's say the address at which 'a' is stored is 308 this may not be in proportion but still let's say this is how it is stored Now when main method calls increment then a local variable corresponding to the parameter 'p' is created and this is a pointer to integer and the value that is passed to this particular function the value that gets stored in this particular sorry its not a function, its a variable. the value that gets copied or stored in this particular variable would be 308, the address of 'a'. So. 'p' is pointing to 'a' Now, in this statement here, when we say asterisk 'p' we dereference this address, so we are saying here that *p is value stored in address p so we say that increment the value stored at address p by one the value stored at address 308 gets incremented by one. So 'a' is now eleven so, now when increments initiatives and we come back to the main method and the next line gets executed which is the print statement then a is now 11 if u run this program then what gets printed is a = 11 such a function call in which, instead of passing the value of a variable, we pass the address of the variable, so that we have a reference to the variable and we can dereference it and perform some operations is called call by reference so if we use pointers as function arguments then we are using call by reference. Call by reference can save us a lot of memory because instead of creating a copy of a large and complex datatype if we just use a reference to it and using a reference will also cost us some memory, but very small amount of memory, then we are saved from creating a new copy of a complex datatype in the coming lessons, we will see more of the layout of application's memory and what all things we can do using pointers So, thanks for watching !
