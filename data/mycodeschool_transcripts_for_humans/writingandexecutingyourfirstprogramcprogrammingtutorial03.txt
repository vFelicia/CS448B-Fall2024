With timestamps:

00:00 - In our previous lesson, we very briefly
00:03 - described how programs get stored in
computers memory
00:06 - and how they get executed and then we drew
00:09 - analogy between learning a natural
language like English
00:13 - and a programming language like C. Now in
this lesson, we are going to have some
00:17 - real action. We're going to the right our
first
00:19 - program in C. it's a tradition that whenever
you learn a new programming language
00:24 - the first program that you're right in
that language is to
00:28 - print hello world on-screen. So let's
write this program
00:32 - the first thing that we will need is an
editor in which we should be able to
00:37 - write
00:37 - our program. What I'll do is I will not
use any special editor
00:41 - I'm on Windows machine. So I'll just open 
00:45 - notepad and if you are on some other systems
like Linux or Mac
00:49 - you can open an editor of your own
choice and now I can start writing my
00:53 - program
00:54 - the first line that I'll write in my
C program
00:57 - will be this pound sign and then include
and then this
01:02 - less than sign and then STDIO
01:05 - dot H and then you have a greater
than sign so
01:09 - stdio.h  is within angular bracket
01:13 - things are case sensitive here, so make
sure you write everything in small
01:16 - letters
01:17 - lower case letters. This line is saying
that
01:20 - I want to use the functionalities of
a C library
01:24 - that we call standard input and output
library
01:27 - or just studio.h. I will come
back to explaining what a library is
01:33 - I'll just move on for now. The next line
that I'll write
01:37 - is int, then space and then I'll write mean
01:40 - and then I'll open up a parenthesis and
close a parenthesis
01:44 - and then I'll go to the next line and
and type
01:48 - an opening curly brace and then on the
next line I'll draw
01:52 - I'll type a closing curly brace. We
will write this much of code in all
01:56 - our programs. This is basic skeleton
01:59 - and now I'll quickly explain what we
have really done here
02:03 - a 'C' program is organized in entities
02:06 - that we call  functions. You must be
knowing of functions in mathematics
02:11 - Let's take example of a mathematical
function 
02:15 - F(x) = x^2 is my function. You can
imagine a function
02:18 - to be a box that will take something
02:22 - inside and give back something else
02:25 - it will give something else applying some
rules. To this function F(x) = x^2
02:29 - if we will give this
function 2, it will give
02:33 - back four. if we will give five it will
give back
02:36 - 25. it will give back square of the
number
02:39 - You can think of a function in
programming something like this
02:43 - You can give a nice name to your function
and then you can define
02:47 - what all the function will accept inside
it
02:50 - whatever you give to a function in C is
called
02:54 - argument and you can have more than one
argument
02:57 - you can have arguments and whatever
03:01 - you get back from the function is called return
03:04 - In our program whatever we have
written so far
03:08 - these lines after hash include studio.h
03:13 - are basic structure of a function. First
line of a function contains definition
03:18 - of the function
03:19 - the first part in definition will tell
you
03:22 - what the function will return. int here
means that the function will return
03:27 - integer, an integer. Before the
start of parentheses
03:31 - what we have is name of the function
03:34 - so this function has name main and right
now there is nothing inside the
03:39 - parenthesis
03:40 - but inside the parenthesis, you define
what all the function will
03:43 - accept inside it, what all the function
with accept as
03:48 - arguments. A function may not
03:51 - need arguments and a function sometimes
may not return anything
03:55 - after the definition of the function, we
must-have an
03:59 - opening curly brace and then we can
have some
04:02 - statements to perform some task
04:05 - we can have as many statements as we
want and after all the statements we
04:10 - must have
04:11 - a closing curly brace. Closing  curly brace will mark the end of function
04:16 - whatever is in between the opening brace
and the closing brace
04:20 - is what we can call the body of the
function. Statements are executed
04:24 - sequentially
04:25 - a function in a program is basically an
entity
04:28 - that can perform a specific sub-task
04:31 - in a C program you must always have a
function named main
04:35 - the execution of your 'C' program always
starts with first
04:40 - statement in the main function. You can
write a function of your own
04:44 - but there are some pre-written and pre-
implemented functions
04:48 - in C to perform some important tasks
04:51 - and these functions are organized in
what we call libraries
04:55 - this first line #include
04:58 -  is basically saying that I'm going
to use some functions
05:03 - that are defined in stdio.h 
library
05:06 - which we also call standard input and
output library
05:10 - this library contains a function named
printf
05:13 -  that will print something. Now I'm
writing a statement
05:18 - that will mean making a call to printf
function. To call a function you first
05:22 - need to write the name of the function
then within parentheses, you must give
05:26 - arguments, if any. To printf you can
give
05:29 - argument like this. Within double quotes
05:32 - write whatever you want to print. I want
to print "Hello World"
05:37 - Every statement in 'C' must terminate
with a semicolon
05:41 - its a rule, so we have put a semicolon
here. Thre is one last statement that we
05:46 - need to write and we will be done
05:47 - main is defined to return integer. To
return something from a function you
05:52 - use the keyword
05:53 - return and then after a space you
write
05:56 - a constant or variable name that will
contain the value to be returned.
06:00 - At the end of your main function, you
must write the statement
06:04 - return 0; For any other function that is
defined
06:08 - to return integer, if you would not have
an explicit return statement like this
06:13 - you will error, but for main function
even if you will skip writing this
06:17 - return 0
06:18 - your program will work. it is good
to write this for the sake of consistency
06:23 - okay, so this is all we need to print "Hello World"
Now, what I'm gonna do is
06:27 - I'll save this file. In the Save dialog
select file
06:30 - type as "All Files" and then give a
filename
06:34 - something DOT C, I'll give file name HelloWorld.C
06:38 - so I just created a 'C' source file with
a program to print hello world
06:42 - and now we need to compile and run this
program. To compile
06:46 - we will need a compiler. I'm going to
use a compiler named GCC which is
06:51 - a standard compiler for 'C'. On a Linux
machine you do not need to install gcc
06:57 - it's already there. On Windows, you will
have to install gcc
07:01 - you can check the description of this
video for a link on how to install
07:05 - and configure gcc  for Windows. I am on a
Windows machine and gcc is configured
07:10 - for me
07:11 - to compile using gcc, I first need to
open command prompt in Windows
07:15 - press windows plus 'R' key to open this
run dialogue and
07:19 - type in cmd and then click OK, command
prompt window open for you
07:24 - Type in gcc and press enter if you get a
message like gcc no input files, then gcc is
07:30 - configured for you
07:31 - if you get a message like command not
recognized
07:34 - gcc is not correctly configured. Now you
must be remembering, in which directory
07:39 - you had saved your source fine
07:41 - For me it's in MyCode directory. In 'C'
drive, there is this file "Helloworld.C"
07:45 -  
07:46 - in command prompt I first need to go to
this directory,so
07:49 - 'll say CD for change directory and type
in the path
07:54 - now I'm in my code directory and now I
type in gcc
07:58 - and the name of the C file for me, its
"HelloWorld.C"
08:02 - You can type this same command on a
shell in Linux
08:05 - if you hit ENTER and no message comes,
your program has compiled and an
08:10 - executable has been generated
08:12 - By default, an executable named 'a' is
generated
08:16 - this is  a.exe on Windows. On Linux, 
08:20 - a file named a.out will be generated
08:23 - in Windows, you can double-click and run
this fight
08:26 - but if you will double click something will
flash and go away
08:30 - this is because programs starts execution
08:33 - and before you can see the output it
finishes.
08:36 - For your machine, running a simple print
statement is a task of milliseconds
08:41 - if you want to see the output, you can
run the executable from
08:44 - command prompt itself.  Type in a.exe
here
08:47 - on Linux, you can run a.out and when you'll
 press Enter
08:52 - you have the output here. if you are able
to do this much
08:55 - Congratulations, you ran your first
program in 'C' :)
08:58 - Please note that there are a lot of
compilers that give you
09:01 - very nice UI in which you will have an
editor and
09:05 - within the UI itself, you will be able to
compile and run your program
09:09 - and there will be a lot of cool features
to detect errors in your program
09:13 - We call these compilers integrated
development environments or
09:16 - IDEs.  We will show you how to work with
some of the IDEs
09:21 - in our next lesson. This is it for this
lesson. Thanks for watching !

Cleaned transcript:

In our previous lesson, we very briefly described how programs get stored in computers memory and how they get executed and then we drew analogy between learning a natural language like English and a programming language like C. Now in this lesson, we are going to have some real action. We're going to the right our first program in C. it's a tradition that whenever you learn a new programming language the first program that you're right in that language is to print hello world onscreen. So let's write this program the first thing that we will need is an editor in which we should be able to write our program. What I'll do is I will not use any special editor I'm on Windows machine. So I'll just open notepad and if you are on some other systems like Linux or Mac you can open an editor of your own choice and now I can start writing my program the first line that I'll write in my C program will be this pound sign and then include and then this less than sign and then STDIO dot H and then you have a greater than sign so stdio.h is within angular bracket things are case sensitive here, so make sure you write everything in small letters lower case letters. This line is saying that I want to use the functionalities of a C library that we call standard input and output library or just studio.h. I will come back to explaining what a library is I'll just move on for now. The next line that I'll write is int, then space and then I'll write mean and then I'll open up a parenthesis and close a parenthesis and then I'll go to the next line and and type an opening curly brace and then on the next line I'll draw I'll type a closing curly brace. We will write this much of code in all our programs. This is basic skeleton and now I'll quickly explain what we have really done here a 'C' program is organized in entities that we call functions. You must be knowing of functions in mathematics Let's take example of a mathematical function F(x) = x^2 is my function. You can imagine a function to be a box that will take something inside and give back something else it will give something else applying some rules. To this function F(x) = x^2 if we will give this function 2, it will give back four. if we will give five it will give back 25. it will give back square of the number You can think of a function in programming something like this You can give a nice name to your function and then you can define what all the function will accept inside it whatever you give to a function in C is called argument and you can have more than one argument you can have arguments and whatever you get back from the function is called return In our program whatever we have written so far these lines after hash include studio.h are basic structure of a function. First line of a function contains definition of the function the first part in definition will tell you what the function will return. int here means that the function will return integer, an integer. Before the start of parentheses what we have is name of the function so this function has name main and right now there is nothing inside the parenthesis but inside the parenthesis, you define what all the function will accept inside it, what all the function with accept as arguments. A function may not need arguments and a function sometimes may not return anything after the definition of the function, we musthave an opening curly brace and then we can have some statements to perform some task we can have as many statements as we want and after all the statements we must have a closing curly brace. Closing curly brace will mark the end of function whatever is in between the opening brace and the closing brace is what we can call the body of the function. Statements are executed sequentially a function in a program is basically an entity that can perform a specific subtask in a C program you must always have a function named main the execution of your 'C' program always starts with first statement in the main function. You can write a function of your own but there are some prewritten and pre implemented functions in C to perform some important tasks and these functions are organized in what we call libraries this first line #include is basically saying that I'm going to use some functions that are defined in stdio.h library which we also call standard input and output library this library contains a function named printf that will print something. Now I'm writing a statement that will mean making a call to printf function. To call a function you first need to write the name of the function then within parentheses, you must give arguments, if any. To printf you can give argument like this. Within double quotes write whatever you want to print. I want to print "Hello World" Every statement in 'C' must terminate with a semicolon its a rule, so we have put a semicolon here. Thre is one last statement that we need to write and we will be done main is defined to return integer. To return something from a function you use the keyword return and then after a space you write a constant or variable name that will contain the value to be returned. At the end of your main function, you must write the statement return 0; For any other function that is defined to return integer, if you would not have an explicit return statement like this you will error, but for main function even if you will skip writing this return 0 your program will work. it is good to write this for the sake of consistency okay, so this is all we need to print "Hello World" Now, what I'm gonna do is I'll save this file. In the Save dialog select file type as "All Files" and then give a filename something DOT C, I'll give file name HelloWorld.C so I just created a 'C' source file with a program to print hello world and now we need to compile and run this program. To compile we will need a compiler. I'm going to use a compiler named GCC which is a standard compiler for 'C'. On a Linux machine you do not need to install gcc it's already there. On Windows, you will have to install gcc you can check the description of this video for a link on how to install and configure gcc for Windows. I am on a Windows machine and gcc is configured for me to compile using gcc, I first need to open command prompt in Windows press windows plus 'R' key to open this run dialogue and type in cmd and then click OK, command prompt window open for you Type in gcc and press enter if you get a message like gcc no input files, then gcc is configured for you if you get a message like command not recognized gcc is not correctly configured. Now you must be remembering, in which directory you had saved your source fine For me it's in MyCode directory. In 'C' drive, there is this file "Helloworld.C" in command prompt I first need to go to this directory,so 'll say CD for change directory and type in the path now I'm in my code directory and now I type in gcc and the name of the C file for me, its "HelloWorld.C" You can type this same command on a shell in Linux if you hit ENTER and no message comes, your program has compiled and an executable has been generated By default, an executable named 'a' is generated this is a.exe on Windows. On Linux, a file named a.out will be generated in Windows, you can doubleclick and run this fight but if you will double click something will flash and go away this is because programs starts execution and before you can see the output it finishes. For your machine, running a simple print statement is a task of milliseconds if you want to see the output, you can run the executable from command prompt itself. Type in a.exe here on Linux, you can run a.out and when you'll press Enter you have the output here. if you are able to do this much Congratulations, you ran your first program in 'C' ) Please note that there are a lot of compilers that give you very nice UI in which you will have an editor and within the UI itself, you will be able to compile and run your program and there will be a lot of cool features to detect errors in your program We call these compilers integrated development environments or IDEs. We will show you how to work with some of the IDEs in our next lesson. This is it for this lesson. Thanks for watching !
