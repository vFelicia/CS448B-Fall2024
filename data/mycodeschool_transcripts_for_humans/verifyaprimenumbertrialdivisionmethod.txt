With timestamps:

00:01 - in this lesson we're going to write a simple
program
00:04 - to verify
00:05 - whether a given number N
00:07 - is prime or not
00:09 - so what is a prime number
00:11 - a prime number is a positive integer
00:13 - that can be divided by exactly 2
numbers
00:17 - 1 and the number itself
00:19 - so let us quickly see what all
numbers can be called prime numbers
00:23 - one and
00:24 - if we draw a set of that can
divide one, we get only one
00:28 - one is not prime number because for a number
to be prime it should be divided by exactly
00:32 - two numbers
00:34 - 2 can be divided by 1
00:36 - and 2
00:37 - this is a prime number
00:41 - 3 again can be divided by one and 3 and
this is a prime number
00:44 - 4 can be divided by one
00:49 - 1, 2 and 4. This is not a prime number
00:51 - and they can go on. so the smallest prime
no is 2
00:54 - so the simplest thing that we can do
00:56 - to verify whether a given no N is prime or not
01:00 - is to try dividing it
01:02 - by all thenumbers
01:03 - greater than 1 and less than N, that is
01:06 - for i starting 2 to N-1
01:09 - if there exists
01:11 - any such i
01:12 - that divides them
01:15 - then
01:16 - N is not prime
01:20 - if we can come out of this loop
01:21 - without finding any such i, then N is prime
01:25 - and let us just assume that
01:27 - for the special case when N is less than 1 or equal to 1
01:31 - we handle it correctly
01:32 - in the actual program
01:34 - now a simple observation here
01:36 - is that
01:38 - there can not be a factor of N other than N itself
01:42 - that can be greater than N/2
01:44 - so we cannot find a factor of
01:46 - N greater than N/2
01:49 - and less than or equal to N minus one
01:51 - so we do not need to run the loop all the way till N minus one and only check till
01:54 - n /2 
01:56 - should be sufficient
01:58 - this sounds good
02:00 - but can we do something better here
02:02 - let us see
02:04 - if a
02:04 - divides n
02:06 - then there must exist
02:08 - another number b
02:10 - that should be equal to n/a
02:12 - and b should also divide n
02:15 - so we should have a relationship like
02:17 - a X b = N
02:21 - a and b
02:23 - are called co-factors
02:25 - so all the factors of n always exist is pairs
02:29 - and it'll be
02:30 - for the theory
02:31 - I use an example.
02:34 - let's pick up a number
02:35 - thirty six
02:36 - and try to see that what all
02:38 - pair of factors are attached
02:40 - first factor of thirty six is one
02:43 - if you say that a is equal to one
then b must be equal to thirty six by one
02:47 - which is
02:47 - thirty six
02:50 - next pair of co-factors would be 2
and thirty six by two
02:53 - 12
02:55 - sorry it should be
02:57 - 18
02:59 - 3 and 12, 4 and 9
03:03 - six
03:04 - and thirty six by six is  six
03:06 - this is a special case where a is equal
to b
03:11 - next factor is nine and the corresponding 
co-factor is 4
03:14 - twelve and 3
03:16 - eighteen and two
03:18 - and finally thirty six and one
03:22 - if you carefully see we can see a pattern here
03:25 - that the number pairs are repeated
03:27 - only the order is 
different but the numbers are the same
03:30 - so we have 9,4 and 4,9
03:33 - twelve,three three,twelve
03:34 - eighteen,two two,eighteen.
03:38 -  thirty six,one one,thirty six
03:41 - so we are getting the same pairs again
03:43 - for and b there can be
03:46 - a case
03:48 - where a
03:49 - is equal to b
03:51 - and that would happen only if n is a
perfect square and in this case
03:56 - the equation will
03:57 - translate to a square equal to n
04:00 - or a is equal to
04:02 - square root of n
04:04 - in ourexample twenty six is a perfect
square. So we are able to get
04:08 - such a pair of co-factors
04:10 - where a is equal to b
04:12 - what if a is not equal to b
04:14 - so if a
04:16 - for example is less than b
04:19 - then see carefully a
04:22 - should always be less than square root of n
04:24 - and b
04:25 - should be greater than square root of n
04:28 - similarly if b
04:30 - is less than a
04:33 - then b should be
04:34 - less than squared root of n
04:36 - and a should be greater than square root of n
04:39 - so if a and b are not equal
04:41 - one of them
04:42 - has to be less than square root of n and another one has to be greater than square root of n
04:47 - let's try to plot alll these co-factors on a number-one line and they
04:51 - should be
04:52 - further clear to you.
04:54 - so i qm drawing a number line here and it
04:55 - is not so accurate
04:58 - we can only try to approximate the position of the numbers
05:00 - on this line
05:01 - let's pick up the first
05:03 - pair of factors
05:04 - one should be somewhere here
05:07 - and that is here
05:09 - two should be some where here
05:11 - and eighteen some where mid way between
zero and thirty six
05:14 - we should be here and twelve some where here
05:17 - four should be here and nine should be some
where here
05:21 - so we can see that
05:22 - one of the numbers in the pair
05:24 - is less than square root of n 
05:26 - and another
05:27 - is greater than square root of n
05:29 - and of course we should also plot six
and six where
05:32 - a and b are both equal to square root of n
05:35 - this four cases are just repetition of
05:38 - our previous first four pairs
05:42 - and we have already plotted them
05:44 - we have shown it for n equals to 36 but this property is true for
05:48 - all values of n
05:49 - so now we can say that hey if i do not get
05:52 - a factor of n all the way of square root of n
05:57 - then I can clearly say
05:58 - that i will not be able to get a factor
after square root of n as well
06:02 - so all i need to do
06:04 - is check only till square root of n
06:07 - so in my actual program
06:09 - I do not need to run the loop till n by 2
06:12 - we can run the loop till square root of n and that should be enough
06:15 - running loop till square root of n is lot more computationally
06:19 - efficient and you could pick up some
values of n and then try to see that
06:23 - square root of n
06:24 - is lot lesser than n by 2
06:26 - for higher values of n
06:28 - so this is the pseudo code we leave
06:30 - the rest of the implementation to you
06:33 - take care of the special cases where n can less than and equal to one
06:38 - the next lesson we will discus another
algorithm
06:42 - for primality testing which is a very
famous algorithm
06:45 - called Sieve of Eratosthenes
06:47 - so thanks for watching

Cleaned transcript:

in this lesson we're going to write a simple program to verify whether a given number N is prime or not so what is a prime number a prime number is a positive integer that can be divided by exactly 2 numbers 1 and the number itself so let us quickly see what all numbers can be called prime numbers one and if we draw a set of that can divide one, we get only one one is not prime number because for a number to be prime it should be divided by exactly two numbers 2 can be divided by 1 and 2 this is a prime number 3 again can be divided by one and 3 and this is a prime number 4 can be divided by one 1, 2 and 4. This is not a prime number and they can go on. so the smallest prime no is 2 so the simplest thing that we can do to verify whether a given no N is prime or not is to try dividing it by all thenumbers greater than 1 and less than N, that is for i starting 2 to N1 if there exists any such i that divides them then N is not prime if we can come out of this loop without finding any such i, then N is prime and let us just assume that for the special case when N is less than 1 or equal to 1 we handle it correctly in the actual program now a simple observation here is that there can not be a factor of N other than N itself that can be greater than N/2 so we cannot find a factor of N greater than N/2 and less than or equal to N minus one so we do not need to run the loop all the way till N minus one and only check till n /2 should be sufficient this sounds good but can we do something better here let us see if a divides n then there must exist another number b that should be equal to n/a and b should also divide n so we should have a relationship like a X b = N a and b are called cofactors so all the factors of n always exist is pairs and it'll be for the theory I use an example. let's pick up a number thirty six and try to see that what all pair of factors are attached first factor of thirty six is one if you say that a is equal to one then b must be equal to thirty six by one which is thirty six next pair of cofactors would be 2 and thirty six by two 12 sorry it should be 18 3 and 12, 4 and 9 six and thirty six by six is six this is a special case where a is equal to b next factor is nine and the corresponding cofactor is 4 twelve and 3 eighteen and two and finally thirty six and one if you carefully see we can see a pattern here that the number pairs are repeated only the order is different but the numbers are the same so we have 9,4 and 4,9 twelve,three three,twelve eighteen,two two,eighteen. thirty six,one one,thirty six so we are getting the same pairs again for and b there can be a case where a is equal to b and that would happen only if n is a perfect square and in this case the equation will translate to a square equal to n or a is equal to square root of n in ourexample twenty six is a perfect square. So we are able to get such a pair of cofactors where a is equal to b what if a is not equal to b so if a for example is less than b then see carefully a should always be less than square root of n and b should be greater than square root of n similarly if b is less than a then b should be less than squared root of n and a should be greater than square root of n so if a and b are not equal one of them has to be less than square root of n and another one has to be greater than square root of n let's try to plot alll these cofactors on a numberone line and they should be further clear to you. so i qm drawing a number line here and it is not so accurate we can only try to approximate the position of the numbers on this line let's pick up the first pair of factors one should be somewhere here and that is here two should be some where here and eighteen some where mid way between zero and thirty six we should be here and twelve some where here four should be here and nine should be some where here so we can see that one of the numbers in the pair is less than square root of n and another is greater than square root of n and of course we should also plot six and six where a and b are both equal to square root of n this four cases are just repetition of our previous first four pairs and we have already plotted them we have shown it for n equals to 36 but this property is true for all values of n so now we can say that hey if i do not get a factor of n all the way of square root of n then I can clearly say that i will not be able to get a factor after square root of n as well so all i need to do is check only till square root of n so in my actual program I do not need to run the loop till n by 2 we can run the loop till square root of n and that should be enough running loop till square root of n is lot more computationally efficient and you could pick up some values of n and then try to see that square root of n is lot lesser than n by 2 for higher values of n so this is the pseudo code we leave the rest of the implementation to you take care of the special cases where n can less than and equal to one the next lesson we will discus another algorithm for primality testing which is a very famous algorithm called Sieve of Eratosthenes so thanks for watching
