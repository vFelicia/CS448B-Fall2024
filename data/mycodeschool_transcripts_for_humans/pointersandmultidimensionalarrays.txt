With timestamps:

00:00 - In our previous lesson, we saw how we can
work with two dimensional arrays using
00:04 - pointers.
00:05 - Now in this lesson, we will see how we
can work with
00:08 - arrays of further higher dimensions
like three dimensional arrays
00:12 - using pointers. We will also see how we
can pass multidimensional arrays
00:17 - as arguments to functions because that's
00:20 - one scenario where pointers once again
will come into picture.
00:24 - I will start with a quick recap of what
we have discussed in our previous lesson.
00:28 - Whenever we create a multi-dimensional
array and let's pick up the example of
00:32 - two-dimensional array that he had
created in our previous lesson.
00:35 - We must think of the multi-dimensional
array as
00:38 - array of arrays. Array basically
00:41 - is a collection of similar things of
similar objects,
00:45 - so a multi-dimensional array is
basically
00:48 - a collection of arrays. This array B
00:52 - here is a collection of one-dimensional
arrays of 3 elements each.
00:57 - We have 2 1-dimensional arrays of
3 elements
01:00 - each. What I have tried to show in this
figure is how
01:04 - array B will be organized in memory. I
have assumed
01:08 - that the starting address of the array is
400. Each cell storing an integer
01:13 - here is a block of four bytes. As we know
each byte in computers memory has an
01:18 - address.
01:18 - I'm not drawing all the bytes, partition
for all the bytes i'm drawing
01:22 - blocks of 4 bytes each and that's why I
am writing only the starting address of
01:27 - each block.
01:28 - You can imagine a block of 4 bytes
something like this.
01:32 - The starting address is 400. Let's say
each partition here
01:35 - is 1 byte so the next byte has
address
01:40 - 401 and the next 1 has address 403
and the next one has a
01:44 - address of 403.
01:45 - Overall this first block of 12 bytes
01:49 - that contains these
three integers 2 , 3 and 6 that showing
01:54 - in yellow here
01:55 - is my first one dimensional array that I
can call B[0]
01:59 - and this next block of 12 bytes
02:02 - is my second one dimensional array of
three integers that I can call
02:05 - B[1]. So we have two one-dimensional arrays
in our collection.
02:10 - We have two collections of three
integers each
02:13 - in our collection and everything is
organized in one contiguous block of
02:18 - memory.
02:19 - Now let's look at this, B[0] is
from
02:22 - byte address 400 till 411.
02:26 - We have three integers and we have four
bytes for each integer.
02:29 - The first integer that we can access as element
at zeroth index of
02:35 - B[0] is taking four bytes starting
address 400.
02:39 - The next integer that can be accessed as
02:42 - B[0][1], oneth element of B[0]
02:46 - will take next four bytes starting 404
02:49 - and the next one will be B[0][2]
02:52 - element at index 2 of B[0]
02:55 - and similarly we will have 4 bytes for
02:58 - zeroth element of B[1], 4 bytes for
03:02 - oneth element and 4 bytes for
element at index 2 of B[1].
03:06 - As we had seen in our previous lesson, when
we just used to
03:11 - the array name then it returns as a pointer
to the first
03:14 - element of the array. Here B is
03:18 - a two-dimensional array. It is an array
of one-dimensional arrays of size 3.
03:24 - So B will basically return us a
pointer to
03:27 - one-dimensional array of three elements,
pointer to one dimensional array of
03:31 - three integers.
03:33 - In this statement, i have declared a
variable which is pointer to 1
03:37 - dimensional
03:38 - array of 3 integer and the name of
the variable is P.
03:41 - A statement like this is all right. A
statement like this will not be alright
03:46 - because B
03:47 - will not return a pointer to integer.
B will return a pointer to
03:51 - one-dimensional
03:51 - array of three integers. Now I'm will write 3 print
statements that I had also written in
03:57 - our previous lesson.
03:58 - I'm not writing the complete syntax for
printf. Okay so once again you need to
04:02 - tell me what will be the
04:04 - output if we would print these three
expressions.
04:07 - We have B, *B and B[0].
04:10 - Well for all these three, output will be
four hundred.
04:14 - Here when we say B, just using the 
array name B
04:19 - will return as a pointer to the first
one-dimensional
04:23 - array in B. The type of a pointer variable is
relevant only
04:27 - when we are trying to dereference or
perform pointer arithmetic.
04:31 - But if would just try to print the
address
04:34 - stored in the pointer variable it will
be the starting address,
04:38 - address of the first byte of a block of
memory.
04:42 - So if we have a pointer to this
one-dimensional array that is storting
04:45 - 2, 3 and 6
04:46 - then its address is 400. Now when we did
an *B
04:51 - which is same as B[0], we 
dereferenced and now we have got the
04:55 - complete one-dimensional at array B[0].
04:59 - Now if I use B[0] because B[0] is a
one-dimensional array,
05:03 - we will get to pointer to the first
integer in B[0].
05:07 - So we will get a pointer to
B[0][0].
05:10 - This block of 4 bytes starting
address 400.
05:14 - Once again if we would just print
the address, then the
05:18 - starting address of this block is 400
05:21 - that's why the output is 400. Even if I
would print
05:24 - &B[0][0] output will be
05:27 - 400. B and *B are both returning
us pointers. The difference is that
05:33 - B is returning pointer to a
one-dimensional array of three integers,
05:37 - while *B is returning pointer to
05:41 - an integer. When we are just printing
the address,
05:44 - both these objects the complete
one-dimensional array B[0]
05:48 - and the first element in B[0] have the
same starting address so the same
05:52 - starting address will be printed.
05:54 - The type of pointer play role when
you try to dereference or when you try
05:57 - to perform
05:58 - pointer arithmetic. We had also seen at
previous lesson that
06:03 - B[i][j] can be return as
06:06 - *(B[i]+j). If B[i] for some value
of
06:11 - I is one dimensional array then B[i]
will give us an integer pointer, will
06:16 - return us an integer pointer to the
first integer in B[i]
06:20 - then adding j is basically performing
pointer arithmetic
06:24 - and getting a pointer to integer at
index
06:27 - j in one dimension B[i] and then
06:31 - finally this dereferencing is
getting the value of that integer.
06:35 - Once again B[i] can be written as
06:38 - *(B+i).
06:41 - B is pointer one-dimensional array of
3 integers. So (B+i) will also
06:46 - return us
06:47 - pointer to 1 dimensional array of
3 integers and dereferencing this
06:50 - particular dereferencing
06:52 - will give us the 1 dimensional array
and the name of one-dimensional array
06:57 - returns us
06:58 - pointer to the first element in the array.
So this once again will be
07:01 - pointer to integer. By now if you clearly
understand how all the pointer arithmetic
07:07 - and dereferencing is happening in
these expressions
07:11 - then it's not very difficult to understand
how things will be
07:14 - for say, three-dimensional array.
07:18 - Now let's say we have created a three
dimensional
07:21 - named C. We have an array of
3 x 2 x 2.
07:26 - A three dimensional array is basically
an array or collection of two
07:31 - dimensional arrays.
07:32 - So if I have to show C in memory.
I will show it something like this.
07:37 - I have assumed that the starting address
of C is byte address
07:41 - 800. The first 16 bytes starting address
07:45 - 800, is my first two-dimensional
array.
07:49 - I am assuming that each integer will
take four bytes
07:52 - so all the cells in yellow are part
of the
07:55 - two-dimensional array. The next block of 16
bytes
07:59 - starting address 816 is C[1]
08:03 - and the next block of 16 bytes starting
832 is
08:07 - C[2]. We can further break down the
two-dimensional arrays
08:11 - into one-dimensional arrays. The first
two integers in C[0]
08:16 - are part of the first one dimensional
array C[0][0],
08:20 - and 7 and 9 a part of C[0][1].
08:23 - The first integer in
C[0][0] can be accessed
08:27 - as C[0][0][0]
08:30 - and we can go on like this. Okay once
again
08:34 - we will play the same game. I will print
statements
08:38 - and you need to guess the output. This time
08:42 - just using the array name C will give us
08:45 - a pointer to two-dimensional
08:48 - array of intergers of size 2 x 2.
08:51 - So we can write a statement like this.
I have declared
08:55 - a pointer to two-dimensional array of
integers
08:58 - of size 2 x 2 here. The name of
the pointer is P.
09:02 - If I would just print P or C here
09:05 - and I'm not reading the complete printf
statement, once again
09:09 - my output will be 800. Now if
09:12 - I will perform are dereferencing and
try to
09:15 - print *C then this will be same
09:18 - as C[0] and C[0] is a two dimensional array.
09:23 - So we will get a pointer to the first
element in C[0].
09:26 - All these expressions are returning us
09:30 - pointer to move one dimensional array of
integers
09:34 - of size 2 and the address printed
09:38 - will be 800. Remember C is of type
09:42 - pointer to 2d array of 2 x 2 and
09:45 - dereferencing once is giving us
pointer to  one-dimensional array
09:50 - of two integers. C is returning us
pointer to two dimensional array of
09:55 - integers.
09:56 - C itself is an array. There is difference
between the two types.
10:01 - Okay for C, C[i][j][k]
10:05 - where i, j, k are some indices
can be written as
10:09 - *(C[i][j]+k)
10:12 - and now once again, we can write
10:16 - C[i][j] as *(C[i]+j),
10:20 - and the overall expression will look
something like thi.
10:23 - and we can go ahead and write C[i]
10:26 - as *(C+i).
10:30 - If you are able to understand how I had
to drive these expressions, if you are
10:34 - able to understand all the
10:35 - pointer arithmetic and dereferencing
in these expressions
10:40 - and then you are good working with
dimensional arrays using pointers.
10:44 - I want a quick answer for this one. What
will be
10:48 - the output for this print statement.
10:51 - Well C[0][1] means we're going to this
10:55 - one-dimensional arrays that has these 2
elements 7 and 9
10:59 - and when we are using array name C[0][1]
we are getting a pointer
11:04 - to first integer in this
one-dimensional array.
11:08 - Pointer to this integer 7, adding
1 that we are doing
11:12 - pointer arithmetic to an integer
pointer so they will go to nine
11:16 - and dereferencing will give us
interger 9.
11:21 - In fact this expression is same as
C[0][1][1].
11:25 - Now what will be the output for this
print statement *(C[1]+1).
11:30 - C[1] will return us a pointer to
one-dimensional array.
11:35 - The first one dimensional array in C[1],
11:38 - this block containing integers 3 and 4.
Adding 1 is performing pointer
11:43 - arithmetic and going to the next one
dimensional array.
11:47 - It's going to this one-dimensional array
containing
11:50 - 6 and 1, and now dereferencing is
basically
11:54 - getting the one-dimensional array from
the pointer
11:58 - and if you just used a name of the
one-dimensional array,
12:01 - you get a pointer to the first element
in one-dimensional array.
12:06 - So we will get a pointer this 
integer 6.
12:09 - Output will be 824.
12:12 - This block of 4 bytes storing
address
12:16 - storing integer 3 is 816. Next would be
12:19 - next will be at 20 and next will be a
24.
12:22 - We can try out these expressions in the
real program.
12:26 - I am writing this simple C program. I have
created this
12:30 - three-dimensional array C. The data filled in
12:33 - is same as we were showing in the example.
In the first printf statement, I am
12:38 - writing,
12:38 - I'm trying to print C, *C
12:42 - C[0] and &C[0][0]. All of these
are pointers
12:46 - and if I would just use %d
12:50 - address would be printed. When I'm
running this code, as you can see the
12:54 - output far all these for expressions it
same.
12:58 - Any guesses for what will be the output
for this print if statement.
13:02 - This expression is nothing but 
C[0][0][1].
13:06 - The output for first printf is different
because this is a
13:09 - different run of the program and in
13:12 - each run, the signed address would change
13:16 - but whatever the address is it will be
seen for these for expressions.
13:21 - I would recommend trying out all the
different expressions that
13:24 - were decoding earlier in a real
program like this.
13:28 - Okay the next thing that I want to talk
about is passing multi-dimensional
13:33 - array as function arguments.
13:36 - I'm going to declare a function and
let's name this function
13:41 - Func and
13:44 - I want this function to accept a
three-dimensional array as argument.
13:49 - So what do I do. If I wanted a
one-dimensional array as argument,
13:54 - I could have given something like this.
But
13:57 - as we had discussed in one of our
previous lessons, this syntax
14:01 - is only a syntactical sugar it is
interpreted
14:05 - like this by the compiler. A fresh copy
of
14:08 - array is not created for function call. Only
14:11 - a reference to it in the form of a
pointer
14:15 - is created. So now if in the main
function, I have
14:18 - an array a one dimensional array
like this
14:22 - and let's say the return type of this function
is void.
14:26 - I can make a function call passing B
like this
14:29 - and this will be fine. Now let's say we
declare
14:32 - 2 dimensional array of 2 x 3
14:35 - and now the want this function to receive
to take
14:39 - a two-dimensional array as argument.
14:42 - Now as we discussed, A will
14:45 - return us pointer to integer but B
14:49 - will us a pointer to array of three
integers,
14:53 - one-dimensional array of three integers
for this particular definition of B.
14:59 - So for the function to take this array
15:02 - B as argument. Definition should be
something like this. The arguement should be
15:06 - something like this.
15:08 - Either we can write or we can write
15:11 - something like this. Only the first
dimension can be left empty. The other
15:16 - dimension has to be specified,
15:18 - and now I can pass B. There is something
15:21 - interesting here. If I would declare a
two-dimensional array something like
15:25 - this. Let's say I declare
15:26 - two-dimensional array X of
15:29 - 2 x 4. Now I cannot pass
15:32 - X to the function because X will return
pointer to one-dimensional array of
15:37 - 4 teachers
15:39 - while this function is suppose to
receive one-dimensional array of 3
15:43 - integers.
15:44 - If X is defined something like this
of dimension 5 x 3
15:48 - then passing X is fine.
15:51 - Now if we want to pass this
three-dimensional array,
15:55 - then once again we need to see what
pointer types C will return.
15:59 - So will basically return a pointer
to two-dimensional array of 2 x 2
16:05 - so we can either
16:07 - use a syntax like this or something
like this,
16:10 - and then we can pass C.
16:14 - So this is how things will be for any
multi-dimensional
16:17 - array except the first dimension,
16:20 - all other dimensions will be enforced.
16:23 - One common mistake that people do is, for
a two-dimensional array
16:27 - they try to use pointer to pointer
something like this
16:30 - and for a three dimensional array they try to
use something like this
16:35 - which just wont work. So this is
pretty much what we wanted to talk about
16:39 - pointers and multi-dimensional arrays.
Thanks for watching.

Cleaned transcript:

In our previous lesson, we saw how we can work with two dimensional arrays using pointers. Now in this lesson, we will see how we can work with arrays of further higher dimensions like three dimensional arrays using pointers. We will also see how we can pass multidimensional arrays as arguments to functions because that's one scenario where pointers once again will come into picture. I will start with a quick recap of what we have discussed in our previous lesson. Whenever we create a multidimensional array and let's pick up the example of twodimensional array that he had created in our previous lesson. We must think of the multidimensional array as array of arrays. Array basically is a collection of similar things of similar objects, so a multidimensional array is basically a collection of arrays. This array B here is a collection of onedimensional arrays of 3 elements each. We have 2 1dimensional arrays of 3 elements each. What I have tried to show in this figure is how array B will be organized in memory. I have assumed that the starting address of the array is 400. Each cell storing an integer here is a block of four bytes. As we know each byte in computers memory has an address. I'm not drawing all the bytes, partition for all the bytes i'm drawing blocks of 4 bytes each and that's why I am writing only the starting address of each block. You can imagine a block of 4 bytes something like this. The starting address is 400. Let's say each partition here is 1 byte so the next byte has address 401 and the next 1 has address 403 and the next one has a address of 403. Overall this first block of 12 bytes that contains these three integers 2 , 3 and 6 that showing in yellow here is my first one dimensional array that I can call B[0] and this next block of 12 bytes is my second one dimensional array of three integers that I can call B[1]. So we have two onedimensional arrays in our collection. We have two collections of three integers each in our collection and everything is organized in one contiguous block of memory. Now let's look at this, B[0] is from byte address 400 till 411. We have three integers and we have four bytes for each integer. The first integer that we can access as element at zeroth index of B[0] is taking four bytes starting address 400. The next integer that can be accessed as B[0][1], oneth element of B[0] will take next four bytes starting 404 and the next one will be B[0][2] element at index 2 of B[0] and similarly we will have 4 bytes for zeroth element of B[1], 4 bytes for oneth element and 4 bytes for element at index 2 of B[1]. As we had seen in our previous lesson, when we just used to the array name then it returns as a pointer to the first element of the array. Here B is a twodimensional array. It is an array of onedimensional arrays of size 3. So B will basically return us a pointer to onedimensional array of three elements, pointer to one dimensional array of three integers. In this statement, i have declared a variable which is pointer to 1 dimensional array of 3 integer and the name of the variable is P. A statement like this is all right. A statement like this will not be alright because B will not return a pointer to integer. B will return a pointer to onedimensional array of three integers. Now I'm will write 3 print statements that I had also written in our previous lesson. I'm not writing the complete syntax for printf. Okay so once again you need to tell me what will be the output if we would print these three expressions. We have B, *B and B[0]. Well for all these three, output will be four hundred. Here when we say B, just using the array name B will return as a pointer to the first onedimensional array in B. The type of a pointer variable is relevant only when we are trying to dereference or perform pointer arithmetic. But if would just try to print the address stored in the pointer variable it will be the starting address, address of the first byte of a block of memory. So if we have a pointer to this onedimensional array that is storting 2, 3 and 6 then its address is 400. Now when we did an *B which is same as B[0], we dereferenced and now we have got the complete onedimensional at array B[0]. Now if I use B[0] because B[0] is a onedimensional array, we will get to pointer to the first integer in B[0]. So we will get a pointer to B[0][0]. This block of 4 bytes starting address 400. Once again if we would just print the address, then the starting address of this block is 400 that's why the output is 400. Even if I would print &B[0][0] output will be 400. B and *B are both returning us pointers. The difference is that B is returning pointer to a onedimensional array of three integers, while *B is returning pointer to an integer. When we are just printing the address, both these objects the complete onedimensional array B[0] and the first element in B[0] have the same starting address so the same starting address will be printed. The type of pointer play role when you try to dereference or when you try to perform pointer arithmetic. We had also seen at previous lesson that B[i][j] can be return as *(B[i]+j). If B[i] for some value of I is one dimensional array then B[i] will give us an integer pointer, will return us an integer pointer to the first integer in B[i] then adding j is basically performing pointer arithmetic and getting a pointer to integer at index j in one dimension B[i] and then finally this dereferencing is getting the value of that integer. Once again B[i] can be written as *(B+i). B is pointer onedimensional array of 3 integers. So (B+i) will also return us pointer to 1 dimensional array of 3 integers and dereferencing this particular dereferencing will give us the 1 dimensional array and the name of onedimensional array returns us pointer to the first element in the array. So this once again will be pointer to integer. By now if you clearly understand how all the pointer arithmetic and dereferencing is happening in these expressions then it's not very difficult to understand how things will be for say, threedimensional array. Now let's say we have created a three dimensional named C. We have an array of 3 x 2 x 2. A three dimensional array is basically an array or collection of two dimensional arrays. So if I have to show C in memory. I will show it something like this. I have assumed that the starting address of C is byte address 800. The first 16 bytes starting address 800, is my first twodimensional array. I am assuming that each integer will take four bytes so all the cells in yellow are part of the twodimensional array. The next block of 16 bytes starting address 816 is C[1] and the next block of 16 bytes starting 832 is C[2]. We can further break down the twodimensional arrays into onedimensional arrays. The first two integers in C[0] are part of the first one dimensional array C[0][0], and 7 and 9 a part of C[0][1]. The first integer in C[0][0] can be accessed as C[0][0][0] and we can go on like this. Okay once again we will play the same game. I will print statements and you need to guess the output. This time just using the array name C will give us a pointer to twodimensional array of intergers of size 2 x 2. So we can write a statement like this. I have declared a pointer to twodimensional array of integers of size 2 x 2 here. The name of the pointer is P. If I would just print P or C here and I'm not reading the complete printf statement, once again my output will be 800. Now if I will perform are dereferencing and try to print *C then this will be same as C[0] and C[0] is a two dimensional array. So we will get a pointer to the first element in C[0]. All these expressions are returning us pointer to move one dimensional array of integers of size 2 and the address printed will be 800. Remember C is of type pointer to 2d array of 2 x 2 and dereferencing once is giving us pointer to onedimensional array of two integers. C is returning us pointer to two dimensional array of integers. C itself is an array. There is difference between the two types. Okay for C, C[i][j][k] where i, j, k are some indices can be written as *(C[i][j]+k) and now once again, we can write C[i][j] as *(C[i]+j), and the overall expression will look something like thi. and we can go ahead and write C[i] as *(C+i). If you are able to understand how I had to drive these expressions, if you are able to understand all the pointer arithmetic and dereferencing in these expressions and then you are good working with dimensional arrays using pointers. I want a quick answer for this one. What will be the output for this print statement. Well C[0][1] means we're going to this onedimensional arrays that has these 2 elements 7 and 9 and when we are using array name C[0][1] we are getting a pointer to first integer in this onedimensional array. Pointer to this integer 7, adding 1 that we are doing pointer arithmetic to an integer pointer so they will go to nine and dereferencing will give us interger 9. In fact this expression is same as C[0][1][1]. Now what will be the output for this print statement *(C[1]+1). C[1] will return us a pointer to onedimensional array. The first one dimensional array in C[1], this block containing integers 3 and 4. Adding 1 is performing pointer arithmetic and going to the next one dimensional array. It's going to this onedimensional array containing 6 and 1, and now dereferencing is basically getting the onedimensional array from the pointer and if you just used a name of the onedimensional array, you get a pointer to the first element in onedimensional array. So we will get a pointer this integer 6. Output will be 824. This block of 4 bytes storing address storing integer 3 is 816. Next would be next will be at 20 and next will be a 24. We can try out these expressions in the real program. I am writing this simple C program. I have created this threedimensional array C. The data filled in is same as we were showing in the example. In the first printf statement, I am writing, I'm trying to print C, *C C[0] and &C[0][0]. All of these are pointers and if I would just use %d address would be printed. When I'm running this code, as you can see the output far all these for expressions it same. Any guesses for what will be the output for this print if statement. This expression is nothing but C[0][0][1]. The output for first printf is different because this is a different run of the program and in each run, the signed address would change but whatever the address is it will be seen for these for expressions. I would recommend trying out all the different expressions that were decoding earlier in a real program like this. Okay the next thing that I want to talk about is passing multidimensional array as function arguments. I'm going to declare a function and let's name this function Func and I want this function to accept a threedimensional array as argument. So what do I do. If I wanted a onedimensional array as argument, I could have given something like this. But as we had discussed in one of our previous lessons, this syntax is only a syntactical sugar it is interpreted like this by the compiler. A fresh copy of array is not created for function call. Only a reference to it in the form of a pointer is created. So now if in the main function, I have an array a one dimensional array like this and let's say the return type of this function is void. I can make a function call passing B like this and this will be fine. Now let's say we declare 2 dimensional array of 2 x 3 and now the want this function to receive to take a twodimensional array as argument. Now as we discussed, A will return us pointer to integer but B will us a pointer to array of three integers, onedimensional array of three integers for this particular definition of B. So for the function to take this array B as argument. Definition should be something like this. The arguement should be something like this. Either we can write or we can write something like this. Only the first dimension can be left empty. The other dimension has to be specified, and now I can pass B. There is something interesting here. If I would declare a twodimensional array something like this. Let's say I declare twodimensional array X of 2 x 4. Now I cannot pass X to the function because X will return pointer to onedimensional array of 4 teachers while this function is suppose to receive onedimensional array of 3 integers. If X is defined something like this of dimension 5 x 3 then passing X is fine. Now if we want to pass this threedimensional array, then once again we need to see what pointer types C will return. So will basically return a pointer to twodimensional array of 2 x 2 so we can either use a syntax like this or something like this, and then we can pass C. So this is how things will be for any multidimensional array except the first dimension, all other dimensions will be enforced. One common mistake that people do is, for a twodimensional array they try to use pointer to pointer something like this and for a three dimensional array they try to use something like this which just wont work. So this is pretty much what we wanted to talk about pointers and multidimensional arrays. Thanks for watching.
