With timestamps:

00:00 - welcome to another video in the series
00:01 - mats for programmers so far in this
00:04 - series we've been looking primarily at
00:06 - number theory algorithms in this video
00:08 - though we'll be looking at a basic
00:10 - geometry algorithm how to find the area
00:13 - of a polygon any program that deals with
00:16 - computer graphics is bound to deal with
00:18 - polygons a very good example is an
00:20 - online map buildings and parks and other
00:23 - man-made structures in an online map are
00:25 - typically represented by polygons here I
00:28 - am highlighting just four of the
00:30 - polygons representing buildings another
00:33 - good example is three-dimensional
00:34 - computer games so in a popular game like
00:37 - Counter Strike the various surfaces on
00:39 - display are usually approximated by
00:42 - polygons informally a polygon is defined
00:45 - as a closed two-dimensional shape whose
00:48 - boundaries are all made of line segments
00:50 - so the simplest kind of polygon is a
00:53 - triangle another slightly more
00:56 - complicated polygon is something like
00:59 - this which has a large number of sides
01:01 - and with varying angles however both of
01:04 - these are classified as simple polygons
01:07 - because their edges do not intersect
01:09 - each other an example of a non simple
01:12 - polygon would be something like this
01:13 - here you can see that the edges of the
01:16 - polygon intersect each other at many
01:17 - points in this video we'll only be
01:20 - dealing with simple polygons and how to
01:22 - find the area of simple polygons for any
01:25 - geometry algorithm the choice of space
01:28 - is very important since polygons are
01:30 - two-dimensional shapes the natural
01:33 - selection is to use a two-dimensional
01:35 - space so we can use the simple Cartesian
01:38 - plane so this plane has an x axis and y
01:42 - axis on this plane let's say we had a
01:45 - point with x value 3 and Y value 1
01:49 - labeled by a what is the best way to
01:52 - represent such a point in our program a
01:54 - good design decision would be to use a
01:57 - separate data structure or a class to
01:59 - represent a point so let's see how we
02:02 - can do that in C or C++ we can simply
02:05 - declare a structure point which has two
02:08 - member variables x and y to represent
02:11 - the x coordinate and the
02:12 - coordinate of the point notice that we
02:14 - use doubles to store both the X and y
02:17 - coordinate because typically the value
02:19 - of a coordinate can be any real number
02:21 - to represent a point such as a in our
02:24 - code we would simply declare a variable
02:27 - let's say we call it a of the type point
02:31 - and then we can assign the x coordinate
02:33 - to 3 and the y coordinate to 1 ok now
02:37 - that we know how to store a point let's
02:40 - draw a very simple triangle so the first
02:44 - vertex of the triangle we can keep it as
02:45 - a which is at 3 comma 1
02:48 - we'll then put up another vertex we'll
02:51 - call it B at 2 comma 3 the third vertex
02:55 - though will be somewhat special we
02:58 - choose it to be
02:58 - oh the origin of the coordinate system
03:01 - so both the X and y values of this point
03:05 - O are 0 so what is the area of this
03:10 - triangle OAB
03:12 - because of the fact that one of the
03:15 - vertices lies on the origin there is a
03:18 - very simple formula that involves the
03:20 - coordinate values of the other two
03:22 - vertices so in this case since oh is the
03:24 - origin the formula involves the vertices
03:26 - a and B and this formula is as follows
03:29 - it is the x coordinate of a multiplied
03:32 - by the y coordinate of B minus the y
03:36 - coordinate of a multiplied by the x
03:38 - coordinate of P the whole divided by 2
03:41 - the expression inside these pair of
03:44 - parentheses has a special meaning in
03:47 - vector algebra this expression stands
03:49 - for the cross product of the vectors a
03:52 - and B with this in mind now let's look
03:55 - at the code to calculate the area of a
03:58 - triangle one of those points is on the
04:01 - origin and the other two points will be
04:04 - taken in as argument so let us first
04:07 - define the cross product itself as a
04:09 - function so given two points a and B
04:12 - this function simply computes X into B Y
04:16 - minus a Y into B X so it computes the
04:19 - cross product of these vectors a and B
04:23 - we can now write the function to compute
04:25 - the
04:26 - area so given the points a and B this
04:30 - computes the area of the triangle OAB we
04:34 - simply take the cross product and divide
04:36 - it by two if we applied the formula for
04:39 - these values of a and B so it is three
04:41 - come over and P is 2 comma 3 we get 3
04:45 - into 3 minus 1 and 2 2 the whole divided
04:48 - by 2 which is equal to 3.5 now what if
04:53 - we were to exchange a and B so a became
04:57 - the point 2 comma 3 and B became the
05:00 - point 3 comma 1
05:02 - of course the triangle itself does not
05:04 - change but if you apply our formula if
05:08 - you apply the code that we have written
05:09 - here you will get the answer as minus
05:12 - 3.5 so we get the area having the same
05:16 - magnitude of 3.5 but the sign is
05:19 - opposite this is because the cross
05:22 - product has a very interesting property
05:23 - when the triangle OAB is in clockwise
05:27 - order then the value of the cross
05:30 - product is negative on the other hand
05:33 - when the triangle OAB is in
05:36 - counterclockwise order then the value of
05:39 - the cross product is positive this
05:42 - property of the cross product function
05:44 - where negative value is returned for a
05:47 - clockwise triangle and a positive value
05:50 - is returned for a counterclockwise
05:51 - triangle will be very useful to us later
05:53 - on however for now we need to fix our
05:56 - area method so that this return value is
05:59 - always positive because a negative area
06:02 - does not make sense through that we'll
06:05 - simply take the absolute value of cross
06:08 - product divided by 2 here I'm using the
06:10 - ABS function from the C math library in
06:13 - C++ in order to use this function we'll
06:15 - need to put a include statement these
06:19 - two statements help us include the C
06:21 - math library and then allow us to use
06:24 - all functions from the standard
06:26 - namespace the standard namespace
06:27 - contains the ABS function that we're
06:29 - using in our area method okay and now we
06:33 - know how to find the area of one kind of
06:35 - polygon basically we know how to find
06:38 - the area of a triangle
06:39 - which has one of its vertices on the
06:41 - origin now let's try to extend our area
06:44 - algorithm a little bit and see how to
06:46 - find the area of a triangle where none
06:49 - of the vertices are on the origin so
06:52 - let's say we had a triangle ABC like
06:54 - this with the origin inside of it so one
06:58 - way in which we can solve this problem
07:00 - is by subtracting the value of the
07:03 - coordinates of a from a B and C
07:06 - essentially what we are doing is
07:09 - translating this triangle so that a
07:11 - moves to the origin and B and C also
07:14 - translate appropriately so we then get a
07:17 - triangle like this where a has been
07:20 - translated to the origin and we can now
07:24 - use our previous formula on the triangle
07:26 - OBC to calculate this area however there
07:30 - is a more elegant way of computing the
07:32 - same area instead of translating the
07:35 - triangle so that a is at the origin we
07:38 - can actually construct three smaller
07:39 - triangles inside of ABC by drawing three
07:43 - lines from the origin oh one two a one
07:46 - two B and one two see we get three
07:49 - smaller triangles and the sum of the
07:52 - areas of these three triangles is equal
07:55 - to the area of the triangle ABC since
07:58 - each of these three triangles has one
08:00 - vertex at the origin we can simply apply
08:02 - our previous formula to calculate the
08:05 - area of a B plus OB c + OC a and this
08:09 - will be our final answer
08:10 - so now let's take a look at the code to
08:13 - calculate the area of a triangle given
08:15 - all three points a B and C so in this
08:19 - modified function we now take three
08:21 - points as arguments a B as well as C and
08:24 - none of them need to be at the origin we
08:28 - calculate the sum of the triangle OAB
08:30 - OBC as well as OC a and then we take the
08:34 - absolute value of sum and divide it by 2
08:37 - okay this algorithm seems to work well
08:40 - for any triangle with points ABC if the
08:44 - origin is inside the triangle but what
08:46 - if the origin is outside the triangle so
08:49 - let's say we have a triangle ABC like
08:51 - this let's see what
08:53 - pens so initially we are computing the
08:56 - cross product of a and P which means we
08:58 - are computing the area of the triangle
09:00 - OAB since OAB is counterclockwise in
09:04 - this case the value will be positive and
09:07 - I will show this area in green in the
09:10 - second step we calculate the value of
09:13 - the cross product of B and C which means
09:17 - for calculating the area of the triangle
09:19 - OBC once again since OBC is
09:23 - counterclockwise this value will also be
09:25 - positive and I will be showing it in
09:27 - green so now the total we have
09:30 - calculated is actually more than the
09:32 - area of the triangle
09:34 - however finally we calculate the cross
09:36 - product of C and a now OC is actually in
09:41 - clockwise order so the value will be
09:44 - negative so I will show this area in red
09:45 - so we're subtracting the area OCA from
09:49 - the area that we have already calculated
09:51 - let me erase the areas where the red and
09:54 - green overlap and we see that the area
09:58 - computed finally the part shown in green
10:01 - is exactly the area we needed so our
10:05 - area function works for any kind of
10:07 - triangle not just those containing the
10:09 - origin our next step will be to figure
10:11 - out how to extend this algorithm so that
10:14 - it works not just for triangles but for
10:17 - polygons containing any number of sides
10:18 - so let's take an example of this
10:21 - six-sided polygon with vertices ABCDE
10:25 - and F which contains the origin and
10:28 - approach to finding the area of this
10:31 - polygon based on the approach we use for
10:34 - the triangle could be let us divide this
10:37 - six-sided polygon into many smaller
10:39 - triangles such that each triangle has at
10:41 - least one vertex at the origin and then
10:44 - we can just take the sum of the areas of
10:46 - all these small triangles in order to
10:48 - get the sum of the polygons so we can
10:52 - take the triangle OAB and then the
10:55 - triangle OBC and then Oct and so on if
11:02 - we look at all six of these triangles
11:04 - the sum of the areas is equal to
11:06 - the sum of the polygons itself and each
11:09 - of these triangles has one vertex at the
11:11 - origin now let's look at the code to
11:14 - compute the area of a polygon with an
11:16 - arbitrary number of sides to start with
11:18 - we'll actually need to update the
11:20 - signature of the method we can no longer
11:23 - take individual points since the polygon
11:25 - can have any number of sides instead
11:28 - we'll take in an array of points which
11:30 - gives us all the vertices of the polygon
11:32 - and we'll also take an additional
11:34 - integer n as input which gives us the
11:37 - number of sides in the polygon so we'll
11:40 - take a variable called sum and
11:42 - initialize it to zero this variable
11:46 - denotes the sum of the areas of the
11:49 - triangles which together make up our
11:51 - polygon from our diagram to the right
11:54 - side it is quite clear that an n-sided
11:56 - polygon will have n triangles inside it
12:00 - so we'll run a loop n times where each
12:04 - iteration of the loop should compute one
12:06 - of the triangles looking at the diagram
12:09 - it is quite clear that each triangle has
12:12 - of course one vertex at the origin and
12:15 - the other two vertices are consecutive
12:18 - vertices in the polygon so we have o AV
12:21 - o bc o C D and so on this is true all
12:28 - the way until o EF but for the last
12:31 - vertex F we actually want to pair it
12:34 - with the first vertex of the polygon so
12:36 - o F pairs with a to give us the triangle
12:40 - ofa so inside our loop we'll add the
12:43 - cross product of vertices of AI with the
12:47 - vertex at I plus 1 we use this operator
12:50 - modulo n to take care of the special
12:53 - case for the last vertex because we want
12:56 - the last vertex to pair with the zero at
12:58 - vertex by taking modulo n when I is n
13:02 - minus 1 I plus 1 will equal 0 outside
13:06 - the loop as before we can simply take
13:09 - the absolute value of sum divided by 2
13:11 - and return it so we now have an
13:15 - algorithm that computes the area of a
13:18 - polygon with any number of SCI
13:20 - as long as it is almost convex and it
13:24 - contains the origin now the question for
13:26 - you is do you think this algorithm will
13:29 - still work if we had a very concave
13:31 - polygon like this sitting outside the
13:34 - origin
13:34 - well actually this algorithm works fine
13:37 - even for concave polygons like these but
13:40 - I'll let you figure out the proof to
13:42 - that one
13:42 - in our next video of this series we will
13:45 - see how we can use the vector cross
13:47 - product to solve another important
13:49 - geometry problem how to find if two line
13:51 - segments intersect in the meanwhile I
13:54 - hope you enjoyed this video thanks for
13:56 - watching

Cleaned transcript:

welcome to another video in the series mats for programmers so far in this series we've been looking primarily at number theory algorithms in this video though we'll be looking at a basic geometry algorithm how to find the area of a polygon any program that deals with computer graphics is bound to deal with polygons a very good example is an online map buildings and parks and other manmade structures in an online map are typically represented by polygons here I am highlighting just four of the polygons representing buildings another good example is threedimensional computer games so in a popular game like Counter Strike the various surfaces on display are usually approximated by polygons informally a polygon is defined as a closed twodimensional shape whose boundaries are all made of line segments so the simplest kind of polygon is a triangle another slightly more complicated polygon is something like this which has a large number of sides and with varying angles however both of these are classified as simple polygons because their edges do not intersect each other an example of a non simple polygon would be something like this here you can see that the edges of the polygon intersect each other at many points in this video we'll only be dealing with simple polygons and how to find the area of simple polygons for any geometry algorithm the choice of space is very important since polygons are twodimensional shapes the natural selection is to use a twodimensional space so we can use the simple Cartesian plane so this plane has an x axis and y axis on this plane let's say we had a point with x value 3 and Y value 1 labeled by a what is the best way to represent such a point in our program a good design decision would be to use a separate data structure or a class to represent a point so let's see how we can do that in C or C++ we can simply declare a structure point which has two member variables x and y to represent the x coordinate and the coordinate of the point notice that we use doubles to store both the X and y coordinate because typically the value of a coordinate can be any real number to represent a point such as a in our code we would simply declare a variable let's say we call it a of the type point and then we can assign the x coordinate to 3 and the y coordinate to 1 ok now that we know how to store a point let's draw a very simple triangle so the first vertex of the triangle we can keep it as a which is at 3 comma 1 we'll then put up another vertex we'll call it B at 2 comma 3 the third vertex though will be somewhat special we choose it to be oh the origin of the coordinate system so both the X and y values of this point O are 0 so what is the area of this triangle OAB because of the fact that one of the vertices lies on the origin there is a very simple formula that involves the coordinate values of the other two vertices so in this case since oh is the origin the formula involves the vertices a and B and this formula is as follows it is the x coordinate of a multiplied by the y coordinate of B minus the y coordinate of a multiplied by the x coordinate of P the whole divided by 2 the expression inside these pair of parentheses has a special meaning in vector algebra this expression stands for the cross product of the vectors a and B with this in mind now let's look at the code to calculate the area of a triangle one of those points is on the origin and the other two points will be taken in as argument so let us first define the cross product itself as a function so given two points a and B this function simply computes X into B Y minus a Y into B X so it computes the cross product of these vectors a and B we can now write the function to compute the area so given the points a and B this computes the area of the triangle OAB we simply take the cross product and divide it by two if we applied the formula for these values of a and B so it is three come over and P is 2 comma 3 we get 3 into 3 minus 1 and 2 2 the whole divided by 2 which is equal to 3.5 now what if we were to exchange a and B so a became the point 2 comma 3 and B became the point 3 comma 1 of course the triangle itself does not change but if you apply our formula if you apply the code that we have written here you will get the answer as minus 3.5 so we get the area having the same magnitude of 3.5 but the sign is opposite this is because the cross product has a very interesting property when the triangle OAB is in clockwise order then the value of the cross product is negative on the other hand when the triangle OAB is in counterclockwise order then the value of the cross product is positive this property of the cross product function where negative value is returned for a clockwise triangle and a positive value is returned for a counterclockwise triangle will be very useful to us later on however for now we need to fix our area method so that this return value is always positive because a negative area does not make sense through that we'll simply take the absolute value of cross product divided by 2 here I'm using the ABS function from the C math library in C++ in order to use this function we'll need to put a include statement these two statements help us include the C math library and then allow us to use all functions from the standard namespace the standard namespace contains the ABS function that we're using in our area method okay and now we know how to find the area of one kind of polygon basically we know how to find the area of a triangle which has one of its vertices on the origin now let's try to extend our area algorithm a little bit and see how to find the area of a triangle where none of the vertices are on the origin so let's say we had a triangle ABC like this with the origin inside of it so one way in which we can solve this problem is by subtracting the value of the coordinates of a from a B and C essentially what we are doing is translating this triangle so that a moves to the origin and B and C also translate appropriately so we then get a triangle like this where a has been translated to the origin and we can now use our previous formula on the triangle OBC to calculate this area however there is a more elegant way of computing the same area instead of translating the triangle so that a is at the origin we can actually construct three smaller triangles inside of ABC by drawing three lines from the origin oh one two a one two B and one two see we get three smaller triangles and the sum of the areas of these three triangles is equal to the area of the triangle ABC since each of these three triangles has one vertex at the origin we can simply apply our previous formula to calculate the area of a B plus OB c + OC a and this will be our final answer so now let's take a look at the code to calculate the area of a triangle given all three points a B and C so in this modified function we now take three points as arguments a B as well as C and none of them need to be at the origin we calculate the sum of the triangle OAB OBC as well as OC a and then we take the absolute value of sum and divide it by 2 okay this algorithm seems to work well for any triangle with points ABC if the origin is inside the triangle but what if the origin is outside the triangle so let's say we have a triangle ABC like this let's see what pens so initially we are computing the cross product of a and P which means we are computing the area of the triangle OAB since OAB is counterclockwise in this case the value will be positive and I will show this area in green in the second step we calculate the value of the cross product of B and C which means for calculating the area of the triangle OBC once again since OBC is counterclockwise this value will also be positive and I will be showing it in green so now the total we have calculated is actually more than the area of the triangle however finally we calculate the cross product of C and a now OC is actually in clockwise order so the value will be negative so I will show this area in red so we're subtracting the area OCA from the area that we have already calculated let me erase the areas where the red and green overlap and we see that the area computed finally the part shown in green is exactly the area we needed so our area function works for any kind of triangle not just those containing the origin our next step will be to figure out how to extend this algorithm so that it works not just for triangles but for polygons containing any number of sides so let's take an example of this sixsided polygon with vertices ABCDE and F which contains the origin and approach to finding the area of this polygon based on the approach we use for the triangle could be let us divide this sixsided polygon into many smaller triangles such that each triangle has at least one vertex at the origin and then we can just take the sum of the areas of all these small triangles in order to get the sum of the polygons so we can take the triangle OAB and then the triangle OBC and then Oct and so on if we look at all six of these triangles the sum of the areas is equal to the sum of the polygons itself and each of these triangles has one vertex at the origin now let's look at the code to compute the area of a polygon with an arbitrary number of sides to start with we'll actually need to update the signature of the method we can no longer take individual points since the polygon can have any number of sides instead we'll take in an array of points which gives us all the vertices of the polygon and we'll also take an additional integer n as input which gives us the number of sides in the polygon so we'll take a variable called sum and initialize it to zero this variable denotes the sum of the areas of the triangles which together make up our polygon from our diagram to the right side it is quite clear that an nsided polygon will have n triangles inside it so we'll run a loop n times where each iteration of the loop should compute one of the triangles looking at the diagram it is quite clear that each triangle has of course one vertex at the origin and the other two vertices are consecutive vertices in the polygon so we have o AV o bc o C D and so on this is true all the way until o EF but for the last vertex F we actually want to pair it with the first vertex of the polygon so o F pairs with a to give us the triangle ofa so inside our loop we'll add the cross product of vertices of AI with the vertex at I plus 1 we use this operator modulo n to take care of the special case for the last vertex because we want the last vertex to pair with the zero at vertex by taking modulo n when I is n minus 1 I plus 1 will equal 0 outside the loop as before we can simply take the absolute value of sum divided by 2 and return it so we now have an algorithm that computes the area of a polygon with any number of SCI as long as it is almost convex and it contains the origin now the question for you is do you think this algorithm will still work if we had a very concave polygon like this sitting outside the origin well actually this algorithm works fine even for concave polygons like these but I'll let you figure out the proof to that one in our next video of this series we will see how we can use the vector cross product to solve another important geometry problem how to find if two line segments intersect in the meanwhile I hope you enjoyed this video thanks for watching
