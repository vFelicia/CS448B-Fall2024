With timestamps:

00:00 - In this lesson, we will
00:02 - introduce you to linked list data
structure
00:05 - In our previous lesson, we tried to
implement a dynamic list using arrays and
00:11 - we had some issues there
00:13 - it was not most efficient in terms of
memory usage, in terms of memory
00:17 - consumption
00:18 - When we use arrays, we have some
limitations
00:21 - To be able to understand linked list well,
00:25 - we need to understand these
limitations
00:27 - so i'm going to tell you a simple story
00:30 - to help you understand this
00:32 - let us say this is computer's memory and
each partition here is one byte of memory
00:37 - Now as we know
00:38 - each byte of memory
00:40 - has an address
00:42 - We are showing only a section of the
memory, that's why it is extending towards
00:46 - the bottom and the top
00:47 - let's say that address increases from
bottom to top
00:51 - so if this bike is address 200,
the next byte would be address
00:55 - 201
00:56 - and next byte would be address 202 and so on
00:59 - what I want to do is
01:01 - i want to draw this memory from
01:03 - left to right horizontally instead
of drawing it from bottom to top
01:07 - like this
01:08 - uh... this looks better
01:10 - let's say this byte here is address
 200 and as we go
01:14 - towards the right
01:15 - the address increases, so this is like 201
01:18 - and we go on like 202, 203 and so on
01:22 - it doesn't really matter whether we show memory from bottom to top or
01:26 - left to right
01:27 - these are just logical ways to look at
the memory
01:29 - so coming back to our story
01:32 - Memory is a crucial resource
01:34 - and all the applications keep asking for it.
01:37 - So, Mr. computer has given this job
of managing the memory
01:41 - to one of his components, to one of his
guys
01:43 - who he calls the memory manager
01:46 - now this guy keeps track of
01:48 - what part of the memory is free and what
part of the memory is allocated
01:52 - and anyone who needs memory to store
something needs to talk to this guy
01:58 - Albert is our programmer
02:00 - and he is building an application
02:02 - he needs to store some data
02:04 - in the memory, so he needs to talk to the
memory manager
02:08 - He can talk to the memory manager in
 a high level language like C, let us say
02:11 - he  is using
02:13 - C to talk to the memory manager
02:15 - First he wants to store an integer in the memory
02:18 - so he communicates this to memory
manager by declaring
02:22 - an integer variable
02:24 - something like this
02:26 - the memory manager sees this declaration
and
02:28 - he's says that ok
02:30 - you need
02:31 - to store an integer variable
02:33 - so i need to give you four bytes of memory
02:36 - because integer variable is stored in
four bytes
02:39 - in a typical architecture.
02:41 - and let us say in this architecture, it is
stored in four bytes
02:44 - so the memory manager looks for
02:46 - four bites of free space in the memory
02:50 - and assigns it or allocates it 
02:52 - for valuable x
02:53 - Address of a block of memory is the address 
of the first byte in the memory
02:58 - so let us say this first byte of
03:00 - memory here is
03:02 - at address 217, so
03:05 - variable x is at address
03:07 - 217
03:08 - so memory manager kind of communicates
it back to Albert that hey I have
03:12 - assigned address 217 for your
03:15 - variable x
03:16 - you can store whatever you want there.
03:18 - and Albert can fill-in any data
03:21 - into this valuable
03:23 - now albert needs to store a list of integers,
a list of numbers
03:29 - and and he thinks that the maximum number
of
03:31 - integers in this list will be 4.
03:34 - so he asks the memory manager
03:37 - for an integer array of size 
03:39 - four names 'A'
03:41 - Now, arrays is always stored in memory as one contiguous block of memory. 
03:46 - So memory manager is like ok, i need to look for
03:49 - a block of memory of 16 bytes
03:52 - for this variable 
03:53 - this array A.
03:55 - so the memory manager allocates this block
starting address two zero one and
04:00 - ending address
04:02 - two one six
04:03 - for this variable 'A'
04:04 - which is 
04:05 - an array of four integers.
04:08 - uh... because array is stored as one
contiguous block of memory
04:12 - and
04:13 - memory manager conveys the starting address of this block
04:16 - whenever Albert tries to access any of the elements in the array
04:20 - Let's say he tries to access,
04:22 - let's say he tries to write the value at the 
04:25 - fourth element in the array.
04:27 - which he accesses as A[3], Albert's
application knows where to write this
04:32 - particular
04:33 - value because it knows the base address
04:36 - the starting address of
04:37 - the block 'A'
04:39 - the array 'A' and
04:41 - from base address
04:43 - using the
04:44 - index which is 3 here
04:47 - it calculates the address of
04:49 - A[3]
04:50 - so it knows that A[3] is at address
two one three. So, to
04:53 - access any of the
04:55 - elements in the array
04:57 - the application takes constant time
05:00 - and this is one awesome thing  about arrays
that irrespective of the size of the
05:04 - arrays
05:05 - uh... the application,an application
can access any of the elements in an array 
05:10 - in constant time
05:11 - now let's say Albert uses this array of 4 integers to
05:15 - store his list
05:17 - so i'll fill in some values here at
these positions ,let's say this is 8
05:21 - this is 2
05:23 - this is 6, this is 5, this is 4
05:26 - Now Albert at some point feels that ok, i need to
05:29 - have one more element in this list
05:32 - now he has declared an array of size four
and he wants to add a fifith element in 
05:36 - the array
05:37 - so he asks
05:39 - the memory manager that hey i want to
extend my array 'A'
05:43 - is it possible to do so
05:45 - i want to extend the same block
05:47 - and the memory manager is like when i allocate
05:50 - memory for an array, I do not expect that you will expect an extension, so
05:55 - i use whatever memory available adjacent to that block 
05:59 - for other variables
06:00 - in some cases I may extend the same
block, but
06:04 - in this case, I have
06:05 - an element
06:07 - a variable 'x' ... next to your block.So,
i cannot give you an extension
06:11 - so Albert is like what all options do i
have
06:14 - Memory manager is like, you can
tell me the new size and I can recreate a
06:19 - new block
06:20 - at some new address
06:22 - and we will have to copy all the
elements from the previous block to the
06:26 - new block
06:27 - so Albert says that ok, let's do it
06:29 - but the memory manager is like
06:31 - you still need to give me the size of
the new block
06:33 - Albert thinks that this time he will give a really 
06:36 - large size for the new array or the new block.
06:39 - so that it does not fill up.
06:41 - this new block starting address 224 is allocated
06:45 - Albert asks memory manager to free the previous block. 
06:48 - and this is some cost. He has to copy
all the elements, all the numbers from
06:52 - the previous block into the new block
06:54 - and now he can add one more element to
this list
06:57 - and he has kept his array large this
time
07:00 - just in case he needs
07:02 - more numbers in the list
07:04 - The only option that Albert 
07:06 - had was to create
07:08 - 'A' as an entirely new block, as an
entirely new array
07:12 - and albert is it still feeling bad
because if the list is too small
07:16 - he is not using some
07:18 - part of the array
07:19 - and so memory is getting wasted
07:21 - and if the list again grows too much he
will again have to
07:25 - create a new array, a new block and he will
again have to copy all the elements
07:29 - from the previous block into the new
block
07:32 - Albert is desperately seeking a
solution to this problem
07:36 - and the solution to this problem
07:38 - is a data structure named
07:41 - linked list
07:43 - so let us not try to understand
07:45 - linked list data structure and see how it solves
07:48 - Albert's problem
07:50 - what Albert can do is that
07:52 - instead of asking the memory manager
for an array
07:55 - which will be one 
07:56 - large contiguous block of memory
07:58 - he can ask memory
08:00 - for one unit of data at a time
08:02 - for one element at a time
08:04 - in a separate request
08:07 - I'm cleaning up the memory here
08:10 - once again let's say Albert wants to store
08:12 - this list of four integers in the memory
08:15 - what if he
08:16 - requests memory for one integer at a time.
So, first he pings memory manager for 
08:21 - some memory to store number six
08:23 - memory manager will be like ok you need
space to store an integer
08:27 - so you get this block of four bytes
at address
08:30 - 204
08:31 - so Albert can 
08:33 - store number six here
08:34 - now Albert makes another reques,t a
separate request
08:37 - for number five
08:39 - let's say he gets this blocks starting
address two one seven
08:42 - for number five
08:43 - because he makes a separate request, he may or may not get
08:48 - memory adjacent to number 6.
08:50 - higher probability is that  he will not get
08:52 - an adjacent memory location so
similarly Albert makes uh... separate
08:56 - requests
08:57 - for number four and two
08:58 - so let's say he gets these two blocks at address 232 and 242 respectively 
09:03 -  for numbers
09:04 - four and two
09:05 - so as you can see when Albert makes separate request
09:09 - for each integer
09:10 - instead of getting one contiguous block of 
memory, he gets these disjoint
09:15 - non-contiguous blocks of memory
09:18 - so we need to store some more information here
09:21 - we need to store the information that this  is the first
09:24 - element in the list and this is the
second element in the list
09:27 - so we need to link these blocks together
somehow
09:30 - we an array, it was very simple
09:32 - we had one contiguous block of memory, so
09:35 - so we knew where a particular element is
by calculating its address using the
09:40 - starting address of the blocks and the
position of the element in the array
09:43 - but here, we need to store the
information that this is the first block
09:47 - which  stores the first element and 
this is the second block which stores the
09:50 - second element
09:51 - and so on
09:53 - to link these blocks together and
to store the information that this is
09:56 - the first block in the list and this is
the
09:59 - second block in the list
10:01 - what we can do is that
10:02 - we can store some extra information with
each block
10:06 - so what if we can have two parts in each
block something like this
10:10 - and in one part of the block, we store
 the data or the value
10:15 - and in the other part of the block
we store the address of the next block.
10:20 - in this example in the first block the address part
10:23 - would be 217, the address of the next block that stores 5
10:28 - and in this
10:29 - next block or the second block address part would be
10:32 - 232
10:34 - In the block at address 232
10:36 - We will store the address 242
10:39 - the address of the next block that stores
10:42 - number two
10:43 - and the block at 242 is the last block.
10:46 - there is no next block after this so
in the
10:48 - address part we can have
10:50 - address as zero, zero is
10:52 - invalid address
10:53 - zero can be used to mark that this is the
10:56 - end of the list
10:57 - there is no link to the next
10:59 - uh... node or next block after this 
11:02 - particular block
11:04 - so Albert now actually has to request
11:07 - memory manager for a block of money that
will store
11:10 - two variables
11:11 - one an integer variable that will store the value
11:15 - of our element
11:16 - and one a pointer variable that will store
 the address of the next block
11:20 - the next node
11:22 - in the list
11:23 - in c he can define
11:25 - a type named
11:26 - Node
11:27 - like this
11:28 - he will have two fields in the node, one to store the data
11:32 - this field
11:33 - will be an ineteger
11:35 - and one more field to store the address of
11:39 - the next node on the list
11:41 - so Albert will ask
11:42 - a Node
11:44 - Albert will ask memory for a node
11:45 - from the memory manager
11:47 - and the memory manager will be like, Ok
11:49 - you need a node that needs 4 bytes for
11:52 - an integer variable and four more bytes for
11:56 - the pointer variable that will store the address
11:58 - Pointer variable also in a typical architecture is
stored in four bytes
12:02 - so now memory manager gives us a block of 8 bytes. 
12:05 - and we call this block - a Node
12:08 - Notice that the second field in the node
structure is Node star which means
12:13 - pointer to node
12:14 - so this field will only 
12:17 - store an address
12:18 - of the next node in the list
12:20 - so if we store the list like this in
the memory as these non-contiguous
12:25 - nodes connected to each other
12:27 - but then this is a linked list data structure
12:31 - Logical view of the linked list
data structure will be something like
12:34 - this
12:34 - data is stored in these nodes and each
node stores the data as well as the link
12:40 - to the next node so each node kind of points
to the next node
12:43 - the first node
12:45 - is also called
12:46 - the head node
12:47 - and the only information about the list
that we keep all the time is
12:52 - address of the head node
12:53 - or address of the first node
12:55 - so address of the head node kind of
gives us access to the complete list
13:00 - the address in the last node
13:02 - is
13:02 - NULL or  zero
13:04 - which means that
13:05 - the last node does not point to any other node.
13:08 - now if we want to traverse the linked list
13:11 - the only way to do it is
13:13 - we start at the head
13:14 - we go to the first guy and then we ask the first 
guy the address 
13:18 - the next guy
13:19 - adress of the next node and then we
go to the next node and ask
13:22 - the address of the next node and this
is the only way to access the elements
13:27 - in the linked list
13:28 - if we want to insert a node in the linked list
13:32 - let's say we want to add number
three at the end of the linked list
13:35 - then all we need to do is first create
 a node in the linked list
13:39 - sorry first ... create a node 
independently and separately it will get
13:43 - some memory location
13:45 - so we created this node with value 3. 
Now all we need to do
13:50 - is fill the address properly, adjust these links
properly
13:53 - so
13:54 - the address of this particular node
13:56 - will be filled in this node 
13:59 - with value 2. And this node 
14:00 - the address part can be NULL, so it is the last
node, it does not point to
14:05 - any other node
14:06 - let's also show this uh... these nodes
in the memory here
14:11 - so i have written the address of each node in 
14:14 - brown at top of these notes
14:16 - and i have also filled in this address field of each node
14:20 - let's say uh...
14:21 - the Node for
14:22 - value three gets address 252
14:25 - so this is how things will be in the
memory and this is how the logical view
14:28 - will be
14:29 - the linked list
14:30 - uh... is always identified by the
address of the first node
14:34 - and unlike arrays we cannot access any
of the elements in constant time
14:38 - in the case of arrays using the
14:40 - starting address of the block of
memory and using the position of the 
14:44 - element in the list, we could calculate
the address of the element
14:48 - but in this case we have to start at the
head
14:51 - and we have to ask this element for the 
next element
14:54 - and then ask the next element who is
your next, it's like playing
14:58 - treasure hunt. You go to the first
guy and then you get the address for the
15:02 - second and then you go to the second guy and
you get address of the third guy.
15:06 - so the time taken to access elements
15:09 - will be proportional
15:10 - to the size of the list let's say the
size of the list is n, there are n
15:14 - elements in the list
15:15 - in the worst case to traverse the last element
we will
15:18 - go through all the elements, so time taken
to access elements is proportional to n
15:22 - or in other words we say that this operation will cost us or rather the 
15:26 - time complexity of this operation is big-oh of n
15:30 - insertion into the list
15:32 - we can insert anywhere in the list, we
first need to create a node and
15:36 - just adjust these links
15:38 - properly, like say i want
15:40 - 10 at 3rd position in the list so all we
need to do is create a Node, store
15:44 - the value 10 in the data part
15:47 - something like this
15:49 - Let's say we get the node at address 310
15:51 - So, we will adjust the address field in 
the second node to point to
15:56 - this node at address 310,and this
 node will point to
15:59 - the node with value 4.
16:01 - Now to insert also, we will have to 
traverse the list and got to that
16:04 - particular position
16:06 - and so this will be
16:08 - O(n) again in terms of of time complexity
16:10 - the only thing is that uh... the
insertion will be a simple operation, we
16:13 - will not have to do all the shifts as
16:16 - we had to do in an array.
16:20 - To insert something in between, we had
 to shift all the elements by one position
16:22 - towards higher indices
16:24 - similarly to delete something
16:26 - from this list will also O(n)
16:28 - so we can see some good things about
linked list
16:31 - that is no extra use of memory
16:33 - in the sense that some memory is unused
16:36 - We are using some extra memory, we are
using some extra money to store the
16:39 - addresses
16:40 - but we have the benefit that we create
16:43 - nodes as and when we want
16:45 - and we can also free the nodes as
and when we want
16:48 - we do not have to guess the size of the
list beforehand like in the case of
16:52 - arrays
16:54 - We will discuss all the 
operations on linked list and the cost
16:57 - of these operations
16:58 - as well as comparison with array
17:01 - in our next lessons. We will also be
implementing linked list in C
17:05 - or C++
17:07 - so this is all for a basic
introduction to linked list
17:10 - Thanks for watching !

Cleaned transcript:

In this lesson, we will introduce you to linked list data structure In our previous lesson, we tried to implement a dynamic list using arrays and we had some issues there it was not most efficient in terms of memory usage, in terms of memory consumption When we use arrays, we have some limitations To be able to understand linked list well, we need to understand these limitations so i'm going to tell you a simple story to help you understand this let us say this is computer's memory and each partition here is one byte of memory Now as we know each byte of memory has an address We are showing only a section of the memory, that's why it is extending towards the bottom and the top let's say that address increases from bottom to top so if this bike is address 200, the next byte would be address 201 and next byte would be address 202 and so on what I want to do is i want to draw this memory from left to right horizontally instead of drawing it from bottom to top like this uh... this looks better let's say this byte here is address 200 and as we go towards the right the address increases, so this is like 201 and we go on like 202, 203 and so on it doesn't really matter whether we show memory from bottom to top or left to right these are just logical ways to look at the memory so coming back to our story Memory is a crucial resource and all the applications keep asking for it. So, Mr. computer has given this job of managing the memory to one of his components, to one of his guys who he calls the memory manager now this guy keeps track of what part of the memory is free and what part of the memory is allocated and anyone who needs memory to store something needs to talk to this guy Albert is our programmer and he is building an application he needs to store some data in the memory, so he needs to talk to the memory manager He can talk to the memory manager in a high level language like C, let us say he is using C to talk to the memory manager First he wants to store an integer in the memory so he communicates this to memory manager by declaring an integer variable something like this the memory manager sees this declaration and he's says that ok you need to store an integer variable so i need to give you four bytes of memory because integer variable is stored in four bytes in a typical architecture. and let us say in this architecture, it is stored in four bytes so the memory manager looks for four bites of free space in the memory and assigns it or allocates it for valuable x Address of a block of memory is the address of the first byte in the memory so let us say this first byte of memory here is at address 217, so variable x is at address 217 so memory manager kind of communicates it back to Albert that hey I have assigned address 217 for your variable x you can store whatever you want there. and Albert can fillin any data into this valuable now albert needs to store a list of integers, a list of numbers and and he thinks that the maximum number of integers in this list will be 4. so he asks the memory manager for an integer array of size four names 'A' Now, arrays is always stored in memory as one contiguous block of memory. So memory manager is like ok, i need to look for a block of memory of 16 bytes for this variable this array A. so the memory manager allocates this block starting address two zero one and ending address two one six for this variable 'A' which is an array of four integers. uh... because array is stored as one contiguous block of memory and memory manager conveys the starting address of this block whenever Albert tries to access any of the elements in the array Let's say he tries to access, let's say he tries to write the value at the fourth element in the array. which he accesses as A[3], Albert's application knows where to write this particular value because it knows the base address the starting address of the block 'A' the array 'A' and from base address using the index which is 3 here it calculates the address of A[3] so it knows that A[3] is at address two one three. So, to access any of the elements in the array the application takes constant time and this is one awesome thing about arrays that irrespective of the size of the arrays uh... the application,an application can access any of the elements in an array in constant time now let's say Albert uses this array of 4 integers to store his list so i'll fill in some values here at these positions ,let's say this is 8 this is 2 this is 6, this is 5, this is 4 Now Albert at some point feels that ok, i need to have one more element in this list now he has declared an array of size four and he wants to add a fifith element in the array so he asks the memory manager that hey i want to extend my array 'A' is it possible to do so i want to extend the same block and the memory manager is like when i allocate memory for an array, I do not expect that you will expect an extension, so i use whatever memory available adjacent to that block for other variables in some cases I may extend the same block, but in this case, I have an element a variable 'x' ... next to your block.So, i cannot give you an extension so Albert is like what all options do i have Memory manager is like, you can tell me the new size and I can recreate a new block at some new address and we will have to copy all the elements from the previous block to the new block so Albert says that ok, let's do it but the memory manager is like you still need to give me the size of the new block Albert thinks that this time he will give a really large size for the new array or the new block. so that it does not fill up. this new block starting address 224 is allocated Albert asks memory manager to free the previous block. and this is some cost. He has to copy all the elements, all the numbers from the previous block into the new block and now he can add one more element to this list and he has kept his array large this time just in case he needs more numbers in the list The only option that Albert had was to create 'A' as an entirely new block, as an entirely new array and albert is it still feeling bad because if the list is too small he is not using some part of the array and so memory is getting wasted and if the list again grows too much he will again have to create a new array, a new block and he will again have to copy all the elements from the previous block into the new block Albert is desperately seeking a solution to this problem and the solution to this problem is a data structure named linked list so let us not try to understand linked list data structure and see how it solves Albert's problem what Albert can do is that instead of asking the memory manager for an array which will be one large contiguous block of memory he can ask memory for one unit of data at a time for one element at a time in a separate request I'm cleaning up the memory here once again let's say Albert wants to store this list of four integers in the memory what if he requests memory for one integer at a time. So, first he pings memory manager for some memory to store number six memory manager will be like ok you need space to store an integer so you get this block of four bytes at address 204 so Albert can store number six here now Albert makes another reques,t a separate request for number five let's say he gets this blocks starting address two one seven for number five because he makes a separate request, he may or may not get memory adjacent to number 6. higher probability is that he will not get an adjacent memory location so similarly Albert makes uh... separate requests for number four and two so let's say he gets these two blocks at address 232 and 242 respectively for numbers four and two so as you can see when Albert makes separate request for each integer instead of getting one contiguous block of memory, he gets these disjoint noncontiguous blocks of memory so we need to store some more information here we need to store the information that this is the first element in the list and this is the second element in the list so we need to link these blocks together somehow we an array, it was very simple we had one contiguous block of memory, so so we knew where a particular element is by calculating its address using the starting address of the blocks and the position of the element in the array but here, we need to store the information that this is the first block which stores the first element and this is the second block which stores the second element and so on to link these blocks together and to store the information that this is the first block in the list and this is the second block in the list what we can do is that we can store some extra information with each block so what if we can have two parts in each block something like this and in one part of the block, we store the data or the value and in the other part of the block we store the address of the next block. in this example in the first block the address part would be 217, the address of the next block that stores 5 and in this next block or the second block address part would be 232 In the block at address 232 We will store the address 242 the address of the next block that stores number two and the block at 242 is the last block. there is no next block after this so in the address part we can have address as zero, zero is invalid address zero can be used to mark that this is the end of the list there is no link to the next uh... node or next block after this particular block so Albert now actually has to request memory manager for a block of money that will store two variables one an integer variable that will store the value of our element and one a pointer variable that will store the address of the next block the next node in the list in c he can define a type named Node like this he will have two fields in the node, one to store the data this field will be an ineteger and one more field to store the address of the next node on the list so Albert will ask a Node Albert will ask memory for a node from the memory manager and the memory manager will be like, Ok you need a node that needs 4 bytes for an integer variable and four more bytes for the pointer variable that will store the address Pointer variable also in a typical architecture is stored in four bytes so now memory manager gives us a block of 8 bytes. and we call this block a Node Notice that the second field in the node structure is Node star which means pointer to node so this field will only store an address of the next node in the list so if we store the list like this in the memory as these noncontiguous nodes connected to each other but then this is a linked list data structure Logical view of the linked list data structure will be something like this data is stored in these nodes and each node stores the data as well as the link to the next node so each node kind of points to the next node the first node is also called the head node and the only information about the list that we keep all the time is address of the head node or address of the first node so address of the head node kind of gives us access to the complete list the address in the last node is NULL or zero which means that the last node does not point to any other node. now if we want to traverse the linked list the only way to do it is we start at the head we go to the first guy and then we ask the first guy the address the next guy adress of the next node and then we go to the next node and ask the address of the next node and this is the only way to access the elements in the linked list if we want to insert a node in the linked list let's say we want to add number three at the end of the linked list then all we need to do is first create a node in the linked list sorry first ... create a node independently and separately it will get some memory location so we created this node with value 3. Now all we need to do is fill the address properly, adjust these links properly so the address of this particular node will be filled in this node with value 2. And this node the address part can be NULL, so it is the last node, it does not point to any other node let's also show this uh... these nodes in the memory here so i have written the address of each node in brown at top of these notes and i have also filled in this address field of each node let's say uh... the Node for value three gets address 252 so this is how things will be in the memory and this is how the logical view will be the linked list uh... is always identified by the address of the first node and unlike arrays we cannot access any of the elements in constant time in the case of arrays using the starting address of the block of memory and using the position of the element in the list, we could calculate the address of the element but in this case we have to start at the head and we have to ask this element for the next element and then ask the next element who is your next, it's like playing treasure hunt. You go to the first guy and then you get the address for the second and then you go to the second guy and you get address of the third guy. so the time taken to access elements will be proportional to the size of the list let's say the size of the list is n, there are n elements in the list in the worst case to traverse the last element we will go through all the elements, so time taken to access elements is proportional to n or in other words we say that this operation will cost us or rather the time complexity of this operation is bigoh of n insertion into the list we can insert anywhere in the list, we first need to create a node and just adjust these links properly, like say i want 10 at 3rd position in the list so all we need to do is create a Node, store the value 10 in the data part something like this Let's say we get the node at address 310 So, we will adjust the address field in the second node to point to this node at address 310,and this node will point to the node with value 4. Now to insert also, we will have to traverse the list and got to that particular position and so this will be O(n) again in terms of of time complexity the only thing is that uh... the insertion will be a simple operation, we will not have to do all the shifts as we had to do in an array. To insert something in between, we had to shift all the elements by one position towards higher indices similarly to delete something from this list will also O(n) so we can see some good things about linked list that is no extra use of memory in the sense that some memory is unused We are using some extra memory, we are using some extra money to store the addresses but we have the benefit that we create nodes as and when we want and we can also free the nodes as and when we want we do not have to guess the size of the list beforehand like in the case of arrays We will discuss all the operations on linked list and the cost of these operations as well as comparison with array in our next lessons. We will also be implementing linked list in C or C++ so this is all for a basic introduction to linked list Thanks for watching !
