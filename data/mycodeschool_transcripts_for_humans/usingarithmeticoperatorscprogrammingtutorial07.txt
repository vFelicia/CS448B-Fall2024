With timestamps:

00:00 - in our previous lesson we saw how we can
00:02 - read input and print output using scanf
00:06 - and printf and we also wrote a basic
00:08 - program to find product of two numbers
00:10 - now in this lesson we will see in detail
00:12 - how we can use various arithmetic
00:14 - operators to perform calculations in our
00:17 - program let's get started by writing
00:19 - some code I have already written couple
00:22 - of lines here first line line at the top
00:24 - is a comment a comment is ignored by the
00:27 - compiler it's not treated as an
00:29 - instruction to be executed to write a
00:32 - comment in a single line in C we need to
00:35 - type in two forward slashes and anything
00:38 - starting the forward slashes till the
00:39 - end of that line would be a comment in
00:42 - the next line I have written an
00:44 - instruction to include stdio.h library
00:46 - this laboratory gives us some basic
00:48 - functionalities printf and scanf are
00:51 - part of this laboratory and after that
00:54 - I'm writing my main function now in my
00:56 - main function here what I want to do is
00:58 - I want to declare two integer variables
00:59 - named a and B and I want to ask the user
01:04 - to input these two integers so I'm first
01:07 - printing a message on screen enter a and
01:10 - then I'm using scanf to receive input in
01:14 - a and just like a I'll receive another
01:18 - integer value in B and now let's do some
01:21 - maths here I first want to calculate sum
01:23 - of a and B so I'll declare an integer
01:26 - variable named sum and after I've got a
01:28 - and B as input I will say sum equal a
01:32 - plus B and with this instruction I've
01:35 - calculated sum of values in E and B and
01:37 - I've assigned it to this variable named
01:40 - sum and now I want to write a printf to
01:44 - say a plus B equal whatever the sum is
01:48 - now next I want to calculate a minus B I
01:52 - have declared a variable named diff and
01:54 - I'm saying diff equal a minus B and once
01:57 - again I'll write a printf so this is my
01:59 - difference next I want to calculate the
02:02 - product of NB
02:07 - I'm multiplying a and B with this
02:10 - expression a asterisk B asterisk is the
02:13 - symbol for multiplication operator and
02:15 - I'm storing the value in this variable
02:17 - named product so with this much of code
02:20 - we have asked the user to enter two
02:22 - numbers a and B and then we are
02:24 - calculating and printing a plus B a
02:27 - minus B and a into B let's quickly run
02:30 - this program and see what will happen
02:31 - the program is asking me to enter a
02:34 - let's say a is equal to 10 now it's
02:37 - asking to enter B let's say B is equal
02:39 - to 5 and now we have got some output
02:42 - here as we can see output of all the
02:45 - three printf cells come on a single line
02:47 - this is happening because printf by
02:49 - default does not take the cursor to the
02:52 - next line we need to explicitly insert
02:55 - an end of line character to take the
02:58 - cursor to the next line what I'll do
03:00 - here is at the end of the string
03:02 - constants in each of these printf cell
03:04 - type in backslash and then n backslash
03:08 - and n together is treated as a single
03:11 - character backslash n is called end off
03:14 - line character for a backslash N and end
03:17 - of line character will be printed and
03:19 - cursor will go to the next line so I'll
03:22 - put backslash n in all three printf s--
03:25 - and now when I'm running this program
03:28 - output of each printf is coming on a
03:31 - separate line in the first print of % e
03:34 - in the string constant will be replaced
03:36 - with value in sum and that's why we have
03:38 - a plus B equal 15 printed here 10 plus 5
03:42 - is 15 and similarly a minus B that would
03:46 - be 10 minus 5 is 5 and a into B is 50
03:50 - end of line character which is also
03:52 - called newline character or line break
03:55 - should be interpreted more like a
03:57 - command to be executed rather than as
04:00 - data it's inserted in data but it works
04:03 - like a command it takes all the text
04:05 - following it to a new line okay so with
04:08 - this much of code we are performing
04:10 - addition subtraction and multiplication
04:12 - let's now perform division let's say we
04:14 - want to divide a by B if I'm dividing a
04:18 - by B then aim
04:20 - not be completely divisible by B B may
04:23 - not be a factor of a in such a case we
04:26 - can show the result the outcome of
04:28 - division in two ways we can either show
04:31 - result as a real number for example if
04:34 - I'm dividing 9 by 2 then the result
04:36 - would be 4 point 5 there would be a
04:39 - fractional part or what we can do is we
04:41 - can say that quotient of this division
04:45 - is this and remainder is this quotient
04:49 - is basically the integral part of the
04:52 - result of a division to perform division
04:54 - in my code here I can use division
04:57 - operator I'll declare a variable named C
05:00 - here and I'll write a statement C equal
05:04 - a by B /iz my division operator and now
05:10 - I'll print this value I have written a
05:13 - printf a by B equal whatever is assigned
05:16 - to C after division let's quickly run
05:18 - this and see the output
05:20 - this time I wanna say a is equal to 9
05:22 - and B is equal to 2 what I'm getting
05:25 - here is e by B equal 4 we are getting
05:28 - the quotient this is happening because a
05:31 - and B both are of type integer we have
05:36 - declared them as int and when division
05:39 - operator is applied to two integers then
05:43 - only the integral part or the quotient
05:46 - is returned back if you want the
05:48 - fractional part as well then you need to
05:50 - declare a and B as variables of type
05:53 - float or double float and double are
05:58 - types that are used to store and perform
06:00 - calculations on real numbers what I'll
06:03 - do now is in the declaration statement
06:05 - I'll change this int to float so now all
06:09 - my variables are of type float now in
06:13 - all the scanf and printf statements the
06:15 - format string or the string constant
06:17 - should have placeholder % F instead of %
06:21 - d % f is placeholder for float let's run
06:26 - this program now once again I'll say a
06:28 - equal 9 and B equal to 2 and see what we
06:33 - have got here
06:34 - data is being printed with fractional
06:37 - part by default printf is printing six
06:40 - digits after the decimal point we can
06:42 - choose to print as many as we want let's
06:45 - say I want to print only two desserts
06:47 - after the decimal point then instead of
06:50 - writing percent F in my string constant
06:53 - as placeholder I'll write 0.2 F % point
06:57 - 2f and now only two most significant
07:01 - digits after the decimal point will be
07:02 - printed if I want 3 I'll say 0.3 F let's
07:06 - just put point 2f everywhere in all the
07:09 - plaintiffs and let's run the program now
07:12 - once again let's say a is equal to 9 and
07:15 - now because we are scanning a
07:17 - floating-point number or real number we
07:20 - can also enter something like nine point
07:22 - zero I can have a fractional part in my
07:25 - input as well now let's say B is equal
07:28 - to two it's not mandatory to enter the
07:30 - fractional part if it's zero and this is
07:33 - what I'm getting all the values are
07:35 - being printed till two digits after the
07:37 - decimal point there is another data type
07:40 - that can be used to store real numbers
07:42 - and it's called
07:43 - double so instead of using float here we
07:46 - could use double with double you get
07:49 - twice the memory or storage as compared
07:52 - to float in a typical architecture size
07:55 - of float would be four bytes or 32 bits
07:58 - and size of double would be 8 bytes or
08:01 - 64 bits if my variables are of type
08:05 - double then I need to use percent
08:08 - LF as placeholder in these format
08:12 - strings pass to printf and scanf okay
08:15 - now I want to come back to integers and
08:18 - I want to talk about one more operator
08:21 - and this operator is called modulus
08:24 - operator as we had seen earlier division
08:27 - with integer types and gives us the
08:29 - quotient I'll rename this variable C as
08:33 - quotient and now I want to declare
08:35 - another variable named remainder modulus
08:40 - operator gives us the remainder symbol
08:42 - for modulus operator is this character
08:45 - this %
08:47 - with the statement remainder equal a
08:50 - modulo be we will get the remainder of
08:53 - division of a by B I'll just print the
08:56 - remainder let's run this program and see
08:58 - what happens now I'll say a is equal to
09:01 - 9 and B is equal to 2 and this is what
09:04 - I've got in the last line I have got 1
09:07 - if I'll divide 9 by 2 remainder would be
09:09 - 1 I'm writing the value only I'm not
09:13 - writing something like a modulo B equal
09:16 - this actually let's just print this like
09:19 - all other lines in this last printf now
09:22 - I'm writing a % be equal % D person D is
09:26 - my place holder now when I'm running
09:29 - this program I have not got the % here
09:32 - in the output of last printf this is
09:35 - happening because % is treated as a
09:37 - special character by printf it's treated
09:40 - as beginning of a placeholder to print
09:44 - this character using printf what we need
09:46 - to do is we need to put two person
09:49 - together if we will put two person
09:52 - together printf will not look at the
09:54 - pair in context off of placeholder as
09:57 - you can see now we have got the output a
09:59 - % B equal 1 or we should say a modulo B
10:03 - equal 1 ok so now we know how to do some
10:07 - basic arithmetic in C we can write an
10:10 - arithmetic expression and assign it to a
10:12 - variable once the expression is
10:14 - evaluated result will be stored in this
10:17 - variable in this statement sum equal a
10:20 - plus B this equal to sign is for
10:22 - assignment operator in right hand side
10:25 - of assignment operator we have an
10:28 - arithmetic expression and in left of
10:31 - this assignment operator we have a
10:32 - variable name we cannot have anything
10:35 - else in left of an assignment operator
10:37 - it must always be a variable in right we
10:41 - can have a constant of variable or an
10:44 - expression here we have an arithmetic
10:46 - expression and we have a really simple
10:49 - arithmetic expression here we could have
10:51 - a really complex one with multiple
10:54 - constants variables and operators I have
10:57 - written some more instructions here and
10:59 - in all these instructions we have
11:01 - arithmetic expression with more than one
11:03 - operator we can write such complex
11:06 - arithmetic expressions but we must
11:08 - understand how to create syntactically
11:10 - correct expressions in code and we must
11:14 - also understand how these expressions
11:16 - will get evaluated we have discussed
11:19 - these five arithmetic operators
11:20 - all of these are binary operators an
11:23 - operator that operates upon two operands
11:26 - is called a binary operator operand by
11:30 - definition is an object on which
11:31 - operation is being performed for all
11:34 - these operators we must have an operand
11:36 - in left and another operand in right and
11:39 - operator itself would be in between
11:41 - operand can be a constant of variable or
11:45 - in a complex expression operand can be
11:47 - an expression itself let's pick this
11:50 - expression a plus 2 into B we have two
11:53 - operators here we have addition and we
11:56 - have multiplication now can you tell me
11:58 - the operands for each of these two
12:00 - operators well it will depend upon which
12:03 - operation we are performing first if we
12:06 - are performing the addition first then
12:09 - for addition operands are ii and ii and
12:12 - for multiplication operands are a plus 2
12:17 - and b but if we are performing the
12:20 - multiplication first then operands for
12:23 - multiplication would be 2 and b and
12:26 - operands for addition would be a and
12:30 - this expression 2 into B if you remember
12:34 - your high school mathematics then
12:36 - precedence or priority of multiplication
12:39 - and division operations is higher than
12:42 - that of addition and subtraction and so
12:45 - in this expression multiplication will
12:47 - be performed first so this is correct
12:50 - interpretation and this is incorrect in
12:53 - a complex expression operator precedence
12:56 - is applied to decide the order of
12:59 - operations in an arithmetic expression
13:02 - first preference is given to parentheses
13:04 - next in prior to your preference our
13:07 - multiplication division and modulo and
13:11 - then come addition and subtraction
13:14 - if there are two operators of same
13:17 - priority then they are executed from
13:19 - left to right by this expression a plus
13:23 - 2 into B what we implicitly mean is a
13:27 - plus and then 2 into B within
13:30 - parentheses if we want the addition to
13:33 - be performed first then we must put
13:35 - parentheses explicitly we should
13:38 - actually write expression like this now
13:41 - I have come back to this code that I had
13:43 - written earlier what I'm doing here is
13:45 - that I'm assigning these expressions to
13:49 - variables what we can also do is that we
13:52 - can pass these expressions directly as
13:55 - function arguments so in the first
13:58 - printf instead of passing some I can
14:01 - directly pass a plus B so I don't need
14:05 - this variable named sum and similarly in
14:08 - the next print if I can simply pass a
14:11 - minus B in the next I can pass a into B
14:14 - for the quotient I can pass a by B and
14:17 - for for modulus we can pass a modulo B
14:21 - if you'll run this program you'll get
14:23 - the same output as earlier so an
14:26 - arithmetic expression can be assigned to
14:28 - a variable or it can be passed directly
14:32 - as argument to a function ok now what I
14:36 - want to do next is I want to erase all
14:38 - the code in this main function and now I
14:41 - want to write some arithmetic
14:42 - expressions and I want you to guess the
14:44 - output what do you think will be the
14:47 - output of this program give this some
14:49 - time and deduce the answer in this
14:52 - expression A plus B by two we have two
14:55 - operators addition and division and we
14:58 - have no parentheses so division will be
15:00 - performed first B is 3 and 3 by 2 will
15:05 - give us 1 remember when we divide an
15:08 - integer by another we get the quotient
15:11 - or the integral part so B by 2 would be
15:14 - 1 and a is 4 so C would be 4 plus 1 that
15:17 - is 5 when I'm running the program as you
15:20 - can see I have got 5 now what should be
15:23 - the output of this one we have two
15:26 - operators
15:27 - action and addition they have equal
15:29 - priority so they will be executed from
15:32 - left to right a minus B would be 4 minus
15:35 - 3 that is 1 and C is 6 of 1 plus 6 would
15:39 - be 7 D would be 7 ok now what should be
15:44 - the output of this 1 part of the
15:46 - expression within parenthesis will be
15:47 - executed first
15:48 - a plus B would be 7 C minus T would be 1
15:52 - so e would be 7 into 1 that is 7 and my
15:56 - guess is right again so with this much I
15:59 - hope you got some understanding of how
16:00 - you can perform arithmetic operations in
16:03 - your code I'll stop here now this is it
16:06 - in this lesson on arithmetic operators
16:08 - thanks for watching

Cleaned transcript:

in our previous lesson we saw how we can read input and print output using scanf and printf and we also wrote a basic program to find product of two numbers now in this lesson we will see in detail how we can use various arithmetic operators to perform calculations in our program let's get started by writing some code I have already written couple of lines here first line line at the top is a comment a comment is ignored by the compiler it's not treated as an instruction to be executed to write a comment in a single line in C we need to type in two forward slashes and anything starting the forward slashes till the end of that line would be a comment in the next line I have written an instruction to include stdio.h library this laboratory gives us some basic functionalities printf and scanf are part of this laboratory and after that I'm writing my main function now in my main function here what I want to do is I want to declare two integer variables named a and B and I want to ask the user to input these two integers so I'm first printing a message on screen enter a and then I'm using scanf to receive input in a and just like a I'll receive another integer value in B and now let's do some maths here I first want to calculate sum of a and B so I'll declare an integer variable named sum and after I've got a and B as input I will say sum equal a plus B and with this instruction I've calculated sum of values in E and B and I've assigned it to this variable named sum and now I want to write a printf to say a plus B equal whatever the sum is now next I want to calculate a minus B I have declared a variable named diff and I'm saying diff equal a minus B and once again I'll write a printf so this is my difference next I want to calculate the product of NB I'm multiplying a and B with this expression a asterisk B asterisk is the symbol for multiplication operator and I'm storing the value in this variable named product so with this much of code we have asked the user to enter two numbers a and B and then we are calculating and printing a plus B a minus B and a into B let's quickly run this program and see what will happen the program is asking me to enter a let's say a is equal to 10 now it's asking to enter B let's say B is equal to 5 and now we have got some output here as we can see output of all the three printf cells come on a single line this is happening because printf by default does not take the cursor to the next line we need to explicitly insert an end of line character to take the cursor to the next line what I'll do here is at the end of the string constants in each of these printf cell type in backslash and then n backslash and n together is treated as a single character backslash n is called end off line character for a backslash N and end of line character will be printed and cursor will go to the next line so I'll put backslash n in all three printf s and now when I'm running this program output of each printf is coming on a separate line in the first print of % e in the string constant will be replaced with value in sum and that's why we have a plus B equal 15 printed here 10 plus 5 is 15 and similarly a minus B that would be 10 minus 5 is 5 and a into B is 50 end of line character which is also called newline character or line break should be interpreted more like a command to be executed rather than as data it's inserted in data but it works like a command it takes all the text following it to a new line okay so with this much of code we are performing addition subtraction and multiplication let's now perform division let's say we want to divide a by B if I'm dividing a by B then aim not be completely divisible by B B may not be a factor of a in such a case we can show the result the outcome of division in two ways we can either show result as a real number for example if I'm dividing 9 by 2 then the result would be 4 point 5 there would be a fractional part or what we can do is we can say that quotient of this division is this and remainder is this quotient is basically the integral part of the result of a division to perform division in my code here I can use division operator I'll declare a variable named C here and I'll write a statement C equal a by B /iz my division operator and now I'll print this value I have written a printf a by B equal whatever is assigned to C after division let's quickly run this and see the output this time I wanna say a is equal to 9 and B is equal to 2 what I'm getting here is e by B equal 4 we are getting the quotient this is happening because a and B both are of type integer we have declared them as int and when division operator is applied to two integers then only the integral part or the quotient is returned back if you want the fractional part as well then you need to declare a and B as variables of type float or double float and double are types that are used to store and perform calculations on real numbers what I'll do now is in the declaration statement I'll change this int to float so now all my variables are of type float now in all the scanf and printf statements the format string or the string constant should have placeholder % F instead of % d % f is placeholder for float let's run this program now once again I'll say a equal 9 and B equal to 2 and see what we have got here data is being printed with fractional part by default printf is printing six digits after the decimal point we can choose to print as many as we want let's say I want to print only two desserts after the decimal point then instead of writing percent F in my string constant as placeholder I'll write 0.2 F % point 2f and now only two most significant digits after the decimal point will be printed if I want 3 I'll say 0.3 F let's just put point 2f everywhere in all the plaintiffs and let's run the program now once again let's say a is equal to 9 and now because we are scanning a floatingpoint number or real number we can also enter something like nine point zero I can have a fractional part in my input as well now let's say B is equal to two it's not mandatory to enter the fractional part if it's zero and this is what I'm getting all the values are being printed till two digits after the decimal point there is another data type that can be used to store real numbers and it's called double so instead of using float here we could use double with double you get twice the memory or storage as compared to float in a typical architecture size of float would be four bytes or 32 bits and size of double would be 8 bytes or 64 bits if my variables are of type double then I need to use percent LF as placeholder in these format strings pass to printf and scanf okay now I want to come back to integers and I want to talk about one more operator and this operator is called modulus operator as we had seen earlier division with integer types and gives us the quotient I'll rename this variable C as quotient and now I want to declare another variable named remainder modulus operator gives us the remainder symbol for modulus operator is this character this % with the statement remainder equal a modulo be we will get the remainder of division of a by B I'll just print the remainder let's run this program and see what happens now I'll say a is equal to 9 and B is equal to 2 and this is what I've got in the last line I have got 1 if I'll divide 9 by 2 remainder would be 1 I'm writing the value only I'm not writing something like a modulo B equal this actually let's just print this like all other lines in this last printf now I'm writing a % be equal % D person D is my place holder now when I'm running this program I have not got the % here in the output of last printf this is happening because % is treated as a special character by printf it's treated as beginning of a placeholder to print this character using printf what we need to do is we need to put two person together if we will put two person together printf will not look at the pair in context off of placeholder as you can see now we have got the output a % B equal 1 or we should say a modulo B equal 1 ok so now we know how to do some basic arithmetic in C we can write an arithmetic expression and assign it to a variable once the expression is evaluated result will be stored in this variable in this statement sum equal a plus B this equal to sign is for assignment operator in right hand side of assignment operator we have an arithmetic expression and in left of this assignment operator we have a variable name we cannot have anything else in left of an assignment operator it must always be a variable in right we can have a constant of variable or an expression here we have an arithmetic expression and we have a really simple arithmetic expression here we could have a really complex one with multiple constants variables and operators I have written some more instructions here and in all these instructions we have arithmetic expression with more than one operator we can write such complex arithmetic expressions but we must understand how to create syntactically correct expressions in code and we must also understand how these expressions will get evaluated we have discussed these five arithmetic operators all of these are binary operators an operator that operates upon two operands is called a binary operator operand by definition is an object on which operation is being performed for all these operators we must have an operand in left and another operand in right and operator itself would be in between operand can be a constant of variable or in a complex expression operand can be an expression itself let's pick this expression a plus 2 into B we have two operators here we have addition and we have multiplication now can you tell me the operands for each of these two operators well it will depend upon which operation we are performing first if we are performing the addition first then for addition operands are ii and ii and for multiplication operands are a plus 2 and b but if we are performing the multiplication first then operands for multiplication would be 2 and b and operands for addition would be a and this expression 2 into B if you remember your high school mathematics then precedence or priority of multiplication and division operations is higher than that of addition and subtraction and so in this expression multiplication will be performed first so this is correct interpretation and this is incorrect in a complex expression operator precedence is applied to decide the order of operations in an arithmetic expression first preference is given to parentheses next in prior to your preference our multiplication division and modulo and then come addition and subtraction if there are two operators of same priority then they are executed from left to right by this expression a plus 2 into B what we implicitly mean is a plus and then 2 into B within parentheses if we want the addition to be performed first then we must put parentheses explicitly we should actually write expression like this now I have come back to this code that I had written earlier what I'm doing here is that I'm assigning these expressions to variables what we can also do is that we can pass these expressions directly as function arguments so in the first printf instead of passing some I can directly pass a plus B so I don't need this variable named sum and similarly in the next print if I can simply pass a minus B in the next I can pass a into B for the quotient I can pass a by B and for for modulus we can pass a modulo B if you'll run this program you'll get the same output as earlier so an arithmetic expression can be assigned to a variable or it can be passed directly as argument to a function ok now what I want to do next is I want to erase all the code in this main function and now I want to write some arithmetic expressions and I want you to guess the output what do you think will be the output of this program give this some time and deduce the answer in this expression A plus B by two we have two operators addition and division and we have no parentheses so division will be performed first B is 3 and 3 by 2 will give us 1 remember when we divide an integer by another we get the quotient or the integral part so B by 2 would be 1 and a is 4 so C would be 4 plus 1 that is 5 when I'm running the program as you can see I have got 5 now what should be the output of this one we have two operators action and addition they have equal priority so they will be executed from left to right a minus B would be 4 minus 3 that is 1 and C is 6 of 1 plus 6 would be 7 D would be 7 ok now what should be the output of this 1 part of the expression within parenthesis will be executed first a plus B would be 7 C minus T would be 1 so e would be 7 into 1 that is 7 and my guess is right again so with this much I hope you got some understanding of how you can perform arithmetic operations in your code I'll stop here now this is it in this lesson on arithmetic operators thanks for watching
