With timestamps:

00:00 - In our previous lesson, we introduced you
to linked list data structure and we saw how
00:06 - linked lists solve some of the problems that
we have with arrays.
00:11 - So now the obvious question would be which
one is better - an array or a linked list.
00:17 - Well, there is no such thing as one data structure
is better than another data structure.
00:23 - One data structure may be really good for
one kind of requirement, while another data
00:27 - structure really good for another kind of
requirement.
00:29 - So, it all depends upon factor like what is
the most frequent operation that you want
00:35 - to perform with the data structure or what
is the size of the data and there can be other
00:40 - factors as well.
00:42 - So, in this lesson, we will compare these
two data structures based on some parameters,
00:48 - based on the cost of operations that we have
with these data structures.
00:52 - So, all in all we will comparatively study
the advantages and disadvantages and try to
00:58 - understand in which scenario we should use
an array and in which scenario we should use
01:02 - a linked list.
01:04 - So, i will draw two columns here, one for
array and another for linked list and the
01:10 - first parameter that we want to talk about
is the cost of accessing an element.
01:16 - Irrespective of the size of an array, it takes
constant time to access an element in the
01:23 - array.
01:24 - This is because an array is stored as one
contiguous block of memory.
01:28 - So, if we know the starting address or the
base address of this block of memory.
01:33 - Let us say what we have here is an integer
array and base address is 200.
01:39 - The first byte in this array is at address
200.
01:42 - Then let's say if we want to calculate the
address of element at index i, then it will
01:48 - be equal to 200 plus i into size of an integer
in bytes.
01:54 - So, size of an integer in bytes is typically
4 bytes.
01:57 - So, it will be 200 + 4*i.
01:59 - So, if 0th element is at address 200, if we
want to calculate the address for element
02:05 - at index 6, it will be 200 plus 6 into 4 which
will be equal to 224.
02:12 - So, knowing address of any element in an array
is just this calculation for our application.
02:20 - In terms of big-oh notation, constant time
is also called O(1).
02:25 - So, accessing an element in an array is O(1)
in terms of time complexity.
02:31 - If you are not aware of big-oh notation, check
the description of this video for a tutorial
02:37 - on time complexity analysis.
02:40 - Now, in a linked list, data is not stored
in a contiguous block of memory.
02:45 - So, if we have a linked list something like
this, let's say we have a linked list of integers
02:51 - here, then we have multiple blocks of memory
at different addresses.
02:56 - Each block in the linked list is called a
node and each node has two fields, one to
03:02 - store the data and one to store the address
of the next node.
03:07 - So, we call the second field, the link field.
03:10 - The only information that we keep with us
about a linked list is the address of the
03:16 - first node which is also called the head node.
03:20 - And this is what we keep passing to all the
functions also, the address of the head node.To
03:25 - access an element in the linked list at a
particular position, we first need to start
03:30 - at the head node or the first node, then we
go to the second node and see the address
03:38 - of the third node.
03:39 - In the worst case,
to access the last element in the list, we
03:43 - will be traversing all the elements in the
list.
03:46 - In the average case, we will be accessing
the middle element may be.
03:50 - So, if n is the size of he linked list, n
is the number of elements in the linked list,
03:56 - then we will traverse n/2 elements.
03:58 - So, the time taken in the average case also
is proportional to the number of elements
04:04 - in the linked list.
04:06 - So, we can say that the time complexity in
average case is O(n).So, on this parameter,
04:13 - cost of accessing an element, array scores
heavily over linked list.
04:18 - So iif you have a requirement where you want
to access elements in the list all the time,
04:23 - then definitely array is a better choice.
04:26 - Now, the second parameter than we want to
talk about is memory requirement or memory
04:32 - usage.
04:33 - with an array, we need to know the size of
the array before creating it, because arrays
04:38 - is created as one contiguous clock of memory.
04:42 - So, array is of fixed size.
04:44 - What we typically do is create, we create
a large enough array and some part of the
04:50 - array stores our list and some part of the
array is vacant or empty so that we can add
04:56 - more elements in the list.
04:58 - For example, we have an array of 7 integers
here and we have only 3 integers in the list.
05:04 - Rest 4 positions are unused.
05:07 - There would be some garbage value there.
05:10 - With linked list, lets say we have, let's
say we have this linked list of integers,
05:16 - there is no unused memory.
05:18 - We ask memory for one node at a time, so we
do not keep any reserved space.
05:24 - But we use extra memory for pointer variables
and this extra memory requirement for a pointer
05:31 - variable in a linked list can not be ignored.
05:34 - In a typical architecture let's say, integer
is stored in 4 bytes and pointer variable
05:40 - also takes 4 bytes.
05:42 - So, if you see, the memory requirement for
this array of 7 integers is 28 bytes.
05:49 - And the memory requirement for this linked
list would be 8*3, where 8 is the size of
05:55 - each node, 4 for integer and 4 bytes for the
pointer variable.
06:00 - So, this is also 24 bytes.
06:03 - If we add one more element to the list in
the array, we will just use one more position,
06:09 - while in linked list we will create one more
node, and will take another 8 bytes, so this
06:14 - will be 32 bytes.
06:17 - Linked list would fetch us a lot of advantage
if the data, the data part is large in size.
06:24 - So, in this case, we had a linked list if
integers, so integer is only 4 bytes.
06:29 - What if we had a linked list in which the
data part was some complex type that took
06:37 - 16 bytes.
06:38 - So, 4 bytes for the link and 16 bytes for
the data, each node would have been 20 bytes.
06:44 - An array of 7 elements for 16 bytes of data
would be, 16 byte for each element would be
06:51 - 112 bytes.
06:52 - And linked list of 4 would be only 80 bytes.
06:59 - So, it all depends.
07:01 - If the data part of a list takes a lot of
memory, linked list will definitely consume
07:07 - lot less memory.
07:08 - Otherwise, it depends what strategy we are
choosing to decide the size of the array.
07:14 - At any time how much array we keep unused.
07:18 - Now, one more point with memory allocation,
because arrays are created as one contiguous
07:24 - block of memory, sometimes when we may want
to create a really really large array, then
07:29 - may be memory may not be available as one
large block, but if we are using linked list,
07:36 - memory may be available as multiple small
blocks.
07:39 - So, we will have this problem of fragmentation
in the memory.
07:43 - Sometimes, we may get many small units of
memory, but we may not get one large block
07:48 - of memory.
07:49 - This may be a rare phenomenon, but this is
a possibility.
07:53 - So, this is also where linked list scores.
07:58 - Because arrays have fixed size, once array
gets filled and we need more memory, then
08:05 - there is no other option than to create a
new array of larger size and copy the content
08:10 - from the previous array into the new array.
08:13 - So, this is also one cost which is not there
with linked list.
08:18 - So, we need to keep these constraints and
these requirements in mind when we want to
08:25 - decide for one of these data structures for
our requirement.
08:29 - Now, the third parameter that we want to talk
about is cost of inserting an element in the
08:37 - list.
08:38 - Remember when we are talking about arrays
here, we are also talking about the possible
08:42 - use of array as dynamic list.
08:46 - So, there can be 3 scenarios in insertion.
08:49 - First scenario will be when we want to insert
an element at the beginning of the list.
08:55 - Let's see we want to insert number 3 at the
beginning of the list.
08:59 - In the case of arrays, we will have to shift
each element by one position towards the higher
09:04 - index.
09:05 - So, the time taken will be proportional to
the size of the list.
09:09 - So, this will be O(n).
09:12 - Let's say n is the size of the list.
09:14 - This will be O(n) in terms of time complexity.
09:17 - In the case of linked list, inserting a node
in the beginning will mean only creating a
09:23 - new node and adjusting the head pointer and
the link of this new node.
09:29 - So, the time taken will not depend upon the
size of the list, it will be constant.
09:34 - So, for linked list, inserting an element
at the beginning is O(1) in terms of time
09:39 - complexity.
09:41 - Inserting an element at end for an array,
let's say we are talking about dynamic array,
09:46 - a dynamic list in which we create a new array
if it gets filled.
09:52 - If there is space in the array, we just write
to the next higher index of the list.
09:58 - So, it will be constant time.
10:00 - So, time complexity is O(1) if array is not
full.
10:04 - If array is full, we will have to create a
new array and copy all the previous content
10:08 - into new array which will take O(n) time where
n is the size of the list.
10:12 - In the case of linked list, adding an element,
inserting an element in the end will mean
10:17 - traversing the whole list and then creating
a new node and adjusting the links.
10:23 - So, time taken will be proportional to n.
10:26 - I will use this color coding for linked list.
10:31 - Here n is the number of elements in the list.
10:33 - Now, the third case will be when we want to
insert in the middle of the list at soem nth
10:40 - position or may be some ith position.
10:43 - Again in the case of arrays, we will have
to shift elements.
10:47 - For the average case, we may want to insert
at the mid position in the array.
10:52 - So, will have to shift n/2 where n is the
number of elements in the list.
10:57 - So, the time taken is definitely proprotional
to n in average case.
11:02 - So, complexity will be O(n).
11:05 - For linked list also we will have to traverse
till that position and then only we can adjust
11:10 - the links.
11:11 - Even though we will not have any shifting,
we will have to traverse till that point and
11:16 - in the average case, time taken will be proportional
to n and the time complexity will be O(n).
11:23 - If you see , deleting an element will also
have these 3 sceanrios, and the time comeplxity
11:30 - for deleting for these 3 sceanrios will also
be the same.
11:35 - And the final point, the final parameter that
I want to talk about is which one is easy
11:41 - to use and implement.
11:44 - An array definitely is a lot easier to use.
11:48 - Linked list implemetation especially in Cor
C++ is more prone to errors like segmentation
11:54 - fault and memory leaks.
11:56 - It takes good care to work with linked lists.
11:59 - So, this was arrays vs linked lists.
12:03 - In our next lesson, we will implement linked
list in C or C++.
12:07 - We will get our hands dirty with some real
code.
12:11 - So this is it for this lesson.
12:13 - Thanks for Watching !

Cleaned transcript:

In our previous lesson, we introduced you to linked list data structure and we saw how linked lists solve some of the problems that we have with arrays. So now the obvious question would be which one is better an array or a linked list. Well, there is no such thing as one data structure is better than another data structure. One data structure may be really good for one kind of requirement, while another data structure really good for another kind of requirement. So, it all depends upon factor like what is the most frequent operation that you want to perform with the data structure or what is the size of the data and there can be other factors as well. So, in this lesson, we will compare these two data structures based on some parameters, based on the cost of operations that we have with these data structures. So, all in all we will comparatively study the advantages and disadvantages and try to understand in which scenario we should use an array and in which scenario we should use a linked list. So, i will draw two columns here, one for array and another for linked list and the first parameter that we want to talk about is the cost of accessing an element. Irrespective of the size of an array, it takes constant time to access an element in the array. This is because an array is stored as one contiguous block of memory. So, if we know the starting address or the base address of this block of memory. Let us say what we have here is an integer array and base address is 200. The first byte in this array is at address 200. Then let's say if we want to calculate the address of element at index i, then it will be equal to 200 plus i into size of an integer in bytes. So, size of an integer in bytes is typically 4 bytes. So, it will be 200 + 4*i. So, if 0th element is at address 200, if we want to calculate the address for element at index 6, it will be 200 plus 6 into 4 which will be equal to 224. So, knowing address of any element in an array is just this calculation for our application. In terms of bigoh notation, constant time is also called O(1). So, accessing an element in an array is O(1) in terms of time complexity. If you are not aware of bigoh notation, check the description of this video for a tutorial on time complexity analysis. Now, in a linked list, data is not stored in a contiguous block of memory. So, if we have a linked list something like this, let's say we have a linked list of integers here, then we have multiple blocks of memory at different addresses. Each block in the linked list is called a node and each node has two fields, one to store the data and one to store the address of the next node. So, we call the second field, the link field. The only information that we keep with us about a linked list is the address of the first node which is also called the head node. And this is what we keep passing to all the functions also, the address of the head node.To access an element in the linked list at a particular position, we first need to start at the head node or the first node, then we go to the second node and see the address of the third node. In the worst case, to access the last element in the list, we will be traversing all the elements in the list. In the average case, we will be accessing the middle element may be. So, if n is the size of he linked list, n is the number of elements in the linked list, then we will traverse n/2 elements. So, the time taken in the average case also is proportional to the number of elements in the linked list. So, we can say that the time complexity in average case is O(n).So, on this parameter, cost of accessing an element, array scores heavily over linked list. So iif you have a requirement where you want to access elements in the list all the time, then definitely array is a better choice. Now, the second parameter than we want to talk about is memory requirement or memory usage. with an array, we need to know the size of the array before creating it, because arrays is created as one contiguous clock of memory. So, array is of fixed size. What we typically do is create, we create a large enough array and some part of the array stores our list and some part of the array is vacant or empty so that we can add more elements in the list. For example, we have an array of 7 integers here and we have only 3 integers in the list. Rest 4 positions are unused. There would be some garbage value there. With linked list, lets say we have, let's say we have this linked list of integers, there is no unused memory. We ask memory for one node at a time, so we do not keep any reserved space. But we use extra memory for pointer variables and this extra memory requirement for a pointer variable in a linked list can not be ignored. In a typical architecture let's say, integer is stored in 4 bytes and pointer variable also takes 4 bytes. So, if you see, the memory requirement for this array of 7 integers is 28 bytes. And the memory requirement for this linked list would be 8*3, where 8 is the size of each node, 4 for integer and 4 bytes for the pointer variable. So, this is also 24 bytes. If we add one more element to the list in the array, we will just use one more position, while in linked list we will create one more node, and will take another 8 bytes, so this will be 32 bytes. Linked list would fetch us a lot of advantage if the data, the data part is large in size. So, in this case, we had a linked list if integers, so integer is only 4 bytes. What if we had a linked list in which the data part was some complex type that took 16 bytes. So, 4 bytes for the link and 16 bytes for the data, each node would have been 20 bytes. An array of 7 elements for 16 bytes of data would be, 16 byte for each element would be 112 bytes. And linked list of 4 would be only 80 bytes. So, it all depends. If the data part of a list takes a lot of memory, linked list will definitely consume lot less memory. Otherwise, it depends what strategy we are choosing to decide the size of the array. At any time how much array we keep unused. Now, one more point with memory allocation, because arrays are created as one contiguous block of memory, sometimes when we may want to create a really really large array, then may be memory may not be available as one large block, but if we are using linked list, memory may be available as multiple small blocks. So, we will have this problem of fragmentation in the memory. Sometimes, we may get many small units of memory, but we may not get one large block of memory. This may be a rare phenomenon, but this is a possibility. So, this is also where linked list scores. Because arrays have fixed size, once array gets filled and we need more memory, then there is no other option than to create a new array of larger size and copy the content from the previous array into the new array. So, this is also one cost which is not there with linked list. So, we need to keep these constraints and these requirements in mind when we want to decide for one of these data structures for our requirement. Now, the third parameter that we want to talk about is cost of inserting an element in the list. Remember when we are talking about arrays here, we are also talking about the possible use of array as dynamic list. So, there can be 3 scenarios in insertion. First scenario will be when we want to insert an element at the beginning of the list. Let's see we want to insert number 3 at the beginning of the list. In the case of arrays, we will have to shift each element by one position towards the higher index. So, the time taken will be proportional to the size of the list. So, this will be O(n). Let's say n is the size of the list. This will be O(n) in terms of time complexity. In the case of linked list, inserting a node in the beginning will mean only creating a new node and adjusting the head pointer and the link of this new node. So, the time taken will not depend upon the size of the list, it will be constant. So, for linked list, inserting an element at the beginning is O(1) in terms of time complexity. Inserting an element at end for an array, let's say we are talking about dynamic array, a dynamic list in which we create a new array if it gets filled. If there is space in the array, we just write to the next higher index of the list. So, it will be constant time. So, time complexity is O(1) if array is not full. If array is full, we will have to create a new array and copy all the previous content into new array which will take O(n) time where n is the size of the list. In the case of linked list, adding an element, inserting an element in the end will mean traversing the whole list and then creating a new node and adjusting the links. So, time taken will be proportional to n. I will use this color coding for linked list. Here n is the number of elements in the list. Now, the third case will be when we want to insert in the middle of the list at soem nth position or may be some ith position. Again in the case of arrays, we will have to shift elements. For the average case, we may want to insert at the mid position in the array. So, will have to shift n/2 where n is the number of elements in the list. So, the time taken is definitely proprotional to n in average case. So, complexity will be O(n). For linked list also we will have to traverse till that position and then only we can adjust the links. Even though we will not have any shifting, we will have to traverse till that point and in the average case, time taken will be proportional to n and the time complexity will be O(n). If you see , deleting an element will also have these 3 sceanrios, and the time comeplxity for deleting for these 3 sceanrios will also be the same. And the final point, the final parameter that I want to talk about is which one is easy to use and implement. An array definitely is a lot easier to use. Linked list implemetation especially in Cor C++ is more prone to errors like segmentation fault and memory leaks. It takes good care to work with linked lists. So, this was arrays vs linked lists. In our next lesson, we will implement linked list in C or C++. We will get our hands dirty with some real code. So this is it for this lesson. Thanks for Watching !
