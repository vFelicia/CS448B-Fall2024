With timestamps:

00:00 - In our previous lesson, we saw how we can
implement queue
00:03 - using arrays. Now, In this lesson we'll
see how we can implement queue
00:08 - using linked list. Queue as we know from our
previous discussions is a structure
00:13 - in which whatever goes in first comes out
first.
00:16 - Queue data strucuture is a list or
collection with this
00:20 - restriction that insertion can be
performed at one end
00:24 - and deletion can be performed at other
end.
00:27 - These are typical operations that we
defined with Queue.
00:30 - An insertion is called enqueue
operation and
00:33 - a deletion is called dequeue. Front operation
front function
00:38 - should simply return the element at
front of list and isempty
00:42 - should check whether queue is empty or
not
00:45 - and all these operations must a constant
time. There time complexity should be
00:49 - O(1). When we were implementing
queue
00:53 - with arrays, we used the idea of 
circular array to implement Queue.
00:57 - Then in this case we have a limitation.
The limitation is that
01:01 - arary will always have a fixed size and
once all the positions in the array are
01:06 - taken
01:07 - once study is exhausted, we have two
options we can either deny insertion
01:12 - so we can say that the queue is full and
we cannot insert anything now,
01:17 - or what we can do is we can create a new
larger array
01:20 - and copy elements from previous array
to the new larger array,
01:25 - which will be a costly process. We can
avoid this problem if
01:29 - people use linked list to implement Queue.
01:33 - Please note that this represantaion
of circular array that i'm showing here
01:37 - is only a logical way of looking at
array. We can show this array
01:42 - like this also. As i was saying in an array
implementation, we will have this question
01:47 - what if array gets filled and we need to
take care of this.
01:50 - We can either say queue is full, or we can
create a new larger array and
01:55 - copy elements from previous filled
array into new larger array.
01:58 - The time taken for this copy operation
will be proportional to number of
02:02 - elements in filled array, or in other words
we can say that the time complexity of
02:07 - this copy operation will be
02:09 - O(N). There is another problem the array
implementation.
02:12 - We can have a large enough array and Queue
may not be using most of it.
02:17 - Like right now, in this array
90% of memory
02:21 - is unused. Memory is an important
resource and
02:24 - we should always avoid blocking memory
unnecessarily. It's not that some amount
02:28 - of unused memory will be real problem
02:31 - in a modern-day machine. It's just that
while designing solutions and
02:35 - algorithms,
02:36 - we should analyze and understand these
implications.
02:39 - Let's now see how good we will be with
are linked list implementation.
02:44 - I have drawn logical view of a linked
list of integers here.
02:47 - Coming back to basic definition of Queue.
As we know,
02:51 - a queue is list or collection with
this constraint with this property,
02:55 - that an element must always be inserted
02:58 - from one side of the queue that we
call the rear of
03:01 - queue and an element must always be
removed
03:05 - from the other side that we call the
front of Queue.
03:08 - It's really easy to enforce this
property in a linked list.
03:12 - A linked list as we know is a
collection of
03:16 - entities that we call nodes, and this nodes
are stored at non-contiguous locations
03:22 - in memory.
03:23 - Each node contains two fields, one to 
store data and another to store
03:27 - address of the next node or
reference to the next node.
03:31 - Let's assume that nodes in this figure
are at addresses 100 200 300 respectively.
03:37 - I have also filled in the address fields.
The identity of linked list
03:42 - that we always keep with us, is address
of the head node.
03:45 - We often named a pointer or reference
variable at which store this address
03:49 - head. Okay so now we are saying that we
want to use linked list
03:54 - to implement queue. These are the typical
operations that we define with
03:58 - a Queue. We can use a linked list like a
queue.
04:01 - We can pick one side for insertion or
enqueue operation.
04:05 - So node in the linked list must
always be inserted from this side.
04:09 - The other side will then be used for dequeue.
So if we are picking head side for enqueue
04:15 - operation,
04:15 - a dequeue must always happen from Tail, if
they are picking
04:19 - tail for equeue operation then dequeue
must always happen
04:23 - from head. Whatever side we're picking
for whatever operation
04:26 - we need to be taking care of one
requirement and
04:30 - then the requirement is that, these operations
must a constant time,
04:33 - or in other words that there time
complexity must be
04:37 - O(1). As we know from our
previous lessons the cost of insertion
04:41 - or removal from head side is
04:45 - O(1), but the cost of insertion
04:48 - or removal from tail side is
04:52 - O(N). So here's the deal, In a normal
implementation of linked list
04:57 - if we will insert at one side and
remove from other side
05:01 - then one of these operations enqueue or dequeue ,
05:04 - depending on how we are picking the
side, will cost us
05:08 - O(N),but the requirement that we
have this that
05:12 - both these operations must take constant
time. So we definitely need to do
05:16 - something.
05:17 - To make sure that both enqueue and dequeue
operations take constant time,
05:21 - let's call the side front and this side
05:24 - rear. So I want to enqueue a node from
this side and I want a dequeue from
05:29 - this side.
05:30 - We a good for dequeue operation because
05:33 - removal from front will take constant
time, but insertion or enqueue operation
05:38 - will be O(N). Let's first see why
insertion at tail will be costly
05:43 - and then maybe we can try to do
something. To insert at
05:47 - rear end what we will have to do is, first
we will have to create a node.
05:50 - We have a new node here. Let's say I've
got this node at address
05:54 - 350 and integer that i want to enqueue
05:58 - is 7. The address part of this node
can be set
06:01 - as null. Now what we need to do is we
need to build this link.
06:06 - We need to set the address part of the
last node as address of
06:10 - this newly created node, and to do so
we first need to have a pointer
06:15 - pointing to this last node storing the
address of this last node.
06:19 - In a linked list the only identity that
we always keep with us is address of the
06:23 - head node.
06:24 - To get appointed to any other node, we need
to start at head.
06:28 - So we will first create a pointer Temp and
we will initially set it
06:33 - to head, and Now in one step we can move
06:37 - this pointer variable to the next of
whatever node it is pointing to its
06:40 - pointing to.
06:41 - We use a statement like temp=temp->next 
to move to the next node.
06:46 - So from first node we will go to the
second node and then from second
06:50 - we will go to the third node. In this
example, third node is the
06:53 - rear node,
06:54 - and now using this pointer temp we can
write the address part of this node and
06:59 - build
06:59 - this link.
07:03 - This whole traversal that we are
having to get a pointer from
07:06 - head to tail is what's taking all the
time.
07:10 - What we can do is we can avoid this whole
traversal. We can have pointer
07:14 - variable
07:14 - just like head that should all the store
the address of
07:18 - rear node. I can call this variable tail
07:21 - or the rear. Let's call this rear and
let's call this variable that is storing
07:26 - the address of head node
07:28 - Front. In any insertion or removal
07:31 - and we will have to update both front
and rear now.
07:35 - But now when we will enqueue. Let's say I've
got
07:38 - node at address 450 and I
want to insert this
07:42 - node at rear end. Now using the rear pointer
we can
07:46 - update to address field here. So we are
building this link
07:50 - and now we can update rear. We will only
have to modify some
07:54 - address fields and time taken for
enqueue operation
07:58 - will not depend upon number of nodes in the
linked list.
08:01 - So now with this design, both to enqueue
and dequeue operations
08:05 - will be constant time operations. The time
complexity
08:08 - for both will be O(1). Let's quickly
see how real code 
08:13 - in C will  look like for this design. I have
declared node as
08:17 - a structure with two fields, one to
store data and another to store address
08:22 - of next node
08:23 - and now instead of declaring a pointer
variable
08:26 - named head, a pointer to node named head
08:29 - I am declaring two pointers, a pointer to
node
08:32 - named front and another pointer to node
named rear
08:36 - and initially I'm setting them both as
null. Let's say i'm defining these two variable in
08:41 - global scope,
08:42 - so they will be accessible to all
functions. My enqueue function will take an
08:47 - integer
08:47 - as argument. In this function, i'll first
create a node.
08:51 - I'll use malloc in C or a new operator in C++
08:55 - to create a node in what we call dynamic
memory. I'm pointing to the newly created
08:59 - node using this variable
09:00 - which is pointed to node named temp.
Now we can have two cases in insertion
09:05 - or enqueue operation.
09:07 - If there is no element in the queue, if
the queue is empty
09:10 - in this case both front and rear be
null. We will simply
09:14 - set both front and rear as address of
this new node
09:18 - being pointed to by temp and we will
09:22 - return or exit else we already
have pointer to rear node,
09:26 - we will first set the address part of
current rear
09:29 - as the address of this newly created
node and then we will modify the address and
09:34 - rear variable
09:34 - to make it point to this newly created
node.
09:38 - While writing all of this I'm assuming that
you are ready know how to implement a
09:42 - linked list.
09:43 - If you want to refresh your concepts, you
can check earlier lessons in the series
09:47 - or you can check the description of
this video for a link to lesson on
09:52 - linked list implementation in C or C++.
This code will be further the clear
09:56 - if I'll show things moving in
a simulation.
09:59 - Let's say, initially we have an empty queue
so both front and rear
10:03 - will be null. Null is only a macro for
10:06 - address Zero. At this stage let's say we are
making a call to enqueue function
10:11 - passing it number 2. Now let's go through the
enqueue function and see what will happen.
10:15 - First we will create a node. Data part
of this node will be set as
10:20 - 2 and address part initially will be set
as null.
10:23 - Let's say we got this node at address temp
at address 100, so a variable name
10:28 - temp is storing this address.
10:31 - This variable is pointing to the this node.
Right now front and rear are both
10:35 - null, so
10:36 - we will go inside is if condition and
simply set
10:40 - both front and rear as 100. When the
function will finish execution
10:45 - temp which is a local variable will be
cleared from the memory.
10:49 - After setting both front and rear as
address of this newly created node we are
10:54 - returning.
10:56 - So this is how the queue will look like
after first enqueue.
10:59 - Let's say we're making another call to
enqueue function at this stage
11:02 - passing number 4 as argument. Once again a
new node will be created.
11:07 - Let's say I got the new node at
address 200. This time queue
11:11 - is not empty so in this function we will
first go to this statement
11:14 - rear->next=temp, so they
will set the next part of this
11:19 - node at address 100 as the address of
the newly created node
11:23 - which is 200 so we will build
this link, and now they will store the
11:27 - address of the new rear node
11:29 - in this variable named rear. So this is
how my queue will look like after the
11:34 - second enqueue
11:35 - Let's do one more enqueue. Let's enqueue 6.
11:38 - Let's say we got our new node this time
at address
11:41 - 300. So this is how our queue will look
like
11:44 - Okay! Let's now write dequeue function. In dequeue
function,
11:48 - I'll first create a temporary pointer to
node in which
11:51 - i'll store the address of the current head
or current front
11:54 - Let's say for this example at this stage,
I'm making a call to dequeue function.
11:59 - We will have couple of cases in dequeue also.
12:02 - The queue could be empty so in this case we
can
12:05 - print an error message and return. In
case of empty queue
12:10 - front and rear will both be equal to null. 
12:13 - We can check one of these and we will be good. In the
case when front and rear will be
12:17 - equal. We will simply set both front and
rear
12:20 - as null. In all other cases we can simply
make
12:23 - front point to the next node. So
12:27 - we will simply do a 
front=front->next
12:30 - but why have the used this temporary
pointer to node
12:34 - why have I declare this temporary pointer
to node in this code.
12:37 - Well simply incrementing front will not
be good enough.
12:40 - In this example i am calling dequeue. I'm
first
12:44 - creating temp. let's walk through whatever
code i have written so far so
12:48 - in the first line i am creating temp and
then because queue
12:51 - it's not empty and there are more than
one element in the queue.
12:54 - I am setting front as address of the next
node
12:57 - so my queue is good now. All the links
are
13:00 - appropriately modified but this node which
was front
13:04 - previously is still in the memory.
Anything
13:07 - in dynamic memory has to be explicitly
freed.
13:10 - To free this node we will
use free function
13:14 - and to this free function we should be
passing address of the node, and that's
13:18 - why
13:18 - we had created temp. With this free the
node will be
13:22 - wiped off from memory.
13:25 - These are enqueue and dequeue operations for you
and if you can see there are simple
13:29 - statements in these functions.
13:30 - There are no loops so these functions
will take constant time.
13:34 - The time complexity will be O(1).
In the beginning of this lesson we
13:39 - had also discussed some limitations with
13:41 - array implementation like what if array gets
filled
13:44 - and that of unused memory. We do not have
these limitations in a linked list
13:49 - implementation.
13:50 - We're using some extra memory to store
address of
13:53 - next node but apart from that there is
know what a major disadvantage
13:58 - I'll stop here now. You can write rest of the
functions like
14:01 - front function, to look at the element at
front or isempty function to check
14:06 - whether
14:06 - queue is empty or not yourself. If you
want to get
14:10 - my source code then you can check the
description of this video for
14:13 - link. So thanks for watching.

Cleaned transcript:

In our previous lesson, we saw how we can implement queue using arrays. Now, In this lesson we'll see how we can implement queue using linked list. Queue as we know from our previous discussions is a structure in which whatever goes in first comes out first. Queue data strucuture is a list or collection with this restriction that insertion can be performed at one end and deletion can be performed at other end. These are typical operations that we defined with Queue. An insertion is called enqueue operation and a deletion is called dequeue. Front operation front function should simply return the element at front of list and isempty should check whether queue is empty or not and all these operations must a constant time. There time complexity should be O(1). When we were implementing queue with arrays, we used the idea of circular array to implement Queue. Then in this case we have a limitation. The limitation is that arary will always have a fixed size and once all the positions in the array are taken once study is exhausted, we have two options we can either deny insertion so we can say that the queue is full and we cannot insert anything now, or what we can do is we can create a new larger array and copy elements from previous array to the new larger array, which will be a costly process. We can avoid this problem if people use linked list to implement Queue. Please note that this represantaion of circular array that i'm showing here is only a logical way of looking at array. We can show this array like this also. As i was saying in an array implementation, we will have this question what if array gets filled and we need to take care of this. We can either say queue is full, or we can create a new larger array and copy elements from previous filled array into new larger array. The time taken for this copy operation will be proportional to number of elements in filled array, or in other words we can say that the time complexity of this copy operation will be O(N). There is another problem the array implementation. We can have a large enough array and Queue may not be using most of it. Like right now, in this array 90% of memory is unused. Memory is an important resource and we should always avoid blocking memory unnecessarily. It's not that some amount of unused memory will be real problem in a modernday machine. It's just that while designing solutions and algorithms, we should analyze and understand these implications. Let's now see how good we will be with are linked list implementation. I have drawn logical view of a linked list of integers here. Coming back to basic definition of Queue. As we know, a queue is list or collection with this constraint with this property, that an element must always be inserted from one side of the queue that we call the rear of queue and an element must always be removed from the other side that we call the front of Queue. It's really easy to enforce this property in a linked list. A linked list as we know is a collection of entities that we call nodes, and this nodes are stored at noncontiguous locations in memory. Each node contains two fields, one to store data and another to store address of the next node or reference to the next node. Let's assume that nodes in this figure are at addresses 100 200 300 respectively. I have also filled in the address fields. The identity of linked list that we always keep with us, is address of the head node. We often named a pointer or reference variable at which store this address head. Okay so now we are saying that we want to use linked list to implement queue. These are the typical operations that we define with a Queue. We can use a linked list like a queue. We can pick one side for insertion or enqueue operation. So node in the linked list must always be inserted from this side. The other side will then be used for dequeue. So if we are picking head side for enqueue operation, a dequeue must always happen from Tail, if they are picking tail for equeue operation then dequeue must always happen from head. Whatever side we're picking for whatever operation we need to be taking care of one requirement and then the requirement is that, these operations must a constant time, or in other words that there time complexity must be O(1). As we know from our previous lessons the cost of insertion or removal from head side is O(1), but the cost of insertion or removal from tail side is O(N). So here's the deal, In a normal implementation of linked list if we will insert at one side and remove from other side then one of these operations enqueue or dequeue , depending on how we are picking the side, will cost us O(N),but the requirement that we have this that both these operations must take constant time. So we definitely need to do something. To make sure that both enqueue and dequeue operations take constant time, let's call the side front and this side rear. So I want to enqueue a node from this side and I want a dequeue from this side. We a good for dequeue operation because removal from front will take constant time, but insertion or enqueue operation will be O(N). Let's first see why insertion at tail will be costly and then maybe we can try to do something. To insert at rear end what we will have to do is, first we will have to create a node. We have a new node here. Let's say I've got this node at address 350 and integer that i want to enqueue is 7. The address part of this node can be set as null. Now what we need to do is we need to build this link. We need to set the address part of the last node as address of this newly created node, and to do so we first need to have a pointer pointing to this last node storing the address of this last node. In a linked list the only identity that we always keep with us is address of the head node. To get appointed to any other node, we need to start at head. So we will first create a pointer Temp and we will initially set it to head, and Now in one step we can move this pointer variable to the next of whatever node it is pointing to its pointing to. We use a statement like temp=temp>next to move to the next node. So from first node we will go to the second node and then from second we will go to the third node. In this example, third node is the rear node, and now using this pointer temp we can write the address part of this node and build this link. This whole traversal that we are having to get a pointer from head to tail is what's taking all the time. What we can do is we can avoid this whole traversal. We can have pointer variable just like head that should all the store the address of rear node. I can call this variable tail or the rear. Let's call this rear and let's call this variable that is storing the address of head node Front. In any insertion or removal and we will have to update both front and rear now. But now when we will enqueue. Let's say I've got node at address 450 and I want to insert this node at rear end. Now using the rear pointer we can update to address field here. So we are building this link and now we can update rear. We will only have to modify some address fields and time taken for enqueue operation will not depend upon number of nodes in the linked list. So now with this design, both to enqueue and dequeue operations will be constant time operations. The time complexity for both will be O(1). Let's quickly see how real code in C will look like for this design. I have declared node as a structure with two fields, one to store data and another to store address of next node and now instead of declaring a pointer variable named head, a pointer to node named head I am declaring two pointers, a pointer to node named front and another pointer to node named rear and initially I'm setting them both as null. Let's say i'm defining these two variable in global scope, so they will be accessible to all functions. My enqueue function will take an integer as argument. In this function, i'll first create a node. I'll use malloc in C or a new operator in C++ to create a node in what we call dynamic memory. I'm pointing to the newly created node using this variable which is pointed to node named temp. Now we can have two cases in insertion or enqueue operation. If there is no element in the queue, if the queue is empty in this case both front and rear be null. We will simply set both front and rear as address of this new node being pointed to by temp and we will return or exit else we already have pointer to rear node, we will first set the address part of current rear as the address of this newly created node and then we will modify the address and rear variable to make it point to this newly created node. While writing all of this I'm assuming that you are ready know how to implement a linked list. If you want to refresh your concepts, you can check earlier lessons in the series or you can check the description of this video for a link to lesson on linked list implementation in C or C++. This code will be further the clear if I'll show things moving in a simulation. Let's say, initially we have an empty queue so both front and rear will be null. Null is only a macro for address Zero. At this stage let's say we are making a call to enqueue function passing it number 2. Now let's go through the enqueue function and see what will happen. First we will create a node. Data part of this node will be set as 2 and address part initially will be set as null. Let's say we got this node at address temp at address 100, so a variable name temp is storing this address. This variable is pointing to the this node. Right now front and rear are both null, so we will go inside is if condition and simply set both front and rear as 100. When the function will finish execution temp which is a local variable will be cleared from the memory. After setting both front and rear as address of this newly created node we are returning. So this is how the queue will look like after first enqueue. Let's say we're making another call to enqueue function at this stage passing number 4 as argument. Once again a new node will be created. Let's say I got the new node at address 200. This time queue is not empty so in this function we will first go to this statement rear>next=temp, so they will set the next part of this node at address 100 as the address of the newly created node which is 200 so we will build this link, and now they will store the address of the new rear node in this variable named rear. So this is how my queue will look like after the second enqueue Let's do one more enqueue. Let's enqueue 6. Let's say we got our new node this time at address 300. So this is how our queue will look like Okay! Let's now write dequeue function. In dequeue function, I'll first create a temporary pointer to node in which i'll store the address of the current head or current front Let's say for this example at this stage, I'm making a call to dequeue function. We will have couple of cases in dequeue also. The queue could be empty so in this case we can print an error message and return. In case of empty queue front and rear will both be equal to null. We can check one of these and we will be good. In the case when front and rear will be equal. We will simply set both front and rear as null. In all other cases we can simply make front point to the next node. So we will simply do a front=front>next but why have the used this temporary pointer to node why have I declare this temporary pointer to node in this code. Well simply incrementing front will not be good enough. In this example i am calling dequeue. I'm first creating temp. let's walk through whatever code i have written so far so in the first line i am creating temp and then because queue it's not empty and there are more than one element in the queue. I am setting front as address of the next node so my queue is good now. All the links are appropriately modified but this node which was front previously is still in the memory. Anything in dynamic memory has to be explicitly freed. To free this node we will use free function and to this free function we should be passing address of the node, and that's why we had created temp. With this free the node will be wiped off from memory. These are enqueue and dequeue operations for you and if you can see there are simple statements in these functions. There are no loops so these functions will take constant time. The time complexity will be O(1). In the beginning of this lesson we had also discussed some limitations with array implementation like what if array gets filled and that of unused memory. We do not have these limitations in a linked list implementation. We're using some extra memory to store address of next node but apart from that there is know what a major disadvantage I'll stop here now. You can write rest of the functions like front function, to look at the element at front or isempty function to check whether queue is empty or not yourself. If you want to get my source code then you can check the description of this video for link. So thanks for watching.
