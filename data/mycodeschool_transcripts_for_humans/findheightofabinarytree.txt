With timestamps:

00:00 - In this lesson, we're going to write code
to find height
00:03 - or what we can also call maximum depth
of
00:06 - a binary tree. We have already discussed
depth
00:09 - and height in our first introductory lesson
00:13 - on trees but I'll do a quick recap here.
First of all, I have drawn
00:17 - a binary tree here. I have not filled in any data 
the nodes.
00:21 - Data can be anything. Binary tree, as
we know is
00:24 - a tree in which each node can have
atmost 2 children.
00:27 - So a node can have 0 1 or 2
children.
00:31 - I'll just number these nodes so I can
refer to them.
00:34 - I'll say this root node is number one and
I'll go level by level from left to
00:39 - right, counting
00:40 - 2, 3, 4 and so on. Now height of a
tree
00:45 - is defined as number of edges in 
longest path
00:49 - from root to a leaf node.
00:53 - In this example tree, 4 6 7 8
and 9 are leaf nodes.
00:59 - A leaf node is a node with 0
children. Number of
01:02 - edges in longest path from root to a
leaf node
01:07 - is 3. For both 8 and 9 number of edges in
01:11 - path from root is 3. So
01:14 - height of the tree is 3. Actually
we can define height
01:18 - of a node in the tree as number of
01:21 - edges in longest path from that node
01:24 - to a leaf node, so height of a tree
basically is height of the root node.
01:29 - In this example tree, height of node 3
01:32 - is 1. Height of node 2 is 2 and
height of node 1
01:37 - is 3 and because this is the root
node, this is also the height of the tree.
01:42 - Height of leaf node would be 0,
so if a tree has only one node
01:48 - then the root node itself would be a
leaf node and so height of the tree
01:52 - would be 0. So this is definition
of height of
01:55 - a tree. We often also talk about depth
01:58 - and we often confused between depth and
height but these 2 are different properties.
02:04 - depth of a node is defined as number of
edges in path
02:08 - from root to that node. Basically,
02:13 - Depth is distance from root and height
02:16 - is distance from the best accessible
leaf node.
02:20 - For node 2 in this example tree, depth is
1 and height
02:24 - is 2. For node number 9 which is a
leaf node
02:27 - depth is 3 and height is 0. For
root node depth is 0
02:32 - and height is 3. Height of a tree
02:37 - would be equal to maximum depth of any
node in the tree
02:40 - so height and max depth, these two
terms are used for each other.
02:45 - Okay, let's now see how we can calculate
height
02:48 - or max depth of a binary tree.
02:51 - I'm going to write a function named FindHeight
02:56 - that will take a reference or address of root
node as argument
03:00 - and return me the height of the binary
tree.
03:03 - Now the logic to calculate how it can be
something like this.
03:07 - For any node, if we can somehow calculate
the height of its left subtree
03:11 - and also the height of its right subtree
then the height of that node would be
03:16 - greater of the heights of left and right
subtrees
03:20 - + 1. For the root node in this tree
03:23 - height of the left subtree is 2
03:27 - and height of the right subtree is 1,
03:30 - so height of the root node would be
greater of these 2 values
03:34 - + 1. + 1 for the edge
03:38 - connecting the root node to the subtree,
so
03:42 - height of the root node which would also
be the height of the tree
03:45 - is 3 here. In our code,
03:49 - we can calculate height of left and
right subtrees
03:52 - using recursion. What I'll do here in
FingHeight function is,
03:56 - I'll first make a recursive call to find
height of the left subtree.
04:01 - We can say to find out if left subtree
04:04 - or to find height of left child both
will mean the same.
04:08 - I'm collecting the return of this recursive
call in a variable
04:12 - named left height and now I'll make
another recursive call
04:16 - to calculate height of right subtree
or right child.
04:20 - Now height of the tree or height of
whatever node for which we have
04:24 - made this function call would be greater of
these 2 values,
04:28 - Left height and right height + 1.
04:31 - Now there is only one more thing missing
in this recursion. We need to write the base
04:35 - or
04:36 - exit condition. We cannot go into the
recursion infinitely.
04:40 - What we can do is we can go on until we
make our to recursive call
04:44 - with root equal null and if the root
is null that is if the tree or sub tree
04:50 - is empty, we can return something.
04:53 - What should be done here. Give this some
thought.
04:56 - If I have made a call to find height of
let's say this leaf node this node
05:01 - with number 7 then for this guy both
left and right children are null.
05:06 - In call for this node number 7, we
will make two recursive calls
05:10 - passing null in both the call, so what
should we return.
05:14 - Should we return 0. If these 2 calls
will return 0
05:19 - then height of 7 will be 1.
05:22 - Because in the return statement here, we're
saying max of left and right height
05:26 - + 1. But as we had discussed earlier,
height of
05:30 - a leaf node should be 0. So if we are
returning 0
05:34 - for root equal null, it's not alright. What we
can do is, we can to return -1.
05:39 - When we are returning -1 then this edge
to null
05:44 - that does not exist but still
05:47 - was getting counted will be balanced
with this -1.
05:51 - I hope this is making sense and going by
convention also height of an empty tree
05:57 - is set to be -1.
06:00 - So this is pseudo code for my function
to find height of
06:03 - a binary tree. Some people define height
as number of node
06:07 - in longest path from root to a leaf node.
We are counting edges here
06:11 - and this is the right definition. If you
want to count number of nodes
06:16 - then for a leaf node height would be 1
06:19 - and for empty tree height would be 0.
So all you need to do is return 0 here,
06:24 - and this is the code if you want to
contact number of nodes
06:28 - but I think the right definition is number of
edges so I'll
06:32 - return -1 here. Time complexity of this
function is
06:36 - O(N) where N is number of
nodes in the tree.
06:40 - We will make one recursive call
corresponding to each node in the tree,
06:44 - so we're kind of visiting each node in
the tree once
06:47 - and so running time will be
proportional to number of nodes.
06:51 - I'll skip the detailed analysis of running
time in this lesson.
06:54 - This is what my FineHeight function will
look like inn C or C++. 
06:59 - Max here is a function that the return
greater of two values passed to it as
07:04 - arguments.
07:05 - So this is it for this lesson. Thanks for
watching.

Cleaned transcript:

In this lesson, we're going to write code to find height or what we can also call maximum depth of a binary tree. We have already discussed depth and height in our first introductory lesson on trees but I'll do a quick recap here. First of all, I have drawn a binary tree here. I have not filled in any data the nodes. Data can be anything. Binary tree, as we know is a tree in which each node can have atmost 2 children. So a node can have 0 1 or 2 children. I'll just number these nodes so I can refer to them. I'll say this root node is number one and I'll go level by level from left to right, counting 2, 3, 4 and so on. Now height of a tree is defined as number of edges in longest path from root to a leaf node. In this example tree, 4 6 7 8 and 9 are leaf nodes. A leaf node is a node with 0 children. Number of edges in longest path from root to a leaf node is 3. For both 8 and 9 number of edges in path from root is 3. So height of the tree is 3. Actually we can define height of a node in the tree as number of edges in longest path from that node to a leaf node, so height of a tree basically is height of the root node. In this example tree, height of node 3 is 1. Height of node 2 is 2 and height of node 1 is 3 and because this is the root node, this is also the height of the tree. Height of leaf node would be 0, so if a tree has only one node then the root node itself would be a leaf node and so height of the tree would be 0. So this is definition of height of a tree. We often also talk about depth and we often confused between depth and height but these 2 are different properties. depth of a node is defined as number of edges in path from root to that node. Basically, Depth is distance from root and height is distance from the best accessible leaf node. For node 2 in this example tree, depth is 1 and height is 2. For node number 9 which is a leaf node depth is 3 and height is 0. For root node depth is 0 and height is 3. Height of a tree would be equal to maximum depth of any node in the tree so height and max depth, these two terms are used for each other. Okay, let's now see how we can calculate height or max depth of a binary tree. I'm going to write a function named FindHeight that will take a reference or address of root node as argument and return me the height of the binary tree. Now the logic to calculate how it can be something like this. For any node, if we can somehow calculate the height of its left subtree and also the height of its right subtree then the height of that node would be greater of the heights of left and right subtrees + 1. For the root node in this tree height of the left subtree is 2 and height of the right subtree is 1, so height of the root node would be greater of these 2 values + 1. + 1 for the edge connecting the root node to the subtree, so height of the root node which would also be the height of the tree is 3 here. In our code, we can calculate height of left and right subtrees using recursion. What I'll do here in FingHeight function is, I'll first make a recursive call to find height of the left subtree. We can say to find out if left subtree or to find height of left child both will mean the same. I'm collecting the return of this recursive call in a variable named left height and now I'll make another recursive call to calculate height of right subtree or right child. Now height of the tree or height of whatever node for which we have made this function call would be greater of these 2 values, Left height and right height + 1. Now there is only one more thing missing in this recursion. We need to write the base or exit condition. We cannot go into the recursion infinitely. What we can do is we can go on until we make our to recursive call with root equal null and if the root is null that is if the tree or sub tree is empty, we can return something. What should be done here. Give this some thought. If I have made a call to find height of let's say this leaf node this node with number 7 then for this guy both left and right children are null. In call for this node number 7, we will make two recursive calls passing null in both the call, so what should we return. Should we return 0. If these 2 calls will return 0 then height of 7 will be 1. Because in the return statement here, we're saying max of left and right height + 1. But as we had discussed earlier, height of a leaf node should be 0. So if we are returning 0 for root equal null, it's not alright. What we can do is, we can to return 1. When we are returning 1 then this edge to null that does not exist but still was getting counted will be balanced with this 1. I hope this is making sense and going by convention also height of an empty tree is set to be 1. So this is pseudo code for my function to find height of a binary tree. Some people define height as number of node in longest path from root to a leaf node. We are counting edges here and this is the right definition. If you want to count number of nodes then for a leaf node height would be 1 and for empty tree height would be 0. So all you need to do is return 0 here, and this is the code if you want to contact number of nodes but I think the right definition is number of edges so I'll return 1 here. Time complexity of this function is O(N) where N is number of nodes in the tree. We will make one recursive call corresponding to each node in the tree, so we're kind of visiting each node in the tree once and so running time will be proportional to number of nodes. I'll skip the detailed analysis of running time in this lesson. This is what my FineHeight function will look like inn C or C++. Max here is a function that the return greater of two values passed to it as arguments. So this is it for this lesson. Thanks for watching.
