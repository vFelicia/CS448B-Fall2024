With timestamps:

00:00 - Hello everyone. In this lesson we're
going to talk about one important and
00:04 - really interesting topic in computer
science where we find application of
00:08 - stack data structure,
00:09 - and this topic is evaluation of arithmetic
and logical expressions.
00:14 - So how do we write an expression. I have
written some simple arithmetic
00:19 - expressions here.
00:20 - An expression can have constants,
variables
00:23 - and symbols that can be operators or
00:26 - paranthesis and all these components
must be arranged
00:30 - according to a set of rules, according to
up grammer
00:34 - and we should be able to parse and
evaluate expression according to this
00:38 - grammer
00:39 - All these expressions that I had written
here have
00:42 - a common structure. We have an operator
in between two operands.
00:47 - Operand by definition is an object or
value on which operation is performed.
00:52 - In this expression 2+3, 2 and 3
are operands
00:56 - and plus is operator, in the next
expression
00:59 - A and B are operands and - is operator,
01:03 - in the third expression this asterisk is
for multiplication operation so
01:08 - so this is operator the first operand
01:11 - P is a variable and a second operand 2
01:15 - is a constant. This is the most common way
of writing an expression,
01:19 - but this is not the only way. This way of
writing an expression in which we write
01:24 - an operator in between operands is
called
01:27 - infix notation. Operand doesn't always have
to be a constant or variable.
01:32 - Operand can be an expression itself. In
this fourth expression that I have written
01:37 - here,
01:37 - one of the operands of multiplication
operator is an expression
01:42 - itself, another operand is a constant
We can have a further complex expression.
01:47 - In this fifth expression that I have
written here both the operands of
01:50 - multiplication operator
01:52 - are expressions. We have three operators
in this expression here,
01:56 - for this first plus operator P and Q these
01:59 - variables P and Q are operands, for the
second
02:04 - plus operator we have R and S and for
this multiplication operator
02:09 - the first operand is this expression
P + Q and the second operand
02:14 - this expression R + S. While
evaluating
02:18 - expressions but multiple operators,
operations will have to be performed in
02:22 - certain order
02:23 - like in the fourth example we will first
have to perform
02:26 - addition and then only we can perform
multiplication. In this fifth expression
02:31 - first we will have to perform these two
additions and then we can perform the
02:35 - multiplication.
02:36 - We will come back to evaluation but if
you can see in all these expressions
02:40 - operator is placed in between operands.
02:43 - This is the syntax that we are following.
One thing that I must point out here.
02:48 - Throughout this lesson, we're going to
talk only about binary operators.
02:52 - An operator that require exactly two
operands is called
02:56 - a binary operator. Technically we can
have an operator that may require
03:00 - just one operand or maybe more than two
operands but we're talking only about
03:04 - expressions with
03:05 - binary operators. Okay so let's now see
what are the rules we need to apply to
03:10 - evaluate such expressions written in this
syntax that we are calling
03:14 - infix notation. For an expression with
03:17 - just one operator there's no problem we
can simply apply that operator.
03:21 - For an expression with multiple
operators and
03:24 - no parenthesis like this, we need to
decide an order
03:28 - in which operator should be applied. In
this expression
03:31 - if we will perform the addition
first then this expression
03:35 - will reduced to 10 * 2 and will
finally evaluate
03:40 - as 20 but if we will perform the
multiplication first
03:44 - then this expression will reduce to 
03:47 - 4 + 12 and would finally evaluate to
03:51 - 16. So basically, we can look at this
expression in two ways.
03:55 - We can say that operands for addition
operator are 4 and 6
03:59 - and operands for multiplication are
this expression 4 + 6
04:04 - and this constant 2 or we can say that
all operands for multiplication are 6
04:09 - and 2 and operands for addition
operation are four and this expression 
04:15 - 6 * 2.
04:16 - There is some ambiguity here but if you
remember your high school mathematics
04:20 - this problem is the resolved by
following operator precedence rules
04:25 - In an algebraic expression this is the
precedence that we follow.
04:29 - First preference is given to
paranthesis or brackets,
04:32 - next preference is given to exponents.
I'm using this symbol for exponent
04:37 - operator so if I have to write
04:39 - 2^3, I'll be writing it
something like this.
04:43 - In case of multiple exponentiation
operator,
04:46 - we apply the operators from right to left,
04:49 - so if I have something like this then
first
04:52 - this right most exponentiation operator will
be applied.
04:56 - So this will reduce to 512.
05:00 - If you will apply the left operator
first, then this will evaluate to 64.
05:04 - After exponents, next preference is given
to multiplication and division
05:08 - and if it's between multiplication and
division operators then
05:12 - we should go from left to right. After
multiplication and division we have
05:16 - addition and subtraction
05:18 - and here also we go from left to right. If
we have an expression like this
05:22 - with just addition and subtraction
operators, then we will apply
05:26 - leftmost operator first
05:28 - because to precedence of these operators
is same and this will evaluate to 3.
05:33 - If you will apply the plus operator first this
will evaluate
05:36 - as 1 and that will be wrong.
05:39 - In the second expression 4 + 6 * 2
that I had written here
05:42 - if we will apply operator precedence
then multiplication should be performed
05:47 - first,
05:47 - if we want to perform addition first
then we need to write this
05:51 - 4 + 6 within parenthesis and
now adddition will be performed first
05:56 - because
05:56 - precedence of parenthesis is greater.
I'll example of another complex
06:01 - expression and try to evaluate it,
06:03 - just to make things further clear. So I have an
expression here. In this expression we
06:07 - have four operators
06:09 - one multiplication and one division one
subtraction and one
06:12 - addition. Multiplication and division
have higher precedence
06:15 - between these two multiplication and
division
06:19 - which have seen precedence, we will pick
the left one first.
06:22 - So we will first reduced this expression
like this and now we will perform the
06:27 - division
06:27 - and now we have only subtraction and
addition.
06:31 - So we will go from left to right and this
is what we will finally get.
06:35 - This right to left and left to right
rule that i have wriiten here
06:38 - for operators with equal precedence is
better termed as operator associativity.
06:44 - If in case of multiple operators with
equal
06:47 - precedence we go from left to right then
we say that operators are
06:51 - left associative and if we go from right
to left
06:55 - we say that operators are right
associative.
06:58 - While evaluating an expression in infix
form, we first need to look at
07:02 - precedence
07:03 - and then to resolve conflict among
operator with equal precedence,
07:07 - we need to see associativity. All in all
you need to do so many things just to
07:12 - parse and evaluate an
07:14 - infix expression. The use of parenthesis
becomes really important
07:17 - because that's how we can control to
order in which operation should be
07:21 - performed.
07:22 - Paranthesis add explicit intent that
operations should be performed in this
07:26 - order
07:27 - and also improved readability of
expression.
07:30 - I have modified this third expression, we
have some parenthesis here now,
07:34 - and most often we write infix
expressions like this only
07:38 - using a lot of paranthesis. Even
though infix notation is the most common
07:44 - way of writing expressions.
07:45 - It's not very easy to parse and evaluate
an infix expression without ambiguity,
07:50 - so mathematicians and logicians studied
this problem
07:54 - and came up with 2 other ways of writing
expressions
07:57 - that are paranthesis free and can be passed
without ambiguity
08:02 - without requiring to take care of any of
these operator precedence or
08:06 - associativity rules,
08:07 - and these two ways are postfix and prefix
notations.
08:11 - Prefix notation was proposed earlier
08:14 - in your 1924 by Polish logician.
08:18 - Prefix notation is also known as polish
notation.
08:21 - In prefix notation, operator is placed
before
08:25 - operands. This expression 2 + 3 in
08:28 - infix will be written as + 2 3
in prefix.
08:32 - Plus operator will be placed before the
two operands 
08:35 - 2 and 3. P - Q will be written as
08:39 - - P Q. Once again just like infix notation,
operand in prefix notation
08:43 - doesn't always have to be a
constant and variable,
08:47 - operand can be a complex prefix
notation itself.
08:51 - This expression A + B * C in
infix form
08:55 - will be written like this in prefix form.
I'll come back to how we can convert
09:00 - infix expression to prefix.
09:01 - First have a look at the third
expression in prefix form,
09:04 - for this multiplication operator the 2
operands are
09:08 - variables B and C and the three elements
are in prefix syntax.
09:13 - First we have to operater and then we
have the two operands. The operands for
09:17 - addition operator are variable A
and this prefix expression 
09:22 - asterisk B C. In infix expression, we need
to use parenthesis because
09:27 - and operands can possibly be associated
with
09:31 - 2 operators, like in this third
expression in infix form B can be
09:35 - associated with
09:36 - both plus and multiplication.
09:39 - To resolve this conflict we need to use
operator precedence and associativity
09:44 - rules,
09:45 - or use parenthesis to explicitly
specify
09:48 - association but in prefix form and also
in Postfix form that we will discuss in
09:54 - some time.
09:55 - An operand can be associated with only one
operator
09:58 - so we do not have this ambiguity, while
parsing and evaluating
10:02 - prefix and postfix expressions we do not
need extra information
10:07 - we do not need all the operator
precedence and associativity rules.
10:11 - I'll come back to how we can evaluate
prefix notation. I'll first define postfix
10:15 - notation.
10:17 - Postfix notation is also known as
reverse polish notation.
10:21 - This syntax was proposed in 1950s
by some computer scientists.
10:25 - In postfix notation operator is placed
after operands.
10:29 - Programmatically, postfix expression is
easiest to
10:33 - parse and least costly in terms of time
and memory
10:36 - to evaluate, and that's why this was
actually invented.
10:40 - Prefix expression can also be evaluated
in similar time and memory
10:44 - but the algorithm to parse  and evaluate
postfix expression is
10:49 - really straightforward and intuitive and
that's why its preferred for computation
10:54 - using machines.
10:55 - I'm going to write postfix for these
expressions that had written earlier
10:59 - in other forms this first expression
11:02 - 2 + 3 in Postfix will be 2 3 +.
11:06 - Two separate the operands we can use a
space or some other delimiter
11:10 - like a comma, that's how you would
typically store prefix or postfix
11:15 - in a string When you'll have to write a
program.
11:19 - this second expression in postfix will
be P Q -.
11:23 - So as you can see in Postfix form we are
placing the operator
11:27 - after the operands. This third expression in
Postfix will be
11:31 - A B C * and then +.
11:34 - For this multiplication operator, operands
are variables B and C
11:39 - and for this edition, operands are
11:42 - variable A and this postfix
expression B C *.
11:48 - We will see efficient algorithms to
convert infix to prefix or postfix
11:53 - in later lessons. For now let's not
bother how we will do
11:56 - this in a program, let's quickly see how
we can do this manually.
12:00 - To convert an expression from infix to
any of these other two forms,
12:04 - we need to go step-by-step just a way we
would go in evaluation
12:09 - I have picked this expression
A + B * C in
12:12 - infix form. We should first convert the
part that should be evaluated first,
12:17 - so we should go in order of precedence.
We can also first
12:21 - put all the implicit parenthesis. So here
we will first convert this B * C
12:27 - so first we are doing this conversion
for multiplication operator, and then
12:31 - we will do this conversion for addition
operator.
12:34 - We will bring addition to the front, so
this is how the
12:38 - expression will transform. We can use
parenthesis and
12:41 - in intermediate steps and once we had
done that all the steps
12:46 - we can erased a parenthesis.
12:49 - Let's now do the same thing for postfix,
we will first do the conversion for
12:54 - multiplication operator and then in next
step
12:58 - we will do it for addition and now
we can get rid of
13:02 - all the parenthesis. Parenthesis
13:05 - surely adds readability to any of these
expressions
13:09 - to any of these forms but if we are not
bothered about human readability,
13:13 - then for a machine we are actually
saving some memory
13:17 - that would be used to store
paranthesis information.
13:20 - Infix expression definitely is most
human readable,
13:23 - but we prefix and postfix are good for
machines.
13:27 - So this is infix, prefix and postfix
notation for you.
13:30 - In next lesson, we will discuss
evaluation of prefix and postfix
13:34 - Notations.
13:35 - This is it for this lesson. 
Thanks for watching.

Cleaned transcript:

Hello everyone. In this lesson we're going to talk about one important and really interesting topic in computer science where we find application of stack data structure, and this topic is evaluation of arithmetic and logical expressions. So how do we write an expression. I have written some simple arithmetic expressions here. An expression can have constants, variables and symbols that can be operators or paranthesis and all these components must be arranged according to a set of rules, according to up grammer and we should be able to parse and evaluate expression according to this grammer All these expressions that I had written here have a common structure. We have an operator in between two operands. Operand by definition is an object or value on which operation is performed. In this expression 2+3, 2 and 3 are operands and plus is operator, in the next expression A and B are operands and is operator, in the third expression this asterisk is for multiplication operation so so this is operator the first operand P is a variable and a second operand 2 is a constant. This is the most common way of writing an expression, but this is not the only way. This way of writing an expression in which we write an operator in between operands is called infix notation. Operand doesn't always have to be a constant or variable. Operand can be an expression itself. In this fourth expression that I have written here, one of the operands of multiplication operator is an expression itself, another operand is a constant We can have a further complex expression. In this fifth expression that I have written here both the operands of multiplication operator are expressions. We have three operators in this expression here, for this first plus operator P and Q these variables P and Q are operands, for the second plus operator we have R and S and for this multiplication operator the first operand is this expression P + Q and the second operand this expression R + S. While evaluating expressions but multiple operators, operations will have to be performed in certain order like in the fourth example we will first have to perform addition and then only we can perform multiplication. In this fifth expression first we will have to perform these two additions and then we can perform the multiplication. We will come back to evaluation but if you can see in all these expressions operator is placed in between operands. This is the syntax that we are following. One thing that I must point out here. Throughout this lesson, we're going to talk only about binary operators. An operator that require exactly two operands is called a binary operator. Technically we can have an operator that may require just one operand or maybe more than two operands but we're talking only about expressions with binary operators. Okay so let's now see what are the rules we need to apply to evaluate such expressions written in this syntax that we are calling infix notation. For an expression with just one operator there's no problem we can simply apply that operator. For an expression with multiple operators and no parenthesis like this, we need to decide an order in which operator should be applied. In this expression if we will perform the addition first then this expression will reduced to 10 * 2 and will finally evaluate as 20 but if we will perform the multiplication first then this expression will reduce to 4 + 12 and would finally evaluate to 16. So basically, we can look at this expression in two ways. We can say that operands for addition operator are 4 and 6 and operands for multiplication are this expression 4 + 6 and this constant 2 or we can say that all operands for multiplication are 6 and 2 and operands for addition operation are four and this expression 6 * 2. There is some ambiguity here but if you remember your high school mathematics this problem is the resolved by following operator precedence rules In an algebraic expression this is the precedence that we follow. First preference is given to paranthesis or brackets, next preference is given to exponents. I'm using this symbol for exponent operator so if I have to write 2^3, I'll be writing it something like this. In case of multiple exponentiation operator, we apply the operators from right to left, so if I have something like this then first this right most exponentiation operator will be applied. So this will reduce to 512. If you will apply the left operator first, then this will evaluate to 64. After exponents, next preference is given to multiplication and division and if it's between multiplication and division operators then we should go from left to right. After multiplication and division we have addition and subtraction and here also we go from left to right. If we have an expression like this with just addition and subtraction operators, then we will apply leftmost operator first because to precedence of these operators is same and this will evaluate to 3. If you will apply the plus operator first this will evaluate as 1 and that will be wrong. In the second expression 4 + 6 * 2 that I had written here if we will apply operator precedence then multiplication should be performed first, if we want to perform addition first then we need to write this 4 + 6 within parenthesis and now adddition will be performed first because precedence of parenthesis is greater. I'll example of another complex expression and try to evaluate it, just to make things further clear. So I have an expression here. In this expression we have four operators one multiplication and one division one subtraction and one addition. Multiplication and division have higher precedence between these two multiplication and division which have seen precedence, we will pick the left one first. So we will first reduced this expression like this and now we will perform the division and now we have only subtraction and addition. So we will go from left to right and this is what we will finally get. This right to left and left to right rule that i have wriiten here for operators with equal precedence is better termed as operator associativity. If in case of multiple operators with equal precedence we go from left to right then we say that operators are left associative and if we go from right to left we say that operators are right associative. While evaluating an expression in infix form, we first need to look at precedence and then to resolve conflict among operator with equal precedence, we need to see associativity. All in all you need to do so many things just to parse and evaluate an infix expression. The use of parenthesis becomes really important because that's how we can control to order in which operation should be performed. Paranthesis add explicit intent that operations should be performed in this order and also improved readability of expression. I have modified this third expression, we have some parenthesis here now, and most often we write infix expressions like this only using a lot of paranthesis. Even though infix notation is the most common way of writing expressions. It's not very easy to parse and evaluate an infix expression without ambiguity, so mathematicians and logicians studied this problem and came up with 2 other ways of writing expressions that are paranthesis free and can be passed without ambiguity without requiring to take care of any of these operator precedence or associativity rules, and these two ways are postfix and prefix notations. Prefix notation was proposed earlier in your 1924 by Polish logician. Prefix notation is also known as polish notation. In prefix notation, operator is placed before operands. This expression 2 + 3 in infix will be written as + 2 3 in prefix. Plus operator will be placed before the two operands 2 and 3. P Q will be written as P Q. Once again just like infix notation, operand in prefix notation doesn't always have to be a constant and variable, operand can be a complex prefix notation itself. This expression A + B * C in infix form will be written like this in prefix form. I'll come back to how we can convert infix expression to prefix. First have a look at the third expression in prefix form, for this multiplication operator the 2 operands are variables B and C and the three elements are in prefix syntax. First we have to operater and then we have the two operands. The operands for addition operator are variable A and this prefix expression asterisk B C. In infix expression, we need to use parenthesis because and operands can possibly be associated with 2 operators, like in this third expression in infix form B can be associated with both plus and multiplication. To resolve this conflict we need to use operator precedence and associativity rules, or use parenthesis to explicitly specify association but in prefix form and also in Postfix form that we will discuss in some time. An operand can be associated with only one operator so we do not have this ambiguity, while parsing and evaluating prefix and postfix expressions we do not need extra information we do not need all the operator precedence and associativity rules. I'll come back to how we can evaluate prefix notation. I'll first define postfix notation. Postfix notation is also known as reverse polish notation. This syntax was proposed in 1950s by some computer scientists. In postfix notation operator is placed after operands. Programmatically, postfix expression is easiest to parse and least costly in terms of time and memory to evaluate, and that's why this was actually invented. Prefix expression can also be evaluated in similar time and memory but the algorithm to parse and evaluate postfix expression is really straightforward and intuitive and that's why its preferred for computation using machines. I'm going to write postfix for these expressions that had written earlier in other forms this first expression 2 + 3 in Postfix will be 2 3 +. Two separate the operands we can use a space or some other delimiter like a comma, that's how you would typically store prefix or postfix in a string When you'll have to write a program. this second expression in postfix will be P Q . So as you can see in Postfix form we are placing the operator after the operands. This third expression in Postfix will be A B C * and then +. For this multiplication operator, operands are variables B and C and for this edition, operands are variable A and this postfix expression B C *. We will see efficient algorithms to convert infix to prefix or postfix in later lessons. For now let's not bother how we will do this in a program, let's quickly see how we can do this manually. To convert an expression from infix to any of these other two forms, we need to go stepbystep just a way we would go in evaluation I have picked this expression A + B * C in infix form. We should first convert the part that should be evaluated first, so we should go in order of precedence. We can also first put all the implicit parenthesis. So here we will first convert this B * C so first we are doing this conversion for multiplication operator, and then we will do this conversion for addition operator. We will bring addition to the front, so this is how the expression will transform. We can use parenthesis and in intermediate steps and once we had done that all the steps we can erased a parenthesis. Let's now do the same thing for postfix, we will first do the conversion for multiplication operator and then in next step we will do it for addition and now we can get rid of all the parenthesis. Parenthesis surely adds readability to any of these expressions to any of these forms but if we are not bothered about human readability, then for a machine we are actually saving some memory that would be used to store paranthesis information. Infix expression definitely is most human readable, but we prefix and postfix are good for machines. So this is infix, prefix and postfix notation for you. In next lesson, we will discuss evaluation of prefix and postfix Notations. This is it for this lesson. Thanks for watching.
