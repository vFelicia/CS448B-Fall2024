With timestamps:

00:00 - In our previous lesson in this series we
discussed and analyzed Merge sort algorithm
00:05 - Merge sort, as we saw is a recursive
algorithm in which we
00:09 - follow a divide-and-conquer strategy
the running time of
00:14 - Merge sort is O(nlogn)
00:17 - in worst case but Merge sort is not
00:20 - an in place sorting algorithm and in
place sorting algorithm takes constant amount
00:26 - of extra memory but the space complexity
of Merge sort
00:29 - is O(n) the extra memory
00:33 - requires disproportional to the number
of elements in a list
00:37 - that needs to be sorted now in this
lesson we will discuss
00:40 - and analyze quick sort which is
00:43 - another recursive algorithm where
we will follow
00:46 - a divide-and-conquer strategy time
complexity of Quick Sort algorithm
00:52 - is O(nlogn) in average case
00:56 - and it is O(n2) in worst
case
01:00 - but Quick Sort is an in place sorting
algorithm
01:04 - we take almost constant amount of extra
memory
01:07 - and despite having a worst case running
time of
01:10 - O(n2) Quick Sort is pretty
fast and
01:15 - efficient in practical scenarios the
worst-case running time of Quick Sort is
01:20 - almost always avoided by using what
we call
01:23 - a randomized version of Quick Sort
randomized quick sort gives us
01:28 - O(nlogn) running time with
very high probability
01:33 - Quick Sort is often the most practical choice
for
01:36 - an efficient sorting algorithm in fact
sort function given to us by most of
01:42 - the language libraries are
implementations of Quick Sort only
01:46 - so in this lesson we will discuss and
analyze Quick Sort algorithm
01:51 - once again I'll take a very simple
sorting scenario
01:54 - let's say we have a list of integers
given to us in the form of
01:58 - an array something like this i will name
this
02:01 - array A and we want to re-arrange this list
02:04 - in increasing order of the value of
integers
02:08 - now in Quick Sort what we do is
02:11 - we first select one of the elements
from the list
02:14 - and this can be any element in this
example here let's say we select
02:19 - number four now we call this selected
number
02:23 - pivot and now first we re-arrange the list
02:28 - such that all the elements lesser
than the pivot
02:32 - are towards the left of it and all the
elements
02:35 - greater than the pivot are towards the right 
of it something like
02:39 - this let's call this whole process
partitioning of a list
02:42 - so lets say partition
02:46 - is a process in which we select a pivot
and rearrange
02:49 - the list such that all the elements
lesser than the pivot are towards the
02:54 - left and all the elements
02:56 - greater than the pivot are towards the
right there can be
02:59 - more than one possible arrangements in
which elements lesser than the
03:03 - pivot will be towards the left and
elements greater than pivot
03:07 - will be towards the right for example
two one and three are lesser than the
03:12 - pivot
03:13 - in this example we could have had them in
order
03:17 - 3 2 1 or 1 2 3
03:20 - it doesn't really matter we can have
anyone such arrangement
03:24 - the only requirement is that all the
elements
03:28 - lesser than the pivot should be towards
the left and all the elements
03:32 - greater than the pivot should be 
towards right we have an efficient
03:36 - in place algorithm to partition a
list like this we can do so in constant
03:41 - amount of extra memory using only some
temporary variables
03:44 - we will come back to the partitioning
logic but let's first think about this
03:48 - once we have partitioned the array like
this we can break this problem
03:52 - into two sub-problems and the two
sub-problems will be
03:56 - sorting the segment of the array to the
left of the pivot
04:01 - and sorting the segment of the array to the
right of the pivot
04:05 - and this time alike merge sort we do
not need to
04:09 - create auxiliary arrays entirely new arrays and
copy
04:13 - the elements into these new arrays we
can work on the same arrays
04:17 - it's just that we will have to keep
track of the start and
04:21 - end index of the segments so if this is
04:25 - array A from index 0 to 7 this is
segment of
04:29 - array A from index 0 till 2 and this
is segment of
04:33 - array A from index four till seven we
will come back to why we do not need to
04:38 - create auxiliary arrays
04:39 - and why we can work on the same array
04:42 - just marking the start and end of a
segment
04:46 - lets first try to understand the
core logic
04:49 - so far we understand that once
04:52 - a list has been partitioned then we have
two sub problems to solve
04:57 - sorting the list left of the pivot
and then sorting the list right of
05:02 - pivot
05:02 - sorting the sub list left of the pivot
and sorting the sub list right of the
05:06 - pivot
05:06 - but now how do we sort these two sub lists
that we have created
05:11 - we can apply the partitioning logic
once again
05:14 - and break the problem even further let's
say first we want to work on this left
05:19 - sub list
05:20 - so we choose a pivot and
05:23 - then we rearrange the sub list such
that all the elements
05:27 - lesser than the pivot are towards left
three
05:30 - is the largest in this sub list so
05:33 - this arrangement is actually satisfying
the condition
05:36 - this problem will actually have only
one sub-problem
05:40 - now we need to work on segment of the
array from zero till one
05:44 - because there has to be a deterministic
logic of
05:47 - picking up the pivot let's say we always
pick the
05:51 - rightmost element in the sub list as
pivot
05:54 - so for this segment from 0 till 1 
we will pick one as pivot
05:59 - and this sub list will be rearranged
like this
06:02 - and we will have one sub problem to solve
06:06 - so we're going on in a recursion we
are breaking the problem in self
06:10 - similar manner
06:12 - and remember all the rearrangement is
happening
06:16 - in the original array only in the
original list only
06:19 - the segments that we are showing here are just
06:23 - snapshots of the original array so at
this stage we have
06:27 - two one and 3 at 0 1 & 2 respectively in
06:30 - A and when we go to this stage after
partition
06:34 - two goes to index one and one comes to
index zero
06:37 - so when we are here when our segment is
only one element
06:42 - the element at index one then the
original array from index 0
06:47 - till 2 is 1 2 & 3
06:51 - at indices zero one and two respectively
06:55 - and when we have only one element
in a sub list or a segment
07:00 - that segment is already sorted we do
not need to break the problem any
07:03 - further
07:04 - so we need to stop our recursion at this
stage
07:07 - this will be the exit condition from
recursion and at this stage the segment
07:11 - from zero till index two
07:14 - is sorted and now we can go ahead and
work on
07:17 - the segment from index four till seven
07:21 - now let's first try to understand how
we will do all of this
07:25 - programmatically I will write a function
named
07:28 - QuickSort that will take as argument
an Array A
07:33 - and start and end index of the
07:36 - segment that needs to be sorted
07:39 - now why do we need start and end as
argument
07:42 - because we do not want to create any
auxiliary array any new array
07:46 - what we want to do is we want to use
the same array
07:50 - we want to keep on passing the same
array and we just want to mark the
07:54 - boundaries of the segment that we want
to work upon
07:58 - initially we will call the QuickSort
function passing it
08:02 - start index zero and end index
08:05 - length minus one so we will pass the whole
array
08:09 - things will be clear when i will write the
body of this function
08:12 - now in this function first we'll make a
call to partition the
08:17 - array and to partition also we will pass
the array the start index
08:22 - and the end index to tell that you need to
work only on
08:26 - this segment now this function partition
08:29 - let's say will rearrange the array
08:32 - such that we will rearrange the segment of
the array from start
08:36 - till end such that there will be a
pivot
08:39 - and all the elements left of the pivot
will be lesser and all the
08:42 - elements
08:43 - right of the pivot or towards the
higher indices of the pivot will be
08:47 - greater and let's say in this function
will return
08:51 - the index of the pivot after 
rearrangement
08:54 - I will call it pIndex for partition
index
08:59 - now once we have rearranged a segment
in this process
09:02 - partition and got the partition index
09:06 - the index of the pivot then we can make
09:09 - two recursive calls one to sort the
segment
09:13 - left of the partition index and another
09:17 - to sort the segment right
09:20 - or towards the higher index higher indices
of partition index so first
09:26 - call is
09:27 - for segment start till partition index
-1
09:31 - and another call is for segment starting
09:35 - partition index plus one till end there
is only one thing remaining here now
09:41 - we do not want to go into the recursion 
infinitely
09:45 - so we must write a base condition
09:48 - or exit condition in our function here
as we had seen we can exit
09:53 - if a segment is having only one element
09:56 - so we can write something like this if
10:01 - start of the segment is
10:04 - greater than or equal to end then
10:08 - we can return which will mean exiting the
function
10:11 - why start greater than or equal to
end and not just
10:16 - start equal equal end well start
greater than or equal to end
10:21 - will take care of two things if the
segment is
10:24 - invalid then also we will exit and if
10:27 - segment will have only one element then
also we will exit
10:30 - sometimes we will not have a valid segment
in the left or in the right like
10:35 - here for this segment from 
index zero till one there is no
10:40 - segment left to the pivot but still we will make
10:44 - a recursive call to QuickSort we need
to gracefully exit
10:48 - in that case we can also write
something like this
10:52 - do this whole partitioning only if
10:55 - start is strictly less than end
10:58 - and this will also mean the same thing
11:02 - we will come back to partitioning
logic which is the core of this
11:05 - algorithm
11:06 - but first i will quickly simulate a run of
QuickSort
11:09 - on this example array here first we'll
make a call to
11:13 - QuickSort passing it array start
11:17 - index zero and end index 7 now
11:21 - start is less than end 0 is less than
seven so
11:24 - partition function will be called and
after partition
11:28 - partition index will be three so this
QuickSort
11:31 - call will make another QuickSort call
11:34 - with start index zero and end index 2
11:37 - whenever a function makes another call
the execution of
11:42 - that particular function call is
paused the machine says that hey I'll
11:46 - come back to you once am
11:47 - done once I have finished this another
call
11:51 - I'll simply write Q here as shortcut for
QuickSort
11:55 - now once again zero is less than two so
we will partition
11:59 - and this guy Q(A,0,2) will
first make a call to
12:03 - Q(A,0,1) the state of execution
of this call
12:08 - will be paused we will go to Q(A,0,1)
12:11 - zero once again is less than one so
partition will run
12:15 - we're already showing the partitioned
segment here
12:18 - and first a call will be made to
12:22 - Q A zero and partition index
here is zero so we will make a call like
12:26 - this Q(A,0,-1)
12:27 - now start equal zero and end equal -1
is an
12:30 - invalid segment but our code is taking care
of it we will not go inside the
12:36 - if condition here for this particular
call and this particular call will
12:40 - simply finish and
12:41 - exit so this guy will simply return without
doing
12:44 - anything the control will return back to
Q(A,0,1) and now this guy will make
12:49 - another recursive call
12:50 - to Q(A,1,1)
12:53 - now once again for this guy start
12:57 - less than end condition will be false so
this guy will not partition it
13:01 - will simply return and now Q
13:04 - (A,0,1) will return and now Q
13:07 - (A,0,2) will make another call to
13:10 - Q(A,2,3) sorry Q(A,3,2)
13:14 - it has to be pIndex plus
one
13:17 - till end once again this is an invalid
segments so this guy will simply return
13:23 - and now Q(A,0,2) will return
13:26 - Q(A,0,7) will resume
13:30 - and now Q(A,0,7) will make a
call for the segment right of the pivot
13:35 - a call like Q(A,4,7) will be made
13:38 - Four is less than seven so first
partition will happen
13:42 - after partition pivot will be five now
13:45 - Q(A,4,7) will make call to it
will first make a call
13:49 - like Q A start four end four
13:52 - which will simply return because we have
13:56 - only one element in the segment then
it'll make another call
14:00 - for segment from six to seven this guy will
again make two calls
14:06 - one for an invalid segment the right one will
be for
14:09 - invalid segment and one for the left one
first it will make a call for the left
14:13 - one
14:14 - the left one will have one element in
the segment so that'll
14:17 - also simply return so finally
with all these calls our list
14:21 - in all will be sorted once the right
sub list is also sorted
14:25 - the list itself the over all list will
also be sorted
14:29 - so this is how thinks will happen this
is how things will execute for this
14:34 - recursive function QuickSort now let's
talk about
14:37 - the partitioning logic basically we want
to solve this problem
14:41 - we want to select a pivot and we want
to rearrange
14:45 - a list such that all the elements
lesser than the pivot are
14:49 - to the left of it and all the elements
greater than the pivot are
14:53 - to the right of it I want to write a
function
14:56 - named Partition that should take
15:00 - an array the start index of the segment
15:03 - in the array that needs to be 
partitioned and the
15:07 - end index of the segment this signature
will make sure that
15:11 - we have a function to partition a
segment of
15:14 - array A you can pass the whole array to
this function
15:18 - or you can pass the segment you just
need to pass the right values for start
15:22 - and end now in this function we first
need to select
15:25 - the pivot let's say the right most
15:29 - element in the segment is selected 
as pivot
15:32 - so pivot is always A[end] if we
pass this whole
15:36 - array we will pass A start will be zero
end will be
15:40 - 7 so pivot will be four now partition
logic will be something like this
15:46 - we will first take a variable named
15:49 - pIndex or partition index i am just
writing shortcut pIndex
15:54 - for partition index and initially
15:57 - we will set it to start and now we
will scan the whole list from start till
16:03 - end-1 and we will make sure that all the
elements
16:07 - lesser than the pivot are pushed to the
left of partition index
16:12 - partition index will be adjusted
accordingly so we will do something like
16:17 - this we will run a loop
16:18 - from start till n -1
16:22 - and if the element at that particular
index
16:25 - is less than or equal to pivot we will
first
16:29 - swap that particular element with
16:32 - the element at partition index and
then we will increment the partition index
16:38 - with this much of code let's quickly
see what will happen if we will try to
16:42 - to partition this
16:43 - array that we are showing in the left here
we will pass this array
16:48 - start index will be zero end index
will be seven
16:51 - so four will be the pivot pIndex
16:54 - will initially be zero now the idea
is to push
16:58 - all the elements lesser than the pivot
to the left of pIndex
17:03 - we will start the for loop with i equal 0
17:06 - we will come to this conditional
statement 7
17:09 - is not less than or equal to 4 it is
greater than 4 so
17:13 - no swapping will happen i will simply
get incremented now A[i] will be
17:18 - two two is lesser than four so we will
swap the
17:22 - elements at index i and at index 
pIndex
17:26 - and now pIndex will be incremented
17:29 - at any stage all the elements to the
left of partition index will be lesser
17:34 - than the pivot
17:35 - let's say we will show them in this
blue color
17:38 - now i will be incremented i will be two
17:41 - one once again is lesser than four
so we will swap these two elements seven
17:46 - and one
17:47 - partition index will now be equal to two
and i will be
17:50 - three 6 is greater than 4
17:54 - so we will simply move 8 once again
is greater than 4
17:59 - i will now be five and 5 the element at index
five is also
18:03 - greater than 4 so we will go to index
six
18:07 - three is lesser than four so we need a
swap here
18:11 - and now pIndex at this stage will be
18:14 - three and now we will exit the for loop
18:18 - and if you can see at this stage all the
elements lesser than the pivot
18:22 - are towards the left of the partition
index and
18:25 - the pivot itself and the elements
greater than the pivot are
18:29 - on or after the partition index now
there is only one more thing that we need
18:34 - to do
18:35 - and we will have a proper partitioning
we will swap the
18:39 - element at the partition index with
the
18:42 - element at end index which is the
pivot
18:45 - so six will go to index seven and Four
will come to index three
18:50 - and now we have a proper partitioning
this function Partition will return the
18:55 - partition index
18:57 - and we are good with this implementation
of Partition function the QuickSort
19:03 - function that we had written earlier
will work let's quickly write a real
19:07 - program for this and see
19:08 - whether this works or not I'm writing
this program in C++
19:13 - this is the implementation of Partition
function and
19:17 - then I have written the QuickSort
function inside the QuickSort function
19:21 - we make a call to Partition and then we
make two recursive calls
19:25 - in the main function I have 
initialized an array
19:28 - of 8 elements then am making a call to
QuickSort
19:32 - passing starting index Zero end index
seven and then I'm simply printing the
19:37 - elements in the
19:38 - array after call to QuickSort let's
see what happens when we run this code
19:43 - and the output seems to be sorted
now
19:46 - let's change this array let's pick 
up the example that we had used earlier
19:51 - this is the array that we had used in our
example
19:54 - once again the output seems to be
correct so we are looking good
19:58 - so this is our implementation of QuickSort
20:01 - in C++ we have left one
question
20:05 - unanswered the question was why are we 
not having to create an
20:09 - auxiliary array here like Merge Sort
20:13 - well in Merge Sort once we were done
sorting the left part and the right part
20:17 - then
20:18 - we were merging the two parts back
into the original list
20:21 - and there is no way you can perform the
merge process without using auxiliary arrays
20:26 - think about it and you should be able to
get it we will analyze the properties
20:31 - and running time of QuickSort in
20:34 - next lesson this is it for this lesson
thanks for watching

Cleaned transcript:

In our previous lesson in this series we discussed and analyzed Merge sort algorithm Merge sort, as we saw is a recursive algorithm in which we follow a divideandconquer strategy the running time of Merge sort is O(nlogn) in worst case but Merge sort is not an in place sorting algorithm and in place sorting algorithm takes constant amount of extra memory but the space complexity of Merge sort is O(n) the extra memory requires disproportional to the number of elements in a list that needs to be sorted now in this lesson we will discuss and analyze quick sort which is another recursive algorithm where we will follow a divideandconquer strategy time complexity of Quick Sort algorithm is O(nlogn) in average case and it is O(n2) in worst case but Quick Sort is an in place sorting algorithm we take almost constant amount of extra memory and despite having a worst case running time of O(n2) Quick Sort is pretty fast and efficient in practical scenarios the worstcase running time of Quick Sort is almost always avoided by using what we call a randomized version of Quick Sort randomized quick sort gives us O(nlogn) running time with very high probability Quick Sort is often the most practical choice for an efficient sorting algorithm in fact sort function given to us by most of the language libraries are implementations of Quick Sort only so in this lesson we will discuss and analyze Quick Sort algorithm once again I'll take a very simple sorting scenario let's say we have a list of integers given to us in the form of an array something like this i will name this array A and we want to rearrange this list in increasing order of the value of integers now in Quick Sort what we do is we first select one of the elements from the list and this can be any element in this example here let's say we select number four now we call this selected number pivot and now first we rearrange the list such that all the elements lesser than the pivot are towards the left of it and all the elements greater than the pivot are towards the right of it something like this let's call this whole process partitioning of a list so lets say partition is a process in which we select a pivot and rearrange the list such that all the elements lesser than the pivot are towards the left and all the elements greater than the pivot are towards the right there can be more than one possible arrangements in which elements lesser than the pivot will be towards the left and elements greater than pivot will be towards the right for example two one and three are lesser than the pivot in this example we could have had them in order 3 2 1 or 1 2 3 it doesn't really matter we can have anyone such arrangement the only requirement is that all the elements lesser than the pivot should be towards the left and all the elements greater than the pivot should be towards right we have an efficient in place algorithm to partition a list like this we can do so in constant amount of extra memory using only some temporary variables we will come back to the partitioning logic but let's first think about this once we have partitioned the array like this we can break this problem into two subproblems and the two subproblems will be sorting the segment of the array to the left of the pivot and sorting the segment of the array to the right of the pivot and this time alike merge sort we do not need to create auxiliary arrays entirely new arrays and copy the elements into these new arrays we can work on the same arrays it's just that we will have to keep track of the start and end index of the segments so if this is array A from index 0 to 7 this is segment of array A from index 0 till 2 and this is segment of array A from index four till seven we will come back to why we do not need to create auxiliary arrays and why we can work on the same array just marking the start and end of a segment lets first try to understand the core logic so far we understand that once a list has been partitioned then we have two sub problems to solve sorting the list left of the pivot and then sorting the list right of pivot sorting the sub list left of the pivot and sorting the sub list right of the pivot but now how do we sort these two sub lists that we have created we can apply the partitioning logic once again and break the problem even further let's say first we want to work on this left sub list so we choose a pivot and then we rearrange the sub list such that all the elements lesser than the pivot are towards left three is the largest in this sub list so this arrangement is actually satisfying the condition this problem will actually have only one subproblem now we need to work on segment of the array from zero till one because there has to be a deterministic logic of picking up the pivot let's say we always pick the rightmost element in the sub list as pivot so for this segment from 0 till 1 we will pick one as pivot and this sub list will be rearranged like this and we will have one sub problem to solve so we're going on in a recursion we are breaking the problem in self similar manner and remember all the rearrangement is happening in the original array only in the original list only the segments that we are showing here are just snapshots of the original array so at this stage we have two one and 3 at 0 1 & 2 respectively in A and when we go to this stage after partition two goes to index one and one comes to index zero so when we are here when our segment is only one element the element at index one then the original array from index 0 till 2 is 1 2 & 3 at indices zero one and two respectively and when we have only one element in a sub list or a segment that segment is already sorted we do not need to break the problem any further so we need to stop our recursion at this stage this will be the exit condition from recursion and at this stage the segment from zero till index two is sorted and now we can go ahead and work on the segment from index four till seven now let's first try to understand how we will do all of this programmatically I will write a function named QuickSort that will take as argument an Array A and start and end index of the segment that needs to be sorted now why do we need start and end as argument because we do not want to create any auxiliary array any new array what we want to do is we want to use the same array we want to keep on passing the same array and we just want to mark the boundaries of the segment that we want to work upon initially we will call the QuickSort function passing it start index zero and end index length minus one so we will pass the whole array things will be clear when i will write the body of this function now in this function first we'll make a call to partition the array and to partition also we will pass the array the start index and the end index to tell that you need to work only on this segment now this function partition let's say will rearrange the array such that we will rearrange the segment of the array from start till end such that there will be a pivot and all the elements left of the pivot will be lesser and all the elements right of the pivot or towards the higher indices of the pivot will be greater and let's say in this function will return the index of the pivot after rearrangement I will call it pIndex for partition index now once we have rearranged a segment in this process partition and got the partition index the index of the pivot then we can make two recursive calls one to sort the segment left of the partition index and another to sort the segment right or towards the higher index higher indices of partition index so first call is for segment start till partition index 1 and another call is for segment starting partition index plus one till end there is only one thing remaining here now we do not want to go into the recursion infinitely so we must write a base condition or exit condition in our function here as we had seen we can exit if a segment is having only one element so we can write something like this if start of the segment is greater than or equal to end then we can return which will mean exiting the function why start greater than or equal to end and not just start equal equal end well start greater than or equal to end will take care of two things if the segment is invalid then also we will exit and if segment will have only one element then also we will exit sometimes we will not have a valid segment in the left or in the right like here for this segment from index zero till one there is no segment left to the pivot but still we will make a recursive call to QuickSort we need to gracefully exit in that case we can also write something like this do this whole partitioning only if start is strictly less than end and this will also mean the same thing we will come back to partitioning logic which is the core of this algorithm but first i will quickly simulate a run of QuickSort on this example array here first we'll make a call to QuickSort passing it array start index zero and end index 7 now start is less than end 0 is less than seven so partition function will be called and after partition partition index will be three so this QuickSort call will make another QuickSort call with start index zero and end index 2 whenever a function makes another call the execution of that particular function call is paused the machine says that hey I'll come back to you once am done once I have finished this another call I'll simply write Q here as shortcut for QuickSort now once again zero is less than two so we will partition and this guy Q(A,0,2) will first make a call to Q(A,0,1) the state of execution of this call will be paused we will go to Q(A,0,1) zero once again is less than one so partition will run we're already showing the partitioned segment here and first a call will be made to Q A zero and partition index here is zero so we will make a call like this Q(A,0,1) now start equal zero and end equal 1 is an invalid segment but our code is taking care of it we will not go inside the if condition here for this particular call and this particular call will simply finish and exit so this guy will simply return without doing anything the control will return back to Q(A,0,1) and now this guy will make another recursive call to Q(A,1,1) now once again for this guy start less than end condition will be false so this guy will not partition it will simply return and now Q (A,0,1) will return and now Q (A,0,2) will make another call to Q(A,2,3) sorry Q(A,3,2) it has to be pIndex plus one till end once again this is an invalid segments so this guy will simply return and now Q(A,0,2) will return Q(A,0,7) will resume and now Q(A,0,7) will make a call for the segment right of the pivot a call like Q(A,4,7) will be made Four is less than seven so first partition will happen after partition pivot will be five now Q(A,4,7) will make call to it will first make a call like Q A start four end four which will simply return because we have only one element in the segment then it'll make another call for segment from six to seven this guy will again make two calls one for an invalid segment the right one will be for invalid segment and one for the left one first it will make a call for the left one the left one will have one element in the segment so that'll also simply return so finally with all these calls our list in all will be sorted once the right sub list is also sorted the list itself the over all list will also be sorted so this is how thinks will happen this is how things will execute for this recursive function QuickSort now let's talk about the partitioning logic basically we want to solve this problem we want to select a pivot and we want to rearrange a list such that all the elements lesser than the pivot are to the left of it and all the elements greater than the pivot are to the right of it I want to write a function named Partition that should take an array the start index of the segment in the array that needs to be partitioned and the end index of the segment this signature will make sure that we have a function to partition a segment of array A you can pass the whole array to this function or you can pass the segment you just need to pass the right values for start and end now in this function we first need to select the pivot let's say the right most element in the segment is selected as pivot so pivot is always A[end] if we pass this whole array we will pass A start will be zero end will be 7 so pivot will be four now partition logic will be something like this we will first take a variable named pIndex or partition index i am just writing shortcut pIndex for partition index and initially we will set it to start and now we will scan the whole list from start till end1 and we will make sure that all the elements lesser than the pivot are pushed to the left of partition index partition index will be adjusted accordingly so we will do something like this we will run a loop from start till n 1 and if the element at that particular index is less than or equal to pivot we will first swap that particular element with the element at partition index and then we will increment the partition index with this much of code let's quickly see what will happen if we will try to to partition this array that we are showing in the left here we will pass this array start index will be zero end index will be seven so four will be the pivot pIndex will initially be zero now the idea is to push all the elements lesser than the pivot to the left of pIndex we will start the for loop with i equal 0 we will come to this conditional statement 7 is not less than or equal to 4 it is greater than 4 so no swapping will happen i will simply get incremented now A[i] will be two two is lesser than four so we will swap the elements at index i and at index pIndex and now pIndex will be incremented at any stage all the elements to the left of partition index will be lesser than the pivot let's say we will show them in this blue color now i will be incremented i will be two one once again is lesser than four so we will swap these two elements seven and one partition index will now be equal to two and i will be three 6 is greater than 4 so we will simply move 8 once again is greater than 4 i will now be five and 5 the element at index five is also greater than 4 so we will go to index six three is lesser than four so we need a swap here and now pIndex at this stage will be three and now we will exit the for loop and if you can see at this stage all the elements lesser than the pivot are towards the left of the partition index and the pivot itself and the elements greater than the pivot are on or after the partition index now there is only one more thing that we need to do and we will have a proper partitioning we will swap the element at the partition index with the element at end index which is the pivot so six will go to index seven and Four will come to index three and now we have a proper partitioning this function Partition will return the partition index and we are good with this implementation of Partition function the QuickSort function that we had written earlier will work let's quickly write a real program for this and see whether this works or not I'm writing this program in C++ this is the implementation of Partition function and then I have written the QuickSort function inside the QuickSort function we make a call to Partition and then we make two recursive calls in the main function I have initialized an array of 8 elements then am making a call to QuickSort passing starting index Zero end index seven and then I'm simply printing the elements in the array after call to QuickSort let's see what happens when we run this code and the output seems to be sorted now let's change this array let's pick up the example that we had used earlier this is the array that we had used in our example once again the output seems to be correct so we are looking good so this is our implementation of QuickSort in C++ we have left one question unanswered the question was why are we not having to create an auxiliary array here like Merge Sort well in Merge Sort once we were done sorting the left part and the right part then we were merging the two parts back into the original list and there is no way you can perform the merge process without using auxiliary arrays think about it and you should be able to get it we will analyze the properties and running time of QuickSort in next lesson this is it for this lesson thanks for watching
