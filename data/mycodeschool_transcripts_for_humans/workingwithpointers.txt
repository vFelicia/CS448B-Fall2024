With timestamps:

00:00 - So, in our previous lesson "Introduction to pointers",  we learnt the basics of
00:05 - pointers.
00:06 - In this lesson we will see how to work with pointers
00:09 - in some real code examples,
00:12 - but before that a quick recap.
00:15 - Pointers are variables that store address of other variables.
00:19 - We declare a normal variable
00:23 - with a syntax like
00:25 - the data type or the variable type
00:27 - followed by the variable name,
00:30 - but we declare a pointer variable
00:32 - with a syntax
00:33 - datatype
00:35 - and an asterisk sign followed by the variable name.
00:39 - We need an integer pointer variable to store the address of an
00:43 - integer.
00:44 - To store the address of,
00:46 - say a character variable we will need
00:49 - a character pointer. So, the same syntax will be used. We put an asterisk sign
00:54 - and let's say the name of the variable is 'P0'
00:57 - So, 'c' is a character variable and 'P0' is a pointer to character
01:02 - And similarly, we can have a pointer to double.
01:07 - And we can also have pointers to a user defined structure,
01:11 - or a user defined class also.
01:14 - And to get the address of a variable, we
01:17 - write a statement like,
01:19 - P = &a (ampersand 'a'). Now, this ampersand
01:23 - works as an operator that gives us the address of 'a',
01:26 - and what happens in the memory is something like this,
01:30 - variable 'P' stores the address of variable 'a'.
01:33 - So in this
01:34 - figure here
01:36 - P's value is 204 which is the address of 'a',
01:39 - so 'P' points to 'a',
01:41 - and using 'P' we can also get the value
01:45 - of 'a'. So let's say if 'a' 
01:47 - is 8
01:48 - and we
01:49 - use a star operator (*) in front of 'P'
01:52 - then *P gives us
01:55 - 8, which is value of 'a'.
01:57 - If we try to print *P, it gives us 8.
02:00 - Let us now try to see some of these
02:03 - things in real code.
02:05 - Ok, so time to see things moving in a real C program.
02:10 - Now, what I will do is I will play a game with you. I will write some print statements and you
02:13 - need to guess,
02:15 - what will be the output?
02:17 - So what I will first do is I will declare an integer variable 'a',
02:21 - and then I will declare another variable which will be pointer to integer
02:26 - and now I will write a print statement
02:29 - where i'll be printing 'p'.
02:32 - Now, what will be the output of this program?
02:34 - Ok, so
02:35 - let's run this program.
02:37 - Oops! this gives us an error.
02:39 - And if it is too small for you to read, then
02:43 - this
02:43 - is giving an error that the variable 'p'
02:46 - is not initialized
02:48 - and we are using it without initializing.
02:51 - So, that's why the program is crashing.
02:54 - So now I will write a statement.
02:56 - p = &a (ampersand 'a')
02:59 - Now ampersand 
03:00 - of a (&a) is nothing but
03:02 - address of a.
03:04 - Now lets run this again.
03:06 - Okay so this prints 
03:08 - an address.
03:11 - And how do you know that this is the address,
03:13 - or this is the right address that is stored in 'p'.
03:17 - So, I'll write another print statement.
03:19 - and now i am printing *p. Now star operator, when it is
03:23 - put in front of the address, then it gives us the value at that particular address.
03:28 - Okay so what will be
03:29 - the output of the second print statement?
03:32 - So when we run this, the first line gives us the address that 'p' points to
03:38 - and this address is different,
03:39 - than the previous address, because every time the program runs afresh,
03:43 - a new address is allocated,
03:45 - but the value at 'p'
03:48 - is some garbage value, is some integer
that I am not sure what it is.
03:53 - This is happening because I have not initialized 'a' and
03:57 - although memories are allocated for 'a',
03:59 - there is
04:00 - some garbage value there that I do not know about.
04:03 - Ok, so let's initialize 'a'. Let's say 'a' is equal to 10.
04:07 - And now the second line prints the value of 'a', 
04:13 - and now i will write
04:15 - another print statement,
04:17 - and this time I will print
04:19 - &a (ampersand 'a').
04:21 - Now what should be the output of this
04:24 - third print statement?
04:26 - And this should be pretty easy to guess.
04:28 - Ampersand operator (&) gives us the address
04:31 - and that's why
04:32 - the third line is also the address of 'a'.
04:36 - In-fact that's what we have done here. We have assigned 'p'
04:40 - the address of 'a'. We have used the operator ampersand.
04:44 - Now, what I will do is, I will modify the value in 'a',
04:48 - using the pointer 'p'.
04:49 - And to do so i will write a statement like
04:51 - *p = 12
04:54 - and this is read as
04:55 - value at address 'p'... Value at address being pointed by 'p'
04:59 - is now 12.
05:00 - This concept is called
05:01 - de-referencing.
05:03 - So now if i try to print 'a',
05:06 - and let's also put one print statement for 'a', before we modify the value,
05:13 - and let's run this.
05:15 - So the first print gives me 10,
05:17 - which is the value that we have
05:18 - initialized 'a' with and
05:20 - the second
05:21 - print gives us a = 12
05:23 - a = 12
05:24 - because we modified the value
05:26 - using the pointer.
05:28 - Okay, so one more thing that i'll do here now.
05:30 - I will have another variable 'b',
05:32 - that will have value 20.
05:33 - and now what i will say is
05:36 - *p
05:36 - or value at address 'p' is equal to 'b'.
05:40 - And the question now is that,
05:41 - will the address in 'p' change now
05:43 -  to point to 'b'?
05:46 - Well.. No.., unless you explicitly write a
statement like,
05:50 - p = &b
05:52 - this reverse operation will not happen. What we are doing here is actually, only
05:56 - putting
05:58 - in the address of 'a', the value that 'b' has,
06:00 - but we are not pointing to 'b'
06:02 - and this will get clear, only
06:04 -  if we
06:05 - write some more printf statements.
06:07 - So before writing the statement, I am writing
two print statements.
06:10 - one to print the address and one to print
the value
06:13 - and after we
06:14 - write the statement, i will write two more print statements
06:17 - trying to print the address and value again
06:20 - so let us see what the output is now. ok, so
06:24 - address of p is intitally three one  four four
five seven six
06:28 - and value is 10
06:29 - and after the statement star p
equal to b, only value is modified
06:33 - and the pointer still points to a
06:35 - so a now becomes twenty but the address does not change
06:39 - now one more thing
06:40 - sometimes we declare and initialize a variable
in the same statement
06:45 - so instead of writing this a 
equal to ten here we could simply say that
06:49 - int a is equal to 10
06:52 - so we can do so for the pointer
variable as well
06:56 - we could simply say for these two statements
06:57 - one simple statement like int star p is
07:01 - equal to ampersand a 
07:03 - and we will not need the statement
07:05 - this one statement is same as saying
the earlier two statements
07:09 - the syntax of declaring pointer
07:13 - some people write this asterix sign 
07:14 - after int and do not write it
07:16 - in front of the variable name
07:18 - this also works and this is also fine
07:21 - so you can write int star
07:22 - which means pointer to integer and then you can write the variable name
07:26 - and this will also work
07:28 - okay so now we will point
07:30 - uh .. we will talk about a
07:32 - concept
07:34 - we will talk about the concept of
07:35 - pointer arithmetic
07:40 - but before that I will
07:41 - write this ... rewrite this
07:43 - declaration and initialization like
before in two statements
07:48 - I like it better this way. It's less confusing
07:50 - now I will write two print statements here
07:53 - in the first statement
07:55 - I will print p
07:56 - and in another statement i will print
07:59 -  p plus one
08:00 - Now, is it really possible to do so?
08:03 - can we really increment and decrement
08:05 - a pointer variable
08:07 - Well yes ! we can do so
08:09 - so now let's assume
08:09 - that the address stored in p is
08:14 - something like 2002
08:16 - so any guesses what p plus one
08:18 - will be
08:20 - Will it be 2003 ?
08:23 - Well no ..  (p + 1) will be 2006
08:27 - this is because
08:28 - if p is an integer pointer increamenting
it by one unit
08:32 - takes us to the address of the next integer
08:36 - and because
08:36 - the size of an integer is four bytes
08:39 - so, to go to the next
08:41 - integer address we need to skip 4 bytes. so,
p plus one increments p by 4 bytes
08:46 - I'll write another print statement in which I will print
08:50 - size of an integer variable
08:53 - and i will write something like sizeof
08:55 - integer is
08:57 - and we have a function in C, sizeof that gives us
09:01 - the size of the data type
09:03 - so this
09:04 - statement, this print statement will give
us the size of integer
09:07 - and let's write in the first and third
09:10 - print statements something like
09:13 - address p is blah and 
09:15 - address (p+1) 
09:17 - is blah.. so
09:18 - let's now run this and see what happens
09:21 - okay.. so the output is address p is4 586052 which
09:25 - is some address
09:26 - and then we print size of integer is 4 bytes. so,
09:30 - for this particular compiler
09:32 - the size of an integer is four bytes
09:34 - and address (p+1)  is four bytes
more than address p
09:38 - you can try this thing out for a character pointer or a double pointer
09:43 - or a pointer for some other data type
09:45 - okay so we could also increment this by 2
09:48 - and what happens if we increament this by 2.
09:50 - well, it will increment the address by 8
09:54 - So, this will be like
09:56 - 2010
09:58 - p plus 2 will be 2010
10:01 - and this 2002 and 2010 is something that i have picked up
10:04 - randomly
10:05 - just for the sake of example
10:07 - ok so now once again what if i want to
print the value at this particular
10:10 - address
10:11 - so i am printing two more lines here now.
 I am printing  value at address p
10:16 - and i will print *p. It gives us the value at that address
10:20 - and we will print another line
10:22 - we will say that value at address (p+1) is
10:25 - and this should be
10:27 - *(p+1)
10:29 - we put the star operator in front of the
address
10:31 - okay, so now what will be the output
10:33 - okay so the output is that
10:35 - address p is some address and value at address p is 10 which is 
10:38 - alright because we had stored the address of variable a
10:42 - in p
10:43 - now next line is size of integer is 4 bytes and  
 and p plus one is four more
10:46 - than
10:47 - the address p
10:49 - and the value at address p+1 is
some integer value that I do not
10:52 - know about
10:53 - in fact this is some garbage value because
10:56 - because we do not really have an integer allocated to this
10:59 - particular memory address
11:00 - and this is one dangerous thing about c
using pointer arithmetic
11:05 - using pointer manipulation you can reach to
11:07 - to any address
11:08 - and sometimes
11:10 - these kind of operations can bring some
unwanted behavior to your program
11:13 - i recommend trying these things out, these
snippets of code with other data types 
11:18 - like characters or float
11:19 - and the results
11:20 - will be similar. So, this was
11:24 - some playing around with
11:25 - pointers and
11:27 - in the coming lessons we will talk more 
about pointers and we will talk about 
11:31 - pointers in the context of arrays
11:34 - So, thanks for watching !

Cleaned transcript:

So, in our previous lesson "Introduction to pointers", we learnt the basics of pointers. In this lesson we will see how to work with pointers in some real code examples, but before that a quick recap. Pointers are variables that store address of other variables. We declare a normal variable with a syntax like the data type or the variable type followed by the variable name, but we declare a pointer variable with a syntax datatype and an asterisk sign followed by the variable name. We need an integer pointer variable to store the address of an integer. To store the address of, say a character variable we will need a character pointer. So, the same syntax will be used. We put an asterisk sign and let's say the name of the variable is 'P0' So, 'c' is a character variable and 'P0' is a pointer to character And similarly, we can have a pointer to double. And we can also have pointers to a user defined structure, or a user defined class also. And to get the address of a variable, we write a statement like, P = &a (ampersand 'a'). Now, this ampersand works as an operator that gives us the address of 'a', and what happens in the memory is something like this, variable 'P' stores the address of variable 'a'. So in this figure here P's value is 204 which is the address of 'a', so 'P' points to 'a', and using 'P' we can also get the value of 'a'. So let's say if 'a' is 8 and we use a star operator (*) in front of 'P' then *P gives us 8, which is value of 'a'. If we try to print *P, it gives us 8. Let us now try to see some of these things in real code. Ok, so time to see things moving in a real C program. Now, what I will do is I will play a game with you. I will write some print statements and you need to guess, what will be the output? So what I will first do is I will declare an integer variable 'a', and then I will declare another variable which will be pointer to integer and now I will write a print statement where i'll be printing 'p'. Now, what will be the output of this program? Ok, so let's run this program. Oops! this gives us an error. And if it is too small for you to read, then this is giving an error that the variable 'p' is not initialized and we are using it without initializing. So, that's why the program is crashing. So now I will write a statement. p = &a (ampersand 'a') Now ampersand of a (&a) is nothing but address of a. Now lets run this again. Okay so this prints an address. And how do you know that this is the address, or this is the right address that is stored in 'p'. So, I'll write another print statement. and now i am printing *p. Now star operator, when it is put in front of the address, then it gives us the value at that particular address. Okay so what will be the output of the second print statement? So when we run this, the first line gives us the address that 'p' points to and this address is different, than the previous address, because every time the program runs afresh, a new address is allocated, but the value at 'p' is some garbage value, is some integer that I am not sure what it is. This is happening because I have not initialized 'a' and although memories are allocated for 'a', there is some garbage value there that I do not know about. Ok, so let's initialize 'a'. Let's say 'a' is equal to 10. And now the second line prints the value of 'a', and now i will write another print statement, and this time I will print &a (ampersand 'a'). Now what should be the output of this third print statement? And this should be pretty easy to guess. Ampersand operator (&) gives us the address and that's why the third line is also the address of 'a'. Infact that's what we have done here. We have assigned 'p' the address of 'a'. We have used the operator ampersand. Now, what I will do is, I will modify the value in 'a', using the pointer 'p'. And to do so i will write a statement like *p = 12 and this is read as value at address 'p'... Value at address being pointed by 'p' is now 12. This concept is called dereferencing. So now if i try to print 'a', and let's also put one print statement for 'a', before we modify the value, and let's run this. So the first print gives me 10, which is the value that we have initialized 'a' with and the second print gives us a = 12 a = 12 because we modified the value using the pointer. Okay, so one more thing that i'll do here now. I will have another variable 'b', that will have value 20. and now what i will say is *p or value at address 'p' is equal to 'b'. And the question now is that, will the address in 'p' change now to point to 'b'? Well.. No.., unless you explicitly write a statement like, p = &b this reverse operation will not happen. What we are doing here is actually, only putting in the address of 'a', the value that 'b' has, but we are not pointing to 'b' and this will get clear, only if we write some more printf statements. So before writing the statement, I am writing two print statements. one to print the address and one to print the value and after we write the statement, i will write two more print statements trying to print the address and value again so let us see what the output is now. ok, so address of p is intitally three one four four five seven six and value is 10 and after the statement star p equal to b, only value is modified and the pointer still points to a so a now becomes twenty but the address does not change now one more thing sometimes we declare and initialize a variable in the same statement so instead of writing this a equal to ten here we could simply say that int a is equal to 10 so we can do so for the pointer variable as well we could simply say for these two statements one simple statement like int star p is equal to ampersand a and we will not need the statement this one statement is same as saying the earlier two statements the syntax of declaring pointer some people write this asterix sign after int and do not write it in front of the variable name this also works and this is also fine so you can write int star which means pointer to integer and then you can write the variable name and this will also work okay so now we will point uh .. we will talk about a concept we will talk about the concept of pointer arithmetic but before that I will write this ... rewrite this declaration and initialization like before in two statements I like it better this way. It's less confusing now I will write two print statements here in the first statement I will print p and in another statement i will print p plus one Now, is it really possible to do so? can we really increment and decrement a pointer variable Well yes ! we can do so so now let's assume that the address stored in p is something like 2002 so any guesses what p plus one will be Will it be 2003 ? Well no .. (p + 1) will be 2006 this is because if p is an integer pointer increamenting it by one unit takes us to the address of the next integer and because the size of an integer is four bytes so, to go to the next integer address we need to skip 4 bytes. so, p plus one increments p by 4 bytes I'll write another print statement in which I will print size of an integer variable and i will write something like sizeof integer is and we have a function in C, sizeof that gives us the size of the data type so this statement, this print statement will give us the size of integer and let's write in the first and third print statements something like address p is blah and address (p+1) is blah.. so let's now run this and see what happens okay.. so the output is address p is4 586052 which is some address and then we print size of integer is 4 bytes. so, for this particular compiler the size of an integer is four bytes and address (p+1) is four bytes more than address p you can try this thing out for a character pointer or a double pointer or a pointer for some other data type okay so we could also increment this by 2 and what happens if we increament this by 2. well, it will increment the address by 8 So, this will be like 2010 p plus 2 will be 2010 and this 2002 and 2010 is something that i have picked up randomly just for the sake of example ok so now once again what if i want to print the value at this particular address so i am printing two more lines here now. I am printing value at address p and i will print *p. It gives us the value at that address and we will print another line we will say that value at address (p+1) is and this should be *(p+1) we put the star operator in front of the address okay, so now what will be the output okay so the output is that address p is some address and value at address p is 10 which is alright because we had stored the address of variable a in p now next line is size of integer is 4 bytes and and p plus one is four more than the address p and the value at address p+1 is some integer value that I do not know about in fact this is some garbage value because because we do not really have an integer allocated to this particular memory address and this is one dangerous thing about c using pointer arithmetic using pointer manipulation you can reach to to any address and sometimes these kind of operations can bring some unwanted behavior to your program i recommend trying these things out, these snippets of code with other data types like characters or float and the results will be similar. So, this was some playing around with pointers and in the coming lessons we will talk more about pointers and we will talk about pointers in the context of arrays So, thanks for watching !
