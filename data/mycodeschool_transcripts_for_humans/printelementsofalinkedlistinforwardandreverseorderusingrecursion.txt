With timestamps:

00:00 - In our series on linked list so far, we
have implemented
00:03 - some of the basic operations like
insertion deletion
00:07 - and traversal. Now in this lesson we
will write
00:10 - code to traverse and print the
elements of a linked list using
00:15 - recursion.
00:16 - Prerequisite for this lesson is that you
should understand recursion as a
00:20 - programming concept
00:21 - well. Recursive traversal of linked list
actually helps us solve
00:25 - couple of interesting problems but in
this lesson we will keep it simple
00:29 - We will just traverse and print
all the elements in linked list using
00:33 - recursion.
00:34 - and we will write one simple variation
00:37 - to print all the elements in reverse order.
using recursion.
00:40 - We will actually not reverse the
list we will just
00:43 - print the elements in reverse order.
00:47 - So, once again I have taken example of a
linked list of integers here
00:51 - we have four nodes, each rectangle here is
a Node
00:54 - It has two fields, one to store the data
and another to store the address of the
00:59 - next node
01:00 - let's say we have four Nodes at addresses
100 200 150 and 250 respectively.
01:05 - And of course we will also have a
variable that will store
01:09 - the address of the head node. Let's name
this variable head.
01:12 - Programmatically in our C or C plus plus
program
01:16 - Node will be defined something like this
We will have a structure with 
01:21 - two fields,
01:21 - one to store the data and another to
01:24 - store the address of the next Node. What
we want to do in this particular
01:30 - lesson is that we want to write two
functions
01:33 - first we want to write a function named
print that will take
01:37 - address of the Node as argument. We will first
past this function the address of the
01:41 - head node, so
01:42 - let's name this argument head and in
this function we will use recursion
01:47 - to print elements in the list so for
this particular example here
01:51 - if we want to print a space separated
list of all the elements
01:56 - our output will be something like this and
we also want to write
01:59 - another function named reverse print.
Here also we will take the
02:04 - address of the Node. So we will pass this
guy the address of the head node
02:08 - and in this function we will use 
recursion to print the elements in the list
02:12 - in
02:13 - reversed order. So if we have to print a
space separated list for this example
02:17 - our output will be something like this.
So let's first implement the print
02:23 - function.
02:24 - in my C code here, I will declare print
function like this
02:28 - it will take as argument the address 
of a node
02:31 - so the argument is of type pointer to Node.
Initially we will pass the address of the
02:36 - head node.
02:37 - We can name this argument head or we can
name this argument p.
02:41 - we can name it whatever but we must
understand that this
02:44 - will be local variable and let's not
bother about
02:47 - other infrastructure in the code like
how we would create
02:50 - a linked list and how we would insert
a node in the linked list.
02:54 - let's assume that they are in place so let's
keep the name of this particular
02:58 - argument
02:59 - p. Now recursion is a function calling
03:02 - itself so we have been passed the address
of the node initially the head node,
03:07 - so what we can do in our code is first we can
print
03:10 - the value at that particular node with
a printf
03:14 - statement like this and then we can
make another call to the print function
03:18 - and this time we will pass the
03:20 - address of the next node with a
statement like this. This next
03:25 - field is also a pointer to node, so
this will
03:28 - pass the address of the, this will be the
address of the next node
03:32 - Now, there is one more important thing in
recursion
03:36 - and that we should never forget and it's
the exit condition from recursion.
03:41 - we should not go on making recursive
calls infinitely.
03:44 - So in this case if we go from the first
node to the second node and from the
03:50 - second node to the
03:51 - third node using recursion, then finally
at one stage,
03:55 - p will be equal to NULL in one of the calls. So at
this stage
03:59 - we can avoid making a recursive call,
we will
04:02 - exit and we will show you a simulation of
how things will happen.
04:06 - in memory. Hold on for a while,so once we
will reach the end of the list
04:11 - p will be equal to NULL and we will
exit.
04:15 - the recursion at that stage. Now I will write
the main method,
04:18 - We have already written the insert function
here so
04:22 - I'll declare a variable head as NULL
04:25 - in the main method. So head will be a
local variable. Once again
04:29 - we could name this particular variable
a or b or whatever
04:33 - Just because this variable points to the
head node or the first node in the list
04:38 - we name this variable as head
04:40 - and then we will insert some nodes in
the linked list
04:43 - by making calls to the insert
function
04:47 - that takes the address of the head node as
argument.
04:51 - Initially head is set as NULL to say
that the list is empty
04:54 - and there should be two arguments to head
04:58 - to the function insert. The address of
the head node
05:01 - and the value that needs to be inserted
05:04 - and why is it that this particular function
insert is
05:08 - returning a pointer. It's because this
05:12 - head in the main method is a local
variable
05:15 - and if we pass it to the function we
just pass a copy
05:19 - of the address of the head node. In this head
which will be
05:23 - a local variable of the insert function so
this guy returns us back
05:27 - the address of the modified head. So,
we can update it
05:31 - in the main function. This function inserts
a
05:35 - a node at the end of the list. So, initially
when head is null
05:38 - head will be modified in the insert
function
05:42 - For other cases it will not be modified
if we are inserting at the end
05:46 - so we will make four such calls to the
insert function
05:50 - to create a linked list of four integers
2, 4, 6, 5
05:54 - and now we will make a call to print
function
05:58 - and pass it the address of the head node.
Let us now
06:02 - run this code and see what happens. As you
can see
06:05 - we have got this output 2, 4, 6, 5
06:09 - The print function here in our code
which is a recursive
06:13 - implementation to print the lists is
working
06:17 - now I'll make one slight change in the
print function
06:19 - instead of printing the value in the
node and then making making a recursive
06:24 - call
06:24 - I will first make a recursive call and then
when the recursive call finishes,
06:29 - I will print the value in the Node and
06:33 - I will not modify anything else in the code.
The main method will remain the same
06:37 - And if we run this code,
06:40 - we can see that the elements in the
list are printed in reverse order.
06:44 - So we just implemented the reverse print
print function that we have talked about
06:49 - Let us now analyse these two
recursive implementations
06:52 - in a logical view in our example here
06:56 - if we want to print this particular list
we will do something like
07:00 - from the main method we will make a
call to the
07:03 - print function passing it the address of the head
node
07:06 - so initially this print function it's been
called with 
07:10 - p equal 100 now in the execution of
this function we will come here
07:14 - if p is equal to NULL, NULL is address
zero.
07:17 - And our argument is 100 so control will not
go inside
07:21 - this if condition. We will come here we will print
07:26 - p-> data. p->data means that
we will first dereference the address
07:30 - So, we will go to the address 100 and then we
will look at the data field there.
07:35 - So, on the console we will print the data field
of
07:39 - the data field at address 100 and now the
07:44 - recursive call we will make a call
to print function
07:49 - passing it address p->next which is
07:53 - 200 and execution of this particular
call will not finish
07:57 - It will finish only after print(200)
finishes. 
08:01 - We will come back to it now print(200)
once again
08:05 - prints the data at address 200 and
then makes a recursive call
08:10 - to print function passing address 150
and we will go on like this.
08:16 - In this call to print with address 250
08:19 - We will first print the data and the address
field
08:23 - the value of P->next 
08:27 - is 0, what we can also say NULL. 
08:30 - We will make a call like this. Now for this
call
08:34 - with arguments null we have reached end,
the exit condition
08:38 - recursion will not grow
further. So we will just print an
08:42 - end-of-line
08:43 - and return.
08:46 - This particular structure that we have
drawn here
08:48 - is called recursion tree so
08:52 - print(NULL) function will finish
and control will return back to 
08:57 - print(250) there is no statement after
09:00 - this particular recursive call
finishes so we will simply
09:04 - exit this function call also and control
will return back to print(150).
09:09 - And we will go on like this. Finally we
will come back to the main method
09:14 - If you want to see how the recursion
will execute in the memory
09:19 - Then i will have to draw a diagram like
this. Applications memory,
09:23 - the memory that is allocated for the
execution of a program
09:26 - has these two sections. All the details
of function called execution and the
09:32 - local variables
09:33 - they're stored in the stack section of
the memory
09:37 - and any memory that is allocated using
the malloc function
09:41 - or the new operator in C plus plus they
go to the heap section
09:45 - The memory for the Nodes in a linked
list is allocated
09:49 - from the heap so that's why
09:52 - these four nodes in our example are
sitting in the heap.
09:56 - If you want to know in detail about
stack and heap, check the description of
10:00 - this video for a lesson on dynamic
memory allocation. 
10:03 - When the program will start executing
first the main function will be invoked
10:07 - anytime a function is invoked some
amount of memory from the stack is
10:11 - allocated for the
10:12 - execution of that particular function
and is called the stack frame of that
10:16 - function
10:17 - so let's say Main is executing. We have
already inserted
10:21 - some nodes in the linked list. We have
this variable head in the
10:25 - main function so all the local variables
will sit
10:29 - in the stack frame of the function so
head will sit here.
10:33 - Now at this stage let's say main
makes a call to print function
10:36 - so main was executing and now it makes a
call to print function
10:39 - execution of Main will be paused and
we will go on to execute the print function.
10:45 - The argument passed to the print function is
100 which is
10:49 - stored in the local area. This
argument p is a local variable in the
10:54 - print function
10:54 - Now, print function again makes a recursive call.
Now, stack frame is alocated
10:59 - corresponding to
11:00 - each call of a function. So,
11:03 - a function calling itself is not
different from a function calling
11:06 - another function. At any time whatever
function call is at the
11:10 - top of the stack is executing. Finally
when we will reach the exit condition
11:15 - of recursion, stack will be something
like this. 
11:17 - First this call where p is 0 will
finish. 
11:21 - We will come back to this particular call
and then this will finish
11:25 - and we will go on like this
11:28 - so this is how recursion works. 
This is how things will
11:32 - happen in the memory. Okay so now I'll
11:35 - clear this diagram of stack and heap in
the right
11:39 - and I'll make some change in my print
function.
11:42 - What I've done is I have renamed
my function
11:45 - Print as ReversePrint and in my
function
11:50 - I am first making a recursive call
and after coming back from that 
11:54 - recursive call
11:55 - I'm writing a print statement and from
the main function
11:59 - I'll make a call to reverseprint. Let's write
12:02 - RP as shortcut for ReversePrint and
initially I will pass the address of the head
12:07 - node
12:07 - so I'll make a call like this ReversePrint(100).
12:11 - The control will come inside
this function. p is 100. It is not equal
12:15 - to null.
12:16 - and I have also drawn the console like
before now this particular function call
12:21 - does not print first it just makes a recursive call
12:24 - so this guy will go ahead and make a
recursive call
12:28 - to the ReversePrint function passing it
address 200
12:31 - nothing will be written on the console and
once again
12:35 - this particular function will make a
recursive call
12:38 - like this and once again this particular
function will
12:42 - go ahead and make a recursive call like
this and finally we
12:46 - will have recursive call where the
function is at
12:49 - address null. At this stage we will come to
12:53 - the exit condition in recursion. The
recursion will not grow any further.
12:57 - We will simply return, the control
will return
13:00 - to this particular call, ReversePrint(250)
13:03 - So we will come here now. To this
Printf statement
13:08 - the data field at address 250 is 4.
13:12 - So, 4 will be printed on the console
and now this particular function call
13:16 - will finish
13:17 - and now we will  go to ReversePrint(150) and now
this call will
13:21 - print 5 and exit and we will go on like
this.
13:25 - Finally we will return back to the
main function with this
13:29 - output on the console, the elements of
the list printed in reverse order
13:35 - So, this was a recursive traversal of
linked list
13:38 - to print its elements.  I must point out
here
13:41 - that for normal traversal of the linked
list not for
13:44 - the reverse print, for the normal print an
iterative approach will be a lot more
13:49 - efficient than the
13:50 - recursive approach because in
iterative approach we will just use
13:55 - one temporary variable while in
recursion
13:58 - we will use space in the stack section
of the memory for so many function calls
14:03 - so there is implicit use of memory there.
14:06 - for ReversePrint operation we will any day 
have to store elements in some
14:11 - structure
14:12 - so if we use recursion it's still okay.
14:15 - In the coming lessons we will solve
more problems, more interesting problems
14:19 - on linked list. 
14:20 - So thanks for watching!

Cleaned transcript:

In our series on linked list so far, we have implemented some of the basic operations like insertion deletion and traversal. Now in this lesson we will write code to traverse and print the elements of a linked list using recursion. Prerequisite for this lesson is that you should understand recursion as a programming concept well. Recursive traversal of linked list actually helps us solve couple of interesting problems but in this lesson we will keep it simple We will just traverse and print all the elements in linked list using recursion. and we will write one simple variation to print all the elements in reverse order. using recursion. We will actually not reverse the list we will just print the elements in reverse order. So, once again I have taken example of a linked list of integers here we have four nodes, each rectangle here is a Node It has two fields, one to store the data and another to store the address of the next node let's say we have four Nodes at addresses 100 200 150 and 250 respectively. And of course we will also have a variable that will store the address of the head node. Let's name this variable head. Programmatically in our C or C plus plus program Node will be defined something like this We will have a structure with two fields, one to store the data and another to store the address of the next Node. What we want to do in this particular lesson is that we want to write two functions first we want to write a function named print that will take address of the Node as argument. We will first past this function the address of the head node, so let's name this argument head and in this function we will use recursion to print elements in the list so for this particular example here if we want to print a space separated list of all the elements our output will be something like this and we also want to write another function named reverse print. Here also we will take the address of the Node. So we will pass this guy the address of the head node and in this function we will use recursion to print the elements in the list in reversed order. So if we have to print a space separated list for this example our output will be something like this. So let's first implement the print function. in my C code here, I will declare print function like this it will take as argument the address of a node so the argument is of type pointer to Node. Initially we will pass the address of the head node. We can name this argument head or we can name this argument p. we can name it whatever but we must understand that this will be local variable and let's not bother about other infrastructure in the code like how we would create a linked list and how we would insert a node in the linked list. let's assume that they are in place so let's keep the name of this particular argument p. Now recursion is a function calling itself so we have been passed the address of the node initially the head node, so what we can do in our code is first we can print the value at that particular node with a printf statement like this and then we can make another call to the print function and this time we will pass the address of the next node with a statement like this. This next field is also a pointer to node, so this will pass the address of the, this will be the address of the next node Now, there is one more important thing in recursion and that we should never forget and it's the exit condition from recursion. we should not go on making recursive calls infinitely. So in this case if we go from the first node to the second node and from the second node to the third node using recursion, then finally at one stage, p will be equal to NULL in one of the calls. So at this stage we can avoid making a recursive call, we will exit and we will show you a simulation of how things will happen. in memory. Hold on for a while,so once we will reach the end of the list p will be equal to NULL and we will exit. the recursion at that stage. Now I will write the main method, We have already written the insert function here so I'll declare a variable head as NULL in the main method. So head will be a local variable. Once again we could name this particular variable a or b or whatever Just because this variable points to the head node or the first node in the list we name this variable as head and then we will insert some nodes in the linked list by making calls to the insert function that takes the address of the head node as argument. Initially head is set as NULL to say that the list is empty and there should be two arguments to head to the function insert. The address of the head node and the value that needs to be inserted and why is it that this particular function insert is returning a pointer. It's because this head in the main method is a local variable and if we pass it to the function we just pass a copy of the address of the head node. In this head which will be a local variable of the insert function so this guy returns us back the address of the modified head. So, we can update it in the main function. This function inserts a a node at the end of the list. So, initially when head is null head will be modified in the insert function For other cases it will not be modified if we are inserting at the end so we will make four such calls to the insert function to create a linked list of four integers 2, 4, 6, 5 and now we will make a call to print function and pass it the address of the head node. Let us now run this code and see what happens. As you can see we have got this output 2, 4, 6, 5 The print function here in our code which is a recursive implementation to print the lists is working now I'll make one slight change in the print function instead of printing the value in the node and then making making a recursive call I will first make a recursive call and then when the recursive call finishes, I will print the value in the Node and I will not modify anything else in the code. The main method will remain the same And if we run this code, we can see that the elements in the list are printed in reverse order. So we just implemented the reverse print print function that we have talked about Let us now analyse these two recursive implementations in a logical view in our example here if we want to print this particular list we will do something like from the main method we will make a call to the print function passing it the address of the head node so initially this print function it's been called with p equal 100 now in the execution of this function we will come here if p is equal to NULL, NULL is address zero. And our argument is 100 so control will not go inside this if condition. We will come here we will print p> data. p>data means that we will first dereference the address So, we will go to the address 100 and then we will look at the data field there. So, on the console we will print the data field of the data field at address 100 and now the recursive call we will make a call to print function passing it address p>next which is 200 and execution of this particular call will not finish It will finish only after print(200) finishes. We will come back to it now print(200) once again prints the data at address 200 and then makes a recursive call to print function passing address 150 and we will go on like this. In this call to print with address 250 We will first print the data and the address field the value of P>next is 0, what we can also say NULL. We will make a call like this. Now for this call with arguments null we have reached end, the exit condition recursion will not grow further. So we will just print an endofline and return. This particular structure that we have drawn here is called recursion tree so print(NULL) function will finish and control will return back to print(250) there is no statement after this particular recursive call finishes so we will simply exit this function call also and control will return back to print(150). And we will go on like this. Finally we will come back to the main method If you want to see how the recursion will execute in the memory Then i will have to draw a diagram like this. Applications memory, the memory that is allocated for the execution of a program has these two sections. All the details of function called execution and the local variables they're stored in the stack section of the memory and any memory that is allocated using the malloc function or the new operator in C plus plus they go to the heap section The memory for the Nodes in a linked list is allocated from the heap so that's why these four nodes in our example are sitting in the heap. If you want to know in detail about stack and heap, check the description of this video for a lesson on dynamic memory allocation. When the program will start executing first the main function will be invoked anytime a function is invoked some amount of memory from the stack is allocated for the execution of that particular function and is called the stack frame of that function so let's say Main is executing. We have already inserted some nodes in the linked list. We have this variable head in the main function so all the local variables will sit in the stack frame of the function so head will sit here. Now at this stage let's say main makes a call to print function so main was executing and now it makes a call to print function execution of Main will be paused and we will go on to execute the print function. The argument passed to the print function is 100 which is stored in the local area. This argument p is a local variable in the print function Now, print function again makes a recursive call. Now, stack frame is alocated corresponding to each call of a function. So, a function calling itself is not different from a function calling another function. At any time whatever function call is at the top of the stack is executing. Finally when we will reach the exit condition of recursion, stack will be something like this. First this call where p is 0 will finish. We will come back to this particular call and then this will finish and we will go on like this so this is how recursion works. This is how things will happen in the memory. Okay so now I'll clear this diagram of stack and heap in the right and I'll make some change in my print function. What I've done is I have renamed my function Print as ReversePrint and in my function I am first making a recursive call and after coming back from that recursive call I'm writing a print statement and from the main function I'll make a call to reverseprint. Let's write RP as shortcut for ReversePrint and initially I will pass the address of the head node so I'll make a call like this ReversePrint(100). The control will come inside this function. p is 100. It is not equal to null. and I have also drawn the console like before now this particular function call does not print first it just makes a recursive call so this guy will go ahead and make a recursive call to the ReversePrint function passing it address 200 nothing will be written on the console and once again this particular function will make a recursive call like this and once again this particular function will go ahead and make a recursive call like this and finally we will have recursive call where the function is at address null. At this stage we will come to the exit condition in recursion. The recursion will not grow any further. We will simply return, the control will return to this particular call, ReversePrint(250) So we will come here now. To this Printf statement the data field at address 250 is 4. So, 4 will be printed on the console and now this particular function call will finish and now we will go to ReversePrint(150) and now this call will print 5 and exit and we will go on like this. Finally we will return back to the main function with this output on the console, the elements of the list printed in reverse order So, this was a recursive traversal of linked list to print its elements. I must point out here that for normal traversal of the linked list not for the reverse print, for the normal print an iterative approach will be a lot more efficient than the recursive approach because in iterative approach we will just use one temporary variable while in recursion we will use space in the stack section of the memory for so many function calls so there is implicit use of memory there. for ReversePrint operation we will any day have to store elements in some structure so if we use recursion it's still okay. In the coming lessons we will solve more problems, more interesting problems on linked list. So thanks for watching!
