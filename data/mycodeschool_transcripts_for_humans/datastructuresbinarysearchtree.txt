With timestamps:

00:00 - In our previous lesson, we talked about binary
trees in general.
00:03 - Now, in this lesson we are going to talk about
binary search tree, a special kind of binary
00:08 - tree which is an efficient structure to organize
data for quick search as well as quick update.
00:15 - But before I start talking about binary search
tree, I want you to think of a problem.
00:21 - What data structure will you use to store
a modifiable collection?
00:25 - So, lets say you have a collection and it
can be a collection of any data type, records
00:30 - in the collection can be of any type.
00:32 - Now, you want to store this collection in
computers memory in some structure and then
00:38 - you want to be able to quickly search for
a record in the collection and you also want
00:43 - to be able to modify the collection.
00:46 - You want to be able to insert an element in
the collection or remove an element from the
00:50 - collection.
00:51 - So, what data structure will you use?
00:53 - Well, you can use an array or a linked list.
00:57 - These are two well known data structure in
which we can store a collection.
01:01 - Now, what will be running time of these operations
- search, insertion or removal, If we will
01:07 - use an array or a linked list.
01:09 - Lets first talk about arrays and for sale
of simplicity, lets say we want to store integers.
01:14 - To store a modifiable list or collection of
integers, we can create a large enough array
01:21 - and we can store the records in some part
of the array.
01:24 - We can keep the end of the list marked.
01:26 - In this array that I am showing here, we have
integers from 0 till 3.
01:30 - We have records from 0 till 3 and rest of
the array is available space.
01:35 - Now to search some X in the collection, we
will have to scan the array from index 0 till
01:42 - end and in worst case, we may have to look
at all the elements in the list.
01:48 - If n is the number of elements in the list,
time taken will be proportional to n or in
01:52 - other words, we can say that time complexity
will be big-oh of n.
01:57 - Ok, now what will be the cost of insertion.
02:00 - Lets say we want to insert number 5 in this
list.
02:03 - So, if there is some available space, all
the cells in yellow are available, we can
02:09 - add one more cell by incrementing this marker
'end' and fill in the integer to be added.
02:17 - Time taken for this operation will be constant.
02:19 - Running time will not depend upon number of
elements in the collection.
02:23 - So, we can say that time complexity will be
big-oh of 1.
02:28 - Ok, now what about removal.
02:30 - Lets say we want to remove 1 from the collection.
02:34 - What we'll have to do is, we'll have to shift
all records to the right of one by one position
02:40 - to the left and then we can decrement end.
02:43 - The cost of removal once again will be big-oh
of n.
02:48 - In worst case, we will have to shift n-1 elements.
02:52 - Here, the cost of insertion will be big-oh
of 1, if the array will have some available
02:58 - space.
02:59 - So, the array has to be large enough.
03:02 - If the array gets filled, what we can do is,
we can create a new larger array, typically
03:08 - we create an array twice the size of the filled
up array.
03:12 - So, we can create a new larger array and then
we can copy the content of the filled up array
03:17 - into this new larger array.
03:19 - The copy operation will cost us big-oh of
n.
03:22 - We have discussed this idea of dynamic array
quite a bit in our previous lessons.
03:27 - So, insertion will be big-oh of 1 if array
is not filled up and it will be big-oh of
03:32 - n if array is filled up.
03:35 - For now, lets just assume that the array will
always be large enough.
03:39 - Lets now discuss the cost of these operations
if we will use a linked list.
03:45 - If we would use a linked list, I have drawn
a linked list of integers here, data type
03:50 - can be anything, the cost of search operation
once again will be big-oh of n where n is
03:57 - number of records in the collection or number
of nodes in the linked list.
04:01 - To search, in worst case, we will have to
traverse the whole list.
04:05 - We will have to look at all the nodes.
04:07 - The cost of insertion in a linked list is
big-oh of 1 at head and its big-oh of n at
04:14 - tail.
04:15 - We can choose to insert at head to keep the
cost low.
04:19 - So, running time of insertion, we can say
is big-oh of 1 or in other words, we will
04:24 - take constant time.
04:27 - Removal once again will be big-oh of n.
04:30 - We will first have to traverse the linked
list and search the record and in worst case,
04:35 - we may have to look at all the nodes.
04:36 - Ok, so this is the cost of operations if we
are going to use array or linked list.
04:42 - Insertion definitely is fast.
04:44 - But, how good is big-oh of n for an operation
like search.
04:49 - What do you think?
04:51 - if we are searching for a record X, then in
the worst case, we will have to compare this
04:56 - record X with all the n records in the collection.
05:00 - Lets say, our machine can perform a million
comparisons in one second.
05:04 - So, we can say that machine can perform 10
the power 6 comparisons in one second.
05:10 - So, cost of one comparison will be 10 to the
power -6 second.
05:15 - Machines in today's world deal with really
large data.
05:18 - Its very much possible for real world data
to have 100 million records or billion records.
05:23 - A lot of countries in this world have population
more than 100 million.
05:27 - 2 countries have more than a billion people
living in them.
05:31 - If we will have data about all the people
living in a country, then it can easily be
05:35 - 100 million records.
05:36 - Ok, so if we are saying that the cost of 1
comparison is 10 the power -6 second.
05:42 - If n will be 100 million, time taken will
be 100 seconds.
05:46 - 100 seconds for a search is not reasonable
and search may be a frequently performed operation.
05:54 - Can we do something better?
05:55 - Can we do better than big-oh of n.
05:57 - Well, in an array, we can perform binary search
if its sorted and the running time of binary
06:04 - search is big-oh of log n which is the best
running time to have.
06:09 - I have drawn this array of integers here.
06:11 - Records in the array are sorted.
06:13 - Here the data type is integer.
06:16 - For some other data type, for some complex
data type, we should be able to sort the collection
06:21 - based on some property or some key of the
records.
06:24 - We should be able to compare the keys of records
and the comparison logic will be different
06:30 - for different data types.
06:31 - For a collection of strings, for example,
we may want to have the records sorted in
06:36 - dictionary or lexicographical order.
06:39 - So, we will compare and see which string will
come first in dictionary order.
06:44 - Now this is the requirement that we have for
binary search.
06:47 - The data structure should be an array and
the records must be sorted.
06:51 - Ok, so the cost of search operation can be
minimized if we will use a sorted array.
06:56 - But, in insertion or removal, we will have
to make sure that the array is sorted afterwards.
07:02 - In this array, if I want to insert number
5 at this stage, i can't simply put 5 at index
07:09 - 6.
07:10 - what I'll have to do is, I'll first have to
find the position at which I can insert 5
07:15 - in the sorted list.
07:17 - We can find the position in order of log n
time using binary search.
07:22 - We can perform a binary search to find the
first integer greater than 5 in the list.
07:27 - So, we can find the position quickly.
07:30 - In this case, its index 2.
07:32 - But then, we will have to shift all the records
starting this position one position to the
07:40 - right.
07:42 - And now, I can insert 5.
07:44 - So, even though we can find the position at
which a record should be inserted quickly
07:49 - in big-oh of log n, this shifting in worst
case will cost us big-oh of n.
07:54 - So, the running time overall for an insertion
will be big-oh of n and similarly, the cost
08:00 - of removal will also be big-oh of n.
08:03 - We will have to shift some records.
08:05 - Ok, so when we are using sorted array, cost
of search operation is minimized.
08:10 - In binary search for n records, we will have
at max log n to the base 2 comparisons.
08:17 - So, if we can perform million comparisons
in a second, then for n equal 2 to the power
08:25 - 31 which is greater than 2 billion, we are
going to take only 31 micro-seconds.
08:32 - log of 2 to the power 31 to base 2 will be
31.
08:36 - Ok, we are fine with search now.
08:39 - we will be good for any practical value of
n.
08:42 - But what about insertion and removal.
08:44 - They are still big-oh of n.
08:46 - Can we do something better here?
08:48 - Well, if we will use this data structure called
binary search tree, I am writing it in short
08:53 - - BST for binary search tree, then the cost
of all these 3 operations can be big-oh of
09:00 - log n in average case.
09:03 - The cost of all the operations will be big-oh
of n in worst case.
09:08 - But we can avoid the worst case by making
sure that the tree is always balanced.
09:13 - We had talked about balanced binary tree in
our previous lesson.
09:17 - Binary search tree is only a special kind
of binary tree.
09:20 - To make sure that the cost of these operations
is always big-oh of log n, we should keep
09:25 - the binary search tree balanced.
09:27 - We'll talk about this in detail later.
09:30 - Let's first see what a binary search tree
is and how cost of these operations is minimized
09:36 - when we use a binary search tree.
09:39 - Binary search tree is a binary tree in which
for each node, value of all the nodes in left
09:47 - sub-tree is lesser and value of all the nodes
in right sub-tree is greater.
09:53 - I have drawn binary tree as a recursive structure
here.
09:57 - As we know, in a binary tree, each node can
have at most 2 children.
10:01 - We can call one of the children left child.
10:04 - If we will look at the tree as recursive structure,
left child will be the root of left sub-tree
10:10 - and similarly, right child will be the root
of right sub-tree.
10:14 - Now, for a binary tree to be called binary
search tree, value of all the nodes in left
10:20 - sub-tree must be lesser or we can say lesser
or equal to handle duplicates and the value
10:28 - of all the nodes in right sub-tree must be
greater and this must be true for all the
10:34 - nodes.
10:35 - So, in this recursive structure here, both
left and right sub-trees must also be binary
10:40 - search trees.
10:42 - I'll draw a binary search tree of integers.
10:44 - Now, I have drawn a binary search tree of
integers here.
10:48 - Lets see whether this property that for each
node value of all the nodes in left subtree
10:53 - is lesser or equal and the value of all the
nodes in right sub-tree must be greater is
11:00 - true or not.
11:02 - Lets first look at the root node.
11:04 - Nodes in the left subtree have values 10,
8 and 12.
11:08 - So, they are all lesser than15 and in right
subtree, we have 17, 20 and 25, they are all
11:16 - greater than 15.
11:17 - So, we are good for the root node.
11:19 - Now, lets look at this node with value 10.
11:23 - In left, we have 8 which is lesser.
11:25 - In right, we have 12 which is greater.
11:27 - So, we are good.
11:29 - We are good for this node too having value
20 and we don't need to bother about leave
11:35 - nodes because they do not have children.
11:37 - So, this is a binary search tree.
11:40 - Now, what if I change this value 12 to 16.
11:45 - Now, is this still a binary search tree.
11:47 - Well, for node with value 10, we are good.
11:51 - The node with value 16 is in its right.
11:54 - So, not a problem.
11:56 - But for the root node, we have a node in left
sub-tree with higher value now.
12:01 - So, this tree is not a binary search tree.
12:04 - I'll revert back and make the value 12 again.
12:07 - Now, as we were saying we can search, insert
or delete in a binary search tree in big-oh
12:13 - of log n time in average case.
12:16 - How is it really possible?
12:18 - Lets first talk about search.
12:20 - If these integers that I have here in the
tree were in a sorted array, we could have
12:25 - performed binary search and what do we do
in binary search.
12:30 - Lets say we want to search number 10 in this
array.
12:32 - What we do in binary search is, we first define
the complete list as our search space.
12:38 - The number can exist only within the search
space.
12:41 - I'll mark search space using these two pointers
- start and end.
12:45 - Now, we compare the number to be searched
or the element to be searched with mid element
12:51 - of the search space or the median.
12:55 - And if the record being searched, if the element
being searched is lesser, we go searching
12:59 - in the left half, else we go searching in
the right half.
13:03 - In case of equality, we have found the element.
13:07 - In this case, 10 is lesser than 15.
13:09 - So, we will go searching towards left.
13:12 - Our search space is reduced now to half.
13:16 - Once again, we will compare to the mid-element
and bingo, this time, we have got a match.
13:21 - In binary search, we start with n elements
in search space and then if mid element is
13:27 - not the element that we are looking for, we
reduce the search space to n/2 and we go on
13:32 - reducing the search space to half, till we
either find the record that we are looking
13:36 - for or we get to only one element in search
space and be done.
13:42 - In this whole reduction, if we will go from
n to n/2 to n/4 to n/8 and so on, we will
13:49 - have log n to the base 2 steps.
13:52 - If we are taking k steps, then n upon 2 to
the power k will be equal to 1 which will
13:58 - imply 2 to the power k will be equal to n
and k will be equal to log n to the base 2.
14:03 - So, this is why running time of binary search
is big-oh of log n.
14:08 - Now, if we will use this binary search tree
to store the integers, search operation will
14:14 - be very similar.
14:16 - Lets say, we want to search for number 12.
14:18 - What we'll do is, we start at root and then
we will compare the value to be searched,
14:23 - the integer to be searched with value of the
root.
14:27 - if its equal, we are done with the search,
if its lesser, we know that we need to go
14:31 - to the left sub-tree because in a binary search
tree, all the elements in left sub-tree are
14:37 - lesser and all the elements in right sub-tree
are greater.
14:40 - Now, we will go and look at the left child
of node with value 15.
14:46 - We know that number 12 that we are looking
for can exist in this sub-tree only and anything
14:52 - apart from the sub-tree is discarded.
14:54 - So, we have reduced the search space to only
these 3 nodes having value 10, 8 and 12.
15:01 - Now, once again, we will compare 12 with 10.
15:03 - We are not equal.
15:05 - 12 is greater, so we know that we need to
go looking in right sub-tree of this node
15:12 - with value 10.
15:13 - So, now our search space is reduced to just
one node.
15:17 - Once again, we will compare the value here
at this node and we have a match.
15:23 - So, searching an element in binary search
tree is basically this traversal in which
15:29 - at each step, we will go either towards left
or right and hence at each step, we will discard
15:35 - one of the sub-trees.
15:37 - if the tree is balanced, we call a tree balanced
if for all nodes, the difference between the
15:42 - heights of left and right sub-trees is not
greater than 1.
15:47 - So, if the tree is balanced, we will start
with a search space of n nodes and when we
15:54 - will discard one of the sub-trees, we will
discard n/2 nodes.
15:57 - So, our search space will be reduced to n/2
and then in next step, we will reduce the
16:03 - search space to n/4.
16:05 - We will go on reducing like this till we find
the element or till our search space is reduced
16:11 - to only one node when we will be done.
16:13 - So, the search here is also a binary search.
16:17 - And that's why the name - Binary Search Tree.
16:19 - This tree that I am showing here is balanced.
16:22 - In fact this is a perfect binary tree.
16:24 - But with same records, we can have an unbalanced
tree like this.
16:28 - This tree has got the same integer values
as we had in the previous structure and this
16:33 - is also a binary search tree, but this is
unbalanced.
16:36 - This is as good as a linked list.
16:38 - In this tree there is no right sub-tree for
any of the nodes.
16:42 - Search space will be reduced by only one.at
each step.
16:46 - From n nodes in search space, we will go to
n-1 nodes and then to n-2 nodes, all the way
16:52 - till 1 will be n steps.
16:55 - In binary search tree, in average case, cost
of search, insertion or deletion is big-oh
17:01 - of log n and in worst case, this is the worst
case arrangement that I am showing you.
17:06 - The running time will be big-oh of n.
17:08 - We always try to avoid the worst case by trying
to keep the binary search tree balanced.
17:14 - With same records in the tree, there can be
multiple possible arrangements.
17:18 - For these integers in this tree, another arrangement
is this.
17:22 - For all the nodes, we have nothing to discard
in left sub-tree in a search.
17:26 - This is another arrangement.
17:28 - This is still balanced because for all the
nodes, the difference between the heights
17:32 - of left and right sub-tree is not greater
than 1.
17:36 - But this is the best arrangement when we have
a perfect binary tree.
17:40 - At each step, we will have exactly n/2 nodes
to discard.
17:43 - Ok, now to insert some records in binary search
tree, we will first have to find the position
17:49 - at which we can insert and we can find the
position in big-oh of log n time.
17:55 - Lets say we want to insert 19 in this tree,
what we will do is start at the root.
18:00 - If the value to be inserted is lesser or equal,
if there is no child, insert as left child
18:06 - or go left.
18:07 - If the value is greater and there is no right
child, insert as right child or go right.
18:13 - In this case, 19 is greater, so we will go
right.
18:16 - Now, we are at 20.
18:17 - 19 is lesser and left sub-tree is not empty.
18:21 - We have a left child.
18:22 - So, we will go left.
18:23 - Now, we are at 17, 19 is greater than 17.
18:26 - So, it should go in right of 17.
18:29 - There is no right child of 17.
18:31 - So, we will create a node with value 19 and
link it to this node with value 17 as right
18:38 - child.
18:39 - Because we are using pointers or references
here just like linked list, no shifting is
18:43 - needed like an array.
18:45 - Creating a link will take constant time.
18:47 - So, overall insertion will also cost us like
search.
18:50 - To delete also, we will first have to search
the node.
18:55 - Search once again will be big-oh of log n
and deleting the node will only mean adjusting
19:00 - some links.
19:01 - So, removal also is going to be like search
- big-oh of log n in average case.
19:07 - Binary search tree gets unbalanced during
insertion and deletion.
19:11 - So, often during insertion and deletion, we
restore the balancing.
19:15 - There are ways to do it and we will talk about
all of this in detail in later lessons.
19:20 - In next lesson, we will discuss implementation
of binary search tree in detail.
19:24 - This is it for this lesson.
19:25 - Thanks for watching.

Cleaned transcript:

In our previous lesson, we talked about binary trees in general. Now, in this lesson we are going to talk about binary search tree, a special kind of binary tree which is an efficient structure to organize data for quick search as well as quick update. But before I start talking about binary search tree, I want you to think of a problem. What data structure will you use to store a modifiable collection? So, lets say you have a collection and it can be a collection of any data type, records in the collection can be of any type. Now, you want to store this collection in computers memory in some structure and then you want to be able to quickly search for a record in the collection and you also want to be able to modify the collection. You want to be able to insert an element in the collection or remove an element from the collection. So, what data structure will you use? Well, you can use an array or a linked list. These are two well known data structure in which we can store a collection. Now, what will be running time of these operations search, insertion or removal, If we will use an array or a linked list. Lets first talk about arrays and for sale of simplicity, lets say we want to store integers. To store a modifiable list or collection of integers, we can create a large enough array and we can store the records in some part of the array. We can keep the end of the list marked. In this array that I am showing here, we have integers from 0 till 3. We have records from 0 till 3 and rest of the array is available space. Now to search some X in the collection, we will have to scan the array from index 0 till end and in worst case, we may have to look at all the elements in the list. If n is the number of elements in the list, time taken will be proportional to n or in other words, we can say that time complexity will be bigoh of n. Ok, now what will be the cost of insertion. Lets say we want to insert number 5 in this list. So, if there is some available space, all the cells in yellow are available, we can add one more cell by incrementing this marker 'end' and fill in the integer to be added. Time taken for this operation will be constant. Running time will not depend upon number of elements in the collection. So, we can say that time complexity will be bigoh of 1. Ok, now what about removal. Lets say we want to remove 1 from the collection. What we'll have to do is, we'll have to shift all records to the right of one by one position to the left and then we can decrement end. The cost of removal once again will be bigoh of n. In worst case, we will have to shift n1 elements. Here, the cost of insertion will be bigoh of 1, if the array will have some available space. So, the array has to be large enough. If the array gets filled, what we can do is, we can create a new larger array, typically we create an array twice the size of the filled up array. So, we can create a new larger array and then we can copy the content of the filled up array into this new larger array. The copy operation will cost us bigoh of n. We have discussed this idea of dynamic array quite a bit in our previous lessons. So, insertion will be bigoh of 1 if array is not filled up and it will be bigoh of n if array is filled up. For now, lets just assume that the array will always be large enough. Lets now discuss the cost of these operations if we will use a linked list. If we would use a linked list, I have drawn a linked list of integers here, data type can be anything, the cost of search operation once again will be bigoh of n where n is number of records in the collection or number of nodes in the linked list. To search, in worst case, we will have to traverse the whole list. We will have to look at all the nodes. The cost of insertion in a linked list is bigoh of 1 at head and its bigoh of n at tail. We can choose to insert at head to keep the cost low. So, running time of insertion, we can say is bigoh of 1 or in other words, we will take constant time. Removal once again will be bigoh of n. We will first have to traverse the linked list and search the record and in worst case, we may have to look at all the nodes. Ok, so this is the cost of operations if we are going to use array or linked list. Insertion definitely is fast. But, how good is bigoh of n for an operation like search. What do you think? if we are searching for a record X, then in the worst case, we will have to compare this record X with all the n records in the collection. Lets say, our machine can perform a million comparisons in one second. So, we can say that machine can perform 10 the power 6 comparisons in one second. So, cost of one comparison will be 10 to the power 6 second. Machines in today's world deal with really large data. Its very much possible for real world data to have 100 million records or billion records. A lot of countries in this world have population more than 100 million. 2 countries have more than a billion people living in them. If we will have data about all the people living in a country, then it can easily be 100 million records. Ok, so if we are saying that the cost of 1 comparison is 10 the power 6 second. If n will be 100 million, time taken will be 100 seconds. 100 seconds for a search is not reasonable and search may be a frequently performed operation. Can we do something better? Can we do better than bigoh of n. Well, in an array, we can perform binary search if its sorted and the running time of binary search is bigoh of log n which is the best running time to have. I have drawn this array of integers here. Records in the array are sorted. Here the data type is integer. For some other data type, for some complex data type, we should be able to sort the collection based on some property or some key of the records. We should be able to compare the keys of records and the comparison logic will be different for different data types. For a collection of strings, for example, we may want to have the records sorted in dictionary or lexicographical order. So, we will compare and see which string will come first in dictionary order. Now this is the requirement that we have for binary search. The data structure should be an array and the records must be sorted. Ok, so the cost of search operation can be minimized if we will use a sorted array. But, in insertion or removal, we will have to make sure that the array is sorted afterwards. In this array, if I want to insert number 5 at this stage, i can't simply put 5 at index 6. what I'll have to do is, I'll first have to find the position at which I can insert 5 in the sorted list. We can find the position in order of log n time using binary search. We can perform a binary search to find the first integer greater than 5 in the list. So, we can find the position quickly. In this case, its index 2. But then, we will have to shift all the records starting this position one position to the right. And now, I can insert 5. So, even though we can find the position at which a record should be inserted quickly in bigoh of log n, this shifting in worst case will cost us bigoh of n. So, the running time overall for an insertion will be bigoh of n and similarly, the cost of removal will also be bigoh of n. We will have to shift some records. Ok, so when we are using sorted array, cost of search operation is minimized. In binary search for n records, we will have at max log n to the base 2 comparisons. So, if we can perform million comparisons in a second, then for n equal 2 to the power 31 which is greater than 2 billion, we are going to take only 31 microseconds. log of 2 to the power 31 to base 2 will be 31. Ok, we are fine with search now. we will be good for any practical value of n. But what about insertion and removal. They are still bigoh of n. Can we do something better here? Well, if we will use this data structure called binary search tree, I am writing it in short BST for binary search tree, then the cost of all these 3 operations can be bigoh of log n in average case. The cost of all the operations will be bigoh of n in worst case. But we can avoid the worst case by making sure that the tree is always balanced. We had talked about balanced binary tree in our previous lesson. Binary search tree is only a special kind of binary tree. To make sure that the cost of these operations is always bigoh of log n, we should keep the binary search tree balanced. We'll talk about this in detail later. Let's first see what a binary search tree is and how cost of these operations is minimized when we use a binary search tree. Binary search tree is a binary tree in which for each node, value of all the nodes in left subtree is lesser and value of all the nodes in right subtree is greater. I have drawn binary tree as a recursive structure here. As we know, in a binary tree, each node can have at most 2 children. We can call one of the children left child. If we will look at the tree as recursive structure, left child will be the root of left subtree and similarly, right child will be the root of right subtree. Now, for a binary tree to be called binary search tree, value of all the nodes in left subtree must be lesser or we can say lesser or equal to handle duplicates and the value of all the nodes in right subtree must be greater and this must be true for all the nodes. So, in this recursive structure here, both left and right subtrees must also be binary search trees. I'll draw a binary search tree of integers. Now, I have drawn a binary search tree of integers here. Lets see whether this property that for each node value of all the nodes in left subtree is lesser or equal and the value of all the nodes in right subtree must be greater is true or not. Lets first look at the root node. Nodes in the left subtree have values 10, 8 and 12. So, they are all lesser than15 and in right subtree, we have 17, 20 and 25, they are all greater than 15. So, we are good for the root node. Now, lets look at this node with value 10. In left, we have 8 which is lesser. In right, we have 12 which is greater. So, we are good. We are good for this node too having value 20 and we don't need to bother about leave nodes because they do not have children. So, this is a binary search tree. Now, what if I change this value 12 to 16. Now, is this still a binary search tree. Well, for node with value 10, we are good. The node with value 16 is in its right. So, not a problem. But for the root node, we have a node in left subtree with higher value now. So, this tree is not a binary search tree. I'll revert back and make the value 12 again. Now, as we were saying we can search, insert or delete in a binary search tree in bigoh of log n time in average case. How is it really possible? Lets first talk about search. If these integers that I have here in the tree were in a sorted array, we could have performed binary search and what do we do in binary search. Lets say we want to search number 10 in this array. What we do in binary search is, we first define the complete list as our search space. The number can exist only within the search space. I'll mark search space using these two pointers start and end. Now, we compare the number to be searched or the element to be searched with mid element of the search space or the median. And if the record being searched, if the element being searched is lesser, we go searching in the left half, else we go searching in the right half. In case of equality, we have found the element. In this case, 10 is lesser than 15. So, we will go searching towards left. Our search space is reduced now to half. Once again, we will compare to the midelement and bingo, this time, we have got a match. In binary search, we start with n elements in search space and then if mid element is not the element that we are looking for, we reduce the search space to n/2 and we go on reducing the search space to half, till we either find the record that we are looking for or we get to only one element in search space and be done. In this whole reduction, if we will go from n to n/2 to n/4 to n/8 and so on, we will have log n to the base 2 steps. If we are taking k steps, then n upon 2 to the power k will be equal to 1 which will imply 2 to the power k will be equal to n and k will be equal to log n to the base 2. So, this is why running time of binary search is bigoh of log n. Now, if we will use this binary search tree to store the integers, search operation will be very similar. Lets say, we want to search for number 12. What we'll do is, we start at root and then we will compare the value to be searched, the integer to be searched with value of the root. if its equal, we are done with the search, if its lesser, we know that we need to go to the left subtree because in a binary search tree, all the elements in left subtree are lesser and all the elements in right subtree are greater. Now, we will go and look at the left child of node with value 15. We know that number 12 that we are looking for can exist in this subtree only and anything apart from the subtree is discarded. So, we have reduced the search space to only these 3 nodes having value 10, 8 and 12. Now, once again, we will compare 12 with 10. We are not equal. 12 is greater, so we know that we need to go looking in right subtree of this node with value 10. So, now our search space is reduced to just one node. Once again, we will compare the value here at this node and we have a match. So, searching an element in binary search tree is basically this traversal in which at each step, we will go either towards left or right and hence at each step, we will discard one of the subtrees. if the tree is balanced, we call a tree balanced if for all nodes, the difference between the heights of left and right subtrees is not greater than 1. So, if the tree is balanced, we will start with a search space of n nodes and when we will discard one of the subtrees, we will discard n/2 nodes. So, our search space will be reduced to n/2 and then in next step, we will reduce the search space to n/4. We will go on reducing like this till we find the element or till our search space is reduced to only one node when we will be done. So, the search here is also a binary search. And that's why the name Binary Search Tree. This tree that I am showing here is balanced. In fact this is a perfect binary tree. But with same records, we can have an unbalanced tree like this. This tree has got the same integer values as we had in the previous structure and this is also a binary search tree, but this is unbalanced. This is as good as a linked list. In this tree there is no right subtree for any of the nodes. Search space will be reduced by only one.at each step. From n nodes in search space, we will go to n1 nodes and then to n2 nodes, all the way till 1 will be n steps. In binary search tree, in average case, cost of search, insertion or deletion is bigoh of log n and in worst case, this is the worst case arrangement that I am showing you. The running time will be bigoh of n. We always try to avoid the worst case by trying to keep the binary search tree balanced. With same records in the tree, there can be multiple possible arrangements. For these integers in this tree, another arrangement is this. For all the nodes, we have nothing to discard in left subtree in a search. This is another arrangement. This is still balanced because for all the nodes, the difference between the heights of left and right subtree is not greater than 1. But this is the best arrangement when we have a perfect binary tree. At each step, we will have exactly n/2 nodes to discard. Ok, now to insert some records in binary search tree, we will first have to find the position at which we can insert and we can find the position in bigoh of log n time. Lets say we want to insert 19 in this tree, what we will do is start at the root. If the value to be inserted is lesser or equal, if there is no child, insert as left child or go left. If the value is greater and there is no right child, insert as right child or go right. In this case, 19 is greater, so we will go right. Now, we are at 20. 19 is lesser and left subtree is not empty. We have a left child. So, we will go left. Now, we are at 17, 19 is greater than 17. So, it should go in right of 17. There is no right child of 17. So, we will create a node with value 19 and link it to this node with value 17 as right child. Because we are using pointers or references here just like linked list, no shifting is needed like an array. Creating a link will take constant time. So, overall insertion will also cost us like search. To delete also, we will first have to search the node. Search once again will be bigoh of log n and deleting the node will only mean adjusting some links. So, removal also is going to be like search bigoh of log n in average case. Binary search tree gets unbalanced during insertion and deletion. So, often during insertion and deletion, we restore the balancing. There are ways to do it and we will talk about all of this in detail in later lessons. In next lesson, we will discuss implementation of binary search tree in detail. This is it for this lesson. Thanks for watching.
