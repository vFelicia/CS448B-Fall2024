With timestamps:

00:00 - in this lesson we will be talking about 
one more scenario in which
00:04 - the concept of
00:05 - arrays and
00:06 - pointers go together
00:08 - and this scenario is when
00:10 - you pass
00:10 - an array as function argument
00:14 - let us see a code example where we pass
00:17 - array as function argument and try to
analyze it
00:20 - i will write a simple C program in 
which i will write
00:24 - a function
00:25 - that will give me
00:26 - the sum of  all the elements
00:29 - in an integer array
00:31 - this function will take an integer array as argument
00:34 - this is one of the ways to pass an integer array
00:37 - an array in general as argument
00:39 - this would be data type and this 
would be
00:42 - the name of the array
00:44 - and in the main method we have
00:46 - declared an initialized an array named A
00:50 - Now in the main method we will call this function 
sumOfElements
00:53 - and pass this
00:54 - array A as argument
00:56 - and of course we need to write the
00:58 - body of this function sumOfElements
01:01 - i will declare two variables i
01:03 - and another variable sum and 
initialize it to zero
01:07 - 'i' will be used to run a loop
01:08 - so we will iterate through all the elements 
in the array A
01:12 - that is passed as argument
01:15 - but wait a minute we do not know the 
size of the array A
01:18 - is there some way to know the size of 
the array
01:21 - one of the
01:22 - ways to find out
01:24 - the size of the array and by the size of 
the array we mean the number of elements in
01:27 - the array here
01:28 - is to use the function sizeof
01:32 - so if we write something like
01:33 - sizeof
01:34 - A here in the main method
01:36 - then this will give us the size of array A
 in bytes
01:40 - array A has five integers and in a 
typical compiler
01:43 - and i know for sure that in this 
compiler an integer is stored in four
01:47 - bytes so size of A
01:49 - will return
01:51 - twenty if we want to know  the number of elements in the array
01:54 - then we can do something like
01:56 - divide the size of
01:58 - the size in bytes
02:00 - of the whole array by size of one integer
02:03 - so we will say size of A upon size of
02:06 - each integer in byte the size of A[0] 
would give us the
02:09 - number of elements in the array and
02:12 - i will write this particular line
02:14 - below this line
02:16 - the line where we are calling the function 
sumOfElements
02:19 - now what we can do is
02:21 - we could either pass the size of the
array
02:24 - as another argument
02:27 - so that would be cool
02:28 - and then we can run the loop
02:30 - starting zero till
02:32 - index
02:32 - size
02:33 - minus one
02:35 - and we keep on adding each element
02:38 - to this variable sum
02:40 - and finally
02:41 - we return sum
02:44 - and finally we will write a
02:47 - print statement
02:48 - something like this
02:50 - to print the sum of all the elements in the array
02:53 - let us now run this program and
02:55 - see what happens
02:56 - the output on console is that
02:58 - the sum of elements
03:00 - is equal to fifteen
03:02 - fight plus four plus three plus two plus one
is fifteen so this is all right
03:06 - now what  i want to do is i want to
modify this code a little
03:10 - i do not want to pass this size
03:12 - as argument here
03:14 - i want to calculate the size of the
array inside this function
03:18 - so
03:19 - we will not be passing the sizes
argument here so there will be
03:23 - just one argument
03:24 - the array
03:25 - so we have this array as argument
03:28 - the array A
03:31 - and we calculate the size here as total size of the array in bytes
03:33 - upon the size of
03:35 - one integer in bytes
03:37 - let us now run this program and see
what happens
03:40 - oops there seems to be some problem because
the sum of elements
03:44 - that we have as output on
console here is
03:47 - equal to one it should be fifteen
03:49 - and why is it so
03:51 - to explain this behavior i will write
03:53 - to mort print statements
03:55 - one in the function sumOfElements
03:58 - where i will print the size of A
04:00 - and the size of A[0]
04:03 - i will be calling these two function
sizeOf
04:06 - upon A
04:07 - and upon A[0] respectively and we will write one more print statements
04:11 - in the main method
04:12 - it will again be the same thing printing
the size of A in bytes and the size
04:16 - of A[0] in bytes
04:18 - let us now see the output
04:19 - in the method sumOfElements size
of A is equal to four bytes
04:24 - size of A[0] is equal to four bytes
04:26 - in the method main size of A
is equal to twenty bytes and the size of
04:30 - A[0] again is
04:31 - four bytes
04:33 - to understand this concept
04:35 - why the size of
04:36 - A is
04:37 - four bytes in the method sumOfElements
and it is equal to
04:41 - twenty bytes in the main method
04:43 - we need to dive deep into
04:45 - how compiler interprets
04:47 - an array as function argument
04:50 - once again i will draw this
04:52 - familiar memory diagram
04:54 - the memory assigned to an application or
a program
04:57 - is typically divided into these four
parts
05:00 - we have talked about this in our
previous lessons
05:03 - for the execution of function calls we use
05:06 - stacked section of the
05:08 - memory this green rectangle here is our
stack
05:11 - now when the program starts executing
first main method is invoked
05:16 - so some amount of memory
05:18 - from the stack is allocated
05:20 - corresponding to the call of the main
method
05:25 - this particular section or this
particular part
05:27 - is also called the stack frame of a
method
05:30 - all the local variables reside within this
stack frame
05:34 - now here
05:34 - in main method we have
05:37 - two local variables one is the array
A
05:40 - and another local variable is integer total
05:44 - so
05:44 - around twenty bytes if integer is
05:47 - four bytes
05:48 - exactly twenty bytes infact would
be allocated
05:51 - from this stack frame for the local variable
A
05:54 - the array A and
05:56 - four bytes
05:57 - for total the variable total
06:00 - and there would be some more information
in the stack frame
06:03 - now when the program execution reaches
this particular line
06:07 - where we make a call to sumOfElements
then
06:09 - the execution of main is
06:11 - paused and
06:13 - another stack frame
06:15 - is allocated to execute the function
06:17 - sumOfElements
06:19 - we have talked about this
06:21 - call stack growth
06:22 - and function execution
06:24 - a number of times in our previous lessons
06:26 - ok now this
06:27 - is a local variable this parameter
is a local variable to
06:31 - the function sumOfElements it is not
06:33 - this A in the
06:34 - main method
06:35 - what happens when we make a function call
is that
06:38 - the value of this particular local
variable in the main method
06:41 - or we should rather say the
06:43 - value from the variable in the calling
function is copied to the variable in
06:47 - the called function
06:49 - so ideally we should have
06:51 - one more
06:53 - A local to
06:54 - the function called sumOfElements
06:57 - and the value of A should be
copied into
07:00 - this parameter A
07:03 - so we would have another
07:05 - array named A
07:06 - taking twenty bytes in the stack frame of sumOfElements
07:10 - and it would have the same value
07:12 - same elements as
07:14 - the array A in the calling function
07:17 - but actually this doesn't happen
07:21 - when compiler sees
07:23 - and array as function argument
07:26 - it does not copy the whole array
07:28 - what it actually does
07:30 - it just creates
07:33 - a pointer variable by the same name
instead of creating the whole array
07:38 - it just creates a
07:39 - pointer
07:40 - to the data type of the array so in this case
it will be pointer to integer
07:44 - and the compiler just copies the
07:47 - address of the first element in the
array
07:51 - of the calling function so
07:52 - let's say
07:53 - the starting address the address of the first
element
07:57 - in this array A that belongs to the main
method is two hundred so
08:01 - in sumOfElements
08:03 - all that happens is a pointer to integer
is created and the value
08:06 - in this pointer to integer is 200
08:09 - the compiler implicitly converts
this
08:14 - int A to something like
08:16 - int *A
08:17 - that is this A
08:19 - here in this particular format is not
interpreted as
08:22 - array but it is interpreted
08:24 - as pointer to integer
08:26 - so whether you write int
08:28 - space variable name following these
brackets or you write something like
08:33 - int* space A
08:35 - they are both the same
08:37 - we have a term for this
08:39 - instead of copying the value of the
variable we are just
08:42 - copying and storing the address of the variable
08:45 - so
08:46 - we make a call by reference here
08:48 - arrays
08:50 - always are passed
08:51 - as reference parameters
08:53 - and this makes a lot of sense because
08:55 - arrays can be really large in size so it
does not make much sense to create a new
09:00 - copy of array each time it is
unnecessarily using a lot of memory
09:05 - so for arrays there is no call by value there
is always a call by
09:09 - reference
09:10 - and that's why this size of
09:12 - A here
09:13 - would give us
09:14 - four as output
09:15 - because A is a pointer to integer here
09:18 - while here in the main method A is an array
09:21 - so this format of
09:23 - passing
09:24 - array as function argument where we put
these
09:26 - braces to tell that this is an array
09:29 - is actually interpreted
09:30 - something like this
09:33 - by the compiler
09:34 - you can put an asterick sign here or
you can put an asterick sign here its the
09:37 - same thing
09:39 - it makes more sense to write it like this
09:41 - so A is actually interpreted as
09:43 - pointer to integer
09:45 - that's why when we pass
09:47 - array as function argument there is no way
to know the
09:50 - number of elements in the array
09:52 - by using a trick like this
09:54 - we actually need to pass
09:56 - the size of the array
09:59 - so i would rather move this size
calculation in the main method and
10:03 - pass the size
10:05 - and
10:06 - when we run this program now we get the
output as expected sum of elements is
10:11 - fifteen
10:13 - we should always keep in mind that
10:15 - a variable name which is
10:17 - used as an array
10:18 - is different from
10:20 - a variable which is pointer to integer
10:22 - even though the compiler gives us some
privileges like we can use
10:26 - the name of the array
10:28 - to get the
10:29 - pointer to the first element
10:30 - like in this function sumOfElements
10:33 - you could say something like
10:34 - to pass the first element
10:36 - we could have said
10:37 - ampersand A[0] address of the
first element
10:40 - but if we just use A
10:43 - instead of using
10:44 - ampersand A[0]
10:46 - then that has allowed if A is an 
array
10:48 - but if A is an array we cannot do
something like
10:51 - incrementing or decrementing
10:54 - it like pointer variables
10:56 - with pointer variables we can do couple
of other stuff
10:59 - and if we have a pointer to the starting
address of the array
11:03 - we can pretty much use it like
11:04 - a variable name for
11:06 - array because
11:07 - A[i] is interpreted as
11:09 - value at address (A+i)
11:12 - so we need to keep this differences and
similarities in mind it's a little
11:15 - tricky
11:17 - there is one more thing
11:19 - because the array is passed by 
reference
11:23 - we can modify the elements of the array
in the
11:26 - called function
11:27 - and it would reflect in the
calling function
11:31 - so let's say instead of
11:33 - calculating the sum total we want to
double all the elements each individual
11:38 - element in the array
11:39 - so our code will go something like this i
want to say that A[i] is now
11:44 - twice A[i] and
11:46 - we will not return an integer let's say
the return type is void
11:50 - and in the main method i will clear all the
stuff and what i will do is i will simply run
11:55 - a loop
11:56 - to print all the elements in the array
11:59 - okay let us now run this and see what
happens
12:03 - oops i forgot to call the function double
12:06 - and i must make a call before i print
the elements
12:09 - okay let us now run this
12:11 - if you see
12:12 - the elements in the array
12:13 - A are modified each element is twice
12:16 - its previous value
12:18 - because this is called by refrence the
same
12:21 - copy
12:22 - of the array A
12:24 - is modified using derefrencing
12:29 - so this was
12:30 - array as function arguments
12:33 - an important use case of array
as function argument
12:37 - is when we work with strings in c
12:40 - so strings in C are nothing
but character arrays
12:44 - this concept really becomes important in
the context of
12:48 - character arrays we will be talking about
it in the coming lessons
12:51 - so thanks for watching

Cleaned transcript:

in this lesson we will be talking about one more scenario in which the concept of arrays and pointers go together and this scenario is when you pass an array as function argument let us see a code example where we pass array as function argument and try to analyze it i will write a simple C program in which i will write a function that will give me the sum of all the elements in an integer array this function will take an integer array as argument this is one of the ways to pass an integer array an array in general as argument this would be data type and this would be the name of the array and in the main method we have declared an initialized an array named A Now in the main method we will call this function sumOfElements and pass this array A as argument and of course we need to write the body of this function sumOfElements i will declare two variables i and another variable sum and initialize it to zero 'i' will be used to run a loop so we will iterate through all the elements in the array A that is passed as argument but wait a minute we do not know the size of the array A is there some way to know the size of the array one of the ways to find out the size of the array and by the size of the array we mean the number of elements in the array here is to use the function sizeof so if we write something like sizeof A here in the main method then this will give us the size of array A in bytes array A has five integers and in a typical compiler and i know for sure that in this compiler an integer is stored in four bytes so size of A will return twenty if we want to know the number of elements in the array then we can do something like divide the size of the size in bytes of the whole array by size of one integer so we will say size of A upon size of each integer in byte the size of A[0] would give us the number of elements in the array and i will write this particular line below this line the line where we are calling the function sumOfElements now what we can do is we could either pass the size of the array as another argument so that would be cool and then we can run the loop starting zero till index size minus one and we keep on adding each element to this variable sum and finally we return sum and finally we will write a print statement something like this to print the sum of all the elements in the array let us now run this program and see what happens the output on console is that the sum of elements is equal to fifteen fight plus four plus three plus two plus one is fifteen so this is all right now what i want to do is i want to modify this code a little i do not want to pass this size as argument here i want to calculate the size of the array inside this function so we will not be passing the sizes argument here so there will be just one argument the array so we have this array as argument the array A and we calculate the size here as total size of the array in bytes upon the size of one integer in bytes let us now run this program and see what happens oops there seems to be some problem because the sum of elements that we have as output on console here is equal to one it should be fifteen and why is it so to explain this behavior i will write to mort print statements one in the function sumOfElements where i will print the size of A and the size of A[0] i will be calling these two function sizeOf upon A and upon A[0] respectively and we will write one more print statements in the main method it will again be the same thing printing the size of A in bytes and the size of A[0] in bytes let us now see the output in the method sumOfElements size of A is equal to four bytes size of A[0] is equal to four bytes in the method main size of A is equal to twenty bytes and the size of A[0] again is four bytes to understand this concept why the size of A is four bytes in the method sumOfElements and it is equal to twenty bytes in the main method we need to dive deep into how compiler interprets an array as function argument once again i will draw this familiar memory diagram the memory assigned to an application or a program is typically divided into these four parts we have talked about this in our previous lessons for the execution of function calls we use stacked section of the memory this green rectangle here is our stack now when the program starts executing first main method is invoked so some amount of memory from the stack is allocated corresponding to the call of the main method this particular section or this particular part is also called the stack frame of a method all the local variables reside within this stack frame now here in main method we have two local variables one is the array A and another local variable is integer total so around twenty bytes if integer is four bytes exactly twenty bytes infact would be allocated from this stack frame for the local variable A the array A and four bytes for total the variable total and there would be some more information in the stack frame now when the program execution reaches this particular line where we make a call to sumOfElements then the execution of main is paused and another stack frame is allocated to execute the function sumOfElements we have talked about this call stack growth and function execution a number of times in our previous lessons ok now this is a local variable this parameter is a local variable to the function sumOfElements it is not this A in the main method what happens when we make a function call is that the value of this particular local variable in the main method or we should rather say the value from the variable in the calling function is copied to the variable in the called function so ideally we should have one more A local to the function called sumOfElements and the value of A should be copied into this parameter A so we would have another array named A taking twenty bytes in the stack frame of sumOfElements and it would have the same value same elements as the array A in the calling function but actually this doesn't happen when compiler sees and array as function argument it does not copy the whole array what it actually does it just creates a pointer variable by the same name instead of creating the whole array it just creates a pointer to the data type of the array so in this case it will be pointer to integer and the compiler just copies the address of the first element in the array of the calling function so let's say the starting address the address of the first element in this array A that belongs to the main method is two hundred so in sumOfElements all that happens is a pointer to integer is created and the value in this pointer to integer is 200 the compiler implicitly converts this int A to something like int *A that is this A here in this particular format is not interpreted as array but it is interpreted as pointer to integer so whether you write int space variable name following these brackets or you write something like int* space A they are both the same we have a term for this instead of copying the value of the variable we are just copying and storing the address of the variable so we make a call by reference here arrays always are passed as reference parameters and this makes a lot of sense because arrays can be really large in size so it does not make much sense to create a new copy of array each time it is unnecessarily using a lot of memory so for arrays there is no call by value there is always a call by reference and that's why this size of A here would give us four as output because A is a pointer to integer here while here in the main method A is an array so this format of passing array as function argument where we put these braces to tell that this is an array is actually interpreted something like this by the compiler you can put an asterick sign here or you can put an asterick sign here its the same thing it makes more sense to write it like this so A is actually interpreted as pointer to integer that's why when we pass array as function argument there is no way to know the number of elements in the array by using a trick like this we actually need to pass the size of the array so i would rather move this size calculation in the main method and pass the size and when we run this program now we get the output as expected sum of elements is fifteen we should always keep in mind that a variable name which is used as an array is different from a variable which is pointer to integer even though the compiler gives us some privileges like we can use the name of the array to get the pointer to the first element like in this function sumOfElements you could say something like to pass the first element we could have said ampersand A[0] address of the first element but if we just use A instead of using ampersand A[0] then that has allowed if A is an array but if A is an array we cannot do something like incrementing or decrementing it like pointer variables with pointer variables we can do couple of other stuff and if we have a pointer to the starting address of the array we can pretty much use it like a variable name for array because A[i] is interpreted as value at address (A+i) so we need to keep this differences and similarities in mind it's a little tricky there is one more thing because the array is passed by reference we can modify the elements of the array in the called function and it would reflect in the calling function so let's say instead of calculating the sum total we want to double all the elements each individual element in the array so our code will go something like this i want to say that A[i] is now twice A[i] and we will not return an integer let's say the return type is void and in the main method i will clear all the stuff and what i will do is i will simply run a loop to print all the elements in the array okay let us now run this and see what happens oops i forgot to call the function double and i must make a call before i print the elements okay let us now run this if you see the elements in the array A are modified each element is twice its previous value because this is called by refrence the same copy of the array A is modified using derefrencing so this was array as function arguments an important use case of array as function argument is when we work with strings in c so strings in C are nothing but character arrays this concept really becomes important in the context of character arrays we will be talking about it in the coming lessons so thanks for watching
