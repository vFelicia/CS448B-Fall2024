With timestamps:

00:00 - In our previous lesson, we saw what
prefix and postfix expressions
00:03 - are but we did not discuss how we can
evaluate these expressions.
00:07 - In this lesson we'll see how we can
evaluate prefix and postfix expressions.
00:12 - Algorithms to evaluate prefix and
postfix expressions are similar
00:16 - but I'm going to talk about postfix
evaluation first
00:19 - because its easier to understand and
implement
00:22 - and then I'll talk about evaluation of
prefix. Okay so let's get started.
00:26 - I have written an expression in infix form
here and I first want to convert this to 
00:30 - postfix form.
00:32 - As we know in infix form  operator is
written in between operands
00:37 - and we want to convert to postfix in
which operator is written after operands.
00:41 - We have already seen how we can do
this in our previous lesson.
00:44 - We need to go step by step just the way we would go in 
00:48 - evaluation of infix. We need to go in
order of precedence
00:52 - and in each step we need to identify
00:55 - operands of an operator and we need to
bring the operator
00:59 - in front of the operands. What we can
actually do is we can first
01:02 - resolve operator precedence and put
parenthesis
01:06 - at appropriate places. In this expression
we will first
01:09 - do this multiplication this first
multiplication then we'll do this second
01:13 - multiplication
01:14 - then we will perform this addition and
finally
01:18 - the subtraction. Okay now we will go one
operator at a time,
01:22 - operands for this multiplication
operator are 'A' and 'B'.
01:25 - So this A*B will become AB*.
01:30 - Now next we would need to look at this
multiplication this will transform
01:36 - to cd*
01:36 - and now we can do the change for this addition
01:40 - the two operands are these two expressions
01:44 - in postfix, so I'm placing the plus
operator after these two
01:48 - expressions. Finally for this last operator
01:51 - the operands are this complex expression
and this variable 'e'.
01:55 - So this is how we will look like
01:58 - after the transformation. Finally when we 
are done with all the operators we can get rid of
02:03 - all the paranthesis.
02:04 - They're not needed in postfix expression.
02:09 - This is how you can do the conversion
manualy. We will discuss efficient ways
02:12 - of doing this
02:13 - programitically in later lessons. We will discuss algorithms to  
02:17 - convert infix to prefix or postfix
02:20 - in later lessons. In this lesson we're
only going to look at
02:23 - algorithms to evaluate prefix and
postfix expressions.
02:27 - Okay so we have this postfix
expression here
02:30 - and we want to evaluate this expression,
let's say for these values of variables
02:36 - a,b,c,d and e. So we have this expression in
terms of values to evaluate.
02:41 - I'll first quickly tell you how you can
evaluate a postfix expression manually.
02:46 - What you need to do is you need to scan
the expression from left to right
02:50 - and find the first occurrence of an
operator like here,
02:54 - multiplication is the first operator.
In postfix expression
02:58 - operands of an operator will always
lie to its left.
03:01 - For the first operator, the preceding two
entities will always be operands.
03:06 - You need to look for the first
occurrence of this pattern
03:09 - operand, operand, operator in the expression 
and now you can apply the operator on
03:14 - these two operands
03:15 - and reduced expression. So this is
what I'm getting after evaluating
03:20 - 23*. Now we need to repeat this
process till we are done with
03:24 - all the operators. Once again we need to
scan the expression from left to right
03:28 - and
03:29 - look for the first operator, if the
expression is correct it will be
03:32 - preceeded by two values.
03:34 - So basically we need to look for first
occurrence of this pattern
03:37 - operand, operand, operator. So now we can reduce this. we have 6
03:42 - and then we have 5*4  20.
03:45 - We are using space as delimeter here, there should be some space
03:49 - in between two operands. Okay so this is
what I have now.
03:52 - Once again I'll look for the first
occurrence of operand, operand
03:57 - and operator.
03:57 - We will go on like this till we are done with all the operators.
04:03 - When I am saying we need to look for first
occurrence of this pattern operand,
04:07 - operand and operator,
04:08 - what I mean by operand here is a value and
not
04:12 - a complex expression itself. The first
operator will always be preceded by two
04:17 - values
04:17 - and if you will give this some thought you will
be able to understand why.
04:21 - If you can see in this expression we are
applying the operators in the same
04:25 - order in which we have them while
parsing from left to right.
04:30 - So first we're applying this leftmost
multiplication
04:33 - on 2 and 3 then we are applying the next
multiplication on 5 and 4 then we're
04:37 - performing the addition
04:38 - and then finally we are performing the
subtraction and whenever we are performing
04:42 - an operation, we're picking the last
04:44 - two operands proceeding the operator in the
expression.
04:48 - So if we have to do this programitically,
if we have to evaluate a postfix
04:53 - expression given to us
04:54 - in a string like this and let's say operands and operators
04:58 - are separated by space we can have some
other delimiter
05:02 - like comma also to separate operands
and operator.
05:06 - Now what we can do is we can parse the
string from left to right.
05:10 - In each step in this parsing, in each
step in the scanning process,
05:15 - we can get a token that will either be an
operator
05:19 - or an operand. What we can do is as we parse
05:22 - from left to right, we can keep track
of all the operands
05:26 - seen so far and I'll come back to how it
will help us.
05:30 - So I'm keeping all the operands so seen so
far in a list.
05:34 - The first entity that we have here is 2
05:37 - which is an operand so it will go to the
list, next we have 3 which once again
05:41 - is operand so it will go into the list
05:43 - next we have this multiplication
operator. Now this multiplication should
05:47 - be applied
05:48 - to last two operands preceding it last
two operands to the left of it
05:53 - because we already have the elements stored in this list.
05:57 - All we need to do is we need to pick the
last two from this list
06:01 - and perform the operation. It should be
06:05 - 2*3 and with this multiplication we have reduced
06:10 - expression this 23* has now become 6
06:13 - it has become an operand that can be used by an operator later.
06:18 - We are at this stage right now that I'm
showing in the right.
06:22 - I'll continue the scanning. Next we have
06:25 - an operand, will push this number 5 on to the
list.
06:29 - Next we have 4 which once again will
come to the list
06:33 - and now we have the multiplication operator
06:36 - and it should be applied to the last two
operands in the reduced expression
06:41 - and we should put the result
06:44 - back into the list. This is the stage
where we are right now.
06:50 - So this list actually is storing all the
operands in the reduced expression
06:54 - preceeding the position at which we are during passing.
06:58 - Now for this edition we should take out
the last two elements from the list
07:02 - and then we should put the result back,
next we have an operand
07:06 - we are at this stage right now. Next we have
an operator
07:11 - this subtraction. We will perform this
subtraction
07:14 - and put the result back. Finally when I'm done
scanning the whole expression
07:20 - I'll have only one element left in the list
07:23 - and this will be my final answer this
will be my final result.
07:27 - This is an efficient algorithm. We
are doing only one pass
07:31 - on the string representing the expression
07:34 - and we have our result. The list that we are using here
07:38 - if you could notice is being used in a
special way
07:41 - we are inserting operands one at a time
from one side
07:45 - and then to perform an operation we are
taking out operand from the same side.
07:50 - Whatever is coming in last is getting
out first.
07:53 - This whole thing that we're doing here
with the list can be done efficiently
07:57 - with a stack, which is nothing but a
special kind of list in which elements
08:02 - are inserted
08:03 - and removed from the same side in which
whatever gets in last
08:07 - comes out first. It's called Last In First
Out(LIFO) structure.
08:11 - Let's do this evaluation again. I have drawn
logical representation of stack here,
08:17 - and this time I'm going to use this stack. 
I'll also write pseudo code for this algorithm.
08:21 - I'm going to write a function named
08:23 - evaluate postfix that will take a string
as argument.
08:28 - Let's name this string expression
08:31 - exp for expression. In my function here, i'll first
08:34 - create a stack. Now for the sake of simplicity,
08:38 - let's assume that each operand or operator
in the expression will be of only one
08:42 - character.
08:43 - So to get a token or operator,
We can simply run a loop from zero till
08:48 - length of expression -1. So exp[i]
08:51 - will be my operand or operator. If
expression 'i' is operand
08:56 - I should put, push it onto the stack
else if exp[i] is operator
09:01 - we should do two pop operations in the
stack store the value of the operands
09:06 - in some variable.
09:07 - I'm using variable names op1 and op2.
09:10 - Let's say this pop function will remove
an element from top of stack s
09:14 - and also return this element. Once we have the two operands
09:19 - we can perform the operation, I'm using this
variable to store the output.
09:24 - Let's say this function will perform the operation. Now the result
09:28 - should be pushed back onto the stack. If
I have to run through this expression
09:33 - with whatever code I have right now,
then first entity is 2 which is
09:37 - operand
09:38 - so it should be pushed onto the stack.
Next we have 3,
09:42 - once again this will go to the stack.
Next we have this multiplication
09:45 - operator.
09:46 - So we will come to this else if part of
the code. I'll make first pop
09:51 - and I'll store 3 in this variable op1.
09:55 - Well actually this is the second operand,
so I should say this one is op2
09:59 - and next one will be op1. Once I have popped
10:03 - these two elements I can perform the
operation. As you can see I'm doing the
10:07 - same stuff that I was doing with the list,
10:09 - the only thing is that I'm showing
things vertically. Stack is
10:13 - being shown as a vertical list. I'm
inserting or taking out from the top.
10:17 - Now I'll push the result back onto the
stack.
10:20 - Now we will move to the next entity
which is operand
10:24 - it will go onto the stack. Next 4 will
also go onto the stack
10:29 - and now we have this multiplication, so we
will perform
10:32 - two pop operations. After this operation
is performed
10:36 - result will be pushed back. Next we have
addition.
10:40 - So we will go on like this. We have 26
pushed onto the stack now.
10:44 - Now it's 9 which will go in and
finally we have this subtraction
10:49 - 26-9, 17 will be pushed onto the stack.
10:54 - At this stage we will be done with the loop
10:58 - we are done with all the tokens, all the
operands and operators.
11:01 - The top of stack can be returned as
final result.
11:04 - At this stage we will have only one
element in the stack
11:08 - and this element will be my final result.
You will have to take care of some
11:11 - parsing logic in actual implementation.
Operand can be a number of multiple
11:15 - digits
11:16 - and then we will have delimiter like
space or comma
11:19 - so you'll have to take care of that.
Parsing operand or operator will be
11:23 - some task.
11:24 - If you want to see my implementation you
can check the description of this video
11:27 - for a link.
11:28 - Okay so this was postfix evaluation.
Let's now quickly see how we can do
11:32 - prefix evaluation.
11:34 - Once again I have written this expression in
infix form and I'll first convert it to
11:39 - prefix.
11:40 - We will go in order of precedence. I first
put this paranthesis
11:44 - this 2 * 3 will become *23,
11:48 - this 5 * 4 will become *54
11:52 - and now we will pick this plus(+) operator whose operands are these two
11:56 - prefix expressions. Finally
11:59 - for the subtraction operator this is
the first operand and this is the
12:03 - second operand.
12:04 - In the last step we can get rid of all the
parenthesis.
12:07 - So this is what I have finally. Let's now
see how we can evaluate
12:12 - a prefix expression like this. We will do it just like postfix
12:16 - this time all we need to do is we need
to scan
12:19 - from right, so we will go from right to left.
12:23 - Once again we will people use a stack if it's an
operand we can push it onto the stack.
12:28 - So here for this example 9 will go onto the stack
12:32 - and now we will go to the next entity in the left,
12:35 - it's 4. Once again we have an operand.
12:38 - It will go onto the stack. Now we have 5.
12:41 - 5 will also be pushed onto the stack and
now we have this multiplication operator.
12:47 - At this stage we need to pop two elements from the stack.
12:50 - This time the first element popped will be the first operand.
12:54 - In postfix the first element popped was 
the second operand.
12:58 - This time the second element popped will
be the second operand.
13:02 - For this multiplication, first operand is 5 and second operand is 4.
13:07 - This order is really important for multipication
13:10 - the order doesn't matter but for say division or
13:14 - subtraction this will matter. Result 20
13:17 - will be pushed onto the stack and we
will keep moving left.
13:21 - Now we have 3 and 2 both will go onto the stack
13:25 - and now we have this multiplication operation.
13:28 - 3 and 2 will be popped and their product 6 will be pushed.
13:32 - Now we have this addition, the two
elements at top are 20 and 6 they will be
13:36 - popped
13:37 - and their sum 26 will be pushed. Finally we have to subtraction.
13:42 - 26 and 9 will be popped out and 17 will be
pushed
13:46 - and finally this is my answer. Prefix evaluation can be performed
13:50 - in couple of other ways also but this
is easiest and most
13:54 - straightforward. Okay so this was prefix
and postfix
13:58 - evaluation using Stack. In coming lessons, we will see efficient algorithms to
14:02 - convert
14:03 - infix to prefix or postfix. This is it
for this lesson.
14:07 - Thanks for Watching!

Cleaned transcript:

In our previous lesson, we saw what prefix and postfix expressions are but we did not discuss how we can evaluate these expressions. In this lesson we'll see how we can evaluate prefix and postfix expressions. Algorithms to evaluate prefix and postfix expressions are similar but I'm going to talk about postfix evaluation first because its easier to understand and implement and then I'll talk about evaluation of prefix. Okay so let's get started. I have written an expression in infix form here and I first want to convert this to postfix form. As we know in infix form operator is written in between operands and we want to convert to postfix in which operator is written after operands. We have already seen how we can do this in our previous lesson. We need to go step by step just the way we would go in evaluation of infix. We need to go in order of precedence and in each step we need to identify operands of an operator and we need to bring the operator in front of the operands. What we can actually do is we can first resolve operator precedence and put parenthesis at appropriate places. In this expression we will first do this multiplication this first multiplication then we'll do this second multiplication then we will perform this addition and finally the subtraction. Okay now we will go one operator at a time, operands for this multiplication operator are 'A' and 'B'. So this A*B will become AB*. Now next we would need to look at this multiplication this will transform to cd* and now we can do the change for this addition the two operands are these two expressions in postfix, so I'm placing the plus operator after these two expressions. Finally for this last operator the operands are this complex expression and this variable 'e'. So this is how we will look like after the transformation. Finally when we are done with all the operators we can get rid of all the paranthesis. They're not needed in postfix expression. This is how you can do the conversion manualy. We will discuss efficient ways of doing this programitically in later lessons. We will discuss algorithms to convert infix to prefix or postfix in later lessons. In this lesson we're only going to look at algorithms to evaluate prefix and postfix expressions. Okay so we have this postfix expression here and we want to evaluate this expression, let's say for these values of variables a,b,c,d and e. So we have this expression in terms of values to evaluate. I'll first quickly tell you how you can evaluate a postfix expression manually. What you need to do is you need to scan the expression from left to right and find the first occurrence of an operator like here, multiplication is the first operator. In postfix expression operands of an operator will always lie to its left. For the first operator, the preceding two entities will always be operands. You need to look for the first occurrence of this pattern operand, operand, operator in the expression and now you can apply the operator on these two operands and reduced expression. So this is what I'm getting after evaluating 23*. Now we need to repeat this process till we are done with all the operators. Once again we need to scan the expression from left to right and look for the first operator, if the expression is correct it will be preceeded by two values. So basically we need to look for first occurrence of this pattern operand, operand, operator. So now we can reduce this. we have 6 and then we have 5*4 20. We are using space as delimeter here, there should be some space in between two operands. Okay so this is what I have now. Once again I'll look for the first occurrence of operand, operand and operator. We will go on like this till we are done with all the operators. When I am saying we need to look for first occurrence of this pattern operand, operand and operator, what I mean by operand here is a value and not a complex expression itself. The first operator will always be preceded by two values and if you will give this some thought you will be able to understand why. If you can see in this expression we are applying the operators in the same order in which we have them while parsing from left to right. So first we're applying this leftmost multiplication on 2 and 3 then we are applying the next multiplication on 5 and 4 then we're performing the addition and then finally we are performing the subtraction and whenever we are performing an operation, we're picking the last two operands proceeding the operator in the expression. So if we have to do this programitically, if we have to evaluate a postfix expression given to us in a string like this and let's say operands and operators are separated by space we can have some other delimiter like comma also to separate operands and operator. Now what we can do is we can parse the string from left to right. In each step in this parsing, in each step in the scanning process, we can get a token that will either be an operator or an operand. What we can do is as we parse from left to right, we can keep track of all the operands seen so far and I'll come back to how it will help us. So I'm keeping all the operands so seen so far in a list. The first entity that we have here is 2 which is an operand so it will go to the list, next we have 3 which once again is operand so it will go into the list next we have this multiplication operator. Now this multiplication should be applied to last two operands preceding it last two operands to the left of it because we already have the elements stored in this list. All we need to do is we need to pick the last two from this list and perform the operation. It should be 2*3 and with this multiplication we have reduced expression this 23* has now become 6 it has become an operand that can be used by an operator later. We are at this stage right now that I'm showing in the right. I'll continue the scanning. Next we have an operand, will push this number 5 on to the list. Next we have 4 which once again will come to the list and now we have the multiplication operator and it should be applied to the last two operands in the reduced expression and we should put the result back into the list. This is the stage where we are right now. So this list actually is storing all the operands in the reduced expression preceeding the position at which we are during passing. Now for this edition we should take out the last two elements from the list and then we should put the result back, next we have an operand we are at this stage right now. Next we have an operator this subtraction. We will perform this subtraction and put the result back. Finally when I'm done scanning the whole expression I'll have only one element left in the list and this will be my final answer this will be my final result. This is an efficient algorithm. We are doing only one pass on the string representing the expression and we have our result. The list that we are using here if you could notice is being used in a special way we are inserting operands one at a time from one side and then to perform an operation we are taking out operand from the same side. Whatever is coming in last is getting out first. This whole thing that we're doing here with the list can be done efficiently with a stack, which is nothing but a special kind of list in which elements are inserted and removed from the same side in which whatever gets in last comes out first. It's called Last In First Out(LIFO) structure. Let's do this evaluation again. I have drawn logical representation of stack here, and this time I'm going to use this stack. I'll also write pseudo code for this algorithm. I'm going to write a function named evaluate postfix that will take a string as argument. Let's name this string expression exp for expression. In my function here, i'll first create a stack. Now for the sake of simplicity, let's assume that each operand or operator in the expression will be of only one character. So to get a token or operator, We can simply run a loop from zero till length of expression 1. So exp[i] will be my operand or operator. If expression 'i' is operand I should put, push it onto the stack else if exp[i] is operator we should do two pop operations in the stack store the value of the operands in some variable. I'm using variable names op1 and op2. Let's say this pop function will remove an element from top of stack s and also return this element. Once we have the two operands we can perform the operation, I'm using this variable to store the output. Let's say this function will perform the operation. Now the result should be pushed back onto the stack. If I have to run through this expression with whatever code I have right now, then first entity is 2 which is operand so it should be pushed onto the stack. Next we have 3, once again this will go to the stack. Next we have this multiplication operator. So we will come to this else if part of the code. I'll make first pop and I'll store 3 in this variable op1. Well actually this is the second operand, so I should say this one is op2 and next one will be op1. Once I have popped these two elements I can perform the operation. As you can see I'm doing the same stuff that I was doing with the list, the only thing is that I'm showing things vertically. Stack is being shown as a vertical list. I'm inserting or taking out from the top. Now I'll push the result back onto the stack. Now we will move to the next entity which is operand it will go onto the stack. Next 4 will also go onto the stack and now we have this multiplication, so we will perform two pop operations. After this operation is performed result will be pushed back. Next we have addition. So we will go on like this. We have 26 pushed onto the stack now. Now it's 9 which will go in and finally we have this subtraction 269, 17 will be pushed onto the stack. At this stage we will be done with the loop we are done with all the tokens, all the operands and operators. The top of stack can be returned as final result. At this stage we will have only one element in the stack and this element will be my final result. You will have to take care of some parsing logic in actual implementation. Operand can be a number of multiple digits and then we will have delimiter like space or comma so you'll have to take care of that. Parsing operand or operator will be some task. If you want to see my implementation you can check the description of this video for a link. Okay so this was postfix evaluation. Let's now quickly see how we can do prefix evaluation. Once again I have written this expression in infix form and I'll first convert it to prefix. We will go in order of precedence. I first put this paranthesis this 2 * 3 will become *23, this 5 * 4 will become *54 and now we will pick this plus(+) operator whose operands are these two prefix expressions. Finally for the subtraction operator this is the first operand and this is the second operand. In the last step we can get rid of all the parenthesis. So this is what I have finally. Let's now see how we can evaluate a prefix expression like this. We will do it just like postfix this time all we need to do is we need to scan from right, so we will go from right to left. Once again we will people use a stack if it's an operand we can push it onto the stack. So here for this example 9 will go onto the stack and now we will go to the next entity in the left, it's 4. Once again we have an operand. It will go onto the stack. Now we have 5. 5 will also be pushed onto the stack and now we have this multiplication operator. At this stage we need to pop two elements from the stack. This time the first element popped will be the first operand. In postfix the first element popped was the second operand. This time the second element popped will be the second operand. For this multiplication, first operand is 5 and second operand is 4. This order is really important for multipication the order doesn't matter but for say division or subtraction this will matter. Result 20 will be pushed onto the stack and we will keep moving left. Now we have 3 and 2 both will go onto the stack and now we have this multiplication operation. 3 and 2 will be popped and their product 6 will be pushed. Now we have this addition, the two elements at top are 20 and 6 they will be popped and their sum 26 will be pushed. Finally we have to subtraction. 26 and 9 will be popped out and 17 will be pushed and finally this is my answer. Prefix evaluation can be performed in couple of other ways also but this is easiest and most straightforward. Okay so this was prefix and postfix evaluation using Stack. In coming lessons, we will see efficient algorithms to convert infix to prefix or postfix. This is it for this lesson. Thanks for Watching!
