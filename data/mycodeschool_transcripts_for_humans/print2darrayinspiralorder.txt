With timestamps:

00:00 - in this lesson we are going to solve one
00:02 - programing interview question and the
00:04 - question is given a two-dimensional
00:07 - array of integers we want to traverse
00:10 - and print the elements in the array in
00:14 - spiral order for example if we have a 2d
00:17 - array like this let's call this input
00:19 - array we have four rows and four columns
00:22 - here our input array may have any number
00:25 - of rows and any number of columns and
00:26 - now let's say we want to traverse this
00:29 - array in spiral order in clockwise
00:32 - direction so what we will do is we will
00:34 - start at two and first reverse the top
00:38 - row we will go like two four six eight
00:40 - so we will go right and then we will go
00:44 - down along the rightmost column and then
00:48 - we will again go left along the
00:50 - bottommost row and we will traverse the
00:53 - array something like this and as output
00:56 - we have to print all the elements in the
00:58 - array as we traverse it in spiral order
01:01 - so let's say we want to print a
01:02 - comma-separated list of elements so our
01:06 - list will be something like 2 4 6 8 16 9
01:11 - 8 1 2 3 2 5 9 12 5 and 11 so how do we
01:21 - approach this problem there are some
01:24 - straightforward observations the first
01:25 - observation is that we can have 4
01:28 - possible directions while traversing the
01:30 - array we can go along a row from left to
01:33 - right or we can go along a column from
01:36 - top to bottom let's call this direction
01:39 - down or we can go along it will row from
01:42 - right to left let's call this direction
01:44 - left or we can go along a column from
01:47 - top to bottom let's call this direction
01:48 - up we will go on changing directions in
01:52 - a cyclic manner from right we will go
01:54 - down down to left left to up and from up
01:57 - again to right and we will not go in a
02:00 - row or column twice so once we are done
02:03 - with row or column we will not go to
02:06 - that row or column again we can perceive
02:09 - this problem something like this first
02:11 - we will print the top row
02:13 - from left to right and now we do not
02:15 - need to come back to this row again now
02:18 - let's say we will keep on reducing the
02:20 - array as we traverse a row or column so
02:22 - that the array that remains to be
02:24 - traversed is there and that which is
02:26 - traversed is not there so first we will
02:28 - traverse the top row and then we will
02:30 - change our direction and traverse the
02:32 - rightmost column and once we are done
02:35 - with the rightmost column we will
02:36 - traverse the bottom most row and then we
02:39 - will go to the leftmost column and once
02:42 - again we will go to the topmost row
02:44 - whatever is the topmost after all this
02:47 - removal of rows and columns once again
02:49 - we will go to rightmost column this time
02:52 - we have only one element in the column
02:54 - and once again we will go to bottom most
02:56 - row this is what we will be left with
02:58 - after all the peeling off let us now
03:02 - implement this logic of peeling off a
03:04 - row or column once we are done
03:06 - traversing it we do not actually need to
03:08 - delete elements from the array to
03:10 - achieve this what we can do is we can
03:12 - mark the boundaries of the un--
03:14 - traversed array using some variables so
03:17 - what I'm going to take do is I'm going
03:19 - to take four variables one to mark the
03:22 - topmost row of the un-- traversed array
03:25 - another to month bottommost row of the
03:28 - un-- traversed array want to mark the
03:30 - leftmost column of the on traversed
03:32 - array and another to mark the rightmost
03:34 - column of the on traversed array I am
03:36 - calling these variables TBL and are
03:39 - respectively I will also write the
03:41 - pseudocode here let's say we want to
03:43 - write a function named Prince spiral
03:45 - that will take a two-dimensional array a
03:47 - and two more arguments the number of
03:51 - rows and number of columns in the array
03:53 - let's say M is the number of rows and n
03:56 - is the number of columns what we are
03:58 - doing here is initially we are defining
04:00 - four variables T that will be initially
04:03 - set as 0 B that will be initially set as
04:07 - M minus 1 that will be the index for the
04:09 - bottom most row I am short of space here
04:12 - so I am writing multiple statements in
04:14 - the same line we will have L that will
04:17 - again be 0 initially and R will be n
04:19 - minus 1 initially now I will define one
04:22 - more variable named dir for direction
04:27 - and initially it will be set as zero
04:30 - let's say if the IR is zero we mean the
04:33 - right direction
04:34 - if it is 1 we mean the direction
04:37 - top-to-bottom 2 means right to left left
04:41 - and 3 by 3 we will mean bottom to top
04:44 - initially we want to go from left to
04:46 - right so initially dir is 0 these 4
04:50 - variables at any point will mark the
04:52 - boundary of the un-- traversed part of
04:54 - the array that will be a sub array now
04:57 - we will say something like this while T
04:59 - is less than or equal to B and L is less
05:02 - than or equal to R and and this
05:05 - condition should be true for the one
05:07 - traversed sub array to be valid I'll
05:09 - come back to this particular condition
05:11 - why it is important now depending upon
05:13 - the value of dir we will have four cases
05:16 - in traversal if direction or this
05:20 - valuable dir is equal to zero then we
05:22 - need to traverse the topmost row of the
05:25 - un-- traversed array from left to right
05:28 - and to traverse the topmost row of our
05:31 - row number will be the same only the
05:34 - column index will vary so we will say
05:36 - for il-2 our print a TI for the row
05:42 - marked by variable t we will go from
05:45 - leftmost column to rightmost column and
05:48 - print all the elements and once we are
05:50 - done printing this row we need to
05:53 - discard that row so we will set the new
05:55 - top we will now say d plus plus so here
05:59 - in this example initially Direction is 0
06:02 - and top is T is 0 so what we will do is
06:06 - left is also 0 we will go like this we
06:10 - will keep on printing these elements and
06:12 - once we are done printing the row we
06:15 - will increment T so T will now become 1
06:17 - and then we also need to change
06:20 - directions so we can say something like
06:22 - now Direction should be 1 now we should
06:25 - go from top to bottom along the
06:28 - rightmost column of the un-- travel
06:30 - study so we will say that if Direction
06:33 - is equal to 1 now we will print the
06:35 - rightmost column this time the column
06:37 - index will not change only the row index
06:40 - will change
06:41 - say 4i t2b for all rows from top to
06:46 - bottom
06:46 - print a I are in this example here we
06:50 - will go something like this this is the
06:52 - topmost row our will remain the same
06:55 - from top to bottom we will print all
06:57 - these elements and once we are done we
07:00 - will decrement our now we will say our -
07:03 - - so this will be our new R and we will
07:07 - change the direction again now our
07:08 - direction will be 2 from 1 we will go to
07:13 - 2 now when direction is 2 that means we
07:16 - want to go along the bottom most row
07:18 - from right to left so we will say
07:21 - something like this
07:22 - I will start at R and we will decrement
07:26 - I down to L and we will print a bi the
07:30 - row index will not change and now we
07:33 - will decrement B now remember the index
07:37 - increases here from top to bottom and we
07:40 - are going from bottom to top towards the
07:42 - top and direction will now be 3 so we
07:47 - have traversed this part we will go in
07:49 - this order 1 2 and then 3 and finally we
07:53 - will have one more condition when we
07:56 - will want to go from bottom to top along
07:58 - the left most column direction will be
08:00 - equal to 3 this may look messed up
08:03 - because I'm really short of space here
08:05 - and this time we will iterate from be
08:08 - down to T and print e I l and then we
08:15 - will increment L and set the direction
08:17 - as 0 again so L will now be incremented
08:22 - in this example this will be the end of
08:26 - our by loop and also the end of our
08:28 - function only one of these conditions in
08:30 - the while loop will be executed in one
08:32 - go
08:33 - that will mean traversing in one
08:35 - direction redefining the boundaries and
08:37 - changing the direction for this example
08:39 - at this stage direction is zero so we
08:44 - can go from left to right in the topmost
08:46 - row so we will go like this
08:50 - tea will now be incremented it will
08:52 - become equal to B and our direction is 1
08:55 - we will come to this while condition we
08:57 - will check this condition this is true T
08:59 - is less than or equal to B and L is less
09:01 - than or equal to R a direction is 1 so
09:04 - we need to print the rightmost column
09:05 - and we need to decrement our and our
09:09 - direction becomes 2 so we need to print
09:12 - the bottom most row and we need to deke
09:17 - riman be ok at this stage this condition
09:20 - in the while loop will become false so
09:24 - we will exit if you will try to think
09:26 - this condition will become false only
09:28 - when we will be done printing all the
09:30 - elements this is how our while loop will
09:33 - look in real code remember our indices
09:35 - are increasing from left to right so
09:38 - this is 0 at column 1 at column 2 at
09:40 - column and through 8th column and
09:41 - similarly from top to bottom we are
09:43 - going like 0 1 2 3 and this is what we
09:47 - had written previously in the pseudo
09:49 - code except that we are changing
09:51 - direction by this statement we are not
09:53 - changing direction inside the loops so
09:55 - if Direction is 0 initially it will go
09:58 - on increasing like 0 1 2 3 and once it
10:01 - becomes 4 we are taking a modulo by 4 so
10:03 - it will become 0 again give this some
10:06 - thought and you'll get it so this was
10:08 - printing a 2d array in spiral order
10:10 - thanks for watching

Cleaned transcript:

in this lesson we are going to solve one programing interview question and the question is given a twodimensional array of integers we want to traverse and print the elements in the array in spiral order for example if we have a 2d array like this let's call this input array we have four rows and four columns here our input array may have any number of rows and any number of columns and now let's say we want to traverse this array in spiral order in clockwise direction so what we will do is we will start at two and first reverse the top row we will go like two four six eight so we will go right and then we will go down along the rightmost column and then we will again go left along the bottommost row and we will traverse the array something like this and as output we have to print all the elements in the array as we traverse it in spiral order so let's say we want to print a commaseparated list of elements so our list will be something like 2 4 6 8 16 9 8 1 2 3 2 5 9 12 5 and 11 so how do we approach this problem there are some straightforward observations the first observation is that we can have 4 possible directions while traversing the array we can go along a row from left to right or we can go along a column from top to bottom let's call this direction down or we can go along it will row from right to left let's call this direction left or we can go along a column from top to bottom let's call this direction up we will go on changing directions in a cyclic manner from right we will go down down to left left to up and from up again to right and we will not go in a row or column twice so once we are done with row or column we will not go to that row or column again we can perceive this problem something like this first we will print the top row from left to right and now we do not need to come back to this row again now let's say we will keep on reducing the array as we traverse a row or column so that the array that remains to be traversed is there and that which is traversed is not there so first we will traverse the top row and then we will change our direction and traverse the rightmost column and once we are done with the rightmost column we will traverse the bottom most row and then we will go to the leftmost column and once again we will go to the topmost row whatever is the topmost after all this removal of rows and columns once again we will go to rightmost column this time we have only one element in the column and once again we will go to bottom most row this is what we will be left with after all the peeling off let us now implement this logic of peeling off a row or column once we are done traversing it we do not actually need to delete elements from the array to achieve this what we can do is we can mark the boundaries of the un traversed array using some variables so what I'm going to take do is I'm going to take four variables one to mark the topmost row of the un traversed array another to month bottommost row of the un traversed array want to mark the leftmost column of the on traversed array and another to mark the rightmost column of the on traversed array I am calling these variables TBL and are respectively I will also write the pseudocode here let's say we want to write a function named Prince spiral that will take a twodimensional array a and two more arguments the number of rows and number of columns in the array let's say M is the number of rows and n is the number of columns what we are doing here is initially we are defining four variables T that will be initially set as 0 B that will be initially set as M minus 1 that will be the index for the bottom most row I am short of space here so I am writing multiple statements in the same line we will have L that will again be 0 initially and R will be n minus 1 initially now I will define one more variable named dir for direction and initially it will be set as zero let's say if the IR is zero we mean the right direction if it is 1 we mean the direction toptobottom 2 means right to left left and 3 by 3 we will mean bottom to top initially we want to go from left to right so initially dir is 0 these 4 variables at any point will mark the boundary of the un traversed part of the array that will be a sub array now we will say something like this while T is less than or equal to B and L is less than or equal to R and and this condition should be true for the one traversed sub array to be valid I'll come back to this particular condition why it is important now depending upon the value of dir we will have four cases in traversal if direction or this valuable dir is equal to zero then we need to traverse the topmost row of the un traversed array from left to right and to traverse the topmost row of our row number will be the same only the column index will vary so we will say for il2 our print a TI for the row marked by variable t we will go from leftmost column to rightmost column and print all the elements and once we are done printing this row we need to discard that row so we will set the new top we will now say d plus plus so here in this example initially Direction is 0 and top is T is 0 so what we will do is left is also 0 we will go like this we will keep on printing these elements and once we are done printing the row we will increment T so T will now become 1 and then we also need to change directions so we can say something like now Direction should be 1 now we should go from top to bottom along the rightmost column of the un travel study so we will say that if Direction is equal to 1 now we will print the rightmost column this time the column index will not change only the row index will change say 4i t2b for all rows from top to bottom print a I are in this example here we will go something like this this is the topmost row our will remain the same from top to bottom we will print all these elements and once we are done we will decrement our now we will say our so this will be our new R and we will change the direction again now our direction will be 2 from 1 we will go to 2 now when direction is 2 that means we want to go along the bottom most row from right to left so we will say something like this I will start at R and we will decrement I down to L and we will print a bi the row index will not change and now we will decrement B now remember the index increases here from top to bottom and we are going from bottom to top towards the top and direction will now be 3 so we have traversed this part we will go in this order 1 2 and then 3 and finally we will have one more condition when we will want to go from bottom to top along the left most column direction will be equal to 3 this may look messed up because I'm really short of space here and this time we will iterate from be down to T and print e I l and then we will increment L and set the direction as 0 again so L will now be incremented in this example this will be the end of our by loop and also the end of our function only one of these conditions in the while loop will be executed in one go that will mean traversing in one direction redefining the boundaries and changing the direction for this example at this stage direction is zero so we can go from left to right in the topmost row so we will go like this tea will now be incremented it will become equal to B and our direction is 1 we will come to this while condition we will check this condition this is true T is less than or equal to B and L is less than or equal to R a direction is 1 so we need to print the rightmost column and we need to decrement our and our direction becomes 2 so we need to print the bottom most row and we need to deke riman be ok at this stage this condition in the while loop will become false so we will exit if you will try to think this condition will become false only when we will be done printing all the elements this is how our while loop will look in real code remember our indices are increasing from left to right so this is 0 at column 1 at column 2 at column and through 8th column and similarly from top to bottom we are going like 0 1 2 3 and this is what we had written previously in the pseudo code except that we are changing direction by this statement we are not changing direction inside the loops so if Direction is 0 initially it will go on increasing like 0 1 2 3 and once it becomes 4 we are taking a modulo by 4 so it will become 0 again give this some thought and you'll get it so this was printing a 2d array in spiral order thanks for watching
