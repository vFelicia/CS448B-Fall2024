With timestamps:

00:00 - In this lesson we will talk about pointers
as return type for functions.
00:05 - Pointer is just another data type.
00:09 - It's just that a pointer stores the address
of another data type.
00:13 - So it is quite possible for a function to
return pointer.
00:17 - But we must understand the use cases in which
we may want to return a pointer from a function.
00:22 - So let us try to understand this.
00:24 - I'll get started by writing some code.
00:28 - Now I want to write a very simple C program
initially.
00:31 - I want to write a function Add that will take
two integers as argument and sum these two
00:38 - numbers and return the sum.
00:40 - So let's say we declare another variable c
and c equals a + b and the function returns
00:46 - c.
00:47 - Now in the main method I'll initialize two
variables.
00:51 - Let's name these variables x and y.
00:53 - Let's say x is equal to 2 and y is equal to
4 and we will have another variable z which
00:59 - will be the return of this function Add and
we will pass x and y as arguments to this
01:06 - function.
01:07 - Finally, I'll print something like sum is
equal to z.
01:13 - No prizes for guessing the output here.
01:16 - Now I'll modify this code slightly, but before
that I want to talk about this concept once
01:22 - again that x, y and z are local variables
to main function and a, b, and c are local
01:31 - to Add function.
01:33 - What really happens when we call the Add function
is that value in this variable x of main is
01:39 - copied to variable a of Add.
01:43 - And value in y of main is copied to b of add.
01:47 - And what if we name these variables in main
a, b and c instead of x, y and z.
01:54 - If we run this code, output will be the same.
01:57 - This time what we will say is that the value
of a in main is copied to a of Add and the
02:03 - value of b in main is copied to b of Add.
02:07 - This a in main and this a in Add - they're
not the same.
02:11 - You can verify this by printing something
like this.
02:15 - I'm printing the addresses of these two 'a's
in my code and as you can see address of a
02:21 - in main is something like 2883032 and in Add
it is 2882792.
02:28 - So they're not the same.
02:30 - That means these variables are not the same.
02:32 - They're at different memory addresses.
02:35 - The names of variables are local or specific
to a particular function.
02:39 - In our example here, the method or the function
main can be called "calling" function and
02:45 - the function Add can be called "called" function
in this particular call, when we're saying
02:51 - that c is equal to Add and passing a and b.
02:55 - And this call where a and b in main are getting
copied to a and b in add, this is called a
03:04 - call by value.
03:06 - Now what I want do is, instead of passing
by value I want to pass the addresses of these
03:12 - two variables.
03:13 - So I want to say that I want to pass the address
of a and address of b to the Add function.
03:19 - So the signature of Add function should be
such that it should receive the addresses.
03:26 - So I'll say that, okay, it takes 2 pointers
to integers a and b.
03:30 - And now we can access the values at these
addresses by using this asterisk operator
03:39 - which is used to de-reference an address.
03:42 - Now such a call is called call by reference.
03:45 - a and b are integers local to main function
and in the function Add, a and b are not integer
03:52 - variables.
03:53 - a and b are pointer variables, pointer to
integers.
03:58 - So their type is different.
04:00 - They're not int, they're int* But at the end
of the day, they're also variables which are
04:05 - local to the function add.
04:08 - It's just that they're not integers.
04:10 - And now I'm using these two variables which
are pointer to integers to access these two
04:16 - variables a and b which are in the main method.
04:19 - And to do so we use the asterisk operator
and now, this code should also work.
04:23 - I'll write a few more print statements inside
this function Add.
04:29 - I have tried to print a and I have tried to
print *a and initially I was printing &a.
04:35 - So now &a should give us the address of the
pointer variable.
04:39 - a should gives us the address of a in main
because that is what this variable stores
04:45 - and *a should give us the value of a in main.
04:49 - Let us see in the output.
04:51 - Now as you can see here, the address of a
in main is 3537612 and address of a in Add
05:00 - is something else, but the value of a in Add
which is the address of a of main is equal
05:05 - to 3537612.
05:07 - So the first and the third lines are same
And using the address, we're printing the
05:11 - value which is equal to 2.
05:17 - Now I'll clean up some of these print statements.
05:21 - Coming back to our function add, we're returning
this value c.
05:25 - And once again in the main method, we're collecting
this value c in another variable which is
05:29 - c of main.
05:31 - Now why not do something like pass the address
of this c in Add function.
05:37 - So what we will do now is we will say that
we want to return pointer to integer from
05:41 - this function and here we will return &c.
05:44 - Now & when it is put in front of a variable
it gives us the address.
05:49 - Now of course, here we will have to collect
this particular address, so we will have to
05:54 - define a pointer variable.
05:56 - Now this would be ok.
05:57 - Now when we're printing, we will have to print
the value at address being pointed to by this
06:03 - variable.
06:07 - Now what we just did is we modified this Add
function to return a pointer to integer.
06:13 - There are two syntax-es We can say int and
then put this * sign or we can say int and
06:20 - put the * sign in front of the function name
Add and both these syntax-es are valid.
06:27 - Now this function is returning pointer to
integer.
06:32 - Let us run this program and see what happens.
06:34 - Let me also strike off this print statement
here.
06:38 - Okay, so the output seems to be alright.
06:42 - Now have you caught some logical error with
this code already?
06:47 - If you haven't stay with me for sometime.
06:50 - Now what I want to do is I want to write another
function, a simple function that will print
06:55 - "hello world".
06:57 - So I'll name this function PrintHelloWorld
and in this function I'll write a simple print
07:01 - statement.
07:02 - Now before I print this sum, what I'll do
is I'll call this function PrintHelloWorld()
07:09 - And let's see what happens now.
07:11 - Oops - this looks weird!
07:14 - Sum is not correct now.
07:15 - I just saw that it was coming fine in my last
run when I did not call this PrintHelloWorld.
07:21 - What happened?
07:23 - So let's try to understand what really happened
here?
07:25 - I'll come back to this familiar diagram of
various sections of application's memory.
07:31 - The memory that is allocated to a program
is typically divided into these sections.
07:36 - All the local variables and the information
about function call executions goes into the
07:42 - stack.
07:43 - So let us run through this code, let us simulate
this code and see what's really happening
07:48 - in the memory.
07:49 - For each function call, some part of memory
from the stack is allocated for its execution.
07:54 - Now we call this the stack frame of that method
or that function.
07:59 - When the program starts executing, first the
main method is invoked.
08:03 - So in the stack frame the memory will be allocated
for the main function and all the local variables
08:09 - of the main function will live inside this
stack frame.
08:13 - Let's say the starting address of this stack
frame is 100 and the end address of this stack
08:17 - frame is 130.
08:20 - And we will have 3 local variables created
here - a, b and ptr.
08:25 - a and b are integers and ptr is an integer
pointer.
08:30 - Let's say a is at address 100 and b is at
address 112 and ptr is at address 120.
08:37 - I am just making these assumptions.
08:40 - Now when the main method will come at this
line where it is calling Add function, its
08:45 - execution will pause and now memory will be
allocated for the execution of Add.
08:51 - At any time whatever function is at the top
of the stack is executing.
08:56 - main method will wait for Add function to
complete and return.
09:02 - Here I should say a is equal to 2, b is equal
to 4 and now Add comes here in the stack.
09:08 - Let's say Add gets memory from 130 to 160.and
Add also has 3 local variables - a, b and
09:14 - c. a and b are pointers to integers.
09:18 - The value of a will be 100 and the value of
b will be 112.
09:23 - Let's say their addresses are 130, 140 and
144.
09:32 - Once again these are just random assumptions.
09:35 - Now c is calculated as *a + *b.
09:39 - a is pointing to this location and b is pointing
to this location.
09:44 - *a is value at address stored in a and *b
is value at address stored in b.
09:50 - So this c will be 6 here.
09:53 - These two values will be added.
09:55 - Now this add function will return the address
of its local variable c which is 144 and finish
10:02 - its execution.
10:03 - So this ptr will be 144 and now the memory
that is allocated to Add function will be
10:10 - de-allocated.
10:11 - Now this memory above address 130 can be used
for other function calls.
10:18 - And even though this variable ptr stores the
address 144, the address of this particular
10:25 - block (it kind of points to this particular
block), the date here is not guaranteed because
10:30 - this memory has been de-allocated.
10:32 - Now we come here to this PrintHelloWorld and
now memory from stack will be allocated to
10:38 - PrintHelloWorld above this stack frame of
main method.
10:41 - This is main.
10:43 - So let's say that PrintHelloWorld gets this
memory block from address 130 to address 150.
10:49 - Now there is no local variable in this PrintHelloWorld
function.
10:53 - But still, function call execution involves
storage of some information.
10:58 - Now this section, from 130 to 150 is for PrintHelloWorld.
11:02 - I'll write PHW - shortcut for PrintHelloWorld.
11:05 - And it has been over-written.
11:07 - So this block at 144 no more stores value
6.
11:11 - So when we come here at this print statement,
to print the value at this particular address,
11:17 - we get some garbage value.
11:19 - Now the obvious question would be, why did
we get the right value when we were not making
11:24 - the call to PrintHelloWorld.
11:26 - I would say that I just got lucky.
11:28 - Maybe because I did not call any other function
after making a call to Add, my machine did
11:34 - not overwrite or erase the data at that particular
memory location.
11:38 - But when I made a call to PrintHelloWorld
that memory got used.
11:42 - If you see, we have passed the addresses of
these two variables a and b of main to Add
11:49 - function.
11:50 - But that is alright because called function
always comes above the calling function in
11:55 - the stack.
11:56 - So any time this called function is executing,
calling function will be in the memory.
12:01 - So if Add is executing, main is guaranteed
to be in the memory.
12:05 - So addresses of variables in main will be
accessible to Add.
12:09 - But if we try to return a local variable from
the called functionback to the calling function
12:13 - - like if we want to return a local variable
from Add to main, when that function finishes
12:19 - and the control returns back to the calling
function that memory has already been de-allocated.
12:25 - So it is ok to pass something from bottom
to top in this call stack, or I should rather
12:30 - say that it is ok to pass a local variable
or address of a local variable from bottom
12:35 - to top in the stack but it is not ok to return
the address of a local variable from top to
12:41 - bottom in the call-stack.
12:44 - I hope this makes sense.
12:45 - So now the obvious question would be - what
are the uses cases in which we may want to
12:50 - return pointers from functions.
12:52 - Well, if we have address of some memory block
in the heap section or some memory block in
12:58 - the global section, then we can safely return
the address of these blocks because anything
13:03 - in the heap has to be explicitly de-allocated.
13:06 - We control its de-allocation unlike stack.
13:10 - And anything which is in the global section,
a global variable, lives for the entire lifetime
13:15 - of the program.
13:16 - I can use malloc or new operator in C++ to
get some memory on heap.
13:22 - So if I modify my code something like this,
I will declare this c as a pointer to integer
13:29 - and get some space allocated on the heap using
a call to malloc.
13:36 - malloc is a library function that returns
pointer, but it returns pointer to an address
13:42 - which is on the heap.
13:44 - So we get a memory block and using this pointer
variable now, we can write this value - *a
13:51 - + *b - at that particular memory block.
13:54 - And then we can return this address c, which
is the same address that malloc returned us
14:00 - but we are safe now because we are returning
address of a block which is on the heap and
14:07 - not on the stack.
14:08 - And this will work now.
14:10 - Now in this code, let's say this call to malloc
gives us this block at address 500 in the
14:15 - heap.
14:16 - c now is only pointing to this block and using
c we have written this data here, this value
14:21 - 6.
14:22 - And now when add finishes, the address returned
by the Add function which is address 500 is
14:29 - still valid.
14:30 - We still have the data there and it will not
be de-allocated.
14:34 - Anything on the heap has to be explicitly
de-allocated.
14:38 - So while returning pointers from functions,
we need to be careful about the scope.
14:43 - We must be sure that the address is not re-used
to store something else or that the data is
14:48 - not cleared from that address.
14:50 - In most cases we will be returning pointers
to memory that is allocated on the heap, or
14:56 - memory that is in the global section, the
global variables section.
15:00 - In our coming lessons, one place where we
will be using pointers as function returns
15:05 - in our code is implementation of linked list
data structure.
15:09 - So this was pointers as function returns.
15:11 - Thanks for watching.

Cleaned transcript:

In this lesson we will talk about pointers as return type for functions. Pointer is just another data type. It's just that a pointer stores the address of another data type. So it is quite possible for a function to return pointer. But we must understand the use cases in which we may want to return a pointer from a function. So let us try to understand this. I'll get started by writing some code. Now I want to write a very simple C program initially. I want to write a function Add that will take two integers as argument and sum these two numbers and return the sum. So let's say we declare another variable c and c equals a + b and the function returns c. Now in the main method I'll initialize two variables. Let's name these variables x and y. Let's say x is equal to 2 and y is equal to 4 and we will have another variable z which will be the return of this function Add and we will pass x and y as arguments to this function. Finally, I'll print something like sum is equal to z. No prizes for guessing the output here. Now I'll modify this code slightly, but before that I want to talk about this concept once again that x, y and z are local variables to main function and a, b, and c are local to Add function. What really happens when we call the Add function is that value in this variable x of main is copied to variable a of Add. And value in y of main is copied to b of add. And what if we name these variables in main a, b and c instead of x, y and z. If we run this code, output will be the same. This time what we will say is that the value of a in main is copied to a of Add and the value of b in main is copied to b of Add. This a in main and this a in Add they're not the same. You can verify this by printing something like this. I'm printing the addresses of these two 'a's in my code and as you can see address of a in main is something like 2883032 and in Add it is 2882792. So they're not the same. That means these variables are not the same. They're at different memory addresses. The names of variables are local or specific to a particular function. In our example here, the method or the function main can be called "calling" function and the function Add can be called "called" function in this particular call, when we're saying that c is equal to Add and passing a and b. And this call where a and b in main are getting copied to a and b in add, this is called a call by value. Now what I want do is, instead of passing by value I want to pass the addresses of these two variables. So I want to say that I want to pass the address of a and address of b to the Add function. So the signature of Add function should be such that it should receive the addresses. So I'll say that, okay, it takes 2 pointers to integers a and b. And now we can access the values at these addresses by using this asterisk operator which is used to dereference an address. Now such a call is called call by reference. a and b are integers local to main function and in the function Add, a and b are not integer variables. a and b are pointer variables, pointer to integers. So their type is different. They're not int, they're int* But at the end of the day, they're also variables which are local to the function add. It's just that they're not integers. And now I'm using these two variables which are pointer to integers to access these two variables a and b which are in the main method. And to do so we use the asterisk operator and now, this code should also work. I'll write a few more print statements inside this function Add. I have tried to print a and I have tried to print *a and initially I was printing &a. So now &a should give us the address of the pointer variable. a should gives us the address of a in main because that is what this variable stores and *a should give us the value of a in main. Let us see in the output. Now as you can see here, the address of a in main is 3537612 and address of a in Add is something else, but the value of a in Add which is the address of a of main is equal to 3537612. So the first and the third lines are same And using the address, we're printing the value which is equal to 2. Now I'll clean up some of these print statements. Coming back to our function add, we're returning this value c. And once again in the main method, we're collecting this value c in another variable which is c of main. Now why not do something like pass the address of this c in Add function. So what we will do now is we will say that we want to return pointer to integer from this function and here we will return &c. Now & when it is put in front of a variable it gives us the address. Now of course, here we will have to collect this particular address, so we will have to define a pointer variable. Now this would be ok. Now when we're printing, we will have to print the value at address being pointed to by this variable. Now what we just did is we modified this Add function to return a pointer to integer. There are two syntaxes We can say int and then put this * sign or we can say int and put the * sign in front of the function name Add and both these syntaxes are valid. Now this function is returning pointer to integer. Let us run this program and see what happens. Let me also strike off this print statement here. Okay, so the output seems to be alright. Now have you caught some logical error with this code already? If you haven't stay with me for sometime. Now what I want to do is I want to write another function, a simple function that will print "hello world". So I'll name this function PrintHelloWorld and in this function I'll write a simple print statement. Now before I print this sum, what I'll do is I'll call this function PrintHelloWorld() And let's see what happens now. Oops this looks weird! Sum is not correct now. I just saw that it was coming fine in my last run when I did not call this PrintHelloWorld. What happened? So let's try to understand what really happened here? I'll come back to this familiar diagram of various sections of application's memory. The memory that is allocated to a program is typically divided into these sections. All the local variables and the information about function call executions goes into the stack. So let us run through this code, let us simulate this code and see what's really happening in the memory. For each function call, some part of memory from the stack is allocated for its execution. Now we call this the stack frame of that method or that function. When the program starts executing, first the main method is invoked. So in the stack frame the memory will be allocated for the main function and all the local variables of the main function will live inside this stack frame. Let's say the starting address of this stack frame is 100 and the end address of this stack frame is 130. And we will have 3 local variables created here a, b and ptr. a and b are integers and ptr is an integer pointer. Let's say a is at address 100 and b is at address 112 and ptr is at address 120. I am just making these assumptions. Now when the main method will come at this line where it is calling Add function, its execution will pause and now memory will be allocated for the execution of Add. At any time whatever function is at the top of the stack is executing. main method will wait for Add function to complete and return. Here I should say a is equal to 2, b is equal to 4 and now Add comes here in the stack. Let's say Add gets memory from 130 to 160.and Add also has 3 local variables a, b and c. a and b are pointers to integers. The value of a will be 100 and the value of b will be 112. Let's say their addresses are 130, 140 and 144. Once again these are just random assumptions. Now c is calculated as *a + *b. a is pointing to this location and b is pointing to this location. *a is value at address stored in a and *b is value at address stored in b. So this c will be 6 here. These two values will be added. Now this add function will return the address of its local variable c which is 144 and finish its execution. So this ptr will be 144 and now the memory that is allocated to Add function will be deallocated. Now this memory above address 130 can be used for other function calls. And even though this variable ptr stores the address 144, the address of this particular block (it kind of points to this particular block), the date here is not guaranteed because this memory has been deallocated. Now we come here to this PrintHelloWorld and now memory from stack will be allocated to PrintHelloWorld above this stack frame of main method. This is main. So let's say that PrintHelloWorld gets this memory block from address 130 to address 150. Now there is no local variable in this PrintHelloWorld function. But still, function call execution involves storage of some information. Now this section, from 130 to 150 is for PrintHelloWorld. I'll write PHW shortcut for PrintHelloWorld. And it has been overwritten. So this block at 144 no more stores value 6. So when we come here at this print statement, to print the value at this particular address, we get some garbage value. Now the obvious question would be, why did we get the right value when we were not making the call to PrintHelloWorld. I would say that I just got lucky. Maybe because I did not call any other function after making a call to Add, my machine did not overwrite or erase the data at that particular memory location. But when I made a call to PrintHelloWorld that memory got used. If you see, we have passed the addresses of these two variables a and b of main to Add function. But that is alright because called function always comes above the calling function in the stack. So any time this called function is executing, calling function will be in the memory. So if Add is executing, main is guaranteed to be in the memory. So addresses of variables in main will be accessible to Add. But if we try to return a local variable from the called functionback to the calling function like if we want to return a local variable from Add to main, when that function finishes and the control returns back to the calling function that memory has already been deallocated. So it is ok to pass something from bottom to top in this call stack, or I should rather say that it is ok to pass a local variable or address of a local variable from bottom to top in the stack but it is not ok to return the address of a local variable from top to bottom in the callstack. I hope this makes sense. So now the obvious question would be what are the uses cases in which we may want to return pointers from functions. Well, if we have address of some memory block in the heap section or some memory block in the global section, then we can safely return the address of these blocks because anything in the heap has to be explicitly deallocated. We control its deallocation unlike stack. And anything which is in the global section, a global variable, lives for the entire lifetime of the program. I can use malloc or new operator in C++ to get some memory on heap. So if I modify my code something like this, I will declare this c as a pointer to integer and get some space allocated on the heap using a call to malloc. malloc is a library function that returns pointer, but it returns pointer to an address which is on the heap. So we get a memory block and using this pointer variable now, we can write this value *a + *b at that particular memory block. And then we can return this address c, which is the same address that malloc returned us but we are safe now because we are returning address of a block which is on the heap and not on the stack. And this will work now. Now in this code, let's say this call to malloc gives us this block at address 500 in the heap. c now is only pointing to this block and using c we have written this data here, this value 6. And now when add finishes, the address returned by the Add function which is address 500 is still valid. We still have the data there and it will not be deallocated. Anything on the heap has to be explicitly deallocated. So while returning pointers from functions, we need to be careful about the scope. We must be sure that the address is not reused to store something else or that the data is not cleared from that address. In most cases we will be returning pointers to memory that is allocated on the heap, or memory that is in the global section, the global variables section. In our coming lessons, one place where we will be using pointers as function returns in our code is implementation of linked list data structure. So this was pointers as function returns. Thanks for watching.
