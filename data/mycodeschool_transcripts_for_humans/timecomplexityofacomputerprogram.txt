With timestamps:

00:00 - what is time complexity of a program
00:03 - and why is it important?
00:05 - we'll try to see
00:06 - through an example
00:09 - Ram and Shyam
00:11 - are two students
00:12 - and they have both been given the same assignment
00:16 - and the assignment is that
00:18 - given a number n
00:20 - they have to find out
00:21 - whether n 
00:22 - is prime
00:23 - or not
00:25 - a prime number 
00:26 - is a number that can be divided by
00:28 - exactly two numbers
00:31 - one and the number itself
00:32 - the smallest prime number is two and some
of the other prime numbers are
00:36 - three five
00:38 - seven
00:40 - eleven
00:41 - and we can go on
00:42 - one is not a prime number because
00:45 - one
00:45 - can be divided by exactly one number and that's one only
00:49 - so a prime number should have exactly two factors
00:53 - Both Ram and Shyam
00:55 - figure out different solutions to the problem
00:58 - Ram says that, hey !
01:00 - i'll try dividing n by all
01:03 - numbers starting 2
01:05 - all the way till (n-1)
01:08 - and if i can find any such number
01:11 - that divides n
01:13 - so
01:14 - if i can find any i between 2 to n-1 that divides n
01:18 - then n
01:20 - is not prime
01:26 - Shyam, however
01:27 - is intelligent enough to realize that
01:30 - he does not need to check all the way till n-1
01:34 - only if he cannot find
01:36 - an i till sqrt (n)
01:39 - he can be sure
01:40 - about whether the number is prime
01:42 - or not. So, he sees that
01:45 - for i startign 2 to sqrt(n)
01:49 - if there is any such i that divides n
01:52 - then n is not prime
01:57 - Both of these solutions are correct and let's
02:00 - say for now that Ram and Shyam
02:01 - have handled the special
02:03 - case for one separately
02:06 - Both of these will work and we will not go into the details of
02:09 - why they will work
02:11 - Let's just assume for now that they will work fine
02:15 - now when they both run their program
02:17 - for larger input sizes, Ram
02:21 - is quite sad
02:23 - while Shyam has a big smile on his face
02:26 - and why is it so?
02:29 - let's try to see
02:31 - let's say Mr. computer who has to run this program
02:36 - takes one milli second for a division operation
02:40 - so
02:41 - we'll say
02:42 - one ms for division
02:45 - let see what happens for
02:47 - various inputs
02:49 - of n
02:53 - in the worst case
02:55 - Ram's loop
02:56 - will run
02:57 - exactly n-2 times,  so it will perform exactly
03:00 - n-2 divisions
03:05 - and that would happen when the number is prime
03:09 - however for Shyam, in the worst case
03:13 - he will perform exactly square root of n
03:16 - minus one times, the division
03:21 - let's pick various values of n and see what's the time taken by these
03:24 - programs
03:27 - we'll pick up a small n first
03:28 - n = 11
03:30 - and 11 is a prime number, so 
03:32 - loop will run
03:34 - for Ram, the loop will run starting all the way till 10
03:38 - So
03:40 - this will take exactly
03:42 - eleven minus two
03:43 - millisecond which is
03:45 - nine milliseconds
03:53 - Shyam however, will take
03:56 - sqrt(n)
03:57 - or square root of eleven is 3 point something
04:00 - we are only interested in the integer values, so
04:02 - loop will only run only for 2 and 3
04:04 - so the loop will run exactly 3-1 times
04:08 - and the time taken will be 2 milliseconds
04:12 - nine ms and 2 ms, not much of a difference
04:15 - in terms of computational time
04:17 - let's pick up a higher value
04:21 - for n = 101, and that
04:24 - is a prime as well
04:28 - Ram will take
04:31 - 99 ms
04:36 - Shyam however will take
04:38 - sqrt(101)  is ten point something so
04:41 - Shyam will take 10 minus 1
04:43 - or 9 ms
04:47 - this is still less than one second
04:50 - Mr. computer wont  give you
04:51 - much of a
04:52 - hint of the actual runtime
04:55 - for such small
04:56 - value
04:57 - duration
04:59 - Let's pick up a slightly higher number this time and
05:03 - we will pick up
05:04 - a seven digit prime number this time
05:09 - this is
05:14 - now this is
05:16 - equal to ten to the power 6 plus 3
05:20 - this is also equal to
05:23 - tend to the power 6
05:27 - plus 3
05:40 - So, ram will take
05:44 - almost close to ten to the power six milliseconds
05:47 - to solve
05:48 - this problem
05:50 - and if you convert this to seconds. this is ten to the power 3 seconds, or
05:57 - sixteen point six six minutes
06:02 - and let's see how Mr. Shyam does here
06:05 - Shyam will take
06:07 - square root of 10 to the power 6
06:10 - plus 3
06:12 - minus one
06:13 - and for larger values of
06:15 - n, we can safely ignore this
06:17 - minus one year and this is almost close to
06:20 - 10^3 ms
06:23 - which is only one second
06:25 - so, now we can see a visible difference here
06:29 - while Ram is taking
06:30 - sixteen point six six minutes for this input
06:34 - Shyam is able to solve this problem only in one second
06:38 - let's pick up a really higher value this time
06:41 - an eleven digit prime number
06:45 - and
06:47 - the number is
06:54 - which is also equal to
06:56 - 10 to the power 10
06:58 - plus 19 and this is a prime as well
07:00 - so the loop will run exactly n-2 times
07:04 - so this will
07:06 - so
07:07 - Ram's program will take
07:11 - close to
07:12 - 10^10 milliseconds
07:17 - which is equal to
07:18 - 10^7  seconds
07:26 - if you try to convert this to
07:28 - minutes, hours
07:30 - and then days, this will
07:33 - be a little more than
07:34 - hundred and fifteen days
07:36 - which is quite an
07:37 - impractical time
07:39 - for a program to solve a problem
07:42 - and let us see how Shyam's program does here
07:45 - Shyam will take
07:47 - close to
07:48 - square root of 10^10 is almost equal
to
07:51 - 10^5 , so Shyam will take around
07:53 - 10^5 milliseconds
07:56 - which is only hundred seconds, or
08:02 - one point six six minutes
08:07 - now, we can see why Shyam is quite happy
08:11 - and Ram is sad
08:13 - while Shyam
08:15 - is solving the problem in one point six six minutes here
08:18 - Ram is taking an
08:20 - impractical time of hundred and fifteen days for this input size.
08:24 - time complexity of a program
08:27 - it's a simple measurement
08:30 - how fast the time taken by a program grows, if the
08:33 - input size increases
08:36 - so if the input to the program is n
08:39 - we can see that in the first case
08:41 - the time taken by the program is proportional to n
08:45 - we often see in computational terms that this program is an order of n
08:50 - algorithm
08:52 - this O
08:54 - is called big-oh
08:55 - and you can such over the internet for what it is
08:58 - We will not go into the detail mathematical assumptions behind this
09:00 - notation for now
09:04 - Shyam's program
09:05 - as you can see
09:07 - is proportional
09:08 - the time taken by Shyam's program is proportional to sqrt(n)
09:12 - and we say that this is
09:14 - an order of sqrt(n) algorithm
09:17 - and we represent it by
09:19 - big-oh sqrt(n)
09:22 - so, we realize through this example that 
09:25 - correctness of the program is not the
only thing
09:28 - what's also important
09:30 - is how your program behaves for 
09:31 - larger input sizes and we should always try to write a program
09:35 - that behaves
09:36 - well for larger input sizes
09:39 - So, thanks for watching !

Cleaned transcript:

what is time complexity of a program and why is it important? we'll try to see through an example Ram and Shyam are two students and they have both been given the same assignment and the assignment is that given a number n they have to find out whether n is prime or not a prime number is a number that can be divided by exactly two numbers one and the number itself the smallest prime number is two and some of the other prime numbers are three five seven eleven and we can go on one is not a prime number because one can be divided by exactly one number and that's one only so a prime number should have exactly two factors Both Ram and Shyam figure out different solutions to the problem Ram says that, hey ! i'll try dividing n by all numbers starting 2 all the way till (n1) and if i can find any such number that divides n so if i can find any i between 2 to n1 that divides n then n is not prime Shyam, however is intelligent enough to realize that he does not need to check all the way till n1 only if he cannot find an i till sqrt (n) he can be sure about whether the number is prime or not. So, he sees that for i startign 2 to sqrt(n) if there is any such i that divides n then n is not prime Both of these solutions are correct and let's say for now that Ram and Shyam have handled the special case for one separately Both of these will work and we will not go into the details of why they will work Let's just assume for now that they will work fine now when they both run their program for larger input sizes, Ram is quite sad while Shyam has a big smile on his face and why is it so? let's try to see let's say Mr. computer who has to run this program takes one milli second for a division operation so we'll say one ms for division let see what happens for various inputs of n in the worst case Ram's loop will run exactly n2 times, so it will perform exactly n2 divisions and that would happen when the number is prime however for Shyam, in the worst case he will perform exactly square root of n minus one times, the division let's pick various values of n and see what's the time taken by these programs we'll pick up a small n first n = 11 and 11 is a prime number, so loop will run for Ram, the loop will run starting all the way till 10 So this will take exactly eleven minus two millisecond which is nine milliseconds Shyam however, will take sqrt(n) or square root of eleven is 3 point something we are only interested in the integer values, so loop will only run only for 2 and 3 so the loop will run exactly 31 times and the time taken will be 2 milliseconds nine ms and 2 ms, not much of a difference in terms of computational time let's pick up a higher value for n = 101, and that is a prime as well Ram will take 99 ms Shyam however will take sqrt(101) is ten point something so Shyam will take 10 minus 1 or 9 ms this is still less than one second Mr. computer wont give you much of a hint of the actual runtime for such small value duration Let's pick up a slightly higher number this time and we will pick up a seven digit prime number this time this is now this is equal to ten to the power 6 plus 3 this is also equal to tend to the power 6 plus 3 So, ram will take almost close to ten to the power six milliseconds to solve this problem and if you convert this to seconds. this is ten to the power 3 seconds, or sixteen point six six minutes and let's see how Mr. Shyam does here Shyam will take square root of 10 to the power 6 plus 3 minus one and for larger values of n, we can safely ignore this minus one year and this is almost close to 10^3 ms which is only one second so, now we can see a visible difference here while Ram is taking sixteen point six six minutes for this input Shyam is able to solve this problem only in one second let's pick up a really higher value this time an eleven digit prime number and the number is which is also equal to 10 to the power 10 plus 19 and this is a prime as well so the loop will run exactly n2 times so this will so Ram's program will take close to 10^10 milliseconds which is equal to 10^7 seconds if you try to convert this to minutes, hours and then days, this will be a little more than hundred and fifteen days which is quite an impractical time for a program to solve a problem and let us see how Shyam's program does here Shyam will take close to square root of 10^10 is almost equal to 10^5 , so Shyam will take around 10^5 milliseconds which is only hundred seconds, or one point six six minutes now, we can see why Shyam is quite happy and Ram is sad while Shyam is solving the problem in one point six six minutes here Ram is taking an impractical time of hundred and fifteen days for this input size. time complexity of a program it's a simple measurement how fast the time taken by a program grows, if the input size increases so if the input to the program is n we can see that in the first case the time taken by the program is proportional to n we often see in computational terms that this program is an order of n algorithm this O is called bigoh and you can such over the internet for what it is We will not go into the detail mathematical assumptions behind this notation for now Shyam's program as you can see is proportional the time taken by Shyam's program is proportional to sqrt(n) and we say that this is an order of sqrt(n) algorithm and we represent it by bigoh sqrt(n) so, we realize through this example that correctness of the program is not the only thing what's also important is how your program behaves for larger input sizes and we should always try to write a program that behaves well for larger input sizes So, thanks for watching !
