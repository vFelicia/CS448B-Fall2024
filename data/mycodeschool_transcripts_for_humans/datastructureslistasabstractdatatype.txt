With timestamps:

00:00 - In our previous lesson, we introduced you
to the concept of data structures
00:05 - and we saw how we can talk about data
structures
00:08 - in two ways, one as a mathematical and logical model 
00:12 - that we also call,
00:13 - that we also term as
00:14 - an abstract data type
00:17 - or ADT
00:18 - and then we also study data structures as concrete implementations.
00:22 - In this lesson, we will study one simple
data structure
00:25 - we will first define an abstract view of it
00:28 - we will first define it as an abstract data
type and then we will see
00:32 - uh... the possible implementations
00:34 - and this data structure is list.
00:37 - List is a common
00:38 - real world entity.
00:40 - List is nothing but a collection of
objects of the same type.
00:44 - we can have a list of words, we can
have a list of names
00:48 - or, we can have a list of numbers
00:50 - so let us first define list as an
abstract data type. So,
00:54 - when we define abstract data type, we just
00:56 - define the data that we'll store and then
we define the operations
01:00 - available with the type and we do not
go into the implementation details
01:05 - let us first define a very basic list.
01:08 - I want a list that can store a
01:10 - given number of elements
01:12 - of a given data type
01:14 - this would be a static list as the
number of elements in the list will not
01:17 - change and we will know the number of
elements before creating the list
01:21 - We should be able to write or modify
01:25 - element at
01:26 - any position in the list
01:28 - and of course we should be able to read
element at a particular position in
01:31 - the list
01:32 - so if i ask you for an implementation
of such a list
01:36 - and you have taken a basic course
01:38 - in programming,
01:40 - a basic introductory course then you
will be like
01:42 - hey i know this,
01:43 - an array gives us all these features,
01:46 - all these operations are available with
an array,
01:49 - we can create an array of any data type. So, let's say if we want to create a
01:53 - list of
01:54 - integers,
01:55 - then we
01:56 - declare the array type
01:58 - as integer and then we can
02:00 - give the size as a parameter in declaration
02:03 - i can write
02:04 - or modify element at a particular
position
02:07 - The elements are A[0], A[1] and are accessed something like this
02:11 - we all know about arrays
02:12 - and then you can also read 
02:13 - elements at particular position.
02:17 - The element at i-th postion is accessed as
02:20 - A[i].
02:22 - So, array is a data structure that gives
us implementation for this list
02:26 - now i want a list and that should have
many more features. I want it to handle
02:31 - more scenarios for me
02:32 - so i'll redefine this list here
02:35 - i don't want a static list, a static collection of fixed size. I want a
02:38 - dynamic list
02:40 - that should grow as per my need
02:41 - so the features of my list are that
02:44 - i will call my list
02:46 - empty
02:47 - if there are no elements in the list
02:49 - i'll  say the size of the list is zero when it is empty
02:52 - and then
02:53 - i can insert an element into the list
02:57 - and i can insert an element at any
position in the list, in an existing
03:00 - list
03:01 - i can remove element from the list
03:04 - i can count the number of elements in
the list
03:07 - and i should be able to read or write
03:10 - or rather, read or modify
03:12 - element at a particular position in
the list
03:16 - and i should also be able to specify the
date type for the list so i should be
03:20 - able to while creating the list i should
be
03:23 - able to say
03:24 - whether this is a list of integers or whether this is a list of string
03:28 - or float or whatever.
03:30 - Now, i want a data structure which is implementation of this dynamic list
03:35 - so how do i get it?
03:37 - Well, actually we can implement such a
dynamic list using arrays. 
03:42 - It's just that we will have to
write some more operations on top of
03:45 - arrays
03:46 - to provide for all these
functionalities.
03:49 - So, let us see how we can implement this
particular list using arrays
03:53 - Let's for the sake of simplicity of
design uh... assume that
03:57 - that the data type for the list is integer.So, we are creating a list of,
04:01 - a dynamic list of integers.
04:03 - What we can do is to implement such a list
we can declare
04:07 - a really large array
04:09 - We will define some max size and declare an
array
04:12 - of this max size.
04:14 - Now, as we know the elements in the
04:16 - array are indexed as
04:18 - A[0], A[1]
04:20 - A[2]
04:21 - and we go on like this
04:23 - uh... so what i'll do is i will define a
04:25 - variable
04:26 - that will mark the end of the list
04:29 - in this array.
04:30 - So, if the list is empty, we can
04:33 - initialize this variable or we can set
this variable as minus one
04:37 - because the lowest index possible is 0
04:39 - so if end is minus one the list is
empty
04:42 - at anytime
04:43 - a part of the
04:45 - array will store the list
04:46 - Okay, so let's say initially when the list is empty
04:49 - this pointer end is pointing to
04:51 - index minus one which is not valid
04:53 - which does not exist
04:54 - and now
04:55 - i insert
04:57 - an integer into this array
04:59 - and let's say if we
05:01 - do not give the postion at which the number is to be inserted
05:04 - the number is always inserted towards the tail of the
05:06 - list, towards the end of the list
05:09 - so the list will be like we'll have an
element at position zero
05:13 - and now end is index zero
05:15 - So, at anytime end marks the
05:18 - this variable end, marks the end of the list in this array
05:22 - Now, if i want to insert something
05:24 - in the list at a particular position
05:27 - let's say i want to insert number five at
index two
05:30 - Then, to accommodate five here at this
particular position
05:34 - we will have to shift all the elements
05:37 - one unit towards the right
05:40 - all the elements starting index two
05:43 - we need to shift all the elements starting index
two towards the right
05:46 - okay i just inserted some elements into
the list let me also write the
05:50 - uh... function call for these
05:51 - let's say we went in this order, we inserted
two then we inserted four and then inserted
05:56 - in the end we are inserting five and we will also give the position at which we want to insert,
06:00 - so this insert with two arguments would
be
06:03 - the call to insert element at a
particular position.
06:07 - So, after all these operations, after
06:09 - all these insertions this is what
the list will look like
06:12 - this uh... arrow here marks the end of
the list in the array.
06:15 - Now, if i want to remove an element from
a particular position. Let's say i make 
06:19 - a call to something
06:21 - to the remove function i want to remove
06:23 - the element two so, i will pass the index zero here
06:26 - i want to remove the
06:28 - element at index zero.
06:29 - So, to do so, all these elements after index zero will be shifted one unit
06:35 - towards the left or towards the lower indices
06:38 - and two will go away
06:41 - that this end variable here 
06:43 - is being adjusted after each insertion
that we are making. So, after each
06:46 - insertion
06:47 - end will be zero after this one,
06:49 - two, three and so on.
06:51 - After this remove, end will be four
again. 
06:54 - Okay, looks like we pretty much have an
implementation of this uh... list in the
06:59 - left
06:59 - that is described as an abstract data type
07:02 - we have a logic of calling the list
empty when we have
07:06 - this variable end equal to minus one
07:08 - We can insert element at the
particular position in the list. We can
07:12 - remove element
07:13 - it's just that we have to perform some
shifts in the array, 
07:17 - they can count the number of elements in
the list
07:19 - it will be equal to end plus one the
value in the variable end plus one. We 
07:23 - can read and modify
07:25 - element at a position. Well, this
is an array, so we can definitely
07:30 - read or modify element at a particular
position
07:34 - uh... if we wanted to choose the data type
it was just choosing the array of
07:37 - that particular data type, 
07:39 - but this looks like a cool
implementation except that we have one
07:42 - problem
07:42 - uh... we said that the array will be
of some
07:45 - large size, some max size.
07:48 - But what is a good max size? We can
always exhaust the array, the list can
07:52 - grow to exhaust the array,
07:54 - there is no good max size.
07:57 - So,we need to have a strategy for
the scenario when the list will
08:01 - fill up the whole array.
08:03 - So, what do we do in that case?
08:05 - We need to keep that into our
design.
08:07 - We cannot extend the same array it is
not possible to do so.
08:11 - So, we will have to create a new array, a larger array
08:14 - So,  when the array is full, we will create a 
08:16 - new larger array
08:18 - and copy all the elements from the
previous array
08:21 - into the new array
08:24 - and then we can free the memory for the
previous array
08:28 - now the question is
08:29 - by how much should we increase the size
of the new array
08:32 - this whole operation of creating a new array
and copying all the elements from the
08:36 - previous array into the new array is
08:39 - costly
08:40 - in terms of time and definitely a good
design would be
08:43 - to avoid such big cost.
08:45 - So, the strategy that we choose
08:48 - is that uh... each time the array is
full, we create a new larger array
08:52 - of double the size of the previous
array
08:55 - and why this is the best strategy is
something that we will not discuss in
08:58 - this lesson
08:59 - so we will create a larger array of double size and copy
09:03 - elements from previous array into
09:05 - this new array.
09:07 - This looks like a cool implementation
09:09 - The study of data structures is not just about studying the operations
09:14 - and the implementation of these
operations
09:16 - it's also about analyzing the cost of
these operations
09:19 - so let us see what are the costs in
terms of time for all these operations
09:24 - that we have in the dynamic list.
09:26 - The access to any element in this
dynamic list,
09:30 - if we want to acces
09:31 - it using index for read or write,
09:34 - then this will take constant time
because
09:37 - we have an array here
09:39 - and in array, elements are arranged in one contiguous
09:43 - block of memory
09:44 - using the starting address or the base
address of the block of the memory of
09:48 - the block of memory
09:50 - and the index on the position of the
element can
09:53 - calculate the address of that particular
element and excessive
09:57 - in constant time.
09:58 - Big oh notation, that is used to describe
the time complexity of operations
10:03 - for constant time,it is written as in terms of big oh,
10:07 - the time complexity is written as Big Oh of
one.
10:10 - If we wanted to insert element
10:13 - if we wanted to insert element at the end of the array
10:16 - uh... end of the list
10:17 - then that again will be cost in time but
if we would insert element at a
10:21 - particular position in the list
10:24 - then we will have to shift
10:26 - elements towards
10:27 - higher indices. In the worst case
we will have to shift
10:30 - all the elements to the right when we will be
10:33 - inserting at the first position,
10:35 - so the time taken for insertion
10:37 - uh... will be proportional to
10:39 - the length of the list let's say the
length of the list is n
10:43 - or, in other words, we will say that insertion will be Big Oh of n 
10:47 - in terms of time complexity
10:49 - if you do not know about Big Oh notation, do not bother, just understand that,
10:53 - inserting an element at the
particular position will be
10:57 - a linear function in terms of the size of
the list.
11:00 - Removing
11:01 - an element will again be big oh of n
11:05 - Time taken will be
11:07 - proportional to
11:08 - the current size of the list.
11:10 - n is the size of the list here.
11:13 - ok now, inserting an element at the
end we just said that
11:16 - it will happen in constant time it is not
so if the array is full
11:20 - then we will create a new array
11:23 - uh... lets call
11:24 - inserting
11:25 - element at the end as adding an element
11:28 - adding an element will take constant time
11:30 - if the list is not full but it will take
11:32 - time proportional  to the size of the list,
size of the array, if
11:37 - array is full.
11:38 - So, adding in the worst case
11:40 - will be big oh of n again
11:43 - as we said when the list is full
we create a new copy double the size of the
11:47 - previous array and when we copy 
11:49 - the previous array, elements from previous array
into the new array,
11:53 - so primafacy what loooks like
11:56 - the good thing with this kind of
implementation
11:59 - Well, the good thing is that we can
access elements at any index in
12:03 - constant time
12:05 - which is the property of the array
12:07 - but if we have to insert some element
in between and if we have to remove
12:11 - element from the list then it is costly.
12:14 - if the list grows and shrinks
a lot
12:17 - then we will also have to create a new array
and have all this thing of copying
12:22 - elements from previous array to a new
array again and again
12:25 - and one more problem is that
12:28 - a lot of time
12:29 - a lot of the array would be unused.
12:32 - The memory there, 
12:34 - is of no use
12:35 - Definitely the use of
12:37 - array as
12:38 - dynamic list is not efficient in
terms of memory this kind of
12:41 - implementation is not efficient in terms
of memory
12:44 - This leads us to think- can we
12:46 - have a data structure that will give
us a dynamic list
12:49 - and use the memory more efficiently
12:52 - we have one data structure that gives us
good
12:55 - utilization of the memory
12:56 - and this data structure is linked list
12:59 - and we will study about the linked list
13:02 - in the next lesson.
13:04 - So that's it for this lesson. Thanks for
watching!

Cleaned transcript:

In our previous lesson, we introduced you to the concept of data structures and we saw how we can talk about data structures in two ways, one as a mathematical and logical model that we also call, that we also term as an abstract data type or ADT and then we also study data structures as concrete implementations. In this lesson, we will study one simple data structure we will first define an abstract view of it we will first define it as an abstract data type and then we will see uh... the possible implementations and this data structure is list. List is a common real world entity. List is nothing but a collection of objects of the same type. we can have a list of words, we can have a list of names or, we can have a list of numbers so let us first define list as an abstract data type. So, when we define abstract data type, we just define the data that we'll store and then we define the operations available with the type and we do not go into the implementation details let us first define a very basic list. I want a list that can store a given number of elements of a given data type this would be a static list as the number of elements in the list will not change and we will know the number of elements before creating the list We should be able to write or modify element at any position in the list and of course we should be able to read element at a particular position in the list so if i ask you for an implementation of such a list and you have taken a basic course in programming, a basic introductory course then you will be like hey i know this, an array gives us all these features, all these operations are available with an array, we can create an array of any data type. So, let's say if we want to create a list of integers, then we declare the array type as integer and then we can give the size as a parameter in declaration i can write or modify element at a particular position The elements are A[0], A[1] and are accessed something like this we all know about arrays and then you can also read elements at particular position. The element at ith postion is accessed as A[i]. So, array is a data structure that gives us implementation for this list now i want a list and that should have many more features. I want it to handle more scenarios for me so i'll redefine this list here i don't want a static list, a static collection of fixed size. I want a dynamic list that should grow as per my need so the features of my list are that i will call my list empty if there are no elements in the list i'll say the size of the list is zero when it is empty and then i can insert an element into the list and i can insert an element at any position in the list, in an existing list i can remove element from the list i can count the number of elements in the list and i should be able to read or write or rather, read or modify element at a particular position in the list and i should also be able to specify the date type for the list so i should be able to while creating the list i should be able to say whether this is a list of integers or whether this is a list of string or float or whatever. Now, i want a data structure which is implementation of this dynamic list so how do i get it? Well, actually we can implement such a dynamic list using arrays. It's just that we will have to write some more operations on top of arrays to provide for all these functionalities. So, let us see how we can implement this particular list using arrays Let's for the sake of simplicity of design uh... assume that that the data type for the list is integer.So, we are creating a list of, a dynamic list of integers. What we can do is to implement such a list we can declare a really large array We will define some max size and declare an array of this max size. Now, as we know the elements in the array are indexed as A[0], A[1] A[2] and we go on like this uh... so what i'll do is i will define a variable that will mark the end of the list in this array. So, if the list is empty, we can initialize this variable or we can set this variable as minus one because the lowest index possible is 0 so if end is minus one the list is empty at anytime a part of the array will store the list Okay, so let's say initially when the list is empty this pointer end is pointing to index minus one which is not valid which does not exist and now i insert an integer into this array and let's say if we do not give the postion at which the number is to be inserted the number is always inserted towards the tail of the list, towards the end of the list so the list will be like we'll have an element at position zero and now end is index zero So, at anytime end marks the this variable end, marks the end of the list in this array Now, if i want to insert something in the list at a particular position let's say i want to insert number five at index two Then, to accommodate five here at this particular position we will have to shift all the elements one unit towards the right all the elements starting index two we need to shift all the elements starting index two towards the right okay i just inserted some elements into the list let me also write the uh... function call for these let's say we went in this order, we inserted two then we inserted four and then inserted in the end we are inserting five and we will also give the position at which we want to insert, so this insert with two arguments would be the call to insert element at a particular position. So, after all these operations, after all these insertions this is what the list will look like this uh... arrow here marks the end of the list in the array. Now, if i want to remove an element from a particular position. Let's say i make a call to something to the remove function i want to remove the element two so, i will pass the index zero here i want to remove the element at index zero. So, to do so, all these elements after index zero will be shifted one unit towards the left or towards the lower indices and two will go away that this end variable here is being adjusted after each insertion that we are making. So, after each insertion end will be zero after this one, two, three and so on. After this remove, end will be four again. Okay, looks like we pretty much have an implementation of this uh... list in the left that is described as an abstract data type we have a logic of calling the list empty when we have this variable end equal to minus one We can insert element at the particular position in the list. We can remove element it's just that we have to perform some shifts in the array, they can count the number of elements in the list it will be equal to end plus one the value in the variable end plus one. We can read and modify element at a position. Well, this is an array, so we can definitely read or modify element at a particular position uh... if we wanted to choose the data type it was just choosing the array of that particular data type, but this looks like a cool implementation except that we have one problem uh... we said that the array will be of some large size, some max size. But what is a good max size? We can always exhaust the array, the list can grow to exhaust the array, there is no good max size. So,we need to have a strategy for the scenario when the list will fill up the whole array. So, what do we do in that case? We need to keep that into our design. We cannot extend the same array it is not possible to do so. So, we will have to create a new array, a larger array So, when the array is full, we will create a new larger array and copy all the elements from the previous array into the new array and then we can free the memory for the previous array now the question is by how much should we increase the size of the new array this whole operation of creating a new array and copying all the elements from the previous array into the new array is costly in terms of time and definitely a good design would be to avoid such big cost. So, the strategy that we choose is that uh... each time the array is full, we create a new larger array of double the size of the previous array and why this is the best strategy is something that we will not discuss in this lesson so we will create a larger array of double size and copy elements from previous array into this new array. This looks like a cool implementation The study of data structures is not just about studying the operations and the implementation of these operations it's also about analyzing the cost of these operations so let us see what are the costs in terms of time for all these operations that we have in the dynamic list. The access to any element in this dynamic list, if we want to acces it using index for read or write, then this will take constant time because we have an array here and in array, elements are arranged in one contiguous block of memory using the starting address or the base address of the block of the memory of the block of memory and the index on the position of the element can calculate the address of that particular element and excessive in constant time. Big oh notation, that is used to describe the time complexity of operations for constant time,it is written as in terms of big oh, the time complexity is written as Big Oh of one. If we wanted to insert element if we wanted to insert element at the end of the array uh... end of the list then that again will be cost in time but if we would insert element at a particular position in the list then we will have to shift elements towards higher indices. In the worst case we will have to shift all the elements to the right when we will be inserting at the first position, so the time taken for insertion uh... will be proportional to the length of the list let's say the length of the list is n or, in other words, we will say that insertion will be Big Oh of n in terms of time complexity if you do not know about Big Oh notation, do not bother, just understand that, inserting an element at the particular position will be a linear function in terms of the size of the list. Removing an element will again be big oh of n Time taken will be proportional to the current size of the list. n is the size of the list here. ok now, inserting an element at the end we just said that it will happen in constant time it is not so if the array is full then we will create a new array uh... lets call inserting element at the end as adding an element adding an element will take constant time if the list is not full but it will take time proportional to the size of the list, size of the array, if array is full. So, adding in the worst case will be big oh of n again as we said when the list is full we create a new copy double the size of the previous array and when we copy the previous array, elements from previous array into the new array, so primafacy what loooks like the good thing with this kind of implementation Well, the good thing is that we can access elements at any index in constant time which is the property of the array but if we have to insert some element in between and if we have to remove element from the list then it is costly. if the list grows and shrinks a lot then we will also have to create a new array and have all this thing of copying elements from previous array to a new array again and again and one more problem is that a lot of time a lot of the array would be unused. The memory there, is of no use Definitely the use of array as dynamic list is not efficient in terms of memory this kind of implementation is not efficient in terms of memory This leads us to think can we have a data structure that will give us a dynamic list and use the memory more efficiently we have one data structure that gives us good utilization of the memory and this data structure is linked list and we will study about the linked list in the next lesson. So that's it for this lesson. Thanks for watching!
