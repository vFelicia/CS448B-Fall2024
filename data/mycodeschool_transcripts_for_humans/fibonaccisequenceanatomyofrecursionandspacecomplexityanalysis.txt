With timestamps:

00:00 - Space complexity analysis of a program is
the analysis of how the memory required or
00:06 - the memory consumed by a program grows with
the input.
00:12 - So, let's try to analyze the space complexity
of recursive implementation of Fibonacci sequence.
00:19 - I will write down the sequence here for you.
00:21 - First two elements in the sequence are 0 and
1 and all other elements are sum of previous
00:28 - two elements and we have seen this quite often
in our previous lessons.
00:33 - And lets write down the program to calculate
Fibonacci sequence.
00:37 - So, we have a method Fib(n) that gives me
an element in the above sequence.
00:43 - And if n is less than or equal to 1, we return
n.
00:47 - Else we make two recursive calls to calculate
Fib(n-1) and Fib(n-2), sum them up and return
00:55 - the result.
00:56 - Now, complexity .. space complexity analysis
of a recursive program can be really tricky
01:03 - because a lot of things happen behind the
scene and we really need to understand that
01:07 - how recursive program executes in the memory
to understand and analyze the memory consumption.
01:14 - Now, lets say what we have drawn here in the
right is computers memory and these partitions
01:22 - in the memory are basically some units in
which the memory is divided.
01:26 - Now, i want to calculate Fib(5), so in a typical
program we will have a main method and from
01:37 - this main method, we will call Fib(5).
01:40 - Now, lets roll back a little bit.
01:42 - When a method is executing, it is currently
in the memory.
01:47 - So, all the local variables and the information
about the method is already in the memory.
01:53 - Now, when this method A makes a call to another
method B. So, for example, in this case main
02:00 - makes a call to calculate Fib(5), and I will
write F(5) as shortcut for Fib(5) because
02:08 - its easier for me to write, then what the
computer says is that hey, I will save the
02:13 - current state of execution of this particular
method, kind of pause it in the memory and
02:19 - go ahead and calculate F(5) and once I am
done with F(5), then I'll come back to the
02:24 - main method.
02:25 - So, now F(5) is executing and its in the memory
and the main method is kind of saved in what
02:32 - we can imagine to be a paused state and this
is executing.
02:37 - Now, F(5) is executing and now F(5) makes
a call to F(4) and this is a recursive call
02:49 - because the function is calling itself, though
with a changed argument or a reduced argument.
02:55 - So, a recursive call is not different from
a function A calling another function B except
03:02 - for the fact that here A and B are same.
03:06 - But in terms of execution, separate memory
and resources are allocated to the new function
03:12 - call.
03:13 - So, now F(4) is executing and the computer
has saved the state of F(5) as well.
03:20 - And lets say this red arrow here points to
the currently executing function while rest
03:26 - of the functions are in paused state.
03:29 - Now, F(4) again makes a call to F(3), F(3)
again makes a call to F(2).
03:37 - Now, I'll do one thing here, I'll change the
color of main method.
03:42 - So, rest of the structure in blue is what
we can call the recursion tree corresponding
03:47 - to the call Fib(5).
03:50 - So, now F(2) makes a call to F(1).
03:56 - And now F(1) is executing.
03:57 - So, as we can see here, even though explicitly
we have not declared any variable or used
04:03 - any memory in the method Fib(n), behind the
scene all the states of these methods are
04:10 - being saved in the memory or these function
calls are stacked in the memory and space
04:17 - is getting consumed.
04:18 - We often say that an implicit stack is growing
in the memory and we call this function call
04:28 - stack.
04:29 - So, as we can see here that above this main
method from F(5) onward, the growth of the
04:35 - stack has been because of the recursive calls
of method Fib or F. So, this part of the call
04:44 - stack is kind of the memory consumption by
our recursive algorithm.
04:49 - Now, in this recursion, F(1) will not make
any further function call, or any further
04:54 - recursive call.
04:55 - it simply returns 1.
04:57 - And now F(1) has finished and it also gets
popped from the memory and the control goes
05:02 - back to F(2).
05:03 - Now, F(2) at this stage makes another call
to F(0) and F(0) also simply returns 0 and
05:14 - finishes.
05:15 - And I will rather name this stack as function
call stack.
05:18 - Now, F(2) adds up these two values - 1 and
0 and returns the sum 2 to F(3) and now F(3)
05:26 - resumes again and now F(3) has got F(2), so
it makes another call to F(1) and this pushing
05:35 - and popping into the memory goes on.
05:39 - So, now F(4) has resumed again and F(4) has
got the two returns, so it simply adds them
05:46 - up and returns to F(5) and now F(5) resumes
again and F(5) now has got return from F(4)
05:52 - at this stage.
05:53 - It makes another call to calculate F(3) and
F(3) again calls F(2) and now F(2) is executing
06:04 - and F(3) goes in a paused state.
06:07 - F(2) again makes a cal to F(1) and F(0) which
simply return 1 and 0 respectively and I am
06:16 - skipping showing these F(1) and F(0) in the
stack here.
06:19 - Now F(2) sums up these values and returns
to F(3) and F(3) resumes again and F(3) again
06:25 - makes a call to F(1) which simply returns
1.
06:28 - Once again, I am skipping showing push and
pop in the call stack and now F(3) sums up
06:34 - these two values and returns to F(5) and F(5)
resumes again.
06:40 - F(3) simply finishes and is removed from the
memory.
06:44 - Now, F(5) sums up these two values and returns
to the main method which is its caller.
06:52 - And finally, main method resumes and this
stage, we have the output from the function
06:58 - call Fib(5) and it could print the output
or use it for some other calculation.
07:06 - Now, I'll replace this figure here with an
actual recursion tree with all the function
07:12 - calls.
07:13 - So, this is our recursion tree.
07:15 - Now, the space consumed by this particular
recursion was the memory that it consumed
07:21 - in the function call stack and the maximum
growth of this call stack due to this particular
07:27 - recursion was when we were at this particular
node, the bottom-most node.
07:32 - So, when F(1) was executing, then all these
states of F(5), F(4), F(3) and F(2) were saved
07:40 - in the memory and we were consuming kind of
5 units of space in the memory and the call
07:45 - stack did not grow any larger than this.
07:47 - So, this was the maximum space consumed and
if you analyze it well, then the maximum space
07:54 - consumed by a recursive program is proportional
to the maximum depth of this recursion tree.
08:03 - And the maximum depth of recursion tree is
defined as the length of the longest path
08:09 - in the tree, so if this is level 0 in the
tree and if we go down by one arrow, then
08:16 - this is L1, which is level 1 and then we go
down by another arrow, so it is L2 and we
08:22 - go on like L3 and L4.
08:24 - So, the maximum depth in this case is the
path from L0 to L4 which is 4 units in this
08:31 - case.
08:32 - And the number of function calls is 5.
08:38 - And the maximum memory consumed is 5 units.
08:42 - If we would have called the function Fib for
any generic value of n, then the maximum depth
08:50 - of the recursion tree would have been n-1
units and the maximum space taken would have
08:55 - been n units.
08:57 - So, when we analyze complexity of programs,
we often take the upper bound for the time
09:03 - or the space taken.
09:05 - In fact we most often take the upper bound
for the time or space taken.
09:08 - So, in this case space or memory consumption
is proportional to n and we can also say that
09:15 - this is big-oh of n in terms of space complexity.
09:20 - in general the space complexity of a recursive
program would be of the order of max depth
09:26 - of he recursion tree.
09:28 - So, this was space complexity analysis of
simple recursive implementation of Fibonacci
09:35 - sequence.
09:36 - Thanks for watching !

Cleaned transcript:

Space complexity analysis of a program is the analysis of how the memory required or the memory consumed by a program grows with the input. So, let's try to analyze the space complexity of recursive implementation of Fibonacci sequence. I will write down the sequence here for you. First two elements in the sequence are 0 and 1 and all other elements are sum of previous two elements and we have seen this quite often in our previous lessons. And lets write down the program to calculate Fibonacci sequence. So, we have a method Fib(n) that gives me an element in the above sequence. And if n is less than or equal to 1, we return n. Else we make two recursive calls to calculate Fib(n1) and Fib(n2), sum them up and return the result. Now, complexity .. space complexity analysis of a recursive program can be really tricky because a lot of things happen behind the scene and we really need to understand that how recursive program executes in the memory to understand and analyze the memory consumption. Now, lets say what we have drawn here in the right is computers memory and these partitions in the memory are basically some units in which the memory is divided. Now, i want to calculate Fib(5), so in a typical program we will have a main method and from this main method, we will call Fib(5). Now, lets roll back a little bit. When a method is executing, it is currently in the memory. So, all the local variables and the information about the method is already in the memory. Now, when this method A makes a call to another method B. So, for example, in this case main makes a call to calculate Fib(5), and I will write F(5) as shortcut for Fib(5) because its easier for me to write, then what the computer says is that hey, I will save the current state of execution of this particular method, kind of pause it in the memory and go ahead and calculate F(5) and once I am done with F(5), then I'll come back to the main method. So, now F(5) is executing and its in the memory and the main method is kind of saved in what we can imagine to be a paused state and this is executing. Now, F(5) is executing and now F(5) makes a call to F(4) and this is a recursive call because the function is calling itself, though with a changed argument or a reduced argument. So, a recursive call is not different from a function A calling another function B except for the fact that here A and B are same. But in terms of execution, separate memory and resources are allocated to the new function call. So, now F(4) is executing and the computer has saved the state of F(5) as well. And lets say this red arrow here points to the currently executing function while rest of the functions are in paused state. Now, F(4) again makes a call to F(3), F(3) again makes a call to F(2). Now, I'll do one thing here, I'll change the color of main method. So, rest of the structure in blue is what we can call the recursion tree corresponding to the call Fib(5). So, now F(2) makes a call to F(1). And now F(1) is executing. So, as we can see here, even though explicitly we have not declared any variable or used any memory in the method Fib(n), behind the scene all the states of these methods are being saved in the memory or these function calls are stacked in the memory and space is getting consumed. We often say that an implicit stack is growing in the memory and we call this function call stack. So, as we can see here that above this main method from F(5) onward, the growth of the stack has been because of the recursive calls of method Fib or F. So, this part of the call stack is kind of the memory consumption by our recursive algorithm. Now, in this recursion, F(1) will not make any further function call, or any further recursive call. it simply returns 1. And now F(1) has finished and it also gets popped from the memory and the control goes back to F(2). Now, F(2) at this stage makes another call to F(0) and F(0) also simply returns 0 and finishes. And I will rather name this stack as function call stack. Now, F(2) adds up these two values 1 and 0 and returns the sum 2 to F(3) and now F(3) resumes again and now F(3) has got F(2), so it makes another call to F(1) and this pushing and popping into the memory goes on. So, now F(4) has resumed again and F(4) has got the two returns, so it simply adds them up and returns to F(5) and now F(5) resumes again and F(5) now has got return from F(4) at this stage. It makes another call to calculate F(3) and F(3) again calls F(2) and now F(2) is executing and F(3) goes in a paused state. F(2) again makes a cal to F(1) and F(0) which simply return 1 and 0 respectively and I am skipping showing these F(1) and F(0) in the stack here. Now F(2) sums up these values and returns to F(3) and F(3) resumes again and F(3) again makes a call to F(1) which simply returns 1. Once again, I am skipping showing push and pop in the call stack and now F(3) sums up these two values and returns to F(5) and F(5) resumes again. F(3) simply finishes and is removed from the memory. Now, F(5) sums up these two values and returns to the main method which is its caller. And finally, main method resumes and this stage, we have the output from the function call Fib(5) and it could print the output or use it for some other calculation. Now, I'll replace this figure here with an actual recursion tree with all the function calls. So, this is our recursion tree. Now, the space consumed by this particular recursion was the memory that it consumed in the function call stack and the maximum growth of this call stack due to this particular recursion was when we were at this particular node, the bottommost node. So, when F(1) was executing, then all these states of F(5), F(4), F(3) and F(2) were saved in the memory and we were consuming kind of 5 units of space in the memory and the call stack did not grow any larger than this. So, this was the maximum space consumed and if you analyze it well, then the maximum space consumed by a recursive program is proportional to the maximum depth of this recursion tree. And the maximum depth of recursion tree is defined as the length of the longest path in the tree, so if this is level 0 in the tree and if we go down by one arrow, then this is L1, which is level 1 and then we go down by another arrow, so it is L2 and we go on like L3 and L4. So, the maximum depth in this case is the path from L0 to L4 which is 4 units in this case. And the number of function calls is 5. And the maximum memory consumed is 5 units. If we would have called the function Fib for any generic value of n, then the maximum depth of the recursion tree would have been n1 units and the maximum space taken would have been n units. So, when we analyze complexity of programs, we often take the upper bound for the time or the space taken. In fact we most often take the upper bound for the time or space taken. So, in this case space or memory consumption is proportional to n and we can also say that this is bigoh of n in terms of space complexity. in general the space complexity of a recursive program would be of the order of max depth of he recursion tree. So, this was space complexity analysis of simple recursive implementation of Fibonacci sequence. Thanks for watching !
