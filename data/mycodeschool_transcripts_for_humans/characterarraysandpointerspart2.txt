With timestamps:

00:00 - In part one of our lesson on character
arrays and pointers
00:03 - we saw how we can store strings in
character arrays
00:07 - and we also saw how we can work with
character arrays using pointers in some of
00:12 - the basic scenarios
00:13 - whenever we are working with pointers
it's really important that we
00:17 - visualize how things are happening in
the memory so the first thing that we
00:21 - will do in this lesson is
00:22 - we will simulate the program that we
had written in the previous lesson to
00:26 - print the characters of a string and
see what
00:31 - goes where in the memory and we will also look
00:34 - into the concept of string constants and
00:37 - constant pointers so this is where we had
left in our previous lesson
00:42 - we have written a function print to
print the characters in a string
00:46 - in the main method we have a character
array of size twenty
00:50 - but we have stored a string of length
five in it
00:53 - we have used a string lateral
00:56 - so null termination is implicit we have
talked about this earlier
01:00 - so let us step through this code and see
how it is working
01:04 - now once again I have drawn this familiar
diagram the memory
01:08 - that is allocated for execution of a
program is typically divided into these
01:13 - four parts these four sections one
part of the memory stores the
01:17 - instructions in the program we call that
the code segment or the text segment
01:22 - one section stores the global
variables
01:26 - and stack is where all the information
regarding function call execution
01:30 - and all the local variables
01:32 - go whenever we are writing a program
than ever we are executing a program
01:36 - we should always visualize
01:38 - what variable goes where or what data
goes where
01:43 - and what is the scope of that variable
our data okay so
01:47 - let us run through this code and see
what is happening in the memory
01:50 - when this program will start executing
first
01:54 - the main method main function will be invoked
01:57 - whenever a function is called some
amount of memory from the stack
02:02 - is allocated for the execution of that
function
02:05 - it's called the stack frame of that
function
02:09 - so let us say this stack frame from
address
02:12 - 100 to 150 is allocated for
02:15 - the main function stack is one
contiguous
02:18 - block of memory so let us say in this stack
the memory
02:21 - increases from bottom to top all the
local variables of a function
02:26 - go into the stack frame of the function
so when we
02:30 - declare a character array 20 bytes
from the stack frame will be allocated
02:34 - for this particular character array
02:36 - let's say they are allocated from address
100 to 120
02:40 - each character is stored in one bite so
02:43 - we need 20 bytes for character array of
size 20
02:46 - apart from local variables there maybe some
more information in stack frame so
02:51 - that's why we have some more space
02:53 - and now the control of the program goes
to this statement print 'c'
02:57 - as soon as we make a call to another
function from a function the execution
03:01 - of that particular function
03:03 - is paused at that particular line and
the machine goes on to execute
03:08 - the called function the called function
is allocated stack frame
03:12 - on top of the calling functions of print
will be allocated as stack frame on top of
03:17 - main function whatever function is at
the top of the stack in
03:21 - at any point is executing I mean we'll
wait for this function to finish
03:25 - let's say this particular stack frame is
from 150 to 170
03:29 - main is paused and
03:32 - print is executing right now, now
print will also have a local variable C
03:37 - but this will be a pointer variable 
a pointer variable takes
03:41 - four byte of memory in a typical
architecture so this will be
03:45 - taking four bytes so let's say starting
address:
03:48 - 154 in this stack frame we have
four bytes for this particular character
03:53 - pointer
03:54 - so this C in main is actually not the
same C
03:57 - in print, the C in main and C print
are different
04:01 - they have different scopes we could have
named this particular variable
04:06 - a or PTR or whatever but all that
happens when we make this particular
04:11 - call to print and pass this C here
04:15 - is that the address 100 which is the
base address of the array
04:19 - is passed to the print function and the
print function keeps it
04:22 - stores it in the pointer variable
sometimes it may confuse us when we are
04:27 - using the same local variable name in the
04:30 - calling function and the same argument
name in the called function
04:34 - but we must always understand that
they're different okay to run through
04:38 - this code further
04:39 - I clear some space here now
04:42 - I'll draw this array C outside the stack here
04:47 - we have an array of size 20 but
we are only showing
04:51 - the first six positions in the array
from address 100 to 105
04:55 - and that's why it is extending towards the right
04:58 - the sixth charecter is a null
character and the first five characters
05:02 - are the characters of word hello and now
we have this another guy which is c
05:08 - of print which is a character pointer at
address
05:11 - 154 that stores address 100 so it points to
05:16 - the first element of the array now let's
come back to our program execution
05:21 - let's say we are here initially I'll
mark the statement that
05:25 - is executing by this green arrow, let's
name these two guys this guy is C but ths guy is
05:30 - an array
05:30 - local  to main and this is also
C but it is a character pointer local
05:36 - to print
05:37 - ok so now here what we're saying is while
*C is not equal to the null
05:42 - character
05:43 - when we put this * operator in
front of a pointer variable
05:47 - we are looking at the value at that
particular address
05:50 - so at this stage when C is pointing to
the
05:54 - base address *C is H so this
condition is not true
05:58 - we will go to this line print F
that will simply
06:02 - print *C which is H let's write down
the output here
06:06 - so we have printed H so far and then we say c++;
06:12 - if we understand pointer arithmetic from
our previous lessons
06:16 - incrementing a pointer by one unit
increments the address by size of the
06:21 - data type
06:22 - that the pointer points to C here is a
pointer to character data type and
06:26 - character data type is
06:28 - one byte so C+1, C++ is 
saying C= C+1
06:34 - so C now becomes 101 so now C points
06:38 - to the second character in the array and
once again we come
06:42 - to where we find this condition in the while
loop *C is E
06:46 - here it's not null  once again
we will go inside the loop and print E
06:50 - and we will keep on going like this
06:55 - till the address in this pointer variable
reaches 105
06:59 - now here the value at this particular
addresses is
07:02 - null character so the loop will not
execute
07:05 - we will come to this statement to
print an end-of-line
07:09 - and the execution of print function will
finish
07:14 - so this particular stack frame for print
will be
07:17 - cleared from the stack will be 
deallocated
07:20 - and now main will resume and finish so
07:24 - with pointers we should always know
what's going where in the memory
07:27 - okay so let us now modify
07:31 - in this particular code to learn some
more concepts now what I'm going to do
07:35 - in my code is
07:36 - instead of creating a character
array of size 20
07:40 - I'll create a character pointer named
C
07:44 - and equate it against
07:47 - a string lateral in a statement like
this and if you run this program
07:52 - and the output will be the same what
really happens is
07:56 - if you use the string lateral in
 initialization statement of an array
08:01 - something like this
08:02 - and then the string gets stored in this
space that is allocated to the array
08:05 - so in this case it will go into the
stack in this character array of size 20
08:10 - but if you use the string lateral
elsewhere in a statement like this
08:15 - are maybe when we do something like
08:19 - passing a string lateral to a function
08:22 - then in these cases
08:25 - the string get stored as a constant
08:28 - during the compile-time and most
probably it will be stored in the text
08:32 - segment of the application memory
08:34 - and it cannot be modified so if you write
a statement like this let's say you want
08:38 - to
08:39 - change the first character of on this
constant string to
08:43 - A running this program will give
you an error
08:46 - will cause a crash okay coming back to
08:50 - having a character array, now if we have
a character array and we are passing
08:55 - the address of the array to a function
08:58 - that function receive's it in a character
pointer
09:01 - now using this pointer we can modify the
data in this particular array
09:07 - so if I say something like this: we
first to change the first character to
09:12 - A and then we are printing the
characters and then as you can see
09:15 - it is possible to do so now sometimes we
may want a function
09:19 - just to read a string and not write
anything
09:23 - to force this kind of behavior we can
change our argument
09:26 - to const character pointer and now if run this code
this code will give us compilation error
09:32 - we can read whatever
is there in the array
09:35 - that is past but we cannot write to any
of the positions
09:39 - this code will work fine, pointers
09:44 - are really tricky and even the most
experienced programmers
09:47 - write buggy code when they are using
pointers I
09:51 - recommend that you get your hands dirty
by writing some code yourself
09:54 - that's the best way to learn so this is
it for this lesson
09:58 - thanks for watching

Cleaned transcript:

In part one of our lesson on character arrays and pointers we saw how we can store strings in character arrays and we also saw how we can work with character arrays using pointers in some of the basic scenarios whenever we are working with pointers it's really important that we visualize how things are happening in the memory so the first thing that we will do in this lesson is we will simulate the program that we had written in the previous lesson to print the characters of a string and see what goes where in the memory and we will also look into the concept of string constants and constant pointers so this is where we had left in our previous lesson we have written a function print to print the characters in a string in the main method we have a character array of size twenty but we have stored a string of length five in it we have used a string lateral so null termination is implicit we have talked about this earlier so let us step through this code and see how it is working now once again I have drawn this familiar diagram the memory that is allocated for execution of a program is typically divided into these four parts these four sections one part of the memory stores the instructions in the program we call that the code segment or the text segment one section stores the global variables and stack is where all the information regarding function call execution and all the local variables go whenever we are writing a program than ever we are executing a program we should always visualize what variable goes where or what data goes where and what is the scope of that variable our data okay so let us run through this code and see what is happening in the memory when this program will start executing first the main method main function will be invoked whenever a function is called some amount of memory from the stack is allocated for the execution of that function it's called the stack frame of that function so let us say this stack frame from address 100 to 150 is allocated for the main function stack is one contiguous block of memory so let us say in this stack the memory increases from bottom to top all the local variables of a function go into the stack frame of the function so when we declare a character array 20 bytes from the stack frame will be allocated for this particular character array let's say they are allocated from address 100 to 120 each character is stored in one bite so we need 20 bytes for character array of size 20 apart from local variables there maybe some more information in stack frame so that's why we have some more space and now the control of the program goes to this statement print 'c' as soon as we make a call to another function from a function the execution of that particular function is paused at that particular line and the machine goes on to execute the called function the called function is allocated stack frame on top of the calling functions of print will be allocated as stack frame on top of main function whatever function is at the top of the stack in at any point is executing I mean we'll wait for this function to finish let's say this particular stack frame is from 150 to 170 main is paused and print is executing right now, now print will also have a local variable C but this will be a pointer variable a pointer variable takes four byte of memory in a typical architecture so this will be taking four bytes so let's say starting address 154 in this stack frame we have four bytes for this particular character pointer so this C in main is actually not the same C in print, the C in main and C print are different they have different scopes we could have named this particular variable a or PTR or whatever but all that happens when we make this particular call to print and pass this C here is that the address 100 which is the base address of the array is passed to the print function and the print function keeps it stores it in the pointer variable sometimes it may confuse us when we are using the same local variable name in the calling function and the same argument name in the called function but we must always understand that they're different okay to run through this code further I clear some space here now I'll draw this array C outside the stack here we have an array of size 20 but we are only showing the first six positions in the array from address 100 to 105 and that's why it is extending towards the right the sixth charecter is a null character and the first five characters are the characters of word hello and now we have this another guy which is c of print which is a character pointer at address 154 that stores address 100 so it points to the first element of the array now let's come back to our program execution let's say we are here initially I'll mark the statement that is executing by this green arrow, let's name these two guys this guy is C but ths guy is an array local to main and this is also C but it is a character pointer local to print ok so now here what we're saying is while *C is not equal to the null character when we put this * operator in front of a pointer variable we are looking at the value at that particular address so at this stage when C is pointing to the base address *C is H so this condition is not true we will go to this line print F that will simply print *C which is H let's write down the output here so we have printed H so far and then we say c++; if we understand pointer arithmetic from our previous lessons incrementing a pointer by one unit increments the address by size of the data type that the pointer points to C here is a pointer to character data type and character data type is one byte so C+1, C++ is saying C= C+1 so C now becomes 101 so now C points to the second character in the array and once again we come to where we find this condition in the while loop *C is E here it's not null once again we will go inside the loop and print E and we will keep on going like this till the address in this pointer variable reaches 105 now here the value at this particular addresses is null character so the loop will not execute we will come to this statement to print an endofline and the execution of print function will finish so this particular stack frame for print will be cleared from the stack will be deallocated and now main will resume and finish so with pointers we should always know what's going where in the memory okay so let us now modify in this particular code to learn some more concepts now what I'm going to do in my code is instead of creating a character array of size 20 I'll create a character pointer named C and equate it against a string lateral in a statement like this and if you run this program and the output will be the same what really happens is if you use the string lateral in initialization statement of an array something like this and then the string gets stored in this space that is allocated to the array so in this case it will go into the stack in this character array of size 20 but if you use the string lateral elsewhere in a statement like this are maybe when we do something like passing a string lateral to a function then in these cases the string get stored as a constant during the compiletime and most probably it will be stored in the text segment of the application memory and it cannot be modified so if you write a statement like this let's say you want to change the first character of on this constant string to A running this program will give you an error will cause a crash okay coming back to having a character array, now if we have a character array and we are passing the address of the array to a function that function receive's it in a character pointer now using this pointer we can modify the data in this particular array so if I say something like this we first to change the first character to A and then we are printing the characters and then as you can see it is possible to do so now sometimes we may want a function just to read a string and not write anything to force this kind of behavior we can change our argument to const character pointer and now if run this code this code will give us compilation error we can read whatever is there in the array that is past but we cannot write to any of the positions this code will work fine, pointers are really tricky and even the most experienced programmers write buggy code when they are using pointers I recommend that you get your hands dirty by writing some code yourself that's the best way to learn so this is it for this lesson thanks for watching
