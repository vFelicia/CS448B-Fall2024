With timestamps:

00:00 - In this lesson, we will try to solve a
very famous problem in the number theory
00:04 - that forms the basis of some of the most
famous
00:07 - algorithms in cryptography and the
problem is to calculate
00:11 - modular exponentiation. Now in a previous
lesoson,
00:14 - we had seen or devised an algorithm
and efficient algorithm for
00:18 - exponentiation,
00:19 - which was calculating X to the power N
for two variables X and N.
00:25 - Modular exponentiation is the remainder
00:29 - upon dividing X to the power N with
00:32 - another variable another positive number
M. So X,
00:35 - N and M are three positive numbers here and
we want to calculate
00:38 - X to the power N mod M. So let's pick
up some example, let's say is equal to 5
00:45 - and N is equal 2 and we
want to
00:47 - take a modulo by 7
so M is equal to 7.
00:50 - So this will be equal to 25 and we can
also use this particular sign that we use
00:55 - in a programming language for modulo and
it will be equal to
01:00 - 4, the remainder upon dividing 25 by
seven
01:04 - is 4. Similarly if we want to calculate
01:07 - 5 to power 3 modulo 7, it will be equal
to 125 modulo 7 which will be
01:12 - equal to 6. So one simplest approach is that
we can first
01:16 - calculate X to the power N and then take
a mod
01:19 - by M but there is a practical problem here.
01:22 - Even for small values of X
01:25 - and N, X to the power N can be
01:28 - really really large and it may not fit
in
01:32 - a data type of the language. For example
integer is often
01:37 - stored in 32 bits and
01:41 - one bit is for the presenting the sign
01:44 - so the value ranges from -2 to the power 31
to 2 to the power 31.
01:49 - So if you want to calculate if we want
to calculate
01:53 - 2 to the power 100 say then it will not fit
in an
01:56 - integer variable. We can have a variable
like long or double
02:00 - that stores higher values but still they
will not be good enough to store
02:05 - X to power N
02:06 - even for some moderately high values of
X and N.
02:10 - Now we want to calculate X to the power N
mod M.
02:15 - Let's see what we can do here.
Fortunately,
02:20 - all these laws of associativity, commutativity
02:24 - and distributivity
02:25 - that apply to normal arithmetic, also apply
to modular arithmetic.
02:29 - So for example A into B modulo M
02:33 - is equal to A modulo M
02:37 - into B modulo M and
02:41 - an overall modulo M for this
particular expression.
02:45 - So for example if we want to
calculate say
02:49 - 5 into 7 modulo 3 then
02:54 - it is simply simply equal to 35
modulo 3,
02:57 - So upon dividing 35 modulo 3
03:00 - the remainder would be 2. Now let's
03:04 - try to solve this using the expression
in the right hand side,
03:08 - so this will be equal to 5 modulo 3
03:12 - into 7 modulo 3 and
03:16 - and overall modulo 3.
03:20 - So 5 modulo 3 is 2 and 7 modulo 3 is
03:23 - 4 so this will be 4 into 2 modulo 3
03:27 - which is 8 modulo 3 and again this
is equal to
03:31 - 2, and you can pick up some other values
of
03:36 - A and B validate that this is true. Now
here, We can write X to the power N
03:41 - as X into X to power N - 1,
03:46 - so this a overall expression would be X
into X to the power N - 1 modulo M.
03:51 - So we can also write this as
03:55 - X modulo M, so here A is X and B
03:58 - is X to power N - 1 into X to the power N
- 1 modulo M
04:03 - and an overall modulo M and I'll
clear some of this calculation
04:09 - in the left. So again if
04:13 - N is even then we can write X to the power N
as X to the power N by 2 into
04:18 - X to the power N by 2. So this
expression can also reduce to
04:22 - X to the power N by 2 modulo M into
X to the power N by 2 modulo M
04:26 - and an overall modulo M.
04:30 - So we have a recurrence relation here
once again,
04:34 - so I can write, i'll write this
04:37 - in a little neat manner, X to the power N
modulo M
04:42 - is equal X to the power N by 2 modulo M 
into X to the power N by 2 modulo M
04:46 - overall modulo M if N is
even.
04:50 - it is equal to X modulo M into
X to the power N - 1
04:55 - overall modulo M if N is odd
04:58 - and it is simply equal to 1
05:01 - for N is equal to 0.
05:05 - Now this reccurence relation is very similar
to what we had
05:08 - used to calculate X to the power N
in previous lesson
05:12 - so N is equal to zero is our base-case
05:15 - and for N even and N odd 
we have two different reccurence relations.
05:20 - Now let's write a program function to
05:24 - implement this recursion. Let's say
we write a method
05:27 - mod takes its argument
05:31 - X, N and M
05:34 - and it goes like this. If N is zero
05:38 - simply return one else
05:41 - if N is even which is the same as
saying N modulo 2 is zero
05:45 - then first calculate  X to the power N by 2
modulo M
05:51 - so we make a recursive call to calculate X
to power N by 2
05:54 - modulo M and then we return
05:57 - Y into Y modulo M. Once again
instead of writing these two
06:02 - expressions, we could have written
06:04 - mod of X to the power N by 2
06:07 - sorry, X to the power N by 2 mod M into 
X to the power N by 2 mod M overall mod M
06:11 - but in this case, we would
have unnecessarily
06:15 - make two recursive calls us
calculate be would have unnecessarily
06:18 - calculate
06:19 - same value twice which is the bad.
06:22 - So we calculate X to the power N by 2
mod M once
06:26 - and store it in a variable and then
return
06:29 - Y into Y modulo M, where Y stores this value.
06:33 - Now if N is
06:36 - odd then in that case we simply
return
06:41 - X modulo M into
06:44 - X to power N - 1 modulo M which is
calculated by
06:48 - this recursive call and an overall
modulo M.
06:53 - So this gives us recursive algorithm
to calculate
06:58 - X to the power N modulo M and
this algorithm
07:02 - to calculate modular exponentiation is
very similar to
07:06 - the previous algorithm that we had
shown to calculate X to the power
07:10 - N in our previous lesson. The time
complexity for this algorithm is
07:15 - order of log n or O(logn)
07:18 - We will try to deduce that how this time
complexity is 
07:23 - is order of log n in another lesson.
07:28 - But nevertheless, log n time complexity is the best time
complexity to have.
07:31 - So, thanks for watching.

Cleaned transcript:

In this lesson, we will try to solve a very famous problem in the number theory that forms the basis of some of the most famous algorithms in cryptography and the problem is to calculate modular exponentiation. Now in a previous lesoson, we had seen or devised an algorithm and efficient algorithm for exponentiation, which was calculating X to the power N for two variables X and N. Modular exponentiation is the remainder upon dividing X to the power N with another variable another positive number M. So X, N and M are three positive numbers here and we want to calculate X to the power N mod M. So let's pick up some example, let's say is equal to 5 and N is equal 2 and we want to take a modulo by 7 so M is equal to 7. So this will be equal to 25 and we can also use this particular sign that we use in a programming language for modulo and it will be equal to 4, the remainder upon dividing 25 by seven is 4. Similarly if we want to calculate 5 to power 3 modulo 7, it will be equal to 125 modulo 7 which will be equal to 6. So one simplest approach is that we can first calculate X to the power N and then take a mod by M but there is a practical problem here. Even for small values of X and N, X to the power N can be really really large and it may not fit in a data type of the language. For example integer is often stored in 32 bits and one bit is for the presenting the sign so the value ranges from 2 to the power 31 to 2 to the power 31. So if you want to calculate if we want to calculate 2 to the power 100 say then it will not fit in an integer variable. We can have a variable like long or double that stores higher values but still they will not be good enough to store X to power N even for some moderately high values of X and N. Now we want to calculate X to the power N mod M. Let's see what we can do here. Fortunately, all these laws of associativity, commutativity and distributivity that apply to normal arithmetic, also apply to modular arithmetic. So for example A into B modulo M is equal to A modulo M into B modulo M and an overall modulo M for this particular expression. So for example if we want to calculate say 5 into 7 modulo 3 then it is simply simply equal to 35 modulo 3, So upon dividing 35 modulo 3 the remainder would be 2. Now let's try to solve this using the expression in the right hand side, so this will be equal to 5 modulo 3 into 7 modulo 3 and and overall modulo 3. So 5 modulo 3 is 2 and 7 modulo 3 is 4 so this will be 4 into 2 modulo 3 which is 8 modulo 3 and again this is equal to 2, and you can pick up some other values of A and B validate that this is true. Now here, We can write X to the power N as X into X to power N 1, so this a overall expression would be X into X to the power N 1 modulo M. So we can also write this as X modulo M, so here A is X and B is X to power N 1 into X to the power N 1 modulo M and an overall modulo M and I'll clear some of this calculation in the left. So again if N is even then we can write X to the power N as X to the power N by 2 into X to the power N by 2. So this expression can also reduce to X to the power N by 2 modulo M into X to the power N by 2 modulo M and an overall modulo M. So we have a recurrence relation here once again, so I can write, i'll write this in a little neat manner, X to the power N modulo M is equal X to the power N by 2 modulo M into X to the power N by 2 modulo M overall modulo M if N is even. it is equal to X modulo M into X to the power N 1 overall modulo M if N is odd and it is simply equal to 1 for N is equal to 0. Now this reccurence relation is very similar to what we had used to calculate X to the power N in previous lesson so N is equal to zero is our basecase and for N even and N odd we have two different reccurence relations. Now let's write a program function to implement this recursion. Let's say we write a method mod takes its argument X, N and M and it goes like this. If N is zero simply return one else if N is even which is the same as saying N modulo 2 is zero then first calculate X to the power N by 2 modulo M so we make a recursive call to calculate X to power N by 2 modulo M and then we return Y into Y modulo M. Once again instead of writing these two expressions, we could have written mod of X to the power N by 2 sorry, X to the power N by 2 mod M into X to the power N by 2 mod M overall mod M but in this case, we would have unnecessarily make two recursive calls us calculate be would have unnecessarily calculate same value twice which is the bad. So we calculate X to the power N by 2 mod M once and store it in a variable and then return Y into Y modulo M, where Y stores this value. Now if N is odd then in that case we simply return X modulo M into X to power N 1 modulo M which is calculated by this recursive call and an overall modulo M. So this gives us recursive algorithm to calculate X to the power N modulo M and this algorithm to calculate modular exponentiation is very similar to the previous algorithm that we had shown to calculate X to the power N in our previous lesson. The time complexity for this algorithm is order of log n or O(logn) We will try to deduce that how this time complexity is is order of log n in another lesson. But nevertheless, log n time complexity is the best time complexity to have. So, thanks for watching.
