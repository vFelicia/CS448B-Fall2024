With timestamps:

00:20 - hello I am here live good morning um
00:24 - there's some music playing in the
00:25 - background I have a microphone hooked up
00:27 - please let me know in the chat
00:31 - if you can hear me okay if the balance
00:34 - between the music and the audio is okay
00:37 - um had I had a lot of technical
00:38 - difficulties this morning getting set up
00:40 - but I am here live now and excited to
00:42 - see all of you although I can't see any
00:44 - of you but I can see a bunch of names
00:47 - here in the uh
00:49 - chat um so couple things to mention uh
00:53 - before I get into sort of introductions
00:55 - and talk about what it is I'm going to
00:56 - do in today's live stream number one is
00:59 - a a light burnt out so I normally have
01:02 - these two bright lights that are beaming
01:05 - down on me so that you can in the
01:06 - audience see me but one of them for some
01:08 - reason is not working I think you can
01:10 - see me probably okay and if I go to this
01:13 - other camera over here I hope that you
01:15 - can see me and still hear me over here
01:18 - but if um if things don't look as
01:20 - perfect today it's one of the lights
01:22 - it's missing so I'll have to investigate
01:24 - that
01:26 - um uh and I've uh H last time I did a
01:30 - live stream my sort of test fall live
01:32 - stream um I had a bunch of technical
01:34 - difficulties where the stream would
01:36 - freeze and I had to restart the computer
01:39 - and I did some things upgraded some
01:41 - stuff I hope that that's not going to be
01:43 - a problem but obviously we'll keep an
01:45 - eye on that together so welcome this is
01:48 - uh cing rainbow a live episode number
01:53 - something but in a way this is the first
01:55 - episode for fall 2006 and I am start
01:59 - 2006 6 oh my god oh boy 2006 was a nice
02:03 - year I remember that uh it's 2016 in
02:06 - case you were wondering uh I I haven't
02:08 - I'm I'm I'm a little out of sorts uh as
02:10 - you can tell as I always am I'm rushing
02:13 - down here to get to the school for
02:14 - poetic computation which is uh uh artist
02:18 - Collective and School here in the West
02:19 - Village of New York City where I have a
02:21 - recording a broadcasting
02:23 - studio um and uh this being uh episode
02:28 - one
02:31 - of this fall season so what I'm going to
02:33 - do this fall and um is I am going to use
02:38 - this coding rainbow live stream to
02:41 - cover a course uh that I am teaching oh
02:46 - I am just so not prepared I'm going to
02:49 - go here so if you go to uh shiffman
02:52 - domnet A2Z you will find a
02:57 - website uh with uh a page page um which
03:00 - documents the material that I'm going to
03:02 - be covering this fall uh and here you
03:04 - can see the first uh there are some
03:06 - notes Here for this first SE session
03:08 - entitled introduction p5js JavaScript
03:11 - and strings so um what this uh so
03:15 - what I got a bunch of things to get out
03:17 - of the way here so there's so much to do
03:19 - to introduce but I just want to I just
03:21 - want to get I just want to get into the
03:24 - material and uh all that sort of stuff I
03:26 - have a new sound
03:28 - system which none of you are probably
03:30 - interested in but I could pretend that
03:35 - I'm except that I'm I'm not actually
03:37 - swearing all the time uh and I can
03:40 - pretend that I um that I did something
03:42 - really really
03:47 - exciting all right this is kind of
03:49 - useless um anyway so my name is Dan
03:52 - schiffman this is a live stream that I
03:54 - do once per week it looks like for the
03:56 - next few weeks the time and place will
03:59 - be Wednesday morning around 10: or 10:30
04:01 - a.m. eastern time the time that it is
04:03 - right now um uh at some point in October
04:07 - I'm probably going to move to a Tuesday
04:09 - afternoon time um but I'll keep you
04:12 - posted about that YouTube has this brand
04:14 - new feature which allows me to set the
04:15 - time and I know that a lot of you in the
04:17 - chat were complaining because I set the
04:19 - time for 10: a.m. and then I got here
04:20 - and I wasn't ready and then I set it for
04:21 - 10:15 and then I think I set it for like
04:24 - 1020 so I will try not to do that too
04:26 - much in the future but
04:28 - um but um yeah so uh Chris in the chat
04:32 - is asking for the this do song I didn't
04:33 - get it loaded onto this soundboard thing
04:36 - that I have so I will I will have to do
04:37 - that at some point maybe I can take a
04:38 - short break and and load it on there so
04:40 - I will get the this do song back um okay
04:44 - so um I teach full-time at a program
04:47 - called ITP it. n.edu I had the first
04:50 - session of a class called programming
04:52 - from A to Z
04:53 - yesterday um it went pretty well went
04:58 - better than this is going so far far um
05:01 - and uh what I'm going to do each week is
05:03 - teach my physical in-person class and
05:05 - then do the same class here in a live
05:07 - stream and so today will really be
05:09 - introductions and
05:12 - uh I think I posted to uh Twitter if I
05:16 - go to
05:17 - my
05:19 - Twitter uh I've retweeted a bunch of
05:22 - things yada yada
05:24 - yada
05:25 - uh isn't there an image with this one no
05:30 - wait
05:31 - where where did I post that hold
05:35 - on ah I can't find it uh I have a um
05:40 - hold on I have an idea everyone bear
05:42 - with me for a
05:44 - second oh I think I posted it to the
05:46 - slack channel so many things uh I am
05:49 - pulling up an image which has uh my list
05:51 - of notes which I want to make sure I
05:54 - have and let's see if
05:57 - uh magical air drop will work oh I don't
06:01 - have Bluetooth probably on in this
06:02 - computer I'm just going to Tweet
06:05 - it uh that'll work Live
06:10 - Now
06:12 - YouTube dot this is great this is
06:15 - riveting for you slash
06:18 - shiffman slash live okay I'm tweeting
06:23 - that
06:24 - image so
06:27 - um now I can pull it up here
06:33 - and possibly download it let's see if we
06:34 - find it there we go okay so uh let me
06:38 - save this
06:39 - image uh overview and just put it on my
06:47 - desktop
06:51 - uh and I can go away from
06:56 - here oh
06:58 - seriously
07:04 - okay so this is a little bit of a
07:05 - reference here for me so this is kind of
07:08 - my this is my plan for today this is on
07:10 - the Whiteboard from my physical class uh
07:14 - uh yesterday and so a couple things that
07:16 - I'm going to do one is I want to talk
07:18 - about the overall goals and um of the
07:21 - course that I'm going to teach each week
07:22 - this fall I want to talk a little bit
07:24 - about uh uh some of that will involve
07:27 - client side versus service side I want
07:28 - to talk about whether I'm using
07:29 - libraries or not using libraries um uh
07:33 - some of the topics that I want to cover
07:35 - specifically related to JavaScript um
07:37 - and then I want to make a few video
07:38 - tutorials about uh Dom
07:41 - manipulation mostly I'm going to point
07:43 - you to some existing video tutorials and
07:45 - then when one doesn't exist I will make
07:46 - a new one uh I am going to I want to
07:49 - talk about the basics of how strings
07:51 - work in JavaScript um and then I want to
07:54 - look at text input and the coding
07:56 - challenge for today which I will do a a
07:59 - little later before I'm going to be here
08:00 - for my plan is to be here for about two
08:02 - and a half or three hours if I can
08:05 - survive is to
08:09 - um uh is to create something called a
08:11 - dastic so I'm going to
08:15 - uh I'm going to introduce you to someone
08:18 - if you're not familiar with uh Jackson
08:20 - mllo who is an American poet and
08:23 - performance artist uh born in uh 1922
08:26 - I'm just reading the Wikipedia page for
08:27 - you um Ma low pioneered a lot of
08:31 - computational methods in poetry without
08:33 - the use of a computer and one of these
08:36 - methods is called was it was known as a
08:38 - dastic and what I want to look at is
08:41 - Jackson mcl's dastic system for
08:43 - generating poetry out of a found text uh
08:46 - which he did manually and I'm going to
08:47 - create a JavaScript web page which will
08:50 - generate the Poetry for you so uh this
08:52 - is kind of like I'm taking a left turn
08:55 - or a right turn or some sort of turn in
08:57 - that this semester a lot of what I'm
08:58 - going to be be talking about is how to
09:00 - work with text text analysis uh text
09:03 - generation poetry generation sentiment
09:06 - analysis anything that has to do with
09:07 - reading text as input to a program and
09:10 - generating text as output to a program
09:13 - so
09:15 - um so and uh something that so so okay
09:18 - so this is the other thing that I'm
09:20 - trying to figure out I think that I'm
09:21 - going to have a new playlist in my
09:23 - YouTube
09:25 - channel which will be the which is going
09:28 - to be known from here on out as the
09:31 - programming from A to Z playlist and I
09:33 - think what I'm going to do right now is
09:35 - start my first video tutorial of the
09:39 - day uh which uh what I'll do is use this
09:42 - as a like 10minute introduction to uh
09:45 - where the the origins of the ideas for
09:47 - this course came from and what the goals
09:50 - of the course are so this is going to be
09:52 - something that people will later watch
09:55 - maybe if they choose to tune into to my
09:56 - channel um as an INT introductory video
09:59 - to the course um and then I in that
10:02 - video I'll probably mention the um uh
10:06 - patreon thing that I'm doing where you
10:07 - can uh if you want to turn in
10:09 - assignments and have discussion there's
10:10 - a you can subscribe for a slack Channel
10:13 - okay uh I don't want to over promote
10:15 - that sort of thing um ozal 86 in the
10:18 - chat asks uh why only
10:20 - 720p um I was just sort of worried about
10:23 - bandwidth and latency so I'm live
10:25 - streaming at 720p it seemed like the
10:27 - quality is good enough um it's a pretty
10:29 - good internet connection here it's a
10:31 - Verizon FiOS connection It's seems to be
10:33 - working pretty well but if um people
10:35 - want to I could do a test at 1080p if
10:36 - that makes a difference uh yes so uh uh
10:39 - t00 bed uh mentions just like Burrow's
10:43 - cups so uh William Burrow's cutup method
10:46 - is another text mashup method that I
10:48 - want to reference also something known
10:49 - as
10:50 - eraser if you change your mind I'm the
10:53 - first in line if I sing the song is that
10:55 - like a copyright violation um yeah so uh
10:58 - no asked oh you're actually reading the
11:00 - chat so I am reading the chat but you I
11:02 - can't really guarantee I'm not following
11:04 - it and I I wouldn't um you know ask
11:07 - questions in there have a discussion
11:08 - I'll kind of peek at it from time to
11:09 - time and when I'm sort of in video
11:12 - tutorial recording mode um that's when I
11:15 - I I generally don't look at the chat too
11:16 - much and and everyone's going to tell me
11:17 - that the camera's shut off I know that
11:19 - it's shut off this happens every half an
11:20 - an hour half an hour it's a problem that
11:22 - I have not been able to fix even though
11:24 - I've been doing this for over a year uh
11:27 - if I could get if I if could you know my
11:29 - crowdfunding and YouTube advertising
11:30 - takes off I'll buy some new cameras that
11:32 - won't have this problem
11:35 - um um and uh what was I going to say ah
11:39 - so in case you're not aware if this is
11:40 - your first time joining in I I do
11:42 - something that's a little bit
11:43 - unfortunate and causes some confusion
11:46 - which is that I do this live stream and
11:48 - the live stream exists as an archive but
11:51 - I also then reupload separate edited
11:54 - chunks of videos from this live stream
11:56 - that um at math blanks on Twitter I
11:59 - think I got that right somebody the chat
12:01 - post mata's Twitter handle if if if uh
12:04 - um helps me with editing so sometimes
12:06 - you'll see a new video gets posted which
12:08 - is just what you've seen before but this
12:10 - is for people who find it later and just
12:12 - want to like watch the important chunks
12:14 - in a playlist and so uh I don't I I
12:17 - can't I don't have a better way of doing
12:18 - it as of yet but I'm open to suggestions
12:22 - okay so um let's see what else do I have
12:25 - here so I I think this is going to be
12:28 - good
12:31 - I'm ready I don't have actually you know
12:33 - I did a terrible job I made this
12:34 - soundboard and I didn't put any of my
12:35 - music on
12:37 - it I have this which is the background
12:40 - instrumental
12:41 - music getting warmed up here for um the
12:44 - coding Rainbow theme song which will be
12:46 - possibly probably coming out this week I
12:49 - will release it on Soundcloud there will
12:51 - also be a little music video trailer
12:53 - promotional video for my channel uh a
12:56 - lot of people have helped me with that
12:57 - and the credits of that will be with the
12:59 - video release I also have a lot of green
13:01 - screen footage of myself that I will
13:02 - release that was used for the video that
13:04 - you can all play with if you
13:10 - want last time I didn't do any dancing
13:12 - because somebody complained about my
13:13 - dancing it made me feel very nurotic and
13:15 - then I got over it after four or five
13:17 - days so it's happening again okay
13:24 - um oh that was ABA no eraser did not
13:28 - cover that song I just completely sang
13:30 - the wrong
13:32 - song what's a well-known eraser song
13:35 - that's really hilarious that I uh eraser
13:42 - Greatest
13:44 - Hits yes yes yes yes a little respect oh
13:50 - L more that's
13:54 - good I love I actually went to an eraser
13:57 - concert if you can believe that I think
13:58 - it was at the The Beacon Theater in New
13:59 - York City probably like 20 years ago
14:02 - okay I'm off topic way off topic okay um
14:06 - let me get to the syllabus
14:09 - here
14:11 - um and I'm going to do my introduction
14:15 - to the class oh they actually did cover
14:18 - it though okay uh okay okay they did
14:21 - they did okay as long as I'm getting my
14:24 - 80s pop music references correct is that
14:27 - even the 80s then then everything's
14:29 - going to be
14:32 - okay by the way this is why I thought my
14:34 - sound effect for when I'm
14:40 - debugging okay never mind you guys don't
14:42 - care okay um all right so here we go I'm
14:45 - going to do a quick uh actually let me
14:48 - um let me oh how's the focus on the
14:50 - Whiteboard it actually looks like it
14:52 - might be a little bit off and I need to
14:54 - erase it
14:57 - eraser see can I play this is my this is
14:59 - what I'm always wondering sometimes I
15:01 - have a desire to play other
15:04 - music and of course now you can't see if
15:06 - the focus is any good if I'm erasing
15:17 - it
15:22 - uh uh let's see
15:26 - uh let me just see if I can fix that a
15:29 - little
15:31 - bit oh this is not going to
15:34 - work maybe I'm going to just check the
15:36 - chat maybe you guys say it's
15:38 - okay focus seems fine okay so I'll just
15:41 - leave it uh yeah ALG c19 asked are you
15:45 - going to cover the rainbow topics in
15:47 - future streams or just the classes so um
15:50 - this is a great question I have this
15:51 - GitHub repository with a ton of
15:52 - requested topics I didn't finish my
15:54 - traveling salesperson genetic algorithm
15:57 - there's more to do with the agario
15:58 - coding challenge I really want to get to
16:00 - more connect
16:01 - videos um you know one thing is that
16:05 - it's uh um so yes um I do intend to
16:09 - revisit those topics throughout this
16:11 - fall for the first few weeks I'm going
16:13 - to be focusing on this course the course
16:15 - has uh uh various weeks where uh there
16:19 - are pres student presentations and final
16:21 - project stuff which is happening in the
16:23 - physical class which means I kind of
16:25 - have a week off from some of the a toz
16:27 - content in which case I'll return to
16:29 - some of those topics and honestly um you
16:31 - know I would love to I enjoy this so
16:34 - much and I would love to have more time
16:36 - to do it but it it takes a lot of time
16:38 - and it uh takes a lot of energy and I
16:40 - have this other it doesn't make very
16:42 - much money and I uh also have this
16:44 - full-time job at NYU so uh at some point
16:47 - as I grow this thing that I'm doing and
16:49 - find other ways of of getting more time
16:52 - or resources and other guests to be
16:53 - involved I hope to be able to have more
16:55 - and more time for kind of have a course
16:57 - going and other coding challenges going
16:59 - or maybe two courses going at the same
17:01 - time twice a week live by courses I mean
17:03 - twice a week live streams so oh I'm
17:05 - totally in the wrong camera I was just
17:07 - talking and talking and
17:09 - talking oh I really have a I used to be
17:13 - so good at switching the camera I'm
17:14 - going to build I need to build a sensor
17:16 - that just knows where I'm standing sorry
17:18 - sorry
17:21 - everybody I mean I the thing is I often
17:24 - have also thought of of building my own
17:26 - streaming system not relying on you
17:28 - YouTube in which case you could just
17:29 - pick which camera you want to see or
17:31 - stream both of them
17:33 - but someday okay
17:37 - um
17:42 - so here we go um so let
17:53 - me okay let me see here so I want to if
17:58 - I'm going to make a video now to
18:00 - introduce the
18:02 - course and I just want to get a couple
18:08 - links going which I think might be
18:11 - [Music]
18:13 - useful
18:17 - um let just see here this is fine I'll
18:21 - leave this open this
18:23 - open
18:25 - uh I want to reference
18:31 - um and
18:36 - uh I'm just pulling up some links of
18:39 - people that I want to make sure I
18:40 - reference who have really been
18:42 - inspirational uh in terms of coming up
18:45 - with the topics for this
18:49 - course
18:56 - uh and
19:08 - sorry everybody I'm almost
19:11 - there uh I think this will do the trick
19:14 - for me okay
19:22 - uh okay uh all right how are we doing on
19:27 - time so far this stream hasn't broken oh
19:29 - I can't see the time anywhere that's
19:32 - fine oh 10:40 a.m. that's where I can
19:34 - see the time okay the good news is I'm
19:36 - not rushing off to go anywhere today I
19:38 - going have plenty of other stuff to
19:40 - do uh but um last time I did a live
19:43 - stream I felt a lot of pressure um to
19:45 - get to everything and we'll see how it
19:47 - go I mean I I I there's a ceiling on how
19:50 - much energy I have although I have had
19:52 - this idea of doing some kind of like I
19:53 - was thinking of doing a processing
19:55 - Foundation fundraiser which would be
19:57 - like a ton that just have like a live
19:59 - stream going for 24 hours probably not
20:01 - 24 hours maybe just like 12 hours people
20:03 - coming in and out and like a phone bank
20:05 - where you could call in donate your
20:07 - money um
20:13 - okay here we go I'm really getting
20:15 - started
20:17 - now um if I need to oh this ah sorry I
20:21 - just want to look for
20:23 - my is this really my whiteboard oh wait
20:25 - no I have the other whiteboard markers
20:27 - over here
20:28 - I bought some new ones which I'm hoping
20:31 - will work well let me try this
20:34 - one I have a big problem getting started
20:37 - I have to do a better job at this okay
20:40 - here we
20:50 - go no that's not the women I like this
20:53 - other
20:57 - uh
21:01 - hello oh hold on I'm GNA use this I to
21:04 - try
21:09 - again hello welcome to a first video of
21:13 - a new playlist uh called programming
21:15 - from A to Z and this playlist is going
21:17 - to be will be as I make it a lot of
21:20 - videos that are going to follow this uh
21:23 - ah it's a
21:24 - syllabus um uh course that I'm teaching
21:27 - at uh program called ITP at Tish School
21:29 - of the Arts New York University uh
21:31 - called programming from A to Z and in
21:33 - this video uh uh if you're really just
21:35 - interested in the technical content you
21:37 - can just skip ahead and stop watching
21:38 - this video but in this video I want to
21:40 - just kind of talk about uh where the
21:42 - ideas for this course came from some of
21:43 - my inspiration for putting the material
21:45 - together for this course and what my
21:47 - goals for it are so what and kind of
21:50 - like who what do you need to have in
21:52 - advance before you start watching this
21:53 - sequence and and I will mention that a
21:55 - lot of the videos that I make I intend
21:57 - for them to be kind of Standalone videos
21:59 - that could be mod you know put placed
22:01 - that you could kind of come to on them
22:03 - their own but I'm going to sequence them
22:05 - in a way that I'll give you a little bit
22:06 - of a narrative over the course of this
22:08 - fall it is September something uh
22:11 - 2016 uh that's when this video is being
22:13 - recorded but maybe you are an alien
22:16 - robot of the future watching it and
22:17 - wondering about this strange Earth
22:19 - species um on the internet if the
22:22 - internet still exists anyway okay I um
22:25 - so okay so let me talk a little bit
22:27 - about where this theide where this
22:28 - course came from so I think this was
22:30 - probably at least 10 years ago if not
22:31 - more I was at the uh University of
22:34 - Pennsylvania sitting in on a poetry
22:36 - class you might wonder why was I sitting
22:37 - in on a poetry class that's a story for
22:39 - another day but um someone named Nick
22:42 - monford uh was giving a presentation uh
22:45 - Nick monford is a poet and artist and
22:48 - Professor uh um author uh who has a
22:52 - recent book out actually called
22:54 - exploratory programming I don't see it
22:57 - on his website I have It's a Wonderful
22:58 - book that I've been actually reading as
23:00 - a resource for this course as well and
23:03 - um Nick was giving a presentation to
23:05 - this poetry class about uh computational
23:09 - techniques in a in writing and I mean it
23:12 - was more sophisticated and interesting
23:15 - than that but I'll Loosely say that it
23:16 - was so it was for an audience of people
23:18 - who not necessarily familiar with
23:20 - programming and algorithms uh but our
23:22 - poets and writers and looking at
23:24 - historical examples and new techniques
23:26 - in writing using computational methods
23:28 - and at the time I was kind of a recent
23:30 - ITP graduate I think or current ITP
23:32 - student I don't remember uh and I
23:35 - thought huh this is interesting so much
23:37 - of my time this was early in the days of
23:39 - processing uh so much of my time is
23:41 - spent thinking about programming for
23:43 - motion and animation and I hadn't really
23:45 - considered this idea of programming for
23:49 - text reading a program that reads text
23:51 - in a program that generates text out and
23:54 - so at the time I actually uh decided to
23:56 - work on some materials for a course
23:59 - called programming from A to Z and uh
24:03 - strangely enough um I taught this course
24:06 - in Java which was in many ways a kind of
24:08 - horrifically terrible idea but Java was
24:11 - a programming language that I was
24:12 - learning and familiar with at the time
24:14 - it also is the was is the basis of the
24:17 - uh creative coding environment
24:18 - processing and so I was aligning some
24:20 - stuff between those two environments um
24:22 - and so I taught this course uh and I
24:24 - believe this was like 2006 or s or
24:26 - something like that I could look it up
24:27 - you someone on resourceful on the
24:29 - internet could find the old syllabus for
24:30 - it probably um and so um a lot of the
24:35 - ideas for this course came out of this
24:36 - presentation that I saw from Nick
24:38 - monford now interestingly enough at the
24:40 - time uh Allison Parish was a student ITP
24:44 - I believe she was actually a student in
24:45 - this class uh and when she graduated
24:48 - from ITP um uh I talked with her I don't
24:52 - remember exactly how this about starting
24:54 - a new class at ITP called re and and
24:56 - which she came up with called reading
24:58 - and writing electronic text so Allison
25:00 - parish is a huge inspiration for this
25:02 - course as well if you're not familiar
25:04 - with her work uh with generative text
25:07 - and performance and Twitter Bots and a
25:09 - lot of things you should be familiar
25:11 - with and so Allison teaches a course
25:12 - taught with python called reading and
25:14 - writing electronic text a lot of the
25:16 - materials can be found on her website so
25:19 - Allison really took a lot of the ideas
25:20 - from programming from A to Z and made a
25:23 - much better and more interesting uh
25:25 - course using a much more uh appropriate
25:28 - programming language and environment
25:29 - python to working with text the focus of
25:32 - her course however is is really not
25:35 - about I I would say I mean I I'm I could
25:38 - be wrong about this but just to make the
25:39 - argument for argument sake about uh
25:42 - really focusing on poetry generative
25:45 - text generative poetry about the sort of
25:47 - core out text in text output not
25:50 - necessarily about interactive systems as
25:52 - related to text not about server side
25:54 - programming client side programming
25:56 - things that happen in the browser so
25:58 - what I decided to do um was uh recently
26:03 - after she had started this course at ITP
26:05 - was to revive programming from A to Z
26:08 - and so now the course is once again back
26:11 - and it's all about programming with text
26:15 - uh text in text out but with I would say
26:18 - an appropriate language meaning
26:19 - JavaScript sure a lot of um a lot of uh
26:23 - Innovative and new work with data
26:26 - analysis and text is happening in Python
26:28 - and there are tons of natural language
26:30 - processing libraries and data libraries
26:31 - for processing for python but if you
26:34 - want to make things happen in the web
26:35 - browser where users can enter text
26:38 - receive text back participate in an
26:40 - interactive system uh JavaScript is a
26:43 - language that is useful to make all this
26:45 - stuff happen in the web browser so um so
26:48 - this is really where the ideas for the
26:50 - course uh came from now I am going to
26:54 - just briefly now so so that's kind of a
26:56 - bit of much more long-winded than I had
26:58 - hoped but a bit about where some of the
27:00 - ideas for the course came from now uh I
27:02 - want to talk the next thing I want to
27:03 - talk about is my goals for the course
27:05 - and just so I'm not uh so I'm standing
27:07 - somewhere different with a little visual
27:08 - variety here I have a couple fundamental
27:11 - goals one
27:13 - is
27:15 - uh programming and
27:19 - algorithms and particular programming
27:21 - I'm talking about uh JavaScript here so
27:24 - if you are a beginner JavaScript
27:27 - programmer if you maybe just took a
27:28 - single course in p5js you know a little
27:31 - bit about JavaScript this is a course
27:33 - where you can improve and expand your
27:36 - knowledge I want to talk about things
27:38 - like what's this prototype thing what's
27:40 - the this keyword what's a closure what's
27:43 - an anonymous function all of these kind
27:45 - of aspects to JavaScript programming
27:47 - that you might not find in an
27:49 - introductory creative coding course so I
27:51 - want part of the course to be able to
27:53 - get augment programming skills but I
27:55 - want that thing not just to be for for
27:57 - the sake of you know programming itself
27:59 - but to have a kind of conceptual basis a
28:01 - creative output for you and this is the
28:04 - other aspect of the course so I want you
28:07 - to think you know
28:09 - creative new ways to think
28:15 - about computational am I really writing
28:17 - this down I am really writing this down
28:19 - uh out uh computational
28:22 - output and specifically text based
28:25 - output oh and input
28:28 - right so maybe you've taken a computer
28:30 - science course or some other JavaScript
28:34 - course and the focus is on web
28:35 - development for professional uh work uh
28:38 - for getting a job at a startup or maybe
28:41 - the course is about algorithms so you
28:42 - can figure out the absolute fastest way
28:44 - to sort a list of numbers these are not
28:47 - you know there there are aspects to that
28:49 - those ideas that might be in a course
28:51 - like this but my goal is really for you
28:53 - to discover new and creative ideas and a
28:56 - gener creative projects playful useless
29:00 - experiments from this course because I
29:02 - believe I think I I know that that um
29:05 - you know number one uh making art and
29:08 - playful experiments is an enjoyable way
29:10 - of interfacing with the world and can
29:12 - bring meaning to people's lives but also
29:14 - I think uh practical tools and new
29:17 - discoveries come out of useless uh
29:20 - impractical Explorations so that's kind
29:22 - of a goal for this course to augment
29:25 - skills and uh uh and and and kind of
29:28 - inspire your creativity okay so back to
29:31 - over here I want to briefly run you over
29:32 - what the topics will be as I go over
29:34 - them from week to week
29:37 - um uh uh this week I want I'm just going
29:40 - to kind of introduce ideas for the
29:42 - course uh I am um asking the students of
29:45 - the course to uh use uh GitHub Pages as
29:49 - a way of publishing their work although
29:51 - it's certainly not required I want to
29:52 - look at Dom manipulation in p5js and
29:55 - kind of compare that to other Dom
29:57 - manipulation Frameworks and libraries
29:58 - you might think of I want to do a
30:00 - tutorial about just the string object in
30:02 - JavaScript and then I want to look at
30:04 - how you get text input from a user in
30:06 - the browser via a text box a uh you know
30:10 - uploading a file and I'm going to do a
30:12 - couple coding challenges around making a
30:14 - web page that generates uh kind of found
30:16 - random poetry and I'll talk about an
30:18 - assignment for you guys to do that's
30:19 - what's going to happen today uh regular
30:21 - Expressions I'm so excited this is like
30:23 - my favorite topic ever because I'm like
30:25 - a complete loser not if you love regular
30:28 - Expressions no I am a loser you watching
30:30 - this are clearly not one loser is such a
30:32 - terrible word that I sound like I I hate
30:34 - that word nobody
30:37 - anyway edit this part
30:39 - out where's my
30:42 - uh okay um but uh uh R Expressions is a
30:46 - topic that I love it's an amazing uh
30:49 - uh uh tool puzzle exciting crazy
30:53 - programming language kind of unto itself
30:55 - thing that allows you to manipulate and
30:57 - do wonderful things with text I want to
30:59 - look at how you can get text from data
31:00 - sources different apis I want to look at
31:02 - wordnik I think I've looked at wordnik
31:04 - in other video tutorials but I want to
31:05 - look at it deeper more deeply I want to
31:07 - look at how you can get users to fill
31:08 - out a Google spreadsheet and use that as
31:10 - the input to your program
31:13 - uh um ah server side programming is a
31:16 - priority for me so there's a lot of
31:18 - things that make sense to do with only
31:19 - client side programming and p5js but I
31:21 - want to look at node in particular
31:23 - twitterbots uh fortunately I have a
31:25 - whole set of video tutorials already
31:26 - made about Twitter Bots uh so we'll see
31:28 - what I can add to that for this week um
31:31 - and then I kind of want to run you
31:33 - through the classics so uh my goal at
31:36 - Hope for you is new and creative ideas
31:38 - in text analysis and text generation but
31:41 - I want to look at how some of these kind
31:42 - of classic text generation analysis
31:45 - algorithms work so word counting is kind
31:48 - of the fundamental building block to all
31:49 - text analysis so I want to look at a
31:51 - word counting program uh tfidf which is
31:54 - like a fancy term for figuring out how
31:56 - to glean key key words from a text based
31:58 - on word counting I might look at basian
32:00 - analysis if I
32:02 - can get the courage for basian analysis
32:06 - uh and also there are a lot of uh node
32:08 - packages that'll do a lot of this stuff
32:10 - for you that I'll examine uh text
32:12 - generation I want to build a Markov
32:14 - chain from scratch I'll talk more about
32:16 - what that is but a probability based
32:18 - system for generating text I want to
32:19 - look at grammars ah there's a wonderful
32:22 - thing that I'll just mention if you're
32:23 - not familiar with another work that I
32:24 - find really inspirational tracery by
32:26 - Trac by the way that should not say
32:28 - tracery by tracery somebody pull request
32:30 - fix this it should say by Galaxy Kate uh
32:34 - so Galaxy Kate um Kate Compton on GitHub
32:38 - and Galaxy kate.com is a wonderful
32:42 - artist uh programmer person who has
32:44 - built a story generation library for
32:47 - JavaScript called tracery which I'll
32:49 - examine uh later as a tutorial maybe as
32:52 - I start to figure out ways of getting
32:53 - guests maybe I can invite Kate to appear
32:55 - to talk about tracery uh um where is I
32:58 - back here um and then look at a code for
33:00 - building something called a context free
33:02 - grammar so language the term grammar
33:04 - might be familiar to you programming
33:06 - languages have a grammar right function
33:08 - name followed by parentheses followed by
33:10 - a bunch of arguments separated by commas
33:12 - if you're missing a comma that's a
33:13 - grammatical error a syntax error so
33:17 - rather than looking at language and
33:18 - seeing how it fits into a j grammar if
33:21 - you can design a grammar and generate
33:22 - language from that what kind of results
33:24 - do you get and then also I want to make
33:26 - sure I look at Chrome make some
33:28 - tutorials on Chrome extensions um I'm
33:30 - going to show you uh a uh uh one of my
33:34 - uh favorite uh artists Addie
33:37 - wagen uh uh Addie wagen neck is a
33:40 - wonderful artist uh who makes amazing
33:42 - work that you should become familiar
33:44 - with and she made a Chrome
33:46 - extension uh called uh girls versus git
33:51 - I'm going to just pull this up here and
33:53 - you can see some of the things some of
33:55 - the features that it does uh every
33:57 - username on GitHub is replaced with a
33:59 - generic female username every gravitar
34:01 - is replaced with a gravitar of a woman
34:02 - or a female Type image so this is
34:05 - something that you can do with a Chrome
34:06 - extension you can have control over a
34:09 - user's browser and their browsing
34:12 - experience to uh kind of experiment with
34:16 - Al strange and alternate ways of viewing
34:19 - the universe of the web and experiencing
34:21 - obviously this can be used for
34:22 - productivity tools and you probably have
34:25 - Chrome extensions for things like oh
34:27 - pocket which allows you to save you all
34:28 - your links but how what kind of strange
34:30 - ways can you do if you you know take
34:33 - everybody's uh uh uh every time a you
34:36 - know noun is on a web page and replace
34:38 - it with an a a food item this came from
34:41 - an idea that somebody had in class so
34:42 - you're just reading web pages to make
34:44 - yourself hungry all the time so creative
34:46 - ideas uh working with Chrome extensions
34:49 - is something that I want to pursue so
34:51 - this is kind of the trajectory of the
34:53 - course uh goals for the course
34:55 - trajectory of the course and after this
34:57 - video is done I'm going to make the
34:58 - first few videos for this first week on
35:00 - some of the material now here's a qu
35:02 - here's here's something I will mention
35:03 - to you you people of the internet can
35:07 - simply just find these videos on YouTube
35:09 - you can write in the YouTube comments if
35:10 - you have questions and I I try to answer
35:12 - them when I have time and other people
35:14 - answer them as well uh and I hope you
35:16 - will enjoy and watch them if you want to
35:18 - participate in this course uh in a
35:20 - slightly augmented way um I will point
35:23 - you to patreon.com/crashcourse
35:26 - rainbow.com you can subscribe to my
35:29 - patreon feed which is a crowdfunding
35:31 - system and with that you will get an
35:33 - invitation to a slack Channel where you
35:35 - can ask questions about the course and
35:37 - post your work in assignments and I have
35:38 - a sort of peer group of people
35:40 - discussing and giving you feedback so if
35:41 - you're interested this is an experiment
35:43 - I'm trying I'm teaching the physical
35:45 - class for ITP students at New York
35:48 - University I teaching an online version
35:50 - of this class for free on YouTube it is
35:52 - AD supported there will be ads for these
35:54 - videos I'm mixed feelings about that but
35:56 - I'm doing that that right now for a
35:57 - little bit of Revenue there's expenses
35:59 - associated with making this and time and
36:02 - then I am also experimenting with that
36:03 - crowdfunding platform to allow people a
36:05 - certain additional form of interaction
36:07 - so my kind of philosophy on online
36:09 - education right now is free content paid
36:13 - interaction and uh but mostly I'm doing
36:15 - this because I enjoy it and I enjoy uh
36:18 - discovering a new audience and bringing
36:19 - new ideas and doing weird dancing from
36:22 - time to time and ringing my bell and all
36:25 - sorts of weirdness so um so thanks for
36:29 - watching this introduction I'm sure
36:31 - there are lots of things that I miss
36:32 - saying ah I and I thought of something I
36:34 - wanted to mention two other uh I'm going
36:37 - to link to all of these uh things in the
36:41 - um in the uh description of this video I
36:43 - want to mention two other uh big
36:45 - Inspirations one is uh Lynn churny uh
36:48 - who does a lot of work with data
36:50 - analysis and presentations and another
36:52 - is uh Darius kazami also known as Tiny
36:55 - subversions who is an internet artist
36:57 - prolific creator of incredibly strange
36:59 - and interesting twitterbots uh basically
37:02 - you know I am not I have to admit
37:04 - something I am not really a twitterbot
37:05 - maker I am a person who makes how to
37:07 - make twitterbot tutorials and I but I um
37:10 - and so uh if you're looking for
37:12 - inspiration and ideas and um other types
37:14 - of materials U Darius is great I want to
37:17 - um point out both Lynn churny and Darius
37:19 - kazami have 2016 talks from the uh IO
37:24 - Festival in Minneapolis so I would
37:26 - recommend you find those and all of
37:28 - these are great but uh if I go here to
37:30 - see all I can find uh
37:33 - Darius uh whoops actually okay anyway
37:35 - you can find them I'll link to them in
37:37 - the description but both of those are
37:39 - highly relevant ly chern's talk and
37:41 - Darius kazami's talk from iio as kind of
37:43 - starter material get you thinking about
37:45 - ideas of things you might want to make
37:47 - if you're following along with this
37:48 - course okay thank you for uh
37:53 - watching and uh stay tuned and in the
37:56 - next video video I'll be showing you
37:58 - some other stuff okay thanks
38:01 - byebye okay um hopefully that was fine
38:06 - that was my introduction I don't know
38:08 - how long that was I've been going for
38:09 - about 40 minutes so
38:12 - far so the live stream archive is
38:15 - obviously going to have additional stuff
38:16 - that I don't think of in those videos um
38:19 - I'm going to look at my uh list right
38:21 - now for
38:22 - today
38:24 - um I think that's okay that I missed
38:27 - kind of some of these things okay so I I
38:30 - hit everything so the next piece so
38:33 - here's what I'm going to do I'm going to
38:34 - try an experiment here I think that I'm
38:37 - not so then if I were just teaching a
38:39 - Course and there was no such thing as
38:41 - video in the internet thank you mattio
38:43 - for keeping track of it no no Lin Moy
38:46 - this is not over just that short video
38:48 - snippet is over and I am going to
38:50 - continue and make more video Snippets
38:52 - I'm going to be here for probably
38:54 - another one and a half to two hours
38:58 - um okay I don't know what is going on in
39:01 - the chat now I have to stop looking at
39:02 - it um so um here's the next thing if I
39:05 - were introducing technical topics and
39:07 - things that you need for your homework
39:08 - for this week if you're following this
39:10 - on as of course like you're going to do
39:11 - homework the next thing I would do is
39:13 - say hey let me just talk about GitHub
39:15 - Pages for you um but since I have
39:17 - already made video tutorials about
39:19 - GitHub pages I think I'm just going to
39:21 - slot those into the
39:23 - playlist so um obviously
39:27 - not not obviously I shouldn't say
39:28 - Obviously so let me for those of you
39:30 - watching live let me at least pull that
39:31 - up and mat I think this makes
39:34 - sense uh Mao who helps me with
39:37 - organizing the playlist I'm going to go
39:38 - to YouTube shiffman um and look I'm live
39:43 - right now um and I am going to find you
39:48 - this particular playlist so this is a
39:52 - full playlist about you working with Git
39:55 - and GitHub I I don't think it makes
39:57 - sense to bring this entire playlist into
40:00 - the a toz playlist because um that's way
40:03 - too much but it could be referenced um
40:06 - but I might make sense the next piece
40:08 - would just be to have uh is there not a
40:11 - 1.9 oh no yeah okay maybe these two
40:14 - videos um GitHub Pages the basics of
40:18 - GitHub pages and GitHub Pages for
40:20 - hosting p5js sketches because that's
40:23 - ultimately what I'm going to be doing so
40:25 - that's the next material so you know if
40:27 - you're watching this as an
40:28 - archive you know stop and go and uh you
40:33 - don't have to but you can stop and go
40:34 - and watch these two videos and then come
40:36 - back to this live stream archive uh if
40:38 - you're not watching this as an archive
40:40 - then you're not watching this as an
40:41 - archive but I think these will make
40:43 - sense uh in
40:46 - um um in the playlist so that's good so
40:49 - the next thing that I want to talk about
40:52 - is ah okay Dom manipulation now this is
40:54 - another tricky one
40:57 - so I think maybe I should
41:02 - do I could do a like part two video
41:05 - which is just kind of
41:07 - overview quick overview I think this
41:10 - makes sense of Dom manipulation in the
41:13 - context of this
41:15 - course uh yeah
41:19 - uh o camera went off I'm really I'm
41:21 - really at a loss here so
41:25 - um
41:27 - you know what I think I'm going to air
41:28 - on the side of only making
41:30 - new of not rehashing things that I've
41:33 - already made videos about because
41:34 - there's limited time and I think I can
41:36 - get more benefit from the new content so
41:38 - I'm just going to point out now I'm
41:39 - going to go back to uh my playlist and
41:43 - I'm going to
41:44 - find
41:48 - um uh I'm going to find this playlist
41:52 - so um this is tricky because this is all
41:57 - relevant but I
42:00 - think what I might do is
42:06 - uh yeah so okay so I don't know how to
42:09 - best manage this but I'm just going to
42:10 - keep going if I were actually teaching
42:12 - this as a course online which is what
42:14 - I'm doing I'm going to tell you that the
42:15 - next step that you want to have some
42:17 - familiarity with is what is p5js
42:20 - and uh how does what is HTML what is CSS
42:24 - and how does Dom manipulation uh work uh
42:27 - in p5js and honestly the the place that
42:29 - you could look for this is right here on
42:31 - this uh web page which kind of has an
42:34 - introduction to p5js as a library uh
42:37 - basic what is HTML what is CSS video
42:40 - tutorials as well as some Dom
42:41 - manipulation examples and a link to the
42:43 - Dom manipulation playlist so that's the
42:46 - next aspect of this that I think is
42:47 - important okay um so that's the next
42:51 - thing I don't know what to add to the a
42:53 - toz playlist
42:55 - but I'll figure that out later and now
42:58 - we are getting to something
43:01 - new so I need to make some new video
43:05 - tutorials on loading text the the goal
43:09 - by the way is to make some of these um
43:12 - to do some of these as coding challenges
43:14 - so these are examples that I made a year
43:16 - ago I haven't really looked at them too
43:18 - much so making the coding challenge will
43:19 - be a bit F uh fresh and I want to talk
43:22 - about Rita I want to do something on
43:24 - Rita as well um but I want to do some
43:26 - coding challenges where I create uh
43:28 - poetry machines as single page web
43:30 - applications so what do we need to do
43:33 - those as coding challenges I need to
43:35 - cover how the string object Works in
43:39 - JavaScript um and I need to
43:42 - cover um I need to cover um how to load
43:46 - from a text file
43:49 - okay um so I'm trying to think of which
43:52 - to do
43:55 - first
43:56 - I'm going to do text
44:00 - input okay all right um let me get
44:04 - myself set up
44:11 - here
44:17 - I
44:21 - um so let me make a
44:25 - new
44:29 - I want to do a couple
44:34 - things I want to
44:36 - [Music]
44:50 - clone I want to
44:52 - clone and actually I'm going to put this
44:54 - in documents
45:00 - [Music]
45:04 - nope I want to clone my a toz F-16
45:08 - repository so I have those examples if I
45:11 - need to
45:23 - reference uh okay
45:26 - uh
45:28 - so
45:31 - um and I'm going to make this shortcut
45:34 - to this here so I can look at the code
45:38 - examples
45:41 - um uh I want
45:46 - to uh then I need to
45:50 - um um by the way I want to start
45:54 - using I think this will do I need to do
45:58 - pseudo I want to start using the node
46:00 - HTTP server instead of the Python server
46:02 - which I think might be uh a little bit
46:05 - easier let's see if this
46:07 - works um so I I maybe it makes sense for
46:10 - me to do a quick video on my workflow
46:12 - that I'm going to use which is um adom
46:17 - and yeah I think I like this better 8080
46:21 - okay
46:23 - um uh so okay
46:29 - so
46:32 - uh um okay so it might make sense for me
46:36 - to do a quick uh workflow video that
46:40 - exists in this
46:42 - playlist uh but let me just get myself
46:44 - set up here Local Host
46:46 - [Music]
46:48 - 8080 how come that didn't
46:53 - work strange
46:58 - huh oh I guess it's like it just uses a
47:02 - different IP then okay um okay that's
47:06 - the web server for these
47:08 - examples and then I need
47:11 - a folder here
47:15 - called uh
47:17 - A2Z and then I'm going to call this week
47:20 - one and I'm going to put that here um I
47:24 - want to get just a blank I'm going to do
47:27 - the ridiculous thing which I'm going to
47:30 - download just to make sure I have the
47:32 - most recent everything I'm going to get
47:34 - it a empty pro p5js
47:39 - project yeah I have been using Code pen
47:42 - and I I I would like to use it more
47:43 - codepen is
47:44 - wonderful
47:48 - um uh I'm going to call this load uh
47:53 - text and
47:57 - uh okay let me close a lot of these
48:01 - windows I can get them back if I need
48:03 - [Music]
48:09 - to I'm singing to
48:13 - myself um okay um all
48:17 - right now here's a question for
48:22 - everybody I also now want to
48:33 - I also want
48:36 - to run another server and it's can I
48:40 - specify the
48:47 - port hey that worked I just guessed I
48:50 - can't believe I just well it makes sense
48:52 - so I can specify the port and so I can
48:56 - have uh local oh
48:59 - 127 8080 which is my pre-existing
49:03 - examples 8,000 which is
49:08 - oh what did I get wrong
49:10 - here
49:12 - oh that's crazy I didn't do it right I
49:15 - just all I have to do is I didn't guess
49:17 - correctly just write the port
49:19 - no dash 8000
49:24 - no what did I do
49:28 - wrong P equals okay thank
49:34 - you no how about just Dash p
49:39 - nope there we go that's what I want and
49:42 - now that's
49:44 - working whoa what is this
49:49 - craziness I have something still
49:51 - [Music]
49:53 - running so actually
49:57 - sorry everybody all
50:02 - right all right I'm not going to worry
50:03 - about it too much this is going to be my
50:07 - example
50:08 - okay
50:13 - and
50:15 - uh no so now I need to okay so what I
50:20 - think that I'm going to do here is I'm
50:23 - going to make a quick short video
50:26 - just about my workflow because I get
50:28 - this question asked a lot
50:32 - um and I think it'll be helpful just to
50:34 - point people to this so my workflow is
50:38 - node web server Adam editor but I'm
50:41 - going to mention also that you could
50:43 - there is an Adam there are Adam packages
50:45 - for servers but I'm just choosing not to
50:47 - use that I'm going to mention that I'm
50:48 - also using a beautify plugin for
50:51 - Adam and uh and I also want to mention
50:54 - that stay tuned because you going there
50:57 - there is soon to be released a web
50:58 - editor for p5js
51:00 - okay um let me uh reset the camera
51:06 - here
51:08 - um and I am going to uh I just want to
51:13 - erase the uh whiteboard over
51:24 - here uh
51:25 - uh okay yes why Adam over Sublime no big
51:30 - reason other than I saw somebody I
51:32 - really like using Adam and I thought oh
51:34 - I should use Adam too but it is free and
51:37 - Sublime is um uh a software commercial
51:41 - software which I I have purchased the
51:43 - sublime license because I like to use
51:45 - Sublime and I think you should too but
51:47 - as much as possible I like to use uh
51:48 - free Tools in my tutorials um but I also
51:51 - think that people should buy software
51:52 - and support software development so I
51:54 - don't mean to say that there's anything
51:55 - wrong wrong with charging for software
51:57 - okay uh here we
52:00 - go um let
52:04 - me
52:12 - uh hello welcome uh to this video in
52:15 - this video I just want to do a short
52:17 - quick tutorial about my workflow for the
52:20 - tutorial videos that you're about to
52:22 - watch as part of this programming from a
52:23 - toz playlist but also I use this
52:25 - workflow in a lot of my other videos and
52:27 - coding challenges and I'm sure my
52:28 - workflow will change at some point in
52:30 - the future but this is relevant for the
52:31 - time period that it's relevant so let me
52:33 - just come over here and make a short uh
52:35 - list of some things that I'm using so
52:38 - one thing is you want to make sure uh if
52:40 - you want to use my exact workflow there
52:42 - are lots of other workflows uh you want
52:44 - to install something called node.js and
52:48 - then you want to install and I'm going
52:50 - to show you how to do this a node
52:51 - package called
52:53 - HTTP server
52:55 - this runs a little Local web server on
52:58 - your computer that hosts the HTML CSS
53:00 - and JavaScript files that you're
53:02 - programming and working with so that you
53:04 - can see them you know of course you can
53:05 - just double click them and open them in
53:07 - the browser but if you run an actual web
53:09 - server on your computer um you're going
53:11 - to mirror the real situation when you
53:13 - eventually publish your files to a web
53:15 - server somewhere so I use those I you
53:17 - also need a text editor to edit your
53:20 - code and edit the JavaScript files the
53:21 - HTML files all that sort of stuff I'm
53:24 - using a text editor called Adam uh and
53:27 - with this text editor I'm using a
53:29 - package called I think it's called Adam
53:32 - links to all these things will be in
53:33 - this video's description so if I get the
53:35 - name wrong uh adam- beautify so that's
53:38 - an uh that's something that I just like
53:39 - that auto indents my code and that sort
53:41 - of thing um and then I should also
53:44 - mention that there are a bunch of I
53:46 - believe there's something called Adam
53:47 - live server and there are uh other
53:50 - packages in atam that will run the
53:52 - server for you that you can use instead
53:54 - of http server if you prefer I should
53:56 - also mention that I'm uh working with uh
54:00 - p5js libraries so you'll see that all of
54:03 - my projects have a bunch of extra
54:05 - JavaScript files associated with them
54:07 - they come from uh p5.js and
54:10 - p5.js um and eventually soon I I can't
54:14 - uh later this month if you're watching
54:16 - this in in September 2016 um there will
54:19 - be a web editor that you can use um with
54:24 - a p5js for developing sketches and ideas
54:27 - that go along with this course as well
54:28 - and at some point when that is released
54:29 - I'll demonstrate that in a video as well
54:31 - I should also mention that there are a
54:33 - lots of other uh wonderful code editors
54:35 - you can use online code pen uh is one uh
54:39 - that I've used it has a wonderful
54:41 - Professor mode which allows you to type
54:43 - code and your students see on their
54:44 - screens the code that you're typing in
54:46 - real time uh jsfiddle uh
54:49 - thimble uh and um I don't know why I
54:52 - can't think of other good ones that I'm
54:54 - forgetting now so I apologize if you
54:56 - make a wonderful code editor online that
54:58 - I'm not thinking of so this is the
55:00 - workflow I'm using let me demonstrate it
55:01 - for you rather quickly here I am over
55:04 - here uh and okay so Adam is something
55:07 - you should download
55:10 - from uh atom.io I've already downloaded
55:14 - it so I'm just going to run it here
55:17 - uh it is a oh it's already opening
55:20 - something so let's when you open it
55:24 - it'll probably look more like this an
55:26 - empty thing I could do command N I have
55:28 - a new file and I can type stuff into it
55:30 - so it's just a text editor any text
55:32 - editor will do oh yes install my update
55:36 - I guess oh what's going to happen
55:38 - everything's going to break no please
55:39 - work okay um so uh okay so this is Adam
55:44 - uh that's what it looks like uh um
55:47 - packages you can install you can see
55:49 - here this is this beautify package that
55:51 - I'm using and I'm also using something
55:53 - called Adam key mapping so so I set it
55:55 - to beautify to be the command T which is
55:57 - my preference uh shortcut um so uh maybe
56:01 - I could cover that in another video or
56:03 - link to how to set up key mappings and
56:04 - Adam in this video's description um and
56:08 - you can also see there I I do I have the
56:10 - live server somewhere a live server here
56:12 - so you can see this is a live server
56:14 - package which will also start a live
56:15 - server you can install how do you
56:16 - install Adam packages
56:19 - uh I forget
56:23 - uh when window uh I was going to say
56:27 - preferences uh uh packages yes so uh and
56:31 - maybe I could
56:34 - um time out pause oh yes no never mind
56:38 - keep going install so here's a place
56:40 - that I can that you can search for
56:42 - packages or find featured packages to
56:45 - install um and add things to Adam okay
56:47 - so then now the other thing you want to
56:49 - install is uh node which I'm going uh
56:53 - which you can find at node death .org
56:55 - you can download install node and then
56:57 - from uh
56:59 - terminal you can
57:01 - um from terminal you can use something
57:04 - called uh npm which stands for node
57:07 - package manager and you want to type npm
57:10 - HTTP Das oops
57:15 - http-server this is installing the web
57:18 - server that I'm using but you can't just
57:20 - install
57:22 - http-server you need to say DG for
57:25 - Global meaning you're making this a
57:26 - global package which means you can just
57:28 - access it instead of being a package
57:30 - just for one project it's just
57:32 - accessible on your computer till until
57:34 - the end of time basically until you
57:35 - uninstall node and if you do that you
57:38 - also probably want to say pseudo because
57:40 - you might need pseudo as a way of saying
57:42 - I'm the administrator of this computer I
57:43 - have permission to install something
57:45 - globally and if I hit enter it's going
57:47 - to ask me for my password and then uh I
57:50 - already installed it so I don't know
57:52 - what just happened there but uh oh I
57:54 - said to hold the wrong command
57:57 - entirely hope you're not uh npm install
58:00 - HTTP server and now um it's going to
58:03 - install it so it's installing it and
58:05 - once I've done that uh I can I'm running
58:08 - a web server in a bunch of other
58:10 - directories so I'm going to stop that I
58:12 - can just anywhere I am on the computer I
58:14 - can just say
58:16 - http-server and I can uh run a web
58:19 - server now where do you want to run the
58:21 - web server from probably from a
58:22 - directory where you have a project that
58:24 - you're working on like I have this load
58:27 - text project I can CD to that directory
58:30 - I can say HTTP server and then I can go
58:33 - to the browser with this particular URL
58:36 - which is just the local host of my
58:39 - computer 127.0.0.1 col
58:42 - 8080 and uh oops I can go back to the
58:45 - browser and I can paste that URL in and
58:47 - you can see
58:49 - oops refresh there's the project it was
58:52 - uh you can see there's nothing there CU
58:54 - there's no code in there that project
58:55 - but if I were to add some code to that
58:56 - project you would see this project
58:57 - displayed in the page now uh one other
59:01 - thing I think that I I thought of that I
59:02 - wanted to mention about this which I've
59:04 - now completely forgotten oh yes if you
59:07 - don't like port 8080 uh you can also one
59:10 - thing I'll mention to you is you can say
59:12 - http-server uh- p and I can make up a
59:15 - port like what's my favorite number 1
59:18 - 1234 uh maybe I should I'm going to
59:20 - actually I'm going to you higher port
59:22 - numbers are better that you don't mess
59:23 - up something that's already running
59:24 - computer so I'm going to say
59:26 - 881 and you can see now I'm running that
59:28 - same server on 881 so you can't run
59:31 - multiple web servers on the same port
59:33 - but if you need to run multiple web
59:34 - servers on the same time you can use
59:36 - different ports okay so that's a quick
59:39 - just little
59:41 - diddy on my workflow I'm sure I missed
59:44 - something or you have questions about it
59:45 - which you can ask in the comments and
59:46 - now you're ready to go and watch the
59:48 - video tutorials where actually make some
59:50 - stuff using this workflow okay
59:53 - thanks okay so so I got that out of the
59:55 - way uh hopefully that's useful for
59:58 - people I don't see anything in the chat
60:00 - like you're not making any sense or that
60:01 - was terrible or please stop so I'm going
60:03 - to keep
60:07 - going and I now going to actually get
60:10 - myself set up
60:12 - again
60:14 - um so let me run I'm used to 8,000 so
60:19 - I'm going to do one on
60:22 - 8,000 which are the
60:25 - pre-existing examples and
60:28 - then I'm going to do
60:31 - 80001 I need a
60:35 - tissue so
60:38 - 8,000 okay and then uh
60:44 - 80001 load
60:46 - text uh adom
60:48 - node
60:53 - close uh and then then now what I want
60:55 - to do
60:57 - is uh open that load text example
61:00 - actually just
61:02 - open A to Z
61:06 - here oops not an
61:09 - atom
61:12 - open B to
61:15 - Z I don't know what this
61:21 - is
61:23 - uh
61:39 - let add just a little HTML so I see that
61:41 - stuff is there
61:46 - oops and make sure I have P5
61:51 - DOD okay so here we go we are ready now
61:57 - now gimler full asked to be greeted and
62:00 - then message got deleted okay good work
62:05 - moderators uh please make a basic
62:08 - stylesheet for your index.html I will do
62:10 - that at some point it is not really
62:12 - necessary right now not the focus of
62:14 - what I'm looking at but um um Al valer
62:18 - you're asking about open processing it's
62:20 - a great uh project that allows people to
62:22 - post and host sketches online um I think
62:25 - it's a wonderful project C9 is an ITP
62:27 - Alum who's got a lot of energy encourage
62:29 - you to support it and use it sure um
62:32 - okay
62:36 - so
62:41 - now how we doing TimeWise I'm recycling
62:44 - the
62:48 - cameras I am going to uh erase this over
62:52 - here so this first video I'm going going
62:54 - to look at how you load text from a user
62:59 - ah and I need two
63:00 - things so actually before I do this
63:03 - video I need to use some sample text
63:07 - and rainbow
63:13 - Wikipedia um so let's see what's a good
63:16 - way for me to just copy paste a lot of
63:19 - text here let's see uh so much
63:22 - interesting text here Double Rainbows
63:25 - the Wikipedia page on rainbows is
63:28 - amazing okay uh copy paste this actually
63:32 - I'm gonna uh I I think this is too much
63:35 - text so I'm just going to
63:37 - do like a few
63:40 - first uh paragraphs with uh to here okay
63:45 - actually let's go a little
63:49 - further I don't want the math stuff so
63:51 - I'm going to stop here okay copy text
63:56 - edit paste make plain
64:00 - text okay so now I have uh whoops I'm
64:03 - going to get rid of
64:09 - this and I'm going to save this
64:16 - as save as uh rainbow.
64:20 - txt
64:22 - um we one load text
64:26 - save um and now I can also see it
64:31 - here so I
64:33 - think this should be
64:37 - okay you know what I think I want I
64:40 - think I want how do I turn text wrapping
64:43 - on in um and not wrapping as in because
64:47 - I I'm not going to trim to wrap because
64:48 - it'll be the worst thing you've ever
64:49 - heard in your life but wrapping W WR
64:56 - uh
64:58 - W uh a soft wrap let's turn that
65:03 - on
65:05 - uh and there we go a little bit okay uh
65:13 - great
65:15 - o oh I'm going just do a little cleanup
65:18 - here I don't know why that
65:20 - happened
65:23 - uh
65:27 - and all right I'm not going to obsess
65:30 - about this too moonbows oo what's a
65:32 - moonbow that's
65:34 - exciting uh okay uh
65:39 - here okay here we go so now I have some
65:42 - sample text to load
65:46 - great
65:49 - okay here we
65:53 - go
66:02 - I will actually in this tutorial I am
66:04 - going to need to add uh a CSS file okay
66:09 - here we go
66:11 - um Everybody right let's see what's the
66:13 - I want to see what time it is it's 11:30
66:16 - I'm doing pretty well
66:19 - still I basically have three video
66:21 - tutorials I want to make before I leave
66:23 - now
66:24 - uh loading text from a user basics of
66:27 - the string object in JavaScript and
66:30 - coding challenge to do cut UPS dastic
66:32 - generative poetry stuff in a single uh
66:35 - web page app so those are the three
66:37 - things I'm going to
66:38 - do okay here we
66:44 - go hello welcome to another programming
66:48 - from a toz course video this video I'm
66:51 - going to look at a feature of well
66:53 - really a feature of the world the web
66:55 - the browser um and look at in the
66:57 - context of p5js and JavaScript how do
66:59 - you get text input from a user so first
67:02 - I just want to talk you through over
67:03 - here what the basic what the three or
67:06 - four methodologies I'm going to use so
67:08 - number one is if you want to get text
67:11 - input from the user you can use
67:13 - something called uh an input element so
67:17 - an input element is a little box that
67:18 - appears in a browser window where you
67:20 - could say you know in a web form you
67:22 - might say like name and then you know
67:24 - you write your name in here uh you could
67:27 - also uh use something called a text
67:31 - area and a text area is the same idea
67:35 - it's just bigger and it's usually
67:36 - resizable the user can kind of drag this
67:39 - corner around um for a longer bit of
67:42 - text entry so if you want the user to
67:44 - type in a paragraph of text and use that
67:47 - in your program you can use a text area
67:50 - and then you could also get you could
67:52 - ask the user to to submit or or you
67:55 - could simply load there's boy there's so
67:58 - many other ways that I'm not going to
67:59 - get to because you could use apis and
68:01 - crawl the web and scrape it we'll get to
68:03 - that stuff later in a future video but
68:05 - what I'm thinking about right now is you
68:06 - could also get input from a text file
68:09 - itself and you could use for that you
68:12 - could use the load strings method in
68:15 - p5js where you could simply just
68:17 - reference a an actual text file that you
68:20 - have as in your sort of directory of
68:22 - files um and you could also U but you
68:26 - could also ask the user to upload a
68:30 - file sorry there's going to be an edit
68:33 - point in this
68:38 - video thank you M for editing this my
68:41 - coughing fit
68:47 - out you could also use a uh file input
68:52 - um if you've ever seen in a web browser
68:54 - you have a little button that says like
68:55 - choose file and you can actually create
68:58 - that with a p5js function I think called
69:01 - create file input and I'll show you how
69:04 - to use that as well and finally you
69:07 - could create a div of sort of area a box
69:11 - of stuff on your screen that you could
69:14 - in the browser itself that you could
69:15 - drag a text file over and I actually
69:17 - have a separate video tutorial that just
69:19 - goes over that which I might just
69:21 - reference rather than include it in this
69:22 - video tutorial so I'm going to go
69:24 - through all of these and then you can
69:25 - also look at the draggable area video um
69:28 - and you'll see these as possible ways of
69:30 - getting text input because what I'm
69:33 - going to do is say hey user submit some
69:35 - text and I'm going to generate a poem of
69:37 - from that text for you so that's kind of
69:39 - the ultimate goal that I'm going to do a
69:40 - couple videos from now okay so let me
69:42 - come over come over here and let's see
69:45 - um so first of all so I'm going to start
69:47 - to implement some of this stuff and go
69:49 - over how these functions
69:51 - work okay so this this is my code so far
69:55 - oh yes no I'm still in the same video I
69:57 - forgot everybody take a deep breath I
69:59 - need some like calming uh
70:02 - sound that's not calming sound but I got
70:04 - to uh I need some more Zen sound effects
70:07 - okay um so this is my code so far one of
70:09 - the things you'll notice in all of the
70:10 - examples that I'm not all but many of
70:12 - the examples that I'm publishing is that
70:14 - even though I'm using the p5js
70:16 - style methodology structure of there's a
70:19 - setup function which is kind of like the
70:21 - pages loaded function there's a draw
70:23 - function which runs this continuous loop
70:25 - I actually am using calling a function
70:27 - called No canvas meaning there there is
70:30 - no drawing canvas associated with this
70:32 - program that I am writing I am simply
70:36 - I'm writing a program to mess with uh
70:39 - the web page other elements other than
70:41 - the canvas paragraphs headers that sort
70:43 - of thing so if I were to look at the
70:46 - output of this page uh which is over
70:48 - here you can see all there is is a
70:50 - header that says welcome to a toz week 1
70:53 - now where is that coming from one thing
70:55 - I'll notice nowhere in my code do I say
70:57 - hey display that on the page that's
70:59 - because I actually have that simply
71:02 - hardcoded into the HTML file associated
71:04 - with this uh itself so this is something
71:07 - that I'm going to touch on in this
71:09 - example and future examples is ah when
71:11 - should I put something in the HTML file
71:13 - when should I put something in the
71:14 - Javascript file and there's no real
71:15 - answers to this question it's sort of
71:17 - case-by case basis and personal style
71:19 - that sort of thing um okay but what I
71:21 - want to do first is just simply show you
71:24 - how can I create text input on the page
71:28 - and I'm going to do that by saying
71:31 - create
71:34 - input and now I'm going to run this code
71:37 - look at that and there it is there's a
71:39 - place where I can type some text on the
71:42 - page wonderful and uh ah yes okay so
71:47 - just time out for a second sorry I need
71:49 - a short
71:52 - break I kind of had like lost my train
71:54 - of thought um looking at the chat
71:57 - somebody in the chat says they have to
71:58 - pee I will probably have to do that at
71:59 - some
72:02 - point
72:06 - sorry I I I I try to minimize the amount
72:08 - of edit stuff that I'm added to do but
72:10 - this will get edit so I'm just trying to
72:12 - think to myself of what order I'm going
72:14 - in
72:17 - um
72:22 - okay
72:24 - okay
72:30 - great okay so with this partic with this
72:33 - text input box I could do a number of
72:35 - things number one is I might ask the
72:38 - user to uh uh enter
72:41 - in I was going to talk about the Mad Li
72:44 - sorry you guys I kind of just like lost
72:47 - my boy I'm really the um I'm having some
72:51 - green screen noise today it's probably
72:52 - because that light is burning out but
72:54 - say
73:00 - okay once the user has typed in some
73:03 - text I want to uh I might want to access
73:05 - that text in my program so let's look at
73:06 - how I might do that so first of all this
73:09 - create this input text box that I've
73:12 - created on the screen I need to store a
73:14 - reference to it in a variable so I'm
73:16 - going to create a variable like input
73:19 - I'm going to say input equals create
73:21 - input and by the way I'm actually going
73:22 - to take out the draw loop I don't want
73:24 - there's no reason for P5 to be
73:26 - continuously looping right now because
73:28 - I'm not using that aspect of P5 which I
73:31 - might later but there's no canvas
73:32 - there's no animation and so what I now
73:35 - want to do is I want to H have access to
73:39 - that uh stuff that's in the the text box
73:42 - now when do I want to have access to it
73:43 - I could have access to it in a draw Loop
73:45 - by saying input. value I'm going to skip
73:48 - that for right now uh what I'm going to
73:49 - show you though is just I'm going to
73:51 - open up the Chrome developer tools here
73:53 - to make this a little bit bigger so
73:55 - let's say I put my let's say I type
73:56 - rainbow into there and then I set type
73:59 - input. value you can see this by
74:02 - referencing the variable Dov value I
74:04 - have the text that's in there so
74:06 - anywhere in my code I can simply
74:08 - reference that textbox Dov value and I
74:10 - know what the user has typed rainbow yay
74:14 - um so uh now I might want to know what
74:19 - they type only when they hit enter so
74:22 - the way that I can do that and I've done
74:23 - something rather
74:25 - horrific so well actually no I haven't
74:27 - done it horrific yet I'll show you later
74:29 - I'll fix this later so um all Dom
74:32 - elements the text input box being a Dom
74:35 - element have events associated with them
74:38 - mean I click on it it's an event when I
74:40 - hover my mouse over it it's an event
74:42 - there is an event called changed and
74:44 - there's a p5js P5 Dom Library function
74:47 - called Changed which allows me to
74:50 - execute a function when that event has
74:53 - has been triggered so I can say input.
74:55 - changed new text which means I can just
74:57 - write a function called new
74:59 - text and I can say
75:02 - console.log input. value so what I'm
75:05 - saying is whenever the input box has
75:08 - changed meaning the user has hit enter I
75:12 - I want to see the results of that in the
75:14 - in the console so now if I go back and
75:16 - refresh this page and I type in rainbow
75:19 - and hit enter we can see here uh more I
75:22 - have rainbow here if I type in unicorn
75:25 - and hit enter we can see I have unicorn
75:26 - there so now I am accessing the content
75:29 - whenever the user types enter and I
75:31 - might do something like say create P
75:36 - input. value create P makes a paragraph
75:39 - element on the page so now I can say
75:42 - unicorn and I can say rainbow and I can
75:45 - say uh swirly happiness right and I'm
75:50 - getting all of those things as paragraph
75:52 - elements on the the page now here's a
75:54 - question for you what if I want to know
75:58 - every time the user types a key not just
76:01 - when they hit enter but anytime anything
76:03 - changes in that text box itself this
76:06 - event is not the changed event and this
76:08 - is where I've done something which I
76:10 - really don't like which is that the name
76:13 - for that event is actually input which
76:15 - is a little bit of so technically what I
76:17 - need to say uh is something like this
76:21 - but I sort of hate hate how I've name
76:23 - the variable input and then there's also
76:25 - an input so I want to rename that
76:27 - variable so I'm going to just call that
76:29 - uh you know text field or
76:32 - something and that way we can have less
76:36 - confusing there less confusing there I
76:39 - can I can make this a little more clear
76:41 - uh so what I'm going to do now is say
76:44 - function uh new
76:46 - typing and I'm going to say I'm also
76:49 - going to do create pie so let's comment
76:51 - out the let's just for the moment
76:52 - comment out the changed
76:55 - event and only have the uh input event
76:58 - so now watch what happens you and I C O
77:01 - R
77:02 - N anytime I type anything I'm getting an
77:06 - event and I'm kind of continuously
77:07 - making new paragraph elements for every
77:09 - keystroke that I type so maybe what I
77:12 - want to do instead just as an exercise
77:15 - here to do something different is to
77:17 - what if I had a single paragraph element
77:20 - that I altered the content of every time
77:23 - I typed a key so here's where this like
77:27 - in
77:28 - Shakespeare Hamlet there's an essential
77:31 - question to be or not to be and I have a
77:35 - different question for you today and my
77:38 - question for
77:41 - you I don't maybe I should oh I
77:43 - shouldn't be erasing all this because
77:44 - it's a nice reference for later but it's
77:46 - too
77:48 - late to
77:50 - select or not
77:53 - to select or maybe it's just to
77:57 - create or not to
78:00 - create to select or to create what I'm
78:03 - saying to you
78:05 - is when do I want something on my web
78:09 - page to appear based on code I write I'm
78:12 - creating a new Dom element and now it's
78:14 - being appended to the page or versus
78:17 - when do I want to have something that
78:19 - exists on the page that I access in my
78:21 - code exist in the The Raw HTML that I
78:23 - access in my code and manipulate and
78:26 - here's a case where I'm going to De just
78:28 - demonstrate to you that what I want to
78:29 - do is I am going to in the HTML file
78:34 - itself I am going to add a paragraph
78:36 - element and I'm going to give it an ID
78:39 - and I'm going to call it uh
78:43 - output right I'm going to call it
78:46 - output and you can see that it is empty
78:50 - and what I want to do instead of saying
78:52 - create p in my my code instead of
78:54 - creating the paragraph element I want to
78:56 - select this paragraph element I want to
78:58 - access it so that as the user types I
79:00 - want to update what's in it with the
79:02 - word with the keys that they're typing
79:04 - so uh let's do that right now so how I
79:07 - do that in the code
79:11 - is so I'm going to do leave that in
79:15 - there so what I'm going to do is I'm
79:16 - going to say I'm going to make a
79:17 - variable called
79:19 - output and I'm going to say output
79:21 - equals select
79:25 - and then I need to I'm going to use its
79:27 - ID and the indicator for an ID is the
79:30 - pound or hash symbol
79:33 - select output I think that's what the
79:35 - IDE I gave it and then here now what I
79:38 - want to do is in new typing I'm going to
79:42 - say output. HTML the HTML function in
79:46 - the P5 Dom library is a function you can
79:48 - call to access the existing content of a
79:51 - Dom element or place content in it and
79:54 - what I want to do is I want to take
79:55 - what's currently in the text field and I
79:58 - want to put that in that paragraph
80:00 - element so let's look and see if this
80:02 - works now and so as I'm typing Oh cannot
80:07 - read property HTML of null so I've made
80:10 - some sort of mistake here
80:12 - select uh you know what I wonder if by
80:17 - um I wonder if it uses wait what what
80:20 - did I actually let's so let's double
80:21 - check what did I make it ID I made its
80:23 - ID output um so let's just let's just
80:27 - try uh some stuff in the console here to
80:29 - debug this I think I know what the
80:30 - problem
80:34 - is huh okay time out I debug
80:41 - this yes so somebody in the chat is
80:44 - saying document. getet element by ID
80:47 - which is absolutely correct but that's
80:49 - using the of JavaScript and I'm kind of
80:50 - leading on the p5js Dom
80:54 - Library so let me look this up I also
80:56 - need to get a drink of
81:04 - water why did I look look oh my here's
81:07 - my video tutorial I know what I'll do to
81:10 - figure this out I'm going to watch this
81:11 - video tutorial about select and select
81:15 - all uh where's the
81:17 - reference this is
81:20 - uh interesting um this is not what I
81:22 - want to do did I did I like this example
81:25 - uh reference libraries P5
81:29 - Dom
81:32 - select
81:36 - yeah so what did I do wrong
81:40 - here HTML file is not saved that's quite
81:46 - possible I'm going to stop that annoying
81:48 - typing
81:49 - sound sorry
81:51 - everybody uh what went wrong
81:57 - here oh that was it thank you very much
82:01 - everybody for
82:05 - my
82:09 - oh the HTML this is what I meant to do
82:11 - the HTML file wasn't
82:13 - [Applause]
82:18 - saved okay that did the trick let's
82:21 - refresh this
82:23 - page
82:30 - uh uh
82:32 - okay my pants are falling down you would
82:35 - never know that because to the internet
82:38 - I only exist from here up but in my new
82:42 - and upcoming uh coding rainbow
82:45 - promotional music video thing you will
82:48 - see that I am not a
82:51 - centaur
82:53 - um okay I got to get back into this
82:55 - video okay so
82:59 - um here I am back and if you are
83:02 - wondering what was wrong I forgot to hit
83:03 - command
83:06 - s in my
83:08 - um in my index.html file meaning it
83:11 - wasn't saved so now that I've saved it
83:13 - the code works as expected or as I
83:15 - wanted it to which is I can say uh hello
83:19 - every time any character that I type
83:21 - here you can see that that paragraph
83:24 - element is being updated and now when I
83:26 - hit enter you can see that I am also uh
83:30 - saving that with so I have two events
83:32 - that I'm tracking each key being pressed
83:34 - and enter being pressed now couple other
83:37 - things I want to mention one is if you
83:39 - want to have this pre-filled in with
83:41 - some text um then uh one thing you can
83:44 - do is you can uh in this create input
83:48 - function you can say uh this uh you know
83:51 - like and enter your uh favorite uh food
83:56 - or something or just say like your
83:58 - favorite
83:59 - food right and I could then say you know
84:02 - blueberries cuz I love blueberries I
84:05 - love blueberries okay um and uh they
84:10 - would me so happy I wish I had a bowl of
84:12 - blueberries right now and I could just
84:13 - do this sort of weird internet thing
84:15 - where I eat blueberries on the internet
84:18 - um okay so you could see you can have
84:19 - something some pre-filled text in there
84:21 - I could also
84:23 - uh make this a text area instead so what
84:26 - I want to do actually right now is uh
84:29 - what is I'm going to show number one is
84:31 - I'm going to show you two things at once
84:33 - whereas uh first of all instead of
84:35 - saying create input I could have
84:36 - actually just put an input U element in
84:40 - the HTML file and you select to access
84:42 - it you can try doing that as an exercise
84:43 - for yourself and what I'm going to do in
84:45 - this video is change this I'm going to
84:48 - actually add a text area and I'm going
84:51 - to give it an ID which is uh I'm going
84:53 - to call it text field I'm going to say
84:56 - text area and you can see now if I
84:59 - refresh this you can see there's now a
85:01 - text area that I can expand over here so
85:03 - if I wanted to type a paragraph in here
85:05 - and I could also actually preed it with
85:07 - some text please type a story and you
85:11 - can see now it says please type a story
85:13 - there and what I'm going to do is in the
85:15 - code I'm going to comment this out
85:18 - instead of creating the input I'm going
85:20 - to say text field equals select
85:23 - and uh text and the
85:25 - uh the ID is text field so I could
85:28 - probably think of
85:31 - better blueberry I'm going to call it
85:33 - blueberry and I'm going to go back to
85:35 - the HTML and I'm going to say uh give it
85:39 - an ID blueberry and I'm going to say
85:41 - tell me about how much you love
85:47 - blueberries so that's in there you can
85:50 - see that's in there and now you can see
85:53 - this same program works the only thing
85:56 - is that event enter is no longer
85:58 - relevant so in this case I should
86:01 - probably create let's do this um I'm
86:03 - going to go to the the I'm going to
86:05 - actually just create uh a button element
86:08 - and I'm going to say
86:09 - submit and I'm going to give that an ID
86:12 - which is
86:13 - submit and then I'm going to go to my
86:15 - code and I'm going to say VAR
86:18 - submit uh and I'm going to say submit
86:21 - equals
86:23 - select submit and by the way I'm doing a
86:26 - terrible job I'm single quotes double
86:27 - quotes everywhere all you can argue on
86:29 - the internet single versus double quotes
86:30 - I'm just going to use them
86:32 - both I don't care uh and I'm going to
86:35 - say submit uh dot uh mous pressed uh
86:41 - which is an event uh new and I'm going
86:43 - to say uh new text so when you click the
86:47 - submit button I'm going to call the new
86:49 - text event uh which will create that new
86:52 - par paragraph So Mouse pressed is an
86:53 - event for when you click on a button so
86:56 - I should be able to do this and you can
87:00 - see and I can hit submit and I get this
87:03 - is how much I love
87:06 - [Music]
87:07 - blueberries okay so oh it did it twice
87:09 - why did it do it twice
87:14 - um Mouse press oh because I have the oh
87:18 - interesting oh when I maybe when I hit
87:20 - tab or something I I have this uh no oh
87:24 - yeah text field change so that event is
87:26 - still in there maybe it's somehow
87:27 - figured out I don't
87:30 - know I don't know why that happened yeah
87:33 - someone needs to by the way someone
87:34 - needs to write a command s for Save song
87:37 - um okay anyway uh I finished with this
87:40 - video okay so this is the end by the way
87:42 - here's a little exercise technical
87:43 - exercise for you to do and I'm going to
87:46 - show you how to do this as I make some
87:48 - video tutorials about how to manipulate
87:49 - strings but basically the next thing you
87:52 - should think about um is how can you
87:55 - instead of just reproducing the exact
87:59 - text that is um that is in the text area
88:03 - or text input box right there on the
88:06 - page how could you manipulate that text
88:07 - so how could you show the user back what
88:09 - they've typed but reverse the order of
88:11 - the characters or reverse the order of
88:12 - the words or replace certain words with
88:14 - their synonym I mean that's you know
88:16 - connecting to an API or something so you
88:18 - can come up with some clever idea this
88:19 - is a kind of a technical exercise that
88:21 - you could try okay thanks for watching
88:22 - this video about how to get text input
88:25 - from the user using a input field or a
88:28 - text area in the next video I'm going to
88:29 - actually show you how to load from a
88:31 - file using load strings or the create
88:34 - file input okay thanks very much and
88:36 - I'll see you in the next
88:39 - video
88:42 - uh
88:44 - okay because I lost Focus to the element
88:47 - and the content in the element changed I
88:49 - think that is correct Muhammad in the
88:51 - chat writes the onchange or the changed
88:53 - event triggered because because you lose
88:55 - focus to the element so whenever I click
88:58 - out of the text area or something and
88:59 - click to the submit box it triggers that
89:01 - event so I'm a little bit crazed here
89:03 - but hopefully that was useful to
89:07 - you time wise how are we doing I want to
89:09 - get to my
89:22 - server I believe that's what I'm going
89:24 - to do right now so I think what I'm
89:26 - going to look at um load strings okay so
89:29 - let me get myself set up for that uh and
89:32 - I'm going to week one look um so I'm
89:35 - going to change the name of this to
89:38 - o1 uh
89:40 - text
89:44 - input and I'm going to call the next one
89:49 - O2 load file
89:53 - okay
89:56 - so
90:00 - um sorry sorry sorry I have to uh go
90:04 - back to here this is what I
90:07 - just
90:10 - did
90:13 - uh hold on I want to just fix something
90:15 - about
90:16 - this
90:20 - um
90:22 - what oh whoops I did something
90:28 - ah I did something weird
90:30 - here um I think this is still
90:34 - right uh what I wanted to do sorry is
90:38 - just I want to put the output
90:43 - above and I want to put this in a
90:45 - paragraph Just want to make the web page
90:47 - look a little nicer not that
90:50 - it
90:54 - and make sure this works so when I
90:56 - release this code okay great so now what
90:58 - I want to
90:59 - do is go to the next
91:03 - example and the other thing I want to do
91:07 - is in here I want to say text input from
91:11 - user and the next
91:17 - example I think it save yes ah I did it
91:20 - again
91:23 - I I shouldn't rename the
91:24 - folder uh and the next example I want
91:29 - to uh
91:33 - say actually I want to get rid of all
91:35 - this
91:42 - stuff one thing I should say by the way
91:44 - is of course you could do this with
91:45 - jQuery native JavaScript all sorts of
91:48 - other ways of manipulating Dom elements
91:50 - if anybody's interested in like
91:51 - recording my examples to using other
91:53 - Frameworks so people could compare and
91:54 - contrast that's great I'm using p5d
91:57 - because it's a really simple quick and
91:59 - accessible way to get up and running
92:00 - with da manipulation and it's part of
92:02 - the processing Foundation which is a pro
92:04 - uh p5js which is a project that I work
92:06 - on and like to support okay um okay I
92:10 - wonder how many people are watching this
92:12 - right now by the way 105 that's pretty
92:14 - great hello 105 people of the
92:18 - internet I just got to dive in here the
92:21 - last yeah so by the way I did a setting
92:23 - on YouTube that as soon as a live stream
92:26 - ends it immediately makes the video
92:28 - unlisted because I don't usually like to
92:31 - have it published then as an archive
92:33 - until been able to like clean it up or
92:35 - fix some stuff you know once I had like
92:37 - a password in it and I or something and
92:39 - got that out so um so anyway so that's
92:44 - why the archive is not there but it'll
92:46 - be at some point later today we'll get
92:48 - an archive of today up up there and
92:50 - it'll probably be um a new video cuz
92:52 - I'll have to stitch these two streams
92:54 - together but I am recording to disk and
92:56 - I am streaming and everything seems to
92:59 - be working so hopefully this is going to
93:01 - not freeze again I sent a report to I
93:04 - don't know whether it's wirecast or my
93:06 - computer or what
93:08 - but here we go okay so let me just see I
93:13 - think I have a little bit of a cold by
93:14 - the way
93:17 - um
93:19 - Okay
93:20 - so
93:22 - I am ready
93:28 - now
93:30 - okay printer cable blackout yes I like
93:34 - that some of you oh mention that okay U
93:36 - let me get the chat visible for myself
93:38 - again and here we go all right I don't
93:43 - know why I like having this little
93:45 - background instrumental the beginning of
93:46 - the video it makes me feel like I'm
93:48 - doing something here all right here we
93:51 - go
93:54 - [Applause]
94:00 - everybody hello welcome to another
94:03 - programming from a toz video tutorial
94:05 - and in this video tutorial I'm going to
94:07 - show you how to load a text from a file
94:09 - U into your web page and I'm going to
94:11 - use that for a lot of other examples and
94:13 - things that I'm going to do in later
94:14 - videos so um and I'm again I'm using the
94:17 - p5js uh framework so first of all let me
94:19 - just show you something that I have here
94:22 - I have a text file as part of my folder
94:24 - along with the index.html and the
94:26 - sketch. JS file obviously I could have
94:28 - subdirectories and do various things
94:30 - like that and this text file simply has
94:32 - a bunch of paragraphs of text from the
94:35 - uh Wikipedia page on uh rainbow the
94:37 - rainbow Wikipedia page so um the very
94:40 - first thing I can do uh that really
94:43 - makes it easy to load text is that I can
94:45 - write a function called preload and the
94:48 - preload function is actually an event
94:50 - that happens before setup is called so
94:53 - one of the goofy things about JavaScript
94:55 - is everything happens in this quote
94:56 - unquote asynchronous manner meaning you
94:58 - start loading a file then you start
95:00 - doing something else and you start doing
95:01 - something else and you try to do
95:03 - something that uses the file but maybe
95:04 - it's not loaded yet and in a moment I'm
95:05 - going to show you how to sequence this
95:07 - sort of stuff and maybe later I'll even
95:08 - show you more sophisticated ways to
95:10 - sequence this stuff but right now the
95:12 - easiest way is p5js says hey if you
95:14 - don't want to worry all about all
95:16 - that you can simply
95:20 - say load strings rainbow.
95:24 - txt into a global variable called txt
95:27 - that I've made up as long as I put that
95:29 - in preload by the time I get to setup
95:32 - and I can do stuff to the Dom of the
95:34 - page I know that that text will be
95:37 - loaded and so what I'm going to do here
95:38 - is just add in here console.log txt so
95:42 - we can see what is it that's coming out
95:43 - of the file which might be something
95:45 - that you don't
95:46 - expect so I'm going to do this and you
95:48 - can see here it is now weirdly enough
95:50 - you can see like like hey why is there
95:53 - this bracket there before there's a
95:55 - quote there seems to be some sort of and
95:57 - then there's like uh this here and then
95:59 - there's a comma and another quote there
96:00 - seems to be some sort of array here so
96:02 - let me do something to this file I'm
96:04 - going to go to rainbow. txt and I'm
96:06 - going to say
96:07 - rainbow unicorn
96:10 - blueberry uh you know what's good too is
96:12 - mango who doesn't
96:15 - love mangoes okay um so I'm going to
96:18 - change the text file to just have four
96:20 - lines in it and I'm going to refresh
96:22 - this page and now you can see more
96:24 - clearly what's happening so one of the
96:26 - things that load strings does for you
96:28 - which is often very convenient but not
96:30 - always so convenient is that it gives
96:32 - you a body of text as an array each
96:35 - element being the array being each line
96:38 - of text in the file so you know if you
96:39 - have some sort of like this can be very
96:42 - convenient if you have a text file of
96:43 - words like you might have a text file of
96:46 - words you're searching for and suddenly
96:47 - you have them all in an array when you
96:49 - load that text file that can be very
96:50 - convenient in our case
96:53 - here maybe what I want to do and I'm
96:55 - going to undo all this so I have my
96:57 - rainbow text back maybe what I want to
97:00 - do is just put all this text onto the
97:02 - web page and so uh I might want to say
97:05 - in my
97:06 - code
97:10 - uh create P like make a paragraph with
97:14 - that text now let's see what
97:16 - happens weirdly
97:19 - enough I love sometimes you just got
97:21 - love JavaScript and libraries like p5js
97:23 - it like figured out something to do it
97:26 - took the array and it just like made a
97:28 - paragraph out of the entire all the
97:29 - things in the array and I think it
97:31 - actually got everything but um another
97:33 - thing that I could do is I could use a
97:35 - function called join which takes all the
97:37 - elements of the array and joins them
97:39 - together and I could actually join them
97:42 - with a br tag in between them so you can
97:45 - see now if I say join everything in that
97:48 - array and put a br tag and I think I'm
97:50 - probably supposed to type it like this
97:52 - as a self-closing tag um then what
97:55 - you'll see here if I refresh it is now I
97:57 - actually am maintaining the line breaks
97:59 - from that file in terms of rendering the
98:01 - stuff from that text file on the web
98:03 - page so this is a very quick and easy
98:05 - way to pull in a text file and display
98:08 - that on the page so I'm going to use
98:10 - this in later examples you could think
98:12 - of things you might want to do like chop
98:13 - up the text file count all the words in
98:15 - it analyze it that sort of thing load
98:17 - multiple text files you can call load
98:19 - strings multiple times but there's two
98:21 - more things I need to show you in this
98:22 - video number one is you don't always
98:24 - just want to like load the file and
98:26 - preload you might want to only load the
98:27 - file when the user clicks a button or
98:29 - something like that and number two is
98:31 - you might want the user to be able to
98:32 - submit an actual text file and I'm going
98:34 - to show you how to do that as well
98:37 - okay um someone in the chat actually by
98:39 - the way asked how does one do CSV files
98:42 - so you could actually load a CSV which
98:44 - is a comma separated values file which
98:46 - is like a um spreadsheet so to speak and
98:49 - then parse it and you split and chop it
98:51 - up VI your commas and I might show you
98:53 - how to do that in another video but
98:54 - there is actually a p5js function called
98:56 - load table which knows how to load a CSV
98:59 - file and something called a table F
99:01 - object that you can Traverse and iterate
99:03 - over as if it's a with spreadsheet like
99:04 - functionality but that's for another
99:06 - time uh okay um so now let me get rid of
99:11 - preload and what I'm going to do is I'm
99:13 - going to go to uh my HTML file and I'm
99:16 - going to add a
99:19 - button and I'm going to call this button
99:21 - uh give it an ID called load file and
99:24 - load a rainbow
99:28 - text and now we can see if I go to the
99:30 - web page we should see I have a button
99:33 - called load rainbow
99:35 - text and if I go to the sketch what I
99:38 - want to do now is
99:40 - first I want to access that
99:43 - button via its ID so I select it from
99:47 - the page now I have a variable that
99:49 - knows about that button and then I can
99:51 - say button. mous
99:54 - pressed and I can reference a function I
99:57 - can say load I can write a function
99:59 - called load file so now I can write that
100:02 - function
100:05 - here shoot is that coming through God
100:09 - I've got to turn that off getting phone
100:11 - calls in the middle of these
100:12 - tutorials okay um that can be edited out
100:16 - I don't really care um so now I've
100:17 - written a function called load file and
100:19 - what I want to do in that function is
100:21 - called load strings on that file name
100:24 - here's the issue though now that I'm not
100:27 - using preload I can no longer just set
100:30 - the result of load strings to a variable
100:32 - what I need to have now is a call back
100:35 - so I'm going to say load this text file
100:38 - and then I'm going to make a function
100:40 - called file loaded file loaded and that
100:44 - function I'm going to oops I'm just
100:46 - going to write it up
100:48 - here is going to be the function
100:51 - that is triggered when the text file is
100:54 - ready so there's a whole sequence
100:55 - Happening Here I press the button on the
100:57 - mouse load file happens I call load
101:00 - strings when the text is ready I call
101:03 - file loaded and what comes in there data
101:06 - I give this function an argument I'm
101:08 - going to call it data I could call it
101:09 - text I could call it anything and what I
101:11 - can do now is I can say text oops whoa
101:16 - text equals data so what I'm doing is
101:18 - I'm saying when the file is loaded the
101:20 - AR to this function is filled with the
101:22 - stuff that's in that file I can set it
101:24 - equal to my Global variable but I
101:27 - actually don't really even need the
101:28 - global variable anymore it sort of
101:30 - depends what I'm doing here but what I'm
101:32 - going to do is instead whoops I'm going
101:35 - to get rid of this Global variable and
101:37 - what I'm going to do is I'm going to
101:38 - take this and I'm just going to put it
101:40 - in here and I'm going to say data so I'm
101:43 - going to create that paragraph when the
101:45 - text is ready so I'm setting up now a
101:47 - sketch when I run the sketch nothing
101:50 - happens but as soon as I say this I load
101:52 - that text and it appears on the page so
101:54 - this is how you can sequence the loading
101:56 - of data from a file and obviously again
101:59 - what can you do that's more interesting
102:00 - than just display that exact text back
102:02 - to you or might you have different
102:04 - buttons for different text like choose
102:06 - your own source text for this web
102:07 - application that you're making that type
102:09 - of thing Okay so we've seen almost
102:12 - everything now I have one more piece of
102:15 - this what if instead of loading text
102:18 - from a file I want the user to be able
102:22 - to um I want the user to be able to
102:25 - select a file themselves so here's how I
102:30 - can do that I can add to setup I can say
102:35 - create file input I'm just going to put
102:37 - that there with nothing else just to see
102:40 - that this does something and I'm going
102:42 - to do this and you can see look at this
102:44 - I now by default this just that create
102:46 - file input has created this whole choose
102:49 - file no file chosen button thing on the
102:52 - page so I'm getting a lot of
102:54 - functionality from the web browser for
102:55 - free and of course I could style this
102:58 - differently I could change probably what
102:59 - it says there instead of choose file I
103:01 - could do a lot of custom stuff but I'm
103:03 - using the basic raw default Behavior so
103:07 - when I press choose file it opens up a
103:09 - file menu for me and I could you know go
103:12 - here and I could actually go and browse
103:14 - and find you know my rainbow. txt file
103:18 - and select it and you can see there it
103:21 - is
103:22 - now nothing happened so what I need to
103:25 - do is I need to set up a call back for
103:28 - when the user selects a file and there's
103:30 - some complications here because what if
103:32 - the user selects an image file what if
103:35 - they select a text file what if they
103:37 - select a um you know a some other kind
103:41 - of file that I can't think of right now
103:44 - so I might have to handle different
103:45 - kinds of files differently or do some
103:46 - error checking and that type of thing
103:48 - but basically I know that I need a call
103:50 - back
103:51 - so let's go and add a call back create
103:54 - file input and I'm going to say I'm
103:56 - going to say file
103:58 - selected so I'm going to write a
104:00 - function now called file selected and I
104:04 - assume that file is going to get some
104:05 - argument that function is going to get
104:07 - some AR an argument and I don't know
104:09 - what's going to be there I could look up
104:11 - in the documentation so I'm just going
104:12 - to write console.log
104:16 - file now I'm going to run this and I'm
104:18 - going to go back and I'm going to select
104:19 - that rainbow file and you can see ah
104:21 - look at this what did I get I get a P5
104:25 - file object so there are lots of things
104:28 - here that I get I have what kind of file
104:31 - is it it has a type and a subtype what's
104:33 - the name uh how big is it so what that
104:37 - sort of thing so number one thing that I
104:38 - can do here is I can just
104:41 - say
104:44 - whoops thing I could say something like
104:46 - create P you know file. name
104:51 - plus file.
104:53 - size plus file. type so right now I'm
104:57 - going to create a um I could create a
105:00 - paragraph element with stuff uh stuff
105:04 - about that particular file so if I
105:05 - refresh the page I select that file you
105:09 - can see ah I got rainbow. txt let me
105:12 - make this a little bit bigger so you can
105:13 - see it it's got 12,000 some bytes in it
105:16 - that's way too big uh and it's a text
105:18 - file I could uh you know select my HTML
105:21 - file it's still a text file I could look
105:23 - at the subtype um I could try to get I I
105:25 - feel like there must be an image file
105:27 - somewhere on this computer but I don't
105:29 - I'm not going to bother to look for it
105:30 - I'll I'll let you experiment with that
105:31 - yourself so you can see I can have the
105:34 - browser I can have my code know about
105:36 - the file that the user selected and even
105:39 - better I can get access to the contents
105:41 - of that file and the way that I do that
105:44 - whoops what did I just what did I click
105:48 - here ah no stop
105:51 - there sorry um I can uh oops I'm in the
105:54 - I
105:56 - lost uh I want to show you other stuff
105:59 - about the developer tools later but I
106:00 - got lost in there so what I want to do
106:02 - now is reproduce the contents of that
106:04 - file and I'm going to say uh right here
106:09 - create
106:10 - p uh file Dot and I think it's file. dat
106:14 - I believe the actual contents of the
106:16 - file is in file.
106:17 - dat so I'm going to do choose file I'm
106:20 - pick this and you can see there it is
106:22 - here's all the contents there now I'm
106:25 - not it's not coming in as an array so I
106:28 - don't have the line breaks I could do a
106:29 - replace to put BR tags in it I'm not
106:31 - going to worry about all that right now
106:33 - ultimately I I now have the user able to
106:35 - select a text file that I can process
106:37 - and return something back to the user um
106:40 - the other thing that I will mention here
106:43 - is that I might want to protect and say
106:46 - hey only if file. type equals text
106:52 - then create that
106:54 - paragraph
106:56 - otherwise say I I need a text file so
107:02 - here with a little bit if statement I
107:05 - can add some error checking here so if I
107:07 - run this again and I say choose file and
107:10 - I go uh somewhere on this computer under
107:13 - applications and I I don't know I try to
107:17 - get this chess application and I select
107:19 - that it could say look here's this giant
107:22 - application but I need a text file so
107:24 - you can you can do some sort of error
107:26 - checking in that sort of thing uh with
107:29 - um with with in your code as well now
107:33 - there's two more things about this
107:35 - probably more than two there if you look
107:37 - in the documentation there is a way to
107:40 - allow and I'm going to look this up for
107:42 - you right now uh create file input p5js
107:46 - hopefully this is going to bring me to
107:48 - that page um it did not so I'm going to
107:51 - find it myself I'm going to go to P5 js.
107:55 - org I'm going to go to libraries I'm
107:57 - going to go to P5 Dom and I'm going to
108:00 - look for create file
108:02 - input um there is a second argument
108:06 - which if you add allows the user to
108:08 - select multiple files and you have to
108:10 - handle those a little bit differently
108:12 - maybe I'll you'll see this in some of my
108:13 - examples or maybe I'll come back to this
108:15 - in a future video so if you want the
108:17 - user to be able to select multiple files
108:19 - take a look at this that's there for you
108:21 - and the other thing that I'll show you
108:23 - is that you can have um a user uh you
108:27 - instead of having the user have to
108:28 - select the file you can actually also
108:30 - have a
108:32 - user uh uh able to just take a text file
108:37 - and drag it into the browser drop it in
108:39 - the browser and have your program
108:41 - process that file and geez why is my
108:44 - phone ringing incessantly I turn that
108:47 - off hold on I'm turning on airplane mode
108:50 - uh okay um
108:53 - so um if you want to learn how to do
108:56 - that I'm going to publish examples that
108:58 - go along with the a toz course that have
109:00 - that in it but I've already made a video
109:02 - tutorial about drag and dropping a file
109:04 - into the browser so uh I'm just going to
109:06 - Google drag in drop shiftman YouTube and
109:09 - I'm sure this video is going to come up
109:11 - right now uh so I'm going to reference
109:13 - you you'll find a link to this video in
109:14 - this video's description and probably
109:15 - some kind of pop-up thing happening
109:17 - right now if you want to take a look at
109:18 - that you can go ahead and watch the drag
109:20 - and drop a file video tutorial to see
109:22 - how that works all right uh thanks very
109:25 - much for watching this concludes the
109:27 - sequence of videos about how to get text
109:28 - from the
109:32 - user okay
109:35 - um we're
109:37 - doing kind of okay here
109:41 - 12:15 I'm not getting to everything I
109:43 - wanted to get to but I'm I mean I'm
109:44 - going to get to everything I wanted to
109:46 - get to this is taking longer than I
109:47 - wanted I need to go get a drink of water
109:50 - um this I this is actually coffee today
109:53 - because I'm a little bit on California
109:56 - time I usually don't like to drink
109:58 - coffee with these live streams because I
110:00 - like to have some like tea or something
110:02 - K mil tea because I'm already kind of
110:04 - tum manic
110:05 - already um okay so um what I want to do
110:10 - next is cover the string object a bit
110:14 - about that in JavaScript I'm going to do
110:16 - a video about that and then I am going
110:19 - to
110:20 - um do a coding
110:23 - challenge but I need to take a break and
110:25 - get a drink of water so you'll have to
110:26 - bear with me oh by the way in the chat
110:28 - are you guys actually hearing that
110:29 - telephone ringing sound I'm just curious
110:31 - I don't know if you are
110:35 - um breakout would be a great coding
110:37 - challenge that I would like to do at
110:38 - some point uh you know the the quick the
110:41 - old retro game stuff gets the most views
110:43 - of anything that I do
110:46 - um uh we are not yes some people are
110:48 - saying they hear it some people saying
110:49 - they could couldn't okay so I probably
110:51 - shouldn't mention it yes we are
110:57 - the that's my iPhone IOS phone ringing
111:01 - thing okay I'll be right back um I'll
111:04 - give you guys some I I need the this dot
111:06 - here uh
111:09 - SoundCloud Daniel oh I might not have
111:12 - set this up so you can hear this uh
111:15 - let's
111:18 - see
111:25 - can you guys hear
111:28 - that I think you
111:32 - can I'll be
111:36 - back just taking a break I'm a live mic
111:48 - here
113:14 - okay I'm back oh it's playing something
113:17 - else now okay uh okay so what I need to
113:21 - do now uh where am I in my syllabus page
113:25 - I talked about load strings preload load
113:27 - strings in a call back user selected
113:29 - files the Drop
113:31 - Zone and text oh I didn't talk about
113:34 - content editable but that's in yeah
113:37 - that's come back to
113:39 - that uh you can find that that's that's
113:42 - by the way there's another thing you
113:43 - could use is a Content editable instead
113:46 - of a text area which I should mention
113:49 - maybe I'll mention that and now I want
113:50 - to talk about
113:51 - strings
113:54 - so index of
113:58 - substring so um I am going I'm going to
114:03 - make a list for myself here
114:10 - of of string functionality I want to
114:15 - cover
114:18 - and
114:20 - I should really invest in some like I
114:22 - don't know some super high te bright
114:25 - dark really good whiteboard markers
114:27 - anybody have any recommendations let me
114:29 - know these like sort of work but after I
114:30 - use them for a couple days they get and
114:32 - these I bought for like five bucks at a
114:34 - pharmacy or something um okay uh index
114:42 - of
114:45 - substring what else is in my list here
114:49 - uh
114:50 - um index of substring length is
114:58 - important length uh
115:02 - split
115:06 - um ah I see
115:10 - okay that's it
115:13 - enjoying
115:18 - okay
115:23 - okay build a Smartboard as a coding
115:25 - challenge great suggestion uh you know
115:29 - what would be what would really work
115:30 - well for me is if I had like a full
115:32 - extra day each week where I could just
115:34 - come here and work on my setup but oh
115:37 - sound effects are not working I'm not
115:39 - playing any sound
115:41 - effects ah they aren't
115:44 - working uh
115:47 - um oh that's funny I think I I probably
115:50 - played a whole bunch of sound effects
115:51 - you guys couldn't hear it's because I
115:53 - didn't set up
115:54 - AirPlay uh from this this is really not
115:57 - worth me wasting a lot of time on but
115:59 - I'm going to do it real
116:06 - quick okay that
116:10 - should get the sound effects going
116:15 - again did you guys just hear that
116:18 - one
116:20 - full screen
116:22 - this let me see if this is working
116:26 - [Applause]
116:27 - uh
116:30 - okay no my shirt the back of my shirt is
116:34 - not dirty it is a processing
116:39 - sketch okay this is the output the
116:42 - processing output of the code that's on
116:45 - my shirt it's very faded this is like a
116:47 - retro processing t-shirt quite quite a
116:49 - while in time and I I wanted to wear my
116:51 - coating rainbow t-shirt but it has a
116:52 - green stripe in it I feel like it just
116:54 - makes everybody crazy that the shirt
116:55 - appears seethrough so another time okay
116:59 - uh all right cutting power cutting
117:06 - power um here we go so I am going to
117:10 - look
117:11 - at strings in JavaScript okay so let me
117:15 - get myself set up here uh with another
117:19 - uh
117:20 - example load
117:23 - file uh
117:27 - strings and uh let me set up this
117:31 - example to do something I don't need the
117:34 - text file in this
117:37 - one uh I don't need the
117:45 - um I don't uh I want to have something
117:49 - like
117:51 - this
117:56 - uh
118:01 - uh so I want to have
118:04 - output I want to
118:06 - have
118:11 - input
118:18 - uh
118:21 - I know unicorns in
118:25 - rainbows I live in a Land of
118:28 - unicorns and
118:31 - rainbows
118:36 - uh
118:38 - submit let's see here if I go
118:42 - to
118:44 - here uh
118:46 - strings whoops that didn't work
118:58 - um how do I change the width of
119:05 - uh no anybody know off the top of your
119:09 - head I'm trying to do this input element
119:11 - in HTML how do I change the width like
119:14 - how many how wide it is
119:17 - uh um
119:26 - character
119:27 - with uh input size oh it's an attribute
119:32 - size equals I think it's the number of
119:34 - characters so like 500 will be an insane
119:37 - amount yeah so I just want to make it
119:39 - like
119:43 - 100
119:47 - uh there we we go so that works
119:51 - um uh yeah uh okay
119:59 - um okay uh I want to get rid of
120:07 - this oh sketch all right
120:17 - okay uh
120:21 - uh
120:22 - txt uh I
120:26 - don't
120:28 - um sorry everybody I'm
120:32 - just
120:35 - uh and output is output submit is submit
120:39 - new
120:40 - text just want to have a
120:44 - basic thing set
120:47 - up that I can do stuff to text okay
120:55 - um okay let's see here I feel like I'm
120:58 - kind of blurry today am I blurry today I
121:01 - never I don't I never Focus the camera I
121:04 - don't have time to that kind of stuff
121:05 - just got to get through this stuff okay
121:07 - so and now the so here's my
121:10 - example here is where this material is
121:13 - coming
121:14 - from uh here's the rainbow Wikipedia
121:16 - page p5js reference going to go here and
121:21 - then I also want to look
121:25 - at this page there we
121:30 - go
121:33 - and this is like a little
121:36 - tutorial which is good but I want the
121:41 - um feel like there's a reference page
121:44 - which I
121:48 - want
121:51 - or maybe it's just because I have the
121:53 - window ah there we go so here okay
121:58 - great I'm running out of steam here
122:03 - everybody okay so two more two more
122:06 - things I want to do today to complete
122:08 - this
122:09 - week one is a quick video about
122:12 - JavaScript string object there's no way
122:14 - for me to focus this without another
122:17 - person so I'm not going to bother
122:19 - worrying about it although I could put
122:20 - like a picture of myself here and I
122:22 - could focus on that I think if I step
122:24 - closer I'm more in Focus which is
122:26 - generally where I'm standing anyway uh I
122:28 - want to do this tutorial about
122:29 - JavaScript strings I didn't get that
122:31 - stupid glass of water I went to go pee
122:34 - and I forgot to get a glass of water
122:35 - hold on a
122:37 - second I'll be right
122:41 - back I'm gonna play you the uh coding
122:44 - Rainbow theme song you a preview of just
122:46 - the theme song since you're being so
122:49 - uh where is
122:52 - it maybe I don't have it
122:57 - local I thought I had it oh wait wait I
122:59 - have it it's just not uh never mind
123:02 - we'll get the
123:04 - instrumental
123:09 - hello something goofy is happen but I'll
123:12 - be right
123:17 - back
123:59 - okay here we am
124:02 - water this is going to make everything
124:06 - better okay here we
124:08 - go and I have over here my list boy you
124:12 - can barely read that
124:15 - but say
124:17 - lovey okay
124:24 - okay all
124:26 - [Music]
124:28 - right hello welcome to another
124:31 - programming from A to Z video tutorial
124:34 - in this video I want to look at how the
124:36 - string object in JavaScript so what is
124:39 - the String object in JavaScript if I say
124:41 - vars equals hello I have now made a
124:45 - string object although there's some
124:47 - weirdness up wait time out time out I
124:49 - just thought of something isn't there
124:51 - something where uh
124:59 - I
125:01 - oops there's a weird sort of thing where
125:07 - technically it's not an object until I
125:10 - do
125:13 - this um but it kind of lets you do all
125:16 - the object stuff anyway I think I don't
125:18 - need to get into to that in the video it
125:19 - just sort of like popped into my head uh
125:23 - yeah someday I'll start using es6 stuff
125:25 - but I'm just not ready for that it's not
125:28 - until PE until it's sort of like till
125:30 - somebody tells me that I really I'm just
125:32 - not ready for that barely I barely can
125:35 - keep going right now like my mind is
125:36 - melted but I'm I'm going to do it okay
125:39 - uh how do I clear the console that does
125:42 - not work I thought there was a way maybe
125:44 - it's this ah there we go that button
125:47 - okay try this
125:50 - again uh okay here we
125:56 - go hello and welcome to another
125:58 - programming from a toz video tutorial in
126:00 - this video tutorial I want to talk about
126:02 - the JavaScript string
126:05 - object um so what is the JavaScript
126:07 - string object well if you've ever
126:08 - written code like this bars equals
126:11 - hello now I have a variable and it has a
126:14 - string of characters a sequence of
126:17 - characters in it h e l l o this is a
126:19 - string object so on the one hand I can
126:22 - use this string object to put text in a
126:25 - Dom element I can use it to paint text
126:27 - onto a canvas I can use it to print text
126:29 - to the console but what I'm going to be
126:32 - doing in future videos is manipulate
126:35 - string objects so if I load all the text
126:37 - from a file and I have this big string
126:39 - object with all paragraphs and
126:41 - paragraphs about rainbows and I want to
126:43 - like chop it up and mix it up or analyze
126:46 - it or make poetry out of it I need to
126:48 - learn how to manipulate string objects
126:50 - in JavaScript so this is what I want to
126:52 - look at the basics of and then next week
126:54 - or in the next videos that you might see
126:56 - in the future that might already be
126:57 - there I'm going to look at something
126:59 - called regular Expressions which is
127:00 - really going
127:04 - to uh just like explode the possible
127:07 - things you could do with um text and uh
127:10 - JavaScript but for right now we're going
127:12 - to live with just the string object
127:14 - itself and so if you want to learn about
127:17 - all the possible things you can do with
127:18 - string objects um the place that you I I
127:22 - would say that you can go to is the um
127:24 - Milla document the Billa uh document
127:28 - JavaScript documentation look under
127:30 - reference global object string I'll
127:32 - include a link to this page in this
127:34 - video tutorial and you can see ah
127:36 - there's like a nice little tutorial here
127:37 - that kind of runs through a lot of stuff
127:39 - you can see all of these functions that
127:41 - you could call on strings like index of
127:44 - and normalize and repeat and slice and
127:46 - strike and blah blah blah so I'm not
127:47 - going to go over all of this with you
127:49 - I'm going to give you a little bit of a
127:51 - kind of like weade into the Waters of
127:53 - manipulating string objects you can also
127:55 - find my notes on this on um this
127:57 - particular web page the a toz
127:59 - programming website which uh I'll also
128:01 - link to this page in this video tutorial
128:03 - so I made a list over here on the
128:05 - Whiteboard of things that I want to look
128:07 - at um in this video so I'm going to look
128:09 - at
128:11 - um uh really just three pieces of
128:14 - functionality that have to do with
128:15 - strings a long list of the Milla
128:17 - documentation there's a lot of other
128:18 - ones that I encourage you to investigate
128:20 - and play with but three that I find
128:21 - useful to some things that I might do
128:24 - one is index of another is substring uh
128:27 - the length property of strings is
128:28 - something that you need quite often and
128:31 - then I want to also look at splitting
128:32 - and joining which are operations that
128:34 - I'm going to be doing continuously
128:36 - throughout many uh tutorials and
128:38 - examples in this video series there's a
128:41 - little bit of funny business about this
128:44 - that I have to uh get to and talk about
128:46 - at some point but I'm not going to right
128:47 - now okay so this is my list let's start
128:49 - let's just start like let's go in
128:50 - reverse order or some sort of strange
128:52 - other order let's talk about length so I
128:55 - have a uh example set up already uh
128:58 - right here that you can see first of all
129:00 - I can just say s. length right here I
129:03 - should just be doing all this in the
129:04 - console really if I say s. length you
129:06 - can see I get a length of five because
129:08 - hello has five characters h e l l o
129:12 - let's just look at how we would do this
129:13 - in code right I have a simple sketch
129:16 - which all it does right now is it has a
129:18 - text input box when I hit submit I
129:19 - create a paragraph element with that
129:21 - text input box I can go to my code and
129:24 - one thing I can do is I can say I'm just
129:27 - going to say VAR s equals text
129:30 - field. Val so this is pulling what's in
129:33 - that text field and placing it into a
129:36 - string object and now I'm going to say
129:39 - uh create ps. length so now when I run
129:43 - this code again you can see that text
129:46 - has 42 characters so if you want to
129:48 - build a check to see if your text can
129:50 - fit into a tweet application you can see
129:52 - how oh if it's greater than 140
129:53 - characters you know spit out this is too
129:56 - long to tweet or whatever so you can see
129:58 - that's one property we can use now
130:00 - here's another property here's another
130:02 - function that's really useful index of
130:06 - so let's say I say VAR s equals
130:10 - hello
130:12 - whoops and I say s index of rainbow what
130:17 - am I going to
130:19 - again1 index of is a function that
130:22 - searches for some text like rainbow in
130:25 - some other text S I'm looking for
130:28 - Rainbow in the text hello well rainbow
130:31 - doesn't exist in the text hello so what
130:34 - do I get negative one negative one means
130:37 - I can't find that subring in that larger
130:40 - string so this can be quite useful to
130:42 - you if a user types in some text and you
130:44 - want to figure out did they type in this
130:46 - word or search for a word in that piece
130:47 - of text now what else how what does it
130:50 - work how does it work if that text is
130:53 - actually there so let's look at that so
130:54 - let's actually add
130:56 - this so I'm going to say um VAR index
131:02 - equals s. index of
131:05 - rainbow and then I'm going to say create
131:07 - P index so I'm going to run this again
131:11 - and now I'm going to hit submit and I
131:12 - got 33 why did I get 33 well I'm going
131:15 - to say rainbow rainbow rainbow rainbow
131:17 - rainbow rainbow rainbow rainbow rainbow
131:19 - rainbow rainbow rainbow rainbow rainbow
131:22 - okay and now I'm going to hit submit and
131:23 - you can see I got zero so what is it
131:25 - doing I'm going to say zero 0 1 2 3 4
131:30 - rainbow I got five so what index of is
131:34 - doing is it's saying hey this is the
131:36 - index of the substring you're searching
131:39 - for 0 1 2 3 4 rainbow starts at index
131:43 - number index five so this can be really
131:46 - this seems sort of like trivial and
131:48 - silly right now but you might load a
131:50 - massive amount of text in and you might
131:52 - want to find where something and this
131:54 - can be good for scraping and parsing ah
131:56 - I want to find stuff that's in between
131:58 - this so I have to find this and where's
131:59 - that and then I want to find something
132:01 - else and then I'm going to use another
132:02 - function I'm going to show you substring
132:03 - to plug something in between so you can
132:05 - see this is what index of does um so
132:09 - let's look at
132:11 - um actually that's fine right now I'm
132:13 - going to leave it at that oh one thing I
132:15 - should mention though is what about the
132:16 - case where I said rainbow
132:18 - rainbow boy do I love rainbows right in
132:23 - this case I always get
132:25 - zero how and but there's only one
132:28 - instance of it's always giving me the
132:30 - first rainbow but look what I can do
132:32 - what if here I say index of um and hold
132:36 - on um let's put this one thing I want to
132:39 - do is sorry I'm GNA put this as the
132:41 - default
132:43 - text in the text box and then here I'm
132:46 - in index of I'm going to do something
132:47 - weird where I'm just going to say comma
132:50 - 10 and I'm going to hit submit and look
132:52 - I got
132:54 - 30 why did I get 30 let me take out that
132:56 - comma
132:58 - 10 I got zero so here's here's something
133:04 - that the index of allows you to do it
133:06 - allows you to say search for the first
133:08 - instance of rainbow after a certain
133:11 - index so by default it'll start
133:13 - searching from zero but here I'm saying
133:15 - just start searching from the 10th
133:16 - character so here's what difficult
133:18 - programming exercise for you write an
133:20 - algorithm that searches using index of
133:22 - for every instance of rainbow so find
133:24 - the first one then search for the next
133:26 - one after the first one then search for
133:28 - the next one after that one and keep
133:30 - doing that until you get a negative one
133:32 - maybe I'll try to post a solution to
133:33 - that or make that as a coding challenge
133:35 - but that's something that you could try
133:36 - to do
133:37 - okay that's index up one more function
133:40 - that I want to show you in this
133:42 - particular video that I think would be
133:43 - useful to you is
133:44 - substring so what I'm going to do now
133:48 - is I'm going to
133:51 - say VAR new text equals s.
133:56 - substring uh 5 comma
133:59 - 7 and I'm going to run this if it's
134:02 - submit oh uh index is not
134:05 - defined uh create piece sorry new text
134:08 - run this again you can see I get oow why
134:13 - because 0 1 2 3 4 five five is the O I
134:18 - want a substring starting at five and
134:20 - where do I want it to end six
134:24 - whoops o w67 oh it's ending on a space
134:28 - bad coincidence there so let me change
134:30 - this and change this to um actually I'll
134:33 - just change the text so I'm going to
134:36 - take out the spaces am I going to get
134:39 - o or am I going to get just o w think to
134:42 - yourself what's it going to be I still
134:45 - get o so this is a little goofy thing
134:47 - with some substring but let's say I have
134:49 - the text h e l l o 0 1 2 3 four if I say
134:57 - substring between one and four I'm
134:59 - including one but I'm excluding four so
135:03 - I'm just getting L there so this is how
135:06 - substring works you might ask yourself
135:08 - well that's annoying that's weird why is
135:09 - it done that way there's actually a
135:11 - pretty good reason which is number one
135:13 - what's the length of this string three
135:16 - substring three what's four - 1 3 and
135:19 - often something you want to do is get a
135:21 - substring from some point of the text to
135:24 - the end of the text and in that case all
135:26 - I need to do is say give me a substring
135:29 - and here's something I could do I could
135:31 - say substring from s. length divided by
135:35 - two all the way until the end s. length
135:39 - so this is now my code right give me a
135:41 - substring between the middle of the
135:43 - string and the end of the
135:46 - string you can see do I love Rainbow do
135:48 - I love rainbows there is an answer to
135:51 - this question I don't have a sound
135:53 - effect or anything but the answer is I
135:55 - think you know it's yes okay so uh um do
135:58 - I love rainbows yes so you can see no
136:00 - matter what I this is the first half
136:04 - this is the second half and I hit submit
136:07 - and look at that that's amazing I got
136:09 - this somehow those worked out to be the
136:11 - exact number of characters I don't see
136:12 - how that's possible but it did uh this
136:14 - is the second half you can see how that
136:16 - works I'm getting a substring of the
136:17 - second half so you can think of a lot of
136:19 - here's an exercise for you um what if
136:22 - you have something like
136:24 - this the
136:27 - temperature outside is
136:32 - 72°
136:34 - f write an algorithm that pulls out the
136:37 - number 72 without knowing that it's
136:40 - going to be the number of 72 so no
136:41 - matter what I type
136:43 - here every time I hit submit I get 72 21
136:47 - 50 how do you search for and and by the
136:50 - way also I could change this to a
136:52 - temperature or well the temperature
136:54 - outside is so it's not a fixed length
136:56 - how do you search for where is colon
136:59 - space is so that you know where the
137:01 - number starts and how do you search for
137:03 - where space degrees is so you know where
137:05 - the number ends and by the way it should
137:07 - still also work if I type in 101 so
137:09 - that's a programming exercise for you
137:11 - create a generic phrase of any length
137:13 - that and you need to pull out a subset
137:15 - of text of any of length out out of that
137:18 - phrase um this is just one scenario this
137:20 - has and by the way next week when I do a
137:23 - video tutorial about regular Expressions
137:24 - you're going to see a a totally other
137:26 - magical
137:28 - powerful power way of doing it okay so
137:32 - um this is the end of this uh video
137:34 - tutorial about strings there's all sorts
137:36 - of other things that I've missed this is
137:38 - just a small taste of it try some of
137:40 - those exercises try looking at the
137:42 - documentation page you know pick a
137:44 - random uh function like slice or search
137:47 - and see what a lot of these might
137:48 - require regular Expressions um and see
137:51 - what you get ah I forgot something on my
137:53 - list over
137:55 - here I want to briefly talk about
137:57 - briefly before I leave you in this video
137:59 - I want to talk about splitting and
138:00 - joining so let's just look at this this
138:02 - is an incredibly common operation that I
138:05 - need in so many videos and I could make
138:07 - another video about it but I'm going to
138:09 - leave it in this one so let's look at
138:11 - this because and and I'm going to get to
138:12 - more about this next week with regular
138:14 - Expressions so this is just a little bit
138:15 - of a so I'm going to use so
138:19 - I'm going to use right
138:21 - now there two functions that are part of
138:25 - the P I'm going to show you two
138:26 - functions that are three functions
138:28 - really that are part of the p5js library
138:31 - one is split one is split tokens and one
138:34 - is
138:35 - join now next week I'm going to show you
138:38 - how to use the native JavaScript split
138:40 - function to use regular expression so
138:42 - I'm going to kind of redo this but in
138:43 - this video I'm going to look at the p5js
138:45 - function split and show you why this is
138:47 - so
138:48 - useful all almost all of the text
138:51 - analysis algorithms that I'm going to
138:54 - demonstrate later are based on word
138:56 - counting and one of the things you need
138:57 - to do with word counting is split a
139:01 - paragraph of text and a multiple
139:03 - paragraphs of text into sentence chunks
139:06 - into word chunks that sort of thing so
139:09 - um I'm going to do that right I'm going
139:10 - to show you how to do that with split
139:12 - and it's actually quite an easy
139:14 - operation so um basically
139:19 - I'm going uh and I'm just going to go to
139:20 - the uh sketch right here um whoops
139:24 - there's a a a something whoops just
139:27 - missing here so I'm going to leave this
139:29 - this this this gives you half the text
139:31 - but I'm just going to do something over
139:33 - here in the console which is vars equals
139:36 - uh text field.
139:38 - value so now I have in the variable s
139:41 - rainbow rainbow boy do I love
139:44 - rainbows and I'm going to say split s
139:48 - just see what I get so look at that I
139:50 - say split s on its own I don't really
139:52 - split it but I get an array and I get an
139:54 - array with the entire sentence in there
139:56 - the whole point of splitting text is to
139:58 - take one chunk of text and split it into
140:01 - an array so what if I say s and comma
140:06 - space in quotes you can see now look
140:09 - what I have I have an array with each
140:12 - word as a separate
140:15 - element so I'm going to do a few things
140:17 - I'm actually going
140:19 - to do that right now in my code I'm
140:22 - going to say VAR words equals
140:25 - split s by space and then I can Loop
140:32 - through all of the
140:35 - words and do something with them
140:37 - individually I can say uh create P words
140:41 - index I so now you can see I get a
140:44 - different paragraph element for every
140:46 - word in there
140:47 - now let me add a comma in here and I'm
140:50 - going to hit uh I'm going to hit refresh
140:52 - and I'm going to add a comma in here
140:54 - notice how the first word has a comma H
140:58 - so what might I do in this case I might
141:01 - go to my code and I might say Okay split
141:03 - by space comma or comma
141:07 - space now look what happens I'm going to
141:09 - add the comma in there I'm going to hit
141:11 - submit now I just got two things rainbow
141:15 - and rainbow boy do I love rainbows cuz
141:17 - split by comma space and the only time a
141:19 - comma space appears is Rainbow comma
141:21 - space what I want to do is not say split
141:24 - by comma space split by comma or space
141:27 - and again a regular expression is going
141:28 - to be a nice solution to that but for
141:30 - right now without it there's a p5js
141:32 - function called split tokens and if
141:34 - instead of using split use split tokens
141:36 - it'll actually do that for you so I'm
141:38 - going to do this I'm going to put the
141:39 - comma in there I'm hit submit and you
141:40 - can see now it worked there's ways of
141:42 - retaining the delimiters not retaining
141:44 - the delimiters I'm going to show you
141:46 - more stuff about that uh in a future
141:48 - video but these are just the basic idea
141:51 - split split tokens and join by the way
141:54 - does the absolute inverse so one thing I
141:56 - can do is I could say I could now say
141:59 - words. uh sort I think it'll sort it in
142:03 - Array I think it'll sort it by the
142:05 - default sorting and then I could say uh
142:09 - uh s equals um join words and I think I
142:15 - probably might make a new array so say
142:17 - words equals words. Source sort and then
142:20 - I can say create PS and I'm going to
142:23 - comment this out so what I'm doing now
142:26 - is I'm taking this turning it into an
142:28 - array sorting it in alphabetical order
142:30 - putting it back together and then
142:32 - displaying it and you can see boy do I
142:34 - love rainbow rainbow rainbows and we can
142:37 - see this should be in alphabetical
142:41 - order alphabetical be in order should
142:44 - this so you can see here's a quick
142:45 - algorithm I've done something here here
142:47 - to take a a sentence split it up sort it
142:50 - by alphabetical order and display it
142:52 - back to the user I'm sure you could
142:53 - think of something much more creative to
142:55 - do with this Paradigm of text input and
142:57 - text output and in the next video I'm
142:59 - going to show you uh do a coding
143:01 - challenge about how to implement Jackson
143:03 - mclo dastic uh which I'll explain in the
143:05 - next video as well um as text input text
143:08 - output okay uh thanks very much and yes
143:11 - I apologize for not using Celsius in
143:13 - this video okay thanks for watching and
143:15 - I'll see you soon in the next
143:19 - one oh everybody's now going to leave
143:22 - this live stream and go watch the uh
143:24 - Apple live stream sorry about that I
143:26 - didn't get done is it really 1 o'clock
143:28 - already 12:50 is it don't I have 10 more
143:35 - minutes hard if he wants to take a break
143:37 - and just come back and and go eat lunch
143:39 - and then come back in an
143:41 - hour
143:43 - um but
143:45 - uh I don't okay so sorry my shoe is
143:51 - untied I don't know I I need all my
143:54 - music selection I got to add all my
143:56 - music
143:58 - selection uh shoot my shoe is completely
144:01 - untied oh there we
144:04 - go can you see the top of my head I have
144:06 - a little bald spot there can you see it
144:08 - it's popping up okay
144:14 - um blowing my nose
145:21 - sorry
145:27 - everybody ah I this actually output
145:29 - isn't going through but I'm not going to
145:31 - worry about that right now okay um yes I
145:35 - see you guys I fixed it I fixed it I the
145:38 - chat's behind me um
145:45 - okay
145:48 - uh
145:54 - so
145:58 - dastic I was going to put some music on
146:00 - in the background but for whatever
146:01 - reason hold on this might be this might
146:03 - actually be a really quick
146:06 - fix uh there we
146:11 - go let's see if this
146:15 - works
146:20 - so this is random this is noise PE
146:24 - no random algorithm the actual random
146:27 - algorithm itself those numbers aren't
146:29 - related at all you pick like I'm picking
146:32 - random numbers between Zer and 10 9 2 7
146:35 - 6 1 9 4 8 9 2 1 3 I pick nine a lot
146:40 - apparently but with pearing noise I
146:42 - might pick numbers like this 2 3 4 3 4
146:46 - four five six five 4 five six s five six
146:51 - s five six S 8 9 8 7 six look this is
146:55 - like pear noise performance
146:57 - [Music]
147:02 - art 2
147:04 - 1
147:06 - 2 four 5 5 this is like pear noise
147:11 - performance
147:12 - part
147:15 - 2 four eight but with curly noise I
147:18 - might pick numbers like this 2 3 Four 3
147:22 - four five six 5
147:27 - 4ing noise that ising noise this ising
147:30 - noise that ising noise this this ising
147:32 - noise that is noise so this is noise
147:34 - that is noise noise that is noise so
147:37 - this is noise that
147:38 - is noise that is still
147:44 - silence I see that I'm Broadcasting
147:49 - [Music]
147:50 - I'm just about ready to do my today's
147:52 - coding challenge but I want to make sure
147:53 - sound is
147:57 - work okay you hear me great okay okay
147:59 - great thanks
148:00 - everybody uh all
148:05 - right I need something to boost my
148:07 - energy
148:09 - here
148:15 - uh
148:21 - uh
148:35 - okay uh stop over okay um Bo I'm all
148:41 - congested all of a sudden I think I'm
148:42 - getting a
148:45 - cold okay
148:48 - um sorry I'm trying to think of
148:50 - okay Jackson
148:54 - mlo uh oh I'm gonna go to the Wikipedia
148:57 - page I
149:02 - think
149:08 - and I
149:11 - think sorry everybody I'm just
149:15 - finding
149:35 - okay the song is loud okay apologize
149:37 - apologies for that
149:45 - okay
149:57 - sticker okay
150:15 - ah
150:35 - okay I'm going to do a coding
150:38 - challenge where I reference Jackson
150:40 - micho diic technique virtual Muse
150:43 - experiments in computer poetry I will
150:45 - explain what what a dastic is how it
150:47 - works I think I need the Whiteboard for
150:54 - that let me see
150:56 - if
151:01 - um yeah
151:04 - I'll I'm trying to determine what my
151:07 - best marker option
151:15 - is
151:19 - I'm trying to get some energy back
151:25 - I'm okay here we
151:36 - go if I step over here I can read it
151:45 - okay uh
151:52 - okay I gotta I got to do
152:00 - it now one of my restrictions for this
152:04 - is I'm going to do this without using
152:07 - regular
152:08 - expressions and just kind of basic
152:11 - string
152:12 - parsing um and uh but I will next week
152:17 - revisit this uh with looking at regular
152:22 - Expressions
152:25 - okay
152:27 - marker a bunch of different marker
152:30 - options some
152:35 - water cing
152:37 - rainbow
152:39 - Dan right you guys are still here
152:41 - watching enjoying this you're all
152:43 - watching the Apple live stream now which
152:46 - which is good okay here we
152:50 - go oh I need to put some uh my
152:54 - processing stickers up higher you can't
152:56 - see
152:57 - them advertise only the top stickers get
153:01 - featured I'm gonna have to work on that
153:02 - I need a new laptop just so I can
153:03 - redesign my sticker
153:07 - setup
153:15 - okay
153:17 - hello welcome to a coding challenge this
153:20 - coding challenge is going to be pretty
153:21 - different from other ones I expect this
153:23 - might be something that a lot of you
153:25 - watching my YouTube channel may not have
153:27 - heard of or thought about before but I'm
153:29 - going to implement something that called
153:31 - the
153:46 - he maybe he was 21st century too when
153:48 - did he die Jackson mllo 2004 I'm not
153:51 - going to say 20th
153:53 - century that was silly starting over
153:56 - again and I think I can just leave this
153:59 - I don't need to be zoomed in on this
154:01 - either
154:05 - uh
154:06 - okay um
154:09 - okay let's try this
154:15 - again
154:21 - [Applause]
154:29 - hello and welcome to another coding
154:31 - challenge video in this coding challenge
154:34 - I'm going to implement ah oh wait oh no
154:37 - sorry I saw like something in my preview
154:39 - pane that was an overlay that's not this
154:43 - is going to be it you
154:45 - guys hello and welcome to another coding
154:48 - challenge video in this coding challenge
154:50 - I'm going to implement something called
154:51 - a dastic machine so the dastic machine
154:54 - that that I'm going to build here is
154:56 - going to be based entirely on a
154:58 - technique a diic technique invented and
155:00 - pioneered by Jackson mllo uh artist poet
155:04 - uh composer playright um who pioneered a
155:08 - lot of algorithmic chance operate
155:11 - techniques with around language to
155:13 - generate poetry um without the use of a
155:16 - computer so there's a long history of
155:18 - artists and Poets working with
155:20 - algorithmic computational methods or to
155:23 - generate language to analyze language
155:25 - and this is something that it's really
155:26 - easy to forget in the world of con of
155:27 - computers and learning to program that
155:29 - so much of this kind of stuff can be
155:31 - done manually and I encourage you to
155:33 - explore ideas similar to this with
155:37 - manual processes before you start to
155:39 - implement them digitally as a way of
155:40 - exploring and playing around you know
155:42 - there's another famous example is
155:43 - William Burrow's cutup method which is
155:45 - called the cut up because it's literally
155:47 - about making new text from folding and
155:48 - cutting pre-existing texts and mashing
155:50 - them up together which of course you
155:52 - could do with a computer but you could
155:53 - also do with scissors and that sort of
155:55 - thing but um let me get beyond that a
155:57 - great reference for this by the way that
155:59 - I'll also mention is the virtual Muse
156:00 - experiments in computer poetry um this
156:02 - is a book that you can um I'll link both
156:05 - to Jackson mllo pages about Jackson mllo
156:07 - as well as the virtual news a book in
156:10 - this uh video tutorial but let me just
156:12 - read to you the description of the
156:14 - dastic machine
156:17 - um uh from excerpted from uh Charles O
156:20 - Hartman's book the process began with a
156:22 - striking phrase from Virginia Wolf the
156:24 - ways ridiculous in Picadilly this is
156:27 - going to be known as the seed phrase so
156:29 - in the program that I'm going to write I
156:30 - need a seed
156:32 - phrase uh he reread the novel this is
156:34 - referring to Jackson mllo looking for
156:36 - the first word that like ridiculous
156:38 - began with an R then read the next word
156:40 - following that had like ridiculous I as
156:43 - its second letter then the next word
156:45 - whose third letter was D and so on until
156:47 - he had spelled through the whole phrase
156:49 - so if that didn't make sense to you let
156:51 - me come over here and kind of diagram
156:53 - this out for you so let's say surprise
156:55 - surprise I have the word
156:57 - rainbow and I have some text
157:00 - like
157:02 - Ralph
157:04 - sat
157:06 - on that didn't work
157:08 - actually
157:12 - painful
157:14 - uh ferns
157:16 - okay I'm designing something uh I'm
157:20 - designing something to work precisely uh
157:22 - in a way that I could demonstrate this
157:23 - so let me look in this text for a word
157:26 - that starts with r aha
157:29 - Ralph let me work look in this text for
157:31 - a word that has its second letter a SAT
157:35 - let me look for a word that has its
157:36 - third letter I not on and ah but painful
157:39 - sat painful it's Fourth letter N Fe e or
157:43 - ferns so you can see this idea of taking
157:45 - this C phrase and finding words in the
157:48 - an existing body of text with just the
157:50 - single letter in the same spot and
157:52 - creating a new phrase out of that and
157:54 - this is a way in a sense of saying I
157:56 - want to generate poetry but I the writer
158:00 - don't want to play a sort of human being
158:02 - role in it other than sort of selecting
158:04 - the seed phrase and the source text let
158:06 - the algorithm kind of do the talking so
158:08 - to speak and this is I think that you as
158:10 - a as a viewer of this video I would
158:12 - encourage you I'll reference some other
158:14 - examples of this to generate your own
158:16 - system for doing this and see what types
158:18 - of outcomes you can get maybe you'll
158:20 - make a twitterbot from it that sort of
158:21 - thing um okay so coming back over here
158:24 - let's go and start with um I have an
158:27 - empty sketch here an entirely empty p5js
158:29 - sketch and I'm saying no canvas because
158:31 - I don't want to see a canvas I'm not
158:33 - drawing anything in this and I'm going
158:35 - to uh just find this here and you can
158:38 - see there's a I put a header in the HTML
158:40 - file Jackson mlow dastic and I don't see
158:42 - anything on the page so the first thing
158:44 - that I need to do is I want to get a
158:46 - seed phrase I'm going to let the the
158:48 - user type in the seed phrase so what I'm
158:51 - going to do in the HTML file is I'm
158:53 - going to say uh make a paragraph element
158:56 - and I'm going to say uh seed colon input
159:01 - uh ID equals seed uh Slash input and
159:05 - I'll I'll add I'll make sure it starts
159:08 - with
159:09 - rainbow so now we can see I have on the
159:12 - page uh seed and I started that with
159:15 - rainbow now I need to in my program get
159:18 - access to that and also I I I think it
159:20 - might make sense for me to uh add a
159:24 - button ID equals submit and submit will
159:28 - be the text of the button so I'm adding
159:30 - that in so now I have seed rainbow and I
159:32 - have a submit button and I want to
159:35 - attach ah so now I want to attach an
159:37 - event so this I have to do in JavaScript
159:39 - because I'm now if this is the structure
159:40 - of the page in HTML and now I'm just
159:42 - going to affect the behavior of the page
159:45 - in my JavaScript script code so I'm
159:47 - going to say uh I'm going to say VAR uh
159:52 - seed equals select
159:55 - seed VAR uh submit equals
159:59 - select uh
160:01 - submit and
160:05 - submit. mous pressed now I'm going to do
160:08 - something I haven't done in a lot of my
160:09 - other videos I tend to stay away from
160:11 - this I could just say like do the thing
160:15 - and then Define that function down here
160:17 - but I'm going to take this as an
160:18 - opportunity to show you something which
160:19 - is an anonymous function I'm just going
160:21 - to put the call back right in here oh
160:24 - that's very awkward looking but it's
160:25 - actually kind of a nice way of writing
160:27 - condens code when you click the mouse on
160:29 - The submit button button button the
160:33 - submit button execute this code that's
160:35 - inside this Anonymous function it's
160:37 - anonymous because it doesn't have a name
160:38 - so what do I want to do right there just
160:40 - to see that it's working I'm going to
160:41 - say create pced well obviously going to
160:43 - need to do uh an not seed but seed. Val
160:48 - the text of the seed itself and I'm
160:49 - going to have to do a lot more there of
160:51 - course but I'm just going to say that
160:52 - for right now so now if I hit submit we
160:54 - can see this page is doing some basic
160:56 - stuff that is at least getting the seed
160:58 - so I have the
161:00 - seed right now I have this seed in my
161:03 - code I need some sort of source text to
161:05 - use to be the words that I search for so
161:09 - the way that I'm going to do that is I'm
161:10 - just going to load from a text file and
161:12 - I happen to have a text file here which
161:14 - just has a lot of text from Wikipedia
161:16 - page on rainbows so I'm going to do it
161:18 - the easiest way possible in my code with
161:21 - just
161:22 - preload so I'm going to write a preload
161:25 - function and I'm going to have a a
161:28 - global variable called Source uh
161:31 - text I'm going to kind of call it a
161:33 - goofy name I'm going to say Source text
161:35 - equals load
161:37 - strings uh rainbow. txt and one thing
161:42 - you might recall uh if you watch some of
161:44 - my other videos is that the load strings
161:46 - function loads in the text but loads it
161:48 - as an array so it gives you each line in
161:51 - that text file as an array and so what
161:53 - I'm going to do in setup is once that
161:55 - text is loaded I'm going to say Source
161:57 - text equals join Source text with the
162:00 - space so I'm going to get rid of that
162:01 - array and join it so I have one long
162:03 - string so now I have one long string and
162:05 - I just got to make sure it's there I'm
162:07 - going to also say create P Source text
162:10 - so now if I hit run I if I reload the
162:13 - page I have a seed and I have the source
162:15 - text
162:15 - so now I've set up the page that's just
162:18 - sort of step one now I actually need to
162:20 - implement the dastic algorithm okay so
162:23 - let's go back to our code and do that
162:24 - this is going to be
162:26 - fun and actually I just realized here's
162:28 - something that I want to actually do I
162:31 - want my for my diticom I want the source
162:34 - text not to be one long string but I
162:36 - want it to be just a u array of words a
162:41 - list of words so I'm going to um I'm
162:44 - going to create create a global variable
162:46 - called words and I'm going to say words
162:49 - equals split and I'm going to use the
162:52 - p5js function split tokens and I'm going
162:55 - to say split that Source text up by and
162:59 - split tokens says whatever these are the
163:01 - delimiters the second arguments are the
163:02 - delimiters I want to split it up by
163:05 - space comma exclamation anything that's
163:08 - basically um you know something that's
163:10 - not uh so you know I could I could do
163:12 - this much more effectively but I'm just
163:14 - going to do that right now now and I'm
163:16 - going to do this and I'm going to look
163:17 - just in the uh debugging console and I
163:19 - can see I have an array of basically
163:23 - many many many many words so I have all
163:24 - the words of an array with every single
163:26 - word as a separate element in that array
163:28 - and you can see that it's uh
163:30 - 2,132 words long so this is what I'm
163:33 - going to be able to use now I'm going to
163:34 - search through that array to find words
163:37 - that have and by the way it's probably
163:39 - going to find rainbow over and over
163:40 - again but I'll I'll deal with that later
163:42 - because I'll give it a different seed
163:43 - phrase Okay so here we
163:46 - go um now what I want to do is instead
163:49 - of creating those paragraphs I want to
163:52 - say let me execute a
163:54 - dastic with what I want to pass in the
163:59 - value of the see the seed and I want to
164:03 - all of the words so I'm going to write a
164:05 - uh and I'm going to
164:07 - um uh I'm GNA have that function take a
164:11 - seed and an array and that function will
164:13 - return a
164:15 - the the the results of this
164:45 - so I'm going to come back over here and
164:47 - I'm going to say what for VAR I equals z
164:50 - i is less than
164:51 - c.length i++ and then the character that
164:55 - I'm working with is seed car at boy um
164:58 - this is a function that's part of the
165:00 - JavaScript string object that I think I
165:02 - neglected to mention in some of my other
165:04 - videos If I say car at I I want the
165:07 - character at index I right and in a
165:10 - string all characters have an index
165:13 - index zero index one index two so if a
165:16 - string is five characters long like
165:19 - hello the the index the indices go
165:22 - between zero and
165:25 - four so once I have that I want to then
165:29 - have another
165:32 - loop and what do I want to Loop through
165:34 - I want to Loop through all
165:36 - of I want to Loop through every single
165:39 - one of the
165:41 - words and I want to say
165:44 - if
165:45 - C if words index j.
165:50 - Cari equals
165:53 - c then I have found a word right I found
165:58 - a word that has its own character at the
166:01 - same spot I as the character I'm looking
166:03 - for and once I do that I'm just going to
166:07 - say
166:09 - console.log just to see if this kind of
166:11 - idea works and
166:14 - break
166:15 - so here we go I'm going to run this
166:18 - program now I'm pretty sure uh I'm going
166:22 - to run this we should see a bunch of
166:24 - things um so look at this I got rainbow
166:27 - seven times so first of all let's do a
166:30 - different seed phrase uh this is you
166:33 - know testing one just do testing one you
166:37 - can see I got t e s t i n
166:46 - uh o e and that's all so you can see you
166:51 - can see this worked now I got some of
166:53 - them twice so here's the thing one thing
166:55 - I need to build into this is I need to
166:58 - say after the reason why I got rainbow
167:00 - seven
167:01 - times it's because my Loop starts over
167:05 - every single time so every single time I
167:07 - find a word I go R matches with r then I
167:12 - go a matches with a so one thing that I
167:13 - need to change about this is I need to
167:17 - while I'm doing this keep track of some
167:19 - things so I need first of all I need to
167:21 - have a PHA I I want to kind of have a
167:23 - phrase which starts like this and when I
167:26 - find the word I want to say phrase plus
167:29 - equal I want to concatenate so the plus
167:32 - operator joins two strings together I'm
167:35 - going to say plus equals words index
167:39 - J and then I'm going to say return
167:41 - phrase so one thing that's going to be
167:43 - nice about this now that I've done this
167:46 - is I can stop using the console for
167:49 - debugging and I can say uh create P
167:53 - phrase so let me run this again and you
167:55 - can see I got rainbow rainbow rainbow
167:57 - rainbow rainbow rainbow rainbow and I
167:59 - say uh test I got that meteorological
168:02 - dispersion that so one thing I want to
168:04 - do by the way is I also want to uh add a
168:09 - space so I'm going to do this a sort of
168:11 - silly way but I'm just going to have two
168:13 - lines of code there and you can see
168:15 - rainbow rainbow rainbow rainbow rainbow
168:16 - so now what I want to do is make sure I
168:18 - look for the next instance of a word
168:20 - after the first one I found so um I'm
168:23 - going to keep track of that
168:26 - index uh or like current word equals
168:31 - zero so I want to start my Loop when I
168:34 - look through all the loops from current
168:36 - word so I want to go from current word
168:38 - to the end of that array and as soon as
168:41 - I find one I want to say current word
168:44 - equal J + 1 I want to go to the next
168:48 - word so instead of this Loop of
168:50 - searching through all the words always
168:52 - going back to the beginning I want to
168:53 - save where I last found one and start
168:55 - from the next one so this should do this
168:58 - rainbow caused rainbows rainbows rainbow
169:01 - rainbow rainbow so I'm still getting a
169:02 - lot of rainbows but I can now say things
169:05 - like um uh I love yeah um is do unicorns
169:13 - exist question mark so during good about
169:16 - during moonlit numerically Direction
169:18 - encounter dispersion brightness now
169:21 - amazingly I'm not getting any errors
169:23 - here and I probably should do some error
169:25 - checking like what if I got to the end
169:27 - of the array and I don't have any more
169:30 - where more to look what if no word
169:32 - exists with that in there um so I'm
169:35 - going to sort of leave this as that I'm
169:37 - going to release this code I I you know
169:40 - another thing that I could do is track
169:42 - all the possible um words that have a o
169:46 - is the second letter and I could always
169:48 - pick a random one so that each time I
169:50 - hit submit I get a different one that's
169:52 - something that you might add to this um
169:53 - arrow cheing is something that you might
169:55 - add U I don't know if I'm if there's
169:58 - anything weird happening when I have a
169:59 - space because I'm actually space is
170:01 - technically a character that I'm
170:02 - checking so question mark is in there
170:06 - but it seems to be working um let's just
170:08 - uh uh d
170:10 - o space u as fourth letter so you can
170:14 - see so I got do some stuff clean up that
170:16 - sort of way um uh um so right so um so I
170:21 - probably missed some things uh but I I
170:24 - encourage you who are watching this
170:25 - video to play around with this code make
170:27 - your own diticom generate poetry share
170:30 - it share it with me share it with the
170:32 - world uh and explore other types of
170:35 - ideas and I'm if you're in the
170:37 - programming from A to Z playlist the
170:39 - next video I'm going to talk a little
170:40 - bit more about this and a homework
170:42 - assignment for this set of material and
170:44 - some other types of techniques and Al
170:47 - historical algorithms like the dastic
170:48 - that you might look at as well okay
170:50 - thanks for watching and I'll see you in
170:51 - another video maybe perhaps
170:55 - someday okay
170:57 - everybody I think I did that
171:02 - successfully um which um I I want to see
171:06 - how many viewers Have I Lost there's
171:07 - still 74 people watching so I need to do
171:09 - one more
171:11 - video um give me a second here
171:27 - okay so the last thing that I'm going to
171:29 - do
171:33 - today the last thing that I'm going to
171:35 - do today is talk about a homework
171:38 - assignment for those of you who are
171:41 - following the
171:43 - course
171:46 - and way I want to do that is I want to
171:50 - look
171:53 - at flesh
171:56 - index cutup
171:58 - [Music]
172:00 - machine eraser poetry
172:02 - [Music]
172:05 - machine
172:12 - uh um n Plus
172:32 - oh
172:39 - okay
172:42 - okay all right
172:48 - last video of the
172:59 - day hold
173:08 - on okay
173:10 - ulipo
173:13 - ulipo
173:15 - um n+ 7
173:43 - technique
173:46 - uh cutup machine flesh index calculator
173:49 - the
173:52 - dastic
173:54 - uh uh n plus
174:09 - 7 this is a great
174:13 - example
174:19 - machine hold on are you sure
174:21 - and where's my
174:24 - example ah sorry
174:27 - everybody when I get to the end of these
174:29 - live streams I can
174:33 - barely keep it
174:43 - together
174:54 - okay
175:06 - okay
175:13 - okay
175:22 - all
175:25 - right what are you doing I'm losing my
175:27 - mind is what I'm
175:29 - doing okay here we
175:33 - go wrong sound effect but whatever um
175:36 - I'm going to cycle the cameras I'm going
175:38 - to finish this off for
175:43 - today
175:52 - action please
175:55 - uh yeah modulus modulus strings. length
175:58 - would be a great uh a great tip for
176:01 - adding to that previous program I wrote
176:07 - okay
176:10 - hello I think I have to use this like
176:12 - musical beginning gets me kind of it
176:16 - feels like I'm making a
176:20 - video hello uh this is the last video
176:22 - for this week's session of no the week
176:25 - is irrelevant because people are going
176:27 - to be watching this on YouTube
176:28 - later musical
176:33 - okay hello in this video if you're
176:36 - choosing to kind of follow this
176:37 - programming from a toz playlist as a
176:40 - course that you're doing over some
176:41 - period of time I'm going to talk you
176:43 - through homework assignment or exercise
176:45 - that I think is useful to do before you
176:47 - move on to the next set of videos and if
176:49 - you're interested in uh participating in
176:51 - a slack Channel where you can share and
176:53 - discuss these assignments uh please
176:55 - check this video's description for a a
176:57 - link to the patreon uh crowdfunding
176:59 - system that I'm using for that
177:00 - particular slack Channel but of course
177:02 - you could just do it and share it with
177:03 - me on Twitter or in the YouTube comments
177:05 - and i' would love to see the things you
177:06 - guys are making so here's what I think
177:08 - you should do number one is I think um
177:12 - uh okay so I in in the previous coding
177:14 - challenge where I implemented Jack mllo
177:16 - dastic technique one of the things that
177:18 - you can try to do for this homework
177:20 - assignment is invent your own
177:22 - constrained writing technique so
177:24 - constrained writing is a sort of form of
177:27 - writing based on an algorithm or some
177:29 - sets of constraints uh there's a French
177:32 - Collective of writers known as ulipo um
177:34 - who pioneered a bunch of different
177:36 - techniques um one of them is known as
177:38 - the N plus 7 technique uh this is a nice
177:41 - uh website which I will also include um
177:43 - which which uh implements this
177:45 - particular technique uh in French it's
177:47 - actually referred to as s plus 7 um and
177:50 - the way that this work n plus 7 you look
177:52 - at a body of text you look for every
177:55 - single noun in that text you find the
177:58 - the noun for every noun in a body of
177:59 - text you look up that noun in the
178:01 - dictionary find the seventh seventh noun
178:05 - after that one and replace it back into
178:07 - the text and now you have a new text
178:08 - sort of with randomly generated new
178:10 - nouns based on the order of appearance
178:12 - in a dictionary so you could try to one
178:15 - thing you might do is just Implement one
178:16 - of these algorithms like make your own n
178:19 - plus 7 web page you can see this web
178:21 - page works very similarly to um to to a
178:24 - lot of the examples that I've
178:25 - demonstrated for you uh another kind of
178:28 - famous example is uh this is one of my
178:30 - examples that you can find in the a toz
178:32 - uh GitHub repository this is using
178:34 - William Burrow's cutup method which is
178:35 - actually a physical method of cutting up
178:37 - text and folding text and mashing it up
178:39 - you can see that I have a slider which
178:41 - sort of determines how much of the
178:42 - original text to keep you can drag a
178:44 - file in use a textt sample so one thing
178:46 - I'll mention is this frame of reference
178:49 - is a good reference for to use where
178:50 - it's kind of giving the user a lot of
178:52 - options enter some text drag a file in
178:54 - use a pre-loaded text sample um an
178:57 - eraser machine eraser poetry not to be
178:59 - confused with the band eraser Q eraser
179:02 - music now um is a technique I'm going to
179:04 - load just load a text sample in right
179:06 - now which is a spam email that I
179:08 - received at one point and you can see
179:10 - I'm using Dom manipulation to click on
179:12 - all these words and actually uh erase
179:15 - them but I could come up with another
179:16 - system like erase every seventh word or
179:18 - erase every verb or erase every word
179:20 - that starts with e so and you know I can
179:23 - also by the way based on how I'm doing
179:25 - this keep the spacing or remove the
179:27 - spacing and what types of sort of
179:29 - generative poetry could you create out
179:32 - of the Eraser algorithm so but even
179:34 - though I'm showing you these digital
179:35 - versions of it you might want to wait
179:37 - until next time after you've watched the
179:40 - regular expression videos to actually
179:42 - Implement your interactive web-based
179:45 - version of it as a constraint on
179:46 - yourself invent your own algorithm to do
179:49 - by hand get a newspaper get a magazine
179:52 - get a book invent your algorithm write
179:53 - the instructions for the algorithm and
179:56 - execute those instructions and get your
179:58 - new text and then present those
180:00 - instructions and present the result on a
180:03 - web page so think about one of the
180:05 - things I'm asking people to think about
180:06 - is how do you have a self-documenting
180:07 - web page so instead of presenting kind
180:10 - of the result and then having a blog
180:11 - post that explains it could you a web
180:14 - page that kind of has the instructions
180:15 - has the result kind of documents itself
180:17 - and you and something you might consider
180:19 - using is GitHub pages to host it so get
180:22 - yourself set up figure out GitHub Pages
180:25 - get yourself an
180:26 - account review HTML and CSS for yourself
180:29 - think about creative constrained writing
180:31 - techniques and generate um generate the
180:35 - content and release it online um yeah so
180:38 - uh give that a try uh share it with me
180:41 - however you might find it useful to
180:43 - share and I encourage you if you want to
180:44 - ask questions or discuss your work uh
180:46 - with me and a group of peers um you know
180:48 - consider joining the patreon slack
180:50 - Channel as well if you're enjoying what
180:52 - you're kind of watching so far and I'll
180:54 - be back in a next set of videos they
180:56 - might be there by now if you're watching
180:58 - this much later than when I've recorded
180:59 - it but uh otherwise we'll be back about
181:01 - a week from now okay and uh enjoy and I
181:04 - will see you sometime
181:08 - soon thanks for
181:12 - watching
181:15 - okay uh I think I I think I'm done for
181:18 - today this was a um what time is it it
181:21 - is
181:23 - 1:30 so this was at least this was about
181:25 - I say about 3 hours and 15 minute live
181:27 - stream which is about 45 minutes longer
181:29 - than a class at ITP I'm completely
181:32 - exhausted uh thank you guys for sticking
181:34 - with this I suppose there's like a new
181:37 - iPhone now that I could buy or something
181:39 - because I don't have enough like Apple
181:40 - devices all around me um and uh I'm
181:44 - going to see you guys next week if you
181:46 - if any I'm going to it's going to take
181:47 - me a minute to kind of get myself
181:49 - situated here I'll leave the stream
181:50 - going for a minute uh if anybody wants
181:52 - to ask a question uh please do
181:58 - so I think I've lost most everybody are
182:01 - you there are you there YouTube viewers
182:04 - it's me
182:05 - Margaret I don't know if you'll get my
182:07 - reference but uh I can turn my phone off
182:10 - of airplane mode
182:12 - now
182:16 - um I can see all these notifications
182:18 - that are coming in etc
182:21 - etc uh I think people are saying yep
182:24 - like you're still watching
182:27 - okay did that come through the homework
182:30 - assignment do people miss
182:33 - it
182:38 - um Roberto in the chat writes in short
182:40 - learn HTS
182:42 - CSS and how to use GitHub all in week on
182:45 - your own so that sounds a little harsh I
182:48 - think you were probably just in a
182:49 - friendly way translating what I said but
182:51 - uh just so you know I have resources and
182:53 - videos for all of those things that are
182:55 - part of this week's material they're
182:57 - just not what I recorded today uh all
182:59 - right so I'm going to go uh thank you
183:02 - for watching
183:04 - um I'm GNA put on my background music I
183:07 - guess I'm just going to close out my
183:12 - windows um I'm going to just see if
183:14 - there's anything in the chat people are
183:16 - saying thank you which is very nice
183:19 - positive feedback is welcome and
183:20 - encouraged negative feedback is also
183:23 - absolutely welcome and encouraged any
183:25 - feedback is welcome and encouraged uh
183:27 - you know be nice if you can but uh
183:30 - positive negative constructive
183:32 - criticism uh uh uh when will the code of
183:35 - this session be loaded great question um
183:39 - I will okay so a couple things this is
183:41 - confusing and uh I I'm I'm I don't know
183:44 - if you're actually still there watching
183:45 - but um so the code that should be
183:49 - referenced in these videoos
183:51 - descriptions should be in two places one
183:54 - it should be in this a to z- F16
183:57 - repository which is my example
184:00 - repository for the class so basically
184:03 - everything that I'm doing in this video
184:04 - session there there there should be like
184:07 - duplicate examples that are mostly
184:08 - similar in this repository and that's
184:10 - already there but I will also if I go to
184:14 - my uh coding rainbow rainbow dasc code
184:18 - what I will do is create a new folder
184:21 - probably called A to
184:23 - Z uh obviously the coding challenge code
184:26 - will end up though in the challenges
184:27 - folder but the I'll get this stuff up on
184:30 - GitHub within the next 24
184:33 - hours
184:34 - uh and uh there we go uh it answered
184:39 - that
184:42 - question
184:49 - I love that people thought the back of
184:50 - my shirt was dirty it's the it's a
184:52 - processing
184:54 - design uh support processing in p5js
184:57 - consider making a donation it's a plug
185:00 - that I should always uh uh make uh
185:04 - people I love that people want to
185:05 - support me and I appreciate that as well
185:07 - um but if you another way of supporting
185:09 - me um directly or indirectly is I don't
185:12 - know why is not sadly the processing
185:16 - Foundation website isn't loading for
185:17 - whatever reason but I encourage you to
185:19 - do that
185:22 - um okay that's it for today uh thanks
185:25 - for watching again there's the pring
185:27 - Foundation website uh support encourage
185:29 - you to do that prosing is a nonprofit um
185:32 - 501c3 United States uh Corporation
185:34 - goodbye everyone and I look forward to
185:37 - seeing you in a future
185:41 - session

Cleaned transcript:

hello I am here live good morning um there's some music playing in the background I have a microphone hooked up please let me know in the chat if you can hear me okay if the balance between the music and the audio is okay um had I had a lot of technical difficulties this morning getting set up but I am here live now and excited to see all of you although I can't see any of you but I can see a bunch of names here in the uh chat um so couple things to mention uh before I get into sort of introductions and talk about what it is I'm going to do in today's live stream number one is a a light burnt out so I normally have these two bright lights that are beaming down on me so that you can in the audience see me but one of them for some reason is not working I think you can see me probably okay and if I go to this other camera over here I hope that you can see me and still hear me over here but if um if things don't look as perfect today it's one of the lights it's missing so I'll have to investigate that um uh and I've uh H last time I did a live stream my sort of test fall live stream um I had a bunch of technical difficulties where the stream would freeze and I had to restart the computer and I did some things upgraded some stuff I hope that that's not going to be a problem but obviously we'll keep an eye on that together so welcome this is uh cing rainbow a live episode number something but in a way this is the first episode for fall 2006 and I am start 2006 6 oh my god oh boy 2006 was a nice year I remember that uh it's 2016 in case you were wondering uh I I haven't I'm I'm I'm a little out of sorts uh as you can tell as I always am I'm rushing down here to get to the school for poetic computation which is uh uh artist Collective and School here in the West Village of New York City where I have a recording a broadcasting studio um and uh this being uh episode one of this fall season so what I'm going to do this fall and um is I am going to use this coding rainbow live stream to cover a course uh that I am teaching oh I am just so not prepared I'm going to go here so if you go to uh shiffman domnet A2Z you will find a website uh with uh a page page um which documents the material that I'm going to be covering this fall uh and here you can see the first uh there are some notes Here for this first SE session entitled introduction p5js JavaScript and strings so um what this uh so what I got a bunch of things to get out of the way here so there's so much to do to introduce but I just want to I just want to get I just want to get into the material and uh all that sort of stuff I have a new sound system which none of you are probably interested in but I could pretend that I'm except that I'm I'm not actually swearing all the time uh and I can pretend that I um that I did something really really exciting all right this is kind of useless um anyway so my name is Dan schiffman this is a live stream that I do once per week it looks like for the next few weeks the time and place will be Wednesday morning around 10 or 1030 a.m. eastern time the time that it is right now um uh at some point in October I'm probably going to move to a Tuesday afternoon time um but I'll keep you posted about that YouTube has this brand new feature which allows me to set the time and I know that a lot of you in the chat were complaining because I set the time for 10 a.m. and then I got here and I wasn't ready and then I set it for 1015 and then I think I set it for like 1020 so I will try not to do that too much in the future but um but um yeah so uh Chris in the chat is asking for the this do song I didn't get it loaded onto this soundboard thing that I have so I will I will have to do that at some point maybe I can take a short break and and load it on there so I will get the this do song back um okay so um I teach fulltime at a program called ITP it. n.edu I had the first session of a class called programming from A to Z yesterday um it went pretty well went better than this is going so far far um and uh what I'm going to do each week is teach my physical inperson class and then do the same class here in a live stream and so today will really be introductions and uh I think I posted to uh Twitter if I go to my Twitter uh I've retweeted a bunch of things yada yada yada uh isn't there an image with this one no wait where where did I post that hold on ah I can't find it uh I have a um hold on I have an idea everyone bear with me for a second oh I think I posted it to the slack channel so many things uh I am pulling up an image which has uh my list of notes which I want to make sure I have and let's see if uh magical air drop will work oh I don't have Bluetooth probably on in this computer I'm just going to Tweet it uh that'll work Live Now YouTube dot this is great this is riveting for you slash shiffman slash live okay I'm tweeting that image so um now I can pull it up here and possibly download it let's see if we find it there we go okay so uh let me save this image uh overview and just put it on my desktop uh and I can go away from here oh seriously okay so this is a little bit of a reference here for me so this is kind of my this is my plan for today this is on the Whiteboard from my physical class uh uh yesterday and so a couple things that I'm going to do one is I want to talk about the overall goals and um of the course that I'm going to teach each week this fall I want to talk a little bit about uh uh some of that will involve client side versus service side I want to talk about whether I'm using libraries or not using libraries um uh some of the topics that I want to cover specifically related to JavaScript um and then I want to make a few video tutorials about uh Dom manipulation mostly I'm going to point you to some existing video tutorials and then when one doesn't exist I will make a new one uh I am going to I want to talk about the basics of how strings work in JavaScript um and then I want to look at text input and the coding challenge for today which I will do a a little later before I'm going to be here for my plan is to be here for about two and a half or three hours if I can survive is to um uh is to create something called a dastic so I'm going to uh I'm going to introduce you to someone if you're not familiar with uh Jackson mllo who is an American poet and performance artist uh born in uh 1922 I'm just reading the Wikipedia page for you um Ma low pioneered a lot of computational methods in poetry without the use of a computer and one of these methods is called was it was known as a dastic and what I want to look at is Jackson mcl's dastic system for generating poetry out of a found text uh which he did manually and I'm going to create a JavaScript web page which will generate the Poetry for you so uh this is kind of like I'm taking a left turn or a right turn or some sort of turn in that this semester a lot of what I'm going to be be talking about is how to work with text text analysis uh text generation poetry generation sentiment analysis anything that has to do with reading text as input to a program and generating text as output to a program so um so and uh something that so so okay so this is the other thing that I'm trying to figure out I think that I'm going to have a new playlist in my YouTube channel which will be the which is going to be known from here on out as the programming from A to Z playlist and I think what I'm going to do right now is start my first video tutorial of the day uh which uh what I'll do is use this as a like 10minute introduction to uh where the the origins of the ideas for this course came from and what the goals of the course are so this is going to be something that people will later watch maybe if they choose to tune into to my channel um as an INT introductory video to the course um and then I in that video I'll probably mention the um uh patreon thing that I'm doing where you can uh if you want to turn in assignments and have discussion there's a you can subscribe for a slack Channel okay uh I don't want to over promote that sort of thing um ozal 86 in the chat asks uh why only 720p um I was just sort of worried about bandwidth and latency so I'm live streaming at 720p it seemed like the quality is good enough um it's a pretty good internet connection here it's a Verizon FiOS connection It's seems to be working pretty well but if um people want to I could do a test at 1080p if that makes a difference uh yes so uh uh t00 bed uh mentions just like Burrow's cups so uh William Burrow's cutup method is another text mashup method that I want to reference also something known as eraser if you change your mind I'm the first in line if I sing the song is that like a copyright violation um yeah so uh no asked oh you're actually reading the chat so I am reading the chat but you I can't really guarantee I'm not following it and I I wouldn't um you know ask questions in there have a discussion I'll kind of peek at it from time to time and when I'm sort of in video tutorial recording mode um that's when I I I generally don't look at the chat too much and and everyone's going to tell me that the camera's shut off I know that it's shut off this happens every half an an hour half an hour it's a problem that I have not been able to fix even though I've been doing this for over a year uh if I could get if I if could you know my crowdfunding and YouTube advertising takes off I'll buy some new cameras that won't have this problem um um and uh what was I going to say ah so in case you're not aware if this is your first time joining in I I do something that's a little bit unfortunate and causes some confusion which is that I do this live stream and the live stream exists as an archive but I also then reupload separate edited chunks of videos from this live stream that um at math blanks on Twitter I think I got that right somebody the chat post mata's Twitter handle if if if uh um helps me with editing so sometimes you'll see a new video gets posted which is just what you've seen before but this is for people who find it later and just want to like watch the important chunks in a playlist and so uh I don't I I can't I don't have a better way of doing it as of yet but I'm open to suggestions okay so um let's see what else do I have here so I I think this is going to be good I'm ready I don't have actually you know I did a terrible job I made this soundboard and I didn't put any of my music on it I have this which is the background instrumental music getting warmed up here for um the coding Rainbow theme song which will be possibly probably coming out this week I will release it on Soundcloud there will also be a little music video trailer promotional video for my channel uh a lot of people have helped me with that and the credits of that will be with the video release I also have a lot of green screen footage of myself that I will release that was used for the video that you can all play with if you want last time I didn't do any dancing because somebody complained about my dancing it made me feel very nurotic and then I got over it after four or five days so it's happening again okay um oh that was ABA no eraser did not cover that song I just completely sang the wrong song what's a wellknown eraser song that's really hilarious that I uh eraser Greatest Hits yes yes yes yes a little respect oh L more that's good I love I actually went to an eraser concert if you can believe that I think it was at the The Beacon Theater in New York City probably like 20 years ago okay I'm off topic way off topic okay um let me get to the syllabus here um and I'm going to do my introduction to the class oh they actually did cover it though okay uh okay okay they did they did okay as long as I'm getting my 80s pop music references correct is that even the 80s then then everything's going to be okay by the way this is why I thought my sound effect for when I'm debugging okay never mind you guys don't care okay um all right so here we go I'm going to do a quick uh actually let me um let me oh how's the focus on the Whiteboard it actually looks like it might be a little bit off and I need to erase it eraser see can I play this is my this is what I'm always wondering sometimes I have a desire to play other music and of course now you can't see if the focus is any good if I'm erasing it uh uh let's see uh let me just see if I can fix that a little bit oh this is not going to work maybe I'm going to just check the chat maybe you guys say it's okay focus seems fine okay so I'll just leave it uh yeah ALG c19 asked are you going to cover the rainbow topics in future streams or just the classes so um this is a great question I have this GitHub repository with a ton of requested topics I didn't finish my traveling salesperson genetic algorithm there's more to do with the agario coding challenge I really want to get to more connect videos um you know one thing is that it's uh um so yes um I do intend to revisit those topics throughout this fall for the first few weeks I'm going to be focusing on this course the course has uh uh various weeks where uh there are pres student presentations and final project stuff which is happening in the physical class which means I kind of have a week off from some of the a toz content in which case I'll return to some of those topics and honestly um you know I would love to I enjoy this so much and I would love to have more time to do it but it it takes a lot of time and it uh takes a lot of energy and I have this other it doesn't make very much money and I uh also have this fulltime job at NYU so uh at some point as I grow this thing that I'm doing and find other ways of of getting more time or resources and other guests to be involved I hope to be able to have more and more time for kind of have a course going and other coding challenges going or maybe two courses going at the same time twice a week live by courses I mean twice a week live streams so oh I'm totally in the wrong camera I was just talking and talking and talking oh I really have a I used to be so good at switching the camera I'm going to build I need to build a sensor that just knows where I'm standing sorry sorry everybody I mean I the thing is I often have also thought of of building my own streaming system not relying on you YouTube in which case you could just pick which camera you want to see or stream both of them but someday okay um so here we go um so let me okay let me see here so I want to if I'm going to make a video now to introduce the course and I just want to get a couple links going which I think might be useful um let just see here this is fine I'll leave this open this open uh I want to reference um and uh I'm just pulling up some links of people that I want to make sure I reference who have really been inspirational uh in terms of coming up with the topics for this course uh and sorry everybody I'm almost there uh I think this will do the trick for me okay uh okay uh all right how are we doing on time so far this stream hasn't broken oh I can't see the time anywhere that's fine oh 1040 a.m. that's where I can see the time okay the good news is I'm not rushing off to go anywhere today I going have plenty of other stuff to do uh but um last time I did a live stream I felt a lot of pressure um to get to everything and we'll see how it go I mean I I I there's a ceiling on how much energy I have although I have had this idea of doing some kind of like I was thinking of doing a processing Foundation fundraiser which would be like a ton that just have like a live stream going for 24 hours probably not 24 hours maybe just like 12 hours people coming in and out and like a phone bank where you could call in donate your money um okay here we go I'm really getting started now um if I need to oh this ah sorry I just want to look for my is this really my whiteboard oh wait no I have the other whiteboard markers over here I bought some new ones which I'm hoping will work well let me try this one I have a big problem getting started I have to do a better job at this okay here we go no that's not the women I like this other uh hello oh hold on I'm GNA use this I to try again hello welcome to a first video of a new playlist uh called programming from A to Z and this playlist is going to be will be as I make it a lot of videos that are going to follow this uh ah it's a syllabus um uh course that I'm teaching at uh program called ITP at Tish School of the Arts New York University uh called programming from A to Z and in this video uh uh if you're really just interested in the technical content you can just skip ahead and stop watching this video but in this video I want to just kind of talk about uh where the ideas for this course came from some of my inspiration for putting the material together for this course and what my goals for it are so what and kind of like who what do you need to have in advance before you start watching this sequence and and I will mention that a lot of the videos that I make I intend for them to be kind of Standalone videos that could be mod you know put placed that you could kind of come to on them their own but I'm going to sequence them in a way that I'll give you a little bit of a narrative over the course of this fall it is September something uh 2016 uh that's when this video is being recorded but maybe you are an alien robot of the future watching it and wondering about this strange Earth species um on the internet if the internet still exists anyway okay I um so okay so let me talk a little bit about where this theide where this course came from so I think this was probably at least 10 years ago if not more I was at the uh University of Pennsylvania sitting in on a poetry class you might wonder why was I sitting in on a poetry class that's a story for another day but um someone named Nick monford uh was giving a presentation uh Nick monford is a poet and artist and Professor uh um author uh who has a recent book out actually called exploratory programming I don't see it on his website I have It's a Wonderful book that I've been actually reading as a resource for this course as well and um Nick was giving a presentation to this poetry class about uh computational techniques in a in writing and I mean it was more sophisticated and interesting than that but I'll Loosely say that it was so it was for an audience of people who not necessarily familiar with programming and algorithms uh but our poets and writers and looking at historical examples and new techniques in writing using computational methods and at the time I was kind of a recent ITP graduate I think or current ITP student I don't remember uh and I thought huh this is interesting so much of my time this was early in the days of processing uh so much of my time is spent thinking about programming for motion and animation and I hadn't really considered this idea of programming for text reading a program that reads text in a program that generates text out and so at the time I actually uh decided to work on some materials for a course called programming from A to Z and uh strangely enough um I taught this course in Java which was in many ways a kind of horrifically terrible idea but Java was a programming language that I was learning and familiar with at the time it also is the was is the basis of the uh creative coding environment processing and so I was aligning some stuff between those two environments um and so I taught this course uh and I believe this was like 2006 or s or something like that I could look it up you someone on resourceful on the internet could find the old syllabus for it probably um and so um a lot of the ideas for this course came out of this presentation that I saw from Nick monford now interestingly enough at the time uh Allison Parish was a student ITP I believe she was actually a student in this class uh and when she graduated from ITP um uh I talked with her I don't remember exactly how this about starting a new class at ITP called re and and which she came up with called reading and writing electronic text so Allison parish is a huge inspiration for this course as well if you're not familiar with her work uh with generative text and performance and Twitter Bots and a lot of things you should be familiar with and so Allison teaches a course taught with python called reading and writing electronic text a lot of the materials can be found on her website so Allison really took a lot of the ideas from programming from A to Z and made a much better and more interesting uh course using a much more uh appropriate programming language and environment python to working with text the focus of her course however is is really not about I I would say I mean I I'm I could be wrong about this but just to make the argument for argument sake about uh really focusing on poetry generative text generative poetry about the sort of core out text in text output not necessarily about interactive systems as related to text not about server side programming client side programming things that happen in the browser so what I decided to do um was uh recently after she had started this course at ITP was to revive programming from A to Z and so now the course is once again back and it's all about programming with text uh text in text out but with I would say an appropriate language meaning JavaScript sure a lot of um a lot of uh Innovative and new work with data analysis and text is happening in Python and there are tons of natural language processing libraries and data libraries for processing for python but if you want to make things happen in the web browser where users can enter text receive text back participate in an interactive system uh JavaScript is a language that is useful to make all this stuff happen in the web browser so um so this is really where the ideas for the course uh came from now I am going to just briefly now so so that's kind of a bit of much more longwinded than I had hoped but a bit about where some of the ideas for the course came from now uh I want to talk the next thing I want to talk about is my goals for the course and just so I'm not uh so I'm standing somewhere different with a little visual variety here I have a couple fundamental goals one is uh programming and algorithms and particular programming I'm talking about uh JavaScript here so if you are a beginner JavaScript programmer if you maybe just took a single course in p5js you know a little bit about JavaScript this is a course where you can improve and expand your knowledge I want to talk about things like what's this prototype thing what's the this keyword what's a closure what's an anonymous function all of these kind of aspects to JavaScript programming that you might not find in an introductory creative coding course so I want part of the course to be able to get augment programming skills but I want that thing not just to be for for the sake of you know programming itself but to have a kind of conceptual basis a creative output for you and this is the other aspect of the course so I want you to think you know creative new ways to think about computational am I really writing this down I am really writing this down uh out uh computational output and specifically text based output oh and input right so maybe you've taken a computer science course or some other JavaScript course and the focus is on web development for professional uh work uh for getting a job at a startup or maybe the course is about algorithms so you can figure out the absolute fastest way to sort a list of numbers these are not you know there there are aspects to that those ideas that might be in a course like this but my goal is really for you to discover new and creative ideas and a gener creative projects playful useless experiments from this course because I believe I think I I know that that um you know number one uh making art and playful experiments is an enjoyable way of interfacing with the world and can bring meaning to people's lives but also I think uh practical tools and new discoveries come out of useless uh impractical Explorations so that's kind of a goal for this course to augment skills and uh uh and and and kind of inspire your creativity okay so back to over here I want to briefly run you over what the topics will be as I go over them from week to week um uh uh this week I want I'm just going to kind of introduce ideas for the course uh I am um asking the students of the course to uh use uh GitHub Pages as a way of publishing their work although it's certainly not required I want to look at Dom manipulation in p5js and kind of compare that to other Dom manipulation Frameworks and libraries you might think of I want to do a tutorial about just the string object in JavaScript and then I want to look at how you get text input from a user in the browser via a text box a uh you know uploading a file and I'm going to do a couple coding challenges around making a web page that generates uh kind of found random poetry and I'll talk about an assignment for you guys to do that's what's going to happen today uh regular Expressions I'm so excited this is like my favorite topic ever because I'm like a complete loser not if you love regular Expressions no I am a loser you watching this are clearly not one loser is such a terrible word that I sound like I I hate that word nobody anyway edit this part out where's my uh okay um but uh uh R Expressions is a topic that I love it's an amazing uh uh uh tool puzzle exciting crazy programming language kind of unto itself thing that allows you to manipulate and do wonderful things with text I want to look at how you can get text from data sources different apis I want to look at wordnik I think I've looked at wordnik in other video tutorials but I want to look at it deeper more deeply I want to look at how you can get users to fill out a Google spreadsheet and use that as the input to your program uh um ah server side programming is a priority for me so there's a lot of things that make sense to do with only client side programming and p5js but I want to look at node in particular twitterbots uh fortunately I have a whole set of video tutorials already made about Twitter Bots uh so we'll see what I can add to that for this week um and then I kind of want to run you through the classics so uh my goal at Hope for you is new and creative ideas in text analysis and text generation but I want to look at how some of these kind of classic text generation analysis algorithms work so word counting is kind of the fundamental building block to all text analysis so I want to look at a word counting program uh tfidf which is like a fancy term for figuring out how to glean key key words from a text based on word counting I might look at basian analysis if I can get the courage for basian analysis uh and also there are a lot of uh node packages that'll do a lot of this stuff for you that I'll examine uh text generation I want to build a Markov chain from scratch I'll talk more about what that is but a probability based system for generating text I want to look at grammars ah there's a wonderful thing that I'll just mention if you're not familiar with another work that I find really inspirational tracery by Trac by the way that should not say tracery by tracery somebody pull request fix this it should say by Galaxy Kate uh so Galaxy Kate um Kate Compton on GitHub and Galaxy kate.com is a wonderful artist uh programmer person who has built a story generation library for JavaScript called tracery which I'll examine uh later as a tutorial maybe as I start to figure out ways of getting guests maybe I can invite Kate to appear to talk about tracery uh um where is I back here um and then look at a code for building something called a context free grammar so language the term grammar might be familiar to you programming languages have a grammar right function name followed by parentheses followed by a bunch of arguments separated by commas if you're missing a comma that's a grammatical error a syntax error so rather than looking at language and seeing how it fits into a j grammar if you can design a grammar and generate language from that what kind of results do you get and then also I want to make sure I look at Chrome make some tutorials on Chrome extensions um I'm going to show you uh a uh uh one of my uh favorite uh artists Addie wagen uh uh Addie wagen neck is a wonderful artist uh who makes amazing work that you should become familiar with and she made a Chrome extension uh called uh girls versus git I'm going to just pull this up here and you can see some of the things some of the features that it does uh every username on GitHub is replaced with a generic female username every gravitar is replaced with a gravitar of a woman or a female Type image so this is something that you can do with a Chrome extension you can have control over a user's browser and their browsing experience to uh kind of experiment with Al strange and alternate ways of viewing the universe of the web and experiencing obviously this can be used for productivity tools and you probably have Chrome extensions for things like oh pocket which allows you to save you all your links but how what kind of strange ways can you do if you you know take everybody's uh uh uh every time a you know noun is on a web page and replace it with an a a food item this came from an idea that somebody had in class so you're just reading web pages to make yourself hungry all the time so creative ideas uh working with Chrome extensions is something that I want to pursue so this is kind of the trajectory of the course uh goals for the course trajectory of the course and after this video is done I'm going to make the first few videos for this first week on some of the material now here's a qu here's here's something I will mention to you you people of the internet can simply just find these videos on YouTube you can write in the YouTube comments if you have questions and I I try to answer them when I have time and other people answer them as well uh and I hope you will enjoy and watch them if you want to participate in this course uh in a slightly augmented way um I will point you to patreon.com/crashcourse rainbow.com you can subscribe to my patreon feed which is a crowdfunding system and with that you will get an invitation to a slack Channel where you can ask questions about the course and post your work in assignments and I have a sort of peer group of people discussing and giving you feedback so if you're interested this is an experiment I'm trying I'm teaching the physical class for ITP students at New York University I teaching an online version of this class for free on YouTube it is AD supported there will be ads for these videos I'm mixed feelings about that but I'm doing that that right now for a little bit of Revenue there's expenses associated with making this and time and then I am also experimenting with that crowdfunding platform to allow people a certain additional form of interaction so my kind of philosophy on online education right now is free content paid interaction and uh but mostly I'm doing this because I enjoy it and I enjoy uh discovering a new audience and bringing new ideas and doing weird dancing from time to time and ringing my bell and all sorts of weirdness so um so thanks for watching this introduction I'm sure there are lots of things that I miss saying ah I and I thought of something I wanted to mention two other uh I'm going to link to all of these uh things in the um in the uh description of this video I want to mention two other uh big Inspirations one is uh Lynn churny uh who does a lot of work with data analysis and presentations and another is uh Darius kazami also known as Tiny subversions who is an internet artist prolific creator of incredibly strange and interesting twitterbots uh basically you know I am not I have to admit something I am not really a twitterbot maker I am a person who makes how to make twitterbot tutorials and I but I um and so uh if you're looking for inspiration and ideas and um other types of materials U Darius is great I want to um point out both Lynn churny and Darius kazami have 2016 talks from the uh IO Festival in Minneapolis so I would recommend you find those and all of these are great but uh if I go here to see all I can find uh Darius uh whoops actually okay anyway you can find them I'll link to them in the description but both of those are highly relevant ly chern's talk and Darius kazami's talk from iio as kind of starter material get you thinking about ideas of things you might want to make if you're following along with this course okay thank you for uh watching and uh stay tuned and in the next video video I'll be showing you some other stuff okay thanks byebye okay um hopefully that was fine that was my introduction I don't know how long that was I've been going for about 40 minutes so far so the live stream archive is obviously going to have additional stuff that I don't think of in those videos um I'm going to look at my uh list right now for today um I think that's okay that I missed kind of some of these things okay so I I hit everything so the next piece so here's what I'm going to do I'm going to try an experiment here I think that I'm not so then if I were just teaching a Course and there was no such thing as video in the internet thank you mattio for keeping track of it no no Lin Moy this is not over just that short video snippet is over and I am going to continue and make more video Snippets I'm going to be here for probably another one and a half to two hours um okay I don't know what is going on in the chat now I have to stop looking at it um so um here's the next thing if I were introducing technical topics and things that you need for your homework for this week if you're following this on as of course like you're going to do homework the next thing I would do is say hey let me just talk about GitHub Pages for you um but since I have already made video tutorials about GitHub pages I think I'm just going to slot those into the playlist so um obviously not not obviously I shouldn't say Obviously so let me for those of you watching live let me at least pull that up and mat I think this makes sense uh Mao who helps me with organizing the playlist I'm going to go to YouTube shiffman um and look I'm live right now um and I am going to find you this particular playlist so this is a full playlist about you working with Git and GitHub I I don't think it makes sense to bring this entire playlist into the a toz playlist because um that's way too much but it could be referenced um but I might make sense the next piece would just be to have uh is there not a 1.9 oh no yeah okay maybe these two videos um GitHub Pages the basics of GitHub pages and GitHub Pages for hosting p5js sketches because that's ultimately what I'm going to be doing so that's the next material so you know if you're watching this as an archive you know stop and go and uh you don't have to but you can stop and go and watch these two videos and then come back to this live stream archive uh if you're not watching this as an archive then you're not watching this as an archive but I think these will make sense uh in um um in the playlist so that's good so the next thing that I want to talk about is ah okay Dom manipulation now this is another tricky one so I think maybe I should do I could do a like part two video which is just kind of overview quick overview I think this makes sense of Dom manipulation in the context of this course uh yeah uh o camera went off I'm really I'm really at a loss here so um you know what I think I'm going to air on the side of only making new of not rehashing things that I've already made videos about because there's limited time and I think I can get more benefit from the new content so I'm just going to point out now I'm going to go back to uh my playlist and I'm going to find um uh I'm going to find this playlist so um this is tricky because this is all relevant but I think what I might do is uh yeah so okay so I don't know how to best manage this but I'm just going to keep going if I were actually teaching this as a course online which is what I'm doing I'm going to tell you that the next step that you want to have some familiarity with is what is p5js and uh how does what is HTML what is CSS and how does Dom manipulation uh work uh in p5js and honestly the the place that you could look for this is right here on this uh web page which kind of has an introduction to p5js as a library uh basic what is HTML what is CSS video tutorials as well as some Dom manipulation examples and a link to the Dom manipulation playlist so that's the next aspect of this that I think is important okay um so that's the next thing I don't know what to add to the a toz playlist but I'll figure that out later and now we are getting to something new so I need to make some new video tutorials on loading text the the goal by the way is to make some of these um to do some of these as coding challenges so these are examples that I made a year ago I haven't really looked at them too much so making the coding challenge will be a bit F uh fresh and I want to talk about Rita I want to do something on Rita as well um but I want to do some coding challenges where I create uh poetry machines as single page web applications so what do we need to do those as coding challenges I need to cover how the string object Works in JavaScript um and I need to cover um I need to cover um how to load from a text file okay um so I'm trying to think of which to do first I'm going to do text input okay all right um let me get myself set up here I um so let me make a new I want to do a couple things I want to clone I want to clone and actually I'm going to put this in documents nope I want to clone my a toz F16 repository so I have those examples if I need to reference uh okay uh so um and I'm going to make this shortcut to this here so I can look at the code examples um uh I want to uh then I need to um um by the way I want to start using I think this will do I need to do pseudo I want to start using the node HTTP server instead of the Python server which I think might be uh a little bit easier let's see if this works um so I I maybe it makes sense for me to do a quick video on my workflow that I'm going to use which is um adom and yeah I think I like this better 8080 okay um uh so okay so uh um okay so it might make sense for me to do a quick uh workflow video that exists in this playlist uh but let me just get myself set up here Local Host 8080 how come that didn't work strange huh oh I guess it's like it just uses a different IP then okay um okay that's the web server for these examples and then I need a folder here called uh A2Z and then I'm going to call this week one and I'm going to put that here um I want to get just a blank I'm going to do the ridiculous thing which I'm going to download just to make sure I have the most recent everything I'm going to get it a empty pro p5js project yeah I have been using Code pen and I I I would like to use it more codepen is wonderful um uh I'm going to call this load uh text and uh okay let me close a lot of these windows I can get them back if I need to I'm singing to myself um okay um all right now here's a question for everybody I also now want to I also want to run another server and it's can I specify the port hey that worked I just guessed I can't believe I just well it makes sense so I can specify the port and so I can have uh local oh 127 8080 which is my preexisting examples 8,000 which is oh what did I get wrong here oh that's crazy I didn't do it right I just all I have to do is I didn't guess correctly just write the port no dash 8000 no what did I do wrong P equals okay thank you no how about just Dash p nope there we go that's what I want and now that's working whoa what is this craziness I have something still running so actually sorry everybody all right all right I'm not going to worry about it too much this is going to be my example okay and uh no so now I need to okay so what I think that I'm going to do here is I'm going to make a quick short video just about my workflow because I get this question asked a lot um and I think it'll be helpful just to point people to this so my workflow is node web server Adam editor but I'm going to mention also that you could there is an Adam there are Adam packages for servers but I'm just choosing not to use that I'm going to mention that I'm also using a beautify plugin for Adam and uh and I also want to mention that stay tuned because you going there there is soon to be released a web editor for p5js okay um let me uh reset the camera here um and I am going to uh I just want to erase the uh whiteboard over here uh uh okay yes why Adam over Sublime no big reason other than I saw somebody I really like using Adam and I thought oh I should use Adam too but it is free and Sublime is um uh a software commercial software which I I have purchased the sublime license because I like to use Sublime and I think you should too but as much as possible I like to use uh free Tools in my tutorials um but I also think that people should buy software and support software development so I don't mean to say that there's anything wrong wrong with charging for software okay uh here we go um let me uh hello welcome uh to this video in this video I just want to do a short quick tutorial about my workflow for the tutorial videos that you're about to watch as part of this programming from a toz playlist but also I use this workflow in a lot of my other videos and coding challenges and I'm sure my workflow will change at some point in the future but this is relevant for the time period that it's relevant so let me just come over here and make a short uh list of some things that I'm using so one thing is you want to make sure uh if you want to use my exact workflow there are lots of other workflows uh you want to install something called node.js and then you want to install and I'm going to show you how to do this a node package called HTTP server this runs a little Local web server on your computer that hosts the HTML CSS and JavaScript files that you're programming and working with so that you can see them you know of course you can just double click them and open them in the browser but if you run an actual web server on your computer um you're going to mirror the real situation when you eventually publish your files to a web server somewhere so I use those I you also need a text editor to edit your code and edit the JavaScript files the HTML files all that sort of stuff I'm using a text editor called Adam uh and with this text editor I'm using a package called I think it's called Adam links to all these things will be in this video's description so if I get the name wrong uh adam beautify so that's an uh that's something that I just like that auto indents my code and that sort of thing um and then I should also mention that there are a bunch of I believe there's something called Adam live server and there are uh other packages in atam that will run the server for you that you can use instead of http server if you prefer I should also mention that I'm uh working with uh p5js libraries so you'll see that all of my projects have a bunch of extra JavaScript files associated with them they come from uh p5.js and p5.js um and eventually soon I I can't uh later this month if you're watching this in in September 2016 um there will be a web editor that you can use um with a p5js for developing sketches and ideas that go along with this course as well and at some point when that is released I'll demonstrate that in a video as well I should also mention that there are a lots of other uh wonderful code editors you can use online code pen uh is one uh that I've used it has a wonderful Professor mode which allows you to type code and your students see on their screens the code that you're typing in real time uh jsfiddle uh thimble uh and um I don't know why I can't think of other good ones that I'm forgetting now so I apologize if you make a wonderful code editor online that I'm not thinking of so this is the workflow I'm using let me demonstrate it for you rather quickly here I am over here uh and okay so Adam is something you should download from uh atom.io I've already downloaded it so I'm just going to run it here uh it is a oh it's already opening something so let's when you open it it'll probably look more like this an empty thing I could do command N I have a new file and I can type stuff into it so it's just a text editor any text editor will do oh yes install my update I guess oh what's going to happen everything's going to break no please work okay um so uh okay so this is Adam uh that's what it looks like uh um packages you can install you can see here this is this beautify package that I'm using and I'm also using something called Adam key mapping so so I set it to beautify to be the command T which is my preference uh shortcut um so uh maybe I could cover that in another video or link to how to set up key mappings and Adam in this video's description um and you can also see there I I do I have the live server somewhere a live server here so you can see this is a live server package which will also start a live server you can install how do you install Adam packages uh I forget uh when window uh I was going to say preferences uh uh packages yes so uh and maybe I could um time out pause oh yes no never mind keep going install so here's a place that I can that you can search for packages or find featured packages to install um and add things to Adam okay so then now the other thing you want to install is uh node which I'm going uh which you can find at node death .org you can download install node and then from uh terminal you can um from terminal you can use something called uh npm which stands for node package manager and you want to type npm HTTP Das oops httpserver this is installing the web server that I'm using but you can't just install httpserver you need to say DG for Global meaning you're making this a global package which means you can just access it instead of being a package just for one project it's just accessible on your computer till until the end of time basically until you uninstall node and if you do that you also probably want to say pseudo because you might need pseudo as a way of saying I'm the administrator of this computer I have permission to install something globally and if I hit enter it's going to ask me for my password and then uh I already installed it so I don't know what just happened there but uh oh I said to hold the wrong command entirely hope you're not uh npm install HTTP server and now um it's going to install it so it's installing it and once I've done that uh I can I'm running a web server in a bunch of other directories so I'm going to stop that I can just anywhere I am on the computer I can just say httpserver and I can uh run a web server now where do you want to run the web server from probably from a directory where you have a project that you're working on like I have this load text project I can CD to that directory I can say HTTP server and then I can go to the browser with this particular URL which is just the local host of my computer 127.0.0.1 col 8080 and uh oops I can go back to the browser and I can paste that URL in and you can see oops refresh there's the project it was uh you can see there's nothing there CU there's no code in there that project but if I were to add some code to that project you would see this project displayed in the page now uh one other thing I think that I I thought of that I wanted to mention about this which I've now completely forgotten oh yes if you don't like port 8080 uh you can also one thing I'll mention to you is you can say httpserver uh p and I can make up a port like what's my favorite number 1 1234 uh maybe I should I'm going to actually I'm going to you higher port numbers are better that you don't mess up something that's already running computer so I'm going to say 881 and you can see now I'm running that same server on 881 so you can't run multiple web servers on the same port but if you need to run multiple web servers on the same time you can use different ports okay so that's a quick just little diddy on my workflow I'm sure I missed something or you have questions about it which you can ask in the comments and now you're ready to go and watch the video tutorials where actually make some stuff using this workflow okay thanks okay so so I got that out of the way uh hopefully that's useful for people I don't see anything in the chat like you're not making any sense or that was terrible or please stop so I'm going to keep going and I now going to actually get myself set up again um so let me run I'm used to 8,000 so I'm going to do one on 8,000 which are the preexisting examples and then I'm going to do 80001 I need a tissue so 8,000 okay and then uh 80001 load text uh adom node close uh and then then now what I want to do is uh open that load text example actually just open A to Z here oops not an atom open B to Z I don't know what this is uh let add just a little HTML so I see that stuff is there oops and make sure I have P5 DOD okay so here we go we are ready now now gimler full asked to be greeted and then message got deleted okay good work moderators uh please make a basic stylesheet for your index.html I will do that at some point it is not really necessary right now not the focus of what I'm looking at but um um Al valer you're asking about open processing it's a great uh project that allows people to post and host sketches online um I think it's a wonderful project C9 is an ITP Alum who's got a lot of energy encourage you to support it and use it sure um okay so now how we doing TimeWise I'm recycling the cameras I am going to uh erase this over here so this first video I'm going going to look at how you load text from a user ah and I need two things so actually before I do this video I need to use some sample text and rainbow Wikipedia um so let's see what's a good way for me to just copy paste a lot of text here let's see uh so much interesting text here Double Rainbows the Wikipedia page on rainbows is amazing okay uh copy paste this actually I'm gonna uh I I think this is too much text so I'm just going to do like a few first uh paragraphs with uh to here okay actually let's go a little further I don't want the math stuff so I'm going to stop here okay copy text edit paste make plain text okay so now I have uh whoops I'm going to get rid of this and I'm going to save this as save as uh rainbow. txt um we one load text save um and now I can also see it here so I think this should be okay you know what I think I want I think I want how do I turn text wrapping on in um and not wrapping as in because I I'm not going to trim to wrap because it'll be the worst thing you've ever heard in your life but wrapping W WR uh W uh a soft wrap let's turn that on uh and there we go a little bit okay uh great o oh I'm going just do a little cleanup here I don't know why that happened uh and all right I'm not going to obsess about this too moonbows oo what's a moonbow that's exciting uh okay uh here okay here we go so now I have some sample text to load great okay here we go I will actually in this tutorial I am going to need to add uh a CSS file okay here we go um Everybody right let's see what's the I want to see what time it is it's 1130 I'm doing pretty well still I basically have three video tutorials I want to make before I leave now uh loading text from a user basics of the string object in JavaScript and coding challenge to do cut UPS dastic generative poetry stuff in a single uh web page app so those are the three things I'm going to do okay here we go hello welcome to another programming from a toz course video this video I'm going to look at a feature of well really a feature of the world the web the browser um and look at in the context of p5js and JavaScript how do you get text input from a user so first I just want to talk you through over here what the basic what the three or four methodologies I'm going to use so number one is if you want to get text input from the user you can use something called uh an input element so an input element is a little box that appears in a browser window where you could say you know in a web form you might say like name and then you know you write your name in here uh you could also uh use something called a text area and a text area is the same idea it's just bigger and it's usually resizable the user can kind of drag this corner around um for a longer bit of text entry so if you want the user to type in a paragraph of text and use that in your program you can use a text area and then you could also get you could ask the user to to submit or or you could simply load there's boy there's so many other ways that I'm not going to get to because you could use apis and crawl the web and scrape it we'll get to that stuff later in a future video but what I'm thinking about right now is you could also get input from a text file itself and you could use for that you could use the load strings method in p5js where you could simply just reference a an actual text file that you have as in your sort of directory of files um and you could also U but you could also ask the user to upload a file sorry there's going to be an edit point in this video thank you M for editing this my coughing fit out you could also use a uh file input um if you've ever seen in a web browser you have a little button that says like choose file and you can actually create that with a p5js function I think called create file input and I'll show you how to use that as well and finally you could create a div of sort of area a box of stuff on your screen that you could in the browser itself that you could drag a text file over and I actually have a separate video tutorial that just goes over that which I might just reference rather than include it in this video tutorial so I'm going to go through all of these and then you can also look at the draggable area video um and you'll see these as possible ways of getting text input because what I'm going to do is say hey user submit some text and I'm going to generate a poem of from that text for you so that's kind of the ultimate goal that I'm going to do a couple videos from now okay so let me come over come over here and let's see um so first of all so I'm going to start to implement some of this stuff and go over how these functions work okay so this this is my code so far oh yes no I'm still in the same video I forgot everybody take a deep breath I need some like calming uh sound that's not calming sound but I got to uh I need some more Zen sound effects okay um so this is my code so far one of the things you'll notice in all of the examples that I'm not all but many of the examples that I'm publishing is that even though I'm using the p5js style methodology structure of there's a setup function which is kind of like the pages loaded function there's a draw function which runs this continuous loop I actually am using calling a function called No canvas meaning there there is no drawing canvas associated with this program that I am writing I am simply I'm writing a program to mess with uh the web page other elements other than the canvas paragraphs headers that sort of thing so if I were to look at the output of this page uh which is over here you can see all there is is a header that says welcome to a toz week 1 now where is that coming from one thing I'll notice nowhere in my code do I say hey display that on the page that's because I actually have that simply hardcoded into the HTML file associated with this uh itself so this is something that I'm going to touch on in this example and future examples is ah when should I put something in the HTML file when should I put something in the Javascript file and there's no real answers to this question it's sort of caseby case basis and personal style that sort of thing um okay but what I want to do first is just simply show you how can I create text input on the page and I'm going to do that by saying create input and now I'm going to run this code look at that and there it is there's a place where I can type some text on the page wonderful and uh ah yes okay so just time out for a second sorry I need a short break I kind of had like lost my train of thought um looking at the chat somebody in the chat says they have to pee I will probably have to do that at some point sorry I I I I try to minimize the amount of edit stuff that I'm added to do but this will get edit so I'm just trying to think to myself of what order I'm going in um okay okay great okay so with this partic with this text input box I could do a number of things number one is I might ask the user to uh uh enter in I was going to talk about the Mad Li sorry you guys I kind of just like lost my boy I'm really the um I'm having some green screen noise today it's probably because that light is burning out but say okay once the user has typed in some text I want to uh I might want to access that text in my program so let's look at how I might do that so first of all this create this input text box that I've created on the screen I need to store a reference to it in a variable so I'm going to create a variable like input I'm going to say input equals create input and by the way I'm actually going to take out the draw loop I don't want there's no reason for P5 to be continuously looping right now because I'm not using that aspect of P5 which I might later but there's no canvas there's no animation and so what I now want to do is I want to H have access to that uh stuff that's in the the text box now when do I want to have access to it I could have access to it in a draw Loop by saying input. value I'm going to skip that for right now uh what I'm going to show you though is just I'm going to open up the Chrome developer tools here to make this a little bit bigger so let's say I put my let's say I type rainbow into there and then I set type input. value you can see this by referencing the variable Dov value I have the text that's in there so anywhere in my code I can simply reference that textbox Dov value and I know what the user has typed rainbow yay um so uh now I might want to know what they type only when they hit enter so the way that I can do that and I've done something rather horrific so well actually no I haven't done it horrific yet I'll show you later I'll fix this later so um all Dom elements the text input box being a Dom element have events associated with them mean I click on it it's an event when I hover my mouse over it it's an event there is an event called changed and there's a p5js P5 Dom Library function called Changed which allows me to execute a function when that event has has been triggered so I can say input. changed new text which means I can just write a function called new text and I can say console.log input. value so what I'm saying is whenever the input box has changed meaning the user has hit enter I I want to see the results of that in the in the console so now if I go back and refresh this page and I type in rainbow and hit enter we can see here uh more I have rainbow here if I type in unicorn and hit enter we can see I have unicorn there so now I am accessing the content whenever the user types enter and I might do something like say create P input. value create P makes a paragraph element on the page so now I can say unicorn and I can say rainbow and I can say uh swirly happiness right and I'm getting all of those things as paragraph elements on the the page now here's a question for you what if I want to know every time the user types a key not just when they hit enter but anytime anything changes in that text box itself this event is not the changed event and this is where I've done something which I really don't like which is that the name for that event is actually input which is a little bit of so technically what I need to say uh is something like this but I sort of hate hate how I've name the variable input and then there's also an input so I want to rename that variable so I'm going to just call that uh you know text field or something and that way we can have less confusing there less confusing there I can I can make this a little more clear uh so what I'm going to do now is say function uh new typing and I'm going to say I'm also going to do create pie so let's comment out the let's just for the moment comment out the changed event and only have the uh input event so now watch what happens you and I C O R N anytime I type anything I'm getting an event and I'm kind of continuously making new paragraph elements for every keystroke that I type so maybe what I want to do instead just as an exercise here to do something different is to what if I had a single paragraph element that I altered the content of every time I typed a key so here's where this like in Shakespeare Hamlet there's an essential question to be or not to be and I have a different question for you today and my question for you I don't maybe I should oh I shouldn't be erasing all this because it's a nice reference for later but it's too late to select or not to select or maybe it's just to create or not to create to select or to create what I'm saying to you is when do I want something on my web page to appear based on code I write I'm creating a new Dom element and now it's being appended to the page or versus when do I want to have something that exists on the page that I access in my code exist in the The Raw HTML that I access in my code and manipulate and here's a case where I'm going to De just demonstrate to you that what I want to do is I am going to in the HTML file itself I am going to add a paragraph element and I'm going to give it an ID and I'm going to call it uh output right I'm going to call it output and you can see that it is empty and what I want to do instead of saying create p in my my code instead of creating the paragraph element I want to select this paragraph element I want to access it so that as the user types I want to update what's in it with the word with the keys that they're typing so uh let's do that right now so how I do that in the code is so I'm going to do leave that in there so what I'm going to do is I'm going to say I'm going to make a variable called output and I'm going to say output equals select and then I need to I'm going to use its ID and the indicator for an ID is the pound or hash symbol select output I think that's what the IDE I gave it and then here now what I want to do is in new typing I'm going to say output. HTML the HTML function in the P5 Dom library is a function you can call to access the existing content of a Dom element or place content in it and what I want to do is I want to take what's currently in the text field and I want to put that in that paragraph element so let's look and see if this works now and so as I'm typing Oh cannot read property HTML of null so I've made some sort of mistake here select uh you know what I wonder if by um I wonder if it uses wait what what did I actually let's so let's double check what did I make it ID I made its ID output um so let's just let's just try uh some stuff in the console here to debug this I think I know what the problem is huh okay time out I debug this yes so somebody in the chat is saying document. getet element by ID which is absolutely correct but that's using the of JavaScript and I'm kind of leading on the p5js Dom Library so let me look this up I also need to get a drink of water why did I look look oh my here's my video tutorial I know what I'll do to figure this out I'm going to watch this video tutorial about select and select all uh where's the reference this is uh interesting um this is not what I want to do did I did I like this example uh reference libraries P5 Dom select yeah so what did I do wrong here HTML file is not saved that's quite possible I'm going to stop that annoying typing sound sorry everybody uh what went wrong here oh that was it thank you very much everybody for my oh the HTML this is what I meant to do the HTML file wasn't saved okay that did the trick let's refresh this page uh uh okay my pants are falling down you would never know that because to the internet I only exist from here up but in my new and upcoming uh coding rainbow promotional music video thing you will see that I am not a centaur um okay I got to get back into this video okay so um here I am back and if you are wondering what was wrong I forgot to hit command s in my um in my index.html file meaning it wasn't saved so now that I've saved it the code works as expected or as I wanted it to which is I can say uh hello every time any character that I type here you can see that that paragraph element is being updated and now when I hit enter you can see that I am also uh saving that with so I have two events that I'm tracking each key being pressed and enter being pressed now couple other things I want to mention one is if you want to have this prefilled in with some text um then uh one thing you can do is you can uh in this create input function you can say uh this uh you know like and enter your uh favorite uh food or something or just say like your favorite food right and I could then say you know blueberries cuz I love blueberries I love blueberries okay um and uh they would me so happy I wish I had a bowl of blueberries right now and I could just do this sort of weird internet thing where I eat blueberries on the internet um okay so you could see you can have something some prefilled text in there I could also uh make this a text area instead so what I want to do actually right now is uh what is I'm going to show number one is I'm going to show you two things at once whereas uh first of all instead of saying create input I could have actually just put an input U element in the HTML file and you select to access it you can try doing that as an exercise for yourself and what I'm going to do in this video is change this I'm going to actually add a text area and I'm going to give it an ID which is uh I'm going to call it text field I'm going to say text area and you can see now if I refresh this you can see there's now a text area that I can expand over here so if I wanted to type a paragraph in here and I could also actually preed it with some text please type a story and you can see now it says please type a story there and what I'm going to do is in the code I'm going to comment this out instead of creating the input I'm going to say text field equals select and uh text and the uh the ID is text field so I could probably think of better blueberry I'm going to call it blueberry and I'm going to go back to the HTML and I'm going to say uh give it an ID blueberry and I'm going to say tell me about how much you love blueberries so that's in there you can see that's in there and now you can see this same program works the only thing is that event enter is no longer relevant so in this case I should probably create let's do this um I'm going to go to the the I'm going to actually just create uh a button element and I'm going to say submit and I'm going to give that an ID which is submit and then I'm going to go to my code and I'm going to say VAR submit uh and I'm going to say submit equals select submit and by the way I'm doing a terrible job I'm single quotes double quotes everywhere all you can argue on the internet single versus double quotes I'm just going to use them both I don't care uh and I'm going to say submit uh dot uh mous pressed uh which is an event uh new and I'm going to say uh new text so when you click the submit button I'm going to call the new text event uh which will create that new par paragraph So Mouse pressed is an event for when you click on a button so I should be able to do this and you can see and I can hit submit and I get this is how much I love blueberries okay so oh it did it twice why did it do it twice um Mouse press oh because I have the oh interesting oh when I maybe when I hit tab or something I I have this uh no oh yeah text field change so that event is still in there maybe it's somehow figured out I don't know I don't know why that happened yeah someone needs to by the way someone needs to write a command s for Save song um okay anyway uh I finished with this video okay so this is the end by the way here's a little exercise technical exercise for you to do and I'm going to show you how to do this as I make some video tutorials about how to manipulate strings but basically the next thing you should think about um is how can you instead of just reproducing the exact text that is um that is in the text area or text input box right there on the page how could you manipulate that text so how could you show the user back what they've typed but reverse the order of the characters or reverse the order of the words or replace certain words with their synonym I mean that's you know connecting to an API or something so you can come up with some clever idea this is a kind of a technical exercise that you could try okay thanks for watching this video about how to get text input from the user using a input field or a text area in the next video I'm going to actually show you how to load from a file using load strings or the create file input okay thanks very much and I'll see you in the next video uh okay because I lost Focus to the element and the content in the element changed I think that is correct Muhammad in the chat writes the onchange or the changed event triggered because because you lose focus to the element so whenever I click out of the text area or something and click to the submit box it triggers that event so I'm a little bit crazed here but hopefully that was useful to you time wise how are we doing I want to get to my server I believe that's what I'm going to do right now so I think what I'm going to look at um load strings okay so let me get myself set up for that uh and I'm going to week one look um so I'm going to change the name of this to o1 uh text input and I'm going to call the next one O2 load file okay so um sorry sorry sorry I have to uh go back to here this is what I just did uh hold on I want to just fix something about this um what oh whoops I did something ah I did something weird here um I think this is still right uh what I wanted to do sorry is just I want to put the output above and I want to put this in a paragraph Just want to make the web page look a little nicer not that it and make sure this works so when I release this code okay great so now what I want to do is go to the next example and the other thing I want to do is in here I want to say text input from user and the next example I think it save yes ah I did it again I I shouldn't rename the folder uh and the next example I want to uh say actually I want to get rid of all this stuff one thing I should say by the way is of course you could do this with jQuery native JavaScript all sorts of other ways of manipulating Dom elements if anybody's interested in like recording my examples to using other Frameworks so people could compare and contrast that's great I'm using p5d because it's a really simple quick and accessible way to get up and running with da manipulation and it's part of the processing Foundation which is a pro uh p5js which is a project that I work on and like to support okay um okay I wonder how many people are watching this right now by the way 105 that's pretty great hello 105 people of the internet I just got to dive in here the last yeah so by the way I did a setting on YouTube that as soon as a live stream ends it immediately makes the video unlisted because I don't usually like to have it published then as an archive until been able to like clean it up or fix some stuff you know once I had like a password in it and I or something and got that out so um so anyway so that's why the archive is not there but it'll be at some point later today we'll get an archive of today up up there and it'll probably be um a new video cuz I'll have to stitch these two streams together but I am recording to disk and I am streaming and everything seems to be working so hopefully this is going to not freeze again I sent a report to I don't know whether it's wirecast or my computer or what but here we go okay so let me just see I think I have a little bit of a cold by the way um Okay so I am ready now okay printer cable blackout yes I like that some of you oh mention that okay U let me get the chat visible for myself again and here we go all right I don't know why I like having this little background instrumental the beginning of the video it makes me feel like I'm doing something here all right here we go everybody hello welcome to another programming from a toz video tutorial and in this video tutorial I'm going to show you how to load a text from a file U into your web page and I'm going to use that for a lot of other examples and things that I'm going to do in later videos so um and I'm again I'm using the p5js uh framework so first of all let me just show you something that I have here I have a text file as part of my folder along with the index.html and the sketch. JS file obviously I could have subdirectories and do various things like that and this text file simply has a bunch of paragraphs of text from the uh Wikipedia page on uh rainbow the rainbow Wikipedia page so um the very first thing I can do uh that really makes it easy to load text is that I can write a function called preload and the preload function is actually an event that happens before setup is called so one of the goofy things about JavaScript is everything happens in this quote unquote asynchronous manner meaning you start loading a file then you start doing something else and you start doing something else and you try to do something that uses the file but maybe it's not loaded yet and in a moment I'm going to show you how to sequence this sort of stuff and maybe later I'll even show you more sophisticated ways to sequence this stuff but right now the easiest way is p5js says hey if you don't want to worry all about all that you can simply say load strings rainbow. txt into a global variable called txt that I've made up as long as I put that in preload by the time I get to setup and I can do stuff to the Dom of the page I know that that text will be loaded and so what I'm going to do here is just add in here console.log txt so we can see what is it that's coming out of the file which might be something that you don't expect so I'm going to do this and you can see here it is now weirdly enough you can see like like hey why is there this bracket there before there's a quote there seems to be some sort of and then there's like uh this here and then there's a comma and another quote there seems to be some sort of array here so let me do something to this file I'm going to go to rainbow. txt and I'm going to say rainbow unicorn blueberry uh you know what's good too is mango who doesn't love mangoes okay um so I'm going to change the text file to just have four lines in it and I'm going to refresh this page and now you can see more clearly what's happening so one of the things that load strings does for you which is often very convenient but not always so convenient is that it gives you a body of text as an array each element being the array being each line of text in the file so you know if you have some sort of like this can be very convenient if you have a text file of words like you might have a text file of words you're searching for and suddenly you have them all in an array when you load that text file that can be very convenient in our case here maybe what I want to do and I'm going to undo all this so I have my rainbow text back maybe what I want to do is just put all this text onto the web page and so uh I might want to say in my code uh create P like make a paragraph with that text now let's see what happens weirdly enough I love sometimes you just got love JavaScript and libraries like p5js it like figured out something to do it took the array and it just like made a paragraph out of the entire all the things in the array and I think it actually got everything but um another thing that I could do is I could use a function called join which takes all the elements of the array and joins them together and I could actually join them with a br tag in between them so you can see now if I say join everything in that array and put a br tag and I think I'm probably supposed to type it like this as a selfclosing tag um then what you'll see here if I refresh it is now I actually am maintaining the line breaks from that file in terms of rendering the stuff from that text file on the web page so this is a very quick and easy way to pull in a text file and display that on the page so I'm going to use this in later examples you could think of things you might want to do like chop up the text file count all the words in it analyze it that sort of thing load multiple text files you can call load strings multiple times but there's two more things I need to show you in this video number one is you don't always just want to like load the file and preload you might want to only load the file when the user clicks a button or something like that and number two is you might want the user to be able to submit an actual text file and I'm going to show you how to do that as well okay um someone in the chat actually by the way asked how does one do CSV files so you could actually load a CSV which is a comma separated values file which is like a um spreadsheet so to speak and then parse it and you split and chop it up VI your commas and I might show you how to do that in another video but there is actually a p5js function called load table which knows how to load a CSV file and something called a table F object that you can Traverse and iterate over as if it's a with spreadsheet like functionality but that's for another time uh okay um so now let me get rid of preload and what I'm going to do is I'm going to go to uh my HTML file and I'm going to add a button and I'm going to call this button uh give it an ID called load file and load a rainbow text and now we can see if I go to the web page we should see I have a button called load rainbow text and if I go to the sketch what I want to do now is first I want to access that button via its ID so I select it from the page now I have a variable that knows about that button and then I can say button. mous pressed and I can reference a function I can say load I can write a function called load file so now I can write that function here shoot is that coming through God I've got to turn that off getting phone calls in the middle of these tutorials okay um that can be edited out I don't really care um so now I've written a function called load file and what I want to do in that function is called load strings on that file name here's the issue though now that I'm not using preload I can no longer just set the result of load strings to a variable what I need to have now is a call back so I'm going to say load this text file and then I'm going to make a function called file loaded file loaded and that function I'm going to oops I'm just going to write it up here is going to be the function that is triggered when the text file is ready so there's a whole sequence Happening Here I press the button on the mouse load file happens I call load strings when the text is ready I call file loaded and what comes in there data I give this function an argument I'm going to call it data I could call it text I could call it anything and what I can do now is I can say text oops whoa text equals data so what I'm doing is I'm saying when the file is loaded the AR to this function is filled with the stuff that's in that file I can set it equal to my Global variable but I actually don't really even need the global variable anymore it sort of depends what I'm doing here but what I'm going to do is instead whoops I'm going to get rid of this Global variable and what I'm going to do is I'm going to take this and I'm just going to put it in here and I'm going to say data so I'm going to create that paragraph when the text is ready so I'm setting up now a sketch when I run the sketch nothing happens but as soon as I say this I load that text and it appears on the page so this is how you can sequence the loading of data from a file and obviously again what can you do that's more interesting than just display that exact text back to you or might you have different buttons for different text like choose your own source text for this web application that you're making that type of thing Okay so we've seen almost everything now I have one more piece of this what if instead of loading text from a file I want the user to be able to um I want the user to be able to select a file themselves so here's how I can do that I can add to setup I can say create file input I'm just going to put that there with nothing else just to see that this does something and I'm going to do this and you can see look at this I now by default this just that create file input has created this whole choose file no file chosen button thing on the page so I'm getting a lot of functionality from the web browser for free and of course I could style this differently I could change probably what it says there instead of choose file I could do a lot of custom stuff but I'm using the basic raw default Behavior so when I press choose file it opens up a file menu for me and I could you know go here and I could actually go and browse and find you know my rainbow. txt file and select it and you can see there it is now nothing happened so what I need to do is I need to set up a call back for when the user selects a file and there's some complications here because what if the user selects an image file what if they select a text file what if they select a um you know a some other kind of file that I can't think of right now so I might have to handle different kinds of files differently or do some error checking and that type of thing but basically I know that I need a call back so let's go and add a call back create file input and I'm going to say I'm going to say file selected so I'm going to write a function now called file selected and I assume that file is going to get some argument that function is going to get some AR an argument and I don't know what's going to be there I could look up in the documentation so I'm just going to write console.log file now I'm going to run this and I'm going to go back and I'm going to select that rainbow file and you can see ah look at this what did I get I get a P5 file object so there are lots of things here that I get I have what kind of file is it it has a type and a subtype what's the name uh how big is it so what that sort of thing so number one thing that I can do here is I can just say whoops thing I could say something like create P you know file. name plus file. size plus file. type so right now I'm going to create a um I could create a paragraph element with stuff uh stuff about that particular file so if I refresh the page I select that file you can see ah I got rainbow. txt let me make this a little bit bigger so you can see it it's got 12,000 some bytes in it that's way too big uh and it's a text file I could uh you know select my HTML file it's still a text file I could look at the subtype um I could try to get I I feel like there must be an image file somewhere on this computer but I don't I'm not going to bother to look for it I'll I'll let you experiment with that yourself so you can see I can have the browser I can have my code know about the file that the user selected and even better I can get access to the contents of that file and the way that I do that whoops what did I just what did I click here ah no stop there sorry um I can uh oops I'm in the I lost uh I want to show you other stuff about the developer tools later but I got lost in there so what I want to do now is reproduce the contents of that file and I'm going to say uh right here create p uh file Dot and I think it's file. dat I believe the actual contents of the file is in file. dat so I'm going to do choose file I'm pick this and you can see there it is here's all the contents there now I'm not it's not coming in as an array so I don't have the line breaks I could do a replace to put BR tags in it I'm not going to worry about all that right now ultimately I I now have the user able to select a text file that I can process and return something back to the user um the other thing that I will mention here is that I might want to protect and say hey only if file. type equals text then create that paragraph otherwise say I I need a text file so here with a little bit if statement I can add some error checking here so if I run this again and I say choose file and I go uh somewhere on this computer under applications and I I don't know I try to get this chess application and I select that it could say look here's this giant application but I need a text file so you can you can do some sort of error checking in that sort of thing uh with um with with in your code as well now there's two more things about this probably more than two there if you look in the documentation there is a way to allow and I'm going to look this up for you right now uh create file input p5js hopefully this is going to bring me to that page um it did not so I'm going to find it myself I'm going to go to P5 js. org I'm going to go to libraries I'm going to go to P5 Dom and I'm going to look for create file input um there is a second argument which if you add allows the user to select multiple files and you have to handle those a little bit differently maybe I'll you'll see this in some of my examples or maybe I'll come back to this in a future video so if you want the user to be able to select multiple files take a look at this that's there for you and the other thing that I'll show you is that you can have um a user uh you instead of having the user have to select the file you can actually also have a user uh uh able to just take a text file and drag it into the browser drop it in the browser and have your program process that file and geez why is my phone ringing incessantly I turn that off hold on I'm turning on airplane mode uh okay um so um if you want to learn how to do that I'm going to publish examples that go along with the a toz course that have that in it but I've already made a video tutorial about drag and dropping a file into the browser so uh I'm just going to Google drag in drop shiftman YouTube and I'm sure this video is going to come up right now uh so I'm going to reference you you'll find a link to this video in this video's description and probably some kind of popup thing happening right now if you want to take a look at that you can go ahead and watch the drag and drop a file video tutorial to see how that works all right uh thanks very much for watching this concludes the sequence of videos about how to get text from the user okay um we're doing kind of okay here 1215 I'm not getting to everything I wanted to get to but I'm I mean I'm going to get to everything I wanted to get to this is taking longer than I wanted I need to go get a drink of water um this I this is actually coffee today because I'm a little bit on California time I usually don't like to drink coffee with these live streams because I like to have some like tea or something K mil tea because I'm already kind of tum manic already um okay so um what I want to do next is cover the string object a bit about that in JavaScript I'm going to do a video about that and then I am going to um do a coding challenge but I need to take a break and get a drink of water so you'll have to bear with me oh by the way in the chat are you guys actually hearing that telephone ringing sound I'm just curious I don't know if you are um breakout would be a great coding challenge that I would like to do at some point uh you know the the quick the old retro game stuff gets the most views of anything that I do um uh we are not yes some people are saying they hear it some people saying they could couldn't okay so I probably shouldn't mention it yes we are the that's my iPhone IOS phone ringing thing okay I'll be right back um I'll give you guys some I I need the this dot here uh SoundCloud Daniel oh I might not have set this up so you can hear this uh let's see can you guys hear that I think you can I'll be back just taking a break I'm a live mic here okay I'm back oh it's playing something else now okay uh okay so what I need to do now uh where am I in my syllabus page I talked about load strings preload load strings in a call back user selected files the Drop Zone and text oh I didn't talk about content editable but that's in yeah that's come back to that uh you can find that that's that's by the way there's another thing you could use is a Content editable instead of a text area which I should mention maybe I'll mention that and now I want to talk about strings so index of substring so um I am going I'm going to make a list for myself here of of string functionality I want to cover and I should really invest in some like I don't know some super high te bright dark really good whiteboard markers anybody have any recommendations let me know these like sort of work but after I use them for a couple days they get and these I bought for like five bucks at a pharmacy or something um okay uh index of substring what else is in my list here uh um index of substring length is important length uh split um ah I see okay that's it enjoying okay okay build a Smartboard as a coding challenge great suggestion uh you know what would be what would really work well for me is if I had like a full extra day each week where I could just come here and work on my setup but oh sound effects are not working I'm not playing any sound effects ah they aren't working uh um oh that's funny I think I I probably played a whole bunch of sound effects you guys couldn't hear it's because I didn't set up AirPlay uh from this this is really not worth me wasting a lot of time on but I'm going to do it real quick okay that should get the sound effects going again did you guys just hear that one full screen this let me see if this is working uh okay no my shirt the back of my shirt is not dirty it is a processing sketch okay this is the output the processing output of the code that's on my shirt it's very faded this is like a retro processing tshirt quite quite a while in time and I I wanted to wear my coating rainbow tshirt but it has a green stripe in it I feel like it just makes everybody crazy that the shirt appears seethrough so another time okay uh all right cutting power cutting power um here we go so I am going to look at strings in JavaScript okay so let me get myself set up here uh with another uh example load file uh strings and uh let me set up this example to do something I don't need the text file in this one uh I don't need the um I don't uh I want to have something like this uh uh so I want to have output I want to have input uh I know unicorns in rainbows I live in a Land of unicorns and rainbows uh submit let's see here if I go to here uh strings whoops that didn't work um how do I change the width of uh no anybody know off the top of your head I'm trying to do this input element in HTML how do I change the width like how many how wide it is uh um character with uh input size oh it's an attribute size equals I think it's the number of characters so like 500 will be an insane amount yeah so I just want to make it like 100 uh there we we go so that works um uh yeah uh okay um okay uh I want to get rid of this oh sketch all right okay uh uh txt uh I don't um sorry everybody I'm just uh and output is output submit is submit new text just want to have a basic thing set up that I can do stuff to text okay um okay let's see here I feel like I'm kind of blurry today am I blurry today I never I don't I never Focus the camera I don't have time to that kind of stuff just got to get through this stuff okay so and now the so here's my example here is where this material is coming from uh here's the rainbow Wikipedia page p5js reference going to go here and then I also want to look at this page there we go and this is like a little tutorial which is good but I want the um feel like there's a reference page which I want or maybe it's just because I have the window ah there we go so here okay great I'm running out of steam here everybody okay so two more two more things I want to do today to complete this week one is a quick video about JavaScript string object there's no way for me to focus this without another person so I'm not going to bother worrying about it although I could put like a picture of myself here and I could focus on that I think if I step closer I'm more in Focus which is generally where I'm standing anyway uh I want to do this tutorial about JavaScript strings I didn't get that stupid glass of water I went to go pee and I forgot to get a glass of water hold on a second I'll be right back I'm gonna play you the uh coding Rainbow theme song you a preview of just the theme song since you're being so uh where is it maybe I don't have it local I thought I had it oh wait wait I have it it's just not uh never mind we'll get the instrumental hello something goofy is happen but I'll be right back okay here we am water this is going to make everything better okay here we go and I have over here my list boy you can barely read that but say lovey okay okay all right hello welcome to another programming from A to Z video tutorial in this video I want to look at how the string object in JavaScript so what is the String object in JavaScript if I say vars equals hello I have now made a string object although there's some weirdness up wait time out time out I just thought of something isn't there something where uh I oops there's a weird sort of thing where technically it's not an object until I do this um but it kind of lets you do all the object stuff anyway I think I don't need to get into to that in the video it just sort of like popped into my head uh yeah someday I'll start using es6 stuff but I'm just not ready for that it's not until PE until it's sort of like till somebody tells me that I really I'm just not ready for that barely I barely can keep going right now like my mind is melted but I'm I'm going to do it okay uh how do I clear the console that does not work I thought there was a way maybe it's this ah there we go that button okay try this again uh okay here we go hello and welcome to another programming from a toz video tutorial in this video tutorial I want to talk about the JavaScript string object um so what is the JavaScript string object well if you've ever written code like this bars equals hello now I have a variable and it has a string of characters a sequence of characters in it h e l l o this is a string object so on the one hand I can use this string object to put text in a Dom element I can use it to paint text onto a canvas I can use it to print text to the console but what I'm going to be doing in future videos is manipulate string objects so if I load all the text from a file and I have this big string object with all paragraphs and paragraphs about rainbows and I want to like chop it up and mix it up or analyze it or make poetry out of it I need to learn how to manipulate string objects in JavaScript so this is what I want to look at the basics of and then next week or in the next videos that you might see in the future that might already be there I'm going to look at something called regular Expressions which is really going to uh just like explode the possible things you could do with um text and uh JavaScript but for right now we're going to live with just the string object itself and so if you want to learn about all the possible things you can do with string objects um the place that you I I would say that you can go to is the um Milla document the Billa uh document JavaScript documentation look under reference global object string I'll include a link to this page in this video tutorial and you can see ah there's like a nice little tutorial here that kind of runs through a lot of stuff you can see all of these functions that you could call on strings like index of and normalize and repeat and slice and strike and blah blah blah so I'm not going to go over all of this with you I'm going to give you a little bit of a kind of like weade into the Waters of manipulating string objects you can also find my notes on this on um this particular web page the a toz programming website which uh I'll also link to this page in this video tutorial so I made a list over here on the Whiteboard of things that I want to look at um in this video so I'm going to look at um uh really just three pieces of functionality that have to do with strings a long list of the Milla documentation there's a lot of other ones that I encourage you to investigate and play with but three that I find useful to some things that I might do one is index of another is substring uh the length property of strings is something that you need quite often and then I want to also look at splitting and joining which are operations that I'm going to be doing continuously throughout many uh tutorials and examples in this video series there's a little bit of funny business about this that I have to uh get to and talk about at some point but I'm not going to right now okay so this is my list let's start let's just start like let's go in reverse order or some sort of strange other order let's talk about length so I have a uh example set up already uh right here that you can see first of all I can just say s. length right here I should just be doing all this in the console really if I say s. length you can see I get a length of five because hello has five characters h e l l o let's just look at how we would do this in code right I have a simple sketch which all it does right now is it has a text input box when I hit submit I create a paragraph element with that text input box I can go to my code and one thing I can do is I can say I'm just going to say VAR s equals text field. Val so this is pulling what's in that text field and placing it into a string object and now I'm going to say uh create ps. length so now when I run this code again you can see that text has 42 characters so if you want to build a check to see if your text can fit into a tweet application you can see how oh if it's greater than 140 characters you know spit out this is too long to tweet or whatever so you can see that's one property we can use now here's another property here's another function that's really useful index of so let's say I say VAR s equals hello whoops and I say s index of rainbow what am I going to again1 index of is a function that searches for some text like rainbow in some other text S I'm looking for Rainbow in the text hello well rainbow doesn't exist in the text hello so what do I get negative one negative one means I can't find that subring in that larger string so this can be quite useful to you if a user types in some text and you want to figure out did they type in this word or search for a word in that piece of text now what else how what does it work how does it work if that text is actually there so let's look at that so let's actually add this so I'm going to say um VAR index equals s. index of rainbow and then I'm going to say create P index so I'm going to run this again and now I'm going to hit submit and I got 33 why did I get 33 well I'm going to say rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow rainbow okay and now I'm going to hit submit and you can see I got zero so what is it doing I'm going to say zero 0 1 2 3 4 rainbow I got five so what index of is doing is it's saying hey this is the index of the substring you're searching for 0 1 2 3 4 rainbow starts at index number index five so this can be really this seems sort of like trivial and silly right now but you might load a massive amount of text in and you might want to find where something and this can be good for scraping and parsing ah I want to find stuff that's in between this so I have to find this and where's that and then I want to find something else and then I'm going to use another function I'm going to show you substring to plug something in between so you can see this is what index of does um so let's look at um actually that's fine right now I'm going to leave it at that oh one thing I should mention though is what about the case where I said rainbow rainbow boy do I love rainbows right in this case I always get zero how and but there's only one instance of it's always giving me the first rainbow but look what I can do what if here I say index of um and hold on um let's put this one thing I want to do is sorry I'm GNA put this as the default text in the text box and then here I'm in index of I'm going to do something weird where I'm just going to say comma 10 and I'm going to hit submit and look I got 30 why did I get 30 let me take out that comma 10 I got zero so here's here's something that the index of allows you to do it allows you to say search for the first instance of rainbow after a certain index so by default it'll start searching from zero but here I'm saying just start searching from the 10th character so here's what difficult programming exercise for you write an algorithm that searches using index of for every instance of rainbow so find the first one then search for the next one after the first one then search for the next one after that one and keep doing that until you get a negative one maybe I'll try to post a solution to that or make that as a coding challenge but that's something that you could try to do okay that's index up one more function that I want to show you in this particular video that I think would be useful to you is substring so what I'm going to do now is I'm going to say VAR new text equals s. substring uh 5 comma 7 and I'm going to run this if it's submit oh uh index is not defined uh create piece sorry new text run this again you can see I get oow why because 0 1 2 3 4 five five is the O I want a substring starting at five and where do I want it to end six whoops o w67 oh it's ending on a space bad coincidence there so let me change this and change this to um actually I'll just change the text so I'm going to take out the spaces am I going to get o or am I going to get just o w think to yourself what's it going to be I still get o so this is a little goofy thing with some substring but let's say I have the text h e l l o 0 1 2 3 four if I say substring between one and four I'm including one but I'm excluding four so I'm just getting L there so this is how substring works you might ask yourself well that's annoying that's weird why is it done that way there's actually a pretty good reason which is number one what's the length of this string three substring three what's four 1 3 and often something you want to do is get a substring from some point of the text to the end of the text and in that case all I need to do is say give me a substring and here's something I could do I could say substring from s. length divided by two all the way until the end s. length so this is now my code right give me a substring between the middle of the string and the end of the string you can see do I love Rainbow do I love rainbows there is an answer to this question I don't have a sound effect or anything but the answer is I think you know it's yes okay so uh um do I love rainbows yes so you can see no matter what I this is the first half this is the second half and I hit submit and look at that that's amazing I got this somehow those worked out to be the exact number of characters I don't see how that's possible but it did uh this is the second half you can see how that works I'm getting a substring of the second half so you can think of a lot of here's an exercise for you um what if you have something like this the temperature outside is 72° f write an algorithm that pulls out the number 72 without knowing that it's going to be the number of 72 so no matter what I type here every time I hit submit I get 72 21 50 how do you search for and and by the way also I could change this to a temperature or well the temperature outside is so it's not a fixed length how do you search for where is colon space is so that you know where the number starts and how do you search for where space degrees is so you know where the number ends and by the way it should still also work if I type in 101 so that's a programming exercise for you create a generic phrase of any length that and you need to pull out a subset of text of any of length out out of that phrase um this is just one scenario this has and by the way next week when I do a video tutorial about regular Expressions you're going to see a a totally other magical powerful power way of doing it okay so um this is the end of this uh video tutorial about strings there's all sorts of other things that I've missed this is just a small taste of it try some of those exercises try looking at the documentation page you know pick a random uh function like slice or search and see what a lot of these might require regular Expressions um and see what you get ah I forgot something on my list over here I want to briefly talk about briefly before I leave you in this video I want to talk about splitting and joining so let's just look at this this is an incredibly common operation that I need in so many videos and I could make another video about it but I'm going to leave it in this one so let's look at this because and and I'm going to get to more about this next week with regular Expressions so this is just a little bit of a so I'm going to use so I'm going to use right now there two functions that are part of the P I'm going to show you two functions that are three functions really that are part of the p5js library one is split one is split tokens and one is join now next week I'm going to show you how to use the native JavaScript split function to use regular expression so I'm going to kind of redo this but in this video I'm going to look at the p5js function split and show you why this is so useful all almost all of the text analysis algorithms that I'm going to demonstrate later are based on word counting and one of the things you need to do with word counting is split a paragraph of text and a multiple paragraphs of text into sentence chunks into word chunks that sort of thing so um I'm going to do that right I'm going to show you how to do that with split and it's actually quite an easy operation so um basically I'm going uh and I'm just going to go to the uh sketch right here um whoops there's a a a something whoops just missing here so I'm going to leave this this this this gives you half the text but I'm just going to do something over here in the console which is vars equals uh text field. value so now I have in the variable s rainbow rainbow boy do I love rainbows and I'm going to say split s just see what I get so look at that I say split s on its own I don't really split it but I get an array and I get an array with the entire sentence in there the whole point of splitting text is to take one chunk of text and split it into an array so what if I say s and comma space in quotes you can see now look what I have I have an array with each word as a separate element so I'm going to do a few things I'm actually going to do that right now in my code I'm going to say VAR words equals split s by space and then I can Loop through all of the words and do something with them individually I can say uh create P words index I so now you can see I get a different paragraph element for every word in there now let me add a comma in here and I'm going to hit uh I'm going to hit refresh and I'm going to add a comma in here notice how the first word has a comma H so what might I do in this case I might go to my code and I might say Okay split by space comma or comma space now look what happens I'm going to add the comma in there I'm going to hit submit now I just got two things rainbow and rainbow boy do I love rainbows cuz split by comma space and the only time a comma space appears is Rainbow comma space what I want to do is not say split by comma space split by comma or space and again a regular expression is going to be a nice solution to that but for right now without it there's a p5js function called split tokens and if instead of using split use split tokens it'll actually do that for you so I'm going to do this I'm going to put the comma in there I'm hit submit and you can see now it worked there's ways of retaining the delimiters not retaining the delimiters I'm going to show you more stuff about that uh in a future video but these are just the basic idea split split tokens and join by the way does the absolute inverse so one thing I can do is I could say I could now say words. uh sort I think it'll sort it in Array I think it'll sort it by the default sorting and then I could say uh uh s equals um join words and I think I probably might make a new array so say words equals words. Source sort and then I can say create PS and I'm going to comment this out so what I'm doing now is I'm taking this turning it into an array sorting it in alphabetical order putting it back together and then displaying it and you can see boy do I love rainbow rainbow rainbows and we can see this should be in alphabetical order alphabetical be in order should this so you can see here's a quick algorithm I've done something here here to take a a sentence split it up sort it by alphabetical order and display it back to the user I'm sure you could think of something much more creative to do with this Paradigm of text input and text output and in the next video I'm going to show you uh do a coding challenge about how to implement Jackson mclo dastic uh which I'll explain in the next video as well um as text input text output okay uh thanks very much and yes I apologize for not using Celsius in this video okay thanks for watching and I'll see you soon in the next one oh everybody's now going to leave this live stream and go watch the uh Apple live stream sorry about that I didn't get done is it really 1 o'clock already 1250 is it don't I have 10 more minutes hard if he wants to take a break and just come back and and go eat lunch and then come back in an hour um but uh I don't okay so sorry my shoe is untied I don't know I I need all my music selection I got to add all my music selection uh shoot my shoe is completely untied oh there we go can you see the top of my head I have a little bald spot there can you see it it's popping up okay um blowing my nose sorry everybody ah I this actually output isn't going through but I'm not going to worry about that right now okay um yes I see you guys I fixed it I fixed it I the chat's behind me um okay uh so dastic I was going to put some music on in the background but for whatever reason hold on this might be this might actually be a really quick fix uh there we go let's see if this works so this is random this is noise PE no random algorithm the actual random algorithm itself those numbers aren't related at all you pick like I'm picking random numbers between Zer and 10 9 2 7 6 1 9 4 8 9 2 1 3 I pick nine a lot apparently but with pearing noise I might pick numbers like this 2 3 4 3 4 four five six five 4 five six s five six s five six S 8 9 8 7 six look this is like pear noise performance art 2 1 2 four 5 5 this is like pear noise performance part 2 four eight but with curly noise I might pick numbers like this 2 3 Four 3 four five six 5 4ing noise that ising noise this ising noise that ising noise this this ising noise that is noise so this is noise that is noise noise that is noise so this is noise that is noise that is still silence I see that I'm Broadcasting I'm just about ready to do my today's coding challenge but I want to make sure sound is work okay you hear me great okay okay great thanks everybody uh all right I need something to boost my energy here uh uh okay uh stop over okay um Bo I'm all congested all of a sudden I think I'm getting a cold okay um sorry I'm trying to think of okay Jackson mlo uh oh I'm gonna go to the Wikipedia page I think and I think sorry everybody I'm just finding okay the song is loud okay apologize apologies for that okay sticker okay ah okay I'm going to do a coding challenge where I reference Jackson micho diic technique virtual Muse experiments in computer poetry I will explain what what a dastic is how it works I think I need the Whiteboard for that let me see if um yeah I'll I'm trying to determine what my best marker option is I'm trying to get some energy back I'm okay here we go if I step over here I can read it okay uh okay I gotta I got to do it now one of my restrictions for this is I'm going to do this without using regular expressions and just kind of basic string parsing um and uh but I will next week revisit this uh with looking at regular Expressions okay marker a bunch of different marker options some water cing rainbow Dan right you guys are still here watching enjoying this you're all watching the Apple live stream now which which is good okay here we go oh I need to put some uh my processing stickers up higher you can't see them advertise only the top stickers get featured I'm gonna have to work on that I need a new laptop just so I can redesign my sticker setup okay hello welcome to a coding challenge this coding challenge is going to be pretty different from other ones I expect this might be something that a lot of you watching my YouTube channel may not have heard of or thought about before but I'm going to implement something that called the he maybe he was 21st century too when did he die Jackson mllo 2004 I'm not going to say 20th century that was silly starting over again and I think I can just leave this I don't need to be zoomed in on this either uh okay um okay let's try this again hello and welcome to another coding challenge video in this coding challenge I'm going to implement ah oh wait oh no sorry I saw like something in my preview pane that was an overlay that's not this is going to be it you guys hello and welcome to another coding challenge video in this coding challenge I'm going to implement something called a dastic machine so the dastic machine that that I'm going to build here is going to be based entirely on a technique a diic technique invented and pioneered by Jackson mllo uh artist poet uh composer playright um who pioneered a lot of algorithmic chance operate techniques with around language to generate poetry um without the use of a computer so there's a long history of artists and Poets working with algorithmic computational methods or to generate language to analyze language and this is something that it's really easy to forget in the world of con of computers and learning to program that so much of this kind of stuff can be done manually and I encourage you to explore ideas similar to this with manual processes before you start to implement them digitally as a way of exploring and playing around you know there's another famous example is William Burrow's cutup method which is called the cut up because it's literally about making new text from folding and cutting preexisting texts and mashing them up together which of course you could do with a computer but you could also do with scissors and that sort of thing but um let me get beyond that a great reference for this by the way that I'll also mention is the virtual Muse experiments in computer poetry um this is a book that you can um I'll link both to Jackson mllo pages about Jackson mllo as well as the virtual news a book in this uh video tutorial but let me just read to you the description of the dastic machine um uh from excerpted from uh Charles O Hartman's book the process began with a striking phrase from Virginia Wolf the ways ridiculous in Picadilly this is going to be known as the seed phrase so in the program that I'm going to write I need a seed phrase uh he reread the novel this is referring to Jackson mllo looking for the first word that like ridiculous began with an R then read the next word following that had like ridiculous I as its second letter then the next word whose third letter was D and so on until he had spelled through the whole phrase so if that didn't make sense to you let me come over here and kind of diagram this out for you so let's say surprise surprise I have the word rainbow and I have some text like Ralph sat on that didn't work actually painful uh ferns okay I'm designing something uh I'm designing something to work precisely uh in a way that I could demonstrate this so let me look in this text for a word that starts with r aha Ralph let me work look in this text for a word that has its second letter a SAT let me look for a word that has its third letter I not on and ah but painful sat painful it's Fourth letter N Fe e or ferns so you can see this idea of taking this C phrase and finding words in the an existing body of text with just the single letter in the same spot and creating a new phrase out of that and this is a way in a sense of saying I want to generate poetry but I the writer don't want to play a sort of human being role in it other than sort of selecting the seed phrase and the source text let the algorithm kind of do the talking so to speak and this is I think that you as a as a viewer of this video I would encourage you I'll reference some other examples of this to generate your own system for doing this and see what types of outcomes you can get maybe you'll make a twitterbot from it that sort of thing um okay so coming back over here let's go and start with um I have an empty sketch here an entirely empty p5js sketch and I'm saying no canvas because I don't want to see a canvas I'm not drawing anything in this and I'm going to uh just find this here and you can see there's a I put a header in the HTML file Jackson mlow dastic and I don't see anything on the page so the first thing that I need to do is I want to get a seed phrase I'm going to let the the user type in the seed phrase so what I'm going to do in the HTML file is I'm going to say uh make a paragraph element and I'm going to say uh seed colon input uh ID equals seed uh Slash input and I'll I'll add I'll make sure it starts with rainbow so now we can see I have on the page uh seed and I started that with rainbow now I need to in my program get access to that and also I I I think it might make sense for me to uh add a button ID equals submit and submit will be the text of the button so I'm adding that in so now I have seed rainbow and I have a submit button and I want to attach ah so now I want to attach an event so this I have to do in JavaScript because I'm now if this is the structure of the page in HTML and now I'm just going to affect the behavior of the page in my JavaScript script code so I'm going to say uh I'm going to say VAR uh seed equals select seed VAR uh submit equals select uh submit and submit. mous pressed now I'm going to do something I haven't done in a lot of my other videos I tend to stay away from this I could just say like do the thing and then Define that function down here but I'm going to take this as an opportunity to show you something which is an anonymous function I'm just going to put the call back right in here oh that's very awkward looking but it's actually kind of a nice way of writing condens code when you click the mouse on The submit button button button the submit button execute this code that's inside this Anonymous function it's anonymous because it doesn't have a name so what do I want to do right there just to see that it's working I'm going to say create pced well obviously going to need to do uh an not seed but seed. Val the text of the seed itself and I'm going to have to do a lot more there of course but I'm just going to say that for right now so now if I hit submit we can see this page is doing some basic stuff that is at least getting the seed so I have the seed right now I have this seed in my code I need some sort of source text to use to be the words that I search for so the way that I'm going to do that is I'm just going to load from a text file and I happen to have a text file here which just has a lot of text from Wikipedia page on rainbows so I'm going to do it the easiest way possible in my code with just preload so I'm going to write a preload function and I'm going to have a a global variable called Source uh text I'm going to kind of call it a goofy name I'm going to say Source text equals load strings uh rainbow. txt and one thing you might recall uh if you watch some of my other videos is that the load strings function loads in the text but loads it as an array so it gives you each line in that text file as an array and so what I'm going to do in setup is once that text is loaded I'm going to say Source text equals join Source text with the space so I'm going to get rid of that array and join it so I have one long string so now I have one long string and I just got to make sure it's there I'm going to also say create P Source text so now if I hit run I if I reload the page I have a seed and I have the source text so now I've set up the page that's just sort of step one now I actually need to implement the dastic algorithm okay so let's go back to our code and do that this is going to be fun and actually I just realized here's something that I want to actually do I want my for my diticom I want the source text not to be one long string but I want it to be just a u array of words a list of words so I'm going to um I'm going to create create a global variable called words and I'm going to say words equals split and I'm going to use the p5js function split tokens and I'm going to say split that Source text up by and split tokens says whatever these are the delimiters the second arguments are the delimiters I want to split it up by space comma exclamation anything that's basically um you know something that's not uh so you know I could I could do this much more effectively but I'm just going to do that right now now and I'm going to do this and I'm going to look just in the uh debugging console and I can see I have an array of basically many many many many words so I have all the words of an array with every single word as a separate element in that array and you can see that it's uh 2,132 words long so this is what I'm going to be able to use now I'm going to search through that array to find words that have and by the way it's probably going to find rainbow over and over again but I'll I'll deal with that later because I'll give it a different seed phrase Okay so here we go um now what I want to do is instead of creating those paragraphs I want to say let me execute a dastic with what I want to pass in the value of the see the seed and I want to all of the words so I'm going to write a uh and I'm going to um uh I'm GNA have that function take a seed and an array and that function will return a the the the results of this so I'm going to come back over here and I'm going to say what for VAR I equals z i is less than c.length i++ and then the character that I'm working with is seed car at boy um this is a function that's part of the JavaScript string object that I think I neglected to mention in some of my other videos If I say car at I I want the character at index I right and in a string all characters have an index index zero index one index two so if a string is five characters long like hello the the index the indices go between zero and four so once I have that I want to then have another loop and what do I want to Loop through I want to Loop through all of I want to Loop through every single one of the words and I want to say if C if words index j. Cari equals c then I have found a word right I found a word that has its own character at the same spot I as the character I'm looking for and once I do that I'm just going to say console.log just to see if this kind of idea works and break so here we go I'm going to run this program now I'm pretty sure uh I'm going to run this we should see a bunch of things um so look at this I got rainbow seven times so first of all let's do a different seed phrase uh this is you know testing one just do testing one you can see I got t e s t i n uh o e and that's all so you can see you can see this worked now I got some of them twice so here's the thing one thing I need to build into this is I need to say after the reason why I got rainbow seven times it's because my Loop starts over every single time so every single time I find a word I go R matches with r then I go a matches with a so one thing that I need to change about this is I need to while I'm doing this keep track of some things so I need first of all I need to have a PHA I I want to kind of have a phrase which starts like this and when I find the word I want to say phrase plus equal I want to concatenate so the plus operator joins two strings together I'm going to say plus equals words index J and then I'm going to say return phrase so one thing that's going to be nice about this now that I've done this is I can stop using the console for debugging and I can say uh create P phrase so let me run this again and you can see I got rainbow rainbow rainbow rainbow rainbow rainbow rainbow and I say uh test I got that meteorological dispersion that so one thing I want to do by the way is I also want to uh add a space so I'm going to do this a sort of silly way but I'm just going to have two lines of code there and you can see rainbow rainbow rainbow rainbow rainbow so now what I want to do is make sure I look for the next instance of a word after the first one I found so um I'm going to keep track of that index uh or like current word equals zero so I want to start my Loop when I look through all the loops from current word so I want to go from current word to the end of that array and as soon as I find one I want to say current word equal J + 1 I want to go to the next word so instead of this Loop of searching through all the words always going back to the beginning I want to save where I last found one and start from the next one so this should do this rainbow caused rainbows rainbows rainbow rainbow rainbow so I'm still getting a lot of rainbows but I can now say things like um uh I love yeah um is do unicorns exist question mark so during good about during moonlit numerically Direction encounter dispersion brightness now amazingly I'm not getting any errors here and I probably should do some error checking like what if I got to the end of the array and I don't have any more where more to look what if no word exists with that in there um so I'm going to sort of leave this as that I'm going to release this code I I you know another thing that I could do is track all the possible um words that have a o is the second letter and I could always pick a random one so that each time I hit submit I get a different one that's something that you might add to this um arrow cheing is something that you might add U I don't know if I'm if there's anything weird happening when I have a space because I'm actually space is technically a character that I'm checking so question mark is in there but it seems to be working um let's just uh uh d o space u as fourth letter so you can see so I got do some stuff clean up that sort of way um uh um so right so um so I probably missed some things uh but I I encourage you who are watching this video to play around with this code make your own diticom generate poetry share it share it with me share it with the world uh and explore other types of ideas and I'm if you're in the programming from A to Z playlist the next video I'm going to talk a little bit more about this and a homework assignment for this set of material and some other types of techniques and Al historical algorithms like the dastic that you might look at as well okay thanks for watching and I'll see you in another video maybe perhaps someday okay everybody I think I did that successfully um which um I I want to see how many viewers Have I Lost there's still 74 people watching so I need to do one more video um give me a second here okay so the last thing that I'm going to do today the last thing that I'm going to do today is talk about a homework assignment for those of you who are following the course and way I want to do that is I want to look at flesh index cutup machine eraser poetry machine uh um n Plus oh okay okay all right last video of the day hold on okay ulipo ulipo um n+ 7 technique uh cutup machine flesh index calculator the dastic uh uh n plus 7 this is a great example machine hold on are you sure and where's my example ah sorry everybody when I get to the end of these live streams I can barely keep it together okay okay okay all right what are you doing I'm losing my mind is what I'm doing okay here we go wrong sound effect but whatever um I'm going to cycle the cameras I'm going to finish this off for today action please uh yeah modulus modulus strings. length would be a great uh a great tip for adding to that previous program I wrote okay hello I think I have to use this like musical beginning gets me kind of it feels like I'm making a video hello uh this is the last video for this week's session of no the week is irrelevant because people are going to be watching this on YouTube later musical okay hello in this video if you're choosing to kind of follow this programming from a toz playlist as a course that you're doing over some period of time I'm going to talk you through homework assignment or exercise that I think is useful to do before you move on to the next set of videos and if you're interested in uh participating in a slack Channel where you can share and discuss these assignments uh please check this video's description for a a link to the patreon uh crowdfunding system that I'm using for that particular slack Channel but of course you could just do it and share it with me on Twitter or in the YouTube comments and i' would love to see the things you guys are making so here's what I think you should do number one is I think um uh okay so I in in the previous coding challenge where I implemented Jack mllo dastic technique one of the things that you can try to do for this homework assignment is invent your own constrained writing technique so constrained writing is a sort of form of writing based on an algorithm or some sets of constraints uh there's a French Collective of writers known as ulipo um who pioneered a bunch of different techniques um one of them is known as the N plus 7 technique uh this is a nice uh website which I will also include um which which uh implements this particular technique uh in French it's actually referred to as s plus 7 um and the way that this work n plus 7 you look at a body of text you look for every single noun in that text you find the the noun for every noun in a body of text you look up that noun in the dictionary find the seventh seventh noun after that one and replace it back into the text and now you have a new text sort of with randomly generated new nouns based on the order of appearance in a dictionary so you could try to one thing you might do is just Implement one of these algorithms like make your own n plus 7 web page you can see this web page works very similarly to um to to a lot of the examples that I've demonstrated for you uh another kind of famous example is uh this is one of my examples that you can find in the a toz uh GitHub repository this is using William Burrow's cutup method which is actually a physical method of cutting up text and folding text and mashing it up you can see that I have a slider which sort of determines how much of the original text to keep you can drag a file in use a textt sample so one thing I'll mention is this frame of reference is a good reference for to use where it's kind of giving the user a lot of options enter some text drag a file in use a preloaded text sample um an eraser machine eraser poetry not to be confused with the band eraser Q eraser music now um is a technique I'm going to load just load a text sample in right now which is a spam email that I received at one point and you can see I'm using Dom manipulation to click on all these words and actually uh erase them but I could come up with another system like erase every seventh word or erase every verb or erase every word that starts with e so and you know I can also by the way based on how I'm doing this keep the spacing or remove the spacing and what types of sort of generative poetry could you create out of the Eraser algorithm so but even though I'm showing you these digital versions of it you might want to wait until next time after you've watched the regular expression videos to actually Implement your interactive webbased version of it as a constraint on yourself invent your own algorithm to do by hand get a newspaper get a magazine get a book invent your algorithm write the instructions for the algorithm and execute those instructions and get your new text and then present those instructions and present the result on a web page so think about one of the things I'm asking people to think about is how do you have a selfdocumenting web page so instead of presenting kind of the result and then having a blog post that explains it could you a web page that kind of has the instructions has the result kind of documents itself and you and something you might consider using is GitHub pages to host it so get yourself set up figure out GitHub Pages get yourself an account review HTML and CSS for yourself think about creative constrained writing techniques and generate um generate the content and release it online um yeah so uh give that a try uh share it with me however you might find it useful to share and I encourage you if you want to ask questions or discuss your work uh with me and a group of peers um you know consider joining the patreon slack Channel as well if you're enjoying what you're kind of watching so far and I'll be back in a next set of videos they might be there by now if you're watching this much later than when I've recorded it but uh otherwise we'll be back about a week from now okay and uh enjoy and I will see you sometime soon thanks for watching okay uh I think I I think I'm done for today this was a um what time is it it is 130 so this was at least this was about I say about 3 hours and 15 minute live stream which is about 45 minutes longer than a class at ITP I'm completely exhausted uh thank you guys for sticking with this I suppose there's like a new iPhone now that I could buy or something because I don't have enough like Apple devices all around me um and uh I'm going to see you guys next week if you if any I'm going to it's going to take me a minute to kind of get myself situated here I'll leave the stream going for a minute uh if anybody wants to ask a question uh please do so I think I've lost most everybody are you there are you there YouTube viewers it's me Margaret I don't know if you'll get my reference but uh I can turn my phone off of airplane mode now um I can see all these notifications that are coming in etc etc uh I think people are saying yep like you're still watching okay did that come through the homework assignment do people miss it um Roberto in the chat writes in short learn HTS CSS and how to use GitHub all in week on your own so that sounds a little harsh I think you were probably just in a friendly way translating what I said but uh just so you know I have resources and videos for all of those things that are part of this week's material they're just not what I recorded today uh all right so I'm going to go uh thank you for watching um I'm GNA put on my background music I guess I'm just going to close out my windows um I'm going to just see if there's anything in the chat people are saying thank you which is very nice positive feedback is welcome and encouraged negative feedback is also absolutely welcome and encouraged any feedback is welcome and encouraged uh you know be nice if you can but uh positive negative constructive criticism uh uh uh when will the code of this session be loaded great question um I will okay so a couple things this is confusing and uh I I'm I'm I don't know if you're actually still there watching but um so the code that should be referenced in these videoos descriptions should be in two places one it should be in this a to z F16 repository which is my example repository for the class so basically everything that I'm doing in this video session there there there should be like duplicate examples that are mostly similar in this repository and that's already there but I will also if I go to my uh coding rainbow rainbow dasc code what I will do is create a new folder probably called A to Z uh obviously the coding challenge code will end up though in the challenges folder but the I'll get this stuff up on GitHub within the next 24 hours uh and uh there we go uh it answered that question I love that people thought the back of my shirt was dirty it's the it's a processing design uh support processing in p5js consider making a donation it's a plug that I should always uh uh make uh people I love that people want to support me and I appreciate that as well um but if you another way of supporting me um directly or indirectly is I don't know why is not sadly the processing Foundation website isn't loading for whatever reason but I encourage you to do that um okay that's it for today uh thanks for watching again there's the pring Foundation website uh support encourage you to do that prosing is a nonprofit um 501c3 United States uh Corporation goodbye everyone and I look forward to seeing you in a future session
