With timestamps:

00:00 - alright I'm back and in this video I am
00:03 - now going to look at how to actually
00:04 - make use of this data set just as a
00:07 - reminder this is the quick-draw data set
00:09 - by the way there is so a much goofy fun
00:13 - creative interesting things you could do
00:14 - with this data set that have nothing to
00:17 - do with this whole machine learning
00:18 - neural network and nonsense stuff so
00:20 - hopefully this video will be useful for
00:21 - you anyway and encourage you to make
00:23 - creative project with the data set and I
00:25 - will try to link in the video's
00:26 - description to some projects that other
00:27 - people have made but let's talk about
00:29 - how I'm going to get access to this data
00:31 - and use it so one thing we know here's
00:33 - all that kitty-cats and we can say look
00:35 - why I really like this one so I'm going
00:37 - to look at this one click on it so one
00:38 - thing you'll notice it's got a number it
00:41 - actually is it's got a its it has a date
00:46 - when it was drawn and what country it
00:48 - was drawn from which is interesting by
00:50 - the way in light of my discussion of
00:52 - missing data sets and the work of me me
00:55 - oh that I talked about a little bit in
00:56 - the previous video thinking about when
00:58 - you're working with a data set where
01:00 - does it come from who collected it
01:02 - what's missing from that data set why
01:04 - are you using it is what you're using it
01:07 - with going to hurt somebody think about
01:09 - these questions now fortunately for us I
01:10 - think we're just gonna make a fun goofy
01:12 - drawing thing and I think we're going to
01:13 - be ok but those are really key and
01:16 - important questions now this is a nice
01:18 - little interface to look at the data on
01:20 - github however I can go to github quick
01:23 - draw dataset and here is the
01:24 - documentation for what kind of formats
01:26 - the data is actually in so if I scroll
01:28 - down here for a little bit we can see
01:30 - the data is actually available in these
01:33 - nd JSON files now what's interesting
01:36 - about this is you can see like oh look
01:38 - there's an ID every single drawing as a
01:40 - unique identifier and I know I'm
01:42 - standing in front of some of this so let
01:43 - me move this over it has a word which I
01:47 - would assume is the category yes what
01:50 - the what the player of the game said
01:52 - will you please draw this and when it
01:55 - was created what country and then the
01:56 - drawing itself and look at this look at
01:58 - all these numbers what are those numbers
02:00 - so if you remember from my previous
02:02 - video what I'm trying to do is do image
02:05 - classification with a simple 28 by 28
02:07 - pixel image but the data itself is
02:10 - actually all of the
02:13 - two points the path of the drawing and
02:14 - that's why when I'm on this page as I
02:17 - hover over it you can actually see a
02:18 - replay of how the thing was drawn itself
02:21 - so that's something I would hope to come
02:22 - back and make a future video about using
02:24 - that data but what I actually want to
02:27 - use I'm going to go back to here is a
02:29 - different way that the data is formatted
02:31 - so there you can go in here there's
02:32 - binary files but this is what I want
02:35 - numpy bitmaps so a number is a special
02:40 - data format that stores all the pixels
02:43 - of a bitmap version of the drawing in a
02:46 - format that the Python library numpy can
02:49 - read very easily with n P load now if I
02:52 - were a person who lived in the regular
02:54 - world I would see this and go oh perfect
02:56 - I'm just going to go and do my project
02:59 - with numpy because that's what people do
03:01 - but I am a person who lives in this
03:04 - weird world of wanting to do things in
03:05 - JavaScript and in the browser and
03:07 - sometimes in processing so what I want
03:09 - to do in this video is look at how I can
03:11 - get access to the numpy bitmap data
03:14 - format in an environment that's not
03:16 - numpy and then kind of clean or
03:19 - normalize or organize the data in such
03:21 - way that I can use it for my machine
03:25 - learning doodle classification project
03:28 - alright so let's get the data if you
03:33 - click through and read this
03:33 - documentation you'll find that it is
03:36 - here the data is available on the Google
03:37 - cloud platform if you want to listen to
03:42 - me nevermind I was thinking is longer
03:45 - layer that I think I shall not speak
03:46 - about and so these are all the different
03:49 - formats I'm gonna go here under numpy
03:51 - bitmap and I'm gonna see ok look at this
03:53 - now I think we have to start with
03:56 - Rainbow Oh guess what
04:02 - alright so I'm gonna get the rainbow dot
04:05 - n py file and it's downloading it's a
04:09 - very large file it is about a hundred
04:11 - megabytes so I don't know how many
04:13 - drawings are in that exactly we're gonna
04:16 - figure that out when I open up the file
04:17 - but what I want to do is make for myself
04:20 - I want to make a little simple training
04:23 - and testing set with just a thousand
04:25 - drawings in it
04:26 - again to do this kind of work
04:28 - effectively the more data I have
04:31 - probably the better but to demonstrate
04:33 - it in a quick and friendly way in a
04:35 - YouTube video using a small data set
04:38 - it's probably gonna be best and then you
04:40 - the viewer could take my code do
04:42 - something with it kind of expand the
04:43 - data set alright so it's sort of
04:46 - downloaded by now I'm going to work with
04:49 - pre-processing this data in the
04:51 - processing programming environment which
04:53 - is a Java based platform I could do this
04:56 - in Python I could actually go directly
04:58 - to JavaScript now but I'm just doing
05:00 - this to demonstrate it and it's kind of
05:02 - what I would do because I know
05:02 - processing the best probably so I'm
05:04 - gonna just make a little sketch called
05:07 - quick-draw data let me put it on the
05:09 - desktop I'm gonna open up the sketch
05:13 - folder and I'm gonna grab this file and
05:15 - put it in there in theory what I should
05:17 - do is probably make a folder called data
05:19 - and put it in put it in there and then
05:24 - I'm just going to rename it it has a
05:26 - long name I'm gonna rename it to rainbow
05:28 - dot and py okay so now processing one of
05:33 - the reasons why I pick processing is it
05:34 - has a function called load bytes and I'm
05:37 - gonna say I was about to say let but I'm
05:39 - gonna say byte and I'm gonna say byte
05:42 - boy I've forgotten how to program in
05:45 - Java byte a data equals load bytes
05:49 - rainbow npy so this is a nice little
05:53 - function let me bring the console up
05:54 - here because I'm on a console prints it
05:56 - up to the console let's just say print
05:59 - line data dot length so I'm gonna run
06:03 - this and we can see look at that that
06:06 - data that array I now have 99 million
06:12 - bytes so interesting let's try to figure
06:14 - out how many images that is well I know
06:16 - that each image is 28 by 28
06:19 - and so that's 784 total so total equals
06:26 - data length divided by 784 and let's see
06:30 - what we get now I really should do this
06:32 - as a floating point just whoa and let's
06:35 - let's print line total
06:39 - so that's about a hundred twenty-six
06:42 - thousand images now the thing is this
06:43 - isn't actually correct and if I wanted
06:45 - to do some research most data files will
06:48 - actually have bytes at the beginning
06:50 - that aren't the data you want but are
06:52 - something called header bytes and those
06:54 - header bytes describe the data like this
06:56 - is what's in here this is what format it
06:58 - is this is how much of it there is and
06:59 - what I probably should do is look at the
07:03 - numpy binary file data format if I
07:10 - google that I'm gonna get somewhere and
07:13 - I'm gonna get some page that explains
07:15 - the npy I should just scratch that it
07:19 - should just look for npy file format and
07:22 - I'm going to find some information about
07:25 - how its formatted here's the thing I
07:27 - looked at this yesterday and I happen to
07:29 - know that there's about 80 extra bytes
07:31 - on the beginning not about exactly 80
07:35 - extra bytes so what I'm actually gonna
07:37 - say is data dot length minus 80 because
07:40 - that's how many bytes that are actually
07:42 - in that array that have to do with the
07:43 - pixels and we're gonna see that's
07:47 - exactly how many 126,000 images so let's
07:50 - just see if everything's going correctly
07:52 - we could at least look at the first one
07:54 - so what I'm gonna do is I'm going to
07:57 - create a variable called start I'm gonna
07:59 - say start at 80 and then I'm going to
08:02 - look at 784 bytes and the index is I
08:09 - plus 80 and what I want to do is also
08:12 - create let me make an image that is 28
08:17 - by 28 let me load the pixels of that
08:20 - image because I'm gonna write the bytes
08:21 - into an image so I can look at it and
08:23 - then I'm gonna say int Val equals now
08:27 - we're gonna run into an issue but I'll
08:29 - fix it anticipating things oh and I need
08:31 - to say RGB so when I say create image
08:34 - I've got to say RGB so value equals what
08:38 - did I call it just data data oh and this
08:41 - should be plus start data index data
08:45 - index that's the value and then I want
08:47 - to say image dot pixels I equals that
08:51 - value then
08:53 - say image update pixels and then I want
08:57 - to just draw that image image zero zero
09:01 - look at that oh is that really a rainbow
09:04 - I maybe I should I should have picked
09:06 - something else because I kinda wanted to
09:08 - see like is this really right so that is
09:11 - the first rainbow now please a little
09:13 - wait like why is there some yellow and
09:14 - some blue so I haven't been for I
09:16 - haven't been very thoughtful about this
09:18 - one thing that's happening is the byte
09:20 - values that are actually coming in there
09:21 - are signed bytes so they're going to
09:23 - have be between like negative 127 and
09:26 - positive 127 or something approximately
09:28 - like that so I can actually apply a
09:33 - bitwise operation and I just sort of
09:36 - like and it with some hexadecimal
09:39 - numbers I could kind of go through that
09:41 - in a different video but this is going
09:43 - to I believe if I'm doing this correctly
09:44 - change it from an unsigned byte to
09:46 - assigned byte to give me a range between
09:48 - 0 and 255 so I I should try to link to a
09:51 - resource about bitwise operations or
09:53 - make one myself at some point so now you
09:56 - can see okay well that's weird now it's
09:57 - blue well the reason why it's blue is
10:00 - I'm actually this is a number between 0
10:03 - and 255 val is and I'm setting that
10:07 - number to be the pixel color but a color
10:09 - is an RGB color so in processing if I
10:12 - just wrap this in the color function
10:14 - it'll take that number and make it into
10:17 - an RGB color with that value as the red
10:19 - green and blue value okay so now we
10:23 - should see there it is there's
10:24 - somebody's rainbow alright so let's get
10:27 - a little further with this now let's
10:30 - make a window that's 280 by 280 let's do
10:35 - this let's have let's forget about this
10:38 - was just for my own curiosity let's say
10:41 - we're going to look at 200 100 images
10:45 - right 10 let's say 10 at 10 by 10 so I'm
10:49 - gonna say for int N equals 0 n is less
10:52 - than total and plus plus we're going to
10:56 - do this we're going to do this 100 times
11:00 - and so the start is 80 plus n times 780
11:07 - right because each image is gonna start
11:10 - by the eighty header bytes and then how
11:13 - what image were on times 784 pixels so
11:17 - even if I just did this right now we
11:20 - should see there's the last rainbow I
11:22 - just drew them all on top of each other
11:24 - but now I need to get an X value which
11:27 - is n modulus 10 right because I want the
11:32 - sort of column to be modulus 10 being
11:36 - the remainder of dividing by 10 so the
11:38 - column goes 0 interview Friday night 9 0
11:39 - 1 and the y value to be n divided by 10
11:43 - so the for the first 10 I'm in row 0 for
11:47 - the next 10 I'm in row 1 and so now I
11:49 - should get ooh what did I do wrong there
11:55 - did something wrong oh yeah yeah yeah
12:00 - whoops so I forgot this should be well
12:03 - okay this should be 28 and these should
12:05 - all be in variables right because
12:08 - they're each 28 by 28 pixels wide so I
12:12 - guess I was drawing the last one 10
12:14 - pixels over that was the problem
12:20 - format won't do it for me okay there we
12:24 - go all right so they're all my rainbows
12:26 - I don't like how they're white on black
12:28 - so I'm just going to say 255 minus and
12:36 - come on there we go rainbows okay all
12:44 - right so we've done it we've accessed
12:45 - the data I kind of understand how it
12:47 - works now what I want to do is save it
12:50 - out into a format that I can easily use
12:52 - in p5 I'm thinking about this so on the
12:59 - one hand I could save this to like I
13:03 - could rewrite the data to like a JSON
13:05 - format that I'm happy with I'm gonna
13:08 - weirdly I think what I want to do is
13:09 - load the data in as binary into
13:12 - JavaScript because I think it's probably
13:13 - worth doing that as an exercise yourself
13:15 - you might think about rewrite it's it's
13:17 - also processing it's a bit convoluted to
13:19 - write out a JSON file for
13:20 - processing although quite possible so I
13:22 - think for simplicity what I want to do
13:24 - now is just save bytes so let's say what
13:28 - I but what I want to do save a file with
13:31 - only 1000 images in it right because I
13:34 - don't want to have to carry with me this
13:36 - 100 megabyte file while I'm just trying
13:38 - to learn and figure this stuff out so I
13:39 - make a much smaller file with just a
13:41 - thousand in it and so let's look at how
13:44 - I would do that
13:45 - so I'm going to create a variable I'm
13:50 - going to call it out data and it's a new
13:54 - byte array with total times 784 and
14:01 - again the other thing is these numbers
14:04 - are never gonna change so I'm kind of
14:06 - happy with just hard coding them in
14:07 - there but obviously I should refactor
14:09 - and make all 28 and the 784 I mean all I
14:12 - need is that 28 and the 80 could be a
14:14 - variable but we're gonna be fine so I
14:16 - want to save I'm gonna say about 200 287
14:20 - or 100 of these images and so while I'm
14:23 - going through here I'm just going to do
14:25 - out index is zero so every time I get a
14:29 - new value I'm just going to say out data
14:34 - out index equals that value and then I'm
14:39 - just gonna say out index plus plus so as
14:42 - I'm going through I'm just going to
14:44 - write in this mmm so this is actually I
14:47 - made this into an integer so I could use
14:49 - it in processing I think if I do this it
14:53 - will be happy with me I might have this
14:56 - same anyway so I think that that I think
14:58 - is gonna be fine and then what I'm going
15:00 - to do is at the very end I'm gonna say
15:04 - save bytes what where does this Rainbows
15:08 - 100 I'll call it dot bin for binary
15:15 - Rainbows 100 bin and out data so this is
15:22 - a function in processing that will save
15:23 - that array of bytes to a binary file and
15:27 - calling it rainbows 100 I'm gonna run
15:29 - this we can see now I should be able to
15:31 - go to the directory we could see there
15:33 - it is and how big is this file it's just
15:35 - seventy-eight kilobytes so I have a
15:37 - hundred of them in a just a binary file
15:39 - but that's not let's let's let's save a
15:41 - thousand of them and now that I'm saving
15:43 - it I think probably there's no reason
15:46 - for me to have the image anymore
15:48 - so let's because I I the image is just
15:51 - to like sort of see that it works so let
15:54 - me comment that stuff out and now I want
15:59 - to save rainbows 1000 and I'm gonna run
16:02 - it and there we are
16:06 - rainbows 1000 been and this is this file
16:10 - is just 784 kilobytes so this is really
16:15 - nice
16:15 - because now when I move over to
16:16 - JavaScript I could kind of use this very
16:18 - like lightweight data file that I can
16:20 - play around with and later I could go
16:22 - get the full numpy file or and I have
16:25 - this processing sketch which just allows
16:27 - me to quickly work with the data and
16:28 - resize it reformat it that sort of thing
16:31 - okay so this is now the end of this
16:34 - particular video in the next video what
16:36 - I'm gonna do is look at loading these
16:40 - data files into JavaScript and dividing
16:42 - them into training and testing training
16:47 - and testing datasets to use them
16:49 - ultimately with the neural network and
16:51 - in between you watching or me recording
16:54 - this particular video on the next one I
16:56 - will go ahead and make a bunch more of
16:58 - these so I will make one for trains and
17:00 - one for cats I think I'll just do three
17:02 - I don't know maybe when I come back I'll
17:04 - have to pick some different ones but if
17:06 - you know pause if you're watching this
17:07 - as a playlist maybe go and play around
17:09 - with this data yourself think about how
17:10 - you might draw it in a different way in
17:12 - processing or an mp5 and have some fun
17:14 - and I'll see you in the next video
17:16 - [Music]
17:25 - you

Cleaned transcript:

alright I'm back and in this video I am now going to look at how to actually make use of this data set just as a reminder this is the quickdraw data set by the way there is so a much goofy fun creative interesting things you could do with this data set that have nothing to do with this whole machine learning neural network and nonsense stuff so hopefully this video will be useful for you anyway and encourage you to make creative project with the data set and I will try to link in the video's description to some projects that other people have made but let's talk about how I'm going to get access to this data and use it so one thing we know here's all that kittycats and we can say look why I really like this one so I'm going to look at this one click on it so one thing you'll notice it's got a number it actually is it's got a its it has a date when it was drawn and what country it was drawn from which is interesting by the way in light of my discussion of missing data sets and the work of me me oh that I talked about a little bit in the previous video thinking about when you're working with a data set where does it come from who collected it what's missing from that data set why are you using it is what you're using it with going to hurt somebody think about these questions now fortunately for us I think we're just gonna make a fun goofy drawing thing and I think we're going to be ok but those are really key and important questions now this is a nice little interface to look at the data on github however I can go to github quick draw dataset and here is the documentation for what kind of formats the data is actually in so if I scroll down here for a little bit we can see the data is actually available in these nd JSON files now what's interesting about this is you can see like oh look there's an ID every single drawing as a unique identifier and I know I'm standing in front of some of this so let me move this over it has a word which I would assume is the category yes what the what the player of the game said will you please draw this and when it was created what country and then the drawing itself and look at this look at all these numbers what are those numbers so if you remember from my previous video what I'm trying to do is do image classification with a simple 28 by 28 pixel image but the data itself is actually all of the two points the path of the drawing and that's why when I'm on this page as I hover over it you can actually see a replay of how the thing was drawn itself so that's something I would hope to come back and make a future video about using that data but what I actually want to use I'm going to go back to here is a different way that the data is formatted so there you can go in here there's binary files but this is what I want numpy bitmaps so a number is a special data format that stores all the pixels of a bitmap version of the drawing in a format that the Python library numpy can read very easily with n P load now if I were a person who lived in the regular world I would see this and go oh perfect I'm just going to go and do my project with numpy because that's what people do but I am a person who lives in this weird world of wanting to do things in JavaScript and in the browser and sometimes in processing so what I want to do in this video is look at how I can get access to the numpy bitmap data format in an environment that's not numpy and then kind of clean or normalize or organize the data in such way that I can use it for my machine learning doodle classification project alright so let's get the data if you click through and read this documentation you'll find that it is here the data is available on the Google cloud platform if you want to listen to me nevermind I was thinking is longer layer that I think I shall not speak about and so these are all the different formats I'm gonna go here under numpy bitmap and I'm gonna see ok look at this now I think we have to start with Rainbow Oh guess what alright so I'm gonna get the rainbow dot n py file and it's downloading it's a very large file it is about a hundred megabytes so I don't know how many drawings are in that exactly we're gonna figure that out when I open up the file but what I want to do is make for myself I want to make a little simple training and testing set with just a thousand drawings in it again to do this kind of work effectively the more data I have probably the better but to demonstrate it in a quick and friendly way in a YouTube video using a small data set it's probably gonna be best and then you the viewer could take my code do something with it kind of expand the data set alright so it's sort of downloaded by now I'm going to work with preprocessing this data in the processing programming environment which is a Java based platform I could do this in Python I could actually go directly to JavaScript now but I'm just doing this to demonstrate it and it's kind of what I would do because I know processing the best probably so I'm gonna just make a little sketch called quickdraw data let me put it on the desktop I'm gonna open up the sketch folder and I'm gonna grab this file and put it in there in theory what I should do is probably make a folder called data and put it in put it in there and then I'm just going to rename it it has a long name I'm gonna rename it to rainbow dot and py okay so now processing one of the reasons why I pick processing is it has a function called load bytes and I'm gonna say I was about to say let but I'm gonna say byte and I'm gonna say byte boy I've forgotten how to program in Java byte a data equals load bytes rainbow npy so this is a nice little function let me bring the console up here because I'm on a console prints it up to the console let's just say print line data dot length so I'm gonna run this and we can see look at that that data that array I now have 99 million bytes so interesting let's try to figure out how many images that is well I know that each image is 28 by 28 and so that's 784 total so total equals data length divided by 784 and let's see what we get now I really should do this as a floating point just whoa and let's let's print line total so that's about a hundred twentysix thousand images now the thing is this isn't actually correct and if I wanted to do some research most data files will actually have bytes at the beginning that aren't the data you want but are something called header bytes and those header bytes describe the data like this is what's in here this is what format it is this is how much of it there is and what I probably should do is look at the numpy binary file data format if I google that I'm gonna get somewhere and I'm gonna get some page that explains the npy I should just scratch that it should just look for npy file format and I'm going to find some information about how its formatted here's the thing I looked at this yesterday and I happen to know that there's about 80 extra bytes on the beginning not about exactly 80 extra bytes so what I'm actually gonna say is data dot length minus 80 because that's how many bytes that are actually in that array that have to do with the pixels and we're gonna see that's exactly how many 126,000 images so let's just see if everything's going correctly we could at least look at the first one so what I'm gonna do is I'm going to create a variable called start I'm gonna say start at 80 and then I'm going to look at 784 bytes and the index is I plus 80 and what I want to do is also create let me make an image that is 28 by 28 let me load the pixels of that image because I'm gonna write the bytes into an image so I can look at it and then I'm gonna say int Val equals now we're gonna run into an issue but I'll fix it anticipating things oh and I need to say RGB so when I say create image I've got to say RGB so value equals what did I call it just data data oh and this should be plus start data index data index that's the value and then I want to say image dot pixels I equals that value then say image update pixels and then I want to just draw that image image zero zero look at that oh is that really a rainbow I maybe I should I should have picked something else because I kinda wanted to see like is this really right so that is the first rainbow now please a little wait like why is there some yellow and some blue so I haven't been for I haven't been very thoughtful about this one thing that's happening is the byte values that are actually coming in there are signed bytes so they're going to have be between like negative 127 and positive 127 or something approximately like that so I can actually apply a bitwise operation and I just sort of like and it with some hexadecimal numbers I could kind of go through that in a different video but this is going to I believe if I'm doing this correctly change it from an unsigned byte to assigned byte to give me a range between 0 and 255 so I I should try to link to a resource about bitwise operations or make one myself at some point so now you can see okay well that's weird now it's blue well the reason why it's blue is I'm actually this is a number between 0 and 255 val is and I'm setting that number to be the pixel color but a color is an RGB color so in processing if I just wrap this in the color function it'll take that number and make it into an RGB color with that value as the red green and blue value okay so now we should see there it is there's somebody's rainbow alright so let's get a little further with this now let's make a window that's 280 by 280 let's do this let's have let's forget about this was just for my own curiosity let's say we're going to look at 200 100 images right 10 let's say 10 at 10 by 10 so I'm gonna say for int N equals 0 n is less than total and plus plus we're going to do this we're going to do this 100 times and so the start is 80 plus n times 780 right because each image is gonna start by the eighty header bytes and then how what image were on times 784 pixels so even if I just did this right now we should see there's the last rainbow I just drew them all on top of each other but now I need to get an X value which is n modulus 10 right because I want the sort of column to be modulus 10 being the remainder of dividing by 10 so the column goes 0 interview Friday night 9 0 1 and the y value to be n divided by 10 so the for the first 10 I'm in row 0 for the next 10 I'm in row 1 and so now I should get ooh what did I do wrong there did something wrong oh yeah yeah yeah whoops so I forgot this should be well okay this should be 28 and these should all be in variables right because they're each 28 by 28 pixels wide so I guess I was drawing the last one 10 pixels over that was the problem format won't do it for me okay there we go all right so they're all my rainbows I don't like how they're white on black so I'm just going to say 255 minus and come on there we go rainbows okay all right so we've done it we've accessed the data I kind of understand how it works now what I want to do is save it out into a format that I can easily use in p5 I'm thinking about this so on the one hand I could save this to like I could rewrite the data to like a JSON format that I'm happy with I'm gonna weirdly I think what I want to do is load the data in as binary into JavaScript because I think it's probably worth doing that as an exercise yourself you might think about rewrite it's it's also processing it's a bit convoluted to write out a JSON file for processing although quite possible so I think for simplicity what I want to do now is just save bytes so let's say what I but what I want to do save a file with only 1000 images in it right because I don't want to have to carry with me this 100 megabyte file while I'm just trying to learn and figure this stuff out so I make a much smaller file with just a thousand in it and so let's look at how I would do that so I'm going to create a variable I'm going to call it out data and it's a new byte array with total times 784 and again the other thing is these numbers are never gonna change so I'm kind of happy with just hard coding them in there but obviously I should refactor and make all 28 and the 784 I mean all I need is that 28 and the 80 could be a variable but we're gonna be fine so I want to save I'm gonna say about 200 287 or 100 of these images and so while I'm going through here I'm just going to do out index is zero so every time I get a new value I'm just going to say out data out index equals that value and then I'm just gonna say out index plus plus so as I'm going through I'm just going to write in this mmm so this is actually I made this into an integer so I could use it in processing I think if I do this it will be happy with me I might have this same anyway so I think that that I think is gonna be fine and then what I'm going to do is at the very end I'm gonna say save bytes what where does this Rainbows 100 I'll call it dot bin for binary Rainbows 100 bin and out data so this is a function in processing that will save that array of bytes to a binary file and calling it rainbows 100 I'm gonna run this we can see now I should be able to go to the directory we could see there it is and how big is this file it's just seventyeight kilobytes so I have a hundred of them in a just a binary file but that's not let's let's let's save a thousand of them and now that I'm saving it I think probably there's no reason for me to have the image anymore so let's because I I the image is just to like sort of see that it works so let me comment that stuff out and now I want to save rainbows 1000 and I'm gonna run it and there we are rainbows 1000 been and this is this file is just 784 kilobytes so this is really nice because now when I move over to JavaScript I could kind of use this very like lightweight data file that I can play around with and later I could go get the full numpy file or and I have this processing sketch which just allows me to quickly work with the data and resize it reformat it that sort of thing okay so this is now the end of this particular video in the next video what I'm gonna do is look at loading these data files into JavaScript and dividing them into training and testing training and testing datasets to use them ultimately with the neural network and in between you watching or me recording this particular video on the next one I will go ahead and make a bunch more of these so I will make one for trains and one for cats I think I'll just do three I don't know maybe when I come back I'll have to pick some different ones but if you know pause if you're watching this as a playlist maybe go and play around with this data yourself think about how you might draw it in a different way in processing or an mp5 and have some fun and I'll see you in the next video you
