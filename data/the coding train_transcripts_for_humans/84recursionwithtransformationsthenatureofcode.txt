With timestamps:

00:01 - we're we're doing the anterior in this
00:03 - video I want to look at one more fractal
00:06 - pattern the the Franklin pan that I want
00:08 - to look at is something we talked about
00:09 - the very beginning this branching tree a
00:11 - tree which has two branches and each
00:13 - have two branches in each have two
00:14 - branches why do I want to look at this
00:16 - one we've looked at a bunch of fractal
00:17 - patterns already the reason this one is
00:19 - important is in our implementation we're
00:22 - going to make use of translate and
00:23 - rotate transformations in processing and
00:26 - when doing so we're also going to make
00:28 - use of push matrix and pop matrix which
00:30 - is going to be a very interesting
00:33 - technique inside of a recursive function
00:35 - how we do this so let's just first
00:37 - remind ourselves what is this what is
00:40 - the production rule right we start start
00:43 - with a branch which is a line start with
00:46 - line at the end of the line that's one
00:52 - at step two is at end let's say we
00:55 - rotate I don't know 45 degrees or rotate
01:01 - 45 degrees and draw another line then we
01:13 - rotate rotate negative 45 degrees and
01:18 - draw line 8 now for each for 2 & 3 we
01:27 - want to do the same thing go to the end
01:29 - rotate 45 degrees and draw two lines for
01:32 - each of these rotate 45 degrees in
01:33 - Grutter lines so the thing I guess I
01:35 - missed and described in these production
01:36 - rules is also shrink the length of each
01:38 - branch each time so you can sort of
01:41 - start to see that this is the rule so
01:43 - let's start to write code that
01:45 - implements this rule so here I have a
01:48 - very simple processing sketch it's over
01:50 - here right all that it's doing is it
01:53 - makes it window and it draws a line from
01:54 - the bottom of the window to the middle
01:56 - of the window so let's write that in a
01:58 - slightly different way what if the first
02:00 - thing I did was translate to the bottom
02:02 - of the window then what I'm really drew
02:06 - it doing is drawing a line that goes
02:08 - from 0 0 to
02:11 - zero comma and let's just say negative
02:14 - 150 so I'm gonna make a line there that
02:17 - goes translate to the bottom and draw a
02:19 - line from 0 0 to 0 comma negative 150
02:22 - great now what do I want to do what did
02:25 - we say I want to rotate by 45 degrees pi
02:30 - divided by 4 and let's draw another line
02:32 - from where though oh wait what do we
02:39 - need to do right we went from here we
02:41 - drew a line from the bottom to there now
02:43 - I want to rotate to draw another line I
02:45 - need to after I'm done
02:46 - translate up to there so I'm gonna say
02:48 - hey let me translate from zero comma
02:51 - negative 50 right now if I were to draw
02:54 - a little circle at 0 0 where is that
02:57 - little circle it's at the top right we
03:00 - translate just to make clear here this
03:02 - is our processing window the first thing
03:05 - we did was translate to the bottom then
03:07 - draw a line here then what we did is
03:09 - translate to here the reason why we're
03:11 - doing that is now we're gonna rotate
03:12 - draw a line rotate draw a line so let's
03:14 - go back and we're gonna say hey instead
03:18 - of just drawing that ellipse let's
03:19 - rotate by an angle and draw another line
03:21 - 0 0 0 comma negative and little shorten
03:25 - it to negative 100 and look at this now
03:28 - we have our line going to the right we
03:31 - need our line going to the left
03:32 - hmmm how do I do that
03:36 - rotate negative PI / 4 line 0 0 0 comma
03:43 - negative 100 well this get it oh this is
03:46 - going to get it it's gonna get it oh no
03:47 - right because what did we do we rotated
03:52 - 45 degrees and drew this line and then
03:55 - we rotated back 45 degrees but really
03:58 - what we want to do is rotate then pop
04:00 - back to where we were originally and
04:01 - then rotated
04:02 - the direction this is where we can use
04:04 - push matrix and pop matrix push matrix
04:06 - saves the current transformation state
04:09 - where am I where have I translated
04:11 - rotated to then pop matrix restores it
04:14 - so what if I actually just said push
04:16 - matrix here pop matrix here let's
04:23 - simplify some things and then rotate the
04:27 - other direction and look at this we've
04:30 - got the beginnings of this now right
04:32 - we're able to draw a line from the
04:34 - bottom to the middle rotate draw a line
04:37 - pop save rotate draw a line pop back
04:40 - rotate draw a line and in essence you
04:43 - know we could look at this and say well
04:44 - we're going to do be doing this over and
04:46 - over again recursively we should
04:48 - probably push matrix and pop matrix
04:51 - around this particular branch as well
04:53 - right so this is the trunk of the tree
04:55 - right let's put some comments in here
04:57 - trunk branch right branch left right if
05:07 - we look at all this stuff together we
05:09 - can see what's going on we drew the
05:12 - trunk we move to the end of the trunk we
05:14 - branched right and drew a line we
05:16 - branched left underline so this is how
05:19 - transformations work and processing but
05:22 - why are we doing this we want to do this
05:24 - recursively we want to say for every
05:26 - line push translate rotate draw a line
05:31 - pop rotate draw a line for every branch
05:33 - so what I want to do is look at these
05:35 - three steps and look at this branching
05:38 - algorithm what if instead of drawing a
05:40 - line there what we're actually doing was
05:42 - calling a branch function what if this
05:45 - was somehow a function called branch
05:49 - which at the beginning just draws a line
05:55 - whoops sorry
05:58 - and then always calls branch itself
06:03 - where it needs to draw the next two
06:06 - lines right what if what we're doing is
06:08 - we're recursively drawing the line
06:10 - branching right branching left draw
06:12 - another line which branches right which
06:14 - processes left to draw another life and
06:15 - you're always pushing you're popping
06:17 - along the way so we can always remember
06:18 - and pop back wherever we need to this is
06:21 - what this is very very hard to picture
06:24 - in your head this is one of these
06:25 - instances we're writing all this
06:27 - text-based code and picture and there's
06:29 - got to be a better way before this video
06:31 - has I'm doing a Google search for this
06:33 - but I want to show you a really
06:35 - wonderful project which allows you to
06:36 - draw fractals in a procedural code like
06:38 - way rather than write the actual code
06:40 - because I'll link to it below okay but
06:43 - let's actually now just go and say hey
06:45 - well this must be in an example whoops
06:47 - I'm going to open up our examples oh boy
06:50 - in Chapter eight fractals and the one
06:52 - that I want to look at is just eight
06:54 - point four tree so let's run this one
06:57 - and see it whoops it's so tiny
07:01 - let's make it a little bit bigger let's
07:04 - run it and let's see what's going on
07:07 - right so look here we can see right
07:11 - here's the tree and the angle is being
07:12 - controlled by the mouse and you can see
07:14 - here's our root which has two branches
07:16 - that's two branch the two branches
07:17 - another thing that's interesting about
07:18 - this is not only are the lengths of the
07:20 - branches changing but the thickness of
07:23 - the line is it getting thinner no it's
07:25 - not but that would be an interesting
07:26 - exercise and I do have one of the
07:28 - examples that does that right the
07:29 - branches are getting thinner since order
07:32 - could the actual thickness get thinner
07:34 - as well so let's just take a look at the
07:36 - code and what we can see here is exactly
07:39 - what I just talked about so maybe it
07:45 - isn't this so what I was sorry boy I'm
07:50 - not doing a good job here so this is
07:52 - exactly what I'm talking about we have a
07:54 - branch function which draws a line and
07:56 - as long as that line that line shrinks
07:59 - by two-thirds every time and as long as
08:01 - that line is still greater than two
08:03 - pixels push matrix rotate to the right
08:05 - branch again push matrix rotate to the
08:08 - left branch again which calls the
08:10 - function again
08:11 - so interestingly enough this is a great
08:13 - thing that you could do is take this
08:15 - code print it out get a piece of paper
08:18 - again a pen try to be processing and
08:22 - execute it and you'll see an interesting
08:23 - result I encourage you to do this on
08:25 - your own here's my eraser but just for a
08:28 - moment one of the things you'll see
08:31 - that's actually happening here is we've
08:33 - draw the first line and then we call
08:35 - branch to the right but that's called
08:38 - recursively so it calls branch to the
08:39 - right and that's called recursively so
08:41 - it calls branch to the right which calls
08:42 - branch to the right eventually we're
08:44 - done and we pop back and branch to the
08:47 - left and pop back and branch to the left
08:50 - but here then we have to branch to the
08:52 - right and then we have to pop back and
08:53 - branch to the left and then we pop back
08:55 - and pop back and that's the right branch
08:57 - of the regulan puppet right it's kind of
08:59 - I can't even do it you know I could do
09:01 - it if I sat down slowly and did it very
09:04 - methodically and I think this is a
09:05 - really useful way to understand where
09:07 - are we pushing and where are we popping
09:10 - how does this recursive structure work
09:13 - when we are kind of walking through
09:15 - almost in this in this turtle graphics
09:18 - right if you remember programming with
09:20 - logo this idea of a turtle being able to
09:22 - move forward turn move forward draw a
09:25 - line this is all we're doing here we
09:27 - have a turtle that can move forward but
09:29 - can also remember where it was at any
09:31 - point to pop back and continue off in
09:34 - another direction so you know another
09:36 - exercise you could try would actually
09:38 - need to animate this and see if you
09:39 - could draw one branch at a time to
09:41 - actually see that order by the way a
09:44 - clue to doing all of this that we're
09:46 - going to look at in a slightly more
09:47 - sophisticated way is going to happen in
09:49 - the next video in the next video we're
09:52 - actually going to look at l-systems
09:56 - which is really going to implement a
09:57 - turtle graphics drawing engine so a few
09:59 - other things I'll note about this this
10:01 - is the basic example and you can see the
10:05 - basic results here but a couple other
10:08 - things you should note about this which
10:09 - are interesting to think about is that
10:11 - if one thing you might look at is
10:15 - thinking about all those angles and
10:18 - lengths and how many branches
10:21 - this is a place where a stochastic
10:24 - fractal one that involves randomness and
10:27 - probabilities for example what if each
10:29 - branch has zero one two or three
10:32 - branches attached to it what if the
10:34 - angles are random
10:35 - you know randomness isn't exactly
10:37 - getting us more organic a more organic
10:39 - quality it's giving us variety but what
10:42 - if you use Perlin noise or had some
10:44 - other systematic approach to how those
10:47 - trees are formed what if you thought
10:49 - about those branches as paths paths like
10:52 - we had with steering behaviors there's a
10:54 - vehicle moving along the trunk it breaks
10:56 - into two vehicles may move and are
10:58 - seeking a target we might get some
11:00 - curved paths there that could give us a
11:02 - couple more curvaceous tree there's lots
11:05 - that you could think of with doing with
11:06 - these examples and you could also by the
11:09 - way which I believe is in the repository
11:11 - and I need to maybe make a better
11:14 - version of it is you could also I think
11:17 - in these exercises you can also apply
11:20 - the ArrayList up this is with different
11:22 - thicknesses you could also apply oops
11:26 - I'm sorry everybody
11:27 - exercise 8.6 nope where is it doing a
11:35 - terrible job okay so I have failed you
11:38 - tree ArrayList leaves there we go
11:40 - exercise eight point eight and nine one
11:44 - thing that we can look at is how can we
11:46 - get the positions and make objects right
11:49 - we could use the ArrayList technique so
11:51 - this particular example is using the
11:54 - ArrayList technique to keep track of the
11:56 - locations of all those branches these
11:58 - branches could actually wiggle and move
11:59 - you can see I deposited if you zoom in
12:01 - it's really close there's little circles
12:04 - at the end of each branch which are like
12:05 - leaves because I know the end positions
12:08 - right with that with the translate
12:10 - rotate this magical recursive function
12:12 - I'm not keeping track of all those
12:13 - locations but if I make objects out of
12:15 - every branch then I can start having
12:17 - leaves fall from the tree branches
12:19 - swaying the wind
12:20 - and this is something you might also
12:21 - think about as well so that a rail is
12:23 - technique that we looked at it can also
12:25 - be applied to this tree example and it
12:28 - might be worth perhaps going through
12:29 - this in more detail at another time but
12:31 - I think that this video is it is what it
12:34 - is right now so okay thank you and
12:38 - there's a lot to think about with this
12:40 - and boy anyway we're gonna talk about
12:44 - houses

Cleaned transcript:

we're we're doing the anterior in this video I want to look at one more fractal pattern the the Franklin pan that I want to look at is something we talked about the very beginning this branching tree a tree which has two branches and each have two branches in each have two branches why do I want to look at this one we've looked at a bunch of fractal patterns already the reason this one is important is in our implementation we're going to make use of translate and rotate transformations in processing and when doing so we're also going to make use of push matrix and pop matrix which is going to be a very interesting technique inside of a recursive function how we do this so let's just first remind ourselves what is this what is the production rule right we start start with a branch which is a line start with line at the end of the line that's one at step two is at end let's say we rotate I don't know 45 degrees or rotate 45 degrees and draw another line then we rotate rotate negative 45 degrees and draw line 8 now for each for 2 & 3 we want to do the same thing go to the end rotate 45 degrees and draw two lines for each of these rotate 45 degrees in Grutter lines so the thing I guess I missed and described in these production rules is also shrink the length of each branch each time so you can sort of start to see that this is the rule so let's start to write code that implements this rule so here I have a very simple processing sketch it's over here right all that it's doing is it makes it window and it draws a line from the bottom of the window to the middle of the window so let's write that in a slightly different way what if the first thing I did was translate to the bottom of the window then what I'm really drew it doing is drawing a line that goes from 0 0 to zero comma and let's just say negative 150 so I'm gonna make a line there that goes translate to the bottom and draw a line from 0 0 to 0 comma negative 150 great now what do I want to do what did we say I want to rotate by 45 degrees pi divided by 4 and let's draw another line from where though oh wait what do we need to do right we went from here we drew a line from the bottom to there now I want to rotate to draw another line I need to after I'm done translate up to there so I'm gonna say hey let me translate from zero comma negative 50 right now if I were to draw a little circle at 0 0 where is that little circle it's at the top right we translate just to make clear here this is our processing window the first thing we did was translate to the bottom then draw a line here then what we did is translate to here the reason why we're doing that is now we're gonna rotate draw a line rotate draw a line so let's go back and we're gonna say hey instead of just drawing that ellipse let's rotate by an angle and draw another line 0 0 0 comma negative and little shorten it to negative 100 and look at this now we have our line going to the right we need our line going to the left hmmm how do I do that rotate negative PI / 4 line 0 0 0 comma negative 100 well this get it oh this is going to get it it's gonna get it oh no right because what did we do we rotated 45 degrees and drew this line and then we rotated back 45 degrees but really what we want to do is rotate then pop back to where we were originally and then rotated the direction this is where we can use push matrix and pop matrix push matrix saves the current transformation state where am I where have I translated rotated to then pop matrix restores it so what if I actually just said push matrix here pop matrix here let's simplify some things and then rotate the other direction and look at this we've got the beginnings of this now right we're able to draw a line from the bottom to the middle rotate draw a line pop save rotate draw a line pop back rotate draw a line and in essence you know we could look at this and say well we're going to do be doing this over and over again recursively we should probably push matrix and pop matrix around this particular branch as well right so this is the trunk of the tree right let's put some comments in here trunk branch right branch left right if we look at all this stuff together we can see what's going on we drew the trunk we move to the end of the trunk we branched right and drew a line we branched left underline so this is how transformations work and processing but why are we doing this we want to do this recursively we want to say for every line push translate rotate draw a line pop rotate draw a line for every branch so what I want to do is look at these three steps and look at this branching algorithm what if instead of drawing a line there what we're actually doing was calling a branch function what if this was somehow a function called branch which at the beginning just draws a line whoops sorry and then always calls branch itself where it needs to draw the next two lines right what if what we're doing is we're recursively drawing the line branching right branching left draw another line which branches right which processes left to draw another life and you're always pushing you're popping along the way so we can always remember and pop back wherever we need to this is what this is very very hard to picture in your head this is one of these instances we're writing all this textbased code and picture and there's got to be a better way before this video has I'm doing a Google search for this but I want to show you a really wonderful project which allows you to draw fractals in a procedural code like way rather than write the actual code because I'll link to it below okay but let's actually now just go and say hey well this must be in an example whoops I'm going to open up our examples oh boy in Chapter eight fractals and the one that I want to look at is just eight point four tree so let's run this one and see it whoops it's so tiny let's make it a little bit bigger let's run it and let's see what's going on right so look here we can see right here's the tree and the angle is being controlled by the mouse and you can see here's our root which has two branches that's two branch the two branches another thing that's interesting about this is not only are the lengths of the branches changing but the thickness of the line is it getting thinner no it's not but that would be an interesting exercise and I do have one of the examples that does that right the branches are getting thinner since order could the actual thickness get thinner as well so let's just take a look at the code and what we can see here is exactly what I just talked about so maybe it isn't this so what I was sorry boy I'm not doing a good job here so this is exactly what I'm talking about we have a branch function which draws a line and as long as that line that line shrinks by twothirds every time and as long as that line is still greater than two pixels push matrix rotate to the right branch again push matrix rotate to the left branch again which calls the function again so interestingly enough this is a great thing that you could do is take this code print it out get a piece of paper again a pen try to be processing and execute it and you'll see an interesting result I encourage you to do this on your own here's my eraser but just for a moment one of the things you'll see that's actually happening here is we've draw the first line and then we call branch to the right but that's called recursively so it calls branch to the right and that's called recursively so it calls branch to the right which calls branch to the right eventually we're done and we pop back and branch to the left and pop back and branch to the left but here then we have to branch to the right and then we have to pop back and branch to the left and then we pop back and pop back and that's the right branch of the regulan puppet right it's kind of I can't even do it you know I could do it if I sat down slowly and did it very methodically and I think this is a really useful way to understand where are we pushing and where are we popping how does this recursive structure work when we are kind of walking through almost in this in this turtle graphics right if you remember programming with logo this idea of a turtle being able to move forward turn move forward draw a line this is all we're doing here we have a turtle that can move forward but can also remember where it was at any point to pop back and continue off in another direction so you know another exercise you could try would actually need to animate this and see if you could draw one branch at a time to actually see that order by the way a clue to doing all of this that we're going to look at in a slightly more sophisticated way is going to happen in the next video in the next video we're actually going to look at lsystems which is really going to implement a turtle graphics drawing engine so a few other things I'll note about this this is the basic example and you can see the basic results here but a couple other things you should note about this which are interesting to think about is that if one thing you might look at is thinking about all those angles and lengths and how many branches this is a place where a stochastic fractal one that involves randomness and probabilities for example what if each branch has zero one two or three branches attached to it what if the angles are random you know randomness isn't exactly getting us more organic a more organic quality it's giving us variety but what if you use Perlin noise or had some other systematic approach to how those trees are formed what if you thought about those branches as paths paths like we had with steering behaviors there's a vehicle moving along the trunk it breaks into two vehicles may move and are seeking a target we might get some curved paths there that could give us a couple more curvaceous tree there's lots that you could think of with doing with these examples and you could also by the way which I believe is in the repository and I need to maybe make a better version of it is you could also I think in these exercises you can also apply the ArrayList up this is with different thicknesses you could also apply oops I'm sorry everybody exercise 8.6 nope where is it doing a terrible job okay so I have failed you tree ArrayList leaves there we go exercise eight point eight and nine one thing that we can look at is how can we get the positions and make objects right we could use the ArrayList technique so this particular example is using the ArrayList technique to keep track of the locations of all those branches these branches could actually wiggle and move you can see I deposited if you zoom in it's really close there's little circles at the end of each branch which are like leaves because I know the end positions right with that with the translate rotate this magical recursive function I'm not keeping track of all those locations but if I make objects out of every branch then I can start having leaves fall from the tree branches swaying the wind and this is something you might also think about as well so that a rail is technique that we looked at it can also be applied to this tree example and it might be worth perhaps going through this in more detail at another time but I think that this video is it is what it is right now so okay thank you and there's a lot to think about with this and boy anyway we're gonna talk about houses
