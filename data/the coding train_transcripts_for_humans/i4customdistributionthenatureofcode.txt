With timestamps:

00:02 - okay um here we are we are in the land
00:05 - of probability and random numbers we are
00:07 - moving along we've got a bunch of videos
00:09 - to get through but we're well I'm have a
00:11 - list over here and I couple more and
00:13 - then it says vectors intro once we get
00:15 - to vectors we're really going to be
00:16 - dealing with some of the the the
00:17 - exciting stuff really looking at motion
00:19 - behaviors um which is going to carry us
00:21 - for a long way through this uh Journey
00:24 - but okay so what have we done so far we
00:26 - looked at we we know we have this random
00:28 - function okay random awesome it gives us
00:32 - an even distribution of random numbers
00:34 - every random number has the same chances
00:36 - being picked as any other random number
00:38 - we looked at
00:40 - Gan we used the random class the next
00:43 - Gan function and um and we saw that this
00:47 - would give us a gaussian or normal
00:49 - distribution of random numbers where we
00:50 - have most of the results that are picked
00:53 - cluster around the mean and then there
00:55 - are some outliers um depending on what
00:57 - that standard deviation is but what if
01:00 - we want something totally custom totally
01:03 - custom like this is our distribution of
01:05 - random
01:08 - numbers you know this this random number
01:10 - should be picked a lot this not so often
01:12 - this really not so often this a lot as
01:13 - well this a medium amount what if we
01:15 - want something custom like this so um
01:17 - you know this may seem like well just
01:18 - this kind of abstract discussion of
01:20 - probabilities and random numbers but
01:22 - this is really going to be relevant to a
01:23 - lot of the simulations that we're going
01:25 - to do for example way down the road at
01:29 - the you know the really at the end of
01:30 - this video series there will be a video
01:32 - about genetic algorithms how do we
01:34 - simulate that process of evolution in
01:36 - code one of the things we'll need to do
01:39 - in an evolutionary system is pick
01:40 - parents pick parents based on their
01:43 - quote unquote Fitness we want to map
01:45 - that Fitness to a probability of being
01:47 - picked to pass genetic material down to
01:49 - the Next Generation that's going to
01:50 - evolve a highly custom um set of random
01:54 - numbers if you imagine this is all sort
01:55 - of all these parents all these members
01:57 - of a population some will be more likely
01:59 - some will be less likely to be picked
02:01 - now there are a bunch of different
02:02 - strategies for doing that um one
02:04 - strategy that's actually employed in the
02:05 - genetic algorithm examples which uh if
02:07 - you the video doesn't exist yet if I had
02:10 - once I had made them all you could just
02:11 - skip ahead and go look at it is this um
02:14 - uh what I'll call the bucket approach
02:17 - imagine we have a bucket and what I
02:18 - really mean by a bucket is an array or
02:20 - an array list we're going to get into
02:21 - these data structures in more detail
02:23 - when we start to look at particle
02:24 - systems but for now I can think of a
02:26 - bucket of stuff what if I just put some
02:28 - numbers in it what if I
02:30 - put zero a bunch of zeros a bunch of
02:33 - ones a couple twos uh and uh a few a few
02:39 - ones a couple twos a couple threes and
02:42 - one four 1 2 3 four 5 six seven 8 nine
02:46 - whoa 1 2 3 4 5 6 7 8 9 10 11 12 that's
02:51 - way too many things let's put a few
02:54 - let's let's uh take out a few items okay
02:57 - so 3 6 8 9 10 right great so what is the
03:01 - chance that we will pick a one from this
03:04 - collection of numbers well I tried to
03:07 - make it a 10 total so you can see
03:09 - there's three ones there's a 30% chance
03:11 - we'll pick out a one so this is one way
03:13 - if we sort of know what our options are
03:16 - we can create a list of those options
03:18 - and add certain elements multiple times
03:20 - to make them more likely to be picked we
03:22 - could easily also do this within a
03:24 - regular array if we look at an array
03:26 - with five elements in it you know and we
03:28 - pick a random number from this where 40%
03:31 - it's 40% chance of picking a zero and
03:34 - I'm sorry an 80% chance of picking a
03:36 - zero and a 20% chance of picking a one
03:38 - right four out of five chance of picking
03:40 - a zero one out of five chance of picking
03:42 - a one so this might be something that
03:44 - you know just try building this in code
03:46 - as a little quick exercise make an array
03:48 - pick a random element from the array see
03:49 - how that maps to probability um this
03:52 - would be a quick exercise you could do
03:53 - for yourself but the technique that I
03:55 - want to look at now rather than the
03:56 - bucket approach is the picking two
04:00 - random numbers approach um this is um so
04:04 - let's look at this picking two random
04:05 - numbers what do I mean by that so let's
04:07 - say we're back to our Mir cats I must
04:10 - draw uh this strange mircat I know this
04:15 - is pretty unnecessary taking of time
04:17 - okay that's our mircat right sorry um we
04:22 - want to pick Heights for that mircat
04:23 - what if this is the probability not a
04:25 - bell curve anymore the probability
04:26 - distribution for our Mir cats is this
04:29 - we're much more likely to have tall Mir
04:31 - cats than short Mir cats we still might
04:33 - have short Mir cats but we're more
04:35 - likely to have tall ones so let's say
04:37 - we're doing the following we are picking
04:40 - two random numbers float R1 is a random
04:45 - number and I'm going to say between zero
04:47 - and 100 just for sort of ease of
04:50 - thinking right now in the example you'll
04:51 - see I always pick a random number
04:53 - between zero and one because that it
04:55 - just sort of normalizes everything to a
04:56 - range between zero and one but right now
04:58 - let's let's let's pick two random
05:00 - numbers
05:04 - between 0 and 100 now I'm going to write
05:07 - something that looks a little odd to you
05:10 - if R1 is less than or actually I I don't
05:13 - know why I like to think of it in
05:16 - reverse if R2 is less than
05:21 - R1 you know happiness and joy and we
05:26 - have got a fine random number otherwise
05:32 - sadness go back and pick a random number
05:34 - again what we're doing here is we're
05:36 - trying to find a methodology for which
05:39 - we accept the random number we pick we
05:42 - pick a random number that's the random
05:43 - number we hope to assign I lost my mirat
05:46 - to the Mir cat's height but we have to
05:48 - find out does this random number qualify
05:51 - and the way we do that is by picking a
05:52 - second random number how often will R2
05:55 - be less than R1 well let's say R1 just
05:59 - for the sake of argument is 5050 we pick
06:01 - 50 now we're picking another random
06:03 - number between Z and 100 How likely is
06:06 - R2 to be less than
06:07 - R1 50% of the time we'll get a number
06:10 - less than 50 if we pick 90 90% of the
06:14 - time we'll pick a random number less
06:15 - than 90 if we pick 10 only 10% of the
06:18 - time will we pick a random number less
06:20 - than 10 this second random number allows
06:23 - us to check if it's less than the first
06:25 - one then it's okay we've got a random
06:27 - number otherwise we don't want to use it
06:29 - we need to pick another random number
06:30 - this makes it really easy for high
06:33 - numbers to qualify because the qu the
06:35 - second random number will often be good
06:37 - low numbers will be very hard to qualify
06:39 - because the second l number will often
06:41 - be higher than it so this methodology
06:44 - can be quite good if and the thing is
06:47 - this formula here is yals X we know the
06:50 - formula for this line we're just
06:51 - determining is the value we pick below
06:53 - that line but we could have uh we could
06:56 - do something exponential if you have
06:57 - some crazy binomial par IAL polom graph
07:01 - D math function you could use that to
07:04 - figure map the probabilities so um you
07:07 - could also have this be line
07:09 - segments and you could use some uh
07:11 - simple math to determine if a value is
07:13 - below the set of line segments so
07:14 - there's lots of ways you could go
07:15 - farther with this but in a very simple
07:17 - level this is this and so uh we kind of
07:19 - went on for a long time here but let's
07:20 - walk over press this button uh to this
07:23 - example where you can see this in action
07:25 - so this is actually a graph of the
07:27 - random numbers we picked and we're
07:29 - seeing this look at this curve if you
07:31 - could guess right now actually I didn't
07:32 - look at the code before I ran this so
07:34 - I'm going to guess I think that's yal X2
07:37 - not Y equals X right we're exponentially
07:39 - even more likely to pick higher numbers
07:41 - so let's take a look at the code what
07:43 - are where are we doing this we're
07:44 - picking a random number I don't I feel
07:46 - the need to put this here um we're
07:49 - picking a random number here float n
07:51 - equals Monte Carlo I called it Monte
07:52 - Carlo it's like a Monte Carlos
07:54 - simulation where you're gambling kind of
07:55 - picking lots of numbers over and over
07:57 - again um if only we gambling would be a
08:00 - lot more fun than me just talking about
08:03 - picking two random numbers but anyway um
08:05 - so if we look at this function now we
08:08 - can see aha we picked two random numbers
08:11 - here's our math function yal X2 if the
08:14 - second random number is less than y the
08:17 - first random number is squared then we
08:20 - found one and we can return that random
08:22 - number otherwise we've got a loop back
08:23 - We're looping back and picking Rand
08:25 - numbers over and over again till we find
08:26 - one that's okay there's a little extra
08:28 - code in here which just counts you know
08:31 - if we did this 10,000 times and we
08:33 - didn't find a random number that was
08:34 - qualified like maybe there's a problem
08:36 - we don't want to be stuck in an infinite
08:37 - Loop by accident but truly um you know
08:41 - uh uh probability wise we should be okay
08:43 - you know this isn't this isn't perfect
08:44 - science here but this this will do in
08:46 - this case and then of course you know
08:47 - we'll just return the value zero if
08:49 - we're having a problem so this is a
08:51 - technique you you might sort of um try
08:55 - to what I would say as an exercise is
08:56 - you might even try to come up with your
08:58 - own custom distribution whether use the
09:00 - bucket method or this method and see if
09:02 - you can assign those random numbers to
09:04 - some system you're developing some
09:06 - design whether it's just uh you know
09:08 - Heights of objects shape colors of
09:10 - objects how can you seed a system with
09:12 - some Custom Distribution of random
09:14 - numbers um and that is the end of this
09:17 - video next video which I'm going to do
09:19 - right now I'm to press a button stop
09:20 - press a button again start recording
09:21 - we're going to talk about Pearl and
09:22 - noise and actually after peing noise we
09:25 - are done with the introduction to the
09:26 - nature of code uh we will be moving on
09:28 - to the material for chapter one which is
09:30 - all about vectors okay I have to hit a
09:32 - button that stops this video
09:35 - goodbye

Cleaned transcript:

okay um here we are we are in the land of probability and random numbers we are moving along we've got a bunch of videos to get through but we're well I'm have a list over here and I couple more and then it says vectors intro once we get to vectors we're really going to be dealing with some of the the the exciting stuff really looking at motion behaviors um which is going to carry us for a long way through this uh Journey but okay so what have we done so far we looked at we we know we have this random function okay random awesome it gives us an even distribution of random numbers every random number has the same chances being picked as any other random number we looked at Gan we used the random class the next Gan function and um and we saw that this would give us a gaussian or normal distribution of random numbers where we have most of the results that are picked cluster around the mean and then there are some outliers um depending on what that standard deviation is but what if we want something totally custom totally custom like this is our distribution of random numbers you know this this random number should be picked a lot this not so often this really not so often this a lot as well this a medium amount what if we want something custom like this so um you know this may seem like well just this kind of abstract discussion of probabilities and random numbers but this is really going to be relevant to a lot of the simulations that we're going to do for example way down the road at the you know the really at the end of this video series there will be a video about genetic algorithms how do we simulate that process of evolution in code one of the things we'll need to do in an evolutionary system is pick parents pick parents based on their quote unquote Fitness we want to map that Fitness to a probability of being picked to pass genetic material down to the Next Generation that's going to evolve a highly custom um set of random numbers if you imagine this is all sort of all these parents all these members of a population some will be more likely some will be less likely to be picked now there are a bunch of different strategies for doing that um one strategy that's actually employed in the genetic algorithm examples which uh if you the video doesn't exist yet if I had once I had made them all you could just skip ahead and go look at it is this um uh what I'll call the bucket approach imagine we have a bucket and what I really mean by a bucket is an array or an array list we're going to get into these data structures in more detail when we start to look at particle systems but for now I can think of a bucket of stuff what if I just put some numbers in it what if I put zero a bunch of zeros a bunch of ones a couple twos uh and uh a few a few ones a couple twos a couple threes and one four 1 2 3 four 5 six seven 8 nine whoa 1 2 3 4 5 6 7 8 9 10 11 12 that's way too many things let's put a few let's let's uh take out a few items okay so 3 6 8 9 10 right great so what is the chance that we will pick a one from this collection of numbers well I tried to make it a 10 total so you can see there's three ones there's a 30% chance we'll pick out a one so this is one way if we sort of know what our options are we can create a list of those options and add certain elements multiple times to make them more likely to be picked we could easily also do this within a regular array if we look at an array with five elements in it you know and we pick a random number from this where 40% it's 40% chance of picking a zero and I'm sorry an 80% chance of picking a zero and a 20% chance of picking a one right four out of five chance of picking a zero one out of five chance of picking a one so this might be something that you know just try building this in code as a little quick exercise make an array pick a random element from the array see how that maps to probability um this would be a quick exercise you could do for yourself but the technique that I want to look at now rather than the bucket approach is the picking two random numbers approach um this is um so let's look at this picking two random numbers what do I mean by that so let's say we're back to our Mir cats I must draw uh this strange mircat I know this is pretty unnecessary taking of time okay that's our mircat right sorry um we want to pick Heights for that mircat what if this is the probability not a bell curve anymore the probability distribution for our Mir cats is this we're much more likely to have tall Mir cats than short Mir cats we still might have short Mir cats but we're more likely to have tall ones so let's say we're doing the following we are picking two random numbers float R1 is a random number and I'm going to say between zero and 100 just for sort of ease of thinking right now in the example you'll see I always pick a random number between zero and one because that it just sort of normalizes everything to a range between zero and one but right now let's let's let's pick two random numbers between 0 and 100 now I'm going to write something that looks a little odd to you if R1 is less than or actually I I don't know why I like to think of it in reverse if R2 is less than R1 you know happiness and joy and we have got a fine random number otherwise sadness go back and pick a random number again what we're doing here is we're trying to find a methodology for which we accept the random number we pick we pick a random number that's the random number we hope to assign I lost my mirat to the Mir cat's height but we have to find out does this random number qualify and the way we do that is by picking a second random number how often will R2 be less than R1 well let's say R1 just for the sake of argument is 5050 we pick 50 now we're picking another random number between Z and 100 How likely is R2 to be less than R1 50% of the time we'll get a number less than 50 if we pick 90 90% of the time we'll pick a random number less than 90 if we pick 10 only 10% of the time will we pick a random number less than 10 this second random number allows us to check if it's less than the first one then it's okay we've got a random number otherwise we don't want to use it we need to pick another random number this makes it really easy for high numbers to qualify because the qu the second random number will often be good low numbers will be very hard to qualify because the second l number will often be higher than it so this methodology can be quite good if and the thing is this formula here is yals X we know the formula for this line we're just determining is the value we pick below that line but we could have uh we could do something exponential if you have some crazy binomial par IAL polom graph D math function you could use that to figure map the probabilities so um you could also have this be line segments and you could use some uh simple math to determine if a value is below the set of line segments so there's lots of ways you could go farther with this but in a very simple level this is this and so uh we kind of went on for a long time here but let's walk over press this button uh to this example where you can see this in action so this is actually a graph of the random numbers we picked and we're seeing this look at this curve if you could guess right now actually I didn't look at the code before I ran this so I'm going to guess I think that's yal X2 not Y equals X right we're exponentially even more likely to pick higher numbers so let's take a look at the code what are where are we doing this we're picking a random number I don't I feel the need to put this here um we're picking a random number here float n equals Monte Carlo I called it Monte Carlo it's like a Monte Carlos simulation where you're gambling kind of picking lots of numbers over and over again um if only we gambling would be a lot more fun than me just talking about picking two random numbers but anyway um so if we look at this function now we can see aha we picked two random numbers here's our math function yal X2 if the second random number is less than y the first random number is squared then we found one and we can return that random number otherwise we've got a loop back We're looping back and picking Rand numbers over and over again till we find one that's okay there's a little extra code in here which just counts you know if we did this 10,000 times and we didn't find a random number that was qualified like maybe there's a problem we don't want to be stuck in an infinite Loop by accident but truly um you know uh uh probability wise we should be okay you know this isn't this isn't perfect science here but this this will do in this case and then of course you know we'll just return the value zero if we're having a problem so this is a technique you you might sort of um try to what I would say as an exercise is you might even try to come up with your own custom distribution whether use the bucket method or this method and see if you can assign those random numbers to some system you're developing some design whether it's just uh you know Heights of objects shape colors of objects how can you seed a system with some Custom Distribution of random numbers um and that is the end of this video next video which I'm going to do right now I'm to press a button stop press a button again start recording we're going to talk about Pearl and noise and actually after peing noise we are done with the introduction to the nature of code uh we will be moving on to the material for chapter one which is all about vectors okay I have to hit a button that stops this video goodbye
