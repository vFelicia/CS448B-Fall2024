With timestamps:

00:00 - hello happy Friday welcome to today's by
00:05 - coding train stream this is how I feel
00:13 - today somehow I'm gonna wake up and do
00:20 - some coding but today it's gonna be a
00:24 - little bit different than usual I have a
00:25 - short period of time now and then I'm
00:28 - gonna take a break and I will come back
00:30 - and do some more and I'm very excited
00:33 - because I am going to do some tutorials
00:34 - a little bit technical today but I'm
00:37 - going to do some tutorials on a concept
00:39 - known as higher-order functions and I'm
00:41 - also going to do some tutorials I'm
00:43 - getting excited about it
00:44 - on a topic known as inheritance and I
00:47 - don't have my my so importance of
00:50 - working but you might be able to hear it
00:52 - through my microphone if I just play it
00:54 - out through the speakers and
00:58 - polymorphism alright that's the only
01:05 - time I'm going to do that Oh am i
01:07 - smaller than usual I might be so I
01:15 - laughs if you you might recall last
01:18 - week's livestream I had a little bit of
01:19 - fun with this pendulum double pendulum
01:21 - coding challenge and I made myself
01:22 - really tiny and I put myself inside the
01:24 - code so maybe I should be a little bit
01:26 - bigger I just it doesn't say it safe or
01:29 - I don't know until here we go it's a
01:32 - little bit better how's that look better
01:37 - so I have been a you know historically
01:42 - historic me as a historical figure has
01:45 - been a programmer who mostly has always
01:47 - worked in Java actually one of the first
01:49 - boat if I go back all the way one of the
01:52 - first programming languages never used
01:53 - was basic and I did a little bit of
01:55 - basic on an Apple 2 plus and about
01:57 - second or third grade if I remember
01:58 - correctly then I really didn't program
02:02 - at all until around age 29 and that's
02:07 - when I learned programming using the
02:08 - lingo programming language and then
02:11 - after that I learned Java
02:14 - then after that I discovered processing
02:15 - and for years and years of years I use
02:17 - processing which is built on top of Java
02:18 - I did a little C++ here and there but
02:21 - everything I did was always
02:22 - object-oriented and my brain calcified
02:24 - as it is really just thinks in object
02:26 - orientation and there's all sorts of new
02:28 - and amazing functional programming
02:31 - patterns and techniques and strategies
02:34 - that people love and adore and so you
02:36 - know I'm gonna dip my toe in that a
02:38 - little bit today by talking about
02:42 - higher-order functions coded rate is
02:49 - brought to you by coffee
02:52 - I don't usually usually I tried not to
02:54 - have coffee with these livestreams
02:56 - because I'm already kind of like hyper
02:57 - and insane but I today for some reason I
03:00 - there's a couple of things going on
03:02 - number one is I had a very strange night
03:04 - of sleep which is the sleep thing didn't
03:06 - work for me last night that happens
03:08 - every once in a while and then I also on
03:10 - this morning I was on the New York City
03:12 - Subway which was actually kind of lovely
03:14 - I got stuck in between stations in
03:16 - between 14th Street and West fourth
03:18 - there was a smoke issue or something
03:20 - Ivan looked in the news to see if there
03:22 - was anything a significant but the train
03:24 - was stopped her for about 45 minutes so
03:26 - I kind of like half fell asleep on the
03:28 - train while I was waiting but didn't
03:29 - really and it's listening a podcast and
03:31 - I just feel completely off which is too
03:34 - bad because today I do have I really
03:37 - want to get stuff done and I will be out
03:38 - of a web do it I I'm not available next
03:41 - Friday so the next live stream after
03:43 - today will be two weeks from now so I
03:44 - thought I wanted to just mention that Oh
03:47 - getters and setters is something I would
03:49 - like to get to today as well so though
03:53 - okay but hold on let's before I even get
03:56 - into any of that I want to just mention
03:59 - again that there is a new the coding
04:03 - train website I am trying my best to
04:08 - always update and place a note here when
04:12 - I know in the next live stream is going
04:13 - to be I didn't used to have a schedule
04:15 - of multiple weeks ahead I mean the it
04:17 - was useful for me to try to keep myself
04:19 - organized because I never really kept to
04:20 - it but that's something that I and so oh
04:24 - and look tune in live I wonder if it
04:27 - says
04:27 - that's when I'm live-streaming but are
04:29 - just so let's click that this is like
04:37 - coding train recursion here let go one
04:47 - more time so so that's what I want to
04:51 - say the other thing I wanted to mention
04:52 - look at this wound so we get a nice
04:55 - little ripple going and one more one
04:58 - more one more here we here come here we
05:04 - come one more one more
05:05 - oh I didn't do another one who knows
05:07 - anyway okay hi I lost my I lost my train
05:11 - of thought oh my got it now it's zooming
05:13 - I'm lose I'm going crazy alright but so
05:15 - I wanted to also just miss oh there's a
05:16 - lot of this website is amazing thank you
05:18 - to Niels web for viewing almost entirely
05:22 - all of the development there have
05:23 - certainly been other contributors that
05:24 - you can look in the github contributors
05:26 - thank you also to Austin who has been
05:28 - doing a lot of design iterations working
05:30 - on this like interest cool animation
05:32 - when you hover over the card it like
05:34 - changes color so there's some other
05:35 - things coming to the site mostly what I
05:38 - want is this for this site to be a way
05:39 - that people can find the videos more
05:41 - easily and in particular I get the
05:46 - question a lot of like where do I start
05:48 - so I would like to create a page that's
05:49 - maybe like for beginners anyone wants to
05:51 - help contribute to that check out the
05:54 - github issues on the github repository
05:56 - and please contribute now I will go here
05:58 - to coding challenges and I'm gonna go
06:00 - here to double pendulum so this was my
06:02 - most recent coding challenge if I
06:04 - clicked here I'd get to the video if I
06:05 - click here we get to a page where you
06:08 - can download the code you can run the
06:10 - example in theory let's see if that
06:12 - works there we go there's the example
06:14 - running in JavaScript and then you can
06:19 - also this is what I wanted to know most
06:21 - add your own version so all the coding
06:24 - challenges now should have this page
06:25 - where you can see contributed variations
06:28 - by a community members and the credits
06:32 - are here the link to it is here source
06:33 - code and if you click on these links
06:35 - there will be some instructions it's not
06:37 - the simplest thing in the world you have
06:39 - to use some mark
06:40 - down syntax and we're using this thing
06:41 - called Jekyll there's I would love to
06:43 - just spend a whole day going over the
06:45 - sort of like open source development of
06:47 - this website to help people contribute
06:48 - to it but that's not for today but let's
06:50 - click on this submission from Thank You
06:52 - Don Wilson and whoo awesome I love this
06:58 - already so here we have a double
07:00 - pendulum one thing I love about this
07:01 - that I didn't do in mind because I'm
07:03 - pretty sure I can click on it and I can
07:05 - kind of drag let's drag this one
07:06 - interestingly if I click on this I can't
07:11 - pull I don't have to use if you look at
07:13 - my inverse one thing can be added to
07:15 - this is from my inverse kinematics
07:16 - tutorial I have basically soil that
07:18 - almost does exactly this if I pull on
07:20 - this I could pull the whole pendulum out
07:22 - and feel more realistic but what I love
07:23 - about this is let's let's try to pull
07:26 - this all the way up to give it some and
07:28 - so I can change in real time I can
07:31 - change the lengths of these arms I can
07:34 - change the mass I think it would be nice
07:36 - to see maybe the size of the dot change
07:39 - when I change the mass that could be
07:40 - some useful visual feedback as well as
07:43 - the gravity so I can make it super
07:44 - strong or zero that's kind of fun no
07:47 - gravity at all and then obviously here's
07:50 - the dampening if I make that you know
07:52 - small gravity with hot with pretty high
07:54 - dampening it's going to come to rest
07:57 - very soon so well look at this i'm simon
08:02 - in the chat send me a nice diagram about
08:04 - getters and setters thank you alright so
08:06 - it's very hard for me to see uh thank
08:08 - you into the new Patriot groups and you
08:10 - said any images it kind of fills up the
08:11 - whole chat cuz I have everything zoomed
08:13 - in on that computer so it's great and
08:15 - helpful but it's actually more helpful
08:17 - to me to just have short lines of text
08:19 - if you're trying to get get something
08:21 - across to me in the chat okay I see that
08:27 - people are saying that they're gonna
08:28 - submit their minesweeper one people are
08:30 - giving me some smiley face emojis wake
08:33 - up wake up wake up I don't have my just
08:36 - out of curiosity how much can you hear
08:38 - this
08:51 - so that's just playing out through the
08:53 - speakers of this Ida hat in through this
08:55 - microphone which is here okay I'm really
09:02 - excited about this higher-order
09:03 - functions things but I feel like today
09:05 - is not the day today is not really the
09:07 - day for me to do anything but I've got
09:08 - to do it all right so let's think about
09:10 - this let me get a code editor up I'm
09:17 - thinking about switching over to visual
09:19 - studio because everybody says I should
09:23 - but then I get kind of obstinate and
09:24 - things like I don't want to use the
09:27 - thing that everyone says is the coolest
09:28 - thing it's the best thing I just want to
09:29 - use my thing that I like that I'm
09:31 - comfortable with because why not so a
09:36 - neural network coding train let's close
09:39 - this out let me go to terminal Here I am
09:45 - using the p5 manager someone in the
09:48 - patron slack channel suggested creating
09:51 - a kind of variation or on p5 manager
09:53 - that's like a tool command line tool to
09:55 - generate coding train project templates
09:58 - that's a really interesting idea
10:01 - G - be higher-order let's just call it
10:09 - higher order higher underscore order C D
10:14 - higher order let's run a lot of this I'm
10:18 - going to be able to just do in the
10:19 - JavaScript console and so now I'm
10:25 - serving up that page whoops let me come
10:28 - back to here and open it up in atom and
10:35 - go to sketch KS and get rid of this get
10:40 - rid of this and go here Oh
10:44 - lazy someday I'll just make a template
10:47 - for myself let's go here okay so now
10:52 - let's go back to the browser localhost
10:57 - open up the console oh I have my
11:01 - notifications on today I need I didn't I
11:03 - forgot to configure them so what I try
11:05 - to do just for those of you is like if
11:07 - the microphone breaks or something if
11:09 - you're in the patron group and in the
11:11 - slack channel you can send me a at
11:14 - Schiffman and it will appear unto my
11:17 - watch
11:18 - please got abused that emergencies only
11:23 - because but unfortunately getting some
11:26 - other nonsense on here but hopefully I
11:27 - won't get any other text I meant to turn
11:29 - that off so anyway let's see uh
11:34 - background zero okay this is working
11:37 - wonderful all right we are set up and we
11:40 - are ready to go this is my sound board
11:42 - fail and here we are by the way and we
11:50 - want to do it like totally random
11:52 - nonsensical study on my typing the e key
11:57 - on this keyboard I'm getting a new
11:58 - computer soon the e keyboard on the
12:00 - screen just keep saying worse and worse
12:02 - I think I've now almost like trained
12:03 - myself to hit that key harder but like
12:06 - right now I'm gonna hit E Network it
12:09 - didn't work didn't work work works like
12:12 - 50 percent of the time I'm just curious
12:14 - if anybody like notice how I'm like
12:17 - going really slow or how many times I
12:18 - type e it doesn't work how much is this
12:20 - affecting maybe the whole coding trained
12:22 - stuff is just no good anymore the
12:24 - tutorials are don't make any sense
12:26 - they're not interesting to watch and I'm
12:27 - little worried it's because of this iki
12:29 - and the fact that I feel like today
12:34 - alright
12:35 - oh look at that okay triple pendulum I
12:42 - do intend by the way in my course that
12:45 - I'm teaching so the reason why I'm
12:47 - covering this today is the topic in my
12:49 - course that I'm teaching right now at
12:50 - NYU is particle systems and so I've been
12:54 - using higher-order functions array
12:56 - functions to manipulate arrays of
12:59 - particles in interesting ways and so
13:01 - that's why I wanted to make some videos
13:02 - about that and we'll apply it to the
13:03 - particle system examples coming soon our
13:06 - tutorials about physics engine and I did
13:08 - a bunch of these last year
13:09 - it'll be interesting to remake the
13:10 - double pendulum I mean it actually
13:12 - exists already I believe I think if you
13:14 - go to Mader chess is a physics engine
13:16 - that I use in some of my tutorials and I
13:19 - believe if we see all these demos one of
13:21 - them eventually will come up and be yeah
13:23 - there we go
13:23 - so I I kind of it was there really
13:26 - quickly can I go to demo oh no and go to
13:33 - which one is the double pendulum double
13:35 - pendulum so there you go this is very so
13:40 - be interesting to remake this and in
13:43 - matter is and just sort of see how that
13:45 - compares and then you know we could do a
13:47 - triple pendulum all sorts of interesting
13:48 - stuff so I'm that's coming all right now
14:01 - what happens if I Google higher-order
14:03 - functions and if I image search that
14:11 - yeah hi okay so I'm just going to talk
14:14 - about it myself and I'm gonna go to
14:16 - Mozilla array and I'm gonna end up here
14:22 - all right
14:31 - ah so William and the chat asks please
14:36 - some je s beginning lessons so my
14:38 - beginner playlist is if you look on the
14:41 - YouTube channel it's called foundations
14:44 - good job that's the word foundations of
14:47 - JavaScript in the title I don't remember
14:48 - what it's called otherwise alright
14:51 - what's the chance this works very little
15:02 - all right here we go everybody
15:12 - Roshan in the chat asks in the YouTube
15:16 - chat asks how do we contribute to the
15:18 - coding train website so I it's actually
15:21 - not immediately obvious because there's
15:22 - not I don't think there's a link on the
15:24 - website currently to the github but
15:26 - actually there are coz everywhere it
15:28 - says how to contribute github so
15:30 - nevermind but if you're looking for it
15:32 - it's actually the the the repository has
15:34 - been renamed and so this is now the
15:37 - github repository for the website
15:39 - github.com slash coding train slash
15:41 - website something that would be
15:42 - wonderful actually that it could really
15:44 - use a contribution for our unit tests
15:46 - and in particular making sure the
15:50 - markdown files are that people are pull
15:53 - requesting are formatted correctly and
15:55 - the Jekyll bill doesn't break and so I
15:57 - would be happy to set up this website as
16:00 - a continuous integration with a circle
16:03 - CI which is a company that sponsored
16:04 - some previous tutorials that I made and
16:06 - have unit testing because there's a lot
16:09 - of pull requests coming in and I I just
16:10 - like I feel like they're just verge that
16:12 - not check them and there's a site breaks
16:14 - and then I realize like oh I probably
16:16 - should check them or have some unit
16:17 - tests so that would be a grab that's not
16:18 - a that's not a exactly exactly a
16:20 - beginner friendly way to contribute
16:23 - beginner friendly way to contribute
16:24 - would be to a beginner friendly way to
16:28 - contribute would be to continue filling
16:30 - out the two toes so right now I believe
16:33 - if you go to coding challenges oh sorry
16:35 - the content is all in these underscore
16:40 - underscore topic name
16:44 - factories so if I click on coding
16:46 - challenge you'll see this is a markdown
16:48 - file for each and every coding challenge
16:51 - and this is what gets rendered on to the
16:53 - website so most of these are all here
16:54 - they might be missing some related links
16:56 - and things but in in theory the idea is
17:00 - to have a markdown page in this
17:02 - repository that renders to an HTML page
17:03 - on the website for every single video
17:05 - I've ever made and you know if we go
17:07 - into tutorials there's well there's a
17:09 - lot because people have been adding them
17:10 - but there's a lot missing so any help
17:12 - with that would be wonderful and that's
17:15 - a little bit more beginner friendly to
17:16 - help with and there's also a community
17:18 - contributions guide on the wiki which is
17:21 - content contribution guys what you want
17:23 - to look for so if you want to submit
17:24 - your own code that you made based on a
17:27 - video that would be here if you want to
17:29 - submit something if you want to help
17:34 - contribute to like pages that are about
17:36 - the videos here and then of course if
17:37 - you're a designer if you have some ideas
17:40 - for how to improve the navigation or
17:42 - language if you're a recopied writer on
17:44 - all of those things would be I would
17:47 - love help with okay there's so much
17:55 - noise in the hallway right now can you
18:02 - do something like barns Hut method at
18:04 - some point sure oh you know what I want
18:05 - to do I want to do it sooner I need to
18:08 - remember this but in a this today no
18:11 - probably not but I want to do a quadtree
18:14 - stuff because I'm that's something that
18:16 - is missing from all my nature of code
18:18 - tutorials and I want to look at how to
18:20 - optimize for kind of collision detection
18:23 - and things like that so I gotta get to
18:25 - that at some point okay we gotta get
18:28 - gotta get start here because it's
18:29 - already 11:35 and I was gonna this is
18:31 - like the first part of the livestream
18:32 - I'm just gonna do a little bit then come
18:33 - back later so I gotta I'm just like
18:35 - introducing everything enough ability I
18:37 - have to go what do you think is this
18:45 - better with the cap yeah hello welcome
18:51 - this is a video tutorial and this is
18:54 - really just a
18:58 - you know all these at the beginning I
19:00 - need a little take too
19:03 - hello welcome to another video that I'm
19:07 - in I just think so many videos but this
19:09 - is another one I'm actually really quite
19:11 - excited about this I'm going to talk
19:13 - about in this video something called a
19:15 - higher-order function as if you followed
19:20 - my tutorials and things over the years
19:22 - I'm kind of like an old Java programmer
19:26 - well probably the language that I
19:27 - programmed the most in is Java and
19:29 - specifically processing which is a
19:32 - development environment built on top of
19:34 - Java that I use and so I really was
19:36 - taught and have learned and it practiced
19:38 - like object-oriented programming I'm
19:39 - just going to programming I'm just going
19:40 - to programming I'm learning program but
19:44 - there is this thing called functional
19:45 - programming which is very popular and
19:48 - interesting and I want to dip my toe a
19:50 - little bit and javascript is a language
19:52 - where functions are the sort of primary
19:55 - building block of the language and
19:57 - there's lots of thing and of course you
19:58 - can do this I know in Java now with like
20:00 - Java 72 whatever version is now a
20:02 - hundred and thousand 51 but I want to
20:06 - look at this idea of a higher-order
20:08 - function and kind of kind of wade into
20:10 - this idea of functional programming a
20:11 - bit more
20:12 - now this video is appearing in my es6
20:15 - playlist even though some of the stuff
20:17 - that I'm gonna use is not es6 specific
20:20 - but it's useful to have it here because
20:21 - I'm going to use in these tutorials also
20:23 - this particular syntax known as the
20:26 - arrow syntax or the arrow function and
20:29 - I'm gonna use that not only available in
20:31 - JavaScript es6 and if you are confused
20:33 - about what the arrow function is magical
20:37 - tutorial about that in a separate video
20:39 - and I think I talked about es6 for cs5
20:41 - which are different versions of
20:42 - JavaScript there okay so what is I'm
20:44 - going to attempt to define what a
20:47 - higher-order function is and I would I
20:49 - the way I like to think about it just
20:51 - like well there's a function I could
20:53 - define a function like this function
20:56 - hello
20:58 - and then I could write console.log hello
21:02 - in there and that's a function it's a
21:03 - named block of code that I can execute
21:07 - by calling the name of the function
21:09 - there's lots of ways to declare spell
21:11 - chibs and javascript in but he has six
21:13 - syntax and I could say var hello equals
21:15 - or let Hello equals Archon Stello equals
21:17 - so many possibilities this is not a
21:19 - higher-order function because it is just
21:21 - a function on its own on the level
21:23 - playing field of functions a
21:25 - higher-order function is a function that
21:28 - kind of has two levels of functions
21:31 - through it or more than two in other
21:33 - words what if this function expects as
21:36 - its argument another function so you're
21:40 - calling this function in sending it a
21:42 - function that's a higher-order function
21:44 - or what if this function actually makes
21:47 - a function or returns one back to you
21:50 - somehow that is also a higher-order
21:53 - function so any function that either
21:55 - takes a function as input or sends a
21:57 - function out as output that is known as
21:59 - a higher-order function and you can do
22:01 - all sorts of kooky interesting things
22:03 - that can that look kind of fancy that
22:06 - could be fun but also can make your code
22:08 - easy to write um so I the reason one of
22:11 - the reasons why I'm doing this is there
22:12 - are a lot of higher-order functions
22:14 - available for JavaScript arrays and
22:16 - those are really useful let me name a
22:19 - few of them map sort reduce filter so in
22:27 - the subsequent videos that are following
22:30 - this one I'm gonna start going through
22:31 - these functions and it's my goal to
22:33 - actually then tie these functions into a
22:36 - particle system example because I want
22:40 - to look at well you know I could look at
22:42 - the how these stuff works and just put
22:43 - numbers in it but what might be an
22:44 - actual real life scenario in the sort of
22:46 - creative coded graphics world that I
22:48 - might use them in so this is the whole
22:50 - landscape here I'm gonna start with just
22:52 - basic higher-order functions I'm gonna
22:55 - write a couple like goofy trivial
22:56 - examples I'm gonna stop I'm gonna come
22:59 - back and start going through
23:00 - higher-order
23:01 - array functions and then try to like tie
23:04 - that into a particle system that's my
23:05 - plan I know that sounds fine I think
23:07 - it's okay I don't know there could be a
23:08 - better plan I'll come back and make
23:10 - these videos again another day here I go
23:11 - over here alright let me check the while
23:16 - I'm taking this little moment let me
23:17 - check the
23:19 - [Music]
23:22 - let me check the returning the function
23:27 - is called currying I did not know that
23:35 - okay so far so good oh I'll do my fake
23:45 - walking over here again alright so let's
23:48 - try to look at this idea of passing a
23:51 - function to a function or returning a
23:53 - function from a function so let's I have
23:56 - a sort of empty bit of code here I've
23:58 - got the p5 library load it I don't need
24:00 - it for a minute demonstrate but it
24:01 - hasn't I set up function which is like
24:02 - the window.onload function so I like to
24:05 - have that available to me I don't
24:07 - actually need to do this and set up and
24:09 - I'm going to anyway
24:09 - alright so let's say we're to define a
24:12 - function and I'm going to call it sing
24:17 - and in the function I'm going to say la
24:24 - la la la and then when I'm done okay
24:29 - let's just do that
24:31 - okay this is my function sing oh I got
24:34 - to picking it I got to make it in the
24:35 - global space so I can call it from the
24:37 - console and the set of functions totally
24:39 - irrelevant at this point I know why I
24:40 - talked about that so I have this
24:42 - function called sing so now I'm gonna go
24:44 - over here and I'm gonna say sing song so
24:46 - imboca
24:47 - sing ah I reload the page say la la la
24:51 - la all right now craziness what if I
24:55 - were to define what if I were to say hey
24:58 - this function takes as an argument
25:01 - another function and that might be
25:03 - called like a callback and when I finish
25:06 - singing I execute that function so you
25:08 - can think this might this this is might
25:10 - be code that you've never written
25:11 - yourself but it's code that's happening
25:14 - all the time in JavaScript libraries
25:16 - that you use because a lot of times you
25:17 - say hey load this JSON and here's a
25:19 - callback or do this but apply it with
25:22 - this function so this is the idea of if
25:24 - you could send in a function right the
25:27 - parentheses aren't here right because
25:29 - this is actually the name of a variable
25:31 - the name
25:32 - the function is the parameter to sing is
25:35 - callback and if that is a function I can
25:38 - execute that function here so in other
25:40 - words I could say now in setup I could
25:44 - say I could make my own function sing
25:47 - what would be so what something besides
25:49 - singing check you do meow and I'm going
25:53 - to say console dot log meow meow and
25:57 - then I'm gonna say sing meow actually
26:02 - let's just let's do this all in the car
26:03 - I'm gonna put this here and then I'm in
26:08 - here write one thing now what happens if
26:10 - I call sing it says callback is not a
26:13 - function so I didn't pass that parameter
26:15 - so I have to now say sing meow then I'm
26:21 - giving it the meow function so sing la
26:23 - la la and then it executes that meow
26:25 - function now I could be sort of
26:27 - thoughtful about this and I could say
26:29 - like Oh only call the callback if it
26:35 - exists what did I get wrong here whoops
26:39 - so now I could do some error checking in
26:42 - my function so I could do this and it's
26:44 - okay for me to say sing it just does la
26:46 - la la
26:47 - or I could say sing and then act when
26:49 - you're done executing meow and if I
26:51 - wanted to be really really really
26:52 - careful about this I think I could say
26:54 - as long as it's an instance of a
26:56 - function who knows if that's right so I
27:00 - could say sing meow and then sing and it
27:03 - would still work so this is this idea of
27:06 - being able to call a function from a
27:08 - function ok let's look now at ok well up
27:17 - hold on a second
27:28 - this is kind of this is very basic and
27:30 - sort of nonsensical but I'm gonna keep
27:31 - going we're just sort of thinking here
27:33 - for a second
27:34 - [Music]
27:42 - okay I should also mention that I'm kind
27:47 - of writing this code in a very
27:48 - long-winded way where I'm aiming all of
27:51 - my functions and this is not what you
27:52 - would typically see as JavaScript
27:54 - programmers do and eventually I'm gonna
27:56 - be like peeling this away and having
27:57 - anonymous functions that eventually get
27:58 - into this arrow function again so for
28:00 - example just to make this case clear
28:02 - probably in another way that I might do
28:04 - this is say oh I want to call sing and
28:07 - then I just want to add pass in another
28:13 - function to it so you can see here this
28:15 - is me calling the function sing and
28:19 - giving it an argument which is all this
28:20 - code which is a function definition with
28:22 - no name an anonymous function and this
28:25 - might look even more clear to you if I
28:29 - do this right you can sort of see like
28:31 - this is the whole argument being passed
28:34 - in between those other words buggy those
28:37 - other two parenthesis so that's a whole
28:39 - function definition just being passed
28:41 - right in and you know spoiler alert I
28:43 - could kind of write it like this with
28:44 - arrow but we're gonna get back to that
28:46 - later we're gonna come and come back to
28:47 - the arrow function later okay so one
28:50 - more thing let's try so this is a
28:51 - function that you're passing a function
28:53 - another thing you could do is I could
28:55 - have a function return a function some
28:57 - might even call that like a function
28:59 - factory or something you love factories
29:04 - okay so let's get rid of this and I'm
29:08 - gonna use a pretty standard example it's
29:10 - probably one that you would find and
29:11 - countless other tutorials and I'm gonna
29:13 - write a function called multiplier I'll
29:15 - show you why this is useful and what
29:17 - this function of first of all let me
29:19 - just call read a function called
29:20 - multiplier and give it an argument
29:22 - called factor give it an argument called
29:25 - X and an argument comes factor and I'm
29:28 - gonna return x times factor so this is a
29:31 - general function that's just going to
29:33 - take two numbers and multiply them
29:35 - together so if I load the page here I'm
29:38 - gonna say multiplier X 5/2 and what
29:42 - should I get nothing
29:46 - let's try that again
29:48 - oh I spelled it wrong multiplier 10 if I
29:53 - say multiplier 3 comma 9
29:56 - twenty-seven make a little calculator
29:58 - here okay but what if I want to actually
30:01 - create different functions that multiply
30:03 - by different factors so instead of
30:06 - instead of having X here what if I just
30:10 - said return a function that receives X
30:13 - and multiplies it by some factor look at
30:16 - this the multiplier returns a new
30:20 - function that uses the factor that was
30:23 - passed in whoa
30:24 - so in other words what do I mean by this
30:25 - I can now say whoops and I'm just using
30:31 - the console here so let me get more
30:32 - space here let me make this a little
30:33 - bigger I can now say let let doubler
30:39 - equal multiplier - whoa what is doubler
30:46 - now right I didn't get it is it a number
30:48 - dime multiply something No
30:50 - I created a function i created a
30:52 - function that uses the number that
30:56 - returns x times two so if I were to say
30:59 - let Tripler equal multiply or three now
31:05 - I've created a function right we can
31:07 - actually just double check let me just
31:08 - say whatwhat's doubler is look this is
31:10 - what doubler is it's this function now x
31:12 - times factor it's showing me that whoops
31:14 - what it what are like what do I get
31:16 - myself into by clicking on that ah come
31:20 - back
31:21 - are we still there No okay hold on hold
31:30 - on shoot let me let me recreate what I
31:33 - just did for the purpose of editing
31:42 - now it's still showing the factor here
31:44 - but really inside that function it's
31:47 - holding on to that number two that was
31:48 - passed in so in other words if I were to
31:51 - say doubler for what am I gonna get no i
31:58 - messed something up what did I do wrong
31:59 - oh it doesn't say oh this has to say ah
32:08 - oh oh I have a mistake look at this I
32:12 - wasn't paying attention to what I was
32:14 - doing this is a fine mistake for me to
32:15 - have right it didn't return anything
32:17 - undefined
32:18 - I forgot to also have the return here so
32:20 - this is kind of weird-looking but this
32:23 - multiplier function makes a function
32:25 - that returns X times factor so now if I
32:29 - start over here and I say let doubler be
32:35 - a multiplier create a function with a
32:37 - factor of two and let Tripler be a
32:40 - create a function with a factor of three
32:42 - now I can say doubler four and I get
32:47 - eight or I can say Tripler four and I
32:51 - get twelve okay so this is this idea of
32:54 - higher-order functions you can either
32:56 - have a function that receives a function
33:00 - maybe it takes some time to do a lot of
33:02 - things asynchronously so it can execute
33:04 - a call back to alert the caller of the
33:06 - function that you're done this is what
33:07 - you might write into a programming
33:09 - library if you're writing a JavaScript
33:11 - library and you want to offer callbacks
33:13 - or it can be a function that returns a
33:17 - function if you want to be able to
33:18 - generate functions based on a set of
33:19 - parameters that you're using in various
33:21 - places so this is really just the basics
33:23 - I'm gonna stop it here and I'm gonna
33:25 - move on and instead of writing my own
33:27 - higher-order functions I'm gonna make
33:29 - use of other higher-order functions that
33:31 - are wonderful and excellent and exciting
33:32 - in the JavaScript arrays okay thanks for
33:36 - watching I don't know where this pen
33:37 - came from but I have it in my hand and
33:39 - it makes a funny little sound when I do
33:41 - this I was better say when I click on
33:43 - the whiteboard
33:43 - there's no clicking because it's just a
33:44 - whiteboard okay see you later
33:56 - yeah closure would be good for me to
33:58 - mention oh I forgot to use the arrow
34:03 - function here yeah yes okay hold on I
34:08 - forgot about that hmm hmm all right let
34:18 - me think I would like the arrow function
34:20 - I can mention closure and arrow function
34:26 - [Music]
34:28 - all right let me just I will finish the
34:32 - tutorial again so I'm gonna repeat
34:33 - whatever I did over there but I'm gonna
34:35 - from here
34:36 - oh all right actually two things that I
34:39 - forgot number one is this can also be
34:42 - this is also an example of a closure
34:44 - meaning that when you create this
34:46 - function by passing in factor this like
34:48 - kind of close your bubble lives on and
34:50 - the value of factor is retained even
34:52 - though it's sort of technically a local
34:53 - variable just to this function
34:55 - multiplier so this is a I have another
34:57 - video all about JavaScript closures and
34:59 - this is an example of that as well and
35:00 - then I forgot this is a case where I can
35:04 - use the arrow function to make this look
35:07 - you know nice and clean and simple and
35:10 - I'm very torn about this because on the
35:12 - one hand the arrow function can make
35:13 - code look very cryptic and confusing on
35:15 - the other hand it can really simplify
35:16 - things so let's let's talk about that
35:18 - for a second so what what does the arrow
35:20 - function do so this is actually if I
35:26 - just rewrite this function down here
35:28 - this is what I've written so the arrow
35:30 - function you can watch my arrow function
35:32 - tutorial allows me to first of all
35:34 - instead of saying the word function I
35:37 - can delete the word function and I can
35:38 - put the arrow here so this is a function
35:41 - definition with one argument X and this
35:44 - is the code that the function executes
35:45 - now interestingly enough if there's only
35:47 - one argument X I don't need the
35:50 - parentheses so if there were two if this
35:52 - were a function that's like multiplying
35:54 - two things I have to keep those
35:55 - parentheses but if there's only one I
35:57 - don't need them so now I've simplified
36:00 - it like this it also so happens that if
36:03 - there's only one
36:04 - line of code in that function you don't
36:06 - need the curly brackets the curly
36:08 - brackets can be assumed and I can now
36:09 - write it like this
36:10 - and guess what if there's only one line
36:14 - of code the return is assumed so I can
36:19 - actually get rid of this return so
36:21 - actually this is a completely identical
36:23 - way to write the function up here so
36:27 - what this can actually be now is this so
36:33 - this is what I mean this you might look
36:35 - at this and be like what in the world is
36:37 - it doing but after you use and I can
36:40 - speak from experience because arrow
36:41 - functions were brand new to me like less
36:43 - than a year ago but after he used them
36:45 - more and more it starts to seep into
36:47 - your brain a little bit like whether
36:49 - you're doing lists of mental gymnastics
36:50 - translate it back or it's just kind of
36:52 - intuitive but there is a nice quality to
36:54 - saying like almost like X transforms
36:56 - into X x factor and it's it's confusing
36:58 - is that that return is returning a
37:00 - function but that function of a turning
37:03 - x times factor so let's take a look at
37:04 - hopefully I got this right let's take a
37:06 - look at this and I'm in a refresh here
37:09 - and I'm gonna did I save I'm gonna save
37:12 - and refresh and and what I'm actually
37:15 - gonna do is let's just put this in the
37:16 - code let's just say let multiplier equal
37:21 - oh sorry let doubler equal and let's get
37:27 - rid of this should not be here let
37:31 - double or equal and I can I don't need
37:34 - the set of function being so silly
37:35 - let double or equal multiplier to let
37:41 - Tripler equal multiplier 3 oh and I
37:46 - gotta have the I there okay so now I
37:49 - made those two multiplier functions
37:51 - refresh okay double or four I get eight
37:54 - and Tripler four I get twelve so
37:56 - wonderful look at that lovely use of the
37:58 - arrow functions and higher-order
38:00 - functions so what I'm done now with this
38:02 - video what I've really just discovered
38:04 - here basically is that a higher-order
38:06 - function is a function that either
38:07 - receives a function as a call back and
38:10 - if you're writing a JavaScript library
38:11 - and you're asking people to call
38:13 - functions that happen asynchronously
38:14 - this might be something you provide as
38:16 - an option
38:16 - if you send me a function I'm the
38:18 - librarian I will execute that function
38:20 - for you to let you know when I'm done so
38:21 - that's a very useful technique that
38:23 - you'll see in p5 and all sorts of
38:24 - JavaScript libraries so receiving a
38:26 - function as input or returning a new
38:29 - function just like I demonstrated with
38:30 - that multiplier function so that's the
38:32 - basic idea now I am NOT going to write
38:34 - my own higher-order functions right in
38:36 - the next videos I'm just gonna make use
38:38 - of some useful ones that happen to live
38:41 - in the JavaScript array object so I
38:44 - don't know which one I'll start with
38:45 - tune in to the next video to find out
38:47 - whose suspense and I'll see you then
38:49 - thanks for watching
38:56 - ok yes I could have so I think I'm gonna
39:07 - I could have someone of the chat is
39:10 - pointing out that I could say this I
39:16 - mean but is that what I ever want no let
39:21 - multiply or equal sorry factor this
39:25 - right is this right oh my god I hate
39:28 - this do I need to do I need to put
39:30 - parentheses around anything here oh oh
39:33 - oh I do not like that at all that that
39:37 - hurts my brain it is pretty cool though
39:41 - that's a little like maybe I'll put that
39:42 - in the YouTube description or I'll pin
39:44 - that as a comment isn't sort of like an
39:46 - interesting thing I mean the thing is
39:48 - for me and maybe I'll just talk about
39:50 - this in the when I get to the next stuff
39:53 - ok what time is it noon alright what
40:01 - what about neural networks maybe I could
40:06 - just pour this coffee directly on my
40:08 - head I'm just curious
40:13 - I'm just sort of curious I'm gonna put
40:16 - up a straw poll here this is this new
40:24 - totally new never seen it before
40:32 - not new but so helpful I know all this
40:37 - I should probably give you more options
40:38 - than this but I'm just curious for
40:41 - people watching right now I'm gonna post
40:43 - this little straw poll here I'm gonna
40:45 - create the poll in terms of the topic
40:48 - that I'm covering I have a feeling that
40:50 - for the larger YouTube audience is very
40:53 - different than the core livestream
40:54 - audience but here is the straw poll URL
40:59 - if somebody in the who has moderator
41:02 - privileges in the YouTube chat could
41:03 - post that link that would be super
41:06 - helpful I'm just sort of curious to get
41:08 - a sense of what the audience is thinking
41:16 - all right boy I really need to do this
41:19 - like everyday to get to all the topics I
41:21 - want to get to but hopefully I will get
41:23 - to everything
41:31 - dan can you say why javascript is the
41:33 - most loved programming language for you
41:36 - it is not the most loved programming
41:39 - language for me I have like a love-hate
41:41 - relationship with JavaScript actually a
41:43 - late JavaScript I have JavaScript I love
41:47 - it I hate it I love it I hate it I laid
41:49 - it laid JavaScript but one of the
41:54 - reasons why I love it is it's it's works
41:58 - on the web it's the language of the
42:00 - browser there's so much that you could
42:02 - do with it
42:04 - and I like the sort of informal nature
42:06 - of it sometimes with but you know if I
42:10 - were to say my favorite programming
42:11 - language I don't have one I don't know
42:14 - it's the changes from day to day
42:16 - all right let's the Korean yes Korean
42:20 - all right so let's just curious let me
42:23 - just see totally new never seen it
42:26 - before Wow 50% I know all this not new
42:32 - but so helpful so it is so 70% this is
42:37 - like actual is like useful instruction
42:39 - I'm sure if someone could this is like a
42:42 - bad use of
42:43 - anybody listen to the 538 podcast good
42:45 - news or bad news of polling nate silver
42:47 - would not be happy with what i'm doing
42:48 - here i'm sure sir this is like totally
42:50 - misleading and like problematic but it's
42:52 - a little bit of a test here we can see
42:55 - this is nice to see that there is
42:56 - actually it's not that everybody
42:57 - watching is like i know all this already
43:01 - alright so now let's come back to let's
43:12 - think about this what do i want to do
43:14 - first let's do the map function first
43:21 - [Music]
43:22 - what did i say air filter Map Reduce
43:27 - filter filter yeah Map Reduce
43:34 - let's see I think I could do all of
43:36 - these in a video why not right instead
43:38 - of doing like separate videos on each
43:40 - and then I'll just do them with numbers
43:42 - and then I'll go to like a more
43:43 - complicated example with actual stuff
43:45 - like the particle system and go through
43:47 - that alright I'm just gonna check that
43:56 - you know then we're good we're good
43:58 - alright welcome back baby or welcome for
44:03 - the first time who knows this video now
44:05 - I am going to talk about these
44:07 - higher-order functions it's really just
44:09 - kind of me like trying to sound smart
44:11 - make it son fancy these are just
44:13 - functions that it can call on arrays in
44:15 - JavaScript so you might really think of
44:17 - an array as like oh oh right it's a list
44:19 - of stuff it's an ordered list of things
44:21 - like it might be an ordered list of
44:23 - numbers like this and I can iterate with
44:26 - a for loop I can you know use I could
44:30 - that kind of thing I could iterate with
44:31 - a for loop like how would I calculate
44:32 - the sum of everything in this array I
44:35 - would have a for loop and I'd start with
44:38 - this about variable sum equals 0 and
44:40 - then I'd add the first element to the
44:41 - second element the third level so what
44:42 - I'm saying is that these higher-order
44:43 - functions these array functions allow
44:46 - you to manipulate the array as a whole
44:47 - all in one fell swoop and you actually
44:50 - have seen this before if you watched it
44:51 - in my videos for example push this is
44:53 - not
44:54 - higher-order function because it doesn't
44:56 - receive a function as an argument but
45:03 - this is not a higher-order function
45:06 - because it does not receive a function
45:08 - as an argument but it does it does
45:11 - manipulate the array so if I say push
45:13 - and I pass in seven then it will add an
45:17 - extra element to the end of the array
45:18 - now what it's actually doing behind the
45:19 - scenes are all of that that's the topic
45:21 - of discussion for another time what I
45:22 - want to look at is let's look at these
45:24 - four so where do these come from and
45:26 - what do they do so over here this is the
45:30 - Mozilla Foundation web Docs there are
45:33 - lots of places to find resources about
45:35 - what the various things available in the
45:36 - browser and JavaScript are but this is
45:38 - the JavaScript array object and so the
45:41 - array object this is how you might think
45:43 - of it usually it's got two things like a
45:45 - string and you console.log the length
45:47 - and you get two but if I go over here to
45:49 - the left I'm gonna see oh look
45:50 - all these other functions for example
45:52 - and they're listed here is array dot
45:54 - prototype push now I do have a video
45:56 - about what the prototype thing is
45:58 - luckily what I'm doing now is I'm living
46:00 - in this world of JavaScript es6 the
46:02 - version of JavaScript 6 and you don't
46:05 - really have to mess with the prototype
46:06 - too much if that's the mode topic for
46:08 - another time but if but this is where I
46:09 - could find the list of the functions so
46:13 - if I click on push I would find like oh
46:15 - look this is what it does if I say
46:17 - animals don't push cows now I have
46:19 - another element in that array called
46:23 - cows a string called cows which is at
46:24 - the end so let's let's try to decide
46:27 - what should we do first let's look at
46:29 - the map function let me just discuss
46:32 - what each of these do sorry yeah yeah
46:40 - let's look at the map function so I am
46:45 - going to awkwardly I'm trying to think
46:54 - actually what's the best way for me to
46:57 - demonstrate this an interactive console
46:59 - would be so much better if we're on the
47:02 - same page like using
47:07 - code pen and having the console op open
47:10 - or should I just live with my weird atom
47:12 - and clicking back and forth anybody
47:16 - suggest Oh Phil yeah I forgot about Phil
47:24 - I'm trying to think here mmm so like for
47:34 - example what I'm gonna want to do is
47:36 - like have an array I guess I can just
47:40 - write all the code here and then hit
47:41 - refresh over here and see the result
47:45 - split screen with console above your
47:48 - head interesting
47:53 - so like
48:00 - do this more hide the sidebar and Adam
48:06 - okay close pain you who has a github tab
48:23 - so many things I don't know Visual
48:25 - Studio code it has a console in it
48:28 - doesn't it it's nice to me it also just
48:34 - do this
48:55 - it's kind of will work I'm kind of into
49:02 - this let's give this a try it probably
49:05 - has a console plug-in I'm just you know
49:14 - alright I'm gonna go for this see how it
49:19 - works okay so to demonstrate this I'm
49:22 - Joe and this is a little bit silly and I
49:23 - know those are you have more
49:24 - sophisticated workflows will complain
49:26 - but I've got my text editor here and the
49:29 - browser console up here so if I were to
49:32 - write something like an array I'm gonna
49:33 - call it let valve equal four eight one
49:39 - two nine and I were to say console.log
49:43 - valve hit save and go up here and hit
49:45 - refresh I see it there okay so this is
49:47 - gonna be my workflow right now to
49:48 - demonstrate type some code down here
49:50 - refresh and see the output up here so
49:53 - what if what I want to do let's see what
49:57 - do I want to talk about first let's do
49:58 - we're gonna do the math function first
49:59 - and uh the chat reminded me that there's
50:01 - also a function called fill which I
50:04 - could I mean there's just so many more
50:05 - so you know the point of this is for me
50:07 - not to like teach you how every function
50:09 - works but to get the basic idea and then
50:11 - you can kind of learn to and go through
50:13 - and read the documentation to figure out
50:14 - what some of those other functions are
50:16 - but anyway back over here so what the
50:18 - map function does is it allows me to run
50:22 - to pass a function that's applied to
50:25 - every element of the array so for
50:27 - example if I were to write a function
50:29 - and call it doubler and it gets in x and
50:32 - i say return x times two then I should
50:36 - be able to say Vale's dot map doubler
50:40 - and then console dot log valves now I'm
50:44 - gonna leave all this here so let's look
50:46 - at what's going on here I have the array
50:50 - I'm gonna look at it then I'm gonna
50:51 - define a function called doubler then
50:53 - I'm going to pass doubler via the map
50:56 - function to Val's so I should see the
50:59 - array have 8 16 - 4 18 no it's not gonna
51:02 - do that that's it because I've made a
51:03 - little mistake here but let's take a
51:05 - look so now I'm gonna come up here it's
51:07 - the same when I come here
51:09 - fresh we say why I got the same values
51:12 - both times how come it didn't change
51:14 - well one of the things that's important
51:17 - to note is that these functions they all
51:20 - behave differently but these functions
51:22 - return a new array so it doesn't
51:26 - actually change the values in the
51:28 - original array it creates a new array
51:31 - and then puts all the double values in
51:35 - it or the new values that are applied
51:37 - from that function oh my god they just
51:40 - break my glasses now you can leave it
51:45 - that's good these are new to I really
51:47 - don't want to break them the lenses are
51:49 - old but I broke my glasses if I pop the
51:51 - same frames again they're new okay sorry
51:55 - there's gonna be more ads you're gonna
51:57 - see on the YouTube videos like my
52:00 - glasses are expensive okay what was I
52:06 - talking about
52:07 - all right I'm good new array so let's
52:10 - look at what am I gonna do so I could
52:12 - say something like let doubled equal
52:19 - Val's doubler and now I could
52:22 - console.log look at doubled and let's
52:24 - take a look at what that does Oh see now
52:27 - there we go
52:28 - I've got all the elements from the
52:29 - mouse's in the way all the elements
52:31 - doubled and if I wanted to use the same
52:33 - variable you'll see this very commonly I
52:37 - could say Val's
52:39 - equals Val's dot map doubler so let's
52:42 - look at that and now I'm going to say
52:43 - console.log Val's whoops and I got a cup
52:48 - here and there we go so this is now let
52:51 - me give myself a little bit more space
52:52 - here for the code this is now I've got
52:54 - everything I need right I have an array
52:57 - I have a function that does something to
52:59 - a number and then I can say take that
53:01 - function and apply it to every element
53:03 - of the array and give me a new array and
53:05 - overwrite the previous variable with
53:07 - that new array so here's the thing this
53:12 - is great to learn super useful it's nice
53:15 - to have it kind of in this and I'm gonna
53:16 - even shrink this I'm gonna use the
53:18 - arrows I mean use loops
53:27 - this is great to learn it's really it's
53:31 - useful it allows you to write code kind
53:34 - of simplified but it's simplify this
53:35 - really down by using the arrow function
53:37 - in a second but I should note that from
53:39 - what I understand this is not
53:41 - necessarily high performance so if you
53:44 - have super large arrays you can imagine
53:46 - like recreating a whole new array
53:48 - passing a function as opposed to just
53:50 - using a for loop using a for loop might
53:52 - actually run faster most of the stuff
53:54 - that I'm doing this doesn't really
53:55 - matter you're working with small arrays
53:57 - and software web projects you know these
53:59 - higher-order functions are gonna make
54:01 - your code nice and also here's the thing
54:04 - this is one of the reasons why I'm
54:05 - covering this it's like you think what
54:06 - were just me living my life I would just
54:09 - be using for loops I've never bothered
54:10 - with any of this because that's wrong
54:13 - I'm wrong I know I'm wrong but that's
54:14 - some of I'm sort of stuck in my ways but
54:16 - you you won't be going to tutorials you
54:19 - will be going to open source projects
54:20 - this is what people are doing now
54:22 - they're using these higher-order
54:23 - functions and they're using the arrow
54:24 - syntax so you want to get some facility
54:26 - with it so as you read other people's
54:28 - code and you contribute to open source
54:29 - projects you can participate with this
54:31 - new stuff all right
54:33 - now let me do one more thing to this
54:35 - let's get the arrow of syntax in there
54:37 - so first of all we know that I could
54:39 - improve not improve this but I could
54:41 - make this an anonymous function so I
54:44 - could put this in here so now this
54:46 - should be the same exact code I'm gonna
54:48 - refresh here still works but now it's an
54:51 - arrow function so I don't have to say I
54:54 - don't think it's a function I put the
54:57 - arrow it's just one argument so I can
54:59 - get rid of that it's just one line of
55:00 - code so I can get rid of that it's just
55:03 - one line of code so I can assume the
55:04 - return statement and oh look at this now
55:08 - look at this oh so I have to admit I
55:11 - really do like this something lovely
55:16 - about it right I have my array and I say
55:19 - hey just double everything you know take
55:22 - X and arrow it over there two x times
55:24 - two so now if I save this here and hit
55:27 - refresh ah I made a mistake oh I have
55:30 - this extra this semicolon here is
55:32 - actually kind of unnecessary and I guess
55:34 - it caused a problem
55:35 - and there we go so look this is even
55:38 - nicer that time I call it made it kind
55:39 - of loo so this is wonderful that equals
55:42 - Val's map X goes to X times 2 while
55:50 - we're here let's look at fill really
55:52 - quickly fill will take an array and fill
55:55 - it with values so I'm gonna comment this
55:59 - out what if I were to say Val fill and 0
56:05 - console.log balance and let's see let's
56:07 - see what happens ooh oh that actually so
56:13 - interestingly this acts on the current
56:17 - array so the fill function does not
56:19 - create a new array in return but acts on
56:21 - the Kern array
56:21 - what if I were to say fill random 10 am
56:25 - I gonna fill this whoa yeah am I gonna
56:29 - fill this with a random values oops
56:33 - gotta come up here random is not defined
56:37 - because okay I'm just saying math dot
56:39 - random I'm not in p5 world in this video
56:42 - it'll say math dot random am I gonna get
56:46 - a new random value for every element of
56:48 - the array
56:48 - oops shoot no look at this point one
56:53 - four point one four I mean you'll have
56:55 - to trust me point one four point one
56:56 - four those are all the same values
56:58 - because note I'm executing that random
57:01 - function and and picking a random number
57:04 - and then filling it with that same
57:06 - random number but this fill is a higher
57:11 - order function I wasn't actually using
57:13 - it as a higher-order function I was just
57:14 - giving it a number so I wasn't passing
57:17 - in a function if I wanted to pass in a
57:19 - function I don't know I'm just gonna go
57:21 - straight for the arrow syntax here X and
57:24 - I'm gonna say math dot random times 10
57:28 - and I'm gonna say math dot floor in here
57:31 - because I want to just see some integers
57:33 - right look at this ooh did I get this
57:35 - right so this is now an arrow function
57:38 - fill each value X by executing math dot
57:43 - random times 10 and then floor let's go
57:46 - up here Oh
57:48 - what happen
57:49 - they're FFF Oh Phil works in a different
58:01 - way than I think Phil isn't Oh Phil is
58:04 - not a higher order function Oh cruel
58:07 - cruel world I have to use math I was
58:11 - just excited today okay we have to go
58:13 - back we have to we have to go back we
58:15 - have to go back we have to go back a
58:22 - little bit a little depth in there
58:30 - sometimes I like to just design
58:32 - programming languages I just make it up
58:33 - I just make it up pick it up
58:57 - I can't get this workflow down of just
59:00 - going back and forth between these
59:01 - things how can I get that same point one
59:04 - for how many times I have to refresh
59:06 - this until I get point one for about a
59:08 - hundred times probably less than that oh
59:11 - well point one three was good I have to
59:16 - use map instead okay there might have
59:20 - been a weird edit point there because I
59:22 - went off I kept going like in this like
59:24 - magical thinking I was like making up
59:26 - features of JavaScript and I started
59:27 - trying to explain how this is not using
59:30 - fill as a higher-order function I'm just
59:31 - giving it a number but what if I gave it
59:33 - a function fill doesn't work that way so
59:35 - this is where map does actually come in
59:37 - if I wanted to fill all of these with an
59:39 - individual random number I could do that
59:42 - by saying map X yes so this would give
59:47 - me map this function of returning a
59:50 - random number if I hit save here and hit
59:53 - refresh whoa oh and then of course I
59:56 - forgot that I do need to return the new
59:59 - array and there we go now you can see
60:02 - they each have a different number now I
60:04 - should say there's a little bit weird
60:05 - like if I wanted to create an array of
60:07 - random numbers I wouldn't I wouldn't
60:11 - like start with like a fixed array like
60:12 - what if I want to have an array of a
60:14 - hundred numbers that are random well one
60:18 - thing I could do is I think I could just
60:20 - say new array 100 and then hit refresh
60:25 - here no it's empty so the reason what I
60:31 - need to do is I think I need to set also
60:32 - say fill that's weird this is so weird
60:37 - I don't like this anymore dot fill dot
60:40 - map yeah so why do I need to do that
60:47 - because it has to because if what so
60:52 - what if this is undefined okay I still
60:54 - get a random number
60:56 - oh you mean I can just do this No
61:16 - X Lots available not used so if or just
61:21 - math.random oh right right right right
61:22 - right okay okay ah
61:37 - so this didn't work right it's just
61:40 - empty times 100 so this is unfortunate
61:43 - like even though I made a new array with
61:44 - 100 spots because there's nothing
61:46 - actually there I can't start to process
61:48 - it this way so I actually need to use
61:50 - fill first so I can I can chain these so
61:53 - I could say let me fill the array with
61:56 - zeros and then map it now I'm gonna so
61:59 - this should work now and this is getting
62:01 - a little convoluted why do I care about
62:03 - doing this I don't know you can
62:04 - determine you just go to the next video
62:05 - I'm gonna keep going with this just for
62:07 - a little bit longer so now I'm hit
62:08 - refresh now I have an array with 100
62:10 - random numbers but look at this you know
62:12 - what's interesting about this I created
62:13 - a function and I think this also doesn't
62:18 - really matter right I could just do this
62:19 - and it works right because I don't need
62:22 - that I'm not basing it on X but
62:24 - incidentally what is this a function
62:26 - this is a function that returns math dot
62:28 - random well what is math not random it's
62:31 - a function that returns a random number
62:33 - so I could actually do this just right
62:36 - math dot random right I could name
62:38 - that's a named function don't execute it
62:40 - just pass it the named function so this
62:42 - is a way of creating an array with a
62:44 - hundred elements in it that are all
62:46 - random I think this is gonna work all
62:50 - right
62:50 - yay sound effect that doesn't work right
62:54 - now so there you go so now you've got a
62:56 - little bit I'm in this video I think
62:57 - it's gonna end down you've got a little
62:59 - bit about map this idea of higher order
63:02 - functions and array arrow syntax map and
63:06 - fill so what I want to do I could do
63:08 - sort here o sort would be nice but I'm
63:09 - gonna do these in different videos I
63:11 - guess I'm let's look at reduce reduces
63:14 - the kind of complicated one so maybe
63:16 - I'll do that in the next video okay I'll
63:18 - see you in a few of the when I reduce
63:20 - myself okay
63:36 - right so I could have done this
63:44 - yeah let's actually just back for one
63:53 - brief extra thing you know justjust
63:56 - because while we're at it if we're doing
63:57 - all this crazy condensing everything
63:59 - into one line and these things can be
64:00 - chained this can actually go right here
64:03 - so I can actually now have this in one
64:06 - line of code which is to say make a new
64:08 - array fill it with zeros or something's
64:10 - in there and then map the random
64:14 - function to it then it still works and
64:21 - as a special treat
64:22 - I will now foreshadow the use of reduce
64:25 - by reducing myself the new is not needed
64:45 - oh all right all right everybody
64:58 - all right so you don't need the new I
65:05 - like having the new there it makes me
65:07 - feel comfortable and happy I have to go
65:10 - soon zero infill is not needed okay okay
65:16 - so hold on let me let me do that
65:22 - the tutorial wanna redo that whole thing
65:30 - oh poor Matt's yet maybe what did I do
65:44 - when I came let me actually maybe we
65:46 - could go we can skip matcha this is my
65:51 - edit might work better if we skip the
65:52 - part where I came over here dude I've
65:54 - been a blah blah and then went back and
65:55 - then added something let's just do this
65:57 - again okay okay there was a weird edit
66:02 - point there because the chat and live
66:03 - chat that's going on while I'm recording
66:05 - this gave me some helpful tips here so a
66:07 - couple things number one is if I you
66:10 - know I'm kind of like the kind of person
66:11 - who wants to just write everything the
66:13 - thing you could do in one line of code
66:14 - in 15 lines of code but if I wanted to
66:16 - keep going with this I could in fact I
66:18 - don't need to have Val's create a new
66:20 - array and then have it used here I can
66:23 - just put new array directly right here
66:26 - and in fact I don't even need the new
66:28 - keyword I could just actually say array
66:30 - 100 and in fact because ultimately I'm
66:34 - going to fill it with random numbers
66:36 - this zero is totally irrelevant I could
66:38 - just fill it with undefined I just got
66:40 - to fill it with something
66:41 - map doesn't work unless the array has
66:44 - filled with something even that
66:45 - something is undefined so this should
66:47 - actually work here's an array with a
66:49 - hundred spots random numbers yay okay so
66:55 - now what I'm going to do is I think this
66:58 - videos going to end I've talked about
67:00 - fill and I've talked about map I think
67:02 - I'm going to reduce as a kind of
67:03 - complicated one so I'm going to do that
67:05 - in the next video
67:07 - and I'll start it with a um I'll reduce
67:10 - myself I don't know if that's worthwhile
67:13 - in the next video as well I think it's
67:14 - sort and filter I'll get to at some
67:15 - point as well let's look let's look at
67:17 - reduce next thanks for watching yeah I
67:26 - like having news so I should have knew
67:28 - right but whatever oh and this should be
67:31 - let uh fine no come on I can't get it
67:35 - alright that's gonna have to be good
67:36 - enough
67:40 - Thomas is asking will you do it tutorial
67:43 - in ml 5 j s yes eventually not today not
67:46 - right now though all right I'm gonna
67:48 - let's try to do reduce and I'm gonna
67:49 - take a break and come back this
67:50 - afternoon
68:11 - okay Thank You Simon for your example
68:17 - for reduced that's basically the same
68:19 - example I'm going to demonstrate how to
68:20 - sum up the entire array okay
68:41 - I'm thinking oh let me which I shrink
68:47 - myself again so I'm just taking a
68:56 - momentary pause to look at myself in the
68:59 - monitor
69:00 - apparently alright I just think what I
69:04 - want yeah I'm gonna just hard-code an
69:06 - array cuz I don't want to have this
69:07 - nonsense Phil thing okay there we go all
69:09 - right
69:20 - this is going to be oh so much fun
69:23 - 5 4 1 2 9
69:44 - oh I don't even have my Bell it's me I'm
69:51 - tiny I'm up here in my code what's over
69:53 - here this is the array oh it's a nice
69:55 - array I'm going to be here talking about
69:57 - reduce so I reduced myself to a very
69:59 - small person but I am going to unreduced
70:04 - myself back to my normal size to talk
70:07 - about reduced hope that was totally
70:09 - worth doing wasting the first 30 seconds
70:11 - of this video for that bit of check okay
70:13 - so reduce this is a really interesting
70:16 - and kind of weird and quirky
70:17 - higher-order functions for arrays and
70:20 - what it what's generally the reason why
70:21 - it's called reduced is let's say I have
70:23 - an array and I want to take this array
70:25 - and I want to just I want to find out
70:27 - the essence of the array as a whole I
70:29 - want to reduce it into one thing so
70:31 - that's what this does now there's lots
70:33 - of ways reasons why you might want to do
70:34 - this but I think probably the simplest
70:36 - scenario to start with is I have an
70:37 - array and I want to add up all the
70:38 - numbers in it I want to average all the
70:40 - numbers in it so let's look at how that
70:42 - works with reduce right first let's
70:43 - actually do that without reduce just to
70:45 - just to kind of like get the hang of
70:46 - things here so if I wasn't using reduce
70:49 - I would say for let I equals 0 I is less
70:52 - than Val's dot length I plus plus and I
70:58 - would have a variable like let's sum
70:59 - equals 0 and I would say sum plus equal
71:02 - Val's index I and then I would say
71:05 - console dot log sum and I would refresh
71:07 - up here we could see there we go
71:09 - all those numbers add up to 21 now if
71:12 - you've been paying attention to my es6
71:13 - videos of which this is in a playlist I
71:16 - could also say for let Val of Val's so
71:23 - this is kind of like a kind of like a
71:25 - for each style loop there is actually
71:26 - something called a for each in
71:27 - JavaScript with a little bit different
71:28 - also a higher-order function that you
71:30 - can pass anyway but this is saying every
71:33 - Val
71:33 - inside of vowels and oh of course now I
71:36 - don't have that index I would just do
71:37 - this add them all together so this is
71:39 - reducing it a little bit reducing the
71:41 - code a little bit and if I hit refresh
71:42 - I've also got 21 so how do I use this
71:46 - reduce function let's actually go to the
71:49 - actually don't the browser is weird now
72:00 - okay so let's see how this Reduce
72:03 - function works do you guys hear that can
72:09 - you hear that it's like the film class
72:10 - back there and I don't have my water
72:12 - this is okay I'm gonna get to go soon
72:14 - come back later yeah I know I could use
72:18 - for each yeah I would really love to be
72:25 - able to just like walk around the screen
72:27 - there's a tiny person and point to stuff
72:29 - someday I'll get that set up that'll be
72:32 - fun all right so where are they all
72:40 - right so let's look at how this reduce
72:41 - function works and actually before I act
72:44 - write the code let me come down here and
72:46 - let me go and look at the documentation
72:49 - so I'm gonna look at reduce so reduce is
72:53 - a function that has that takes two
72:55 - arguments and there's a way of doing it
72:57 - with one argument which I will get to at
72:59 - some point an accumulator and a current
73:02 - value what does that mean accumulator
73:05 - and the current value accumulator and a
73:08 - current value so this is not reduce
73:11 - takes a function it's a higher-order
73:13 - function so let's write a function that
73:15 - has both it compute an accumulator and a
73:18 - value so I'm gonna get rid of this code
73:20 - and I'm gonna say function and I'm gonna
73:24 - use ACC for short for accumulator and
73:26 - Val for value and I'm gonna say return
73:32 - accumulator plus value mmm okay
73:39 - return accumulator plus value I think
73:42 - this is right oh and let me name this
73:44 - called I'm gonna call this sum now I'm
73:48 - gonna say Val dot reduce some and I'm
73:53 - gonna say let result answer equal that
73:57 - and I'm gonna say console dot log answer
74:00 - I realize I kind of just typed this out
74:01 - and I haven't really explained it yet
74:02 - cuz to be honest I'm not entirely sure
74:04 - what I'm doing just yet but hopefully
74:07 - this is gonna make sense
74:08 - I came back it's gonna work and I can
74:09 - back up and explain it let's see I got
74:12 - the answer 21 okay so what does this do
74:14 - well do you remember when I let's let me
74:18 - go back to my old code I'm gonna just
74:19 - quickly copy this and I'm gonna go back
74:30 - to here what if I actually called this a
74:33 - cc short for accumulator and then set a
74:36 - CC plus equal Val well the accumulator
74:39 - starts with zero and then every Val is
74:43 - added to it over and over again this is
74:46 - the idea of reduce you give it something
74:50 - that's going to persist over time as its
74:53 - looping through elem every element of
74:55 - the array and then you can act on that
74:58 - thing that's persisting and the actual
75:01 - value of the array now in this case two
75:03 - to add them both together all I want to
75:07 - do to add a sum I just want this
75:09 - accumulator to always persist and just
75:12 - keep having each Val added to it now
75:15 - what's the weird thing about this is
75:17 - what's the value of accumulator like
75:19 - what does it start with well interesting
75:21 - enough let's see if we can determine I'm
75:23 - going to add console dot log accumulator
75:26 - in here and I'm probably gonna need a
75:29 - bit more room in my consults I'm gonna
75:31 - do that look at that five nine ten
75:34 - twelve 21
75:35 - interestingly enough the first time I
75:39 - ran the code the accumulators value was
75:42 - five this is because I did not provide
75:47 - an initial value for the accumulator so
75:51 - if you do not provide an initial value
75:53 - for the accumulator it will by default
75:55 - be the first thing in the array which is
75:58 - five notice now if in here I say reduce
76:02 - sum and then I pass a second fad a
76:05 - second argument so sum is this function
76:08 - that's the that's what we're passing to
76:10 - reduce but there's an optional second
76:11 - argument which is referred to as the
76:13 - initial value so if I want the initial
76:15 - value of accumulator to be zero I didn't
76:18 - have to do it for this problem that I'm
76:20 - solving but I couldn't do that here
76:21 - now I'm gonna hit refresh and oh and
76:25 - let's look at what it did notice that it
76:27 - started at zero so I have an extra
76:29 - console.log it actually it didn't
76:31 - actually bother to run it with the first
76:33 - value because it just started
76:34 - accumulator has that value but the
76:36 - previous time but now it's doing that so
76:38 - just to be make it clear if I say 10
76:42 - right if I start accumulator a 10 can
76:45 - take this out what should think about
76:47 - pause and think about what am I gonna
76:48 - see in the console refresh 31 right
76:53 - because I added all the numbers starting
76:55 - with 10 okay how can i condense this now
77:00 - well first of all I can use the arrow
77:02 - syntax I can get rid of the word
77:08 - function I don't need it to be named and
77:12 - it's one line of code so I don't need
77:14 - the curly brackets and I don't need the
77:16 - return so this actually can now go right
77:20 - here and this is now I'm gonna give
77:23 - myself a little more space this is the
77:25 - full line of code I can say hey take
77:30 - this array and reduce it with an
77:33 - accumulator of a starting value of 10
77:35 - and for each value add that value to the
77:38 - accumulator and now what if I wanted to
77:42 - do the average if I wanted to do the
77:44 - average I'm gonna need two lines of code
77:46 - so I'm gonna have to add these curly
77:48 - brackets back in and I'm gonna say oh no
77:56 - I wouldn't do that in here
77:57 - nevermind let's just pause before I said
78:00 - average because average I would just say
78:02 - answer equals you know just like divide
78:05 - this by vowels dot length so okay woah
78:12 - it's not a default start value of zero
78:15 - it's a default start value of the first
78:18 - element of the array which is different
78:25 - arrey reduce will max I'm just looking
78:35 - at some of it Oh
78:40 - so I did say it correctly okay good
78:43 - [Music]
78:46 - I'm trying to leave what else I should
78:49 - demonstrate here and this is the basic
78:55 - idea I'm trying to go there's one other
78:59 - example like I could I could like
79:03 - concatenate a string and that's sort of
79:09 - the same thing though I mean join does
79:13 - that finding min and Max is a good idea
79:18 - okay look and I wouldn't do that with
79:21 - filter I deal with reduce oh yeah okay
79:25 - let's do that
79:25 - let's do that okay okay so in this case
79:33 - though if I really just want to
79:35 - calculate the sum which I can call this
79:38 - sum I don't want to start with ten so
79:41 - I'm going to do this and just to be
79:42 - aware just to say it again this is very
79:44 - important especially once you start
79:45 - having like arrays of objects and other
79:47 - things
79:47 - the accumulator if you don't give an
79:49 - initial value is not starting with like
79:51 - a default value of zero it's actually
79:53 - starting with whatever the first element
79:55 - of the array is so if you ever seen this
79:57 - code and I'm going to do this soon
79:59 - enough in a future video where this is
80:00 - an array of particles I might want to do
80:02 - something to say calculate the average
80:04 - the centroid of all those particles I'm
80:06 - gonna have to be clever about how I
80:07 - think about doing this okay now they're
80:11 - checking a good suggestion which would
80:13 - be to find the maximum or the minimum of
80:16 - and of course there is I think in p5 I
80:19 - know as the min and Max function there's
80:20 - probably native JavaScript one as well
80:21 - but let's try to do that
80:23 - let's try to find the minimum and
80:26 - maximum using reduce so let's I'm gonna
80:28 - write it out the long winded way because
80:30 - this helps me I'm gonna say fine max and
80:34 - actually this is great because this
80:35 - relates to some of my neural network
80:38 - videos that I've been making where I'm
80:40 - going to have an accumulator and a value
80:42 - okay now if value is greater than
80:47 - accumulator accumulator should equal
80:49 - value right accumulator doesn't have to
80:51 - just be a thing that's you're adding up
80:53 - together you're saying it's just a
80:55 - variable that's going to persist while
80:57 - I'm going over the whole array and value
80:59 - is each one so if that current value is
81:02 - greater than whatever the accumulator is
81:03 - then I'm gonna get then accumulator
81:07 - should equal that value and then I guess
81:10 - do I want to I need to return the
81:12 - accumulator or does that by definition
81:16 - know yes I need to return the
81:20 - accumulator I think so let's see let's
81:24 - take a look at this so let's say let
81:26 - biggest equal value deuce find max all
81:36 - right so and then let's console dot log
81:41 - biggest nine that's the look now let's
81:48 - put nine in the middle because just to
81:50 - be sure that that's really working
81:52 - because it was the last element nine it
81:55 - still worked so I definitely need to and
81:57 - if I take out this returned accumulator
81:59 - yeah I don't get it so of course I need
82:02 - to return that right because the whole
82:03 - point is I am going to return at the end
82:06 - it's kind of you sort of get into those
82:08 - being assumed that value that persisted
82:10 - over the whole time now how can I reduce
82:13 - this so first of all I can make this as
82:16 - we know an arrow function so let's
82:20 - actually do this and I'm going to put
82:23 - this here now into here so this works
82:31 - this is a little bit awkward looking but
82:33 - this is definitely kind of functional
82:35 - style I'm going to reduce that I have an
82:38 - accumulator and a value I'm using the
82:40 - arrow syntax and running this code let's
82:42 - make sure this still works whoops I get
82:47 - nine now I could probably use I think
82:49 - it's called a Turner
82:50 - operator if I wanted to be this crazy
82:53 - person who is crazy person who is
82:58 - reducing who's like if I want to be this
83:02 - crazy person who's like always trying to
83:04 - get the code to be shorter and shorter
83:05 - shorter let's try to remind ourselves
83:06 - what a ternary operator is all right so
83:10 - I think it's got a question mark and a
83:13 - colon right I can I just like I ever oh
83:16 - where am I going
83:17 - let me come over here oops all right
83:24 - a question mark and a colon so if I'm
83:28 - saying if a is greater than B a B equals
83:38 - a right I can reduce this but just using
83:44 - the same words here too by saying
83:50 - question mark wait a sec well that lost
83:55 - my train of thought right yes yes well
84:04 - this is crazy
84:19 - yeah
84:26 - thinking about this okay
84:37 - I'm sorry sir so but this okay so this
84:46 - is an if statement if a is greater than
84:48 - B B equals a but it could also sort of
84:50 - think of this as if a is greater than B
84:53 - I might say like return right if it's
84:57 - greater than a is greater than B then a
85:00 - is the the new bigger value otherwise
85:03 - return B is the new bigger value so this
85:07 - kind of statement can be written in with
85:09 - a ternary operator by saying question
85:13 - mark a colon B so I can get rid of hey I
85:19 - felt like what I'm doing today get rid
85:21 - of this if and these returns and I
85:23 - basically have evaluate this boolean
85:26 - expression if it's true here we got a if
85:29 - it's false here we got B so in theory I
85:32 - believe ups in theory I believe that I
85:45 - could let's change these actually to a
85:47 - and B which is fine accumulator and
85:48 - value is kind of useful but I could say
85:51 - a greater than B : I don't know question
85:57 - mark a : B I gotta give myself a lot
86:03 - more room here did I get this right oh
86:08 - it's right let's look at this is this
86:11 - really right oh my goodness oh oh this
86:14 - really freaks me out but it's okay it's
86:16 - okay everything's gonna be okay I got
86:18 - too many mouths things everywhere all
86:20 - right let's think about this again I'm
86:21 - taking an array a persists over time oh
86:25 - no wait it's just right yeah I lost my
86:32 - my thoughts about it because I like okay
86:34 - yeah yeah okay
86:36 - a is the is the accumulator B is the
86:39 - value if value I yeah it was funny
86:46 - because I was thinking about it the
86:47 - other way around
86:48 - cuz I think what I want to do is
86:49 - if the value is greater than the
86:52 - accumulator then return the value
86:53 - otherwise return the accumulator they're
86:55 - really the same thing but so let's see
86:58 - if this works I should get nine nine
87:00 - it's still got nine so the idea here is
87:02 - that I'm saying reduce this array have
87:06 - about have a variable called a the
87:08 - accumulate it persists over time and
87:09 - then look at every value B in the array
87:12 - start with five
87:14 - if B if it's four is bigger than five
87:17 - that's your new accumulator if nine is
87:20 - bigger than five
87:21 - that's your new accumulator which it is
87:23 - if two is no is two bigger than nine
87:26 - knows one bigger than I know I'm left
87:28 - with nine so hopefully this is kind of
87:31 - helping you these are two scenarios now
87:33 - we've now seen where this is like a nice
87:36 - little snippet of code to find the
87:38 - largest value in an array and this is a
87:42 - nice little snippet of code if I put it
87:44 - back to find the sum of all the values
87:48 - in the array and both of these the
87:51 - initial value is can feet is is assumed
87:53 - for example just to be clear about this
87:56 - what if I put 20 here if I put 20 here
87:59 - if the accumulator starts is 20 what am
88:01 - I gonna see 20 and then the sum is 21
88:05 - because right so it's gonna be 20 cuz
88:08 - none of the numbers are bigger than 20
88:09 - so this could also be a test like hey
88:11 - find me the maximum value in the array
88:14 - but if nothing is bigger than 20 just
88:15 - stick with 20 so but if I said if I said
88:18 - 8 here I'm gonna get 9 right so this
88:23 - initial value is assumed to always start
88:26 - with 5 but unless you explicitly
88:29 - initialize it to something else as the
88:31 - second argument to the reduced function
88:34 - okay so boy I don't know how I feel
88:38 - about these functions but at least I've
88:40 - covered them I've tried to explain them
88:42 - you should let me know in the comments
88:44 - because I don't know I felt pretty good
88:45 - about map it felt like if you're
88:47 - watching that video it made sense you
88:48 - could find use of it this reduce one is
88:50 - really confusing and it takes a lot of
88:51 - practice especially as we like condensed
88:53 - it short ensure with the arrow function
88:54 - so let me know how that goes I'm going
88:57 - to use it with a particle system in a
89:00 - future video that will hopefully be
89:01 - links
89:02 - here somehow in a magical way so that
89:05 - might give you more of a sense as you
89:06 - see it used in a practical scenario
89:08 - where you're actually doing some
89:09 - graphics and animation so next video I
89:12 - will talk about filter all right
89:19 - everyone boy this stuff takes so much
89:22 - longer reduce right what's reduce right
89:25 - I got to take a break now and go have
89:30 - some lunch
89:44 - previously oh oh I don't want to cover
89:50 - this goes right to the left but that's I
89:54 - should mention it alright everybody so
89:58 - I'm gonna need to take a break now I
90:00 - have a meeting and I'm gonna grab
90:01 - something to eat I hope to come back
90:04 - around I mean 2 p.m. would be the
90:06 - earliest more likely something like 3
90:11 - which is I'm timeout Eastern Time which
90:12 - is about two hours from now and then
90:15 - I'll probably do another hour or two of
90:17 - live streaming boy I'm really not this I
90:19 - take so much longer to get through stuff
90:21 - so we're so what I want to do let's
90:24 - think about what I'm gonna do I'm gonna
90:26 - do filter I guess I could do sort filter
90:31 - and sort whatever and then I need to do
90:33 - inheritance of polymorphism and then the
90:35 - particle system stuff Wow so many things
90:38 - to do okay so any questions for a minute
90:49 - here maybe I'll figure out my sound
90:50 - board issue as well check my email all
90:53 - that sort of stuff
90:54 - okay everybody good take a break go
90:57 - stretch do some jogging dance to some
91:00 - music that sort of stuff alright I will
91:05 - be back later thank you for tuning in I
91:07 - don't have any music we can do this I
91:09 - can do this I'm seeing that people are
91:13 - requesting PhoneGap tutorials there's so
91:15 - much to cover
91:16 - you can never possibly do it all but
91:17 - maybe someday ah
91:19 - alright so a ciggy is asking what are
91:24 - you gonna do with the particle systems
91:25 - well what it's gonna one thing one thing
91:27 - I did with my class this week is I used
91:29 - the filter function to filter out
91:31 - particles that are off-screen for
91:33 - example and like get rid of them out of
91:34 - the array okay I don't know if that's
91:36 - the most efficient way of doing it but
91:37 - it kind of is a nice demonstration so
91:39 - I'll do that sort of stuff so I'll be
91:41 - back within one or two hours okay thanks
91:42 - everybody see you later

Cleaned transcript:

hello happy Friday welcome to today's by coding train stream this is how I feel today somehow I'm gonna wake up and do some coding but today it's gonna be a little bit different than usual I have a short period of time now and then I'm gonna take a break and I will come back and do some more and I'm very excited because I am going to do some tutorials a little bit technical today but I'm going to do some tutorials on a concept known as higherorder functions and I'm also going to do some tutorials I'm getting excited about it on a topic known as inheritance and I don't have my my so importance of working but you might be able to hear it through my microphone if I just play it out through the speakers and polymorphism alright that's the only time I'm going to do that Oh am i smaller than usual I might be so I laughs if you you might recall last week's livestream I had a little bit of fun with this pendulum double pendulum coding challenge and I made myself really tiny and I put myself inside the code so maybe I should be a little bit bigger I just it doesn't say it safe or I don't know until here we go it's a little bit better how's that look better so I have been a you know historically historic me as a historical figure has been a programmer who mostly has always worked in Java actually one of the first boat if I go back all the way one of the first programming languages never used was basic and I did a little bit of basic on an Apple 2 plus and about second or third grade if I remember correctly then I really didn't program at all until around age 29 and that's when I learned programming using the lingo programming language and then after that I learned Java then after that I discovered processing and for years and years of years I use processing which is built on top of Java I did a little C++ here and there but everything I did was always objectoriented and my brain calcified as it is really just thinks in object orientation and there's all sorts of new and amazing functional programming patterns and techniques and strategies that people love and adore and so you know I'm gonna dip my toe in that a little bit today by talking about higherorder functions coded rate is brought to you by coffee I don't usually usually I tried not to have coffee with these livestreams because I'm already kind of like hyper and insane but I today for some reason I there's a couple of things going on number one is I had a very strange night of sleep which is the sleep thing didn't work for me last night that happens every once in a while and then I also on this morning I was on the New York City Subway which was actually kind of lovely I got stuck in between stations in between 14th Street and West fourth there was a smoke issue or something Ivan looked in the news to see if there was anything a significant but the train was stopped her for about 45 minutes so I kind of like half fell asleep on the train while I was waiting but didn't really and it's listening a podcast and I just feel completely off which is too bad because today I do have I really want to get stuff done and I will be out of a web do it I I'm not available next Friday so the next live stream after today will be two weeks from now so I thought I wanted to just mention that Oh getters and setters is something I would like to get to today as well so though okay but hold on let's before I even get into any of that I want to just mention again that there is a new the coding train website I am trying my best to always update and place a note here when I know in the next live stream is going to be I didn't used to have a schedule of multiple weeks ahead I mean the it was useful for me to try to keep myself organized because I never really kept to it but that's something that I and so oh and look tune in live I wonder if it says that's when I'm livestreaming but are just so let's click that this is like coding train recursion here let go one more time so so that's what I want to say the other thing I wanted to mention look at this wound so we get a nice little ripple going and one more one more one more here we here come here we come one more one more oh I didn't do another one who knows anyway okay hi I lost my I lost my train of thought oh my got it now it's zooming I'm lose I'm going crazy alright but so I wanted to also just miss oh there's a lot of this website is amazing thank you to Niels web for viewing almost entirely all of the development there have certainly been other contributors that you can look in the github contributors thank you also to Austin who has been doing a lot of design iterations working on this like interest cool animation when you hover over the card it like changes color so there's some other things coming to the site mostly what I want is this for this site to be a way that people can find the videos more easily and in particular I get the question a lot of like where do I start so I would like to create a page that's maybe like for beginners anyone wants to help contribute to that check out the github issues on the github repository and please contribute now I will go here to coding challenges and I'm gonna go here to double pendulum so this was my most recent coding challenge if I clicked here I'd get to the video if I click here we get to a page where you can download the code you can run the example in theory let's see if that works there we go there's the example running in JavaScript and then you can also this is what I wanted to know most add your own version so all the coding challenges now should have this page where you can see contributed variations by a community members and the credits are here the link to it is here source code and if you click on these links there will be some instructions it's not the simplest thing in the world you have to use some mark down syntax and we're using this thing called Jekyll there's I would love to just spend a whole day going over the sort of like open source development of this website to help people contribute to it but that's not for today but let's click on this submission from Thank You Don Wilson and whoo awesome I love this already so here we have a double pendulum one thing I love about this that I didn't do in mind because I'm pretty sure I can click on it and I can kind of drag let's drag this one interestingly if I click on this I can't pull I don't have to use if you look at my inverse one thing can be added to this is from my inverse kinematics tutorial I have basically soil that almost does exactly this if I pull on this I could pull the whole pendulum out and feel more realistic but what I love about this is let's let's try to pull this all the way up to give it some and so I can change in real time I can change the lengths of these arms I can change the mass I think it would be nice to see maybe the size of the dot change when I change the mass that could be some useful visual feedback as well as the gravity so I can make it super strong or zero that's kind of fun no gravity at all and then obviously here's the dampening if I make that you know small gravity with hot with pretty high dampening it's going to come to rest very soon so well look at this i'm simon in the chat send me a nice diagram about getters and setters thank you alright so it's very hard for me to see uh thank you into the new Patriot groups and you said any images it kind of fills up the whole chat cuz I have everything zoomed in on that computer so it's great and helpful but it's actually more helpful to me to just have short lines of text if you're trying to get get something across to me in the chat okay I see that people are saying that they're gonna submit their minesweeper one people are giving me some smiley face emojis wake up wake up wake up I don't have my just out of curiosity how much can you hear this so that's just playing out through the speakers of this Ida hat in through this microphone which is here okay I'm really excited about this higherorder functions things but I feel like today is not the day today is not really the day for me to do anything but I've got to do it all right so let's think about this let me get a code editor up I'm thinking about switching over to visual studio because everybody says I should but then I get kind of obstinate and things like I don't want to use the thing that everyone says is the coolest thing it's the best thing I just want to use my thing that I like that I'm comfortable with because why not so a neural network coding train let's close this out let me go to terminal Here I am using the p5 manager someone in the patron slack channel suggested creating a kind of variation or on p5 manager that's like a tool command line tool to generate coding train project templates that's a really interesting idea G be higherorder let's just call it higher order higher underscore order C D higher order let's run a lot of this I'm going to be able to just do in the JavaScript console and so now I'm serving up that page whoops let me come back to here and open it up in atom and go to sketch KS and get rid of this get rid of this and go here Oh lazy someday I'll just make a template for myself let's go here okay so now let's go back to the browser localhost open up the console oh I have my notifications on today I need I didn't I forgot to configure them so what I try to do just for those of you is like if the microphone breaks or something if you're in the patron group and in the slack channel you can send me a at Schiffman and it will appear unto my watch please got abused that emergencies only because but unfortunately getting some other nonsense on here but hopefully I won't get any other text I meant to turn that off so anyway let's see uh background zero okay this is working wonderful all right we are set up and we are ready to go this is my sound board fail and here we are by the way and we want to do it like totally random nonsensical study on my typing the e key on this keyboard I'm getting a new computer soon the e keyboard on the screen just keep saying worse and worse I think I've now almost like trained myself to hit that key harder but like right now I'm gonna hit E Network it didn't work didn't work work works like 50 percent of the time I'm just curious if anybody like notice how I'm like going really slow or how many times I type e it doesn't work how much is this affecting maybe the whole coding trained stuff is just no good anymore the tutorials are don't make any sense they're not interesting to watch and I'm little worried it's because of this iki and the fact that I feel like today alright oh look at that okay triple pendulum I do intend by the way in my course that I'm teaching so the reason why I'm covering this today is the topic in my course that I'm teaching right now at NYU is particle systems and so I've been using higherorder functions array functions to manipulate arrays of particles in interesting ways and so that's why I wanted to make some videos about that and we'll apply it to the particle system examples coming soon our tutorials about physics engine and I did a bunch of these last year it'll be interesting to remake the double pendulum I mean it actually exists already I believe I think if you go to Mader chess is a physics engine that I use in some of my tutorials and I believe if we see all these demos one of them eventually will come up and be yeah there we go so I I kind of it was there really quickly can I go to demo oh no and go to which one is the double pendulum double pendulum so there you go this is very so be interesting to remake this and in matter is and just sort of see how that compares and then you know we could do a triple pendulum all sorts of interesting stuff so I'm that's coming all right now what happens if I Google higherorder functions and if I image search that yeah hi okay so I'm just going to talk about it myself and I'm gonna go to Mozilla array and I'm gonna end up here all right ah so William and the chat asks please some je s beginning lessons so my beginner playlist is if you look on the YouTube channel it's called foundations good job that's the word foundations of JavaScript in the title I don't remember what it's called otherwise alright what's the chance this works very little all right here we go everybody Roshan in the chat asks in the YouTube chat asks how do we contribute to the coding train website so I it's actually not immediately obvious because there's not I don't think there's a link on the website currently to the github but actually there are coz everywhere it says how to contribute github so nevermind but if you're looking for it it's actually the the the repository has been renamed and so this is now the github repository for the website github.com slash coding train slash website something that would be wonderful actually that it could really use a contribution for our unit tests and in particular making sure the markdown files are that people are pull requesting are formatted correctly and the Jekyll bill doesn't break and so I would be happy to set up this website as a continuous integration with a circle CI which is a company that sponsored some previous tutorials that I made and have unit testing because there's a lot of pull requests coming in and I I just like I feel like they're just verge that not check them and there's a site breaks and then I realize like oh I probably should check them or have some unit tests so that would be a grab that's not a that's not a exactly exactly a beginner friendly way to contribute beginner friendly way to contribute would be to a beginner friendly way to contribute would be to continue filling out the two toes so right now I believe if you go to coding challenges oh sorry the content is all in these underscore underscore topic name factories so if I click on coding challenge you'll see this is a markdown file for each and every coding challenge and this is what gets rendered on to the website so most of these are all here they might be missing some related links and things but in in theory the idea is to have a markdown page in this repository that renders to an HTML page on the website for every single video I've ever made and you know if we go into tutorials there's well there's a lot because people have been adding them but there's a lot missing so any help with that would be wonderful and that's a little bit more beginner friendly to help with and there's also a community contributions guide on the wiki which is content contribution guys what you want to look for so if you want to submit your own code that you made based on a video that would be here if you want to submit something if you want to help contribute to like pages that are about the videos here and then of course if you're a designer if you have some ideas for how to improve the navigation or language if you're a recopied writer on all of those things would be I would love help with okay there's so much noise in the hallway right now can you do something like barns Hut method at some point sure oh you know what I want to do I want to do it sooner I need to remember this but in a this today no probably not but I want to do a quadtree stuff because I'm that's something that is missing from all my nature of code tutorials and I want to look at how to optimize for kind of collision detection and things like that so I gotta get to that at some point okay we gotta get gotta get start here because it's already 1135 and I was gonna this is like the first part of the livestream I'm just gonna do a little bit then come back later so I gotta I'm just like introducing everything enough ability I have to go what do you think is this better with the cap yeah hello welcome this is a video tutorial and this is really just a you know all these at the beginning I need a little take too hello welcome to another video that I'm in I just think so many videos but this is another one I'm actually really quite excited about this I'm going to talk about in this video something called a higherorder function as if you followed my tutorials and things over the years I'm kind of like an old Java programmer well probably the language that I programmed the most in is Java and specifically processing which is a development environment built on top of Java that I use and so I really was taught and have learned and it practiced like objectoriented programming I'm just going to programming I'm just going to programming I'm learning program but there is this thing called functional programming which is very popular and interesting and I want to dip my toe a little bit and javascript is a language where functions are the sort of primary building block of the language and there's lots of thing and of course you can do this I know in Java now with like Java 72 whatever version is now a hundred and thousand 51 but I want to look at this idea of a higherorder function and kind of kind of wade into this idea of functional programming a bit more now this video is appearing in my es6 playlist even though some of the stuff that I'm gonna use is not es6 specific but it's useful to have it here because I'm going to use in these tutorials also this particular syntax known as the arrow syntax or the arrow function and I'm gonna use that not only available in JavaScript es6 and if you are confused about what the arrow function is magical tutorial about that in a separate video and I think I talked about es6 for cs5 which are different versions of JavaScript there okay so what is I'm going to attempt to define what a higherorder function is and I would I the way I like to think about it just like well there's a function I could define a function like this function hello and then I could write console.log hello in there and that's a function it's a named block of code that I can execute by calling the name of the function there's lots of ways to declare spell chibs and javascript in but he has six syntax and I could say var hello equals or let Hello equals Archon Stello equals so many possibilities this is not a higherorder function because it is just a function on its own on the level playing field of functions a higherorder function is a function that kind of has two levels of functions through it or more than two in other words what if this function expects as its argument another function so you're calling this function in sending it a function that's a higherorder function or what if this function actually makes a function or returns one back to you somehow that is also a higherorder function so any function that either takes a function as input or sends a function out as output that is known as a higherorder function and you can do all sorts of kooky interesting things that can that look kind of fancy that could be fun but also can make your code easy to write um so I the reason one of the reasons why I'm doing this is there are a lot of higherorder functions available for JavaScript arrays and those are really useful let me name a few of them map sort reduce filter so in the subsequent videos that are following this one I'm gonna start going through these functions and it's my goal to actually then tie these functions into a particle system example because I want to look at well you know I could look at the how these stuff works and just put numbers in it but what might be an actual real life scenario in the sort of creative coded graphics world that I might use them in so this is the whole landscape here I'm gonna start with just basic higherorder functions I'm gonna write a couple like goofy trivial examples I'm gonna stop I'm gonna come back and start going through higherorder array functions and then try to like tie that into a particle system that's my plan I know that sounds fine I think it's okay I don't know there could be a better plan I'll come back and make these videos again another day here I go over here alright let me check the while I'm taking this little moment let me check the let me check the returning the function is called currying I did not know that okay so far so good oh I'll do my fake walking over here again alright so let's try to look at this idea of passing a function to a function or returning a function from a function so let's I have a sort of empty bit of code here I've got the p5 library load it I don't need it for a minute demonstrate but it hasn't I set up function which is like the window.onload function so I like to have that available to me I don't actually need to do this and set up and I'm going to anyway alright so let's say we're to define a function and I'm going to call it sing and in the function I'm going to say la la la la and then when I'm done okay let's just do that okay this is my function sing oh I got to picking it I got to make it in the global space so I can call it from the console and the set of functions totally irrelevant at this point I know why I talked about that so I have this function called sing so now I'm gonna go over here and I'm gonna say sing song so imboca sing ah I reload the page say la la la la all right now craziness what if I were to define what if I were to say hey this function takes as an argument another function and that might be called like a callback and when I finish singing I execute that function so you can think this might this this is might be code that you've never written yourself but it's code that's happening all the time in JavaScript libraries that you use because a lot of times you say hey load this JSON and here's a callback or do this but apply it with this function so this is the idea of if you could send in a function right the parentheses aren't here right because this is actually the name of a variable the name the function is the parameter to sing is callback and if that is a function I can execute that function here so in other words I could say now in setup I could say I could make my own function sing what would be so what something besides singing check you do meow and I'm going to say console dot log meow meow and then I'm gonna say sing meow actually let's just let's do this all in the car I'm gonna put this here and then I'm in here write one thing now what happens if I call sing it says callback is not a function so I didn't pass that parameter so I have to now say sing meow then I'm giving it the meow function so sing la la la and then it executes that meow function now I could be sort of thoughtful about this and I could say like Oh only call the callback if it exists what did I get wrong here whoops so now I could do some error checking in my function so I could do this and it's okay for me to say sing it just does la la la or I could say sing and then act when you're done executing meow and if I wanted to be really really really careful about this I think I could say as long as it's an instance of a function who knows if that's right so I could say sing meow and then sing and it would still work so this is this idea of being able to call a function from a function ok let's look now at ok well up hold on a second this is kind of this is very basic and sort of nonsensical but I'm gonna keep going we're just sort of thinking here for a second okay I should also mention that I'm kind of writing this code in a very longwinded way where I'm aiming all of my functions and this is not what you would typically see as JavaScript programmers do and eventually I'm gonna be like peeling this away and having anonymous functions that eventually get into this arrow function again so for example just to make this case clear probably in another way that I might do this is say oh I want to call sing and then I just want to add pass in another function to it so you can see here this is me calling the function sing and giving it an argument which is all this code which is a function definition with no name an anonymous function and this might look even more clear to you if I do this right you can sort of see like this is the whole argument being passed in between those other words buggy those other two parenthesis so that's a whole function definition just being passed right in and you know spoiler alert I could kind of write it like this with arrow but we're gonna get back to that later we're gonna come and come back to the arrow function later okay so one more thing let's try so this is a function that you're passing a function another thing you could do is I could have a function return a function some might even call that like a function factory or something you love factories okay so let's get rid of this and I'm gonna use a pretty standard example it's probably one that you would find and countless other tutorials and I'm gonna write a function called multiplier I'll show you why this is useful and what this function of first of all let me just call read a function called multiplier and give it an argument called factor give it an argument called X and an argument comes factor and I'm gonna return x times factor so this is a general function that's just going to take two numbers and multiply them together so if I load the page here I'm gonna say multiplier X 5/2 and what should I get nothing let's try that again oh I spelled it wrong multiplier 10 if I say multiplier 3 comma 9 twentyseven make a little calculator here okay but what if I want to actually create different functions that multiply by different factors so instead of instead of having X here what if I just said return a function that receives X and multiplies it by some factor look at this the multiplier returns a new function that uses the factor that was passed in whoa so in other words what do I mean by this I can now say whoops and I'm just using the console here so let me get more space here let me make this a little bigger I can now say let let doubler equal multiplier whoa what is doubler now right I didn't get it is it a number dime multiply something No I created a function i created a function that uses the number that returns x times two so if I were to say let Tripler equal multiply or three now I've created a function right we can actually just double check let me just say whatwhat's doubler is look this is what doubler is it's this function now x times factor it's showing me that whoops what it what are like what do I get myself into by clicking on that ah come back are we still there No okay hold on hold on shoot let me let me recreate what I just did for the purpose of editing now it's still showing the factor here but really inside that function it's holding on to that number two that was passed in so in other words if I were to say doubler for what am I gonna get no i messed something up what did I do wrong oh it doesn't say oh this has to say ah oh oh I have a mistake look at this I wasn't paying attention to what I was doing this is a fine mistake for me to have right it didn't return anything undefined I forgot to also have the return here so this is kind of weirdlooking but this multiplier function makes a function that returns X times factor so now if I start over here and I say let doubler be a multiplier create a function with a factor of two and let Tripler be a create a function with a factor of three now I can say doubler four and I get eight or I can say Tripler four and I get twelve okay so this is this idea of higherorder functions you can either have a function that receives a function maybe it takes some time to do a lot of things asynchronously so it can execute a call back to alert the caller of the function that you're done this is what you might write into a programming library if you're writing a JavaScript library and you want to offer callbacks or it can be a function that returns a function if you want to be able to generate functions based on a set of parameters that you're using in various places so this is really just the basics I'm gonna stop it here and I'm gonna move on and instead of writing my own higherorder functions I'm gonna make use of other higherorder functions that are wonderful and excellent and exciting in the JavaScript arrays okay thanks for watching I don't know where this pen came from but I have it in my hand and it makes a funny little sound when I do this I was better say when I click on the whiteboard there's no clicking because it's just a whiteboard okay see you later yeah closure would be good for me to mention oh I forgot to use the arrow function here yeah yes okay hold on I forgot about that hmm hmm all right let me think I would like the arrow function I can mention closure and arrow function all right let me just I will finish the tutorial again so I'm gonna repeat whatever I did over there but I'm gonna from here oh all right actually two things that I forgot number one is this can also be this is also an example of a closure meaning that when you create this function by passing in factor this like kind of close your bubble lives on and the value of factor is retained even though it's sort of technically a local variable just to this function multiplier so this is a I have another video all about JavaScript closures and this is an example of that as well and then I forgot this is a case where I can use the arrow function to make this look you know nice and clean and simple and I'm very torn about this because on the one hand the arrow function can make code look very cryptic and confusing on the other hand it can really simplify things so let's let's talk about that for a second so what what does the arrow function do so this is actually if I just rewrite this function down here this is what I've written so the arrow function you can watch my arrow function tutorial allows me to first of all instead of saying the word function I can delete the word function and I can put the arrow here so this is a function definition with one argument X and this is the code that the function executes now interestingly enough if there's only one argument X I don't need the parentheses so if there were two if this were a function that's like multiplying two things I have to keep those parentheses but if there's only one I don't need them so now I've simplified it like this it also so happens that if there's only one line of code in that function you don't need the curly brackets the curly brackets can be assumed and I can now write it like this and guess what if there's only one line of code the return is assumed so I can actually get rid of this return so actually this is a completely identical way to write the function up here so what this can actually be now is this so this is what I mean this you might look at this and be like what in the world is it doing but after you use and I can speak from experience because arrow functions were brand new to me like less than a year ago but after he used them more and more it starts to seep into your brain a little bit like whether you're doing lists of mental gymnastics translate it back or it's just kind of intuitive but there is a nice quality to saying like almost like X transforms into X x factor and it's it's confusing is that that return is returning a function but that function of a turning x times factor so let's take a look at hopefully I got this right let's take a look at this and I'm in a refresh here and I'm gonna did I save I'm gonna save and refresh and and what I'm actually gonna do is let's just put this in the code let's just say let multiplier equal oh sorry let doubler equal and let's get rid of this should not be here let double or equal and I can I don't need the set of function being so silly let double or equal multiplier to let Tripler equal multiplier 3 oh and I gotta have the I there okay so now I made those two multiplier functions refresh okay double or four I get eight and Tripler four I get twelve so wonderful look at that lovely use of the arrow functions and higherorder functions so what I'm done now with this video what I've really just discovered here basically is that a higherorder function is a function that either receives a function as a call back and if you're writing a JavaScript library and you're asking people to call functions that happen asynchronously this might be something you provide as an option if you send me a function I'm the librarian I will execute that function for you to let you know when I'm done so that's a very useful technique that you'll see in p5 and all sorts of JavaScript libraries so receiving a function as input or returning a new function just like I demonstrated with that multiplier function so that's the basic idea now I am NOT going to write my own higherorder functions right in the next videos I'm just gonna make use of some useful ones that happen to live in the JavaScript array object so I don't know which one I'll start with tune in to the next video to find out whose suspense and I'll see you then thanks for watching ok yes I could have so I think I'm gonna I could have someone of the chat is pointing out that I could say this I mean but is that what I ever want no let multiply or equal sorry factor this right is this right oh my god I hate this do I need to do I need to put parentheses around anything here oh oh oh I do not like that at all that that hurts my brain it is pretty cool though that's a little like maybe I'll put that in the YouTube description or I'll pin that as a comment isn't sort of like an interesting thing I mean the thing is for me and maybe I'll just talk about this in the when I get to the next stuff ok what time is it noon alright what what about neural networks maybe I could just pour this coffee directly on my head I'm just curious I'm just sort of curious I'm gonna put up a straw poll here this is this new totally new never seen it before not new but so helpful I know all this I should probably give you more options than this but I'm just curious for people watching right now I'm gonna post this little straw poll here I'm gonna create the poll in terms of the topic that I'm covering I have a feeling that for the larger YouTube audience is very different than the core livestream audience but here is the straw poll URL if somebody in the who has moderator privileges in the YouTube chat could post that link that would be super helpful I'm just sort of curious to get a sense of what the audience is thinking all right boy I really need to do this like everyday to get to all the topics I want to get to but hopefully I will get to everything dan can you say why javascript is the most loved programming language for you it is not the most loved programming language for me I have like a lovehate relationship with JavaScript actually a late JavaScript I have JavaScript I love it I hate it I love it I hate it I laid it laid JavaScript but one of the reasons why I love it is it's it's works on the web it's the language of the browser there's so much that you could do with it and I like the sort of informal nature of it sometimes with but you know if I were to say my favorite programming language I don't have one I don't know it's the changes from day to day all right let's the Korean yes Korean all right so let's just curious let me just see totally new never seen it before Wow 50% I know all this not new but so helpful so it is so 70% this is like actual is like useful instruction I'm sure if someone could this is like a bad use of anybody listen to the 538 podcast good news or bad news of polling nate silver would not be happy with what i'm doing here i'm sure sir this is like totally misleading and like problematic but it's a little bit of a test here we can see this is nice to see that there is actually it's not that everybody watching is like i know all this already alright so now let's come back to let's think about this what do i want to do first let's do the map function first what did i say air filter Map Reduce filter filter yeah Map Reduce let's see I think I could do all of these in a video why not right instead of doing like separate videos on each and then I'll just do them with numbers and then I'll go to like a more complicated example with actual stuff like the particle system and go through that alright I'm just gonna check that you know then we're good we're good alright welcome back baby or welcome for the first time who knows this video now I am going to talk about these higherorder functions it's really just kind of me like trying to sound smart make it son fancy these are just functions that it can call on arrays in JavaScript so you might really think of an array as like oh oh right it's a list of stuff it's an ordered list of things like it might be an ordered list of numbers like this and I can iterate with a for loop I can you know use I could that kind of thing I could iterate with a for loop like how would I calculate the sum of everything in this array I would have a for loop and I'd start with this about variable sum equals 0 and then I'd add the first element to the second element the third level so what I'm saying is that these higherorder functions these array functions allow you to manipulate the array as a whole all in one fell swoop and you actually have seen this before if you watched it in my videos for example push this is not higherorder function because it doesn't receive a function as an argument but this is not a higherorder function because it does not receive a function as an argument but it does it does manipulate the array so if I say push and I pass in seven then it will add an extra element to the end of the array now what it's actually doing behind the scenes are all of that that's the topic of discussion for another time what I want to look at is let's look at these four so where do these come from and what do they do so over here this is the Mozilla Foundation web Docs there are lots of places to find resources about what the various things available in the browser and JavaScript are but this is the JavaScript array object and so the array object this is how you might think of it usually it's got two things like a string and you console.log the length and you get two but if I go over here to the left I'm gonna see oh look all these other functions for example and they're listed here is array dot prototype push now I do have a video about what the prototype thing is luckily what I'm doing now is I'm living in this world of JavaScript es6 the version of JavaScript 6 and you don't really have to mess with the prototype too much if that's the mode topic for another time but if but this is where I could find the list of the functions so if I click on push I would find like oh look this is what it does if I say animals don't push cows now I have another element in that array called cows a string called cows which is at the end so let's let's try to decide what should we do first let's look at the map function let me just discuss what each of these do sorry yeah yeah let's look at the map function so I am going to awkwardly I'm trying to think actually what's the best way for me to demonstrate this an interactive console would be so much better if we're on the same page like using code pen and having the console op open or should I just live with my weird atom and clicking back and forth anybody suggest Oh Phil yeah I forgot about Phil I'm trying to think here mmm so like for example what I'm gonna want to do is like have an array I guess I can just write all the code here and then hit refresh over here and see the result split screen with console above your head interesting so like do this more hide the sidebar and Adam okay close pain you who has a github tab so many things I don't know Visual Studio code it has a console in it doesn't it it's nice to me it also just do this it's kind of will work I'm kind of into this let's give this a try it probably has a console plugin I'm just you know alright I'm gonna go for this see how it works okay so to demonstrate this I'm Joe and this is a little bit silly and I know those are you have more sophisticated workflows will complain but I've got my text editor here and the browser console up here so if I were to write something like an array I'm gonna call it let valve equal four eight one two nine and I were to say console.log valve hit save and go up here and hit refresh I see it there okay so this is gonna be my workflow right now to demonstrate type some code down here refresh and see the output up here so what if what I want to do let's see what do I want to talk about first let's do we're gonna do the math function first and uh the chat reminded me that there's also a function called fill which I could I mean there's just so many more so you know the point of this is for me not to like teach you how every function works but to get the basic idea and then you can kind of learn to and go through and read the documentation to figure out what some of those other functions are but anyway back over here so what the map function does is it allows me to run to pass a function that's applied to every element of the array so for example if I were to write a function and call it doubler and it gets in x and i say return x times two then I should be able to say Vale's dot map doubler and then console dot log valves now I'm gonna leave all this here so let's look at what's going on here I have the array I'm gonna look at it then I'm gonna define a function called doubler then I'm going to pass doubler via the map function to Val's so I should see the array have 8 16 4 18 no it's not gonna do that that's it because I've made a little mistake here but let's take a look so now I'm gonna come up here it's the same when I come here fresh we say why I got the same values both times how come it didn't change well one of the things that's important to note is that these functions they all behave differently but these functions return a new array so it doesn't actually change the values in the original array it creates a new array and then puts all the double values in it or the new values that are applied from that function oh my god they just break my glasses now you can leave it that's good these are new to I really don't want to break them the lenses are old but I broke my glasses if I pop the same frames again they're new okay sorry there's gonna be more ads you're gonna see on the YouTube videos like my glasses are expensive okay what was I talking about all right I'm good new array so let's look at what am I gonna do so I could say something like let doubled equal Val's doubler and now I could console.log look at doubled and let's take a look at what that does Oh see now there we go I've got all the elements from the mouse's in the way all the elements doubled and if I wanted to use the same variable you'll see this very commonly I could say Val's equals Val's dot map doubler so let's look at that and now I'm going to say console.log Val's whoops and I got a cup here and there we go so this is now let me give myself a little bit more space here for the code this is now I've got everything I need right I have an array I have a function that does something to a number and then I can say take that function and apply it to every element of the array and give me a new array and overwrite the previous variable with that new array so here's the thing this is great to learn super useful it's nice to have it kind of in this and I'm gonna even shrink this I'm gonna use the arrows I mean use loops this is great to learn it's really it's useful it allows you to write code kind of simplified but it's simplify this really down by using the arrow function in a second but I should note that from what I understand this is not necessarily high performance so if you have super large arrays you can imagine like recreating a whole new array passing a function as opposed to just using a for loop using a for loop might actually run faster most of the stuff that I'm doing this doesn't really matter you're working with small arrays and software web projects you know these higherorder functions are gonna make your code nice and also here's the thing this is one of the reasons why I'm covering this it's like you think what were just me living my life I would just be using for loops I've never bothered with any of this because that's wrong I'm wrong I know I'm wrong but that's some of I'm sort of stuck in my ways but you you won't be going to tutorials you will be going to open source projects this is what people are doing now they're using these higherorder functions and they're using the arrow syntax so you want to get some facility with it so as you read other people's code and you contribute to open source projects you can participate with this new stuff all right now let me do one more thing to this let's get the arrow of syntax in there so first of all we know that I could improve not improve this but I could make this an anonymous function so I could put this in here so now this should be the same exact code I'm gonna refresh here still works but now it's an arrow function so I don't have to say I don't think it's a function I put the arrow it's just one argument so I can get rid of that it's just one line of code so I can get rid of that it's just one line of code so I can assume the return statement and oh look at this now look at this oh so I have to admit I really do like this something lovely about it right I have my array and I say hey just double everything you know take X and arrow it over there two x times two so now if I save this here and hit refresh ah I made a mistake oh I have this extra this semicolon here is actually kind of unnecessary and I guess it caused a problem and there we go so look this is even nicer that time I call it made it kind of loo so this is wonderful that equals Val's map X goes to X times 2 while we're here let's look at fill really quickly fill will take an array and fill it with values so I'm gonna comment this out what if I were to say Val fill and 0 console.log balance and let's see let's see what happens ooh oh that actually so interestingly this acts on the current array so the fill function does not create a new array in return but acts on the Kern array what if I were to say fill random 10 am I gonna fill this whoa yeah am I gonna fill this with a random values oops gotta come up here random is not defined because okay I'm just saying math dot random I'm not in p5 world in this video it'll say math dot random am I gonna get a new random value for every element of the array oops shoot no look at this point one four point one four I mean you'll have to trust me point one four point one four those are all the same values because note I'm executing that random function and and picking a random number and then filling it with that same random number but this fill is a higher order function I wasn't actually using it as a higherorder function I was just giving it a number so I wasn't passing in a function if I wanted to pass in a function I don't know I'm just gonna go straight for the arrow syntax here X and I'm gonna say math dot random times 10 and I'm gonna say math dot floor in here because I want to just see some integers right look at this ooh did I get this right so this is now an arrow function fill each value X by executing math dot random times 10 and then floor let's go up here Oh what happen they're FFF Oh Phil works in a different way than I think Phil isn't Oh Phil is not a higher order function Oh cruel cruel world I have to use math I was just excited today okay we have to go back we have to we have to go back we have to go back we have to go back a little bit a little depth in there sometimes I like to just design programming languages I just make it up I just make it up pick it up I can't get this workflow down of just going back and forth between these things how can I get that same point one for how many times I have to refresh this until I get point one for about a hundred times probably less than that oh well point one three was good I have to use map instead okay there might have been a weird edit point there because I went off I kept going like in this like magical thinking I was like making up features of JavaScript and I started trying to explain how this is not using fill as a higherorder function I'm just giving it a number but what if I gave it a function fill doesn't work that way so this is where map does actually come in if I wanted to fill all of these with an individual random number I could do that by saying map X yes so this would give me map this function of returning a random number if I hit save here and hit refresh whoa oh and then of course I forgot that I do need to return the new array and there we go now you can see they each have a different number now I should say there's a little bit weird like if I wanted to create an array of random numbers I wouldn't I wouldn't like start with like a fixed array like what if I want to have an array of a hundred numbers that are random well one thing I could do is I think I could just say new array 100 and then hit refresh here no it's empty so the reason what I need to do is I think I need to set also say fill that's weird this is so weird I don't like this anymore dot fill dot map yeah so why do I need to do that because it has to because if what so what if this is undefined okay I still get a random number oh you mean I can just do this No X Lots available not used so if or just math.random oh right right right right right okay okay ah so this didn't work right it's just empty times 100 so this is unfortunate like even though I made a new array with 100 spots because there's nothing actually there I can't start to process it this way so I actually need to use fill first so I can I can chain these so I could say let me fill the array with zeros and then map it now I'm gonna so this should work now and this is getting a little convoluted why do I care about doing this I don't know you can determine you just go to the next video I'm gonna keep going with this just for a little bit longer so now I'm hit refresh now I have an array with 100 random numbers but look at this you know what's interesting about this I created a function and I think this also doesn't really matter right I could just do this and it works right because I don't need that I'm not basing it on X but incidentally what is this a function this is a function that returns math dot random well what is math not random it's a function that returns a random number so I could actually do this just right math dot random right I could name that's a named function don't execute it just pass it the named function so this is a way of creating an array with a hundred elements in it that are all random I think this is gonna work all right yay sound effect that doesn't work right now so there you go so now you've got a little bit I'm in this video I think it's gonna end down you've got a little bit about map this idea of higher order functions and array arrow syntax map and fill so what I want to do I could do sort here o sort would be nice but I'm gonna do these in different videos I guess I'm let's look at reduce reduces the kind of complicated one so maybe I'll do that in the next video okay I'll see you in a few of the when I reduce myself okay right so I could have done this yeah let's actually just back for one brief extra thing you know justjust because while we're at it if we're doing all this crazy condensing everything into one line and these things can be chained this can actually go right here so I can actually now have this in one line of code which is to say make a new array fill it with zeros or something's in there and then map the random function to it then it still works and as a special treat I will now foreshadow the use of reduce by reducing myself the new is not needed oh all right all right everybody all right so you don't need the new I like having the new there it makes me feel comfortable and happy I have to go soon zero infill is not needed okay okay so hold on let me let me do that the tutorial wanna redo that whole thing oh poor Matt's yet maybe what did I do when I came let me actually maybe we could go we can skip matcha this is my edit might work better if we skip the part where I came over here dude I've been a blah blah and then went back and then added something let's just do this again okay okay there was a weird edit point there because the chat and live chat that's going on while I'm recording this gave me some helpful tips here so a couple things number one is if I you know I'm kind of like the kind of person who wants to just write everything the thing you could do in one line of code in 15 lines of code but if I wanted to keep going with this I could in fact I don't need to have Val's create a new array and then have it used here I can just put new array directly right here and in fact I don't even need the new keyword I could just actually say array 100 and in fact because ultimately I'm going to fill it with random numbers this zero is totally irrelevant I could just fill it with undefined I just got to fill it with something map doesn't work unless the array has filled with something even that something is undefined so this should actually work here's an array with a hundred spots random numbers yay okay so now what I'm going to do is I think this videos going to end I've talked about fill and I've talked about map I think I'm going to reduce as a kind of complicated one so I'm going to do that in the next video and I'll start it with a um I'll reduce myself I don't know if that's worthwhile in the next video as well I think it's sort and filter I'll get to at some point as well let's look let's look at reduce next thanks for watching yeah I like having news so I should have knew right but whatever oh and this should be let uh fine no come on I can't get it alright that's gonna have to be good enough Thomas is asking will you do it tutorial in ml 5 j s yes eventually not today not right now though all right I'm gonna let's try to do reduce and I'm gonna take a break and come back this afternoon okay Thank You Simon for your example for reduced that's basically the same example I'm going to demonstrate how to sum up the entire array okay I'm thinking oh let me which I shrink myself again so I'm just taking a momentary pause to look at myself in the monitor apparently alright I just think what I want yeah I'm gonna just hardcode an array cuz I don't want to have this nonsense Phil thing okay there we go all right this is going to be oh so much fun 5 4 1 2 9 oh I don't even have my Bell it's me I'm tiny I'm up here in my code what's over here this is the array oh it's a nice array I'm going to be here talking about reduce so I reduced myself to a very small person but I am going to unreduced myself back to my normal size to talk about reduced hope that was totally worth doing wasting the first 30 seconds of this video for that bit of check okay so reduce this is a really interesting and kind of weird and quirky higherorder functions for arrays and what it what's generally the reason why it's called reduced is let's say I have an array and I want to take this array and I want to just I want to find out the essence of the array as a whole I want to reduce it into one thing so that's what this does now there's lots of ways reasons why you might want to do this but I think probably the simplest scenario to start with is I have an array and I want to add up all the numbers in it I want to average all the numbers in it so let's look at how that works with reduce right first let's actually do that without reduce just to just to kind of like get the hang of things here so if I wasn't using reduce I would say for let I equals 0 I is less than Val's dot length I plus plus and I would have a variable like let's sum equals 0 and I would say sum plus equal Val's index I and then I would say console dot log sum and I would refresh up here we could see there we go all those numbers add up to 21 now if you've been paying attention to my es6 videos of which this is in a playlist I could also say for let Val of Val's so this is kind of like a kind of like a for each style loop there is actually something called a for each in JavaScript with a little bit different also a higherorder function that you can pass anyway but this is saying every Val inside of vowels and oh of course now I don't have that index I would just do this add them all together so this is reducing it a little bit reducing the code a little bit and if I hit refresh I've also got 21 so how do I use this reduce function let's actually go to the actually don't the browser is weird now okay so let's see how this Reduce function works do you guys hear that can you hear that it's like the film class back there and I don't have my water this is okay I'm gonna get to go soon come back later yeah I know I could use for each yeah I would really love to be able to just like walk around the screen there's a tiny person and point to stuff someday I'll get that set up that'll be fun all right so where are they all right so let's look at how this reduce function works and actually before I act write the code let me come down here and let me go and look at the documentation so I'm gonna look at reduce so reduce is a function that has that takes two arguments and there's a way of doing it with one argument which I will get to at some point an accumulator and a current value what does that mean accumulator and the current value accumulator and a current value so this is not reduce takes a function it's a higherorder function so let's write a function that has both it compute an accumulator and a value so I'm gonna get rid of this code and I'm gonna say function and I'm gonna use ACC for short for accumulator and Val for value and I'm gonna say return accumulator plus value mmm okay return accumulator plus value I think this is right oh and let me name this called I'm gonna call this sum now I'm gonna say Val dot reduce some and I'm gonna say let result answer equal that and I'm gonna say console dot log answer I realize I kind of just typed this out and I haven't really explained it yet cuz to be honest I'm not entirely sure what I'm doing just yet but hopefully this is gonna make sense I came back it's gonna work and I can back up and explain it let's see I got the answer 21 okay so what does this do well do you remember when I let's let me go back to my old code I'm gonna just quickly copy this and I'm gonna go back to here what if I actually called this a cc short for accumulator and then set a CC plus equal Val well the accumulator starts with zero and then every Val is added to it over and over again this is the idea of reduce you give it something that's going to persist over time as its looping through elem every element of the array and then you can act on that thing that's persisting and the actual value of the array now in this case two to add them both together all I want to do to add a sum I just want this accumulator to always persist and just keep having each Val added to it now what's the weird thing about this is what's the value of accumulator like what does it start with well interesting enough let's see if we can determine I'm going to add console dot log accumulator in here and I'm probably gonna need a bit more room in my consults I'm gonna do that look at that five nine ten twelve 21 interestingly enough the first time I ran the code the accumulators value was five this is because I did not provide an initial value for the accumulator so if you do not provide an initial value for the accumulator it will by default be the first thing in the array which is five notice now if in here I say reduce sum and then I pass a second fad a second argument so sum is this function that's the that's what we're passing to reduce but there's an optional second argument which is referred to as the initial value so if I want the initial value of accumulator to be zero I didn't have to do it for this problem that I'm solving but I couldn't do that here now I'm gonna hit refresh and oh and let's look at what it did notice that it started at zero so I have an extra console.log it actually it didn't actually bother to run it with the first value because it just started accumulator has that value but the previous time but now it's doing that so just to be make it clear if I say 10 right if I start accumulator a 10 can take this out what should think about pause and think about what am I gonna see in the console refresh 31 right because I added all the numbers starting with 10 okay how can i condense this now well first of all I can use the arrow syntax I can get rid of the word function I don't need it to be named and it's one line of code so I don't need the curly brackets and I don't need the return so this actually can now go right here and this is now I'm gonna give myself a little more space this is the full line of code I can say hey take this array and reduce it with an accumulator of a starting value of 10 and for each value add that value to the accumulator and now what if I wanted to do the average if I wanted to do the average I'm gonna need two lines of code so I'm gonna have to add these curly brackets back in and I'm gonna say oh no I wouldn't do that in here nevermind let's just pause before I said average because average I would just say answer equals you know just like divide this by vowels dot length so okay woah it's not a default start value of zero it's a default start value of the first element of the array which is different arrey reduce will max I'm just looking at some of it Oh so I did say it correctly okay good I'm trying to leave what else I should demonstrate here and this is the basic idea I'm trying to go there's one other example like I could I could like concatenate a string and that's sort of the same thing though I mean join does that finding min and Max is a good idea okay look and I wouldn't do that with filter I deal with reduce oh yeah okay let's do that let's do that okay okay so in this case though if I really just want to calculate the sum which I can call this sum I don't want to start with ten so I'm going to do this and just to be aware just to say it again this is very important especially once you start having like arrays of objects and other things the accumulator if you don't give an initial value is not starting with like a default value of zero it's actually starting with whatever the first element of the array is so if you ever seen this code and I'm going to do this soon enough in a future video where this is an array of particles I might want to do something to say calculate the average the centroid of all those particles I'm gonna have to be clever about how I think about doing this okay now they're checking a good suggestion which would be to find the maximum or the minimum of and of course there is I think in p5 I know as the min and Max function there's probably native JavaScript one as well but let's try to do that let's try to find the minimum and maximum using reduce so let's I'm gonna write it out the long winded way because this helps me I'm gonna say fine max and actually this is great because this relates to some of my neural network videos that I've been making where I'm going to have an accumulator and a value okay now if value is greater than accumulator accumulator should equal value right accumulator doesn't have to just be a thing that's you're adding up together you're saying it's just a variable that's going to persist while I'm going over the whole array and value is each one so if that current value is greater than whatever the accumulator is then I'm gonna get then accumulator should equal that value and then I guess do I want to I need to return the accumulator or does that by definition know yes I need to return the accumulator I think so let's see let's take a look at this so let's say let biggest equal value deuce find max all right so and then let's console dot log biggest nine that's the look now let's put nine in the middle because just to be sure that that's really working because it was the last element nine it still worked so I definitely need to and if I take out this returned accumulator yeah I don't get it so of course I need to return that right because the whole point is I am going to return at the end it's kind of you sort of get into those being assumed that value that persisted over the whole time now how can I reduce this so first of all I can make this as we know an arrow function so let's actually do this and I'm going to put this here now into here so this works this is a little bit awkward looking but this is definitely kind of functional style I'm going to reduce that I have an accumulator and a value I'm using the arrow syntax and running this code let's make sure this still works whoops I get nine now I could probably use I think it's called a Turner operator if I wanted to be this crazy person who is crazy person who is reducing who's like if I want to be this crazy person who's like always trying to get the code to be shorter and shorter shorter let's try to remind ourselves what a ternary operator is all right so I think it's got a question mark and a colon right I can I just like I ever oh where am I going let me come over here oops all right a question mark and a colon so if I'm saying if a is greater than B a B equals a right I can reduce this but just using the same words here too by saying question mark wait a sec well that lost my train of thought right yes yes well this is crazy yeah thinking about this okay I'm sorry sir so but this okay so this is an if statement if a is greater than B B equals a but it could also sort of think of this as if a is greater than B I might say like return right if it's greater than a is greater than B then a is the the new bigger value otherwise return B is the new bigger value so this kind of statement can be written in with a ternary operator by saying question mark a colon B so I can get rid of hey I felt like what I'm doing today get rid of this if and these returns and I basically have evaluate this boolean expression if it's true here we got a if it's false here we got B so in theory I believe ups in theory I believe that I could let's change these actually to a and B which is fine accumulator and value is kind of useful but I could say a greater than B I don't know question mark a B I gotta give myself a lot more room here did I get this right oh it's right let's look at this is this really right oh my goodness oh oh this really freaks me out but it's okay it's okay everything's gonna be okay I got too many mouths things everywhere all right let's think about this again I'm taking an array a persists over time oh no wait it's just right yeah I lost my my thoughts about it because I like okay yeah yeah okay a is the is the accumulator B is the value if value I yeah it was funny because I was thinking about it the other way around cuz I think what I want to do is if the value is greater than the accumulator then return the value otherwise return the accumulator they're really the same thing but so let's see if this works I should get nine nine it's still got nine so the idea here is that I'm saying reduce this array have about have a variable called a the accumulate it persists over time and then look at every value B in the array start with five if B if it's four is bigger than five that's your new accumulator if nine is bigger than five that's your new accumulator which it is if two is no is two bigger than nine knows one bigger than I know I'm left with nine so hopefully this is kind of helping you these are two scenarios now we've now seen where this is like a nice little snippet of code to find the largest value in an array and this is a nice little snippet of code if I put it back to find the sum of all the values in the array and both of these the initial value is can feet is is assumed for example just to be clear about this what if I put 20 here if I put 20 here if the accumulator starts is 20 what am I gonna see 20 and then the sum is 21 because right so it's gonna be 20 cuz none of the numbers are bigger than 20 so this could also be a test like hey find me the maximum value in the array but if nothing is bigger than 20 just stick with 20 so but if I said if I said 8 here I'm gonna get 9 right so this initial value is assumed to always start with 5 but unless you explicitly initialize it to something else as the second argument to the reduced function okay so boy I don't know how I feel about these functions but at least I've covered them I've tried to explain them you should let me know in the comments because I don't know I felt pretty good about map it felt like if you're watching that video it made sense you could find use of it this reduce one is really confusing and it takes a lot of practice especially as we like condensed it short ensure with the arrow function so let me know how that goes I'm going to use it with a particle system in a future video that will hopefully be links here somehow in a magical way so that might give you more of a sense as you see it used in a practical scenario where you're actually doing some graphics and animation so next video I will talk about filter all right everyone boy this stuff takes so much longer reduce right what's reduce right I got to take a break now and go have some lunch previously oh oh I don't want to cover this goes right to the left but that's I should mention it alright everybody so I'm gonna need to take a break now I have a meeting and I'm gonna grab something to eat I hope to come back around I mean 2 p.m. would be the earliest more likely something like 3 which is I'm timeout Eastern Time which is about two hours from now and then I'll probably do another hour or two of live streaming boy I'm really not this I take so much longer to get through stuff so we're so what I want to do let's think about what I'm gonna do I'm gonna do filter I guess I could do sort filter and sort whatever and then I need to do inheritance of polymorphism and then the particle system stuff Wow so many things to do okay so any questions for a minute here maybe I'll figure out my sound board issue as well check my email all that sort of stuff okay everybody good take a break go stretch do some jogging dance to some music that sort of stuff alright I will be back later thank you for tuning in I don't have any music we can do this I can do this I'm seeing that people are requesting PhoneGap tutorials there's so much to cover you can never possibly do it all but maybe someday ah alright so a ciggy is asking what are you gonna do with the particle systems well what it's gonna one thing one thing I did with my class this week is I used the filter function to filter out particles that are offscreen for example and like get rid of them out of the array okay I don't know if that's the most efficient way of doing it but it kind of is a nice demonstration so I'll do that sort of stuff so I'll be back within one or two hours okay thanks everybody see you later
