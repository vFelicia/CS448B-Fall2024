With timestamps:

00:00 - alright I am back in my quest to create
00:04 - a doodle classifier I finished looking
00:08 - at and examining and processing the data
00:10 - in processing using the load bytes
00:13 - function and rendering the images to a
00:15 - window and saving out the data files so
00:17 - what I have now and I'm gonna so I'm
00:20 - gonna quit processing what I did in
00:22 - between the previous video in this one
00:24 - sure save is I went oops and I created a
00:31 - sketch called a folder called doodle
00:34 - classification and in that folder there
00:37 - are now there's a data folder with three
00:39 - files cats 1,000 rainbows 1000 trains
00:42 - 1000 so I have 1000 train doodles 1000
00:46 - rainbow doodles and 1000 cat doodles now
00:49 - do I really have enough data to make a
00:53 - highly accurate amazing impressive
00:56 - doodle classifier probably not I also
00:59 - probably don't have the neural network
01:02 - deep learning architecture to do it
01:04 - really really well because I might want
01:06 - to add something called a convolutional
01:08 - layer I will come back to that someday
01:10 - in the videos that I make but I just
01:13 - want to try to use my basic JavaScript
01:16 - neural network library in a very simple
01:19 - way use all those doodles as input to
01:23 - demonstrate the training process so how
01:26 - am I going to do this well first of all
01:27 - actually honestly I'm not even ready for
01:29 - this yet I need to just sort of see
01:31 - don't can I get the data into into
01:33 - JavaScript so if you look down started a
01:36 - p5 sketch and I'm going to add something
01:38 - like this to it function preload and I'm
01:42 - gonna create some variables like cats
01:44 - trains and what's the other thing
01:47 - rainbows and I'm going to say cats
01:49 - equals load bytes cats dot cats one
01:53 - thousand died in so I'm going to load
01:56 - use preload to load all of these files
01:59 - now I've got something that I need to
02:02 - tell you if you if it is March 2nd 2018
02:09 - and you are typing this code along with
02:11 - me
02:12 - this won't work because the load bite
02:15 - function as of the time of recording
02:17 - this video is not implemented in p5 I
02:20 - have with this example a little extra
02:22 - file that I'm calling load binary j s
02:24 - that has a version of the load bytes
02:27 - function written into it and I intend to
02:30 - at some point make a separate video
02:31 - hopefully about submitting that as a
02:33 - pull request to p5 then load bytes will
02:35 - work in p5 but hopefully I'm using
02:37 - version 0.6 zero of p5 or at least
02:40 - that's the version that I want to be
02:42 - using off to check what I'm actually
02:44 - using but so a future version will
02:47 - hopefully have it but this is hopefully
02:49 - gonna work so I'm gonna try to load all
02:52 - three of these files so let's look one
02:55 - thing I wanted to mention by the way is
02:56 - I wanted to show you that I kind of had
02:59 - this moment this sort of like moments
03:02 - earlier today I realized like oh look at
03:03 - these nice small files there are seven
03:05 - hundred eighty four kilobytes well why
03:07 - are they 784 kilobytes because 784
03:10 - kilobytes is 784 thousand bytes and
03:13 - remember each byte is one pixel of 2008
03:15 - by 28 images with 784 so I have 1784
03:20 - pixel images this is how binary works on
03:23 - the computer it's kind of excited to see
03:24 - that really work out so nicely the
03:26 - numbers work out so nicely so if I add
03:28 - this to my sketch and I go and refresh
03:31 - the page here whoops it's gonna say file
03:35 - not found why is it gonna say file not
03:37 - found because I forgot that I have them
03:39 - in a data directory so I need to add the
03:41 - data directory now I'm gonna do this now
03:43 - okay let's look at this Katz Katz is an
03:48 - object with a property called bytes and
03:51 - there you can see there's an array and
03:52 - if I kind of open this up we can see
03:54 - like oh boy there's a lot of stuff in
03:56 - there and I could kind of dig into and
03:58 - look these are those pixel values
04:00 - there's a lot of zeros because there's a
04:02 - lot of black pixels because it's the
04:05 - drawings originally are white on black I
04:07 - think I'm gonna alter that butBut so you
04:11 - could see this is working one thing you
04:13 - might might be new to you which is a
04:15 - little bit strange is that this is a you
04:19 - int eight array which I find to be
04:21 - somewhat terrifying because I'm used to
04:23 - just it's an array it's got stuff in it
04:25 - are actually there is something in
04:26 - JavaScript which is called a typed array
04:28 - it's it's kind of like a contract you
04:30 - make saying this is gonna be an array
04:32 - but you know you can I'm gonna let I'm
04:34 - gonna tell you what's in it this I'm
04:35 - only available with this kind of data in
04:37 - it because you can store the data in
04:39 - memory more efficiently and so this is a
04:41 - particular kind of array that can only
04:43 - store integers that's gonna be
04:45 - particularly useful for us that's cuz
04:47 - we're loading that binary information
04:48 - alright so moving on let's at least try
04:51 - to draw the images into the p5 canvas so
04:54 - that we can see that things are working
04:56 - correctly so I'm gonna come back I'm
04:58 - gonna basically now do exactly what I
04:59 - did in processing but in p5 and so in
05:03 - setup let's do the cats I'm gonna say
05:07 - and I'm gonna I'm gonna say let me just
05:10 - do 100 and I'm gonna use n to go through
05:17 - all 100 of these then what for each one
05:21 - I need to say I'm going to create an
05:23 - image and that you want to say I need to
05:26 - say create image so this is one thing
05:28 - that's tricky about p5 the function
05:30 - create image creates a basically block
05:33 - of pixels for you to work with create
05:36 - IMG creates a Dom element that can be
05:38 - embedded in the page and I could use
05:40 - either one in this case I'm just gonna
05:41 - make my life simpler and create an image
05:43 - that's 28 by 28 then what I need to do
05:48 - is go through all 784 pixels and I need
05:56 - to say image pixels index I equals cats
06:02 - index i + I need some offset so the
06:06 - offset offset is n times 784 right
06:14 - because each block is 784 pixels part of
06:18 - me wants to like split it up and have
06:20 - objects but whatever this is going to be
06:21 - fine
06:22 - cat + offset then I'm going to say image
06:25 - update pixels thank you thank you that's
06:29 - not a sound effect that's actually
06:30 - people from the hallway applauding
06:32 - they're not applauding for me though
06:33 - hopefully no one's going to come knock
06:34 - on the
06:35 - I'd say I'm being too loud load pixels
06:37 - and then I should be able to do exactly
06:40 - the same thing where I draw each image
06:44 - at an x and a y so X is n modulus 10
06:53 - times 28 and and Y is well I'm gonna
07:01 - have to use floor here cuz no matter
07:03 - what JavaScript does floating point
07:06 - division and divided by 10 times 28 this
07:11 - is really what I did in the previous one
07:12 - I just want to be able to see that the
07:15 - stuff is coming in so this now I'm sure
07:18 - I've made some mistakes but let's just
07:20 - see if we see the cats now in the canvas
07:25 - let's see nothing I see nothing that is
07:30 - not good so let's see what could I have
07:32 - done Oh cats dot bytes so dot bytes I
07:37 - need to say there we go
07:39 - something's coming in but it's totally
07:41 - off ooh that looks like a mess what have
07:44 - I got wrong I plus offset I less than
07:49 - 784 cat's bytes image pixels I what am I
07:54 - missing here oh yes I forgot something
07:59 - super important in javascript native
08:03 - html5 canvas does not store each pixel
08:07 - as a single single integer so in
08:13 - processing each pixel is a single
08:15 - integer which can be segmented out into
08:18 - the rgba components the actual pixel
08:21 - array in JavaScript is 784 times for
08:26 - long there is a spot in the array for
08:29 - our for g4b for a so it's pixel 0 rgba
08:32 - pixel 1 RGB a so I need to I totally
08:36 - forgot I have a times 4 here then Oh oh
08:42 - my goodness no no I can just do this
08:45 - times 4 here and whoops let me zoom out
08:48 - I can say let me get the actual value
08:52 - from the array and just put it in
08:54 - another and I can say pixel I times four
08:57 - is Val and then that's the red value and
09:00 - these are just greyscale so plus one and
09:02 - I'm gonna goofily add a plus zero just
09:05 - through my code lines up because that's
09:07 - then plus two and everything I'm doing
09:12 - right now is just for the purpose of
09:13 - drawing so and then this needs to be 255
09:16 - so basically I want to say what's that
09:18 - single value inside of the cat's byte
09:23 - array and I need to take that value and
09:25 - give it to the red green and blue parts
09:27 - of the image and have no transparency
09:29 - and now I'm expecting to see there we go
09:33 - there's all the cats and I prefer it to
09:38 - look like this and there we go so now we
09:42 - can see that I can get the data in to
09:45 - JavaScript one more thing before I move
09:48 - on to the next video let's prepare the
09:50 - data let's prepare the data into a rays
09:54 - of training images and testing images
09:57 - and there's a nice way that I've just
09:58 - learned that is a function I could use
10:00 - called sub array which allows me to
10:02 - essentially like pull out or point to a
10:04 - portion of the array so let me let me
10:06 - discuss what I'm gonna mean here so so
10:08 - this is the this is the raw data so I'm
10:11 - gonna just rename these like cats data
10:13 - cats data trains data rainbows data so
10:18 - I'm gonna I don't know why I'm using
10:19 - suddenly the underscore data naming
10:21 - convention but I just want to name these
10:23 - data because what I'm gonna do now is
10:25 - I'm gonna create some other arrays like
10:27 - cats cats training cats of trains
10:36 - oh boy who's bad trains training
10:40 - rainbows training let's just get the
10:43 - training data first so if I have a
10:46 - thousand images I want to use the first
10:48 - 800 as the training set and I must save
10:51 - the second 200 us the testing set so
10:53 - what I'm gonna do and we could comment
10:55 - all this stuff this was me just seeing
10:57 - that I could see it I'm going to say
11:00 - okay I'm going
11:02 - to say I want for example cats training
11:06 - to be a new array just a plain old array
11:10 - then I'm going to go from 0 all the way
11:14 - up to 800 and I'm going to say every
11:17 - element of cats training is cats data
11:23 - sub array and what the sub array array
11:26 - function wants is the beginning and the
11:30 - end of the sub array that I want to pull
11:32 - out so I always want to pull out 784
11:35 - pixels essentially so I want to go from
11:38 - I well let's see I'm gonna go I'm gonna
11:43 - say offset equals I times 7 or 84 and so
11:46 - I want to go from offset to offset plus
11:49 - 784 and I think now is the time that I'm
11:53 - really putting this into a project that
11:55 - that 784 number really should be in a
11:57 - variable and I'm gonna do something
11:59 - crazy Const is a way of declaring a
12:05 - variable that you never intend to
12:07 - reassign and it's a nice way of me
12:09 - protecting myself from ever reassigning
12:12 - it by accident and I probably should be
12:14 - using constant a lot more places in the
12:15 - way that I code but I use it very rarely
12:17 - so I'm going to say Const length
12:19 - Eliane for length is 784 so i'm gonna
12:23 - say i times le n and this is going to be
12:25 - offset le n so let's just so this should
12:29 - if I've done this correctly we should be
12:31 - able to see now I'm gonna hit refresh
12:32 - and have a syntax error on line 45 oh I
12:37 - know like using Const was really
12:39 - exciting wasn't it partygoers are
12:41 - outside that door forever in this video
12:45 - ok sub-array is not a function because
12:48 - what do I need to say cats data dot
12:51 - bytes
12:51 - I forgot that that array is inside of an
12:54 - array called bytes and now if I look at
12:57 - cats training we can see there's 800 784
13:03 - pixel 800 arrays each ones with 784
13:06 - elements in them so we can see here
13:08 - here's the first one here's the second
13:10 - one and this looks good you can see
13:13 - there's all the numbers this is good I
13:15 - now
13:15 - my training data now I'm actually gonna
13:19 - do something kind of a little bit nuts
13:20 - I'm gonna change this to 1000 and let's
13:26 - see let's call that Const total input
13:30 - total data I don't know I don't know
13:35 - these are I go to think about my
13:37 - variable names total data so I might
13:40 - change that someday and I'm gonna say if
13:45 - I'm going to I'm gonna say if I is less
13:52 - than 800 do this I'm just going to do
13:55 - this hard code this right now else and
14:02 - then I'm gonna say cats testing is also
14:09 - an array Oh couldn't training and
14:11 - testing just have the same number of
14:13 - characters like would be so much better
14:16 - if that were the case
14:16 - oh it's gonna my auto formats gonna
14:18 - change that oh well okay so now cats
14:22 - testing index I okay this is good
14:27 - now here's the thing this is correct but
14:30 - I've got to go from I I minus 800 so
14:36 - this should really be a variable I'm
14:39 - gonna say let I don't know what we're
14:43 - threshold it's very distracting
14:46 - well I'm gonna just call it threshold
14:49 - equal a floor 0.8 times total data and
14:58 - so now that's going to be there's going
15:01 - to be 800 going into training and 200
15:05 - going into testing and this should not
15:07 - be 800 it should be threshold so this is
15:10 - how I'm thinking of my data I dividing
15:11 - it into testing and training and let's
15:14 - look at this threshold and now I can say
15:20 - cats training is 800 arrays and cats
15:26 - testing
15:28 - is 200 perfect we are doing well part of
15:32 - me now and I think I would like to do is
15:34 - actually make a variable just called
15:37 - cats one called trains one called
15:40 - rainbows I'm gonna make these objects
15:42 - and in the objects I'm gonna say cats
15:47 - training is an array and cats dot
15:50 - testing so I'm gonna make these
15:52 - properties cats training cats
15:56 - testing and now oops if I just look at
16:02 - cats sorry if I just look at cats there
16:04 - you are we see I have the training and
16:09 - the testing the testing is 200 the
16:10 - training is 800 boy this is tedious but
16:13 - it's worth it we're working on we're
16:14 - preparing our data by golly I'm gonna
16:16 - dedicate to hole to hole tutorial videos
16:19 - to to working on the data so now
16:23 - wouldn't it be nice if I made this into
16:25 - a function let's make this into a
16:28 - function let's refactor this into a
16:31 - function and I'm gonna just get I'm
16:34 - gonna I'm gonna call this prepare data
16:39 - call this prepare data I want to get a
16:43 - category and the data that goes with it
16:46 - so I'm adding the training and testing
16:49 - to a given category from given data
16:54 - look at me refactoring the code while
16:56 - I'm working and then I can just say
17:00 - prepare data cats cats data prepare data
17:09 - rainbows rainbows data and prepare data
17:17 - what was the last one trains trains data
17:21 - if I did this correctly we can look and
17:24 - see it cats there we go
17:25 - rainbows there we go and trains there we
17:30 - go now whether or not the data is still
17:32 - the correct data in there I'm just going
17:33 - to sort of feel somewhat confident that
17:36 - I did this correctly but I have now we
17:38 - have now
17:39 - we did sort of working within examining
17:41 - the data in processing to save some new
17:43 - data files with much less data in them I
17:46 - now in JavaScript I'm able to load those
17:49 - binary files and I have a little
17:50 - function to divide it up into training
17:52 - and testing so now in the next video
17:54 - I can finally write the piece of code
17:57 - that I've been wanting to do all along
18:00 - let neural network equal new neural
18:03 - network so that is what will happen in
18:05 - the next video and thank you for
18:07 - watching perhaps I will see you there
18:13 - [Music]
18:18 - you

Cleaned transcript:

alright I am back in my quest to create a doodle classifier I finished looking at and examining and processing the data in processing using the load bytes function and rendering the images to a window and saving out the data files so what I have now and I'm gonna so I'm gonna quit processing what I did in between the previous video in this one sure save is I went oops and I created a sketch called a folder called doodle classification and in that folder there are now there's a data folder with three files cats 1,000 rainbows 1000 trains 1000 so I have 1000 train doodles 1000 rainbow doodles and 1000 cat doodles now do I really have enough data to make a highly accurate amazing impressive doodle classifier probably not I also probably don't have the neural network deep learning architecture to do it really really well because I might want to add something called a convolutional layer I will come back to that someday in the videos that I make but I just want to try to use my basic JavaScript neural network library in a very simple way use all those doodles as input to demonstrate the training process so how am I going to do this well first of all actually honestly I'm not even ready for this yet I need to just sort of see don't can I get the data into into JavaScript so if you look down started a p5 sketch and I'm going to add something like this to it function preload and I'm gonna create some variables like cats trains and what's the other thing rainbows and I'm going to say cats equals load bytes cats dot cats one thousand died in so I'm going to load use preload to load all of these files now I've got something that I need to tell you if you if it is March 2nd 2018 and you are typing this code along with me this won't work because the load bite function as of the time of recording this video is not implemented in p5 I have with this example a little extra file that I'm calling load binary j s that has a version of the load bytes function written into it and I intend to at some point make a separate video hopefully about submitting that as a pull request to p5 then load bytes will work in p5 but hopefully I'm using version 0.6 zero of p5 or at least that's the version that I want to be using off to check what I'm actually using but so a future version will hopefully have it but this is hopefully gonna work so I'm gonna try to load all three of these files so let's look one thing I wanted to mention by the way is I wanted to show you that I kind of had this moment this sort of like moments earlier today I realized like oh look at these nice small files there are seven hundred eighty four kilobytes well why are they 784 kilobytes because 784 kilobytes is 784 thousand bytes and remember each byte is one pixel of 2008 by 28 images with 784 so I have 1784 pixel images this is how binary works on the computer it's kind of excited to see that really work out so nicely the numbers work out so nicely so if I add this to my sketch and I go and refresh the page here whoops it's gonna say file not found why is it gonna say file not found because I forgot that I have them in a data directory so I need to add the data directory now I'm gonna do this now okay let's look at this Katz Katz is an object with a property called bytes and there you can see there's an array and if I kind of open this up we can see like oh boy there's a lot of stuff in there and I could kind of dig into and look these are those pixel values there's a lot of zeros because there's a lot of black pixels because it's the drawings originally are white on black I think I'm gonna alter that butBut so you could see this is working one thing you might might be new to you which is a little bit strange is that this is a you int eight array which I find to be somewhat terrifying because I'm used to just it's an array it's got stuff in it are actually there is something in JavaScript which is called a typed array it's it's kind of like a contract you make saying this is gonna be an array but you know you can I'm gonna let I'm gonna tell you what's in it this I'm only available with this kind of data in it because you can store the data in memory more efficiently and so this is a particular kind of array that can only store integers that's gonna be particularly useful for us that's cuz we're loading that binary information alright so moving on let's at least try to draw the images into the p5 canvas so that we can see that things are working correctly so I'm gonna come back I'm gonna basically now do exactly what I did in processing but in p5 and so in setup let's do the cats I'm gonna say and I'm gonna I'm gonna say let me just do 100 and I'm gonna use n to go through all 100 of these then what for each one I need to say I'm going to create an image and that you want to say I need to say create image so this is one thing that's tricky about p5 the function create image creates a basically block of pixels for you to work with create IMG creates a Dom element that can be embedded in the page and I could use either one in this case I'm just gonna make my life simpler and create an image that's 28 by 28 then what I need to do is go through all 784 pixels and I need to say image pixels index I equals cats index i + I need some offset so the offset offset is n times 784 right because each block is 784 pixels part of me wants to like split it up and have objects but whatever this is going to be fine cat + offset then I'm going to say image update pixels thank you thank you that's not a sound effect that's actually people from the hallway applauding they're not applauding for me though hopefully no one's going to come knock on the I'd say I'm being too loud load pixels and then I should be able to do exactly the same thing where I draw each image at an x and a y so X is n modulus 10 times 28 and and Y is well I'm gonna have to use floor here cuz no matter what JavaScript does floating point division and divided by 10 times 28 this is really what I did in the previous one I just want to be able to see that the stuff is coming in so this now I'm sure I've made some mistakes but let's just see if we see the cats now in the canvas let's see nothing I see nothing that is not good so let's see what could I have done Oh cats dot bytes so dot bytes I need to say there we go something's coming in but it's totally off ooh that looks like a mess what have I got wrong I plus offset I less than 784 cat's bytes image pixels I what am I missing here oh yes I forgot something super important in javascript native html5 canvas does not store each pixel as a single single integer so in processing each pixel is a single integer which can be segmented out into the rgba components the actual pixel array in JavaScript is 784 times for long there is a spot in the array for our for g4b for a so it's pixel 0 rgba pixel 1 RGB a so I need to I totally forgot I have a times 4 here then Oh oh my goodness no no I can just do this times 4 here and whoops let me zoom out I can say let me get the actual value from the array and just put it in another and I can say pixel I times four is Val and then that's the red value and these are just greyscale so plus one and I'm gonna goofily add a plus zero just through my code lines up because that's then plus two and everything I'm doing right now is just for the purpose of drawing so and then this needs to be 255 so basically I want to say what's that single value inside of the cat's byte array and I need to take that value and give it to the red green and blue parts of the image and have no transparency and now I'm expecting to see there we go there's all the cats and I prefer it to look like this and there we go so now we can see that I can get the data in to JavaScript one more thing before I move on to the next video let's prepare the data let's prepare the data into a rays of training images and testing images and there's a nice way that I've just learned that is a function I could use called sub array which allows me to essentially like pull out or point to a portion of the array so let me let me discuss what I'm gonna mean here so so this is the this is the raw data so I'm gonna just rename these like cats data cats data trains data rainbows data so I'm gonna I don't know why I'm using suddenly the underscore data naming convention but I just want to name these data because what I'm gonna do now is I'm gonna create some other arrays like cats cats training cats of trains oh boy who's bad trains training rainbows training let's just get the training data first so if I have a thousand images I want to use the first 800 as the training set and I must save the second 200 us the testing set so what I'm gonna do and we could comment all this stuff this was me just seeing that I could see it I'm going to say okay I'm going to say I want for example cats training to be a new array just a plain old array then I'm going to go from 0 all the way up to 800 and I'm going to say every element of cats training is cats data sub array and what the sub array array function wants is the beginning and the end of the sub array that I want to pull out so I always want to pull out 784 pixels essentially so I want to go from I well let's see I'm gonna go I'm gonna say offset equals I times 7 or 84 and so I want to go from offset to offset plus 784 and I think now is the time that I'm really putting this into a project that that 784 number really should be in a variable and I'm gonna do something crazy Const is a way of declaring a variable that you never intend to reassign and it's a nice way of me protecting myself from ever reassigning it by accident and I probably should be using constant a lot more places in the way that I code but I use it very rarely so I'm going to say Const length Eliane for length is 784 so i'm gonna say i times le n and this is going to be offset le n so let's just so this should if I've done this correctly we should be able to see now I'm gonna hit refresh and have a syntax error on line 45 oh I know like using Const was really exciting wasn't it partygoers are outside that door forever in this video ok subarray is not a function because what do I need to say cats data dot bytes I forgot that that array is inside of an array called bytes and now if I look at cats training we can see there's 800 784 pixel 800 arrays each ones with 784 elements in them so we can see here here's the first one here's the second one and this looks good you can see there's all the numbers this is good I now my training data now I'm actually gonna do something kind of a little bit nuts I'm gonna change this to 1000 and let's see let's call that Const total input total data I don't know I don't know these are I go to think about my variable names total data so I might change that someday and I'm gonna say if I'm going to I'm gonna say if I is less than 800 do this I'm just going to do this hard code this right now else and then I'm gonna say cats testing is also an array Oh couldn't training and testing just have the same number of characters like would be so much better if that were the case oh it's gonna my auto formats gonna change that oh well okay so now cats testing index I okay this is good now here's the thing this is correct but I've got to go from I I minus 800 so this should really be a variable I'm gonna say let I don't know what we're threshold it's very distracting well I'm gonna just call it threshold equal a floor 0.8 times total data and so now that's going to be there's going to be 800 going into training and 200 going into testing and this should not be 800 it should be threshold so this is how I'm thinking of my data I dividing it into testing and training and let's look at this threshold and now I can say cats training is 800 arrays and cats testing is 200 perfect we are doing well part of me now and I think I would like to do is actually make a variable just called cats one called trains one called rainbows I'm gonna make these objects and in the objects I'm gonna say cats training is an array and cats dot testing so I'm gonna make these properties cats training cats testing and now oops if I just look at cats sorry if I just look at cats there you are we see I have the training and the testing the testing is 200 the training is 800 boy this is tedious but it's worth it we're working on we're preparing our data by golly I'm gonna dedicate to hole to hole tutorial videos to to working on the data so now wouldn't it be nice if I made this into a function let's make this into a function let's refactor this into a function and I'm gonna just get I'm gonna I'm gonna call this prepare data call this prepare data I want to get a category and the data that goes with it so I'm adding the training and testing to a given category from given data look at me refactoring the code while I'm working and then I can just say prepare data cats cats data prepare data rainbows rainbows data and prepare data what was the last one trains trains data if I did this correctly we can look and see it cats there we go rainbows there we go and trains there we go now whether or not the data is still the correct data in there I'm just going to sort of feel somewhat confident that I did this correctly but I have now we have now we did sort of working within examining the data in processing to save some new data files with much less data in them I now in JavaScript I'm able to load those binary files and I have a little function to divide it up into training and testing so now in the next video I can finally write the piece of code that I've been wanting to do all along let neural network equal new neural network so that is what will happen in the next video and thank you for watching perhaps I will see you there you
