With timestamps:

00:00 - hello in this particular coating rainbow
00:03 - video I am going to show you how to use
00:05 - the function split and replace excited
00:09 - or what split and replace to do some
00:12 - very common operations that are gonna be
00:13 - needed for lots of examples I'm gonna
00:15 - make in the future in JavaScript with
00:17 - regular expressions so whoops oh this
00:20 - camera is off but I could turn it on and
00:23 - Here I am so what are these functions
00:26 - these are both functions that if you
00:28 - have a string you can call split and it
00:33 - takes one argument which is a regular
00:36 - expression or you could call string dot
00:40 - replace and it takes another argument it
00:45 - take replace takes an argument which is
00:46 - a regular expression followed by a
00:49 - string or oh my goodness oh my goodness
00:53 - oh my goodness oh my goodness function
00:58 - so replace is gonna be his splits gonna
01:01 - be very simple for us to look at I'm
01:03 - gonna look at it rather quickly and I
01:04 - might sit in a different video look at
01:06 - replace and look at how you can actually
01:08 - pass in a callback function so while the
01:11 - regular expression is matching things
01:13 - it's triggering a function which allows
01:15 - you to implement highly sophisticated
01:17 - logic for how you replace text within a
01:20 - piece of text I'm just gonna show you
01:21 - the basics of it but I hope that you
01:23 - will go and make all sorts of weird and
01:25 - strange creative experiments by you know
01:27 - mashing up and replacing text so let's
01:29 - first look at split so the scenario that
01:32 - I want to look at is I have a web page
01:34 - it has a little text box and I want to
01:37 - take that text box and whatever is in
01:39 - that text I want to split it into an
01:41 - array of words an array of tokens this
01:42 - is very very common in the flesh index
01:45 - example that I talked about in a
01:46 - previous video I looked at okay well how
01:48 - do you take a text and split it up into
01:50 - an array of words or an array of
01:53 - sentences or what about an array of
01:54 - syllables so this this idea of splitting
01:56 - a text into tokens chunks of text is
01:59 - very commonly something that needs to be
02:01 - done so let's just look at it very
02:03 - briefly here in the console I'm gonna
02:05 - say unicorns and rainbows
02:11 - and cupcakes that looks good to me so
02:14 - what I'm gonna do is I'm going to say s
02:15 - dot split and I'm going to pass in a
02:19 - regular expression now what goes in
02:21 - there what's the regular expression that
02:23 - goes in there well let's say if I just
02:24 - say backslash s what does that mean now
02:29 - the regular expression is a regular
02:32 - expression in order to match a delimiter
02:35 - so whatever the rate expression in the
02:38 - delimiter is the thing the the character
02:41 - or the sequence of characters that marks
02:43 - where you should split the text up so
02:45 - notice that look what I get I now get an
02:48 - array that has unicorns and rainbows and
02:51 - cupcakes I split it up by all the spaces
02:53 - now let me do something let me do
02:57 - something and let me put a comma right
02:58 - here and what I'm gonna do is I'm going
03:02 - to call that split function again and
03:05 - I'm gonna and look but look it's and
03:07 - comma so what if I want to split by a
03:11 - space or a comma so you know watch out
03:15 - what if I do this comma backslash s look
03:19 - at this my array only has two things in
03:21 - it now because I split by the sequence
03:24 - together of comma space which only
03:26 - appears in the original string and comma
03:29 - cupcakes so if I want to replace by a
03:32 - comma or backslash S or space or a white
03:37 - space then what I want to do is put that
03:40 - in a character class so any comma
03:45 - followed by oh it's now not not any
03:47 - comma followed by space a comma or white
03:49 - space and now you can see uh that was
03:52 - invalid syntax I forgot the knot there
03:55 - and let me just put that up higher for
03:57 - you so you can see it again you can see
03:59 - and now look what happened here what did
04:02 - I get here why this so I got a little
04:05 - extra empty space between the that
04:09 - that's between the comma and the space
04:11 - because I'm actually splitting that so
04:14 - here's a way that I could fix that think
04:16 - about it how could I fix that I want to
04:19 - split not by a comma or a space but by
04:23 - any sequence of com
04:25 - and spaces so in other words if I put a
04:28 - plus here now a valid delimiter is a
04:31 - single comma or a single space or comma
04:34 - space or space comma or space comma
04:37 - space comma comma comma space right so
04:39 - now if I do that look at that I lost
04:41 - that little extra empty thing so
04:44 - essentially if what I want to do is
04:47 - split a text into words and I can go
04:52 - into my code here and I can say all
04:55 - right now what I want to do is I want to
04:58 - say words equals s dot split are and I'm
05:03 - gonna make this a separate variable R
05:05 - equals a regular expression with I don't
05:08 - know a comma period exclamation point
05:11 - question mark or a whitespace any number
05:16 - of those so if I do that and if I do
05:20 - create P words and I do submit you can
05:27 - see it now you can see that this worked
05:29 - now let me do this let me actually I
05:31 - think it would make sense for me to
05:32 - write a loop here and I'm gonna do
05:38 - something a little bit different I'm
05:40 - gonna say create and I'll show you why
05:42 - I'm doing this in a little bit I'm gonna
05:43 - say create span words index I submit now
05:48 - look what I got I got it's clearly split
05:51 - into words and you know actually just to
05:53 - just to show you that this is an array
05:55 - I'm to say create P I'm gonna get into
05:56 - the create spam thing later so you can
05:58 - see this this worked and I think it
06:00 - would be useful also just to see that
06:02 - array in the console so I'm going to say
06:04 - console dot log words and you can see
06:07 - there it is so now I split this up now
06:09 - what makes a good regular expression to
06:12 - split by words or to split by sentences
06:14 - you know this is up to you to figure out
06:16 - I mean interestingly I could say well
06:18 - what if I just want to split only by
06:20 - periods question marks or exclamation
06:23 - points now in theory what I've got is
06:27 - hmm what did I split by oh I didn't get
06:32 - a period in there now I've got every
06:35 - sentence so I split the text up
06:37 - sentences so you can see there are
06:39 - different ways that I could choose to
06:40 - split you know I could split by this is
06:43 - gonna seem weird but by any sequence of
06:46 - capital letters and now it's just split
06:49 - anytime there was a capital letter so
06:51 - it's up to you to sort of figure out
06:52 - what's the best sequence what's the best
06:55 - thing to do but but a but but I would
06:59 - say thinking about one way to split a
07:02 - text very sort of quickly and easily up
07:04 - by words is to say split by anything
07:07 - that is a non word character and so
07:11 - there's certainly flaws to this but
07:13 - remember /w is any number or letter
07:15 - slash capital W as anything else so if I
07:18 - do this you can see this is a nice way
07:21 - for me to get all of the words in the
07:23 - text in a big array so there's okay so
07:27 - there's one other aspect of this and I'm
07:28 - gonna do this as a coding challenge in a
07:30 - bit but I want to mention it to you what
07:32 - if I wanted to split this up but
07:35 - actually retain the punctuation like
07:38 - look what if I wanted to know still in
07:39 - the array that a comma comes after
07:41 - reflection a period comes after arc so
07:44 - there's a little secret trick here which
07:46 - is that if in the regular expression if
07:49 - I use capturing parentheses if I put
07:53 - capturing parentheses around the
07:55 - delimiter regular expression then those
07:57 - des limiters that are that the text is
07:59 - split up by are saved into the array so
08:02 - let me show you what I mean by that I'm
08:04 - gonna run this again and you can see
08:06 - look at that
08:07 - right here there's an element a comma is
08:10 - saved
08:11 - you know this the period is saved the
08:14 - spaces should be saved too but those
08:17 - aren't showing up just in the way that
08:18 - I'm that the the text is being rendered
08:20 - with HTML but you can see that they're
08:22 - here in the array themselves all those
08:24 - spaces and this is going to be really
08:26 - useful the coding challenge thing I'm
08:28 - gonna do in a couple of videos from now
08:29 - is show you how to take a text split it
08:32 - up and then interact with each word
08:35 - separately by clicking on it or hovering
08:37 - over it and I'll show you how that how
08:40 - that works okay so in the next video
08:45 - what I'm going to do is show you not
08:47 - just how to use split but how to use
08:49 - replace with a regular expression
08:50 - okay thanks for watching

Cleaned transcript:

hello in this particular coating rainbow video I am going to show you how to use the function split and replace excited or what split and replace to do some very common operations that are gonna be needed for lots of examples I'm gonna make in the future in JavaScript with regular expressions so whoops oh this camera is off but I could turn it on and Here I am so what are these functions these are both functions that if you have a string you can call split and it takes one argument which is a regular expression or you could call string dot replace and it takes another argument it take replace takes an argument which is a regular expression followed by a string or oh my goodness oh my goodness oh my goodness oh my goodness function so replace is gonna be his splits gonna be very simple for us to look at I'm gonna look at it rather quickly and I might sit in a different video look at replace and look at how you can actually pass in a callback function so while the regular expression is matching things it's triggering a function which allows you to implement highly sophisticated logic for how you replace text within a piece of text I'm just gonna show you the basics of it but I hope that you will go and make all sorts of weird and strange creative experiments by you know mashing up and replacing text so let's first look at split so the scenario that I want to look at is I have a web page it has a little text box and I want to take that text box and whatever is in that text I want to split it into an array of words an array of tokens this is very very common in the flesh index example that I talked about in a previous video I looked at okay well how do you take a text and split it up into an array of words or an array of sentences or what about an array of syllables so this this idea of splitting a text into tokens chunks of text is very commonly something that needs to be done so let's just look at it very briefly here in the console I'm gonna say unicorns and rainbows and cupcakes that looks good to me so what I'm gonna do is I'm going to say s dot split and I'm going to pass in a regular expression now what goes in there what's the regular expression that goes in there well let's say if I just say backslash s what does that mean now the regular expression is a regular expression in order to match a delimiter so whatever the rate expression in the delimiter is the thing the the character or the sequence of characters that marks where you should split the text up so notice that look what I get I now get an array that has unicorns and rainbows and cupcakes I split it up by all the spaces now let me do something let me do something and let me put a comma right here and what I'm gonna do is I'm going to call that split function again and I'm gonna and look but look it's and comma so what if I want to split by a space or a comma so you know watch out what if I do this comma backslash s look at this my array only has two things in it now because I split by the sequence together of comma space which only appears in the original string and comma cupcakes so if I want to replace by a comma or backslash S or space or a white space then what I want to do is put that in a character class so any comma followed by oh it's now not not any comma followed by space a comma or white space and now you can see uh that was invalid syntax I forgot the knot there and let me just put that up higher for you so you can see it again you can see and now look what happened here what did I get here why this so I got a little extra empty space between the that that's between the comma and the space because I'm actually splitting that so here's a way that I could fix that think about it how could I fix that I want to split not by a comma or a space but by any sequence of com and spaces so in other words if I put a plus here now a valid delimiter is a single comma or a single space or comma space or space comma or space comma space comma comma comma space right so now if I do that look at that I lost that little extra empty thing so essentially if what I want to do is split a text into words and I can go into my code here and I can say all right now what I want to do is I want to say words equals s dot split are and I'm gonna make this a separate variable R equals a regular expression with I don't know a comma period exclamation point question mark or a whitespace any number of those so if I do that and if I do create P words and I do submit you can see it now you can see that this worked now let me do this let me actually I think it would make sense for me to write a loop here and I'm gonna do something a little bit different I'm gonna say create and I'll show you why I'm doing this in a little bit I'm gonna say create span words index I submit now look what I got I got it's clearly split into words and you know actually just to just to show you that this is an array I'm to say create P I'm gonna get into the create spam thing later so you can see this this worked and I think it would be useful also just to see that array in the console so I'm going to say console dot log words and you can see there it is so now I split this up now what makes a good regular expression to split by words or to split by sentences you know this is up to you to figure out I mean interestingly I could say well what if I just want to split only by periods question marks or exclamation points now in theory what I've got is hmm what did I split by oh I didn't get a period in there now I've got every sentence so I split the text up sentences so you can see there are different ways that I could choose to split you know I could split by this is gonna seem weird but by any sequence of capital letters and now it's just split anytime there was a capital letter so it's up to you to sort of figure out what's the best sequence what's the best thing to do but but a but but I would say thinking about one way to split a text very sort of quickly and easily up by words is to say split by anything that is a non word character and so there's certainly flaws to this but remember /w is any number or letter slash capital W as anything else so if I do this you can see this is a nice way for me to get all of the words in the text in a big array so there's okay so there's one other aspect of this and I'm gonna do this as a coding challenge in a bit but I want to mention it to you what if I wanted to split this up but actually retain the punctuation like look what if I wanted to know still in the array that a comma comes after reflection a period comes after arc so there's a little secret trick here which is that if in the regular expression if I use capturing parentheses if I put capturing parentheses around the delimiter regular expression then those des limiters that are that the text is split up by are saved into the array so let me show you what I mean by that I'm gonna run this again and you can see look at that right here there's an element a comma is saved you know this the period is saved the spaces should be saved too but those aren't showing up just in the way that I'm that the the text is being rendered with HTML but you can see that they're here in the array themselves all those spaces and this is going to be really useful the coding challenge thing I'm gonna do in a couple of videos from now is show you how to take a text split it up and then interact with each word separately by clicking on it or hovering over it and I'll show you how that how that works okay so in the next video what I'm going to do is show you not just how to use split but how to use replace with a regular expression okay thanks for watching
