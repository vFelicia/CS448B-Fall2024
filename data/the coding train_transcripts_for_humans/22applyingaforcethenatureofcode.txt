With timestamps:

00:01 - so now that we have looked at the basics
00:05 - of Newton's laws of motion and seen this
00:08 - form of the force equals mass times
00:09 - acceleration which is the equivalent of
00:12 - saying acceleration equals force divided
00:13 - by mass and when mass equals one we have
00:15 - got acceleration equals force I don't
00:20 - know I need an exclamation point but I'm
00:22 - enthused though a little bit sleepy
00:25 - right now we now need to look at how
00:28 - we're gonna actually apply this in our
00:29 - code so let's just remember where we are
00:30 - in terms of our object oriented
00:33 - programming thing that we've been doing
00:34 - right we're making this object this
00:36 - class called mover that is our body that
00:39 - we're gonna move around the screen so it
00:41 - is a mover class and if you recall this
00:46 - mover class has three variables P vector
00:50 - we have a location we have a velocity
00:55 - and we have an acceleration the
01:00 - constructor initializes all those
01:02 - quantities and the update method the
01:05 - step through a moment in time method
01:07 - that we've built but we're saying over
01:10 - it over and over again
01:11 - does one a couple simple things it says
01:17 - okay acceleration is the change in
01:23 - velocity over time velocity dot add
01:26 - acceleration velocity is the change in
01:31 - location over time this is where we've
01:34 - gotten to this is every single video
01:36 - we're reinforcing this concepts and now
01:39 - we have this moment where we want to say
01:41 - we want to write code that looks like
01:43 - this so in our main program we have
01:47 - something you know we have a mover you
01:51 - know we have processing setup where we
01:53 - initialize that mover M is a new mover
01:56 - and then we have Processing's
02:00 - draw method and there is where we say m
02:04 - dot update m dot display
02:10 - etc etc so over here I've run out of
02:14 - space for myself over here this is a new
02:18 - place right here we want to start to say
02:22 - things like okay this mover object which
02:27 - updates and displays It's Made etc we
02:29 - could start saying things like hey apply
02:31 - this force to it
02:32 - apply wind to it apply friction to it
02:34 - apply gravity to it apply love fear
02:38 - whatever types of kind of strange ways
02:41 - you want to think about a force we want
02:42 - to make a vector and stick it in that
02:45 - object and have that go into
02:47 - acceleration right that force so one way
02:49 - of writing that code is as follows I got
02:53 - to get better at this whiteboard it's
02:54 - kind of like okay no it's one way of
02:59 - doing that is to say hey let's make up a
03:02 - force which is a new P vector you know
03:08 - one comma zero something like that and
03:10 - let's say m dot apply force that force
03:17 - this this this oh my goodness
03:21 - star star exclamation bells fireworks
03:24 - fountains hearts right this is a huge
03:27 - thing here what we're saying is any
03:29 - object at any moment could just receive
03:31 - a force when you click the mouse apply a
03:33 - force when you get it you know when the
03:36 - when the Kinect camera detects a human
03:38 - present to the hand when you get this
03:40 - information from your Arduino there's so
03:42 - many things that now this any inputs
03:45 - could come and go into that object as a
03:47 - force if we can make this work so this
03:50 - object can receive that force that force
03:51 - can go into acceleration and trigger
03:53 - that object's motion then just checking
03:56 - that recording as I do every time now
03:59 - then we've really got somewhere okay so
04:02 - how are we going to make this work in
04:03 - our code so let's add one I'm gonna stop
04:05 - here and we're gonna add so this tells
04:08 - us right right here this tells us we
04:10 - have to add an apply force method to our
04:13 - program okay little misshapen I'm back
04:18 - at it here we are okay so this is this
04:21 - new line of code we've written
04:23 - and that apply force force we've written
04:27 - this code if we were to run this right
04:29 - now we would say oh I don't know what
04:31 - the method apply forces an object
04:32 - doesn't automatically have that method
04:34 - no more than it automatically has an
04:36 - update method update is a function that
04:38 - we've written into our mover object this
04:40 - now says Newton's law is now I turn this
04:43 - off Newton's law is now telling us that
04:46 - we need to write a new method into our
04:48 - mover object what is that new method its
04:50 - apply force so we write a method for say
04:53 - the return type does this method return
04:55 - anything no it does not void now we need
04:59 - to know what is the name of that
05:00 - function the name of that function well
05:02 - we named it apply force apply force what
05:07 - is that object what does that function
05:09 - take as an argument well it takes a
05:10 - singular argument the arguments data
05:13 - type is P vector so we need to add P
05:16 - vector and for brevity here I'm going to
05:18 - say F right this is the function this
05:22 - now would run this would this would
05:23 - compile this would be happy it would run
05:25 - but it wouldn't do anything would pass
05:27 - that variable in and do nothing so what
05:29 - do we need to do let's look to Newton's
05:31 - second law as our clue as to what we're
05:33 - gonna do in that function a equals F
05:37 - that is our method on that is art that
05:40 - is our that is Newton's second law we
05:42 - could just write that and what can we do
05:43 - we're gonna just do exactly that
05:44 - acceleration equals F so what we're
05:47 - doing is we just took a separate we
05:50 - wrote it and we before we were
05:52 - calculating acceleration in update now
05:54 - we broke that out into a separate method
05:56 - called apply force so they can receive a
05:58 - force and it could it could pass that
06:01 - force into acceleration which would then
06:03 - go into velocity which would then go
06:04 - into location okay
06:07 - I think that's okay so let's actually
06:09 - implement this in our code right now and
06:11 - see what happens okay hello again so if
06:15 - we look at this I'm gonna just write up
06:17 - here I'm going to add something I'm
06:18 - going to say P vector F equals a new P
06:21 - vector zero comma zero point one now
06:25 - first let me run this for a second this
06:26 - sketch by the way I moved it back where
06:29 - the object is initialized with no
06:30 - velocity of no acceleration so it's just
06:32 - sitting there in the middle of the
06:34 - screen in the absence of
06:36 - any force or if the net force is zero an
06:39 - object stays at rest or staged at
06:40 - constant velocity that's what's
06:42 - happening here Newton's first law is
06:43 - happening so now what we want to do is
06:45 - say now now there will not be an absence
06:48 - of a force instead of an absence of a
06:50 - force we're going to apply this force to
06:53 - that object and that apply force F let's
06:56 - run it
06:56 - aha the function apply force does not
06:59 - exist right because we have not defined
07:03 - that force so now we can go over here
07:06 - and we can say that we have not defined
07:07 - that function void apply force P vector
07:11 - force acceleration equals force this is
07:16 - the beginning of Newton's second law the
07:21 - beginning so this actually in a moment
07:23 - we're gonna see this is woefully
07:24 - inadequate we need to implement several
07:27 - additional steps here to really get this
07:29 - idea of net force of force accumulation
07:31 - going but this is a beginning step so
07:34 - let's run this sketch and see what
07:37 - happens look that force has been applied
07:39 - well this is pretty exciting because
07:41 - watch this now what if I say any vector
07:47 - I apply to that that becomes a force on
07:49 - that object pushing it off to the side
07:51 - so one thing I guess that we left in
07:54 - here by accident is limit the velocity
07:57 - to five so I'm going to take that back
07:59 - out just so we can see that force being
08:01 - applied so we can see that you know I
08:05 - could make up I don't know why I'm just
08:08 - making up forces right and now look what
08:10 - we've got we're continuously applying
08:13 - this force to that object always pushing
08:15 - it to the right always pushing it down
08:16 - this is pretty exciting because this
08:20 - model is going to allow us to do so much
08:21 - even now we can see even just with the
08:23 - simple bit of code we kind of have a
08:25 - more dynamic system going on where it
08:27 - feels like lots of different things are
08:29 - at play here okay so the interesting
08:32 - thing though is that what have we done
08:34 - what are we simulating exactly nothing
08:36 - so the this this video series which I'm
08:41 - starting to regret but hopefully
08:44 - shouldn't we're at this moment where
08:48 - we're a
08:49 - out to do a string of videos and every
08:51 - one of these videos are going to answer
08:52 - the question what is the force
08:55 - use the Force something like that right
08:59 - the thing is this first beginning step
09:02 - that we've done we've just made up a
09:05 - force it's important to realize that you
09:06 - could just do this a force is a vector
09:08 - that causes an object with mass to
09:10 - accelerate and our first step here is
09:12 - just to make up P vectors and apply them
09:14 - to the object the thing that we're
09:16 - missing which I'm which I'm trying to
09:18 - decide but I'm think I'm gonna have this
09:19 - video go on with this and solve this
09:21 - problem is
09:22 - watch what happens for a moment if we
09:24 - add a second force okay
09:26 - so let's go back to our code did I would
09:29 - I never actually come over here was I
09:30 - over here who knows maybe I was just
09:32 - talking okay let's let's add um so let's
09:35 - simplify things for a second and say
09:37 - okay here's a force oops here's a voice
09:41 - pointing down the ball is bouncing
09:43 - excellent here is a force pointing and
09:50 - I'm gonna have a point to the left
09:51 - that's the right and let's actually do a
09:59 - little bit better here and say I know
10:00 - this is gravity and this is wind we want
10:05 - both of these forces to be applied to
10:08 - the object let me run this what happened
10:11 - to gravity I only see wind all right
10:15 - strange right well let's comment out
10:18 - wind and see what happened oh I only
10:21 - have gravity I have no more wind
10:23 - so scratch head-scratching what's going
10:26 - on here well let's look at how we wrote
10:30 - that apply force method a acceleration
10:32 - equals force so let's have gravity and
10:35 - pass it in the object acceleration
10:37 - equals gravity let's have wind and let's
10:39 - pass it into the object acceleration
10:41 - equals wind now let's apply acceleration
10:43 - to velocity what was the value of
10:44 - acceleration it's equal to wind that's
10:47 - not what we want when we apply multiple
10:49 - forces we don't want to replace
10:51 - acceleration with a new value what we
10:54 - want to do is accumulate all those
10:56 - forces into into acceleration this is
10:59 - the concept of a net force a body
11:02 - experiencing multiple forces its net
11:05 - acceleration is acceleration equals the
11:10 - sum of all those forces divided by mass
11:12 - that's really the accurate stating of
11:14 - Newton's second law so we can actually
11:16 - make a very very very simple change
11:21 - acceleration I know you're thinking of
11:24 - it already dot add F acceleration dot
11:28 - add F so now no matter how many times we
11:33 - call this wind and apply force by the
11:37 - block friction
11:40 - matter how many times we apply that the
11:41 - forces come in get added into
11:43 - acceleration add into acceleration added
11:45 - an acceleration and then that
11:46 - acceleration gets applied to the
11:49 - velocity close we're still missing
11:54 - something sad because this is so clean
11:57 - and nice and it feels like we're done
11:58 - and we solved it and everything's gonna
12:00 - work the truth of the matter is
12:02 - conceptually were right on here but
12:04 - logistically practically speaking we're
12:07 - missing an important key factor in how
12:09 - code works right what are we adding
12:12 - these variables into we're adding them
12:14 - into a variable called acceleration that
12:17 - variable acceleration is initialized if
12:19 - we go back to the code for a second in
12:22 - the constructor as zero acceleration
12:25 - starts as zero that makes sense because
12:28 - when acceleration starts at zero then we
12:30 - accumulate the forces apply that to
12:32 - velocity then we start at zero and we
12:33 - accumulate the forces and apply it to
12:35 - velocity and we start at zero and we
12:37 - akuma it that's what happens at every
12:38 - moment in time our acceleration just
12:41 - accumulate to all the forces and gets
12:42 - applied to velocity right every moment
12:45 - in time we start accumulating all the
12:47 - forces into acceleration again the
12:49 - reason why I take this over to her again
12:50 - it's not because I'm a crazy person
12:52 - although I am totally a crazy person
12:54 - it's because that's not what happening
12:56 - and that's not what happened that's not
12:58 - what is happening in our code this
13:00 - acceleration is actually accumulating
13:02 - over multiple frames we add all the
13:05 - forces into acceleration in the next
13:07 - frame we add more forces acceleration
13:08 - the next frame we had more forces in
13:10 - acceleration each frame of animation is
13:12 - a new moment in time it's a time for new
13:16 - beginning
13:16 - for anything new to happen it is not the
13:19 - previous moment in time an acceleration
13:21 - in our model here is the net force at
13:25 - that moment in time so we actually just
13:28 - need to do something really simple which
13:30 - is right here at the end of update after
13:33 - we finish after we accumulator our
13:35 - forces we get our new velocity we get
13:37 - our new location we have to wipe out
13:39 - acceleration so that the next moment in
13:40 - time we can start again from zero and
13:42 - that a very simple way to make a vector
13:46 - cleared out to set its values to zero is
13:49 - just x zero if we multiply all the
13:51 - components of a vector by zero all the
13:52 - component of the vector will be equal to
13:54 - zero so this is now the complete picture
13:57 - right we have added a new apply force
14:00 - method the force gets sent in and gets
14:03 - accumulated into acceleration that
14:05 - accumulated acceleration goes into
14:07 - velocity and then at the end of every
14:09 - moment in time at the end of every frame
14:10 - we wipe out acceleration so we can start
14:13 - again anew on the next frame so now what
14:16 - I want to do is take this and implement
14:18 - this in our code and see the magic
14:21 - happen again you know by the way it's
14:24 - just a circle moving around the screen
14:25 - what can you do ok so now we're back
14:29 - over here let's go and look at this and
14:32 - we're going to change a few things first
14:33 - let's add force accumulation dot add
14:37 - force beautiful beautiful okay now we've
14:41 - got force accumulation and actually I'm
14:43 - just almost out of curiosity let's run
14:45 - this and see what happens and let's you
14:50 - can see it's quickly spiraling out of
14:51 - control that's because the acceleration
14:53 - is like all the forces that ever happens
14:55 - it's the dawn of time are now affecting
14:57 - me which is not what we want only the
14:59 - forces at that particular moment in time
15:00 - should be affecting the object and now
15:03 - what we can do is fix that by saying at
15:06 - the end we are going to knock velocity
15:09 - excuse me acceleration dot multiplied by
15:13 - zero this is going to clear out the
15:16 - acceleration and look this looks very
15:17 - similar to something we did before
15:19 - because before we had one force with
15:22 - that was pointing to the right and down
15:24 - now we have them as two separate forces
15:26 - from gravity pointing down and win
15:28 - pointing to the right but let's see just
15:30 - so we can prove that we really cook in
15:32 - here what can we do with this just to
15:34 - show this is working if I add if
15:35 - mousepressed I can show you that I can
15:38 - apply the wind force only when I'm
15:41 - clicking the mouse so here we have and
15:43 - watch I could do something really weird
15:45 - here which is that I can go I'm such a
15:52 - loser okay so so now you can see that
15:55 - whenever I click the mouse wind is
15:56 - applied and now it's just bouncing back
15:58 - and forth there's no other forces in the
16:00 - environment I apply the wind it's always
16:03 - pushing it to the right I let go of the
16:05 - mouse and it's bouncing back and forth
16:08 - again so this is a big moment and now
16:11 - you have something you can really work
16:12 - with and but the next set of videos
16:15 - we're going to say to ourselves
16:17 - maybe we shouldn't just make up numbers
16:19 - maybe what we really want is to actually
16:22 - look at a formula and could calculate
16:25 - something it'll be nicer it'll be more
16:27 - like science but this for the moment is
16:31 - pretty good because I think making up
16:33 - numbers is just fine you can get a lot
16:35 - done you can calculate something based
16:37 - on now you could calculate have
16:38 - something based on input from a sensor
16:40 - input from the mouse input from a
16:42 - connect sum the generative crazy
16:45 - calculated algorithm that you've come up
16:46 - with pearly noise you could have Pearlie
16:48 - noise wind force now there's so much you
16:50 - could do with even just this model but
16:52 - all we've done here is make up forces so
16:55 - in the next series of videos we're gonna
16:57 - actually I'm think I'm just gonna do one
16:58 - we're gonna look at air resistance or
17:00 - fluid resistance which is the same force
17:01 - and another one we're gonna look at
17:03 - gravitational attraction I don't mean
17:05 - this kind of bouncing ball gravity I
17:06 - mean actual mutual gravitational
17:09 - attraction between bodies else I totally
17:12 - what it's a second I forgot bear with me
17:15 - forces ah but before we can do that
17:18 - actually I think we need to introduce
17:19 - mass so in the next video I think we're
17:22 - gonna add mass into this so that we can
17:24 - have mass play a part in those other
17:26 - simulations that we're gonna do okay so
17:31 - sayonara talk to you later I'm gonna
17:35 - click a button where's the mouse there
17:37 - it is goodbye

Cleaned transcript:

so now that we have looked at the basics of Newton's laws of motion and seen this form of the force equals mass times acceleration which is the equivalent of saying acceleration equals force divided by mass and when mass equals one we have got acceleration equals force I don't know I need an exclamation point but I'm enthused though a little bit sleepy right now we now need to look at how we're gonna actually apply this in our code so let's just remember where we are in terms of our object oriented programming thing that we've been doing right we're making this object this class called mover that is our body that we're gonna move around the screen so it is a mover class and if you recall this mover class has three variables P vector we have a location we have a velocity and we have an acceleration the constructor initializes all those quantities and the update method the step through a moment in time method that we've built but we're saying over it over and over again does one a couple simple things it says okay acceleration is the change in velocity over time velocity dot add acceleration velocity is the change in location over time this is where we've gotten to this is every single video we're reinforcing this concepts and now we have this moment where we want to say we want to write code that looks like this so in our main program we have something you know we have a mover you know we have processing setup where we initialize that mover M is a new mover and then we have Processing's draw method and there is where we say m dot update m dot display etc etc so over here I've run out of space for myself over here this is a new place right here we want to start to say things like okay this mover object which updates and displays It's Made etc we could start saying things like hey apply this force to it apply wind to it apply friction to it apply gravity to it apply love fear whatever types of kind of strange ways you want to think about a force we want to make a vector and stick it in that object and have that go into acceleration right that force so one way of writing that code is as follows I got to get better at this whiteboard it's kind of like okay no it's one way of doing that is to say hey let's make up a force which is a new P vector you know one comma zero something like that and let's say m dot apply force that force this this this oh my goodness star star exclamation bells fireworks fountains hearts right this is a huge thing here what we're saying is any object at any moment could just receive a force when you click the mouse apply a force when you get it you know when the when the Kinect camera detects a human present to the hand when you get this information from your Arduino there's so many things that now this any inputs could come and go into that object as a force if we can make this work so this object can receive that force that force can go into acceleration and trigger that object's motion then just checking that recording as I do every time now then we've really got somewhere okay so how are we going to make this work in our code so let's add one I'm gonna stop here and we're gonna add so this tells us right right here this tells us we have to add an apply force method to our program okay little misshapen I'm back at it here we are okay so this is this new line of code we've written and that apply force force we've written this code if we were to run this right now we would say oh I don't know what the method apply forces an object doesn't automatically have that method no more than it automatically has an update method update is a function that we've written into our mover object this now says Newton's law is now I turn this off Newton's law is now telling us that we need to write a new method into our mover object what is that new method its apply force so we write a method for say the return type does this method return anything no it does not void now we need to know what is the name of that function the name of that function well we named it apply force apply force what is that object what does that function take as an argument well it takes a singular argument the arguments data type is P vector so we need to add P vector and for brevity here I'm going to say F right this is the function this now would run this would this would compile this would be happy it would run but it wouldn't do anything would pass that variable in and do nothing so what do we need to do let's look to Newton's second law as our clue as to what we're gonna do in that function a equals F that is our method on that is art that is our that is Newton's second law we could just write that and what can we do we're gonna just do exactly that acceleration equals F so what we're doing is we just took a separate we wrote it and we before we were calculating acceleration in update now we broke that out into a separate method called apply force so they can receive a force and it could it could pass that force into acceleration which would then go into velocity which would then go into location okay I think that's okay so let's actually implement this in our code right now and see what happens okay hello again so if we look at this I'm gonna just write up here I'm going to add something I'm going to say P vector F equals a new P vector zero comma zero point one now first let me run this for a second this sketch by the way I moved it back where the object is initialized with no velocity of no acceleration so it's just sitting there in the middle of the screen in the absence of any force or if the net force is zero an object stays at rest or staged at constant velocity that's what's happening here Newton's first law is happening so now what we want to do is say now now there will not be an absence of a force instead of an absence of a force we're going to apply this force to that object and that apply force F let's run it aha the function apply force does not exist right because we have not defined that force so now we can go over here and we can say that we have not defined that function void apply force P vector force acceleration equals force this is the beginning of Newton's second law the beginning so this actually in a moment we're gonna see this is woefully inadequate we need to implement several additional steps here to really get this idea of net force of force accumulation going but this is a beginning step so let's run this sketch and see what happens look that force has been applied well this is pretty exciting because watch this now what if I say any vector I apply to that that becomes a force on that object pushing it off to the side so one thing I guess that we left in here by accident is limit the velocity to five so I'm going to take that back out just so we can see that force being applied so we can see that you know I could make up I don't know why I'm just making up forces right and now look what we've got we're continuously applying this force to that object always pushing it to the right always pushing it down this is pretty exciting because this model is going to allow us to do so much even now we can see even just with the simple bit of code we kind of have a more dynamic system going on where it feels like lots of different things are at play here okay so the interesting thing though is that what have we done what are we simulating exactly nothing so the this this video series which I'm starting to regret but hopefully shouldn't we're at this moment where we're a out to do a string of videos and every one of these videos are going to answer the question what is the force use the Force something like that right the thing is this first beginning step that we've done we've just made up a force it's important to realize that you could just do this a force is a vector that causes an object with mass to accelerate and our first step here is just to make up P vectors and apply them to the object the thing that we're missing which I'm which I'm trying to decide but I'm think I'm gonna have this video go on with this and solve this problem is watch what happens for a moment if we add a second force okay so let's go back to our code did I would I never actually come over here was I over here who knows maybe I was just talking okay let's let's add um so let's simplify things for a second and say okay here's a force oops here's a voice pointing down the ball is bouncing excellent here is a force pointing and I'm gonna have a point to the left that's the right and let's actually do a little bit better here and say I know this is gravity and this is wind we want both of these forces to be applied to the object let me run this what happened to gravity I only see wind all right strange right well let's comment out wind and see what happened oh I only have gravity I have no more wind so scratch headscratching what's going on here well let's look at how we wrote that apply force method a acceleration equals force so let's have gravity and pass it in the object acceleration equals gravity let's have wind and let's pass it into the object acceleration equals wind now let's apply acceleration to velocity what was the value of acceleration it's equal to wind that's not what we want when we apply multiple forces we don't want to replace acceleration with a new value what we want to do is accumulate all those forces into into acceleration this is the concept of a net force a body experiencing multiple forces its net acceleration is acceleration equals the sum of all those forces divided by mass that's really the accurate stating of Newton's second law so we can actually make a very very very simple change acceleration I know you're thinking of it already dot add F acceleration dot add F so now no matter how many times we call this wind and apply force by the block friction matter how many times we apply that the forces come in get added into acceleration add into acceleration added an acceleration and then that acceleration gets applied to the velocity close we're still missing something sad because this is so clean and nice and it feels like we're done and we solved it and everything's gonna work the truth of the matter is conceptually were right on here but logistically practically speaking we're missing an important key factor in how code works right what are we adding these variables into we're adding them into a variable called acceleration that variable acceleration is initialized if we go back to the code for a second in the constructor as zero acceleration starts as zero that makes sense because when acceleration starts at zero then we accumulate the forces apply that to velocity then we start at zero and we accumulate the forces and apply it to velocity and we start at zero and we akuma it that's what happens at every moment in time our acceleration just accumulate to all the forces and gets applied to velocity right every moment in time we start accumulating all the forces into acceleration again the reason why I take this over to her again it's not because I'm a crazy person although I am totally a crazy person it's because that's not what happening and that's not what happened that's not what is happening in our code this acceleration is actually accumulating over multiple frames we add all the forces into acceleration in the next frame we add more forces acceleration the next frame we had more forces in acceleration each frame of animation is a new moment in time it's a time for new beginning for anything new to happen it is not the previous moment in time an acceleration in our model here is the net force at that moment in time so we actually just need to do something really simple which is right here at the end of update after we finish after we accumulator our forces we get our new velocity we get our new location we have to wipe out acceleration so that the next moment in time we can start again from zero and that a very simple way to make a vector cleared out to set its values to zero is just x zero if we multiply all the components of a vector by zero all the component of the vector will be equal to zero so this is now the complete picture right we have added a new apply force method the force gets sent in and gets accumulated into acceleration that accumulated acceleration goes into velocity and then at the end of every moment in time at the end of every frame we wipe out acceleration so we can start again anew on the next frame so now what I want to do is take this and implement this in our code and see the magic happen again you know by the way it's just a circle moving around the screen what can you do ok so now we're back over here let's go and look at this and we're going to change a few things first let's add force accumulation dot add force beautiful beautiful okay now we've got force accumulation and actually I'm just almost out of curiosity let's run this and see what happens and let's you can see it's quickly spiraling out of control that's because the acceleration is like all the forces that ever happens it's the dawn of time are now affecting me which is not what we want only the forces at that particular moment in time should be affecting the object and now what we can do is fix that by saying at the end we are going to knock velocity excuse me acceleration dot multiplied by zero this is going to clear out the acceleration and look this looks very similar to something we did before because before we had one force with that was pointing to the right and down now we have them as two separate forces from gravity pointing down and win pointing to the right but let's see just so we can prove that we really cook in here what can we do with this just to show this is working if I add if mousepressed I can show you that I can apply the wind force only when I'm clicking the mouse so here we have and watch I could do something really weird here which is that I can go I'm such a loser okay so so now you can see that whenever I click the mouse wind is applied and now it's just bouncing back and forth there's no other forces in the environment I apply the wind it's always pushing it to the right I let go of the mouse and it's bouncing back and forth again so this is a big moment and now you have something you can really work with and but the next set of videos we're going to say to ourselves maybe we shouldn't just make up numbers maybe what we really want is to actually look at a formula and could calculate something it'll be nicer it'll be more like science but this for the moment is pretty good because I think making up numbers is just fine you can get a lot done you can calculate something based on now you could calculate have something based on input from a sensor input from the mouse input from a connect sum the generative crazy calculated algorithm that you've come up with pearly noise you could have Pearlie noise wind force now there's so much you could do with even just this model but all we've done here is make up forces so in the next series of videos we're gonna actually I'm think I'm just gonna do one we're gonna look at air resistance or fluid resistance which is the same force and another one we're gonna look at gravitational attraction I don't mean this kind of bouncing ball gravity I mean actual mutual gravitational attraction between bodies else I totally what it's a second I forgot bear with me forces ah but before we can do that actually I think we need to introduce mass so in the next video I think we're gonna add mass into this so that we can have mass play a part in those other simulations that we're gonna do okay so sayonara talk to you later I'm gonna click a button where's the mouse there it is goodbye
