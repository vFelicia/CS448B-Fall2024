With timestamps:

00:00 - (train whistle blowing)
00:00 - - Okay, this is the second part of my
00:02 - What is the Difference
Between p5.JS and Processing.
00:05 - And in this particular
second part, I'm actually
00:07 - just going to open up
processing and p5 themselves,
00:11 - and look how writing code in both of them,
00:13 - and what are some actual
differences syntax wise,
00:16 - or feature wise between the two, okay?
00:18 - And I'll see you at the end of this video.
00:19 - There'll be a third part also,
00:20 - where I'm going to make
a list of pros and cons.
00:22 - If you missed the first
part, you can also find
00:24 - in the description, a
link to the first part,
00:26 - where I kind of do a macro view
00:28 - of the bigger picture of
these two environments.
00:29 - Alright, see you in a bit, I guess,
00:31 - because I'm just here, me
talking, camera, video thing.
00:35 - Okay, so I'm back here,
on the two websites.
00:37 - If you're looking at p5 and processing,
00:40 - p5's at p5js.org, here's the website here.
00:43 - You can download the
library files, and find
00:46 - some information about how to get started
00:48 - with an editor, on this website.
00:50 - And I'll talk a bit about
that, once I open a editor.
00:52 - Processing.org, this is
the processing website,
00:55 - and you can go here to
download, to download
00:57 - the actual processing
software editor environment
00:59 - for Mac, PC, that sort of thing.
01:01 - So I've already done that,
01:03 - and I have both of those things here.
01:04 - If you have trouble with
that, you can write something
01:06 - in the comments, and
hopefully, I or somebody else
01:07 - following the comments,
can jump in and help.
01:09 - Also, by the way, actually,
if you really have
01:11 - technical questions
about processing and p5,
01:14 - I would suggest you go and ask
them at forum.processing.org.
01:18 - So these two comments are a
nice place to give feedback,
01:21 - and for me to hear from you,
but it's not the best place
01:22 - to discuss code or ask
technical questions.
01:24 - The forum is really the
best place for that,
01:25 - and you can always tweet me a
link to a post on the forum,
01:28 - and I'll be able to follow it,
and chime in there, as well.
01:30 - Okay, so I'm going to
minimize the browser here.
01:34 - Here I have, I want to say,
01:35 - I have both environments going, but
01:39 - this is actually the processing software,
01:42 - the desktop editor itself, which is open.
01:44 - It's got a little window,
where I can draw my,
01:46 - where I can write my code.
01:47 - It's got the run button up
here, it's got a stop button.
01:50 - It's got some stuff about modes,
because something I can do,
01:54 - is I can actually switch to Python,
01:56 - I can actually do p5.js
in the processing editor,
01:58 - as well, with the p5.js mode.
02:01 - These modes won't necessarily
be there for you by default,
02:03 - you'll need to go to this add mode,
02:05 - which opens something called
the contribution manager,
02:07 - so which you can add libraries,
and modes, and tools,
02:09 - and examples, and that sort of thing.
02:11 - So this is actually a new interface,
02:12 - for what's really nice about
having a desktop editor,
02:15 - is adding libraries, or finding examples.
02:16 - All of this can be done
through the interface itself.
02:20 - With p5, the way that I'm going
to show you p5 right here,
02:23 - is this is just an editor called Adam.
02:25 - Adam is made by GetHub,
it's open source, it's free.
02:28 - It let's you type your code,
02:30 - there packages you can install, to like
02:33 - see your code automatically
in the browser,
02:35 - or syntax highlighted in a different way,
02:37 - or have like special keyboard commands.
02:39 - But any text editor, I might
suggest looking at Sublime,
02:42 - or Brackets, or CodePen,
which is an online web editor.
02:48 - At some point, if people are interested,
02:49 - I can make different videos
of different editors,
02:51 - to see how different people
have those things setup.
02:54 - That's the primary difference
that, and just sort of
02:57 - working in these
environments is processing.
02:58 - My suggestion is you just
download it and use it.
03:01 - With p5, you want to find
an editor that you like,
03:04 - or that a friend uses,
that they recommend to you,
03:06 - and work with it that way.
03:07 - And there's suggestions and information
03:09 - about that also, in the p5.js website.
03:11 - And you cans see, that I
just have all the files
03:14 - associated with this sketch right here.
03:15 - There's my Javascript file,
this is where I type the code.
03:18 - There's an HTML file,
where I can add HTML.
03:20 - And if you do my sort of
03:21 - foundations of programming in p5 videos,
03:24 - I go through what all
those different files do.
03:27 - And then, libraries that
I might want to add.
03:29 - These are the p5 libraries,
which is Javascript files.
03:32 - If I want to add other libraries,
03:34 - I've got to manually download them,
03:35 - add them to this folder, or refer to them.
03:37 - Libraries can also refer to them,
03:39 - that are on a web service
somewhere through a URL.
03:41 - There's lots of different
ways of doing it,
03:42 - beyond the scope of what
I'm doing in this video.
03:44 - On my processing, we kind of have
03:46 - everything all in one here.
03:47 - Now, the other difference is, what happens
03:49 - when you quote/unquote run your code?
03:52 - So both of these are a simple sketch.
03:54 - Both processing and p5 are
built with this concept
03:58 - of setup and draw, for
an animation program.
04:00 - Setup happens once, to
kind of setup your program,
04:03 - initialize variables,
everything to start with.
04:06 - Draw loops, it's an animation
loop, because most sketches
04:09 - and programs that you might want to write,
04:11 - you want in animation.
04:12 - And of course, you can stop the animation,
04:13 - start the animation, have no animation,
04:15 - do all sorts of different other things,
04:17 - but that's the sort of core functionality.
04:19 - So if I run a processing sketch,
04:21 - you'll see I get a window.
04:23 - So processing sketches
are desktop applications.
04:26 - And actually, I can go up
here File, Export Application.
04:30 - And if I go to Export Application,
what you're going to see,
04:32 - is I can actually make a
double-clickable application,
04:35 - that I could release or send,
for Windows, Mac, Linux.
04:38 - I could make it full screen, I could,
04:40 - and beneath Java, to run.
04:42 - So here on Mac, like if somebody doesn't,
04:44 - you can actually embed Java.
04:45 - And there's some goofiness with Apple,
04:47 - and I don't want to get into this.
04:48 - It's definitely an issue
with new operating systems,
04:51 - that Apple doesn't want
you to use applications
04:53 - that aren't like signed,
and delivered, and
04:56 - deemed worthy of their
operating system, so to speak.
05:00 - That can be a little bit tricky,
but absolutely does work.
05:03 - p5, this is just stuff that is web files.
05:06 - So you could put in on a web server,
05:08 - if you have a web server account,
05:09 - you can have it on your computer,
05:11 - and open it up through the browser.
05:13 - And typically what I do,
is I run a local server,
05:15 - and I'm doing that through
Terminal, and I have other videos
05:17 - that kind of walk through
the steps of that.
05:19 - And then, if I want to
see the result of my code,
05:22 - I just go to the browser,
and I have it here.
05:24 - And you can see here, I'm
running a little web server,
05:27 - which then I can view the
result of that web server
05:30 - at an address called localhost.
05:32 - And my sketch is called QA underscore p5,
05:35 - and 8000 refers to the port.
05:37 - And so, at some point,
this is kind of like
05:40 - seeing how it works, and developing.
05:41 - And then I might, upload my code,
05:43 - and the URL would no
longer say local host,
05:45 - because my codes not on this laptop,
05:47 - but might be on my server shiffman.net.
05:49 - So that's a core difference.
05:51 - The p5.js is going to run your code,
05:53 - and you're going to see
the results in the browser.
05:55 - Processing, it's going to
launch as a desktop application.
05:59 - There are some things
that actually make them
06:01 - quite different then, because for example,
06:03 - I'm going to put full screen, and setup.
06:04 - And I'm going to say background,
06:08 - frameCount, modulers, oh, no,
06:09 - I'm not going to write any crazy code.
06:11 - I'm just going to say background 100,
06:14 - come zero, come 200.
06:16 - And if I run this, processing
now knows how to make
06:19 - a full screen window automatically,
06:21 - whatever my resolution is, and it's got
06:23 - this like purple color.
06:24 - So because if you're in
a desktop environment,
06:26 - it's a little easier, I
could say full screen,
06:28 - and I could actually give it a number,
06:30 - which is if I'm connected to a projector,
06:31 - it would go straight to that projector,
06:33 - and that sort of thing.
06:35 - But the main function you
write in processing, typically,
06:38 - is size, which would make
a window of 600 by 400.
06:42 - And when I run, that's what I've got here.
06:44 - In p5, I'm actually going
to say createCanvas,
06:49 - there's subtle differences,
the same concept, 600 by 400.
06:52 - And then I can take this background code,
06:54 - and I can put it in here,
and that's identical,
06:57 - and I can now go and hit refresh,
06:58 - and we can see I have my, oops, shoot!
07:02 - I had the font bigger here,
07:04 - but I didn't want it bigger there.
07:05 - I could say...
07:06 - And this, by the way, over
here, is a Javascript console.
07:09 - That's available probably under
07:10 - View, Developer, Javascript Console.
07:13 - So this is something I
use a lot for debugging,
07:15 - to see error messages.
07:18 - That's something that you
might want to figure out
07:20 - how you get a console,
to see error messages
07:22 - as part of your workflow, as well.
07:24 - But I'm just using the Chrome one,
07:25 - because it works pretty well.
07:28 - Yeah, okay.
07:29 - So you can see that, is
this is the same exact code,
07:32 - but in two different environments.
07:34 - Let's highlight some
other key differences.
07:37 - Java syntax, void.
07:39 - Functions, Java is a typed
language, meaning, if a function,
07:42 - if it say, void means it
doesn't return anything.
07:45 - If it's going to return a number,
07:46 - I have to say what kind of thing.
07:48 - In Javascript, I just
only ever say function.
07:51 - The same thing if I
want to add a variable.
07:54 - Float X
07:56 - equals 100.
07:58 - Float Y equals 100.
08:00 - And then I might use the ellipse function,
08:02 - ellipse X comma Y, 60 comma 60.
08:06 - Right?
08:07 - If I want to add that code,
08:08 - over here.
08:11 - Var X equals 100.
08:13 - Var Y equals 100.
08:15 - Add that here.
08:18 - So you could see, very, very similar,
08:21 - but because here, I'm
writing in Javascript.
08:24 - So I adopt Javascript syntax.
08:27 - Over here, I'm writing in
Java, so I adopt Java syntax.
08:30 - Java is type it, always
must specify float,
08:33 - meaning it's a floating point number.
08:34 - So I could say 100.7,
and that sort of thing.
08:36 - So now I can run this, and we
can see I've got my ellipse.
08:41 - And I can go back to the
browser, and I can hit refresh.
08:43 - Ew, what did I do?
08:45 - I forgot to hit Save.
08:47 - So I have to hit Save,
and I can hit refresh,
08:49 - and I've got my ellipse.
08:50 - So you can see a lot
of the API is the same,
08:54 - a lot of it...
08:55 - A lot of the API is the
same, but the syntax
08:57 - of the language is different.
08:58 - Some things, you know, variables are
09:01 - the same, except for type.
09:03 - If statements are the same in both.
09:04 - If this, if this, oh, no, not this.
09:06 - If Boolean expression, else
if, else, those are the same.
09:10 - Loops, for, while are the same.
09:13 - Objects and arrays are quite different
09:16 - in both of those environments.
09:17 - And that would be beyond
the scope of what I'm doing
09:19 - in this particular video,
but I do have tutorials
09:21 - on arrays in both environments.
09:23 - You could watch those,
and sort of, and objects,
09:25 - and sort of see what the differences are.
09:26 - At some point, I could come
09:27 - and highlight that sort of stuff.
09:31 - So what I want to do,
so this is kind of like
09:33 - a basic view of how
these two environments.
09:35 - What I want to do now, is
return to the whiteboard, and...
09:41 - What I want to do is
return to the whiteboard
09:42 - and make a list of sort
of pros and cons of each,
09:45 - and talk about speed, or
performance, or features,
09:47 - and that sort of thing, and
kind of give you a sense
09:49 - of why you might choose
one versus the other.
09:51 - And then, of course, I
think it's also important
09:53 - to reference some other
programming languages
09:55 - and environments, like C++,
and perhaps openFrameworks,
09:58 - or Python, and some of
the data and number stuff.
10:01 - And machine learning kind of text,
10:04 - working with text and
natural language processing
10:06 - kind of types of things
too, and where you might
10:09 - go outside of p5 and processing, as well.
10:11 - So I'm going to head
over to the whiteboard
10:12 - and have that discussion.
10:13 - Okay, so what I want to
do now, is kind of make
10:16 - a little comparison chart
between the two environments.
10:19 - And think about kind of
pros and cons of each.
10:24 - And where you might choose
one for a certain project,
10:27 - or the other, kind of depending
on what you're trying to do.
10:30 - I would say, first of all,
primary, key thing here.
10:34 - If you are making something,
and you want to release
10:37 - that thing on the web in a browser,
10:40 - this is where p5 excels.
10:43 - p5 is a Javascript library.
10:46 - You can publish your stuff to the web,
10:49 - in the way that we publish
10:50 - anything written in Javascript to the web.
10:52 - You can integrate it with HTML,
10:56 - CSS.
10:57 - You can do DOM manipulation.
10:59 - So in other words, and in this sense,
11:01 - I'll make another note here, which is GUI.
11:04 - So for interface elements.
11:06 - If you want to have a text box,
11:08 - that people type their name in,
11:09 - to interact with your program.
11:11 - Or buttons and sliders, anything that you
11:12 - would natively have, as interface
elements in a web browser,
11:16 - you can create those, manipulate those,
11:18 - work with those using the p5.js library.
11:20 - There's actually a additional
library part of p5,
11:23 - which is p5.dom.js, that has a lot
11:25 - of this functionality in it.
11:26 - So that's really a major,
major advantage here,
11:29 - in terms of the web.
11:30 - Processing used to be
about exporting to the web
11:33 - with Java applets, but now,
processing is really desktop,
11:37 - for desktop applications,
not really for...
11:41 - You could still make a
Java applet, probably,
11:43 - but I don't know how much
good that's going to do you.
11:46 - That said, they're are interface
libraries for processing.
11:49 - Controlp5, Interfascia, there's
probably some other ones.
11:54 - But they're often limited,
in terms of how much
11:56 - you can style them, or
design them, or use them,
11:58 - and it can be awkward.
12:01 - But I will say, the
important thing is, though,
12:03 - if interface is the question,
12:05 - both of these environments
have a drawing canvas.
12:08 - You're only limited by
your imagination and time,
12:11 - in terms of what kind of
interfaces you can invent.
12:14 - But if want to prototype
a quick interface,
12:16 - and just have like a text
box, and some buttons,
12:19 - you're going to be able to do
that much more easily in p5.
12:21 - You want to invent your own
design and style of interface,
12:25 - both of these environments
will allow you to do that
12:27 - simply by drawing it to the canvas.
12:29 - So that's kind of a key thing.
12:31 - One thing I would say here now,
12:33 - but this also relates to performance.
12:36 - So speed is a big question here.
12:39 - And I would say this would go
under the processing column.
12:42 - Now, there are certainly
exceptions to this,
12:44 - your speed, how performance is always
12:47 - a complicated puzzle of
many different factors.
12:50 - What are you doing,
where's the environment,
12:51 - what's the computer?
12:52 - But in general, Java
programs, particular ones
12:56 - that are iterating over pixels,
12:57 - or drawing many particles,
those are going to run
13:01 - much faster in Java, in processing,
13:04 - than they would canvas in the browser.
13:05 - A lot of this has to do with
13:06 - the compiled versus interpreted language,
13:10 - how fast browsers are, and all
this stuff changes rapidly.
13:13 - I'm sure by the time
you're watching this video,
13:15 - in the future, from your floating
13:18 - cloud car thing, or whatever,
13:20 - that this will be complete irrelevant.
13:24 - But this is something where, certainly,
13:26 - if what you're looking for
is to eek as much speed
13:29 - out of graphics itself,
processing probably
13:32 - has a slight leg up there.
13:34 - One big exception to that, in a way,
13:36 - is anything that involves OpenGL, or 3D.
13:40 - So I'm going to say, OpenGL,
13:43 - 3D.
13:44 - Now processing has rendering
environments, rendering modes
13:48 - called P3D, or P2D, and these
make use of OpenGL rendering.
13:53 - OpenGL rendering is an engine that uses
13:56 - the power of your
computer's graphics card,
13:58 - as opposed to its regular processor stuff,
14:00 - to draw to your computer screen.
14:02 - And computers now have very fast
14:05 - and powerful graphics
cards, so you can often get,
14:07 - and you can do 3D stuff, and you often get
14:10 - a lot of additional speed of drawing
14:13 - by using these rendering modes.
14:15 - Now, there is
14:19 - something called WebGL,
which is an implementation
14:22 - of OpenGL, stands for
Open Graphics Libraries,
14:25 - for the browser.
14:26 - And there are...
14:28 - There's a wonderful library
14:30 - called three.js,
14:32 - which if you're interested in doing
14:33 - 3D stuff for the web, you
might want to explore.
14:36 - p5 has a WebGL rendering mode.
14:38 - And so, I would, you know...
14:40 - I'm sure there's subtlety
to this, but in many ways,
14:44 - you would get equivalent speeds in both
14:46 - of these environments, if
you're using OpenGL render,
14:48 - because all it does is really
depend on your graphics card.
14:51 - But the truth of the matter is,
14:52 - WebGL is one of the newer aspects of p5,
14:55 - and isn't fully implemented yet,
14:58 - as compared to P3D
rendering in processing,
15:01 - which has been around for many years,
15:02 - and has had a lot of time to develop.
15:05 - For me, I might say, if you want to do
15:08 - a complex, sophisticated,
3D rendering system,
15:12 - you're choices are, you might want to lean
15:14 - towards using processing.
15:15 - But if you wanted to be on
the Web, you might experiment
15:18 - with p5's WebGL mode, but
you also might consider,
15:21 - if you really need to dive
into more elaborate 3D,
15:24 - using something that's
had more time to develop,
15:25 - and wait for this, or come and contribute,
15:27 - to help make WebGL better.
15:29 - Of course, that you could...
15:30 - All these things are built
on top of existing systems,
15:33 - so WebGL's something you
could just do natively
15:36 - in the browser itself, if
you want to go down that road
15:38 - and learn how that works.
15:41 - Okay, I'm pausing for a minute here,
15:43 - where we can probably
edit out my thinking.
15:46 - I should go look, and probably going to...
15:47 - At a certain point, I'm want
to go look at questions,
15:49 - and I'm sure people
have specific questions.
15:51 - How you think of what would
be worth mentioning next.
16:01 - Okay, so, I'm going to keep going now.
16:04 - Related to this performance thing,
16:05 - and related to desktop versus web,
16:08 - is I might add, sort of in between here,
16:10 - is like installation based work.
16:13 - Now, I don't know what I mean by that,
16:14 - but like kiosks, or projection mapping,
16:17 - or interactive museum
exhibits, that sort of thing.
16:20 - Processing is very geared
towards that kind of work now.
16:23 - I showed you that is has
the function full screen,
16:27 - which gives you high-speed,
full screen graphics.
16:30 - You can control very
easily, which projector.
16:32 - If you're connected to
a bunch of projectors,
16:34 - spanning across them.
16:36 - Processing, because it now is
16:37 - a desktop application environment,
16:39 - has access to do all this sort of like
16:41 - high-speed, full screen kind of stuff.
16:43 - Now, of course, you can make
your browser full screen,
16:46 - and so, you can do all
this stuff in p5, as well.
16:48 - But this is, I suppose
if I'm thinking about,
16:51 - I'm making a project, and I
want it to live on the web,
16:54 - for people to experience.
16:55 - Then we've got a lot of advantages to p5.
16:57 - I'm making a project,
and I want it to live
17:00 - in a museum kiosk
environment, then you might
17:03 - have some advantages to processing.
17:05 - I should mention here,
that a lot of these,
17:07 - all the things that I'm
saying in processing,
17:09 - another environment that
you might explore sometime,
17:11 - related to this, is something
called openFrameworks.
17:15 - Can you actually see this?
17:16 - I don't know, openFrameworks.
17:17 - There's also an environment called Cinder.
17:20 - Both of these are actually
just really libraries,
17:22 - they don't have an editor
associated with them,
17:23 - though I have tutorials.
17:25 - And these are creative coding
17:26 - open source frameworks for C++.
17:29 - And so, if you're looking
to like squeeze every inch
17:33 - of speed out, you can like...
17:34 - You know, processing nowadays,
17:35 - especially if you're using P3D,
and a really fast computer,
17:38 - I think you'll probably
get a lot of comparable.
17:41 - But certainly, working in
C++, because you kind of
17:44 - have a lower level access to the computer.
17:46 - I talked about this, where
Java Virtual Machine,
17:48 - that layer limits the performance.
17:51 - You can get even more
speed, and especially
17:53 - if you're doing computer vision.
17:55 - Also, there is so many
computer vision libraries,
17:58 - that are written in C++, so
you have quick integration
18:01 - with them, and there are
a lot of great examples,
18:02 - and certainly 3D rendering,
and all this other stuff.
18:04 - A little off topic,
but I, this seemed like
18:06 - an important point to mention,
especially in the context
18:08 - of doing installation kiosk-based work.
18:11 - So another piece of this, is
integrating with hardware.
18:15 - Ah, and how about data?
18:16 - Let's talk about data first.
18:18 - Data I would put
18:20 - right between these two things,
18:22 - because both of these
environments have features,
18:25 - and functionality for working with data.
18:28 - Both of them have a
function called load table.
18:30 - I'm going to write it over here.
18:31 - Load table allows you
to load a spreadsheet,
18:34 - and work with it in
processing, to visualize,
18:37 - or crunch numbers, or do whatever.
18:38 - p5 also has that function,
18:40 - but I'm going to write
over here, loadJSON.
18:42 - So both of them have
loadJSON, a load table.
18:45 - The reason why I'm putting
load table over here,
18:47 - and loadJSON over here, is
one point that I might make,
18:50 - is let's say you have a massive data set.
18:53 - And you want to create this like
18:56 - big poster size print about
this like massive data set.
19:00 - Processing to get Java-based
desktop environment
19:02 - is probably going to have an easier time
19:04 - loading into memory, and
working with large data sets.
19:09 - p5 just running in the browser,
you're probably going to have
19:11 - a easier time with smaller data sets.
19:13 - But because it's written in
Javascript, a lot of data
19:16 - comes from APIs, and
with JSON file formats.
19:19 - That's really easy to
work with in Javascript,
19:21 - because JSON stands for
Javascript Object Notation.
19:24 - That's what Javascript
is made for. (laughs)
19:28 - This is the same syntax, so this,
19:29 - while you can loadJSON on this Java syntax
19:32 - we're working with, JSON,
is quite a bit more awkward.
19:35 - It works, so in that sense,
you could work with data.
19:37 - And certainly, since you're
on the web and in the browser,
19:40 - a lot of working with APIs.
19:42 - If you find a tutorial, for
like how to use this API,
19:45 - it's most likely going
to be geared towards
19:47 - working in a web-based
environment like Javascript.
19:50 - And so you look, and in that sense,
19:52 - there could be good reasons for working
19:54 - with certain kind of web-based data sets.
19:56 - If p5, there could be good reasons
19:58 - for parsing and crunching.
19:59 - There's a lot of
functionality and features,
20:01 - of how you can manipulate
data, in processing,
20:04 - and kind of work with larger data sets.
20:06 - So that's, I think, an important aspect.
20:08 - Another thing that I would
put here is hardware.
20:14 - Because processing is a
project that's been around
20:16 - for over 15 years now, there are so many
20:19 - third-party libraries that you can add
20:21 - through the interface that I showed you,
20:22 - to work with things like the Connect,
20:24 - or the Leap Motion, or
an Arduino, or a joystick
20:28 - or some other like brain sensor thing.
20:30 - Generally speaking, if
there's a Java interface
20:34 - towards a piece of hardware,
there's probably a way
20:36 - to do it in processing.
20:37 - And a lot of people with kind of common
20:39 - hardware interfaces have encountered this,
20:41 - and published an open
source library for it.
20:44 - The thing is, you can
also use hardware with p5.
20:48 - For example, the Leap Motion, if you go to
20:50 - the Leap Motion websites, there is,
20:52 - there's a Javascript library.
20:54 - So if you see a Javascript
library, you don't,
20:56 - and this is actually kind
of fundamental difference.
20:59 - A Java library will work with processing,
21:01 - but you might have a hard
time, unless someone's made
21:04 - a processing version of that Java library,
21:06 - it acts as a bridge.
21:09 - And there are ways around
that, of course, but that's...
21:10 - But p5, if you find a Javascript library,
21:13 - you can just plug it right in,
because you don't really need
21:15 - a separate p5 library for the Leap Motion,
21:17 - you just need the Leap
Motion Javascript library,
21:19 - that you can use in your code.
21:21 - But one tricky thing about hardware,
21:23 - is the browser has so many
security restrictions.
21:26 - So the browser can't
read, you know, read files
21:30 - on your hard drive.
21:31 - It can't just talk to your camera,
21:33 - without you giving it
permission, that sort of thing.
21:35 - Whereas, those security restrictions
21:36 - aren't there for desktop applications.
21:40 - A lot of hardware, while you can't access
21:42 - in both environments,
you'd likely need something
21:45 - to act in the middle, I'm
just going to write node here.
21:48 - And there is a project called
21:50 - p5.serial, which is a node
server that you can run
21:53 - to get serial communication
from an Arduino to a p5.
21:56 - Whereas, a lot of that stuff you can do
21:58 - just more natively,
right here in processing.
22:00 - If I go in below...
22:02 - I'm at the bottom of what you can see.
22:03 - Okay, so that, I think,
22:05 - is an important aspect of this, as well.
22:09 - I'm sure I missed a whole
bunch of things here,
22:11 - this is just kind of what came
22:12 - from the top of my head right now.
22:14 - So I'm going to go and
check the live chat.
22:15 - If you're watching this
as an archived video,
22:17 - there's no live chat.
22:18 - But I'm going to see if there's
some questions about it,
22:20 - and I'll answer some of
those, to sort of wrap up,
22:22 - or fill in some of the gaps
that I've got going here.
22:23 - Alright?
22:24 - Thanks, very much.
22:26 - (upbeat music)
22:28 - (upbeat music)
22:30 - (upbeat music)
22:32 - (upbeat music)

Cleaned transcript:

(train whistle blowing) Okay, this is the second part of my What is the Difference Between p5.JS and Processing. And in this particular second part, I'm actually just going to open up processing and p5 themselves, and look how writing code in both of them, and what are some actual differences syntax wise, or feature wise between the two, okay? And I'll see you at the end of this video. There'll be a third part also, where I'm going to make a list of pros and cons. If you missed the first part, you can also find in the description, a link to the first part, where I kind of do a macro view of the bigger picture of these two environments. Alright, see you in a bit, I guess, because I'm just here, me talking, camera, video thing. Okay, so I'm back here, on the two websites. If you're looking at p5 and processing, p5's at p5js.org, here's the website here. You can download the library files, and find some information about how to get started with an editor, on this website. And I'll talk a bit about that, once I open a editor. Processing.org, this is the processing website, and you can go here to download, to download the actual processing software editor environment for Mac, PC, that sort of thing. So I've already done that, and I have both of those things here. If you have trouble with that, you can write something in the comments, and hopefully, I or somebody else following the comments, can jump in and help. Also, by the way, actually, if you really have technical questions about processing and p5, I would suggest you go and ask them at forum.processing.org. So these two comments are a nice place to give feedback, and for me to hear from you, but it's not the best place to discuss code or ask technical questions. The forum is really the best place for that, and you can always tweet me a link to a post on the forum, and I'll be able to follow it, and chime in there, as well. Okay, so I'm going to minimize the browser here. Here I have, I want to say, I have both environments going, but this is actually the processing software, the desktop editor itself, which is open. It's got a little window, where I can draw my, where I can write my code. It's got the run button up here, it's got a stop button. It's got some stuff about modes, because something I can do, is I can actually switch to Python, I can actually do p5.js in the processing editor, as well, with the p5.js mode. These modes won't necessarily be there for you by default, you'll need to go to this add mode, which opens something called the contribution manager, so which you can add libraries, and modes, and tools, and examples, and that sort of thing. So this is actually a new interface, for what's really nice about having a desktop editor, is adding libraries, or finding examples. All of this can be done through the interface itself. With p5, the way that I'm going to show you p5 right here, is this is just an editor called Adam. Adam is made by GetHub, it's open source, it's free. It let's you type your code, there packages you can install, to like see your code automatically in the browser, or syntax highlighted in a different way, or have like special keyboard commands. But any text editor, I might suggest looking at Sublime, or Brackets, or CodePen, which is an online web editor. At some point, if people are interested, I can make different videos of different editors, to see how different people have those things setup. That's the primary difference that, and just sort of working in these environments is processing. My suggestion is you just download it and use it. With p5, you want to find an editor that you like, or that a friend uses, that they recommend to you, and work with it that way. And there's suggestions and information about that also, in the p5.js website. And you cans see, that I just have all the files associated with this sketch right here. There's my Javascript file, this is where I type the code. There's an HTML file, where I can add HTML. And if you do my sort of foundations of programming in p5 videos, I go through what all those different files do. And then, libraries that I might want to add. These are the p5 libraries, which is Javascript files. If I want to add other libraries, I've got to manually download them, add them to this folder, or refer to them. Libraries can also refer to them, that are on a web service somewhere through a URL. There's lots of different ways of doing it, beyond the scope of what I'm doing in this video. On my processing, we kind of have everything all in one here. Now, the other difference is, what happens when you quote/unquote run your code? So both of these are a simple sketch. Both processing and p5 are built with this concept of setup and draw, for an animation program. Setup happens once, to kind of setup your program, initialize variables, everything to start with. Draw loops, it's an animation loop, because most sketches and programs that you might want to write, you want in animation. And of course, you can stop the animation, start the animation, have no animation, do all sorts of different other things, but that's the sort of core functionality. So if I run a processing sketch, you'll see I get a window. So processing sketches are desktop applications. And actually, I can go up here File, Export Application. And if I go to Export Application, what you're going to see, is I can actually make a doubleclickable application, that I could release or send, for Windows, Mac, Linux. I could make it full screen, I could, and beneath Java, to run. So here on Mac, like if somebody doesn't, you can actually embed Java. And there's some goofiness with Apple, and I don't want to get into this. It's definitely an issue with new operating systems, that Apple doesn't want you to use applications that aren't like signed, and delivered, and deemed worthy of their operating system, so to speak. That can be a little bit tricky, but absolutely does work. p5, this is just stuff that is web files. So you could put in on a web server, if you have a web server account, you can have it on your computer, and open it up through the browser. And typically what I do, is I run a local server, and I'm doing that through Terminal, and I have other videos that kind of walk through the steps of that. And then, if I want to see the result of my code, I just go to the browser, and I have it here. And you can see here, I'm running a little web server, which then I can view the result of that web server at an address called localhost. And my sketch is called QA underscore p5, and 8000 refers to the port. And so, at some point, this is kind of like seeing how it works, and developing. And then I might, upload my code, and the URL would no longer say local host, because my codes not on this laptop, but might be on my server shiffman.net. So that's a core difference. The p5.js is going to run your code, and you're going to see the results in the browser. Processing, it's going to launch as a desktop application. There are some things that actually make them quite different then, because for example, I'm going to put full screen, and setup. And I'm going to say background, frameCount, modulers, oh, no, I'm not going to write any crazy code. I'm just going to say background 100, come zero, come 200. And if I run this, processing now knows how to make a full screen window automatically, whatever my resolution is, and it's got this like purple color. So because if you're in a desktop environment, it's a little easier, I could say full screen, and I could actually give it a number, which is if I'm connected to a projector, it would go straight to that projector, and that sort of thing. But the main function you write in processing, typically, is size, which would make a window of 600 by 400. And when I run, that's what I've got here. In p5, I'm actually going to say createCanvas, there's subtle differences, the same concept, 600 by 400. And then I can take this background code, and I can put it in here, and that's identical, and I can now go and hit refresh, and we can see I have my, oops, shoot! I had the font bigger here, but I didn't want it bigger there. I could say... And this, by the way, over here, is a Javascript console. That's available probably under View, Developer, Javascript Console. So this is something I use a lot for debugging, to see error messages. That's something that you might want to figure out how you get a console, to see error messages as part of your workflow, as well. But I'm just using the Chrome one, because it works pretty well. Yeah, okay. So you can see that, is this is the same exact code, but in two different environments. Let's highlight some other key differences. Java syntax, void. Functions, Java is a typed language, meaning, if a function, if it say, void means it doesn't return anything. If it's going to return a number, I have to say what kind of thing. In Javascript, I just only ever say function. The same thing if I want to add a variable. Float X equals 100. Float Y equals 100. And then I might use the ellipse function, ellipse X comma Y, 60 comma 60. Right? If I want to add that code, over here. Var X equals 100. Var Y equals 100. Add that here. So you could see, very, very similar, but because here, I'm writing in Javascript. So I adopt Javascript syntax. Over here, I'm writing in Java, so I adopt Java syntax. Java is type it, always must specify float, meaning it's a floating point number. So I could say 100.7, and that sort of thing. So now I can run this, and we can see I've got my ellipse. And I can go back to the browser, and I can hit refresh. Ew, what did I do? I forgot to hit Save. So I have to hit Save, and I can hit refresh, and I've got my ellipse. So you can see a lot of the API is the same, a lot of it... A lot of the API is the same, but the syntax of the language is different. Some things, you know, variables are the same, except for type. If statements are the same in both. If this, if this, oh, no, not this. If Boolean expression, else if, else, those are the same. Loops, for, while are the same. Objects and arrays are quite different in both of those environments. And that would be beyond the scope of what I'm doing in this particular video, but I do have tutorials on arrays in both environments. You could watch those, and sort of, and objects, and sort of see what the differences are. At some point, I could come and highlight that sort of stuff. So what I want to do, so this is kind of like a basic view of how these two environments. What I want to do now, is return to the whiteboard, and... What I want to do is return to the whiteboard and make a list of sort of pros and cons of each, and talk about speed, or performance, or features, and that sort of thing, and kind of give you a sense of why you might choose one versus the other. And then, of course, I think it's also important to reference some other programming languages and environments, like C++, and perhaps openFrameworks, or Python, and some of the data and number stuff. And machine learning kind of text, working with text and natural language processing kind of types of things too, and where you might go outside of p5 and processing, as well. So I'm going to head over to the whiteboard and have that discussion. Okay, so what I want to do now, is kind of make a little comparison chart between the two environments. And think about kind of pros and cons of each. And where you might choose one for a certain project, or the other, kind of depending on what you're trying to do. I would say, first of all, primary, key thing here. If you are making something, and you want to release that thing on the web in a browser, this is where p5 excels. p5 is a Javascript library. You can publish your stuff to the web, in the way that we publish anything written in Javascript to the web. You can integrate it with HTML, CSS. You can do DOM manipulation. So in other words, and in this sense, I'll make another note here, which is GUI. So for interface elements. If you want to have a text box, that people type their name in, to interact with your program. Or buttons and sliders, anything that you would natively have, as interface elements in a web browser, you can create those, manipulate those, work with those using the p5.js library. There's actually a additional library part of p5, which is p5.dom.js, that has a lot of this functionality in it. So that's really a major, major advantage here, in terms of the web. Processing used to be about exporting to the web with Java applets, but now, processing is really desktop, for desktop applications, not really for... You could still make a Java applet, probably, but I don't know how much good that's going to do you. That said, they're are interface libraries for processing. Controlp5, Interfascia, there's probably some other ones. But they're often limited, in terms of how much you can style them, or design them, or use them, and it can be awkward. But I will say, the important thing is, though, if interface is the question, both of these environments have a drawing canvas. You're only limited by your imagination and time, in terms of what kind of interfaces you can invent. But if want to prototype a quick interface, and just have like a text box, and some buttons, you're going to be able to do that much more easily in p5. You want to invent your own design and style of interface, both of these environments will allow you to do that simply by drawing it to the canvas. So that's kind of a key thing. One thing I would say here now, but this also relates to performance. So speed is a big question here. And I would say this would go under the processing column. Now, there are certainly exceptions to this, your speed, how performance is always a complicated puzzle of many different factors. What are you doing, where's the environment, what's the computer? But in general, Java programs, particular ones that are iterating over pixels, or drawing many particles, those are going to run much faster in Java, in processing, than they would canvas in the browser. A lot of this has to do with the compiled versus interpreted language, how fast browsers are, and all this stuff changes rapidly. I'm sure by the time you're watching this video, in the future, from your floating cloud car thing, or whatever, that this will be complete irrelevant. But this is something where, certainly, if what you're looking for is to eek as much speed out of graphics itself, processing probably has a slight leg up there. One big exception to that, in a way, is anything that involves OpenGL, or 3D. So I'm going to say, OpenGL, 3D. Now processing has rendering environments, rendering modes called P3D, or P2D, and these make use of OpenGL rendering. OpenGL rendering is an engine that uses the power of your computer's graphics card, as opposed to its regular processor stuff, to draw to your computer screen. And computers now have very fast and powerful graphics cards, so you can often get, and you can do 3D stuff, and you often get a lot of additional speed of drawing by using these rendering modes. Now, there is something called WebGL, which is an implementation of OpenGL, stands for Open Graphics Libraries, for the browser. And there are... There's a wonderful library called three.js, which if you're interested in doing 3D stuff for the web, you might want to explore. p5 has a WebGL rendering mode. And so, I would, you know... I'm sure there's subtlety to this, but in many ways, you would get equivalent speeds in both of these environments, if you're using OpenGL render, because all it does is really depend on your graphics card. But the truth of the matter is, WebGL is one of the newer aspects of p5, and isn't fully implemented yet, as compared to P3D rendering in processing, which has been around for many years, and has had a lot of time to develop. For me, I might say, if you want to do a complex, sophisticated, 3D rendering system, you're choices are, you might want to lean towards using processing. But if you wanted to be on the Web, you might experiment with p5's WebGL mode, but you also might consider, if you really need to dive into more elaborate 3D, using something that's had more time to develop, and wait for this, or come and contribute, to help make WebGL better. Of course, that you could... All these things are built on top of existing systems, so WebGL's something you could just do natively in the browser itself, if you want to go down that road and learn how that works. Okay, I'm pausing for a minute here, where we can probably edit out my thinking. I should go look, and probably going to... At a certain point, I'm want to go look at questions, and I'm sure people have specific questions. How you think of what would be worth mentioning next. Okay, so, I'm going to keep going now. Related to this performance thing, and related to desktop versus web, is I might add, sort of in between here, is like installation based work. Now, I don't know what I mean by that, but like kiosks, or projection mapping, or interactive museum exhibits, that sort of thing. Processing is very geared towards that kind of work now. I showed you that is has the function full screen, which gives you highspeed, full screen graphics. You can control very easily, which projector. If you're connected to a bunch of projectors, spanning across them. Processing, because it now is a desktop application environment, has access to do all this sort of like highspeed, full screen kind of stuff. Now, of course, you can make your browser full screen, and so, you can do all this stuff in p5, as well. But this is, I suppose if I'm thinking about, I'm making a project, and I want it to live on the web, for people to experience. Then we've got a lot of advantages to p5. I'm making a project, and I want it to live in a museum kiosk environment, then you might have some advantages to processing. I should mention here, that a lot of these, all the things that I'm saying in processing, another environment that you might explore sometime, related to this, is something called openFrameworks. Can you actually see this? I don't know, openFrameworks. There's also an environment called Cinder. Both of these are actually just really libraries, they don't have an editor associated with them, though I have tutorials. And these are creative coding open source frameworks for C++. And so, if you're looking to like squeeze every inch of speed out, you can like... You know, processing nowadays, especially if you're using P3D, and a really fast computer, I think you'll probably get a lot of comparable. But certainly, working in C++, because you kind of have a lower level access to the computer. I talked about this, where Java Virtual Machine, that layer limits the performance. You can get even more speed, and especially if you're doing computer vision. Also, there is so many computer vision libraries, that are written in C++, so you have quick integration with them, and there are a lot of great examples, and certainly 3D rendering, and all this other stuff. A little off topic, but I, this seemed like an important point to mention, especially in the context of doing installation kioskbased work. So another piece of this, is integrating with hardware. Ah, and how about data? Let's talk about data first. Data I would put right between these two things, because both of these environments have features, and functionality for working with data. Both of them have a function called load table. I'm going to write it over here. Load table allows you to load a spreadsheet, and work with it in processing, to visualize, or crunch numbers, or do whatever. p5 also has that function, but I'm going to write over here, loadJSON. So both of them have loadJSON, a load table. The reason why I'm putting load table over here, and loadJSON over here, is one point that I might make, is let's say you have a massive data set. And you want to create this like big poster size print about this like massive data set. Processing to get Javabased desktop environment is probably going to have an easier time loading into memory, and working with large data sets. p5 just running in the browser, you're probably going to have a easier time with smaller data sets. But because it's written in Javascript, a lot of data comes from APIs, and with JSON file formats. That's really easy to work with in Javascript, because JSON stands for Javascript Object Notation. That's what Javascript is made for. (laughs) This is the same syntax, so this, while you can loadJSON on this Java syntax we're working with, JSON, is quite a bit more awkward. It works, so in that sense, you could work with data. And certainly, since you're on the web and in the browser, a lot of working with APIs. If you find a tutorial, for like how to use this API, it's most likely going to be geared towards working in a webbased environment like Javascript. And so you look, and in that sense, there could be good reasons for working with certain kind of webbased data sets. If p5, there could be good reasons for parsing and crunching. There's a lot of functionality and features, of how you can manipulate data, in processing, and kind of work with larger data sets. So that's, I think, an important aspect. Another thing that I would put here is hardware. Because processing is a project that's been around for over 15 years now, there are so many thirdparty libraries that you can add through the interface that I showed you, to work with things like the Connect, or the Leap Motion, or an Arduino, or a joystick or some other like brain sensor thing. Generally speaking, if there's a Java interface towards a piece of hardware, there's probably a way to do it in processing. And a lot of people with kind of common hardware interfaces have encountered this, and published an open source library for it. The thing is, you can also use hardware with p5. For example, the Leap Motion, if you go to the Leap Motion websites, there is, there's a Javascript library. So if you see a Javascript library, you don't, and this is actually kind of fundamental difference. A Java library will work with processing, but you might have a hard time, unless someone's made a processing version of that Java library, it acts as a bridge. And there are ways around that, of course, but that's... But p5, if you find a Javascript library, you can just plug it right in, because you don't really need a separate p5 library for the Leap Motion, you just need the Leap Motion Javascript library, that you can use in your code. But one tricky thing about hardware, is the browser has so many security restrictions. So the browser can't read, you know, read files on your hard drive. It can't just talk to your camera, without you giving it permission, that sort of thing. Whereas, those security restrictions aren't there for desktop applications. A lot of hardware, while you can't access in both environments, you'd likely need something to act in the middle, I'm just going to write node here. And there is a project called p5.serial, which is a node server that you can run to get serial communication from an Arduino to a p5. Whereas, a lot of that stuff you can do just more natively, right here in processing. If I go in below... I'm at the bottom of what you can see. Okay, so that, I think, is an important aspect of this, as well. I'm sure I missed a whole bunch of things here, this is just kind of what came from the top of my head right now. So I'm going to go and check the live chat. If you're watching this as an archived video, there's no live chat. But I'm going to see if there's some questions about it, and I'll answer some of those, to sort of wrap up, or fill in some of the gaps that I've got going here. Alright? Thanks, very much. (upbeat music) (upbeat music) (upbeat music) (upbeat music)
