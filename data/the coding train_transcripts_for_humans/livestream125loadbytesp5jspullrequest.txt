With timestamps:

00:01 - hello surprise confetti balloons it's me
00:07 - your internet coding host Daniel
00:13 - Schiffman and Here I am on a special I
00:17 - don't know what day is it Monday evening
00:19 - it's been a long day at work and I have
00:21 - to leave to go home soon that's what I
00:22 - do at the end of a long day at work but
00:27 - I was working on some stuff and I was
00:28 - thinking oh my to-do list forever never
00:30 - never has been this thing I got to get
00:33 - to this I got to get to this I got to
00:34 - get to this load bytes p5.js here we go
00:40 - look
00:41 - issue number 2674 implementation of load
00:46 - bytes assigned to someone named chief
00:51 - bond and I keep thinking oh I'm gonna do
00:54 - that I was just thinking I'm gonna do
00:55 - this before I leave I'm gonna make this
00:57 - pull request and then I thought why not
01:00 - I'm kind of making this up because last
01:02 - week I decided I should do this a live
01:04 - stream so this whole story is fun but I
01:07 - so but but if I go back to my fictional
01:09 - story that I've developed in my mind I
01:11 - thought you know why not just go
01:13 - upstairs the whole point of having this
01:14 - recording studio in the same building
01:16 - where I spend most of our time working
01:18 - is to go upstairs and turn on the lights
01:20 - and turn on the cameras and pull
01:22 - requests with with with my friends the
01:25 - internet people hello
01:29 - so so today's gonna be short live stream
01:33 - I will mention and talk about what I
01:35 - guess I can turn this music off here I
01:38 - will mention and talk about my future
01:42 - plans for this week which by the way
01:44 - it's spoil alert live stream coming this
01:46 - Wednesday morning my time Eastern Time
01:49 - probably around 10:30 a.m. Eastern
01:51 - Daylight Time for pi day special' Pi Day
01:54 - themed livestream on Wednesday this week
01:57 - no live stream on Friday so I will I
02:00 - need to I don't know put stuff about
02:03 - that in places that people can find it
02:05 - but that's my plan so read the comments
02:08 - and say hi to us I am reading the
02:10 - comments and I am saying hello to you
02:16 - that's how I like to say hello I think I
02:19 - pulled some sort of muscle in my neck
02:21 - while saying hello just then all right
02:28 - so here's the thing I mean I don't know
02:34 - what the thing is let's so let me first
02:39 - get let me get set up here for a second
02:42 - here I put the music back on
02:54 - okay I'm going what I'm doing right now
02:56 - is I am going to this example for doodle
03:03 - classification so this this came about
03:07 - because I did an example a
03:10 - machine-learning example about
03:11 - classifying drawings from the Google
03:13 - quick-draw dataset and I needed to use
03:15 - load bytes to load the data for those
03:17 - drawings but load bytes hasn't been
03:18 - implemented yet in p5 so I wrote a
03:20 - little load bytes function I put it in a
03:22 - JavaScript file called load binary so
03:25 - I'm gonna I'm gonna whatever what I'm
03:27 - gonna do right now is I'm actually gonna
03:29 - grab this doodle classification I'm
03:32 - gonna paste it to the desktop I'm gonna
03:35 - oh I want to get rid of there's a git
03:36 - folder in there why don't I uh-oh
03:41 - computers
03:43 - put this back on
03:50 - well this do it No Oh is there no get
03:55 - folder in there oh there's no keep focus
03:56 - it's a subfolder by the way any of you
04:00 - ever use subversion do you remember the
04:02 - days of using subversion where you had a
04:04 - repository for version control and every
04:07 - single subfolder had its own dot SVN
04:10 - file so if you move stuff around
04:11 - everything would break and go crazy oh
04:13 - that was a disaster I term is coming
04:18 - it's you know I get to stuff eventually
04:20 - I really do it just as it takes to build
04:22 - up his intense although III I plan to do
04:25 - more tutorials about open source
04:27 - software development one of which is
04:29 - this one I probably should really be
04:32 - using I term today but it's just not
04:33 - gonna happen
04:36 - yeah what kind of preppie Oh peppy
04:39 - pretty I thought so many of the chat so
04:41 - they looked preppy I just can't see cuz
04:43 - my older my eyesight is terrible it's a
04:45 - pretty pretty wound up alright I am by
04:48 - the way very pretty also thank you very
04:50 - much for saying so I agree with your
04:52 - assessment of my beautiful appearance
04:55 - anyway that sound that came off not the
04:59 - way that I intended alright so what I
05:02 - want to do here is get rid of lot and
05:11 - oops nope
05:17 - nope I want to get rid of train test
05:20 - data prep and no I don't want to get rid
05:23 - of data and the readme okay so this is
05:26 - just going to be load binary load bytes
05:35 - cuz I need to have a working version
05:40 - what's the chance I need to have a
05:48 - working version of this code before I
05:51 - attempt to do any kind of pull request
06:03 - [Music]
06:11 - [Music]
06:18 - you guys tired of this song yet
06:20 - seriously I love this music but I really
06:24 - need a wide selection of music if anyone
06:26 - watching as a musician a sound designer
06:30 - please help me somebody save me from
06:33 - myself
06:36 - [Music]
06:43 - just getting myself ready here
06:50 - [Music]
07:05 - [Music]
07:42 - [Music]
07:58 - alright now I have a question and while
08:06 - you're there the correct documentation
08:08 - markup so it shows up in the dock Jan
08:10 - yes I definitely want to do that
08:13 - I'm going to include some unit tests I I
08:19 - don't think that I am only because I
08:22 - don't know how I would write them are
08:24 - there unit tests for like load JSON and
08:27 - the other data loading files I would if
08:29 - there's a model I could do the other
08:31 - thing I'm not so sure about is I guess
08:35 - it's good for p5 to give you the only
08:38 - way I know how to do it is to give you
08:39 - this object with bytes and this stuff in
08:42 - it but you know the pull request can be
08:44 - adjusted the pull request can be
08:47 - adjusted I just don't know if you know
08:49 - should load bytes actually I mean in
08:51 - theory it might be nice another way that
08:53 - I could do this oh I have well first
08:57 - hold on let me let me keep going with
09:00 - what I'm doing here because one thing I
09:01 - need to do is in this discussion here it
09:05 - was suggested by further down here by
09:13 - contributor Lindsay why Kenneth saying
09:17 - using HG to be do is more consistent
09:19 - with the rest of the loading coding base
09:22 - also makes any future development based
09:24 - on a promise easier however I don't
09:26 - think it's a must at this point more of
09:28 - a nice to have so I think I want to
09:30 - rewrite this function really quickly to
09:34 - work with HTTP do so and hey Lauren
09:45 - McCarthy just commented might have to
09:48 - lock this unfortunately because the see
09:50 - if hopefully people aren't out
09:53 - okay so here is an HTTP do
09:57 - implementation and so this is Oh was
10:06 - there already a pull request with this
10:08 - in it oh well now I feel silly shouldn't
10:12 - we just be taking sponge man's pull
10:14 - request look it has an example well
10:18 - though I'm not sure I would use load
10:20 - bytes with an XML file load bytes data
10:26 - to string that's interesting I wonder if
10:30 - I feel like silly like I shouldn't be
10:32 - doing this now because so what's going
10:38 - on with this pull request oh oh this
10:45 - hasn't actually been pull requested yet
10:48 - so this is something I didn't know okay
10:51 - this hasn't been pull requested yet so I
10:57 - think it's okay for me to go ahead
11:00 - so what I'll I'll do I want to make sure
11:02 - I give credit in the pull request to
11:05 - sponge man here so what I'm looking for
11:11 - there's a lot of extra stuff in here
11:12 - that I don't have any plans okay I just
11:16 - want to look for the HTTP do yeah let's
11:19 - grab this so let's try using this file
11:28 - callback error callback I probably
11:30 - should have that as well file callback
11:34 - error callback this is not the code yet
11:39 - really it's me testing oh what's this
11:48 - weird plus
11:51 - it doesn't have a oh I'll just delete
11:55 - these I'm I'm gonna delete all I didn't
11:59 - realize I was gonna copy/paste all these
12:01 - silly pluses in unit test for load
12:04 - functions are in alright I think what
12:08 - I'll do is say the pull request doesn't
12:10 - at present contain a pull request
12:15 - so this is calling HTTP do it's passing
12:19 - the file a get request with array buffer
12:21 - I call this data I said so data dot
12:26 - bytes is going to be a new you int eight
12:28 - array with a ray buffer it's gonna if
12:31 - there's a callback it's gonna call that
12:32 - back otherwise it's gonna do this stuff
12:34 - it needs to do for preload and if it
12:37 - gets all the way down here this doesn't
12:39 - seem right
12:40 - like there should be where would the oh
12:45 - no yes hdtb to do will call the error
12:49 - callback that is correct so I should be
12:51 - able to take this out and let's see oh
12:54 - it doesn't at present oh so I do need to
12:58 - do more life is always so much more
13:03 - complicated than you think it's going to
13:05 - be I'm like up you're like I've already
13:07 - done this I just need to quickly come up
13:09 - here and do the pull request
13:11 - well I'm three weeks not realizing I
13:13 - have all this other stuff to do alright
13:15 - that's fine we're gonna accomplish this
13:21 - let's look at let's look at okay oh I
13:28 - see so this is allowing for Pat a path
13:38 - to be a string that's but that's fine
13:41 - oh I just need to add array buffer there
13:47 - okay so I'm gonna need to a rat at a
13:49 - rate offer and
13:51 - [Music]
13:58 - then then Oh use the fetch Oh
14:03 - oh boy alright wait let's accomplish
14:09 - this thank you Thank You Austin for the
14:15 - function signature in the chat all right
14:17 - I can a can I can accomplish this
14:20 - especially with your help you over there
14:22 - you over there you over here everybody
14:24 - will help me right
14:25 - alright so what I'm gonna do actually is
14:28 - I'm going to comment this out so I'm
14:34 - gonna leave this HTTP do comment it here
14:38 - because first I want to get it to work
14:40 - with this and I will come back to this
14:46 - and I'm gonna reference I need this to
14:48 - be in the comments I'm just gonna put
14:50 - this up here okay this by the way is
15:05 - probably not gonna go very well and it's
15:07 - fine I'm gonna try this I'm gonna give
15:09 - myself an hour and something will happen
15:13 - and then this will finish and then
15:16 - something else will happen I have a few
15:23 - things I want to make sure I reference
15:27 - so I have this I have this and I have
15:33 - this and I want to get to started
15:42 - overview reference learn get involved
15:44 - development wiki okay let me get to here
15:46 - and I want this basically and then I
15:51 - also want this okay
15:59 - all right just look at a different
16:02 - loading function like lay low JSON and
16:04 - make the code look like that but to load
16:06 - binary okay what could possibly go wrong
16:12 - oh you know what this laptop is not
16:16 - plugged in I need the power I need the
16:25 - power of open-source software
16:28 - development where is that plug Oh
16:31 - has someone taken my power no no here it
16:34 - is here it is your this everything's ok
16:46 - okay
17:02 - hmm so I mean I suppose I could just
17:10 - submit the pull request without HTTP do
17:13 - maybe I should do that and like we could
17:16 - mark it as a I could file an issue to
17:20 - like update it for HTTP to later maybe I
17:22 - should do that I think I should do that
17:25 - the pull request could also just be
17:26 - cancelled and not merged I'm doing this
17:28 - for educational purposes all right I'm
17:32 - you know based on what me I am so me in
17:34 - the I trust dearly is saying I think
17:38 - that I'm like I'm gonna run into trouble
17:40 - so I'm going to do it without HTTP do at
17:45 - first all right okay all right let's
17:52 - everybody do some deep breathing let's
17:54 - read a few random numbers because when
17:57 - I'm feeling uneasy about something and
18:00 - like it's going to go wrong the thing
18:02 - that makes me feel better and calms me
18:03 - down I need some nice quiet music and I
18:08 - think the lullaby is just no good
18:10 - anymore
18:11 - I think I'll just read I'll just hear
18:14 - I'll just read the numbers I'm just
18:15 - gonna read the numbers
18:23 - seventy one thousand six hundred and
18:26 - ninety five fifty six thousand eight
18:28 - hundred and seventeen thirty three
18:30 - thousand not 742 you know let me should
18:33 - read them this way six one nine eight
18:35 - one two seven four six four zero two
18:39 - four six eight four six nine eight seven
18:41 - sixty five zero seven nine on them
18:44 - totally gone off my rocker at I'm
18:45 - reading this thirty two thousand eight
18:47 - hundred fifty nine seventy two six
18:49 - thousand eight hundred forty eight okay
18:51 - I think we're good I think we're good
18:56 - this needs to be up like this a little
19:00 - bit all right now I need is a fully I
19:08 - had a train whistle coming soon someday
19:14 - I'm gonna figure out how to make coded
19:16 - train branded train whistles hello
19:20 - welcome to a special video that's part
19:23 - of my whole set of videos and things
19:25 - about contributing to open source so in
19:27 - this video I'm gonna attempt to do
19:29 - something that's not very visible
19:30 - because I'm Adam doing I'm doing this
19:32 - and this is also a live stream that's
19:34 - going on right now even though you might
19:35 - be watching this recorded I am going to
19:38 - attempt to make a pull request to this
19:40 - project called p5.js now you don't know
19:42 - a lot about p5.js
19:44 - I mean if you watch any of my videos you
19:45 - probably know something about it but I
19:46 - encourage you to check out processing
19:48 - foundation.org p5 GS dot org all those
19:51 - links are in this video's description I
19:55 - little while back was creating a doodle
19:57 - classifier example based on the
19:59 - quick-draw dataset and while I was doing
20:01 - that I needed a function called load
20:03 - bytes now if I go to github p5.js and I
20:11 - search this repository for a function
20:13 - called load bytes which the idea of this
20:15 - function is a function that I can call
20:17 - just like load JSON or load strings or
20:20 - load XML or load image but what I want
20:23 - or just the raw bytes from a file a
20:25 - digital file if I search for this you're
20:28 - gonna find
20:28 - oh there's nowhere in the code it's
20:30 - nowhere in the commits but there are a
20:32 - couple issues about it one of which is
20:34 - here under finish file IO
20:37 - implementation this is from 2013 right
20:40 - it wasn't finished and one is from me 12
20:43 - days ago implementation of load bytes
20:45 - because I filed this issue describing
20:48 - exactly what I'm talking about right now
20:50 - and published some code that
20:51 - accomplished it now here's the thing in
20:54 - the discussion here there's some nice
20:56 - discussion here
20:59 - Linsey why kenneth commented saying that
21:02 - using HTTP do which is a function that's
21:05 - part of the p5 library would be more
21:07 - consistent with the rest of the loading
21:09 - code it's a nice to have I'm going to
21:11 - submit this pull request without doing
21:14 - that just with using my code that uses
21:16 - the native JavaScript XML HTTP request
21:20 - should a lot of that using the native
21:27 - JavaScript HTTP request because I don't
21:32 - want to because using HTTP do is going
21:35 - to require adding and rewriting the HTTP
21:37 - do function as well and I want to kind
21:39 - of keep the scope of this particular
21:40 - video small now it might be that later
21:45 - it might be that this pull request
21:47 - doesn't actually get merged into the
21:48 - project or irie submit I did a different
21:50 - way but let's just sort of see if we can
21:52 - at least make it happen using this code
21:54 - that I have that load bytes and the
21:56 - other point of this I want you to be
21:57 - able to watch this and not really care
22:00 - about what it means to load bytes and
22:02 - how this implementation works just to
22:04 - see the process of adding some new code
22:06 - to kind of a large open source project
22:08 - that is all sorts of dependencies and
22:10 - build settings and things let's see if I
22:12 - can figure that stuff out while doing
22:14 - this in theory I should know how to do
22:15 - this but even if I do know how I'm
22:17 - probably going to get tripped up and
22:18 - have all sorts of problems
22:19 - I can tell it's gonna happen so let me
22:22 - say a couple things first number one is
22:24 - this this wiki is going to be really
22:26 - important this is on the p5.js wiki
22:28 - under slash development this is going to
22:31 - have some instructions that I'm going to
22:32 - need to follow to how to build the p5.js
22:35 - project which I'm going to need to do to
22:36 - test the new code that I want to
22:38 - implement and then also I would highly
22:41 - recommend you check out this video
22:43 - series from Luisa Pereira where she
22:46 - created a video series called looking
22:48 - inside p5 I believe there's a
22:50 - Spanish language and English language
22:52 - and these videos go through in great
22:54 - detail
22:55 - with beautiful animation of drawings and
22:57 - animations how the p5 library is
23:00 - structured and built so that will give
23:02 - you an excellent background to what I am
23:04 - going to about to attempt to do okay so
23:09 - what is the first thing that I need to
23:10 - do so what I'm actually going to do is
23:13 - I'm gonna go right here to p5.js and I'm
23:17 - gonna go over here to clone so what I'm
23:19 - gonna do is I'm gonna start fresh
23:21 - I certainly have on my computer the p5
23:23 - just repository already I work with it I
23:25 - probably have different branches and
23:27 - forks ah you're on the no I'm not gonna
23:29 - clone it I am first gonna hit fork so
23:32 - what I want to do is work in my own fork
23:34 - so I'm gonna hit fork and I want to fork
23:38 - this oh look at this
23:39 - let's fork this to the coding train and
23:43 - I'm gonna fork this with a coding train
23:45 - it's gonna take a little bit of time oh
23:47 - it already finished okay so now what I'm
23:53 - gonna do is I'm gonna clone and this is
23:54 - good because even if this goes totally
23:56 - haywire maybe I don't want to actually
24:00 - submit what I do here to the actual
24:03 - p5.js project I just want this to be a
24:05 - little sandbox playground for me to
24:06 - learn about open source so here we go
24:08 - I'm going to grab this now I am going to
24:11 - clone from this particular URL I'm using
24:14 - git at github calm because I have
24:17 - already done this crazy SSH key
24:19 - passphrase thing which I would be happy
24:21 - to show in another video if you haven't
24:22 - done that step you might want to clone
24:24 - just using this the HTTP URL so I'm
24:27 - gonna do this I'm gonna hit copy and
24:30 - then I'm gonna go to my terminal where I
24:32 - am a weirdo who actually just uses the
24:36 - plain Mac terminal with no extra
24:38 - settings I aspire to do better I will do
24:41 - better someday and I'm gonna say git
24:43 - clone wait I first got to see where I am
24:45 - sure I'm gonna go to the desktop I'm
24:47 - just gonna put this on the desktop and
24:49 - now I'm gonna say git clone that so this
24:53 - is step one step one is clone the
24:56 - repository
25:00 - oh it's already done okay great now I
25:04 - have clone the repository step 2 deep
25:07 - breath step 3
25:11 - change directory into the repository and
25:14 - then I'm going to open up all the code
25:18 - in a cook text editor and I'm gonna use
25:21 - the atom editor for that I have my
25:22 - computer configured in such a way that I
25:24 - can type atom dot and it opens a de moda
25:26 - matically and so now you can see I have
25:28 - the entire p5.js project here so first
25:32 - what I want to do is can I even just
25:34 - build p5 the way that it is without
25:37 - making any changes to it okay I don't
25:39 - want to make any change I don't want to
25:40 - worry about my pull request and all that
25:41 - stuff should want to see if I can build
25:43 - it so I'm gonna go back now to this
25:46 - particular and oh I did this first step
25:49 - right fork and clone right fork and
25:51 - clone for Kent clone I did that now I'm
25:54 - gonna I did see the npm install so npm
25:57 - node package manager install is a
25:59 - command that's gonna I have to have node
26:02 - installed on my computer check out my
26:04 - videos about nodejs but i'm gonna use no
26:07 - to install all the other libraries and
26:10 - other things that p5 the library itself
26:13 - depends on so i'm going to say npm
26:16 - install now i'm really definitely gonna
26:18 - have to wait
26:23 - I know do you dance why you run npm
26:26 - install' not to you could we could
26:28 - possibly edit this out but I think
26:30 - Google probably want it leave it in yeah
26:32 - how long this video ends up being I
26:33 - guess I could have a drink of water
26:34 - Cody Train brought to you by water thank
26:37 - you so much for the sponsorship I don't
26:39 - know where water is but it's the thing
26:41 - that gives us all life all right this is
26:48 - pretty good oh we got a lot more stuff
26:50 - to do keep on going
26:52 - oh we finished okay that was 33 seconds
27:02 - and we add added 1584 hooks and people
27:07 - are saying in the chat what about yarn
27:08 - you know someday I'll you know I you
27:11 - know me I'd like to kind of like live in
27:13 - the past for a little while so I'm using
27:17 - no yarn is another package manager'
27:20 - though that you could use instead of NPM
27:22 - and apparently it's like faster and
27:24 - better for some reason now okay to
27:26 - create the creek complete library from
27:28 - source run grunt so one thing that I
27:32 - should emphasize here is that when I go
27:35 - look at the code like where do I
27:37 - actually want to change the code
27:38 - somewhere right I want to add to load
27:41 - bytes function all the code for p5 is
27:43 - all here color core data events hmm i/o
27:47 - input output probably the code for load
27:51 - bytes should go in IO and if I look here
27:55 - and I go down files Jas maybe that's
27:59 - where it is let's look at files Jas and
28:01 - you can see here is there like a load
28:07 - JSON is here solo JSON is here in files
28:12 - dot j s so I just need to add p5 dot
28:16 - prototype dot load bytes to add that
28:19 - function but the thing is if you've ever
28:20 - used the p5 library right you don't have
28:23 - like a directory of all of these you
28:26 - just have that p5.js file or that p5 dot
28:29 - min dot JS file so there is a build
28:31 - process it would be unreasonable to try
28:33 - to develop this big library all
28:36 - from one file and be like oh I want to
28:38 - add something to it let me go to line
28:39 - you know 70 2421 so everything's broken
28:43 - out into separate files and then there's
28:44 - a build process the build process
28:46 - happens with where am I here via this
28:52 - other tool called grunt what's what's
28:56 - grunt grunt JavaScript let's look for
29:03 - that the JavaScript task runner so grunt
29:07 - is a task runner that will don't worry
29:09 - that you could configure to do a lot of
29:11 - things like run all the unit tests check
29:13 - the linting for style bill put all these
29:16 - files all together minify it all that
29:18 - kind of stuff that I have some video
29:20 - tutorials about in my github series in
29:22 - my linting and testing series but
29:25 - basically all the kinds of things that
29:27 - you might do with a JavaScript project
29:29 - grunt is something that can allow you to
29:31 - sort of sequence all of that and a lot
29:33 - of this work I should say was done by
29:37 - pause for a second I should I want to
29:43 - reference medium processing org wrap-up
29:49 - post how do I find that google Summer of
29:56 - Code wrap-up post medium processing this
30:03 - will get edited out here we go
30:06 - yep that's where was I
30:15 - why am i this there we go whoops
30:28 - okay and a lot of this work was done by
30:35 - sakshum Saxena for last year's google
30:39 - Summer of Code 2017 we did a lot of work
30:42 - to improve the infrastructure alas pecs
30:44 - and operations of the p5 library itself
30:46 - so all the sort of build stuff so let's
30:49 - try now and see can we run npm run grunt
30:55 - let's see what happens so this is
30:56 - exciting so let's see if I can talk
30:59 - through the things that it's doing oh ok
31:04 - so what am I missing
31:05 - oh I just said I actually I just I need
31:10 - to say npm run grunt I just typed and
31:12 - chimp grunt if I type NPM grunt it goes
31:14 - like this and all right here we go so
31:18 - it's running grunt its building some
31:21 - docks and the reference then it's
31:25 - running in a min task it's running some
31:27 - sort of type right it's building it it's
31:29 - linting it it's testing it all sorts of
31:33 - exciting stuff is happening oh it's
31:35 - running browserify which is something
31:38 - that people do and it's running uglify
31:40 - which is also something it's doing all
31:42 - these different tasks then boy wouldn't
31:44 - it be nice mocha to go through it so
31:45 - look at the little kitty cat and it's
31:47 - running all the unit tests the value of
31:49 - x is 10 boy this is gonna take a really
31:52 - long time false false so it's gonna take
31:54 - a really long time to do all this I
31:56 - think probably I'll just be back in a
31:57 - second one is done
32:05 - oh it's complete and it passed
32:27 - everything passed it was done without
32:29 - errors so now we can start to add our
32:32 - own code to it now maybe I want to like
32:34 - makes it duper oh yeah I'm gonna make a
32:37 - branch so I think I don't know I think
32:40 - what I'm gonna do is I'm gonna say git
32:42 - branch load bytes I don't call it fix or
32:48 - at load bytes add that's a good name for
32:50 - the branch I think I'm gonna add load
32:52 - branch maybe I should call it add load
32:55 - bytes okay so I'm going to create that
32:59 - branch and then I'm also going to check
33:01 - out that branch so now working on the
33:06 - code I'm in a different branch which is
33:09 - going to be helpful for me later when I
33:11 - want to compare pull request send echo
33:14 - there's a lot of stuff that I'm kind of
33:16 - you know this isn't like I visit the
33:18 - first video you're ever watching about
33:19 - git or github or open source a lot of
33:23 - this is gonna be unfamiliar to you
33:24 - hopefully you can pause here and find
33:25 - some of the background links and come
33:27 - back but okay so I'm in a separate
33:28 - branch now all right now I'm just gonna
33:30 - go to the code I'm gonna write some code
33:32 - code code code code code here we go
33:34 - alright so I'm gonna write some code
33:36 - stressed out all right ah so here's the
33:39 - thing let me give myself a little bit
33:40 - more room here one thing that's
33:43 - interesting to note about p5 is looking
33:46 - out what's all this stuff oh my goodness
33:49 - there's like this is just the load JSON
33:52 - function first there's these comments
33:54 - then there's some like crazy notation
33:56 - here there's like this looks like an
33:58 - example so there's a lot that I need to
34:00 - do just to add load bytes beyond just
34:03 - the load bytes function itself because I
34:05 - need to also make sure I include the
34:07 - documentation and eventually I'm gonna
34:09 - want to also probably add an example to
34:11 - the website and all sorts of other stuff
34:14 - but let's do one step at a time I think
34:16 - what might help us actually am a
34:19 - is let's use this load JSON
34:24 - implementation as a template so I'm
34:26 - actually gonna copy everything from load
34:29 - JSON like this and I'm going to put it I
34:33 - don't know if it if there's a correct
34:36 - order I'm gonna put it at the bottom I'm
34:39 - gonna put it at the end because I'm
34:42 - gonna put it after look at me I'm just
34:44 - like scrolling like a crazy person I'm
34:46 - gonna add it after a before a cheapy do
34:51 - and I'm gonna add it before HTTP POST oh
34:55 - this is very silly what's going on now
34:57 - HTTP GET load xml so i'm gonna add it
35:04 - after load xml before after load xml and
35:07 - before HTTP GET that feels like a good
35:09 - place to put it I paste this in here now
35:14 - then what I'm going to do is I'm gonna
35:16 - make sure I'm in the right place this is
35:22 - the load JSON function and it's right
35:25 - after the XML one okay so now I will
35:27 - really need to rewrite this quite a bit
35:29 - and I need to make this a little smaller
35:31 - can you still see this is this too small
35:34 - for you now I think I'll survive here
35:37 - loads a binary file from a fire all a
35:43 - URL and returns an object with a byte
35:50 - property containing a so what is it that
35:55 - it's containing when I my load bytes
35:59 - function it if I run the load bytes
36:00 - function it actually creates this with
36:02 - this you into eight array okay
36:04 - a array note that even if the JSON file
36:08 - contains an array and object so this is
36:10 - irrelevant
36:11 - this method is asynchronous meaning it
36:14 - may not finish before the next line in
36:16 - your sketch okay don't need JSON P so
36:19 - that can be removed now the method is
36:23 - called load bytes the parameter is a
36:28 - string which is name of the file or the
36:30 - URL to load object
36:33 - so I don't think I need the json p stuff
36:36 - that I don't need a callback and an
36:40 - error callback so I own a string a
36:43 - callback and an error callback function
36:51 - to be executed after load bytes
36:53 - completes data is passed in as its first
36:58 - argument function be executed if there
37:00 - is an error responses passed in as the
37:02 - first argument that makes sense
37:05 - return an object it only returns an
37:08 - object because the object has contains
37:12 - and a you int array bytes field property
37:23 - I'm gonna miss a property and then I'm
37:27 - going to say calling load bytes inside
37:31 - preload guarantees to complete the
37:33 - operation before we set up and draws
37:35 - called that is the case now there's an
37:36 - example here unfortunately I'm good what
37:39 - I'm going to do right now is I'm gonna
37:41 - take out the example maybe I can add one
37:46 - in later but I'm just gonna say to do
37:49 - add example and then outside of preload
37:55 - add example with preload outside of
38:00 - preload you may supply a callback
38:01 - function to handle the object to handle
38:04 - the data I'm gonna say and then what I'm
38:08 - gonna do here I'm going to delete this
38:10 - and I'm gonna say to do add add example
38:20 - without with callback wonder why it's
38:24 - sin texting house syntax highlighting
38:26 - because it's inside of this so this
38:28 - should really actually go probably like
38:30 - here yeah that's fine
38:33 - that's going to error on the tests okay
38:37 - so this to do is going to error on the
38:39 - tests what can I do here can I do this
38:46 - will that not error we'll find out
38:51 - so I'm trying to just add a note here to
38:54 - myself let's see what oh maybe this look
39:03 - this will just do oh yeah this is all I
39:05 - need to do okay so this all I need to do
39:09 - is add sorry I need to put this in
39:10 - comments I'm trying to figure out what
39:12 - it's expecting expecting JavaScript code
39:14 - here which I don't have ready to put so
39:16 - I'm gonna put this to do note with
39:18 - JavaScript comment okay what is this alt
39:22 - oh this is alt text I think this is like
39:27 - leftover from something that's not
39:29 - exactly right so this is a mistake I
39:32 - think I need to like take a look at this
39:34 - I'm gonna leave that there but this I
39:37 - don't think is right can we come back to
39:38 - that okay now I'm gonna get my code so
39:40 - I'm gonna change this to load bytes and
39:44 - I'm gonna go now
39:46 - to the code that I wrote another time
39:48 - and I've been sort of mucking around
39:50 - with it trying a few different things so
39:53 - what I'm gonna do is I'm gonna do this
39:57 - I'm gonna tape I'm gonna I'm gonna do
40:00 - this bit by bit I'm gonna just take out
40:02 - I was playing around with HTTP - I'm
40:04 - gonna take that out so I'm gonna grab my
40:06 - code which is this and I'm going to copy
40:10 - it and I'm going to go back here and I'm
40:13 - going to I'm gonna leave this stuff here
40:20 - because you're gonna see why in a second
40:25 - because I actually uh what I want I want
40:31 - to retain this check for the data type
40:34 - argument so this is some code from load
40:36 - bytes which is checking to see here's
40:39 - that argument if it's a string I don't
40:41 - need to worry about this json p stuff so
40:48 - if it's a if it's a function and there
40:52 - is no callback then it becomes the
40:54 - callback otherwise it's the error and
40:58 - I can get rid of this and I can say I
41:04 - can say path should only the arguments
41:08 - index zero so this is actually this is
41:14 - probably more complex than it needs to
41:16 - be so I don't know if this is really
41:20 - necessary I but I'm gonna leave this
41:22 - like this so this is saying like oh this
41:24 - is already there you know what I'm gonna
41:30 - say yeah I'm gonna do this so this is a
41:32 - nice way I'm gonna leave it like this
41:34 - this is a way of just checking are there
41:36 - additional arguments if so put them in
41:38 - the right place then I don't want to do
41:42 - this anymore
41:43 - what I want to do is my own whoops
41:46 - load bytes code which is this and I'm
41:50 - gonna paste that in here now the
41:51 - difference is I wrote my code with a
41:54 - variable called data and the convention
41:57 - in p5 is return so I want to say var
42:02 - return equips return equals an empty
42:06 - object and then when the data comes in
42:08 - I'm going to say return dot bytes equals
42:10 - that array I'm gonna do the callback and
42:13 - then I also need to how do I have an
42:16 - error so on request dot on error this is
42:22 - my guess equals error callback so if
42:30 - error callback so I need to look up the
42:34 - documentation for this I need to look up
42:37 - the documentation I'm just guessing this
42:39 - on request is there a non error function
42:42 - Oh request onload oh request on air
42:50 - onload let's look for this oh yeah
42:55 - HTML request there's a there is a on
42:59 - load and is there or does this expect an
43:06 - error how do I get an error error
43:08 - notifications add event list
43:11 - so maybe I need to do this it looks like
43:14 - maybe I need to do this for the error
43:18 - lowercase on error but being told that
43:20 - maybe lowercase on error actually works
43:22 - so let's see if this is a function H
43:29 - HTTP XML rexella HCB requests on error
43:35 - yeah there's a non error there we go
43:38 - equals callback so that should work
43:40 - we're going to test all this stuff
43:42 - before I submit a pull request don't
43:43 - worry okay
43:45 - so now I think I've written my code I'm
43:47 - happy with it I don't have the examples
43:49 - but I have the stuff that's needed for
43:51 - the documentation I have a little
43:53 - description ah I am missing something
43:55 - though weirdly enough the way that p5
43:58 - works when you have a function that it
44:00 - supports preload is I also need to
44:03 - register that function with load bytes
44:07 - I'm sorry register that function with
44:09 - preload so this has to go somewhere
44:11 - register a preload method now where does
44:13 - that go does that actually just go is
44:15 - that in this no so where does that
44:18 - happen in the p5 library hmm let's go
44:21 - back to the p5 repository and search for
44:26 - register preload method and let's look
44:28 - for code oh it's in core preload methods
44:41 - let's see hmm yep it's here it's in core
44:48 - so what I need to do is add it to this
44:50 - list we can see there's no load bytes in
44:53 - this list so I also need to go to core
44:56 - which is here under core core j/s let me
45:00 - look for a load JSON and find that here
45:05 - and now what I'm gonna do is I'm gonna
45:07 - put it right here as this in
45:09 - alphabetical order no I don't know that
45:12 - there's a particular logic to this order
45:14 - so I'm just gonna put it right after
45:15 - load XML I'm gonna say load bytes so I
45:21 - think that's probably all I need to do
45:23 - to get it to work with preload
45:25 - I think that's all I need to do let's
45:28 - just see I'm being in the chat I'm being
45:35 - told there might be a bug in the way
45:36 - that I called the date called a callback
45:39 - thank you for that so let me go back to
45:41 - files J s go back to my load bytes and I
45:45 - am calling the call back out with data
45:48 - which I renamed based on the p5
45:50 - convention to ret okay
45:53 - so I think that's good all right so look
45:57 - we did it we're done
45:58 - goodbye I'll see you later no no there's
46:00 - so much more to do this is I think I
46:02 - have written all the code for adding the
46:04 - load bytes function to p5 now I've
46:07 - missed two important things one is I
46:09 - haven't finished writing the doc example
46:11 - documentation and two it's possible you
46:14 - know it is as in that thread that get up
46:16 - issue thread this isn't perhaps the
46:18 - ideal implementation of load bytes but
46:20 - it hopefully at least is one that works
46:22 - so now what I'm going to do is guess
46:25 - what I'm gonna do I'm just gonna run
46:27 - again NPM run grunt so let's just
46:30 - rebuild p5 I also haven't written any
46:33 - tests so I'll be back when this is done
46:42 - hmm okay this is good so this is no
46:48 - surprise there's no way I could have
46:50 - done that without getting any errors so
46:52 - I got some sort of error yes lint source
46:55 - failed so what did I do
46:57 - I wrote on so I have some some some code
47:02 - that doesn't that doesn't work that
47:05 - doesn't fit the Styles defined by the p5
47:09 - open-source library oh boy boy there's a
47:11 - lot of stuff core js3 line 362 line 362
47:17 - so let's go take a look at that core j/s
47:19 - line 362 oh boy what did I do
47:27 - what kind of horrifying something did I
47:29 - didn't make any changes here oh no oh no
47:33 - oh no something bad has happened
47:37 - I forgot I have had a beautifui jinn
47:43 - stalled and it's happens anytime I hit
47:46 - command s it reformats all my code with
47:49 - some styles defined by my atom beautify
47:51 - which don't match up with the p5.js
47:54 - library whoa so I got to undo out of
47:57 - this I really got to undo out of this
48:01 - I'm gonna undo out of this okay so now
48:06 - what I want to do here hopefully if I go
48:09 - back to because I didn't make any
48:10 - changes up here hopefully that's it now
48:13 - what I want to do is I want to go to my
48:15 - preferences packages atom beautify
48:21 - settings I want to go down to JavaScript
48:26 - and I want to disable this beautify on
48:29 - save I don't want to beautify this stuff
48:30 - I probably could like install the
48:32 - linting configure I could have all this
48:34 - setup in my text editor to check in
48:36 - advance but I'm not going to I'm gonna
48:37 - uncheck this I'm going to go back to
48:42 - core yes now why does it think there's
48:45 - still changes in cordage a/s mmm
48:52 - so let me do something here let me say I
48:54 - want to say git diff source core core
49:02 - Jas I just want to think what it thinks
49:04 - is different did I commit anything oh
49:10 - it's still this is still messed up hmm I
49:14 - could can I stash my changes yeah hold
49:25 - I'm thinking this could be edited out oh
49:31 - it's there I didn't undo it didn't undo
49:35 - past that oh because I didn't save it
49:39 - okay actually I did undo sorry I was
49:44 - confused so I undo out of that and save
49:46 - it now I've got to go to files dot yes
49:49 - now unfortunate what I'm going to do
49:51 - here I'm gonna do something a little bit
49:52 - insane which is that I'm going to grab
49:55 - my load bytes function I don't care if
49:58 - there are errors I need to fix there I'm
50:01 - gonna grab my load bytes function I'm
50:03 - gonna hit command X to get rid of it I'm
50:07 - then I'm gonna undo I'm gonna do undo
50:11 - all the way back to how this file was
50:13 - originally wow I made a lot of changes
50:21 - this is insane good thing I know I
50:22 - couldn't use get stash I probably just
50:24 - use gets - so like stash all that now
50:27 - okay now I'm gonna hit save now this is
50:30 - if I if I if I do get diff I have made
50:34 - no changes from the p5 library I'm gonna
50:37 - make those changes again I'm gonna paste
50:39 - in my load bytes function I'm gonna hit
50:41 - save now I'm gonna go to court a as I
50:45 - told you this would go awry and I'm
50:47 - gonna look for lo JSON and I'm gonna add
50:50 - in my load bytes function I'm not no
50:53 - beautifying is gonna happen this time
50:55 - load bytes and I'm gonna hit save and
50:59 - now we can see core j/s has changed you
51:03 - can see by that Adam changed the color
51:06 - and files such as have changed but
51:07 - beautify didn't run I hope so now what
51:10 - I'm gonna do is I am going to try to run
51:13 - this again and hopefully I mean I'm sure
51:15 - I'm gonna be back it'll be some error
51:16 - other error you'll see me in a minute
51:18 - when the next error comes up Oh Kenneth
51:26 - Lim is there in the chat thank you for
51:28 - watching what time is it
51:33 - six o'clock alright failed alright
51:40 - alright I am back with more linting
51:43 - errors but at least there are only these
51:46 - linting errors in files digest so what's
51:49 - a path is assigned a value but never
51:51 - used ah I forgot like I've made mistakes
51:53 - in my code here that this is this is so
51:55 - good that it has linting because I I
51:59 - created this variable called path but
52:02 - then here
52:04 - I'm using file this needs to be path
52:06 - this definitely needs to be path here so
52:09 - that was a mistake
52:10 - you know I'm tempted to just run this
52:12 - again just to do one fix at a time
52:15 - because that fix might have that that
52:18 - might have messed up oh my goodness
52:19 - I think it got oh no it's doing the
52:21 - linting again so let's see if it gets
52:23 - past the linting this time it might have
52:25 - just only been okay more linting errors
52:28 - replace get with get so it wants me to
52:32 - use a single quotes I agree with you
52:35 - thank you p5 for making my dreams come
52:38 - true this should probably be single
52:40 - quotes as well okay so now that's good
52:42 - let's run it again I probably could run
52:46 - just the command for linting separately
52:48 - like instead of doing run grunt the
52:51 - whole time okay another linting error
52:56 - insert a semicolon line 752 a line 752
53:02 - oh really really okay all right hey you
53:07 - want a semicolon there yeah at the end
53:09 - of this onload being equal to is it
53:11 - gonna want another one yeah oh yeah like
53:13 - I have one here that makes sense okay
53:15 - I'll buy that I'll buy that semicolon
53:17 - all right one more let's see if it gets
53:22 - past it let's see if it gets past the
53:24 - linting okay told to be request for the
53:29 - music up nope alright it didn't get past
53:34 - it we've got one more on Rick one our EQ
53:37 - is not defined Y is on our EQ not too
53:41 - fine I find by the way that often when
53:42 - I'm in here I'm shouting there's no
53:44 - reason for me to shout you can hear me
53:45 - just fine ah oh oh I just like have a
53:53 - total typo I have this says o n req when
53:57 - the variables name is ou re Q so this by
53:59 - the way is good evidence I have a
54:01 - linting tutorial by the way that well
54:03 - that that is out you can go check out my
54:04 - tutorial about linting this is why
54:06 - having linting especially with an open
54:08 - source library it's good I might have
54:10 - liked well I probably would've tested
54:12 - this at least tried to run an example
54:13 - before I submitted the pull request but
54:15 - has really helped me clean out and fix a
54:17 - whole bunch of things Thank You p5.js
54:19 - and your linting configuration let's try
54:22 - this one more time I'm feeling good
54:28 - feeling like it's gonna make it all the
54:29 - way through I'm looking at the chat just
54:50 - this will edit this part out
55:09 - [Music]
55:26 - okay it passed I rebuilt p5.js the
55:31 - entire JavaScript library with my new
55:33 - code in it and in fact if I go here now
55:36 - and I look there's a folder here
55:38 - somewhere oh it's probably in git ignore
55:40 - so it's actually not showing up because
55:44 - my atom editors configured not to show
55:46 - me folders but there is a folder called
55:49 - dist
55:49 - and I'm gonna manually go and look at it
55:51 - I'm gonna go into p5.js under wait wait
55:57 - it's not there
55:58 - under Lib Oh so hold on maybe it's not
56:03 - in distribution that's if I'm building a
56:05 - release sorry it's under Lib perhaps
56:10 - hold on Lib p5 yeah yeah yeah so it must
56:18 - have built to lid right we just look in
56:21 - that I just want to see I'm gonna I'm
56:24 - gonna say this over again yeah
56:32 - yeahjust is only gonna get him this is a
56:34 - file that was built today created at
56:37 - 5:46 today 69 okay great so let me let
56:41 - me go back here
56:43 - I'm just start from where here this is
56:48 - the sorry for those of you watching this
56:50 - live sometimes I do this because I like
56:52 - to edit this into a standalone video and
56:54 - I can like could have clean out some of
56:56 - the noise of it even though it's useful
56:59 - to see the mistakes and stuff but what
57:01 - I'm gonna do here is just come back here
57:04 - fake it okay look it built no errors I
57:10 - have actually now completely rebuilt the
57:12 - entire p5.js library with my new code
57:15 - all the tests passed you know with the
57:17 - caveat that I didn't actually write any
57:19 - tests for load byte so but at least I
57:21 - didn't break anything else that's in
57:23 - existing tests no linting errors my code
57:25 - style is right didn't complain it me
57:27 - that I'm missing something important so
57:28 - I can feel somewhat confident that I've
57:30 - done something that's reasonable
57:32 - now let's look let's look let's see okay
57:35 - so let's go into let's go into Lib so
57:40 - the built file is actually you can't see
57:42 - it here because it's actually in my atom
57:44 - editors configured not to show me files
57:46 - that are in get ignore but I can
57:49 - actually go here and open it up manually
57:52 - file open Lib this is the new p5 just
57:57 - library that I have now built manually
57:59 - and there's also this empty example this
58:02 - is wonderful because I'm gonna be able
58:04 - to now mess around in this empty example
58:06 - folder to test just sort of manually
58:09 - test to see if the code works so I'm
58:11 - gonna open this up and we can see we can
58:14 - look this has been built on March 12th
58:17 - that's today 2018 and I can look like I
58:22 - can do a fine now Adam is my complain at
58:24 - me because it's a really big file but I
58:26 - can look for load bytes look at this
58:27 - there's a there's a low byte that was
58:29 - that's not in p5 the code there's
58:32 - another load bytes there's another load
58:34 - bytes there's a load bytes is there and
58:37 - look at this here it is the load bytes
58:39 - method actually online 59 thousand
58:44 - thing 575 so this is now a version of p5
58:48 - library it's not a rule it's not
58:49 - released it's not merged it's not part
58:50 - of the the actual p5 project yet but it
58:54 - did work to build a library so now what
58:56 - I'm going to do is I'm gonna go into
58:59 - this empty example now this empty
59:01 - example you'll notice points to those
59:03 - new built library files so I can start
59:06 - to test that code so what I'm going to
59:09 - do is I'm going to go to terminal here
59:10 - and I'm going to where am i I am in
59:13 - p5.js I'm going to go to to Lib I'm
59:15 - going to go into empty example I'm gonna
59:17 - run a little server just so the just so
59:24 - I can sort of see oh there's already a
59:25 - server running let me run a server on a
59:29 - different port then I'm gonna go to the
59:31 - browser and now now I can see okay
59:36 - didn't find these files mmm let's think
59:39 - about this oh you know why because I've
59:42 - got to go i its it needs I need to run
59:44 - the server I need to run the server from
59:49 - the from this directory right because
59:53 - empty that empty example points to these
59:56 - files so let me run the server from this
59:59 - directory and go to empty example now
60:03 - let's just see I'm in empty example let
60:05 - me do some stuff like create canvas 400
60:10 - 400 background 0 I won't make this part
60:14 - of my commit I don't want the empty
60:16 - example to be part of what I commit but
60:19 - I'm just messing around the code here
60:20 - just to test so here we go I can see
60:23 - okay so stuff is running now here's here
60:26 - is the real test
60:29 - let me just write the load bytes
60:31 - function in setup okay this is good
60:35 - that's an error I want if low bytes
60:39 - didn't exist is the p5 library we've got
60:41 - an error saying I don't know what load
60:42 - byte this so now I can I can kind of go
60:45 - what I have a some test code on my
60:47 - desktop where I have a data file this is
60:53 - some this is a binary file was 1000
60:57 - cat drawings so I'm gonna copy that I'm
61:01 - gonna go to empty examples I'm gonna say
61:04 - just show and finder and I'm gonna go to
61:13 - empty examples and I'm gonna paste that
61:15 - in so now I have a binary file there I
61:18 - want to see that that so that binary
61:19 - file is there and what I want to try
61:22 - doing is I want to say load bytes cats
61:26 - 1000 dot bin so let's just see if I get
61:30 - any error there no error this is a good
61:34 - sign
61:34 - now here's the thing function let me put
61:38 - this in preload so did my preload
61:40 - integration work VAR data I'm just gonna
61:45 - be es5 for today equals load but I'll
61:48 - say let cuz that's how I can't say var
61:50 - anymore
61:51 - load bytes and then I'm gonna say
61:54 - console log data so let's make sure this
61:58 - works great the data is there that's the
62:02 - correct amount of data you know looking
62:05 - at some of the numbers I can see that
62:07 - this makes sense that I knowing what
62:08 - this file is this is the right kind of
62:10 - stuff there's a lot of black pixels and
62:12 - then some gray and white outlines so
62:15 - this looks like it's working and you
62:18 - know just to make sure preload is really
62:21 - doing what it should right it's empty
62:23 - there but by the time it gets the set up
62:25 - now
62:26 - what if I take this here and put it in
62:29 - set up now this shouldn't work because
62:33 - I'm no longer using preload right I'm no
62:36 - longer using preload so it's empty but I
62:38 - can add a callback I can say got data
62:41 - and I can write a function called got
62:45 - data with an argument data so this is
62:49 - the callback and I don't need to set it
62:52 - equal to anything anymore so this should
62:54 - now I don't need this draw function it's
62:55 - nice that that was there so this should
62:57 - now work I can see the data is there
63:00 - that's good and then I also want to
63:04 - let's test the error I'll so I'll call
63:07 - it got error
63:10 - so I have to make an error happen let's
63:12 - see if I can think about how to do that
63:15 - so let me consult log the error so let's
63:21 - see so this there shouldn't be in it no
63:22 - error happened that's good what if I
63:24 - change the name of the file there we go
63:29 - sketch so interestingly enough oh this
63:34 - is a problem so it called got error
63:37 - sketch touch yes no it didn't it it
63:41 - passed the error into got data so I have
63:45 - a mistake hmm I have a mistake somehow
63:50 - because the error got passed into got
63:54 - data
63:55 - hmm sorry I'm looking at the chat people
64:00 - are messaging me all sorts of things in
64:01 - the YouTube chat but I'm not really
64:03 - gonna be reading it okay so let me go so
64:08 - here's a problem I find I finding
64:11 - something that doesn't work correctly
64:12 - right Oh or okay I have a weird idea I
64:21 - have a weird idea of what the bug might
64:22 - be let me go back to files j/s I kind of
64:27 - I feel like this craziness that I did is
64:30 - kind of nuts so I'm gonna delete this
64:33 - because maybe the error callback
64:35 - actually was getting the wrong thing let
64:40 - me be more specific here so let me say
64:44 - equals equals arguments 1 equals
64:49 - arguments 2 so I'm just going to sort of
64:51 - more hard code in that the path is the
64:54 - first argument and what I probably want
64:57 - to do is I want to say if
64:58 - arguments.length this isn't I'm just
65:01 - going to do this for right now is
65:02 - greater than 1 then
65:13 - I'm gonna bake these two other callbacks
65:17 - and if arguments that length is greater
65:20 - than one set that else if
65:23 - arguments.length is greater than two
65:27 - this is very awkward somebody please
65:29 - give me a suggestion of doing this in a
65:31 - way that's more like p5 but let's just
65:34 - this I know will work like no error
65:37 - callback error callback so I'm gonna
65:39 - write it this way okay I'm gonna write
65:42 - it this way and then I'm going to build
65:44 - the library again and I'll be back once
65:50 - it built so this is the thing I can
65:51 - rebuild the library with my fix the code
65:53 - ah and I'll be back the p5 way is
66:01 - function path callback error callback
66:03 - right good point
66:14 - all right scratch all that this way that
66:17 - I wrote it here is is totally silly it
66:19 - would be interesting useful did you only
66:21 - need to do this kind of stuff if I need
66:23 - to sort of the arguments could come in
66:25 - in different orders of different types I
66:26 - need to test like there's an optional
66:28 - argument there's no optional argument
66:30 - here I'm just gonna say path callback I
66:32 - don't need to use the the arguments
66:35 - array let's simplify this and do this
66:39 - right so now these are optional
66:43 - arguments they will be undefined if
66:45 - they're not sent in so let me go back
66:47 - and run whoops let me run NPM grunt
66:55 - again and I'll be back assuming if
66:58 - there's an error or if everything passes
67:04 - all right I'm gonna let this run
67:20 - yeah all right whenever I hit on the
67:23 - dollar sign it tells me that it isn't
67:25 - available in my area I don't know what
67:30 - Livingstone is talking about oh you're
67:32 - trying to do the super chat don't worry
67:34 - about it
67:35 - you are watching from East Africa that
67:36 - is amazing to me don't feel you need to
67:40 - hit that dollar sign just watch share
67:42 - enjoy I'm thrilled to have you here okay
67:59 - all my tests passed again so now this
68:03 - was a lot of work just to see if that
68:04 - fixed the bug let's go back and let me
68:07 - hit refresh now and good no bad bad so
68:13 - that did not fix the bug so this file
68:16 - I'm getting the correct error 404 files
68:18 - not found but it's still passing the
68:21 - error message as far as I can tell -
68:26 - probably because the risk all back so I
68:32 - think I probably need to think about
68:37 - this will there may be there's an error
68:40 - maybe this needs the error does the
68:43 - error does that is there an error
68:45 - callback that is part of Oh event we
68:51 - have to stop and think about this for a
68:53 - second
69:02 - no the Jas isn't cached because I have
69:05 - that right I should add some console
69:07 - logs in here for sure oh yeah let me
69:13 - just suck it thank you good quite good
69:16 - good point all right let me be really
69:20 - really sure about this and let me say
69:22 - console log error and then console log
69:28 - data so let me let me be really sure
69:32 - about this okay refresh data yeah it's
69:35 - definitely ending up in the got data
69:37 - function all right let's see Steven
69:42 - writes there is no error callback
69:44 - argument in onload you need to check
69:46 - error code okay so this event may be
69:50 - what it is that I need to do is is there
69:55 - does Oh a vent have an error code eight
70:00 - onload let's look at the onload
70:01 - documentation and how do I get the event
70:19 - status code and onload hold on sorry
70:28 - pause for a second here oh I know I mean
70:33 - I can just console log error oh I see
70:50 - okay so when this happens to me often
70:52 - what I like to do is go back to a bit of
70:55 - code without the library just so I can
70:57 - sort of figure this out before I put it
70:59 - into the library I thought I had done
71:00 - this already but I hadn't worked out the
71:02 - error thing so I'm actually gonna go
71:03 - back to this version of the load bytes
71:05 - function which is what I was working on
71:08 - previously just as like in a separate
71:10 - file in a p5 sketch and I'm going to I'm
71:14 - gonna what I'm gonna do there is I'm
71:16 - gonna say console dot log o event I
71:19 - couldn't do this in the library and
71:20 - rebuild the whole library but let's just
71:22 - go back to there and I have this sketch
71:24 - running in localhost 8080 the callback
71:44 - but let me I think this will be fine let
71:46 - me do this
71:48 - so now progress event I think there's
71:51 - this status someone was telling me
71:53 - bubbles cancel bubble current target
71:56 - path return value load something weird
72:01 - is going on let me let me add the
72:03 - callback because I want I don't want to
72:04 - do this with the callback got data got
72:08 - error well I don't have an error you
72:10 - just do got data function got data data
72:19 - console.log data let me get rid of the
72:24 - preload thing oops this is set up let me
72:28 - get rid of okay let me do this okay so
72:33 - this right so it's coming in here why on
72:38 - its oh it's status so it's not part of
72:43 - Oh event what's
72:52 - I'm looking at the chat to see if
73:01 - somebody says thing if request.status I
73:04 - can actually get the status in there
73:07 - okay thank you thank you sta RAK got it
73:11 - alright so what I'm looking for actually
73:13 - I didn't realize is in here
73:15 - let's console.log o our EQ let's
73:18 - console.log this variable and we can see
73:21 - there's the HTTP request there is a
73:24 - status and it got status 404 now here's
73:27 - the thing
73:28 - so what status do I get if it works so
73:32 - let's just console.log the status
73:34 - because there could be a lot of
73:36 - different error codes right
73:40 - isn't there an error callback though I
73:42 - kind of want the callback all right this
73:44 - doesn't seem right to me I mean III can
73:46 - keep going I'm gonna keep going with
73:47 - this so I put it back to the correct
73:49 - file 200 that's if it worked
73:55 - so basically I can check if it anything
73:59 - that's 400 or greater is gonna be an
74:00 - error so I could say I could say right
74:06 - here if status is greater than 400 maybe
74:18 - greater than 200 then air and error
74:26 - callback then I could say error callback
74:31 - and I guess I could just right now I
74:35 - could just pass it in an object
74:46 - so I could pass it in like but I feel
74:48 - like I should be giving the native error
74:51 - on ready state change function and Shep
74:54 - there or even on on request.readystate
74:59 - let's see five hundred plus maybe what
75:03 - Oh on error would be triggered by five
75:06 - hundred plus so what's a like if the
75:11 - network we're down like what if I turn
75:13 - my internet off now you might think oh
75:15 - no but is not reaching out so what if I
75:17 - get like a cross origin error
75:18 - all right let's I knew this was gonna
75:27 - become a problem I got to go it's 6:30
75:29 - someone give me a quick on errors
75:36 - network errors for cores yeah I want
75:38 - that uh all right okay you know what the
75:44 - 404 I really shouldn't care so much
75:46 - because I can make the 404 error a
75:49 - special case because I'm actually I get
75:54 - the 404 error okay Austin in the chat is
76:04 - sending me a stack overflow question
76:06 - let's see how do find out Oh does not
76:13 - equal two hundred would be yeah that's
76:16 - much smaller I'm just much smarter hold
76:23 - on I'm off though I'm off the rails here
76:24 - let me just check something at the time
76:26 - wise what's going on here
76:28 - okay that or attach a reference to the
76:35 - request on the result object so it can
76:37 - be checked outside there was a super
76:42 - chat somebody's telling me oops I don't
76:45 - know how to find it
76:46 - well this YouTube interface is insane
76:52 - thank you super chat somebody tell me
76:55 - it's off the rails yeah okay wait hold
76:57 - on
76:59 - let's stop and think about this for a
77:01 - little while why not just check how it's
77:05 - done in outer p5 load functions oh why
77:10 - do you have to be so smart about things
77:14 - people watching the YouTube channel good
77:16 - point
77:17 - let me check that okay let me take this
77:26 - out let me go back all the way back to
77:35 - what I had oh I'm not even let me go
77:42 - back to here okay okay okay oh oh I
77:52 - should be using fetch no the reason why
77:54 - I don't want to use fetch is because Oh
77:57 - James Flynn thank you so much see now I
78:05 - see it from James Flynn even gives me a
78:09 - thing I can click on to see it thank you
78:12 - James Flynn that's very kind of you
78:14 - oh so I should be using fetch there's a
78:18 - polyfill in the build process of p5 hold
78:24 - on I'm off the rails here I'm gonna go
78:25 - and check does load JSON use fetch no it
78:28 - uses HTTP do that's why I'm not using
78:32 - fetch nobody's using a fetch ah the HTTP
78:39 - do use his fetch
78:40 - I can't this was not gonna work i th TV
78:56 - do is fetch underneath though okay its
78:58 - fetch underneath okay so but I feel like
79:03 - when I went down this road of using
79:05 - fetch cuz I did use fetch at one point
79:08 - like watch let's go find fetch if I go
79:15 - to mmm nest example I really have to go
79:19 - somewhat this is what I get for trying
79:21 - to do a bonus livestream in here and
79:25 - this right this is using fetch can I use
79:33 - fetch without a wait in all of this and
79:36 - promises global search in p5 Reuben is
79:48 - telling me that uses xmlhttprequest yeah
79:55 - I could just go with not checking it to
79:56 - be 200 I was trying to handle yeah
80:02 - that's a good point
80:03 - yeah you know what good point okay so I
80:11 - could go and use fetch I have to use the
80:12 - promise API yeah but but but I know it's
80:15 - polyfilled
80:16 - but I'm freaking me out I don't I know I
80:21 - could use a promise and that would be
80:23 - okay is our promises and other is there
80:25 - precedent for this though
80:29 - like are there promises used in the code
80:32 - base of p5 at the moment I know we want
80:34 - to refactor to do that someday
80:40 - it's too bad you guys are like way
80:42 - behind me HDTV uses promises oh because
80:47 - it uses fetch all right
80:59 - so let me just do this since it's not
81:03 - part of so what I could do is this
81:13 - basically I'm gonna grab this
81:16 - it's basically what I want so let's try
81:21 - this bear with me for a second camera
81:31 - went off so let's rewrite this I don't
81:49 - need this nonsense I don't need this
81:53 - nonsense oh but I have the oh wait thing
82:01 - oh it succeeds with any stats good
82:06 - alright never mind I got it I got it I
82:08 - got it we're gonna we're gonna go back
82:10 - we're gonna go back to redo redo no undo
82:20 - undo then redo
82:31 - okay okay
82:35 - yes I got you I got you everybody I got
82:37 - you everybody all right we do we do we
82:47 - do we do okay
82:52 - okay so now I'm in my example from
82:57 - before where I can muck around a little
82:59 - bit not get too stuck so what I'm going
83:01 - to do is I am going to just check thank
83:05 - you to the chat for pointing out that
83:06 - this variable inside of the callback on
83:09 - load function will give as a status
83:11 - property but I can say console dot log
83:14 - Oh
83:15 - our EQ status and what you will see if I
83:21 - have the correct right if I have the
83:23 - correct file name and I'm gonna go to
83:26 - this I will get the status code 200 if I
83:30 - have the incorrect file name I will get
83:33 - the status code 404 which makes sense
83:35 - 404 is an error code for file not found
83:37 - so what I'm going to do is I'm going to
83:39 - treat that as a special not as a special
83:41 - case but I'm going to basically say if a
83:47 - request static does status does not
83:50 - equal 200 and I'm going to do that and
83:57 - then I'm going to say if there is an
84:00 - error callback I'm going to do this in
84:02 - two separate lines just for right now
84:04 - I'm gonna say error callback I'm just
84:07 - going to pass in I'm gonna make up an
84:10 - error message with that status and so
84:17 - now I need to add file call back error
84:19 - callback otherwise called so and then I
84:22 - think when I went to call the callback I
84:25 - should say return so now so it gets out
84:28 - of here doesn't keep going back to do
84:30 - the response so now I should see whoops
84:36 - line 12
84:37 - oh that only two equals there unexpected
84:41 - token line 15
84:43 - no semicolon there okay let's get Jays
84:48 - line why Oh cuz I'm not passing in so I
84:53 - need to pass in oh this return should be
84:59 - outside of this if statement right so
85:01 - right now I what I did is if there's by
85:04 - not sending an error callback in nothing
85:07 - happens if I send an error callback in I
85:14 - can say function got error and I could
85:19 - say console dot log error now I get this
85:24 - status 404 so I don't know that's a
85:28 - little bit weird but this is something
85:30 - and now what I want to do is what
85:33 - happens if I try to use cores
85:35 - so I actually this file I mean if I try
85:38 - to use course if I try to request a
85:39 - binary file from somewhere on the
85:41 - internet that violates cross-origin
85:44 - resource sharing so that should give me
85:45 - a different kind of error so let's try a
85:47 - different kind of error I actually
85:48 - should have a I actually have some
85:54 - binary files right in this particular
85:56 - github repository and so I have this so
86:01 - I think if I go to view raw and I take
86:06 - this link let's see if I pass this in
86:11 - now will it maybe github actually I
86:16 - think unless I'm staying raw yeah this
86:19 - is not correct let's see what happens
86:21 - don't be definitely getting an error
86:23 - let's see what happens of course it
86:28 - blocked with cores
86:28 - okay good so I got this error it wasn't
86:31 - the right URL but just some arbitrary
86:33 - URL that was blocked with cores but no
86:36 - error callback got called but now I
86:39 - should be able to add down here on error
86:46 - equals error callback so I should I am
86:50 - going to manually execute the error
86:52 - callback here if there's a weird other
86:54 - status or
86:56 - I am going to just give it the air call
87:00 - back here and there we go I got the
87:04 - error here sketched out J s line 10 it
87:09 - gave me the hole
87:10 - excuse me the whole error hold the whole
87:13 - thing here frankly I don't p5 is already
87:18 - I'm already getting these errors so I
87:19 - don't know that I really need to do this
87:21 - error callback but yeah it's all but so
87:35 - this may be a bit of overkill but I've
87:37 - kind of looked into this and figured
87:39 - this out
87:42 - I'm going to now grab this bit of code
87:47 - where I check the status now and go back
87:50 - to my working on the actual p5 library
87:54 - I'm gonna go to files dot J s I'm gonna
87:57 - go to my load bytes function and I am
88:04 - going to add that in here so I'm going
88:10 - to you know what I'm gonna do actually
88:12 - for right now I'm just gonna say return
88:16 - because the truth of the matter is that
88:18 - error is going to be reported any way
88:20 - into the console so I think it actually
88:22 - makes more sense for me to just not
88:24 - don't go through with any of this other
88:26 - stuff and I think that ultimately makes
88:31 - more sense and then here I can also I
88:36 - don't know that I actually need this but
88:38 - why not leave this here alright so I
88:40 - think I think I'm gonna leave it this
88:45 - way so this is just like if it didn't
88:47 - work don't bother to try to pass it
88:50 - although the preload thing it'll get
88:53 - stuck in preload what will this do to
88:55 - preload okay let's build the library
88:56 - again let's build the library one more
89:00 - time I'll be right back
89:07 - don't treat I'm told not to treat status
89:10 - codes like integers so it's standard is
89:17 - to hang preload if it fails so this is
89:19 - fine okay so is my naught equal to 200
89:30 - some sort of bad idea I should do not I
89:34 - should just do the the less formal in
89:37 - case it gets a string to string 200 Oh
89:53 - 200 and 300 or no errors
89:56 - 200 and 300 are all valid okay breaking
90:04 - news from the chat I'm being told that
90:05 - the status code 300 is also valid so why
90:10 - don't we just say if it's greater than
90:11 - 300 for right now are there other status
90:14 - codes between 200 and 300 100 is also
90:18 - possibly valid so when I just say
90:20 - greater than is it really just let's
90:21 - just say greater than 400 that's really
90:24 - the only errors I care about let's run
90:26 - let's run NPM grunt run grunt one more
90:29 - time I'll be right back
90:36 - and might one
90:41 - greater than equals okay and I'm being
90:46 - told that 400 might actually be okay so
90:49 - I'm going to say greater than and equals
90:51 - everyone in the side I've seen so many
90:52 - messages saying greater the people it's
90:54 - greater than equals greater than it
90:55 - equals so let's now we're I think we're
90:59 - golden now I think we've got it I'll be
91:03 - right back
91:10 - let me send the text message I'm gonna
91:13 - be home late
91:32 - when you run all the tests
91:40 - are you sure Rome you Lena asked are you
91:42 - sure the API doesn't provide us
91:44 - successfully and that translates from
91:46 - all the codes I am Not sure at all
91:59 - xmlhttp readystate triple equals four
92:03 - somebody will comment on my pull request
92:05 - and I'll change it later appointed okay
92:09 - it's done let's do some more checks okay
92:16 - so let's see here let me check now my
92:20 - empty example again let's just first see
92:23 - if it works correctly so I've got the
92:25 - got data and the got error callback so I
92:28 - am now going to check the example and we
92:35 - can see okay it works if I give it a
92:39 - nice binary file it if I give it the
92:45 - wrong file name great it gives me an
92:48 - error that's what I want
92:50 - the callback never happens because there
92:51 - is nothing to get file not found that's
92:54 - what I want
92:57 - let's see if I give it a URL that's like
93:02 - doesn't exist what does that do all
93:06 - right
93:06 - Oh got a 404 and it also got a No so
93:10 - this is fine and it got an error so
93:15 - that's fine I'm getting everything
93:16 - getting everything I want with the error
93:18 - callback maybe I want something more
93:20 - specific here but I'll leave this here
93:23 - and then what I'm gonna do is let me
93:29 - check preload again let me just check
93:31 - make sure preload is not broken and so
93:35 - I'm gonna say function preload and let
93:45 - data data equals load bytes with this
93:50 - made-up URL and let's say let's
93:59 - console.log the data okay
94:02 - so now I just want to check preload this
94:04 - is the preload code with let me check it
94:06 - first with an actual correct file
94:11 - whoops oh I hope in a console.log the
94:14 - string data I want to console ugh the
94:16 - data
94:17 - perfect now let me check it with a file
94:20 - that doesn't exist hangs and this is the
94:24 - actual this is what p5 does natively it
94:26 - hangs if the file doesn't exist it
94:28 - doesn't keep going so that's what it
94:30 - should be doing and then let's if I get
94:32 - a cours error across origin resources
94:35 - like I try to access some URL great
94:38 - perfect not found and that error so this
94:41 - is all perfect this is exactly what I
94:44 - wanted to do my tests have passed guess
94:46 - what I'm pretty much done that was a
94:48 - very loud Bell ok so now what happens
94:53 - now I want to say git status just to see
94:56 - what's going on in the repository so
94:59 - whoa
95:01 - where am I here modified oh yeah sorry
95:06 - so I've modified a bunch of things I
95:09 - modified empty example sketched out yes
95:11 - that's not part of the work that I'm
95:13 - doing I've modified core Duchess that is
95:15 - part of the work I'm doing I modified
95:17 - file such as that's the work that I'm
95:19 - doing
95:19 - I have not if I've added this weird
95:21 - binary file that's just for my own
95:22 - testing I don't want to deal with that
95:23 - so what I want to do now is I want to
95:26 - say git add source core core Dutchess
95:30 - because I want to add these changes to
95:33 - court Jas then I want to add a source I
95:39 - owe files dot yes ok then what I want to
95:43 - do is I want to say git commit oh boy
95:47 - it's gonna run something for me wow so
95:51 - there's and now ooh it is giving me now
95:56 - I can write my commit message ok
95:58 - implementing load bytes this is relevant
96:04 - to issue two six seven four and also
96:15 - there's another issue that it's relevant
96:18 - related to did this get closed oh I
96:22 - think this got closed this is
96:24 - so I'm not going to tag I'm not going to
96:26 - tag this particular issue so then I'm
96:29 - going to write this pull wrote this pull
96:33 - request I'm not gonna say pull request
96:36 - this commit adds load bites adds the
96:43 - load bites function to p5.js as
96:48 - demonstrated during a live stream on the
96:53 - coding train there are some there are
96:59 - some remaining issues here for example
97:05 - there are no tests and I am also not
97:12 - using HTTP do which would be more of the
97:17 - convention here for p5 as discussed in
97:22 - issue 2 674 I also I am also handling
97:29 - errors like 404 or cores in perhaps an
97:37 - odd way and would be happy for any
97:42 - feedback okay so this is my nice long
97:45 - commit message and what I'm going to do
97:49 - is I'm now going to so I have I have my
97:52 - git commit tied to Adam so I can now so
97:55 - I can write a nice long thoughtful
97:57 - commit message this will all be ignored
97:59 - this is just information for me I'm
98:00 - gonna hit close and now I'm going to
98:03 - look at terminal and the commit has been
98:07 - made to the add load bytes branch and
98:10 - now I am going to say now I'm going to
98:12 - say git remote - V so the remote that
98:16 - this is tied to is the coding train a
98:20 - fork so I can say I'm gonna say git push
98:24 - origin load what did I call this branch
98:30 - get git branch add load bytes get push
98:35 - origin add load bytes
98:38 - so I'm gonna push if I have been needing
98:39 - this to master by the way I could have
98:41 - said push my changes to master to a new
98:44 - branch called add load bytes but since
98:46 - its I mean a branch already I would say
98:48 - git push origin add load bytes I forgot
98:51 - to your diary
98:52 - should I amend I definitely think I need
98:54 - to amend that I forgot okay so here we
98:57 - go
98:57 - I pushed it there now I'm gonna go to
99:02 - I'm gonna go to my fork who here is it
99:05 - so many things open I'm gonna hit
99:07 - refresh and look at this less than a
99:10 - minute ago I pushed this add load bytes
99:12 - branch I can now do compare and pull
99:15 - request compare and pull request
99:19 - I'm eyes right so this is now saying hey
99:24 - I'm going to I want to pull request add
99:28 - load bytes from coding train /p v GS to
99:32 - processing p5 just base master and then
99:34 - I think what I want to do is I want to
99:37 - suggest some reviewers so Kenneth Lim
99:42 - should definitely be a reviewer Kenneth
99:45 - Lim posted some great comments I don't
99:48 - know if oh I should definitely add
99:52 - something so when I did my commit
99:53 - message it had these like line breaks in
99:56 - it which are bothering me here and I
99:59 - also want to add some formatting like
100:02 - this the back ticks to format this I
100:07 - should say a thanks to for for for this
100:17 - branch which was a nice reference for me
100:20 - so I just wanna add a little thank you
100:22 - here too and I'm gonna go back to my my
100:31 - code where I kept a little this URL to
100:34 - remember it so and then I'm gonna write
100:42 - Oh
100:47 - [Music]
100:49 - it's okay if this doesn't get merged
100:54 - hopefully doing this on a live stream
100:58 - was helpful to somebody all right so now
101:05 - we're gonna look and see like look
101:07 - there's the change I made here's the
101:09 - load bytes function Oh also also an
101:15 - example code is missing finally I am not
101:21 - used to I'm rewriting my message dear
101:25 - diary Sincerely Yours the coding train
101:36 - okay looks like this URL wasn't copied
101:40 - correctly let's see yeah it looks like
101:42 - it wasn't either nope it works this is
101:48 - the correct URL okay so let's now go
101:52 - back and say preview and this can
101:58 - actually because of a nice way that it's
101:59 - rendering this can just go like this
102:01 - let's read this over implementing load
102:04 - bytes
102:05 - 264 dear diary this commit adds the load
102:10 - bytes function to p5.js as demonstrated
102:13 - during a live stream on the coding train
102:14 - there are some remaining issues here for
102:17 - example there under tests also example
102:21 - code is missing finally I'm not using
102:24 - HTTP due to morph de convención for p5
102:28 - as discussed I'm also handling errors
102:30 - like 4/4 and perhaps an odd way ba ba ba
102:32 - thankful ba ba ba ba it's ok it's ok if
102:35 - this doesn't get merged hopefully doing
102:36 - this one last year was helpful to
102:37 - somebody okay all right I think we're
102:39 - ready everybody I think we've now come
102:41 - to the end of this video I think we've
102:46 - come to the end of this video
102:48 - drum roll please
102:50 - we are going to create the pull request
103:00 - and that was a 73 and full hour and 42
103:08 - minutes video of me attempting to submit
103:11 - a pull request to p5 yes live on YouTube
103:15 - there is a mistake what's the mistake
103:28 - yeah if there's errors in the commit
103:30 - message I think that's okay somebody was
103:35 - telling me there was a mistake happy
103:37 - have - oh happy oh that's fine happy to
103:44 - have any feedback I will just edit my
103:48 - comment there thank you alright so I
103:52 - don't know much yeah so Matt you know
103:55 - when uh if you end up watching this live
103:58 - stream as I know you probably will I do
104:01 - think that this could get edited into a
104:03 - useful video and we could probably cut
104:05 - out large swathe of me trying to like
104:09 - sort out the error code stuff and I
104:11 - wouldn't be maybe what I'm gonna do just
104:13 - for like later I'm gonna do something
104:17 - here okay I'm gonna just in case this
104:19 - helpful I'm gonna because I would like
104:23 - us to see if this could be 45 minutes or
104:25 - less okay I would like this to be
104:26 - published as a video that's 45 minutes
104:29 - or less so what I'm gonna do I'm gonna
104:31 - I'm gonna I'm gonna make that happen I'm
104:37 - giving a quick intro to the video you're
104:38 - about to watch where I attempt to make a
104:41 - pull request to the p5.js project and
104:43 - what I'm at trying to add is the load
104:45 - bytes feature now all that will be
104:47 - explained in the video but I ran into
104:49 - some like debugging issues that are not
104:52 - really relevant for the pull requests
104:54 - aspect of the video so there's gonna be
104:56 - some strange cuts in it of me trying to
104:58 - where I did a lot of debugging in
104:59 - between you're welcome to also check the
105:02 - video's description for the link to the
105:04 - full hour-and-a-half livestream but
105:06 - hopefully this video is much shorter and
105:07 - you're gonna get
105:08 - like the essential parts of it okay
105:10 - enjoy this pull request video all right
105:14 - now definitely don't edit out the nyan
105:19 - cat yes now I'm also going to ooh me I
105:25 - am sooo me left some review comments
105:27 - already awesome can I suggest me I am so
105:31 - mean I guess you have to be a member of
105:33 - the organization to review I could also
105:38 - request a review from Lauren McCarthy
105:40 - who is the creator of p5.js so let me
105:44 - just just in case hi it's weenie weirdly
105:54 - in the middle of this video I got really
105:56 - stuck just now trying to figure out how
105:57 - to deal with error codes so I'm going to
105:59 - cut out all of the research and clicking
106:01 - around and trying to do that and just
106:03 - come back to the point where I figure
106:04 - out like let me just implement the error
106:06 - codes this way just to try to make this
106:08 - video short if you want to see all that
106:09 - in-between stuff this is way too long
106:10 - for a little interstitial this okay hold
106:13 - on hi it's me in the middle of this
106:19 - video weirdly there's a weird jump cut
106:22 - here because I spent a lot of time
106:24 - trying to figure out what to do with all
106:25 - the different error status codes I'm
106:27 - gonna cut all that out in the video just
106:29 - get to the point where I add some new
106:30 - code to deal with that if you want to
106:32 - see that whole debugging section check
106:34 - this video's description for the link to
106:35 - the original livestream okay keep
106:37 - watching if you want I don't know that
106:41 - you could I don't know if we need that
106:42 - in the middle hopefully we just have
106:43 - weird jump cuts and it's fine let's take
106:45 - a look at the comments how do I find the
106:50 - review comments conversation
106:57 - oh okay great thank you for this so this
107:00 - is great so me I am Samir already put in
107:02 - a nice comment here so maybe I'll adjust
107:04 - that later it's a video subscription
107:07 - instead of video description all right
107:09 - let me try this one I've always wanted
107:10 - to do this this could be the time
107:12 - alright we're gonna do it this time
107:14 - I've always wanted to do this hold on a
107:15 - sec it green only yeah here we go
107:31 - weird alright this video stopped at a
107:35 - weird biola I'm pausing this video
107:40 - because what happens next is me spending
107:43 - like a really long time trying to figure
107:45 - out what to do with error codes and the
107:47 - error callback and that's not really
107:48 - relevant to the pull request aspect if
107:50 - you want to see that part check the
107:52 - video description for the whole hour and
107:54 - a half livestream but I'm just gonna
107:55 - jump now to the part where I figure out
107:57 - what to do with the error codes and
107:58 - continue all right hope you're just
108:00 - playing this video panky you keep
108:02 - watching maybe okay so that could get
108:07 - green screened on top I think of be like
108:11 - the video pauses record scratch sound I
108:14 - come on in that type of thing okay I
108:18 - think that's gonna work
108:19 - alright everybody so I have a I have to
108:21 - go but let me make a few important
108:24 - announcements by the way people are
108:28 - saying please mean this you have no idea
108:31 - you this is not to be mean go back and
108:34 - try to find the live stream where I
108:37 - talked about net neutrality
108:38 - I've got like a baby like 45 minutes of
108:42 - me doing weird stuff in front of a in
108:46 - front of a green screen alright so I
108:49 - need to talk about a couple things
108:51 - really quickly number one I will be back
108:55 - together to talk about one thing I will
108:58 - be back on Wednesday morning 10:30 a.m.
109:01 - Eastern Time what I will be doing oh and
109:05 - actually let me shout this out because
109:11 - this is really wonderful the stem coding
109:15 - YouTube channel from let's see if I can
109:20 - find this from Professor Chris Orban at
109:24 - OSU I mean I'm going to shout this out
109:29 - on Wednesday because I think I'm going
109:31 - to use the tutorial stem Cody
109:35 - if anybody can find this faster than me
109:37 - stem coding YouTube Orban maybe that'll
109:41 - get me there yep here we go okay so this
109:44 - is the stem coding YouTube channel I
109:48 - want to look just look under videos and
109:51 - PI day so this is a YouTube channel that
109:57 - has a lot of wonderful coding tutorials
109:59 - and stuff with p5 and they have a video
110:02 - about calculating all the digits of pi
110:04 - so anyway I was using it looking at this
110:07 - I might use this as a reference for some
110:08 - coding challenges on Wednesday I
110:10 - encourage you to check out this video in
110:12 - this YouTube channel they've got a lot
110:15 - of wonderful students and different
110:17 - people who present but what I have here
110:21 - is you can suggest a pide a coding
110:24 - challenge I obviously won't be able to
110:26 - do all of these so you can suggest ones
110:29 - or you can look through these and what I
110:31 - would ask you to do if you like one put
110:36 - a thumbs up reaction so let's see pi
110:40 - calculate the nth digit you will be
110:42 - using a neural net no no no I hope I can
110:44 - deal with that
110:45 - visualize aspects that make up pi whoa
110:48 - whoa ok I'm just gonna pick one to
110:51 - arbitrarily 3rd search for words in PI I
110:54 - like this one so I'm gonna thumbs up
110:56 - this one so you if you like one of these
111:00 - suggestions put a thumbs up there yeah
111:02 - so people are noticing ok so people are
111:04 - making making the point of again we go
111:06 - back to YouTube stem coding I'm going to
111:10 - explain something because this is only
111:12 - gonna come up more and more if you look
111:15 - at my suggestions on YouTube you might
111:21 - be wondering why are these all my
111:23 - suggestions but the reason is I am
111:28 - logged into a YouTube account which is
111:31 - Cody green which is tied to this email
111:33 - address coding rainbow live at gmail.com
111:35 - and this YouTube is a youtube account
111:38 - that I also purchased YouTube red for so
111:42 - that if I show a video in the live
111:44 - stream that the ads don't come
111:48 - and also I my kids watch YouTube and I
111:52 - don't want them to have to see all the
111:53 - ads so I've purchased YouTube red so
111:55 - that they don't have to see all their
111:56 - ads and you can see that this is a
111:59 - they'd like to watch a zelda videos
112:02 - Zelda is very big in our household right
112:05 - now stay tuned for the coding trade
112:08 - gaming channel where we play Zelda all
112:10 - day I'm sure everybody wants to watch
112:11 - that and so but I was talking about PI
112:15 - so anyway
112:17 - submit your challenge ideas up the ones
112:19 - that you like sort by most reactions so
112:23 - right now the one that is has the most
112:26 - up votes is search for words in PI and
112:29 - I'll be back this Wednesday morning okay
112:33 - so hello to Israel build breath of the
112:39 - wild probably not going to happen I hope
112:41 - that this ends up with something oh and
112:45 - Simon Simon Tiger rights going to make a
112:48 - github issue related to PI wonderful
112:50 - alright so I'll see you all on Wednesday
112:51 - thank you for tuning in this has been
112:53 - the coding train with your host person
112:58 - who gets really you thinks that just
113:00 - making a quick pull request video about
113:02 - load bytes will just take 45 minutes and
113:05 - then ends up spending like two hours
113:06 - live-streaming I've really gotta go it's
113:08 - way after 7:00 let me check my messages
113:11 - everything's fine
113:13 - and I'll see you on Wednesday okay well
113:15 - goodbye hello to France Bonjour and what
113:22 - a binge lots of questions here okay I've
113:24 - got to go see you all

Cleaned transcript:

hello surprise confetti balloons it's me your internet coding host Daniel Schiffman and Here I am on a special I don't know what day is it Monday evening it's been a long day at work and I have to leave to go home soon that's what I do at the end of a long day at work but I was working on some stuff and I was thinking oh my todo list forever never never has been this thing I got to get to this I got to get to this I got to get to this load bytes p5.js here we go look issue number 2674 implementation of load bytes assigned to someone named chief bond and I keep thinking oh I'm gonna do that I was just thinking I'm gonna do this before I leave I'm gonna make this pull request and then I thought why not I'm kind of making this up because last week I decided I should do this a live stream so this whole story is fun but I so but but if I go back to my fictional story that I've developed in my mind I thought you know why not just go upstairs the whole point of having this recording studio in the same building where I spend most of our time working is to go upstairs and turn on the lights and turn on the cameras and pull requests with with with my friends the internet people hello so so today's gonna be short live stream I will mention and talk about what I guess I can turn this music off here I will mention and talk about my future plans for this week which by the way it's spoil alert live stream coming this Wednesday morning my time Eastern Time probably around 1030 a.m. Eastern Daylight Time for pi day special' Pi Day themed livestream on Wednesday this week no live stream on Friday so I will I need to I don't know put stuff about that in places that people can find it but that's my plan so read the comments and say hi to us I am reading the comments and I am saying hello to you that's how I like to say hello I think I pulled some sort of muscle in my neck while saying hello just then all right so here's the thing I mean I don't know what the thing is let's so let me first get let me get set up here for a second here I put the music back on okay I'm going what I'm doing right now is I am going to this example for doodle classification so this this came about because I did an example a machinelearning example about classifying drawings from the Google quickdraw dataset and I needed to use load bytes to load the data for those drawings but load bytes hasn't been implemented yet in p5 so I wrote a little load bytes function I put it in a JavaScript file called load binary so I'm gonna I'm gonna whatever what I'm gonna do right now is I'm actually gonna grab this doodle classification I'm gonna paste it to the desktop I'm gonna oh I want to get rid of there's a git folder in there why don't I uhoh computers put this back on well this do it No Oh is there no get folder in there oh there's no keep focus it's a subfolder by the way any of you ever use subversion do you remember the days of using subversion where you had a repository for version control and every single subfolder had its own dot SVN file so if you move stuff around everything would break and go crazy oh that was a disaster I term is coming it's you know I get to stuff eventually I really do it just as it takes to build up his intense although III I plan to do more tutorials about open source software development one of which is this one I probably should really be using I term today but it's just not gonna happen yeah what kind of preppie Oh peppy pretty I thought so many of the chat so they looked preppy I just can't see cuz my older my eyesight is terrible it's a pretty pretty wound up alright I am by the way very pretty also thank you very much for saying so I agree with your assessment of my beautiful appearance anyway that sound that came off not the way that I intended alright so what I want to do here is get rid of lot and oops nope nope I want to get rid of train test data prep and no I don't want to get rid of data and the readme okay so this is just going to be load binary load bytes cuz I need to have a working version what's the chance I need to have a working version of this code before I attempt to do any kind of pull request you guys tired of this song yet seriously I love this music but I really need a wide selection of music if anyone watching as a musician a sound designer please help me somebody save me from myself just getting myself ready here alright now I have a question and while you're there the correct documentation markup so it shows up in the dock Jan yes I definitely want to do that I'm going to include some unit tests I I don't think that I am only because I don't know how I would write them are there unit tests for like load JSON and the other data loading files I would if there's a model I could do the other thing I'm not so sure about is I guess it's good for p5 to give you the only way I know how to do it is to give you this object with bytes and this stuff in it but you know the pull request can be adjusted the pull request can be adjusted I just don't know if you know should load bytes actually I mean in theory it might be nice another way that I could do this oh I have well first hold on let me let me keep going with what I'm doing here because one thing I need to do is in this discussion here it was suggested by further down here by contributor Lindsay why Kenneth saying using HG to be do is more consistent with the rest of the loading coding base also makes any future development based on a promise easier however I don't think it's a must at this point more of a nice to have so I think I want to rewrite this function really quickly to work with HTTP do so and hey Lauren McCarthy just commented might have to lock this unfortunately because the see if hopefully people aren't out okay so here is an HTTP do implementation and so this is Oh was there already a pull request with this in it oh well now I feel silly shouldn't we just be taking sponge man's pull request look it has an example well though I'm not sure I would use load bytes with an XML file load bytes data to string that's interesting I wonder if I feel like silly like I shouldn't be doing this now because so what's going on with this pull request oh oh this hasn't actually been pull requested yet so this is something I didn't know okay this hasn't been pull requested yet so I think it's okay for me to go ahead so what I'll I'll do I want to make sure I give credit in the pull request to sponge man here so what I'm looking for there's a lot of extra stuff in here that I don't have any plans okay I just want to look for the HTTP do yeah let's grab this so let's try using this file callback error callback I probably should have that as well file callback error callback this is not the code yet really it's me testing oh what's this weird plus it doesn't have a oh I'll just delete these I'm I'm gonna delete all I didn't realize I was gonna copy/paste all these silly pluses in unit test for load functions are in alright I think what I'll do is say the pull request doesn't at present contain a pull request so this is calling HTTP do it's passing the file a get request with array buffer I call this data I said so data dot bytes is going to be a new you int eight array with a ray buffer it's gonna if there's a callback it's gonna call that back otherwise it's gonna do this stuff it needs to do for preload and if it gets all the way down here this doesn't seem right like there should be where would the oh no yes hdtb to do will call the error callback that is correct so I should be able to take this out and let's see oh it doesn't at present oh so I do need to do more life is always so much more complicated than you think it's going to be I'm like up you're like I've already done this I just need to quickly come up here and do the pull request well I'm three weeks not realizing I have all this other stuff to do alright that's fine we're gonna accomplish this let's look at let's look at okay oh I see so this is allowing for Pat a path to be a string that's but that's fine oh I just need to add array buffer there okay so I'm gonna need to a rat at a rate offer and then then Oh use the fetch Oh oh boy alright wait let's accomplish this thank you Thank You Austin for the function signature in the chat all right I can a can I can accomplish this especially with your help you over there you over there you over here everybody will help me right alright so what I'm gonna do actually is I'm going to comment this out so I'm gonna leave this HTTP do comment it here because first I want to get it to work with this and I will come back to this and I'm gonna reference I need this to be in the comments I'm just gonna put this up here okay this by the way is probably not gonna go very well and it's fine I'm gonna try this I'm gonna give myself an hour and something will happen and then this will finish and then something else will happen I have a few things I want to make sure I reference so I have this I have this and I have this and I want to get to started overview reference learn get involved development wiki okay let me get to here and I want this basically and then I also want this okay all right just look at a different loading function like lay low JSON and make the code look like that but to load binary okay what could possibly go wrong oh you know what this laptop is not plugged in I need the power I need the power of opensource software development where is that plug Oh has someone taken my power no no here it is here it is your this everything's ok okay hmm so I mean I suppose I could just submit the pull request without HTTP do maybe I should do that and like we could mark it as a I could file an issue to like update it for HTTP to later maybe I should do that I think I should do that the pull request could also just be cancelled and not merged I'm doing this for educational purposes all right I'm you know based on what me I am so me in the I trust dearly is saying I think that I'm like I'm gonna run into trouble so I'm going to do it without HTTP do at first all right okay all right let's everybody do some deep breathing let's read a few random numbers because when I'm feeling uneasy about something and like it's going to go wrong the thing that makes me feel better and calms me down I need some nice quiet music and I think the lullaby is just no good anymore I think I'll just read I'll just hear I'll just read the numbers I'm just gonna read the numbers seventy one thousand six hundred and ninety five fifty six thousand eight hundred and seventeen thirty three thousand not 742 you know let me should read them this way six one nine eight one two seven four six four zero two four six eight four six nine eight seven sixty five zero seven nine on them totally gone off my rocker at I'm reading this thirty two thousand eight hundred fifty nine seventy two six thousand eight hundred forty eight okay I think we're good I think we're good this needs to be up like this a little bit all right now I need is a fully I had a train whistle coming soon someday I'm gonna figure out how to make coded train branded train whistles hello welcome to a special video that's part of my whole set of videos and things about contributing to open source so in this video I'm gonna attempt to do something that's not very visible because I'm Adam doing I'm doing this and this is also a live stream that's going on right now even though you might be watching this recorded I am going to attempt to make a pull request to this project called p5.js now you don't know a lot about p5.js I mean if you watch any of my videos you probably know something about it but I encourage you to check out processing foundation.org p5 GS dot org all those links are in this video's description I little while back was creating a doodle classifier example based on the quickdraw dataset and while I was doing that I needed a function called load bytes now if I go to github p5.js and I search this repository for a function called load bytes which the idea of this function is a function that I can call just like load JSON or load strings or load XML or load image but what I want or just the raw bytes from a file a digital file if I search for this you're gonna find oh there's nowhere in the code it's nowhere in the commits but there are a couple issues about it one of which is here under finish file IO implementation this is from 2013 right it wasn't finished and one is from me 12 days ago implementation of load bytes because I filed this issue describing exactly what I'm talking about right now and published some code that accomplished it now here's the thing in the discussion here there's some nice discussion here Linsey why kenneth commented saying that using HTTP do which is a function that's part of the p5 library would be more consistent with the rest of the loading code it's a nice to have I'm going to submit this pull request without doing that just with using my code that uses the native JavaScript XML HTTP request should a lot of that using the native JavaScript HTTP request because I don't want to because using HTTP do is going to require adding and rewriting the HTTP do function as well and I want to kind of keep the scope of this particular video small now it might be that later it might be that this pull request doesn't actually get merged into the project or irie submit I did a different way but let's just sort of see if we can at least make it happen using this code that I have that load bytes and the other point of this I want you to be able to watch this and not really care about what it means to load bytes and how this implementation works just to see the process of adding some new code to kind of a large open source project that is all sorts of dependencies and build settings and things let's see if I can figure that stuff out while doing this in theory I should know how to do this but even if I do know how I'm probably going to get tripped up and have all sorts of problems I can tell it's gonna happen so let me say a couple things first number one is this this wiki is going to be really important this is on the p5.js wiki under slash development this is going to have some instructions that I'm going to need to follow to how to build the p5.js project which I'm going to need to do to test the new code that I want to implement and then also I would highly recommend you check out this video series from Luisa Pereira where she created a video series called looking inside p5 I believe there's a Spanish language and English language and these videos go through in great detail with beautiful animation of drawings and animations how the p5 library is structured and built so that will give you an excellent background to what I am going to about to attempt to do okay so what is the first thing that I need to do so what I'm actually going to do is I'm gonna go right here to p5.js and I'm gonna go over here to clone so what I'm gonna do is I'm gonna start fresh I certainly have on my computer the p5 just repository already I work with it I probably have different branches and forks ah you're on the no I'm not gonna clone it I am first gonna hit fork so what I want to do is work in my own fork so I'm gonna hit fork and I want to fork this oh look at this let's fork this to the coding train and I'm gonna fork this with a coding train it's gonna take a little bit of time oh it already finished okay so now what I'm gonna do is I'm gonna clone and this is good because even if this goes totally haywire maybe I don't want to actually submit what I do here to the actual p5.js project I just want this to be a little sandbox playground for me to learn about open source so here we go I'm going to grab this now I am going to clone from this particular URL I'm using git at github calm because I have already done this crazy SSH key passphrase thing which I would be happy to show in another video if you haven't done that step you might want to clone just using this the HTTP URL so I'm gonna do this I'm gonna hit copy and then I'm gonna go to my terminal where I am a weirdo who actually just uses the plain Mac terminal with no extra settings I aspire to do better I will do better someday and I'm gonna say git clone wait I first got to see where I am sure I'm gonna go to the desktop I'm just gonna put this on the desktop and now I'm gonna say git clone that so this is step one step one is clone the repository oh it's already done okay great now I have clone the repository step 2 deep breath step 3 change directory into the repository and then I'm going to open up all the code in a cook text editor and I'm gonna use the atom editor for that I have my computer configured in such a way that I can type atom dot and it opens a de moda matically and so now you can see I have the entire p5.js project here so first what I want to do is can I even just build p5 the way that it is without making any changes to it okay I don't want to make any change I don't want to worry about my pull request and all that stuff should want to see if I can build it so I'm gonna go back now to this particular and oh I did this first step right fork and clone right fork and clone for Kent clone I did that now I'm gonna I did see the npm install so npm node package manager install is a command that's gonna I have to have node installed on my computer check out my videos about nodejs but i'm gonna use no to install all the other libraries and other things that p5 the library itself depends on so i'm going to say npm install now i'm really definitely gonna have to wait I know do you dance why you run npm install' not to you could we could possibly edit this out but I think Google probably want it leave it in yeah how long this video ends up being I guess I could have a drink of water Cody Train brought to you by water thank you so much for the sponsorship I don't know where water is but it's the thing that gives us all life all right this is pretty good oh we got a lot more stuff to do keep on going oh we finished okay that was 33 seconds and we add added 1584 hooks and people are saying in the chat what about yarn you know someday I'll you know I you know me I'd like to kind of like live in the past for a little while so I'm using no yarn is another package manager' though that you could use instead of NPM and apparently it's like faster and better for some reason now okay to create the creek complete library from source run grunt so one thing that I should emphasize here is that when I go look at the code like where do I actually want to change the code somewhere right I want to add to load bytes function all the code for p5 is all here color core data events hmm i/o input output probably the code for load bytes should go in IO and if I look here and I go down files Jas maybe that's where it is let's look at files Jas and you can see here is there like a load JSON is here solo JSON is here in files dot j s so I just need to add p5 dot prototype dot load bytes to add that function but the thing is if you've ever used the p5 library right you don't have like a directory of all of these you just have that p5.js file or that p5 dot min dot JS file so there is a build process it would be unreasonable to try to develop this big library all from one file and be like oh I want to add something to it let me go to line you know 70 2421 so everything's broken out into separate files and then there's a build process the build process happens with where am I here via this other tool called grunt what's what's grunt grunt JavaScript let's look for that the JavaScript task runner so grunt is a task runner that will don't worry that you could configure to do a lot of things like run all the unit tests check the linting for style bill put all these files all together minify it all that kind of stuff that I have some video tutorials about in my github series in my linting and testing series but basically all the kinds of things that you might do with a JavaScript project grunt is something that can allow you to sort of sequence all of that and a lot of this work I should say was done by pause for a second I should I want to reference medium processing org wrapup post how do I find that google Summer of Code wrapup post medium processing this will get edited out here we go yep that's where was I why am i this there we go whoops okay and a lot of this work was done by sakshum Saxena for last year's google Summer of Code 2017 we did a lot of work to improve the infrastructure alas pecs and operations of the p5 library itself so all the sort of build stuff so let's try now and see can we run npm run grunt let's see what happens so this is exciting so let's see if I can talk through the things that it's doing oh ok so what am I missing oh I just said I actually I just I need to say npm run grunt I just typed and chimp grunt if I type NPM grunt it goes like this and all right here we go so it's running grunt its building some docks and the reference then it's running in a min task it's running some sort of type right it's building it it's linting it it's testing it all sorts of exciting stuff is happening oh it's running browserify which is something that people do and it's running uglify which is also something it's doing all these different tasks then boy wouldn't it be nice mocha to go through it so look at the little kitty cat and it's running all the unit tests the value of x is 10 boy this is gonna take a really long time false false so it's gonna take a really long time to do all this I think probably I'll just be back in a second one is done oh it's complete and it passed everything passed it was done without errors so now we can start to add our own code to it now maybe I want to like makes it duper oh yeah I'm gonna make a branch so I think I don't know I think what I'm gonna do is I'm gonna say git branch load bytes I don't call it fix or at load bytes add that's a good name for the branch I think I'm gonna add load branch maybe I should call it add load bytes okay so I'm going to create that branch and then I'm also going to check out that branch so now working on the code I'm in a different branch which is going to be helpful for me later when I want to compare pull request send echo there's a lot of stuff that I'm kind of you know this isn't like I visit the first video you're ever watching about git or github or open source a lot of this is gonna be unfamiliar to you hopefully you can pause here and find some of the background links and come back but okay so I'm in a separate branch now all right now I'm just gonna go to the code I'm gonna write some code code code code code code here we go alright so I'm gonna write some code stressed out all right ah so here's the thing let me give myself a little bit more room here one thing that's interesting to note about p5 is looking out what's all this stuff oh my goodness there's like this is just the load JSON function first there's these comments then there's some like crazy notation here there's like this looks like an example so there's a lot that I need to do just to add load bytes beyond just the load bytes function itself because I need to also make sure I include the documentation and eventually I'm gonna want to also probably add an example to the website and all sorts of other stuff but let's do one step at a time I think what might help us actually am a is let's use this load JSON implementation as a template so I'm actually gonna copy everything from load JSON like this and I'm going to put it I don't know if it if there's a correct order I'm gonna put it at the bottom I'm gonna put it at the end because I'm gonna put it after look at me I'm just like scrolling like a crazy person I'm gonna add it after a before a cheapy do and I'm gonna add it before HTTP POST oh this is very silly what's going on now HTTP GET load xml so i'm gonna add it after load xml before after load xml and before HTTP GET that feels like a good place to put it I paste this in here now then what I'm going to do is I'm gonna make sure I'm in the right place this is the load JSON function and it's right after the XML one okay so now I will really need to rewrite this quite a bit and I need to make this a little smaller can you still see this is this too small for you now I think I'll survive here loads a binary file from a fire all a URL and returns an object with a byte property containing a so what is it that it's containing when I my load bytes function it if I run the load bytes function it actually creates this with this you into eight array okay a array note that even if the JSON file contains an array and object so this is irrelevant this method is asynchronous meaning it may not finish before the next line in your sketch okay don't need JSON P so that can be removed now the method is called load bytes the parameter is a string which is name of the file or the URL to load object so I don't think I need the json p stuff that I don't need a callback and an error callback so I own a string a callback and an error callback function to be executed after load bytes completes data is passed in as its first argument function be executed if there is an error responses passed in as the first argument that makes sense return an object it only returns an object because the object has contains and a you int array bytes field property I'm gonna miss a property and then I'm going to say calling load bytes inside preload guarantees to complete the operation before we set up and draws called that is the case now there's an example here unfortunately I'm good what I'm going to do right now is I'm gonna take out the example maybe I can add one in later but I'm just gonna say to do add example and then outside of preload add example with preload outside of preload you may supply a callback function to handle the object to handle the data I'm gonna say and then what I'm gonna do here I'm going to delete this and I'm gonna say to do add add example without with callback wonder why it's sin texting house syntax highlighting because it's inside of this so this should really actually go probably like here yeah that's fine that's going to error on the tests okay so this to do is going to error on the tests what can I do here can I do this will that not error we'll find out so I'm trying to just add a note here to myself let's see what oh maybe this look this will just do oh yeah this is all I need to do okay so this all I need to do is add sorry I need to put this in comments I'm trying to figure out what it's expecting expecting JavaScript code here which I don't have ready to put so I'm gonna put this to do note with JavaScript comment okay what is this alt oh this is alt text I think this is like leftover from something that's not exactly right so this is a mistake I think I need to like take a look at this I'm gonna leave that there but this I don't think is right can we come back to that okay now I'm gonna get my code so I'm gonna change this to load bytes and I'm gonna go now to the code that I wrote another time and I've been sort of mucking around with it trying a few different things so what I'm gonna do is I'm gonna do this I'm gonna tape I'm gonna I'm gonna do this bit by bit I'm gonna just take out I was playing around with HTTP I'm gonna take that out so I'm gonna grab my code which is this and I'm going to copy it and I'm going to go back here and I'm going to I'm gonna leave this stuff here because you're gonna see why in a second because I actually uh what I want I want to retain this check for the data type argument so this is some code from load bytes which is checking to see here's that argument if it's a string I don't need to worry about this json p stuff so if it's a if it's a function and there is no callback then it becomes the callback otherwise it's the error and I can get rid of this and I can say I can say path should only the arguments index zero so this is actually this is probably more complex than it needs to be so I don't know if this is really necessary I but I'm gonna leave this like this so this is saying like oh this is already there you know what I'm gonna say yeah I'm gonna do this so this is a nice way I'm gonna leave it like this this is a way of just checking are there additional arguments if so put them in the right place then I don't want to do this anymore what I want to do is my own whoops load bytes code which is this and I'm gonna paste that in here now the difference is I wrote my code with a variable called data and the convention in p5 is return so I want to say var return equips return equals an empty object and then when the data comes in I'm going to say return dot bytes equals that array I'm gonna do the callback and then I also need to how do I have an error so on request dot on error this is my guess equals error callback so if error callback so I need to look up the documentation for this I need to look up the documentation I'm just guessing this on request is there a non error function Oh request onload oh request on air onload let's look for this oh yeah HTML request there's a there is a on load and is there or does this expect an error how do I get an error error notifications add event list so maybe I need to do this it looks like maybe I need to do this for the error lowercase on error but being told that maybe lowercase on error actually works so let's see if this is a function H HTTP XML rexella HCB requests on error yeah there's a non error there we go equals callback so that should work we're going to test all this stuff before I submit a pull request don't worry okay so now I think I've written my code I'm happy with it I don't have the examples but I have the stuff that's needed for the documentation I have a little description ah I am missing something though weirdly enough the way that p5 works when you have a function that it supports preload is I also need to register that function with load bytes I'm sorry register that function with preload so this has to go somewhere register a preload method now where does that go does that actually just go is that in this no so where does that happen in the p5 library hmm let's go back to the p5 repository and search for register preload method and let's look for code oh it's in core preload methods let's see hmm yep it's here it's in core so what I need to do is add it to this list we can see there's no load bytes in this list so I also need to go to core which is here under core core j/s let me look for a load JSON and find that here and now what I'm gonna do is I'm gonna put it right here as this in alphabetical order no I don't know that there's a particular logic to this order so I'm just gonna put it right after load XML I'm gonna say load bytes so I think that's probably all I need to do to get it to work with preload I think that's all I need to do let's just see I'm being in the chat I'm being told there might be a bug in the way that I called the date called a callback thank you for that so let me go back to files J s go back to my load bytes and I am calling the call back out with data which I renamed based on the p5 convention to ret okay so I think that's good all right so look we did it we're done goodbye I'll see you later no no there's so much more to do this is I think I have written all the code for adding the load bytes function to p5 now I've missed two important things one is I haven't finished writing the doc example documentation and two it's possible you know it is as in that thread that get up issue thread this isn't perhaps the ideal implementation of load bytes but it hopefully at least is one that works so now what I'm going to do is guess what I'm gonna do I'm just gonna run again NPM run grunt so let's just rebuild p5 I also haven't written any tests so I'll be back when this is done hmm okay this is good so this is no surprise there's no way I could have done that without getting any errors so I got some sort of error yes lint source failed so what did I do I wrote on so I have some some some code that doesn't that doesn't work that doesn't fit the Styles defined by the p5 opensource library oh boy boy there's a lot of stuff core js3 line 362 line 362 so let's go take a look at that core j/s line 362 oh boy what did I do what kind of horrifying something did I didn't make any changes here oh no oh no oh no something bad has happened I forgot I have had a beautifui jinn stalled and it's happens anytime I hit command s it reformats all my code with some styles defined by my atom beautify which don't match up with the p5.js library whoa so I got to undo out of this I really got to undo out of this I'm gonna undo out of this okay so now what I want to do here hopefully if I go back to because I didn't make any changes up here hopefully that's it now what I want to do is I want to go to my preferences packages atom beautify settings I want to go down to JavaScript and I want to disable this beautify on save I don't want to beautify this stuff I probably could like install the linting configure I could have all this setup in my text editor to check in advance but I'm not going to I'm gonna uncheck this I'm going to go back to core yes now why does it think there's still changes in cordage a/s mmm so let me do something here let me say I want to say git diff source core core Jas I just want to think what it thinks is different did I commit anything oh it's still this is still messed up hmm I could can I stash my changes yeah hold I'm thinking this could be edited out oh it's there I didn't undo it didn't undo past that oh because I didn't save it okay actually I did undo sorry I was confused so I undo out of that and save it now I've got to go to files dot yes now unfortunate what I'm going to do here I'm gonna do something a little bit insane which is that I'm going to grab my load bytes function I don't care if there are errors I need to fix there I'm gonna grab my load bytes function I'm gonna hit command X to get rid of it I'm then I'm gonna undo I'm gonna do undo all the way back to how this file was originally wow I made a lot of changes this is insane good thing I know I couldn't use get stash I probably just use gets so like stash all that now okay now I'm gonna hit save now this is if I if I if I do get diff I have made no changes from the p5 library I'm gonna make those changes again I'm gonna paste in my load bytes function I'm gonna hit save now I'm gonna go to court a as I told you this would go awry and I'm gonna look for lo JSON and I'm gonna add in my load bytes function I'm not no beautifying is gonna happen this time load bytes and I'm gonna hit save and now we can see core j/s has changed you can see by that Adam changed the color and files such as have changed but beautify didn't run I hope so now what I'm gonna do is I am going to try to run this again and hopefully I mean I'm sure I'm gonna be back it'll be some error other error you'll see me in a minute when the next error comes up Oh Kenneth Lim is there in the chat thank you for watching what time is it six o'clock alright failed alright alright I am back with more linting errors but at least there are only these linting errors in files digest so what's a path is assigned a value but never used ah I forgot like I've made mistakes in my code here that this is this is so good that it has linting because I I created this variable called path but then here I'm using file this needs to be path this definitely needs to be path here so that was a mistake you know I'm tempted to just run this again just to do one fix at a time because that fix might have that that might have messed up oh my goodness I think it got oh no it's doing the linting again so let's see if it gets past the linting this time it might have just only been okay more linting errors replace get with get so it wants me to use a single quotes I agree with you thank you p5 for making my dreams come true this should probably be single quotes as well okay so now that's good let's run it again I probably could run just the command for linting separately like instead of doing run grunt the whole time okay another linting error insert a semicolon line 752 a line 752 oh really really okay all right hey you want a semicolon there yeah at the end of this onload being equal to is it gonna want another one yeah oh yeah like I have one here that makes sense okay I'll buy that I'll buy that semicolon all right one more let's see if it gets past it let's see if it gets past the linting okay told to be request for the music up nope alright it didn't get past it we've got one more on Rick one our EQ is not defined Y is on our EQ not too fine I find by the way that often when I'm in here I'm shouting there's no reason for me to shout you can hear me just fine ah oh oh I just like have a total typo I have this says o n req when the variables name is ou re Q so this by the way is good evidence I have a linting tutorial by the way that well that that is out you can go check out my tutorial about linting this is why having linting especially with an open source library it's good I might have liked well I probably would've tested this at least tried to run an example before I submitted the pull request but has really helped me clean out and fix a whole bunch of things Thank You p5.js and your linting configuration let's try this one more time I'm feeling good feeling like it's gonna make it all the way through I'm looking at the chat just this will edit this part out okay it passed I rebuilt p5.js the entire JavaScript library with my new code in it and in fact if I go here now and I look there's a folder here somewhere oh it's probably in git ignore so it's actually not showing up because my atom editors configured not to show me folders but there is a folder called dist and I'm gonna manually go and look at it I'm gonna go into p5.js under wait wait it's not there under Lib Oh so hold on maybe it's not in distribution that's if I'm building a release sorry it's under Lib perhaps hold on Lib p5 yeah yeah yeah so it must have built to lid right we just look in that I just want to see I'm gonna I'm gonna say this over again yeah yeahjust is only gonna get him this is a file that was built today created at 546 today 69 okay great so let me let me go back here I'm just start from where here this is the sorry for those of you watching this live sometimes I do this because I like to edit this into a standalone video and I can like could have clean out some of the noise of it even though it's useful to see the mistakes and stuff but what I'm gonna do here is just come back here fake it okay look it built no errors I have actually now completely rebuilt the entire p5.js library with my new code all the tests passed you know with the caveat that I didn't actually write any tests for load byte so but at least I didn't break anything else that's in existing tests no linting errors my code style is right didn't complain it me that I'm missing something important so I can feel somewhat confident that I've done something that's reasonable now let's look let's look let's see okay so let's go into let's go into Lib so the built file is actually you can't see it here because it's actually in my atom editors configured not to show me files that are in get ignore but I can actually go here and open it up manually file open Lib this is the new p5 just library that I have now built manually and there's also this empty example this is wonderful because I'm gonna be able to now mess around in this empty example folder to test just sort of manually test to see if the code works so I'm gonna open this up and we can see we can look this has been built on March 12th that's today 2018 and I can look like I can do a fine now Adam is my complain at me because it's a really big file but I can look for load bytes look at this there's a there's a low byte that was that's not in p5 the code there's another load bytes there's another load bytes there's a load bytes is there and look at this here it is the load bytes method actually online 59 thousand thing 575 so this is now a version of p5 library it's not a rule it's not released it's not merged it's not part of the the actual p5 project yet but it did work to build a library so now what I'm going to do is I'm gonna go into this empty example now this empty example you'll notice points to those new built library files so I can start to test that code so what I'm going to do is I'm going to go to terminal here and I'm going to where am i I am in p5.js I'm going to go to to Lib I'm going to go into empty example I'm gonna run a little server just so the just so I can sort of see oh there's already a server running let me run a server on a different port then I'm gonna go to the browser and now now I can see okay didn't find these files mmm let's think about this oh you know why because I've got to go i its it needs I need to run the server I need to run the server from the from this directory right because empty that empty example points to these files so let me run the server from this directory and go to empty example now let's just see I'm in empty example let me do some stuff like create canvas 400 400 background 0 I won't make this part of my commit I don't want the empty example to be part of what I commit but I'm just messing around the code here just to test so here we go I can see okay so stuff is running now here's here is the real test let me just write the load bytes function in setup okay this is good that's an error I want if low bytes didn't exist is the p5 library we've got an error saying I don't know what load byte this so now I can I can kind of go what I have a some test code on my desktop where I have a data file this is some this is a binary file was 1000 cat drawings so I'm gonna copy that I'm gonna go to empty examples I'm gonna say just show and finder and I'm gonna go to empty examples and I'm gonna paste that in so now I have a binary file there I want to see that that so that binary file is there and what I want to try doing is I want to say load bytes cats 1000 dot bin so let's just see if I get any error there no error this is a good sign now here's the thing function let me put this in preload so did my preload integration work VAR data I'm just gonna be es5 for today equals load but I'll say let cuz that's how I can't say var anymore load bytes and then I'm gonna say console log data so let's make sure this works great the data is there that's the correct amount of data you know looking at some of the numbers I can see that this makes sense that I knowing what this file is this is the right kind of stuff there's a lot of black pixels and then some gray and white outlines so this looks like it's working and you know just to make sure preload is really doing what it should right it's empty there but by the time it gets the set up now what if I take this here and put it in set up now this shouldn't work because I'm no longer using preload right I'm no longer using preload so it's empty but I can add a callback I can say got data and I can write a function called got data with an argument data so this is the callback and I don't need to set it equal to anything anymore so this should now I don't need this draw function it's nice that that was there so this should now work I can see the data is there that's good and then I also want to let's test the error I'll so I'll call it got error so I have to make an error happen let's see if I can think about how to do that so let me consult log the error so let's see so this there shouldn't be in it no error happened that's good what if I change the name of the file there we go sketch so interestingly enough oh this is a problem so it called got error sketch touch yes no it didn't it it passed the error into got data so I have a mistake hmm I have a mistake somehow because the error got passed into got data hmm sorry I'm looking at the chat people are messaging me all sorts of things in the YouTube chat but I'm not really gonna be reading it okay so let me go so here's a problem I find I finding something that doesn't work correctly right Oh or okay I have a weird idea I have a weird idea of what the bug might be let me go back to files j/s I kind of I feel like this craziness that I did is kind of nuts so I'm gonna delete this because maybe the error callback actually was getting the wrong thing let me be more specific here so let me say equals equals arguments 1 equals arguments 2 so I'm just going to sort of more hard code in that the path is the first argument and what I probably want to do is I want to say if arguments.length this isn't I'm just going to do this for right now is greater than 1 then I'm gonna bake these two other callbacks and if arguments that length is greater than one set that else if arguments.length is greater than two this is very awkward somebody please give me a suggestion of doing this in a way that's more like p5 but let's just this I know will work like no error callback error callback so I'm gonna write it this way okay I'm gonna write it this way and then I'm going to build the library again and I'll be back once it built so this is the thing I can rebuild the library with my fix the code ah and I'll be back the p5 way is function path callback error callback right good point all right scratch all that this way that I wrote it here is is totally silly it would be interesting useful did you only need to do this kind of stuff if I need to sort of the arguments could come in in different orders of different types I need to test like there's an optional argument there's no optional argument here I'm just gonna say path callback I don't need to use the the arguments array let's simplify this and do this right so now these are optional arguments they will be undefined if they're not sent in so let me go back and run whoops let me run NPM grunt again and I'll be back assuming if there's an error or if everything passes all right I'm gonna let this run yeah all right whenever I hit on the dollar sign it tells me that it isn't available in my area I don't know what Livingstone is talking about oh you're trying to do the super chat don't worry about it you are watching from East Africa that is amazing to me don't feel you need to hit that dollar sign just watch share enjoy I'm thrilled to have you here okay all my tests passed again so now this was a lot of work just to see if that fixed the bug let's go back and let me hit refresh now and good no bad bad so that did not fix the bug so this file I'm getting the correct error 404 files not found but it's still passing the error message as far as I can tell probably because the risk all back so I think I probably need to think about this will there may be there's an error maybe this needs the error does the error does that is there an error callback that is part of Oh event we have to stop and think about this for a second no the Jas isn't cached because I have that right I should add some console logs in here for sure oh yeah let me just suck it thank you good quite good good point all right let me be really really sure about this and let me say console log error and then console log data so let me let me be really sure about this okay refresh data yeah it's definitely ending up in the got data function all right let's see Steven writes there is no error callback argument in onload you need to check error code okay so this event may be what it is that I need to do is is there does Oh a vent have an error code eight onload let's look at the onload documentation and how do I get the event status code and onload hold on sorry pause for a second here oh I know I mean I can just console log error oh I see okay so when this happens to me often what I like to do is go back to a bit of code without the library just so I can sort of figure this out before I put it into the library I thought I had done this already but I hadn't worked out the error thing so I'm actually gonna go back to this version of the load bytes function which is what I was working on previously just as like in a separate file in a p5 sketch and I'm going to I'm gonna what I'm gonna do there is I'm gonna say console dot log o event I couldn't do this in the library and rebuild the whole library but let's just go back to there and I have this sketch running in localhost 8080 the callback but let me I think this will be fine let me do this so now progress event I think there's this status someone was telling me bubbles cancel bubble current target path return value load something weird is going on let me let me add the callback because I want I don't want to do this with the callback got data got error well I don't have an error you just do got data function got data data console.log data let me get rid of the preload thing oops this is set up let me get rid of okay let me do this okay so this right so it's coming in here why on its oh it's status so it's not part of Oh event what's I'm looking at the chat to see if somebody says thing if request.status I can actually get the status in there okay thank you thank you sta RAK got it alright so what I'm looking for actually I didn't realize is in here let's console.log o our EQ let's console.log this variable and we can see there's the HTTP request there is a status and it got status 404 now here's the thing so what status do I get if it works so let's just console.log the status because there could be a lot of different error codes right isn't there an error callback though I kind of want the callback all right this doesn't seem right to me I mean III can keep going I'm gonna keep going with this so I put it back to the correct file 200 that's if it worked so basically I can check if it anything that's 400 or greater is gonna be an error so I could say I could say right here if status is greater than 400 maybe greater than 200 then air and error callback then I could say error callback and I guess I could just right now I could just pass it in an object so I could pass it in like but I feel like I should be giving the native error on ready state change function and Shep there or even on on request.readystate let's see five hundred plus maybe what Oh on error would be triggered by five hundred plus so what's a like if the network we're down like what if I turn my internet off now you might think oh no but is not reaching out so what if I get like a cross origin error all right let's I knew this was gonna become a problem I got to go it's 630 someone give me a quick on errors network errors for cores yeah I want that uh all right okay you know what the 404 I really shouldn't care so much because I can make the 404 error a special case because I'm actually I get the 404 error okay Austin in the chat is sending me a stack overflow question let's see how do find out Oh does not equal two hundred would be yeah that's much smaller I'm just much smarter hold on I'm off though I'm off the rails here let me just check something at the time wise what's going on here okay that or attach a reference to the request on the result object so it can be checked outside there was a super chat somebody's telling me oops I don't know how to find it well this YouTube interface is insane thank you super chat somebody tell me it's off the rails yeah okay wait hold on let's stop and think about this for a little while why not just check how it's done in outer p5 load functions oh why do you have to be so smart about things people watching the YouTube channel good point let me check that okay let me take this out let me go back all the way back to what I had oh I'm not even let me go back to here okay okay okay oh oh I should be using fetch no the reason why I don't want to use fetch is because Oh James Flynn thank you so much see now I see it from James Flynn even gives me a thing I can click on to see it thank you James Flynn that's very kind of you oh so I should be using fetch there's a polyfill in the build process of p5 hold on I'm off the rails here I'm gonna go and check does load JSON use fetch no it uses HTTP do that's why I'm not using fetch nobody's using a fetch ah the HTTP do use his fetch I can't this was not gonna work i th TV do is fetch underneath though okay its fetch underneath okay so but I feel like when I went down this road of using fetch cuz I did use fetch at one point like watch let's go find fetch if I go to mmm nest example I really have to go somewhat this is what I get for trying to do a bonus livestream in here and this right this is using fetch can I use fetch without a wait in all of this and promises global search in p5 Reuben is telling me that uses xmlhttprequest yeah I could just go with not checking it to be 200 I was trying to handle yeah that's a good point yeah you know what good point okay so I could go and use fetch I have to use the promise API yeah but but but I know it's polyfilled but I'm freaking me out I don't I know I could use a promise and that would be okay is our promises and other is there precedent for this though like are there promises used in the code base of p5 at the moment I know we want to refactor to do that someday it's too bad you guys are like way behind me HDTV uses promises oh because it uses fetch all right so let me just do this since it's not part of so what I could do is this basically I'm gonna grab this it's basically what I want so let's try this bear with me for a second camera went off so let's rewrite this I don't need this nonsense I don't need this nonsense oh but I have the oh wait thing oh it succeeds with any stats good alright never mind I got it I got it I got it we're gonna we're gonna go back we're gonna go back to redo redo no undo undo then redo okay okay yes I got you I got you everybody I got you everybody all right we do we do we do we do okay okay so now I'm in my example from before where I can muck around a little bit not get too stuck so what I'm going to do is I am going to just check thank you to the chat for pointing out that this variable inside of the callback on load function will give as a status property but I can say console dot log Oh our EQ status and what you will see if I have the correct right if I have the correct file name and I'm gonna go to this I will get the status code 200 if I have the incorrect file name I will get the status code 404 which makes sense 404 is an error code for file not found so what I'm going to do is I'm going to treat that as a special not as a special case but I'm going to basically say if a request static does status does not equal 200 and I'm going to do that and then I'm going to say if there is an error callback I'm going to do this in two separate lines just for right now I'm gonna say error callback I'm just going to pass in I'm gonna make up an error message with that status and so now I need to add file call back error callback otherwise called so and then I think when I went to call the callback I should say return so now so it gets out of here doesn't keep going back to do the response so now I should see whoops line 12 oh that only two equals there unexpected token line 15 no semicolon there okay let's get Jays line why Oh cuz I'm not passing in so I need to pass in oh this return should be outside of this if statement right so right now I what I did is if there's by not sending an error callback in nothing happens if I send an error callback in I can say function got error and I could say console dot log error now I get this status 404 so I don't know that's a little bit weird but this is something and now what I want to do is what happens if I try to use cores so I actually this file I mean if I try to use course if I try to request a binary file from somewhere on the internet that violates crossorigin resource sharing so that should give me a different kind of error so let's try a different kind of error I actually should have a I actually have some binary files right in this particular github repository and so I have this so I think if I go to view raw and I take this link let's see if I pass this in now will it maybe github actually I think unless I'm staying raw yeah this is not correct let's see what happens don't be definitely getting an error let's see what happens of course it blocked with cores okay good so I got this error it wasn't the right URL but just some arbitrary URL that was blocked with cores but no error callback got called but now I should be able to add down here on error equals error callback so I should I am going to manually execute the error callback here if there's a weird other status or I am going to just give it the air call back here and there we go I got the error here sketched out J s line 10 it gave me the hole excuse me the whole error hold the whole thing here frankly I don't p5 is already I'm already getting these errors so I don't know that I really need to do this error callback but yeah it's all but so this may be a bit of overkill but I've kind of looked into this and figured this out I'm going to now grab this bit of code where I check the status now and go back to my working on the actual p5 library I'm gonna go to files dot J s I'm gonna go to my load bytes function and I am going to add that in here so I'm going to you know what I'm gonna do actually for right now I'm just gonna say return because the truth of the matter is that error is going to be reported any way into the console so I think it actually makes more sense for me to just not don't go through with any of this other stuff and I think that ultimately makes more sense and then here I can also I don't know that I actually need this but why not leave this here alright so I think I think I'm gonna leave it this way so this is just like if it didn't work don't bother to try to pass it although the preload thing it'll get stuck in preload what will this do to preload okay let's build the library again let's build the library one more time I'll be right back don't treat I'm told not to treat status codes like integers so it's standard is to hang preload if it fails so this is fine okay so is my naught equal to 200 some sort of bad idea I should do not I should just do the the less formal in case it gets a string to string 200 Oh 200 and 300 or no errors 200 and 300 are all valid okay breaking news from the chat I'm being told that the status code 300 is also valid so why don't we just say if it's greater than 300 for right now are there other status codes between 200 and 300 100 is also possibly valid so when I just say greater than is it really just let's just say greater than 400 that's really the only errors I care about let's run let's run NPM grunt run grunt one more time I'll be right back and might one greater than equals okay and I'm being told that 400 might actually be okay so I'm going to say greater than and equals everyone in the side I've seen so many messages saying greater the people it's greater than equals greater than it equals so let's now we're I think we're golden now I think we've got it I'll be right back let me send the text message I'm gonna be home late when you run all the tests are you sure Rome you Lena asked are you sure the API doesn't provide us successfully and that translates from all the codes I am Not sure at all xmlhttp readystate triple equals four somebody will comment on my pull request and I'll change it later appointed okay it's done let's do some more checks okay so let's see here let me check now my empty example again let's just first see if it works correctly so I've got the got data and the got error callback so I am now going to check the example and we can see okay it works if I give it a nice binary file it if I give it the wrong file name great it gives me an error that's what I want the callback never happens because there is nothing to get file not found that's what I want let's see if I give it a URL that's like doesn't exist what does that do all right Oh got a 404 and it also got a No so this is fine and it got an error so that's fine I'm getting everything getting everything I want with the error callback maybe I want something more specific here but I'll leave this here and then what I'm gonna do is let me check preload again let me just check make sure preload is not broken and so I'm gonna say function preload and let data data equals load bytes with this madeup URL and let's say let's console.log the data okay so now I just want to check preload this is the preload code with let me check it first with an actual correct file whoops oh I hope in a console.log the string data I want to console ugh the data perfect now let me check it with a file that doesn't exist hangs and this is the actual this is what p5 does natively it hangs if the file doesn't exist it doesn't keep going so that's what it should be doing and then let's if I get a cours error across origin resources like I try to access some URL great perfect not found and that error so this is all perfect this is exactly what I wanted to do my tests have passed guess what I'm pretty much done that was a very loud Bell ok so now what happens now I want to say git status just to see what's going on in the repository so whoa where am I here modified oh yeah sorry so I've modified a bunch of things I modified empty example sketched out yes that's not part of the work that I'm doing I've modified core Duchess that is part of the work I'm doing I modified file such as that's the work that I'm doing I have not if I've added this weird binary file that's just for my own testing I don't want to deal with that so what I want to do now is I want to say git add source core core Dutchess because I want to add these changes to court Jas then I want to add a source I owe files dot yes ok then what I want to do is I want to say git commit oh boy it's gonna run something for me wow so there's and now ooh it is giving me now I can write my commit message ok implementing load bytes this is relevant to issue two six seven four and also there's another issue that it's relevant related to did this get closed oh I think this got closed this is so I'm not going to tag I'm not going to tag this particular issue so then I'm going to write this pull wrote this pull request I'm not gonna say pull request this commit adds load bites adds the load bites function to p5.js as demonstrated during a live stream on the coding train there are some there are some remaining issues here for example there are no tests and I am also not using HTTP do which would be more of the convention here for p5 as discussed in issue 2 674 I also I am also handling errors like 404 or cores in perhaps an odd way and would be happy for any feedback okay so this is my nice long commit message and what I'm going to do is I'm now going to so I have I have my git commit tied to Adam so I can now so I can write a nice long thoughtful commit message this will all be ignored this is just information for me I'm gonna hit close and now I'm going to look at terminal and the commit has been made to the add load bytes branch and now I am going to say now I'm going to say git remote V so the remote that this is tied to is the coding train a fork so I can say I'm gonna say git push origin load what did I call this branch get git branch add load bytes get push origin add load bytes so I'm gonna push if I have been needing this to master by the way I could have said push my changes to master to a new branch called add load bytes but since its I mean a branch already I would say git push origin add load bytes I forgot to your diary should I amend I definitely think I need to amend that I forgot okay so here we go I pushed it there now I'm gonna go to I'm gonna go to my fork who here is it so many things open I'm gonna hit refresh and look at this less than a minute ago I pushed this add load bytes branch I can now do compare and pull request compare and pull request I'm eyes right so this is now saying hey I'm going to I want to pull request add load bytes from coding train /p v GS to processing p5 just base master and then I think what I want to do is I want to suggest some reviewers so Kenneth Lim should definitely be a reviewer Kenneth Lim posted some great comments I don't know if oh I should definitely add something so when I did my commit message it had these like line breaks in it which are bothering me here and I also want to add some formatting like this the back ticks to format this I should say a thanks to for for for this branch which was a nice reference for me so I just wanna add a little thank you here too and I'm gonna go back to my my code where I kept a little this URL to remember it so and then I'm gonna write Oh it's okay if this doesn't get merged hopefully doing this on a live stream was helpful to somebody all right so now we're gonna look and see like look there's the change I made here's the load bytes function Oh also also an example code is missing finally I am not used to I'm rewriting my message dear diary Sincerely Yours the coding train okay looks like this URL wasn't copied correctly let's see yeah it looks like it wasn't either nope it works this is the correct URL okay so let's now go back and say preview and this can actually because of a nice way that it's rendering this can just go like this let's read this over implementing load bytes 264 dear diary this commit adds the load bytes function to p5.js as demonstrated during a live stream on the coding train there are some remaining issues here for example there under tests also example code is missing finally I'm not using HTTP due to morph de convención for p5 as discussed I'm also handling errors like 4/4 and perhaps an odd way ba ba ba thankful ba ba ba ba it's ok it's ok if this doesn't get merged hopefully doing this one last year was helpful to somebody okay all right I think we're ready everybody I think we've now come to the end of this video I think we've come to the end of this video drum roll please we are going to create the pull request and that was a 73 and full hour and 42 minutes video of me attempting to submit a pull request to p5 yes live on YouTube there is a mistake what's the mistake yeah if there's errors in the commit message I think that's okay somebody was telling me there was a mistake happy have oh happy oh that's fine happy to have any feedback I will just edit my comment there thank you alright so I don't know much yeah so Matt you know when uh if you end up watching this live stream as I know you probably will I do think that this could get edited into a useful video and we could probably cut out large swathe of me trying to like sort out the error code stuff and I wouldn't be maybe what I'm gonna do just for like later I'm gonna do something here okay I'm gonna just in case this helpful I'm gonna because I would like us to see if this could be 45 minutes or less okay I would like this to be published as a video that's 45 minutes or less so what I'm gonna do I'm gonna I'm gonna I'm gonna make that happen I'm giving a quick intro to the video you're about to watch where I attempt to make a pull request to the p5.js project and what I'm at trying to add is the load bytes feature now all that will be explained in the video but I ran into some like debugging issues that are not really relevant for the pull requests aspect of the video so there's gonna be some strange cuts in it of me trying to where I did a lot of debugging in between you're welcome to also check the video's description for the link to the full hourandahalf livestream but hopefully this video is much shorter and you're gonna get like the essential parts of it okay enjoy this pull request video all right now definitely don't edit out the nyan cat yes now I'm also going to ooh me I am sooo me left some review comments already awesome can I suggest me I am so mean I guess you have to be a member of the organization to review I could also request a review from Lauren McCarthy who is the creator of p5.js so let me just just in case hi it's weenie weirdly in the middle of this video I got really stuck just now trying to figure out how to deal with error codes so I'm going to cut out all of the research and clicking around and trying to do that and just come back to the point where I figure out like let me just implement the error codes this way just to try to make this video short if you want to see all that inbetween stuff this is way too long for a little interstitial this okay hold on hi it's me in the middle of this video weirdly there's a weird jump cut here because I spent a lot of time trying to figure out what to do with all the different error status codes I'm gonna cut all that out in the video just get to the point where I add some new code to deal with that if you want to see that whole debugging section check this video's description for the link to the original livestream okay keep watching if you want I don't know that you could I don't know if we need that in the middle hopefully we just have weird jump cuts and it's fine let's take a look at the comments how do I find the review comments conversation oh okay great thank you for this so this is great so me I am Samir already put in a nice comment here so maybe I'll adjust that later it's a video subscription instead of video description all right let me try this one I've always wanted to do this this could be the time alright we're gonna do it this time I've always wanted to do this hold on a sec it green only yeah here we go weird alright this video stopped at a weird biola I'm pausing this video because what happens next is me spending like a really long time trying to figure out what to do with error codes and the error callback and that's not really relevant to the pull request aspect if you want to see that part check the video description for the whole hour and a half livestream but I'm just gonna jump now to the part where I figure out what to do with the error codes and continue all right hope you're just playing this video panky you keep watching maybe okay so that could get green screened on top I think of be like the video pauses record scratch sound I come on in that type of thing okay I think that's gonna work alright everybody so I have a I have to go but let me make a few important announcements by the way people are saying please mean this you have no idea you this is not to be mean go back and try to find the live stream where I talked about net neutrality I've got like a baby like 45 minutes of me doing weird stuff in front of a in front of a green screen alright so I need to talk about a couple things really quickly number one I will be back together to talk about one thing I will be back on Wednesday morning 1030 a.m. Eastern Time what I will be doing oh and actually let me shout this out because this is really wonderful the stem coding YouTube channel from let's see if I can find this from Professor Chris Orban at OSU I mean I'm going to shout this out on Wednesday because I think I'm going to use the tutorial stem Cody if anybody can find this faster than me stem coding YouTube Orban maybe that'll get me there yep here we go okay so this is the stem coding YouTube channel I want to look just look under videos and PI day so this is a YouTube channel that has a lot of wonderful coding tutorials and stuff with p5 and they have a video about calculating all the digits of pi so anyway I was using it looking at this I might use this as a reference for some coding challenges on Wednesday I encourage you to check out this video in this YouTube channel they've got a lot of wonderful students and different people who present but what I have here is you can suggest a pide a coding challenge I obviously won't be able to do all of these so you can suggest ones or you can look through these and what I would ask you to do if you like one put a thumbs up reaction so let's see pi calculate the nth digit you will be using a neural net no no no I hope I can deal with that visualize aspects that make up pi whoa whoa ok I'm just gonna pick one to arbitrarily 3rd search for words in PI I like this one so I'm gonna thumbs up this one so you if you like one of these suggestions put a thumbs up there yeah so people are noticing ok so people are making making the point of again we go back to YouTube stem coding I'm going to explain something because this is only gonna come up more and more if you look at my suggestions on YouTube you might be wondering why are these all my suggestions but the reason is I am logged into a YouTube account which is Cody green which is tied to this email address coding rainbow live at gmail.com and this YouTube is a youtube account that I also purchased YouTube red for so that if I show a video in the live stream that the ads don't come and also I my kids watch YouTube and I don't want them to have to see all the ads so I've purchased YouTube red so that they don't have to see all their ads and you can see that this is a they'd like to watch a zelda videos Zelda is very big in our household right now stay tuned for the coding trade gaming channel where we play Zelda all day I'm sure everybody wants to watch that and so but I was talking about PI so anyway submit your challenge ideas up the ones that you like sort by most reactions so right now the one that is has the most up votes is search for words in PI and I'll be back this Wednesday morning okay so hello to Israel build breath of the wild probably not going to happen I hope that this ends up with something oh and Simon Simon Tiger rights going to make a github issue related to PI wonderful alright so I'll see you all on Wednesday thank you for tuning in this has been the coding train with your host person who gets really you thinks that just making a quick pull request video about load bytes will just take 45 minutes and then ends up spending like two hours livestreaming I've really gotta go it's way after 700 let me check my messages everything's fine and I'll see you on Wednesday okay well goodbye hello to France Bonjour and what a binge lots of questions here okay I've got to go see you all
