With timestamps:

00:00 - hey everybody so I haven't been making a
00:02 - lot of videos recently I've been deep
00:04 - into the throes of writing the new
00:07 - version of the nature of code book and
00:08 - I'm pleased to report that I am making
00:10 - progress at the end of this video maybe
00:12 - also go back to that and let you know
00:13 - more about what you can find but this
00:15 - wonderful thing happened I was busy
00:17 - rewriting chapter six a chapter about
00:19 - rigid body and soft body physics with
00:22 - different kinds of libraries matter.js
00:24 - and toxic lips.js and I saw this tweet
00:27 - it was a month ago from yuhani hakomaki
00:30 - this incredible beautiful world of blobs
00:34 - all collided with each other and I just
00:36 - thought to myself this reminds me of a
00:39 - project that really got me inspired to
00:41 - write the original nature of code back
00:43 - in 2008 called Nokia friends this was a
00:46 - project by Karsten Schmidt with a bunch
00:47 - of cute cuddly little squishy characters
00:49 - that bounced around now that project was
00:52 - built with a library called toxic Libs
00:55 - toxic Libs started I think around 2005 a
00:58 - sweeping and pioneering open source
01:01 - library for computational design it
01:03 - wasn't just one little Library it had
01:05 - multiple packages geometry 3D 2D audio
01:08 - color utilities physics so many more
01:11 - things and it was available for
01:13 - processing which was the environment I
01:15 - was learning and using the most at the
01:17 - time now that library is no longer
01:19 - maintained and you should really check
01:21 - out what Carson Schmidt is currently
01:22 - working on at
01:24 - fingthi.ng I'll put links all over the
01:26 - screen and in the video description but
01:28 - I just can't stop using toxic Libs it
01:30 - has a special place in my heart it's
01:32 - critical to the history of computational
01:34 - design and generative art and there is a
01:38 - wonderful Port of it from Kyle Phillips
01:40 - haptic data online into JavaScript so
01:43 - toxiclibs.javascript is still on the
01:45 - internet today it works it's supported I
01:48 - am excited to use it so I want to make
01:50 - my own squishy cute soft body character
01:53 - as a coding challenge in this video
01:55 - using toxic Libs JS before I dig into
01:58 - the code let me tell you about some
01:59 - really important references that you
02:01 - might want to dig into if you want to
02:02 - know all there is to know about soft
02:04 - body physics so the seminal paper in my
02:07 - mind is called Advanced character
02:09 - physics it was published in 2001 by
02:12 - Thomas Jacobson as part of the game
02:14 - developers conference and Jacobson was
02:16 - working for Io interactive a game design
02:18 - company and developed these algorithms
02:21 - in this methodology for the game Hitman
02:23 - code name 47 and the implementation of
02:27 - what's called verlit physics in the
02:29 - toxic lips Library would match exactly
02:31 - what's in this paper you might have also
02:33 - heard of a game called jelly car and
02:35 - there's a recent wonderful YouTube
02:37 - explainer that goes through everything
02:39 - about how the soft body physics in that
02:41 - game was implemented and how it all
02:43 - works now in this video I'm going to be
02:46 - using toxic Libs as the physics library
02:48 - but there are plenty of other physics
02:51 - libraries that you could consider doing
02:53 - something similar with
02:57 - two that I would mention that I've made
02:59 - videos about before quite old videos box
03:03 - 2D and maybe a little bit more recently
03:05 - matter.js so I will include links to all
03:09 - of that material in this video's
03:10 - description as well all physics
03:12 - libraries tend to come with some number
03:16 - of elements that Define the world and
03:19 - the things in that world in toxic Libs
03:22 - in the toxic lips of verlid physics
03:24 - there are three four or maybe five
03:26 - things that I want to talk about foreign
03:30 - [Music]
03:35 - the first element that's critical for
03:39 - the physics simulation is the world
03:40 - itself and you can think of the world as
03:43 - the P5 canvas
03:46 - then there is the concept of a particle
03:49 - a single point in that world now I'll
03:53 - probably choose to draw the particle as
03:55 - a circle but in the actual physics
03:57 - itself it is considered to be a single
04:00 - point Mass it does not have any geometry
04:02 - this is a pure soft body world that we
04:05 - can build geometry in out of particles
04:07 - but if you're interested in rigid body
04:10 - physics that's where you want to go back
04:12 - and look at some of these other examples
04:13 - of physics libraries if you have two
04:16 - particles particle one and particle two
04:19 - they can be connected with a spring
04:24 - other terms for this might be joint or
04:27 - constraint the idea is that there is
04:30 - some relationship between these two
04:32 - particles governed by a force that obeys
04:36 - hooke's law Springs and if you want to
04:38 - learn more about how to implement your
04:40 - own spring Force oh yeah guess what I
04:42 - have a coding challenge video all about
04:44 - that for you to watch
04:46 - a behavior is the idea of a force that
04:49 - can be added to either the world or to
04:51 - an individual particle so there's such
04:52 - thing as a gravity Behavior if I put
04:54 - that in the world then all the particles
04:56 - experience gravity there's an attraction
04:58 - behavior that I could add to an
05:00 - individual particle and then all the
05:02 - other particles are attracted to it make
05:03 - it negative it's a repulsion Force lots
05:06 - of possibilities there we'll get into
05:07 - that as I start coding I should also
05:10 - mention that there are classes in toxic
05:11 - lips for geometry so I'm not going to be
05:15 - using P5 Vector which is what I
05:17 - typically use in most of my examples
05:19 - because toxic lives has its own vec2d
05:23 - object and there are other objects for
05:24 - other kinds of geometry and I'll get
05:26 - into them as I need to use them all
05:28 - right let's dive in and see if we can
05:30 - create a sketch that has a physics world
05:32 - two particles and one spring that
05:34 - connects them and maybe a gravity
05:36 - behavior that I think we could do pretty
05:38 - quickly and easily and then we'll move
05:40 - on to seeing if we can build an entire
05:42 - character out of particles and springs
05:44 - I'll be demonstrating this with the P5
05:46 - web editor if you want to follow along
05:48 - I'll link a sketch that is blank but has
05:51 - the toxic Libs Library imported as well
05:53 - as the p5.js library and then of course
05:55 - I'll have a link to the end result of
05:57 - whatever I code in this particular video
05:59 - alright first up I want to make a
06:01 - physics world so I'm going to create a
06:03 - variable call it physics
06:06 - the full name for a physics world with
06:09 - toxic lips is verlit physics 2D I
06:12 - imported the library and yet it says
06:15 - Verlin physics 2D is not defined the
06:17 - toxic lips JS website has a getting
06:19 - started section which will walk you
06:20 - through how to get going with the toxic
06:22 - Libs Library the original documentation
06:25 - for the Java version is no longer online
06:27 - but I see it as a personal mission to
06:30 - keep these things alive so I have
06:31 - actually hosted that Library revived it
06:34 - at a GitHub repository that I've set up
06:36 - that I'll link to in the description and
06:37 - what you'll see here is that the verlid
06:41 - physics 2D class is part of the package
06:46 - toxic.physics2d toxic lips if you
06:48 - remember is a suite of many many
06:50 - different libraries all bundled together
06:52 - if I want to create a virlyph physics
06:54 - world I've got a reference the full path
06:58 - but this is fairly inconvenient to have
07:00 - to do all throughout the code so I'm
07:03 - going to use something called object
07:04 - destructuring to pull out the classes
07:07 - that I intend to use from the toxic Libs
07:09 - packages
07:10 - [Music]
07:11 - foreign
07:12 - [Music]
07:16 - make a short little quick video on
07:18 - object restructuring if you want to see
07:19 - that let me know in the comments but
07:21 - what I'm doing is toxicity.physics2d is
07:24 - an object with properties and I'm
07:26 - pulling those properties destructuring
07:28 - the object out into individual variables
07:31 - with the same name through this syntax
07:33 - and even though I like to just use let
07:36 - everywhere to make things friendly and
07:38 - less confusing this is probably a case
07:40 - where I really should declare these
07:42 - variables with const because they're
07:45 - never going to change now in addition to
07:47 - pulling out the verlid physics 2D class
07:49 - I also have access to the verlit
07:51 - particle 2D
07:55 - and I have made a verlid particle at
07:58 - x320 Y100
08:02 - let's draw that particle
08:05 - and there it is but it's not
08:07 - experiencing any physics yet how about
08:09 - we add a gravity Behavior to the world
08:12 - oh I didn't import the gravity Behavior
08:18 - there we go now I have access to gravity
08:20 - Behavior
08:22 - now to make a gravity Behavior I need a
08:24 - vector to say what direction is the
08:27 - gravity pointing in and how strong is it
08:31 - this would be a vector pointing down oh
08:34 - but I've got to import that vector class
08:38 - the vector class is actually part of
08:41 - toxic.geometry rather than physics now
08:43 - I'm not seeing the gravity yet this is a
08:45 - really critical thing about toxic Libs
08:48 - and most physics engines just because
08:49 - you create a particle a behavior a
08:53 - spring it doesn't automatically activate
08:56 - within the world unless you explicitly
08:58 - add it to the world so I need to say
09:00 - physics add Behavior gravity
09:05 - what did I miss here okay so I'm getting
09:07 - a weird error here it's undefined I made
09:10 - this Vector but I forgot to create the
09:12 - gravity with that Vector so that should
09:14 - go there and there we go
09:17 - still no gravity now I like to write
09:19 - things out in many separate steps
09:21 - because it makes it a bit easier to
09:22 - follow especially if you're new to this
09:24 - but I do want to point out that I don't
09:27 - have to make a separate variable for V
09:29 - in a separate variable gravity just to
09:31 - prove that point I could create the new
09:33 - Vector right here when I make the
09:35 - gravity behavior and I could do the same
09:37 - thing with the gravity behavior in the
09:39 - add Behavior function but I'll leave
09:41 - that to you still though no physics
09:43 - happening guess what I'm missing I made
09:46 - the gravity and added it I made the
09:48 - particle but I didn't add it
09:52 - everything that I make I have to add
09:54 - explicitly to the physics world
09:57 - but I still see no physics I've
09:59 - forgotten a critical step and in fact
10:02 - that word step is maybe a clue if you
10:05 - are used to P5 you're probably used to
10:07 - the idea of time moving forward by the
10:11 - draw function looping over and over
10:12 - again you've always controlled your
10:14 - animation and behaviors through that
10:17 - fact through the fact that you have a
10:19 - variable that you change and you draw
10:20 - something one way then draw loops and
10:22 - you draw something another way and so on
10:23 - and so forth the draw Loop is continuing
10:26 - to Loop but the physics world is not
10:29 - moving forward in time it's up to us to
10:31 - specifically tie those two concepts
10:33 - together
10:35 - the physics World takes a step forward
10:38 - in time when you call physics dot update
10:41 - the easiest way to have this all work
10:43 - then is to just have physics update
10:45 - happen every time through draw there are
10:47 - all sorts of ways we could get more
10:48 - sophisticated about that but this is
10:49 - going to do the job for us and as you
10:51 - see now gravity is in play let's add a
10:55 - boundary to the world
10:57 - I need that rectangle object from toxic
10:59 - geometry
11:00 - [Music]
11:05 - there we go I can create a rectangle
11:07 - that is exactly the dimensions of the
11:09 - canvas and I can make that the world
11:11 - bounds of the physics world and sure
11:13 - enough the particle stops when it gets
11:15 - to the bottom let's add a second
11:16 - particle
11:21 - [Music]
11:24 - okay so now I created two varlet
11:26 - particles added them both to the world
11:28 - and I'm drawing both of them it's time
11:31 - to return to this diagram and look at
11:34 - how I would add a spring to connect
11:37 - these two particles now when I created a
11:41 - particle I only needed two arguments an
11:44 - X and A Y for the coordinate of the
11:48 - particle on the canvas a spring needs
11:51 - four arguments the two particles that
11:54 - are going to be connected let's call
11:56 - them A and B then the rest length of
12:00 - that spring
12:02 - what is the length that it wants to be
12:04 - call that length
12:06 - and then the strength of that spring
12:11 - this is a number between zero and one
12:14 - where one would be very rigid as if
12:17 - there's a metal rod between those two
12:19 - particles and all the way down to zero
12:21 - very elastic as if it's just gonna the
12:24 - particles are going to melt away and not
12:25 - be able to hold together I'll make a new
12:27 - variable called Spring
12:30 - and spring is a new verlit spring 2D
12:35 - that connects particle a and particle B
12:39 - maybe a rest length of 100 pixels
12:43 - now let's try a strength of 0.5
12:46 - what did I forget I also have to add the
12:49 - spring to the physics world
12:53 - and there we go did you see that lovely
12:54 - little bounce
12:56 - it's kind of amazing that it just stays
12:58 - perfectly upright I assume if I move
13:00 - maybe the particle over a little bit
13:04 - yeah it's going to fall over now
13:06 - remember there's no geometry here the
13:08 - spring is just a force that's acting
13:10 - between those two particles but I could
13:11 - draw a line to help me visualize what's
13:14 - going on
13:19 - let's add a third particle
13:23 - [Music]
13:29 - and let's connect particle B to particle
13:31 - C
13:31 - [Music]
13:33 - foreign
13:36 - [Music]
13:39 - just happened there it's really hard to
13:42 - understand what's going on without all
13:44 - the elements being drawn which is
13:45 - something you could use to your
13:47 - advantage depending on what application
13:48 - you want to make but let's draw that
13:50 - other line
13:54 - aha oh
13:56 - next I want to show you how I can make
13:58 - this interactive so something that you
14:00 - can do with a particle is you can lock
14:02 - it into place for example if I were to
14:05 - say particle a lock
14:09 - now everything is going to swing from
14:10 - particle a and in fact I have a nice
14:12 - little double pendulum simulation
14:14 - already going but once I've locked a
14:17 - particle I can also manipulate its X Y
14:19 - position without it participating in the
14:22 - physics
14:24 - [Music]
14:26 - and then unlock it
14:29 - so now as I move the mouse around I can
14:31 - kind of Swing this lovely little double
14:34 - pendulum all over the place let's have
14:36 - that only happen if I'm holding down the
14:38 - mouse
14:40 - [Music]
14:43 - The Logical Next Step would be I've got
14:46 - a connected to b b connected to C let's
14:49 - connect a to c
14:52 - foreign
14:55 - [Music]
14:59 - I've got a nice little squishy triangle
15:02 - now that I can toss around and enjoy now
15:05 - if you look at this code it's a lot of
15:06 - repetitive stuff I mean I'm numbering
15:09 - things ABC one two three I could
15:11 - definitely use an array I've got to say
15:13 - add particle for everything I've got to
15:15 - draw all the circles and lines
15:17 - separately there has got to be a better
15:19 - way so what I want to do is completely
15:22 - reorganize this code in a way that will
15:24 - allow me to expand it to create much
15:27 - more sophisticated soft body shapes
15:30 - let's take a minute to think about what
15:33 - it is that I want to do here
15:36 - I currently have a shape that has three
15:40 - points
15:41 - all connected with springs but maybe
15:44 - what I really want is to make some kind
15:46 - of
15:47 - Blobby cute character
15:50 - and it squishes and squashes and moves
15:53 - around the canvas I've got to think
15:55 - about
15:56 - where are all the particles
15:59 - how many do I have
16:02 - and if they're all connected with
16:04 - springs this could be a good starting
16:06 - point but the whole thing is probably
16:08 - just going to collapse unto itself so
16:10 - what if I built some sort of shape but
16:13 - added some additional Springs just kind
16:15 - of across the middle maybe I don't draw
16:17 - those to hold the thing together so in
16:20 - order to be able to build something like
16:22 - this I need to First reorganize my code
16:24 - so I can manage all the particles and
16:26 - springs in arrays and then I need to
16:29 - think about the design of the skeletal
16:31 - structure of this particular character
16:33 - and then how I'm going to layer a
16:35 - drawing on top of it so number one every
16:39 - time I make a particle I'm using the
16:41 - toxic Libs verlit particle 2D but I want
16:45 - to have my own particle I maybe want to
16:47 - keep track of things like its size maybe
16:49 - I want a function that draws it I want
16:52 - to have my own particle class
16:56 - so I can create a particle.js file
16:59 - add a reference to it in index.html and
17:03 - then go about writing my own class
17:05 - [Music]
17:10 - so this is boilerplate code of a base
17:13 - particle class it's got an x a y an R
17:16 - for radius all of those are initialized
17:18 - in the Constructor and a show function
17:20 - to draw it as a circle but I also want
17:23 - this particle to have everything that a
17:25 - Verlin particle 2D has now if you happen
17:28 - to watch some of my other physics
17:30 - Library tutorials I would often do
17:32 - something like this
17:35 - in this case I have as part of the data
17:38 - of the object a reference to another
17:40 - kind of object so it's essentially a
17:43 - wrapper class my particle class is a
17:45 - wrapping the idea of a virulent particle
17:48 - and in this case I could probably get
17:49 - rid of the X and the Y and then in here
17:52 - I'd have to say draw The Circle at this
17:54 - dot particle.x this dot particle dot y
17:56 - but there is another way this makes
17:59 - sense in some scenarios but here I can
18:02 - use the power of inheritance this is
18:05 - something that I cover in chapter four
18:07 - of the nature of code and you can go
18:08 - back and watch the particle System
18:10 - videos where I look at inheritance and
18:12 - something called polymorphism in more
18:14 - detail but for right now all you need to
18:17 - know is that if I use the keyword
18:20 - extends and say that my particle extends
18:24 - verlid particle 2D
18:28 - then suddenly it's as if I copy pasted
18:31 - everything that's part of verlid
18:33 - particle 2D into my particle class only
18:36 - I don't have to copy paste it it's
18:37 - invisible it's inherited all of it and
18:40 - in fact this is all the code I need
18:42 - except for one more change it's not up
18:45 - to me to initialize the X and Y
18:47 - properties of that particle I want toxic
18:50 - lips to do that for me so I can
18:53 - reference the parent class furlit
18:55 - particle 2D with the keyword super the
18:58 - parent-child relationship is often
19:00 - called the super class to subclass
19:03 - relationship
19:05 - so now I have my own particle class
19:07 - which is exactly of earlier particle 2D
19:09 - but I've added a radius and a show
19:11 - function and I could go back into sketch
19:13 - and replace all these
19:16 - code still works now look at this every
19:20 - particle I'm making I'm adding to the
19:22 - physics world and that's really going to
19:24 - be the case 99 times out of 100 if I'm
19:26 - making particles I want them to
19:28 - experience the physics I'm not making
19:29 - them just to leave them out so a nice
19:32 - feature that I could add to my particle
19:34 - class is for it to be responsible for
19:37 - adding the particles to the physics
19:39 - world so when I create a particle the
19:42 - Constructor is called and right there in
19:44 - the Constructor I can say physics.ad
19:47 - particle now what is it that I'm adding
19:50 - I'm not adding a specific particle I'm
19:52 - adding this particle inside the class
19:55 - the way you reference any generic
19:57 - particle is with the keyword this this
20:00 - particles X this particle is y this
20:02 - particle
20:04 - now I could also replace the calls to
20:06 - Circle and draw with the show function
20:08 - [Music]
20:12 - great we're still cooking here
20:14 - let's give the Springs the same
20:16 - treatment I gave to the particles
20:19 - [Music]
20:26 - okay
20:29 - here's the spring class which extends
20:31 - verlit spring 2D calls the super
20:34 - Constructor adds itself to the physics
20:36 - world and then draws a line now you
20:39 - could make the case that I've done a no
20:41 - no here in that I'm referencing a global
20:44 - variable the physics world inside of the
20:46 - class maybe that should be passed into
20:48 - the Constructor but I just want to keep
20:51 - things simple for myself in this case I
20:53 - have one physics world for this whole
20:55 - project and I'm just okay with
20:57 - referencing it as a global variable here
20:58 - in the class even though that's not
21:00 - necessarily the best object oriented
21:02 - programming practice now back in sketch
21:05 - I can change these to my own Springs
21:10 - and I can call the spring show functions
21:16 - and we've got exactly the same
21:18 - functionality working but I am now using
21:21 - my own particle in spring classes which
21:24 - is going to open up a lot more
21:25 - possibilities in terms of how I design
21:28 - and visualize them how they behave what
21:30 - other properties they have and so on and
21:32 - so forth all right next up let's change
21:35 - three separate particles in three
21:36 - separate Springs into arrays
21:39 - [Music]
22:00 - foreign
22:01 - [Music]
22:06 - there we go I am now putting the
22:10 - particles and the Springs into arrays
22:12 - I'm still individually making them you
22:14 - might have your own ideas for how you
22:15 - might automate that process but I want
22:17 - to design this character by hand but the
22:20 - really nice thing here is I can iterate
22:22 - over the arrays to draw all the
22:24 - particles and draw all the Springs let's
22:26 - take out the Gravity from the world
22:28 - right now
22:30 - and let's make the Springs a little bit
22:32 - softer
22:34 - all right what could be a simpler
22:37 - version of this I have a triangle what
22:40 - if I did the following
22:43 - what if I design my character to be
22:46 - something like this let's start with
22:48 - that let me number how I'm going to put
22:50 - them in the array
22:52 - and then I need to think about which
22:54 - spring connections I'm going to need and
22:56 - what the lengths of those Springs are
23:00 - so first thing is if I turn off the
23:02 - physics I can see actually where the
23:05 - particles are being drawn originally let
23:07 - me try to make up some points that I
23:09 - think might work
23:10 - [Music]
23:26 - all right
23:28 - there's all my particles and there's all
23:30 - my Springs let's think about what I need
23:32 - the lengths to be so the particles zero
23:36 - and one so I totally drew it in P5
23:39 - differently than it's here but zero and
23:41 - one and three and four need longer
23:44 - Springs so it can maintain that shape so
23:48 - let's give those 150
23:52 - and let's see what happens if I just let
23:54 - the physics go now
23:56 - oh boy so you can see that there is no
24:01 - structure being kept so I've got to
24:04 - start thinking about what are some other
24:06 - Springs that I might add internally to
24:10 - keep the structure uh maintaining its
24:13 - shape how about a spring that connects
24:15 - five and two
24:19 - maybe that's a little bit better what if
24:22 - I connect zero and three and one and
24:24 - four
24:29 - a little bit better here's the thing
24:32 - though I'm making up these lengths of
24:34 - the spring maybe what I should actually
24:36 - do is have the rest length of the spring
24:39 - be the actual distance of the particles
24:43 - as they are initially placed in that
24:45 - case I can actually get rid of this
24:48 - fourth argument completely
24:53 - and then in the Spring Class itself
24:57 - the length
24:58 - is the distance between a and b
25:03 - look at that so now
25:07 - the physics is active but it's not doing
25:10 - anything because I have created it with
25:13 - all of the Springs already at their rest
25:16 - length which is particle zero this one
25:19 - so now we can see how this one is
25:22 - maintaining its shape pretty well so
25:25 - this is what is known as debug view in
25:28 - the sense that I am drawing all the
25:30 - particles and all of the Springs But
25:32 - ultimately I want this to feel like it's
25:35 - a character I don't need to see all the
25:37 - dots and all of the lines so let's
25:40 - actually comment out the show functions
25:44 - let's say begin shape
25:47 - and shape
25:49 - and let me create a closed filled shape
25:52 - out of all of those vertex points
26:00 - let's run this and see what happens
26:02 - look at that instead of drawing the
26:04 - particles in the spring separately I
26:06 - just drew one shape with a fill and look
26:09 - there's my little soft body character I
26:12 - hope that what I've given you here is
26:14 - the foundation to build your own
26:16 - character I think an interesting
26:18 - question is what if I wanted to add
26:20 - little eyes could I use two particles
26:22 - and another spring connection to make
26:25 - antennae or legs or other kinds of
26:27 - appendages that are flopping around
26:30 - [Music]
26:33 - three days later
26:35 - [Music]
26:40 - all right thanks so much for watching
26:41 - today's coding challenge I have taken
26:43 - some time to clean up my code I added
26:45 - some eyes a little antenna to make the
26:47 - soft body character more fun and I
26:49 - really want to see what can you do what
26:51 - can you build upon that I've done so far
26:53 - in this video to make your own character
26:55 - think about adding more points more
26:57 - Springs maybe you want to make a dancing
26:59 - skeleton or a squishy soft body letter
27:02 - form so many possibilities you also
27:06 - might want to take a look at other kinds
27:08 - of Springs that are part of the toxic
27:09 - Libs library in addition to the plain
27:11 - verlitz bring to D that I used there's a
27:14 - verlet constrain spring 2D which is a
27:17 - spring whose maximum distance can be
27:19 - limited and then there is also the
27:21 - verlit Min distance spring 2D which is a
27:24 - spring that only enforces its rest
27:26 - length if the current distance is less
27:28 - than that rest length so both of those
27:30 - might allow you to increase the
27:32 - stability of your system or constrain it
27:34 - within certain ways now at the beginning
27:37 - of this video you might remember that I
27:39 - said that I would follow up about the
27:42 - nature of code book if you're not
27:43 - familiar with that project
27:44 - negrovecode.com has the original book
27:46 - that I published in 2012 you can even
27:48 - buy a print version of this book online
27:50 - but I would suggest you don't stop wait
27:53 - because I am almost through a complete
27:56 - rewrite with many new examples p5.js
27:59 - code I have stopped promising what date
28:01 - I'm going to finish that pie because
28:03 - that date that I thought I would has
28:05 - passed so many times but I have finally
28:08 - made real significant progress with this
28:10 - new version of the book I'll link to the
28:12 - website where you can read the work in
28:14 - progress version there's a GitHub
28:16 - repository which has all of the material
28:19 - for the book as well as the code for how
28:21 - the website is built and the new PDF
28:23 - will be generated so I don't have a
28:25 - mailing list or anything I guess I do
28:27 - have this YouTube channel there's social
28:28 - media if you're following me if you're
28:30 - subscribed if you have your
28:31 - notifications on you can be sure that
28:33 - when the book is finished you will hear
28:36 - about it and in fact I just went through
28:39 - editing chapter seven which is All About
28:41 - Cellular automata a word that I
28:44 - absolutely cannot pronounce and I'm
28:46 - going to do the next coding challenge
28:47 - all about the Wolfram one dimensional
28:50 - the elementary Wolfram CA the sort of CA
28:53 - that of of all Cas thanks for watching
28:55 - I'll see you next time
28:58 - up
29:02 - [Music]

Cleaned transcript:

hey everybody so I haven't been making a lot of videos recently I've been deep into the throes of writing the new version of the nature of code book and I'm pleased to report that I am making progress at the end of this video maybe also go back to that and let you know more about what you can find but this wonderful thing happened I was busy rewriting chapter six a chapter about rigid body and soft body physics with different kinds of libraries matter.js and toxic lips.js and I saw this tweet it was a month ago from yuhani hakomaki this incredible beautiful world of blobs all collided with each other and I just thought to myself this reminds me of a project that really got me inspired to write the original nature of code back in 2008 called Nokia friends this was a project by Karsten Schmidt with a bunch of cute cuddly little squishy characters that bounced around now that project was built with a library called toxic Libs toxic Libs started I think around 2005 a sweeping and pioneering open source library for computational design it wasn't just one little Library it had multiple packages geometry 3D 2D audio color utilities physics so many more things and it was available for processing which was the environment I was learning and using the most at the time now that library is no longer maintained and you should really check out what Carson Schmidt is currently working on at fingthi.ng I'll put links all over the screen and in the video description but I just can't stop using toxic Libs it has a special place in my heart it's critical to the history of computational design and generative art and there is a wonderful Port of it from Kyle Phillips haptic data online into JavaScript so toxiclibs.javascript is still on the internet today it works it's supported I am excited to use it so I want to make my own squishy cute soft body character as a coding challenge in this video using toxic Libs JS before I dig into the code let me tell you about some really important references that you might want to dig into if you want to know all there is to know about soft body physics so the seminal paper in my mind is called Advanced character physics it was published in 2001 by Thomas Jacobson as part of the game developers conference and Jacobson was working for Io interactive a game design company and developed these algorithms in this methodology for the game Hitman code name 47 and the implementation of what's called verlit physics in the toxic lips Library would match exactly what's in this paper you might have also heard of a game called jelly car and there's a recent wonderful YouTube explainer that goes through everything about how the soft body physics in that game was implemented and how it all works now in this video I'm going to be using toxic Libs as the physics library but there are plenty of other physics libraries that you could consider doing something similar with two that I would mention that I've made videos about before quite old videos box 2D and maybe a little bit more recently matter.js so I will include links to all of that material in this video's description as well all physics libraries tend to come with some number of elements that Define the world and the things in that world in toxic Libs in the toxic lips of verlid physics there are three four or maybe five things that I want to talk about foreign the first element that's critical for the physics simulation is the world itself and you can think of the world as the P5 canvas then there is the concept of a particle a single point in that world now I'll probably choose to draw the particle as a circle but in the actual physics itself it is considered to be a single point Mass it does not have any geometry this is a pure soft body world that we can build geometry in out of particles but if you're interested in rigid body physics that's where you want to go back and look at some of these other examples of physics libraries if you have two particles particle one and particle two they can be connected with a spring other terms for this might be joint or constraint the idea is that there is some relationship between these two particles governed by a force that obeys hooke's law Springs and if you want to learn more about how to implement your own spring Force oh yeah guess what I have a coding challenge video all about that for you to watch a behavior is the idea of a force that can be added to either the world or to an individual particle so there's such thing as a gravity Behavior if I put that in the world then all the particles experience gravity there's an attraction behavior that I could add to an individual particle and then all the other particles are attracted to it make it negative it's a repulsion Force lots of possibilities there we'll get into that as I start coding I should also mention that there are classes in toxic lips for geometry so I'm not going to be using P5 Vector which is what I typically use in most of my examples because toxic lives has its own vec2d object and there are other objects for other kinds of geometry and I'll get into them as I need to use them all right let's dive in and see if we can create a sketch that has a physics world two particles and one spring that connects them and maybe a gravity behavior that I think we could do pretty quickly and easily and then we'll move on to seeing if we can build an entire character out of particles and springs I'll be demonstrating this with the P5 web editor if you want to follow along I'll link a sketch that is blank but has the toxic Libs Library imported as well as the p5.js library and then of course I'll have a link to the end result of whatever I code in this particular video alright first up I want to make a physics world so I'm going to create a variable call it physics the full name for a physics world with toxic lips is verlit physics 2D I imported the library and yet it says Verlin physics 2D is not defined the toxic lips JS website has a getting started section which will walk you through how to get going with the toxic Libs Library the original documentation for the Java version is no longer online but I see it as a personal mission to keep these things alive so I have actually hosted that Library revived it at a GitHub repository that I've set up that I'll link to in the description and what you'll see here is that the verlid physics 2D class is part of the package toxic.physics2d toxic lips if you remember is a suite of many many different libraries all bundled together if I want to create a virlyph physics world I've got a reference the full path but this is fairly inconvenient to have to do all throughout the code so I'm going to use something called object destructuring to pull out the classes that I intend to use from the toxic Libs packages foreign make a short little quick video on object restructuring if you want to see that let me know in the comments but what I'm doing is toxicity.physics2d is an object with properties and I'm pulling those properties destructuring the object out into individual variables with the same name through this syntax and even though I like to just use let everywhere to make things friendly and less confusing this is probably a case where I really should declare these variables with const because they're never going to change now in addition to pulling out the verlid physics 2D class I also have access to the verlit particle 2D and I have made a verlid particle at x320 Y100 let's draw that particle and there it is but it's not experiencing any physics yet how about we add a gravity Behavior to the world oh I didn't import the gravity Behavior there we go now I have access to gravity Behavior now to make a gravity Behavior I need a vector to say what direction is the gravity pointing in and how strong is it this would be a vector pointing down oh but I've got to import that vector class the vector class is actually part of toxic.geometry rather than physics now I'm not seeing the gravity yet this is a really critical thing about toxic Libs and most physics engines just because you create a particle a behavior a spring it doesn't automatically activate within the world unless you explicitly add it to the world so I need to say physics add Behavior gravity what did I miss here okay so I'm getting a weird error here it's undefined I made this Vector but I forgot to create the gravity with that Vector so that should go there and there we go still no gravity now I like to write things out in many separate steps because it makes it a bit easier to follow especially if you're new to this but I do want to point out that I don't have to make a separate variable for V in a separate variable gravity just to prove that point I could create the new Vector right here when I make the gravity behavior and I could do the same thing with the gravity behavior in the add Behavior function but I'll leave that to you still though no physics happening guess what I'm missing I made the gravity and added it I made the particle but I didn't add it everything that I make I have to add explicitly to the physics world but I still see no physics I've forgotten a critical step and in fact that word step is maybe a clue if you are used to P5 you're probably used to the idea of time moving forward by the draw function looping over and over again you've always controlled your animation and behaviors through that fact through the fact that you have a variable that you change and you draw something one way then draw loops and you draw something another way and so on and so forth the draw Loop is continuing to Loop but the physics world is not moving forward in time it's up to us to specifically tie those two concepts together the physics World takes a step forward in time when you call physics dot update the easiest way to have this all work then is to just have physics update happen every time through draw there are all sorts of ways we could get more sophisticated about that but this is going to do the job for us and as you see now gravity is in play let's add a boundary to the world I need that rectangle object from toxic geometry there we go I can create a rectangle that is exactly the dimensions of the canvas and I can make that the world bounds of the physics world and sure enough the particle stops when it gets to the bottom let's add a second particle okay so now I created two varlet particles added them both to the world and I'm drawing both of them it's time to return to this diagram and look at how I would add a spring to connect these two particles now when I created a particle I only needed two arguments an X and A Y for the coordinate of the particle on the canvas a spring needs four arguments the two particles that are going to be connected let's call them A and B then the rest length of that spring what is the length that it wants to be call that length and then the strength of that spring this is a number between zero and one where one would be very rigid as if there's a metal rod between those two particles and all the way down to zero very elastic as if it's just gonna the particles are going to melt away and not be able to hold together I'll make a new variable called Spring and spring is a new verlit spring 2D that connects particle a and particle B maybe a rest length of 100 pixels now let's try a strength of 0.5 what did I forget I also have to add the spring to the physics world and there we go did you see that lovely little bounce it's kind of amazing that it just stays perfectly upright I assume if I move maybe the particle over a little bit yeah it's going to fall over now remember there's no geometry here the spring is just a force that's acting between those two particles but I could draw a line to help me visualize what's going on let's add a third particle and let's connect particle B to particle C foreign just happened there it's really hard to understand what's going on without all the elements being drawn which is something you could use to your advantage depending on what application you want to make but let's draw that other line aha oh next I want to show you how I can make this interactive so something that you can do with a particle is you can lock it into place for example if I were to say particle a lock now everything is going to swing from particle a and in fact I have a nice little double pendulum simulation already going but once I've locked a particle I can also manipulate its X Y position without it participating in the physics and then unlock it so now as I move the mouse around I can kind of Swing this lovely little double pendulum all over the place let's have that only happen if I'm holding down the mouse The Logical Next Step would be I've got a connected to b b connected to C let's connect a to c foreign I've got a nice little squishy triangle now that I can toss around and enjoy now if you look at this code it's a lot of repetitive stuff I mean I'm numbering things ABC one two three I could definitely use an array I've got to say add particle for everything I've got to draw all the circles and lines separately there has got to be a better way so what I want to do is completely reorganize this code in a way that will allow me to expand it to create much more sophisticated soft body shapes let's take a minute to think about what it is that I want to do here I currently have a shape that has three points all connected with springs but maybe what I really want is to make some kind of Blobby cute character and it squishes and squashes and moves around the canvas I've got to think about where are all the particles how many do I have and if they're all connected with springs this could be a good starting point but the whole thing is probably just going to collapse unto itself so what if I built some sort of shape but added some additional Springs just kind of across the middle maybe I don't draw those to hold the thing together so in order to be able to build something like this I need to First reorganize my code so I can manage all the particles and springs in arrays and then I need to think about the design of the skeletal structure of this particular character and then how I'm going to layer a drawing on top of it so number one every time I make a particle I'm using the toxic Libs verlit particle 2D but I want to have my own particle I maybe want to keep track of things like its size maybe I want a function that draws it I want to have my own particle class so I can create a particle.js file add a reference to it in index.html and then go about writing my own class so this is boilerplate code of a base particle class it's got an x a y an R for radius all of those are initialized in the Constructor and a show function to draw it as a circle but I also want this particle to have everything that a Verlin particle 2D has now if you happen to watch some of my other physics Library tutorials I would often do something like this in this case I have as part of the data of the object a reference to another kind of object so it's essentially a wrapper class my particle class is a wrapping the idea of a virulent particle and in this case I could probably get rid of the X and the Y and then in here I'd have to say draw The Circle at this dot particle.x this dot particle dot y but there is another way this makes sense in some scenarios but here I can use the power of inheritance this is something that I cover in chapter four of the nature of code and you can go back and watch the particle System videos where I look at inheritance and something called polymorphism in more detail but for right now all you need to know is that if I use the keyword extends and say that my particle extends verlid particle 2D then suddenly it's as if I copy pasted everything that's part of verlid particle 2D into my particle class only I don't have to copy paste it it's invisible it's inherited all of it and in fact this is all the code I need except for one more change it's not up to me to initialize the X and Y properties of that particle I want toxic lips to do that for me so I can reference the parent class furlit particle 2D with the keyword super the parentchild relationship is often called the super class to subclass relationship so now I have my own particle class which is exactly of earlier particle 2D but I've added a radius and a show function and I could go back into sketch and replace all these code still works now look at this every particle I'm making I'm adding to the physics world and that's really going to be the case 99 times out of 100 if I'm making particles I want them to experience the physics I'm not making them just to leave them out so a nice feature that I could add to my particle class is for it to be responsible for adding the particles to the physics world so when I create a particle the Constructor is called and right there in the Constructor I can say physics.ad particle now what is it that I'm adding I'm not adding a specific particle I'm adding this particle inside the class the way you reference any generic particle is with the keyword this this particles X this particle is y this particle now I could also replace the calls to Circle and draw with the show function great we're still cooking here let's give the Springs the same treatment I gave to the particles okay here's the spring class which extends verlit spring 2D calls the super Constructor adds itself to the physics world and then draws a line now you could make the case that I've done a no no here in that I'm referencing a global variable the physics world inside of the class maybe that should be passed into the Constructor but I just want to keep things simple for myself in this case I have one physics world for this whole project and I'm just okay with referencing it as a global variable here in the class even though that's not necessarily the best object oriented programming practice now back in sketch I can change these to my own Springs and I can call the spring show functions and we've got exactly the same functionality working but I am now using my own particle in spring classes which is going to open up a lot more possibilities in terms of how I design and visualize them how they behave what other properties they have and so on and so forth all right next up let's change three separate particles in three separate Springs into arrays foreign there we go I am now putting the particles and the Springs into arrays I'm still individually making them you might have your own ideas for how you might automate that process but I want to design this character by hand but the really nice thing here is I can iterate over the arrays to draw all the particles and draw all the Springs let's take out the Gravity from the world right now and let's make the Springs a little bit softer all right what could be a simpler version of this I have a triangle what if I did the following what if I design my character to be something like this let's start with that let me number how I'm going to put them in the array and then I need to think about which spring connections I'm going to need and what the lengths of those Springs are so first thing is if I turn off the physics I can see actually where the particles are being drawn originally let me try to make up some points that I think might work all right there's all my particles and there's all my Springs let's think about what I need the lengths to be so the particles zero and one so I totally drew it in P5 differently than it's here but zero and one and three and four need longer Springs so it can maintain that shape so let's give those 150 and let's see what happens if I just let the physics go now oh boy so you can see that there is no structure being kept so I've got to start thinking about what are some other Springs that I might add internally to keep the structure uh maintaining its shape how about a spring that connects five and two maybe that's a little bit better what if I connect zero and three and one and four a little bit better here's the thing though I'm making up these lengths of the spring maybe what I should actually do is have the rest length of the spring be the actual distance of the particles as they are initially placed in that case I can actually get rid of this fourth argument completely and then in the Spring Class itself the length is the distance between a and b look at that so now the physics is active but it's not doing anything because I have created it with all of the Springs already at their rest length which is particle zero this one so now we can see how this one is maintaining its shape pretty well so this is what is known as debug view in the sense that I am drawing all the particles and all of the Springs But ultimately I want this to feel like it's a character I don't need to see all the dots and all of the lines so let's actually comment out the show functions let's say begin shape and shape and let me create a closed filled shape out of all of those vertex points let's run this and see what happens look at that instead of drawing the particles in the spring separately I just drew one shape with a fill and look there's my little soft body character I hope that what I've given you here is the foundation to build your own character I think an interesting question is what if I wanted to add little eyes could I use two particles and another spring connection to make antennae or legs or other kinds of appendages that are flopping around three days later all right thanks so much for watching today's coding challenge I have taken some time to clean up my code I added some eyes a little antenna to make the soft body character more fun and I really want to see what can you do what can you build upon that I've done so far in this video to make your own character think about adding more points more Springs maybe you want to make a dancing skeleton or a squishy soft body letter form so many possibilities you also might want to take a look at other kinds of Springs that are part of the toxic Libs library in addition to the plain verlitz bring to D that I used there's a verlet constrain spring 2D which is a spring whose maximum distance can be limited and then there is also the verlit Min distance spring 2D which is a spring that only enforces its rest length if the current distance is less than that rest length so both of those might allow you to increase the stability of your system or constrain it within certain ways now at the beginning of this video you might remember that I said that I would follow up about the nature of code book if you're not familiar with that project negrovecode.com has the original book that I published in 2012 you can even buy a print version of this book online but I would suggest you don't stop wait because I am almost through a complete rewrite with many new examples p5.js code I have stopped promising what date I'm going to finish that pie because that date that I thought I would has passed so many times but I have finally made real significant progress with this new version of the book I'll link to the website where you can read the work in progress version there's a GitHub repository which has all of the material for the book as well as the code for how the website is built and the new PDF will be generated so I don't have a mailing list or anything I guess I do have this YouTube channel there's social media if you're following me if you're subscribed if you have your notifications on you can be sure that when the book is finished you will hear about it and in fact I just went through editing chapter seven which is All About Cellular automata a word that I absolutely cannot pronounce and I'm going to do the next coding challenge all about the Wolfram one dimensional the elementary Wolfram CA the sort of CA that of of all Cas thanks for watching I'll see you next time up
