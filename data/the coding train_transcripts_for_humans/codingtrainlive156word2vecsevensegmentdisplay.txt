With timestamps:

00:13 - [Music]
00:27 - hello happy Friday I thought I would try
00:30 - for an entrance it's actually work
00:32 - we're started with nobody here for a
00:33 - minute and just music playing and then I
00:35 - enter did that happen is my microphone
00:37 - off why are you hiding could you tell I
00:39 - was hiding underneath the air and I
00:41 - slipped that way I guess I could have a
00:42 - computer over there though I start this
00:44 - dream from anyway hello everyone welcome
00:47 - today's Friday which means coding
00:50 - training day
00:51 - hello perhaps to the NYU Tandon student
00:55 - I met at the library yesterday maybe
00:58 - probably unlikely but if you're watching
00:59 - say hello in the chat at Tandon is the
01:02 - school for engineering at New York
01:04 - University in Brooklyn and I'm often
01:06 - there working in the library and every
01:08 - time there's somebody come to expand
01:09 - says hey watch my videos which is kind
01:11 - of amazing because that really doesn't
01:13 - happen to many other places or really
01:14 - any other place frankly alright looks
01:19 - like oh let me get my chat up here hello
01:24 - to the oh I don't think I actually sent
01:26 - a little notification here I'm gonna say
01:29 -  Channel I am live now if you're
01:32 - wondering where I am sending this to I
01:35 - there is a slack channel that you can
01:37 - get an invite to by joining the patreon
01:39 - or joining the YouTube thing through the
01:41 - join membership blah blah blah blah blah
01:43 - blah blah blah blah so today I will just
01:46 - be saying blah the entire time I had
01:48 - this idea that I wonder if I could do a
01:50 - coding tutorial just through guttural
01:54 - sounds and gesture but maybe today is
01:57 - not the day to try doing that also might
02:01 - not be the most accessible way to do a
02:04 - tutorial so I
02:08 - I'm going to talk about something called
02:12 - word Tyvek today before I get into that
02:15 - let me do some housekeeping not really
02:16 - housekeeping but I'm so unprepared for
02:19 - word to bec but I spent five minutes
02:22 - preparing for this livestream by pulling
02:24 - up a couple links of things I wanted to
02:25 - show so first of all if you are not
02:28 - already aware let's see if this actually
02:32 - works processing Community Day is
02:34 - happening in Los Angeles on January 19th
02:39 - 2019 that is a Saturday I believe it is
02:43 - happening at UCLA and you can get your
02:45 - tickets there early bird tickets are
02:47 - available until October 31st I will be
02:49 - there my kids will be there because we
02:52 - have a new track for families and
02:57 - there's lots of exciting wonderful stuff
02:59 - that's happening that day so I encourage
03:02 - you to come if you can now if you cannot
03:04 - come to the Los Angeles prosecuted a
03:08 - because maybe that is just not a place
03:09 - you can get to reasonably check out PCD
03:12 - worldwide there are at the moment many
03:17 - processing community days in all these
03:19 - cities around the world that is this is
03:21 - kind of unbelievable and I wanted to
03:24 - highlight one the organizers are some of
03:27 - the organizers are alumni of the program
03:29 - ITP where I teach and they are hosting a
03:32 - processing community day in India it
03:34 - looks to me like here they're actually
03:35 - four in India I know it's probably like
03:37 - around midnight is it midnight like
03:39 - India like a half someplace they need a
03:41 - half hour off so either midnight or
03:42 - 12:30 in India and I'll show you this
03:46 - one here in Bangalore and February 2nd
03:48 - 2019 organized by these wonderful folks
03:51 - Russia Ali who I believe is probably
03:53 - actually just a couple floors down in
03:56 - this building right now I kind of have a
03:58 - fantasy of going to one of these
04:00 - crossing and community days in India ll
04:01 - see if we can I can make it up and a
04:03 - little difficult to travel that's that
04:05 - time of year so far but who knows all
04:09 - right so that's one thing I want to
04:10 - mention I also wanted to give a shout
04:11 - out to coding trained viewer Eliza I
04:15 - just discovered has a podcast we've kind
04:18 - of like the most awesome
04:19 - name ever unicorns fart pixels and I
04:25 - have to admit I discovered it because
04:26 - somebody mentioned that I was mentioned
04:28 - and I listened to the episode where she
04:30 - talks about coding train amongst other
04:32 - things so there's a little bit of like
04:34 - vanity here and me showing you this
04:37 - podcast but so I did listen to episode
04:39 - five first yesterday which talks about
04:42 - Bob Ross and me and Patricio and coding
04:44 - train and book of shaders and all sorts
04:46 - of other things but I and I'm planning
04:48 - to go back and listen to the other
04:49 - episodes so I encourage you to check out
04:51 - this wonderful podcast about web
04:53 - development and creative coding it's
04:55 - great unlike my frantic frenetic
04:59 - behavior I feel like Eliza has a very
05:00 - nice soothing comforting quality in her
05:03 - voice in this podcast I wanted to
05:05 - mention that I also wanted to mention as
05:08 - a frame for reference that the Cody
05:13 - crane has a website and for every coding
05:17 - challenge that I do I have a page on the
05:20 - website so I'm trying to get this better
05:22 - but you could see so this is by the way
05:25 - something that is an opportunity for the
05:27 - community to contribute to so if you're
05:30 - interested in helping with maintaining
05:32 - this website that's wonderful Neil's
05:34 - Webb did at Neal's Webb on github I
05:39 - think did almost all of the work for
05:41 - building this website out originally and
05:43 - Watsonville have contributed I'll note
05:45 - me I am so me who has made lots of
05:48 - technical improvements that fixes and
05:50 - advised on this and Austin who is also
05:54 - contribute a lot of like the visual
05:55 - design interface stuff but the reason
05:57 - why I'm mentioning this is it's been a
05:58 - little I guess I don't mention this
06:00 - every video and it's been a little light
06:01 - on the community contributions so this
06:04 - is not the simplest system but if you're
06:06 - looking for your first open source
06:08 - contribution you can add a project that
06:11 - you have made based on one of my
06:12 - challenges to this page by following
06:14 - these instructions and involves making a
06:16 - pull request on github there's no
06:18 - content management system for this other
06:19 - than the github repository itself and
06:22 - it's certainly something I could think
06:23 - about incorporating the future but if
06:25 - you're here I can click on this and we
06:26 - can see this is Cole Spears look at this
06:29 - rotate zoom with mouse scroll press
06:32 - space or
06:33 - enter for new leases you Lisa jus Lisa
06:36 - jus shape and check console for 3d
06:38 - leases you table position okay so I can
06:41 - looks like I can rotate around this if I
06:43 - hit the spacebar it starts over well
06:45 - some of the other commands does not
06:48 - remember anything scroll oh yeah scroll
06:50 - I can zoom in and out so this is lovely
06:52 - the scene I love seeing these
06:54 - contributions of projects that people
06:56 - have made and I'd like to if I can
06:58 - remember highlight them on the live
07:00 - streams as well I'll note that there is
07:04 - this new button someone recently made a
07:06 - pull request that I have this button
07:07 - that just takes you right to the code
07:08 - and then if I could manage to remember
07:11 - to port which I already actually did but
07:14 - there is actually already a to p5.js
07:17 - port of this challenge and I believe
07:22 - it's actually linked to right here but
07:25 - this live example should actually take
07:27 - you to it running in the browser but
07:28 - it's not currently so that's something
07:29 - that somebody could add to this page
07:31 - that's missing and there's information
07:32 - on this like see how to contribute stuff
07:36 - all right so I wanted to mention that
07:38 - also I've got all this new design stuff
07:40 - that you might have seen thank you -
07:43 - Jason Hagglund new characters and sort
07:45 - of a new little train passenger :
07:51 - they're like my friends this is this dot
07:55 - over there so and there's the semicolon
07:59 - the asterisk so I'm oh I love any design
08:03 - ideas or feedback or to incorporate into
08:05 - the site of some of the new materials
08:07 - and I've posted a where is all this
08:09 - stuff it is at github comm slash coding
08:13 - training slash website if I go here
08:17 - under issues yeah like I even posted an
08:21 - issue here new coding terrain banner I
08:23 - gave it the hack Tober fest tag there's
08:26 - this hack tober fest thing going on I'm
08:28 - trying to I guess which is run by
08:30 - digital ocean when waiting for my
08:32 - digital version sponsorship and if you
08:36 - support open source projects you can
08:37 - earn a limited edition t-shirt so I've
08:38 - been trying to remember to tag various
08:40 - things that I'm involved with with
08:41 - Oktoberfest alright so I want to mention
08:44 - that now one more thing if anyone
08:47 - while you're watching right now I have a
08:48 - little challenge for you to do while
08:50 - you're watching I was going to do this
08:52 - as part of the live stream but I think
08:54 - it might be more efficient to have
08:55 - somebody do this while I'm doing other
08:58 - stuff and then give me the results so I
08:59 - want to at some point today before I
09:02 - leave
09:03 - train a word to Veck train Network new
09:06 - word Tyvek model with a source text and
09:09 - I thought maybe it would be interesting
09:10 - to see what happens if I use my nature
09:12 - of codebook as the source text it's a
09:13 - pretty decent amount of text it's not
09:15 - huge obviously have a robust model and I
09:18 - know the camera just went off I would
09:19 - need a much larger body of text but this
09:22 - something I think we could work with
09:23 - right now so in order to do this so it's
09:25 - a little bit tricky on this this is the
09:27 - repo you want to be at Schiffman slash
09:29 - the nature of code clone or download
09:31 - this repo you're going to want to go
09:32 - into chapters and then this is all of
09:36 - the raw HTML all of the raw text of the
09:39 - book welcome title page dedication ba ba
09:42 - ba on all the different chapters so what
09:43 - I what I need is to take all of these
09:46 - HTML files strip out maybe using a red
09:50 - regular expression or some kind of like
09:52 - fancy Python thing that you know about
09:53 - strip out all the HTML tags and leave it
09:56 - with just the text the raw text of the
09:59 - book and then concatenate it all into
10:01 - one file so obviously we want one file
10:04 - nature of code dot txt that is just the
10:07 - raw text of the book and I'll use that
10:09 - to train a word to Veck model this also
10:11 - could be useful because I could use it
10:13 - for my on LS TM example that I would
10:15 - hope to make and why by the way it's ok
10:19 - I I do this I don't want to be doing
10:21 - this I don't want to be saying acronyms
10:24 - and having people watching me going I
10:27 - have to leave now this is not for me LST
10:29 - m it is something that actually Nabil
10:31 - Hussain was here last week against
10:33 - presentation on but it's a kind of
10:34 - neural network that can be used for
10:36 - sequence data and for generating text
10:39 - and so we're Tyvek is the thing maybe
10:41 - who never heard about I don't claim to
10:43 - be an expert on word Tyvek and all but I
10:45 - am going to talk about it and show a
10:48 - wonderful tutorial by Allison parish
10:50 - which covers a lot about how word Tyvek
10:52 - works and then try to play around make
10:54 - some examples with worked effect today
10:55 - all right uh yeah so Matthew brawn
11:00 - it made a note in the chat here ignoring
11:08 - the gem file dot lock vulnerability on
11:11 - github yes I did conveniently ignore
11:13 - that I couldn't actually so I now by the
11:16 - way
11:16 - so github when you have a project hosted
11:19 - on github and one of you are packages
11:21 - that your project is dependent on has a
11:23 - security vulnerability and will give you
11:25 - this alert and I was able to I had this
11:29 - alert for all these node packages and I
11:31 - know I do like NPM something on it and
11:33 - you fix that and upgrade stuff and it
11:35 - works able to do that I could not figure
11:38 - out how to fix the gem file dot lock
11:41 - vulnerabilities maybe I would have
11:43 - totally accept a pull request on that if
11:45 - that's a thing I think that's a thing
11:46 - that somebody could do without me being
11:48 - an administrator I don't know enough
11:50 - about ruby stuff and frankly I don't
11:54 - think oh no yeah oh this is for github
11:56 - pages that's why it's in there so anyway
11:58 - please don't fix it O'Neil's webOS say
12:01 - don't fix it
12:02 - Neels web in the chat stop stop all of
12:10 - all all stop training train pulled stop
12:13 - pearl the emergency brake I don't abuse
12:18 - websites don't fix it I was expected by
12:20 - the time I said that there would be more
12:21 - information about why not - but that's
12:23 - that for now all right let's see here I
12:31 - think that's that was my introduction to
12:34 - to the fact now I have to start doing
12:36 - some content thing I said I was gonna do
12:39 - word Tyvek and I think I should do work
12:41 - Tyvek today ye but you know I made a
12:44 - mistake because I'm going to talk about
12:46 - word - back in my nyu class - week a
12:51 - week and a half from now and typically
12:53 - you might think that i have no idea what
12:55 - i'm doing and i never practice and I'm
12:57 - just winging it which is mostly true but
12:59 - I do have a policy especially when I'm
13:01 - trying a new topic I try to actually
13:03 - look at it in my course first where I
13:05 - have students that I can engage with and
13:07 - talk about and get feedback from and ask
13:09 - answer questions and get get tips on and
13:12 - and I try to make a video about it so I
13:14 - really should probably wait a couple
13:15 - weeks but I've already put it as the
13:16 - title of this and I got nothing else I
13:18 - got nothing else besides I could do like
13:21 - a flocking coding challenge which I keep
13:23 - needing to do Oh actually I was thinking
13:26 - of submitting a flock yet something
13:27 - about flocking to Tom Scott's guest
13:30 - thing I mean maybe I should maybe Tom
13:32 - Scott but you'd be anyway I should
13:34 - mention this just cuz this is a cool if
13:36 - you're a youtuber or want to and want to
13:38 - submit a Tom Scott was a wonderful
13:42 - channel um TAS guests for one month
13:45 - anyway I probably that makes sense for
13:47 - me to submit anything I put the wrong
13:48 - person for this but but anyway I'll
13:51 - mention it now all right
13:52 - oh no no this is this is visible yeah I
14:00 - do not want a buzz I did I have my own
14:03 - special by hands yeah I don't want to
14:09 - talk about this this cup over here
14:11 - anymore I won't even mention it
14:16 - Thank You Sahil Khattar II I guess the
14:19 - superjet is back on it was off its back
14:22 - on okay all right ah Neil's web writes
14:28 - breaking news everyone someone make me a
14:30 - breaking news like a custom coding train
14:32 - breaking news sound effect it should
14:34 - have like dignity and then like you can
14:38 - use my voice everyone boom boom boom
14:44 - boom boom breaking news coding train
14:49 - breaking news remix all that into
14:53 - something amazing
14:53 - I'll totally use it all the time a new
14:55 - member on noob of arune thank you
14:58 - welcome a new bob Varun I will be
15:00 - sending out if you're a new member check
15:02 - the community tab for the posts that you
15:05 - can view that have a link to a Google
15:06 - Form to get in the slack channel okay
15:08 - Neil's web rights I have an updated
15:10 - version locally but it's not pull
15:12 - requested yet there is also some really
15:14 - weird stuff where like weird stuff going
15:15 - on with it that completely breaks
15:17 - everything when you try to reinstall the
15:19 - websites dependency it's awesome and I
15:21 - finally got it working locally to toot I
15:25 - I added the toot-toot although there is
15:27 - a little like one of those emojis emojis
15:31 - this is the sound for that emoji I think
15:34 - but I have a big tooth to Jabba asks
15:37 - what's going on
15:39 - right now you're watching a person who
15:41 - was desperately procrastinating by
15:43 - randomly talking about nonsense in order
15:46 - not to have to do a tutorial about word
15:48 - Tyvek but I'm gonna stop procrastinating
15:51 - and I'm gonna talk about word - Bek deep
15:56 - breathing everyone okay alright so let's
16:05 - get started so I need to pull up some
16:08 - stuff here I want to first go to
16:11 - github.com slash Schiffman /p v word -
16:15 - Bek this is an old repo where I'm going
16:18 - to pull some stuff from mostly I wanted
16:21 - to grab this URL then I want to say
16:25 - Alison parish a strange loop but would
16:28 - also recommend this particular there's a
16:34 - way there we go
16:40 - this looks good I wanted to recommend
16:42 - this particular talk from Alison which
16:44 - is really amazing and then I also want
16:50 - to let's see I'm looking for a reference
16:56 - yeah I'm looking for here Oh thud this
16:59 - is like the most roundabout way ever to
17:01 - find this thing that I'm looking for
17:02 - then I'm looking here word vector source
17:06 - then I want to go here okay and then I
17:10 - actually should keep this as well cuz
17:15 - this is another reference that I used to
17:19 - create that I to create this the
17:21 - materials that are in my head that I'm
17:22 - going to work on today and then there's
17:24 - one other place oh yeah glove word Tyvek
17:28 - yeah alright okay so now I have all my
17:33 - references and I can begin okay
17:53 - um hold on just looking here
17:58 - here's a quick spreadsheet for the word
18:01 - to Veck dist in case interesting wonder
18:05 - what that is
18:05 - all right hello India so many viewers
18:08 - from India that's wonderful
18:09 - alright so how am I gonna do this I have
18:13 - no no plan my entire plan is this so
18:25 - just give you some background I made a
18:27 - little p5 module about word Tyvek maybe
18:32 - this was a year ago two years ago
18:37 - something like that a year and a half
18:39 - ago interestingly what is word Tyvek
18:51 - really the I mean is it the training a
18:54 - group of related models that are used to
18:56 - produce word word embeddings interesting
18:58 - all right all right
18:59 - oh sorry I'm over here all right I think
19:02 - I'm just going to begin what I was going
19:13 - to say was I think that today might
19:15 - actually just be largely exploratory and
19:17 - I just try a bunch of things and not
19:19 - actually take the content and make
19:22 - editor tutorial videos out of them else
19:25 - to do it so why not why not just start
19:32 - with Alison's tutorial okay
19:38 - oh glove is not word Tyvek global
19:44 - vectors forward representation yes sorry
19:50 - but it does have so this is a great
19:53 - point that is that Simon is making Simon
19:57 - writes in the chat it is
20:01 - Thank You Metsa for reminding me about
20:03 - the LS TM intros I need to record glove
20:07 - is perhaps using a different algorithm
20:10 - we're Tyvek is a particular algorithm to
20:12 - generate word embeddings or word vectors
20:15 - word to Veck a word to vac model so to
20:19 - speak
20:20 - and glove I guess uses a different
20:22 - particular algorithm but if I'm correct
20:24 - the end result is the same it's a word
20:27 - that is paired with a 300 dimensional
20:31 - vector word embedding is also another
20:35 - way of saying it so maybe I'm let me let
20:37 - me put the glove stuff aside so that
20:39 - that doesn't become a confusing thing
20:41 - but let me just begin all right okay
20:57 - all right here we go hello welcome to a
21:02 - new session from I don't know is it the
21:04 - machine learning course is that the
21:05 - programming with Dex cores I don't know
21:07 - I'm just here I'm just the person who's
21:09 - here and this session which will be a
21:12 - whole bunch of videos is about a topic
21:14 - word Tyvek I ring the bell way too much
21:19 - so first of all I want to mention
21:21 - something very important I known about
21:23 - word Tyvek and I've used it in projects
21:27 - for a little while but I don't think I
21:29 - ever really understood it and I don't
21:31 - even know that I really do understand it
21:32 - but I definitely improved my
21:34 - understanding of it vastly after reading
21:36 - this amazing tutorial by Allison parish
21:39 - it's a post it as a gist on github it's
21:43 - a Python notebook understanding word
21:45 - vectors by Alison parish
21:47 - you know honestly if I find being
21:49 - truthful you should just stop this video
21:50 - right now and read this instead you know
21:53 - a few some people seem to like to listen
21:55 - to me prattle on which is fine you could
21:56 - keep watching if you so choose read this
21:58 - after then at the very least and so this
22:01 - tutorial is a released under Creative
22:03 - Commons by 4.0 license the code itself
22:06 - is the Creative Commons 0 license so you
22:09 - can reuse this material which is what
22:11 - I'm doing right now I don't usually do
22:13 - this again I'm all our stuff is always
22:15 - based on other people's stuff but this
22:16 - this first video I'm really gonna like
22:18 - talk through what's in this tutorial in
22:19 - my own words but if you do the same
22:23 - please reference with attribution
22:25 - according to the license ok so I also
22:28 - want to mention that Alison Parrish has
22:30 - a wonderful talk it's on YouTube I will
22:32 - link to it called experimental creative
22:34 - writing with a vectorized word from a
22:36 - strange loop conference so I also
22:38 - encourage you to take a look at that as
22:40 - inspiration and background for what it
22:42 - is I want to show you my end goal with
22:44 - this tutorial is to get to the point
22:46 - where I have a p5 Java Script sketch in
22:50 - the browser where I can do stuff with
22:52 - word defect what has worked the point of
22:55 - this video that you're watching right
22:56 - now is I'm taking a very long time to
22:58 - start is just to answer the question
23:00 - what is word Tyvek by the end of it I
23:02 - want to use word defect in two projects
23:04 - to make weird stuff happen with text on
23:07 - a webpage all right
23:09 - how are you feeling so all right so
23:11 - let's let me come over here for a second
23:13 - because I've written word to back up
23:15 - here that's gonna help me the idea of
23:18 - word Tyvek and there's the this is a
23:23 - machine learning process similar to
23:25 - other things that I've done that looked
23:26 - at like classification is this image a
23:29 - cat or a dog or a regression analysis
23:32 - what's the what's can you predict the
23:34 - price of this house based on certain
23:36 - properties of that house these are
23:37 - classic machine learning examples word
23:40 - Tyvek is a particular machine learning
23:42 - model that produces something calls a
23:44 - word embedded now what if it's a very
23:47 - very fancy term and what it means is
23:50 - that any given word like Apple can be
23:55 - associated with numbers a vector this we
23:59 - can basically somehow come up with this
24:02 - sort of like numeric mathematical
24:05 - essence of this word as some array of
24:09 - numbers like zero point seven and one
24:12 - point two and negative point zero point
24:14 - 3 4 5 etc etc and there's gonna be some
24:17 - amount of numbers in here this seems
24:19 - like a crazy thing why would I ever want
24:22 - to have a word associated with an array
24:26 - of numbers well one of the things that
24:28 - one can do with arrays of numbers is
24:31 - math linear algebra multiplying
24:35 - subtracting averaging adding so we know
24:39 - we can do that with arrays of numbers
24:41 - and this is the kind of thing that
24:43 - happens in lots of my other tutorials
24:44 - with programming graphics and pixel
24:47 - processing and machine learning
24:49 - but one thing we wouldn't know how to do
24:52 - is how would we say you know Apple plus
24:57 - plus orange but that could be I was
24:59 - trying to like come up with something a
25:01 - good example this is what happens when
25:02 - you don't play on these tutorials in
25:03 - advance but to come up with an example
25:05 - on the fly Apple plus purple with the
25:11 - could this equal plum maybe right like
25:14 - in other words like I'm trying to come
25:16 - up with some it's like pseudo math like
25:18 - let's take these two words and add them
25:20 - together like cat plus cute
25:22 - maybe that equals kitten can I take and
25:25 - like we're not saying about
25:26 - concatenation Apple purple we're saying
25:28 - Apple plus purple could I get those sort
25:30 - of mathematical essence of these words
25:32 - add them together and get a new word
25:34 - well the theory the prompt the idea here
25:38 - that the argument that I that I am
25:40 - making to you is that word Tyvek is a
25:42 - mechanism by which you can do stuff like
25:44 - this right there in your code if I could
25:48 - quantify the word Apple as a series of
25:50 - numbers and I could quantify the word
25:52 - purple as a series of numbers then
25:56 - couldn't I just add all those numbers
25:58 - together I would get a new series of
26:01 - numbers and then I might look and find
26:02 - which word or has a set of numbers that
26:06 - is most close to these set this set of
26:08 - numbers how could I find the similarity
26:11 - I could calculate a similarity score
26:12 - between any two sets of numbers I can
26:14 - find the word that has the most similar
26:16 - to this Plus this and maybe it would be
26:18 - plum why would it be plum is that magic
26:21 - it's because what data that's word
26:23 - defect model was trained on oh yes it's
26:25 - the ladder
26:26 - but and so I want to get to all of that
26:27 - okay this is my sort of like a zoomed
26:30 - out view of why we're doing this let's
26:31 - come over and look at what Allison has
26:33 - in her particular tutorial here which
26:35 - are which is a really nice example if I
26:39 - look at this we can say like well
26:40 - imagine like a really simple case right
26:42 - I was sort of saying over here each word
26:46 - gets a list of maybe a hundred numbers
26:48 - maybe it's three hundred numbers maybe
26:50 - it's a thousand numbers this is up to us
26:51 - to sort of figure out decide based on
26:53 - what we're trying to do but what if we
26:54 - simplify that and here's Allison's
26:57 - example where each word gets essentially
27:00 - two numbers and those numbers are data
27:03 - properties of that word like a cuteness
27:05 - score from 0 to 100 and a size from 0 to
27:08 - 100
27:09 - so you could say kitten is 95 15 and
27:11 - hamster is 80 comma 8 right there these
27:13 - numbers that's sort of like the label is
27:16 - tied to a set of data point data
27:18 - properties so if that's the case then we
27:21 - can look we could graph all of those and
27:23 - we could say something like oh you know
27:24 - like a horse and the dolphin are kind of
27:26 - like similar in terms of size and in
27:28 - terms of size and cuteness and then we
27:32 - can start to do things but but actually
27:33 - like we could do a mathematic
27:35 - analysis like what is the actual
27:36 - Euclidean distance Euclidean distance
27:38 - means the number of well in this case
27:41 - pixels or units between these two words
27:44 - right here these are very similar
27:46 - because they're physically close to each
27:48 - other and we can also do things you can
27:50 - think of those as and this is a nice
27:53 - demonstration of this idea this is why
27:54 - we talk about it as vectors right I have
27:56 - a whole set of tutorials about vectors
27:59 - describing as describing points in space
28:03 - so for example a vector a velocity
28:07 - vector if I have a particle in a
28:08 - particle system and I wanted to go from
28:10 - here to here this is its velocity its
28:15 - change in location in essence this is
28:18 - basically what I'm doing with an
28:20 - operation like this for example what if
28:23 - I said ok well Apple is over here and
28:26 - then I'm going to add purple to it I'm
28:31 - going to move by purples numbers and
28:33 - over here I now find plum so when we
28:36 - look at this in two dimensions it kind
28:38 - of makes a we can sort of like our
28:41 - brains can understand that two
28:42 - dimensions is like the easiest dimension
28:44 - I mean I have to define two dimension be
28:46 - easier than one dimension one mentions
28:47 - weird sometimes but and we could see
28:50 - here that the relationship between
28:52 - tarantula and hamster is just like
28:55 - chicken and kittens may be close to
29:01 - puppy right and so this I have to pause
29:08 - for a second wow talk about improvising
29:17 - I have no idea if this is making any
29:19 - sense
29:22 - all right oh wow sponge man already made
29:26 - my nature of code dot txt
29:29 - thank you I'll have to look back at that
29:31 - in a little bit all right so what
29:36 - allison is showing here is by moving
29:38 - from let's say one word to another word
29:41 - physically in space we can establish
29:42 - this idea of word relationships chicken
29:46 - is two kitten
29:47 - as tarantula is to hamster now this is
29:49 - all very arbitrary with like hard-coded
29:53 - word vectors so the but this is just for
29:56 - demonstration purposes and in two
29:58 - dimensions so that our brains can kind
29:59 - of process it ultimately if we have a
30:02 - lot more information somehow about all
30:05 - of these words in higher dimensional
30:08 - space in vectors that have a hundred
30:11 - dimensions a hundred numbers we can't
30:13 - visualize that so easily there are
30:15 - interesting techniques for called
30:17 - dimension reduction reduction ality
30:20 - reducing the dimensionality that we
30:22 - could then draw like word clusters and
30:24 - stuff and maybe I'll get to that later
30:25 - but what I'm trying to say here is that
30:30 - we can establish sophisticated complex
30:34 - relationships between words in higher
30:36 - dimensional space but in order to do
30:39 - that it's useful to look at a single
30:41 - example that ties words to numbers in a
30:46 - low dimensional space that we can either
30:48 - visualize or sort of like put into our
30:50 - brains and so I've kind of described to
30:53 - you
30:53 - what word Tyvek is what the model looks
30:56 - like when it's complete I haven't looked
30:58 - at all about the training process right
31:00 - the animals example is hard-coded I'm
31:02 - gonna show you I'm gonna do a port of
31:05 - one of Allison's examples of words
31:07 - associated colors associated with
31:08 - numbers right a color a word red is 255
31:12 - comma zero comma zero that's a word to a
31:14 - vector and that's going to be from a
31:16 - data set and then the third thing that
31:19 - I'm gonna do is look at what is
31:21 - traditionally thought of as word to Veck
31:23 - these higher dimensional large large
31:27 - dictionaries of words and their
31:29 - associated vectors those word embeddings
31:31 - so that's going to be the journey here I
31:33 - don't know how many videos it's gonna be
31:35 - 3 4 5 471 something like that and then
31:39 - at some point I'll try to also do some
31:40 - projects with that so in the next video
31:42 - I'm going to do a port of Alison's
31:44 - project which you can find all in Python
31:47 - all the code in Python on that tutorial
31:48 - that's linked in the description and I'm
31:50 - gonna do a JavaScript port of it okay so
31:52 - I'll see you there maybe or maybe not go
31:54 - read that page it's excellent
31:56 - ok good bye
31:59 - all right uh so I have a question for
32:03 - those of you viewing at home or wherever
32:05 - you might be had you never heard of word
32:08 - to Veck before and are you a beginner if
32:10 - so hopefully all right okay
32:27 - all right so we're gonna come down to
32:30 - the color idea and I am going to
32:34 - basically do this from scratch but I am
32:39 - going to need to open oh no come back
32:41 - come back
32:47 - xkcd x.x yeah I want a new why is that
32:55 - not opening in a new tab X okay I will
33:01 - just do it manually open in a new tab
33:04 - and close this this I still need you
33:12 - just open up something here on this
33:15 - computer in case I want to use it as a
33:16 - reference this is me right yeah made
33:22 - sense although I was only half listening
33:25 - that's good or bad
33:29 - all right okay github.com slash Roz
33:41 - Vaughn says this was okay and
33:43 - understandable Thank You Roz bond oh
33:53 - yeah sorry I'm opening up I have a repo
33:55 - which has code for doing this and in
33:57 - case I get really stuck it would be
33:59 - useful to have it as a reference if
34:00 - you're looking for it it's ship github
34:03 - slash shipment /p v - word Tyvek and i'm
34:07 - looking at the word color vectors but
34:09 - then what I want to get is
34:11 - is the color data come on this is so
34:16 - crazy how it won't control open in a new
34:23 - tab okay so I'm gonna start with this
34:26 - and I'm going I'm not gonna do this in
34:29 - the p5 editor this I think is requires a
34:34 - bit more so then I'm gonna go to the
34:36 - desktop and do word to vac oops it
34:48 - doesn't autofill if it doesn't exist but
34:50 - I'm so used to like Gmail now just like
34:53 - finishes my sentences for me I'm like
34:55 - you know the directory name that I want
34:56 - to make just tab finish it for me all
35:01 - right now and then I want to do p5 G - B
35:07 - and what do I wouldn't say a color let's
35:11 - say color vectors oh I didn't I didn't
35:15 - install this NPM - G NPM install p5
35:21 - manager dusty so I use a tool called p5
35:25 - manager which will spin up all the files
35:28 - I need for a p5 project really quickly
35:30 - and of course that didn't work as I made
35:37 - all these workflow videos setting up all
35:41 - of my settings and I need a like a fresh
35:44 - user on this computer went back to this
35:48 - user and none of the stuff is set up how
35:50 - do I fix that thing again it's fix of
35:53 - course I went over this in my video but
35:55 - I can't remember it
35:56 - fix NPM permissions and this is the way
35:59 - that I like to do it I like to make a
36:02 - directory called NPM global and this set
36:07 - that as the path and then export that
36:12 - and source but I'm using zsh so source z
36:20 - RS r zs r CH c are these
36:25 - our s Pro Z s HRC that's what it is
36:35 - zs HRC there we go and now I should be
36:40 - able to install that apologies that I'm
36:41 - not explaining what I'm doing but I do
36:43 - explain this in my work look let me get
36:46 - back to the chat here whoo-hoo somebody
36:50 - already made a breaking news sound
36:52 - effect let's all this okay whip sigh
36:55 - have my mute that somebody made a
37:01 - breaking news sound effect which I am
37:03 - throwing caution to the wind I'm just
37:04 - gonna play live right now it's actually
37:11 - pretty good
37:13 - okay that is pretty good
37:17 - all right and Simon is telling me that a
37:22 - glove is faster than we're Tyvek great -
37:24 - no thank you
37:25 - okay now p5o you don't had this idea
37:30 - oh I mentioned Tom Scott up my brain
37:33 - needs to stay focused on one thing it
37:36 - does not work that way
37:38 - p5 - p5 G - B - B B I think it's G - B
37:48 - color vectors let's try that okay that
37:52 - worked then I want to I'm going to open
37:55 - this up in Visual Studio code let's move
38:00 - over a tiny bit and move over a tiny bit
38:03 - and then let's get here I don't want the
38:07 - libraries because I prefer to just use
38:10 - the CDN and so I have to change the
38:16 - template I'll do that eventually CDN
38:18 - p5.js and let's grab this
38:25 - I want them let's use them unified and
38:29 - put that I don't want to follow the link
38:30 - I just want to put this in here and then
38:33 - I want to put this in here
38:37 - I want to do this copy copy copy copy
38:39 - copy copy copy I don't think I'm gonna
38:42 - use sound so I can get rid of this I
38:46 - don't need all this CSS nonsense and now
38:49 - I am ready I can say no canvas
38:56 - console.log hello
39:00 - color vectors and I can run a server I
39:10 - could run the light then I'm gonna say
39:13 - run my server and now I really should
39:19 - develop something that just spins all
39:20 - this stuff up all at once localhost 8080
39:25 - which I am amusingly googling instead of
39:29 - oh there we go hello color vectors there
39:37 - we go alright we're ready to start
39:39 - coding now what I need to do is get
39:47 - sorry I want to get where am I looking
39:50 - for here I want this file and I'm gonna
39:56 - put it in where to vak color vector it's
39:59 - xkcd JSON and that's from here go back
40:04 - to here and from here okay
40:12 - all right yes Mathew Braun says copy the
40:16 - CD ends to the templates of your future
40:18 - self will be happy I know but I don't
40:19 - want to waste the time do it now but I
40:21 - won't remember before the next time I
40:22 - come back and you're to tell me again
40:23 - it's a vicious cycle that never ends
40:32 - okay teeth knee
40:36 - Hajduk is it tight teeth knee oh this is
40:41 - gonna be that's gonna be good for some
40:43 - stick later alright I need an eraser
40:52 - which I have here need a marker which I
40:55 - have here okay alright alright part two
41:05 - of my word to vex series your back and I
41:08 - thank you for that
41:09 - hello I'm here to talk about word
41:12 - vectors alright so let me let me mention
41:15 - again well lots of people sorry are lots
41:23 - of people are already doing my nature
41:26 - code thing which is really cool okay
41:33 - hello part two I think I'm on part two
41:36 - of my word Tyvek series I'm talking
41:38 - about word vectors word embeddings words
41:40 - and numbers and how they go together now
41:43 - let me be very clear here this
41:45 - particular section this video is
41:47 - directly based on this wonderful
41:49 - tutorial by Alison parish called
41:51 - understanding word vectors released
41:53 - under the creative commons by 4.0
41:56 - license if you also use this stuff
41:58 - please attribute it according to the
42:00 - license to allison parish i will include
42:02 - a link to this in the video's tutorial i
42:04 - talked a bit about word vectors in
42:06 - general and about this tutorial and
42:08 - other things that you might look at for
42:09 - inspiration in the previous video and
42:11 - now in this video i'm going to do a
42:13 - direct port of i went too far away
42:19 - ah there we go language with vectors
42:21 - color so a lot of people who are well
42:23 - who are watching this live at the moment
42:25 - we're asking about I don't get it I sort
42:27 - of get that that's like word well word
42:29 - in vectors or word embeddings but like
42:31 - what that made no sense when I would
42:40 - just went on a tangent here so people
42:45 - were asking in the previous video I
42:47 - don't get it like I thought that word
42:49 - vectors are just kind of like about the
42:51 - meaning of the word or the meaning of
42:53 - the word in its context or similarity
42:55 - between words and I don't why what is
42:57 - cuteness I have this example before I've
42:59 - looked at Allison Parrish example with
43:00 - like cuteness and sighs what does that
43:01 - have to do anything so let me be clear
43:03 - my goal is to get to the point where
43:06 - we're talking about this more
43:08 - generalized idea that ends that we get
43:12 - word embeddings words paired with
43:14 - numbers from a machine learning process
43:16 - that generates these numbers according
43:19 - to the way words appear in a very large
43:20 - body of text but we're not doing that
43:23 - yet I just want to look at this idea of
43:25 - a vector space and some of the math
43:27 - associated with it and how that can
43:29 - transfer to text and this is exactly
43:31 - what Allison Parrish does in her
43:33 - tutorial and oh boy that was a mess
43:38 - sorry buddy you know what we should keep
43:42 - that and then someone should make like a
43:44 - little animated a little animated a
43:47 - little animated I kind of get this a
43:52 - little animated thing wait hold on
44:04 - oh oh here's everybody ah this is not
44:15 - this was going well in its own way but
44:17 - it's alright there's somebody talking in
44:22 - the hallway kinda loud can you hear them
44:29 - alright let's try this one more time
44:32 - yes are on my ukulele hello darkness my
44:36 - old friend I've come to talk with you
44:40 - again yeah I guess I will just sort of
44:45 - explain that again I don't even remember
44:46 - what I said so okay all right m'kay demo
45:12 - 88 asks why you always have to click the
45:14 - camera on and off I will refer you to
45:17 - the television program losts from the 19
45:20 - from the Ox what most los times in the
45:23 - 90s note it's early two-thousands
45:24 - whatever I'll refer you to that program
45:26 - where a button had to be pressed lest
45:28 - and that button was not pressed the
45:30 - world would cease to exist and I'll make
45:33 - the case every 30 minutes
45:36 - I'll put ok I'm slowly lost my momentum
45:51 - so what I want to do is do a direct port
45:55 - of this example from Allison parish
45:57 - about language with vectors colors now
45:59 - people were asking in the previous video
46:01 - I kind of looked at Alice's example of
46:03 - like Oh a word like an animal could be
46:06 - paired with data like its size and its
46:09 - cuteness what does that have to do with
46:10 - word vadik embeddings weren't you oh
46:12 - this camera lid off wait this
46:14 - do not go off its cable is loose or its
46:18 - plug is out it's like there we go it's
46:22 - it's a kid it's it's a connection issue
46:26 - ah jeez how many times all right I don't
46:32 - even know where I was so so what I want
46:37 - to do is go through this exact example
46:39 - which is in this tutorial in Python and
46:41 - port it's a JavaScript and what this
46:43 - example is going to do it's going to
46:44 - give us the opportunity to look at the
46:46 - idea of a word paired with a particular
46:50 - is this where I was I'm like oh and I
46:54 - haven't even recording this to disk
46:56 - everything what a mess I can do this I
47:00 - can get past this part where I'm stuck
47:13 - Thank You Siddharth I don't understand
47:15 - why anyone would possibly give me a
47:16 - super chat right now with what's going
47:18 - on in the Prix but I think I'm gonna try
47:25 - to just go from where I walked over
47:26 - there that's yeah thank you for all
47:30 - everything that you do so what I want to
47:37 - do is a direct port of this example from
47:39 - Allison Parrish that looks at language
47:41 - with vectors colors now let me let me be
47:43 - clear about something for a second in
47:46 - the previous video I talked a little bit
47:47 - about this example which was looking at
47:50 - animals in a two dimensional space where
47:52 - the x axis is like their size and the y
47:55 - axis the size of x axes are cuteness and
47:57 - is that word Tyvek well not exactly
48:01 - this these are word embeddings meaning
48:03 - there is a word embedded with some
48:06 - numeric data that's the best way to
48:08 - describe it but it's not exactly what
48:11 - you will find if you look up the term
48:14 - word to Veck word Tyvek is a particular
48:16 - algorithm a machine learning algorithm
48:18 - to take a large body of text and produce
48:21 - these word embeddings high dimensional
48:23 - arrays of numbers based on how the words
48:26 - appear in context in that text I'm gonna
48:28 - get to that a little bit later so sort
48:30 - of in theory the theory of it is we'll
48:33 - end up with this essence of the word and
48:35 - words that are similar in meaning or
48:38 - context or what if that's a big question
48:39 - mark are going to live close to each
48:42 - other in that 100 or 300 or a thousand
48:45 - dimensional space but I'm making the
48:47 - case and this is really from Allison
48:49 - parish's tutorial that we can maybe
48:50 - understand this concept or practice this
48:53 - concept in a simpler way to start and
48:55 - that simpler way will be to use a data
48:58 - set so for example this is a data set
49:01 - from the ER the color survey results
49:05 - from X xkcd so who in the rainbow can
49:10 - draw the line where the violent tint
49:12 - ends and the orange tint begins it's
49:14 - distinctly we see the difference of the
49:15 - colors but where exactly does one first
49:17 - blending enter into the other so with
49:19 - sanity and insanity how apt okay this
49:24 - got some bad language on it come back
49:28 - family friendly friendly coding Channel
49:31 - I want to use this data set it's the
49:40 - xkcd color set it's the 954 most common
49:44 - RGB monitor monitor colors as defined by
49:46 - hundreds of thousand participants in a
49:48 - color name survey you can see more
49:49 - information about that survey here so
49:53 - anyway but the data set itself is over
49:55 - here on in the darius because that means
49:58 - open source project corpora which has a
50:00 - lot of interesting JSON data sets so i
50:02 - have downloaded that data set and i have
50:05 - it right here so the question is can we
50:10 - turn this into a word to Veck like
50:15 - scenario and what kind of strange
50:17 - outcomes can happen if we could pair
50:20 - each one of these words or sets of words
50:22 - like cloudy blue with a set of numbers
50:24 - all right so let's write some code to do
50:27 - this Oh internet I'll a to Internet
50:44 - which means I love you and I hate you I
50:46 - late you internet I love you alright
50:57 - let's write some code okay so first
51:00 - thing I'm going to do is I'm going to
51:01 - add to this preload function and I am
51:05 - going to just create a data set I'm
51:08 - going to say data equals low JSON xkcd
51:12 - JSON and then I'm gonna say here in
51:15 - setup console dot log data so let's make
51:18 - sure this works I'm going to go to the
51:21 - browser where I have my code running and
51:28 - kind of set a setting
51:34 - network I'm looking for Network disable
51:37 - cache there we go okay so we can see
51:44 - here that I have now loaded into that
51:47 - variable that array of 949 colors each
51:51 - one is an object with a label cloudy
51:53 - blue under the color property and an
51:56 - actual hex value so my goal right now is
51:59 - to turn that into a list that looks more
52:02 - like this the label with a number
52:08 - apologies for a second here
52:12 - need a tissue okay so all right so let
52:27 - me first write a little bit of code to
52:30 - kind of process that data so I am going
52:33 - to let's write a function up you know
52:37 - process data put in a separate function
52:40 - and I'm gonna create a variable call it
52:46 - vectors it's going to be an object and
52:49 - in this in this object I first want to
52:54 - go through everything in data and
52:59 - actually everything that's in data is in
53:02 - data colors so I'm going to say let
53:07 - colors equal data dot colors then I'm
53:11 - gonna say colors dot length Oh
53:15 - audio fill autocomplete you do not
53:17 - complete me colors and then I'm going to
53:21 - get an individual color is colors index
53:23 - I and then what I want to do is say
53:27 - vectors create I'm gonna used create
53:33 - vector so this is what's kind of
53:34 - interesting about this I forgot why I
53:35 - was doing this all right so here's the
53:38 - thing right now the data
53:45 - the data from that data file is just in
53:48 - a big array and the array has a bunch of
53:52 - objects in it color you know blue comma
53:56 - RGB I forget what it is and then like
53:58 - the hexadecimal you know value like this
54:01 - it looks like this I want this to be in
54:04 - a associative array a dictionary but I'm
54:07 - just gonna use a JavaScript object for
54:08 - that so just an object where the color
54:12 - blue is the property name and the value
54:15 - of that property and originally in my
54:17 - head I was like oh I just need to
54:18 - convert this into numbers and then I
54:20 - could make a little array like zero
54:21 - comma zero 255 but guess what I want to
54:25 - do vector math my vector is three
54:29 - dimensional because there's an RG and a
54:30 - B there happens to be in p5 itself a
54:35 - class called p5 vector I can make an
54:39 - instance of it with the create vector
54:41 - function so even though eventually later
54:44 - if I'm gonna be doing vector math on a
54:46 - hundred dimensional vector an array with
54:48 - a hundred numbers in it this create
54:50 - vector won't work it's a nice
54:52 - coincidence that RGB has three
54:55 - components just like a three dimensional
54:57 - space plates look coordinate XYZ at
55:00 - three dimensional vector so I can put in
55:02 - here that p5 vector create vector 0
55:06 - comma 0 comma 255 so that's what I'm
55:08 - trying to write the code to do so I can
55:12 - say vectors I so I'm going to say I'm
55:17 - actually say label equals colors index
55:20 - eye color and then RGB equals colors
55:25 - index I dot and what what is it in here
55:27 - it is hex it's under hex and actually
55:32 - I'm pretty sure that in p5 if I have a
55:38 - string like let s equal zero zero zero
55:42 - this is a the hexadecimal code for red I
55:46 - can say color s and it will give me a
55:50 - color object that has the RGB values in
55:53 - it so what I'm gonna do is a little
55:55 - confusing because everything is called
55:57 - color
55:58 - so there's the colors inside of the JSON
56:00 - file and each element of the colors
56:03 - array has a color label and now there's
56:06 - a p5 color function so there's a lot of
56:08 - stuff called color it's all different
56:09 - but I'm gonna say RGB equals the color
56:12 - function with the hex thing passed
56:15 - through it and then I can say RGB our
56:19 - RGB gbg RGB B so now I'm gonna and then
56:25 - the vectors with that label there we go
56:28 - so this is just a little bit of data
56:30 - cleanup to a format that I want to have
56:33 - it I don't know if it really matters so
56:35 - much but I think this is gonna help I
56:37 - create an empty object they look at all
56:39 - the stuff the data the weights in the
56:41 - JSON file and then one at a time I make
56:44 - a p5 vector out of the RGB values and
56:46 - then I should I'm gonna say a return
56:50 - vectors and I suppose that it would be
56:54 - nice to like pass in this argument and I
56:57 - could say let vectors and then I'm going
57:01 - to say vectors equals and maybe I'll
57:04 - call this like color vectors ok that did
57:09 - not work can't read property lengths of
57:12 - undefined sketch such as line 13 let's
57:18 - console.log data it must have been
57:23 - confused
57:24 - oh boy I'm doing this in the wrong place
57:29 - ha the whole point of preload is that
57:33 - it's a function that you call to make
57:34 - sure that data is ready before you get
57:36 - to set up because it's loading data
57:38 - loading our text file loading of media
57:40 - files asynchronous in JavaScript and I'm
57:42 - trying to simplify that this needs to be
57:43 - in set up and now I should go to say
57:47 - this here as well okay here we go there
57:54 - we go now oh yeah okay hold on weird
58:02 - what's going on oh oh there's a set up
58:05 - down here too many setups motes are too
58:09 - many setups
58:12 - okay here we go this is gonna be right
58:15 - eventually there we go
58:16 - now I have basically a dictionary where
58:19 - every single one of these colors is
58:21 - paired with a p5 vector with these XY
58:25 - and Z values no that's not right
58:27 - that is not right at all a lot of zeros
58:29 - in there let's see so there is no dot RG
58:35 - or dot B property of a p5 color I made
58:37 - that up completely red it can call the
58:42 - red function and pass in the color green
58:47 - blue this should work now just make it
58:52 - up stuff that doesn't work okay
58:54 - r is not defined this is RGB there we go
59:01 - and there we go now this is looking
59:03 - right right and algae is lives in the
59:06 - vector space 84 comma 172 time a 104 all
59:15 - right everybody I could just like have
59:20 - this view of the comments right here
59:22 - where everybody is saying all right all
59:26 - right okay
59:39 - okay thinking about this oh don't go
59:42 - away computer screen come back how am i
59:45 - doing timewise I've got about an hour
59:48 - left out of hydration that's bad all
60:00 - right
60:09 - where's my eraser now that I have this
60:15 - data set we can begin to imagine a
60:19 - physical space a three-dimensional space
60:23 - where all of these colors live all right
60:28 - so there's an x-axis y-axis an x axis
60:32 - and z axis which is actually coming out
60:34 - from the wall here and one color might
60:37 - be over here and another color might be
60:39 - here one might be off in the distance
60:40 - one might be very close up right so you
60:43 - could imagine this I'm trying to draw
60:45 - this 3-dimensional space on a
60:47 - two-dimensional surface but you could
60:49 - imagine now that I could do certain
60:51 - things by what if I just did a random
60:53 - walk what if I did a random walk
60:56 - throughout this space what colors would
60:58 - I find let's actually try let's try that
61:01 - oh why not excellent starting point okay
61:04 - so let's say where I'm going to start is
61:08 - I am going to have a position and in
61:15 - setup I'm gonna say position equals
61:17 - create vector random 255
61:20 - random 255 random 255 now what I want to
61:25 - do basically is what if I pick a random
61:28 - random space in that random vector in
61:32 - that three dimensional space let me find
61:34 - the word the color that is closest to
61:37 - that so I'm gonna write a new function
61:40 - which was I'm going to say call a find
61:43 - nearest and this function is going to
61:48 - take in a vector will call it V and what
61:51 - it's going to do is it is going to I'm
61:54 - gonna I probably need to do this I'm
61:56 - gonna just get all of the keys out of
61:59 - this array right this is a way in
62:02 - JavaScript I think I could do a for of
62:04 - loop let's try that right or for in loop
62:07 - I think I can do a for I think with an
62:10 - op write this the reason I'm stumbling
62:12 - here is this is this looks like an array
62:14 - because it's a whole list of all the
62:16 - colors but it's not an array it's an
62:18 - object where each each color name is the
62:21 - key
62:22 - and the value is the vector so I need to
62:25 - iterate through all that stuff I can't
62:27 - just use a regular loop but I think in
62:29 - JavaScript I can say for let key-in
62:33 - vectors and then I can say let and let's
62:42 - I guess I'm gonna con I can't think of
62:44 - another name for let Veck equals vectors
62:46 - ki then let's find the distance between
62:51 - oh you know what though
62:56 - guess what what I want to do is actually
63:01 - it would be kind of useful to what I
63:06 - want to do is I want to create a list of
63:08 - all the distances and then sort it
63:09 - that's gonna be that's gonna be nice to
63:11 - do so actually let me get this let me
63:14 - get this list of keys key of keys and
63:26 - sorry there's like a someone talking for
63:29 - a second it's for of no for of is for an
63:35 - array hey there's a new video from stand
63:40 - up mass which is called vector my why am
63:43 - i looking at my notifications right now
63:45 - just see something here
64:08 - all right I have a better way of doing
64:10 - this yeah sorry I just looked up my code
64:12 - for each room so me to use look at my
64:15 - code let me actually go back Matt yeah
64:25 - I don't think that's suit to interesting
64:27 - me like going back and forth with all
64:29 - the different ways of the four of loop
64:30 - because let me just go back alright so
64:33 - the first thing that I want to do is I
64:35 - want to get a list of all of those
64:37 - colors into an array so it's important
64:40 - to note that it looks like I have an
64:43 - array of all these things but this is
64:45 - actually an object where the key every
64:47 - all the keys of the object are the names
64:50 - of the colors paired with the value
64:51 - which is the vector but what if I could
64:53 - sort this list by proximity to that
64:56 - other vector well I needed an array to
64:58 - be able to do that and so oh quick way I
65:01 - can get an array is I can say keys
65:02 - equals object keys from vectors this
65:08 - gives me if I just console.log this and
65:14 - I say find nearest you can see now I
65:19 - just have an array of all the keys but I
65:21 - can sort this I can say Keys dot sort
65:24 - and now guess what if I call a sort
65:28 - function I can always sort by an array
65:33 - by my own arbitrary comparison of the
65:37 - two elements so I'm going to use the
65:38 - arrow syntax here and I'm going to write
65:41 - a function that compares two arbitrary
65:44 - elements a and B if you're not familiar
65:47 - with this arrow notation it's like
65:49 - declaring if it's a new way to declare a
65:51 - function in es6 not so new and I'll
65:52 - refer you to my video about the arrow
65:53 - function but what I'm going to do now is
65:56 - I want to say the distance one distance
65:59 - one is the distance between the distance
66:04 - between I'm going to pretend I have a
66:06 - distance function for a second
66:08 - vectors key a and vectors key
66:14 - be oh no no no I'm sorry the distance
66:17 - between V and vectors oh my goodness
66:23 - yeah yeah between hey yeah sorry I got
66:26 - confused for a second remember I'm
66:28 - trying to tell the array which one is
66:32 - closer to V so I somehow need to compute
66:35 - the distance between that and my random
66:37 - Walker right V and either A or B which
66:41 - one is closer and then I can return D 1
66:44 - minus D 2 because what sorting will do
66:48 - is sorting will take the closest one up
66:54 - sorry what's what sorting will do
67:02 - sorting when you have two elements if
67:05 - you return a negative number it puts a
67:07 - before be a positive number puts be
67:09 - before a let me the other way around but
67:11 - can't remember and if it returns zero
67:13 - then they're the same it doesn't need to
67:14 - swap them so you're just telling the
67:16 - sorting algorithm which one goes before
67:19 - the other one so I'm gonna get a
67:21 - negative number by comparing these two
67:22 - values now of course I need to have a
67:25 - distance function so I need to have a
67:27 - distance function that can take a vector
67:29 - and two vectors V 1 V 1 and V 2 and I
67:36 - could just say return p5 dot vector dot
67:39 - distance this is a little silly v1 v2 so
67:42 - I really just rat am wrapping there is a
67:43 - distance full function already function
67:47 - distance that will take to p5 vectors
67:50 - and I can get the distance between them
67:52 - with p5 Becker not dist but here but
67:57 - here I'm but I just want a and I'm doing
67:59 - that exactly here so I think let's look
68:02 - at this now I should be able to look
68:05 - here so let's look at this again and
68:09 - find nearest cannot read property dist
68:12 - of undefined all right so hold on a
68:15 - second let's make sure I have a vector
68:17 - here let me actually call find nearest
68:23 - from the code
68:27 - oh I have to call it with something okay
68:30 - no wonder was undefined you can't just
68:32 - call the whole point of you calling fine
68:34 - nearest with a particular vector who are
68:39 - you okay so this now does this look
68:44 - sorted to you let me actually unfold it
68:48 - there's a lot of things there's a lot of
68:50 - colors in here greenish blue teal ish
68:52 - greenish teal green blue aquamarine see
68:55 - - right doesn't that I picked some
68:57 - arbitrary spot now what is that color
69:00 - actually so here's the thing did I sort
69:02 - it in the correct order that would be a
69:04 - question
69:05 - so let's console.log V and then
69:11 - console.log also vectors sorry vectors
69:19 - keys index zero this would be the first
69:22 - one so in theory these should be two
69:25 - very similar values let's see well I'm
69:34 - console logging V in too many places 64
69:39 - 78 to - 52 53 69 84 so that makes sense
69:44 - it's pretty close you know 172 money
69:48 - right so this looks right if I sorted it
69:50 - the other way I just I could never
69:52 - remember which way the sorting works so
69:54 - I just try it both ways if I sort it the
69:56 - other way you'll see I'm getting the
69:58 - furthest thing the color that's the most
69:59 - different okay so now what I'm going to
70:05 - do is I'm gonna add a draw loop and now
70:12 - this function I want it to return keys
70:17 - index zero I just want to get the
70:19 - closest one and so what I'm going to do
70:24 - is I in draw I'm gonna say fine nearest
70:29 - and then I'm going to create a div with
70:33 - that color in it I'm gonna say call it
70:36 - color name so I don't want to override
70:38 - the color variable color name
70:40 - and then I'm going to say ha I'm gonna
70:43 - I'm gonna say let V rant R equal P 5 dot
70:46 - vector random it's a random 3d that
70:50 - gives me a random vector I think random
70:52 - 3d will give me a random vector and then
70:54 - I will say pause add R so this is random
70:57 - walk I'm just going to randomly change
70:59 - that vector and create a div for a new
71:01 - color name and let's change the frame
71:03 - rate to like five to like one so it does
71:06 - this once per second let's take a look
71:12 - so look at it this is my random walk you
71:15 - can see that it's not getting very far
71:17 - away it started with sepia so I should
71:20 - probably take a bigger step right the
71:23 - step is so small that it's mostly
71:25 - wandering around the same color there
71:27 - aren't that many colors so I'm gonna say
71:29 - r dot multiply by 10 so I'm gonna make
71:33 - that step much bigger boy let's try this
71:45 - one more time
71:46 - let's make it much bigger we can go a
71:48 - little faster there we go so we can see
71:54 - now I'm walking around there should be
71:56 - like each one of these steps is this
71:58 - fairly similar color to the previous one
72:00 - so this is the idea I am performing a
72:03 - mathematical operation in vector space
72:05 - walking around a 3d vector I'm finding
72:10 - the word that it's most closely
72:12 - associated with that one by Euclidean
72:14 - distance and then I am rendering that
72:17 - word on the screen so this is pretty
72:19 - good I think there are some more
72:20 - probably some more interesting things we
72:23 - could try to do let me take up a break
72:25 - for a second and let me try to do one
72:27 - more example with this data set just to
72:30 - show you a bit more about like analogies
72:32 - and vector math and then after that
72:35 - we'll move to the actual an actual word
72:38 - to Vectren model
72:44 - why should I use the absolute value okay
72:55 - so why should I use the absolute value
72:58 - oh you know what past zero zero zero for
73:07 - testing that's an interesting idea let's
73:08 - do that so let's start with I mean I do
73:13 - need to constrain it because I don't
73:17 - think there's there's no negative
73:18 - numbers in this data set whoops
73:23 - right so this was starting with zero
73:25 - zero zero all right um actually let me
73:36 - come back let me let me not finish that
73:38 - video over a second before I move on
73:44 - let's actually just test something like
73:46 - let's say for example I want to instead
73:48 - of because it's random just to make sure
73:50 - this is really doing what we think let
73:52 - me start with like blue so I am going to
73:55 - start with not color sorry create vector
73:58 - I'm going to start with blue and let's
73:59 - see what we get primary blue pure blue
74:02 - true blue pure blue blue primary blue
74:04 - now one thing one thing that's an issue
74:06 - is I shouldn't
74:08 - I really can't allow negative numbers
74:10 - because if I'm wandering off to negative
74:12 - land there's no negative numbers in my
74:14 - data set so probably to make this a bit
74:16 - more accurate in terms of this random
74:19 - walk where do I have that in draw it's
74:21 - right here I probably want to say paws
74:26 - dot X there's probably a more thoughtful
74:28 - way of doing this equals oh I could I
74:32 - see this I could equals I need to stay
74:37 - in sort of positive lands so constrain
74:41 - paws dot X between 0 and 255 or I could
74:45 - do like an absolute value or something
74:46 - of the vector that would be weird but
74:47 - let's just let's just do this as like a
74:49 - sort of a quick solution so this will
74:52 - keep me in that space
74:54 - and let's run this again all it'll keep
75:04 - me it'll keep me in that space and let's
75:07 - run this again
75:08 - and we can see now eventually after
75:11 - enough time we're gonna walk away from
75:14 - primary blue and end up sour and Barbie
75:18 - pink Barney neon pink strong pink and if
75:20 - you go back to Allison's tutorial which
75:21 - all this is based on let me see if I
75:24 - have that here oops
75:26 - you can see Alison has a wonderful
75:28 - example which does the following sorry
75:32 - that I don't have this sorry if you go
75:40 - back to Allison's example if you go back
75:42 - to Alison parish's tutorial she has an
75:45 - example which does something kind of
75:47 - like this which starts with a little
75:49 - poem roses are red and violets are blue
75:53 - and then randomly walks around and then
75:57 - you see it by the end we have roses are
75:59 - brown orange violets are peacock blue so
76:02 - you could imagine what is a creative
76:04 - project you could do that takes this
76:06 - idea and expands on it as an exercise
76:08 - you might even just try to take my code
76:10 - and make it do exactly what Allison's
76:12 - example does in the tutorial and so I
76:14 - feel like I want to do one more I'm not
76:17 - one more example with this data set I
76:19 - think before I go and look at the larger
76:23 - context of the word to vac machine
76:26 - learning system that will train a model
76:29 - Oh set the text of that color where can
76:44 - i okay I'm gonna go back and record all
76:45 - of this stuff right let me go back to
76:47 - where after that if I finish the
76:49 - constrain
76:57 - so even though I start with primary blue
77:00 - you can see I've started walking around
77:02 - and getting more I'm gonna I'm gonna end
77:05 - up somewhere else eventually but these
77:07 - colors are related as I'm going okay so
77:09 - this is working pretty well the way I
77:11 - imagined it and of course Steve and me I
77:14 - am to me both you chatter like Hello set
77:17 - the text of that color so let's do that
77:19 - just to just to say that I think will be
77:22 - more interesting so where I create the
77:23 - div where do I do that
77:24 - I create the div here and I'm gonna say
77:27 - let div equal creative and I'm just
77:30 - gonna use the p5 Dom library and say
77:32 - style background color Oh background
77:35 - color now too bad I didn't keep that hex
77:37 - code cuz I got the hex code I could put
77:39 - it right there let's keep the hex code
77:43 - so where I do that where I process the
77:46 - data let me add in vectors label oh it's
77:54 - not an object
77:56 - hmm it's fine I'll just use RGB I'm just
78:06 - gonna use I could just say I'm use a
78:08 - template literal RGB what is it the
78:15 - vector is that the vector is vectors
78:21 - color name because I just returned I
78:26 - just returned I just returned the key so
78:28 - I probably should I could have returned
78:29 - the whole vector so many ways you could
78:31 - do this and now RGB video VIX okay this
78:41 - is easy this is fine way to do it
78:43 - V dot this is like the CSS syntax V dot
78:48 - Y V Z alright let's try this and that
78:57 - should do the trick alright here we go
79:01 - oh I put the background color alright I
79:05 - meant to set the text color but how do I
79:08 - set the text color font
79:11 - no textcolor know CSS color she's
79:17 - probably just color there we go okay so
79:22 - now we can see really how it's all so we
79:25 - can see how this is a random walk
79:26 - through a color space and I would love
79:29 - to let this go for a little while and
79:31 - end up somewhere okay
79:32 - so Alison Parrish in her tutorial
79:35 - actually does something very similar to
79:36 - this and I might as an exercise suggest
79:39 - doing this she actually takes this poem
79:41 - this idea of a poem roses are red
79:43 - violets are blue and walks through the
79:46 - color space for each of these I've done
79:47 - just a little piece of that so what kind
79:49 - of creative idea can you do visualizing
79:52 - this three-dimensional color space
79:53 - through words through color through a
79:55 - random walk I I think I should do one
79:58 - more I'm not sure yeah I think when I
80:00 - try to do one more demonstration with
80:01 - this data set and I'll do that in a
80:02 - separate video and then I will come back
80:03 - and actually finally go to the point
80:06 - where we look at what does it mean to
80:08 - take a pre train set of word embeddings
80:11 - that's actually used the word to vecna
80:13 - Xin learning model training process okay
80:15 - see you there background color is better
80:21 - real background color worked pretty well
80:22 - yeah all right there was a super chat I
80:25 - think with a question which I I think I
80:28 - should try to answer can we draw a
80:31 - circle of color variations with it yes
80:34 - so I could use a canvas you know there's
80:38 - lots of things I could do like for
80:39 - example if I write here if I said create
80:43 - canvas 100 comma 100 I could also do a
80:47 - fill feed well in the draw function
80:52 - separate from the divs I could say
80:55 - background you know zero fill why is it
80:58 - doing that fill and I need to do it with
81:03 - V V X V Y V dot Z and then draw an
81:12 - ellipse which is at 5050 you know 100
81:19 - 100
81:20 - hundred so that if I go back to my
81:24 - sketch unexpected token there's an extra
81:30 - parenthesis there for no reason you can
81:32 - see I'm always now as this is going down
81:34 - the circle no so I probably could do
81:37 - something where I get a dot next to each
81:39 - one of these or something but you see
81:41 - the idea and I could also in this case
81:44 - maybe it would make sense do not create
81:46 - a new div but just like replace the
81:48 - previous div so for example I could do
81:52 - let div equal here and then I could say
81:56 - and set up a div equals creative with
82:00 - nothing in it and then I could say a div
82:04 - instead here like div dot HTML color
82:09 - name and there we go so this is kind of
82:16 - interesting where I could do it this way
82:18 - where I'm just walking through it and
82:19 - then drawing it okay let me go back to
82:25 - the bottom of the chat doesn't the word
82:29 - as a CSS style work oh that's
82:31 - interesting
82:31 - do it just yes some but do all of these
82:34 - these this isn't the list of all the CSS
82:36 - words that would be another data set
82:39 - that I could use I don't think macaroni
82:40 - and cheese is a CSS word okay
82:57 - all right now I'm Allison has another
83:02 - demonstration on this on her tutorial
83:18 - all right which you could do like the
83:20 - average color of a text
83:35 - I'm reading this synonyms I mean maybe
83:38 - this is really maybe that's enough I
83:42 - mean I shouldn't do another one
83:44 - maybe I'm kind of done with this
83:56 - actually let's try doing something I
83:59 - have the nature of code text so let's
84:06 - try it let me find one of these nature
84:08 - of code texts so there's this one from
84:18 - sponge man
84:32 - okay nature of code text raw download
84:42 - call this an NOC txt and desktop work
84:57 - Tyvek
85:07 - whoops you'll see txt how big a file is
85:11 - this it's only 550 this is the whole
85:13 - book yeah makes sense all right so what
85:19 - I want to do is let's test out this idea
85:24 - first for a sec um let's get rid of all
85:39 - this stuff and draw what I want to
85:46 - figure out is how many make a sonnet
86:00 - with color make it act visualize it in
86:03 - 3d all these are great suggestions what
86:06 - I want to do is let me do let NOC and
86:15 - I'm going to say
86:29 - and I'm gonna say NOC equals
86:35 - join lines join lines and then console
86:43 - dot log and OC dolly so I'm just testing
86:46 - just checking something here I want to
86:48 - see whoops not there because desktop
87:02 - this is supposed to be in there so there
87:08 - okay definitely got the whole text of
87:09 - the book what else on my console logging
87:14 - that I don't need so one thing I want to
87:17 - do is I just want to do something like
87:20 - [Music]
87:27 - let me find like so let me just see
87:33 - we're NRC dot split this could be better
87:40 - but split by all words
87:52 - oh but there could be some of the colors
87:54 - are two words but that's fine and then I
88:01 - want to say if well actually I could use
88:06 - a regular I'm trying to just trying to
88:09 - figure out if any of how many of the
88:11 - words in xkcd show up in so because I
88:16 - was say if vectors words index I
88:22 - console.log words index I so I'm
88:26 - basically going through I could user I
88:28 - maybe using a regular expression would
88:29 - make more sense but let's let me just do
88:32 - this for a sec so black/white grass gray
88:38 - constructor constructor is a color in
88:42 - the xkcd set that's weird
88:50 - that doesn't make any sense
88:52 - Oh constructor is a Oh the how they get
88:58 - you
89:00 - and what is it is own property I think I
89:08 - have to use his own property I'm sorry
89:14 - I'm just figuring this out myself right
89:16 - now I think there might be a better way
89:19 - to do this actually I should be looking
89:21 - at the chat is own property words index
89:26 - I let's see this has owned property has
89:34 - owned property yes so right okay great
89:41 - so these are all the words that I use in
89:45 - nature of code but this isn't great
89:48 - because I'm missing things that are two
89:54 - words
89:57 - so another way I could do this would be
90:01 - to another way that I could do this
90:04 - would be to all the and then create a
90:16 - regular expression out of that key and
90:22 - then let's try key match you know NOC
90:35 - console.log NOC match projects and how
90:48 - do I add the flag like this gee I think
90:53 - that's how I do it let's see what this
90:56 - does not
91:09 - so new reg XP that's right why did that
91:21 - give me that error 21 Oh reg that's Ajit
91:31 - that's supposed to be G okay sorry about
91:33 - that
91:34 - right okay so red match to Brazilian
91:37 - times gray so this works rose rust cream
91:53 - t.t i say t o because no no it's got to
92:00 - match it with a word boundary right t is
92:06 - probably in a lot of words but not as
92:08 - its own word so how would I do that
92:12 - equals with a word boundary like this so
92:30 - let me just see let me do this matches
92:37 - if matches console.log matches I don't
92:43 - want to print out all the null
92:51 - it's got to match something this must
92:56 - not be right
93:07 - string includes would be better index of
93:11 - yeah index uh but uh I don't know what
93:15 - I'm doing here I this is sort of
93:17 - pointless I think what I just want to do
93:19 - is get a small section of the book so
93:27 - and I'm not gonna like let me just get a
93:34 - paragraph like uh uh here I'm gonna do
93:36 - something different this will be good
93:41 - rainbow Wikipedia
93:54 - okay
93:56 - let's rename this to a rainbow so this
94:04 - definitely has the cut the word red in
94:07 - it and let's let's actually I'm just
94:14 - curious see what this gives me oh yeah
94:27 - definitely
94:31 - where's red
94:39 - didn't match red why not
94:53 - oh I know why I probably need to do this
94:58 - right yeah there we go that's what I
95:03 - needed to do so this is an annoying
95:05 - thing if you back slash it's an escape
95:07 - character but I actually want the back
95:09 - slash I need to like escape the escape
95:11 - character thank you very much
95:14 - okay so sky sky violet violet okay so
95:19 - what I'm gonna do this is fine okay I
95:22 - have an idea now have an idea I'm not
95:27 - gonna use regular expressions anyway but
95:30 - I have an idea okay
95:43 - okay okay I have an idea this is great
95:58 - I'm gonna
96:14 - okay
96:29 - okay
96:51 - coating challenge now just is the
96:58 - tutorial it's fine all right so let me
97:11 - it's fine okay
97:15 - I'm sorry what time is it oh I can do
97:23 - this all right
97:36 - okay
97:39 - okay the word defect video number three
97:42 - now I'm still not into the actual word
97:44 - to Veck model itself yet I'm still just
97:47 - playing around with this idea of words
97:50 - being associated with numbers and the
97:52 - example scenario that I'm using is a
97:54 - color red blue steel which is a word
98:00 - associated with numbers like it's red
98:02 - value it's green value it's blue value
98:04 - in RGB space okay so and all this is
98:07 - based off of Allison parish's tutorial
98:10 - understanding word vectors which is here
98:14 - under the creative comments 4x4 BY 4.0
98:17 - license please make sure your if you're
98:19 - using this stuff also you attribute it
98:21 - this that I have a breaking news track
98:32 - alright hello and welcome to word to
98:40 - vector tutorial number three I am not
98:42 - yet actually to the part where I'm going
98:44 - to use the word to Veck algorithm model
98:48 - itself I'm still just in a place where
98:50 - I'm looking at okay well I have words
98:52 - and I have numbers what does that mean
98:54 - what kind of things can I do with that
98:55 - and the scenario that I'm using which is
98:57 - from Allison parish's excellent
98:59 - understanding word vectors tutorial
99:01 - available under the Creative Commons 4.0
99:04 - license please if you're basing stuff
99:06 - off of what I'm doing also attribute
99:07 - this in the scenario that we're looking
99:11 - at is colors colors so and you can find
99:16 - you could find that down here so what I
99:18 - have is I have a p5 sketch which is
99:22 - loading this color database of the 904
99:27 - most common RGB monitor colors from an
99:29 - xkcd survey and I have did a previous
99:33 - tutorial so here here's my idea this is
99:35 - what I would do in this video I am going
99:37 - to take some text from the rainbow
99:40 - Wikipedia page and I'm gonna say let's
99:43 - sprinkle some red on it or sprinkle some
99:45 - blue or sprinkle some of this color what
99:47 - does it mean to add some color to it and
99:49 - how
99:49 - Tech's change so I our everything the
99:53 - tiny bit of code here basically nothing
99:54 - I introduced from the previous video I
99:56 - introduced a variable called lines I'm
99:58 - loading this text file where I just
100:00 - copy-paste the Wikipedia content into
100:02 - you can think of a different way of
100:04 - doing this and then now what I'm gonna
100:07 - do in setup is I have a global variable
100:09 - called rainbow I'm gonna say rainbow
100:11 - equals join when you load a text file in
100:14 - p5 with load strings it gives you an
100:17 - array where every line is on a different
100:18 - is in a different element of the array
100:21 - so I'm going to say join lines and I'm
100:24 - gonna give it a delimiter like the BR
100:26 - tag and then I'm just gonna in I'm gonna
100:28 - now add said I'm going to say create pr8
100:32 - books create PE rainbow so right now we
100:35 - should have if I go here is we should
100:38 - see and I'm gonna say no canvas although
100:41 - I might wanna actually use the canvas a
100:43 - little later we can see here I have all
100:46 - that text now what I want to do actually
100:49 - is I want to highlight and color
100:51 - anything in the text that appears in the
100:54 - X in the data in the color database so I
100:56 - think actually what I want to do is
100:57 - first split this up into words so I'm
101:00 - gonna use rainbow dot split and you
101:05 - could check out my tutorials about
101:06 - regular expressions and word weird
101:07 - counting and all that stuff where I do
101:08 - this a lot I could definitely come up
101:10 - with a better regular expression but I'm
101:13 - just gonna split by anything that's not
101:14 - a character that's a through Z or 1
101:17 - through 0 through 9 so I'm gonna do this
101:20 - then I'm going to say I equals 0 I is
101:23 - less than words dot length I plus plus
101:25 - and I'm gonna say create span words
101:28 - index I this is gonna the BR stuff is
101:32 - going to mess up I'm gonna say this or
101:39 - the BR pull this work oh boy didn't like
101:43 - that did it
101:55 - I'm not gonna worry about that though
102:04 - the BR stuff is gonna mess that up so
102:05 - I'm just gonna make that a space instead
102:07 - and now if i refresh this page there we
102:10 - can see all the words whoops all the
102:16 - words are together in one line need to
102:17 - put spaces between them this is kind of
102:20 - a terrible idea but I'll just do this
102:22 - and now okay so here's the thing so now
102:25 - here's the text what if that word what
102:28 - if one of those words appears in the
102:30 - color database
102:31 - so let's look I'm gonna say let me just
102:34 - say and actually another way that I
102:36 - could do this I can use a for of loop
102:37 - let word of words and then it's just a
102:43 - little bit nicer to do it this way if
102:45 - vectors word if it exists then what do I
102:51 - want to do I want to make I want to get
102:53 - the color is I want to say let color
103:03 - equals that vectors word and then I want
103:06 - to say I'm going to say let span equals
103:11 - create span and I'm gonna say span dot
103:14 - background style and I'm using once
103:17 - again the p5 Dom library background
103:19 - color I wish I'd save my code from the
103:23 - previous video to write exactly the same
103:25 - thing RGB and then I'm going to take
103:31 - sorry uh CX CY and C Z Z dot y and C dot
103:43 - Z so let's see if now we can see some of
103:47 - those highlighted there great so
103:49 - anything that was in that database I am
103:52 - now highlighting sky sky red violet Rina
103:54 - now the other thing I might as well do
103:56 - is I might as well store those things so
103:58 - let me keep track of color spans
104:03 - as an array and I'm gonna add span into
104:11 - this array and now I can start doing
104:14 - stuff so what might I want to do first
104:17 - of all one thing I could do which is
104:17 - kind of interesting is let me just get
104:19 - the average color of all those things so
104:21 - what if I say my calluses say let keys
104:32 - equal keys I'm also gonna save all of
104:39 - those sorry time out for a second
104:41 - there's a really loud noise I don't
104:43 - think you guys can hear this
104:53 - where my 4:15 oh I had to escape the
105:02 - slash right
105:16 - keys I'm gonna say Keys dot push the
105:20 - word so let's just take a look I'm just
105:23 - curious here console.log keys so we can
105:30 - see these are these are the only things
105:32 - in this text that matched and again I
105:34 - should have checked for two or two pairs
105:37 - of words and things I'm missing a lot of
105:39 - steps here but you can improve my code
105:41 - that would be wonderful
105:42 - make your own version of this but let's
105:44 - at least get the average color here so
105:46 - let's see what the average color is so
105:48 - now I can say average equals create
105:52 - vector zero zero zero so any math that
105:56 - you can do with numbers you can now do
105:59 - with those words because now I can say
106:02 - let key of keys and I can say Vee is
106:07 - vectors that's associated with that key
106:09 - average dot add and then at the end I
106:13 - can say average dot divide the length of
106:17 - all those keys then all I need to do is
106:21 - get nearest find nearest that particular
106:28 - vector and then console.log nearest
106:35 - purplish so the average color of this
106:38 - text and this is directly again from
106:40 - Allison's tutorial she has something
106:42 - very similar in it is purplish and if I
106:44 - wanted to now I could create a canvas
106:47 - you know very small 150 comma 50 and
106:53 - then I could say background average X
106:59 - average Y average dot Z and we would see
107:05 - there it is so that's the average color
107:08 - and its label is purplish now what if
107:12 - what I wanted to do was actually add add
107:16 - some color or subtract some color and
107:18 - change the text so let's let's try to do
107:21 - this dynamically this will be this is
107:23 - gonna be hard but this will be extra fun
107:26 - so I'm going to create three sliders
107:31 - our equals our slider our slider gee
107:37 - slider B slider and I'm gonna hope that
107:39 - one of you watches this video and gets
107:41 - inspired to make a really interesting
107:42 - wonderful interface I'm gonna completely
107:45 - ignore anything about interface design
107:48 - here and just kind of do this raw our
107:50 - slider equals create slider between 0
107:56 - and 255 and starting with zero and I'm
107:58 - gonna do the same thing and I'm again
108:00 - these are p5 functions too and I could
108:02 - obviously just write write these down
108:04 - relevance into the HTML directly but now
108:07 - I have three sliders and what I want to
108:09 - do is anytime I change any of these
108:11 - sliders so I'm gonna say our slider
108:15 - input slider changed I'm going to call
108:19 - this same function if any of the sliders
108:22 - are changed so I'm going to assign this
108:24 - slider changed event to all of these and
108:28 - then I'm going to write this function
108:31 - slider changed and now I need to get the
108:34 - values R equals our slider value G
108:38 - equals G slider value and B equals B
108:45 - slider value now let me just make sure
108:48 - this is working console.log RGB okay so
108:52 - let me run this and now as I move these
108:53 - sliders you can see anytime I move the
108:55 - slider any of these sliders I'm getting
108:58 - this color value now I'm gonna take that
109:00 - color value and add it to these colors
109:02 - and then have the words change with the
109:04 - new color matting I probably should be
109:05 - listed I should make it so I could
109:07 - subtract color too so let's actually
109:09 - make it let's just make it make it so I
109:11 - can add or subtract some amount between
109:14 - negative 100 and 100 negative 100 and
109:18 - 100 an egg ative 100 and 100 okay so now
109:23 - in this slider change what I'm going to
109:25 - do is I'm going to go through all of the
109:30 - spans and keys I guess III need to I
109:35 - could probably more thoughtful Laurie
109:36 - factor this later
109:38 - but men make these global variables and
109:41 - I'm going to go through all of the spans
109:45 - let's pan of color spans and I'm going
109:51 - to get the key the the word is the HTML
109:56 - of that span actually don't have to look
109:58 - it up otherwise then the vector is the
110:02 - vector associated with that word then
110:06 - I'm going to say vector add RGB I think
110:11 - this will work right this up this takes
110:13 - that vector and adds these amounts to it
110:15 - then I need to say nearest equals find
110:20 - nearest oh I need to make a copy of it
110:26 - so I don't actually want to change that
110:30 - vector I need to make a copy of it so
110:33 - I'm gonna say copy because I'm pulling
110:35 - just a reference to the vector that's in
110:37 - that object and you don't want to adjust
110:39 - it that's the actual vectors associate
110:41 - of the word I want a copy of it that I'm
110:42 - gonna mess with and then I want to find
110:44 - nearest to that and then I'm gonna say
110:47 - span HTML that word so look at this
110:52 - these are let's take a look at this
110:54 - these are all the color words let me add
110:56 - some more red to them this doesn't seem
111:01 - to be working
111:02 - oh I'm so excited to see this work what
111:09 - did I do wrong
111:10 - fine V span each Jim Oh nearest nearest
111:12 - nearest right word is the original word
111:16 - nearest is the new one after I added
111:17 - that color I think this is gonna work
111:21 - this is very exciting
111:24 - so I need more space ready here we go uh
111:28 - add a lot of red and I got bright red
111:31 - and bright magenta let's add a lot of
111:33 - green I got white already and a lot of
111:34 - off-white white right if I add I take
111:37 - away what subtract color I subtract
111:40 - color now I've got black everything is
111:42 - black so look at this you could take you
111:46 - could take a whole text any novel you
111:48 - like and you could say let's just
111:50 - rewrite it with a little bit more red
111:52 - and find any instance of any time of
111:54 - color as reference and guess what when
111:57 - we do this with a more generalized word
111:59 - to vex system we could actually add
112:01 - start to add this idea of a dread to
112:04 - words that aren't actually colors we
112:06 - might have a corpus that includes way
112:09 - more than just these you know 496
112:11 - whatever that number is color values so
112:13 - hopefully you're starting to see the
112:14 - idea here is that with the idea of word
112:17 - embeddings with words associated with
112:19 - vectors with text associated with
112:20 - numbers that if I could do math to the
112:22 - numbers I can go translate back into
112:25 - words I can always translate those words
112:27 - as the numbers to more math and
112:28 - translate back and do all sorts of
112:30 - strange transformations like this so
112:32 - make a better version of this think
112:33 - about what texture using fix that
112:35 - problem for me where I look also for
112:37 - like pairs of words that match make a
112:39 - nice interface I don't know think about
112:41 - the way you design this there's so many
112:42 - possibilities I look forward to seeing
112:44 - what you make with this and see you in
112:45 - the next video where I actually now go
112:47 - to look at the ml 5 library which has a
112:50 - built-in class a built-in basically
112:54 - feature that allows you to work with
112:55 - word Tyvek without having to write all
112:57 - the math yourself which is what I'm
112:59 - mostly doing in this particular video ok
113:01 - good bye
113:06 - Oh change the background as well wait
113:08 - stop hold the presses
113:09 - ah I totally forgot data I must also
113:16 - change change this as well V V X V dot Y
113:31 - V dot Z okay here comes now as I'm
113:35 - adding the colors it's also changing
113:38 - it's also changing what's actually the
113:42 - background color as well so we can see
113:44 - we can see that that's actually changing
113:46 - it alone which is a nicer way of looking
113:47 - at it okay now I'm really going goodbye
113:49 - Wow all right ray Jackson at Daniel
113:59 - sponsors can't as well I'm not sure what
114:01 - that is referencing a Wikipedia link to
114:04 - repo Oh can't post links yeah I guess
114:07 - you have to be a moderator Oh is there a
114:13 - Lippo project that's like this does
114:16 - Allison reference that and I'm just
114:17 - completely forgotten it whoops blue
114:24 - Lippo colors
114:36 - oh I don't know interesting alright
114:41 - everyone so this is it for today
114:43 - basically I have a tiny bit more time I
114:47 - don't want to launch into the next piece
114:50 - of this I'm going to continue the word
114:51 - to vex stuff next week
114:53 - but what could I do in 30 minutes I can
115:45 - do this probably like 15 minutes right
115:46 - no problem definitely want to do this
115:55 - [Music]
116:03 - well I don't know what these are I don't
116:08 - know what generator sorry you gotta
116:09 - learn that that's pretty oh no this
116:36 - hurts my brain come back down I like
116:40 - this one though
116:43 - [Music]
116:48 - octahedron you know we should do all
116:53 - right we're gonna do something I really
116:59 - liked this video that Tom Scott put out
117:02 - not this one not this one not this one
117:07 - not this one not this one yes this one
117:17 - no it's just you I think it's just you
117:22 - alright so how this has got to be easy
117:33 - right okay
117:34 - all right co2 challenge Oh some thank
117:50 - you Kraken you so you could use
117:53 - something like this to make a matching
117:54 - algorithm based off of user inputs
117:56 - interesting interesting sierpinski
117:58 - triangle that's a good one
118:00 - haven't I done that already though
118:03 - YouTube chat bot no no alright do this
118:11 - [Music]
118:18 - what kind of shape is at seven segments
118:20 - one two three four five six seven eight
118:22 - why is it why is it encoded I thought
118:27 - there was something about there being
118:28 - eight possibilities like a zero you
118:31 - could have a zero or one you have seven
118:32 - bits for seven segments why is there
118:34 - eight is anybody watch this video I
118:40 - don't feel like watching it right now
118:41 - it's too long I won't have time to do
118:42 - the challenge i watch the whole video I
118:43 - guess I could watch it on a double speed
118:58 - Oh decimal point that's why it's eight
119:08 - okay
119:35 - coding challenge I watched this video
119:37 - from Tom Scott the other day which was
119:40 - something about seven seconds displays
119:42 - and what's the longest word you can
119:46 - write with seven segment displays and
119:47 - there's actually some code for how to do
119:48 - this at the end and I thought yeah let's
119:51 - make this in the P 5 web editor boy I'm
119:55 - not ready for this
119:56 - login its coding train so the first
119:59 - thing that I need to do I think is I
120:02 - need to actually make a 7 segment
120:05 - display this is gonna be super awkward
120:06 - because I'm gonna do this in a terrible
120:09 - way but it's the only way that I could
120:11 - think of to do it right now and I've
120:12 - only got 30 minutes before I have to go
120:14 - but now if you look at the how long this
120:17 - video is even though I don't know how
120:18 - long it's gonna be I expected me at
120:19 - least 471 commits because this is gonna
120:23 - run into a lot of problems but let's
120:24 - write a function - let's call it 7
120:27 - segments and let's call that function
120:33 - with like some sort of like XY offset
120:37 - and so I'm gonna say push I'm gonna say
120:41 - pop and now I'm going to draw like so
120:45 - what's one of those one of those
120:46 - segments is one of those segments looks
121:04 - I guess each segment looks kind of like
121:05 - this right it's like sort of like a
121:07 - rectangle with two triangles on the end
121:09 - and then there's like another one here
121:11 - here here here here here 1 2 3 4 5 6 7
121:16 - and then there's 1/8 there's a decimal
121:18 - point option so I'm just gonna I'm gonna
121:21 - be lazy and just make these rectangles
121:22 - right now and then we would get if I
121:24 - have time I'll make it nicer you'll make
121:26 - a much nicer version of it so let's make
121:29 - let's make these rectangles so let's add
121:32 - a so first let me say translate to that
121:36 - x + y and then I'm going to say let's
121:41 - draw it from mooners let's draw it from
121:44 - the top down
121:46 - it's a little bit weird below just
121:47 - consider the top center I'm just a wreck
121:49 - mode Center I'm going to say rekt pecs
121:54 - why and 100 comma 10 let's do this and
122:00 - I'm gonna say fill zero oh let's not put
122:06 - the background here let's okay let's put
122:08 - this I forgot what I was doing in here
122:10 - oh no we're gonna go 200 200 what's
122:15 - going on why is it down there can't miss
122:18 - is 400 you're there you should be here
122:22 - what's going on
122:26 - only rectangles so disappointed hold on
122:30 - can I start this challenge over wait
122:36 - what did I do here Oh cuz I put the X
122:44 - I'm the worst of the worst I'm hoarse I
122:47 - want to start this challenge over cuz
122:50 - now I know what I'm doing okay I got 30
123:00 - minutes here we go
123:02 - I mean how hard could it be to make this
123:06 - nicer-looking this thing would have a
123:08 - good idea for me okay wait hold on I'm
123:17 - gonna I'm gonna cycle the camera let's
123:23 - let me give give me one mulligan on this
123:25 - because I preferred this not to have any
123:26 - edits and where's my eraser and there's
123:35 - gonna be fun this is so totally random
123:37 - I'm gonna do it anyway hello welcome to
123:41 - a coding challenge in this coding
123:43 - challenge I'm gonna attempt to make a
123:45 - seven segment display and then I'm going
123:48 - to write the longest word you can write
123:52 - with a seven segment display now this is
123:54 - clearly based off of this Tom Scott
123:55 - video I watched the other day that's
123:57 - kind of interesting
123:59 - take a little bit of code in it it talks
124:01 - about the history of 7-segment displays
124:03 - and what they can and cannot display
124:05 - watch that video if you like I'm gonna
124:08 - attempt to remake it in the P 5 editor
124:10 - within about 30 minutes cuz I got
124:12 - somewhere to be and let's see how this
124:14 - goes I'm sure if you go and actually
124:16 - look how long this video is it's longer
124:18 - than 30 minutes I'm sure I'm gonna run
124:20 - into a lot of problems but here's a p5
124:21 - sketch if you've never seen p5 before
124:24 - it's a JavaScript library you can create
124:26 - JavaScript animations and drawings and
124:28 - things right there and the browser also
124:30 - by using the p5 editor lots of more
124:31 - stuff about that and other places on my
124:34 - channel I'm sure okay
124:35 - so first I want to write a function
124:38 - called like seven segments and let's
124:43 - think about this so a 7 segment display
124:45 - has seven segments and each one is kind
124:49 - of like I'll shape like this you know a
124:52 - little rectangle with two triangles I
124:54 - might just do this as a rectangle to
124:56 - start so there's one two three four five
125:01 - six seven and then an eighth option
125:05 - which is a dot so I need to brought
125:07 - write a function that can basically
125:08 - render all of these and either fill them
125:11 - in or not and fill the dot in or not so
125:13 - it was really ridiculous to kind of do
125:16 - this in JavaScript the canvas but why
125:17 - not it'll be fun I mean I'm having fun
125:19 - are you having fun so let's start by
125:24 - saying let me use translate so I'm going
125:27 - to add a push and pop so that everything
125:29 - that happens in this function is kind of
125:32 - self-contained I'm going to allow give
125:34 - it an x and y and so the first thing I'm
125:37 - going to do is translate to this x and y
125:39 - and then hmm what if we have so many
125:44 - different ways to do this I don't know
125:45 - let's say rectangle 0 0 100 comma 10
125:49 - fill 0 and then I'm going to call
125:52 - 7-segment and let's just put this at
125:55 - like 100 comma 100 so there we go it's
125:58 - here's my 7 scalars one segment of my
126:01 - seven second segment display over there
126:03 - no it's probably should be like a little
126:05 - thicker than that and obviously I'd want
126:07 - to use variables for all these things
126:08 - but now if I add a
126:12 - second one I can say where would this go
126:16 - negative 50 comma 0 20 100 oh that's not
126:24 - the right place at all 20 okay let's
126:27 - move it over 25 yeah there it goes oh
126:33 - because I didn't use rec mode Center
126:35 - interesting yeah that's fine let's not
126:38 - use rec mode Center and let's push it
126:40 - down a tiny bit there we go well this is
126:43 - doing a horrible job let's do this and
126:46 - do it at 190
126:48 - oops I mean 90 there we go
126:53 - oh it's 20 80 80
126:58 - mm-hmm maybe this should be 10 a little
127:01 - little day little space there no no not
127:03 - that
127:04 - this should be this should be 20 no no
127:10 - no 30 there we go perfect
127:14 - oh that's exactly how I always dreamed
127:15 - it would be oh this is wasting a lot of
127:18 - time yeah this is like so so this is
127:21 - like very cringe coating okay 100 120
127:29 - 120 Oh beautiful 130 140 there we go
127:35 - perfect oh my goodness look at those
127:37 - segments this is beautiful
127:40 - then now we just need this again but we
127:43 - need to just go down quite a bit further
127:45 - so like 170 170 and 240 270 280 and now
127:59 - let's draw this at like 10 and 10 and so
128:07 - now in theory that's what I want to do
128:11 - is say no stroke no stroke oh no no I
128:18 - wants a stroke zero a no fill so why
128:26 - why oh because and the fill is there so
128:30 - let me put this in here and let's so
128:32 - there we go this is now my horribly
128:36 - designed seven-second just like I can't
128:39 - wait for people to redo this and
128:40 - actually make it the proper 7-segment
128:43 - display design but let's see here's the
128:45 - thing now what I want to do is give it a
128:48 - number like all I need to do is give it
128:50 - a value and so I couldn't give it an
128:53 - array maybe I should give it an array
128:55 - like zero with that has zeros and ones
128:57 - but technically speaking I just if I
129:01 - want this to be somewhat pure and
129:03 - related to the original 7-segment
129:05 - display the idea is that I just give it
129:07 - a number an 8-bit number separate out
129:10 - all the bits and then apply the fills
129:13 - according to what those bits are let's
129:15 - try it so let's say how do I do this bit
129:19 - stuff in JavaScript bit masking maybe
129:24 - bit shifting I could do bit shifting or
129:27 - masking bit masking JavaScript let me
129:33 - explain what I mean by this oh boy
129:45 - okay so what I mean by bit masking for
129:48 - example is let's say I have some binary
129:51 - number that's 8 bits 1 2 3 4 5 6 7 8
129:55 - what if I just want to know is this
129:58 - number a 0 or a 1
130:01 - well I could do some kind of like an
130:04 - operation like what if I did an and
130:06 - operation with all one's right if I did
130:09 - an and operation with all ones well no
130:12 - no no no sorry
130:15 - and and operation with zeros everywhere
130:18 - except for the one bit that I'm looking
130:20 - at then all of these will end up being
130:22 - zeros and this will either be a 0 or a 1
130:24 - so I could kind of test the value that
130:27 - way I could also shift all the bits so
130:29 - that this one always just ends up over
130:31 - here and then I could do something and
130:33 - then I could basically do an and
130:35 - operation with just one something like
130:37 - that right I'm leaving
130:52 - left shift or an bitwise operators
131:02 - oh it's a nice way to do it sorry I'm
131:08 - looking at this tutorial here I can use
131:12 - or ampersand so let's try all right so
131:35 - let's assume we get this value and I'm
131:38 - gonna I'm gonna say no loop here and
131:41 - what I want to do is let's say say I'm
131:45 - gonna say console actually let's just
131:46 - look in let's play around in the console
131:48 - for a second this is a nice way to
131:50 - figure out JavaScript code like if I say
131:53 - let's say I say the number 100 people
131:59 - are producing all sorts of stuff with
132:00 - the chat for me and I say shift by 1
132:04 - does that make sense I get 50 it's like
132:06 - divided by 2
132:08 - think about that that's crazy 100 in
132:11 - binary is there a nice look at this this
132:14 - is 100 in binary if I shift this over by
132:18 - 2 I have 0 0 1 0 0 0 1 what if I say 50
132:24 - in binary look get that right yes yes
132:29 - but that's the same exact number but
132:31 - shifted over fascinating amazing so what
132:34 - I want to do is let's go back to here
132:39 - and I used to do this stuff all the time
132:43 - and no one ever has to do it anymore so
132:45 - it's hard to like figure out on the fly
132:46 - it really should plan this out in
132:47 - advance ok so let's say first shift
132:51 - first I don't want to shift at all so I
132:53 - just want to know what is the value of
132:55 - that last bit so if I do this I get a I
133:01 - get a 0 if I do this I get a 1 right so
133:04 - and and with a 1 will always give me the
133:06 - last value of the bit so I should be
133:09 - able to do this might be a I'm in some
133:12 - other code this code is irrelevant from
133:13 - a different tutorial
133:15 - what I can do is I can basically say Val
133:19 - so I want to say what is I'm gonna say
133:25 - let result basically I want to say let's
133:30 - do color mode color mode RGB one so I
133:37 - just want to get a 0 or a 1 so I am
133:41 - going to say fill the value shift no
133:48 - shift ampersand 1
133:52 - so that's filling it it's a 0 so if I
133:57 - pass in one it's filling it a pass in a
134:01 - 2 its 0 3 a 4 so I shifted everything
134:04 - over 1 and then masked it now I could
134:08 - say for this one and I'm sure there's a
134:11 - nice way to do this in a loop shift that
134:14 - over then I could just do it by 2 by 3
134:18 - by 4 and I probably don't have the order
134:20 - right so by 1 by 2 by 3 whoops by 3 by 4
134:28 - by 5 by 6 there we go so now if I say
134:32 - pass it in 100 I get this 200 I get this
134:37 - so whatever that theoretically that
134:39 - value all I need to know is what number
134:42 - corresponds to which letter okay so this
134:46 - is good now we need some kind of
134:48 - dictionary to show me all the letters
134:51 - and how their what their corresponding
134:54 - number is or a big array boy how am I
134:57 - gonna do that does that even exist I
134:59 - don't have to Google this for a little
135:00 - bit and come back 7-segment display
135:06 - dictionary or how about like specs
135:10 - specification
135:21 - No
135:28 - oh here we go 128 states
135:39 - I'm not using the convention but could I
135:42 - adjust mind to the convention easily
135:44 - right 0 1 2 you need to label your
135:53 - segments correctly but yes you should be
135:55 - able to get them I wasn't kidding when I
135:59 - started to go at 5 oh I forgot out the
136:10 - dot but the dots the easy part
136:19 - I'm just like staring at this as if
136:21 - that's gonna help oh I could have done
136:27 - it like this
136:35 - ah here we go alright I found what I was
136:40 - looking for you can just change the
136:43 - order easily yep alright
136:49 - ABCDEF alright I'm back I found exactly
136:56 - what I'm looking for which is the
136:57 - hexadecimal encoding for the displaying
137:00 - of the digits 0 through F this will help
137:02 - me right because there's 0 1 2 3 4 5 6
137:06 - so on on on on on on is the number 0
137:10 - which should be this this in hexadecimal
137:14 - could you just give me the non
137:16 - accessible version of this but I think I
137:19 - could probably just do this so if I go
137:22 - back to my code right and I'm gonna pass
137:24 - this in okay that clearly didn't work
137:27 - but you can see that this gates gives me
137:30 - 1 2 3 everything on but this one so I
137:33 - think the order is different so I'm my
137:36 - order is oh yeah my order is like so
137:41 - ridiculous it's top left right middle
137:44 - the bottom left bottom left bottom right
137:46 - box so I should really change the order
137:48 - of mine really cockamamie way of doing
137:51 - this so the next segment is the one
137:55 - that's on the right so let me write some
137:56 - comments here top top left top no that's
138:06 - not right yeah top right middle bottom
138:12 - left I think this is right I don't know
138:15 - if this is right bottom right
138:24 - whoops bottom right and then this one
138:28 - should be hopefully the bottom and now
138:32 - let's just make sure I'm right top oops
138:36 - yep left yep
138:40 - right yep middle no oops uh-oh this goes
138:46 - here middle and bottom left okay I'm
138:51 - pretty confident the rest is right okay
138:52 - so the first one is the top so I think
138:56 - it's backwards actually hold on okay so
139:07 - all right so with zero if I go back to
139:13 - Wikipedia zero is on and on and on and
139:20 - on off so the middle is the last one
139:23 - okay you go back here so the middle
139:28 - should be the last one where is that one
139:30 - middle that should be the last bit and
139:38 - then middle is here
139:44 - oh no no no the middle is the first one
139:46 - because it's the only one that's
139:47 - different middle okay and then what is
139:59 - this I don't know what's next let's move
140:01 - them all down
140:07 - this is a boy I really messed this one
140:10 - up okay all right so that's a zero and
140:13 - by the way I should really design this
140:17 - but all right so let's see so let's see
140:18 - that right
140:19 - trial and error is your friend a 1 a 1
140:29 - interesting oh yeah oh these are the two
140:34 - that these are the only two a one is
140:36 - just these two so this one's right this
140:38 - needs to switch a map of the letters to
140:43 - the segments look up the Wikipedia are
140:45 - they hold on we got to do this more
140:46 - methodically all right what I want what
140:52 - I want is not this right I want to know
140:56 - which one of these write clearly G this
140:59 - last one is the middle which for me is
141:01 - the first one and then like if I look at
141:04 - this the the middle is the last one then
141:08 - the second two are the the last see ah
141:12 - this is driving this is gonna drive me
141:13 - totally crazy I don't want the
141:20 - hexadecimal it's further up the page
141:34 - further yeah further up the page you
141:37 - don't see it though this oh this this is
141:42 - showing me all the bits this image look
141:51 - up the top of the wiki this is the order
142:00 - abcdefg oh but they were numbered how am
142:06 - I supposed to do that hey you know I'm
142:10 - back you didn't have to watch that the
142:12 - chat is full of rage apparently because
142:14 - right in front of my face abcdefg okay I
142:19 - just didn't recognize that because
142:20 - they're letters and I'm thinking about
142:21 - them as numbers okay so this the top it
142:25 - goes and actually this is similar to how
142:28 - I thought of it so if I go back to my
142:31 - code here it should be but I think I'm
142:34 - doing it backwards so I think the top
142:36 - rectangle is the last one well let's
142:39 - let's try it let's try it this way top
142:44 - so it should be oh yeah so it should be
142:52 - top is the first one is the top one
142:57 - which is this one then to the right is
143:08 - still is a is a tall one this is to the
143:12 - left oh I screwed this up let me go back
143:17 - to let me go back to like the actual
143:27 - so this is now I think I so hold on
143:30 - Matt's here I'm gonna we're gonna go
143:31 - back and edit again yeah all the
143:33 - comments are out of step that's why I'm
143:35 - going back top
143:49 - top left right
144:01 - it all bottom-left okay I think this is
144:06 - right now
144:15 - oh thank you nobody in the slack chat
144:19 - now chat cuz I can look at that thank
144:23 - you for posting that for me okay
144:25 - label them ABCD and not top bottom left
144:28 - ya think
144:29 - okay okay the chat is full of rage
144:36 - they're all telling me it's there it's
144:38 - there on the page it's there on the page
144:39 - I am blind and so focused on the numeric
144:43 - indices that I didn't realize that this
144:45 - is it right here ABCD efg it's that
144:48 - order and then of course there's also
144:49 - this last one here so I should go back
144:52 - to my comments my lovely comments and I
144:54 - should say a and then top left is F and
145:04 - top right is B the middle is G and the
145:12 - bottom left is e C and then what's
145:17 - letter do I have left D and now I can
145:21 - just put them in order
145:25 - ABCD efg hijk LMNOP qrs yes you're
145:36 - watching a person singing the alphabet
145:37 - song while coding it's very soothing
145:41 - okay so this is good now I just need to
145:45 - fix this vowel shift one shift to shift
145:51 - three shift four shift five shift six
145:55 - and then this should be good let's try
145:59 - putting in some things that we should
146:02 - get let's go back down to here and let's
146:05 - see what we get here oh if I I might
146:08 - have done it in Reverse which is fine I
146:09 - could just use this number if I did
146:11 - reverse let's find out okay so now let's
146:15 - put in here there we go No
146:24 - ah that didn't work it didn't work it's
146:37 - five o'clock I have to go comments on
146:40 - the lines themselves would be metre yeah
146:43 - let's hold on yeah oh yeah I'm missing
146:53 - the bit for the decimal point so let's
146:58 - add that this doesn't look right but
147:01 - let's at least add the bit for the
147:02 - decimal point decimal point and then
147:09 - shift seven and then I think this it's
147:13 - all going to become clear we draw an
147:15 - ellipse at like a hundred four hundred
147:20 - ten ten where's that ellipse four
147:25 - hundred two hundred trial and error is
147:29 - my friend there we go a little smaller
147:37 - beautiful a little bit up okay so now
147:43 - let's say shift from seven to one so I
147:47 - think actually this should be the first
147:49 - one is shift by seven well this actually
147:53 - work do I have to put these shift by
147:56 - seven six five four three two one and
148:03 - then this no shift hmm all right what
148:08 - did I do wrong oh so close so close the
148:14 - decimal is the first bit right so that
148:18 - should be right why is this
148:25 - yeah the middle maybe this must not be
148:33 - the order right this must not actually
148:36 - be the order I think this is telling me
148:38 - the order middle this is actually the
148:40 - order zero one two three four five six
148:44 - seven eight yeah this is the order to be
148:47 - honest it is the order is actually the
148:50 - middle thing is first or last in my case
148:53 - so that mess this misled me the ABCB the
148:58 - actual thing that's first is the is the
149:05 - is is G it goes G f GF a B well it's so
149:14 - confusing g g fa b f whoops whoops come
149:34 - back no come back cut paste and now
149:40 - shift by seven shift by six shift by
149:45 - five shift by four now shift by is this
149:49 - right three two one and then the and
149:53 - then zero okay so let's see here
149:58 - this is right the question is is this it
150:01 - keep going a be no then it is this one
150:05 - this one this one this one this one
150:07 - that's so then the order is a EDC
150:11 - decimal point I think EDC decimal point
150:17 - maybe as an EDC or CDE let's try II D
150:30 - okay so zero is right now let's try some
150:34 - other ones
150:35 - oh go tom
150:38 - I hope you've never watched this video
150:41 - let's try one so let's try one gfa be
150:57 - EDC decimal point the hora yeah no
151:00 - kidding of horizontal segments are too
151:02 - wide those pins on the led it isn't the
151:08 - order no f GF a B EDC DP but it wasn't
151:20 - the other order either it certainly was
151:22 - the first one was this one alright hold
151:25 - on I'm gonna trust the chat I should do
151:31 - this again GF a be EDC DP I remember G
151:38 - hold on let's do something fun let's do
151:44 - one for each segment let's do function
151:49 - no a a seven as is a I should really do
152:02 - this I should really do this in a loop
152:03 - and these should be objects and I could
152:05 - order them in any way that I want it was
152:07 - the other order the table is seven bit
152:10 - hex it may be one bit out the abcdefg
152:15 - you had before is perfect
152:16 - alright let's go back to it
152:29 - abcdefg so what so this is right why is
152:35 - it not showing me a zero what's wrong
152:40 - and now gfa be EDC is that correct
152:54 - G F a b e e d c decimal place and we've
153:21 - got half an hour past and now we've got
153:30 - whoops and now we've got 7 6 5 4 3 2 1
153:40 - and decimal place ok that's a zero now
153:49 - let's try a 1 all right that's what I
153:58 - had before that was wrong
154:06 - oh that's just the link to what I'm
154:08 - doing you weren't actually giving me a
154:11 - correct answer okay hold on
154:25 - Matt's here we're gonna make a crate
154:27 - we're gonna go we're gonna go way back
154:28 - and edit people watching the version of
154:32 - this the final version of this will
154:33 - never know the horror when they will
154:37 - know the horror oops no no no
154:55 - all right
155:05 - and back to this
155:20 - so what you're telling me okay
155:42 - me I am semion yours you're shifting the
155:45 - for the for the dot also seven which you
155:48 - want to do zero I would think right
156:01 - dinga dinga ding but how would i I see
156:08 - so why is that wrong well so if I do
156:12 - eight in the middle
156:29 - I lost the YouTube chat you should
156:35 - honestly redo this later and use a loop
156:36 - or something no kidding
156:39 - the DP is seven started six
157:17 - so is this also correct like this the
157:23 - decimal place is really first or last
157:29 - right this is correct yes
157:43 - is this correct I kind of want just over
157:52 - from scratch yeah I think this is right
158:02 - I think I got it right
158:08 - not technically why not
158:11 - I have to go I'm gonna come back and do
158:20 - this again in like an hour I'm gonna
158:24 - start over
158:48 - well let's try
159:02 - one
159:11 - - except I really should do it the other
159:15 - way around like
159:34 - yeah
159:38 - close enough that the issue you're
159:43 - telling me is that it's not right
159:46 - because the where is the decimal place
159:52 - like which bit is the decimal place
160:03 - okay the question is how can I make this
160:07 - into something that Mattia can follow
160:21 - so I'm gonna go back to I'm just gonna
160:27 - start over I just this I should just do
160:30 - this again right I don't know what to do
160:38 - I'm lost
160:40 - it's a matter if you put the decimal
160:42 - place bit on the left or right of the
160:43 - other bits I don't know that there's a
160:44 - standard for that right right I'm not
160:47 - gonna worry about the decimal place
160:49 - right now and it make people want to
160:52 - make it read all right I have the
160:53 - question is now I think I've gone too
160:56 - crazy that I'm just gonna do this again
160:58 - I had some practice I mean I might as
161:08 - well just start over right
161:30 - okay
161:31 - all right let's do it again I have to go
161:38 - but I'm not going to okay
161:53 - alright consider Opie
162:07 - all right here we go whoops No
162:31 - all right everybody here we go we're
162:35 - gonna make this happen
162:36 - oh right hello welcome to a coding
162:45 - challenge I'm very excited about this
162:47 - one and this is a second try by the way
162:49 - the first try it's been about got really
162:51 - like things went haywire they will go a
162:54 - wire again but I'm going to give myself
162:56 - about 30 minutes here late for have to
162:59 - be to try to create a seven segment
163:03 - display now I got this idea for watching
163:04 - this Tom Scott video about seven segment
163:07 - displays and Tom Scott talks a little
163:09 - bit about how they work and looks at
163:12 - like what kind of letters and numbers
163:13 - they can display and uses a regular
163:16 - expression to try to find the longest
163:18 - word you can write with seven segments
163:21 - displays so I mean this video I just
163:23 - want to make I just want to make a
163:25 - visualization of a seven segment display
163:26 - which is in javascript in the browser in
163:29 - canvas which is admittedly kind of a
163:31 - ridiculous thing to do but I feel like
163:32 - if I can make one then you the viewer
163:35 - can take what I've done and make a
163:37 - bigger display then you can display
163:39 - different words you could implement Tom
163:41 - Scott's code with the data files and
163:43 - actually visualize that there's so many
163:44 - possibilities all right so let's talk
163:47 - about the seven segments the seven
163:50 - segments of a seven segment display are
163:53 - like this one - there's seven three four
163:57 - five six seven now of course there's
164:01 - they're like a nicer design but this
164:03 - sort of looks like this they're kind of
164:04 - tilted so I'm gonna make a very crude
164:07 - version of it probably just with
164:08 - rectangles and I'm not even gonna use an
164:10 - array you could do this in an
164:11 - object-oriented way to keep track of
164:13 - each one of these as an individual
164:14 - object then you get an array of object
164:16 - at each one these things there's a lot
164:17 - I'm gonna just do it in the crudest way
164:19 - possible so first let me try to draw
164:22 - this pattern and one thing that's gonna
164:25 - be important is I do this it's a good
164:26 - thing I'm on the second try cuz I really
164:28 - botched this the first time is if I go
164:30 - down here this order is super important
164:34 - ABCDE
164:36 - gee and decimal place and okay so I want
164:40 - to draw them in this order so let me go
164:43 - back to my code let me write a function
164:46 - called 7 7 segment and then I'm going to
164:54 - say at the beginning I'm gonna use push
164:56 - and pop to kind of convey the ideas this
165:00 - function I could make an object I kind
165:02 - of would like to make an object yeah
165:03 - whatever this function is going to draw
165:07 - all of the segments relative to some
165:10 - point so I could probably might make
165:12 - sense to draw it relative to here it
165:14 - might make sense of drought relative
165:15 - let's try drawing it relative to here
165:16 - right now so the first rectangle will be
165:21 - and I'm gonna this is very gonna be very
165:23 - hard coded I admittedly let's say it's
165:27 - going to be a rectangle and it's going
165:31 - to be let's let's go 10 pixels in 10
165:34 - pixels down 100 pixels wide 10 pixels
165:37 - high and let's say fill 0 quick
165:41 - messaging me whoops fill 0 I know the
165:47 - chat is gonna be full of rage again it's
165:48 - just bound to happen oh I got to call
165:52 - the function I've really lost my sense
165:54 - of how to code call the function there
165:56 - it is let's make it a little fatter and
165:59 - let's put it 20 pixels in in 20 pixels
166:01 - down and let's actually put it 40 pixels
166:03 - in because the next one I want to do B
166:06 - I'm going to put at it should start at
166:11 - like a hundred and forty pixels 40
166:14 - pixels down then it should be a 20
166:17 - pixels wide 100 and I could have rotated
166:19 - it but basically I want to do that then
166:23 - I'm going to do the one on the left
166:26 - no no what's next then further down
166:29 - again so everything's the same each
166:33 - length is 100 plus there's a buffer of
166:35 - like 20 so I need to make this one 60 I
166:38 - think there we go
166:39 - and then what's next D and I should put
166:44 - some comments here right this is a this
166:48 - is B
166:50 - this is seen of course I could create an
166:53 - algorithm write a loop I'm gonna use
166:55 - translate rotate so many possibilities
166:56 - I'm not doing it that way there's seven
167:01 - I could do well seven adi is at the
167:03 - bottom d is actually really a but just a
167:07 - lot further down like 220 it's just
167:12 - guess there we go
167:13 - 260 up whoops no no no that's right now
167:19 - what's after D a b c d e yes he is
167:29 - actually like see he is very similar to
167:34 - C but with the X values of a right which
167:39 - is 40 and the Y value that's why is it
167:46 - huh what did I do here oh maybe this one
167:49 - is real hold on hold on everybody
167:52 - yeah that's right this one this one is a
167:55 - little bit off it's got to go oh it's
167:59 - gonna be oh ah actually if these have to
168:02 - be a little bit smaller I forgot about
168:03 - the Buffalo buffer so this is actually a
168:05 - little bit shorter like this there we go
168:08 - that's kind of right and then the first
168:09 - one also should be that most fun I've
168:15 - had coding it looked nice just like hard
168:19 - code rec it's like it's like that first
168:20 - it's like the first week of learning to
168:22 - program in p5 it's just like hard coding
168:24 - shapes I love it
168:26 - F which one's F F is up higher it's like
168:31 - B but over so let's start with B yeah
168:34 - start with B but move it to here there
168:41 - we go and then this is f then G is the
168:44 - middle whoo this is exciting G is most
168:47 - is like a it's like a but it's halfway
168:54 - down so like 140 yeah look at that my
168:59 - seven segment display part one of this
169:03 - now I'm just
169:04 - keep going okay so here we go good
169:05 - excellent okay now what I want to do is
169:07 - I'm gonna say stroke zero and I'm gonna
169:11 - say no fill okay whew I don't like how
169:16 - that looks a little more can I get a
169:18 - like a what if I just do like all of
169:20 - these like a little bit less like 78 18
169:25 - whoo I'm starting to like this 18 oh
169:28 - come on just bear with me you don't mind
169:30 - me doing this just go make yourself a
169:32 - cup of tea I'll be done in a second
169:34 - there's sometimes just like hard coding
169:36 - stuff it's just like the loveliest
169:39 - nicest thing to do I don't keep the chat
169:41 - is full of rage the chat needs to relax
169:44 - take a deep breath fine
169:46 - this is soothing okay okay oh I like it
169:51 - it's weird but I like it okay so this is
169:53 - like nonsense what I've done you are
169:55 - gonna make your own be much nicer
169:56 - version of this with little triangles
169:58 - and all sorts of stuff like that
169:59 - I really botched it here but what I'm
170:02 - gonna do now is I need to figure out a
170:05 - way to turn each one of these on or off
170:12 - I don't know where this pink marker come
170:14 - came from but I love you pink marker so
170:16 - how am I going to do that so the idea of
170:18 - a 7-segment display is that each one of
170:21 - these is a scientist by the way a
170:23 - decimal point here which is why they're
170:25 - eight is assigned a bit in an 8-bit
170:27 - number so you could think of an array of
170:31 - zeros and ones that has eight in it 0 0
170:37 - 2 3 4 5 so that's 9 right where I would
170:40 - go 0 0 1 0 0 1 0 and then the decimal
170:48 - place I think sometimes the decimal
170:49 - places may be the first or the last bit
170:50 - I'm not entirely sure trying to look up
170:52 - the documentation for this so something
170:55 - that I could do those instead of having
170:56 - an array what if I had any generic
170:58 - number 256 so I can use something called
171:01 - bit shifting or bit masking so I can do
171:07 - a bitwise operation oh this is I'm so
171:09 - happy to do a bitwise operation you very
171:11 - rarely in programming anymore especially
171:13 - JavaScript actually shift the bits right
171:15 - that's usually
171:16 - you're doing in a matter of like glory
171:18 - level place so let's say I have this
171:19 - actually as a binary number and what I
171:23 - want to do is I want to figure out which
171:25 - one of the if this particular digit
171:28 - let's say is on or off well if I do it
171:32 - at what's called an and operation with
171:35 - one right answer but the wrong number of
171:39 - things here but you know whatever if I
171:42 - do an and operation with one all of
171:45 - these will always end up zero and then
171:47 - if a one is here if a one sorry if a one
171:52 - is here I will get a one if a zero is
171:55 - here 0 and a 1 is a zero so I can if I
171:59 - can shift the bits over and then and
172:01 - with one I just have to not shift to
172:03 - check this one shift by one shift by two
172:05 - shift by three shift by four shift by
172:07 - five supposed to throw etc so and in
172:10 - order to do this in JavaScript
172:12 - this is shift the bits to the right
172:14 - shift the bits to the left and then this
172:17 - is and I think also to an or if I wanted
172:20 - to do an or operation so in other words
172:22 - if I say for now here's the thing I've
172:29 - kind of gone I went around in circles so
172:30 - this one's trying this earlier I want I
172:34 - need to do something to test so in other
172:35 - words if I look down here this is you
172:39 - can see this is if the encoding is ABCD
172:41 - efg I don't know which one I'm doing G
172:43 - right then that's 7 1 2 3 4 5 6 7 then
172:48 - on on on on on on on off so to get a 0
172:51 - presumably I pass this in and what I'm
172:56 - gonna do and thank you to be I am sue me
172:58 - for making this suggestion I'm gonna
173:00 - pass in a value and what I'm gonna do
173:03 - first is just shift it by 1 because I
173:05 - got to get rid of the thing for the
173:07 - decimal place so I'm actually just going
173:08 - to shift it by one before I come in here
173:10 - and I didn't actually do the decimal
173:12 - place I'll let you do the decimal place
173:13 - maybe your version so now what I'm gonna
173:16 - do is I'm gonna say fill valve I 6 or 7
173:22 - or 1 I don't know
173:23 - now I'm lost I need to shift these all I
173:26 - think I think the first I think if it's
173:28 - ABCD efg yep I want to shift by
173:30 - six yes and then ampersand it bitwise
173:34 - with one right this is what I'm talking
173:36 - about
173:36 - and then I also probably now this is no
173:39 - good I want to do color mode I also need
173:42 - to do color mode RGB one so in other
173:46 - words what I want is to get a zero a
173:50 - zero means black and a one means white
173:53 - so this now if I shift shift by five
173:59 - shift by four shift by three I totally
174:05 - did this wrong I've done it wrong again
174:07 - but let's just get this out of here
174:09 - shift by two shift by one and shift by
174:17 - zero oh so close that doesn't look right
174:22 - what did I do don't maybe I need to
174:24 - shift the other way here hold on let's
174:29 - do this
174:30 - there we go yeah I don't know why I got
174:33 - confused
174:34 - so this is actually right I don't know I
174:36 - was thinking I had to shift the bit out
174:37 - of the place but actually I just start
174:39 - with six here right if I shift the bit
174:41 - out of the place oh sorry out of the way
174:44 - then I need to start with seven here I
174:46 - think that didn't work anyway I had it
174:55 - right good enough okay that's a zero tip
175:08 - of the fact that I kind of want it up
175:09 - highlighted to be I kind of want it to
175:12 - be inverted so I actually should say let
175:17 - me write a function get color and the
175:22 - value and the amount of shift and what
175:28 - I'm going to do is return so I'm going
175:31 - to say oh the red value people I think
175:33 - warming in the chat they're saying I
175:34 - want me to make it red the red value is
175:36 - the value with the amount of shifting
175:39 - and ampersand one and let's forget about
175:44 - this color
175:44 - thing and let's actually say a Matt
175:49 - let's let's do this multiply this by 255
175:55 - and say G be it actually this is silly
176:02 - these can just be zero I'm only doing
176:04 - the red value and then I'm gonna say
176:06 - fill get color get color and shift by
176:15 - six with that value a return color RGB
176:24 - and here we go
176:26 - alright this is very exciting I'm just
176:29 - gonna sit here and copy-paste this
176:31 - calmly smoothly
176:37 - little by little four and by the way if
176:44 - you were wondering why I'm not using a
176:46 - loop here it's only because I want to
176:49 - drive you crazy and I've lost my
176:52 - semicolons a four three six five four
177:02 - three two one zero
177:06 - all right so what's going on 250 times
177:11 - as value shift oh boy this has to be in
177:13 - parentheses there we go oh but it's
177:16 - backwards so 255 minus R minus R no no
177:21 - no that was right actually it was right
177:23 - and then it shouldn't be zero it should
177:28 - be actually I should really let the
177:32 - alpha be this and then if the Alpha is
177:43 - zero here we go zero okay so now look at
177:53 - this let's say let no
177:58 - equal so now if I go here and I say this
178:04 - is zero zero
178:07 - oops no go away zero
178:13 - lots of copy-pasting you can speed this
178:17 - up somebody one two three four five five
178:37 - six yes you're watching a person copy
178:40 - paste these hexadecimal things one at a
178:43 - time
178:43 - six seven can we put some like music or
178:49 - some animation and post-production here
178:51 - speed this up I don't know anything
178:52 - creative to make this look like a good
178:54 - watch seven eight I don't know ten nine
178:57 - I lost count nine okay now set numbs
179:07 - index index let index equals zero and
179:15 - then I'm gonna say frame rate one index
179:21 - plus plus zero one two three four five
179:28 - six and error okay so now we can say
179:35 - index plus plus index equals index plus
179:39 - one modulus nut noms length and I'm
179:45 - gonna make the frame rate five and I'm
179:47 - gonna zoom in on this and here we go oh
179:49 - that's way too fast for me I can't
179:51 - handle it let's put on some music
179:56 - and thank you very much there's your
179:58 - 7-segment display counting through the
180:01 - hexadecimal values for 0th row so now
180:04 - here's the thing I've got an exercise
180:06 - for you could you make a clock out of
180:07 - this
180:08 - could you make a big make this
180:10 - object-oriented refine the code make the
180:13 - design actually look like a nice seven
180:15 - segment display being about colored make
180:17 - a rainbow seven segment display so many
180:20 - possibilities and also go back to this
180:22 - video and if I scan here towards the end
180:26 - this is the longest word apparently that
180:30 - you can display on a 7 segment display
180:33 - so follow Tom's code it's a node but
180:37 - there's no reason why instead of using
180:38 - like refile sync you can just use load
180:40 - strings in p5 get that same database and
180:43 - you can add this code in and do
180:46 - something fun with it share with me I
180:48 - mean share it with Tom Tom Scott this is
180:51 - not endorsed by just did this on my own
180:53 - but I think it could be some fun
180:54 - possibilities of things you can make
180:55 - during the p5 web editor share it on the
180:58 - coding train comm website seven segment
181:00 - displays somewhere share it with me on
181:02 - Twitter at Schiffman or all those kind
181:04 - of other places Mastodon whatever your
181:06 - true dot space and I'll see you in a
181:08 - future
181:09 - [Music]
181:17 - that was painful to white right watch
181:20 - what joke
181:23 - [Music]
181:29 - you should have x20 this is going far
181:37 - better than before all right everybody I
181:41 - hope you enjoyed that there I just made
181:44 - my guest video for Tom Scott's channel a
181:47 - Matt chick we edit this by October 15th
181:49 - and I'll just submit it I've got to go I
181:54 - am half an hour late for this meeting I
181:57 - was gonna go too but I stayed here
181:59 - because I love you the viewers of the
182:02 - coding train and I'm gonna save this now
182:06 - I'm so incidentally you can get going
182:08 - with the code right now someone could
182:10 - paste this into the YouTube chat and I
182:13 - will be back in a future coding
182:17 - challenge I'm gonna continue the word to
182:19 - vex stuff next Friday that's probably
182:21 - the plan so that's my tentative plan is
182:26 - continue word to Veck with and I'm gonna
182:28 - use ml 5 and use the Jensen Python
182:30 - package and do more stuff with that ok
182:33 - thanks for watching everybody today and
182:36 - add a round border to your rectangle
182:39 - that's what I should have done anyway I
182:42 - don't gonna change this stuff now you're
182:44 - all much better than me and I'll see you
182:47 - there ok Oh Nathan growl you're super
182:50 - chat come on unnoticed okay hold on no
182:54 - that's send a super time where do I find
182:56 - them it doesn't there's no way if it
182:59 - goes by without me seeing it oh wait
183:01 - wait a solar liner is that you Nathan
183:03 - growl who wouldn't have to
183:05 - you have the rainbows in it that's
183:07 - amazing
183:08 - thank you solar liner rainbow super chat
183:11 - made me so happy
183:13 - dark background oh yeah
183:27 - hold on
183:37 - or how about
183:48 - I think actually it looks best with this
183:51 - and then
184:17 - alright I'm gonna do the quick quick let
184:29 - me what are some other like small
184:30 - refinements and maybe I'll just do a
184:32 - quick intro the rounded rectangle ooh I
184:42 - like this
184:53 - there we go this looks better right okay
185:04 - okay
185:25 - I know I know I'm just trying to think
185:27 - of like what's 20 25 would be better
185:31 - what
185:39 - okay
185:49 - how interesting
186:06 - there that's even better okay well maybe
186:10 - Austin okay okay what you are about to
186:18 - watch is a coding challenge in a moment
186:20 - I'm going to say hello welcome to the
186:21 - coding challenge I apologize of the
186:23 - zapping twice but I just wanted to show
186:24 - you what it is at the at the beginning
186:26 - and because I also made some refinements
186:28 - thanks to things that people in the chat
186:30 - suggested after I finished the coding
186:32 - challenge so what I am tempted to make
186:33 - here is ace what's called a seven
186:35 - segment display this is based off a Tom
186:37 - Scott video that I'll reference in a
186:38 - second and you can see here here is the
186:40 - final result and the things that I've
186:42 - added after the coding challenge finish
186:44 - we're a little bit of nicer colors and
186:47 - rounded rectangles so it's a little bit
186:49 - nicer so I hope you make something fun
186:51 - with this and enjoy this coding
186:53 - challenge where I do this in kind of a
186:55 - way that's gonna make you want to
186:56 - complain about my coding abilities but
186:58 - that's fine complain away I'm here for
187:01 - it in the comments at me all that stuff
187:03 - enjoy and then one other option might be
187:11 - alright I know that coding I know that
187:13 - coding challenge seems like it just
187:14 - ended but I people in the chat had some
187:17 - additional suggestions that I was
187:18 - tinkering so I want to just show you
187:19 - these quick suggestions which are for
187:22 - example I added rounded rectangles which
187:26 - you could see makes it look kind of nice
187:27 - and then also what I did is I said of a
187:32 - stroke I gave the off segments like a
187:34 - little bit of alpha so it's almost as if
187:36 - they're appearing it feels more like an
187:38 - actual lit seven segment display but I
187:41 - think you are gonna be even more
187:42 - creative in what you end up making with
187:44 - this so I just wanted to show you those
187:45 - little quick defense goodbye so I will I
187:52 - will let Mathieu figure out whether it
187:57 - makes sense to have an extra intro or an
187:58 - extra thing at the end or neither and
188:00 - then I have to do one III really is
188:03 - going to shut this off and record these
188:05 - but I think
188:12 - what I'm going to do is just do it with
188:18 - you guys watching so where's a good spot
188:27 - here
188:37 - but I'm gonna go ahead and get through
188:41 - trying to find a nice thumbnail or
188:44 - something II spot to pause
188:58 - no this is good I'm standing in front of
189:03 - Nabil this is actually it's weird that
189:05 - he's like frozen here alright never mind
189:12 - I'll just start with his outline this is
189:15 - better like it's there okay okay oh and
189:28 - I haven't been recording any of this to
189:29 - disk
189:30 - oh it's fine we can take it down from
189:32 - YouTube hello welcome to another okay
189:42 - hello welcome to a tutorial about long
189:48 - short term memory networks neural
189:50 - networks machine learning with a guest
189:52 - Nabil Husein so what you're about to
189:54 - watch is an edited version of a live
189:56 - stream that happened a couple weeks ago
189:57 - with Nabil Husein who is a
189:59 - brooklyn-based
190:00 - artist and educator a little bit a lot
190:02 - more information about Nabil in this
190:05 - video's description that you can check
190:06 - out Nabil is going to show you how to
190:09 - train a neural network to learn about
190:13 - let me let me do this again I forgot
190:15 - what I was doing here and I have to
190:17 - mention spell dot run okay hello welcome
190:21 - to a video tutorial this video tutorial
190:23 - is part of the spell series so this is
190:26 - sponsored by spell thanks very much go
190:28 - to spell dot run slash coding trained to
190:30 - sign up for an account before you fall
190:32 - along with this tutorial if you want and
190:35 - ok so what are you about to watch this
190:36 - is an edited version of a live stream
190:38 - that happened a couple weeks ago with
190:40 - guest Nabil Husein Nabil has seen is a
190:42 - brooklyn-based artist and educator he
190:45 - has lots of super wonderful interesting
190:46 - work and things that they've done that
190:48 - you can learn more about on his website
190:50 - which will be linked to in this video's
190:51 - description I'm just going to show you
190:53 - here is how to take a corpus of text and
190:57 - train a machine learning system this
190:59 - machine learning system will use
191:00 - something called an LS TM it's a neural
191:03 - network architecture that deals really
191:05 - well that's really good for sequences
191:06 - like sequences of words or characters or
191:09 - musical notes
191:10 - so he's going to train an LC I'm a model
191:13 - off off a corpus of text he's going to
191:16 - train that in the cloud using the spell
191:18 - platform in tensorflow
191:19 - then he's going to download the Train
191:21 - model and use it in javascript in the
191:23 - browser with ml5 to generate new text in
191:26 - the style of the original corpus on
191:28 - which it was trained so that's what
191:29 - you're gonna watch from end and
191:30 - beginning to end a full tutorial it's
191:32 - going to use you're gonna want to have a
191:33 - Python environment set up know a little
191:36 - bit about spell and Knoll and also have
191:39 - like a code editor so you can write some
191:41 - JavaScript and code with HTML so
191:45 - notifications go away notifications um
191:48 - so hope you enjoy this video maybe Matt
191:50 - you just do a little edit there since
191:52 - this is just be professional so before
191:58 - you begin you're gonna want to so before
192:08 - you begin if you've never watched any of
192:10 - my videos before you might want to take
192:11 - a look at the workflow videos because
192:13 - you're gonna need a code editor and a
192:14 - Python environment I have videos about
192:16 - how to set that stuff up as well as
192:17 - probably look at just my intro to spell
192:19 - video to understand how the cloud
192:21 - computing platform works button to be
192:22 - able to show you all that stuff
192:23 - step-by-step through this video as well
192:24 - so hope you enjoy it please if you make
192:27 - something if you make your own a train
192:29 - your own model make your own project
192:30 - with this share it with me
192:31 - at Schiffman on twitter share in the
192:33 - comments here I would love to hear about
192:35 - it ok enjoy it and thank you so much
192:36 - Nabil and thank you so much spelled out
192:38 - run
192:40 - [Music]
192:42 - alright that's done that's done what
192:51 - about an outro I don't think I need an
192:54 - outro maybe I need one just in case yeah
192:58 - let's see let's go to the end of this
193:00 - video
193:04 - alright is it alright thank you so much
193:08 - Nabil thank you to spell I hope you
193:11 - enjoyed this video and again if you make
193:13 - something if you if you train the model
193:14 - and make your own project please share
193:16 - it with me
193:17 - in the comments below I'd love to hear
193:18 - about it ok enjoy it I'll see you in a
193:20 - future coding train video ok so that's
193:27 - fine so I think that'll have to be good
193:32 - enough always good to do these things at
193:35 - the end and now I'm really gonna go save
193:42 - [Music]
193:44 - ok goodbye everybody
193:46 - see you next Friday I don't know the
193:48 - exact time yet but I will post it
193:50 - hopefully by Wednesday or Thursday
193:51 - subscribe quickly alarm bell you'll get
193:53 - a notification all that sort of stuff
193:54 - and I will see you more videos to come
193:57 - there's so many things in the backlog of
193:59 - being edited and uploaded so hopefully
194:01 - you'll catch those and leave a comment
194:03 - and all that sort of stuff thank you
194:07 - there were too many people talking in
194:09 - the background really look it was loud
194:17 - all right one more time just in case I'm
194:22 - basically just missing this meeting
194:23 - anyway at this point which is fine I'm
194:25 - not I'm not I'm not crucial to it I just
194:27 - wanted to go to it
194:31 - [Music]
194:44 - okay it was fine someone in that in the
194:49 - slack channel could you let me know if I
194:51 - really need to do that again of course
194:53 - they'll just take me two seconds
195:04 - [Music]
195:08 - you
195:08 - [Music]
195:21 - all right I could always redo it on
195:23 - Monday anyway I'm gonna just do it one
195:27 - more time just in case cuz it's
195:28 - literally gonna take me less than a
195:30 - minute and Matt's yeah and I'm also
195:35 - gonna record I didn't wasn't recording
195:36 - to disk so let me do that too it's fine
195:39 - sorry wait go do something else now I'm
195:41 - I'm streaming this bubsley is like a
195:43 - backup hello welcome to a video tutorial
195:48 - that's what happens on this channel I
195:50 - guess um so this is this is sponsored by
195:52 - spell thank you so much to spell for the
195:55 - sponsorship what you're about to watch
195:56 - is an edited version of a livestream
195:58 - that happened a couple weeks ago with a
196:00 - guest educator and artist fork Linnaeus
196:02 - educator artist Nabil Hussain I
196:04 - recommend that you check out his website
196:06 - linked in this video's description to
196:08 - learn more about his background and his
196:10 - current work and all sorts of wonderful
196:11 - stuff that he is up to so what you're
196:13 - gonna see from beginning to end in this
196:16 - video is the process for taking a corpus
196:19 - of text training a machine learning
196:21 - model this particular model is called
196:23 - LST and long shirt short-term memory
196:26 - neural network maybe we'll explain that
196:28 - a bit more in the video and offer you
196:29 - some resources to learn about it train a
196:31 - model to learn about that text train it
196:36 - in the cloud on spell you can go to
196:38 - spell dot run slash coding train if you
196:40 - want to sign up for that service and
196:42 - follow along with the tutorial and then
196:46 - download the train model then bring that
196:48 - train model into the browser in the
196:50 - JavaScript generate new text in the
196:52 - style of the original text that the
196:54 - model is trained on so you're gonna see
196:56 - the full process for this tutorial
196:58 - probably if you've never watched any of
197:00 - my videos before you're new to coding
197:01 - you might want to watch some of my
197:03 - workflow videos that show you how to
197:05 - like set up your environment you're
197:06 - gonna need maybe a you're gonna need a
197:07 - Python environment you're going to need
197:09 - it a code editor and know how to run a
197:11 - web page in your browser that you're
197:13 - developing locally on your computer but
197:15 - I have videos that show all that stuff I
197:16 - also a video that introduces the spell
197:18 - platform and give you some background
197:20 - about how that works alright so I hope
197:22 - you enjoyed this video if you make
197:23 - something with this please share it with
197:25 - me I would love to see what kind of
197:26 - crazy and interesting and wacky and
197:28 - original and fun and playful projects
197:30 - you are inspired to make by learning how
197:32 - to
197:32 - do this thank you again to the Biel for
197:34 - being here to have to make this tutorial
197:36 - and for spell for the sponsorship okay
197:39 - bye-bye
197:41 - okay the only noises was off yeah it's
197:45 - ro who's on the outro
197:49 - well I made an extra one just in case
197:51 - alright thank you so much to be all for
197:56 - this wonderful tutorial again thank you
197:58 - to spell for the sponsorship if you make
198:01 - something with this please share it with
198:02 - me I would really love to know about it
198:03 - and I'll see you in a future tutorial
198:05 - many more machine learning ml five
198:07 - Python EE tensorflow EE things to come I
198:10 - hope goodbye alright alright so anyway
198:19 - alright now I am really really going
198:23 - thank you for being here today I don't
198:26 - know why vows having this like week of
198:28 - just feeling like oh what am i doing I
198:31 - don't know it I know my brain doesn't
198:32 - work anymore none of my tutorials makes
198:34 - sense anymore what am i doing
198:36 - I know effect just felt like that all
198:37 - week and I feel a little bit
198:39 - re-energized I like doing this on Friday
198:40 - too because I feel like work week is
198:42 - over I'm gonna go home good have a beer
198:44 - relax and spend time with family this
198:47 - weekend and catch up on a lot of work on
198:48 - Monday so I hope you also have a good
198:50 - weekend get to spend time with friends
198:52 - family whoever internet friends
198:56 - real-life friends all those types of
198:58 - things and I'm gonna go check out the
199:01 - end of this meeting
199:02 - send me your feedback makes a mastadon
199:05 - box take a break from code for a while
199:08 - and all that stuff okay here we go
199:12 - goodbye

Cleaned transcript:

hello happy Friday I thought I would try for an entrance it's actually work we're started with nobody here for a minute and just music playing and then I enter did that happen is my microphone off why are you hiding could you tell I was hiding underneath the air and I slipped that way I guess I could have a computer over there though I start this dream from anyway hello everyone welcome today's Friday which means coding training day hello perhaps to the NYU Tandon student I met at the library yesterday maybe probably unlikely but if you're watching say hello in the chat at Tandon is the school for engineering at New York University in Brooklyn and I'm often there working in the library and every time there's somebody come to expand says hey watch my videos which is kind of amazing because that really doesn't happen to many other places or really any other place frankly alright looks like oh let me get my chat up here hello to the oh I don't think I actually sent a little notification here I'm gonna say Channel I am live now if you're wondering where I am sending this to I there is a slack channel that you can get an invite to by joining the patreon or joining the YouTube thing through the join membership blah blah blah blah blah blah blah blah blah so today I will just be saying blah the entire time I had this idea that I wonder if I could do a coding tutorial just through guttural sounds and gesture but maybe today is not the day to try doing that also might not be the most accessible way to do a tutorial so I I'm going to talk about something called word Tyvek today before I get into that let me do some housekeeping not really housekeeping but I'm so unprepared for word to bec but I spent five minutes preparing for this livestream by pulling up a couple links of things I wanted to show so first of all if you are not already aware let's see if this actually works processing Community Day is happening in Los Angeles on January 19th 2019 that is a Saturday I believe it is happening at UCLA and you can get your tickets there early bird tickets are available until October 31st I will be there my kids will be there because we have a new track for families and there's lots of exciting wonderful stuff that's happening that day so I encourage you to come if you can now if you cannot come to the Los Angeles prosecuted a because maybe that is just not a place you can get to reasonably check out PCD worldwide there are at the moment many processing community days in all these cities around the world that is this is kind of unbelievable and I wanted to highlight one the organizers are some of the organizers are alumni of the program ITP where I teach and they are hosting a processing community day in India it looks to me like here they're actually four in India I know it's probably like around midnight is it midnight like India like a half someplace they need a half hour off so either midnight or 1230 in India and I'll show you this one here in Bangalore and February 2nd 2019 organized by these wonderful folks Russia Ali who I believe is probably actually just a couple floors down in this building right now I kind of have a fantasy of going to one of these crossing and community days in India ll see if we can I can make it up and a little difficult to travel that's that time of year so far but who knows all right so that's one thing I want to mention I also wanted to give a shout out to coding trained viewer Eliza I just discovered has a podcast we've kind of like the most awesome name ever unicorns fart pixels and I have to admit I discovered it because somebody mentioned that I was mentioned and I listened to the episode where she talks about coding train amongst other things so there's a little bit of like vanity here and me showing you this podcast but so I did listen to episode five first yesterday which talks about Bob Ross and me and Patricio and coding train and book of shaders and all sorts of other things but I and I'm planning to go back and listen to the other episodes so I encourage you to check out this wonderful podcast about web development and creative coding it's great unlike my frantic frenetic behavior I feel like Eliza has a very nice soothing comforting quality in her voice in this podcast I wanted to mention that I also wanted to mention as a frame for reference that the Cody crane has a website and for every coding challenge that I do I have a page on the website so I'm trying to get this better but you could see so this is by the way something that is an opportunity for the community to contribute to so if you're interested in helping with maintaining this website that's wonderful Neil's Webb did at Neal's Webb on github I think did almost all of the work for building this website out originally and Watsonville have contributed I'll note me I am so me who has made lots of technical improvements that fixes and advised on this and Austin who is also contribute a lot of like the visual design interface stuff but the reason why I'm mentioning this is it's been a little I guess I don't mention this every video and it's been a little light on the community contributions so this is not the simplest system but if you're looking for your first open source contribution you can add a project that you have made based on one of my challenges to this page by following these instructions and involves making a pull request on github there's no content management system for this other than the github repository itself and it's certainly something I could think about incorporating the future but if you're here I can click on this and we can see this is Cole Spears look at this rotate zoom with mouse scroll press space or enter for new leases you Lisa jus Lisa jus shape and check console for 3d leases you table position okay so I can looks like I can rotate around this if I hit the spacebar it starts over well some of the other commands does not remember anything scroll oh yeah scroll I can zoom in and out so this is lovely the scene I love seeing these contributions of projects that people have made and I'd like to if I can remember highlight them on the live streams as well I'll note that there is this new button someone recently made a pull request that I have this button that just takes you right to the code and then if I could manage to remember to port which I already actually did but there is actually already a to p5.js port of this challenge and I believe it's actually linked to right here but this live example should actually take you to it running in the browser but it's not currently so that's something that somebody could add to this page that's missing and there's information on this like see how to contribute stuff all right so I wanted to mention that also I've got all this new design stuff that you might have seen thank you Jason Hagglund new characters and sort of a new little train passenger they're like my friends this is this dot over there so and there's the semicolon the asterisk so I'm oh I love any design ideas or feedback or to incorporate into the site of some of the new materials and I've posted a where is all this stuff it is at github comm slash coding training slash website if I go here under issues yeah like I even posted an issue here new coding terrain banner I gave it the hack Tober fest tag there's this hack tober fest thing going on I'm trying to I guess which is run by digital ocean when waiting for my digital version sponsorship and if you support open source projects you can earn a limited edition tshirt so I've been trying to remember to tag various things that I'm involved with with Oktoberfest alright so I want to mention that now one more thing if anyone while you're watching right now I have a little challenge for you to do while you're watching I was going to do this as part of the live stream but I think it might be more efficient to have somebody do this while I'm doing other stuff and then give me the results so I want to at some point today before I leave train a word to Veck train Network new word Tyvek model with a source text and I thought maybe it would be interesting to see what happens if I use my nature of codebook as the source text it's a pretty decent amount of text it's not huge obviously have a robust model and I know the camera just went off I would need a much larger body of text but this something I think we could work with right now so in order to do this so it's a little bit tricky on this this is the repo you want to be at Schiffman slash the nature of code clone or download this repo you're going to want to go into chapters and then this is all of the raw HTML all of the raw text of the book welcome title page dedication ba ba ba on all the different chapters so what I what I need is to take all of these HTML files strip out maybe using a red regular expression or some kind of like fancy Python thing that you know about strip out all the HTML tags and leave it with just the text the raw text of the book and then concatenate it all into one file so obviously we want one file nature of code dot txt that is just the raw text of the book and I'll use that to train a word to Veck model this also could be useful because I could use it for my on LS TM example that I would hope to make and why by the way it's ok I I do this I don't want to be doing this I don't want to be saying acronyms and having people watching me going I have to leave now this is not for me LST m it is something that actually Nabil Hussain was here last week against presentation on but it's a kind of neural network that can be used for sequence data and for generating text and so we're Tyvek is the thing maybe who never heard about I don't claim to be an expert on word Tyvek and all but I am going to talk about it and show a wonderful tutorial by Allison parish which covers a lot about how word Tyvek works and then try to play around make some examples with worked effect today all right uh yeah so Matthew brawn it made a note in the chat here ignoring the gem file dot lock vulnerability on github yes I did conveniently ignore that I couldn't actually so I now by the way so github when you have a project hosted on github and one of you are packages that your project is dependent on has a security vulnerability and will give you this alert and I was able to I had this alert for all these node packages and I know I do like NPM something on it and you fix that and upgrade stuff and it works able to do that I could not figure out how to fix the gem file dot lock vulnerabilities maybe I would have totally accept a pull request on that if that's a thing I think that's a thing that somebody could do without me being an administrator I don't know enough about ruby stuff and frankly I don't think oh no yeah oh this is for github pages that's why it's in there so anyway please don't fix it O'Neil's webOS say don't fix it Neels web in the chat stop stop all of all all stop training train pulled stop pearl the emergency brake I don't abuse websites don't fix it I was expected by the time I said that there would be more information about why not but that's that for now all right let's see here I think that's that was my introduction to to the fact now I have to start doing some content thing I said I was gonna do word Tyvek and I think I should do work Tyvek today ye but you know I made a mistake because I'm going to talk about word back in my nyu class week a week and a half from now and typically you might think that i have no idea what i'm doing and i never practice and I'm just winging it which is mostly true but I do have a policy especially when I'm trying a new topic I try to actually look at it in my course first where I have students that I can engage with and talk about and get feedback from and ask answer questions and get get tips on and and I try to make a video about it so I really should probably wait a couple weeks but I've already put it as the title of this and I got nothing else I got nothing else besides I could do like a flocking coding challenge which I keep needing to do Oh actually I was thinking of submitting a flock yet something about flocking to Tom Scott's guest thing I mean maybe I should maybe Tom Scott but you'd be anyway I should mention this just cuz this is a cool if you're a youtuber or want to and want to submit a Tom Scott was a wonderful channel um TAS guests for one month anyway I probably that makes sense for me to submit anything I put the wrong person for this but but anyway I'll mention it now all right oh no no this is this is visible yeah I do not want a buzz I did I have my own special by hands yeah I don't want to talk about this this cup over here anymore I won't even mention it Thank You Sahil Khattar II I guess the superjet is back on it was off its back on okay all right ah Neil's web writes breaking news everyone someone make me a breaking news like a custom coding train breaking news sound effect it should have like dignity and then like you can use my voice everyone boom boom boom boom boom breaking news coding train breaking news remix all that into something amazing I'll totally use it all the time a new member on noob of arune thank you welcome a new bob Varun I will be sending out if you're a new member check the community tab for the posts that you can view that have a link to a Google Form to get in the slack channel okay Neil's web rights I have an updated version locally but it's not pull requested yet there is also some really weird stuff where like weird stuff going on with it that completely breaks everything when you try to reinstall the websites dependency it's awesome and I finally got it working locally to toot I I added the toottoot although there is a little like one of those emojis emojis this is the sound for that emoji I think but I have a big tooth to Jabba asks what's going on right now you're watching a person who was desperately procrastinating by randomly talking about nonsense in order not to have to do a tutorial about word Tyvek but I'm gonna stop procrastinating and I'm gonna talk about word Bek deep breathing everyone okay alright so let's get started so I need to pull up some stuff here I want to first go to github.com slash Schiffman /p v word Bek this is an old repo where I'm going to pull some stuff from mostly I wanted to grab this URL then I want to say Alison parish a strange loop but would also recommend this particular there's a way there we go this looks good I wanted to recommend this particular talk from Alison which is really amazing and then I also want to let's see I'm looking for a reference yeah I'm looking for here Oh thud this is like the most roundabout way ever to find this thing that I'm looking for then I'm looking here word vector source then I want to go here okay and then I actually should keep this as well cuz this is another reference that I used to create that I to create this the materials that are in my head that I'm going to work on today and then there's one other place oh yeah glove word Tyvek yeah alright okay so now I have all my references and I can begin okay um hold on just looking here here's a quick spreadsheet for the word to Veck dist in case interesting wonder what that is all right hello India so many viewers from India that's wonderful alright so how am I gonna do this I have no no plan my entire plan is this so just give you some background I made a little p5 module about word Tyvek maybe this was a year ago two years ago something like that a year and a half ago interestingly what is word Tyvek really the I mean is it the training a group of related models that are used to produce word word embeddings interesting all right all right oh sorry I'm over here all right I think I'm just going to begin what I was going to say was I think that today might actually just be largely exploratory and I just try a bunch of things and not actually take the content and make editor tutorial videos out of them else to do it so why not why not just start with Alison's tutorial okay oh glove is not word Tyvek global vectors forward representation yes sorry but it does have so this is a great point that is that Simon is making Simon writes in the chat it is Thank You Metsa for reminding me about the LS TM intros I need to record glove is perhaps using a different algorithm we're Tyvek is a particular algorithm to generate word embeddings or word vectors word to Veck a word to vac model so to speak and glove I guess uses a different particular algorithm but if I'm correct the end result is the same it's a word that is paired with a 300 dimensional vector word embedding is also another way of saying it so maybe I'm let me let me put the glove stuff aside so that that doesn't become a confusing thing but let me just begin all right okay all right here we go hello welcome to a new session from I don't know is it the machine learning course is that the programming with Dex cores I don't know I'm just here I'm just the person who's here and this session which will be a whole bunch of videos is about a topic word Tyvek I ring the bell way too much so first of all I want to mention something very important I known about word Tyvek and I've used it in projects for a little while but I don't think I ever really understood it and I don't even know that I really do understand it but I definitely improved my understanding of it vastly after reading this amazing tutorial by Allison parish it's a post it as a gist on github it's a Python notebook understanding word vectors by Alison parish you know honestly if I find being truthful you should just stop this video right now and read this instead you know a few some people seem to like to listen to me prattle on which is fine you could keep watching if you so choose read this after then at the very least and so this tutorial is a released under Creative Commons by 4.0 license the code itself is the Creative Commons 0 license so you can reuse this material which is what I'm doing right now I don't usually do this again I'm all our stuff is always based on other people's stuff but this this first video I'm really gonna like talk through what's in this tutorial in my own words but if you do the same please reference with attribution according to the license ok so I also want to mention that Alison Parrish has a wonderful talk it's on YouTube I will link to it called experimental creative writing with a vectorized word from a strange loop conference so I also encourage you to take a look at that as inspiration and background for what it is I want to show you my end goal with this tutorial is to get to the point where I have a p5 Java Script sketch in the browser where I can do stuff with word defect what has worked the point of this video that you're watching right now is I'm taking a very long time to start is just to answer the question what is word Tyvek by the end of it I want to use word defect in two projects to make weird stuff happen with text on a webpage all right how are you feeling so all right so let's let me come over here for a second because I've written word to back up here that's gonna help me the idea of word Tyvek and there's the this is a machine learning process similar to other things that I've done that looked at like classification is this image a cat or a dog or a regression analysis what's the what's can you predict the price of this house based on certain properties of that house these are classic machine learning examples word Tyvek is a particular machine learning model that produces something calls a word embedded now what if it's a very very fancy term and what it means is that any given word like Apple can be associated with numbers a vector this we can basically somehow come up with this sort of like numeric mathematical essence of this word as some array of numbers like zero point seven and one point two and negative point zero point 3 4 5 etc etc and there's gonna be some amount of numbers in here this seems like a crazy thing why would I ever want to have a word associated with an array of numbers well one of the things that one can do with arrays of numbers is math linear algebra multiplying subtracting averaging adding so we know we can do that with arrays of numbers and this is the kind of thing that happens in lots of my other tutorials with programming graphics and pixel processing and machine learning but one thing we wouldn't know how to do is how would we say you know Apple plus plus orange but that could be I was trying to like come up with something a good example this is what happens when you don't play on these tutorials in advance but to come up with an example on the fly Apple plus purple with the could this equal plum maybe right like in other words like I'm trying to come up with some it's like pseudo math like let's take these two words and add them together like cat plus cute maybe that equals kitten can I take and like we're not saying about concatenation Apple purple we're saying Apple plus purple could I get those sort of mathematical essence of these words add them together and get a new word well the theory the prompt the idea here that the argument that I that I am making to you is that word Tyvek is a mechanism by which you can do stuff like this right there in your code if I could quantify the word Apple as a series of numbers and I could quantify the word purple as a series of numbers then couldn't I just add all those numbers together I would get a new series of numbers and then I might look and find which word or has a set of numbers that is most close to these set this set of numbers how could I find the similarity I could calculate a similarity score between any two sets of numbers I can find the word that has the most similar to this Plus this and maybe it would be plum why would it be plum is that magic it's because what data that's word defect model was trained on oh yes it's the ladder but and so I want to get to all of that okay this is my sort of like a zoomed out view of why we're doing this let's come over and look at what Allison has in her particular tutorial here which are which is a really nice example if I look at this we can say like well imagine like a really simple case right I was sort of saying over here each word gets a list of maybe a hundred numbers maybe it's three hundred numbers maybe it's a thousand numbers this is up to us to sort of figure out decide based on what we're trying to do but what if we simplify that and here's Allison's example where each word gets essentially two numbers and those numbers are data properties of that word like a cuteness score from 0 to 100 and a size from 0 to 100 so you could say kitten is 95 15 and hamster is 80 comma 8 right there these numbers that's sort of like the label is tied to a set of data point data properties so if that's the case then we can look we could graph all of those and we could say something like oh you know like a horse and the dolphin are kind of like similar in terms of size and in terms of size and cuteness and then we can start to do things but but actually like we could do a mathematic analysis like what is the actual Euclidean distance Euclidean distance means the number of well in this case pixels or units between these two words right here these are very similar because they're physically close to each other and we can also do things you can think of those as and this is a nice demonstration of this idea this is why we talk about it as vectors right I have a whole set of tutorials about vectors describing as describing points in space so for example a vector a velocity vector if I have a particle in a particle system and I wanted to go from here to here this is its velocity its change in location in essence this is basically what I'm doing with an operation like this for example what if I said ok well Apple is over here and then I'm going to add purple to it I'm going to move by purples numbers and over here I now find plum so when we look at this in two dimensions it kind of makes a we can sort of like our brains can understand that two dimensions is like the easiest dimension I mean I have to define two dimension be easier than one dimension one mentions weird sometimes but and we could see here that the relationship between tarantula and hamster is just like chicken and kittens may be close to puppy right and so this I have to pause for a second wow talk about improvising I have no idea if this is making any sense all right oh wow sponge man already made my nature of code dot txt thank you I'll have to look back at that in a little bit all right so what allison is showing here is by moving from let's say one word to another word physically in space we can establish this idea of word relationships chicken is two kitten as tarantula is to hamster now this is all very arbitrary with like hardcoded word vectors so the but this is just for demonstration purposes and in two dimensions so that our brains can kind of process it ultimately if we have a lot more information somehow about all of these words in higher dimensional space in vectors that have a hundred dimensions a hundred numbers we can't visualize that so easily there are interesting techniques for called dimension reduction reduction ality reducing the dimensionality that we could then draw like word clusters and stuff and maybe I'll get to that later but what I'm trying to say here is that we can establish sophisticated complex relationships between words in higher dimensional space but in order to do that it's useful to look at a single example that ties words to numbers in a low dimensional space that we can either visualize or sort of like put into our brains and so I've kind of described to you what word Tyvek is what the model looks like when it's complete I haven't looked at all about the training process right the animals example is hardcoded I'm gonna show you I'm gonna do a port of one of Allison's examples of words associated colors associated with numbers right a color a word red is 255 comma zero comma zero that's a word to a vector and that's going to be from a data set and then the third thing that I'm gonna do is look at what is traditionally thought of as word to Veck these higher dimensional large large dictionaries of words and their associated vectors those word embeddings so that's going to be the journey here I don't know how many videos it's gonna be 3 4 5 471 something like that and then at some point I'll try to also do some projects with that so in the next video I'm going to do a port of Alison's project which you can find all in Python all the code in Python on that tutorial that's linked in the description and I'm gonna do a JavaScript port of it okay so I'll see you there maybe or maybe not go read that page it's excellent ok good bye all right uh so I have a question for those of you viewing at home or wherever you might be had you never heard of word to Veck before and are you a beginner if so hopefully all right okay all right so we're gonna come down to the color idea and I am going to basically do this from scratch but I am going to need to open oh no come back come back xkcd x.x yeah I want a new why is that not opening in a new tab X okay I will just do it manually open in a new tab and close this this I still need you just open up something here on this computer in case I want to use it as a reference this is me right yeah made sense although I was only half listening that's good or bad all right okay github.com slash Roz Vaughn says this was okay and understandable Thank You Roz bond oh yeah sorry I'm opening up I have a repo which has code for doing this and in case I get really stuck it would be useful to have it as a reference if you're looking for it it's ship github slash shipment /p v word Tyvek and i'm looking at the word color vectors but then what I want to get is is the color data come on this is so crazy how it won't control open in a new tab okay so I'm gonna start with this and I'm going I'm not gonna do this in the p5 editor this I think is requires a bit more so then I'm gonna go to the desktop and do word to vac oops it doesn't autofill if it doesn't exist but I'm so used to like Gmail now just like finishes my sentences for me I'm like you know the directory name that I want to make just tab finish it for me all right now and then I want to do p5 G B and what do I wouldn't say a color let's say color vectors oh I didn't I didn't install this NPM G NPM install p5 manager dusty so I use a tool called p5 manager which will spin up all the files I need for a p5 project really quickly and of course that didn't work as I made all these workflow videos setting up all of my settings and I need a like a fresh user on this computer went back to this user and none of the stuff is set up how do I fix that thing again it's fix of course I went over this in my video but I can't remember it fix NPM permissions and this is the way that I like to do it I like to make a directory called NPM global and this set that as the path and then export that and source but I'm using zsh so source z RS r zs r CH c are these our s Pro Z s HRC that's what it is zs HRC there we go and now I should be able to install that apologies that I'm not explaining what I'm doing but I do explain this in my work look let me get back to the chat here whoohoo somebody already made a breaking news sound effect let's all this okay whip sigh have my mute that somebody made a breaking news sound effect which I am throwing caution to the wind I'm just gonna play live right now it's actually pretty good okay that is pretty good all right and Simon is telling me that a glove is faster than we're Tyvek great no thank you okay now p5o you don't had this idea oh I mentioned Tom Scott up my brain needs to stay focused on one thing it does not work that way p5 p5 G B B B I think it's G B color vectors let's try that okay that worked then I want to I'm going to open this up in Visual Studio code let's move over a tiny bit and move over a tiny bit and then let's get here I don't want the libraries because I prefer to just use the CDN and so I have to change the template I'll do that eventually CDN p5.js and let's grab this I want them let's use them unified and put that I don't want to follow the link I just want to put this in here and then I want to put this in here I want to do this copy copy copy copy copy copy copy I don't think I'm gonna use sound so I can get rid of this I don't need all this CSS nonsense and now I am ready I can say no canvas console.log hello color vectors and I can run a server I could run the light then I'm gonna say run my server and now I really should develop something that just spins all this stuff up all at once localhost 8080 which I am amusingly googling instead of oh there we go hello color vectors there we go alright we're ready to start coding now what I need to do is get sorry I want to get where am I looking for here I want this file and I'm gonna put it in where to vak color vector it's xkcd JSON and that's from here go back to here and from here okay all right yes Mathew Braun says copy the CD ends to the templates of your future self will be happy I know but I don't want to waste the time do it now but I won't remember before the next time I come back and you're to tell me again it's a vicious cycle that never ends okay teeth knee Hajduk is it tight teeth knee oh this is gonna be that's gonna be good for some stick later alright I need an eraser which I have here need a marker which I have here okay alright alright part two of my word to vex series your back and I thank you for that hello I'm here to talk about word vectors alright so let me let me mention again well lots of people sorry are lots of people are already doing my nature code thing which is really cool okay hello part two I think I'm on part two of my word Tyvek series I'm talking about word vectors word embeddings words and numbers and how they go together now let me be very clear here this particular section this video is directly based on this wonderful tutorial by Alison parish called understanding word vectors released under the creative commons by 4.0 license if you also use this stuff please attribute it according to the license to allison parish i will include a link to this in the video's tutorial i talked a bit about word vectors in general and about this tutorial and other things that you might look at for inspiration in the previous video and now in this video i'm going to do a direct port of i went too far away ah there we go language with vectors color so a lot of people who are well who are watching this live at the moment we're asking about I don't get it I sort of get that that's like word well word in vectors or word embeddings but like what that made no sense when I would just went on a tangent here so people were asking in the previous video I don't get it like I thought that word vectors are just kind of like about the meaning of the word or the meaning of the word in its context or similarity between words and I don't why what is cuteness I have this example before I've looked at Allison Parrish example with like cuteness and sighs what does that have to do anything so let me be clear my goal is to get to the point where we're talking about this more generalized idea that ends that we get word embeddings words paired with numbers from a machine learning process that generates these numbers according to the way words appear in a very large body of text but we're not doing that yet I just want to look at this idea of a vector space and some of the math associated with it and how that can transfer to text and this is exactly what Allison Parrish does in her tutorial and oh boy that was a mess sorry buddy you know what we should keep that and then someone should make like a little animated a little animated a little animated I kind of get this a little animated thing wait hold on oh oh here's everybody ah this is not this was going well in its own way but it's alright there's somebody talking in the hallway kinda loud can you hear them alright let's try this one more time yes are on my ukulele hello darkness my old friend I've come to talk with you again yeah I guess I will just sort of explain that again I don't even remember what I said so okay all right m'kay demo 88 asks why you always have to click the camera on and off I will refer you to the television program losts from the 19 from the Ox what most los times in the 90s note it's early twothousands whatever I'll refer you to that program where a button had to be pressed lest and that button was not pressed the world would cease to exist and I'll make the case every 30 minutes I'll put ok I'm slowly lost my momentum so what I want to do is do a direct port of this example from Allison parish about language with vectors colors now people were asking in the previous video I kind of looked at Alice's example of like Oh a word like an animal could be paired with data like its size and its cuteness what does that have to do with word vadik embeddings weren't you oh this camera lid off wait this do not go off its cable is loose or its plug is out it's like there we go it's it's a kid it's it's a connection issue ah jeez how many times all right I don't even know where I was so so what I want to do is go through this exact example which is in this tutorial in Python and port it's a JavaScript and what this example is going to do it's going to give us the opportunity to look at the idea of a word paired with a particular is this where I was I'm like oh and I haven't even recording this to disk everything what a mess I can do this I can get past this part where I'm stuck Thank You Siddharth I don't understand why anyone would possibly give me a super chat right now with what's going on in the Prix but I think I'm gonna try to just go from where I walked over there that's yeah thank you for all everything that you do so what I want to do is a direct port of this example from Allison Parrish that looks at language with vectors colors now let me let me be clear about something for a second in the previous video I talked a little bit about this example which was looking at animals in a two dimensional space where the x axis is like their size and the y axis the size of x axes are cuteness and is that word Tyvek well not exactly this these are word embeddings meaning there is a word embedded with some numeric data that's the best way to describe it but it's not exactly what you will find if you look up the term word to Veck word Tyvek is a particular algorithm a machine learning algorithm to take a large body of text and produce these word embeddings high dimensional arrays of numbers based on how the words appear in context in that text I'm gonna get to that a little bit later so sort of in theory the theory of it is we'll end up with this essence of the word and words that are similar in meaning or context or what if that's a big question mark are going to live close to each other in that 100 or 300 or a thousand dimensional space but I'm making the case and this is really from Allison parish's tutorial that we can maybe understand this concept or practice this concept in a simpler way to start and that simpler way will be to use a data set so for example this is a data set from the ER the color survey results from X xkcd so who in the rainbow can draw the line where the violent tint ends and the orange tint begins it's distinctly we see the difference of the colors but where exactly does one first blending enter into the other so with sanity and insanity how apt okay this got some bad language on it come back family friendly friendly coding Channel I want to use this data set it's the xkcd color set it's the 954 most common RGB monitor monitor colors as defined by hundreds of thousand participants in a color name survey you can see more information about that survey here so anyway but the data set itself is over here on in the darius because that means open source project corpora which has a lot of interesting JSON data sets so i have downloaded that data set and i have it right here so the question is can we turn this into a word to Veck like scenario and what kind of strange outcomes can happen if we could pair each one of these words or sets of words like cloudy blue with a set of numbers all right so let's write some code to do this Oh internet I'll a to Internet which means I love you and I hate you I late you internet I love you alright let's write some code okay so first thing I'm going to do is I'm going to add to this preload function and I am going to just create a data set I'm going to say data equals low JSON xkcd JSON and then I'm gonna say here in setup console dot log data so let's make sure this works I'm going to go to the browser where I have my code running and kind of set a setting network I'm looking for Network disable cache there we go okay so we can see here that I have now loaded into that variable that array of 949 colors each one is an object with a label cloudy blue under the color property and an actual hex value so my goal right now is to turn that into a list that looks more like this the label with a number apologies for a second here need a tissue okay so all right so let me first write a little bit of code to kind of process that data so I am going to let's write a function up you know process data put in a separate function and I'm gonna create a variable call it vectors it's going to be an object and in this in this object I first want to go through everything in data and actually everything that's in data is in data colors so I'm going to say let colors equal data dot colors then I'm gonna say colors dot length Oh audio fill autocomplete you do not complete me colors and then I'm going to get an individual color is colors index I and then what I want to do is say vectors create I'm gonna used create vector so this is what's kind of interesting about this I forgot why I was doing this all right so here's the thing right now the data the data from that data file is just in a big array and the array has a bunch of objects in it color you know blue comma RGB I forget what it is and then like the hexadecimal you know value like this it looks like this I want this to be in a associative array a dictionary but I'm just gonna use a JavaScript object for that so just an object where the color blue is the property name and the value of that property and originally in my head I was like oh I just need to convert this into numbers and then I could make a little array like zero comma zero 255 but guess what I want to do vector math my vector is three dimensional because there's an RG and a B there happens to be in p5 itself a class called p5 vector I can make an instance of it with the create vector function so even though eventually later if I'm gonna be doing vector math on a hundred dimensional vector an array with a hundred numbers in it this create vector won't work it's a nice coincidence that RGB has three components just like a three dimensional space plates look coordinate XYZ at three dimensional vector so I can put in here that p5 vector create vector 0 comma 0 comma 255 so that's what I'm trying to write the code to do so I can say vectors I so I'm going to say I'm actually say label equals colors index eye color and then RGB equals colors index I dot and what what is it in here it is hex it's under hex and actually I'm pretty sure that in p5 if I have a string like let s equal zero zero zero this is a the hexadecimal code for red I can say color s and it will give me a color object that has the RGB values in it so what I'm gonna do is a little confusing because everything is called color so there's the colors inside of the JSON file and each element of the colors array has a color label and now there's a p5 color function so there's a lot of stuff called color it's all different but I'm gonna say RGB equals the color function with the hex thing passed through it and then I can say RGB our RGB gbg RGB B so now I'm gonna and then the vectors with that label there we go so this is just a little bit of data cleanup to a format that I want to have it I don't know if it really matters so much but I think this is gonna help I create an empty object they look at all the stuff the data the weights in the JSON file and then one at a time I make a p5 vector out of the RGB values and then I should I'm gonna say a return vectors and I suppose that it would be nice to like pass in this argument and I could say let vectors and then I'm going to say vectors equals and maybe I'll call this like color vectors ok that did not work can't read property lengths of undefined sketch such as line 13 let's console.log data it must have been confused oh boy I'm doing this in the wrong place ha the whole point of preload is that it's a function that you call to make sure that data is ready before you get to set up because it's loading data loading our text file loading of media files asynchronous in JavaScript and I'm trying to simplify that this needs to be in set up and now I should go to say this here as well okay here we go there we go now oh yeah okay hold on weird what's going on oh oh there's a set up down here too many setups motes are too many setups okay here we go this is gonna be right eventually there we go now I have basically a dictionary where every single one of these colors is paired with a p5 vector with these XY and Z values no that's not right that is not right at all a lot of zeros in there let's see so there is no dot RG or dot B property of a p5 color I made that up completely red it can call the red function and pass in the color green blue this should work now just make it up stuff that doesn't work okay r is not defined this is RGB there we go and there we go now this is looking right right and algae is lives in the vector space 84 comma 172 time a 104 all right everybody I could just like have this view of the comments right here where everybody is saying all right all right okay okay thinking about this oh don't go away computer screen come back how am i doing timewise I've got about an hour left out of hydration that's bad all right where's my eraser now that I have this data set we can begin to imagine a physical space a threedimensional space where all of these colors live all right so there's an xaxis yaxis an x axis and z axis which is actually coming out from the wall here and one color might be over here and another color might be here one might be off in the distance one might be very close up right so you could imagine this I'm trying to draw this 3dimensional space on a twodimensional surface but you could imagine now that I could do certain things by what if I just did a random walk what if I did a random walk throughout this space what colors would I find let's actually try let's try that oh why not excellent starting point okay so let's say where I'm going to start is I am going to have a position and in setup I'm gonna say position equals create vector random 255 random 255 random 255 now what I want to do basically is what if I pick a random random space in that random vector in that three dimensional space let me find the word the color that is closest to that so I'm gonna write a new function which was I'm going to say call a find nearest and this function is going to take in a vector will call it V and what it's going to do is it is going to I'm gonna I probably need to do this I'm gonna just get all of the keys out of this array right this is a way in JavaScript I think I could do a for of loop let's try that right or for in loop I think I can do a for I think with an op write this the reason I'm stumbling here is this is this looks like an array because it's a whole list of all the colors but it's not an array it's an object where each each color name is the key and the value is the vector so I need to iterate through all that stuff I can't just use a regular loop but I think in JavaScript I can say for let keyin vectors and then I can say let and let's I guess I'm gonna con I can't think of another name for let Veck equals vectors ki then let's find the distance between oh you know what though guess what what I want to do is actually it would be kind of useful to what I want to do is I want to create a list of all the distances and then sort it that's gonna be that's gonna be nice to do so actually let me get this let me get this list of keys key of keys and sorry there's like a someone talking for a second it's for of no for of is for an array hey there's a new video from stand up mass which is called vector my why am i looking at my notifications right now just see something here all right I have a better way of doing this yeah sorry I just looked up my code for each room so me to use look at my code let me actually go back Matt yeah I don't think that's suit to interesting me like going back and forth with all the different ways of the four of loop because let me just go back alright so the first thing that I want to do is I want to get a list of all of those colors into an array so it's important to note that it looks like I have an array of all these things but this is actually an object where the key every all the keys of the object are the names of the colors paired with the value which is the vector but what if I could sort this list by proximity to that other vector well I needed an array to be able to do that and so oh quick way I can get an array is I can say keys equals object keys from vectors this gives me if I just console.log this and I say find nearest you can see now I just have an array of all the keys but I can sort this I can say Keys dot sort and now guess what if I call a sort function I can always sort by an array by my own arbitrary comparison of the two elements so I'm going to use the arrow syntax here and I'm going to write a function that compares two arbitrary elements a and B if you're not familiar with this arrow notation it's like declaring if it's a new way to declare a function in es6 not so new and I'll refer you to my video about the arrow function but what I'm going to do now is I want to say the distance one distance one is the distance between the distance between I'm going to pretend I have a distance function for a second vectors key a and vectors key be oh no no no I'm sorry the distance between V and vectors oh my goodness yeah yeah between hey yeah sorry I got confused for a second remember I'm trying to tell the array which one is closer to V so I somehow need to compute the distance between that and my random Walker right V and either A or B which one is closer and then I can return D 1 minus D 2 because what sorting will do is sorting will take the closest one up sorry what's what sorting will do sorting when you have two elements if you return a negative number it puts a before be a positive number puts be before a let me the other way around but can't remember and if it returns zero then they're the same it doesn't need to swap them so you're just telling the sorting algorithm which one goes before the other one so I'm gonna get a negative number by comparing these two values now of course I need to have a distance function so I need to have a distance function that can take a vector and two vectors V 1 V 1 and V 2 and I could just say return p5 dot vector dot distance this is a little silly v1 v2 so I really just rat am wrapping there is a distance full function already function distance that will take to p5 vectors and I can get the distance between them with p5 Becker not dist but here but here I'm but I just want a and I'm doing that exactly here so I think let's look at this now I should be able to look here so let's look at this again and find nearest cannot read property dist of undefined all right so hold on a second let's make sure I have a vector here let me actually call find nearest from the code oh I have to call it with something okay no wonder was undefined you can't just call the whole point of you calling fine nearest with a particular vector who are you okay so this now does this look sorted to you let me actually unfold it there's a lot of things there's a lot of colors in here greenish blue teal ish greenish teal green blue aquamarine see right doesn't that I picked some arbitrary spot now what is that color actually so here's the thing did I sort it in the correct order that would be a question so let's console.log V and then console.log also vectors sorry vectors keys index zero this would be the first one so in theory these should be two very similar values let's see well I'm console logging V in too many places 64 78 to 52 53 69 84 so that makes sense it's pretty close you know 172 money right so this looks right if I sorted it the other way I just I could never remember which way the sorting works so I just try it both ways if I sort it the other way you'll see I'm getting the furthest thing the color that's the most different okay so now what I'm going to do is I'm gonna add a draw loop and now this function I want it to return keys index zero I just want to get the closest one and so what I'm going to do is I in draw I'm gonna say fine nearest and then I'm going to create a div with that color in it I'm gonna say call it color name so I don't want to override the color variable color name and then I'm going to say ha I'm gonna I'm gonna say let V rant R equal P 5 dot vector random it's a random 3d that gives me a random vector I think random 3d will give me a random vector and then I will say pause add R so this is random walk I'm just going to randomly change that vector and create a div for a new color name and let's change the frame rate to like five to like one so it does this once per second let's take a look so look at it this is my random walk you can see that it's not getting very far away it started with sepia so I should probably take a bigger step right the step is so small that it's mostly wandering around the same color there aren't that many colors so I'm gonna say r dot multiply by 10 so I'm gonna make that step much bigger boy let's try this one more time let's make it much bigger we can go a little faster there we go so we can see now I'm walking around there should be like each one of these steps is this fairly similar color to the previous one so this is the idea I am performing a mathematical operation in vector space walking around a 3d vector I'm finding the word that it's most closely associated with that one by Euclidean distance and then I am rendering that word on the screen so this is pretty good I think there are some more probably some more interesting things we could try to do let me take up a break for a second and let me try to do one more example with this data set just to show you a bit more about like analogies and vector math and then after that we'll move to the actual an actual word to Vectren model why should I use the absolute value okay so why should I use the absolute value oh you know what past zero zero zero for testing that's an interesting idea let's do that so let's start with I mean I do need to constrain it because I don't think there's there's no negative numbers in this data set whoops right so this was starting with zero zero zero all right um actually let me come back let me let me not finish that video over a second before I move on let's actually just test something like let's say for example I want to instead of because it's random just to make sure this is really doing what we think let me start with like blue so I am going to start with not color sorry create vector I'm going to start with blue and let's see what we get primary blue pure blue true blue pure blue blue primary blue now one thing one thing that's an issue is I shouldn't I really can't allow negative numbers because if I'm wandering off to negative land there's no negative numbers in my data set so probably to make this a bit more accurate in terms of this random walk where do I have that in draw it's right here I probably want to say paws dot X there's probably a more thoughtful way of doing this equals oh I could I see this I could equals I need to stay in sort of positive lands so constrain paws dot X between 0 and 255 or I could do like an absolute value or something of the vector that would be weird but let's just let's just do this as like a sort of a quick solution so this will keep me in that space and let's run this again all it'll keep me it'll keep me in that space and let's run this again and we can see now eventually after enough time we're gonna walk away from primary blue and end up sour and Barbie pink Barney neon pink strong pink and if you go back to Allison's tutorial which all this is based on let me see if I have that here oops you can see Alison has a wonderful example which does the following sorry that I don't have this sorry if you go back to Allison's example if you go back to Alison parish's tutorial she has an example which does something kind of like this which starts with a little poem roses are red and violets are blue and then randomly walks around and then you see it by the end we have roses are brown orange violets are peacock blue so you could imagine what is a creative project you could do that takes this idea and expands on it as an exercise you might even just try to take my code and make it do exactly what Allison's example does in the tutorial and so I feel like I want to do one more I'm not one more example with this data set I think before I go and look at the larger context of the word to vac machine learning system that will train a model Oh set the text of that color where can i okay I'm gonna go back and record all of this stuff right let me go back to where after that if I finish the constrain so even though I start with primary blue you can see I've started walking around and getting more I'm gonna I'm gonna end up somewhere else eventually but these colors are related as I'm going okay so this is working pretty well the way I imagined it and of course Steve and me I am to me both you chatter like Hello set the text of that color so let's do that just to just to say that I think will be more interesting so where I create the div where do I do that I create the div here and I'm gonna say let div equal creative and I'm just gonna use the p5 Dom library and say style background color Oh background color now too bad I didn't keep that hex code cuz I got the hex code I could put it right there let's keep the hex code so where I do that where I process the data let me add in vectors label oh it's not an object hmm it's fine I'll just use RGB I'm just gonna use I could just say I'm use a template literal RGB what is it the vector is that the vector is vectors color name because I just returned I just returned I just returned the key so I probably should I could have returned the whole vector so many ways you could do this and now RGB video VIX okay this is easy this is fine way to do it V dot this is like the CSS syntax V dot Y V Z alright let's try this and that should do the trick alright here we go oh I put the background color alright I meant to set the text color but how do I set the text color font no textcolor know CSS color she's probably just color there we go okay so now we can see really how it's all so we can see how this is a random walk through a color space and I would love to let this go for a little while and end up somewhere okay so Alison Parrish in her tutorial actually does something very similar to this and I might as an exercise suggest doing this she actually takes this poem this idea of a poem roses are red violets are blue and walks through the color space for each of these I've done just a little piece of that so what kind of creative idea can you do visualizing this threedimensional color space through words through color through a random walk I I think I should do one more I'm not sure yeah I think when I try to do one more demonstration with this data set and I'll do that in a separate video and then I will come back and actually finally go to the point where we look at what does it mean to take a pre train set of word embeddings that's actually used the word to vecna Xin learning model training process okay see you there background color is better real background color worked pretty well yeah all right there was a super chat I think with a question which I I think I should try to answer can we draw a circle of color variations with it yes so I could use a canvas you know there's lots of things I could do like for example if I write here if I said create canvas 100 comma 100 I could also do a fill feed well in the draw function separate from the divs I could say background you know zero fill why is it doing that fill and I need to do it with V V X V Y V dot Z and then draw an ellipse which is at 5050 you know 100 100 hundred so that if I go back to my sketch unexpected token there's an extra parenthesis there for no reason you can see I'm always now as this is going down the circle no so I probably could do something where I get a dot next to each one of these or something but you see the idea and I could also in this case maybe it would make sense do not create a new div but just like replace the previous div so for example I could do let div equal here and then I could say and set up a div equals creative with nothing in it and then I could say a div instead here like div dot HTML color name and there we go so this is kind of interesting where I could do it this way where I'm just walking through it and then drawing it okay let me go back to the bottom of the chat doesn't the word as a CSS style work oh that's interesting do it just yes some but do all of these these this isn't the list of all the CSS words that would be another data set that I could use I don't think macaroni and cheese is a CSS word okay all right now I'm Allison has another demonstration on this on her tutorial all right which you could do like the average color of a text I'm reading this synonyms I mean maybe this is really maybe that's enough I mean I shouldn't do another one maybe I'm kind of done with this actually let's try doing something I have the nature of code text so let's try it let me find one of these nature of code texts so there's this one from sponge man okay nature of code text raw download call this an NOC txt and desktop work Tyvek whoops you'll see txt how big a file is this it's only 550 this is the whole book yeah makes sense all right so what I want to do is let's test out this idea first for a sec um let's get rid of all this stuff and draw what I want to figure out is how many make a sonnet with color make it act visualize it in 3d all these are great suggestions what I want to do is let me do let NOC and I'm going to say and I'm gonna say NOC equals join lines join lines and then console dot log and OC dolly so I'm just testing just checking something here I want to see whoops not there because desktop this is supposed to be in there so there okay definitely got the whole text of the book what else on my console logging that I don't need so one thing I want to do is I just want to do something like let me find like so let me just see we're NRC dot split this could be better but split by all words oh but there could be some of the colors are two words but that's fine and then I want to say if well actually I could use a regular I'm trying to just trying to figure out if any of how many of the words in xkcd show up in so because I was say if vectors words index I console.log words index I so I'm basically going through I could user I maybe using a regular expression would make more sense but let's let me just do this for a sec so black/white grass gray constructor constructor is a color in the xkcd set that's weird that doesn't make any sense Oh constructor is a Oh the how they get you and what is it is own property I think I have to use his own property I'm sorry I'm just figuring this out myself right now I think there might be a better way to do this actually I should be looking at the chat is own property words index I let's see this has owned property has owned property yes so right okay great so these are all the words that I use in nature of code but this isn't great because I'm missing things that are two words so another way I could do this would be to another way that I could do this would be to all the and then create a regular expression out of that key and then let's try key match you know NOC console.log NOC match projects and how do I add the flag like this gee I think that's how I do it let's see what this does not so new reg XP that's right why did that give me that error 21 Oh reg that's Ajit that's supposed to be G okay sorry about that right okay so red match to Brazilian times gray so this works rose rust cream t.t i say t o because no no it's got to match it with a word boundary right t is probably in a lot of words but not as its own word so how would I do that equals with a word boundary like this so let me just see let me do this matches if matches console.log matches I don't want to print out all the null it's got to match something this must not be right string includes would be better index of yeah index uh but uh I don't know what I'm doing here I this is sort of pointless I think what I just want to do is get a small section of the book so and I'm not gonna like let me just get a paragraph like uh uh here I'm gonna do something different this will be good rainbow Wikipedia okay let's rename this to a rainbow so this definitely has the cut the word red in it and let's let's actually I'm just curious see what this gives me oh yeah definitely where's red didn't match red why not oh I know why I probably need to do this right yeah there we go that's what I needed to do so this is an annoying thing if you back slash it's an escape character but I actually want the back slash I need to like escape the escape character thank you very much okay so sky sky violet violet okay so what I'm gonna do this is fine okay I have an idea now have an idea I'm not gonna use regular expressions anyway but I have an idea okay okay okay I have an idea this is great I'm gonna okay okay coating challenge now just is the tutorial it's fine all right so let me it's fine okay I'm sorry what time is it oh I can do this all right okay okay the word defect video number three now I'm still not into the actual word to Veck model itself yet I'm still just playing around with this idea of words being associated with numbers and the example scenario that I'm using is a color red blue steel which is a word associated with numbers like it's red value it's green value it's blue value in RGB space okay so and all this is based off of Allison parish's tutorial understanding word vectors which is here under the creative comments 4x4 BY 4.0 license please make sure your if you're using this stuff also you attribute it this that I have a breaking news track alright hello and welcome to word to vector tutorial number three I am not yet actually to the part where I'm going to use the word to Veck algorithm model itself I'm still just in a place where I'm looking at okay well I have words and I have numbers what does that mean what kind of things can I do with that and the scenario that I'm using which is from Allison parish's excellent understanding word vectors tutorial available under the Creative Commons 4.0 license please if you're basing stuff off of what I'm doing also attribute this in the scenario that we're looking at is colors colors so and you can find you could find that down here so what I have is I have a p5 sketch which is loading this color database of the 904 most common RGB monitor colors from an xkcd survey and I have did a previous tutorial so here here's my idea this is what I would do in this video I am going to take some text from the rainbow Wikipedia page and I'm gonna say let's sprinkle some red on it or sprinkle some blue or sprinkle some of this color what does it mean to add some color to it and how Tech's change so I our everything the tiny bit of code here basically nothing I introduced from the previous video I introduced a variable called lines I'm loading this text file where I just copypaste the Wikipedia content into you can think of a different way of doing this and then now what I'm gonna do in setup is I have a global variable called rainbow I'm gonna say rainbow equals join when you load a text file in p5 with load strings it gives you an array where every line is on a different is in a different element of the array so I'm going to say join lines and I'm gonna give it a delimiter like the BR tag and then I'm just gonna in I'm gonna now add said I'm going to say create pr8 books create PE rainbow so right now we should have if I go here is we should see and I'm gonna say no canvas although I might wanna actually use the canvas a little later we can see here I have all that text now what I want to do actually is I want to highlight and color anything in the text that appears in the X in the data in the color database so I think actually what I want to do is first split this up into words so I'm gonna use rainbow dot split and you could check out my tutorials about regular expressions and word weird counting and all that stuff where I do this a lot I could definitely come up with a better regular expression but I'm just gonna split by anything that's not a character that's a through Z or 1 through 0 through 9 so I'm gonna do this then I'm going to say I equals 0 I is less than words dot length I plus plus and I'm gonna say create span words index I this is gonna the BR stuff is going to mess up I'm gonna say this or the BR pull this work oh boy didn't like that did it I'm not gonna worry about that though the BR stuff is gonna mess that up so I'm just gonna make that a space instead and now if i refresh this page there we can see all the words whoops all the words are together in one line need to put spaces between them this is kind of a terrible idea but I'll just do this and now okay so here's the thing so now here's the text what if that word what if one of those words appears in the color database so let's look I'm gonna say let me just say and actually another way that I could do this I can use a for of loop let word of words and then it's just a little bit nicer to do it this way if vectors word if it exists then what do I want to do I want to make I want to get the color is I want to say let color equals that vectors word and then I want to say I'm going to say let span equals create span and I'm gonna say span dot background style and I'm using once again the p5 Dom library background color I wish I'd save my code from the previous video to write exactly the same thing RGB and then I'm going to take sorry uh CX CY and C Z Z dot y and C dot Z so let's see if now we can see some of those highlighted there great so anything that was in that database I am now highlighting sky sky red violet Rina now the other thing I might as well do is I might as well store those things so let me keep track of color spans as an array and I'm gonna add span into this array and now I can start doing stuff so what might I want to do first of all one thing I could do which is kind of interesting is let me just get the average color of all those things so what if I say my calluses say let keys equal keys I'm also gonna save all of those sorry time out for a second there's a really loud noise I don't think you guys can hear this where my 415 oh I had to escape the slash right keys I'm gonna say Keys dot push the word so let's just take a look I'm just curious here console.log keys so we can see these are these are the only things in this text that matched and again I should have checked for two or two pairs of words and things I'm missing a lot of steps here but you can improve my code that would be wonderful make your own version of this but let's at least get the average color here so let's see what the average color is so now I can say average equals create vector zero zero zero so any math that you can do with numbers you can now do with those words because now I can say let key of keys and I can say Vee is vectors that's associated with that key average dot add and then at the end I can say average dot divide the length of all those keys then all I need to do is get nearest find nearest that particular vector and then console.log nearest purplish so the average color of this text and this is directly again from Allison's tutorial she has something very similar in it is purplish and if I wanted to now I could create a canvas you know very small 150 comma 50 and then I could say background average X average Y average dot Z and we would see there it is so that's the average color and its label is purplish now what if what I wanted to do was actually add add some color or subtract some color and change the text so let's let's try to do this dynamically this will be this is gonna be hard but this will be extra fun so I'm going to create three sliders our equals our slider our slider gee slider B slider and I'm gonna hope that one of you watches this video and gets inspired to make a really interesting wonderful interface I'm gonna completely ignore anything about interface design here and just kind of do this raw our slider equals create slider between 0 and 255 and starting with zero and I'm gonna do the same thing and I'm again these are p5 functions too and I could obviously just write write these down relevance into the HTML directly but now I have three sliders and what I want to do is anytime I change any of these sliders so I'm gonna say our slider input slider changed I'm going to call this same function if any of the sliders are changed so I'm going to assign this slider changed event to all of these and then I'm going to write this function slider changed and now I need to get the values R equals our slider value G equals G slider value and B equals B slider value now let me just make sure this is working console.log RGB okay so let me run this and now as I move these sliders you can see anytime I move the slider any of these sliders I'm getting this color value now I'm gonna take that color value and add it to these colors and then have the words change with the new color matting I probably should be listed I should make it so I could subtract color too so let's actually make it let's just make it make it so I can add or subtract some amount between negative 100 and 100 negative 100 and 100 an egg ative 100 and 100 okay so now in this slider change what I'm going to do is I'm going to go through all of the spans and keys I guess III need to I could probably more thoughtful Laurie factor this later but men make these global variables and I'm going to go through all of the spans let's pan of color spans and I'm going to get the key the the word is the HTML of that span actually don't have to look it up otherwise then the vector is the vector associated with that word then I'm going to say vector add RGB I think this will work right this up this takes that vector and adds these amounts to it then I need to say nearest equals find nearest oh I need to make a copy of it so I don't actually want to change that vector I need to make a copy of it so I'm gonna say copy because I'm pulling just a reference to the vector that's in that object and you don't want to adjust it that's the actual vectors associate of the word I want a copy of it that I'm gonna mess with and then I want to find nearest to that and then I'm gonna say span HTML that word so look at this these are let's take a look at this these are all the color words let me add some more red to them this doesn't seem to be working oh I'm so excited to see this work what did I do wrong fine V span each Jim Oh nearest nearest nearest right word is the original word nearest is the new one after I added that color I think this is gonna work this is very exciting so I need more space ready here we go uh add a lot of red and I got bright red and bright magenta let's add a lot of green I got white already and a lot of offwhite white right if I add I take away what subtract color I subtract color now I've got black everything is black so look at this you could take you could take a whole text any novel you like and you could say let's just rewrite it with a little bit more red and find any instance of any time of color as reference and guess what when we do this with a more generalized word to vex system we could actually add start to add this idea of a dread to words that aren't actually colors we might have a corpus that includes way more than just these you know 496 whatever that number is color values so hopefully you're starting to see the idea here is that with the idea of word embeddings with words associated with vectors with text associated with numbers that if I could do math to the numbers I can go translate back into words I can always translate those words as the numbers to more math and translate back and do all sorts of strange transformations like this so make a better version of this think about what texture using fix that problem for me where I look also for like pairs of words that match make a nice interface I don't know think about the way you design this there's so many possibilities I look forward to seeing what you make with this and see you in the next video where I actually now go to look at the ml 5 library which has a builtin class a builtin basically feature that allows you to work with word Tyvek without having to write all the math yourself which is what I'm mostly doing in this particular video ok good bye Oh change the background as well wait stop hold the presses ah I totally forgot data I must also change change this as well V V X V dot Y V dot Z okay here comes now as I'm adding the colors it's also changing it's also changing what's actually the background color as well so we can see we can see that that's actually changing it alone which is a nicer way of looking at it okay now I'm really going goodbye Wow all right ray Jackson at Daniel sponsors can't as well I'm not sure what that is referencing a Wikipedia link to repo Oh can't post links yeah I guess you have to be a moderator Oh is there a Lippo project that's like this does Allison reference that and I'm just completely forgotten it whoops blue Lippo colors oh I don't know interesting alright everyone so this is it for today basically I have a tiny bit more time I don't want to launch into the next piece of this I'm going to continue the word to vex stuff next week but what could I do in 30 minutes I can do this probably like 15 minutes right no problem definitely want to do this well I don't know what these are I don't know what generator sorry you gotta learn that that's pretty oh no this hurts my brain come back down I like this one though octahedron you know we should do all right we're gonna do something I really liked this video that Tom Scott put out not this one not this one not this one not this one not this one yes this one no it's just you I think it's just you alright so how this has got to be easy right okay all right co2 challenge Oh some thank you Kraken you so you could use something like this to make a matching algorithm based off of user inputs interesting interesting sierpinski triangle that's a good one haven't I done that already though YouTube chat bot no no alright do this what kind of shape is at seven segments one two three four five six seven eight why is it why is it encoded I thought there was something about there being eight possibilities like a zero you could have a zero or one you have seven bits for seven segments why is there eight is anybody watch this video I don't feel like watching it right now it's too long I won't have time to do the challenge i watch the whole video I guess I could watch it on a double speed Oh decimal point that's why it's eight okay coding challenge I watched this video from Tom Scott the other day which was something about seven seconds displays and what's the longest word you can write with seven segment displays and there's actually some code for how to do this at the end and I thought yeah let's make this in the P 5 web editor boy I'm not ready for this login its coding train so the first thing that I need to do I think is I need to actually make a 7 segment display this is gonna be super awkward because I'm gonna do this in a terrible way but it's the only way that I could think of to do it right now and I've only got 30 minutes before I have to go but now if you look at the how long this video is even though I don't know how long it's gonna be I expected me at least 471 commits because this is gonna run into a lot of problems but let's write a function let's call it 7 segments and let's call that function with like some sort of like XY offset and so I'm gonna say push I'm gonna say pop and now I'm going to draw like so what's one of those one of those segments is one of those segments looks I guess each segment looks kind of like this right it's like sort of like a rectangle with two triangles on the end and then there's like another one here here here here here here 1 2 3 4 5 6 7 and then there's 1/8 there's a decimal point option so I'm just gonna I'm gonna be lazy and just make these rectangles right now and then we would get if I have time I'll make it nicer you'll make a much nicer version of it so let's make let's make these rectangles so let's add a so first let me say translate to that x + y and then I'm going to say let's draw it from mooners let's draw it from the top down it's a little bit weird below just consider the top center I'm just a wreck mode Center I'm going to say rekt pecs why and 100 comma 10 let's do this and I'm gonna say fill zero oh let's not put the background here let's okay let's put this I forgot what I was doing in here oh no we're gonna go 200 200 what's going on why is it down there can't miss is 400 you're there you should be here what's going on only rectangles so disappointed hold on can I start this challenge over wait what did I do here Oh cuz I put the X I'm the worst of the worst I'm hoarse I want to start this challenge over cuz now I know what I'm doing okay I got 30 minutes here we go I mean how hard could it be to make this nicerlooking this thing would have a good idea for me okay wait hold on I'm gonna I'm gonna cycle the camera let's let me give give me one mulligan on this because I preferred this not to have any edits and where's my eraser and there's gonna be fun this is so totally random I'm gonna do it anyway hello welcome to a coding challenge in this coding challenge I'm gonna attempt to make a seven segment display and then I'm going to write the longest word you can write with a seven segment display now this is clearly based off of this Tom Scott video I watched the other day that's kind of interesting take a little bit of code in it it talks about the history of 7segment displays and what they can and cannot display watch that video if you like I'm gonna attempt to remake it in the P 5 editor within about 30 minutes cuz I got somewhere to be and let's see how this goes I'm sure if you go and actually look how long this video is it's longer than 30 minutes I'm sure I'm gonna run into a lot of problems but here's a p5 sketch if you've never seen p5 before it's a JavaScript library you can create JavaScript animations and drawings and things right there and the browser also by using the p5 editor lots of more stuff about that and other places on my channel I'm sure okay so first I want to write a function called like seven segments and let's think about this so a 7 segment display has seven segments and each one is kind of like I'll shape like this you know a little rectangle with two triangles I might just do this as a rectangle to start so there's one two three four five six seven and then an eighth option which is a dot so I need to brought write a function that can basically render all of these and either fill them in or not and fill the dot in or not so it was really ridiculous to kind of do this in JavaScript the canvas but why not it'll be fun I mean I'm having fun are you having fun so let's start by saying let me use translate so I'm going to add a push and pop so that everything that happens in this function is kind of selfcontained I'm going to allow give it an x and y and so the first thing I'm going to do is translate to this x and y and then hmm what if we have so many different ways to do this I don't know let's say rectangle 0 0 100 comma 10 fill 0 and then I'm going to call 7segment and let's just put this at like 100 comma 100 so there we go it's here's my 7 scalars one segment of my seven second segment display over there no it's probably should be like a little thicker than that and obviously I'd want to use variables for all these things but now if I add a second one I can say where would this go negative 50 comma 0 20 100 oh that's not the right place at all 20 okay let's move it over 25 yeah there it goes oh because I didn't use rec mode Center interesting yeah that's fine let's not use rec mode Center and let's push it down a tiny bit there we go well this is doing a horrible job let's do this and do it at 190 oops I mean 90 there we go oh it's 20 80 80 mmhmm maybe this should be 10 a little little day little space there no no not that this should be this should be 20 no no no 30 there we go perfect oh that's exactly how I always dreamed it would be oh this is wasting a lot of time yeah this is like so so this is like very cringe coating okay 100 120 120 Oh beautiful 130 140 there we go perfect oh my goodness look at those segments this is beautiful then now we just need this again but we need to just go down quite a bit further so like 170 170 and 240 270 280 and now let's draw this at like 10 and 10 and so now in theory that's what I want to do is say no stroke no stroke oh no no I wants a stroke zero a no fill so why why oh because and the fill is there so let me put this in here and let's so there we go this is now my horribly designed sevensecond just like I can't wait for people to redo this and actually make it the proper 7segment display design but let's see here's the thing now what I want to do is give it a number like all I need to do is give it a value and so I couldn't give it an array maybe I should give it an array like zero with that has zeros and ones but technically speaking I just if I want this to be somewhat pure and related to the original 7segment display the idea is that I just give it a number an 8bit number separate out all the bits and then apply the fills according to what those bits are let's try it so let's say how do I do this bit stuff in JavaScript bit masking maybe bit shifting I could do bit shifting or masking bit masking JavaScript let me explain what I mean by this oh boy okay so what I mean by bit masking for example is let's say I have some binary number that's 8 bits 1 2 3 4 5 6 7 8 what if I just want to know is this number a 0 or a 1 well I could do some kind of like an operation like what if I did an and operation with all one's right if I did an and operation with all ones well no no no no sorry and and operation with zeros everywhere except for the one bit that I'm looking at then all of these will end up being zeros and this will either be a 0 or a 1 so I could kind of test the value that way I could also shift all the bits so that this one always just ends up over here and then I could do something and then I could basically do an and operation with just one something like that right I'm leaving left shift or an bitwise operators oh it's a nice way to do it sorry I'm looking at this tutorial here I can use or ampersand so let's try all right so let's assume we get this value and I'm gonna I'm gonna say no loop here and what I want to do is let's say say I'm gonna say console actually let's just look in let's play around in the console for a second this is a nice way to figure out JavaScript code like if I say let's say I say the number 100 people are producing all sorts of stuff with the chat for me and I say shift by 1 does that make sense I get 50 it's like divided by 2 think about that that's crazy 100 in binary is there a nice look at this this is 100 in binary if I shift this over by 2 I have 0 0 1 0 0 0 1 what if I say 50 in binary look get that right yes yes but that's the same exact number but shifted over fascinating amazing so what I want to do is let's go back to here and I used to do this stuff all the time and no one ever has to do it anymore so it's hard to like figure out on the fly it really should plan this out in advance ok so let's say first shift first I don't want to shift at all so I just want to know what is the value of that last bit so if I do this I get a I get a 0 if I do this I get a 1 right so and and with a 1 will always give me the last value of the bit so I should be able to do this might be a I'm in some other code this code is irrelevant from a different tutorial what I can do is I can basically say Val so I want to say what is I'm gonna say let result basically I want to say let's do color mode color mode RGB one so I just want to get a 0 or a 1 so I am going to say fill the value shift no shift ampersand 1 so that's filling it it's a 0 so if I pass in one it's filling it a pass in a 2 its 0 3 a 4 so I shifted everything over 1 and then masked it now I could say for this one and I'm sure there's a nice way to do this in a loop shift that over then I could just do it by 2 by 3 by 4 and I probably don't have the order right so by 1 by 2 by 3 whoops by 3 by 4 by 5 by 6 there we go so now if I say pass it in 100 I get this 200 I get this so whatever that theoretically that value all I need to know is what number corresponds to which letter okay so this is good now we need some kind of dictionary to show me all the letters and how their what their corresponding number is or a big array boy how am I gonna do that does that even exist I don't have to Google this for a little bit and come back 7segment display dictionary or how about like specs specification No oh here we go 128 states I'm not using the convention but could I adjust mind to the convention easily right 0 1 2 you need to label your segments correctly but yes you should be able to get them I wasn't kidding when I started to go at 5 oh I forgot out the dot but the dots the easy part I'm just like staring at this as if that's gonna help oh I could have done it like this ah here we go alright I found what I was looking for you can just change the order easily yep alright ABCDEF alright I'm back I found exactly what I'm looking for which is the hexadecimal encoding for the displaying of the digits 0 through F this will help me right because there's 0 1 2 3 4 5 6 so on on on on on on is the number 0 which should be this this in hexadecimal could you just give me the non accessible version of this but I think I could probably just do this so if I go back to my code right and I'm gonna pass this in okay that clearly didn't work but you can see that this gates gives me 1 2 3 everything on but this one so I think the order is different so I'm my order is oh yeah my order is like so ridiculous it's top left right middle the bottom left bottom left bottom right box so I should really change the order of mine really cockamamie way of doing this so the next segment is the one that's on the right so let me write some comments here top top left top no that's not right yeah top right middle bottom left I think this is right I don't know if this is right bottom right whoops bottom right and then this one should be hopefully the bottom and now let's just make sure I'm right top oops yep left yep right yep middle no oops uhoh this goes here middle and bottom left okay I'm pretty confident the rest is right okay so the first one is the top so I think it's backwards actually hold on okay so all right so with zero if I go back to Wikipedia zero is on and on and on and on off so the middle is the last one okay you go back here so the middle should be the last one where is that one middle that should be the last bit and then middle is here oh no no no the middle is the first one because it's the only one that's different middle okay and then what is this I don't know what's next let's move them all down this is a boy I really messed this one up okay all right so that's a zero and by the way I should really design this but all right so let's see so let's see that right trial and error is your friend a 1 a 1 interesting oh yeah oh these are the two that these are the only two a one is just these two so this one's right this needs to switch a map of the letters to the segments look up the Wikipedia are they hold on we got to do this more methodically all right what I want what I want is not this right I want to know which one of these write clearly G this last one is the middle which for me is the first one and then like if I look at this the the middle is the last one then the second two are the the last see ah this is driving this is gonna drive me totally crazy I don't want the hexadecimal it's further up the page further yeah further up the page you don't see it though this oh this this is showing me all the bits this image look up the top of the wiki this is the order abcdefg oh but they were numbered how am I supposed to do that hey you know I'm back you didn't have to watch that the chat is full of rage apparently because right in front of my face abcdefg okay I just didn't recognize that because they're letters and I'm thinking about them as numbers okay so this the top it goes and actually this is similar to how I thought of it so if I go back to my code here it should be but I think I'm doing it backwards so I think the top rectangle is the last one well let's let's try it let's try it this way top so it should be oh yeah so it should be top is the first one is the top one which is this one then to the right is still is a is a tall one this is to the left oh I screwed this up let me go back to let me go back to like the actual so this is now I think I so hold on Matt's here I'm gonna we're gonna go back and edit again yeah all the comments are out of step that's why I'm going back top top left right it all bottomleft okay I think this is right now oh thank you nobody in the slack chat now chat cuz I can look at that thank you for posting that for me okay label them ABCD and not top bottom left ya think okay okay the chat is full of rage they're all telling me it's there it's there on the page it's there on the page I am blind and so focused on the numeric indices that I didn't realize that this is it right here ABCD efg it's that order and then of course there's also this last one here so I should go back to my comments my lovely comments and I should say a and then top left is F and top right is B the middle is G and the bottom left is e C and then what's letter do I have left D and now I can just put them in order ABCD efg hijk LMNOP qrs yes you're watching a person singing the alphabet song while coding it's very soothing okay so this is good now I just need to fix this vowel shift one shift to shift three shift four shift five shift six and then this should be good let's try putting in some things that we should get let's go back down to here and let's see what we get here oh if I I might have done it in Reverse which is fine I could just use this number if I did reverse let's find out okay so now let's put in here there we go No ah that didn't work it didn't work it's five o'clock I have to go comments on the lines themselves would be metre yeah let's hold on yeah oh yeah I'm missing the bit for the decimal point so let's add that this doesn't look right but let's at least add the bit for the decimal point decimal point and then shift seven and then I think this it's all going to become clear we draw an ellipse at like a hundred four hundred ten ten where's that ellipse four hundred two hundred trial and error is my friend there we go a little smaller beautiful a little bit up okay so now let's say shift from seven to one so I think actually this should be the first one is shift by seven well this actually work do I have to put these shift by seven six five four three two one and then this no shift hmm all right what did I do wrong oh so close so close the decimal is the first bit right so that should be right why is this yeah the middle maybe this must not be the order right this must not actually be the order I think this is telling me the order middle this is actually the order zero one two three four five six seven eight yeah this is the order to be honest it is the order is actually the middle thing is first or last in my case so that mess this misled me the ABCB the actual thing that's first is the is the is is G it goes G f GF a B well it's so confusing g g fa b f whoops whoops come back no come back cut paste and now shift by seven shift by six shift by five shift by four now shift by is this right three two one and then the and then zero okay so let's see here this is right the question is is this it keep going a be no then it is this one this one this one this one this one that's so then the order is a EDC decimal point I think EDC decimal point maybe as an EDC or CDE let's try II D okay so zero is right now let's try some other ones oh go tom I hope you've never watched this video let's try one so let's try one gfa be EDC decimal point the hora yeah no kidding of horizontal segments are too wide those pins on the led it isn't the order no f GF a B EDC DP but it wasn't the other order either it certainly was the first one was this one alright hold on I'm gonna trust the chat I should do this again GF a be EDC DP I remember G hold on let's do something fun let's do one for each segment let's do function no a a seven as is a I should really do this I should really do this in a loop and these should be objects and I could order them in any way that I want it was the other order the table is seven bit hex it may be one bit out the abcdefg you had before is perfect alright let's go back to it abcdefg so what so this is right why is it not showing me a zero what's wrong and now gfa be EDC is that correct G F a b e e d c decimal place and we've got half an hour past and now we've got whoops and now we've got 7 6 5 4 3 2 1 and decimal place ok that's a zero now let's try a 1 all right that's what I had before that was wrong oh that's just the link to what I'm doing you weren't actually giving me a correct answer okay hold on Matt's here we're gonna make a crate we're gonna go we're gonna go way back and edit people watching the version of this the final version of this will never know the horror when they will know the horror oops no no no all right and back to this so what you're telling me okay me I am semion yours you're shifting the for the for the dot also seven which you want to do zero I would think right dinga dinga ding but how would i I see so why is that wrong well so if I do eight in the middle I lost the YouTube chat you should honestly redo this later and use a loop or something no kidding the DP is seven started six so is this also correct like this the decimal place is really first or last right this is correct yes is this correct I kind of want just over from scratch yeah I think this is right I think I got it right not technically why not I have to go I'm gonna come back and do this again in like an hour I'm gonna start over well let's try one except I really should do it the other way around like yeah close enough that the issue you're telling me is that it's not right because the where is the decimal place like which bit is the decimal place okay the question is how can I make this into something that Mattia can follow so I'm gonna go back to I'm just gonna start over I just this I should just do this again right I don't know what to do I'm lost it's a matter if you put the decimal place bit on the left or right of the other bits I don't know that there's a standard for that right right I'm not gonna worry about the decimal place right now and it make people want to make it read all right I have the question is now I think I've gone too crazy that I'm just gonna do this again I had some practice I mean I might as well just start over right okay all right let's do it again I have to go but I'm not going to okay alright consider Opie all right here we go whoops No all right everybody here we go we're gonna make this happen oh right hello welcome to a coding challenge I'm very excited about this one and this is a second try by the way the first try it's been about got really like things went haywire they will go a wire again but I'm going to give myself about 30 minutes here late for have to be to try to create a seven segment display now I got this idea for watching this Tom Scott video about seven segment displays and Tom Scott talks a little bit about how they work and looks at like what kind of letters and numbers they can display and uses a regular expression to try to find the longest word you can write with seven segments displays so I mean this video I just want to make I just want to make a visualization of a seven segment display which is in javascript in the browser in canvas which is admittedly kind of a ridiculous thing to do but I feel like if I can make one then you the viewer can take what I've done and make a bigger display then you can display different words you could implement Tom Scott's code with the data files and actually visualize that there's so many possibilities all right so let's talk about the seven segments the seven segments of a seven segment display are like this one there's seven three four five six seven now of course there's they're like a nicer design but this sort of looks like this they're kind of tilted so I'm gonna make a very crude version of it probably just with rectangles and I'm not even gonna use an array you could do this in an objectoriented way to keep track of each one of these as an individual object then you get an array of object at each one these things there's a lot I'm gonna just do it in the crudest way possible so first let me try to draw this pattern and one thing that's gonna be important is I do this it's a good thing I'm on the second try cuz I really botched this the first time is if I go down here this order is super important ABCDE gee and decimal place and okay so I want to draw them in this order so let me go back to my code let me write a function called 7 7 segment and then I'm going to say at the beginning I'm gonna use push and pop to kind of convey the ideas this function I could make an object I kind of would like to make an object yeah whatever this function is going to draw all of the segments relative to some point so I could probably might make sense to draw it relative to here it might make sense of drought relative let's try drawing it relative to here right now so the first rectangle will be and I'm gonna this is very gonna be very hard coded I admittedly let's say it's going to be a rectangle and it's going to be let's let's go 10 pixels in 10 pixels down 100 pixels wide 10 pixels high and let's say fill 0 quick messaging me whoops fill 0 I know the chat is gonna be full of rage again it's just bound to happen oh I got to call the function I've really lost my sense of how to code call the function there it is let's make it a little fatter and let's put it 20 pixels in in 20 pixels down and let's actually put it 40 pixels in because the next one I want to do B I'm going to put at it should start at like a hundred and forty pixels 40 pixels down then it should be a 20 pixels wide 100 and I could have rotated it but basically I want to do that then I'm going to do the one on the left no no what's next then further down again so everything's the same each length is 100 plus there's a buffer of like 20 so I need to make this one 60 I think there we go and then what's next D and I should put some comments here right this is a this is B this is seen of course I could create an algorithm write a loop I'm gonna use translate rotate so many possibilities I'm not doing it that way there's seven I could do well seven adi is at the bottom d is actually really a but just a lot further down like 220 it's just guess there we go 260 up whoops no no no that's right now what's after D a b c d e yes he is actually like see he is very similar to C but with the X values of a right which is 40 and the Y value that's why is it huh what did I do here oh maybe this one is real hold on hold on everybody yeah that's right this one this one is a little bit off it's got to go oh it's gonna be oh ah actually if these have to be a little bit smaller I forgot about the Buffalo buffer so this is actually a little bit shorter like this there we go that's kind of right and then the first one also should be that most fun I've had coding it looked nice just like hard code rec it's like it's like that first it's like the first week of learning to program in p5 it's just like hard coding shapes I love it F which one's F F is up higher it's like B but over so let's start with B yeah start with B but move it to here there we go and then this is f then G is the middle whoo this is exciting G is most is like a it's like a but it's halfway down so like 140 yeah look at that my seven segment display part one of this now I'm just keep going okay so here we go good excellent okay now what I want to do is I'm gonna say stroke zero and I'm gonna say no fill okay whew I don't like how that looks a little more can I get a like a what if I just do like all of these like a little bit less like 78 18 whoo I'm starting to like this 18 oh come on just bear with me you don't mind me doing this just go make yourself a cup of tea I'll be done in a second there's sometimes just like hard coding stuff it's just like the loveliest nicest thing to do I don't keep the chat is full of rage the chat needs to relax take a deep breath fine this is soothing okay okay oh I like it it's weird but I like it okay so this is like nonsense what I've done you are gonna make your own be much nicer version of this with little triangles and all sorts of stuff like that I really botched it here but what I'm gonna do now is I need to figure out a way to turn each one of these on or off I don't know where this pink marker come came from but I love you pink marker so how am I going to do that so the idea of a 7segment display is that each one of these is a scientist by the way a decimal point here which is why they're eight is assigned a bit in an 8bit number so you could think of an array of zeros and ones that has eight in it 0 0 2 3 4 5 so that's 9 right where I would go 0 0 1 0 0 1 0 and then the decimal place I think sometimes the decimal places may be the first or the last bit I'm not entirely sure trying to look up the documentation for this so something that I could do those instead of having an array what if I had any generic number 256 so I can use something called bit shifting or bit masking so I can do a bitwise operation oh this is I'm so happy to do a bitwise operation you very rarely in programming anymore especially JavaScript actually shift the bits right that's usually you're doing in a matter of like glory level place so let's say I have this actually as a binary number and what I want to do is I want to figure out which one of the if this particular digit let's say is on or off well if I do it at what's called an and operation with one right answer but the wrong number of things here but you know whatever if I do an and operation with one all of these will always end up zero and then if a one is here if a one sorry if a one is here I will get a one if a zero is here 0 and a 1 is a zero so I can if I can shift the bits over and then and with one I just have to not shift to check this one shift by one shift by two shift by three shift by four shift by five supposed to throw etc so and in order to do this in JavaScript this is shift the bits to the right shift the bits to the left and then this is and I think also to an or if I wanted to do an or operation so in other words if I say for now here's the thing I've kind of gone I went around in circles so this one's trying this earlier I want I need to do something to test so in other words if I look down here this is you can see this is if the encoding is ABCD efg I don't know which one I'm doing G right then that's 7 1 2 3 4 5 6 7 then on on on on on on on off so to get a 0 presumably I pass this in and what I'm gonna do and thank you to be I am sue me for making this suggestion I'm gonna pass in a value and what I'm gonna do first is just shift it by 1 because I got to get rid of the thing for the decimal place so I'm actually just going to shift it by one before I come in here and I didn't actually do the decimal place I'll let you do the decimal place maybe your version so now what I'm gonna do is I'm gonna say fill valve I 6 or 7 or 1 I don't know now I'm lost I need to shift these all I think I think the first I think if it's ABCD efg yep I want to shift by six yes and then ampersand it bitwise with one right this is what I'm talking about and then I also probably now this is no good I want to do color mode I also need to do color mode RGB one so in other words what I want is to get a zero a zero means black and a one means white so this now if I shift shift by five shift by four shift by three I totally did this wrong I've done it wrong again but let's just get this out of here shift by two shift by one and shift by zero oh so close that doesn't look right what did I do don't maybe I need to shift the other way here hold on let's do this there we go yeah I don't know why I got confused so this is actually right I don't know I was thinking I had to shift the bit out of the place but actually I just start with six here right if I shift the bit out of the place oh sorry out of the way then I need to start with seven here I think that didn't work anyway I had it right good enough okay that's a zero tip of the fact that I kind of want it up highlighted to be I kind of want it to be inverted so I actually should say let me write a function get color and the value and the amount of shift and what I'm going to do is return so I'm going to say oh the red value people I think warming in the chat they're saying I want me to make it red the red value is the value with the amount of shifting and ampersand one and let's forget about this color thing and let's actually say a Matt let's let's do this multiply this by 255 and say G be it actually this is silly these can just be zero I'm only doing the red value and then I'm gonna say fill get color get color and shift by six with that value a return color RGB and here we go alright this is very exciting I'm just gonna sit here and copypaste this calmly smoothly little by little four and by the way if you were wondering why I'm not using a loop here it's only because I want to drive you crazy and I've lost my semicolons a four three six five four three two one zero all right so what's going on 250 times as value shift oh boy this has to be in parentheses there we go oh but it's backwards so 255 minus R minus R no no no that was right actually it was right and then it shouldn't be zero it should be actually I should really let the alpha be this and then if the Alpha is zero here we go zero okay so now look at this let's say let no equal so now if I go here and I say this is zero zero oops no go away zero lots of copypasting you can speed this up somebody one two three four five five six yes you're watching a person copy paste these hexadecimal things one at a time six seven can we put some like music or some animation and postproduction here speed this up I don't know anything creative to make this look like a good watch seven eight I don't know ten nine I lost count nine okay now set numbs index index let index equals zero and then I'm gonna say frame rate one index plus plus zero one two three four five six and error okay so now we can say index plus plus index equals index plus one modulus nut noms length and I'm gonna make the frame rate five and I'm gonna zoom in on this and here we go oh that's way too fast for me I can't handle it let's put on some music and thank you very much there's your 7segment display counting through the hexadecimal values for 0th row so now here's the thing I've got an exercise for you could you make a clock out of this could you make a big make this objectoriented refine the code make the design actually look like a nice seven segment display being about colored make a rainbow seven segment display so many possibilities and also go back to this video and if I scan here towards the end this is the longest word apparently that you can display on a 7 segment display so follow Tom's code it's a node but there's no reason why instead of using like refile sync you can just use load strings in p5 get that same database and you can add this code in and do something fun with it share with me I mean share it with Tom Tom Scott this is not endorsed by just did this on my own but I think it could be some fun possibilities of things you can make during the p5 web editor share it on the coding train comm website seven segment displays somewhere share it with me on Twitter at Schiffman or all those kind of other places Mastodon whatever your true dot space and I'll see you in a future that was painful to white right watch what joke you should have x20 this is going far better than before all right everybody I hope you enjoyed that there I just made my guest video for Tom Scott's channel a Matt chick we edit this by October 15th and I'll just submit it I've got to go I am half an hour late for this meeting I was gonna go too but I stayed here because I love you the viewers of the coding train and I'm gonna save this now I'm so incidentally you can get going with the code right now someone could paste this into the YouTube chat and I will be back in a future coding challenge I'm gonna continue the word to vex stuff next Friday that's probably the plan so that's my tentative plan is continue word to Veck with and I'm gonna use ml 5 and use the Jensen Python package and do more stuff with that ok thanks for watching everybody today and add a round border to your rectangle that's what I should have done anyway I don't gonna change this stuff now you're all much better than me and I'll see you there ok Oh Nathan growl you're super chat come on unnoticed okay hold on no that's send a super time where do I find them it doesn't there's no way if it goes by without me seeing it oh wait wait a solar liner is that you Nathan growl who wouldn't have to you have the rainbows in it that's amazing thank you solar liner rainbow super chat made me so happy dark background oh yeah hold on or how about I think actually it looks best with this and then alright I'm gonna do the quick quick let me what are some other like small refinements and maybe I'll just do a quick intro the rounded rectangle ooh I like this there we go this looks better right okay okay I know I know I'm just trying to think of like what's 20 25 would be better what okay how interesting there that's even better okay well maybe Austin okay okay what you are about to watch is a coding challenge in a moment I'm going to say hello welcome to the coding challenge I apologize of the zapping twice but I just wanted to show you what it is at the at the beginning and because I also made some refinements thanks to things that people in the chat suggested after I finished the coding challenge so what I am tempted to make here is ace what's called a seven segment display this is based off a Tom Scott video that I'll reference in a second and you can see here here is the final result and the things that I've added after the coding challenge finish we're a little bit of nicer colors and rounded rectangles so it's a little bit nicer so I hope you make something fun with this and enjoy this coding challenge where I do this in kind of a way that's gonna make you want to complain about my coding abilities but that's fine complain away I'm here for it in the comments at me all that stuff enjoy and then one other option might be alright I know that coding I know that coding challenge seems like it just ended but I people in the chat had some additional suggestions that I was tinkering so I want to just show you these quick suggestions which are for example I added rounded rectangles which you could see makes it look kind of nice and then also what I did is I said of a stroke I gave the off segments like a little bit of alpha so it's almost as if they're appearing it feels more like an actual lit seven segment display but I think you are gonna be even more creative in what you end up making with this so I just wanted to show you those little quick defense goodbye so I will I will let Mathieu figure out whether it makes sense to have an extra intro or an extra thing at the end or neither and then I have to do one III really is going to shut this off and record these but I think what I'm going to do is just do it with you guys watching so where's a good spot here but I'm gonna go ahead and get through trying to find a nice thumbnail or something II spot to pause no this is good I'm standing in front of Nabil this is actually it's weird that he's like frozen here alright never mind I'll just start with his outline this is better like it's there okay okay oh and I haven't been recording any of this to disk oh it's fine we can take it down from YouTube hello welcome to another okay hello welcome to a tutorial about long short term memory networks neural networks machine learning with a guest Nabil Husein so what you're about to watch is an edited version of a live stream that happened a couple weeks ago with Nabil Husein who is a brooklynbased artist and educator a little bit a lot more information about Nabil in this video's description that you can check out Nabil is going to show you how to train a neural network to learn about let me let me do this again I forgot what I was doing here and I have to mention spell dot run okay hello welcome to a video tutorial this video tutorial is part of the spell series so this is sponsored by spell thanks very much go to spell dot run slash coding trained to sign up for an account before you fall along with this tutorial if you want and ok so what are you about to watch this is an edited version of a live stream that happened a couple weeks ago with guest Nabil Husein Nabil has seen is a brooklynbased artist and educator he has lots of super wonderful interesting work and things that they've done that you can learn more about on his website which will be linked to in this video's description I'm just going to show you here is how to take a corpus of text and train a machine learning system this machine learning system will use something called an LS TM it's a neural network architecture that deals really well that's really good for sequences like sequences of words or characters or musical notes so he's going to train an LC I'm a model off off a corpus of text he's going to train that in the cloud using the spell platform in tensorflow then he's going to download the Train model and use it in javascript in the browser with ml5 to generate new text in the style of the original corpus on which it was trained so that's what you're gonna watch from end and beginning to end a full tutorial it's going to use you're gonna want to have a Python environment set up know a little bit about spell and Knoll and also have like a code editor so you can write some JavaScript and code with HTML so notifications go away notifications um so hope you enjoy this video maybe Matt you just do a little edit there since this is just be professional so before you begin you're gonna want to so before you begin if you've never watched any of my videos before you might want to take a look at the workflow videos because you're gonna need a code editor and a Python environment I have videos about how to set that stuff up as well as probably look at just my intro to spell video to understand how the cloud computing platform works button to be able to show you all that stuff stepbystep through this video as well so hope you enjoy it please if you make something if you make your own a train your own model make your own project with this share it with me at Schiffman on twitter share in the comments here I would love to hear about it ok enjoy it and thank you so much Nabil and thank you so much spelled out run alright that's done that's done what about an outro I don't think I need an outro maybe I need one just in case yeah let's see let's go to the end of this video alright is it alright thank you so much Nabil thank you to spell I hope you enjoyed this video and again if you make something if you if you train the model and make your own project please share it with me in the comments below I'd love to hear about it ok enjoy it I'll see you in a future coding train video ok so that's fine so I think that'll have to be good enough always good to do these things at the end and now I'm really gonna go save ok goodbye everybody see you next Friday I don't know the exact time yet but I will post it hopefully by Wednesday or Thursday subscribe quickly alarm bell you'll get a notification all that sort of stuff and I will see you more videos to come there's so many things in the backlog of being edited and uploaded so hopefully you'll catch those and leave a comment and all that sort of stuff thank you there were too many people talking in the background really look it was loud all right one more time just in case I'm basically just missing this meeting anyway at this point which is fine I'm not I'm not I'm not crucial to it I just wanted to go to it okay it was fine someone in that in the slack channel could you let me know if I really need to do that again of course they'll just take me two seconds you all right I could always redo it on Monday anyway I'm gonna just do it one more time just in case cuz it's literally gonna take me less than a minute and Matt's yeah and I'm also gonna record I didn't wasn't recording to disk so let me do that too it's fine sorry wait go do something else now I'm I'm streaming this bubsley is like a backup hello welcome to a video tutorial that's what happens on this channel I guess um so this is this is sponsored by spell thank you so much to spell for the sponsorship what you're about to watch is an edited version of a livestream that happened a couple weeks ago with a guest educator and artist fork Linnaeus educator artist Nabil Hussain I recommend that you check out his website linked in this video's description to learn more about his background and his current work and all sorts of wonderful stuff that he is up to so what you're gonna see from beginning to end in this video is the process for taking a corpus of text training a machine learning model this particular model is called LST and long shirt shortterm memory neural network maybe we'll explain that a bit more in the video and offer you some resources to learn about it train a model to learn about that text train it in the cloud on spell you can go to spell dot run slash coding train if you want to sign up for that service and follow along with the tutorial and then download the train model then bring that train model into the browser in the JavaScript generate new text in the style of the original text that the model is trained on so you're gonna see the full process for this tutorial probably if you've never watched any of my videos before you're new to coding you might want to watch some of my workflow videos that show you how to like set up your environment you're gonna need maybe a you're gonna need a Python environment you're going to need it a code editor and know how to run a web page in your browser that you're developing locally on your computer but I have videos that show all that stuff I also a video that introduces the spell platform and give you some background about how that works alright so I hope you enjoyed this video if you make something with this please share it with me I would love to see what kind of crazy and interesting and wacky and original and fun and playful projects you are inspired to make by learning how to do this thank you again to the Biel for being here to have to make this tutorial and for spell for the sponsorship okay byebye okay the only noises was off yeah it's ro who's on the outro well I made an extra one just in case alright thank you so much to be all for this wonderful tutorial again thank you to spell for the sponsorship if you make something with this please share it with me I would really love to know about it and I'll see you in a future tutorial many more machine learning ml five Python EE tensorflow EE things to come I hope goodbye alright alright so anyway alright now I am really really going thank you for being here today I don't know why vows having this like week of just feeling like oh what am i doing I don't know it I know my brain doesn't work anymore none of my tutorials makes sense anymore what am i doing I know effect just felt like that all week and I feel a little bit reenergized I like doing this on Friday too because I feel like work week is over I'm gonna go home good have a beer relax and spend time with family this weekend and catch up on a lot of work on Monday so I hope you also have a good weekend get to spend time with friends family whoever internet friends reallife friends all those types of things and I'm gonna go check out the end of this meeting send me your feedback makes a mastadon box take a break from code for a while and all that stuff okay here we go goodbye
