With timestamps:

00:00 - welcome aboard the train of coding stuff
00:04 - uh here's another coding challenge what
00:05 - I'm going to do in this coding challenge
00:07 - is show you how to place points your own
00:10 - geometry your own designs along the
00:12 - paths of letters um in JavaScript using
00:14 - the p5js library with the P5 font object
00:18 - and then I'm also going to apply
00:19 - something called a steering Behavior Uh
00:21 - from Craig Reynolds there'll be a lot of
00:22 - more information in this video's
00:23 - description and I'm going to use
00:25 - steering behaviors for these objects to
00:27 - find their way to a Target as well as
00:29 - flee Mouse so you can see the sort of
00:31 - inkling of a creative possibility here
00:33 - of what you could make with it and I'm
00:35 - sure you could come up with more
00:37 - creative designs reasons for using text
00:39 - uh other ways of interacting with other
00:41 - types of sensors and physicality and so
00:44 - um enjoy and enjoy this uh coding
00:47 - Challenge and I look forward to hearing
00:48 - from you in the comments okay I'm going
00:50 - to get started with this coding
00:51 - challenge the first step that I want to
00:54 - do is draw dots where there is text if
00:59 - that makes sense so let me let me let me
01:01 - let me explain a bit more about what I
01:03 - mean here so first thing I want to do is
01:04 - I want to make a variable called font
01:07 - and I'm going to just use
01:08 - preload because I need to I want to I
01:11 - need to specify a specific font here I'm
01:12 - going to say font equals load font and I
01:14 - have already put in the directory for um
01:18 - for this project I have already put a um
01:21 - hold on a font
01:24 - file show and finder um so there's the
01:27 - font file so I need this font file's
01:29 - name so so I'm going to copy it and then
01:31 - I'm going to go back here and I'm going
01:33 - to put that in here so now I've loaded
01:34 - that font I'm going to say create
01:38 - canvas uh 800 by 300 something arbitrary
01:43 - I'm going to say a text font font then
01:47 - I'm just going to say text uh rainbow is
01:50 - that too long I kind of want to use a
01:51 - short word because I don't want to have
01:52 - too many
01:53 - dots I like rainbow I think I might use
01:57 - train a little bit shorter train bow so
01:59 - to
02:00 - speak TM train train bow um so text
02:04 - train and I'm just going to say 10 uh
02:08 - 200 and I'm going to make a text size so
02:12 - these are some functions that are part
02:13 - of the p5js library that allow me to
02:15 - draw text to the screen and I'm gonna
02:16 - say
02:17 - 128 and then I think if I say uh Phil
02:22 - 255 and no stroke that'll color the text
02:25 - white and if I say background uh my
02:29 - favorite background color 51 that'll
02:30 - make the background 51 okay here we
02:33 - go there see look now I have the word
02:35 - train right there so I'm going to move
02:37 - it over a little
02:38 - bit uh I don't need probably don't need
02:41 - that big of a space 600 by 300 is good
02:44 - and let's move it over you know I could
02:46 - align it with the center and all that
02:48 - but I I'm not so worried I just want to
02:50 - get the basic idea here oops so let me
02:53 - refresh that I didn't move it and there
02:56 - there's my sketch and I'm just going to
02:57 - like move it over a little bit more
03:01 - okay there we go this does this part
03:02 - doesn't really matter so I now have a P5
03:05 - sketch where I've drawn letters to the
03:07 - canvas and I want to make it a little
03:09 - bit bigger I know I'm being like crazy
03:11 - here but I'm going to just say uh 192 I
03:14 - don't
03:15 - know refresh there we go ah now now this
03:18 - looks right so I now got these big
03:19 - letters here now what I want to do is
03:21 - instead of drawing them as actual text I
03:24 - want to get all of the points of the
03:27 - letters so from here there's lots of
03:29 - created creative possibilities and fonts
03:32 - in P5 are loaded into an object called
03:34 - P5 font and here you'll see what are
03:37 - some functions available there's on the
03:39 - reference page there's text bounds so
03:41 - there are actually some other functions
03:43 - that are available for P5 font that are
03:46 - um not uh in that you won't see them in
03:48 - the reference but if you dig through the
03:50 - source code and look at some of the
03:51 - examples you'll find and I guess it's an
03:53 - open question maybe should file an issue
03:55 - and discuss whether some of these
03:56 - functions should actually be in the
03:57 - reference and maybe it's just a matter
03:58 - of putting in the word and volunteering
04:00 - some time to write reference pages and
04:01 - expand this but a really useful function
04:04 - and a lot of this work was done by uh
04:06 - Daniel how I should credit uh him for a
04:08 - lot of this work is to say I'm going to
04:11 - say VAR points equals font text to
04:16 - points believe the function is called
04:18 - text to points and now I can take
04:20 - exactly
04:21 - this so I'm going to put that in there
04:23 - and what that should give me I believe
04:26 - let's just console log
04:28 - it so we can see if this works let's
04:31 - just see what does this function give
04:33 - us so I'm going to go back here we can
04:36 - say look it's a big array with all these
04:38 - objects and what's in each of these
04:41 - objects an alpha and an X and A Y well I
04:44 - didn't even know it had an alpha in
04:45 - there an alpha and an X and A Y so I'm
04:47 - just going to make use of the X and the
04:49 - Y so what I'm going to do
04:52 - now I'm really soon I'm going to use a
04:55 - four each Loop in one of my videos
04:56 - everybody wants me to but I just like
04:58 - I'm like old fashioned and not very good
05:00 - at programming so just just I'm I'm just
05:03 - using my for Loop just for today please
05:05 - let me do it just for today get to that
05:07 - 4in Loop soon okay so I'm going to say
05:09 - um a point equals points index I and I'm
05:13 - just going to uh just make something
05:15 - that's uh green so I see it as a
05:17 - different color uh stroke weight four
05:20 - and I'm going to draw a point at Point
05:22 - dot ooh this is bad look what I just did
05:25 - so this is really dangerous in
05:27 - JavaScript so I was like I'll just make
05:29 - a iable called point because I'm going
05:31 - to store something called a point
05:34 - but I have uh a function in P5 that's
05:38 - called point that draws a point so I
05:40 - can't make up a variable with the same
05:42 - name as something that I'm using from a
05:43 - library in the global names space which
05:44 - is why things are typically in
05:46 - JavaScript libraries quote unquote names
05:48 - spaced meaning I would have to say p5o
05:50 - but also just makes things so
05:51 - inconvenient especially for beginners so
05:53 - here I'm just going to say PT for point
05:56 - and now I'm going to say PT dox PT doy y
06:00 - so let's see what I get
06:01 - now and we can see look at that look at
06:04 - all these nice green points these green
06:07 - circles that are tracing the Contour now
06:09 - this is amazing because I don't need to
06:12 - draw the text
06:14 - anymore right this whole thing was just
06:16 - to see that that worked and oh by the
06:19 - way oh interesting oh it just it kind of
06:21 - used 192 but I'm going to put 192 into
06:24 - this function the fourth argument I
06:26 - think is the font size because what I'm
06:27 - going to do right now is I'm going to
06:29 - completely take this out the whole point
06:31 - of this was I don't need to draw the
06:33 - text and then I'm going to make these uh
06:36 - White and make them a little bit bigger
06:40 - and we can see there is now the word
06:43 - train with lots of little dots so what's
06:46 - exciting about this is I have now drawn
06:50 - with my own algorithm the locations of
06:52 - all of these vertices in a piece of text
06:56 - and so from here your you know
06:58 - imagination can go wild I can make them
07:00 - rainbow colors I can make them you know
07:02 - move and follow the paths I can have
07:05 - them explode and come back and Shimmer
07:07 - and change to Stars and Hearts or
07:09 - whatever you want to do like I could
07:11 - make the word love and just fill it with
07:13 - hearts right you could do that and that
07:15 - would be nice so there's a lot of
07:17 - possibilities here but what I'm going to
07:19 - do next is turn these dots into
07:22 - particles that can move around this
07:24 - screen and what I'm going to do is maybe
07:27 - um start them in a random location and
07:29 - then have them find their spot and to do
07:32 - this I'm going to employ an algorithm
07:34 - known as steering now I have a whole set
07:37 - of tutorials that I'll link to this it's
07:38 - chapter six from nature of code book
07:41 - about autonomous agents and brenberg
07:43 - vehicles and there's all this like
07:44 - inspiration and background but what I'm
07:46 - going to do is model off of Craig
07:48 - Reynolds steering behaviors it's a a
07:50 - well-known paper from 1999 steering
07:52 - behaviors for autonomous characters
07:54 - something like that and I'll link to
07:55 - that paper that you can read in this
07:57 - video's description but what I'm going
07:59 - to do is just move over to the
08:00 - Whiteboard and just talk you through
08:02 - what the basic idea of steering
08:05 - is if I have a
08:07 - particle and it has a current velocity
08:10 - it's a particle it's actually I'm going
08:11 - to call it vehicle because vehicle is a
08:13 - term from a a famous book called
08:16 - Vehicles famous book it's a famous book
08:19 - it's a book that I like uh by Valentino
08:21 - brenberg an Italian
08:23 - neuroscientist uh Valentino brenberg and
08:26 - actually this would be great to have a
08:27 - whole set of coding challenges that are
08:28 - to implement brenberg vehicles I got to
08:30 - get to that sometime but imagine these
08:33 - almost science fiction like robots that
08:35 - had sensors and desires and experienced
08:37 - fear or love and steered around an
08:40 - environment based on those emotions and
08:42 - simple rules so that's where that's sort
08:45 - of a background where a lot of these
08:46 - ideas come from but to turn it into some
08:48 - kind of math and code we if we have this
08:51 - idea of a vehicle maybe represented as a
08:53 - triangle and it has a current
08:55 - velocity that's its current velocity
08:58 - what if this vehicle had a desire it had
09:01 - a desire to do something like get some
09:03 - food or run away from a predator or just
09:05 - like wander around whatever its desire
09:07 - might be could we translate that desire
09:09 - into a vector so let's say its desire
09:12 - was to find uh you know a spot oh a
09:16 - Target we could translate we could we if
09:19 - we know it's current velocity and then
09:22 - we calculate a desired velocity move as
09:24 - fast as possible to the Target the
09:26 - steering Force as defined by Reynolds
09:30 - equals
09:32 - desired minus velocity so this is an
09:36 - autonomous agent it has this agent has
09:38 - some perception awareness of its
09:40 - environment it knows its current
09:42 - velocity so the steering the force
09:44 - applied to it to steer isn't directly
09:47 - the desired it's the error between what
09:49 - it desires to do and its current
09:51 - velocity and this is technique allows
09:53 - for a much more kind of lifelike and
09:55 - improvisational quality again to quote
09:57 - from Reynolds paper so um and you can
10:00 - imagine how powerful this is for example
10:02 - what if its Des what if its current
10:04 - velocity was equal to its desired
10:06 - velocity then its steering would be zero
10:08 - it doesn't need to turn speed up slow
10:10 - down any of those things what if its
10:12 - current
10:14 - velocity was faster than its desired
10:17 - velocity then the steering force would
10:19 - actually be a force pointing in the
10:21 - opposite direction trying to get it to
10:23 - slow down so the fact of using a force
10:25 - that's the error between what it
10:26 - currently wants to do and its actual
10:28 - current velocity this is a very powerful
10:31 - concept that's useful in animating
10:33 - motion of autonomous agents okay so now
10:35 - we understand this concept let's have
10:37 - these agents desire to seek their
10:40 - particular
10:41 - Target so here I am back over here with
10:44 - my
10:51 - train we should edit that part out
10:53 - probably but I don't know maybe we'll
10:54 - just get left in who knows okay back to
10:56 - my train
10:58 - uh
10:59 - okay now back to my train what am I
11:01 - doing here okay so oh we have a lot to
11:03 - do all of a sudden so one thing I need
11:04 - to do and it would be nice to maybe do
11:06 - some of these challenges not from
11:07 - scratch and just use like a base object
11:10 - that kind of moves around the screen but
11:11 - I'm just going to create a new file I'm
11:13 - going to call it vehicle. JS and I'm
11:16 - going to write a Constructor function to
11:18 - make vehicle
11:19 - objects and the vehicles they're going
11:22 - to need a
11:23 - position and that's going to be a vector
11:25 - again if you're interested you know a
11:27 - lot of this now I'm going to base off of
11:29 - you know sort of knowledge of basic
11:30 - physics engines and vectors which you
11:31 - can also find in kind of some of my
11:33 - other nature of code tutorials a
11:35 - position a velocity and an acceleration
11:38 - it's also going to need a
11:42 - Target and when I make the
11:46 - vehicle let's give it an X and A Y and
11:50 - position its Target there let's also
11:51 - just start it at that X and Y so it's
11:53 - got to have a starting position and a
11:56 - Target position okay so now that we have
11:59 - have
12:00 - that and you know what I'm going to do
12:02 - I'm going to attach the functions to the
12:04 - vehicle prototype as opposed to saying
12:06 - this dot because I'm intending to make a
12:08 - video tutorial about what prototype is
12:10 - and why this is a slightly well some
12:13 - would say not not so slight a majorly
12:16 - more better correct efficient nicer way
12:20 - of attaching functions to objects so I'm
12:23 - going to say a vehicle prototype update
12:25 - equals function and I'm doing this
12:27 - because it commits me to making that
12:28 - tutorial
12:29 - um and I'm going to say v.p. add this.
12:33 - velocity this. velocity. add this.
12:37 - acceleration so this is the basic
12:38 - physics idea of acceleration changing
12:40 - velocity velocity changing position then
12:43 - I also need to uh add a function which
12:47 - is like show or display to render
12:50 - it and let's give it a size this. R
12:53 - equals 8 for example and I am going to
12:57 - use whatever I just did right here to um
13:02 - we got a lot of this dots I'm sure I'm
13:03 - going to be forgetting stuff
13:05 - this.x and
13:07 - this.y so now I have some vehicles with
13:09 - some basic physics position velocity
13:12 - acceleration a Target and uh some
13:15 - updating of their whatever and then uh
13:18 - being able to draw them so now what I'm
13:19 - going to do is in sketch I'm going to
13:21 - say VAR Vehicles equals empty
13:26 - array and instead of drawing
13:29 - points in setup what I'm going to do is
13:32 - I'm going to say VAR vehicle equals a
13:35 - new vehicle at point dox point
13:38 - doy okay so now uh and then I'm got to
13:41 - put that into the array so vehicles.
13:45 - push
13:46 - vehicle so I'm I'm making a vehicle
13:50 - every spot in that uh in the points path
13:53 - of the font thingy okay so now these
13:56 - should be trains really I mean come on
13:58 - right
13:59 - choo choo okay so now in draw we'll set
14:04 - the background the draw is an animation
14:07 - Loop that's part of the P5 library and I
14:09 - again I could use a four each Loop but
14:11 - I'm just going to Loop through all of
14:13 - the
14:14 - vehicles and I'm G to say VAR I'm just
14:17 - gonna say V just to make things sort of
14:19 - shorter for right now I'm going to say
14:21 - v. update and v. show so when I run this
14:25 - this should look exactly the
14:27 - same the first version I just drew a DOT
14:29 - at all the spots now I'm actually making
14:31 - an object that has some Physics built
14:32 - into it and then showing it but it
14:34 - shouldn't move yet because there's
14:35 - there's no velocity there's no forces so
14:37 - if I hit refresh ah okay so I've got
14:39 - some errors here um sketch. oh I forgot
14:44 - to
14:46 - reference uh my uh new vehicle. Js file
14:50 - in index.html so I need to do that
14:53 - always forget that I need a song for
14:54 - like it's not as catchy as this
14:57 - dot reference the the new Javascript
14:59 - file in index. HTML no does that be
15:03 - turned into a song probably not okay um
15:06 - so once I do that let's see what I've
15:07 - got here good and I'm going to get rid
15:09 - of that console log that's kind of like
15:12 - filling up my console I don't really
15:15 - need to see that move this over here a
15:17 - little bit uh clear okay great so now
15:20 - this is working we've got those dots
15:21 - their vehicles now just to prove that
15:23 - this is doing
15:24 - something let's go into vehicles and
15:27 - just say I don't know give them
15:30 - P5 vector. random 2D so I'm going to
15:33 - just give each one a random
15:35 - velocity so you can see instantly
15:37 - they're all moving um now how could I
15:40 - have them get back to where they're
15:42 - meant to be so what I want to do is
15:47 - implement this algorithm now each
15:50 - particle each vehicle should calculate a
15:53 - vector pointing from itself to the
15:54 - Target it should scale it according to a
15:57 - maximum speed it desires to go at
15:59 - maximum speed and then it should
16:01 - calculate a steering Force desired minus
16:03 - velocity which it will apply to its
16:05 - acceleration okay so let's do that so
16:08 - now I'm going to come back over here and
16:11 - I'm going to write a
16:13 - function uh prototype do uh
16:20 - behaviors equals function the reason why
16:22 - I'm I'm kind of anticipating that I
16:24 - might have multiple multiple behaviors
16:27 - that play so I could just only write a
16:29 - seek behavior and then I only need one
16:30 - function I need a function to sort of
16:32 - accumulate a bunch of different
16:33 - behaviors so what I want to do is I want
16:35 - to say VAR seek equals um this. seek uh
16:43 - this.target and then I want to say this.
16:46 - apply Force seek right so what I want to
16:50 - do is actually so apply force is not a
16:53 - function that just magically exists I
16:55 - need to actually write that function so
16:56 - each vehicle should also have a
16:59 - function uh apply
17:02 - Force which receives an
17:06 - argument and then it takes uh this do
17:11 - acceleration do add that Force so the
17:14 - idea if they're going to be multiple
17:15 - forces at play we can add them all into
17:18 - the acceleration and if I'm doing that
17:20 - the acceleration which accumulates all
17:22 - the forces every single frame of
17:24 - Animation needs to start from zero so
17:26 - one thing I can do is after at the end
17:27 - of update I can say this. acceleration
17:30 - multiply by zero so that's going to
17:32 - clear the acceleration so now I have uh
17:35 - and of course if I run this now I'm
17:36 - missing the seek function the seek
17:38 - function I need to actually finally
17:40 - write something with this particular
17:41 - algorithm in it this is me getting my
17:44 - steps in on my Fitbit oh no Buzz
17:46 - Marketing of products on this channel
17:47 - unless they're sponsoring me I
17:49 - guess redacted product that I'm using
17:53 - Okay um so uh so now I need to write
17:57 - that seek function um um
18:00 - vehicle.
18:02 - prototype. seek and interestingly enough
18:06 - um I I gave it an argument called yeah
18:09 - it's good to have it have a generic
18:10 - argument it could seek any Target so how
18:12 - do I get a vector that points
18:15 - from the object location to the thing
18:18 - it's seeking okay so the way that I do
18:20 - that is I say uh I'm going to call this
18:23 - the desired Vector the desired velocity
18:25 - desired equals P5 do Vector subtract
18:28 - Target minus this dot
18:30 - position so and I I'm I kind of some of
18:33 - these lines of code are getting kind of
18:34 - long so this is the way you get a vector
18:35 - that points from position to Target you
18:38 - subtract the two vectors now what should
18:41 - the magnitude of that be well what I'm
18:42 - going to do is I'm going to actually
18:45 - create a new variables P this vehicle
18:46 - and I'm going to call it max speed and
18:48 - I'm going to set it to five so the idea
18:50 - here is its desired velocity is always
18:53 - its maximum speed is is to is at its
18:56 - maximum speed so what I'm going to do
18:58 - there so I'm going to say then desired
19:00 - do set mag uh this do maximum speed okay
19:05 - so now and then um I need the steering
19:08 - Force steer and what did we
19:13 - say steering equals desired minus
19:16 - velocity this should be easy steer
19:19 - equals P5 Vector do subtract desired
19:23 - minus this do velocity return steer the
19:27 - idea here is that I'm going to calculate
19:29 - that force and return it because when I
19:32 - get it up here I can then apply it so
19:34 - let's see how this goes we should be
19:38 - good well what did I forget I forgot to
19:41 - actually call apply
19:44 - behaviors so I'm GNA say v. apply or I
19:47 - just called it behaviors behaviors I
19:49 - could call it steering I don't know what
19:50 - would make sense to call it okay so now
19:53 - look what's happening it's seeking that
19:56 - spot and it's doing it it's very good at
19:58 - seeking it so it's like finding it
19:59 - moving back so I got this like sort of
20:01 - crazy like frenetic shaking thing so one
20:03 - thing I should do by the way is
20:04 - introduce another variable which would
20:07 - be very useful to control the behavior
20:08 - of these vehicles and this all again all
20:10 - comes from Reynold's paper maximum Force
20:13 - so how strong how good is it at steering
20:16 - like because right now I'm it's kind of
20:17 - like an idealized vehicle that can steer
20:19 - as well as it ever might need to be so
20:21 - I'm going to say like Point 0.3 is kind
20:23 - of a magnitude maximum and then when I
20:26 - calculate that steering Force I'm going
20:27 - to say Ste Ste limit um this do maximum
20:31 - Force so what you'll see here is that
20:34 - steering Force won't be as strong and
20:36 - you can see it's you know still doing
20:38 - the same thing where it seeks the Target
20:40 - and then it leaves but you know and but
20:43 - it's not as good so um you know one
20:45 - thing that we could see to kind of like
20:47 - try to have more of a sense of this well
20:49 - here's the thing this is doing us
20:51 - basically no good right now because what
20:53 - I really want to do to implement this
20:55 - particular idea is I don't want to
20:57 - implement a pure or a seek algorithm I
21:00 - want to implement an algorithm that's
21:01 - known from the paper as arrive and again
21:04 - everything boils down to desired
21:06 - velocity and what the arrive Behavior
21:09 - says is please go to the Target but not
21:12 - as fast as possible you want to go uh
21:14 - your speed your magnitude of your
21:16 - velocity is relative to how far away
21:19 - from the target you are meaning if I'm
21:22 - really far away I want to go really fast
21:24 - but if I'm really close I want to go
21:26 - really slow and what this will cause is
21:28 - if I'm here and I am going really fast
21:31 - my steering force will cause me to slow
21:32 - down and if I'm at the Target I want to
21:35 - be going my my desired velocity is zero
21:38 - the magnitude so this is going to
21:40 - instead of having the the object
21:42 - overshoot it actually slow down and
21:47 - stop okay
21:49 - so here I come back over here and I'm
21:52 - going to I'm going to I'm actually going
21:54 - to leave seek in there because it could
21:56 - be useful later I have an idea of what
21:58 - to use it for and I'm going to just add
22:01 - a function called arrive which is
22:03 - exactly the same argument exactly the
22:05 - same algorithm the difference is what is
22:07 - the desired magnitude so I'm going to
22:09 - say um
22:12 - if Desir so the distance so the distance
22:17 - is um the magnitude of this right the
22:21 - magnitude of that Vector is actually how
22:22 - far away it is because that's a vector
22:24 - that points all the way from the
22:25 - position to the
22:26 - Target if the distance is is less than
22:29 - I'm going to pick an arbitrary threshold
22:30 - less than 100
22:31 - pixels if the distance is less than 100
22:35 - then I want a magnitude magnitude I'm
22:39 - going to say speed to be map the
22:43 - distance which goes from 0 to 100 to
22:46 - what when the distance is zero I want
22:49 - the magnitude to be zero when the
22:52 - distance is 100 I want the magnitude to
22:54 - be maximum
22:57 - speed so uh
22:59 - else speed so I'm going to say oh I'm
23:02 - going to say VAR speed this I'm sure
23:04 - there's a more efficient way to write
23:05 - this equals uh this do maximum
23:09 - speed and then but if distance is less
23:12 - than 100 then actually set speed to be a
23:15 - different value based on how close it is
23:18 - and then set the magnitude to this new
23:20 - speed value I've calculated rather so
23:22 - here's the creative power you have now
23:24 - you can see I'm doing like a standard
23:26 - seek and a standard arrive but you might
23:28 - have a behavior that you imagine in your
23:30 - head what you need to do is think
23:32 - through some logic by which you can
23:34 - convert that behavior into a desired
23:36 - velocity and it can be much more complex
23:38 - than this you see just this little
23:40 - increment incremental change from seek
23:42 - to arrive now let's see if this actually
23:44 - works um I'm going to
23:47 - change uh up here to say uh arrive
23:52 - equals this. arrive the Target and then
23:55 - apply the arrive
23:57 - Behavior so you can see that this is now
24:00 - kind of working you know there's some
24:02 - little like goofiness of maybe there's a
24:03 - little bit noise of it sort of like
24:05 - jiggling but looks like they've all
24:06 - settled into a spot so let's see if this
24:07 - is really working the way to know if
24:10 - this is really working is I'm not going
24:11 - to start them at their target anymore
24:13 - I'm going to say random width random
24:18 - height and now we're going to see them
24:20 - all move into their
24:23 - spot that's pretty
24:25 - good Tada so on the one hand I could
24:28 - consider the this finished there's so
24:30 - many possibilities here here's something
24:31 - obviously that would be cool to try what
24:33 - if you have this then rearrange itself
24:35 - into new text I'm going to leave that as
24:37 - an exercise for somebody watching the
24:38 - tricky thing is you might have a
24:39 - different number of particles so you
24:41 - might need to split some or combine some
24:43 - to get more or few more more or less
24:45 - particles but let me just do one other
24:48 - thing to it what if I just to make this
24:50 - I mean there's a bunch of other things I
24:51 - kind of want to do this but just to give
24:53 - it something else what if I were to add
24:55 - a force um a steering Force where the
24:57 - particles themselves the vehicles are
24:59 - afraid of the mouse so what I want to do
25:03 - is in I'm actually going to change this
25:06 - seek function to uh flee I'm going to
25:10 - call it flee and what I'm going to do is
25:12 - I'm going to multiply I'm going to limit
25:14 - it to I'm going to um multiply the
25:16 - steering Force by negative one so the
25:20 - flea algorithm is my desire is to move
25:22 - in the opposite direction as fast as
25:24 - possible from the target rather than in
25:26 - the direction so I could just multiply
25:27 - the force in the opposite direction or
25:29 - you know I guess technically to do this
25:32 - in the quote unquote correct way I would
25:34 - uh I would
25:36 - multiply it by negative the desired
25:38 - vector by negative one so the I'm not
25:41 - changing the force uh this one I think
25:43 - is more accurately depicting the
25:44 - algorithm for flee by changing the
25:46 - desired Vector to point in the opposite
25:47 - direction now in apply
25:51 - behaviors I could say where is this um I
25:55 - could say a mouse equals create Vector
25:57 - now I don't need to create a vector for
25:59 - every object but you know uh I could
26:02 - have a global Vector that's the mouse's
26:04 - Global variable that's the mouse's
26:05 - location V Mouse equals create Vector
26:07 - Mouse X Mouse Y and now I'm going to say
26:11 - VAR flee equals this. flee
26:16 - Mouse and I am going to say this do
26:19 - apply Force
26:23 - flee so now if I run
26:26 - this you can see like if I just get the
26:28 - Mouse way
26:29 - out they're kind of like in the spot but
26:31 - like they're really just very you know
26:34 - they're never going to find they're way
26:35 - too afraid of the mouse so one thing
26:37 - that I probably should do is have this
26:40 - flea behavior only um come trigger if
26:45 - they're within a certain distance and
26:46 - maybe even the magnitude is you know
26:48 - they're based on that distance but I'm
26:50 - going to do something pretty simple here
26:52 - which is just uh there's probably you
26:54 - know I might want to leave this intact
26:56 - and not mess with this and do this part
26:57 - outside side of it but right here I'm
26:59 - just going to say um you know I can get
27:03 - that distance right here VD equals
27:05 - desired do mag and I'm just going to say
27:08 - if D is less than uh 50 and I should
27:11 - make that a variable too all these
27:13 - things I should make variables then uh
27:15 - return that steering Force
27:18 - otherwise otherwise just return create
27:21 - Vector 0 now again there's lots of
27:24 - inefficiencies like I don't need I could
27:25 - have a global variable that's the zero
27:26 - Vector I don't need to make create
27:28 - Vector all over the place but this will
27:29 - work and demonstrates the idea so I only
27:31 - want to have that effect trigger if
27:33 - whoops what did I miss vehicles uh
27:36 - uncaught sketch vehicle JS line 63 so I
27:39 - have an extra uh close bracket uh so
27:44 - here we go so you can see everything is
27:46 - coming into its spot and then now as I
27:49 - move here now I'm not really you can
27:50 - sort of see here as I move the mouse I'm
27:53 - kind of messing with these but very
27:55 - little so I kind of want this to behave
27:58 - in a bit more of a kind of radical way
28:01 - and so something I might more responsive
28:03 - way I guess radical I don't know I think
28:05 - I might want to give the maximum speed a
28:06 - bit more and actually I'm just going to
28:07 - like crank up the maximum Force the
28:10 - other thing I might want to
28:12 - do is write this in a slightly different
28:16 - way where I can now also weight these
28:20 - particular forces so what if I want
28:22 - arrive to just have a weight of one but
28:25 - flee to have a weight of five so I want
28:27 - that fleeing force to be much stronger
28:30 - than the arrival
28:32 - Force so now everything's in their spot
28:35 - and I move the mouse around you can see
28:37 - almost have this like spring-- like
28:38 - Behavior I feel like zooming in on this
28:40 - just so you can see it a bit and
28:41 - actually maybe it's better for me to uh
28:44 - whoops do this just to make it bigger so
28:48 - you can
28:49 - see this will be good for a
28:52 - screenshot probably if over here or
28:54 - something so anyway so you I can't
28:56 - believe this in the middle of the video
28:57 - I was like let's make the thumbnail but
29:00 - um so you can see here now I've got
29:01 - something uh where the the particles
29:04 - kind of arrive to their spot and I can
29:06 - push them around with the mouse now
29:08 - ultimately I might be able to make this
29:10 - even more kind of dynamic or compelling
29:14 - I don't know what the word is but if I
29:15 - have these also respond to each other so
29:17 - what if I added a group Behavior like
29:19 - separation I would encourage you to
29:20 - check out I think I have some videos on
29:22 - group behaviors and flocking systems and
29:24 - there's lots more that you could add to
29:25 - this the thing to watch out for there of
29:27 - course is once you have every particle
29:29 - checking every vehicle checking every
29:30 - other vehicle's location things can
29:32 - really slow down in terms of the amount
29:34 - of computation so there's strategies
29:36 - there to make that more efficient that I
29:37 - should probably get into at some point
29:39 - but I think this gives you the basic
29:40 - building blocks so if I'm going to give
29:42 - you a challenge to do after watching
29:43 - this I would say number one is what is
29:45 - your content are you designing this with
29:47 - circles what's your text why are you
29:49 - making this could you think about
29:51 - multiple pieces of text transforming
29:53 - from you know train into rainbow into
29:55 - unicorn Tada um could you apply other
29:59 - behaviors path following would be one
30:01 - really could you actually have the the
30:02 - vehicles follow the paths of the letters
30:05 - um could you add group behaviors what
30:07 - other types of you know uh reasons you
30:10 - know you know what what is the system
30:12 - You're Building there's so many
30:13 - possibilities in terms of design and
30:14 - color so I hope you make something from
30:16 - this uh use the code that's Linked In
30:18 - the description um I'll try to make a
30:20 - processing version of this there's a
30:22 - library in processing called geoma I
30:24 - don't know if I'm pronouncing that
30:24 - correctly that allows you to get the
30:26 - path points of text um so that's
30:29 - something that uh maybe I'll revisit in
30:30 - a future video as well so thanks for
30:32 - watching this coding challenge I hope
30:34 - you enjoyed it
30:37 - and I don't know train joke insert here
30:41 - with whistle thing goodbye
30:44 - [Music]
30:54 - Belle

Cleaned transcript:

welcome aboard the train of coding stuff uh here's another coding challenge what I'm going to do in this coding challenge is show you how to place points your own geometry your own designs along the paths of letters um in JavaScript using the p5js library with the P5 font object and then I'm also going to apply something called a steering Behavior Uh from Craig Reynolds there'll be a lot of more information in this video's description and I'm going to use steering behaviors for these objects to find their way to a Target as well as flee Mouse so you can see the sort of inkling of a creative possibility here of what you could make with it and I'm sure you could come up with more creative designs reasons for using text uh other ways of interacting with other types of sensors and physicality and so um enjoy and enjoy this uh coding Challenge and I look forward to hearing from you in the comments okay I'm going to get started with this coding challenge the first step that I want to do is draw dots where there is text if that makes sense so let me let me let me let me explain a bit more about what I mean here so first thing I want to do is I want to make a variable called font and I'm going to just use preload because I need to I want to I need to specify a specific font here I'm going to say font equals load font and I have already put in the directory for um for this project I have already put a um hold on a font file show and finder um so there's the font file so I need this font file's name so so I'm going to copy it and then I'm going to go back here and I'm going to put that in here so now I've loaded that font I'm going to say create canvas uh 800 by 300 something arbitrary I'm going to say a text font font then I'm just going to say text uh rainbow is that too long I kind of want to use a short word because I don't want to have too many dots I like rainbow I think I might use train a little bit shorter train bow so to speak TM train train bow um so text train and I'm just going to say 10 uh 200 and I'm going to make a text size so these are some functions that are part of the p5js library that allow me to draw text to the screen and I'm gonna say 128 and then I think if I say uh Phil 255 and no stroke that'll color the text white and if I say background uh my favorite background color 51 that'll make the background 51 okay here we go there see look now I have the word train right there so I'm going to move it over a little bit uh I don't need probably don't need that big of a space 600 by 300 is good and let's move it over you know I could align it with the center and all that but I I'm not so worried I just want to get the basic idea here oops so let me refresh that I didn't move it and there there's my sketch and I'm just going to like move it over a little bit more okay there we go this does this part doesn't really matter so I now have a P5 sketch where I've drawn letters to the canvas and I want to make it a little bit bigger I know I'm being like crazy here but I'm going to just say uh 192 I don't know refresh there we go ah now now this looks right so I now got these big letters here now what I want to do is instead of drawing them as actual text I want to get all of the points of the letters so from here there's lots of created creative possibilities and fonts in P5 are loaded into an object called P5 font and here you'll see what are some functions available there's on the reference page there's text bounds so there are actually some other functions that are available for P5 font that are um not uh in that you won't see them in the reference but if you dig through the source code and look at some of the examples you'll find and I guess it's an open question maybe should file an issue and discuss whether some of these functions should actually be in the reference and maybe it's just a matter of putting in the word and volunteering some time to write reference pages and expand this but a really useful function and a lot of this work was done by uh Daniel how I should credit uh him for a lot of this work is to say I'm going to say VAR points equals font text to points believe the function is called text to points and now I can take exactly this so I'm going to put that in there and what that should give me I believe let's just console log it so we can see if this works let's just see what does this function give us so I'm going to go back here we can say look it's a big array with all these objects and what's in each of these objects an alpha and an X and A Y well I didn't even know it had an alpha in there an alpha and an X and A Y so I'm just going to make use of the X and the Y so what I'm going to do now I'm really soon I'm going to use a four each Loop in one of my videos everybody wants me to but I just like I'm like old fashioned and not very good at programming so just just I'm I'm just using my for Loop just for today please let me do it just for today get to that 4in Loop soon okay so I'm going to say um a point equals points index I and I'm just going to uh just make something that's uh green so I see it as a different color uh stroke weight four and I'm going to draw a point at Point dot ooh this is bad look what I just did so this is really dangerous in JavaScript so I was like I'll just make a iable called point because I'm going to store something called a point but I have uh a function in P5 that's called point that draws a point so I can't make up a variable with the same name as something that I'm using from a library in the global names space which is why things are typically in JavaScript libraries quote unquote names spaced meaning I would have to say p5o but also just makes things so inconvenient especially for beginners so here I'm just going to say PT for point and now I'm going to say PT dox PT doy y so let's see what I get now and we can see look at that look at all these nice green points these green circles that are tracing the Contour now this is amazing because I don't need to draw the text anymore right this whole thing was just to see that that worked and oh by the way oh interesting oh it just it kind of used 192 but I'm going to put 192 into this function the fourth argument I think is the font size because what I'm going to do right now is I'm going to completely take this out the whole point of this was I don't need to draw the text and then I'm going to make these uh White and make them a little bit bigger and we can see there is now the word train with lots of little dots so what's exciting about this is I have now drawn with my own algorithm the locations of all of these vertices in a piece of text and so from here your you know imagination can go wild I can make them rainbow colors I can make them you know move and follow the paths I can have them explode and come back and Shimmer and change to Stars and Hearts or whatever you want to do like I could make the word love and just fill it with hearts right you could do that and that would be nice so there's a lot of possibilities here but what I'm going to do next is turn these dots into particles that can move around this screen and what I'm going to do is maybe um start them in a random location and then have them find their spot and to do this I'm going to employ an algorithm known as steering now I have a whole set of tutorials that I'll link to this it's chapter six from nature of code book about autonomous agents and brenberg vehicles and there's all this like inspiration and background but what I'm going to do is model off of Craig Reynolds steering behaviors it's a a wellknown paper from 1999 steering behaviors for autonomous characters something like that and I'll link to that paper that you can read in this video's description but what I'm going to do is just move over to the Whiteboard and just talk you through what the basic idea of steering is if I have a particle and it has a current velocity it's a particle it's actually I'm going to call it vehicle because vehicle is a term from a a famous book called Vehicles famous book it's a famous book it's a book that I like uh by Valentino brenberg an Italian neuroscientist uh Valentino brenberg and actually this would be great to have a whole set of coding challenges that are to implement brenberg vehicles I got to get to that sometime but imagine these almost science fiction like robots that had sensors and desires and experienced fear or love and steered around an environment based on those emotions and simple rules so that's where that's sort of a background where a lot of these ideas come from but to turn it into some kind of math and code we if we have this idea of a vehicle maybe represented as a triangle and it has a current velocity that's its current velocity what if this vehicle had a desire it had a desire to do something like get some food or run away from a predator or just like wander around whatever its desire might be could we translate that desire into a vector so let's say its desire was to find uh you know a spot oh a Target we could translate we could we if we know it's current velocity and then we calculate a desired velocity move as fast as possible to the Target the steering Force as defined by Reynolds equals desired minus velocity so this is an autonomous agent it has this agent has some perception awareness of its environment it knows its current velocity so the steering the force applied to it to steer isn't directly the desired it's the error between what it desires to do and its current velocity and this is technique allows for a much more kind of lifelike and improvisational quality again to quote from Reynolds paper so um and you can imagine how powerful this is for example what if its Des what if its current velocity was equal to its desired velocity then its steering would be zero it doesn't need to turn speed up slow down any of those things what if its current velocity was faster than its desired velocity then the steering force would actually be a force pointing in the opposite direction trying to get it to slow down so the fact of using a force that's the error between what it currently wants to do and its actual current velocity this is a very powerful concept that's useful in animating motion of autonomous agents okay so now we understand this concept let's have these agents desire to seek their particular Target so here I am back over here with my train we should edit that part out probably but I don't know maybe we'll just get left in who knows okay back to my train uh okay now back to my train what am I doing here okay so oh we have a lot to do all of a sudden so one thing I need to do and it would be nice to maybe do some of these challenges not from scratch and just use like a base object that kind of moves around the screen but I'm just going to create a new file I'm going to call it vehicle. JS and I'm going to write a Constructor function to make vehicle objects and the vehicles they're going to need a position and that's going to be a vector again if you're interested you know a lot of this now I'm going to base off of you know sort of knowledge of basic physics engines and vectors which you can also find in kind of some of my other nature of code tutorials a position a velocity and an acceleration it's also going to need a Target and when I make the vehicle let's give it an X and A Y and position its Target there let's also just start it at that X and Y so it's got to have a starting position and a Target position okay so now that we have have that and you know what I'm going to do I'm going to attach the functions to the vehicle prototype as opposed to saying this dot because I'm intending to make a video tutorial about what prototype is and why this is a slightly well some would say not not so slight a majorly more better correct efficient nicer way of attaching functions to objects so I'm going to say a vehicle prototype update equals function and I'm doing this because it commits me to making that tutorial um and I'm going to say v.p. add this. velocity this. velocity. add this. acceleration so this is the basic physics idea of acceleration changing velocity velocity changing position then I also need to uh add a function which is like show or display to render it and let's give it a size this. R equals 8 for example and I am going to use whatever I just did right here to um we got a lot of this dots I'm sure I'm going to be forgetting stuff this.x and this.y so now I have some vehicles with some basic physics position velocity acceleration a Target and uh some updating of their whatever and then uh being able to draw them so now what I'm going to do is in sketch I'm going to say VAR Vehicles equals empty array and instead of drawing points in setup what I'm going to do is I'm going to say VAR vehicle equals a new vehicle at point dox point doy okay so now uh and then I'm got to put that into the array so vehicles. push vehicle so I'm I'm making a vehicle every spot in that uh in the points path of the font thingy okay so now these should be trains really I mean come on right choo choo okay so now in draw we'll set the background the draw is an animation Loop that's part of the P5 library and I again I could use a four each Loop but I'm just going to Loop through all of the vehicles and I'm G to say VAR I'm just gonna say V just to make things sort of shorter for right now I'm going to say v. update and v. show so when I run this this should look exactly the same the first version I just drew a DOT at all the spots now I'm actually making an object that has some Physics built into it and then showing it but it shouldn't move yet because there's there's no velocity there's no forces so if I hit refresh ah okay so I've got some errors here um sketch. oh I forgot to reference uh my uh new vehicle. Js file in index.html so I need to do that always forget that I need a song for like it's not as catchy as this dot reference the the new Javascript file in index. HTML no does that be turned into a song probably not okay um so once I do that let's see what I've got here good and I'm going to get rid of that console log that's kind of like filling up my console I don't really need to see that move this over here a little bit uh clear okay great so now this is working we've got those dots their vehicles now just to prove that this is doing something let's go into vehicles and just say I don't know give them P5 vector. random 2D so I'm going to just give each one a random velocity so you can see instantly they're all moving um now how could I have them get back to where they're meant to be so what I want to do is implement this algorithm now each particle each vehicle should calculate a vector pointing from itself to the Target it should scale it according to a maximum speed it desires to go at maximum speed and then it should calculate a steering Force desired minus velocity which it will apply to its acceleration okay so let's do that so now I'm going to come back over here and I'm going to write a function uh prototype do uh behaviors equals function the reason why I'm I'm kind of anticipating that I might have multiple multiple behaviors that play so I could just only write a seek behavior and then I only need one function I need a function to sort of accumulate a bunch of different behaviors so what I want to do is I want to say VAR seek equals um this. seek uh this.target and then I want to say this. apply Force seek right so what I want to do is actually so apply force is not a function that just magically exists I need to actually write that function so each vehicle should also have a function uh apply Force which receives an argument and then it takes uh this do acceleration do add that Force so the idea if they're going to be multiple forces at play we can add them all into the acceleration and if I'm doing that the acceleration which accumulates all the forces every single frame of Animation needs to start from zero so one thing I can do is after at the end of update I can say this. acceleration multiply by zero so that's going to clear the acceleration so now I have uh and of course if I run this now I'm missing the seek function the seek function I need to actually finally write something with this particular algorithm in it this is me getting my steps in on my Fitbit oh no Buzz Marketing of products on this channel unless they're sponsoring me I guess redacted product that I'm using Okay um so uh so now I need to write that seek function um um vehicle. prototype. seek and interestingly enough um I I gave it an argument called yeah it's good to have it have a generic argument it could seek any Target so how do I get a vector that points from the object location to the thing it's seeking okay so the way that I do that is I say uh I'm going to call this the desired Vector the desired velocity desired equals P5 do Vector subtract Target minus this dot position so and I I'm I kind of some of these lines of code are getting kind of long so this is the way you get a vector that points from position to Target you subtract the two vectors now what should the magnitude of that be well what I'm going to do is I'm going to actually create a new variables P this vehicle and I'm going to call it max speed and I'm going to set it to five so the idea here is its desired velocity is always its maximum speed is is to is at its maximum speed so what I'm going to do there so I'm going to say then desired do set mag uh this do maximum speed okay so now and then um I need the steering Force steer and what did we say steering equals desired minus velocity this should be easy steer equals P5 Vector do subtract desired minus this do velocity return steer the idea here is that I'm going to calculate that force and return it because when I get it up here I can then apply it so let's see how this goes we should be good well what did I forget I forgot to actually call apply behaviors so I'm GNA say v. apply or I just called it behaviors behaviors I could call it steering I don't know what would make sense to call it okay so now look what's happening it's seeking that spot and it's doing it it's very good at seeking it so it's like finding it moving back so I got this like sort of crazy like frenetic shaking thing so one thing I should do by the way is introduce another variable which would be very useful to control the behavior of these vehicles and this all again all comes from Reynold's paper maximum Force so how strong how good is it at steering like because right now I'm it's kind of like an idealized vehicle that can steer as well as it ever might need to be so I'm going to say like Point 0.3 is kind of a magnitude maximum and then when I calculate that steering Force I'm going to say Ste Ste limit um this do maximum Force so what you'll see here is that steering Force won't be as strong and you can see it's you know still doing the same thing where it seeks the Target and then it leaves but you know and but it's not as good so um you know one thing that we could see to kind of like try to have more of a sense of this well here's the thing this is doing us basically no good right now because what I really want to do to implement this particular idea is I don't want to implement a pure or a seek algorithm I want to implement an algorithm that's known from the paper as arrive and again everything boils down to desired velocity and what the arrive Behavior says is please go to the Target but not as fast as possible you want to go uh your speed your magnitude of your velocity is relative to how far away from the target you are meaning if I'm really far away I want to go really fast but if I'm really close I want to go really slow and what this will cause is if I'm here and I am going really fast my steering force will cause me to slow down and if I'm at the Target I want to be going my my desired velocity is zero the magnitude so this is going to instead of having the the object overshoot it actually slow down and stop okay so here I come back over here and I'm going to I'm going to I'm actually going to leave seek in there because it could be useful later I have an idea of what to use it for and I'm going to just add a function called arrive which is exactly the same argument exactly the same algorithm the difference is what is the desired magnitude so I'm going to say um if Desir so the distance so the distance is um the magnitude of this right the magnitude of that Vector is actually how far away it is because that's a vector that points all the way from the position to the Target if the distance is is less than I'm going to pick an arbitrary threshold less than 100 pixels if the distance is less than 100 then I want a magnitude magnitude I'm going to say speed to be map the distance which goes from 0 to 100 to what when the distance is zero I want the magnitude to be zero when the distance is 100 I want the magnitude to be maximum speed so uh else speed so I'm going to say oh I'm going to say VAR speed this I'm sure there's a more efficient way to write this equals uh this do maximum speed and then but if distance is less than 100 then actually set speed to be a different value based on how close it is and then set the magnitude to this new speed value I've calculated rather so here's the creative power you have now you can see I'm doing like a standard seek and a standard arrive but you might have a behavior that you imagine in your head what you need to do is think through some logic by which you can convert that behavior into a desired velocity and it can be much more complex than this you see just this little increment incremental change from seek to arrive now let's see if this actually works um I'm going to change uh up here to say uh arrive equals this. arrive the Target and then apply the arrive Behavior so you can see that this is now kind of working you know there's some little like goofiness of maybe there's a little bit noise of it sort of like jiggling but looks like they've all settled into a spot so let's see if this is really working the way to know if this is really working is I'm not going to start them at their target anymore I'm going to say random width random height and now we're going to see them all move into their spot that's pretty good Tada so on the one hand I could consider the this finished there's so many possibilities here here's something obviously that would be cool to try what if you have this then rearrange itself into new text I'm going to leave that as an exercise for somebody watching the tricky thing is you might have a different number of particles so you might need to split some or combine some to get more or few more more or less particles but let me just do one other thing to it what if I just to make this I mean there's a bunch of other things I kind of want to do this but just to give it something else what if I were to add a force um a steering Force where the particles themselves the vehicles are afraid of the mouse so what I want to do is in I'm actually going to change this seek function to uh flee I'm going to call it flee and what I'm going to do is I'm going to multiply I'm going to limit it to I'm going to um multiply the steering Force by negative one so the flea algorithm is my desire is to move in the opposite direction as fast as possible from the target rather than in the direction so I could just multiply the force in the opposite direction or you know I guess technically to do this in the quote unquote correct way I would uh I would multiply it by negative the desired vector by negative one so the I'm not changing the force uh this one I think is more accurately depicting the algorithm for flee by changing the desired Vector to point in the opposite direction now in apply behaviors I could say where is this um I could say a mouse equals create Vector now I don't need to create a vector for every object but you know uh I could have a global Vector that's the mouse's Global variable that's the mouse's location V Mouse equals create Vector Mouse X Mouse Y and now I'm going to say VAR flee equals this. flee Mouse and I am going to say this do apply Force flee so now if I run this you can see like if I just get the Mouse way out they're kind of like in the spot but like they're really just very you know they're never going to find they're way too afraid of the mouse so one thing that I probably should do is have this flea behavior only um come trigger if they're within a certain distance and maybe even the magnitude is you know they're based on that distance but I'm going to do something pretty simple here which is just uh there's probably you know I might want to leave this intact and not mess with this and do this part outside side of it but right here I'm just going to say um you know I can get that distance right here VD equals desired do mag and I'm just going to say if D is less than uh 50 and I should make that a variable too all these things I should make variables then uh return that steering Force otherwise otherwise just return create Vector 0 now again there's lots of inefficiencies like I don't need I could have a global variable that's the zero Vector I don't need to make create Vector all over the place but this will work and demonstrates the idea so I only want to have that effect trigger if whoops what did I miss vehicles uh uncaught sketch vehicle JS line 63 so I have an extra uh close bracket uh so here we go so you can see everything is coming into its spot and then now as I move here now I'm not really you can sort of see here as I move the mouse I'm kind of messing with these but very little so I kind of want this to behave in a bit more of a kind of radical way and so something I might more responsive way I guess radical I don't know I think I might want to give the maximum speed a bit more and actually I'm just going to like crank up the maximum Force the other thing I might want to do is write this in a slightly different way where I can now also weight these particular forces so what if I want arrive to just have a weight of one but flee to have a weight of five so I want that fleeing force to be much stronger than the arrival Force so now everything's in their spot and I move the mouse around you can see almost have this like spring like Behavior I feel like zooming in on this just so you can see it a bit and actually maybe it's better for me to uh whoops do this just to make it bigger so you can see this will be good for a screenshot probably if over here or something so anyway so you I can't believe this in the middle of the video I was like let's make the thumbnail but um so you can see here now I've got something uh where the the particles kind of arrive to their spot and I can push them around with the mouse now ultimately I might be able to make this even more kind of dynamic or compelling I don't know what the word is but if I have these also respond to each other so what if I added a group Behavior like separation I would encourage you to check out I think I have some videos on group behaviors and flocking systems and there's lots more that you could add to this the thing to watch out for there of course is once you have every particle checking every vehicle checking every other vehicle's location things can really slow down in terms of the amount of computation so there's strategies there to make that more efficient that I should probably get into at some point but I think this gives you the basic building blocks so if I'm going to give you a challenge to do after watching this I would say number one is what is your content are you designing this with circles what's your text why are you making this could you think about multiple pieces of text transforming from you know train into rainbow into unicorn Tada um could you apply other behaviors path following would be one really could you actually have the the vehicles follow the paths of the letters um could you add group behaviors what other types of you know uh reasons you know you know what what is the system You're Building there's so many possibilities in terms of design and color so I hope you make something from this uh use the code that's Linked In the description um I'll try to make a processing version of this there's a library in processing called geoma I don't know if I'm pronouncing that correctly that allows you to get the path points of text um so that's something that uh maybe I'll revisit in a future video as well so thanks for watching this coding challenge I hope you enjoyed it and I don't know train joke insert here with whistle thing goodbye Belle
