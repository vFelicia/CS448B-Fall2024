With timestamps:

00:00 - [Music]
00:05 - good morning whoo-hoo it's the go-to
00:08 - screen on a I'd no idea what day of the
00:10 - week is it Wednesday I'm standing here
00:13 - with my green screen and my laptops and
00:16 - my train whistle and my markers and my
00:18 - tape and my bell I'm peering over here
00:22 - to see if the chat is saying hello to me
00:23 - so let's see if the computer is actually
00:26 - available for us to look at I was kind
00:28 - of rushing to get set up and it wasn't
00:30 - completely set up there we go Here I am
00:33 - and now I need my magical cloaking
00:36 - device which I will put over here so
00:39 - that this laptop doesn't block your view
00:41 - of code and things that knope's this
00:46 - this needs to go a little bit further
00:47 - over hello how are you it's a beautiful
00:50 - day in the neighborhood
00:53 - it is a beautiful I don't know it's a
00:56 - little muggy out in New York today but
00:58 - this here I have something to tell you
01:00 - it's not really technically the
01:02 - summertime but for me it is the
01:05 - summertime the semester at NYU wrapped
01:08 - up last week that's substantially my
01:10 - full-time job makes it quite difficult
01:12 - to keep up with making these video
01:14 - tutorials although the nice wonderful
01:16 - opportunity that I have is that I do
01:18 - these videos also as part of my work
01:20 - teaching here at NYU but now cool the
01:25 - semester has finished courses are over
01:27 - I'm still like trying to get my head
01:29 - reattached to my body and make my to-do
01:34 - lists and get organized for the summer
01:35 - but I do have some good news scheduling
01:37 - wise which is that I will be here for
01:40 - twice a week livestreams most weeks
01:45 - however there will also be weeks during
01:47 - the summer where I am traveling so just
01:49 - I just wanted to open today with giving
01:51 - you a little sense of schedule so I'm
01:54 - gonna be here now through the end of
01:56 - June hopefully with twice per week live
01:58 - streams once or twice then I will be
02:01 - away for a couple weeks probably the
02:04 - first two weeks of July then I will be
02:06 - back for two to three weeks and then
02:07 - I'll be away again for three weeks so
02:09 - most of August there'll be very little
02:10 - coding trained in August a lot of coding
02:13 - training
02:13 - June and a half as much coding train in
02:16 - July that's the plan for the summer now
02:19 - the topic that I will be covering this
02:23 - summer you know I will continue to do
02:26 - some kind of a variety of coding
02:28 - challenges here and there and touch on
02:30 - different things but the main focus of
02:32 - the tutorial content of this channel
02:34 - will be working out a better selves
02:39 - Bordeaux
02:46 - you already know what the answer is here
02:48 - ah shoot I hit the wrong button
02:52 - um we'll be attentive OGS and the ml5
02:57 - library so um one thing that I'm doing
03:00 - which is I feel a little bit backwards
03:03 - but I think it's gonna work for me also
03:04 - I have this micro fine that other
03:06 - microphone that attaches to here later
03:08 - but I still have this strange Madonna
03:12 - microphone bug you know it's a broken
03:18 - elbow it's hard to do my voguing as
03:20 - usual what was I saying oh oh yes
03:25 - backwards so I'm I feel like I'm doing
03:27 - things a little bit backwards in that I
03:29 - am well maybe not but what the the
03:33 - domain my goal here the thing that I
03:36 - really want to prioritize is
03:38 - beginner-friendly machine learning
03:40 - tutorials using the ml5 library but
03:43 - there's two things that are keeping me
03:45 - from starting with that immediately
03:46 - number one is we're still here at ITP
03:49 - working on the ml5 library and getting
03:51 - it up to date with the newest version of
03:53 - Hunter flow yes so it's not even really
03:55 - ready for me to show that's number one
03:59 - and number two is I feel like I will do
04:01 - a better job with the beginner ml5
04:04 - tutorials if I have kind of worked out
04:07 - knowledge and experience with tensorflow
04:10 - j/s myself so you use ml five you don't
04:13 - need to know censor flow yes but to
04:16 - develop ml five and to kind of
04:18 - understand a bit about how it works
04:19 - behind the scenes knowledge of tensor
04:22 - flow chess is useful so where I am so
04:25 - far in this trajectory is I did a lot of
04:28 - tutorials about neural networks with no
04:29 - dependencies whatsoever just this kind
04:31 - of toy neural network library then now
04:35 - I'm starting with tensor flow chess to
04:37 - kind of redo a lot of that but use
04:38 - tensor flow DJ s behind the scenes and
04:40 - then I'll move on to ml five that's kind
04:42 - of the plan for the summer let me check
04:44 - the slack channel okay the answer is
04:47 - unicorns that hint rainbows this is not
04:49 - me I am swimmy asks is this the new
04:51 - standard Mike I mean unless people
04:53 - really think it's better it's not it's
04:55 - just that when it was ITP thesis week
04:59 - all of the I
05:01 - a lot of the microphones that I had up
05:03 - here got used for presentations
05:04 - downstairs and I just haven't tracked
05:06 - down where they all ended up so I can't
05:07 - find the one that attaches here by the
05:10 - way I'm wearing a new coding train
05:11 - hoodie this one is actually not
05:13 - technically available for sale but I
05:16 - should add it to the store this I got as
05:18 - I use printful to print merchandise it's
05:20 - a company printful and then I sell the
05:23 - stuff through store envy I think it's
05:25 - coating train dot Storenvy comm
05:27 - something like that so if people like
05:29 - are interested in this hoodie let me
05:30 - know I'll add it to the store there is a
05:31 - hoodie there but it's like a different
05:33 - one this is the anyway it's not that
05:34 - important Barnsley Simon writes in the
05:37 - chat that Barnes Lee's fern can be done
05:39 - since the photo says that it's
05:40 - interesting I would like to see that is
05:44 - our rim in the chat asked is he going to
05:47 - talk during all this live stream or is
05:49 - he going to do something mostly talk I
05:52 - might if we're lucky I'll do something
05:55 - the ratio of talking to doing something
05:57 - is high I'm not very good at the doing
06:01 - of something I will do my best I would
06:03 - say that if the talking is too much for
06:05 - you you could wait for the edited videos
06:09 - that come out after the live streams
06:11 - that get rid of all of my talking and
06:13 - try do and there's still a lot of
06:14 - talking but reduce the amount of talking
06:17 - and emphasize the doing alright so so
06:23 - there's a reason however why today I
06:26 - will not be talking today this
06:28 - microphone really is makes me very
06:31 - self-conscious it's a bit more breathy
06:33 - mouth sound yeah yeah there's not - I
06:37 - mean I could one thing I could do is I
06:38 - could bend it away from my mouth a
06:40 - little bit maybe I was too much sorry I
06:50 - have my monitor where I see myself over
06:51 - there that's why I keep looking over
06:52 - there instead of looking at you my
06:53 - friend watching this live stream alright
06:58 - let's see if that's let's see if this is
07:00 - better okay what I was going to say is
07:04 - the reason why I will not be talking
07:07 - about tensorflow Jess today is that in
07:11 - order to use tensorflow Jess effect
07:14 - I need to I need to be comfortable the
07:18 - idea of promises so I promise to you
07:21 - that I will cover tensorflow digests
07:24 - that no no I promise to you that I will
07:27 - cover promises then I will cover
07:30 - tensorflow yes catch I don't know what
07:36 - I'm gonna do if I catch an error going
07:39 - on the classroom next door to me I
07:40 - thought it's this summer there wouldn't
07:41 - be so that's my plan today I'm going to
07:45 - cover promises and the key words a sink
07:49 - and a weight and how those work in
07:52 - JavaScript all right
07:57 - looking back tape the upper part to your
08:01 - face no interesting idea this is what
08:07 - could possibly go wrong we've been
08:11 - putting some tape here oh that I have to
08:13 - look hold on let me what could possibly
08:22 - be go wrong am I gonna have like a bald
08:23 - patch what if I tape it to like my ear
08:28 - behind my ear
08:36 - all right that feels a little more
08:39 - stable actually all right
08:41 - [Music]
08:42 - now I have a few other important but now
08:46 - they're not important here it's
08:48 - important you can go do something else
08:49 - but I have a few other announcements
08:51 - pieces of information to let you know
08:53 - about number one there's music can
08:57 - anybody hear that music there is if I go
09:01 - to youtube / the coding train there's me
09:06 - right now live you can check out the
09:12 - recent highlight reel of the ITP spring
09:15 - show so if you haven't seen this already
09:17 - check it out there's all these wonderful
09:18 - projects made by the students here at
09:20 - ITP so I encourage you to check that and
09:21 - then you might also notice something new
09:24 - here sponsor bump bump bump bump so I am
09:28 - baited people are talking you the voice
09:30 - is low if in the slack Channel good
09:33 - segue here if you could let me know if
09:35 - the audio is okay or problematic I can
09:36 - always bump it up there's this new
09:41 - sponsor button so I am beta-testing
09:44 - YouTube's a new sponsor feature which is
09:47 - very similar to patreon I have a patreon
09:50 - page and so what I want to mention is
09:54 - mention is if your intro look at this oh
09:56 - they redesign stuff look at that or
10:00 - maybe I don't know who knows so if you
10:03 - sponsor on YouTube right now I'm using
10:06 - both to fund this channel I'm using both
10:09 - YouTube sponsorships and patreon the
10:13 - YouTube sponsor a sponsorship is the
10:16 - equivalent of the $5 patreon level so
10:20 - you will if you choose to sponsor via
10:22 - YouTube you will get an invitation to
10:24 - the slack channel and you will also get
10:27 - a I will mail you stickers sometimes we
10:32 - did here hopefully sooner than that but
10:34 - takes me a while to get to it and
10:36 - stickers like these coding train
10:39 - stickers I have here alright and then
10:43 - but you also get some benefits like if I
10:48 - go here
10:50 - look there's me if I look at the chat I
10:54 - don't know if anybody in the chat right
10:56 - now is a sponsor but if someone in the
11:00 - chat is a sponsor you can post some
11:03 - custom emojis Oh
11:05 - welcome to sponsor OB Lynde wall okay
11:08 - so OB Lynde wall is a sponsor now so
11:11 - here's the thing you get a badge you
11:14 - what but this is YouTube this is YouTube
11:17 - you get a badge but I can customize
11:21 - these badges so if anybody is a graphic
11:23 - designer out there and I mean I have a
11:25 - lot of coding trained design stuff
11:27 - already but if the the first person ever
11:33 - to sponsor on YouTube otherwise Jake
11:36 - Crowley I believe that was at the last
11:38 - livestream you get this sponsorship
11:40 - badge but I can customize those so if
11:41 - any wants don't we designed design the
11:43 - badges um just get in touch and then you
11:49 - can also you also get some custom emojis
11:53 - so anyone in the shadows a sponsor see
11:55 - we can figure out oh there we go
11:55 - I see here's the custom emojis but I can
12:00 - add a lot more custom emojis oh and here
12:03 - you could also type something here and
12:05 - hopefully I'm going to close this before
12:06 - people start realizing they control me
12:08 - they control me or they can try all
12:13 - right so I oh it's still there look at
12:17 - that how is it there oh because I
12:22 - entered wait how oh no no I'm not on
12:25 - that I'm so I lost my mind for a second
12:30 - all right that's all I have to say about
12:32 - that I don't want to I don't want to the
12:37 - I don't want to get get too lost in that
12:39 - I want to do I want to do something
12:41 - today so let's see here so let's get
12:49 - started by washing the whiteboard wait
12:57 - one thing I'm curious about by the way
12:59 - so I have slowmode on in the chat if
13:02 - anyone could help me with this
13:03 - I have slowmode on in the chat and which
13:08 - means you're limited to posting a chat
13:10 - message every 10 seconds I'd be happy to
13:12 - experiment with turning that off we had
13:14 - some issues with the chat and I can set
13:16 - that to any number so I'm curious if
13:18 - anybody has any feedback about what
13:19 - would be a good amount for slow mode and
13:23 - I'm also curious
13:24 - I believe if you're a sponsor maybe slow
13:27 - mode doesn't apply to you can anyone
13:29 - test that and I do know that let me just
13:32 - I do know that it's possible for me to
13:34 - make the chat exclusive to sponsors only
13:36 - but I'm not going to do that I instead
13:43 - yeah I'm not I'm not planning to do that
13:45 - at this point all right how come I can't
13:50 - switch to the other camera all right so
13:56 - can you see me over here let's take some
13:59 - time to wash the whiteboard
14:03 - [Music]
14:09 - this is what we do here on the coding
14:11 - train you know it's always good to have
14:12 - a good coding warm up some people like
14:15 - to warm up by stretching meditating
14:19 - having like a nice like healthy smoothie
14:23 - but you know don't don't put any added
14:24 - sugar in that that's not what you wanted
14:26 - your healthy smoothie but I I like to
14:29 - warm up and get ready for my coding day
14:31 - by washing cooling and advertising my
14:38 - merchant I sit and process you know in
14:41 - New York City is a very expensive place
14:42 - kudos let me just tell you not that I'm
14:45 - complaining
14:47 - I'm a very lucky
14:50 - [Music]
14:59 - yes you are a person sitting at your
15:02 - computer are on your mobile device
15:06 - watching somebody wash a whiteboard
15:09 - offline by tensorflow not a list is
15:19 - missing we have to rewrite that I didn't
15:22 - erase it somebody came in here in a race
15:24 - there is that I didn't write that stuff
15:25 - there's another play the serial feat
15:27 - music again but then I'm just gonna get
15:29 - a copy right alright
15:34 - [Music]
15:35 - remember when somebody asks is it just
15:38 - gonna be all talking or is he actually
15:40 - gonna do something well guess what it's
15:42 - not all talking it's also be washing
15:45 - away if that kind of doing something sir
16:01 - ready to code think about algorithms and
16:05 - things with this fresh wait
16:08 - [Music]
16:12 - all right now the question is the
16:19 - question is is this marker going to do
16:22 - the job for me oh yes it is okay that's
16:28 - plenty good so I think what I want to do
16:36 - to demonstrate promises and a sink and a
16:41 - weight is well first of all let me get
16:43 - rid of some of this stuff here that I
16:45 - don't need I kind of figure out where
16:56 - this sound is coming from hold on
17:07 - I'm looking in through a crack there's
17:10 - people watching a movie in this room who
17:14 - knows let me just look at the schedule
17:16 - it's on the door ah from 9:00 to 5:00
17:23 - every day in the summer session is the
17:26 - fundamentals of filmmaking okay so so
17:29 - much for my plan that that classroom
17:31 - next to me would be empty all this time
17:34 - okay oh the camera went off yes thank
17:43 - you I hear that there were I heard that
17:48 - there were some comments in the chat
17:49 - about the sort of poor sustainability of
17:55 - me using all these paper towels and I
17:57 - agree I will I'm going to make an effort
17:59 - to get a cloth for next time thank you
18:01 - for that bit of feedback okay no where
18:09 - are we okay so I'm back here I love that
18:17 - so much has to be exploitive it's people
18:20 - watch it for ya so first of all you get
18:22 - to it eventually
18:23 - also the camera shut off every once in a
18:25 - while hi my apologies alright this is
18:33 - fine I'm gonna leave this here so I'm
18:36 - gonna go to terminal
18:38 - oh look at this and I'm going to do I'm
18:44 - so I'm just gonna get myself set up here
18:47 - and I'm going to create so we're gonna
18:54 - call this promises one and then I am
19:01 - going to in the most ridiculous way I'm
19:07 - going to open up everything in a text
19:09 - editor I'm going to use the atom text
19:11 - editor and
19:18 - boy that was weird I'm gonna go into
19:21 - promises one I'm gonna open that up I'm
19:27 - gonna get rid of the live fixed oh you
19:29 - know I should do this right now
19:30 - does anyone know anyone who's used
19:36 - anyone has used as anyone used p-5
19:43 - manager and know where the template
19:45 - files are stored let's actually figure
19:47 - this out so where are my node modules on
19:50 - this computer they must be with those
19:51 - right so it would be in something like
19:54 - user well let's just do this and being
19:59 - like user in lib somebody will tell me
20:17 - Oh update the P Phi I don't want to
20:19 - update the p5 library I want to like
20:22 - completely change the template for my
20:24 - project when I make a new one
20:27 - where does node get installed where do
20:31 - noble node modules get installed MPM
20:37 - list user local Lib node modules ok
20:41 - let's try that user local Lib node
20:49 - modules p5 manager let's see are there
20:56 - template files in here right so so now
21:03 - templates this must be it right index so
21:09 - I would think if I adjust these yep this
21:18 - looks good
21:18 - so what's index bundle versus index oh I
21:25 - want but while bundle is the thing that
21:27 - I use so let's use bundle and what I'm
21:29 - going to do is
21:30 - I'm gonna do p5 CDN I'm trying now to
21:36 - also use now that I'm gonna do twice a
21:38 - week live streams I'm trying to take
21:41 - some time to get myself better organized
21:43 - and have a better workflow not that I
21:44 - have such a great one but I'm gonna do
21:46 - my best so I'm gonna copy this and I'm
21:53 - gonna copy oh no I want to use the
21:55 - minified I'm gonna copy the well I think
21:58 - I can just say p5 dot min and then I
22:01 - wanted to get the Dom and I don't want
22:05 - to use the sound library I don't want to
22:08 - have any of this extra style stuff so
22:12 - that's good so I'm just adjusting my p5
22:14 - manager template which generates the
22:15 - project and then for sketch touch yes I
22:18 - like to have just like a small window
22:22 - and I don't even want to have a draw
22:23 - function so that's what I want is my
22:27 - template so now if I go to the desktop
22:31 - let me delete this folder let me close
22:34 - everything here we go back to terminal
22:38 - let me actually make now let me go to
22:43 - the desktop let me make a directory
22:46 - called promises go into promises and now
22:51 - let's try to generate a new p5 project
22:55 - what's gonna add all those libraries
22:57 - I'll just delete I'll figure that out
22:59 - later p5 G - B promises 1 let's see if
23:08 - that works and I'm gonna say Adam and
23:10 - open it up in Adam and we're gonna look
23:14 - at this sketch ah there's my new default
23:17 - code this looks small to me font size
23:19 - wise is it okay and that's perfect and
23:22 - now I just need to delete this folder so
23:25 - I probably should change p5 manager to
23:28 - not install that libraries folder but
23:30 - okay great so that's good now what I
23:37 - want to do is run a local server
23:44 - and okay and I probably should put in my
23:57 - template actually background zero so I
24:01 - can when I first run and I can see that
24:03 - it's there and working great
24:06 - that's definitely not a small font size
24:08 - I'm told thank you all right so now
24:12 - here's what I think I'm going to use so
24:14 - what I'm going to use to demonstrate the
24:16 - idea of promises is I'm going to look at
24:20 - pulling data from an API and I think
24:24 - actually I had a discussion in the slack
24:26 - channel about and people gave me lots of
24:31 - good suggestions about api's to use and
24:33 - I think I'm gonna use one that we didn't
24:34 - even discuss which is word Nick so if I
24:36 - go to my course my ITP course called
24:39 - programming from A to Z oh no it's not
24:44 - which will be taught again this fall and
24:48 - I go to week three api's data I'm gonna
24:53 - just go to word Nick random words and
24:56 - I'm gonna grab these okay let me just
25:02 - get random word okay so what I just want
25:08 - to see here to start with is I'm gonna
25:14 - say load JSON random word
25:19 - now I haven't actually launched into the
25:21 - tutorial yet I mean this is the true so
25:24 - in case you haven't watched before I
25:25 - take these edited lie these live streams
25:28 - and edit them into smaller tutorial
25:29 - chunks I say I not sure helps me do this
25:33 - who works on channel management for the
25:34 - coding training and it's you often
25:39 - during these live streams I go to like
25:41 - performance tutorial mode I'm not there
25:43 - yet
25:43 - alright so then I'm gonna say got data
25:46 - and I'm gonna write a callback function
25:48 - called got data I'm just gonna say
25:51 - console.log data I just want to make
25:54 - sure this works to grab something from
25:57 - great so I got every time I run this I
26:00 - get a random word and I'm actually gonna
26:03 - say no canvas and I'm going to say
26:08 - create P got data whoops no create P
26:13 - data dot word and maybe I will make a
26:24 - button the button can't doesn't work
26:28 - with a promise but that's fine let's not
26:32 - worry about let me not go any further
26:33 - than this okay so every time i refresh I
26:40 - get a random word from word Nik and just
26:44 - in case you're wondering I give it a
26:46 - minimum length of 5 letters so there's
26:51 - lots of other things I could give but
26:52 - that's it okay
26:53 - our IP is s oh I forgot about the
26:56 - International Space Station API why did
26:58 - I say I didn't want to use that the good
27:02 - thing about that is anyway all right let
27:13 - me think here so now here's the thing I
27:15 - think to effectively demonstrate
27:18 - promises I don't want to buzz market my
27:20 - coffee by accident they're not a sponsor
27:21 - I'm drinking my coffee over here usually
27:26 - I'll make my own coffee but today I
27:28 - purchased a coffee not showing the logo
27:31 - of the coffee so people are asking in
27:37 - the chat so what I have here so far is a
27:41 - p5 is a is a JavaScript this JavaScript
27:45 - code it's going to execute in the
27:47 - browser and it's dependent on the p5
27:49 - library in a moment I am going to show
27:53 - how promises work and to do that I'm
27:56 - actually gonna switch from using the p5
27:58 - library to a function called fetch which
28:01 - is native to JavaScript and actually
28:05 - just to be sure let's check some let's
28:08 - just make sure
28:09 - works that returns a promise oh all
28:30 - right but anyway that works I I'm not
28:31 - gonna I'm gonna sort this out okay I
28:32 - have to talk about promises are okay
28:36 - what time is it now 11:30 yeah we're
28:38 - okay we're okay all right so the thing
28:46 - that I think that I need to demonstrate
28:48 - this yeah that's actually so Alka that's
28:54 - Alka writes in the chat the ISS API
28:56 - doesn't have HTTP support and that's
28:58 - actually one of the reasons why I don't
29:00 - want to use it because I was getting all
29:02 - these errors it would work because I'm
29:04 - doing everything locally but when I
29:05 - tried to put the example in code pen and
29:08 - different things I was having issues so
29:11 - what I want what I need is I need to be
29:14 - able to demonstrate sequencing so let's
29:19 - say I get a word from word neck maybe
29:22 - what I want to do next is get its
29:25 - definition so let's try to let's let's
29:35 - sort that out as well
29:41 - so where's the word word neck API I mean
29:44 - I'd almost love to go to a different
29:46 - whoops a different API just to
29:50 - demonstrate that idea like oh I could go
29:54 - to giffy let's go to the gift I and get
29:57 - a gif associated with that word that's
29:59 - perfect
30:00 - okay so I have a gift vapi tutorial I
30:05 - want to use things that I've used before
30:07 - so coding train website where is the
30:14 - gift fee so I need to find I need to
30:18 - find probably under tutorials under
30:20 - p5.js
30:22 - sound video would it be here eight data
30:27 - anybody can find this faster than me let
30:29 - me know I think it's nine giffy no ten
30:37 - yeah here we go
30:39 - Givi api so this should let's grab this
30:50 - so I don't need and simplify this call
31:03 - this giffy hold this random word giffy
31:13 - and I think to be honest with you I'm
31:16 - just gonna simple
31:23 - I should probably rename these something
31:25 - better a word Nick API giffy API let's
31:30 - just do this
31:31 - so if I get a random word then I could
31:35 - just say lo JSON jiffy API plus plus the
31:53 - plus the plus data dot word and then say
32:02 - got data data
32:11 - and then create images console.log that
32:18 - so let's see here
32:21 - random your word URL is not defined and
32:27 - then this here is where okay so I need
32:35 - to get data index zero where's the just
32:39 - the like URL for it would it be this
32:45 - embed URL that's what I want
32:47 - no to create the gift as an image I
32:56 - think maybe just URL let's try that
32:58 - so data data so create create image data
33:09 - data index zero dots URL let's try that
33:22 - let's just look at this okay one more
33:24 - time let's try that didn't work okay so
33:28 - but yeah I'm naming things poorly on
33:38 - purpose
33:40 - slug images Oh images ah this is what I
33:44 - need down two images dot images this
33:51 - should are they all gonna have this
33:54 - foreigner II with still dot images dot
33:58 - like this whoops let's try this
34:15 - No
34:23 - images let's see if this is this right
34:26 - Oh dot URL let's try this
34:35 - there we go okay this is a problem this
34:40 - is gonna be a problem okay I want to see
34:43 - the word still
34:55 - and what's the smallest version of the
34:59 - gift fixed-height small yeah let's do
35:06 - that and if it doesn't get anything Oh
35:14 - oops No oops almost ready to tackle
35:18 - promises this is fun so I need oh but I
35:30 - this is perfect cuz I'm gonna get to
35:32 - demonstrate catch when there is nothing
35:35 - oh oh this couldn't be better
35:37 - okay alright so now let me let me
35:43 - rewrite this in a different okay alright
35:47 - I'm ready for this now so the next thing
35:52 - I want to do is open up promises open up
35:57 - promises I want to just go here I'm not
36:02 - gonna write my own promise I'm just
36:04 - gonna use the promise there's no pending
36:06 - fulfilled rejected okay I'm just
36:10 - remembering these things then catch all
36:12 - right
36:13 - all right we're ready everybody
36:22 - I'm just trying to get a good well that
36:31 - wasn't good one flowerpot okay perfect
36:33 - looks if this gif isn't very good that's
36:35 - fine all right
36:39 - is everybody is anyone still watching
36:42 - it's been how long has it been 40
36:44 - minutes
36:45 - and I'm now starting to do a tutorial
37:00 - this is too much fun I'm just waiting
37:09 - for the coding train to come a gift to
37:11 - come up by accident I should probably
37:14 - let it be less wheat but let's let the
37:17 - words anyway alright
37:29 - I don't know why I'm obsessed with with
37:35 - like I need a good opening gift no no oh
37:44 - boy that's not good either elderflower
37:52 - how is this a gift for elderflower oh my
37:58 - God my broken elbow I swear I'm gonna
38:05 - pick one of these I can sickly seahorses
38:19 - okay perfect
38:21 - all right we're good we're good we're
38:23 - good I understand why not everybody's
38:26 - just not just clicking the sponsor
38:30 - button how do i Christian a saying want
38:35 - to filter on PG rated gifts I would like
38:38 - to do that but I don't know I don't know
38:42 - how to do that in the it does anybody
38:44 - know how to do that really quickly in
38:45 - the in the API here
38:59 - yeah I know this is I really live it on
39:03 - the edge with this tutorial oh boy I
39:17 - promise you alright nobody's giving me a
39:23 - tip so I'm just gonna live on the edge
39:29 - rating equals G okay is that really
39:32 - correct rating equals G and
39:46 - yeah let's see if that works I think PG
39:49 - is probably fine
39:55 - oh look at this oh it couldn't be more
39:58 - perfect
39:59 - alright okay here we are we're gonna
40:07 - disfigure to do this I'm gonna cycle the
40:08 - cameras
40:28 - hello hello I have a promise to make
40:36 - sure by the end of this video I am
40:38 - hopeful that you and I together will
40:42 - understand what the how this promises
40:47 - thing is in JavaScript because me I'm a
40:49 - person who programs in JavaScript with
40:52 - callbacks but there has been for quite a
40:55 - while something called a promise in
40:57 - JavaScript and it used to be something
40:58 - that was part of certain libraries that
41:00 - you could import and add to your code
41:02 - now as of I think es6 which is es2015
41:07 - whatever as of a more recent version of
41:10 - JavaScript promises are something native
41:13 - to how JavaScript works so I hope this
41:15 - video will answer the question for
41:17 - myself as well as you why should you
41:19 - care about this what is a promise and
41:22 - how do you make use of a promise so the
41:25 - demonstration so I have a JavaScript
41:28 - program already running it and I think a
41:31 - good way to demonstrate this is to look
41:34 - at making requests for data from api's
41:37 - so I am making a request for a random
41:40 - word from the word Nick API and then I
41:43 - am asking the giffy API for a gif associ
41:45 - of that word so if i refresh this page
41:47 - there we go
41:49 - i refresh this page again there we go so
41:52 - this is the demonstration I'm going to
41:53 - use now that at present the code for
41:56 - this is using the p5.js library with
41:59 - callbacks there are no promises involved
42:01 - there's a load JSON function that passes
42:04 - in the URL to a particular API
42:06 - it has a callback for when the data is
42:10 - ready then I get that data and then I go
42:13 - I ask load JSON again with another URL
42:17 - and then I who then I have another
42:19 - callback oh my goodness so here's the
42:22 - thing I don't know why I'm gonna walk
42:24 - over here but I'm just going to a
42:25 - callback really makes sense for this
42:28 - idea of an event right when the mouse is
42:31 - pressed trigger this function it's an
42:34 - event
42:34 - but if I want to sequence asynchronous
42:38 - things that happen
42:39 - my program meeting I'm making all these
42:40 - API requests I'm asking for this I'm
42:43 - asking for this and then when this comes
42:44 - back I want to do this callbacks can get
42:47 - very unwieldy and you can actually find
42:49 - yourself living in what's known as sound
42:53 - effects please call back hell so I'm
43:01 - going to show you right now call back
43:03 - hell
43:05 - now I've written this in a weird sort of
43:07 - way where I call low JSON okay that's
43:10 - just way too distracted where I call low
43:12 - JSON and then but you might be you might
43:15 - imagine that you use anonymous functions
43:17 - so when I call low JSON instead of
43:19 - having this separate you got data
43:20 - function I'm gonna take this up here and
43:22 - I'm gonna put this in here why is this
43:25 - so and then I'm going to I don't need it
43:27 - to be a name I'm just gonna pass the
43:29 - call back in here directly okay so this
43:32 - is perfectly normal to do up but then
43:34 - when this one when I then ago to the
43:37 - giffy API then I'm gonna I need this
43:39 - next anonymous function and I need that
43:42 - to go in here I don't want to name it
43:44 - anymore it's an anonymous function and
43:47 - there we go so now let's refresh this
43:50 - and it still works homeward bound oh
43:56 - there is no what's great about this is
43:58 - this is going to trigger an error
43:59 - sometimes when it can't find an image
44:02 - and I'm gonna need that with promises
44:04 - I'm need to figure out of handling
44:05 - errors so look at this this isn't even
44:08 - that bad this is fur but but look how
44:12 - this is just not sustainable first of
44:14 - all I don't like how much room I have
44:15 - here this is absolutely not sustainable
44:18 - I won't up load JSON have this callback
44:20 - then load is and of this callback this
44:21 - King I could just keep going with this
44:23 - and all of a sudden you can see my code
44:24 - it just gets indented and indented and
44:26 - indented more this isn't good
44:29 - could there be something better I don't
44:32 - know I don't know really if it's better
44:33 - or not but there is something and that
44:35 - something is called
44:36 - a promise a promise is an object so the
44:46 - idea of in so let's say so we have this
44:49 - load JSON function which expects a URL
44:54 - and then a callback here's another
44:58 - reason why we could get stuck in
45:00 - callback hell we might need multiple
45:03 - callbacks for different things like an
45:05 - error callback and then word that our
45:07 - code is even more unwieldy because then
45:09 - we have these sequences and we have
45:11 - different things for the success
45:12 - callback so this is what our code looks
45:15 - like with a callback now p5 at present
45:17 - doesn't support
45:19 - promises but if it did instead I could
45:25 - say something like this let promised
45:29 - equal lo JSON URL so the idea is instead
45:35 - of passing a function a callback you ask
45:38 - a function for a promise so because the
45:42 - p5.js library doesn't support promises
45:44 - and I am here to teach or learn which
45:47 - one I'm not sure yet about promises I'm
45:50 - going to instead use a function called
45:53 - fetch which is a function native to
45:55 - javascript in the browser that supports
45:58 - promises so this gives me a promise once
46:02 - I have that promise I have it as an
46:04 - object and I can do all sorts of things
46:07 - with it but the idea of a promise it's
46:10 - an object that can be in a certain state
46:12 - so the possible states are well wait a
46:18 - sec you look this up I know it's like
46:21 - rejected or accepted I don't know if it
46:23 - accepted as the right word let me go
46:24 - look this up wait why are you saying
46:33 - John oh whoa John oh yeah because you my
46:37 - brother's name is John okay so I forgot
46:39 - the no one will notice this right I know
46:46 - it'll ever notice that hello John on the
46:49 - whiteboard okay wait I need to look up
46:51 - what are the was I gonna say what's
46:55 - doing so well resolve resolve is the
46:59 - word I was looking for okay and then
47:02 - there's also it can be pending or come
47:07 - fulfilled okay so the state is pending
47:14 - or fulfilled but the result is rejected
47:22 - or resolved okay I think that's the way
47:26 - I understand it all right
47:29 - pending fulfilled and rejected whoa whoa
47:34 - so hold on help me clarify this people
47:38 - of the slack channel or in the or in the
47:40 - YouTube chat which I'm trying to trying
47:41 - to keep an eye on I get the idea of
47:45 - pending or fulfilled it's in progress or
47:47 - its completed to me I understand those
47:50 - are the states and then when it's
47:52 - fulfilled its either rejected or
47:55 - resolved is that correct
47:57 - I don't need resolve or reject that's
48:01 - for creating promises right right that
48:08 - makes sense one of those three pending
48:13 - fulfilled and rejected fulfilled is I
48:17 - see so fulfilled is the same as resolved
48:21 - essentially okay okay that makes sense
48:34 - see in theory it's helpful for somebody
48:37 - doesn't actually know this stuff to
48:38 - teach the stuff I don't know fulfilled a
48:40 - success or rejected as rejection okay
48:42 - great
48:43 - there's a nice graph if I scroll down
48:47 - there's a graph ah here we go oh good
48:50 - we'll come back to this
48:57 - well I don't know I only care about this
49:01 - okay okay so Matthew you can figure out
49:10 - how I'm gonna back up in my speaking and
49:13 - you can figure out how to put this
49:14 - together a promise can be in one of
49:18 - three states it can be pending right
49:23 - this is while I'm waiting to get the
49:25 - data back from the API it can be
49:29 - fulfilled which means it's it's been
49:35 - successfully resolved I have the results
49:37 - back from the API or it can be rejected
49:41 - meaning some error has happened so if I
49:45 - have this object the idea is that I can
49:47 - just check this object to say wait hey
49:49 - object what pay promise everything's
49:55 - fine I just dropped the top of the
49:57 - marker I have this problem I have this
50:03 - promise I promise you promise me
50:05 - something
50:06 - are you still pending I'm waiting for
50:07 - you to finish promise are you pending
50:09 - and then I could say like hey were you
50:11 - rejected were you filled and then give
50:13 - me the stuff back but here's the thing
50:14 - if I do this I actually don't need to
50:19 - query the promise continuously I can use
50:23 - something called then and/or catch so
50:32 - then is a function that gets executed is
50:38 - that the right way to say it is it
50:40 - really a function that gets executed no
50:42 - because you have to pass a function into
50:44 - it yeah
50:48 - then is a function that receives a
50:53 - function to be executed it's kind of
50:55 - like a callback when it has been
50:58 - fulfilled and catch receives a function
51:05 - to be executed when it has been if and
51:09 - when it has been rejected and there's
51:11 - actually if we go back if we go to the
51:13 - Mozilla JavaScript documentation page
51:16 - there's a nice diagram so this idea of a
51:18 - promise it's pending and you can see all
51:20 - this stuff that happens but in the end
51:22 - there's just a then or a catch settled
51:29 - if it's either sorry I'm reading the
51:30 - chat yeah I should say resolved so I've
51:41 - read the chat shouldn't be reading the
51:42 - chat well I'm doing this alright so this
51:49 - is the basic idea so what I'm gonna do
51:51 - now is I'm gonna start to rewrite that
51:54 - code using promises now I should be
51:56 - explicit about a couple things number
51:58 - one is I am NOT creating I can write
52:02 - code that creates promises I can use
52:05 - them and I'm gonna get to that I'm not
52:07 - doing that right now what I am doing is
52:09 - using somebody else's function that
52:11 - returns a promise so I need to get to
52:14 - creating your own promises and I'm gonna
52:17 - make lots of promises we gonna keep them
52:19 - all and then the other thing is I need
52:22 - to like to see does this really help us
52:24 - does this really make our code easier to
52:26 - follow and so let's just sort of see so
52:28 - let's let's go back so first of all let
52:31 - me just show you where this function
52:33 - called fetch is coming from so this is
52:41 - the fetch function and basically fetch
52:45 - is just a function that you give it a
52:48 - URL and it fetches the stuff from that
52:50 - URL and gives you a promise back so I am
52:53 - going to I'm going to comment this out
52:56 - and I'm gonna say let promise equals
53:01 - fetch
53:02 - word Nick API and then I'm gonna say
53:08 - console.log promise so I so let's take a
53:13 - look and see what this is look at that
53:16 - and at the moment that promise is
53:19 - pending
53:19 - look the promise is pending now here's
53:21 - the thing let me make I'm gonna do
53:23 - something very silly which is actually
53:26 - let me do let me do this in let's do
53:30 - another one here let P equal Fett let's
53:34 - do this again just in the console and
53:37 - let's look at that it's resolved like a
53:39 - few moments later it's resolved right so
53:42 - at the next line of code so I could do
53:45 - something crazy like while promise is
53:48 - not resolved wait wait wait wait wait
53:51 - wait but that would be like blocking
53:52 - code the point of a promise is to handle
53:56 - asynchronous things my program is going
53:59 - to keep going but behind the scenes it's
54:01 - going to be waiting for that data and
54:04 - the way I do that I don't think way too
54:05 - much time to get to this is with the ven
54:07 - function so watch this if I say promise
54:10 - then and then I put got data in here and
54:14 - this is nobody would ever write
54:16 - JavaScript like this I'm just doing this
54:18 - in kind of a crazy way and then I will
54:19 - condense it down and then I write my got
54:21 - data function let's run this and so take
54:28 - a look at this looks a little weird
54:29 - let's run this now so I got oh yeah I
54:36 - forgot all this is great
54:38 - I forgot the fetch function at some
54:39 - weird properties which is going to cause
54:41 - us a bit of a problem which is why we
54:43 - need promises so look at this I actually
54:46 - so you can see I got the results back
54:48 - but actually the results have to be
54:51 - converted into a format that I can use
54:54 - so all right so first of all so this is
54:57 - the idea right and if there was an error
54:59 - I could say promise catch got error
55:08 - and I could say console.log error all
55:16 - right so now let's make it have an error
55:19 - let's like mess up the URL by accident
55:22 - and we can see I got an error there type
55:28 - error failed to fetch so you can see
55:30 - this is the idea I get a promise I can
55:33 - give it a function to with then for when
55:36 - it's successful and I can give it a
55:37 - function for when there's an error I
55:39 - forgot to mention that I'm gonna start
55:41 - probably using the JavaScript arrow
55:43 - syntax in the course of looking at
55:46 - promises because it's really helpful and
55:49 - it's many ways necessary for working
55:52 - with them effectively so if you haven't
55:54 - already watched my video or somebody
55:56 - else's video or tutorial about the
55:58 - JavaScript arrow notation which is this
56:00 - notation I would suggest you pause and
56:02 - go ahead and watch that and come back
56:05 - okay
56:06 - so how would somebody really write this
56:08 - code well most likely you don't need to
56:11 - create this variable call to promise and
56:13 - then say dot then really most likely
56:16 - what you're gonna see is just saying
56:17 - fetch and this is called chaining almost
56:20 - everything in JavaScript is chained
56:21 - meaning I'm gonna do this function and
56:23 - chained it with the next thing I can say
56:25 - dot then got data dot catch got error so
56:33 - this is more likely how you're gonna see
56:36 - it written and let's just see do we
56:37 - still get that we still get that error
56:39 - and then if I fix it now we can see
56:43 - we've got that response back correctly
56:45 - okay now how would I really see this
56:48 - most likely I would see this with the
56:50 - use of anonymous functions so this whole
56:53 - thing would end up in here without a
56:56 - name and then this whole thing would end
57:00 - up in here also without a name this is
57:06 - starting to maybe look a little better
57:08 - and you might even see people do this so
57:11 - the because here's the thing there's
57:12 - going to be a lot of sequencing and what
57:15 - promises are going to allow me to do is
57:16 - really nicely say dot then dot then
57:20 - then not then so I can create this
57:22 - sequence of callbacks more easily now
57:25 - here's the thing if I want to clean this
57:27 - up even a little bit more I might want
57:30 - to use the arrow syntax and once I use
57:35 - the arrow syntax if I just have one line
57:37 - of code I can simplify this let me make
57:43 - sure I have this right and then I can do
57:49 - this did I stop talking I have to
57:58 - concentrate and this doesn't need a
58:01 - semicolon whoa I made this confusing but
58:04 - let's just do my best here all right so
58:06 - let's just make sure this still works
58:08 - and then let's look look at it again
58:10 - okay it's still working so look at this
58:12 - this is starting to look kind of nice
58:14 - it's confusing this is not for the this
58:17 - is not for your first day of programming
58:19 - but I now have fetch which returns a
58:22 - promise and I can also because I only
58:24 - have this one I can do this I can get
58:26 - rid of these parenthesis and I could
58:31 - also the truth of the matter is I could
58:33 - actually just do this now say console
58:35 - dot log because I'm giving it a function
58:37 - to console dot log that stuff but I'm
58:39 - gonna I'm gonna keep it like this just
58:40 - for my own sanity so now I have this
58:44 - fetch which is query from an API then
58:48 - it's asking for the data and then then
58:52 - it's tape making just give me a second
58:57 - here
59:01 - I have this function which returns a
59:13 - promise and the promise is handled when
59:16 - it is fulfilled the data is console
59:19 - logged when there is an error the error
59:21 - is console.log that's what I have so far
59:24 - right now and here's the thing well I
59:26 - want to I want to actually get that word
59:28 - like I want to say data dot word but
59:32 - that's undefined so this is the funny
59:34 - thing about fetch if I go back to the
59:36 - documentation page for fetch I need I'm
59:41 - looking for the function called JSON as
59:45 - their hold on hold on if I go to the
59:54 - documentation for fetch and go under use
59:56 - using fetch yes here's the thing you can
60:00 - start to see that there's something like
60:02 - what I'm showing you here but there's
60:04 - also this like dot JSON so the thing is
60:07 - the thing that's coming back from fetch
60:09 - I have to ask for it to be converted
60:11 - into an object that I can use and that's
60:13 - with the dot JSON function so let's look
60:16 - at how I would do this so here's the
60:24 - thing the dot JSON function also it
60:29 - returns a promise so what I really want
60:33 - to do is this I want to say when the
60:35 - data comes back call dot JSON and then
60:37 - guess what so this is really the
60:41 - response convert that to JSON and then
60:46 - take the JSON and console.log log that
60:55 - which is like this alright let's take a
60:59 - look at this so now you can see how my
61:01 - sequencing is much easier to manage I
61:03 - don't have callback L I actually just
61:05 - have the things that have to happen one
61:07 - line after the other boy this is tough
61:09 - stuff whoops there we go
61:14 - and now you can see I have that were
61:16 - and now okay so let's get a little bit
61:18 - better here because what I really needed
61:20 - to do was call my create P function to
61:22 - make that paragraph so I'm gonna do this
61:28 - so let's take a look at this let's just
61:31 - put that in there now and there we go
61:36 - every time I read so now I'm using
61:38 - promises I'm using fetch and promises
61:42 - okay now I want to next go and try to
61:50 - request a gift associated with that word
61:53 - how am I going to do that now first of
61:55 - all I need to now this is the thing
61:59 - remember with the JavaScript arrow
62:00 - syntax what this really is right here
62:04 - this whole thing right here if I were to
62:06 - rewrite this it's this function JSON
62:13 - create PE right this is just this
62:19 - shorthand but if I want to now ask to
62:24 - fetch the what am i fetching the giffy
62:29 - api if I want to do two if I want to
62:34 - create the paragraph and then fetch the
62:36 - giffy API I no longer can be as short
62:40 - handy I need to put the brackets back
62:43 - because I have two lines of code I need
62:46 - to put those brackets back and that
62:48 - means a parenthesis needs to go here
62:51 - right
62:52 - [Music]
62:58 - why did this auto format back to here I
63:01 - might have a linting errors timeout
63:05 - is it because I forgot a semicolon here
63:07 - no
63:12 - I want this to autoformat to this why
63:17 - didn't it
63:27 - I'm waiting for someone to is that just
63:30 - damn I do I actually have a syntax error
63:33 - or oh yes this is an extra parenthesis
63:36 - there we go thank you okay right hmm
63:45 - this doesn't look right to me and it's
63:48 - because I have an extra parenthesis here
63:49 - where there should be a semicolon there
63:51 - we go so I have to put the curly
63:54 - brackets back in then I can have two
63:57 - lines of code here right so now first I
64:03 - want to fetch the word Nik API then I
64:05 - want to take the response and convert it
64:07 - into JSON once I have a JSON I want to
64:09 - create the paragraph and then fetch from
64:11 - the giffy API so what do I want to do
64:13 - now then the same thing then take that
64:20 - response and convert it into JSON then
64:24 - and then the JSON I'm gonna do this I
64:31 - need to just whoops then with that JSON
64:35 - all I need to do is create the image so
64:40 - I can get that code I had before this is
64:42 - creating an image object and you know
64:44 - I'm not going through how the giffy API
64:46 - works but I in the giffy API
64:49 - I get did I get the JSON data index yeah
64:53 - I get the first gift that's fixed-height
64:55 - small and it's URL so look at this now
64:57 - again this is not so super I mean this
65:00 - is very concise and it's difficult to
65:02 - understand but you can see how nice the
65:04 - sequencing and I'm sure I know I have
65:06 - some errors here but let's at least see
65:08 - how far we get
65:14 - let's see how far we get all right so
65:17 - good news I got the word sketch digest
65:20 - 18 JSON of undefined 18 wait why does
65:28 - that say 18 let me join this again skep
65:31 - 14 sorry
65:32 - all right so ah so here's the thing
65:36 - promises are chainable right what are
65:39 - the things that return a promise
65:41 - fetch returns a promise which is here
65:46 - rasaan also returns a promise
65:48 - so how come if this returns a promise
65:50 - this worked but this returns a promise
65:55 - this one didn't work well here's the
65:57 - thing you have to explicitly in this
66:00 - chain of promises say return to continue
66:04 - to chain all of the VINs so I actually
66:07 - missed saying return here and the truth
66:10 - of the matter is I really should say
66:12 - return here but if you remember from my
66:16 - and in lemon I just put this in just to
66:19 - have it everywhere but the reason why I
66:22 - didn't have to put it is when you have
66:24 - just one line of code it with your arrow
66:26 - syntax it assumes the returning but this
66:29 - is now really what this should look like
66:31 - right and let's just make sure this
66:33 - works Oh
66:35 - syntax are lying 10 there's an extra
66:39 - parenthesis there know what oh is it
66:49 - like just as needing a semicolon there
66:51 - no oh oh that's weird I guess I
66:59 - have returned I have to have this weird
67:05 - I have to use the curly brackets yeah
67:12 - let me go back much I don't know if this
67:17 - yeah let me go back okay
67:29 - whoa so if I have to return the promise
67:37 - in order to have the next ven sequence
67:40 - properly how come I didn't have to
67:41 - return the response dot JSON promise up
67:44 - here well it's just because I'm making
67:46 - use of the arrow syntax shorthand so I
67:49 - think I want to just remove most of the
67:51 - shorthand here and add back in the curly
67:56 - brackets and say return so and then what
68:01 - am I I need a parentheses here and then
68:04 - also now this is more long-winded than
68:07 - it needs to be but I'm gonna add back in
68:10 - the curly brackets but I just want to
68:12 - emphasize and I've already made another
68:14 - mistake there we go so now let's see can
68:17 - I fit this all in one page here so now
68:21 - look at this now if you if I showed you
68:24 - this at the beginning of this video you
68:26 - would look at me like oh my god you're
68:27 - crazy that makes no sense to me but I'm
68:30 - hoping maybe maybe this is somewhat
68:33 - comfortable for you maybe you have to go
68:34 - back and watch this video again maybe
68:36 - you never want to watch another video in
68:37 - my channel ever but I'm starting with
68:40 - fetch and getting a promise then I get a
68:43 - response back and I'm returning the next
68:45 - promise about converting it to JSON then
68:49 - I am returning the then I'm then I'm
68:53 - getting the JSON mmm adding the
68:55 - paragraph and asking to fetch more data
68:58 - once that promise gets resolved I take
69:00 - that result returned into the JSON once
69:03 - that's ready I take that JSON and make
69:05 - an image and then I'm done now here's
69:08 - something that I didn't mention that's
69:09 - so magical about all this each one of
69:13 - these things an error could happen along
69:16 - the way it could break because either
69:19 - one of these URLs could be wrong the
69:20 - data that comes back couldn't be
69:22 - formatted right in such a way that I
69:23 - could get it back to JSON this catch
69:25 - will catch any error anywhere throughout
69:28 - here so any error happens anywhere it
69:30 - jumps down to here this is much nicer
69:32 - than having to have separate error
69:34 - callbacks for every single thing that I
69:36 - might be doing in a sequence like this
69:37 - so let me now let's hope this works
69:41 - this is time for me to use a drumroll
69:45 - let's see if this works this has been a
69:49 - long video I think there we go it's
69:54 - still working
69:56 - nope no no that's the wrong one no no
70:00 - really
70:01 - sound effect challenge so there we go so
70:04 - I'm just gonna now now that we see this
70:05 - full sequence here I'm gonna go back and
70:10 - remove I kind of like using the in once
70:14 - I'm already using the arrow syntax you
70:16 - know if I wasn't using the arrow syntax
70:17 - then I wouldn't care so much but once
70:20 - I'm already using the arrow syntax I'm
70:29 - once I'm already using the arrow syntax
70:31 - I like to I like to have that shorthand
70:35 - when possible because it does make it
70:37 - easier for me to follow the code so I
70:42 - think and I think I'm gonna keep the
70:45 - curly brackets here because this is kind
70:46 - of a long thing to do so now we can see
70:48 - and again there's a little bit there
70:50 - might be a there might be some other
70:58 - simplifications that I can write to this
71:00 - and there's a lot of extra steps just
71:02 - because of the way that fetch works but
71:04 - this really shows like if I had to do
71:06 - this without promises this code would
71:09 - become really unwieldy and difficult to
71:12 - manage and write so I think I've done at
71:14 - least with this first part what's coming
71:16 - next so I need to show you how to use
71:20 - something called promises dot all I
71:22 - think so if I want to create like a big
71:24 - array of promises I can wait and have
71:26 - something happen when they're all
71:27 - complete that's thing that's worth
71:29 - showing you another thing is let me make
71:33 - a list of this stuff whoops
71:42 - so can I come over here so I need to
71:45 - show promises all I need to show how to
71:51 - make your own promises how to make your
71:54 - own promises I'm gonna just title the
71:56 - video how to make your promises and
71:57 - maybe people who don't know learn a
71:59 - certain code would just want to know
72:01 - about how to make your own problems how
72:02 - to make your own promises how to promise
72:07 - safai something and then then we're
72:13 - gonna look at I could actually really
72:15 - simplify how this code looks in a really
72:19 - nice way I mean you know you can
72:21 - actually skip all of that entirely if I
72:24 - use and this is a part of like yes 427
72:28 - no it's a more recent version of
72:29 - JavaScript called a sync the async and
72:34 - the await keywords so I'm gonna show how
72:37 - those work and that's gonna even
72:39 - simplify what we did here further now I
72:41 - might be forgetting something that's
72:42 - important in this list and when I come
72:44 - back in the next video I will add to
72:45 - that list as well okay thanks for
72:47 - watching I hope you learned something
72:48 - about promises a little too long and
72:50 - this was helpful to you alright so how
73:00 - did I do
73:02 - how did I do everybody those of you who
73:06 - actually know and if you use promises
73:08 - regularly did I this is pretty like
73:11 - correct yes 1215 that's probably gonna
73:20 - be like a 45 minute video isn't it oh no
73:28 - plus marketing my coffee
73:34 - the last changes work oh my goodness yes
73:38 - oh that's a really awesome one okay
73:45 - somebody in the chat says there's been a
73:48 - mark on the top right of the whiteboard
73:49 - that you have that's been there for four
73:51 - weeks oh well we must fix that
73:57 - no no I'm not gonna get another paper
73:59 - towel I'm gonna reuse my where did they
74:01 - go okay here we go top right oh this all
74:09 - right okay everything's okay with the
74:13 - universe again all right so now here's
74:23 - the thing how's my list is there
74:29 - anything right if should I just go
74:31 - straight to promises dot all and like do
74:34 - something where I ask I mean obviously
74:36 - the word Nick API I could get five I
74:40 - could get probably get five random words
74:42 - with one call but I could create an
74:44 - array and then use promises dot all I've
74:47 - actually never used promises not all but
74:52 - that that's probably what I should do
74:54 - next right and then I should write my
74:56 - own asynchronous function that creates a
74:58 - promise like I could promise a PHY load
75:00 - JSON in p5 right
75:03 - would that make sense to do that's what
75:07 - I'm thinking give me some feedback on
75:09 - that then you know I'm gonna I'm gonna
75:12 - go until one o'clock so I've about 45
75:13 - minutes I guess I won't get to a sink
75:15 - and a wait today unless I come back
75:17 - later this afternoon or something
75:19 - actually what time do I have no I have
75:22 - something yeah I have to go buy one well
75:24 - after one right I don't need this so
75:32 - this is a good point so alka writes in
75:36 - the chat I don't need the quotes for
75:38 - this property but the reason why I had
75:40 - if there was because originally I had
75:41 - some some property that started with a
75:43 - number but it's fine that's all I got
75:46 - not a key details I'm not too worried
75:48 - about that promise trace do async in a
75:52 - way making your own promise isn't that
75:54 - necessary oh that's interesting
75:59 - so far it just seems like then hell
76:02 - instead of callback hell hey welcome new
76:04 - sponsor Abhilash manaan thank you I love
76:08 - how that just like alerts me
76:09 - the sponsor it's really nice yeah Kate
76:15 - weak man makes a point saying so far it
76:18 - just seems like then hell but but truly
76:24 - it's yes I see your point but here's the
76:28 - truth of the matter is the fact that I
76:31 - don't have to indent any further with
76:33 - any of these makes it less hellish the
76:37 - callbacks have to be all nested inside
76:39 - of each other
76:40 - they can't be written as a list and that
76:42 - results in I didn't do a good job of
76:45 - like showing callback hell oh look at
76:51 - this there's actually callback hell calm
76:56 - so anyway so yes it flattens it that's
77:05 - the nice part yeah a sinking a weight or
77:08 - promises underneath exactly
77:09 - there's no fetch function in node that's
77:11 - a good point yeah major difference also
77:18 - between callback hell and then hell is
77:20 - error management writes David Davis all
77:25 - right now so let me ask I'm gonna do
77:30 - promises all look at all our orcs nobody
77:35 - nobody tell anybody that I'm just
77:37 - looking up how this works right before I
77:38 - do the tutorials I've never actually
77:40 - used it Oh interesting set timeout as an
77:48 - example oh oh I just give it an array oh
77:55 - cool all right all right
78:04 - so yeah let's try this let's try this
78:31 - what is this from anyway oh yeah look at
78:36 - this I never made it get an error but at
78:40 - fetch vendor okay no it's not only about
78:47 - indentation but if you're like me that's
78:49 - kind of the array doesn't have to be all
78:55 - promises that's interesting I don't know
79:00 - what that means use a short word a
79:05 - medium word and a long word something it
79:07 - can't be done in one call yeah I agree
79:11 - with you in principle alkanes make a
79:13 - suggestion to you to like have three
79:15 - different yeah let me try it that's
79:20 - actually not a bad idea and it keeps the
79:22 - order from the input array good point
79:26 - good point
79:28 - all right I'm gonna do that thank you
79:29 - that's a great suggestion all right
79:31 - let's move on to promises all
79:50 - all right anything that it's not David
79:54 - rights in the chat anything that's not a
79:56 - promise in the array will just get
79:57 - returned as if it were resolved by the
79:59 - promise that's cool
80:00 - console dot error air for errors please
80:03 - is much nicer that is an excellent
80:05 - suggestion also board Eve of which I'm
80:08 - bored of all I probably be ass pronounce
80:10 - the name okay
80:15 - all right so let's statuesque Lee what
80:25 - the I'm very concerned about whoa that
80:37 - is crazy
80:38 - oh this is Oh David Bowie oh there's an
80:40 - I don't know if you were live in the New
80:41 - York City area I would highly recommend
80:43 - oh yeah no this is such an aside but I
80:46 - went to the David Bowie exhibit at the
80:48 - Brooklyn Museum which is really
80:50 - fantastic they did a really nice job at
80:52 - the audio tour in particular but one
80:55 - thing I learned and is that David Bowie
80:57 - actually implement a piece of software
81:01 - called the verba sizer and it was like a
81:05 - lyric writing generative text app and
81:09 - they had it actually running at the
81:12 - exhibit and I wanted I want to do as a
81:16 - coding challenge to recreate the verba
81:18 - sizer so somebody remind me of that or I
81:20 - don't know add it as a rainbow topics
81:22 - thing or something but not right now all
81:26 - right
81:38 - just okay all right now it's time for us
82:01 - to keep all of our promises so uh if
82:03 - you're watching this I just made a video
82:06 - about JavaScript promises so if you
82:10 - haven't seen that one you might want to
82:11 - check the video description go back and
82:12 - watch that one first and in this video
82:14 - what I'm going to look at is what
82:16 - happens if I make many many many many
82:18 - profits I put many promise rings all
82:21 - over all my fingers and I want to keep
82:24 - all of them promises dot all what is
82:27 - this promises all thing so let's so
82:31 - we're promises that all can become
82:32 - really useful let me give you an example
82:34 - a lot of API is that request data from
82:36 - UM have this sort of pagination quality
82:39 - to feature which you say give me they
82:42 - don't give you like if you want a
82:43 - million results from an API you can't
82:45 - just say give me a million things you
82:47 - might say give me the first page which
82:48 - has 100 then the second page which has
82:50 - 100 and so on and so forth and you want
82:53 - to like do something once you've gotten
82:54 - all of the data now you want to keep
82:57 - everything in the right order this can
82:59 - be really tricky to do with like
83:00 - multiple callbacks nested callbacks
83:02 - callbacks hell but promises has a
83:06 - feature which allows us to do this quite
83:08 - nicely so I have what I made in the
83:10 - previous video is an example program
83:13 - that asks for a word from the word Nick
83:16 - API then it takes that word and goes and
83:19 - asks for an gif
83:20 - associated with that word from the giffy
83:22 - API and you can see the code here is
83:24 - making use of promises and is sequencing
83:27 - actually all these promises so I could
83:28 - probably use promises at all in some
83:30 - weird way with this but thank you to
83:33 - Alka from the chap who made a nice
83:35 - suggestion what if what I'd want to do
83:37 - is I want to get I'm just gonna do this
83:39 - in a simple way I want to get three
83:41 - words from the word Nick API I want a
83:43 - word with three um am I doing here what
83:51 - if I want to get three words from the
83:52 - word Nick API I want to get a word with
83:55 - that's love length 3 of length 4 of
83:57 - length 5 so I'm going to and so let me
84:00 - actually pause for a second
84:07 - I'm gonna match you I'm gonna double
84:10 - back
84:10 - I want to freeze this code the way it is
84:17 - and I want to say promises all so I'm
84:26 - gonna do this
84:27 - Oh 102 okay
84:34 - so just don't save unsaved
84:50 - what just happened there oh oh I don't
84:58 - have my David Bowie anymore alright
85:01 - that's fine just go but I'm gonna go
85:03 - from where I tabbed into the code and
85:07 - you can see the code here where I have
85:10 - this sequence of all the different steps
85:12 - each returning a promise and what to do
85:14 - when that promise is resolved now I
85:15 - might be able to do something where I
85:16 - use promises at all even with this but
85:19 - I'm gonna do a different scenario thank
85:21 - you to Alka from the chat who suggested
85:23 - this so what I'm gonna do let's get rid
85:25 - of for this let's get rid of the giffy
85:26 - API as fun as that might be and let's
85:29 - just go back I'm gonna simplify this and
85:32 - right now it's just gonna show me a
85:34 - single word meta sulfites blue toid by
85:39 - some great words here so now what I want
85:41 - to do is I'm gonna say word Nick three
85:45 - word Nick four word Nick five now this
85:49 - is silly I could make an erect there's
85:51 - so many things I could do to make this
85:52 - better but I what I want to do is change
85:54 - the minimum length so minimum length is
85:58 - three maximum links is 3 4 4 5 5 so I
86:03 - want to get three words of different
86:06 - lengths and the reason why I'm doing
86:07 - this is I want to show you how I can get
86:10 - all of these API calls and retain the
86:12 - order of them which is really helpful
86:14 - when you have like all these nested
86:16 - callbacks you don't know what's
86:17 - happening when so this is gonna make our
86:19 - life much easier
86:19 - alright so now let's just make sure this
86:21 - is still working with word Nick one oh
86:27 - no three sorry there we go AB so what
86:33 - I'm going to do something very silly is
86:34 - I'm actually first just gonna copy paste
86:36 - this two more times for four so you can
86:46 - see but it's not coming back in the
86:48 - right order look at this sometimes the
86:51 - four one two three four why they're two
86:53 - four-letter words I must have messed
86:55 - something up but it's really not coming
86:58 - back in any consistent order that's
87:01 - weird
87:01 - oh I forgot
87:03 - but five here so it's not coming back in
87:12 - any consistent order which is a bit of a
87:13 - problem I want to be able to keep that
87:15 - order so one thing I could do is first
87:18 - of all I could I could I could do it
87:26 - this way so once I get the first word
87:29 - then I'm gonna say return fetch word
87:33 - Nick for I could I could go back and
87:35 - change thing oh my goodness so I'm gonna
87:40 - just rewrite this a different way right
87:44 - I could say give me the word Nick three
87:47 - create the P then go do word Nick four
87:50 - and then do this again and then do word
87:56 - Nick five and then do this again right
88:05 - this I could do right start by getting
88:08 - the first URL then when I get that go to
88:10 - the next one when I get that go to the
88:12 - next one and I often have a return to
88:14 - return the next promise so this is a way
88:16 - that I could sequence all this stuff now
88:20 - you can see it's actually coming in one
88:22 - at a time right so it's waiting to make
88:25 - that API call until then previous one is
88:29 - done now here's the thing I know what if
88:32 - I don't want to wait I want to just make
88:33 - all these API calls make these API calls
88:35 - make these API calls make these API
88:37 - calls I don't want to wait and then I
88:39 - just want to like display them on
88:40 - they're all done so I don't want to see
88:42 - them like coming in sequence like this
88:43 - this is where promises doll can really
88:45 - help us confess I've actually never used
88:48 - promises that all me names at once for
88:50 - making this video so I kind of gotta
88:51 - have to figure this out so let's think
88:55 - about this
88:56 - the idea of promises dot all is that
89:00 - what I want to do is I want to create an
89:01 - array of promises so if I have I'm just
89:06 - going to sort of speculate here if I
89:09 - have an array of three promises I can
89:12 - say promises dot all give it that array
89:17 - and then I can say that then like
89:20 - results let me just type this out here
89:27 - and then I can also I always have my
89:29 - catch error and people are telling me to
89:30 - use console dot error error should have
89:33 - it like look nicer I can have this and
89:37 - I'm missing a parenthesis there there we
89:40 - go
89:40 - so the idea let's move this down here
89:43 - this is the idea the idea is that if I
89:47 - create an array of promises I could say
89:50 - hey all of these promises when they're
89:52 - all resolved then show me the results
89:56 - and key show me the results for all
89:59 - those promises in the order that they
90:01 - were in the array which is really key ok
90:04 - so this is how it's supposed to work
90:06 - I think timeout pause for a second
90:10 - because I see some suggestions coming in
90:12 - the chat fetch fetch fetch all right the
90:19 - problem with this is that I need to I
90:29 - have the extra JSON step so how am I
90:35 - like for example all right so let me go
90:39 - okay so what's the next step I mean the
90:41 - idea here is that all I would actually
90:43 - need to do is all of these return a
90:45 - promise so I could say hey make these
90:49 - three API calls and whoops let's hold on
91:01 - zoom out here what's ah missing a
91:03 - parenthesis sorry everybody
91:05 - so I let's do it let me do it this way
91:07 - just I just want to be like super
91:11 - explicit about what I'm doing here
91:19 - so what if I make these three API calls
91:22 - and of course this could be in a loop
91:23 - and all sorts of things and then I make
91:25 - this array that just has all three of
91:30 - them in there now I could say so this is
91:35 - going to actually work I'm going to
91:36 - comment out what I had before
91:38 - this is actually sort of going to work
91:41 - but not exactly so let's see what this
91:44 - does this is the idea I'm gonna make
91:46 - three requests I'm gonna put them in an
91:48 - array and then it would say when all of
91:49 - them is done show me the results let's
91:52 - see what happens oops promises is not
91:56 - promised at all promised at all
91:59 - not promises done all promised at all
92:01 - and there we go all three of the
92:04 - responses are there so this is actually
92:06 - good it worked
92:07 - the problem is fetch has this weird
92:10 - nuance to it so if I weren't using fetch
92:13 - I could almost in a way be done with
92:14 - this video-tutorial
92:15 - but because I'm using fetch if you
92:17 - recall when the promise comes back I
92:20 - need to ask for that I need to create
92:23 - another promise to convert it to the
92:25 - data that I can actually use so I think
92:31 - this is where a higher order function
92:33 - could be come in useful
92:35 - I hesitate to do it this way I could use
92:42 - it then with each one of these and
92:44 - create the other promise but let's let's
92:46 - think about this I think the higher
92:47 - order function might actually be useful
92:49 - so if yeah if you don't know about
92:50 - higher order functions these are
92:52 - functions that I did a whole video to
92:57 - robot what they are now I'm kind of
92:58 - forgetting but they're functions that
93:00 - actually generate new functions for you
93:01 - or take functions in as an argument and
93:04 - so one of the ones with an array is a
93:06 - map is that my function called map so
93:09 - the map function is a function that
93:11 - would allow me to pass a function to
93:15 - execute a function in every element of
93:16 - the array so I could say promises dot
93:20 - map so what this would do like let me
93:24 - just show you what I mean by this I'm
93:30 - gonna comment that like what this would
93:31 - do this
93:32 - order function I'm using the arrow
93:34 - syntax you can go watch the video where
93:35 - I go over this explicitly takes every
93:38 - element of the array and then execute
93:41 - the code console dot log element on it
93:44 - so let me show you that and we can see
93:47 - there's three promises so what can I do
93:49 - I should be able to say make a new array
93:55 - so I'm gonna call this promises to map
93:59 - makes a new array so that's weird that I
94:06 - did console that log that's kind of a
94:08 - silly thing to do more likely what I
94:10 - would do like with the point of using
94:12 - map let me just show you really quickly
94:13 - in this video like if I have two three
94:16 - four actually let me just do this in the
94:18 - console so bear with me for a second if
94:21 - you already know what map is skip ahead
94:22 - thirty seconds or a minute so I'm gonna
94:24 - say nums is four three one five nine
94:28 - that's an array of numbers can you see
94:30 - that I'll make it a little bit bigger
94:31 - now if I say nums dot map n becomes n
94:38 - times two what this does it makes a new
94:41 - array with all those values multiplied
94:44 - by two but nums is still the original
94:48 - value so I am creating a new array with
94:51 - a modification of all those values so I
94:53 - can do something and again you can go
94:56 - back and watch my other video which goes
94:57 - through this in more detail but now I
94:59 - could do something very similar here I
95:02 - can make a new array of promises like
95:07 - this but do I have to wait till it's
95:11 - resolved I might have to wait till all
95:12 - of these are resolved let's see let's
95:18 - see if this works
95:22 - console.log promises I think this is
95:25 - gonna give me an error let's see if this
95:27 - works
95:27 - I think there's a missing step here this
95:29 - asynchronous stuff is very confusing
95:30 - because I've got this is the right idea
95:32 - conceptually promises not to find well
95:38 - this is promises one ELT JSON is not a
95:42 - function yeah so
95:45 - I need to get the reserve the resolved
95:48 - promise the response from the promise so
95:52 - I guess what I could do here ah aha
96:03 - thank you to Alka the chat don't forget
96:06 - it saved me here of course this is a
96:09 - promise so what I need to do is execute
96:15 - the function dot then on it I need to
96:18 - wait for it to be done and then what I
96:22 - can do is take that response and convert
96:28 - it to JSON oh boy this is this I don't
96:30 - like this hold on back up for a second I
96:36 - have to think about this Paul not sure
96:42 - that's that's no good yeah yeah I mean
96:53 - so that that would work but I wonder if
96:59 - it might make more sense for me to
97:00 - actually just do promises all twice
97:18 - boys it's getting no or I think if I if
97:21 - I think actually if I write it out as a
97:23 - function it'll be more clear Oh me I am
97:35 - Samia is why not my one-liner I didn't
97:37 - see your one-liner oh oh my goodness
97:39 - Matt fetch map eggs use a for-loop a
97:48 - for-loop oh yeah good idea
97:53 - yeah no need for high order functions
97:55 - that's the point with all you should
97:57 - close your tutorial now all twice is
97:59 - slower get twice as much promise doll
98:03 - has a tutorial this is really confusing
98:04 - I use es6 everyday and I know that es6
98:08 - contains classes okay that's not hello
98:11 - Daniel make a list extract stuff and
98:12 - listen I think yes let me not go down
98:17 - the higher-order function route if I'm
98:20 - keeping this simple I should just make a
98:22 - for loop right yeah
98:42 - I think I'm gonna do this with a four
98:44 - loop to keep it simple where do I need
98:47 - to go back to
99:01 - yeah that's what I want to do me I am
99:03 - Samee that's exactly right I'm gonna do
99:07 - this without a higher so that's yeah
99:10 - let's see if we can make this happen let
99:12 - me do this without the higher-order
99:13 - function thing and but I'll mention that
99:20 - you could do this as a higher-order
99:21 - function maybe I'll show that our leave
99:23 - that as an exercise so I want to back up
99:26 - I believe there was a point where I just
99:31 - had this yeah okay I'm not using a for
99:40 - each loop don't don't try to don't try
99:42 - to trick me okay so ordinarily I might
99:52 - be done here because I have my three
99:56 - promises they've all been finished and
99:58 - I'm looking at the results of all those
100:00 - promises the issue is the fetch if you
100:03 - recall has this extra weird thing where
100:06 - when I get the response back I need to
100:08 - execute an I need to have another
100:09 - promise to convert that information to
100:13 - data that I can actually use which is
100:15 - that dot JSON function so what I
100:17 - actually need to do is take this array
100:20 - of promises and make a new array of
100:22 - promises with all of the conversions to
100:25 - JSON and I could do that with like the
100:27 - map function which is a higher-order
100:28 - function check out and watch my
100:30 - higher-order function video tutorial and
100:32 - maybe I'll do that later or just leave
100:34 - it as an exercise but but let me let's
100:38 - do it this what's do it a simple way
100:39 - here so let's call this promises one and
100:42 - then I want to have another array called
100:45 - promises to and I could use promises not
100:48 - all twice but let's not do that right
100:51 - now let's say promises to is an empty
100:53 - array you know I'm thinking about this
100:54 - so I'm gonna say for every promise I'm
100:57 - gonna use a for of loop of promises
101:00 - right this is saying take everything in
101:03 - this array and what happens when you
101:07 - have a promise when it's resolved I say
101:10 - promise
101:11 - and then I get that response this is
101:13 - exactly what I have down here right
101:16 - response I can take this I get their
101:18 - response and instead of and what I want
101:23 - to do is respond stock JSON returns a
101:25 - new promise so what I want to do and I'm
101:27 - gonna add the curly brackets here so I
101:28 - have more room to kind of work with
101:31 - whoops what's missing here why is this
101:37 - not oh there we go okay so now what I
101:43 - want to do look I got this formatting is
101:45 - confusing but for every promise in
101:47 - promises then what I want to do is get
101:50 - the next promise and put it in promises
101:53 - too so what I'm gonna do is I'm gonna
102:01 - say console.log promises to now weirdly
102:04 - enough I have a feeling this is gonna
102:08 - show me nothing let's see let's see what
102:12 - this does
102:12 - Oh promises boy this is really starting
102:19 - to look like that spelled incorrectly
102:20 - the more you look at a word promises one
102:23 - Oh promises one that's the promises one
102:26 - okay now look at this this array is
102:28 - empty but it's actually it's actually in
102:32 - there the nice thing is it's empty
102:36 - because this these then is happening
102:40 - asynchronously and I'm console logging
102:41 - it here but I think I'm actually going
102:42 - to be okay because once I use promises
102:45 - all so again let's and I put in promises
102:50 - too I think we're good now let's catch
102:59 - 924 No all right wait
103:06 - No
103:11 - oh oh I've done something bad
103:21 - yes I've done something bad I see I see
103:26 - I made a mistake I made a mistake
103:30 - oh I was doing so well today till I
103:32 - Frenchie promises not all I need to
103:47 - actually yeah okay ah I know what I did
103:51 - wrong I just trying to figure out where
103:52 - to back up - yeah it's empty
104:04 - no this is all gonna be fine
104:07 - all I need to do let me just show you
104:08 - how it's gonna work this will actually
104:11 - get it to work amazingly I'm just trying
104:19 - to figure out no I thought this would
104:22 - get it to work
104:22 - oh no no no no no that's not going to
104:26 - fix it wait
104:33 - oh yeah
104:40 - next promised he was on such a son yeah
104:48 - of course ah of course this is what I
104:54 - need to do I just totally did this wrong
105:11 - let me make this work and then I'm gonna
105:13 - back up
105:21 - there we go there we go alright this is
105:25 - what I needed to do it's actually much
105:26 - simpler than what I did this makes a lot
105:29 - more sense
105:32 - okay Oh back hurts like I'm hunched over
105:37 - today alright so Matt's yeah you once
105:41 - again I'm gonna back way up or I could
105:47 - go down that road and demonstrate what I
105:49 - did wrong actually you know what let's
105:51 - not back up
105:58 - let's leave the mistake in so this is
106:01 - where I was right
106:20 - right okay okay
106:29 - okay okay okay hmm
106:40 - so it's empty now I I have just actually
106:43 - made I've made a fatal fatal error and I
106:47 - almost wanted to like take this out of
106:49 - this video tutorial but I think I'm
106:50 - gonna leave in what I just did for a
106:52 - while and explain what this error is
106:54 - because this is really crucial so this
106:56 - kind of looks like the right idea right
106:58 - I have my array of promises then I'm
107:01 - going through each one and I'm asking
107:04 - for the new promise and putting it in
107:07 - the promises to array in the second when
107:09 - that's all done give me the results but
107:12 - you have I have to remember I forgotten
107:14 - something this is ace happening
107:17 - asynchronously so when I promises to
107:21 - like console.log promises to it's empty
107:28 - I actually need I need to have that
107:32 - array of promises I want to like get the
107:34 - promise so there's actually a mimei I
107:36 - made this overcomplicated what I
107:38 - actually need to do is just say I
107:42 - shouldn't be adding to the array here
107:44 - that was like weird right
107:47 - this is what I want to do I want to when
107:53 - for each one of the promises get the new
107:58 - promise back and put that into the next
108:02 - array so I'm gonna just actually say
108:09 - next promise equals so the next and let
108:14 - me let me shorten this just so we can
108:16 - see it this is the correct way to write
108:18 - this
108:26 - so if you look at this this is going
108:28 - through each promise one so I start with
108:30 - an array of three promises and again
108:33 - this could be done with Knapp to create
108:35 - a new array what I want is a new array
108:37 - with the JSON conversions of each one of
108:40 - those promises ah maybe I shouldn't have
108:43 - used fetch I made this tutorial extra
108:44 - complicated but this is good so what I
108:47 - want to do is one at a time I want to
108:49 - get the next promise from each one of
108:52 - those and here dot then returns response
108:58 - dot JSON as the next promise and pushes
109:00 - it into the array so let's just see if I
109:02 - got this right there we go so you can
109:05 - see right here I have three promises and
109:08 - then I have three words all in order so
109:12 - what I can do right now is once I have
109:13 - those final results I can that's an
109:18 - array and I can say I can say for every
109:27 - piece of data of results create P data
109:31 - dot word okay so I can now have a for
109:34 - loop here to deal with the array of
109:36 - promises that have all been finished and
109:38 - now we should see ah
109:57 - now I have the array of all promises and
110:01 - then there we go you know what I really
110:05 - sort of feel like let's I don't know why
110:07 - I didn't just use promises not all twice
110:09 - let's look at that so let's do this
110:17 - promises I think this is gonna make more
110:20 - sense promises dot all promises one then
110:26 - results return then
110:44 - diversity in the chat with a super chat
110:47 - rightz can you please for the next
110:48 - coding challenge code the lights-out
110:50 - game please huh I don't even know what
110:52 - that is but I could definitely consider
110:54 - it maybe I don't want to use promises at
110:59 - all they're all resolved
111:13 - oh I see so I should be able to say
111:18 - return I'm just going to try this
111:20 - promises all results map
111:41 - I'm just curious this should work right
111:48 - this should work let me just see I might
111:52 - have to redo this promises doll tutorial
111:55 - I'll have to come back and just do this
111:56 - again promise
112:02 - yeah anybody have any oh this will slow
112:13 - it down
112:13 - yeah slow mo it's a game with tiles that
112:19 - when you click okay thank you all right
112:22 - but this is how you could do it with
112:24 - promises that promise dot all twice I'm
112:26 - gonna so that was interesting
112:34 - let me go back
112:45 - okay
113:01 - okay okay let's try to review what just
113:08 - happened there and let's talk about
113:09 - maybe some other ways you could approach
113:11 - the problem this has definitely been a
113:13 - difficult one and if you follow this
113:15 - said I'm very impressed with you because
113:18 - I barely followed it and I made this
113:20 - video somehow but the idea first of all
113:23 - that I want to do here is use promises
113:26 - all to ask for - to execute some code
113:31 - when every single promise has been
113:34 - resolved all at once so I'm making 100
113:36 - API calls and then I just want to do
113:39 - something when all that has been
113:40 - completed so I'm simulating this idea by
113:45 - making three API calls and this is
113:48 - awkward but I'm just looking for a
113:50 - three-letter word a four-letter word in
113:52 - a five letter word from word Nick so
113:53 - this are three promises and I put them
113:56 - into an array now I could just say
113:59 - promises dot all for this array of
114:01 - promises but I actually need to do one
114:04 - more step because the final thing that I
114:06 - want to do is get the actual data so
114:09 - what I'm going to do is one at a time
114:12 - create a second promise from each one of
114:15 - these and put that in a new array so
114:18 - this promises to array has all of the
114:21 - promises from getting the response from
114:24 - the API converted into JSON once I have
114:27 - that then I can say promises promise all
114:32 - dot the second array of promises when I
114:34 - get the results though that'll be the
114:37 - results of each one of those promises in
114:40 - an array in order and I can go through
114:43 - that array and create an add a Dom
114:45 - element with that word if there was an
114:47 - error in any of those I can catch the
114:50 - error down there so some other ways you
114:52 - could approach this problem is number
114:54 - one is I could use a map higher-order
114:57 - function I could use map to generate the
114:59 - new array of promises and I could even
115:02 - probably just use I could chain two
115:04 - calls to promise dot all so I could use
115:07 - promise all then take those results
115:10 - right make an array of the next
115:13 - promises and then do promise that all
115:16 - again so I'm gonna leave this code as is
115:19 - for your reference I'm noticing some
115:23 - people in the chat telling me how I'm
115:24 - doing this all wrong so if this video
115:27 - has been published maybe it's not the
115:29 - best but I'm gonna leave it as is I will
115:31 - maybe an end let me know in your
115:34 - comments about how it's wrong and better
115:36 - ways to do this and I'll try to link
115:38 - from here also to any other get relevant
115:41 - examples on github that kind of rewrite
115:43 - this in a different way okay thanks for
115:45 - watching this kind of insane tutorial on
115:48 - promise not all oh my goodness the slack
115:56 - chat I didn't notice right alright so we
116:11 - somebody in the chat told me I did this
116:12 - all wrong which is basically the active
116:17 - program use always just doing everything
116:18 - all wrong and let me say I'm scrolling
116:23 - back up
116:32 - I can't find maybe that comment got
116:35 - removed doesn't make sense to use a for
116:41 - loop for this if you have promise dot
116:44 - all this is kind of wrong it does work
116:45 - but it is not something you will be
116:47 - proud of definitely not proud of it
116:51 - that's correct
116:53 - there's legs up the next comment said I
116:55 - love you I love you too okay so here's
117:02 - the thing I don't think that writing any
117:05 - code is ever wrong
117:07 - it's just code and I can tell you why
117:11 - it's first of all it wouldn't even be
117:12 - right look I have three words all at
117:15 - once of different lengths how could that
117:18 - how could that be wrong
117:19 - so I'm actually okay with this the code
117:22 - wise and I think that I explain this in
117:24 - a way that's fine I'm going to wait for
117:29 - Mattia to give me feedback as to whether
117:31 - this could be edited into a useful
117:35 - tutorial or not so let me and again I'm
117:42 - not trying to do this in the most
117:43 - efficient or fast way I'm just trying to
117:45 - explain how these concepts work but so
117:50 - I'm going to so I'm definitely to be
117:52 - back tomorrow morning and it seems
117:58 - unlikely that I'm gonna get to do this
118:00 - today but if I have some time later this
118:02 - afternoon I might come back and talk
118:05 - about a sink and a wait I have to go now
118:09 - I have a bunch of meetings this
118:11 - afternoon so I think I'm gonna leave
118:13 - where I am so far with promises and I'm
118:17 - gonna come back so I'm looking at the
118:23 - chat alright so and I'm gonna come back
118:29 - so I'm definitely be back tomorrow so
118:31 - let me remind you let's let's do some
118:33 - housekeeping here before I go I'm
118:36 - attempting to do twice weekly live
118:38 - streams this summer except for the weeks
118:40 - when I'm not in town which will be a lot
118:42 - of weeks so my goal is to always have
118:45 - four
118:46 - sessions per month and so I'm kind of
118:49 - doubling up here in May and June I'll be
118:52 - away for two to three weeks in end of
118:54 - June July and to three weeks in August
118:57 - so so that's the plan for the summer I'm
119:00 - going to be focusing on tensorflow dachi
119:01 - s ml5 I hope you do some coding
119:03 - challenges as well yeah I guess I should
119:09 - address this fact that people seem to
119:10 - talk about my Lisp which I may or may
119:14 - not have people have lists I guess this
119:16 - is microphone if whether or not I have
119:18 - one if I do have one I think I probably
119:19 - do cuz people I keep mentioning it no
119:21 - one ever mentioned it before when I had
119:23 - the lapel mic but with this microphone
119:25 - it seems to be mentioned a lot so it's
119:27 - either this microphone seems to
119:28 - exaggerate it or bring it out a lot yeah
119:31 - I'm gonna try to find my lapel mic just
119:33 - I find this awkward wearing this
119:34 - microphone and kind of self-conscious
119:36 - about it so that's what I've done for
119:45 - today I ran out of steam let me see if I
119:55 - can answer let me take a few minutes to
119:57 - answer any questions I will answer
120:00 - questions but if you're a sponsor I'll
120:02 - notice your question in the chat but I'm
120:04 - gonna try to I will try
120:11 - don't break the box under your shirt
120:14 - they are expensive what box under my
120:16 - shirt I'm gonna let me put on my goodbye
120:19 - song and see if I can answer a few
120:21 - questions
120:24 - [Music]
120:30 - dan is there a Melvin asks is there a
120:34 - good way to manage sensitive data like
120:36 - API keys and open source projects that's
120:39 - a great question so you might be
120:40 - noticing that I have this API key here
120:45 - copy it down use it whatever I'll sign
120:48 - up for another one
120:49 - I mean don't but I'm not worried I'm
120:51 - this is a API key for a word Nick I use
120:56 - it for teaching and educational purposes
120:58 - if I were using this key in a production
121:00 - app I might not want it to be visible so
121:03 - that other people could use it so there
121:05 - are a variety of ways that this can be
121:06 - tackled number one is if you write your
121:08 - own server-side code then you can hide
121:12 - your API key more effectively if your
121:15 - API key is just there and your
121:17 - javascript in the browser in a
121:18 - client-side code it's visible you can
121:21 - also open source your project but not
121:23 - include the API keys on github for
121:26 - example by using git ignore and other
121:29 - techniques you can use environment
121:31 - variables on servers so there are a lot
121:33 - of techniques for doing that I'm
121:34 - choosing not to worry about that right
121:36 - now I suppose that might be a worthwhile
121:38 - topic for a video at some point
121:44 - mmm floor rights I had to learn promises
121:47 - without any documentation because nobody
121:48 - was making an understandable video was
121:53 - this understandable melon goggles first
121:57 - of all did you have a name melon goggles
121:58 - before you watched my channel can you
122:01 - tell me a bit more about why let is
122:03 - better than waar so first of all I
122:06 - wouldn't say that let is better than VAR
122:08 - lettuce just another way of declaring a
122:10 - variable it's different than bar it is
122:12 - the convention now var is from earlier
122:15 - versions of JavaScript let is from newer
122:17 - it fixes some issues with something
122:20 - called scope and I actually have a whole
122:21 - video tutorial about this var let like
122:25 - just try VAR let Schiffman in Google and
122:29 - there we go let versus var so there you
122:32 - go so you can watch that particular
122:33 - video as well
122:39 - [Music]
122:46 - and look take a look at the chat check
122:51 - out the ITP show video today share it I
122:54 - would love for people to know about ITP
122:55 - and see that but melon goggles you
123:04 - didn't tell me if this video actually
123:05 - helped you understand promises or if it
123:07 - matched up with the way that you
123:09 - understand promises Sean asks ever plan
123:13 - to get into our XJS oh no that was mmmm
123:19 - Fleur I got confused I don't I don't
123:24 - know what rxjs is Gus asks do you prefer
123:28 - p5 over processing if I'm being
123:32 - perfectly honest I probably prefer
123:34 - processing over p5 that's just if I like
123:38 - if I have to like if it's like somebody
123:41 - somebody came and knocked on the door I
123:43 - open the door and they said make me a
123:46 - phyllotaxis spiral in 15 minutes and
123:48 - I'll give you a hundred thousand dollars
123:50 - I would open up processing not not
123:53 - JavaScript but I do prefer in for some
123:57 - scenarios using p5 for teaching because
124:00 - of the share ability on the web so there
124:02 - are some advantages there and for the
124:04 - stuff type of stuff I could do with Dom
124:05 - manipulation but but I do and also
124:09 - because of the existence of tensor flow
124:11 - Jas I
124:12 - that's a nice reason as well now bill is
124:20 - I'm not gonna I try to avoid the
124:22 - shoutout or write name on the board sort
124:25 - of request cuz I don't know how to
124:26 - I don't know how to like I don't like I
124:30 - hate to disappoint people but I can't do
124:33 - that for everybody
124:33 - but I could write I'm writing the word
124:37 - nabil on the whiteboard okay I did it
124:39 - just for this one time over
124:41 - [Music]
124:53 - sensei asked submit should you used the
124:55 - NMS color bracket on a package and Adam
124:58 - thank you for that suggestion Oh Const I
125:03 - should be using Const yeah
125:09 - Shuba mask what do you think about the
125:11 - future of ml in JavaScript it's exciting
125:13 - to me I'm excited about it with with all
125:18 - the possibilities now I think there's a
125:20 - rich future and I hope it can be used as
125:22 - a way of providing access to machine
125:26 - learning education and getting more
125:27 - people to question and be critical about
125:30 - the use of machine learning algorithms
125:31 - in our siding with the social impact is
125:33 - Wow the battery on this sound thing see
125:39 - now everyone's asking me to write write
125:41 - write their names on the board I've got
125:43 - to go so I'm committing to being back
125:45 - tomorrow morning tomorrow morning I will
125:47 - cover a sink and a weight and I will
125:51 - also get back to tensorflow Jas if I
125:55 - have some extra time I might try to
125:56 - because I want to start with tomorrow
125:57 - with tensorflow Jess I might try to come
126:00 - back and do a quick quick tutorial about
126:02 - a sink and a weight um later this
126:03 - afternoon but don't count on it
126:05 - unlikely but possible thanks for
126:07 - watching everybody and thanks for all of
126:10 - your support and feedback it means a lot
126:13 - thank you all right so I am going to uh
126:16 - I'm gonna play the I'm gonna play you
126:19 - out
126:29 - let's find something we wanna make some
126:32 - crazy idea
126:41 - [Music]
126:52 - [Music]
127:06 - [Music]
127:19 - [Music]
127:26 - [Music]
127:29 - you
127:37 - you

Cleaned transcript:

good morning whoohoo it's the goto screen on a I'd no idea what day of the week is it Wednesday I'm standing here with my green screen and my laptops and my train whistle and my markers and my tape and my bell I'm peering over here to see if the chat is saying hello to me so let's see if the computer is actually available for us to look at I was kind of rushing to get set up and it wasn't completely set up there we go Here I am and now I need my magical cloaking device which I will put over here so that this laptop doesn't block your view of code and things that knope's this this needs to go a little bit further over hello how are you it's a beautiful day in the neighborhood it is a beautiful I don't know it's a little muggy out in New York today but this here I have something to tell you it's not really technically the summertime but for me it is the summertime the semester at NYU wrapped up last week that's substantially my fulltime job makes it quite difficult to keep up with making these video tutorials although the nice wonderful opportunity that I have is that I do these videos also as part of my work teaching here at NYU but now cool the semester has finished courses are over I'm still like trying to get my head reattached to my body and make my todo lists and get organized for the summer but I do have some good news scheduling wise which is that I will be here for twice a week livestreams most weeks however there will also be weeks during the summer where I am traveling so just I just wanted to open today with giving you a little sense of schedule so I'm gonna be here now through the end of June hopefully with twice per week live streams once or twice then I will be away for a couple weeks probably the first two weeks of July then I will be back for two to three weeks and then I'll be away again for three weeks so most of August there'll be very little coding trained in August a lot of coding training June and a half as much coding train in July that's the plan for the summer now the topic that I will be covering this summer you know I will continue to do some kind of a variety of coding challenges here and there and touch on different things but the main focus of the tutorial content of this channel will be working out a better selves Bordeaux you already know what the answer is here ah shoot I hit the wrong button um we'll be attentive OGS and the ml5 library so um one thing that I'm doing which is I feel a little bit backwards but I think it's gonna work for me also I have this micro fine that other microphone that attaches to here later but I still have this strange Madonna microphone bug you know it's a broken elbow it's hard to do my voguing as usual what was I saying oh oh yes backwards so I'm I feel like I'm doing things a little bit backwards in that I am well maybe not but what the the domain my goal here the thing that I really want to prioritize is beginnerfriendly machine learning tutorials using the ml5 library but there's two things that are keeping me from starting with that immediately number one is we're still here at ITP working on the ml5 library and getting it up to date with the newest version of Hunter flow yes so it's not even really ready for me to show that's number one and number two is I feel like I will do a better job with the beginner ml5 tutorials if I have kind of worked out knowledge and experience with tensorflow j/s myself so you use ml five you don't need to know censor flow yes but to develop ml five and to kind of understand a bit about how it works behind the scenes knowledge of tensor flow chess is useful so where I am so far in this trajectory is I did a lot of tutorials about neural networks with no dependencies whatsoever just this kind of toy neural network library then now I'm starting with tensor flow chess to kind of redo a lot of that but use tensor flow DJ s behind the scenes and then I'll move on to ml five that's kind of the plan for the summer let me check the slack channel okay the answer is unicorns that hint rainbows this is not me I am swimmy asks is this the new standard Mike I mean unless people really think it's better it's not it's just that when it was ITP thesis week all of the I a lot of the microphones that I had up here got used for presentations downstairs and I just haven't tracked down where they all ended up so I can't find the one that attaches here by the way I'm wearing a new coding train hoodie this one is actually not technically available for sale but I should add it to the store this I got as I use printful to print merchandise it's a company printful and then I sell the stuff through store envy I think it's coating train dot Storenvy comm something like that so if people like are interested in this hoodie let me know I'll add it to the store there is a hoodie there but it's like a different one this is the anyway it's not that important Barnsley Simon writes in the chat that Barnes Lee's fern can be done since the photo says that it's interesting I would like to see that is our rim in the chat asked is he going to talk during all this live stream or is he going to do something mostly talk I might if we're lucky I'll do something the ratio of talking to doing something is high I'm not very good at the doing of something I will do my best I would say that if the talking is too much for you you could wait for the edited videos that come out after the live streams that get rid of all of my talking and try do and there's still a lot of talking but reduce the amount of talking and emphasize the doing alright so so there's a reason however why today I will not be talking today this microphone really is makes me very selfconscious it's a bit more breathy mouth sound yeah yeah there's not I mean I could one thing I could do is I could bend it away from my mouth a little bit maybe I was too much sorry I have my monitor where I see myself over there that's why I keep looking over there instead of looking at you my friend watching this live stream alright let's see if that's let's see if this is better okay what I was going to say is the reason why I will not be talking about tensorflow Jess today is that in order to use tensorflow Jess effect I need to I need to be comfortable the idea of promises so I promise to you that I will cover tensorflow digests that no no I promise to you that I will cover promises then I will cover tensorflow yes catch I don't know what I'm gonna do if I catch an error going on the classroom next door to me I thought it's this summer there wouldn't be so that's my plan today I'm going to cover promises and the key words a sink and a weight and how those work in JavaScript all right looking back tape the upper part to your face no interesting idea this is what could possibly go wrong we've been putting some tape here oh that I have to look hold on let me what could possibly be go wrong am I gonna have like a bald patch what if I tape it to like my ear behind my ear all right that feels a little more stable actually all right now I have a few other important but now they're not important here it's important you can go do something else but I have a few other announcements pieces of information to let you know about number one there's music can anybody hear that music there is if I go to youtube / the coding train there's me right now live you can check out the recent highlight reel of the ITP spring show so if you haven't seen this already check it out there's all these wonderful projects made by the students here at ITP so I encourage you to check that and then you might also notice something new here sponsor bump bump bump bump so I am baited people are talking you the voice is low if in the slack Channel good segue here if you could let me know if the audio is okay or problematic I can always bump it up there's this new sponsor button so I am betatesting YouTube's a new sponsor feature which is very similar to patreon I have a patreon page and so what I want to mention is mention is if your intro look at this oh they redesign stuff look at that or maybe I don't know who knows so if you sponsor on YouTube right now I'm using both to fund this channel I'm using both YouTube sponsorships and patreon the YouTube sponsor a sponsorship is the equivalent of the $5 patreon level so you will if you choose to sponsor via YouTube you will get an invitation to the slack channel and you will also get a I will mail you stickers sometimes we did here hopefully sooner than that but takes me a while to get to it and stickers like these coding train stickers I have here alright and then but you also get some benefits like if I go here look there's me if I look at the chat I don't know if anybody in the chat right now is a sponsor but if someone in the chat is a sponsor you can post some custom emojis Oh welcome to sponsor OB Lynde wall okay so OB Lynde wall is a sponsor now so here's the thing you get a badge you what but this is YouTube this is YouTube you get a badge but I can customize these badges so if anybody is a graphic designer out there and I mean I have a lot of coding trained design stuff already but if the the first person ever to sponsor on YouTube otherwise Jake Crowley I believe that was at the last livestream you get this sponsorship badge but I can customize those so if any wants don't we designed design the badges um just get in touch and then you can also you also get some custom emojis so anyone in the shadows a sponsor see we can figure out oh there we go I see here's the custom emojis but I can add a lot more custom emojis oh and here you could also type something here and hopefully I'm going to close this before people start realizing they control me they control me or they can try all right so I oh it's still there look at that how is it there oh because I entered wait how oh no no I'm not on that I'm so I lost my mind for a second all right that's all I have to say about that I don't want to I don't want to the I don't want to get get too lost in that I want to do I want to do something today so let's see here so let's get started by washing the whiteboard wait one thing I'm curious about by the way so I have slowmode on in the chat if anyone could help me with this I have slowmode on in the chat and which means you're limited to posting a chat message every 10 seconds I'd be happy to experiment with turning that off we had some issues with the chat and I can set that to any number so I'm curious if anybody has any feedback about what would be a good amount for slow mode and I'm also curious I believe if you're a sponsor maybe slow mode doesn't apply to you can anyone test that and I do know that let me just I do know that it's possible for me to make the chat exclusive to sponsors only but I'm not going to do that I instead yeah I'm not I'm not planning to do that at this point all right how come I can't switch to the other camera all right so can you see me over here let's take some time to wash the whiteboard this is what we do here on the coding train you know it's always good to have a good coding warm up some people like to warm up by stretching meditating having like a nice like healthy smoothie but you know don't don't put any added sugar in that that's not what you wanted your healthy smoothie but I I like to warm up and get ready for my coding day by washing cooling and advertising my merchant I sit and process you know in New York City is a very expensive place kudos let me just tell you not that I'm complaining I'm a very lucky yes you are a person sitting at your computer are on your mobile device watching somebody wash a whiteboard offline by tensorflow not a list is missing we have to rewrite that I didn't erase it somebody came in here in a race there is that I didn't write that stuff there's another play the serial feat music again but then I'm just gonna get a copy right alright remember when somebody asks is it just gonna be all talking or is he actually gonna do something well guess what it's not all talking it's also be washing away if that kind of doing something sir ready to code think about algorithms and things with this fresh wait all right now the question is the question is is this marker going to do the job for me oh yes it is okay that's plenty good so I think what I want to do to demonstrate promises and a sink and a weight is well first of all let me get rid of some of this stuff here that I don't need I kind of figure out where this sound is coming from hold on I'm looking in through a crack there's people watching a movie in this room who knows let me just look at the schedule it's on the door ah from 900 to 500 every day in the summer session is the fundamentals of filmmaking okay so so much for my plan that that classroom next to me would be empty all this time okay oh the camera went off yes thank you I hear that there were I heard that there were some comments in the chat about the sort of poor sustainability of me using all these paper towels and I agree I will I'm going to make an effort to get a cloth for next time thank you for that bit of feedback okay no where are we okay so I'm back here I love that so much has to be exploitive it's people watch it for ya so first of all you get to it eventually also the camera shut off every once in a while hi my apologies alright this is fine I'm gonna leave this here so I'm gonna go to terminal oh look at this and I'm going to do I'm so I'm just gonna get myself set up here and I'm going to create so we're gonna call this promises one and then I am going to in the most ridiculous way I'm going to open up everything in a text editor I'm going to use the atom text editor and boy that was weird I'm gonna go into promises one I'm gonna open that up I'm gonna get rid of the live fixed oh you know I should do this right now does anyone know anyone who's used anyone has used as anyone used p5 manager and know where the template files are stored let's actually figure this out so where are my node modules on this computer they must be with those right so it would be in something like user well let's just do this and being like user in lib somebody will tell me Oh update the P Phi I don't want to update the p5 library I want to like completely change the template for my project when I make a new one where does node get installed where do noble node modules get installed MPM list user local Lib node modules ok let's try that user local Lib node modules p5 manager let's see are there template files in here right so so now templates this must be it right index so I would think if I adjust these yep this looks good so what's index bundle versus index oh I want but while bundle is the thing that I use so let's use bundle and what I'm going to do is I'm gonna do p5 CDN I'm trying now to also use now that I'm gonna do twice a week live streams I'm trying to take some time to get myself better organized and have a better workflow not that I have such a great one but I'm gonna do my best so I'm gonna copy this and I'm gonna copy oh no I want to use the minified I'm gonna copy the well I think I can just say p5 dot min and then I wanted to get the Dom and I don't want to use the sound library I don't want to have any of this extra style stuff so that's good so I'm just adjusting my p5 manager template which generates the project and then for sketch touch yes I like to have just like a small window and I don't even want to have a draw function so that's what I want is my template so now if I go to the desktop let me delete this folder let me close everything here we go back to terminal let me actually make now let me go to the desktop let me make a directory called promises go into promises and now let's try to generate a new p5 project what's gonna add all those libraries I'll just delete I'll figure that out later p5 G B promises 1 let's see if that works and I'm gonna say Adam and open it up in Adam and we're gonna look at this sketch ah there's my new default code this looks small to me font size wise is it okay and that's perfect and now I just need to delete this folder so I probably should change p5 manager to not install that libraries folder but okay great so that's good now what I want to do is run a local server and okay and I probably should put in my template actually background zero so I can when I first run and I can see that it's there and working great that's definitely not a small font size I'm told thank you all right so now here's what I think I'm going to use so what I'm going to use to demonstrate the idea of promises is I'm going to look at pulling data from an API and I think actually I had a discussion in the slack channel about and people gave me lots of good suggestions about api's to use and I think I'm gonna use one that we didn't even discuss which is word Nick so if I go to my course my ITP course called programming from A to Z oh no it's not which will be taught again this fall and I go to week three api's data I'm gonna just go to word Nick random words and I'm gonna grab these okay let me just get random word okay so what I just want to see here to start with is I'm gonna say load JSON random word now I haven't actually launched into the tutorial yet I mean this is the true so in case you haven't watched before I take these edited lie these live streams and edit them into smaller tutorial chunks I say I not sure helps me do this who works on channel management for the coding training and it's you often during these live streams I go to like performance tutorial mode I'm not there yet alright so then I'm gonna say got data and I'm gonna write a callback function called got data I'm just gonna say console.log data I just want to make sure this works to grab something from great so I got every time I run this I get a random word and I'm actually gonna say no canvas and I'm going to say create P got data whoops no create P data dot word and maybe I will make a button the button can't doesn't work with a promise but that's fine let's not worry about let me not go any further than this okay so every time i refresh I get a random word from word Nik and just in case you're wondering I give it a minimum length of 5 letters so there's lots of other things I could give but that's it okay our IP is s oh I forgot about the International Space Station API why did I say I didn't want to use that the good thing about that is anyway all right let me think here so now here's the thing I think to effectively demonstrate promises I don't want to buzz market my coffee by accident they're not a sponsor I'm drinking my coffee over here usually I'll make my own coffee but today I purchased a coffee not showing the logo of the coffee so people are asking in the chat so what I have here so far is a p5 is a is a JavaScript this JavaScript code it's going to execute in the browser and it's dependent on the p5 library in a moment I am going to show how promises work and to do that I'm actually gonna switch from using the p5 library to a function called fetch which is native to JavaScript and actually just to be sure let's check some let's just make sure works that returns a promise oh all right but anyway that works I I'm not gonna I'm gonna sort this out okay I have to talk about promises are okay what time is it now 1130 yeah we're okay we're okay all right so the thing that I think that I need to demonstrate this yeah that's actually so Alka that's Alka writes in the chat the ISS API doesn't have HTTP support and that's actually one of the reasons why I don't want to use it because I was getting all these errors it would work because I'm doing everything locally but when I tried to put the example in code pen and different things I was having issues so what I want what I need is I need to be able to demonstrate sequencing so let's say I get a word from word neck maybe what I want to do next is get its definition so let's try to let's let's sort that out as well so where's the word word neck API I mean I'd almost love to go to a different whoops a different API just to demonstrate that idea like oh I could go to giffy let's go to the gift I and get a gif associated with that word that's perfect okay so I have a gift vapi tutorial I want to use things that I've used before so coding train website where is the gift fee so I need to find I need to find probably under tutorials under p5.js sound video would it be here eight data anybody can find this faster than me let me know I think it's nine giffy no ten yeah here we go Givi api so this should let's grab this so I don't need and simplify this call this giffy hold this random word giffy and I think to be honest with you I'm just gonna simple I should probably rename these something better a word Nick API giffy API let's just do this so if I get a random word then I could just say lo JSON jiffy API plus plus the plus the plus data dot word and then say got data data and then create images console.log that so let's see here random your word URL is not defined and then this here is where okay so I need to get data index zero where's the just the like URL for it would it be this embed URL that's what I want no to create the gift as an image I think maybe just URL let's try that so data data so create create image data data index zero dots URL let's try that let's just look at this okay one more time let's try that didn't work okay so but yeah I'm naming things poorly on purpose slug images Oh images ah this is what I need down two images dot images this should are they all gonna have this foreigner II with still dot images dot like this whoops let's try this No images let's see if this is this right Oh dot URL let's try this there we go okay this is a problem this is gonna be a problem okay I want to see the word still and what's the smallest version of the gift fixedheight small yeah let's do that and if it doesn't get anything Oh oops No oops almost ready to tackle promises this is fun so I need oh but I this is perfect cuz I'm gonna get to demonstrate catch when there is nothing oh oh this couldn't be better okay alright so now let me let me rewrite this in a different okay alright I'm ready for this now so the next thing I want to do is open up promises open up promises I want to just go here I'm not gonna write my own promise I'm just gonna use the promise there's no pending fulfilled rejected okay I'm just remembering these things then catch all right all right we're ready everybody I'm just trying to get a good well that wasn't good one flowerpot okay perfect looks if this gif isn't very good that's fine all right is everybody is anyone still watching it's been how long has it been 40 minutes and I'm now starting to do a tutorial this is too much fun I'm just waiting for the coding train to come a gift to come up by accident I should probably let it be less wheat but let's let the words anyway alright I don't know why I'm obsessed with with like I need a good opening gift no no oh boy that's not good either elderflower how is this a gift for elderflower oh my God my broken elbow I swear I'm gonna pick one of these I can sickly seahorses okay perfect all right we're good we're good we're good I understand why not everybody's just not just clicking the sponsor button how do i Christian a saying want to filter on PG rated gifts I would like to do that but I don't know I don't know how to do that in the it does anybody know how to do that really quickly in the in the API here yeah I know this is I really live it on the edge with this tutorial oh boy I promise you alright nobody's giving me a tip so I'm just gonna live on the edge rating equals G okay is that really correct rating equals G and yeah let's see if that works I think PG is probably fine oh look at this oh it couldn't be more perfect alright okay here we are we're gonna disfigure to do this I'm gonna cycle the cameras hello hello I have a promise to make sure by the end of this video I am hopeful that you and I together will understand what the how this promises thing is in JavaScript because me I'm a person who programs in JavaScript with callbacks but there has been for quite a while something called a promise in JavaScript and it used to be something that was part of certain libraries that you could import and add to your code now as of I think es6 which is es2015 whatever as of a more recent version of JavaScript promises are something native to how JavaScript works so I hope this video will answer the question for myself as well as you why should you care about this what is a promise and how do you make use of a promise so the demonstration so I have a JavaScript program already running it and I think a good way to demonstrate this is to look at making requests for data from api's so I am making a request for a random word from the word Nick API and then I am asking the giffy API for a gif associ of that word so if i refresh this page there we go i refresh this page again there we go so this is the demonstration I'm going to use now that at present the code for this is using the p5.js library with callbacks there are no promises involved there's a load JSON function that passes in the URL to a particular API it has a callback for when the data is ready then I get that data and then I go I ask load JSON again with another URL and then I who then I have another callback oh my goodness so here's the thing I don't know why I'm gonna walk over here but I'm just going to a callback really makes sense for this idea of an event right when the mouse is pressed trigger this function it's an event but if I want to sequence asynchronous things that happen my program meeting I'm making all these API requests I'm asking for this I'm asking for this and then when this comes back I want to do this callbacks can get very unwieldy and you can actually find yourself living in what's known as sound effects please call back hell so I'm going to show you right now call back hell now I've written this in a weird sort of way where I call low JSON okay that's just way too distracted where I call low JSON and then but you might be you might imagine that you use anonymous functions so when I call low JSON instead of having this separate you got data function I'm gonna take this up here and I'm gonna put this in here why is this so and then I'm going to I don't need it to be a name I'm just gonna pass the call back in here directly okay so this is perfectly normal to do up but then when this one when I then ago to the giffy API then I'm gonna I need this next anonymous function and I need that to go in here I don't want to name it anymore it's an anonymous function and there we go so now let's refresh this and it still works homeward bound oh there is no what's great about this is this is going to trigger an error sometimes when it can't find an image and I'm gonna need that with promises I'm need to figure out of handling errors so look at this this isn't even that bad this is fur but but look how this is just not sustainable first of all I don't like how much room I have here this is absolutely not sustainable I won't up load JSON have this callback then load is and of this callback this King I could just keep going with this and all of a sudden you can see my code it just gets indented and indented and indented more this isn't good could there be something better I don't know I don't know really if it's better or not but there is something and that something is called a promise a promise is an object so the idea of in so let's say so we have this load JSON function which expects a URL and then a callback here's another reason why we could get stuck in callback hell we might need multiple callbacks for different things like an error callback and then word that our code is even more unwieldy because then we have these sequences and we have different things for the success callback so this is what our code looks like with a callback now p5 at present doesn't support promises but if it did instead I could say something like this let promised equal lo JSON URL so the idea is instead of passing a function a callback you ask a function for a promise so because the p5.js library doesn't support promises and I am here to teach or learn which one I'm not sure yet about promises I'm going to instead use a function called fetch which is a function native to javascript in the browser that supports promises so this gives me a promise once I have that promise I have it as an object and I can do all sorts of things with it but the idea of a promise it's an object that can be in a certain state so the possible states are well wait a sec you look this up I know it's like rejected or accepted I don't know if it accepted as the right word let me go look this up wait why are you saying John oh whoa John oh yeah because you my brother's name is John okay so I forgot the no one will notice this right I know it'll ever notice that hello John on the whiteboard okay wait I need to look up what are the was I gonna say what's doing so well resolve resolve is the word I was looking for okay and then there's also it can be pending or come fulfilled okay so the state is pending or fulfilled but the result is rejected or resolved okay I think that's the way I understand it all right pending fulfilled and rejected whoa whoa so hold on help me clarify this people of the slack channel or in the or in the YouTube chat which I'm trying to trying to keep an eye on I get the idea of pending or fulfilled it's in progress or its completed to me I understand those are the states and then when it's fulfilled its either rejected or resolved is that correct I don't need resolve or reject that's for creating promises right right that makes sense one of those three pending fulfilled and rejected fulfilled is I see so fulfilled is the same as resolved essentially okay okay that makes sense see in theory it's helpful for somebody doesn't actually know this stuff to teach the stuff I don't know fulfilled a success or rejected as rejection okay great there's a nice graph if I scroll down there's a graph ah here we go oh good we'll come back to this well I don't know I only care about this okay okay so Matthew you can figure out how I'm gonna back up in my speaking and you can figure out how to put this together a promise can be in one of three states it can be pending right this is while I'm waiting to get the data back from the API it can be fulfilled which means it's it's been successfully resolved I have the results back from the API or it can be rejected meaning some error has happened so if I have this object the idea is that I can just check this object to say wait hey object what pay promise everything's fine I just dropped the top of the marker I have this problem I have this promise I promise you promise me something are you still pending I'm waiting for you to finish promise are you pending and then I could say like hey were you rejected were you filled and then give me the stuff back but here's the thing if I do this I actually don't need to query the promise continuously I can use something called then and/or catch so then is a function that gets executed is that the right way to say it is it really a function that gets executed no because you have to pass a function into it yeah then is a function that receives a function to be executed it's kind of like a callback when it has been fulfilled and catch receives a function to be executed when it has been if and when it has been rejected and there's actually if we go back if we go to the Mozilla JavaScript documentation page there's a nice diagram so this idea of a promise it's pending and you can see all this stuff that happens but in the end there's just a then or a catch settled if it's either sorry I'm reading the chat yeah I should say resolved so I've read the chat shouldn't be reading the chat well I'm doing this alright so this is the basic idea so what I'm gonna do now is I'm gonna start to rewrite that code using promises now I should be explicit about a couple things number one is I am NOT creating I can write code that creates promises I can use them and I'm gonna get to that I'm not doing that right now what I am doing is using somebody else's function that returns a promise so I need to get to creating your own promises and I'm gonna make lots of promises we gonna keep them all and then the other thing is I need to like to see does this really help us does this really make our code easier to follow and so let's just sort of see so let's let's go back so first of all let me just show you where this function called fetch is coming from so this is the fetch function and basically fetch is just a function that you give it a URL and it fetches the stuff from that URL and gives you a promise back so I am going to I'm going to comment this out and I'm gonna say let promise equals fetch word Nick API and then I'm gonna say console.log promise so I so let's take a look and see what this is look at that and at the moment that promise is pending look the promise is pending now here's the thing let me make I'm gonna do something very silly which is actually let me do let me do this in let's do another one here let P equal Fett let's do this again just in the console and let's look at that it's resolved like a few moments later it's resolved right so at the next line of code so I could do something crazy like while promise is not resolved wait wait wait wait wait wait but that would be like blocking code the point of a promise is to handle asynchronous things my program is going to keep going but behind the scenes it's going to be waiting for that data and the way I do that I don't think way too much time to get to this is with the ven function so watch this if I say promise then and then I put got data in here and this is nobody would ever write JavaScript like this I'm just doing this in kind of a crazy way and then I will condense it down and then I write my got data function let's run this and so take a look at this looks a little weird let's run this now so I got oh yeah I forgot all this is great I forgot the fetch function at some weird properties which is going to cause us a bit of a problem which is why we need promises so look at this I actually so you can see I got the results back but actually the results have to be converted into a format that I can use so all right so first of all so this is the idea right and if there was an error I could say promise catch got error and I could say console.log error all right so now let's make it have an error let's like mess up the URL by accident and we can see I got an error there type error failed to fetch so you can see this is the idea I get a promise I can give it a function to with then for when it's successful and I can give it a function for when there's an error I forgot to mention that I'm gonna start probably using the JavaScript arrow syntax in the course of looking at promises because it's really helpful and it's many ways necessary for working with them effectively so if you haven't already watched my video or somebody else's video or tutorial about the JavaScript arrow notation which is this notation I would suggest you pause and go ahead and watch that and come back okay so how would somebody really write this code well most likely you don't need to create this variable call to promise and then say dot then really most likely what you're gonna see is just saying fetch and this is called chaining almost everything in JavaScript is chained meaning I'm gonna do this function and chained it with the next thing I can say dot then got data dot catch got error so this is more likely how you're gonna see it written and let's just see do we still get that we still get that error and then if I fix it now we can see we've got that response back correctly okay now how would I really see this most likely I would see this with the use of anonymous functions so this whole thing would end up in here without a name and then this whole thing would end up in here also without a name this is starting to maybe look a little better and you might even see people do this so the because here's the thing there's going to be a lot of sequencing and what promises are going to allow me to do is really nicely say dot then dot then then not then so I can create this sequence of callbacks more easily now here's the thing if I want to clean this up even a little bit more I might want to use the arrow syntax and once I use the arrow syntax if I just have one line of code I can simplify this let me make sure I have this right and then I can do this did I stop talking I have to concentrate and this doesn't need a semicolon whoa I made this confusing but let's just do my best here all right so let's just make sure this still works and then let's look look at it again okay it's still working so look at this this is starting to look kind of nice it's confusing this is not for the this is not for your first day of programming but I now have fetch which returns a promise and I can also because I only have this one I can do this I can get rid of these parenthesis and I could also the truth of the matter is I could actually just do this now say console dot log because I'm giving it a function to console dot log that stuff but I'm gonna I'm gonna keep it like this just for my own sanity so now I have this fetch which is query from an API then it's asking for the data and then then it's tape making just give me a second here I have this function which returns a promise and the promise is handled when it is fulfilled the data is console logged when there is an error the error is console.log that's what I have so far right now and here's the thing well I want to I want to actually get that word like I want to say data dot word but that's undefined so this is the funny thing about fetch if I go back to the documentation page for fetch I need I'm looking for the function called JSON as their hold on hold on if I go to the documentation for fetch and go under use using fetch yes here's the thing you can start to see that there's something like what I'm showing you here but there's also this like dot JSON so the thing is the thing that's coming back from fetch I have to ask for it to be converted into an object that I can use and that's with the dot JSON function so let's look at how I would do this so here's the thing the dot JSON function also it returns a promise so what I really want to do is this I want to say when the data comes back call dot JSON and then guess what so this is really the response convert that to JSON and then take the JSON and console.log log that which is like this alright let's take a look at this so now you can see how my sequencing is much easier to manage I don't have callback L I actually just have the things that have to happen one line after the other boy this is tough stuff whoops there we go and now you can see I have that were and now okay so let's get a little bit better here because what I really needed to do was call my create P function to make that paragraph so I'm gonna do this so let's take a look at this let's just put that in there now and there we go every time I read so now I'm using promises I'm using fetch and promises okay now I want to next go and try to request a gift associated with that word how am I going to do that now first of all I need to now this is the thing remember with the JavaScript arrow syntax what this really is right here this whole thing right here if I were to rewrite this it's this function JSON create PE right this is just this shorthand but if I want to now ask to fetch the what am i fetching the giffy api if I want to do two if I want to create the paragraph and then fetch the giffy API I no longer can be as short handy I need to put the brackets back because I have two lines of code I need to put those brackets back and that means a parenthesis needs to go here right why did this auto format back to here I might have a linting errors timeout is it because I forgot a semicolon here no I want this to autoformat to this why didn't it I'm waiting for someone to is that just damn I do I actually have a syntax error or oh yes this is an extra parenthesis there we go thank you okay right hmm this doesn't look right to me and it's because I have an extra parenthesis here where there should be a semicolon there we go so I have to put the curly brackets back in then I can have two lines of code here right so now first I want to fetch the word Nik API then I want to take the response and convert it into JSON once I have a JSON I want to create the paragraph and then fetch from the giffy API so what do I want to do now then the same thing then take that response and convert it into JSON then and then the JSON I'm gonna do this I need to just whoops then with that JSON all I need to do is create the image so I can get that code I had before this is creating an image object and you know I'm not going through how the giffy API works but I in the giffy API I get did I get the JSON data index yeah I get the first gift that's fixedheight small and it's URL so look at this now again this is not so super I mean this is very concise and it's difficult to understand but you can see how nice the sequencing and I'm sure I know I have some errors here but let's at least see how far we get let's see how far we get all right so good news I got the word sketch digest 18 JSON of undefined 18 wait why does that say 18 let me join this again skep 14 sorry all right so ah so here's the thing promises are chainable right what are the things that return a promise fetch returns a promise which is here rasaan also returns a promise so how come if this returns a promise this worked but this returns a promise this one didn't work well here's the thing you have to explicitly in this chain of promises say return to continue to chain all of the VINs so I actually missed saying return here and the truth of the matter is I really should say return here but if you remember from my and in lemon I just put this in just to have it everywhere but the reason why I didn't have to put it is when you have just one line of code it with your arrow syntax it assumes the returning but this is now really what this should look like right and let's just make sure this works Oh syntax are lying 10 there's an extra parenthesis there know what oh is it like just as needing a semicolon there no oh oh that's weird I guess I have returned I have to have this weird I have to use the curly brackets yeah let me go back much I don't know if this yeah let me go back okay whoa so if I have to return the promise in order to have the next ven sequence properly how come I didn't have to return the response dot JSON promise up here well it's just because I'm making use of the arrow syntax shorthand so I think I want to just remove most of the shorthand here and add back in the curly brackets and say return so and then what am I I need a parentheses here and then also now this is more longwinded than it needs to be but I'm gonna add back in the curly brackets but I just want to emphasize and I've already made another mistake there we go so now let's see can I fit this all in one page here so now look at this now if you if I showed you this at the beginning of this video you would look at me like oh my god you're crazy that makes no sense to me but I'm hoping maybe maybe this is somewhat comfortable for you maybe you have to go back and watch this video again maybe you never want to watch another video in my channel ever but I'm starting with fetch and getting a promise then I get a response back and I'm returning the next promise about converting it to JSON then I am returning the then I'm then I'm getting the JSON mmm adding the paragraph and asking to fetch more data once that promise gets resolved I take that result returned into the JSON once that's ready I take that JSON and make an image and then I'm done now here's something that I didn't mention that's so magical about all this each one of these things an error could happen along the way it could break because either one of these URLs could be wrong the data that comes back couldn't be formatted right in such a way that I could get it back to JSON this catch will catch any error anywhere throughout here so any error happens anywhere it jumps down to here this is much nicer than having to have separate error callbacks for every single thing that I might be doing in a sequence like this so let me now let's hope this works this is time for me to use a drumroll let's see if this works this has been a long video I think there we go it's still working nope no no that's the wrong one no no really sound effect challenge so there we go so I'm just gonna now now that we see this full sequence here I'm gonna go back and remove I kind of like using the in once I'm already using the arrow syntax you know if I wasn't using the arrow syntax then I wouldn't care so much but once I'm already using the arrow syntax I'm once I'm already using the arrow syntax I like to I like to have that shorthand when possible because it does make it easier for me to follow the code so I think and I think I'm gonna keep the curly brackets here because this is kind of a long thing to do so now we can see and again there's a little bit there might be a there might be some other simplifications that I can write to this and there's a lot of extra steps just because of the way that fetch works but this really shows like if I had to do this without promises this code would become really unwieldy and difficult to manage and write so I think I've done at least with this first part what's coming next so I need to show you how to use something called promises dot all I think so if I want to create like a big array of promises I can wait and have something happen when they're all complete that's thing that's worth showing you another thing is let me make a list of this stuff whoops so can I come over here so I need to show promises all I need to show how to make your own promises how to make your own promises I'm gonna just title the video how to make your promises and maybe people who don't know learn a certain code would just want to know about how to make your own problems how to make your own promises how to promise safai something and then then we're gonna look at I could actually really simplify how this code looks in a really nice way I mean you know you can actually skip all of that entirely if I use and this is a part of like yes 427 no it's a more recent version of JavaScript called a sync the async and the await keywords so I'm gonna show how those work and that's gonna even simplify what we did here further now I might be forgetting something that's important in this list and when I come back in the next video I will add to that list as well okay thanks for watching I hope you learned something about promises a little too long and this was helpful to you alright so how did I do how did I do everybody those of you who actually know and if you use promises regularly did I this is pretty like correct yes 1215 that's probably gonna be like a 45 minute video isn't it oh no plus marketing my coffee the last changes work oh my goodness yes oh that's a really awesome one okay somebody in the chat says there's been a mark on the top right of the whiteboard that you have that's been there for four weeks oh well we must fix that no no I'm not gonna get another paper towel I'm gonna reuse my where did they go okay here we go top right oh this all right okay everything's okay with the universe again all right so now here's the thing how's my list is there anything right if should I just go straight to promises dot all and like do something where I ask I mean obviously the word Nick API I could get five I could get probably get five random words with one call but I could create an array and then use promises dot all I've actually never used promises not all but that that's probably what I should do next right and then I should write my own asynchronous function that creates a promise like I could promise a PHY load JSON in p5 right would that make sense to do that's what I'm thinking give me some feedback on that then you know I'm gonna I'm gonna go until one o'clock so I've about 45 minutes I guess I won't get to a sink and a wait today unless I come back later this afternoon or something actually what time do I have no I have something yeah I have to go buy one well after one right I don't need this so this is a good point so alka writes in the chat I don't need the quotes for this property but the reason why I had if there was because originally I had some some property that started with a number but it's fine that's all I got not a key details I'm not too worried about that promise trace do async in a way making your own promise isn't that necessary oh that's interesting so far it just seems like then hell instead of callback hell hey welcome new sponsor Abhilash manaan thank you I love how that just like alerts me the sponsor it's really nice yeah Kate weak man makes a point saying so far it just seems like then hell but but truly it's yes I see your point but here's the truth of the matter is the fact that I don't have to indent any further with any of these makes it less hellish the callbacks have to be all nested inside of each other they can't be written as a list and that results in I didn't do a good job of like showing callback hell oh look at this there's actually callback hell calm so anyway so yes it flattens it that's the nice part yeah a sinking a weight or promises underneath exactly there's no fetch function in node that's a good point yeah major difference also between callback hell and then hell is error management writes David Davis all right now so let me ask I'm gonna do promises all look at all our orcs nobody nobody tell anybody that I'm just looking up how this works right before I do the tutorials I've never actually used it Oh interesting set timeout as an example oh oh I just give it an array oh cool all right all right so yeah let's try this let's try this what is this from anyway oh yeah look at this I never made it get an error but at fetch vendor okay no it's not only about indentation but if you're like me that's kind of the array doesn't have to be all promises that's interesting I don't know what that means use a short word a medium word and a long word something it can't be done in one call yeah I agree with you in principle alkanes make a suggestion to you to like have three different yeah let me try it that's actually not a bad idea and it keeps the order from the input array good point good point all right I'm gonna do that thank you that's a great suggestion all right let's move on to promises all all right anything that it's not David rights in the chat anything that's not a promise in the array will just get returned as if it were resolved by the promise that's cool console dot error air for errors please is much nicer that is an excellent suggestion also board Eve of which I'm bored of all I probably be ass pronounce the name okay all right so let's statuesque Lee what the I'm very concerned about whoa that is crazy oh this is Oh David Bowie oh there's an I don't know if you were live in the New York City area I would highly recommend oh yeah no this is such an aside but I went to the David Bowie exhibit at the Brooklyn Museum which is really fantastic they did a really nice job at the audio tour in particular but one thing I learned and is that David Bowie actually implement a piece of software called the verba sizer and it was like a lyric writing generative text app and they had it actually running at the exhibit and I wanted I want to do as a coding challenge to recreate the verba sizer so somebody remind me of that or I don't know add it as a rainbow topics thing or something but not right now all right just okay all right now it's time for us to keep all of our promises so uh if you're watching this I just made a video about JavaScript promises so if you haven't seen that one you might want to check the video description go back and watch that one first and in this video what I'm going to look at is what happens if I make many many many many profits I put many promise rings all over all my fingers and I want to keep all of them promises dot all what is this promises all thing so let's so we're promises that all can become really useful let me give you an example a lot of API is that request data from UM have this sort of pagination quality to feature which you say give me they don't give you like if you want a million results from an API you can't just say give me a million things you might say give me the first page which has 100 then the second page which has 100 and so on and so forth and you want to like do something once you've gotten all of the data now you want to keep everything in the right order this can be really tricky to do with like multiple callbacks nested callbacks callbacks hell but promises has a feature which allows us to do this quite nicely so I have what I made in the previous video is an example program that asks for a word from the word Nick API then it takes that word and goes and asks for an gif associated with that word from the giffy API and you can see the code here is making use of promises and is sequencing actually all these promises so I could probably use promises at all in some weird way with this but thank you to Alka from the chap who made a nice suggestion what if what I'd want to do is I want to get I'm just gonna do this in a simple way I want to get three words from the word Nick API I want a word with three um am I doing here what if I want to get three words from the word Nick API I want to get a word with that's love length 3 of length 4 of length 5 so I'm going to and so let me actually pause for a second I'm gonna match you I'm gonna double back I want to freeze this code the way it is and I want to say promises all so I'm gonna do this Oh 102 okay so just don't save unsaved what just happened there oh oh I don't have my David Bowie anymore alright that's fine just go but I'm gonna go from where I tabbed into the code and you can see the code here where I have this sequence of all the different steps each returning a promise and what to do when that promise is resolved now I might be able to do something where I use promises at all even with this but I'm gonna do a different scenario thank you to Alka from the chat who suggested this so what I'm gonna do let's get rid of for this let's get rid of the giffy API as fun as that might be and let's just go back I'm gonna simplify this and right now it's just gonna show me a single word meta sulfites blue toid by some great words here so now what I want to do is I'm gonna say word Nick three word Nick four word Nick five now this is silly I could make an erect there's so many things I could do to make this better but I what I want to do is change the minimum length so minimum length is three maximum links is 3 4 4 5 5 so I want to get three words of different lengths and the reason why I'm doing this is I want to show you how I can get all of these API calls and retain the order of them which is really helpful when you have like all these nested callbacks you don't know what's happening when so this is gonna make our life much easier alright so now let's just make sure this is still working with word Nick one oh no three sorry there we go AB so what I'm going to do something very silly is I'm actually first just gonna copy paste this two more times for four so you can see but it's not coming back in the right order look at this sometimes the four one two three four why they're two fourletter words I must have messed something up but it's really not coming back in any consistent order that's weird oh I forgot but five here so it's not coming back in any consistent order which is a bit of a problem I want to be able to keep that order so one thing I could do is first of all I could I could I could do it this way so once I get the first word then I'm gonna say return fetch word Nick for I could I could go back and change thing oh my goodness so I'm gonna just rewrite this a different way right I could say give me the word Nick three create the P then go do word Nick four and then do this again and then do word Nick five and then do this again right this I could do right start by getting the first URL then when I get that go to the next one when I get that go to the next one and I often have a return to return the next promise so this is a way that I could sequence all this stuff now you can see it's actually coming in one at a time right so it's waiting to make that API call until then previous one is done now here's the thing I know what if I don't want to wait I want to just make all these API calls make these API calls make these API calls make these API calls I don't want to wait and then I just want to like display them on they're all done so I don't want to see them like coming in sequence like this this is where promises doll can really help us confess I've actually never used promises that all me names at once for making this video so I kind of gotta have to figure this out so let's think about this the idea of promises dot all is that what I want to do is I want to create an array of promises so if I have I'm just going to sort of speculate here if I have an array of three promises I can say promises dot all give it that array and then I can say that then like results let me just type this out here and then I can also I always have my catch error and people are telling me to use console dot error error should have it like look nicer I can have this and I'm missing a parenthesis there there we go so the idea let's move this down here this is the idea the idea is that if I create an array of promises I could say hey all of these promises when they're all resolved then show me the results and key show me the results for all those promises in the order that they were in the array which is really key ok so this is how it's supposed to work I think timeout pause for a second because I see some suggestions coming in the chat fetch fetch fetch all right the problem with this is that I need to I have the extra JSON step so how am I like for example all right so let me go okay so what's the next step I mean the idea here is that all I would actually need to do is all of these return a promise so I could say hey make these three API calls and whoops let's hold on zoom out here what's ah missing a parenthesis sorry everybody so I let's do it let me do it this way just I just want to be like super explicit about what I'm doing here so what if I make these three API calls and of course this could be in a loop and all sorts of things and then I make this array that just has all three of them in there now I could say so this is going to actually work I'm going to comment out what I had before this is actually sort of going to work but not exactly so let's see what this does this is the idea I'm gonna make three requests I'm gonna put them in an array and then it would say when all of them is done show me the results let's see what happens oops promises is not promised at all promised at all not promises done all promised at all and there we go all three of the responses are there so this is actually good it worked the problem is fetch has this weird nuance to it so if I weren't using fetch I could almost in a way be done with this videotutorial but because I'm using fetch if you recall when the promise comes back I need to ask for that I need to create another promise to convert it to the data that I can actually use so I think this is where a higher order function could be come in useful I hesitate to do it this way I could use it then with each one of these and create the other promise but let's let's think about this I think the higher order function might actually be useful so if yeah if you don't know about higher order functions these are functions that I did a whole video to robot what they are now I'm kind of forgetting but they're functions that actually generate new functions for you or take functions in as an argument and so one of the ones with an array is a map is that my function called map so the map function is a function that would allow me to pass a function to execute a function in every element of the array so I could say promises dot map so what this would do like let me just show you what I mean by this I'm gonna comment that like what this would do this order function I'm using the arrow syntax you can go watch the video where I go over this explicitly takes every element of the array and then execute the code console dot log element on it so let me show you that and we can see there's three promises so what can I do I should be able to say make a new array so I'm gonna call this promises to map makes a new array so that's weird that I did console that log that's kind of a silly thing to do more likely what I would do like with the point of using map let me just show you really quickly in this video like if I have two three four actually let me just do this in the console so bear with me for a second if you already know what map is skip ahead thirty seconds or a minute so I'm gonna say nums is four three one five nine that's an array of numbers can you see that I'll make it a little bit bigger now if I say nums dot map n becomes n times two what this does it makes a new array with all those values multiplied by two but nums is still the original value so I am creating a new array with a modification of all those values so I can do something and again you can go back and watch my other video which goes through this in more detail but now I could do something very similar here I can make a new array of promises like this but do I have to wait till it's resolved I might have to wait till all of these are resolved let's see let's see if this works console.log promises I think this is gonna give me an error let's see if this works I think there's a missing step here this asynchronous stuff is very confusing because I've got this is the right idea conceptually promises not to find well this is promises one ELT JSON is not a function yeah so I need to get the reserve the resolved promise the response from the promise so I guess what I could do here ah aha thank you to Alka the chat don't forget it saved me here of course this is a promise so what I need to do is execute the function dot then on it I need to wait for it to be done and then what I can do is take that response and convert it to JSON oh boy this is this I don't like this hold on back up for a second I have to think about this Paul not sure that's that's no good yeah yeah I mean so that that would work but I wonder if it might make more sense for me to actually just do promises all twice boys it's getting no or I think if I if I think actually if I write it out as a function it'll be more clear Oh me I am Samia is why not my oneliner I didn't see your oneliner oh oh my goodness Matt fetch map eggs use a forloop a forloop oh yeah good idea yeah no need for high order functions that's the point with all you should close your tutorial now all twice is slower get twice as much promise doll has a tutorial this is really confusing I use es6 everyday and I know that es6 contains classes okay that's not hello Daniel make a list extract stuff and listen I think yes let me not go down the higherorder function route if I'm keeping this simple I should just make a for loop right yeah I think I'm gonna do this with a four loop to keep it simple where do I need to go back to yeah that's what I want to do me I am Samee that's exactly right I'm gonna do this without a higher so that's yeah let's see if we can make this happen let me do this without the higherorder function thing and but I'll mention that you could do this as a higherorder function maybe I'll show that our leave that as an exercise so I want to back up I believe there was a point where I just had this yeah okay I'm not using a for each loop don't don't try to don't try to trick me okay so ordinarily I might be done here because I have my three promises they've all been finished and I'm looking at the results of all those promises the issue is the fetch if you recall has this extra weird thing where when I get the response back I need to execute an I need to have another promise to convert that information to data that I can actually use which is that dot JSON function so what I actually need to do is take this array of promises and make a new array of promises with all of the conversions to JSON and I could do that with like the map function which is a higherorder function check out and watch my higherorder function video tutorial and maybe I'll do that later or just leave it as an exercise but but let me let's do it this what's do it a simple way here so let's call this promises one and then I want to have another array called promises to and I could use promises not all twice but let's not do that right now let's say promises to is an empty array you know I'm thinking about this so I'm gonna say for every promise I'm gonna use a for of loop of promises right this is saying take everything in this array and what happens when you have a promise when it's resolved I say promise and then I get that response this is exactly what I have down here right response I can take this I get their response and instead of and what I want to do is respond stock JSON returns a new promise so what I want to do and I'm gonna add the curly brackets here so I have more room to kind of work with whoops what's missing here why is this not oh there we go okay so now what I want to do look I got this formatting is confusing but for every promise in promises then what I want to do is get the next promise and put it in promises too so what I'm gonna do is I'm gonna say console.log promises to now weirdly enough I have a feeling this is gonna show me nothing let's see let's see what this does Oh promises boy this is really starting to look like that spelled incorrectly the more you look at a word promises one Oh promises one that's the promises one okay now look at this this array is empty but it's actually it's actually in there the nice thing is it's empty because this these then is happening asynchronously and I'm console logging it here but I think I'm actually going to be okay because once I use promises all so again let's and I put in promises too I think we're good now let's catch 924 No all right wait No oh oh I've done something bad yes I've done something bad I see I see I made a mistake I made a mistake oh I was doing so well today till I Frenchie promises not all I need to actually yeah okay ah I know what I did wrong I just trying to figure out where to back up yeah it's empty no this is all gonna be fine all I need to do let me just show you how it's gonna work this will actually get it to work amazingly I'm just trying to figure out no I thought this would get it to work oh no no no no no that's not going to fix it wait oh yeah next promised he was on such a son yeah of course ah of course this is what I need to do I just totally did this wrong let me make this work and then I'm gonna back up there we go there we go alright this is what I needed to do it's actually much simpler than what I did this makes a lot more sense okay Oh back hurts like I'm hunched over today alright so Matt's yeah you once again I'm gonna back way up or I could go down that road and demonstrate what I did wrong actually you know what let's not back up let's leave the mistake in so this is where I was right right okay okay okay okay okay hmm so it's empty now I I have just actually made I've made a fatal fatal error and I almost wanted to like take this out of this video tutorial but I think I'm gonna leave in what I just did for a while and explain what this error is because this is really crucial so this kind of looks like the right idea right I have my array of promises then I'm going through each one and I'm asking for the new promise and putting it in the promises to array in the second when that's all done give me the results but you have I have to remember I forgotten something this is ace happening asynchronously so when I promises to like console.log promises to it's empty I actually need I need to have that array of promises I want to like get the promise so there's actually a mimei I made this overcomplicated what I actually need to do is just say I shouldn't be adding to the array here that was like weird right this is what I want to do I want to when for each one of the promises get the new promise back and put that into the next array so I'm gonna just actually say next promise equals so the next and let me let me shorten this just so we can see it this is the correct way to write this so if you look at this this is going through each promise one so I start with an array of three promises and again this could be done with Knapp to create a new array what I want is a new array with the JSON conversions of each one of those promises ah maybe I shouldn't have used fetch I made this tutorial extra complicated but this is good so what I want to do is one at a time I want to get the next promise from each one of those and here dot then returns response dot JSON as the next promise and pushes it into the array so let's just see if I got this right there we go so you can see right here I have three promises and then I have three words all in order so what I can do right now is once I have those final results I can that's an array and I can say I can say for every piece of data of results create P data dot word okay so I can now have a for loop here to deal with the array of promises that have all been finished and now we should see ah now I have the array of all promises and then there we go you know what I really sort of feel like let's I don't know why I didn't just use promises not all twice let's look at that so let's do this promises I think this is gonna make more sense promises dot all promises one then results return then diversity in the chat with a super chat rightz can you please for the next coding challenge code the lightsout game please huh I don't even know what that is but I could definitely consider it maybe I don't want to use promises at all they're all resolved oh I see so I should be able to say return I'm just going to try this promises all results map I'm just curious this should work right this should work let me just see I might have to redo this promises doll tutorial I'll have to come back and just do this again promise yeah anybody have any oh this will slow it down yeah slow mo it's a game with tiles that when you click okay thank you all right but this is how you could do it with promises that promise dot all twice I'm gonna so that was interesting let me go back okay okay okay let's try to review what just happened there and let's talk about maybe some other ways you could approach the problem this has definitely been a difficult one and if you follow this said I'm very impressed with you because I barely followed it and I made this video somehow but the idea first of all that I want to do here is use promises all to ask for to execute some code when every single promise has been resolved all at once so I'm making 100 API calls and then I just want to do something when all that has been completed so I'm simulating this idea by making three API calls and this is awkward but I'm just looking for a threeletter word a fourletter word in a five letter word from word Nick so this are three promises and I put them into an array now I could just say promises dot all for this array of promises but I actually need to do one more step because the final thing that I want to do is get the actual data so what I'm going to do is one at a time create a second promise from each one of these and put that in a new array so this promises to array has all of the promises from getting the response from the API converted into JSON once I have that then I can say promises promise all dot the second array of promises when I get the results though that'll be the results of each one of those promises in an array in order and I can go through that array and create an add a Dom element with that word if there was an error in any of those I can catch the error down there so some other ways you could approach this problem is number one is I could use a map higherorder function I could use map to generate the new array of promises and I could even probably just use I could chain two calls to promise dot all so I could use promise all then take those results right make an array of the next promises and then do promise that all again so I'm gonna leave this code as is for your reference I'm noticing some people in the chat telling me how I'm doing this all wrong so if this video has been published maybe it's not the best but I'm gonna leave it as is I will maybe an end let me know in your comments about how it's wrong and better ways to do this and I'll try to link from here also to any other get relevant examples on github that kind of rewrite this in a different way okay thanks for watching this kind of insane tutorial on promise not all oh my goodness the slack chat I didn't notice right alright so we somebody in the chat told me I did this all wrong which is basically the active program use always just doing everything all wrong and let me say I'm scrolling back up I can't find maybe that comment got removed doesn't make sense to use a for loop for this if you have promise dot all this is kind of wrong it does work but it is not something you will be proud of definitely not proud of it that's correct there's legs up the next comment said I love you I love you too okay so here's the thing I don't think that writing any code is ever wrong it's just code and I can tell you why it's first of all it wouldn't even be right look I have three words all at once of different lengths how could that how could that be wrong so I'm actually okay with this the code wise and I think that I explain this in a way that's fine I'm going to wait for Mattia to give me feedback as to whether this could be edited into a useful tutorial or not so let me and again I'm not trying to do this in the most efficient or fast way I'm just trying to explain how these concepts work but so I'm going to so I'm definitely to be back tomorrow morning and it seems unlikely that I'm gonna get to do this today but if I have some time later this afternoon I might come back and talk about a sink and a wait I have to go now I have a bunch of meetings this afternoon so I think I'm gonna leave where I am so far with promises and I'm gonna come back so I'm looking at the chat alright so and I'm gonna come back so I'm definitely be back tomorrow so let me remind you let's let's do some housekeeping here before I go I'm attempting to do twice weekly live streams this summer except for the weeks when I'm not in town which will be a lot of weeks so my goal is to always have four sessions per month and so I'm kind of doubling up here in May and June I'll be away for two to three weeks in end of June July and to three weeks in August so so that's the plan for the summer I'm going to be focusing on tensorflow dachi s ml5 I hope you do some coding challenges as well yeah I guess I should address this fact that people seem to talk about my Lisp which I may or may not have people have lists I guess this is microphone if whether or not I have one if I do have one I think I probably do cuz people I keep mentioning it no one ever mentioned it before when I had the lapel mic but with this microphone it seems to be mentioned a lot so it's either this microphone seems to exaggerate it or bring it out a lot yeah I'm gonna try to find my lapel mic just I find this awkward wearing this microphone and kind of selfconscious about it so that's what I've done for today I ran out of steam let me see if I can answer let me take a few minutes to answer any questions I will answer questions but if you're a sponsor I'll notice your question in the chat but I'm gonna try to I will try don't break the box under your shirt they are expensive what box under my shirt I'm gonna let me put on my goodbye song and see if I can answer a few questions dan is there a Melvin asks is there a good way to manage sensitive data like API keys and open source projects that's a great question so you might be noticing that I have this API key here copy it down use it whatever I'll sign up for another one I mean don't but I'm not worried I'm this is a API key for a word Nick I use it for teaching and educational purposes if I were using this key in a production app I might not want it to be visible so that other people could use it so there are a variety of ways that this can be tackled number one is if you write your own serverside code then you can hide your API key more effectively if your API key is just there and your javascript in the browser in a clientside code it's visible you can also open source your project but not include the API keys on github for example by using git ignore and other techniques you can use environment variables on servers so there are a lot of techniques for doing that I'm choosing not to worry about that right now I suppose that might be a worthwhile topic for a video at some point mmm floor rights I had to learn promises without any documentation because nobody was making an understandable video was this understandable melon goggles first of all did you have a name melon goggles before you watched my channel can you tell me a bit more about why let is better than waar so first of all I wouldn't say that let is better than VAR lettuce just another way of declaring a variable it's different than bar it is the convention now var is from earlier versions of JavaScript let is from newer it fixes some issues with something called scope and I actually have a whole video tutorial about this var let like just try VAR let Schiffman in Google and there we go let versus var so there you go so you can watch that particular video as well and look take a look at the chat check out the ITP show video today share it I would love for people to know about ITP and see that but melon goggles you didn't tell me if this video actually helped you understand promises or if it matched up with the way that you understand promises Sean asks ever plan to get into our XJS oh no that was mmmm Fleur I got confused I don't I don't know what rxjs is Gus asks do you prefer p5 over processing if I'm being perfectly honest I probably prefer processing over p5 that's just if I like if I have to like if it's like somebody somebody came and knocked on the door I open the door and they said make me a phyllotaxis spiral in 15 minutes and I'll give you a hundred thousand dollars I would open up processing not not JavaScript but I do prefer in for some scenarios using p5 for teaching because of the share ability on the web so there are some advantages there and for the stuff type of stuff I could do with Dom manipulation but but I do and also because of the existence of tensor flow Jas I that's a nice reason as well now bill is I'm not gonna I try to avoid the shoutout or write name on the board sort of request cuz I don't know how to I don't know how to like I don't like I hate to disappoint people but I can't do that for everybody but I could write I'm writing the word nabil on the whiteboard okay I did it just for this one time over sensei asked submit should you used the NMS color bracket on a package and Adam thank you for that suggestion Oh Const I should be using Const yeah Shuba mask what do you think about the future of ml in JavaScript it's exciting to me I'm excited about it with with all the possibilities now I think there's a rich future and I hope it can be used as a way of providing access to machine learning education and getting more people to question and be critical about the use of machine learning algorithms in our siding with the social impact is Wow the battery on this sound thing see now everyone's asking me to write write write their names on the board I've got to go so I'm committing to being back tomorrow morning tomorrow morning I will cover a sink and a weight and I will also get back to tensorflow Jas if I have some extra time I might try to because I want to start with tomorrow with tensorflow Jess I might try to come back and do a quick quick tutorial about a sink and a weight um later this afternoon but don't count on it unlikely but possible thanks for watching everybody and thanks for all of your support and feedback it means a lot thank you all right so I am going to uh I'm gonna play the I'm gonna play you out let's find something we wanna make some crazy idea you you
