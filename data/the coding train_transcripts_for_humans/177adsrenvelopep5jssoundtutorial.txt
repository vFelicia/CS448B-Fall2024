With timestamps:

00:00 - hello and welcome to another sound
00:03 - synthesis tutorial this sound synthesis
00:05 - tutorial is about envelopes and the
00:08 - winner is just done the winner is the
00:15 - p5.js sounds library ok nothing about
00:19 - that what I'm really here to talk about
00:20 - is this kind of envelope and this looks
00:21 - like kind of a very scary weird looking
00:23 - diagram but I'm actually hopefully going
00:25 - to make it make sense to you in this
00:26 - video and I've lost my marker here's the
00:28 - marker what I want to talk about is
00:30 - something called an adsr envelope and
00:32 - envelopes are used in the world of sort
00:35 - of sound synthesis as a mechanism for
00:37 - adjusting the way the playback engine
00:40 - enters and exits the sound and then so
00:43 - you could essentially configure you know
00:45 - the previous video I made this
00:46 - oscillator object that played a sine
00:48 - wave and the idea I'm going to wrap that
00:50 - sine wave in an envelope open up the
00:53 - envelope and put the sine wave in it and
00:54 - that envelope is going to configure how
00:56 - that sound and and you can get very
00:58 - sophisticated with this to make sounds
00:59 - that sound more like one or are not
01:01 - different kinds of musical instruments
01:03 - but really for us in this video I just
01:05 - wanted to sound kind of like an electric
01:06 - keyboard in a way your electric isn't
01:09 - really electric I don't know if that's
01:10 - what you say but you press a key and you
01:12 - hear the sound go boom to Rivet acts
01:15 - fades in and fades out so in p5 yes
01:19 - there is an object called a p5 envelope
01:22 - we had a p5 oscillator now I'm going to
01:24 - add a p5 envelope we're gonna link them
01:26 - together and the reason why it's called
01:27 - an adsr envelope it's because there are
01:30 - four stages now I have that diagram here
01:32 - but I think in order to understand it it
01:34 - would help for me to try to like draw
01:36 - that diagram so there is a which stands
01:41 - for attack there is D which stands for
01:45 - decay and there is s which stands for
01:49 - sustain and then there is R which stands
01:53 - for release ok now the interesting thing
01:57 - about this is there are two kinds of
01:59 - things that are involved in an envelope
02:00 - there's stuff that's measured in time
02:03 - and there's stuff that's measured in
02:06 - amplitude so and interestingly enough
02:09 - attack decay and release are all amounts
02:12 - of
02:12 - time so attack meeting the moment you
02:16 - press the key on that like piano or
02:18 - keyboard or ever that's attacking the
02:19 - note so how long does it take in time to
02:23 - get up to what is what would be thought
02:25 - of as the attack amplitude or volume the
02:28 - level
02:29 - okay so attack is how long does it take
02:31 - to get up to that decay is how long does
02:34 - it take to get down to its regular
02:36 - volume so there's a volume like it could
02:38 - be loud the beginning and then sustain
02:39 - at a different volume so that's how long
02:42 - it takes to decay and then sustain so
02:45 - this is time decay is time sustain is
02:48 - actually a amplitude of volume so this
02:51 - is how loud is that sustain level so
02:53 - this is a value measured between zero
02:55 - and one kind of percentage volume and
02:59 - then release is also a time to for how
03:02 - long it should take to get to fade out
03:05 - to its release amplitude so we have
03:08 - what's interesting here is we have the
03:09 - attack time the decay time the sustain
03:12 - volume and then the release time
03:14 - interestingly enough though we need an
03:16 - attack volume and assist and a release
03:18 - volume the attack so let's say the
03:20 - sustain volume is point five but when we
03:22 - attack it we wanted actually to ramp up
03:24 - to 0.75 then fade down to 0.5 and then
03:27 - fade down to zero so there are two
03:29 - values missing from adsr which is the
03:33 - attack volume and the release volume and
03:35 - in p5 when you create the envelope when
03:38 - you say new P actually you just say um
03:41 - p5 envelopes sorry there are two
03:42 - functions I can't remember what they're
03:44 - called I think one is called set a DSR
03:48 - and you give it four arguments which are
03:50 - these values attack time decay time
03:52 - sustain level release time and then
03:54 - there's another function which is like
03:56 - set I'm going to come over here and
04:00 - quickly look it up in the reference set
04:03 - range okay then the other function is
04:07 - set range and boy this pen is not
04:10 - working very well if you can read this
04:11 - and those are those last two volumes
04:13 - this attack level and the release level
04:15 - so we need to configure this envelope so
04:18 - let's go into p5 GS and now make that
04:21 - envelope and could you figure it coming
04:23 - over here hello okay so you can see by
04:25 - the way now we met under
04:26 - stand this graph this dis chart a little
04:28 - bit more attack time than decay time
04:31 - what's that sustained level and what's
04:32 - the release time okay now so let me go
04:36 - back to my code this is the byway so
04:38 - this is where I kind of have an example
04:39 - built off of the one for my previous
04:41 - video where all it does is play an
04:43 - oscillator do you hear that I think it's
04:45 - playing the musical note a 440 Hertz and
04:48 - then I can turn it off with this button
04:49 - so what I want to do is instead of just
04:51 - having it be just the pure oscillator
04:53 - that just plays forever I want to create
04:55 - and I'm gonna just make a variable
04:57 - called env for no I just I really just
05:02 - want to use props envelope it's kind of
05:04 - a lame prophet but it is a prop
05:05 - nonetheless then I'm gonna say here
05:09 - I'm gonna say envelope equals new p v
05:12 - dot envelope and I'm going to say
05:15 - envelope dot what did I say
05:17 - set adsr so now I need those four
05:21 - volumes of all values attack decay
05:24 - sustain release attack decay sustain
05:28 - release okay attack is let's just say
05:33 - we're gonna have a point five seconds
05:35 - for the attack then we're gonna have
05:37 - point two five seconds for the decay
05:41 - then our sustain volume is going to be
05:43 - at 0.5 and then the release time is
05:47 - going to be a zero point one so I'm kind
05:50 - of making these up the arbitrary
05:51 - configuration then I'm gonna say set
05:54 - what I say set range so I want the
05:56 - attack volume to maybe be at point eight
05:58 - so a bit louder and then I want that
06:00 - release volume to be down at zero
06:02 - because I want it to fade all the way
06:03 - out so now I have if we look at this
06:05 - code I have the envelope and I have the
06:09 - waveform so I need a mechanism by which
06:12 - week I connect the envelope and the
06:16 - waveform together I want that you know
06:18 - this is the waveform this is the
06:22 - envelope I want to take the waveform and
06:24 - I want to put it in the envelope that
06:27 - really made sense over here okay so the
06:29 - way that that's done is with the
06:31 - amplitude function so typically with a
06:33 - waveform I would set the amplitude to
06:35 - like zero or 0.5 or 1 but actually what
06:37 - I want to do here is set the amplitude
06:40 - to that particular envelope so now this
06:43 - is how they are connected the waves
06:45 - amplitude is set to the envelope and
06:47 - then in this play function I actually
06:49 - don't need all this toggle stuff because
06:52 - all I want to do is just say envelope
06:55 - dot play so I want the envelope to play
06:58 - it's gonna play that oscillator wrapped
07:00 - in all the configurations of the
07:01 - envelope so let's see hopefully this is
07:02 - gonna work I'm gonna refresh it up p5
07:07 - envelope is not a constructor new p5 .
07:11 - envelope what did I get wrong there so
07:13 - let's have a look at this page new p5
07:18 - env so it's not the forward hope it's
07:21 - just dot env okay thank you very much
07:23 - dot env for short let me go back to my
07:27 - program I'm gonna run it do you hear
07:32 - that
07:33 - now does that really sound like playing
07:36 - a note at a keyboard I don't know if it
07:38 - does let's mess around with it let's
07:39 - make that attack time very very very
07:43 - short let's make the decay time also
07:46 - shorter and yeah so let's make the
07:51 - attack volume like a little bit louder
07:53 - so we can sort of hear and maybe the
08:02 - release time can be much longer do you
08:08 - hear that so there's sort of a loud pop
08:09 - and then a little bit of sustain and
08:11 - then a fade-out so you know now
08:13 - hopefully this explains the idea now you
08:15 - can to your heart's content I might
08:18 - suggest make a sketch tie all these two
08:20 - like buttons or text boxes or sliders
08:21 - configure the envelope have it play a
08:24 - change the frequency each time you play
08:27 - a node have some slider to set the
08:29 - frequency you can sort of set something
08:30 - up to test how this works and to kind of
08:32 - get good at and I'm sure if you research
08:34 - like standard adsr values for particular
08:37 - instruments you might try it with a
08:40 - triangle wave instead of a side wave
08:41 - you're going to be able to maybe control
08:43 - how the sound sounds a bit more now I
08:45 - should mention by the way you know I'm
08:47 - doing this sort of basics of generating
08:49 - tones with p5.js sound library there's
08:51 - another library you might look in
08:53 - at some point called tone j/s which also
08:55 - has a lot of a lot of features for doing
08:58 - this kind of work and pushing it further
08:59 - but what I want to do after in the next
09:01 - video is show you now how to keep track
09:04 - of an array a list of different musical
09:07 - notes how to set an envelope and have an
09:10 - oscillator and play a melody and
09:11 - possibly you know also a harmony at the
09:13 - same time so now we've got the basic
09:15 - idea but how do I turn this into
09:17 - something that actually will manage time
09:18 - play notes are being interactive that
09:20 - the user could press keys on the
09:21 - keyboard and play certain notes that
09:22 - type of thing I'll do that in the next
09:24 - video tutorial which I will get to at
09:25 - some point perhaps if you're watching
09:27 - this at some point in the future it's
09:28 - already there
09:29 - okay thanks for watching goodbye oops
09:31 - I'm back again with another addendum one
09:34 - thing I never actually talked about was
09:35 - how long should this a note sustain
09:38 - itself and you notice that's not really
09:40 - actually a variable anywhere in this
09:42 - there's no there's no sustain time there
09:45 - so the reason that isn't is because
09:46 - typically the way these envelopes are
09:48 - implemented is if your thing about
09:50 - playing a piano or keyboard this the
09:52 - note is sustained as long as you're
09:53 - holding down that key so in some default
09:59 - amount of time I guess is being used but
10:01 - there is also the function to trigger
10:02 - attack and trigger release so you can
10:05 - trigger the attack instead of just
10:06 - calling play you can actually trigger
10:08 - the attack for that envelope and have it
10:09 - sustain for an arbitrary amount of time
10:11 - until you trigger release and that
10:13 - allows you to do a few more things with
10:15 - how you control the envelope and the
10:16 - playback and I'll try to do an example
10:18 - in a later video which uses trigger
10:20 - attack and trigger release okay thanks
10:22 - for that little extra note or watching
10:24 - that extra note that is thank me for the
10:26 - extra note I don't know

Cleaned transcript:

hello and welcome to another sound synthesis tutorial this sound synthesis tutorial is about envelopes and the winner is just done the winner is the p5.js sounds library ok nothing about that what I'm really here to talk about is this kind of envelope and this looks like kind of a very scary weird looking diagram but I'm actually hopefully going to make it make sense to you in this video and I've lost my marker here's the marker what I want to talk about is something called an adsr envelope and envelopes are used in the world of sort of sound synthesis as a mechanism for adjusting the way the playback engine enters and exits the sound and then so you could essentially configure you know the previous video I made this oscillator object that played a sine wave and the idea I'm going to wrap that sine wave in an envelope open up the envelope and put the sine wave in it and that envelope is going to configure how that sound and and you can get very sophisticated with this to make sounds that sound more like one or are not different kinds of musical instruments but really for us in this video I just wanted to sound kind of like an electric keyboard in a way your electric isn't really electric I don't know if that's what you say but you press a key and you hear the sound go boom to Rivet acts fades in and fades out so in p5 yes there is an object called a p5 envelope we had a p5 oscillator now I'm going to add a p5 envelope we're gonna link them together and the reason why it's called an adsr envelope it's because there are four stages now I have that diagram here but I think in order to understand it it would help for me to try to like draw that diagram so there is a which stands for attack there is D which stands for decay and there is s which stands for sustain and then there is R which stands for release ok now the interesting thing about this is there are two kinds of things that are involved in an envelope there's stuff that's measured in time and there's stuff that's measured in amplitude so and interestingly enough attack decay and release are all amounts of time so attack meeting the moment you press the key on that like piano or keyboard or ever that's attacking the note so how long does it take in time to get up to what is what would be thought of as the attack amplitude or volume the level okay so attack is how long does it take to get up to that decay is how long does it take to get down to its regular volume so there's a volume like it could be loud the beginning and then sustain at a different volume so that's how long it takes to decay and then sustain so this is time decay is time sustain is actually a amplitude of volume so this is how loud is that sustain level so this is a value measured between zero and one kind of percentage volume and then release is also a time to for how long it should take to get to fade out to its release amplitude so we have what's interesting here is we have the attack time the decay time the sustain volume and then the release time interestingly enough though we need an attack volume and assist and a release volume the attack so let's say the sustain volume is point five but when we attack it we wanted actually to ramp up to 0.75 then fade down to 0.5 and then fade down to zero so there are two values missing from adsr which is the attack volume and the release volume and in p5 when you create the envelope when you say new P actually you just say um p5 envelopes sorry there are two functions I can't remember what they're called I think one is called set a DSR and you give it four arguments which are these values attack time decay time sustain level release time and then there's another function which is like set I'm going to come over here and quickly look it up in the reference set range okay then the other function is set range and boy this pen is not working very well if you can read this and those are those last two volumes this attack level and the release level so we need to configure this envelope so let's go into p5 GS and now make that envelope and could you figure it coming over here hello okay so you can see by the way now we met under stand this graph this dis chart a little bit more attack time than decay time what's that sustained level and what's the release time okay now so let me go back to my code this is the byway so this is where I kind of have an example built off of the one for my previous video where all it does is play an oscillator do you hear that I think it's playing the musical note a 440 Hertz and then I can turn it off with this button so what I want to do is instead of just having it be just the pure oscillator that just plays forever I want to create and I'm gonna just make a variable called env for no I just I really just want to use props envelope it's kind of a lame prophet but it is a prop nonetheless then I'm gonna say here I'm gonna say envelope equals new p v dot envelope and I'm going to say envelope dot what did I say set adsr so now I need those four volumes of all values attack decay sustain release attack decay sustain release okay attack is let's just say we're gonna have a point five seconds for the attack then we're gonna have point two five seconds for the decay then our sustain volume is going to be at 0.5 and then the release time is going to be a zero point one so I'm kind of making these up the arbitrary configuration then I'm gonna say set what I say set range so I want the attack volume to maybe be at point eight so a bit louder and then I want that release volume to be down at zero because I want it to fade all the way out so now I have if we look at this code I have the envelope and I have the waveform so I need a mechanism by which week I connect the envelope and the waveform together I want that you know this is the waveform this is the envelope I want to take the waveform and I want to put it in the envelope that really made sense over here okay so the way that that's done is with the amplitude function so typically with a waveform I would set the amplitude to like zero or 0.5 or 1 but actually what I want to do here is set the amplitude to that particular envelope so now this is how they are connected the waves amplitude is set to the envelope and then in this play function I actually don't need all this toggle stuff because all I want to do is just say envelope dot play so I want the envelope to play it's gonna play that oscillator wrapped in all the configurations of the envelope so let's see hopefully this is gonna work I'm gonna refresh it up p5 envelope is not a constructor new p5 . envelope what did I get wrong there so let's have a look at this page new p5 env so it's not the forward hope it's just dot env okay thank you very much dot env for short let me go back to my program I'm gonna run it do you hear that now does that really sound like playing a note at a keyboard I don't know if it does let's mess around with it let's make that attack time very very very short let's make the decay time also shorter and yeah so let's make the attack volume like a little bit louder so we can sort of hear and maybe the release time can be much longer do you hear that so there's sort of a loud pop and then a little bit of sustain and then a fadeout so you know now hopefully this explains the idea now you can to your heart's content I might suggest make a sketch tie all these two like buttons or text boxes or sliders configure the envelope have it play a change the frequency each time you play a node have some slider to set the frequency you can sort of set something up to test how this works and to kind of get good at and I'm sure if you research like standard adsr values for particular instruments you might try it with a triangle wave instead of a side wave you're going to be able to maybe control how the sound sounds a bit more now I should mention by the way you know I'm doing this sort of basics of generating tones with p5.js sound library there's another library you might look in at some point called tone j/s which also has a lot of a lot of features for doing this kind of work and pushing it further but what I want to do after in the next video is show you now how to keep track of an array a list of different musical notes how to set an envelope and have an oscillator and play a melody and possibly you know also a harmony at the same time so now we've got the basic idea but how do I turn this into something that actually will manage time play notes are being interactive that the user could press keys on the keyboard and play certain notes that type of thing I'll do that in the next video tutorial which I will get to at some point perhaps if you're watching this at some point in the future it's already there okay thanks for watching goodbye oops I'm back again with another addendum one thing I never actually talked about was how long should this a note sustain itself and you notice that's not really actually a variable anywhere in this there's no there's no sustain time there so the reason that isn't is because typically the way these envelopes are implemented is if your thing about playing a piano or keyboard this the note is sustained as long as you're holding down that key so in some default amount of time I guess is being used but there is also the function to trigger attack and trigger release so you can trigger the attack instead of just calling play you can actually trigger the attack for that envelope and have it sustain for an arbitrary amount of time until you trigger release and that allows you to do a few more things with how you control the envelope and the playback and I'll try to do an example in a later video which uses trigger attack and trigger release okay thanks for that little extra note or watching that extra note that is thank me for the extra note I don't know
