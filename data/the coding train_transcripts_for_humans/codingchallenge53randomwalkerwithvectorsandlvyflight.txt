With timestamps:

00:00 - What's that?
00:01 - [TRAIN WHISTLE]
00:03 - The coding train is
pulling into the station?
00:06 - Yes, it is.
00:07 - And it's bringing with it
vectors and a Lévy flight.
00:11 - So I'm going to, in this video--
00:13 - oh, that sound effect ended.
00:14 - Thank goodness.
00:15 - That was very embarrassing.
00:17 - In this video, I
am going to expand
00:19 - on my previous random
walker example,
00:22 - and I want to do two things.
00:23 - One is, I want to bring
in the concept of vectors.
00:27 - So instead of having a
separate x and y variable,
00:30 - I want to have a variable that
keeps that x and y together
00:34 - as a vector.
00:35 - And this is going to
allow me to be a bit more
00:37 - flexible about how
motion works and kind
00:40 - of play with the quality of
the random walk a bit more.
00:44 - I am also going to add
something called a Lévy flight.
00:47 - So there are so many ways
you can vary the probability
00:50 - and quality of a random walker.
00:52 - And I hope that
maybe some of you
00:54 - have already done that and
shared some of your variations
00:56 - with me.
00:56 - A know concept, a
known technique,
00:59 - is something called
the Lévy flight.
01:01 - And what the Lévy
flight is modeled after,
01:04 - so something that actually
happens in nature.
01:06 - Sharks and other
large sea animals
01:10 - and maybe birds of prey
and different hunting--
01:13 - what a lot of these
animals do looking for food
01:16 - is they'll look around
to try to find something,
01:19 - to hunt their prey.
01:19 - If there's nothing there, then
they'll take a really long step
01:22 - and go somewhere else, and
then make smaller steps
01:24 - to look around.
01:25 - So unlike the current
random walk that I have,
01:30 - this random walk can
only ever move one pixel.
01:32 - And it never suddenly jumps.
01:33 - But what if this random walk,
looking around for berries,
01:36 - because it likes berries, but
there's no berries over here.
01:38 - Let's go all the way down
here and now look around
01:40 - and see if we can find berries.
01:41 - And then come all the way over
here, and now look around.
01:43 - Wouldn't it be great if it
would just draw as I did that?
01:44 - I'm going to get that
working some day.
01:46 - And go around and go
here, and go up here.
01:48 - So this is one of the things
that I want to add to this.
01:50 - How do I vary the
probability of the step size
01:53 - to forage for berries?
01:54 - What's your favorite berry?
01:55 - Mine is blueberry.
01:57 - Although I have this acid
thing, and I'm told that I'm not
01:59 - supposed to have blueberries.
02:00 - Melon is good.
02:02 - This is off topic.
02:03 - OK, so let's look
at-- first, we're
02:05 - going to make this easier.
02:06 - Let's add vectors to this.
02:08 - OK, so what is a vector?
02:09 - Now first of all, if you want to
do a deeper dive into vectors,
02:13 - I'll link to my playlist
from the Nature of Code
02:16 - playlist, all about vectors
that you can look at.
02:18 - And also the Kadenze
course that I mentioned,
02:20 - I'll link to it here, which
is an online course, not
02:22 - on YouTube, but has
videos for free.
02:24 - I look at vectors
in JavaScript, which
02:26 - is probably more relevant
to this particular video.
02:28 - My ones on YouTube are
using processing in Java.
02:32 - But anyway, what is a vector?
02:33 - So I mentioned that the random
walker has an x, y position.
02:39 - And I probably shouldn't
draw this arrow here,
02:41 - because the thing that I'm going
to use to demonstrate vectors
02:43 - is an arrow.
02:45 - So this right here
is an x, y point.
02:47 - So a vector is an
entity that has
02:53 - both a magnitude and direction.
02:55 - So typically, that
is drawn as an arrow.
02:58 - Its direction, you
can think of it
03:00 - as the sort of angle
of orientation.
03:02 - I'm just thinking
about vectors in 2D.
03:03 - The idea of a vector
is actually just
03:06 - essentially a list of values
in some dimensional space.
03:09 - And this is a big thing
in machine learning
03:11 - and all sorts of-- but I'm
thinking of a very simple idea,
03:14 - of just a vector
in two dimensions.
03:16 - It has a direction, its angle.
03:19 - And it has a magnitude,
the length of the arrow.
03:24 - This is the idea of a vector.
03:25 - It's this arrow
that's long or short.
03:27 - The components of it are a
displacement along the x-axis
03:32 - and a displacement
along the y-axis.
03:34 - So the way that you could think
about this point as an x, y
03:37 - is actually a vector that points
from the origin to that point.
03:42 - So if you need it to travel
from 0, 0 to where that spot is,
03:46 - you would need to go
a certain amount of y
03:48 - and a certain amount of
x, and you would be there.
03:50 - And the vector
positions you there.
03:52 - Now, a vector doesn't have
a particular location.
03:55 - A vector is just this entity.
03:57 - So we could also consider
each step to be a vector.
04:01 - So before, when we
had the random walk,
04:04 - the random walk could only ever
move up, right, down, left.
04:08 - And this is sort of
a formal definition
04:10 - of the classic random walk.
04:12 - But I'm going to do a
vector random walk, meaning,
04:16 - it could go one unit
in any given direction.
04:20 - And then that vector, its
length could be variable.
04:24 - So what is the probability
of it moving one
04:26 - unit versus moving many units?
04:28 - And this is how we're going
to get that Lévy flight.
04:32 - So now I'm going to
do my vector random
04:34 - walk back to the computer.
04:36 - This is a random walk.
04:39 - OK, here I am.
04:41 - OK, so let's go to the
code and start implementing
04:43 - some of this stuff.
04:44 - So basically, what
I want to do is,
04:46 - I want to get rid of my x and y.
04:48 - And I instead want to
say, I'm going to call it
04:50 - P-O-S, pos, for position.
04:52 - And instead of setting x equal
to 200 and y equal to 200,
04:56 - I'm going to say, pos equals
createVector 200, 200.
05:01 - So this function in
p5, createVector,
05:04 - just makes a vector object.
05:06 - A vector object is
part of the p5 library.
05:08 - And now I have
this vector object
05:10 - in pos, which has an x and a y.
05:12 - And just so we can see it,
I can say, console.log, pos.
05:15 - So we can take a look at
that, what that object looks
05:17 - like in the console.
05:18 - I can't type.
05:20 - OK, now what I want
to do is, instead
05:22 - of drawing the
point at x and y, I
05:24 - want to draw the point at pos.
05:25 - But the point function and the
ellipse function and the line
05:28 - function, they always expect
the separate x and y values.
05:31 - And I can access those by
saying dot x and dot y.
05:34 - So a vector is an object.
05:36 - And objects in JavaScript have
properties that you can access
05:39 - by saying dot the thing--
05:41 - pos dot, pos dot, pos dot song?
05:45 - No, maybe?
05:45 - Maybe, not really.
05:46 - OK, so then I could also just
say, hey, pos.x equals pos.x
05:50 - plus 1, pos.x.
05:55 - Oh, I'm going to do
this in a faster way.
05:57 - I kind of want this
video to speed up
05:59 - right now. pos.x, pos.y,
pos.y, pos.y, pos.y, and now
06:04 - I should have exactly
the same program.
06:07 - If I refresh, we can see it's
doing exactly the same thing.
06:11 - The random walker is
moving around randomly.
06:15 - And you can see here,
here's my object.
06:19 - My object is a p5
vector with an x and y.
06:22 - By the way, it has a z.
06:23 - So at some point, I'm
going to come back and look
06:25 - at doing a random walk in 3D.
06:27 - The vector object in
p5, also in processing,
06:29 - has a z built into it.
06:30 - But I'm just ignoring
that fact right now.
06:33 - And if I type in the
console here pos again,
06:35 - I can see these are
its current values.
06:37 - That's where it is
right now, 178 and 214.
06:40 - OK, so that's pretty good.
06:42 - Now actually, though, I'm
going to do something.
06:44 - Here, I'm saying, there's
only four options--
06:47 - 1, 2, 3, or 4.
06:48 - 0, 1, 2, or 3, move to the
right, move to the left,
06:51 - move up, move down.
06:52 - I'm going to just radically
change this completely.
06:55 - I'm going to just take
all this code out.
06:58 - And what I'm going to do is I'm
going to say, var step equals.
07:03 - And what I want right now is a
vector that has a length of 1
07:08 - and points in any
given direction.
07:10 - And there's actually
a function in p5
07:12 - that will give me a
vector like that already.
07:14 - It would be interesting to
discuss how you calculate
07:17 - a random vector using
just the random function,
07:19 - but I don't need to.
07:20 - Because I could say
p5.Vector.random2D.
07:24 - This is a little bit
of a weird syntax here.
07:26 - So why wouldn't I just
say-- you could sort of say,
07:29 - why isn't it just something
like this, something like that?
07:34 - Why isn't there just a
global function random 2D
07:37 - vector that gives me--
07:38 - there's a global function create
vector, right, create vector.
07:42 - Why isn't there a
create random 2D vector?
07:44 - Well, there could be one.
07:46 - In p5, the library could
be implemented that way.
07:48 - But to be honest,
there's a bunch
07:50 - of functions
associated with vectors
07:52 - that aren't so commonly used.
07:54 - And they would really
pollute, in many ways,
07:56 - the simple p5 reference that
has the core functionality.
07:59 - So some of the functions that
are associated with vectors
08:02 - are actually inside of the
sort of namespace, so to speak,
08:06 - of the p5 vector object.
08:08 - And you want to go to the p5
vector reference page, which
08:11 - I'll link to in
this video, to find
08:12 - the documentation for this.
08:14 - So to make a 2D vector, I've
got to say p5.Vector.random2D.
08:18 - And then guess what?
08:18 - Now, what I want to do is
say pos equals pos plus step.
08:23 - Because what I want to say
is, have a random step,
08:26 - and then take a
step every frame.
08:28 - Take a step, random step,
take a step every frame.
08:30 - So this is my pos.
08:32 - Add step to it.
08:33 - This is my pos.
08:34 - Add step to it.
08:35 - But let's see what
happens when I run this.
08:39 - Nothing.
08:41 - So JavaScript doesn't even
give me an error message.
08:44 - It just like, eh, uh, meh, uh.
08:51 - So the reason why
this doesn't work
08:53 - is, JavaScript doesn't
know what to do
08:56 - with this plus and these values.
08:59 - It knows how to do 2 plus 3.
09:01 - That's 5.
09:02 - 10 plus 7 is 17.
09:03 - I could keep going.
09:04 - I could do addition.
09:05 - I'm very proud of myself.
09:07 - It also knows how to
do plus with strings.
09:11 - Rain plus bow is rainbow.
09:14 - But it doesn't know how
to do plus with vectors.
09:17 - And some programming
environments allow you
09:19 - to overload-- the
term is overload--
09:21 - overload an operator and tell
the programming environment
09:24 - how to do it, with a
plus sign, how it works.
09:29 - But JavaScript
doesn't have that--
09:32 - there's ways around
that-- but so easily.
09:34 - So the way that I need
to add a step to pos
09:37 - is by looking at the p5
vector documentation.
09:39 - And you'll notice there's
a function called add.
09:41 - So I could just
say, pos.add step.
09:45 - So once I say,
this is a function
09:47 - add that's part of
the vector library,
09:49 - I want to add the
step vector to pos.
09:53 - And now I'm going to hit
Refresh, and we can see,
09:55 - there we go.
09:55 - Now, this is actually doing
something quite different
09:59 - than the previous video, because
it's using floating point math.
10:03 - And if I look at where
the pos is right now,
10:06 - you can see that
it's at this number.
10:07 - Now, one thing to note is that
there's no, like, 213.84 pixel.
10:15 - So when you say to
draw it that number,
10:17 - the browser or the
operating system
10:19 - is going to sort of
figure out what to do.
10:21 - Sometimes it just takes
off the decimal place.
10:23 - Sometimes it does
some kind of what's
10:24 - called subpixel
rendering by kind
10:26 - of using some alpha values to
make like the illusion of it
10:29 - in between pixels.
10:30 - But we don't really need to
worry about that too much.
10:32 - You can see the quality
of what we're getting
10:34 - is essentially the same.
10:36 - And now what I want to do is
add the idea of a Lévy flight
10:39 - to it.
10:39 - So at some point, I would love
to discuss a variety of ways
10:43 - that we could control the
probability of the step size.
10:47 - Right now, ask yourself,
what is the step size?
10:51 - What is the step size?
10:52 - You could pause the video
to try to answer it.
10:54 - The step size right now,
which I mentioned a few times,
10:57 - is actually 1.
10:58 - So random 2D gives
you, by definition,
11:00 - what's called a
unit vector, meaning
11:02 - the length of that vector is 1.
11:03 - But I could always
change that length.
11:05 - I could say, step.multiply by 5.
11:09 - That takes the vector
and scales it up times 5,
11:12 - makes it five times as long.
11:13 - And if I do that, you'll see--
11:16 - whoa, did I not hit Save?
11:18 - I did not hit Save.
11:19 - Now you'll see, look
what's happening there.
11:21 - Oh, I've definitely
got something
11:23 - I've got to fix with
this, I just noticed.
11:24 - You can see that the
step size is bigger
11:26 - and the dots are further apart.
11:29 - So incidentally, let's
fix this issue right now.
11:31 - I want to see a line
from one spot to another
11:35 - now that the steps are so big.
11:36 - When it was only 1,
the points would always
11:38 - appear next to each other.
11:39 - So to do that, I want a
variable called previous.
11:43 - And I'm going to say,
previous equals pos.copy.
11:47 - So this is kind of
an interesting thing.
11:49 - Because these are
objects, the vector object
11:52 - has built into itself--
11:54 - and all objects have this--
a function called copy,
11:56 - which creates a copy of it.
11:58 - I don't want to say
previous equals pos.
12:00 - Because that way, if I
change pos, previous changes,
12:03 - they're actually pointing
to the same data.
12:05 - I want to make a copy.
12:06 - So I want pos and
previous to both
12:08 - be a copy at the same spot.
12:11 - And then what I want to do
is draw a line between pos.x,
12:16 - pos.y, and previous
dot x, previous dot y.
12:21 - Then, before I change the
step, before I add step to pos,
12:26 - once again, I want to say,
previous equals pos.copy.
12:30 - Now, this is actually
kind of a bad idea.
12:32 - It probably doesn't matter.
12:34 - But I'm sort of unnecessarily
creating new objects
12:36 - over and over again.
12:38 - So in this case, I think what
I actually want to do is say,
12:40 - previous dot set pos.
12:43 - I think what that
will do is just
12:44 - say, set the values
of previous to pause.
12:48 - The reason why I
couldn't do that up here
12:49 - is because previous
didn't exist yet.
12:51 - So copy makes a new vector.
12:53 - And the set function just
takes an existing vector
12:56 - and kind of copies the
values over into it.
12:58 - I think this will work.
12:59 - So let's see now what we get.
13:00 - We can see now it's
connected with a line.
13:02 - I guess I have an alpha in
here that I didn't notice.
13:05 - Let's take that out.
13:06 - So you can see it's
connected with a line.
13:08 - And I could just change
the step size now to 25.
13:12 - And we could see,
look, a random walk
13:13 - is making really big
steps now, 25 steps.
13:16 - And then I could
say, hey, what if I
13:18 - make this a random value, a
random step between 1 and 25.
13:24 - Now, what you'll see is the
step size is actually random.
13:26 - So in order to complete the
Lévy flight, what I need to do,
13:32 - I need to have a
probability of--
13:34 - I need to have it be
most likely that it's
13:36 - going to take a small step,
but every once in a while
13:39 - take a big step.
13:40 - And I'm going to do that in a
kind of quick and dirty way,
13:42 - which is just to say, let
me pick a random number,
13:48 - var r equals random 100.
13:52 - You don't have to use
a range from 0 to 100,
13:54 - but this is a nice way
to implement probability
13:57 - in your code.
13:58 - What if I want there to be a 5%
chance of something happening?
14:02 - Well, if I pick a number
between 0 and 100,
14:04 - that number is going to be
less than 5 5% of the time.
14:08 - I could have done this
by saying, random 1,
14:10 - and say, 0.05.
14:12 - But just for readability
right now, I'm
14:13 - going to say random 100.
14:15 - So let's just say there's
a 5% chance of taking
14:19 - a step that is actually sum
that is actually 25 pixels.
14:25 - So it's always going to make
a vector that is one step.
14:28 - And this, by the way, is making
a new vector every frame,
14:30 - but big deal.
14:32 - That's a unit vector.
14:34 - But 5% of the time,
it's going to go 25.
14:36 - So let's look at this.
14:37 - And we can see we've now got
this lead of like-- now 5%
14:40 - is actually kind of
often, you can see.
14:42 - And 25 pixels is
maybe not that long.
14:44 - So maybe what I'm
to do is actually
14:45 - make that step randomly
between 25 or 100,
14:49 - and I'm actually going to
make it just 1% of the time.
14:52 - And so now we're going to see--
14:54 - and maybe what I actually
want to do is always
14:59 - make the step size--
15:01 - and by the way,
there's a function
15:02 - called setMag, set magnitude.
15:06 - Right now, because
its unit vector is 1,
15:08 - if I multiply by 10, I
get it's magnitude of 10,
15:10 - because 1 times 10 is 10.
15:12 - But if it's magnitude was like
15, and then I wanted to be 10,
15:16 - I would have to divide it by
15 and then multiply it by 10.
15:19 - So there's actually a
function called setMag,
15:20 - which is set the magnitude,
which I could do.
15:22 - I'm going to just set it
2, so its native sizes
15:25 - are a little bit bigger.
15:26 - And now you can see we've
got the Lévy flight.
15:30 - So this is one variation.
15:33 - What kind of ideas
could you have,
15:35 - in terms of color and design
or adding a narrative to this
15:38 - that you might explore, or
changing the probabilities?
15:41 - Now, oh, there we go.
15:41 - Oh, there we go.
15:42 - So now we can see
these large steps.
15:44 - And so explore this.
15:46 - Play with it.
15:48 - The code from this video will
be linked in the description.
15:51 - If you make something
with it, share it
15:53 - with me on Twitter @shiffman.
15:54 - Or share it in the comments.
15:55 - And I try to at least read and
go through all the comments.
15:58 - Generally once a day, I'm kind
of checking them and reading
16:00 - them and enjoying them.
16:01 - So thanks for tuning in to this
second random walk Lévy flight
16:04 - video.
16:05 - [TRAIN WHISTLE]
16:06 - [MUSIC PLAYING]

Cleaned transcript:

What's that? [TRAIN WHISTLE] The coding train is pulling into the station? Yes, it is. And it's bringing with it vectors and a Lévy flight. So I'm going to, in this video oh, that sound effect ended. Thank goodness. That was very embarrassing. In this video, I am going to expand on my previous random walker example, and I want to do two things. One is, I want to bring in the concept of vectors. So instead of having a separate x and y variable, I want to have a variable that keeps that x and y together as a vector. And this is going to allow me to be a bit more flexible about how motion works and kind of play with the quality of the random walk a bit more. I am also going to add something called a Lévy flight. So there are so many ways you can vary the probability and quality of a random walker. And I hope that maybe some of you have already done that and shared some of your variations with me. A know concept, a known technique, is something called the Lévy flight. And what the Lévy flight is modeled after, so something that actually happens in nature. Sharks and other large sea animals and maybe birds of prey and different hunting what a lot of these animals do looking for food is they'll look around to try to find something, to hunt their prey. If there's nothing there, then they'll take a really long step and go somewhere else, and then make smaller steps to look around. So unlike the current random walk that I have, this random walk can only ever move one pixel. And it never suddenly jumps. But what if this random walk, looking around for berries, because it likes berries, but there's no berries over here. Let's go all the way down here and now look around and see if we can find berries. And then come all the way over here, and now look around. Wouldn't it be great if it would just draw as I did that? I'm going to get that working some day. And go around and go here, and go up here. So this is one of the things that I want to add to this. How do I vary the probability of the step size to forage for berries? What's your favorite berry? Mine is blueberry. Although I have this acid thing, and I'm told that I'm not supposed to have blueberries. Melon is good. This is off topic. OK, so let's look at first, we're going to make this easier. Let's add vectors to this. OK, so what is a vector? Now first of all, if you want to do a deeper dive into vectors, I'll link to my playlist from the Nature of Code playlist, all about vectors that you can look at. And also the Kadenze course that I mentioned, I'll link to it here, which is an online course, not on YouTube, but has videos for free. I look at vectors in JavaScript, which is probably more relevant to this particular video. My ones on YouTube are using processing in Java. But anyway, what is a vector? So I mentioned that the random walker has an x, y position. And I probably shouldn't draw this arrow here, because the thing that I'm going to use to demonstrate vectors is an arrow. So this right here is an x, y point. So a vector is an entity that has both a magnitude and direction. So typically, that is drawn as an arrow. Its direction, you can think of it as the sort of angle of orientation. I'm just thinking about vectors in 2D. The idea of a vector is actually just essentially a list of values in some dimensional space. And this is a big thing in machine learning and all sorts of but I'm thinking of a very simple idea, of just a vector in two dimensions. It has a direction, its angle. And it has a magnitude, the length of the arrow. This is the idea of a vector. It's this arrow that's long or short. The components of it are a displacement along the xaxis and a displacement along the yaxis. So the way that you could think about this point as an x, y is actually a vector that points from the origin to that point. So if you need it to travel from 0, 0 to where that spot is, you would need to go a certain amount of y and a certain amount of x, and you would be there. And the vector positions you there. Now, a vector doesn't have a particular location. A vector is just this entity. So we could also consider each step to be a vector. So before, when we had the random walk, the random walk could only ever move up, right, down, left. And this is sort of a formal definition of the classic random walk. But I'm going to do a vector random walk, meaning, it could go one unit in any given direction. And then that vector, its length could be variable. So what is the probability of it moving one unit versus moving many units? And this is how we're going to get that Lévy flight. So now I'm going to do my vector random walk back to the computer. This is a random walk. OK, here I am. OK, so let's go to the code and start implementing some of this stuff. So basically, what I want to do is, I want to get rid of my x and y. And I instead want to say, I'm going to call it POS, pos, for position. And instead of setting x equal to 200 and y equal to 200, I'm going to say, pos equals createVector 200, 200. So this function in p5, createVector, just makes a vector object. A vector object is part of the p5 library. And now I have this vector object in pos, which has an x and a y. And just so we can see it, I can say, console.log, pos. So we can take a look at that, what that object looks like in the console. I can't type. OK, now what I want to do is, instead of drawing the point at x and y, I want to draw the point at pos. But the point function and the ellipse function and the line function, they always expect the separate x and y values. And I can access those by saying dot x and dot y. So a vector is an object. And objects in JavaScript have properties that you can access by saying dot the thing pos dot, pos dot, pos dot song? No, maybe? Maybe, not really. OK, so then I could also just say, hey, pos.x equals pos.x plus 1, pos.x. Oh, I'm going to do this in a faster way. I kind of want this video to speed up right now. pos.x, pos.y, pos.y, pos.y, pos.y, and now I should have exactly the same program. If I refresh, we can see it's doing exactly the same thing. The random walker is moving around randomly. And you can see here, here's my object. My object is a p5 vector with an x and y. By the way, it has a z. So at some point, I'm going to come back and look at doing a random walk in 3D. The vector object in p5, also in processing, has a z built into it. But I'm just ignoring that fact right now. And if I type in the console here pos again, I can see these are its current values. That's where it is right now, 178 and 214. OK, so that's pretty good. Now actually, though, I'm going to do something. Here, I'm saying, there's only four options 1, 2, 3, or 4. 0, 1, 2, or 3, move to the right, move to the left, move up, move down. I'm going to just radically change this completely. I'm going to just take all this code out. And what I'm going to do is I'm going to say, var step equals. And what I want right now is a vector that has a length of 1 and points in any given direction. And there's actually a function in p5 that will give me a vector like that already. It would be interesting to discuss how you calculate a random vector using just the random function, but I don't need to. Because I could say p5.Vector.random2D. This is a little bit of a weird syntax here. So why wouldn't I just say you could sort of say, why isn't it just something like this, something like that? Why isn't there just a global function random 2D vector that gives me there's a global function create vector, right, create vector. Why isn't there a create random 2D vector? Well, there could be one. In p5, the library could be implemented that way. But to be honest, there's a bunch of functions associated with vectors that aren't so commonly used. And they would really pollute, in many ways, the simple p5 reference that has the core functionality. So some of the functions that are associated with vectors are actually inside of the sort of namespace, so to speak, of the p5 vector object. And you want to go to the p5 vector reference page, which I'll link to in this video, to find the documentation for this. So to make a 2D vector, I've got to say p5.Vector.random2D. And then guess what? Now, what I want to do is say pos equals pos plus step. Because what I want to say is, have a random step, and then take a step every frame. Take a step, random step, take a step every frame. So this is my pos. Add step to it. This is my pos. Add step to it. But let's see what happens when I run this. Nothing. So JavaScript doesn't even give me an error message. It just like, eh, uh, meh, uh. So the reason why this doesn't work is, JavaScript doesn't know what to do with this plus and these values. It knows how to do 2 plus 3. That's 5. 10 plus 7 is 17. I could keep going. I could do addition. I'm very proud of myself. It also knows how to do plus with strings. Rain plus bow is rainbow. But it doesn't know how to do plus with vectors. And some programming environments allow you to overload the term is overload overload an operator and tell the programming environment how to do it, with a plus sign, how it works. But JavaScript doesn't have that there's ways around that but so easily. So the way that I need to add a step to pos is by looking at the p5 vector documentation. And you'll notice there's a function called add. So I could just say, pos.add step. So once I say, this is a function add that's part of the vector library, I want to add the step vector to pos. And now I'm going to hit Refresh, and we can see, there we go. Now, this is actually doing something quite different than the previous video, because it's using floating point math. And if I look at where the pos is right now, you can see that it's at this number. Now, one thing to note is that there's no, like, 213.84 pixel. So when you say to draw it that number, the browser or the operating system is going to sort of figure out what to do. Sometimes it just takes off the decimal place. Sometimes it does some kind of what's called subpixel rendering by kind of using some alpha values to make like the illusion of it in between pixels. But we don't really need to worry about that too much. You can see the quality of what we're getting is essentially the same. And now what I want to do is add the idea of a Lévy flight to it. So at some point, I would love to discuss a variety of ways that we could control the probability of the step size. Right now, ask yourself, what is the step size? What is the step size? You could pause the video to try to answer it. The step size right now, which I mentioned a few times, is actually 1. So random 2D gives you, by definition, what's called a unit vector, meaning the length of that vector is 1. But I could always change that length. I could say, step.multiply by 5. That takes the vector and scales it up times 5, makes it five times as long. And if I do that, you'll see whoa, did I not hit Save? I did not hit Save. Now you'll see, look what's happening there. Oh, I've definitely got something I've got to fix with this, I just noticed. You can see that the step size is bigger and the dots are further apart. So incidentally, let's fix this issue right now. I want to see a line from one spot to another now that the steps are so big. When it was only 1, the points would always appear next to each other. So to do that, I want a variable called previous. And I'm going to say, previous equals pos.copy. So this is kind of an interesting thing. Because these are objects, the vector object has built into itself and all objects have this a function called copy, which creates a copy of it. I don't want to say previous equals pos. Because that way, if I change pos, previous changes, they're actually pointing to the same data. I want to make a copy. So I want pos and previous to both be a copy at the same spot. And then what I want to do is draw a line between pos.x, pos.y, and previous dot x, previous dot y. Then, before I change the step, before I add step to pos, once again, I want to say, previous equals pos.copy. Now, this is actually kind of a bad idea. It probably doesn't matter. But I'm sort of unnecessarily creating new objects over and over again. So in this case, I think what I actually want to do is say, previous dot set pos. I think what that will do is just say, set the values of previous to pause. The reason why I couldn't do that up here is because previous didn't exist yet. So copy makes a new vector. And the set function just takes an existing vector and kind of copies the values over into it. I think this will work. So let's see now what we get. We can see now it's connected with a line. I guess I have an alpha in here that I didn't notice. Let's take that out. So you can see it's connected with a line. And I could just change the step size now to 25. And we could see, look, a random walk is making really big steps now, 25 steps. And then I could say, hey, what if I make this a random value, a random step between 1 and 25. Now, what you'll see is the step size is actually random. So in order to complete the Lévy flight, what I need to do, I need to have a probability of I need to have it be most likely that it's going to take a small step, but every once in a while take a big step. And I'm going to do that in a kind of quick and dirty way, which is just to say, let me pick a random number, var r equals random 100. You don't have to use a range from 0 to 100, but this is a nice way to implement probability in your code. What if I want there to be a 5% chance of something happening? Well, if I pick a number between 0 and 100, that number is going to be less than 5 5% of the time. I could have done this by saying, random 1, and say, 0.05. But just for readability right now, I'm going to say random 100. So let's just say there's a 5% chance of taking a step that is actually sum that is actually 25 pixels. So it's always going to make a vector that is one step. And this, by the way, is making a new vector every frame, but big deal. That's a unit vector. But 5% of the time, it's going to go 25. So let's look at this. And we can see we've now got this lead of like now 5% is actually kind of often, you can see. And 25 pixels is maybe not that long. So maybe what I'm to do is actually make that step randomly between 25 or 100, and I'm actually going to make it just 1% of the time. And so now we're going to see and maybe what I actually want to do is always make the step size and by the way, there's a function called setMag, set magnitude. Right now, because its unit vector is 1, if I multiply by 10, I get it's magnitude of 10, because 1 times 10 is 10. But if it's magnitude was like 15, and then I wanted to be 10, I would have to divide it by 15 and then multiply it by 10. So there's actually a function called setMag, which is set the magnitude, which I could do. I'm going to just set it 2, so its native sizes are a little bit bigger. And now you can see we've got the Lévy flight. So this is one variation. What kind of ideas could you have, in terms of color and design or adding a narrative to this that you might explore, or changing the probabilities? Now, oh, there we go. Oh, there we go. So now we can see these large steps. And so explore this. Play with it. The code from this video will be linked in the description. If you make something with it, share it with me on Twitter @shiffman. Or share it in the comments. And I try to at least read and go through all the comments. Generally once a day, I'm kind of checking them and reading them and enjoying them. So thanks for tuning in to this second random walk Lévy flight video. [TRAIN WHISTLE] [MUSIC PLAYING]
