With timestamps:

00:01 - Ok, so here's another important aspect
00:03 - about image processing that we left out
00:05 - in the previous video.
00:07 - (clears throat)
00:07 - So what did we do?
00:08 - We had, an image of a frog
00:12 - we processed every single pixel and we
00:15 - copied that pixel to our processing display
window and maybe we manipulated it while
00:21 - copying it, we made it brighter
we changed it's color, we did all sorts of things.
00:25 - This is, I would say, pixel point processing.
00:29 - What we are doing is there's a one to one
00:32 - relationship, for this pixel
00:36 - change this pixel
00:38 - for the next pixel, change this pixel
00:39 - for the next pixel, change the next pixel.
00:41 - However, most sophisticated image processing
00:44 - algorithms that you might find in
00:47 - not to keep using photoshop as an example
00:48 - photoshop or a ** image processing.
00:51 - actually process goups of pixels
00:54 - for example,
00:54 - let's say this is my frog
00:58 - pixel
00:59 - my frog image
01:01 - and this here is my processing window,
01:04 - and let's say this is the pixel I want to
01:06 - set here in my processing window.
01:07 - What if inorder to set this pixel
I actually
01:11 - used a whole bunch of neighbouring pixels
01:15 - around that pixel, so that pixel
01:16 - is over here
01:18 - I don't know what am drawing here exactly
umm but I actually took all of the
01:22 - pixels in five by five matrix around it and
this is the roo.. the color of this pixel
01:27 - is a function of all of these pixels
combined.
01:30 - Ahh aah, a classic image processing
01:33 - algorithm that you might
01:34 - have used before is a blur.
01:36 - What if you take a pic.. an image
01:38 - and blur it making it fuzzier,
01:40 - less sharp, less in focus.
01:42 - Well actually if you average all of the pixels
01:45 - of an area
01:46 - to set a particular pixel, that's a
01:48 - blur algorithm.
01:50 - It is making each pixel
01:52 - more like it's neighbours
01:54 - almost ahh bluring it, averaging it,
01:56 - smoothing it between pixels.
01:58 - So this is a actually an algorithm
01:59 - and sharpening it is the opposite
02:01 - taking each pixel and making it more
02:03 - different than it's neighbours.
02:04 - Umm another example
of an algorithm is finding the edges
02:08 - in an image.
So if I have a silhouette of a person
02:13 - (chuckles)
02:13 - this looks nothing like a person
02:15 - and I don't know..
02:15 - some weird ghost alien thing
02:17 - and I wanna find the edges of this person
02:19 - well let's say this person was wearing
02:22 - a black shirt,
02:23 - much like the.. my black shirt here
02:25 - how would I find the edges?
02:26 - Well, if this is
02:28 - if you're looking at an image of me
02:29 - the pixels that are very different
02:31 - the white pixels and these black pixels
02:33 - a pixel that's very different
02:35 - from it's neighbours is an edge right?
02:36 - (finger taps his microphone twice)
02:37 - this pixel over here is very similar to
02:39 - all it's neighbours.
02:39 - This pixel right here is quite different
02:41 - than it's neighbours it must be
02:42 - on an edge.
02:43 - So, finding the edges of an image
02:45 - has to do with looking for pixels that
02:47 - are very different from their neighbours.
02:48 - Let's actually see if we can,
02:49 - implement this really really quickly
02:51 - in our frog example.
02:52 - (taps to switch cameras)
02:53 - So if I come over here, to the frog
02:56 - and if I look at this froooooog
03:01 - and what where we doing here?
03:02 - We were ahh kinda doing this threshold
03:05 - thing, that's where we last were.
03:06 - Well, let me say, let's aah
03:09 - take all this out and
03:11 - let's take all this out.
03:13 - Here is a particular pixel location,
03:17 - what if I want to look at this pixel
03:19 - relative to the pixel to it's right
03:21 - or to it's left, or above or below.
03:23 - Well, what will that pixel be this is
03:26 - location1 another location might be
03:30 - (x+1) times y times width
03:35 - and if you look at this what is
03:37 - the difference here?
03:38 - Now am saying, let me look at pixel x + y
03:41 - xy and let me look at pixel x+1, y
03:44 - right? Here ahh if am over here and then
03:48 - am in some image
03:50 - if this is pixel x - oh you can't see that.
03:52 - If this is pixel x, y then this right here
03:57 - right next to it is pixel x+1, y
04:00 - so ofcourse a more sophisticated algorithm
04:02 - migh look at x+1 and x-1 and y+1 and y-1
04:05 - x+2 and y+2 aloot of pixels
04:08 - in the neigboring area but just to
04:10 - start really simply let's look at this pixel
04:12 - and the one next to it.
04:13 - (taps to switch camera)
04:14 - So if I'm looking at this pixel and
04:16 - the one next to it, I can look at both
04:18 - of the brightness of both of those pixels.
04:20 - b1 equals frog.pixels[loc1];
04:24 - b2 equals frog.pixels[loc2];
04:28 - Aaah those cameras are always shutting off
04:31 - am gonna fix that in the middle
04:33 - of this video look I turned black
04:35 - for a second and am back
04:37 - and am just going to fix this one
04:39 - you'll have to bear with me, there's
04:41 - nothing I can do about this right now.
04:42 - ohhh come back (taps twice)
04:44 - Ok, am back I'l edit all that out later
04:48 - ok so now uhh I could get a
04:52 - difference which is maybe am just gonna
04:54 - say the absolute value of (b1-b2)
04:56 - and let's set the pixel of the window
05:01 - equal to that difference
05:04 - noow, oops loc1
05:07 - so loc1 is kind of my core original
05:10 - location so I wanna set that individual
05:12 - pixel but I wanna look at it as a function
05:14 - the value of that pixel as a function of
05:16 - two pixels that are next to each other
05:18 - let's run this and by the way
05:20 - we got this sad, very difficult, really
05:23 - traumatic array out of bounds exception
05:26 - this error is something that will happen
05:28 - to you as soon as you start doing any
05:30 - image processing work. What happened?
05:31 - I tried to look at, investigate,
05:34 - think about access a picel that doesn't
05:36 - exist, because at some point I was at a
05:38 - pixel that was all the way at the edge
05:40 - of my image and I tried to look at
05:41 - pixel one more to the edge
05:43 - which doesn't exist.
05:44 - So there's alot of strategies around this
05:46 - problem for right now am just going to
05:47 - do something which is kind of simple
05:49 - which is say let me just look at all the
05:50 - pixels all the way up to one before the
edge
05:53 - and that will kind of like deal with this
05:54 - problem but you can think of other things
05:55 - you could have pixels wrap around
05:56 - there's lots of other ways you could
05:57 - approach this problem
05:58 - but now we can see
05:59 - you know this isn't the perfect
06:02 - demonstration but I've kinda really got
06:04 - something here the the frog by the way
06:06 - was had a lot of similar colors so am
06:09 - getting ummm umm
06:11 - actually am not exactly getting
06:14 - what I expected I guess the frog actually
06:15 - didn't have lots of similar colors it's
06:17 - very different cuz we're getting we're
06:19 - getting a very bright color everywhere
06:21 - there. I guess there's a big difference
06:24 - of all the pixels inside the frog
06:25 - and the background is very
06:26 - noisy so there's a couple of things
06:28 - we're noticing here; one - this isn't
06:29 - such a great algorithm am only looking
06:31 - at the pixels to the left coming to the
right and to the left if I looked at the
06:35 - pixels above and below and diagonally
06:36 - I might be able to uhh determine
06:39 - alot more about the image
06:40 - the other thing is - this particular
06:41 - image has alot of noise in it
06:44 - so I'm am there's so much noise that
06:46 - am not really getting accurate edges
06:47 - maybe blurring the image first and then
06:50 - looking at it looking to the edges might
help, but in the end am actually
06:52 - visually able to see something here
06:54 - but this wasn't the exact demonstration
06:55 - I was hoping for but uhh
06:58 - to.. look at this, maybe try to
07:00 - oohhh I know what the problem is
07:01 - huuuuuh (sighs deeply)
07:03 - am gonna have to re-record this video
07:05 - but what did I just do here?
I did the thing that I did originally
07:08 - which is just I looked at the arbitrary
difference between the giant integer value
07:11 - you're probably all just watching this
like yelling at the screen like you're
07:14 - doing it wrong, what I wanted to do was
07:17 - look at the brightness of each one of
07:18 - this pixels just forgot like I wanna
07:20 - compare the brightness of each one of
07:21 - these pixels. This is gonna give us
07:24 - something much much more umm
07:26 - oh yeah and it's very hard to see here
07:29 - but actually this really worked.
07:31 - I'm really getting the edges I'm really
07:33 - getting the edges cause the edges of
07:35 - the frog that's where the pixels are most
07:37 - different and infact if I want
07:39 - to be a bit more thoughtful about this
07:42 - I might just come up with some threshold
07:44 - like if the pixel values are at all
07:47 - different then,
07:49 - draw black otherwise draw white
07:55 - and now if I run this, we can see
07:57 - aah I'm really starting to see the
07:59 - contours of this frog. I think this could
08:00 - be a better demonstration. So here
08:03 - we're seeing just a really basic
08:05 - algorithm for looking at the comparison
08:07 - between two pixels and finding the edges
08:09 - now again this was a very simplistic
08:13 - approach most of the time what you wanna
08:15 - do wooah haha all that work and this
08:18 - camera is not even on umm most of
08:20 - the time what you wanna do is look
08:21 - at a whole selection of pixels and in fact
08:23 - this is something that you might not
08:24 - be aware of this is right there bring up
08:27 - photoshop for a second if I go to
08:29 - photoshop and I've got my frog loaded
08:30 - in here and I go to filter ahh ahh ah
08:34 - other custom what I dont..
08:39 - what your actually seeing here
08:41 - is an and this is hard for you to see
08:43 - is this are the weights of a pixel
08:45 - If I wanna make a pixel on the center
08:48 - much more important than the ones in
08:50 - the area, that's a sharpening.
08:52 - I want the pixel to be more different
08:54 - than it's neighbours I actually ahh
08:56 - repr.. ahh oops I created very quickly a
09:00 - blur and you can see here
09:02 - this this would be a blur, what if
09:04 - I take all the pixels in a huge neighbour
09:06 - space, add them all together
09:08 - divide them by 25 as an average
09:10 - and you can see here that this
09:13 - umm frog is now blurred am gonna uncheck
09:15 - the preview let me kind of zoom in here
09:18 - umm you can see ahh over here
09:21 - look over here, that frog is blurred
09:23 - that frog is not blurred so this
09:25 - particular algorithm is blurring that
09:28 - image by adding all the pixels together
09:30 - and infact umm you know am not
09:33 - gonna go through the code for this
09:34 - in detail but we can look at this
09:38 - right here so if I look at this particular
09:41 - example this this particular example you can
09:45 - see here if I zoom in to it that the
09:49 - pixels inside the rectangle are being
09:51 - blurred and the pixels outside are not
09:54 - you can see kinda all the arm above me as
09:56 - I move the rectangle over am kinda
09:58 - blurring out that pixel those pixels
09:59 - if I go back to the code, and I put in
10:02 - these weights this is actually
10:08 - sharpening, again I want the pixel
10:09 - on the center to substract the pixels
10:12 - around it to be more different than
10:13 - the pixels around it and if I run this
10:15 - this is a bit more obvious, we can see
10:19 - that this is me sharpening that image
10:21 - now there's alot of noise is happening
10:23 - here am very zoomed in but you can
10:25 - see how this is changing the
10:26 - quality of the pixels so comparing the
10:28 - pixels and its neighbours this idea of
10:31 - looking at a pixel and looking at the
10:33 - ones that are right of it or above or
10:35 - below is an important powerful
10:37 - technique in image processing
10:38 - and we can just you know this video
10:40 - can go on for hours and hours and
10:41 - look at every image processing
10:43 - algorithm that photoshop uses
10:44 - that anyone uses and we can see this
10:46 - technique in alot of them. I guess
10:48 - what am saying here is see what you can
10:51 - do with this idea.
10:51 - What if you umm what if you ahh umm try
10:57 - to recreate this edge detection algorithm
10:59 - but actually use more than just the two
11:01 - pixels that are to the right and left
11:02 - what if you use the pixels above or down
11:04 - what if you actually were able to
11:06 - interactly select whether you're looking
11:07 - at the comparison of vertical pixels
11:09 - or horizontal pixels there's lots of
11:10 - possibilities you might explore and try
11:12 - here and actually something that I
11:14 - didn't do which I think will be
11:16 - really interesting to see which I
11:18 - would like to maybe add to another
11:19 - video at some point and I.. think of it
11:20 - as what happens
11:22 - when we're processing the pixels
11:24 - this pixel goes here this pixel goes here
11:27 - what if I start to move the pixel around?
11:29 - what if I take, what if every time I look
11:32 - at a pixel I actually offset put it in
11:34 - some like random location near where
11:36 - it originally was this will actually give
11:38 - me almost llike a watery effect because
11:40 - the pixels start to like look like
11:42 - they're dispersing or not. This this is an
11:44 - idea that I'd love to demonstrate
11:46 - so I think this video was already quite
11:49 - loong so am not gonna do it here umm
11:50 - but you can think of this as an excercise
11:52 - and I'll try to add one in at some point
11:53 - too that does this.
11:54 - So here are the things that are missing
11:56 - umm am gonna upload these so if you're
11:58 - watching these in the first pass
12:00 - this is where it's gonna stop
12:01 - but what I wanna get to in the next set
12:03 - of videos, number one I wanna look at
12:05 - moving the pixels around which will
12:06 - also be relevant to the idea of what
12:08 - happens if we just sort of like forget
12:11 - about this way of doing things entirely
12:13 - it's like this one to one pixel idea
12:15 - what if I just have a system where am
12:18 - drawing you know patterns and shapes
12:20 - to the screen maybe I draw grid of
12:22 - rectangles or I draw random circles
12:24 - everywhere or I draw swirls swirly spirals
12:27 - all over the screen what if just use an
12:29 - image essentially a database of color
12:31 - so what if I could like look up colors
12:33 - doing form a drawing algorithm
12:35 - create a painting for an image
12:36 - that's one thing I'm gonna look at
12:38 - and once we've done that, the next piece
12:40 - that I wanna look at is what happens
12:42 - when this images aren't static
12:44 - what if I'm getting images from a camera
12:46 - that are changing live real time images or
12:48 - images from a movie file.
12:50 - So those are the I guess there's like
12:53 - three more three/four more videos that
12:54 - need to come to kinda finish off
12:56 - all of these concepts.
12:57 - Ok so send me your feedback, umm I'll
13:00 - be happy to add more things, delete
13:02 - things, redo things or just go away not
13:05 - come back. (laughs) Ok so have good..
13:07 - enjoy your morning, evening, night.
13:10 - I don't know when you're watching this
and you're just like eating some cereal
13:12 - at home that's... something
you might be doing and
13:15 - enjoy that cereal (laughs) talk to you
later.
13:18 - Subtitles by the Amara.org community

Cleaned transcript:

Ok, so here's another important aspect about image processing that we left out in the previous video. (clears throat) So what did we do? We had, an image of a frog we processed every single pixel and we copied that pixel to our processing display window and maybe we manipulated it while copying it, we made it brighter we changed it's color, we did all sorts of things. This is, I would say, pixel point processing. What we are doing is there's a one to one relationship, for this pixel change this pixel for the next pixel, change this pixel for the next pixel, change the next pixel. However, most sophisticated image processing algorithms that you might find in not to keep using photoshop as an example photoshop or a ** image processing. actually process goups of pixels for example, let's say this is my frog pixel my frog image and this here is my processing window, and let's say this is the pixel I want to set here in my processing window. What if inorder to set this pixel I actually used a whole bunch of neighbouring pixels around that pixel, so that pixel is over here I don't know what am drawing here exactly umm but I actually took all of the pixels in five by five matrix around it and this is the roo.. the color of this pixel is a function of all of these pixels combined. Ahh aah, a classic image processing algorithm that you might have used before is a blur. What if you take a pic.. an image and blur it making it fuzzier, less sharp, less in focus. Well actually if you average all of the pixels of an area to set a particular pixel, that's a blur algorithm. It is making each pixel more like it's neighbours almost ahh bluring it, averaging it, smoothing it between pixels. So this is a actually an algorithm and sharpening it is the opposite taking each pixel and making it more different than it's neighbours. Umm another example of an algorithm is finding the edges in an image. So if I have a silhouette of a person (chuckles) this looks nothing like a person and I don't know.. some weird ghost alien thing and I wanna find the edges of this person well let's say this person was wearing a black shirt, much like the.. my black shirt here how would I find the edges? Well, if this is if you're looking at an image of me the pixels that are very different the white pixels and these black pixels a pixel that's very different from it's neighbours is an edge right? (finger taps his microphone twice) this pixel over here is very similar to all it's neighbours. This pixel right here is quite different than it's neighbours it must be on an edge. So, finding the edges of an image has to do with looking for pixels that are very different from their neighbours. Let's actually see if we can, implement this really really quickly in our frog example. (taps to switch cameras) So if I come over here, to the frog and if I look at this froooooog and what where we doing here? We were ahh kinda doing this threshold thing, that's where we last were. Well, let me say, let's aah take all this out and let's take all this out. Here is a particular pixel location, what if I want to look at this pixel relative to the pixel to it's right or to it's left, or above or below. Well, what will that pixel be this is location1 another location might be (x+1) times y times width and if you look at this what is the difference here? Now am saying, let me look at pixel x + y xy and let me look at pixel x+1, y right? Here ahh if am over here and then am in some image if this is pixel x oh you can't see that. If this is pixel x, y then this right here right next to it is pixel x+1, y so ofcourse a more sophisticated algorithm migh look at x+1 and x1 and y+1 and y1 x+2 and y+2 aloot of pixels in the neigboring area but just to start really simply let's look at this pixel and the one next to it. (taps to switch camera) So if I'm looking at this pixel and the one next to it, I can look at both of the brightness of both of those pixels. b1 equals frog.pixels[loc1]; b2 equals frog.pixels[loc2]; Aaah those cameras are always shutting off am gonna fix that in the middle of this video look I turned black for a second and am back and am just going to fix this one you'll have to bear with me, there's nothing I can do about this right now. ohhh come back (taps twice) Ok, am back I'l edit all that out later ok so now uhh I could get a difference which is maybe am just gonna say the absolute value of (b1b2) and let's set the pixel of the window equal to that difference noow, oops loc1 so loc1 is kind of my core original location so I wanna set that individual pixel but I wanna look at it as a function the value of that pixel as a function of two pixels that are next to each other let's run this and by the way we got this sad, very difficult, really traumatic array out of bounds exception this error is something that will happen to you as soon as you start doing any image processing work. What happened? I tried to look at, investigate, think about access a picel that doesn't exist, because at some point I was at a pixel that was all the way at the edge of my image and I tried to look at pixel one more to the edge which doesn't exist. So there's alot of strategies around this problem for right now am just going to do something which is kind of simple which is say let me just look at all the pixels all the way up to one before the edge and that will kind of like deal with this problem but you can think of other things you could have pixels wrap around there's lots of other ways you could approach this problem but now we can see you know this isn't the perfect demonstration but I've kinda really got something here the the frog by the way was had a lot of similar colors so am getting ummm umm actually am not exactly getting what I expected I guess the frog actually didn't have lots of similar colors it's very different cuz we're getting we're getting a very bright color everywhere there. I guess there's a big difference of all the pixels inside the frog and the background is very noisy so there's a couple of things we're noticing here; one this isn't such a great algorithm am only looking at the pixels to the left coming to the right and to the left if I looked at the pixels above and below and diagonally I might be able to uhh determine alot more about the image the other thing is this particular image has alot of noise in it so I'm am there's so much noise that am not really getting accurate edges maybe blurring the image first and then looking at it looking to the edges might help, but in the end am actually visually able to see something here but this wasn't the exact demonstration I was hoping for but uhh to.. look at this, maybe try to oohhh I know what the problem is huuuuuh (sighs deeply) am gonna have to rerecord this video but what did I just do here? I did the thing that I did originally which is just I looked at the arbitrary difference between the giant integer value you're probably all just watching this like yelling at the screen like you're doing it wrong, what I wanted to do was look at the brightness of each one of this pixels just forgot like I wanna compare the brightness of each one of these pixels. This is gonna give us something much much more umm oh yeah and it's very hard to see here but actually this really worked. I'm really getting the edges I'm really getting the edges cause the edges of the frog that's where the pixels are most different and infact if I want to be a bit more thoughtful about this I might just come up with some threshold like if the pixel values are at all different then, draw black otherwise draw white and now if I run this, we can see aah I'm really starting to see the contours of this frog. I think this could be a better demonstration. So here we're seeing just a really basic algorithm for looking at the comparison between two pixels and finding the edges now again this was a very simplistic approach most of the time what you wanna do wooah haha all that work and this camera is not even on umm most of the time what you wanna do is look at a whole selection of pixels and in fact this is something that you might not be aware of this is right there bring up photoshop for a second if I go to photoshop and I've got my frog loaded in here and I go to filter ahh ahh ah other custom what I dont.. what your actually seeing here is an and this is hard for you to see is this are the weights of a pixel If I wanna make a pixel on the center much more important than the ones in the area, that's a sharpening. I want the pixel to be more different than it's neighbours I actually ahh repr.. ahh oops I created very quickly a blur and you can see here this this would be a blur, what if I take all the pixels in a huge neighbour space, add them all together divide them by 25 as an average and you can see here that this umm frog is now blurred am gonna uncheck the preview let me kind of zoom in here umm you can see ahh over here look over here, that frog is blurred that frog is not blurred so this particular algorithm is blurring that image by adding all the pixels together and infact umm you know am not gonna go through the code for this in detail but we can look at this right here so if I look at this particular example this this particular example you can see here if I zoom in to it that the pixels inside the rectangle are being blurred and the pixels outside are not you can see kinda all the arm above me as I move the rectangle over am kinda blurring out that pixel those pixels if I go back to the code, and I put in these weights this is actually sharpening, again I want the pixel on the center to substract the pixels around it to be more different than the pixels around it and if I run this this is a bit more obvious, we can see that this is me sharpening that image now there's alot of noise is happening here am very zoomed in but you can see how this is changing the quality of the pixels so comparing the pixels and its neighbours this idea of looking at a pixel and looking at the ones that are right of it or above or below is an important powerful technique in image processing and we can just you know this video can go on for hours and hours and look at every image processing algorithm that photoshop uses that anyone uses and we can see this technique in alot of them. I guess what am saying here is see what you can do with this idea. What if you umm what if you ahh umm try to recreate this edge detection algorithm but actually use more than just the two pixels that are to the right and left what if you use the pixels above or down what if you actually were able to interactly select whether you're looking at the comparison of vertical pixels or horizontal pixels there's lots of possibilities you might explore and try here and actually something that I didn't do which I think will be really interesting to see which I would like to maybe add to another video at some point and I.. think of it as what happens when we're processing the pixels this pixel goes here this pixel goes here what if I start to move the pixel around? what if I take, what if every time I look at a pixel I actually offset put it in some like random location near where it originally was this will actually give me almost llike a watery effect because the pixels start to like look like they're dispersing or not. This this is an idea that I'd love to demonstrate so I think this video was already quite loong so am not gonna do it here umm but you can think of this as an excercise and I'll try to add one in at some point too that does this. So here are the things that are missing umm am gonna upload these so if you're watching these in the first pass this is where it's gonna stop but what I wanna get to in the next set of videos, number one I wanna look at moving the pixels around which will also be relevant to the idea of what happens if we just sort of like forget about this way of doing things entirely it's like this one to one pixel idea what if I just have a system where am drawing you know patterns and shapes to the screen maybe I draw grid of rectangles or I draw random circles everywhere or I draw swirls swirly spirals all over the screen what if just use an image essentially a database of color so what if I could like look up colors doing form a drawing algorithm create a painting for an image that's one thing I'm gonna look at and once we've done that, the next piece that I wanna look at is what happens when this images aren't static what if I'm getting images from a camera that are changing live real time images or images from a movie file. So those are the I guess there's like three more three/four more videos that need to come to kinda finish off all of these concepts. Ok so send me your feedback, umm I'll be happy to add more things, delete things, redo things or just go away not come back. (laughs) Ok so have good.. enjoy your morning, evening, night. I don't know when you're watching this and you're just like eating some cereal at home that's... something you might be doing and enjoy that cereal (laughs) talk to you later. Subtitles by the Amara.org community
