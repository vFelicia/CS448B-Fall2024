With timestamps:

00:03 - [Music]
00:07 - hello good evening did you hear that
00:10 - sound that's the sound of me actually
00:13 - getting here a half an hour early and
00:14 - hooking up an iPad with some sound
00:17 - effects in it which is maybe not the
00:19 - best thing for you watching right now
00:21 - but it is the best thing for me welcome
00:23 - good evening afternoon morning this is
00:27 - the coding train my name is Dan this is
00:29 - a whenever I get to it kind of weekly
00:32 - live stream I'm just checking to see in
00:36 - the chat if people are seeing me can you
00:39 - please let me know I'm gonna just click
00:41 - this button over here oh this is so
00:43 - terrible I was had some momentum here
00:44 - okay please let me know if everything
00:46 - sounds ok if you can hear my sound
00:50 - effects because I want it to be I don't
00:56 - know where anything is no is it I forgot
01:00 - this one over here okay all right so
01:05 - what I was saying was my name is Dan
01:07 - this is the coding train I try to be
01:08 - here every week every Friday in the in
01:10 - the mid-afternoon Eastern time to appear
01:13 - on the YouTube to program code make
01:18 - things embarrass myself all of the above
01:21 - and that's what I'm here to do today
01:23 - please increase the sound a little bit
01:25 - so increase the sound of my voice my
01:30 - lyrical gentle soothing voice or
01:33 - increase the sound of
01:38 - [Music]
01:40 - my music background voice a bit low okay
01:46 - let's see what we can do about this
01:47 - alright fortunately I have so many new
01:51 - technical achievements first of all this
01:54 - is gonna be real you guys really gonna
01:55 - enjoy this this is a green piece of
02:01 - paper which I'm going to put this laptop
02:04 - my voice okay let's see here I am in
02:10 - three so if I turn three up a little bit
02:18 - okay
02:20 - tell me if that is better and hopefully
02:22 - there's no distortion or peeking or
02:25 - anything like that because I can keep
02:26 - turning it up I just don't want it I
02:27 - want to make sure there's no distortion
02:29 - oh yes very good very good question
02:33 - about the sound is too loud now the
02:36 - music is too loud we say sound it's just
02:38 - not specific enough for me okay I got me
02:41 - more now it's too loud okay I'm gonna
02:47 - turn it down - I forgot what it was that
02:49 - I'm gonna just I'm gonna leave it here
02:52 - okay I'm gonna leave it there I'm going
02:55 - to get some tape I turned it down now
02:57 - everyone saying now it's better but
02:59 - you're probably 20 seconds ago so tell
03:02 - me if I need to turn it turn it back up
03:06 - better music I don't I I don't know what
03:08 - anyone is saying anymore I'm going to
03:10 - I'm gonna split the difference it go
03:11 - into the middle yeah okay alright so let
03:16 - me put this nice oh no this piece of
03:17 - paper is not big enough they did it okay
03:24 - let's see I guess I will do this side
03:28 - I'll do this side know what to do
03:31 - papers not big enough I need two pieces
03:34 - of paper
03:35 - what a mess okay let's put a piece of
03:38 - tape here and a very little tape left
03:42 - also this is it it's all that's on the
03:44 - roll no tape left at all than this okay
03:47 - let's put a little piece of tape here I
03:49 - didn't really wasn't very thoughtful
03:51 - about this
03:52 - technology is falling apart let's do
03:54 - this you know what I do have another
03:57 - piece of paper it's a slightly different
03:58 - shade of green doesn't work as well but
04:01 - good enough I should put this one
04:03 - underneath let's see I'm just looking at
04:09 - the chat yet no nothing's happened yet
04:11 - you haven't missed anything you just
04:12 - missed me I could have done this before
04:14 - I started ok let's try putting this year
04:18 - and I don't know what I've done that's
04:30 - better than nothing
04:31 - or maybe it's not better than nothing
04:33 - just do this ok move the paper further
04:37 - forward put it on stand move the paper
04:40 - further forward that's a very clever
04:42 - idea you guys are much too and move this
04:46 - higher although I'm really I really want
04:48 - to get this just right so bear with me
04:53 - for a second this this is going to be
05:02 - perfect oh yeah this is good ok wait you
05:10 - can see the blue tape there's some blue
05:12 - tape picky oh I'm gonna get some youtube
05:17 - comment complaints about having to sit
05:19 - and watch this here we go
05:25 - ok all right good enough all right
05:31 - welcome to
05:34 - the coding train I'm gonna set that
05:43 - aside for a little bit so what you might
05:44 - not know today's date is April 28th
05:51 - yesterday April 27th was poem in your
05:56 - pocket day just so happens that I have a
06:00 - poem not on a green piece of paper in my
06:02 - pocket so I'll read it to you for to
06:05 - celebrate poem in your pocket day oh
06:07 - this is kind of a long poem this is by
06:11 - Alison parish I will say a bit more
06:13 - about Alison and her work and this
06:17 - particular poem after I read it looks
06:21 - weird when I step behind it yeah it
06:22 - certainly does right oh my goodness
06:24 - everything's going wrong I thought it
06:27 - was so like technically adept today is a
06:31 - cable dangling here let's move this over
06:34 - here um okay
06:36 - me me me me me me me Star Trek true to
06:39 - the wrath of calm then each day was like
06:42 - a year in the warship of way NOLA
06:44 - now they that go down to the sea in
06:47 - ships then why not Kent as well our
06:50 - treaties draw there I met an old man
06:52 - that wouldn't say his prayers His Dark
06:55 - Materials to create new worlds too and
06:58 - her 16 there were ninety and nine that
07:01 - safely lay give half his years if but he
07:04 - could saying thus that alpha and who
07:06 - hath him sent how when she hears her son
07:09 - is dead not by their hands who vex the
07:12 - patient ground it is not possible that
07:13 - they old dame whose mounts a Sicilian
07:16 - fountain to the day where many a hero
07:19 - has found a grave such arms their last
07:21 - necessity provides yet could not speak
07:24 - or move but on its base but every coast
07:27 - is clear
07:27 - go where he will though hidden now from
07:30 - all our eyes not thus the foe his
07:33 - javelin aimed above and sensor from the
07:36 - Senate I displaced if his message was
07:38 - for sinners he could a vital change your
07:41 - work seemed incomplete to blaze those
07:44 - virtues which the good
07:45 - hide the mischief after all could not be
07:47 - great time cannot Amy my griefs are
07:50 - immortal but never could they warp my
07:53 - constant mind giving me pain which I do
07:55 - not value until the time when every
07:57 - mighty power could force that passage
08:00 - now and they too died and overall with
08:04 - one blast and the same who is resolved
08:07 - to venture his vein life and what
08:08 - between hem is of space a little ship
08:11 - goes out to sea that's my favorite part
08:14 - of the whole poem actually it's just I'm
08:15 - to give the little ship going out to sea
08:18 - okay
08:19 - this poem is not by me this poem is by
08:22 - Alison parish I'm going to open up the
08:24 - internet here I'm gonna go to Twitter
08:27 - Alison parish is a programmer artist
08:30 - poet writer teacher educator many more
08:34 - things I'm sure I'm pretty sure Alison's
08:38 - Twitter account is at a parish and if I
08:42 - go down just a little bit we're going to
08:45 - find this poem here it is why is my
08:48 - browser so small so unnecessary
08:51 - and let's take a look at this okay so
08:54 - this is the poem it is here and a tweet
08:57 - from April 26 and Alison writes
09:00 - replacing each sentence in a plot
09:03 - description with its closest semantic
09:05 - equivalent in my Gutenberg poetry corpus
09:08 - Soilers so I encourage you to follow
09:12 - follow Alison on Twitter she makes a lot
09:15 - of wonderful quirky and interesting BOTS
09:16 - probably most famous for the every word
09:19 - but which tweeted out over a period of
09:22 - years every single word in the
09:24 - dictionary I don't remember which
09:27 - dictionaries use the source one at a
09:28 - time over a certain period of time and
09:31 - Alison from what I understand following
09:34 - her on twitter has been working on
09:38 - creating a corpus of poetry and using
09:42 - something called word to vac likely to
09:44 - look at distance between lines of poetry
09:46 - so this is actually the idea of taking a
09:49 - plot description and taking a sentence
09:51 - from it and finding a line from a poem
09:53 - that's closest in this word vector space
09:56 - to that particular problem it's kind of
09:58 - the results of a particular line from
10:00 - the plot description it's kind of
10:00 - amazing the results that she's being
10:02 - able to get and I also want it I'm going
10:04 - to make a little plug for tonight if any
10:09 - of you happen to be I think if I just
10:12 - google RW ET this is Allison's course at
10:17 - ITP where I teach also it's called
10:19 - reading and writing electronic text if
10:21 - any of you happen to be in the New York
10:23 - City area
10:23 - it is 4:15 p.m. right now at 7:00 p.m.
10:26 - right here at ITP there will be a
10:28 - reading of all the students in the
10:30 - course and various computer-generated
10:32 - poetry and other language experiments
10:34 - that they have created so I encourage
10:36 - any of you to come we start coding now I
10:40 - will I will you know me I can't just
10:43 - start coding I got to warm up to it I
10:44 - got to use some tape got to talk about
10:46 - poetry and totally other some other
10:48 - unrelated things but I encourage you to
10:51 - check out this course and if you're in
10:53 - the New York City area come see the
10:54 - reading tonight okay let me close out of
10:57 - this what else do I have to announce I
11:00 - have added some new coding trade
11:03 - merchandise to the coding train store
11:06 - let me briefly do a little plug for that
11:09 - it's another way that you can support
11:11 - the work that I'm doing if you feel so
11:13 - inclined so this is the coding train
11:18 - store there's a new t-shirt style with
11:20 - just this single train logo that people
11:22 - have requested that seems to like I'm
11:23 - going to get myself one of those yellow
11:24 - ones there are some zipper hoodies I
11:27 - just ordered myself this charcoal one
11:30 - over here there are some kids t-shirts
11:33 - and some new women's cut t-shirts that I
11:35 - didn't have before I just had the unisex
11:36 - t-shirts so if you're interested in any
11:39 - of this stuff I'm not going to belabor
11:40 - the point it is coding train store Envy
11:44 - calm everything is fulfilled by printful
11:46 - printful is a kind of print-on-demand
11:49 - company and by the way there's a lot of
11:52 - other stuff I could make available via
11:54 - printful and so if you see something on
11:55 - the printful website that you want me to
11:56 - make available I will try to do that and
11:58 - I'll have them requesting a Vista
12:00 - t-shirt so I think I need to do some
12:02 - logo branding clever design with a sort
12:05 - of this dot thing because people really
12:07 - like the I don't know where anything is
12:12 - Wow
12:13 - [Music]
12:15 - so if anybody wants to propose a design
12:19 - for this dot t-shirt I'm all eyes cuz
12:23 - ears would be listening to it I guess
12:24 - anyway let me know send me a message on
12:26 - twitter at shipment okay uh-oh I'm out
12:31 - of food you're talking about the foot
12:34 - you guys I saw some comments in the chat
12:36 - dancing I saw some focus is definitely
12:39 - an issue and I was worried oh my god
12:40 - I know that I'm a little scatterbrained
12:43 - and I have trouble focusing and I go all
12:45 - over the place and I'm not very
12:47 - organized and I'm often late not
12:48 - prepared but you're saying I'm out of
12:50 - focus like actually out of focus
12:52 - like I'm fuzzy that is quite possible
12:55 - let's see let's see how can we do this
12:57 - what can I do I need I'm going to focus
13:01 - the camera I have an idea so I stand
13:05 - about here so what I'm going to do is
13:08 - I'm going to move this laptop backwards
13:14 - backwards backwards as far back as I can
13:19 - okay that's that's about as far back as
13:22 - I can move it without it falling off the
13:26 - table oh I can move the table back and I
13:28 - can move it forward ah let's see if I
13:30 - can focus on this laptop uh-huh so I'm
13:35 - going to attempt to do that now and see
13:38 - if I can improve the focus what happens
13:42 - when I do this nothing wrong button mmm
13:48 - used to know how to do this oh this
13:50 - button know this but no this button no
13:55 - don't do it up read my camera I thought
13:58 - it was this button I was trying to zoom
14:02 - in to do the focus and doesn't see no
14:07 - one let me do that alright I'm just
14:08 - going to uh look did I just okay let me
14:15 - try let's see how this goes make it
14:19 - really out of focus
14:20 - it's way out of focus okay now I'm going
14:24 - to folk and
14:25 - probably what's more in focus is my hand
14:27 - over here hello no my name is no on the
14:33 - groaning tree okay right now I am going
14:36 - to focus focus focus focus wrong way
14:40 - wrong way
14:41 - focus focus that's already come into
14:43 - focus starting come on focus that's
14:44 - better I'm gonna go a little bit past it
14:46 - a little bit past it because I'm gonna
14:50 - stand behind okay let's see have I
14:56 - improved this at all I hope that I have
14:59 - oh I think I have I feel like just
15:02 - looking at it I could see in my preview
15:03 - that I am a little bit more in focus
15:07 - okay I'm going to hope that that's
15:09 - better I'm moving the computer back here
15:10 - let me know if that's a problem ok let's
15:17 - see what else I don't have I'm almost
15:18 - ready to do some coding but I got a
15:20 - couple more things which are related to
15:21 - coding so you not be wondering what's
15:26 - the topic today so I'm going to mention
15:29 - something to you guys which is that I
15:31 - have been teaching this course at ITP
15:35 - called nature of code intelligence and
15:40 - learning and the course is actually
15:42 - basically finished now next week are the
15:44 - students final project presentations and
15:47 - it was my intention to keep up and make
15:50 - videos about the topics in this course
15:52 - all semester or it's a seven week course
15:55 - so all seven week long however you know
15:59 - I missed it there was a conference I got
16:00 - sick things have been busy I've been a
16:02 - little bit behind so right now I am
16:05 - still on week two but I have examples
16:10 - and material prepared for each and every
16:12 - one of these weeks for example if I just
16:14 - quick click on convolute this week five
16:16 - convolutional neural networks and
16:18 - tensorflow I'm going to click here and
16:20 - you're going to see look at these these
16:21 - are some of my examples here's some
16:23 - resources and terminology some things
16:26 - that I'm doing so you can take a you're
16:28 - welcome and I encourage you to take a
16:30 - peek ahead on what material I have
16:32 - published here I am just going to slowly
16:35 - over time
16:37 - you know I'm probably going to miss one
16:38 - more week when it's either thesis
16:40 - presentations here or the student show
16:42 - but you know other than that I'm going
16:44 - to be here all of may all of June and
16:47 - week or two in July I'm going to be away
16:50 - for a couple weeks in July but I'm going
16:51 - to be here all this time and I'm going
16:52 - to just plug my way through all this
16:53 - material and I hoping to get through the
16:57 - end of it
16:58 - this last all this content to get to the
17:01 - end of it by the end of June so that's
17:02 - kind of my goal right now I know it's
17:04 - been a topic that has been highly
17:05 - requested and I'm just going to keep
17:07 - working through the stuff what I'm going
17:08 - to do today is actually continue with
17:10 - evolutionary algorithms and I am going
17:13 - to it's I had a coding challenge from a
17:16 - long time ago which worked on the
17:18 - traveling salesperson problem it was
17:19 - actually a series of several different
17:21 - versions and I kept saying and we could
17:24 - use a genetic algorithm I never got to
17:26 - that so that's what I'm going to do
17:27 - today in this particular livestream okay
17:33 - now what else do I want to say ah-ha
17:35 - here we go I got something for you guys
17:39 - okay so over the course of working on
17:43 - this course I used a variety of
17:45 - different tools and investigated a lot
17:47 - of different libraries and frameworks
17:48 - for doing artificial intelligence and
17:51 - machine learning however just to you
17:54 - know practice and learn I did build a
17:57 - very small sort of toy simple
18:00 - implementation of a neural network
18:02 - library in JavaScript designed to be
18:04 - used with p5 so I just want to show you
18:05 - that that exists right now I'm going to
18:07 - go to Schiffman repositories so that and
18:11 - I'm going to at some point in a coding
18:13 - challenge build this library from
18:15 - scratch so I'm going to go through the
18:17 - steps to make the library but the
18:18 - library is already there you could
18:20 - actually make use of it I'm going to
18:21 - click on it here there's a little bit
18:23 - again I don't by any means suggest that
18:27 - this is a robust platform for high
18:31 - performance you know super-amazing hard
18:37 - moving fast paced which is learning
18:41 - algorithms it's just a sort of simple
18:43 - toy neural network library to do some
18:45 - experiments and you can create you know
18:48 - I recognize a lot of you watching this
18:49 - might
18:50 - no idea what a neural network is these
18:51 - are topics that I will get to but you
18:53 - can create an instance of a neural
18:55 - network object you could pass it some
18:57 - inputs you could give it something that
18:59 - you think it should output and so train
19:01 - it against that and you can also ask for
19:03 - it to make a prediction off of some
19:05 - unknown data so I've been using this I
19:07 - have a few demonstrations I have a
19:09 - demonstration that uses this of the sort
19:11 - of classic amnesty data set which is a
19:15 - this is using my library by the way I
19:18 - should mention that most of my library
19:19 - was derived from Tariq Rasheed's
19:22 - excellent book make your own neural
19:24 - network so basically i ported his code
19:26 - from python to JavaScript and i've
19:27 - changed a bunch of things and added some
19:29 - features but mostly it's the same so one
19:32 - thing that I really want to do is I want
19:34 - to have another I really really don't
19:37 - like using em mist as the sort of
19:38 - default the demo example but I did want
19:40 - to try it M NIST is a sort of well-known
19:43 - dataset that's used to test different
19:46 - machine learning algorithms it's a
19:48 - collection of many many handwritten
19:50 - digits and what you can see here is boy
19:53 - this is I must have changed oh my
19:57 - goodness I've got a terrible bug so I
20:00 - changed a whole lot of things in the
20:02 - code yesterday and never rechecked this
20:05 - particular example so I'm going to fix
20:08 - those and if you want to pull request me
20:10 - a fix I'm sure you could find it so I
20:12 - can't really actually demonstrate this
20:13 - to you right now
20:13 - because it's not doing anything better
20:15 - than like just a random guess but oh
20:17 - look it did guess that that's a zero
20:20 - it's always giving me it no matter what
20:21 - it gives you a zero so I've got I've got
20:23 - I've got this taken this good thing good
20:25 - thing I discovered this live on YouTube
20:27 - okay let's look at what some of the
20:29 - other examples this is an example that's
20:32 - based on actually a chrome experiment
20:34 - called flappy learning by x vignette on
20:36 - github and i made a similar
20:39 - implementation of it using my library
20:41 - this is whoops this is a whole bunch of
20:45 - agents flappy birds trying to learn to
20:49 - play flappy bird so let's let it let's
20:51 - speed it up let it go for a while it's
20:53 - going to try it over and over again it's
20:55 - going to try is this is actually an
20:56 - example of neuro evolution which is a
20:58 - way of combining a genetic algorithm
20:59 - with a neural network to evolve to a
21:02 - it's using a genetic algorithm
21:03 - evolve an optimal neural network and you
21:05 - can see here now I have my little flappy
21:08 - bird this is a very sort of easy version
21:10 - I made the game kind of easy but so it's
21:12 - able to do it but this is a oh boy I'm
21:17 - getting nervous that's going to fail but
21:18 - this is good job artificially
21:20 - intelligent clappy bird flappybird thing
21:23 - it said clappy bird because i have
21:24 - another example of making a clap okay
21:26 - and then I have one more example which I
21:29 - want to show you which is also here as
21:31 - part of the library called neuro
21:32 - evolution in steering and that is a
21:35 - variation on my last genetic algorithm
21:37 - coding challenge which used a genetic
21:41 - algorithm to evolve a steering force to
21:42 - collect food and now I'm doing something
21:44 - different where each of these agents has
21:47 - a whole bunch of sensors attached to it
21:49 - that can sense the food and a neural
21:52 - network processes all the sensors as
21:53 - input and then decides what to do about
21:55 - those inputs and over time if I let this
21:58 - run for a while we would hopefully up
22:00 - achieve some sort of optimal state of
22:03 - being able to collect the maximum amount
22:04 - of food okay so I just wanted to show
22:06 - you anybody watching that this stuff
22:08 - exists because if I go over to issues
22:11 - I've got a long list of stuff I'm hoping
22:13 - to make a version of this for processing
22:15 - and lots of stuff that I'm working on
22:18 - but it's going to be a few weeks before
22:20 - I get to actual video tutorials that
22:22 - make use of this but that is coming ok
22:27 - let's see I am taking a look now I'm
22:31 - going to take a minute here by the way I
22:33 - have some new I have some new sound
22:38 - effects so I'm going to take a moment to
22:41 - see if I can answer any questions in the
22:43 - chat and then I'm going to do two more
22:45 - thing one more thing which is show some
22:47 - community variations of my last coding
22:49 - challenge and then I'm going to get to
22:50 - the next code
22:54 - okay just me asks what math do you need
22:59 - to learn or programming engines and lots
23:04 - of people are saying go code down you
23:05 - know I hear ya I hear ya it's a good
23:08 - good point um that's a good question uh
23:11 - you know so if only I had an answer to
23:16 - that question you know working with
23:19 - computer graphics it helps to review and
23:23 - practice topics from geometry in
23:26 - particular a trigonometry also to just
23:29 - have a sense of you know looking at
23:34 - triangles and angles and rotation lines
23:37 - and did this sort of stuff so I would
23:39 - say a kind of geometry trigonometry
23:40 - those are two subjects that I would
23:42 - certainly review you know building an
23:47 - under all Network system that uses
23:50 - something called gradient descent to
23:52 - learn requires some understanding and
23:55 - some basic knowledge of a thing in
23:58 - mathematics called calculus a lot of
24:01 - books and tutorials will explain and
24:04 - cover how to build a neural network
24:05 - through what you know an intuitive
24:07 - understanding of how it works intuitive
24:09 - understanding of calculus and that's
24:10 - kind of the approach that I'm going to
24:12 - take when I eventually get to do some
24:14 - tutorials okay
24:17 - yes okay so let's see what else we got
24:23 - I'm going to look for some other
24:24 - questions
24:27 - have you ever thought of doing coding
24:29 - challenges in react or node frameworks
24:32 - and then I think there were something
24:33 - about es6 this is a very good question
24:36 - and it's something that I'm really
24:37 - struggling with so I have never thought
24:41 - about doing just about anything I don't
24:43 - I don't use react in my daily life or
24:45 - work it's something that I would have to
24:48 - learn and look at to do some video
24:49 - tutorials it would be a good subject to
24:51 - have a guest come onto the channel to do
24:53 - some tutorials I have a guest hopefully
24:55 - coming soon to do some phaser which is a
24:56 - JavaScript game engine tutorials node I
25:00 - certainly have done tutorials and plan
25:02 - to do more using node it's definitely a
25:05 - piece of the puzzle in creating
25:06 - interactive creative coding applications
25:08 - if you need some server-side network
25:10 - component and then es6 I just don't know
25:14 - what to do about that I feel like all my
25:16 - examples are es5 syntax p5.js is using
25:19 - es5 syntax I don't know when or it makes
25:23 - sense to move over to es6 and I just
25:26 - have no idea what's about that so I'm
25:28 - always looking for feedback and advice
25:29 - about that at the moment I'm not ready
25:32 - to do that today but at any point that's
25:34 - certainly possible okay
25:37 - oh it's 4:30 I've been streaming for 25
25:41 - minutes 30 minutes is my limit before
25:43 - I've got to get started with a coding
25:44 - challenge I'll see if there I think view
25:46 - is better than react you know who's a
25:48 - wonderful wonderful educator and
25:51 - programmer who does amazing stuff I
25:52 - think with view is Sarah Dresner Sarah
25:55 - Dresner was a guest on the coding train
25:57 - and Sarah Dresner also has a book that
25:59 - just came out who's promoting things
26:02 - that I think are good things in the
26:04 - world book by Google Sarah Dressler book
26:07 - SVG animations from common UX
26:09 - implementations to complex responsive
26:10 - animation
26:11 - I feel like Sarah does if you J has
26:13 - tutorials and workshops I don't know
26:14 - about that okay somebody could tweet
26:17 - this image to Sarah maybe okay will you
26:23 - do Tetris as a coding challenge I would
26:25 - love to do Tetris you know my most
26:27 - popular videos are actually these simple
26:29 - coding challenges where I make quick
26:31 - easy games the snake game that Purple
26:34 - Rain challenge those are my two most
26:35 - popular videos which is sort of
26:37 - surprising to me but maybe it shouldn't
26:38 - be surprising so I would like to do more
26:40 - of
26:40 - Tetris I think has got to be like a many
26:42 - part challenge right that's such a
26:43 - common so simple game to play a
26:45 - complicated game to build I would think
26:47 - okay all right thank you for those
26:54 - questions I will try to keep an eye on
26:55 - the chat I will also just mention that I
26:58 - have a patreon which is you know I
27:01 - usually feel awkward about plugging this
27:03 - but today I'm feeling just like plugging
27:04 - it so I have a patreon patreon comm
27:07 - slash coding training if you would like
27:09 - to support the work that I'm doing you
27:11 - can join the patreon I have a slack
27:14 - channel that you will get an invitation
27:15 - to that I am looking at right here and
27:17 - at different levels of scientist
27:19 - stickers or books and things like that
27:21 - okay so I will just mention that
27:23 - Baltimore Orioles jh2 k12 18 go O's go
27:29 - Danny ocean and go to a nose game okay
27:32 - all right uh-huh here we go um that's
27:35 - for all you Boston Baltimoreans out
27:37 - there alright uh there's all this stuff
27:39 - going on in the chat okay so as you
27:42 - might be aware when I do these live
27:45 - video streams can you hear me talk over
27:48 - the music
27:50 - what I it's kind of loud for me maybe if
27:53 - I turn it down you when I do these live
27:55 - streams I'm not really so advanced into
28:00 - anything so I need to take a minute here
28:01 - to kind of gather my thoughts and find
28:05 - some old code and I'll sort of talk you
28:07 - through what I'm doing and I'm going to
28:08 - get to a traveling salesperson so you
28:12 - probably are less interested in eine
28:14 - kleine Nachtmusik as you might be in the
28:16 - distance on as always I always forget
28:18 - the dis stop this stop it stop just stop
28:20 - this so first thing I'm looking for is
28:25 - the coding challenge is playlist anyone
28:35 - see coding challenges playlist you
28:38 - thirty more I should know how to use
28:40 - this it's not just God here we go this
28:44 - stop this got this so I'm looking for
28:46 - traveling sales okay it stopped so looks
28:49 - like thirty five point one thirty five
28:52 - point two thirty five twenty three
28:53 - that's where I last left off this stop
28:57 - this stop pistone ow oh I forgot about
28:59 - the community variation okay so now I'm
29:03 - going to rainbow code so one thing I
29:09 - like to do is I like to share a work
29:12 - that people have done variations on
29:14 - things that I have made in previous
29:16 - coding challenges and live streams and I
29:18 - have a new system I by the way I would
29:20 - really like to turn this whole
29:22 - repository into a website and there's
29:26 - been some discussion on that in the
29:27 - issues I don't want to contribute to
29:28 - that boy that would be super great join
29:30 - us but I haven't figured out a good way
29:31 - to do that but right now if I go to my
29:33 - most recent coding challenge which was
29:36 - steering evolution and I click on it all
29:39 - coding challenges now if they don't one
29:42 - should be added have a readme file
29:44 - associated with them and that's where
29:46 - you can add your own oh no oh no I think
29:51 - I forgot to merge and I'm not signed in
29:52 - to merge this but I sorry I'm just going
29:54 - to go so this is exactly what you can do
29:55 - you can create a pull request miles
29:59 - miles Elva did shut up miles LV
30:03 - Elvidge create a polar crest add a link
30:06 - to my variation and you can see that
30:08 - that link is right here with a link to
30:12 - miles this name github repository the
30:15 - project and some instructions about it
30:17 - so I can submerge this from a different
30:20 - computer where I've logged in on github
30:22 - but I can easily just get to the link
30:25 - right here so I'm going to do that and
30:27 - download that while I am doing some
30:29 - other stuff so let's download this so
30:34 - let that download okay so now I'm going
30:35 - to go back to the actual readme file
30:39 - which is right here right okay so we can
30:41 - see a few here now first of all I often
30:44 - do this when I create the readme file
30:46 - I'm too lazy to link to the YouTube
30:47 - videos and the original hive stream
30:49 - anybody wants to help out you see
30:51 - missing links here you can actually just
30:52 - go and add the links for me that would
30:54 - be wonderful and here we go so set up
30:57 - and draw created a variation let's go to
30:59 - the dam let's read let's go to the demo
31:03 - and here's the demo so this looks at
31:06 - first glance very very similar to my
31:10 - original implementation I imagine there
31:15 - are some things that are different here
31:17 - next generation automation based on
31:19 - vehicles healthiest survivor and some
31:21 - fine-tuning to the genetic algorithm
31:22 - press alt for switch debug on and off
31:25 - Mouse press for adding vehicles future
31:27 - implementations maybe in the future so
31:28 - it sounds like there are I can click the
31:33 - mouse and add some vehicles it sounds
31:34 - like there are some improvements in
31:35 - thinking about how the evolution works
31:37 - for us to be able to see that we'd
31:39 - probably have to let this run for a
31:41 - longer period of time but I encourage
31:42 - all of you to do so and take a look and
31:44 - maybe compare and contrast what setup
31:46 - and draw has done in this version that's
31:48 - different than mine okay I'm going to go
31:50 - to the next one which is by Carla de
31:52 - Beer press enter to toggle visibility
31:54 - and perception radii and display current
31:57 - fittest Boyd click on the screen to
31:58 - create more food whoo that's as
32:01 - interesting so let's take a look at this
32:03 - so what so this this is great this is a
32:05 - variation from Carlota beer one of the
32:08 - things I love about this as you can see
32:09 - there's a key here so this is food this
32:12 - is poison healthy boy dying boy
32:16 - and this is the radius and then I can do
32:19 - things like oh I want to feed this one
32:21 - over here let's give some Oh little
32:23 - extend oh and you can see the other
32:26 - thing is it's highlighted so the one
32:27 - that sort of maybe the healthiest gets a
32:28 - little highlight and there might be a
32:30 - way to you can see it you can actually
32:32 - see its health value over here so I love
32:34 - this I love there this is great
32:36 - variation is taking the core algorithm
32:37 - but adding a lot of adding new
32:39 - interactivity and new visual elements to
32:41 - describe what's going on and I have a
32:43 - feeling that if we go and run this other
32:46 - one from miles I'm going to delete this
32:51 - and I think this one is actually oh and
32:52 - this one is ported to processing which
32:55 - is kind of amazing so let's see how this
32:57 - hopefully this is going to work Cookie
33:02 - Monster asked what's the difference
33:03 - between CNN and RNN stay tuned I'm going
33:06 - to be covering that on this channel as I
33:08 - get to it but short answer is a
33:13 - recurrent neural network is a kind of
33:15 - neural network that's designed to
33:16 - process sequential sequential
33:18 - information convolutional neural network
33:21 - is a CNN can do a lot of different
33:22 - things but one of the things that works
33:24 - really well with is images because the
33:26 - word convolution refers to a convolution
33:28 - image processing filter so these are
33:31 - things that I will you can you get
33:33 - there's a lot of resources on my class
33:34 - website but I'm going to get to that in
33:35 - the videos soon enough okay let's take a
33:37 - look at this whoa first of all this is
33:39 - fullscreen that's kind of Awesome okay I
33:42 - feel like I got out like I this is a
33:45 - proper look at these in advance or at
33:46 - least look at the instructions let's
33:48 - look at the instructions so let's go
33:52 - back to pull requests and add a link to
33:56 - my variation and files changed press D
34:00 - to dogle to toggle debugging information
34:03 - F a and more information in the readme
34:06 - okay so d sa let's try those so if I
34:13 - press do Wow look at this so this has
34:15 - all sorts of metadata with each one
34:18 - who's giving them like a random name how
34:20 - long it's lived for what its current
34:21 - health is that's pretty cool and then
34:24 - what was it a I think is it a or a right
34:28 - I'm not getting a to where
34:29 - s ooh look at this s maybe a was saving
34:33 - it s shows more information about so I
34:35 - love so yet again we have another really
34:37 - nice implementation of annotating what's
34:39 - going on one thing it's nice to see
34:41 - about this running and processing is the
34:43 - sort of speed and power of having this
34:44 - as a full-screen Java based simulation
34:47 - or probably this is going to run faster
34:49 - you could have a lot more agents on the
34:52 - screen and do a lot more with the sort
34:53 - of graphics and that sort of thing so
34:54 - great these are wonderful to see thank
34:56 - you for all these variations I hope some
34:58 - of you will make some variations of what
35:00 - I'm going to build today the traveling
35:01 - salesperson simulation and share those
35:04 - with me via github Twitter and all that
35:06 - sort of stuff
35:06 - ok ok I'm now going to okay right back
35:17 - back to what I was doing
35:22 - that's always a song started oh this
35:24 - stop this stop it stop this duck and
35:26 - then beating this stop this stop this
35:29 - disco so what I will get is smell like a
35:33 - big repository but I want to start stop
35:36 - by building on top of this traveling
35:39 - sales we're gonna throw
35:41 - uh lazily down okay just stop no I
35:49 - probably have this code somewhere we're
35:50 - gonna have to waste a doc you guys this
35:52 - stop this stop and then this this stop
35:54 - it stop hold on can you do this stop
35:57 - we'll stop is our waiting sighs doc just
35:59 - us and then you this stop is stop this
36:02 - stop this doctor stop
36:10 - where we left left off in our coding
36:13 - training story 90 5422 did it finish its
36:20 - downloading excellent okay here we go
36:25 - okay so I think we're in good shape now
36:28 - this needs to be a little higher this is
36:30 - way too low for me is that a problem for
36:31 - you guys this is too high okay so now
36:38 - what I want to do is where did I
36:43 - download this downloads and even though
36:48 - I downloaded this giant thing all I want
36:50 - are challenges and what was it 30
36:54 - something 35 30 something anybody
36:57 - remember that okay all right so that's
37:03 - good let's look in here there we go odd
37:05 - TSP ga in progress and let's just let's
37:09 - put that away somewhere else so I think
37:14 - what I want I think probably what I want
37:17 - to do is just start with this one here
37:24 - and but I do want to do something first
37:28 - which is I'm going to do a new algorithm
37:31 - for pool selection let me do this in
37:34 - multiple parts and so I want to open up
37:38 - the atom editor which the editor I've
37:43 - been using these days and I am going to
37:47 - go one directory up and open this in the
37:52 - atom editor and let's go here sketch
38:00 - this is this is where I'm going to start
38:09 - we can delete all this okay and I'm
38:18 - going to run a server so I can look at
38:23 - my stuff in the browser and I'm going to
38:30 - go to traveling salesperson and run a
38:33 - server I'm standing in front of all the
38:37 - stuff that I'm doing which I shouldn't
38:38 - do I try not to do and now I need the
38:41 - browser and so this I believe I'm going
38:58 - to have this be a so where am I here let
39:07 - me go back to YouTube for a second and I
39:09 - want to look for my let's see let's look
39:14 - at this nature of code collection this
39:17 - one I think I want this video to be a
39:24 - 9.10 or 9.10 I guess somewhere in here
39:29 - and it's going to be improved pool
39:32 - selection and so that's what I'm going
39:36 - to do first okay
39:44 - - today I'm looking at the chat looking
39:48 - at the camera I'm really not looking at
39:50 - the camera very much today I'm out of
39:51 - practice by the way this is totally off
39:55 - let me turn this back on I have washed
40:06 - this whiteboard
40:08 - unfortunately there's some lying spots
40:10 - that I just can't seem to get but um
40:13 - how's the focus on this can you see that
40:16 - okay I'm gonna go walk over to my
40:17 - monitor to see how it looks
40:19 - could it be improved I think maybe it
40:23 - could be let's see if I can improve that
40:28 - where's that button why do I not know
40:32 - where that button is anymore I it's not
40:35 - this one no I guess I'm gonna have to
40:38 - give up on this and figure this out
40:40 - later this is the button I used to press
40:42 - the zoom in to do the focus all right
40:45 - let me look in the chat and see how
40:46 - people say it is clean ish whiteboard
40:56 - yeah there's some great suggesting that
40:59 - a chat about different ways to deal with
41:00 - sort of like live coding and people
41:02 - following along and I have tried to use
41:03 - code pen and Co pen has some great
41:05 - features for that there's another editor
41:07 - environment called glitch that I've been
41:09 - looking at recently that I've also been
41:10 - interested in looking you would say it's
41:12 - InFocus okay I'm going to trust alko's
41:15 - note there and I'm just going to get
41:17 - started okay so let's see um oh I'm in
41:25 - the wrong thing here we go alright so I
41:30 - am going to oh interesting that's a good
41:37 - suggestion
41:37 - oh and Harvey thank you increase the
41:39 - font size of the code I think this is
41:43 - fine this font size of the code yes
41:45 - eight out of ten just press ok button to
41:48 - zoom in I'm on a Canon mark 3 5d mark 3
41:53 - okay
41:55 - a button where is the okk I don't see
41:58 - any okay button
42:01 - oh there it is no yeah a way maybe it's
42:04 - over here cuz I know where all the
42:06 - buttons are on the mark - oh I figured
42:09 - it out I figured it out okay so let me
42:17 - see here
42:18 - if I can see okay I'm going to focus
42:25 - this I don't know if you guys can
42:27 - actually see the zoomed in thing I think
42:28 - you do how do I focus oh that's that's
42:37 - not focus oh my god what horrible things
42:40 - am i doing focus must be has to walk
42:43 - over here manual focus this must be
42:49 - focused have a different lens on this
42:53 - one is it locked
43:00 - oh this is it there that's where I focus
43:04 - yeah oh good okay I think that's as good
43:07 - as I'm going to get it I'm gonna hit
43:11 - this and how am i doing
43:18 - ooh Oh am I totally walking crooked
43:21 - looks like the camera is all like on its
43:23 - side now this is not my skill well if I
43:32 - which way am i straight I can't tell I
43:35 - think it's just gonna have to do do I
43:36 - look like I'm like the leaning tower of
43:37 - Schiffman or something let me know okay
43:40 - oh yeah strick in the chat says we'll be
43:45 - good to have dance starting point for
43:46 - this exercise okay so if you want to get
43:49 - if you want to take a minute to follow
43:50 - along the starting point that I'm going
43:52 - to use and I will mention this when I
43:55 - actually do the video as well I am doing
43:57 - a video now but when I get into it no
44:00 - rainbow code there goes that camera I'm
44:03 - coming back to turn it on just hold on
44:05 - oh and I'm in the wrong boy I'm just a
44:08 - mess today it's gonna be like an hour
44:10 - before I do anything I really got to get
44:11 - better at getting started faster as much
44:13 - as I like to own my lane stick okay so
44:18 - this is this is where coding challenge
44:24 - 35 TSP coding challenge 35 point 1 TSP
44:27 - if you grab this code that's what I'm
44:31 - going to be getting started with okay
44:33 - all right maybe someone who has a quick
44:39 - sorry everybody
44:41 - it's very good points okay so we are now
44:48 - going to talk about pool selection okay
44:54 - here we go
44:59 - I'm not - I believe is not watching
45:02 - today so Alka or anyone else was in the
45:04 - patreon slack channel if you can kind of
45:07 - do a little like time check on me that's
45:09 - kind of useful
45:10 - just to have a sense and you know every
45:12 - once in while just went you know say
45:14 - you're at five minutes you're at ten
45:15 - minutes or 15 minutes that's useful for
45:17 - me if you don't mind if you can okay
45:19 - here we go
45:21 - hello I'm back for another genetic
45:23 - algorithms video although this video
45:25 - actually that you're watching right now
45:26 - is not just a video about something you
45:30 - could do for genetic algorithms this
45:31 - video is ultimately about picking from a
45:34 - list of things randomly but picking some
45:37 - things more often than other things and
45:39 - this is a thing that you do have to do
45:42 - who is my research over here yeah I'm
45:44 - coming I'm coming good this is a thing
45:47 - that you have to do it would you like
45:52 - algorithm because we want to we want to
45:53 - have a population of elements and we
45:56 - want to pick certain members of that
45:57 - population that have scored a higher
46:00 - fitness score to have their genetic
46:03 - information more likely passed down to
46:04 - the next generation but let's let's
46:07 - let's let's erase our minds of the
46:10 - wonder that is genetic algorithms and
46:12 - just start with a very simple scenario
46:14 - I'm going to create a JavaScript object
46:17 - and it's just markers very interesting
46:21 - smells and it's going to have a things
46:25 - in it like mango five blueberry three
46:34 - cherry one and apple one so what I want
46:45 - to be able to do is I want to be able to
46:48 - pick one I want to pick a fruit randomly
46:51 - I want to function that says pick fruit
46:56 - and I call that function I'm going to
46:59 - get out of it return a particular fruit
47:02 - maybe mango maybe blueberry maybe cherry
47:05 - maybe Apple and I am going to get mango
47:08 - five times as often as I'm going to get
47:11 - Apple I'm gonna get mango and I wrote
47:12 - these numbers very specifically to add
47:14 - up to ten because it's very easy for me
47:16 - to just sort of do the math here but I
47:18 - going to get Meg want to get mango 50%
47:20 - of the time blueberry 30% of the time
47:22 - cherry 10% of the time and apple 10% of
47:25 - the time this relates to so many
47:27 - different kinds of scenarios that you
47:29 - might do in computer programming if that
47:33 - makes sense
47:33 - okay so how do we do this now you've
47:35 - been watching some my other genetic
47:37 - algorithms or other videos I've done
47:38 - this a number of different ways one way
47:40 - that I've done this is I've built a
47:42 - separate array and I what I've done with
47:45 - that array is I've put I just said hey
47:46 - let's put mango in it five times I'm
47:48 - just going to write em mangoes in this
47:51 - array five times and then I'm going to
47:53 - put blueberry in this array three times
47:54 - and then I'm going to put a cherry and
47:57 - at once and a plant at once so if I had
47:59 - a bucket full of all these letters and
48:01 - there's five M's in it 3 DS 1 C 1 a and
48:05 - I shuffled around and pick one out
48:06 - randomly I'm going to pick M more 5
48:10 - times as often as I'm going to pick a so
48:14 - that's one way of doing it now there's a
48:16 - bit of an issue with this way of doing
48:17 - it this works really nicely for this but
48:20 - if I have thousands of elements and
48:22 - thousands of different problem like a
48:24 - vast array of probabilities some of
48:26 - which are very very very very small
48:27 - probabilities I did have to build this
48:29 - array they're just so much stuff in it
48:31 - it's not a really efficient performance
48:33 - good performance solution and that's
48:35 - actually if you look at a lot of my
48:36 - examples that's the solution I'm using
48:38 - doesn't work so great so I'm gonna
48:39 - propose I'm gonna I'm not proposing this
48:41 - I didn't invent this I'm just talking
48:43 - about it I'm going to look at another
48:44 - solution now there is another solution
48:46 - to this problem which is Mac in a way
48:49 - that you could sort of pick random
48:50 - numbers twice so what two random numbers
48:53 - so each one of these 0 1 2 3 so on the
48:58 - one hand I'm just picking a random
49:00 - number 0 1 2 or 3 and I could do that
49:03 - easily by saying it depends you know in
49:05 - JavaScript or in processing actually
49:07 - floor random 4 and this will give me 0 1
49:15 - 2 or 3 so this is one way that I could
49:16 - do this but if I do that I'm just going
49:19 - to get each one of these 25% of the time
49:21 - but if in addition to picking one of
49:24 - these randomly I picked another random
49:26 - number just between 0 and 1 so
49:32 - is the fruit that I'm picking and this
49:33 - is kind of my like a test number if I
49:36 - pick another random number that random
49:38 - number has to be less than the
49:41 - probability in order for me to for this
49:44 - first random thing to qualify so I might
49:46 - have to do this a bunch of times like I
49:48 - might pick three than point seven and
49:50 - then two and point four and then one in
49:53 - point eight and then zero in point six
49:55 - and then three and point O one or you
50:00 - know ah Apple qualifies so you can see
50:02 - mango is going to be able to qualify if
50:04 - I pick zero 50% of the time this second
50:08 - random number is going to be fine
50:09 - but if I pick Apple only ten percent of
50:11 - the time is this second random number
50:13 - going to be fine so that's one way the
50:15 - problem with this way is you know again
50:17 - with a lot of elements and a lot of
50:18 - probabilities I can be stuck doing this
50:21 - over I kept knew that Luke could take
50:23 - many many many many times before it
50:24 - finds a qualifying random number so this
50:28 - video I'm going to program an entirely
50:30 - different algorithm was suggested to use
50:33 - this algorithm in a github issue I will
50:36 - link to that github issue in this
50:38 - video's description which is no
50:40 - description down there I'm trying to get
50:42 - used to where things are over there is
50:44 - something no movie over there is like an
50:45 - ad you know what you don't know I don't
50:48 - know don't click on it maybe click on it
50:50 - I don't know I'm all stressed out okay
50:51 - uh never mind all that there's stuff
50:53 - around me I've got a person in a YouTube
50:54 - video but um there was a point to all
50:59 - this wasn't there ah okay so I will also
51:03 - I didn't bring up that kids habits you
51:05 - to look at it on the computer because I
51:07 - do have a computer over there which I
51:09 - will get to eventually okay so what is
51:10 - this other algorithm well one way you
51:13 - could imagine is let's say I created I
51:16 - don't know what this is a tube a pipe a
51:19 - rectangle some sort of two-dimensional
51:21 - space and I said ah 50% of that space is
51:26 - mangoes space and 30% of that space is
51:31 - blueberries space and 10% that space is
51:37 - cherry and 10% of that space is Apple
51:39 - and this down here is 0 and up here is
51:42 - one so what if I just pick a random
51:45 - number
51:45 - between zero and one and it's almost
51:50 - like throwing a dart I could be over
51:51 - here and I'm going to throw a dart let's
51:53 - do it ready 1 2 3 I missed but actually
51:59 - it landed over here blueberry I'm going
52:01 - to be more likely there's more space for
52:03 - me to hit with mango than there is for
52:05 - blueberry than there is for cherry and
52:06 - apple now I know I'm not going to build
52:08 - some whole entire like dart throwing
52:10 - simulation thing my sketch so I need a
52:13 - mechanism to do this to pick the random
52:16 - number and figure out where I am and
52:17 - actually a way that I could the way that
52:19 - this could work is I can actually start
52:21 - up here you can pick a random number
52:23 - then start subtracting values and find
52:25 - out at what point do I sort of exit this
52:27 - space so hopefully I'm going to program
52:29 - that algorithm we'll look at it
52:30 - hopefully it'll work and we'll come back
52:32 - here and see if this makes more sense to
52:35 - us then okay
52:36 - I'm going over there now you want yeah
52:39 - okay I think it just on it'll be fine
52:42 - okay pause for a minute oh wait is there
52:47 - a weird sound issue probably I'm
52:52 - guessing that people having sound issues
52:54 - that they're just related to individual
53:00 - internet connection issues but I'm going
53:02 - to just pause for a second to make sure
53:03 - there's no big issue turn up the volume
53:09 - that's weird
53:10 - okay I can turn up the volume I will
53:14 - turn up the volume seems okay now okay
53:22 - I'm just reading the chat right now to
53:24 - make sure there were no significant
53:26 - issues okay I'm going to turn up the
53:30 - volume one more level and see how that
53:36 - see how that does okay all right good
53:42 - the good news is at you know for those
53:44 - of you who aren't aware I mean most of
53:45 - your watching probably watch before what
53:47 - happens is I edit these into shorter
53:48 - tutorial videos and we can play with the
53:51 - sound levels you can always pump up the
53:53 - sound level as the sort of like
53:55 - post-production for that slight fuzz
53:58 - when you walk away like you mean you
54:01 - hear some distortion as I walk in and
54:03 - out interesting uh Mike was rubbing
54:09 - against my shirt okay so let's see let
54:12 - me try to know if it'll be better if I
54:15 - actually just look it here I know that's
54:17 - worse
54:17 - I could button up my shirt but I was
54:22 - trying to advertise my t-shirts so I
54:25 - could you know I don't know if people
54:26 - would buy them makes me so when I see a
54:28 - purchase of something I don't know why
54:30 - this was a some chemical brain thing
54:32 - okay all right
54:34 - second laptop is quite fuzzy yeah this
54:36 - second laptop is invisible you can't see
54:39 - it I could type on it okay
54:44 - let me find that it's five o'clock
54:47 - already I got to keep moving here issues
54:53 - pool selection let's see there's two
54:58 - here oh this is one that I okay so let
55:03 - me look at both of these yep okay
55:12 - and okay so let me look at this okay
55:15 - alright so um sound is fine
55:20 - hello mr. bubbly it's 11 o'clock now how
55:23 - long is the stream going to go the
55:26 - stream is going to go at least for
55:27 - another hour hopefully not much longer
55:29 - because I am going to a computer poetry
55:31 - reading downstairs at ITP that I
55:34 - mentioned earlier so I don't want to be
55:35 - late for that but I do want to finish
55:37 - this example okay so I'm going to keep
55:42 - going now how long was that so far do
55:45 - you think anybody in the patreon chat
55:47 - have a sense anybody keeping track at
55:49 - the time okay thank you Alka seven
55:59 - minutes that's good okay okay here I am
56:05 - back in this bit this screen with my
56:08 - computer so this is the github issue
56:10 - that I was referencing there's a link to
56:12 - it in the video's description spectrin
56:15 - thank you for this original suggestion
56:16 - and then also sinclair's e81
56:19 - this is from Affleck oh I took me a
56:22 - while to get to this has a very like
56:25 - fancy crazy
56:26 - look at this unicorn implementation of
56:29 - it that uses like es6 and all sorts of
56:31 - cool interesting JavaScript syntax that
56:33 - ooh I don't fully understand
56:37 - uh but I will understand someday okay so
56:41 - I'm gonna do my own to only close those
56:44 - and let's let's write some code okay so
56:47 - first of all let's quickly I should have
56:49 - done this in advance you know somebody
56:51 - I'll figure out a way to like
56:51 - fast-forward time lapse this video this
56:54 - could get edited out maybe I might just
56:56 - appear haven't typed this in fruits
56:59 - equals mango five blueberry three sherry
57:10 - one and apple one okay so one thing that
57:17 - I want to do mmm good doing about there
57:21 - hold on I
57:24 - do I want this is how do I want to set
57:29 - this up so I'm not looking at the chat
57:34 - right I'm looking for the check I'm
57:38 - gonna give the challenge I should not
57:39 - look at the chat it's distracting me I'm
57:40 - looking at the screen on the code is
57:42 - over here and look at this code over
57:43 - here what do I want to do here I want to
57:45 - create an array of normalized scores and
57:50 - then I want to pick one randomly and
58:02 - [Music]
58:04 - hold on second here I've lost my train
58:07 - of thought I like I just like go away
58:14 - for a second come back I can't because
58:16 - this is like a lie yes always forget
58:18 - okay this is gonna be fine
58:20 - I just try to I got when I let me let me
58:23 - talk this through in the genetic
58:25 - algorithm examples I have this object
58:26 - and it keeps track of his fitness and
58:28 - all each object is in an array this is
58:31 - actually an object and so really what I
58:33 - want is this I'm thinking this is going
58:42 - to get a B to edit this out of the
58:43 - tutorial because right this is really
58:55 - what I want because I'm going to pick
59:03 - randomly from an array so the data
59:06 - structure is sort of irrelevant here
59:08 - because I could redo it in any way that
59:13 - I want I'm just trying to see if this is
59:16 - going to be so awkward to look at let's
59:20 - keep going here what do I take these out
59:23 - okay so now I just need cherry and I
59:27 - need Apple so this is blueberry cherry
59:34 - Apple
59:36 - okay and that's an array I don't I think
59:44 - the way that this has like Auto
59:45 - formatted it blueberry should be three I
59:47 - think you're just behind so like I just
59:51 - feel like can't I I really want to I'm
59:53 - like it
59:56 - I'm Way too neurotic for my own good but
59:59 - I just I want it to look like this and
60:03 - the problem is as soon as I hit save
60:05 - it's going to reformat it because I have
60:08 - that turned on I'm not can hit save I'm
60:11 - going to turn that off this is going to
60:17 - get edited out if you don't hit safe
60:22 - don't hit safe don't hit save don't eat
60:24 - saved up it save preferences ah beautify
60:30 - where do I where do I maybe it's under
60:33 - editor hold on file edit Adam
60:40 - Preferences where my user preferences
60:43 - key map yeah this is a command T but I
60:48 - have where's the beautify preferences
60:50 - when I hit save it auto it auto so where
60:57 - do I where do I find that anybody use
60:59 - beautify no packages no that's not
61:02 - packed this is just the packages I want
61:05 - the beautify upon save where is that I'm
61:11 - looking for somebody bindings no no
61:13 - that's where the keys is I could turn
61:15 - off beautify just temporarily I'm
61:20 - looking settings packaging search for
61:21 - beautify settings where settings
61:27 - I see preferences
61:34 - you guys are so nice $2 ate me in white
61:37 - insanity config in preferences ooh
61:43 - packages settings I know it's in the
61:45 - back of no settings beautify command T
61:51 - command alt B user that's the packages
61:55 - beautify oh I see I see I see settings
61:58 - thank you I'm just being dummy here
62:02 - settings how about just disable got it
62:09 - got it disabled disabled disabled
62:11 - disabled okay I'm just gonna disable it
62:13 - its if this works please don't go away
62:16 - okay alright I just want it to look like
62:20 - this okay uh yes look watch thank you
62:30 - okay here we are
62:31 - you're just this is my process it's
62:33 - process it's a process whoo I got a
62:35 - little sweaty there this is my new
62:39 - favorite sound effect okay stay hydrated
62:44 - good point some water that's gonna help
62:49 - okay all right here we go ready I'm back
63:00 - okay okay uh there's a little pause
63:03 - there where I decided actually I what I
63:05 - want to do is write the information I
63:07 - want to pick one of the it's easier for
63:09 - me to put it in an array because what I
63:10 - want to do is pick one of these elements
63:13 - from the array and then I want the
63:14 - probability of how I pick it to be
63:16 - something relative to its score so the
63:19 - first thing that I need to do by the way
63:20 - is I need to normalize all of these
63:22 - scores to values between zero and one
63:25 - and so that they all add up to one I
63:27 - want them to be a percentage and so the
63:31 - first thing that I'm going to do is I'm
63:33 - going to just loop through every single
63:37 - fruit
63:41 - and what I need to do is I need to add
63:44 - up all the scores I need to find out
63:46 - what do they all add up to some equals
63:48 - zero and I'm going to say sum plus equal
63:51 - fruits index i dot score then the next
63:57 - thing I'm going to do now here's the
63:59 - thing I might want to retain that score
64:01 - value or I might I be could just
64:03 - overwrite it but ultimately what I want
64:05 - to do I'm going to say fruit index i dot
64:07 - score equals fruits index I and I know I
64:11 - could say divide equals but I'm just
64:12 - going to write this all the way out
64:13 - fruits index a high dot score / some so
64:18 - the idea is I want to normalize all of
64:20 - those scores so all I need to do is add
64:22 - up the total and divide each one by the
64:24 - total that's exactly what I would have
64:26 - done here I get ten five divided by ten
64:28 - is fifty percent three to five minute
64:30 - thirty percent you know and the mass is
64:31 - never going to work out that's perfectly
64:33 - but who cares because the computers
64:35 - doing it not us okay so what I'm going
64:38 - to do here is I am going to go back to
64:40 - the browser and I'm going to refresh you
64:43 - know this canvas is here for no reason
64:45 - I'm just and I'm going to look at fruits
64:47 - and we can see here that now the scores
64:52 - are normalized point five point three
64:53 - and I could if I want to it might make
64:55 - sense to say actually I'm going to add a
64:57 - new property to each one of these object
64:59 - I'm going to say like norm score for
65:01 - like mmm just call it probability for
65:04 - probability fruits index I probability
65:06 - so now I'm hit refresh I'm going to look
65:08 - at that fruits array and I'm going to
65:09 - see here now it retained the score and
65:12 - has the probability of 0.5 and as you
65:15 - can see if I were to go here and add you
65:18 - know one other fruit like melon and give
65:23 - it a score of you know seven point seven
65:26 - then if I hit refresh and look at fruits
65:30 - you can see now I've got five and it's
65:32 - worked it out like it's the math isn't
65:34 - so clean because it doesn't add it to
65:35 - ten but mango now has a twenty-nine
65:37 - percent chance of being picked and melon
65:39 - has a forty one percent chance of being
65:41 - picked so this is good so now how do I
65:43 - pick one of these randomly according to
65:48 - its probability this now is now it's
65:51 - time for me to write an algorithm that
65:53 - implements this
65:54 - particular rates and code that
65:56 - implements this particular idea in this
65:57 - particular algorithm we throw a dart and
65:59 - find a place in here so the way that I'm
66:01 - going to do that is first I'm going to
66:05 - write a function I'm going to call it a
66:06 - pick one and it's going to receive a
66:11 - list so I'm going to have a generic
66:13 - function that could work with any list
66:16 - of things now it's going to be set up to
66:18 - work in such a way that the list of
66:19 - things is made up of objects that have a
66:22 - property called prob for probability but
66:24 - you know obviously it could make this
66:26 - more generic in other ways as well okay
66:28 - so the first thing that I'm actually
66:30 - going to do is I'm going to say VAR
66:32 - index equals zero so I'm going to sort
66:34 - of assume that the one that I'm going to
66:36 - pick is the first one then I'm going to
66:41 - pick a random number between zero and
66:43 - one point O and I'm going to say as long
66:47 - as R is less is greater than zero then
66:52 - I'm going to say R equals R minus that
66:59 - particular objects probability so let's
67:04 - think about this for a second what I'm
67:08 - saying is that let's say I have
67:10 - something with a probability of 0.9 and
67:14 - I have something with a probability of
67:16 - 0.1 okay that I shouldn't draw this
67:19 - right time out I shouldn't draw it right
67:22 - next to this because I'm gonna do
67:24 - something different now so I'm gonna use
67:26 - but where's I don't have any space I'm
67:29 - gonna come over here this is fine let's
67:32 - just say a simplified arrangement where
67:34 - I this is my like bar here and I have
67:36 - something that has a as a probability of
67:39 - 0.9 and B as a probability of 0.1 the
67:42 - first thing that I did is I picked a
67:44 - random number somewhere between 0 and 1
67:47 - and then I'm going to subtract 0.9 from
67:52 - it because point 9 is first how often am
67:57 - I going to pick a number between 0 and 1
67:59 - where I subtract point 9 and now I have
68:02 - a value less than 0 90% of the time
68:05 - right only if I pick a number greater
68:07 - than
68:08 - point-9 if i pick point nine five and I
68:10 - subtract point nine I'm going to have a
68:12 - value of point zero five so 90% of the
68:15 - time and when I subtract this I'm going
68:18 - to be less than zero when I'm when I'm
68:20 - out when I'm done out I'm out you're out
68:24 - when I below zero that's the thing I'm
68:26 - left with ten percent of the time I'll
68:28 - pick that number like point nine five
68:31 - and then I go and subtract point one and
68:33 - I'm out
68:34 - so ten percent of the time I'll be left
68:36 - the last place I was I'm starting up
68:38 - here I pick some random number somewhere
68:40 - I subtract this am I already below zero
68:43 - or or should I keep going if I subtract
68:46 - this then I've got less so this idea of
68:48 - just I keep subtracting these values and
68:49 - it doesn't matter what order right even
68:51 - if this was B was first and I'm always
68:54 - subtracting point one first I'm only
68:57 - going to be less than zero if I happen
68:59 - to pick a random number that's less than
69:01 - point one so hopefully this kind of
69:02 - makes it some intuitive sense do I feel
69:04 - like there's a very smart way to diagram
69:05 - this that I'm not doing but I've said it
69:07 - enough times I'm hoping it makes sense
69:09 - let's come back to the code
69:10 - so what do I need to do let's say so if
69:14 - so what I need to do now is say index
69:16 - plus plus so I'm going to just keep
69:18 - doing this I'm going to go through the
69:20 - list until I have now gone below zero
69:23 - now there's a little bit and then I want
69:25 - to say return list index except for the
69:29 - fact that this isn't exactly right this
69:32 - isn't exactly right because I like how
69:35 - this bracket is highlighted down here
69:37 - anyway
69:38 - forget about that this isn't exactly
69:40 - right because I actually want to I want
69:47 - if if I say index plus plus I'm going to
69:50 - go one past the one that was actually
69:53 - the one that I wanted to pick makes it
69:55 - sets so I've got to very quickly just
69:57 - say index minus minus let me talk you
69:59 - through that right in the scenario where
70:01 - I just have 0.9 is the probability the
70:03 - first of index zero is 0.9 so I pick a
70:06 - random number I pick point eight I say R
70:08 - equals point eight minus point nine so
70:11 - that's negative point one then I say
70:13 - index plus plus so I go to one and I go
70:15 - back to Luke I don't loop again because
70:17 - I'm now below zero so I didn't I don't
70:19 - want to pick one I want
70:20 - pick zero so going up is just if I'm
70:22 - continuing but if I'm not continuing
70:24 - I've got a backup one so this should
70:26 - work I hope and so I'm going to hit
70:30 - refresh here and I'm going to say pick
70:32 - one fruits and I got mango and I got
70:37 - mango and I got melon and I got cherry a
70:40 - cherry and I got melon I'm gonna get
70:42 - melon most of the time right and so what
70:45 - I could do right now just to sort of
70:46 - verify that this is working I am going
70:49 - to say I'm going to write a little loop
70:51 - here for VAR j equals zero I don't use I
70:56 - again I equals zero I is less than 100 I
71:00 - plus plus and I'm gonna save our fruit
71:03 - equals pick one fruits and I'm going to
71:07 - say I'm going to do var melon count and
71:11 - if fruit fruit dot what is it named
71:17 - fruit dot name equals melon melon count
71:23 - actually you know what I'm just going to
71:25 - do that's fine something I could do is I
71:28 - could actually just create a count fruit
71:30 - dot count plus plus so I'm going to give
71:33 - all these while I'm over here I'm also
71:36 - going to say fruits index I'm going to
71:40 - give them all account of zero so I'm
71:42 - going to count how many times they've
71:44 - picked and if this is correct but doing
71:47 - it a hundred is a small sample size we
71:49 - should see that they're picked
71:50 - proportionally to their probability so
71:53 - let's take a look at that let's run it
71:56 - and let's look at fruits so fruits the
72:00 - first one is mango which was picked
72:02 - thirty times at a probability of twenty
72:03 - nine that makes sense
72:05 - blueberry was picked ten times you know
72:08 - its probability was seventeen cherry was
72:10 - picked seven his probability was five
72:12 - percent melons pictures forty seven so
72:15 - this is this to me is working obviously
72:18 - with just picking it a hundred times
72:19 - it's not going to map so perfectly you
72:22 - know I would suspect if I made this a
72:24 - hundred thousand then those
72:25 - probabilities are kind of overt I'm
72:27 - going to even out and be the counts
72:29 - going to be much closer to the
72:30 - probabilities okay
72:31 - so hopefully you have enjoyed this
72:33 - particular
72:34 - video which is just about how to pick
72:36 - elements from an array with different
72:39 - probabilities and this might work in
72:44 - ever and it what the nice thing about
72:46 - this particular algorithm is two things
72:48 - one is I didn't have to create a
72:49 - separate array with lots of duplicate
72:52 - versions of all these objects in it and
72:54 - I didn't have to do this thing where I
72:55 - have to pick random numbers multiple
72:57 - times and hope that one qualifies and it
72:59 - could get stuck in an infinite loop this
73:01 - is going to happen every single time
73:03 - this is going to always want a pick and
73:06 - return of value you know sometimes it's
73:08 - going to have to run through this loop a
73:09 - few times sometimes just once but it's
73:11 - going to this is this is a pretty
73:12 - efficient and fast algorithm for doing
73:14 - this okay so what did I miss what
73:16 - questions do you have
73:16 - did you apply this in something I'm
73:18 - going to apply this in something in just
73:20 - a moment so if we look at this video's
73:23 - description there's a link to a video
73:24 - where I program a solution to the
73:27 - traveling salesperson problem solutions
73:29 - a little bit strong I don't know if it's
73:31 - really gonna be a solution and attempt
73:32 - at a solution to the traveling
73:34 - salesperson problem in JavaScript with a
73:37 - genetic algorithm I'm going to pause for
73:40 - a second just to see is there anything
73:44 - nobody I think I think I know what he's
73:46 - telling me I did something horrible in
73:47 - this video so people are some stuff
73:51 - about sound okay okay thanks about to
73:54 - you're trying to edit this so thanks for
73:56 - watching I will see you in another video
74:00 - oh good bye okay what if the first
74:06 - elements probability is zero asks and or
74:09 - talked to Cox in the chat then it will
74:12 - just never ever get picked
74:14 - it can't get picked so probably a zero
74:17 - will never get picked Oh
74:21 - low battery on my soundboard oh no what
74:25 - most they do I'm going to get a charging
74:30 - cable I'm going to to add air I rely on
74:35 - the wireless internet here if this can
74:39 - be plugged in somewhere else I'm just
74:42 - going to
74:42 - to unplug this it's going to be fine
74:48 - hold on a sec Oh ignore this it's trying
74:57 - to connect this iPad to this computer
75:01 - okay here we go let's see all right
75:09 - I'm looking at the chat somebody I'm
75:17 - seeing something about the sound in the
75:19 - chat when I'm near when I'm near the
75:25 - when I'm when I'm near the board if
75:28 - that's a wireless mic there might be
75:29 - some distortions so you guys are
75:31 - noticing that over here whoops over here
75:38 - that there is some sound distortion if
75:41 - I'm standing over here by the whiteboard
75:43 - is that correct yes no sound Distortion
75:47 - maybe maybe not okay all right okay so I
75:56 - now okay so let's see now what I want to
76:03 - do let me take a look at what this is
76:09 - doing
76:15 - okay so I'm going to just remind myself
76:20 - what's going on here so this is the boy
76:28 - I really should have gotten a better
76:29 - green piece of paper 5:20
76:35 - mmm hopefully I can okay this is my
76:43 - particular oh let me click here sorry
76:45 - everybody
76:48 - this is my example and so what it's
76:52 - doing is it creates a array of cities
77:05 - copies it if it's okay so something I
77:09 - need to do you know what I need to use
77:12 - okay so I I was wrong this is not a good
77:16 - example to start with I it's better for
77:19 - me to start with I'll show you which one
77:30 - challenges 35 I should start with thirty
77:38 - five point three so I'm going to start
77:40 - with that as the code base that I'm
77:41 - starting with so this is going to be
77:43 - coding challenge thirty five point four
77:45 - maybe it's in multiple parts I don't
77:47 - know so I'm going to delete this because
77:51 - I really need so let's see now
77:59 - oh and I can get my auto format so
78:06 - packages beautify and we enable it
78:17 - close this and let's see what I've got
78:21 - here yeah yeah order so I need a the
78:26 - reason why I'm moving to this one is
78:28 - because what I'm trying to evolve is in
78:31 - order of the cities and the first
78:33 - example didn't take that into
78:34 - consideration and so whoops so if I look
78:39 - here okay here we go
78:48 - so let me get this into a state that'll
78:54 - be a little easier to look at here and
79:02 - here as always I always forget the dis
79:06 - stop it stop it stop this duck and then
79:08 - DZ this stop this stop I'm using this
79:10 - this stop this dot this dot and then use
79:12 - this stock will stop using stop this
79:14 - stop this stop this stop this dot this
79:21 - gun never forget this this stop this
79:24 - stop this this stop this dot just uh
79:29 - forget this this stop this dot this dot
79:32 - and then reading this stop - stop and
79:34 - you lose this dystopic stop this done
79:37 - and you do this stop just stop this stop
79:40 - is adding some stuff to this and a
79:41 - little tired so I'm just gonna stop
79:43 - let's do it music playing this time this
80:01 - dock thud never forget to this stuff I'm
80:05 - gonna do this stuff this stock this die
80:07 - I just moved to the dots are center
80:09 - stand it down here but somebody compose
80:11 - that song for me
80:17 - and finished okay so what else can I do
80:21 - here just to make this a little bit
80:24 - bigger and because a lot of this visual
80:36 - stuff is going to probably carry forward
80:38 - so I just want to
80:55 - I think I could probably
81:04 - compress this oh I see okay I don't know
81:16 - I don't know okay so I think this is
81:23 - good okay come on let's get rid of this
81:35 - okay so I am rainbows and kittens and
81:40 - kittens okay does it not go to 100%
81:46 - let's see all right let's fix the hat
81:50 - why doesn't it go to 100% so total
81:54 - permutation is factorial total cities
81:57 - and what I'm doing is I am when I'm
82:07 - where am i counting next order this is
82:13 - count divided by total permutations and
82:15 - then I probably it starts at 0 and it
82:19 - goes up by one so count should really
82:21 - start at one and then it should go to a
82:26 - hundred percent there we go so I was
82:30 - just starting in the wrong place let me
82:31 - move this over so you can see it there
82:35 - we go and I could make that just because
82:42 - while I'm doing this
82:51 - there we go okay great so I think I'm
82:56 - ready now anybody have any thoughts or
83:00 - questions are anything important between
83:04 - goodnight those of you have to go to bed
83:06 - now because it's really late at night
83:10 - okay so I'm going to just give us a try
83:14 - now so actually no idea what I'm about
83:20 - to do but I guess I'm going to figure it
83:22 - out as I go that's how this works so I'm
83:25 - hoping I'm assuming this is probably
83:28 - going to be in two parts so I think what
83:30 - I'm going to do in the first part is do
83:32 - a genetic algorithm without any
83:33 - crossover and then the second part I'll
83:37 - implement crossover and don't forget to
83:42 - talk with the guys from the future now
83:44 - so that's item number one now I suppose
83:47 - even though I'm doing this almost a year
83:49 - later in theory this follows directly
83:51 - from the previous video and it also
83:54 - depends on other videos that already
83:57 - have genetic algorithms in them so all I
84:00 - need to do is mention this playlist and
84:05 - then let me also go to oh and also the
84:16 - and this playlist down here is what I'm
84:21 - looking for okay
84:26 - okay so here we go yes this is a final
84:33 - this is finally a follow-up to my
84:35 - traveling salesperson coding challenges
84:37 - where I'm going to attempt to create a
84:40 - solution to the traveling salesperson
84:41 - with a genetic algorithm this is
84:44 - finished
84:45 - I'm going to drink some of this water
84:46 - and I'm just going to get started ok do
85:09 - it now it's why
85:16 - [Music]
85:18 - okay Oh missed okay
85:26 - here we go here we go hello I am here to
85:34 - do Oh hold on we start this over so
85:39 - let's make this like 700 thing I that's
85:50 - like the worst configuration ever that's
85:53 - better
85:53 - okay hello I am here in another video to
86:00 - attempt to I don't know find a solution
86:04 - create a interesting different hopefully
86:08 - good way of solving the traveling
86:09 - salesperson problem with a genetic
86:12 - algorithm so this is a previous coding
86:14 - challenge you can find a link to the
86:16 - video for it in this video's description
86:18 - where I used a brute-force algorithm to
86:22 - look at every single possible
86:24 - configuration of a path between a bunch
86:28 - of points in a two-dimensional space or
86:29 - cities for the traveling salesperson
86:31 - problem okay okay okay okay just the
86:34 - review the traveling salesperson problem
86:35 - states what Oh give me another chance
86:46 - everybody III know I hate it when I do
86:48 - like start over over and over again but
86:50 - boy I just got a little lightheaded too
86:51 - let's let's do this again
86:57 - hello I am here in a coding challenge
87:00 - and this coding challenge is a follow up
87:02 - on a previous one where I looked at
87:04 - something called the traveling
87:05 - salesperson problem now I would suggest
87:08 - if you didn't watch those videos they're
87:10 - linked in this video's description go
87:12 - watch those find out what the traveling
87:13 - salesperson problem is but just quickly
87:15 - just in case you don't what the
87:16 - traveling salesperson problem is is you
87:18 - create a set of points cities in a two
87:21 - dimensional space it could be three
87:22 - dimensional could be four dimensional
87:24 - but in this case two dimensional and you
87:26 - try to find what is a path that connects
87:30 - every possible City starting from any
87:32 - city ending with any cities that is the
87:33 - shortest path what is the easiest way to
87:36 - visit every single city and get to every
87:39 - single one what's the shortest path
87:40 - through all the cities okay so this
87:41 - particular program which I did in a
87:43 - previous coding challenge is looking at
87:45 - every single possibility even just with
87:47 - one two three four five six seven cities
87:49 - it's taken quite a while to check every
87:51 - possible city it will get there
87:53 - eventually every pup not every bus will
87:54 - City every possible order but if I just
87:56 - go and change this to like ten you know
88:00 - this is based this is really just never
88:03 - ever I mean we'll finish at some point
88:05 - if I change was 1112 there are 10
88:08 - factorial possibilities with ten cities
88:10 - 11 cities 12 cities 15 cities so is
88:12 - there a way we could do better
88:14 - so the strategy I'm going to look at
88:16 - here is using a genetic algorithm so
88:18 - these are the traveling salesperson
88:21 - previous videos that I would recommend
88:23 - you take a look at and if you haven't
88:25 - seen or looked at any of know what a
88:27 - genetic algorithm is then I would
88:29 - recommend this particular playlist so
88:30 - this video that I'm making is not on
88:32 - this list right now because but it will
88:35 - be in the future when you are watching
88:36 - it it will be there it's not there now
88:38 - but like it is now because you're
88:40 - watching it anyways look into mine so
88:43 - what was it saying yes so this is going
88:46 - to go in this playlist so if you don't
88:47 - know a genetic algorithm is I recommend
88:49 - maybe you check out some of these videos
88:50 - first and then come back but I'm just
88:52 - going to start programming this
88:53 - straightaway so the idea of the genetic
88:56 - algorithm is what I want to have is a
89:00 - population so right now I'm checking but
89:02 - I have this idea of an order which is an
89:04 - order through all the cities so I'm just
89:06 - going to use the code I had from the
89:07 - previous coding challenge and just start
89:08 - from there
89:09 - I'm gonna this is going to work there's
89:12 - a bunch of stuff I'll be able to get rid
89:13 - of but one thing I need is a population
89:16 - so in the population I need a population
89:19 - of many orders so what I'm going to do
89:24 - now is I'm going to create that
89:26 - population so let's let's I'm going to
89:32 - so a couple things I don't need let's
89:34 - get rid of some stuff I don't need this
89:36 - total permutations or count let's just
89:38 - get rid of this stuff I do want to keep
89:39 - track of the best ever I don't think
89:42 - this individual order anymore there's
89:43 - not just one so I have the city's I have
89:46 - the total number cities let's reduce
89:47 - that to five so we can see if it works
89:49 - or easily and I have a population okay
89:51 - so I need to create the cities first so
89:54 - first I create the cities now what I
89:56 - need to do is I need to create the
89:58 - number of the population so let's just
90:01 - start with ten so population index I
90:07 - equals what so how to do this so one way
90:14 - that I could do this is I could create
90:17 - I'm going to create I'm going to create
90:18 - actually a variable called order right
90:21 - here which is just order index I equals
90:25 - I okay what am i doing so this can get
90:31 - edited out because I guess I will erase
90:32 - this now and then I will magically
90:36 - appear here so this will get edited out
90:38 - later
90:45 - now I'm gonna go pretend to walk over
90:48 - there again okay so the idea is that I
90:53 - have an array that keeps track of all of
90:57 - these vectors
91:02 - that's called cities now what I'm going
91:06 - to do is I'm going to create an array
91:08 - called order and what I want is just to
91:11 - have an order of how we're going to go
91:12 - through all those cities and so I can
91:14 - start with just this right so with their
91:17 - five cities zero one two three four now
91:19 - my population the idea of the population
91:22 - is I want to make a whole lot of these
91:23 - and I want them to be random nobody
91:29 - can't have zero right I can only have
91:30 - one number I think so
91:34 - how do I so how do I create a whole
91:36 - bunch of random configurations of this
91:38 - well I could start with this regular
91:41 - order and then I could just shuffle
91:43 - around elements a bunch of times to
91:45 - randomize kind of like shuffling a deck
91:46 - of cards so let's do that so this is
91:51 - just the standard order this array is
91:53 - just 0 1 2 3 4 and now population is
91:56 - going to be order slice slice I'm pretty
92:00 - sure the slice function in JavaScript is
92:03 - a function you can use it you can give
92:05 - it arguments to slice out a part of an
92:07 - array into a new array but what I'm
92:09 - doing here is I just want the whole
92:10 - thing so it essentially makes a copy of
92:12 - that array so if I just did this right
92:15 - if I just said population I equals order
92:18 - dot slice and I said console dot log
92:21 - population let's go to the browser
92:26 - oops and let's run this okay what's not
92:29 - defined there's lots of other stuff that
92:32 - but I can see here that look at this 0 1
92:35 - 2 3 4 0 1 2 3 4 0 1 2 3 4 that's what
92:39 - I've got so what I actually want to do a
92:41 - stop go away what I want to do now is I
92:44 - want to shuffle it so how do I shuffle
92:47 - it well let's should I make a separate
92:49 - function shuffle population index I why
92:52 - not so I'm going to create a function
92:54 - and there's probably a surprise that
92:57 - there's an array function that does
92:59 - shuffling maybe not or we could add it
93:01 - using prototype but anyway I'm just
93:02 - going to write my own function so I'm
93:04 - going to go down here to the very bottom
93:05 - I don't need this is something from the
93:07 - previous example that I don't need
93:08 - anymore I'm looking for the swap
93:12 - function where is the swap here it is so
93:15 - what I'm going to make use of this swap
93:17 - function so my shuffle function is going
93:20 - to receive an array why don't we give it
93:22 - like a number shuffle ten times it's
93:25 - like shuffle the deck ten times so I'm
93:27 - going to say four and so this is numb
93:30 - for VAR i equals zero I is less than
93:33 - numb I plus plus var so let's use n
93:44 - because what I want to do is I want to
93:46 - pick two elements I want to say pick a
93:50 - random index and you don't actually we
93:52 - can use I and then I'll just say this is
93:57 - like index 1 or index a is a random
94:02 - index into the array and index B is
94:08 - another random index into the array and
94:11 - then all I need to do is say swap array
94:13 - index index a index B so the idea is
94:20 - that I shuffle by saying ten times swap
94:23 - ten spots in the array or 100 times or a
94:25 - thousand times so now if I were to come
94:28 - back up to the beginning of this program
94:30 - there's all this extra stuff that I
94:32 - don't know what I'm going to do with
94:33 - here so I'm just going to comment it all
94:34 - out what I'm going to do here and I'm
94:39 - going to comment this out too is what
94:43 - now if I look at this when I look at the
94:45 - population I should see them all
94:47 - shuffled orders okay Oh p5 had problems
94:53 - creating the global function shuffle
94:56 - there's a p5 function called shuffle
94:58 - whoo interesting well first let's see if
95:00 - my shuffle function worked and that's
95:03 - the first one oh it doesn't look like it
95:05 - worked
95:05 - hmm okay so what did I do wrong let's
95:10 - let's just make our own array
95:14 - did I not give it a number oh I forgot
95:18 - to give it a number I have to say
95:19 - shuffle a certain number of times so
95:21 - shuffle a hundred times let's try this
95:23 - again and let's look at it now there we
95:27 - go so you can see these shuffled into
95:29 - random orders so now I have a whole
95:31 - bunch of random orders perfect okay
95:34 - now what do I want to do here first I
95:37 - want to go look up what's this
95:39 - shuffle function shuffle p5.js reference
95:43 - because maybe this does what we want it
95:46 - to do
95:46 - oh yeah array function to shuffle look
95:51 - at that
95:52 - shuffle and array randomizers the order
95:55 - of elements and right implements Visser
95:57 - Yates shuffle algorithm so this is a
95:59 - much fancier oh and look at this we're
96:00 - on this wonderful this is a beautiful
96:02 - Fischer Yates shuffle this is a great
96:04 - tutorial by Mike Bostock the creator of
96:06 - d3 with a much different algorithm for
96:09 - shuffling an array which is maybe it's
96:11 - just different than mine but anyway
96:13 - let's just use it so let's let's get rid
96:17 - of my let's comment out my shuffle
96:20 - function learns and let's just leave the
96:24 - p5 shuffle function and see what happens
96:27 - run this again let's look at what we've
96:31 - got now they're not shuffled why are
96:33 - they not shuffle well I have a feeling
96:35 - that what it does is it makes a new copy
96:37 - of the array so actually what I want to
96:39 - do here is just say shuffle order so I'm
96:43 - using the p5 shuffle function I want to
96:46 - just take that array order shuffle it
96:48 - into a new array and put that in the
96:50 - population perfect and now if we look at
96:54 - this we can see there we go so both are
96:57 - good ways of doing it now I'm at the
96:58 - point where I have an array and I have a
97:01 - population of orders and I've shuffled
97:03 - them next step I want to find the best
97:07 - one in the population okay
97:10 - actually what I want to do is give each
97:12 - one a fitness score okay so I could do
97:16 - some kind of like object-oriented
97:18 - programming here where I create a
97:20 - wrapper object that stores the order and
97:21 - its fitness but for simplicity right now
97:25 - I'm just going to
97:26 - create another array called Fitness and
97:28 - so for every element of the population
97:30 - I'm going to put a fitness score in the
97:33 - corresponding spot in that other array
97:35 - so what I'm going to do is now I'm going
97:39 - to loop through the entire population
97:44 - and I'm going to say what is first thing
97:50 - to say what is that distance the
97:52 - distance is and don't I have a calc from
97:55 - my previous example I have this calc
97:58 - distance function which is right here so
98:01 - this calculate distance function already
98:03 - calculates the distance of an array of
98:05 - points in a given order so that's
98:07 - perfect I don't have to add that code
98:09 - again I already have that from the
98:10 - previous coding challenge that's really
98:12 - nice so I'm going to say D equals calc
98:16 - distance cities in the particular order
98:22 - of the population and then I'm going to
98:25 - say Fitness index I equals that distance
98:27 - now that's not exactly right because I
98:29 - don't have to do some mapping to the
98:30 - fitness because a smaller distance is a
98:33 - higher fitness but let's just leave that
98:34 - for right now and let's also write we
98:37 - have this idea of the best-ever record
98:39 - distance so I'm going to start with a
98:40 - record distance as infinity and while
98:43 - I'm doing that I'm going to say if
98:46 - distance is less than record distance
98:50 - record distance equals that distance and
98:53 - best-ever equals population index I that
98:58 - particular order okay great so now I'm
99:05 - going to take out this let's put this
99:09 - all this draw stuff back in to sort of
99:11 - see the best ever oh I'm going to leave
99:16 - the shuffle function the swap function
99:17 - calc distance and now let's see what
99:20 - happens let me run this okay order is
99:22 - not defined sketched at J s line 46 okay
99:27 - so this is this I don't need I just want
99:29 - to look at the best-ever so oh so I
99:35 - could say this should say best-ever dot
99:38 - length sorry
99:40 - and this should say best-ever dot length
99:45 - whoops I don't need two of these sorry
99:49 - I'm just going to there's all this
99:51 - extraneous stuff that I don't need and
99:54 - would take all this out so I just want
99:56 - to draw the best one so you can see it's
100:01 - you know it's making however many and
100:03 - drawing the best one now interestingly
100:05 - enough if I were to increase the
100:08 - population size to 100 you know it's
100:12 - probably just out of a hundred
100:13 - possibilities you know what's 5
100:16 - factorial 5 times 4 is 20 times 3 is 60
100:19 - times 2 is 120 so there's only actually
100:22 - 120 possibilities in here but if I were
100:26 - to make the number of cities something
100:28 - like 10 and I just have a hundred
100:30 - possibilities you can see it got
100:31 - something better than just a random
100:33 - order but this is clearly not the best
100:34 - order okay let's pause for a second I'm
100:39 - at 13 minutes and I just going to drink
100:41 - some water and kind of figure out where
100:46 - I am this is going to take forever it's
100:56 - 5:45 it's going to speed up you'll see
100:59 - because we've done a lot of the pieces
101:01 - already okay so next thing that I need
101:06 - to add to this I'm at about 13 minutes
101:08 - is I need to map the distance to actual
101:14 - fitness score and then I need to map
101:17 - those two probabilities and then I need
101:20 - to build a new generation with
101:23 - probabilities so all right okay here we
101:31 - go
101:35 - alright ok so one thing I want to do
101:41 - right now just because I'm good time
101:43 - seeing things starting to get as I
101:45 - already have all this code I'm adding
101:46 - new code I'm going to create a new
101:48 - JavaScript file I'm just going to call
101:50 - it GA for genetic algorithm jf and then
101:53 - I'm going to add a reference to it in my
101:57 - index.html file and what I want to do is
102:01 - I want to take some of the stuff I don't
102:06 - need this next order any more function
102:08 - this should go away that was from the
102:12 - lexical order version calc distance swap
102:15 - these can all stay but I want to I want
102:20 - to have this other JavaScript file where
102:23 - I can start putting functions that are
102:25 - particularly relevant to the genetic
102:27 - algorithm itself there so all I do okay
102:30 - so all I have so far you know I just
102:32 - said this but I got to recap this for
102:33 - myself is I create a whole bunch of
102:35 - random orders I try all of them out I
102:39 - pick the best one so for the genetic
102:41 - algorithm to work what I want to do is
102:42 - after I've done that I want to generate
102:44 - a whole new set of algorithms Beit chart
102:47 - a whole new set of orders based on the
102:50 - orders that did better so one thing that
102:53 - I need to do here is where I am
102:55 - calculating those those distance values
102:58 - and I'm actually going to take all of
103:02 - this here and I'm going to make this in
103:05 - a function I'm going to say calc fitness
103:10 - calculate Fitness so this particular
103:14 - algorithm that goes through and assigns
103:16 - of Fitness what I'm actually going to do
103:18 - is I'm going to map the distance you
103:22 - know that is a value between the Fitness
103:26 - is a distance that's a value between
103:29 - [Music]
103:31 - what should I do here what would be so
103:34 - this is kind of an interesting thing to
103:36 - think about you know what I'm going to
103:37 - do I'm not going to do that I'm going to
103:38 - invert it so if I have a number if I
103:43 - want to take if I want to make a number
103:45 - that's a high number
103:46 - and make the higher it is a the higher
103:51 - it is a lower value the lower it is a
103:53 - higher value I can actually just say 1
103:55 - divided by D now I could worried that D
103:58 - might be 0 and so I could say 1 divided
104:01 - by D plus 1
104:02 - that way if d is ever 0 like this 0
104:04 - being the you know absolute best
104:08 - distance ever you know which is
104:10 - unrealistic obviously because you're
104:11 - never unless all the points wrangling
104:13 - are right on top of each other but then
104:14 - everything's going to be 0 but anyway
104:15 - then the fitness would be 1 and
104:17 - everything else would be lower so I'm
104:18 - going to add that in there just as kind
104:19 - of a nice little extra thing and that's
104:22 - the fitness value okay then what I want
104:24 - to do is I actually want to write a
104:26 - function called normalize fitness
104:29 - because for the way that I'm going to
104:32 - pick them what I want to do is I'm going
104:37 - to mention another video that I made
104:38 - recently as I want all those fitness
104:40 - values not to be just some arbitrary
104:42 - value that's higher or lower but I want
104:44 - them to map to a probability between 0%
104:47 - and 100% and I want all of them to add
104:50 - up to 100% so the way that I do that is
104:53 - I first need to calculate a sum then I
104:57 - need to loop through the entire
104:59 - population again and I need to say sum
105:03 - plus equals fitness index I so I want to
105:08 - get the total fitness and then all I
105:10 - have to do again and by only I can say
105:12 - fitness dot length because that's really
105:13 - the array that I'm working with although
105:15 - Fitness and population are gonna have
105:16 - the same length I'm going to then go
105:18 - through it again and say Fitness index I
105:21 - equals Fitness index I divided by sum so
105:25 - this is the process of normalizing all
105:27 - those Fitness values ok
105:30 - so if I go back to the sketch this is
105:33 - something I'm going to do every frame so
105:35 - now I really have my genetic algorithm
105:38 - the first thing I need to do is
105:40 - calculate fitness then I need to
105:43 - normalize fitness ok so once we've done
105:47 - that a calculated fitness I've
105:48 - normalized fitness now it's time to make
105:52 - the next generation and you know I
105:55 - suppose I could draw the best before I
105:58 - make the next generation but I'm not
105:59 - worried about order too much here right
106:01 - now right now okay calculate fitness
106:03 - normalized fitness make the next
106:05 - generation so how do I make the next
106:06 - generation okay let's go back to here
106:10 - and I'm going to write that function
106:12 - next generation so I'm going to make
106:16 - another array I'm going to call it new
106:18 - population and what I want to do is I
106:23 - want to create something like this I
106:26 - want to say for every I want to say for
106:33 - every member of the existing population
106:34 - make a new member of the new population
106:37 - so I want if I have a hundred to start I
106:39 - wanted then the next generation has 100
106:40 - the next generation has 100 so just as a
106:42 - little experiment here just to make sure
106:44 - things are working I'm going to say new
106:45 - population index I equals population
106:51 - population index i dot slice so what if
106:55 - I just this is like not a genetic
106:57 - algorithm at all this is me just making
106:58 - an exact copy of the previous generation
107:01 - in the new population and then at the
107:03 - end I can just say hey guess what
107:05 - population equals new population so make
107:10 - a new population that's a copy of the
107:11 - previous population and then have that
107:14 - being the new population so I should be
107:15 - able to do this over and over again so I
107:17 - just want to see if this doesn't give me
107:18 - any errors it doesn't give me any errors
107:20 - but this is now this is now running in a
107:22 - loop the thing is I'm never going to
107:24 - have an improvement because my new
107:26 - population is just the same as the
107:28 - previous population so now here's what I
107:31 - want to do here we want to have a
107:32 - genetic algorithm so what I actually
107:34 - want to do is I want to say the new
107:38 - population is pick from the old
107:42 - population and I'm going to say and I'm
107:45 - actually going to say I'm just going to
107:47 - call this var order equal because I'm
107:49 - going to need to add something called
107:50 - mutation pick one from the new
107:53 - population how do I pick one member of
107:56 - the old population according to its
107:59 - fitness value the things with a higher
108:01 - fitness I want to pick more often the
108:03 - things with a lower fitness I want to
108:05 - pick less often I want to just copy the
108:07 - ones that were good and not copy the
108:09 - ones that weren't so good okay so how do
108:11 - I do that
108:12 - so I've already knew
108:13 - Matt I've already calculated Fitness and
108:15 - normalized it oh I know how so guess
108:20 - what I just made another video about
108:21 - this a particular algorithm for doing
108:23 - that so I'm going to link to that video
108:24 - in this video I'm going to link to that
108:26 - video in this video's description and
108:28 - right now I'm just going to go and grab
108:29 - the code from that so that code is here
108:32 - in this particular sketch that I
108:34 - programmed earlier today called pool
108:35 - selection and I'm going to go and grab
108:37 - this function called pick one okay so
108:42 - I'm going to grab this function and I'm
108:44 - going to bring it over to my G ajs so
108:47 - what this function does it's a
108:49 - particular algorithm that I go through
108:50 - where and I'm going to just describe it
108:52 - to you briefly oops okay I'm going to
109:03 - describe it to you briefly if you
109:04 - imagine this as the population and this
109:07 - has a fitness of 70% this has a fitness
109:11 - problem map to probability of 20% and
109:13 - this has a fitness makkya probability of
109:15 - 10% well I could draw that almost like
109:19 - as a two-dimensional space with 70%
109:22 - being a 20% being B and you know I
109:26 - didn't draw that very well to scale ten
109:28 - percent being C so how can I pick a
109:31 - random number between zero and one and
109:34 - whenever I pick from zero to 0.7 I'm
109:37 - going to kind of land within here
109:39 - whenever I pick from zero to 0.9 I'm
109:40 - going to land within here and when I
109:41 - replay 4.9 to 0.1 I'm going to land in
109:43 - here so you can see that 70% of the time
109:45 - I'm going to land in here and that's
109:46 - what this algorithm is doing and I go
109:48 - through it more detail in the other
109:49 - video but I do have to make some
109:50 - adjustments here because I'm picking one
109:53 - from this population and okay and I
109:58 - think I need to erase here so lists and
110:01 - probabilities so I need to pick one from
110:05 - the population according to the fitness
110:08 - values so I need to just change this R
110:11 - equals R minus probability index and
110:15 - then return the index value that defines
110:17 - with that list so let's see if this what
110:21 - this does okay and I think I also want
110:25 - to
110:26 - I just want to make a copy of them it
110:28 - might be because I'm going to start
110:30 - messing with them so it's good for me to
110:31 - create a copy of it so get that order
110:33 - and copy it so return a slice okay
110:36 - I'm not seeing any errors but again no
110:39 - improvement
110:39 - why is there no improvement well even if
110:42 - I pick better ones more often if they
110:45 - never change whatever the best one is
110:47 - only the best one that it will ever be
110:48 - so this is where I'm going to add a
110:50 - function and I'm going to call it mutate
110:54 - so in next generation I'm now also going
110:58 - to say mutate order so now I need to
111:02 - write a sorry yeah
111:08 - mutate oh and also I didn't I also have
111:11 - to actually put it in the population in
111:13 - the new population which I forgot to do
111:15 - so let's make sure things are still
111:17 - working when I do that whoops new
111:20 - population equals order and let's
111:25 - refresh okay ah uncaught error F is not
111:29 - defined G is line 45 hope there's like
111:35 - an extra straight character there okay
111:37 - okay great so it's working same problem
111:40 - with now so I need to add mutation what
111:42 - I want to do is add some subtle changes
111:44 - to the ones that I want to take the ones
111:47 - that did really well and just change
111:48 - them a little bit how am I going to do
111:50 - that so I'm going to write a function
111:52 - called mutate and it's going to take an
111:56 - order and what I'm going to do is though
111:59 - now we have to think an a mutation rate
112:04 - so let's think about this mutation so
112:08 - how do i mutate an order well one way to
112:11 - do it would actually just to be to take
112:14 - two or two random elements and swap them
112:17 - so this order was pretty good 0 1 2 3 4
112:20 - but maybe 0 4 2 3 1 would be even better
112:24 - so let's try that so what I'm going to
112:28 - do is I'm going to say and I did this
112:30 - already in my shuffle program I'll do it
112:33 - again index a equals floor random border
112:38 - dot length
112:39 - I'm going to pick index a and index B
112:42 - and then I'm going to say swap order and
112:45 - remember swap is a function that I've
112:47 - already written index a index B so in my
112:52 - mutate function I'm just always going to
112:54 - swap just one let's see how that does
112:59 - okay so I'm not seeing any improvement
113:01 - one thing I realized I probably forgot
113:03 - to do so let's take a look at the sketch
113:05 - is I'm not actually this thing where I
113:10 - check where do I check I need to
113:13 - actually check to see if I've got a new
113:16 - best one where is that did I lose that
113:18 - by accident where I went to find the
113:20 - best one somehow I lost that oh no it's
113:23 - right here oh no it's not okay so what I
113:27 - need to do is we have this record
113:29 - distance so I don't know where that went
113:32 - I have that coated already but what I
113:37 - want to do is I want to look at the
113:38 - distance did I put that in G ajs
113:44 - somewhere oh it's happening and
113:47 - calculate fitness actually so sorry hold
113:49 - on hold on a sec hold on a sec I don't
113:55 - like the way that I wrote this I've
113:56 - confused myself so even though I'm doing
113:58 - it in calculate Fitness I feel like this
114:01 - is a problem and so I am going to say a
114:05 - separate function called find best it
114:09 - really makes sense to do it there
114:11 - because I don't this is an expensive
114:14 - operation to calculate the distance so
114:15 - I'm going to leave it never mind so in
114:19 - calculate distance it should be finding
114:21 - the best ever and I should get and this
114:28 - should be drawing the best ever so I
114:31 - would think that with mutation let's
114:37 - just make sure it I don't let's make
114:41 - sure this is running yep so this is
114:44 - doing this over and over again and let's
114:47 - uh let's look at let's let's try to
114:52 - debug this
114:53 - don't know what I've done wrong here
114:56 - let's look at the record distance so
115:03 - it's finding the same record distance
115:06 - over and over and over again you would
115:08 - think that through some swapping so
115:11 - let's take a look it do I even have like
115:13 - a population the new population yeah so
115:17 - population has stuff in it let's make
115:20 - sure that what's in it makes sense hold
115:25 - on let's just pause for second like the
115:29 - guy need an edit point here because I
115:32 - this is like so awful the way I need to
115:33 - like move this over so I have more room
115:36 - to look at here this stuff and I need to
115:39 - like okay I need to debug this in a
115:42 - different way
115:45 - let me just see oh good yes that's
115:57 - correct K week Mon in the chat about the
115:59 - dividing by two plus 20 minutes okay uh
116:04 - yeah yeah yeah yeah very good Alka thank
116:07 - you for that okay uh guess what okay
116:09 - come on back where's my uh so it wasn't
116:20 - working because I had put in the mutate
116:22 - function but i i i didn't uncomment it
116:28 - because I wrote the function and
116:29 - uncomment it so let's add that and now
116:32 - let's see and I got some console.log in
116:34 - here that I probably want to get rid of
116:35 - or maybe I don't let's try refreshing it
116:37 - and see what happens uh yes so it's
116:40 - getting better over time this is working
116:42 - look at that how wonderful okay
116:44 - yay
116:49 - all right so now what have I done have I
116:55 - really solved the traveling salesperson
116:57 - problem I don't think so so first of all
116:59 - is this the optimal order looks pretty
117:02 - good it's kind of hard to say like
117:04 - wouldn't it be better maybe to go like
117:06 - from here and then here and then there
117:09 - wouldn't that be less but I know it's
117:10 - hard for me to eyeball it but only way
117:13 - for us to check for sure would be also
117:14 - have the brute force solution going and
117:16 - have a check every possibility which I
117:18 - would love for somebody to contribute to
117:20 - this to add that functionality back in
117:22 - but let's just go to total cities equals
117:24 - five and we can see that vary and let's
117:28 - make the population size let's make that
117:30 - a variable and let's make that let's
117:36 - just make that ten right now and so
117:39 - we're I'm going to put that here and so
117:44 - you can see it kind of like finding it
117:46 - over a short period of time let's make
117:49 - this six so we can see that this is
117:52 - working for small numbers and even with
117:56 - ten like oh that's not whoa that's the
118:00 - population size sorry and what I have it
118:05 - at a total even with now with ten cities
118:10 - you're going to see like it's doing
118:12 - really really terribly but I only gave
118:14 - it a population of ten so let's give it
118:16 - a population of 300 and you can see me
118:20 - with 10 I don't know maybe that's is
118:21 - that a good or No you could clearly see
118:23 - that you could get a much shorter order
118:25 - by going up those three and then across
118:27 - you can't my handles oh there it figured
118:30 - it out so it's look at this ah maybe
118:32 - there's some optimization here that
118:33 - could be done I don't know
118:34 - so you can see that this is working and
118:36 - I didn't even do cross over all I'm
118:38 - doing is mutating swapping some points
118:41 - in ones that did well I didn't even make
118:42 - the dist
118:43 - the fitness function and exponential
118:45 - function so there's a lot of
118:46 - improvements we could make on this what
118:48 - I'm going to do in the next video and
118:50 - then lambda mutation is a little bit
118:52 - awkward what I'm going to do in the next
118:53 - video is see I can improve this so this
118:56 - is part one it kind of got something
118:57 - going I'm going to
118:58 - right oh and I'm going to try should
119:00 - really what I would like to do is also
119:01 - draw just the current populations best
119:03 - one down here and should add that in so
119:06 - what I'm going to do in the next video
119:07 - is I'm going to try to add some things
119:08 - to improve this and namely do crossover
119:11 - between two orders which will not be so
119:13 - obvious how to do that I don't think
119:15 - I'll have to think about that in between
119:17 - when I hit stop recording and recording
119:18 - okay see you in the next video
119:21 - okay alright
119:27 - how am i doing 6:04 that was probably 28
119:31 - minutes but you know maybe it'll get
119:33 - edited maybe matchy I can do some
119:34 - editing match to get that magic to get
119:37 - that down to 20 I have to tie my shoe 28
119:41 - minutes is not so bad though definitely
119:47 - need to go soon how long is this going
119:50 - to last
119:51 - I'm hoping they'll be done in about a
119:54 - half an hour I just have to add
119:55 - crossover I have to add crossover and I
120:03 - should make some improvements as well
120:05 - what improvements that I say I want to
120:06 - draw just the best from one population
120:09 - at the bottom and then and like maybe
120:12 - put the number of generations or
120:14 - something maybe the average fitness I
120:16 - don't know the average like or the
120:19 - you know add some annotation to it and
120:22 - then add crossover and think a bit more
120:24 - thoughtfully about mutation okay this is
120:32 - the point of the livestream start to get
120:34 - the nervous tic it G thing okay I'm just
120:45 - going to jump right into this because I
120:47 - want to keep going here
120:57 - hi okay I'm back so this is where I left
121:01 - off in the previous video I have a
121:03 - genetic algorithm attempting to find the
121:05 - shortest path between all of the cities
121:09 - which are these just two dimensional
121:10 - points innocent and the traveling set
121:12 - with the traveling salesperson problem
121:13 - so what I'm doing in this version that I
121:15 - made in the previous video is I am just
121:18 - looking at the borders the paths that
121:21 - had the shortest distance and I am
121:24 - cloning those for a new generation and
121:27 - then kind of like shuffling some about
121:28 - randomly but I am not actually applying
121:30 - crossover so then what one thing I want
121:33 - to do in this video is apply crossover
121:35 - so in other words I have a set of points
121:45 - like 1 2 3 4 let me write those again 1
121:49 - 2 3 4 and 1 order might be something
121:52 - like this and another order might be you
121:55 - know something like this so what I'm
122:00 - doing right now is we can see I don't
122:02 - know this it's hard to see these are
122:04 - valid so let's say this has a distance
122:07 - of some number that maps to a fitness
122:10 - probability score of 0.6 and this has a
122:14 - distance of some number that maps to a
122:17 - probability score of 0.4 what I'm going
122:20 - to do for the next generation is I'm
122:22 - going to make 2 if I only have a
122:24 - population of 2 I'm going to make two
122:27 - new orders can you guys hear that so
122:34 - loud noises in the hallway ok I'm going
122:36 - to make two new orders and I want to
122:39 - pick I'm going to make these two new
122:41 - orders out of the ones that have done
122:43 - the best so I'm going to throw a dart at
122:44 - the wall and oh I hope I don't ruin this
122:48 - mark this beautiful marker I have a 40%
122:51 - chance this isn't really where I really
122:53 - have a 50% chance of hitting either I
122:55 - have a 60% chance of picking this one a
122:57 - 40% chance of picking this one if I pick
122:59 - this one I'm going to clone it to the
123:01 - next generation but maybe swap two
123:03 - points so instead
123:05 - you know the order goes from here to
123:07 - here I'm going to go from here to here
123:10 - to here that or something and then I
123:12 - might pick this one so I'm just doing
123:14 - I'm creating new elements of the next
123:18 - generation from the previous generation
123:20 - by making a copy what I want to actually
123:22 - do is have a mechanism for how I combine
123:25 - two of them into a new order and that's
123:28 - what I'm going to look at in this
123:29 - particular video now before I do that
123:31 - let me see if I can just add some simple
123:33 - little improvements to this so for
123:35 - example one thing I want to do is I'm
123:40 - only drawing the best-ever and so what
123:44 - might be useful for me to also draw just
123:46 - to sort of see how this is working is
123:50 - what I could do is translate to the
123:54 - bottom of the window and I'm going to do
123:56 - this I could also draw just the current
123:58 - best so where am I evaluating the best
124:01 - one I'm doing that here so I could have
124:05 - another variable which is just sorry
124:09 - where I have a variable called best-ever
124:14 - I'm going to have like a current best
124:15 - and what I'll do is here I will also say
124:23 - current record equals infinity and if I
124:30 - will now say also I will also check if d
124:34 - is less than current record then current
124:36 - record is this and current best or best
124:39 - current I can't remember what I called
124:40 - it what did I call it current best
124:43 - current best is this so I don't know if
124:46 - this is that useful but I thought I
124:47 - would add it so I can also see now this
124:55 - is me drawing this is me drawing the
124:57 - best-ever
124:58 - and now I also want to draw the current
125:00 - best so let's run this and we can see so
125:06 - we can see that it's you know the
125:08 - population is doing a lot more stuff
125:10 - internally but every time eventually as
125:12 - it's trying new eyes sometimes gets a
125:14 - better one so this is a little least we
125:15 - have something more to watch here to
125:17 - sort of see like
125:18 - that it's continuing to animate
125:19 - continuing to try and guess future
125:21 - options okay so now Ken how else could
125:24 - we improve this let me look and first of
125:30 - all one thing that I did kind of weirdly
125:32 - which doesn't make too much which I feel
125:33 - like needs the mutate function needs
125:36 - some improvements so what you taped does
125:39 - is every time it clone something it just
125:42 - swaps two elements but I do have this
125:45 - idea of a mutation rate so I don't know
125:47 - I sort of feel like what might make
125:49 - sense is for me to say like well let me
125:53 - have a loop that goes through the total
125:55 - number of cities and then just says like
126:01 - if a random number one is less than the
126:04 - mutation rate then perform this swap so
126:08 - this is just a way for me to say like if
126:10 - there's ten cities then maybe I have a
126:12 - chance of like doing ten swaps but maybe
126:15 - I only have a 10% chance of doing a swap
126:18 - or something at any for any given city
126:20 - for any given spot I don't know this I'm
126:22 - not sure if this really makes a lot of
126:23 - sense but I am going to I'm going to try
126:28 - it this way and then where I say mutate
126:31 - I could give it like a mutation rate so
126:33 - if I give it a mutation rate of zero we
126:36 - would see that it's never ever ever
126:37 - going to get any improvements if I give
126:39 - it a mutation rate of one we're going to
126:45 - see it's just like really really really
126:46 - making a lot a lot a lot of swaps all
126:48 - the time I don't know if that's so
126:49 - optimal so maybe I would try something
126:53 - like a mutation rate of 0.1 and maybe
126:55 - that's like a little bit better so I
126:57 - don't know what's going to be an optimal
126:58 - mutation rate but at least I have some
126:59 - structure for saying do more random
127:02 - shuffles or less random scruffles and
127:04 - that can probably be improved okay so
127:06 - now what we need to do is add crossover
127:10 - so first I got to think about how we're
127:12 - going to do a crossover algorithm but
127:14 - right now what I want to do before I do
127:15 - that is just buy the place in the code
127:17 - where I'm going to do crossover okay so
127:19 - we're this is where I make this is where
127:24 - I I create a new order from I pick one
127:27 - from the population based on its fitness
127:29 - and then
127:29 - you Tate it and add it so really what I
127:31 - want to do is I want to change this now
127:33 - to be order a and order B I want to pick
127:37 - to order a and pip order two and then I
127:41 - want to save our order equals cross over
127:45 - order a and order B so what I want to do
127:50 - is I want to pick to cross them over
127:52 - then you Tate and then get a do now
127:54 - whether this is actually going to
127:55 - improve the performance of this it's
127:57 - unclear to me but certainly this would
127:59 - be something that's typically found in a
128:01 - genetic algorithm and worth giving a try
128:02 - but here's the really tricky thing so
128:04 - I'm going to come over to the white
128:05 - board and now we have to discuss how
128:08 - we're going to do crossover so remember
128:14 - let's say this these were the orders 0 1
128:18 - 2 3 these are the index values 0 1 2 3
128:23 - so one order is 0 3 1 2 that's one order
128:30 - another order is 0 2 3 1 okay so
128:37 - typically if you've watched any of my
128:38 - other videos about genetic algorithms
128:40 - the way that you could perform crossover
128:42 - with two arrays of genetic information
128:45 - is to take half of one and half of
128:50 - another and put them together in which
128:54 - case my new order would be 0 3 3 1 but
128:59 - there's a major problem here
129:01 - this is invalid in other genetic
129:03 - algorithm examples that I've done
129:04 - there's no such thing as an invalid DNA
129:08 - array because it's just a bunch of
129:11 - numbers but this is a special kind of
129:13 - DNA array that must have every single
129:17 - instance of each index or once and only
129:20 - once so this kind of splitting it
129:22 - half-and-half won't work
129:24 - you know the flipping a coin algorithm
129:27 - won't work I can't say you know pick a
129:29 - or b 0 pick a or B okay I pick B to pick
129:33 - a or B okay pick a 1 okay pick a or B
129:36 - be one once again even if I'm flipping a
129:39 - coin I now have ones in two places and I
129:41 - don't have three so one I'm sure there
129:44 - are lots of different approaches to this
129:46 - and I would love to hear from you guys
129:50 - anybody hold on let me I just lost my
129:58 - train of thought for a second let me go
130:00 - back and edit that I would love to hear
130:03 - from all of you as if I'm actually
130:06 - editing let me just start over per
130:08 - second
130:09 - I'm sure there are lots of strategies
130:11 - for doing this kind of crossover and I
130:15 - would love to hear from any of you of
130:16 - your own ideas of what might be a good
130:18 - technique but here's one that I'm going
130:20 - to try one way that I could do this oh I
130:24 - shouldn't have erased that stop I can
130:30 - put two hours in is where I start to
130:34 - lose it okay
130:36 - I erased okay not to please save me okay
130:42 - well one order again is zero three one
130:46 - two another order is zero two three one
130:52 - so what if I take some random part of
130:57 - one of these so let's say I just
130:59 - randomly decide I'm just going to take 3
131:02 - comma 1 and I'm going to start my next
131:04 - order 3 comma 1 I have two empty spaces
131:08 - I need to fill well what if I then said
131:11 - ok I'm going to take oh this was a bad
131:14 - example because I'm going to let's let
131:16 - me just pretend this order is a
131:18 - different one because I want to make an
131:21 - example that's a little bit that
131:22 - actually has something you can follow so
131:26 - so this is 0 1 2 3 and I'm going to go 1
131:32 - 3 0 2 1 3 0 2 so what I'm going to do is
131:39 - I need to fill in these last two spots
131:42 - and I'm going to take them from here
131:44 - if they order that they're here as long
131:47 - as they aren't a 301 this is again I
131:50 - don't like this order can I just please
131:53 - have it be it's fine it's fine you guys
131:54 - are going to get the idea uh what should
131:59 - I put a 1 here no it already exists
132:01 - three should I put a three-year no it
132:03 - already exists zero should I put a zero
132:05 - here it doesn't already exist - should I
132:07 - put a two here yes doesn't exist so what
132:09 - I wanted this to be is in order that's
132:11 - something like 1 0 you know 3 2 I would
132:15 - still get the same thing right because I
132:17 - would say one can't go there because
132:19 - it's already there
132:20 - zero can three can't go in the next spot
132:22 - but to Kent so I'm going to just pick a
132:24 - random part of the order and then filled
132:25 - the rest from the other I think this
132:27 - algorithm has a name for it I don't know
132:29 - what it is maybe somebody watching can
132:30 - tell me okay
132:31 - so let's actually implement that now
132:35 - okay let me let's look at that so what
132:42 - did I do I need to write this crossover
132:43 - function okay so coming down here I need
132:45 - a new function I'm going to put it above
132:47 - mutate somebody's playing some music in
132:51 - the hallway crossover order a order B so
132:58 - the first thing I want to do is I want
132:59 - to take a random slice of order a so I'm
133:03 - going to say start equals floor random 0
133:10 - comma order a just random order a dot
133:13 - length and then I'm going to say end
133:18 - equals some value between start and the
133:22 - end of random a I could always just take
133:25 - the first half or something but this is
133:26 - just I'm getting a random spot anywhere
133:31 - in here so maybe I pick this spot and
133:32 - then I want a random spot anywhere
133:35 - between here and here I probably should
133:36 - say plus 1 right plus 1 did I go over to
133:42 - that others did I go to the whiteboard
133:45 - just then can somebody tell me I have to
133:51 - wait 20 seconds it's fine I could have
133:53 - used a drink of water
133:54 - I did okay thank you guys you got it
134:06 - goes about 20 seconds behind me in real
134:08 - time okay so I'm just going to come back
134:13 - okay
134:14 - so now I should probably say start plus
134:17 - one I think because the V when I'm about
134:23 - to use slice so I'm going to say new
134:26 - order equals order a slice start comma
134:32 - end and I'm pretty sure that was slice
134:34 - if I give it three as the start and
134:36 - three is the end I won't get anything
134:39 - let's let's actually just look in the
134:40 - console to sort of see like if I have an
134:42 - array that's 0 5 0 1 2 3 4 a slice 0
134:50 - comma 3 what do I get I get 0 1 2 I get
134:55 - I don't get 3 I get 0 1 2 and if I set a
134:58 - slice 3 comma 3 I get an empty array so
135:02 - I always want at least get and if I
135:05 - would say a dot slice 0 comma 5 that
135:09 - would be the whole thing so I think that
135:10 - makes sense ok now what I need to do is
135:15 - figure out how many things do I have
135:17 - left so I have a total number of cities
135:22 - - new order length so this is how many I
135:27 - need to add right because if the total
135:30 - number of things should be 10 and I get
135:33 - this slice of six then I have four more
135:35 - that I need to add so I know I have a
135:37 - loop I equals 0 I is less than left
135:40 - actually but here's what I want to do
135:43 - actually though is what I want to do is
135:45 - I want to say var I want to I want to
135:48 - actually loop through I want to loop
135:51 - through the order B's everything in
135:54 - order B right because a city equals
135:59 - order B index I I want to know if
136:06 - new order concludes I think this is a
136:10 - JavaScript function that will tell me if
136:12 - it already exists in the array let's see
136:14 - so this is my array a a includes two is
136:19 - true a includes five is false so this is
136:23 - going to work for me I can say if new
136:26 - order includes I'm sure there's some
136:28 - fancy super JavaScript es6 array up
136:31 - friction way to do this and I look
136:34 - forward to hearing about that in the
136:35 - comments if new order includes city if
136:40 - new order does not include city then new
136:44 - order push city so I guess I could just
136:49 - I guess I don't need this left because
136:51 - by definition this should just work if
136:53 - I've done everything correct if I if
136:57 - I've done everything correctly then this
137:00 - should have the right number of stuff in
137:01 - it I think what I'm going to need to do
137:05 - is is definitely just try this function
137:09 - how so and then at the end I want to say
137:13 - return new order so let's try this so
137:16 - the program still running as it ran
137:18 - before I haven't actually introduced
137:19 - crossover or did I I don't think I
137:21 - actually put crossover in yeah oh I did
137:26 - so it's actually doing it but let's
137:27 - let's see if if this actually works a
137:31 - equals an array like 0 1 2 3 4 and B
137:37 - equals I'm just say 4 3 2 1 0 so what I
137:41 - want to say is cross over a comma B
137:44 - let's just see what I get 0 4 3 2 1 does
137:49 - that make sense I mean it worked it's a
137:53 - new random order but how is that a
137:54 - crossover
137:55 - it must have only picked 0 yeah only
137:58 - pick 0 from a and then it got 4 3 2 1
138:00 - okay that makes sense then it got it got
138:04 - 1 2 3 and then it got 4 and then 0 so
138:07 - this is working this algorithm appears
138:09 - to be working so now is this actually
138:12 - improving anything unclear let's uh
138:17 - let's
138:18 - I think now we could really reduce that
138:20 - mutation rate because crossover is going
138:23 - to give us a lot more variation and I
138:26 - would love to just increase the
138:28 - population size to the point as blar
138:30 - jazz I can increase it without it
138:33 - running too slow so let's try 500 so
138:40 - yeah this looks um this looks pretty
138:42 - good like I'm kind of seeing it slowly
138:45 - over time improved you know how many
138:48 - cities is this ten cities when I put
138:50 - twenty cities let's give it some more
138:54 - space let's give this canvas like a bit
138:57 - more room to work with and see what we
139:04 - get now yeah let's take a pause here I'm
139:11 - going to come back in a minute after
139:12 - I've left this run for a while so this
139:18 - is going to be an edit point what time I
139:19 - have what time am I at oh I would use
139:26 - es6 is includes so es6 it includes is
139:32 - only es6 next best path along with the
139:36 - current yeah
139:43 - okay so I think I should make the
139:45 - fitness function exponential and I'm
139:49 - looking at other I should teach how to
139:52 - dance not how to code I think that makes
139:54 - sense so I think that I'm going to let
140:02 - this run for a little bit longer while
140:03 - I'm thinking here what else do I add to
140:05 - this so a set is something that I could
140:08 - use it's a unique array
140:11 - okay so I'll mention that is a set bs6
140:15 - or is a set available in in es5 sorry I
140:24 - hope that wasn't really loud I know it
140:26 - should view did my microphone let's see
140:35 - here
140:36 - set JavaScript so does this tell me if
140:44 - it's like es6 or es5 said is es6 okay
140:47 - okay
140:49 - and did that blow out everybody's ears I
140:55 - don't know what ASMR stands for but I
140:58 - shouldn't ask thank you everybody for
141:01 - your nice comments I I just wanted to
141:03 - get a little further along to see if I
141:05 - could at least get it something with
141:08 - that doesn't like crossover anything but
141:10 - this to me feels like there's maybe too
141:13 - much craziness going on but yes yes
141:18 - Rubin asked a good question so let me
141:20 - make a list of things that I want to
141:23 - mention
141:24 - so es6 set this pencil is no good es6
141:35 - set I want to mention distance squared
141:40 - optimization there was something else
141:46 - Oh includes this baby es6
141:52 - and then it's got to be better ways to
141:54 - visualize this I don't know what those
142:00 - would be I really wanted to improve just
142:02 - a little bit past where it is but it
142:04 - might not seem slower than the poetry
142:07 - example but it is tsp I guess yeah
142:13 - intra ask well at least it is improving
142:15 - but how much better is it than just
142:17 - choosing random paths I'm pretty sure
142:19 - that this is quite a bit better choosing
142:21 - then choosing random paths but it's not
142:25 - it's clearly not good enough I would
142:28 - think that choosing random paths if you
142:30 - went back to like my first example with
142:31 - something like 15 I know it's how many
142:33 - cities I have right now 20 cities 20
142:37 - cities is a lot that's 2.4 with 18 zeros
142:43 - so if you're just picking randomly
142:45 - there's really a lot of possibilities I
142:48 - would I would I would guess that you're
142:50 - not going to get the result that I have
142:52 - with just random now the only way for me
142:54 - to prove that would be to just also put
142:57 - a random one side by side but but yet
143:01 - mutate should swap neighbors not random
143:03 - indexes oh that's a really good idea you
143:08 - tape swap neighbors maybe I'll try
143:13 - adding that okay thank you I know I was
143:20 - that sacrifice productions thank you for
143:21 - that suggestion calculated 100 yen also
143:25 - calculated once and then cashed
143:27 - absolutely yeah
143:29 - okay so caching distance yeah I'm less
143:35 - interested in adding optimizations right
143:38 - now to run faster I'd love for people to
143:40 - contribute those and more interested in
143:42 - making it work a little bit better which
143:44 - I like the idea of swapping neighbors
143:46 - okay so I'm going to come back into the
143:49 - video now what's a good okay
143:58 - I'm having a little rest there with my
144:00 - lullaby that's and I back so I let this
144:03 - run for a while you can see that it's
144:04 - doing pretty well it seems to this is
144:06 - the best one it's found and sort of
144:08 - sticking with that for quite a while
144:10 - so I'm going to see maybe we can do one
144:11 - or two more small improvements and I'll
144:13 - give you guys some ideas of things you
144:15 - might do with the code to improve it and
144:16 - then I'm hoping you're going to submit
144:17 - some user submitted improvements okay so
144:23 - a couple things one is that includes
144:24 - function that I'm using is actually part
144:25 - of es6 which is a newer version of the
144:28 - JavaScript syntax that I'm actually
144:30 - using in most of my videos and es6 also
144:32 - has something called a set which I guess
144:34 - is a which could be a data structure
144:36 - that would be useful here other than
144:38 - just a plain old array the other thing
144:40 - that I want that I should mention is
144:42 - that the distance function that I'm
144:44 - using to actually calculate the distance
144:49 - which is right here this is a pretty
144:52 - inefficient or slow algorithm because it
144:54 - uses the square root so one thing that I
144:57 - could do is add my create my own
144:59 - distance function that doesn't use the
145:01 - square root but just uses the squares of
145:02 - the differences because I all I care
145:05 - about is relative distance so I or the
145:07 - other thing is there's a fixed number of
145:09 - cities I'm only ever looking at
145:11 - distances between them so I could create
145:13 - a lookup table that just pre computes
145:15 - all those distances so I'm just summing
145:16 - up what it is but anyway that aside
145:18 - those are some things you might think
145:19 - about adding there was a great
145:22 - suggestion in the chat from Cole noxee
145:25 - the second what that name is but that
145:29 - may be what I should try in mutation is
145:32 - instead of swapping to randomly actually
145:35 - swapping to neighbors so where do i do
145:38 - mutate so what if I pick index a and
145:43 - index B is actually index A plus 1 so
145:51 - it's the next one and I could say if
145:54 - index B is greater than total cities dot
146:00 - length then I could say or greater than
146:04 - or equal to right if I've gone off the
146:06 - edge then I could say actually index B
146:09 - is index a minus
146:11 - there might be a nicer way to do this
146:13 - but so what if I only swap two that are
146:15 - next to each other would this be a
146:17 - better algorithm okay so let's run this
146:21 - we're going to lose everything we had
146:22 - from before but I'm going to run this
146:23 - okay
146:24 - so I made some sort of error here can't
146:26 - read property X of undefined calc
146:29 - distance so that this there's something
146:30 - wrong with my own octo city's not length
146:33 - total cities is just the total number of
146:35 - cities let's fix that okay so let's hope
146:39 - I'm gonna I'm gonna take a little nap
146:40 - again and I'll be back in a while now
146:52 - let this run for a little while what did
146:55 - you guys think of that swapping
146:56 - neighbors did I do that correctly
146:57 - can I program a dancing unicorn with box
147:00 - TV ooh I like that idea yeah there's all
147:06 - sorts of higher-level top-down ways I
147:08 - can analyze like a two lines are
147:10 - crossing that's obviously a bad thing
147:12 - [Music]
147:18 - modulus I was going to do modulus but
147:20 - couldn't I not want to swap the end in
147:23 - the beginning well I guess that wouldn't
147:26 - matter that would totally be fine
147:31 - output top fitness to the window yeah
147:37 - that would be a good
147:38 - [Music]
147:42 - okay so I think that I want to be at
147:46 - 6:30 I have to go this has been a two
147:50 - and a half hour livestream so I'm going
147:54 - to just be done with this but I'm gonna
147:59 - so by the way I'm letting to let that
148:02 - continue running but I realized this
148:04 - would this would be a nicer way of doing
148:06 - this would just be to use modulus
148:08 - operation so that I could just because I
148:11 - could swap the last one with the first
148:12 - one and so this would actually I think
148:14 - be just sort of a cleaner way to write
148:15 - this little bit of code I don't want to
148:17 - say rerun it because this has been
148:18 - running for a while I don't know did
148:19 - that improve it did it not 20 cities is
148:21 - a lot let's feel better about ourselves
148:23 - and the world of the traveling
148:25 - salesperson problem
148:26 - let's just get 12 cities which twelve
148:29 - cities there's a lot of possibilities 12
148:33 - factorial is how many that's a nine
148:39 - million 479 million possibilities which
148:42 - would take quite a while to iterate
148:43 - through all of the possibilities but I
148:45 - have a feeling that if I run it with 12
148:49 - we're gonna get something pretty good
148:51 - pretty soon like really fast that was
148:53 - like a pretty good I don't know if this
148:55 - is optimal found something even better
148:56 - oh I'm pretty sure oh you could
148:58 - definitely make it better by going from
148:59 - here to there then to there so anyway
149:02 - hopefully it's going to get even one job
149:03 - talking but we've done something that
149:05 - works pretty well so here's my request
149:08 - to you the viewer please
149:11 - once I post this code go to the link to
149:14 - the code there'll be a readme file there
149:15 - if you make an improvement
149:17 - add a link to your improvement in that
149:19 - reading file with a pull request if you
149:20 - don't know how to do that I do have a
149:22 - video about how to make a pull request
149:23 - but just write a github issue comment or
149:25 - tweet at me at Schiffman I would love to
149:27 - see a couple things number one I would
149:29 - love to see what kind of efficient what
149:31 - kind of things can we add to this to
149:33 - make it more optimal maybe there's a
149:34 - better way to do mutation a better way
149:36 - to do swap a better way to do crossover
149:38 - so what can we add to this to make this
149:40 - optimal the other thing that I really
149:41 - have to think is what is a better way to
149:43 - visually tell the story I don't have
149:45 - this isn't really so great I'm kind of
149:47 - seeing like a bunch of random stuff and
149:49 - sort of the current best but could I see
149:51 - the full population of everything could
149:53 - I watch a graph of how it's improving
149:55 - can I see some annotation is there some
149:56 - interactivity to sort of speed it up and
149:58 - slow it down so I would love to see
150:00 - variations and ideas for how you can
150:02 - tell the story of this problem and how
150:03 - the algorithm is working so thanks for
150:05 - watching these videos I finally did it I
150:08 - kind of I have completed I think the set
150:10 - of videos about the traveling
150:11 - salesperson problem and I look forward
150:13 - to hearing your comments and questions
150:14 - in the comments on youtube I think oh I
150:17 - just somebody told me I should remind
150:18 - people to LIKE and subscribe so please
150:20 - like and subscribe
150:21 - there could be like an end screen thing
150:23 - popping up around me maybe we'll add
150:25 - that in like and subscribe maybe you
150:27 - watch these next videos and I'll see you
150:29 - in a future video I hope okay talk to
150:32 - you soon or you know whatever this is
150:35 - that we're doing here on the Internet
150:36 - did it fix that no oh then wait like
150:38 - maybe it got better no no it should go
150:40 - up here and then there that would just
150:41 - be so much shorter okay I'm gonna tickle
150:43 - and watch it I'll tell you what happens
150:45 - another time goodbye okay alright that
150:54 - was lucky how I finished that right
150:55 - before the camera shut off okay what I'm
150:59 - going to do now if you guys will
151:01 - tolerate this I could do this not in a
151:03 - live stream but because I'm trying to
151:05 - create videos for this course I'm going
151:09 - to create an intro video and an outro
151:13 - video so I can't remember so I'm going
151:23 - to create a video too just to say like
151:27 - hey welcome to session two of
151:29 - intelligence and learning this is a long
151:31 - session about genetic algorithms really
151:33 - yeah I guess I will and then I'll do one
151:37 - about like a homework assignment so
151:53 - okay all right I don't know if this I
151:57 - don't know if this makes sense to do but
151:58 - I'm just going to do it and then we can
152:00 - never edit this into a standalone video
152:02 - on YouTube but I'm going to do it
152:08 - hello pic - hello welcome to session two
152:18 - of nature of code intelligence and
152:20 - learning so I am making this video in
152:23 - 2017 these are videos that go along with
152:26 - a course that I'm teaching at New York
152:27 - University ITP on this video it's going
152:30 - to be very very short and you're here in
152:33 - session two so the topic for Session two
152:34 - is evolutionary algorithms so this this
152:39 - there will be a link to this particular
152:40 - readme file on github which has kind of
152:43 - a little outline of a lot of the topics
152:45 - some additional reading that you could
152:46 - do about the topic links to various
152:48 - examples but mostly if you're in this
152:50 - playlist if you're seeing this video
152:51 - this is part of Session two intelligence
152:54 - learning playlist there's going to be a
152:55 - lot of videos about genetic algorithms
152:58 - that you can watch this is a long
153:00 - session they'll be it starts with about
153:02 - four or five videos that just explain
153:04 - the idea then I go through a kind of a
153:06 - scenario known as the Shakespeare Monkey
153:10 - scenario if that makes any sense to use
153:13 - a genetic algorithm to evolve a monkey
153:15 - that type Shakespeare it's not really
153:16 - what happens but something like that and
153:18 - then I try to pick a variety of other
153:19 - approaches looking at something called
153:21 - interactive selection where the user
153:23 - plays a role in the evolutionary
153:24 - algorithm by making Fitness selections
153:26 - of what the user likes or doesn't like
153:28 - or what that sort of thing and then also
153:30 - I'm going to look at an ecosystem kind
153:33 - of simulation where you just have a
153:35 - continuous system of agents moving
153:36 - around the screen that try to try to eat
153:40 - food or escape from a predator and that
153:41 - type of thing so there's a lot of videos
153:43 - watch them all don't watch them all but
153:46 - I would if you get to the end there will
153:49 - be a video that gives you kind of an
153:51 - exercise or assignment prompt so if you
153:53 - get to the end and watch that video and
153:54 - you make something you create something
153:56 - please share it with me at Schiffman on
153:58 - twitter or
154:02 - in the comments here there anywhere and
154:04 - I look forward to seeing what you make
154:06 - normally in this introductory video I
154:08 - might sort of introduce the topic
154:09 - genetic algorithms but this video is
154:11 - really really short because the very
154:13 - first video in this particular playlist
154:15 - which should come up next to you
154:17 - actually does that so genetic algorithm
154:20 - introduction so you can just walk right
154:22 - into that video I don't know if you walk
154:24 - into a video but you can go right to
154:25 - that next video where I'll actually talk
154:26 - about what a genetic algorithm is and
154:28 - how it can be applied ok thanks for
154:29 - watching this short video that I don't
154:31 - know if it ever will actually exist but
154:32 - I'm making it so maybe if you're
154:34 - watching it then it does exist ok see
154:35 - you soon
154:36 - ok shortest video ever and then I'm
154:41 - going to make one mmm let's go to
154:47 - assignment
154:48 - oh I never made one for an assignment
154:50 - for session 1 mmm did I I don't think I
154:54 - did so let's go to homework 1 and I'm
154:58 - going to bring this up here okay let's
155:10 - get a try we're going to try this okay I
155:18 - need some I need some boost of energy
155:26 - this I really like
155:32 - you know I have okay here we go
155:39 - homework about it like 77 degrees
155:42 - Fahrenheit in this room I need to send
155:44 - an email to son about the temperature
155:46 - control near this by the way was a
155:47 - closet before I said if some cameras in
155:49 - here this the filing cabinet everywhere
155:50 - I think it's a big room it's very loud
155:52 - music okay you know I'm I would like to
155:58 - have a better selection of classical
155:59 - music but these are some public domain
156:01 - free recording so that god that's a the
156:04 - overture for the marriage of figaro oh
156:05 - it's starting over that's not the pop-up
156:07 - okay okay hello welcome to a video that
156:14 - comes at the end of session one of
156:17 - intelligence and learning this is a
156:18 - video that goes along with the course
156:20 - that I'm teaching at New York University
156:21 - ITP to School of the Arts okay so I'm
156:24 - making this video just if you happen to
156:25 - have watched this entire playlist you're
156:28 - following this course on my youtube
156:30 - channel now's the time where you could
156:32 - try to make a creative exercise based on
156:34 - the variety of different search
156:36 - algorithms with graph systems that I've
156:38 - showed you so this page here I will link
156:41 - to it has some of these exercise ideas
156:44 - I'll maybe talk you through some of them
156:46 - so one of the things you could really do
156:47 - is you could take any of the examples
156:48 - that I made mais generation with
156:51 - depth-first search
156:52 - binary tree and just visualize them in a
156:54 - different way in an artistic way in 3d
156:56 - your really interesting to see could you
156:58 - do a star path finding in 3d you could
157:01 - actually even have a terrain that's 3d
157:04 - and you're trying to like you don't want
157:05 - to go up and you want to go down this
157:07 - was a viewer actually submitted a
157:11 - project like that which I will try to
157:13 - link to in the description of this video
157:15 - and so so I'll talk you through some of
157:18 - these possibilities so you could make
157:19 - your own visual design you know just as
157:22 - a technical exercise one thing you might
157:23 - try to do is have there's music in the
157:27 - hallway again take that binary tree
157:31 - example which just puts ten random
157:33 - things in the binary tree but allow the
157:35 - user to enter numbers and have those
157:37 - appear in the tree so it builds up
157:39 - slowly maybe it animates in some
157:41 - interesting way add some physics to it
157:44 - the six degrees of Kevin Bacon example I
157:46 - used a sort of dummy small dataset you
157:48 - could try to use build that exact same
157:51 - example but with a much larger dataset
157:52 - maybe it's not movies and actors the
157:55 - animal guessing game is so is oh that's
157:58 - what I didn't make a video for I should
158:00 - make a video about that so if you look
158:02 - at this animal guessing game example
158:03 - it's just a little node program that
158:06 - tries to guess an animal that you're
158:07 - thinking of and it uses a tree like
158:11 - structure to do that and so making an
158:13 - interactive version of that you know
158:15 - something that I think if you look at
158:17 - the a-star example and you know all it
158:19 - does is show you that path that it
158:21 - solves for but what if you actually used
158:23 - some of my autonomous agent examples
158:25 - that have steering agents moving through
158:27 - a space actually look like they're
158:28 - little mice trying to find the finding
158:32 - it oh this was this idea of you know how
158:34 - do you think about the space that you're
158:35 - pathfinding in you know it's really just
158:37 - my examples are just a pure maze I
158:39 - should pull one of them up pause I'm
158:43 - gonna pull one of them up okay there's
158:54 - like a talk or some sort of thing
158:56 - a lot of people left yes yes no I I
159:00 - fifteen minutes it starts at seven I
159:02 - lied I said it was 6:30 because I kind
159:04 - of wanted to have time it starts at
159:05 - seven so I definitely have to go I do
159:11 - have it please bow but this doesn't have
159:17 - them does it have them I need quick
159:21 - access to all my examples can you guys
159:26 - hear that music I'm going to go into the
159:31 - hallway so you can really hear it
159:55 - okay
159:57 - I asked my train of thought I need to
160:00 - say I need to have online versions of
160:02 - all these examples running so I could
160:03 - just get to them this is very
160:06 - distracting probably not so loud for you
160:08 - it's very loud for me I downloaded that
160:13 - whole rainbow code repository perfect oh
160:31 - no is that going to copyright me is it
160:34 - was it loud enough that I'm going to get
160:35 - a like oh that's gonna that I'm going to
160:41 - get a copyright notice now this video is
160:43 - going to be monetized not the edited
160:46 - ones okay that's a very interesting
160:51 - point that challenges I'm looking for
160:55 - like a star or the maize pattern yeah
160:59 - okay and where was the DFC the maize
161:06 - generation okay
161:09 - DFS I mean okay this is the a star one
161:14 - this is the maize generation one okay
161:19 - okay now I even forgot where I was or
161:22 - what I was saying
161:26 - so with any of these example okay so I
161:30 - pulled up the a star example and also
161:32 - this Mays example now first of all it
161:34 - could be interesting to think about
161:35 - combining these two that's an exercise I
161:37 - actually have a solution to that if you
161:39 - look at the links I created a solution
161:41 - to that but here you know you could
161:43 - really think about the maze in a
161:45 - different ways that wall is it a river
161:48 - so I think just re imagining other ways
161:50 - to visualize these spaces and thinking
161:53 - about this as a terrain there's a lot of
161:56 - possibilities I think that you could
161:57 - that you could explore just using this
161:59 - the algorithmic verb 8 verbatim but
162:02 - thinking about the actual space that the
162:04 - algorithm is playing out in a completely
162:05 - different way and putting your own
162:07 - design spin on it
162:09 - what else do we have here so you know
162:12 - another thing you could do is I never
162:13 - made a video about like say for example
162:15 - Dijkstra's algorithm and you could
162:17 - investigate that and create something so
162:18 - if you do any of this if you do any of
162:20 - these assignments and you're watching
162:21 - this video share links to what you make
162:23 - in this videos in the comments or tweet
162:26 - them at me at Schiffman and also it's a
162:31 - variation on one of my examples that's
162:32 - on the github repository you can add it
162:34 - a link to it in the readme file in that
162:36 - directory
162:37 - I gotta have a better system for this so
162:38 - I'm working that out thanks for
162:41 - participating in this session one of
162:43 - intelligence and learning and maybe
162:45 - you'll move on and watch Session two
162:46 - with genetic algorithms ok I don't know
162:50 - I don't know if these are if these are
162:52 - worth keeping but I'm I'm just figuring
162:55 - this out let's go to homework 2
162:58 - okay let me look at this
163:10 - hi did you actually watch every single
163:13 - video in this nature of code
163:16 - session to intelligence and learning
163:19 - thing if you did I'm kind of amazed and
163:21 - you're here at this if you're following
163:22 - along with the playlist you're here at
163:24 - this video where you could now
163:25 - synthesize some of these concepts and
163:27 - make your own creative project and do an
163:29 - assignment so I will link to this page
163:31 - this is a page where I have some
163:32 - particular exercise ideas I think one
163:35 - thing that you could do so here's
163:36 - something that you might consider doing
163:38 - you could take the Shakespeare monkey
163:40 - example as a model I should really have
163:43 - these up see what I what these should
163:48 - really be are links to the example
163:49 - running in the browser so that I could
163:51 - just click on them so I could just click
163:56 - on them and show them do I have easy
163:59 - access to the Shakespeare monkey 1 I
164:02 - know I've got to get another repository
164:08 - [Music]
164:10 - hold on I have an idea maybe there is an
164:18 - interactive version here maybe that I
164:24 - can't remember if I made interactive
164:26 - versions for this page here we go
164:30 - no I just just screenshots I'm working
164:35 - on it the second edition of this shoot
164:38 - I'm just oh oh no I know
164:43 - nope I don't mmm okay
164:49 - I only have 10 minutes
164:56 - [Music]
165:00 - am i in the desktop I'm sorry my brain
165:02 - is like totally fried
165:04 - maybe I'll come back and do this a
165:06 - homework video for I'm on the desktop no
165:11 - I'm in documents no wonder okay I'm just
165:21 - going to down I'm sure I have this
165:22 - downloaded somewhere else but I'll just
165:25 - lazily download this again and this
165:34 - isn't downloads so
165:48 - and another web server
166:05 - okay here we go so I have this up and
166:10 - running now I have the homework
166:11 - assignment here what else might I want
166:13 - smart rockets let's get that one going
166:21 - let's try to do this in a way that makes
166:23 - sense okay it's that example the
166:29 - evolving phases and then I want to also
166:39 - look at have this I need one more server
166:50 - did I put this on the desktop I put it
166:53 - in downloads don't know if it's here
167:03 - and you guys are if anybody's actually
167:09 - still here on this livestream I'm going
167:11 - to be amazed you should win some sort of
167:17 - prize okay okay
167:27 - these are some good things to start with
167:30 - okay I'm just going to start this video
167:34 - over two minutes and 22 seconds still
167:40 - here okay here we go I would love to do
167:47 - by the way like a t-shirt giveaway you
167:51 - know obviously I have the patrons and I
167:52 - send patron rewards but anybody has a
167:55 - good idea of how I could do some sort of
167:57 - fun but totally fair and equitable
167:59 - t-shirt or something giveaway I'm open
168:01 - to that and I'm anyway okay here we go
168:07 - I'm just gonna start this refer alka
168:12 - don't worry about the time for these
168:13 - because these are just so short doesn't
168:15 - matter okay hello this is the last video
168:22 - for Session two of intelligence and
168:24 - learning a course that I'm teaching
168:26 - right now in 2017 but you a Elian of the
168:30 - future watching I am Daniel Schiffman
168:33 - human being of Earth okay anyway um so
168:37 - I've got some sort of evolutionary
168:39 - problems good that's a anyway you're
168:43 - here you could do a homework assignment
168:45 - so there were so many videos in this
168:47 - session did you actually watch all of
168:48 - them if you did thank you that's
168:50 - wonderful
168:51 - now I'm curious to see what kind of
168:53 - creative projects what's kind of
168:54 - interesting new innovative or just
168:56 - experimental or fun useless ideas can
168:59 - you implement by exploring genetic
169:02 - algorithms and other kinds of
169:03 - evolutionary algorithms algorithms so
169:05 - one thing that you might think about is
169:07 - a starting with this Shakespeare Monkey
169:10 - example which made up the first four
169:11 - videos of this particular series and
169:13 - what if you were trying to evolve
169:15 - a target something that wasn't text what
169:17 - photos music or perhaps imagery what if
169:19 - you think of each character as a vector
169:21 - path in like an SVG kind of shape or
169:24 - even each character as a pixel there are
169:26 - some really interesting ways actually
169:29 - I'm gonna just write here in this video
169:31 - I'm going to Google this project evolved
169:33 - Mona Lisa genetic algorithm I hope this
169:36 - is going to come up with the right thing
169:37 - that I'm thinking about yeah so this is
169:39 - a wonderful explanation and I'm going to
169:43 - actually maybe click it click on this
169:45 - one I'm in the wrong place
169:50 - time out ever to go to the future and
169:53 - actually because I I'm forgetting that
169:57 - on this page I think I think this
170:04 - there's links to them here yeah these
170:10 - are the links I'm looking at I will link
170:12 - to these no don't close that that's fine
170:19 - close this ok I'm back I what I actually
170:25 - just found the link while I wasn't
170:26 - making this anyway you get the idea I
170:28 - did little edit there so you could think
170:31 - about evolving
170:32 - an image by having the genetic material
170:36 - actually be a list of polygons with
170:39 - certain colors positioned in certain
170:41 - ways and look at this over time if I run
170:43 - this for a while and this is an example
170:44 - of evolving an image to look like a Mona
170:49 - Lisa and of course you could pick any
170:50 - other image to go input and this is also
170:53 - a oh this is implementation this this
170:58 - this is a is an implementation of Roger
171:01 - all Singh's idea which I'm going to
171:03 - click on this particular link and this
171:05 - describes this is the process and how
171:09 - this was developed so that's something
171:11 - you could explore I love to do a coding
171:13 - challenge actually trying to implement
171:14 - something like this but you could
171:15 - explore that and you've got the tools
171:17 - for doing that right here in this in
171:20 - this particular example okay some other
171:22 - homework ideas that you might consider
171:24 - you might think about
171:27 - improvements you could make on the smart
171:28 - rockets example maybe just adding you
171:32 - know just simply from a design idea like
171:34 - this is my smart my smart rockets
171:37 - example you know the design leaves a lot
171:39 - to be desired and what are some other
171:41 - more complex ways you could think about
171:44 - the obstacles the target does the target
171:46 - move around what's the design of these
171:48 - rockets this is something you could
171:49 - certainly explore and then really I
171:53 - think how could you think about the
171:54 - interactive selection problem so if you
171:56 - remember my interactive selection
171:58 - example is simply just these like really
172:00 - crude designs of faces with a couple
172:04 - squares and a circle but what's how
172:07 - could you take a design a font a shape a
172:12 - drawing and how can you encode that
172:15 - drawing and be it as virtual as digital
172:19 - DNA and how could you have users then
172:22 - rate those drawings those designs to
172:24 - evolve towards some other and get new
172:27 - imagery out of that so I think that's an
172:28 - exciting possibility thinking about
172:30 - music evolving music in that way a user
172:32 - listens to music rates music just even
172:35 - MIDI sequence those are things you could
172:37 - you could try so anyway um finally I
172:40 - would encourage you to think about I'm
172:42 - going to go to this particular example I
172:45 - would encourage you to think about
172:46 - continuous systems and improvements that
172:48 - you might make on steering agents
172:51 - autonomous agents moving throughout
172:53 - through a space you know this is just
172:54 - food and poison but what if you add a
172:56 - lot more other elements to the
173:00 - environment predators what if you add
173:03 - the idea of mating so they have to be
173:05 - near each other to produce a new
173:06 - creature for the next generation there's
173:08 - a lot of possible things I think you
173:09 - could explore so anyway this is me
173:11 - randomly giving you some ideas of things
173:14 - you could try if you mixed up please let
173:16 - me know in the comments share them with
173:17 - me at shipment on Twitter and I will see
173:20 - you in session three which will which
173:23 - session three is going to be about
173:25 - classification and regression so I'll
173:27 - see you in those videos if you choose to
173:28 - watch them okay goodbye
173:31 - okay yes Nick Nick 9 2 3 thank you for
173:36 - providing me I I will follow up with you
173:42 - about that in the slack Channel I've
173:44 - sent out I would say about 50% of the
173:47 - patron rewards and I certainly haven't
173:49 - sent out anything for anyone who's
173:50 - joined after January 1st so almost
173:53 - through everyone who joined through
173:55 - December 2016 and then I'll be starting
173:57 - on everyone who joined after in 2017
174:01 - which is a smaller number so that should
174:03 - go pretty quickly okay all right I think
174:09 - that I definitely have to go it's 7
174:11 - o'clock I will yeah solo solo solo
174:17 - [Music]
174:20 - anonymous penguin asked what is the
174:22 - slack channel I guess I will do a plug
174:23 - if you want to support the work that I'm
174:24 - doing and join the slack community you
174:27 - can do that by joining the coding train
174:31 - on patreon which is a crowdfunding
174:33 - system patreon.com slash coding training
174:36 - make my other plug that I added a lot of
174:39 - new coding training merchandise to the
174:43 - coding train store which is at coding
174:47 - train store Envy calm and I would like
174:51 - to make at this stop t-shirt which I got
174:53 - to do at some point all right I'm gonna
174:56 - try to I don't I definitely definitely
175:00 - cannot that will not do that
175:03 - um okay so I should be back next Friday
175:08 - it's my plan and hopefully I'm going to
175:11 - start on session two next Friday I'm
175:15 - just reading the chat to see if anybody
175:16 - has any questions I don't know I don't
175:18 - know if I'm gonna keep I don't love
175:19 - anybody like and I'd love to hear your
175:23 - feedback about those homework videos I
175:24 - think I was just too tired and I think
175:27 - it was maybe sort of like not really
175:28 - thoughtful or useful I'm not sure if I
175:30 - should publish those Voronoi diagram is
175:34 - a great topic for a future coding
175:36 - challenge would like to do that
175:37 - [Music]
175:42 - I've got a minute and 20 seconds left hi
175:46 - Henry
175:48 - no don't no dabbing and you're like
175:51 - tempting you to do it I think it's a bad
175:53 - idea right you shouldn't do it yeah
175:58 - [Music]
176:00 - sacrifice productions I added you as a
176:02 - mod so you should be but maybe you're
176:04 - not let's see if I can do it
176:06 - yeah I agree Pogo I'm sure it's
176:09 - definitely not easier for me to do it
176:10 - right now there's no way for me to do it
176:18 - here sorry ah now I've lost the child
176:23 - I try to get it back do it back okay
176:28 - I'll do the bat back look definitely
176:29 - ready 1 2 3 something's you some CGI
176:32 - please there we go
176:36 - edit that together some green screen
176:39 - action stuff this is this this is
176:42 - probably a better view for you
176:43 - yeah I can do my back flip down with the
176:45 - actual green screen maybe see my harbor
176:54 - if ik tape job this is like this is
176:56 - another laptop with the tape on it okay
177:00 - I think I might have pulled something
177:01 - there Lucas you know okay go back to
177:03 - here that was closer to adapt okay thank
177:06 - you guys I hope this was useful
177:08 - these are exhausting but fun and I
177:10 - really appreciate everybody watching and
177:12 - all the feedback in the comments and
177:13 - everybody support just on youtube all
177:16 - the liking and subscribing and sharing
177:17 - and patreon support and nice comments
177:20 - and constructive feedback I'm going to
177:22 - see you guys next Friday I hope I'm
177:25 - almost certain but just check back check
177:28 - my Twitter I always usually add schedule
177:30 - the live stream if you go to youtube.com
177:32 - slash if madhab slash live okay good bye
177:34 - thanks everybody

Cleaned transcript:

hello good evening did you hear that sound that's the sound of me actually getting here a half an hour early and hooking up an iPad with some sound effects in it which is maybe not the best thing for you watching right now but it is the best thing for me welcome good evening afternoon morning this is the coding train my name is Dan this is a whenever I get to it kind of weekly live stream I'm just checking to see in the chat if people are seeing me can you please let me know I'm gonna just click this button over here oh this is so terrible I was had some momentum here okay please let me know if everything sounds ok if you can hear my sound effects because I want it to be I don't know where anything is no is it I forgot this one over here okay all right so what I was saying was my name is Dan this is the coding train I try to be here every week every Friday in the in the midafternoon Eastern time to appear on the YouTube to program code make things embarrass myself all of the above and that's what I'm here to do today please increase the sound a little bit so increase the sound of my voice my lyrical gentle soothing voice or increase the sound of my music background voice a bit low okay let's see what we can do about this alright fortunately I have so many new technical achievements first of all this is gonna be real you guys really gonna enjoy this this is a green piece of paper which I'm going to put this laptop my voice okay let's see here I am in three so if I turn three up a little bit okay tell me if that is better and hopefully there's no distortion or peeking or anything like that because I can keep turning it up I just don't want it I want to make sure there's no distortion oh yes very good very good question about the sound is too loud now the music is too loud we say sound it's just not specific enough for me okay I got me more now it's too loud okay I'm gonna turn it down I forgot what it was that I'm gonna just I'm gonna leave it here okay I'm gonna leave it there I'm going to get some tape I turned it down now everyone saying now it's better but you're probably 20 seconds ago so tell me if I need to turn it turn it back up better music I don't I I don't know what anyone is saying anymore I'm going to I'm gonna split the difference it go into the middle yeah okay alright so let me put this nice oh no this piece of paper is not big enough they did it okay let's see I guess I will do this side I'll do this side know what to do papers not big enough I need two pieces of paper what a mess okay let's put a piece of tape here and a very little tape left also this is it it's all that's on the roll no tape left at all than this okay let's put a little piece of tape here I didn't really wasn't very thoughtful about this technology is falling apart let's do this you know what I do have another piece of paper it's a slightly different shade of green doesn't work as well but good enough I should put this one underneath let's see I'm just looking at the chat yet no nothing's happened yet you haven't missed anything you just missed me I could have done this before I started ok let's try putting this year and I don't know what I've done that's better than nothing or maybe it's not better than nothing just do this ok move the paper further forward put it on stand move the paper further forward that's a very clever idea you guys are much too and move this higher although I'm really I really want to get this just right so bear with me for a second this this is going to be perfect oh yeah this is good ok wait you can see the blue tape there's some blue tape picky oh I'm gonna get some youtube comment complaints about having to sit and watch this here we go ok all right good enough all right welcome to the coding train I'm gonna set that aside for a little bit so what you might not know today's date is April 28th yesterday April 27th was poem in your pocket day just so happens that I have a poem not on a green piece of paper in my pocket so I'll read it to you for to celebrate poem in your pocket day oh this is kind of a long poem this is by Alison parish I will say a bit more about Alison and her work and this particular poem after I read it looks weird when I step behind it yeah it certainly does right oh my goodness everything's going wrong I thought it was so like technically adept today is a cable dangling here let's move this over here um okay me me me me me me me Star Trek true to the wrath of calm then each day was like a year in the warship of way NOLA now they that go down to the sea in ships then why not Kent as well our treaties draw there I met an old man that wouldn't say his prayers His Dark Materials to create new worlds too and her 16 there were ninety and nine that safely lay give half his years if but he could saying thus that alpha and who hath him sent how when she hears her son is dead not by their hands who vex the patient ground it is not possible that they old dame whose mounts a Sicilian fountain to the day where many a hero has found a grave such arms their last necessity provides yet could not speak or move but on its base but every coast is clear go where he will though hidden now from all our eyes not thus the foe his javelin aimed above and sensor from the Senate I displaced if his message was for sinners he could a vital change your work seemed incomplete to blaze those virtues which the good hide the mischief after all could not be great time cannot Amy my griefs are immortal but never could they warp my constant mind giving me pain which I do not value until the time when every mighty power could force that passage now and they too died and overall with one blast and the same who is resolved to venture his vein life and what between hem is of space a little ship goes out to sea that's my favorite part of the whole poem actually it's just I'm to give the little ship going out to sea okay this poem is not by me this poem is by Alison parish I'm going to open up the internet here I'm gonna go to Twitter Alison parish is a programmer artist poet writer teacher educator many more things I'm sure I'm pretty sure Alison's Twitter account is at a parish and if I go down just a little bit we're going to find this poem here it is why is my browser so small so unnecessary and let's take a look at this okay so this is the poem it is here and a tweet from April 26 and Alison writes replacing each sentence in a plot description with its closest semantic equivalent in my Gutenberg poetry corpus Soilers so I encourage you to follow follow Alison on Twitter she makes a lot of wonderful quirky and interesting BOTS probably most famous for the every word but which tweeted out over a period of years every single word in the dictionary I don't remember which dictionaries use the source one at a time over a certain period of time and Alison from what I understand following her on twitter has been working on creating a corpus of poetry and using something called word to vac likely to look at distance between lines of poetry so this is actually the idea of taking a plot description and taking a sentence from it and finding a line from a poem that's closest in this word vector space to that particular problem it's kind of the results of a particular line from the plot description it's kind of amazing the results that she's being able to get and I also want it I'm going to make a little plug for tonight if any of you happen to be I think if I just google RW ET this is Allison's course at ITP where I teach also it's called reading and writing electronic text if any of you happen to be in the New York City area it is 415 p.m. right now at 700 p.m. right here at ITP there will be a reading of all the students in the course and various computergenerated poetry and other language experiments that they have created so I encourage any of you to come we start coding now I will I will you know me I can't just start coding I got to warm up to it I got to use some tape got to talk about poetry and totally other some other unrelated things but I encourage you to check out this course and if you're in the New York City area come see the reading tonight okay let me close out of this what else do I have to announce I have added some new coding trade merchandise to the coding train store let me briefly do a little plug for that it's another way that you can support the work that I'm doing if you feel so inclined so this is the coding train store there's a new tshirt style with just this single train logo that people have requested that seems to like I'm going to get myself one of those yellow ones there are some zipper hoodies I just ordered myself this charcoal one over here there are some kids tshirts and some new women's cut tshirts that I didn't have before I just had the unisex tshirts so if you're interested in any of this stuff I'm not going to belabor the point it is coding train store Envy calm everything is fulfilled by printful printful is a kind of printondemand company and by the way there's a lot of other stuff I could make available via printful and so if you see something on the printful website that you want me to make available I will try to do that and I'll have them requesting a Vista tshirt so I think I need to do some logo branding clever design with a sort of this dot thing because people really like the I don't know where anything is Wow so if anybody wants to propose a design for this dot tshirt I'm all eyes cuz ears would be listening to it I guess anyway let me know send me a message on twitter at shipment okay uhoh I'm out of food you're talking about the foot you guys I saw some comments in the chat dancing I saw some focus is definitely an issue and I was worried oh my god I know that I'm a little scatterbrained and I have trouble focusing and I go all over the place and I'm not very organized and I'm often late not prepared but you're saying I'm out of focus like actually out of focus like I'm fuzzy that is quite possible let's see let's see how can we do this what can I do I need I'm going to focus the camera I have an idea so I stand about here so what I'm going to do is I'm going to move this laptop backwards backwards backwards as far back as I can okay that's that's about as far back as I can move it without it falling off the table oh I can move the table back and I can move it forward ah let's see if I can focus on this laptop uhhuh so I'm going to attempt to do that now and see if I can improve the focus what happens when I do this nothing wrong button mmm used to know how to do this oh this button know this but no this button no don't do it up read my camera I thought it was this button I was trying to zoom in to do the focus and doesn't see no one let me do that alright I'm just going to uh look did I just okay let me try let's see how this goes make it really out of focus it's way out of focus okay now I'm going to folk and probably what's more in focus is my hand over here hello no my name is no on the groaning tree okay right now I am going to focus focus focus focus wrong way wrong way focus focus that's already come into focus starting come on focus that's better I'm gonna go a little bit past it a little bit past it because I'm gonna stand behind okay let's see have I improved this at all I hope that I have oh I think I have I feel like just looking at it I could see in my preview that I am a little bit more in focus okay I'm going to hope that that's better I'm moving the computer back here let me know if that's a problem ok let's see what else I don't have I'm almost ready to do some coding but I got a couple more things which are related to coding so you not be wondering what's the topic today so I'm going to mention something to you guys which is that I have been teaching this course at ITP called nature of code intelligence and learning and the course is actually basically finished now next week are the students final project presentations and it was my intention to keep up and make videos about the topics in this course all semester or it's a seven week course so all seven week long however you know I missed it there was a conference I got sick things have been busy I've been a little bit behind so right now I am still on week two but I have examples and material prepared for each and every one of these weeks for example if I just quick click on convolute this week five convolutional neural networks and tensorflow I'm going to click here and you're going to see look at these these are some of my examples here's some resources and terminology some things that I'm doing so you can take a you're welcome and I encourage you to take a peek ahead on what material I have published here I am just going to slowly over time you know I'm probably going to miss one more week when it's either thesis presentations here or the student show but you know other than that I'm going to be here all of may all of June and week or two in July I'm going to be away for a couple weeks in July but I'm going to be here all this time and I'm going to just plug my way through all this material and I hoping to get through the end of it this last all this content to get to the end of it by the end of June so that's kind of my goal right now I know it's been a topic that has been highly requested and I'm just going to keep working through the stuff what I'm going to do today is actually continue with evolutionary algorithms and I am going to it's I had a coding challenge from a long time ago which worked on the traveling salesperson problem it was actually a series of several different versions and I kept saying and we could use a genetic algorithm I never got to that so that's what I'm going to do today in this particular livestream okay now what else do I want to say ahha here we go I got something for you guys okay so over the course of working on this course I used a variety of different tools and investigated a lot of different libraries and frameworks for doing artificial intelligence and machine learning however just to you know practice and learn I did build a very small sort of toy simple implementation of a neural network library in JavaScript designed to be used with p5 so I just want to show you that that exists right now I'm going to go to Schiffman repositories so that and I'm going to at some point in a coding challenge build this library from scratch so I'm going to go through the steps to make the library but the library is already there you could actually make use of it I'm going to click on it here there's a little bit again I don't by any means suggest that this is a robust platform for high performance you know superamazing hard moving fast paced which is learning algorithms it's just a sort of simple toy neural network library to do some experiments and you can create you know I recognize a lot of you watching this might no idea what a neural network is these are topics that I will get to but you can create an instance of a neural network object you could pass it some inputs you could give it something that you think it should output and so train it against that and you can also ask for it to make a prediction off of some unknown data so I've been using this I have a few demonstrations I have a demonstration that uses this of the sort of classic amnesty data set which is a this is using my library by the way I should mention that most of my library was derived from Tariq Rasheed's excellent book make your own neural network so basically i ported his code from python to JavaScript and i've changed a bunch of things and added some features but mostly it's the same so one thing that I really want to do is I want to have another I really really don't like using em mist as the sort of default the demo example but I did want to try it M NIST is a sort of wellknown dataset that's used to test different machine learning algorithms it's a collection of many many handwritten digits and what you can see here is boy this is I must have changed oh my goodness I've got a terrible bug so I changed a whole lot of things in the code yesterday and never rechecked this particular example so I'm going to fix those and if you want to pull request me a fix I'm sure you could find it so I can't really actually demonstrate this to you right now because it's not doing anything better than like just a random guess but oh look it did guess that that's a zero it's always giving me it no matter what it gives you a zero so I've got I've got I've got this taken this good thing good thing I discovered this live on YouTube okay let's look at what some of the other examples this is an example that's based on actually a chrome experiment called flappy learning by x vignette on github and i made a similar implementation of it using my library this is whoops this is a whole bunch of agents flappy birds trying to learn to play flappy bird so let's let it let's speed it up let it go for a while it's going to try it over and over again it's going to try is this is actually an example of neuro evolution which is a way of combining a genetic algorithm with a neural network to evolve to a it's using a genetic algorithm evolve an optimal neural network and you can see here now I have my little flappy bird this is a very sort of easy version I made the game kind of easy but so it's able to do it but this is a oh boy I'm getting nervous that's going to fail but this is good job artificially intelligent clappy bird flappybird thing it said clappy bird because i have another example of making a clap okay and then I have one more example which I want to show you which is also here as part of the library called neuro evolution in steering and that is a variation on my last genetic algorithm coding challenge which used a genetic algorithm to evolve a steering force to collect food and now I'm doing something different where each of these agents has a whole bunch of sensors attached to it that can sense the food and a neural network processes all the sensors as input and then decides what to do about those inputs and over time if I let this run for a while we would hopefully up achieve some sort of optimal state of being able to collect the maximum amount of food okay so I just wanted to show you anybody watching that this stuff exists because if I go over to issues I've got a long list of stuff I'm hoping to make a version of this for processing and lots of stuff that I'm working on but it's going to be a few weeks before I get to actual video tutorials that make use of this but that is coming ok let's see I am taking a look now I'm going to take a minute here by the way I have some new I have some new sound effects so I'm going to take a moment to see if I can answer any questions in the chat and then I'm going to do two more thing one more thing which is show some community variations of my last coding challenge and then I'm going to get to the next code okay just me asks what math do you need to learn or programming engines and lots of people are saying go code down you know I hear ya I hear ya it's a good good point um that's a good question uh you know so if only I had an answer to that question you know working with computer graphics it helps to review and practice topics from geometry in particular a trigonometry also to just have a sense of you know looking at triangles and angles and rotation lines and did this sort of stuff so I would say a kind of geometry trigonometry those are two subjects that I would certainly review you know building an under all Network system that uses something called gradient descent to learn requires some understanding and some basic knowledge of a thing in mathematics called calculus a lot of books and tutorials will explain and cover how to build a neural network through what you know an intuitive understanding of how it works intuitive understanding of calculus and that's kind of the approach that I'm going to take when I eventually get to do some tutorials okay yes okay so let's see what else we got I'm going to look for some other questions have you ever thought of doing coding challenges in react or node frameworks and then I think there were something about es6 this is a very good question and it's something that I'm really struggling with so I have never thought about doing just about anything I don't I don't use react in my daily life or work it's something that I would have to learn and look at to do some video tutorials it would be a good subject to have a guest come onto the channel to do some tutorials I have a guest hopefully coming soon to do some phaser which is a JavaScript game engine tutorials node I certainly have done tutorials and plan to do more using node it's definitely a piece of the puzzle in creating interactive creative coding applications if you need some serverside network component and then es6 I just don't know what to do about that I feel like all my examples are es5 syntax p5.js is using es5 syntax I don't know when or it makes sense to move over to es6 and I just have no idea what's about that so I'm always looking for feedback and advice about that at the moment I'm not ready to do that today but at any point that's certainly possible okay oh it's 430 I've been streaming for 25 minutes 30 minutes is my limit before I've got to get started with a coding challenge I'll see if there I think view is better than react you know who's a wonderful wonderful educator and programmer who does amazing stuff I think with view is Sarah Dresner Sarah Dresner was a guest on the coding train and Sarah Dresner also has a book that just came out who's promoting things that I think are good things in the world book by Google Sarah Dressler book SVG animations from common UX implementations to complex responsive animation I feel like Sarah does if you J has tutorials and workshops I don't know about that okay somebody could tweet this image to Sarah maybe okay will you do Tetris as a coding challenge I would love to do Tetris you know my most popular videos are actually these simple coding challenges where I make quick easy games the snake game that Purple Rain challenge those are my two most popular videos which is sort of surprising to me but maybe it shouldn't be surprising so I would like to do more of Tetris I think has got to be like a many part challenge right that's such a common so simple game to play a complicated game to build I would think okay all right thank you for those questions I will try to keep an eye on the chat I will also just mention that I have a patreon which is you know I usually feel awkward about plugging this but today I'm feeling just like plugging it so I have a patreon patreon comm slash coding training if you would like to support the work that I'm doing you can join the patreon I have a slack channel that you will get an invitation to that I am looking at right here and at different levels of scientist stickers or books and things like that okay so I will just mention that Baltimore Orioles jh2 k12 18 go O's go Danny ocean and go to a nose game okay all right uhhuh here we go um that's for all you Boston Baltimoreans out there alright uh there's all this stuff going on in the chat okay so as you might be aware when I do these live video streams can you hear me talk over the music what I it's kind of loud for me maybe if I turn it down you when I do these live streams I'm not really so advanced into anything so I need to take a minute here to kind of gather my thoughts and find some old code and I'll sort of talk you through what I'm doing and I'm going to get to a traveling salesperson so you probably are less interested in eine kleine Nachtmusik as you might be in the distance on as always I always forget the dis stop this stop it stop just stop this so first thing I'm looking for is the coding challenge is playlist anyone see coding challenges playlist you thirty more I should know how to use this it's not just God here we go this stop this got this so I'm looking for traveling sales okay it stopped so looks like thirty five point one thirty five point two thirty five twenty three that's where I last left off this stop this stop pistone ow oh I forgot about the community variation okay so now I'm going to rainbow code so one thing I like to do is I like to share a work that people have done variations on things that I have made in previous coding challenges and live streams and I have a new system I by the way I would really like to turn this whole repository into a website and there's been some discussion on that in the issues I don't want to contribute to that boy that would be super great join us but I haven't figured out a good way to do that but right now if I go to my most recent coding challenge which was steering evolution and I click on it all coding challenges now if they don't one should be added have a readme file associated with them and that's where you can add your own oh no oh no I think I forgot to merge and I'm not signed in to merge this but I sorry I'm just going to go so this is exactly what you can do you can create a pull request miles miles Elva did shut up miles LV Elvidge create a polar crest add a link to my variation and you can see that that link is right here with a link to miles this name github repository the project and some instructions about it so I can submerge this from a different computer where I've logged in on github but I can easily just get to the link right here so I'm going to do that and download that while I am doing some other stuff so let's download this so let that download okay so now I'm going to go back to the actual readme file which is right here right okay so we can see a few here now first of all I often do this when I create the readme file I'm too lazy to link to the YouTube videos and the original hive stream anybody wants to help out you see missing links here you can actually just go and add the links for me that would be wonderful and here we go so set up and draw created a variation let's go to the dam let's read let's go to the demo and here's the demo so this looks at first glance very very similar to my original implementation I imagine there are some things that are different here next generation automation based on vehicles healthiest survivor and some finetuning to the genetic algorithm press alt for switch debug on and off Mouse press for adding vehicles future implementations maybe in the future so it sounds like there are I can click the mouse and add some vehicles it sounds like there are some improvements in thinking about how the evolution works for us to be able to see that we'd probably have to let this run for a longer period of time but I encourage all of you to do so and take a look and maybe compare and contrast what setup and draw has done in this version that's different than mine okay I'm going to go to the next one which is by Carla de Beer press enter to toggle visibility and perception radii and display current fittest Boyd click on the screen to create more food whoo that's as interesting so let's take a look at this so what so this this is great this is a variation from Carlota beer one of the things I love about this as you can see there's a key here so this is food this is poison healthy boy dying boy and this is the radius and then I can do things like oh I want to feed this one over here let's give some Oh little extend oh and you can see the other thing is it's highlighted so the one that sort of maybe the healthiest gets a little highlight and there might be a way to you can see it you can actually see its health value over here so I love this I love there this is great variation is taking the core algorithm but adding a lot of adding new interactivity and new visual elements to describe what's going on and I have a feeling that if we go and run this other one from miles I'm going to delete this and I think this one is actually oh and this one is ported to processing which is kind of amazing so let's see how this hopefully this is going to work Cookie Monster asked what's the difference between CNN and RNN stay tuned I'm going to be covering that on this channel as I get to it but short answer is a recurrent neural network is a kind of neural network that's designed to process sequential sequential information convolutional neural network is a CNN can do a lot of different things but one of the things that works really well with is images because the word convolution refers to a convolution image processing filter so these are things that I will you can you get there's a lot of resources on my class website but I'm going to get to that in the videos soon enough okay let's take a look at this whoa first of all this is fullscreen that's kind of Awesome okay I feel like I got out like I this is a proper look at these in advance or at least look at the instructions let's look at the instructions so let's go back to pull requests and add a link to my variation and files changed press D to dogle to toggle debugging information F a and more information in the readme okay so d sa let's try those so if I press do Wow look at this so this has all sorts of metadata with each one who's giving them like a random name how long it's lived for what its current health is that's pretty cool and then what was it a I think is it a or a right I'm not getting a to where s ooh look at this s maybe a was saving it s shows more information about so I love so yet again we have another really nice implementation of annotating what's going on one thing it's nice to see about this running and processing is the sort of speed and power of having this as a fullscreen Java based simulation or probably this is going to run faster you could have a lot more agents on the screen and do a lot more with the sort of graphics and that sort of thing so great these are wonderful to see thank you for all these variations I hope some of you will make some variations of what I'm going to build today the traveling salesperson simulation and share those with me via github Twitter and all that sort of stuff ok ok I'm now going to okay right back back to what I was doing that's always a song started oh this stop this stop it stop this duck and then beating this stop this stop this disco so what I will get is smell like a big repository but I want to start stop by building on top of this traveling sales we're gonna throw uh lazily down okay just stop no I probably have this code somewhere we're gonna have to waste a doc you guys this stop this stop and then this this stop it stop hold on can you do this stop we'll stop is our waiting sighs doc just us and then you this stop is stop this stop this doctor stop where we left left off in our coding training story 90 5422 did it finish its downloading excellent okay here we go okay so I think we're in good shape now this needs to be a little higher this is way too low for me is that a problem for you guys this is too high okay so now what I want to do is where did I download this downloads and even though I downloaded this giant thing all I want are challenges and what was it 30 something 35 30 something anybody remember that okay all right so that's good let's look in here there we go odd TSP ga in progress and let's just let's put that away somewhere else so I think what I want I think probably what I want to do is just start with this one here and but I do want to do something first which is I'm going to do a new algorithm for pool selection let me do this in multiple parts and so I want to open up the atom editor which the editor I've been using these days and I am going to go one directory up and open this in the atom editor and let's go here sketch this is this is where I'm going to start we can delete all this okay and I'm going to run a server so I can look at my stuff in the browser and I'm going to go to traveling salesperson and run a server I'm standing in front of all the stuff that I'm doing which I shouldn't do I try not to do and now I need the browser and so this I believe I'm going to have this be a so where am I here let me go back to YouTube for a second and I want to look for my let's see let's look at this nature of code collection this one I think I want this video to be a 9.10 or 9.10 I guess somewhere in here and it's going to be improved pool selection and so that's what I'm going to do first okay today I'm looking at the chat looking at the camera I'm really not looking at the camera very much today I'm out of practice by the way this is totally off let me turn this back on I have washed this whiteboard unfortunately there's some lying spots that I just can't seem to get but um how's the focus on this can you see that okay I'm gonna go walk over to my monitor to see how it looks could it be improved I think maybe it could be let's see if I can improve that where's that button why do I not know where that button is anymore I it's not this one no I guess I'm gonna have to give up on this and figure this out later this is the button I used to press the zoom in to do the focus all right let me look in the chat and see how people say it is clean ish whiteboard yeah there's some great suggesting that a chat about different ways to deal with sort of like live coding and people following along and I have tried to use code pen and Co pen has some great features for that there's another editor environment called glitch that I've been looking at recently that I've also been interested in looking you would say it's InFocus okay I'm going to trust alko's note there and I'm just going to get started okay so let's see um oh I'm in the wrong thing here we go alright so I am going to oh interesting that's a good suggestion oh and Harvey thank you increase the font size of the code I think this is fine this font size of the code yes eight out of ten just press ok button to zoom in I'm on a Canon mark 3 5d mark 3 okay a button where is the okk I don't see any okay button oh there it is no yeah a way maybe it's over here cuz I know where all the buttons are on the mark oh I figured it out I figured it out okay so let me see here if I can see okay I'm going to focus this I don't know if you guys can actually see the zoomed in thing I think you do how do I focus oh that's that's not focus oh my god what horrible things am i doing focus must be has to walk over here manual focus this must be focused have a different lens on this one is it locked oh this is it there that's where I focus yeah oh good okay I think that's as good as I'm going to get it I'm gonna hit this and how am i doing ooh Oh am I totally walking crooked looks like the camera is all like on its side now this is not my skill well if I which way am i straight I can't tell I think it's just gonna have to do do I look like I'm like the leaning tower of Schiffman or something let me know okay oh yeah strick in the chat says we'll be good to have dance starting point for this exercise okay so if you want to get if you want to take a minute to follow along the starting point that I'm going to use and I will mention this when I actually do the video as well I am doing a video now but when I get into it no rainbow code there goes that camera I'm coming back to turn it on just hold on oh and I'm in the wrong boy I'm just a mess today it's gonna be like an hour before I do anything I really got to get better at getting started faster as much as I like to own my lane stick okay so this is this is where coding challenge 35 TSP coding challenge 35 point 1 TSP if you grab this code that's what I'm going to be getting started with okay all right maybe someone who has a quick sorry everybody it's very good points okay so we are now going to talk about pool selection okay here we go I'm not I believe is not watching today so Alka or anyone else was in the patreon slack channel if you can kind of do a little like time check on me that's kind of useful just to have a sense and you know every once in while just went you know say you're at five minutes you're at ten minutes or 15 minutes that's useful for me if you don't mind if you can okay here we go hello I'm back for another genetic algorithms video although this video actually that you're watching right now is not just a video about something you could do for genetic algorithms this video is ultimately about picking from a list of things randomly but picking some things more often than other things and this is a thing that you do have to do who is my research over here yeah I'm coming I'm coming good this is a thing that you have to do it would you like algorithm because we want to we want to have a population of elements and we want to pick certain members of that population that have scored a higher fitness score to have their genetic information more likely passed down to the next generation but let's let's let's let's erase our minds of the wonder that is genetic algorithms and just start with a very simple scenario I'm going to create a JavaScript object and it's just markers very interesting smells and it's going to have a things in it like mango five blueberry three cherry one and apple one so what I want to be able to do is I want to be able to pick one I want to pick a fruit randomly I want to function that says pick fruit and I call that function I'm going to get out of it return a particular fruit maybe mango maybe blueberry maybe cherry maybe Apple and I am going to get mango five times as often as I'm going to get Apple I'm gonna get mango and I wrote these numbers very specifically to add up to ten because it's very easy for me to just sort of do the math here but I going to get Meg want to get mango 50% of the time blueberry 30% of the time cherry 10% of the time and apple 10% of the time this relates to so many different kinds of scenarios that you might do in computer programming if that makes sense okay so how do we do this now you've been watching some my other genetic algorithms or other videos I've done this a number of different ways one way that I've done this is I've built a separate array and I what I've done with that array is I've put I just said hey let's put mango in it five times I'm just going to write em mangoes in this array five times and then I'm going to put blueberry in this array three times and then I'm going to put a cherry and at once and a plant at once so if I had a bucket full of all these letters and there's five M's in it 3 DS 1 C 1 a and I shuffled around and pick one out randomly I'm going to pick M more 5 times as often as I'm going to pick a so that's one way of doing it now there's a bit of an issue with this way of doing it this works really nicely for this but if I have thousands of elements and thousands of different problem like a vast array of probabilities some of which are very very very very small probabilities I did have to build this array they're just so much stuff in it it's not a really efficient performance good performance solution and that's actually if you look at a lot of my examples that's the solution I'm using doesn't work so great so I'm gonna propose I'm gonna I'm not proposing this I didn't invent this I'm just talking about it I'm going to look at another solution now there is another solution to this problem which is Mac in a way that you could sort of pick random numbers twice so what two random numbers so each one of these 0 1 2 3 so on the one hand I'm just picking a random number 0 1 2 or 3 and I could do that easily by saying it depends you know in JavaScript or in processing actually floor random 4 and this will give me 0 1 2 or 3 so this is one way that I could do this but if I do that I'm just going to get each one of these 25% of the time but if in addition to picking one of these randomly I picked another random number just between 0 and 1 so is the fruit that I'm picking and this is kind of my like a test number if I pick another random number that random number has to be less than the probability in order for me to for this first random thing to qualify so I might have to do this a bunch of times like I might pick three than point seven and then two and point four and then one in point eight and then zero in point six and then three and point O one or you know ah Apple qualifies so you can see mango is going to be able to qualify if I pick zero 50% of the time this second random number is going to be fine but if I pick Apple only ten percent of the time is this second random number going to be fine so that's one way the problem with this way is you know again with a lot of elements and a lot of probabilities I can be stuck doing this over I kept knew that Luke could take many many many many times before it finds a qualifying random number so this video I'm going to program an entirely different algorithm was suggested to use this algorithm in a github issue I will link to that github issue in this video's description which is no description down there I'm trying to get used to where things are over there is something no movie over there is like an ad you know what you don't know I don't know don't click on it maybe click on it I don't know I'm all stressed out okay uh never mind all that there's stuff around me I've got a person in a YouTube video but um there was a point to all this wasn't there ah okay so I will also I didn't bring up that kids habits you to look at it on the computer because I do have a computer over there which I will get to eventually okay so what is this other algorithm well one way you could imagine is let's say I created I don't know what this is a tube a pipe a rectangle some sort of twodimensional space and I said ah 50% of that space is mangoes space and 30% of that space is blueberries space and 10% that space is cherry and 10% of that space is Apple and this down here is 0 and up here is one so what if I just pick a random number between zero and one and it's almost like throwing a dart I could be over here and I'm going to throw a dart let's do it ready 1 2 3 I missed but actually it landed over here blueberry I'm going to be more likely there's more space for me to hit with mango than there is for blueberry than there is for cherry and apple now I know I'm not going to build some whole entire like dart throwing simulation thing my sketch so I need a mechanism to do this to pick the random number and figure out where I am and actually a way that I could the way that this could work is I can actually start up here you can pick a random number then start subtracting values and find out at what point do I sort of exit this space so hopefully I'm going to program that algorithm we'll look at it hopefully it'll work and we'll come back here and see if this makes more sense to us then okay I'm going over there now you want yeah okay I think it just on it'll be fine okay pause for a minute oh wait is there a weird sound issue probably I'm guessing that people having sound issues that they're just related to individual internet connection issues but I'm going to just pause for a second to make sure there's no big issue turn up the volume that's weird okay I can turn up the volume I will turn up the volume seems okay now okay I'm just reading the chat right now to make sure there were no significant issues okay I'm going to turn up the volume one more level and see how that see how that does okay all right good the good news is at you know for those of you who aren't aware I mean most of your watching probably watch before what happens is I edit these into shorter tutorial videos and we can play with the sound levels you can always pump up the sound level as the sort of like postproduction for that slight fuzz when you walk away like you mean you hear some distortion as I walk in and out interesting uh Mike was rubbing against my shirt okay so let's see let me try to know if it'll be better if I actually just look it here I know that's worse I could button up my shirt but I was trying to advertise my tshirts so I could you know I don't know if people would buy them makes me so when I see a purchase of something I don't know why this was a some chemical brain thing okay all right second laptop is quite fuzzy yeah this second laptop is invisible you can't see it I could type on it okay let me find that it's five o'clock already I got to keep moving here issues pool selection let's see there's two here oh this is one that I okay so let me look at both of these yep okay and okay so let me look at this okay alright so um sound is fine hello mr. bubbly it's 11 o'clock now how long is the stream going to go the stream is going to go at least for another hour hopefully not much longer because I am going to a computer poetry reading downstairs at ITP that I mentioned earlier so I don't want to be late for that but I do want to finish this example okay so I'm going to keep going now how long was that so far do you think anybody in the patreon chat have a sense anybody keeping track at the time okay thank you Alka seven minutes that's good okay okay here I am back in this bit this screen with my computer so this is the github issue that I was referencing there's a link to it in the video's description spectrin thank you for this original suggestion and then also sinclair's e81 this is from Affleck oh I took me a while to get to this has a very like fancy crazy look at this unicorn implementation of it that uses like es6 and all sorts of cool interesting JavaScript syntax that ooh I don't fully understand uh but I will understand someday okay so I'm gonna do my own to only close those and let's let's write some code okay so first of all let's quickly I should have done this in advance you know somebody I'll figure out a way to like fastforward time lapse this video this could get edited out maybe I might just appear haven't typed this in fruits equals mango five blueberry three sherry one and apple one okay so one thing that I want to do mmm good doing about there hold on I do I want this is how do I want to set this up so I'm not looking at the chat right I'm looking for the check I'm gonna give the challenge I should not look at the chat it's distracting me I'm looking at the screen on the code is over here and look at this code over here what do I want to do here I want to create an array of normalized scores and then I want to pick one randomly and hold on second here I've lost my train of thought I like I just like go away for a second come back I can't because this is like a lie yes always forget okay this is gonna be fine I just try to I got when I let me let me talk this through in the genetic algorithm examples I have this object and it keeps track of his fitness and all each object is in an array this is actually an object and so really what I want is this I'm thinking this is going to get a B to edit this out of the tutorial because right this is really what I want because I'm going to pick randomly from an array so the data structure is sort of irrelevant here because I could redo it in any way that I want I'm just trying to see if this is going to be so awkward to look at let's keep going here what do I take these out okay so now I just need cherry and I need Apple so this is blueberry cherry Apple okay and that's an array I don't I think the way that this has like Auto formatted it blueberry should be three I think you're just behind so like I just feel like can't I I really want to I'm like it I'm Way too neurotic for my own good but I just I want it to look like this and the problem is as soon as I hit save it's going to reformat it because I have that turned on I'm not can hit save I'm going to turn that off this is going to get edited out if you don't hit safe don't hit safe don't hit save don't eat saved up it save preferences ah beautify where do I where do I maybe it's under editor hold on file edit Adam Preferences where my user preferences key map yeah this is a command T but I have where's the beautify preferences when I hit save it auto it auto so where do I where do I find that anybody use beautify no packages no that's not packed this is just the packages I want the beautify upon save where is that I'm looking for somebody bindings no no that's where the keys is I could turn off beautify just temporarily I'm looking settings packaging search for beautify settings where settings I see preferences you guys are so nice $2 ate me in white insanity config in preferences ooh packages settings I know it's in the back of no settings beautify command T command alt B user that's the packages beautify oh I see I see I see settings thank you I'm just being dummy here settings how about just disable got it got it disabled disabled disabled disabled okay I'm just gonna disable it its if this works please don't go away okay alright I just want it to look like this okay uh yes look watch thank you okay here we are you're just this is my process it's process it's a process whoo I got a little sweaty there this is my new favorite sound effect okay stay hydrated good point some water that's gonna help okay all right here we go ready I'm back okay okay uh there's a little pause there where I decided actually I what I want to do is write the information I want to pick one of the it's easier for me to put it in an array because what I want to do is pick one of these elements from the array and then I want the probability of how I pick it to be something relative to its score so the first thing that I need to do by the way is I need to normalize all of these scores to values between zero and one and so that they all add up to one I want them to be a percentage and so the first thing that I'm going to do is I'm going to just loop through every single fruit and what I need to do is I need to add up all the scores I need to find out what do they all add up to some equals zero and I'm going to say sum plus equal fruits index i dot score then the next thing I'm going to do now here's the thing I might want to retain that score value or I might I be could just overwrite it but ultimately what I want to do I'm going to say fruit index i dot score equals fruits index I and I know I could say divide equals but I'm just going to write this all the way out fruits index a high dot score / some so the idea is I want to normalize all of those scores so all I need to do is add up the total and divide each one by the total that's exactly what I would have done here I get ten five divided by ten is fifty percent three to five minute thirty percent you know and the mass is never going to work out that's perfectly but who cares because the computers doing it not us okay so what I'm going to do here is I am going to go back to the browser and I'm going to refresh you know this canvas is here for no reason I'm just and I'm going to look at fruits and we can see here that now the scores are normalized point five point three and I could if I want to it might make sense to say actually I'm going to add a new property to each one of these object I'm going to say like norm score for like mmm just call it probability for probability fruits index I probability so now I'm hit refresh I'm going to look at that fruits array and I'm going to see here now it retained the score and has the probability of 0.5 and as you can see if I were to go here and add you know one other fruit like melon and give it a score of you know seven point seven then if I hit refresh and look at fruits you can see now I've got five and it's worked it out like it's the math isn't so clean because it doesn't add it to ten but mango now has a twentynine percent chance of being picked and melon has a forty one percent chance of being picked so this is good so now how do I pick one of these randomly according to its probability this now is now it's time for me to write an algorithm that implements this particular rates and code that implements this particular idea in this particular algorithm we throw a dart and find a place in here so the way that I'm going to do that is first I'm going to write a function I'm going to call it a pick one and it's going to receive a list so I'm going to have a generic function that could work with any list of things now it's going to be set up to work in such a way that the list of things is made up of objects that have a property called prob for probability but you know obviously it could make this more generic in other ways as well okay so the first thing that I'm actually going to do is I'm going to say VAR index equals zero so I'm going to sort of assume that the one that I'm going to pick is the first one then I'm going to pick a random number between zero and one point O and I'm going to say as long as R is less is greater than zero then I'm going to say R equals R minus that particular objects probability so let's think about this for a second what I'm saying is that let's say I have something with a probability of 0.9 and I have something with a probability of 0.1 okay that I shouldn't draw this right time out I shouldn't draw it right next to this because I'm gonna do something different now so I'm gonna use but where's I don't have any space I'm gonna come over here this is fine let's just say a simplified arrangement where I this is my like bar here and I have something that has a as a probability of 0.9 and B as a probability of 0.1 the first thing that I did is I picked a random number somewhere between 0 and 1 and then I'm going to subtract 0.9 from it because point 9 is first how often am I going to pick a number between 0 and 1 where I subtract point 9 and now I have a value less than 0 90% of the time right only if I pick a number greater than point9 if i pick point nine five and I subtract point nine I'm going to have a value of point zero five so 90% of the time and when I subtract this I'm going to be less than zero when I'm when I'm out when I'm done out I'm out you're out when I below zero that's the thing I'm left with ten percent of the time I'll pick that number like point nine five and then I go and subtract point one and I'm out so ten percent of the time I'll be left the last place I was I'm starting up here I pick some random number somewhere I subtract this am I already below zero or or should I keep going if I subtract this then I've got less so this idea of just I keep subtracting these values and it doesn't matter what order right even if this was B was first and I'm always subtracting point one first I'm only going to be less than zero if I happen to pick a random number that's less than point one so hopefully this kind of makes it some intuitive sense do I feel like there's a very smart way to diagram this that I'm not doing but I've said it enough times I'm hoping it makes sense let's come back to the code so what do I need to do let's say so if so what I need to do now is say index plus plus so I'm going to just keep doing this I'm going to go through the list until I have now gone below zero now there's a little bit and then I want to say return list index except for the fact that this isn't exactly right this isn't exactly right because I like how this bracket is highlighted down here anyway forget about that this isn't exactly right because I actually want to I want if if I say index plus plus I'm going to go one past the one that was actually the one that I wanted to pick makes it sets so I've got to very quickly just say index minus minus let me talk you through that right in the scenario where I just have 0.9 is the probability the first of index zero is 0.9 so I pick a random number I pick point eight I say R equals point eight minus point nine so that's negative point one then I say index plus plus so I go to one and I go back to Luke I don't loop again because I'm now below zero so I didn't I don't want to pick one I want pick zero so going up is just if I'm continuing but if I'm not continuing I've got a backup one so this should work I hope and so I'm going to hit refresh here and I'm going to say pick one fruits and I got mango and I got mango and I got melon and I got cherry a cherry and I got melon I'm gonna get melon most of the time right and so what I could do right now just to sort of verify that this is working I am going to say I'm going to write a little loop here for VAR j equals zero I don't use I again I equals zero I is less than 100 I plus plus and I'm gonna save our fruit equals pick one fruits and I'm going to say I'm going to do var melon count and if fruit fruit dot what is it named fruit dot name equals melon melon count actually you know what I'm just going to do that's fine something I could do is I could actually just create a count fruit dot count plus plus so I'm going to give all these while I'm over here I'm also going to say fruits index I'm going to give them all account of zero so I'm going to count how many times they've picked and if this is correct but doing it a hundred is a small sample size we should see that they're picked proportionally to their probability so let's take a look at that let's run it and let's look at fruits so fruits the first one is mango which was picked thirty times at a probability of twenty nine that makes sense blueberry was picked ten times you know its probability was seventeen cherry was picked seven his probability was five percent melons pictures forty seven so this is this to me is working obviously with just picking it a hundred times it's not going to map so perfectly you know I would suspect if I made this a hundred thousand then those probabilities are kind of overt I'm going to even out and be the counts going to be much closer to the probabilities okay so hopefully you have enjoyed this particular video which is just about how to pick elements from an array with different probabilities and this might work in ever and it what the nice thing about this particular algorithm is two things one is I didn't have to create a separate array with lots of duplicate versions of all these objects in it and I didn't have to do this thing where I have to pick random numbers multiple times and hope that one qualifies and it could get stuck in an infinite loop this is going to happen every single time this is going to always want a pick and return of value you know sometimes it's going to have to run through this loop a few times sometimes just once but it's going to this is this is a pretty efficient and fast algorithm for doing this okay so what did I miss what questions do you have did you apply this in something I'm going to apply this in something in just a moment so if we look at this video's description there's a link to a video where I program a solution to the traveling salesperson problem solutions a little bit strong I don't know if it's really gonna be a solution and attempt at a solution to the traveling salesperson problem in JavaScript with a genetic algorithm I'm going to pause for a second just to see is there anything nobody I think I think I know what he's telling me I did something horrible in this video so people are some stuff about sound okay okay thanks about to you're trying to edit this so thanks for watching I will see you in another video oh good bye okay what if the first elements probability is zero asks and or talked to Cox in the chat then it will just never ever get picked it can't get picked so probably a zero will never get picked Oh low battery on my soundboard oh no what most they do I'm going to get a charging cable I'm going to to add air I rely on the wireless internet here if this can be plugged in somewhere else I'm just going to to unplug this it's going to be fine hold on a sec Oh ignore this it's trying to connect this iPad to this computer okay here we go let's see all right I'm looking at the chat somebody I'm seeing something about the sound in the chat when I'm near when I'm near the when I'm when I'm near the board if that's a wireless mic there might be some distortions so you guys are noticing that over here whoops over here that there is some sound distortion if I'm standing over here by the whiteboard is that correct yes no sound Distortion maybe maybe not okay all right okay so I now okay so let's see now what I want to do let me take a look at what this is doing okay so I'm going to just remind myself what's going on here so this is the boy I really should have gotten a better green piece of paper 520 mmm hopefully I can okay this is my particular oh let me click here sorry everybody this is my example and so what it's doing is it creates a array of cities copies it if it's okay so something I need to do you know what I need to use okay so I I was wrong this is not a good example to start with I it's better for me to start with I'll show you which one challenges 35 I should start with thirty five point three so I'm going to start with that as the code base that I'm starting with so this is going to be coding challenge thirty five point four maybe it's in multiple parts I don't know so I'm going to delete this because I really need so let's see now oh and I can get my auto format so packages beautify and we enable it close this and let's see what I've got here yeah yeah order so I need a the reason why I'm moving to this one is because what I'm trying to evolve is in order of the cities and the first example didn't take that into consideration and so whoops so if I look here okay here we go so let me get this into a state that'll be a little easier to look at here and here as always I always forget the dis stop it stop it stop this duck and then DZ this stop this stop I'm using this this stop this dot this dot and then use this stock will stop using stop this stop this stop this stop this dot this gun never forget this this stop this stop this this stop this dot just uh forget this this stop this dot this dot and then reading this stop stop and you lose this dystopic stop this done and you do this stop just stop this stop is adding some stuff to this and a little tired so I'm just gonna stop let's do it music playing this time this dock thud never forget to this stuff I'm gonna do this stuff this stock this die I just moved to the dots are center stand it down here but somebody compose that song for me and finished okay so what else can I do here just to make this a little bit bigger and because a lot of this visual stuff is going to probably carry forward so I just want to I think I could probably compress this oh I see okay I don't know I don't know okay so I think this is good okay come on let's get rid of this okay so I am rainbows and kittens and kittens okay does it not go to 100% let's see all right let's fix the hat why doesn't it go to 100% so total permutation is factorial total cities and what I'm doing is I am when I'm where am i counting next order this is count divided by total permutations and then I probably it starts at 0 and it goes up by one so count should really start at one and then it should go to a hundred percent there we go so I was just starting in the wrong place let me move this over so you can see it there we go and I could make that just because while I'm doing this there we go okay great so I think I'm ready now anybody have any thoughts or questions are anything important between goodnight those of you have to go to bed now because it's really late at night okay so I'm going to just give us a try now so actually no idea what I'm about to do but I guess I'm going to figure it out as I go that's how this works so I'm hoping I'm assuming this is probably going to be in two parts so I think what I'm going to do in the first part is do a genetic algorithm without any crossover and then the second part I'll implement crossover and don't forget to talk with the guys from the future now so that's item number one now I suppose even though I'm doing this almost a year later in theory this follows directly from the previous video and it also depends on other videos that already have genetic algorithms in them so all I need to do is mention this playlist and then let me also go to oh and also the and this playlist down here is what I'm looking for okay okay so here we go yes this is a final this is finally a followup to my traveling salesperson coding challenges where I'm going to attempt to create a solution to the traveling salesperson with a genetic algorithm this is finished I'm going to drink some of this water and I'm just going to get started ok do it now it's why okay Oh missed okay here we go here we go hello I am here to do Oh hold on we start this over so let's make this like 700 thing I that's like the worst configuration ever that's better okay hello I am here in another video to attempt to I don't know find a solution create a interesting different hopefully good way of solving the traveling salesperson problem with a genetic algorithm so this is a previous coding challenge you can find a link to the video for it in this video's description where I used a bruteforce algorithm to look at every single possible configuration of a path between a bunch of points in a twodimensional space or cities for the traveling salesperson problem okay okay okay okay just the review the traveling salesperson problem states what Oh give me another chance everybody III know I hate it when I do like start over over and over again but boy I just got a little lightheaded too let's let's do this again hello I am here in a coding challenge and this coding challenge is a follow up on a previous one where I looked at something called the traveling salesperson problem now I would suggest if you didn't watch those videos they're linked in this video's description go watch those find out what the traveling salesperson problem is but just quickly just in case you don't what the traveling salesperson problem is is you create a set of points cities in a two dimensional space it could be three dimensional could be four dimensional but in this case two dimensional and you try to find what is a path that connects every possible City starting from any city ending with any cities that is the shortest path what is the easiest way to visit every single city and get to every single one what's the shortest path through all the cities okay so this particular program which I did in a previous coding challenge is looking at every single possibility even just with one two three four five six seven cities it's taken quite a while to check every possible city it will get there eventually every pup not every bus will City every possible order but if I just go and change this to like ten you know this is based this is really just never ever I mean we'll finish at some point if I change was 1112 there are 10 factorial possibilities with ten cities 11 cities 12 cities 15 cities so is there a way we could do better so the strategy I'm going to look at here is using a genetic algorithm so these are the traveling salesperson previous videos that I would recommend you take a look at and if you haven't seen or looked at any of know what a genetic algorithm is then I would recommend this particular playlist so this video that I'm making is not on this list right now because but it will be in the future when you are watching it it will be there it's not there now but like it is now because you're watching it anyways look into mine so what was it saying yes so this is going to go in this playlist so if you don't know a genetic algorithm is I recommend maybe you check out some of these videos first and then come back but I'm just going to start programming this straightaway so the idea of the genetic algorithm is what I want to have is a population so right now I'm checking but I have this idea of an order which is an order through all the cities so I'm just going to use the code I had from the previous coding challenge and just start from there I'm gonna this is going to work there's a bunch of stuff I'll be able to get rid of but one thing I need is a population so in the population I need a population of many orders so what I'm going to do now is I'm going to create that population so let's let's I'm going to so a couple things I don't need let's get rid of some stuff I don't need this total permutations or count let's just get rid of this stuff I do want to keep track of the best ever I don't think this individual order anymore there's not just one so I have the city's I have the total number cities let's reduce that to five so we can see if it works or easily and I have a population okay so I need to create the cities first so first I create the cities now what I need to do is I need to create the number of the population so let's just start with ten so population index I equals what so how to do this so one way that I could do this is I could create I'm going to create I'm going to create actually a variable called order right here which is just order index I equals I okay what am i doing so this can get edited out because I guess I will erase this now and then I will magically appear here so this will get edited out later now I'm gonna go pretend to walk over there again okay so the idea is that I have an array that keeps track of all of these vectors that's called cities now what I'm going to do is I'm going to create an array called order and what I want is just to have an order of how we're going to go through all those cities and so I can start with just this right so with their five cities zero one two three four now my population the idea of the population is I want to make a whole lot of these and I want them to be random nobody can't have zero right I can only have one number I think so how do I so how do I create a whole bunch of random configurations of this well I could start with this regular order and then I could just shuffle around elements a bunch of times to randomize kind of like shuffling a deck of cards so let's do that so this is just the standard order this array is just 0 1 2 3 4 and now population is going to be order slice slice I'm pretty sure the slice function in JavaScript is a function you can use it you can give it arguments to slice out a part of an array into a new array but what I'm doing here is I just want the whole thing so it essentially makes a copy of that array so if I just did this right if I just said population I equals order dot slice and I said console dot log population let's go to the browser oops and let's run this okay what's not defined there's lots of other stuff that but I can see here that look at this 0 1 2 3 4 0 1 2 3 4 0 1 2 3 4 that's what I've got so what I actually want to do a stop go away what I want to do now is I want to shuffle it so how do I shuffle it well let's should I make a separate function shuffle population index I why not so I'm going to create a function and there's probably a surprise that there's an array function that does shuffling maybe not or we could add it using prototype but anyway I'm just going to write my own function so I'm going to go down here to the very bottom I don't need this is something from the previous example that I don't need anymore I'm looking for the swap function where is the swap here it is so what I'm going to make use of this swap function so my shuffle function is going to receive an array why don't we give it like a number shuffle ten times it's like shuffle the deck ten times so I'm going to say four and so this is numb for VAR i equals zero I is less than numb I plus plus var so let's use n because what I want to do is I want to pick two elements I want to say pick a random index and you don't actually we can use I and then I'll just say this is like index 1 or index a is a random index into the array and index B is another random index into the array and then all I need to do is say swap array index index a index B so the idea is that I shuffle by saying ten times swap ten spots in the array or 100 times or a thousand times so now if I were to come back up to the beginning of this program there's all this extra stuff that I don't know what I'm going to do with here so I'm just going to comment it all out what I'm going to do here and I'm going to comment this out too is what now if I look at this when I look at the population I should see them all shuffled orders okay Oh p5 had problems creating the global function shuffle there's a p5 function called shuffle whoo interesting well first let's see if my shuffle function worked and that's the first one oh it doesn't look like it worked hmm okay so what did I do wrong let's let's just make our own array did I not give it a number oh I forgot to give it a number I have to say shuffle a certain number of times so shuffle a hundred times let's try this again and let's look at it now there we go so you can see these shuffled into random orders so now I have a whole bunch of random orders perfect okay now what do I want to do here first I want to go look up what's this shuffle function shuffle p5.js reference because maybe this does what we want it to do oh yeah array function to shuffle look at that shuffle and array randomizers the order of elements and right implements Visser Yates shuffle algorithm so this is a much fancier oh and look at this we're on this wonderful this is a beautiful Fischer Yates shuffle this is a great tutorial by Mike Bostock the creator of d3 with a much different algorithm for shuffling an array which is maybe it's just different than mine but anyway let's just use it so let's let's get rid of my let's comment out my shuffle function learns and let's just leave the p5 shuffle function and see what happens run this again let's look at what we've got now they're not shuffled why are they not shuffle well I have a feeling that what it does is it makes a new copy of the array so actually what I want to do here is just say shuffle order so I'm using the p5 shuffle function I want to just take that array order shuffle it into a new array and put that in the population perfect and now if we look at this we can see there we go so both are good ways of doing it now I'm at the point where I have an array and I have a population of orders and I've shuffled them next step I want to find the best one in the population okay actually what I want to do is give each one a fitness score okay so I could do some kind of like objectoriented programming here where I create a wrapper object that stores the order and its fitness but for simplicity right now I'm just going to create another array called Fitness and so for every element of the population I'm going to put a fitness score in the corresponding spot in that other array so what I'm going to do is now I'm going to loop through the entire population and I'm going to say what is first thing to say what is that distance the distance is and don't I have a calc from my previous example I have this calc distance function which is right here so this calculate distance function already calculates the distance of an array of points in a given order so that's perfect I don't have to add that code again I already have that from the previous coding challenge that's really nice so I'm going to say D equals calc distance cities in the particular order of the population and then I'm going to say Fitness index I equals that distance now that's not exactly right because I don't have to do some mapping to the fitness because a smaller distance is a higher fitness but let's just leave that for right now and let's also write we have this idea of the bestever record distance so I'm going to start with a record distance as infinity and while I'm doing that I'm going to say if distance is less than record distance record distance equals that distance and bestever equals population index I that particular order okay great so now I'm going to take out this let's put this all this draw stuff back in to sort of see the best ever oh I'm going to leave the shuffle function the swap function calc distance and now let's see what happens let me run this okay order is not defined sketched at J s line 46 okay so this is this I don't need I just want to look at the bestever so oh so I could say this should say bestever dot length sorry and this should say bestever dot length whoops I don't need two of these sorry I'm just going to there's all this extraneous stuff that I don't need and would take all this out so I just want to draw the best one so you can see it's you know it's making however many and drawing the best one now interestingly enough if I were to increase the population size to 100 you know it's probably just out of a hundred possibilities you know what's 5 factorial 5 times 4 is 20 times 3 is 60 times 2 is 120 so there's only actually 120 possibilities in here but if I were to make the number of cities something like 10 and I just have a hundred possibilities you can see it got something better than just a random order but this is clearly not the best order okay let's pause for a second I'm at 13 minutes and I just going to drink some water and kind of figure out where I am this is going to take forever it's 545 it's going to speed up you'll see because we've done a lot of the pieces already okay so next thing that I need to add to this I'm at about 13 minutes is I need to map the distance to actual fitness score and then I need to map those two probabilities and then I need to build a new generation with probabilities so all right okay here we go alright ok so one thing I want to do right now just because I'm good time seeing things starting to get as I already have all this code I'm adding new code I'm going to create a new JavaScript file I'm just going to call it GA for genetic algorithm jf and then I'm going to add a reference to it in my index.html file and what I want to do is I want to take some of the stuff I don't need this next order any more function this should go away that was from the lexical order version calc distance swap these can all stay but I want to I want to have this other JavaScript file where I can start putting functions that are particularly relevant to the genetic algorithm itself there so all I do okay so all I have so far you know I just said this but I got to recap this for myself is I create a whole bunch of random orders I try all of them out I pick the best one so for the genetic algorithm to work what I want to do is after I've done that I want to generate a whole new set of algorithms Beit chart a whole new set of orders based on the orders that did better so one thing that I need to do here is where I am calculating those those distance values and I'm actually going to take all of this here and I'm going to make this in a function I'm going to say calc fitness calculate Fitness so this particular algorithm that goes through and assigns of Fitness what I'm actually going to do is I'm going to map the distance you know that is a value between the Fitness is a distance that's a value between what should I do here what would be so this is kind of an interesting thing to think about you know what I'm going to do I'm not going to do that I'm going to invert it so if I have a number if I want to take if I want to make a number that's a high number and make the higher it is a the higher it is a lower value the lower it is a higher value I can actually just say 1 divided by D now I could worried that D might be 0 and so I could say 1 divided by D plus 1 that way if d is ever 0 like this 0 being the you know absolute best distance ever you know which is unrealistic obviously because you're never unless all the points wrangling are right on top of each other but then everything's going to be 0 but anyway then the fitness would be 1 and everything else would be lower so I'm going to add that in there just as kind of a nice little extra thing and that's the fitness value okay then what I want to do is I actually want to write a function called normalize fitness because for the way that I'm going to pick them what I want to do is I'm going to mention another video that I made recently as I want all those fitness values not to be just some arbitrary value that's higher or lower but I want them to map to a probability between 0% and 100% and I want all of them to add up to 100% so the way that I do that is I first need to calculate a sum then I need to loop through the entire population again and I need to say sum plus equals fitness index I so I want to get the total fitness and then all I have to do again and by only I can say fitness dot length because that's really the array that I'm working with although Fitness and population are gonna have the same length I'm going to then go through it again and say Fitness index I equals Fitness index I divided by sum so this is the process of normalizing all those Fitness values ok so if I go back to the sketch this is something I'm going to do every frame so now I really have my genetic algorithm the first thing I need to do is calculate fitness then I need to normalize fitness ok so once we've done that a calculated fitness I've normalized fitness now it's time to make the next generation and you know I suppose I could draw the best before I make the next generation but I'm not worried about order too much here right now right now okay calculate fitness normalized fitness make the next generation so how do I make the next generation okay let's go back to here and I'm going to write that function next generation so I'm going to make another array I'm going to call it new population and what I want to do is I want to create something like this I want to say for every I want to say for every member of the existing population make a new member of the new population so I want if I have a hundred to start I wanted then the next generation has 100 the next generation has 100 so just as a little experiment here just to make sure things are working I'm going to say new population index I equals population population index i dot slice so what if I just this is like not a genetic algorithm at all this is me just making an exact copy of the previous generation in the new population and then at the end I can just say hey guess what population equals new population so make a new population that's a copy of the previous population and then have that being the new population so I should be able to do this over and over again so I just want to see if this doesn't give me any errors it doesn't give me any errors but this is now this is now running in a loop the thing is I'm never going to have an improvement because my new population is just the same as the previous population so now here's what I want to do here we want to have a genetic algorithm so what I actually want to do is I want to say the new population is pick from the old population and I'm going to say and I'm actually going to say I'm just going to call this var order equal because I'm going to need to add something called mutation pick one from the new population how do I pick one member of the old population according to its fitness value the things with a higher fitness I want to pick more often the things with a lower fitness I want to pick less often I want to just copy the ones that were good and not copy the ones that weren't so good okay so how do I do that so I've already knew Matt I've already calculated Fitness and normalized it oh I know how so guess what I just made another video about this a particular algorithm for doing that so I'm going to link to that video in this video I'm going to link to that video in this video's description and right now I'm just going to go and grab the code from that so that code is here in this particular sketch that I programmed earlier today called pool selection and I'm going to go and grab this function called pick one okay so I'm going to grab this function and I'm going to bring it over to my G ajs so what this function does it's a particular algorithm that I go through where and I'm going to just describe it to you briefly oops okay I'm going to describe it to you briefly if you imagine this as the population and this has a fitness of 70% this has a fitness problem map to probability of 20% and this has a fitness makkya probability of 10% well I could draw that almost like as a twodimensional space with 70% being a 20% being B and you know I didn't draw that very well to scale ten percent being C so how can I pick a random number between zero and one and whenever I pick from zero to 0.7 I'm going to kind of land within here whenever I pick from zero to 0.9 I'm going to land within here and when I replay 4.9 to 0.1 I'm going to land in here so you can see that 70% of the time I'm going to land in here and that's what this algorithm is doing and I go through it more detail in the other video but I do have to make some adjustments here because I'm picking one from this population and okay and I think I need to erase here so lists and probabilities so I need to pick one from the population according to the fitness values so I need to just change this R equals R minus probability index and then return the index value that defines with that list so let's see if this what this does okay and I think I also want to I just want to make a copy of them it might be because I'm going to start messing with them so it's good for me to create a copy of it so get that order and copy it so return a slice okay I'm not seeing any errors but again no improvement why is there no improvement well even if I pick better ones more often if they never change whatever the best one is only the best one that it will ever be so this is where I'm going to add a function and I'm going to call it mutate so in next generation I'm now also going to say mutate order so now I need to write a sorry yeah mutate oh and also I didn't I also have to actually put it in the population in the new population which I forgot to do so let's make sure things are still working when I do that whoops new population equals order and let's refresh okay ah uncaught error F is not defined G is line 45 hope there's like an extra straight character there okay okay great so it's working same problem with now so I need to add mutation what I want to do is add some subtle changes to the ones that I want to take the ones that did really well and just change them a little bit how am I going to do that so I'm going to write a function called mutate and it's going to take an order and what I'm going to do is though now we have to think an a mutation rate so let's think about this mutation so how do i mutate an order well one way to do it would actually just to be to take two or two random elements and swap them so this order was pretty good 0 1 2 3 4 but maybe 0 4 2 3 1 would be even better so let's try that so what I'm going to do is I'm going to say and I did this already in my shuffle program I'll do it again index a equals floor random border dot length I'm going to pick index a and index B and then I'm going to say swap order and remember swap is a function that I've already written index a index B so in my mutate function I'm just always going to swap just one let's see how that does okay so I'm not seeing any improvement one thing I realized I probably forgot to do so let's take a look at the sketch is I'm not actually this thing where I check where do I check I need to actually check to see if I've got a new best one where is that did I lose that by accident where I went to find the best one somehow I lost that oh no it's right here oh no it's not okay so what I need to do is we have this record distance so I don't know where that went I have that coated already but what I want to do is I want to look at the distance did I put that in G ajs somewhere oh it's happening and calculate fitness actually so sorry hold on hold on a sec hold on a sec I don't like the way that I wrote this I've confused myself so even though I'm doing it in calculate Fitness I feel like this is a problem and so I am going to say a separate function called find best it really makes sense to do it there because I don't this is an expensive operation to calculate the distance so I'm going to leave it never mind so in calculate distance it should be finding the best ever and I should get and this should be drawing the best ever so I would think that with mutation let's just make sure it I don't let's make sure this is running yep so this is doing this over and over again and let's uh let's look at let's let's try to debug this don't know what I've done wrong here let's look at the record distance so it's finding the same record distance over and over and over again you would think that through some swapping so let's take a look it do I even have like a population the new population yeah so population has stuff in it let's make sure that what's in it makes sense hold on let's just pause for second like the guy need an edit point here because I this is like so awful the way I need to like move this over so I have more room to look at here this stuff and I need to like okay I need to debug this in a different way let me just see oh good yes that's correct K week Mon in the chat about the dividing by two plus 20 minutes okay uh yeah yeah yeah yeah very good Alka thank you for that okay uh guess what okay come on back where's my uh so it wasn't working because I had put in the mutate function but i i i didn't uncomment it because I wrote the function and uncomment it so let's add that and now let's see and I got some console.log in here that I probably want to get rid of or maybe I don't let's try refreshing it and see what happens uh yes so it's getting better over time this is working look at that how wonderful okay yay all right so now what have I done have I really solved the traveling salesperson problem I don't think so so first of all is this the optimal order looks pretty good it's kind of hard to say like wouldn't it be better maybe to go like from here and then here and then there wouldn't that be less but I know it's hard for me to eyeball it but only way for us to check for sure would be also have the brute force solution going and have a check every possibility which I would love for somebody to contribute to this to add that functionality back in but let's just go to total cities equals five and we can see that vary and let's make the population size let's make that a variable and let's make that let's just make that ten right now and so we're I'm going to put that here and so you can see it kind of like finding it over a short period of time let's make this six so we can see that this is working for small numbers and even with ten like oh that's not whoa that's the population size sorry and what I have it at a total even with now with ten cities you're going to see like it's doing really really terribly but I only gave it a population of ten so let's give it a population of 300 and you can see me with 10 I don't know maybe that's is that a good or No you could clearly see that you could get a much shorter order by going up those three and then across you can't my handles oh there it figured it out so it's look at this ah maybe there's some optimization here that could be done I don't know so you can see that this is working and I didn't even do cross over all I'm doing is mutating swapping some points in ones that did well I didn't even make the dist the fitness function and exponential function so there's a lot of improvements we could make on this what I'm going to do in the next video and then lambda mutation is a little bit awkward what I'm going to do in the next video is see I can improve this so this is part one it kind of got something going I'm going to right oh and I'm going to try should really what I would like to do is also draw just the current populations best one down here and should add that in so what I'm going to do in the next video is I'm going to try to add some things to improve this and namely do crossover between two orders which will not be so obvious how to do that I don't think I'll have to think about that in between when I hit stop recording and recording okay see you in the next video okay alright how am i doing 604 that was probably 28 minutes but you know maybe it'll get edited maybe matchy I can do some editing match to get that magic to get that down to 20 I have to tie my shoe 28 minutes is not so bad though definitely need to go soon how long is this going to last I'm hoping they'll be done in about a half an hour I just have to add crossover I have to add crossover and I should make some improvements as well what improvements that I say I want to draw just the best from one population at the bottom and then and like maybe put the number of generations or something maybe the average fitness I don't know the average like or the you know add some annotation to it and then add crossover and think a bit more thoughtfully about mutation okay this is the point of the livestream start to get the nervous tic it G thing okay I'm just going to jump right into this because I want to keep going here hi okay I'm back so this is where I left off in the previous video I have a genetic algorithm attempting to find the shortest path between all of the cities which are these just two dimensional points innocent and the traveling set with the traveling salesperson problem so what I'm doing in this version that I made in the previous video is I am just looking at the borders the paths that had the shortest distance and I am cloning those for a new generation and then kind of like shuffling some about randomly but I am not actually applying crossover so then what one thing I want to do in this video is apply crossover so in other words I have a set of points like 1 2 3 4 let me write those again 1 2 3 4 and 1 order might be something like this and another order might be you know something like this so what I'm doing right now is we can see I don't know this it's hard to see these are valid so let's say this has a distance of some number that maps to a fitness probability score of 0.6 and this has a distance of some number that maps to a probability score of 0.4 what I'm going to do for the next generation is I'm going to make 2 if I only have a population of 2 I'm going to make two new orders can you guys hear that so loud noises in the hallway ok I'm going to make two new orders and I want to pick I'm going to make these two new orders out of the ones that have done the best so I'm going to throw a dart at the wall and oh I hope I don't ruin this mark this beautiful marker I have a 40% chance this isn't really where I really have a 50% chance of hitting either I have a 60% chance of picking this one a 40% chance of picking this one if I pick this one I'm going to clone it to the next generation but maybe swap two points so instead you know the order goes from here to here I'm going to go from here to here to here that or something and then I might pick this one so I'm just doing I'm creating new elements of the next generation from the previous generation by making a copy what I want to actually do is have a mechanism for how I combine two of them into a new order and that's what I'm going to look at in this particular video now before I do that let me see if I can just add some simple little improvements to this so for example one thing I want to do is I'm only drawing the bestever and so what might be useful for me to also draw just to sort of see how this is working is what I could do is translate to the bottom of the window and I'm going to do this I could also draw just the current best so where am I evaluating the best one I'm doing that here so I could have another variable which is just sorry where I have a variable called bestever I'm going to have like a current best and what I'll do is here I will also say current record equals infinity and if I will now say also I will also check if d is less than current record then current record is this and current best or best current I can't remember what I called it what did I call it current best current best is this so I don't know if this is that useful but I thought I would add it so I can also see now this is me drawing this is me drawing the bestever and now I also want to draw the current best so let's run this and we can see so we can see that it's you know the population is doing a lot more stuff internally but every time eventually as it's trying new eyes sometimes gets a better one so this is a little least we have something more to watch here to sort of see like that it's continuing to animate continuing to try and guess future options okay so now Ken how else could we improve this let me look and first of all one thing that I did kind of weirdly which doesn't make too much which I feel like needs the mutate function needs some improvements so what you taped does is every time it clone something it just swaps two elements but I do have this idea of a mutation rate so I don't know I sort of feel like what might make sense is for me to say like well let me have a loop that goes through the total number of cities and then just says like if a random number one is less than the mutation rate then perform this swap so this is just a way for me to say like if there's ten cities then maybe I have a chance of like doing ten swaps but maybe I only have a 10% chance of doing a swap or something at any for any given city for any given spot I don't know this I'm not sure if this really makes a lot of sense but I am going to I'm going to try it this way and then where I say mutate I could give it like a mutation rate so if I give it a mutation rate of zero we would see that it's never ever ever going to get any improvements if I give it a mutation rate of one we're going to see it's just like really really really making a lot a lot a lot of swaps all the time I don't know if that's so optimal so maybe I would try something like a mutation rate of 0.1 and maybe that's like a little bit better so I don't know what's going to be an optimal mutation rate but at least I have some structure for saying do more random shuffles or less random scruffles and that can probably be improved okay so now what we need to do is add crossover so first I got to think about how we're going to do a crossover algorithm but right now what I want to do before I do that is just buy the place in the code where I'm going to do crossover okay so we're this is where I make this is where I I create a new order from I pick one from the population based on its fitness and then you Tate it and add it so really what I want to do is I want to change this now to be order a and order B I want to pick to order a and pip order two and then I want to save our order equals cross over order a and order B so what I want to do is I want to pick to cross them over then you Tate and then get a do now whether this is actually going to improve the performance of this it's unclear to me but certainly this would be something that's typically found in a genetic algorithm and worth giving a try but here's the really tricky thing so I'm going to come over to the white board and now we have to discuss how we're going to do crossover so remember let's say this these were the orders 0 1 2 3 these are the index values 0 1 2 3 so one order is 0 3 1 2 that's one order another order is 0 2 3 1 okay so typically if you've watched any of my other videos about genetic algorithms the way that you could perform crossover with two arrays of genetic information is to take half of one and half of another and put them together in which case my new order would be 0 3 3 1 but there's a major problem here this is invalid in other genetic algorithm examples that I've done there's no such thing as an invalid DNA array because it's just a bunch of numbers but this is a special kind of DNA array that must have every single instance of each index or once and only once so this kind of splitting it halfandhalf won't work you know the flipping a coin algorithm won't work I can't say you know pick a or b 0 pick a or B okay I pick B to pick a or B okay pick a 1 okay pick a or B be one once again even if I'm flipping a coin I now have ones in two places and I don't have three so one I'm sure there are lots of different approaches to this and I would love to hear from you guys anybody hold on let me I just lost my train of thought for a second let me go back and edit that I would love to hear from all of you as if I'm actually editing let me just start over per second I'm sure there are lots of strategies for doing this kind of crossover and I would love to hear from any of you of your own ideas of what might be a good technique but here's one that I'm going to try one way that I could do this oh I shouldn't have erased that stop I can put two hours in is where I start to lose it okay I erased okay not to please save me okay well one order again is zero three one two another order is zero two three one so what if I take some random part of one of these so let's say I just randomly decide I'm just going to take 3 comma 1 and I'm going to start my next order 3 comma 1 I have two empty spaces I need to fill well what if I then said ok I'm going to take oh this was a bad example because I'm going to let's let me just pretend this order is a different one because I want to make an example that's a little bit that actually has something you can follow so so this is 0 1 2 3 and I'm going to go 1 3 0 2 1 3 0 2 so what I'm going to do is I need to fill in these last two spots and I'm going to take them from here if they order that they're here as long as they aren't a 301 this is again I don't like this order can I just please have it be it's fine it's fine you guys are going to get the idea uh what should I put a 1 here no it already exists three should I put a threeyear no it already exists zero should I put a zero here it doesn't already exist should I put a two here yes doesn't exist so what I wanted this to be is in order that's something like 1 0 you know 3 2 I would still get the same thing right because I would say one can't go there because it's already there zero can three can't go in the next spot but to Kent so I'm going to just pick a random part of the order and then filled the rest from the other I think this algorithm has a name for it I don't know what it is maybe somebody watching can tell me okay so let's actually implement that now okay let me let's look at that so what did I do I need to write this crossover function okay so coming down here I need a new function I'm going to put it above mutate somebody's playing some music in the hallway crossover order a order B so the first thing I want to do is I want to take a random slice of order a so I'm going to say start equals floor random 0 comma order a just random order a dot length and then I'm going to say end equals some value between start and the end of random a I could always just take the first half or something but this is just I'm getting a random spot anywhere in here so maybe I pick this spot and then I want a random spot anywhere between here and here I probably should say plus 1 right plus 1 did I go over to that others did I go to the whiteboard just then can somebody tell me I have to wait 20 seconds it's fine I could have used a drink of water I did okay thank you guys you got it goes about 20 seconds behind me in real time okay so I'm just going to come back okay so now I should probably say start plus one I think because the V when I'm about to use slice so I'm going to say new order equals order a slice start comma end and I'm pretty sure that was slice if I give it three as the start and three is the end I won't get anything let's let's actually just look in the console to sort of see like if I have an array that's 0 5 0 1 2 3 4 a slice 0 comma 3 what do I get I get 0 1 2 I get I don't get 3 I get 0 1 2 and if I set a slice 3 comma 3 I get an empty array so I always want at least get and if I would say a dot slice 0 comma 5 that would be the whole thing so I think that makes sense ok now what I need to do is figure out how many things do I have left so I have a total number of cities new order length so this is how many I need to add right because if the total number of things should be 10 and I get this slice of six then I have four more that I need to add so I know I have a loop I equals 0 I is less than left actually but here's what I want to do actually though is what I want to do is I want to say var I want to I want to actually loop through I want to loop through the order B's everything in order B right because a city equals order B index I I want to know if new order concludes I think this is a JavaScript function that will tell me if it already exists in the array let's see so this is my array a a includes two is true a includes five is false so this is going to work for me I can say if new order includes I'm sure there's some fancy super JavaScript es6 array up friction way to do this and I look forward to hearing about that in the comments if new order includes city if new order does not include city then new order push city so I guess I could just I guess I don't need this left because by definition this should just work if I've done everything correct if I if I've done everything correctly then this should have the right number of stuff in it I think what I'm going to need to do is is definitely just try this function how so and then at the end I want to say return new order so let's try this so the program still running as it ran before I haven't actually introduced crossover or did I I don't think I actually put crossover in yeah oh I did so it's actually doing it but let's let's see if if this actually works a equals an array like 0 1 2 3 4 and B equals I'm just say 4 3 2 1 0 so what I want to say is cross over a comma B let's just see what I get 0 4 3 2 1 does that make sense I mean it worked it's a new random order but how is that a crossover it must have only picked 0 yeah only pick 0 from a and then it got 4 3 2 1 okay that makes sense then it got it got 1 2 3 and then it got 4 and then 0 so this is working this algorithm appears to be working so now is this actually improving anything unclear let's uh let's I think now we could really reduce that mutation rate because crossover is going to give us a lot more variation and I would love to just increase the population size to the point as blar jazz I can increase it without it running too slow so let's try 500 so yeah this looks um this looks pretty good like I'm kind of seeing it slowly over time improved you know how many cities is this ten cities when I put twenty cities let's give it some more space let's give this canvas like a bit more room to work with and see what we get now yeah let's take a pause here I'm going to come back in a minute after I've left this run for a while so this is going to be an edit point what time I have what time am I at oh I would use es6 is includes so es6 it includes is only es6 next best path along with the current yeah okay so I think I should make the fitness function exponential and I'm looking at other I should teach how to dance not how to code I think that makes sense so I think that I'm going to let this run for a little bit longer while I'm thinking here what else do I add to this so a set is something that I could use it's a unique array okay so I'll mention that is a set bs6 or is a set available in in es5 sorry I hope that wasn't really loud I know it should view did my microphone let's see here set JavaScript so does this tell me if it's like es6 or es5 said is es6 okay okay and did that blow out everybody's ears I don't know what ASMR stands for but I shouldn't ask thank you everybody for your nice comments I I just wanted to get a little further along to see if I could at least get it something with that doesn't like crossover anything but this to me feels like there's maybe too much craziness going on but yes yes Rubin asked a good question so let me make a list of things that I want to mention so es6 set this pencil is no good es6 set I want to mention distance squared optimization there was something else Oh includes this baby es6 and then it's got to be better ways to visualize this I don't know what those would be I really wanted to improve just a little bit past where it is but it might not seem slower than the poetry example but it is tsp I guess yeah intra ask well at least it is improving but how much better is it than just choosing random paths I'm pretty sure that this is quite a bit better choosing then choosing random paths but it's not it's clearly not good enough I would think that choosing random paths if you went back to like my first example with something like 15 I know it's how many cities I have right now 20 cities 20 cities is a lot that's 2.4 with 18 zeros so if you're just picking randomly there's really a lot of possibilities I would I would I would guess that you're not going to get the result that I have with just random now the only way for me to prove that would be to just also put a random one side by side but but yet mutate should swap neighbors not random indexes oh that's a really good idea you tape swap neighbors maybe I'll try adding that okay thank you I know I was that sacrifice productions thank you for that suggestion calculated 100 yen also calculated once and then cashed absolutely yeah okay so caching distance yeah I'm less interested in adding optimizations right now to run faster I'd love for people to contribute those and more interested in making it work a little bit better which I like the idea of swapping neighbors okay so I'm going to come back into the video now what's a good okay I'm having a little rest there with my lullaby that's and I back so I let this run for a while you can see that it's doing pretty well it seems to this is the best one it's found and sort of sticking with that for quite a while so I'm going to see maybe we can do one or two more small improvements and I'll give you guys some ideas of things you might do with the code to improve it and then I'm hoping you're going to submit some user submitted improvements okay so a couple things one is that includes function that I'm using is actually part of es6 which is a newer version of the JavaScript syntax that I'm actually using in most of my videos and es6 also has something called a set which I guess is a which could be a data structure that would be useful here other than just a plain old array the other thing that I want that I should mention is that the distance function that I'm using to actually calculate the distance which is right here this is a pretty inefficient or slow algorithm because it uses the square root so one thing that I could do is add my create my own distance function that doesn't use the square root but just uses the squares of the differences because I all I care about is relative distance so I or the other thing is there's a fixed number of cities I'm only ever looking at distances between them so I could create a lookup table that just pre computes all those distances so I'm just summing up what it is but anyway that aside those are some things you might think about adding there was a great suggestion in the chat from Cole noxee the second what that name is but that may be what I should try in mutation is instead of swapping to randomly actually swapping to neighbors so where do i do mutate so what if I pick index a and index B is actually index A plus 1 so it's the next one and I could say if index B is greater than total cities dot length then I could say or greater than or equal to right if I've gone off the edge then I could say actually index B is index a minus there might be a nicer way to do this but so what if I only swap two that are next to each other would this be a better algorithm okay so let's run this we're going to lose everything we had from before but I'm going to run this okay so I made some sort of error here can't read property X of undefined calc distance so that this there's something wrong with my own octo city's not length total cities is just the total number of cities let's fix that okay so let's hope I'm gonna I'm gonna take a little nap again and I'll be back in a while now let this run for a little while what did you guys think of that swapping neighbors did I do that correctly can I program a dancing unicorn with box TV ooh I like that idea yeah there's all sorts of higherlevel topdown ways I can analyze like a two lines are crossing that's obviously a bad thing modulus I was going to do modulus but couldn't I not want to swap the end in the beginning well I guess that wouldn't matter that would totally be fine output top fitness to the window yeah that would be a good okay so I think that I want to be at 630 I have to go this has been a two and a half hour livestream so I'm going to just be done with this but I'm gonna so by the way I'm letting to let that continue running but I realized this would this would be a nicer way of doing this would just be to use modulus operation so that I could just because I could swap the last one with the first one and so this would actually I think be just sort of a cleaner way to write this little bit of code I don't want to say rerun it because this has been running for a while I don't know did that improve it did it not 20 cities is a lot let's feel better about ourselves and the world of the traveling salesperson problem let's just get 12 cities which twelve cities there's a lot of possibilities 12 factorial is how many that's a nine million 479 million possibilities which would take quite a while to iterate through all of the possibilities but I have a feeling that if I run it with 12 we're gonna get something pretty good pretty soon like really fast that was like a pretty good I don't know if this is optimal found something even better oh I'm pretty sure oh you could definitely make it better by going from here to there then to there so anyway hopefully it's going to get even one job talking but we've done something that works pretty well so here's my request to you the viewer please once I post this code go to the link to the code there'll be a readme file there if you make an improvement add a link to your improvement in that reading file with a pull request if you don't know how to do that I do have a video about how to make a pull request but just write a github issue comment or tweet at me at Schiffman I would love to see a couple things number one I would love to see what kind of efficient what kind of things can we add to this to make it more optimal maybe there's a better way to do mutation a better way to do swap a better way to do crossover so what can we add to this to make this optimal the other thing that I really have to think is what is a better way to visually tell the story I don't have this isn't really so great I'm kind of seeing like a bunch of random stuff and sort of the current best but could I see the full population of everything could I watch a graph of how it's improving can I see some annotation is there some interactivity to sort of speed it up and slow it down so I would love to see variations and ideas for how you can tell the story of this problem and how the algorithm is working so thanks for watching these videos I finally did it I kind of I have completed I think the set of videos about the traveling salesperson problem and I look forward to hearing your comments and questions in the comments on youtube I think oh I just somebody told me I should remind people to LIKE and subscribe so please like and subscribe there could be like an end screen thing popping up around me maybe we'll add that in like and subscribe maybe you watch these next videos and I'll see you in a future video I hope okay talk to you soon or you know whatever this is that we're doing here on the Internet did it fix that no oh then wait like maybe it got better no no it should go up here and then there that would just be so much shorter okay I'm gonna tickle and watch it I'll tell you what happens another time goodbye okay alright that was lucky how I finished that right before the camera shut off okay what I'm going to do now if you guys will tolerate this I could do this not in a live stream but because I'm trying to create videos for this course I'm going to create an intro video and an outro video so I can't remember so I'm going to create a video too just to say like hey welcome to session two of intelligence and learning this is a long session about genetic algorithms really yeah I guess I will and then I'll do one about like a homework assignment so okay all right I don't know if this I don't know if this makes sense to do but I'm just going to do it and then we can never edit this into a standalone video on YouTube but I'm going to do it hello pic hello welcome to session two of nature of code intelligence and learning so I am making this video in 2017 these are videos that go along with a course that I'm teaching at New York University ITP on this video it's going to be very very short and you're here in session two so the topic for Session two is evolutionary algorithms so this this there will be a link to this particular readme file on github which has kind of a little outline of a lot of the topics some additional reading that you could do about the topic links to various examples but mostly if you're in this playlist if you're seeing this video this is part of Session two intelligence learning playlist there's going to be a lot of videos about genetic algorithms that you can watch this is a long session they'll be it starts with about four or five videos that just explain the idea then I go through a kind of a scenario known as the Shakespeare Monkey scenario if that makes any sense to use a genetic algorithm to evolve a monkey that type Shakespeare it's not really what happens but something like that and then I try to pick a variety of other approaches looking at something called interactive selection where the user plays a role in the evolutionary algorithm by making Fitness selections of what the user likes or doesn't like or what that sort of thing and then also I'm going to look at an ecosystem kind of simulation where you just have a continuous system of agents moving around the screen that try to try to eat food or escape from a predator and that type of thing so there's a lot of videos watch them all don't watch them all but I would if you get to the end there will be a video that gives you kind of an exercise or assignment prompt so if you get to the end and watch that video and you make something you create something please share it with me at Schiffman on twitter or in the comments here there anywhere and I look forward to seeing what you make normally in this introductory video I might sort of introduce the topic genetic algorithms but this video is really really short because the very first video in this particular playlist which should come up next to you actually does that so genetic algorithm introduction so you can just walk right into that video I don't know if you walk into a video but you can go right to that next video where I'll actually talk about what a genetic algorithm is and how it can be applied ok thanks for watching this short video that I don't know if it ever will actually exist but I'm making it so maybe if you're watching it then it does exist ok see you soon ok shortest video ever and then I'm going to make one mmm let's go to assignment oh I never made one for an assignment for session 1 mmm did I I don't think I did so let's go to homework 1 and I'm going to bring this up here okay let's get a try we're going to try this okay I need some I need some boost of energy this I really like you know I have okay here we go homework about it like 77 degrees Fahrenheit in this room I need to send an email to son about the temperature control near this by the way was a closet before I said if some cameras in here this the filing cabinet everywhere I think it's a big room it's very loud music okay you know I'm I would like to have a better selection of classical music but these are some public domain free recording so that god that's a the overture for the marriage of figaro oh it's starting over that's not the popup okay okay hello welcome to a video that comes at the end of session one of intelligence and learning this is a video that goes along with the course that I'm teaching at New York University ITP to School of the Arts okay so I'm making this video just if you happen to have watched this entire playlist you're following this course on my youtube channel now's the time where you could try to make a creative exercise based on the variety of different search algorithms with graph systems that I've showed you so this page here I will link to it has some of these exercise ideas I'll maybe talk you through some of them so one of the things you could really do is you could take any of the examples that I made mais generation with depthfirst search binary tree and just visualize them in a different way in an artistic way in 3d your really interesting to see could you do a star path finding in 3d you could actually even have a terrain that's 3d and you're trying to like you don't want to go up and you want to go down this was a viewer actually submitted a project like that which I will try to link to in the description of this video and so so I'll talk you through some of these possibilities so you could make your own visual design you know just as a technical exercise one thing you might try to do is have there's music in the hallway again take that binary tree example which just puts ten random things in the binary tree but allow the user to enter numbers and have those appear in the tree so it builds up slowly maybe it animates in some interesting way add some physics to it the six degrees of Kevin Bacon example I used a sort of dummy small dataset you could try to use build that exact same example but with a much larger dataset maybe it's not movies and actors the animal guessing game is so is oh that's what I didn't make a video for I should make a video about that so if you look at this animal guessing game example it's just a little node program that tries to guess an animal that you're thinking of and it uses a tree like structure to do that and so making an interactive version of that you know something that I think if you look at the astar example and you know all it does is show you that path that it solves for but what if you actually used some of my autonomous agent examples that have steering agents moving through a space actually look like they're little mice trying to find the finding it oh this was this idea of you know how do you think about the space that you're pathfinding in you know it's really just my examples are just a pure maze I should pull one of them up pause I'm gonna pull one of them up okay there's like a talk or some sort of thing a lot of people left yes yes no I I fifteen minutes it starts at seven I lied I said it was 630 because I kind of wanted to have time it starts at seven so I definitely have to go I do have it please bow but this doesn't have them does it have them I need quick access to all my examples can you guys hear that music I'm going to go into the hallway so you can really hear it okay I asked my train of thought I need to say I need to have online versions of all these examples running so I could just get to them this is very distracting probably not so loud for you it's very loud for me I downloaded that whole rainbow code repository perfect oh no is that going to copyright me is it was it loud enough that I'm going to get a like oh that's gonna that I'm going to get a copyright notice now this video is going to be monetized not the edited ones okay that's a very interesting point that challenges I'm looking for like a star or the maize pattern yeah okay and where was the DFC the maize generation okay DFS I mean okay this is the a star one this is the maize generation one okay okay now I even forgot where I was or what I was saying so with any of these example okay so I pulled up the a star example and also this Mays example now first of all it could be interesting to think about combining these two that's an exercise I actually have a solution to that if you look at the links I created a solution to that but here you know you could really think about the maze in a different ways that wall is it a river so I think just re imagining other ways to visualize these spaces and thinking about this as a terrain there's a lot of possibilities I think that you could that you could explore just using this the algorithmic verb 8 verbatim but thinking about the actual space that the algorithm is playing out in a completely different way and putting your own design spin on it what else do we have here so you know another thing you could do is I never made a video about like say for example Dijkstra's algorithm and you could investigate that and create something so if you do any of this if you do any of these assignments and you're watching this video share links to what you make in this videos in the comments or tweet them at me at Schiffman and also it's a variation on one of my examples that's on the github repository you can add it a link to it in the readme file in that directory I gotta have a better system for this so I'm working that out thanks for participating in this session one of intelligence and learning and maybe you'll move on and watch Session two with genetic algorithms ok I don't know I don't know if these are if these are worth keeping but I'm I'm just figuring this out let's go to homework 2 okay let me look at this hi did you actually watch every single video in this nature of code session to intelligence and learning thing if you did I'm kind of amazed and you're here at this if you're following along with the playlist you're here at this video where you could now synthesize some of these concepts and make your own creative project and do an assignment so I will link to this page this is a page where I have some particular exercise ideas I think one thing that you could do so here's something that you might consider doing you could take the Shakespeare monkey example as a model I should really have these up see what I what these should really be are links to the example running in the browser so that I could just click on them so I could just click on them and show them do I have easy access to the Shakespeare monkey 1 I know I've got to get another repository hold on I have an idea maybe there is an interactive version here maybe that I can't remember if I made interactive versions for this page here we go no I just just screenshots I'm working on it the second edition of this shoot I'm just oh oh no I know nope I don't mmm okay I only have 10 minutes am i in the desktop I'm sorry my brain is like totally fried maybe I'll come back and do this a homework video for I'm on the desktop no I'm in documents no wonder okay I'm just going to down I'm sure I have this downloaded somewhere else but I'll just lazily download this again and this isn't downloads so and another web server okay here we go so I have this up and running now I have the homework assignment here what else might I want smart rockets let's get that one going let's try to do this in a way that makes sense okay it's that example the evolving phases and then I want to also look at have this I need one more server did I put this on the desktop I put it in downloads don't know if it's here and you guys are if anybody's actually still here on this livestream I'm going to be amazed you should win some sort of prize okay okay these are some good things to start with okay I'm just going to start this video over two minutes and 22 seconds still here okay here we go I would love to do by the way like a tshirt giveaway you know obviously I have the patrons and I send patron rewards but anybody has a good idea of how I could do some sort of fun but totally fair and equitable tshirt or something giveaway I'm open to that and I'm anyway okay here we go I'm just gonna start this refer alka don't worry about the time for these because these are just so short doesn't matter okay hello this is the last video for Session two of intelligence and learning a course that I'm teaching right now in 2017 but you a Elian of the future watching I am Daniel Schiffman human being of Earth okay anyway um so I've got some sort of evolutionary problems good that's a anyway you're here you could do a homework assignment so there were so many videos in this session did you actually watch all of them if you did thank you that's wonderful now I'm curious to see what kind of creative projects what's kind of interesting new innovative or just experimental or fun useless ideas can you implement by exploring genetic algorithms and other kinds of evolutionary algorithms algorithms so one thing that you might think about is a starting with this Shakespeare Monkey example which made up the first four videos of this particular series and what if you were trying to evolve a target something that wasn't text what photos music or perhaps imagery what if you think of each character as a vector path in like an SVG kind of shape or even each character as a pixel there are some really interesting ways actually I'm gonna just write here in this video I'm going to Google this project evolved Mona Lisa genetic algorithm I hope this is going to come up with the right thing that I'm thinking about yeah so this is a wonderful explanation and I'm going to actually maybe click it click on this one I'm in the wrong place time out ever to go to the future and actually because I I'm forgetting that on this page I think I think this there's links to them here yeah these are the links I'm looking at I will link to these no don't close that that's fine close this ok I'm back I what I actually just found the link while I wasn't making this anyway you get the idea I did little edit there so you could think about evolving an image by having the genetic material actually be a list of polygons with certain colors positioned in certain ways and look at this over time if I run this for a while and this is an example of evolving an image to look like a Mona Lisa and of course you could pick any other image to go input and this is also a oh this is implementation this this this is a is an implementation of Roger all Singh's idea which I'm going to click on this particular link and this describes this is the process and how this was developed so that's something you could explore I love to do a coding challenge actually trying to implement something like this but you could explore that and you've got the tools for doing that right here in this in this particular example okay some other homework ideas that you might consider you might think about improvements you could make on the smart rockets example maybe just adding you know just simply from a design idea like this is my smart my smart rockets example you know the design leaves a lot to be desired and what are some other more complex ways you could think about the obstacles the target does the target move around what's the design of these rockets this is something you could certainly explore and then really I think how could you think about the interactive selection problem so if you remember my interactive selection example is simply just these like really crude designs of faces with a couple squares and a circle but what's how could you take a design a font a shape a drawing and how can you encode that drawing and be it as virtual as digital DNA and how could you have users then rate those drawings those designs to evolve towards some other and get new imagery out of that so I think that's an exciting possibility thinking about music evolving music in that way a user listens to music rates music just even MIDI sequence those are things you could you could try so anyway um finally I would encourage you to think about I'm going to go to this particular example I would encourage you to think about continuous systems and improvements that you might make on steering agents autonomous agents moving throughout through a space you know this is just food and poison but what if you add a lot more other elements to the environment predators what if you add the idea of mating so they have to be near each other to produce a new creature for the next generation there's a lot of possible things I think you could explore so anyway this is me randomly giving you some ideas of things you could try if you mixed up please let me know in the comments share them with me at shipment on Twitter and I will see you in session three which will which session three is going to be about classification and regression so I'll see you in those videos if you choose to watch them okay goodbye okay yes Nick Nick 9 2 3 thank you for providing me I I will follow up with you about that in the slack Channel I've sent out I would say about 50% of the patron rewards and I certainly haven't sent out anything for anyone who's joined after January 1st so almost through everyone who joined through December 2016 and then I'll be starting on everyone who joined after in 2017 which is a smaller number so that should go pretty quickly okay all right I think that I definitely have to go it's 7 o'clock I will yeah solo solo solo anonymous penguin asked what is the slack channel I guess I will do a plug if you want to support the work that I'm doing and join the slack community you can do that by joining the coding train on patreon which is a crowdfunding system patreon.com slash coding training make my other plug that I added a lot of new coding training merchandise to the coding train store which is at coding train store Envy calm and I would like to make at this stop tshirt which I got to do at some point all right I'm gonna try to I don't I definitely definitely cannot that will not do that um okay so I should be back next Friday it's my plan and hopefully I'm going to start on session two next Friday I'm just reading the chat to see if anybody has any questions I don't know I don't know if I'm gonna keep I don't love anybody like and I'd love to hear your feedback about those homework videos I think I was just too tired and I think it was maybe sort of like not really thoughtful or useful I'm not sure if I should publish those Voronoi diagram is a great topic for a future coding challenge would like to do that I've got a minute and 20 seconds left hi Henry no don't no dabbing and you're like tempting you to do it I think it's a bad idea right you shouldn't do it yeah sacrifice productions I added you as a mod so you should be but maybe you're not let's see if I can do it yeah I agree Pogo I'm sure it's definitely not easier for me to do it right now there's no way for me to do it here sorry ah now I've lost the child I try to get it back do it back okay I'll do the bat back look definitely ready 1 2 3 something's you some CGI please there we go edit that together some green screen action stuff this is this this is probably a better view for you yeah I can do my back flip down with the actual green screen maybe see my harbor if ik tape job this is like this is another laptop with the tape on it okay I think I might have pulled something there Lucas you know okay go back to here that was closer to adapt okay thank you guys I hope this was useful these are exhausting but fun and I really appreciate everybody watching and all the feedback in the comments and everybody support just on youtube all the liking and subscribing and sharing and patreon support and nice comments and constructive feedback I'm going to see you guys next Friday I hope I'm almost certain but just check back check my Twitter I always usually add schedule the live stream if you go to youtube.com slash if madhab slash live okay good bye thanks everybody
