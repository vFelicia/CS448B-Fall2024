With timestamps:

00:02 - In the previous video we learned
00:04 - everything there is to know or most
everything there is to know about
00:06 - inheritance
00:07 - we learn that we could write a class and
we could write another class that
00:11 - extends that class
00:12 - there by inheriting all the variables
inheriting all the functions
00:16 - and then we could you know modifiy it, we can add some of our own variables we could
00:19 - change a function by overriding it we
could do a bunch of things
00:22 - now what I want to do is apply this
way of thinking to our particle system
00:26 - example
00:27 - So here's our particle system example
it's a simple program and has a particle
00:32 - system class
00:33 - which manages an ArrayList of particle
objects, the particle objects are
00:38 - these lil' simple entities that have a
location, velocity, accelaration and they fall
00:43 - with gravity
00:44 - and there you are you see them there on the
screen so what we want to do is say
00:47 - let's I'm gonna do something totally
crazy, it's not crazy
00:51 - Actually it's not crazy at all I'm gonna do something incredibly
simple let's do the simplest thing we
00:55 - could possibly do with inheritence
00:56 - let's write a new particle class the
only thing that's different
01:00 - is it draws them as a square instead of a
circle okay
01:03 - so we're gonna make a new tab we're
gonna call it
01:07 - SquareParticle and I am gonna say class
01:11 - SquareParticle and now
01:14 - instead of typing all of the stuff that we
would normally have to add we need an
01:19 - update method and
01:20 - display method we all these vectors, we
need all these just, we're just gonna say hey
01:24 - we extend particle, we just inherit
everything
01:29 - that a particle has to offer a square
particle also has to offer
01:33 - but want to change one thing we just
want to override the display method
01:37 - instead of
01:41 - I'm just gonna just add some stroke and fill
instead of a circle
01:46 - and
01:50 - with some size and we'll say rectMode (CENTRE);
01:54 - right we're just adding in a bunch of
stuff
01:57 - to change to draw as a rectangle this is
totally legitimate
02:00 - we now, have you know you look at the
particle class there's all this code all
02:05 - this stuff
02:05 - we don't need any of it all we need to
say is let's draw it as a rectangle instead
02:09 - the thing is we did forget one
thing
02:12 - it's kinda of an important thing we
didn't cover it in the previous video cause
02:16 - you know the constructors always a
source of confusion and
02:19 - a in object-oriented programming but
here let's take a moment
02:23 - a deep breath and let's figure out how
do we write the constructor for the
02:27 - SquareParticle
02:28 - well lets for a moment go back and look
at how the constructor is written for
02:31 - the regular particle
02:33 - ah! the constructor receives a PVector that's the object's
02:36 - location, the particle's location where it is
born and it makes an acceleration and it
02:41 - makes a velocity and has a lifespan
02:42 - so it does all this stuff I i have
something to say
02:45 - I want our squareParticle to basically be
the same there's no reason to make the
02:49 - Square particle any differently
02:51 - I just want to display it in a different
way so our square particle
02:54 - is going to be the same. How do we
inherit a constructor? Well it turns out
02:58 - that we we do you always have to write
the constructor and i can a SquareParticle
03:02 - PVector l which is if you notice
03:05 - exactly the same as the signature for
the particle constructor
03:10 - but what I can say is super(l);
03:13 - I can execute this constructor in the
parent class
03:18 - with the keyword super and I can give it
the same
03:21 - arguments so if I got this PVector
argument I wanna call it
03:25 - super parent constructor with the
argument l so this square particle now
03:29 - is going to be born in exactly the same
way that a particle is born
03:34 - that's why I'm talking in terms of birth
but that's what the constructor
03:37 - really is it's the moment I've creations
when the
03:39 - when the object is created so now that
we did we'd have this
03:43 - hopefully we didn't make a mistake I could
hit run, compiles
03:47 - it runs we see are particles there at
it's the same but
03:51 - let's go look at our particle system class
and let's just
03:55 - change one thing instead of when I add a
particle adding a regular particle
04:01 - and now going to add the square particle
I'm going to run this
04:05 - there it is I see square particles
04:09 - change it back to particle I see
04:14 - circular particles
04:16 - this is pretty magical look at this code
there's nothing there just a new display
04:20 - method
04:21 - this is really powerful there's so much
to do with so powerful about it that you
04:26 - realize is
04:26 - if you build an elaborate physics engine
you can basically make that a library
04:32 - for yourself
04:33 - and every single object you ever make has
the physics engine
04:37 - embedded into it by just extending this
kinda parent
04:40 - body mover particle class so this is
incredibly powerful now
04:44 - a funny thing is happened that you might
04:47 - I'm not, im not.. shocked that this is
only been  five minute into this
04:51 - video and m gonna end it in a second
04:53 - but a funny thing has happened here
notice
04:57 - that I change this to square particle
05:01 - it runs but where my ArrayList still just has
05:04 - particles in it so this is something we
haven't covered yet
05:08 - and it's called polymorphism in it's what
the next video is going to be about
05:12 - but what I'm gonna give, what I would say
to you is an exercise now if your kinda
05:15 - following along and trying to do an exercise with each
one
05:18 - what you should do is try to make your
own child particle class
05:21 - do something a little bit fancier maybe
add I got it
05:25 - angular motion to it so that it spins as
it's moving
05:29 - umm.. maybe add...umm.. a you know the behavior
slightly different does it actually move
05:34 - in a slightly different way how could
you
05:36 - inherit everything but modify that
particle plus so
05:39 - work on that see if you can write and if
you're following along that the particle
05:43 - system example
05:43 - need a better way of organizing all
this stuff is
05:47 - the..the one you can modify that I
think is
05:50 - 4.3 so if you're looking at the
example in nature of code go get
05:53 - example 4.3 find that particle class
extend it  and see what you can make
05:58 - and the next video we're kinda gonna
inspect this missing piece so why is
06:02 - why it is that we can somehow refer to
the square particle
06:05 - as a plain particle or square particle
and it seems to work
06:08 - and that's going to be the topic for the
next video aha! six and a half minutes that
06:12 - amazing okay
06:13 - uhh..

Cleaned transcript:

In the previous video we learned everything there is to know or most everything there is to know about inheritance we learn that we could write a class and we could write another class that extends that class there by inheriting all the variables inheriting all the functions and then we could you know modifiy it, we can add some of our own variables we could change a function by overriding it we could do a bunch of things now what I want to do is apply this way of thinking to our particle system example So here's our particle system example it's a simple program and has a particle system class which manages an ArrayList of particle objects, the particle objects are these lil' simple entities that have a location, velocity, accelaration and they fall with gravity and there you are you see them there on the screen so what we want to do is say let's I'm gonna do something totally crazy, it's not crazy Actually it's not crazy at all I'm gonna do something incredibly simple let's do the simplest thing we could possibly do with inheritence let's write a new particle class the only thing that's different is it draws them as a square instead of a circle okay so we're gonna make a new tab we're gonna call it SquareParticle and I am gonna say class SquareParticle and now instead of typing all of the stuff that we would normally have to add we need an update method and display method we all these vectors, we need all these just, we're just gonna say hey we extend particle, we just inherit everything that a particle has to offer a square particle also has to offer but want to change one thing we just want to override the display method instead of I'm just gonna just add some stroke and fill instead of a circle and with some size and we'll say rectMode (CENTRE); right we're just adding in a bunch of stuff to change to draw as a rectangle this is totally legitimate we now, have you know you look at the particle class there's all this code all this stuff we don't need any of it all we need to say is let's draw it as a rectangle instead the thing is we did forget one thing it's kinda of an important thing we didn't cover it in the previous video cause you know the constructors always a source of confusion and a in objectoriented programming but here let's take a moment a deep breath and let's figure out how do we write the constructor for the SquareParticle well lets for a moment go back and look at how the constructor is written for the regular particle ah! the constructor receives a PVector that's the object's location, the particle's location where it is born and it makes an acceleration and it makes a velocity and has a lifespan so it does all this stuff I i have something to say I want our squareParticle to basically be the same there's no reason to make the Square particle any differently I just want to display it in a different way so our square particle is going to be the same. How do we inherit a constructor? Well it turns out that we we do you always have to write the constructor and i can a SquareParticle PVector l which is if you notice exactly the same as the signature for the particle constructor but what I can say is super(l); I can execute this constructor in the parent class with the keyword super and I can give it the same arguments so if I got this PVector argument I wanna call it super parent constructor with the argument l so this square particle now is going to be born in exactly the same way that a particle is born that's why I'm talking in terms of birth but that's what the constructor really is it's the moment I've creations when the when the object is created so now that we did we'd have this hopefully we didn't make a mistake I could hit run, compiles it runs we see are particles there at it's the same but let's go look at our particle system class and let's just change one thing instead of when I add a particle adding a regular particle and now going to add the square particle I'm going to run this there it is I see square particles change it back to particle I see circular particles this is pretty magical look at this code there's nothing there just a new display method this is really powerful there's so much to do with so powerful about it that you realize is if you build an elaborate physics engine you can basically make that a library for yourself and every single object you ever make has the physics engine embedded into it by just extending this kinda parent body mover particle class so this is incredibly powerful now a funny thing is happened that you might I'm not, im not.. shocked that this is only been five minute into this video and m gonna end it in a second but a funny thing has happened here notice that I change this to square particle it runs but where my ArrayList still just has particles in it so this is something we haven't covered yet and it's called polymorphism in it's what the next video is going to be about but what I'm gonna give, what I would say to you is an exercise now if your kinda following along and trying to do an exercise with each one what you should do is try to make your own child particle class do something a little bit fancier maybe add I got it angular motion to it so that it spins as it's moving umm.. maybe add...umm.. a you know the behavior slightly different does it actually move in a slightly different way how could you inherit everything but modify that particle plus so work on that see if you can write and if you're following along that the particle system example need a better way of organizing all this stuff is the..the one you can modify that I think is 4.3 so if you're looking at the example in nature of code go get example 4.3 find that particle class extend it and see what you can make and the next video we're kinda gonna inspect this missing piece so why is why it is that we can somehow refer to the square particle as a plain particle or square particle and it seems to work and that's going to be the topic for the next video aha! six and a half minutes that amazing okay uhh..
