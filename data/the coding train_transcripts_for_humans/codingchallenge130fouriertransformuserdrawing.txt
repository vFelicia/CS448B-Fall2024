With timestamps:

00:00 - [Train Whistle Sound]
00:00 - [Bell Ring]
00:01 - - Hello, alright, this Fourier
transform stuff is so fun
00:04 - and interesting and weird.
00:06 - This is the end result of the
very long coding challenge
00:10 - that I just completed and I'm
going to be doing a couple
00:12 - of different follow-ups.
00:13 - So this first follow-up, I
just wanted to write the code
00:15 - to instead of using the Coding
Train logo, have the user
00:18 - draw a path and then Fourier
transform that and render it.
00:23 - The second follow-up that
I want to do is instead
00:25 - of having two separate
rotating sets of epicycles,
00:29 - one for the x's and one for the y's,
00:31 - I can actually treat the
input to the Fourier transform
00:34 - as a complex number itself
and have one set of epicycles.
00:37 - So I'll come back and do
that in a separate video
00:39 - that'll come out later.
00:40 - You could try that on your
own, but I will get to that.
00:42 - So in this videos, I'm just going to see,
00:44 - I just really want to
see it, if I draw a path,
00:46 - I want to Fourier transform that.
00:48 - So, how am I going to do that?
00:49 - So the thing that I need is,
well, one thing is I no longer
00:53 - need this codingtrain.js
file which has the full path
00:58 - of that particular drawing.
00:59 - Instead, what I need is, I need
a variable calling 'drawing'
01:05 - and I need probably, like a
state and I'm going to say like,
01:10 - something like 'user',
01:17 - like these will be the two states.
01:21 - So I'm making two constants,
one is a zero, one is a one,
01:25 - and I know I could use like enumerables
01:26 - or something like that, but that's not me.
01:29 - You know me, I can't be bothered!
01:33 - Refactor this later and we'll put this on.
01:35 - So I'm going to start with
the state being 'user'
01:37 - and if the state is 'user',
this state equals 'user',
01:44 - I'm going to do something different
01:47 - than if the state is Fourier.
01:49 - And there's only two
possibilities here so I could use
01:51 - a Boolean, but there might
be other things I want to do
01:53 - with this later.
01:54 - So let's just start with that.
01:56 - And there's no reason for
me to do any of this stuff
02:01 - in setup anymore.
02:03 - I do want to have this code
for reference and then,
02:07 - I think what I want to do is,
when the mouse is pressed,
02:16 - well, the state should be 'user',
02:22 - and if the mouse is, when
the mouse is released,
02:29 - these are two global event functions,
02:32 - I want to make the state Fourier.
02:36 - So basically the idea's
when I click the mouse,
02:39 - when I'm about to do a
drawing, I need to record
02:41 - all of the points.
02:43 - So in 'draw', if the state
is 'user', I want to say
02:48 - the current point is 'create
a vector', which is 'mouseX',
02:55 - 'mouseY' and then I want
to add that to the drawing.
03:03 - And what I would do is always
when I press the mouse,
03:08 - reset the drawing array to an empty array.
03:11 - And when I release the
mouse, I would calculate
03:15 - the Fourier transform,
03:20 - and I'm going to assume that
I can use a skip of one,
03:26 - and this should work!
03:28 - I mean my offsets are going to be wrong,
03:29 - but let's see what happens.
03:32 - So now, if I go here and I
hit Refresh, there's nothing.
03:35 - Now, in theory, if I were
to draw a circle like this,
03:39 - and release, there we go!
03:41 - There's my drawing.
03:42 - Now it's weirdly down
here in a different place
03:44 - than I drew it and I wasn't able to see it
03:46 - while it was drawing, so I
need to fix that a little bit.
03:49 - So one thing that I should do is,
03:51 - please let me just minimize
this, it keeps coming up,
03:53 - one thing that I should do
is probably record the points
03:59 - relative to the center of the window
04:08 - and then also, I also
want to be rendering it
04:13 - so I would want to say,
for every point, actually,
04:18 - I'm going to say every
vector in the drawing,
04:21 - let's actually render
it while I'm drawing it.
04:24 - Begin shape, end shape,
stroke, let v of drawing,
04:32 - stroke 255, no fill, and
just set a vertex to...
04:40 - This'll be like the shortest video ever,
04:43 - compared to the last one.
04:44 - Instead of vertex, so this is me like,
04:46 - when the state is in
the user drawing state,
04:49 - I'm going to render all the
vertices and there's going
04:52 - to be a little bit of problem with this.
04:58 - Ah, so state actually at
the beginning, should be,
05:04 - I just realized, the state
should be negative one.
05:11 - The state is something
else, it's like the start,
05:13 - and I probably should
have some instructions,
05:14 - like 'draw something'.
05:16 - So the state is negative one
because I actually don't,
05:19 - and then when I click the
mouse, but you see my drawing
05:22 - is up there but this worked.
05:24 - Ah, okay, great.
05:26 - So now, what I want to do is,
05:31 - if I think about this correctly,
05:33 - ah, I just need to, I'm
restoring the points relative
05:36 - to the center, and I could
use translate or something
05:39 - smarter here but I could just
set them when I draw them
05:44 - relative to the center.
05:45 - So now, here I am, I'm going
to draw a very elaborate figure
05:49 - '8' pattern, it's like this,
and then you can see now
05:54 - there it is and it's a little bit off.
05:58 - It might not be exactly where I drew it,
06:00 - but you could see now, and
then, if I can draw a circle,
06:06 - oh, okay, didn't recalculate
the Fourier transform.
06:10 - Oh, it just added it to the end.
06:12 - How weird, I thought I re...
06:15 - When I do mouse released,
I should redo the drawing.
06:21 - Why didn't this work?
06:23 - Oh, the x's and y's didn't get reset,
06:27 - because I have this weird extra, okay.
06:29 - So that needs to happen, okay,
so now if I draw this circle,
06:32 - I get this and it's offset is
wrong, and then if I do this,
06:41 - it'll do epicycles for that.
06:42 - Okay.
06:43 - [Bell Ring]
06:44 - Sorry for the weird edit
point, I'm jumping in
06:46 - because when I did this coding
challenge just a moment ago,
06:49 - I forgot that I also need to
reset, in addition to resetting
06:53 - the drawing and the x's and
the y's, I also need to reset
06:56 - the time back to zero so
it starts at the beginning.
06:59 - And I better clear out that path.
07:02 - So this is pretty awkward,
there's probably a nice way
07:04 - to refactor the resetting of
everything, but this will make
07:07 - it work with fewer bugs, so thanks.
07:10 - And now the challenge
is going to continue.
07:12 - So, let's get the offset
stuff actually correct,
07:16 - and so one way to do that would
be to actually just, here,
07:22 - have everything be relative to the center.
07:26 - So where do I calculate the Fourier?
07:28 - Where do I draw the Fourier stuff?
07:34 - Here, let's get rid of this '+100'.
07:39 - Okay so now, if I draw very
slowly, this circle right here,
07:46 - as soon as I let go, we're going
to see it drawing right there.
07:51 - There we go!
07:52 - [Bell Ring]
07:53 - So this coding challenge now
complete, let's just make sure
07:54 - I'm going to draw like now,
this very, like my drawn version
07:59 - of a sine wave, and there we go.
08:03 - Now my drawing machine is rendering it.
08:06 - Okay so I just wanted
to do this to show you
08:09 - at least some creative possibilities here.
08:12 - There's so many things that could be done.
08:14 - Should we factor this to make it better?
08:18 - But I just wanted to do this follow-up
08:21 - because this might help you start to think
08:23 - of other creative ideas of
things you might be able
08:25 - to do with this particular
Fourier transform
08:28 - epicycle drawing coding challenge thing.
08:31 - Now, I am going to return
at some point in the future
08:34 - and do one more video, where
instead of doing the x's
08:37 - and y's separately, I
process them together,
08:40 - and that I think will also be
something fun and interesting
08:43 - to play around with.
08:45 - So it will need a little bit more sense of
08:47 - how complex numbers
work in order to do that
08:51 - so you might want to go, if
you haven't watched, watch.
08:53 - Go back and review the implementation
08:55 - of the discrete Fourier
transform algorithm
08:58 - because I'm going to
basically be redoing that
09:00 - but have the inputs be
complex numbers themselves.
09:02 - Okay, thank you very much.
09:05 - See you in the future.
09:06 - Please share with me versions
of this that you make
09:09 - and I will see you soon.
09:10 - Good bye!
09:11 - [Cheery Music]

Cleaned transcript:

[Train Whistle Sound] [Bell Ring] Hello, alright, this Fourier transform stuff is so fun and interesting and weird. This is the end result of the very long coding challenge that I just completed and I'm going to be doing a couple of different followups. So this first followup, I just wanted to write the code to instead of using the Coding Train logo, have the user draw a path and then Fourier transform that and render it. The second followup that I want to do is instead of having two separate rotating sets of epicycles, one for the x's and one for the y's, I can actually treat the input to the Fourier transform as a complex number itself and have one set of epicycles. So I'll come back and do that in a separate video that'll come out later. You could try that on your own, but I will get to that. So in this videos, I'm just going to see, I just really want to see it, if I draw a path, I want to Fourier transform that. So, how am I going to do that? So the thing that I need is, well, one thing is I no longer need this codingtrain.js file which has the full path of that particular drawing. Instead, what I need is, I need a variable calling 'drawing' and I need probably, like a state and I'm going to say like, something like 'user', like these will be the two states. So I'm making two constants, one is a zero, one is a one, and I know I could use like enumerables or something like that, but that's not me. You know me, I can't be bothered! Refactor this later and we'll put this on. So I'm going to start with the state being 'user' and if the state is 'user', this state equals 'user', I'm going to do something different than if the state is Fourier. And there's only two possibilities here so I could use a Boolean, but there might be other things I want to do with this later. So let's just start with that. And there's no reason for me to do any of this stuff in setup anymore. I do want to have this code for reference and then, I think what I want to do is, when the mouse is pressed, well, the state should be 'user', and if the mouse is, when the mouse is released, these are two global event functions, I want to make the state Fourier. So basically the idea's when I click the mouse, when I'm about to do a drawing, I need to record all of the points. So in 'draw', if the state is 'user', I want to say the current point is 'create a vector', which is 'mouseX', 'mouseY' and then I want to add that to the drawing. And what I would do is always when I press the mouse, reset the drawing array to an empty array. And when I release the mouse, I would calculate the Fourier transform, and I'm going to assume that I can use a skip of one, and this should work! I mean my offsets are going to be wrong, but let's see what happens. So now, if I go here and I hit Refresh, there's nothing. Now, in theory, if I were to draw a circle like this, and release, there we go! There's my drawing. Now it's weirdly down here in a different place than I drew it and I wasn't able to see it while it was drawing, so I need to fix that a little bit. So one thing that I should do is, please let me just minimize this, it keeps coming up, one thing that I should do is probably record the points relative to the center of the window and then also, I also want to be rendering it so I would want to say, for every point, actually, I'm going to say every vector in the drawing, let's actually render it while I'm drawing it. Begin shape, end shape, stroke, let v of drawing, stroke 255, no fill, and just set a vertex to... This'll be like the shortest video ever, compared to the last one. Instead of vertex, so this is me like, when the state is in the user drawing state, I'm going to render all the vertices and there's going to be a little bit of problem with this. Ah, so state actually at the beginning, should be, I just realized, the state should be negative one. The state is something else, it's like the start, and I probably should have some instructions, like 'draw something'. So the state is negative one because I actually don't, and then when I click the mouse, but you see my drawing is up there but this worked. Ah, okay, great. So now, what I want to do is, if I think about this correctly, ah, I just need to, I'm restoring the points relative to the center, and I could use translate or something smarter here but I could just set them when I draw them relative to the center. So now, here I am, I'm going to draw a very elaborate figure '8' pattern, it's like this, and then you can see now there it is and it's a little bit off. It might not be exactly where I drew it, but you could see now, and then, if I can draw a circle, oh, okay, didn't recalculate the Fourier transform. Oh, it just added it to the end. How weird, I thought I re... When I do mouse released, I should redo the drawing. Why didn't this work? Oh, the x's and y's didn't get reset, because I have this weird extra, okay. So that needs to happen, okay, so now if I draw this circle, I get this and it's offset is wrong, and then if I do this, it'll do epicycles for that. Okay. [Bell Ring] Sorry for the weird edit point, I'm jumping in because when I did this coding challenge just a moment ago, I forgot that I also need to reset, in addition to resetting the drawing and the x's and the y's, I also need to reset the time back to zero so it starts at the beginning. And I better clear out that path. So this is pretty awkward, there's probably a nice way to refactor the resetting of everything, but this will make it work with fewer bugs, so thanks. And now the challenge is going to continue. So, let's get the offset stuff actually correct, and so one way to do that would be to actually just, here, have everything be relative to the center. So where do I calculate the Fourier? Where do I draw the Fourier stuff? Here, let's get rid of this '+100'. Okay so now, if I draw very slowly, this circle right here, as soon as I let go, we're going to see it drawing right there. There we go! [Bell Ring] So this coding challenge now complete, let's just make sure I'm going to draw like now, this very, like my drawn version of a sine wave, and there we go. Now my drawing machine is rendering it. Okay so I just wanted to do this to show you at least some creative possibilities here. There's so many things that could be done. Should we factor this to make it better? But I just wanted to do this followup because this might help you start to think of other creative ideas of things you might be able to do with this particular Fourier transform epicycle drawing coding challenge thing. Now, I am going to return at some point in the future and do one more video, where instead of doing the x's and y's separately, I process them together, and that I think will also be something fun and interesting to play around with. So it will need a little bit more sense of how complex numbers work in order to do that so you might want to go, if you haven't watched, watch. Go back and review the implementation of the discrete Fourier transform algorithm because I'm going to basically be redoing that but have the inputs be complex numbers themselves. Okay, thank you very much. See you in the future. Please share with me versions of this that you make and I will see you soon. Good bye! [Cheery Music]
