With timestamps:

00:00 - welcome back in this second video of
00:02 - chapter three i want to look at this
00:04 - idea of a rectangle rotating in a p5.js
00:07 - sketch
00:08 - and think about it in terms of angular
00:11 - motion what do i mean by that well you
00:13 - might recall
00:14 - i spent all this time in chapters one
00:17 - and two
00:17 - talking about this idea of motion right
00:20 - and vectors
00:21 - there is a position vector it is
00:24 - a position in a canvas relative to maybe
00:28 - the orange origin point there is
00:30 - a velocity vector the velocity vector is
00:33 - a vector
00:33 - that when applied to position gives
00:36 - instructions
00:37 - for where the position should move to in
00:39 - the next unit of time
00:41 - so velocity moving this dot from here to
00:43 - there and then acceleration
00:45 - is the change in velocity if the
00:47 - velocity if the
00:48 - object is going to turn or slow down or
00:50 - speed up that's an acceleration
00:52 - so maybe it's turning here and then it
00:54 - gets to be we have this new velocity
00:55 - vector gets to here this is represented
00:57 - as position
00:58 - dot add velocity
01:01 - velocity dot add acceleration we had to
01:04 - do all this extra work to sort of figure
01:06 - out
01:07 - how we would manage all this data
01:09 - manipulate it
01:10 - because these were vectors well i want
01:12 - to do exactly the same thing with angles
01:14 - but in this
01:15 - funny way we're going to make it much
01:16 - simpler we're backing up to
01:18 - our life before vectors where we just
01:20 - use scalar quantities
01:22 - because angle is a scalar value it's one
01:26 - number it's a single value maybe it
01:27 - starts at zero then i might have an
01:29 - angular velocity
01:30 - whatever that might be and an angular
01:33 - acceleration
01:34 - whatever that might be and i don't know
01:35 - what makes sense to call these variables
01:37 - um but i think angle angular angle
01:40 - velocity angle a for angular
01:41 - acceleration that's going to work so
01:43 - this is what i want to first start with
01:44 - and add to this sketch over here back to
01:46 - the sketch i'm going to add a variable
01:48 - for angular velocity
01:50 - i'm going to add a variable for angular
01:51 - acceleration then i'm going to
01:53 - instead of having this hard-coded to
01:55 - change by 0.05
01:57 - i'm going to have the angle change by
01:59 - angular velocity
02:00 - and the angular velocity change by the
02:04 - angular acceleration
02:05 - and when i run the sketch we can see if
02:08 - those values are zero
02:09 - the rectangle is not spinning it's not
02:11 - rotating there's no angular velocity or
02:12 - acceleration
02:13 - i could give it a little angular
02:15 - velocity like point four
02:17 - and we can see oh it's spinning actually
02:18 - that's quite a high value point two it's
02:20 - spinning rather fast again in the
02:22 - clockwise direction
02:23 - if the angular velocity is negative 0.2
02:25 - it's going to then spin in the
02:26 - counterclockwise direction
02:28 - so but it's spinning it's rotating at a
02:31 - constant angular velocity at a constant
02:34 - rate
02:35 - so let's look at what happens when i
02:37 - introduce the idea of angular
02:38 - acceleration
02:39 - i'm going to use a very small number
02:41 - 0.01
02:44 - and see what happens we can see it's
02:46 - quickly speeding up over time and now
02:48 - it's cumulative that angular
02:49 - acceleration 30 frames per second 60
02:51 - frames per second
02:52 - is being added and added and added to
02:54 - that angular velocity so it's
02:55 - spinning out of control the frame rate
02:57 - can't keep up it's actually creating
02:58 - some kind of like
02:59 - unique uh pretty interesting artifact
03:01 - visual artifacts but
03:02 - more likely maybe to demonstrate this
03:04 - i'm going to like give it an even
03:05 - smaller number so we can sort of see
03:07 - it's speeding up
03:08 - over time the first thing that i might
03:11 - want to try to do with this is just
03:13 - map that have that angular acceleration
03:14 - be variable maybe i can map it to the
03:16 - mouse position or
03:17 - some other parameter so that i can it
03:19 - feels like i can apply a force like i'm
03:21 - pushing it to spin further i'm pulling
03:23 - it back to slow down going the other
03:24 - direction etc
03:26 - so let's into in draw i'm going to say
03:28 - angular
03:29 - acceleration i'm going to map just the
03:32 - mouse
03:33 - x position which goes between 0 and
03:35 - width
03:36 - to some value between negative 0.01 and
03:39 - 0.01
03:40 - i'm going to restart the sketch if i
03:42 - could get the mouse in the middle
03:44 - right we can see here that the amount of
03:47 - acceleration is very very very little
03:49 - and as i push it over to the right it's
03:51 - going to cause it to accelerate
03:53 - really fast but i can push it over to
03:55 - the left which is a force going in
03:56 - that's going to slow down and move
03:57 - backwards so you can sort of see
03:59 - how i'm able to interact with it
04:02 - and again these numbers are still quite
04:04 - large but i can almost like move back
04:06 - and forth and get a little bit of like a
04:07 - seesaw like effect
04:10 - it might make sense to put some
04:11 - artificial constraints here
04:13 - so i might be able to say something like
04:14 - constrain angle velocity between
04:17 - negative zero point you know five and
04:19 - zero point five those are still pretty
04:20 - high numbers and let me actually make
04:22 - this a little bit lower
04:24 - just to emphasize that we can see that
04:26 - it's going to max out at a certain
04:28 - amount
04:29 - i might also suggest as an exercise
04:31 - could you do something where you
04:33 - when you click the mouse you grab the
04:35 - rectangle you can
04:36 - spin it manually by moving the mouse
04:38 - around and then could you drag and
04:40 - release it
04:41 - as if you're like throwing it off in a
04:43 - given direction spinning a wheel so to
04:45 - speak that might
04:45 - slow down and stop that would be a great
04:47 - exercise to do i'll provide a solution
04:49 - for that
04:50 - in the description of this video as well
04:52 - i'd also like to take a look back
04:54 - at the gravitational attraction example
04:55 - from the end of chapter two so here
04:57 - there's an array of mover objects
04:59 - each with this motion algorithm of
05:02 - position velocity and acceleration
05:04 - what happens if we add this concept of
05:07 - angular motion to these objects so for
05:10 - example if i were to add variables like
05:12 - this dot
05:13 - angle equals zero this dot angle v
05:17 - equals 0.01 and let me just add all
05:21 - three of them at
05:21 - zero right now i'm also going to need to
05:23 - add the translate
05:25 - function to the show function of these
05:27 - mover objects because i want to rotate
05:29 - them
05:30 - each around their centers
05:35 - oh and i'm like wondering why it's like
05:38 - acting so strange
05:39 - i also need push and pop so that
05:42 - the translation and ultimate rotation of
05:45 - each mover is
05:46 - self-contained and doesn't affect the
05:47 - other ones
05:50 - once again that's explained in more
05:51 - detail in my p5.js transformations
05:53 - videos
05:54 - now even though i could add rotate by
05:57 - this dot
05:57 - angle i'm not even if there it was
06:00 - rotated i'm not going to see anything
06:01 - because these are circles and rotating a
06:03 - circle
06:04 - i won't be able to see any rotation so
06:05 - there's a lot of things i could try i
06:06 - could make them rectangles
06:08 - for right now let me just add a line to
06:09 - them
06:11 - and now you can see there's a little
06:12 - line in each of them that's pointing
06:14 - from the center
06:15 - to the outer edge i could try to add
06:16 - like a ring around them as if they're
06:18 - planets or maybe add moons around them
06:21 - that rotate there's so many like
06:22 - interesting possibilities but i'm just
06:24 - going to leave something simple like
06:25 - that
06:26 - and then what would happen now if i were
06:29 - to
06:29 - add in some angular velocity well first
06:32 - of all i need to add the algorithm
06:34 - for angular motion in the update update
06:36 - function
06:37 - so that should be
06:42 - so just like i have acceleration into
06:44 - velocity velocity into position i have
06:47 - angular acceleration of the angular
06:48 - velocity and angular velocity into the
06:50 - actual angle itself
06:51 - so let's now give them just all an
06:54 - arbitrary
06:54 - small angular velocity and we can see
06:58 - they are all now rotating exactly the
07:01 - same
07:02 - speed in the same direction how about i
07:04 - try
07:05 - setting the angular acceleration equal
07:08 - to
07:09 - a value related to its actual
07:11 - acceleration
07:12 - itself so maybe i'll just use the x
07:14 - value for right now
07:17 - i'm sitting here wondering why nothing
07:19 - has changed i realize i put this
07:21 - right after i set the acceleration back
07:23 - to zero which is what happens at the end
07:25 - of every frame
07:25 - so this should really happen now at the
07:27 - very end of update now i have a few
07:29 - things
07:30 - going on i have the algorithm to update
07:31 - velocity and position as well as the
07:33 - algorithms
07:34 - update angular velocity and angle and
07:36 - then right in between
07:38 - i'm going to set the angle acceleration
07:41 - very arbitrarily to the acceleration's x
07:43 - value and then at the very end
07:45 - reset the acceleration values back to
07:47 - zero let's run the sketch again and we
07:49 - can see okay
07:50 - there are things that are spinning now
07:52 - they're kind of spinning super out of
07:53 - control
07:54 - because that x value of the of the
07:56 - acceleration is quite
07:58 - high let's try something like just
08:00 - dividing it by
08:01 - 50. and we can see there's a certain
08:03 - quality now to how these objects rotate
08:06 - as they move about the canvas itself now
08:09 - is it a realistic simulation is there
08:12 - some actual like
08:14 - thing that i'm modeling here in terms of
08:15 - how an object might actually spin
08:17 - as it's moving not even remotely close
08:20 - but i am experimenting visually here and
08:23 - if i were to
08:24 - have objects that were drawn in a
08:25 - different way maybe leaving trails
08:27 - there's a lot of i think sort of visual
08:29 - possibilities that might come out of
08:31 - even something as arbitrary as just
08:33 - setting the angular acceleration to the
08:36 - acceleration's x value but you know
08:38 - there's no reason why i couldn't have
08:39 - made this
08:40 - the y value or some other aspect of the
08:42 - system or it's
08:43 - the velocity itself or where it is on
08:44 - the screen or what color it is
08:46 - there's so many possibilities there so
08:49 - this i would also really encourage you
08:51 - to explore
08:52 - what are some ways that you can control
08:56 - um and calculate angular motion
08:59 - for an object that's in whatever system
09:01 - you've built whether it's
09:02 - gravitational attraction you know if you
09:04 - had something that's more
09:06 - realistic like you know a game where you
09:08 - were trying to
09:09 - throw a ball through a hoop like as you
09:11 - throw it
09:12 - which way would it spin how would it
09:14 - spin how might it slow down or speed up
09:16 - in its spinning so i hope you try out
09:17 - some of these ideas please share them
09:19 - with me
09:19 - find the link to where you can share
09:20 - them in the video's description and i
09:22 - will see you in the next video where i
09:24 - will be talking about
09:26 - okay i remembered in the next video i'm
09:27 - gonna start looking at the trigonometric
09:29 - functions
09:30 - sine cosine and tangent
09:33 - a bit more with more specifics and see
09:35 - how those can be applied
09:36 - to various examples in p5.js themselves
09:39 - okay so see you there
09:40 - and have a good day
09:52 - you

Cleaned transcript:

welcome back in this second video of chapter three i want to look at this idea of a rectangle rotating in a p5.js sketch and think about it in terms of angular motion what do i mean by that well you might recall i spent all this time in chapters one and two talking about this idea of motion right and vectors there is a position vector it is a position in a canvas relative to maybe the orange origin point there is a velocity vector the velocity vector is a vector that when applied to position gives instructions for where the position should move to in the next unit of time so velocity moving this dot from here to there and then acceleration is the change in velocity if the velocity if the object is going to turn or slow down or speed up that's an acceleration so maybe it's turning here and then it gets to be we have this new velocity vector gets to here this is represented as position dot add velocity velocity dot add acceleration we had to do all this extra work to sort of figure out how we would manage all this data manipulate it because these were vectors well i want to do exactly the same thing with angles but in this funny way we're going to make it much simpler we're backing up to our life before vectors where we just use scalar quantities because angle is a scalar value it's one number it's a single value maybe it starts at zero then i might have an angular velocity whatever that might be and an angular acceleration whatever that might be and i don't know what makes sense to call these variables um but i think angle angular angle velocity angle a for angular acceleration that's going to work so this is what i want to first start with and add to this sketch over here back to the sketch i'm going to add a variable for angular velocity i'm going to add a variable for angular acceleration then i'm going to instead of having this hardcoded to change by 0.05 i'm going to have the angle change by angular velocity and the angular velocity change by the angular acceleration and when i run the sketch we can see if those values are zero the rectangle is not spinning it's not rotating there's no angular velocity or acceleration i could give it a little angular velocity like point four and we can see oh it's spinning actually that's quite a high value point two it's spinning rather fast again in the clockwise direction if the angular velocity is negative 0.2 it's going to then spin in the counterclockwise direction so but it's spinning it's rotating at a constant angular velocity at a constant rate so let's look at what happens when i introduce the idea of angular acceleration i'm going to use a very small number 0.01 and see what happens we can see it's quickly speeding up over time and now it's cumulative that angular acceleration 30 frames per second 60 frames per second is being added and added and added to that angular velocity so it's spinning out of control the frame rate can't keep up it's actually creating some kind of like unique uh pretty interesting artifact visual artifacts but more likely maybe to demonstrate this i'm going to like give it an even smaller number so we can sort of see it's speeding up over time the first thing that i might want to try to do with this is just map that have that angular acceleration be variable maybe i can map it to the mouse position or some other parameter so that i can it feels like i can apply a force like i'm pushing it to spin further i'm pulling it back to slow down going the other direction etc so let's into in draw i'm going to say angular acceleration i'm going to map just the mouse x position which goes between 0 and width to some value between negative 0.01 and 0.01 i'm going to restart the sketch if i could get the mouse in the middle right we can see here that the amount of acceleration is very very very little and as i push it over to the right it's going to cause it to accelerate really fast but i can push it over to the left which is a force going in that's going to slow down and move backwards so you can sort of see how i'm able to interact with it and again these numbers are still quite large but i can almost like move back and forth and get a little bit of like a seesaw like effect it might make sense to put some artificial constraints here so i might be able to say something like constrain angle velocity between negative zero point you know five and zero point five those are still pretty high numbers and let me actually make this a little bit lower just to emphasize that we can see that it's going to max out at a certain amount i might also suggest as an exercise could you do something where you when you click the mouse you grab the rectangle you can spin it manually by moving the mouse around and then could you drag and release it as if you're like throwing it off in a given direction spinning a wheel so to speak that might slow down and stop that would be a great exercise to do i'll provide a solution for that in the description of this video as well i'd also like to take a look back at the gravitational attraction example from the end of chapter two so here there's an array of mover objects each with this motion algorithm of position velocity and acceleration what happens if we add this concept of angular motion to these objects so for example if i were to add variables like this dot angle equals zero this dot angle v equals 0.01 and let me just add all three of them at zero right now i'm also going to need to add the translate function to the show function of these mover objects because i want to rotate them each around their centers oh and i'm like wondering why it's like acting so strange i also need push and pop so that the translation and ultimate rotation of each mover is selfcontained and doesn't affect the other ones once again that's explained in more detail in my p5.js transformations videos now even though i could add rotate by this dot angle i'm not even if there it was rotated i'm not going to see anything because these are circles and rotating a circle i won't be able to see any rotation so there's a lot of things i could try i could make them rectangles for right now let me just add a line to them and now you can see there's a little line in each of them that's pointing from the center to the outer edge i could try to add like a ring around them as if they're planets or maybe add moons around them that rotate there's so many like interesting possibilities but i'm just going to leave something simple like that and then what would happen now if i were to add in some angular velocity well first of all i need to add the algorithm for angular motion in the update update function so that should be so just like i have acceleration into velocity velocity into position i have angular acceleration of the angular velocity and angular velocity into the actual angle itself so let's now give them just all an arbitrary small angular velocity and we can see they are all now rotating exactly the same speed in the same direction how about i try setting the angular acceleration equal to a value related to its actual acceleration itself so maybe i'll just use the x value for right now i'm sitting here wondering why nothing has changed i realize i put this right after i set the acceleration back to zero which is what happens at the end of every frame so this should really happen now at the very end of update now i have a few things going on i have the algorithm to update velocity and position as well as the algorithms update angular velocity and angle and then right in between i'm going to set the angle acceleration very arbitrarily to the acceleration's x value and then at the very end reset the acceleration values back to zero let's run the sketch again and we can see okay there are things that are spinning now they're kind of spinning super out of control because that x value of the of the acceleration is quite high let's try something like just dividing it by 50. and we can see there's a certain quality now to how these objects rotate as they move about the canvas itself now is it a realistic simulation is there some actual like thing that i'm modeling here in terms of how an object might actually spin as it's moving not even remotely close but i am experimenting visually here and if i were to have objects that were drawn in a different way maybe leaving trails there's a lot of i think sort of visual possibilities that might come out of even something as arbitrary as just setting the angular acceleration to the acceleration's x value but you know there's no reason why i couldn't have made this the y value or some other aspect of the system or it's the velocity itself or where it is on the screen or what color it is there's so many possibilities there so this i would also really encourage you to explore what are some ways that you can control um and calculate angular motion for an object that's in whatever system you've built whether it's gravitational attraction you know if you had something that's more realistic like you know a game where you were trying to throw a ball through a hoop like as you throw it which way would it spin how would it spin how might it slow down or speed up in its spinning so i hope you try out some of these ideas please share them with me find the link to where you can share them in the video's description and i will see you in the next video where i will be talking about okay i remembered in the next video i'm gonna start looking at the trigonometric functions sine cosine and tangent a bit more with more specifics and see how those can be applied to various examples in p5.js themselves okay so see you there and have a good day you
