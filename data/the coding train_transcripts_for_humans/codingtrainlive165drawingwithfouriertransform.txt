With timestamps:

00:00 - [Music]
00:04 - hello good morning hello good morning
00:08 - I'm saying that twice because I think
00:10 - the live stream is beginning I'm gonna
00:13 - start hopefully in about 10 to 20
00:15 - seconds seeing chat messages saying
00:17 - hello scrolling by I'm gonna post a
00:21 - quick note here saying live now and I
00:26 - see the messages saying hello okay like
00:28 - right here this is a new shirt you might
00:31 - not see me wear this to it before this
00:33 - weird okay welcome to another coding
00:40 - training today is Wednesday January 16th
00:43 - it's a bit of a strange day for a coding
00:46 - train episode but it is the day that it
00:48 - is happening and before I begin talking
00:51 - about what it is that I'm planning to
00:53 - code today I just want to go over some
00:56 - plans that I have for this new year that
00:58 - is 2019 so hello welcome happy new year
01:01 - so I have some goals and desires and
01:05 - hopes and dreams and fears for this year
01:07 - it's a little bit of a slow start I had
01:10 - a wonderful time I'm thank you to the
01:13 - tank Paris and grow Paris for hosting me
01:15 - in Paris France for a workshop last
01:18 - weekend I really enjoyed that and
01:21 - getting to meet some of you maybe maybe
01:23 - some of you who are watching this live
01:24 - right now if you if you were at the
01:27 - workshop in Paris please say hello in
01:29 - the chat and so that was away for a
01:33 - while I'm back and then oh it's so
01:35 - exciting tomorrow I leave for Los
01:39 - Angeles to attend processing Community
01:44 - Day so let me pull this up here
01:47 - processing community de Los Angeles so
01:49 - this is happening this Saturday maybe
01:51 - some of you are watching this right now
01:52 - will be in attendance and I will get to
01:54 - see you I will be there with my stickers
01:56 - I would love to say hello to as many of
01:58 - you as possible so please I think
02:01 - there's still tickets available if
02:02 - you're in the Los Angeles area but I'll
02:04 - also note that in addition to pressing
02:07 - community De Los Angeles there is
02:09 - processing Community Day worldwide
02:11 - and so here we can see a map of all the
02:14 - different processing community days that
02:16 - are scheduled in the next month or so
02:18 - around the world so I encourage you to
02:21 - find your local one and attend if you
02:24 - can and participate
02:25 - I will also be at processing community
02:27 - in New York which I believe is February
02:29 - 9th if I have that right
02:31 - and just recently I think if we go to
02:35 - twitter.com processing India maybe is
02:40 - that the Twitter handle yeah look there
02:42 - I am I won't be unfortunately at
02:46 - processing day in Bangalore I think
02:48 - there are three processing communities
02:50 - in India but this particular one in
02:52 - Bangalore just released a I don't know
02:55 - if that I don't know if it's just test
02:59 - this little video of me saying hello
03:00 - Bangalore along with some other people
03:02 - doing that as well alright so I'm gonna
03:07 - get my haircut later today so get used
03:09 - to this nice long that longish hair and
03:12 - beard it's time for processing Community
03:14 - Day I must get myself cleaned up to look
03:15 - like a professional person who knows
03:17 - what they're doing which I am absolutely
03:19 - not I banged on the desk and the HDMI
03:23 - connection went a little haywire okay
03:25 - now I have some other things that I want
03:30 - to mention but I'm gonna still live
03:35 - streaming or and I okay ah yes
03:39 - so 2019 what is happening in 2019 oh so
03:44 - many things so I will be continuing to
03:47 - make more videos about tensorflow Jas
03:49 - and ml5 jazz which are both machine
03:52 - learning libraries in JavaScript I will
03:55 - be coming back to that as time goes on
03:58 - that won't be part of today
04:00 - so I things on the horizon are more word
04:03 - to vac more I want to do word Tyvek more
04:08 - sketch RNN as in terms of different pre
04:11 - train models I want to look at K and an
04:13 - K nearest neighbor classification and
04:15 - and more so those are things that are
04:17 - coming in terms
04:18 - the machine learning stuff that I plan
04:19 - to do I also if I've been segment for
04:23 - the last three years and working on
04:25 - updating the nature of code book to be
04:28 - written with JavaScript and p5.js as
04:31 - well as some new material for that so
04:33 - stay tuned to be on the lookout for that
04:35 - then the other thing that I'm doing and
04:37 - I just put this together this morning if
04:44 - I go to github.com slash coding train I
04:47 - forget what the repo is called already I
04:50 - didn't intro to data api's and
04:52 - JavaScript so I am planning a new
04:56 - playlist I've made I've made videos on
05:00 - this topic before but they are somewhat
05:03 - out-of-date and I think I want to take a
05:04 - new approach here and the title for this
05:06 - playlist is called working with data API
05:08 - has a Java Script repeating myself this
05:11 - is a working document outlining future
05:13 - plans for a new coding train playlist
05:14 - working with data in API so JavaScript
05:16 - if I keep saying the name of the title
05:19 - maybe what it is I'm actually gonna do
05:21 - in this series this course is for
05:24 - aspiring developers who want to learn
05:26 - about how to work with data and web
05:27 - applications how do you find collect
05:29 - clean analyze and visualize data I'll
05:32 - start with the basics of data formats
05:33 - CSV XML and JSON I'll then cover how to
05:35 - use promises and the JavaScript fetch
05:37 - function to load data asynchronously on
05:39 - a web page I'll do case studies of
05:41 - several api's and explain how to sign up
05:43 - an authenticate make a request and load
05:44 - the data and we think this could I wrote
05:46 - this at one point and I'm like reminding
05:47 - myself of it now I'll look at how this
05:49 - works for both client-side and
05:50 - server-side I'll demonstrate how to
05:52 - visualize the data using html5 canvas
05:53 - and p5 GS and the course will end with a
05:56 - demonstration for how to analyze data
05:57 - using modern machine learning techniques
05:59 - such as classification regression and
06:01 - clustering wow that is very ambitious
06:04 - I'm gonna have this like sample lesson
06:06 - idea so I don't this is something I'd
06:08 - like to do with with planning and I'd
06:10 - actually like to make examples in
06:12 - advance and have an outline and sort of
06:14 - a sense and I'm hoping this will be like
06:16 - 10 to 15 videos I know so I see Simon
06:21 - tiger by the way in the patrons black
06:23 - channel saying hang on and I know
06:24 - exactly was gonna write you can say you
06:26 - already have this playlist I can say it
06:29 - before he types it of course he's
06:31 - but this is going to be a new
06:33 - reimagining of that content I'm gonna do
06:35 - look at new different api's and new
06:37 - stuff and think about it in because a
06:39 - lot of that stuff is out of date and
06:40 - things have changed okay
06:42 - now what I want to just look really
06:44 - quickly I just want to remember I just
06:49 - have to look up something because I have
06:50 - to mention something but I forgot
06:52 - exactly I want to make sure I look at
06:53 - the guidelines okay all right okay all
07:01 - right so why am I doing this well I'm
07:03 - doing this for a number of reasons I
07:04 - think this is an interesting and useful
07:05 - topic but I'm also doing this through a
07:08 - learning incentive grant from YouTube
07:10 - itself so thank you to youtube and
07:12 - google for supporting this project I
07:15 - will be I'm my plan is to start these
07:18 - videos maybe at the end of January
07:20 - beginning of February so I am asking you
07:23 - the community to help me organize the
07:25 - content for this so you can file issues
07:28 - here you could make pull requests
07:29 - there's very little here I'm gonna start
07:31 - building out an outline and making a
07:33 - plan for this and all the code examples
07:34 - will also end up in theory in this
07:36 - repository as well so this is something
07:39 - I'd like to do more planning and for and
07:43 - it'll be a little less of the usual sort
07:45 - of like live coding I can't figure
07:47 - anything out stick and so I'm looking
07:51 - for your your ideas and suggestions
07:54 - there okay I wanted to mention that
07:58 - that's so that's the main thing so
08:00 - coding train will be coming to you I
08:02 - don't know like I'm gonna try to have a
08:03 - regular especially for this what's
08:07 - essentially like a new course that I'm
08:08 - gonna try to teach using these of
08:10 - YouTube videos my goal is to have a
08:13 - dedicated weekly time that I'm
08:16 - presenting on this and I haven't figured
08:18 - out what that time will be but I can
08:20 - tell you that the after today the next
08:21 - livestream will be Friday I believe
08:25 - that's January 25th yes
08:28 - so I'm live-streaming today and then
08:30 - next Friday January 25th and then the
08:33 - semester at New York University ITP to
08:35 - school the arts begins and I will
08:37 - establish a weekly time okay
08:46 - okay now this brings me to today if I
08:51 - can get through today if I can make what
08:54 - I want to make today in the next two
08:56 - hours I will be a happy camper and I
08:59 - will ride off into the sunset which is
09:02 - more like an airplane to Los Angeles for
09:04 - processing Community Day feeling
09:06 - fulfilled satisfied but more likely
09:10 - everything will go wrong I'll have lots
09:12 - of problems I will fail and you will
09:14 - learn something possibly from watching
09:17 - that happen now what is it that I'm
09:19 - going to do so what I am going to do is
09:24 - not a new idea and it has and it's an
09:28 - idea that I've had in the back of my
09:29 - mind for quite some time and it recently
09:33 - came to the forefront of my mind again
09:35 - when smartereveryday released the video
09:39 - for EI series smarter every day so let
09:45 - me bring that up so you I'm not gonna
09:46 - click on this but this is what is a
09:48 - Fourier series explained by drawing
09:49 - circles smartereveryday
09:51 - so I went and made a coding challenge
09:54 - which is this coding challenge sub hum
10:04 - in the chat is asking how are you back
10:05 - in your studio weren't you in Bangalore
10:07 - like two hours ago
10:09 - so there's this thing called the
10:12 - internet at video I was not in Bangalore
10:15 - I just said hello Bangalore from a video
10:18 - taken on this particular laptop with
10:20 - this particular webcam from New York
10:22 - City I wish I had been in Bangalore so
10:28 - this is the Fourier series which takes a
10:32 - square wave pattern breaks it down what
10:36 - doesn't it uses a Fourier series to
10:40 - visualize that to add a bunch of
10:42 - different wave patterns together at
10:44 - various frequencies and amplitudes and
10:47 - add and to reconstruct the square wave
10:53 - so that's what I did before now if you
10:56 - watch the whole smartereveryday video
10:59 - oops I'm which was is here you will see
11:02 - that towards the end I should be able to
11:06 - find this bill where's that Turkish
11:12 - actually I have all these in my whole
11:15 - lot just want to get all the links I
11:19 - need here this is my that here we know
11:35 - this is it yes sorry I was trying to
11:39 - find so this is the article about the
11:42 - Fourier series from this Turkish website
11:47 - which I learned recently translates to
11:50 - science is awesome
11:52 - which I love I think maybe there might
11:54 - be some more nuance to what the actual
11:56 - translation is but that's the gist of it
11:58 - and I don't know if this I can't recall
12:01 - if this article gets to it but by the a
12:05 - doesn't actually but as part of the
12:07 - smartereveryday video the researcher
12:11 - Doga created a used a fourier transform
12:17 - which is a way of taking a particular
12:19 - signal a pattern and breaking it into
12:22 - its frequency components to render the
12:27 - smartereveryday logo and this is
12:30 - something that's been done many many
12:32 - times by many youtube births more
12:35 - interesting and smarter and clever than
12:38 - I am such as math a logger Fourier so
12:43 - there's this particular epicycles
12:45 - Fourier series and homers orbit I highly
12:47 - recommend this particular video and this
12:50 - particular YouTube channel is fantastic
12:53 - then there is also there was what is the
12:56 - one that was it's like it has like a
12:59 - golden in it or something what the other
13:03 - YouTube video that let's see
13:05 - 48 lets 48
13:10 - transform YouTube drawing I don't know
13:15 - why I'm thinking that word gold is in
13:16 - there somewhere I don't think it is
13:19 - anyway there's a youtuber someone's
13:27 - gonna tell me hold on let me get to the
13:28 - slack channel gold plated goof okay
13:36 - thank you
13:36 - I knew I watched something like a month
13:39 - ago there is also there it is oh look at
13:43 - this gold plated coupe Fourier analysis
13:45 - for the rest of us so I am going to
13:49 - let's pull this up hi everyone okay
13:58 - let's let's let's put this here let's
14:03 - get this over here
14:04 - let's get that matha lager let's get
14:18 - this here okay so these are and then of
14:21 - course of course it goes without saying
14:23 - there is what is like you know for me
14:27 - the canonical explanation of what is a
14:30 - Fourier transform of the three Bruhl ooh
14:32 - round three blue one Brown video but
14:34 - what is the Fourier transform a visual
14:36 - introduction so this is all of my
14:38 - background and actually on the flight on
14:44 - the flight back from France I worked out
14:49 - my own version of this in a slightly
14:52 - simpler more simplistic way which used a
14:57 - basic 1 dimensional Fourier transform to
15:04 - to process the X's and and the Y's of a
15:09 - path separately and visualize those X's
15:14 - and Y's as a series of circular
15:18 - epicycles and to render this particular
15:22 - dawn and this particular
15:23 - is the coding terrain logo transformed
15:27 - into a continuous path which came via
15:30 - Tom fifthly a who I met in Paris so this
15:34 - is exactly what I want to build today on
15:37 - the coding train so I want to do it this
15:39 - way first separating out the X's and Y's
15:42 - separately and then I will revisit it I
15:45 - think to do it with them together and
15:49 - this has to do with the way the sort of
15:50 - complex numbers work and I'm gonna my
15:52 - plan for today is to really like hand
15:55 - wave all of the math I mean I'm gonna
15:58 - implement all the math in the code but
16:00 - the explanations for why the math works
16:02 - that way and deriving the math and
16:04 - gaining an intuition of the math I'm
16:05 - going to refer to those three videos
16:08 - three blue one brown matha lager and
16:10 - gold-plated goose as reference points
16:12 - and I will just simply implement this
16:17 - basically they write the code for this
16:19 - exact equation here which is the
16:21 - discrete Fourier transform in JavaScript
16:26 - so I'm gonna what I'm gonna do so and I
16:32 - think that I will begin with this as my
16:37 - code base I think I want to simplify it
16:43 - I'm trying to decide whether it makes
16:46 - sense for me to start over the thing is
16:47 - I'm gonna use exactly this so I think it
16:51 - makes sense for me to build off of it
16:53 - rather than to start over from scratch
16:57 - I'm trying to think about this I'm also
16:59 - trying to decide whether I should do a
17:02 - separate video that just writes this
17:06 - equation in into a JavaScript function
17:08 - and then I'm always struggling with this
17:15 - multi-part single you know what I'm
17:17 - gonna do here's what I'm gonna do
17:19 - I can never figure out what to do to
17:22 - make multi-part single part so I'm just
17:24 - gonna do it this is a live stream here
17:27 - we are I'm going to live stream it I'm
17:28 - going to do it in the order that I would
17:30 - do it if I were just on the plane trying
17:33 - to figure this out building off of the
17:36 - this coding challenge that I had then
17:38 - when we get to the end I will reconsider
17:41 - whether any of that how how that might
17:46 - necessitate breaking up and then I can
17:48 - obviously do some intro or outro
17:51 - explanations that matsya can put
17:53 - together or later so as you are watching
17:55 - as you are watching this today please
17:59 - help me keep track of like how long it's
18:02 - been for the actual substantive content
18:04 - and whether it makes sense you sort of
18:07 - note as you imagine the sort of edited
18:09 - version of this coming out later as a
18:10 - coding challenge if you imagine it be
18:12 - broken into separate parts alright any
18:16 - questions or comments before I begin I'm
18:24 - happy with this being like a final
18:26 - edited version of this being an hour
18:28 - because this is a complex enough thing
18:30 - to work all the way out but I don't want
18:32 - I my goal is for the coding challenge
18:34 - videos to not be longer than an hour
18:37 - and at the sweet spot is somewhere
18:38 - between 20 and 40 minutes ok see
18:46 - Benedict beautiful pleat check this out
18:48 - Fourier series Serge Sh well that sounds
18:52 - like a reasonable URL that I can type in
18:56 - without no cool oh you know what I
19:04 - should do before this is you know what I
19:05 - should do before I forgot before I do
19:07 - any of this let me go to the coding
19:10 - train calm and go to coding challenges
19:14 - and let's look at well I think I might
19:19 - have already how did I already do this
19:20 - let's look at some of these community
19:22 - contributions I sort of have a memory of
19:24 - clicking through some of these already
19:26 - but let's do that let's show by the way
19:32 - so if you weren't aware every coding
19:34 - challenge video has a corresponding web
19:35 - page on the coding train comm and there
19:38 - is a process by which you can add your
19:40 - own version it looks like there's a
19:43 - little typo here which could get fixed
19:45 - and a little link about how to do that
19:47 - requires some knowledge of how git and
19:50 - github
19:50 - but we're here to help there are
19:52 - wonderful volunteers who helped to
19:54 - maintain this website thank you so much
19:57 - to those people and gruesel house have
20:03 - most recently has been really doing a
20:05 - wonderful job of merging and tracking
20:07 - all these contributions so let's look at
20:11 - some of these and so I'm sorry I'm not
20:14 - credit you know I guess I should let's
20:16 - do them one at a time because so let's
20:20 - look at the square and soft tooth wave
20:22 - with sliders by lucky bonnet so if we
20:27 - look at this one okay so we can see this
20:29 - is cool ah so this is nice because it
20:31 - lets you like change which wave you want
20:34 - change the speed the number of
20:36 - iterations of the Fourier series and the
20:39 - oh the radius that is while so this is
20:41 - fun so a lot more interactive features
20:43 - than I had let's look at who now it's
20:50 - sound oh cool what all right I don't
20:54 - know what's going on here square wave
20:56 - whoa volume control I don't hear any
21:00 - sound I don't know oh it's actually
21:13 - playing the sound of the wave pattern
21:17 - what the this is wild
21:20 - this is so cool great words gate work
21:23 - stellar tux okay rainbow rainbow Fourier
21:27 - series
21:29 - Juan Carlos Ponce come look at that that
21:33 - is beautiful look at all these little
21:34 - sliders oh I can actually individually
21:37 - control the various like epicycles that
21:40 - is crazy as fun let's look at Fourier
21:46 - transform processing class so
21:48 - unfortunately this is great to see I'm
21:50 - not going to run this right now
21:53 - but you can see if you're looking for a
21:55 - processing port there you go square wave
21:59 - Fourier transform animation Oh
22:03 - not pronouncing matha lager correctly
22:05 - methyl Luger I better get that right
22:09 - before I start the rep before I like
22:11 - officially reference it okay this is the
22:13 - lovely Convergys animation of square
22:16 - toothed Fourier series lovely and then
22:22 - did I click on this one I'm sorry I'm
22:24 - confused
22:25 - yes oh look at this Wow okay this is
22:28 - crazy by the way because look at this I
22:29 - guess I could write the formula in here
22:32 - and it'll be like live interpreted
22:36 - submit yeah that's crazy
22:39 - and I can do like the number of terms I
22:41 - can do a custom wave a triangle wave
22:43 - line I can just pick colors this is
22:46 - fantastic so you could see look at all
22:48 - of these amazing variations on the
22:52 - Fourier series video all right watch the
22:56 - math okay hold on let's see let's see
22:58 - somebody in the let's let's let's figure
23:01 - out the correct pronunciation of math a
23:03 - log log I'm just gonna watch it over
23:08 - here on my invisible computer whoops
23:13 - unfortunately well by the way I'm wet
23:30 - the only thing that I ended up clicking
23:31 - on is this awesome times tables video
23:34 - all right wait I need to figure out how
23:37 - to pronounce this there must be what's a
23:46 - video that I can watch where the channel
23:48 - name is pronounced
23:51 - [Music]
23:56 - all right so the other day I said with
23:58 - my kids
24:03 - this is not working very well for ei
24:09 - epicycles math oh is it in this video
24:28 - mythology mythology mythology math
24:33 - knowledge er welcome to another this is
24:36 - not a mythology video but that was a
24:39 - mythology video mythology mythology
24:41 - mythology alright I think I think I will
24:53 - um get begin this is also useful I think
25:03 - I already referenced this one though so
25:09 - and this is by the way this is also an
25:12 - excellent reference which I will refer
25:16 - to in a second okay all right
25:22 - math Allah Dermatology mythology
25:25 - mythology mythology let's cycle the
25:30 - cameras let me make sure I have a
25:36 - whiteboard camera working
25:38 - nope wait why is it is weird what is
25:48 - going on that is the weirdest thing
25:53 - hold on the whiteboard scene is like for
25:59 - some reason ah there we go okay that's a
26:03 - slightly better sign that it's now black
26:05 - you would think that I would check these
26:08 - things before I begin but if you've
26:12 - watched the coding train long enough
26:15 - shoot okay so hold on this unfortunately
26:18 - you're seeing I know you're seeing a
26:20 - blank black I'm gonna hope there we go
26:25 - loose cable loose cable hello this is
26:30 - working now and ooh look at the terrible
26:33 - glare where's that glare coming from is
26:35 - it this light yes
26:38 - so I guess I have to point that more
26:41 - like over there and then is this marker
26:43 - a reasonable marker I'm going to draw
26:45 - off of your view just sort of see no
26:47 - it's not it's a terrible marker have a
26:51 - bin of markers here it's a fine one this
26:59 - is this is a beautiful marker I should
27:07 - build switch now back and forth yeah and
27:10 - by the way if you if you recall my
27:14 - holiday special I still have this
27:17 - ukulele but it's not tuned try to tune
27:19 - it real quick because maybe somebody
27:22 - will like to write me a Fourier
27:23 - transform song to the tune of something
27:26 - with easy ukulele chords I better not I
27:30 - better not waste time doing this right
27:32 - now come back to that if necessary
27:39 - Julius asks why don't you make video
27:41 - games anymore so this is my plan for the
27:44 - spring this is what I'm hoping to do in
27:45 - 2019
27:46 - my goal is to have these sort of like
27:49 - plans sessions to do this new playlist
27:51 - about data and api's and then a SEP
27:55 - other days do more of these kind of
27:57 - goofy coding challenges some of which
27:59 - things like make a Rubik's Cube make
28:01 - Tetris these things that get requested a
28:03 - lot that I would like to try to do so
28:04 - we'll see so you you might be in for a
28:06 - couple some weeks where I have two live
28:08 - streams in one week all right I am now
28:15 - ready to begin okay
28:34 - that's the sound of me blowing my nose
28:37 - okay so let me just get one more some I
28:53 - would like to go through some of the
28:54 - community contributions for some of
28:55 - these other more recent coding
28:57 - challenges but I'm going to I'm going to
29:06 - hold off on that okay
29:18 - what shop what is this what am i calling
29:19 - this Fourier transform drawing guess
29:27 - again I could call this like discrete
29:28 - Fourier transform epicycle drawing
29:31 - something or other
29:42 - okay have a stop Blake who's stalling
29:49 - check my email check my Twitter no no no
29:52 - I'm just kidding here we go
29:53 - let's do it let's go like Voyager math
29:58 - Allah
29:59 - mythology need a checklist Oh
30:05 - ooh alka suggesting the checklist when
30:09 - when did that suggestion coming just a
30:10 - couple minutes ago yeah that's a thing
30:15 - from CJ in the end the coding garden
30:17 - I'll think about that for next time
30:18 - let me go back to my just winging it
30:20 - thing okay here we go
30:30 - [Applause]
30:34 - hello welcome to coding challenge
30:37 - discrete Fourier transforms to somehow
30:40 - make this so I was recently on an
30:42 - airplane and I had quite a bit of time
30:44 - and I made this and this is what this is
30:48 - doing here as it is taking this path
30:50 - this coding train logo thank you to Tom
30:54 - fref a who provided this on this coding
30:57 - train logo as a continuous path and
30:59 - taking the two signals of that path all
31:02 - of the X's is really like a signal all
31:04 - the Y's it's like a signal and up using
31:07 - something called a Fourier transform to
31:09 - take that signal and break it down into
31:13 - a bunch of wave patterns and then those
31:16 - wave patterns are visualized with a
31:18 - sequence of rotating circles and then
31:22 - that is ultimately the endpoint of those
31:25 - rotating circles sometimes refer goes
31:26 - like epicycles is used to draw the path
31:30 - the X's and the
31:31 - of this particular logo boy if I don't
31:34 - know if I was able to get through
31:35 - explaining what's going on here but this
31:37 - is what I'm going to build in this seven
31:40 - hour and 32 minute video I don't know
31:42 - how long it's gonna be but it's gonna be
31:43 - quite long because there's a lot of
31:44 - components notice now the good news is
31:46 - that I have somewhere to start from so
31:49 - if you've watched some of my videos
31:51 - before you may remember me from coding
31:53 - challenge number 125 Fourier series this
31:57 - looks quite similar this was a coding
31:59 - challenge where I used a 48 series I
32:02 - sort of pre defined mathematical series
32:06 - of wave patterns when summed together to
32:09 - get a square wave so while this is like
32:12 - a sort of like known famous Fourier
32:14 - series I'm like what I'm going to do
32:20 - which is different so let me get bring
32:21 - over the whiteboard let me talk about
32:23 - this okay
32:23 - so the idea of a Fourier series is okay
32:27 - let's take all of these wave patterns of
32:30 - various frequencies and amplitudes add
32:33 - them together and now I'm not saying
32:35 - these actually add together to that
32:37 - pattern but to get to converge to like
32:42 - the square wave this is what's known as
32:44 - a Fourier series in this video what I
32:48 - want to do is instead a Fourier
32:52 - transform I want to go in the other
32:55 - direction I happen to have some
32:58 - arbitrary signal which can be expressed
33:01 - as a wave pattern and I want to be able
33:04 - to take this and subdivide it into
33:08 - basically transform it to a bunch of
33:12 - different wave patterns with varying
33:15 - frequencies amplitudes and there's
33:16 - something called a phase here which is
33:18 - gonna be important this sort of like the
33:19 - offset of where the wave pattern starts
33:23 - if you're like what are you even talking
33:26 - about I am going to I what I would
33:29 - suggest is pause this video right now
33:30 - and look in the description so there are
33:32 - three there's tons of resources on this
33:35 - all over the world and Internet but
33:37 - there's three particular videos that I
33:39 - have watched in the last few months when
33:42 - thinking about this
33:43 - that I'm going to refer you to right now
33:46 - one is this three blue one brown video
33:52 - I'm sorry sorry about that I don't know
33:59 - if I don't really like this explanation
34:00 - but one is this three blue one Brown
34:08 - video but what is the Fourier transform
34:11 - this video will look at give you a kind
34:15 - of animated visual sense of what's
34:18 - actually happening in a Fourier
34:20 - transform which by the way well I'm
34:22 - gonna come back to what I was about to
34:23 - say we buy the wait a second then
34:25 - because it is the reason why I'm having
34:27 - kind of trouble explaining this this
34:29 - something I want to just mention hold
34:30 - hold that thought
34:31 - me you are keep watching or not whatever
34:34 - there's also this particular video by
34:38 - gold-plated goof which does exactly the
34:41 - same thing right by the end of the video
34:43 - renders a path through a set of circular
34:45 - epicycles Fourier analysis for the rest
34:48 - of us this is if you really want to die
34:51 - more deeply into the mathematics behind
34:53 - a Fourier transform this video I would
34:57 - suggest as well as the mythology video
34:59 - epicycles complex Fourier series and
35:01 - homers orbit which basically is another
35:04 - video on exactly this topic the
35:06 - difference between those videos and what
35:08 - I am going to do here is I'm gonna sit
35:10 - here and code every single bit of it
35:12 - step by step by step but I'm not going
35:16 - to and I'm just going to look up like
35:19 - okay what's the equation and then I'm
35:22 - going to rewrite that equation in
35:24 - JavaScript but I'm not going to derive
35:25 - or prove a really go deep into these
35:29 - equations and for that I would suggest
35:31 - checking out these other background
35:34 - videos now one thing that I want to
35:43 - mention here and the reason why I was
35:46 - having trouble here is what you'll
35:48 - typically where you might have typically
35:50 - heard the word Fourier transform at
35:53 - least in my world the world of kind of
35:55 - new media arts and computational things
35:58 - you might have seen and you'll even see
36:01 - this in like the p5 library as FFT I'll
36:04 - see this over and over again
36:06 - FFT stands for fast Fourier transform so
36:12 - this is a video where I meant you're
36:13 - going to write the Fourier transform
36:15 - algorithm I'm just not gonna bother to
36:17 - you to write it one that's fast I don't
36:20 - care about it being fast because I don't
36:22 - need it to be fast but Fourier
36:24 - transforms are so useful and important
36:27 - in so many fields and applications that
36:30 - being able to have an algorithm that
36:31 - runs super fast into a Fourier transform
36:33 - is incredibly useful and the where
36:36 - you'll have more - seen this and seen
36:37 - FFT is in the context of digital audio
36:41 - audio signal processing meaning if this
36:45 - this would have been easier for me to
36:46 - explain the drawing thing is kind of
36:48 - weird and we'll see that that this
36:50 - things might come full circle for you by
36:52 - the end of this video the way that they
36:53 - have for me in the last couple month or
36:56 - so is thinking about this but typically
36:59 - if this were a sound wave of like me
37:02 - talking what you might want to do if you
37:06 - are an audio person is take that sound
37:09 - wave and break it into parts what are
37:13 - the amplitudes of different frequencies
37:16 - that make up that sound wave you can use
37:18 - this to reduce noise to do some kind of
37:21 - processing to create an audio
37:22 - visualization and the p5 FFT function
37:26 - basically connects to a sound file or a
37:30 - microphone input and gives you a big
37:32 - array with the amplitude of the sound at
37:36 - various different frequencies so you can
37:38 - do things like draw one of those you
37:40 - know 80s style graphic equalizers where
37:43 - you see all the bars kind of bouncing up
37:47 - and down as a piece of music is playing
37:48 - so this is the background for all of
37:50 - this and so now is the moment for me to
37:53 - start coding what if I take any
37:56 - arbitrary signal right the steps are
38:00 - take any arbitrary signal I'm gonna make
38:02 - one up or it's going to be the path of
38:03 - the coding train logo I'm going to try
38:06 - write the discrete Fourier transform
38:09 - algorithm which I'll find on Wikipedia
38:11 - page which is a slower version of
38:14 - ultimately like other implementations of
38:18 - the algorithm like fast Fourier
38:19 - transform then I'm gonna take the
38:22 - results of that and turn it into a
38:25 - sequence of rotating circles at various
38:30 - frequencies with various amplitudes at
38:33 - various phases and then I am going to
38:40 - see if that redraws the logo and now
38:44 - they've already me like 30 minutes into
38:47 - this video I'm gonna begin time out for
38:51 - a second Oh OHS so I don't know how long
39:01 - if you had to estimate anybody paying
39:03 - attention like how long was that
39:05 - explanation of like even just like where
39:07 - I am anybody anybody have a guest like
39:17 - this that I've got explanation I mean I
39:20 - wonder if I should do it again and try
39:21 - to make it shorter because that was kind
39:30 - of long I'm gonna I'm gonna wait for
39:34 - your feedback and I'm gonna trace all
39:36 - this
39:43 - that was like my rehearsal
39:45 - what time is it 11:15
39:48 - I also have to keep going here you don't
39:51 - want to be here about 6 and a half
40:00 - minutes that's not terrible
40:02 - I'm see 10 minutes too long 20 minutes 8
40:05 - minutes 35 minutes 3 minutes 5 to 8
40:07 - minutes
40:08 - I trust Alka and in the six-and-a-half
40:11 - minutes I'm gonna start coding 7 minutes
40:22 - and I can I guess I could come back and
40:25 - redo that later also there's always like
40:28 - little things to trim out that matcha is
40:30 - good at figuring out so it might be a
40:32 - little less okay so what did I reference
40:35 - I referenced this this this this this no
40:41 - I didn't reference this but that's fine
40:42 - oh I didn't reference this yet this I
40:44 - need this is I'm gonna need also okay
40:51 - yeah just people yeah people don't want
40:54 - me to I have to realize I'm doing if I
40:56 - were not live-streaming I would do that
40:58 - again but since I'm live-streaming I'm
41:00 - gonna keep going okay okay
41:09 - I'm just sorry I'm thinking to myself
41:11 - here so actually give me a second
41:16 - because what I want to do is I don't
41:18 - want this slider in here let me I'm
41:20 - gonna start with this but I want it to
41:24 - be a little bit simpler where is it
41:29 - using the slider value let's just change
41:33 - this to like five okay that's fine it's
41:40 - got a great slider okay so okay
42:01 - okay and let me do let me create a
42:09 - JavaScript file where I'll write the
42:16 - Fourier function so this is let me let
42:26 - me make sure I have my reference open
42:28 - here so again unlike some coding
42:32 - challenges where I really do completely
42:35 - just make it up from scratch I'm not
42:38 - gonna like read my code and retype it
42:41 - I'm gonna try to figure it out as I go
42:43 - but in case you want to like follow
42:45 - along a little bit more in advance or
42:49 - like be able to catch the mistakes I
42:51 - make more quickly um this is a good
42:54 - reference point so this is my what I did
42:57 - on the plane this is my implementation
42:59 - of the of that Fourier transform
43:04 - algorithm and then and I just want to
43:10 - like peek at these for a second and then
43:12 - assuming that I have some set of X's and
43:15 - Y's I call the function and then loop
43:20 - through it and the angle the amplitude
43:22 - is the amplitude the angle is the phase
43:24 - plus time times frequency and time
43:27 - always goes up by two pi divided by how
43:32 - many things I have okay that may all
43:34 - make sense I will explain that as I go
43:36 - okay okay
43:44 - all right let's cycle the cameras I will
43:48 - consider at the end coming back and
43:51 - redoing the intro to this but I'm not
43:55 - going to worry about that right now it's
43:59 - also possible that I would make that
44:01 - just the implement the discrete Fourier
44:03 - transform algorithm as a separate video
44:06 - but I think I am ready to start coding
44:17 - by now this is where I left off before
44:21 - in my Fourier series coding challenge
44:25 - and the difference now is what I want to
44:28 - do is be able to have an arbitrary
44:29 - signal and then compute what all of
44:32 - these amplitudes and frequencies and
44:34 - phases should be so the way that I'm
44:36 - gonna do that is so let's think about
44:38 - this
44:39 - this is really like all of a bunch of Y
44:42 - values that I'm calculating so let's
44:44 - make let's make an array called
44:47 - something like Y and this is gonna be
44:51 - the signal this is my like signal this
44:54 - could be audio it could be Y positions
44:58 - any arbitrary digital signal / array of
45:01 - numbers then what I want to do is I want
45:05 - to have like the Fourier transform of
45:10 - that particular signal so I want to say
45:14 - Fourier y equals like Fourier transform
45:18 - or maybe like DFT discrete Fourier
45:21 - transform of the Y value so this is the
45:25 - idea the first thing that I need to do
45:28 - is compute the discrete Fourier
45:30 - transform of an arbitrary signal now I
45:32 - need some kind of signal so I think what
45:34 - I'm going to absurdly do is hard-code
45:37 - the signal let's actually make it the
45:39 - square wave and then we'll know if it
45:41 - kind of worked so what is the square
45:43 - wave square wave would be something like
45:45 - 100 100 100 negative 100 negative 100
45:49 - negative 100 and then like do that like
45:53 - a few times all right so let's just so
45:57 - this
45:57 - gonna be my arbitrary arbitrary signal
46:00 - which I've just hard-coding the square
46:02 - wave and we'll do some interesting
46:03 - things that we might maybe I'll try like
46:05 - a purlin noise signal or just a sine
46:08 - wave thing and we'll try different
46:09 - things random numbers to see what that
46:11 - does so then this actual code here can
46:16 - largely stay the same because in theory
46:19 - the difference is now instead of
46:23 - following the specific Fourier series
46:26 - for the square wave I just need to take
46:29 - the results of my discreet Fourier
46:31 - transform so this would be a loop that's
46:35 - going to go through the length of those
46:37 - trances that transform how many
46:39 - different wave patterns are there that
46:41 - I'm adding together and then this
46:43 - ultimately I'm gonna have to figure out
46:48 - so let's comment let's comment this out
46:51 - right now and there's a little bit of an
46:54 - issue where I have this x and y as like
46:58 - local variables here but let's I think
47:00 - this will be okay
47:00 - so let's let's refresh this and DFT is
47:03 - not fine okay step one let's write the
47:06 - discrete Fourier transform algorithm
47:09 - pause for a second there's a small
47:12 - chance that what I'll do is in the app
47:15 - is have that be like a separate video
47:17 - and then just like have it appear but
47:19 - I'm gonna try writing it right now
47:21 - within this video okay
47:32 - so I'm going to start by making a
47:35 - function called DFT it's going to have
47:37 - some array of values and now I need to
47:42 - at the end I need to return something
47:45 - the idea is that I would return the
47:48 - discrete Fourier transform of those
47:50 - values what do we do well guess what the
47:56 - way that I'm the couple things one is I
47:58 - highly recommend if you want if you you
48:00 - want to pause this video right now and
48:02 - read this particular article on the
48:05 - algorithm archive by James loss or the
48:07 - Leo iOS youtube channel um this is a
48:10 - really nice article about Fourier
48:13 - transforms and the discrete Fourier
48:15 - transform algorithm and this particular
48:16 - algorithm for FFT but what I'm going to
48:19 - do is I'm just going to follow exactly
48:21 - what's here on the Wikipedia page so my
48:24 - signal is X sub n lowercase X n so what
48:30 - I need to do is basically and the
48:32 - transform is capital X sub K so I need
48:36 - to write a function that computes this
48:39 - exact equation and returns it as an
48:42 - array and this is exactly what I'm going
48:44 - to do this is exciting now one thing I
48:46 - should mention is that in order to work
48:49 - with Fourier transforms I need to
48:52 - understand something called a complex
48:55 - number now if I recall correctly the
48:58 - last last time a complex number came up
49:01 - on this YouTube channel was probably in
49:03 - my Mandelbrot set coding challenge where
49:06 - I visualized the famous Mandelbrot
49:08 - fractal and I referenced something
49:10 - called an imaginary number and I was way
49:13 - too informal and loosey goosey and jokey
49:17 - about how I talked about imaginary
49:18 - numbers being like this pretend thing
49:20 - that doesn't exist which is absolutely
49:22 - incorrect
49:23 - the reason why the term imaginary is
49:26 - used is because there is no real number
49:30 - solution to the square root of negative
49:32 - 1 but the square root of negative 1 is
49:36 - referred to in mathematics as I I is a
49:40 - complex number a complex
49:42 - number is a number with both a real a
49:45 - plus an imaginary component so it's two
49:48 - real values a real value and another
49:52 - real value kind of multiplied by I the
49:55 - square root of negative one so this is
49:57 - idea of a complex number and by the way
49:59 - another way for me to refer to a complex
50:02 - number is by its position on the complex
50:07 - plane so if this were the real axis and
50:10 - this were the imaginary axis this would
50:13 - be a and this would be B and this is a
50:15 - vector representation whoa of this
50:18 - particular complex number so why do I
50:21 - bring this up the reason why I bring
50:23 - this up is that the Fourier transform
50:26 - algorithm even if I start with a array
50:30 - of real numbers single numbers I'm going
50:32 - to apply the Fourier transform and get
50:34 - out a complex number what I'm going to
50:37 - return from that function is both A's
50:39 - and B's otherwise known as the real
50:42 - component which is often written in code
50:44 - as like our E and the imaginary
50:46 - component which is often written as I M
50:49 - so this is one bit that I really need to
50:51 - understand before working with this
50:53 - formula so now that I'm looking with
50:56 - this formula now that I'm looking so by
51:00 - the way before I move on before I move
51:08 - on did I say anything like wildly
51:14 - incorrect there about imaginary numbers
51:17 - and complex numbers am I going to
51:20 - mention Euler's formula I probably
51:22 - should yeah I wasn't going to so I think
51:27 - that's an important so I should mention
51:29 - it because because this this is what
51:35 - follows via Euler's formant formula and
51:37 - Euler is the correct pronunciation of
51:38 - that right not Euler as one might think
51:45 - yeah Simon that's a very good point
51:48 - Simon Says a real number is actually a
51:51 - complex number with an imaginary
51:53 - of zero which totally makes sense yeah
52:02 - okay I thought you weren't going to go
52:05 - into the mat great I just need somebody
52:11 - to tell me that oiler that that yeah
52:24 - that Euler I'm pronouncing Euler
52:26 - correctly Euler okay great
52:41 - two more things about the math that I
52:43 - want to say about this particular
52:45 - discrete Fourier transform number one is
52:49 - the top line there is the actual formula
52:52 - for a Fourier transform but there is
52:55 - something very well-known and famous in
52:57 - mathematics called Euler's formula which
52:59 - allows us to take that top line and turn
53:02 - it into what is here and this is going
53:04 - to be much easier for me to actually
53:06 - implement in code so I'm going to take
53:09 - this second line here and that's what
53:11 - I've been implementing code so that's
53:12 - kind of the most important thing now the
53:15 - other thing we'll see and I feel like I
53:16 - should let me take a second here
53:19 - actually let me let me go back what I
53:26 - want to do is hold on sorry sorry sorry
53:35 - I'm thinking here I kind of feel like I
53:37 - want to write that formula out so I can
53:40 - yeah so ignore that thing that I just
53:44 - did Matz yeah all right
53:48 - let's take a quick let's take a quick
53:50 - minute to rewrite this formula on the
53:52 - board so we have it for reference oh
53:54 - shoot I need to have it for okay hold on
53:58 - I think I can see it
54:00 - so did Mathieu this could be like sped
54:02 - up or something when we make the edited
54:03 - version of me rewriting the formax I'm
54:05 - literally just going to rewrite it the
54:08 - question is where actually you know what
54:15 - I'm gonna erase this
54:20 - because this I kind of want to keep
54:22 - later this will be important so let's
54:25 - rewrite the formula and equals 0 to
54:34 - capital n minus 1 X sub n dot cosine of
54:48 - 2 pi K n divided by n shoot run out of
54:56 - space I might do this again - such a
55:00 - jerk
55:05 - sorry everybody again n equals 0 to n
55:17 - minus 1 X sub n cosine of 2 pi K + and
55:31 - minus I times sine 2 pi K and these are
55:42 - the same thing by the way so sort of
55:45 - little bit silly but that will help us
55:46 - okay ok great did I get that all awesome
55:50 - ok great so I have the formula there now
56:00 - what was I saying
56:03 - aiya I definitely don't know the formula
56:09 - by heart okay
56:37 - I should mention Euler's formula okay
56:50 - all right so now it's best moment this
56:55 - moment that canet happens to you in life
56:57 - where you see one of these formulas on a
57:00 - wikipedia page or in math textbook and
57:02 - Europe creative coder making some kind
57:05 - of visualization thing and you just want
57:06 - to stop but together you would mean
57:08 - we're not gonna stop we're going to
57:10 - figure out how to translate all this
57:12 - notation and symbols and stuff into
57:14 - JavaScript code now again it'll be super
57:16 - interesting to go down the rabbit hole
57:18 - of like deriving all these formulas on
57:19 - the background for our Fourier transform
57:21 - works but I'm not going to do that I'm
57:23 - if you look in the video's description
57:24 - there are several excellent videos and
57:27 - resources link to that will give you
57:28 - that background but I do want to mention
57:30 - one thing which is quite important which
57:32 - is that this particular formula on the
57:34 - top here for the for the discrete
57:37 - Fourier transform uses that does this
57:40 - symbol e e Euler's number or the base of
57:43 - natural log this is a very famous number
57:45 - in mathematics much like pi but there is
57:49 - also a very well-known formula called
57:51 - Euler's formula which looks like this e
57:55 - to the I which complex number I x equals
58:00 - cosine of X plus I times sine of X
58:02 - really interesting kind of looks like
58:03 - polar to Cartesian coordinate
58:05 - transformation all this stuff is
58:06 - interrelated right but so that is where
58:09 - if I come back to here this is where we
58:12 - get the ups this is where we get the
58:15 - second line here using Euler's formula
58:18 - from the particular formula it's up top
58:20 - but this is the one that I want to
58:22 - implement and I have written the formula
58:24 - out right over here so we can unpack it
58:29 - a little bit what are the components we
58:30 - need to understand now really if this
58:32 - were a math lesson about Fourier
58:34 - transform we wouldn't be using summation
58:36 - we would be using integration but
58:39 - because we're working on a computer and
58:41 - I need to write a loop and I don't have
58:44 - infinity as a tool then I could just use
58:47 - I need to instead of doing integration
58:50 - do summation and that's why also this is
58:52 - called discrete Fourier transform
58:54 - because I'm doing it over this sort of
58:55 - like discrete space okay so this means
58:59 - summation so this should give you a clue
59:03 - that I can just do like a for-loop going
59:05 - from zero all the way up to N and by the
59:07 - way n is going to be the length the
59:10 - number of values I have in my signal so
59:12 - the length of that original array that's
59:15 - kind o and then the other thing that's
59:17 - really important is that basically what
59:19 - I get to do is separate out this is the
59:24 - real component and this is the imaginary
59:28 - component so even though this is all
59:32 - written as one formula I'm going to sum
59:34 - up all the real components and all the
59:36 - imaginary components together and by the
59:38 - way as Simon who is watching this live
59:41 - pointed out to me they're really only
59:43 - there are only complex numbers that the
59:45 - term imaginary is really it's really too
59:46 - bad that it's called imaginary because
59:48 - it's very misleading but a real number
59:49 - it's just a complex number with the
59:51 - imaginary component as zero okay so I
59:55 - should be able to start writing the code
59:57 - for this now write this this is my
60:00 - signal it's a little confusing that this
60:01 - is called X because I called it Y but
60:04 - this is just the values the vowels this
60:07 - n is vows dot length in my code and then
60:11 - okay we have to work out what K is I
60:14 - know what cosine is 2 pi and all these
60:17 - things so we're gonna work out what K is
60:18 - okay all right so what I'm gonna do is
60:31 - let's create a variable called Fourier
60:35 - then let's say let's say n is Val egg so
60:41 - I'm going to and let's do it let's let's
60:44 - follow this and goes from 0 ha I forgot
60:50 - something so first of all I'm in the
60:52 - wrong good thing I'm in the wrong I'm in
60:55 - the wrong screen I know that everybody
60:56 - sorry
60:57 - K is a constant I got it I got I got it
61:00 - I got it I got it I got it I totally
61:02 - screwed this up because I forgot
61:05 - something super important
61:10 - oh boy I'm so silly what is K this
61:16 - should actually this is this is I
61:18 - completely forgot to write what is quite
61:21 - possibly the most important part of this
61:23 - formula over here which is capital X big
61:30 - X sub K equals so this is what I'm
61:34 - trying to calculate I'm trying to create
61:36 - an array of K elements and each element
61:40 - K I'm going to sum up n from 0 to the
61:44 - end so there's like a little bit of a
61:46 - nested loop going on here
61:47 - I want to loop through every K which is
61:50 - going from 0 all the way up to N and
61:51 - then also sum up so K is going to stay
61:54 - constant within each one of these and K
61:56 - is actually really the frequency we'll
61:58 - see that the frequency of the particular
62:00 - wave pattern in that slot ok so let me
62:03 - come back here now let me start to write
62:05 - the code for this so the first thing
62:08 - that I want to do so I have I guess I'm
62:10 - sorry okay all right so let me drive the
62:18 - code for this the first thing that I
62:20 - want to do is create an empty array this
62:24 - is we're gonna store all of the results
62:26 - then I need to write a loop which is let
62:29 - K equals 0 K is less than n K plus plus
62:34 - and then I'm going to be saying for ei K
62:38 - equals something so this by the way I
62:41 - mean I could call this like capital X if
62:43 - I want it to be and maybe I will just to
62:47 - like follow this notation exactly so
62:49 - this is capital X this is lowercase X so
62:53 - let's actually as silly as this might be
62:54 - let's change this to X so I can use all
62:57 - the same notation as that formula so I'm
63:00 - trying to calculate this now in order to
63:02 - do this I need to for each one go
63:08 - through n so this is where the nested
63:12 - loop comes in in to calculate each each
63:19 - element of capital X index K I
63:23 - to sum up and going from zero to the end
63:26 - and okay and then I'm gonna start doing
63:30 - this formula okay so I need to sum up
63:32 - what I need to sum up both a imaginary
63:34 - real component and an imaginary
63:36 - component so let's let's make a real
63:39 - component and an imaginary component the
63:42 - real component is going to go up by some
63:45 - amount and the imaginary component this
63:48 - I do not want to ask just write the code
63:54 - for me so I'm gonna sum up the real and
63:57 - imaginary components and then I'm going
64:01 - to make some object which is basically
64:04 - just I know I could what's that thing
64:06 - called were but I'm not gonna worry
64:07 - about it right now the fancy es6 way of
64:10 - making an object if if I'm doing this so
64:13 - then I'm gonna make an object that has
64:15 - the real and imaginary components and
64:17 - I'm going to return it okay there we go
64:20 - so this is the process oh I could use
64:23 - hollow Brian in the chat is saying use a
64:24 - P vector I could certainly use a vector
64:26 - object but I'm gonna write it this way
64:28 - so okay so here we are good good good
64:30 - good good
64:30 - that's my I've got this in this now I
64:32 - just need to add this stuff in there so
64:34 - let's do the real component first now
64:36 - one thing you might notice this appears
64:41 - twice so if anything ever appears twice
64:44 - that might give you a hint to just put
64:45 - that in a variable so let's do that so
64:47 - let's say I don't know what to call that
64:51 - I'm gonna just call that something
64:57 - somebody give me an idea what I call it
64:59 - miss a 2 pi times K times n divided by n
65:06 - right
65:07 - so this I'll call this this is like the
65:10 - I mean it's like the angle I'll cup data
65:12 - I don't know what should I call it
65:20 - what should I call this somebody get
65:22 - excited cause this okay get think that
65:24 - by itself what's that called though in
65:29 - JavaScript where you I see the answer
65:32 - now fee angular speed fee yeah it's like
65:37 - the angular speed angle I could call it
65:40 - angle yeah call it fee or some angle
65:43 - name yeah yeah all right so the chat's
65:47 - telling me to call it like angle or some
65:49 - angle name but actually fee is a good
65:51 - one
65:51 - so they cuz it's it's the value that's
65:53 - going into cosine and sine which is like
65:55 - an angle or a Greek letter fee is often
65:57 - used so I'm gonna call it fee and then
65:59 - I'm gonna say the real component equals
66:02 - and I'm looking over there because
66:03 - that's where my formula is written is
66:06 - going to say X index n times cosign of
66:12 - fee boy this should look strangely like
66:17 - a lot of code that I owe that I write a
66:19 - lot and then X index n times and this
66:22 - should say cosine times sine of fee but
66:26 - one thing you'll notice here is that
66:28 - this there is a minus here this minus
66:32 - here is not if it's quite an important
66:35 - detail so what I'm gonna do is I I don't
66:39 - know the best way to handle this but I
66:41 - could just say minus equals but maybe
66:43 - I'll yeah let's say minus equals let's
66:45 - do that okay and then this is called
66:48 - enhanced object literals thank you I can
66:51 - just say this so this will give me that
66:59 - and there okay so all of that
67:02 - explanation Wow
67:04 - and here we are discrete Fourier
67:06 - transform
67:09 - [Music]
67:14 - okay I'm just taking a break for a
67:32 - second I'm gonna double-check just out
67:34 - of curiosity I'm gonna double-check this
67:35 - code yeah
67:56 - remember to define n thank you
67:58 - also one thing that I'm noticing in the
68:01 - example that I wrote I did this why did
68:09 - I do this in the example that I wrote
68:11 - before today does that matter I mean
68:19 - it's like normalizing the vector does
68:22 - that actually matter I'm not sure where
68:25 - did I get that from I don't see it and
68:31 - you heard here mm-hmm okay I'm not gonna
68:36 - worry about that right now yeah this
68:42 - this is going to be very important in a
68:45 - moment but I'm not going to worry about
68:50 - that
69:01 - okay Oh Ethan Davidson see you at PC DLA
69:10 - this weekend awesome okay why did I / oh
69:17 - it's the average contribution at that
69:18 - frequency but no it's not normalizing it
69:22 - that's just dividing by n I'm not sure
69:24 - why I did that
69:25 - it's Fae not fee and and and mr.
69:34 - zacchara nee is asking a a good question
69:42 - yeah I know I need to okay so I'm pretty
69:45 - sure its fee yeah all right sorry
69:50 - all right so many so many things are
69:51 - coming at me all at once in the chat so
69:55 - let me let me do a couple let me let me
69:56 - reference a couple of those things all
70:02 - right so thank you to the chat for
70:03 - asking a couple key questions and for
70:05 - pointing out some errors for example I
70:07 - forgot to actually define what n is
70:09 - which is X dot length you know I should
70:12 - probably get in the habit of using the
70:14 - very variable declaration Const when I
70:17 - know it's something that's going to stay
70:18 - constant like this so I will attempt to
70:20 - use that here these cannot be constant
70:22 - because I'm adding them up together I
70:24 - also want to there's a there's a couple
70:27 - other pieces to this yes sorry Simon yes
70:35 - I see I see what Euler's formula is
70:38 - thank you okay hold on
70:48 - pronunciation is so one noted that in
70:54 - the UK - in the USA groom that Phi is
70:59 - the performer yeah I think in Greek so
71:04 - I'm pretty sure a modern Greek the
71:06 - letter is pronounced fee but Phi Pi
71:16 - yeah no no well let's look at this
71:19 - Cambridge dictionary fine bye all right
71:24 - fine
71:26 - why do I think that it's pronounced fee
71:35 - now an actual Greek would be fee but
71:37 - English established okay all right all
71:41 - right all right all right all right also
71:52 - thank you for the chat - telling me that
71:53 - it is pronounced fie and not fee
71:55 - although this is actually a point of
71:57 - contention I'm sure it'll be a nice
71:58 - thread of the conference about this but
72:00 - the actual Greek letter at least in
72:01 - modern Greek from what I understand is
72:02 - pronounced its fee but in the US and UK
72:05 - at least it's often the mathematical
72:07 - when referring to the mathematical term
72:10 - the fine so I'll say five from now on so
72:12 - I stop hearing people's pronunciation
72:15 - and that should also be a Const now
72:19 - another thing that is typically done
72:21 - with discrete Fourier transform is to
72:24 - take this sum and then average its
72:26 - contribution over N so I would also say
72:29 - the real component equals the real
72:31 - component divided by n the imaginary
72:33 - component is the imaginary component of
72:35 - I and some and add that in and then
72:37 - someone asked me well oh but this is the
72:39 - another question that came in which was
72:40 - the question oh there's I hear how why
72:43 - don't I see I in your formula in your
72:47 - code where is I in your code and so I
72:49 - isn't explicitly in here but what I'm
72:52 - doing I'm referencing I by separating
72:55 - out the real and imaginary components so
72:57 - the imaginary component is always paired
72:59 - with I
73:00 - and the real component is pair is that
73:02 - you know in in the form a plus B I so
73:05 - this is a that's B but I don't actually
73:07 - have to put I in the equation itself X
73:14 - can be a Const yeah and the chat is also
73:24 - telling me that X can be a Const because
73:26 - I am NOT I I'm not ever going to read to
73:28 - Claire that now so let's let's save this
73:32 - let's let's feel happy that we completed
73:33 - something I'm gonna refresh I'm gonna go
73:36 - back to my code page I'm gonna refresh
73:38 - this and I'm just gonna say let's make
73:40 - up a variable actually I think I have
73:42 - Val's already no it's not to find sketch
73:46 - a why I called it why sorry let's make a
73:50 - variable called Y which is here and now
73:52 - let's say for ei o DF T Y and there we
73:58 - go
73:59 - something came out so we're gonna just
74:02 - hope that this is right I mean I'm I'm
74:07 - not seeing any error we hold on and -
74:14 - okay I really shouldn't be looking at
74:16 - the chat it's making me crazy yeah
74:19 - sometimes I just have to imagine
74:23 - excitement just wrote I'm at the dentist
74:25 - I'm imagining the dentist's chair having
74:28 - his teeth cleaned with like a phone like
74:30 - propped up here watching me live stream
74:33 - which is totally insane
74:34 - 11:47 okay 40 minutes to finish this I
74:37 - think we I think we get it we've done
74:38 - the hard part actually sort of all right
74:41 - hold on Matt you sorry I'm gonna I got
74:43 - distracted by the chat I'm gonna go back
74:45 - to here alright so let's just see if
74:49 - that function DFT does something and
74:51 - doesn't actually produce an error so I
74:53 - have the Y array which is my like
74:55 - hard-coded square wave and if I call DFT
74:59 - on Y here in the console we can see I
75:02 - get right I had 12 values in my signal I
75:05 - get 12 complex numbers back each one
75:09 - with a real and an imaginary component
75:11 - so this looks
75:13 - good in the sense that their numbers
75:15 - here I don't see it error no read no not
75:17 - a number so hopefully we're in the right
75:20 - place now the question is what what what
75:23 - do I do with these real and imaginary
75:28 - components how do those things
75:31 - actually become how do those things
75:35 - whoops how do those things actually
75:47 - become circular epicycles right for a
75:51 - circular epicycle what do I need I need
75:55 - an amplitude right that's the basically
76:01 - the radius of that circle
76:03 - I need a frequency which is how many
76:09 - cycles through the circle does it does
76:11 - it rotate per unit of time and then I
76:16 - also need this is what's called a phase
76:18 - and the phase another way to think of
76:20 - that as an offset so where does the
76:22 - cycle begin where does that circular
76:25 - wave pattern begin that's the phase so I
76:27 - need these three things so somehow I
76:32 - would I need to be able to do is I need
76:35 - to be able to say right here
76:37 - well the frequency is something the
76:42 - amplitude is something and the phase is
76:45 - something and the the secret to this
76:49 - lies in the fact that a complex number
76:52 - is like a vector and in fact here we go
76:55 - the amplitude is the length of that
76:58 - vector and the phase is the angle of
77:02 - that vector well I'm so that's amplitude
77:04 - and phase but what's frequency well
77:06 - guess what I don't know if there was a
77:07 - clue to this on that Wikipedia page but
77:10 - the frequency is actually just K that's
77:16 - the frequency yeah and discrete
77:19 - frequency components so the whole point
77:22 - of doing this is to take the signal and
77:24 - divide it into a bunch of discrete
77:27 - Quincy components 0 1 2 3 4 etc so here
77:30 - we go
77:31 - frequency is K and that's a little bit
77:35 - redundant but I might do something with
77:36 - sorting later so I'm going to need to
77:38 - keep track of that amplitude is the
77:40 - square root of the real times real plus
77:43 - imaginary times imaginary this is
77:45 - basically the magnitude of a vector the
77:48 - square root of each component squared
77:50 - this is Pythagorean theorem at play and
77:53 - then the phase is the angle which I can
77:55 - use the a tangent to and the Y would be
78:00 - the imaginary I think it's this oh but
78:03 - it does reference the code that I wrote
78:04 - before yes I got it right okay so this
78:08 - would be the phase so now I can say
78:11 - frequency and I can add frequency
78:13 - amplitude and phase here and I can
78:17 - refresh this page I can say DFT Y and
78:22 - let's take a look at any one of these
78:23 - and we can see all right I've got an
78:26 - amplitude I've got a frequency I've got
78:28 - a phase whoo we are ready we are ready
78:33 - to start actually now putting this into
78:36 - our code and the good news is we have
78:38 - the code for drawing these epicycles
78:41 - already I commented it out it was right
78:44 - here so if in fact I have this Fourier Y
78:49 - array I can basically say let me get
78:54 - hold on radius now let's get rid of this
78:56 - n oh sorry let me back up for a second
79:07 - here I have this code from before that
79:11 - was drawing the results of the those
79:15 - epicycles so I can comment this all back
79:18 - in but now it's not a specific Fourier
79:22 - series for the square root it's
79:24 - whatever's come out of my Fourier
79:25 - transform and in this case n is actually
79:29 - it's confusing that I'm using in here
79:33 - but uh an actually is I'm actually just
79:38 - called this frequency is Fourier Y
79:41 - dot frequency and the radius is 4 EI y x
79:46 - amplitude and now of not x is the
79:49 - amplitude so the frequency is the
79:51 - frequency the radius is the amplitude
79:53 - and now I can say multiply time times
79:57 - frequency plus that phase so and I know
80:04 - I could have I could get these things
80:06 - out into a variable in like one line but
80:09 - I'm just gonna write this in here phase
80:13 - so all the code remains the same the
80:17 - difference is what I'm going to do time
80:19 - is the element that's moving forward
80:21 - right it's the angle of and if and if
80:25 - and if the frequency is one it takes one
80:29 - unit of time for it to rotate a full
80:32 - rotation around phase is the offset and
80:35 - radius as the amplitude so one thing
80:37 - that I have to be very careful about
80:38 - here is that I can't just arbitrarily
80:40 - have this 0.05 thing here what I need to
80:45 - do is I need to have like the value DT
80:49 - what is the amount of time I move each
80:53 - frame of animation this would be 2pi
80:56 - being a full cycle divided by how many
81:01 - frequency values I have so now time goes
81:05 - up by this and we should see now dare I
81:08 - say nothing
81:22 - okay so that's their what did I miss
81:25 - oh yeah frequency times time oh oh oh oh
81:36 - I have I have a terrible array here I'm
81:41 - being so silly
81:42 - I took or terrible ray oops I have a
81:47 - terrible error here ah then I forgot
81:50 - about you Dex I hear I've got to pull
81:52 - out right I'm getting the frequency
81:54 - amplitude and phase of each of each
81:59 - element of the array for ei why look
82:02 - sorry about that
82:03 - there we go alright so this looks kind
82:06 - of like maybe it's right but it doesn't
82:08 - look right at all if something's
82:10 - happening that's pretty decent but it's
82:12 - wrong so here's that one thing that's a
82:14 - little bit unfortunate I'm off by a 90
82:17 - degrees here I'm pretty sure so let's
82:22 - just add half pie in here because and
82:27 - there we go now this is actually correct
82:30 - there's my square wave right I have it I
82:33 - have it I don't have it on its side
82:34 - because I'm doing the Y values this is
82:44 - sort of crazy though because it's kind
82:45 - of like I just really what we're doing
82:47 - the thing is I have so why have so few
82:50 - values so it would make more sense for
82:53 - me to actually count to pre-compute some
82:55 - kind of more interesting signal so let's
82:58 - forget about hard coding the signal for
82:59 - a second and let's just say I'm going to
83:03 - have a signal with a hundred values and
83:05 - let's just make them all random numbers
83:10 - this is going to be a little bit insane
83:12 - what probably don't listen pick a number
83:14 - between negative 100 and 100 so you can
83:21 - see look at this this there it is this
83:23 - is the crazy set of epicycles to draw
83:26 - these random numbers let's use Perlin
83:29 - noise and
83:34 - let's let's let's actually create a
83:36 - perfect sine wave that'll be interesting
83:46 - and of like some arbitrary arbitrarily
83:54 - perfect this is really insane whoops Oh
84:02 - float so look look at this I did a
84:08 - Fourier transform discrete Fourier
84:10 - transform to have two circles rotating
84:13 - around each other to recreate a perfect
84:15 - sine wave
84:15 - I could also now do I could do Perlin
84:19 - noise instead and like just have it
84:23 - increased by some arbitrary amount and
84:28 - we can see let's actually make it much
84:29 - taller why is this not okay wait - 250
84:38 - all right so here we go I'm kind of
84:40 - doing nonsense here but the point is any
84:43 - arbitrary signal that I have I can now
84:45 - compute the fort and you can see by the
84:47 - way this is it like cycling back to the
84:50 - beginning that's why it almost looks
84:51 - like this like crazy heartbeat and it's
84:54 - and it's there's this extra bit here of
84:56 - it like the first one not rotating at
84:58 - all just with this off set up because
85:00 - the values itself don't perfectly
85:02 - average around zero but this is not the
85:05 - point this is not the point of what I
85:06 - want to do the point of what I want to
85:08 - do and let's let me just show you to be
85:10 - clear like if I just made this like I
85:15 - like a linear function you can see this
85:20 - look at this these are all the epicycles
85:22 - for basically now I've got the triangle
85:25 - wave because it's going down and then
85:27 - back up at the top and down repeating
85:28 - over and over again okay we are getting
85:32 - somewhere now what we need to do is add
85:36 - exes
85:37 - we need to add exes so let's have an
85:45 - array of exes
85:48 - let's also have the Fourier transform of
85:54 - the exes and we need to initialize them
86:02 - somehow we're getting somewhere
86:05 - here's the thing now this I'm gonna need
86:09 - to do this twice so this all of this I
86:13 - should it's time I'm gonna refactor this
86:16 - now
86:18 - [Music]
86:20 - I'm gonna take all of this and I'm gonna
86:24 - write a function called draw Fourier
86:28 - it's some arbitrary Fourier and so this
86:32 - is no longer Fourier Y and so I'm gonna
86:40 - leave all of this and so I can do this
86:44 - twice because I want to say draw Fourier
86:47 - X draw Fourier Y and actually I don't I
87:03 - don't want any of this in here
87:11 - this is going to be here hold on
87:14 - sawtooth wave thank you ah hold on hold
87:17 - on I started going off on let me back up
87:22 - for a second because I started just like
87:24 - losing myself in like implementing this
87:27 - without actually like explaining what
87:29 - I'm doing
87:30 - let me just go back just give me a
87:32 - second here let me end
87:44 - yeah this should be X thank you I don't
87:50 - know why but I just sort of like lost
87:52 - myself for a second I need to just like
87:53 - take a breather and move on because I
87:58 - also want to correct the fact that this
88:00 - is a sawtooth wave not a triangle wave
88:07 - yeah Chris is saying the half pie offset
88:10 - I'm gonna fix that and I'm gonna sort
88:13 - the circles with their radii yes yes I'm
88:15 - gonna do all of that
88:16 - don't worry okay okay just need a break
88:27 - for a second here it's noon I don't know
88:30 - if anyone has a guest like I mean if you
88:35 - had to guess taking out all of the
88:39 - wasted time if this were edited but how
88:43 - much time do you think this video would
88:44 - be so far
88:55 - Hey okay so this by the way is not a
88:58 - coffee company that was mentioned in the
89:01 - chat not to be named because I'm not
89:02 - buzz marketing it for no fee but but
89:07 - anyway it does have green on it two
89:11 - minutes okay I'm sorry I just need like
89:13 - a breather for a second this is where I
89:20 - would be doing one hour would be less
89:22 - than 55 minutes okay
89:24 - all right I'm not gonna I'm gonna not to
89:34 - you know that'd be fun so maybe this can
89:37 - all be in one video but if we break it
89:41 - into parts maybe what I could do is
89:43 - actually record some intros and outros
89:44 - from LA at processing community day
89:48 - anyway but yeah about an hour probably
89:51 - okay all right let me move on
90:02 - okay before saying 20 there's no way is
90:05 - 20 minutes but okay okay deep breath
90:13 - first thing is in my excitement and
90:15 - exuberance over what I've accomplished
90:17 - I was calling this a triangle wave you
90:19 - know there's kind of a triangle there
90:20 - this is a sawtooth wave which is what
90:22 - I've recreated right here but I need to
90:25 - take a breath here
90:26 - and talk about what the next step is
90:28 - going to be the idea now is what I want
90:31 - to do is I want to be able to draw an
90:34 - arbitrary path which in addition to
90:37 - having wise I want to have X's as well
90:40 - so I need to do the Fourier transform
90:42 - twice now ultimately there's another way
90:45 - of doing this where I do one Fourier
90:47 - transform on a set of complex numbers
90:49 - where the real and imaginary components
90:51 - are the XS and the Y's but I'm gonna
90:52 - stick into this sort of like simple
90:54 - place that I am right now and I am going
90:57 - to add two signals now an x and a y so I
91:03 - need the transform for both the X and
91:06 - the y I'm just going to like in a sort
91:10 - of silly way have the X's and the Y's be
91:16 - the same and then I'm going to apply the
91:21 - same exact Fourier transform to both the
91:25 - XS and the Y's and now here's the
91:27 - complicated part this loop here is draw
91:31 - visualizing the Fourier the results of
91:34 - the Fourier transform as a sequence of
91:37 - rotating circles epicycles so what I
91:40 - want to do though is I think what's
91:42 - going to be good is to refactor this not
91:44 - later but now
91:45 - [Music]
91:47 - and put this in a function
91:50 - call it episode
91:52 - [Music]
91:58 - so the idea is that maybe I would get an
92:04 - x and a y like that's where it's going
92:09 - to start and then I get the upset of
92:14 - epicycles and I draw them all so this is
92:20 - a generic for ei one so in other words
92:23 - the idea being that I could say and I'm
92:27 - gonna get rid of this translate and I'm
92:29 - gonna say basically what I want to be
92:30 - able to say is like draw what did I call
92:33 - it draw for ei know I call the epicycles
92:36 - epicycles like 100 comma what's the size
92:42 - of this window like 200 a fourier X and
92:46 - then epicycles you know 300 200 for ei Y
92:52 - so we should see both of these now let's
92:57 - take a look
92:58 - Epis i khals is not defined oh I know I
93:02 - did this capital C that's probably
93:04 - unnecessary okay great
93:06 - so we can see look so those are and now
93:08 - B epicycles are the same because they
93:10 - have the same values let's give them
93:12 - different values so let's actually let's
93:16 - do something kind of goofy let's make it
93:18 - draw a circle so this is going to be 100
93:23 - times cosine of this is so silly of an
93:28 - angle and that angle is a map I which
93:32 - goes from 0 to 100 is 0 to 2 pi this is
93:37 - just so I can have some kind of path to
93:39 - work with that's like very recognizable
93:42 - so I know whether it's working or not
93:43 - and then Y will be the sine of that so
93:49 - we can see ok this looks promising right
93:51 - now we can see here are the epicycle
93:54 - calculations for the X's and the Y's now
93:57 - one thing that's off though is that I
94:00 - remember I had to like I kind of like
94:02 - glossed over this but I was like I had
94:05 - the figure on its side this 1/2 pi is
94:08 - really like the wrote
94:10 - tation of the whole thing of how I want
94:12 - to display it so let's let's make that
94:14 - an argument here and we'll call that
94:16 - rotation and so the wise oh that's when
94:23 - I do I want it yet I think I could just
94:25 - do that when I draw it that's fine so
94:29 - where it where is this now I'm going to
94:31 - the wise should be off by half PI and
94:34 - the X's should not be and so now look at
94:38 - this okay so in theory now we're getting
94:41 - somewhere
94:41 - don't worry what I want to do let's
94:44 - position this like over here and then
94:47 - let's position this like a little bit
94:50 - further over and here right and now what
94:53 - I want to do is over there where that
94:55 - mouse pointer is I want to take the Y
94:58 - from here and take the X from there and
95:01 - draw the path so instead of wave I was
95:05 - drawing a wave pattern I now on an array
95:07 - that is the full path I want to
95:11 - basically get the end result so let's
95:15 - have this epicycles function return it
95:21 - should return a value which is a vector
95:25 - create vector with x and y so whatever
95:30 - the end result like the last x and y
95:33 - point the end of that epicycle sequence
95:37 - and then so I have VX is this that's the
95:43 - vector for the X's and V why is that and
95:48 - now I want to say path dot unshifted
95:58 - create a new vector this is like where I
96:03 - want to draw the thing I need a vector
96:06 - which is the X component of V X and the
96:11 - y component of V Y and then I want to
96:13 - put that in the path and then this let's
96:16 - get rid of this line for a second I'm
96:19 - going to instead of drawing this wave
96:21 - I'm going to iterate over the path
96:23 - I don't know if I've this is a little
96:26 - bit of a strange refactoring of what I
96:27 - had before but I think it's gonna make
96:29 - sense to you in a second let's see I
96:32 - might have to come back and explain this
96:34 - let's put this in here and wave is not
96:37 - defined because it is path path I'm not
96:40 - gonna worry about this right now let's
96:42 - kick that out all right it's over there
96:45 - oh it's in the wrong spot but it is
96:47 - right so why is it up here because oh I
96:52 - want it to sort of like a pre R oh
96:54 - because these are at I know I wanna I
96:57 - not I'm not using the offset so actually
96:59 - what I want to return is also X plus the
97:04 - original offset so let's call this
97:08 - offset X offset Y oh no and then hold on
97:16 - I'm gonna figure this out this is so
97:20 - what I'm doing now is nothing to with
97:22 - Fourier transforms it's just figuring
97:23 - out how the weird way that I want to
97:25 - visualize this which you know now that
97:27 - this video is I'm gonna just say the
97:29 - offset X I'm gonna just save these
97:31 - values because I think what I want is no
97:40 - but it should be offset by it already
97:43 - hold on hold on I'm just thinking for a
97:54 - second why is this not doing what I
97:57 - think it's gonna do this should
97:58 - definitely be multi-part but I'm just
98:05 - like okay so that's yeah that's the oh
98:10 - that is right it's just like over
98:19 - I guess I need a whole other offset
98:23 - because everything this is relative to
98:25 - the center why would it know where I
98:28 - want to put it like I want the or maybe
98:32 - I have this is oh these are wrong this X
98:36 - should be up here oh oh oh this is like
98:40 - wrong V X comma Y and V Y comma X yeah
98:50 - they're in the wrong place
98:52 - swap them yeah let me go back let me go
98:57 - back back up back up back up back up
99:05 - back up back up yeah they're totally in
99:12 - there just in the wrong place I'm just
99:14 - being totally ridiculous have it right
99:20 - thing
99:21 - sorry Matt said this is gonna be an edit
99:23 - to go like kind of way back not way back
99:25 - but a little bit back to where I had
99:27 - this okay so this is actually correct I
99:35 - just put the I'm not realizing this is
99:39 - correct I just put these into weird
99:40 - places like I want the one that's doing
99:42 - the Y over here the one that's doing the
99:43 - X over there I don't know what just like
99:45 - intuitively didn't put them in the right
99:46 - place so this should be 400 comma 50 and
99:50 - this should be like 50 comma 200 this is
99:53 - nothing to do with Fourier transforms
99:54 - it's just the weird right there we go so
99:56 - I wanted to see them like this so now
99:58 - you could see those are the Fourier
99:59 - transforms for this particular circle
100:01 - and let's add a line back in now which
100:05 - is which is basically this thing so I
100:11 - also want to draw a line from the V X
100:16 - dot V Y o so V X dot X V X dot Y to V
100:23 - dot X V dot Y like I just want to draw
100:25 - these two lines and then the same thing
100:27 - from V Y dot X and V Y it out why Wow my
100:30 - naming is wild leek if you
100:33 - using here so this could definitely use
100:34 - for some refactoring but there we go now
100:40 - we can see those lines so this is good
100:42 - now I don't like the way this is spaced
100:43 - out so let's what one way to fix that
100:47 - would just be to make this thing smaller
100:52 - and that sort of helps me a little bit
100:55 - but this can move over I don't know why
100:57 - I put it all the way over there let's
101:00 - let's move this over to at 300 okay this
101:03 - is a little bit better now let's make
101:08 - something more interesting here which is
101:13 - let's let's start using Perlin noise
101:15 - again so I'm gonna say noise and noise
101:23 - plus some rent arbitrary amount and we
101:28 - can see look at this so you can see that
101:30 - this works and let's let's give it let's
101:35 - make the amplitude bigger and let's
101:38 - let's give it like 500 values oops and
101:42 - there's also no reason why this is very
101:44 - silly
101:45 - these should just be in one loop but
101:50 - let's give it more values and let's just
101:53 - say you know I divided by 50 I'm just
101:58 - doing like arbitrary stuff because the
102:01 - whole point of this is to do a drawing
102:03 - alright but we can see how this now will
102:08 - take any arbitrary signal and compute
102:12 - the Fourier transform for the X's and
102:13 - Y's and draw that path now the nice
102:21 - thing about this is I'm about to almost
102:24 - instantaneously do something to make
102:27 - this much more interesting I am going to
102:29 - go and grab the coding train logo path
102:34 - is this the whole point of this is
102:36 - forget about computing a path the whole
102:43 - point of this is
102:43 - forget about computing
102:46 - I want to have a known path a dry so
102:50 - what I'm going to do is hold on edit
102:57 - point for a second let me grab this
103:14 - let's call this coding train yes
103:24 - and I'm going to add that bin here
103:35 - okay
103:38 - I am back and I have brought in a
103:46 - JavaScript file that just has a big
103:48 - array of X's and Y's all in a variable
103:51 - called drawing which is the continuous
103:53 - path of the coding train logo thank you
103:56 - to a link to Tom febri on Twitter for
104:01 - sending me this particular path so what
104:04 - I'm going to do now is if I go to the
104:07 - code we've got all of this work for this
104:09 - moment
104:10 - better work I'm so excited I'm gonna go
104:13 - here right and now I'm going to say I I
104:17 - mean this is a little bit silly the way
104:19 - I'm doing this by drawing dot length I
104:22 - plus plus I'm going to go through right
104:24 - remember this variable drawing is just
104:27 - an array of X's and Y's and I'm going to
104:30 - make the X's drawing index I dot X and
104:35 - the Y's drawing index I dot y now here's
104:42 - the thing I happen to know that the
104:45 - complexity of that drawing is much is
104:49 - way more detailed than I need and it's
104:51 - gonna run very very slow so I'm actually
104:53 - going to add a variable called skip and
104:55 - I'm gonna like skip every 10 and I'm
105:00 - gonna say plus equals skip and then I'm
105:01 - going to change this to push so I'm
105:04 - gonna skip and only do every 5 vertices
105:07 - of the drawing I'm doing this in advance
105:08 - because I already know looking at that
105:10 - it's gonna I don't need that many points
105:14 - so this should now give me all of the
105:17 - points all of the X's and Y's from that
105:20 - particular drawing
105:25 - I'm about to go hit refresh
105:28 - and hope that this works
105:39 - so there it is now this looks doesn't
105:42 - look as beautiful as it possibly could
105:45 - and there's a couple reasons for that
105:47 - right now one thing is these look this
105:50 - looking these weird like alien creatures
105:52 - by the way but it would be really nice
105:55 - to have the epicycles rendered in order
105:58 - of amplitude so right now they're
106:00 - rendering in order of frequency and it's
106:03 - like a strange machine almost like
106:05 - drawing machine and you have the amazing
106:06 - like someone could build this physically
106:08 - but what I'm going to do is sort them so
106:12 - what I'm gonna say a fourier x dot sort
106:17 - and fourier y dot sort now with the J in
106:23 - the JavaScript sort function allows you
106:26 - to pass in a callback which is
106:29 - essentially a function that tells you
106:31 - how to compare each element and I want
106:33 - to compare them by amplitude so I can
106:35 - actually say any two arbitrary elements
106:37 - and I'm going to use es6 syntax for this
106:39 - this is a way of if you haven't watched
106:41 - my arrow syntax and our higher-order
106:43 - array videos which is something you'd
106:46 - give you background for this and then I
106:48 - can just say I think a dot amplitude -
106:51 - bead on amplitude right because if I get
106:53 - a positive number it'll put one in front
106:57 - of the other if I get a negative number
106:58 - it'll put the other one if they're equal
106:59 - it will leave them so this is sorting
107:01 - each one of those by amplitude and if i
107:04 - refresh this oops sorry the smallest one
107:07 - because I would sort of it reverse order
107:09 - so let's put be here be here a here and
107:15 - let's also give myself let's let's clean
107:18 - up some stuff here let's make this 800
107:20 - by 600 let's set the offsets to with
107:24 - divided by 2 the 100 a height divided by
107:29 - 2
107:30 - whoops sorry 100 height divided by 2
107:35 - let's set these offsets a little bit
107:38 - more let's refresh oops let's shrink
107:42 - this up and let's move this down a
107:46 - little bit
107:51 - plus 100 and we'll move this over plus
107:54 - 100 just to give me more room will this
107:57 - work
107:58 - all right this is the thing finished 72
108:06 - hours later there it is oh it's off the
108:09 - bots know it's kind of sitting right
108:10 - there perfectly how did my math that is
108:13 - totally accidental by the way now it's
108:15 - just gonna draw it again over and over
108:17 - again so no skip people or people want
108:20 - me to like get rid of this skip so I
108:23 - could get rid of it let's let's play
108:25 - with that skip now but I want to do a
108:29 - couple of things one thing I want to do
108:30 - is I if time goat does a full cycle then
108:40 - I want to set time back equal to 0-0 and
108:44 - a path clear the path so let's do that
108:48 - so let me just make sure once it gets
108:50 - through the full cycle what's the actual
108:54 - yeah there we go once it gets through
108:58 - the full cycle let's make sure it clears
109:01 - it there we go okay so that's working
109:07 - I'm like obsessively feel the need
109:10 - actually I'm not gonna I want to like
109:11 - constantly tweak the alphas and the
109:13 - strokeweight so though I'm gonna let
109:14 - people make more beautiful versions of
109:16 - this and I'm not gonna do that but
109:17 - people do want to see how this changes
109:19 - with the skip so I am going to list
109:23 - let's let me just make this skip five or
109:26 - four like I'm gonna reduce it and let's
109:28 - just see what happens here so so and you
109:30 - can zoom all the way in here we can sort
109:33 - of see I've got many many more epicycles
109:36 - and you can see that it's doing it
109:39 - without the skip if I get rid of the
109:40 - skip completely or set it to one I'm
109:45 - already like you could see it's just
109:47 - running way too slow to reasonably I
109:50 - mean it's it's just like got too many
109:52 - things to draw and so many of these are
109:54 - probably of radius like less than one
109:57 - I could probably like eliminate anything
109:58 - that's so small and get it to run faster
110:01 - but I think I'm gonna go with a skip of
110:04 - eight
110:05 - and leave this be all right this
110:07 - concludes this particular coding
110:10 - challenge where I took a discrete
110:13 - Fourier transform this particular math
110:16 - function I applied it to an arbitrary
110:19 - signal to signals of X's and Y's then I
110:22 - rendered those as rotating epicycles and
110:24 - how to draw the path whoo I'm very
110:27 - excited that I accomplished this so
110:29 - there are two things that I want to do
110:31 - probably more than two and those are
110:33 - gonna come in separate videos if you
110:35 - made it through this one I am going to
110:40 - first I'm gonna do I'm gonna do I'm
110:42 - gonna take a break I'm gonna come back
110:44 - and I'm gonna make it so that the user
110:45 - draws something and then the then it
110:47 - computes the Fourier transform that
110:48 - really you by the way you should go do
110:50 - that yourself right now so take this
110:51 - code that I've released find them find
110:53 - the link in the video description and go
110:55 - make a version where the user draws
110:56 - something and then do the Fourier
110:57 - transform that's a fun exercise I'm
110:59 - gonna do that in the next video and then
111:01 - I am going to rewrite this so that I
111:04 - have the Fourier transform done with the
111:09 - X and Y's together as a complex number
111:11 - and I just have one set of epicycles
111:13 - rendering the full path but I kind of
111:15 - like these two like x and y machine
111:17 - things it's kind of cool oh oh yeah and
111:23 - Melvin and the chat is saying oh you
111:25 - could use the quick-draw dataset so I'm
111:27 - gonna leave that to you the viewer
111:29 - please make this share it widely make a
111:32 - version of this that renders random
111:35 - drawings from the quick-draw dataset
111:36 - that would be super fun I would love to
111:38 - see that okay you if you if you make any
111:41 - of these exciting fun beautiful strange
111:44 - ugly whatever they are variations on
111:47 - this particular coding challenge please
111:49 - go to the link to the coda train comm
111:51 - look for the instructions on how to
111:52 - submit your variation and submit yours
111:54 - if you have trouble doing that file a
111:57 - github issue or something saying I want
111:58 - to save in mind but I don't know how and
111:59 - we will help okay goodbye everybody and
112:03 - I will leave you with something that
112:04 - really needs to happen to this code
112:08 - later you know
112:12 - [Music]
112:25 - okay where are we timewise 12:30 okay I
112:30 - can do a bonus here the final video
112:35 - would be less than an hour in 20 minutes
112:42 - all right
112:43 - so off the top of my head this
112:47 - definitely needs to be broken into
112:48 - multiple parts I said one thing that I
112:51 - could do I have an idea so one thing
112:55 - would be to go back and redo the
112:56 - beginning but now of course there's I
113:01 - feel like there's no way I could do that
113:04 - and that was oh yeah that's pretty
113:10 - interesting
113:11 - like actually I'm curious to see that as
113:13 - well like what if I skip like 50 points
113:16 - yeah but it yeah so the thing is like
113:23 - there's a different way of doing this
113:25 - where my the transform the number of
113:28 - epicycles doesn't have to equal the
113:30 - length of the signal in that case I
113:33 - could get I could do some interesting
113:34 - variations but and you have modulating
113:38 - the Skip over time would be super
113:39 - interesting there's lots of
113:41 - possibilities there I'm not gonna let
113:42 - you do that
113:44 - so let me for a second okay
113:54 - let me think about this I'm gonna now
113:56 - I'm gonna take 15 minutes here and I'm
113:59 - gonna record will this be also so come
114:02 - look a couple things
114:04 - Kathir all is asking skip by like 23 and
114:13 - don't clear the path oh that's
114:16 - interesting
114:16 - oh that's crazy
114:20 - yeah I'm not sure that's an interesting
114:22 - idea I'm gonna let you all try these
114:23 - things okay some people are giving me
114:28 - excellent suggestions the point of me
114:30 - doing this is for you now to go and try
114:32 - these ideas I
114:34 - can't do all of them and I have to go
114:35 - soon but I think what I need this this
114:38 - probably has to be a multi-part so
114:42 - there's a few different ways of doing
114:43 - this one is I could redo the
114:48 - introduction knowing it's gonna be
114:49 - multi-part and it could kind of explain
114:52 - what I'm doing again maybe I'll try to
114:54 - do it maybe I actually will do that and
114:56 - then the parts that would make sense to
115:03 - divide it up I kind of want it to be all
115:07 - one video though you kind of need to get
115:08 - to do them i but what I could do is
115:10 - excise out though all the time where I
115:13 - implemented this formula and just end
115:15 - with like that could be a separate video
115:18 - that's so weird though because it's I
115:24 - think it ties to get I don't think I
115:27 - think I maybe I'll have to wait and let
115:32 - much yeah maybe I'll have to wait and so
115:43 - I haven't thought me you should have
115:44 - mentioned the more famous version of
115:45 - Euler's formula what's them in this guy
115:49 - [Music]
115:54 - innovation where you do the intro and
115:57 - explain it's gonna be multiple parts or
116:04 - maybe some really serious editing could
116:05 - get this down to less than an hour
116:22 - full screen I'm just I'm really I don't
116:33 - think I'm really I'm lost here as to how
116:39 - to approach this I'm also like
116:42 - hypnotized by the fact that this is
116:43 - working the extra math bits in another
116:46 - video yeah right well all right let me
116:51 - record some stuff just in case this is
116:55 - later the problem is normally what I
116:56 - would do is I would just let Matt chill
116:59 - look this over and then tomorrow I would
117:01 - come back in and record some intro outro
117:03 - stuff but I'm going to LA tomorrow for
117:06 - processing community today so in order
117:08 - for this to not wait till next week to
117:10 - be published which actually wouldn't be
117:12 - the end of the world
117:14 - but I would look to get it out sooner
117:16 - than later I feel like I need to try to
117:17 - anticipate those things also I could
117:19 - record some intro and outro stuff just
117:21 - like person on the street with my phone
117:24 - especially in LA but no one no one is
117:32 - giving me so I'm what's gonna alright
117:39 - yes could you reverse at the end and
117:42 - make it erase it okay alright okay so I
117:47 - have to take matters into my own hands
117:48 - here I'm waiting for someone to in the
117:50 - chat to like just give me the answer of
117:52 - what I should do which is clear not
117:54 - gonna happen
117:54 - alright so option number 1 which is
118:11 - a little behind the scenes here might as
118:13 - well do this live why not I don't know
118:22 - what should be behind me so I'm just
118:23 - gonna record myself talking I think this
118:36 - actually could work hey stop stop the
118:41 - presses hold up everybody so the next
118:43 - bit of this video is a long sequence
118:46 - where I go and actually write the
118:49 - discrete Fourier transform algorithm and
118:52 - ultimately this coding challenge ended
118:54 - up being super long like well over an
118:55 - hour so what I've decided to do is if
118:57 - you're watching this right now you can
119:00 - go and watch a separate video where I
119:03 - write the DFT function and go through
119:05 - all of the math and steps for that but
119:07 - if you continue watching now I'm just
119:09 - gonna go from where that function was
119:11 - finished and and I'm gonna get the
119:13 - results of that to keep going with this
119:16 - challenge and eventually render that
119:17 - coding train logo path okay so it'll be
119:20 - a weird cut here but if you want to see
119:21 - that whole part that I've taken out of
119:23 - this video you can watch that as a
119:25 - separate video linked in this video's
119:26 - description I don't know I don't know if
119:31 - this is gonna work so I'm just recording
119:33 - this as a possibility okay now and now
119:38 - what I'll do is I think maybe
119:50 - I don't know if this is gonna work but
119:53 - we will we will try it anyway whoops
120:05 - camera went off be good yeah okay hello
120:19 - this video is a bit of an aside and it
120:22 - does it can stand alone if you want to
120:23 - watch it alone but this is a companion
120:25 - video to my coding challenge draw a path
120:30 - with Fourier transform epicycle magic
120:32 - weirdest thing and in this video what
120:35 - I'm gonna do is take this particular
120:37 - formula from the discrete Fourier
120:39 - transform Wikipedia page I have written
120:42 - it whoops sheet I'm gonna take this
120:50 - formula from the discrete Fourier
120:52 - transform Wikipedia page I'm gonna take
120:55 - this formula I'm going to turn it into
120:58 - JavaScript so that's what this video is
121:00 - gonna do and then at the end of this
121:02 - video that function is we just do this
121:06 - again I forgot where I was and what I
121:08 - was doing this video is a little bit
121:20 - strange little different than what I
121:22 - usually do it's a this is a companion
121:24 - video that goes along with my recent
121:27 - coding challenge transform okay what
121:34 - we're trying overdrive because everybody
121:36 - should go now stop watching this is me
121:38 - trying to like make this all work but I
121:40 - have another I have another idea there's
121:42 - I'm gonna do like a second way of
121:44 - editing this together in a second so
121:46 - this is gonna be a while I'm gonna be
121:48 - here for like another 20 minutes doing
121:49 - this weird interstitial nonsense hello
121:53 - welcome this is a bit of a strange video
121:55 - different than what I usually do on the
121:57 - coding train but this is a compan
121:58 - video you can watch it on its own but
122:00 - the point of this video is to take this
122:02 - equation formula from the discrete
122:05 - Fourier transform Wikipedia page and
122:07 - write a function in JavaScript that
122:10 - implements this formula and the reason
122:12 - why I have this is a separate video is
122:14 - I'm going to use this function which I'm
122:16 - calling DFT in a coding challenge where
122:20 - I make this crazy drawing machine out of
122:25 - rotating circles and the Fourier
122:27 - transform algorithm so that video has a
122:30 - part cut out when I did this live all
122:33 - this happened in sequence but it became
122:34 - so long this implementation is in a
122:37 - separate video
122:37 - whose me spending way too much time
122:39 - trying to explain this but keep watching
122:41 - if you want to know the details of how I
122:43 - actually wrote that DFT function ok now
122:47 - I'll do something for the end probably
122:55 - alright thanks for watching this
122:57 - implementation of the discrete Fourier
122:59 - transform algorithm in JavaScript if you
123:02 - want to see how I use this function to
123:04 - make exactly this these rotating circle
123:06 - drawing machine epicycle thing that
123:08 - renders the coding train logo then you
123:10 - can click over to the coding challenge
123:12 - where I explain a bit more about how
123:14 - this thing works and implement that as
123:16 - well ok thanks for watching
123:20 - ok yes
123:31 - s'okay weak mon you're saying have you
123:32 - considered treating the input as a
123:34 - complex number instead of two separate
123:36 - real ones yes I know the reason well I
123:39 - kind of wanted to do that as a false
123:42 - part too like I was gonna do it's like a
123:44 - second part I don't know why did it this
123:48 - way but yes but I mean ultimately I
123:51 - thought I'd mention that at the end of
123:53 - the video but maybe I didn't okay now
123:57 - all right so now this is my second idea
124:02 - for how to so I am going to I'm going to
124:10 - redo the whole intro thing
124:12 - and reference all of these pages
124:22 - references so now I'm going to do a set
124:37 - of intros as if this was a multi-part
124:43 - video and I think it would make sense
124:45 - for it to be two parts one part where I
124:49 - get all the way through implementing the
124:51 - discrete Fourier transform function and
124:54 - the second part being doing the
124:57 - visualizing thing and by the way another
124:59 - option Mets U is it's just standalone as
125:01 - what it is that would also be fine so
125:10 - I'm gonna do I just feel like I don't
125:19 - want to rule but there's no good like
125:21 - end point to part one so there's not
125:23 - really any reason for me to like release
125:26 - them on separate days let me just redo
125:30 - the intro is in a shorter way I think I
125:34 - can safely erase this
125:54 - okay okay okay
126:09 - I'm gonna I'm gonna make an introduced
126:11 - in true explain that this is especially
126:15 - long I don't know what to do
126:19 - I you know Matt you at worst-case
126:22 - scenario I'll come back next week this
126:24 - will just be a while till we release it
126:25 - which is fine it's fine
126:27 - okay all right hello welcome to a coding
126:32 - challenge I actually just finished this
126:34 - coding challenge on coming back to
126:35 - record a little intro to it and what I
126:38 - made in this coding challenge is a
126:39 - drawing machine this is I would maybe
126:41 - let's call this like a Fourier transform
126:43 - drawing machine and there's a few more
126:44 - things I'm gonna do with it there's
126:45 - gonna be some follow up videos but this
126:47 - very very long video if you can stand to
126:50 - watch it has as part of at the end this
126:55 - this is the end result I am using a for
126:58 - an algorithm called Fourier transform to
127:00 - take an arbitrary signal in this case a
127:03 - sequence of X's and a sequence of Y's
127:05 - the path of the coding train logo thank
127:08 - you to Tom FAA I will link to Tom
127:11 - ferries Twitter who provided the path
127:13 - for this particular logo to to trace the
127:18 - path of the logo through these wrote
127:20 - this sort of sequence of rotating
127:22 - circles sometimes referred to as like
127:24 - epicycles okay so what's going on here
127:27 - so this first thing I should mention is
127:29 - this is a continuation of my coding
127:33 - challenge Fourier series and so what I
127:36 - did in that particular coding challenge
127:38 - which was inspired by a smarter everyday
127:40 - video on the same topic with it create
127:43 - the Fourier series for a square wave I
127:49 - don't know why I just had to write that
127:50 - but in this video I'm going to do
127:52 - something different which is I'm going
127:54 - to use the Fourier transform algorithm
127:57 - and these are different concepts I
127:59 - somewhat conflicted things in my
128:01 - previous video the idea of the Fourier
128:04 - transform now where I know that's
128:06 - algorithm from where I learned about
128:08 - this algorithm first in like learning
128:10 - about coding and creative coding and new
128:11 - media and sound and video is with the
128:14 - terminology FFT and actually if you go
128:17 - into the p5 sound library
128:20 - you'll see there is a class or function
128:23 - called p5 FFT I don't remember exactly
128:25 - what it's called but something like that
128:27 - the F here stands for fast fast Fourier
128:33 - transform the algorithm I'm going to
128:35 - implement by the way is discrete Fourier
128:38 - transform some time out for a second now
128:42 - this is where I'm gonna like optionally
128:44 - say something but this could also be
128:48 - just kind of cut out depending on
128:52 - whether we leave the Fourier transform
128:53 - thing in or not okay my implementation
129:07 - of the discrete Fourier transform
129:09 - algorithm is actually in a separate
129:11 - video I'm just gonna use the function
129:13 - directly in the code as I do this coding
129:16 - challenge but you can watch that video
129:18 - as well to see all the code for that but
129:20 - now why is this FFT thing where is it
129:24 - typically used
129:25 - well it's typically used in what's in
129:27 - signal processing but a familiar place
129:31 - where you might find that is in audio
129:34 - signal processing processing so let's
129:36 - say you have some arbitrary sound wave
129:38 - that maybe looks like this and it hasn't
129:40 - really like high-pitched awful like
129:42 - screeching sound in it
129:44 - how would you filter that out well if
129:46 - you could take this sound wave pattern
129:49 - and break it into a bunch of smaller
129:55 - sound waves a bunch of sound sound waves
129:58 - that have varying amplitudes and
130:00 - frequencies then you could take you
130:04 - could sort of remove the one that has
130:06 - this sort of like high-pitched sound in
130:08 - it and then add them all back together
130:09 - and get a new sound wave so the idea of
130:12 - a Fourier transform it's I think I said
130:15 - this in the Fourier series version it's
130:16 - unsmooth eing a smoothie right if we
130:19 - could take a smoothie that's made with
130:22 - like blueberry mango and strawberries
130:23 - and like separate it out and then put it
130:26 - back together without the strawberries
130:28 - this is essentially what happen
130:30 - in signal processing but in this video
130:33 - what I'm going to do is instead of the
130:35 - signal being an audio it's going to be a
130:37 - series of X values or a series of Y
130:40 - values and eventually there's actually
130:41 - way to do that with the X Y values
130:43 - together that I will get to so I am NOT
130:45 - going to go too deep into the math in
130:48 - this particular video I'm not going to
130:49 - derive before a transform algorithm I'm
130:51 - not going to talk about fast Fourier
130:52 - transform I'm just going to use a very
130:54 - kind of crude discrete Fourier transform
130:59 - implementation just to get the thing
131:01 - working if you want to know more about
131:03 - the math though let me reference a few
131:06 - really key references the the three blue
131:11 - one Brown video but what is the Fourier
131:13 - transform will give you a infinitely
131:15 - better understanding of what the Fourier
131:18 - transform algorithm is and what it does
131:21 - and even how it works what better than
131:23 - my like ramblings trying to ramble
131:25 - through that over on the whiteboard I
131:26 - would also highly recommend this
131:29 - gold-plated goof video Fourier analysis
131:32 - for the rest of us which goes through
131:33 - the details of the math in much in a
131:37 - much deeper way and then there's this
131:39 - wonderful video from Mythology epicycles
131:43 - complex Fourier series and Homer
131:45 - Simpson's orbit which will give you the
131:47 - full story of everything that I'm trying
131:49 - to do but hopefully what's useful to you
131:51 - that's different in my video than from
131:53 - B's is I'm just gonna sit here and
131:55 - attempt to code the thing and I know
131:58 - that it's gonna work because I already
132:00 - did it and here is the result so enjoy
132:03 - this is a very long video I hope that if
132:05 - you watch it you get the code you make
132:07 - your own variation of it please share it
132:09 - with me you can go to the codec drain
132:11 - com2 the particular coding challenge
132:12 - page and there's instructions to have
132:14 - submit a user community variation thingy
132:17 - there okay goodbye enjoy or not or
132:20 - whatever
132:33 - all right so I don't know I don't know
132:36 - if that's good oh yeah tonight was that
132:44 - I don't know if that was better I don't
132:49 - know if that was better than my first
132:50 - try and I also didn't say well I I could
132:55 - do one more
132:57 - no I just don't think it should be
132:58 - multi-part um okay okay so I don't know
133:17 - I don't know what to do about this okay
133:22 - i in the ideal world the whole thing
133:25 - would just be one video okay in this
133:30 - multi-part because now I'm gonna do
133:31 - something else okay oops
133:36 - all right I gotta do one more I have to
133:38 - go soon but I'm gonna do one more thing
133:42 - so let me actually want to save this as
133:46 - its own thing so hold on bear with me
133:51 - for a second I'm gonna call this 48
133:55 - coding train
133:56 - I actually know hold on and
134:06 - and then a user drawing take and
134:49 - so sorryi my brain is broken okay sorry
135:04 - okay I know these are drawing okay and
135:14 - maybe maybe I should do the awful
135:17 - whatever just sorry I'm just like lost
135:33 - my mind here okay there we go
135:41 - okay Simon wants me to say Oilers
135:43 - formula and also say that e to the I pi
135:47 - plus one equals zero is the more famous
135:49 - version of the formula okay I've said it
135:54 - okay let's close all this let's open
135:58 - this up okay
136:07 - all right here we go last bit for today
136:24 - so Kasab is asking when does the edited
136:28 - video go up so the edited video would
136:33 - normally normally I do stuff on a Friday
136:35 - and then the edited video goes up Monday
136:37 - or Tuesday because today is Wednesday
136:39 - and fury it's possible the edit video
136:42 - would be later this week but more likely
136:43 - next Monday or Tuesday or sometime over
136:45 - the weekend there's also the added
136:46 - complication that I am going to LA for
136:50 - processing immunity day tomorrow and it
136:51 - might may actually make the most sense
136:53 - for me to come back and record the
136:56 - explanation stuff later after the fact
136:58 - again in which case the edited video
137:00 - would be later next week so all of these
137:02 - things are possible ok but and I almost
137:10 - want to do the thing where I change this
137:12 - to a complex number input I just I can't
137:14 - do that right now
137:15 - I can't I have to go I'm gonna just do
137:18 - all right hello
137:25 - all right this Fourier transform stuff
137:26 - is so fun and interesting and weird this
137:29 - is the end result of the coding chat the
137:31 - very long coding challenge that I just
137:33 - completed and I'm gonna be doing a
137:35 - couple different follow-ups so this
137:36 - first follow up I just want to like
137:38 - write the code to instead of using the
137:39 - coding trade logo have the user draw a
137:42 - path and then have foreo transform that
137:45 - and render it the second follow-up that
137:47 - I want to do is instead of having two
137:49 - separate rotating sets of epicycles one
137:52 - for the X is and one for the Y's I can
137:54 - actually treat the input to the Fourier
137:56 - transform as a complex number itself and
137:58 - have one set of epicycles so I'll come
138:00 - back and do that in a separate video
138:02 - that'll come out later you can try that
138:03 - on your own but I will get to that so in
138:05 - this video I'm just going to see cuz I
138:07 - truly want to see it if I draw a path I
138:09 - want to Fourier transform that so how am
138:11 - I going to do that so the thing that I
138:13 - need is well one thing is I no longer
138:16 - need this coding trained j/s file which
138:19 - has the full path of that particular
138:22 - drawing instead what I need is a I need
138:30 - a variable called drawing and I need
138:32 - probably like a state and I'm gonna say
138:36 - like some
138:37 - thing like a like user like these will
138:44 - be the two states of the program so in
138:47 - other words whoa
138:50 - like if the state so I'm making two like
138:54 - constants one is 0 1 is a 1 and I know I
138:57 - could use like enumerables or something
138:59 - like that but that's not me you know I
139:02 - can't be bothered it's every factor this
139:05 - later I won't play the song so I'm gonna
139:08 - start with the state being user and if
139:09 - the state is user if state equals user
139:16 - I'm going to do something different than
139:19 - if the state is 4ei and there's only two
139:22 - possibilities here so I could use a
139:24 - boolean but there might be other things
139:25 - I want to do with this later so let's
139:26 - just start with that and there's no
139:29 - reason for me to do the Fourier trenny
139:32 - of this stuff in setup anymore but I do
139:35 - want to have this code for reference and
139:38 - and then I think what I want to do is
139:44 - when the mouse is pressed well the state
139:50 - should be user and if the mouse is when
140:00 - the mouse is released these are two
140:02 - global event functions I want to make
140:05 - the State for ei so basically the idea
140:10 - is when I click the mouse I'm about to
140:11 - do a drawing I need to record all the
140:14 - points so in draw if the state is user I
140:18 - want to say the current point is create
140:22 - a vector which is Mouse X Mouse Y and
140:28 - then I want to add that to the drawing
140:33 - and what I would do is always want to
140:40 - press the mouse reset the drawing array
140:42 - to an empty array and then I release the
140:44 - mouse
140:45 - I would calculate the Fourier transform
140:51 - and I'm going to assume that I can use a
140:54 - skip of one and this should work
141:00 - I mean I my offsets are gonna be wrong
141:02 - but let's see what happens so so now if
141:05 - I go here and I hit refresh
141:07 - there's nothing now in theory if I were
141:10 - to draw a circle like this and release
141:12 - there we go there's my drawing now it's
141:14 - weirdly down here in a different place
141:16 - than I drew it and I wasn't able to see
141:18 - it while I was drawing so I need to fix
141:20 - that a little bit so one thing that I
141:22 - should do is and please let me just
141:23 - minimize this this is it keeps coming up
141:25 - one thing that I should do is probably
141:28 - record the points relative to relative
141:34 - to the center of the window and then
141:41 - also I also want to be rendering it so I
141:46 - would want to say for every point
141:50 - actually I'm gonna say every vector in
141:52 - drawing let's actually render it while
141:55 - I'm drawing it begin shape and shape
142:00 - stroke and let V of drawing stroke 255
142:05 - no fill and just set a vertex to look
142:13 - like the shortest video effort fared to
142:15 - the last one I'm instead of vertex so
142:18 - this is me like when the state is in the
142:20 - user drawing state I'm gonna render all
142:22 - the vertices and your there's gonna be a
142:24 - little bit of a problem with this ooh ah
142:26 - oh but only ah so state actually at the
142:32 - beginning should be I just realized the
142:37 - state should be negative one right I'm
142:41 - not gonna I'm the state is something
142:44 - else it's like the start and I suppose I
142:46 - should have some instructions like draw
142:47 - something so the state is negative one
142:49 - because I actually don't and then when I
142:51 - click the mouse but you see my drawing
142:54 - is up there but this worked ok great so
142:58 - now what I want to do
143:02 - I think about this correctly I just need
143:06 - to I'm storing the points relative to
143:09 - the center I could use translate or
143:11 - something smarter here but I could just
143:13 - set them when I draw them relative to
143:16 - the center so now Here I am I'm gonna
143:18 - draw a very elaborate like figure 8
143:22 - pattern it's like this and then you can
143:25 - see now there it is and it's a little
143:29 - bit off rate is not it might not be
143:31 - exactly where I drew it but you can see
143:33 - now and then if I can draw a circle oh
143:39 - ok didn't recalculate the Fourier
143:42 - transform which is added it to the end
143:44 - how weird I thought I read when I do
143:48 - Mouse released
143:50 - I should redo the drawing why didn't
143:54 - this work right if I do one thing and
144:00 - then do another thing why is it still
144:02 - both because when I click the mouse
144:05 - again it should reset the drawing to
144:09 - zero
144:10 - oh the X's and Y's didn't get reset
144:14 - because I have this weird extra okay so
144:17 - that needs to happen ok so now if I draw
144:19 - this circle I get this it's upset is
144:22 - wrong and then if I do this it'll do
144:29 - epicycles for that okay so let's get the
144:32 - offset stuff actually correct and so one
144:36 - way to do that would be to actually just
144:40 - here have everything be relative to the
144:44 - center so where do I calculate the
144:46 - Fourier where do I draw the Fourier
144:48 - stuff here with let's get rid of this
144:55 - plus 100 ok so now if I draw very slowly
145:02 - this circle right here as soon as I let
145:06 - go we're gonna see it draw it right
145:10 - there there we go
145:11 - so this coating Johnson now complete
145:12 - let's just make sure I'm gonna draw like
145:14 - now this
145:16 - very like my drawn version of a sine
145:19 - wave and there we go now my drawing
145:23 - machine is rendering it okay so I just
145:26 - wanted to do this to show you at least
145:28 - some creative possibilities here there's
145:31 - so many things that could be done to
145:34 - refactor this to make it better but I
145:38 - just wanted to do this follow-up because
145:40 - this might help you start to think of
145:42 - other creative ideas of things you might
145:44 - be able to do with this particular
145:45 - Fourier transform epicycle drawing
145:48 - coding challenge thing now I am going to
145:51 - return at some point in the future and
145:53 - do one more video where instead of doing
145:56 - the X's and Y's separately I process
145:58 - them together and that I think will also
146:00 - be something fun - and interesting to
146:03 - play around with so we need a little bit
146:05 - more sense of how complex numbers work
146:08 - in order to do that but so you might
146:10 - want to go if you haven't watch watched
146:12 - go back and make sure you review the
146:13 - implementation of the discrete fourier
146:15 - transform algorithm because i'm gonna be
146:17 - so basically be redoing that but have
146:19 - the inputs be complex numbers themselves
146:21 - okay thank you very much see you in the
146:25 - future please share with me versions of
146:27 - this that you make and I will see you
146:28 - soon goodbye
146:31 - [Music]
146:33 - okay Oh interesting you can reset an
146:41 - array using splice zero which lets it be
146:43 - a constant if you wish great okay
146:55 - draw it has to be a continuous path
147:08 - this is way too much fun I'm definitely
147:18 - gonna have to screen capture this hold
147:20 - on so I'm gonna use this ah I lost it I
147:26 - have to do it again okay I could do this
147:32 - on my own time a lot Oh cuz the stupid
147:41 - Mouse if I click anywhere
147:43 - oh wait I'm not screen capturing I will
147:48 - hold on
147:50 - well this let's record it like this will
147:58 - behind the scenes here let's make a nice
147:59 - little recording of this okay can I get
148:07 - this in 30 seconds I think that's the
148:09 - limit of gift fees recording I have to
148:15 - do it in 15 seconds
148:23 - well what just happened there what is
148:26 - going on I broke something insanely what
148:34 - there's a bug in my code
149:04 - [Laughter]
149:10 - I'm gonna I'm gonna make a but why I I
149:13 - feel like there's weird there's just
149:17 - like something left over see what's
149:22 - going on Schiffman see my concept above
149:23 - you also need to reset the phase of the
149:26 - epicycles thank you thank you alright so
149:35 - that was that's a bug I don't think I'm
149:43 - gonna also okay
149:56 - quick little interstitial I also need to
150:00 - make sure I reset time back too zero I
150:04 - forgot about that before I don't know if
150:09 - that's what's weird no no I still it's
150:17 - not just resetting time drawing XY
150:28 - I like
150:37 - what is going on
150:47 - Oh ooh I need to reset this all and
150:49 - released shouldn't matter right yeah
151:16 - Oh paths ah there's too many things to
151:20 - reset I forgot about that
151:25 - that's the problem
151:35 - yeah okay I'm just being a silly okay
151:38 - hold on
151:52 - okay yeah okay oops this is a weird
151:59 - edit point in this video because when I
152:00 - made it I actually forgot to reset a
152:02 - bunch of other things so really for this
152:04 - to work well even though as the video
152:05 - goes on it kind of works anyway I should
152:07 - be resetting time back to zero because I
152:10 - want to start at the beginning as well
152:12 - as path as well as resetting the path as
152:17 - well sorry these don't have to be reset
152:25 - one more time because for EAX and for a
152:30 - Y will get re those get those get
152:32 - created as blank arrays so those
152:34 - actually don't have to be reset sorry
152:38 - for this weird edit point of jumping in
152:40 - because when I did this coding challenge
152:42 - just a moment ago
152:43 - I forgot that I also need to reset in
152:46 - addition to resetting the drawing and
152:47 - the x's and the Y's I also need to reset
152:50 - the time back to zero so it starts at
152:52 - the beginning and I better like clear
152:55 - out that path so this is pretty awkward
152:57 - there's probably a nice way to refactor
152:58 - the resetting of everything but this
153:00 - will make it work with fewer bugs so
153:03 - thanks and now the challenge is going to
153:04 - continue so let me make sure that gets
153:11 - this and there we go okay so now just
153:17 - humor me for a second I really want to
153:31 - oh wait I'm not capturing the capture
153:36 - cursor yes
154:04 - okay there now I have my gift and starts
154:13 - right about here right draw it and then
154:21 - [Music]
154:27 - it Fourier transforms it did not start
154:31 - at the beginning who knows
154:43 - no it did and then this I should be
154:47 - doing on my own time not why I'm
154:49 - live-streaming by the way there we go
154:52 - let's make this 6:40 and save as on the
155:02 - desktop I'm gonna make oh sure make it a
155:11 - large gif I don't care
155:16 - [Music]
155:17 - looks like a groove okay geez I wanted
155:29 - to make it a gif
155:30 - so that it but I have a feeling this is
155:32 - just gonna be oh no it's only 2.2
155:38 - megabytes
155:39 - it's totally fine give me a break
155:42 - give me a break give you a recorder who
155:45 - seemed to think that right am I crazy
155:49 - yeah 2.2 megabyte that's not too big in
155:52 - fact I can make the framerate high okay
156:01 - all right apologies everybody I'm done
156:03 - from today I am going to go there up
156:07 - there so another thing that you could
156:09 - try by the way is could you come up with
156:11 - a way to not have to do I should mention
156:14 - that to not have to do it as a
156:15 - continuous path that would be kind of
156:19 - interesting right how could you do make
156:21 - multiple sequences that draw the like to
156:25 - break the path into parts and actually
156:28 - know which parts like are lifted up and
156:31 - lift it down that would be interesting
156:37 - okay so I will be posting all of this
156:45 - code and everything soon the next live
156:50 - stream let me just see this it takes
156:54 - quite a while to start
156:57 - 4.2 minutes all right I'll deal with
156:59 - this later all right I have to go
157:00 - thank you everybody this has been a
157:02 - almost three-hour live stream not three
157:05 - hours I feel satisfied that what I made
157:08 - it through this project the code will be
157:11 - posted and out there soon enough but
157:14 - you'll you might have to wait even a
157:16 - whole week for the edited version of
157:18 - this video to come out but I will be
157:20 - back the next live stream and I don't
157:22 - know what I'm gonna do yet on the next
157:25 - live stream will be a week from this
157:26 - Friday if you will be in Los Angeles and
157:28 - I see you at processing Community Day
157:30 - please let me know and then I also just
157:31 - want to remind you that I am making
157:35 - plans for a new playlist of videos
157:47 - related to working with data and api's
157:51 - and so if you have ideas for how I
157:55 - should structure this and examples you'd
157:57 - like to see me to do how to sequence it
157:59 - this will be a new set of tutorials for
158:02 - related to a class that I'm teaching and
158:05 - so feel free to file issues with
158:09 - questions or ideas or even pull requests
158:11 - if you want to help me collaborate on
158:13 - the code examples and syllabus outline
158:16 - okay so d t6s when are you going to post
158:22 - the code I will do that by the end of
158:28 - today actually yes so I will do that by
158:34 - the end of today just tweet at me if I
158:37 - haven't done it and that will remind me
158:39 - at Schiffman if by the way you'd though
158:43 - you can actually find it it's not the
158:45 - code that I wrote today but basically
158:47 - the same pretty much the same code is
158:49 - here at github comm / Schiffman 4ei -
158:52 - drawings this was my like practice for
158:54 - it alright thank you everyone who
159:03 - attitude
159:05 - I'll sit here Simon you can help me out
159:37 - with your perfect picture why is this
159:55 - all buzzy
159:58 - what's buzzing is it the tuner or
160:05 - something rattling you're that what's
160:16 - rattling that rattles even more even
160:27 - more there's something in there
160:38 - [Music]
160:50 - sad ukelele something like but it's just
160:54 - been sitting here all this time somebody
160:56 - came in and sabotaged me this is such a
160:59 - nice ukulele yeah here's something oh
161:18 - well I think maybe now is not the time
161:20 - for me to figure this out I hear
161:25 - something shaking is it
161:28 - let's loose something inside there can
161:41 - take off the strap for a second cuz
161:42 - that's make sure it's not the strap
161:47 - [Music]
161:49 - it's a fret
161:51 - it's fret buzz yes I think but here's
161:56 - something shaking could there be a crack
162:09 - when a fat far three-foot when is the
162:12 - edited video with npj fun fun function
162:14 - coming out I don't think there's any
162:18 - edited vision I don't know what that's
162:20 - referring to that the mpj livestream I
162:22 - don't think has an edited component it's
162:25 - definitely something up top here that's
162:26 - rattling or not alright I will deal with
162:33 - this later
162:37 - yeah Mac that's weird
162:51 - strap screw our neck adjustment screw
162:54 - inside the cavity it sounds like it's up
162:57 - here although not necessarily oh you
163:03 - know what it is now you have no idea
163:09 - because it's so it resonates all around
163:11 - so it sounds like the tuning pegs okay J
163:16 - wheezes tuning pegs
163:17 - I am a ukulele player so if it's the
163:20 - tuning pegs
163:21 - [Music]
163:24 - yeah it's buzzing up here
163:28 - [Music]
163:34 - look at this if I pulled my thumb on
163:37 - here and it goes away so I think that's
163:46 - just this one is probably loose I
163:48 - probably need to tighten this screw
163:49 - right let's probably this one that's
163:52 - rattling yeah tuning pegs get loose
163:56 - that's what it is because if I hold my
163:59 - [Music]
164:08 - alright well I'm gonna put this aside
164:11 - and I will come back to that another
164:13 - time
164:14 - the next time I need that is for the
164:15 - next year's holiday fundraising okay
164:17 - goodbye everybody I will be posting the
164:19 - code soon thank you for joining me on
164:20 - the coding train today it is 1:15 I'm
164:24 - gonna go I will be in Los Angeles at
164:27 - processing community today please say
164:28 - hello if you are there I will be back in
164:31 - live streaming a week from Friday stay
164:34 - tuned for more ml5 tutorials nature of
164:37 - code stuff some coding challenges but in
164:39 - particular a new set of tutorials about
164:42 - working with data and api's and
164:43 - javascript what and I will refactor
164:49 - [Music]
164:52 - the ukulele later
164:54 - [Music]
164:58 - I'm gonna be clicking this stop
165:00 - live-streaming button in a second if I
165:03 - could find it oh let me see here thank
165:06 - you by the way to ilysm for the super
165:09 - chat and subha Parikh for being a new
165:12 - member i now by the way figured out a
165:13 - way to have a running log of any super
165:16 - chats or new members that i can refer
165:17 - back to later during the livestream so
165:20 - if you posted one i will see it and be
165:22 - able to answer the question but there is
165:23 - just a couple here thank you very much
165:27 - oops and now just logged me out of
165:30 - something that was weird now I'm gonna
165:39 - hit stop life streaming where is that
165:44 - stop dreaming there it is goodbye

Cleaned transcript:

hello good morning hello good morning I'm saying that twice because I think the live stream is beginning I'm gonna start hopefully in about 10 to 20 seconds seeing chat messages saying hello scrolling by I'm gonna post a quick note here saying live now and I see the messages saying hello okay like right here this is a new shirt you might not see me wear this to it before this weird okay welcome to another coding training today is Wednesday January 16th it's a bit of a strange day for a coding train episode but it is the day that it is happening and before I begin talking about what it is that I'm planning to code today I just want to go over some plans that I have for this new year that is 2019 so hello welcome happy new year so I have some goals and desires and hopes and dreams and fears for this year it's a little bit of a slow start I had a wonderful time I'm thank you to the tank Paris and grow Paris for hosting me in Paris France for a workshop last weekend I really enjoyed that and getting to meet some of you maybe maybe some of you who are watching this live right now if you if you were at the workshop in Paris please say hello in the chat and so that was away for a while I'm back and then oh it's so exciting tomorrow I leave for Los Angeles to attend processing Community Day so let me pull this up here processing community de Los Angeles so this is happening this Saturday maybe some of you are watching this right now will be in attendance and I will get to see you I will be there with my stickers I would love to say hello to as many of you as possible so please I think there's still tickets available if you're in the Los Angeles area but I'll also note that in addition to pressing community De Los Angeles there is processing Community Day worldwide and so here we can see a map of all the different processing community days that are scheduled in the next month or so around the world so I encourage you to find your local one and attend if you can and participate I will also be at processing community in New York which I believe is February 9th if I have that right and just recently I think if we go to twitter.com processing India maybe is that the Twitter handle yeah look there I am I won't be unfortunately at processing day in Bangalore I think there are three processing communities in India but this particular one in Bangalore just released a I don't know if that I don't know if it's just test this little video of me saying hello Bangalore along with some other people doing that as well alright so I'm gonna get my haircut later today so get used to this nice long that longish hair and beard it's time for processing Community Day I must get myself cleaned up to look like a professional person who knows what they're doing which I am absolutely not I banged on the desk and the HDMI connection went a little haywire okay now I have some other things that I want to mention but I'm gonna still live streaming or and I okay ah yes so 2019 what is happening in 2019 oh so many things so I will be continuing to make more videos about tensorflow Jas and ml5 jazz which are both machine learning libraries in JavaScript I will be coming back to that as time goes on that won't be part of today so I things on the horizon are more word to vac more I want to do word Tyvek more sketch RNN as in terms of different pre train models I want to look at K and an K nearest neighbor classification and and more so those are things that are coming in terms the machine learning stuff that I plan to do I also if I've been segment for the last three years and working on updating the nature of code book to be written with JavaScript and p5.js as well as some new material for that so stay tuned to be on the lookout for that then the other thing that I'm doing and I just put this together this morning if I go to github.com slash coding train I forget what the repo is called already I didn't intro to data api's and JavaScript so I am planning a new playlist I've made I've made videos on this topic before but they are somewhat outofdate and I think I want to take a new approach here and the title for this playlist is called working with data API has a Java Script repeating myself this is a working document outlining future plans for a new coding train playlist working with data in API so JavaScript if I keep saying the name of the title maybe what it is I'm actually gonna do in this series this course is for aspiring developers who want to learn about how to work with data and web applications how do you find collect clean analyze and visualize data I'll start with the basics of data formats CSV XML and JSON I'll then cover how to use promises and the JavaScript fetch function to load data asynchronously on a web page I'll do case studies of several api's and explain how to sign up an authenticate make a request and load the data and we think this could I wrote this at one point and I'm like reminding myself of it now I'll look at how this works for both clientside and serverside I'll demonstrate how to visualize the data using html5 canvas and p5 GS and the course will end with a demonstration for how to analyze data using modern machine learning techniques such as classification regression and clustering wow that is very ambitious I'm gonna have this like sample lesson idea so I don't this is something I'd like to do with with planning and I'd actually like to make examples in advance and have an outline and sort of a sense and I'm hoping this will be like 10 to 15 videos I know so I see Simon tiger by the way in the patrons black channel saying hang on and I know exactly was gonna write you can say you already have this playlist I can say it before he types it of course he's but this is going to be a new reimagining of that content I'm gonna do look at new different api's and new stuff and think about it in because a lot of that stuff is out of date and things have changed okay now what I want to just look really quickly I just want to remember I just have to look up something because I have to mention something but I forgot exactly I want to make sure I look at the guidelines okay all right okay all right so why am I doing this well I'm doing this for a number of reasons I think this is an interesting and useful topic but I'm also doing this through a learning incentive grant from YouTube itself so thank you to youtube and google for supporting this project I will be I'm my plan is to start these videos maybe at the end of January beginning of February so I am asking you the community to help me organize the content for this so you can file issues here you could make pull requests there's very little here I'm gonna start building out an outline and making a plan for this and all the code examples will also end up in theory in this repository as well so this is something I'd like to do more planning and for and it'll be a little less of the usual sort of like live coding I can't figure anything out stick and so I'm looking for your your ideas and suggestions there okay I wanted to mention that that's so that's the main thing so coding train will be coming to you I don't know like I'm gonna try to have a regular especially for this what's essentially like a new course that I'm gonna try to teach using these of YouTube videos my goal is to have a dedicated weekly time that I'm presenting on this and I haven't figured out what that time will be but I can tell you that the after today the next livestream will be Friday I believe that's January 25th yes so I'm livestreaming today and then next Friday January 25th and then the semester at New York University ITP to school the arts begins and I will establish a weekly time okay okay now this brings me to today if I can get through today if I can make what I want to make today in the next two hours I will be a happy camper and I will ride off into the sunset which is more like an airplane to Los Angeles for processing Community Day feeling fulfilled satisfied but more likely everything will go wrong I'll have lots of problems I will fail and you will learn something possibly from watching that happen now what is it that I'm going to do so what I am going to do is not a new idea and it has and it's an idea that I've had in the back of my mind for quite some time and it recently came to the forefront of my mind again when smartereveryday released the video for EI series smarter every day so let me bring that up so you I'm not gonna click on this but this is what is a Fourier series explained by drawing circles smartereveryday so I went and made a coding challenge which is this coding challenge sub hum in the chat is asking how are you back in your studio weren't you in Bangalore like two hours ago so there's this thing called the internet at video I was not in Bangalore I just said hello Bangalore from a video taken on this particular laptop with this particular webcam from New York City I wish I had been in Bangalore so this is the Fourier series which takes a square wave pattern breaks it down what doesn't it uses a Fourier series to visualize that to add a bunch of different wave patterns together at various frequencies and amplitudes and add and to reconstruct the square wave so that's what I did before now if you watch the whole smartereveryday video oops I'm which was is here you will see that towards the end I should be able to find this bill where's that Turkish actually I have all these in my whole lot just want to get all the links I need here this is my that here we know this is it yes sorry I was trying to find so this is the article about the Fourier series from this Turkish website which I learned recently translates to science is awesome which I love I think maybe there might be some more nuance to what the actual translation is but that's the gist of it and I don't know if this I can't recall if this article gets to it but by the a doesn't actually but as part of the smartereveryday video the researcher Doga created a used a fourier transform which is a way of taking a particular signal a pattern and breaking it into its frequency components to render the smartereveryday logo and this is something that's been done many many times by many youtube births more interesting and smarter and clever than I am such as math a logger Fourier so there's this particular epicycles Fourier series and homers orbit I highly recommend this particular video and this particular YouTube channel is fantastic then there is also there was what is the one that was it's like it has like a golden in it or something what the other YouTube video that let's see 48 lets 48 transform YouTube drawing I don't know why I'm thinking that word gold is in there somewhere I don't think it is anyway there's a youtuber someone's gonna tell me hold on let me get to the slack channel gold plated goof okay thank you I knew I watched something like a month ago there is also there it is oh look at this gold plated coupe Fourier analysis for the rest of us so I am going to let's pull this up hi everyone okay let's let's let's put this here let's get this over here let's get that matha lager let's get this here okay so these are and then of course of course it goes without saying there is what is like you know for me the canonical explanation of what is a Fourier transform of the three Bruhl ooh round three blue one Brown video but what is the Fourier transform a visual introduction so this is all of my background and actually on the flight on the flight back from France I worked out my own version of this in a slightly simpler more simplistic way which used a basic 1 dimensional Fourier transform to to process the X's and and the Y's of a path separately and visualize those X's and Y's as a series of circular epicycles and to render this particular dawn and this particular is the coding terrain logo transformed into a continuous path which came via Tom fifthly a who I met in Paris so this is exactly what I want to build today on the coding train so I want to do it this way first separating out the X's and Y's separately and then I will revisit it I think to do it with them together and this has to do with the way the sort of complex numbers work and I'm gonna my plan for today is to really like hand wave all of the math I mean I'm gonna implement all the math in the code but the explanations for why the math works that way and deriving the math and gaining an intuition of the math I'm going to refer to those three videos three blue one brown matha lager and goldplated goose as reference points and I will just simply implement this basically they write the code for this exact equation here which is the discrete Fourier transform in JavaScript so I'm gonna what I'm gonna do so and I think that I will begin with this as my code base I think I want to simplify it I'm trying to decide whether it makes sense for me to start over the thing is I'm gonna use exactly this so I think it makes sense for me to build off of it rather than to start over from scratch I'm trying to think about this I'm also trying to decide whether I should do a separate video that just writes this equation in into a JavaScript function and then I'm always struggling with this multipart single you know what I'm gonna do here's what I'm gonna do I can never figure out what to do to make multipart single part so I'm just gonna do it this is a live stream here we are I'm going to live stream it I'm going to do it in the order that I would do it if I were just on the plane trying to figure this out building off of the this coding challenge that I had then when we get to the end I will reconsider whether any of that how how that might necessitate breaking up and then I can obviously do some intro or outro explanations that matsya can put together or later so as you are watching as you are watching this today please help me keep track of like how long it's been for the actual substantive content and whether it makes sense you sort of note as you imagine the sort of edited version of this coming out later as a coding challenge if you imagine it be broken into separate parts alright any questions or comments before I begin I'm happy with this being like a final edited version of this being an hour because this is a complex enough thing to work all the way out but I don't want I my goal is for the coding challenge videos to not be longer than an hour and at the sweet spot is somewhere between 20 and 40 minutes ok see Benedict beautiful pleat check this out Fourier series Serge Sh well that sounds like a reasonable URL that I can type in without no cool oh you know what I should do before this is you know what I should do before I forgot before I do any of this let me go to the coding train calm and go to coding challenges and let's look at well I think I might have already how did I already do this let's look at some of these community contributions I sort of have a memory of clicking through some of these already but let's do that let's show by the way so if you weren't aware every coding challenge video has a corresponding web page on the coding train comm and there is a process by which you can add your own version it looks like there's a little typo here which could get fixed and a little link about how to do that requires some knowledge of how git and github but we're here to help there are wonderful volunteers who helped to maintain this website thank you so much to those people and gruesel house have most recently has been really doing a wonderful job of merging and tracking all these contributions so let's look at some of these and so I'm sorry I'm not credit you know I guess I should let's do them one at a time because so let's look at the square and soft tooth wave with sliders by lucky bonnet so if we look at this one okay so we can see this is cool ah so this is nice because it lets you like change which wave you want change the speed the number of iterations of the Fourier series and the oh the radius that is while so this is fun so a lot more interactive features than I had let's look at who now it's sound oh cool what all right I don't know what's going on here square wave whoa volume control I don't hear any sound I don't know oh it's actually playing the sound of the wave pattern what the this is wild this is so cool great words gate work stellar tux okay rainbow rainbow Fourier series Juan Carlos Ponce come look at that that is beautiful look at all these little sliders oh I can actually individually control the various like epicycles that is crazy as fun let's look at Fourier transform processing class so unfortunately this is great to see I'm not going to run this right now but you can see if you're looking for a processing port there you go square wave Fourier transform animation Oh not pronouncing matha lager correctly methyl Luger I better get that right before I start the rep before I like officially reference it okay this is the lovely Convergys animation of square toothed Fourier series lovely and then did I click on this one I'm sorry I'm confused yes oh look at this Wow okay this is crazy by the way because look at this I guess I could write the formula in here and it'll be like live interpreted submit yeah that's crazy and I can do like the number of terms I can do a custom wave a triangle wave line I can just pick colors this is fantastic so you could see look at all of these amazing variations on the Fourier series video all right watch the math okay hold on let's see let's see somebody in the let's let's let's figure out the correct pronunciation of math a log log I'm just gonna watch it over here on my invisible computer whoops unfortunately well by the way I'm wet the only thing that I ended up clicking on is this awesome times tables video all right wait I need to figure out how to pronounce this there must be what's a video that I can watch where the channel name is pronounced all right so the other day I said with my kids this is not working very well for ei epicycles math oh is it in this video mythology mythology mythology math knowledge er welcome to another this is not a mythology video but that was a mythology video mythology mythology mythology alright I think I think I will um get begin this is also useful I think I already referenced this one though so and this is by the way this is also an excellent reference which I will refer to in a second okay all right math Allah Dermatology mythology mythology mythology let's cycle the cameras let me make sure I have a whiteboard camera working nope wait why is it is weird what is going on that is the weirdest thing hold on the whiteboard scene is like for some reason ah there we go okay that's a slightly better sign that it's now black you would think that I would check these things before I begin but if you've watched the coding train long enough shoot okay so hold on this unfortunately you're seeing I know you're seeing a blank black I'm gonna hope there we go loose cable loose cable hello this is working now and ooh look at the terrible glare where's that glare coming from is it this light yes so I guess I have to point that more like over there and then is this marker a reasonable marker I'm going to draw off of your view just sort of see no it's not it's a terrible marker have a bin of markers here it's a fine one this is this is a beautiful marker I should build switch now back and forth yeah and by the way if you if you recall my holiday special I still have this ukulele but it's not tuned try to tune it real quick because maybe somebody will like to write me a Fourier transform song to the tune of something with easy ukulele chords I better not I better not waste time doing this right now come back to that if necessary Julius asks why don't you make video games anymore so this is my plan for the spring this is what I'm hoping to do in 2019 my goal is to have these sort of like plans sessions to do this new playlist about data and api's and then a SEP other days do more of these kind of goofy coding challenges some of which things like make a Rubik's Cube make Tetris these things that get requested a lot that I would like to try to do so we'll see so you you might be in for a couple some weeks where I have two live streams in one week all right I am now ready to begin okay that's the sound of me blowing my nose okay so let me just get one more some I would like to go through some of the community contributions for some of these other more recent coding challenges but I'm going to I'm going to hold off on that okay what shop what is this what am i calling this Fourier transform drawing guess again I could call this like discrete Fourier transform epicycle drawing something or other okay have a stop Blake who's stalling check my email check my Twitter no no no I'm just kidding here we go let's do it let's go like Voyager math Allah mythology need a checklist Oh ooh alka suggesting the checklist when when did that suggestion coming just a couple minutes ago yeah that's a thing from CJ in the end the coding garden I'll think about that for next time let me go back to my just winging it thing okay here we go hello welcome to coding challenge discrete Fourier transforms to somehow make this so I was recently on an airplane and I had quite a bit of time and I made this and this is what this is doing here as it is taking this path this coding train logo thank you to Tom fref a who provided this on this coding train logo as a continuous path and taking the two signals of that path all of the X's is really like a signal all the Y's it's like a signal and up using something called a Fourier transform to take that signal and break it down into a bunch of wave patterns and then those wave patterns are visualized with a sequence of rotating circles and then that is ultimately the endpoint of those rotating circles sometimes refer goes like epicycles is used to draw the path the X's and the of this particular logo boy if I don't know if I was able to get through explaining what's going on here but this is what I'm going to build in this seven hour and 32 minute video I don't know how long it's gonna be but it's gonna be quite long because there's a lot of components notice now the good news is that I have somewhere to start from so if you've watched some of my videos before you may remember me from coding challenge number 125 Fourier series this looks quite similar this was a coding challenge where I used a 48 series I sort of pre defined mathematical series of wave patterns when summed together to get a square wave so while this is like a sort of like known famous Fourier series I'm like what I'm going to do which is different so let me get bring over the whiteboard let me talk about this okay so the idea of a Fourier series is okay let's take all of these wave patterns of various frequencies and amplitudes add them together and now I'm not saying these actually add together to that pattern but to get to converge to like the square wave this is what's known as a Fourier series in this video what I want to do is instead a Fourier transform I want to go in the other direction I happen to have some arbitrary signal which can be expressed as a wave pattern and I want to be able to take this and subdivide it into basically transform it to a bunch of different wave patterns with varying frequencies amplitudes and there's something called a phase here which is gonna be important this sort of like the offset of where the wave pattern starts if you're like what are you even talking about I am going to I what I would suggest is pause this video right now and look in the description so there are three there's tons of resources on this all over the world and Internet but there's three particular videos that I have watched in the last few months when thinking about this that I'm going to refer you to right now one is this three blue one brown video I'm sorry sorry about that I don't know if I don't really like this explanation but one is this three blue one Brown video but what is the Fourier transform this video will look at give you a kind of animated visual sense of what's actually happening in a Fourier transform which by the way well I'm gonna come back to what I was about to say we buy the wait a second then because it is the reason why I'm having kind of trouble explaining this this something I want to just mention hold hold that thought me you are keep watching or not whatever there's also this particular video by goldplated goof which does exactly the same thing right by the end of the video renders a path through a set of circular epicycles Fourier analysis for the rest of us this is if you really want to die more deeply into the mathematics behind a Fourier transform this video I would suggest as well as the mythology video epicycles complex Fourier series and homers orbit which basically is another video on exactly this topic the difference between those videos and what I am going to do here is I'm gonna sit here and code every single bit of it step by step by step but I'm not going to and I'm just going to look up like okay what's the equation and then I'm going to rewrite that equation in JavaScript but I'm not going to derive or prove a really go deep into these equations and for that I would suggest checking out these other background videos now one thing that I want to mention here and the reason why I was having trouble here is what you'll typically where you might have typically heard the word Fourier transform at least in my world the world of kind of new media arts and computational things you might have seen and you'll even see this in like the p5 library as FFT I'll see this over and over again FFT stands for fast Fourier transform so this is a video where I meant you're going to write the Fourier transform algorithm I'm just not gonna bother to you to write it one that's fast I don't care about it being fast because I don't need it to be fast but Fourier transforms are so useful and important in so many fields and applications that being able to have an algorithm that runs super fast into a Fourier transform is incredibly useful and the where you'll have more seen this and seen FFT is in the context of digital audio audio signal processing meaning if this this would have been easier for me to explain the drawing thing is kind of weird and we'll see that that this things might come full circle for you by the end of this video the way that they have for me in the last couple month or so is thinking about this but typically if this were a sound wave of like me talking what you might want to do if you are an audio person is take that sound wave and break it into parts what are the amplitudes of different frequencies that make up that sound wave you can use this to reduce noise to do some kind of processing to create an audio visualization and the p5 FFT function basically connects to a sound file or a microphone input and gives you a big array with the amplitude of the sound at various different frequencies so you can do things like draw one of those you know 80s style graphic equalizers where you see all the bars kind of bouncing up and down as a piece of music is playing so this is the background for all of this and so now is the moment for me to start coding what if I take any arbitrary signal right the steps are take any arbitrary signal I'm gonna make one up or it's going to be the path of the coding train logo I'm going to try write the discrete Fourier transform algorithm which I'll find on Wikipedia page which is a slower version of ultimately like other implementations of the algorithm like fast Fourier transform then I'm gonna take the results of that and turn it into a sequence of rotating circles at various frequencies with various amplitudes at various phases and then I am going to see if that redraws the logo and now they've already me like 30 minutes into this video I'm gonna begin time out for a second Oh OHS so I don't know how long if you had to estimate anybody paying attention like how long was that explanation of like even just like where I am anybody anybody have a guest like this that I've got explanation I mean I wonder if I should do it again and try to make it shorter because that was kind of long I'm gonna I'm gonna wait for your feedback and I'm gonna trace all this that was like my rehearsal what time is it 1115 I also have to keep going here you don't want to be here about 6 and a half minutes that's not terrible I'm see 10 minutes too long 20 minutes 8 minutes 35 minutes 3 minutes 5 to 8 minutes I trust Alka and in the sixandahalf minutes I'm gonna start coding 7 minutes and I can I guess I could come back and redo that later also there's always like little things to trim out that matcha is good at figuring out so it might be a little less okay so what did I reference I referenced this this this this this no I didn't reference this but that's fine oh I didn't reference this yet this I need this is I'm gonna need also okay yeah just people yeah people don't want me to I have to realize I'm doing if I were not livestreaming I would do that again but since I'm livestreaming I'm gonna keep going okay okay I'm just sorry I'm thinking to myself here so actually give me a second because what I want to do is I don't want this slider in here let me I'm gonna start with this but I want it to be a little bit simpler where is it using the slider value let's just change this to like five okay that's fine it's got a great slider okay so okay okay and let me do let me create a JavaScript file where I'll write the Fourier function so this is let me let me make sure I have my reference open here so again unlike some coding challenges where I really do completely just make it up from scratch I'm not gonna like read my code and retype it I'm gonna try to figure it out as I go but in case you want to like follow along a little bit more in advance or like be able to catch the mistakes I make more quickly um this is a good reference point so this is my what I did on the plane this is my implementation of the of that Fourier transform algorithm and then and I just want to like peek at these for a second and then assuming that I have some set of X's and Y's I call the function and then loop through it and the angle the amplitude is the amplitude the angle is the phase plus time times frequency and time always goes up by two pi divided by how many things I have okay that may all make sense I will explain that as I go okay okay all right let's cycle the cameras I will consider at the end coming back and redoing the intro to this but I'm not going to worry about that right now it's also possible that I would make that just the implement the discrete Fourier transform algorithm as a separate video but I think I am ready to start coding by now this is where I left off before in my Fourier series coding challenge and the difference now is what I want to do is be able to have an arbitrary signal and then compute what all of these amplitudes and frequencies and phases should be so the way that I'm gonna do that is so let's think about this this is really like all of a bunch of Y values that I'm calculating so let's make let's make an array called something like Y and this is gonna be the signal this is my like signal this could be audio it could be Y positions any arbitrary digital signal / array of numbers then what I want to do is I want to have like the Fourier transform of that particular signal so I want to say Fourier y equals like Fourier transform or maybe like DFT discrete Fourier transform of the Y value so this is the idea the first thing that I need to do is compute the discrete Fourier transform of an arbitrary signal now I need some kind of signal so I think what I'm going to absurdly do is hardcode the signal let's actually make it the square wave and then we'll know if it kind of worked so what is the square wave square wave would be something like 100 100 100 negative 100 negative 100 negative 100 and then like do that like a few times all right so let's just so this gonna be my arbitrary arbitrary signal which I've just hardcoding the square wave and we'll do some interesting things that we might maybe I'll try like a purlin noise signal or just a sine wave thing and we'll try different things random numbers to see what that does so then this actual code here can largely stay the same because in theory the difference is now instead of following the specific Fourier series for the square wave I just need to take the results of my discreet Fourier transform so this would be a loop that's going to go through the length of those trances that transform how many different wave patterns are there that I'm adding together and then this ultimately I'm gonna have to figure out so let's comment let's comment this out right now and there's a little bit of an issue where I have this x and y as like local variables here but let's I think this will be okay so let's let's refresh this and DFT is not fine okay step one let's write the discrete Fourier transform algorithm pause for a second there's a small chance that what I'll do is in the app is have that be like a separate video and then just like have it appear but I'm gonna try writing it right now within this video okay so I'm going to start by making a function called DFT it's going to have some array of values and now I need to at the end I need to return something the idea is that I would return the discrete Fourier transform of those values what do we do well guess what the way that I'm the couple things one is I highly recommend if you want if you you want to pause this video right now and read this particular article on the algorithm archive by James loss or the Leo iOS youtube channel um this is a really nice article about Fourier transforms and the discrete Fourier transform algorithm and this particular algorithm for FFT but what I'm going to do is I'm just going to follow exactly what's here on the Wikipedia page so my signal is X sub n lowercase X n so what I need to do is basically and the transform is capital X sub K so I need to write a function that computes this exact equation and returns it as an array and this is exactly what I'm going to do this is exciting now one thing I should mention is that in order to work with Fourier transforms I need to understand something called a complex number now if I recall correctly the last last time a complex number came up on this YouTube channel was probably in my Mandelbrot set coding challenge where I visualized the famous Mandelbrot fractal and I referenced something called an imaginary number and I was way too informal and loosey goosey and jokey about how I talked about imaginary numbers being like this pretend thing that doesn't exist which is absolutely incorrect the reason why the term imaginary is used is because there is no real number solution to the square root of negative 1 but the square root of negative 1 is referred to in mathematics as I I is a complex number a complex number is a number with both a real a plus an imaginary component so it's two real values a real value and another real value kind of multiplied by I the square root of negative one so this is idea of a complex number and by the way another way for me to refer to a complex number is by its position on the complex plane so if this were the real axis and this were the imaginary axis this would be a and this would be B and this is a vector representation whoa of this particular complex number so why do I bring this up the reason why I bring this up is that the Fourier transform algorithm even if I start with a array of real numbers single numbers I'm going to apply the Fourier transform and get out a complex number what I'm going to return from that function is both A's and B's otherwise known as the real component which is often written in code as like our E and the imaginary component which is often written as I M so this is one bit that I really need to understand before working with this formula so now that I'm looking with this formula now that I'm looking so by the way before I move on before I move on did I say anything like wildly incorrect there about imaginary numbers and complex numbers am I going to mention Euler's formula I probably should yeah I wasn't going to so I think that's an important so I should mention it because because this this is what follows via Euler's formant formula and Euler is the correct pronunciation of that right not Euler as one might think yeah Simon that's a very good point Simon Says a real number is actually a complex number with an imaginary of zero which totally makes sense yeah okay I thought you weren't going to go into the mat great I just need somebody to tell me that oiler that that yeah that Euler I'm pronouncing Euler correctly Euler okay great two more things about the math that I want to say about this particular discrete Fourier transform number one is the top line there is the actual formula for a Fourier transform but there is something very wellknown and famous in mathematics called Euler's formula which allows us to take that top line and turn it into what is here and this is going to be much easier for me to actually implement in code so I'm going to take this second line here and that's what I've been implementing code so that's kind of the most important thing now the other thing we'll see and I feel like I should let me take a second here actually let me let me go back what I want to do is hold on sorry sorry sorry I'm thinking here I kind of feel like I want to write that formula out so I can yeah so ignore that thing that I just did Matz yeah all right let's take a quick let's take a quick minute to rewrite this formula on the board so we have it for reference oh shoot I need to have it for okay hold on I think I can see it so did Mathieu this could be like sped up or something when we make the edited version of me rewriting the formax I'm literally just going to rewrite it the question is where actually you know what I'm gonna erase this because this I kind of want to keep later this will be important so let's rewrite the formula and equals 0 to capital n minus 1 X sub n dot cosine of 2 pi K n divided by n shoot run out of space I might do this again such a jerk sorry everybody again n equals 0 to n minus 1 X sub n cosine of 2 pi K + and minus I times sine 2 pi K and these are the same thing by the way so sort of little bit silly but that will help us okay ok great did I get that all awesome ok great so I have the formula there now what was I saying aiya I definitely don't know the formula by heart okay I should mention Euler's formula okay all right so now it's best moment this moment that canet happens to you in life where you see one of these formulas on a wikipedia page or in math textbook and Europe creative coder making some kind of visualization thing and you just want to stop but together you would mean we're not gonna stop we're going to figure out how to translate all this notation and symbols and stuff into JavaScript code now again it'll be super interesting to go down the rabbit hole of like deriving all these formulas on the background for our Fourier transform works but I'm not going to do that I'm if you look in the video's description there are several excellent videos and resources link to that will give you that background but I do want to mention one thing which is quite important which is that this particular formula on the top here for the for the discrete Fourier transform uses that does this symbol e e Euler's number or the base of natural log this is a very famous number in mathematics much like pi but there is also a very wellknown formula called Euler's formula which looks like this e to the I which complex number I x equals cosine of X plus I times sine of X really interesting kind of looks like polar to Cartesian coordinate transformation all this stuff is interrelated right but so that is where if I come back to here this is where we get the ups this is where we get the second line here using Euler's formula from the particular formula it's up top but this is the one that I want to implement and I have written the formula out right over here so we can unpack it a little bit what are the components we need to understand now really if this were a math lesson about Fourier transform we wouldn't be using summation we would be using integration but because we're working on a computer and I need to write a loop and I don't have infinity as a tool then I could just use I need to instead of doing integration do summation and that's why also this is called discrete Fourier transform because I'm doing it over this sort of like discrete space okay so this means summation so this should give you a clue that I can just do like a forloop going from zero all the way up to N and by the way n is going to be the length the number of values I have in my signal so the length of that original array that's kind o and then the other thing that's really important is that basically what I get to do is separate out this is the real component and this is the imaginary component so even though this is all written as one formula I'm going to sum up all the real components and all the imaginary components together and by the way as Simon who is watching this live pointed out to me they're really only there are only complex numbers that the term imaginary is really it's really too bad that it's called imaginary because it's very misleading but a real number it's just a complex number with the imaginary component as zero okay so I should be able to start writing the code for this now write this this is my signal it's a little confusing that this is called X because I called it Y but this is just the values the vowels this n is vows dot length in my code and then okay we have to work out what K is I know what cosine is 2 pi and all these things so we're gonna work out what K is okay all right so what I'm gonna do is let's create a variable called Fourier then let's say let's say n is Val egg so I'm going to and let's do it let's let's follow this and goes from 0 ha I forgot something so first of all I'm in the wrong good thing I'm in the wrong I'm in the wrong screen I know that everybody sorry K is a constant I got it I got I got it I got it I got it I got it I totally screwed this up because I forgot something super important oh boy I'm so silly what is K this should actually this is this is I completely forgot to write what is quite possibly the most important part of this formula over here which is capital X big X sub K equals so this is what I'm trying to calculate I'm trying to create an array of K elements and each element K I'm going to sum up n from 0 to the end so there's like a little bit of a nested loop going on here I want to loop through every K which is going from 0 all the way up to N and then also sum up so K is going to stay constant within each one of these and K is actually really the frequency we'll see that the frequency of the particular wave pattern in that slot ok so let me come back here now let me start to write the code for this so the first thing that I want to do so I have I guess I'm sorry okay all right so let me drive the code for this the first thing that I want to do is create an empty array this is we're gonna store all of the results then I need to write a loop which is let K equals 0 K is less than n K plus plus and then I'm going to be saying for ei K equals something so this by the way I mean I could call this like capital X if I want it to be and maybe I will just to like follow this notation exactly so this is capital X this is lowercase X so let's actually as silly as this might be let's change this to X so I can use all the same notation as that formula so I'm trying to calculate this now in order to do this I need to for each one go through n so this is where the nested loop comes in in to calculate each each element of capital X index K I to sum up and going from zero to the end and okay and then I'm gonna start doing this formula okay so I need to sum up what I need to sum up both a imaginary real component and an imaginary component so let's let's make a real component and an imaginary component the real component is going to go up by some amount and the imaginary component this I do not want to ask just write the code for me so I'm gonna sum up the real and imaginary components and then I'm going to make some object which is basically just I know I could what's that thing called were but I'm not gonna worry about it right now the fancy es6 way of making an object if if I'm doing this so then I'm gonna make an object that has the real and imaginary components and I'm going to return it okay there we go so this is the process oh I could use hollow Brian in the chat is saying use a P vector I could certainly use a vector object but I'm gonna write it this way so okay so here we are good good good good good that's my I've got this in this now I just need to add this stuff in there so let's do the real component first now one thing you might notice this appears twice so if anything ever appears twice that might give you a hint to just put that in a variable so let's do that so let's say I don't know what to call that I'm gonna just call that something somebody give me an idea what I call it miss a 2 pi times K times n divided by n right so this I'll call this this is like the I mean it's like the angle I'll cup data I don't know what should I call it what should I call this somebody get excited cause this okay get think that by itself what's that called though in JavaScript where you I see the answer now fee angular speed fee yeah it's like the angular speed angle I could call it angle yeah call it fee or some angle name yeah yeah all right so the chat's telling me to call it like angle or some angle name but actually fee is a good one so they cuz it's it's the value that's going into cosine and sine which is like an angle or a Greek letter fee is often used so I'm gonna call it fee and then I'm gonna say the real component equals and I'm looking over there because that's where my formula is written is going to say X index n times cosign of fee boy this should look strangely like a lot of code that I owe that I write a lot and then X index n times and this should say cosine times sine of fee but one thing you'll notice here is that this there is a minus here this minus here is not if it's quite an important detail so what I'm gonna do is I I don't know the best way to handle this but I could just say minus equals but maybe I'll yeah let's say minus equals let's do that okay and then this is called enhanced object literals thank you I can just say this so this will give me that and there okay so all of that explanation Wow and here we are discrete Fourier transform okay I'm just taking a break for a second I'm gonna doublecheck just out of curiosity I'm gonna doublecheck this code yeah remember to define n thank you also one thing that I'm noticing in the example that I wrote I did this why did I do this in the example that I wrote before today does that matter I mean it's like normalizing the vector does that actually matter I'm not sure where did I get that from I don't see it and you heard here mmhmm okay I'm not gonna worry about that right now yeah this this is going to be very important in a moment but I'm not going to worry about that okay Oh Ethan Davidson see you at PC DLA this weekend awesome okay why did I / oh it's the average contribution at that frequency but no it's not normalizing it that's just dividing by n I'm not sure why I did that it's Fae not fee and and and mr. zacchara nee is asking a a good question yeah I know I need to okay so I'm pretty sure its fee yeah all right sorry all right so many so many things are coming at me all at once in the chat so let me let me do a couple let me let me reference a couple of those things all right so thank you to the chat for asking a couple key questions and for pointing out some errors for example I forgot to actually define what n is which is X dot length you know I should probably get in the habit of using the very variable declaration Const when I know it's something that's going to stay constant like this so I will attempt to use that here these cannot be constant because I'm adding them up together I also want to there's a there's a couple other pieces to this yes sorry Simon yes I see I see what Euler's formula is thank you okay hold on pronunciation is so one noted that in the UK in the USA groom that Phi is the performer yeah I think in Greek so I'm pretty sure a modern Greek the letter is pronounced fee but Phi Pi yeah no no well let's look at this Cambridge dictionary fine bye all right fine why do I think that it's pronounced fee now an actual Greek would be fee but English established okay all right all right all right all right all right also thank you for the chat telling me that it is pronounced fie and not fee although this is actually a point of contention I'm sure it'll be a nice thread of the conference about this but the actual Greek letter at least in modern Greek from what I understand is pronounced its fee but in the US and UK at least it's often the mathematical when referring to the mathematical term the fine so I'll say five from now on so I stop hearing people's pronunciation and that should also be a Const now another thing that is typically done with discrete Fourier transform is to take this sum and then average its contribution over N so I would also say the real component equals the real component divided by n the imaginary component is the imaginary component of I and some and add that in and then someone asked me well oh but this is the another question that came in which was the question oh there's I hear how why don't I see I in your formula in your code where is I in your code and so I isn't explicitly in here but what I'm doing I'm referencing I by separating out the real and imaginary components so the imaginary component is always paired with I and the real component is pair is that you know in in the form a plus B I so this is a that's B but I don't actually have to put I in the equation itself X can be a Const yeah and the chat is also telling me that X can be a Const because I am NOT I I'm not ever going to read to Claire that now so let's let's save this let's let's feel happy that we completed something I'm gonna refresh I'm gonna go back to my code page I'm gonna refresh this and I'm just gonna say let's make up a variable actually I think I have Val's already no it's not to find sketch a why I called it why sorry let's make a variable called Y which is here and now let's say for ei o DF T Y and there we go something came out so we're gonna just hope that this is right I mean I'm I'm not seeing any error we hold on and okay I really shouldn't be looking at the chat it's making me crazy yeah sometimes I just have to imagine excitement just wrote I'm at the dentist I'm imagining the dentist's chair having his teeth cleaned with like a phone like propped up here watching me live stream which is totally insane 1147 okay 40 minutes to finish this I think we I think we get it we've done the hard part actually sort of all right hold on Matt you sorry I'm gonna I got distracted by the chat I'm gonna go back to here alright so let's just see if that function DFT does something and doesn't actually produce an error so I have the Y array which is my like hardcoded square wave and if I call DFT on Y here in the console we can see I get right I had 12 values in my signal I get 12 complex numbers back each one with a real and an imaginary component so this looks good in the sense that their numbers here I don't see it error no read no not a number so hopefully we're in the right place now the question is what what what do I do with these real and imaginary components how do those things actually become how do those things whoops how do those things actually become circular epicycles right for a circular epicycle what do I need I need an amplitude right that's the basically the radius of that circle I need a frequency which is how many cycles through the circle does it does it rotate per unit of time and then I also need this is what's called a phase and the phase another way to think of that as an offset so where does the cycle begin where does that circular wave pattern begin that's the phase so I need these three things so somehow I would I need to be able to do is I need to be able to say right here well the frequency is something the amplitude is something and the phase is something and the the secret to this lies in the fact that a complex number is like a vector and in fact here we go the amplitude is the length of that vector and the phase is the angle of that vector well I'm so that's amplitude and phase but what's frequency well guess what I don't know if there was a clue to this on that Wikipedia page but the frequency is actually just K that's the frequency yeah and discrete frequency components so the whole point of doing this is to take the signal and divide it into a bunch of discrete Quincy components 0 1 2 3 4 etc so here we go frequency is K and that's a little bit redundant but I might do something with sorting later so I'm going to need to keep track of that amplitude is the square root of the real times real plus imaginary times imaginary this is basically the magnitude of a vector the square root of each component squared this is Pythagorean theorem at play and then the phase is the angle which I can use the a tangent to and the Y would be the imaginary I think it's this oh but it does reference the code that I wrote before yes I got it right okay so this would be the phase so now I can say frequency and I can add frequency amplitude and phase here and I can refresh this page I can say DFT Y and let's take a look at any one of these and we can see all right I've got an amplitude I've got a frequency I've got a phase whoo we are ready we are ready to start actually now putting this into our code and the good news is we have the code for drawing these epicycles already I commented it out it was right here so if in fact I have this Fourier Y array I can basically say let me get hold on radius now let's get rid of this n oh sorry let me back up for a second here I have this code from before that was drawing the results of the those epicycles so I can comment this all back in but now it's not a specific Fourier series for the square root it's whatever's come out of my Fourier transform and in this case n is actually it's confusing that I'm using in here but uh an actually is I'm actually just called this frequency is Fourier Y dot frequency and the radius is 4 EI y x amplitude and now of not x is the amplitude so the frequency is the frequency the radius is the amplitude and now I can say multiply time times frequency plus that phase so and I know I could have I could get these things out into a variable in like one line but I'm just gonna write this in here phase so all the code remains the same the difference is what I'm going to do time is the element that's moving forward right it's the angle of and if and if and if the frequency is one it takes one unit of time for it to rotate a full rotation around phase is the offset and radius as the amplitude so one thing that I have to be very careful about here is that I can't just arbitrarily have this 0.05 thing here what I need to do is I need to have like the value DT what is the amount of time I move each frame of animation this would be 2pi being a full cycle divided by how many frequency values I have so now time goes up by this and we should see now dare I say nothing okay so that's their what did I miss oh yeah frequency times time oh oh oh oh I have I have a terrible array here I'm being so silly I took or terrible ray oops I have a terrible error here ah then I forgot about you Dex I hear I've got to pull out right I'm getting the frequency amplitude and phase of each of each element of the array for ei why look sorry about that there we go alright so this looks kind of like maybe it's right but it doesn't look right at all if something's happening that's pretty decent but it's wrong so here's that one thing that's a little bit unfortunate I'm off by a 90 degrees here I'm pretty sure so let's just add half pie in here because and there we go now this is actually correct there's my square wave right I have it I have it I don't have it on its side because I'm doing the Y values this is sort of crazy though because it's kind of like I just really what we're doing the thing is I have so why have so few values so it would make more sense for me to actually count to precompute some kind of more interesting signal so let's forget about hard coding the signal for a second and let's just say I'm going to have a signal with a hundred values and let's just make them all random numbers this is going to be a little bit insane what probably don't listen pick a number between negative 100 and 100 so you can see look at this this there it is this is the crazy set of epicycles to draw these random numbers let's use Perlin noise and let's let's let's actually create a perfect sine wave that'll be interesting and of like some arbitrary arbitrarily perfect this is really insane whoops Oh float so look look at this I did a Fourier transform discrete Fourier transform to have two circles rotating around each other to recreate a perfect sine wave I could also now do I could do Perlin noise instead and like just have it increased by some arbitrary amount and we can see let's actually make it much taller why is this not okay wait 250 all right so here we go I'm kind of doing nonsense here but the point is any arbitrary signal that I have I can now compute the fort and you can see by the way this is it like cycling back to the beginning that's why it almost looks like this like crazy heartbeat and it's and it's there's this extra bit here of it like the first one not rotating at all just with this off set up because the values itself don't perfectly average around zero but this is not the point this is not the point of what I want to do the point of what I want to do and let's let me just show you to be clear like if I just made this like I like a linear function you can see this look at this these are all the epicycles for basically now I've got the triangle wave because it's going down and then back up at the top and down repeating over and over again okay we are getting somewhere now what we need to do is add exes we need to add exes so let's have an array of exes let's also have the Fourier transform of the exes and we need to initialize them somehow we're getting somewhere here's the thing now this I'm gonna need to do this twice so this all of this I should it's time I'm gonna refactor this now I'm gonna take all of this and I'm gonna write a function called draw Fourier it's some arbitrary Fourier and so this is no longer Fourier Y and so I'm gonna leave all of this and so I can do this twice because I want to say draw Fourier X draw Fourier Y and actually I don't I don't want any of this in here this is going to be here hold on sawtooth wave thank you ah hold on hold on I started going off on let me back up for a second because I started just like losing myself in like implementing this without actually like explaining what I'm doing let me just go back just give me a second here let me end yeah this should be X thank you I don't know why but I just sort of like lost myself for a second I need to just like take a breather and move on because I also want to correct the fact that this is a sawtooth wave not a triangle wave yeah Chris is saying the half pie offset I'm gonna fix that and I'm gonna sort the circles with their radii yes yes I'm gonna do all of that don't worry okay okay just need a break for a second here it's noon I don't know if anyone has a guest like I mean if you had to guess taking out all of the wasted time if this were edited but how much time do you think this video would be so far Hey okay so this by the way is not a coffee company that was mentioned in the chat not to be named because I'm not buzz marketing it for no fee but but anyway it does have green on it two minutes okay I'm sorry I just need like a breather for a second this is where I would be doing one hour would be less than 55 minutes okay all right I'm not gonna I'm gonna not to you know that'd be fun so maybe this can all be in one video but if we break it into parts maybe what I could do is actually record some intros and outros from LA at processing community day anyway but yeah about an hour probably okay all right let me move on okay before saying 20 there's no way is 20 minutes but okay okay deep breath first thing is in my excitement and exuberance over what I've accomplished I was calling this a triangle wave you know there's kind of a triangle there this is a sawtooth wave which is what I've recreated right here but I need to take a breath here and talk about what the next step is going to be the idea now is what I want to do is I want to be able to draw an arbitrary path which in addition to having wise I want to have X's as well so I need to do the Fourier transform twice now ultimately there's another way of doing this where I do one Fourier transform on a set of complex numbers where the real and imaginary components are the XS and the Y's but I'm gonna stick into this sort of like simple place that I am right now and I am going to add two signals now an x and a y so I need the transform for both the X and the y I'm just going to like in a sort of silly way have the X's and the Y's be the same and then I'm going to apply the same exact Fourier transform to both the XS and the Y's and now here's the complicated part this loop here is draw visualizing the Fourier the results of the Fourier transform as a sequence of rotating circles epicycles so what I want to do though is I think what's going to be good is to refactor this not later but now and put this in a function call it episode so the idea is that maybe I would get an x and a y like that's where it's going to start and then I get the upset of epicycles and I draw them all so this is a generic for ei one so in other words the idea being that I could say and I'm gonna get rid of this translate and I'm gonna say basically what I want to be able to say is like draw what did I call it draw for ei know I call the epicycles epicycles like 100 comma what's the size of this window like 200 a fourier X and then epicycles you know 300 200 for ei Y so we should see both of these now let's take a look Epis i khals is not defined oh I know I did this capital C that's probably unnecessary okay great so we can see look so those are and now B epicycles are the same because they have the same values let's give them different values so let's actually let's do something kind of goofy let's make it draw a circle so this is going to be 100 times cosine of this is so silly of an angle and that angle is a map I which goes from 0 to 100 is 0 to 2 pi this is just so I can have some kind of path to work with that's like very recognizable so I know whether it's working or not and then Y will be the sine of that so we can see ok this looks promising right now we can see here are the epicycle calculations for the X's and the Y's now one thing that's off though is that I remember I had to like I kind of like glossed over this but I was like I had the figure on its side this 1/2 pi is really like the wrote tation of the whole thing of how I want to display it so let's let's make that an argument here and we'll call that rotation and so the wise oh that's when I do I want it yet I think I could just do that when I draw it that's fine so where it where is this now I'm going to the wise should be off by half PI and the X's should not be and so now look at this okay so in theory now we're getting somewhere don't worry what I want to do let's position this like over here and then let's position this like a little bit further over and here right and now what I want to do is over there where that mouse pointer is I want to take the Y from here and take the X from there and draw the path so instead of wave I was drawing a wave pattern I now on an array that is the full path I want to basically get the end result so let's have this epicycles function return it should return a value which is a vector create vector with x and y so whatever the end result like the last x and y point the end of that epicycle sequence and then so I have VX is this that's the vector for the X's and V why is that and now I want to say path dot unshifted create a new vector this is like where I want to draw the thing I need a vector which is the X component of V X and the y component of V Y and then I want to put that in the path and then this let's get rid of this line for a second I'm going to instead of drawing this wave I'm going to iterate over the path I don't know if I've this is a little bit of a strange refactoring of what I had before but I think it's gonna make sense to you in a second let's see I might have to come back and explain this let's put this in here and wave is not defined because it is path path I'm not gonna worry about this right now let's kick that out all right it's over there oh it's in the wrong spot but it is right so why is it up here because oh I want it to sort of like a pre R oh because these are at I know I wanna I not I'm not using the offset so actually what I want to return is also X plus the original offset so let's call this offset X offset Y oh no and then hold on I'm gonna figure this out this is so what I'm doing now is nothing to with Fourier transforms it's just figuring out how the weird way that I want to visualize this which you know now that this video is I'm gonna just say the offset X I'm gonna just save these values because I think what I want is no but it should be offset by it already hold on hold on I'm just thinking for a second why is this not doing what I think it's gonna do this should definitely be multipart but I'm just like okay so that's yeah that's the oh that is right it's just like over I guess I need a whole other offset because everything this is relative to the center why would it know where I want to put it like I want the or maybe I have this is oh these are wrong this X should be up here oh oh oh this is like wrong V X comma Y and V Y comma X yeah they're in the wrong place swap them yeah let me go back let me go back back up back up back up back up back up back up yeah they're totally in there just in the wrong place I'm just being totally ridiculous have it right thing sorry Matt said this is gonna be an edit to go like kind of way back not way back but a little bit back to where I had this okay so this is actually correct I just put the I'm not realizing this is correct I just put these into weird places like I want the one that's doing the Y over here the one that's doing the X over there I don't know what just like intuitively didn't put them in the right place so this should be 400 comma 50 and this should be like 50 comma 200 this is nothing to do with Fourier transforms it's just the weird right there we go so I wanted to see them like this so now you could see those are the Fourier transforms for this particular circle and let's add a line back in now which is which is basically this thing so I also want to draw a line from the V X dot V Y o so V X dot X V X dot Y to V dot X V dot Y like I just want to draw these two lines and then the same thing from V Y dot X and V Y it out why Wow my naming is wild leek if you using here so this could definitely use for some refactoring but there we go now we can see those lines so this is good now I don't like the way this is spaced out so let's what one way to fix that would just be to make this thing smaller and that sort of helps me a little bit but this can move over I don't know why I put it all the way over there let's let's move this over to at 300 okay this is a little bit better now let's make something more interesting here which is let's let's start using Perlin noise again so I'm gonna say noise and noise plus some rent arbitrary amount and we can see look at this so you can see that this works and let's let's give it let's make the amplitude bigger and let's let's give it like 500 values oops and there's also no reason why this is very silly these should just be in one loop but let's give it more values and let's just say you know I divided by 50 I'm just doing like arbitrary stuff because the whole point of this is to do a drawing alright but we can see how this now will take any arbitrary signal and compute the Fourier transform for the X's and Y's and draw that path now the nice thing about this is I'm about to almost instantaneously do something to make this much more interesting I am going to go and grab the coding train logo path is this the whole point of this is forget about computing a path the whole point of this is forget about computing I want to have a known path a dry so what I'm going to do is hold on edit point for a second let me grab this let's call this coding train yes and I'm going to add that bin here okay I am back and I have brought in a JavaScript file that just has a big array of X's and Y's all in a variable called drawing which is the continuous path of the coding train logo thank you to a link to Tom febri on Twitter for sending me this particular path so what I'm going to do now is if I go to the code we've got all of this work for this moment better work I'm so excited I'm gonna go here right and now I'm going to say I I mean this is a little bit silly the way I'm doing this by drawing dot length I plus plus I'm going to go through right remember this variable drawing is just an array of X's and Y's and I'm going to make the X's drawing index I dot X and the Y's drawing index I dot y now here's the thing I happen to know that the complexity of that drawing is much is way more detailed than I need and it's gonna run very very slow so I'm actually going to add a variable called skip and I'm gonna like skip every 10 and I'm gonna say plus equals skip and then I'm going to change this to push so I'm gonna skip and only do every 5 vertices of the drawing I'm doing this in advance because I already know looking at that it's gonna I don't need that many points so this should now give me all of the points all of the X's and Y's from that particular drawing I'm about to go hit refresh and hope that this works so there it is now this looks doesn't look as beautiful as it possibly could and there's a couple reasons for that right now one thing is these look this looking these weird like alien creatures by the way but it would be really nice to have the epicycles rendered in order of amplitude so right now they're rendering in order of frequency and it's like a strange machine almost like drawing machine and you have the amazing like someone could build this physically but what I'm going to do is sort them so what I'm gonna say a fourier x dot sort and fourier y dot sort now with the J in the JavaScript sort function allows you to pass in a callback which is essentially a function that tells you how to compare each element and I want to compare them by amplitude so I can actually say any two arbitrary elements and I'm going to use es6 syntax for this this is a way of if you haven't watched my arrow syntax and our higherorder array videos which is something you'd give you background for this and then I can just say I think a dot amplitude bead on amplitude right because if I get a positive number it'll put one in front of the other if I get a negative number it'll put the other one if they're equal it will leave them so this is sorting each one of those by amplitude and if i refresh this oops sorry the smallest one because I would sort of it reverse order so let's put be here be here a here and let's also give myself let's let's clean up some stuff here let's make this 800 by 600 let's set the offsets to with divided by 2 the 100 a height divided by 2 whoops sorry 100 height divided by 2 let's set these offsets a little bit more let's refresh oops let's shrink this up and let's move this down a little bit plus 100 and we'll move this over plus 100 just to give me more room will this work all right this is the thing finished 72 hours later there it is oh it's off the bots know it's kind of sitting right there perfectly how did my math that is totally accidental by the way now it's just gonna draw it again over and over again so no skip people or people want me to like get rid of this skip so I could get rid of it let's let's play with that skip now but I want to do a couple of things one thing I want to do is I if time goat does a full cycle then I want to set time back equal to 00 and a path clear the path so let's do that so let me just make sure once it gets through the full cycle what's the actual yeah there we go once it gets through the full cycle let's make sure it clears it there we go okay so that's working I'm like obsessively feel the need actually I'm not gonna I want to like constantly tweak the alphas and the strokeweight so though I'm gonna let people make more beautiful versions of this and I'm not gonna do that but people do want to see how this changes with the skip so I am going to list let's let me just make this skip five or four like I'm gonna reduce it and let's just see what happens here so so and you can zoom all the way in here we can sort of see I've got many many more epicycles and you can see that it's doing it without the skip if I get rid of the skip completely or set it to one I'm already like you could see it's just running way too slow to reasonably I mean it's it's just like got too many things to draw and so many of these are probably of radius like less than one I could probably like eliminate anything that's so small and get it to run faster but I think I'm gonna go with a skip of eight and leave this be all right this concludes this particular coding challenge where I took a discrete Fourier transform this particular math function I applied it to an arbitrary signal to signals of X's and Y's then I rendered those as rotating epicycles and how to draw the path whoo I'm very excited that I accomplished this so there are two things that I want to do probably more than two and those are gonna come in separate videos if you made it through this one I am going to first I'm gonna do I'm gonna do I'm gonna take a break I'm gonna come back and I'm gonna make it so that the user draws something and then the then it computes the Fourier transform that really you by the way you should go do that yourself right now so take this code that I've released find them find the link in the video description and go make a version where the user draws something and then do the Fourier transform that's a fun exercise I'm gonna do that in the next video and then I am going to rewrite this so that I have the Fourier transform done with the X and Y's together as a complex number and I just have one set of epicycles rendering the full path but I kind of like these two like x and y machine things it's kind of cool oh oh yeah and Melvin and the chat is saying oh you could use the quickdraw dataset so I'm gonna leave that to you the viewer please make this share it widely make a version of this that renders random drawings from the quickdraw dataset that would be super fun I would love to see that okay you if you if you make any of these exciting fun beautiful strange ugly whatever they are variations on this particular coding challenge please go to the link to the coda train comm look for the instructions on how to submit your variation and submit yours if you have trouble doing that file a github issue or something saying I want to save in mind but I don't know how and we will help okay goodbye everybody and I will leave you with something that really needs to happen to this code later you know okay where are we timewise 1230 okay I can do a bonus here the final video would be less than an hour in 20 minutes all right so off the top of my head this definitely needs to be broken into multiple parts I said one thing that I could do I have an idea so one thing would be to go back and redo the beginning but now of course there's I feel like there's no way I could do that and that was oh yeah that's pretty interesting like actually I'm curious to see that as well like what if I skip like 50 points yeah but it yeah so the thing is like there's a different way of doing this where my the transform the number of epicycles doesn't have to equal the length of the signal in that case I could get I could do some interesting variations but and you have modulating the Skip over time would be super interesting there's lots of possibilities there I'm not gonna let you do that so let me for a second okay let me think about this I'm gonna now I'm gonna take 15 minutes here and I'm gonna record will this be also so come look a couple things Kathir all is asking skip by like 23 and don't clear the path oh that's interesting oh that's crazy yeah I'm not sure that's an interesting idea I'm gonna let you all try these things okay some people are giving me excellent suggestions the point of me doing this is for you now to go and try these ideas I can't do all of them and I have to go soon but I think what I need this this probably has to be a multipart so there's a few different ways of doing this one is I could redo the introduction knowing it's gonna be multipart and it could kind of explain what I'm doing again maybe I'll try to do it maybe I actually will do that and then the parts that would make sense to divide it up I kind of want it to be all one video though you kind of need to get to do them i but what I could do is excise out though all the time where I implemented this formula and just end with like that could be a separate video that's so weird though because it's I think it ties to get I don't think I think I maybe I'll have to wait and let much yeah maybe I'll have to wait and so I haven't thought me you should have mentioned the more famous version of Euler's formula what's them in this guy innovation where you do the intro and explain it's gonna be multiple parts or maybe some really serious editing could get this down to less than an hour full screen I'm just I'm really I don't think I'm really I'm lost here as to how to approach this I'm also like hypnotized by the fact that this is working the extra math bits in another video yeah right well all right let me record some stuff just in case this is later the problem is normally what I would do is I would just let Matt chill look this over and then tomorrow I would come back in and record some intro outro stuff but I'm going to LA tomorrow for processing community today so in order for this to not wait till next week to be published which actually wouldn't be the end of the world but I would look to get it out sooner than later I feel like I need to try to anticipate those things also I could record some intro and outro stuff just like person on the street with my phone especially in LA but no one no one is giving me so I'm what's gonna alright yes could you reverse at the end and make it erase it okay alright okay so I have to take matters into my own hands here I'm waiting for someone to in the chat to like just give me the answer of what I should do which is clear not gonna happen alright so option number 1 which is a little behind the scenes here might as well do this live why not I don't know what should be behind me so I'm just gonna record myself talking I think this actually could work hey stop stop the presses hold up everybody so the next bit of this video is a long sequence where I go and actually write the discrete Fourier transform algorithm and ultimately this coding challenge ended up being super long like well over an hour so what I've decided to do is if you're watching this right now you can go and watch a separate video where I write the DFT function and go through all of the math and steps for that but if you continue watching now I'm just gonna go from where that function was finished and and I'm gonna get the results of that to keep going with this challenge and eventually render that coding train logo path okay so it'll be a weird cut here but if you want to see that whole part that I've taken out of this video you can watch that as a separate video linked in this video's description I don't know I don't know if this is gonna work so I'm just recording this as a possibility okay now and now what I'll do is I think maybe I don't know if this is gonna work but we will we will try it anyway whoops camera went off be good yeah okay hello this video is a bit of an aside and it does it can stand alone if you want to watch it alone but this is a companion video to my coding challenge draw a path with Fourier transform epicycle magic weirdest thing and in this video what I'm gonna do is take this particular formula from the discrete Fourier transform Wikipedia page I have written it whoops sheet I'm gonna take this formula from the discrete Fourier transform Wikipedia page I'm gonna take this formula I'm going to turn it into JavaScript so that's what this video is gonna do and then at the end of this video that function is we just do this again I forgot where I was and what I was doing this video is a little bit strange little different than what I usually do it's a this is a companion video that goes along with my recent coding challenge transform okay what we're trying overdrive because everybody should go now stop watching this is me trying to like make this all work but I have another I have another idea there's I'm gonna do like a second way of editing this together in a second so this is gonna be a while I'm gonna be here for like another 20 minutes doing this weird interstitial nonsense hello welcome this is a bit of a strange video different than what I usually do on the coding train but this is a compan video you can watch it on its own but the point of this video is to take this equation formula from the discrete Fourier transform Wikipedia page and write a function in JavaScript that implements this formula and the reason why I have this is a separate video is I'm going to use this function which I'm calling DFT in a coding challenge where I make this crazy drawing machine out of rotating circles and the Fourier transform algorithm so that video has a part cut out when I did this live all this happened in sequence but it became so long this implementation is in a separate video whose me spending way too much time trying to explain this but keep watching if you want to know the details of how I actually wrote that DFT function ok now I'll do something for the end probably alright thanks for watching this implementation of the discrete Fourier transform algorithm in JavaScript if you want to see how I use this function to make exactly this these rotating circle drawing machine epicycle thing that renders the coding train logo then you can click over to the coding challenge where I explain a bit more about how this thing works and implement that as well ok thanks for watching ok yes s'okay weak mon you're saying have you considered treating the input as a complex number instead of two separate real ones yes I know the reason well I kind of wanted to do that as a false part too like I was gonna do it's like a second part I don't know why did it this way but yes but I mean ultimately I thought I'd mention that at the end of the video but maybe I didn't okay now all right so now this is my second idea for how to so I am going to I'm going to redo the whole intro thing and reference all of these pages references so now I'm going to do a set of intros as if this was a multipart video and I think it would make sense for it to be two parts one part where I get all the way through implementing the discrete Fourier transform function and the second part being doing the visualizing thing and by the way another option Mets U is it's just standalone as what it is that would also be fine so I'm gonna do I just feel like I don't want to rule but there's no good like end point to part one so there's not really any reason for me to like release them on separate days let me just redo the intro is in a shorter way I think I can safely erase this okay okay okay I'm gonna I'm gonna make an introduced in true explain that this is especially long I don't know what to do I you know Matt you at worstcase scenario I'll come back next week this will just be a while till we release it which is fine it's fine okay all right hello welcome to a coding challenge I actually just finished this coding challenge on coming back to record a little intro to it and what I made in this coding challenge is a drawing machine this is I would maybe let's call this like a Fourier transform drawing machine and there's a few more things I'm gonna do with it there's gonna be some follow up videos but this very very long video if you can stand to watch it has as part of at the end this this is the end result I am using a for an algorithm called Fourier transform to take an arbitrary signal in this case a sequence of X's and a sequence of Y's the path of the coding train logo thank you to Tom FAA I will link to Tom ferries Twitter who provided the path for this particular logo to to trace the path of the logo through these wrote this sort of sequence of rotating circles sometimes referred to as like epicycles okay so what's going on here so this first thing I should mention is this is a continuation of my coding challenge Fourier series and so what I did in that particular coding challenge which was inspired by a smarter everyday video on the same topic with it create the Fourier series for a square wave I don't know why I just had to write that but in this video I'm going to do something different which is I'm going to use the Fourier transform algorithm and these are different concepts I somewhat conflicted things in my previous video the idea of the Fourier transform now where I know that's algorithm from where I learned about this algorithm first in like learning about coding and creative coding and new media and sound and video is with the terminology FFT and actually if you go into the p5 sound library you'll see there is a class or function called p5 FFT I don't remember exactly what it's called but something like that the F here stands for fast fast Fourier transform the algorithm I'm going to implement by the way is discrete Fourier transform some time out for a second now this is where I'm gonna like optionally say something but this could also be just kind of cut out depending on whether we leave the Fourier transform thing in or not okay my implementation of the discrete Fourier transform algorithm is actually in a separate video I'm just gonna use the function directly in the code as I do this coding challenge but you can watch that video as well to see all the code for that but now why is this FFT thing where is it typically used well it's typically used in what's in signal processing but a familiar place where you might find that is in audio signal processing processing so let's say you have some arbitrary sound wave that maybe looks like this and it hasn't really like highpitched awful like screeching sound in it how would you filter that out well if you could take this sound wave pattern and break it into a bunch of smaller sound waves a bunch of sound sound waves that have varying amplitudes and frequencies then you could take you could sort of remove the one that has this sort of like highpitched sound in it and then add them all back together and get a new sound wave so the idea of a Fourier transform it's I think I said this in the Fourier series version it's unsmooth eing a smoothie right if we could take a smoothie that's made with like blueberry mango and strawberries and like separate it out and then put it back together without the strawberries this is essentially what happen in signal processing but in this video what I'm going to do is instead of the signal being an audio it's going to be a series of X values or a series of Y values and eventually there's actually way to do that with the X Y values together that I will get to so I am NOT going to go too deep into the math in this particular video I'm not going to derive before a transform algorithm I'm not going to talk about fast Fourier transform I'm just going to use a very kind of crude discrete Fourier transform implementation just to get the thing working if you want to know more about the math though let me reference a few really key references the the three blue one Brown video but what is the Fourier transform will give you a infinitely better understanding of what the Fourier transform algorithm is and what it does and even how it works what better than my like ramblings trying to ramble through that over on the whiteboard I would also highly recommend this goldplated goof video Fourier analysis for the rest of us which goes through the details of the math in much in a much deeper way and then there's this wonderful video from Mythology epicycles complex Fourier series and Homer Simpson's orbit which will give you the full story of everything that I'm trying to do but hopefully what's useful to you that's different in my video than from B's is I'm just gonna sit here and attempt to code the thing and I know that it's gonna work because I already did it and here is the result so enjoy this is a very long video I hope that if you watch it you get the code you make your own variation of it please share it with me you can go to the codec drain com2 the particular coding challenge page and there's instructions to have submit a user community variation thingy there okay goodbye enjoy or not or whatever all right so I don't know I don't know if that's good oh yeah tonight was that I don't know if that was better I don't know if that was better than my first try and I also didn't say well I I could do one more no I just don't think it should be multipart um okay okay so I don't know I don't know what to do about this okay i in the ideal world the whole thing would just be one video okay in this multipart because now I'm gonna do something else okay oops all right I gotta do one more I have to go soon but I'm gonna do one more thing so let me actually want to save this as its own thing so hold on bear with me for a second I'm gonna call this 48 coding train I actually know hold on and and then a user drawing take and so sorryi my brain is broken okay sorry okay I know these are drawing okay and maybe maybe I should do the awful whatever just sorry I'm just like lost my mind here okay there we go okay Simon wants me to say Oilers formula and also say that e to the I pi plus one equals zero is the more famous version of the formula okay I've said it okay let's close all this let's open this up okay all right here we go last bit for today so Kasab is asking when does the edited video go up so the edited video would normally normally I do stuff on a Friday and then the edited video goes up Monday or Tuesday because today is Wednesday and fury it's possible the edit video would be later this week but more likely next Monday or Tuesday or sometime over the weekend there's also the added complication that I am going to LA for processing immunity day tomorrow and it might may actually make the most sense for me to come back and record the explanation stuff later after the fact again in which case the edited video would be later next week so all of these things are possible ok but and I almost want to do the thing where I change this to a complex number input I just I can't do that right now I can't I have to go I'm gonna just do all right hello all right this Fourier transform stuff is so fun and interesting and weird this is the end result of the coding chat the very long coding challenge that I just completed and I'm gonna be doing a couple different followups so this first follow up I just want to like write the code to instead of using the coding trade logo have the user draw a path and then have foreo transform that and render it the second followup that I want to do is instead of having two separate rotating sets of epicycles one for the X is and one for the Y's I can actually treat the input to the Fourier transform as a complex number itself and have one set of epicycles so I'll come back and do that in a separate video that'll come out later you can try that on your own but I will get to that so in this video I'm just going to see cuz I truly want to see it if I draw a path I want to Fourier transform that so how am I going to do that so the thing that I need is well one thing is I no longer need this coding trained j/s file which has the full path of that particular drawing instead what I need is a I need a variable called drawing and I need probably like a state and I'm gonna say like some thing like a like user like these will be the two states of the program so in other words whoa like if the state so I'm making two like constants one is 0 1 is a 1 and I know I could use like enumerables or something like that but that's not me you know I can't be bothered it's every factor this later I won't play the song so I'm gonna start with the state being user and if the state is user if state equals user I'm going to do something different than if the state is 4ei and there's only two possibilities here so I could use a boolean but there might be other things I want to do with this later so let's just start with that and there's no reason for me to do the Fourier trenny of this stuff in setup anymore but I do want to have this code for reference and and then I think what I want to do is when the mouse is pressed well the state should be user and if the mouse is when the mouse is released these are two global event functions I want to make the State for ei so basically the idea is when I click the mouse I'm about to do a drawing I need to record all the points so in draw if the state is user I want to say the current point is create a vector which is Mouse X Mouse Y and then I want to add that to the drawing and what I would do is always want to press the mouse reset the drawing array to an empty array and then I release the mouse I would calculate the Fourier transform and I'm going to assume that I can use a skip of one and this should work I mean I my offsets are gonna be wrong but let's see what happens so so now if I go here and I hit refresh there's nothing now in theory if I were to draw a circle like this and release there we go there's my drawing now it's weirdly down here in a different place than I drew it and I wasn't able to see it while I was drawing so I need to fix that a little bit so one thing that I should do is and please let me just minimize this this is it keeps coming up one thing that I should do is probably record the points relative to relative to the center of the window and then also I also want to be rendering it so I would want to say for every point actually I'm gonna say every vector in drawing let's actually render it while I'm drawing it begin shape and shape stroke and let V of drawing stroke 255 no fill and just set a vertex to look like the shortest video effort fared to the last one I'm instead of vertex so this is me like when the state is in the user drawing state I'm gonna render all the vertices and your there's gonna be a little bit of a problem with this ooh ah oh but only ah so state actually at the beginning should be I just realized the state should be negative one right I'm not gonna I'm the state is something else it's like the start and I suppose I should have some instructions like draw something so the state is negative one because I actually don't and then when I click the mouse but you see my drawing is up there but this worked ok great so now what I want to do I think about this correctly I just need to I'm storing the points relative to the center I could use translate or something smarter here but I could just set them when I draw them relative to the center so now Here I am I'm gonna draw a very elaborate like figure 8 pattern it's like this and then you can see now there it is and it's a little bit off rate is not it might not be exactly where I drew it but you can see now and then if I can draw a circle oh ok didn't recalculate the Fourier transform which is added it to the end how weird I thought I read when I do Mouse released I should redo the drawing why didn't this work right if I do one thing and then do another thing why is it still both because when I click the mouse again it should reset the drawing to zero oh the X's and Y's didn't get reset because I have this weird extra okay so that needs to happen ok so now if I draw this circle I get this it's upset is wrong and then if I do this it'll do epicycles for that okay so let's get the offset stuff actually correct and so one way to do that would be to actually just here have everything be relative to the center so where do I calculate the Fourier where do I draw the Fourier stuff here with let's get rid of this plus 100 ok so now if I draw very slowly this circle right here as soon as I let go we're gonna see it draw it right there there we go so this coating Johnson now complete let's just make sure I'm gonna draw like now this very like my drawn version of a sine wave and there we go now my drawing machine is rendering it okay so I just wanted to do this to show you at least some creative possibilities here there's so many things that could be done to refactor this to make it better but I just wanted to do this followup because this might help you start to think of other creative ideas of things you might be able to do with this particular Fourier transform epicycle drawing coding challenge thing now I am going to return at some point in the future and do one more video where instead of doing the X's and Y's separately I process them together and that I think will also be something fun and interesting to play around with so we need a little bit more sense of how complex numbers work in order to do that but so you might want to go if you haven't watch watched go back and make sure you review the implementation of the discrete fourier transform algorithm because i'm gonna be so basically be redoing that but have the inputs be complex numbers themselves okay thank you very much see you in the future please share with me versions of this that you make and I will see you soon goodbye okay Oh interesting you can reset an array using splice zero which lets it be a constant if you wish great okay draw it has to be a continuous path this is way too much fun I'm definitely gonna have to screen capture this hold on so I'm gonna use this ah I lost it I have to do it again okay I could do this on my own time a lot Oh cuz the stupid Mouse if I click anywhere oh wait I'm not screen capturing I will hold on well this let's record it like this will behind the scenes here let's make a nice little recording of this okay can I get this in 30 seconds I think that's the limit of gift fees recording I have to do it in 15 seconds well what just happened there what is going on I broke something insanely what there's a bug in my code [Laughter] I'm gonna I'm gonna make a but why I I feel like there's weird there's just like something left over see what's going on Schiffman see my concept above you also need to reset the phase of the epicycles thank you thank you alright so that was that's a bug I don't think I'm gonna also okay quick little interstitial I also need to make sure I reset time back too zero I forgot about that before I don't know if that's what's weird no no I still it's not just resetting time drawing XY I like what is going on Oh ooh I need to reset this all and released shouldn't matter right yeah Oh paths ah there's too many things to reset I forgot about that that's the problem yeah okay I'm just being a silly okay hold on okay yeah okay oops this is a weird edit point in this video because when I made it I actually forgot to reset a bunch of other things so really for this to work well even though as the video goes on it kind of works anyway I should be resetting time back to zero because I want to start at the beginning as well as path as well as resetting the path as well sorry these don't have to be reset one more time because for EAX and for a Y will get re those get those get created as blank arrays so those actually don't have to be reset sorry for this weird edit point of jumping in because when I did this coding challenge just a moment ago I forgot that I also need to reset in addition to resetting the drawing and the x's and the Y's I also need to reset the time back to zero so it starts at the beginning and I better like clear out that path so this is pretty awkward there's probably a nice way to refactor the resetting of everything but this will make it work with fewer bugs so thanks and now the challenge is going to continue so let me make sure that gets this and there we go okay so now just humor me for a second I really want to oh wait I'm not capturing the capture cursor yes okay there now I have my gift and starts right about here right draw it and then it Fourier transforms it did not start at the beginning who knows no it did and then this I should be doing on my own time not why I'm livestreaming by the way there we go let's make this 640 and save as on the desktop I'm gonna make oh sure make it a large gif I don't care looks like a groove okay geez I wanted to make it a gif so that it but I have a feeling this is just gonna be oh no it's only 2.2 megabytes it's totally fine give me a break give me a break give you a recorder who seemed to think that right am I crazy yeah 2.2 megabyte that's not too big in fact I can make the framerate high okay all right apologies everybody I'm done from today I am going to go there up there so another thing that you could try by the way is could you come up with a way to not have to do I should mention that to not have to do it as a continuous path that would be kind of interesting right how could you do make multiple sequences that draw the like to break the path into parts and actually know which parts like are lifted up and lift it down that would be interesting okay so I will be posting all of this code and everything soon the next live stream let me just see this it takes quite a while to start 4.2 minutes all right I'll deal with this later all right I have to go thank you everybody this has been a almost threehour live stream not three hours I feel satisfied that what I made it through this project the code will be posted and out there soon enough but you'll you might have to wait even a whole week for the edited version of this video to come out but I will be back the next live stream and I don't know what I'm gonna do yet on the next live stream will be a week from this Friday if you will be in Los Angeles and I see you at processing Community Day please let me know and then I also just want to remind you that I am making plans for a new playlist of videos related to working with data and api's and so if you have ideas for how I should structure this and examples you'd like to see me to do how to sequence it this will be a new set of tutorials for related to a class that I'm teaching and so feel free to file issues with questions or ideas or even pull requests if you want to help me collaborate on the code examples and syllabus outline okay so d t6s when are you going to post the code I will do that by the end of today actually yes so I will do that by the end of today just tweet at me if I haven't done it and that will remind me at Schiffman if by the way you'd though you can actually find it it's not the code that I wrote today but basically the same pretty much the same code is here at github comm / Schiffman 4ei drawings this was my like practice for it alright thank you everyone who attitude I'll sit here Simon you can help me out with your perfect picture why is this all buzzy what's buzzing is it the tuner or something rattling you're that what's rattling that rattles even more even more there's something in there sad ukelele something like but it's just been sitting here all this time somebody came in and sabotaged me this is such a nice ukulele yeah here's something oh well I think maybe now is not the time for me to figure this out I hear something shaking is it let's loose something inside there can take off the strap for a second cuz that's make sure it's not the strap it's a fret it's fret buzz yes I think but here's something shaking could there be a crack when a fat far threefoot when is the edited video with npj fun fun function coming out I don't think there's any edited vision I don't know what that's referring to that the mpj livestream I don't think has an edited component it's definitely something up top here that's rattling or not alright I will deal with this later yeah Mac that's weird strap screw our neck adjustment screw inside the cavity it sounds like it's up here although not necessarily oh you know what it is now you have no idea because it's so it resonates all around so it sounds like the tuning pegs okay J wheezes tuning pegs I am a ukulele player so if it's the tuning pegs yeah it's buzzing up here look at this if I pulled my thumb on here and it goes away so I think that's just this one is probably loose I probably need to tighten this screw right let's probably this one that's rattling yeah tuning pegs get loose that's what it is because if I hold my alright well I'm gonna put this aside and I will come back to that another time the next time I need that is for the next year's holiday fundraising okay goodbye everybody I will be posting the code soon thank you for joining me on the coding train today it is 115 I'm gonna go I will be in Los Angeles at processing community today please say hello if you are there I will be back in live streaming a week from Friday stay tuned for more ml5 tutorials nature of code stuff some coding challenges but in particular a new set of tutorials about working with data and api's and javascript what and I will refactor the ukulele later I'm gonna be clicking this stop livestreaming button in a second if I could find it oh let me see here thank you by the way to ilysm for the super chat and subha Parikh for being a new member i now by the way figured out a way to have a running log of any super chats or new members that i can refer back to later during the livestream so if you posted one i will see it and be able to answer the question but there is just a couple here thank you very much oops and now just logged me out of something that was weird now I'm gonna hit stop life streaming where is that stop dreaming there it is goodbye
