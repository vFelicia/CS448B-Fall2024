With timestamps:

00:00 - (rings bell)
00:01 - (blows flute)
00:02 - Hello, and welcome to a 2018
00:05 - holiday coding challenge, snowflakes!
00:07 - So, I was perusing the
internet last night,
00:10 - and I found this page, I
think my search term was like,
00:13 - Brownian motion snowflake fractal,
00:15 - and I found this page, it's from a website
00:17 - called Code Golf that
has a lot of different
00:20 - coding challenges on it.
00:21 - I think the idea of the
challenge is to write
00:23 - the shortest amount of code
to create this kind of effect.
00:26 - I am not going to attempt that,
00:28 - I'm probably going to write
the longest amount of code
00:30 - to make this kind of effect, but my goal
00:32 - is to try to make a
snowflake pattern like this.
00:36 - Now, if you read over this
webpage, and there's a
00:38 - few diff, this is an example
that was made in Mathematica,
00:40 - which I don't understand at all.
00:43 - But the algorithm that's
described here is, you can,
00:48 - here that it's a Brownian
tree on an integer lattice,
00:51 - that sounds so fancy!
00:53 - The idea is, if you just
think about a number line,
00:57 - or the x-axis of any coordinate system,
01:01 - and I were to start
with a point back here,
01:05 - and I were just to allow that point
01:06 - to, like, randomly move around,
01:08 - do a random walk, so to speak,
01:10 - random walk,
01:15 - and at some point I would
have to tell it to stop.
01:17 - So maybe, maybe what I would do,
01:20 - is I would tell it to stop if
it got to, like, over here.
01:23 - (laughter)
01:24 - The path, maybe this
is the 0, 0 coordinate.
01:26 - If it got to here it should stop.
01:27 - And then I'm going to start another one.
01:29 - And I'm going to let that
one do a random walk.
01:31 - Now, it's going to stop also if it gets to
01:34 - either past here, or if it
touches another previous,
01:39 - I'll call these particles.
01:40 - And this, by the way, is
basically an algorithm called
01:44 - Diffusion Limited Aggregation.
01:47 - And this is actually something that
01:48 - I have done previously
in a coding challenge.
01:50 - I'll pull up that page right here.
01:53 - You can, I'm mostly going to
implement the exact same thing.
01:55 - But you can see you'll get
this branching pattern.
01:58 - So here, the dot, there's one dot
02:00 - that starts at the center
02:01 - and everything kind of
branches out from there.
02:02 - And we could use a
recursive tree structure.
02:04 - There's all sorts of kinds of way
02:05 - we could create this branching pattern.
02:08 - But what's interesting about this,
02:09 - how can we make a snowflake?
02:11 - Well, I don't really know.
02:13 - I'm not, no expert on the
actual science of snowflakes,
02:16 - but if you've looked at
most snowflakes' designs,
02:19 - they are in a hexagonal pattern.
02:22 - We can think of that as a bunch of,
02:25 - like, triangular slices.
02:27 - Slices of a pizza pie right here, right.
02:30 - So if I were to kind of constrain
02:34 - this branching to within this sort of
02:37 - half of this slice, like right here,
02:40 - then what I could do is I could take this,
02:43 - I could reflect it on the other side,
02:45 - which would give it some symmetry,
02:46 - and then rotate it also around six times,
02:50 - and I think, I'm pretty sure,
that's what that is happening
02:54 - in that animation that I
showed in the beginning.
02:56 - So this is what I'm
going to attempt to do.
02:58 - I'm sure, I'm not sure, but I expect
03:01 - there are lots of creative possibilities
03:03 - with color, and improving the algorithm,
03:05 - and size, and rendering that you could do
03:07 - from watching this.
03:08 - So my hope is that we will now be filled
03:10 - with a world of code made snowflakes.
03:14 - But let's start this and see.
03:16 - It's similar to probably also to, like,
03:18 - what you would do to make a
kaleidoscope program I think.
03:20 - So let's start trying to do this.
03:21 - I'm going to do this in Processing,
03:23 - which is a Java based
programming environment.
03:25 - This is, by the way, being
recorded during a fundraiser.
03:28 - You can go to
processingfoundation.org/support
03:31 - to make a donation to the
non-profit Processing.
03:34 - And I will also release
a JavaScript version
03:38 - in p5.js that you can also use
03:39 - to make this thing happen in the browser.
03:42 - Alright, so the first
thing that I want to do
03:44 - is I just want to make a particle.
03:47 - Oh I guess I need to have a class.
03:48 - (laughter)
03:49 - So let's make a class called particle.
03:53 - Do I dare use p-vectors?
03:55 - Let's try to be simple for a little bit
03:57 - here for a second.
03:58 - Let's start without p-vectors
04:00 - and let's just make the particle have
04:01 - an x and a y,
04:03 - and I'm going to say the particle
04:05 - is going to start at some other x and y,
04:09 - so this is a, this is a class
04:12 - from which I'm going to
make particle objects,
04:14 - and this is the class's constructor
04:16 - that is going to receive an x and a y
04:18 - and create the particle there.
04:21 - I probably actually don't,
04:22 - I could've just used a
single vector actually,
04:24 - but that's fine.
04:25 - Let's make a particle class.
04:27 - And then what I'm going to do is
04:29 - I'm going to write a function called,
04:31 - like, update
04:32 - and I'm going to say x equals,
04:34 - so I'm going to do a
really simple random walk,
04:36 - which it's all, I'm going
to make the particle,
04:37 - I'm going to start it this way.
04:38 - I probably want to,
like, start the particle
04:41 - somewhere around here,
04:43 - and then have it randomly
walk in this direction
04:45 - to stay within the slice,
04:46 - but just for simplicity's sake,
04:47 - let's start it right here right now
04:49 - and have it randomly go this way.
04:50 - I'm going to say x equals,
04:54 - x minus equals one,
04:56 - y plus equals some random number
04:58 - between negative one and one, alright.
05:01 - So let's do that.
05:03 - And then let's make a particle.
05:06 - I'm going to call it current.
05:08 - And let's say size 600 600 for the window,
05:11 - and I'm going to make a new particle,
05:13 - which is going to start at 600 comma zero,
05:16 - and I'm going to say background zero.
05:18 - Current dot update.
05:22 - And then let's also write
a function like show.
05:26 - So, I'm going to write
a function called show
05:29 - and let's just draw
this as, it'll be white
05:34 - with a white outline
05:35 - and this should probably have a size too.
05:37 - Let's give it a radius
05:39 - and then I can just set that
05:40 - always to be, like, three.
05:42 - I don't know, I'm making this up.
05:44 - Ellipse, x comma y
05:47 - r times two
05:49 - r times two
05:50 - because the radius is, the
diameter is the radius times two.
05:53 - Alright, so now if I were to say,
05:59 - oh, this should be good.
06:02 - Oh there it is.
06:03 - There it is, it's
wandering around up there.
06:05 - Okay, so one thing I want to do
06:07 - is I really, this is
going to work much better,
06:09 - if everything can be
relative to the center.
06:11 - So I'm going to translate
zero zero to the center.
06:15 - Let's do that.
06:17 - Translate width divided by two,
06:21 - height divided by two.
06:22 - And then the particle
should actually start
06:24 - at width divided by two
06:26 - 'cause it's that far out.
06:27 - It could start further out, but,
06:29 - and now we can see, there it is.
06:30 - There's my particle.
06:31 - Go, go particle.
06:33 - You can do it.
06:34 - You can make it to the center.
06:35 - Okay, it's just going to keep going,
06:36 - so there's, I need some
way of telling it to stop.
06:39 - (laughter)
06:40 - So, let's say if current dot finished,
06:48 - then what I want is I
want to have a big array,
06:49 - I mean, I could just not erase the,
06:51 - I could render it to, like,
06:52 - a separate graphics object or something,
06:55 - but let's, this'll be
the less efficient way,
06:56 - but let's make an array list
07:00 - that is full of particles.
07:02 - Let's call this the snowflake.
07:05 - Snowflake equals new, what was I saying,
07:09 - array list.
07:13 - New array list of particles,
07:15 - and then if it's finished
07:17 - I'm going to say snowflake dot add
07:22 - the current particle,
07:23 - and then I should remake
the current particle again,
07:28 - like I should make a new current particle.
07:30 - And then I also should for
every particle p in snowflake,
07:40 - I should show them all.
07:41 - So the idea here is that I
have this particle wandering.
07:45 - As soon as it's done it
gets added to the list
07:47 - and a new one starts wandering.
07:49 - So I need to implement
this finished function.
07:51 - As you can see this read squiggly is like
07:53 - I don't know what that is.
07:54 - What does it mean for a
particle to be finished?
07:55 - And I can say boolean finished
07:58 - 'cause I want this function
to return a boolean variable.
08:01 - I mean, yeah, a boolean
value, true or false.
08:04 - Return x is less than zero.
08:08 - So it's finished when x is less than zero.
08:10 - Obviously I'm going to have to get
08:11 - more sophisticated than that,
08:12 - but that will be a good start.
08:14 - So let's see here.
08:17 - Go particle, go.
08:19 - Go particle, go.
08:20 - Go particle, go, stop.
08:22 - Go particle, go.
08:23 - Go particle, go.
08:25 - Go particle, go.
08:25 - Go particle, stop.
08:27 - Okay, so that's good.
08:28 - This is kind of working.
08:30 - I actually, I really
kind of want to reflect,
08:32 - do the kaleidoscope thing
now so we always see that.
08:34 - Oh that'll be so fun.
08:37 - So the particle is finished
08:40 - if also, if it's, if it's past zero
08:45 - or if intersects another particle.
08:47 - So, I guess I could say,
if current is finished
08:51 - or current intersects
snowflake, the existing.
08:57 - So now I need to write also
08:59 - another function called boolean intersects
09:05 - and does it intersect,
09:07 - the snowflake is just
an array list, right.
09:10 - (groans)
09:13 - A particular snowflake.
09:15 - And then let's just put a
return false here for a second,
09:20 - make sure this is still working.
09:21 - So it's still working,
it's never going to stop.
09:24 - But now it will also, if, okay,
09:29 - I'm thinking, I'm thinking,
09:30 - it's so hard to talk and code.
09:31 - If it intersects itself, like,
09:32 - I have to just check every
other snowflake against it
09:34 - and current is not currently
in the snowflake array
09:37 - so I don't have to
check it against itself.
09:38 - So, I'm going to assume a result,
09:42 - I'm going to assume it's
not intersecting anything.
09:47 - Then I'm going to check everything
09:48 - for particle s in snowflake
09:53 - if, and then I just
need to get the distance
09:55 - between s x, s y, and
this x, and this dot y.
09:59 - By the way, I should
mention I have this thing
10:02 - (upbeat music)
10:03 - where I always forget
the this dot, this dot,
10:06 - but actually in Java,
the this dot is assumed,
10:10 - but in this case I kind of felt like
10:12 - I wanted to put it in there,
10:13 - 'cause I want the distance between s dot x
10:15 - and this dot x, this dot y,
10:16 - but I don't actually need it.
10:17 - So that's what I'm doing.
10:18 - And then I'mma say if
the distance is less than
10:21 - the radius times two also,
10:25 - then result equals true.
10:29 - And I can also break out
of the list, the loop.
10:31 - Like I don't need to keep checking.
10:32 - I can say break and then return result.
10:35 - So now, this should get me,
10:38 - that it's going to stop if it,
10:43 - if it intersects another
dot or gets past zero.
10:46 - Come on, oh!
10:49 - So exciting, it worked.
10:50 - Go, go, go, go, go, this is like so slow.
10:53 - So this would actually be,
10:53 - it's sort of interesting to think about
10:55 - whether we want to animate this or not.
10:58 - Great, so this is working.
10:59 - What I want to do right now, let's,
11:00 - let's do the crazy thing I want to do,
11:02 - which is kaleidoscope it.
11:03 - So I want to actually now
while this is happening,
11:06 - I want to reflect it along this axis
11:08 - and then also rotate it around six times.
11:11 - I think six is the right number.
11:13 - I'm not really sure.
11:14 - Okay, so in order to do that
11:16 - it's really all about here
11:19 - and here.
11:21 - Let's see, how do I want to reflect it?
11:23 - I could use the scale function, right?
11:26 - Like, push, let's just use
push and pop just in case.
11:30 - Pop, scale one negative one,
11:34 - like would that reflect it around the,
11:36 - whoops.
11:37 - Oh, changes.
11:38 - This used to work and now it doesn't.
11:40 - By the way, it's push and pop in p5,
11:42 - but in Processing it's
pushMatrix and popMatrix.
11:46 - Is this actually going to work?
11:48 - Oh yeah, look at that.
11:49 - It's reflected around the x-axis.
11:52 - That's pretty cool, right?
11:54 - So that worked.
11:56 - Then what I want to do
is, in addition to that,
11:59 - I also want to do this six times.
12:01 - So I'm going to say for int i equals zero,
12:04 - i is less than pi divided by, oh two pi,
12:08 - no, no, i is less than six.
12:10 - Let's just use an integer, i plus plus.
12:13 - Then I'm just going to say rotate
12:16 - pi divided by six, right?
12:19 - Oh that's wrong.
12:21 - Rotate pi divided by three.
12:24 - There we go.
12:25 - Cool!
12:27 - So now, we've got it kind of reflected
12:31 - and kaleidoscoping.
12:33 - Oh, this is fun.
12:34 - Alright, so you can see how this is,
12:35 - by the way, were kind of done.
12:37 - (laughter)
12:38 - It's just a matter of,
12:39 - there's a few things I think
12:40 - that are worth cleaning up here.
12:41 - First of all, we're really going to have
12:42 - to wait a really long time watching it,
12:44 - although I really do like this
kind of animation idea of,
12:48 - like, watching it build up over time.
12:50 - But there's also kind of an issue here,
12:52 - like I really should constrain,
12:55 - like I, this thing that's moving this way,
12:57 - I think I want to constrain
it within this slice.
13:01 - Like I don't want to let it
to go outside of the slice.
13:03 - So in order to do that
13:07 - while it's moving, updating,
13:10 - I should, this is why it would've
been good to use a vector.
13:13 - Let's actually change this.
13:15 - I'm going to say p-vector position,
13:20 - and I'm just going to
call it pos for position,
13:21 - and then I can also make this x and y.
13:24 - And I'm going to say pos
equals a new p-vector x and y.
13:29 - And then I'm going to
say pos dot x, pos dot y,
13:33 - and pos dot x, pos dot y.
13:38 - And then s dot pos dot x.
13:43 - Might be a more elegant way to do this.
13:45 - Pos dot x, pos dot y, and pos dot x.
13:49 - Okay, so this should be the
same as what I had before,
13:52 - but what I like about
this is I can actually
13:55 - get the angle now.
13:56 - If I have it in a vector,
13:57 - I can say the angle equals
position dot heading.
14:01 - And then what I could do
is I could basically say
14:03 - angle should be constrained
14:06 - between zero and pi divided by six
14:08 - 'cause I kind of want a 30
degree angle there, I think.
14:12 - Oh, and I want to constrain the angle,
14:14 - and then I could just make a new vector.
14:16 - So if I say the magnitude
is the magnitude,
14:22 - and then I can re...,
there's probably a way
14:25 - to like rotate the vector
without making a new one,
14:27 - but I can really just say now
14:28 - pos dot x equals magnitude.
14:31 - I mean I could make a new vector.
14:33 - Pos equals p-vector dot from,
14:37 - from angle angle.
14:41 - And then pos dot set mag magnitude.
14:44 - So this is not a very
efficient way of doing this
14:47 - because I'm making a new object,
14:49 - but basically I'm just
taking the existing vector,
14:52 - whatever it is, like if this is it here
14:56 - represented as this arrow,
14:57 - I'm basically constraining
the angle to here
15:00 - and then making a new
vector that looks like this,
15:03 - so as it's wandering,
it can't go past here
15:04 - and it can't go past here.
15:07 - Let's see if that works.
15:09 - I mean, it's sort of hard to tell,
15:10 - but it's going to, you know,
is this really different?
15:13 - I think we might see the difference
15:15 - if I were to speed this up.
15:16 - Oh, weird.
15:18 - Oh I think I know what the issue is.
15:20 - It's never going to go past zero, right.
15:23 - I think it's never going to go past zero
15:24 - because I'm constraining the angle
15:26 - so even if it gets past
zero, I put the angle back.
15:28 - So look at this, it's never
going to get past zero.
15:30 - Eh, let's just make it less than one.
15:32 - Let's make it never go less than,
15:35 - where is that in update, in finished?
15:38 - Yeah, let's just say less than one.
15:40 - (chuckles)
15:40 - Okay.
15:43 - And ngramptz in the chat says
15:45 - do you think randomizing
the starting position?
15:47 - Yeah, I definitely should
randomize the starting position,
15:49 - I think that'll be more interesting.
15:51 - Okay, so this is working, working again.
15:54 - Let's speed this up.
15:55 - While current is not finished
and it's not intersecting,
16:01 - so I could like, I could basically
16:02 - put a while loop here in
draw that's basically saying,
16:05 - like, keep updating.
16:06 - Update, update, update until you're done.
16:08 - Let's see.
16:09 - Oh yeah, there we go.
16:11 - Hey!
16:12 - (rings bell)
16:13 - Ta-da!
16:14 - That's cool.
16:15 - Wait, why is it...
16:17 - I don't like, hold on.
16:19 - I feel like it doesn't
look very snowflakey.
16:21 - We should rotate pi divided by three?
16:28 - Yeah, no.
16:30 - Pi divided by six?
16:33 - There we go.
16:34 - That's better.
16:35 - It should be, that line
should be vertical.
16:37 - And you're right, it's not very,
16:38 - it doesn't branch out so much.
16:41 - Let's try some things.
16:42 - One thing would be we could
16:45 - kind of let it wander off further.
16:48 - Yeah, that's kind of cool.
16:51 - It's also the other thing
that's happening here
16:52 - is it's, just like, it's never ending.
16:55 - It's never ending.
16:57 - So what if we, okay.
17:00 - So let's randomize the starting position.
17:05 - So, again, if I were being sort of smart,
17:08 - smart, probably the best way to do this,
17:10 - I don't know what counts as best,
17:12 - but it would probably make sense for me
17:13 - to kind of randomize the starting position
17:16 - along the path of this kind of circle
17:20 - of radius width,
17:22 - and then randomize a starting vector maybe
17:25 - that points towards the center.
17:27 - But I think I can get the same effect,
17:29 - loosely the same effect by just,
17:31 - kind of, randomizing the height.
17:33 - So like what if I let it start
between zero and 10 pixels.
17:40 - Yeah, that's kind of nice.
17:41 - I mean, this is very snowflakey.
17:44 - (rings bell)
17:45 - Okay, one more thing that I'm going to do,
17:46 - let's just make this full screen.
17:49 - Full screen.
17:52 - Let's, oh, we should probably make
17:54 - this height divided by two
17:56 - because, oh that doesn't
actually really matter,
17:59 - width divided by two.
18:00 - Let's try it.
18:01 - Alright here we go, full screen.
18:03 - Alright, here it is.
18:05 - Here is your, whoa it's crazy
18:07 - 'cause it came out from so far.
18:09 - Here is your snowflake generator.
18:11 - (blows flute)
18:12 - This is my in Processing Brownian Motion
18:16 - Diffusion Limited Aggregation
snowflake generator.
18:19 - There is so much you could do now, right?
18:21 - You could start to think about color.
18:23 - You could start to think
more about the sort of,
18:24 - like, what if it were a vector
18:26 - and you play with the velocity
18:28 - or how you could constrain it,
18:29 - how could you animate
it in different ways.
18:30 - But this is the basic idea.
18:32 - Here we go, we now have
a snowflake pattern
18:36 - generated very fractal
kaleidoscopey like thing
18:39 - for the holidays.
18:41 - Make your snowflakes.
18:42 - Maybe you could even do something
18:43 - where you make these much smaller
18:45 - and save them as little PNGs
18:46 - and then you have, you generate, like,
18:48 - thousands of different snowflake patterns.
18:50 - Alright, I'm sure you will come up
18:51 - with some interesting
improvements on this.
18:53 - Please check the video's description
18:54 - for a link at the coding-training.com
18:56 - to where you can submit
your own version of this,
19:00 - and also there'll be a
JavaScript implementation there,
19:03 - and I encourage you if
you enjoyed this video
19:05 - to consider supporting
the Processing Foundation.
19:07 - Processingfoundation.org/support.
19:11 - It could use your support.
19:13 - Thank you very much and goodbye.
19:14 - (rings bell)
19:15 - (upbeat music)

Cleaned transcript:

(rings bell) (blows flute) Hello, and welcome to a 2018 holiday coding challenge, snowflakes! So, I was perusing the internet last night, and I found this page, I think my search term was like, Brownian motion snowflake fractal, and I found this page, it's from a website called Code Golf that has a lot of different coding challenges on it. I think the idea of the challenge is to write the shortest amount of code to create this kind of effect. I am not going to attempt that, I'm probably going to write the longest amount of code to make this kind of effect, but my goal is to try to make a snowflake pattern like this. Now, if you read over this webpage, and there's a few diff, this is an example that was made in Mathematica, which I don't understand at all. But the algorithm that's described here is, you can, here that it's a Brownian tree on an integer lattice, that sounds so fancy! The idea is, if you just think about a number line, or the xaxis of any coordinate system, and I were to start with a point back here, and I were just to allow that point to, like, randomly move around, do a random walk, so to speak, random walk, and at some point I would have to tell it to stop. So maybe, maybe what I would do, is I would tell it to stop if it got to, like, over here. (laughter) The path, maybe this is the 0, 0 coordinate. If it got to here it should stop. And then I'm going to start another one. And I'm going to let that one do a random walk. Now, it's going to stop also if it gets to either past here, or if it touches another previous, I'll call these particles. And this, by the way, is basically an algorithm called Diffusion Limited Aggregation. And this is actually something that I have done previously in a coding challenge. I'll pull up that page right here. You can, I'm mostly going to implement the exact same thing. But you can see you'll get this branching pattern. So here, the dot, there's one dot that starts at the center and everything kind of branches out from there. And we could use a recursive tree structure. There's all sorts of kinds of way we could create this branching pattern. But what's interesting about this, how can we make a snowflake? Well, I don't really know. I'm not, no expert on the actual science of snowflakes, but if you've looked at most snowflakes' designs, they are in a hexagonal pattern. We can think of that as a bunch of, like, triangular slices. Slices of a pizza pie right here, right. So if I were to kind of constrain this branching to within this sort of half of this slice, like right here, then what I could do is I could take this, I could reflect it on the other side, which would give it some symmetry, and then rotate it also around six times, and I think, I'm pretty sure, that's what that is happening in that animation that I showed in the beginning. So this is what I'm going to attempt to do. I'm sure, I'm not sure, but I expect there are lots of creative possibilities with color, and improving the algorithm, and size, and rendering that you could do from watching this. So my hope is that we will now be filled with a world of code made snowflakes. But let's start this and see. It's similar to probably also to, like, what you would do to make a kaleidoscope program I think. So let's start trying to do this. I'm going to do this in Processing, which is a Java based programming environment. This is, by the way, being recorded during a fundraiser. You can go to processingfoundation.org/support to make a donation to the nonprofit Processing. And I will also release a JavaScript version in p5.js that you can also use to make this thing happen in the browser. Alright, so the first thing that I want to do is I just want to make a particle. Oh I guess I need to have a class. (laughter) So let's make a class called particle. Do I dare use pvectors? Let's try to be simple for a little bit here for a second. Let's start without pvectors and let's just make the particle have an x and a y, and I'm going to say the particle is going to start at some other x and y, so this is a, this is a class from which I'm going to make particle objects, and this is the class's constructor that is going to receive an x and a y and create the particle there. I probably actually don't, I could've just used a single vector actually, but that's fine. Let's make a particle class. And then what I'm going to do is I'm going to write a function called, like, update and I'm going to say x equals, so I'm going to do a really simple random walk, which it's all, I'm going to make the particle, I'm going to start it this way. I probably want to, like, start the particle somewhere around here, and then have it randomly walk in this direction to stay within the slice, but just for simplicity's sake, let's start it right here right now and have it randomly go this way. I'm going to say x equals, x minus equals one, y plus equals some random number between negative one and one, alright. So let's do that. And then let's make a particle. I'm going to call it current. And let's say size 600 600 for the window, and I'm going to make a new particle, which is going to start at 600 comma zero, and I'm going to say background zero. Current dot update. And then let's also write a function like show. So, I'm going to write a function called show and let's just draw this as, it'll be white with a white outline and this should probably have a size too. Let's give it a radius and then I can just set that always to be, like, three. I don't know, I'm making this up. Ellipse, x comma y r times two r times two because the radius is, the diameter is the radius times two. Alright, so now if I were to say, oh, this should be good. Oh there it is. There it is, it's wandering around up there. Okay, so one thing I want to do is I really, this is going to work much better, if everything can be relative to the center. So I'm going to translate zero zero to the center. Let's do that. Translate width divided by two, height divided by two. And then the particle should actually start at width divided by two 'cause it's that far out. It could start further out, but, and now we can see, there it is. There's my particle. Go, go particle. You can do it. You can make it to the center. Okay, it's just going to keep going, so there's, I need some way of telling it to stop. (laughter) So, let's say if current dot finished, then what I want is I want to have a big array, I mean, I could just not erase the, I could render it to, like, a separate graphics object or something, but let's, this'll be the less efficient way, but let's make an array list that is full of particles. Let's call this the snowflake. Snowflake equals new, what was I saying, array list. New array list of particles, and then if it's finished I'm going to say snowflake dot add the current particle, and then I should remake the current particle again, like I should make a new current particle. And then I also should for every particle p in snowflake, I should show them all. So the idea here is that I have this particle wandering. As soon as it's done it gets added to the list and a new one starts wandering. So I need to implement this finished function. As you can see this read squiggly is like I don't know what that is. What does it mean for a particle to be finished? And I can say boolean finished 'cause I want this function to return a boolean variable. I mean, yeah, a boolean value, true or false. Return x is less than zero. So it's finished when x is less than zero. Obviously I'm going to have to get more sophisticated than that, but that will be a good start. So let's see here. Go particle, go. Go particle, go. Go particle, go, stop. Go particle, go. Go particle, go. Go particle, go. Go particle, stop. Okay, so that's good. This is kind of working. I actually, I really kind of want to reflect, do the kaleidoscope thing now so we always see that. Oh that'll be so fun. So the particle is finished if also, if it's, if it's past zero or if intersects another particle. So, I guess I could say, if current is finished or current intersects snowflake, the existing. So now I need to write also another function called boolean intersects and does it intersect, the snowflake is just an array list, right. (groans) A particular snowflake. And then let's just put a return false here for a second, make sure this is still working. So it's still working, it's never going to stop. But now it will also, if, okay, I'm thinking, I'm thinking, it's so hard to talk and code. If it intersects itself, like, I have to just check every other snowflake against it and current is not currently in the snowflake array so I don't have to check it against itself. So, I'm going to assume a result, I'm going to assume it's not intersecting anything. Then I'm going to check everything for particle s in snowflake if, and then I just need to get the distance between s x, s y, and this x, and this dot y. By the way, I should mention I have this thing (upbeat music) where I always forget the this dot, this dot, but actually in Java, the this dot is assumed, but in this case I kind of felt like I wanted to put it in there, 'cause I want the distance between s dot x and this dot x, this dot y, but I don't actually need it. So that's what I'm doing. And then I'mma say if the distance is less than the radius times two also, then result equals true. And I can also break out of the list, the loop. Like I don't need to keep checking. I can say break and then return result. So now, this should get me, that it's going to stop if it, if it intersects another dot or gets past zero. Come on, oh! So exciting, it worked. Go, go, go, go, go, this is like so slow. So this would actually be, it's sort of interesting to think about whether we want to animate this or not. Great, so this is working. What I want to do right now, let's, let's do the crazy thing I want to do, which is kaleidoscope it. So I want to actually now while this is happening, I want to reflect it along this axis and then also rotate it around six times. I think six is the right number. I'm not really sure. Okay, so in order to do that it's really all about here and here. Let's see, how do I want to reflect it? I could use the scale function, right? Like, push, let's just use push and pop just in case. Pop, scale one negative one, like would that reflect it around the, whoops. Oh, changes. This used to work and now it doesn't. By the way, it's push and pop in p5, but in Processing it's pushMatrix and popMatrix. Is this actually going to work? Oh yeah, look at that. It's reflected around the xaxis. That's pretty cool, right? So that worked. Then what I want to do is, in addition to that, I also want to do this six times. So I'm going to say for int i equals zero, i is less than pi divided by, oh two pi, no, no, i is less than six. Let's just use an integer, i plus plus. Then I'm just going to say rotate pi divided by six, right? Oh that's wrong. Rotate pi divided by three. There we go. Cool! So now, we've got it kind of reflected and kaleidoscoping. Oh, this is fun. Alright, so you can see how this is, by the way, were kind of done. (laughter) It's just a matter of, there's a few things I think that are worth cleaning up here. First of all, we're really going to have to wait a really long time watching it, although I really do like this kind of animation idea of, like, watching it build up over time. But there's also kind of an issue here, like I really should constrain, like I, this thing that's moving this way, I think I want to constrain it within this slice. Like I don't want to let it to go outside of the slice. So in order to do that while it's moving, updating, I should, this is why it would've been good to use a vector. Let's actually change this. I'm going to say pvector position, and I'm just going to call it pos for position, and then I can also make this x and y. And I'm going to say pos equals a new pvector x and y. And then I'm going to say pos dot x, pos dot y, and pos dot x, pos dot y. And then s dot pos dot x. Might be a more elegant way to do this. Pos dot x, pos dot y, and pos dot x. Okay, so this should be the same as what I had before, but what I like about this is I can actually get the angle now. If I have it in a vector, I can say the angle equals position dot heading. And then what I could do is I could basically say angle should be constrained between zero and pi divided by six 'cause I kind of want a 30 degree angle there, I think. Oh, and I want to constrain the angle, and then I could just make a new vector. So if I say the magnitude is the magnitude, and then I can re..., there's probably a way to like rotate the vector without making a new one, but I can really just say now pos dot x equals magnitude. I mean I could make a new vector. Pos equals pvector dot from, from angle angle. And then pos dot set mag magnitude. So this is not a very efficient way of doing this because I'm making a new object, but basically I'm just taking the existing vector, whatever it is, like if this is it here represented as this arrow, I'm basically constraining the angle to here and then making a new vector that looks like this, so as it's wandering, it can't go past here and it can't go past here. Let's see if that works. I mean, it's sort of hard to tell, but it's going to, you know, is this really different? I think we might see the difference if I were to speed this up. Oh, weird. Oh I think I know what the issue is. It's never going to go past zero, right. I think it's never going to go past zero because I'm constraining the angle so even if it gets past zero, I put the angle back. So look at this, it's never going to get past zero. Eh, let's just make it less than one. Let's make it never go less than, where is that in update, in finished? Yeah, let's just say less than one. (chuckles) Okay. And ngramptz in the chat says do you think randomizing the starting position? Yeah, I definitely should randomize the starting position, I think that'll be more interesting. Okay, so this is working, working again. Let's speed this up. While current is not finished and it's not intersecting, so I could like, I could basically put a while loop here in draw that's basically saying, like, keep updating. Update, update, update until you're done. Let's see. Oh yeah, there we go. Hey! (rings bell) Tada! That's cool. Wait, why is it... I don't like, hold on. I feel like it doesn't look very snowflakey. We should rotate pi divided by three? Yeah, no. Pi divided by six? There we go. That's better. It should be, that line should be vertical. And you're right, it's not very, it doesn't branch out so much. Let's try some things. One thing would be we could kind of let it wander off further. Yeah, that's kind of cool. It's also the other thing that's happening here is it's, just like, it's never ending. It's never ending. So what if we, okay. So let's randomize the starting position. So, again, if I were being sort of smart, smart, probably the best way to do this, I don't know what counts as best, but it would probably make sense for me to kind of randomize the starting position along the path of this kind of circle of radius width, and then randomize a starting vector maybe that points towards the center. But I think I can get the same effect, loosely the same effect by just, kind of, randomizing the height. So like what if I let it start between zero and 10 pixels. Yeah, that's kind of nice. I mean, this is very snowflakey. (rings bell) Okay, one more thing that I'm going to do, let's just make this full screen. Full screen. Let's, oh, we should probably make this height divided by two because, oh that doesn't actually really matter, width divided by two. Let's try it. Alright here we go, full screen. Alright, here it is. Here is your, whoa it's crazy 'cause it came out from so far. Here is your snowflake generator. (blows flute) This is my in Processing Brownian Motion Diffusion Limited Aggregation snowflake generator. There is so much you could do now, right? You could start to think about color. You could start to think more about the sort of, like, what if it were a vector and you play with the velocity or how you could constrain it, how could you animate it in different ways. But this is the basic idea. Here we go, we now have a snowflake pattern generated very fractal kaleidoscopey like thing for the holidays. Make your snowflakes. Maybe you could even do something where you make these much smaller and save them as little PNGs and then you have, you generate, like, thousands of different snowflake patterns. Alright, I'm sure you will come up with some interesting improvements on this. Please check the video's description for a link at the codingtraining.com to where you can submit your own version of this, and also there'll be a JavaScript implementation there, and I encourage you if you enjoyed this video to consider supporting the Processing Foundation. Processingfoundation.org/support. It could use your support. Thank you very much and goodbye. (rings bell) (upbeat music)
