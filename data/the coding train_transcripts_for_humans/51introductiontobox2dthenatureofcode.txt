With timestamps:

00:03 - hello again okay this video this this
00:07 - this section of videos is going to be
00:09 - all entirely about something called
00:11 - box2d box2d let's read that over here
00:16 - box2d
00:18 - now why are we talking about box today
00:21 - okay so what have we been doing we have
00:24 - been making all these examples they have
00:25 - these mover objects the objects have
00:27 - these vectors they have these functions
00:29 - what do they do they move around the
00:30 - screen they respond to forces we've been
00:32 - building our own physics engine
00:34 - bit by bit slowly by slowly looking at
00:36 - different examples and scenarios for
00:38 - simulating physics and motion on the
00:40 - screen of course it's probably quite
00:43 - obvious to you that we are not the first
00:46 - people to have ever thought of this
00:47 - problem and ever done this and in fact
00:49 - physics simulation exists everywhere in
00:53 - computer graphics and there are lots of
00:55 - examples of ways of writing code and
00:58 - libraries that you can use so what we
01:00 - want to take a moment in this nature of
01:03 - code experience to say okay well there's
01:06 - value to us building our own physics
01:08 - engine to learning the ins and outs of
01:10 - it to kind of being creative with what
01:11 - we're making but maybe there is a time
01:14 - in place where we should just use
01:16 - somebody else's physics engine somebody
01:18 - else's physics library to control the
01:21 - behavior and motion of everything on the
01:22 - screen and so what I want to look at in
01:24 - this video is a what is what is the
01:27 - physics library what is box2d where do I
01:29 - get box oudy and what are the pros and
01:31 - cons of using something like box would
01:33 - be instead of custom baking your own
01:36 - stuff okay so this is going to be
01:40 - challenging I have made a list got eight
01:43 - videos to do it would probably turn into
01:45 - more honestly is a huge topic and it's
01:47 - not going to be easy but so this first
01:49 - video which you know which will just be
01:51 - a short hopefully I just want to kind of
01:52 - talk through the basic elements of
01:54 - oxygen look at a couple websites where
01:55 - you can get stuff I'll include links
01:57 - below wherever you're watching this on
01:59 - Vimeo or wherever of where you want to
02:01 - download the stuff and then you know
02:03 - we'll get into the details in in future
02:05 - videos so if you kind of already if you
02:07 - know what box 2d is and you've already
02:08 - up and running you could stop now and
02:10 - just go to the
02:11 - video okay so box2d let's think about
02:16 - why why is what is what is the sort of
02:18 - central reason why you might want to use
02:20 - a library like box today okay so I'm
02:22 - sure this scenario has come up for you
02:24 - before you you have all these circles
02:26 - moving around the screen and you're
02:28 - programming them with vectors and forces
02:30 - and they're all doing all this exciting
02:31 - stuff but you want to figure out you
02:33 - know you have got this circle in this
02:35 - other circle and they're moving towards
02:36 - each other and you know they're gonna
02:37 - they're going to get right next to each
02:39 - other and you're going to want to detect
02:40 - the fact that they are touching each
02:42 - other and they're bouncing off each
02:43 - other you want to do something with
02:45 - their collision if you have a program
02:49 - where the collisions of objects matter
02:52 - to you if you have this idea for
02:53 - something you want to make and you're
02:55 - walking down the street describing your
02:57 - idea to your friend you to do to do
02:58 - bla bla bla collisions bla bla bla
03:00 - collisions this is madness and that mat
03:02 - and then they collide and bla bla bla if
03:04 - you're using the word collision over and
03:06 - over again in your project description
03:07 - this is a moment where probably you want
03:10 - to use box2d
03:11 - we could start to go through the math
03:13 - for this and it's with circles it's not
03:16 - so bad we know first of all we know how
03:18 - to detect if two circles are
03:20 - intersecting or not right we can just
03:23 - look at the distance between those two
03:24 - circles and if the distance between
03:28 - those two circles is greater than the
03:31 - sum of their radii then they're not
03:34 - overlapping if it's less than the sum of
03:36 - the radii they are overlapping and then
03:39 - we could start to figure out okay well
03:40 - if if they are overlapping what do we do
03:42 - with them well we know their velocity
03:44 - vectors we could probably do some vector
03:46 - math and reflect their vectors and
03:48 - bounce them and rotate them and we could
03:50 - figure out what direction they're going
03:51 - to go and this would be a worthwhile
03:52 - exercise and somebody someday should
03:55 - make a video about how to do this
03:56 - scenario but this is the moment this is
03:59 - the moment in our life where we are
04:01 - choosing not to go down this road
04:02 - because this road leads to other more
04:05 - complicated and stressful problems like
04:07 - what if they aren't circles what if
04:09 - these are strangely shaped polygons oh
04:11 - and and one of those strangely shaped
04:13 - polygons should like are spinning and
04:15 - how do we know if they're overlapping
04:16 - when they hit each other should how are
04:18 - they going to bounce off each other and
04:19 - with friction and what if they're kind
04:21 - of elastic are not very elastic there's
04:23 - so many ways
04:24 - could make this problem so unbelievably
04:26 - complicated we could suddenly find
04:27 - ourselves dedicating the next several
04:30 - years of our life to figuring out just
04:32 - what to do about things colliding the
04:34 - good news for us is somebody else we
04:36 - spent many years of their life dedicated
04:38 - this problem and they released the
04:40 - solution in an open source library
04:42 - called box2d
04:43 - so one of the central reasons why we
04:45 - want to use box2d is to deal with stuff
04:48 - like collisions in two dimensions now if
04:50 - we're going to get into 3d that we get
04:52 - let's not eat what how do you going to
04:53 - get in this in the about box today we're
04:56 - sticking in two dimensions you might
04:59 - this is it brings up an interesting
05:00 - point though which is that is their
05:03 - effort what you could be asking yourself
05:05 - okay that's great
05:06 - why would I never not use boxes yeah I
05:08 - mean that sounds awesome I should just
05:09 - use that for everything and you might
05:11 - choose to now use it for everything but
05:13 - I do want to emphasize that this doesn't
05:16 - come without any any pain as well right
05:19 - using the library you've got to learn
05:22 - how the library works you got to figure
05:24 - out how to import stuff which functions
05:26 - which classes there's a lot of overhead
05:28 - and as we're going to see there's a lot
05:30 - of stuff we have to kind of learn how to
05:33 - use just a distant you know just to get
05:36 - a circle moving on the screen with box2d
05:38 - is a lot more effort than without it but
05:41 - when we once we get to the effort of
05:42 - having to deal with collisions it
05:44 - becomes worth that effort to get box2d
05:45 - up and running so it's this kind of
05:47 - balancing act and I'm very curious
05:50 - actually I don't I don't pretend to have
05:52 - the answer to this you this is a
05:54 - question you will have to wrestle with I
05:56 - have this idea for this project I want
05:58 - to make should I use this library should
06:00 - use this other libraries should I use no
06:02 - library and this is the question we hope
06:03 - to as a community where we maybe kind of
06:07 - solve together and talk about and
06:08 - discuss and I would be interested in
06:10 - hearing from you as to you know what
06:12 - what's what's work the box Rd and what
06:14 - hasn't so ok so this kind of gets us
06:17 - over the hump of why we want to use box
06:20 - 2d so there's two more questions we need
06:22 - to answer in this particular video one
06:25 - is where do I get it and how can I even
06:27 - be up and running with it and and then
06:29 - kind of what is the overview what's the
06:31 - bigger picture here what are the central
06:33 - elements that I need to learn about so
06:35 - let's first take a look at
06:37 - where it is that you get box duty and
06:39 - what box2d really is that the first
06:41 - thing I should mention though I'm going
06:43 - to clue this is so like kind of analog
06:46 - of me but um here's a website that you
06:48 - could go to box2d org and I'm gonna
06:50 - include everything that I'm going to
06:52 - show you them and include is links below
06:53 - wherever you're watching this you know
06:55 - probably on video in the description
06:57 - I'll include links okay so what is box
07:01 - UT that actually what I've hit to right
07:03 - here I'm just kind of rambling now is
07:04 - C++ so one thing we should be aware of
07:08 - is box 2d is a C++ engine it's written
07:11 - in C++ and if you go back to box 2d org
07:14 - that's where you can download it you can
07:16 - find the documentation there's a forum
07:18 - there's information about the project
07:20 - it's a C++ engine it was created by
07:23 - someone named Erin kaat oh I believe
07:24 - it's been around since 2007 something
07:27 - like that it's probably in many ways
07:29 - most famous for its use in the game
07:32 - Angry Birds and many many many many many
07:34 - many many mobile tablet games that you
07:37 - play are built with a physics engine and
07:40 - box2d is a very popular one especially
07:42 - for 2d games so one of the things that I
07:45 - think is most useful about this website
07:47 - that you might want to take a look at
07:48 - his preps rather dry reading but if
07:50 - you're like me and you like to find
07:52 - something to read you know quietly at
07:54 - night the flashlight while you're about
07:56 - to go to bed you might go here and look
07:57 - at the box duty manual so the box 2d
07:59 - manual is going to give you an overview
08:01 - of kind of all what are all the pieces
08:04 - of box D if you look at this it's all
08:06 - written for the C++ user now here's the
08:09 - thing box 2d is such an amazing and
08:11 - incredible library that does so much we
08:15 - are not the first people to discover
08:16 - this it's been ported to just about
08:18 - every language and environment you can
08:20 - think of there's a JavaScript version
08:22 - there's a flash version there's probably
08:26 - there's I can't even anything you can
08:28 - imagine there's probably a version now
08:30 - processing is built as you as you may
08:32 - well know is built on top of Java so if
08:34 - we could just find a Java version of
08:37 - Bach city we could probably use it in
08:39 - processing and in fact there is one so
08:41 - if you go to Jay box2d org you'll find a
08:45 - java physics engine this is a port of
08:47 - the Box D library for Java now
08:50 - you could we could be done here we could
08:52 - just say this is perfect I found this
08:54 - I'll download this I'll figure out I'll
08:56 - somehow get processing to recognize it
08:57 - and use it right on this job at you code
09:00 - and that's essentially what we're going
09:02 - to do but to make this a little bit
09:05 - easier I have put together something
09:06 - called P box 2d which I realized is sort
09:10 - of against the rules of library making
09:12 - because the P is sort of reserved for
09:14 - official things so maybe I should change
09:15 - the name of it but I don't know why I
09:17 - just got just occurred to me now edit
09:19 - this part out but anyway this what this
09:23 - is is it really isn't it's misleading it
09:26 - looks like it's a processing port of
09:28 - box2d but what it really is is a little
09:30 - it's really just a little it's a set of
09:33 - examples in a library that allows you to
09:35 - sort easily access J box 2d directly
09:38 - from within processing so that's the
09:40 - details of this this is what you know as
09:42 - I look through my list of videos there's
09:44 - like eight of them all that's going to
09:45 - use this library called P box 2d so you
09:49 - can see it's on github there's a link to
09:51 - download it I'll include a link below
09:53 - there's lots and lots of examples I
09:55 - don't know if I had the time and maybe I
09:57 - could probably go through all of them
09:59 - and hours of content here but I'm gonna
10:00 - try to whittle this down to the basics
10:02 - now I should mention that this is not
10:05 - the only way to use box 2d and
10:06 - processing in fact there are other
10:07 - libraries if you go to the processing
10:10 - libraries page you'll see a few box wrap
10:12 - 2d I think one is called but one that I
10:14 - wanted to point out which i think is
10:15 - particularly wonderful is called physica
10:17 - which is I hope I'm pronouncing that
10:19 - right I say it with enthusiasm though
10:22 - physica which is by Richard Marx err and
10:25 - this I think is terrific
10:26 - I'm not you choosing to use it because
10:29 - what I think it's useful for us as an
10:31 - exercise here to really dive into the
10:33 - guts of box2d physica is a little bit of
10:35 - a higher level layer in many ways makes
10:38 - it do it makes it a little bit easier to
10:40 - use but perhaps not every I actually
10:44 - don't know if this is accurate but not
10:46 - everything in the entirety of box2d has
10:48 - been implemented so I want us to kind of
10:50 - get into the raw box2d to really learn
10:52 - about how it works so but you know maybe
10:54 - I need to reconsider that because this
10:57 - is really a wonderful library and I
10:58 - definitely recommend you taking a look
10:59 - at it ok so this is the picture of where
11:03 - where
11:03 - everything is now let's just discuss for
11:06 - a moment though kind of looking at an
11:08 - overview of all of the elements in box
11:12 - 2d you know what actually that's going
11:14 - to be in the next video
11:15 - this is I think this is good here's the
11:18 - thing so this is what you should do you
11:20 - should go and you should download this
11:23 - library P box2d use the link below
11:25 - download it open get it running go
11:28 - through all the examples just run them
11:29 - take a look at them and sort of just see
11:32 - if it makes sense to you that this is
11:34 - something that you think you might want
11:35 - to use that's going to have add value to
11:37 - the stuff that you're making and if
11:39 - that's the case then continue and watch
11:41 - the next set of videos if not you know
11:43 - go and have a sandwich or a nice salad
11:45 - something you know take take a ticket
11:47 - take take relax and do something else ok
11:49 - so hopefully that gives you kind of a
11:51 - basic overview of what box Duty is and
11:53 - when you want to think about using it
11:54 - the next video we're going to get into
11:56 - kind of another overview but with more
11:59 - details about the elements of box today
12:01 - and how they're used and then finally
12:03 - we'll start digging into the code
12:04 - details as well and see how to actually
12:06 - write code that uses box 2d okay good
12:09 - bye

Cleaned transcript:

hello again okay this video this this this section of videos is going to be all entirely about something called box2d box2d let's read that over here box2d now why are we talking about box today okay so what have we been doing we have been making all these examples they have these mover objects the objects have these vectors they have these functions what do they do they move around the screen they respond to forces we've been building our own physics engine bit by bit slowly by slowly looking at different examples and scenarios for simulating physics and motion on the screen of course it's probably quite obvious to you that we are not the first people to have ever thought of this problem and ever done this and in fact physics simulation exists everywhere in computer graphics and there are lots of examples of ways of writing code and libraries that you can use so what we want to take a moment in this nature of code experience to say okay well there's value to us building our own physics engine to learning the ins and outs of it to kind of being creative with what we're making but maybe there is a time in place where we should just use somebody else's physics engine somebody else's physics library to control the behavior and motion of everything on the screen and so what I want to look at in this video is a what is what is the physics library what is box2d where do I get box oudy and what are the pros and cons of using something like box would be instead of custom baking your own stuff okay so this is going to be challenging I have made a list got eight videos to do it would probably turn into more honestly is a huge topic and it's not going to be easy but so this first video which you know which will just be a short hopefully I just want to kind of talk through the basic elements of oxygen look at a couple websites where you can get stuff I'll include links below wherever you're watching this on Vimeo or wherever of where you want to download the stuff and then you know we'll get into the details in in future videos so if you kind of already if you know what box 2d is and you've already up and running you could stop now and just go to the video okay so box2d let's think about why why is what is what is the sort of central reason why you might want to use a library like box today okay so I'm sure this scenario has come up for you before you you have all these circles moving around the screen and you're programming them with vectors and forces and they're all doing all this exciting stuff but you want to figure out you know you have got this circle in this other circle and they're moving towards each other and you know they're gonna they're going to get right next to each other and you're going to want to detect the fact that they are touching each other and they're bouncing off each other you want to do something with their collision if you have a program where the collisions of objects matter to you if you have this idea for something you want to make and you're walking down the street describing your idea to your friend you to do to do bla bla bla collisions bla bla bla collisions this is madness and that mat and then they collide and bla bla bla if you're using the word collision over and over again in your project description this is a moment where probably you want to use box2d we could start to go through the math for this and it's with circles it's not so bad we know first of all we know how to detect if two circles are intersecting or not right we can just look at the distance between those two circles and if the distance between those two circles is greater than the sum of their radii then they're not overlapping if it's less than the sum of the radii they are overlapping and then we could start to figure out okay well if if they are overlapping what do we do with them well we know their velocity vectors we could probably do some vector math and reflect their vectors and bounce them and rotate them and we could figure out what direction they're going to go and this would be a worthwhile exercise and somebody someday should make a video about how to do this scenario but this is the moment this is the moment in our life where we are choosing not to go down this road because this road leads to other more complicated and stressful problems like what if they aren't circles what if these are strangely shaped polygons oh and and one of those strangely shaped polygons should like are spinning and how do we know if they're overlapping when they hit each other should how are they going to bounce off each other and with friction and what if they're kind of elastic are not very elastic there's so many ways could make this problem so unbelievably complicated we could suddenly find ourselves dedicating the next several years of our life to figuring out just what to do about things colliding the good news for us is somebody else we spent many years of their life dedicated this problem and they released the solution in an open source library called box2d so one of the central reasons why we want to use box2d is to deal with stuff like collisions in two dimensions now if we're going to get into 3d that we get let's not eat what how do you going to get in this in the about box today we're sticking in two dimensions you might this is it brings up an interesting point though which is that is their effort what you could be asking yourself okay that's great why would I never not use boxes yeah I mean that sounds awesome I should just use that for everything and you might choose to now use it for everything but I do want to emphasize that this doesn't come without any any pain as well right using the library you've got to learn how the library works you got to figure out how to import stuff which functions which classes there's a lot of overhead and as we're going to see there's a lot of stuff we have to kind of learn how to use just a distant you know just to get a circle moving on the screen with box2d is a lot more effort than without it but when we once we get to the effort of having to deal with collisions it becomes worth that effort to get box2d up and running so it's this kind of balancing act and I'm very curious actually I don't I don't pretend to have the answer to this you this is a question you will have to wrestle with I have this idea for this project I want to make should I use this library should use this other libraries should I use no library and this is the question we hope to as a community where we maybe kind of solve together and talk about and discuss and I would be interested in hearing from you as to you know what what's what's work the box Rd and what hasn't so ok so this kind of gets us over the hump of why we want to use box 2d so there's two more questions we need to answer in this particular video one is where do I get it and how can I even be up and running with it and and then kind of what is the overview what's the bigger picture here what are the central elements that I need to learn about so let's first take a look at where it is that you get box duty and what box2d really is that the first thing I should mention though I'm going to clue this is so like kind of analog of me but um here's a website that you could go to box2d org and I'm gonna include everything that I'm going to show you them and include is links below wherever you're watching this you know probably on video in the description I'll include links okay so what is box UT that actually what I've hit to right here I'm just kind of rambling now is C++ so one thing we should be aware of is box 2d is a C++ engine it's written in C++ and if you go back to box 2d org that's where you can download it you can find the documentation there's a forum there's information about the project it's a C++ engine it was created by someone named Erin kaat oh I believe it's been around since 2007 something like that it's probably in many ways most famous for its use in the game Angry Birds and many many many many many many many mobile tablet games that you play are built with a physics engine and box2d is a very popular one especially for 2d games so one of the things that I think is most useful about this website that you might want to take a look at his preps rather dry reading but if you're like me and you like to find something to read you know quietly at night the flashlight while you're about to go to bed you might go here and look at the box duty manual so the box 2d manual is going to give you an overview of kind of all what are all the pieces of box D if you look at this it's all written for the C++ user now here's the thing box 2d is such an amazing and incredible library that does so much we are not the first people to discover this it's been ported to just about every language and environment you can think of there's a JavaScript version there's a flash version there's probably there's I can't even anything you can imagine there's probably a version now processing is built as you as you may well know is built on top of Java so if we could just find a Java version of Bach city we could probably use it in processing and in fact there is one so if you go to Jay box2d org you'll find a java physics engine this is a port of the Box D library for Java now you could we could be done here we could just say this is perfect I found this I'll download this I'll figure out I'll somehow get processing to recognize it and use it right on this job at you code and that's essentially what we're going to do but to make this a little bit easier I have put together something called P box 2d which I realized is sort of against the rules of library making because the P is sort of reserved for official things so maybe I should change the name of it but I don't know why I just got just occurred to me now edit this part out but anyway this what this is is it really isn't it's misleading it looks like it's a processing port of box2d but what it really is is a little it's really just a little it's a set of examples in a library that allows you to sort easily access J box 2d directly from within processing so that's the details of this this is what you know as I look through my list of videos there's like eight of them all that's going to use this library called P box 2d so you can see it's on github there's a link to download it I'll include a link below there's lots and lots of examples I don't know if I had the time and maybe I could probably go through all of them and hours of content here but I'm gonna try to whittle this down to the basics now I should mention that this is not the only way to use box 2d and processing in fact there are other libraries if you go to the processing libraries page you'll see a few box wrap 2d I think one is called but one that I wanted to point out which i think is particularly wonderful is called physica which is I hope I'm pronouncing that right I say it with enthusiasm though physica which is by Richard Marx err and this I think is terrific I'm not you choosing to use it because what I think it's useful for us as an exercise here to really dive into the guts of box2d physica is a little bit of a higher level layer in many ways makes it do it makes it a little bit easier to use but perhaps not every I actually don't know if this is accurate but not everything in the entirety of box2d has been implemented so I want us to kind of get into the raw box2d to really learn about how it works so but you know maybe I need to reconsider that because this is really a wonderful library and I definitely recommend you taking a look at it ok so this is the picture of where where everything is now let's just discuss for a moment though kind of looking at an overview of all of the elements in box 2d you know what actually that's going to be in the next video this is I think this is good here's the thing so this is what you should do you should go and you should download this library P box2d use the link below download it open get it running go through all the examples just run them take a look at them and sort of just see if it makes sense to you that this is something that you think you might want to use that's going to have add value to the stuff that you're making and if that's the case then continue and watch the next set of videos if not you know go and have a sandwich or a nice salad something you know take take a ticket take take relax and do something else ok so hopefully that gives you kind of a basic overview of what box Duty is and when you want to think about using it the next video we're going to get into kind of another overview but with more details about the elements of box today and how they're used and then finally we'll start digging into the code details as well and see how to actually write code that uses box 2d okay good bye
