With timestamps:

00:01 - hello in this video I'm G to give myself
00:04 - a headache I can tell already but I'm
00:06 - here to describe to you a problem called
00:08 - the minimum spanning
00:10 - tree it's a problem from a computational
00:13 - geometry kind of thing uh and I'm going
00:17 - to describe that problem we're going to
00:19 - look at a solution to that problem known
00:20 - as prims algorithm uh named for somebody
00:23 - named Prim presumably uh and then we'll
00:26 - implement it in p5js and as always I
00:29 - will also upload a processing version of
00:31 - this as well but I'm going to use p5js
00:33 - to actually write the code so first let
00:35 - me just show you before I describe to
00:37 - you what the actual problem is and the
00:39 - solution let's just look I have a simple
00:41 - example preset that's going to that's
00:44 - the the foundation for what we need so
00:46 - if I just look at the code for this
00:47 - example for a second first there's just
00:48 - an array a blank array calling it
00:50 - vertices because every time I click the
00:53 - mouse I'm going to create a vector a
00:55 - vector being an object that stores an X
00:57 - and A Y so I'm going to create a vector
00:59 - with mouse X Mouse Y where the mouse is
01:01 - and then I'm going to add that Vector to
01:04 - an array and then you can see in draw
01:06 - here I'm just drawing an ellipse for
01:08 - every single one of those vertices so if
01:11 - I run this program and I
01:14 - click you can see here that every time I
01:18 - click a vector gets added to that array
01:20 - and I draw a circle for every one of
01:21 - those spots so the question is what
01:24 - is what is a minimum string tree problem
01:27 - and this is a temporary whiteboard that
01:29 - I'm going to see how it works so bear
01:31 - with me please um what is the problem
01:34 - how what what is this problem once you
01:36 - have these points so let's say you have
01:39 - the points and I'm going to make some
01:40 - random
01:41 - points the minimum spanning tree problem
01:44 - says how can I connect every single one
01:47 - of these points every single one of
01:48 - these points must be connected to
01:50 - another point and if I add up all the
01:53 - distances I have the smallest amount of
01:56 - distance so there's lots of ways that I
01:58 - could connect them all like I could just
02:00 - do
02:03 - this and they're all connected but I
02:06 - could also have done this and they're
02:09 - still all connected and I could have
02:11 - also done this and they're still all
02:14 - connected and if I at least I made these
02:16 - pretty evenly spaced out so
02:20 - probably if I oh Bo this is scary
02:22 - probably if I were to draw a diagram
02:24 - like this
02:27 - um uh and then if I put another one here
02:32 - right they're all connected like this
02:35 - but that's probably if I add up those
02:37 - distances it's going to be a lot greater
02:40 - than if I connected them like this so uh
02:44 - and it doesn't have to be a closed shape
02:45 - it doesn't have to be a continued path
02:47 - the only thing that has to happen is
02:49 - that every single point has to you have
02:51 - to be able to get from every point to
02:53 - every other point somehow so this is the
02:55 - kind of application that you could
02:56 - probably create some kind of interesting
02:58 - visual art project out of but but it's
03:00 - used it's it's a relevant pract it has
03:03 - practical applications for example if
03:04 - you wanted to connect everything with
03:06 - some kind of like electricity or
03:07 - telephone telephone people use those
03:09 - anymore telephone signal you know and
03:11 - you only had a certain amount of cable
03:13 - like what's the way to have them all
03:14 - connected and you're using the you're
03:15 - saving the most money using the least
03:17 - amount of cable and I'm sure you could
03:18 - come up with all sorts of other
03:20 - scenarios for where this is relevant so
03:23 - how do you solve this
03:25 - problem okay so there's a variety of
03:28 - different solutions to this problem some
03:30 - of which are more efficient some of
03:32 - which are less efficient some of which
03:35 - do it you know
03:38 - um more quickly or less quickly but the
03:40 - solution I'm going to show you sorry is
03:43 - called a prim's algorithm and it works
03:48 - as
03:48 - follows what if we start with a random
03:52 - Point essentially let's start with this
03:54 - random Point okay now what if what we do
03:58 - and we have this I'm going to introduce
03:59 - this idea of an
04:01 - unreached vert Vertex or a
04:04 - reached vertex so at the start all of
04:08 - the vertices are unreached there's no
04:10 - line connected to it they're all
04:12 - unreached vertices I can't get the
04:13 - telephone signal to them and we're going
04:15 - to start with one single and this is now
04:17 - a reached vertex so what I want to do is
04:20 - say okay what can I connect this one to
04:23 - that has the least distance so this
04:25 - particular vertex I can check every
04:27 - other one and I can see and I check the
04:30 - distance and this one actually has the
04:31 - least distance so now I have two reached
04:34 - vertices this one is reached and this
04:36 - one is reached now what I need to do is
04:38 - the same thing I need to find not just
04:41 - the one that's closest to this one but
04:43 - the one that's the least distance
04:45 - between this one or this one so in other
04:48 - words if if this were here I but you
04:52 - know this is a little bit longer than
04:54 - this but shorter than this and this I'm
04:56 - going to go in I'm going to go ahead and
04:57 - connect this here but if this one is if
05:00 - this one is closer than this one I'm
05:01 - going to go ahead and connect this now I
05:02 - need to say is this shorter than this
05:05 - than this than this or this and this so
05:07 - every I have to check every single
05:08 - reached vertex against every unreached
05:11 - vertex and find whichever pairing has
05:13 - the least distance and then that gets
05:16 - and maybe maybe right now it's this one
05:18 - and all these are reached and then maybe
05:20 - right now it's this one and then maybe
05:22 - it's this one and then maybe it's this
05:23 - one and maybe it's this one now I don't
05:25 - know if that's exactly right but you can
05:26 - see that eyeballing it that's probably a
05:28 - vague solution so this is the problem
05:31 - now let's go and write the code to solve
05:33 - it okay I'm coming over here okay so
05:37 - what is the first thing that we need to
05:38 - do well the first thing we need to do is
05:41 - is implement this idea of
05:43 - reached and unreached so I'm going to
05:46 - create in the draw Loop I'm going to
05:48 - create two new arrays one for to store
05:51 - all the vertices that have been reached
05:53 - and one to store all the vertices that
05:55 - haven't been reached at the beginning
05:57 - what's going on here every single vertex
06:00 - X should
06:03 - go in
06:06 - sorry in unreached so I'm going to write
06:09 - a loop here so and I'm going to say
06:11 - unreached push vertices indexi so this
06:15 - is me just essentially cop I'm sure
06:17 - there's a somebody in JavaScript land
06:19 - can tell me a better way to copy an
06:20 - array into another array but one way to
06:22 - do it is just say hey let me go through
06:24 - everything in this one array and put it
06:26 - all in this other array so at the
06:27 - beginning all the vertices right all the
06:30 - vertices are unreached every single
06:33 - one okay come back over here now I want
06:36 - to pick one vertex to start being the
06:39 - one that's reached I need something to
06:40 - go in the reached array so I'm going to
06:43 - say um VAR uh start equals
06:49 - unreached index zero and then I'm going
06:52 - to say
06:53 - reached. push start so I want to put I'm
06:57 - sure I could you know whatever this is
06:58 - silly to have a separate variable I'm
07:00 - going to just put ah unreached index
07:04 - zero zero not o I'm going to put one the
07:08 - first vertx from unreached En reached
07:11 - just to get us started okay once we have
07:14 - that I need to do something else if I'm
07:16 - taking a Vertex from unreached and it's
07:18 - going in reached I need to remove it
07:21 - from unreached so I need to say
07:23 - unreached splice zero so the splice
07:26 - function set is like delete delete the
07:28 - zero element element only I'm not done
07:30 - yet the splice function wants you to say
07:32 - not just which element you want to
07:34 - remove but how many so so I want to just
07:37 - remove one element from that zero
07:39 - spot okay now now I have an algorithm I
07:44 - want my algorithm to go as I want to the
07:48 - goal of this is to get everything from
07:49 - unreached to reached and unfortunately
07:52 - this camera shut off because I forgot to
07:54 - start it at the beginning of this video
07:55 - so I want everything to go from
07:57 - unreached to reached so here we go I'm
08:01 - going to say as long as
08:05 - unreached do length is greater than zero
08:09 - I can keep
08:11 - going so maybe there's another way in
08:13 - JavaScript to test if the array is empty
08:15 - or not but basically what I'm saying is
08:17 - as long as there are still unreached
08:19 - vertices we haven't finished the
08:20 - algorithm yet so every single cycle
08:23 - remember every single cycle we need to
08:25 - say what are the reached vertices for
08:28 - every reached ver ver check the distance
08:31 - against every other unreached vertex and
08:33 - find the shortest distance so in order
08:35 - to find a shortest distance amongst a
08:37 - bunch of candidates we always have to
08:40 - start with something that's kind of the
08:41 - record if I was trying to find the
08:43 - longest distance it would be easy I say
08:45 - does is the distance bigger than zero
08:47 - than it's currently the longest distance
08:49 - so the first thing I need to do is just
08:50 - come up with I'm going to call it record
08:52 - some like large number 100,000 so
08:55 - there's not going to be any vertices
08:57 - that are more than 100,000 pixels from
08:59 - each other in a 640 by 360 window then I
09:02 - need to uh say
09:06 - for every uh oh and I probably shouldn't
09:09 - no it's okay to use I for
09:11 - every
09:13 - vertex in the reached
09:16 - array
09:18 - check every
09:24 - vertex in the unreached
09:27 - array okay for for every vertex in the
09:30 - reached array check every so for every
09:33 - reached vertex check every unreached
09:35 - vertex and what do I need to do the
09:37 - thing that I want to know is the
09:39 - distance between and let's um let's say
09:42 - V1 is reached index I and V2 is reached
09:49 - index J and I want the distance between
09:52 - v1x v1y to V2 dox and V2 doy so the core
09:58 - algorithm here is check every distance
10:00 - between every reached vertex and every
10:02 - unreached vertex now if the distance is
10:05 - less than the record then the record is
10:08 - the distance so what we're doing is
10:10 - we're saying I want to find what is that
10:12 - shortest distance at the beginning the
10:14 - shortest distance is 100,000 and the
10:17 - first distance is like 300 oh it's less
10:19 - than it that's the record then the next
10:20 - one is 250 oh that's less than it that's
10:22 - the record then the next one is 400 oh
10:24 - that's not the record then the next one
10:25 - is 100 oh that's the record so we're
10:27 - doing every single one always if we have
10:29 - a distance that beats the previous
10:31 - record we have the record so this is the
10:33 - core algorithm for finding that shortest
10:34 - one but if I find that shortest one what
10:37 - do I need to do I need to store also the
10:39 - two vertices that are involved in that
10:42 - shortest distance so I I need to have in
10:45 - addition to just um the record I need
10:48 - the reached I'm going to call this the r
10:51 - index the reach index and the unreached
10:55 - index so if this is the case if I found
10:58 - that record r index is i that's the
11:02 - index from this
11:06 - array and uh U index is J and in fact I
11:12 - don't I could actually instead of
11:14 - storing the no we'll do that we'll do it
11:15 - with the distance with the index so I
11:18 - got those so so now you can see here uh
11:23 - I now I'm storing I've checked checked
11:25 - every reached every unreached found the
11:27 - shortest one and once that's done once
11:31 - that's finished what happens I need to
11:34 - do exactly what I did up
11:37 - here right I need to
11:39 - say put take take the unreached
11:44 - one and put it in reached and then
11:47 - remove
11:49 - it and then remove it from unreached so
11:52 - this is my algorithm to I found that new
11:55 - vertex remove it from reach remove it
11:58 - from one array and put it in another
12:00 - array there's probably I probably could
12:02 - like do this all in one fancy line of
12:04 - code but it's nice to have it in two and
12:05 - then while I'm
12:07 - here I might as well draw a
12:11 - line uh oh I don't I don't have those AS
12:14 - Global variables that's fine I might as
12:15 - well draw a line between reached r
12:19 - index dox so this is going to get very
12:22 - long very
12:23 - quickly r index doy and then unreached
12:29 - uh
12:30 - uh uh unreached index
12:36 - dox unreached unreached index
12:41 - doy okay so let's see um I don't know
12:45 - did that
12:46 - work okay so line
12:49 - 45 uh I messed something oh because you
12:51 - know what I better not here's a problem
12:53 - right I mucked around with the arrays
12:55 - and then I drew the line after so that's
12:57 - definitely not going to work right I
12:58 - need to if I'm drawing the line right
13:00 - before I start moving them around I
13:02 - should do that so let's just see here
13:04 - okay so we we got kind of something
13:06 - happened and
13:08 - then and then something didn't happen
13:10 - what okay so um so let's think about
13:13 - this for a second what what could so so
13:16 - this is the core idea let's let's review
13:18 - for a second how long have I been at
13:20 - this only 13 minutes that's not terrible
13:22 - so we started with uh every time we
13:25 - every time there's something's left and
13:27 - unreached we start with a record we have
13:28 - two indices we go through everything in
13:31 - the reached check it against everything
13:33 - and unreach ah look at that that's not
13:35 - right V2 equals reached so the point of
13:37 - the second one is to pull something out
13:39 - of the uh second array that's clearly
13:41 - not going to work and yeah this looks
13:44 - like it's working look at that and I
13:46 - don't like the way the lines look here
13:47 - so I'm going to say stroke
13:49 - 255 uh stroke weight two and here and
13:54 - you can see there we go we have our
13:56 - minimum spanning tree as I add points
13:59 - and conceivably by the way um you know
14:03 - if I wanted to
14:05 - just demonstrate this in a different way
14:08 - I could say uh I could just add like 50
14:11 - random points right when the program
14:14 - starts uh and I could say random just
14:17 - width uh random height and uh do this
14:22 - you can see every time I run it we get a
14:24 - new and the one thing I'll mention about
14:27 - this is I'm doing in this program you
14:29 - notice the whole algorithm is happening
14:31 - in draw so it's recomputing the minimum
14:33 - spanning tree over and over and over
14:34 - again it doesn't need to do that it but
14:37 - you know conceivably if the points were
14:39 - always every time you add or subtract a
14:41 - point you would need to recompute it and
14:43 - I'm so you might be if you were using
14:44 - this and something you might be more
14:46 - thoughtful about only recomputing it at
14:47 - a certain point the other thing I'm not
14:49 - doing here is this particular like
14:51 - drawing is just sort of drawn and I
14:53 - can't do anything with it so if I were
14:55 - if I wanted to go further with this I
14:57 - would probably make Edge objects so in
14:59 - other words I might have an array of
15:01 - points or vertices or like a Vertex
15:03 - object I'm just using the P5 Vector
15:05 - object with create Vector but then I
15:07 - might create these Edge objects so there
15:09 - are things that I could animate or
15:10 - change color and put those in an array
15:12 - as well you and the place that I would
15:14 - do that is right here right instead of
15:16 - just drawing a line like I just said I
15:18 - figured out the vertex I'm just going to
15:19 - draw a line there I could actually
15:21 - create that edge object all right so
15:23 - this is pretty much the end of the video
15:25 - I'm actually going to look though I
15:26 - don't know if people are posting qu I
15:28 - have this even though if you're watching
15:29 - this you might be watching this like 10
15:30 - years from now um I actually am
15:32 - recording this live and there are some
15:34 - people watching this live so I'm going
15:35 - to you could shut this off now if you
15:36 - want but I'm going to just look and see
15:37 - if there's any questions uh somebody
15:39 - points out that um okay there are two um
15:42 - improvements that are pointed out in the
15:44 - chat which I'll mention let's see if
15:45 - they still work so first I just want to
15:47 - make this with just
15:49 - 20 so one is that I could copy the array
15:54 - by
15:54 - saying uh
15:57 - reached uh reached equals unreached the
16:02 - JavaScript function concat which I guess
16:04 - is like
16:05 - concatenate no but then that doesn't
16:07 - it's not an array it just joins them I
16:09 - would have to then split it or something
16:12 - um but and then uh oh reached push
16:16 - unreached shift is another way to put
16:17 - the first one in so people are so
16:19 - there's all these other array functions
16:21 - but that one's not going to work I'm
16:22 - sure there's another I'm going to put it
16:23 - in the comments read the comments I'm
16:25 - sure it'll be fixed in there um there
16:27 - are all sorts of other kind of array
16:29 - function so is there anything else I'm
16:30 - missing here I think we did it I'm going
16:32 - to post this code a link to this code uh
16:35 - please post your questions in the
16:36 - comments because I I I don't know how
16:38 - well this was explained or if this makes
16:39 - any sense at all but I'm glad to have
16:41 - made a video today on Friday it's 5:15
16:44 - um I got to go let me just look is the
16:47 - code available somewhere um um yeah the
16:51 - code someone asked the Cod the code is
16:53 - going to be there'll be a link in the
16:54 - description it's not available yet if
16:55 - you're watching this live I'm going to
16:56 - stop the recording and then talk to the
16:58 - live people
17:00 - okay bye thanks for watching this

Cleaned transcript:

hello in this video I'm G to give myself a headache I can tell already but I'm here to describe to you a problem called the minimum spanning tree it's a problem from a computational geometry kind of thing uh and I'm going to describe that problem we're going to look at a solution to that problem known as prims algorithm uh named for somebody named Prim presumably uh and then we'll implement it in p5js and as always I will also upload a processing version of this as well but I'm going to use p5js to actually write the code so first let me just show you before I describe to you what the actual problem is and the solution let's just look I have a simple example preset that's going to that's the the foundation for what we need so if I just look at the code for this example for a second first there's just an array a blank array calling it vertices because every time I click the mouse I'm going to create a vector a vector being an object that stores an X and A Y so I'm going to create a vector with mouse X Mouse Y where the mouse is and then I'm going to add that Vector to an array and then you can see in draw here I'm just drawing an ellipse for every single one of those vertices so if I run this program and I click you can see here that every time I click a vector gets added to that array and I draw a circle for every one of those spots so the question is what is what is a minimum string tree problem and this is a temporary whiteboard that I'm going to see how it works so bear with me please um what is the problem how what what is this problem once you have these points so let's say you have the points and I'm going to make some random points the minimum spanning tree problem says how can I connect every single one of these points every single one of these points must be connected to another point and if I add up all the distances I have the smallest amount of distance so there's lots of ways that I could connect them all like I could just do this and they're all connected but I could also have done this and they're still all connected and I could have also done this and they're still all connected and if I at least I made these pretty evenly spaced out so probably if I oh Bo this is scary probably if I were to draw a diagram like this um uh and then if I put another one here right they're all connected like this but that's probably if I add up those distances it's going to be a lot greater than if I connected them like this so uh and it doesn't have to be a closed shape it doesn't have to be a continued path the only thing that has to happen is that every single point has to you have to be able to get from every point to every other point somehow so this is the kind of application that you could probably create some kind of interesting visual art project out of but but it's used it's it's a relevant pract it has practical applications for example if you wanted to connect everything with some kind of like electricity or telephone telephone people use those anymore telephone signal you know and you only had a certain amount of cable like what's the way to have them all connected and you're using the you're saving the most money using the least amount of cable and I'm sure you could come up with all sorts of other scenarios for where this is relevant so how do you solve this problem okay so there's a variety of different solutions to this problem some of which are more efficient some of which are less efficient some of which do it you know um more quickly or less quickly but the solution I'm going to show you sorry is called a prim's algorithm and it works as follows what if we start with a random Point essentially let's start with this random Point okay now what if what we do and we have this I'm going to introduce this idea of an unreached vert Vertex or a reached vertex so at the start all of the vertices are unreached there's no line connected to it they're all unreached vertices I can't get the telephone signal to them and we're going to start with one single and this is now a reached vertex so what I want to do is say okay what can I connect this one to that has the least distance so this particular vertex I can check every other one and I can see and I check the distance and this one actually has the least distance so now I have two reached vertices this one is reached and this one is reached now what I need to do is the same thing I need to find not just the one that's closest to this one but the one that's the least distance between this one or this one so in other words if if this were here I but you know this is a little bit longer than this but shorter than this and this I'm going to go in I'm going to go ahead and connect this here but if this one is if this one is closer than this one I'm going to go ahead and connect this now I need to say is this shorter than this than this than this or this and this so every I have to check every single reached vertex against every unreached vertex and find whichever pairing has the least distance and then that gets and maybe maybe right now it's this one and all these are reached and then maybe right now it's this one and then maybe it's this one and then maybe it's this one and maybe it's this one now I don't know if that's exactly right but you can see that eyeballing it that's probably a vague solution so this is the problem now let's go and write the code to solve it okay I'm coming over here okay so what is the first thing that we need to do well the first thing we need to do is is implement this idea of reached and unreached so I'm going to create in the draw Loop I'm going to create two new arrays one for to store all the vertices that have been reached and one to store all the vertices that haven't been reached at the beginning what's going on here every single vertex X should go in sorry in unreached so I'm going to write a loop here so and I'm going to say unreached push vertices indexi so this is me just essentially cop I'm sure there's a somebody in JavaScript land can tell me a better way to copy an array into another array but one way to do it is just say hey let me go through everything in this one array and put it all in this other array so at the beginning all the vertices right all the vertices are unreached every single one okay come back over here now I want to pick one vertex to start being the one that's reached I need something to go in the reached array so I'm going to say um VAR uh start equals unreached index zero and then I'm going to say reached. push start so I want to put I'm sure I could you know whatever this is silly to have a separate variable I'm going to just put ah unreached index zero zero not o I'm going to put one the first vertx from unreached En reached just to get us started okay once we have that I need to do something else if I'm taking a Vertex from unreached and it's going in reached I need to remove it from unreached so I need to say unreached splice zero so the splice function set is like delete delete the zero element element only I'm not done yet the splice function wants you to say not just which element you want to remove but how many so so I want to just remove one element from that zero spot okay now now I have an algorithm I want my algorithm to go as I want to the goal of this is to get everything from unreached to reached and unfortunately this camera shut off because I forgot to start it at the beginning of this video so I want everything to go from unreached to reached so here we go I'm going to say as long as unreached do length is greater than zero I can keep going so maybe there's another way in JavaScript to test if the array is empty or not but basically what I'm saying is as long as there are still unreached vertices we haven't finished the algorithm yet so every single cycle remember every single cycle we need to say what are the reached vertices for every reached ver ver check the distance against every other unreached vertex and find the shortest distance so in order to find a shortest distance amongst a bunch of candidates we always have to start with something that's kind of the record if I was trying to find the longest distance it would be easy I say does is the distance bigger than zero than it's currently the longest distance so the first thing I need to do is just come up with I'm going to call it record some like large number 100,000 so there's not going to be any vertices that are more than 100,000 pixels from each other in a 640 by 360 window then I need to uh say for every uh oh and I probably shouldn't no it's okay to use I for every vertex in the reached array check every vertex in the unreached array okay for for every vertex in the reached array check every so for every reached vertex check every unreached vertex and what do I need to do the thing that I want to know is the distance between and let's um let's say V1 is reached index I and V2 is reached index J and I want the distance between v1x v1y to V2 dox and V2 doy so the core algorithm here is check every distance between every reached vertex and every unreached vertex now if the distance is less than the record then the record is the distance so what we're doing is we're saying I want to find what is that shortest distance at the beginning the shortest distance is 100,000 and the first distance is like 300 oh it's less than it that's the record then the next one is 250 oh that's less than it that's the record then the next one is 400 oh that's not the record then the next one is 100 oh that's the record so we're doing every single one always if we have a distance that beats the previous record we have the record so this is the core algorithm for finding that shortest one but if I find that shortest one what do I need to do I need to store also the two vertices that are involved in that shortest distance so I I need to have in addition to just um the record I need the reached I'm going to call this the r index the reach index and the unreached index so if this is the case if I found that record r index is i that's the index from this array and uh U index is J and in fact I don't I could actually instead of storing the no we'll do that we'll do it with the distance with the index so I got those so so now you can see here uh I now I'm storing I've checked checked every reached every unreached found the shortest one and once that's done once that's finished what happens I need to do exactly what I did up here right I need to say put take take the unreached one and put it in reached and then remove it and then remove it from unreached so this is my algorithm to I found that new vertex remove it from reach remove it from one array and put it in another array there's probably I probably could like do this all in one fancy line of code but it's nice to have it in two and then while I'm here I might as well draw a line uh oh I don't I don't have those AS Global variables that's fine I might as well draw a line between reached r index dox so this is going to get very long very quickly r index doy and then unreached uh uh uh unreached index dox unreached unreached index doy okay so let's see um I don't know did that work okay so line 45 uh I messed something oh because you know what I better not here's a problem right I mucked around with the arrays and then I drew the line after so that's definitely not going to work right I need to if I'm drawing the line right before I start moving them around I should do that so let's just see here okay so we we got kind of something happened and then and then something didn't happen what okay so um so let's think about this for a second what what could so so this is the core idea let's let's review for a second how long have I been at this only 13 minutes that's not terrible so we started with uh every time we every time there's something's left and unreached we start with a record we have two indices we go through everything in the reached check it against everything and unreach ah look at that that's not right V2 equals reached so the point of the second one is to pull something out of the uh second array that's clearly not going to work and yeah this looks like it's working look at that and I don't like the way the lines look here so I'm going to say stroke 255 uh stroke weight two and here and you can see there we go we have our minimum spanning tree as I add points and conceivably by the way um you know if I wanted to just demonstrate this in a different way I could say uh I could just add like 50 random points right when the program starts uh and I could say random just width uh random height and uh do this you can see every time I run it we get a new and the one thing I'll mention about this is I'm doing in this program you notice the whole algorithm is happening in draw so it's recomputing the minimum spanning tree over and over and over again it doesn't need to do that it but you know conceivably if the points were always every time you add or subtract a point you would need to recompute it and I'm so you might be if you were using this and something you might be more thoughtful about only recomputing it at a certain point the other thing I'm not doing here is this particular like drawing is just sort of drawn and I can't do anything with it so if I were if I wanted to go further with this I would probably make Edge objects so in other words I might have an array of points or vertices or like a Vertex object I'm just using the P5 Vector object with create Vector but then I might create these Edge objects so there are things that I could animate or change color and put those in an array as well you and the place that I would do that is right here right instead of just drawing a line like I just said I figured out the vertex I'm just going to draw a line there I could actually create that edge object all right so this is pretty much the end of the video I'm actually going to look though I don't know if people are posting qu I have this even though if you're watching this you might be watching this like 10 years from now um I actually am recording this live and there are some people watching this live so I'm going to you could shut this off now if you want but I'm going to just look and see if there's any questions uh somebody points out that um okay there are two um improvements that are pointed out in the chat which I'll mention let's see if they still work so first I just want to make this with just 20 so one is that I could copy the array by saying uh reached uh reached equals unreached the JavaScript function concat which I guess is like concatenate no but then that doesn't it's not an array it just joins them I would have to then split it or something um but and then uh oh reached push unreached shift is another way to put the first one in so people are so there's all these other array functions but that one's not going to work I'm sure there's another I'm going to put it in the comments read the comments I'm sure it'll be fixed in there um there are all sorts of other kind of array function so is there anything else I'm missing here I think we did it I'm going to post this code a link to this code uh please post your questions in the comments because I I I don't know how well this was explained or if this makes any sense at all but I'm glad to have made a video today on Friday it's 515 um I got to go let me just look is the code available somewhere um um yeah the code someone asked the Cod the code is going to be there'll be a link in the description it's not available yet if you're watching this live I'm going to stop the recording and then talk to the live people okay bye thanks for watching this
