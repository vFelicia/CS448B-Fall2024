With timestamps:

00:00 - Welcome back.
00:01 - In the previous video in
this section on forces,
00:03 - I built this particular
example where there
00:06 - are two forces that play--
00:08 - a gravity force that's always
being applied to the mover
00:10 - object.
00:11 - And when I click the
mouse, a wind force
00:13 - is being applied to
the mover object.
00:15 - What I want to do
in this video is
00:17 - look at how I might
consider this mover object
00:22 - to have the property
mass and how
00:24 - that might affect how the
gravity and wind forces behave.
00:28 - And in truth, for me to be
able to demonstrate this
00:31 - effectively, it's
only meaningful
00:33 - if I have two objects
with different masses,
00:36 - because if I just have
one, scaling the mass
00:38 - is just something
that will ultimately
00:40 - scale the strength, the relative
strength, of those forces.
00:43 - So let's quickly add a second
object to this example.
00:52 - Now, you might already be
thinking to yourself, ugh,
00:55 - what did you just do there.
00:56 - If you're going to have
more than one object,
00:58 - should you use an array?
00:59 - Or isn't there a different
way of doing this?
01:01 - And yes, yes, yes.
01:03 - And ultimately, what I want to
do with these examples is build
01:06 - arrays into them to
collect many objects
01:09 - and sort of add and subtract
them from the canvas itself.
01:12 - But just for
demonstration purposes,
01:14 - I'm going to leave these as
two separate variables, mover
01:17 - A and mover B. I'm going to
apply both forces to them
01:21 - and call update edges
and show on both of them.
01:23 - Let's see if that works.
01:25 - There we go.
01:27 - Let's apply the wind.
01:28 - You can see how they're kind
of in lockstep together.
01:32 - Maybe mass will change that.
01:35 - So both are bouncing and
responding to the wind force.
01:38 - Now let's think about
where I want to add mass.
01:41 - So looking at the
mover object, there
01:42 - is position velocity
acceleration in r.
01:45 - And r is a property
that is tied to the size
01:49 - that I'm drawing the ellipse.
01:51 - Let's just add mass as its
own property for a moment.
01:54 - this.mass equals 1.
01:57 - And the reason why
I want to do this
01:59 - is-- remember
Newton's second law,
02:00 - force equals mass
times acceleration,
02:03 - or restated as acceleration
equals force divided by mass.
02:09 - And remember, the way
that I'm implementing
02:12 - this is all of the
forces divided by mass
02:15 - are being accumulated into
the object's acceleration.
02:17 - So first and foremost, I need to
incorporate this divide by mass
02:23 - into my apply force function.
02:26 - Right here, I can then say
force.div by this.mass.
02:33 - Before I add the force into the
acceleration, divide by mass,
02:38 - let's try running this.
02:42 - Good.
02:42 - Same result. Well,
the mass is just 1.
02:45 - So let's now add
mass equals 2, which
02:48 - I should see the acceleration--
the force remains the same.
02:51 - But the strength
of the acceleration
02:54 - should be divided by 2.
02:59 - Wait, what's going on.
03:01 - Something weird going on.
03:02 - Why are they different?
03:03 - They shouldn't be different.
03:04 - They don't have
different masses.
03:05 - Something crazy's going on.
03:06 - Do you remember, oh,
a few videos back,
03:09 - I spent all this time talking
about static functions?
03:14 - Random 2D is a static function.
03:16 - It's called on
p5.Vector rather than,
03:19 - like, this function, mult for
multiply, which is called on v,
03:23 - the object itself.
03:26 - There was a purpose to that.
03:28 - There was a meaning to that.
03:29 - There was a reason for that.
03:30 - And that reason, that
moment is right now.
03:33 - I want to divide force by mass
but not the actual force vector
03:40 - itself.
03:40 - I just want to take that
vector, get a copy of it,
03:44 - divide it by mass, and then
add that to the acceleration.
03:48 - The reason is because out here,
I'm taking this wind vector
03:51 - and applying it to A and B.
And I don't want A to mess
03:55 - with it because wind should stay
the same when it applies to B.
03:59 - But this function
itself is actually
04:01 - taking that force vector
and dividing it by 2
04:04 - and changing its value.
04:05 - So there's different
ways I could do it.
04:07 - I could make a copy of
it and then divide it.
04:09 - But I could also use the
static version of divide.
04:12 - In other words, I could say--
04:14 - and I need a new vector
to store the result in.
04:17 - I'll just call it f.
04:18 - p5.Vector.div
force by this.mass.
04:24 - So here I am saying, take
that force, divide it by mass,
04:29 - and store the result
in a new vector f.
04:32 - And then that vector
f is what gets applied
04:35 - to the acceleration itself.
04:38 - And of course, I need to
remove this line of code,
04:40 - which I no longer want.
04:42 - And there we go.
04:43 - So now mass is playing a
role, but it's not affecting
04:47 - externally the environment.
04:48 - And it's just a
property of the object
04:50 - that's affecting the way the
force changes the acceleration.
04:54 - So let's take the
logical next step
04:57 - and give each of these
objects a different mass.
05:02 - So I'm going to add a third
property to the constructor,
05:04 - call it m.
05:07 - And then when I
create the objects,
05:10 - let's give one a mass of
2 and one a mass of 4.
05:16 - And again, I'm just picking
numbers out of a hat--
05:18 - totally arbitrary.
05:19 - So remember, the
one on the right
05:21 - will have a higher mass
than the one on the left.
05:25 - Interesting.
05:26 - This is correct according
to Newton's second law.
05:33 - If acceleration is
force divided by mass,
05:36 - if an object has a larger
mass, it will accelerate less.
05:40 - And this makes sense.
05:41 - Think about the force that you
have to apply to an object.
05:44 - An object with a
greater mass is going
05:47 - to be-- you're going to need
a much stronger force to get
05:50 - it to accelerate than something
with a much smaller mass.
05:53 - Think about bowling ball
versus a ping pong ball.
05:55 - How much force do
you need to apply
05:57 - to get those both to
accelerate equally?
05:59 - Something is not right here.
06:02 - You might recall or have heard
about Galileo's famous Leaning
06:07 - Tower of Pisa experiment
where, as the story goes,
06:11 - in the late 1600s,
Galileo was said
06:13 - to have dropped two
spheres of different masses
06:17 - from the top of the
Leaning Tower of Pisa.
06:20 - And did they fall-- did one
fall faster than the other?
06:23 - No, they fell at the same rate,
independent of their mass.
06:29 - And the reason for this
is because the weight
06:32 - of an object, weight being
the force, gravitational--
06:36 - I'm really using
the wrong term here.
06:37 - I really should be saying the
gravitational acceleration.
06:40 - The force is the weight.
06:42 - And the weight of an object is
scaled according to its mass.
06:46 - The bigger the mass,
the bigger the force.
06:50 - The smaller the mass,
the smaller the force.
06:53 - So for this to work
more accurately,
06:55 - I should really say, let
weightA equal p5.Vector
07:01 - multiply gravity
times moverA.mass.
07:08 - And weightB is that same thing,
multiplying mover B's mass.
07:14 - And then I'm going to
apply weightA weightB.
07:17 - So this is a little bit--
07:19 - I'm, like, sort of fudging
things a little bit just
07:21 - to like take this
gravitational vector
07:24 - and then multiply, scale
it according to mass
07:26 - before I apply it in, where
it then gets divided by mass.
07:29 - Let's just see if this works.
07:31 - Perfect.
07:32 - They're both falling
at the same rate.
07:34 - Now let's apply wind.
07:36 - The acceleration due to wind is
less when the mass is larger.
07:40 - And that's the way it should be.
07:42 - The thing is, it's
kind of hard to see
07:44 - what's going on here because I'm
drawing them at the same size.
07:47 - This is a nice moment
for us to think about,
07:49 - if I have two objects-- and I'm
going to just erase this here--
07:54 - if I have object A and
the mass of object A is 2,
07:59 - and then I have object B and
the mass of object B is 4.
08:05 - Well, certainly if the density
of these things is the same--
08:09 - and what is the density?
08:10 - I mean, these are just pixels.
08:11 - But let's consider the
density to be the same.
08:14 - Then I might want to
draw mass B, object B,
08:17 - larger than object A.
So one idea could be,
08:20 - like, oh, the radius could
be equal to the mass.
08:23 - So here, the radius is 2,
and here the radius is 4.
08:27 - But that's not really the
right scale because what
08:34 - should really map, at least
in my mind, to the mass
08:38 - is the area.
08:41 - So the area of this should
be twice the area of this.
08:46 - What's the formula for
the area of a circle?
08:50 - Pi r squared.
08:53 - So in that sense, I
think a proper mapping
08:57 - would be to take the
square root of the mass.
09:01 - And why is that?
09:02 - Let's say in this case the
radius is square root of 2
09:07 - and in this case the
radius is square root of 4.
09:10 - Well, the surface area,
the area, pi r squared,
09:15 - would be 2 pi.
09:16 - And here, pi r
squared would be 4 pi.
09:20 - Whereas if I used 2 and 4,
I would have 4 pi and 16 pi.
09:26 - Because I'd be squaring 2.
09:27 - I'd get 4.
09:28 - Squaring 4, I get 16.
09:29 - So take that mass.
09:31 - Take the square root
of it, and apply that
09:33 - to the object's radius.
09:35 - In other words, this.r equals
the square root of this.mass.
09:41 - Let's take a look at
what this looks like.
09:45 - Well, those things are so tiny.
09:47 - They're so tiny.
09:49 - So I'm going to scale it
arbitrarily, multiply it by 10,
09:54 - and we can see this
object has a higher mass.
09:57 - Now, why are they kind of
bouncing out of sync now?
10:00 - Well, it's because
they're hitting
10:02 - the bottom at different
times because their size is
10:05 - larger, which is fine.
10:06 - That's visually what I want.
10:08 - And now you'll see the
acceleration of the smaller one
10:11 - be much higher with the wind.
10:13 - Ultimately, I'm making so
many arbitrary decisions here,
10:16 - and there's many inaccuracies.
10:18 - But I'm attempting to at least
take the ideas from real world
10:23 - physics and apply them
to the best of my ability
10:25 - in a way that feels accurate.
10:27 - So one of the things I
might suggest to you--
10:29 - are there things that
you see that I've missed,
10:31 - things are inaccuracies or don't
feel right to you in terms of
10:35 - how, if these were physical
materials, they would behave?
10:37 - Certainly they would
collide with each other.
10:39 - That's an interesting-- that's
a whole other can of worms
10:42 - to open that I'll come
back to another time.
10:43 - But what types of elements
can you apply to this?
10:46 - Could you add an array now?
10:47 - Could you think about how you
visually design these objects?
10:50 - Maybe you want to represent
the different masses
10:52 - in a different way, through
color or some other way
10:55 - of visually indicating that.
10:57 - But for me, the thing
that I want to do now
10:59 - is I want to revisit essentially
what I'm doing in these two
11:03 - lines of code, where I say, let
wind equal createVector number
11:07 - comma number.
11:08 - Let gravity equal createVector
number common number.
11:11 - Is there not a better
way or a different way
11:14 - that I might approach the
calculation of a force vector
11:18 - in the environment?
11:19 - And that ultimately is
looking up a formula
11:22 - for how a force is
calculated based
11:23 - on the properties and
conditions of the environment.
11:25 - And so the three forces I want
to look at are friction, drag--
11:30 - which is kind of like
friction, but different
11:32 - and I'll explain that-- as well
as gravitational attraction
11:36 - between bodies in space.
11:37 - So I'm going to look at
those as kind of case studies
11:40 - in different formulas.
11:41 - Maybe you'll have
some ideas of ways
11:43 - you can look at other forces
or invent your own forces.
11:46 - But I'm going to return
at least in the next video
11:48 - and just think about friction.
11:49 - Specifically, when
these two objects
11:52 - are in contact
with the edge, how
11:54 - might they realistically
slow down as
11:56 - if there's a contact friction
between those objects
11:59 - and the surface or the
edge of the canvas itself?
12:02 - [MUSIC PLAYING]

Cleaned transcript:

Welcome back. In the previous video in this section on forces, I built this particular example where there are two forces that play a gravity force that's always being applied to the mover object. And when I click the mouse, a wind force is being applied to the mover object. What I want to do in this video is look at how I might consider this mover object to have the property mass and how that might affect how the gravity and wind forces behave. And in truth, for me to be able to demonstrate this effectively, it's only meaningful if I have two objects with different masses, because if I just have one, scaling the mass is just something that will ultimately scale the strength, the relative strength, of those forces. So let's quickly add a second object to this example. Now, you might already be thinking to yourself, ugh, what did you just do there. If you're going to have more than one object, should you use an array? Or isn't there a different way of doing this? And yes, yes, yes. And ultimately, what I want to do with these examples is build arrays into them to collect many objects and sort of add and subtract them from the canvas itself. But just for demonstration purposes, I'm going to leave these as two separate variables, mover A and mover B. I'm going to apply both forces to them and call update edges and show on both of them. Let's see if that works. There we go. Let's apply the wind. You can see how they're kind of in lockstep together. Maybe mass will change that. So both are bouncing and responding to the wind force. Now let's think about where I want to add mass. So looking at the mover object, there is position velocity acceleration in r. And r is a property that is tied to the size that I'm drawing the ellipse. Let's just add mass as its own property for a moment. this.mass equals 1. And the reason why I want to do this is remember Newton's second law, force equals mass times acceleration, or restated as acceleration equals force divided by mass. And remember, the way that I'm implementing this is all of the forces divided by mass are being accumulated into the object's acceleration. So first and foremost, I need to incorporate this divide by mass into my apply force function. Right here, I can then say force.div by this.mass. Before I add the force into the acceleration, divide by mass, let's try running this. Good. Same result. Well, the mass is just 1. So let's now add mass equals 2, which I should see the acceleration the force remains the same. But the strength of the acceleration should be divided by 2. Wait, what's going on. Something weird going on. Why are they different? They shouldn't be different. They don't have different masses. Something crazy's going on. Do you remember, oh, a few videos back, I spent all this time talking about static functions? Random 2D is a static function. It's called on p5.Vector rather than, like, this function, mult for multiply, which is called on v, the object itself. There was a purpose to that. There was a meaning to that. There was a reason for that. And that reason, that moment is right now. I want to divide force by mass but not the actual force vector itself. I just want to take that vector, get a copy of it, divide it by mass, and then add that to the acceleration. The reason is because out here, I'm taking this wind vector and applying it to A and B. And I don't want A to mess with it because wind should stay the same when it applies to B. But this function itself is actually taking that force vector and dividing it by 2 and changing its value. So there's different ways I could do it. I could make a copy of it and then divide it. But I could also use the static version of divide. In other words, I could say and I need a new vector to store the result in. I'll just call it f. p5.Vector.div force by this.mass. So here I am saying, take that force, divide it by mass, and store the result in a new vector f. And then that vector f is what gets applied to the acceleration itself. And of course, I need to remove this line of code, which I no longer want. And there we go. So now mass is playing a role, but it's not affecting externally the environment. And it's just a property of the object that's affecting the way the force changes the acceleration. So let's take the logical next step and give each of these objects a different mass. So I'm going to add a third property to the constructor, call it m. And then when I create the objects, let's give one a mass of 2 and one a mass of 4. And again, I'm just picking numbers out of a hat totally arbitrary. So remember, the one on the right will have a higher mass than the one on the left. Interesting. This is correct according to Newton's second law. If acceleration is force divided by mass, if an object has a larger mass, it will accelerate less. And this makes sense. Think about the force that you have to apply to an object. An object with a greater mass is going to be you're going to need a much stronger force to get it to accelerate than something with a much smaller mass. Think about bowling ball versus a ping pong ball. How much force do you need to apply to get those both to accelerate equally? Something is not right here. You might recall or have heard about Galileo's famous Leaning Tower of Pisa experiment where, as the story goes, in the late 1600s, Galileo was said to have dropped two spheres of different masses from the top of the Leaning Tower of Pisa. And did they fall did one fall faster than the other? No, they fell at the same rate, independent of their mass. And the reason for this is because the weight of an object, weight being the force, gravitational I'm really using the wrong term here. I really should be saying the gravitational acceleration. The force is the weight. And the weight of an object is scaled according to its mass. The bigger the mass, the bigger the force. The smaller the mass, the smaller the force. So for this to work more accurately, I should really say, let weightA equal p5.Vector multiply gravity times moverA.mass. And weightB is that same thing, multiplying mover B's mass. And then I'm going to apply weightA weightB. So this is a little bit I'm, like, sort of fudging things a little bit just to like take this gravitational vector and then multiply, scale it according to mass before I apply it in, where it then gets divided by mass. Let's just see if this works. Perfect. They're both falling at the same rate. Now let's apply wind. The acceleration due to wind is less when the mass is larger. And that's the way it should be. The thing is, it's kind of hard to see what's going on here because I'm drawing them at the same size. This is a nice moment for us to think about, if I have two objects and I'm going to just erase this here if I have object A and the mass of object A is 2, and then I have object B and the mass of object B is 4. Well, certainly if the density of these things is the same and what is the density? I mean, these are just pixels. But let's consider the density to be the same. Then I might want to draw mass B, object B, larger than object A. So one idea could be, like, oh, the radius could be equal to the mass. So here, the radius is 2, and here the radius is 4. But that's not really the right scale because what should really map, at least in my mind, to the mass is the area. So the area of this should be twice the area of this. What's the formula for the area of a circle? Pi r squared. So in that sense, I think a proper mapping would be to take the square root of the mass. And why is that? Let's say in this case the radius is square root of 2 and in this case the radius is square root of 4. Well, the surface area, the area, pi r squared, would be 2 pi. And here, pi r squared would be 4 pi. Whereas if I used 2 and 4, I would have 4 pi and 16 pi. Because I'd be squaring 2. I'd get 4. Squaring 4, I get 16. So take that mass. Take the square root of it, and apply that to the object's radius. In other words, this.r equals the square root of this.mass. Let's take a look at what this looks like. Well, those things are so tiny. They're so tiny. So I'm going to scale it arbitrarily, multiply it by 10, and we can see this object has a higher mass. Now, why are they kind of bouncing out of sync now? Well, it's because they're hitting the bottom at different times because their size is larger, which is fine. That's visually what I want. And now you'll see the acceleration of the smaller one be much higher with the wind. Ultimately, I'm making so many arbitrary decisions here, and there's many inaccuracies. But I'm attempting to at least take the ideas from real world physics and apply them to the best of my ability in a way that feels accurate. So one of the things I might suggest to you are there things that you see that I've missed, things are inaccuracies or don't feel right to you in terms of how, if these were physical materials, they would behave? Certainly they would collide with each other. That's an interesting that's a whole other can of worms to open that I'll come back to another time. But what types of elements can you apply to this? Could you add an array now? Could you think about how you visually design these objects? Maybe you want to represent the different masses in a different way, through color or some other way of visually indicating that. But for me, the thing that I want to do now is I want to revisit essentially what I'm doing in these two lines of code, where I say, let wind equal createVector number comma number. Let gravity equal createVector number common number. Is there not a better way or a different way that I might approach the calculation of a force vector in the environment? And that ultimately is looking up a formula for how a force is calculated based on the properties and conditions of the environment. And so the three forces I want to look at are friction, drag which is kind of like friction, but different and I'll explain that as well as gravitational attraction between bodies in space. So I'm going to look at those as kind of case studies in different formulas. Maybe you'll have some ideas of ways you can look at other forces or invent your own forces. But I'm going to return at least in the next video and just think about friction. Specifically, when these two objects are in contact with the edge, how might they realistically slow down as if there's a contact friction between those objects and the surface or the edge of the canvas itself? [MUSIC PLAYING]
