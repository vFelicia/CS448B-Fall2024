With timestamps:

00:00 - oh this this video merits a train
00:03 - whistle I am in my series I'm on video
00:07 - 731 or something like that
00:11 - about building a color classifier I'm
00:14 - trying to look at the overall concept of
00:17 - machine learning and building a color
00:19 - classifier so what oh where am I
00:20 - I spent a bunch of videos and crowd
00:23 - sourcing and cleaning data and where I
00:25 - left off I have this JSON file that has
00:28 - a whole bunch of data points in it each
00:30 - entry has an RGB value and a label so
00:33 - there are nine labels and there are
00:36 - obviously millions of possibilities for
00:38 - the RGB values so the so what's the next
00:42 - step here so many things to think about
00:44 - let's go back to this tutorial that I
00:47 - referenced as part of the ml 5 project
00:49 - called making your own data set this is
00:51 - by artist and researcher Hannah Davis
00:53 - and other contributors who may have also
00:55 - edited this page but it started with
00:57 - Hannah Davis linked to information about
01:00 - her in this video in the in this two
01:02 - page in the video's description now one
01:04 - thing you want to look here that I think
01:06 - is important is preparing your data set
01:08 - for machine learning trading testing and
01:11 - validation so I forget the first thing
01:15 - let me let me do something first here
01:16 - let me actually write some code
01:17 - strangely enough and I've got p5 loaded
01:20 - up here as kind of like a base
01:22 - JavaScript library that I use and I'm
01:25 - gonna add the preload function and I'm
01:29 - going to say let data and I'm going to
01:33 - say data equals load JSON and it's
01:37 - called color data JSON so I just want to
01:41 - load that file and then I'm gonna say
01:42 - console dot log data entry is dot length
01:46 - so let's just see how many data points
01:48 - do I have let me make sure I can indeed
01:50 - load that file into my code and look at
01:52 - how many data points I have so here we
01:56 - go
01:56 - oh I'm in the wrong sketch I changed it
01:59 - to here 5643 I can read numbers is that
02:06 - number perhaps perhaps that number could
02:07 - be found somewhere in my random number
02:09 - book but that's a I said I'll look for
02:11 - it later
02:12 - so okay
02:13 - why did I why did I say that so if we
02:15 - come over back to this page that I was
02:17 - referencing and
02:19 - we need to if I'm going to build the
02:21 - classifier the way I'm gonna do this is
02:24 - by having training data and testing data
02:31 - now there is also something called
02:34 - validation data let's go look back at
02:39 - this webpage training data set is used
02:43 - to train the model validation data sets
02:45 - are used to change the parameters of the
02:48 - model so I'm going to for the purpose of
02:51 - this video kind of simplify by not
02:54 - worrying about validation data and I am
02:57 - just going to use training data and
02:59 - testing data and the idea here is that
03:02 - what I want to do is train the model
03:05 - with my training data but then I want to
03:07 - feed it the testing data and see if the
03:10 - labels that it returns oh it thinks this
03:12 - color is bluish is that actually what it
03:14 - is labeled with and I'll get some type
03:16 - of accuracy score from that and I'll
03:19 - know more about you don't want to test
03:22 - it with stuff that I've trained it with
03:24 - because of course it's going to
03:26 - ultimately get that right machine
03:28 - learning models are very good at
03:31 - returning the result that you tell them
03:33 - about and we need to see does it also
03:35 - return the result of new data that it
03:37 - hasn't been trained with if it works
03:39 - really well with the training data but
03:41 - not with the testing data this can be
03:43 - known as overfitting meaning the model
03:47 - is just incredibly good it's it's so
03:49 - exact that it doesn't really know what
03:51 - to do except for like the exact data
03:53 - that it was trained with so we want to
03:55 - watch out for and a kind of convention
03:57 - let's say I have you know five thousand
04:00 - data points a convention might beat us
04:02 - use eighty percent of those so 10
04:07 - percent is five hundred like four
04:08 - thousand four thousand eight percent of
04:12 - five thousand I think as my training
04:15 - data and then save a thousand or twenty
04:19 - percent one-fifth as my test
04:23 - all right so I need to at least at the
04:25 - beginning right now divide it and I
04:27 - might just sort of pick randomly to
04:29 - divide it up okay so conceivably what I
04:33 - want to do now is look at this data
04:35 - entries and divide it into two different
04:37 - arrays training and testing but here's
04:39 - the thing what I want I I'm kind of
04:42 - talking about by talking myself in
04:43 - circles here but I don't want to split
04:45 - it just yet even though that was an
04:46 - important point for me to make the I'm
04:49 - using tension flow gjs here and ten FL
04:52 - Jess actually has a function called
04:53 - split that will let me take a long list
04:56 - of data points and split them into two
04:58 - different lists of data points so what I
05:01 - actually want to do first is get the
05:03 - data into tensors the tensorflow tjs
05:06 - thing that i need to use it and then
05:08 - I'll call T F dot split to do the 80/20
05:10 - split so what a hell am I gonna do this
05:12 - how am I gonna Vernon the tensor is now
05:14 - first of all if you have never looked
05:16 - attentively at Jess before I might
05:17 - encourage you to go watch my tensor flow
05:20 - dodgy ass tutorial series and it looks
05:21 - at what is a tensor and one of the
05:23 - possibilities there but just thinking
05:24 - about it the the thing that I need to do
05:27 - also is think about I have the the
05:30 - inputs which are the RGB values and then
05:35 - I have the target outputs the target
05:39 - outputs which are the labels and so when
05:43 - I create my tensors I'm actually gonna
05:45 - do this somewhat separately so let's
05:48 - just worry only about the inputs this is
05:50 - going to be the easier part first
05:52 - so the inputs basically the tensor shape
05:56 - that I want is a 2d tensor
05:59 - right because each input has three
06:02 - values maybe you know RG and a B value
06:06 - and then I have a lot of those so a one
06:13 - D tensor like a one dimensional array
06:15 - just has a single set of RGB values but
06:18 - I have a 2d tensor with because my data
06:21 - set there's a whole bunch of those data
06:23 - points okay so let me first just create
06:25 - a tensor 2d out of all of the RGB values
06:30 - and by the way if you watched my X or
06:34 - coding challenge where
06:36 - I did kind of a basic where I train a
06:39 - neural network to solve exclusive-or I
06:42 - also was calling these X's can you see
06:46 - that barely and the outputs being the
06:48 - Y's so that's the other the X's are like
06:51 - the inputs to the machine learning model
06:53 - the Y's are the output so I might use
06:55 - that variable naming as well okay now
06:57 - I'm really going back to the computer
06:58 - and I'm going to say so first ah so let
07:04 - me first to make a tensor I need to
07:06 - normalize the data and put it into
07:09 - arrays woof
07:10 - so let me go here and say first I'm
07:12 - going to say let the colors be an array
07:18 - then I'm going to go through let every
07:21 - record in data let record of data
07:25 - entries I'm gonna say colors and then
07:31 - I'm gonna say I'm gonna have a specific
07:33 - color I'm not gonna use the word color
07:34 - just cuz they co l is a is record are
07:40 - divided by 255 record G divided by 255
07:45 - and I'm dividing by 255 because I want
07:48 - to normalize it's going to my machine
07:50 - generally speaking for light inputs to a
07:52 - machine learning model I want to
07:54 - normalize to some strict range between 0
07:57 - & 1 is a pretty good one to do and then
07:59 - I'm going to say record dot B divided by
08:02 - 255 and then when I say colors dot push
08:06 - call and then just gonna look at this
08:10 - color so let's just look at this so this
08:12 - is not a tensor yet this is just 5000
08:15 - and probably one thing I should do while
08:18 - I'm working this out as I should work
08:19 - with like a smaller data set but 5000 is
08:22 - so small anyway but if I were doing this
08:24 - with like a big data set that had like
08:26 - five thousand records in it I might like
08:28 - sort of figuring out and what would want
08:29 - to do it for just like a hundred first
08:30 - and then I could use the large data set
08:32 - okay
08:32 - so we can see here this is a big array
08:35 - and each element of that array is
08:38 - another array with the normalized color
08:41 - values in it perfect so this now I
08:43 - should be able to say now let X's eat
08:48 - full TF tensor 2d colors so this is me
08:56 - turning those values and I I just want
09:00 - to say like console dot log X's shape
09:04 - let's look at the shape of the X's just
09:07 - to sort of see yes right
09:11 - there's 5643 entries each with three
09:14 - values so I think things are going right
09:16 - here I turned that into a tensor and
09:19 - then ah hello boy hey this wasn't so
09:22 - hard
09:22 - we're in good shape here I haven't done
09:24 - the training or is testing now I need to
09:26 - do the wise the wise involve a concept
09:30 - known as one hot encoding I think one
09:33 - hot vector so you know what I'm gonna
09:35 - pause here I finished this thing I'm
09:37 - really dividing this series into like
09:39 - little chunks here in the next video I'm
09:41 - gonna look at how to make the Y's and
09:43 - I'm gonna cover a concept known as one
09:45 - hunt one hot what's the what's the term
09:49 - that I'm looking for one is it one hot
09:50 - encoding one hot encoding yes so so I'll
09:56 - cover that in the next video when I make
09:57 - the wise thanks
09:59 - [Music]

Cleaned transcript:

oh this this video merits a train whistle I am in my series I'm on video 731 or something like that about building a color classifier I'm trying to look at the overall concept of machine learning and building a color classifier so what oh where am I I spent a bunch of videos and crowd sourcing and cleaning data and where I left off I have this JSON file that has a whole bunch of data points in it each entry has an RGB value and a label so there are nine labels and there are obviously millions of possibilities for the RGB values so the so what's the next step here so many things to think about let's go back to this tutorial that I referenced as part of the ml 5 project called making your own data set this is by artist and researcher Hannah Davis and other contributors who may have also edited this page but it started with Hannah Davis linked to information about her in this video in the in this two page in the video's description now one thing you want to look here that I think is important is preparing your data set for machine learning trading testing and validation so I forget the first thing let me let me do something first here let me actually write some code strangely enough and I've got p5 loaded up here as kind of like a base JavaScript library that I use and I'm gonna add the preload function and I'm going to say let data and I'm going to say data equals load JSON and it's called color data JSON so I just want to load that file and then I'm gonna say console dot log data entry is dot length so let's just see how many data points do I have let me make sure I can indeed load that file into my code and look at how many data points I have so here we go oh I'm in the wrong sketch I changed it to here 5643 I can read numbers is that number perhaps perhaps that number could be found somewhere in my random number book but that's a I said I'll look for it later so okay why did I why did I say that so if we come over back to this page that I was referencing and we need to if I'm going to build the classifier the way I'm gonna do this is by having training data and testing data now there is also something called validation data let's go look back at this webpage training data set is used to train the model validation data sets are used to change the parameters of the model so I'm going to for the purpose of this video kind of simplify by not worrying about validation data and I am just going to use training data and testing data and the idea here is that what I want to do is train the model with my training data but then I want to feed it the testing data and see if the labels that it returns oh it thinks this color is bluish is that actually what it is labeled with and I'll get some type of accuracy score from that and I'll know more about you don't want to test it with stuff that I've trained it with because of course it's going to ultimately get that right machine learning models are very good at returning the result that you tell them about and we need to see does it also return the result of new data that it hasn't been trained with if it works really well with the training data but not with the testing data this can be known as overfitting meaning the model is just incredibly good it's it's so exact that it doesn't really know what to do except for like the exact data that it was trained with so we want to watch out for and a kind of convention let's say I have you know five thousand data points a convention might beat us use eighty percent of those so 10 percent is five hundred like four thousand four thousand eight percent of five thousand I think as my training data and then save a thousand or twenty percent onefifth as my test all right so I need to at least at the beginning right now divide it and I might just sort of pick randomly to divide it up okay so conceivably what I want to do now is look at this data entries and divide it into two different arrays training and testing but here's the thing what I want I I'm kind of talking about by talking myself in circles here but I don't want to split it just yet even though that was an important point for me to make the I'm using tension flow gjs here and ten FL Jess actually has a function called split that will let me take a long list of data points and split them into two different lists of data points so what I actually want to do first is get the data into tensors the tensorflow tjs thing that i need to use it and then I'll call T F dot split to do the 80/20 split so what a hell am I gonna do this how am I gonna Vernon the tensor is now first of all if you have never looked attentively at Jess before I might encourage you to go watch my tensor flow dodgy ass tutorial series and it looks at what is a tensor and one of the possibilities there but just thinking about it the the thing that I need to do also is think about I have the the inputs which are the RGB values and then I have the target outputs the target outputs which are the labels and so when I create my tensors I'm actually gonna do this somewhat separately so let's just worry only about the inputs this is going to be the easier part first so the inputs basically the tensor shape that I want is a 2d tensor right because each input has three values maybe you know RG and a B value and then I have a lot of those so a one D tensor like a one dimensional array just has a single set of RGB values but I have a 2d tensor with because my data set there's a whole bunch of those data points okay so let me first just create a tensor 2d out of all of the RGB values and by the way if you watched my X or coding challenge where I did kind of a basic where I train a neural network to solve exclusiveor I also was calling these X's can you see that barely and the outputs being the Y's so that's the other the X's are like the inputs to the machine learning model the Y's are the output so I might use that variable naming as well okay now I'm really going back to the computer and I'm going to say so first ah so let me first to make a tensor I need to normalize the data and put it into arrays woof so let me go here and say first I'm going to say let the colors be an array then I'm going to go through let every record in data let record of data entries I'm gonna say colors and then I'm gonna say I'm gonna have a specific color I'm not gonna use the word color just cuz they co l is a is record are divided by 255 record G divided by 255 and I'm dividing by 255 because I want to normalize it's going to my machine generally speaking for light inputs to a machine learning model I want to normalize to some strict range between 0 & 1 is a pretty good one to do and then I'm going to say record dot B divided by 255 and then when I say colors dot push call and then just gonna look at this color so let's just look at this so this is not a tensor yet this is just 5000 and probably one thing I should do while I'm working this out as I should work with like a smaller data set but 5000 is so small anyway but if I were doing this with like a big data set that had like five thousand records in it I might like sort of figuring out and what would want to do it for just like a hundred first and then I could use the large data set okay so we can see here this is a big array and each element of that array is another array with the normalized color values in it perfect so this now I should be able to say now let X's eat full TF tensor 2d colors so this is me turning those values and I I just want to say like console dot log X's shape let's look at the shape of the X's just to sort of see yes right there's 5643 entries each with three values so I think things are going right here I turned that into a tensor and then ah hello boy hey this wasn't so hard we're in good shape here I haven't done the training or is testing now I need to do the wise the wise involve a concept known as one hot encoding I think one hot vector so you know what I'm gonna pause here I finished this thing I'm really dividing this series into like little chunks here in the next video I'm gonna look at how to make the Y's and I'm gonna cover a concept known as one hunt one hot what's the what's the term that I'm looking for one is it one hot encoding one hot encoding yes so so I'll cover that in the next video when I make the wise thanks
