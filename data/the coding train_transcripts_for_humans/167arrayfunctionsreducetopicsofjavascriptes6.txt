With timestamps:

00:00 - it's me I'm tiny I'm up here in my code
00:03 - what's over here this is the array oh
00:05 - it's a nice array I'm going to be here
00:07 - talking about reduce so I reduced myself
00:09 - to a very small person but I am going to
00:12 - [Music]
00:13 - unreduced myself back to my normal size
00:17 - to talk about reduced hope that was
00:19 - totally worth doing wasting the first 30
00:21 - seconds of this video for that bit of
00:23 - check ok so reduce this is a really
00:26 - interesting and kind of weirded quirky
00:28 - higher-order functions for arrays and
00:30 - what it what's generally the reason why
00:32 - it's called reduced is let's say I have
00:34 - an array and I want to take this array
00:36 - and I want to just I want to find out
00:38 - the essence of the array as a whole I
00:40 - want to reduce it into one thing so
00:42 - that's what this does now there's lots
00:43 - of ways reasons why you might want to do
00:45 - this but I think probably the simplest
00:46 - scenario to start with is I'll have an
00:48 - array and I want to add up all the
00:49 - numbers in it I want to average all the
00:50 - numbers in it so let's look at how that
00:52 - works with reduce right first let's
00:54 - actually do that without reduce just to
00:55 - just to kind of like get the hang of
00:57 - things here so if I wasn't using reduce
00:59 - I would say 4 let I equals 0 I is less
01:03 - than Val's dot length I plus plus and I
01:08 - would have a variable like let's sum
01:10 - equals 0 and I would say sum plus equal
01:12 - Val's index I and then I would say
01:15 - console dot log sum and I would refresh
01:18 - up here we could see there we go
01:20 - all those numbers add up to 21 now if
01:22 - you've been paying attention to my es6
01:24 - videos of which this is in a playlist I
01:26 - could also say for let Val of Val's so
01:33 - this is kind of like a kind of like a
01:35 - for each style loop there is actually
01:37 - something called a for each in
01:38 - JavaScript with a little bit different
01:39 - also a higher order function that you
01:41 - can pass anyway but this is saying every
01:43 - Val
01:44 - inside of vowels and oh of course now I
01:46 - don't have that index I would just do
01:47 - this add them all together so this is
01:49 - reducing it a little bit reducing the
01:51 - code a little bit and if I hit refresh
01:53 - I've also got 21 all right so let's look
01:56 - at how this reduce function works and
01:58 - actually before I act write the code let
02:01 - me come down here and let me go and look
02:03 - at the documentation so I'm gonna look
02:06 - at reduce so reduce is a function that
02:10 - has that takes two arguments
02:12 - and there's a way of doing it with one
02:13 - argument which I will get to at some
02:15 - point an accumulator and a current value
02:19 - what does that mean accumulator and a
02:21 - current value accumulator and a current
02:24 - value so this is not reduce takes a
02:27 - function it's a higher-order function so
02:30 - let's write a function that has both it
02:31 - compute an accumulator and a value so
02:34 - I'm gonna get rid of this code and I'm
02:37 - gonna say function and I'm gonna use ACC
02:40 - for short for accumulator and Val for
02:43 - value and I'm gonna say return
02:48 - accumulator plus value hmm
02:53 - okay return accumulator plus value I
02:57 - think this is right oh and let me name
02:59 - this called I'm gonna call this sum now
03:03 - I'm gonna say Val dot reduce some and
03:08 - I'm gonna say let result answer equal
03:13 - that and I'm gonna say console dot log
03:15 - answer I realize I kind of just type
03:17 - this out and I haven't really explained
03:18 - it yet cuz to be honest I'm not entirely
03:20 - sure what I'm doing just yet but
03:22 - hopefully this is gonna make sense that
03:23 - I can back it's gonna work and I can
03:25 - back up and explain it let's see I got
03:27 - the answer 21 okay so what does this do
03:30 - well do you remember when I let's let me
03:34 - go back to my old code I'm gonna just
03:35 - quickly copy this we go back to here
03:40 - what if I actually called this ACC short
03:44 - for accumulator and then set ACC plus
03:47 - equal Val well the accumulator starts
03:50 - with 0 and then every Val is added to it
03:53 - over and over again this is the idea of
03:56 - reduce you give it something that's
04:00 - going to persist over time as it's
04:02 - looping through elem every element of
04:04 - the array and then you can act on that
04:08 - thing that's persisting and the actual
04:10 - value of the array now in this case to
04:12 - to add them both together all I want to
04:16 - do to add a sum I just want this
04:19 - accumulator to always persist and just
04:21 - keep having each Val added to it now
04:24 - what's the weird thing about this is
04:26 - what's the value of accumulator like
04:29 - what does it start with well interesting
04:30 - it enough let's see if we can determine
04:32 - I'm gonna add console.log accumulator in
04:36 - here and I'm probably gonna need a bit
04:39 - more room in my console so I'm gonna do
04:40 - that look at that five nine ten twelve
04:44 - twenty one interestingly enough the
04:46 - first time I ran the code the
04:50 - accumulators value was five this is
04:53 - because I did not provide an initial
04:57 - value for the accumulator so if you do
05:01 - not provide an initial value for the
05:03 - accumulator it will by default be the
05:06 - first thing in the array which is five
05:08 - notice now if in here I say reduce some
05:11 - and then I pass a second fat a second
05:15 - argument so sum is this function that's
05:18 - the hot that's one passing reduce but
05:20 - there's an optional second argument
05:21 - which is referred to as the initial
05:23 - value so if I want the initial value of
05:24 - accumulator to be zero I didn't have to
05:28 - do it for this problem that I'm solving
05:29 - but I couldn't do that here now I'm
05:32 - gonna hit refresh and oh and let's look
05:34 - at what it did notice that it started at
05:37 - zero so I have an extra console.log it
05:39 - did actually it didn't actually bother
05:41 - to run it with the first value because
05:42 - it just started accumulator as that
05:44 - value but the previous time but now it's
05:46 - doing that so just to be make it clear
05:49 - if I say ten right if I start
05:53 - accumulator at ten can take this out
05:55 - what should think about pause and think
05:57 - about what am I going to see in the
05:59 - console refresh 31 right because I added
06:03 - all the numbers starting with ten okay
06:06 - how can i condense this now well first
06:10 - of all I can use the arrow syntax I can
06:17 - get rid of the word function I don't
06:19 - need it to be named and it's one line of
06:22 - code so I don't need the curly brackets
06:24 - and I don't need the return so this
06:27 - actually can now go right here and this
06:31 - is now I'm going to give myself a little
06:32 - more space this is the full line of code
06:35 - I can say hey
06:39 - take this array and reduce it with an
06:42 - accumulator of a starting value of 10
06:44 - and for each value add that value to the
06:47 - accumulator okay so in this case though
06:50 - if I really just want to calculate the
06:52 - sum which I can call this sum I don't
06:55 - want to start with 10 so I'm going to do
06:58 - this and just to be aware just to say it
07:00 - again this is very important especially
07:01 - once you start having like arrays of
07:03 - objects and other things
07:04 - the accumulator if you don't give an
07:06 - initial value is not starting with like
07:08 - a default value of 0 it's actually
07:10 - starting with whatever the first element
07:12 - of the array is so if you ever seen this
07:14 - code and I'm going to do this soon
07:16 - enough in a future video where this is
07:17 - an array of particles I might want to do
07:19 - something to say calculate the average
07:21 - the centroid of all those particles I'm
07:23 - gonna have to be clever about how I
07:24 - think about doing this ok
07:26 - now they're checking a good suggestion
07:29 - which would be to find the maximum or
07:32 - the minimum of and of course there is I
07:34 - think in p5 I know has the min and Max
07:36 - function is probably a native JavaScript
07:38 - one as well but let's try to do that
07:39 - let's try to find the minimum and
07:43 - maximum using reduce so let's I'm gonna
07:45 - write it out the long winded way because
07:47 - this helps me I'm gonna say fine max and
07:51 - actually this is great because this
07:52 - relates to some of my neural network
07:54 - videos that I've been making where I'm
07:57 - going to have an accumulator and a value
07:59 - okay now if value is greater than
08:04 - accumulator accumulator should equal
08:06 - value right accumulator doesn't have to
08:08 - just be a thing that's you're adding up
08:10 - together you're saying it's just a
08:12 - variable that's going to persist while
08:14 - I'm going over the whole array and value
08:16 - is each one so if that current value is
08:19 - greater than whatever the accumulator is
08:20 - then I'm gonna get then accumulator
08:24 - should equal that value and then I guess
08:27 - do I want to I need to return the
08:29 - accumulator or does that by definition
08:33 - no yes I need to return the accumulator
08:37 - I think so let's see let's take a look
08:41 - at this so let's say let biggest equal
08:45 - Val's dot reduce find max
08:52 - all right so and then let's console.log
08:58 - biggest nine that's the lot now let's
09:05 - put nine in the middle because just to
09:07 - be sure that that's really working
09:09 - because it was the last element nine it
09:12 - still worked so I definitely need to and
09:14 - if I take out this return accumulator
09:16 - yeah I don't get it so of course I need
09:19 - to return that right because the whole
09:20 - point is I am going to return at the end
09:23 - it's kind of you sort of get into that's
09:25 - being assumed that value that persisted
09:27 - over the whole time now how can I reduce
09:29 - this so first of all I can make this as
09:32 - we know an arrow function so let's
09:37 - actually do this and I'm going to put
09:40 - this here now into here so this works
09:48 - this is a little bit awkward looking but
09:50 - this is definitely kind of functional
09:52 - style I'm gonna reduce that I have an
09:55 - accumulator and a value I'm using the
09:57 - arrow syntax and running this code let's
09:58 - make sure this still works I get nine
10:01 - now I could probably use I think it's
10:03 - called a ternary operator if I wanted to
10:05 - be this crazy person who is crazy person
10:11 - who is reducing who's like so if I want
10:15 - to be this crazy person who's like
10:16 - always trying to get the code to be
10:18 - shorter ensure it is shorter let's try
10:19 - to remind ourselves what a ternary
10:21 - operator is so but this okay so this is
10:25 - an if statement if a is greater than B B
10:28 - equals a but it could also sort of think
10:30 - of this as if a is greater than B I
10:33 - might say like return right if it's
10:36 - greater than a is greater than B then a
10:39 - is the the new bigger value otherwise
10:42 - return B is the new bigger value so this
10:47 - kind of statement can be written in with
10:49 - a ternary operator by saying question
10:52 - mark a colon B so I can get rid of hey I
10:58 - felt like what I'm doing today I get rid
11:00 - of this if and these returns and I
11:02 - basically have a value
11:04 - wait this boolean expression if it's
11:06 - true here we got a if it's false here we
11:10 - got B so in theory I believe that I
11:14 - could let's change these actually to a
11:16 - and B which is fine an accumulator and
11:18 - values kind of useful but I could say a
11:22 - greater than B :
11:25 - I don't know question mark a : B I gotta
11:31 - give myself a lot more room here did I
11:33 - get this right
11:34 - oh it's right let's look at this is this
11:40 - really right oh my goodness oh oh this
11:43 - really freaks me out but it's okay it's
11:45 - okay everything's gonna be okay I got
11:47 - too many mouths things everywhere all
11:49 - right let's think about this again I'm
11:50 - taking an array a is the is the
11:53 - accumulator B is the value if value I
11:59 - yeah it's funny because I was thinking
12:01 - about it the other way around
12:02 - cuz I think what I want to do is say if
12:04 - the value is greater than the
12:06 - accumulator then return the value
12:08 - otherwise return the accumulator they're
12:10 - really the same thing but um so let's
12:12 - see if this works I should get nine nine
12:15 - I still got nine so the idea here is
12:17 - that I'm saying reduce this array have
12:21 - about have a variable called a the
12:22 - accumulator persists over time and then
12:24 - look at every value B in the array start
12:27 - with five
12:28 - if B if it's before is bigger than five
12:32 - that's your new accumulator if nine is
12:35 - bigger than five
12:36 - that's your new accumulator which it is
12:38 - if two is no is two bigger than nine
12:41 - knows one bigger than I know I'm left
12:42 - with nine so laughs hopefully this is
12:46 - kind of helping you these are two
12:47 - scenarios now we've now seen where this
12:50 - is like a nice little snippet of code to
12:53 - find the largest value in an array and
12:55 - this is a nice little snippet of code if
12:58 - I put it back to find the sum of all the
13:03 - values in the array and both of these
13:05 - the initial value is can feet is is
13:07 - assumed for example just to be clear
13:10 - about this what if I put 20 here if I
13:13 - put 20 here if the accumulator starts is
13:15 - 20 what am I going to see
13:18 - 20 and then the sum is 21 because right
13:21 - so it's gonna be 20 because none of the
13:23 - numbers are bigger than 20 so this could
13:24 - also be a test like hey find me the
13:27 - maximum value in the array but if
13:29 - nothing is bigger than 20 just stick
13:30 - with 20 so but if I said if I said 8
13:34 - here I'm gonna get 9 right so this
13:38 - initial value is assumed to always start
13:40 - with 5 but unless you explicitly
13:44 - initialize into something else as the
13:45 - second argument to the reduced function
13:48 - okay so boy I don't know how I feel
13:53 - about these functions but at least I've
13:55 - covered them I've tried to explain them
13:57 - you should let me know in the comments
13:58 - because I don't know I felt pretty good
14:00 - about nap it felt like if you're
14:02 - watching that video I've made sense you
14:03 - could find use of it this reduced one is
14:04 - really confusing and it takes a lot of
14:06 - practice especially as we like condense
14:08 - it short ensure with the arrow function
14:09 - so let me know how that goes I'm going
14:12 - to use it with a particle system in a
14:15 - future video that will hopefully be
14:16 - linked from here somehow in a magical
14:18 - way so that might give you more of a
14:20 - sense as you see it used in a practical
14:22 - scenario where you're actually doing
14:24 - some graphics and animation so next
14:26 - video I will talk about filter
14:33 - [Music]

Cleaned transcript:

it's me I'm tiny I'm up here in my code what's over here this is the array oh it's a nice array I'm going to be here talking about reduce so I reduced myself to a very small person but I am going to unreduced myself back to my normal size to talk about reduced hope that was totally worth doing wasting the first 30 seconds of this video for that bit of check ok so reduce this is a really interesting and kind of weirded quirky higherorder functions for arrays and what it what's generally the reason why it's called reduced is let's say I have an array and I want to take this array and I want to just I want to find out the essence of the array as a whole I want to reduce it into one thing so that's what this does now there's lots of ways reasons why you might want to do this but I think probably the simplest scenario to start with is I'll have an array and I want to add up all the numbers in it I want to average all the numbers in it so let's look at how that works with reduce right first let's actually do that without reduce just to just to kind of like get the hang of things here so if I wasn't using reduce I would say 4 let I equals 0 I is less than Val's dot length I plus plus and I would have a variable like let's sum equals 0 and I would say sum plus equal Val's index I and then I would say console dot log sum and I would refresh up here we could see there we go all those numbers add up to 21 now if you've been paying attention to my es6 videos of which this is in a playlist I could also say for let Val of Val's so this is kind of like a kind of like a for each style loop there is actually something called a for each in JavaScript with a little bit different also a higher order function that you can pass anyway but this is saying every Val inside of vowels and oh of course now I don't have that index I would just do this add them all together so this is reducing it a little bit reducing the code a little bit and if I hit refresh I've also got 21 all right so let's look at how this reduce function works and actually before I act write the code let me come down here and let me go and look at the documentation so I'm gonna look at reduce so reduce is a function that has that takes two arguments and there's a way of doing it with one argument which I will get to at some point an accumulator and a current value what does that mean accumulator and a current value accumulator and a current value so this is not reduce takes a function it's a higherorder function so let's write a function that has both it compute an accumulator and a value so I'm gonna get rid of this code and I'm gonna say function and I'm gonna use ACC for short for accumulator and Val for value and I'm gonna say return accumulator plus value hmm okay return accumulator plus value I think this is right oh and let me name this called I'm gonna call this sum now I'm gonna say Val dot reduce some and I'm gonna say let result answer equal that and I'm gonna say console dot log answer I realize I kind of just type this out and I haven't really explained it yet cuz to be honest I'm not entirely sure what I'm doing just yet but hopefully this is gonna make sense that I can back it's gonna work and I can back up and explain it let's see I got the answer 21 okay so what does this do well do you remember when I let's let me go back to my old code I'm gonna just quickly copy this we go back to here what if I actually called this ACC short for accumulator and then set ACC plus equal Val well the accumulator starts with 0 and then every Val is added to it over and over again this is the idea of reduce you give it something that's going to persist over time as it's looping through elem every element of the array and then you can act on that thing that's persisting and the actual value of the array now in this case to to add them both together all I want to do to add a sum I just want this accumulator to always persist and just keep having each Val added to it now what's the weird thing about this is what's the value of accumulator like what does it start with well interesting it enough let's see if we can determine I'm gonna add console.log accumulator in here and I'm probably gonna need a bit more room in my console so I'm gonna do that look at that five nine ten twelve twenty one interestingly enough the first time I ran the code the accumulators value was five this is because I did not provide an initial value for the accumulator so if you do not provide an initial value for the accumulator it will by default be the first thing in the array which is five notice now if in here I say reduce some and then I pass a second fat a second argument so sum is this function that's the hot that's one passing reduce but there's an optional second argument which is referred to as the initial value so if I want the initial value of accumulator to be zero I didn't have to do it for this problem that I'm solving but I couldn't do that here now I'm gonna hit refresh and oh and let's look at what it did notice that it started at zero so I have an extra console.log it did actually it didn't actually bother to run it with the first value because it just started accumulator as that value but the previous time but now it's doing that so just to be make it clear if I say ten right if I start accumulator at ten can take this out what should think about pause and think about what am I going to see in the console refresh 31 right because I added all the numbers starting with ten okay how can i condense this now well first of all I can use the arrow syntax I can get rid of the word function I don't need it to be named and it's one line of code so I don't need the curly brackets and I don't need the return so this actually can now go right here and this is now I'm going to give myself a little more space this is the full line of code I can say hey take this array and reduce it with an accumulator of a starting value of 10 and for each value add that value to the accumulator okay so in this case though if I really just want to calculate the sum which I can call this sum I don't want to start with 10 so I'm going to do this and just to be aware just to say it again this is very important especially once you start having like arrays of objects and other things the accumulator if you don't give an initial value is not starting with like a default value of 0 it's actually starting with whatever the first element of the array is so if you ever seen this code and I'm going to do this soon enough in a future video where this is an array of particles I might want to do something to say calculate the average the centroid of all those particles I'm gonna have to be clever about how I think about doing this ok now they're checking a good suggestion which would be to find the maximum or the minimum of and of course there is I think in p5 I know has the min and Max function is probably a native JavaScript one as well but let's try to do that let's try to find the minimum and maximum using reduce so let's I'm gonna write it out the long winded way because this helps me I'm gonna say fine max and actually this is great because this relates to some of my neural network videos that I've been making where I'm going to have an accumulator and a value okay now if value is greater than accumulator accumulator should equal value right accumulator doesn't have to just be a thing that's you're adding up together you're saying it's just a variable that's going to persist while I'm going over the whole array and value is each one so if that current value is greater than whatever the accumulator is then I'm gonna get then accumulator should equal that value and then I guess do I want to I need to return the accumulator or does that by definition no yes I need to return the accumulator I think so let's see let's take a look at this so let's say let biggest equal Val's dot reduce find max all right so and then let's console.log biggest nine that's the lot now let's put nine in the middle because just to be sure that that's really working because it was the last element nine it still worked so I definitely need to and if I take out this return accumulator yeah I don't get it so of course I need to return that right because the whole point is I am going to return at the end it's kind of you sort of get into that's being assumed that value that persisted over the whole time now how can I reduce this so first of all I can make this as we know an arrow function so let's actually do this and I'm going to put this here now into here so this works this is a little bit awkward looking but this is definitely kind of functional style I'm gonna reduce that I have an accumulator and a value I'm using the arrow syntax and running this code let's make sure this still works I get nine now I could probably use I think it's called a ternary operator if I wanted to be this crazy person who is crazy person who is reducing who's like so if I want to be this crazy person who's like always trying to get the code to be shorter ensure it is shorter let's try to remind ourselves what a ternary operator is so but this okay so this is an if statement if a is greater than B B equals a but it could also sort of think of this as if a is greater than B I might say like return right if it's greater than a is greater than B then a is the the new bigger value otherwise return B is the new bigger value so this kind of statement can be written in with a ternary operator by saying question mark a colon B so I can get rid of hey I felt like what I'm doing today I get rid of this if and these returns and I basically have a value wait this boolean expression if it's true here we got a if it's false here we got B so in theory I believe that I could let's change these actually to a and B which is fine an accumulator and values kind of useful but I could say a greater than B I don't know question mark a B I gotta give myself a lot more room here did I get this right oh it's right let's look at this is this really right oh my goodness oh oh this really freaks me out but it's okay it's okay everything's gonna be okay I got too many mouths things everywhere all right let's think about this again I'm taking an array a is the is the accumulator B is the value if value I yeah it's funny because I was thinking about it the other way around cuz I think what I want to do is say if the value is greater than the accumulator then return the value otherwise return the accumulator they're really the same thing but um so let's see if this works I should get nine nine I still got nine so the idea here is that I'm saying reduce this array have about have a variable called a the accumulator persists over time and then look at every value B in the array start with five if B if it's before is bigger than five that's your new accumulator if nine is bigger than five that's your new accumulator which it is if two is no is two bigger than nine knows one bigger than I know I'm left with nine so laughs hopefully this is kind of helping you these are two scenarios now we've now seen where this is like a nice little snippet of code to find the largest value in an array and this is a nice little snippet of code if I put it back to find the sum of all the values in the array and both of these the initial value is can feet is is assumed for example just to be clear about this what if I put 20 here if I put 20 here if the accumulator starts is 20 what am I going to see 20 and then the sum is 21 because right so it's gonna be 20 because none of the numbers are bigger than 20 so this could also be a test like hey find me the maximum value in the array but if nothing is bigger than 20 just stick with 20 so but if I said if I said 8 here I'm gonna get 9 right so this initial value is assumed to always start with 5 but unless you explicitly initialize into something else as the second argument to the reduced function okay so boy I don't know how I feel about these functions but at least I've covered them I've tried to explain them you should let me know in the comments because I don't know I felt pretty good about nap it felt like if you're watching that video I've made sense you could find use of it this reduced one is really confusing and it takes a lot of practice especially as we like condense it short ensure with the arrow function so let me know how that goes I'm going to use it with a particle system in a future video that will hopefully be linked from here somehow in a magical way so that might give you more of a sense as you see it used in a practical scenario where you're actually doing some graphics and animation so next video I will talk about filter
