With timestamps:

00:01 - So, thank you for coming back.
If you--
00:04 - If you really made it through that
entire, uhm, last video.
00:07 - Here we are again and we're
going to take a big leap now.
00:10 - We're gonna do something, uhm,
00:12 - even more exciting than we thought
was even ever possible in the previous
00:16 - video. OK.
00:17 - So, eh-- Here I am. I gotta
get myself situated here.
00:20 - What do we got? We got a Processing
sketch, with variable declared at the top.
00:25 - It's given initial value 50 and now
we're drawing that circle at 50,
00:28 - at 50, at 50, at 50,
at 50, at 50, at 50. Right?
00:32 - For ever and ever we got-- that's
why the circle is always there.
00:35 - We now want to move that circle.
00:37 - We needed a new assignment operation. We
have an assignment operation that's in
00:41 - 'setup' that's giving it 
its initial value.
00:43 - Now we need an assignment
operation in 'draw'.
00:47 - Move the circle 1 pixel, right?
If the circle was at pixel
00:51 - 50, move it to 51. If it's at
51 move it to 52. Right?
00:55 - Increment the circle's
X location by 1.
00:58 - How we gonna write that code? 
How are we going to write that code?
01:03 - Okay.
Rethinking, rethinking...
01:09 - One of the most relaxing
activities you can do in your life is...
01:12 - It's a little better when you buy it
yourself and not recording videos just...
01:17 - quietly and, like, thoroughly, uhm,
01:20 - clean a whiteboard. Anyway, okay, so...
01:22 - We have 'draw'.
It's looping
01:28 - over and over again. Run this code, go
back to beginning, run this code.
01:32 - And we have this circle that
is right now being drawn
01:35 - at pixel location 50 which
is the value of 'circleX'.
01:38 - What we want to do is wanna say:
'Hey, every time through 'draw'...
01:43 - let's give 'circleX' a new value.
01:46 - What should its new value be?
It should be its current value
01:52 - plus 1.
01:55 - Now, this assignment operation, this
expression might look a little strange
01:59 - to you.
Almost as if it's
02:01 - some sort of weird paradox. Like:
'No! Nothing can equal itself plus 1...
02:04 - That doesn't make any sense.'
02:06 - But we have to remember:
what an assignment operation does
02:09 - is evaluate the right
side of an equation.
02:13 - This pen is squeaking like crazy
and I have another one.
02:17 - I had another-- Here we go. It's evaluate
the right hand side of the equation
02:22 - and take the result of that value,
ah, much better,
02:25 - and store it in the left hand side.
So if 'circleX' currently
02:29 - has the value of 50, we
evaluate 50 + 1
02:33 - which becomes 51 and 
then that gets stored
02:37 - and 'circleX' is now 51.
And if..
02:40 - what's happening in 
that beginning of 'draw'?
02:44 - We are drawing circle a--
we're drawing an ellipse
02:47 - at 'circleX'. Then, we come back here
02:50 - and draw it at 51.Then, 51 + 1 is 52.
02:54 - Then, we come back here and draw it 
at 52 then increment that by 1.
02:57 - This is the process. This is the
type of thing, this is like,
03:01 - such a simple, little, like basic
scenario. All it's doing
03:04 - is moving that circle left to right. But
this is the foundation of everything
03:08 - you might ever possibly want to do.
03:10 - It's coming up with an algorithm, what is
the logic behind what I'm doing
03:14 - and implementing that through code.
So, uhm--
03:17 - So let's take a look at adding this
into our program.
03:22 - So, where are we going to do that?
We could say: oh, should I put it up
03:26 - here?
03:27 - Or maybe I should put it at the bottom.
It actually in many ways
03:30 - doesn't really matter.
03:32 - One thing that I often like to do is
separate out. We can say like this is my
03:36 - drawing stuff.
03:37 - And this is my, like, logical,
manipulation and I don't know what, like--
03:42 - Moving, er, variables.
03:44 - I don't know what I'm saying.
I really have no idea, but--
03:47 - drawing stuff plus-- just like logic over
here. Let's call it logic, for a second.
03:52 - You don't have to separate this but I'm
03:53 - gonna do that just for, uhm, kinda
keeping our code nice and clean.
03:57 - So, I'm gonna say:
circleX = circleX + 1;
04:01 - We're going to run it and look:
there it is, the circle is moving.
04:05 - It's so nice and lovely.
Hello. Goodbye.
04:08 - It's gonna leave and its gonna be sad,
because you know: +1,+1,+1
04:11 - +1. It's still actually incrementing. Over
and over again. Going further and further.
04:16 - In Processing, by the way, it doesn't
matter: you can tell it to draw something
04:20 - at a pixel value that is not
within the window. It--
04:23 - You will not see it appear. It's
not like suddenly appear over here
04:26 - in our computer screen
04:27 - but it is sort of being done in
the sort of mind of Processing.
04:30 - So we can say: look at this
circleX = circleX + 1.
04:34 - We did it. Now we have the animation.
Okay.
04:38 - So there are a few additional items
here that I want to discuss.
04:42 - Number 1. is: what if we wanted
to go twice as fast?
04:47 - That-- that's pretty easy:
circleX = circleX + 2;
04:51 - Let's move 2 pixels every frame. What
if we wanted to go ten times as fast?
04:55 - circleX = circleX + 10;
Now we're going
04:59 - 10 pixels per frame. We can see it
zoom right of the screen.
05:02 - What if we wanted to go half as fast?
05:06 - Okay, circleX = cirrcleX + 1;
05:10 - What is half of 1? 0.5
05:15 - We run this and-- Oookay, look at this.
Look at that message.
05:20 - 'cannot convert from float to int this.'
This is what we mean by using a strictly
05:25 - typed language. All of the sudden, we
introduced a floating-point value:
05:31 - 0.5, a decimal number, but yet
we declared our variable
05:36 - a type integer and an integer
cannot be 1.5, 2.5.
05:42 - However, we can make this work by
05:46 - changing the value of circleX
to a float. Now,
05:50 - you might just suddenly feel like awesome
dive right in, run it, let's do it
05:53 - but
05:54 - if you really think about this for a
moment you'll start to
05:57 - think, like, something is
horribly wrong here.
06:00 - What-- what's happening--
06:03 - I mean, I have a window
in the computer
06:06 - There is a window in the computer and
we said: I can draw something at like
06:11 - pixel 50, 180, right? And we put
our circle there
06:16 - and there it is pixel 50, 180.
What if I said to you:
06:20 - draw this circle at pixel 50.5, 180.
06:25 - Well, you would say like: No!
06:28 - Absolutely not.
I showed you no such thing.
06:31 - There's no such thing
as pixel 50.5.
06:34 - There's pixel 50 and there's pixel 51,
but there's no pixel
06:38 - 50.5, like, I counted those
pixels on the screen
06:41 - 1,2,3,4,5 right? But, here's the thing:
06:45 - even though there is technically
no pixel 50.5, pixel 50.8,
06:50 - Processing allows you to use floating
point values, when you want to draw
06:54 - something in the window
06:56 - and what it does secretly is it just
lops of the decimal point.
07:00 - So, if you asked to draw something
50.5, you will get it at
07:04 - really at pixel 50. Now,
why is this so useful?
07:07 - Let's think about this idea
of a circle moving quickly,
07:11 - or slowly, okay?
07:15 - These could be its values every
frame: pixel 50, 51, 52,
07:19 - 53, 54, 55, right? If we
wanted to move faster
07:22 - 50, 55, 60, 65, right? Move
five pixels per frame.
07:26 - But, what if we do this: 50,
07:30 - 50.5, 51, 51.5, 52
07:35 - 52.5, right? It won't actually
07:38 - be drawing the circle at pixel 50.5.
07:41 - It will just draw it at the pixel
50 twice. But if its running
07:45 - 30 frames per second and we
draw it at the same location twice,
07:49 - it's going to appear as if it's moving more
slowly. Now, we could implement all sorts
07:54 - of crazy logic, we could try sort of
change, there's a function in Processing
07:57 - called frameRate which would actually slow
frame rate of the entire application down.
08:01 - But this is now we want. What if we
want one thing moving really fast
08:04 - and one thing moving really slow?
We need to manipulate, uhm,
08:07 - the locations and sizes of things.
Using floating-points
08:12 - allows us to have more precision
over the speed
08:15 - and, uhm, kinda new ones
of hell things happen
08:18 - visually in our program. So, this is
kinda like a long explanation but
08:22 - What I'd say is-- I would
suggest to you right now:
08:26 - that for the time being just
use the float for everything.
08:31 - There are cases where you absolutely
want a whole number, but in the case
08:34 - of drawing a pixel, drawing shapes at
08:38 - locations, drawing sizes of shapes,
manipulating the sizes.
08:41 - We really want to use floats and let's
take a look at that over here.
08:44 - So, once we have float and I run it,
08:47 - we can see that's moving half as fast.
08:50 - And if I say 0.1...
08:54 - You know it's really moving really slowly.
08:57 - But it's moving. And you can't tell
that it's really sitting
09:01 - at the same-- I mean if you kinda like look
at it really really carefully maybe you
09:05 - can but
09:06 - the frame rate is fast enough it just looks
like it's inching its way along.
09:09 - And you can even do stuff like
09:11 - point, I don't know I'm kinda going
crazy here, 0.01.
09:14 - We can say: Okay, it's moving, but it's
moving so slowly we can barely perceive it.
09:18 - So, but, you know, if we-- 
If I went to, like,
09:21 - take a walk around outside for a little bit
clear my head, come back, it'd probably
09:26 - be quite a bit further along
09:27 - on the screen. Okay, so floating-points
allow you to do a lot. Okay.
09:33 - This is good, good
place to stop.
09:36 - We've done quite a bit here, even though
it seems like we've barely done anything.
09:40 - We just have this little circle moving.
09:42 - What I would say to you right now, is:
go to your sketch,
09:46 - you have variables you declared at
the top, make them floats.
09:49 - give all those variables initial values
09:51 - and then try manipulating those values.
Can you make
09:54 - something grow, can you make something
shrink, can you make something change color?
09:58 - What can you do with variables at this
point?
10:01 - Uhm, and-- in the next video we're going
to look at how we can actually
10:05 - give things random values
to create certain other
10:09 - er, additional variation in our
programs. And then of course
10:12 - at some point, in the next
set of videos we need to
10:16 - figure out how to get this thing to turn
around when it hits the edge.
10:21 - Right? How do we have a conditional,
a condition in our code--
10:25 - How do we say:
10:26 - if that circle reaches the edge, turn
around and move the other way.
10:30 - Right? Instead of saying
circleX + 1 now say circleX - 1
10:34 - How do we make that happen? That's where
we're going towards here. But, at first,
10:38 - we just wanna get used to having
variable, storing data and
10:41 - that sort of thing. Okay.
Uhm, actually, hello!
10:48 - What I forgot to say was: a simple
exercise you might do with this
10:51 - is just add the Y component to it, right?
Take this program
10:55 - add circleY, add certain-- give circleY
initial value and give circleY
11:00 - an initial speed as well, increment
circleY by some value
11:04 - and see if you can get to move in
addition to the x-axis along the y-axis.

Cleaned transcript:

So, thank you for coming back. If you If you really made it through that entire, uhm, last video. Here we are again and we're going to take a big leap now. We're gonna do something, uhm, even more exciting than we thought was even ever possible in the previous video. OK. So, eh Here I am. I gotta get myself situated here. What do we got? We got a Processing sketch, with variable declared at the top. It's given initial value 50 and now we're drawing that circle at 50, at 50, at 50, at 50, at 50, at 50, at 50. Right? For ever and ever we got that's why the circle is always there. We now want to move that circle. We needed a new assignment operation. We have an assignment operation that's in 'setup' that's giving it its initial value. Now we need an assignment operation in 'draw'. Move the circle 1 pixel, right? If the circle was at pixel 50, move it to 51. If it's at 51 move it to 52. Right? Increment the circle's X location by 1. How we gonna write that code? How are we going to write that code? Okay. Rethinking, rethinking... One of the most relaxing activities you can do in your life is... It's a little better when you buy it yourself and not recording videos just... quietly and, like, thoroughly, uhm, clean a whiteboard. Anyway, okay, so... We have 'draw'. It's looping over and over again. Run this code, go back to beginning, run this code. And we have this circle that is right now being drawn at pixel location 50 which is the value of 'circleX'. What we want to do is wanna say 'Hey, every time through 'draw'... let's give 'circleX' a new value. What should its new value be? It should be its current value plus 1. Now, this assignment operation, this expression might look a little strange to you. Almost as if it's some sort of weird paradox. Like 'No! Nothing can equal itself plus 1... That doesn't make any sense.' But we have to remember what an assignment operation does is evaluate the right side of an equation. This pen is squeaking like crazy and I have another one. I had another Here we go. It's evaluate the right hand side of the equation and take the result of that value, ah, much better, and store it in the left hand side. So if 'circleX' currently has the value of 50, we evaluate 50 + 1 which becomes 51 and then that gets stored and 'circleX' is now 51. And if.. what's happening in that beginning of 'draw'? We are drawing circle a we're drawing an ellipse at 'circleX'. Then, we come back here and draw it at 51.Then, 51 + 1 is 52. Then, we come back here and draw it at 52 then increment that by 1. This is the process. This is the type of thing, this is like, such a simple, little, like basic scenario. All it's doing is moving that circle left to right. But this is the foundation of everything you might ever possibly want to do. It's coming up with an algorithm, what is the logic behind what I'm doing and implementing that through code. So, uhm So let's take a look at adding this into our program. So, where are we going to do that? We could say oh, should I put it up here? Or maybe I should put it at the bottom. It actually in many ways doesn't really matter. One thing that I often like to do is separate out. We can say like this is my drawing stuff. And this is my, like, logical, manipulation and I don't know what, like Moving, er, variables. I don't know what I'm saying. I really have no idea, but drawing stuff plus just like logic over here. Let's call it logic, for a second. You don't have to separate this but I'm gonna do that just for, uhm, kinda keeping our code nice and clean. So, I'm gonna say circleX = circleX + 1; We're going to run it and look there it is, the circle is moving. It's so nice and lovely. Hello. Goodbye. It's gonna leave and its gonna be sad, because you know +1,+1,+1 +1. It's still actually incrementing. Over and over again. Going further and further. In Processing, by the way, it doesn't matter you can tell it to draw something at a pixel value that is not within the window. It You will not see it appear. It's not like suddenly appear over here in our computer screen but it is sort of being done in the sort of mind of Processing. So we can say look at this circleX = circleX + 1. We did it. Now we have the animation. Okay. So there are a few additional items here that I want to discuss. Number 1. is what if we wanted to go twice as fast? That that's pretty easy circleX = circleX + 2; Let's move 2 pixels every frame. What if we wanted to go ten times as fast? circleX = circleX + 10; Now we're going 10 pixels per frame. We can see it zoom right of the screen. What if we wanted to go half as fast? Okay, circleX = cirrcleX + 1; What is half of 1? 0.5 We run this and Oookay, look at this. Look at that message. 'cannot convert from float to int this.' This is what we mean by using a strictly typed language. All of the sudden, we introduced a floatingpoint value 0.5, a decimal number, but yet we declared our variable a type integer and an integer cannot be 1.5, 2.5. However, we can make this work by changing the value of circleX to a float. Now, you might just suddenly feel like awesome dive right in, run it, let's do it but if you really think about this for a moment you'll start to think, like, something is horribly wrong here. What what's happening I mean, I have a window in the computer There is a window in the computer and we said I can draw something at like pixel 50, 180, right? And we put our circle there and there it is pixel 50, 180. What if I said to you draw this circle at pixel 50.5, 180. Well, you would say like No! Absolutely not. I showed you no such thing. There's no such thing as pixel 50.5. There's pixel 50 and there's pixel 51, but there's no pixel 50.5, like, I counted those pixels on the screen 1,2,3,4,5 right? But, here's the thing even though there is technically no pixel 50.5, pixel 50.8, Processing allows you to use floating point values, when you want to draw something in the window and what it does secretly is it just lops of the decimal point. So, if you asked to draw something 50.5, you will get it at really at pixel 50. Now, why is this so useful? Let's think about this idea of a circle moving quickly, or slowly, okay? These could be its values every frame pixel 50, 51, 52, 53, 54, 55, right? If we wanted to move faster 50, 55, 60, 65, right? Move five pixels per frame. But, what if we do this 50, 50.5, 51, 51.5, 52 52.5, right? It won't actually be drawing the circle at pixel 50.5. It will just draw it at the pixel 50 twice. But if its running 30 frames per second and we draw it at the same location twice, it's going to appear as if it's moving more slowly. Now, we could implement all sorts of crazy logic, we could try sort of change, there's a function in Processing called frameRate which would actually slow frame rate of the entire application down. But this is now we want. What if we want one thing moving really fast and one thing moving really slow? We need to manipulate, uhm, the locations and sizes of things. Using floatingpoints allows us to have more precision over the speed and, uhm, kinda new ones of hell things happen visually in our program. So, this is kinda like a long explanation but What I'd say is I would suggest to you right now that for the time being just use the float for everything. There are cases where you absolutely want a whole number, but in the case of drawing a pixel, drawing shapes at locations, drawing sizes of shapes, manipulating the sizes. We really want to use floats and let's take a look at that over here. So, once we have float and I run it, we can see that's moving half as fast. And if I say 0.1... You know it's really moving really slowly. But it's moving. And you can't tell that it's really sitting at the same I mean if you kinda like look at it really really carefully maybe you can but the frame rate is fast enough it just looks like it's inching its way along. And you can even do stuff like point, I don't know I'm kinda going crazy here, 0.01. We can say Okay, it's moving, but it's moving so slowly we can barely perceive it. So, but, you know, if we If I went to, like, take a walk around outside for a little bit clear my head, come back, it'd probably be quite a bit further along on the screen. Okay, so floatingpoints allow you to do a lot. Okay. This is good, good place to stop. We've done quite a bit here, even though it seems like we've barely done anything. We just have this little circle moving. What I would say to you right now, is go to your sketch, you have variables you declared at the top, make them floats. give all those variables initial values and then try manipulating those values. Can you make something grow, can you make something shrink, can you make something change color? What can you do with variables at this point? Uhm, and in the next video we're going to look at how we can actually give things random values to create certain other er, additional variation in our programs. And then of course at some point, in the next set of videos we need to figure out how to get this thing to turn around when it hits the edge. Right? How do we have a conditional, a condition in our code How do we say if that circle reaches the edge, turn around and move the other way. Right? Instead of saying circleX + 1 now say circleX 1 How do we make that happen? That's where we're going towards here. But, at first, we just wanna get used to having variable, storing data and that sort of thing. Okay. Uhm, actually, hello! What I forgot to say was a simple exercise you might do with this is just add the Y component to it, right? Take this program add circleY, add certain give circleY initial value and give circleY an initial speed as well, increment circleY by some value and see if you can get to move in addition to the xaxis along the yaxis.
