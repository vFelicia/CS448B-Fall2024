With timestamps:

00:02 - Hello.
00:03 - It is a bubble.
00:04 - In my previous video, which
you may not have watched,
00:07 - I looked at how I
could test if these two
00:09 - circles are overlapping.
00:10 - It's not just about
the math to look
00:12 - at if circles are
overlapping while that's
00:14 - interesting of course,
the whole point of this
00:16 - was really to look at an object
oriented sort of technique
00:20 - for how I might
write code that just
00:22 - checks if any bubble
intersects any other bubble.
00:24 - So I could say if bubble
one intersects bubble two
00:27 - and if I had bubble 4 and bubble
3, or bubble cat, bubble dog--
00:33 - so many possibilities.
00:34 - But what I want to
look at in this video
00:36 - is what if instead of
two separate variables
00:44 - I have an array of bubbles?
00:50 - Maybe there are many of them.
00:54 - Some of which are overlapping,
some of which are not.
01:00 - How do I check?
01:04 - How do I check if let's say
I call this bubble bubble
01:07 - A. B. C. D. E. F.
G. H. I. J. K. L.
01:13 - I just had to go
through them all.
01:14 - There's bubble A. I have to
check is bubble A intersecting
01:18 - BCD EFG HIJ KLM?
01:22 - I have to check if bubble
B is intersecting any them.
01:24 - How do I check if every
bubble is intersecting
01:28 - every other bubble?
01:29 - Oh!
01:29 - OK, let's look at that.
01:32 - All right, so what
I'm going to do first
01:34 - is I'm just going to
change this program
01:37 - to have an array of bubbles.
01:41 - Then what I'm going to do is I'm
going to create maybe just 10
01:46 - bubbles to start with.
01:48 - Bubbles index I
equals a new bubble.
01:52 - And I'm going to give
them random locations.
02:00 - And maybe a random size.
02:02 - And I'm going to have
them kind of small-ish.
02:06 - And then I'm going to
make those bubble objects.
02:08 - I'm going to comment
this out here.
02:11 - And I'm now going to say,
I'm going to look at--
02:14 - Oh, oh.
02:16 - I don't know if I should
do this in this video.
02:18 - Well, I got to do this
in a separate video.
02:20 - I'm going to make a
separate video which
02:21 - you can go back and look at.
02:22 - But there is a way, a new way--
02:26 - This is a bad idea but I'm
going through it anyway.
02:28 - Right, normally I
would write this code.
02:34 - And I would just say bubbles
index I show bubbles I move.
02:45 - So let's run this right now.
02:46 - I'm gonna get rid of this.
02:48 - Boom!
02:49 - So there we have
all of my bubbles
02:51 - showing and moving,
showing and moving.
02:53 - I just want to say-- and I will
make another video about this
02:56 - specifically-- that I've been
using this new loop that's also
02:59 - part of ES6 version
of JavaScript
03:01 - where I could just
say four b of bubbles.
03:06 - b.show.
03:08 - B.move.
03:09 - So these are exactly
the same thing.
03:12 - I'm going to do this
in a separate video.
03:13 - So while you're
here with me maybe
03:16 - you don't want to
click and watch it.
03:18 - This is this idea that I can--
03:21 - I want to iterate over
every element of the array.
03:24 - And every element
of the array can
03:26 - be addressed by its
index which is typically
03:28 - why I might have a
counter like I to count
03:30 - through all the index values.
03:31 - 0, 1, 2, 3, 4, 5 6 7 8 9.
03:33 - But it's common operation to
do something to every element
03:38 - of an array-- and in fact, there
are lots of other ways that
03:40 - I'm going to show you later
that you can even do more with
03:42 - this--
03:42 - that I can just make
a variable be called--
03:47 - this can be anything,
cat of bubbles.
03:48 - The point is this is saying
for every element in bubbles
03:57 - put that element in this
variable and then do some stuff
03:59 - and then go to the next one.
04:02 - You can see if the same program.
04:03 - The reason why I don't always
use this is sometimes I
04:06 - want to only look at
certain parts of the array.
04:09 - I need the index value.
04:10 - Sometime I need to move
things around in the array,
04:11 - delete them.
04:12 - But in this case,
this is going to make
04:14 - our life a little bit easier.
04:17 - So I'm going to go with it.
04:18 - I'm going with it.
04:19 - Going with it.
04:21 - OK, where am I?
04:22 - Still in this video.
04:24 - Now, I have all
of those bubbles.
04:30 - How do I know to
check if each one is
04:34 - intersecting every other one?
04:35 - Now, here's the thing.
04:36 - Let's think about this.
04:39 - Let's pretend, for a
second, that there's
04:41 - just one important bubble
which is a separate bubble.
04:46 - So I'm going to say
something like kitty.
04:57 - No?
04:58 - Puppy?
04:58 - Unicorn?
04:59 - Rainbow?
04:59 - Unicorn?
05:00 - There is a unicorn bubble.
05:06 - And I'm going to put it in
the center of the window
05:14 - and I'm actually going
to do a silly thing where
05:18 - I allow myself to just
control it with the mouse.
05:24 - Let's make sure
this works right.
05:26 - Oh, and I've got to also--
05:28 - What am I doing here?
05:29 - Lost my mind but I've
got to show and move.
05:33 - There's a point
to what I'm doing.
05:34 - It's going to make
sense in a minute.
05:37 - Stay with me here.
05:38 - So you can see-- look at this.
05:40 - Look at this bubble
that I'm moving around.
05:42 - There is one separate bubble
that's outside of the array
05:44 - that I happen to be
giving the mouse location.
05:47 - So what if I want to check if
this bubble is intersecting
05:51 - any other bubble?
05:52 - Let's take a look at that.
05:53 - So I'm going to do this.
05:56 - If unicorn dot intersects b.
06:03 - This is now saying, Hey,
I want this special bubble
06:06 - unicorn to check if
it's intersecting
06:09 - anything in that array.
06:11 - Anything in that array.
06:12 - I just knocked this camera.
06:14 - OK.
06:16 - By the way, what's
convenient here
06:18 - is I have this I already have
this function changecolor
06:23 - which I used in
a previous video.
06:24 - So I can use repurpose
that function changecolor
06:27 - to if it's intersecting that
bubble to change its color.
06:31 - So let's change its
color to 100 otherwise,
06:35 - change its color back to zero.
06:37 - So what I'm doing is I'm saying
if the unicorn intersects
06:40 - the bubble it's got a different
brightness than if it does not
06:42 - intersect that
particular bubble.
06:47 - And look.
06:47 - I guess I should make that
brightness a little bit higher
06:51 - so you can see here.
06:54 - There we go.
06:56 - So you can see this is
working but this is different
06:59 - than me checking all of these
bubbles against each other.
07:05 - How am I going to do that?
07:08 - So what I need to do is I
actually don't want anything
07:12 - to do with this unicorn.
07:13 - So let's comment
this unicorn out.
07:15 - But the unicorn
served a purpose.
07:18 - Because it shows us right here
that this is what I want to do.
07:23 - For every bee in bubbles show
it move it and then check
07:27 - if it intersects--
07:29 - and really a
different way to write
07:30 - this that would have
made more sense is this,
07:34 - and what I want to do is say,
don't check just that unicorn.
07:39 - Check every other b,
every other bubble.
07:43 - So what if I had
another loop in here?
07:47 - Right, there's another loop.
07:49 - Just look at this for a second.
07:51 - For every bubble, show
it and move it then
07:55 - go through all the
bubbles again and check
08:00 - if that bubble is intersecting
any of the other Ones.
08:07 - It's tricky.
08:08 - I feel like I need to just
pause and breathe for a second.
08:10 - But this is new to you.
08:11 - This is this idea
of a nested loop.
08:14 - And I feel like I want
to go over to the diagram
08:16 - and I want to try to redo
that diagram for a second.
08:18 - I think I've lost which
pen was the good one.
08:22 - Let's try this again.
08:23 - I'm just going to
have four bubbles
08:25 - A, B, C, and D. I want to check
is A, intersecting B, C, or D?
08:38 - Is B intersecting A, C, or D?
08:45 - Is C intersecting A, B, or D?
08:50 - And is D intersecting
A, B, or C?
08:55 - Here's the thing
though, even though this
08:57 - is what I want to check I
just sort of intuitively
08:59 - did something here.
09:00 - Which is what I said is
that I don't want to check
09:02 - if A is intersecting A?
09:04 - But really what I
want to do, code wise,
09:07 - is I want to do this.
09:09 - I want to have A
check all four then
09:11 - B check all four then C check
off four the D check off for.
09:14 - But I want to make
sure I ignore when
09:16 - it's checking against itself.
09:19 - And then, of course, we could
optimize this even further,
09:22 - which maybe I'll do at
the end of this video.
09:24 - If A is checking B, C,
and d, B doesn't really
09:28 - need to check again.
09:29 - But that's only for
this particular case.
09:30 - There could be other
instances where
09:32 - we want to check A
versus B and B versus
09:34 - and that means
something different.
09:36 - So let's come back over here
and see what I mean here.
09:39 - So first of all, I
want to make sure
09:43 - that b does not equal other.
09:50 - So what I want to do
is I want to check
09:52 - if b is intersecting
every other bubble,
09:55 - as long as B isn't
checking itself.
09:58 - So the problem is this
actually isn't going to work.
10:00 - It's sort of going to work
but not going to work.
10:03 - I'll explain to you why.
10:04 - The logic here is quite sound
in terms of the two loops
10:09 - but that change color
is a bit of a problem.
10:12 - So let's run this and see.
10:15 - I'm not seeing
anything change color.
10:18 - Why not?
10:19 - Well, let me do something here.
10:20 - Let me, at least,
comment about this part.
10:24 - So what I want is I'm only
going to change color.
10:30 - I'm never going to change back.
10:32 - So you can see what's
going to happen now
10:34 - as any two bubbles that
intersect each other--
10:38 - come on bubbles you can do it.
10:40 - There we go-- they change color.
10:42 - But as they separate they stay.
10:44 - So this is an added
layer of complexity
10:46 - that I probably should
have anticipated when
10:48 - I started to making this video.
10:50 - And in a way I could stop here
and but since we're doing this,
10:54 - I think we've got to
solve this problem.
10:56 - I'm here.
10:56 - You're here.
10:57 - You could go on
to something else.
10:58 - If you want to
solve this problem,
10:59 - how can I now have them turn off
when they are not intersecting?
11:07 - So here's the thing.
11:09 - What I want to do
is I can't decide
11:15 - whether I want to change the
color to black or white right
11:20 - in here.
11:20 - Why is that?
11:22 - The reason is, let's
consider this case
11:25 - where and C are overlapping.
11:31 - And that loop, what
it's doing is it saying,
11:33 - is A intersecting A?
11:39 - Well, no don't change the
color because their equal.
11:42 - Is A intersecting B?
11:45 - Well, no don't change the
color because they're not
11:47 - intersecting.
11:48 - Is A intersecting C?
11:50 - Oh, yeah.
11:51 - Change the color.
11:52 - Change the color
they're intersecting.
11:54 - Change the color.
11:54 - OK.
11:55 - Oh, wait.
11:55 - We're not finished yet.
11:56 - Is A intersecting D?
11:58 - No.
11:59 - No, they're not.
12:00 - Changing back to black.
12:01 - Because that else doesn't
know that the previous one
12:04 - was intersecting.
12:06 - So this is an issue right so
because I'm looping through
12:09 - with an else here, unless
it's the last one I happened
12:12 - to check, the last one is going
to change it back to black.
12:15 - So what I actually need to
do is do this kind of trick--
12:18 - and I'm sure there's a
more elegant way of doing
12:20 - this but just for
right now I can say,
12:25 - let overlapping equals false.
12:31 - So I'm going to assume it's
not overlapping anything.
12:35 - I'm going to assume it's
an overlapping anything.
12:37 - Then I'm going to
check all of them
12:40 - and if it's overlapping at least
one, I'm going to say true.
12:44 - What's funny about this is
the more it's overlapping,
12:47 - I could add up a
number or something.
12:49 - I'm going to check if it's
overlapping at least one set
12:51 - overlapping equal to true.
12:52 - Once I'm done checking
everything now if I do get
12:58 - overlapping then I can say,
b.changeColor(255) otherwise,
13:04 - b.changeColor(0).
13:06 - So this is a little bit
of a goofy piece of logic
13:09 - that's associated just with
this particular scenario.
13:12 - But the core idea here is
that I have this nested loop.
13:17 - I want to check this
bubble every other bubble.
13:20 - OK.
13:20 - So let's run this again.
13:22 - Let me make the bubbles--
13:24 - let me make more of them.
13:26 - Let's make 20 of them.
13:29 - And you can see that
if it's intersecting
13:31 - any other one it's lighting
up, if it's not it's
13:38 - not lighting up.
13:39 - So this is complete.
13:42 - There are some things
here to change.
13:45 - And I'm going to just talk
them through for a second
13:47 - and then I'll decide if I'm
going to implement them.
13:50 - So one is, is there a way--
13:53 - maybe it would make more
sense for me to somehow--
13:58 - I think it would make
more sense for me--
14:01 - I kind of want to
do this-- for me
14:03 - to put this overlapping
variable inside the bubble
14:05 - object itself.
14:06 - Why can't it keep track of that?
14:08 - And it could keep track
of that and based on it
14:11 - could just call
the show function
14:13 - with the appropriate-- the
show function itself could
14:16 - set its color, potentially.
14:17 - So that way get rid of all this
extra gobbledygook code over
14:21 - here and I'm left still just
with the b.intersects(other).
14:25 - so that's one thing I could do.
14:27 - The other thing that would
be interesting to try
14:29 - is to see if I could
reduce the amount of checks
14:34 - by just checking A versus B,
C, D. And then just B versus C,
14:38 - and D. c just versus D.
That's actually all I need.
14:41 - And doesn't really
matter in this case
14:44 - but I really should
finish this video.
14:48 - OK.
14:49 - So those are two things.
14:50 - One of those things
probably what I would really
14:53 - want to do, and need to do, is
go back to having the index.
14:56 - So as an exercise that
you might like to try
14:58 - is rewrite this code with an
I counter and a J counter.
15:03 - What you'll notice is,
you can start the J with--
15:07 - Wait, I'll do that.
15:08 - Try this.
15:09 - Write a lot of comments that
I should make another video
15:12 - to solve this and maybe I will.
15:13 - So that'll be
interesting to look at.
15:15 - You need to go get the
counter because you
15:17 - can start if I is for all of
the bubbles I'm checking I can
15:21 - start J whatever I left off.
15:26 - The other thing that's kind of
an issue here is the following.
15:32 - Let's make these
bubbles really small
15:37 - and let's add 200 of them.
15:42 - Looks like it's working.
15:44 - Let's add 2,000 of them.
15:47 - OK.
15:48 - It can not even come close.
15:50 - Let's add 1,000 of them.
15:55 - Let's just go back to
2,000 That was to extreme.
15:59 - So you can see how slow this is.
16:00 - Now, you might be
thinking, Oh, it's
16:02 - just slow to draw 1,000 things.
16:03 - Which is true but let me
show you something here.
16:07 - What if I take out this whole
thing about intersection?
16:15 - It's got no problem
animating 1,000 bubbles.
16:19 - The problem is in
this algorithm,
16:22 - if I have to check every bubble
against every other bubble,
16:31 - if there are three bubbles
that's nine checks.
16:37 - If there are 10 bubbles
that 100 cycles, 100 checks.
16:43 - If there are 100
bubbles that's 10,000.
16:49 - Just doing my math
there for a second.
16:51 - Look, this went up
by a factor of 10
16:54 - but this went up
by a factor of 100.
16:56 - And with 1,000
bubbles suddenly I
17:00 - have to do one million checks.
17:02 - So there are ways
around this and there
17:06 - are algorithms for
binning, or they have
17:09 - fancy names and quad trees.
17:11 - Someday I'll have a link
in this video description
17:14 - to some tutorials
where I go over
17:15 - how to make this
stuff more efficient.
17:17 - But one of the things you
really got to watch out for
17:19 - is this every object check
every other object is
17:22 - an n squared problem.
17:25 - As the number of
bubbles increases,
17:27 - the number of computation
cycles increases by the number
17:31 - of bubbles squared.
17:33 - So this is something you really
do have to watch out for.
17:35 - This can get quite slow and
someday Twitter's description
17:40 - maybe I'll have a link
to something which
17:42 - shows that more efficiently.
17:43 - All right I'm going to stop.
17:45 - I'm going to stop at
the end of this video.
17:47 - And if some of these
little tidbits and things
17:49 - are kind of interesting
and important,
17:50 - I will do them in
a follow up video.
17:52 - OK.
17:52 - This video is not
over, because I
17:55 - have noticed a pretty
fundamental mistake here worth
17:58 - in both of these loops
for b of bubbles where
18:02 - b is a variable that stands in
for every bubble in the array--
18:05 - just like if I'm going to
say for let i equals zero,
18:11 - i is less than bubbles.length.
18:14 - If I'm doing a loop
like this I really
18:16 - need to declare that
variable b otherwise,
18:22 - bad things could happen.
18:23 - So I should have let b
here and then of course,
18:24 - I'm doing this again
here I should say,
18:26 - let other bubbles there.
18:28 - So hopefully, you didn't
spend too much time screaming
18:30 - at your viewing device while
you're watching the video
18:35 - and there it is at the end here.
18:36 - OK.
18:37 - Thanks very much.

Cleaned transcript:

Hello. It is a bubble. In my previous video, which you may not have watched, I looked at how I could test if these two circles are overlapping. It's not just about the math to look at if circles are overlapping while that's interesting of course, the whole point of this was really to look at an object oriented sort of technique for how I might write code that just checks if any bubble intersects any other bubble. So I could say if bubble one intersects bubble two and if I had bubble 4 and bubble 3, or bubble cat, bubble dog so many possibilities. But what I want to look at in this video is what if instead of two separate variables I have an array of bubbles? Maybe there are many of them. Some of which are overlapping, some of which are not. How do I check? How do I check if let's say I call this bubble bubble A. B. C. D. E. F. G. H. I. J. K. L. I just had to go through them all. There's bubble A. I have to check is bubble A intersecting BCD EFG HIJ KLM? I have to check if bubble B is intersecting any them. How do I check if every bubble is intersecting every other bubble? Oh! OK, let's look at that. All right, so what I'm going to do first is I'm just going to change this program to have an array of bubbles. Then what I'm going to do is I'm going to create maybe just 10 bubbles to start with. Bubbles index I equals a new bubble. And I'm going to give them random locations. And maybe a random size. And I'm going to have them kind of smallish. And then I'm going to make those bubble objects. I'm going to comment this out here. And I'm now going to say, I'm going to look at Oh, oh. I don't know if I should do this in this video. Well, I got to do this in a separate video. I'm going to make a separate video which you can go back and look at. But there is a way, a new way This is a bad idea but I'm going through it anyway. Right, normally I would write this code. And I would just say bubbles index I show bubbles I move. So let's run this right now. I'm gonna get rid of this. Boom! So there we have all of my bubbles showing and moving, showing and moving. I just want to say and I will make another video about this specifically that I've been using this new loop that's also part of ES6 version of JavaScript where I could just say four b of bubbles. b.show. B.move. So these are exactly the same thing. I'm going to do this in a separate video. So while you're here with me maybe you don't want to click and watch it. This is this idea that I can I want to iterate over every element of the array. And every element of the array can be addressed by its index which is typically why I might have a counter like I to count through all the index values. 0, 1, 2, 3, 4, 5 6 7 8 9. But it's common operation to do something to every element of an array and in fact, there are lots of other ways that I'm going to show you later that you can even do more with this that I can just make a variable be called this can be anything, cat of bubbles. The point is this is saying for every element in bubbles put that element in this variable and then do some stuff and then go to the next one. You can see if the same program. The reason why I don't always use this is sometimes I want to only look at certain parts of the array. I need the index value. Sometime I need to move things around in the array, delete them. But in this case, this is going to make our life a little bit easier. So I'm going to go with it. I'm going with it. Going with it. OK, where am I? Still in this video. Now, I have all of those bubbles. How do I know to check if each one is intersecting every other one? Now, here's the thing. Let's think about this. Let's pretend, for a second, that there's just one important bubble which is a separate bubble. So I'm going to say something like kitty. No? Puppy? Unicorn? Rainbow? Unicorn? There is a unicorn bubble. And I'm going to put it in the center of the window and I'm actually going to do a silly thing where I allow myself to just control it with the mouse. Let's make sure this works right. Oh, and I've got to also What am I doing here? Lost my mind but I've got to show and move. There's a point to what I'm doing. It's going to make sense in a minute. Stay with me here. So you can see look at this. Look at this bubble that I'm moving around. There is one separate bubble that's outside of the array that I happen to be giving the mouse location. So what if I want to check if this bubble is intersecting any other bubble? Let's take a look at that. So I'm going to do this. If unicorn dot intersects b. This is now saying, Hey, I want this special bubble unicorn to check if it's intersecting anything in that array. Anything in that array. I just knocked this camera. OK. By the way, what's convenient here is I have this I already have this function changecolor which I used in a previous video. So I can use repurpose that function changecolor to if it's intersecting that bubble to change its color. So let's change its color to 100 otherwise, change its color back to zero. So what I'm doing is I'm saying if the unicorn intersects the bubble it's got a different brightness than if it does not intersect that particular bubble. And look. I guess I should make that brightness a little bit higher so you can see here. There we go. So you can see this is working but this is different than me checking all of these bubbles against each other. How am I going to do that? So what I need to do is I actually don't want anything to do with this unicorn. So let's comment this unicorn out. But the unicorn served a purpose. Because it shows us right here that this is what I want to do. For every bee in bubbles show it move it and then check if it intersects and really a different way to write this that would have made more sense is this, and what I want to do is say, don't check just that unicorn. Check every other b, every other bubble. So what if I had another loop in here? Right, there's another loop. Just look at this for a second. For every bubble, show it and move it then go through all the bubbles again and check if that bubble is intersecting any of the other Ones. It's tricky. I feel like I need to just pause and breathe for a second. But this is new to you. This is this idea of a nested loop. And I feel like I want to go over to the diagram and I want to try to redo that diagram for a second. I think I've lost which pen was the good one. Let's try this again. I'm just going to have four bubbles A, B, C, and D. I want to check is A, intersecting B, C, or D? Is B intersecting A, C, or D? Is C intersecting A, B, or D? And is D intersecting A, B, or C? Here's the thing though, even though this is what I want to check I just sort of intuitively did something here. Which is what I said is that I don't want to check if A is intersecting A? But really what I want to do, code wise, is I want to do this. I want to have A check all four then B check all four then C check off four the D check off for. But I want to make sure I ignore when it's checking against itself. And then, of course, we could optimize this even further, which maybe I'll do at the end of this video. If A is checking B, C, and d, B doesn't really need to check again. But that's only for this particular case. There could be other instances where we want to check A versus B and B versus and that means something different. So let's come back over here and see what I mean here. So first of all, I want to make sure that b does not equal other. So what I want to do is I want to check if b is intersecting every other bubble, as long as B isn't checking itself. So the problem is this actually isn't going to work. It's sort of going to work but not going to work. I'll explain to you why. The logic here is quite sound in terms of the two loops but that change color is a bit of a problem. So let's run this and see. I'm not seeing anything change color. Why not? Well, let me do something here. Let me, at least, comment about this part. So what I want is I'm only going to change color. I'm never going to change back. So you can see what's going to happen now as any two bubbles that intersect each other come on bubbles you can do it. There we go they change color. But as they separate they stay. So this is an added layer of complexity that I probably should have anticipated when I started to making this video. And in a way I could stop here and but since we're doing this, I think we've got to solve this problem. I'm here. You're here. You could go on to something else. If you want to solve this problem, how can I now have them turn off when they are not intersecting? So here's the thing. What I want to do is I can't decide whether I want to change the color to black or white right in here. Why is that? The reason is, let's consider this case where and C are overlapping. And that loop, what it's doing is it saying, is A intersecting A? Well, no don't change the color because their equal. Is A intersecting B? Well, no don't change the color because they're not intersecting. Is A intersecting C? Oh, yeah. Change the color. Change the color they're intersecting. Change the color. OK. Oh, wait. We're not finished yet. Is A intersecting D? No. No, they're not. Changing back to black. Because that else doesn't know that the previous one was intersecting. So this is an issue right so because I'm looping through with an else here, unless it's the last one I happened to check, the last one is going to change it back to black. So what I actually need to do is do this kind of trick and I'm sure there's a more elegant way of doing this but just for right now I can say, let overlapping equals false. So I'm going to assume it's not overlapping anything. I'm going to assume it's an overlapping anything. Then I'm going to check all of them and if it's overlapping at least one, I'm going to say true. What's funny about this is the more it's overlapping, I could add up a number or something. I'm going to check if it's overlapping at least one set overlapping equal to true. Once I'm done checking everything now if I do get overlapping then I can say, b.changeColor(255) otherwise, b.changeColor(0). So this is a little bit of a goofy piece of logic that's associated just with this particular scenario. But the core idea here is that I have this nested loop. I want to check this bubble every other bubble. OK. So let's run this again. Let me make the bubbles let me make more of them. Let's make 20 of them. And you can see that if it's intersecting any other one it's lighting up, if it's not it's not lighting up. So this is complete. There are some things here to change. And I'm going to just talk them through for a second and then I'll decide if I'm going to implement them. So one is, is there a way maybe it would make more sense for me to somehow I think it would make more sense for me I kind of want to do this for me to put this overlapping variable inside the bubble object itself. Why can't it keep track of that? And it could keep track of that and based on it could just call the show function with the appropriate the show function itself could set its color, potentially. So that way get rid of all this extra gobbledygook code over here and I'm left still just with the b.intersects(other). so that's one thing I could do. The other thing that would be interesting to try is to see if I could reduce the amount of checks by just checking A versus B, C, D. And then just B versus C, and D. c just versus D. That's actually all I need. And doesn't really matter in this case but I really should finish this video. OK. So those are two things. One of those things probably what I would really want to do, and need to do, is go back to having the index. So as an exercise that you might like to try is rewrite this code with an I counter and a J counter. What you'll notice is, you can start the J with Wait, I'll do that. Try this. Write a lot of comments that I should make another video to solve this and maybe I will. So that'll be interesting to look at. You need to go get the counter because you can start if I is for all of the bubbles I'm checking I can start J whatever I left off. The other thing that's kind of an issue here is the following. Let's make these bubbles really small and let's add 200 of them. Looks like it's working. Let's add 2,000 of them. OK. It can not even come close. Let's add 1,000 of them. Let's just go back to 2,000 That was to extreme. So you can see how slow this is. Now, you might be thinking, Oh, it's just slow to draw 1,000 things. Which is true but let me show you something here. What if I take out this whole thing about intersection? It's got no problem animating 1,000 bubbles. The problem is in this algorithm, if I have to check every bubble against every other bubble, if there are three bubbles that's nine checks. If there are 10 bubbles that 100 cycles, 100 checks. If there are 100 bubbles that's 10,000. Just doing my math there for a second. Look, this went up by a factor of 10 but this went up by a factor of 100. And with 1,000 bubbles suddenly I have to do one million checks. So there are ways around this and there are algorithms for binning, or they have fancy names and quad trees. Someday I'll have a link in this video description to some tutorials where I go over how to make this stuff more efficient. But one of the things you really got to watch out for is this every object check every other object is an n squared problem. As the number of bubbles increases, the number of computation cycles increases by the number of bubbles squared. So this is something you really do have to watch out for. This can get quite slow and someday Twitter's description maybe I'll have a link to something which shows that more efficiently. All right I'm going to stop. I'm going to stop at the end of this video. And if some of these little tidbits and things are kind of interesting and important, I will do them in a follow up video. OK. This video is not over, because I have noticed a pretty fundamental mistake here worth in both of these loops for b of bubbles where b is a variable that stands in for every bubble in the array just like if I'm going to say for let i equals zero, i is less than bubbles.length. If I'm doing a loop like this I really need to declare that variable b otherwise, bad things could happen. So I should have let b here and then of course, I'm doing this again here I should say, let other bubbles there. So hopefully, you didn't spend too much time screaming at your viewing device while you're watching the video and there it is at the end here. OK. Thanks very much.
