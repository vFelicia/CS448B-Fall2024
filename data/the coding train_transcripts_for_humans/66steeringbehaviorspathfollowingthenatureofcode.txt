With timestamps:

00:02 - now that we've looked at the dot product
00:04 - and we understand the concept of scalar
00:06 - projection we're ready to look at the
00:08 - path following example the path
00:10 - following steering Behavior so let's say
00:11 - for a moment we have a path and a path
00:14 - we're going to Define as a line between
00:16 - two points something like this so what
00:19 - is our goal here I mean first of all we
00:21 - should point out that if what we want is
00:24 - a shape a vehicle a creature a particle
00:28 - whatever we're calling it to follow this
00:29 - path
00:30 - you know we could actually just put it
00:32 - on this path and move it using a little
00:35 - bit of math and understanding the
00:36 - formula for a line have it locked to
00:38 - that path that's not what we're trying
00:39 - to do here we're trying to create a
00:42 - flexible
00:43 - improvisational lifelike steering
00:46 - behavior um where a vehicle is
00:48 - attempting to stay on this path so in
00:50 - order to do that I me we're we didn't I
00:52 - didn't come up with this we're going to
00:53 - look at Craig Reynolds scenario so
00:55 - actually I'm going to um yeah let's keep
00:58 - going with this so Craig Reynolds does
01:00 - few
01:00 - things there's stuff in my way over here
01:04 - um first he says okay a path has a
01:06 - radius so we're going to think of the
01:08 - path's radius as a distance from the
01:14 - line um kind of like a width of the path
01:18 - so we can call this distance from the L
01:20 - from the from the center of the path to
01:22 - each Edge the radius of that path so
01:24 - first a path has a radius then let's say
01:27 - we drop a vehicle into the this world
01:30 - with the path so we have a vehicle here
01:33 - now we can clearly see this vehicle is
01:35 - off the path so one of the things that's
01:38 - important in a uh in the steering
01:41 - behavior is to understand is the vehicle
01:43 - already on the path or is it off the
01:45 - path and actually we're going to take
01:47 - that one step further the very first
01:50 - thing in the Craig Reynold steering
01:51 - Behavior path following is
01:54 - check
01:57 - vehicles
01:58 - future
02:00 - location now it's been a few day been a
02:04 - few days since I made the last video so
02:05 - I don't particularly recall but I I'm
02:07 - pretty sure this is something we looked
02:09 - at before and if not this is something
02:11 - that appears in lots of the steering
02:13 - behaviors this idea of a vehicle being
02:15 - able to understand its future location
02:17 - how does it understand its future
02:18 - location well it knows its current
02:20 - velocity
02:22 - Vector right its current velocity Vector
02:25 - tells it how fast it's moving and in
02:27 - what direction and what a vehicle do is
02:30 - say if I were to continue moving at this
02:32 - speed in this direction five moments
02:35 - later which we could think of as five
02:36 - frames of Animation later or 10 frames
02:38 - or 25 frames I'm going to be in this
02:42 - location so this is the future
02:45 - location and when we look at the code
02:47 - well maybe we'll if we can pause for a
02:49 - moment and try to find where's the line
02:50 - of code that says here's my location
02:53 - here's my velocity add my velocity to my
02:55 - location okay now once we do this the
02:59 - next question we have to ask is
03:02 - is that
03:05 - future
03:07 - location on the path right is my future
03:12 - location on the path is it is it within
03:16 - the the the the the sort of on this
03:18 - diagram here at least the top and the
03:20 - bottom is it within the radius of the
03:21 - path I mean visually here we can see no
03:24 - it is not but let's just say for a
03:26 - moment let's have it add another vehicle
03:27 - here and say this vehicle here's its
03:30 - future location is that on the path yes
03:32 - it is so we can say here in our
03:34 - algorithm if
03:36 - yes do
03:39 - nothing apply no steering Behavior so
03:42 - Craig Reynold steering Behavior
03:43 - algorithm says if you if your future
03:46 - location if you're already on the path
03:47 - you don't need to steer I mean why would
03:48 - you bother steering I'm on the path I'm
03:49 - path following I'm already on the path
03:51 - path path is fine yeah yeah yeah I don't
03:53 - need to apply steering Force got it so
03:55 - this is good I mean if we're always on
03:57 - the path we do nothing but if the answer
04:00 - is
04:02 - no we're going to go to the next
04:05 - step which is find the normal to the
04:09 - fath path find the scalar projection to
04:11 - the path so find I'm going just call it
04:15 - the closest point on the path so if for
04:20 - some reason you skip the dot product
04:22 - video because you know all about the do
04:24 - product then um then you might want to
04:26 - go and and this is confusing to you then
04:28 - you might want to go back and watch that
04:29 - but here this is the moment where we're
04:31 - going to use that scalar projection
04:33 - technique we're going to take this
04:35 - future location and connect it to the
04:38 - path at a perpendicular angle so this is
04:41 - that point that we found in step four
04:43 - the normal the closest point on the path
04:46 - this normal point then you know you
04:49 - should think like we've done enough
04:50 - already my goodness all these steps all
04:52 - this math and diagrams getting a little
04:54 - bit complicated but we're not done yet
04:56 - Craig Reynolds take this one little step
04:58 - further
05:00 - where he says boy I don't have enough
05:02 - space here he says predict I don't know
05:06 - what I don't know let Le let me figure
05:07 - out a way to write this let's just say
05:09 - move
05:10 - along the path this is probably not how
05:14 - it's written a little bit so this is my
05:17 - my just mental um this is my way that
05:21 - I'm stating the step right now move
05:22 - along the path a little bit what we're
05:24 - what what Craig Reynold says is okay so
05:26 - that is the closest point along the path
05:28 - but this vehicle in order to sear back
05:30 - onto the path let's in the same way that
05:32 - we predicted the vehicle's future
05:34 - location let's predict the uh let's move
05:37 - a little bit further along the path to a
05:38 - future location in a way so let's say we
05:40 - move a certain distance along the path
05:42 - and now we have this is now the
05:46 - Target and that so this last step yields
05:49 - us a Target and the very last thing we
05:52 - do is
05:53 - seek that
05:56 - Target so we just use the seeking
05:58 - Behavior so in Essence the vehicle says
06:01 - where am I going am I moving on am I is
06:03 - is where I'm going going to be off the
06:05 - path if it is let me seek back onto the
06:07 - path so remember every steering Behavior
06:09 - boils down to a desired velocity right
06:13 - what is my desired velocity at this
06:15 - moment if I'm already on the path my
06:17 - desired velocity is my current velocity
06:19 - if I'm not on the path my desired
06:21 - velocity is a velocity pointing towards
06:24 - a future Target along that path so we
06:26 - have an elaborate set of steps here but
06:28 - we luckily we've learned all about
06:31 - vectors we've learned all about the dot
06:33 - product we understand about velocity we
06:35 - understand about modeling motion we can
06:37 - we have all the tools to implement this
06:39 - algorithm any
06:42 - questions okay uh right you you um you
06:45 - don't even exist at this moment okay um
06:48 - so let's take a look at a couple things
06:49 - first let's look this is Craig Reynolds
06:51 - site um you uh link below where you can
06:54 - find the the uh demonstration of the
06:57 - path falling algorithm and you can see
06:59 - in this D I call it a diagram I guess in
07:01 - this Java applet that's running online
07:03 - that red dot is that vehicle's future
07:05 - location and you can see as soon as that
07:07 - dot moves off the path the vehicle
07:09 - starts to steer otherwise it's moving at
07:11 - a constant velocity and you can also see
07:13 - on the diagram where there's these red
07:15 - and white circles which are showing the
07:17 - target along the path that it's steering
07:18 - towards so this is a great demonstration
07:21 - excuse me and um I don't think I've ever
07:24 - done that in one of these videos before
07:25 - we we like edit that out maybe you
07:26 - didn't even notice good okay so but um
07:29 - let's let's look at this what we need to
07:30 - do is look at this in processing so this
07:31 - actually this is quite complex the path
07:33 - has a lot of points it's very curvy
07:35 - there's lots of things being drawn in
07:37 - here so the first processing example
07:38 - that I'm going to show you simplifies a
07:40 - bunch of things and in
07:43 - essence the major thing that it
07:45 - simplifies is that our path right now is
07:47 - just a straight line it has a start
07:49 - point and an end point so it's not going
07:51 - to be that interesting to look at the
07:52 - result but at least we can work out the
07:54 - algorithm and as soon as you see I'm
07:56 - going to add a vehicle and you can see
07:58 - look it's steering it's that as soon as
08:00 - it's off the path right while it's
08:03 - future location while it's off the path
08:05 - it's steering and as soon as it's on the
08:07 - path you can see both of these vehicles
08:08 - are now moving at constant velocity so
08:10 - they're moving kind of slowly the path
08:12 - is a straight line they're not really
08:13 - going to go off the path anytime soon um
08:17 - so um you know but I can add a lot more
08:19 - and we can see the kind of behavior that
08:21 - we're getting when I add a lot of these
08:23 - vehicles that they're all kind of locked
08:25 - onto this path now they all have varying
08:27 - maximum speeds and maximum forces so we
08:29 - you know we almost have this like
08:32 - traffic like behavior and you can
08:33 - imagine if we could make our path more
08:36 - sophisticated and um if we could even
08:38 - add some more stuff later we're going to
08:40 - see if we can add a little separation
08:41 - force between these we've got something
08:43 - that really starts to simulate uh you
08:45 - know a crowd of vehicles on a crowd of
08:48 - of things of creatures on a path so
08:50 - let's look at a few elements in the code
08:52 - in terms of how this is being done um
08:55 - okay so element number one that I want
08:57 - to look at is that we have a new class
08:59 - the this class it's called a path class
09:01 - and this is very simple it just has a
09:03 - start point and an end point and a
09:05 - radius so this is where we're starting
09:07 - the point that I'm saying here is we
09:08 - need an object to describe the path But
09:11 - ultimately what we're going to need is
09:13 - not just a path that has two points a
09:15 - beginning at an end we're going to need
09:16 - a path that connects a series of points
09:19 - right so that the path might have a um
09:22 - you know can be much more sophisticated
09:23 - than just a single straight line but
09:25 - this is a beginning here a start and an
09:27 - end the other piece that we need to look
09:29 - at here is okay well what's going on in
09:31 - the vehicle the vehicle is the same
09:33 - thing we've always had location velocity
09:35 - acceleration a size maximum Force
09:38 - maximum speed all that stuff we used to
09:40 - have seek we had arrive we had flow
09:42 - field a flow field function now we've
09:45 - added a new function called follow and
09:48 - what does this vehicle do it follows a
09:50 - path object so now what we've said is if
09:53 - we look at the main program here that we
09:55 - said I don't know why oh they call them
09:57 - car here every car can follow the path
10:00 - so we're adding a new piece of
10:02 - functionality we're saying the vehicle
10:04 - can um follow a path right so this is
10:07 - this is where the guts this is where
10:10 - this entire algorithm that we've worked
10:12 - out is all going to be in that follow
10:14 - function so if you're looking at this on
10:15 - your own time later or you're pausing
10:17 - the video that's where you want to go
10:19 - look look at that follow function look
10:21 - at these steps find a couple lines of
10:23 - code that correspond to each one of
10:24 - these steps and I'm going to walk you
10:25 - through that right now um for a couple
10:28 - minutes okay so let's go to that
10:30 - function and let's take a look okay the
10:33 - first thing we need step we can see is
10:35 - like predicting the object's future
10:37 - location and look at how we're doing
10:39 - this we make a vector that's the
10:41 - velocity Vector copy we say hey velocity
10:44 - Vector let's make a copy of you let's
10:46 - set your length at 50 pixels and add
10:49 - that to the location right so what we've
10:52 - done is we've said hey here's an object
10:56 - give me the velocity Vector set its
10:58 - magnitude to 50 pixels and add that to
11:01 - the location that is the object's future
11:03 - location and that what we've done here
11:05 - right here in the first step so great we
11:09 - know the object's um future location we
11:12 - have to ask ourselves is that
11:14 - location um on the on is that location
11:18 - on the target well how do we know
11:22 - sorry I can't say anything right today
11:25 - we want to know is that future location
11:29 - within the radius of the path how do we
11:31 - know that we need to know the length of
11:33 - this line is the length of that line
11:35 - greater than the path less than the path
11:37 - how do we know the length of that line
11:39 - we need to find this point we need to
11:41 - find the distance between those two
11:42 - points all of that stuff is baked into
11:45 - this algorithm we're going to find the
11:46 - distance to the the we're going to find
11:48 - the distance to the path is greater than
11:50 - the radius then we're going to apply a
11:52 - steering Force how do we do that well
11:55 - look at this we have this function get
11:57 - normal point we have the we have the
11:59 - predicted future location and we have a
12:01 - and b the which which are the beginning
12:04 - and end of the path um we have the
12:08 - predicted
12:09 - location this is a and over here the end
12:13 - this is B we need to find this point so
12:16 - there's a function that does that called
12:17 - get normal Point what's in that function
12:20 - all of the math for scalar projection
12:21 - that we did in the dot product so you
12:23 - can go back and look at that if you want
12:25 - I don't I won't scroll down and look at
12:26 - it that's where all that is once we have
12:28 - that point point we can find the
12:30 - distance between the the predicted
12:32 - location and the normal point and if
12:33 - that distance is less than the radius
12:35 - seek the target along the path what's
12:37 - the target along the path it's a point a
12:39 - little bit further than that normal
12:41 - point which I'm calculating here by just
12:43 - what is the what is the vector of the
12:44 - path move a little bit further along the
12:46 - path so you can see all those steps are
12:48 - here step one step two step three step
12:50 - four and step five the very last step is
12:53 - seeking that
12:54 - Target okay so I think this pretty much
12:58 - covers the Bas basic path following
13:00 - example but we still have a bigger
13:03 - question to answer and so I I'm going to
13:06 - answer that in this
13:09 - um in this video even though it kind of
13:12 - gone I've gone on for a little bit
13:13 - longer than I had
13:15 - intended if you want a really difficult
13:18 - exercise for yourself pause the video
13:20 - now and go try to take this example
13:23 - which is uh oops oh I'm I'm in the wrong
13:26 - place I was talking for a while which is
13:27 - example 6.5
13:29 - take example 6.5 and try to expand it
13:33 - for a path that has multiple line
13:34 - segments but I'm going to talk you
13:35 - through that right now okay so we know
13:39 - now based on example 6.5 that we could
13:42 - follow this path but what if I want to
13:46 - follow this path well first of all how
13:49 - do we Define a path like this you know
13:51 - we could do all sorts of crazy curve
13:53 - interpolation formulas to make this
13:55 - really beautiful curve but the point is
13:57 - if we can draw this curve remember we're
13:59 - just trying to get a vehicle that's kind
14:00 - of looks like it's following it so
14:02 - there's no reason why our actual path
14:04 - data couldn't just be a selection of
14:07 - points that's on this curve so whether
14:10 - you're finding the Contours of an image
14:12 - or you have a data set that's a graph if
14:15 - you can get the points along a path
14:18 - right which we think of as connect which
14:20 - the datawise will just be connected
14:22 - straight lines but you could visually
14:24 - draw it however you want it's going to
14:25 - look quite a lot like it's following
14:27 - this curvy path then if we can follow a
14:30 - single line segment can't we follow a
14:32 - bunch of line segments so that's step
14:34 - number one if we look at the next
14:36 - example which I'm going to show you um
14:39 - shoot uh minimize this which H it is
14:43 - right here which is
14:46 - 6.6 the main Innovation here is our path
14:49 - class now has an array list of be points
14:53 - are you still are you awake are you
14:55 - still with me right it has an array list
14:57 - of points it's not just a start and an
14:58 - end and it's .1 2 3 point4 all
15:02 - connecting and making a big path when I
15:04 - run this example you're going to see
15:06 - that uh here um and in fact every time I
15:10 - uh press the space bar I get a different
15:12 - path and we can see look we have a bunch
15:14 - of vehicles now following this
15:16 - path okay now that
15:18 - we've uh figured out how what the path
15:21 - class has to look like let's give
15:22 - ourselves a new scenario so I'm going to
15:25 - actually draw a path as a series of
15:28 - connected points which I'm arbitrarily
15:30 - drawing here on the board it's probably
15:32 - way too
15:33 - complicated we can see this this could
15:35 - be a path that we want to follow and
15:38 - let's say I have a vehicle and my
15:40 - vehicle right now is over here and here
15:44 - is its future
15:46 - location great so what's step two once
15:49 - we have a vehicle's future location what
15:51 - we need is the normal to the path we
15:54 - need to find the distance from its
15:56 - future location to the path so let's
15:57 - work on that oh oh okay I got it I got
15:59 - it right over here connect this
16:03 - perpendicular line there's my normal
16:05 - point we're done yay okay goodbye okay
16:08 - obviously I missed something that was my
16:11 - little play acting thing here okay but
16:13 - because what what what did I miss
16:15 - actually I got one right over here
16:18 - there's a normal to the path and whoa
16:19 - look at
16:20 - this there's a normal to the path I mean
16:23 - I didn't draw that perfectly there's one
16:24 - an even weirder like let's uh or like
16:27 - let's let's extend let's pretend this
16:29 - line was like an infinite line look
16:31 - there's another normal to the path
16:33 - really over there so like there's all
16:35 - these normals to the path because
16:37 - there's all of these line segments I
16:38 - could make one for this one for this one
16:40 - for this one for this one if I extended
16:42 - this out what do we follow how do we
16:44 - pick this oh my God we're so stressed
16:48 - out I think we're going to be fine right
16:50 - because we can come up with something I
16:51 - mean first of all we could just read
16:53 - Craig Reynold's materials to be like
16:54 - thank you you came up with it but
16:56 - there's really it's not too hard to
16:57 - think of it the whole point of finding
16:58 - the normal to the path was to find the
17:01 - closest point on the path to my future
17:03 - location well we have a whole bunch of
17:05 - options why don't we find the one with
17:06 - the least distance so if we pick the one
17:08 - with the least distance which clearly
17:10 - from this diagram we can see is this one
17:12 - the other thing is we can disqualify any
17:14 - where the normal is not actually on the
17:16 - actual path even though we can think of
17:17 - all these lines so this one can be
17:19 - disqualified instantly and now we have
17:21 - to pick between these three there's four
17:23 - and five which we can disqualify we can
17:25 - see that this one has the shortest
17:26 - distance so this is actually excuse me
17:29 - the Target that we're going to seek
17:30 - we're not seeking a Target over here or
17:32 - over there so this is a methodology we
17:35 - can employ and is in fact the
17:38 - methodology that you will see in my
17:39 - processing example what we have to do is
17:41 - say look at this line segment find the
17:43 - normal look at this line segment find
17:45 - the normal look at this one find the
17:46 - normal this one find the normal this one
17:47 - find the normal this one find the normal
17:49 - all of those distances which one is the
17:51 - shortest pick that one to seek so let's
17:53 - see if we go look in our algorithm let's
17:55 - see what's actually changed in the
17:57 - code okay okay so this was the example
18:00 - we were running let me uh turn it off
18:02 - for a second and go to the code and we
18:04 - can find sorry the
18:06 - um uh the uh
18:10 - uh excuse me the I'm looking for the
18:13 - follow function Talk Amongst yourself
18:15 - for a minute here we go right so we have
18:17 - the same old thing where first we need
18:18 - to get our future location by making a
18:20 - copy of veloc velocity moving forward
18:22 - from our location we have that future
18:24 - location look what's going on here now
18:26 - we we're doing the exactly the same than
18:29 - we did before but points A and B aren't
18:31 - just the start and the end points A and
18:34 - B are Zer and one one and two two and
18:38 - three three and four I and I + 1 so
18:41 - we're going to do that find the normal
18:43 - point and find that distance for every
18:46 - single one and what we're looking for is
18:48 - the world record distance so if you walk
18:50 - through this algorithm you see every
18:52 - time we're going to say hey is my
18:54 - distance less than the world record
18:56 - distance if it is the world record is my
18:59 - distance and that normal point is the
19:00 - one we're going to save when we're done
19:02 - with this algorithm then we just say hey
19:06 - um as long as remember that distance is
19:10 - greater than the radius as long as we're
19:11 - actually off the path let's seek that
19:14 - Target so um um so that's the full
19:18 - algorithm it's really if you look at
19:19 - these two examples they really are
19:21 - exactly the same the difference is in
19:23 - the first example we're just looking at
19:25 - one line segment in the second example
19:27 - we're looking at at a series of line
19:30 - segments and finding the one with the
19:31 - shortest distance and if we run this
19:33 - again um we can see here that uh we get
19:39 - our vehicles following the path and um
19:42 - we can add a lot of them we can keep
19:44 - what's kind of nice about this which
19:45 - didn't occur to me is that if you have a
19:48 - path that's changing the vehicles will
19:50 - adjust which is kind of a nice behavior
19:52 - somewhat similar there's a lot of
19:53 - similarities here to the flow field
19:55 - following right um we really have a set
19:58 - of vectors so you can almost think of
19:59 - this as a flow field but it's just
20:00 - defined by um a path instead so uh what
20:05 - could you do with this boy probably a
20:07 - lot of things you probably have a lot of
20:08 - ideas let me give you a couple um
20:10 - suggestions number one is try making
20:12 - this path actually like move with
20:14 - pearing noise or something so think of
20:15 - the points on these path as uh as as
20:18 - entities with location velocity
20:20 - acceleration like what if you took like
20:22 - a springy something from toxic lives
20:24 - which is like a springy wavy thing and
20:26 - had Things fall in that's probably
20:28 - pretty complic it's interesting idea
20:30 - another thing you could do is find trace
20:31 - the Contours use Edge detection blob
20:33 - detection find the Contours of an image
20:36 - um in a magical place I would like point
20:38 - you to a video All About blob detection
20:40 - which may exist someday and I'll like
20:42 - dub my voice over here and now go
20:44 - through this video but um because I
20:46 - don't know why you put your hands over
20:47 - your mouth when you dub anyway um so um
20:50 - but mostly I would suggest um another
20:51 - thing that you really might want to play
20:53 - with is try um try lots of variations
20:56 - making the radius bigger the radius
20:58 - smaller smaller CH do things with the
21:00 - vehicle in terms of affecting its
21:02 - maximum force and maximum speed see what
21:04 - type of um see how good and how bad you
21:07 - can get something to follow a path
21:08 - another thing you could do is can you
21:09 - make a closed loop path right you can
21:11 - make a racing simulation essentially by
21:15 - having a path that closes its loop at
21:17 - the end so right now this path has a
21:18 - beginning and an end and the vehicles
21:20 - wrap around but what if you instead had
21:22 - a a circular path so try that I'm just
21:24 - rambling okay good night and good luck
21:27 - or just I don't know it's like 11:30 in
21:29 - the morning I would like to take a nap
21:30 - but it's not time to say good night okay
21:32 - uh next video is coming soon

Cleaned transcript:

now that we've looked at the dot product and we understand the concept of scalar projection we're ready to look at the path following example the path following steering Behavior so let's say for a moment we have a path and a path we're going to Define as a line between two points something like this so what is our goal here I mean first of all we should point out that if what we want is a shape a vehicle a creature a particle whatever we're calling it to follow this path you know we could actually just put it on this path and move it using a little bit of math and understanding the formula for a line have it locked to that path that's not what we're trying to do here we're trying to create a flexible improvisational lifelike steering behavior um where a vehicle is attempting to stay on this path so in order to do that I me we're we didn't I didn't come up with this we're going to look at Craig Reynolds scenario so actually I'm going to um yeah let's keep going with this so Craig Reynolds does few things there's stuff in my way over here um first he says okay a path has a radius so we're going to think of the path's radius as a distance from the line um kind of like a width of the path so we can call this distance from the L from the from the center of the path to each Edge the radius of that path so first a path has a radius then let's say we drop a vehicle into the this world with the path so we have a vehicle here now we can clearly see this vehicle is off the path so one of the things that's important in a uh in the steering behavior is to understand is the vehicle already on the path or is it off the path and actually we're going to take that one step further the very first thing in the Craig Reynold steering Behavior path following is check vehicles future location now it's been a few day been a few days since I made the last video so I don't particularly recall but I I'm pretty sure this is something we looked at before and if not this is something that appears in lots of the steering behaviors this idea of a vehicle being able to understand its future location how does it understand its future location well it knows its current velocity Vector right its current velocity Vector tells it how fast it's moving and in what direction and what a vehicle do is say if I were to continue moving at this speed in this direction five moments later which we could think of as five frames of Animation later or 10 frames or 25 frames I'm going to be in this location so this is the future location and when we look at the code well maybe we'll if we can pause for a moment and try to find where's the line of code that says here's my location here's my velocity add my velocity to my location okay now once we do this the next question we have to ask is is that future location on the path right is my future location on the path is it is it within the the the the the sort of on this diagram here at least the top and the bottom is it within the radius of the path I mean visually here we can see no it is not but let's just say for a moment let's have it add another vehicle here and say this vehicle here's its future location is that on the path yes it is so we can say here in our algorithm if yes do nothing apply no steering Behavior so Craig Reynold steering Behavior algorithm says if you if your future location if you're already on the path you don't need to steer I mean why would you bother steering I'm on the path I'm path following I'm already on the path path path is fine yeah yeah yeah I don't need to apply steering Force got it so this is good I mean if we're always on the path we do nothing but if the answer is no we're going to go to the next step which is find the normal to the fath path find the scalar projection to the path so find I'm going just call it the closest point on the path so if for some reason you skip the dot product video because you know all about the do product then um then you might want to go and and this is confusing to you then you might want to go back and watch that but here this is the moment where we're going to use that scalar projection technique we're going to take this future location and connect it to the path at a perpendicular angle so this is that point that we found in step four the normal the closest point on the path this normal point then you know you should think like we've done enough already my goodness all these steps all this math and diagrams getting a little bit complicated but we're not done yet Craig Reynolds take this one little step further where he says boy I don't have enough space here he says predict I don't know what I don't know let Le let me figure out a way to write this let's just say move along the path this is probably not how it's written a little bit so this is my my just mental um this is my way that I'm stating the step right now move along the path a little bit what we're what what Craig Reynold says is okay so that is the closest point along the path but this vehicle in order to sear back onto the path let's in the same way that we predicted the vehicle's future location let's predict the uh let's move a little bit further along the path to a future location in a way so let's say we move a certain distance along the path and now we have this is now the Target and that so this last step yields us a Target and the very last thing we do is seek that Target so we just use the seeking Behavior so in Essence the vehicle says where am I going am I moving on am I is is where I'm going going to be off the path if it is let me seek back onto the path so remember every steering Behavior boils down to a desired velocity right what is my desired velocity at this moment if I'm already on the path my desired velocity is my current velocity if I'm not on the path my desired velocity is a velocity pointing towards a future Target along that path so we have an elaborate set of steps here but we luckily we've learned all about vectors we've learned all about the dot product we understand about velocity we understand about modeling motion we can we have all the tools to implement this algorithm any questions okay uh right you you um you don't even exist at this moment okay um so let's take a look at a couple things first let's look this is Craig Reynolds site um you uh link below where you can find the the uh demonstration of the path falling algorithm and you can see in this D I call it a diagram I guess in this Java applet that's running online that red dot is that vehicle's future location and you can see as soon as that dot moves off the path the vehicle starts to steer otherwise it's moving at a constant velocity and you can also see on the diagram where there's these red and white circles which are showing the target along the path that it's steering towards so this is a great demonstration excuse me and um I don't think I've ever done that in one of these videos before we we like edit that out maybe you didn't even notice good okay so but um let's let's look at this what we need to do is look at this in processing so this actually this is quite complex the path has a lot of points it's very curvy there's lots of things being drawn in here so the first processing example that I'm going to show you simplifies a bunch of things and in essence the major thing that it simplifies is that our path right now is just a straight line it has a start point and an end point so it's not going to be that interesting to look at the result but at least we can work out the algorithm and as soon as you see I'm going to add a vehicle and you can see look it's steering it's that as soon as it's off the path right while it's future location while it's off the path it's steering and as soon as it's on the path you can see both of these vehicles are now moving at constant velocity so they're moving kind of slowly the path is a straight line they're not really going to go off the path anytime soon um so um you know but I can add a lot more and we can see the kind of behavior that we're getting when I add a lot of these vehicles that they're all kind of locked onto this path now they all have varying maximum speeds and maximum forces so we you know we almost have this like traffic like behavior and you can imagine if we could make our path more sophisticated and um if we could even add some more stuff later we're going to see if we can add a little separation force between these we've got something that really starts to simulate uh you know a crowd of vehicles on a crowd of of things of creatures on a path so let's look at a few elements in the code in terms of how this is being done um okay so element number one that I want to look at is that we have a new class the this class it's called a path class and this is very simple it just has a start point and an end point and a radius so this is where we're starting the point that I'm saying here is we need an object to describe the path But ultimately what we're going to need is not just a path that has two points a beginning at an end we're going to need a path that connects a series of points right so that the path might have a um you know can be much more sophisticated than just a single straight line but this is a beginning here a start and an end the other piece that we need to look at here is okay well what's going on in the vehicle the vehicle is the same thing we've always had location velocity acceleration a size maximum Force maximum speed all that stuff we used to have seek we had arrive we had flow field a flow field function now we've added a new function called follow and what does this vehicle do it follows a path object so now what we've said is if we look at the main program here that we said I don't know why oh they call them car here every car can follow the path so we're adding a new piece of functionality we're saying the vehicle can um follow a path right so this is this is where the guts this is where this entire algorithm that we've worked out is all going to be in that follow function so if you're looking at this on your own time later or you're pausing the video that's where you want to go look look at that follow function look at these steps find a couple lines of code that correspond to each one of these steps and I'm going to walk you through that right now um for a couple minutes okay so let's go to that function and let's take a look okay the first thing we need step we can see is like predicting the object's future location and look at how we're doing this we make a vector that's the velocity Vector copy we say hey velocity Vector let's make a copy of you let's set your length at 50 pixels and add that to the location right so what we've done is we've said hey here's an object give me the velocity Vector set its magnitude to 50 pixels and add that to the location that is the object's future location and that what we've done here right here in the first step so great we know the object's um future location we have to ask ourselves is that location um on the on is that location on the target well how do we know sorry I can't say anything right today we want to know is that future location within the radius of the path how do we know that we need to know the length of this line is the length of that line greater than the path less than the path how do we know the length of that line we need to find this point we need to find the distance between those two points all of that stuff is baked into this algorithm we're going to find the distance to the the we're going to find the distance to the path is greater than the radius then we're going to apply a steering Force how do we do that well look at this we have this function get normal point we have the we have the predicted future location and we have a and b the which which are the beginning and end of the path um we have the predicted location this is a and over here the end this is B we need to find this point so there's a function that does that called get normal Point what's in that function all of the math for scalar projection that we did in the dot product so you can go back and look at that if you want I don't I won't scroll down and look at it that's where all that is once we have that point point we can find the distance between the the predicted location and the normal point and if that distance is less than the radius seek the target along the path what's the target along the path it's a point a little bit further than that normal point which I'm calculating here by just what is the what is the vector of the path move a little bit further along the path so you can see all those steps are here step one step two step three step four and step five the very last step is seeking that Target okay so I think this pretty much covers the Bas basic path following example but we still have a bigger question to answer and so I I'm going to answer that in this um in this video even though it kind of gone I've gone on for a little bit longer than I had intended if you want a really difficult exercise for yourself pause the video now and go try to take this example which is uh oops oh I'm I'm in the wrong place I was talking for a while which is example 6.5 take example 6.5 and try to expand it for a path that has multiple line segments but I'm going to talk you through that right now okay so we know now based on example 6.5 that we could follow this path but what if I want to follow this path well first of all how do we Define a path like this you know we could do all sorts of crazy curve interpolation formulas to make this really beautiful curve but the point is if we can draw this curve remember we're just trying to get a vehicle that's kind of looks like it's following it so there's no reason why our actual path data couldn't just be a selection of points that's on this curve so whether you're finding the Contours of an image or you have a data set that's a graph if you can get the points along a path right which we think of as connect which the datawise will just be connected straight lines but you could visually draw it however you want it's going to look quite a lot like it's following this curvy path then if we can follow a single line segment can't we follow a bunch of line segments so that's step number one if we look at the next example which I'm going to show you um shoot uh minimize this which H it is right here which is 6.6 the main Innovation here is our path class now has an array list of be points are you still are you awake are you still with me right it has an array list of points it's not just a start and an end and it's .1 2 3 point4 all connecting and making a big path when I run this example you're going to see that uh here um and in fact every time I uh press the space bar I get a different path and we can see look we have a bunch of vehicles now following this path okay now that we've uh figured out how what the path class has to look like let's give ourselves a new scenario so I'm going to actually draw a path as a series of connected points which I'm arbitrarily drawing here on the board it's probably way too complicated we can see this this could be a path that we want to follow and let's say I have a vehicle and my vehicle right now is over here and here is its future location great so what's step two once we have a vehicle's future location what we need is the normal to the path we need to find the distance from its future location to the path so let's work on that oh oh okay I got it I got it right over here connect this perpendicular line there's my normal point we're done yay okay goodbye okay obviously I missed something that was my little play acting thing here okay but because what what what did I miss actually I got one right over here there's a normal to the path and whoa look at this there's a normal to the path I mean I didn't draw that perfectly there's one an even weirder like let's uh or like let's let's extend let's pretend this line was like an infinite line look there's another normal to the path really over there so like there's all these normals to the path because there's all of these line segments I could make one for this one for this one for this one for this one if I extended this out what do we follow how do we pick this oh my God we're so stressed out I think we're going to be fine right because we can come up with something I mean first of all we could just read Craig Reynold's materials to be like thank you you came up with it but there's really it's not too hard to think of it the whole point of finding the normal to the path was to find the closest point on the path to my future location well we have a whole bunch of options why don't we find the one with the least distance so if we pick the one with the least distance which clearly from this diagram we can see is this one the other thing is we can disqualify any where the normal is not actually on the actual path even though we can think of all these lines so this one can be disqualified instantly and now we have to pick between these three there's four and five which we can disqualify we can see that this one has the shortest distance so this is actually excuse me the Target that we're going to seek we're not seeking a Target over here or over there so this is a methodology we can employ and is in fact the methodology that you will see in my processing example what we have to do is say look at this line segment find the normal look at this line segment find the normal look at this one find the normal this one find the normal this one find the normal this one find the normal all of those distances which one is the shortest pick that one to seek so let's see if we go look in our algorithm let's see what's actually changed in the code okay okay so this was the example we were running let me uh turn it off for a second and go to the code and we can find sorry the um uh the uh uh excuse me the I'm looking for the follow function Talk Amongst yourself for a minute here we go right so we have the same old thing where first we need to get our future location by making a copy of veloc velocity moving forward from our location we have that future location look what's going on here now we we're doing the exactly the same than we did before but points A and B aren't just the start and the end points A and B are Zer and one one and two two and three three and four I and I + 1 so we're going to do that find the normal point and find that distance for every single one and what we're looking for is the world record distance so if you walk through this algorithm you see every time we're going to say hey is my distance less than the world record distance if it is the world record is my distance and that normal point is the one we're going to save when we're done with this algorithm then we just say hey um as long as remember that distance is greater than the radius as long as we're actually off the path let's seek that Target so um um so that's the full algorithm it's really if you look at these two examples they really are exactly the same the difference is in the first example we're just looking at one line segment in the second example we're looking at at a series of line segments and finding the one with the shortest distance and if we run this again um we can see here that uh we get our vehicles following the path and um we can add a lot of them we can keep what's kind of nice about this which didn't occur to me is that if you have a path that's changing the vehicles will adjust which is kind of a nice behavior somewhat similar there's a lot of similarities here to the flow field following right um we really have a set of vectors so you can almost think of this as a flow field but it's just defined by um a path instead so uh what could you do with this boy probably a lot of things you probably have a lot of ideas let me give you a couple um suggestions number one is try making this path actually like move with pearing noise or something so think of the points on these path as uh as as entities with location velocity acceleration like what if you took like a springy something from toxic lives which is like a springy wavy thing and had Things fall in that's probably pretty complic it's interesting idea another thing you could do is find trace the Contours use Edge detection blob detection find the Contours of an image um in a magical place I would like point you to a video All About blob detection which may exist someday and I'll like dub my voice over here and now go through this video but um because I don't know why you put your hands over your mouth when you dub anyway um so um but mostly I would suggest um another thing that you really might want to play with is try um try lots of variations making the radius bigger the radius smaller smaller CH do things with the vehicle in terms of affecting its maximum force and maximum speed see what type of um see how good and how bad you can get something to follow a path another thing you could do is can you make a closed loop path right you can make a racing simulation essentially by having a path that closes its loop at the end so right now this path has a beginning and an end and the vehicles wrap around but what if you instead had a a circular path so try that I'm just rambling okay good night and good luck or just I don't know it's like 1130 in the morning I would like to take a nap but it's not time to say good night okay uh next video is coming soon
