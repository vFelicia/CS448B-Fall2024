With timestamps:

00:00 - hello welcome to another coding
00:02 - challenge video in this coding challenge
00:04 - I'm going to look at something called
00:06 - lexicographic ordering and look at an
00:10 - algorithm for solving lexicographic
00:13 - which for some reason I can't say but
00:14 - you could say lexical for short so I'm
00:16 - just a lexical ordering just kind of
00:18 - like alphabetical ordering and we're
00:19 - gonna look at how that works
00:21 - make a little algorithm that solves it
00:22 - you might have some creative ideas about
00:24 - how to visualize it or make something
00:25 - out of it and then I'm going to apply it
00:27 - to the traveling salesperson problem to
00:29 - look at how we can look at every
00:30 - possible path through a set of cities ok
00:33 - so let's just talk for a second about
00:34 - what lexical thank you very much
00:36 - ordering is and I'm going to come and do
00:38 - that over here so let's just say I kind
00:40 - of did this before but let's just say I
00:43 - have the letters a B and C so these are
00:47 - actually sorted in alphabetical order
00:50 - right a comes before B B comes before C
00:52 - but what if I want to know the next
00:56 - ordering of these that's also the next
00:59 - order in alphabetical order like I could
01:01 - say like here's another order C ba or
01:04 - here's another order be AC but neither
01:07 - of these are the next order in
01:08 - alphabetical order now I could tell you
01:10 - that the next ordering in alphabetic
01:13 - order is a CB right because a should
01:15 - come first
01:16 - well B already came second the only
01:18 - other possibility is C and then the only
01:20 - thing left is B and we could think okay
01:22 - well I I tried all the a possibilities
01:24 - so the next in alphabetical order and by
01:26 - the way let's go order in alphabetical
01:28 - order or very similar concept is a sort
01:30 - of subtle distinction which has to do
01:31 - with how numbers or dates are kind of
01:33 - treated in the way they might sort
01:34 - things in kind of the computer way this
01:37 - is this is by the way my version of the
01:39 - computer away so but I'll let you read
01:42 - about that in this page that I'm to show
01:43 - you that has more information so so I
01:47 - could say B and then what would be next
01:48 - in alphabetic order would be a and then
01:50 - all I have left to see so B is next and
01:52 - then C and then a and then C then a then
01:54 - B then C then B then a so I could do
01:57 - this rather easily myself but you know
02:00 - if I have ABCD
02:02 - EF GHI is going to be a little bit
02:05 - harder although not that much harder
02:06 - because honestly it's just going to be a
02:08 - b c d e f g i than h you could sort of
02:12 - imagine and there's this swapping so
02:13 - what we need is an algorithm to do this
02:15 - for us and then print out every single
02:17 - possible ordering because what I'm
02:19 - ultimately going to do with this is
02:20 - actually use these as indices into an
02:23 - array that has different cities in it so
02:26 - you know Baltimore New York London I
02:29 - don't know I shouldn't be so US Europe
02:32 - centric everybody in the comments give
02:35 - me some better cities to use in my next
02:36 - example but so you could see could
02:39 - imagine is gonna be 0 1 2 0 2 1 1 0 to 1
02:44 - to 0 2 I don't know if I'm getting this
02:46 - right to 0 1 2 1 0 something like that
02:50 - so hopefully I got that right but this
02:51 - is what I want to do and I want to try
02:52 - the cities in all of these orders so
02:54 - let's go back over here and I found this
02:57 - wonderful page on the subway this for
02:59 - critic that I read in my google search
03:02 - which was a Cora post it says how would
03:04 - you explain an algorithm generates
03:06 - permutations using lexicographic
03:08 - ordering so the wonderful thing about
03:10 - this answer by Michael for a sec check
03:13 - which I'm sure I'm not pronouncing
03:14 - correctly somebody will have two people
03:17 - to give me great cities Kuala Lumpur Rio
03:20 - Coventry UK so let's be an international
03:24 - coding ring vote here in this thing that
03:27 - I'm doing in YouTube but so for the
03:28 - impatient here's the actual algorithm so
03:30 - what I'm actually going to do in this
03:32 - video is just kind of read through this
03:35 - algorithm and sort of talk you through
03:37 - it and implement it and I would suggest
03:38 - to you that if you want to find more
03:41 - about it you can kind of read further
03:42 - down this page where the author provides
03:45 - an example scenario of an example order
03:48 - how the algorithm plays out with that
03:49 - example and then also derives this
03:51 - algorithm but I'm going to kind of leave
03:53 - that aside as kind of and I just want to
03:55 - kind of like I think you might have an
03:56 - intuitive or kind of sense of how it
03:58 - works just by implementing it
03:59 - so first let's get ourselves set up to
04:01 - do this what I want is to have an array
04:05 - I'm going to start with an array I'm
04:08 - going to call it Val's
04:10 - yeah that's fine and I'm going to have
04:12 - it be 0 1 2 we're just going to start
04:14 - with 3 number
04:15 - so we could see that it works and what I
04:20 - want to do now in draw is first I want
04:24 - to what happens if I do
04:27 - console.log Mouse so let's just look at
04:30 - that and run this we can say okay so
04:34 - that's good I'm getting I'm seeing here
04:36 - in the console the current order of the
04:38 - array so I want to see it as I do each
04:40 - permutation one at a time so if I go
04:43 - back to this explanation first find the
04:45 - London Zoo mint on this you can see it
04:47 - better find the largest X such that P
04:50 - index X is less than P index X plus one
04:53 - okay so what does that mean I often we
04:56 - think of eye as the index not X but
04:58 - we're looking for is whit which where is
05:00 - there something in the array the highest
05:03 - the element closest to the end of the
05:06 - array where it's number is less than the
05:08 - last number so and intuitively right now
05:11 - we could say like which one is that it's
05:12 - this one right and if honestly if this
05:15 - were the array three four five six seven
05:18 - it would be this one right right now the
05:20 - last element of the array who is that is
05:24 - less than the one next to it is when
05:26 - instant order is always the second to
05:28 - last one but we should write an
05:29 - algorithm to make sure of that so the
05:31 - first thing I want to say is largest I
05:33 - largest I I'm going to assume it's zero
05:36 - and then I'm going to loop through the
05:41 - entire array and what I want to do is
05:45 - say okay if Val's index I is less than
05:49 - Val I plus one then largest I equals I
05:55 - and I can't go to the very end right so
05:58 - I want to find what is the largest and
06:00 - you know what I really need to do I want
06:02 - to start with this as negative one
06:04 - because I want to start with an invalid
06:06 - index because if I don't find anything
06:08 - that's going to be important if we go
06:10 - back to this algorithm if there is no
06:12 - such X that means we finished so what I
06:15 - wanted to add here is say all right here
06:17 - after I do this loop if largest I equals
06:22 - negative one
06:23 - no loop you know console dot log
06:27 - finished
06:28 - no loop is a function in p5 that just
06:31 - stops this animation loop from from
06:33 - going okay so we can see that here I've
06:35 - kind of implemented let me let me I've
06:37 - implemented step one of the algorithm
06:40 - and let me just in the code here just
06:43 - add a link to this article that I'm
06:45 - using just so I don't forget to do that
06:46 - later okay now find the largest Y or you
06:52 - might think sort of in this cavity use J
06:54 - because I'm used to using IJ as index
06:55 - values find the largest Y such that the
06:59 - index X that I just found that's the
07:03 - largest one is less than Y so let's
07:06 - think about that right so let's say I
07:07 - think I might need a diagram for this oh
07:10 - yeah I have my uh so let's say we on
07:17 - let's say we have a bunch of numbers 0 1
07:20 - 2 5 6 8 4 3 right let's find the first
07:28 - let's find that largest X which I'm
07:30 - calling largest I such that the such
07:35 - that the the the value in the array the
07:39 - index is less than less than the one
07:42 - after it which would be here so 0 1 2 3
07:46 - 4 so this is 4 now so what's the next
07:51 - step
07:52 - whoops the next step is find the largest
07:56 - Y such that P of X is less than P of Y
08:01 - not of AP index X so I now need to find
08:04 - whichever one in here is high it is
08:08 - actually less than this number 6 and
08:11 - that's actually here right this one is
08:14 - the largest one that's less than the
08:15 - number 6 so so if we come back to the
08:19 - algorithm and I implement that what I
08:22 - want to do is for I need to go through
08:26 - and I'm going to use J
08:31 - I'm going to go through the array again
08:34 - and I'm going to say a largest J equals
08:39 - a negative one so what I want to do is
08:44 - hear the largest y such that P of X is
08:48 - less than P of Y P index X so if if vows
08:57 - index J is less than Val index largest I
09:03 - which was X then largest J equals J so
09:09 - now I have largest I and largest J I
09:12 - have both of those and I don't think I
09:14 - need length minus 1 here because I can
09:16 - check all of them we'll find out now I
09:20 - swap P index X and P index Y now you
09:23 - might have come to this video without
09:25 - watching the previous one I made on
09:27 - traveling salesperson but in that video
09:30 - I look at a quick little algorithm for
09:32 - swapping two elements of an array and
09:34 - here's the function that does that right
09:35 - I have a function called swap I receive
09:38 - an array I just receive an eye in a J I
09:40 - save the value that's at a index I I put
09:43 - the value that's a J and I and I put the
09:45 - value that was a tie in J so now all I
09:47 - need to do is say swap largest I largest
09:53 - J right and then reverse oh boy so this
09:57 - is kind of a funny thing but what I also
09:59 - now need to do is reverse everything
10:01 - that's between X plus 1 to N now how do
10:06 - I do that this is going to be a little
10:08 - bit goofy I'm back from thinking about
10:11 - and talking with the chat about how to
10:14 - do this last step reverse so but first
10:17 - first let me let's see we did we did
10:19 - steps to in steps 3 let me at least add
10:21 - some this is a step 2 and this is now
10:26 - step 3 and what I want to do for step 4
10:30 - let me write this out is reverse from X
10:35 - Oh largest I plus 1 to the end right so
10:41 - what I want to do is reverse everything
10:43 - that's from largest
10:45 - I plus one to the end of the array okay
10:48 - so one thing that I could do I think a
10:49 - way that I could do this thank you to
10:51 - the chat again is I can say I'm just
10:54 - gonna call this end array and I'm going
10:57 - to say I'm going to say Val splice now
11:00 - if you remember I don't know what you
11:02 - remember this from but if I go back to
11:04 - the my array documentation page I'm
11:06 - going to look at splice not slice splice
11:09 - what splice does is it that takes a
11:13 - start index and then an amount of things
11:15 - you want to delete out of the array but
11:17 - I'm not only am i deleting them out of
11:18 - the array I'm actually getting them as a
11:20 - separate array so what I can actually do
11:22 - is say Val's dot splice from largest I
11:25 - and then how many things do I want I
11:28 - want I think that the length is the
11:32 - arrays length minus largest I is that
11:36 - right like if the array has five things
11:38 - in it and I want and my largest I is the
11:42 - 0 1 2 3 4 is at 2 5 minus index - ooh
11:49 - minus 1 right Val's dot length - largest
11:54 - I minus 1 I believe is right that's the
11:57 - length that I want to splice out let's
12:01 - let's let's confirm that let's let's
12:03 - debug this to be sure what uh you know 5
12:07 - 6 7 8 9 and what I want to do is I want
12:10 - to say a dot splice what happens by the
12:13 - way if I just give it the index like 2
12:15 - so 2 should be 0 1 2 5 6 & 7
12:19 - ah so I don't even need that last
12:22 - argument splice will do it for me
12:24 - I don't need to calculate the length
12:25 - brilliant then I could say end array dot
12:29 - reverse now does that actually change
12:31 - the array itself hey dot reverse
12:37 - whoa-oh-oh a is that ah
12:41 - start over let's worth it up hey is this
12:44 - array now B is a dot splice - so now I
12:49 - have that as B we may need to make this
12:51 - bigger so you can see this now I want to
12:53 - try to reverse that B dot reverse but
12:58 - what is the
12:59 - be uh it does actually reverse the array
13:00 - itself not just create a new array
13:02 - that's returned back so now all I need
13:04 - to do is say end array reverse and then
13:09 - what I can do is say valves dot append I
13:11 - could just put it back so what I did is
13:13 - I took the end of the array off I
13:15 - reversed it and then I put the end of
13:18 - the right back on which is essentially
13:20 - doing exactly this piece of the
13:23 - algorithm reverse X plus 1 and did I add
13:26 - the plus 1 in there I think I did uh
13:28 - plus 1 okay so I need to add that plus 1
13:33 - in there so this is done I've done step
13:34 - one step two step three and step four
13:37 - now what we should be able to do is look
13:39 - at those values and whoops and I should
13:45 - be able to run this again and sort of
13:48 - see what happens
13:49 - whoops ah Vale's dot append is not a
13:52 - function hey append is not a is not an
13:56 - array push must be push there's no
13:59 - append function must be push push must
14:01 - you must be allowed to push in a full
14:03 - array right the elements to add to the
14:05 - end of the array and you can push you
14:08 - probably can push another array right
14:10 - I'm pretty sure you can't let's try push
14:13 - and see if this works and okay this is
14:19 - too many things for me to see let's just
14:21 - do it with let's run a quick little test
14:23 - here and oh no no no no so how do I
14:30 - contact at could cat because you can see
14:33 - what it did it's actually just pushed
14:34 - the full array on there which is not
14:36 - what I want to do so let's go back and
14:38 - fix that it would be nice if I knew what
14:39 - I was doing wouldn't it
14:41 - I guess you're seeing the process of how
14:42 - things are figured out by people who
14:44 - don't know what they're doing uh nope
14:46 - nope nope Vale's dot can cat let's look
14:50 - at King cat we're getting close can cat
14:54 - the concat method returns a new array so
14:58 - I've got to set it back equal to itself
15:00 - there's probably some sort of slightly
15:02 - more efficient way of doing this but
15:04 - this will do just fine for us right now
15:06 - there we go up all right so
15:09 - I'm getting something but I'm missing
15:12 - something so uh I have got to I could
15:17 - use push dot apply but I'm trying to so
15:19 - there's some fancy JavaScript ways I
15:21 - could do this but I'm going to I'm going
15:22 - to try to kind of get around those ways
15:25 - so something is going wrong here so what
15:29 - I want to do is I actually want to take
15:31 - this out what I want to actually just
15:35 - say a no loop and I want to be able to
15:40 - look at this running one at a time so a
15:41 - way that I can in p5 by the way is is
15:44 - run each draw loop one at a time one as
15:46 - I can just say redraw all right I
15:50 - thought I could at least oh I have to I
15:54 - have no loop in here let's take that out
15:56 - do I have console dot log maybe I took
15:59 - out the console dot log whoops console
16:01 - dot log Val's yeah okay so I'm getting
16:07 - the same array each time and maybe the
16:11 - call to swap is incorrect to someone in
16:13 - the chat is saying so let me look this
16:14 - up this I'm now in a debugging portion
16:17 - which maybe will edit this should get
16:19 - edited out but I guess it's staying in
16:21 - swap so let's look and see what we're
16:24 - getting if we're getting values that
16:25 - make sense so the first thing I want to
16:27 - look at is largest I and then I want to
16:33 - look at largest J which is probably I'm
16:37 - guessing I did something wrong there and
16:41 - then I want to look so let's just look
16:43 - at that for a second so the largest eye
16:46 - is one which makes sense that's the
16:49 - largest index where it is less than two
16:55 - now the largest J is if we look at the
16:59 - algorithm is the largest J such that ah
17:03 - I have my code is wrong look at this
17:07 - this should be largest I is less than J
17:11 - if we look at that algorithm again that
17:13 - makes total sense that I'm looking for
17:15 - the element of the array furthest along
17:17 - that's actually greater than the one
17:19 - that I just found so that should that
17:21 - should fix things
17:23 - here and then if I say redraw okay
17:28 - so that's a little bit better I made an
17:31 - improvement here that I'm finding let's
17:34 - we refresh this that the large is one
17:39 - and then the largest J which is 2 which
17:43 - is greater than that what I just found
17:45 - is the last element that's correct and
17:48 - I've got a terrible error here
17:51 - bad bad sad little bug I just like had a
17:55 - brain malfunction when I wrote this swap
17:57 - function it's like swap large assign
18:00 - largest Jake but swap it with what head
18:02 - with chat just pointed it out to me the
18:04 - way that I wrote this function is I've
18:06 - got to say here's the array that I want
18:07 - you to swap these elements in so I've
18:10 - got to actually put that array in there
18:12 - which is Val's so let's redraw and we
18:16 - can see there we go and now we can see
18:18 - the order is happening so I can take out
18:20 - some of the console logs I can put in no
18:24 - loop back here and I can take no loop
18:29 - out here and I can run this and we
18:31 - should see there we go
18:33 - 0 1 2 0 2 1 1 0 2 1 2 0 2 0 1 2 1 0 we
18:38 - got it yay now let's be a little fancier
18:40 - here and let's put something let's put
18:43 - something in on though in the window I'm
18:48 - going to say text size 5 but no 64 I
18:54 - want to create a string and I want to
18:57 - loop through the current values and I
19:02 - want to say s plus equals I and then I
19:05 - want to say fill 255 and I want to say
19:08 - text s so I just want to draw the text
19:11 - at like 20 and height divided by 2 so I
19:14 - just want to see and did I put that I
19:19 - want to see
19:24 - no because it just happened so fast
19:27 - oh not I I want have valves index I
19:32 - there we go I want to see it do all the
19:34 - possibilities there so I want to be able
19:35 - to see that happening in the window and
19:38 - now we can try three four five six seven
19:42 - eight nine to see how this goes and we
19:45 - can see here we go I am now looking at
19:48 - it's almost like I'm counting down
19:49 - backwards in this weird way this is now
19:52 - every single possible permutation of ten
19:56 - numbers now you'll notice this is going
19:59 - to take a really long time to finish
20:01 - it's running at 60 frames per second so
20:03 - it's doing 60 possibilities every second
20:06 - and how many possibilities are there 10
20:08 - factorial which is this particular
20:10 - number which is like three million six
20:12 - hundred twenty eight thousand eight
20:14 - hundred so I could let this run but I'm
20:16 - going to stop this particular video and
20:18 - you could sort of calculate how long is
20:19 - it going to take how long is going to
20:21 - take if you add go to eleven this this
20:24 - video about lexical lexical ordering
20:27 - goes to 11 and except it doesn't because
20:31 - it actually just goes to ten but and so
20:33 - you know what might be some interesting
20:35 - creative ways you could sort of
20:36 - visualize this these permutations what
20:38 - might be another scenario where you use
20:40 - all these permutations and what I'm
20:41 - going to do in the next video is I'm
20:43 - going to use this to try every single
20:46 - possible permutation of the order of
20:48 - cities in the traveling salesperson a
20:51 - problem and once I do that I'm going to
20:54 - look at an evolution after that a look
20:55 - at an evolutionary strategy for solving
20:57 - a traveling salesperson problem okay
20:59 - thanks very much see you in the next
21:01 - video

Cleaned transcript:

hello welcome to another coding challenge video in this coding challenge I'm going to look at something called lexicographic ordering and look at an algorithm for solving lexicographic which for some reason I can't say but you could say lexical for short so I'm just a lexical ordering just kind of like alphabetical ordering and we're gonna look at how that works make a little algorithm that solves it you might have some creative ideas about how to visualize it or make something out of it and then I'm going to apply it to the traveling salesperson problem to look at how we can look at every possible path through a set of cities ok so let's just talk for a second about what lexical thank you very much ordering is and I'm going to come and do that over here so let's just say I kind of did this before but let's just say I have the letters a B and C so these are actually sorted in alphabetical order right a comes before B B comes before C but what if I want to know the next ordering of these that's also the next order in alphabetical order like I could say like here's another order C ba or here's another order be AC but neither of these are the next order in alphabetical order now I could tell you that the next ordering in alphabetic order is a CB right because a should come first well B already came second the only other possibility is C and then the only thing left is B and we could think okay well I I tried all the a possibilities so the next in alphabetical order and by the way let's go order in alphabetical order or very similar concept is a sort of subtle distinction which has to do with how numbers or dates are kind of treated in the way they might sort things in kind of the computer way this is this is by the way my version of the computer away so but I'll let you read about that in this page that I'm to show you that has more information so so I could say B and then what would be next in alphabetic order would be a and then all I have left to see so B is next and then C and then a and then C then a then B then C then B then a so I could do this rather easily myself but you know if I have ABCD EF GHI is going to be a little bit harder although not that much harder because honestly it's just going to be a b c d e f g i than h you could sort of imagine and there's this swapping so what we need is an algorithm to do this for us and then print out every single possible ordering because what I'm ultimately going to do with this is actually use these as indices into an array that has different cities in it so you know Baltimore New York London I don't know I shouldn't be so US Europe centric everybody in the comments give me some better cities to use in my next example but so you could see could imagine is gonna be 0 1 2 0 2 1 1 0 to 1 to 0 2 I don't know if I'm getting this right to 0 1 2 1 0 something like that so hopefully I got that right but this is what I want to do and I want to try the cities in all of these orders so let's go back over here and I found this wonderful page on the subway this for critic that I read in my google search which was a Cora post it says how would you explain an algorithm generates permutations using lexicographic ordering so the wonderful thing about this answer by Michael for a sec check which I'm sure I'm not pronouncing correctly somebody will have two people to give me great cities Kuala Lumpur Rio Coventry UK so let's be an international coding ring vote here in this thing that I'm doing in YouTube but so for the impatient here's the actual algorithm so what I'm actually going to do in this video is just kind of read through this algorithm and sort of talk you through it and implement it and I would suggest to you that if you want to find more about it you can kind of read further down this page where the author provides an example scenario of an example order how the algorithm plays out with that example and then also derives this algorithm but I'm going to kind of leave that aside as kind of and I just want to kind of like I think you might have an intuitive or kind of sense of how it works just by implementing it so first let's get ourselves set up to do this what I want is to have an array I'm going to start with an array I'm going to call it Val's yeah that's fine and I'm going to have it be 0 1 2 we're just going to start with 3 number so we could see that it works and what I want to do now in draw is first I want to what happens if I do console.log Mouse so let's just look at that and run this we can say okay so that's good I'm getting I'm seeing here in the console the current order of the array so I want to see it as I do each permutation one at a time so if I go back to this explanation first find the London Zoo mint on this you can see it better find the largest X such that P index X is less than P index X plus one okay so what does that mean I often we think of eye as the index not X but we're looking for is whit which where is there something in the array the highest the element closest to the end of the array where it's number is less than the last number so and intuitively right now we could say like which one is that it's this one right and if honestly if this were the array three four five six seven it would be this one right right now the last element of the array who is that is less than the one next to it is when instant order is always the second to last one but we should write an algorithm to make sure of that so the first thing I want to say is largest I largest I I'm going to assume it's zero and then I'm going to loop through the entire array and what I want to do is say okay if Val's index I is less than Val I plus one then largest I equals I and I can't go to the very end right so I want to find what is the largest and you know what I really need to do I want to start with this as negative one because I want to start with an invalid index because if I don't find anything that's going to be important if we go back to this algorithm if there is no such X that means we finished so what I wanted to add here is say all right here after I do this loop if largest I equals negative one no loop you know console dot log finished no loop is a function in p5 that just stops this animation loop from from going okay so we can see that here I've kind of implemented let me let me I've implemented step one of the algorithm and let me just in the code here just add a link to this article that I'm using just so I don't forget to do that later okay now find the largest Y or you might think sort of in this cavity use J because I'm used to using IJ as index values find the largest Y such that the index X that I just found that's the largest one is less than Y so let's think about that right so let's say I think I might need a diagram for this oh yeah I have my uh so let's say we on let's say we have a bunch of numbers 0 1 2 5 6 8 4 3 right let's find the first let's find that largest X which I'm calling largest I such that the such that the the the value in the array the index is less than less than the one after it which would be here so 0 1 2 3 4 so this is 4 now so what's the next step whoops the next step is find the largest Y such that P of X is less than P of Y not of AP index X so I now need to find whichever one in here is high it is actually less than this number 6 and that's actually here right this one is the largest one that's less than the number 6 so so if we come back to the algorithm and I implement that what I want to do is for I need to go through and I'm going to use J I'm going to go through the array again and I'm going to say a largest J equals a negative one so what I want to do is hear the largest y such that P of X is less than P of Y P index X so if if vows index J is less than Val index largest I which was X then largest J equals J so now I have largest I and largest J I have both of those and I don't think I need length minus 1 here because I can check all of them we'll find out now I swap P index X and P index Y now you might have come to this video without watching the previous one I made on traveling salesperson but in that video I look at a quick little algorithm for swapping two elements of an array and here's the function that does that right I have a function called swap I receive an array I just receive an eye in a J I save the value that's at a index I I put the value that's a J and I and I put the value that was a tie in J so now all I need to do is say swap largest I largest J right and then reverse oh boy so this is kind of a funny thing but what I also now need to do is reverse everything that's between X plus 1 to N now how do I do that this is going to be a little bit goofy I'm back from thinking about and talking with the chat about how to do this last step reverse so but first first let me let's see we did we did steps to in steps 3 let me at least add some this is a step 2 and this is now step 3 and what I want to do for step 4 let me write this out is reverse from X Oh largest I plus 1 to the end right so what I want to do is reverse everything that's from largest I plus one to the end of the array okay so one thing that I could do I think a way that I could do this thank you to the chat again is I can say I'm just gonna call this end array and I'm going to say I'm going to say Val splice now if you remember I don't know what you remember this from but if I go back to the my array documentation page I'm going to look at splice not slice splice what splice does is it that takes a start index and then an amount of things you want to delete out of the array but I'm not only am i deleting them out of the array I'm actually getting them as a separate array so what I can actually do is say Val's dot splice from largest I and then how many things do I want I want I think that the length is the arrays length minus largest I is that right like if the array has five things in it and I want and my largest I is the 0 1 2 3 4 is at 2 5 minus index ooh minus 1 right Val's dot length largest I minus 1 I believe is right that's the length that I want to splice out let's let's let's confirm that let's let's debug this to be sure what uh you know 5 6 7 8 9 and what I want to do is I want to say a dot splice what happens by the way if I just give it the index like 2 so 2 should be 0 1 2 5 6 & 7 ah so I don't even need that last argument splice will do it for me I don't need to calculate the length brilliant then I could say end array dot reverse now does that actually change the array itself hey dot reverse whoaohoh a is that ah start over let's worth it up hey is this array now B is a dot splice so now I have that as B we may need to make this bigger so you can see this now I want to try to reverse that B dot reverse but what is the be uh it does actually reverse the array itself not just create a new array that's returned back so now all I need to do is say end array reverse and then what I can do is say valves dot append I could just put it back so what I did is I took the end of the array off I reversed it and then I put the end of the right back on which is essentially doing exactly this piece of the algorithm reverse X plus 1 and did I add the plus 1 in there I think I did uh plus 1 okay so I need to add that plus 1 in there so this is done I've done step one step two step three and step four now what we should be able to do is look at those values and whoops and I should be able to run this again and sort of see what happens whoops ah Vale's dot append is not a function hey append is not a is not an array push must be push there's no append function must be push push must you must be allowed to push in a full array right the elements to add to the end of the array and you can push you probably can push another array right I'm pretty sure you can't let's try push and see if this works and okay this is too many things for me to see let's just do it with let's run a quick little test here and oh no no no no so how do I contact at could cat because you can see what it did it's actually just pushed the full array on there which is not what I want to do so let's go back and fix that it would be nice if I knew what I was doing wouldn't it I guess you're seeing the process of how things are figured out by people who don't know what they're doing uh nope nope nope Vale's dot can cat let's look at King cat we're getting close can cat the concat method returns a new array so I've got to set it back equal to itself there's probably some sort of slightly more efficient way of doing this but this will do just fine for us right now there we go up all right so I'm getting something but I'm missing something so uh I have got to I could use push dot apply but I'm trying to so there's some fancy JavaScript ways I could do this but I'm going to I'm going to try to kind of get around those ways so something is going wrong here so what I want to do is I actually want to take this out what I want to actually just say a no loop and I want to be able to look at this running one at a time so a way that I can in p5 by the way is is run each draw loop one at a time one as I can just say redraw all right I thought I could at least oh I have to I have no loop in here let's take that out do I have console dot log maybe I took out the console dot log whoops console dot log Val's yeah okay so I'm getting the same array each time and maybe the call to swap is incorrect to someone in the chat is saying so let me look this up this I'm now in a debugging portion which maybe will edit this should get edited out but I guess it's staying in swap so let's look and see what we're getting if we're getting values that make sense so the first thing I want to look at is largest I and then I want to look at largest J which is probably I'm guessing I did something wrong there and then I want to look so let's just look at that for a second so the largest eye is one which makes sense that's the largest index where it is less than two now the largest J is if we look at the algorithm is the largest J such that ah I have my code is wrong look at this this should be largest I is less than J if we look at that algorithm again that makes total sense that I'm looking for the element of the array furthest along that's actually greater than the one that I just found so that should that should fix things here and then if I say redraw okay so that's a little bit better I made an improvement here that I'm finding let's we refresh this that the large is one and then the largest J which is 2 which is greater than that what I just found is the last element that's correct and I've got a terrible error here bad bad sad little bug I just like had a brain malfunction when I wrote this swap function it's like swap large assign largest Jake but swap it with what head with chat just pointed it out to me the way that I wrote this function is I've got to say here's the array that I want you to swap these elements in so I've got to actually put that array in there which is Val's so let's redraw and we can see there we go and now we can see the order is happening so I can take out some of the console logs I can put in no loop back here and I can take no loop out here and I can run this and we should see there we go 0 1 2 0 2 1 1 0 2 1 2 0 2 0 1 2 1 0 we got it yay now let's be a little fancier here and let's put something let's put something in on though in the window I'm going to say text size 5 but no 64 I want to create a string and I want to loop through the current values and I want to say s plus equals I and then I want to say fill 255 and I want to say text s so I just want to draw the text at like 20 and height divided by 2 so I just want to see and did I put that I want to see no because it just happened so fast oh not I I want have valves index I there we go I want to see it do all the possibilities there so I want to be able to see that happening in the window and now we can try three four five six seven eight nine to see how this goes and we can see here we go I am now looking at it's almost like I'm counting down backwards in this weird way this is now every single possible permutation of ten numbers now you'll notice this is going to take a really long time to finish it's running at 60 frames per second so it's doing 60 possibilities every second and how many possibilities are there 10 factorial which is this particular number which is like three million six hundred twenty eight thousand eight hundred so I could let this run but I'm going to stop this particular video and you could sort of calculate how long is it going to take how long is going to take if you add go to eleven this this video about lexical lexical ordering goes to 11 and except it doesn't because it actually just goes to ten but and so you know what might be some interesting creative ways you could sort of visualize this these permutations what might be another scenario where you use all these permutations and what I'm going to do in the next video is I'm going to use this to try every single possible permutation of the order of cities in the traveling salesperson a problem and once I do that I'm going to look at an evolution after that a look at an evolutionary strategy for solving a traveling salesperson problem okay thanks very much see you in the next video
