With timestamps:

00:00 - [BELL RINGS]
00:00 - And we're back.
00:02 - I am ready, in this
video, to show you
00:04 - how to save the train
bottle with ml5.
00:08 - So if you recall, what
I previously just did,
00:10 - in the previous video,
is I added a feature
00:14 - to my example which
will load a data set
00:16 - and immediately start
training the model.
00:18 - So you can see here a whole
bunch of labeled x,y points.
00:23 - The model is now training all
the way up until 200 epochs.
00:26 - And when it gets to the end--
00:28 - we've got a train model and
I can click around and have
00:32 - the model guess a particular
note for a particular x,y
00:35 - coordinate in the canvas.
00:37 - But if I press stop
and run it again,
00:39 - I have to retrain the model.
00:41 - And this is incredibly
useful, because I
00:42 - might want to try
adjusting the data set,
00:45 - recollecting the data,
retraining the model,
00:47 - trying different
parameters, adding
00:48 - more epochs, fewer epochs--
all sorts of possibilities.
00:51 - But once I'm done,
once I feel like I'm
00:53 - satisfied with this
model, I would also
00:55 - like to be able to
just save the model
00:57 - and reload it so that I
don't have to do anything
00:59 - with the data again.
01:00 - In other words, we're finished
with these first two steps,
01:03 - collect the data,
train the model.
01:05 - We've used saved data and
load data, previously.
01:08 - And now, I just want
to save the model
01:10 - so that I could deploy it.
01:12 - So to do that, there's really
just one other function that I
01:15 - need, save.
01:16 - So if I just say save, that's
the model, not the data.
01:18 - And then, also, of
course, I'm going
01:20 - to make use of this
load function as well.
01:23 - So let's go back to my
trusty key press interface
01:26 - and add one more key.
01:27 - Let's use m for
saving the model.
01:30 - Change the key to m, change
the function to save,
01:33 - and then I'm going to call
this mouse-notes as well.
01:37 - Actually, maybe I need
some more arguments here.
01:40 - Let's go and check
the ml5 reference.
01:42 - So indeed, it's
the same as before.
01:44 - I need to give it
a name and then
01:45 - a callback for when
it's completed.
01:47 - But, in this case,
I don't need to know
01:49 - when it's completed, because
I'm just going to see
01:50 - that the files are there.
01:52 - Let's run it, train
it, and save it.
01:54 - [MUSIC PLAYING]
01:59 - [NOTES PLAYING]
02:02 - I'm just testing to make sure
the model seems reasonable,
02:04 - which it does.
02:05 - And now, I can hit m.
02:07 - The files have been downloaded.
02:09 - Interestingly, there
are now four files
02:12 - in my downloads directory.
02:13 - Now, I should point out that
this file is from before.
02:16 - This is the data file.
02:17 - And I'm just going to delete
it right now, because there
02:19 - are actually now three files.
02:22 - So saving the model is
different than saving the data.
02:26 - With the data, you
just have one file--
02:29 - the actual data in JSON format.
02:32 - When you're saving the
model, there are three files.
02:34 - Let's call one model.json.
02:37 - The next file is
model_meta.json.
02:42 - And one more file,
model_weights.bin.
02:47 - Now, I think, while recording
this video tutorial,
02:49 - I just discovered a bug in ml5,
because these should actually
02:52 - be called mouse-notes.json,
mouse-notes_meta.json,
02:56 - mouse-notes.weights.bin.
02:58 - But it just used the
default naming model.
03:00 - So maybe by the time
you're watching this,
03:02 - there'll be a new version
of ml5 that fixes that.
03:04 - But those are the default names.
03:06 - And the reason why
there are three files
03:08 - is there's a lot of
information to store related
03:11 - to a machine learning model.
03:13 - If we travel back in
time for a moment,
03:15 - you might remember a diagram I
drew in this very first video
03:18 - as part of this series.
03:19 - [MUSIC PLAYING]
03:24 - This is the neural
network diagram.
03:25 - Looking at this, we can see
the overall architecture
03:28 - of the network.
03:29 - There are two inputs,
there is a hidden layer,
03:33 - and there is an output layer.
03:35 - This architecture is
described in model.json.
03:40 - This is what that model.json
file actually looks like.
03:43 - It's a little terrifying.
03:44 - There's lots of
lower level details
03:47 - related to how machine learning
and neural networks work.
03:50 - But we could even start to pick
and choose little bits here
03:53 - that we can begin to understand.
03:55 - For example, this is a
sequential neural network.
03:58 - There's a sequence-- the inputs
come into the hidden layer
04:01 - to the output--
04:02 - feed forward.
04:04 - There is a dense layer.
04:06 - A dense layer means every
single input is connected
04:09 - to every single hidden node.
04:11 - And all of the connections,
it's very dense.
04:13 - Everything is connected
to everything.
04:15 - We can see that the input
shape has a 2 in it.
04:18 - There's 2 inputs.
04:20 - We could go down and
find the output layer,
04:22 - and the output
layer has 7 units.
04:25 - Well, that doesn't match up with
3 here, but, if you remember,
04:28 - the new data set that I
trained in this example
04:31 - has C, D, E, F, G, A, B--
04:35 - seven notes.
04:36 - So that output layer
has 7 units to it.
04:39 - A lot of stuff that's in here
matches up with the properties
04:42 - that you set for your
ml5 neural network.
04:45 - So that is model.json.
04:47 - Now, what about model_meta.json?
04:50 - I mean, isn't this already
all the metainformation
04:53 - for the model?
04:54 - So while that is
true, everything
04:56 - that you're seeing here
is the metainformation,
04:59 - the architecture of the
model that TensorFlow.js
05:03 - is expecting.
05:04 - But ml5 also keeps track
of additional information
05:08 - that's for the ml5
library only and not
05:11 - related to TensorFlow.js.
05:13 - And that's what's in model_meta.
05:16 - ml5, for example, keeps track
of what the actual label
05:20 - names are.
05:21 - That's not something that
the neural network has--
05:24 - everything's just
numbers, but that's
05:26 - something that we want
to use in our code.
05:27 - So ml5 is keeping
track of that for us.
05:30 - If you recall, there was this
whole normalization process
05:33 - that I talked about in
the first video, where
05:35 - you need to take
the input values
05:38 - and squash them into a
standardized range between 0
05:41 - and 1.
05:42 - So you need the minimum
and maximum ranges
05:43 - for those data fields, and
ml5 is storing that for you
05:47 - in these inputMin and
inputMax variables.
05:51 - So it's keeping track of that.
05:52 - So this is just additional
metainformation related
05:55 - to the model, specific to ml5.
05:58 - Now, there's one more file.
05:59 - This file is a bit mysterious--
06:01 - model.weights.bin.
06:03 - It's not a JSON file,
it's a binary file.
06:05 - And that's why if I tried to
open it in Visual Studio Code,
06:08 - I just see a lot
of gobbledygook.
06:10 - Because it's just binary data.
06:11 - And what it's storing--
06:12 - it's storing the secret
source of the neural network--
06:16 - the values that result
after the training process
06:19 - and the weights of all
of these connections.
06:22 - So every single connection
between any given node--
06:25 - an input node and a hidden node,
a hidden node and an output
06:28 - node, has a weight
associated with it.
06:31 - And those weights are like
dials that the neural network
06:33 - is tuning as it's
being trained to try
06:35 - to optimize towards getting
the proper outputs to match
06:39 - with given inputs.
06:41 - So every time we train
the neural network,
06:43 - we might have different weights.
06:44 - The architecture is fixed.
06:46 - We've sort of defined
this neural network model
06:48 - as a fixed architecture
of fixed metainformation.
06:50 - But the weights are
going to be different
06:52 - based on the nuances of how the
training process actually went.
06:56 - So now that we've established
how to save the model
06:59 - and what files you get
when you save the model,
07:02 - we're ready for the next step.
07:03 - And that is, when we
first run this sketch,
07:06 - can we load all of these
files into the model
07:09 - and have what is, in essence, a
pre-trained model ready to go?
07:14 - And the function we need to
do this is the load function.
07:18 - So I need to say model.load.
07:20 - First things first, I want
to upload those model files.
07:24 - So I'm going to create a folder.
07:26 - I'm going to call it model.
07:29 - And then here I'm
going to add file,
07:32 - and I'm going to upload
these three files.
07:34 - So now, we can see that
in the web editor I have,
07:37 - in a model directory,
model.json, model_meta.json,
07:40 - and the weights.
07:42 - So I don't want to
load data anymore.
07:43 - There might be a reason why
I also want to load the data,
07:46 - but in this case, I don't.
07:47 - I just want the train model.
07:48 - Say model.load-- and then I
need to give it those files--
07:52 - I'm just going to
say files, right now,
07:53 - and then I'm going to write a
callback called modelLoaded.
07:56 - [MUSIC PLAYING]
07:58 - In the callback, I'm
just going to give myself
07:59 - a message that the
model is loaded.
08:01 - And then what goes here?
08:03 - What goes in files?
08:04 - This is a little bit tricky,
because there are three files.
08:07 - But there's an easy
way to handle this.
08:09 - And if I go back to the
ML5 documentation page,
08:12 - it's right here.
08:12 - So I'm going to grab this
little bit of code right here,
08:16 - and I'm going to paste
it into my example.
08:20 - And this is actually
the model info,
08:21 - which I will put right here.
08:23 - And the path is where I put
it, which is under model.
08:28 - So now, if I run
this sketch, I should
08:30 - see, in the console, "model
loaded," and no errors.
08:33 - That's what I'm hoping for.
08:36 - Model loaded, no errors.
08:38 - But did it really work?
08:41 - In order to test it, I've got
to send my sketch straight
08:44 - into prediction-- the
state of prediction.
08:46 - So before I had a collection
state, a training state,
08:49 - and a prediction state.
08:50 - But if I'm loading
the model directly,
08:52 - I can just set the state
right equal to prediction
08:57 - and run it again and see.
09:01 - [NOTES PLAYING]
09:05 - Looks like it works.
09:06 - Now, if I wanted to
look at the data,
09:08 - I could also load
the data, and we
09:10 - could have everything in here.
09:12 - I do not want to
train the model.
09:14 - So let me try running this.
09:15 - I should see the training
data, but I don't--
09:17 - I load the pre-trained
model and have it work.
09:22 - [NOTES PLAYING]
09:29 - Hurray!
09:30 - OK.
09:31 - [BELL RINGS]
09:32 - This example is complete.
09:34 - We have seen all of the steps--
09:37 - how to collect the data,
how to train the model,
09:39 - and then how to deploy
and use the model.
09:41 - Now, we've also added
being able to save
09:44 - the data after collecting it,
so that if we rerun the sketch
09:48 - later, we could reload it, as
well as save the actual trained
09:51 - model so we could go
and just load it again.
09:53 - So one thing that I might say
is I've kind of done everything
09:56 - all in one sketch, which
is quite useful, actually,
09:59 - and there's a lot of
interactive possibilities
10:01 - there, but you might also
consider breaking it apart.
10:04 - Maybe you want to have
three different sketches--
10:07 - one that's a data
collection sketch, one
10:09 - that is a loading the data
and training the model sketch,
10:12 - and then one that
is just a loading
10:14 - a pre-trained model
and inference sketch.
10:15 - So that could be an
exercise for you as well,
10:17 - to divide all these pieces up.
10:19 - I've got more that
I want to show.
10:21 - So in the next video, now that
I have all these features,
10:25 - and I have this fully
working example,
10:27 - I want to show you a regression.
10:29 - And what I mean by
regression is the output
10:31 - of the neural network,
instead of being a label,
10:34 - a single note is a
predicted number.
10:36 - In this case, I'll
use a frequency.
10:38 - So hopefully it'll
make more sense
10:39 - what I mean by that when
I do the actual example,
10:42 - and I will talk through it a
bit more in the next video.
10:44 - So thanks for watching,
and I'll see you soon.
10:46 - Goodbye.
10:47 - [MUSIC PLAYING]

Cleaned transcript:

[BELL RINGS] And we're back. I am ready, in this video, to show you how to save the train bottle with ml5. So if you recall, what I previously just did, in the previous video, is I added a feature to my example which will load a data set and immediately start training the model. So you can see here a whole bunch of labeled x,y points. The model is now training all the way up until 200 epochs. And when it gets to the end we've got a train model and I can click around and have the model guess a particular note for a particular x,y coordinate in the canvas. But if I press stop and run it again, I have to retrain the model. And this is incredibly useful, because I might want to try adjusting the data set, recollecting the data, retraining the model, trying different parameters, adding more epochs, fewer epochs all sorts of possibilities. But once I'm done, once I feel like I'm satisfied with this model, I would also like to be able to just save the model and reload it so that I don't have to do anything with the data again. In other words, we're finished with these first two steps, collect the data, train the model. We've used saved data and load data, previously. And now, I just want to save the model so that I could deploy it. So to do that, there's really just one other function that I need, save. So if I just say save, that's the model, not the data. And then, also, of course, I'm going to make use of this load function as well. So let's go back to my trusty key press interface and add one more key. Let's use m for saving the model. Change the key to m, change the function to save, and then I'm going to call this mousenotes as well. Actually, maybe I need some more arguments here. Let's go and check the ml5 reference. So indeed, it's the same as before. I need to give it a name and then a callback for when it's completed. But, in this case, I don't need to know when it's completed, because I'm just going to see that the files are there. Let's run it, train it, and save it. [MUSIC PLAYING] [NOTES PLAYING] I'm just testing to make sure the model seems reasonable, which it does. And now, I can hit m. The files have been downloaded. Interestingly, there are now four files in my downloads directory. Now, I should point out that this file is from before. This is the data file. And I'm just going to delete it right now, because there are actually now three files. So saving the model is different than saving the data. With the data, you just have one file the actual data in JSON format. When you're saving the model, there are three files. Let's call one model.json. The next file is model_meta.json. And one more file, model_weights.bin. Now, I think, while recording this video tutorial, I just discovered a bug in ml5, because these should actually be called mousenotes.json, mousenotes_meta.json, mousenotes.weights.bin. But it just used the default naming model. So maybe by the time you're watching this, there'll be a new version of ml5 that fixes that. But those are the default names. And the reason why there are three files is there's a lot of information to store related to a machine learning model. If we travel back in time for a moment, you might remember a diagram I drew in this very first video as part of this series. [MUSIC PLAYING] This is the neural network diagram. Looking at this, we can see the overall architecture of the network. There are two inputs, there is a hidden layer, and there is an output layer. This architecture is described in model.json. This is what that model.json file actually looks like. It's a little terrifying. There's lots of lower level details related to how machine learning and neural networks work. But we could even start to pick and choose little bits here that we can begin to understand. For example, this is a sequential neural network. There's a sequence the inputs come into the hidden layer to the output feed forward. There is a dense layer. A dense layer means every single input is connected to every single hidden node. And all of the connections, it's very dense. Everything is connected to everything. We can see that the input shape has a 2 in it. There's 2 inputs. We could go down and find the output layer, and the output layer has 7 units. Well, that doesn't match up with 3 here, but, if you remember, the new data set that I trained in this example has C, D, E, F, G, A, B seven notes. So that output layer has 7 units to it. A lot of stuff that's in here matches up with the properties that you set for your ml5 neural network. So that is model.json. Now, what about model_meta.json? I mean, isn't this already all the metainformation for the model? So while that is true, everything that you're seeing here is the metainformation, the architecture of the model that TensorFlow.js is expecting. But ml5 also keeps track of additional information that's for the ml5 library only and not related to TensorFlow.js. And that's what's in model_meta. ml5, for example, keeps track of what the actual label names are. That's not something that the neural network has everything's just numbers, but that's something that we want to use in our code. So ml5 is keeping track of that for us. If you recall, there was this whole normalization process that I talked about in the first video, where you need to take the input values and squash them into a standardized range between 0 and 1. So you need the minimum and maximum ranges for those data fields, and ml5 is storing that for you in these inputMin and inputMax variables. So it's keeping track of that. So this is just additional metainformation related to the model, specific to ml5. Now, there's one more file. This file is a bit mysterious model.weights.bin. It's not a JSON file, it's a binary file. And that's why if I tried to open it in Visual Studio Code, I just see a lot of gobbledygook. Because it's just binary data. And what it's storing it's storing the secret source of the neural network the values that result after the training process and the weights of all of these connections. So every single connection between any given node an input node and a hidden node, a hidden node and an output node, has a weight associated with it. And those weights are like dials that the neural network is tuning as it's being trained to try to optimize towards getting the proper outputs to match with given inputs. So every time we train the neural network, we might have different weights. The architecture is fixed. We've sort of defined this neural network model as a fixed architecture of fixed metainformation. But the weights are going to be different based on the nuances of how the training process actually went. So now that we've established how to save the model and what files you get when you save the model, we're ready for the next step. And that is, when we first run this sketch, can we load all of these files into the model and have what is, in essence, a pretrained model ready to go? And the function we need to do this is the load function. So I need to say model.load. First things first, I want to upload those model files. So I'm going to create a folder. I'm going to call it model. And then here I'm going to add file, and I'm going to upload these three files. So now, we can see that in the web editor I have, in a model directory, model.json, model_meta.json, and the weights. So I don't want to load data anymore. There might be a reason why I also want to load the data, but in this case, I don't. I just want the train model. Say model.load and then I need to give it those files I'm just going to say files, right now, and then I'm going to write a callback called modelLoaded. [MUSIC PLAYING] In the callback, I'm just going to give myself a message that the model is loaded. And then what goes here? What goes in files? This is a little bit tricky, because there are three files. But there's an easy way to handle this. And if I go back to the ML5 documentation page, it's right here. So I'm going to grab this little bit of code right here, and I'm going to paste it into my example. And this is actually the model info, which I will put right here. And the path is where I put it, which is under model. So now, if I run this sketch, I should see, in the console, "model loaded," and no errors. That's what I'm hoping for. Model loaded, no errors. But did it really work? In order to test it, I've got to send my sketch straight into prediction the state of prediction. So before I had a collection state, a training state, and a prediction state. But if I'm loading the model directly, I can just set the state right equal to prediction and run it again and see. [NOTES PLAYING] Looks like it works. Now, if I wanted to look at the data, I could also load the data, and we could have everything in here. I do not want to train the model. So let me try running this. I should see the training data, but I don't I load the pretrained model and have it work. [NOTES PLAYING] Hurray! OK. [BELL RINGS] This example is complete. We have seen all of the steps how to collect the data, how to train the model, and then how to deploy and use the model. Now, we've also added being able to save the data after collecting it, so that if we rerun the sketch later, we could reload it, as well as save the actual trained model so we could go and just load it again. So one thing that I might say is I've kind of done everything all in one sketch, which is quite useful, actually, and there's a lot of interactive possibilities there, but you might also consider breaking it apart. Maybe you want to have three different sketches one that's a data collection sketch, one that is a loading the data and training the model sketch, and then one that is just a loading a pretrained model and inference sketch. So that could be an exercise for you as well, to divide all these pieces up. I've got more that I want to show. So in the next video, now that I have all these features, and I have this fully working example, I want to show you a regression. And what I mean by regression is the output of the neural network, instead of being a label, a single note is a predicted number. In this case, I'll use a frequency. So hopefully it'll make more sense what I mean by that when I do the actual example, and I will talk through it a bit more in the next video. So thanks for watching, and I'll see you soon. Goodbye. [MUSIC PLAYING]
