With timestamps:

00:01 - It's time for the next step--
querying data from the database
00:04 - itself.
00:05 - The good news is that I've done
so much stuff in these videos
00:08 - already this is actually
going to be relatively easy.
00:11 - There's almost nothing
new to learn here.
00:13 - It's just putting
some of the pieces
00:15 - we've seen previously together
in a slightly different way.
00:18 - I need to look at
routing again, so I
00:20 - need a new route in my server.
00:22 - But instead of app.post,
I want to use app.get.
00:26 - And then I'm going to need to
use the fetch function again.
00:28 - Only this time, I'll go back
and use the simpler version
00:32 - of fetch for a simple
get request, just
00:34 - to get information
from the server itself.
00:37 - Finally, I need to find
functionality in the database
00:40 - system itself,
any db that allows
00:42 - me to query the database,
to find something.
00:45 - And in fact, there is
a function called find.
00:47 - I'm just going to use
find to ask for everything
00:49 - from the database.
00:50 - But you can also use find with
search terms and other kinds
00:53 - of ways to ask for certain
key aspects or parts
00:56 - of the database itself.
00:57 - Let's check in on where
we are with the code.
00:59 - Since the last episode,
I also did my homework
01:02 - and I added a text
field here where
01:03 - you could write your
name or your mood
01:05 - or some kind of keyword
associated with that latitude
01:07 - and longitude.
01:08 - So when I hit Submit, both
the latitude and longitude
01:11 - and my current mood is sent
and returned back to me.
01:15 - So if I change this to
kitten, I will also see now
01:18 - that that comes back to me.
01:19 - And I can go look in
the database itself.
01:22 - And I can see that
these two entries
01:24 - with two different moods have
been put into the database.
01:28 - I also made some
small improvements
01:30 - into the server,
really minor things.
01:31 - One is I just took
the request body
01:34 - and inserted that into
the database itself.
01:36 - Creating this
additional object where
01:38 - I'm duplicating some
of the information
01:40 - was kind of unnecessary, so
this is much simpler now.
01:42 - The request comes in.
01:43 - I add the timestamp
to that object.
01:46 - I insert that into the database
and send everything back
01:48 - to the client.
01:49 - Finally, I have a new
web page, all.html.
01:53 - So I'm going to
demonstrate to you
01:56 - how to query everything within
the database and display it.
01:59 - I could do it on
this page, as well.
02:01 - I could have a single page app.
02:02 - I could hide DOM elements
and load other ones.
02:04 - There's so many different
ways I could design this.
02:07 - But I think a simple way
for me to just now go
02:09 - to slash all.html.
02:11 - That HTML file is there
in the public directory.
02:14 - And at some point,
of course, I probably
02:16 - want to move my JavaScript
into separate JavaScript files,
02:19 - maybe have some CSS files.
02:20 - But this is not really
a video series how
02:23 - about web design or
proper web development.
02:25 - I'm just looking at the
pieces of the puzzle
02:27 - and how to work with data
and APIs in this context.
02:30 - Ultimately, what I want
to do is from the client,
02:32 - I want to make a GET request
to a route on the server
02:35 - and have that route return all
the data from the database.
02:38 - And the way I do
that is with fetch.
02:40 - This is much simpler.
02:41 - I don't need to set
the method explicitly
02:44 - to POST because
the default is GET
02:46 - and I could just
give it that path.
02:47 - And I could use
a different path.
02:49 - Like, I could set something-- a
different route in the server.
02:51 - I could set up
something called, like,
02:53 - slash all or all the data.
02:56 - But I think I'm just
going to use API.
02:59 - The interesting thing is I can
reuse the API route because I
03:03 - used it previously as a POST.
03:05 - So calling fetch
with a GET to API
03:07 - will be handled in a different
function in the server itself.
03:10 - I'm going to say fetch
slash API and I'm
03:12 - going to put this in an async
function called getData.
03:18 - And I'm going to say
response equals await that.
03:22 - Then I'm going to say data
equals await response.json.
03:27 - This is everything we've done
before multiple times now.
03:30 - And then console dot log data.
03:34 - Then I want to
execute that function.
03:36 - Of course, if I go to the
browser now and hit refresh,
03:38 - it's going to say, hey,
it doesn't find that,
03:40 - because I haven't
set up that route.
03:42 - There's no such thing
as a route called
03:44 - API that handles a GET request.
03:47 - I could go into
the server and just
03:48 - like there's app
dot post slash API,
03:52 - now I'm going to add an
app dot get slash API.
03:55 - And this is going to
look exactly the same.
03:58 - There is a callback function
with a request and a response.
04:02 - And this should
be a lowercase t.
04:04 - Just to test if
this is working, I'm
04:06 - going to say response
dot JSON and then
04:09 - I'm just going to put some
arbitrary test 1, 2, 3.
04:14 - I'm just going to
send that data back.
04:16 - So at least now I
should see this message
04:20 - logged in the client.
04:22 - So I'm not-- I don't have
nodemon running right now,
04:25 - so I have to manually
restart the server,
04:27 - go back to the
client, hit Refresh.
04:29 - And there you go.
04:30 - I immediately make
that GET request
04:32 - and I immediately
see the response.
04:34 - We're really close to being
done with this feature now.
04:36 - All I need to do is
actually query the database
04:38 - and set that stuff back, not
some arbitrary test 1, 2, 3.
04:42 - All of the information
for how to do this
04:44 - is in the NDB documentation
under finding documents.
04:48 - So there's a find
function that lets
04:50 - me find stuff in the database.
04:51 - And there's all sorts of ways.
04:53 - I could use find to
find a lot of things,
04:55 - find 1 to look for one thing.
04:57 - There's all sorts of
comparison operators I can use.
04:59 - But ultimately, all I want
to do is say find everything.
05:04 - And so to do that I
say database.find--
05:08 - I would give it an
object here which is
05:11 - a way of modifying that search.
05:12 - But I'm just going to give
it empty object, because I
05:14 - want to look for everything.
05:15 - And then I have a callback.
05:16 - That callback has two arguments,
error, and the data itself.
05:23 - And what I can
actually do right here
05:26 - is just say send that data.
05:30 - Look at this.
05:31 - I just want to call find,
have the data come back,
05:34 - and then pass the
data to the client.
05:35 - I could do more here, but
this is all I need to do.
05:38 - And I probably should
do some error handling.
05:40 - Like, I might say if error
just say response dot end
05:45 - and then return.
05:46 - Like, get out of here.
05:47 - Maybe I should
console log the error.
05:48 - Maybe I should send the
error to the client.
05:50 - But this should sort of
like clean everything
05:52 - up and just go away.
05:53 - I don't think I made
an error, though.
05:54 - Hopefully I'm just
going to send back
05:56 - all the data in the database.
05:57 - Let me rerun the server, go
back to the client, hit Refresh.
06:02 - And there we go.
06:03 - Look, there is-- here is all
the data, rainbow and kitten.
06:07 - This is the stuff that I've
entered into the database.
06:10 - I can go back to the index.html
page and I can say, you know,
06:14 - cupcake and unicorn
and enter these in.
06:18 - And then I can go back
and refresh this page.
06:20 - And suddenly I now have
four entries in the database
06:23 - that I'm retrieving.
06:24 - In a way I'm really done now
with this particular feature,
06:26 - because I'm mostly leaving
it up to you to figure out
06:30 - the design of the
web page and how
06:31 - you want to present that data.
06:33 - But let me at least do
something to get that started.
06:35 - So I need to,
before I leave you,
06:37 - do something more than just
console logging that data.
06:40 - Let me actually attempt to
display it here on the web page
06:43 - itself.
06:44 - I'm going to use some
basic native JavaScripts
06:46 - to make some DOM elements
that I can place here
06:49 - to get you started.
06:51 - Looking in the code,
this is the place
06:53 - where I want to create
those DOM elements.
06:55 - I want to display everything
that's here in the console.
06:58 - But I want the user to be able
to see it on the web page.
07:02 - So to do that-- and I'm
just going to use some data
07:04 - JavaScript, which is not
a thing I know very well,
07:06 - and I'm probably make
some mistakes here--
07:08 - but I'm going to use a for loop.
07:10 - I can use a for of loop
as a way of iterating
07:13 - through every
element of an array.
07:15 - So I'm going to say
for item of data--
07:17 - so each element of the array
is now in this variable item.
07:22 - And I can make a div.
07:23 - So I'm going to make a
div as like a holder.
07:26 - Let's call it root
equals document dot
07:29 - create element div.
07:34 - So this will be like
the root, the div that's
07:36 - going to hold all the pieces
of data that's in item.
07:39 - And then let me make
another div called
07:43 - a mood, which is also a div.
07:46 - Document create element div.
07:48 - Then what I want to do is
say mood dot text content.
07:53 - Now, some people
do use inner HTML
07:55 - and I'm guilty of
doing this many times.
07:58 - But you've got to
really watch out,
08:00 - because if I've got user entered
stuff it can be a security
08:03 - issue to use inner HTML because
then code could be executed
08:06 - and that sort of thing.
08:06 - So I'm going to be safe
and use text content
08:09 - and say this is a string.
08:11 - I'm going to use a string
literal here saying
08:13 - mood colon and
then item dot mood,
08:16 - so grab the data from
the item variable.
08:20 - Then let's make another div
called geo for the geolocation.
08:27 - I'm going to say
geo text content
08:29 - equals the item latitude
comma the item longitude.
08:37 - And then I'm going to just
paste in the degree symbol.
08:40 - It's not in my clipboard.
08:41 - Hold on a second.
08:43 - I've got the degree
symbol in my clipboard.
08:45 - So I can paste that in here.
08:47 - Then let's make one
last div, with--
08:50 - I should check to see that
this is going to work.
08:52 - But let's make one
last div with the date.
08:56 - One last div with the date.
08:58 - So I will say date equals
document dot create and create
09:02 - element div.
09:03 - And the text content of the
date will be the timestamp.
09:08 - But let me say-- let me make
the date string a variable
09:13 - and say new date and
pass in item, timestamp.
09:20 - And then say dot to--
09:22 - this is new date, not data--
09:25 - and say this is to local string.
09:29 - So this is basically
taking that timestamp
09:31 - which was just the number of
milliseconds since January 1,
09:34 - 1970, converting it back
into a nice string that gives
09:38 - the date in my local time zone.
09:41 - And then I can put a
date string in there,
09:43 - which is a little
bit silly if that's
09:45 - all I'm putting in there.
09:46 - I could just say that the text
content equals date string
09:49 - directly.
09:50 - Then I want to take the--
09:53 - and let's actually-- this
is a little bit silly,
09:55 - but let me do this.
09:58 - So basically I have these
three divs all go inside root.
10:06 - Mood-- so I can use
the append function.
10:09 - And append will actually take
multiple elements as arguments
10:13 - and append them all.
10:14 - So they all went
to append to root.
10:16 - And then I probably
should do this after just
10:19 - to be sort of logical here.
10:22 - And then once I've
appended them all,
10:24 - then I just want to say document
dot body dot append root.
10:28 - So maybe I'd want to be
more thoughtful about how
10:31 - I'm organizing my HTML page.
10:33 - But this will give
me a basic idea here.
10:34 - Let me make a div for each
one of these data points.
10:37 - Let me put all those divs
into a container called root,
10:40 - fill in the text content, and
then append them to the page,
10:43 - and then just say a little
native JavaScript DOM
10:46 - manipulation prayer and move
on to the page and hit refresh.
10:51 - Wow.
10:51 - I cannot believe that worked.
10:53 - Of course, now you see the level
of my talent in web design.
10:57 - I've just got this very
crude, raw list of stuff.
11:00 - But now is an opportunity
for you, the viewer,
11:04 - to make something of this.
11:05 - So in terms of moving on to
the next step, before you
11:08 - move on to the next step--
11:09 - I mean, ultimately this
project is done, in many ways.
11:11 - I have implemented
all the pieces.
11:13 - I have client side JavaScript
that's collecting some data.
11:17 - That data is then passed
off to the server, saved
11:20 - to a database, and
also the client I
11:22 - can make a request
to look at everything
11:24 - that's in the database.
11:25 - So this would work if I deployed
this to some server somewhere
11:28 - and let people use it.
11:29 - I now have this app.
11:30 - Now, there's no user accounts.
11:31 - There's many things missing.
11:33 - But the sort of story of
this project is complete.
11:37 - The things that
I think you would
11:38 - want to consider
adding here are-- well,
11:40 - maybe there's some other
kind of interesting data
11:42 - that you want to capture about
yourself through this web
11:44 - application.
11:45 - One of the things
that I want to do
11:47 - is just add an
image from a webcam.
11:48 - I want to use the
P5 library, which
11:50 - is a creative coding
JavaScript library that I
11:52 - use in tons of videos on
this channel that I have.
11:56 - So I want to add
that in, but maybe
11:58 - you want to connect
to another API,
11:59 - get the weather information.
12:01 - You might think about
what kind of data.
12:02 - But also, you might really
want to think about how
12:05 - you're presenting this back.
12:06 - So maybe you want to think
about the layout, add some CSS.
12:10 - You might also want to think
about the navigation overall.
12:12 - I mean, right now I just
have these two pages.
12:15 - I have this page
for entering data.
12:18 - And that's just at the
root index of HTML.
12:20 - And then I just have to
know to go to all.html
12:23 - to get to this page.
12:24 - But maybe there should be
some overall navigation
12:26 - between these two pages.
12:27 - Maybe you want to change this
into a single page web app
12:30 - where everything is on one page.
12:31 - So play around with
this a little bit.
12:33 - And just really as
a bonus, I'm going
12:35 - to come back and add
one more feature.
12:37 - So in the next video, I'm going
to use the P5 library to get
12:40 - an image from the webcam, have
that image passed to the server
12:44 - and saved in the
database, as well.
12:46 - How I do that-- well, I'll get
into that in the next video.
12:49 - And that'll be the
sort of little button
12:51 - to put on this to wrap
it up in a nice bow
12:53 - and complete this project.
12:56 - [MUSIC PLAYING]

Cleaned transcript:

It's time for the next step querying data from the database itself. The good news is that I've done so much stuff in these videos already this is actually going to be relatively easy. There's almost nothing new to learn here. It's just putting some of the pieces we've seen previously together in a slightly different way. I need to look at routing again, so I need a new route in my server. But instead of app.post, I want to use app.get. And then I'm going to need to use the fetch function again. Only this time, I'll go back and use the simpler version of fetch for a simple get request, just to get information from the server itself. Finally, I need to find functionality in the database system itself, any db that allows me to query the database, to find something. And in fact, there is a function called find. I'm just going to use find to ask for everything from the database. But you can also use find with search terms and other kinds of ways to ask for certain key aspects or parts of the database itself. Let's check in on where we are with the code. Since the last episode, I also did my homework and I added a text field here where you could write your name or your mood or some kind of keyword associated with that latitude and longitude. So when I hit Submit, both the latitude and longitude and my current mood is sent and returned back to me. So if I change this to kitten, I will also see now that that comes back to me. And I can go look in the database itself. And I can see that these two entries with two different moods have been put into the database. I also made some small improvements into the server, really minor things. One is I just took the request body and inserted that into the database itself. Creating this additional object where I'm duplicating some of the information was kind of unnecessary, so this is much simpler now. The request comes in. I add the timestamp to that object. I insert that into the database and send everything back to the client. Finally, I have a new web page, all.html. So I'm going to demonstrate to you how to query everything within the database and display it. I could do it on this page, as well. I could have a single page app. I could hide DOM elements and load other ones. There's so many different ways I could design this. But I think a simple way for me to just now go to slash all.html. That HTML file is there in the public directory. And at some point, of course, I probably want to move my JavaScript into separate JavaScript files, maybe have some CSS files. But this is not really a video series how about web design or proper web development. I'm just looking at the pieces of the puzzle and how to work with data and APIs in this context. Ultimately, what I want to do is from the client, I want to make a GET request to a route on the server and have that route return all the data from the database. And the way I do that is with fetch. This is much simpler. I don't need to set the method explicitly to POST because the default is GET and I could just give it that path. And I could use a different path. Like, I could set something a different route in the server. I could set up something called, like, slash all or all the data. But I think I'm just going to use API. The interesting thing is I can reuse the API route because I used it previously as a POST. So calling fetch with a GET to API will be handled in a different function in the server itself. I'm going to say fetch slash API and I'm going to put this in an async function called getData. And I'm going to say response equals await that. Then I'm going to say data equals await response.json. This is everything we've done before multiple times now. And then console dot log data. Then I want to execute that function. Of course, if I go to the browser now and hit refresh, it's going to say, hey, it doesn't find that, because I haven't set up that route. There's no such thing as a route called API that handles a GET request. I could go into the server and just like there's app dot post slash API, now I'm going to add an app dot get slash API. And this is going to look exactly the same. There is a callback function with a request and a response. And this should be a lowercase t. Just to test if this is working, I'm going to say response dot JSON and then I'm just going to put some arbitrary test 1, 2, 3. I'm just going to send that data back. So at least now I should see this message logged in the client. So I'm not I don't have nodemon running right now, so I have to manually restart the server, go back to the client, hit Refresh. And there you go. I immediately make that GET request and I immediately see the response. We're really close to being done with this feature now. All I need to do is actually query the database and set that stuff back, not some arbitrary test 1, 2, 3. All of the information for how to do this is in the NDB documentation under finding documents. So there's a find function that lets me find stuff in the database. And there's all sorts of ways. I could use find to find a lot of things, find 1 to look for one thing. There's all sorts of comparison operators I can use. But ultimately, all I want to do is say find everything. And so to do that I say database.find I would give it an object here which is a way of modifying that search. But I'm just going to give it empty object, because I want to look for everything. And then I have a callback. That callback has two arguments, error, and the data itself. And what I can actually do right here is just say send that data. Look at this. I just want to call find, have the data come back, and then pass the data to the client. I could do more here, but this is all I need to do. And I probably should do some error handling. Like, I might say if error just say response dot end and then return. Like, get out of here. Maybe I should console log the error. Maybe I should send the error to the client. But this should sort of like clean everything up and just go away. I don't think I made an error, though. Hopefully I'm just going to send back all the data in the database. Let me rerun the server, go back to the client, hit Refresh. And there we go. Look, there is here is all the data, rainbow and kitten. This is the stuff that I've entered into the database. I can go back to the index.html page and I can say, you know, cupcake and unicorn and enter these in. And then I can go back and refresh this page. And suddenly I now have four entries in the database that I'm retrieving. In a way I'm really done now with this particular feature, because I'm mostly leaving it up to you to figure out the design of the web page and how you want to present that data. But let me at least do something to get that started. So I need to, before I leave you, do something more than just console logging that data. Let me actually attempt to display it here on the web page itself. I'm going to use some basic native JavaScripts to make some DOM elements that I can place here to get you started. Looking in the code, this is the place where I want to create those DOM elements. I want to display everything that's here in the console. But I want the user to be able to see it on the web page. So to do that and I'm just going to use some data JavaScript, which is not a thing I know very well, and I'm probably make some mistakes here but I'm going to use a for loop. I can use a for of loop as a way of iterating through every element of an array. So I'm going to say for item of data so each element of the array is now in this variable item. And I can make a div. So I'm going to make a div as like a holder. Let's call it root equals document dot create element div. So this will be like the root, the div that's going to hold all the pieces of data that's in item. And then let me make another div called a mood, which is also a div. Document create element div. Then what I want to do is say mood dot text content. Now, some people do use inner HTML and I'm guilty of doing this many times. But you've got to really watch out, because if I've got user entered stuff it can be a security issue to use inner HTML because then code could be executed and that sort of thing. So I'm going to be safe and use text content and say this is a string. I'm going to use a string literal here saying mood colon and then item dot mood, so grab the data from the item variable. Then let's make another div called geo for the geolocation. I'm going to say geo text content equals the item latitude comma the item longitude. And then I'm going to just paste in the degree symbol. It's not in my clipboard. Hold on a second. I've got the degree symbol in my clipboard. So I can paste that in here. Then let's make one last div, with I should check to see that this is going to work. But let's make one last div with the date. One last div with the date. So I will say date equals document dot create and create element div. And the text content of the date will be the timestamp. But let me say let me make the date string a variable and say new date and pass in item, timestamp. And then say dot to this is new date, not data and say this is to local string. So this is basically taking that timestamp which was just the number of milliseconds since January 1, 1970, converting it back into a nice string that gives the date in my local time zone. And then I can put a date string in there, which is a little bit silly if that's all I'm putting in there. I could just say that the text content equals date string directly. Then I want to take the and let's actually this is a little bit silly, but let me do this. So basically I have these three divs all go inside root. Mood so I can use the append function. And append will actually take multiple elements as arguments and append them all. So they all went to append to root. And then I probably should do this after just to be sort of logical here. And then once I've appended them all, then I just want to say document dot body dot append root. So maybe I'd want to be more thoughtful about how I'm organizing my HTML page. But this will give me a basic idea here. Let me make a div for each one of these data points. Let me put all those divs into a container called root, fill in the text content, and then append them to the page, and then just say a little native JavaScript DOM manipulation prayer and move on to the page and hit refresh. Wow. I cannot believe that worked. Of course, now you see the level of my talent in web design. I've just got this very crude, raw list of stuff. But now is an opportunity for you, the viewer, to make something of this. So in terms of moving on to the next step, before you move on to the next step I mean, ultimately this project is done, in many ways. I have implemented all the pieces. I have client side JavaScript that's collecting some data. That data is then passed off to the server, saved to a database, and also the client I can make a request to look at everything that's in the database. So this would work if I deployed this to some server somewhere and let people use it. I now have this app. Now, there's no user accounts. There's many things missing. But the sort of story of this project is complete. The things that I think you would want to consider adding here are well, maybe there's some other kind of interesting data that you want to capture about yourself through this web application. One of the things that I want to do is just add an image from a webcam. I want to use the P5 library, which is a creative coding JavaScript library that I use in tons of videos on this channel that I have. So I want to add that in, but maybe you want to connect to another API, get the weather information. You might think about what kind of data. But also, you might really want to think about how you're presenting this back. So maybe you want to think about the layout, add some CSS. You might also want to think about the navigation overall. I mean, right now I just have these two pages. I have this page for entering data. And that's just at the root index of HTML. And then I just have to know to go to all.html to get to this page. But maybe there should be some overall navigation between these two pages. Maybe you want to change this into a single page web app where everything is on one page. So play around with this a little bit. And just really as a bonus, I'm going to come back and add one more feature. So in the next video, I'm going to use the P5 library to get an image from the webcam, have that image passed to the server and saved in the database, as well. How I do that well, I'll get into that in the next video. And that'll be the sort of little button to put on this to wrap it up in a nice bow and complete this project. [MUSIC PLAYING]
