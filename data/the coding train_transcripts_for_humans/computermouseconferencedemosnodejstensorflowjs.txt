With timestamps:

00:00 - [Music]
00:25 - [Music]
00:42 - so
00:45 - [Music]
00:59 - [Music]
01:10 - [Music]
03:02 - do
03:05 - [Music]
03:26 - [Music]
04:04 - [Music]
04:19 - [Music]
04:22 - check one two just testing out my mic i
04:25 - also see there's a question from
04:27 - joe herbert which says i thought of a
04:29 - good pre-stream question
04:31 - does the coding train have good intro ml
04:34 - in good intro ml video that one would
04:36 - suggest
04:37 - well i don't know about good
04:40 - but i do have a series i think if you
04:42 - search on youtube for
04:44 - beginners guide to ml5.js perhaps this
04:46 - is what kobe is suggesting right now
04:49 - um those are my intro series and i'll be
04:51 - covering the topic from a beginner's
04:53 - perspective today
04:57 - [Music]
05:27 - [Music]
05:36 - me
05:38 - [Music]
06:04 - do
06:07 - [Music]
06:18 - do
06:20 - [Music]
06:24 - hello happy friday on the coding train
06:27 - welcome
06:29 - all aboard it's a live stream from me
06:33 - before i'm gonna do a whole lot of
06:34 - coding stuff
06:37 - um so um i don't know when i was last
06:40 - here live streaming this way it feels
06:42 - like i've been gone for a very long time
06:44 - down deep i've dug myself into a hole
06:47 - i'm
06:48 - covered and covered in piles and piles
06:50 - of old computer mice that i purchased
06:52 - off ebay
06:54 - um i've been participating in something
06:57 - called the computer mouse conference
06:59 - which just started yesterday but um i
07:01 - was invited to
07:03 - um give it a talk if you will if i could
07:06 - use that term
07:07 - um at the conference and all of the uh
07:09 - talks were um this is a
07:11 - fully online conference and the talks
07:13 - were all
07:14 - um are all being pre-recorded there's
07:16 - some i think live panels tonight
07:18 - so i um didn't i chose not to make it
07:21 - easy on myself
07:23 - and uh simply um record kind of
07:26 - a more uh typical kind of uh
07:28 - presentation
07:30 - um and wanted to try producing a
07:33 - uh um a kind of thought a video that
07:38 - was a bit different than the kind of
07:39 - content that i usually make on the
07:40 - coding train
07:42 - thank you for listening to me about this
07:44 - right now and it was really hard i had a
07:47 - lot of help from a lot of people i have
07:48 - so many people to thank
07:50 - and uh if you have no idea what i'm
07:52 - talking about i apologize i'm going to
07:53 - explain
07:54 - more about what the computer miles
07:55 - conference is in one moment but what i
07:57 - am excited to let you know right now the
08:00 - sun just came out here in brooklyn new
08:01 - york it was just pouring rain like half
08:03 - an hour ago that's not what i was gonna
08:04 - tell you
08:05 - what i am excited to tell you about is
08:08 - that i will be
08:08 - publishing the video from the conference
08:11 - which played last night
08:13 - um probably around on monday on the
08:16 - coding train so i
08:16 - today i want to talk about and go
08:18 - through some of the code examples it's a
08:19 - little bit backwards
08:20 - because i'm assuming that many of you
08:22 - who will be watching this live stream
08:24 - haven't actually seen the video
08:25 - so i'm giving you a sneak peek a preview
08:27 - into some of the demos there
08:28 - i also kind of never really finished the
08:30 - last demo that's in the video
08:32 - it's a little bit of smoke and mirrors i
08:34 - really would like to work on that
08:35 - um i would very much like to see if i
08:38 - can train
08:39 - a recurrent neural network in node
08:42 - with tensorflow.js based on mouse
08:45 - movement data
08:46 - and yeah i doubt that's going to happen
08:48 - in the next hour and 45 minutes
08:50 - but i will get it started um
08:53 - let's see so where do i want to um
08:56 - begin so let me bring over my
08:59 - screen here so first of all up here in
09:02 - the top left
09:03 - uh currently all of my mouse movements
09:05 - are being tracked
09:06 - by a processing sketch that i will
09:08 - explain in a moment
09:09 - and they are being recorded into this um
09:13 - sketch and after i think 40 minutes that
09:15 - image
09:16 - will be live tweeted um at
09:20 - uh the twitter account the mouse sees
09:23 - so let's see uh this was the last one
09:25 - two hours ago
09:27 - uh from me that was tweeted here so the
09:29 - in in i don't know how long it's been i
09:31 - should put something
09:32 - in the sketch that says how long it's
09:34 - it's been going but in
09:35 - at some moment of time that sketch will
09:38 - turn you know if everything's working
09:39 - correctly
09:40 - that sketch will become blank and then
09:43 - that image from that sketch do you hear
09:45 - the helicopter flying overhead
09:47 - [Music]
09:49 - i'm in the attic of uh the
09:52 - and so the helicopter was flying kind of
09:55 - close
09:56 - of my of my uh place here in brooklyn
09:58 - but um so let's see if that happens
10:00 - um let me first get something out of the
10:02 - way uh which is i'm
10:04 - very excited to um thank
10:07 - today's i'm looking i have my console of
10:09 - buttons
10:10 - there it is uh like very excited to
10:13 - thank today's sponsor of the coding
10:15 - train
10:15 - brilliant um you can sign up for free
10:19 - right now this very moment you can turn
10:21 - this whole live stream off
10:22 - and sign up for free you can keep it on
10:24 - and sign up for free
10:26 - at brilliant.org codingtrain i'm very
10:28 - excited about
10:29 - uh what i want to show you about halfway
10:30 - through the stream today on brilliant's
10:33 - website um they have a course about
10:36 - learning all about
10:37 - artificial intelligence and neural
10:38 - networks that's the topic of my live
10:40 - stream
10:40 - so i'm going to look at neural networks
10:42 - in tensorflow.js
10:44 - and of course there's this ml5 project
10:46 - which i will um allude to but um some of
10:48 - the things i want to explore are not
10:50 - yet in ml5 and so if i can explore them
10:52 - in tensorflow.js
10:54 - then they could maybe get added to ml5
10:56 - later which would be very exciting
10:58 - um but um uh if as a really wonderful
11:01 - way to learn
11:02 - along with the kind of stuff that i do
11:04 - is brilliant which has a whole set of
11:06 - interactive
11:07 - um lessons where you can try out ideas
11:09 - and answer questions and join a
11:10 - community of people helping each other
11:12 - in topics in math and science and
11:13 - physics and computer science there's a
11:14 - python program of course
11:15 - so many things so um you can sign up for
11:17 - free brilliant.org
11:18 - codingtrain um and uh if you are
11:21 - interested in
11:22 - uh signing up for the premium service
11:23 - which unlocks all of the courses
11:25 - um you can get 20 off of the first 200
11:28 - people by going to that link
11:30 - all right let's see right now
11:34 - ah yes i thought the timing might work
11:36 - out i felt like i started it around 40
11:39 - minutes before i went to live stream so
11:40 - let's see
11:41 - um let's see where oh i lost the twitter
11:43 - account already
11:45 - um did it work no
11:49 - where is it oh is there an error oh i'm
11:52 - so
11:52 - sad it went blank
11:56 - and i don't see it oh
12:00 - oh i was i tested it and everything
12:03 - oh i got a bat what's this too large
12:07 - oh look at that request entity too large
12:10 - so i never bothered to do why is it too
12:12 - large
12:14 - because it's a png what if i save it as
12:17 - a jpeg
12:19 - um oh no but i'm doing it as a base 64.
12:22 - um
12:26 - okay i think maybe it's just my node
12:28 - code
12:30 - uh how do you feel about me debugging to
12:33 - fix this right now
12:35 - i'll do it after i finish streaming
12:37 - let's change it to let's make it a
12:39 - shorter amount of time
12:40 - let's just do 10 minutes and it'll be so
12:42 - much less
12:44 - activity i think that base 60 shouldn't
12:47 - it be the same
12:49 - like shouldn't the base64 encoding of
12:51 - this image oh
12:53 - my resolution changed could it be the
12:56 - resolution of the image
12:59 - let's print out like what would make it
13:02 - that suddenly this file was too large to
13:05 - post to my server
13:07 - let me print out the display width and
13:09 - height
13:11 - 1920x1080 i feel like i was doing that
13:13 - before
13:15 - i mean i could certainly
13:19 - oh no this is so sad uh
13:23 - i know i can fix this for sure after the
13:26 - stream is over but i wanted it to be
13:27 - posting while i'm
13:29 - streaming let's just try five minutes
13:31 - and see if it has to do
13:33 - with the actual like amount of activity
13:37 - in the image
13:39 - i could also just go and see i set like
13:40 - a um
13:42 - a data limit i think on the node server
13:45 - that stu that's receiving the image
13:47 - because i don't know that seemed like
13:48 - the sensible thing to do
13:50 - maybe i need to set it higher uh let me
13:53 - just put it on
13:56 - sorry ah let's put it on um
14:00 - five minutes we're gonna get five
14:01 - minutes of mouse movements
14:04 - and see uh see what happens in five
14:06 - minutes okay
14:08 - oh i'm excited that you're all here with
14:10 - me for this so where was i
14:14 - all right we're gonna come back to the
14:15 - twitter ah okay so the computer mouse
14:17 - conference
14:18 - this is the url uh complicating
14:23 - i don't know if you can hear the
14:24 - screaming that's coming from downstairs
14:26 - my
14:26 - so friday afternoon is not a good time
14:28 - for me to live stream
14:30 - the children are home from school lots
14:31 - of activity going on but i'm gonna power
14:33 - through this
14:36 - complicatingthecomputermouse.net so if
14:37 - you go to this website
14:39 - um you can buy a ticket for the
14:41 - conference still
14:43 - later um at six o'clock 6 p.m eastern
14:46 - tonight
14:47 - the live zine the streaming of artist
14:50 - nedo bomani is making
14:52 - uh has a camera view of her workspace
14:55 - tabletop workspace and is making a live
14:58 - paper zine and printing and cutting
15:00 - while the conference is going on you can
15:02 - hear the audio from the conference in
15:04 - that zine
15:05 - stream just for free and we could go
15:08 - look at the schedule
15:09 - let's see what's on the schedule for
15:10 - tonight
15:12 - we can see all these wonderful things
15:14 - that are happening so i encourage you to
15:15 - check out
15:16 - uh and maybe join um the computer mouse
15:19 - conference
15:20 - um if you're interested isn't it
15:21 - wonderful that there is an actual like
15:24 - i don't know if it's right to say about
15:26 - all this academic
15:28 - intellectual conference all about the
15:30 - computer mouse
15:31 - nothing about me is academic or
15:33 - intellectual but there was a lot of
15:34 - brilliance
15:35 - on display last night from all of these
15:37 - um amazing presenters
15:39 - um and i i'm assuming that all of these
15:41 - talks will eventually be
15:43 - available um
15:46 - um i like i'm enjoying charlie's comment
15:49 - in the chat
15:50 - children home from school helicopters
15:52 - home from school lots of distractions
15:54 - it is true um so
15:57 - you know i could go on and on about how
15:59 - much i love i've been really
16:00 - i i love the computer mouse conference
16:02 - in 2020 how much i love
16:04 - it so far this year and how much i'm
16:05 - looking forward to it tonight but
16:07 - let me get to why probably you are here
16:11 - watching this stream this is the page
16:14 - you can actually just go to uh
16:17 - thecodingtrain.com
16:19 - mouse learning so if you go to that url
16:22 - it will take you to the page and thank
16:25 - you so much to
16:26 - dusk uh verkus who's in the chat i think
16:30 - um who has been uh instrumental in
16:32 - helping me get
16:33 - all of this material organized to be
16:35 - online so
16:36 - everything that i reference in the talk
16:38 - all of the artists
16:40 - are here listed with links and all the
16:43 - various articles and publications
16:45 - and you can find them here i wouldn't be
16:46 - surprised if i missed something
16:48 - so if something is missing please uh
16:50 - tweet at me
16:52 - at shiffman you can open probably an
16:54 - issue also on
16:56 - uh the coding train website
17:00 - uh github repo so you could also
17:02 - potentially go here to the coding train
17:04 - website issue and click
17:06 - uh new issue if something is missing of
17:08 - course how do you know if something's
17:09 - missing if you haven't even seen the
17:10 - talk
17:11 - you know it'll all work out eventually
17:13 - um but um there are
17:15 - a whole set of um examples here
17:18 - so i'm trying to think about
17:23 - how i want to approach this
17:26 - oh my goodness i must must someday
17:29 - finish the live poll project so i could
17:31 - just throw up a live
17:32 - poll while i'm streaming gotta make that
17:36 - happen
17:38 - so let's start with collect and
17:40 - visualize mouse data
17:43 - because in order for me to work on the
17:45 - thing that i want to work on
17:47 - is predicting mouse movement so actually
17:49 - let's let's go ahead and a little treat
17:51 - for you
17:52 - i am going to play not the full
17:55 - talk um but just like a portion of it at
17:57 - the end for the section that i want to
18:00 - to discuss here so let me scan through
18:03 - it
18:04 - you can sort of see the video um parts
18:07 - of it
18:08 - here um and let me get to
18:12 - what's the part that i want to get to
18:16 - okay let's try this
18:21 - you do not hear the audio hmm
18:24 - let's see i will fix that so i use this
18:26 - software called loopback ah if i think
18:28 - if i
18:29 - turn this on this will take the audio
18:32 - and send it out to
18:33 - usb capture so that should fix that
18:36 - let's see if we can get this going here
18:37 - oh to collect and save all of my mouse
18:40 - pointer positions
18:41 - into a csv file csv stands for comma
18:44 - separated values it's a very standard
18:46 - data format that you can easily reload
18:48 - into all sorts of other things like a
18:49 - spreadsheet
18:50 - you can then take this data and
18:51 - visualize it in a myriad of ways
18:54 - animations i tried a few different ones
18:57 - with all of these mouse movements saved
18:59 - i could also use them as
19:01 - training data i can analyze the
19:02 - probability of any moment of the mouse
19:04 - going up
19:05 - down left right and replay a sequence
19:07 - based on those probabilities
19:09 - with something known as a markov chain i
19:10 - could feed this data into something
19:12 - called a recurrent neural network
19:14 - a kind of neural network that's very
19:16 - well suited for sequential data
19:18 - time series text music
19:21 - vector paths there's a well-known
19:23 - machine learning model called sketch rna
19:25 - and the next part is what i'm trying to
19:26 - get to here with data set
19:27 - to generate doodles of all sorts of
19:30 - different types of things
19:31 - and i can take the results of that
19:33 - recurrent neural network training audio
19:35 - too loud
19:35 - movement take a nap and let it just take
19:38 - over and control my computer now i
19:40 - didn't include
19:41 - mouse clicks in here well although i
19:43 - could have
19:44 - this way i just you know i'm safe and
19:45 - i'm not going to end up you know who
19:47 - knows what nefarious
19:48 - business the sort of dream version of my
19:50 - so
19:51 - i don't know what you can see if what
19:52 - you can see here but this
19:54 - um what's going on here is this
19:56 - processing sketch
19:58 - is actually listening to a node
20:01 - server which is spitting out
20:05 - mouse locations where it wants to move
20:08 - the mouse
20:09 - so um these are normalized between zero
20:11 - and one so if you know i'm if i my pixel
20:14 - dimensions are 1920 in width
20:16 - then 0.37 you do the math a little less
20:19 - than half of 1920 what's happened
20:22 - oh i help my children with their math
20:23 - homework all the time
20:25 - and i feel like i i i i've been like
20:28 - learning all these new strategies to do
20:29 - things in my head and i'm like
20:30 - as soon as i'm live streaming and trying
20:32 - to do math in my head it's the most
20:33 - terrifying
20:34 - thing in my entire life um so the idea
20:37 - here
20:37 - is that um this particular so i want to
20:40 - try to like rebuild this project again a
20:42 - little bit right now
20:43 - it didn't really work very well so it
20:46 - worked enough for me to kind of
20:47 - demonstrate in the video
20:48 - this is actually like a little bit of
20:50 - showing like okay this was my mouse
20:52 - prediction so
20:52 - train so first thing i need to do is
20:54 - like collect a lot of data
20:56 - of me moving the actual mouse so
20:59 - let's get to do that and by the way i
21:02 - think
21:03 - um here
21:08 - yes it worked so this was my latest five
21:12 - minutes of mouse movements from the
21:14 - coding train live stream so i don't know
21:15 - why
21:16 - the the many many more uh
21:19 - the like larger image the image with
21:21 - more stuff in it
21:22 - doesn't make any sense to me if it's a
21:23 - base64 encoded image
21:26 - is the basic c4 encoding like
21:27 - compressing it somehow because wouldn't
21:29 - it just be
21:30 - the same number of bytes no matter what
21:33 - the colors actually are
21:34 - i'm very confused thank you thank you to
21:37 - objet who gave me the answer to 1920
21:40 - divided by 2
21:41 - which is i would do 1800 divided by 2 is
21:44 - 900
21:45 - and then i could do 120 divided by 2 is
21:47 - 60 and i got
21:48 - 960. boom just like that boom
21:52 - um so um what am i doing here let's
21:56 - close let's go back
21:57 - let's um let's i think tweeting this
21:59 - every five minutes is going to be too
22:01 - much
22:01 - so let's switch it back to 20 minutes
22:04 - and we'll let this go
22:05 - in the corner here um
22:09 - okay oh gabriel's is here and i have to
22:13 - like unhide no
22:15 - i held it for review no i hit delete by
22:18 - accident gibril's is here and i hit
22:20 - delete by accident
22:21 - you can post your message again why was
22:23 - it held i didn't mean to i didn't mean
22:26 - to
22:28 - my favorite what you know internet
22:29 - person is gabriel's i mean i i probably
22:31 - say that about a lot of people when they
22:33 - pop in the chat they're all equally tied
22:35 - all of my favorite internet people are
22:36 - equally tied as my favorite internet
22:38 - people
22:39 - jabriel's being one of them for sure and
22:41 - there's a limited number so it's not
22:43 - like there's
22:44 - thousands of them okay moving on
22:50 - what am i doing aha okay i've got to
22:53 - collect the data first
22:56 - so let me ah so what am i doing here uh
22:59 - mouse learning so we're going to the
23:02 - collect and visualize mouse data
23:03 - repository
23:05 - so i'm going to be writing a lot of the
23:06 - code today but uh i need to make use of
23:09 - some code that i've already written
23:10 - because no way am i doing this whole
23:12 - project
23:14 - from scratch here all right so let's get
23:16 - let's clone this repo
23:18 - and put it on my desktop
23:22 - um let's open it up
23:27 - i can't believe i deleted gabriel's
23:29 - message my accident
23:33 - i was trying to click let it let it post
23:38 - uh all right so now here is all right so
23:41 - there's a bunch of different uh
23:42 - processing sketches here
23:44 - by the way i also thank you to dusk um
23:47 - what i've recently learned and maybe i
23:49 - should pursue this is you can actually
23:51 - use
23:51 - node.js to also track your mouse
23:54 - movements
23:55 - so you need something you need some
23:58 - programming
23:58 - language or environment some framework
24:00 - that has operating system level access
24:03 - right i'm not talking about using mouse
24:05 - x and mouse y the way that i might talk
24:07 - about in p5 or in processing to get my
24:09 - mouse movements over a canvas
24:10 - i want all of my mouse movements no
24:12 - matter what it is that i'm doing
24:14 - so you can see here like um like this
24:17 - down here
24:17 - this is like um size to be smaller
24:23 - words are failing me very of more and
24:25 - more every day this is what happens when
24:26 - you get older i think
24:27 - it's happening pretty quickly for me um
24:30 - but over here so if i just
24:31 - take the mouse and like hover it down
24:33 - there in the corner it's down here in
24:35 - the corner we should start seeing it
24:36 - appear up there oh boy
24:38 - um so now how do i do this
24:44 - i'm gonna go to this mouse data collect
24:46 - sketch
24:47 - so the way that this the what what i'm
24:49 - actually making use of is something
24:51 - called
24:52 - the robot uh and by that i don't mean
24:54 - the robot
24:59 - i do kind of but i don't have a sound
25:01 - drop to like robot dance to
25:03 - and probably could come up with one but
25:05 - the you want me to move on i can tell
25:07 - all right so let's look at what i'm
25:09 - talking about java
25:10 - robot i love that it's called the robot
25:14 - uh it doesn't matter whether i'm looking
25:15 - there's an older version of java but
25:17 - um you can do all sorts of things like i
25:19 - can use the java robot class to get a
25:21 - screen capture
25:22 - to get a pixel color key presses
25:25 - so but what with the robot class is
25:27 - meant to do
25:29 - it allows you to automate things that
25:31 - you might want to do on your computer
25:32 - so i could actually write a java program
25:35 - that's just
25:36 - typing keys automatically moving the
25:38 - mouse so if i wanted to
25:39 - automate some uh you know process of you
25:43 - know
25:43 - opening files and changing something if
25:45 - i could kind of figure out what the
25:47 - logic behind it is
25:48 - or record myself doing it then replay it
25:50 - there's a lot of possibilities there
25:53 - um now
25:56 - i think i scared gabriel's away i just
25:58 - want to see a message from shabriels
26:00 - again in the chat
26:01 - that already tweeted him or something he
26:03 - left he saw that i deleted his message
26:05 - and thought i never wanted him to come
26:06 - back
26:07 - but i i love you gabriel's you're my one
26:09 - of my top
26:10 - 25 internet favorite people
26:13 - wait what way at the top of that top 25
26:17 - all tied as i said earlier i just don't
26:20 - want to leave anybody out
26:21 - you know i i
26:24 - okay i was saying something here so
26:28 - um oh and actually now that i'm
26:29 - realizing it the robot class is what i
26:32 - want to use
26:33 - once i want to control the mouse i
26:35 - actually
26:36 - don't need to use it at all for what i'm
26:39 - about to demonstrate to you
26:41 - which is that
26:44 - yeah i want mouse info so let's look for
26:46 - mouse info
26:47 - so there's a difference between tracking
26:50 - the mouse
26:51 - right what does it mean to listen to all
26:53 - the mouse positions and record them
26:55 - versus control the mouse through code
26:58 - rather than through the actual user
27:00 - interactions
27:02 - um mouse
27:06 - mouse info java so if i go here to mouse
27:09 - info
27:10 - and i look i can get pointer info and i
27:14 - can get
27:14 - the number of buttons and where the
27:16 - pointer is and all that sort of stuff
27:17 - but i've done this i've written the code
27:19 - so let's just take a look at it
27:21 - i'm a little bit afraid to run this i
27:22 - don't remember what i'm doing here why
27:25 - do i have the robot one in this
27:26 - unnecessary um let's take out
27:30 - a robot completely
27:34 - because i don't actually need it
27:40 - let's call that start tracking
27:43 - and i don't know it sort of seems silly
27:46 - to have a whole extra function for that
27:48 - let's just move that into setup
27:52 - okay so the first thing that i'm doing
27:54 - is
27:55 - just to make sure there is a mouse
27:57 - attached
27:58 - i think i can get the number of buttons
28:02 - so i guess it could tell me like how
28:03 - many buttons does this mouse have i have
28:05 - no idea
28:06 - i'm just using the trackpad right now uh
28:09 - i don't have another mouse
28:10 - hooked up but let's see what it says
28:14 - so there's five buttons how are there
28:17 - five buttons what are the five buttons i
28:19 - have no idea what that is
28:21 - and why am i getting this null pointer
28:22 - exception who knows
28:24 - um all right so but i know that there's
28:27 - a mouse
28:28 - if there was no mouse i would exit the
28:30 - program now in draw
28:32 - let's look at the the crucial sort of
28:34 - element here
28:36 - is and i see i have some code commented
28:38 - out that i'm not using
28:40 - um is this track mouse function
28:43 - so what the track mouse function does is
28:46 - it first
28:47 - asks for some pointer info right now
28:50 - remember
28:50 - i could just say print line mouse x
28:54 - mouse y
28:55 - but mouse x mouse y would only give me
28:58 - the mouse locations within this tiny
29:00 - little canvas
29:01 - and i want the mouse locations no matter
29:03 - where i'm moving
29:05 - so i can say get pointer info
29:09 - and dusk i see that you're in the chat
29:11 - if you could link to me the name of that
29:13 - node package you showed me
29:14 - i'll probably want to bring that up at
29:15 - some point too um so
29:17 - get pointer info now i have this pointer
29:20 - info
29:21 - object i could say get location and then
29:23 - i can say get x and get y
29:25 - so this could probably all be written in
29:26 - one line of code um the other thing that
29:29 - i'm doing
29:30 - is that bef i have my own mouse point
29:32 - class
29:33 - basically i created a little class just
29:35 - to wrap the x
29:37 - y and the time i'm not you i haven't
29:39 - done anything with the time but i could
29:41 - imagine if
29:42 - what i'm doing is collecting a large
29:43 - data set about my mouse movements
29:45 - that i might want to record when they
29:48 - occurred as well
29:50 - um and then i'm always i'm keeping track
29:53 - of the previous mouse position
29:55 - that feels useful for visualizing if i
29:57 - want to connect them with a line
29:59 - i also am doing something i don't know
30:01 - if this is i'm just trying to keep my
30:03 - data set a little bit smaller and more
30:04 - manageable
30:06 - so i wrote this function called sane
30:08 - that basically says hey if this is
30:10 - if the mouse hasn't moved don't bother
30:13 - recording it into the history
30:15 - so this arraylist is a history
30:18 - of all of the mouse points to summarize
30:22 - i've got a processing sketch where's my
30:25 - like post-production animation that's
30:26 - just gonna like put the bullet points up
30:28 - here it doesn't happen when i'm live
30:29 - streaming
30:30 - but i could type out this pseudocode uh
30:32 - let's open up like
30:34 - text edit here so let's let me type out
30:38 - the pseudocode for this so you can kind
30:39 - of follow
30:42 - uh so every every time through draw
30:47 - get x y tau of mouse
30:58 - add x y and time to arraylist
31:04 - and then and i think like
31:08 - if a new xy then add that
31:12 - so if it's a new xy if it's moved then
31:15 - add that to this arraylist
31:17 - over and over again
31:21 - uh also draw um draw scale down
31:25 - i thought this was going to be really
31:26 - useful for me to like summarize the code
31:28 - it's quite simple
31:30 - then uh also after
31:35 - x number of mouse locations
31:39 - save to csv files this is really it
31:42 - so every time through draw ask for the
31:45 - xy position of the mouse
31:47 - if it's a new one save it along with the
31:48 - time then
31:50 - keep all that into a big array but you
31:52 - know if i just stop the program from
31:54 - running that array will be lost
31:55 - so take that array and save it to a csv
31:57 - file what's a csv file let's take a look
31:59 - at that
32:00 - so um i believe right now
32:03 - the what the code says if the arraylist
32:07 - has
32:07 - a hundred thousand data points in it
32:09 - save it to a file
32:11 - you know i could be sending those to an
32:13 - api somewhere to save the data in the
32:15 - cloud or i could be storing it in a
32:17 - proper database or
32:18 - saving it continuously but this is my
32:20 - sort of hack
32:21 - let's just save um if it's like
32:24 - 30 frames per second 10 seconds would be
32:27 - about
32:28 - 300 points so let's just save about 300
32:30 - points right now just so we see
32:32 - that this works and let's also say there
32:34 - must be a
32:35 - print line somewhere in save data
32:40 - uh you know i'll just put print line
32:45 - saving data i'll talk about what's
32:48 - happening in this
32:49 - so i'm moving the mouse around
32:52 - it's um this console i got to make the
32:55 - console bigger
32:56 - right can i do that in console font size
32:59 - also 32 so you can see that better
33:06 - [Music]
33:08 - um
33:10 - let's see so i we should be able to
33:11 - count to ten one one thousand two one
33:13 - thousand
33:14 - three one thousand four one thousand
33:16 - five one thousand
33:18 - six one thousand come on it's gotta have
33:21 - been ten seconds already
33:23 - even though i only counted it to five
33:26 - to saving data all right great save data
33:29 - i could by the way i could i could just
33:31 - implement i think i might have actually
33:32 - implemented this
33:33 - i forgot uh i don't see it yeah i forgot
33:36 - that
33:37 - of course here i am like i have i just i
33:38 - have embedded if i click the mouse it'll
33:40 - save the data automatically so that was
33:41 - silly it could have done that
33:42 - let's now take a look so in the data
33:45 - folder
33:45 - we see there is now this csv file
33:49 - and what's in this csv file it is
33:52 - a table of x y x y time
33:55 - x y time x y time so this is me and
33:58 - so that's what's being saved so
34:02 - i think in order for me to attempt
34:06 - to see if i can get an ai
34:09 - to start controlling my mouse for me
34:12 - based on my own mouse movements
34:15 - and i'm using the the term ai just to be
34:20 - just to sort of like get myself through
34:21 - the sentence faster
34:23 - it would make sense to unpack what i
34:24 - really mean by that because ultimately
34:26 - we're talking about
34:27 - a machine learning algorithm and a very
34:30 - and a particular neural network-based
34:32 - machine learning algorithm what kind of
34:33 - neural network so that's what i want to
34:35 - unpack here
34:36 - but um i think maybe as to try to get a
34:40 - test going
34:41 - maybe i'll just move the mouse in a
34:43 - circular pattern
34:44 - because maybe that's something if i
34:45 - could get it to learn that and reproduce
34:47 - that
34:48 - then i would know that my methodology is
34:51 - sound
34:53 - so let's do the following i'm actually
34:56 - not going to bother
34:57 - to save the data automatically i will
35:01 - just save upon a mouse
35:03 - press
35:06 - so i don't want so okay hold on
35:10 - so let me now remember let me do some
35:12 - circle patterns
35:14 - in a clockwise direction
35:17 - it's kind of hard to do this
35:19 - [Music]
35:24 - oh i don't hear the music anymore oh i
35:28 - do
35:30 - this is good circle pattern
35:40 - i wonder if i'm moving it too fast you
35:43 - know what
35:44 - let's try this again i'm gonna move it
35:46 - slower
35:47 - [Music]
35:53 - oh no i keep wanting to do it over the
35:55 - canvas and i keep forgetting that that's
35:57 - besides the point
36:12 - [Music]
36:28 - this is going to show up in the tweet
36:31 - as well
36:36 - [Music]
36:38 - ah gabriel's is still here
36:43 - everybody do the mouse in circles dance
36:50 - i think there's enough data for me yeah
36:55 - and now for the moment you've all been
36:58 - waiting for
36:59 - [Music]
37:01 - i'm going to click the mouse and save my
37:06 - data
37:08 - that was a little anticlimactic but i
37:09 - did it
37:11 - okay
37:14 - all right so let's take a look um it's a
37:16 - very small file but that's good
37:18 - so let me just take a look at this this
37:19 - is my mouse does this look to you like
37:22 - i'm moving it in a circle
37:25 - i think it kind of looks like it's going
37:27 - in a circle look to the right to the
37:28 - right to the left to the left
37:30 - down down down down down down down down
37:32 - down down down up
37:33 - up up up up yeah looks pretty good looks
37:35 - pretty circular
37:37 - okay now ah this is great i'm so
37:41 - this is moving along so quickly here
37:42 - through this project
37:44 - let's now switch i'm going to close
37:46 - process not going to close processing
37:48 - completely
37:49 - i'm just going to close this data
37:51 - collection sketch
37:52 - i'm going to leave this mouse tweeter
37:55 - bot
37:55 - thing running um which ever in case you
37:58 - just recently joined
38:00 - every 20 minutes it's uh i this is cur
38:04 - recording all my mouse movements and
38:06 - look at it i love this sort of like
38:08 - uh how how you're really seeing that
38:11 - circular pattern now emerge in there
38:13 - um but i don't want to stop that let me
38:15 - just minimize it okay
38:17 - this was my attempt to be good at
38:19 - explaining something which didn't really
38:20 - work out
38:21 - um and now so what i'm going to start
38:24 - recreating
38:25 - is this particular repo that's predict
38:28 - mouse movement but i'm not i'm going to
38:30 - write this code
38:31 - i mean nothing is truly from scratch but
38:33 - i'm going to start this project over
38:35 - just because it didn't really work out
38:38 - but i might have to refer to it because
38:40 - i don't know
38:42 - tensorflow.js super well off the top of
38:44 - my head
38:45 - okay um
38:49 - great and we have a machine learning
38:51 - researcher for wireless security in the
38:54 - chat
38:56 - please help i don't really know machine
38:58 - learning i just i just played somebody
39:00 - who does on tv
39:04 - um i also have this really like big
39:07 - question in my head which is
39:09 - this video is so unlike most of my
39:12 - content
39:13 - it also is specifically for this
39:15 - conference
39:16 - so i wonder if it needs like a short
39:18 - intro i should record a quick intro to
39:19 - it but yeah i don't know think about
39:20 - that late all right
39:21 - so let me get to here so let's make a
39:24 - directory we're going to call this
39:27 - mouse ai for gabriel
39:30 - mouse ai uh i'm gonna say npm
39:34 - init that's what you do these days right
39:36 - i don't know i should say like yarn
39:38 - or something or what's there somebody
39:41 - saying newer than yarn
39:42 - i think i kind of forgot i think i
39:44 - forgot to eat lunch today
39:47 - like i'm very hungry i'm feeling kind of
39:50 - tired i had a very large uh
39:53 - late breakfast uh today has been an
39:56 - unusual day for me
39:57 - uh a very very nice day beautiful uh
40:00 - beautiful day
40:01 - and i was outside for quite a bit and uh
40:05 - i don't you don't need to hear all about
40:06 - my day i could i could talk about
40:08 - it it's not that interesting
40:10 - uh by the way i'm getting i'm fostering
40:13 - a puppy
40:14 - who hasn't arrived yet the puppies
40:16 - arriving tomorrow so you all hopefully
40:17 - know my dog gloria pickle who makes many
40:19 - appearances
40:20 - in the mouse conference video but
40:22 - tomorrow gloria's gonna get
40:24 - a friend uh marlin and um
40:28 - oh i'm getting breaking news from simon
40:30 - here
40:32 - do npm init-y so that it automatically
40:36 - does it automatically you don't have to
40:37 - manually make it do it automatically
40:40 - oh well i already did it though sorry
40:42 - all right moving along
40:44 - so stay tuned for cute puppy photos
40:46 - tomorrow
40:48 - um so where where am i
40:52 - go where am i where am i doing all right
40:54 - so now uh let's open up this directory
40:58 - and let's create a file called index.js
41:01 - so the first thing that i want to do is
41:03 - just parse that data file
41:06 - so i've got to find that csv
41:10 - which is presumably on the desktop
41:15 - in computer mouse data mouse data
41:17 - collect
41:18 - which one was it the later one this one
41:20 - let's make a copy of that
41:22 - and just put it here so let's start with
41:26 - and i'm um
41:27 - you know i apologize to any of you who
41:30 - are new to coding i
41:31 - really really strive to have everything
41:33 - be accessible
41:35 - and approachable no matter your skill
41:37 - level watching my stream
41:38 - but admittedly anytime i'm diving into
41:41 - writing some
41:42 - node code and trying to use something
41:45 - like tensorflow.js
41:46 - there's going to be a lot of confusing
41:48 - stuff just know
41:49 - it's confusing to me also but a node is
41:52 - an environment where i can write
41:53 - javascript code
41:55 - just and execute it through the command
41:57 - line basically run little
41:58 - javascript programs on my computer i'm
42:00 - not doing anything with a web browser
42:01 - right
42:02 - now and one of the things i can do is i
42:04 - can import
42:05 - various node packages and one of them
42:07 - that i want to import
42:08 - is called fs or file system and then
42:12 - i think i can just say like data is a
42:15 - read
42:15 - file and i'm going to use this read file
42:17 - sync so i don't have to worry about a
42:19 - callback
42:20 - and then i need to say what file i'm
42:22 - opening like mouse.csv
42:25 - and then probably like oh what's its
42:27 - encoding it's a text file or utf-8
42:30 - so let's just see and then if i say
42:32 - console.log data and
42:34 - of course the file isn't actually called
42:36 - mouse csv
42:37 - so uh let's get the full name i could
42:39 - just rename it but
42:41 - all right so now can you see all this
42:43 - code let me move this over here
42:48 - ah there we go now i should be able to
42:51 - say
42:52 - node index so now i'm going to execute
42:54 - that program and look there's all that
42:56 - csv file
42:57 - so i'm sure there are countless node
43:00 - packages
43:01 - that help with csv parsing but to me
43:04 - it's actually kind of easier
43:05 - to just do this manually such a simple
43:07 - file so
43:08 - i think the first thing i want to do is
43:10 - say data dot
43:12 - split by a line break so i will now have
43:15 - an array of lines
43:18 - then i can go through every single line
43:23 - and i'll say the row is lines
43:26 - index i dot split
43:29 - based off of a comma
43:33 - and then the x is the rows first element
43:37 - and the y is the rows second element
43:41 - so if i say console log x comma y
43:45 - we should have this parsed great
43:48 - so now i'm seeing all of those x y's
43:51 - that's good
43:53 - now here's the thing i probably should
43:58 - i mean basically what i'm attempting to
44:00 - do is recreate sketch rnn
44:03 - what's sketch art what what sketch rnn
44:05 - you asked
44:06 - i can hear you asking it all of you
44:07 - asked it simultaneously just as i said
44:09 - it
44:10 - i can hear you um
44:14 - sketch rnn uh let's see here
44:20 - this is what i'm looking for so i do
44:21 - have a video all about how to use sketch
44:24 - rnn
44:24 - sketch rnn is a machine learning model
44:28 - uh that was trained off of a large data
44:31 - set of doodles
44:32 - for example doodles of cats
44:37 - my children have written a song about
44:38 - cats and i'm using everything all of my
44:41 - uh um
44:45 - strength right now willpower to not
44:47 - start singing that song um
44:50 - but uh let's see i think there's like a
44:52 - demo in here if i just like sketch
44:55 - skip to the end um
44:59 - you can see here this is what sketch rnn
45:01 - does it's not working still
45:04 - oh this so this a little further
45:07 - off where we left off and i will say
45:09 - goodbye to you
45:11 - by letting you watch a compilation of
45:13 - sketch rnn drawn
45:15 - yeah yeah yeah move it along move it
45:16 - along
45:19 - so you draw and then the ai takes over
45:22 - and continues the drawing
45:26 - so i'm basically trying to recreate this
45:28 - but with my own data
45:30 - and i do uh happen to know that sketch
45:33 - rnn
45:34 - i believe doesn't use the raw position
45:37 - data of all the points
45:39 - it uses the difference between the next
45:41 - position and the previous position so
45:43 - you can get those like
45:44 - vector paths but to keep things simple
45:46 - right now let me use the raw
45:48 - data one person in the chat is asking me
45:52 - to sing it
45:56 - all right so but i'm gonna start small
46:00 - and um and not do that
46:03 - so the next thing i need to do is i want
46:05 - to normalize this data
46:09 - let's put this in um let's make this a
46:13 - two
46:13 - and so machine learning systems neural
46:16 - network based systems
46:17 - generally
46:22 - uh generally are looking for data in
46:25 - arrays so i already have it in an array
46:28 - but i
46:29 - let me make my own array i probably
46:31 - should make it an array of arrays
46:34 - x y x y x y x y let's do that
46:37 - so i am going to say uh i'm going to
46:40 - make an array like i'm going to call it
46:41 - raw
46:42 - input so i want to create the raw input
46:44 - to the machine learning model
46:46 - and the raw input equals
46:55 - uh input uh
46:58 - equals
47:02 - ah no push i want to push an array with
47:05 - the uh
47:06 - with just the x y and then i need to
47:08 - normalize that data
47:09 - and i happen to know that my resolution
47:12 - obviously i wouldn't want to really hard
47:13 - code this
47:14 - but if i divide it by 1920 and by 1080
47:18 - i've normalized all the data between 0
47:20 - and 1.
47:21 - now if i say console.log raw input
47:30 - there we go so this is now the data that
47:33 - i want to
47:34 - send into the neural network that i'm
47:36 - going to develop
47:37 - is going to be in chunks chunks of x
47:40 - y positions all normalized between 0 and
47:43 - 1.
47:44 - looking good all right so next up
47:51 - i really need something i i should have
47:53 - set up a notepad for me to diagram today
47:55 - so i'm just gonna have to use my words
47:57 - please bear with me
48:00 - what i'm looking to do ultimately is
48:03 - what's known as a regression
48:05 - a regression meaning i would i want the
48:08 - output what's the output of the neural
48:09 - network
48:10 - i want one of the one xy right the input
48:13 - is maybe hey
48:14 - here's my previous 10 xy positions
48:18 - what's the next one if you if you were
48:20 - moving in this direction
48:21 - all these ten times where would you go
48:24 - next
48:27 - so alt if i'm doing this and so
48:30 - it's regression but what kind of
48:32 - architecture do i want
48:34 - well you can think of this as a time
48:36 - series data
48:38 - it's a sequence the sequence might go on
48:40 - forever
48:41 - and the architecture for that kind of
48:45 - data
48:45 - music text time series financial data
48:48 - you could probably think of other
48:49 - examples
48:50 - would be something called a recurrent
48:51 - neural network and you know there's more
48:53 - recent research and
48:54 - variations on that and lstm and gpt
48:58 - transformer stuff all that stuff yeah
49:01 - our machine learning researcher in the
49:03 - chat will explain all of that to you
49:04 - thank you machine learning researcher in
49:06 - the chat who is
49:08 - slowly approaching onto my list of some
49:11 - arbitrary number of favorite internet
49:13 - people
49:14 - we'll see though the word is still out
49:16 - um
49:18 - but i wanna just i wanna i wanna know
49:20 - that i can get this to work
49:22 - first so um let me try
49:26 - doing um a sort of more uh classical
49:30 - classic uh fixed input neural network so
49:34 - instead of it being sequential
49:36 - i'm going to train a neural network to
49:38 - make a prediction
49:39 - based on some fixed number of previous
49:43 - mouse positions so if i always know like
49:46 - a sequence could have
49:47 - five numbers in it or a thousand numbers
49:49 - in it and it's continuous
49:51 - but it's not i'm not going to have as a
49:53 - robust system with a lot of memory
49:55 - but maybe i could get something to work
49:56 - if i always just say the
49:58 - input to the neural network is 10 mouse
50:00 - positions
50:01 - and the output is the next one so that's
50:03 - what i'm going to do
50:05 - so i need to start architecting
50:08 - my neural network now ordinarily i would
50:12 - go instantly to ml5 and i could
50:14 - i probably wish i could i wish i was
50:17 - because i know how to do it very well
50:19 - with ml5 but ml5 doesn't
50:22 - run in node and i don't feel like
50:24 - opening up a web browser and
50:25 - figure out that and i would like to
50:27 - learn a bit more about using
50:28 - tensorflow.js
50:29 - directly in node because someday i would
50:31 - love for ml5 also to work in node so
50:34 - that's where i'm going to go
50:36 - i just had to say all these words over
50:38 - and over again to build up a little
50:39 - confidence
50:40 - that i can make this happen so let's go
50:43 - to
50:44 - uh you can see what i was googling by
50:46 - the way it came out
50:48 - right before i started live streaming
50:50 - tensorflow.js are an ed cell because
50:52 - if if all goes according to plan which
50:54 - it won't i will get to investigate this
50:56 - before this stream is over
50:57 - i i doubt that's gonna happen but i'm
50:59 - gonna not worry about um
51:02 - that just yet so let's go to the api
51:04 - documentation
51:06 - um and one of the things
51:09 - that's hardest about working with
51:12 - tensorflow
51:13 - is this idea of understanding what it
51:16 - means to work with tensors
51:18 - this is why i like to use ml5
51:22 - because ml5 obscures the need to work
51:25 - with sort of lower level memory
51:27 - management and tensors with your data
51:29 - you could just give it an array or give
51:31 - it a string and it'll sort of figure out
51:33 - how to do that
51:34 - but i'm now opening up this can of worms
51:38 - which is tensorflow.js
51:39 - and i'm gonna have to do it myself by
51:41 - golly and i can
51:44 - i what's the stuart smallie daily
51:46 - affirmation
51:47 - people like me gosh darn it they really
51:50 - do
51:51 - i'm i'm good enough i'm smart enough i
51:53 - don't know
51:59 - i stopped watching sorry live after the
52:01 - 1980s so that's
52:02 - where my knowledge leaves me all right
52:04 - so
52:05 - i don't know where to begin well where
52:06 - to begin actually is i need to
52:09 - uh um i need to look at the getting
52:12 - started page
52:13 - there's got to be a getting started page
52:15 - right because
52:17 - [Music]
52:18 - i want to use it in node tf
52:23 - dot js node
52:26 - there we go this is what i want so i
52:29 - need this node package to use it in node
52:32 - so let's do this npm install tensorflow
52:36 - tensorflow.js node
52:37 - boy this doesn't work it's not going to
52:39 - be a very long live stream
52:41 - let's install this so npm install i
52:45 - you might be wondering like hey you used
52:48 - fs
52:48 - how come you didn't have to write npm
52:50 - install fs
52:52 - so in node some packages just come with
52:54 - node
52:55 - but tensorflow.js for node is an
52:57 - additional package i have to add
53:01 - okay um
53:04 - oh it's got to build tensorflow ooh this
53:06 - is exciting
53:09 - oh oh i was about to like put on some
53:12 - did it work thank you thank you
53:16 - are these i thought it would take longer
53:18 - i think it worked okay
53:20 - so now i think i just need to say
53:23 - require
53:24 - something required here we go
53:28 - let's do this i'm not going to attempt
53:31 - so you can
53:32 - um get it to use your uh graphics your
53:34 - gpu hardware
53:36 - that's not something that is within my
53:38 - powers
53:40 - today and i don't i definitely don't
53:42 - need it making a very small little
53:43 - neural network here
53:45 - a little just a little bit of data so
53:46 - let's do that
53:48 - so now the first step is for me to
53:51 - turn this data this raw input data and
53:54 - can i say console log table
53:56 - i notice that question in the chat
54:01 - yeah console.log table works in node
54:04 - which
54:04 - makes a nice little like sort of
54:05 - spreadsheet version of what i wanted to
54:07 - print out
54:08 - i need to turn this into a tensor so how
54:11 - do i do that so
54:12 - by the way tensor it sounds like oh
54:14 - tensor
54:15 - that must be some like really complex
54:18 - concept that has nothing to do with
54:19 - anything i've ever done before how i
54:21 - ever understand
54:22 - why is it called tensorflow what's a
54:23 - tensor so tensor is really just
54:25 - another word for a bunch of numbers and
54:29 - and maybe that's uh you can you can
54:31 - argue with me in the chat whether that's
54:32 - accurate to say
54:33 - but um tensor um you know the reason
54:36 - you you might think of an array like
54:38 - well is tensor and array the same
54:40 - no so an array is a list
54:43 - of could be in a list of numbers but by
54:46 - definition an array is
54:48 - one dimensional so
54:51 - a tensor is kind of a nice word for any
54:52 - arbitrary multi-dimensional array
54:56 - am i getting this right i have a whole
54:58 - video where i explain this and i kind of
55:00 - have forgotten it
55:01 - but really it's just another word for
55:02 - like an array uh you might think of as
55:04 - one-dimensional
55:05 - matrix is two-dimensional tensor is a
55:08 - generic
55:10 - any dimensional bunch of data
55:14 - i'll i'll look at the chat to see
55:16 - whether i've been corrected or not
55:17 - um all right so now
55:20 - this data is one of the so something
55:22 - that comes up in machine learning a lot
55:24 - is the shape
55:25 - of your data and what's lovely about
55:26 - using console.table
55:28 - is i see the shape the shape is you know
55:31 - 100
55:32 - 1435 i mean that's probably the index
55:34 - i'm sure started from zero so it's
55:36 - 1436 by two there's two columns now it
55:40 - looks like it's by three but these are
55:41 - just the index values so that doesn't
55:43 - really count
55:45 - so this is two dimensional data so if i
55:48 - go back to the tensorflow api
55:51 - i want to say i want to make a
55:54 - a two dimensional tensor
55:57 - so with values and shape
56:01 - so i should be able to say now
56:05 - const input tensor i'll just kind of
56:08 - call this input
56:09 - equals tf tensor2d
56:13 - my raw input my shape is
56:17 - raw well let's let's look for
56:25 - rawinput.length
56:28 - and i'll call that a rose and then i
56:30 - know it's two columns
56:32 - i don't know if this is going to work
56:34 - and then i can say input
56:35 - dot print so in tensorflow.js
56:39 - instead of console logging it you can
56:41 - you call print and it'll put out a
56:43 - preview let's see if that works
56:48 - good hi where's my bell
56:52 - uh my sound effects for being happy
56:57 - can't believe that worked
56:59 - i must remembering things from tesla
57:01 - okay great
57:02 - so now i have my input data i have my
57:04 - input data in a tensor
57:07 - next thing i need to do is i need to
57:08 - design my neural network
57:11 - so my neural network needs to have
57:12 - inputs that correspond to this input
57:14 - data
57:15 - and it needs to have outputs i know
57:17 - there's two outputs
57:18 - so what goes in between
57:22 - don't worry i will get there
57:25 - um oh the last line is empty
57:28 - so i should that's very good that can
57:30 - really mess things up
57:31 - thank you for ever in the chat mention
57:33 - that to me
57:36 - the bell i really it's like funny not
57:38 - having the bell like i feel like
57:39 - i use it whenever there's like really
57:40 - salient important moment
57:42 - and i'm getting to the halfway point of
57:44 - this live stream so i will be taking a
57:45 - break
57:46 - having a snack
57:49 - uh great this is important that i do
57:52 - this
57:54 - and let's just yeah because this is
57:56 - really going to
57:57 - mess stuff up this not a number here
58:00 - thank you for noticing that
58:02 - so and i don't want a console.log i just
58:04 - want to
58:05 - see the tensor uh i don't need to
58:07 - console log this anymore
58:09 - so let's do this again great
58:12 - um all right so we can see i have my
58:14 - input data so now
58:15 - back to the tensorflow api so what i'm
58:18 - looking for next
58:20 - is to create a model and i want to make
58:23 - a sequential model
58:24 - a sequential model is a model where the
58:27 - data flows in one direction
58:29 - in a sequence there are inputs and there
58:31 - are outputs the world of machine
58:33 - learning and neural networks there's
58:34 - all sorts of different kinds of model
58:36 - architectures i'm starting with the most
58:38 - basic
58:39 - simple one
58:42 - um okay so a sequential model so i'm
58:46 - going to start off doing this
58:49 - i'm going to create my sequential model
58:52 - then i need to configure the first layer
58:55 - it's going to be a
58:55 - two layer network there's just the
58:58 - hidden layer that receives the inputs
59:01 - and the output layer that takes the
59:04 - output of the hidden layer and which
59:05 - squishes it into
59:06 - my xy prediction so looking at this
59:11 - uh let's do this
59:14 - so the first layer is
59:18 - um
59:22 - no okay so ah so the this is
59:26 - the input shape ah right right right ah
59:30 - my data actually isn't formatted
59:32 - properly
59:34 - i want to have so here's what my data is
59:37 - now
59:45 - this is what my data looks like but
59:48 - remember
59:49 - what i'm using as my training data
59:52 - is groups of 10. like what is the next
59:56 - mouse position based off the previous 10
59:59 - mouse positions
60:00 - so there actually should be another
60:02 - array in here
60:04 - and this should be 10 of these
60:08 - and then another one so the data
60:11 - should actually look like this it should
60:14 - be in groups of 10
60:15 - and these would each be 10. so how do i
60:17 - do that
60:20 - so i want to
60:24 - let's make a variable
60:27 - what's a good name for this variable the
60:30 - oh people are telling me the font size
60:32 - is a little small
60:33 - let me thank you let me um let me try
60:36 - making that a little bit bigger
60:39 - uh let's see if this helps better
60:41 - hopefully this is better
60:45 - um okay so i need a variable for
60:49 - history size chunks i'm going to call it
60:51 - chunks
60:52 - i want chunks of 10.
60:56 - so four let j
60:59 - equals zero j is less than the number of
61:01 - chunks
61:04 - j plus plus
61:10 - so now um and then for each
61:13 - chunk oh that's
61:16 - i want to have a chunk which is an array
61:20 - boy did i make this complicated
61:24 - and the chunk
61:28 - should receive aha
61:31 - oh my goodness this is super interesting
61:33 - this should be i plus j
61:37 - and i can only go i can't go
61:40 - all the way to the end of the array
61:43 - because if i'm always taking
61:44 - blocks of 10 i have to stop at the 10th
61:47 - to last position
61:50 - i have some syntax errors somewhere
61:52 - because it's not auto formatting
61:54 - nicely move this over since i'm sitting
61:55 - here oh but i don't see my beautiful
61:58 - mouse visualization that's fine
62:00 - okay so go through all of the lines
62:05 - for every line get a group of 10
62:09 - push that into this chunk and then raw
62:13 - input push that
62:18 - chunk
62:20 - what's there's a syntax error or
62:22 - something
62:23 - does anybody see it
62:30 - huh let me just try running it
62:41 - 34 you're probably all telling me in the
62:43 - chat oh because i have all this nonsense
62:45 - down here
62:46 - i forgot about that okay that was just
62:49 - reference material
62:51 - okay i think we're good now oh but it's
62:53 - not a 2d
62:54 - tensor anymore i'm done
62:58 - tf tensor the number of rows the number
63:02 - of chunks
63:03 - then two is this my shape now is that
63:06 - how you do it
63:09 - i'm just kind of afraid let's come at
63:12 - this all right let's see
63:15 - all right this looks ah i'm on a roll
63:19 - today that looks right
63:21 - groups of ten groups of ten
63:25 - amazing ah this is so amazing
63:29 - no so people are saying do i i should be
63:32 - saying
63:33 - plus equal chunks i don't actually want
63:35 - to do that
63:37 - my training data takes 0 through 9
63:41 - predict the 10 1 through ten then pick
63:44 - to predict the eleventh
63:45 - two through eleven so that data is
63:47 - repeated with each chunk now again
63:49 - this is not the proper way of doing it
63:52 - but this is giving this is how i want to
63:54 - do it uh yeah um i absolutely do not
63:56 - wanna move up by the chunks
63:59 - i'm looking for as much data as possible
64:02 - and
64:03 - you know i'm taking 10 chunks at a time
64:06 - sliding across the data
64:08 - okay so now
64:12 - the input shape is
64:18 - um
64:24 - still the um
64:29 - oh the input i think i would just say
64:31 - it's the number of chunks comma two
64:35 - i think that's the input shape right
64:37 - it's ten
64:38 - things of two okay now the number of
64:41 - units i'm going to leave this as 32.
64:42 - it's sort of like and
64:43 - by the way there's like i i feel like it
64:45 - should be wrapping some of these
64:47 - um all right i'm not going to worry
64:48 - about that i never can get my
64:51 - code formatting right if i do this well
64:53 - yeah let me do this because i think this
64:55 - is a little easier to see now
64:56 - okay um so i'm going to leave 32 as
65:00 - arbitrary
65:01 - now the next thing that i want to add
65:07 - is the output layer which has
65:10 - two units that's it
65:15 - now i want this to be on one line
65:17 - although i think i need to add like
65:18 - activation functions and things like
65:20 - that
65:23 - let's do it this way to be consistent
65:24 - okay
65:30 - all right so i'm creating a layer that
65:32 - receives the inputs
65:34 - 32 is i'll get to why it says units 32.
65:36 - we'll decide that later
65:38 - and then there's two output units
65:43 - yeah i probably also could flatten
65:46 - the data but i'm um yeah
65:50 - hide the side tab i don't know what that
65:52 - means i need to do need to take a break
65:54 - in a minute
65:56 - um so just give me a second here but i
65:59 - kind of want to get i want to at least
66:02 - um actually this is the perfect time for
66:04 - me to take a break
66:06 - i've never aligned my sort of
66:08 - sponsorship
66:09 - so perfectly with um
66:13 - with my content but it's um and so i'm
66:16 - i'm avail i'm streaming until five today
66:18 - which is about another hour
66:19 - i think i'm gonna be able to get through
66:20 - a little bit quite a bit more of this
66:22 - but let me take a short break i'm not
66:23 - actually taking a break this second
66:24 - don't go anywhere
66:25 - i'm going to tell you um about
66:28 - uh today's um sponsor which is
66:32 - brilliant so
66:36 - i don't know about you but me i
66:39 - love to solve puzzles and i love to
66:42 - learn
66:43 - new algorithms and try to figure them
66:45 - out and then when i i love to get things
66:47 - wrong because also because that's the
66:48 - best way that i learn and so
66:50 - for me one of the um a really wonderful
66:55 - um service and website and they have an
66:58 - app
66:59 - that i use is called brilliant so
67:02 - brilliant
67:02 - is a website it has courses and lessons
67:06 - and a community of people
67:07 - all lifelong learners stuff for all
67:10 - ranges of ages
67:12 - you know one of the things i like to say
67:14 - look it's actually telling me continue
67:15 - learning
67:16 - look at this it somehow knows the
67:18 - brilliant has some really good ai that
67:20 - knows that i need to continue learning
67:21 - introduction to neural networks
67:23 - well i was working on it earlier as a
67:25 - review
67:26 - to understand about neural networks but
67:28 - i think the thing that i would just show
67:29 - you here is if i just go to courses
67:31 - i don't think it says that i could say
67:33 - much more about how well-suited this is
67:35 - if you like the coding train
67:36 - that you would like uh brilliant because
67:38 - of look at all of these topics
67:40 - um computer science fundamentals neural
67:42 - networks math fundamentals applied
67:44 - computer science
67:44 - um browse all 60 courses number theory
67:48 - this is one of my favorite ones right
67:49 - here
67:49 - infinity so if you like some of my
67:51 - videos on fractals
67:53 - i mean all you know so many of my coding
67:55 - challenge ideas
67:56 - came out of brilliant so um just to give
67:59 - you a quick preview of some of these i
68:00 - have a couple videos that i can play
68:02 - so there's a python um coding course um
68:05 - that you can actually so like i don't do
68:06 - videos on python but if you want to
68:07 - learn python
68:08 - you can go through these interactive
68:10 - lessons um see how they work
68:12 - you know the one that i'm working
68:13 - through now which you know
68:15 - i was saying like oh i really need
68:16 - visual diagrams to explain some of these
68:19 - concepts
68:19 - they're really beautifully illustrated
68:22 - in the uh neural networks course
68:24 - um there's lots of material that you can
68:26 - available just by
68:27 - going and signing up for free at
68:31 - um i have this
68:34 - brilliant.org coding train if you go
68:36 - through that link
68:37 - lets them know that you found brilliant
68:38 - through me which is just a nice thing to
68:40 - do if you can
68:41 - no big deal either way but i definitely
68:42 - would appreciate it um
68:44 - and then if it seems like something you
68:46 - would really like to unlock all of the
68:47 - premium courses and content
68:49 - you'll also get a discount through going
68:51 - through that length of coding train
68:52 - one of the things that i like to say i
68:53 - don't know you know it's not exactly
68:55 - gift giving season right now but
68:57 - you've got a someone's birthday coming
68:58 - up you know buy a nice gift
69:00 - um is getting somebody a premium
69:02 - subscription to brilliant it's something
69:03 - that i i do buy for
69:04 - as gifts for other people myself all
69:07 - right so um let's let's see if i can
69:09 - just briefly before i take my break
69:11 - um dive into the neural networks course
69:13 - a little bit let me move this out of the
69:15 - way so let's go
69:16 - to um introduction to neural networks
69:20 - i'm going to click continue course and i
69:23 - want to skip
69:23 - to i would definitely recommend going
69:26 - through all of the course
69:28 - but i just want to skip to the neural
69:29 - network one
69:31 - because it illustrates a lot of the
69:34 - concepts and here it is
69:36 - of what i'm talking about so the idea
69:38 - here is like this is the input data now
69:41 - it's different
69:42 - the input to this neural network is an
69:45 - image
69:46 - but you can see it has a shape to it
69:48 - like the shape to this data is
69:51 - one two three four five six it's
69:53 - probably 27 if i'm guessing i don't know
69:55 - i can't count if somebody could count
69:57 - this for me but the shape is
69:59 - the number of columns by the number of
70:01 - rows so similar idea and then
70:03 - all of these go into like if i would go
70:05 - back to my
70:06 - code here 32 units well that's the
70:10 - number of these
70:11 - hidden nodes now there aren't 32 here
70:14 - and then there's actually two hidden
70:16 - layers so in this if i were to try to
70:18 - recreate this architecture
70:19 - i would have to add two layers and then
70:22 - there's an
70:23 - output one you can see the output has
70:25 - one two three four five six seven eight
70:28 - nine ten so i would put
70:29 - 10 here and the idea here is that
70:32 - you know it's based on how the neural
70:34 - network is trained
70:36 - it is going to highlight or light up one
70:38 - of those output
70:40 - nodes those output neurons so i'm
70:42 - basically using tensorflow.js
70:44 - writing code to design a model like this
70:48 - not the same concept because this is
70:49 - doing image classification and i'm not
70:51 - even doing classification i'm doing
70:53 - regression
70:54 - but i have the same idea i have this
70:55 - sequential network it's usually
70:57 - visualized or drawn in diagrams from
70:59 - left to right
71:00 - this is being drawn from bottom to top
71:02 - so the data flows this way in the
71:03 - sequence
71:04 - input data that's there hidden layer
71:07 - hidden layer output layer
71:08 - so that's exactly what i'm going to do
71:10 - so i'm so glad that this
71:12 - course in brilliant just perfectly
71:14 - illustrated exactly what i'm coding
71:16 - today
71:16 - uh so thank you brilliant for being a
71:18 - sponsor of
71:20 - of coding train a very very um dedicated
71:22 - uh
71:23 - sponsor and what i'm going to do now is
71:26 - just um take a short
71:28 - like hopefully less than five minute
71:30 - break um if you have nothing to do
71:32 - during this five minute break
71:34 - uh you're welcome to go ahead and sign
71:35 - up at brilliant.org codingtrain
71:37 - but i will be right back i'm going to
71:40 - continue writing this code to try to
71:41 - finish this project if i could get back
71:43 - in four minutes i'll have 45 minutes
71:46 - to finish this project so please uh take
71:48 - a break yourself if you can stretch
71:50 - get some fresh air meditate something
71:53 - practice some self-care please um i'm
71:56 - gonna go get like a granola bar or
71:57 - something give me a little energy
71:59 - for the next 45 minutes and then i will
72:01 - be right back
72:02 - to finish um this particular project
72:06 - all right so see you i'm gonna put up
72:07 - the intermission uh animation
72:10 - right now and i will be uh right back
72:13 - [Music]
72:17 - i'm muting my microphone
72:23 - [Music]
72:34 - do
72:39 - [Music]
72:45 - [Music]
72:48 - do
72:50 - [Music]
73:16 - so
73:18 - [Music]
73:24 - [Music]
73:34 - [Music]
73:59 - [Music]
74:11 - [Music]
74:26 - do
74:29 - [Music]
74:40 - [Music]
74:54 - do
74:57 - [Music]
75:10 - [Music]
75:18 - [Music]
75:36 - do
75:41 - [Music]
75:53 - [Music]
76:04 - do
76:07 - [Music]
76:19 - [Music]
76:29 - [Music]
77:00 - so
77:03 - [Music]
77:28 - do
77:40 - okay i'm back
77:43 - whew that was a good break all right
77:45 - how's everybody doing
77:48 - i got a lot of flights of stairs to go
77:50 - down from the attic let's get something
77:53 - okay i'm back we're gonna make this
77:55 - happen people
77:57 - um how's everybody doing okay um
78:01 - oh nice some people are saying nice
78:02 - things in the chat that is very kind of
78:05 - you i very much appreciate it
78:06 - okay so we have now added oh we're just
78:08 - gonna do one layer
78:11 - so uh and i want to change this back to
78:13 - two
78:15 - so i have a sequential neural network
78:18 - but okay if you just
78:19 - are tuning in i'm trying to write a
78:21 - neural network
78:23 - to make a mouse
78:26 - movement predictions so i have a
78:28 - training data set of me moving my
78:30 - mouse pointer around in circles and
78:33 - eventually i would like to have used
78:34 - different data
78:35 - and i'm now going to see if i feed that
78:37 - into a neural network
78:38 - using tensorflow.js if i can get it to
78:41 - make the prediction to move the mouse
78:42 - around in circles
78:45 - okay and uh i had a little piece of
78:48 - toast
78:48 - with a little peanut butter on it in
78:50 - case you were wondering i feel so much
78:52 - better
78:53 - i'm like a like i could just like
78:55 - survive for the rest of my life with
78:56 - just peanut butter
78:57 - just just putting that out there
79:02 - okay uh and some water had some water i
79:05 - i wanted to make a coffee but that's
79:07 - kind of late and
79:08 - i didn't really have time that would
79:11 - take too much time to pick a coffee i
79:12 - don't
79:13 - have that much time to find my break all
79:14 - right so what's next let's go back to
79:16 - the
79:16 - tf.js and thanks again to brilliant the
79:19 - sponsor
79:20 - let's go back to the tf.js
79:23 - page so the next thing i need to do
79:27 - is usually have to like compile the mod
79:29 - the model
79:30 - or something or add some kind of loss
79:33 - function optimizer
79:35 - [Music]
79:39 - i mean i wonder if it has like a default
79:41 - of all that stuff
79:44 - tf sequential usually like um
79:51 - oh maybe that's all under model compile
79:54 - yeah how come there's not an example of
79:58 - using compile i mean i could just go to
80:00 - my
80:01 - uh examples so i by the way
80:04 - let's let's do this i made a bunch of
80:06 - examples a bunch of years ago
80:09 - let's see uh
80:12 - examples p5 or something
80:16 - well these are my videos now this is
80:18 - what i'm looking for
80:19 - so this is from well i guess i made a
80:23 - change on 2019
80:25 - but these are a bunch of examples i did
80:26 - let's look at this um
80:29 - color classifier which is probably
80:31 - relatively similar
80:33 - what did i do ah right so
80:38 - i did this a little bit differently
80:39 - that's interesting i like how this is
80:40 - done
80:41 - so i didn't put in the specific
80:43 - activations i'll get to that but this is
80:46 - what i need
80:48 - all right let me just copy this sorry
80:51 - everybody
80:53 - let me just copy this in here for
80:55 - expediency
80:57 - so all right so what am i doing here
81:01 - and this is i'm gonna i'm gonna change
81:03 - this stuff
81:04 - so basically this is this here
81:08 - is architecting the model and
81:11 - that is saying that here are my layers
81:15 - just two layers the first one that gets
81:18 - this input
81:19 - and you might be asking like well why is
81:20 - there no input shape in this layer
81:22 - i could put one but the tensorflow.js
81:26 - the model can
81:27 - figure out what the input is into the
81:30 - second layer
81:30 - because it's the output of the first
81:32 - layer which is 32
81:34 - but the first layer doesn't know what
81:37 - its inputs are
81:38 - because that's my data so this is me
81:40 - defining like oh this is my data
81:42 - then put 32 things in here and i don't
81:45 - so i could if i wanted to
81:46 - do something like this
81:50 - i think it would be this but um
81:54 - unnecessary
81:56 - whoops okay ah
81:59 - so many auto fill so now once you
82:03 - um and so let's let's just sort of see
82:05 - like what once i've architected the
82:07 - model
82:08 - i need to say model dot compile
82:13 - it basically the tensorflow.js is going
82:16 - to do the work behind the scenes to like
82:18 - set up all the data structures and
82:21 - memory
82:22 - and math stuff that it needs to do based
82:24 - on it doesn't want to do that until it
82:26 - knows what all the layers are
82:27 - so i'm just curious if that if it'll
82:29 - like compile in some default way
82:31 - or if it gives me an error
82:36 - whoops
82:38 - oh and let me um i don't need to print
82:41 - out
82:42 - the input anymore so i've seen that it's
82:45 - right
82:47 - right so this is what i expected it's
82:48 - giving me an error
82:50 - it cannot read property loss of
82:52 - undefined
82:53 - so what is loss and i think that by
82:56 - accident i'm like
82:57 - using some meme or something that i'm
82:59 - not aware of because i'm an old
83:03 - loss is the term to summarize
83:07 - the total error of a neural network as
83:10 - it is
83:10 - going through its training data so it's
83:13 - looking at its training data and
83:14 - trying to make predictions that match
83:17 - the actual answers that are embedded
83:20 - into that training data and if it's
83:21 - getting if it got everything 100 right
83:24 - its loss would be a nice big round zero
83:27 - of course that never happens and if it
83:29 - is a zero it's probably
83:30 - over fitted which is a term for like
83:32 - your model is so good at making
83:34 - predictions based on the actual
83:35 - training data that when it's deployed
83:37 - into the world with non-training data
83:40 - it's not going to do very well but so uh
83:43 - in order to define the loss function
83:46 - um well i need something that defines it
83:51 - so um we can see here i could add and
83:54 - let's add that in
83:55 - loss now it says categorical cross
83:58 - entropy here
83:59 - which is um just from my other example
84:01 - that's a kind of loss function
84:03 - that is well suited for classification
84:06 - algorithms
84:07 - which isn't really what i'm doing here
84:09 - so um i'm going to look for
84:11 - i think it's just root means mean
84:15 - square root mean squared i've lost my
84:19 - um sense
84:22 - again of uh let's see so let's see what
84:24 - are the optional options
84:26 - up let's say categorical
84:30 - cross entropy
84:33 - it's got to be ah here we go mean
84:35 - squared error
84:36 - this is what i think i want to try so
84:38 - these are a bunch of different like
84:39 - metrics
84:40 - for measuring the how the neural network
84:42 - is doing i'm going to grab mean
84:44 - squared error let's try that
84:48 - now let's see what happens
84:53 - all right so i it needs all the stuff so
84:57 - it also needs a optimization
85:00 - function so what does that mean so the
85:02 - neural network is
85:04 - full of all of these weights if i went
85:06 - back
85:07 - uh if i went back to the original
85:11 - um uh if i went back to that diagram
85:14 - from brilliant.org
85:15 - from the brilliant website you would
85:18 - have seen all these little lines that
85:20 - connect the different layers they all
85:21 - have weights
85:22 - so i need to figure out what how am i
85:24 - optimizing the weights
85:26 - to get to the most the best set of
85:29 - weights that produce the
85:30 - the lowest loss and so sgd
85:34 - stands for something called stochastic
85:36 - gradient descent
85:38 - that feels like a fine thing for me to
85:39 - use right now learning rate
85:41 - and a lot of my other videos cover this
85:43 - stuff in more detail is
85:44 - so if i have an error and i want to like
85:46 - twist a dial to adjust a weight
85:48 - to try to get that error lower like how
85:50 - much do i twist that dial like do i just
85:52 - make little tiny changes that i'm going
85:54 - are really big ones
85:55 - so let's um let's do
85:58 - let's do let's create this uh learning
86:01 - rate and optimizer and put that in there
86:04 - i actually don't think the metrics thing
86:05 - i really
86:06 - i don't know what the met someone i
86:08 - don't know why if metrics is just for if
86:11 - i want to like
86:13 - get a report on how it's doing or
86:14 - whether that's actually doing something
86:16 - but let's keep it because i don't know
86:19 - it sounds like accuracy
86:20 - feels like an important thing so
86:23 - basically i am
86:24 - doing this okay
86:28 - now something that was in my
86:31 - previous example was activation
86:34 - functions
86:36 - and i do need to get into what i want to
86:38 - use here because
86:40 - i certainly don't want to use
86:45 - close this tab close this tab
86:48 - you can see here that there's something
86:50 - called sigmoid and something called soft
86:52 - max
86:52 - so we'll talk about those i think i'm
86:54 - going to need different activation
86:55 - functions
86:56 - but once again i just want to see if
86:59 - this will run without an error
87:00 - great no error moving along
87:03 - next up ah
87:07 - i need to have the um
87:13 - so these are actually so this is often
87:15 - referred to as the x's
87:17 - um the x's being the inputs to a neural
87:20 - network
87:21 - and so my training data set would
87:23 - usually have x's and y's
87:25 - so that the inputs paired with the
87:27 - output so in the sort of canonical
87:29 - cats versus dogs image classification my
87:32 - exes would be
87:33 - a lot of images of cats and dogs and my
87:35 - y's would be
87:36 - cat cat all the correct labels that
87:38 - correspond to those images
87:40 - here
87:44 - my raw output or what is called raw
87:48 - output is the 11th
87:53 - xy so after i go through this
87:58 - the raw output
88:02 - should get
88:07 - [Music]
88:09 - next row is lines i
88:12 - plus j plus 1 and i should get
88:19 - an x y from that
88:26 - i don't know what to call this like i'll
88:29 - just call it maybe if i call it next
88:32 - that kind of makes sense and then
88:35 - push that x y into the raw output
88:38 - so these are the raw inputs chunks of 10
88:42 - and then the 11th that goes to 11 is the
88:45 - output
88:45 - although i think now this needs to be
88:47 - minus 1.
88:50 - so i should be able to also say y's
88:53 - is a tensor raw
88:57 - output and i should have
89:02 - rows comma two
89:06 - right let's print the y's
89:11 - let's just look at this also
89:14 - that's oh i don't have i plus j
89:20 - it's not i plus j and it's not i plus j
89:23 - plus one it's i plus
89:24 - chunks so chunks is 10.
89:31 - great so these are these are all the
89:33 - next positions oh they have to be
89:34 - normalized
89:37 - so they also have to be normalized so
89:39 - they should have they should be divided
89:41 - also by the width and the height
89:44 - great so these are the output tensors
89:50 - the reason why i'm doing that is because
89:52 - the next thing i need to do is call
89:53 - model.fit
89:55 - so fit is really a function for
89:59 - um oh it means what it says but
90:03 - you know you would think like oh next
90:04 - thing is train the model model.train
90:07 - and actually if you look at ml5 no train
90:11 - i am i'm contractually obligated to blow
90:13 - the train whistle
90:14 - um
90:19 - oh uh a train is the word that's used in
90:21 - ml5
90:22 - but fit is really what's going on here
90:24 - because basically
90:25 - i have this neural network and i have
90:28 - this trading data set
90:29 - and i want the neural network to uh
90:33 - fit i want to fit that d fit the data
90:36 - inside the neural network
90:37 - i want the date the neural network to
90:39 - learn from that training data set
90:40 - so i want oh i want to fit it why is it
90:44 - fit
90:45 - i can't get this to like make sense it's
90:47 - like it's so embedded in my brain to
90:48 - think of like
90:49 - i'm fitting the data like we're fitting
90:52 - the model
90:52 - fitting the model to that data
90:55 - that's what it is so what goes in
90:58 - model.fit
91:00 - oh let's i can see it here i think it's
91:02 - just x's and y's
91:04 - um we can look for um compile
91:08 - evaluate predict fit
91:12 - so we can see here and oh well here's my
91:14 - answer i could just do oh i can do
91:16 - something much simpler like just this
91:18 - by the way that's interesting so i want
91:21 - to say
91:22 - model.fit the x is the y's
91:26 - then and the number of epochs okay great
91:34 - let's see here so i'm saying model.fit
91:38 - the x's and the y's
91:40 - and then i guess i give it an object
91:42 - which i want to say like
91:44 - how many epochs so an epoch is it epochs
91:47 - or epoch
91:49 - i'm just going to say one right now and
91:51 - epoch
91:52 - is one time through all of the data
91:56 - batch size is also maybe important here
91:58 - but i'm going to ignore that for right
91:59 - now
92:00 - batch size is how many
92:03 - chunks of data should i batches of data
92:06 - i guess
92:06 - i'm saying chunks but a batch is like a
92:08 - chunk how many batches of data
92:10 - or how big should a batch of data be
92:12 - before i start tuning the neural network
92:14 - so if i have a thousand data points
92:17 - i might do batches of a hundred and that
92:20 - would be ten batches of a hundred
92:22 - and so i wanna use the um this is an
92:25 - asynchronous function
92:26 - it takes a while to fit the model so i'm
92:28 - going to put this in a function i'll
92:29 - call it train
92:34 - and i'm going to say this is oh it's an
92:36 - async function
92:38 - and i'm going to say await model.fit
92:42 - and i will call train
92:45 - so let's await and i i probably should
92:47 - use some callbacks and things like that
92:48 - but let's see
92:49 - what is it doing here let's just try oh
92:51 - there's a hiss
92:53 - well i get something out of it cool
92:58 - i guess i get information about you know
93:01 - how the model was trained and then i can
93:06 - um
93:08 - i see call that h i'll just do what
93:10 - they're saying what's i
93:12 - oh it's like calling fit a bunch of
93:14 - times that's interesting
93:17 - why would you call fit so here's my
93:20 - question
93:21 - why would you call fit five times
93:25 - why not just have it be 15 epochs
93:28 - that's confusing to me does anyone know
93:30 - the answer to that
93:35 - i don't know but i'm not going to worry
93:37 - about doing it five times
93:38 - let's just say um
93:44 - let's look at the total loss when it's
93:45 - done all right here we go people
93:50 - well that that didn't go well error when
93:53 - checking target
93:55 - got array 1424 comma two
93:59 - dense two to have three dimensions
94:10 - so my data is not
94:13 - formatted correctly
94:21 - um did i do that by accident in chunks
94:23 - of 10 also
94:30 - no
94:39 - i mean is it just no
94:43 - i mean i i kind of know how to get this
94:45 - to work with flattening the data
94:52 - um it resets the neural net
94:56 - people are answering that question in an
94:57 - interesting way but at first i want to
94:59 - get this to work
95:01 - so did it get through
95:06 - like let me just take this layer out for
95:07 - a second
95:10 - well that doesn't make any sense
95:11 - actually um
95:15 - shoot error when checking target
95:17 - expected
95:18 - density to have three dimensions but got
95:22 - so this is right that's the array's
95:26 - shape
95:29 - but it should have three dimension what
95:35 - uh no
95:43 - is it really like
95:49 - like is it this because the x and y are
95:53 - just
95:54 - one number that doesn't make any sense
96:03 - blank ten two
96:07 - blank ten where'd the ten come from
96:14 - put shape oh this is the bane of my
96:18 - existence with doing this machine
96:19 - learning stuff
96:21 - run the debugger there's a debugger i
96:23 - have no idea what that
96:24 - how that that works i'm gonna figure
96:28 - this out
96:29 - um
96:32 - okay got this
96:38 - blank 10 why is that where's this 10
96:41 - coming from
96:47 - so i i feel like i know a way to get
96:49 - this to work that i was trying to
96:51 - i guess the x y's being in pairs don't
96:53 - actually matter
96:54 - so i'm gonna do this differently
96:58 - if you will all um i'm gonna i'm gonna
97:01 - do this dif i would love to like
97:03 - figure out exactly what i did wrong here
97:05 - but i have an idea of how to do this
97:06 - differently
97:09 - oh yeah it's actually just this
97:14 - which is silly but
97:24 - third shape
97:31 - promoted shape oh
97:49 - okay okay all right i give up i'm gonna
97:51 - do this a different way
97:53 - um one thing i want to figure out is if
97:56 - i have an array
98:01 - if i have an array and i say a
98:04 - push 3 comma 2
98:08 - that's my array then a push
98:12 - 9 comma 10. great okay
98:22 - i need that for loop of x's and batches
98:26 - chunks is 10. 10 is the chunks okay hold
98:29 - on people are telling me something here
98:30 - that does sound
98:31 - reasonable
98:35 - oh
98:38 - no batches of ten
98:46 - the chat is being helpful to me but it's
98:49 - a little bit too much for me to follow
98:51 - um so i think i'm going to do this a
98:54 - different way that i kind of have more
98:55 - confidence in working
98:56 - the the fact that i'm keeping the x y's
98:58 - together is kind of irrelevant
99:00 - it doesn't really matter i'm not doing
99:02 - like a convolution here
99:04 - so that i could just flatten the data
99:06 - like it makes much more sense
99:08 - for me to just have this be 20 things in
99:10 - it
99:12 - so and then have the raw output be
99:16 - [Music]
99:18 - just two things so that this now is
99:27 - chunks times two
99:30 - right this is like basically just
99:32 - changing it
99:33 - to instead of having it be arrays of
99:35 - arrays
99:36 - it's just uh
99:43 - like a three-dimensional tensor it's
99:46 - just two-dimensional
99:47 - which i think is going to make more
99:48 - sense and then
99:51 - this is
99:56 - just chunks times two and then this
100:00 - oh no
100:05 - hold on let me look at the example
100:20 - hmm
100:23 - all right let's see this
100:27 - this is what i'm thinking
100:36 - yeah that worked
100:37 - [Laughter]
100:39 - so i i i i think me trying to do the
100:42 - the keep all the xy's together in their
100:45 - own little arrays
100:46 - set me off on a a bit of a tangent
100:48 - that's kind of unnecessary here
100:50 - um i know that was probably confusing
100:51 - for those of you watching because i did
100:53 - it in
100:54 - so basically let me explain what i did
100:57 - so i had it
101:00 - i had it originally as
101:04 - each each data
101:07 - point was the following
101:11 - xy so this is the inputs were
101:18 - like this with 10 of these but
101:21 - i think it's ultimately simpler for it
101:24 - just to be
101:28 - this
101:31 - so instead of having like lots of little
101:34 - internal arrays with each xy which could
101:37 - be useful
101:38 - in case i need to like do some
101:41 - operations where keeping them in pairs
101:43 - is really important
101:44 - but i'm not doing that so i think this
101:46 - is better
101:47 - now the other thing i want to do is i
101:51 - want to
101:52 - um
101:56 - i i want to be able to see
102:00 - the loss over multiple epochs probably
102:03 - so i know that and i'm running out of
102:06 - time here so i want to look for these
102:08 - i think i can pass in callbacks so i'm
102:10 - just going to grab this
102:14 - um which is some code that i have from
102:15 - another example that i saw
102:17 - uh it goes in the fit function
102:24 - and i think if i do this
102:28 - um
102:32 - so what's this on epoc and
102:37 - i don't need on batch end i'm just going
102:39 - to get rid of on batch and
102:41 - so i have callbacks
102:45 - in addition to epochs
102:48 - come on you can do it you can get this
102:50 - syntax right
102:52 - epochs callbacks
102:57 - that's on epoc end callbacks
103:02 - i'm trying to like organize this the way
103:04 - that it's and i i don't need this lost p
103:06 - html nonsense
103:10 - epochs one call backs
103:14 - on epoch
103:17 - there on there and then
103:22 - there we go so i added a callback
103:25 - and little let's give it 10 epochs and
103:28 - then
103:29 - what what how do i get oh how do i get
103:32 - um
103:32 - what did i do in my example uh logs lost
103:36 - to fixed so let's grab that
103:40 - epoch logs so let's do
103:44 - let's print out the epoch
103:48 - plus
103:51 - logs loss to fixed
103:57 - i don't need a plus that's why i'm using
103:58 - this string literal
104:00 - epoch and then loss
104:06 - so let's see what happens here
104:12 - so interestingly i am getting a loss of
104:15 - n-a-n whoops i didn't mean to split the
104:18 - pain
104:20 - i have pain i didn't mean to split it so
104:23 - um and whoa everything got so wide all
104:25 - of a sudden
104:31 - okay now
104:35 - i think what's missing from this is a
104:38 - couple things one is thinking a little
104:39 - bit about this
104:40 - optimizer so i'm not sure if i'm using a
104:43 - really
104:44 - so-called smart optimizer here but more
104:48 - importantly i think the thing that's
104:50 - really missing
104:51 - are what are the activation functions
104:55 - so i don't know what they are by default
104:59 - but i am going to put in
105:03 - to both of these the
105:06 - sigmoid activation function all right
105:09 - given that i have about 15 minutes left
105:11 - in today's live stream
105:12 - it's unlikely i'm going to really dive
105:15 - too deeply
105:16 - into what is an activation function
105:18 - definitely somewhere in one of my video
105:19 - tutorials i cover it
105:20 - but if i were to if you were to think
105:22 - back to that um do i still have it open
105:25 - the brilliant neural network library but
105:27 - let's um
105:30 - um let's see if i can find one that
105:34 - would sort of make sense in this context
105:36 - so i just want a um here we go perfect
105:40 - so this is basically um
105:44 - a pretty this is a two layer network so
105:46 - there's
105:47 - how many inputs i have 20 inputs because
105:49 - i have 10 xy pairs
105:51 - my hidden layer has 32 and my output
105:53 - layer has
105:54 - two not one so that's the only thing
105:55 - that's different but basically as the
105:58 - data flows through this sequence
106:00 - it has to be processed it's a weighted
106:02 - sum so the input values
106:03 - are multiplied by the weights of the
106:05 - connections and then are passed through
106:07 - what's called an activation function
106:09 - the activation function has does a lot
106:11 - of you know serves a
106:13 - few different purposes but in this case
106:15 - what i'm really thinking of
106:16 - is it takes the
106:19 - um the the weighted sums and squashes
106:23 - them
106:24 - and so one of the things that is
106:25 - important to me here is that
106:27 - i want outputs of the neural network
106:29 - that are between 0 and 1
106:31 - so i can expand those easily back to
106:34 - 1920 by 1080.
106:36 - so um so i i really do want the output
106:39 - layer to be sigmoid
106:40 - um there is something that's sort of
106:42 - more modern more
106:43 - more sort of like currently used which
106:45 - is called
106:47 - relu rectified linear unit which just
106:51 - chops up the negative values i have no
106:54 - negative values though
106:56 - i wonder if i should be mapping my data
106:58 - based off of like 0 0 in the center
107:00 - so this is really what i'm not sure this
107:02 - is also why using the
107:05 - vector between the next point and the
107:07 - previous point might make more sense
107:09 - i don't really know but let's just try
107:12 - it like
107:12 - let's just let's just live in like you
107:14 - know the 1990s
107:16 - and really very basic like
107:20 - kind of classic neural network
107:22 - architecture
107:23 - with just like the sig classic sigmoid
107:26 - activation function
107:27 - with stochastic gradient descent i'm
107:29 - going to lower this learning rate to
107:31 - something much
107:31 - lower and let's see what happens
107:38 - oh yeah look at that my loss
107:42 - what by the way is this is just some
107:44 - like auto print out something
107:46 - like do i not need to do this in node
107:48 - like maybe i don't i don't need this
107:50 - callback at
107:51 - all i went all that time to do that call
107:52 - back because
107:55 - node is going to automatically print out
107:57 - stuff for me well that was silly
108:01 - so i'm going to take that out of my code
108:03 - and i could well that's fine
108:05 - let's give it like 20 epochs
108:09 - oops no no i don't need to do that
108:12 - okay it's going down i kind of like that
108:15 - i mean
108:16 - is it still going down let's give it a
108:18 - 100 epochs
108:22 - down down down it goes
108:29 - huh this is working surprisingly well
108:35 - why is this loss are these like the
108:39 - internal batches or something why do i
108:41 - have this nice
108:42 - beautiful loss that's going down and
108:44 - then this lost the tire
108:51 - regardless
108:54 - i think now
108:58 - i can try to make some predictions
109:03 - i'll make a function called go
109:12 - and i'm going to say await
109:15 - train now i'm going to say um
109:20 - i'm going to make a function called
109:21 - predict
109:26 - oops
109:28 - and basically what i want to do
109:31 - let's take any arbitrary
109:35 - what do i have is it raw input
109:39 - i want to take any arbitrary sequence of
109:41 - 10
109:43 - from my actual raw input so let's
109:46 - pick um
109:50 - let's say i'm going to take a random
109:51 - number
109:54 - a math.random times
109:58 - rawinput dot length
110:02 - math.floor that
110:06 - and then and and it should be actually
110:09 - times raw input.length
110:12 - minus chunks
110:15 - is that right are chunks
110:24 - oh oh i could just take one of them i
110:26 - already have it
110:27 - okay great sorry sorry sorry
110:31 - raw input.length
110:35 - now i'm going to say my inputs
110:38 - my input is raw input dot index
110:41 - r and then the x's
110:45 - are tf tensor
110:50 - inputs
110:52 - and i should put that in an array i
110:54 - think and the shape
110:55 - is chunks
110:59 - times two just one of them
111:03 - right because uh a one
111:06 - comma chunks times two i'm just going to
111:08 - predict one thing
111:12 - i'm trying to create i'm trying to just
111:14 - test right and then i can say
111:17 - uh the outputs are
111:21 - model await model dot predict
111:26 - so passing now i'm using just some of
111:29 - the training data which i realized i
111:30 - should
111:31 - create my own data like i should move
111:32 - the mouse and then have it continue
111:35 - i won't get to that probably today but i
111:37 - will get to that at some point
111:40 - um i want to get those outputs and let's
111:43 - just see
111:44 - if i get something
111:47 - so we're going to say await train await
111:50 - predict
111:52 - um say
111:56 - training complete
112:04 - i'm making a prediction
112:09 - all right let's see
112:13 - uh await train
112:16 - oh this has to be an async function also
112:18 - now
112:20 - i need to call go
112:24 - all right let's see what happens okay
112:26 - it's training the model
112:29 - loss is going down
112:36 - and then hey i got a prediction now
112:39 - that's a little bit
112:40 - disheartening that the prediction is
112:42 - like be in the middle
112:44 - like i feel like that's not very good
112:48 - like maybe that's what it actually
112:50 - should be but that seems
112:52 - um let's let's do a bunch of different
112:56 - predictions
112:58 - and um what i should also do is
113:02 - um i should
113:05 - actually pull it out of the tensor so
113:08 - you can call the dot data function
113:11 - and then i can just console log the x y
113:13 - because in theory
113:15 - what i could do now is just tell the
113:18 - mouse to go to these locations
113:24 - training
113:29 - let's see what i get do i get all
113:33 - yeah see i don't know i mean was my
113:36 - mouse moving around the center and
113:37 - does that seem reasonable so hard to
113:39 - know
113:43 - i suppose i could quickly spin up the
113:45 - next step
113:47 - i mean i think for this to feel at all
113:49 - satisfying i should
113:52 - so um
113:56 - uh right because we're not we're not
113:58 - really seeing if this works at all so
113:59 - let's
114:00 - let's let's go to the next step and i'm
114:02 - gonna um in order
114:03 - in order to be a bit more expedient here
114:06 - i'm gonna go
114:06 - to the code from my talk um
114:10 - repository and just grab like what i did
114:13 - here which is to add a quick
114:15 - server although i guess i could use
114:18 - wait a second
114:22 - let me go back through the discord i can
114:24 - control the mouse with
114:27 - um
114:31 - um where was that dusk i saw
114:34 - print gave me the link but i can't find
114:37 - it now
114:37 - oh i'm sure i can google it uh npm
114:41 - robot.js let's try doing this without
114:43 - processing
114:44 - so this will be new so there's a node
114:46 - package for desktop automation
114:48 - just like in java it's called the robot
114:50 - class it's called robot.js
114:52 - so let's try adding that and we're gonna
114:54 - start moving the mouse it'll be fun
114:56 - uh you know depending on what your idea
114:59 - of fun is
115:02 - uh definitely for me this is my idea of
115:04 - fun
115:06 - okay so actually what i need to do
115:09 - that's
115:10 - different is back into the code before i
115:13 - could do that
115:16 - this was a very silly thing that i did
115:18 - which was just like
115:19 - oh let me predict this a bunch of times
115:22 - so what i really want to do is
115:26 - um here we go i want to start
115:32 - with some inputs
115:38 - so i'm going to start with an arbitrary
115:40 - set of inputs
115:44 - and then i will call
115:49 - something called predict my own function
115:52 - called predict
115:54 - based off of those inputs and i'm going
115:56 - to get hopefully a next point there
115:58 - so predict based off those inputs
116:04 - get the x's get the outputs
116:07 - get it as an x y but return that
116:12 - then um
116:15 - and i want to do this then i want to say
116:18 - let's just do it like 10 more times
116:22 - i want to take the hmm i should probably
116:25 - i'm going to call slice just to make a
116:28 - copy of it slice makes a copy of it
116:30 - right
116:30 - because then what i want to do is i want
116:32 - to say inputs
116:34 - dot splice
116:38 - the first two elements like i want to
116:40 - take the first two off
116:43 - and then inputs dot push
116:52 - push the new the prediction it just got
116:56 - and then
116:59 - this should be let maybe and then
117:02 - next is predicted again right won't this
117:05 - do a nice little loop
117:07 - where i
117:11 - start with 10 mouse points i predict the
117:13 - next point
117:15 - once i've got the next point i take out
117:17 - the two oldest points
117:18 - put it in and then get a new next point
117:21 - and do that 10 times won't that work and
117:24 - this should be
117:25 - a weight and this should be a weight
117:29 - pretty sure that's right it's a little
117:32 - silly that i have to oops
117:33 - a little silly to have to train the
117:34 - model each time but i'm not
117:37 - it's so fast because it's so little data
117:39 - that i'm not going to worry about that
117:47 - okay oh how how come it didn't do any
117:50 - prediction
117:51 - did i not console log anything oh i'm
117:54 - not console logging
117:56 - anything so let me hold on hold on where
117:59 - was that
118:00 - where am i doing prediction i've lost it
118:02 - sorry for all the scrolling
118:04 - i'm getting a little tired again oh this
118:06 - is where i call predict but i want to do
118:07 - it here
118:09 - next
118:12 - so maybe this is probably like
118:19 - let's just do this a little silly but
118:22 - i'm just gonna
118:23 - log it here and then log it here okay
118:27 - uh and let's just uh let's lower the
118:29 - number of epochs just
118:30 - to get to see that it's working
118:34 - yeah look at that so those are the 10
118:35 - next mouse positions to move to
118:38 - so now in theory where is this
118:42 - robot js thing
118:46 - i was there robot.js um
118:50 - let's go to github
118:54 - and see okay robot equals require
119:00 - robot.js
119:04 - now key tap
119:07 - mouse get mouse position i want to move
119:10 - the mouse
119:11 - robot move mouse is it really that easy
119:14 - what does
119:15 - set mouse delay do well
119:21 - so now is it really as
119:26 - so let's say move mouse next oh no no no
119:29 - no i want my own
119:31 - function
119:34 - no wow it really wants to type out what
119:36 - i want to do
119:38 - but and then i'm going to write function
119:40 - move mouse this is very bad it's going
119:42 - to take over my mouse
119:44 - and then point
119:47 - point comma 0 times 1920
119:52 - point point comma 1
119:57 - times 1080. okay everybody are you ready
120:00 - to watch my mouse get
120:01 - my the ai take control of my mouse
120:06 - this is going to do it for 10 points
120:08 - let's let's throw caution to the wind to
120:10 - give it a hundred
120:16 - is my mouse moving oh wait what
120:20 - what what happened there
120:24 - uh
120:28 - it didn't print out the uh
120:32 - uh didn't print out the predictions
120:35 - well i took out the prick to not
120:37 - predictions because i
120:40 - do i need like a callback for moving the
120:42 - mouse or a mouse delay
120:43 - it probably did it so fast i guess i
120:45 - need that mouse delay
120:48 - uh let's that's speeding it up no
120:52 - okay hold on no it's doing it just like
120:55 - does this work let's just try this for a
120:56 - second
121:02 - weird okay
121:05 - did it do it
121:09 - let's um let's console log
121:15 - let's console.log what we're putting in
121:20 - here
121:23 - well let me check the chat here that's
121:26 - where it was supposed to go
121:28 - i don't think it's working very well
121:30 - this is what i didn't think would work
121:33 - set mouse delay a hundred make sure
121:36 - you're focused on the terminal
121:38 - okay so i need to
121:42 - set mouse delay let's try that
121:45 - robot set mouse delay
121:49 - 100 and let's let's let it train the
121:53 - model
121:53 - a little bit longer
121:57 - and see
122:08 - i don't even know where the mouse is
122:15 - i don't see the mouse does anybody see
122:16 - where it is i can't find it
122:21 - 958 should be like
122:25 - is this where it was let's okay let me
122:27 - put it over here
122:28 - i'm going to put the mouse over here
122:30 - everybody see it over there here's where
122:32 - it is right
122:33 - it's over here between these leaves
122:37 - but clearly this is not working because
122:39 - it's just stuck in one place
122:43 - so this is my problem wait where'd the
122:45 - mouse go
122:47 - it already moved
122:54 - where'd it go
123:05 - this is the end of our today's live
123:07 - stream i'm actually just really curious
123:09 - to try
123:09 - this example with the sine wave this is
123:12 - really
123:13 - but where is it getting oh okay let's
123:15 - i'm just curious to try this
123:18 - um let's just try this um
123:23 - mouse i'm going to create something
123:26 - called mouse.js
123:34 - so this i just want to see this
123:39 - i just want to watch to see if this
123:41 - moving in a sine wave works
123:44 - let's try this example
123:50 - where is the mouse
123:55 - am i just blind okay i'm starting it
123:58 - over there
123:59 - do you see it it's over there i'm gonna
124:01 - keep my i'm keeping my eyes glued to the
124:03 - mouth
124:04 - okay i'm looking straight at it oh wait
124:10 - i'm looking straight at it as soon as i
124:12 - do that it's gone
124:15 - i can't find it
124:23 - interestingly and i'm able to move it
124:27 - myself
124:28 - what am i missing i'm looking in the
124:30 - chat to see if anybody's
124:31 - telling me could be going behind the
124:34 - window
124:35 - it could be going behind the window
124:37 - that's interesting
124:40 - let me see i i should read the
124:42 - documentation a little bit better
124:48 - i mean that's what i should see
124:54 - if you need to build no i'm gonna be in
124:56 - here
125:01 - xcode i mean i have all this
125:07 - huh
125:11 - pull up a blank white screen that's not
125:13 - a bad idea
125:14 - look who has a nice blank white screen
125:21 - why also is it's just stopped
125:37 - do i have my cursor set to hide when i
125:39 - type
125:46 - oh yeah my cursor is set to hide when i
125:49 - type
125:51 - so where is that is that is that a um
125:55 - that's weird where is that setting
126:06 - okay why does my cursor disappear
126:10 - control panel mouse properties pointer
126:12 - options okay
126:16 - i have to go soon people there's a
126:18 - conference happening i got to get set up
126:20 - for that
126:21 - but i just want to see this work um
126:25 - let me make sure nobody's sending me any
126:28 - crucial
126:30 - like emergency messages
126:34 - okay not that i see all right um
126:37 - where was that mouse mouse properties
126:42 - no control panel mouse properties
126:49 - is this not on the mac well this is like
126:50 - from 2013.
126:55 - quickly shakers
127:00 - that doesn't seem like the right stop is
127:02 - it is it a i term setting
127:04 - yeah wait hold on yeah it's only an i
127:08 - term
127:09 - it's an item setting
127:12 - pointer ah
127:17 - click what
127:22 - focus follows mouse
127:26 - that's weird
127:31 - nobody knows huh
127:38 - why
127:51 - i think i spelled disappears wrong
127:58 - [Music]
128:06 - use vs code in build terminal wiggle it
128:09 - as soon as i run the script yeah but
128:11 - the whole point is
128:20 - ah wait i think i got it except it's not
128:23 - moving
128:31 - first of all why is it taking so long oh
128:34 - because i have the delay to 100.
128:42 - oh i don't set a break point like it
128:45 - shouldn't let me
128:48 - move the mouse let's
128:51 - all right hold on this must be an os x
128:54 - thing all right i should just go back to
128:57 - processing
128:58 - processing definitely works ah i should
129:00 - have been there
129:01 - so this is like i got sidetracked trying
129:03 - to do this in node all right don't worry
129:05 - everybody
129:06 - it's okay just give me a second here i'm
129:08 - gonna i'm gonna not worry about trying
129:10 - to do this in node anymore
129:13 - um all right so this is this is this is
129:16 - great so i'm gonna go back to
129:18 - um somebody can help me figure that out
129:20 - but let's let me go back to
129:22 - my actual uh
129:26 - what i did where where is this one
129:30 - no no uh predict mouse movements okay
129:35 - so what i did when i was trying this is
129:38 - i just can quickly add a node server i'm
129:41 - just gonna i'm just gonna get all of
129:43 - this from the
129:45 - so i'm going to grab this
129:50 - and go back to here let's take out this
129:54 - mouse move
129:58 - and i am going to um so i'm going to say
130:02 - npm install
130:04 - express
130:10 - so now what i'm doing is
130:13 - i'm creating a little server oh and i
130:16 - made random inputs
130:18 - which um oh that's interesting
130:23 - i did this in a different way eventually
130:24 - i think but
130:26 - sorry i'm just thinking about this um
130:30 - [Music]
130:33 - mouse
130:36 - so that's fine i'm going to start with
130:37 - something random
130:40 - then i'm going to call await this is the
130:41 - same thing all right this is
130:43 - and then send those back so this is
130:45 - basically from processing
130:47 - i can just ask for the next two points
130:50 - let's see if this works so now i'm going
130:53 - to go into processing
130:58 - create a new sketch i am going to
131:01 - import the http request not pz cam
131:06 - import the http request for processing
131:09 - and again because i'm kind of out of
131:11 - time here
131:12 - um i am going to really just grab this
131:15 - mouse
131:16 - you know what i'm just going to grab
131:17 - this completely
131:22 - so basically oh but i was doing
131:24 - something more here
131:25 - was i i'm not sure
131:29 - um let me just grab this
131:42 - i don't i don't know what this is doing
131:44 - oh yeah
131:46 - oh because i was working with vectors at
131:48 - this point all right i'm gonna make this
131:49 - much simpler
131:54 - okay so mouse mover
131:58 - so and then import the library
132:02 - i just want to have a little win here
132:03 - before the end okay
132:05 - so i am going to
132:12 - uh the other thing i need is i need to
132:17 - get the content back and console log
132:20 - it okay
132:25 - and print line move to
132:28 - so basically what i'm doing here now is
132:32 - in my server instead of actually calling
132:40 - instead of calling predict here
132:44 - i'm just going to train the model
132:47 - and then whenever processing
132:50 - sends a get request to the server it
132:53 - will run the prediction
132:55 - and send the xy back to processing so
132:57 - let's try this
132:59 - i just think no oh i'm not running the
133:02 - server that would help to run the server
133:08 - not not that
133:12 - we're almost there folks land this plane
133:15 - no what happened
133:18 - uh snapshot is not defined index
133:22 - index.js line 99.
133:25 - oh uh snapshot is like
133:28 - chunks chunks times two
133:35 - right because i need 20 numbers i think
133:37 - that's right
133:42 - okay training the model
133:47 - once the model is trained
133:52 - i love how i really thought i was going
133:53 - to get to like trying to use a recurrent
133:55 - cell
133:56 - once the model is trained i'm going to
133:59 - hit
133:59 - run okay great look at this i got it
134:02 - back
134:03 - i got the xy back beautiful so then now
134:06 - i just need
134:08 - uh will it oh it's already doing
134:13 - it's already doing the splicing so it'll
134:16 - give me the next one so now
134:18 - i can just say uh void draw
134:27 - avoid setup
134:32 - okay right now i'm getting mouse
134:34 - positions again this is going to be very
134:36 - sad because it's
134:37 - obviously clearly not going anywhere of
134:39 - note
134:42 - but uh let's at least get it to work so
134:44 - all i need now is
134:47 - um the robot
134:52 - we are the robots
134:57 - uh import i think it's from java.awt
135:02 - and i need to say a robot robot so i've
135:05 - got the robot
135:06 - and now the only function i really need
135:08 - is called robot mouse move
135:12 - and uh i will say um
135:18 - uh the the values
135:22 - are convert move to
135:26 - splitting up by a comma to floats
135:30 - and then mouse move
135:34 - to values index 0
135:38 - times 1920 and values index
135:41 - 1
135:45 - by 1080.
135:49 - what's wrong here uh it needs uh double
135:52 - quotes
135:54 - let's just make sure this actually works
136:02 - and
136:05 - yeah right i don't it's it's keeping it
136:08 - in the center
136:13 - oh so sad let's um
136:17 - yep let's make this look a little bit
136:18 - more interesting
136:20 - uh
136:26 - i should do the sine wave but uh
136:30 - and i'm gonna do something terrible but
136:33 - i can't resist
136:37 - um
136:45 - so instead of using the neural network
136:48 - let me just pick some random values
136:50 - oh that's p5 code
136:53 - just so i can see the mouse actually
136:55 - move and then i will upload this code
136:58 - and maybe somebody can help me
137:00 - develop the model architecture in a way
137:02 - that it actually does something
137:04 - um i should really start i should have
137:06 - also started with
137:07 - actual mouse points that are going in a
137:09 - circle but i have to wrap this up
137:12 - uh let's just give it one epoch
137:18 - okay here we go everybody
137:26 - yay the mouse is moving randomly you can
137:29 - see it
137:32 - have a better idea
137:36 - oh no no i gotta stop so you you get the
137:38 - idea
137:39 - i'm looking at the chat just for a
137:40 - second
137:42 - all right so we have all the pieces
137:44 - working right
137:46 - i have just to just to recap for a
137:48 - second is i'm going to post all this
137:49 - code
137:50 - and i would welcome any contributions i
137:52 - didn't get to actually implementing the
137:53 - recurrent neural network
137:55 - i think there's also there's just like
137:56 - probably a lot of fundamental flaws
137:58 - in exactly the way that i'm doing this
138:00 - in the sense that
138:02 - i don't i just don't even know if it's
138:04 - really reasonable
138:05 - to expect that 10
138:08 - x y positions could predict the next one
138:10 - i don't know it doesn't sound so crazy
138:12 - to me
138:12 - so i think it's really the model
138:13 - architecture but let's just recap
138:16 - so i have a training data set of xy
138:19 - positions
138:21 - i have node code that and i'm going to
138:25 - take this out we don't need this anymore
138:27 - that loads that data set puts it into
138:29 - tensors
138:30 - it's ready for a neural network then i
138:32 - take it in groups of 10.
138:34 - so 20 values 10 x y pairs
138:38 - with the next position so the x's are
138:41 - all those
138:42 - 20 values and the y's the output of the
138:44 - neural network is just two values the xy
138:47 - prediction
138:48 - i set up maybe i should have tried just
138:50 - like
138:52 - a different activation function who
138:53 - knows but i set up one layer
138:56 - with 30 or i never even bothered to
138:58 - explore like how many hidden layers
139:00 - one output layer i never explore
139:02 - different activation functions
139:04 - i never explore different optimizers
139:06 - different loss functions
139:07 - so all these things are things you could
139:09 - explore then
139:11 - this is no longer relevant
139:15 - um then i'm training the model then
139:18 - after i train the model
139:21 - when it's done there is a node
139:24 - server that can just receive a message
139:28 - like at a particular route and then it's
139:30 - going to well i should put this back
139:33 - call predict
139:34 - on the model and if
139:37 - you know the input that this is a flaw
139:40 - here i just made random numbers
139:42 - for the input data that's probably a big
139:43 - problem so this is something that uh
139:46 - could use so let me actually put some
139:48 - notes in here
139:49 - how to start the input
139:52 - pull from training data here's something
139:55 - else
139:56 - um
140:00 - should i try more
140:04 - or fewer points
140:07 - um is
140:10 - this model architecture reasonable
140:15 - uh try different activation function
140:20 - um so this is something you could
140:22 - explore
140:26 - all these things are things what what
140:30 - optimizer
140:31 - and loss function so that all and
140:34 - and this is all otherwise quite
140:36 - reasonable training it
140:39 - calling predict having processing call
140:42 - predict and then this
140:43 - also is totally i mean there's nothing
140:45 - to this code
140:46 - it's just like hey
140:49 - uh once a second
140:52 - query for a mouse position and move the
140:54 - mouse so i'm going to
140:56 - very very quickly the last act of this
140:59 - live stream
141:01 - oh i forgot to scale it up when i used
141:03 - robot.js
141:04 - was that the problem is i don't know
141:07 - still a mouse was disappearing who knows
141:09 - okay i might have forgotten to scale it
141:11 - up when i was using robot.js
141:14 - ah i think i did oh anyway
141:18 - too late um let me very quickly make a
141:21 - github repo
141:23 - i mean honestly this is mostly what's in
141:25 - that other repo
141:27 - um but let me put it in the coding train
141:31 - and just call this mouse
141:34 - live stream april 30th
141:40 - let's make this public and add a readme
141:45 - um let's oh add a file
141:50 - i definitely need to do a like dot git
141:53 - ignore because
141:56 - um then i want to say dot
141:59 - or node modules i don't want any node
142:01 - modules okay
142:03 - so commit that and then
142:07 - now let me this is like a a crazy way to
142:09 - commit a project
142:10 - but it'll do oh no i don't want this
142:16 - so let me add this up here
142:20 - uh there we go
142:25 - so here's that code and then the
142:28 - processing sketch i guess is unnecessary
142:30 - if um
142:34 - if the robot.js in node worked
142:38 - but let's uh put this in here
142:41 - but now you have all the code i can go
142:43 - to uh the coding train discord shout out
142:44 - to the coding train discord
142:47 - posting the link into the chat while i
142:49 - live stream
142:50 - there there's a channel here called
142:52 - schedule where i will
142:54 - um if things are going well post
142:57 - announcements about when the next live
142:58 - stream will be
143:00 - and then um
143:04 - and then uh links is where i will share
143:06 - things that i'm doing like for example
143:08 - uh there now that repo is there and then
143:11 - also i think probably for reference
143:14 - um you know why don't i share this link
143:16 - as well
143:17 - all right that i know this is like a
143:19 - kind of a rush to
143:20 - um get out of here but
143:24 - um this is the end of today's live
143:26 - stream
143:27 - just peeking at the chat yeah so you
143:30 - know um
143:31 - something that i'm in was interested in
143:33 - trying is um
143:35 - there's something called deep svg so
143:38 - if i could convert all my mouse
143:40 - movements into svg
143:41 - then i could potentially use this to
143:44 - predict
143:45 - the next mouse movement so that i would
143:47 - love to explore
143:48 - the thing that the next step that i
143:49 - wanted to explore that i never got to is
143:52 - um if i go to tensorflow.js
143:56 - and look for
143:59 - [Music]
144:02 - api no api tensorflow.js
144:08 - this is what i was recurrent neural
144:10 - network yeah
144:12 - so there's no this in theory is what i
144:15 - really should be using from the start
144:17 - but i didn't don't feel confident enough
144:19 - in my tensorflow.js knowledge that i
144:21 - wanted to try
144:22 - this method first but this is my next
144:25 - step if anybody
144:27 - wants to take this project and
144:29 - experiment with doing it with
144:31 - tf.layers.rnn
144:32 - please be in touch with me i probably
144:34 - should have collected a lot more data
144:37 - there's so much that's missing i would
144:38 - love to solve this i've gotta
144:41 - move on from this mouse conference video
144:43 - and examples
144:44 - but i will would love to circle back to
144:45 - it at some point so please
144:48 - uh any suggestions at shiffman on
144:50 - twitter leave a comment
144:52 - in this video's description as soon as i
144:54 - turn off the live stream comments will
144:56 - be available
144:57 - um and i'll see you next i think i'll be
145:01 - back next friday
145:03 - um i should be back next friday i'm
145:04 - gonna be having a fairly regular
145:06 - at least two or three live streams in
145:08 - may i have such a backlog of tutorial
145:10 - videos to get out oh my goodness
145:12 - at least eight or nine of them and then
145:15 - stay tuned for the actual mouse
145:16 - conference video which will be on the
145:18 - channel early next week
145:19 - i hope that you enjoy it um and
145:22 - that's all i have to say thank you
145:24 - everybody i'm i'm
145:26 - sorry that i'm not sharing i haven't
145:27 - shared community contributions a while i
145:29 - haven't released a coding challenge in a
145:31 - while
145:32 - it's all it's the circle of coding
145:34 - trained life
145:35 - we'll we'll get back to it at some point
145:38 - all right
145:41 - look close let's let's see have i st how
145:43 - many
145:44 - how many tweets of my mouse movements
145:46 - have gone up
145:48 - it's pretty interesting to see these
145:51 - these are all the mouse movements from
145:52 - my live stream today
145:54 - probably should not be doing gotta
145:56 - figure i gotta go into the server
145:58 - and give it a more
146:01 - i guess allow a larger image all right
146:04 - this is it
146:04 - uh i'll see you all oh oh oh oh stop
146:07 - pull the presses
146:08 - hold the presses i'm gonna be back
146:11 - in 35 minutes i forgot
146:15 - uh i completely forgot um guess what
146:18 - upcoming live stream
146:19 - so if you missed yesterday's live stream
146:22 - um
146:22 - neto bomani is during the mouse call
146:24 - we've got the audio of the mouse
146:26 - conference
146:26 - available for you to listen to a lot of
146:28 - panels tonight so even just listening to
146:30 - the audio will be great
146:31 - and you can watch neda live create a
146:34 - zine
146:36 - um in this stream um i'll be there in
146:38 - the chat moderating so you have
146:40 - questions
146:40 - about this this mouse code stuff i'll
146:44 - chat with you during that uh um um
146:47 - and it's just beautiful the work that
146:48 - she's doing is amazing we are
146:50 - also fundraising i meant to mention this
146:52 - for
146:53 - um oh shoot i'm logged just give me a
146:55 - second here let me pull this up
146:57 - oh no no it's in the sorry it's in the
147:00 - description
147:02 - so um here we go uh i just want to
147:05 - mention a shout out um
147:06 - you know thank you to brilliant by the
147:08 - way for being the sponsor oh
147:10 - wrong button um the sponsor i am
147:12 - donating a portion of the sponsorship
147:14 - fee today to uh survived and punished um
147:17 - they are have a uh goal of reaching a
147:19 - hundred thousand i reached their goal
147:21 - amazing well i'm still gonna donate
147:23 - two days left but that's wonderful to
147:25 - see that uh survived
147:27 - and punished uh reached their goal of a
147:29 - mutual aid group
147:30 - uh project of survi um um that exists to
147:33 - end the criminalization of survivors and
147:35 - of domestic and sexual violence a
147:36 - wonderful organization that neda
147:38 - introduced me to
147:39 - um so if you if you're able to donate i
147:41 - highly uh would encourage you to do so
147:44 - so um that is really all i have for
147:46 - today
147:47 - come back for the live stream in about
147:49 - 35 minutes it won't be me coding but i
147:50 - think you'll really enjoy it
147:52 - um and hang out in the chat all right
147:54 - everybody see you then
147:56 - as always i always forget that this stop
147:58 - this stop it stop this stop
148:00 - i'm gonna do this stop this stop i'm
148:01 - gonna do this this stop this stop this
148:03 - stop
148:04 - i'm gonna do this stop i just stopped
148:13 - [Music]
148:38 - this
148:46 - [Music]
149:01 - goodbye everybody usually i play a few
149:02 - more songs but i gotta run and get set
149:04 - up for the next stream so
149:06 - see you then

Cleaned transcript:

so do check one two just testing out my mic i also see there's a question from joe herbert which says i thought of a good prestream question does the coding train have good intro ml in good intro ml video that one would suggest well i don't know about good but i do have a series i think if you search on youtube for beginners guide to ml5.js perhaps this is what kobe is suggesting right now um those are my intro series and i'll be covering the topic from a beginner's perspective today me do do hello happy friday on the coding train welcome all aboard it's a live stream from me before i'm gonna do a whole lot of coding stuff um so um i don't know when i was last here live streaming this way it feels like i've been gone for a very long time down deep i've dug myself into a hole i'm covered and covered in piles and piles of old computer mice that i purchased off ebay um i've been participating in something called the computer mouse conference which just started yesterday but um i was invited to um give it a talk if you will if i could use that term um at the conference and all of the uh talks were um this is a fully online conference and the talks were all um are all being prerecorded there's some i think live panels tonight so i um didn't i chose not to make it easy on myself and uh simply um record kind of a more uh typical kind of uh presentation um and wanted to try producing a uh um a kind of thought a video that was a bit different than the kind of content that i usually make on the coding train thank you for listening to me about this right now and it was really hard i had a lot of help from a lot of people i have so many people to thank and uh if you have no idea what i'm talking about i apologize i'm going to explain more about what the computer miles conference is in one moment but what i am excited to let you know right now the sun just came out here in brooklyn new york it was just pouring rain like half an hour ago that's not what i was gonna tell you what i am excited to tell you about is that i will be publishing the video from the conference which played last night um probably around on monday on the coding train so i today i want to talk about and go through some of the code examples it's a little bit backwards because i'm assuming that many of you who will be watching this live stream haven't actually seen the video so i'm giving you a sneak peek a preview into some of the demos there i also kind of never really finished the last demo that's in the video it's a little bit of smoke and mirrors i really would like to work on that um i would very much like to see if i can train a recurrent neural network in node with tensorflow.js based on mouse movement data and yeah i doubt that's going to happen in the next hour and 45 minutes but i will get it started um let's see so where do i want to um begin so let me bring over my screen here so first of all up here in the top left uh currently all of my mouse movements are being tracked by a processing sketch that i will explain in a moment and they are being recorded into this um sketch and after i think 40 minutes that image will be live tweeted um at uh the twitter account the mouse sees so let's see uh this was the last one two hours ago uh from me that was tweeted here so the in in i don't know how long it's been i should put something in the sketch that says how long it's it's been going but in at some moment of time that sketch will turn you know if everything's working correctly that sketch will become blank and then that image from that sketch do you hear the helicopter flying overhead i'm in the attic of uh the and so the helicopter was flying kind of close of my of my uh place here in brooklyn but um so let's see if that happens um let me first get something out of the way uh which is i'm very excited to um thank today's i'm looking i have my console of buttons there it is uh like very excited to thank today's sponsor of the coding train brilliant um you can sign up for free right now this very moment you can turn this whole live stream off and sign up for free you can keep it on and sign up for free at brilliant.org codingtrain i'm very excited about uh what i want to show you about halfway through the stream today on brilliant's website um they have a course about learning all about artificial intelligence and neural networks that's the topic of my live stream so i'm going to look at neural networks in tensorflow.js and of course there's this ml5 project which i will um allude to but um some of the things i want to explore are not yet in ml5 and so if i can explore them in tensorflow.js then they could maybe get added to ml5 later which would be very exciting um but um uh if as a really wonderful way to learn along with the kind of stuff that i do is brilliant which has a whole set of interactive um lessons where you can try out ideas and answer questions and join a community of people helping each other in topics in math and science and physics and computer science there's a python program of course so many things so um you can sign up for free brilliant.org codingtrain um and uh if you are interested in uh signing up for the premium service which unlocks all of the courses um you can get 20 off of the first 200 people by going to that link all right let's see right now ah yes i thought the timing might work out i felt like i started it around 40 minutes before i went to live stream so let's see um let's see where oh i lost the twitter account already um did it work no where is it oh is there an error oh i'm so sad it went blank and i don't see it oh oh i was i tested it and everything oh i got a bat what's this too large oh look at that request entity too large so i never bothered to do why is it too large because it's a png what if i save it as a jpeg um oh no but i'm doing it as a base 64. um okay i think maybe it's just my node code uh how do you feel about me debugging to fix this right now i'll do it after i finish streaming let's change it to let's make it a shorter amount of time let's just do 10 minutes and it'll be so much less activity i think that base 60 shouldn't it be the same like shouldn't the base64 encoding of this image oh my resolution changed could it be the resolution of the image let's print out like what would make it that suddenly this file was too large to post to my server let me print out the display width and height 1920x1080 i feel like i was doing that before i mean i could certainly oh no this is so sad uh i know i can fix this for sure after the stream is over but i wanted it to be posting while i'm streaming let's just try five minutes and see if it has to do with the actual like amount of activity in the image i could also just go and see i set like a um a data limit i think on the node server that stu that's receiving the image because i don't know that seemed like the sensible thing to do maybe i need to set it higher uh let me just put it on sorry ah let's put it on um five minutes we're gonna get five minutes of mouse movements and see uh see what happens in five minutes okay oh i'm excited that you're all here with me for this so where was i all right we're gonna come back to the twitter ah okay so the computer mouse conference this is the url uh complicating i don't know if you can hear the screaming that's coming from downstairs my so friday afternoon is not a good time for me to live stream the children are home from school lots of activity going on but i'm gonna power through this complicatingthecomputermouse.net so if you go to this website um you can buy a ticket for the conference still later um at six o'clock 6 p.m eastern tonight the live zine the streaming of artist nedo bomani is making uh has a camera view of her workspace tabletop workspace and is making a live paper zine and printing and cutting while the conference is going on you can hear the audio from the conference in that zine stream just for free and we could go look at the schedule let's see what's on the schedule for tonight we can see all these wonderful things that are happening so i encourage you to check out uh and maybe join um the computer mouse conference um if you're interested isn't it wonderful that there is an actual like i don't know if it's right to say about all this academic intellectual conference all about the computer mouse nothing about me is academic or intellectual but there was a lot of brilliance on display last night from all of these um amazing presenters um and i i'm assuming that all of these talks will eventually be available um um i like i'm enjoying charlie's comment in the chat children home from school helicopters home from school lots of distractions it is true um so you know i could go on and on about how much i love i've been really i i love the computer mouse conference in 2020 how much i love it so far this year and how much i'm looking forward to it tonight but let me get to why probably you are here watching this stream this is the page you can actually just go to uh thecodingtrain.com mouse learning so if you go to that url it will take you to the page and thank you so much to dusk uh verkus who's in the chat i think um who has been uh instrumental in helping me get all of this material organized to be online so everything that i reference in the talk all of the artists are here listed with links and all the various articles and publications and you can find them here i wouldn't be surprised if i missed something so if something is missing please uh tweet at me at shiffman you can open probably an issue also on uh the coding train website uh github repo so you could also potentially go here to the coding train website issue and click uh new issue if something is missing of course how do you know if something's missing if you haven't even seen the talk you know it'll all work out eventually um but um there are a whole set of um examples here so i'm trying to think about how i want to approach this oh my goodness i must must someday finish the live poll project so i could just throw up a live poll while i'm streaming gotta make that happen so let's start with collect and visualize mouse data because in order for me to work on the thing that i want to work on is predicting mouse movement so actually let's let's go ahead and a little treat for you i am going to play not the full talk um but just like a portion of it at the end for the section that i want to to discuss here so let me scan through it you can sort of see the video um parts of it here um and let me get to what's the part that i want to get to okay let's try this you do not hear the audio hmm let's see i will fix that so i use this software called loopback ah if i think if i turn this on this will take the audio and send it out to usb capture so that should fix that let's see if we can get this going here oh to collect and save all of my mouse pointer positions into a csv file csv stands for comma separated values it's a very standard data format that you can easily reload into all sorts of other things like a spreadsheet you can then take this data and visualize it in a myriad of ways animations i tried a few different ones with all of these mouse movements saved i could also use them as training data i can analyze the probability of any moment of the mouse going up down left right and replay a sequence based on those probabilities with something known as a markov chain i could feed this data into something called a recurrent neural network a kind of neural network that's very well suited for sequential data time series text music vector paths there's a wellknown machine learning model called sketch rna and the next part is what i'm trying to get to here with data set to generate doodles of all sorts of different types of things and i can take the results of that recurrent neural network training audio too loud movement take a nap and let it just take over and control my computer now i didn't include mouse clicks in here well although i could have this way i just you know i'm safe and i'm not going to end up you know who knows what nefarious business the sort of dream version of my so i don't know what you can see if what you can see here but this um what's going on here is this processing sketch is actually listening to a node server which is spitting out mouse locations where it wants to move the mouse so um these are normalized between zero and one so if you know i'm if i my pixel dimensions are 1920 in width then 0.37 you do the math a little less than half of 1920 what's happened oh i help my children with their math homework all the time and i feel like i i i i've been like learning all these new strategies to do things in my head and i'm like as soon as i'm live streaming and trying to do math in my head it's the most terrifying thing in my entire life um so the idea here is that um this particular so i want to try to like rebuild this project again a little bit right now it didn't really work very well so it worked enough for me to kind of demonstrate in the video this is actually like a little bit of showing like okay this was my mouse prediction so train so first thing i need to do is like collect a lot of data of me moving the actual mouse so let's get to do that and by the way i think um here yes it worked so this was my latest five minutes of mouse movements from the coding train live stream so i don't know why the the many many more uh the like larger image the image with more stuff in it doesn't make any sense to me if it's a base64 encoded image is the basic c4 encoding like compressing it somehow because wouldn't it just be the same number of bytes no matter what the colors actually are i'm very confused thank you thank you to objet who gave me the answer to 1920 divided by 2 which is i would do 1800 divided by 2 is 900 and then i could do 120 divided by 2 is 60 and i got 960. boom just like that boom um so um what am i doing here let's close let's go back let's um let's i think tweeting this every five minutes is going to be too much so let's switch it back to 20 minutes and we'll let this go in the corner here um okay oh gabriel's is here and i have to like unhide no i held it for review no i hit delete by accident gibril's is here and i hit delete by accident you can post your message again why was it held i didn't mean to i didn't mean to my favorite what you know internet person is gabriel's i mean i i probably say that about a lot of people when they pop in the chat they're all equally tied all of my favorite internet people are equally tied as my favorite internet people jabriel's being one of them for sure and there's a limited number so it's not like there's thousands of them okay moving on what am i doing aha okay i've got to collect the data first so let me ah so what am i doing here uh mouse learning so we're going to the collect and visualize mouse data repository so i'm going to be writing a lot of the code today but uh i need to make use of some code that i've already written because no way am i doing this whole project from scratch here all right so let's get let's clone this repo and put it on my desktop um let's open it up i can't believe i deleted gabriel's message my accident i was trying to click let it let it post uh all right so now here is all right so there's a bunch of different uh processing sketches here by the way i also thank you to dusk um what i've recently learned and maybe i should pursue this is you can actually use node.js to also track your mouse movements so you need something you need some programming language or environment some framework that has operating system level access right i'm not talking about using mouse x and mouse y the way that i might talk about in p5 or in processing to get my mouse movements over a canvas i want all of my mouse movements no matter what it is that i'm doing so you can see here like um like this down here this is like um size to be smaller words are failing me very of more and more every day this is what happens when you get older i think it's happening pretty quickly for me um but over here so if i just take the mouse and like hover it down there in the corner it's down here in the corner we should start seeing it appear up there oh boy um so now how do i do this i'm gonna go to this mouse data collect sketch so the way that this the what what i'm actually making use of is something called the robot uh and by that i don't mean the robot i do kind of but i don't have a sound drop to like robot dance to and probably could come up with one but the you want me to move on i can tell all right so let's look at what i'm talking about java robot i love that it's called the robot uh it doesn't matter whether i'm looking there's an older version of java but um you can do all sorts of things like i can use the java robot class to get a screen capture to get a pixel color key presses so but what with the robot class is meant to do it allows you to automate things that you might want to do on your computer so i could actually write a java program that's just typing keys automatically moving the mouse so if i wanted to automate some uh you know process of you know opening files and changing something if i could kind of figure out what the logic behind it is or record myself doing it then replay it there's a lot of possibilities there um now i think i scared gabriel's away i just want to see a message from shabriels again in the chat that already tweeted him or something he left he saw that i deleted his message and thought i never wanted him to come back but i i love you gabriel's you're my one of my top 25 internet favorite people wait what way at the top of that top 25 all tied as i said earlier i just don't want to leave anybody out you know i i okay i was saying something here so um oh and actually now that i'm realizing it the robot class is what i want to use once i want to control the mouse i actually don't need to use it at all for what i'm about to demonstrate to you which is that yeah i want mouse info so let's look for mouse info so there's a difference between tracking the mouse right what does it mean to listen to all the mouse positions and record them versus control the mouse through code rather than through the actual user interactions um mouse mouse info java so if i go here to mouse info and i look i can get pointer info and i can get the number of buttons and where the pointer is and all that sort of stuff but i've done this i've written the code so let's just take a look at it i'm a little bit afraid to run this i don't remember what i'm doing here why do i have the robot one in this unnecessary um let's take out a robot completely because i don't actually need it let's call that start tracking and i don't know it sort of seems silly to have a whole extra function for that let's just move that into setup okay so the first thing that i'm doing is just to make sure there is a mouse attached i think i can get the number of buttons so i guess it could tell me like how many buttons does this mouse have i have no idea i'm just using the trackpad right now uh i don't have another mouse hooked up but let's see what it says so there's five buttons how are there five buttons what are the five buttons i have no idea what that is and why am i getting this null pointer exception who knows um all right so but i know that there's a mouse if there was no mouse i would exit the program now in draw let's look at the the crucial sort of element here is and i see i have some code commented out that i'm not using um is this track mouse function so what the track mouse function does is it first asks for some pointer info right now remember i could just say print line mouse x mouse y but mouse x mouse y would only give me the mouse locations within this tiny little canvas and i want the mouse locations no matter where i'm moving so i can say get pointer info and dusk i see that you're in the chat if you could link to me the name of that node package you showed me i'll probably want to bring that up at some point too um so get pointer info now i have this pointer info object i could say get location and then i can say get x and get y so this could probably all be written in one line of code um the other thing that i'm doing is that bef i have my own mouse point class basically i created a little class just to wrap the x y and the time i'm not you i haven't done anything with the time but i could imagine if what i'm doing is collecting a large data set about my mouse movements that i might want to record when they occurred as well um and then i'm always i'm keeping track of the previous mouse position that feels useful for visualizing if i want to connect them with a line i also am doing something i don't know if this is i'm just trying to keep my data set a little bit smaller and more manageable so i wrote this function called sane that basically says hey if this is if the mouse hasn't moved don't bother recording it into the history so this arraylist is a history of all of the mouse points to summarize i've got a processing sketch where's my like postproduction animation that's just gonna like put the bullet points up here it doesn't happen when i'm live streaming but i could type out this pseudocode uh let's open up like text edit here so let's let me type out the pseudocode for this so you can kind of follow uh so every every time through draw get x y tau of mouse add x y and time to arraylist and then and i think like if a new xy then add that so if it's a new xy if it's moved then add that to this arraylist over and over again uh also draw um draw scale down i thought this was going to be really useful for me to like summarize the code it's quite simple then uh also after x number of mouse locations save to csv files this is really it so every time through draw ask for the xy position of the mouse if it's a new one save it along with the time then keep all that into a big array but you know if i just stop the program from running that array will be lost so take that array and save it to a csv file what's a csv file let's take a look at that so um i believe right now the what the code says if the arraylist has a hundred thousand data points in it save it to a file you know i could be sending those to an api somewhere to save the data in the cloud or i could be storing it in a proper database or saving it continuously but this is my sort of hack let's just save um if it's like 30 frames per second 10 seconds would be about 300 points so let's just save about 300 points right now just so we see that this works and let's also say there must be a print line somewhere in save data uh you know i'll just put print line saving data i'll talk about what's happening in this so i'm moving the mouse around it's um this console i got to make the console bigger right can i do that in console font size also 32 so you can see that better um let's see so i we should be able to count to ten one one thousand two one thousand three one thousand four one thousand five one thousand six one thousand come on it's gotta have been ten seconds already even though i only counted it to five to saving data all right great save data i could by the way i could i could just implement i think i might have actually implemented this i forgot uh i don't see it yeah i forgot that of course here i am like i have i just i have embedded if i click the mouse it'll save the data automatically so that was silly it could have done that let's now take a look so in the data folder we see there is now this csv file and what's in this csv file it is a table of x y x y time x y time x y time so this is me and so that's what's being saved so i think in order for me to attempt to see if i can get an ai to start controlling my mouse for me based on my own mouse movements and i'm using the the term ai just to be just to sort of like get myself through the sentence faster it would make sense to unpack what i really mean by that because ultimately we're talking about a machine learning algorithm and a very and a particular neural networkbased machine learning algorithm what kind of neural network so that's what i want to unpack here but um i think maybe as to try to get a test going maybe i'll just move the mouse in a circular pattern because maybe that's something if i could get it to learn that and reproduce that then i would know that my methodology is sound so let's do the following i'm actually not going to bother to save the data automatically i will just save upon a mouse press so i don't want so okay hold on so let me now remember let me do some circle patterns in a clockwise direction it's kind of hard to do this oh i don't hear the music anymore oh i do this is good circle pattern i wonder if i'm moving it too fast you know what let's try this again i'm gonna move it slower oh no i keep wanting to do it over the canvas and i keep forgetting that that's besides the point this is going to show up in the tweet as well ah gabriel's is still here everybody do the mouse in circles dance i think there's enough data for me yeah and now for the moment you've all been waiting for i'm going to click the mouse and save my data that was a little anticlimactic but i did it okay all right so let's take a look um it's a very small file but that's good so let me just take a look at this this is my mouse does this look to you like i'm moving it in a circle i think it kind of looks like it's going in a circle look to the right to the right to the left to the left down down down down down down down down down down down up up up up up yeah looks pretty good looks pretty circular okay now ah this is great i'm so this is moving along so quickly here through this project let's now switch i'm going to close process not going to close processing completely i'm just going to close this data collection sketch i'm going to leave this mouse tweeter bot thing running um which ever in case you just recently joined every 20 minutes it's uh i this is cur recording all my mouse movements and look at it i love this sort of like uh how how you're really seeing that circular pattern now emerge in there um but i don't want to stop that let me just minimize it okay this was my attempt to be good at explaining something which didn't really work out um and now so what i'm going to start recreating is this particular repo that's predict mouse movement but i'm not i'm going to write this code i mean nothing is truly from scratch but i'm going to start this project over just because it didn't really work out but i might have to refer to it because i don't know tensorflow.js super well off the top of my head okay um great and we have a machine learning researcher for wireless security in the chat please help i don't really know machine learning i just i just played somebody who does on tv um i also have this really like big question in my head which is this video is so unlike most of my content it also is specifically for this conference so i wonder if it needs like a short intro i should record a quick intro to it but yeah i don't know think about that late all right so let me get to here so let's make a directory we're going to call this mouse ai for gabriel mouse ai uh i'm gonna say npm init that's what you do these days right i don't know i should say like yarn or something or what's there somebody saying newer than yarn i think i kind of forgot i think i forgot to eat lunch today like i'm very hungry i'm feeling kind of tired i had a very large uh late breakfast uh today has been an unusual day for me uh a very very nice day beautiful uh beautiful day and i was outside for quite a bit and uh i don't you don't need to hear all about my day i could i could talk about it it's not that interesting uh by the way i'm getting i'm fostering a puppy who hasn't arrived yet the puppies arriving tomorrow so you all hopefully know my dog gloria pickle who makes many appearances in the mouse conference video but tomorrow gloria's gonna get a friend uh marlin and um oh i'm getting breaking news from simon here do npm inity so that it automatically does it automatically you don't have to manually make it do it automatically oh well i already did it though sorry all right moving along so stay tuned for cute puppy photos tomorrow um so where where am i go where am i where am i doing all right so now uh let's open up this directory and let's create a file called index.js so the first thing that i want to do is just parse that data file so i've got to find that csv which is presumably on the desktop in computer mouse data mouse data collect which one was it the later one this one let's make a copy of that and just put it here so let's start with and i'm um you know i apologize to any of you who are new to coding i really really strive to have everything be accessible and approachable no matter your skill level watching my stream but admittedly anytime i'm diving into writing some node code and trying to use something like tensorflow.js there's going to be a lot of confusing stuff just know it's confusing to me also but a node is an environment where i can write javascript code just and execute it through the command line basically run little javascript programs on my computer i'm not doing anything with a web browser right now and one of the things i can do is i can import various node packages and one of them that i want to import is called fs or file system and then i think i can just say like data is a read file and i'm going to use this read file sync so i don't have to worry about a callback and then i need to say what file i'm opening like mouse.csv and then probably like oh what's its encoding it's a text file or utf8 so let's just see and then if i say console.log data and of course the file isn't actually called mouse csv so uh let's get the full name i could just rename it but all right so now can you see all this code let me move this over here ah there we go now i should be able to say node index so now i'm going to execute that program and look there's all that csv file so i'm sure there are countless node packages that help with csv parsing but to me it's actually kind of easier to just do this manually such a simple file so i think the first thing i want to do is say data dot split by a line break so i will now have an array of lines then i can go through every single line and i'll say the row is lines index i dot split based off of a comma and then the x is the rows first element and the y is the rows second element so if i say console log x comma y we should have this parsed great so now i'm seeing all of those x y's that's good now here's the thing i probably should i mean basically what i'm attempting to do is recreate sketch rnn what's sketch art what what sketch rnn you asked i can hear you asking it all of you asked it simultaneously just as i said it i can hear you um sketch rnn uh let's see here this is what i'm looking for so i do have a video all about how to use sketch rnn sketch rnn is a machine learning model uh that was trained off of a large data set of doodles for example doodles of cats my children have written a song about cats and i'm using everything all of my uh um strength right now willpower to not start singing that song um but uh let's see i think there's like a demo in here if i just like sketch skip to the end um you can see here this is what sketch rnn does it's not working still oh this so this a little further off where we left off and i will say goodbye to you by letting you watch a compilation of sketch rnn drawn yeah yeah yeah move it along move it along so you draw and then the ai takes over and continues the drawing so i'm basically trying to recreate this but with my own data and i do uh happen to know that sketch rnn i believe doesn't use the raw position data of all the points it uses the difference between the next position and the previous position so you can get those like vector paths but to keep things simple right now let me use the raw data one person in the chat is asking me to sing it all right so but i'm gonna start small and um and not do that so the next thing i need to do is i want to normalize this data let's put this in um let's make this a two and so machine learning systems neural network based systems generally uh generally are looking for data in arrays so i already have it in an array but i let me make my own array i probably should make it an array of arrays x y x y x y x y let's do that so i am going to say uh i'm going to make an array like i'm going to call it raw input so i want to create the raw input to the machine learning model and the raw input equals uh input uh equals ah no push i want to push an array with the uh with just the x y and then i need to normalize that data and i happen to know that my resolution obviously i wouldn't want to really hard code this but if i divide it by 1920 and by 1080 i've normalized all the data between 0 and 1. now if i say console.log raw input there we go so this is now the data that i want to send into the neural network that i'm going to develop is going to be in chunks chunks of x y positions all normalized between 0 and 1. looking good all right so next up i really need something i i should have set up a notepad for me to diagram today so i'm just gonna have to use my words please bear with me what i'm looking to do ultimately is what's known as a regression a regression meaning i would i want the output what's the output of the neural network i want one of the one xy right the input is maybe hey here's my previous 10 xy positions what's the next one if you if you were moving in this direction all these ten times where would you go next so alt if i'm doing this and so it's regression but what kind of architecture do i want well you can think of this as a time series data it's a sequence the sequence might go on forever and the architecture for that kind of data music text time series financial data you could probably think of other examples would be something called a recurrent neural network and you know there's more recent research and variations on that and lstm and gpt transformer stuff all that stuff yeah our machine learning researcher in the chat will explain all of that to you thank you machine learning researcher in the chat who is slowly approaching onto my list of some arbitrary number of favorite internet people we'll see though the word is still out um but i wanna just i wanna i wanna know that i can get this to work first so um let me try doing um a sort of more uh classical classic uh fixed input neural network so instead of it being sequential i'm going to train a neural network to make a prediction based on some fixed number of previous mouse positions so if i always know like a sequence could have five numbers in it or a thousand numbers in it and it's continuous but it's not i'm not going to have as a robust system with a lot of memory but maybe i could get something to work if i always just say the input to the neural network is 10 mouse positions and the output is the next one so that's what i'm going to do so i need to start architecting my neural network now ordinarily i would go instantly to ml5 and i could i probably wish i could i wish i was because i know how to do it very well with ml5 but ml5 doesn't run in node and i don't feel like opening up a web browser and figure out that and i would like to learn a bit more about using tensorflow.js directly in node because someday i would love for ml5 also to work in node so that's where i'm going to go i just had to say all these words over and over again to build up a little confidence that i can make this happen so let's go to uh you can see what i was googling by the way it came out right before i started live streaming tensorflow.js are an ed cell because if if all goes according to plan which it won't i will get to investigate this before this stream is over i i doubt that's gonna happen but i'm gonna not worry about um that just yet so let's go to the api documentation um and one of the things that's hardest about working with tensorflow is this idea of understanding what it means to work with tensors this is why i like to use ml5 because ml5 obscures the need to work with sort of lower level memory management and tensors with your data you could just give it an array or give it a string and it'll sort of figure out how to do that but i'm now opening up this can of worms which is tensorflow.js and i'm gonna have to do it myself by golly and i can i what's the stuart smallie daily affirmation people like me gosh darn it they really do i'm i'm good enough i'm smart enough i don't know i stopped watching sorry live after the 1980s so that's where my knowledge leaves me all right so i don't know where to begin well where to begin actually is i need to uh um i need to look at the getting started page there's got to be a getting started page right because i want to use it in node tf dot js node there we go this is what i want so i need this node package to use it in node so let's do this npm install tensorflow tensorflow.js node boy this doesn't work it's not going to be a very long live stream let's install this so npm install i you might be wondering like hey you used fs how come you didn't have to write npm install fs so in node some packages just come with node but tensorflow.js for node is an additional package i have to add okay um oh it's got to build tensorflow ooh this is exciting oh oh i was about to like put on some did it work thank you thank you are these i thought it would take longer i think it worked okay so now i think i just need to say require something required here we go let's do this i'm not going to attempt so you can um get it to use your uh graphics your gpu hardware that's not something that is within my powers today and i don't i definitely don't need it making a very small little neural network here a little just a little bit of data so let's do that so now the first step is for me to turn this data this raw input data and can i say console log table i notice that question in the chat yeah console.log table works in node which makes a nice little like sort of spreadsheet version of what i wanted to print out i need to turn this into a tensor so how do i do that so by the way tensor it sounds like oh tensor that must be some like really complex concept that has nothing to do with anything i've ever done before how i ever understand why is it called tensorflow what's a tensor so tensor is really just another word for a bunch of numbers and and maybe that's uh you can you can argue with me in the chat whether that's accurate to say but um tensor um you know the reason you you might think of an array like well is tensor and array the same no so an array is a list of could be in a list of numbers but by definition an array is one dimensional so a tensor is kind of a nice word for any arbitrary multidimensional array am i getting this right i have a whole video where i explain this and i kind of have forgotten it but really it's just another word for like an array uh you might think of as onedimensional matrix is twodimensional tensor is a generic any dimensional bunch of data i'll i'll look at the chat to see whether i've been corrected or not um all right so now this data is one of the so something that comes up in machine learning a lot is the shape of your data and what's lovely about using console.table is i see the shape the shape is you know 100 1435 i mean that's probably the index i'm sure started from zero so it's 1436 by two there's two columns now it looks like it's by three but these are just the index values so that doesn't really count so this is two dimensional data so if i go back to the tensorflow api i want to say i want to make a a two dimensional tensor so with values and shape so i should be able to say now const input tensor i'll just kind of call this input equals tf tensor2d my raw input my shape is raw well let's let's look for rawinput.length and i'll call that a rose and then i know it's two columns i don't know if this is going to work and then i can say input dot print so in tensorflow.js instead of console logging it you can you call print and it'll put out a preview let's see if that works good hi where's my bell uh my sound effects for being happy can't believe that worked i must remembering things from tesla okay great so now i have my input data i have my input data in a tensor next thing i need to do is i need to design my neural network so my neural network needs to have inputs that correspond to this input data and it needs to have outputs i know there's two outputs so what goes in between don't worry i will get there um oh the last line is empty so i should that's very good that can really mess things up thank you for ever in the chat mention that to me the bell i really it's like funny not having the bell like i feel like i use it whenever there's like really salient important moment and i'm getting to the halfway point of this live stream so i will be taking a break having a snack uh great this is important that i do this and let's just yeah because this is really going to mess stuff up this not a number here thank you for noticing that so and i don't want a console.log i just want to see the tensor uh i don't need to console log this anymore so let's do this again great um all right so we can see i have my input data so now back to the tensorflow api so what i'm looking for next is to create a model and i want to make a sequential model a sequential model is a model where the data flows in one direction in a sequence there are inputs and there are outputs the world of machine learning and neural networks there's all sorts of different kinds of model architectures i'm starting with the most basic simple one um okay so a sequential model so i'm going to start off doing this i'm going to create my sequential model then i need to configure the first layer it's going to be a two layer network there's just the hidden layer that receives the inputs and the output layer that takes the output of the hidden layer and which squishes it into my xy prediction so looking at this uh let's do this so the first layer is um no okay so ah so the this is the input shape ah right right right ah my data actually isn't formatted properly i want to have so here's what my data is now this is what my data looks like but remember what i'm using as my training data is groups of 10. like what is the next mouse position based off the previous 10 mouse positions so there actually should be another array in here and this should be 10 of these and then another one so the data should actually look like this it should be in groups of 10 and these would each be 10. so how do i do that so i want to let's make a variable what's a good name for this variable the oh people are telling me the font size is a little small let me thank you let me um let me try making that a little bit bigger uh let's see if this helps better hopefully this is better um okay so i need a variable for history size chunks i'm going to call it chunks i want chunks of 10. so four let j equals zero j is less than the number of chunks j plus plus so now um and then for each chunk oh that's i want to have a chunk which is an array boy did i make this complicated and the chunk should receive aha oh my goodness this is super interesting this should be i plus j and i can only go i can't go all the way to the end of the array because if i'm always taking blocks of 10 i have to stop at the 10th to last position i have some syntax errors somewhere because it's not auto formatting nicely move this over since i'm sitting here oh but i don't see my beautiful mouse visualization that's fine okay so go through all of the lines for every line get a group of 10 push that into this chunk and then raw input push that chunk what's there's a syntax error or something does anybody see it huh let me just try running it 34 you're probably all telling me in the chat oh because i have all this nonsense down here i forgot about that okay that was just reference material okay i think we're good now oh but it's not a 2d tensor anymore i'm done tf tensor the number of rows the number of chunks then two is this my shape now is that how you do it i'm just kind of afraid let's come at this all right let's see all right this looks ah i'm on a roll today that looks right groups of ten groups of ten amazing ah this is so amazing no so people are saying do i i should be saying plus equal chunks i don't actually want to do that my training data takes 0 through 9 predict the 10 1 through ten then pick to predict the eleventh two through eleven so that data is repeated with each chunk now again this is not the proper way of doing it but this is giving this is how i want to do it uh yeah um i absolutely do not wanna move up by the chunks i'm looking for as much data as possible and you know i'm taking 10 chunks at a time sliding across the data okay so now the input shape is um still the um oh the input i think i would just say it's the number of chunks comma two i think that's the input shape right it's ten things of two okay now the number of units i'm going to leave this as 32. it's sort of like and by the way there's like i i feel like it should be wrapping some of these um all right i'm not going to worry about that i never can get my code formatting right if i do this well yeah let me do this because i think this is a little easier to see now okay um so i'm going to leave 32 as arbitrary now the next thing that i want to add is the output layer which has two units that's it now i want this to be on one line although i think i need to add like activation functions and things like that let's do it this way to be consistent okay all right so i'm creating a layer that receives the inputs 32 is i'll get to why it says units 32. we'll decide that later and then there's two output units yeah i probably also could flatten the data but i'm um yeah hide the side tab i don't know what that means i need to do need to take a break in a minute um so just give me a second here but i kind of want to get i want to at least um actually this is the perfect time for me to take a break i've never aligned my sort of sponsorship so perfectly with um with my content but it's um and so i'm i'm avail i'm streaming until five today which is about another hour i think i'm gonna be able to get through a little bit quite a bit more of this but let me take a short break i'm not actually taking a break this second don't go anywhere i'm going to tell you um about uh today's um sponsor which is brilliant so i don't know about you but me i love to solve puzzles and i love to learn new algorithms and try to figure them out and then when i i love to get things wrong because also because that's the best way that i learn and so for me one of the um a really wonderful um service and website and they have an app that i use is called brilliant so brilliant is a website it has courses and lessons and a community of people all lifelong learners stuff for all ranges of ages you know one of the things i like to say look it's actually telling me continue learning look at this it somehow knows the brilliant has some really good ai that knows that i need to continue learning introduction to neural networks well i was working on it earlier as a review to understand about neural networks but i think the thing that i would just show you here is if i just go to courses i don't think it says that i could say much more about how wellsuited this is if you like the coding train that you would like uh brilliant because of look at all of these topics um computer science fundamentals neural networks math fundamentals applied computer science um browse all 60 courses number theory this is one of my favorite ones right here infinity so if you like some of my videos on fractals i mean all you know so many of my coding challenge ideas came out of brilliant so um just to give you a quick preview of some of these i have a couple videos that i can play so there's a python um coding course um that you can actually so like i don't do videos on python but if you want to learn python you can go through these interactive lessons um see how they work you know the one that i'm working through now which you know i was saying like oh i really need visual diagrams to explain some of these concepts they're really beautifully illustrated in the uh neural networks course um there's lots of material that you can available just by going and signing up for free at um i have this brilliant.org coding train if you go through that link lets them know that you found brilliant through me which is just a nice thing to do if you can no big deal either way but i definitely would appreciate it um and then if it seems like something you would really like to unlock all of the premium courses and content you'll also get a discount through going through that length of coding train one of the things that i like to say i don't know you know it's not exactly gift giving season right now but you've got a someone's birthday coming up you know buy a nice gift um is getting somebody a premium subscription to brilliant it's something that i i do buy for as gifts for other people myself all right so um let's let's see if i can just briefly before i take my break um dive into the neural networks course a little bit let me move this out of the way so let's go to um introduction to neural networks i'm going to click continue course and i want to skip to i would definitely recommend going through all of the course but i just want to skip to the neural network one because it illustrates a lot of the concepts and here it is of what i'm talking about so the idea here is like this is the input data now it's different the input to this neural network is an image but you can see it has a shape to it like the shape to this data is one two three four five six it's probably 27 if i'm guessing i don't know i can't count if somebody could count this for me but the shape is the number of columns by the number of rows so similar idea and then all of these go into like if i would go back to my code here 32 units well that's the number of these hidden nodes now there aren't 32 here and then there's actually two hidden layers so in this if i were to try to recreate this architecture i would have to add two layers and then there's an output one you can see the output has one two three four five six seven eight nine ten so i would put 10 here and the idea here is that you know it's based on how the neural network is trained it is going to highlight or light up one of those output nodes those output neurons so i'm basically using tensorflow.js writing code to design a model like this not the same concept because this is doing image classification and i'm not even doing classification i'm doing regression but i have the same idea i have this sequential network it's usually visualized or drawn in diagrams from left to right this is being drawn from bottom to top so the data flows this way in the sequence input data that's there hidden layer hidden layer output layer so that's exactly what i'm going to do so i'm so glad that this course in brilliant just perfectly illustrated exactly what i'm coding today uh so thank you brilliant for being a sponsor of of coding train a very very um dedicated uh sponsor and what i'm going to do now is just um take a short like hopefully less than five minute break um if you have nothing to do during this five minute break uh you're welcome to go ahead and sign up at brilliant.org codingtrain but i will be right back i'm going to continue writing this code to try to finish this project if i could get back in four minutes i'll have 45 minutes to finish this project so please uh take a break yourself if you can stretch get some fresh air meditate something practice some selfcare please um i'm gonna go get like a granola bar or something give me a little energy for the next 45 minutes and then i will be right back to finish um this particular project all right so see you i'm gonna put up the intermission uh animation right now and i will be uh right back i'm muting my microphone do do so do do do do so do okay i'm back whew that was a good break all right how's everybody doing i got a lot of flights of stairs to go down from the attic let's get something okay i'm back we're gonna make this happen people um how's everybody doing okay um oh nice some people are saying nice things in the chat that is very kind of you i very much appreciate it okay so we have now added oh we're just gonna do one layer so uh and i want to change this back to two so i have a sequential neural network but okay if you just are tuning in i'm trying to write a neural network to make a mouse movement predictions so i have a training data set of me moving my mouse pointer around in circles and eventually i would like to have used different data and i'm now going to see if i feed that into a neural network using tensorflow.js if i can get it to make the prediction to move the mouse around in circles okay and uh i had a little piece of toast with a little peanut butter on it in case you were wondering i feel so much better i'm like a like i could just like survive for the rest of my life with just peanut butter just just putting that out there okay uh and some water had some water i i wanted to make a coffee but that's kind of late and i didn't really have time that would take too much time to pick a coffee i don't have that much time to find my break all right so what's next let's go back to the tf.js and thanks again to brilliant the sponsor let's go back to the tf.js page so the next thing i need to do is usually have to like compile the mod the model or something or add some kind of loss function optimizer i mean i wonder if it has like a default of all that stuff tf sequential usually like um oh maybe that's all under model compile yeah how come there's not an example of using compile i mean i could just go to my uh examples so i by the way let's let's do this i made a bunch of examples a bunch of years ago let's see uh examples p5 or something well these are my videos now this is what i'm looking for so this is from well i guess i made a change on 2019 but these are a bunch of examples i did let's look at this um color classifier which is probably relatively similar what did i do ah right so i did this a little bit differently that's interesting i like how this is done so i didn't put in the specific activations i'll get to that but this is what i need all right let me just copy this sorry everybody let me just copy this in here for expediency so all right so what am i doing here and this is i'm gonna i'm gonna change this stuff so basically this is this here is architecting the model and that is saying that here are my layers just two layers the first one that gets this input and you might be asking like well why is there no input shape in this layer i could put one but the tensorflow.js the model can figure out what the input is into the second layer because it's the output of the first layer which is 32 but the first layer doesn't know what its inputs are because that's my data so this is me defining like oh this is my data then put 32 things in here and i don't so i could if i wanted to do something like this i think it would be this but um unnecessary whoops okay ah so many auto fill so now once you um and so let's let's just sort of see like what once i've architected the model i need to say model dot compile it basically the tensorflow.js is going to do the work behind the scenes to like set up all the data structures and memory and math stuff that it needs to do based on it doesn't want to do that until it knows what all the layers are so i'm just curious if that if it'll like compile in some default way or if it gives me an error whoops oh and let me um i don't need to print out the input anymore so i've seen that it's right right so this is what i expected it's giving me an error it cannot read property loss of undefined so what is loss and i think that by accident i'm like using some meme or something that i'm not aware of because i'm an old loss is the term to summarize the total error of a neural network as it is going through its training data so it's looking at its training data and trying to make predictions that match the actual answers that are embedded into that training data and if it's getting if it got everything 100 right its loss would be a nice big round zero of course that never happens and if it is a zero it's probably over fitted which is a term for like your model is so good at making predictions based on the actual training data that when it's deployed into the world with nontraining data it's not going to do very well but so uh in order to define the loss function um well i need something that defines it so um we can see here i could add and let's add that in loss now it says categorical cross entropy here which is um just from my other example that's a kind of loss function that is well suited for classification algorithms which isn't really what i'm doing here so um i'm going to look for i think it's just root means mean square root mean squared i've lost my um sense again of uh let's see so let's see what are the optional options up let's say categorical cross entropy it's got to be ah here we go mean squared error this is what i think i want to try so these are a bunch of different like metrics for measuring the how the neural network is doing i'm going to grab mean squared error let's try that now let's see what happens all right so i it needs all the stuff so it also needs a optimization function so what does that mean so the neural network is full of all of these weights if i went back uh if i went back to the original um uh if i went back to that diagram from brilliant.org from the brilliant website you would have seen all these little lines that connect the different layers they all have weights so i need to figure out what how am i optimizing the weights to get to the most the best set of weights that produce the the lowest loss and so sgd stands for something called stochastic gradient descent that feels like a fine thing for me to use right now learning rate and a lot of my other videos cover this stuff in more detail is so if i have an error and i want to like twist a dial to adjust a weight to try to get that error lower like how much do i twist that dial like do i just make little tiny changes that i'm going are really big ones so let's um let's do let's do let's create this uh learning rate and optimizer and put that in there i actually don't think the metrics thing i really i don't know what the met someone i don't know why if metrics is just for if i want to like get a report on how it's doing or whether that's actually doing something but let's keep it because i don't know it sounds like accuracy feels like an important thing so basically i am doing this okay now something that was in my previous example was activation functions and i do need to get into what i want to use here because i certainly don't want to use close this tab close this tab you can see here that there's something called sigmoid and something called soft max so we'll talk about those i think i'm going to need different activation functions but once again i just want to see if this will run without an error great no error moving along next up ah i need to have the um so these are actually so this is often referred to as the x's um the x's being the inputs to a neural network and so my training data set would usually have x's and y's so that the inputs paired with the output so in the sort of canonical cats versus dogs image classification my exes would be a lot of images of cats and dogs and my y's would be cat cat all the correct labels that correspond to those images here my raw output or what is called raw output is the 11th xy so after i go through this the raw output should get next row is lines i plus j plus 1 and i should get an x y from that i don't know what to call this like i'll just call it maybe if i call it next that kind of makes sense and then push that x y into the raw output so these are the raw inputs chunks of 10 and then the 11th that goes to 11 is the output although i think now this needs to be minus 1. so i should be able to also say y's is a tensor raw output and i should have rows comma two right let's print the y's let's just look at this also that's oh i don't have i plus j it's not i plus j and it's not i plus j plus one it's i plus chunks so chunks is 10. great so these are these are all the next positions oh they have to be normalized so they also have to be normalized so they should have they should be divided also by the width and the height great so these are the output tensors the reason why i'm doing that is because the next thing i need to do is call model.fit so fit is really a function for um oh it means what it says but you know you would think like oh next thing is train the model model.train and actually if you look at ml5 no train i am i'm contractually obligated to blow the train whistle um oh uh a train is the word that's used in ml5 but fit is really what's going on here because basically i have this neural network and i have this trading data set and i want the neural network to uh fit i want to fit that d fit the data inside the neural network i want the date the neural network to learn from that training data set so i want oh i want to fit it why is it fit i can't get this to like make sense it's like it's so embedded in my brain to think of like i'm fitting the data like we're fitting the model fitting the model to that data that's what it is so what goes in model.fit oh let's i can see it here i think it's just x's and y's um we can look for um compile evaluate predict fit so we can see here and oh well here's my answer i could just do oh i can do something much simpler like just this by the way that's interesting so i want to say model.fit the x is the y's then and the number of epochs okay great let's see here so i'm saying model.fit the x's and the y's and then i guess i give it an object which i want to say like how many epochs so an epoch is it epochs or epoch i'm just going to say one right now and epoch is one time through all of the data batch size is also maybe important here but i'm going to ignore that for right now batch size is how many chunks of data should i batches of data i guess i'm saying chunks but a batch is like a chunk how many batches of data or how big should a batch of data be before i start tuning the neural network so if i have a thousand data points i might do batches of a hundred and that would be ten batches of a hundred and so i wanna use the um this is an asynchronous function it takes a while to fit the model so i'm going to put this in a function i'll call it train and i'm going to say this is oh it's an async function and i'm going to say await model.fit and i will call train so let's await and i i probably should use some callbacks and things like that but let's see what is it doing here let's just try oh there's a hiss well i get something out of it cool i guess i get information about you know how the model was trained and then i can um i see call that h i'll just do what they're saying what's i oh it's like calling fit a bunch of times that's interesting why would you call fit so here's my question why would you call fit five times why not just have it be 15 epochs that's confusing to me does anyone know the answer to that i don't know but i'm not going to worry about doing it five times let's just say um let's look at the total loss when it's done all right here we go people well that that didn't go well error when checking target got array 1424 comma two dense two to have three dimensions so my data is not formatted correctly um did i do that by accident in chunks of 10 also no i mean is it just no i mean i i kind of know how to get this to work with flattening the data um it resets the neural net people are answering that question in an interesting way but at first i want to get this to work so did it get through like let me just take this layer out for a second well that doesn't make any sense actually um shoot error when checking target expected density to have three dimensions but got so this is right that's the array's shape but it should have three dimension what uh no is it really like like is it this because the x and y are just one number that doesn't make any sense blank ten two blank ten where'd the ten come from put shape oh this is the bane of my existence with doing this machine learning stuff run the debugger there's a debugger i have no idea what that how that that works i'm gonna figure this out um okay got this blank 10 why is that where's this 10 coming from so i i feel like i know a way to get this to work that i was trying to i guess the x y's being in pairs don't actually matter so i'm gonna do this differently if you will all um i'm gonna i'm gonna do this dif i would love to like figure out exactly what i did wrong here but i have an idea of how to do this differently oh yeah it's actually just this which is silly but third shape promoted shape oh okay okay all right i give up i'm gonna do this a different way um one thing i want to figure out is if i have an array if i have an array and i say a push 3 comma 2 that's my array then a push 9 comma 10. great okay i need that for loop of x's and batches chunks is 10. 10 is the chunks okay hold on people are telling me something here that does sound reasonable oh no batches of ten the chat is being helpful to me but it's a little bit too much for me to follow um so i think i'm going to do this a different way that i kind of have more confidence in working the the fact that i'm keeping the x y's together is kind of irrelevant it doesn't really matter i'm not doing like a convolution here so that i could just flatten the data like it makes much more sense for me to just have this be 20 things in it so and then have the raw output be just two things so that this now is chunks times two right this is like basically just changing it to instead of having it be arrays of arrays it's just uh like a threedimensional tensor it's just twodimensional which i think is going to make more sense and then this is just chunks times two and then this oh no hold on let me look at the example hmm all right let's see this this is what i'm thinking yeah that worked [Laughter] so i i i i think me trying to do the the keep all the xy's together in their own little arrays set me off on a a bit of a tangent that's kind of unnecessary here um i know that was probably confusing for those of you watching because i did it in so basically let me explain what i did so i had it i had it originally as each each data point was the following xy so this is the inputs were like this with 10 of these but i think it's ultimately simpler for it just to be this so instead of having like lots of little internal arrays with each xy which could be useful in case i need to like do some operations where keeping them in pairs is really important but i'm not doing that so i think this is better now the other thing i want to do is i want to um i i want to be able to see the loss over multiple epochs probably so i know that and i'm running out of time here so i want to look for these i think i can pass in callbacks so i'm just going to grab this um which is some code that i have from another example that i saw uh it goes in the fit function and i think if i do this um so what's this on epoc and i don't need on batch end i'm just going to get rid of on batch and so i have callbacks in addition to epochs come on you can do it you can get this syntax right epochs callbacks that's on epoc end callbacks i'm trying to like organize this the way that it's and i i don't need this lost p html nonsense epochs one call backs on epoch there on there and then there we go so i added a callback and little let's give it 10 epochs and then what what how do i get oh how do i get um what did i do in my example uh logs lost to fixed so let's grab that epoch logs so let's do let's print out the epoch plus logs loss to fixed i don't need a plus that's why i'm using this string literal epoch and then loss so let's see what happens here so interestingly i am getting a loss of nan whoops i didn't mean to split the pain i have pain i didn't mean to split it so um and whoa everything got so wide all of a sudden okay now i think what's missing from this is a couple things one is thinking a little bit about this optimizer so i'm not sure if i'm using a really socalled smart optimizer here but more importantly i think the thing that's really missing are what are the activation functions so i don't know what they are by default but i am going to put in to both of these the sigmoid activation function all right given that i have about 15 minutes left in today's live stream it's unlikely i'm going to really dive too deeply into what is an activation function definitely somewhere in one of my video tutorials i cover it but if i were to if you were to think back to that um do i still have it open the brilliant neural network library but let's um um let's see if i can find one that would sort of make sense in this context so i just want a um here we go perfect so this is basically um a pretty this is a two layer network so there's how many inputs i have 20 inputs because i have 10 xy pairs my hidden layer has 32 and my output layer has two not one so that's the only thing that's different but basically as the data flows through this sequence it has to be processed it's a weighted sum so the input values are multiplied by the weights of the connections and then are passed through what's called an activation function the activation function has does a lot of you know serves a few different purposes but in this case what i'm really thinking of is it takes the um the the weighted sums and squashes them and so one of the things that is important to me here is that i want outputs of the neural network that are between 0 and 1 so i can expand those easily back to 1920 by 1080. so um so i i really do want the output layer to be sigmoid um there is something that's sort of more modern more more sort of like currently used which is called relu rectified linear unit which just chops up the negative values i have no negative values though i wonder if i should be mapping my data based off of like 0 0 in the center so this is really what i'm not sure this is also why using the vector between the next point and the previous point might make more sense i don't really know but let's just try it like let's just let's just live in like you know the 1990s and really very basic like kind of classic neural network architecture with just like the sig classic sigmoid activation function with stochastic gradient descent i'm going to lower this learning rate to something much lower and let's see what happens oh yeah look at that my loss what by the way is this is just some like auto print out something like do i not need to do this in node like maybe i don't i don't need this callback at all i went all that time to do that call back because node is going to automatically print out stuff for me well that was silly so i'm going to take that out of my code and i could well that's fine let's give it like 20 epochs oops no no i don't need to do that okay it's going down i kind of like that i mean is it still going down let's give it a 100 epochs down down down it goes huh this is working surprisingly well why is this loss are these like the internal batches or something why do i have this nice beautiful loss that's going down and then this lost the tire regardless i think now i can try to make some predictions i'll make a function called go and i'm going to say await train now i'm going to say um i'm going to make a function called predict oops and basically what i want to do let's take any arbitrary what do i have is it raw input i want to take any arbitrary sequence of 10 from my actual raw input so let's pick um let's say i'm going to take a random number a math.random times rawinput dot length math.floor that and then and and it should be actually times raw input.length minus chunks is that right are chunks oh oh i could just take one of them i already have it okay great sorry sorry sorry raw input.length now i'm going to say my inputs my input is raw input dot index r and then the x's are tf tensor inputs and i should put that in an array i think and the shape is chunks times two just one of them right because uh a one comma chunks times two i'm just going to predict one thing i'm trying to create i'm trying to just test right and then i can say uh the outputs are model await model dot predict so passing now i'm using just some of the training data which i realized i should create my own data like i should move the mouse and then have it continue i won't get to that probably today but i will get to that at some point um i want to get those outputs and let's just see if i get something so we're going to say await train await predict um say training complete i'm making a prediction all right let's see uh await train oh this has to be an async function also now i need to call go all right let's see what happens okay it's training the model loss is going down and then hey i got a prediction now that's a little bit disheartening that the prediction is like be in the middle like i feel like that's not very good like maybe that's what it actually should be but that seems um let's let's do a bunch of different predictions and um what i should also do is um i should actually pull it out of the tensor so you can call the dot data function and then i can just console log the x y because in theory what i could do now is just tell the mouse to go to these locations training let's see what i get do i get all yeah see i don't know i mean was my mouse moving around the center and does that seem reasonable so hard to know i suppose i could quickly spin up the next step i mean i think for this to feel at all satisfying i should so um uh right because we're not we're not really seeing if this works at all so let's let's let's go to the next step and i'm gonna um in order in order to be a bit more expedient here i'm gonna go to the code from my talk um repository and just grab like what i did here which is to add a quick server although i guess i could use wait a second let me go back through the discord i can control the mouse with um um where was that dusk i saw print gave me the link but i can't find it now oh i'm sure i can google it uh npm robot.js let's try doing this without processing so this will be new so there's a node package for desktop automation just like in java it's called the robot class it's called robot.js so let's try adding that and we're gonna start moving the mouse it'll be fun uh you know depending on what your idea of fun is uh definitely for me this is my idea of fun okay so actually what i need to do that's different is back into the code before i could do that this was a very silly thing that i did which was just like oh let me predict this a bunch of times so what i really want to do is um here we go i want to start with some inputs so i'm going to start with an arbitrary set of inputs and then i will call something called predict my own function called predict based off of those inputs and i'm going to get hopefully a next point there so predict based off those inputs get the x's get the outputs get it as an x y but return that then um and i want to do this then i want to say let's just do it like 10 more times i want to take the hmm i should probably i'm going to call slice just to make a copy of it slice makes a copy of it right because then what i want to do is i want to say inputs dot splice the first two elements like i want to take the first two off and then inputs dot push push the new the prediction it just got and then this should be let maybe and then next is predicted again right won't this do a nice little loop where i start with 10 mouse points i predict the next point once i've got the next point i take out the two oldest points put it in and then get a new next point and do that 10 times won't that work and this should be a weight and this should be a weight pretty sure that's right it's a little silly that i have to oops a little silly to have to train the model each time but i'm not it's so fast because it's so little data that i'm not going to worry about that okay oh how how come it didn't do any prediction did i not console log anything oh i'm not console logging anything so let me hold on hold on where was that where am i doing prediction i've lost it sorry for all the scrolling i'm getting a little tired again oh this is where i call predict but i want to do it here next so maybe this is probably like let's just do this a little silly but i'm just gonna log it here and then log it here okay uh and let's just uh let's lower the number of epochs just to get to see that it's working yeah look at that so those are the 10 next mouse positions to move to so now in theory where is this robot js thing i was there robot.js um let's go to github and see okay robot equals require robot.js now key tap mouse get mouse position i want to move the mouse robot move mouse is it really that easy what does set mouse delay do well so now is it really as so let's say move mouse next oh no no no no i want my own function no wow it really wants to type out what i want to do but and then i'm going to write function move mouse this is very bad it's going to take over my mouse and then point point comma 0 times 1920 point point comma 1 times 1080. okay everybody are you ready to watch my mouse get my the ai take control of my mouse this is going to do it for 10 points let's let's throw caution to the wind to give it a hundred is my mouse moving oh wait what what what happened there uh it didn't print out the uh uh didn't print out the predictions well i took out the prick to not predictions because i do i need like a callback for moving the mouse or a mouse delay it probably did it so fast i guess i need that mouse delay uh let's that's speeding it up no okay hold on no it's doing it just like does this work let's just try this for a second weird okay did it do it let's um let's console log let's console.log what we're putting in here well let me check the chat here that's where it was supposed to go i don't think it's working very well this is what i didn't think would work set mouse delay a hundred make sure you're focused on the terminal okay so i need to set mouse delay let's try that robot set mouse delay 100 and let's let's let it train the model a little bit longer and see i don't even know where the mouse is i don't see the mouse does anybody see where it is i can't find it 958 should be like is this where it was let's okay let me put it over here i'm going to put the mouse over here everybody see it over there here's where it is right it's over here between these leaves but clearly this is not working because it's just stuck in one place so this is my problem wait where'd the mouse go it already moved where'd it go this is the end of our today's live stream i'm actually just really curious to try this example with the sine wave this is really but where is it getting oh okay let's i'm just curious to try this um let's just try this um mouse i'm going to create something called mouse.js so this i just want to see this i just want to watch to see if this moving in a sine wave works let's try this example where is the mouse am i just blind okay i'm starting it over there do you see it it's over there i'm gonna keep my i'm keeping my eyes glued to the mouth okay i'm looking straight at it oh wait i'm looking straight at it as soon as i do that it's gone i can't find it interestingly and i'm able to move it myself what am i missing i'm looking in the chat to see if anybody's telling me could be going behind the window it could be going behind the window that's interesting let me see i i should read the documentation a little bit better i mean that's what i should see if you need to build no i'm gonna be in here xcode i mean i have all this huh pull up a blank white screen that's not a bad idea look who has a nice blank white screen why also is it's just stopped do i have my cursor set to hide when i type oh yeah my cursor is set to hide when i type so where is that is that is that a um that's weird where is that setting okay why does my cursor disappear control panel mouse properties pointer options okay i have to go soon people there's a conference happening i got to get set up for that but i just want to see this work um let me make sure nobody's sending me any crucial like emergency messages okay not that i see all right um where was that mouse mouse properties no control panel mouse properties is this not on the mac well this is like from 2013. quickly shakers that doesn't seem like the right stop is it is it a i term setting yeah wait hold on yeah it's only an i term it's an item setting pointer ah click what focus follows mouse that's weird nobody knows huh why i think i spelled disappears wrong use vs code in build terminal wiggle it as soon as i run the script yeah but the whole point is ah wait i think i got it except it's not moving first of all why is it taking so long oh because i have the delay to 100. oh i don't set a break point like it shouldn't let me move the mouse let's all right hold on this must be an os x thing all right i should just go back to processing processing definitely works ah i should have been there so this is like i got sidetracked trying to do this in node all right don't worry everybody it's okay just give me a second here i'm gonna i'm gonna not worry about trying to do this in node anymore um all right so this is this is this is great so i'm gonna go back to um somebody can help me figure that out but let's let me go back to my actual uh what i did where where is this one no no uh predict mouse movements okay so what i did when i was trying this is i just can quickly add a node server i'm just gonna i'm just gonna get all of this from the so i'm going to grab this and go back to here let's take out this mouse move and i am going to um so i'm going to say npm install express so now what i'm doing is i'm creating a little server oh and i made random inputs which um oh that's interesting i did this in a different way eventually i think but sorry i'm just thinking about this um mouse so that's fine i'm going to start with something random then i'm going to call await this is the same thing all right this is and then send those back so this is basically from processing i can just ask for the next two points let's see if this works so now i'm going to go into processing create a new sketch i am going to import the http request not pz cam import the http request for processing and again because i'm kind of out of time here um i am going to really just grab this mouse you know what i'm just going to grab this completely so basically oh but i was doing something more here was i i'm not sure um let me just grab this i don't i don't know what this is doing oh yeah oh because i was working with vectors at this point all right i'm gonna make this much simpler okay so mouse mover so and then import the library i just want to have a little win here before the end okay so i am going to uh the other thing i need is i need to get the content back and console log it okay and print line move to so basically what i'm doing here now is in my server instead of actually calling instead of calling predict here i'm just going to train the model and then whenever processing sends a get request to the server it will run the prediction and send the xy back to processing so let's try this i just think no oh i'm not running the server that would help to run the server not not that we're almost there folks land this plane no what happened uh snapshot is not defined index index.js line 99. oh uh snapshot is like chunks chunks times two right because i need 20 numbers i think that's right okay training the model once the model is trained i love how i really thought i was going to get to like trying to use a recurrent cell once the model is trained i'm going to hit run okay great look at this i got it back i got the xy back beautiful so then now i just need uh will it oh it's already doing it's already doing the splicing so it'll give me the next one so now i can just say uh void draw avoid setup okay right now i'm getting mouse positions again this is going to be very sad because it's obviously clearly not going anywhere of note but uh let's at least get it to work so all i need now is um the robot we are the robots uh import i think it's from java.awt and i need to say a robot robot so i've got the robot and now the only function i really need is called robot mouse move and uh i will say um uh the the values are convert move to splitting up by a comma to floats and then mouse move to values index 0 times 1920 and values index 1 by 1080. what's wrong here uh it needs uh double quotes let's just make sure this actually works and yeah right i don't it's it's keeping it in the center oh so sad let's um yep let's make this look a little bit more interesting uh i should do the sine wave but uh and i'm gonna do something terrible but i can't resist um so instead of using the neural network let me just pick some random values oh that's p5 code just so i can see the mouse actually move and then i will upload this code and maybe somebody can help me develop the model architecture in a way that it actually does something um i should really start i should have also started with actual mouse points that are going in a circle but i have to wrap this up uh let's just give it one epoch okay here we go everybody yay the mouse is moving randomly you can see it have a better idea oh no no i gotta stop so you you get the idea i'm looking at the chat just for a second all right so we have all the pieces working right i have just to just to recap for a second is i'm going to post all this code and i would welcome any contributions i didn't get to actually implementing the recurrent neural network i think there's also there's just like probably a lot of fundamental flaws in exactly the way that i'm doing this in the sense that i don't i just don't even know if it's really reasonable to expect that 10 x y positions could predict the next one i don't know it doesn't sound so crazy to me so i think it's really the model architecture but let's just recap so i have a training data set of xy positions i have node code that and i'm going to take this out we don't need this anymore that loads that data set puts it into tensors it's ready for a neural network then i take it in groups of 10. so 20 values 10 x y pairs with the next position so the x's are all those 20 values and the y's the output of the neural network is just two values the xy prediction i set up maybe i should have tried just like a different activation function who knows but i set up one layer with 30 or i never even bothered to explore like how many hidden layers one output layer i never explore different activation functions i never explore different optimizers different loss functions so all these things are things you could explore then this is no longer relevant um then i'm training the model then after i train the model when it's done there is a node server that can just receive a message like at a particular route and then it's going to well i should put this back call predict on the model and if you know the input that this is a flaw here i just made random numbers for the input data that's probably a big problem so this is something that uh could use so let me actually put some notes in here how to start the input pull from training data here's something else um should i try more or fewer points um is this model architecture reasonable uh try different activation function um so this is something you could explore all these things are things what what optimizer and loss function so that all and and this is all otherwise quite reasonable training it calling predict having processing call predict and then this also is totally i mean there's nothing to this code it's just like hey uh once a second query for a mouse position and move the mouse so i'm going to very very quickly the last act of this live stream oh i forgot to scale it up when i used robot.js was that the problem is i don't know still a mouse was disappearing who knows okay i might have forgotten to scale it up when i was using robot.js ah i think i did oh anyway too late um let me very quickly make a github repo i mean honestly this is mostly what's in that other repo um but let me put it in the coding train and just call this mouse live stream april 30th let's make this public and add a readme um let's oh add a file i definitely need to do a like dot git ignore because um then i want to say dot or node modules i don't want any node modules okay so commit that and then now let me this is like a a crazy way to commit a project but it'll do oh no i don't want this so let me add this up here uh there we go so here's that code and then the processing sketch i guess is unnecessary if um if the robot.js in node worked but let's uh put this in here but now you have all the code i can go to uh the coding train discord shout out to the coding train discord posting the link into the chat while i live stream there there's a channel here called schedule where i will um if things are going well post announcements about when the next live stream will be and then um and then uh links is where i will share things that i'm doing like for example uh there now that repo is there and then also i think probably for reference um you know why don't i share this link as well all right that i know this is like a kind of a rush to um get out of here but um this is the end of today's live stream just peeking at the chat yeah so you know um something that i'm in was interested in trying is um there's something called deep svg so if i could convert all my mouse movements into svg then i could potentially use this to predict the next mouse movement so that i would love to explore the thing that the next step that i wanted to explore that i never got to is um if i go to tensorflow.js and look for api no api tensorflow.js this is what i was recurrent neural network yeah so there's no this in theory is what i really should be using from the start but i didn't don't feel confident enough in my tensorflow.js knowledge that i wanted to try this method first but this is my next step if anybody wants to take this project and experiment with doing it with tf.layers.rnn please be in touch with me i probably should have collected a lot more data there's so much that's missing i would love to solve this i've gotta move on from this mouse conference video and examples but i will would love to circle back to it at some point so please uh any suggestions at shiffman on twitter leave a comment in this video's description as soon as i turn off the live stream comments will be available um and i'll see you next i think i'll be back next friday um i should be back next friday i'm gonna be having a fairly regular at least two or three live streams in may i have such a backlog of tutorial videos to get out oh my goodness at least eight or nine of them and then stay tuned for the actual mouse conference video which will be on the channel early next week i hope that you enjoy it um and that's all i have to say thank you everybody i'm i'm sorry that i'm not sharing i haven't shared community contributions a while i haven't released a coding challenge in a while it's all it's the circle of coding trained life we'll we'll get back to it at some point all right look close let's let's see have i st how many how many tweets of my mouse movements have gone up it's pretty interesting to see these these are all the mouse movements from my live stream today probably should not be doing gotta figure i gotta go into the server and give it a more i guess allow a larger image all right this is it uh i'll see you all oh oh oh oh stop pull the presses hold the presses i'm gonna be back in 35 minutes i forgot uh i completely forgot um guess what upcoming live stream so if you missed yesterday's live stream um neto bomani is during the mouse call we've got the audio of the mouse conference available for you to listen to a lot of panels tonight so even just listening to the audio will be great and you can watch neda live create a zine um in this stream um i'll be there in the chat moderating so you have questions about this this mouse code stuff i'll chat with you during that uh um um and it's just beautiful the work that she's doing is amazing we are also fundraising i meant to mention this for um oh shoot i'm logged just give me a second here let me pull this up oh no no it's in the sorry it's in the description so um here we go uh i just want to mention a shout out um you know thank you to brilliant by the way for being the sponsor oh wrong button um the sponsor i am donating a portion of the sponsorship fee today to uh survived and punished um they are have a uh goal of reaching a hundred thousand i reached their goal amazing well i'm still gonna donate two days left but that's wonderful to see that uh survived and punished uh reached their goal of a mutual aid group uh project of survi um um that exists to end the criminalization of survivors and of domestic and sexual violence a wonderful organization that neda introduced me to um so if you if you're able to donate i highly uh would encourage you to do so so um that is really all i have for today come back for the live stream in about 35 minutes it won't be me coding but i think you'll really enjoy it um and hang out in the chat all right everybody see you then as always i always forget that this stop this stop it stop this stop i'm gonna do this stop this stop i'm gonna do this this stop this stop this stop i'm gonna do this stop i just stopped this goodbye everybody usually i play a few more songs but i gotta run and get set up for the next stream so see you then
