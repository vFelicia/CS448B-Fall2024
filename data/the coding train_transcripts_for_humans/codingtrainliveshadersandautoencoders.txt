With timestamps:

00:02 - [Music]
00:13 - do
00:14 - [Music]
00:21 - [Music]
00:47 - so
00:53 - [Music]
00:59 - [Music]
01:05 - do
01:09 - [Music]
01:30 - [Music]
01:48 - do
01:50 - [Music]
02:16 - [Music]
02:20 - test one two i should probably come up
02:22 - with something else to say besides test
02:24 - one two just checking out my new mic
02:27 - setup it's a different lav mic
02:29 - i'm wondering if you can hear me the
02:31 - balance with the audio
02:33 - music that
02:34 - is it's very echoey i do have these
02:38 - sound blankets i have sound foam i just
02:40 - have yet to really put them up here
02:42 - all right muting myself i'm gonna follow
02:44 - the chat and see how my audio was thank
02:46 - you very much
02:48 - [Music]
02:57 - do
02:59 - [Music]
03:11 - do
03:25 - do
03:29 - [Music]
03:54 - [Music]
04:05 - [Music]
04:21 - do
04:23 - [Music]
04:39 - [Music]
05:14 - so
05:23 - [Music]
05:44 - so
05:56 - [Music]
05:59 - do
06:00 - [Music]
06:16 - hello
06:18 - happy monday
06:19 - monday
06:22 - is that a song if not it should be one
06:25 - welcome to the coding train i
06:28 - was hearing static there towards the end
06:30 - playing
06:31 - music and i'm wondering if you hear
06:34 - static with my voice or is it just
06:39 - yeah you hear that static
06:41 - very loud
06:42 - you know we don't really need music i
06:44 - like to have my little sound board with
06:46 - the effects and the tracks and it helps
06:48 - keep me going here in my
06:51 - live streaming
06:52 - thing that i'm doing
06:56 - uh you know
06:57 - i can't believe i'm even here live with
06:59 - you in the fact that like while that
07:01 - music was played really like hooking up
07:02 - wires and putting things together the
07:04 - static is a music only says max all
07:06 - right so we'll worry about that later i
07:09 - can only assume it's something
07:10 - uh with these little cables and i could
07:13 - like unplug them and plug them back in
07:16 - and move things around oh that's going
07:18 - to make some crazy static and like just
07:21 - move this here and take this and go
07:23 - underneath and this is what you uh this
07:25 - is this is why you're here right to
07:26 - watch me
07:27 - move some cables around and unplug and
07:29 - plug things back in oh boy that is some
07:31 - loud static and here we go
07:35 - [Music]
07:37 - the static is gone
07:43 - and uh ruby webb dev yes this is really
07:46 - live i am coming to you live from the
07:48 - hudson valley of new york it is sunny
07:50 - outside gloria is my my dog if i start
07:53 - talking about gloria that's because
07:55 - she's my dog is sitting in the sun and
07:56 - the grass over there i'm in a garage my
07:59 - new setup i think every time i live
08:01 - stream we get it a little bit better so
08:04 - um
08:05 - welcome if this is your first time these
08:08 - live streams tend to be incredibly
08:09 - disorganized
08:12 - some might say kind of useless
08:16 - yet um there are some people who choose
08:18 - to watch them anyway i'm not sure why
08:20 - but in theory if i could ever get my act
08:22 - together i would be programming some
08:25 - interesting
08:27 - illuminating code examples that would
08:29 - inspire you to go off and make your own
08:32 - uh
08:34 - projects to express yourself creatively
08:37 - through code that's the idea here now i
08:40 - have been doing this for quite a long
08:42 - time it so it seems um it's that's what
08:44 - i seem to be talking about often given
08:46 - that it was recently the processing
08:48 - processing
08:50 - the
08:51 - processing's 20th anniversary uh that
08:54 - software the processing dev software is
08:57 - where everything kind of began for me
09:00 - i started to program a couple years
09:01 - before i discovered processing and i was
09:04 - working mostly in macromedia director
09:05 - with the lingo programming language i
09:07 - won't tell that whole story again
09:09 - but it's been a while at all of this
09:12 - time
09:14 - all of this time
09:15 - i have not really ever dabbled in
09:17 - shaders and i had the wonderful
09:21 - incredible
09:22 - uh sorry i'm looking over here
09:24 - uh is it monday there
09:27 - oh oh this is there is it monday in
09:30 - india i would think it is
09:32 - 9 p.m
09:33 - okay now hold on a second i am
09:36 - completely unprepared i have nothing up
09:38 - on my screen
09:40 - uh who's using this it's me
09:42 - um i am going to go to curia oh just
09:46 - talk amongst yourself for a second
09:49 - i really should have been prepared yes i
09:51 - think this is it ah all right actually
09:53 - before i go to tell you about
09:56 - this amazing thing that i got to
09:58 - participate in like two days ago where i
10:01 - tried to code some shaders and i'm gonna
10:02 - bring that here onto the coding train i
10:04 - first have to thank today's sponsor
10:06 - [Music]
10:09 - brilliant
10:10 - do you like learning do you like
10:12 - interactive learning do you like
10:14 - watching me on video talk talk talk talk
10:16 - talk if you don't actually i've got
10:19 - another way for you to learn
10:20 - it's a wonderful website there's an app
10:23 - all sorts of courses in math science
10:26 - there's these daily challenges you can
10:28 - do i love the algorithm fundamentals
10:31 - course i'm working through this course
10:32 - called beautiful geometry and instead of
10:34 - watching somebody describe things to you
10:37 - on brilliant you get to manipulate the
10:40 - stuff and answer questions through
10:42 - interactive animations and all sorts of
10:43 - great stuff i'll come back i'm gonna do
10:45 - i'm gonna continue working through the
10:46 - geometry the beautiful i forget what
10:49 - it's called now something about
10:50 - beautiful geometry
10:51 - uh later about halfway through the
10:53 - stream um but if this interests you you
10:56 - can sign up at brilliant.org codingtrain
10:58 - you can sign up there for free there's a
11:00 - lot that you can get on brilliant for
11:01 - free they also of course have a premium
11:04 - subscription to unlock all of their
11:06 - courses if you go through that link you
11:08 - will receive a 20 off you'll receive 20
11:10 - off and you also let them know that you
11:12 - found it through me which is you know a
11:14 - nice thing to do if you feel like it but
11:17 - you know hey
11:19 - now on saturday thank you brilliant on
11:21 - saturday are we going to be looking at
11:23 - shader toy talk says taser cake my goal
11:26 - by the way i i i should try to be a
11:28 - little bit more organized in my thinking
11:29 - and just not randomly like look over the
11:31 - chat and go off on a different topic i'm
11:33 - gonna i would like to get a sh this i
11:35 - have a very simple goal wait no let me
11:37 - let me go back
11:39 - i was on a train on a track and i should
11:43 - try not to veer off the track too much
11:45 - on saturday i'm gonna answer that
11:47 - question on saturday let's see if i
11:48 - press this button here
11:50 - i had this amazing experience of
11:53 - visiting a twitch stream called
11:55 - curiously minded with eliza and alethia
11:58 - i hope i said their names correctly
12:02 - either of you are in the chat please say
12:03 - hello
12:05 - i can go here under about
12:07 - and
12:08 - read all about their story here is
12:10 - alefia
12:11 - and eliza
12:13 - and if i go on to stream
12:16 - uh look at this look at this this was me
12:18 - it's still here saturday october 23rd
12:21 - you can't trap can you travel back in
12:23 - time actually if you could do that
12:24 - please let me know i would really like
12:26 - to know about that
12:28 - i do believe that at some point the
12:29 - recording will become available of this
12:31 - live stream
12:32 - um but they stream
12:35 - mostly on saturdays they do this
12:36 - wonderful thing where they have like a
12:38 - season i aspire to this where it like
12:40 - begins and it comes back at a regular
12:42 - time with a guest every week and then it
12:44 - takes a break for a while and comes back
12:45 - again me i'm just like i think i'm gonna
12:48 - make it happen today it's like i wake up
12:50 - in the morning i take my kids to school
12:52 - i frantically try to like clean up and
12:55 - answer some of my emails i'm like yes
12:56 - yes yes i kind of do it today i'm gonna
12:58 - do it today i press some buttons i start
13:00 - to unplug and plug some cables so one of
13:02 - these days i'm gonna get onto a schedule
13:04 - everything's gonna work out it's going
13:05 - to be great ah i can't wait oh my
13:07 - goodness we're all it's going to be
13:08 - wonderful
13:10 - anyway i was a guest on their stream
13:13 - um
13:14 - and um they um
13:16 - pretty much i i think if i'm right
13:18 - exclusively work with shaders and each
13:20 - week you know i think their next guest i
13:22 - think i can say because they announced
13:24 - it is a shader expert if you don't know
13:27 - shar styles as work you absolutely
13:30 - should um but but i was i'm like the
13:32 - shader beginner so i had never i mean
13:35 - i'm almost embarrassed to admit i've
13:36 - never programmed a shader before in my
13:39 - entire life i've helped people with
13:41 - their shader code because why not you're
13:43 - coming to me with a code question i
13:44 - might be able to like understand it and
13:46 - move things around and figure out some
13:48 - syntax stuff i've never actually sat
13:50 - down to understand and learn it on my
13:52 - own so um
13:54 - i would like to take some time today
13:58 - [Music]
14:00 - i would like to take some time today to
14:02 - bring over the code that i worked with
14:04 - on their stream
14:06 - and see if i can get it to run in p5.js
14:09 - i know p5.js has some hooks into shaders
14:11 - i have no idea how to do this like i'm
14:13 - really just going to figure this out
14:14 - during the stream or not figure it out
14:16 - during the stream which will be uh
14:19 - probably less interesting to watch but
14:21 - it's what happens sometimes as we all
14:22 - know when you're programming you can
14:24 - spend an hour
14:25 - not getting anything to work oh and let
14:27 - alone an hour a day a week so much time
14:31 - my advice by the way if that's happened
14:32 - to you just time box it give the tape
14:34 - stop at some i mean i'm not i'm so
14:36 - stubborn and i do this to a false where
14:38 - i can't get myself to stop but if i ever
14:41 - could just get myself to stop and take a
14:43 - break and come back later usually you
14:45 - can figure it out just like that uh so
14:47 - much clapping am i clapping
14:50 - um
14:52 - so does somebody know when the edited
14:54 - video of this live will be online so
14:56 - louis that's such a good question
14:59 - i'm all out of sorts these days i used
15:02 - to have a very specific practice of long
15:06 - messy live streams and certain sections
15:09 - would get edited into
15:11 - uh videos
15:12 - it's not happening so much these days
15:14 - the stream is probably just gonna exist
15:16 - as is
15:17 - but it will have um
15:19 - time codes in it
15:21 - i'm trying to get back to that
15:23 - and i actually have the a new streaming
15:26 - pc this is not that interesting uh if if
15:29 - you'll allow me to press a few buttons
15:31 - for a few minutes i might be able to
15:33 - record
15:34 - to do some editing later uh
15:38 - yeah so um
15:40 - and a methornull says i have a shader
15:43 - question that i think would be perfect
15:44 - for a stream all right i will not be
15:46 - able to answer it
15:47 - but the chat i bet you will i mean
15:49 - little known fact
15:51 - actually largely known fact i'm not
15:52 - really very good at this
15:54 - i just have a lot of energy
15:56 - apparently i think it's because there's
15:57 - a camera and i happen to be a very vain
16:00 - person and i can see myself in this
16:02 - monitor and it gives me energy
16:05 - that's sad it's a sad truth of it all
16:07 - isn't it okay anyway so thank you
16:09 - eliza and alethia uh i hope that um when
16:12 - i again can get my act back together
16:14 - having guests
16:16 - that i can have them on stream to uh
16:18 - talk about shaders a bit uh please check
16:21 - out um their work uh subs i don't know
16:24 - if you do you subscribe subscribe and
16:26 - like
16:28 - that's what you should be doing
16:31 - but um tune in to curiously minded it's
16:33 - wonderful
16:34 - and let's see so that's that's item
16:36 - number one uh then i got to take a break
16:38 - and do a brilliant challenge uh then
16:41 - item number two even though i'm on my
16:42 - third finger i count in very unique ways
16:45 - i mean like really this is really item
16:47 - number zero
16:49 - can you say that if you say number zero
16:50 - it sounds wrong if i say index zero it
16:52 - sounds right right
16:54 - ah programmers and counting
16:56 - um
16:58 - i would really like to i'm teaching
17:00 - sorry
17:02 - in my nyu course that is happening in
17:04 - parallel i am like a gpu parallel
17:07 - teaching
17:09 - trying to make it all work together not
17:11 - not
17:13 - not going so well these days if i'm
17:14 - being perfectly honest i'm trying my
17:16 - best um i am teaching this week about
17:20 - generative
17:21 - machine learning models
17:24 - we're going i'm going to with my course
17:26 - class be using um some pre-trained gans
17:30 - specifically a tool called runway uh
17:33 - which has a lot of it has something
17:34 - called ml labs which lets you in the
17:36 - browser play around with a lot of
17:37 - machine learning models i've used it
17:39 - before i'm going to use it again on
17:41 - streams
17:43 - but um and i could open up actually
17:45 - runway uh um you should really uh check
17:48 - out if you haven't checked in recently
17:51 - because they are doing a lot more with
17:55 - ai enhanced video and in particular one
17:58 - of the things that i'm trying to do
17:59 - let's see if this works
18:01 - uh this is my new whiteboard shot
18:04 - hopefully it looks pretty good one of
18:05 - the things that i've been working with
18:07 - runway
18:08 - with the
18:09 - vast coding train team
18:11 - i don't have my marker
18:14 - is that i draw diagrams often in my
18:16 - videos
18:18 - and then jason heglund who does some
18:20 - animations collaborates on animations
18:22 - with me
18:23 - will take those drawings and enhance the
18:26 - animation and i've been we've been
18:28 - trying to use runway to key out
18:31 - i hope you can still hear me yes key out
18:33 - my body
18:35 - and put the layer of the enhanced
18:37 - animation
18:38 - behind me so there's no green screen
18:40 - here but runway has this
18:42 - ai enhanced i don't know if that's right
18:44 - way to say it but a rotoscoping tool
18:46 - essentially
18:47 - um and so i encourage you to check out
18:49 - run the thing is so i'm using runway
18:52 - with my students but i would like to
18:55 - myself have a little bit of a deeper
18:57 - understanding of how generative models
18:59 - work
19:00 - and be able to have my own examples of
19:02 - them in action even if i'm not producing
19:04 - the kind of results that you know style
19:06 - gan 8 whatever style gand number the
19:09 - world is on these days uh i like to be
19:12 - able to peel back the layers and work
19:14 - with the most basic version of a sort of
19:16 - sophisticated concept and so to me i
19:19 - think that is an auto-encoder
19:22 - of which i have not ever done before
19:24 - i mean i have i have i think i have some
19:26 - like lectures with some slides about
19:28 - auto coders and i kind of like go
19:29 - through them and i like say the bullet
19:31 - points
19:33 - so
19:33 - you're a bit quiet uh people are telling
19:35 - me i'm a little bit quiet this is easily
19:37 - remedied
19:39 - um
19:40 - um so let me see if i can remedy it
19:42 - um but let me finish my thought here
19:44 - which is that so i you know simon was
19:47 - pointing out to me today you really
19:49 - gonna do two topics you barely even get
19:50 - to one so
19:52 - i really got to finish by like 1 p.m my
19:54 - time which is an hour and 40 minutes
19:56 - from now i mean i really should finish
19:58 - about 15 minutes because i have a lot of
19:59 - stuff to deal with and do
20:01 - but i'm committed to this and um so i
20:04 - got to keep going with it um let me see
20:07 - [Music]
20:10 - quilas does videos on shader toy that's
20:12 - cool all right so i'm i'm just want to
20:14 - hear some confirmation in the um
20:17 - control plus
20:19 - yeah
20:20 - yeah so i'm trying to enlarge the font
20:22 - in discord so i can see my uh supporter
20:25 - discord chat better but i i can kind of
20:27 - read it
20:28 - are we combining shaders and auto coders
20:30 - on the stream that's a kind of amazing
20:33 - idea actually
20:34 - but uh no although there is a
20:36 - relationship interestingly between
20:40 - shaders and machine learning algorithms
20:43 - particularly neural network-based ones
20:45 - because both use matrix multiplication
20:48 - and the gpu
20:50 - more on that later perhaps
20:52 - i would like to hear from somebody in
20:53 - the member chat in discord if i should
20:57 - raise the volume of my audio it's an
20:59 - easy thing for me to do but
21:01 - i'm seeing that in the youtube chat
21:03 - which is you know not always the most
21:05 - reliable source of information yeah i
21:07 - appreciate you all though very very much
21:10 - all right let's get to can i do a shader
21:12 - in the web editor
21:14 - i don't even know
21:15 - all right let's
21:17 - let's see if i can get into codepen
21:21 - uh
21:22 - because that's where i was coding the
21:24 - shader oh boy shoot
21:26 - you're gonna have to bear with me as i
21:27 - log into my codepen account
21:33 - [Music]
21:43 - ah okay breaking news
21:46 - [Music]
21:50 - i've got breaking news
21:52 - [Music]
21:53 - breaking news
21:55 - [Music]
21:57 - the
21:58 - uh
22:00 - i was looking at my phone to get my
22:02 - password but i have a message
22:04 - from alethia the replay is still on
22:06 - twitch and will be on youtube later
22:09 - okay thank you for that bit of
22:11 - information
22:12 - um and
22:15 - uh uh louise lessel is in the chat
22:17 - telling me i can use in the p5 web
22:21 - editor hi louise i've seen all these
22:23 - names i recognize which i which is
22:25 - really fun for me maybe a monday is a
22:27 - good day for me to stream i usually
22:29 - don't stream on mondays uh i can't tell
22:31 - like how many people are watching this
22:33 - right now it's about probably about the
22:34 - same uh all right so wait i was trying
22:37 - to log into codepen so uh when i stream
22:40 - i don't have my like password manager
22:43 - kind of like stuff all going because who
22:45 - knows what's gonna pop up so i have to
22:47 - look at it on my
22:49 - uh
22:49 - cellular
22:51 - telephonic device
22:53 - so please
22:54 - like i said
22:59 - talk amongst yourselves
23:00 - while i try to get my code
23:04 - [Music]
23:11 - seriously that's my password
23:12 - [Music]
23:18 - if anybody wants to hack my code it's
23:20 - not going to be too hard um
23:24 - i'm going to change that password later
23:27 - it did not make it one i probably like
23:29 - five years ago at this point i upgraded
23:31 - to using a password manager and just
23:33 - over time anytime i would log into
23:35 - something would create a new random
23:36 - password and apparently never did that
23:38 - for codepen it has a
23:40 - uh
23:42 - not such a secure password okay um now
23:44 - how would i find
23:46 - it was shared with me yesterday i know
23:48 - alithea you're watching
23:50 - you can send me another message how do i
23:52 - find the coach see i don't prepare for
23:54 - this at all in case anyone was wondering
23:56 - if i secretly really do prepare
24:00 - to look like i did and then to say i
24:02 - didn't prepare no you could say i
24:04 - clearly do not prepare because i just
24:06 - thought i'd log into codepen
24:08 - and uh no i don't see the uh
24:12 - the um
24:13 - oh because i had the link from them well
24:16 - then let me switch to uh let me switch
24:18 - to this view here and i think i can find
24:21 - it probably in
24:23 - uh
24:24 - um
24:25 - oh i'm getting breaking news
24:28 - breaking news
24:30 - okay oh yes
24:32 - the pen is being sent to me this is
24:34 - awesome
24:35 - uh yes and everybody should um join
24:38 - let's see if this works
24:40 - uh discord uh that didn't work that
24:42 - button didn't work so somebody who's a
24:44 - mod if you could please post a link it's
24:46 - actually really easy to join discord for
24:47 - coding training it's discord dot gg
24:50 - slash coding train or the
24:52 - codingtrain.com discord put those links
24:54 - up on the screen in magic post
24:56 - production that's never gonna happen
24:58 - i don't know in the future hundreds of
25:00 - years from now when we were all long
25:02 - gone somebody will be watching this
25:03 - video and there'll be some way with
25:04 - their augmented reality helmet that's
25:07 - holding on to their brain
25:09 - to put the stuff that's just going to
25:11 - put the stuff that i'm saying it's going
25:13 - to make it happen so someday that'll
25:14 - happen
25:15 - um
25:16 - okay hold on
25:17 - sent a link
25:18 - okay wait
25:20 - okay i can get it through twitter which
25:21 - you can't see right now so hold on
25:23 - everybody i think i'm logged in
25:26 - to twitter which i am
25:27 - i'm going into my messages
25:31 - i see a uh
25:35 - gif of shaquille o'neal doing this
25:38 - at me
25:42 - you know there's a green screen version
25:43 - of this
25:45 - that i could just oh how come it's not
25:47 - working it's my
25:48 - oh no is my uh why is that not working i
25:51 - mean i don't really care but i was just
25:53 - gonna give you all the green screen
25:55 - version of this okay
25:57 - uh
25:58 - i don't know why my buttons on my stream
26:00 - deck aren't working can i please pay
26:01 - attention shift men okay like focus
26:04 - focus okay
26:05 - i am now okay prepare to be hypnotized
26:09 - wowed and hypnotized i'm going to
26:12 - if my buttons still work over here
26:15 - show you
26:16 - the shader
26:21 - yes okay so this is the shader that i
26:24 - ended up making i mean i say me it was
26:27 - in collaboration
26:29 - i mean i think anything that like looks
26:31 - wonky and weird from the shader is my
26:32 - addition
26:34 - uh to uh eliza and alethia's amazing
26:36 - work so i think what i would like to
26:39 - sort of see is if i can first just
26:42 - copy paste this code and see the same
26:44 - result in p5.js then i will double
26:47 - backwards and try to explain the things
26:50 - that i learned about shaders in a very
26:52 - basic way and i mean um i have dreams of
26:56 - doing one of my more
26:58 - sort of it's not really scripted isn't
27:00 - the right word but sequenced
27:02 - hopefully somewhat coherent edited
27:04 - uh basic video tutorials on shaders i
27:07 - don't i don't know that i'm the right
27:08 - person to do that in terms of i mean i'm
27:10 - certainly not in terms of any expertise
27:12 - but maybe there's some value that i
27:14 - could add of kind of like talking
27:16 - through my journey learning shaders i
27:18 - should also mention i think that you
27:20 - can't talk about a creative coding with
27:22 - shaders without mentioning the book of
27:24 - shaders.com
27:26 - i mean just the book of shaders um by
27:29 - patricio gonzalez vivo and jen low
27:33 - and uh i think oh yeah so this
27:37 - the ripples
27:38 - is the thing that i was
27:41 - planning a future live stream
27:43 - uh that has like a water theme
27:46 - and i was going to try to do ripples
27:48 - which i've done as a coding challenge
27:49 - but try to do that in a shader i also
27:51 - want to do these like i want to do all
27:53 - the things okay but hold on
27:56 - uh i'm at codepen
27:57 - so let me just go to the p5 by the way
27:59 - this is what i did on last live stream
28:02 - i'm just really proud of this it's a
28:03 - slide puzzle
28:05 - should i try to solve it now it's like
28:06 - the choo choo bot
28:08 - uh in p5 so
28:10 - watch back that stream if you want to
28:11 - see me code a slide puzzle
28:14 - let me uh close that out
28:17 - how are we on time 11 30. great noon i
28:20 - turn into a um
28:21 - sponsorship pumpkin
28:24 - and then i'm gonna move on to autocoder
28:25 - so i've got about a half an hour now if
28:26 - i'm going to try to keep on schedule
28:29 - uh thank you again uh curiously minded
28:32 - check that out
28:34 - reference code pen here we are book of
28:37 - shaders okay
28:38 - so let's go to uh the p5 website
28:41 - i'm sure some of you know and could just
28:43 - relay this
28:44 - in the chat
28:46 - um
28:50 - um
28:52 - i'm just looking and
28:54 - uh oh freya has videos on shaders
28:59 - ah
29:01 - oh interesting
29:02 - um so freya holmer
29:05 - they make wonderful wonderful wonderful
29:08 - youtube videos in particular the bezier
29:10 - i made a bezier curve video at the same
29:12 - time mine was not as good but it was in
29:14 - my own way
29:15 - freyjas is totally amazing so and
29:17 - hopefully they both complement each
29:18 - other um but freya i'm now being told
29:21 - has videos on shader so maybe i'll check
29:22 - those out
29:24 - um let's go to um where would i look
29:26 - here
29:28 - um
29:30 - search
29:31 - shader there must be like a p shader or
29:33 - p5 shader oh reference shader okay
29:38 - load shader
29:41 - so
29:42 - my under my understanding by the way is
29:44 - there's multiple kinds of shaders so we
29:47 - see this dot frag whenever i say my
29:49 - understanding that's my caveat of like i
29:51 - don't really know this stuff but i
29:53 - learned it a little bit from eliza and
29:55 - alethia and i i wanted to say that i've
29:57 - been like exploring it more since then
29:58 - but this is literally like
30:01 - you know that stream ended i was doing
30:03 - stuff all weekend and i turned stuff on
30:05 - today um so there's a fragment shaders
30:09 - fragment shaders are a kind of shader
30:12 - well like if you think about that a
30:14 - shader is going to be applied to a piece
30:16 - of geometry like a flat plane in the
30:18 - simplest sense a fragment shader is an
30:20 - operation to do in parallel on all the
30:23 - pixels of that plane
30:26 - and a vertex shader allows you to
30:28 - manipulate the geometry of that plane
30:31 - so i want to just do a fragment shader
30:33 - can i only do a fragment shader in p5
30:36 - we'll find out now first of all the
30:37 - other thing i want to say is so let's
30:38 - say i want to do a fragment shader
30:40 - can i do
30:42 - create file
30:45 - shiftmen dot frag
30:47 - what are they called here
30:49 - a shader i guess i could just call it
30:51 - shader gradient i'll call it shiffman
30:53 - shiftman. oh it is look at this valid
30:56 - extensions
30:57 - dot frag
30:59 - yes p5 web editor thank you
31:04 - um
31:05 - okay
31:06 - so uh dot frag
31:09 - now the question is if i am now in
31:12 - sketch.js
31:13 - and i want to load a shader
31:17 - so let's say
31:19 - uh
31:23 - shh
31:24 - schiffer
31:26 - chaffer
31:27 - i'm trying to be clever my name i don't
31:29 - know what to call it i don't have any
31:30 - idea let's call it um
31:32 - beginner starter
31:34 - basic basic shader
31:39 - basic
31:40 - shader equals load
31:45 - loadshader
31:48 - shiffman.frag
31:51 - and i probably i assume
31:54 - i have to use webgl oh and it probably
31:56 - makes sense for me to also use preload
31:58 - although i'm sure there's a way that you
31:59 - could
32:00 - load the shader asynchronously
32:08 - so let's put it in preload
32:11 - you're all seeing what i'm doing
32:12 - right so oh why why why okay uh
32:17 - look at this the auto name
32:20 - for this particular sketch
32:23 - is longing scream i'm being told that
32:25 - there's a distracting dot in the middle
32:28 - of the screen i don't particularly see
32:30 - that
32:31 - but
32:32 - somebody let me know if that's something
32:34 - that i need to deal with okay let's just
32:36 - see if i get any error running this
32:40 - okay uh
32:43 - looks like
32:44 - load shader was expecting two arguments
32:47 - so it appears that maybe it requires
32:49 - both a vertex shader and a fragment
32:52 - shader did is that
32:53 - was that part of
33:00 - what we did here
33:02 - html js
33:06 - ah oh um
33:10 - um all right so i need to follow by the
33:12 - way i remember i'm getting like messages
33:14 - from everywhere floping or flowpine does
33:17 - amazing stuff with shaders on twitch
33:19 - also and i saw flo pine in the chat on
33:22 - saturday uh it's much more visible on a
33:25 - sorry that this oh i know you guys can't
33:26 - see this at all
33:28 - apologies apologies
33:30 - i know you all cannot see this um
33:33 - yes
33:34 - there is a vertex shader maybe here too
33:38 - so let's let's let's do this
33:40 - let's make a new file
33:43 - and call it
33:45 - hey
33:46 - um
33:49 - shiffman.vert
33:52 - and so now
33:54 - if
33:56 - uh
33:59 - and this is great i have i have elephant
34:02 - chat here giving me feeding me
34:04 - information oh why do i write
34:05 - shifting.netfin.virg
34:08 - okay
34:09 - um
34:11 - see if i can
34:13 - get this going here sorry everybody i'm
34:16 - i'm trying to figure this out now so if
34:18 - i go back to codepen
34:21 - there is a fragment oh this is the
34:24 - vertex shader
34:26 - so this i didn't notice this this is the
34:28 - vertex shader so this must be sort of
34:30 - like boilerplate vertex shader of like
34:34 - this is just
34:36 - a what what is position though
34:38 - is that like a built-in variable well
34:40 - let's just copy it in
34:42 - and is that somewhere
34:45 - um that i don't see but um let's go to
34:47 - here so let's go
34:47 - [Music]
34:49 - i can't finish the sentence
34:53 - can i autofor this i'm i'm sorry but
34:55 - you're all gonna have to bear with me as
34:56 - i manually
34:58 - write some in so this must be i'm
35:00 - guessing
35:02 - a basic simple vertex shader i'm trying
35:04 - to unpack what this means
35:07 - my understanding the vertex shader has
35:08 - to do with the geometry so this must
35:10 - just mean but what is position
35:14 - it
35:15 - chat is going
35:17 - um so there we go now let's see if i can
35:18 - run this
35:20 - all right no
35:22 - errors that's a good sign
35:24 - uh
35:26 - shader orange blue
35:30 - got it so i i maybe i display the shader
35:33 - in setup
35:36 - yeah you can you display the shader by
35:38 - calling shader i guess it's like mapping
35:40 - it onto so if i go here
35:43 - and do
35:45 - shader
35:47 - do myself
35:49 - in draw
35:51 - do i really need to do this and draw
35:53 - like well we're going to find out basic
35:55 - shader
35:57 - so the idea is uh and let me let me put
35:59 - a line break here
36:00 - it's not going to let me do it but i'll
36:02 - do it manually
36:05 - so the idea is i have two files a vertex
36:08 - shader which i am not going to explore
36:10 - probably today given that i'm going to
36:12 - do this for the next 20 minutes i should
36:14 - really just plan to do shaders the whole
36:15 - time maybe we should put off the auto
36:17 - encoders
36:18 - position is the current vertex built-in
36:21 - variable got it thank you
36:23 - so uh got it okay that makes sense but
36:26 - again one of the things that i'm having
36:28 - a lot of trouble with is my whole world
36:31 - the foundation of my entire world is
36:33 - basically built on top of
36:36 - two nested for loops
36:38 - and with a fragment shader i'm
36:40 - essentially writing the code
36:42 - for one
36:44 - pixel
36:45 - and instead of iterating through all the
36:47 - pixels
36:48 - that code essentially happens like
36:51 - all at once for all the pixels in
36:52 - parallel
36:54 - you know
36:55 - i'm not sure if the metaphor is exactly
36:57 - right there um
36:59 - but there are a lot of coding train
37:00 - topics that could be remade in shaders
37:02 - yeah
37:03 - so
37:04 - um
37:05 - [Music]
37:07 - yeah and what is the fourth dimension in
37:09 - this is also another interesting
37:10 - question if position
37:12 - if this is a 4d vector if position is in
37:16 - xyz what is one is that like the normal
37:19 - or something
37:22 - all right i'll wait for the chat or
37:23 - somebody to tell me
37:25 - ah triangles triangles triangles that
37:27 - make a plane
37:29 - everything is triangle so i'm not really
37:31 - making a plane it's two triangles which
37:33 - make a plane maybe
37:34 - okay so now i guess
37:38 - well let's just see i want to start over
37:40 - but i'm going to let's just copy paste
37:43 - this
37:45 - into here
37:47 - and then if this works then i'll start
37:49 - over
37:51 - okay yikes an error occurred compiling
37:53 - the vertex shader
37:55 - position undeclared identifier
38:01 - this will definitely fix it
38:06 - no precision
38:08 - the fragment shader okay hold on
38:13 - oh i forgot i missed part of the
38:16 - i missed part of the shader it looks
38:18 - like at the top oh my god i missed a lot
38:20 - of the shader
38:23 - got to go up to here
38:26 - uh go to fragment
38:29 - and here
38:36 - uh uv ray definition all right let's see
38:39 - all right what what
38:42 - what do i have missing here
38:44 - okay let's see here
38:46 - was position
38:49 - i know this is tiny font
38:52 - no find me position
38:55 - search i don't know how to use
38:59 - there's another position right there how
39:01 - do i use codepen search
39:04 - uh is it in the javascript somewhere
39:08 - that wouldn't really make any sense
39:13 - 40 is converted to 3d by dividing the
39:15 - xyz component by the last component so
39:17 - that's like a normalization
39:19 - i have to pass position from p5 to glsl
39:24 - so that must be what's happening here
39:30 - let's look at this basic example
39:39 - is that happening in here set uniform no
39:42 - set uniform
39:44 - doesn't appear to be happening here
39:49 - let's say what now okay ooh look at this
39:51 - look at this fancy shader
39:55 - um i'm looking in the chat i don't see
39:57 - anything yet all right so i have to
39:59 - figure this out myself
40:01 - uh back to what i had
40:04 - position is an undeclared identifier um
40:08 - so p5 a simple shader example
40:13 - basic shader examples this is different
40:17 - okay
40:18 - assets basic vert
40:21 - so where with these examples are they in
40:24 - the web editor let's see
40:26 - oh here let's look at this
40:28 - haha
40:30 - whoops
40:34 - louise was in the chat who worked on
40:36 - this project of course with casey at itp
40:39 - i remember this project
40:40 - uh setting up shaders in p5
40:43 - shader.vert shader.frag okay
40:47 - uh
40:49 - no strokes or shaders borderless
40:52 - let me make this bigger so you all can
40:53 - see it
41:02 - okay
41:04 - here's the example in the editor
41:08 - so this works
41:10 - we know shaders work
41:12 - and what is in the basic vertex shader
41:15 - oh
41:20 - do i need this attribute
41:24 - so i need to have an attribute
41:27 - position
41:29 - and then
41:32 - probably um
41:35 - somewhere in this code
41:39 - is that attribute being set
41:46 - well let's see
41:52 - okay
41:54 - uv redefinition well maybe i made a
41:57 - mistake here
42:00 - uv
42:03 - i might have copy pasted this in a weird
42:04 - way
42:06 - so first of all i would actually really
42:08 - like to just simplify this for a second
42:10 - i can always come back to it
42:14 - so much for me saying i was going to
42:15 - just get this running
42:22 - all right let's see here
42:25 - uv
42:29 - why is that being redefined right let's
42:31 - take a look at this example and let's
42:33 - look at the basic fragment shader
42:38 - yes so the i'm being told through my
42:41 - side channel here of information is that
42:45 - um
42:47 - um in 3js
42:50 - auto um it is get the position is given
42:53 - by 3js and i'm using p5 instead
42:58 - yeah so look at this
43:00 - um
43:03 - i wonder if i'm just not allowed to use
43:05 - uv as my variable name because in this
43:07 - example it's not using uv
43:10 - so if i were to change this to in my
43:12 - fragment shader
43:16 - uh st
43:19 - and i think i would like to go back to
43:21 - oh
43:22 - hello
43:23 - [Music]
43:25 - hello i had multiple lines of code
43:27 - multiple times always something much
43:29 - simpler i actually would just like to
43:30 - use this
43:32 - i'm not going to resize the window right
43:34 - now
43:34 - so let's start with this as like a
43:36 - simpler
43:37 - beginning
43:39 - which i think i might be equipped to
43:41 - explain
43:42 - okay
43:44 - all right no errors
43:48 - hey welcome to coding with me dan
43:51 - shiffman where i spent 45 minutes just
43:54 - getting something to run that renders
43:57 - nothing with no errors cheers
44:06 - okay
44:09 - deep breath everybody deep breath what
44:11 - are we doing
44:12 - the idea of a fragment shader the way
44:15 - that i understand it and hopefully
44:17 - people in the chat will be correcting me
44:20 - um is that
44:24 - i want to look at all of these
44:26 - coordinates these x y coordinates well
44:28 - they can't in this canvas
44:31 - all at once
44:33 - so this little main function is pulling
44:36 - up
44:36 - the uv coordinate which is the
44:40 - x y of the fragment shader divided by
44:43 - the resolution because u v ah the uv has
44:45 - to be normalized between zero and one so
44:47 - x y i i'm assuming is like the literal
44:49 - pixel
44:50 - 100 comma 100 the resolution is 400
44:53 - comma 400. so uv is
44:55 - 0.25.25 i think that must be what it is
44:58 - so the idea and then um
45:01 - i i have that uv and i'm just going to
45:04 - go over to this one because i think
45:07 - yeah
45:10 - i can
45:11 - just
45:13 - set up well i actually don't even need
45:15 - this i'm going to take out this line of
45:16 - code for a second so this main function
45:19 - and um
45:22 - i think oh yeah the unif the resolution
45:24 - is coming in through uniform so take
45:26 - that out for a second okay we're gonna
45:27 - go slower
45:28 - slower
45:30 - i'm going to comment some things out
45:32 - though like pretend it bothers me i got
45:34 - to take them out
45:36 - all right
45:39 - what i'm going to do here with the most
45:41 - basic
45:42 - simple
45:43 - simple list shader i possibly could is
45:46 - just set a hard-coded color
45:49 - gl frag color equals vect4 so a color
45:55 - is a four-dimensional vector that makes
45:57 - it sound very fancy but it just means
45:59 - there's four numbers a red a green a
46:01 - blue and an alpha
46:09 - and
46:17 - i should put the outer refresh on
46:20 - all right so let's see here
46:22 - load shader
46:26 - let's make this black just so
46:28 - okay so i think i'm still missing
46:32 - like in my my i think i'm still missing
46:35 - something about setting the position
46:38 - because in theory now
46:41 - this should give me a nice
46:45 - um pink color red and blue across all
46:49 - the pixels this is like the code for one
46:51 - pixel but it's applied in parallel to
46:53 - all of them
46:54 - um so i'm just sorry this chat i'm
46:57 - looking over here this will run for
46:59 - every vertex of the geometry and that's
47:00 - what position means yes
47:03 - that's what the vertex shader is for can
47:04 - manipulate the vertices i'm reading this
47:06 - from simon
47:07 - so
47:08 - um
47:08 - so i need to figure out how do i set
47:12 - the position attribute
47:15 - see this is good this is my process and
47:18 - then someday i'll make some tutorials
47:19 - about shadows will appear that i know
47:21 - what i'm talking about
47:22 - you can all refer back to this video to
47:24 - know that i really don't
47:26 - um
47:28 - so how do i
47:31 - get this attribute position
47:34 - so it's in this example
47:36 - so let me look
47:41 - position 4 yeah
47:43 - x y so somehow gl position equals yeah
47:49 - somehow
47:53 - this a position attribute
47:56 - is set somewhere index.html
48:00 - no
48:01 - sketch.js
48:03 - set uniform
48:05 - i don't see it anywhere
48:09 - where is it
48:13 - do i need oh i need to draw some
48:15 - geometry
48:17 - otherwise there's nothing to apply it to
48:19 - maybe that's the issue
48:21 - i mean i still think i have the other
48:23 - issue
48:24 - because the shader is being applied to
48:26 - the geometry that comes next
48:35 - hmm okay
48:38 - what else am i missing i could probably
48:40 - just read the tutorial and it will
48:42 - explain it it's built in
48:45 - oh
48:46 - am i so what am i missing here
48:48 - luis is saying it's built in
48:51 - sorry louise is saying it's built in
48:55 - um
48:59 - so shiffman frag i feel like what's
49:02 - wrong with this
49:05 - shiftman vert
49:08 - so what am i missing
49:10 - index
49:11 - i don't need the sound library
49:14 - let's just play it again sam
49:19 - i will need to draw something that to
49:21 - you cannot change its name and the
49:22 - attribute is read
49:27 - so it's so i'm i'm missing a very
49:30 - important crucial piece here which is
49:33 - that
49:33 - this is built in and the name for
49:36 - attributes have to start there we go
49:39 - i see something amazing okay wait now
49:44 - interestingly
49:45 - this rectangle
49:48 - is drawn
49:49 - so
49:50 - i need to think about i think there's
49:52 - something to do here with the
49:53 - orientation
49:56 - so in other words what just happened
50:00 - i
50:01 - just drew
50:06 - um
50:08 - i created a shader
50:13 - this is my diagram of a shader makes no
50:16 - sense i created a shader
50:19 - and then i drew it a rectangle
50:22 - but the rectangle
50:24 - i drew it at 0 0
50:26 - oh because uh of course of course so i'm
50:30 - in opengl
50:31 - of webgl mode in p5 which means that 0 0
50:36 - is in the center and y points up
50:39 - so i suppose i don't know what the
50:40 - proper way to do this i could start to
50:42 - adjust that position
50:45 - in
50:46 - itself in the shader or i could just
50:48 - adjust it
50:50 - in
50:53 - in p5 let's do
50:56 - um let me go back to here let's do the
50:59 - following
51:01 - um
51:04 - i'm going to say rect mode center
51:09 - and then
51:11 - oh but is the shader actually
51:13 - manipulating the position of this
51:15 - rectangle let's take this out for a
51:16 - second
51:23 - right that gives me that rectangle if i
51:26 - take out wrecked mode center
51:28 - oh and it's oh the shader is really
51:31 - manipulating the view of the scene
51:34 - uh i by the way tasercake just made the
51:36 - nicest comment anybody has a compliment
51:39 - anybody has ever made of me which says
51:41 - nice non-reflective whiteboard although
51:43 - maybe that was made in jest with irony
51:45 - because i've been trying really really
51:47 - hard to get the whiteboard to look right
51:49 - without
51:50 - reflections okay so
51:53 - um so again i think the proper thing for
51:56 - me to do here
51:59 - is to
52:02 - manipulate the geometry with the vertex
52:05 - shader
52:06 - and if i go to my cheat sheet here i'm
52:09 - guessing that's what this is doing
52:12 - taking the position
52:15 - multiplying it by two subtracting one
52:18 - which basically
52:20 - uh makes it
52:22 - i don't know what the multiplying by two
52:24 - does but let's
52:26 - let's let's try these bit by bit
52:30 - so if um if i go back to my shader
52:36 - and i say um
52:40 - vec4 position 4 equals
52:43 - this
52:47 - and then
52:48 - we say position 4
52:52 - minus
52:53 - minus equals 1. can i do that
53:01 - uh
53:04 - minus equals
53:06 - zero comma uh
53:08 - one
53:10 - oh with four
53:12 - one zero zero zero zero
53:18 - yeah okay
53:19 - so i slid it over
53:23 - so let's do plus equals
53:25 - negative one
53:27 - and then y should go plus one
53:30 - oh oh because it's going the wrong way
53:32 - minus one
53:35 - yeah it's down there oh that's why i
53:36 - have to multiply it by two
53:43 - oh it doesn't like that
53:45 - position four okay
53:52 - oh 2.0 i
53:56 - by the way the best thing about shaders
53:58 - ever is this this stop this dots
54:00 - [Music]
54:02 - i can't remember to put the dot with the
54:04 - shaders either
54:08 - um okay hold on
54:11 - so what happens if i just multiply it by
54:13 - 2
54:17 - and then
54:21 - minus equals
54:29 - there we go ah
54:32 - wait how did multiplying it by two oh
54:34 - yeah
54:41 - all right i'm still confused how this
54:43 - works
54:44 - but it's clearly it's correct now
54:47 - uh the screen coordinates range from
54:49 - negative one to one aha
54:52 - thank you juha he 64.
54:55 - i got it now so
54:58 - um if i come back over here
55:01 - this makes total sense now
55:09 - shaky white board okay
55:12 - this is
55:14 - the world of shaders negative one to one
55:17 - negative one oh no no it would be
55:19 - negative one to positive one
55:22 - right this is along the x-axis
55:24 - this is along the y-axis i don't know
55:26 - why i drew that in kind of a weird way
55:28 - so what i had was
55:31 - a
55:32 - rectangle
55:35 - that is here
55:37 - because i drew it at
55:38 - 0 0 i guess kind of
55:41 - up
55:42 - and to the right
55:44 - so
55:46 - if i subtract one
55:49 - ah subtracting one puts it to everything
55:52 - puts it in the center
55:58 - because maybe its width is like just one
56:02 - and then multiplying it by two
56:04 - expands it out
56:06 - so that's taking the sort of like
56:09 - rectangle from processing
56:12 - some geometry
56:13 - and applying this shader for the vertex
56:16 - shader which manipulates the geometry so
56:19 - that it's centered and larger and then
56:21 - the fragment shader
56:23 - does this like
56:24 - of all the pixels all at once this is
56:26 - what eliza i can't remember i have to
56:28 - find this video eliza explained to me
56:30 - that
56:30 - a shader the way that it operates in
56:33 - parallel is like i could draw
56:35 - like a circle like this
56:38 - one point at a time
56:40 - that would be a for loop
56:42 - or can you see that
56:45 - yes you can or
56:47 - if i had some kind of magic stamp i
56:49 - could just
56:51 - stamp all of those points all at once
56:53 - that's like what a shader does
56:57 - okay
56:59 - now
57:00 - um let me come back over here and read
57:01 - the chat
57:02 - um it's remapping zero to one to
57:04 - negative one to one yes
57:06 - um okay great
57:10 - um
57:10 - uh oh and nicole yes nicole vela is here
57:15 - and says i i remember you from the
57:18 - curiously minded stream who said it's
57:20 - like a sheet of transparency paper so i
57:21 - haven't gotten to that part yet i'm
57:23 - gonna have to come back i'm going to be
57:25 - wrapping up the shaders portion of the
57:27 - stream momentarily
57:28 - uh
57:31 - so but i'm this is i'm just dipping my
57:34 - toe in here well i did
57:36 - i put my foot full foot in on saturday
57:38 - now i'm coming back
57:40 - because i had other people helping me
57:41 - with my foot that sounds very weird
57:44 - go back and erase that but now i'm
57:46 - dipping in my toe
57:48 - um by myself
57:50 - so okay
57:51 - so now the thing is
57:56 - this fragment shader
57:58 - is just setting the color of every
58:02 - pixel
58:03 - now what if i wanted to do a random
58:06 - number random value
58:15 - like i think i could just get some like
58:19 - a random
58:21 - beautiful i don't know whoa what is this
58:24 - this could be a random
58:28 - pseudo okay i should probably
58:31 - you know
58:33 - do this a little bit more thoughtfully
58:34 - welcome to copying pasting code with
58:36 - daniel shiffman
58:38 - um
58:39 - if i were to grab this
58:41 - random function
58:43 - i saw this
58:45 - dot product sine function i don't know
58:47 - what this function frac does i'm gonna
58:49 - have to look that up
58:50 - can i get
58:51 - a
58:52 - this is a vec2
58:54 - or i give it a vector
58:55 - i have to give it a vector co that's
58:58 - weird
58:59 - why would i do that
59:04 - okay well i just
59:06 - oh because i could give it its uv
59:09 - i don't want to have to give it its uv i
59:10 - just want random
59:15 - oh but i
59:16 - it's a i would have to do a four ah
59:19 - oh my brain does not compute shaders
59:24 - [Laughter]
59:26 - yes that is the way to do random in
59:28 - shaders
59:29 - it's just a super annoying okay i guess
59:31 - i was trying to avoid getting the uv
59:33 - but we need the uv and what do i mean by
59:36 - the uv
59:37 - basically in my little metaphor here of
59:40 - i have this stamp
59:44 - i want each one of the like little
59:48 - spots on the stamp that's
59:50 - rendering this all at once to know where
59:51 - it is where it is in the stamp so right
59:54 - now the little little
59:57 - pink brushes that are in the stance
59:59 - i never got to build a whole physical
60:01 - device here i'm trying to also avoid
60:03 - using the word gun because i think it's
60:04 - like a paint gun or something i'm like
60:06 - um but the stamp
60:10 - um all the little spots they need to
60:12 - know where they are so that they can
60:13 - render different colors at different
60:15 - spots right now they don't know where
60:16 - they are they just all know render pink
60:19 - so the way that i get their color at
60:22 - every spot is by making a vec2 called
60:26 - uv and if i take can i get the position
60:30 - here
60:31 - a position
60:33 - dot xy
60:34 - divided by
60:36 - oh and i got to get the the um
60:38 - so let's see how they do it in theirs
60:41 - i
60:42 - uh you you resolution oh gl frag
60:44 - coordinate oh yeah it's not from the uh
60:46 - it's not the position it's the okay so
60:48 - this is built in gl frag
60:51 - coordinate so in theory i might be able
60:53 - to just use that right because you know
60:56 - i could make up something
60:59 - like what happens if i do
61:01 - just this
61:06 - is that not right uv.x
61:08 - yeah no that's right
61:10 - um
61:11 - is it like too big
61:15 - oh i probably spelled that wrong
61:18 - yes i underscore underscore
61:22 - ah okay
61:25 - so these numbers are probably just take
61:27 - this out for a second
61:30 - right it's all right so i'm getting the
61:32 - x i could do something like you know
61:34 - divide it by 400. oh
61:38 - there see
61:40 - i know what's going on
61:42 - is it 200 though
61:44 - like the full range
61:46 - no oh 800
61:50 - yeah you know i think that pixels even
61:52 - though this is like
61:53 - 400 by 400 i think there's something
61:55 - going on with my high definition display
61:58 - what i'm trying to show you
62:00 - is that
62:02 - the um
62:03 - and i think this would be well it's fine
62:06 - um
62:07 - let me just do it this way so it looks
62:09 - more clear so by the way in in shaders
62:12 - you can make a
62:14 - four dimensional vector or any vector
62:17 - with one value without having to pass it
62:19 - multiple times so here i'm basically
62:21 - just taking the x position of every
62:25 - x position
62:27 - of every one of these pixels dividing it
62:30 - by the width so it's normalized between
62:32 - 0 and 1. but i don't want to have 800
62:34 - hard-coded in here
62:36 - so i should be able to get
62:39 - something from the p5 sketch and i
62:41 - apologize for just thank you to
62:43 - louise and casey who i believe wrote
62:45 - this example hopefully i'm right about
62:47 - this that i'm repurposing it
62:49 - what i need to do is get the resolution
62:52 - information from p5 and
62:55 - properties values variables that come
62:58 - from your sort of main code at least are
63:00 - the p5 sketch so i want to make this
63:02 - interactive with the mouse that's kind
63:03 - of a something i could do
63:06 - those come in
63:08 - via something called a uniform so if i
63:11 - create this uniform
63:13 - called u resolution whoops
63:17 - and i put it in
63:19 - this random i can come i put it in here
63:22 - and then in p5
63:25 - in the p5 sketch itself you can call
63:29 - set uniform
63:33 - so would i do that does that happen in
63:35 - draw happens in draw
63:39 - so in draw i'm going to do this with
63:41 - mouse x
63:42 - before i go
63:44 - basic shader set uniform and i guess
63:48 - because it's a vector i give it an array
63:50 - so width and height
63:53 - so this is me and um can i if i move
63:55 - this over you can still basically see
63:57 - the code but i have more room
64:00 - okay so the idea here is i'm saying hey
64:02 - you shader you've got a variably thingy
64:05 - like thing in you called u resolution
64:08 - set it to a vector with width and height
64:11 - that way
64:13 - if i go back to here
64:17 - i can say the uv is the
64:20 - frag is the xy coordinate divided by the
64:24 - u resolution
64:26 - x y
64:28 - is that right
64:31 - do i say x y there or just u resolution
64:36 - yeah this says dot x y so that makes
64:38 - sense why why do i need that dot x y
64:41 - like i sort of understood this to be
64:43 - like an object that has an x y in it but
64:45 - u resolution is the vector itself but i
64:48 - guess not
64:49 - i guess getting both out as one as one
64:52 - is the x y well anyway let's see if this
64:54 - works
64:57 - okay that worked now once again
64:59 - i've got this weird issue
65:02 - where i think the resolution i'm getting
65:04 - is 400
65:06 - but because i'm on a high definition a
65:09 - retina display basically like the amount
65:11 - of pixels of the rectangle is actually
65:13 - double so this is a little wonky um
65:16 - thing i think if i just did like
65:18 - this here
65:21 - i believe that's correct i mean i can't
65:23 - be certain but i believe the full white
65:25 - is here and the gray is in the middle i
65:27 - mean i kind of liked how it looked but
65:28 - let's just go back now if i were to
65:30 - change this to
65:32 - the color being set not by the x but by
65:35 - the y
65:37 - then we have it going from bottom to top
65:40 - you could leave it without the x y it's
65:42 - probably just for explicitness so let's
65:44 - see if that's true
65:47 - and what about the um this
65:51 - so not this though
65:54 - so i guess this is just kind of like for
65:55 - clarity uh it looks very like parallel
65:58 - okay
66:00 - x y x oh
66:02 - paulo in the chat
66:05 - amazing so dot x y gives you a vector
66:12 - so
66:13 - the frac hornet could potentially have
66:15 - like
66:16 - you know i could make a vec4
66:18 - with these four values or something
66:21 - so it's making a vect two
66:23 - out of what is just a vector so i i need
66:27 - a vector out of the frag coordinate so
66:29 - so yeah so this is good i can see that
66:31 - i'm working with evec2 because i say dot
66:33 - x y
66:41 - i should just admit that the auto
66:43 - let's put up a little poll
66:46 - not that i ever follow the pole but um
66:49 - after because i got to take a break
66:58 - i'm putting up a little poll
67:01 - should be in the youtube chat now it
67:03 - should say after the i'm going to take
67:05 - like a five minute break
67:07 - uh might be a little bit longer because
67:08 - i'm going to do this i'm going to
67:09 - continue the um beautiful geometry
67:12 - course on brilliant um and i i'm after i
67:16 - come back i'm just sort of seeing the
67:17 - pull if i should um
67:20 - continue with shaders or
67:22 - sort of getting taking the temperature
67:23 - of the audience here all right
67:25 - let me keep going here
67:27 - by the way i should really work on
67:29 - learning with shaders the processing too
67:31 - all right so i'm getting somewhere
67:34 - now i believe there's a distance
67:36 - function if i'm right
67:38 - so that would just be a float
67:41 - can i get the distance between
67:43 - [Music]
67:44 - can i make a vec 2 that's like center
67:49 - would it be 0 0
67:52 - and then get a distance
67:55 - or is it length between center and uv
68:01 - and then have the frag color be that
68:05 - distance
68:06 - yeah oh okay
68:08 - 0 0 is the bottom oh because
68:11 - is this my 800
68:14 - no
68:16 - is it 0.5.5 is that how i've done things
68:22 - and then if i said
68:24 - uh
68:26 - d you know the brightness
68:32 - is one minus the distance
68:35 - oh
68:40 - [Music]
68:41 - there we go okay
68:43 - so
68:43 - now what i'm doing
68:45 - is
68:46 - there's a dis is it dist or distance
68:48 - there's a distance function so i made
68:49 - the center a point considering a point
68:51 - in the center
68:53 - and
68:54 - i
68:55 - am
68:56 - sorry i'm thinking here i'm considering
68:58 - a point in the center
69:00 - and then i'm looking at the distance
69:02 - between every pixel and that point
69:05 - and
69:06 - uh
69:07 - if it's closer and then take it saying
69:09 - one minus that so the distance mass
69:10 - between zero and one
69:12 - uh one minus that will be brightest
69:14 - towards the center so my goal here with
69:16 - all that i have now learned
69:18 - and the um the poll looks pretty
69:22 - there's 117 votes
69:25 - strong winning for continuing with
69:26 - shaders so
69:27 - um that's probably what i'll do
69:29 - i'll have to just take out auto coders
69:31 - from the title um
69:33 - if i go back so i'm going to try to just
69:35 - get the mouse working i'm going to take
69:36 - a like a five to ten minute break and
69:38 - then come back and do a bit more shaders
69:40 - just so everybody's clear on the plan
69:43 - um
69:44 - i what am i doing here
69:47 - so i i think i can do this without
69:49 - referring to the example code now
69:52 - so what i would like to do
69:54 - is
69:56 - basic shader
69:58 - set uniform
70:01 - u mouse
70:04 - and call this
70:06 - say
70:09 - mouse x mouse y
70:11 - so this is me taking the mouse
70:14 - coordinate from
70:18 - p5 and sending it to a variable that i'm
70:20 - going to call you mouse in the shader is
70:23 - it proper to say variable if we're
70:25 - talking about a uniform can i call it a
70:27 - variable
70:31 - um so now if i go into the fragment
70:35 - shader
70:37 - and i add another uniform
70:41 - back to
70:42 - you mouse
70:47 - um and if i take
70:53 - can i just do this can i do
70:55 - you you underscore mouse dot x y that
70:58 - this should be the same thing right
71:03 - so if i take the mouse
71:05 - and divide it by the resolution
71:09 - oh whoa
71:10 - okay so my
71:13 - uh things are reversed here
71:16 - so
71:17 - and this is always the interesting
71:18 - question for me like where should i
71:19 - manipulate this
71:21 - like should i manipulate it in
71:24 - so the x oh weird
71:27 - and can i console log stuff in the
71:29 - shader
71:30 - is there a way for me to do like print
71:33 - that's not going to work right
71:37 - i mean how's it going to possibly do
71:38 - that
71:44 - use program parameter one i don't know
71:46 - okay um
71:49 - so what am i doing here
71:53 - so this makes sense to me that this
71:54 - would be reversed and the scale is off
71:58 - what if i were to just say
72:03 - see this
72:05 - i think i should do this
72:07 - pixel density one
72:10 - let's take out the variable of the high
72:13 - density display
72:18 - there we go
72:20 - so now we can see it's just the y okay
72:22 - so the high density display was hurting
72:24 - my brain but now we can just see the y
72:26 - is reversed
72:28 - so
72:29 - i guess i could do like i could do
72:31 - height minus y
72:34 - and now i've got it
72:37 - right as i move the question i think is
72:39 - interesting is like what is the what is
72:42 - the proper way to handle this should i
72:44 - be flipping it in p5 or should i be
72:47 - flipping it in the shader
72:50 - look how fast that is
72:52 - we should compare this to like
72:55 - like here's the thing
72:57 - no way i could do this for loop with
72:59 - like 800 by 800 pixels
73:03 - like okay oh we gotta we've got to
73:04 - demonstrate this
73:07 - so
73:08 - very very quickly let's make and then
73:10 - i'm gonna take i swear i'm gonna take a
73:12 - break
73:14 - um
73:16 - uh so i don't know why i deleted that um
73:18 - i'm gonna just say um
73:21 - load pixels
73:24 - so i'm doing this uh without shaders now
73:27 - here is the comparison
73:29 - for loop
73:31 - way
73:35 - uh this is my whole world
73:38 - this oh i'm so happy and comfortable oh
73:41 - it all makes sense to me now i can can
73:43 - write the code in the order that i want
73:45 - it to happen and it will happen
73:47 - and then i'm gonna then i'm gonna have
73:49 - an index which is x plus
73:52 - y times width then i'm gonna say pixels
73:54 - index
73:56 - uh oh then i need a distance
73:58 - a distance which is the distance between
74:00 - this x and y and the center which is
74:03 - width divided by no no yeah no the mouse
74:05 - mouse x
74:07 - mouse y
74:09 - and i can say the um
74:12 - then i can basically map it
74:18 - map the distance which goes between zero
74:21 - and i'm just gonna
74:23 - use the side as the i mean this is not
74:25 - exactly right
74:26 - 255 down to zero
74:28 - and then we're going to say oh float
74:30 - back and forth this hard okay and then
74:33 - i'm going to say um
74:35 - pixels index index
74:38 - plus zero
74:39 - equals bright so i have numerous videos
74:43 - going through how the pixel away works
74:45 - works in processing in p5
74:48 - this should be 255 for no alpha
74:50 - um once we're seeing again a like a
74:53 - vec4 right but i'm setting each of the
74:56 - pixels individually oh and that index
74:58 - has to be multiplied by four
75:00 - um
75:01 - you know for um
75:03 - let me just look pixel array in p5
75:07 - um yeah so this video from 2016
75:10 - is a video where i go through how the
75:12 - pixel array works in p5.js probably
75:14 - doing something very similar to this
75:17 - um
75:18 - and i believe
75:20 - if i were to run this
75:22 - uh okay pixel density
75:29 - wait a one
75:30 - again i've got the sort of pixel density
75:32 - okay look even at 400 by 400 look how
75:36 - choppy that is
75:39 - and i should do the maximum distance it
75:41 - would be more
75:44 - probably um the max distance is
75:51 - i don't know if max is still in the chat
75:53 - but this this this this variable max
75:55 - distance max d is dedicated to you max
75:58 - is the distance between zero zero
76:02 - and width comma height let's just say
76:03 - that it's not exactly accurate
76:06 - but let's do the
76:12 - why did that not work
76:19 - oh it's dissed in processing
76:23 - oh you know what i actually want it to
76:24 - be
76:25 - this is so dumb but i want it to look
76:27 - like the
76:28 - the um
76:30 - the sketch so i wonder if i just make it
76:32 - like
76:34 - width times width if that's going to
76:36 - look more like
76:37 - no oh because
76:40 - do i not have the
76:42 - i'm so confused
76:46 - if it's zero
76:48 - it should be really bright
76:51 - x y
76:54 - mouse x mouse y what am i what what's
76:57 - going on here
76:59 - i wanna see it
77:11 - now i'm getting stuck on like a silly
77:13 - thing oh
77:14 - oh this is
77:15 - this looks the same
77:18 - i think i was right square root
77:21 - all right i mean i can just do distance
77:23 - between zero zero
77:25 - i mean this would be the correct this is
77:27 - actually the no no no because it could
77:28 - be in the corner
77:31 - sorry everybody for this like silly
77:33 - digression
77:36 - programming is hard okay
77:43 - so look at this i'm trying to do the
77:45 - same thing
77:46 - with an 800 by 800 canvas
77:49 - without a shader
77:51 - and i lost the chat because i'm looking
77:53 - at this um
77:56 - it should be just with everybody's
77:57 - telling me fine fine fine that would be
77:59 - the same
78:03 - okay
78:03 - it's so quiet all of a sudden
78:06 - okay yes this looks like look look how
78:08 - impossibly
78:10 - slow this is
78:14 - now i'm going to hit stop
78:19 - oh that is the most beautiful thing
78:23 - wow okay
78:24 - never before have i really like has my
78:27 - mind really settled on the wonderful
78:29 - power of shaders because i've always
78:32 - kind of basically said
78:34 - uh in my head or to people
78:36 - if you want to work with pixels in the
78:39 - browser in canvas it's just really
78:42 - really slow to iterate through all the
78:43 - pixels can't really do it effectively
78:46 - but this
78:47 - is a way of doing it now there's a lot
78:49 - more
78:50 - mental overhead here of understanding
78:52 - all of these bits and pieces and how the
78:54 - math works like i'm making a lot of
78:55 - assumptions of you the viewer right now
78:57 - that this idea of manipulating vectors
79:00 - is totally
79:02 - like
79:03 - you know automatic intuitive for you
79:06 - which is no way that it would be
79:08 - this is a nice alignment with my nature
79:10 - of code materials where we look at i
79:13 - look at through those tutorials 2d
79:14 - vectors and how to do vector math like
79:16 - add subtract normalize distance all that
79:18 - stuff but what's interesting about
79:21 - shaders here is in p5 or in processing
79:24 - when working with a p vector or p5
79:26 - vector object you can't use the plus
79:28 - minus operators with them it doesn't
79:30 - know how to do that with vectors
79:32 - but here in a shader you actually can't
79:34 - so i can multiply a vector by two
79:36 - scaling it or i can subtract the number
79:39 - the value of one from each one of its
79:41 - components
79:42 - um
79:43 - okay
79:44 - so everyone the green screen is not
79:46 - keyed at the edge where
79:51 - where is the green screen not key joe
79:53 - just down over here
79:54 - oh over here it's the desk
79:57 - there's even a little dongle here if i
79:59 - wanted to plug it into something and a
80:00 - train whistle see there's a desk here
80:03 - there's a mug here and i could lower it
80:05 - a little bit
80:07 - does that make everybody feel better i
80:09 - don't like you seeing this
80:11 - secret sound board
80:14 - all right so um the voting is clear here
80:18 - um x nick is giving me an idea multiply
80:21 - the distance by sign angle taking the
80:23 - end so i'm i'm going to do more
80:25 - work i'm going to have some fun with
80:26 - this particular shader
80:29 - um oh no i closed that
80:31 - um and i wonder if i could even um
80:37 - i'm sorry
80:38 - don't talk to me
80:39 - um all right so hold on where am i going
80:43 - all right so i gotta take a short break
80:45 - don't go anywhere though i'm coming back
80:47 - with a lot more about shaders but before
80:50 - i go
80:51 - um i just want to take a minute to thank
80:54 - today's sponsor oh you know where it's
80:56 - not keyed
80:58 - up there what is that
81:00 - oh it's a light there's a light here
81:04 - so i don't know why i guess i could turn
81:06 - it slightly there that's what you're all
81:07 - talking about
81:08 - the right edge yes okay
81:11 - got it
81:16 - everybody knows how how smooth i am at
81:18 - these like sponsored segments i'm so
81:20 - good at them i'm never gonna get fired
81:22 - um i'm here today to thank today's
81:25 - sponsor uh brilliant
81:27 - uh do you like learning do you like
81:29 - interactivity
81:31 - brilliant is uh the place for you
81:34 - all the kinds of topics programming
81:36 - algorithms geometry graphics fractals
81:39 - neural networks science physics
81:42 - all of this stuff is just everywhere on
81:46 - brilliant through a series of amazing
81:47 - courses all with interactivity so it's a
81:49 - little bit small here but this is one of
81:51 - my favorite courses called algorithm
81:53 - fundamentals where you can sort of learn
81:55 - about this like you can see here this is
81:57 - a lesson about a fruit classifying
81:58 - algorithm
81:59 - and you're manipulating sort of code
82:01 - logic pseudo code by through an exercise
82:04 - by moving these blocks around kind of
82:05 - reminiscent of scratch or some of these
82:07 - other block-based programming languages
82:09 - um this is a wonderful um they also have
82:12 - an entire python programming course um
82:16 - one of these days when i have a totally
82:17 - like like a week free nothing else to do
82:20 - i cannot wait to go through this entire
82:25 - python programming course
82:28 - i am going to while that is playing open
82:31 - up the brilliant website on my
82:34 - laptop here
82:36 - and come back over to show you it myself
82:38 - so you can see there are um daily
82:40 - challenges um if i just clicked on uh
82:43 - courses i think scanning through
82:46 - um you can see the you know the huge
82:48 - variety of stuff i mean it's everything
82:49 - that i love
82:51 - um and honestly like when i can get back
82:53 - to doing more coding challenges there's
82:54 - so many excellent ideas of things that i
82:56 - could try to do here and in fact what i
82:58 - have been doing is taking you know
83:01 - obviously like when you're working
83:02 - through these problems there's
83:04 - and we can just go to it was i think
83:07 - beautiful geometry is the one that i'm
83:08 - on so i want to continue this course
83:11 - um i already did this one
83:14 - um okay i did these already i did this
83:16 - one i did this one i did this one okay
83:19 - here we are i have not done this one
83:21 - so
83:23 - um
83:24 - there's lots of ways to solve these
83:26 - problems i have a white board i have my
83:28 - brain
83:29 - i have my audience on youtube to help me
83:31 - understand them
83:33 - but one of the things that i really like
83:34 - to do is turn these problems into a
83:37 - p5.js sketch as a way of solving it now
83:40 - um
83:41 - so interestingly enough um i think
83:44 - there's going to be something just just
83:45 - scanning at this i think there's going
83:46 - to be something pretty different about
83:48 - this problem than some of the previous
83:50 - ones like in one of my previous uh live
83:52 - streams i went through this one to
83:54 - arrive at the answer four-fifths
83:56 - uh in terms of the ratio of
84:00 - um
84:01 - orange to orange to the total area of
84:03 - the circle
84:04 - but here i think just just like off the
84:06 - top of my head there's something pretty
84:07 - i mean i don't maybe i don't want to say
84:09 - too much what i'm gonna do is put up a
84:11 - poll
84:12 - and give you all of these choices
84:15 - so let me put up a poll
84:18 - um
84:20 - oh i got to end this poll first
84:23 - so i'm putting up a poll
84:26 - come on youtube
84:30 - um
84:32 - so uh infinite
84:36 - this is like phone a friend here we have
84:39 - 7 8 is one answer
84:42 - 8 9 is another answer
84:45 - 9 10 is another answer
84:47 - 11 12 is another answer
84:51 - oh no it only lets me have four okay i
84:53 - gotta eliminate one
84:56 - i'm going to eliminate nine tenths i'm
84:59 - pretty confident it's not nine tenths
85:03 - should i eliminate eight ninths that
85:05 - only gives me four options
85:07 - oh youtube giving i might be giving away
85:09 - the answer here by my elimination i also
85:12 - might be wrong but i think i have an
85:13 - idea what the sort of
85:15 - trick is okay so i did the poll go up
85:19 - i don't see it
85:20 - oh there it is
85:22 - so i don't see anyone answering it yet
85:23 - but i'm sure you will soon okay so let's
85:26 - work through this
85:29 - the limit i i would love by the way it'd
85:30 - be so awesome we could make this into a
85:32 - shader but i'm not ready for that
85:34 - i'm not ready for fractal shaders oh um
85:38 - xdja is asking for a link to the um
85:42 - shader sketch so i i will happily take
85:44 - like a quick break i somebody can
85:46 - hopefully just like snapshot this and a
85:48 - mod can copy paste in the chat i will
85:49 - come and do that in a second um let me
85:51 - go back to here okay so i want to start
85:54 - a new sketch
85:56 - and let's read over this algorithm start
85:58 - with a blue square then make two red
86:01 - squares each half the length of the
86:03 - original square arrange them diagonally
86:04 - so this is a problem that should be able
86:06 - to be solved by recursion
86:10 - i'm going to write a function called
86:11 - draw square
86:13 - and when you get an x y
86:16 - and a width and a height i guess i guess
86:18 - we know it's a square so an x y and i'll
86:20 - just use w for width
86:23 - we're going to
86:25 - fill a color
86:28 - maybe i should um i should use like a
86:30 - boolean like
86:32 - is red let's try that
86:35 - so if is oh my god a bird is in here
86:38 - again okay it flew out i'm in a garage
86:41 - with the garage door open and a bird
86:43 - just flew in okay is red
86:45 - phil
86:49 - a rectangle
86:51 - at x y
86:53 - or width and i can actually just use the
86:55 - p5 square function
87:00 - so now in draw and i'm going to put no
87:02 - loop
87:04 - what i would like to do is say draw
87:06 - square
87:07 - 0 0
87:09 - 400
87:10 - true
87:12 - let's run this sketch okay
87:14 - now
87:16 - i'm sorry that um i'm covering up some
87:18 - of the code
87:21 - so now the idea of recursion
87:23 - is that
87:25 - um
87:28 - the idea of recursion
87:30 - i'm looking at the i'm looking at the
87:32 - voting um which is interesting i think
87:34 - people are thinking the same lines as i
87:36 - did the idea of recursion is
87:38 - this function
87:39 - that drew this large red square
87:43 - can now draw two smaller blue squares
87:45 - inside of itself
87:47 - so i want to call and i'm going to
87:49 - uncheck the auto refresh just because
87:51 - this is going to create an infinite loop
87:52 - with without an exit condition i'm going
87:54 - to say draw a square
87:56 - at x y if i look at this picture it's
88:00 - this square oh blue can i make the first
88:02 - one blue
88:04 - oh no it has to be red because the blue
88:06 - is the one that gets smaller and smaller
88:08 - weird
88:09 - oh no oh i'm so confused
88:12 - yeah no with each no i can do it the any
88:14 - way i want
88:16 - oh it's fine i can handle this the
88:19 - oh i start with a blue square awesome
88:21 - even better
88:23 - if is red
88:25 - else
88:26 - so much easier else um
88:33 - fill uh 0 0 255. so for blue
88:38 - what's wrong here oh yeah and then now
88:40 - draw so let's just make sure this is
88:42 - blue
88:44 - what do i have wrong here
88:48 - oh an extra okay
88:52 - okay great now what i want to do is say
88:56 - draw a square
88:58 - draw the next square at x
89:00 - plus
89:03 - i think there might be a flaw with this
89:05 - but let's just write width divided by 2
89:08 - the same y
89:11 - and then
89:13 - um
89:14 - with half the width
89:17 - and then not is red
89:20 - so
89:21 - this i'm just saying the next square be
89:23 - the opposite color because true becomes
89:25 - false or false becomes true and i'm
89:27 - going to do this with if
89:32 - i think w is greater than uh let's just
89:35 - say like 20 pixels
89:39 - so i think this is the this is a
89:41 - reasonable exit condition given that
89:44 - we're going to do this
89:45 - keep doing this until
89:48 - the half of the half of the half of the
89:50 - half gets less than 20 and then we're
89:52 - done
89:54 - so let's see what happens if i run this
89:57 - right so this
89:59 - i don't know if i did this correctly but
90:01 - we can see
90:02 - blue square red square blue square red
90:04 - square now i also need to
90:07 - do what
90:09 - the one below
90:11 - which should be
90:14 - at x
90:17 - but y plus w divided by 2.
90:21 - so that's just moving it down same size
90:24 - change there oh okay
90:26 - did i do this right it looks a little
90:28 - different than
90:30 - this
90:32 - oh i only do it if it's
90:35 - if it's red wait two red squares
90:41 - then add four red squares
90:46 - oh i'm so confused
90:50 - what am i missing here i only do
90:57 - i don't do that thing for
91:01 - any square that is
91:05 - blue oh i'm so confused
91:08 - wait how did the
91:10 - oh i started with blue oh no no i'm not
91:12 - doing it over anymore because i started
91:14 - with blue okay hold on this is still
91:17 - going to have that problem but x y
91:19 - w divided by 2 that's the and then x
91:22 - plus w divided by 2. okay
91:25 - this is
91:27 - okay this is helping me see this
91:29 - but
91:31 - i do it only for the blue squares
91:34 - oh so i need to do if i'm only doing it
91:36 - for the blue squares
91:40 - i need to like for example
91:42 - only if w
91:44 - and
91:45 - not is red
91:52 - so
91:53 - i guess i need to draw four blue squares
91:56 - to start
91:58 - alternating the corners for the shading
92:01 - yeah
92:04 - like because then when i do it
92:07 - oh then when i do oh
92:12 - my goodness oh i see
92:16 - so i need to keep track of a count
92:26 - oh this is much harder than i thought
92:30 - this is
92:31 - ash is saying this is the same problem
92:32 - as adding an infinite sum by the way the
92:34 - answer is one
92:36 - i was trying to but this is much harder
92:38 - to program
92:39 - if you draw only one starting blue
92:41 - square and then only paint red squares
92:42 - on top of that one blue square
92:46 - yeah why don't i start with red
92:50 - and then i'm getting some kind of
92:52 - delivery by the way i don't know what
92:53 - that is but
92:54 - i'll just
92:56 - go back and get it
92:59 - i'm still talking about shaders not just
93:01 - the last squares is blue you're adding
93:04 - uh you start with blue then add red then
93:06 - oh yes so i can only add red
93:10 - so i could do this in an object oriented
93:12 - way
93:15 - which is take the square and chop it up
93:18 - into four
93:27 - i think actually what makes sense this
93:29 - is a little bit weird
93:31 - what if i did this
93:38 - i know this is kind of it's weird
93:42 - but what if i then
93:48 - when i started with blue
93:53 - all right started with blue and then
93:54 - what if i did
93:58 - over there
94:00 - and then
94:04 - over here
94:09 - ah there we go
94:11 - no
94:14 - no that's not right
94:16 - that's kind of interesting though this
94:18 - is the same
94:19 - i want to get the same result though
94:21 - with this
94:23 - this is the same result but it's just um
94:29 - i think it's like spaced out differently
94:32 - like the blue is in a different place
94:35 - right isn't this the same it's like the
94:37 - same but i didn't i'm not alternating
94:39 - the way i'm drawing
94:41 - so like these should be um
94:45 - so if i had like a count could i create
94:48 - a count i think i have an idea
94:51 - what if i created a count
94:55 - and then
94:58 - count i think i might be
95:01 - this might be a redundant variable
95:04 - uh
95:05 - count
95:07 - and then i'm going to just say count
95:09 - plus one
95:12 - count plus one
95:15 - count plus one
95:18 - count plus one and then
95:23 - oh and then
95:25 - i'm going to say if
95:29 - if count modulus 2
95:31 - if it's i want to know if it's odd or
95:33 - even
95:37 - let's just flip is red
95:39 - one more time
95:42 - just for the even ones
95:44 - or maybe just for the odd ones
95:49 - there we go
95:50 - [Music]
95:54 - i did it so uh simon i think said it's
95:58 - the it's the alternating right so oh
96:00 - this is really cool
96:02 - it's the alternating like it's like look
96:04 - at this this is what i was missing um
96:07 - and i'm sure there's a more efficient
96:08 - way to do this and i don't need the
96:10 - boolean and the it's red but okay so
96:14 - red red
96:16 - goes
96:17 - goes top left bottom right
96:19 - then the next time there's a blue circle
96:22 - it goes
96:24 - top right bottom left then the next time
96:26 - there's a blue circle goes the other way
96:28 - around so i just need to count whoops
96:32 - count through and i should say no stroke
96:36 - i would love to draw this with a can i
96:38 - use a generator function to animate this
96:40 - assignment
96:41 - um
96:42 - no what do i want to say no stroke
96:46 - and
96:47 - let's have i can put on auto refresh now
96:49 - because i'm
96:50 - pretty confident i don't have an
96:51 - infinite loop
96:53 - and then where is my
96:55 - if i say w is 50
96:58 - oh you know really it's nice having the
97:00 - stroke in there
97:02 - um so let's have the stroke
97:04 - but um
97:09 - well what could i do
97:12 - um hold on i have an idea
97:16 - uh
97:18 - i want to just see this iterate
97:21 - so i'm going to
97:24 - i'm going to use count i'm going to use
97:26 - count as my exit condition
97:30 - so i'm going to say if
97:32 - count
97:36 - if count is less than
97:40 - two
97:43 - right if count is less than three
97:46 - there we go and i'm going to put the
97:48 - stroke back because
97:49 - it was actually nice to see that
97:51 - i'll just make stroke weight
97:54 - 0.5 just so it's a little thinner
97:59 - i'm going to take out the no loop
98:02 - and then i'm going to say
98:05 - let iteration equal
98:07 - zero
98:09 - and if count is less than iteration
98:15 - so now we have just the blue square
98:18 - and if i add a mouse pressed
98:24 - and say iteration plus plus
98:28 - okay ready here we go
98:32 - oh i've got probably to run again so now
98:34 - this should do iteration one iteration
98:36 - two iteration three iteration four five
98:40 - six seven eight and i would love to make
98:43 - this much bigger
98:44 - let's pick some like nice slightly nicer
98:46 - colors
98:53 - coding train no there's a coding drain
98:55 - colors website
98:59 - i don't know why it's not coming up
99:01 - what is it cj made it
99:03 - colors coding train
99:06 - cj coding garden i don't know is this
99:08 - gonna work
99:12 - no
99:13 - no no how come i don't have this like
99:15 - coming up automatically in my uh
99:18 - um coming up automatically in my feed
99:20 - let's see uh
99:22 - ah
99:24 - somebody must know where the coding
99:25 - train colors are
99:28 - you can use double is red as a count and
99:30 - then use module to determine if blue or
99:32 - not yes so i'm going to leave that as an
99:34 - exercise to the viewer i want somebody
99:37 - to like feed me the oh when i move my
99:39 - arms there's a high-pitched noise
99:43 - just this arm
99:47 - i think
99:48 - i think i'm having some interference
99:50 - with this
99:51 - lav mic i had this problem before i
99:53 - switched lav mics now i switched back
99:56 - um hopefully it's okay i
99:58 - just want to finish this off with the
99:59 - coding trade colors
100:01 - where is that website
100:06 - okay maybe it's on um
100:10 - it's in the github issues here
100:13 - parts
100:15 - colors
100:17 - no
100:18 - clothes we're about closed
100:21 - color color no
100:23 - is it in
100:24 - this is like so silly that i'm like
100:26 - stuck on this
100:29 - i like how i said i was gonna come back
100:30 - after the break and do more shaders i
100:31 - haven't even taken the break yet
100:34 - uh
100:37 - colors
100:41 - i can't believe that no one in the chat
100:43 - has found this
100:44 - before me
100:49 - um
100:56 - i need a
100:58 - does this get there oh the discord bot
101:01 - i got there just the codingtrain.com
101:04 - colors okay thank god okay blue
101:10 - um is
101:11 - this is our blue
101:15 - and
101:16 - red this is our red
101:19 - this is definitely the most important
101:20 - thing that i'm going to do today is make
101:22 - sure that the colors are
101:23 - branded properly this is our red
101:28 - that's lovely and then i think i could
101:31 - use like maybe the yellow
101:33 - for the stroke
101:37 - um
101:39 - yellow for the stroke
101:44 - and where's that
101:46 - ah
101:47 - stroke
101:48 - okay
101:50 - and let's do
101:52 - um oh i should do well let's just do 800
101:55 - by 800
101:56 - and we will now i there was a question
101:59 - here i was oh okay wait
102:03 - uh with okay here we go everybody
102:10 - oh it's so lovely
102:15 - so there we go
102:16 - we can see this beautiful
102:18 - fractal sketch
102:21 - nicole says i feel ignored maybe you've
102:24 - been saying all these wonderful things
102:25 - in the chat and i've totally missed them
102:26 - i'm sorry can you invert the red and the
102:28 - blue i absolutely could
102:31 - if i could figure out how to zoom back
102:33 - out
102:34 - i think that's a nice idea
102:38 - um
102:39 - oh my goodness i
102:43 - and we're gonna run this again
102:47 - inverting the two
102:51 - okay so um wonderfully beautiful uh
102:54 - little exploration here now
102:57 - now that i have made this pattern one
102:59 - could i make this with shaders
103:01 - and then oh you know would be cool it's
103:02 - like zoom into it and then have it like
103:05 - infinitely repeating someday someday
103:08 - uh now oops
103:10 - now let's return
103:12 - to the question
103:14 - so the the
103:15 - the look to the thing to me here is this
103:17 - looks unlike the previous questions this
103:21 - looks much more like an infinite series
103:23 - where the
103:24 - that size
103:26 - of the blue in this case it's not
103:28 - inverted the blue square is approaching
103:31 - zero
103:33 - so uh the the um essentially the
103:37 - it's the same as like an infinite series
103:39 - what was it that's like one plus one
103:41 - half plus
103:43 - like this is one
103:44 - [Music]
103:46 - plus one half plus one quarter something
103:49 - like that right plus one eighth
103:52 - it's going to go to infinity
103:55 - in which case the area should be 1. what
103:57 - is the infinite series though that this
103:59 - maps to because you can see you can see
104:01 - this here is like well this is 0 i see
104:05 - zero plus one half
104:07 - plus
104:09 - um one half plus this is
104:12 - this is one quarter of one quarter but
104:14 - this is one half of one quarter which
104:16 - would be one eighth but another one
104:18 - eighth is one fourth so i think it is
104:21 - one plus one-fourth plus one-eighth plus
104:23 - one-sixteenth is that the infinite
104:24 - series
104:26 - making that with shaders is giving me a
104:27 - nightmare
104:29 - says nicole yes i'm gonna have
104:30 - nightmares about this tonight anyway i'm
104:32 - gonna hit
104:32 - submit we got it correct
104:36 - let's look at the explanation which is
104:38 - always super helpful
104:39 - oh oh look at this
104:42 - the pattern first puts two squares in
104:43 - the upper left so it's showing that's
104:45 - the same as this one which is what i
104:46 - coded originally
104:49 - and one-half one-fourth one-eighths with
104:51 - 16th and the technical term here is that
104:53 - the limit converges to zero as this
104:55 - sequence goes to infinity
104:59 - amazing so this is what again this is
105:01 - what i love about working with brilliant
105:05 - um it has these amazing courses with one
105:09 - beautiful problems in math science
105:12 - physics computer science neural networks
105:14 - etc
105:15 - and you can explore them on your own
105:18 - you can discover your own coding
105:19 - challenges you can learn new concepts
105:22 - through interactive lessons um sign up
105:24 - for free today i'm going to take just
105:26 - like a literally like a one or two
105:27 - minute
105:28 - break what do you want to do and then
105:30 - return back to shaders if you have
105:32 - nothing to do in those 60 seconds sign
105:34 - up for free there brilliant.org coding
105:36 - train if you want to unlock all of the
105:38 - premium content all of their courses
105:40 - um if you do that through that link the
105:42 - first 200 people to do so will get a 20
105:44 - um discount off it's also a great gift
105:47 - so it's giving seasons not yet but
105:48 - coming up soon if you already have it
105:50 - you can gift it to somebody else a
105:52 - subscription and
105:54 - here oh you are posting the link to the
105:55 - coding train color website but your
105:57 - messages didn't get through okay so i'm
105:59 - just going to take a um try to take the
106:01 - shortest break possible so i can come
106:03 - back and do a little bit more on shaders
106:05 - so don't go anywhere but i'm not going
106:07 - to be here for that much longer maybe 15
106:09 - 20 minutes i want to get a little
106:11 - further with the shader think about what
106:12 - you would like me to do with the shaders
106:14 - um post that post your ideas in the chat
106:16 - i'll be peering through it i also have
106:18 - to go you just have to take i need a
106:20 - break everybody needs a break you need a
106:22 - break you should get up and stretch i'm
106:23 - standing
106:24 - so i don't need to get up and stretch
106:26 - because this is all stretching for me
106:28 - but i will be back in just a minute or
106:30 - two
106:33 - [Music]
106:40 - don't have a button for the intermission
106:41 - animation so i got to just manually
106:43 - click it over here there we go
106:47 - [Music]
106:59 - [Music]
107:00 - so
107:06 - [Music]
107:08 - so
107:11 - [Music]
107:38 - [Music]
107:44 - [Music]
107:54 - [Music]
108:20 - [Music]
108:26 - do
108:31 - [Music]
108:39 - all right
108:40 - i have returned
108:41 - um i would love to
108:44 - uh hear yeah mark boots everybody's
108:47 - posting me the link to the um
108:50 - the um
108:52 - uh thank you brilliant uh for the
108:53 - sponsorship um mark boots is posting um
108:56 - the link to the uh
108:59 - color palette
109:01 - and uh probably nicole if you're posting
109:04 - links into the youtube chat
109:07 - youtube doesn't let you post the link
109:09 - unless you've got like certain
109:10 - privileges which i would be happy to add
109:12 - for you potentially but um
109:14 - yeah actually speaking of which i'm
109:16 - pretty sure that we're
109:18 - things are very much in flux for me
109:20 - right now and i know that i'm always
109:21 - saying that
109:22 - but i'm looking to expand um
109:26 - um the moderation team
109:28 - so folks who and some of these are
109:30 - volunteer positions um although i'm
109:32 - trying to figure out how to do this more
109:35 - equitable equitably
109:37 - um
109:38 - but um expand the discord and youtube
109:41 - moderation um
109:43 - team and um so if that's something that
109:45 - interests you feel free to reach out
109:47 - join the discord i don't think this
109:48 - button's gonna work
109:50 - no it doesn't um
109:51 - codingtrain.comcodingtrain.com
109:54 - discord okay um
109:59 - yeah so lost search resourcer is saying
110:00 - if posting urls is an issue in the chat
110:03 - that might be why links to the discord
110:05 - button don't work no because i'm
110:06 - supposed to be able to post links to the
110:08 - chat me i have all the power
110:10 - i am the one
110:12 - the only
110:15 - me with the admin thing in the youtube
110:20 - gloria i know gloria gloria's wagging
110:22 - her tail over there running in circles
110:24 - she's very happy being up here in the
110:26 - country but she's like hello you said
110:28 - you're only i mean i don't know if she
110:29 - really she's not really talking she's a
110:31 - dog
110:31 - but
110:32 - if she were to speak she'd say hello you
110:34 - said you're gonna stream for two hours i
110:35 - would like some lunch i would like you
110:37 - to take me for a walk
110:38 - also you have a lot of emails to answer
110:40 - i saw some names of some of my nyu
110:42 - students in the chat i've got lots of
110:44 - work responsibilities to do you know
110:46 - this is all kind of the same
110:48 - big larger project that i'm doing it's
110:49 - all the same universe
110:51 - processing foundation coding train nyu
110:54 - but i do have to get some out of that
110:56 - stuff um
110:58 - great nicole definitely be in touch
110:59 - nicole um
111:02 - and all right
111:04 - so i do want to have a little bit more
111:06 - time today i'm trying to limit myself to
111:08 - two hour streams
111:10 - um
111:12 - you know again a whole different world
111:15 - is coming up from 20 20 20 20 22 20 20
111:19 - 20 20 20 20 22
111:21 - i can't say it
111:22 - 20 22. um
111:26 - okay so let's this this was a lot of fun
111:30 - and i would like to oh so oh you don't
111:33 - see what i'm seeing good perfect you
111:34 - know what i'm going to do
111:36 - just give me a moment here it's going to
111:38 - take me a minute i'm opening up the
111:39 - discord to share with you the links of
111:42 - things that i'm working on
111:45 - what's funny is i've got some old like
111:47 - it's summer is over and i have these um
111:50 - what do you call it floaties basically
111:52 - like little round tube things that are
111:54 - blown up for my kids to go swimming and
111:56 - i have them here in the garage and i was
111:58 - deflating them so they're deflated and
112:01 - sitting on the
112:02 - glorious over there like scratching i'm
112:04 - trying to make it into a bed for herself
112:06 - i really need a dog cam i'm gonna have
112:08 - to get that set up at some point
112:10 - so right now i just have to like discard
112:12 - describe gloria's activities to you all
112:14 - what was i doing discord yes just bear
112:17 - with me
112:18 - come on discord where are you there you
112:20 - are
112:20 - coding train
112:24 - uh
112:25 - links
112:27 - special fancy secret command
112:32 - okay
112:34 - so i am now
112:36 - about to
112:38 - show you the coding train discord
112:40 - which is here oh it's so large
112:43 - it's larger in charge uh last time i
112:45 - bothered to post anything here was when
112:47 - i made the processing happy birthday
112:49 - cake but um this channel here is a
112:52 - channel where i will post links to
112:53 - things that i'm doing in the live stream
112:56 - if i remember
112:58 - this scheduling channel is if you choose
113:01 - if you're in the discord and you sign up
113:03 - for the notifications role it's very
113:05 - hard to see this i think it's just uh
113:07 - the command is we have a new new bot
113:10 - uh which is another whole other topic i
113:12 - need to i think if
113:14 - maybe it's still the old command but
113:17 - anyway somebody will help you the most
113:19 - important thing is when you join the
113:20 - discord uh read the readme react with an
113:24 - emoji it will unlock all the channels
113:25 - for you
113:26 - um
113:28 - and then you can go here into uh and and
113:31 - and it's a wonderful community there's
113:33 - so many discords you know join the p5
113:35 - one i don't know if there's a curiously
113:36 - minded one
113:37 - but uh come and spend some time in the
113:39 - coding train one if you desire i would
113:41 - like to we're hoping to do some more
113:43 - additional content and workshops so like
113:45 - um you know you know not to put anyone
113:47 - on the spot but like if any of the
113:49 - viewers like uh
113:51 - nicole wants to come in and do like a
113:54 - workshop on shaders in the discord i
113:56 - don't know you potentially could you
113:58 - know not making any promises here but
113:59 - i'm trying to but that's that's the
114:01 - thing um
114:04 - okay but ah i was just trying to post
114:07 - the links to the code i'm working on so
114:10 - first this is this
114:13 - infinite i'll just call this infinite
114:14 - area
114:17 - so if you want to play around with that
114:18 - infinite area sketch
114:20 - there it is uh if you want to
114:24 - play around with my
114:27 - um first shader sketch
114:32 - is it holly sunscreen or longing stream
114:34 - wasn't it longing stream yeah
114:37 - yeah i don't know what holly oh that was
114:39 - the um the nested loop one
114:41 - um
114:42 - so here is a shader sketch
114:46 - and i'm going to actually
114:49 - call this i'll just call this shader1
114:52 - which i should come up with a better
114:53 - name i'm going to duplicate it
114:55 - and shader2 so whatever i do now
114:58 - will be in
115:03 - will be in this particular sketch so you
115:05 - can get in the discord not infinite area
115:08 - the area is one yes an infinite series
115:13 - i trying my best you know it definitely
115:15 - happens to me there's like a certain
115:17 - point in the stream
115:19 - where my brain starts to melt i mean in
115:22 - all truth it's probably about 30 seconds
115:23 - in if i'm being honest i'm i mean i i
115:26 - really get it like
115:28 - eliza and alethia you've got the right
115:30 - idea co-hosts co-hosts i should probably
115:33 - figure that out someday
115:35 - but it's just not my thing right now
115:37 - uh so i don't want to subject anyone to
115:39 - my insanity either so um
115:42 - but i'm starting to fade so let's see if
115:44 - we can get a little further
115:45 - with the shader code i had some ideas of
115:47 - things that i would try to do let me
115:49 - just review where i am
115:52 - so in case you're just tuning in
115:54 - um
115:56 - i am going to talk you through what i
115:58 - have done so far so
116:00 - what is a shader
116:02 - i'm working up to answering that
116:04 - question
116:05 - right now i am just dipping my toe in
116:08 - getting my feet wet to extend that
116:11 - metaphor into my shader of water ripples
116:13 - which is coming that's what i want to
116:15 - program very soon
116:17 - i want to do some like cool water wave
116:20 - shadery stuff
116:23 - i am loading both a vertex shader and a
116:25 - fragment shader
116:27 - the vertex shader is for handling the
116:31 - geometry of something that i am
116:33 - rendering into my scene so p5 is
116:36 - controlling the scene
116:38 - it's and i'm going to switch this back
116:39 - to 400 by
116:41 - just so we can fit more onto the screen
116:44 - right now but the scene is in p5
116:48 - there is a rectangle that i am applying
116:50 - the shader to
116:51 - the vertex shader
116:53 - affects the geometry the position of the
116:56 - rectangle itself
116:58 - and its orientation
117:03 - the fragment shader i want to say
117:05 - manipulates the texture the pixels of
117:07 - the geometry is that accurate to say
117:09 - that's the way that i understand it
117:11 - right now i am not doing anything but
117:14 - creating a boilerplate
117:16 - um
117:18 - a boilerplate
117:20 - vertex shader
117:21 - meaning the um this is like sort of a
117:24 - global attribute variable set by p5
117:29 - to explain
117:30 - to keep track of the position
117:34 - of
117:35 - the rectangle that i'm drawing
117:38 - so
117:39 - in order to convert this sort of
117:42 - rectangle to set its position in size to
117:46 - fill the entire canvas
117:48 - i need to double its size because by
117:50 - default it's half and the range is
117:52 - negative one to one and it's at zero
117:54 - zero
117:55 - so i and so it's its length is one i
117:58 - need it to be two and i need to slide
117:59 - over i think that i could probably
118:01 - change this to say pos four equals 2.0
118:05 - times positive
118:07 - minus 1.0
118:09 - so i think this might be a
118:11 - nicer way to explain it and it's the
118:13 - same yeah so this is
118:15 - um and i forget why it's a 4
118:18 - a vect4 right it's an xyz but i guess
118:21 - maybe it's is it more like it's like um
118:24 - because i'm in 3d so we have a 4d vector
118:26 - because it's like a matrix thing
118:28 - i've covered this in previous videos c
118:32 - for for for a recording when i was
118:34 - hopefully thinking straight um
118:37 - 3d projection
118:39 - uh coding train this is one of my
118:41 - favorite videos to make
118:43 - um
118:45 - i guess i can just open it up here but
118:48 - because this
118:50 - uh
118:51 - i want to just like turn off welcome to
118:53 - a
118:54 - this is a video i made where i created
118:56 - this 3d cube
119:00 - um but and right now you can see it's a
119:01 - p3d sketch but by the end of this coding
119:05 - challenge
119:06 - i was not using any uh this is all being
119:09 - rendered in p2d but i was doing the
119:12 - actual matrix multiplication math to
119:14 - create the 3d perspective so this was
119:17 - like a thing that i did a while ago
119:19 - because i didn't really understand how
119:20 - it worked and i tried to turn it into a
119:21 - video it led to me doing this like 4d
119:24 - shape projected into 3d which is the
119:26 - hypercube so i encourage you to check
119:28 - all that stuff out um
119:32 - but uh i wonder if that's something
119:34 - that's going along going here
119:36 - homogeneous coordinates is what people
119:38 - are saying
119:39 - uh
119:41 - all right there's something else going
119:42 - on in the chat in thailand okay so then
119:43 - the fragment shader
119:46 - gets
119:47 - the x y coordinate from my
119:50 - p5 space essentially normalize it
119:53 - normalizes it oh actually no
119:56 - yeah
119:57 - normalizes it according to the
119:58 - resolution of that space
120:00 - i also want to do the same for the mouse
120:02 - then i'm looking at every essentially
120:04 - pixel's distance
120:06 - between and this this would make more
120:07 - sense for me to call this mouse
120:11 - i'm looking at every pixel's distance
120:13 - between
120:15 - the mouse and itself and if it's closer
120:17 - to the mouse it's brighter
120:19 - if it is
120:22 - uh further from the mouse it's darker so
120:23 - that's what i got and again my um the
120:26 - sort of way i'm thinking about this is
120:28 - this fragment shader is like the code
120:31 - for an individual pixel and it runs on
120:34 - all the pixels all at once in parallel
120:36 - which is how it's able to you know with
120:38 - the graphics hardware of this you know
120:40 - laptop how it's able to run super fast
120:45 - uh was that an ex explanation of um
120:48 - shaders that actually um makes sense
120:55 - and if someone accurate i would love to
120:56 - know
120:57 - i've got a lot of notifications on my
120:59 - phone
121:00 - rule number one of streaming don't look
121:02 - at the notifications on your phone while
121:03 - you're streaming first of all it's rude
121:05 - it's what i tell my children no phones
121:07 - at the table
121:09 - do we have to break those rules
121:10 - sometimes there's only so much we can do
121:13 - um but no phones at the table the
121:15 - streaming table which is this
121:17 - i really love this desk by the way
121:20 - okay
121:23 - so i don't have a lot of time because
121:24 - i'm overtime
121:26 - but i want to see this animate i think
121:29 - that would be something great to do next
121:33 - and a way that i could do that is with
121:35 - frame count i believe
121:38 - so i could set up
121:42 - and in uh when i was doing this when i
121:45 - was learning from aletheia and eliza on
121:48 - saturday the variable they used was time
121:50 - but frame count time i mean i could send
121:52 - it millies for time but i'm gonna
121:55 - frame count is a built-in variable in
121:57 - p5
121:58 - so i'm going to make another uniform
122:01 - i'm going to call it u let's call it u
122:03 - time i know i said i wasn't going to do
122:05 - that and i think i can assume i can just
122:07 - give it
122:08 - just frame count
122:12 - so u time is frame count
122:14 - so the shader should as it's operating
122:17 - on the pixel so this is the thing i'm
122:19 - really confused about there's no
122:20 - there's a draw loop here
122:23 - so the draw loop is giving it um a new
122:26 - and uh suic that's very kind of you
122:29 - oh nicole said it was a great
122:31 - description of the shader oh it makes me
122:33 - so happy
122:34 - again the first the next thing anybody
122:36 - said to me which i think might have been
122:37 - an ironic statement i'm not sure was
122:40 - nice anti-reflective whiteboard
122:43 - the main issue with my whiteboard and i
122:44 - know that i'm just like completely
122:46 - changing the subject every two seconds
122:47 - is i put this together myself i am
122:50 - really bad at putting together furniture
122:52 - my wife is really good at putting
122:54 - together furniture and i put together
122:56 - this like
122:57 - a bed and it must have taken me like
123:00 - eight hours when it would take a normal
123:01 - person hour i had to like undo so many
123:03 - screws i did put this together myself it
123:05 - seems a little wobbly this is on wheels
123:08 - but i have the wheels locked i don't
123:09 - know somebody's i need i need to figure
123:11 - out the optimal whiteboard solution for
123:14 - myself i will pay good money for a nice
123:16 - new whiteboard that is anti-reflective
123:18 - fills this space
123:20 - and doesn't wobble
123:21 - i'm taking your recommendations
123:23 - but so that was the first nicest thing
123:25 - sony ever said to me
123:27 - nicole saying oh
123:29 - nicole nicole said that was a good
123:31 - explanation she had to pass millie's
123:33 - into your shader as a uniform
123:35 - i know but i don't want to okay so i bet
123:37 - you that's better for a variety of
123:39 - reasons but i kind of think that right
123:42 - now mentally i'm going to understand the
123:45 - draw loop as frame count
123:47 - more easily so let me try it that way
123:49 - your comment is taken your feedback
123:52 - is ingested in my ear it's not going out
123:54 - the other ear it's staying inside my
123:56 - head
123:56 - but i'm gonna have to just file it in
123:58 - the back for later let's try it with
123:59 - frame count
124:01 - so uh so maybe the what's offending
124:04 - um you know i could call this frames
124:06 - let's call it u-frames that way we don't
124:09 - have to be offended not saying you were
124:11 - offended but i can be more accurate
124:13 - about what it is
124:14 - oh and i really want to get the random
124:16 - thing going in here uniform
124:19 - back to
124:20 - you
124:22 - frames
124:23 - so my idea here is that
124:26 - what if i were to just add
124:32 - u frames to the brightness now
124:34 - immediately it should just go totally to
124:36 - white and i'm going to turn on the auto
124:38 - refresh
124:43 - and run it again
124:50 - what did i do wrong oh because no
124:54 - oh it's a vector not a vector
124:56 - uniform float so i got to be careful
124:58 - this is a float not a vector
125:03 - okay so you immediately went to white
125:05 - because the brightest color is one and
125:07 - the frame count is instantly
125:10 - so i think what i've seen people do is
125:12 - use like
125:14 - a sine wave would be an effective thing
125:16 - to do i kind of want to just see that i
125:18 - wanted to use modulus i could just
125:20 - divide it by
125:25 - i do want to have this be sort of a
125:27 - number well let's try just just because
125:30 - i try it one way doesn't mean i can't
125:31 - try it another way later so i'm going to
125:34 - just try dividing it
125:36 - i'm going to make a variable called
125:37 - offset
125:42 - equals u frames
125:45 - divided by
125:46 - um
125:49 - a thousand and i always forget that this
125:51 - dot there's no this dot it's just the
125:53 - dot
125:54 - and then let's make this offset
125:59 - so it's getting you can see
126:02 - it's getting brighter and brighter over
126:04 - time that circle is expanding
126:08 - so now what i would like to do
126:11 - is say
126:12 - bright equals modulus i think bright and
126:16 - 1.0
126:19 - so you can see here it's going to cycle
126:23 - back down to zero
126:26 - but why
126:29 - why does it not come back up again
126:37 - oh it is
126:38 - oh it's just super slow okay
126:41 - so
126:45 - this is what i was trying to do it's
126:47 - like
126:48 - cycling back down to zero it's kind of
126:51 - interesting i mean i don't really know
126:52 - what i'm doing here but
126:54 - um
126:55 - so i kind of like this
126:57 - i think this could also be now
127:01 - i could think of this as like
127:04 - right zero one minus bright
127:08 - so i could kind of have different colors
127:10 - oh one point
127:12 - why why why why can't why can't it just
127:14 - know when i type one i mean it to be a
127:16 - float
127:18 - uh oh vec four uh one
127:27 - so here's red and blue again i mean this
127:29 - is kind of interesting
127:30 - now but i wanted to like have this be
127:34 - i want it to be a little bit more
127:36 - logical about what i'm doing here like
127:38 - if i if i make this two
127:41 - right it can
127:43 - it's still going to cycle back but later
127:46 - and if i make this 10
127:50 - super but i wanted to see multiple
127:52 - cycles
128:02 - yeah this is what i was thinking oh no
128:07 - whoa that's sorry for the flashing
128:12 - uh
128:13 - no no no no one one is what i want
128:16 - 1.0
128:22 - well let's try so this is interesting
128:24 - this is not doing exactly what i was
128:26 - kind of like
128:27 - looking to do i guess i could use that
128:29 - like clamp or something
128:31 - radar ping but different colors
128:33 - uh why does colors accept ins it's so
128:36 - strange um
128:37 - okay so here's what i want to see now
128:40 - let's try adding
128:42 - a sine
128:44 - of this
128:46 - so
128:47 - i'm basically turning this into
128:49 - [Music]
128:51 - um
128:52 - and then
128:54 - i think i let's take out the modulus now
129:02 - it should
129:10 - yeah there we go so this is just gonna
129:11 - pulse
129:17 - so what if i wanted it to
129:21 - have multiple layers
129:25 - so based off of the distance
129:30 - oh what if i did a modulus of the
129:33 - distance without the offset
129:39 - so for example
129:41 - if i did a modulus of the distance
129:48 - yeah that's what i was
129:50 - this is what i was hoping to sort of see
129:55 - um
129:56 - but
129:59 - uh
130:00 - so if i did and then if i did two times
130:04 - two points so this is i'm sorry i'm lost
130:06 - in my own head right now not explaining
130:08 - anything
130:10 - but i wanted to see this this is what i
130:12 - was hoping to do i wanted to try to use
130:13 - modulus to have it like fade out and
130:15 - then come back and fade out and come
130:17 - back yeah chris sorry um
130:20 - auto encoders is not happening today i
130:22 - apologize i got lost in shader land
130:25 - um so now i should be able to
130:28 - [Music]
130:29 - um add the offset
130:38 - i mean i'm basically just trying to
130:40 - hypnotize everybody
130:44 - and then
130:46 - also do this
130:51 - and
130:54 - i was gonna yep
130:56 - that's just making it slower dude this
130:58 - is just making it slower
131:02 - um
131:04 - but how do i make it
131:07 - like if i do 25 and then multiply it by
131:09 - four
131:13 - yeah okay so what if i do
131:16 - um
131:19 - factor equals four
131:22 - and then
131:25 - uh
131:26 - factor
131:28 - and then this would be
131:31 - 1.0 divided by factor we're probably all
131:34 - lost because trust me i'm just as lost
131:36 - as you are
131:39 - uh and then
131:44 - um
131:45 - maybe i don't want the sine wave anymore
131:47 - um
131:49 - and then like
131:51 - how how much can i get away with this
131:55 - like if i make the factor uh 16.
131:59 - yeah it's a okay cool
132:02 - now why is it only it's barely getting
132:05 - anywhere can i
132:09 - can i multiply this by 10 oh 10.0
132:15 - oh no that's just making it
132:17 - well go very fast hold on
132:23 - yeah there we go it's like a water
132:24 - ripple
132:31 - okay yeah
132:33 - says g-s-l-s-l
132:36 - is so fun i would agree
132:39 - i would agree
132:41 - uh a hundred
132:46 - factor
132:47 - eight
132:51 - no i liked it with
132:56 - a larger factor but slower
132:59 - i think
133:01 - okay i think i have to i think i have to
133:03 - stop
133:05 - it looks like the warner brothers
133:07 - background it totally does you need the
133:08 - absolute value of sine
133:11 - well i don't i mean i that might help
133:14 - but wouldn't that
133:15 - let's try that
133:18 - but i'm fine with taking the negative
133:21 - oh but now this is just going to go
133:26 - interesting
133:29 - now also i probably could do like
133:34 - i mean there's got to be a way to like
133:37 - make the color different based on the
133:38 - angle
133:40 - right couldn't i do
133:42 - hold on let's do
133:46 - i'm going to stop really soon
133:48 - float angle is a tan
133:52 - of
133:54 - uv
133:54 - [Music]
133:56 - y u v i'm trying to get the angle of the
133:59 - x y relative to the center
134:02 - um and that should give me something
134:04 - between 0 and 2 pi
134:07 - so if i divide that by oh it probably
134:09 - gives me between
134:11 - so if i oh this is why i had pi there is
134:13 - no pi um
134:20 - close enough
134:23 - how do i do a constant
134:28 - is that right so if i were to say take
134:31 - angle
134:33 - and make that
134:35 - divided by pi
134:37 - and make the angle
134:40 - hey look now
134:41 - the green is rel is the angle but it's i
134:44 - think
134:46 - um
134:48 - i think i should add
134:50 - pi
134:51 - to this i think i'm probably getting
134:54 - yeah and then divide it by pi
134:56 - times two i'm sorry i'm not explaining
134:58 - what i'm doing
135:01 - and this has to be a dot i just i can't
135:03 - i have to stop
135:10 - that is not really giving me the effect
135:12 - that i expected
135:15 - hold on let's
135:20 - let's just look at the angle for a
135:22 - second
135:24 - ah
135:25 - okay
135:26 - a tan
135:36 - if i take the literal angle
135:40 - oh it's because it's from the bottom
135:42 - left
135:45 - so i have to say minus
135:49 - u resolution
135:51 - [Music]
135:52 - dot x y divided by two
135:56 - i'm confused
136:00 - um
136:09 - oh whoops
136:11 - no not there
136:13 - hold on i want to get this right minus u
136:16 - resolution
136:17 - dot y divided by 2.
136:21 - 2.0
136:27 - no
136:37 - um
136:39 - how do i how do i get it to be
136:42 - u v o minus mouse
136:45 - dot y
136:46 - yeah oh whoops hello just use the mouse
136:48 - dot y
136:50 - thank you
136:52 - i don't know why i wasn't thinking that
136:55 - oh because i'm doing the
136:58 - yeah okay so we can see here that that's
137:02 - the color is mapped to an angle
137:04 - but i need to
137:06 - you know divide it by pi
137:08 - but that's only
137:10 - half
137:11 - so i want to divide it by pi times 2
137:15 - oh and this should be y
137:20 - this has to be
137:23 - i just
137:25 - okay this is right except now
137:28 - i should say pi plus being
137:31 - my kingdom for a map function
137:35 - there we go so this is now the color i
137:38 - was doing this yesterday the color is
137:40 - green all the way around
137:43 - so
137:44 - i could
137:45 - this is pretty much what i did with
137:47 - eliza and alethia i'm just sort of like
137:49 - redoing it so if i said bright now
137:53 - so you can see that it's with green but
137:56 - there's no reason why now i can't do mod
137:58 - angle
138:02 - plus
138:03 - offset
138:06 - one
138:10 - there we go
138:13 - i don't know what the oh look at
138:14 - this whoa what it's like in the wrong
138:16 - place too which is kind of
138:18 - a happy accident
138:21 - oh because i have
138:22 - uv y u
138:25 - u v x oh this should be x
138:29 - there we go i kind of liked what i was
138:30 - doing though
138:32 - so i'm really hypnotizing oh and sine
138:34 - wave it's coming back
138:37 - so um
138:40 - can i like modulus this with a
138:43 - oh no but um
138:50 - there
138:51 - uh
138:56 - no
138:57 - oh no that's what i want um
139:01 - i can't stop oh yeah this
139:07 - there we go
139:14 - okay hold on um
139:17 - let's
139:18 - do and let's multiply it by 2.
139:22 - same thing let's do factor
139:24 - can i do that factor
139:27 - 1
139:28 - 1 divided by factor
139:30 - this is my new favorite weird thing to
139:32 - do
139:35 - ta-da
139:37 - okay
139:40 - oh my god okay everybody
139:44 - um i don't know i don't know my
139:47 - my colors need a little bit to be
139:49 - desired here
139:50 - leave a little bit to be desired here
139:52 - let's just let's just make this um
139:56 - let's slow this down
139:59 - a little bit
140:01 - and multiply it by 20
140:04 - and
140:06 - now what i'm going to do is do i dare
140:11 - what's the chance i could get this to
140:12 - work if i just
140:14 - do window with
140:18 - it's going to be all askew
140:27 - nicole's giving me a map function yeah i
140:29 - could write my own map function is are
140:31 - can you import can you create like a
140:33 - utility library for a shader and import
140:35 - it
140:36 - i think i should probably make it a
140:38 - square no matter what
140:39 - but um
140:41 - here we go
140:43 - share
140:44 - full screen
140:47 - view
140:49 - enter full screen
140:52 - refresh
140:55 - refresh
141:00 - refresh
141:02 - use a cosign palette
141:05 - i can't get it to
141:07 - um i don't know why
141:10 - i can't get it to run in this mode
141:16 - but whoops
141:20 - it's much better as a square anyway
141:26 - okay
141:27 - ta-da
141:29 - you want to normalize the uv ah okay
141:32 - yes normalize the uv okay but that's
141:36 - that's for another day uh thank you for
141:40 - uh tuning in for today's live stream uh
141:43 - this code is available in the discord
141:46 - coding train discord which you can sign
141:47 - up for at thecodingtrain.com
141:50 - discord uh thank you today's sponsor
141:53 - brilliant you can sign up for free at
141:55 - brilliant.org codingtrain that tells
141:57 - them you found out about it from me
141:58 - helps out the channel it's a way of
142:00 - supporting the channel um and uh there
142:02 - also if you want to subscribe to the
142:04 - premium uh brilliant subscription uh
142:06 - that link will get you a 20 off uh
142:09 - coupon
142:10 - um i will be thank you uh
142:14 - um
142:15 - uh thank you um k weekman for posting
142:17 - the uh discord link in the chat
142:21 - um i
142:22 - i'm gonna go it's 1 30. i've been
142:24 - streaming for two and a half hours
142:26 - there's a chance i'll be back this
142:27 - friday
142:29 - there's a chance i'll be back next
142:30 - monday there's even a chance that a
142:32 - brand new
142:34 - fully edited coding challenge video will
142:37 - come out at the end of this week
142:40 - putting the finishing while putting the
142:41 - starting touches
142:43 - on it it's a really fun exciting code
142:45 - example of doing time displacement
142:48 - probably could do it with a shader can
142:50 - you pass an image to a shader from like
142:53 - the webcam it's got to be a way to do
142:54 - that
142:56 - um
142:57 - and i hope that you learned something
142:58 - about shaders today i feel like i'm
143:00 - getting a much better understanding of
143:02 - them although apparently the only thing
143:03 - i know how to do is make hypnotic
143:05 - patterns
143:07 - um
143:08 - so i've got to go i wish that i had more
143:10 - time today for um
143:12 - some
143:14 - um
143:15 - and thank you uh okay weekman for
143:17 - posting louise lessel's uh website oh
143:19 - yeah so let me let me do some thank yous
143:22 - so thank you to the book of shaders
143:24 - which i intend to fully go through at
143:26 - some point but i know this is the origin
143:28 - of many things
143:29 - thank you suick for your very kind um
143:34 - we definitely need to do this dot song
143:35 - for your kind super chat there thank you
143:38 - to uh
143:39 - curiously minded
143:42 - uh check out
143:44 - uh their stream travel back in time to
143:46 - see me on their stream thank you for
143:48 - introducing me to shaders i think i
143:49 - might never look back gotta do a lot
143:51 - more with this
143:53 - um
143:54 - and also thank you to
143:57 - um casey and louise um hopefully like if
144:01 - i go to the homepage of this
144:04 - there is um
144:06 - yeah thank you to casey and louise um
144:08 - the example this looks like
144:10 - the example that i was building off of
144:12 - today i was really pulling from their
144:14 - examples shader is texture wait what
144:18 - what can i just make it a sphere
144:21 - can i just say sphere instead
144:28 - whoa
144:29 - wow
144:30 - wow
144:32 - it didn't really work
144:34 - but kinda did okay i'll return to that
144:36 - later
144:37 - make it back to a rectangle i'll figure
144:40 - that out later um i will
144:43 - see you all on the if you invert the
144:46 - mouse position looks like some sort of
144:47 - first person so i know i know i can't
144:49 - stop okay here's what i would love for
144:51 - you to do
144:52 - what do we need hashtag
144:55 - oh gloria really wants i i'm my poor dog
144:58 - she's just looking at me i mean at least
144:59 - she's outside and there's no sun anymore
145:02 - she's really enjoying the sunshine but
145:03 - she really is looking at me like okay
145:05 - it's been two and a half hours need to
145:08 - be fed need to be walked properly
145:10 - anyway
145:11 - um the art of code channel on youtube
145:13 - has complex shader tutorials
145:16 - um so many wonderful things ah but this
145:17 - is what i would love for you to do if
145:19 - you are inspired to try making a shader
145:22 - from today i don't know uh tweet at me
145:24 - at shiffman um at the coding train
145:27 - um
145:29 - choo choo slot choo choo shader
145:31 - shader choo choo true shader shoe i
145:33 - don't know shader chew two shader
145:35 - choo choo shader
145:38 - shift shader shader shafader
145:41 - you figure out what the hashtag should
145:43 - be self organize on the internet um come
145:45 - back for the next live stream hopefully
145:47 - i'll get some new videos out also i
145:49 - appreciate all of you
145:51 - i wish i could do more
145:53 - and see you all soon i'm gonna um
145:56 - next time hopefully i'll have some time
145:57 - to share community contributions or
145:59 - answer some questions and all that kind
146:00 - of jazz see you next time on the coding
146:03 - train uh thank you to all the members
146:05 - who have signed up through um
146:07 - uh youtube you can also sign up through
146:09 - patreon if you uh prefer although i need
146:12 - to get emails out to all the new patreon
146:14 - subscribers
146:15 - um
146:18 - if you've received your custom train
146:19 - whistle with your laser etched random
146:21 - walk pattern on it um i should come a
146:24 - little bit closer to a show let's see if
146:26 - i can bring that right up to the camera
146:28 - this is uh um uh please share it with me
146:31 - uh i don't have light here so but
146:33 - hopefully you can kind of oh i'm so in
146:35 - the dark
146:37 - uh two in the light
146:41 - i don't know what that sound was i
146:42 - really just gotta go uh there we go
146:44 - random walk pattern
146:46 - uh coding train uh and
146:50 - uh
146:51 - see you all happy halloween almost whoo
146:54 - i don't know if we're gonna have a
146:55 - spooky coding train i like to do that
146:56 - every year but it's gonna be really hard
146:58 - this time
147:00 - goodbye as always i always forget that
147:03 - this stop this stock this stop this
147:06 - dot this stop this
147:08 - dot floating point
149:36 - this whole time there's no music
149:38 - because i forgot to add
149:41 - the audio capture
149:43 - to this
149:45 - [Music]
149:48 - business song
149:54 - [Music]
150:21 - the kittens kittens and kittens and
150:24 - kittens
150:25 - [Music]
150:43 - [Music]
150:54 - i feel just sort of like a nice
150:57 - feeling of relaxation
150:59 - everything's gonna be okay today
151:01 - dream is not broken it has not frozen
151:03 - this is a this is a wonderful thing
151:06 - okay we're gonna do it i'm really
151:08 - getting to something i need my sound
151:09 - effect
151:13 - [Music]
151:22 - what else is there unicorns and rainbows
151:29 - [Music]
151:40 - generation analysis things
151:43 - that i will use continuously over and
151:45 - over again
151:47 - first thing i need to do is yes
151:54 - [Music]
151:57 - yeah i just thought of something i'm not
151:58 - going to do it now
152:00 - but i could make a uniform from p5 that
152:04 - is the volume of the audio
152:06 - and make this sound responsive
152:09 - right i mean i'm not gonna do that now
152:11 - but uh you should definitely do that
152:14 - okay uh goodbye everybody
152:17 - kittens and kittens kittens and kittens
152:19 - and kittens and kittens kittens the
152:20 - kittens and kittens and kittens kittens
152:22 - and kittens
152:25 - [Music]
152:33 - see you all later
152:39 - you

Cleaned transcript:

do so do do test one two i should probably come up with something else to say besides test one two just checking out my new mic setup it's a different lav mic i'm wondering if you can hear me the balance with the audio music that is it's very echoey i do have these sound blankets i have sound foam i just have yet to really put them up here all right muting myself i'm gonna follow the chat and see how my audio was thank you very much do do do do so so do hello happy monday monday is that a song if not it should be one welcome to the coding train i was hearing static there towards the end playing music and i'm wondering if you hear static with my voice or is it just yeah you hear that static very loud you know we don't really need music i like to have my little sound board with the effects and the tracks and it helps keep me going here in my live streaming thing that i'm doing uh you know i can't believe i'm even here live with you in the fact that like while that music was played really like hooking up wires and putting things together the static is a music only says max all right so we'll worry about that later i can only assume it's something uh with these little cables and i could like unplug them and plug them back in and move things around oh that's going to make some crazy static and like just move this here and take this and go underneath and this is what you uh this is this is why you're here right to watch me move some cables around and unplug and plug things back in oh boy that is some loud static and here we go the static is gone and uh ruby webb dev yes this is really live i am coming to you live from the hudson valley of new york it is sunny outside gloria is my my dog if i start talking about gloria that's because she's my dog is sitting in the sun and the grass over there i'm in a garage my new setup i think every time i live stream we get it a little bit better so um welcome if this is your first time these live streams tend to be incredibly disorganized some might say kind of useless yet um there are some people who choose to watch them anyway i'm not sure why but in theory if i could ever get my act together i would be programming some interesting illuminating code examples that would inspire you to go off and make your own uh projects to express yourself creatively through code that's the idea here now i have been doing this for quite a long time it so it seems um it's that's what i seem to be talking about often given that it was recently the processing processing the processing's 20th anniversary uh that software the processing dev software is where everything kind of began for me i started to program a couple years before i discovered processing and i was working mostly in macromedia director with the lingo programming language i won't tell that whole story again but it's been a while at all of this time all of this time i have not really ever dabbled in shaders and i had the wonderful incredible uh sorry i'm looking over here uh is it monday there oh oh this is there is it monday in india i would think it is 9 p.m okay now hold on a second i am completely unprepared i have nothing up on my screen uh who's using this it's me um i am going to go to curia oh just talk amongst yourself for a second i really should have been prepared yes i think this is it ah all right actually before i go to tell you about this amazing thing that i got to participate in like two days ago where i tried to code some shaders and i'm gonna bring that here onto the coding train i first have to thank today's sponsor brilliant do you like learning do you like interactive learning do you like watching me on video talk talk talk talk talk if you don't actually i've got another way for you to learn it's a wonderful website there's an app all sorts of courses in math science there's these daily challenges you can do i love the algorithm fundamentals course i'm working through this course called beautiful geometry and instead of watching somebody describe things to you on brilliant you get to manipulate the stuff and answer questions through interactive animations and all sorts of great stuff i'll come back i'm gonna do i'm gonna continue working through the geometry the beautiful i forget what it's called now something about beautiful geometry uh later about halfway through the stream um but if this interests you you can sign up at brilliant.org codingtrain you can sign up there for free there's a lot that you can get on brilliant for free they also of course have a premium subscription to unlock all of their courses if you go through that link you will receive a 20 off you'll receive 20 off and you also let them know that you found it through me which is you know a nice thing to do if you feel like it but you know hey now on saturday thank you brilliant on saturday are we going to be looking at shader toy talk says taser cake my goal by the way i i i should try to be a little bit more organized in my thinking and just not randomly like look over the chat and go off on a different topic i'm gonna i would like to get a sh this i have a very simple goal wait no let me let me go back i was on a train on a track and i should try not to veer off the track too much on saturday i'm gonna answer that question on saturday let's see if i press this button here i had this amazing experience of visiting a twitch stream called curiously minded with eliza and alethia i hope i said their names correctly either of you are in the chat please say hello i can go here under about and read all about their story here is alefia and eliza and if i go on to stream uh look at this look at this this was me it's still here saturday october 23rd you can't trap can you travel back in time actually if you could do that please let me know i would really like to know about that i do believe that at some point the recording will become available of this live stream um but they stream mostly on saturdays they do this wonderful thing where they have like a season i aspire to this where it like begins and it comes back at a regular time with a guest every week and then it takes a break for a while and comes back again me i'm just like i think i'm gonna make it happen today it's like i wake up in the morning i take my kids to school i frantically try to like clean up and answer some of my emails i'm like yes yes yes i kind of do it today i'm gonna do it today i press some buttons i start to unplug and plug some cables so one of these days i'm gonna get onto a schedule everything's gonna work out it's going to be great ah i can't wait oh my goodness we're all it's going to be wonderful anyway i was a guest on their stream um and um they um pretty much i i think if i'm right exclusively work with shaders and each week you know i think their next guest i think i can say because they announced it is a shader expert if you don't know shar styles as work you absolutely should um but but i was i'm like the shader beginner so i had never i mean i'm almost embarrassed to admit i've never programmed a shader before in my entire life i've helped people with their shader code because why not you're coming to me with a code question i might be able to like understand it and move things around and figure out some syntax stuff i've never actually sat down to understand and learn it on my own so um i would like to take some time today i would like to take some time today to bring over the code that i worked with on their stream and see if i can get it to run in p5.js i know p5.js has some hooks into shaders i have no idea how to do this like i'm really just going to figure this out during the stream or not figure it out during the stream which will be uh probably less interesting to watch but it's what happens sometimes as we all know when you're programming you can spend an hour not getting anything to work oh and let alone an hour a day a week so much time my advice by the way if that's happened to you just time box it give the tape stop at some i mean i'm not i'm so stubborn and i do this to a false where i can't get myself to stop but if i ever could just get myself to stop and take a break and come back later usually you can figure it out just like that uh so much clapping am i clapping um so does somebody know when the edited video of this live will be online so louis that's such a good question i'm all out of sorts these days i used to have a very specific practice of long messy live streams and certain sections would get edited into uh videos it's not happening so much these days the stream is probably just gonna exist as is but it will have um time codes in it i'm trying to get back to that and i actually have the a new streaming pc this is not that interesting uh if if you'll allow me to press a few buttons for a few minutes i might be able to record to do some editing later uh yeah so um and a methornull says i have a shader question that i think would be perfect for a stream all right i will not be able to answer it but the chat i bet you will i mean little known fact actually largely known fact i'm not really very good at this i just have a lot of energy apparently i think it's because there's a camera and i happen to be a very vain person and i can see myself in this monitor and it gives me energy that's sad it's a sad truth of it all isn't it okay anyway so thank you eliza and alethia uh i hope that um when i again can get my act back together having guests that i can have them on stream to uh talk about shaders a bit uh please check out um their work uh subs i don't know if you do you subscribe subscribe and like that's what you should be doing but um tune in to curiously minded it's wonderful and let's see so that's that's item number one uh then i got to take a break and do a brilliant challenge uh then item number two even though i'm on my third finger i count in very unique ways i mean like really this is really item number zero can you say that if you say number zero it sounds wrong if i say index zero it sounds right right ah programmers and counting um i would really like to i'm teaching sorry in my nyu course that is happening in parallel i am like a gpu parallel teaching trying to make it all work together not not not going so well these days if i'm being perfectly honest i'm trying my best um i am teaching this week about generative machine learning models we're going i'm going to with my course class be using um some pretrained gans specifically a tool called runway uh which has a lot of it has something called ml labs which lets you in the browser play around with a lot of machine learning models i've used it before i'm going to use it again on streams but um and i could open up actually runway uh um you should really uh check out if you haven't checked in recently because they are doing a lot more with ai enhanced video and in particular one of the things that i'm trying to do let's see if this works uh this is my new whiteboard shot hopefully it looks pretty good one of the things that i've been working with runway with the vast coding train team i don't have my marker is that i draw diagrams often in my videos and then jason heglund who does some animations collaborates on animations with me will take those drawings and enhance the animation and i've been we've been trying to use runway to key out i hope you can still hear me yes key out my body and put the layer of the enhanced animation behind me so there's no green screen here but runway has this ai enhanced i don't know if that's right way to say it but a rotoscoping tool essentially um and so i encourage you to check out run the thing is so i'm using runway with my students but i would like to myself have a little bit of a deeper understanding of how generative models work and be able to have my own examples of them in action even if i'm not producing the kind of results that you know style gan 8 whatever style gand number the world is on these days uh i like to be able to peel back the layers and work with the most basic version of a sort of sophisticated concept and so to me i think that is an autoencoder of which i have not ever done before i mean i have i have i think i have some like lectures with some slides about auto coders and i kind of like go through them and i like say the bullet points so you're a bit quiet uh people are telling me i'm a little bit quiet this is easily remedied um um so let me see if i can remedy it um but let me finish my thought here which is that so i you know simon was pointing out to me today you really gonna do two topics you barely even get to one so i really got to finish by like 1 p.m my time which is an hour and 40 minutes from now i mean i really should finish about 15 minutes because i have a lot of stuff to deal with and do but i'm committed to this and um so i got to keep going with it um let me see quilas does videos on shader toy that's cool all right so i'm i'm just want to hear some confirmation in the um control plus yeah yeah so i'm trying to enlarge the font in discord so i can see my uh supporter discord chat better but i i can kind of read it are we combining shaders and auto coders on the stream that's a kind of amazing idea actually but uh no although there is a relationship interestingly between shaders and machine learning algorithms particularly neural networkbased ones because both use matrix multiplication and the gpu more on that later perhaps i would like to hear from somebody in the member chat in discord if i should raise the volume of my audio it's an easy thing for me to do but i'm seeing that in the youtube chat which is you know not always the most reliable source of information yeah i appreciate you all though very very much all right let's get to can i do a shader in the web editor i don't even know all right let's let's see if i can get into codepen uh because that's where i was coding the shader oh boy shoot you're gonna have to bear with me as i log into my codepen account ah okay breaking news i've got breaking news breaking news the uh i was looking at my phone to get my password but i have a message from alethia the replay is still on twitch and will be on youtube later okay thank you for that bit of information um and uh uh louise lessel is in the chat telling me i can use in the p5 web editor hi louise i've seen all these names i recognize which i which is really fun for me maybe a monday is a good day for me to stream i usually don't stream on mondays uh i can't tell like how many people are watching this right now it's about probably about the same uh all right so wait i was trying to log into codepen so uh when i stream i don't have my like password manager kind of like stuff all going because who knows what's gonna pop up so i have to look at it on my uh cellular telephonic device so please like i said talk amongst yourselves while i try to get my code seriously that's my password if anybody wants to hack my code it's not going to be too hard um i'm going to change that password later it did not make it one i probably like five years ago at this point i upgraded to using a password manager and just over time anytime i would log into something would create a new random password and apparently never did that for codepen it has a uh not such a secure password okay um now how would i find it was shared with me yesterday i know alithea you're watching you can send me another message how do i find the coach see i don't prepare for this at all in case anyone was wondering if i secretly really do prepare to look like i did and then to say i didn't prepare no you could say i clearly do not prepare because i just thought i'd log into codepen and uh no i don't see the uh the um oh because i had the link from them well then let me switch to uh let me switch to this view here and i think i can find it probably in uh um oh i'm getting breaking news breaking news okay oh yes the pen is being sent to me this is awesome uh yes and everybody should um join let's see if this works uh discord uh that didn't work that button didn't work so somebody who's a mod if you could please post a link it's actually really easy to join discord for coding training it's discord dot gg slash coding train or the codingtrain.com discord put those links up on the screen in magic post production that's never gonna happen i don't know in the future hundreds of years from now when we were all long gone somebody will be watching this video and there'll be some way with their augmented reality helmet that's holding on to their brain to put the stuff that's just going to put the stuff that i'm saying it's going to make it happen so someday that'll happen um okay hold on sent a link okay wait okay i can get it through twitter which you can't see right now so hold on everybody i think i'm logged in to twitter which i am i'm going into my messages i see a uh gif of shaquille o'neal doing this at me you know there's a green screen version of this that i could just oh how come it's not working it's my oh no is my uh why is that not working i mean i don't really care but i was just gonna give you all the green screen version of this okay uh i don't know why my buttons on my stream deck aren't working can i please pay attention shift men okay like focus focus okay i am now okay prepare to be hypnotized wowed and hypnotized i'm going to if my buttons still work over here show you the shader yes okay so this is the shader that i ended up making i mean i say me it was in collaboration i mean i think anything that like looks wonky and weird from the shader is my addition uh to uh eliza and alethia's amazing work so i think what i would like to sort of see is if i can first just copy paste this code and see the same result in p5.js then i will double backwards and try to explain the things that i learned about shaders in a very basic way and i mean um i have dreams of doing one of my more sort of it's not really scripted isn't the right word but sequenced hopefully somewhat coherent edited uh basic video tutorials on shaders i don't i don't know that i'm the right person to do that in terms of i mean i'm certainly not in terms of any expertise but maybe there's some value that i could add of kind of like talking through my journey learning shaders i should also mention i think that you can't talk about a creative coding with shaders without mentioning the book of shaders.com i mean just the book of shaders um by patricio gonzalez vivo and jen low and uh i think oh yeah so this the ripples is the thing that i was planning a future live stream uh that has like a water theme and i was going to try to do ripples which i've done as a coding challenge but try to do that in a shader i also want to do these like i want to do all the things okay but hold on uh i'm at codepen so let me just go to the p5 by the way this is what i did on last live stream i'm just really proud of this it's a slide puzzle should i try to solve it now it's like the choo choo bot uh in p5 so watch back that stream if you want to see me code a slide puzzle let me uh close that out how are we on time 11 30. great noon i turn into a um sponsorship pumpkin and then i'm gonna move on to autocoder so i've got about a half an hour now if i'm going to try to keep on schedule uh thank you again uh curiously minded check that out reference code pen here we are book of shaders okay so let's go to uh the p5 website i'm sure some of you know and could just relay this in the chat um um i'm just looking and uh oh freya has videos on shaders ah oh interesting um so freya holmer they make wonderful wonderful wonderful youtube videos in particular the bezier i made a bezier curve video at the same time mine was not as good but it was in my own way freyjas is totally amazing so and hopefully they both complement each other um but freya i'm now being told has videos on shader so maybe i'll check those out um let's go to um where would i look here um search shader there must be like a p shader or p5 shader oh reference shader okay load shader so my under my understanding by the way is there's multiple kinds of shaders so we see this dot frag whenever i say my understanding that's my caveat of like i don't really know this stuff but i learned it a little bit from eliza and alethia and i i wanted to say that i've been like exploring it more since then but this is literally like you know that stream ended i was doing stuff all weekend and i turned stuff on today um so there's a fragment shaders fragment shaders are a kind of shader well like if you think about that a shader is going to be applied to a piece of geometry like a flat plane in the simplest sense a fragment shader is an operation to do in parallel on all the pixels of that plane and a vertex shader allows you to manipulate the geometry of that plane so i want to just do a fragment shader can i only do a fragment shader in p5 we'll find out now first of all the other thing i want to say is so let's say i want to do a fragment shader can i do create file shiftmen dot frag what are they called here a shader i guess i could just call it shader gradient i'll call it shiffman shiftman. oh it is look at this valid extensions dot frag yes p5 web editor thank you um okay so uh dot frag now the question is if i am now in sketch.js and i want to load a shader so let's say uh shh schiffer chaffer i'm trying to be clever my name i don't know what to call it i don't have any idea let's call it um beginner starter basic basic shader basic shader equals load loadshader shiffman.frag and i probably i assume i have to use webgl oh and it probably makes sense for me to also use preload although i'm sure there's a way that you could load the shader asynchronously so let's put it in preload you're all seeing what i'm doing right so oh why why why okay uh look at this the auto name for this particular sketch is longing scream i'm being told that there's a distracting dot in the middle of the screen i don't particularly see that but somebody let me know if that's something that i need to deal with okay let's just see if i get any error running this okay uh looks like load shader was expecting two arguments so it appears that maybe it requires both a vertex shader and a fragment shader did is that was that part of what we did here html js ah oh um um all right so i need to follow by the way i remember i'm getting like messages from everywhere floping or flowpine does amazing stuff with shaders on twitch also and i saw flo pine in the chat on saturday uh it's much more visible on a sorry that this oh i know you guys can't see this at all apologies apologies i know you all cannot see this um yes there is a vertex shader maybe here too so let's let's let's do this let's make a new file and call it hey um shiffman.vert and so now if uh and this is great i have i have elephant chat here giving me feeding me information oh why do i write shifting.netfin.virg okay um see if i can get this going here sorry everybody i'm i'm trying to figure this out now so if i go back to codepen there is a fragment oh this is the vertex shader so this i didn't notice this this is the vertex shader so this must be sort of like boilerplate vertex shader of like this is just a what what is position though is that like a builtin variable well let's just copy it in and is that somewhere um that i don't see but um let's go to here so let's go i can't finish the sentence can i autofor this i'm i'm sorry but you're all gonna have to bear with me as i manually write some in so this must be i'm guessing a basic simple vertex shader i'm trying to unpack what this means my understanding the vertex shader has to do with the geometry so this must just mean but what is position it chat is going um so there we go now let's see if i can run this all right no errors that's a good sign uh shader orange blue got it so i i maybe i display the shader in setup yeah you can you display the shader by calling shader i guess it's like mapping it onto so if i go here and do shader do myself in draw do i really need to do this and draw like well we're going to find out basic shader so the idea is uh and let me let me put a line break here it's not going to let me do it but i'll do it manually so the idea is i have two files a vertex shader which i am not going to explore probably today given that i'm going to do this for the next 20 minutes i should really just plan to do shaders the whole time maybe we should put off the auto encoders position is the current vertex builtin variable got it thank you so uh got it okay that makes sense but again one of the things that i'm having a lot of trouble with is my whole world the foundation of my entire world is basically built on top of two nested for loops and with a fragment shader i'm essentially writing the code for one pixel and instead of iterating through all the pixels that code essentially happens like all at once for all the pixels in parallel you know i'm not sure if the metaphor is exactly right there um but there are a lot of coding train topics that could be remade in shaders yeah so um yeah and what is the fourth dimension in this is also another interesting question if position if this is a 4d vector if position is in xyz what is one is that like the normal or something all right i'll wait for the chat or somebody to tell me ah triangles triangles triangles that make a plane everything is triangle so i'm not really making a plane it's two triangles which make a plane maybe okay so now i guess well let's just see i want to start over but i'm going to let's just copy paste this into here and then if this works then i'll start over okay yikes an error occurred compiling the vertex shader position undeclared identifier this will definitely fix it no precision the fragment shader okay hold on oh i forgot i missed part of the i missed part of the shader it looks like at the top oh my god i missed a lot of the shader got to go up to here uh go to fragment and here uh uv ray definition all right let's see all right what what what do i have missing here okay let's see here was position i know this is tiny font no find me position search i don't know how to use there's another position right there how do i use codepen search uh is it in the javascript somewhere that wouldn't really make any sense 40 is converted to 3d by dividing the xyz component by the last component so that's like a normalization i have to pass position from p5 to glsl so that must be what's happening here let's look at this basic example is that happening in here set uniform no set uniform doesn't appear to be happening here let's say what now okay ooh look at this look at this fancy shader um i'm looking in the chat i don't see anything yet all right so i have to figure this out myself uh back to what i had position is an undeclared identifier um so p5 a simple shader example basic shader examples this is different okay assets basic vert so where with these examples are they in the web editor let's see oh here let's look at this haha whoops louise was in the chat who worked on this project of course with casey at itp i remember this project uh setting up shaders in p5 shader.vert shader.frag okay uh no strokes or shaders borderless let me make this bigger so you all can see it okay here's the example in the editor so this works we know shaders work and what is in the basic vertex shader oh do i need this attribute so i need to have an attribute position and then probably um somewhere in this code is that attribute being set well let's see okay uv redefinition well maybe i made a mistake here uv i might have copy pasted this in a weird way so first of all i would actually really like to just simplify this for a second i can always come back to it so much for me saying i was going to just get this running all right let's see here uv why is that being redefined right let's take a look at this example and let's look at the basic fragment shader yes so the i'm being told through my side channel here of information is that um um in 3js auto um it is get the position is given by 3js and i'm using p5 instead yeah so look at this um i wonder if i'm just not allowed to use uv as my variable name because in this example it's not using uv so if i were to change this to in my fragment shader uh st and i think i would like to go back to oh hello hello i had multiple lines of code multiple times always something much simpler i actually would just like to use this i'm not going to resize the window right now so let's start with this as like a simpler beginning which i think i might be equipped to explain okay all right no errors hey welcome to coding with me dan shiffman where i spent 45 minutes just getting something to run that renders nothing with no errors cheers okay deep breath everybody deep breath what are we doing the idea of a fragment shader the way that i understand it and hopefully people in the chat will be correcting me um is that i want to look at all of these coordinates these x y coordinates well they can't in this canvas all at once so this little main function is pulling up the uv coordinate which is the x y of the fragment shader divided by the resolution because u v ah the uv has to be normalized between zero and one so x y i i'm assuming is like the literal pixel 100 comma 100 the resolution is 400 comma 400. so uv is 0.25.25 i think that must be what it is so the idea and then um i i have that uv and i'm just going to go over to this one because i think yeah i can just set up well i actually don't even need this i'm going to take out this line of code for a second so this main function and um i think oh yeah the unif the resolution is coming in through uniform so take that out for a second okay we're gonna go slower slower i'm going to comment some things out though like pretend it bothers me i got to take them out all right what i'm going to do here with the most basic simple simple list shader i possibly could is just set a hardcoded color gl frag color equals vect4 so a color is a fourdimensional vector that makes it sound very fancy but it just means there's four numbers a red a green a blue and an alpha and i should put the outer refresh on all right so let's see here load shader let's make this black just so okay so i think i'm still missing like in my my i think i'm still missing something about setting the position because in theory now this should give me a nice um pink color red and blue across all the pixels this is like the code for one pixel but it's applied in parallel to all of them um so i'm just sorry this chat i'm looking over here this will run for every vertex of the geometry and that's what position means yes that's what the vertex shader is for can manipulate the vertices i'm reading this from simon so um so i need to figure out how do i set the position attribute see this is good this is my process and then someday i'll make some tutorials about shadows will appear that i know what i'm talking about you can all refer back to this video to know that i really don't um so how do i get this attribute position so it's in this example so let me look position 4 yeah x y so somehow gl position equals yeah somehow this a position attribute is set somewhere index.html no sketch.js set uniform i don't see it anywhere where is it do i need oh i need to draw some geometry otherwise there's nothing to apply it to maybe that's the issue i mean i still think i have the other issue because the shader is being applied to the geometry that comes next hmm okay what else am i missing i could probably just read the tutorial and it will explain it it's built in oh am i so what am i missing here luis is saying it's built in sorry louise is saying it's built in um so shiffman frag i feel like what's wrong with this shiftman vert so what am i missing index i don't need the sound library let's just play it again sam i will need to draw something that to you cannot change its name and the attribute is read so it's so i'm i'm missing a very important crucial piece here which is that this is built in and the name for attributes have to start there we go i see something amazing okay wait now interestingly this rectangle is drawn so i need to think about i think there's something to do here with the orientation so in other words what just happened i just drew um i created a shader this is my diagram of a shader makes no sense i created a shader and then i drew it a rectangle but the rectangle i drew it at 0 0 oh because uh of course of course so i'm in opengl of webgl mode in p5 which means that 0 0 is in the center and y points up so i suppose i don't know what the proper way to do this i could start to adjust that position in itself in the shader or i could just adjust it in in p5 let's do um let me go back to here let's do the following um i'm going to say rect mode center and then oh but is the shader actually manipulating the position of this rectangle let's take this out for a second right that gives me that rectangle if i take out wrecked mode center oh and it's oh the shader is really manipulating the view of the scene uh i by the way tasercake just made the nicest comment anybody has a compliment anybody has ever made of me which says nice nonreflective whiteboard although maybe that was made in jest with irony because i've been trying really really hard to get the whiteboard to look right without reflections okay so um so again i think the proper thing for me to do here is to manipulate the geometry with the vertex shader and if i go to my cheat sheet here i'm guessing that's what this is doing taking the position multiplying it by two subtracting one which basically uh makes it i don't know what the multiplying by two does but let's let's let's try these bit by bit so if um if i go back to my shader and i say um vec4 position 4 equals this and then we say position 4 minus minus equals 1. can i do that uh minus equals zero comma uh one oh with four one zero zero zero zero yeah okay so i slid it over so let's do plus equals negative one and then y should go plus one oh oh because it's going the wrong way minus one yeah it's down there oh that's why i have to multiply it by two oh it doesn't like that position four okay oh 2.0 i by the way the best thing about shaders ever is this this stop this dots i can't remember to put the dot with the shaders either um okay hold on so what happens if i just multiply it by 2 and then minus equals there we go ah wait how did multiplying it by two oh yeah all right i'm still confused how this works but it's clearly it's correct now uh the screen coordinates range from negative one to one aha thank you juha he 64. i got it now so um if i come back over here this makes total sense now shaky white board okay this is the world of shaders negative one to one negative one oh no no it would be negative one to positive one right this is along the xaxis this is along the yaxis i don't know why i drew that in kind of a weird way so what i had was a rectangle that is here because i drew it at 0 0 i guess kind of up and to the right so if i subtract one ah subtracting one puts it to everything puts it in the center because maybe its width is like just one and then multiplying it by two expands it out so that's taking the sort of like rectangle from processing some geometry and applying this shader for the vertex shader which manipulates the geometry so that it's centered and larger and then the fragment shader does this like of all the pixels all at once this is what eliza i can't remember i have to find this video eliza explained to me that a shader the way that it operates in parallel is like i could draw like a circle like this one point at a time that would be a for loop or can you see that yes you can or if i had some kind of magic stamp i could just stamp all of those points all at once that's like what a shader does okay now um let me come back over here and read the chat um it's remapping zero to one to negative one to one yes um okay great um uh oh and nicole yes nicole vela is here and says i i remember you from the curiously minded stream who said it's like a sheet of transparency paper so i haven't gotten to that part yet i'm gonna have to come back i'm going to be wrapping up the shaders portion of the stream momentarily uh so but i'm this is i'm just dipping my toe in here well i did i put my foot full foot in on saturday now i'm coming back because i had other people helping me with my foot that sounds very weird go back and erase that but now i'm dipping in my toe um by myself so okay so now the thing is this fragment shader is just setting the color of every pixel now what if i wanted to do a random number random value like i think i could just get some like a random beautiful i don't know whoa what is this this could be a random pseudo okay i should probably you know do this a little bit more thoughtfully welcome to copying pasting code with daniel shiffman um if i were to grab this random function i saw this dot product sine function i don't know what this function frac does i'm gonna have to look that up can i get a this is a vec2 or i give it a vector i have to give it a vector co that's weird why would i do that okay well i just oh because i could give it its uv i don't want to have to give it its uv i just want random oh but i it's a i would have to do a four ah oh my brain does not compute shaders [Laughter] yes that is the way to do random in shaders it's just a super annoying okay i guess i was trying to avoid getting the uv but we need the uv and what do i mean by the uv basically in my little metaphor here of i have this stamp i want each one of the like little spots on the stamp that's rendering this all at once to know where it is where it is in the stamp so right now the little little pink brushes that are in the stance i never got to build a whole physical device here i'm trying to also avoid using the word gun because i think it's like a paint gun or something i'm like um but the stamp um all the little spots they need to know where they are so that they can render different colors at different spots right now they don't know where they are they just all know render pink so the way that i get their color at every spot is by making a vec2 called uv and if i take can i get the position here a position dot xy divided by oh and i got to get the the um so let's see how they do it in theirs i uh you you resolution oh gl frag coordinate oh yeah it's not from the uh it's not the position it's the okay so this is built in gl frag coordinate so in theory i might be able to just use that right because you know i could make up something like what happens if i do just this is that not right uv.x yeah no that's right um is it like too big oh i probably spelled that wrong yes i underscore underscore ah okay so these numbers are probably just take this out for a second right it's all right so i'm getting the x i could do something like you know divide it by 400. oh there see i know what's going on is it 200 though like the full range no oh 800 yeah you know i think that pixels even though this is like 400 by 400 i think there's something going on with my high definition display what i'm trying to show you is that the um and i think this would be well it's fine um let me just do it this way so it looks more clear so by the way in in shaders you can make a four dimensional vector or any vector with one value without having to pass it multiple times so here i'm basically just taking the x position of every x position of every one of these pixels dividing it by the width so it's normalized between 0 and 1. but i don't want to have 800 hardcoded in here so i should be able to get something from the p5 sketch and i apologize for just thank you to louise and casey who i believe wrote this example hopefully i'm right about this that i'm repurposing it what i need to do is get the resolution information from p5 and properties values variables that come from your sort of main code at least are the p5 sketch so i want to make this interactive with the mouse that's kind of a something i could do those come in via something called a uniform so if i create this uniform called u resolution whoops and i put it in this random i can come i put it in here and then in p5 in the p5 sketch itself you can call set uniform so would i do that does that happen in draw happens in draw so in draw i'm going to do this with mouse x before i go basic shader set uniform and i guess because it's a vector i give it an array so width and height so this is me and um can i if i move this over you can still basically see the code but i have more room okay so the idea here is i'm saying hey you shader you've got a variably thingy like thing in you called u resolution set it to a vector with width and height that way if i go back to here i can say the uv is the frag is the xy coordinate divided by the u resolution x y is that right do i say x y there or just u resolution yeah this says dot x y so that makes sense why why do i need that dot x y like i sort of understood this to be like an object that has an x y in it but u resolution is the vector itself but i guess not i guess getting both out as one as one is the x y well anyway let's see if this works okay that worked now once again i've got this weird issue where i think the resolution i'm getting is 400 but because i'm on a high definition a retina display basically like the amount of pixels of the rectangle is actually double so this is a little wonky um thing i think if i just did like this here i believe that's correct i mean i can't be certain but i believe the full white is here and the gray is in the middle i mean i kind of liked how it looked but let's just go back now if i were to change this to the color being set not by the x but by the y then we have it going from bottom to top you could leave it without the x y it's probably just for explicitness so let's see if that's true and what about the um this so not this though so i guess this is just kind of like for clarity uh it looks very like parallel okay x y x oh paulo in the chat amazing so dot x y gives you a vector so the frac hornet could potentially have like you know i could make a vec4 with these four values or something so it's making a vect two out of what is just a vector so i i need a vector out of the frag coordinate so so yeah so this is good i can see that i'm working with evec2 because i say dot x y i should just admit that the auto let's put up a little poll not that i ever follow the pole but um after because i got to take a break i'm putting up a little poll should be in the youtube chat now it should say after the i'm going to take like a five minute break uh might be a little bit longer because i'm going to do this i'm going to continue the um beautiful geometry course on brilliant um and i i'm after i come back i'm just sort of seeing the pull if i should um continue with shaders or sort of getting taking the temperature of the audience here all right let me keep going here by the way i should really work on learning with shaders the processing too all right so i'm getting somewhere now i believe there's a distance function if i'm right so that would just be a float can i get the distance between can i make a vec 2 that's like center would it be 0 0 and then get a distance or is it length between center and uv and then have the frag color be that distance yeah oh okay 0 0 is the bottom oh because is this my 800 no is it 0.5.5 is that how i've done things and then if i said uh d you know the brightness is one minus the distance oh there we go okay so now what i'm doing is there's a dis is it dist or distance there's a distance function so i made the center a point considering a point in the center and i am sorry i'm thinking here i'm considering a point in the center and then i'm looking at the distance between every pixel and that point and uh if it's closer and then take it saying one minus that so the distance mass between zero and one uh one minus that will be brightest towards the center so my goal here with all that i have now learned and the um the poll looks pretty there's 117 votes strong winning for continuing with shaders so um that's probably what i'll do i'll have to just take out auto coders from the title um if i go back so i'm going to try to just get the mouse working i'm going to take a like a five to ten minute break and then come back and do a bit more shaders just so everybody's clear on the plan um i what am i doing here so i i think i can do this without referring to the example code now so what i would like to do is basic shader set uniform u mouse and call this say mouse x mouse y so this is me taking the mouse coordinate from p5 and sending it to a variable that i'm going to call you mouse in the shader is it proper to say variable if we're talking about a uniform can i call it a variable um so now if i go into the fragment shader and i add another uniform back to you mouse um and if i take can i just do this can i do you you underscore mouse dot x y that this should be the same thing right so if i take the mouse and divide it by the resolution oh whoa okay so my uh things are reversed here so and this is always the interesting question for me like where should i manipulate this like should i manipulate it in so the x oh weird and can i console log stuff in the shader is there a way for me to do like print that's not going to work right i mean how's it going to possibly do that use program parameter one i don't know okay um so what am i doing here so this makes sense to me that this would be reversed and the scale is off what if i were to just say see this i think i should do this pixel density one let's take out the variable of the high density display there we go so now we can see it's just the y okay so the high density display was hurting my brain but now we can just see the y is reversed so i guess i could do like i could do height minus y and now i've got it right as i move the question i think is interesting is like what is the what is the proper way to handle this should i be flipping it in p5 or should i be flipping it in the shader look how fast that is we should compare this to like like here's the thing no way i could do this for loop with like 800 by 800 pixels like okay oh we gotta we've got to demonstrate this so very very quickly let's make and then i'm gonna take i swear i'm gonna take a break um uh so i don't know why i deleted that um i'm gonna just say um load pixels so i'm doing this uh without shaders now here is the comparison for loop way uh this is my whole world this oh i'm so happy and comfortable oh it all makes sense to me now i can can write the code in the order that i want it to happen and it will happen and then i'm gonna then i'm gonna have an index which is x plus y times width then i'm gonna say pixels index uh oh then i need a distance a distance which is the distance between this x and y and the center which is width divided by no no yeah no the mouse mouse x mouse y and i can say the um then i can basically map it map the distance which goes between zero and i'm just gonna use the side as the i mean this is not exactly right 255 down to zero and then we're going to say oh float back and forth this hard okay and then i'm going to say um pixels index index plus zero equals bright so i have numerous videos going through how the pixel away works works in processing in p5 this should be 255 for no alpha um once we're seeing again a like a vec4 right but i'm setting each of the pixels individually oh and that index has to be multiplied by four um you know for um let me just look pixel array in p5 um yeah so this video from 2016 is a video where i go through how the pixel array works in p5.js probably doing something very similar to this um and i believe if i were to run this uh okay pixel density wait a one again i've got the sort of pixel density okay look even at 400 by 400 look how choppy that is and i should do the maximum distance it would be more probably um the max distance is i don't know if max is still in the chat but this this this this variable max distance max d is dedicated to you max is the distance between zero zero and width comma height let's just say that it's not exactly accurate but let's do the why did that not work oh it's dissed in processing oh you know what i actually want it to be this is so dumb but i want it to look like the the um the sketch so i wonder if i just make it like width times width if that's going to look more like no oh because do i not have the i'm so confused if it's zero it should be really bright x y mouse x mouse y what am i what what's going on here i wanna see it now i'm getting stuck on like a silly thing oh oh this is this looks the same i think i was right square root all right i mean i can just do distance between zero zero i mean this would be the correct this is actually the no no no because it could be in the corner sorry everybody for this like silly digression programming is hard okay so look at this i'm trying to do the same thing with an 800 by 800 canvas without a shader and i lost the chat because i'm looking at this um it should be just with everybody's telling me fine fine fine that would be the same okay it's so quiet all of a sudden okay yes this looks like look look how impossibly slow this is now i'm going to hit stop oh that is the most beautiful thing wow okay never before have i really like has my mind really settled on the wonderful power of shaders because i've always kind of basically said uh in my head or to people if you want to work with pixels in the browser in canvas it's just really really slow to iterate through all the pixels can't really do it effectively but this is a way of doing it now there's a lot more mental overhead here of understanding all of these bits and pieces and how the math works like i'm making a lot of assumptions of you the viewer right now that this idea of manipulating vectors is totally like you know automatic intuitive for you which is no way that it would be this is a nice alignment with my nature of code materials where we look at i look at through those tutorials 2d vectors and how to do vector math like add subtract normalize distance all that stuff but what's interesting about shaders here is in p5 or in processing when working with a p vector or p5 vector object you can't use the plus minus operators with them it doesn't know how to do that with vectors but here in a shader you actually can't so i can multiply a vector by two scaling it or i can subtract the number the value of one from each one of its components um okay so everyone the green screen is not keyed at the edge where where is the green screen not key joe just down over here oh over here it's the desk there's even a little dongle here if i wanted to plug it into something and a train whistle see there's a desk here there's a mug here and i could lower it a little bit does that make everybody feel better i don't like you seeing this secret sound board all right so um the voting is clear here um x nick is giving me an idea multiply the distance by sign angle taking the end so i'm i'm going to do more work i'm going to have some fun with this particular shader um oh no i closed that um and i wonder if i could even um i'm sorry don't talk to me um all right so hold on where am i going all right so i gotta take a short break don't go anywhere though i'm coming back with a lot more about shaders but before i go um i just want to take a minute to thank today's sponsor oh you know where it's not keyed up there what is that oh it's a light there's a light here so i don't know why i guess i could turn it slightly there that's what you're all talking about the right edge yes okay got it everybody knows how how smooth i am at these like sponsored segments i'm so good at them i'm never gonna get fired um i'm here today to thank today's sponsor uh brilliant uh do you like learning do you like interactivity brilliant is uh the place for you all the kinds of topics programming algorithms geometry graphics fractals neural networks science physics all of this stuff is just everywhere on brilliant through a series of amazing courses all with interactivity so it's a little bit small here but this is one of my favorite courses called algorithm fundamentals where you can sort of learn about this like you can see here this is a lesson about a fruit classifying algorithm and you're manipulating sort of code logic pseudo code by through an exercise by moving these blocks around kind of reminiscent of scratch or some of these other blockbased programming languages um this is a wonderful um they also have an entire python programming course um one of these days when i have a totally like like a week free nothing else to do i cannot wait to go through this entire python programming course i am going to while that is playing open up the brilliant website on my laptop here and come back over to show you it myself so you can see there are um daily challenges um if i just clicked on uh courses i think scanning through um you can see the you know the huge variety of stuff i mean it's everything that i love um and honestly like when i can get back to doing more coding challenges there's so many excellent ideas of things that i could try to do here and in fact what i have been doing is taking you know obviously like when you're working through these problems there's and we can just go to it was i think beautiful geometry is the one that i'm on so i want to continue this course um i already did this one um okay i did these already i did this one i did this one i did this one okay here we are i have not done this one so um there's lots of ways to solve these problems i have a white board i have my brain i have my audience on youtube to help me understand them but one of the things that i really like to do is turn these problems into a p5.js sketch as a way of solving it now um so interestingly enough um i think there's going to be something just just scanning at this i think there's going to be something pretty different about this problem than some of the previous ones like in one of my previous uh live streams i went through this one to arrive at the answer fourfifths uh in terms of the ratio of um orange to orange to the total area of the circle but here i think just just like off the top of my head there's something pretty i mean i don't maybe i don't want to say too much what i'm gonna do is put up a poll and give you all of these choices so let me put up a poll um oh i got to end this poll first so i'm putting up a poll come on youtube um so uh infinite this is like phone a friend here we have 7 8 is one answer 8 9 is another answer 9 10 is another answer 11 12 is another answer oh no it only lets me have four okay i gotta eliminate one i'm going to eliminate nine tenths i'm pretty confident it's not nine tenths should i eliminate eight ninths that only gives me four options oh youtube giving i might be giving away the answer here by my elimination i also might be wrong but i think i have an idea what the sort of trick is okay so i did the poll go up i don't see it oh there it is so i don't see anyone answering it yet but i'm sure you will soon okay so let's work through this the limit i i would love by the way it'd be so awesome we could make this into a shader but i'm not ready for that i'm not ready for fractal shaders oh um xdja is asking for a link to the um shader sketch so i i will happily take like a quick break i somebody can hopefully just like snapshot this and a mod can copy paste in the chat i will come and do that in a second um let me go back to here okay so i want to start a new sketch and let's read over this algorithm start with a blue square then make two red squares each half the length of the original square arrange them diagonally so this is a problem that should be able to be solved by recursion i'm going to write a function called draw square and when you get an x y and a width and a height i guess i guess we know it's a square so an x y and i'll just use w for width we're going to fill a color maybe i should um i should use like a boolean like is red let's try that so if is oh my god a bird is in here again okay it flew out i'm in a garage with the garage door open and a bird just flew in okay is red phil a rectangle at x y or width and i can actually just use the p5 square function so now in draw and i'm going to put no loop what i would like to do is say draw square 0 0 400 true let's run this sketch okay now i'm sorry that um i'm covering up some of the code so now the idea of recursion is that um the idea of recursion i'm looking at the i'm looking at the voting um which is interesting i think people are thinking the same lines as i did the idea of recursion is this function that drew this large red square can now draw two smaller blue squares inside of itself so i want to call and i'm going to uncheck the auto refresh just because this is going to create an infinite loop with without an exit condition i'm going to say draw a square at x y if i look at this picture it's this square oh blue can i make the first one blue oh no it has to be red because the blue is the one that gets smaller and smaller weird oh no oh i'm so confused yeah no with each no i can do it the any way i want oh it's fine i can handle this the oh i start with a blue square awesome even better if is red else so much easier else um fill uh 0 0 255. so for blue what's wrong here oh yeah and then now draw so let's just make sure this is blue what do i have wrong here oh an extra okay okay great now what i want to do is say draw a square draw the next square at x plus i think there might be a flaw with this but let's just write width divided by 2 the same y and then um with half the width and then not is red so this i'm just saying the next square be the opposite color because true becomes false or false becomes true and i'm going to do this with if i think w is greater than uh let's just say like 20 pixels so i think this is the this is a reasonable exit condition given that we're going to do this keep doing this until the half of the half of the half of the half gets less than 20 and then we're done so let's see what happens if i run this right so this i don't know if i did this correctly but we can see blue square red square blue square red square now i also need to do what the one below which should be at x but y plus w divided by 2. so that's just moving it down same size change there oh okay did i do this right it looks a little different than this oh i only do it if it's if it's red wait two red squares then add four red squares oh i'm so confused what am i missing here i only do i don't do that thing for any square that is blue oh i'm so confused wait how did the oh i started with blue oh no no i'm not doing it over anymore because i started with blue okay hold on this is still going to have that problem but x y w divided by 2 that's the and then x plus w divided by 2. okay this is okay this is helping me see this but i do it only for the blue squares oh so i need to do if i'm only doing it for the blue squares i need to like for example only if w and not is red so i guess i need to draw four blue squares to start alternating the corners for the shading yeah like because then when i do it oh then when i do oh my goodness oh i see so i need to keep track of a count oh this is much harder than i thought this is ash is saying this is the same problem as adding an infinite sum by the way the answer is one i was trying to but this is much harder to program if you draw only one starting blue square and then only paint red squares on top of that one blue square yeah why don't i start with red and then i'm getting some kind of delivery by the way i don't know what that is but i'll just go back and get it i'm still talking about shaders not just the last squares is blue you're adding uh you start with blue then add red then oh yes so i can only add red so i could do this in an object oriented way which is take the square and chop it up into four i think actually what makes sense this is a little bit weird what if i did this i know this is kind of it's weird but what if i then when i started with blue all right started with blue and then what if i did over there and then over here ah there we go no no that's not right that's kind of interesting though this is the same i want to get the same result though with this this is the same result but it's just um i think it's like spaced out differently like the blue is in a different place right isn't this the same it's like the same but i didn't i'm not alternating the way i'm drawing so like these should be um so if i had like a count could i create a count i think i have an idea what if i created a count and then count i think i might be this might be a redundant variable uh count and then i'm going to just say count plus one count plus one count plus one count plus one and then oh and then i'm going to say if if count modulus 2 if it's i want to know if it's odd or even let's just flip is red one more time just for the even ones or maybe just for the odd ones there we go i did it so uh simon i think said it's the it's the alternating right so oh this is really cool it's the alternating like it's like look at this this is what i was missing um and i'm sure there's a more efficient way to do this and i don't need the boolean and the it's red but okay so red red goes goes top left bottom right then the next time there's a blue circle it goes top right bottom left then the next time there's a blue circle goes the other way around so i just need to count whoops count through and i should say no stroke i would love to draw this with a can i use a generator function to animate this assignment um no what do i want to say no stroke and let's have i can put on auto refresh now because i'm pretty confident i don't have an infinite loop and then where is my if i say w is 50 oh you know really it's nice having the stroke in there um so let's have the stroke but um well what could i do um hold on i have an idea uh i want to just see this iterate so i'm going to i'm going to use count i'm going to use count as my exit condition so i'm going to say if count if count is less than two right if count is less than three there we go and i'm going to put the stroke back because it was actually nice to see that i'll just make stroke weight 0.5 just so it's a little thinner i'm going to take out the no loop and then i'm going to say let iteration equal zero and if count is less than iteration so now we have just the blue square and if i add a mouse pressed and say iteration plus plus okay ready here we go oh i've got probably to run again so now this should do iteration one iteration two iteration three iteration four five six seven eight and i would love to make this much bigger let's pick some like nice slightly nicer colors coding train no there's a coding drain colors website i don't know why it's not coming up what is it cj made it colors coding train cj coding garden i don't know is this gonna work no no no how come i don't have this like coming up automatically in my uh um coming up automatically in my feed let's see uh ah somebody must know where the coding train colors are you can use double is red as a count and then use module to determine if blue or not yes so i'm going to leave that as an exercise to the viewer i want somebody to like feed me the oh when i move my arms there's a highpitched noise just this arm i think i think i'm having some interference with this lav mic i had this problem before i switched lav mics now i switched back um hopefully it's okay i just want to finish this off with the coding trade colors where is that website okay maybe it's on um it's in the github issues here parts colors no clothes we're about closed color color no is it in this is like so silly that i'm like stuck on this i like how i said i was gonna come back after the break and do more shaders i haven't even taken the break yet uh colors i can't believe that no one in the chat has found this before me um i need a does this get there oh the discord bot i got there just the codingtrain.com colors okay thank god okay blue um is this is our blue and red this is our red this is definitely the most important thing that i'm going to do today is make sure that the colors are branded properly this is our red that's lovely and then i think i could use like maybe the yellow for the stroke um yellow for the stroke and where's that ah stroke okay and let's do um oh i should do well let's just do 800 by 800 and we will now i there was a question here i was oh okay wait uh with okay here we go everybody oh it's so lovely so there we go we can see this beautiful fractal sketch nicole says i feel ignored maybe you've been saying all these wonderful things in the chat and i've totally missed them i'm sorry can you invert the red and the blue i absolutely could if i could figure out how to zoom back out i think that's a nice idea um oh my goodness i and we're gonna run this again inverting the two okay so um wonderfully beautiful uh little exploration here now now that i have made this pattern one could i make this with shaders and then oh you know would be cool it's like zoom into it and then have it like infinitely repeating someday someday uh now oops now let's return to the question so the the the look to the thing to me here is this looks unlike the previous questions this looks much more like an infinite series where the that size of the blue in this case it's not inverted the blue square is approaching zero so uh the the um essentially the it's the same as like an infinite series what was it that's like one plus one half plus like this is one plus one half plus one quarter something like that right plus one eighth it's going to go to infinity in which case the area should be 1. what is the infinite series though that this maps to because you can see you can see this here is like well this is 0 i see zero plus one half plus um one half plus this is this is one quarter of one quarter but this is one half of one quarter which would be one eighth but another one eighth is one fourth so i think it is one plus onefourth plus oneeighth plus onesixteenth is that the infinite series making that with shaders is giving me a nightmare says nicole yes i'm gonna have nightmares about this tonight anyway i'm gonna hit submit we got it correct let's look at the explanation which is always super helpful oh oh look at this the pattern first puts two squares in the upper left so it's showing that's the same as this one which is what i coded originally and onehalf onefourth oneeighths with 16th and the technical term here is that the limit converges to zero as this sequence goes to infinity amazing so this is what again this is what i love about working with brilliant um it has these amazing courses with one beautiful problems in math science physics computer science neural networks etc and you can explore them on your own you can discover your own coding challenges you can learn new concepts through interactive lessons um sign up for free today i'm going to take just like a literally like a one or two minute break what do you want to do and then return back to shaders if you have nothing to do in those 60 seconds sign up for free there brilliant.org coding train if you want to unlock all of the premium content all of their courses um if you do that through that link the first 200 people to do so will get a 20 um discount off it's also a great gift so it's giving seasons not yet but coming up soon if you already have it you can gift it to somebody else a subscription and here oh you are posting the link to the coding train color website but your messages didn't get through okay so i'm just going to take a um try to take the shortest break possible so i can come back and do a little bit more on shaders so don't go anywhere but i'm not going to be here for that much longer maybe 15 20 minutes i want to get a little further with the shader think about what you would like me to do with the shaders um post that post your ideas in the chat i'll be peering through it i also have to go you just have to take i need a break everybody needs a break you need a break you should get up and stretch i'm standing so i don't need to get up and stretch because this is all stretching for me but i will be back in just a minute or two don't have a button for the intermission animation so i got to just manually click it over here there we go so so do all right i have returned um i would love to uh hear yeah mark boots everybody's posting me the link to the um the um uh thank you brilliant uh for the sponsorship um mark boots is posting um the link to the uh color palette and uh probably nicole if you're posting links into the youtube chat youtube doesn't let you post the link unless you've got like certain privileges which i would be happy to add for you potentially but um yeah actually speaking of which i'm pretty sure that we're things are very much in flux for me right now and i know that i'm always saying that but i'm looking to expand um um the moderation team so folks who and some of these are volunteer positions um although i'm trying to figure out how to do this more equitable equitably um but um expand the discord and youtube moderation um team and um so if that's something that interests you feel free to reach out join the discord i don't think this button's gonna work no it doesn't um codingtrain.comcodingtrain.com discord okay um yeah so lost search resourcer is saying if posting urls is an issue in the chat that might be why links to the discord button don't work no because i'm supposed to be able to post links to the chat me i have all the power i am the one the only me with the admin thing in the youtube gloria i know gloria gloria's wagging her tail over there running in circles she's very happy being up here in the country but she's like hello you said you're only i mean i don't know if she really she's not really talking she's a dog but if she were to speak she'd say hello you said you're gonna stream for two hours i would like some lunch i would like you to take me for a walk also you have a lot of emails to answer i saw some names of some of my nyu students in the chat i've got lots of work responsibilities to do you know this is all kind of the same big larger project that i'm doing it's all the same universe processing foundation coding train nyu but i do have to get some out of that stuff um great nicole definitely be in touch nicole um and all right so i do want to have a little bit more time today i'm trying to limit myself to two hour streams um you know again a whole different world is coming up from 20 20 20 20 22 20 20 20 20 20 20 22 i can't say it 20 22. um okay so let's this this was a lot of fun and i would like to oh so oh you don't see what i'm seeing good perfect you know what i'm going to do just give me a moment here it's going to take me a minute i'm opening up the discord to share with you the links of things that i'm working on what's funny is i've got some old like it's summer is over and i have these um what do you call it floaties basically like little round tube things that are blown up for my kids to go swimming and i have them here in the garage and i was deflating them so they're deflated and sitting on the glorious over there like scratching i'm trying to make it into a bed for herself i really need a dog cam i'm gonna have to get that set up at some point so right now i just have to like discard describe gloria's activities to you all what was i doing discord yes just bear with me come on discord where are you there you are coding train uh links special fancy secret command okay so i am now about to show you the coding train discord which is here oh it's so large it's larger in charge uh last time i bothered to post anything here was when i made the processing happy birthday cake but um this channel here is a channel where i will post links to things that i'm doing in the live stream if i remember this scheduling channel is if you choose if you're in the discord and you sign up for the notifications role it's very hard to see this i think it's just uh the command is we have a new new bot uh which is another whole other topic i need to i think if maybe it's still the old command but anyway somebody will help you the most important thing is when you join the discord uh read the readme react with an emoji it will unlock all the channels for you um and then you can go here into uh and and and it's a wonderful community there's so many discords you know join the p5 one i don't know if there's a curiously minded one but uh come and spend some time in the coding train one if you desire i would like to we're hoping to do some more additional content and workshops so like um you know you know not to put anyone on the spot but like if any of the viewers like uh nicole wants to come in and do like a workshop on shaders in the discord i don't know you potentially could you know not making any promises here but i'm trying to but that's that's the thing um okay but ah i was just trying to post the links to the code i'm working on so first this is this infinite i'll just call this infinite area so if you want to play around with that infinite area sketch there it is uh if you want to play around with my um first shader sketch is it holly sunscreen or longing stream wasn't it longing stream yeah yeah i don't know what holly oh that was the um the nested loop one um so here is a shader sketch and i'm going to actually call this i'll just call this shader1 which i should come up with a better name i'm going to duplicate it and shader2 so whatever i do now will be in will be in this particular sketch so you can get in the discord not infinite area the area is one yes an infinite series i trying my best you know it definitely happens to me there's like a certain point in the stream where my brain starts to melt i mean in all truth it's probably about 30 seconds in if i'm being honest i'm i mean i i really get it like eliza and alethia you've got the right idea cohosts cohosts i should probably figure that out someday but it's just not my thing right now uh so i don't want to subject anyone to my insanity either so um but i'm starting to fade so let's see if we can get a little further with the shader code i had some ideas of things that i would try to do let me just review where i am so in case you're just tuning in um i am going to talk you through what i have done so far so what is a shader i'm working up to answering that question right now i am just dipping my toe in getting my feet wet to extend that metaphor into my shader of water ripples which is coming that's what i want to program very soon i want to do some like cool water wave shadery stuff i am loading both a vertex shader and a fragment shader the vertex shader is for handling the geometry of something that i am rendering into my scene so p5 is controlling the scene it's and i'm going to switch this back to 400 by just so we can fit more onto the screen right now but the scene is in p5 there is a rectangle that i am applying the shader to the vertex shader affects the geometry the position of the rectangle itself and its orientation the fragment shader i want to say manipulates the texture the pixels of the geometry is that accurate to say that's the way that i understand it right now i am not doing anything but creating a boilerplate um a boilerplate vertex shader meaning the um this is like sort of a global attribute variable set by p5 to explain to keep track of the position of the rectangle that i'm drawing so in order to convert this sort of rectangle to set its position in size to fill the entire canvas i need to double its size because by default it's half and the range is negative one to one and it's at zero zero so i and so it's its length is one i need it to be two and i need to slide over i think that i could probably change this to say pos four equals 2.0 times positive minus 1.0 so i think this might be a nicer way to explain it and it's the same yeah so this is um and i forget why it's a 4 a vect4 right it's an xyz but i guess maybe it's is it more like it's like um because i'm in 3d so we have a 4d vector because it's like a matrix thing i've covered this in previous videos c for for for a recording when i was hopefully thinking straight um 3d projection uh coding train this is one of my favorite videos to make um i guess i can just open it up here but because this uh i want to just like turn off welcome to a this is a video i made where i created this 3d cube um but and right now you can see it's a p3d sketch but by the end of this coding challenge i was not using any uh this is all being rendered in p2d but i was doing the actual matrix multiplication math to create the 3d perspective so this was like a thing that i did a while ago because i didn't really understand how it worked and i tried to turn it into a video it led to me doing this like 4d shape projected into 3d which is the hypercube so i encourage you to check all that stuff out um but uh i wonder if that's something that's going along going here homogeneous coordinates is what people are saying uh all right there's something else going on in the chat in thailand okay so then the fragment shader gets the x y coordinate from my p5 space essentially normalize it normalizes it oh actually no yeah normalizes it according to the resolution of that space i also want to do the same for the mouse then i'm looking at every essentially pixel's distance between and this this would make more sense for me to call this mouse i'm looking at every pixel's distance between the mouse and itself and if it's closer to the mouse it's brighter if it is uh further from the mouse it's darker so that's what i got and again my um the sort of way i'm thinking about this is this fragment shader is like the code for an individual pixel and it runs on all the pixels all at once in parallel which is how it's able to you know with the graphics hardware of this you know laptop how it's able to run super fast uh was that an ex explanation of um shaders that actually um makes sense and if someone accurate i would love to know i've got a lot of notifications on my phone rule number one of streaming don't look at the notifications on your phone while you're streaming first of all it's rude it's what i tell my children no phones at the table do we have to break those rules sometimes there's only so much we can do um but no phones at the table the streaming table which is this i really love this desk by the way okay so i don't have a lot of time because i'm overtime but i want to see this animate i think that would be something great to do next and a way that i could do that is with frame count i believe so i could set up and in uh when i was doing this when i was learning from aletheia and eliza on saturday the variable they used was time but frame count time i mean i could send it millies for time but i'm gonna frame count is a builtin variable in p5 so i'm going to make another uniform i'm going to call it u let's call it u time i know i said i wasn't going to do that and i think i can assume i can just give it just frame count so u time is frame count so the shader should as it's operating on the pixel so this is the thing i'm really confused about there's no there's a draw loop here so the draw loop is giving it um a new and uh suic that's very kind of you oh nicole said it was a great description of the shader oh it makes me so happy again the first the next thing anybody said to me which i think might have been an ironic statement i'm not sure was nice antireflective whiteboard the main issue with my whiteboard and i know that i'm just like completely changing the subject every two seconds is i put this together myself i am really bad at putting together furniture my wife is really good at putting together furniture and i put together this like a bed and it must have taken me like eight hours when it would take a normal person hour i had to like undo so many screws i did put this together myself it seems a little wobbly this is on wheels but i have the wheels locked i don't know somebody's i need i need to figure out the optimal whiteboard solution for myself i will pay good money for a nice new whiteboard that is antireflective fills this space and doesn't wobble i'm taking your recommendations but so that was the first nicest thing sony ever said to me nicole saying oh nicole nicole said that was a good explanation she had to pass millie's into your shader as a uniform i know but i don't want to okay so i bet you that's better for a variety of reasons but i kind of think that right now mentally i'm going to understand the draw loop as frame count more easily so let me try it that way your comment is taken your feedback is ingested in my ear it's not going out the other ear it's staying inside my head but i'm gonna have to just file it in the back for later let's try it with frame count so uh so maybe the what's offending um you know i could call this frames let's call it uframes that way we don't have to be offended not saying you were offended but i can be more accurate about what it is oh and i really want to get the random thing going in here uniform back to you frames so my idea here is that what if i were to just add u frames to the brightness now immediately it should just go totally to white and i'm going to turn on the auto refresh and run it again what did i do wrong oh because no oh it's a vector not a vector uniform float so i got to be careful this is a float not a vector okay so you immediately went to white because the brightest color is one and the frame count is instantly so i think what i've seen people do is use like a sine wave would be an effective thing to do i kind of want to just see that i wanted to use modulus i could just divide it by i do want to have this be sort of a number well let's try just just because i try it one way doesn't mean i can't try it another way later so i'm going to just try dividing it i'm going to make a variable called offset equals u frames divided by um a thousand and i always forget that this dot there's no this dot it's just the dot and then let's make this offset so it's getting you can see it's getting brighter and brighter over time that circle is expanding so now what i would like to do is say bright equals modulus i think bright and 1.0 so you can see here it's going to cycle back down to zero but why why does it not come back up again oh it is oh it's just super slow okay so this is what i was trying to do it's like cycling back down to zero it's kind of interesting i mean i don't really know what i'm doing here but um so i kind of like this i think this could also be now i could think of this as like right zero one minus bright so i could kind of have different colors oh one point why why why why can't why can't it just know when i type one i mean it to be a float uh oh vec four uh one so here's red and blue again i mean this is kind of interesting now but i wanted to like have this be i want it to be a little bit more logical about what i'm doing here like if i if i make this two right it can it's still going to cycle back but later and if i make this 10 super but i wanted to see multiple cycles yeah this is what i was thinking oh no whoa that's sorry for the flashing uh no no no no one one is what i want 1.0 well let's try so this is interesting this is not doing exactly what i was kind of like looking to do i guess i could use that like clamp or something radar ping but different colors uh why does colors accept ins it's so strange um okay so here's what i want to see now let's try adding a sine of this so i'm basically turning this into um and then i think i let's take out the modulus now it should yeah there we go so this is just gonna pulse so what if i wanted it to have multiple layers so based off of the distance oh what if i did a modulus of the distance without the offset so for example if i did a modulus of the distance yeah that's what i was this is what i was hoping to sort of see um but uh so if i did and then if i did two times two points so this is i'm sorry i'm lost in my own head right now not explaining anything but i wanted to see this this is what i was hoping to do i wanted to try to use modulus to have it like fade out and then come back and fade out and come back yeah chris sorry um auto encoders is not happening today i apologize i got lost in shader land um so now i should be able to um add the offset i mean i'm basically just trying to hypnotize everybody and then also do this and i was gonna yep that's just making it slower dude this is just making it slower um but how do i make it like if i do 25 and then multiply it by four yeah okay so what if i do um factor equals four and then uh factor and then this would be 1.0 divided by factor we're probably all lost because trust me i'm just as lost as you are uh and then um maybe i don't want the sine wave anymore um and then like how how much can i get away with this like if i make the factor uh 16. yeah it's a okay cool now why is it only it's barely getting anywhere can i can i multiply this by 10 oh 10.0 oh no that's just making it well go very fast hold on yeah there we go it's like a water ripple okay yeah says gslsl is so fun i would agree i would agree uh a hundred factor eight no i liked it with a larger factor but slower i think okay i think i have to i think i have to stop it looks like the warner brothers background it totally does you need the absolute value of sine well i don't i mean i that might help but wouldn't that let's try that but i'm fine with taking the negative oh but now this is just going to go interesting now also i probably could do like i mean there's got to be a way to like make the color different based on the angle right couldn't i do hold on let's do i'm going to stop really soon float angle is a tan of uv y u v i'm trying to get the angle of the x y relative to the center um and that should give me something between 0 and 2 pi so if i divide that by oh it probably gives me between so if i oh this is why i had pi there is no pi um close enough how do i do a constant is that right so if i were to say take angle and make that divided by pi and make the angle hey look now the green is rel is the angle but it's i think um i think i should add pi to this i think i'm probably getting yeah and then divide it by pi times two i'm sorry i'm not explaining what i'm doing and this has to be a dot i just i can't i have to stop that is not really giving me the effect that i expected hold on let's let's just look at the angle for a second ah okay a tan if i take the literal angle oh it's because it's from the bottom left so i have to say minus u resolution dot x y divided by two i'm confused um oh whoops no not there hold on i want to get this right minus u resolution dot y divided by 2. 2.0 no um how do i how do i get it to be u v o minus mouse dot y yeah oh whoops hello just use the mouse dot y thank you i don't know why i wasn't thinking that oh because i'm doing the yeah okay so we can see here that that's the color is mapped to an angle but i need to you know divide it by pi but that's only half so i want to divide it by pi times 2 oh and this should be y this has to be i just okay this is right except now i should say pi plus being my kingdom for a map function there we go so this is now the color i was doing this yesterday the color is green all the way around so i could this is pretty much what i did with eliza and alethia i'm just sort of like redoing it so if i said bright now so you can see that it's with green but there's no reason why now i can't do mod angle plus offset one there we go i don't know what the oh look at this whoa what it's like in the wrong place too which is kind of a happy accident oh because i have uv y u u v x oh this should be x there we go i kind of liked what i was doing though so i'm really hypnotizing oh and sine wave it's coming back so um can i like modulus this with a oh no but um there uh no oh no that's what i want um i can't stop oh yeah this there we go okay hold on um let's do and let's multiply it by 2. same thing let's do factor can i do that factor 1 1 divided by factor this is my new favorite weird thing to do tada okay oh my god okay everybody um i don't know i don't know my my colors need a little bit to be desired here leave a little bit to be desired here let's just let's just make this um let's slow this down a little bit and multiply it by 20 and now what i'm going to do is do i dare what's the chance i could get this to work if i just do window with it's going to be all askew nicole's giving me a map function yeah i could write my own map function is are can you import can you create like a utility library for a shader and import it i think i should probably make it a square no matter what but um here we go share full screen view enter full screen refresh refresh refresh use a cosign palette i can't get it to um i don't know why i can't get it to run in this mode but whoops it's much better as a square anyway okay tada you want to normalize the uv ah okay yes normalize the uv okay but that's that's for another day uh thank you for uh tuning in for today's live stream uh this code is available in the discord coding train discord which you can sign up for at thecodingtrain.com discord uh thank you today's sponsor brilliant you can sign up for free at brilliant.org codingtrain that tells them you found out about it from me helps out the channel it's a way of supporting the channel um and uh there also if you want to subscribe to the premium uh brilliant subscription uh that link will get you a 20 off uh coupon um i will be thank you uh um uh thank you um k weekman for posting the uh discord link in the chat um i i'm gonna go it's 1 30. i've been streaming for two and a half hours there's a chance i'll be back this friday there's a chance i'll be back next monday there's even a chance that a brand new fully edited coding challenge video will come out at the end of this week putting the finishing while putting the starting touches on it it's a really fun exciting code example of doing time displacement probably could do it with a shader can you pass an image to a shader from like the webcam it's got to be a way to do that um and i hope that you learned something about shaders today i feel like i'm getting a much better understanding of them although apparently the only thing i know how to do is make hypnotic patterns um so i've got to go i wish that i had more time today for um some um and thank you uh okay weekman for posting louise lessel's uh website oh yeah so let me let me do some thank yous so thank you to the book of shaders which i intend to fully go through at some point but i know this is the origin of many things thank you suick for your very kind um we definitely need to do this dot song for your kind super chat there thank you to uh curiously minded uh check out uh their stream travel back in time to see me on their stream thank you for introducing me to shaders i think i might never look back gotta do a lot more with this um and also thank you to um casey and louise um hopefully like if i go to the homepage of this there is um yeah thank you to casey and louise um the example this looks like the example that i was building off of today i was really pulling from their examples shader is texture wait what what can i just make it a sphere can i just say sphere instead whoa wow wow it didn't really work but kinda did okay i'll return to that later make it back to a rectangle i'll figure that out later um i will see you all on the if you invert the mouse position looks like some sort of first person so i know i know i can't stop okay here's what i would love for you to do what do we need hashtag oh gloria really wants i i'm my poor dog she's just looking at me i mean at least she's outside and there's no sun anymore she's really enjoying the sunshine but she really is looking at me like okay it's been two and a half hours need to be fed need to be walked properly anyway um the art of code channel on youtube has complex shader tutorials um so many wonderful things ah but this is what i would love for you to do if you are inspired to try making a shader from today i don't know uh tweet at me at shiffman um at the coding train um choo choo slot choo choo shader shader choo choo true shader shoe i don't know shader chew two shader choo choo shader shift shader shader shafader you figure out what the hashtag should be self organize on the internet um come back for the next live stream hopefully i'll get some new videos out also i appreciate all of you i wish i could do more and see you all soon i'm gonna um next time hopefully i'll have some time to share community contributions or answer some questions and all that kind of jazz see you next time on the coding train uh thank you to all the members who have signed up through um uh youtube you can also sign up through patreon if you uh prefer although i need to get emails out to all the new patreon subscribers um if you've received your custom train whistle with your laser etched random walk pattern on it um i should come a little bit closer to a show let's see if i can bring that right up to the camera this is uh um uh please share it with me uh i don't have light here so but hopefully you can kind of oh i'm so in the dark uh two in the light i don't know what that sound was i really just gotta go uh there we go random walk pattern uh coding train uh and uh see you all happy halloween almost whoo i don't know if we're gonna have a spooky coding train i like to do that every year but it's gonna be really hard this time goodbye as always i always forget that this stop this stock this stop this dot this stop this dot floating point this whole time there's no music because i forgot to add the audio capture to this business song the kittens kittens and kittens and kittens i feel just sort of like a nice feeling of relaxation everything's gonna be okay today dream is not broken it has not frozen this is a this is a wonderful thing okay we're gonna do it i'm really getting to something i need my sound effect what else is there unicorns and rainbows generation analysis things that i will use continuously over and over again first thing i need to do is yes yeah i just thought of something i'm not going to do it now but i could make a uniform from p5 that is the volume of the audio and make this sound responsive right i mean i'm not gonna do that now but uh you should definitely do that okay uh goodbye everybody kittens and kittens kittens and kittens and kittens and kittens kittens the kittens and kittens and kittens kittens and kittens see you all later you
