With timestamps:

00:00 - Hello, again.
00:00 - I am inserting a little extra
video here in this section
00:04 - on working with
variables in p5.js
00:06 - to talk about something
called an motion operation.
00:09 - I really just want
to put laser focus
00:11 - in on this one line of code
here, circleX circleX plus 1.
00:15 - Right?
00:16 - So this was the first
step in learning
00:18 - how to declare, and initialize,
and use your own variables.
00:22 - The variable called
circleX, I set it
00:23 - to an initial value of 100.
00:25 - And then, every
frame I add 1 to it.
00:28 - And so we get this illusion of
it moving across the canvass.
00:31 - If I click the mouse, I
reset it back to zero.
00:33 - So why am I here to
just talk more and more
00:36 - about circleX equals
circleX plus 1?
00:39 - When you're learning to
code, which is presumably
00:41 - what you're doing right
now watching these videos,
00:43 - you'll quickly discover that you
were taught to do it one way,
00:46 - you tried it that way, and then
you found another example that
00:48 - did it a different way.
00:49 - Especially in
JavaScript, there's
00:51 - multiple ways to
write the same thing.
00:53 - So it can be very confusing.
00:55 - There's also often this
mantra that programmers
00:57 - will have of trying to
reduce the amount of typing
01:00 - and to write things in more
and more and more shorthand.
01:03 - Some of this can be
called syntactic sugar,
01:05 - a different way--
actually that's not--
01:06 - syntactic sugar isn't
always shorthand,
01:09 - but it's a way of sometimes
reducing or cleaning up syntax.
01:12 - In any case, I don't know
that this is really so sweet.
01:15 - I don't love shorthand
always because it
01:17 - can make things a
little confusing,
01:19 - especially when you're
beginning to learn.
01:20 - But it cannot be avoided.
01:22 - So I want to cover
some shorthand for you
01:24 - right now for
incrementation operations.
01:26 - So I had the variable circleX.
01:28 - Let's just simplify that
and make it the variable x.
01:33 - So here, my variable name is x.
01:35 - I've declared it with the
keyword let and I've given it
01:37 - an initial value of 100.
01:39 - Then, presumably in
Draw, if I'm following
01:41 - what I did in my code,
I might say something
01:43 - like x equals x plus 5.
01:46 - I want to increment the value of
x by 5 every time through Draw.
01:50 - Starts at 100, then
becomes 105, 110, 115,
01:55 - and so on and so forth.
01:56 - This can also be written
as x plus equals 5.
02:02 - It's common enough that this
shorthand x equals x plus 5
02:07 - is reduced to x plus equals 5.
02:10 - Guess what?
02:11 - If I were to change this
to x equals x plus 1,
02:17 - this would be x plus equals 1.
02:20 - And this can be further
reduced to x plus plus.
02:24 - So this is a common
enough thing that
02:26 - happens in coding over and
over again, just increment
02:29 - a variable by 1, increment
a variable by 1, that there
02:31 - is a two-character
sequence plus plus
02:34 - that you can write which means
the exact same thing as x
02:37 - equals x plus 1.
02:38 - Incidentally, if you've ever
heard of the programming
02:41 - language C++, why
is it called C++?
02:45 - There is a programming
language once called--
02:47 - it still exists-- called
C. And then, there
02:49 - were improvements and
changes made to it.
02:50 - And the next version is
incremented by 1, or C++.
02:54 - This can also be
done with minus.
02:57 - X minus equals 1 would
be decrementing x by 1.
03:02 - You could do this
with multiplying
03:03 - x times or asterisk equals 2.
03:08 - That would be doubling
x every frame.
03:11 - Slash equals would be divide.
03:13 - And there are more and more
kinds of operations like this.
03:17 - So that's really
all I wanted to say.
03:19 - I probably didn't
need to take whatever
03:20 - this was, like a 3 hour
video on what x plus equals 1
03:24 - is written means.
03:25 - But hopefully, this
helps clarify for you
03:28 - as I go through
future examples where
03:30 - you start to see these
kinds of shorthand
03:32 - and syntactic sugars
pop up here and there.
03:36 - And I hope that it
is sweet for you.
03:38 - See you in the next video.
03:40 - Actually, I'm not leaving just
yet just, just to confirm.
03:43 - I'm going to change this to
circleX plus plus equal 1.
03:48 - Same exact result.
Plus equals 10.
03:52 - It's moving by 10.
03:53 - And then just to be
sure, circleX plus plus.
03:57 - It's moving by 1.
03:58 - OK, hope this was helpful
to you and look forward
04:01 - to seeing you in the next video.
04:02 - [MUSIC PLAYING]

Cleaned transcript:

Hello, again. I am inserting a little extra video here in this section on working with variables in p5.js to talk about something called an motion operation. I really just want to put laser focus in on this one line of code here, circleX circleX plus 1. Right? So this was the first step in learning how to declare, and initialize, and use your own variables. The variable called circleX, I set it to an initial value of 100. And then, every frame I add 1 to it. And so we get this illusion of it moving across the canvass. If I click the mouse, I reset it back to zero. So why am I here to just talk more and more about circleX equals circleX plus 1? When you're learning to code, which is presumably what you're doing right now watching these videos, you'll quickly discover that you were taught to do it one way, you tried it that way, and then you found another example that did it a different way. Especially in JavaScript, there's multiple ways to write the same thing. So it can be very confusing. There's also often this mantra that programmers will have of trying to reduce the amount of typing and to write things in more and more and more shorthand. Some of this can be called syntactic sugar, a different way actually that's not syntactic sugar isn't always shorthand, but it's a way of sometimes reducing or cleaning up syntax. In any case, I don't know that this is really so sweet. I don't love shorthand always because it can make things a little confusing, especially when you're beginning to learn. But it cannot be avoided. So I want to cover some shorthand for you right now for incrementation operations. So I had the variable circleX. Let's just simplify that and make it the variable x. So here, my variable name is x. I've declared it with the keyword let and I've given it an initial value of 100. Then, presumably in Draw, if I'm following what I did in my code, I might say something like x equals x plus 5. I want to increment the value of x by 5 every time through Draw. Starts at 100, then becomes 105, 110, 115, and so on and so forth. This can also be written as x plus equals 5. It's common enough that this shorthand x equals x plus 5 is reduced to x plus equals 5. Guess what? If I were to change this to x equals x plus 1, this would be x plus equals 1. And this can be further reduced to x plus plus. So this is a common enough thing that happens in coding over and over again, just increment a variable by 1, increment a variable by 1, that there is a twocharacter sequence plus plus that you can write which means the exact same thing as x equals x plus 1. Incidentally, if you've ever heard of the programming language C++, why is it called C++? There is a programming language once called it still exists called C. And then, there were improvements and changes made to it. And the next version is incremented by 1, or C++. This can also be done with minus. X minus equals 1 would be decrementing x by 1. You could do this with multiplying x times or asterisk equals 2. That would be doubling x every frame. Slash equals would be divide. And there are more and more kinds of operations like this. So that's really all I wanted to say. I probably didn't need to take whatever this was, like a 3 hour video on what x plus equals 1 is written means. But hopefully, this helps clarify for you as I go through future examples where you start to see these kinds of shorthand and syntactic sugars pop up here and there. And I hope that it is sweet for you. See you in the next video. Actually, I'm not leaving just yet just, just to confirm. I'm going to change this to circleX plus plus equal 1. Same exact result. Plus equals 10. It's moving by 10. And then just to be sure, circleX plus plus. It's moving by 1. OK, hope this was helpful to you and look forward to seeing you in the next video. [MUSIC PLAYING]
