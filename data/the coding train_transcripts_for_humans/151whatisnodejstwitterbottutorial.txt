With timestamps:

00:01 - Hello.
00:02 - This video is the
first in a series
00:04 - of videos, where the ultimate
goal, at the end of this video,
00:07 - is to make a Twitter bot
that posts images to Twitter.
00:10 - Now, why you might do this?
00:12 - What's the point of
making a Twitter bot?
00:13 - What are Twitter bots?
00:14 - It's a big topic.
00:17 - And we'll get to that
discussion along the way.
00:21 - I'll put some links in
this video's description
00:23 - of some articles,
and some examples
00:26 - that you might look at, to
think about making Twitter bots.
00:28 - But I'm really going
to stick to the nuts
00:30 - and bolts, the technical stuff,
in this series of videos.
00:33 - And the first thing that
I want to start with
00:35 - is something called Node,
Node.js, and working
00:40 - with the command line.
00:41 - So let's say you're someone
who's been here with me,
00:45 - watching videos about
programming in JavaScript.
00:49 - Let's come over
to the white board
00:50 - here, and think about
what's going on.
00:52 - You are a person who
is working on a laptop.
00:56 - And in that laptop,
you have a browser.
01:01 - And you have been making
JavaScript sketches.
01:04 - You might have written
an HTML page, a CSS page.
01:06 - And you have these nice
little animations running in
01:09 - that browser, written in-- and
I have a whole set of tutorials
01:12 - that you could look at, using
this JavaScript framework,
01:15 - called p5.js.
01:18 - So what's going on there?
01:21 - If, for example, you are
using the p5.js editor, what
01:25 - the p5.js editor
is doing is running
01:28 - something called a server.
01:33 - What is a server?
01:35 - So we think of this thing.
01:36 - We use this terminology,
known as the cloud.
01:39 - This is a thing that's
come up a lot at ITP
01:42 - here recently, which is
that the cloud is really
01:44 - like a lot of
underground bunkers,
01:46 - and giant, scary-looking
facilities.
01:49 - They're not really these
servers floating in the sky,
01:53 - on the wings of
unicorns, or something,
01:56 - that you might like to think,
or that this idea of the cloud
01:58 - might make you think--
but off topic here.
02:00 - The point is let's just think
about Google, for a second.
02:04 - Google has a server.
02:08 - And when you type into
your browser google.com,
02:11 - you are making a
request to that server.
02:16 - And that server
gives you a response.
02:21 - All of that has, in
fact, been happening,
02:23 - if you're writing
JavaScript code,
02:25 - making web pages on your laptop.
02:28 - Your laptop, using
the p5.js editor,
02:30 - is running a little server,
to simulate what might happen,
02:34 - should you ever deploy or upload
your stuff somewhere else.
02:37 - And so, if you have
your own website,
02:39 - like my website is
shiffman-- it really
02:43 - needs to be redesigned
and fixed up.
02:44 - Maybe you can help me with that.
02:46 - So I hesitate to mention it--
but shiffman.net, for example.
02:51 - If I worked on something, I
took my code, and I put it here.
02:55 - Then now somebody
else in the internet
03:00 - could make a request
to my server, where I
03:03 - put all of my JavaScript code.
03:05 - And it might respond and
send that JavaScript code,
03:09 - so that that person can see the
beautiful animation happening
03:12 - in their web browser.
03:14 - So all of these, with
the exception of Google--
03:16 - because their
server is obviously
03:17 - a highly-sophisticated
thing, with lots going on--
03:20 - but in this case,
with p5.js running it
03:23 - locally, or uploading
the thing you made
03:25 - with p5.js to your own web
server, the only thing that's
03:30 - happening on the web server,
that the web server is doing,
03:33 - is delivering static content.
03:36 - It's delivering an HTML file.
03:38 - It's delivering a
JavaScript file.
03:39 - It's delivering some images.
03:40 - It's delivering some
style, some CSS.
03:46 - What I would like to talk
about in this video is
03:48 - what happens when there
comes a time in your life
03:53 - where that's not enough?
03:56 - You need to actually run
a program on the server.
03:58 - Now, Google clearly does this.
04:00 - Because when you ask for
search for rainbows--
04:04 - you want to find out on
Google about rainbows--
04:07 - a little server program runs.
04:08 - And it connects to their
massive, crazy database
04:12 - of the entire universe of
thought and information.
04:15 - And it processes
it, and figures out.
04:17 - And it figures out what
to give back to you.
04:18 - That's a little
server program, that's
04:20 - running on Google's servers.
04:21 - If you log into
your online banking,
04:24 - and put in your
username and password,
04:25 - a little server program has
to read that, figure out
04:27 - if it's the right
username and password,
04:29 - and give you back your account
balance-- that sort of thing.
04:32 - So Node is a framework,
a JavaScript framework,
04:38 - for writing custom--
I would say-- servers.
04:46 - Now the thing is, even
though-- so there's
04:49 - a lot that you could
do here, in terms
04:53 - of writing your own web server.
04:55 - But the reason why I am
doing these videos about Node
05:00 - is one of the things
that you might
05:03 - want to do in your
life, making projects
05:05 - with code and
information and things,
05:07 - is make use of the Twitter API.
05:11 - So I have a whole set of
videos, all about various APIs
05:16 - you could connect to--
Wordnik, New York Times, Giphy.
05:21 - All these are APIs
that in previous videos
05:24 - I've shown you how to connect
to, from p5.js itself.
05:29 - But Twitter is a special
sort of API, that requires
05:32 - something called OAuth.
05:35 - I think of that as like, oh my
God, I have to authenticate.
05:38 - When I see OAuth,
I think oh, auth.
05:41 - Because it's a pain.
05:42 - And I don't know.
05:43 - I need this extra thing.
05:44 - And I can't do it
in the client side.
05:46 - And then I need a secret,
and a key, and a token,
05:48 - and start to feel very stressed
out, and want to lie down,
05:51 - and need a cold compress on
my head-- all of this stuff.
05:55 - I'm feeling flushed already,
just thinking about it.
05:58 - But ultimately, an answer
to dealing with OAuth
06:02 - is writing your own
Node application.
06:06 - You must authenticate with
your account information.
06:10 - You cannot do that from
just the browser directly.
06:13 - A server can do that,
however, for you.
06:16 - So if you wanted to connect to
Twitter from-- that camera's
06:19 - shut off.
06:20 - If you want to connect
to Twitter from-- I
06:23 - lost my train of thought.
06:24 - If you want to connect
to Twitter from p5.js,
06:27 - what you need is
a server program
06:30 - that's serving up
your p5.js code,
06:32 - and also talking
to Twitter for you.
06:34 - And there's some communication
thing that's going on there.
06:37 - I'm going to get to
all of this eventually.
06:39 - There's a lot of steps involved.
06:40 - But I'm trying to give
you the background of what
06:41 - you might need Node for.
06:43 - Other things you might
need a server for-- you
06:45 - want to save stuff to
a database on a server.
06:47 - If you want to process a
massive amount of data,
06:51 - and pass that back
to your p5.js sketch,
06:54 - you might want to
write your own server.
06:57 - If you want to build your
own API-- an example that I
07:00 - was thinking about
the other day is
07:01 - if you wanted to make an expose
information about yourself,
07:05 - through an API.
07:06 - And you put all these
sensors on your body,
07:08 - all day, that are tracking
all sorts of things.
07:10 - Then, on your own server,
you could expose that.
07:12 - We could read a
server that spits out
07:14 - all that information, via JSON.
07:15 - Other people could query it.
07:16 - So there's lots
of creative things
07:19 - you could do with a server.
07:20 - And I feel like this is the new
playlist-- creative servers,
07:23 - and working with Node.
07:24 - But in this section, the
reason why you need Node
07:27 - is the Twitter API.
07:30 - So that was a lot of
background there, and thinking
07:33 - about this picture.
07:34 - Let's come back
over here, to where
07:36 - I am invisible, because this
camera shut off by accident.
07:40 - And now what I
would like to do is
07:42 - start looking at how you
actually use Node, locally
07:47 - on your own laptop.
07:47 - So the first thing that
you're going to need to do
07:49 - is download and install Node.
07:51 - And I guess I've
already done that.
07:53 - But I'm going to
just Google Node.
07:56 - And I'm going to grab
the Node website.
07:58 - You can see it's node.js.org.
08:01 - The website is detecting
that I'm on OS X.
08:03 - So it's offering me
the OS X download.
08:05 - But of course, if you're on
Windows, just about everything
08:08 - I'm showing you here
will be the same.
08:10 - But please, if you're lost or
confused, ask in the comments.
08:13 - And maybe I could
ultimately make
08:16 - a video that just covers looking
at Node on a Windows machine,
08:19 - if that would be
helpful to some of you.
08:21 - So once you've downloaded
and installed Node,
08:24 - another question opens up.
08:26 - Well, what do you do?
08:27 - How do you run Node?
08:28 - How do you even make
anything with Node?
08:30 - So this involves using your
computer's command line.
08:34 - So on a Mac, there is
something called terminal.
08:38 - And I have it already here.
08:41 - I'm inside the terminal.
08:43 - I can't see where I am.
08:46 - Am I touching the terminal?
08:49 - Anyway, this over here--
this is the terminal.
08:52 - You guys don't need this weird
physical thing that I'm doing.
08:56 - And if I run it, you could see--
woo, I don't need it that big.
08:59 - Everything's going crazy.
09:01 - The font size is giant.
09:05 - You can see here
is now-- this is
09:07 - a little window
into the computer,
09:10 - into the computer's
soul, in a way.
09:12 - So you need to find terminal.
09:13 - Search for-- it's in your
applications utilities.
09:16 - Run terminal.
09:17 - Suddenly, this is a place where
you can start issuing commands
09:20 - for the computer to follow.
09:22 - For example, a command that
you might want to know about
09:25 - is pwd.
09:27 - pwd stands for print
working directory.
09:32 - And you can see,
that's where I am.
09:33 - I'm in the
Users/processing folder.
09:36 - So you can browse your
computer's folder and directory
09:39 - structure from this
terminal window.
09:46 - These are essentially
Unix commands.
09:49 - And so ultimately,
you're learning
09:51 - about how you might
operate a computer that
09:53 - doesn't have a GUI interface.
09:55 - And this is how lots of
computers used to work only.
09:58 - I'm a little off track here.
10:00 - So another command that
might be really useful
10:02 - is cd, for change directory.
10:05 - So I happen to know that I want
to change into the Documents
10:08 - folder.
10:09 - So I'm going to do that.
10:11 - And now I can say pwd to c.
10:13 - Yes, I'm in
Users/processing Documents.
10:16 - And then another
thing you could do,
10:17 - at least on a Mac, which is
really nice, is I can take cd.
10:20 - And then I can
say, well, where's
10:21 - the folder I really want to be?
10:23 - Well, I really want to be in
Desktop, YouTube code, which
10:28 - is where I'm going to put
the code for this video.
10:30 - I can actually just
drag that folder
10:32 - into the terminal itself.
10:34 - And it auto-populated
the path for that folder.
10:37 - I can hit Enter.
10:38 - And then you can see
I'm in that directory.
10:41 - So why does any of this matter?
10:43 - The reason why this matters
is unlike other things
10:47 - that you might have done before,
like processing, or p5, where
10:51 - you're writing code
in a GUI interface,
10:53 - hitting a Run button, seeing
a result, everything that you
10:56 - do through Node is all going
to happen through this terminal
10:59 - view.
11:00 - So for example-- this only will
work if you've installed Node--
11:03 - but one of the
first things you can
11:05 - do with Node is just type node.
11:08 - Now notice the icon
changed from a dollar sign
11:11 - to a greater than symbol.
11:14 - So now that you have
this greater than symbol,
11:16 - it means oh, I'm
in JavaScript land.
11:18 - I could just start
typing JavaScript code.
11:20 - I could say var x equals 100.
11:25 - Var y equals x times 2.
11:28 - And then I could say
oh, let me type x.
11:30 - And look, it's the value 100.
11:31 - Let me type y.
11:32 - It's the value 200.
11:32 - So one of the things
you can do with Node
11:34 - is just start playing
around with experimenting
11:37 - with JavaScript.
11:37 - It's like a real
time console, where
11:40 - this is very similar
to the browser console,
11:42 - if you've ever used that
to debug, and figure out
11:44 - what's going in the browser.
11:45 - So first of all, Node just let's
you run arbitrary JavaScript,
11:49 - through the command line.
11:51 - If I want to get
out of this, I need
11:52 - to type control-c, control-c.
11:54 - The other thing Node lets you
do is run a small JavaScript
11:58 - programs through
the command line.
12:00 - So for example, I'm going
to use this editor subline.
12:04 - And I'm going to save this file.
12:07 - And I'm going to go to
that folder, YouTube code.
12:10 - And I'm going to
name it as node1.
12:13 - I'm going to make a folder.
12:14 - And then I'm going
to say hello.js.
12:18 - So I've now saved a file in
that directory called hello.js.
12:22 - Here, by the way,
is another command
12:25 - that that you might
find useful-- ls.
12:29 - You can say, oh, list?
12:30 - I have a directory called node1.
12:32 - Let's change into that
directory and type ls again.
12:36 - And I can see hello.Js is there.
12:38 - Now, what if I were to put
into this program console.log
12:44 - Hello YouTube.
12:46 - I don't know.
12:47 - I might upload this to Vimeo.
12:48 - Hello arbitrary video website.
12:54 - So I wrote some
code in this file.
12:56 - How do I execute that code?
12:58 - Node-- I want to run something
with Node-- hello.js.
13:05 - And you can see hello.
13:07 - And spelled abitrary aribitrary.
13:09 - I spelled it wrong.
13:10 - But you can see that
that code has run.
13:12 - And it's come out.
13:13 - So little processes,
little scripts,
13:15 - little things that I might want
to make happen on my computer,
13:18 - that just-- I can program
them in JavaScript,
13:20 - and run them from
the command line.
13:21 - Number one, that's
what Node is for.
13:24 - Now if this were the
part of the videos
13:28 - that I intend to ultimately
make, were all I'm doing
13:30 - is looking at web servers,
then ultimately, I
13:37 - might show you then now how
to open a listening port,
13:40 - how to accept
connections to that port,
13:42 - how to send things
back to the browsers
13:43 - that are connected to that
port-- all of those things.
13:46 - But instead of that,
what I want to do
13:47 - is take another direction,
which is just look at how can I,
13:51 - from here, from
the command line,
13:54 - connect and authenticate
to the Twitter API,
13:57 - and get information
from-- search Twitter,
14:00 - look for people who have
replied to me on Twitter,
14:03 - and then also post tweets
myself, back to Twitter.
14:07 - How can I do all of that, just
right here from the command
14:09 - line, without ever opening
up a browser, without ever
14:12 - touching any other Twitter app?
14:14 - Because if I can
do that, then I can
14:16 - make a program that
will run and say,
14:18 - every 5 minutes, or 15
minutes, or one hour,
14:21 - post a tweet
automatically, based
14:22 - on some other type of
algorithmic set of rules
14:25 - that I might want to make.
14:26 - So I think this wraps
up this first video.
14:29 - If you're watching
it, download Node.
14:31 - Get it installed.
14:32 - Figure out how to get to the
command line of your computer.
14:34 - Figure out that
you can type Node,
14:36 - that you can enter
some JavaScript,
14:37 - that you can run a
short little JavaScript
14:39 - program that just
spits something
14:40 - back out to the console.
14:41 - And in the next video,
what I'm going to look at
14:43 - is how to use something called
NPM-- Node Package Manager--
14:48 - to spin up a larger
Node project,
14:52 - and use a Twitter package to
connect to the Twitter API.
14:55 - OK, so thanks for watching.
14:57 - And see you in the next video.
15:02 - That was me making
a rainbow symbol.
15:05 - You know how people
have a sign out thing?
15:07 - That's never going to work
for me, I know, sorry.
15:09 - I'm embarrassed for myself too.
15:11 - OK.
15:12 - Subtitles by the Amara.org community

Cleaned transcript:

Hello. This video is the first in a series of videos, where the ultimate goal, at the end of this video, is to make a Twitter bot that posts images to Twitter. Now, why you might do this? What's the point of making a Twitter bot? What are Twitter bots? It's a big topic. And we'll get to that discussion along the way. I'll put some links in this video's description of some articles, and some examples that you might look at, to think about making Twitter bots. But I'm really going to stick to the nuts and bolts, the technical stuff, in this series of videos. And the first thing that I want to start with is something called Node, Node.js, and working with the command line. So let's say you're someone who's been here with me, watching videos about programming in JavaScript. Let's come over to the white board here, and think about what's going on. You are a person who is working on a laptop. And in that laptop, you have a browser. And you have been making JavaScript sketches. You might have written an HTML page, a CSS page. And you have these nice little animations running in that browser, written in and I have a whole set of tutorials that you could look at, using this JavaScript framework, called p5.js. So what's going on there? If, for example, you are using the p5.js editor, what the p5.js editor is doing is running something called a server. What is a server? So we think of this thing. We use this terminology, known as the cloud. This is a thing that's come up a lot at ITP here recently, which is that the cloud is really like a lot of underground bunkers, and giant, scarylooking facilities. They're not really these servers floating in the sky, on the wings of unicorns, or something, that you might like to think, or that this idea of the cloud might make you think but off topic here. The point is let's just think about Google, for a second. Google has a server. And when you type into your browser google.com, you are making a request to that server. And that server gives you a response. All of that has, in fact, been happening, if you're writing JavaScript code, making web pages on your laptop. Your laptop, using the p5.js editor, is running a little server, to simulate what might happen, should you ever deploy or upload your stuff somewhere else. And so, if you have your own website, like my website is shiffman it really needs to be redesigned and fixed up. Maybe you can help me with that. So I hesitate to mention it but shiffman.net, for example. If I worked on something, I took my code, and I put it here. Then now somebody else in the internet could make a request to my server, where I put all of my JavaScript code. And it might respond and send that JavaScript code, so that that person can see the beautiful animation happening in their web browser. So all of these, with the exception of Google because their server is obviously a highlysophisticated thing, with lots going on but in this case, with p5.js running it locally, or uploading the thing you made with p5.js to your own web server, the only thing that's happening on the web server, that the web server is doing, is delivering static content. It's delivering an HTML file. It's delivering a JavaScript file. It's delivering some images. It's delivering some style, some CSS. What I would like to talk about in this video is what happens when there comes a time in your life where that's not enough? You need to actually run a program on the server. Now, Google clearly does this. Because when you ask for search for rainbows you want to find out on Google about rainbows a little server program runs. And it connects to their massive, crazy database of the entire universe of thought and information. And it processes it, and figures out. And it figures out what to give back to you. That's a little server program, that's running on Google's servers. If you log into your online banking, and put in your username and password, a little server program has to read that, figure out if it's the right username and password, and give you back your account balance that sort of thing. So Node is a framework, a JavaScript framework, for writing custom I would say servers. Now the thing is, even though so there's a lot that you could do here, in terms of writing your own web server. But the reason why I am doing these videos about Node is one of the things that you might want to do in your life, making projects with code and information and things, is make use of the Twitter API. So I have a whole set of videos, all about various APIs you could connect to Wordnik, New York Times, Giphy. All these are APIs that in previous videos I've shown you how to connect to, from p5.js itself. But Twitter is a special sort of API, that requires something called OAuth. I think of that as like, oh my God, I have to authenticate. When I see OAuth, I think oh, auth. Because it's a pain. And I don't know. I need this extra thing. And I can't do it in the client side. And then I need a secret, and a key, and a token, and start to feel very stressed out, and want to lie down, and need a cold compress on my head all of this stuff. I'm feeling flushed already, just thinking about it. But ultimately, an answer to dealing with OAuth is writing your own Node application. You must authenticate with your account information. You cannot do that from just the browser directly. A server can do that, however, for you. So if you wanted to connect to Twitter from that camera's shut off. If you want to connect to Twitter from I lost my train of thought. If you want to connect to Twitter from p5.js, what you need is a server program that's serving up your p5.js code, and also talking to Twitter for you. And there's some communication thing that's going on there. I'm going to get to all of this eventually. There's a lot of steps involved. But I'm trying to give you the background of what you might need Node for. Other things you might need a server for you want to save stuff to a database on a server. If you want to process a massive amount of data, and pass that back to your p5.js sketch, you might want to write your own server. If you want to build your own API an example that I was thinking about the other day is if you wanted to make an expose information about yourself, through an API. And you put all these sensors on your body, all day, that are tracking all sorts of things. Then, on your own server, you could expose that. We could read a server that spits out all that information, via JSON. Other people could query it. So there's lots of creative things you could do with a server. And I feel like this is the new playlist creative servers, and working with Node. But in this section, the reason why you need Node is the Twitter API. So that was a lot of background there, and thinking about this picture. Let's come back over here, to where I am invisible, because this camera shut off by accident. And now what I would like to do is start looking at how you actually use Node, locally on your own laptop. So the first thing that you're going to need to do is download and install Node. And I guess I've already done that. But I'm going to just Google Node. And I'm going to grab the Node website. You can see it's node.js.org. The website is detecting that I'm on OS X. So it's offering me the OS X download. But of course, if you're on Windows, just about everything I'm showing you here will be the same. But please, if you're lost or confused, ask in the comments. And maybe I could ultimately make a video that just covers looking at Node on a Windows machine, if that would be helpful to some of you. So once you've downloaded and installed Node, another question opens up. Well, what do you do? How do you run Node? How do you even make anything with Node? So this involves using your computer's command line. So on a Mac, there is something called terminal. And I have it already here. I'm inside the terminal. I can't see where I am. Am I touching the terminal? Anyway, this over here this is the terminal. You guys don't need this weird physical thing that I'm doing. And if I run it, you could see woo, I don't need it that big. Everything's going crazy. The font size is giant. You can see here is now this is a little window into the computer, into the computer's soul, in a way. So you need to find terminal. Search for it's in your applications utilities. Run terminal. Suddenly, this is a place where you can start issuing commands for the computer to follow. For example, a command that you might want to know about is pwd. pwd stands for print working directory. And you can see, that's where I am. I'm in the Users/processing folder. So you can browse your computer's folder and directory structure from this terminal window. These are essentially Unix commands. And so ultimately, you're learning about how you might operate a computer that doesn't have a GUI interface. And this is how lots of computers used to work only. I'm a little off track here. So another command that might be really useful is cd, for change directory. So I happen to know that I want to change into the Documents folder. So I'm going to do that. And now I can say pwd to c. Yes, I'm in Users/processing Documents. And then another thing you could do, at least on a Mac, which is really nice, is I can take cd. And then I can say, well, where's the folder I really want to be? Well, I really want to be in Desktop, YouTube code, which is where I'm going to put the code for this video. I can actually just drag that folder into the terminal itself. And it autopopulated the path for that folder. I can hit Enter. And then you can see I'm in that directory. So why does any of this matter? The reason why this matters is unlike other things that you might have done before, like processing, or p5, where you're writing code in a GUI interface, hitting a Run button, seeing a result, everything that you do through Node is all going to happen through this terminal view. So for example this only will work if you've installed Node but one of the first things you can do with Node is just type node. Now notice the icon changed from a dollar sign to a greater than symbol. So now that you have this greater than symbol, it means oh, I'm in JavaScript land. I could just start typing JavaScript code. I could say var x equals 100. Var y equals x times 2. And then I could say oh, let me type x. And look, it's the value 100. Let me type y. It's the value 200. So one of the things you can do with Node is just start playing around with experimenting with JavaScript. It's like a real time console, where this is very similar to the browser console, if you've ever used that to debug, and figure out what's going in the browser. So first of all, Node just let's you run arbitrary JavaScript, through the command line. If I want to get out of this, I need to type controlc, controlc. The other thing Node lets you do is run a small JavaScript programs through the command line. So for example, I'm going to use this editor subline. And I'm going to save this file. And I'm going to go to that folder, YouTube code. And I'm going to name it as node1. I'm going to make a folder. And then I'm going to say hello.js. So I've now saved a file in that directory called hello.js. Here, by the way, is another command that that you might find useful ls. You can say, oh, list? I have a directory called node1. Let's change into that directory and type ls again. And I can see hello.Js is there. Now, what if I were to put into this program console.log Hello YouTube. I don't know. I might upload this to Vimeo. Hello arbitrary video website. So I wrote some code in this file. How do I execute that code? Node I want to run something with Node hello.js. And you can see hello. And spelled abitrary aribitrary. I spelled it wrong. But you can see that that code has run. And it's come out. So little processes, little scripts, little things that I might want to make happen on my computer, that just I can program them in JavaScript, and run them from the command line. Number one, that's what Node is for. Now if this were the part of the videos that I intend to ultimately make, were all I'm doing is looking at web servers, then ultimately, I might show you then now how to open a listening port, how to accept connections to that port, how to send things back to the browsers that are connected to that port all of those things. But instead of that, what I want to do is take another direction, which is just look at how can I, from here, from the command line, connect and authenticate to the Twitter API, and get information from search Twitter, look for people who have replied to me on Twitter, and then also post tweets myself, back to Twitter. How can I do all of that, just right here from the command line, without ever opening up a browser, without ever touching any other Twitter app? Because if I can do that, then I can make a program that will run and say, every 5 minutes, or 15 minutes, or one hour, post a tweet automatically, based on some other type of algorithmic set of rules that I might want to make. So I think this wraps up this first video. If you're watching it, download Node. Get it installed. Figure out how to get to the command line of your computer. Figure out that you can type Node, that you can enter some JavaScript, that you can run a short little JavaScript program that just spits something back out to the console. And in the next video, what I'm going to look at is how to use something called NPM Node Package Manager to spin up a larger Node project, and use a Twitter package to connect to the Twitter API. OK, so thanks for watching. And see you in the next video. That was me making a rainbow symbol. You know how people have a sign out thing? That's never going to work for me, I know, sorry. I'm embarrassed for myself too. OK. Subtitles by the Amara.org community
