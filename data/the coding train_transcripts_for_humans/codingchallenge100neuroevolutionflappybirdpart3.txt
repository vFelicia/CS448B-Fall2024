With timestamps:

00:00 - Oh welcome to part three of my neuro
00:03 - evolution flappy bird coding challenge
00:06 - alright so jump oh yes oh that look like
00:10 - it should probably should have hit the
00:12 - pipe there but anyway that aside look at
00:15 - these birds they're really trying to get
00:17 - through those gaps in the pipes alright
00:19 - so I want to do a few things to improve
00:22 - them number one this is a little bit
00:24 - ridiculous that I have to sit here and
00:26 - wait and let it run it's kind of
00:27 - enjoyable I mean I'll have to go soon so
00:30 - I got to speed this up so here's one
00:32 - thing I'm gonna do to speed this up I am
00:35 - going to I don't need to like all of the
00:38 - logic that's driving the game I could
00:41 - just do that many many times per frame
00:44 - right I don't actually need to draw and
00:48 - show the animation so for example if I
00:51 - were so one thing I need to do is
00:52 - separate out all the logic of the game
00:55 - from the drawing so one thing I'm going
00:56 - to do is I'm going to take out pipes
00:58 - show here let me just this is like
01:01 - counter is part of the game logic
01:05 - looping through all the pipes and
01:07 - checking them that's part of the game
01:09 - looping through all the birds if Birds
01:11 - this is part of the game so what I just
01:14 - put I book drawing is not so let me take
01:16 - out bird show and now I'm just gonna at
01:18 - the end here set say let for let bird of
01:23 - Birds bird show for let pipe of pipes
01:30 - pipe dot show this should be exactly the
01:34 - same nothing has changed but now and I
01:38 - might as well take the background and
01:39 - put the background here so this is all
01:42 - the drawing stuff and now what I'm going
01:47 - to do is I'm gonna say for let n equal 0
01:51 - n is less than cycles a call it cycles
01:54 - see n plus plus I'm going to do all of
01:57 - the game logic stuff many many times
01:59 - oops which goes all the way down to here
02:02 - so and then I'm going to say let cycles
02:05 - equal 100 so watch this so now this is
02:10 - just like doing it really really fast Oh
02:13 - time but I want to be able to like speed
02:15 - it up and slow it down also so one thing
02:19 - that I can do to do that is I am going
02:21 - to say let slider slider equals create
02:27 - slider I'm gonna make a slider that goes
02:30 - from 1 to 100 and starts at 1 and that
02:35 - I'm just gonna say slider dot value so
02:38 - instead of a variable called cycles I'm
02:41 - just gonna use the value of that slider
02:43 - so now I've got a little slider here I
02:47 - can speed things up and I can slow them
02:49 - back down so this is gonna help me a lot
02:51 - where instead of having to like speed up
02:53 - the video that you're watching if I'm
02:55 - editing this after the fact I can
02:57 - actually just do this so in fact I could
02:58 - let this go for a little bit and then I
03:01 - could come back and see like how we
03:03 - doing here we got one that's doing
03:04 - pretty well so but here's the thing I
03:06 - also think there are some things that I
03:08 - really need to do to help the help the
03:10 - evolutionary process along one thing is
03:14 - I'm gonna go into the neural network
03:16 - code and look at how I'm doing mutation
03:19 - so this is the mutate function so first
03:23 - of all I'm a little suspicious here I
03:26 - want to make sure that mutation is
03:28 - really happening so let me at least
03:36 - console.log test I just want to see I'll
03:44 - call it I just want to see that this is
03:46 - happening in the code somewhere and I'm
03:48 - gonna go back to sketch digest and just
03:50 - have like three birds because I don't
03:54 - want it to go crazy so as soon as the
03:57 - three are done I should see mutate
03:58 - mutate yeah so I got a bunch of
04:00 - mutations that's good so that is being
04:02 - called
04:02 - so hopefully the weights are being
04:04 - changed but you know what might work
04:06 - better I think I have a sneaking
04:08 - suspicion is that it might actually help
04:12 - me to rather than when I mutate pick an
04:15 - entirely new weight so you know what's
04:18 - going on here the internals of the
04:21 - neural network are something that I
04:23 - haven't talked about in this series
04:24 - that's really something reserved for my
04:26 - other videos about how neural networks
04:27 - work the only thing that's relevant in
04:29 - this series is the inputs of the game
04:31 - come in the outputs come out and the
04:34 - output tells me whether I should jump or
04:36 - not but what's actually stored inside
04:40 - the neural network or a bunch of numbers
04:42 - between negative 1 and 1 for all of
04:45 - these connections and so mutation means
04:47 - just pluck one of them out and give it a
04:49 - new value but if it's one that's doing
04:52 - sir pretty well I just were to like
04:54 - tweak the value a little bit instead of
04:56 - just giving it a whole new value and
04:58 - also what if I were to just tweak it a
05:01 - tiny bit so use one way I could do that
05:03 - is use a Gaussian distribution of random
05:05 - numbers random numbers they cluster
05:07 - around like a mean of zero but are often
05:10 - like so just like I want to give each a
05:12 - little bit of a nudge so let me come
05:14 - back over here and I'm gonna have to
05:17 - build in Gaussian random number
05:18 - generation into the library the neural
05:21 - network library but right now since I
05:22 - have p5 involved just to fix that I'm
05:25 - gonna comment this out and I'm gonna say
05:27 - return Val so this would be just like me
05:32 - adjusting the value a little bit right
05:33 - return the actual value changed by a
05:36 - little random amount but I think I'm
05:38 - gonna because when I did this for my
05:40 - class last year actually I remember
05:44 - using random Gaussian which is this is
05:46 - now a p5 function from the p5 library
05:48 - this doesn't exist in JavaScript so
05:50 - gotta implement that into my library
05:52 - that'll work for now the mean would be 0
05:54 - and the standard deviation would be like
05:56 - point 1 let's try that so let's see how
05:59 - this goes oh and let me I took out the
06:02 - console.log and let's give this a whirl
06:05 - now all right so I'm gonna speed this up
06:08 - and I'm also oh wait there's only like 2
06:12 - of them so the other thing I need to do
06:14 - is let's get myself a nice population
06:16 - let's try 500 of these all right so
06:19 - there's 500 going I'm gonna speed this
06:21 - up and I'm gonna let this run for a
06:22 - little while and I will be back
06:24 - [Music]
06:33 - all right so it looks to me like we've
06:35 - done it there you know there's so much
06:38 - variation in here but I've evolved it
06:40 - for now 76 generations and what we see
06:44 - here is that we've got a bunch that are
06:47 - still alive and they're probably one in
06:49 - there that has pretty optimal weights
06:50 - and it's making it through now one thing
06:53 - that I would really like to do is it's
06:55 - kind of more fun to watch this if I show
06:57 - only the one that's kind of doing it bet
07:00 - doing best but at some point there will
07:02 - only be one left but I think we're
07:04 - pretty much there here's some things
07:05 - that you might want it that I would love
07:07 - to do with this in another part but I'm
07:09 - gonna leave them as exercises for the
07:11 - viewer come on oh yeah over um so a
07:16 - couple things one is that I can keep
07:18 - track of the single agent the single
07:21 - bird that has done the best overall time
07:23 - over all generations and I could save
07:26 - that in a variable like the best bird
07:28 - record bird and and what I could do is
07:30 - actually I could download those weights
07:32 - I could save those weights to like a
07:34 - JSON file it's neural network
07:36 - configuration to a JSON file or even
07:39 - just save it in memory and I could
07:41 - always just click a button or something
07:42 - and say let me just see this one so
07:45 - that's something I would really love to
07:46 - add to this it's actually I might as
07:49 - well just show it to you because the
07:52 - example that I made for my course which
07:57 - is here is essentially exactly the same
08:00 - but there's a couple different things so
08:02 - one is I'm gonna so let me just ramp up
08:04 - this speed here so let me let this run
08:07 - for a little while the games may be a
08:09 - little bit different in this one and but
08:11 - so one of the things that I like about
08:12 - this is once I've let it run for a
08:14 - little while I can just click run best
08:17 - so far so now it and I could speed this
08:19 - up a little bit but I think I better
08:22 - train it more because I didn't get a
08:24 - really good one so so this is the idea
08:26 - of being able to just run the best one
08:28 - that's done you know that that has the
08:30 - best high score look at this okay so I'm
08:31 - gonna now
08:32 - do this so we can see this one that kind
08:36 - of has a pretty good sense of how to
08:38 - play the game kind of running just watch
08:41 - that one on its own it's very satisfying
08:44 - to watch like amazed that it's doing it
08:47 - so that's one thing that would be worth
08:49 - as an exercise trying to add to this
08:51 - implementation that I made now once I
08:53 - even do that I could save it to a file
08:55 - so there's actually in the toy neural
08:58 - network library there's a like a save
08:59 - Jason I think function so I could save
09:01 - it to a file to reload later so if I'm
09:03 - training it all day or for an hour I
09:05 - could save it and bring it into another
09:07 - biome that's one thing another thing
09:09 - that I might want to do is I could
09:10 - probably optimize the fitness function
09:12 - quite a bit for example what if and this
09:15 - is a thank you to versatility for this
09:18 - this suggestion what if I actually
09:20 - scored not just how long it lasts but
09:23 - how well it maintains its look why
09:26 - location in between the top and bottom
09:28 - of those two pipes so that would be
09:30 - there you could probably think of many
09:32 - other ways that you could optimize this
09:34 - so saving it making the interface you
09:37 - know now we could also take this and we
09:39 - could go and add all the fun coding
09:41 - train design elements from the original
09:42 - from that flappy bird clone repository
09:45 - pull request now start the floodgates
09:47 - are open so we could make a version of
09:49 - this that maybe has even like a saved
09:53 - pre-trained flappy bird agent another
09:56 - suggestion that just came in from the
09:57 - chat is the actual Y velocity as an
10:00 - input as well because if I'm already
10:02 - moving up maybe I shouldn't jump verses
10:05 - by moving down so that's something you
10:06 - can add oh and here's another one
10:07 - what if actually instead of my own
10:13 - manual feature extraction where I'm kind
10:15 - of evaluating the flappy bird scene to
10:18 - make inputs what if just the pixels what
10:22 - if it was just the pixels of the game
10:23 - itself that became the input but now we
10:26 - have a problem right we have a problem
10:29 - which is that I am looking at a scene
10:33 - let me just speed this up with come on
10:38 - let me just refresh right I am looking
10:41 - at a scene with many many many many
10:43 - birds playing all at once
10:46 - if I want to use the pixels of the game
10:48 - as input I cannot have the whole
10:51 - population there I need to have just the
10:54 - one current bird that is playing so I
10:56 - have to create a graphics context for
10:59 - every single member of the population
11:00 - and in fact this flappy bird game is so
11:03 - simple that actually as the player plays
11:07 - the game it doesn't affect how the game
11:09 - plays out imagine if I were doing my
11:10 - asteroids coding challenge I can't have
11:13 - them all play in the same world because
11:15 - if one shoots an asteroid the other one
11:17 - hasn't shot that asteroid the game is
11:19 - changing for all of them so another
11:22 - thought experiment could be how could I
11:24 - actually make this work
11:25 - where I see instead of all of them
11:28 - playing within one canvas a grid of the
11:32 - whole population lots of little little
11:33 - little versions of the game all playing
11:35 - together you know to be honest to make
11:37 - this work I don't have to see anything
11:38 - at all but try doing this with another
11:40 - game can you find my snake challenge my
11:43 - asteroids challenge my Frogger challenge
11:46 - any of those now could be trained a bot
11:50 - could be trained to play that game using
11:52 - the exact same technique all right from
11:55 - the chat I also just learned that I have
11:57 - a couple mistakes one is that supposedly
12:01 - I guess in the game flappy bird if you
12:02 - go to the bottom you die so I don't have
12:05 - that implemented be interesting to see
12:06 - if it could solve itself with that also
12:08 - the way that I'm finding the closest
12:10 - pipe it's no longer the closest pipe
12:13 - right as it gets right up to it and so I
12:16 - really should not consider to be the
12:17 - closest pipe until it's gone all the way
12:19 - past but there's lots of little tweaks
12:21 - and minor things so I would gladly
12:24 - encourage you to create your own
12:25 - versions of this and submit them as
12:27 - community contributions and I'll look at
12:30 - them and maybe do another live stream
12:31 - next week or whenever I do the next live
12:33 - stream going through and showing some of
12:35 - these community contributions all right
12:37 - so thank you very much for watching this
12:41 - three-part to fuel coding challenge if
12:44 - it was really in three parts a penalty
12:45 - three I look forward to doing more many
12:48 - more coding challenges hopefully maybe
12:51 - around a more neural evolution coding
12:53 - challenges because
12:54 - kind of one of my favorite topics okay
12:55 - thanks for watching and I'll see you in
12:57 - the future video
12:58 - [Music]

Cleaned transcript:

Oh welcome to part three of my neuro evolution flappy bird coding challenge alright so jump oh yes oh that look like it should probably should have hit the pipe there but anyway that aside look at these birds they're really trying to get through those gaps in the pipes alright so I want to do a few things to improve them number one this is a little bit ridiculous that I have to sit here and wait and let it run it's kind of enjoyable I mean I'll have to go soon so I got to speed this up so here's one thing I'm gonna do to speed this up I am going to I don't need to like all of the logic that's driving the game I could just do that many many times per frame right I don't actually need to draw and show the animation so for example if I were so one thing I need to do is separate out all the logic of the game from the drawing so one thing I'm going to do is I'm going to take out pipes show here let me just this is like counter is part of the game logic looping through all the pipes and checking them that's part of the game looping through all the birds if Birds this is part of the game so what I just put I book drawing is not so let me take out bird show and now I'm just gonna at the end here set say let for let bird of Birds bird show for let pipe of pipes pipe dot show this should be exactly the same nothing has changed but now and I might as well take the background and put the background here so this is all the drawing stuff and now what I'm going to do is I'm gonna say for let n equal 0 n is less than cycles a call it cycles see n plus plus I'm going to do all of the game logic stuff many many times oops which goes all the way down to here so and then I'm going to say let cycles equal 100 so watch this so now this is just like doing it really really fast Oh time but I want to be able to like speed it up and slow it down also so one thing that I can do to do that is I am going to say let slider slider equals create slider I'm gonna make a slider that goes from 1 to 100 and starts at 1 and that I'm just gonna say slider dot value so instead of a variable called cycles I'm just gonna use the value of that slider so now I've got a little slider here I can speed things up and I can slow them back down so this is gonna help me a lot where instead of having to like speed up the video that you're watching if I'm editing this after the fact I can actually just do this so in fact I could let this go for a little bit and then I could come back and see like how we doing here we got one that's doing pretty well so but here's the thing I also think there are some things that I really need to do to help the help the evolutionary process along one thing is I'm gonna go into the neural network code and look at how I'm doing mutation so this is the mutate function so first of all I'm a little suspicious here I want to make sure that mutation is really happening so let me at least console.log test I just want to see I'll call it I just want to see that this is happening in the code somewhere and I'm gonna go back to sketch digest and just have like three birds because I don't want it to go crazy so as soon as the three are done I should see mutate mutate yeah so I got a bunch of mutations that's good so that is being called so hopefully the weights are being changed but you know what might work better I think I have a sneaking suspicion is that it might actually help me to rather than when I mutate pick an entirely new weight so you know what's going on here the internals of the neural network are something that I haven't talked about in this series that's really something reserved for my other videos about how neural networks work the only thing that's relevant in this series is the inputs of the game come in the outputs come out and the output tells me whether I should jump or not but what's actually stored inside the neural network or a bunch of numbers between negative 1 and 1 for all of these connections and so mutation means just pluck one of them out and give it a new value but if it's one that's doing sir pretty well I just were to like tweak the value a little bit instead of just giving it a whole new value and also what if I were to just tweak it a tiny bit so use one way I could do that is use a Gaussian distribution of random numbers random numbers they cluster around like a mean of zero but are often like so just like I want to give each a little bit of a nudge so let me come back over here and I'm gonna have to build in Gaussian random number generation into the library the neural network library but right now since I have p5 involved just to fix that I'm gonna comment this out and I'm gonna say return Val so this would be just like me adjusting the value a little bit right return the actual value changed by a little random amount but I think I'm gonna because when I did this for my class last year actually I remember using random Gaussian which is this is now a p5 function from the p5 library this doesn't exist in JavaScript so gotta implement that into my library that'll work for now the mean would be 0 and the standard deviation would be like point 1 let's try that so let's see how this goes oh and let me I took out the console.log and let's give this a whirl now all right so I'm gonna speed this up and I'm also oh wait there's only like 2 of them so the other thing I need to do is let's get myself a nice population let's try 500 of these all right so there's 500 going I'm gonna speed this up and I'm gonna let this run for a little while and I will be back all right so it looks to me like we've done it there you know there's so much variation in here but I've evolved it for now 76 generations and what we see here is that we've got a bunch that are still alive and they're probably one in there that has pretty optimal weights and it's making it through now one thing that I would really like to do is it's kind of more fun to watch this if I show only the one that's kind of doing it bet doing best but at some point there will only be one left but I think we're pretty much there here's some things that you might want it that I would love to do with this in another part but I'm gonna leave them as exercises for the viewer come on oh yeah over um so a couple things one is that I can keep track of the single agent the single bird that has done the best overall time over all generations and I could save that in a variable like the best bird record bird and and what I could do is actually I could download those weights I could save those weights to like a JSON file it's neural network configuration to a JSON file or even just save it in memory and I could always just click a button or something and say let me just see this one so that's something I would really love to add to this it's actually I might as well just show it to you because the example that I made for my course which is here is essentially exactly the same but there's a couple different things so one is I'm gonna so let me just ramp up this speed here so let me let this run for a little while the games may be a little bit different in this one and but so one of the things that I like about this is once I've let it run for a little while I can just click run best so far so now it and I could speed this up a little bit but I think I better train it more because I didn't get a really good one so so this is the idea of being able to just run the best one that's done you know that that has the best high score look at this okay so I'm gonna now do this so we can see this one that kind of has a pretty good sense of how to play the game kind of running just watch that one on its own it's very satisfying to watch like amazed that it's doing it so that's one thing that would be worth as an exercise trying to add to this implementation that I made now once I even do that I could save it to a file so there's actually in the toy neural network library there's a like a save Jason I think function so I could save it to a file to reload later so if I'm training it all day or for an hour I could save it and bring it into another biome that's one thing another thing that I might want to do is I could probably optimize the fitness function quite a bit for example what if and this is a thank you to versatility for this this suggestion what if I actually scored not just how long it lasts but how well it maintains its look why location in between the top and bottom of those two pipes so that would be there you could probably think of many other ways that you could optimize this so saving it making the interface you know now we could also take this and we could go and add all the fun coding train design elements from the original from that flappy bird clone repository pull request now start the floodgates are open so we could make a version of this that maybe has even like a saved pretrained flappy bird agent another suggestion that just came in from the chat is the actual Y velocity as an input as well because if I'm already moving up maybe I shouldn't jump verses by moving down so that's something you can add oh and here's another one what if actually instead of my own manual feature extraction where I'm kind of evaluating the flappy bird scene to make inputs what if just the pixels what if it was just the pixels of the game itself that became the input but now we have a problem right we have a problem which is that I am looking at a scene let me just speed this up with come on let me just refresh right I am looking at a scene with many many many many birds playing all at once if I want to use the pixels of the game as input I cannot have the whole population there I need to have just the one current bird that is playing so I have to create a graphics context for every single member of the population and in fact this flappy bird game is so simple that actually as the player plays the game it doesn't affect how the game plays out imagine if I were doing my asteroids coding challenge I can't have them all play in the same world because if one shoots an asteroid the other one hasn't shot that asteroid the game is changing for all of them so another thought experiment could be how could I actually make this work where I see instead of all of them playing within one canvas a grid of the whole population lots of little little little versions of the game all playing together you know to be honest to make this work I don't have to see anything at all but try doing this with another game can you find my snake challenge my asteroids challenge my Frogger challenge any of those now could be trained a bot could be trained to play that game using the exact same technique all right from the chat I also just learned that I have a couple mistakes one is that supposedly I guess in the game flappy bird if you go to the bottom you die so I don't have that implemented be interesting to see if it could solve itself with that also the way that I'm finding the closest pipe it's no longer the closest pipe right as it gets right up to it and so I really should not consider to be the closest pipe until it's gone all the way past but there's lots of little tweaks and minor things so I would gladly encourage you to create your own versions of this and submit them as community contributions and I'll look at them and maybe do another live stream next week or whenever I do the next live stream going through and showing some of these community contributions all right so thank you very much for watching this threepart to fuel coding challenge if it was really in three parts a penalty three I look forward to doing more many more coding challenges hopefully maybe around a more neural evolution coding challenges because kind of one of my favorite topics okay thanks for watching and I'll see you in the future video
