With timestamps:

00:00 - hi everyone happy winter it is a
00:03 - beautiful day here in Brooklyn New York
00:05 - the snow is coming down it is quite
00:07 - chilly out it is the perfect time for a
00:09 - coating video so in a moment I'm gonna
00:11 - head into the Cabana and attempt to
00:13 - program the hilbert curve which is known
00:15 - as a space-filling curve and make a
00:18 - visualization of it I hope you enjoy it
00:19 - there's no heat in there so we'll see
00:21 - how long I last but come and join me in
00:24 - the Cabana
00:25 - [Music]
00:32 - can't see anything my glasses fogged up
00:34 - I have a confession to make it's
00:37 - actually the next day I had some
00:39 - technical difficulties after my intro in
00:42 - the snow there but I'm back this morning
00:44 - and it's very cool if you could see by
00:47 - that breath by the steam but I am so
00:51 - excited to be here and to visualize the
00:54 - Hilbert curve with you here in the
00:56 - Cabana today the bells are ringing must
00:59 - be time to get started coding as usual
01:02 - my frame of reference will be the
01:04 - Wikipedia page I should say that though
01:07 - if you're here and you've never heard
01:09 - about the Hilbert curve before what what
01:11 - I would suggest is actually taking a
01:13 - look at the three blue one brown video
01:15 - about space-filling curves the beauty
01:18 - and math of infinity another really
01:21 - important reference for this video that
01:22 - I read this morning that's super helpful
01:24 - is an article blog post by Marcin
01:26 - chadwick apologies if I mispronounce the
01:28 - name from August 2016 which looks at an
01:31 - iterative algorithm for drawing the
01:32 - hilbert curve in fact that's the exact
01:34 - algorithm I'm going to use it's the one
01:35 - that's also described down here in a
01:37 - very opaque and confusing way on the
01:39 - Wikipedia page in pseudocode but
01:42 - hopefully by the time I get finished
01:43 - programming this if it works we'll be
01:45 - able to see how that matches up to these
01:47 - two references so the hilbert curve
01:48 - which is a fractal a space-filling curve
01:51 - described by german mathematician David
01:53 - Hilbert was invented in 1891 and what
01:57 - I'm going to do because I'm living in a
01:59 - discrete world of processing and pixel
02:01 - space is create something called a
02:03 - pseudo-hilbert curve the actual Hilbert
02:05 - curve only exists as iterations go to
02:08 - infinity so let me explain what I mean
02:11 - by this
02:11 - so Hilbert curve can be thought of with
02:15 - it with a given order so if I say order
02:17 - equals 1 then what I have and I have a
02:21 - two-dimensional space and this
02:23 - two-dimensional space can be infinite
02:24 - the Hilbert curve exists as a sequence a
02:27 - series of four points 1 2 3 4 and I
02:32 - really should number them 0 1 2 3 now
02:36 - I'm actually drawing this upside down
02:38 - from how it's usually drawn but that's
02:40 - because I'm going to work in a pixel
02:41 - space where 0 0 is that
02:43 - left corner so that's the pseudo-hilbert
02:45 - curve order 1 if I have order equals 2
02:50 - then I take that same 2 dimensional
02:54 - space and I subdivide it into 4
02:57 - quadrants 0 1 2 & 3 and then I take that
03:03 - first order Hilbert curve and put it in
03:08 - every single one of those quadrants and
03:09 - the idea now is to connect them 0 1 2 3
03:12 - 4 5 6 7 8 9 10 11 12 13 14 15 so that's
03:21 - 16 points I should note there's an
03:23 - important property going on here if the
03:25 - order is 2 2 squared is 4 is the number
03:29 - of quadrants I have and then the number
03:31 - of points I have oh actually no no no
03:34 - not it's 2 squared but it's it's 2 to
03:37 - the order power we'll see that and then
03:40 - the number of points I have is actually
03:41 - 4 squared which is 16 this is going to
03:44 - become an important property because
03:45 - these numbers what the order is what's
03:47 - the total number of points in the curve
03:49 - are of how many quadrants are all all
03:51 - those are gonna be important when I
03:52 - program this they have to be but this
03:54 - doesn't look like anything we've seen on
03:56 - the Wikipedia page or the blog post and
03:57 - 3 blue on brown video this doesn't
03:59 - connect up properly what I need to do
04:01 - with this top left quadrant and and top
04:03 - right quadrant is rotate that first
04:06 - order curve like this so now if I draw
04:10 - this again and I take this top left and
04:13 - rotate it counterclockwise these two
04:16 - stay the same and this top right and
04:18 - rotated clockwise now I could connect
04:21 - this here the connect this here I
04:22 - connect this here and this is what we
04:25 - typically see as the second-order
04:26 - hilbert curve let's go ahead and do the
04:30 - third order Hilbert curve I'm gonna have
04:33 - a really hard time drawing this so it'll
04:34 - be much better visualized by this
04:36 - reference image on the Wikipedia page
04:38 - itself first to third order curves but
04:40 - let's give this a try nonetheless so if
04:44 - I have a two-dimensional space it's
04:46 - subdivided it's it's so divided twice so
04:51 - that should be 2 to the third power
04:54 - which is 8 and then
04:56 - eight squared is 6 is 64 so the whole
05:00 - third order Hilbert Cerf chef 64 points
05:03 - but basically the first order curve is
05:06 - in each one of these smaller smallest
05:09 - squares the second order curve is in
05:11 - each one of these and then of course the
05:14 - third order curve makes up the whole
05:15 - thing so let's do this this is right
05:20 - we're just doing copies and then up here
05:24 - this well let me connect them and this
05:29 - connects here and then I need to do the
05:32 - same thing up here but this has to be
05:34 - rotated so I think if I do this right
05:38 - because this goes like this now I can
05:42 - rotate this one to draw it like this
05:51 - connect it come back this gets connected
05:56 - here and this cuts connected here so
05:59 - this is the third order curve oh I don't
06:03 - know if you were able to follow that but
06:04 - basically with each subsequent iteration
06:07 - we take the version of the
06:09 - pseudo-hilbert curve from the previous
06:11 - iteration we tile it rotate the top left
06:15 - and top right and make the connections
06:17 - then this one gets tiled in these four
06:21 - spots with the top left and top right
06:23 - rotate it and those are connected and we
06:24 - could keep going I'm not gonna attempt
06:26 - to draw it I think this is the time
06:27 - where I really need to write some code
06:30 - so a wonderful lucky thing happened it
06:33 - was as if the Cabana gods the gods of
06:35 - the Cabana knew that processing for the
06:38 - alpha version of processing 4 was going
06:40 - to come out overnight and made me have
06:43 - all these technical difficulties
06:44 - yesterday and and forced me to re-record
06:46 - this morning because in fact there is a
06:48 - new version of processing it's alpha
06:50 - processing 4 I'm gonna attempt to use it
06:51 - I've already downloaded it I will
06:53 - include a link to where you can download
06:55 - it if you want to try it but you know I
06:56 - don't know if this is the official
06:58 - there's no official recommendation to
06:59 - move to processing for just yes now fun
07:01 - oh look how pretty it is oh it's lovely
07:03 - save my sketch call it Hilbert fingers
07:08 - are so cold
07:09 - oh there's the butt bug report
07:10 - we gotta file an issue we get some
07:12 - errors in the console that's right setup
07:16 - bitterly that's right draw fortunately I
07:20 - think this won't take too long
07:22 - I have a good sense of how to do it
07:23 - famous last words of the programmer I
07:26 - want to use a square processing window
07:29 - I'm sure you could come up with a clever
07:30 - way of doing it where it isn't square
07:31 - I'm gonna use powers of two that seems
07:33 - to be important and everything that I've
07:34 - been drawing background zero so if I
07:39 - think about this I want a variable
07:40 - that's called order and we'll start with
07:42 - the first order curve the other thing
07:44 - that I want is I want a function called
07:48 - Hilbert that if I pass it in index out
07:53 - comes the XY location of where it is in
07:57 - the pseudo-hilbert curve so if I give it
07:59 - zero I get this point zero zero if I
08:03 - give it one I get this point zero 1 1 1
08:08 - 1 0 let's actually just do that really
08:11 - quickly let's we'll start with that P
08:13 - values P vectors P vector Hilbert into I
08:16 - for index and then I need an array of
08:20 - points I'm just gonna hard code these in
08:23 - the birds are out somehow I don't know
08:26 - who the birds are out there's freezing
08:28 - cold weather a P vector when I say zero
08:30 - zero and then I can just say return
08:38 - points index I this is very easy
08:42 - well it is easy for the first-order
08:44 - filter I need the total number of points
08:47 - so let's take let's make a variable n
08:50 - which is 2 to the order or power and
08:54 - then I know that the total number of
08:56 - points is n time N squared n times n oh
08:59 - and this needs to be converted into an
09:02 - integer ok so now I can iterate over all
09:07 - the points all my fingers are no and I
09:10 - can say P vector V is Hilbert index eyes
09:15 - I have these four points in the first
09:18 - order Hilbert curve pseudo-hilbert curve
09:20 - 0 1 2 3 and I just want the function to
09:24 - them back to me I'm gonna assume that
09:26 - what I ultimately want to do here is
09:27 - animate so I well I could just draw them
09:31 - right there and set up I'm going to
09:33 - create a variable called path which has
09:35 - a new array of P vectors with total
09:39 - number of spots and then I don't even
09:41 - need this V here I just say path index I
09:45 - equals Hilbert I ha so you might notice
09:50 - that the coordinates of these points are
09:52 - the unit of measurement is I don't know
09:54 - what its pixels but I'm only going like
09:56 - one pixel so I need to expand that out
09:57 - according to the width of my wind
10:02 - processing window itself so this should
10:04 - be the width divided this length is
10:08 - probably is ultimately I think width
10:10 - divided by 2 which would be width
10:12 - divided by n so I can say that the
10:16 - length of each line is the width divided
10:19 - by n path index I multiplied by that
10:24 - length and then in draw let's create a
10:30 - counter to go over the points one at a
10:33 - time the game shape let's say begin
10:35 - shape and shape iterate over the path
10:49 - no fill
10:52 - oh there we go ah but I need to offset
10:55 - it so it's in the top left because zero
10:57 - zero is there let's offset by half of
11:00 - the length path index I add length
11:03 - divided by two length divided by two and
11:07 - there we go we're getting there we're
11:12 - gonna go for order number two next let's
11:15 - add a little flair let's draw a little
11:18 - points let's draw than the index there
11:25 - as well
11:26 - copy paste is my friend when it's cold
11:32 - okay so I can also see the index values
11:34 - this is gonna help us as I keep going
11:38 - here let's look at order number two so
11:41 - the first thing I want to see is can I
11:43 - get four copies of order one if I were
11:46 - just to like divide the length again by
11:49 - two I'd see the first order curve in the
11:52 - top left which is good so that means
11:55 - that that's right because this changes
11:57 - to two then now n is four so the length
12:02 - is width divided by four and the total
12:05 - number points is sixteen but I have an
12:07 - array index out of bounds exception
12:08 - because I don't have sixteen points ah
12:13 - now is comes the magic binary numbers
12:18 - counting in binary let's look at the
12:21 - binary representation of the numbers of
12:23 - the first eight points of the Hilbert
12:26 - curve so that's the arrow through seven
12:28 - which would be zero zero zero zero one
12:35 - so this is the binary representation of
12:39 - the first eight numbers and I could keep
12:42 - going with eight because we have 16 but
12:43 - let's just start here you might notice a
12:45 - repeating pattern here 0 1 2 3 0 1 2 3
12:49 - so interestingly if I look at the first
12:52 - these 2 bits here that's going to give
12:55 - me the index into the first order a
13:03 - Hilbert curve when this comes
13:05 - in say int index equals I ampersand I
13:12 - think three I'll talk about what that is
13:15 - and let's just see if this works
13:19 - aha yes I have all four copies of the
13:21 - pseudo-hilbert curve in the top left
13:24 - because I am just looking at these first
13:26 - two bits now look at this 0 0 0 0 1 1 1
13:30 - 1 what do those two bits mean
13:33 - well those four bits can be mapped to
13:37 - which quadrant they're in 0 0 0 1 1 0 1
13:43 - 1 so the next thing oh I have to talk
13:46 - about ampersand I've typed why do I put
13:47 - ampersand in there this is called bit
13:49 - masking it's not corrected on the screen
13:55 - basically the number 3 in binary is 0 0
13:59 - 1 1 so any binary number that you do the
14:03 - and operator with like let's say I pick
14:05 - 7 which was 0 1 1 1 1 1 true and true is
14:10 - still true 1 1 and 1 is also 1 0 & 1
14:14 - that's not true they both have to be 1
14:16 - so this becomes a 0 so it doesn't matter
14:18 - whatever is in here because I'm using
14:20 - the ant operation these will always come
14:21 - zeros and I'm left with just these last
14:23 - two bits so what I want to do though
14:26 - however is look at these two bits next
14:29 - if I have something like 0 1 1 1 I can
14:32 - shift the bits and I believe in Java if
14:35 - I write this I don't remember how many
14:37 - of these I have 2 or 3 this I shift the
14:40 - bits over and I would be left with these
14:42 - come back as zeros like this so these
14:44 - get deleted these shift over and I get
14:45 - leading zeros there so then I can say I
14:50 - equals I shift over by 2 and then index
14:56 - now once again equals I ampersand 3 the
15:00 - point I want to return on the first
15:03 - order Hilbert curve is right here so P
15:05 - vector V equals points index then I'm
15:10 - going to shift over and get the next two
15:13 - bits and there are four possibilities
15:16 - the next two bits could be 0 1 2 or
15:19 - three let's just use an if statement if
15:21 - index equals zero then the the curve
15:25 - still is here so do nothing else if
15:27 - index equals one that's here so V dot y
15:36 - go up by one else if index equals two
15:43 - now increase X and y else if index
15:50 - equals three then just V dot X goes up
15:54 - by one and then return V okay so now I
16:00 - have done both pick the point in the
16:04 - first order Hilbert curve and then based
16:07 - on what the next two bits are I am
16:10 - moving to the correct quadrant for the
16:12 - second order hello curve that does not
16:16 - look right
16:16 - ah okay I think I know why so this is
16:20 - length and I want the next one to go
16:23 - down here so I'm actually going by two
16:25 - times length and so that should be plus
16:28 - equals two I should be more thoughtful
16:30 - about this though and I should actually
16:32 - use a variable so let's say afloat
16:34 - length equals I think it's just n
16:36 - whatever this n is two to the power of
16:40 - the order that's the length then I want
16:43 - to go up by that length this doesn't go
16:48 - here it goes here no not at all
16:54 - oh no by the order the order not the not
16:57 - n the order perfect aha but we have that
17:03 - problem so once again I have the problem
17:06 - where I need to rotate let's say I have
17:08 - 0 1 2 3 and I want this to turn on to
17:14 - its side so it is 0 1 2 3 because then
17:21 - it's going to come down to connect to 4
17:23 - 5 6 7 so 0 and to remain the same one in
17:28 - three are swapped
17:29 - so that's index equals zero all I have
17:32 - to do is say
17:33 - vx is V dot Y and V dot y equals V dot X
17:38 - only that won't work because once I've
17:40 - set V dot X to V dot y I can't set V
17:43 - want Y back to V naught X so I have to
17:45 - use a temporary variable to equal to
17:47 - save the value V dot X and then that's
17:49 - here Wow look at that
17:52 - there it is right over here so then I
17:55 - have to do the top right 0 1 2 3 and
18:01 - we're coming in from the bottom here so
18:06 - this is 0 1 2 3 so 0 and to swap but 3 &
18:12 - 1 stay the same so in index 3 right if I
18:18 - were to do this same exact thing this is
18:20 - rotating the wrong way right so that
18:23 - rotates it the wrong way I need 12 the
18:26 - point 12 to end up down here so that I
18:29 - should be able to say one - and one -
18:33 - there we go ha oh my goodness what
18:37 - second-order hilbert curve oh length
18:40 - equals order so this should be length
18:42 - sorry why do I do I need a separate
18:45 - variable here I'm confused
18:47 - well we're gonna find out I'm sure
18:50 - there's something wrong let's could I
18:52 - possibly have done everything that I
18:53 - need and I can just change this to 3 no
18:57 - oh wait a second here oh my goodness
19:03 - I've lost my mind
19:04 - I forgot that if I go up another oh I'm
19:07 - really crazy if I I need to do a loop
19:10 - now this has happened over and over
19:11 - again
19:11 - because as I go up I need to continue to
19:16 - shift the bits and check the quadrant of
19:18 - course of course that's the whole point
19:19 - of this iterative interative fractal
19:21 - process so let's use J and we're going
19:25 - to go all the way up to the order right
19:29 - and I can start at 1 because ultimately
19:31 - and this happens here and maybe there's
19:35 - a way to like have the loop be from the
19:36 - beginnings I could but I'm just gonna do
19:38 - this this parts gonna be hard-coded then
19:40 - the loop starts at 1 shift the bits over
19:46 - this is gonna be Jay that's how much I'm
19:48 - shifting because based on the quadrant
19:51 - I keep shifting either one spot or two
19:53 - spots or three spots expanding this is
19:57 - the end of the loop shift the bits mask
20:01 - it get the length and move so this
20:04 - should be three no is J times two
20:12 - okay that looks cool oh I already I have
20:17 - order here so this has to be laying okay
20:20 - all right this looks good
20:22 - this is everything's right except for
20:23 - the top right so I need to shift based
20:26 - on that length I believe so just like
20:29 - length minus one oh there we go look at
20:34 - that third order upper curve mmm I feel
20:38 - like I just like fudged my way through
20:40 - that I'm not sure if I explained it
20:41 - properly
20:41 - oh no no no no fourth well that didn't
20:45 - work okay I think I got it now you've
20:49 - all of you probably screaming at your
20:51 - television nobody's watching this on a
20:53 - television let's be real what I'm
20:57 - considering here is the relative length
20:59 - of each iteration of the Hilbert
21:02 - pseudo-hilbert curve and how does this
21:03 - work well I've got one square then I
21:08 - have four then I have 16
21:15 - so the length here if that's 1 this is
21:21 - 1/2 and this is 1/4 so this is the
21:26 - relative length and by the way it might
21:29 - not have been clear but the smallest one
21:31 - is the one that's coming first because
21:33 - as I am computing all of these locations
21:35 - I'm starting with the smallest
21:36 - first-order Hilbert curve then the next
21:39 - two bits are where is it within it those
21:40 - four quadrants then those four then
21:42 - those four expanding out so this
21:44 - relative length is going up it looks
21:46 - like it's going up times two but I think
21:48 - the next one would be well this times 2
21:52 - it's 2 to the power so the next one
21:55 - would be 1/8 so this has to be 2 to
21:59 - power of Jay could have sworn this was
22:03 - gonna be right length - oh I'm missing a
22:05 - one here how did I lose that one
22:08 - okay that's back now I believe I can
22:12 - change the number to four oh there we go
22:17 - oh it's so lovely
22:19 - okay I don't need the numbers anymore so
22:22 - let's take out the numbers the other
22:24 - thing is I had this count because the
22:26 - idea was that I don't want to draw the
22:27 - whole thing so let's ask counter in here
22:30 - and then we're gonna say counter plus
22:32 - plus that is delightful oh I'm so happy
22:36 - all right so if counter equals path
22:41 - length should I just stop let's just
22:44 - stop I could start it over by sitting
22:46 - counter equal to zero let's start it
22:47 - over perfect
22:55 - all right throw caution to the wind
22:56 - let's jump up by to go to order six just
23:02 - secured watch this all day eight give
23:07 - myself more pixel space let's go up by
23:11 - ten spots each time and change this to
23:13 - greater than all right so why this is
23:17 - going let's think about what we've
23:20 - actually accomplished here for a moment
23:22 - this is actually a mapping this
23:25 - two-dimensional space any XY point can
23:29 - be mapped to an individual index now of
23:32 - course we do this all the time we all
23:35 - the pixels are ordered right so if I
23:40 - have a 10 by 10 grid this is these are
23:42 - pixels 0 through 9 then 10 11 12 but
23:46 - this particular way of mapping between
23:48 - the two-dimensional space in 1
23:50 - dimensional space is not as useful in
23:52 - mathematics as the Hilbert curve so I'll
23:54 - leave you to research that on your own
23:56 - to watch the three blue out Brown video
23:58 - that discusses that looks at this topic
24:01 - more closely there's a lot of ways that
24:03 - this mapping can be useful in computer
24:05 - science and mathematics with different
24:06 - algorithms and in fact if we refer back
24:08 - to the Wikipedia page you'll see here
24:12 - description of how a grayscale
24:13 - photograph can be converted to a dither
24:15 - black-and-white image using threshold in
24:18 - with the leftover amount of each pixel
24:19 - additive next pixel along the old bit
24:21 - curve oh you should try that and you'll
24:23 - also often see the Hilbert curves
24:25 - colored let's try something so I'm not
24:28 - sure how to do this with begin shape a
24:30 - 10 shape but let me just start with one
24:33 - and draw these as lines I minus 1 I
24:37 - minus 1 let's take a peek at our curve
24:40 - oh it's almost finished
24:41 - let's just watch it finish this is a
24:49 - single continuous line isn't that
24:51 - amazing re finished uh-huh so let's just
24:57 - make sure this works exactly the same
24:58 - way with lines yep looks like it does if
25:01 - I now say colormode HSB 360 255 255 so I
25:08 - have a hue hue of a color ranges between
25:11 - 0 and 360 along the sort of color wheel
25:13 - and I can say float H equals map I which
25:18 - goes from 0 to path length to between 0
25:24 - and 360 and then now I'm going to set
25:27 - the stroke to that hue fault call at
25:29 - full brightness full saturation is that
25:32 - color changing I can't tell you oh it's
25:35 - definitely changing let's just draw the
25:36 - whole thing so this would just be total
25:40 - there we go look at that and now I just
25:43 - cannot resist 9 so this by the way is
25:47 - why it's referred to as a space-filling
25:49 - curve if the order of the number of
25:52 - iterations approaches infinity every
25:55 - single spot in this theoretical
25:57 - continuous space would be filled with a
26:00 - line how far can i push this oh look at
26:06 - that we go back to 9 there we go I will
26:11 - leave it at this I will leave this I
26:13 - believe this I'm done
26:14 - I've made this example I will also
26:16 - create a JavaScript version of this with
26:18 - p5.js and I will link that source code
26:20 - in the video description there's so many
26:22 - things you could try here and I would
26:25 - love
26:25 - for you to create your own version of
26:27 - this and share with me so there's a
26:28 - number of ways that you could share with
26:29 - me number one I haven't Kody train is a
26:32 - new discord so you can join the discord
26:34 - of link in this video's description
26:35 - there's a share channel where you can
26:38 - share your work and you can introduce
26:39 - yourself there's a page on the coding
26:41 - training comm for decoding in the Cabana
26:42 - videos where you can submit links to
26:44 - projects and there is the social media
26:49 - so the dot coding train on instagram at
26:53 - Schiffman at the coding korean on
26:54 - twitter please I hope you make something
26:56 - with this hilbert curve think about
26:57 - images and the hilbert curve think about
27:00 - other ways to color other ways to
27:02 - animate other ways to render this one
27:05 - idea that I have if you watch the three
27:08 - blue one brown video you'll see that
27:10 - each iteration each order of the curve
27:13 - interpolates from one to the other
27:15 - that's the animation that three blue one
27:17 - brown demonstrates how would you do that
27:19 - if you compute all the points for the
27:21 - first order and all the points for the
27:23 - second order third order could you
27:25 - interpolate between them more so to
27:27 - speak that I think would be a beautiful
27:29 - thing to try so many more possibilities
27:31 - I hope you enjoyed this video on
27:33 - space-filling curves the hilbert curve
27:35 - my pseudo-hilbert curve right here being
27:39 - rendered in processing for check out for
27:42 - the p5 JavaScript code and I will see
27:44 - you I don't have a catch phrase I've no
27:45 - way of ending these if you have a
27:47 - suggestion for a catch phrase just leave
27:49 - it for me in the comments thank you
27:51 - goodbye
27:53 - [Music]
28:00 - [Music]

Cleaned transcript:

hi everyone happy winter it is a beautiful day here in Brooklyn New York the snow is coming down it is quite chilly out it is the perfect time for a coating video so in a moment I'm gonna head into the Cabana and attempt to program the hilbert curve which is known as a spacefilling curve and make a visualization of it I hope you enjoy it there's no heat in there so we'll see how long I last but come and join me in the Cabana can't see anything my glasses fogged up I have a confession to make it's actually the next day I had some technical difficulties after my intro in the snow there but I'm back this morning and it's very cool if you could see by that breath by the steam but I am so excited to be here and to visualize the Hilbert curve with you here in the Cabana today the bells are ringing must be time to get started coding as usual my frame of reference will be the Wikipedia page I should say that though if you're here and you've never heard about the Hilbert curve before what what I would suggest is actually taking a look at the three blue one brown video about spacefilling curves the beauty and math of infinity another really important reference for this video that I read this morning that's super helpful is an article blog post by Marcin chadwick apologies if I mispronounce the name from August 2016 which looks at an iterative algorithm for drawing the hilbert curve in fact that's the exact algorithm I'm going to use it's the one that's also described down here in a very opaque and confusing way on the Wikipedia page in pseudocode but hopefully by the time I get finished programming this if it works we'll be able to see how that matches up to these two references so the hilbert curve which is a fractal a spacefilling curve described by german mathematician David Hilbert was invented in 1891 and what I'm going to do because I'm living in a discrete world of processing and pixel space is create something called a pseudohilbert curve the actual Hilbert curve only exists as iterations go to infinity so let me explain what I mean by this so Hilbert curve can be thought of with it with a given order so if I say order equals 1 then what I have and I have a twodimensional space and this twodimensional space can be infinite the Hilbert curve exists as a sequence a series of four points 1 2 3 4 and I really should number them 0 1 2 3 now I'm actually drawing this upside down from how it's usually drawn but that's because I'm going to work in a pixel space where 0 0 is that left corner so that's the pseudohilbert curve order 1 if I have order equals 2 then I take that same 2 dimensional space and I subdivide it into 4 quadrants 0 1 2 & 3 and then I take that first order Hilbert curve and put it in every single one of those quadrants and the idea now is to connect them 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 so that's 16 points I should note there's an important property going on here if the order is 2 2 squared is 4 is the number of quadrants I have and then the number of points I have oh actually no no no not it's 2 squared but it's it's 2 to the order power we'll see that and then the number of points I have is actually 4 squared which is 16 this is going to become an important property because these numbers what the order is what's the total number of points in the curve are of how many quadrants are all all those are gonna be important when I program this they have to be but this doesn't look like anything we've seen on the Wikipedia page or the blog post and 3 blue on brown video this doesn't connect up properly what I need to do with this top left quadrant and and top right quadrant is rotate that first order curve like this so now if I draw this again and I take this top left and rotate it counterclockwise these two stay the same and this top right and rotated clockwise now I could connect this here the connect this here I connect this here and this is what we typically see as the secondorder hilbert curve let's go ahead and do the third order Hilbert curve I'm gonna have a really hard time drawing this so it'll be much better visualized by this reference image on the Wikipedia page itself first to third order curves but let's give this a try nonetheless so if I have a twodimensional space it's subdivided it's it's so divided twice so that should be 2 to the third power which is 8 and then eight squared is 6 is 64 so the whole third order Hilbert Cerf chef 64 points but basically the first order curve is in each one of these smaller smallest squares the second order curve is in each one of these and then of course the third order curve makes up the whole thing so let's do this this is right we're just doing copies and then up here this well let me connect them and this connects here and then I need to do the same thing up here but this has to be rotated so I think if I do this right because this goes like this now I can rotate this one to draw it like this connect it come back this gets connected here and this cuts connected here so this is the third order curve oh I don't know if you were able to follow that but basically with each subsequent iteration we take the version of the pseudohilbert curve from the previous iteration we tile it rotate the top left and top right and make the connections then this one gets tiled in these four spots with the top left and top right rotate it and those are connected and we could keep going I'm not gonna attempt to draw it I think this is the time where I really need to write some code so a wonderful lucky thing happened it was as if the Cabana gods the gods of the Cabana knew that processing for the alpha version of processing 4 was going to come out overnight and made me have all these technical difficulties yesterday and and forced me to rerecord this morning because in fact there is a new version of processing it's alpha processing 4 I'm gonna attempt to use it I've already downloaded it I will include a link to where you can download it if you want to try it but you know I don't know if this is the official there's no official recommendation to move to processing for just yes now fun oh look how pretty it is oh it's lovely save my sketch call it Hilbert fingers are so cold oh there's the butt bug report we gotta file an issue we get some errors in the console that's right setup bitterly that's right draw fortunately I think this won't take too long I have a good sense of how to do it famous last words of the programmer I want to use a square processing window I'm sure you could come up with a clever way of doing it where it isn't square I'm gonna use powers of two that seems to be important and everything that I've been drawing background zero so if I think about this I want a variable that's called order and we'll start with the first order curve the other thing that I want is I want a function called Hilbert that if I pass it in index out comes the XY location of where it is in the pseudohilbert curve so if I give it zero I get this point zero zero if I give it one I get this point zero 1 1 1 1 0 let's actually just do that really quickly let's we'll start with that P values P vectors P vector Hilbert into I for index and then I need an array of points I'm just gonna hard code these in the birds are out somehow I don't know who the birds are out there's freezing cold weather a P vector when I say zero zero and then I can just say return points index I this is very easy well it is easy for the firstorder filter I need the total number of points so let's take let's make a variable n which is 2 to the order or power and then I know that the total number of points is n time N squared n times n oh and this needs to be converted into an integer ok so now I can iterate over all the points all my fingers are no and I can say P vector V is Hilbert index eyes I have these four points in the first order Hilbert curve pseudohilbert curve 0 1 2 3 and I just want the function to them back to me I'm gonna assume that what I ultimately want to do here is animate so I well I could just draw them right there and set up I'm going to create a variable called path which has a new array of P vectors with total number of spots and then I don't even need this V here I just say path index I equals Hilbert I ha so you might notice that the coordinates of these points are the unit of measurement is I don't know what its pixels but I'm only going like one pixel so I need to expand that out according to the width of my wind processing window itself so this should be the width divided this length is probably is ultimately I think width divided by 2 which would be width divided by n so I can say that the length of each line is the width divided by n path index I multiplied by that length and then in draw let's create a counter to go over the points one at a time the game shape let's say begin shape and shape iterate over the path no fill oh there we go ah but I need to offset it so it's in the top left because zero zero is there let's offset by half of the length path index I add length divided by two length divided by two and there we go we're getting there we're gonna go for order number two next let's add a little flair let's draw a little points let's draw than the index there as well copy paste is my friend when it's cold okay so I can also see the index values this is gonna help us as I keep going here let's look at order number two so the first thing I want to see is can I get four copies of order one if I were just to like divide the length again by two I'd see the first order curve in the top left which is good so that means that that's right because this changes to two then now n is four so the length is width divided by four and the total number points is sixteen but I have an array index out of bounds exception because I don't have sixteen points ah now is comes the magic binary numbers counting in binary let's look at the binary representation of the numbers of the first eight points of the Hilbert curve so that's the arrow through seven which would be zero zero zero zero one so this is the binary representation of the first eight numbers and I could keep going with eight because we have 16 but let's just start here you might notice a repeating pattern here 0 1 2 3 0 1 2 3 so interestingly if I look at the first these 2 bits here that's going to give me the index into the first order a Hilbert curve when this comes in say int index equals I ampersand I think three I'll talk about what that is and let's just see if this works aha yes I have all four copies of the pseudohilbert curve in the top left because I am just looking at these first two bits now look at this 0 0 0 0 1 1 1 1 what do those two bits mean well those four bits can be mapped to which quadrant they're in 0 0 0 1 1 0 1 1 so the next thing oh I have to talk about ampersand I've typed why do I put ampersand in there this is called bit masking it's not corrected on the screen basically the number 3 in binary is 0 0 1 1 so any binary number that you do the and operator with like let's say I pick 7 which was 0 1 1 1 1 1 true and true is still true 1 1 and 1 is also 1 0 & 1 that's not true they both have to be 1 so this becomes a 0 so it doesn't matter whatever is in here because I'm using the ant operation these will always come zeros and I'm left with just these last two bits so what I want to do though however is look at these two bits next if I have something like 0 1 1 1 I can shift the bits and I believe in Java if I write this I don't remember how many of these I have 2 or 3 this I shift the bits over and I would be left with these come back as zeros like this so these get deleted these shift over and I get leading zeros there so then I can say I equals I shift over by 2 and then index now once again equals I ampersand 3 the point I want to return on the first order Hilbert curve is right here so P vector V equals points index then I'm going to shift over and get the next two bits and there are four possibilities the next two bits could be 0 1 2 or three let's just use an if statement if index equals zero then the the curve still is here so do nothing else if index equals one that's here so V dot y go up by one else if index equals two now increase X and y else if index equals three then just V dot X goes up by one and then return V okay so now I have done both pick the point in the first order Hilbert curve and then based on what the next two bits are I am moving to the correct quadrant for the second order hello curve that does not look right ah okay I think I know why so this is length and I want the next one to go down here so I'm actually going by two times length and so that should be plus equals two I should be more thoughtful about this though and I should actually use a variable so let's say afloat length equals I think it's just n whatever this n is two to the power of the order that's the length then I want to go up by that length this doesn't go here it goes here no not at all oh no by the order the order not the not n the order perfect aha but we have that problem so once again I have the problem where I need to rotate let's say I have 0 1 2 3 and I want this to turn on to its side so it is 0 1 2 3 because then it's going to come down to connect to 4 5 6 7 so 0 and to remain the same one in three are swapped so that's index equals zero all I have to do is say vx is V dot Y and V dot y equals V dot X only that won't work because once I've set V dot X to V dot y I can't set V want Y back to V naught X so I have to use a temporary variable to equal to save the value V dot X and then that's here Wow look at that there it is right over here so then I have to do the top right 0 1 2 3 and we're coming in from the bottom here so this is 0 1 2 3 so 0 and to swap but 3 & 1 stay the same so in index 3 right if I were to do this same exact thing this is rotating the wrong way right so that rotates it the wrong way I need 12 the point 12 to end up down here so that I should be able to say one and one there we go ha oh my goodness what secondorder hilbert curve oh length equals order so this should be length sorry why do I do I need a separate variable here I'm confused well we're gonna find out I'm sure there's something wrong let's could I possibly have done everything that I need and I can just change this to 3 no oh wait a second here oh my goodness I've lost my mind I forgot that if I go up another oh I'm really crazy if I I need to do a loop now this has happened over and over again because as I go up I need to continue to shift the bits and check the quadrant of course of course that's the whole point of this iterative interative fractal process so let's use J and we're going to go all the way up to the order right and I can start at 1 because ultimately and this happens here and maybe there's a way to like have the loop be from the beginnings I could but I'm just gonna do this this parts gonna be hardcoded then the loop starts at 1 shift the bits over this is gonna be Jay that's how much I'm shifting because based on the quadrant I keep shifting either one spot or two spots or three spots expanding this is the end of the loop shift the bits mask it get the length and move so this should be three no is J times two okay that looks cool oh I already I have order here so this has to be laying okay all right this looks good this is everything's right except for the top right so I need to shift based on that length I believe so just like length minus one oh there we go look at that third order upper curve mmm I feel like I just like fudged my way through that I'm not sure if I explained it properly oh no no no no fourth well that didn't work okay I think I got it now you've all of you probably screaming at your television nobody's watching this on a television let's be real what I'm considering here is the relative length of each iteration of the Hilbert pseudohilbert curve and how does this work well I've got one square then I have four then I have 16 so the length here if that's 1 this is 1/2 and this is 1/4 so this is the relative length and by the way it might not have been clear but the smallest one is the one that's coming first because as I am computing all of these locations I'm starting with the smallest firstorder Hilbert curve then the next two bits are where is it within it those four quadrants then those four then those four expanding out so this relative length is going up it looks like it's going up times two but I think the next one would be well this times 2 it's 2 to the power so the next one would be 1/8 so this has to be 2 to power of Jay could have sworn this was gonna be right length oh I'm missing a one here how did I lose that one okay that's back now I believe I can change the number to four oh there we go oh it's so lovely okay I don't need the numbers anymore so let's take out the numbers the other thing is I had this count because the idea was that I don't want to draw the whole thing so let's ask counter in here and then we're gonna say counter plus plus that is delightful oh I'm so happy all right so if counter equals path length should I just stop let's just stop I could start it over by sitting counter equal to zero let's start it over perfect all right throw caution to the wind let's jump up by to go to order six just secured watch this all day eight give myself more pixel space let's go up by ten spots each time and change this to greater than all right so why this is going let's think about what we've actually accomplished here for a moment this is actually a mapping this twodimensional space any XY point can be mapped to an individual index now of course we do this all the time we all the pixels are ordered right so if I have a 10 by 10 grid this is these are pixels 0 through 9 then 10 11 12 but this particular way of mapping between the twodimensional space in 1 dimensional space is not as useful in mathematics as the Hilbert curve so I'll leave you to research that on your own to watch the three blue out Brown video that discusses that looks at this topic more closely there's a lot of ways that this mapping can be useful in computer science and mathematics with different algorithms and in fact if we refer back to the Wikipedia page you'll see here description of how a grayscale photograph can be converted to a dither blackandwhite image using threshold in with the leftover amount of each pixel additive next pixel along the old bit curve oh you should try that and you'll also often see the Hilbert curves colored let's try something so I'm not sure how to do this with begin shape a 10 shape but let me just start with one and draw these as lines I minus 1 I minus 1 let's take a peek at our curve oh it's almost finished let's just watch it finish this is a single continuous line isn't that amazing re finished uhhuh so let's just make sure this works exactly the same way with lines yep looks like it does if I now say colormode HSB 360 255 255 so I have a hue hue of a color ranges between 0 and 360 along the sort of color wheel and I can say float H equals map I which goes from 0 to path length to between 0 and 360 and then now I'm going to set the stroke to that hue fault call at full brightness full saturation is that color changing I can't tell you oh it's definitely changing let's just draw the whole thing so this would just be total there we go look at that and now I just cannot resist 9 so this by the way is why it's referred to as a spacefilling curve if the order of the number of iterations approaches infinity every single spot in this theoretical continuous space would be filled with a line how far can i push this oh look at that we go back to 9 there we go I will leave it at this I will leave this I believe this I'm done I've made this example I will also create a JavaScript version of this with p5.js and I will link that source code in the video description there's so many things you could try here and I would love for you to create your own version of this and share with me so there's a number of ways that you could share with me number one I haven't Kody train is a new discord so you can join the discord of link in this video's description there's a share channel where you can share your work and you can introduce yourself there's a page on the coding training comm for decoding in the Cabana videos where you can submit links to projects and there is the social media so the dot coding train on instagram at Schiffman at the coding korean on twitter please I hope you make something with this hilbert curve think about images and the hilbert curve think about other ways to color other ways to animate other ways to render this one idea that I have if you watch the three blue one brown video you'll see that each iteration each order of the curve interpolates from one to the other that's the animation that three blue one brown demonstrates how would you do that if you compute all the points for the first order and all the points for the second order third order could you interpolate between them more so to speak that I think would be a beautiful thing to try so many more possibilities I hope you enjoyed this video on spacefilling curves the hilbert curve my pseudohilbert curve right here being rendered in processing for check out for the p5 JavaScript code and I will see you I don't have a catch phrase I've no way of ending these if you have a suggestion for a catch phrase just leave it for me in the comments thank you goodbye
