With timestamps:

00:02 - hi this is the last box 2d video I'm
00:05 - very excited about this one we've done a
00:07 - lot of videos about box knee this is I
00:08 - find a very challenging topic but
00:12 - hopefully you found it helpful clearly
00:13 - we're not covering everything you could
00:15 - ever imagine to do with box knee it's a
00:17 - huge library with tons of functionality
00:19 - but I hope that you got an overview and
00:20 - an introduction and and you know someday
00:24 - well you know maybe I'll add some or
00:25 - make this better or something like that
00:27 - but before we end all of this there's a
00:30 - huge thing missing a huge thing missing
00:33 - I mean if you even sat down to make a
00:36 - project with box and E and all you did
00:37 - was try all the stuff we've learned so
00:39 - far
00:39 - you would realize you're stuck why are
00:42 - you stuck so here's here's something
00:45 - interesting about using a library we
00:46 - were very thankful thank you about to be
00:48 - all this complicated physics and
00:50 - collision that could never possibly
00:51 - handle it ourselves we're so glad you're
00:53 - handling it for us but we have a problem
00:54 - we would really like to know when the
00:56 - things are hitting each other because
00:58 - you know when this hits that we want the
01:00 - user to score a point in a game or when
01:01 - this hits that we want it to explode
01:03 - into a beautiful fireworks particle
01:05 - system display we need to do something
01:07 - we need to know about when the gun who
01:09 - I'm talking to over there
01:10 - I we need to know about when the
01:12 - collisions are happening this is a trade
01:13 - off a library does a lot of stuff for us
01:15 - so we don't have our hands into the code
01:17 - to find those moments when the
01:19 - collisions happen but of course this is
01:22 - a problem a common problem and of course
01:24 - this is something that box for the opens
01:26 - its doors to and says you know what
01:27 - we're going to give you that information
01:28 - and it's done through something called
01:31 - listening you can listen for collision
01:34 - events in the same way that in
01:37 - processing you can say void mousepressed
01:43 - and trigger some code when a mouse print
01:48 - rip mouse press event happens you can
01:52 - also in box2d say void begin contact now
02:03 - there's a little bit more to it but this
02:06 - is really an analogous scenario
02:08 - mousepressed capture events serial event
02:11 - these are all functions that get
02:13 - triggered
02:13 - for you when an event occurs a click of
02:16 - the mouse
02:17 - there are collision events and when that
02:19 - collision occurs an event is triggered
02:21 - now okay before we can get to this point
02:24 - of what goes in this function we need to
02:27 - figure out how do we even make this
02:29 - function more like how do we even get to
02:31 - the point where this function is going
02:32 - to be something that we can use so
02:33 - there's a couple steps one thing that's
02:35 - really simple is we must enable
02:38 - collision listening enable have little
02:46 - awkward silence there as I write this
02:47 - down enable collision listening if I go
02:50 - to an example that we're about to look
02:52 - at we can see this is as simple as
02:54 - adding one line of code and set up box2d
02:56 - dot listen for collisions this tells the
02:59 - peabody library that you would like to
03:01 - listen for collisions the reason why
03:03 - this isn't on by default is there some
03:04 - extra overhead and managing this so why
03:07 - have it on if you're not going to use it
03:09 - but as soon as you as soon as you enable
03:11 - listen for collisions then this function
03:16 - is going to become activated if you
03:19 - write this method the code here will be
03:21 - executed at the moment two objects come
03:24 - in contact with each other now I should
03:25 - point out that this is the only one
03:27 - we're gonna work with in this particular
03:29 - example but there are other types of
03:31 - collision events there's something
03:33 - called end contact end contact is the
03:38 - moment when two objects that have hit
03:40 - each other
03:40 - stop hitting each other so you can also
03:42 - trigger events the moment that that
03:44 - collision is over another function is
03:48 - called pre solve one of the things box2d
03:51 - has to do is it has to solve that
03:53 - collision when those two objects hit
03:55 - each other what's the solution what's
03:56 - gonna happen to them one of the false
03:57 - forces the impulse what are their
03:59 - velocities what's happening you proxy
04:01 - will actually tell you hey I'm about to
04:03 - solve for this collision this is a way
04:04 - that you could disable a collision if
04:06 - you want to disable it for some reason
04:08 - there is also post solved if you wanted
04:10 - to dig into the guts of that solution as
04:13 - well I've solved the clue to the
04:14 - collision here's the solution if you
04:16 - want to manipulate that or analyze that
04:18 - you can do that in post solve but we are
04:21 - not going to use any of these in our
04:22 - examples these are sort of beyond the
04:24 - scope of what we're looking at
04:25 - we just want to trigger things that
04:26 - happen at the moment of impact a score
04:29 - goes up an object changes color breaks
04:32 - apart something some type of event
04:34 - occurs so if you recall here is for this
04:39 - example we're working with we have
04:41 - written this object called particle
04:42 - particle is the thing that's moving
04:44 - around the screen and I'm going to run
04:46 - this example you're going to see these
04:47 - particles when they collide they're
04:50 - going to turn red so this example is
04:52 - demonstrating the moment those objects
04:54 - collide they turn red we can see there
04:57 - is a function in this particle class
05:01 - that's called change which sets the
05:03 - color equal to red so how do we figure
05:06 - out here's the essential question the
05:08 - moment this begin contact function is
05:11 - triggered how do we know which two
05:14 - particles which two particles collide it
05:17 - well here's the thing the begin contact
05:20 - function sends this sends in as an
05:23 - argument an object called contact and in
05:27 - my examples I have a breviary blames CP
05:31 - not for any good reason just just think
05:34 - of a contact point that's what it used
05:35 - to be called that's the sort of this is
05:37 - okay you can pick a different variable
05:40 - name see contact con whatever you want I
05:43 - called it CP it's sort of arbitrary so
05:46 - here's the thing what CP will tell you
05:49 - is it will tell you I'm looking over
05:52 - here because I have some notes it will
05:53 - tell you here's our steps okay CP is
05:58 - going to tell you which fixtures
06:02 - collided remember the fixture is the
06:06 - entity that attaches the shape to the
06:09 - body and the shape is the thing that has
06:11 - geometry so really what box are the atom
06:13 - the moment of contact is two shapes
06:15 - coming in contact with each other shape
06:18 - one and shape to shape a and shape B but
06:22 - these shapes are really attached to
06:25 - fixtures so if we know that the fixture
06:27 - is what box2d is telling us these two
06:29 - fixtures fixture a and fixture B have
06:31 - come into contact so one of the things
06:33 - about fixtures is we could say hey which
06:36 - body
06:38 - are you attached to so step one is the
06:45 - contact will tell us which fixtures have
06:47 - collided the fixtures will tell us hey
06:50 - we're attached to a body
06:52 - now the box2d body is the physics engine
06:56 - that little point that's moving around
06:57 - that has the location the velocity all
06:59 - that stuff what we want remember is this
07:03 - particle object we want that to affect
07:05 - that particle object so what we need to
07:07 - do is say which particle now this is our
07:13 - thing object is associated with that
07:21 - body right so this is all given to us
07:25 - from box2d box2d says these two fixtures
07:29 - collided the fixtures say these two
07:32 - bodies are the ones that were attached
07:34 - to it's up to us to now figure out
07:36 - through some mechanism the particle
07:38 - classes are think boxing doesn't know
07:40 - about it how do we then pull up which
07:43 - particle is associated with that body
07:44 - because remember each particle has a
07:48 - body variable attached to it
07:49 - now this is there's a little magic in
07:52 - box2d that allows us to do this it's
07:54 - something in the body class called set
07:58 - user data and also get user data these
08:06 - are key functions set user data get user
08:09 - data they're part of the body class what
08:12 - do they mean we're allowed to say hey I
08:14 - made a box to the body I want to give it
08:16 - a name I'm gonna set its user data to
08:18 - the string Jane or the string Fred right
08:22 - you could assign any object as that
08:24 - body's user data anything arbitrary what
08:27 - we're gonna do is assign the body's user
08:30 - data that particular particle so that
08:33 - later when we know which body has
08:35 - collided we can get that user data back
08:37 - out right a sign let me say that again
08:41 - because I'm a little confused myself we
08:43 - have a body we will we have a particle
08:47 - which we've made a part of a body inside
08:50 - of it but look at
08:51 - we want to say hey we made that body
08:53 - let's set its user data to that particle
08:56 - so now we've bound those two things
08:58 - together the body is part of the
09:00 - particle the particles body part of the
09:02 - body they both have a reference to each
09:03 - other so that later when we finally
09:06 - figured out which bodies have collided
09:09 - we can say what's your user data that
09:11 - particle change that particles color hey
09:13 - other body what's your user data oh that
09:14 - other particle change that particles
09:16 - color kind of confusing but hopefully
09:18 - this is beginning to make sense to you
09:20 - because it's starting to make more sense
09:21 - to me as they talk about it okay so I
09:24 - think this kind of covers the game of
09:25 - there's one little missing piece that
09:26 - we've missed here but let's start to
09:28 - look at how this is done in the coda
09:30 - we're gonna see this missing piece so
09:34 - step one you can see is we've I'm
09:35 - already showing you here is that when we
09:37 - make the line of code that we're adding
09:39 - to our particle or box class is to
09:41 - always set that bazi bodies user data
09:43 - and now let's go back to the collision
09:46 - listening the main program right we've
09:48 - written a function down here in the
09:49 - bottom called begin contact and here's
09:51 - that first step step one which fixtures
09:54 - collided which fixtures collided okay
09:57 - step two which bodies are attached to
10:00 - those fixtures and now step three get
10:03 - the bodies user data get the bodies user
10:06 - data but look at this the body's user
10:09 - data is a generic object it's a generic
10:12 - object we actually now have to determine
10:15 - hmmm what kind of object are you right
10:18 - so the body the user data is not gonna
10:20 - keep track of what type of data was set
10:24 - for its user data just that an object
10:27 - was put in there so it's up to us to say
10:29 - hey if the object class is a particle if
10:33 - both objects are particles right because
10:36 - what we're doing here in this particular
10:37 - scenario if we look at bag this is we're
10:39 - only turning them red when a particle
10:42 - has hit another particle not when it
10:45 - hits a boundary remember there's
10:47 - boundaries in there also
10:48 - so we're saying if those objects are
10:50 - particles cast them as particles and
10:53 - call that change function so if
10:55 - object-oriented programming and Java EE
10:57 - stuff is all new to you this is going to
10:59 - look like gobbledygook I mean it looks
11:00 - like gobbledygook to me it's kind of
11:02 - horrible actually and I wish we lived in
11:03 - a world
11:04 - this isn't the code that we had to write
11:06 - but just you know you read this over
11:08 - even though the syntax is weird what
11:11 - we're saying is if the object is a
11:12 - particle if object one is a particle and
11:15 - object two is a particle then two
11:16 - particles collided make those object
11:18 - into particles and call the change
11:20 - function to turn them read so we could
11:22 - even just change like look at this if I
11:23 - just said hey if object 1 is a boundary
11:29 - then change object particle 2 now look
11:33 - at what's gonna happen now they're
11:36 - turning red when they hit the boundary
11:38 - now we got lucky here because we really
11:40 - should check well it could be that
11:42 - object 1 was a particle in object 2 as a
11:44 - boundary or object 1 was the boundary
11:46 - and object 2 as a particle so we
11:48 - probably should have revised our if
11:49 - statement in a slightly more flexible
11:51 - way but you can see where this is going
11:53 - we can start to determine which kind of
11:55 - objects collided are you a boundary or a
11:57 - particle you know break you know if
11:59 - enough particles hit that boundary break
12:01 - the boundary so that it's no longer
12:02 - there there's so much you could do here
12:05 - with collisions I mean I don't even have
12:07 - to give you an exercise just to make
12:09 - events happen when things collide in
12:11 - your box nice sketch that's an exercise
12:13 - for you make colors change fireworks
12:15 - increase the score there's so many
12:16 - things you could do so so this is a
12:20 - complicated area we've just covered kind
12:22 - of the surface of it but hopefully it
12:24 - makes sense to you and this is the end
12:27 - of box2d for now the next set of videos
12:29 - we're going to look at toxic libs which
12:31 - is another physics engine using
12:33 - something called verlet physics which is
12:35 - really geared towards springy connected
12:37 - systems and there's a lot of real
12:38 - benefits to using toxic libs over box2d
12:42 - and we'll talk about that for one it
12:43 - allows you to do stuff in 3d which you
12:45 - might want to think about the main thing
12:47 - the main difference is that toxic lips
12:48 - does not have collisions but now I'm
12:49 - just rambling this video should really
12:51 - be over and so I will say goodbye and
12:53 - good night and good luck and all those
12:55 - kinds of things and goodbye

Cleaned transcript:

hi this is the last box 2d video I'm very excited about this one we've done a lot of videos about box knee this is I find a very challenging topic but hopefully you found it helpful clearly we're not covering everything you could ever imagine to do with box knee it's a huge library with tons of functionality but I hope that you got an overview and an introduction and and you know someday well you know maybe I'll add some or make this better or something like that but before we end all of this there's a huge thing missing a huge thing missing I mean if you even sat down to make a project with box and E and all you did was try all the stuff we've learned so far you would realize you're stuck why are you stuck so here's here's something interesting about using a library we were very thankful thank you about to be all this complicated physics and collision that could never possibly handle it ourselves we're so glad you're handling it for us but we have a problem we would really like to know when the things are hitting each other because you know when this hits that we want the user to score a point in a game or when this hits that we want it to explode into a beautiful fireworks particle system display we need to do something we need to know about when the gun who I'm talking to over there I we need to know about when the collisions are happening this is a trade off a library does a lot of stuff for us so we don't have our hands into the code to find those moments when the collisions happen but of course this is a problem a common problem and of course this is something that box for the opens its doors to and says you know what we're going to give you that information and it's done through something called listening you can listen for collision events in the same way that in processing you can say void mousepressed and trigger some code when a mouse print rip mouse press event happens you can also in box2d say void begin contact now there's a little bit more to it but this is really an analogous scenario mousepressed capture events serial event these are all functions that get triggered for you when an event occurs a click of the mouse there are collision events and when that collision occurs an event is triggered now okay before we can get to this point of what goes in this function we need to figure out how do we even make this function more like how do we even get to the point where this function is going to be something that we can use so there's a couple steps one thing that's really simple is we must enable collision listening enable have little awkward silence there as I write this down enable collision listening if I go to an example that we're about to look at we can see this is as simple as adding one line of code and set up box2d dot listen for collisions this tells the peabody library that you would like to listen for collisions the reason why this isn't on by default is there some extra overhead and managing this so why have it on if you're not going to use it but as soon as you as soon as you enable listen for collisions then this function is going to become activated if you write this method the code here will be executed at the moment two objects come in contact with each other now I should point out that this is the only one we're gonna work with in this particular example but there are other types of collision events there's something called end contact end contact is the moment when two objects that have hit each other stop hitting each other so you can also trigger events the moment that that collision is over another function is called pre solve one of the things box2d has to do is it has to solve that collision when those two objects hit each other what's the solution what's gonna happen to them one of the false forces the impulse what are their velocities what's happening you proxy will actually tell you hey I'm about to solve for this collision this is a way that you could disable a collision if you want to disable it for some reason there is also post solved if you wanted to dig into the guts of that solution as well I've solved the clue to the collision here's the solution if you want to manipulate that or analyze that you can do that in post solve but we are not going to use any of these in our examples these are sort of beyond the scope of what we're looking at we just want to trigger things that happen at the moment of impact a score goes up an object changes color breaks apart something some type of event occurs so if you recall here is for this example we're working with we have written this object called particle particle is the thing that's moving around the screen and I'm going to run this example you're going to see these particles when they collide they're going to turn red so this example is demonstrating the moment those objects collide they turn red we can see there is a function in this particle class that's called change which sets the color equal to red so how do we figure out here's the essential question the moment this begin contact function is triggered how do we know which two particles which two particles collide it well here's the thing the begin contact function sends this sends in as an argument an object called contact and in my examples I have a breviary blames CP not for any good reason just just think of a contact point that's what it used to be called that's the sort of this is okay you can pick a different variable name see contact con whatever you want I called it CP it's sort of arbitrary so here's the thing what CP will tell you is it will tell you I'm looking over here because I have some notes it will tell you here's our steps okay CP is going to tell you which fixtures collided remember the fixture is the entity that attaches the shape to the body and the shape is the thing that has geometry so really what box are the atom the moment of contact is two shapes coming in contact with each other shape one and shape to shape a and shape B but these shapes are really attached to fixtures so if we know that the fixture is what box2d is telling us these two fixtures fixture a and fixture B have come into contact so one of the things about fixtures is we could say hey which body are you attached to so step one is the contact will tell us which fixtures have collided the fixtures will tell us hey we're attached to a body now the box2d body is the physics engine that little point that's moving around that has the location the velocity all that stuff what we want remember is this particle object we want that to affect that particle object so what we need to do is say which particle now this is our thing object is associated with that body right so this is all given to us from box2d box2d says these two fixtures collided the fixtures say these two bodies are the ones that were attached to it's up to us to now figure out through some mechanism the particle classes are think boxing doesn't know about it how do we then pull up which particle is associated with that body because remember each particle has a body variable attached to it now this is there's a little magic in box2d that allows us to do this it's something in the body class called set user data and also get user data these are key functions set user data get user data they're part of the body class what do they mean we're allowed to say hey I made a box to the body I want to give it a name I'm gonna set its user data to the string Jane or the string Fred right you could assign any object as that body's user data anything arbitrary what we're gonna do is assign the body's user data that particular particle so that later when we know which body has collided we can get that user data back out right a sign let me say that again because I'm a little confused myself we have a body we will we have a particle which we've made a part of a body inside of it but look at we want to say hey we made that body let's set its user data to that particle so now we've bound those two things together the body is part of the particle the particles body part of the body they both have a reference to each other so that later when we finally figured out which bodies have collided we can say what's your user data that particle change that particles color hey other body what's your user data oh that other particle change that particles color kind of confusing but hopefully this is beginning to make sense to you because it's starting to make more sense to me as they talk about it okay so I think this kind of covers the game of there's one little missing piece that we've missed here but let's start to look at how this is done in the coda we're gonna see this missing piece so step one you can see is we've I'm already showing you here is that when we make the line of code that we're adding to our particle or box class is to always set that bazi bodies user data and now let's go back to the collision listening the main program right we've written a function down here in the bottom called begin contact and here's that first step step one which fixtures collided which fixtures collided okay step two which bodies are attached to those fixtures and now step three get the bodies user data get the bodies user data but look at this the body's user data is a generic object it's a generic object we actually now have to determine hmmm what kind of object are you right so the body the user data is not gonna keep track of what type of data was set for its user data just that an object was put in there so it's up to us to say hey if the object class is a particle if both objects are particles right because what we're doing here in this particular scenario if we look at bag this is we're only turning them red when a particle has hit another particle not when it hits a boundary remember there's boundaries in there also so we're saying if those objects are particles cast them as particles and call that change function so if objectoriented programming and Java EE stuff is all new to you this is going to look like gobbledygook I mean it looks like gobbledygook to me it's kind of horrible actually and I wish we lived in a world this isn't the code that we had to write but just you know you read this over even though the syntax is weird what we're saying is if the object is a particle if object one is a particle and object two is a particle then two particles collided make those object into particles and call the change function to turn them read so we could even just change like look at this if I just said hey if object 1 is a boundary then change object particle 2 now look at what's gonna happen now they're turning red when they hit the boundary now we got lucky here because we really should check well it could be that object 1 was a particle in object 2 as a boundary or object 1 was the boundary and object 2 as a particle so we probably should have revised our if statement in a slightly more flexible way but you can see where this is going we can start to determine which kind of objects collided are you a boundary or a particle you know break you know if enough particles hit that boundary break the boundary so that it's no longer there there's so much you could do here with collisions I mean I don't even have to give you an exercise just to make events happen when things collide in your box nice sketch that's an exercise for you make colors change fireworks increase the score there's so many things you could do so so this is a complicated area we've just covered kind of the surface of it but hopefully it makes sense to you and this is the end of box2d for now the next set of videos we're going to look at toxic libs which is another physics engine using something called verlet physics which is really geared towards springy connected systems and there's a lot of real benefits to using toxic libs over box2d and we'll talk about that for one it allows you to do stuff in 3d which you might want to think about the main thing the main difference is that toxic lips does not have collisions but now I'm just rambling this video should really be over and so I will say goodbye and good night and good luck and all those kinds of things and goodbye
