With timestamps:

00:02 - okay in this video I want to talk about
00:04 - the last piece of the puzzle for doing
00:06 - for for making a word counting
00:07 - application and processing and and then
00:10 - kind of talk about some ideas and some
00:13 - directions to go in applying uh uh this
00:17 - AB this new found ability to count Words
00:19 - in a body of text and what types of
00:20 - things we might do with that so just to
00:22 - start like this is I you know this is I
00:25 - I could probably stand here for like the
00:27 - next three hours and show you example
00:30 - after example after after example of
00:32 - visualizations of word frequencies in
00:35 - documents um this is a project from 2003
00:38 - by Jonathan Harris called word count
00:40 - which is just looking at the frequency
00:42 - of words in the English language and we
00:43 - can see here number one the um the most
00:46 - common word the' number two of number
00:49 - three and and I could uh scroll through
00:52 - uh and and look at different words and I
00:54 - could find a word like hello and see
00:57 - where that word ranks um the the the
01:00 - reason why I'm looking at this though a
01:02 - this might be the type of thing as an
01:04 - exercise uh you find yourself um sorry
01:08 - let me just get back to the beginning
01:09 - here the this might be an uh something
01:11 - you take as an exercise to build a
01:13 - visualization of word frequencies and
01:15 - I'll show you a couple examples of
01:17 - processing that do this for you the
01:19 - other thing that I want to point out
01:20 - here though
01:22 - is in a lot of in text analysis uh
01:26 - there's a concept known as stop words
01:28 - junk words common words these words that
01:31 - seem meaningless that if we're trying to
01:33 - figure out you know is this a positive
01:35 - text a negative text is this a text by a
01:38 - very conservative author or a very
01:40 - liberal author what what might be by by
01:43 - uh what gender is the author of this
01:44 - text um word counting can unlock a lot
01:47 - of Clues to these types of questions or
01:50 - mysteries in fact and often there's this
01:53 - concept known as stop words okay well I
01:55 - need to count all the words in a text
01:56 - and then these words that are like
01:58 - really common in everything these
02:00 - pronouns these junk words I should just
02:02 - throw them away because what I want are
02:04 - the the meat the content words what
02:06 - words like happy or sad or or or words
02:09 - that have like a lot of meaning to them
02:11 - what what's interesting is that there's
02:13 - been a lot of recent research and I want
02:14 - to point you to uh this book called The
02:17 - Secret Life of pronouns uh the author
02:19 - James pennebaker goes through and disc
02:22 - and discovers the the the power of
02:24 - actually just counting the junk words
02:26 - themselves uh and there's also if you
02:28 - link here there's a lot of um exercises
02:31 - that you can try and you show you a
02:33 - picture and type some text about it and
02:34 - it will count your words and give you a
02:36 - clue into what you were feeling or
02:38 - thinking about or what some personality
02:40 - traits based on what you wrote so I just
02:41 - want to encourage you to take a look
02:42 - through some of these scenarios I'll try
02:44 - to have some more examples of different
02:46 - visualizations and different analysis
02:47 - topics this might be the kind of thing
02:49 - that you think about um uh doing an
02:52 - experiment around in processing but
02:55 - before you can do any of this stuff
02:57 - before you can do some type of analysis
02:59 - or some sort of visualization you need
03:02 - to figure out how do I pair a string of
03:06 - text with a number it's
03:10 - count okay to start this PA start down
03:13 - this path let's go back and think about
03:17 - a data structure a way of storing
03:19 - information that that hopefully that you
03:21 - that I that all of us are somewhat
03:23 - familiar with by the way I'm very
03:25 - self-conscious about what pronouns don't
03:27 - read that book if you ever want to just
03:29 - talk talk and not just think about am I
03:30 - saying I or we too much am I detached am
03:33 - I
03:34 - connected okay but I'm going to put that
03:37 - aside let's let's let's you and me I you
03:40 - we whatever let's think about an array
03:43 - what is an array an array is an ordered
03:46 - sequence of information an array of
03:48 - numbers for example might be like 32 91
03:52 - 3 13 14 67 90 these could all be counts
03:56 - 32 could be the number of times the word
03:58 - hello appears 1 could be the number of
04:00 - times the word goodbye appears so maybe
04:02 - we could have another array with strings
04:04 - in it and the the strings in that array
04:07 - match up with this array and that could
04:09 - kind of work there's there's a nicer way
04:10 - of doing this these an array is ordered
04:14 - by and and each element can be referred
04:16 - to by its index 0 1 2 3 Etc but what if
04:21 - I could name elements of an array what
04:23 - if I could say this element is named Dan
04:28 - this element is named James
04:30 - this element is named Joan etc etc etc
04:35 - what if I could name each one of these
04:36 - elements and this is actually quite
04:38 - useful if I were making an inventory
04:40 - list um I want to know like how many
04:42 - markers do I have I have 10 markers uh
04:47 - how many pencils do I
04:49 - have I have three pencils right this is
04:52 - the way we often store information in
04:55 - like a database I have this many of this
04:57 - thing this many of this thing the
04:58 - temperature on day was this Monday is 72
05:01 - degrees Tuesday is 81 degrees there's a
05:04 - lot of scenarios where we want to pair
05:07 - strings of text with a
05:09 - value naming the elements of an array is
05:12 - one way of doing that and if I could say
05:14 - Dan appears 32 times in a text Jane
05:17 - appears 91 times Joan appears three
05:19 - times then this type of data structure
05:21 - an array that instead of numerical
05:23 - indexes has
05:26 - names would be very useful and in fact
05:28 - this is a very data structure in the
05:32 - life of a person who works with code and
05:35 - programs and that sort of thing um in
05:37 - Python this is known as a dictionary um
05:40 - it's also sometimes referred to as a
05:42 - hash or a hashmap and probably lots of
05:44 - other terms we could come up with to
05:45 - describe this type of data structure in
05:47 - processing processing has something
05:50 - called an INT dictionary and an INT
05:54 - dictionary pairs a string with an
05:57 - integer there's also a float dictionary
05:59 - which pairs a string with a floating
06:01 - Point number there's a string dictionary
06:03 - that pairs a string with another string
06:06 - so you know name and address these are
06:09 - useful data structures for storing
06:11 - information in a generic way so in
06:14 - dictionary is what we can use for uh oh
06:18 - associative array that's another way
06:20 - this is it's another term for this sort
06:22 - of thing anyway in dictionary is uh the
06:25 - perfect thing in processing to take care
06:27 - of storing words and their counts
06:30 - how do we use an in dictionary well it's
06:32 - an object like anything
06:35 - else uh I'm going to call it words for
06:38 - example is a new int dictionary so this
06:42 - is just making an empty int dictionary
06:45 - and then I can do things like say
06:48 - words. set you know hello to 50 so now
06:54 - I've set the i' I've paired the number
06:57 - 50 with the word hello in this data
06:59 - structure 50 and hello are stored
07:01 - together and I could always ask I could
07:03 - say
07:05 - words
07:07 - doget
07:09 - hello much in the way with an array we
07:11 - would have said like word if this was
07:13 - you know words index two that gives me
07:16 - the number three words. get hello that
07:20 - gives me the number 50 there's also a
07:22 - function which is going to be very
07:24 - useful in this particular example which
07:26 - is just words uh. increment
07:30 - so if I say words increment
07:33 - hello whatever the value of hello is
07:35 - increase it by one and this is the key
07:39 - piece that that that I'll use that we'll
07:42 - use oh my God that we'll use to build
07:45 - this word counting uh example for every
07:48 - word in the play Hamlet increment its
07:51 - value in my in dictionary look at the
07:53 - first word increment it look at the
07:54 - second word increment it and if it's not
07:56 - there um the the pro the in dictionary
07:59 - will know if it's not there give it its
08:01 - first value of one if it is there
08:02 - increase its value to two the next time
08:04 - it increase its value to three so this
08:06 - is exactly the data structure to we can
08:08 - use to do word counting so let's go and
08:10 - finish this
08:12 - example
08:14 - um and I quit out of the browser and
08:17 - remember where we were this is where we
08:19 - last left off every single word one at a
08:22 - time well now what do I want to do what
08:26 - I want to do is
08:30 - have an INT dictionary and I'm going to
08:33 - actually call it uh concordance so
08:36 - concordance is a
08:37 - term uh to store a list of all of the
08:40 - words or tokens in a document and
08:43 - something about their context where they
08:44 - are in some ways somewhat similar to the
08:47 - idea of an index uh and in our case what
08:49 - we what what I'm going to store in this
08:51 - particular concordance is every single
08:53 - word and the number of times that
08:55 - appears in that document
08:57 - so the first thing I want want to do is
09:00 - make a new int dictionary then what do I
09:03 - do let me go through every single word
09:06 - remember we what did we do in the last
09:10 - example we took the play Hamlet we
09:12 - joined it all together we split it up
09:14 - into an array every single element of
09:16 - that array has
09:19 - uh every single element of array is an
09:21 - individual word that appears in the play
09:23 - Hamlet so what can I do I can say
09:26 - concordance do
09:28 - increment where words index
09:31 - I um but let's let's actually uh let's
09:34 - start in a slightly simpler Place forget
09:36 - about Hamlet for a second if I say
09:39 - concordance do
09:40 - increment
09:43 - hello concordance do increment
09:46 - goodbye and then let's increment hello
09:49 - two more times imagine that this is the
09:51 - L I mean not imagine this is the code
09:53 - we're going to run right now increment
09:55 - hello increment goodbye increment hello
09:57 - two
09:58 - times let's
10:00 - let's
10:02 - now look at the concordance in the
10:04 - console and we can see what do I have
10:06 - down here I have oops I have sorry I
10:12 - have Hello three times and goodbye once
10:14 - so the dictionary the size is two hello
10:17 - is three times goodbye is once this
10:19 - works so instead of doing hardcoding all
10:22 - these words and Counting them I just
10:23 - need to go through every single word in
10:25 - the play Hamlet and call increment on it
10:27 - so let's come back oops and get rid of
10:32 - this and put this down
10:35 - here and comment this back in
10:40 - whoops and now let's run
10:44 - this and let's look in the console look
10:46 - at this most of the words almost all of
10:49 - the words in Hamlet appear just once but
10:51 - I can start scrolling up and we're going
10:53 - to find like oh yeah the' is 133 times
10:57 - so the this is not sort of is 576 times
11:01 - so you can see this is very very easily
11:04 - a very quick way to use this dictionary
11:07 - data structure to
11:09 - store um all the uh the counts of all
11:12 - the words okay so what are some things
11:15 - that we might do next so first of all I
11:19 - I want to stop doing this drawing thing
11:21 - which is making me totally
11:23 - crazy and we don't need index
11:26 - anymore so now Okay so something one a
11:30 - nice thing that we can do with in
11:32 - dictionaries it has a lot of lot of
11:34 - functions that'll that'll let us do more
11:36 - stuff one one thing we could do we could
11:38 - sort so I I I this kind of a a key piece
11:41 - of information here so what is the in
11:45 - dictionary doing for us pairing a string
11:47 - with a value pairing a string with a
11:49 - value a term a ter terminology that's
11:53 - important here is this is known as the
11:56 - key it is the key to unlocking the value
12:00 - and this is the
12:01 - value so if we want to
12:05 - sort our dictionary to give us all of
12:07 - the words in alphabetical order we would
12:09 - sort by key if we want to sort our
12:12 - dictionary to give us uh you know the
12:15 - most infrequently used words first or
12:17 - the most frequently used words first we
12:19 - would sort by the value so uh keys and
12:22 - values you're going to see and if you
12:24 - look at the documentation and and
12:25 - actually let's just go do this
12:27 - together uh if I pull up the uh Pro if I
12:32 - pull up the
12:33 - processing site and look for in
12:38 - dictionary and look at a lot of the
12:40 - possible functions here you can see uh
12:44 - has a key increment there's a lot of
12:46 - these functions refer to sort by Keys
12:47 - sort by Keys reverse sort by values so
12:49 - being getting feeling comfortable the
12:51 - idea of which is the key which is the
12:53 - value the key is the string the value is
12:54 - the number that's something you
12:56 - definitely want to get used to um so
12:58 - let's go and say
13:01 - concordance
13:03 - sort
13:04 - values
13:08 - reverse uh so sort values reverse should
13:12 - hopefully I spelled that no I did not
13:13 - spell that correctly uh sort values
13:16 - reverse will sort by the counts in
13:18 - reverse order meaning uh descending
13:20 - order meaning the highest counts appear
13:22 - first so if I run this and we look down
13:26 - into the console and kind of scroll up
13:28 - to the beginning we're going to see the
13:30 - most frequently used word is the the
13:34 - followed by and followed by of if I kept
13:36 - going through this though we're going to
13:38 - find though the capital T was counted
13:40 - separately those are not the same string
13:43 - uh processing is going to consider
13:45 - strings as case sensitive so though with
13:47 - a capital T absolutely different than
13:48 - the with a lowercase T So something that
13:51 - I'm that I think would be worth doing
13:52 - with the code here is saying two
13:57 - lowercase this function two lower case
14:00 - takes the string oh boy did I miss that
14:03 - important detail which I I want to fill
14:05 - in at some point takes the string and
14:06 - converts it to lower case so now what
14:08 - this is doing is any word that's in that
14:10 - text let's before we put it into the
14:13 - concordance let's make sure it's lower
14:14 - string so we should get more than just
14:16 - 860 times for the' because it's now
14:18 - going to be a combination of the
14:20 - lowercase and the uppercase so let's run
14:22 - this one more
14:24 - time and we can see here
14:29 - the' is now 993 times so we can see that
14:32 - now the words are sorted by their counts
14:35 - here and that's what we've got in the
14:36 - console okay The Next Step would be to
14:38 - visualize this information somehow well
14:40 - how would we possibly visualize this we
14:42 - need to somehow um go through every
14:47 - single word that is in that dictionary
14:50 - how do we do
14:57 - that I I think this is right so um there
15:02 - is a function called key array which
15:05 - gives all of the keys all of the words
15:08 - that are in that dictionary into an
15:09 - array of strings the reason why we need
15:11 - that is there's no um we need to look
15:15 - and look through all of the words in
15:17 - that dictionary and we need something to
15:19 - Loop through something that's easy to
15:20 - Loop through is an array so we can ask
15:23 - the dictionary to give us just give us
15:25 - all of the keys and once I have all of
15:27 - the keys I can
15:33 - say and I could say print line the key
15:38 - followed by and now the
15:40 - count
15:43 - is using the get
15:46 - function
15:48 - oops I can get the countown okay so look
15:52 - at this if I say get on a dictionary and
15:55 - we give it the key it's going to pull
15:57 - out the value associated with that key
15:59 - key whatever that string is give me back
16:01 - that value and that's in count so if I
16:03 - were to just say print line all the keys
16:04 - in their counts and um I'm going to say
16:08 - no Loop so it only does this once we can
16:11 - now see that I've
16:14 - got everything now here um and if I
16:18 - scroll somehow if I make it all the way
16:19 - back up to the top we can see there we
16:21 - go the
16:25 - ah oh I lost some of the uh console oh
16:28 - well
16:29 - anyway you could see that this is a way
16:31 - of iterating through the entire
16:32 - dictionary and getting every string
16:34 - associated with the account getting very
16:36 - it's very hot in here under these slides
16:37 - I'm getting very tired so I'm going to
16:40 - take a break in a minute you you don't
16:42 - really care about this but um anyway
16:44 - okay so uh so I'm gonna stop here
16:49 - actually what could I do I'm printing
16:51 - everything to the console but I could
16:52 - use the text function and I could use
16:55 - the count as the font size that would
16:57 - give me something very very close to
16:59 - exactly what uh we saw with that first
17:02 - word counting example that we looked at
17:04 - on the web and I think what I'm going to
17:06 - do is just show you also I'm going to
17:08 - pull up there some of these examples are
17:11 - there for you if I go to uh I'm sorry uh
17:16 - word counting example of so if I open up
17:20 - this example I don't remember what text
17:22 - this is using uh we can see here A
17:24 - Midsummer Night's Dream we can see here
17:27 - is kind of showing us a simple
17:29 - visualization you might try to create
17:31 - something like this the' is the most
17:33 - common word and is the second most
17:35 - common word uh I is the third most
17:37 - common word uh another scenario that you
17:39 - might look at which is kind of
17:40 - interesting to think about how you would
17:42 - accomplish something like this uh you
17:44 - can take a look at this example uh this
17:46 - example is um doing the same exact thing
17:50 - but it's actually animating over the
17:53 - text as it's counting all the words so
17:56 - for each word that it o those words
17:59 - should be wrapping to the next uh oh
18:01 - yeah they are um I I forgot that I just
18:03 - zoomed in so um so each word it's sorted
18:07 - and as it's going through the words are
18:09 - growing based on its count and the
18:10 - spacing is being worked out manually so
18:12 - this is something you could think about
18:13 - doing as well how could you create a
18:16 - visualization of the number of times a
18:18 - word appears in a document how could you
18:19 - make that visualization animated um you
18:23 - know some other things you might think
18:24 - about are what what does it mean like
18:26 - what if I compare this text with another
18:28 - text how do those words look next to
18:30 - each other um there's a concept known as
18:34 - TFI DF term frequency inverse document
18:38 - frequency so let's say I look at
18:41 - Midsummer Night's Dream and Hamlet
18:43 - they're both probably going to have the
18:45 - wordthe in it a lot but Midsummer
18:47 - Night's Dream is going to have the word
18:49 - puck in it quite a bit but that won't be
18:51 - in Hamlet Hamlet will have the word
18:53 - hamlet in it quite a bit and it won't be
18:54 - in midin stream those are two characters
18:56 - that are in those plays
18:58 - F IDF term frequency inverse document
19:01 - frequency is a means for looking at
19:04 - words that appear a lot in one document
19:06 - but not in the other and this might be a
19:08 - way of determining key words associated
19:10 - with a piece of text if you looked at
19:12 - all the New York Times articles uh what
19:14 - are some words that appear across all
19:16 - the articles but certain words are
19:18 - appear a lot only in certain articles
19:20 - would might give you a clue to the key
19:21 - words sort of automatic way of tagging
19:23 - those articles with some type of concept
19:25 - so you know we could go very far with
19:27 - this and you know I spend hours and
19:29 - weeks and video after video of of talk
19:31 - of of different word counting and text
19:33 - analysis scenarios um so this is just a
19:36 - little bit to get you started um and I
19:39 - encourage you to try some try some stuff
19:41 - out and look at the examples and we're
19:42 - going to put this aside and in the next
19:44 - set of videos we're going to start
19:45 - looking at other uh types of data sets
19:47 - besides just plain old text what if the
19:50 - what if we're getting a numerical data
19:52 - from some uh from some data source okay
19:55 - uh boy this was this video is 16 minutes
19:57 - and 49 seconds long right now if you're
20:00 - still watching okay

Cleaned transcript:

okay in this video I want to talk about the last piece of the puzzle for doing for for making a word counting application and processing and and then kind of talk about some ideas and some directions to go in applying uh uh this AB this new found ability to count Words in a body of text and what types of things we might do with that so just to start like this is I you know this is I I could probably stand here for like the next three hours and show you example after example after after example of visualizations of word frequencies in documents um this is a project from 2003 by Jonathan Harris called word count which is just looking at the frequency of words in the English language and we can see here number one the um the most common word the' number two of number three and and I could uh scroll through uh and and look at different words and I could find a word like hello and see where that word ranks um the the the reason why I'm looking at this though a this might be the type of thing as an exercise uh you find yourself um sorry let me just get back to the beginning here the this might be an uh something you take as an exercise to build a visualization of word frequencies and I'll show you a couple examples of processing that do this for you the other thing that I want to point out here though is in a lot of in text analysis uh there's a concept known as stop words junk words common words these words that seem meaningless that if we're trying to figure out you know is this a positive text a negative text is this a text by a very conservative author or a very liberal author what what might be by by uh what gender is the author of this text um word counting can unlock a lot of Clues to these types of questions or mysteries in fact and often there's this concept known as stop words okay well I need to count all the words in a text and then these words that are like really common in everything these pronouns these junk words I should just throw them away because what I want are the the meat the content words what words like happy or sad or or or words that have like a lot of meaning to them what what's interesting is that there's been a lot of recent research and I want to point you to uh this book called The Secret Life of pronouns uh the author James pennebaker goes through and disc and discovers the the the power of actually just counting the junk words themselves uh and there's also if you link here there's a lot of um exercises that you can try and you show you a picture and type some text about it and it will count your words and give you a clue into what you were feeling or thinking about or what some personality traits based on what you wrote so I just want to encourage you to take a look through some of these scenarios I'll try to have some more examples of different visualizations and different analysis topics this might be the kind of thing that you think about um uh doing an experiment around in processing but before you can do any of this stuff before you can do some type of analysis or some sort of visualization you need to figure out how do I pair a string of text with a number it's count okay to start this PA start down this path let's go back and think about a data structure a way of storing information that that hopefully that you that I that all of us are somewhat familiar with by the way I'm very selfconscious about what pronouns don't read that book if you ever want to just talk talk and not just think about am I saying I or we too much am I detached am I connected okay but I'm going to put that aside let's let's let's you and me I you we whatever let's think about an array what is an array an array is an ordered sequence of information an array of numbers for example might be like 32 91 3 13 14 67 90 these could all be counts 32 could be the number of times the word hello appears 1 could be the number of times the word goodbye appears so maybe we could have another array with strings in it and the the strings in that array match up with this array and that could kind of work there's there's a nicer way of doing this these an array is ordered by and and each element can be referred to by its index 0 1 2 3 Etc but what if I could name elements of an array what if I could say this element is named Dan this element is named James this element is named Joan etc etc etc what if I could name each one of these elements and this is actually quite useful if I were making an inventory list um I want to know like how many markers do I have I have 10 markers uh how many pencils do I have I have three pencils right this is the way we often store information in like a database I have this many of this thing this many of this thing the temperature on day was this Monday is 72 degrees Tuesday is 81 degrees there's a lot of scenarios where we want to pair strings of text with a value naming the elements of an array is one way of doing that and if I could say Dan appears 32 times in a text Jane appears 91 times Joan appears three times then this type of data structure an array that instead of numerical indexes has names would be very useful and in fact this is a very data structure in the life of a person who works with code and programs and that sort of thing um in Python this is known as a dictionary um it's also sometimes referred to as a hash or a hashmap and probably lots of other terms we could come up with to describe this type of data structure in processing processing has something called an INT dictionary and an INT dictionary pairs a string with an integer there's also a float dictionary which pairs a string with a floating Point number there's a string dictionary that pairs a string with another string so you know name and address these are useful data structures for storing information in a generic way so in dictionary is what we can use for uh oh associative array that's another way this is it's another term for this sort of thing anyway in dictionary is uh the perfect thing in processing to take care of storing words and their counts how do we use an in dictionary well it's an object like anything else uh I'm going to call it words for example is a new int dictionary so this is just making an empty int dictionary and then I can do things like say words. set you know hello to 50 so now I've set the i' I've paired the number 50 with the word hello in this data structure 50 and hello are stored together and I could always ask I could say words doget hello much in the way with an array we would have said like word if this was you know words index two that gives me the number three words. get hello that gives me the number 50 there's also a function which is going to be very useful in this particular example which is just words uh. increment so if I say words increment hello whatever the value of hello is increase it by one and this is the key piece that that that I'll use that we'll use oh my God that we'll use to build this word counting uh example for every word in the play Hamlet increment its value in my in dictionary look at the first word increment it look at the second word increment it and if it's not there um the the pro the in dictionary will know if it's not there give it its first value of one if it is there increase its value to two the next time it increase its value to three so this is exactly the data structure to we can use to do word counting so let's go and finish this example um and I quit out of the browser and remember where we were this is where we last left off every single word one at a time well now what do I want to do what I want to do is have an INT dictionary and I'm going to actually call it uh concordance so concordance is a term uh to store a list of all of the words or tokens in a document and something about their context where they are in some ways somewhat similar to the idea of an index uh and in our case what we what what I'm going to store in this particular concordance is every single word and the number of times that appears in that document so the first thing I want want to do is make a new int dictionary then what do I do let me go through every single word remember we what did we do in the last example we took the play Hamlet we joined it all together we split it up into an array every single element of that array has uh every single element of array is an individual word that appears in the play Hamlet so what can I do I can say concordance do increment where words index I um but let's let's actually uh let's start in a slightly simpler Place forget about Hamlet for a second if I say concordance do increment hello concordance do increment goodbye and then let's increment hello two more times imagine that this is the L I mean not imagine this is the code we're going to run right now increment hello increment goodbye increment hello two times let's let's now look at the concordance in the console and we can see what do I have down here I have oops I have sorry I have Hello three times and goodbye once so the dictionary the size is two hello is three times goodbye is once this works so instead of doing hardcoding all these words and Counting them I just need to go through every single word in the play Hamlet and call increment on it so let's come back oops and get rid of this and put this down here and comment this back in whoops and now let's run this and let's look in the console look at this most of the words almost all of the words in Hamlet appear just once but I can start scrolling up and we're going to find like oh yeah the' is 133 times so the this is not sort of is 576 times so you can see this is very very easily a very quick way to use this dictionary data structure to store um all the uh the counts of all the words okay so what are some things that we might do next so first of all I I want to stop doing this drawing thing which is making me totally crazy and we don't need index anymore so now Okay so something one a nice thing that we can do with in dictionaries it has a lot of lot of functions that'll that'll let us do more stuff one one thing we could do we could sort so I I I this kind of a a key piece of information here so what is the in dictionary doing for us pairing a string with a value pairing a string with a value a term a ter terminology that's important here is this is known as the key it is the key to unlocking the value and this is the value so if we want to sort our dictionary to give us all of the words in alphabetical order we would sort by key if we want to sort our dictionary to give us uh you know the most infrequently used words first or the most frequently used words first we would sort by the value so uh keys and values you're going to see and if you look at the documentation and and actually let's just go do this together uh if I pull up the uh Pro if I pull up the processing site and look for in dictionary and look at a lot of the possible functions here you can see uh has a key increment there's a lot of these functions refer to sort by Keys sort by Keys reverse sort by values so being getting feeling comfortable the idea of which is the key which is the value the key is the string the value is the number that's something you definitely want to get used to um so let's go and say concordance sort values reverse uh so sort values reverse should hopefully I spelled that no I did not spell that correctly uh sort values reverse will sort by the counts in reverse order meaning uh descending order meaning the highest counts appear first so if I run this and we look down into the console and kind of scroll up to the beginning we're going to see the most frequently used word is the the followed by and followed by of if I kept going through this though we're going to find though the capital T was counted separately those are not the same string uh processing is going to consider strings as case sensitive so though with a capital T absolutely different than the with a lowercase T So something that I'm that I think would be worth doing with the code here is saying two lowercase this function two lower case takes the string oh boy did I miss that important detail which I I want to fill in at some point takes the string and converts it to lower case so now what this is doing is any word that's in that text let's before we put it into the concordance let's make sure it's lower string so we should get more than just 860 times for the' because it's now going to be a combination of the lowercase and the uppercase so let's run this one more time and we can see here the' is now 993 times so we can see that now the words are sorted by their counts here and that's what we've got in the console okay The Next Step would be to visualize this information somehow well how would we possibly visualize this we need to somehow um go through every single word that is in that dictionary how do we do that I I think this is right so um there is a function called key array which gives all of the keys all of the words that are in that dictionary into an array of strings the reason why we need that is there's no um we need to look and look through all of the words in that dictionary and we need something to Loop through something that's easy to Loop through is an array so we can ask the dictionary to give us just give us all of the keys and once I have all of the keys I can say and I could say print line the key followed by and now the count is using the get function oops I can get the countown okay so look at this if I say get on a dictionary and we give it the key it's going to pull out the value associated with that key key whatever that string is give me back that value and that's in count so if I were to just say print line all the keys in their counts and um I'm going to say no Loop so it only does this once we can now see that I've got everything now here um and if I scroll somehow if I make it all the way back up to the top we can see there we go the ah oh I lost some of the uh console oh well anyway you could see that this is a way of iterating through the entire dictionary and getting every string associated with the account getting very it's very hot in here under these slides I'm getting very tired so I'm going to take a break in a minute you you don't really care about this but um anyway okay so uh so I'm gonna stop here actually what could I do I'm printing everything to the console but I could use the text function and I could use the count as the font size that would give me something very very close to exactly what uh we saw with that first word counting example that we looked at on the web and I think what I'm going to do is just show you also I'm going to pull up there some of these examples are there for you if I go to uh I'm sorry uh word counting example of so if I open up this example I don't remember what text this is using uh we can see here A Midsummer Night's Dream we can see here is kind of showing us a simple visualization you might try to create something like this the' is the most common word and is the second most common word uh I is the third most common word uh another scenario that you might look at which is kind of interesting to think about how you would accomplish something like this uh you can take a look at this example uh this example is um doing the same exact thing but it's actually animating over the text as it's counting all the words so for each word that it o those words should be wrapping to the next uh oh yeah they are um I I forgot that I just zoomed in so um so each word it's sorted and as it's going through the words are growing based on its count and the spacing is being worked out manually so this is something you could think about doing as well how could you create a visualization of the number of times a word appears in a document how could you make that visualization animated um you know some other things you might think about are what what does it mean like what if I compare this text with another text how do those words look next to each other um there's a concept known as TFI DF term frequency inverse document frequency so let's say I look at Midsummer Night's Dream and Hamlet they're both probably going to have the wordthe in it a lot but Midsummer Night's Dream is going to have the word puck in it quite a bit but that won't be in Hamlet Hamlet will have the word hamlet in it quite a bit and it won't be in midin stream those are two characters that are in those plays F IDF term frequency inverse document frequency is a means for looking at words that appear a lot in one document but not in the other and this might be a way of determining key words associated with a piece of text if you looked at all the New York Times articles uh what are some words that appear across all the articles but certain words are appear a lot only in certain articles would might give you a clue to the key words sort of automatic way of tagging those articles with some type of concept so you know we could go very far with this and you know I spend hours and weeks and video after video of of talk of of different word counting and text analysis scenarios um so this is just a little bit to get you started um and I encourage you to try some try some stuff out and look at the examples and we're going to put this aside and in the next set of videos we're going to start looking at other uh types of data sets besides just plain old text what if the what if we're getting a numerical data from some uh from some data source okay uh boy this was this video is 16 minutes and 49 seconds long right now if you're still watching okay
