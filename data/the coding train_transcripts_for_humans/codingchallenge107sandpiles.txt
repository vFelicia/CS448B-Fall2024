With timestamps:

00:00 - oh hello it's time for a coding
00:04 - challenge in processing which is a Java
00:07 - based thing you can find more about it
00:09 - at processing dot org I am going to
00:12 - attempt to create something that looks
00:13 - like this otherwise known as a sand pile
00:16 - so first thank you very much to coding
00:19 - trained viewer Simon Tiger who suggested
00:22 - this On January 26 there is a nice
00:25 - little discussion here a link to the
00:27 - numberphile video that I just watched
00:31 - earlier this morning now here's the
00:32 - thing I highly encourage you if you want
00:34 - to pause right now and go and watch the
00:36 - sand piles I can want to say sand file
00:39 - because it's numberphile and sand pile
00:41 - but anyway you don't watch that video
00:43 - right now to find out more about the
00:45 - mathematics of sand piles I'm gonna kind
00:47 - of skip all that and go cut right to the
00:49 - chase and just look at the basic idea
00:52 - and then what happens when we take that
00:54 - idea and turn it into color in a
00:56 - processing sketch so let me come over
00:58 - here and talk to you about the basic
01:00 - idea so first of all this video is going
01:03 - to the code that I'm going to write I
01:05 - think I've written it yet so it's going
01:07 - to look a lot like the game of life or
01:09 - maybe even like a blur image processing
01:12 - blur algorithm because what I'm going to
01:15 - do with this sand pile algorithm is look
01:18 - at a two-dimensional space divided into
01:24 - cells and the core sort of the core
01:28 - building block here that I need to look
01:29 - at just in the simplest way is a 3x3
01:33 - grid so ultimately I'm going to take
01:36 - this algorithm and apply it to a
01:38 - processing sketch that might be
01:40 - something like 600 by 600 pixels and I'm
01:43 - gonna let this sand piles thing happen
01:45 - all throughout this window and color it
01:47 - but what is what actually needs to
01:48 - happen I can reduce and describe to you
01:51 - in terms of just this 3x3 grid okay so
01:55 - why is it called sand pile well the idea
01:58 - is that if I have this grid here I might
02:00 - dribble sand on it and I'm like sort of
02:03 - have a few pieces of sand like there
02:05 - might be two pieces of sand here and
02:07 - three pieces of sand here and a six
02:11 - here one there none there none there
02:13 - three there five there and one there
02:16 - right so this idea is that each cell has
02:19 - a certain amount of sand in it but there
02:22 - is a limit there is a limit and in some
02:25 - sense is kind of arbitrary but it works
02:27 - out nicely with this number
02:29 - the limit is four meaning it can't
02:31 - actually literally is three the maximum
02:33 - amount of sand that in one of these
02:35 - cells can have in it is three pieces so
02:38 - this begs the question what happens if I
02:41 - dribble a lot and put say a hundred
02:43 - pieces of sand in that spot right there
02:46 - well let's look at it this way let's say
02:51 - this is the initial starting point of
02:56 - this sand pile there are four pieces of
03:00 - sand right here and no pieces of sand
03:02 - anywhere else what happens is this
03:05 - becomes this cell which has four pieces
03:12 - of sand loses all of its and it topples
03:15 - and the sand falls onto its neighbors
03:18 - one piece in each direction just the
03:21 - neighbors to the right to left the top
03:22 - to bottom now I'm sure is after you
03:24 - watch this video and you look at my code
03:25 - and maybe you implemented yourself well
03:27 - what happens if you change that number
03:28 - of the max to three what happens if you
03:29 - let the sand fall in different ways all
03:31 - sorts of possibilities but I'm going to
03:32 - follow the core sand pile algorithm the
03:35 - one described in the numberphile video
03:37 - okay so now it looks like this zero one
03:39 - zero zero zero zero
03:42 - oh no no sorry it's one zero one zero
03:45 - one zero so all four pieces left the
03:49 - center spot they went up to the right
03:50 - now I could have a more complex scenario
03:54 - for example I could have two three zero
03:58 - zero four two three zero zero if this is
04:06 - the case what happens here is the same
04:09 - sort of thing in that this this remains
04:15 - a two this now becomes a four this
04:18 - remains a zero this now becomes a 1 this
04:21 - becomes a zero
04:22 - this becomes a three this stays a three
04:25 - this becomes a one and this stays a zero
04:27 - now I have this and so on and so forth
04:30 - all of a sudden now this topples so this
04:33 - goes out and this becomes a 1 and this
04:36 - becomes a 3 and this becomes a 1 and
04:38 - this becomes a 0 and this other piece of
04:40 - sand just sort of leaves the universe
04:42 - here now it's interesting if we think of
04:43 - this as an infinite space or if we think
04:46 - of it maybe as it a torus weren't like
04:48 - wraps around to the other side there's
04:50 - all sorts of kind of weird possibilities
04:51 - we could try but ultimately the core
04:54 - idea is that any cell that has more than
04:57 - three pieces of sand loses four pieces
05:00 - those go out to the neighbors so for
05:02 - example with this 100 what hat would
05:04 - happen here is this would become 96 and
05:07 - we would add one to each of the
05:09 - neighbors then the next generation this
05:11 - would become 92 so I'm talk about
05:14 - generations because I'm going to on one
05:16 - hand we could just look at the end
05:17 - result but I'm gonna watch it as an
05:18 - animation okay that's an explanation I
05:21 - am now going to go and write the code I
05:24 - took way too long explaining that I
05:25 - wanted it to be much shorter but such is
05:27 - life
05:27 - all right so let's see do we think we
05:30 - could get some sort of result like this
05:32 - I don't know maybe let's try so I'm
05:34 - gonna close the browser
05:35 - I've got processing open here all I need
05:38 - is a setup function and a draw function
05:43 - and then I need I need a to do I want to
05:47 - use a two dimensional array let me use a
05:50 - two dimensional array to describe these
05:53 - sand piles that are part of this
05:56 - processing window that I'm gonna draw
05:58 - into so I'm gonna call that sand piles
06:05 - then I'm gonna create I'm gonna just
06:08 - start with like a 200 by 200 window
06:11 - that'll sort of be simple and I'm gonna
06:13 - you'll be interesting to think about the
06:16 - resolution or like sort of the size of
06:17 - each cell on this grid but I'm just
06:19 - gonna have each cell be one pixel it was
06:22 - an easy way for me to work and then so I
06:24 - need to say sand piles is a new array we
06:29 - with new two-dimensional array with
06:32 - width and height spaces in it okay now
06:35 - then what I need to do is in draw let's
06:40 - write a function to render and to render
06:44 - I'm gonna say load pixels update pixels
06:48 - and I am going to loop through every
06:53 - single spot every single pile of sand
06:59 - every X and every Y and I am going to
07:05 - say now so what do I need to do all
07:08 - right let's jump so how much how much
07:11 - how many how much sand is there I'm
07:13 - going to say int num and piles index X
07:18 - index Y then according to that I need to
07:22 - set a pixel now the pixels aren't in the
07:24 - two dimensional array they're in a one
07:26 - dimensional array I have feel like I'm
07:28 - Sisyphus who just goes up the hill to
07:30 - mention about this formula from a
07:31 - one-dimensional rate oh dude metro retro
07:33 - what Mitchell all right I've done this
07:34 - countless times but X plus y times width
07:36 - that's going to give me the unique
07:39 - integer index of the pixel associated
07:41 - with the XY coordinate then I just need
07:44 - to give that some sort of color and so
07:46 - let's call that Co L now I want the
07:49 - color to be according to the number of
07:54 - the color to be according to how much
07:56 - sand there is so we can see here in the
07:58 - numberphile video zero grains one grain
08:01 - two Grange three grains
08:02 - these are nice colors I'm going to be
08:07 - very arbitrary about this right now and
08:08 - I'm gonna say color color equals white
08:13 - and then of course you're going to all
08:16 - want to tell me about how I should use a
08:18 - switch statement but I'm just gonna say
08:21 - if there are zero grains of sand it
08:24 - should be black if there's one grain of
08:27 - sand it should be
08:31 - pink and if they're too it'll be some
08:39 - other color and if there are three and
08:44 - if someone in the slack group wants to
08:46 - give me a color scheme I will take it
08:48 - there it will be this color so let's I
08:52 - don't know let's do this and then let's
08:55 - do this there we go
08:56 - okay so now and then if in draw I call
09:00 - render what we should see right now is
09:02 - whoops let's save this yeah think that's
09:05 - good idea let's call this sand piles if
09:12 - I run this we should see a black window
09:15 - right because the these sand piles were
09:19 - initialized with all zeros and I'm
09:23 - getting some color suggestions from the
09:25 - chat I will come back and and use those
09:28 - in a little bit okay now if I were to
09:32 - say sand piles let's let's so what the
09:35 - way that image was generating the
09:37 - numberphile video not to spoiler alert
09:39 - we tell you what happens at the end of
09:40 - the numberphile video is that just a lot
09:43 - of sand is dropped in the middle so what
09:45 - happens we just drop a huge amount of
09:47 - sand in the middle and watch it topple
09:49 - topple topple topple rippling out so
09:50 - let's do that and so I'm gonna say I'm
09:53 - gonna just have the middle be with the
09:56 - sort of spot that's with divided by two
09:57 - height divided by two and I'm gonna put
09:59 - right now I'm just gonna put four four
10:03 - pieces of grains of sand there so let's
10:05 - run this again and hopes let's run this
10:10 - again and we should see there it is now
10:12 - I have a white dot in the center there
10:14 - because there are four grains of sand so
10:17 - the next thing we need to do is figure
10:19 - out the topple algorithm topple what
10:22 - happens when the sand pile topples well
10:24 - if it's greater than four pass out top
10:28 - pass one grain of sand top left right
10:31 - bottom and then subtract four so the
10:33 - first thing I need to do is probably
10:35 - create a so if this is my current sand
10:38 - pile what I want to do is create kind of
10:41 - like the next pile and the next pile is
10:44 - going to start
10:45 - with all zeros in it and then if a cell
10:49 - doesn't have four like if if a cell has
10:54 - less than four then it can have that
10:58 - same number in the next pile and then so
11:02 - I could go and copy over everything
11:03 - that's less than four and then after
11:05 - that I could topple things so I could
11:09 - probably do this in one pass but I think
11:10 - doing it in two passes will work that's
11:12 - the way I'm thinking about it right now
11:13 - know if you're following me
11:14 - but you might follow me when I'm writing
11:16 - the code so let's let's come back and do
11:17 - that now so what I'm going to do is I'm
11:18 - going to write a function called topple
11:22 - and I'm going to say int next piles is
11:29 - also a just a blank array and then I am
11:33 - going to do this same for loop to look
11:37 - at every single spot I'm gonna do this
11:39 - twice I'm not sure if this is necessary
11:41 - but it's a way that I'm thinking about
11:43 - it right now
11:43 - I'm gonna say okay int num I need this
11:47 - again how many are in that spot and if
11:53 - num is less than four then next piles X
11:59 - Y is just equal to sand piles X Y so
12:07 - this is me copying over every single
12:10 - pile of sand that doesn't need to be
12:13 - toppled then what I'll do afterwards is
12:18 - I'll do this exact same loop again but
12:22 - if the number is greater than or equal
12:25 - to four greater than or equal to four
12:31 - then next piles will equal what it
12:34 - currently was minus four so subtract
12:37 - those four and then all of the neighbors
12:40 - X plus 1 X plus 1 X minus 1 y plus 1 and
12:53 - y -1 will each increase by one so I need
12:58 - to
12:59 - additively because there could be
13:00 - multiple piles with more than four on
13:03 - different size he did be able to add
13:04 - everything together so I think if I just
13:07 - take the current amount of sand subtract
13:11 - four and then send that each each of
13:14 - those four grains of sand out to each of
13:16 - the four neighbors this should be good
13:18 - and then at the end these sand piles is
13:21 - now next piles so let's take a look at
13:26 - this what do I see now oh I have to call
13:30 - that function so I want to render in
13:32 - draw and a render then topple and let's
13:35 - actually set the frame rate to one
13:37 - because maybe I can see it look at that
13:42 - so look at that i toppled that Center
13:45 - cell right it was white the first frame
13:49 - and then it now it has each one of those
13:51 - neighbors just has one pile of sand one
13:54 - grain of sand and that should be if I
13:56 - look at the render function one grain of
14:00 - sand is pink okay I think we're done
14:03 - we're actually kind of done I have to
14:05 - deal with the edge cases and lots of
14:07 - other stuff but let's actually down now
14:08 - we could just do something goofy we're
14:10 - gonna be like I don't know let's just
14:12 - add 400 things of sand oh now I'm still
14:16 - at one frame per second so looking at
14:19 - this we can kind of watch what it's
14:20 - doing the sand is toppling in each of
14:23 - the cells of coloring now it probably
14:24 - would be good for me to have created a
14:27 - version of this that was kind of sumed
14:29 - in so you can see it's zooming in using
14:33 - like a software zoom so it's sort of
14:34 - blurring each one of these pixels but I
14:36 - might as well just kind of go for it
14:39 - take out this frame rate one and just
14:41 - watch it go so now we can see this is
14:43 - what's happening now all of that sand
14:45 - ready finished so it toppled in got done
14:48 - so we need more sand how much sand can I
14:52 - put in how about that much there we go
14:57 - okay so I let this run for a little bit
14:59 - and Wow I have to admit I picked some
15:01 - like kind of horrendous colors and it
15:04 - and it is doing something kind of
15:05 - beautiful and interesting and weird it's
15:07 - not correct and the chat pointed out to
15:09 - me that this should have fourfold
15:10 - symmetry
15:11 - right there's no reason why and it it
15:13 - has this like nice symmetric quality to
15:15 - it
15:15 - but it's not the right kind of symmetry
15:17 - alright so what is the problem and it
15:19 - did take me a little bit of time to
15:21 - think about this and so the problem is I
15:24 - believe is here this is a very dangerous
15:29 - thing that I'm doing
15:30 - the point of next piles is that I always
15:34 - want next piles to accumulate the sand
15:37 - from previous that's why I'm copying
15:38 - over things that are less than four and
15:41 - then adding up things that went in
15:43 - toppled and also need to subtract the
15:45 - four from the thing that was toppled but
15:48 - I'm not just subtracting the four I'm
15:51 - overwriting anything that was there
15:52 - before so it could be that two cells
15:55 - with more than four are near next to
15:58 - each other and so one gets one from the
16:01 - other and but then I just but I don't
16:03 - but I vent then as soon as I get to the
16:05 - next cell I don't take that in
16:06 - consideration more so this should
16:07 - actually be adding and this by the way
16:10 - just can be the current amount which is
16:13 - none so I need to add na minus four so
16:17 - whatever it was before I want to put in
16:19 - that pile all of the sand except for the
16:22 - four that are going out to the neighbors
16:23 - and I believe that if I run this we
16:28 - should see it be much more symmetrical
16:30 - and you can see that already okay so the
16:33 - next thing that I'm gonna do I'm gonna
16:34 - do two more things so there's so much
16:36 - you could do with this I'm not gonna do
16:38 - I'm gonna let you do it
16:39 - I'm at least gonna pick some different
16:41 - colors and I'm going to speed up the
16:44 - animation to see to be able to get to
16:48 - the end result a little bit more quickly
16:50 - alright alka in the patron sponsored
16:53 - group in slack has some rainbow color
16:57 - suggestions for me so let's put those in
16:59 - where are they color this first color is
17:03 - to 5500 the next color is to 5500 the
17:08 - next color is 0-1 8563
17:13 - the next color is zero 104 255 and the
17:18 - last color is 120 to zero
17:24 - 2:29 I probably could use HSB color or
17:27 - tap the colors change over time there's
17:29 - so many things I could do but I'm just
17:30 - gonna just show you that the colors that
17:32 - you picked make a difference here so
17:34 - here we go there's our nice rainbow
17:37 - colors now what I want to do is I want
17:39 - to see the end result a bit more quickly
17:41 - well I mean one thing that I could do is
17:43 - just sit here and wait and I could if
17:45 - you're watching the recorded version of
17:47 - this I'll speed up the video to get to
17:48 - the end but just for this the sake of
17:50 - showing you how I could see it more
17:53 - quickly is I am going to all I need to
17:56 - do is call topo multiple times each time
17:59 - through draw so I'm going to write an
18:01 - extra loop in here like if I just say
18:03 - call topple ten times and run it we can
18:07 - see here that you can see it looks as if
18:09 - it's going faster it's not actually
18:10 - going faster just animating faster well
18:13 - it's doing ten sorry doing ten updates
18:16 - per frame of animation let's do a
18:18 - thousand there we go and I'm not so sure
18:25 - about these colors and then let's and of
18:32 - course we got an array out of bounds
18:33 - exception so let's fix that so we need
18:36 - to figure out so we need to say like as
18:38 - long as X plus 1 is less than width and
18:43 - as long as X minus 1 is greater than is
18:48 - greater than negative 1 I guess I could
18:50 - say greater than or equal to 0 and then
18:55 - this one I want to say if Y plus y plus
18:58 - 1 is less than height and this one and
19:01 - by the way I'm not using any I never do
19:04 - this but and I probably should just put
19:07 - the curly brackets in there but if you
19:09 - only ever have one line of code that
19:11 - comes after an if statement the curly
19:13 - brackets can be assumed for just that
19:14 - one line and then I'm gonna say if Y y
19:21 - -1 is greater than or equal to 0 so this
19:26 - will at least now fix the edge problem
19:29 - let's let it go as far as it can go
19:31 - crazy first of all the chat is done I
19:35 - got the wrong colors
19:38 - second is 255 255 0 oh yeah so I had the
19:45 - wrong colors oh there we go that's nicer
19:50 - Oh much prettier dude
19:53 - oh the BRIT rates gonna be a disaster on
19:57 - these YouTube videos this is quite
19:59 - lovely so the next thing I want to do is
20:02 - just finish this off by saying like 800
20:04 - by 800 and run it oh so slow probably
20:10 - some kind of magical shader thing could
20:12 - make it happen faster let's at least I
20:15 - wanted to animate a little faster so
20:17 - let's let's topple it only a hundred
20:20 - times per frame and I'm gonna just work
20:22 - on my email and some other stuff for a
20:24 - little bit and then I'll be back when
20:26 - this gets a little further along
20:28 - [Music]
20:38 - all right it's taking a really long time
20:40 - to render so I think that's good enough
20:42 - for this coding challenge there you go
20:44 - sand piles in processing I cannot wait
20:48 - to see what people make to this this
20:50 - user you could we could start to do
20:51 - stuff where you drop the sand you could
20:54 - pick your own color schemes you could
20:55 - have the colors change over time you
20:57 - could render something out to a giant
20:59 - poster and print it I don't know there's
21:00 - so many possibilities if you watch the
21:02 - numberphile video probably get more
21:03 - ideas thank you for watching this coding
21:05 - challenge and see you in a future one on
21:08 - something else bye
21:19 - you

Cleaned transcript:

oh hello it's time for a coding challenge in processing which is a Java based thing you can find more about it at processing dot org I am going to attempt to create something that looks like this otherwise known as a sand pile so first thank you very much to coding trained viewer Simon Tiger who suggested this On January 26 there is a nice little discussion here a link to the numberphile video that I just watched earlier this morning now here's the thing I highly encourage you if you want to pause right now and go and watch the sand piles I can want to say sand file because it's numberphile and sand pile but anyway you don't watch that video right now to find out more about the mathematics of sand piles I'm gonna kind of skip all that and go cut right to the chase and just look at the basic idea and then what happens when we take that idea and turn it into color in a processing sketch so let me come over here and talk to you about the basic idea so first of all this video is going to the code that I'm going to write I think I've written it yet so it's going to look a lot like the game of life or maybe even like a blur image processing blur algorithm because what I'm going to do with this sand pile algorithm is look at a twodimensional space divided into cells and the core sort of the core building block here that I need to look at just in the simplest way is a 3x3 grid so ultimately I'm going to take this algorithm and apply it to a processing sketch that might be something like 600 by 600 pixels and I'm gonna let this sand piles thing happen all throughout this window and color it but what is what actually needs to happen I can reduce and describe to you in terms of just this 3x3 grid okay so why is it called sand pile well the idea is that if I have this grid here I might dribble sand on it and I'm like sort of have a few pieces of sand like there might be two pieces of sand here and three pieces of sand here and a six here one there none there none there three there five there and one there right so this idea is that each cell has a certain amount of sand in it but there is a limit there is a limit and in some sense is kind of arbitrary but it works out nicely with this number the limit is four meaning it can't actually literally is three the maximum amount of sand that in one of these cells can have in it is three pieces so this begs the question what happens if I dribble a lot and put say a hundred pieces of sand in that spot right there well let's look at it this way let's say this is the initial starting point of this sand pile there are four pieces of sand right here and no pieces of sand anywhere else what happens is this becomes this cell which has four pieces of sand loses all of its and it topples and the sand falls onto its neighbors one piece in each direction just the neighbors to the right to left the top to bottom now I'm sure is after you watch this video and you look at my code and maybe you implemented yourself well what happens if you change that number of the max to three what happens if you let the sand fall in different ways all sorts of possibilities but I'm going to follow the core sand pile algorithm the one described in the numberphile video okay so now it looks like this zero one zero zero zero zero oh no no sorry it's one zero one zero one zero so all four pieces left the center spot they went up to the right now I could have a more complex scenario for example I could have two three zero zero four two three zero zero if this is the case what happens here is the same sort of thing in that this this remains a two this now becomes a four this remains a zero this now becomes a 1 this becomes a zero this becomes a three this stays a three this becomes a one and this stays a zero now I have this and so on and so forth all of a sudden now this topples so this goes out and this becomes a 1 and this becomes a 3 and this becomes a 1 and this becomes a 0 and this other piece of sand just sort of leaves the universe here now it's interesting if we think of this as an infinite space or if we think of it maybe as it a torus weren't like wraps around to the other side there's all sorts of kind of weird possibilities we could try but ultimately the core idea is that any cell that has more than three pieces of sand loses four pieces those go out to the neighbors so for example with this 100 what hat would happen here is this would become 96 and we would add one to each of the neighbors then the next generation this would become 92 so I'm talk about generations because I'm going to on one hand we could just look at the end result but I'm gonna watch it as an animation okay that's an explanation I am now going to go and write the code I took way too long explaining that I wanted it to be much shorter but such is life all right so let's see do we think we could get some sort of result like this I don't know maybe let's try so I'm gonna close the browser I've got processing open here all I need is a setup function and a draw function and then I need I need a to do I want to use a two dimensional array let me use a two dimensional array to describe these sand piles that are part of this processing window that I'm gonna draw into so I'm gonna call that sand piles then I'm gonna create I'm gonna just start with like a 200 by 200 window that'll sort of be simple and I'm gonna you'll be interesting to think about the resolution or like sort of the size of each cell on this grid but I'm just gonna have each cell be one pixel it was an easy way for me to work and then so I need to say sand piles is a new array we with new twodimensional array with width and height spaces in it okay now then what I need to do is in draw let's write a function to render and to render I'm gonna say load pixels update pixels and I am going to loop through every single spot every single pile of sand every X and every Y and I am going to say now so what do I need to do all right let's jump so how much how much how many how much sand is there I'm going to say int num and piles index X index Y then according to that I need to set a pixel now the pixels aren't in the two dimensional array they're in a one dimensional array I have feel like I'm Sisyphus who just goes up the hill to mention about this formula from a onedimensional rate oh dude metro retro what Mitchell all right I've done this countless times but X plus y times width that's going to give me the unique integer index of the pixel associated with the XY coordinate then I just need to give that some sort of color and so let's call that Co L now I want the color to be according to the number of the color to be according to how much sand there is so we can see here in the numberphile video zero grains one grain two Grange three grains these are nice colors I'm going to be very arbitrary about this right now and I'm gonna say color color equals white and then of course you're going to all want to tell me about how I should use a switch statement but I'm just gonna say if there are zero grains of sand it should be black if there's one grain of sand it should be pink and if they're too it'll be some other color and if there are three and if someone in the slack group wants to give me a color scheme I will take it there it will be this color so let's I don't know let's do this and then let's do this there we go okay so now and then if in draw I call render what we should see right now is whoops let's save this yeah think that's good idea let's call this sand piles if I run this we should see a black window right because the these sand piles were initialized with all zeros and I'm getting some color suggestions from the chat I will come back and and use those in a little bit okay now if I were to say sand piles let's let's so what the way that image was generating the numberphile video not to spoiler alert we tell you what happens at the end of the numberphile video is that just a lot of sand is dropped in the middle so what happens we just drop a huge amount of sand in the middle and watch it topple topple topple topple rippling out so let's do that and so I'm gonna say I'm gonna just have the middle be with the sort of spot that's with divided by two height divided by two and I'm gonna put right now I'm just gonna put four four pieces of grains of sand there so let's run this again and hopes let's run this again and we should see there it is now I have a white dot in the center there because there are four grains of sand so the next thing we need to do is figure out the topple algorithm topple what happens when the sand pile topples well if it's greater than four pass out top pass one grain of sand top left right bottom and then subtract four so the first thing I need to do is probably create a so if this is my current sand pile what I want to do is create kind of like the next pile and the next pile is going to start with all zeros in it and then if a cell doesn't have four like if if a cell has less than four then it can have that same number in the next pile and then so I could go and copy over everything that's less than four and then after that I could topple things so I could probably do this in one pass but I think doing it in two passes will work that's the way I'm thinking about it right now know if you're following me but you might follow me when I'm writing the code so let's let's come back and do that now so what I'm going to do is I'm going to write a function called topple and I'm going to say int next piles is also a just a blank array and then I am going to do this same for loop to look at every single spot I'm gonna do this twice I'm not sure if this is necessary but it's a way that I'm thinking about it right now I'm gonna say okay int num I need this again how many are in that spot and if num is less than four then next piles X Y is just equal to sand piles X Y so this is me copying over every single pile of sand that doesn't need to be toppled then what I'll do afterwards is I'll do this exact same loop again but if the number is greater than or equal to four greater than or equal to four then next piles will equal what it currently was minus four so subtract those four and then all of the neighbors X plus 1 X plus 1 X minus 1 y plus 1 and y 1 will each increase by one so I need to additively because there could be multiple piles with more than four on different size he did be able to add everything together so I think if I just take the current amount of sand subtract four and then send that each each of those four grains of sand out to each of the four neighbors this should be good and then at the end these sand piles is now next piles so let's take a look at this what do I see now oh I have to call that function so I want to render in draw and a render then topple and let's actually set the frame rate to one because maybe I can see it look at that so look at that i toppled that Center cell right it was white the first frame and then it now it has each one of those neighbors just has one pile of sand one grain of sand and that should be if I look at the render function one grain of sand is pink okay I think we're done we're actually kind of done I have to deal with the edge cases and lots of other stuff but let's actually down now we could just do something goofy we're gonna be like I don't know let's just add 400 things of sand oh now I'm still at one frame per second so looking at this we can kind of watch what it's doing the sand is toppling in each of the cells of coloring now it probably would be good for me to have created a version of this that was kind of sumed in so you can see it's zooming in using like a software zoom so it's sort of blurring each one of these pixels but I might as well just kind of go for it take out this frame rate one and just watch it go so now we can see this is what's happening now all of that sand ready finished so it toppled in got done so we need more sand how much sand can I put in how about that much there we go okay so I let this run for a little bit and Wow I have to admit I picked some like kind of horrendous colors and it and it is doing something kind of beautiful and interesting and weird it's not correct and the chat pointed out to me that this should have fourfold symmetry right there's no reason why and it it has this like nice symmetric quality to it but it's not the right kind of symmetry alright so what is the problem and it did take me a little bit of time to think about this and so the problem is I believe is here this is a very dangerous thing that I'm doing the point of next piles is that I always want next piles to accumulate the sand from previous that's why I'm copying over things that are less than four and then adding up things that went in toppled and also need to subtract the four from the thing that was toppled but I'm not just subtracting the four I'm overwriting anything that was there before so it could be that two cells with more than four are near next to each other and so one gets one from the other and but then I just but I don't but I vent then as soon as I get to the next cell I don't take that in consideration more so this should actually be adding and this by the way just can be the current amount which is none so I need to add na minus four so whatever it was before I want to put in that pile all of the sand except for the four that are going out to the neighbors and I believe that if I run this we should see it be much more symmetrical and you can see that already okay so the next thing that I'm gonna do I'm gonna do two more things so there's so much you could do with this I'm not gonna do I'm gonna let you do it I'm at least gonna pick some different colors and I'm going to speed up the animation to see to be able to get to the end result a little bit more quickly alright alka in the patron sponsored group in slack has some rainbow color suggestions for me so let's put those in where are they color this first color is to 5500 the next color is to 5500 the next color is 01 8563 the next color is zero 104 255 and the last color is 120 to zero 229 I probably could use HSB color or tap the colors change over time there's so many things I could do but I'm just gonna just show you that the colors that you picked make a difference here so here we go there's our nice rainbow colors now what I want to do is I want to see the end result a bit more quickly well I mean one thing that I could do is just sit here and wait and I could if you're watching the recorded version of this I'll speed up the video to get to the end but just for this the sake of showing you how I could see it more quickly is I am going to all I need to do is call topo multiple times each time through draw so I'm going to write an extra loop in here like if I just say call topple ten times and run it we can see here that you can see it looks as if it's going faster it's not actually going faster just animating faster well it's doing ten sorry doing ten updates per frame of animation let's do a thousand there we go and I'm not so sure about these colors and then let's and of course we got an array out of bounds exception so let's fix that so we need to figure out so we need to say like as long as X plus 1 is less than width and as long as X minus 1 is greater than is greater than negative 1 I guess I could say greater than or equal to 0 and then this one I want to say if Y plus y plus 1 is less than height and this one and by the way I'm not using any I never do this but and I probably should just put the curly brackets in there but if you only ever have one line of code that comes after an if statement the curly brackets can be assumed for just that one line and then I'm gonna say if Y y 1 is greater than or equal to 0 so this will at least now fix the edge problem let's let it go as far as it can go crazy first of all the chat is done I got the wrong colors second is 255 255 0 oh yeah so I had the wrong colors oh there we go that's nicer Oh much prettier dude oh the BRIT rates gonna be a disaster on these YouTube videos this is quite lovely so the next thing I want to do is just finish this off by saying like 800 by 800 and run it oh so slow probably some kind of magical shader thing could make it happen faster let's at least I wanted to animate a little faster so let's let's topple it only a hundred times per frame and I'm gonna just work on my email and some other stuff for a little bit and then I'll be back when this gets a little further along all right it's taking a really long time to render so I think that's good enough for this coding challenge there you go sand piles in processing I cannot wait to see what people make to this this user you could we could start to do stuff where you drop the sand you could pick your own color schemes you could have the colors change over time you could render something out to a giant poster and print it I don't know there's so many possibilities if you watch the numberphile video probably get more ideas thank you for watching this coding challenge and see you in a future one on something else bye you
