With timestamps:

00:00 - (whistle toots)
00:01 - - Hello, welcome to a coding
challenge, Fourier series.
00:05 - So what I am going to
program in JavaScript
00:07 - using the p5.js library is exactly this.
00:11 - This is what's known as a Fourier series.
00:14 - It is a series of wave patterns
that when summed up together
00:19 - approximate some other function (sighs).
00:23 - What does that even mean?
00:24 - So first of all, I'm going
to show you some resources,
00:28 - the things that got me
thinking about this topic
00:30 - and wanting to make this coding challenge.
00:32 - And you probably should, if you want,
00:34 - stop this video and go look
at these other resources,
00:37 - and then you could come
back, if you wanted,
00:38 - or maybe you're just off
doing something else.
00:40 - So pretty recently, Smarter Every Day
00:43 - came out with a video called,
00:45 - What is a Fourier Series?
Explained by drawing circles.
00:49 - This video reminded me
00:51 - of a amazing video that I had watched
00:54 - at some point in the past (laughs),
00:56 - I guess like almost a year ago, called,
00:59 - what is the Fourier Transform?
A visual introduction.
01:02 - You probably, if you've done
any coding and programming,
01:04 - you've probably heard these terms before,
01:06 - FFT, fast Fourier transform.
01:09 - It's usually referenced in the
context of analyzing sound.
01:15 - And so Smarter Every Day's
01:17 - video was a collaboration
worked with a Turkish
01:22 - researcher
01:24 - on this website here.
01:25 - I'm not going to attempt to pronounce it,
01:26 - or I will, bilimneguzellan.net.
01:30 - I encourage you to check out
and read this whole article,
01:33 - but this is a visualization, again,
01:36 - of exactly what I want to do.
01:38 - A series
01:40 - of wave patterns visualized
as a path along a circle,
01:45 - periodic functions summed together
01:48 - to approximate a square wave.
01:49 - And if we can make this
happen in JavaScript,
01:54 - then there,
01:56 - in theory, is no reason why
we couldn't then figure out
02:00 - how to draw any given path
02:03 - as a series of Fourier transforms.
02:05 - And there's a sort of a
well-known GIF or video
02:08 - of this like crazy set of
circles drawing Homer Simpson.
02:11 - So I'm hoping to get there.
02:13 - But this video, I just want
to, by the end of this video,
02:16 - have exactly this pattern in JavaScript.
02:20 - Okay.
02:21 - So I also want to
02:24 - reference this website,
betterexplained.com,
02:26 - which has a nice article,
An Interactive Guide
02:29 - To The Fourier Transform.
02:32 - And
02:33 - this, I think, is a really
excellent explanation.
02:36 - So again (laughs), going to
get started coding in a second,
02:38 - but you're just going to have to humor me
02:40 - to let me kind of talk
about this a little bit more
02:42 - just to get my feet under me here.
02:45 - So the idea of a Fourier
transform, so a sound wave, right?
02:49 - We have this idea of a sine wave.
02:51 - You've probably seen me draw sine waves
02:53 - on the board or in code
in countless videos,
02:56 - usually drawn something like this.
02:59 - A sine wave has a frequency, (laughs)
03:01 - which is how often does it repeat.
03:04 - Like if this is the sort of x-axis,
03:08 - like this is one whole cycle, right?
03:11 - And I could think of that
as like the time it takes
03:14 - for this dot to go all
the way around the circle.
03:17 - So frequency is like
03:20 - how many cycles of the
wave per unit of time,
03:23 - like per second or per frame.
03:25 - There's also amplitude.
03:27 - Amplitude is the height
(laughs) of the sine wave,
03:30 - how much distance between the
very top and the very bottom.
03:35 - And so a sound can be
represented as a sine wave.
03:38 - So but you probably have seen like,
03:40 - oh, I've got this recording
device soundy thingy
03:43 - and what it's doing is
it's like (vocalizing),
03:46 - this is like the sound.
03:47 - This is the wave, this
is the representation
03:49 - of the sound that I'm
listening to right now.
03:52 - Well, you can create,
this kind of wave pattern
03:55 - is typically actually the sum
of multiple wave patterns.
04:00 - So in other words, if this
is like the musical note a,
04:04 - and then this is like the
musical note something else,
04:07 - and we're to add these two waves together,
04:09 - can you still see what I'm drawing?
04:12 - You know, I might get something
that looks like this, right?
04:15 - And I've done this, I think I had like
04:17 - an additive wave video in
the Nature of Code series
04:19 - about this kind of idea.
04:20 - The idea of the Fourier
transform is can we go,
04:24 - right, I could have these two waves.
04:27 - I could add them together
and get this pattern.
04:30 - Could I go in reverse?
04:32 - If I'm listening to a sound like this,
04:34 - could I pull out all of the waves,
04:37 - the sounds, the frequencies,
that make up that?
04:40 - That's like pitch detection.
04:42 - Or if I wanted to then filter out
04:45 - a very high-pitched sound,
if I could take the sound,
04:48 - break it apart, take away one
of the high-pitched sound,
04:51 - add it back together, I would get this.
04:54 - So this is akin to, I
love this metaphor here
04:57 - in the Better Explained, of
unsmoothie-ing a smoothie.
05:00 - So I'm (laughs), I like to
make smoothies, actually.
05:03 - Little-known fact.
05:06 - I always like, anyway, so
but could you like, right?
05:09 - Let's say I take some
mango, and some kale,
05:11 - and some blueberries, and
some like almond milk,
05:13 - and I mix them all together,
and I give it to my children,
05:16 - and I say, I made you
this beautiful smoothie.
05:18 - Can you guess what's inside of it?
05:19 - This is actually a game
we actually play at home,
05:21 - I've just realized, like,
ooh, this is perfect.
05:23 - Well, if I could do a Fourier transform,
05:26 - I could take the mixed
smoothie and filter out,
05:29 - go in reverse, and find
out all the ingredients.
05:32 - That's the idea.
05:33 - So that's the idea of
the Fourier transform.
05:35 - That's conceptually what it is.
05:36 - Now what I want to do in this
video is I'm not going to worry
05:39 - about figuring any of this out (laughs).
05:41 - I'm just, now I understand what it is,
05:44 - what it can be used for.
05:45 - I have this goal eventually of having it,
05:48 - of using a Fourier series
to draw any arbitrary path.
05:53 - But one way to get started with that
05:56 - is exactly what's demonstrated
here on this website,
06:00 - which is, what waves do
you need to add up together
06:04 - to end up with a square wave?
06:06 - And you can see here,
06:07 - this is actually a really
nice visualization,
06:09 - is as you have more and more iterations
06:12 - of the Fourier series, how
it converges even closer
06:15 - and closer to the square wave.
06:17 - I could also just go here to
Wikipedia and find this again.
06:21 - So this is the clue.
06:23 - So there's this idea
06:24 - in a Fourier series of
Fourier coefficients,
06:27 - and some kind of like iterative thing,
06:29 - of like n, and n plus one, and n plus two.
06:31 - And we can actually see a
nice clue to that in here.
06:34 - This is actually a very,
06:35 - this is one of the
simplest Fourier series.
06:37 - What is the series?
06:38 - One, three, five, seven.
06:40 - Can you guess the next number?
06:43 - (bell dings)
06:43 - Nine, right?
06:44 - And what's after that?
06:45 - 11.
06:46 - So if I can just implement this,
06:49 - each one of these circles
and have them rotate around
06:52 - like this at that period or frequency,
06:54 - with that amplitude, we're
going to get somewhere.
06:55 - So let's (laughs), I've talked
about this for way too long.
06:58 - Let's try to actually code this now.
07:00 - So the first thing that I want to do,
07:01 - I'm just going to start, I'm
going to start like kind of even
07:03 - not thinking about the Fourier series.
07:05 - And I'm just going to make
up a variable called angle.
07:07 - You could really think of that as time.
07:09 - It might be more appropriate
for me to call this time,
07:11 - 'cause time is moving forward,
07:13 - that's a sort of crucial idea.
07:14 - And I'm just going to say, time equals,
07:16 - every time through draw,
if you haven't worked with
07:19 - p5 before, draw is a function
07:21 - that loops over and over
again, over and over again.
07:23 - So time is moving forward.
07:25 - Then what I want to also
do is I just want to like
07:28 - draw a circle somewhere (laughs).
07:30 - So I'm going to translate to like
07:32 - 200 pixels over and 200 pixels down.
07:35 - I'm going to have this idea of a radius,
07:37 - like the radius of a
circle that I want to draw
07:39 - is maybe going to be 50 pixels.
07:43 - And then I'm going to
say ellipse at zero zero,
07:47 - with that radius times two,
because the ellipse function
07:50 - expects a diameter, radius is half that.
07:52 - I'm going to make this white, so
I'm going to say a stroke 250,
07:56 - oops (laughs), stroke 255.
07:58 - Somebody told me how to get
rid off that auto-complete,
08:00 - and I still haven't done it, and a noFill.
08:02 - So when I go back the to
browser and refresh it,
08:04 - I've got a nice circle there.
08:05 - Eh, let's make it a little bigger.
08:09 - All right.
08:09 - So now what I want to do
is, how can I have that dot
08:12 - traveling around the circle?
08:13 - Let me have the dot
traveling around the circle.
08:15 - So the way that I would
do that is I would use
08:18 - a polar to Cartesian
coordinate transformation.
08:22 - And I'll certainly have a video
08:23 - that talks about how to do that.
08:25 - But what I'm talking about
here is if this is the radius,
08:28 - and this is the angle, which
is really in my program
08:31 - the time, how far over in
x, and how far over in y,
08:36 - how far up in y, can be
calculated based on trigonometry?
08:41 - So the radius times cosine of the angle,
08:44 - or angle is the x value,
08:46 - the radius times the sine
of the angle is the y value.
08:49 - So I'm going to do that here (laughs).
08:55 - I'm going to say, let x equal
radius times cosine (snorts),
09:00 - cosine of time.
09:02 - And let y equal radius
times sine of (laughs),
09:07 - sine of time, I should probably
pause and turn that off.
09:12 - And then, but let me
get through this first,
09:14 - point x (laughs), I'm
definitely going to pause
09:16 - and turn this off, point x, y,
09:19 - I'm going to say stroke 255,
09:22 - stroke, actually, let's
make this a circle also.
09:26 - So we're going to say like ellipse x, y,
09:28 - we're just going to make it
smaller, like eight pixels.
09:31 - And let's also say fill 2225.
09:33 - My god, this is making me crazy.
09:35 - And here we go.
09:37 - Look at that.
09:38 - There's that circle moving, right?
09:40 - That circle is moving, and
maybe it makes sense to also
09:43 - draw a line (laughs)
from zero, zero to x, y.
09:49 - And now I've got this, and I want it
09:51 - to move a little bit faster,
and honestly I'd like it
09:54 - to go the other direction (laughs).
09:55 - I'm not sure, I should actually check.
09:57 - What is it doing, if I
want to like recreate
09:59 - exactly what's here, yeah, yeah,
10:01 - it's moving the other direction.
10:01 - So I've got the beginnings of this.
10:03 - Now I haven't worried
about the number four here
10:05 - and the fact that I've got
the angle divided by pi,
10:07 - but we'll get there.
10:09 - (bell dings)
10:10 - I'm back, I fixed this auto-complete thing
10:11 - that was bothering me
in Visual Studio Code.
10:13 - I'll put something in the description
10:14 - about how I did that (laughs).
10:16 - But I also wanted to mention, in the chat,
10:17 - thank you to Amar who mentioned,
10:19 - who wrote, you are using Fourier series
10:21 - and Fourier transform interchangeably,
10:24 - but they are not the same thing.
10:25 - So thank you so much for that comment.
10:27 - I will post some links, also,
in the video's description
10:30 - for more reading about this.
10:31 - But in short, the Fourier
series is for periodic signals,
10:34 - which is what I'm doing exactly right now
10:36 - to create this square
wave, which is periodic,
10:39 - versus the Fourier transform
which is for aperiodic signals.
10:44 - Another way of thinking
about that is to represent
10:47 - any general non-periodic function.
10:49 - So hopefully as I get
further down this road
10:52 - I will come back to this.
10:54 - And also in the chat,
Smarter Every Day writes,
10:56 - Fourier transform is for
swapping between frequency domain
11:00 - and time domain, which is
an also really nice way
11:02 - of putting it.
11:04 - Okay.
11:04 - But what I am doing in
this video is implementing
11:07 - the Fourier series, the periodic series
11:14 - that add up together to the
square wave pattern, okay.
11:17 - So here we go.
11:18 - So I have success step one.
11:20 - I have my circle passing around.
11:22 - And you know what,
11:29 - I think that I probably
should not put this,
11:32 - I'm going to have this not go
the correct direction (laughs).
11:36 - I'm going to have it
go, 'cause I don't know
11:38 - if the negative number's
going to mess things up there.
11:39 - Okay.
11:40 - All right, next step.
11:41 - Next thing that I need to do,
11:43 - and if we go back to
this particular video is,
11:45 - how can I take this circle
that's moving around
11:48 - and then draw the resulting wave pattern?
11:51 - And this is actually kind
of a much simpler problem
11:54 - than you might think, because
basically what I want to do,
11:57 - this is moving in two dimensions.
11:58 - X is oscillating back and forth,
12:01 - y is oscillating back and forth,
12:03 - and both those oscillating
at the same frequency,
12:05 - with the same amplitude,
in the same phase,
12:08 - the starting together, is moving along
12:10 - the path of the circle.
12:11 - So I just need to take the y value
12:13 - and sort of graph that along the x-axis.
12:15 - So the way that I'm going to do that
12:17 - is I'm going to add an array to my code.
12:20 - I'll call it wave.
12:21 - And it's going to be an empty array.
12:23 - It has nothing in it.
12:24 - And what I'm going to do here
12:26 - is every time I calculate a new y value,
12:29 - I'm going to say wave push y.
12:31 - So I'm just going to save
that particular y value.
12:34 - So now all I need to do is say,
12:36 - oh, you know, for let x, you
know, I'm not going to use x,
12:39 - i equals zero, you know, i
is less than wave.length,
12:44 - i++.
12:45 - Let's draw a point
12:49 - at i,wave
12:51 - index i,
12:53 - right?
12:53 - So all I'm doing here is
saying, let's just draw
12:57 - all of those height values,
12:59 - those y values, from kind of x equals zero
13:02 - to as many as them as I get.
13:04 - So if I do this, you're
going to see, look at that.
13:07 - There's that wave pattern going.
13:09 - All of those points
are moving up and down,
13:11 - and you could see how
the height of that wave
13:13 - is the same as the thing passing around.
13:16 - Okay.
13:17 - But this doesn't look so
great, so what I want to do is,
13:20 - I want to instead use beginShape
and endShape, this will,
13:25 - and then say vertex.
13:27 - So this will actually
like tie it all together.
13:29 - And I think if I say, no, it's actually,
13:31 - I'm going to leave the fill
13:33 - in there for a second,
'cause it's kind of cool.
13:34 - So that's actually like
trying to fill in the shape,
13:36 - which is sort of a nice pattern.
13:39 - But I'm going to just say noFill.
13:42 - I'm going to do this, refresh the page,
13:45 - and then also, you
know, why not translate,
13:49 - just to translate this a little
bit over, like 200 pixels.
13:53 - And we can see this.
13:54 - And then I guess I could also draw, sorry,
13:57 - I want to draw a line.
13:58 - Yes, I want to draw, sorry, I
got confused what I was doing.
14:00 - I want the end of the line
to connect to where that is.
14:05 - Oh, of course.
14:06 - Okay.
14:07 - So what I want to do is draw a line,
14:10 - so I need that first, I
need this first value.
14:14 - So I have x minus 200,y
14:19 - to i,wave
14:22 - index zero.
14:24 - And actually it's not i, it's zero.
14:25 - So this is just, this I
know is the very first point
14:29 - in this loop, and since
I translated it over,
14:31 - I've got to like back up with my x value.
14:32 - This is very awkward.
14:38 - ♪ I will refactor this later, you know ♪
14:42 - ♪ I will refactor this later ♪
14:45 - Oh, no, no, no.
14:46 - I don't want it to connect to here.
14:48 - ♪ You know I will ♪
14:51 - What am I doing wrong?
14:52 - ♪ This later ♪
14:54 - Why is what I'm doing different?
14:55 - Oh, this is, oh, I'm doing it backwards.
14:58 - Ah, I know what I'm doing.
14:59 - Ah, I'm doing it backwards.
15:00 - I actually don't want to, I'm appending
15:03 - to the end of the array, so
every new value I'm appending
15:06 - to the end, I want to
add it to the beginning,
15:07 - so instead of using push, there we go.
15:10 - Instead of using push,
15:13 - I want to use unshift.
15:15 - So unshift is a JavaScript function,
15:16 - it's a weird name for it,
but push just adds this thing
15:19 - to the end of the array,
15:20 - and I want to add it to the beginning.
15:21 - Well that was a mistake (laughs).
15:24 - There we go.
15:25 - This is what I'm looking for.
15:27 - There we go, okay.
15:28 - (bell dings)
15:29 - So now I have the line
(laughs) connected there.
15:32 - Now the one thing that's a
little bit of an issue here
15:35 - is that I'm just like adding
points, and adding points,
15:38 - and adding points, and adding points,
15:39 - and never getting rid of any points.
15:41 - So I also should probably,
15:43 - at some point I should say
something like, if wave.length
15:49 - is greater than like,
15:51 - I'm just going to make
up some number right now.
15:52 - I could do a calculation
of how many points I need
15:54 - 'til the end of the canvas,
15:56 - but just to move more quickly
here I'm going to say wave.pop.
15:59 - So that would just like, if
its getting more than 500
16:01 - it's going to like delete
the last one off the end.
16:04 - And now we should be able to say like,
16:07 - should be able to look at wave.length.
16:10 - It's 152.
16:12 - So clearly I only need like,
16:14 - I don't need more than 250 (laughs).
16:16 - All right,
16:17 - we are at this spot.
16:19 - Now comes the exciting part.
16:22 - I mean this was hopefully
all somewhat exciting,
16:23 - but to me, how do I suddenly go from,
16:27 - I have one circle
16:30 - with a point around it,
16:33 - to another circle that's
kind of like there
16:36 - with another point around it,
16:38 - to another circle that's like there,
16:40 - with another point around it?
16:41 - How am I going to add up these circles
16:44 - and continue this path of x y along them
16:47 - with all of these points
rotating and spinning?
16:49 - And guess what?
16:50 - I've actually done this before.
16:52 - I'm just remembering now.
16:53 - I have a video on the fractal spirograph.
16:57 - Let's see if this comes up.
16:59 - Yeah, the fractal spirograph.
17:01 - I actually did this already
in the fractal spirograph
17:03 - which was this way of doing exactly this
17:06 - to create a fractal pattern.
17:07 - I should go back and revisit this.
17:09 - But so we'll see how
this compares to that.
17:12 - So let me go back to the code here.
17:14 - And so what I want to do, so first of all,
17:16 - before I do this, I think I need to think
17:19 - a bit more formally about these functions.
17:22 - So before, I was just saying
radius, cosine of time.
17:26 - Radius, sine of time.
17:28 - But these functions actually map
17:31 - to
17:33 - these values on Wikipedia here.
17:36 - So
17:37 - if theta is my time, basically,
17:40 - what I'm saying is that I want to, and
17:44 - the value multiplied by that
17:48 - is four divided by, sorry
(laughs), theta is my time,
17:52 - and four divided by pi
17:53 - is basically my radius, in a way here.
17:56 - Hmm, kind of conflating some
things, but I can start to use
18:00 - this particular series to understand
18:02 - the ratio of the radii and the frequencies
18:05 - between these different
oscillating circles.
18:09 - Okay.
18:10 - So let's say, what if
I, what I do is I say,
18:14 - four divided by pi,
18:17 - times cosine
18:18 - of, what was it again, one times time.
18:22 - So I'm going to do this.
18:24 - I'm going to just change the y
18:26 - here.
18:28 - And then what I'm going to do is I'm also
18:30 - then going to say, radius times that.
18:38 - And also I missed something.
18:41 - Four divided by what?
18:43 - One times, this is confusing,
'cause there's a one here.
18:46 - One times angle, one times pi.
18:49 - So I'm going to say,
that's one times time,
18:53 - one times time, and this is one times pi,
18:56 - and this is one times pi.
18:58 - So the number that I need to change
19:02 - for each circle is that one.
19:03 - So let's just see what
this actually yields.
19:08 - And I'm going to go back to here.
19:11 - t's sort of, it's the same thing,
19:13 - but now the fact that that radius is 100,
19:15 - it's like everything is way too big.
19:18 - This is going to get calculated here.
19:20 - ♪ I will refactor this later ♪
19:24 - Let's put this in here.
19:26 - And then let's make this back,
19:28 - just 'cause I don't really need,
19:30 - let's make this back to here.
19:33 - Okay.
19:34 - And four time, divide, oh, oh,
this should be one times pi.
19:37 - Aah, why is it doing that to me?
19:39 - I don't want that, I want
these divided by each other.
19:41 - Visual Studio Code is too
smart for my own good.
19:46 - There we go.
19:47 - There we go.
19:48 - That's what I wanted.
19:49 - That's why it was giving
me something crazy.
19:52 - Anyway, okay.
19:54 - Radius is not defined.
19:56 - Now I need to draw the circle next.
19:58 - This is when things are going awry.
20:02 - And let me put this here.
20:04 - There we go.
20:05 - And now
20:07 - there we go (laughs).
20:08 - Of course now it's the, of course,
20:09 - I had the division in the wrong place.
20:11 - I have this tiny little wave (laughs).
20:13 - So let's go back and make that about
20:17 - 25, which I think would be now basically,
20:19 - oh, it's divided by pi, aah!
20:24 - This is going remarkably well (laughs).
20:26 - Here we go, okay.
20:27 - I'm happy with where I am now (sighs).
20:30 - Okay, so now I have that first circle.
20:32 - The reason why I am doing this,
20:34 - the reason why I'm putting this,
20:36 - making all this work,
'cause I want this to be n.
20:39 - I actually want this to be a
number that changes, right?
20:43 - First,
20:45 - first it's one.
20:46 - Then it's three, then it's
five, then it's seven.
20:49 - That's not too hard to figure out, right?
20:50 - And what I want is to start
x with, and y, both at zero,
20:56 - and just add this stuff together.
20:58 - So x+=,
21:03 - y plus equal.
21:05 - So I want you, and then what I
want to do is I want to loop n.
21:08 - So n is going to go from one,
I'm going to say zero, actually,
21:12 - n, 'cause I'm, you got to count
21:15 - starting with zero, n
is less than two, n++.
21:20 - And then, and this really by
the way, I should call this i,
21:23 - because what I'm really
saying is, what n is.
21:28 - How do I do one, three?
21:29 - And this is pretty easy.
21:30 - I multiply it by two and add one.
21:33 - N equals
21:34 - i times two, plus one, right?
21:36 - When i is zero, I get one.
21:38 - When i is one, I get three.
21:40 - When i is two, I get five.
21:43 - So now if we add these together,
21:44 - and I'm just doing two right now.
21:47 - And speaking of which, I should move this
21:50 - all the way down to here.
21:52 - And I'm going to take
this out for a second.
21:57 - And then I've got to go
back here, and there we go.
21:59 - Okay, so something is wrong.
22:01 - I kind of got things close.
22:03 - Like look at this interesting,
22:04 - weird, crazy pattern that I've got.
22:07 - Okay, so the line should
not be going from,
22:10 - so I should be actually keeping track of
22:14 - previous x is x,
22:16 - and
22:18 - previous y is y.
22:21 - So I don't, I'm going to like
take out the wave for a second,
22:24 - 'cause I'm going to have to
change what I'm doing here.
22:25 - And then I'm going to just
say, previous x equals x.
22:31 - Oh, no.
22:31 - And then
22:35 - previous x equals x, previous y equals y,
22:37 - And then the line is going from those.
22:40 - Like that's not always
going from zero, zero,
22:42 - it's going from the previous x, y.
22:45 - So now that's right.
22:47 - The other circle also needs
22:50 - to have its
22:52 - center be at previous x, previous y.
22:55 - And there we go.
22:56 - So now I have this.
22:59 - I have this circle spinning
around this circle,
23:03 - spinning around this circle (laughs).
23:04 - There's only two circles.
23:05 - But, in theory, if I
change this to like five,
23:10 - there we go.
23:11 - Now we're gettin' somewhere.
23:13 - And actually, it would be sort of fun,
23:14 - I really think that I should think
23:15 - about how I'm drawing
this a little bit better.
23:18 - So, for example, I think
I want these circles
23:21 - to be much lighter, so let
me give them a little alpha,
23:25 - and then the points should also be,
23:28 - I think the points are
almost like less relevant.
23:31 - I almost don't want to draw these points.
23:33 - Let's just, 'cause I have the lines now,
23:36 - so let's see what happens
if I take this out.
23:38 - And I do this.
23:39 - Oops.
23:40 - But I want the line
23:43 - to be
23:45 - full brightness.
23:46 - There we go.
23:47 - So this is what I'm looking to draw.
23:49 - So there we go.
23:50 - So I now have this particular
series with every circle
23:55 - next to,
23:57 - rotating around every other circle.
24:01 - And
24:02 - I am using the values from
the particular Fourier series
24:07 - for a square wave.
24:09 - Okay (sighs).
24:10 - So now, and I feel like
this should be bigger,
24:13 - it's so small.
24:15 - Let's go back to
24:17 - having this be 100,
and let's actually not,
24:20 - let's just see how this looks.
24:21 - And let's, we can also,
24:23 - I'm being like neurotically silly about,
24:25 - let's move it over a little bit. Okay.
24:27 - Oh, I don't want it to
go off the screen though,
24:29 - so let's leave it there.
24:31 - Split the difference, 75.
24:34 - Okay.
24:35 - And then (laughs), I'm going to
have to go back a little bit.
24:37 - This is very silly, what I'm doing.
24:38 - Okay, there.
24:39 - Aah (laughs)!
24:40 - I have a problem.
24:41 - 150.
24:42 - There we go.
24:43 - Okay, so I know this
is hard for you to see.
24:45 - Let me zoom in on it,
so this is what we got.
24:46 - So now guess what?
24:48 - We're basically done, right?
24:50 - Before, I just had to put the wave back.
24:52 - Let's see what happens if
I just put that wave back.
24:53 - Like what happens?
24:59 - I put it back.
25:01 - Now what's going on?
25:02 - Like, I'm getting some crazy thing here.
25:04 - I don't even know what's going on.
25:06 - Oh, I'm pushing all the values.
25:08 - I just want to push the last value.
25:11 - Actually, this is going to be
a much easier fix, I think.
25:13 - I just want to push the last
value after the loop is over.
25:17 - And there, we can see there we go.
25:19 - But I don't know why
this isn't shifted over.
25:22 - Did I lose that somewhere?
25:25 - I need to do this.
25:26 - This I actually going to be,
oh, this was actually fine.
25:29 - And there we go (laughs).
25:30 - (bell dings)
25:31 - We are done.
25:33 - I should add one more thing to this
25:35 - because this is going
to become relevant later
25:38 - in my mind's eye of how I'm
going to do more videos on this.
25:41 - So right now I am visualizing
the resulting wave pattern.
25:45 - Also, I got to do a few more things.
25:47 - Will you please bear with me?
25:48 - You know, this video's already
about 70,000 hours long.
25:51 - But let's at least add one slider.
25:58 - I'm going to use the, and so
I'm going to have a slider
26:03 - that gives me values between one and 10.
26:06 - And I'm going to start it at one.
26:09 - And what I'm going to do is I'm
going to take a slider.value.
26:14 - So basically I'm going to
26:19 - have n control the amount of iterations
26:22 - of the Fourier series itself.
26:24 - So now you could see there's just one
26:26 - so I can use this slider
to add two, three,
26:27 - four, five, six, and this is 10.
26:29 - And I could, this is fun
26:30 - that I can actually do this in real time.
26:32 - So now you, the viewers
of this video (laughs),
26:36 - will have so many more
creative and interesting ideas
26:38 - about how to make this prettier,
26:41 - how to create more
interactivity, there're so many,
26:43 - but this is just an inkling, right?
26:45 - Every system that you build with code
26:48 - has a bunch of variables and parameters.
26:49 - There's no reason why you
couldn't make those interactive.
26:51 - You couldn't even, we could
make the number of iterations
26:56 - match to a sine wave itself,
like (mimics explosion),
26:58 - what would happen there?
26:59 - That would be crazy.
27:01 - But now you could see up to 10.
27:02 - We can see how it's converging.
27:04 - And I, you know, I don't know
how far I want to push this.
27:08 - Let's push it a little.
27:09 - Let's try.
27:11 - (drums rolling)
27:12 - Let's put it at 100.
27:15 - That's zero, all the way up to 100.
27:18 - Performance-wise, it's fine.
27:20 - It's happy to do 100.
27:22 - There we go, look at this.
27:23 - Look at that square wave!
27:24 - Oh, that is like (laughs)
27:26 - the nicest square wave I've ever seen.
27:28 - This is making me so happy.
27:29 - I cannot explain to you.
27:31 - I feel like this is a thing
that's been in my head
27:33 - for years, but I never actually
like sat down to program it.
27:36 - 'Course I am standing right
now, but close enough.
27:39 - Thank you for watching this
coding challenge visualization
27:42 - of the Fourier series
for making a square wave.
27:46 - Check this video's description for a link
27:49 - to the Coding Train web
page with this challenger
27:51 - and the code for it, and then
if you make your own variation
27:54 - of this, please share it with me.
27:55 - You could contribute it right there.
27:56 - So what are some things you might do?
27:58 - Number one is, why don't you
try doing this sawtooth wave?
28:02 - Could you take the code that
I wrote and make it do this?
28:05 - That would be a nice exercise to try.
28:07 - What other kinds of
interactivity can you add to this
28:12 - in terms of changing the colors,
28:14 - changing the different parameters,
changing the view of it?
28:16 - What happens if you do this in 3-D?
28:19 - Like, right?
28:19 - Could you have some kind
of points oscillating
28:21 - over three dimensions in a sphere,
28:23 - and then map that to something?
28:24 - That would be cool.
28:26 - So I look forward to seeing
what kind of things you create.
28:29 - Ask your questions and
all of that nonsense.
28:31 - But it's not nonsense, it is,
I mean, whatever (laughs).
28:34 - Goodbye!
28:35 - (whistle toots)
28:36 - See you next time.
28:36 - (sprightly music)

Cleaned transcript:

(whistle toots) Hello, welcome to a coding challenge, Fourier series. So what I am going to program in JavaScript using the p5.js library is exactly this. This is what's known as a Fourier series. It is a series of wave patterns that when summed up together approximate some other function (sighs). What does that even mean? So first of all, I'm going to show you some resources, the things that got me thinking about this topic and wanting to make this coding challenge. And you probably should, if you want, stop this video and go look at these other resources, and then you could come back, if you wanted, or maybe you're just off doing something else. So pretty recently, Smarter Every Day came out with a video called, What is a Fourier Series? Explained by drawing circles. This video reminded me of a amazing video that I had watched at some point in the past (laughs), I guess like almost a year ago, called, what is the Fourier Transform? A visual introduction. You probably, if you've done any coding and programming, you've probably heard these terms before, FFT, fast Fourier transform. It's usually referenced in the context of analyzing sound. And so Smarter Every Day's video was a collaboration worked with a Turkish researcher on this website here. I'm not going to attempt to pronounce it, or I will, bilimneguzellan.net. I encourage you to check out and read this whole article, but this is a visualization, again, of exactly what I want to do. A series of wave patterns visualized as a path along a circle, periodic functions summed together to approximate a square wave. And if we can make this happen in JavaScript, then there, in theory, is no reason why we couldn't then figure out how to draw any given path as a series of Fourier transforms. And there's a sort of a wellknown GIF or video of this like crazy set of circles drawing Homer Simpson. So I'm hoping to get there. But this video, I just want to, by the end of this video, have exactly this pattern in JavaScript. Okay. So I also want to reference this website, betterexplained.com, which has a nice article, An Interactive Guide To The Fourier Transform. And this, I think, is a really excellent explanation. So again (laughs), going to get started coding in a second, but you're just going to have to humor me to let me kind of talk about this a little bit more just to get my feet under me here. So the idea of a Fourier transform, so a sound wave, right? We have this idea of a sine wave. You've probably seen me draw sine waves on the board or in code in countless videos, usually drawn something like this. A sine wave has a frequency, (laughs) which is how often does it repeat. Like if this is the sort of xaxis, like this is one whole cycle, right? And I could think of that as like the time it takes for this dot to go all the way around the circle. So frequency is like how many cycles of the wave per unit of time, like per second or per frame. There's also amplitude. Amplitude is the height (laughs) of the sine wave, how much distance between the very top and the very bottom. And so a sound can be represented as a sine wave. So but you probably have seen like, oh, I've got this recording device soundy thingy and what it's doing is it's like (vocalizing), this is like the sound. This is the wave, this is the representation of the sound that I'm listening to right now. Well, you can create, this kind of wave pattern is typically actually the sum of multiple wave patterns. So in other words, if this is like the musical note a, and then this is like the musical note something else, and we're to add these two waves together, can you still see what I'm drawing? You know, I might get something that looks like this, right? And I've done this, I think I had like an additive wave video in the Nature of Code series about this kind of idea. The idea of the Fourier transform is can we go, right, I could have these two waves. I could add them together and get this pattern. Could I go in reverse? If I'm listening to a sound like this, could I pull out all of the waves, the sounds, the frequencies, that make up that? That's like pitch detection. Or if I wanted to then filter out a very highpitched sound, if I could take the sound, break it apart, take away one of the highpitched sound, add it back together, I would get this. So this is akin to, I love this metaphor here in the Better Explained, of unsmoothieing a smoothie. So I'm (laughs), I like to make smoothies, actually. Littleknown fact. I always like, anyway, so but could you like, right? Let's say I take some mango, and some kale, and some blueberries, and some like almond milk, and I mix them all together, and I give it to my children, and I say, I made you this beautiful smoothie. Can you guess what's inside of it? This is actually a game we actually play at home, I've just realized, like, ooh, this is perfect. Well, if I could do a Fourier transform, I could take the mixed smoothie and filter out, go in reverse, and find out all the ingredients. That's the idea. So that's the idea of the Fourier transform. That's conceptually what it is. Now what I want to do in this video is I'm not going to worry about figuring any of this out (laughs). I'm just, now I understand what it is, what it can be used for. I have this goal eventually of having it, of using a Fourier series to draw any arbitrary path. But one way to get started with that is exactly what's demonstrated here on this website, which is, what waves do you need to add up together to end up with a square wave? And you can see here, this is actually a really nice visualization, is as you have more and more iterations of the Fourier series, how it converges even closer and closer to the square wave. I could also just go here to Wikipedia and find this again. So this is the clue. So there's this idea in a Fourier series of Fourier coefficients, and some kind of like iterative thing, of like n, and n plus one, and n plus two. And we can actually see a nice clue to that in here. This is actually a very, this is one of the simplest Fourier series. What is the series? One, three, five, seven. Can you guess the next number? (bell dings) Nine, right? And what's after that? 11. So if I can just implement this, each one of these circles and have them rotate around like this at that period or frequency, with that amplitude, we're going to get somewhere. So let's (laughs), I've talked about this for way too long. Let's try to actually code this now. So the first thing that I want to do, I'm just going to start, I'm going to start like kind of even not thinking about the Fourier series. And I'm just going to make up a variable called angle. You could really think of that as time. It might be more appropriate for me to call this time, 'cause time is moving forward, that's a sort of crucial idea. And I'm just going to say, time equals, every time through draw, if you haven't worked with p5 before, draw is a function that loops over and over again, over and over again. So time is moving forward. Then what I want to also do is I just want to like draw a circle somewhere (laughs). So I'm going to translate to like 200 pixels over and 200 pixels down. I'm going to have this idea of a radius, like the radius of a circle that I want to draw is maybe going to be 50 pixels. And then I'm going to say ellipse at zero zero, with that radius times two, because the ellipse function expects a diameter, radius is half that. I'm going to make this white, so I'm going to say a stroke 250, oops (laughs), stroke 255. Somebody told me how to get rid off that autocomplete, and I still haven't done it, and a noFill. So when I go back the to browser and refresh it, I've got a nice circle there. Eh, let's make it a little bigger. All right. So now what I want to do is, how can I have that dot traveling around the circle? Let me have the dot traveling around the circle. So the way that I would do that is I would use a polar to Cartesian coordinate transformation. And I'll certainly have a video that talks about how to do that. But what I'm talking about here is if this is the radius, and this is the angle, which is really in my program the time, how far over in x, and how far over in y, how far up in y, can be calculated based on trigonometry? So the radius times cosine of the angle, or angle is the x value, the radius times the sine of the angle is the y value. So I'm going to do that here (laughs). I'm going to say, let x equal radius times cosine (snorts), cosine of time. And let y equal radius times sine of (laughs), sine of time, I should probably pause and turn that off. And then, but let me get through this first, point x (laughs), I'm definitely going to pause and turn this off, point x, y, I'm going to say stroke 255, stroke, actually, let's make this a circle also. So we're going to say like ellipse x, y, we're just going to make it smaller, like eight pixels. And let's also say fill 2225. My god, this is making me crazy. And here we go. Look at that. There's that circle moving, right? That circle is moving, and maybe it makes sense to also draw a line (laughs) from zero, zero to x, y. And now I've got this, and I want it to move a little bit faster, and honestly I'd like it to go the other direction (laughs). I'm not sure, I should actually check. What is it doing, if I want to like recreate exactly what's here, yeah, yeah, it's moving the other direction. So I've got the beginnings of this. Now I haven't worried about the number four here and the fact that I've got the angle divided by pi, but we'll get there. (bell dings) I'm back, I fixed this autocomplete thing that was bothering me in Visual Studio Code. I'll put something in the description about how I did that (laughs). But I also wanted to mention, in the chat, thank you to Amar who mentioned, who wrote, you are using Fourier series and Fourier transform interchangeably, but they are not the same thing. So thank you so much for that comment. I will post some links, also, in the video's description for more reading about this. But in short, the Fourier series is for periodic signals, which is what I'm doing exactly right now to create this square wave, which is periodic, versus the Fourier transform which is for aperiodic signals. Another way of thinking about that is to represent any general nonperiodic function. So hopefully as I get further down this road I will come back to this. And also in the chat, Smarter Every Day writes, Fourier transform is for swapping between frequency domain and time domain, which is an also really nice way of putting it. Okay. But what I am doing in this video is implementing the Fourier series, the periodic series that add up together to the square wave pattern, okay. So here we go. So I have success step one. I have my circle passing around. And you know what, I think that I probably should not put this, I'm going to have this not go the correct direction (laughs). I'm going to have it go, 'cause I don't know if the negative number's going to mess things up there. Okay. All right, next step. Next thing that I need to do, and if we go back to this particular video is, how can I take this circle that's moving around and then draw the resulting wave pattern? And this is actually kind of a much simpler problem than you might think, because basically what I want to do, this is moving in two dimensions. X is oscillating back and forth, y is oscillating back and forth, and both those oscillating at the same frequency, with the same amplitude, in the same phase, the starting together, is moving along the path of the circle. So I just need to take the y value and sort of graph that along the xaxis. So the way that I'm going to do that is I'm going to add an array to my code. I'll call it wave. And it's going to be an empty array. It has nothing in it. And what I'm going to do here is every time I calculate a new y value, I'm going to say wave push y. So I'm just going to save that particular y value. So now all I need to do is say, oh, you know, for let x, you know, I'm not going to use x, i equals zero, you know, i is less than wave.length, i++. Let's draw a point at i,wave index i, right? So all I'm doing here is saying, let's just draw all of those height values, those y values, from kind of x equals zero to as many as them as I get. So if I do this, you're going to see, look at that. There's that wave pattern going. All of those points are moving up and down, and you could see how the height of that wave is the same as the thing passing around. Okay. But this doesn't look so great, so what I want to do is, I want to instead use beginShape and endShape, this will, and then say vertex. So this will actually like tie it all together. And I think if I say, no, it's actually, I'm going to leave the fill in there for a second, 'cause it's kind of cool. So that's actually like trying to fill in the shape, which is sort of a nice pattern. But I'm going to just say noFill. I'm going to do this, refresh the page, and then also, you know, why not translate, just to translate this a little bit over, like 200 pixels. And we can see this. And then I guess I could also draw, sorry, I want to draw a line. Yes, I want to draw, sorry, I got confused what I was doing. I want the end of the line to connect to where that is. Oh, of course. Okay. So what I want to do is draw a line, so I need that first, I need this first value. So I have x minus 200,y to i,wave index zero. And actually it's not i, it's zero. So this is just, this I know is the very first point in this loop, and since I translated it over, I've got to like back up with my x value. This is very awkward. ♪ I will refactor this later, you know ♪ ♪ I will refactor this later ♪ Oh, no, no, no. I don't want it to connect to here. ♪ You know I will ♪ What am I doing wrong? ♪ This later ♪ Why is what I'm doing different? Oh, this is, oh, I'm doing it backwards. Ah, I know what I'm doing. Ah, I'm doing it backwards. I actually don't want to, I'm appending to the end of the array, so every new value I'm appending to the end, I want to add it to the beginning, so instead of using push, there we go. Instead of using push, I want to use unshift. So unshift is a JavaScript function, it's a weird name for it, but push just adds this thing to the end of the array, and I want to add it to the beginning. Well that was a mistake (laughs). There we go. This is what I'm looking for. There we go, okay. (bell dings) So now I have the line (laughs) connected there. Now the one thing that's a little bit of an issue here is that I'm just like adding points, and adding points, and adding points, and adding points, and never getting rid of any points. So I also should probably, at some point I should say something like, if wave.length is greater than like, I'm just going to make up some number right now. I could do a calculation of how many points I need 'til the end of the canvas, but just to move more quickly here I'm going to say wave.pop. So that would just like, if its getting more than 500 it's going to like delete the last one off the end. And now we should be able to say like, should be able to look at wave.length. It's 152. So clearly I only need like, I don't need more than 250 (laughs). All right, we are at this spot. Now comes the exciting part. I mean this was hopefully all somewhat exciting, but to me, how do I suddenly go from, I have one circle with a point around it, to another circle that's kind of like there with another point around it, to another circle that's like there, with another point around it? How am I going to add up these circles and continue this path of x y along them with all of these points rotating and spinning? And guess what? I've actually done this before. I'm just remembering now. I have a video on the fractal spirograph. Let's see if this comes up. Yeah, the fractal spirograph. I actually did this already in the fractal spirograph which was this way of doing exactly this to create a fractal pattern. I should go back and revisit this. But so we'll see how this compares to that. So let me go back to the code here. And so what I want to do, so first of all, before I do this, I think I need to think a bit more formally about these functions. So before, I was just saying radius, cosine of time. Radius, sine of time. But these functions actually map to these values on Wikipedia here. So if theta is my time, basically, what I'm saying is that I want to, and the value multiplied by that is four divided by, sorry (laughs), theta is my time, and four divided by pi is basically my radius, in a way here. Hmm, kind of conflating some things, but I can start to use this particular series to understand the ratio of the radii and the frequencies between these different oscillating circles. Okay. So let's say, what if I, what I do is I say, four divided by pi, times cosine of, what was it again, one times time. So I'm going to do this. I'm going to just change the y here. And then what I'm going to do is I'm also then going to say, radius times that. And also I missed something. Four divided by what? One times, this is confusing, 'cause there's a one here. One times angle, one times pi. So I'm going to say, that's one times time, one times time, and this is one times pi, and this is one times pi. So the number that I need to change for each circle is that one. So let's just see what this actually yields. And I'm going to go back to here. t's sort of, it's the same thing, but now the fact that that radius is 100, it's like everything is way too big. This is going to get calculated here. ♪ I will refactor this later ♪ Let's put this in here. And then let's make this back, just 'cause I don't really need, let's make this back to here. Okay. And four time, divide, oh, oh, this should be one times pi. Aah, why is it doing that to me? I don't want that, I want these divided by each other. Visual Studio Code is too smart for my own good. There we go. There we go. That's what I wanted. That's why it was giving me something crazy. Anyway, okay. Radius is not defined. Now I need to draw the circle next. This is when things are going awry. And let me put this here. There we go. And now there we go (laughs). Of course now it's the, of course, I had the division in the wrong place. I have this tiny little wave (laughs). So let's go back and make that about 25, which I think would be now basically, oh, it's divided by pi, aah! This is going remarkably well (laughs). Here we go, okay. I'm happy with where I am now (sighs). Okay, so now I have that first circle. The reason why I am doing this, the reason why I'm putting this, making all this work, 'cause I want this to be n. I actually want this to be a number that changes, right? First, first it's one. Then it's three, then it's five, then it's seven. That's not too hard to figure out, right? And what I want is to start x with, and y, both at zero, and just add this stuff together. So x+=, y plus equal. So I want you, and then what I want to do is I want to loop n. So n is going to go from one, I'm going to say zero, actually, n, 'cause I'm, you got to count starting with zero, n is less than two, n++. And then, and this really by the way, I should call this i, because what I'm really saying is, what n is. How do I do one, three? And this is pretty easy. I multiply it by two and add one. N equals i times two, plus one, right? When i is zero, I get one. When i is one, I get three. When i is two, I get five. So now if we add these together, and I'm just doing two right now. And speaking of which, I should move this all the way down to here. And I'm going to take this out for a second. And then I've got to go back here, and there we go. Okay, so something is wrong. I kind of got things close. Like look at this interesting, weird, crazy pattern that I've got. Okay, so the line should not be going from, so I should be actually keeping track of previous x is x, and previous y is y. So I don't, I'm going to like take out the wave for a second, 'cause I'm going to have to change what I'm doing here. And then I'm going to just say, previous x equals x. Oh, no. And then previous x equals x, previous y equals y, And then the line is going from those. Like that's not always going from zero, zero, it's going from the previous x, y. So now that's right. The other circle also needs to have its center be at previous x, previous y. And there we go. So now I have this. I have this circle spinning around this circle, spinning around this circle (laughs). There's only two circles. But, in theory, if I change this to like five, there we go. Now we're gettin' somewhere. And actually, it would be sort of fun, I really think that I should think about how I'm drawing this a little bit better. So, for example, I think I want these circles to be much lighter, so let me give them a little alpha, and then the points should also be, I think the points are almost like less relevant. I almost don't want to draw these points. Let's just, 'cause I have the lines now, so let's see what happens if I take this out. And I do this. Oops. But I want the line to be full brightness. There we go. So this is what I'm looking to draw. So there we go. So I now have this particular series with every circle next to, rotating around every other circle. And I am using the values from the particular Fourier series for a square wave. Okay (sighs). So now, and I feel like this should be bigger, it's so small. Let's go back to having this be 100, and let's actually not, let's just see how this looks. And let's, we can also, I'm being like neurotically silly about, let's move it over a little bit. Okay. Oh, I don't want it to go off the screen though, so let's leave it there. Split the difference, 75. Okay. And then (laughs), I'm going to have to go back a little bit. This is very silly, what I'm doing. Okay, there. Aah (laughs)! I have a problem. 150. There we go. Okay, so I know this is hard for you to see. Let me zoom in on it, so this is what we got. So now guess what? We're basically done, right? Before, I just had to put the wave back. Let's see what happens if I just put that wave back. Like what happens? I put it back. Now what's going on? Like, I'm getting some crazy thing here. I don't even know what's going on. Oh, I'm pushing all the values. I just want to push the last value. Actually, this is going to be a much easier fix, I think. I just want to push the last value after the loop is over. And there, we can see there we go. But I don't know why this isn't shifted over. Did I lose that somewhere? I need to do this. This I actually going to be, oh, this was actually fine. And there we go (laughs). (bell dings) We are done. I should add one more thing to this because this is going to become relevant later in my mind's eye of how I'm going to do more videos on this. So right now I am visualizing the resulting wave pattern. Also, I got to do a few more things. Will you please bear with me? You know, this video's already about 70,000 hours long. But let's at least add one slider. I'm going to use the, and so I'm going to have a slider that gives me values between one and 10. And I'm going to start it at one. And what I'm going to do is I'm going to take a slider.value. So basically I'm going to have n control the amount of iterations of the Fourier series itself. So now you could see there's just one so I can use this slider to add two, three, four, five, six, and this is 10. And I could, this is fun that I can actually do this in real time. So now you, the viewers of this video (laughs), will have so many more creative and interesting ideas about how to make this prettier, how to create more interactivity, there're so many, but this is just an inkling, right? Every system that you build with code has a bunch of variables and parameters. There's no reason why you couldn't make those interactive. You couldn't even, we could make the number of iterations match to a sine wave itself, like (mimics explosion), what would happen there? That would be crazy. But now you could see up to 10. We can see how it's converging. And I, you know, I don't know how far I want to push this. Let's push it a little. Let's try. (drums rolling) Let's put it at 100. That's zero, all the way up to 100. Performancewise, it's fine. It's happy to do 100. There we go, look at this. Look at that square wave! Oh, that is like (laughs) the nicest square wave I've ever seen. This is making me so happy. I cannot explain to you. I feel like this is a thing that's been in my head for years, but I never actually like sat down to program it. 'Course I am standing right now, but close enough. Thank you for watching this coding challenge visualization of the Fourier series for making a square wave. Check this video's description for a link to the Coding Train web page with this challenger and the code for it, and then if you make your own variation of this, please share it with me. You could contribute it right there. So what are some things you might do? Number one is, why don't you try doing this sawtooth wave? Could you take the code that I wrote and make it do this? That would be a nice exercise to try. What other kinds of interactivity can you add to this in terms of changing the colors, changing the different parameters, changing the view of it? What happens if you do this in 3D? Like, right? Could you have some kind of points oscillating over three dimensions in a sphere, and then map that to something? That would be cool. So I look forward to seeing what kind of things you create. Ask your questions and all of that nonsense. But it's not nonsense, it is, I mean, whatever (laughs). Goodbye! (whistle toots) See you next time. (sprightly music)
