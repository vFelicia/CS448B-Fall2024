With timestamps:

00:00 - hello welcome to a coding challenge boy
00:02 - this one is a doozy it is five parts
00:05 - long until I know four parts long but
00:07 - there's like a little fifth part bonus
00:09 - and what it is it is an evolutionary
00:11 - system where I evolved steering agents
00:15 - to effectively eat food and avoid poison
00:19 - and the poison here is a Indic is
00:23 - signified by the red dots the food is
00:25 - the green nuts this system has been
00:27 - running for a little while you can see
00:29 - some of them are maybe better than
00:30 - others and avoiding the food at finding
00:33 - the food and so this is what I'm doing
00:36 - it is part of my series on genetic
00:39 - algorithms there's a lot of videos that
00:41 - precede this one if you want to go and
00:43 - watch those this is also part of Session
00:46 - two of a course called intelligence and
00:48 - learning so it's part of that which is
00:49 - basically the same playlist and I hope
00:52 - that when you get to the end of this you
00:53 - will make something creative from it and
00:56 - share that with me so that this coding
00:59 - challenge is about to start it's in four
01:01 - or five parts a little secret if all our
01:04 - parts aren't published check the
01:05 - description you might be able to find
01:07 - the next one
01:07 - this won't be relevant to most of you
01:09 - because most of you will be watching
01:10 - this in the future when they'll all be
01:11 - published okay goodbye I mean that
01:14 - goodbye I'm going to be right back if
01:15 - from the past in the future to you
01:16 - goodbye not goodbye okay here we are I
01:20 - am going to first before I begin coding
01:22 - kind of map out the ecosystem the
01:25 - scenario the architecture all the pieces
01:27 - of this puzzle that I'm going to slowly
01:29 - build over time to create this coding
01:31 - challenge so there is going to be a
01:33 - world that world is a two-dimensional
01:37 - canvas in that world there will be dots
01:43 - that represent food maybe I'll make
01:47 - those dots green and there will also be
01:50 - dots that represents poison plot poison
01:57 - right cool boy and those will be red
02:02 - okay so this is going to be the world
02:04 - then in the world there will be agents
02:08 - you would call them particles or boys or
02:11 - vehicles
02:12 - whatever you know ants creatures what
02:15 - everyone call them your thing I'm going
02:17 - to call them vehicles because these are
02:18 - built on top of my examples that build
02:20 - on top of Craig Reynolds examples that
02:23 - build on top of this book called
02:24 - vehicles long story and by britain berg
02:30 - italian neuroscientist Frankenberg okay
02:32 - um so these vehicles the idea is that
02:36 - they need to they're going to move
02:39 - throughout this space in order to
02:41 - survive they need to eat food they don't
02:45 - eat food slowly over time they're
02:47 - helpful to window so I need I'm going to
02:50 - have a vehicle object the vehicle object
02:53 - is going to have a little physics engine
02:55 - built into itself so it needs its
02:58 - position it needs its velocity it needs
03:01 - acceleration but it's also going to need
03:04 - a property called health and that
03:06 - property is going to slowly go down over
03:08 - time now if it should happen to eat the
03:11 - green dot its health will go up if it
03:14 - should happen to eat the red dot its
03:16 - help will go down and what I want to do
03:18 - is I want to use an evolutionary
03:20 - strategy so I'm going to release a lot
03:22 - of these and all of them are going to
03:25 - have different properties that control
03:29 - how they move around through the space
03:30 - and those properties
03:34 - I want to evolve those properties over
03:39 - time so that I eventually have an
03:41 - optimal strategy for gathering and
03:44 - feeding all the green food the quickest
03:47 - and avoiding all of the red food now
03:50 - this might remind you of some
03:52 - demonstrations that you might have seen
03:53 - using a neural network based learning
03:56 - system and there is a technique I mean
04:00 - this is this technique is not exclusive
04:01 - to neural network based systems but
04:03 - called reinforcement learning and
04:06 - reinforcement learning is like hey why
04:08 - don't you you know vehicle move around
04:11 - the space and if you eat some food I'm
04:12 - going to give you a reward if you eat
04:14 - some poison I'm going to give you the
04:17 - opposite of reward a consequence and
04:21 - eventually over time you'll learn to do
04:23 - the stuff that were you to food to that
04:25 - that's an interesting topic
04:26 - boy am I excited to at some point in the
04:28 - future maybe you're in the future and it
04:30 - already exists come back and do a
04:32 - follow-up video about that particular
04:36 - topic but this is not what I'm going to
04:38 - look at today I'm going to use a
04:39 - different approach and evolutionary
04:40 - approach and if you don't know what
04:42 - genetic algorithms are I might encourage
04:44 - you to go back and watch a bunch of
04:46 - videos where I introduced the concept so
04:48 - I'm going to use this idea of a genetic
04:49 - algorithm to release a whole bunch of
04:52 - these into the world see how they
04:54 - perform and allow them to the ones that
04:56 - do well to reproduce and live longer and
04:59 - hopefully over time we're going to see
05:00 - agents that evolved to being very good
05:02 - at eating multitude and voids in poison
05:03 - okay so that I think makes sense now
05:05 - what else do I need to cover here in
05:07 - terms of what we're designing ah so I'm
05:10 - going to need an array to keep track of
05:12 - all the food locations an array to keep
05:14 - track of all the poison locations and
05:15 - I'm going to need an array to keep track
05:18 - of all of the vehicle objects and then
05:19 - there's one other important piece here I
05:22 - mean there's more but one more thing
05:24 - that happens described here on the
05:26 - whiteboard
05:26 - I need a function to determine something
05:32 - called steering so this is where I would
05:36 - say to you that if you haven't
05:38 - encountered steering behaviors and the
05:40 - work of Craig Reynolds before I would
05:43 - reference you to a link in this video's
05:45 - description of some of my videos where I
05:47 - go through via this topic in more detail
05:50 - in particular an algorithm called seek
05:52 - so I'm going to describe to to you
05:54 - briefly here but the idea is that if I'm
05:57 - a vehicle and I'm moving in a particular
05:59 - direction and what I'm desire to do is
06:03 - seek a particular target what I was a
06:10 - technique the steering technique that
06:12 - I'm going to use a pioneered by Craig
06:15 - Reynolds involves creating something
06:19 - called a desired velocity so if all my
06:24 - dreams were to ever come true I would
06:27 - simply be moving at maximum speed in
06:29 - this direction but I happen to be moving
06:32 - at this speed in this direction which is
06:35 - wrong so very wrong so what I need is
06:37 - some sore
06:38 - error and the error being with steering
06:41 - force that's going to push me back in
06:43 - that and from velocity in the direction
06:45 - design the reason why I got to looking
06:47 - at neural networks and learning based
06:49 - systems so much this is very very
06:50 - similar to looking at the output of a
06:52 - machine learning system and it's error
06:54 - the error here being the difference
06:56 - between the guests what my current
06:58 - velocity is and like desired output my
07:02 - desired velocity so the steering force
07:04 - is defined as the desired velocity minus
07:08 - the current velocity and if I apply this
07:11 - force to this particular vehicle it will
07:15 - turn and start to see over time
07:16 - alternatives or to seek the target now
07:17 - why is this interesting
07:19 - so in the one hand we I could just say
07:21 - right here right now I know exactly what
07:25 - these vehicles should do they should
07:27 - seek all the green stuff and they should
07:30 - repel avoid all of the red stuff so
07:34 - their desired velocity for green should
07:37 - point in the direction of the target and
07:38 - their desired velocity for red stuff
07:40 - should point away from the target so
07:41 - this is obvious and in some sense what
07:44 - I'm doing here is I want to reproduce
07:46 - the revolutionary system and obvious
07:48 - result why is that interesting I don't
07:51 - know how these kids to try but my hope
07:54 - is that if you can watch me do this as a
07:57 - code you could probably come up with a
07:59 - much more creative scenario where there
08:01 - are a lot of different factors at play
08:03 - maybe there are predators maybe there's
08:05 - some type of system where they have to
08:08 - collaborate and be next to each other to
08:09 - do something so I'll try to come back
08:11 - and offer you some suggestions towards
08:12 - the end but I'm going to troduce try to
08:14 - reproduce I'm going to allow these
08:17 - vehicles to make arbitrary random
08:19 - choices as to how they should interact
08:21 - with green and red and over time see if
08:24 - I can evolve them towards them being
08:26 - attracted to green and repelled from red
08:29 - that's the overall explanation and back
08:34 - over here with my computer
08:36 - oh hi computer nice to be here with you
08:38 - so I got to talk to me is it some day
08:41 - maybe you will that you are also just
08:42 - this string
08:43 - I say that okay here we go Tonetta edit
08:49 - that out or don't edit oh it's in there
08:51 - it's in there okay I'm here with my
08:53 - computer and I'm gonna start writing
08:55 - some code now here's the thing I usually
08:57 - start these coding challenges from
08:58 - scratch but to move this one along and
09:00 - since I've done this in other coding
09:02 - challenges and videos before I'm going
09:04 - to start with a base example that
09:06 - implements that steering behavior just
09:09 - having one single vehicle seeking a
09:11 - particular target so if you like to
09:14 - watch these videos and follow along
09:16 - coding along then what I would do is
09:18 - first there's a link in this video's
09:23 - description to the code where it is
09:26 - right now so you can go and grab pause
09:28 - grab that code and then come back but
09:30 - I'll talk you through what some of the
09:32 - pieces are in the code and then I also
09:33 - have a video where I cover steering
09:35 - behaviors and how this code works
09:36 - completely separately but um so I'll
09:39 - link to all that if you want to go back
09:40 - and watch that stuff before you continue
09:42 - with me right now here in this video
09:44 - okay now I am a conductor conducting
09:47 - nothing would be nice if you I just did
09:49 - that music just started I would know and
09:51 - make me so happy this doesn't all this
09:52 - stuff doesn't me be open but it's open
09:53 - okay so what's going on in this
09:57 - particular example so this example comes
09:59 - from the nature of code book there is a
10:01 - vehicle object the vehicle has all three
10:04 - of those properties I talked about
10:06 - before it has an acceleration has
10:08 - velocity has a position this dot R is
10:11 - its size property and has a maximum
10:13 - speed and maximum force which control
10:15 - its ability to seek a particular target
10:17 - it has a standard physics algorithm that
10:20 - I cover into my other videos where the
10:22 - position the velocity alters the
10:24 - position the acceleration alters the
10:25 - velocity and then the key thing here is
10:28 - this seek algorithm so this is key to us
10:31 - in how we're going to build this coding
10:33 - challenge so this is where Craig
10:35 - Reynolds steering's force is calculated
10:38 - the desired velocity is that is the
10:41 - target location - my position the target
10:47 - location - my position
10:49 - that's the desired velocity with its
10:51 - magnitude set to be maximum speed you
10:53 - know I'm
10:54 - to make knowledge of how p5 dot vector
10:57 - works and how vectors work so that's
10:59 - also something that you might want to
11:00 - look at some other videos about it
11:02 - that's new to you and then that force is
11:07 - that's the steering force that force is
11:09 - limited to some maximum strength and
11:11 - then applied to the object into its
11:14 - acceleration so that's all of this is
11:15 - and we can see here in the main program
11:18 - that I create a target which is I could
11:22 - call this target really instead of Mouse
11:23 - that's wherever the mouse is and then I
11:26 - draw something whoops I draw something
11:30 - at that target and then I say hey
11:32 - vehicle seek that target and that's the
11:37 - result that we have here so what do I
11:40 - want to do now what I want to do right
11:42 - now is the whole thing I can do
11:45 - everything but I got to start somewhere
11:46 - so I think what would probably be most
11:48 - useful it's for me to try something
11:50 - where I simply add the food the food
11:56 - elements into the window and then I have
11:58 - this particular vehicle just seek the
12:00 - food so let's do that so what I'm going
12:03 - to do is I'm going to create a variable
12:06 - called food and it's going to be an
12:07 - array and I'm going to say for VAR I
12:11 - equals 0
12:12 - I'm just going to say let's add 10
12:14 - pieces of food a food push create vector
12:19 - now where so I'm going to use a vector 4
12:23 - to store an XY coordinate for each piece
12:25 - of food now we're sure that food B
12:28 - there's lots of ways I could approach
12:30 - this how about I pick a random X and how
12:34 - about I pick random Y yeah you might be
12:38 - able to do something interesting where
12:39 - you like seed the food locations based
12:41 - on a pattern you know that what was that
12:44 - Plus on distribution thing that I did or
12:47 - maybe you like pick all the bright spots
12:49 - of an image and you see all the food is
12:51 - like a person space but anyway I'm just
12:53 - going to pick some random locations and
12:56 - then what I'm going to do is right here
12:59 - in my name program I'm going to iterate
13:03 - through all of the food and I'm going to
13:07 - say
13:09 - I draw a little ellipse where the food
13:13 - is so at each food elements X&Y and I
13:18 - said the food should be green so I'm
13:21 - going to say fill with a green color
13:24 - and then I'm gonna I don't know it's a
13:26 - no stroke I make it up stuff just making
13:28 - it up as I go here we go so look there's
13:30 - all the food that's good step one done
13:32 - now here's the big on itchy nose today
13:35 - YouTube comments are going to talk about
13:37 - it okay
13:40 - so it's still seeking this like silly
13:43 - target thing so where is it so I got I
13:46 - got to do something about that so so
13:49 - what do I want to do here what I would
13:51 - like to do is figure out a way for this
13:54 - vehicle to individual seek a piece of
13:58 - food eat it and move on so what I want
14:01 - to do is instead of a seek target I'm
14:03 - going to pass in this entire array okay
14:07 - so if I'm passing food into the seek
14:09 - function and I'm actually what I'm going
14:11 - to do is I'm going to you know what I'm
14:13 - going to do I'm going to make a separate
14:14 - function I'm going to call it vehicle
14:16 - eat food because I have an idea of how I
14:20 - still want to use that seek function
14:22 - with one target in the same way I have
14:23 - before so what I'm going to do is I'm
14:26 - going to write a new function I'm going
14:28 - to call it this eat equals function and
14:32 - I'm going to give it some I'm just going
14:36 - to give it the argument is some list
14:37 - some list of things that's supposed to
14:39 - eat and what I want to do right now is I
14:41 - want it to find whatever piece of food
14:43 - it happens to be closest to I think this
14:45 - will work for us so I need to have a
14:48 - record a record distance what's the one
14:51 - that it's currently close to so at the
14:52 - beginning the record would be infinity
14:55 - you can actually just write infinity in
14:57 - JavaScript and it's like infinity so now
14:59 - what I need to do is I need to go
15:01 - through every element in that list and I
15:05 - need to look at the location and
15:11 - actually I don't need a separate
15:13 - variable what I want is the distance the
15:15 - distance between this objects position
15:21 - and the food position sorry that this is
15:25 - a long line of code but you can see here
15:28 - I'm looking for the distance between
15:30 - this I'm a vehicle my positions X Y and
15:34 - that particular piece of foods X Y and
15:36 - if if that distance is less than the
15:39 - record then guess what we beat the world
15:42 - record now the world record is that
15:44 - distance and I want to have a variable
15:47 - called closed fist and I'm just going to
15:50 - set it equal to no right now and then
15:53 - the closest is that piece of food okay
16:01 - so the closest is that piece of food
16:04 - there might be some issues you know I'm
16:06 - going to do closest index I'm going to
16:09 - keep the index because I might need the
16:13 - index later if it eats that if it
16:15 - happens to actually eat that piece of
16:17 - food I want to maybe remove it so anyway
16:20 - I'm thinking about this so I want to
16:21 - know what's the closest one so now I've
16:22 - done this loop to say what's the closest
16:24 - one and then I'm just going to say this
16:28 - dot seek but the element in that array
16:34 - that is the closest and I call this
16:37 - closest index I'm just going to call it
16:38 - closest okay so look at this this is a
16:41 - function now and this is why I wanted to
16:43 - keep that seek function because what I
16:44 - want to do is just look for there's a
16:45 - lot of things I could be seeking and I
16:47 - could do some kind of weighted thing
16:49 - where I seek a whole bunch at the same
16:50 - time but I just want to find what's the
16:52 - closest one and I want to seek it so now
16:55 - if I run this I've got an error cannot
17:00 - read property X of undefined vehicle dot
17:03 - look slowly deployed line twenty nine
17:07 - food index o food list it's interesting
17:12 - it kind of sure to work by accident
17:14 - because food was a global variable but
17:16 - let's try that list on lengths I
17:22 - I need list ed food this position
17:25 - distance list would be easier oh that's
17:27 - a good thank you Alka for that I'm going
17:30 - to do that but first I have to fix oh
17:32 - it's not pause its position
17:35 - the name of the variable is position
17:38 - position position and I suppose Alki and
17:43 - the chat is pointing out that if I say
17:45 - var D equals this position dot distance
17:49 - food index I it's going to be a nice
17:51 - sure there's a distance function in the
17:53 - P vector class P vector so I should say
17:56 - class because I'm here in JavaScript
17:57 - land but on in the P vaccuum the p5
18:00 - that's your object that gives me the
18:02 - distance between this vector and this
18:04 - vector ok let's try this again so we can
18:07 - see it's just seeking write on boy let
18:10 - me get rid of this apologies let me get
18:12 - rid of this unnecessary mouse target now
18:15 - which is just distracting so we can see
18:18 - a limit only refresh because that was a
18:20 - little weird
18:21 - it picked oh look at that it's seeking
18:23 - whatever it happens to be closest to
18:25 - which right now is this one it's going
18:26 - back and forth so what I the next thing
18:29 - I want to do again I'm engineering the
18:31 - correct answer and then I'm going to try
18:33 - to go back and evolve the correct answer
18:35 - so to speak you'll see you'll see I got
18:37 - an idea in my head it's going to work
18:38 - I hope ok so what I want to do is I want
18:43 - it to eat that piece and move on and
18:46 - find the next closest one so the next
18:49 - thing I should do is actually where
18:52 - where am i in the vehicle is I want to
18:55 - say hey interesting what's that record
18:58 - distance actually less than I don't like
19:01 - 5 pixels I'm going to pick that
19:03 - arbitrarily but then I'm going to try to
19:04 - do something a bit more thoughtful in a
19:06 - second if it was then what should I do
19:09 - I should actually just get rid of that
19:11 - piece of food I ate that piece of food
19:13 - so I could say food dot splice I comma 1
19:20 - so what is that doing splice is a
19:23 - function that removes a knot I sorry no
19:27 - I hear closest splice is a function that
19:31 - removes an element from the array and I
19:33 - want to I want to remove that one that
19:36 - it was closest to if it the close if it
19:37 - was actually within a certain distance
19:38 - like it got close enough to eat it so if
19:40 - it licks it I want to remove it and so
19:43 - that's the one I want to splice what's
19:44 - this
19:45 - one-four that's how many elements I want
19:47 - to take out of the array so for some
19:49 - reason not in this scenario I wanted to
19:50 - remove that element and the one after it
19:52 - that I would put it to there so let's
19:54 - see how this goes come back find another
20:00 - one there we go oh come back find
20:03 - another one so now you can see it's kind
20:05 - of eating them one at a time now I'm
20:08 - going to just for the sake of argument
20:10 - lower the maximum speed increase the
20:13 - maximum force just to make it a little
20:15 - bit better so now we can see look at it
20:18 - so this is just a nice little simulation
20:19 - of it doing exactly what we want it to
20:21 - do wonderful well and then there's none
20:24 - left so I got a that's the thing we're
20:26 - going to have to deal with but I'll
20:27 - worry about that later
20:28 - so I'm almost ready for part two this is
20:31 - kind of like my part one there's going
20:32 - to be a multi-part series you're just
20:34 - watching let's add the poison real quick
20:36 - just to see how that works because it's
20:39 - going to we're going to we're going to
20:41 - get some weird behavior that I'm going
20:43 - to need to deal with so let's add the
20:46 - poison let's do exactly the same thing
20:50 - with except instead of food let's add a
20:55 - whole bunch elements to poison at a
20:57 - random then let's draw and again there
21:03 - could be a more elegant way of you know
21:05 - encapsulating this so I'm not
21:06 - duplicating all this code but let's draw
21:08 - all the poison let's draw the poison as
21:11 - a red color those of you who are
21:13 - designers will make something much more
21:15 - beautiful so let's just first see that I
21:16 - see that okay so now we've got we've got
21:20 - the red is there but it's and it's just
21:22 - eating the green because it's not
21:23 - seeking the red so now let's also say
21:26 - vehicle eat poison okay let's see what
21:33 - happens here
21:34 - Oh what happened okay I know the problem
21:40 - is this is an issue like I'm music
21:43 - losing global but point I reason why I
21:45 - put that argument there and don't want
21:47 - to use food here is I want a general
21:48 - function that can receive any array and
21:51 - kind of apply the same behavior to it so
21:54 - what I want to do is not I can't use
21:56 - food here it's
21:57 - specific I want this function to be
21:59 - useful for the food and the poison so I
22:02 - should just use list there so let me now
22:04 - refresh and I got another error I save
22:07 - everything okay we run this again now
22:11 - what's going on this is what I expected
22:13 - to happen it's kind of stuck the reason
22:16 - why it's stuck
22:17 - is it's attracted to both a piece of
22:20 - food and a piece of poison and it's
22:22 - getting kind of stuck so if this was its
22:24 - behavior and it's still getting that
22:26 - error oh let's do them one at a time
22:36 - ah food food a list boy I'm really
22:40 - really making a mistake everywhere is
22:42 - that going to fix it yes okay so now
22:46 - let's see it's kind of stuck here so now
22:48 - we need to deal with this so I'm going
22:49 - to move on this is going to be the end
22:50 - of part one and you can stop and try to
22:52 - figure this out so what do I need to do
22:55 - next well now's where I really need to
22:57 - start thinking about the weight for
23:01 - those particular forces maybe I want it
23:03 - to be more attracted to food than it is
23:06 - to point me lastly what I want it to be
23:07 - is attracted to food and repelled from
23:10 - poison but in order for me to do that
23:14 - how can I do that in a flexible way
23:16 - where it learns that and that's what I'm
23:18 - going to start in the next video what I
23:19 - want to do is add properties to this
23:22 - vehicle that control how strong the that
23:26 - seeks that steering force is relative to
23:29 - food and relative to poison and by
23:31 - strong that could be in the positive
23:32 - direction or in the negative direction
23:34 - and I'm going to add that to the next
23:35 - video and start to get ready to evolve
23:38 - these agents I'll see you in part two if
23:40 - you choose to come along on the train
23:49 - [Music]

Cleaned transcript:

hello welcome to a coding challenge boy this one is a doozy it is five parts long until I know four parts long but there's like a little fifth part bonus and what it is it is an evolutionary system where I evolved steering agents to effectively eat food and avoid poison and the poison here is a Indic is signified by the red dots the food is the green nuts this system has been running for a little while you can see some of them are maybe better than others and avoiding the food at finding the food and so this is what I'm doing it is part of my series on genetic algorithms there's a lot of videos that precede this one if you want to go and watch those this is also part of Session two of a course called intelligence and learning so it's part of that which is basically the same playlist and I hope that when you get to the end of this you will make something creative from it and share that with me so that this coding challenge is about to start it's in four or five parts a little secret if all our parts aren't published check the description you might be able to find the next one this won't be relevant to most of you because most of you will be watching this in the future when they'll all be published okay goodbye I mean that goodbye I'm going to be right back if from the past in the future to you goodbye not goodbye okay here we are I am going to first before I begin coding kind of map out the ecosystem the scenario the architecture all the pieces of this puzzle that I'm going to slowly build over time to create this coding challenge so there is going to be a world that world is a twodimensional canvas in that world there will be dots that represent food maybe I'll make those dots green and there will also be dots that represents poison plot poison right cool boy and those will be red okay so this is going to be the world then in the world there will be agents you would call them particles or boys or vehicles whatever you know ants creatures what everyone call them your thing I'm going to call them vehicles because these are built on top of my examples that build on top of Craig Reynolds examples that build on top of this book called vehicles long story and by britain berg italian neuroscientist Frankenberg okay um so these vehicles the idea is that they need to they're going to move throughout this space in order to survive they need to eat food they don't eat food slowly over time they're helpful to window so I need I'm going to have a vehicle object the vehicle object is going to have a little physics engine built into itself so it needs its position it needs its velocity it needs acceleration but it's also going to need a property called health and that property is going to slowly go down over time now if it should happen to eat the green dot its health will go up if it should happen to eat the red dot its help will go down and what I want to do is I want to use an evolutionary strategy so I'm going to release a lot of these and all of them are going to have different properties that control how they move around through the space and those properties I want to evolve those properties over time so that I eventually have an optimal strategy for gathering and feeding all the green food the quickest and avoiding all of the red food now this might remind you of some demonstrations that you might have seen using a neural network based learning system and there is a technique I mean this is this technique is not exclusive to neural network based systems but called reinforcement learning and reinforcement learning is like hey why don't you you know vehicle move around the space and if you eat some food I'm going to give you a reward if you eat some poison I'm going to give you the opposite of reward a consequence and eventually over time you'll learn to do the stuff that were you to food to that that's an interesting topic boy am I excited to at some point in the future maybe you're in the future and it already exists come back and do a followup video about that particular topic but this is not what I'm going to look at today I'm going to use a different approach and evolutionary approach and if you don't know what genetic algorithms are I might encourage you to go back and watch a bunch of videos where I introduced the concept so I'm going to use this idea of a genetic algorithm to release a whole bunch of these into the world see how they perform and allow them to the ones that do well to reproduce and live longer and hopefully over time we're going to see agents that evolved to being very good at eating multitude and voids in poison okay so that I think makes sense now what else do I need to cover here in terms of what we're designing ah so I'm going to need an array to keep track of all the food locations an array to keep track of all the poison locations and I'm going to need an array to keep track of all of the vehicle objects and then there's one other important piece here I mean there's more but one more thing that happens described here on the whiteboard I need a function to determine something called steering so this is where I would say to you that if you haven't encountered steering behaviors and the work of Craig Reynolds before I would reference you to a link in this video's description of some of my videos where I go through via this topic in more detail in particular an algorithm called seek so I'm going to describe to to you briefly here but the idea is that if I'm a vehicle and I'm moving in a particular direction and what I'm desire to do is seek a particular target what I was a technique the steering technique that I'm going to use a pioneered by Craig Reynolds involves creating something called a desired velocity so if all my dreams were to ever come true I would simply be moving at maximum speed in this direction but I happen to be moving at this speed in this direction which is wrong so very wrong so what I need is some sore error and the error being with steering force that's going to push me back in that and from velocity in the direction design the reason why I got to looking at neural networks and learning based systems so much this is very very similar to looking at the output of a machine learning system and it's error the error here being the difference between the guests what my current velocity is and like desired output my desired velocity so the steering force is defined as the desired velocity minus the current velocity and if I apply this force to this particular vehicle it will turn and start to see over time alternatives or to seek the target now why is this interesting so in the one hand we I could just say right here right now I know exactly what these vehicles should do they should seek all the green stuff and they should repel avoid all of the red stuff so their desired velocity for green should point in the direction of the target and their desired velocity for red stuff should point away from the target so this is obvious and in some sense what I'm doing here is I want to reproduce the revolutionary system and obvious result why is that interesting I don't know how these kids to try but my hope is that if you can watch me do this as a code you could probably come up with a much more creative scenario where there are a lot of different factors at play maybe there are predators maybe there's some type of system where they have to collaborate and be next to each other to do something so I'll try to come back and offer you some suggestions towards the end but I'm going to troduce try to reproduce I'm going to allow these vehicles to make arbitrary random choices as to how they should interact with green and red and over time see if I can evolve them towards them being attracted to green and repelled from red that's the overall explanation and back over here with my computer oh hi computer nice to be here with you so I got to talk to me is it some day maybe you will that you are also just this string I say that okay here we go Tonetta edit that out or don't edit oh it's in there it's in there okay I'm here with my computer and I'm gonna start writing some code now here's the thing I usually start these coding challenges from scratch but to move this one along and since I've done this in other coding challenges and videos before I'm going to start with a base example that implements that steering behavior just having one single vehicle seeking a particular target so if you like to watch these videos and follow along coding along then what I would do is first there's a link in this video's description to the code where it is right now so you can go and grab pause grab that code and then come back but I'll talk you through what some of the pieces are in the code and then I also have a video where I cover steering behaviors and how this code works completely separately but um so I'll link to all that if you want to go back and watch that stuff before you continue with me right now here in this video okay now I am a conductor conducting nothing would be nice if you I just did that music just started I would know and make me so happy this doesn't all this stuff doesn't me be open but it's open okay so what's going on in this particular example so this example comes from the nature of code book there is a vehicle object the vehicle has all three of those properties I talked about before it has an acceleration has velocity has a position this dot R is its size property and has a maximum speed and maximum force which control its ability to seek a particular target it has a standard physics algorithm that I cover into my other videos where the position the velocity alters the position the acceleration alters the velocity and then the key thing here is this seek algorithm so this is key to us in how we're going to build this coding challenge so this is where Craig Reynolds steering's force is calculated the desired velocity is that is the target location my position the target location my position that's the desired velocity with its magnitude set to be maximum speed you know I'm to make knowledge of how p5 dot vector works and how vectors work so that's also something that you might want to look at some other videos about it that's new to you and then that force is that's the steering force that force is limited to some maximum strength and then applied to the object into its acceleration so that's all of this is and we can see here in the main program that I create a target which is I could call this target really instead of Mouse that's wherever the mouse is and then I draw something whoops I draw something at that target and then I say hey vehicle seek that target and that's the result that we have here so what do I want to do now what I want to do right now is the whole thing I can do everything but I got to start somewhere so I think what would probably be most useful it's for me to try something where I simply add the food the food elements into the window and then I have this particular vehicle just seek the food so let's do that so what I'm going to do is I'm going to create a variable called food and it's going to be an array and I'm going to say for VAR I equals 0 I'm just going to say let's add 10 pieces of food a food push create vector now where so I'm going to use a vector 4 to store an XY coordinate for each piece of food now we're sure that food B there's lots of ways I could approach this how about I pick a random X and how about I pick random Y yeah you might be able to do something interesting where you like seed the food locations based on a pattern you know that what was that Plus on distribution thing that I did or maybe you like pick all the bright spots of an image and you see all the food is like a person space but anyway I'm just going to pick some random locations and then what I'm going to do is right here in my name program I'm going to iterate through all of the food and I'm going to say I draw a little ellipse where the food is so at each food elements X&Y and I said the food should be green so I'm going to say fill with a green color and then I'm gonna I don't know it's a no stroke I make it up stuff just making it up as I go here we go so look there's all the food that's good step one done now here's the big on itchy nose today YouTube comments are going to talk about it okay so it's still seeking this like silly target thing so where is it so I got I got to do something about that so so what do I want to do here what I would like to do is figure out a way for this vehicle to individual seek a piece of food eat it and move on so what I want to do is instead of a seek target I'm going to pass in this entire array okay so if I'm passing food into the seek function and I'm actually what I'm going to do is I'm going to you know what I'm going to do I'm going to make a separate function I'm going to call it vehicle eat food because I have an idea of how I still want to use that seek function with one target in the same way I have before so what I'm going to do is I'm going to write a new function I'm going to call it this eat equals function and I'm going to give it some I'm just going to give it the argument is some list some list of things that's supposed to eat and what I want to do right now is I want it to find whatever piece of food it happens to be closest to I think this will work for us so I need to have a record a record distance what's the one that it's currently close to so at the beginning the record would be infinity you can actually just write infinity in JavaScript and it's like infinity so now what I need to do is I need to go through every element in that list and I need to look at the location and actually I don't need a separate variable what I want is the distance the distance between this objects position and the food position sorry that this is a long line of code but you can see here I'm looking for the distance between this I'm a vehicle my positions X Y and that particular piece of foods X Y and if if that distance is less than the record then guess what we beat the world record now the world record is that distance and I want to have a variable called closed fist and I'm just going to set it equal to no right now and then the closest is that piece of food okay so the closest is that piece of food there might be some issues you know I'm going to do closest index I'm going to keep the index because I might need the index later if it eats that if it happens to actually eat that piece of food I want to maybe remove it so anyway I'm thinking about this so I want to know what's the closest one so now I've done this loop to say what's the closest one and then I'm just going to say this dot seek but the element in that array that is the closest and I call this closest index I'm just going to call it closest okay so look at this this is a function now and this is why I wanted to keep that seek function because what I want to do is just look for there's a lot of things I could be seeking and I could do some kind of weighted thing where I seek a whole bunch at the same time but I just want to find what's the closest one and I want to seek it so now if I run this I've got an error cannot read property X of undefined vehicle dot look slowly deployed line twenty nine food index o food list it's interesting it kind of sure to work by accident because food was a global variable but let's try that list on lengths I I need list ed food this position distance list would be easier oh that's a good thank you Alka for that I'm going to do that but first I have to fix oh it's not pause its position the name of the variable is position position position and I suppose Alki and the chat is pointing out that if I say var D equals this position dot distance food index I it's going to be a nice sure there's a distance function in the P vector class P vector so I should say class because I'm here in JavaScript land but on in the P vaccuum the p5 that's your object that gives me the distance between this vector and this vector ok let's try this again so we can see it's just seeking write on boy let me get rid of this apologies let me get rid of this unnecessary mouse target now which is just distracting so we can see a limit only refresh because that was a little weird it picked oh look at that it's seeking whatever it happens to be closest to which right now is this one it's going back and forth so what I the next thing I want to do again I'm engineering the correct answer and then I'm going to try to go back and evolve the correct answer so to speak you'll see you'll see I got an idea in my head it's going to work I hope ok so what I want to do is I want it to eat that piece and move on and find the next closest one so the next thing I should do is actually where where am i in the vehicle is I want to say hey interesting what's that record distance actually less than I don't like 5 pixels I'm going to pick that arbitrarily but then I'm going to try to do something a bit more thoughtful in a second if it was then what should I do I should actually just get rid of that piece of food I ate that piece of food so I could say food dot splice I comma 1 so what is that doing splice is a function that removes a knot I sorry no I hear closest splice is a function that removes an element from the array and I want to I want to remove that one that it was closest to if it the close if it was actually within a certain distance like it got close enough to eat it so if it licks it I want to remove it and so that's the one I want to splice what's this onefour that's how many elements I want to take out of the array so for some reason not in this scenario I wanted to remove that element and the one after it that I would put it to there so let's see how this goes come back find another one there we go oh come back find another one so now you can see it's kind of eating them one at a time now I'm going to just for the sake of argument lower the maximum speed increase the maximum force just to make it a little bit better so now we can see look at it so this is just a nice little simulation of it doing exactly what we want it to do wonderful well and then there's none left so I got a that's the thing we're going to have to deal with but I'll worry about that later so I'm almost ready for part two this is kind of like my part one there's going to be a multipart series you're just watching let's add the poison real quick just to see how that works because it's going to we're going to we're going to get some weird behavior that I'm going to need to deal with so let's add the poison let's do exactly the same thing with except instead of food let's add a whole bunch elements to poison at a random then let's draw and again there could be a more elegant way of you know encapsulating this so I'm not duplicating all this code but let's draw all the poison let's draw the poison as a red color those of you who are designers will make something much more beautiful so let's just first see that I see that okay so now we've got we've got the red is there but it's and it's just eating the green because it's not seeking the red so now let's also say vehicle eat poison okay let's see what happens here Oh what happened okay I know the problem is this is an issue like I'm music losing global but point I reason why I put that argument there and don't want to use food here is I want a general function that can receive any array and kind of apply the same behavior to it so what I want to do is not I can't use food here it's specific I want this function to be useful for the food and the poison so I should just use list there so let me now refresh and I got another error I save everything okay we run this again now what's going on this is what I expected to happen it's kind of stuck the reason why it's stuck is it's attracted to both a piece of food and a piece of poison and it's getting kind of stuck so if this was its behavior and it's still getting that error oh let's do them one at a time ah food food a list boy I'm really really making a mistake everywhere is that going to fix it yes okay so now let's see it's kind of stuck here so now we need to deal with this so I'm going to move on this is going to be the end of part one and you can stop and try to figure this out so what do I need to do next well now's where I really need to start thinking about the weight for those particular forces maybe I want it to be more attracted to food than it is to point me lastly what I want it to be is attracted to food and repelled from poison but in order for me to do that how can I do that in a flexible way where it learns that and that's what I'm going to start in the next video what I want to do is add properties to this vehicle that control how strong the that seeks that steering force is relative to food and relative to poison and by strong that could be in the positive direction or in the negative direction and I'm going to add that to the next video and start to get ready to evolve these agents I'll see you in part two if you choose to come along on the train
