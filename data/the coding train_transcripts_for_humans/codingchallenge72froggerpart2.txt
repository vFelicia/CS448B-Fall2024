With timestamps:

00:00 - hello welcome to part two of Frogger so
00:03 - what I made so far in part one if you
00:05 - can believe it I don't know it's all I
00:07 - got so far was a rectangle that I can
00:10 - move around the screen by pressing the
00:13 - arrow keys and now what I want to do is
00:16 - add some cars so I want to add the cars
00:19 - that are moving across um where which I
00:22 - have to avoid so what I want to do is
00:24 - first I already have a car Tab and
00:27 - hopefully I'm hoping boy am I hoping
00:29 - that all the work we did to figure out
00:32 - this rectangle thing and this frog thing
00:34 - will pay off when it comes time to
00:36 - program the car and it's going to be
00:38 - really simple so let's just first do one
00:41 - car eventually I'm going to need an
00:42 - array I'm going to have multiple cars
00:44 - but let's just have one car and I'm
00:46 - going to say car equals new car and I'm
00:49 - going to put the car at zero it's going
00:51 - to start at zero and it's going to be
00:53 - it's Y is going to be height minus grid
00:56 - * 2 and its size is also just is going
01:00 - to be grid now the car and the truck
01:02 - could have a variable so and I'm going
01:04 - to I'm going to make it uh and this is
01:07 - having the car start at the bottom uh
01:10 - two row two rows up from the bottom and
01:12 - having its width be the side of the grid
01:15 - and its height being two no I want its
01:17 - with if it's a truck it's going to be
01:18 - longer so I'm going to have it be a
01:19 - little bit wider just to try that out
01:21 - and its height be just the grid then I'm
01:24 - going to say uh car. show and let's just
01:29 - see if we can see the car now the car is
01:31 - not showing H what
01:36 - if what if I dare have the car no this
01:39 - is a bad idea because ultimately on some
01:42 - level probably going to be drawing the
01:44 - cars in different ways let's just have
01:46 - the car extend I was thinking about
01:48 - having the car extend frog and I would
01:51 - inherit the show function but I'm
01:53 - actually just going to leave that here
01:55 - and I'm going to make the car like a
01:57 - slightly different color just for right
02:00 - now uh and I'm going to I need to have
02:03 - the same exact Constructor
02:05 - basically uh except I'm going to include
02:08 - a a height and so this now is the car so
02:12 - if I run this we should see okay what
02:14 - happened here ah whoops with height
02:18 - there we
02:19 - go uh what did I get wrong ah whoops
02:22 - just the way that I'm drawing it there
02:24 - we go that was just a little bug and now
02:26 - there we go so there is the truck there
02:30 - is the truck or the car now what I need
02:33 - is for the car to have maybe an update
02:36 - function and the car should also have
02:39 - its own variable called
02:41 - speed so let's just set the speed equal
02:43 - to two so this is one of the wonderful
02:46 - things about inheritance is I can
02:47 - inherit all of the properties from
02:49 - rectangle and then add my own so the car
02:52 - is also going to have a speed and then
02:55 - speed is going to say x = X Plus update
02:57 - is going to say x = X plus speed
03:00 - so I'm going to say uh car
03:03 - update and now we have the car moving
03:07 - yay and I can go past it as it moves by
03:09 - now when the car goes off I probably
03:13 - want it to
03:14 - reenter so what I Pro in update I'm
03:17 - going to say if x is greater than
03:20 - width then x equals Nega height never
03:25 - negative width so I want it to start off
03:27 - the screen and re-enter so what I mean
03:29 - by this is when the car's X which is its
03:32 - left side gets past the right side then
03:34 - it should reemerge on the other side and
03:36 - I might want to you know maybe have that
03:39 - be more of a delay or something so I
03:40 - could like you know maybe if it's you
03:43 - know further off the screen I could use
03:46 - W uh I could actually probably let me
03:48 - just use the grid size which is
03:51 - probably
03:53 - um oh but that I definitely want to do
03:56 - uh negative w u you know negative w
03:59 - minus grid there's just so many ways I
04:02 - could do this but I just wanted to have
04:03 - a little bit of buffer so it's got to go
04:05 - more than just with and then it
04:08 - re-enters so you can see now I've got
04:10 - look at this we're moving along now
04:12 - we've got the car moving so what do I
04:14 - need I need to have multiple cars okay
04:17 - so let's just think I could use an array
04:20 - list which allows me to have a flexible
04:22 - amount of cars but I for Simplicity I
04:25 - think I'm just going to have a fixed
04:26 - amount so I'm going to say car equals
04:28 - cars
04:30 - cars index zero is that new car and cars
04:35 - index zero show and cars index zero
04:38 - update I want to make sure that just
04:40 - works what did I get wrong uh I didn't
04:42 - initialize the array cars equals new car
04:46 - with you know 100 cars so let's say
04:48 - there's well there's not going to be
04:49 - let's just let's go look at Frogger for
04:52 - a
04:52 - second what's a reasonable number of
04:55 - cars so you can see there's 1 two 3 1
04:57 - two 3 1 two 3 1 1 2 there's some
05:00 - configuration but that's 3 6 9 10 11 12
05:04 - 13 13 what a lovely number let's have oh
05:07 - uh no no that's actually 12 but whatever
05:10 - let's just have 10 10's a nice round
05:12 - number right now there's only one car
05:16 - okay now what I need to do is okay so
05:18 - how many um how many rows of cars let's
05:22 - say I have 10 cars and I have five rows
05:26 - that would give me two cars per row I
05:30 - mean this is sort of all arbitrary
05:32 - making this up but let's let's think
05:34 - about how many rows there
05:36 - are so I'm going to say for in I equals
05:41 - z i is less than let's just say there
05:44 - are going to be three rows for right now
05:50 - i++ so I'm going to say row equals
05:53 - zero row is less than three row ++ I
05:58 - almost kind of want to maybe I should
05:59 - should do this much more manually let's
06:01 - do this let's configure this manually
06:03 - let's just say I'm going to do
06:06 - um let's keep track of an index which is
06:10 - zero then this is going to be the first
06:13 - row I'm going to put three cars in the
06:16 - first
06:19 - row so the three cars they're they need
06:23 - a starting X location uh x uh
06:28 - equals uh uh I time 100 + 50 so what I
06:33 - want to do is arbitrarily space them
06:39 - out and let's just say those are there's
06:41 - only going to be three cars right now
06:44 - there's only going to be three
06:46 - cars you'll see where I'm going in a
06:48 - second so I'm going
06:52 - to and you know what I can actually I
06:54 - forget I can use this enhanced Loop
06:56 - which is like a for each Loop for every
06:58 - car in
07:02 - cars car car show car update so this is
07:06 - a nice way I could say well whatever
07:08 - amount of cars there are show and update
07:10 - all of them okay so now what I should
07:13 - have
07:16 - here is three now you can see I didn't
07:18 - do a very good job of spacing them out
07:21 - so let's space them out more I *
07:26 - 200 uh I don't know why I have this plus
07:29 - 50 there I'll just take that out right
07:31 - so now we can see there are there's the
07:34 - bottom row right so I can now that looks
07:37 - like really hard it's probably too hard
07:40 - so let's just have uh two cars in this
07:43 - row and space them out by 300 pixels uh
07:46 - and um I just need to match that I only
07:49 - have two so far there we go so we can
07:54 - see that's one
07:56 - row yay yay this is working I got
08:00 - distracted by my own game so let's now
08:02 - new so I'm going to have to put a
08:04 - comment here oh and the whole point of
08:05 - this is I wanted to do index I want to
08:08 - keep track of the index boy an array
08:10 - list might be easier here because what
08:12 - I'm going to do this is Row one I'm
08:15 - doing this and again this could be
08:17 - optimized I could do this less manually
08:19 - I'm going to do row
08:21 - two which is now uh I'm going I'm going
08:25 - to also add two cars to Road two so now
08:27 - I have a total of four cars let me move
08:30 - this down
08:31 - here and for row two I'm going to add
08:36 - those cars height minus grid times 3
08:40 - right because I need to go up another
08:41 - row I want to make these just square and
08:45 - they are separated by uh 200 pixels uh
08:49 - and let's take a look at
08:51 - this now I probably want to offset that
08:54 - by some amount so they look and again
08:56 - this could be random and they're oh
08:58 - they're moving at the same speed so each
09:00 - row should also get a different speed
09:03 - and and rodc in the chat is making a
09:05 - really great point which is I should
09:08 - make an object which is just like a row
09:12 - or a Car Lane object and it can keep
09:14 - track of its own cars and its position
09:15 - and speed I'm going to say that's like a
09:17 - refactoring thing that I'm going to
09:18 - suggest maybe people do as a exercise
09:21 - for after it because I'm going to keep
09:22 - things kind of simple here but that is a
09:23 - really great suggestion so one thing
09:25 - that I want to do is give these a speed
09:27 - so let's say for also so I'm going to
09:29 - add a fourth argument here so this has a
09:31 - speed of two and this is going to have a
09:33 - speed of
09:35 - 3.5 uh and so now the car should also
09:39 - get a fourth argument called speed s the
09:43 - car Constructor should get a fifth
09:45 - argument so I'm going to want to be
09:46 - initialized so now also these cars which
09:49 - are all in row one have this particular
09:53 - speed and these cars which are all in
09:54 - row two have a different speed okay
09:56 - let's run this now and there we go we
09:58 - can see this looks a bit more like
10:00 - Frogger let's
10:02 - see oh
10:06 - right whether this is difficult or easy
10:08 - I'm not sure let's add one more
10:13 - row row
10:16 - three let's put in uh four
10:21 - cars they're going to be their height is
10:24 - going to be one more spot on the grid up
10:27 - and their speed is going to be uh really
10:33 - slow but um they are not spaced out by
10:39 - as
10:39 - much I'm just picking some random
10:42 - numbers this is Row
10:43 - three and what did I mess up uh so I
10:47 - have 2 + 2 + 4 is eight cars
10:52 - total there we go so now I have again
10:57 - now I have a whole bunch of of cars and
10:59 - that you know again I could also have
11:01 - them each have an image associated with
11:02 - them it's their own animation but is
11:04 - this playable that's the
11:07 - question yeah that looks like I made it
11:10 - but have I actually you know so we've
11:13 - got a row of cars I'm going to just keep
11:15 - three but what I need to do I've got one
11:17 - more feature I've got to add to this
11:19 - part which is that I need to check that
11:21 - intersection thing but guess what I
11:23 - don't know why I spent the part one of
11:26 - this video's tutorial series on making
11:28 - Frogger doing the inter intersection CU
11:29 - I could have just waited now but thank
11:31 - goodness we did that because I have this
11:33 - function already so what I want to do is
11:36 - now say
11:38 - here if car
11:41 - intersects
11:43 - frog or maybe I want to say frog
11:45 - intersects car it doesn't matter frog
11:48 - and car both extend rectangle rectangle
11:52 - has in itself this convoluted but it
11:55 - works we don't know that it works I
11:57 - never tested it intersects function so
11:59 - now I could say if they intersect then
12:02 - let me do something like um let me just
12:05 - print let me just do a print
12:07 - line you know game over or
12:12 - something so now we should see if I look
12:15 - down here in the console
12:18 - oh so we have a problem here which as
12:20 - you can see I see the game over already
12:23 - which is that it's actually intersecting
12:25 - when they're right on top when it's when
12:27 - they're right next to each other and
12:28 - that's because I because in my intersect
12:31 - function I'm actually checking right
12:33 - remember I'm
12:34 - negating whether they're not overlapping
12:37 - and so they shouldn't be overlapping if
12:39 - those edges are
12:40 - equal and so I think if I add this in
12:44 - here that should fix that problem oh and
12:47 - it's less than or equal uh not equal
12:50 - less than less than or equal
12:52 - okay all right game is not over okay so
12:55 - now let's see if I can do this can I get
12:57 - through them
13:00 - I did it I saw no game over down here
13:02 - now let's make sure the intersect
13:04 - function is
13:05 - working game over game over
13:08 - aha so we have actually what do I want
13:11 - to do let's let's actually just have If
13:13 - instead of game over let's um let's just
13:16 - reset let's call a um let's call a
13:20 - function called a reset
13:23 - game and I'm going to make that function
13:25 - I'm going to just put it up here at the
13:27 - top reset game
13:30 - and what I'm going to do is and I think
13:34 - I'm just going to just reset the Frog's
13:38 - location uh and I'm I'm gonna I'm just
13:43 - going to put this here I'm going to make
13:44 - a new frog object and then I'll just
13:46 - call reset game here so I could be more
13:48 - thoughtful about this there might be a
13:50 - lot of other things you know ultimately
13:52 - I'm not really doing lives or levels and
13:54 - this isn't really a reset game but one
13:56 - thing you can notice here if there are a
13:57 - bunch of things that you want to re set
13:59 - that happen when the game starts but
14:01 - then also happen later when you make
14:03 - when something happens like the the frog
14:05 - and the car Collide I can have a
14:06 - separate function that does all that
14:07 - call that both in setup and also down
14:10 - here so let's see now if I can make it
14:15 - through not too hard to play actually
14:18 - let me run it again and mess
14:21 - up yeah so you can see if I mess up it
14:23 - just puts me back at the
14:27 - beginning so we've got we've got the
14:30 - basics of Frogger now part two done I'm
14:33 - going to end this part two and in the
14:36 - second part I'm going to add the logs
14:39 - the third part that is I'm going to add
14:40 - the logs at the top that instead of
14:43 - avoiding the frog has to actually jump
14:46 - onto and and ends up sticking to okay
14:49 - thanks for keeping going with me and I
14:52 - guess there will be a third part to this
14:57 - okay

Cleaned transcript:

hello welcome to part two of Frogger so what I made so far in part one if you can believe it I don't know it's all I got so far was a rectangle that I can move around the screen by pressing the arrow keys and now what I want to do is add some cars so I want to add the cars that are moving across um where which I have to avoid so what I want to do is first I already have a car Tab and hopefully I'm hoping boy am I hoping that all the work we did to figure out this rectangle thing and this frog thing will pay off when it comes time to program the car and it's going to be really simple so let's just first do one car eventually I'm going to need an array I'm going to have multiple cars but let's just have one car and I'm going to say car equals new car and I'm going to put the car at zero it's going to start at zero and it's going to be it's Y is going to be height minus grid * 2 and its size is also just is going to be grid now the car and the truck could have a variable so and I'm going to I'm going to make it uh and this is having the car start at the bottom uh two row two rows up from the bottom and having its width be the side of the grid and its height being two no I want its with if it's a truck it's going to be longer so I'm going to have it be a little bit wider just to try that out and its height be just the grid then I'm going to say uh car. show and let's just see if we can see the car now the car is not showing H what if what if I dare have the car no this is a bad idea because ultimately on some level probably going to be drawing the cars in different ways let's just have the car extend I was thinking about having the car extend frog and I would inherit the show function but I'm actually just going to leave that here and I'm going to make the car like a slightly different color just for right now uh and I'm going to I need to have the same exact Constructor basically uh except I'm going to include a a height and so this now is the car so if I run this we should see okay what happened here ah whoops with height there we go uh what did I get wrong ah whoops just the way that I'm drawing it there we go that was just a little bug and now there we go so there is the truck there is the truck or the car now what I need is for the car to have maybe an update function and the car should also have its own variable called speed so let's just set the speed equal to two so this is one of the wonderful things about inheritance is I can inherit all of the properties from rectangle and then add my own so the car is also going to have a speed and then speed is going to say x = X Plus update is going to say x = X plus speed so I'm going to say uh car update and now we have the car moving yay and I can go past it as it moves by now when the car goes off I probably want it to reenter so what I Pro in update I'm going to say if x is greater than width then x equals Nega height never negative width so I want it to start off the screen and reenter so what I mean by this is when the car's X which is its left side gets past the right side then it should reemerge on the other side and I might want to you know maybe have that be more of a delay or something so I could like you know maybe if it's you know further off the screen I could use W uh I could actually probably let me just use the grid size which is probably um oh but that I definitely want to do uh negative w u you know negative w minus grid there's just so many ways I could do this but I just wanted to have a little bit of buffer so it's got to go more than just with and then it reenters so you can see now I've got look at this we're moving along now we've got the car moving so what do I need I need to have multiple cars okay so let's just think I could use an array list which allows me to have a flexible amount of cars but I for Simplicity I think I'm just going to have a fixed amount so I'm going to say car equals cars cars index zero is that new car and cars index zero show and cars index zero update I want to make sure that just works what did I get wrong uh I didn't initialize the array cars equals new car with you know 100 cars so let's say there's well there's not going to be let's just let's go look at Frogger for a second what's a reasonable number of cars so you can see there's 1 two 3 1 two 3 1 two 3 1 1 2 there's some configuration but that's 3 6 9 10 11 12 13 13 what a lovely number let's have oh uh no no that's actually 12 but whatever let's just have 10 10's a nice round number right now there's only one car okay now what I need to do is okay so how many um how many rows of cars let's say I have 10 cars and I have five rows that would give me two cars per row I mean this is sort of all arbitrary making this up but let's let's think about how many rows there are so I'm going to say for in I equals z i is less than let's just say there are going to be three rows for right now i++ so I'm going to say row equals zero row is less than three row ++ I almost kind of want to maybe I should should do this much more manually let's do this let's configure this manually let's just say I'm going to do um let's keep track of an index which is zero then this is going to be the first row I'm going to put three cars in the first row so the three cars they're they need a starting X location uh x uh equals uh uh I time 100 + 50 so what I want to do is arbitrarily space them out and let's just say those are there's only going to be three cars right now there's only going to be three cars you'll see where I'm going in a second so I'm going to and you know what I can actually I forget I can use this enhanced Loop which is like a for each Loop for every car in cars car car show car update so this is a nice way I could say well whatever amount of cars there are show and update all of them okay so now what I should have here is three now you can see I didn't do a very good job of spacing them out so let's space them out more I * 200 uh I don't know why I have this plus 50 there I'll just take that out right so now we can see there are there's the bottom row right so I can now that looks like really hard it's probably too hard so let's just have uh two cars in this row and space them out by 300 pixels uh and um I just need to match that I only have two so far there we go so we can see that's one row yay yay this is working I got distracted by my own game so let's now new so I'm going to have to put a comment here oh and the whole point of this is I wanted to do index I want to keep track of the index boy an array list might be easier here because what I'm going to do this is Row one I'm doing this and again this could be optimized I could do this less manually I'm going to do row two which is now uh I'm going I'm going to also add two cars to Road two so now I have a total of four cars let me move this down here and for row two I'm going to add those cars height minus grid times 3 right because I need to go up another row I want to make these just square and they are separated by uh 200 pixels uh and let's take a look at this now I probably want to offset that by some amount so they look and again this could be random and they're oh they're moving at the same speed so each row should also get a different speed and and rodc in the chat is making a really great point which is I should make an object which is just like a row or a Car Lane object and it can keep track of its own cars and its position and speed I'm going to say that's like a refactoring thing that I'm going to suggest maybe people do as a exercise for after it because I'm going to keep things kind of simple here but that is a really great suggestion so one thing that I want to do is give these a speed so let's say for also so I'm going to add a fourth argument here so this has a speed of two and this is going to have a speed of 3.5 uh and so now the car should also get a fourth argument called speed s the car Constructor should get a fifth argument so I'm going to want to be initialized so now also these cars which are all in row one have this particular speed and these cars which are all in row two have a different speed okay let's run this now and there we go we can see this looks a bit more like Frogger let's see oh right whether this is difficult or easy I'm not sure let's add one more row row three let's put in uh four cars they're going to be their height is going to be one more spot on the grid up and their speed is going to be uh really slow but um they are not spaced out by as much I'm just picking some random numbers this is Row three and what did I mess up uh so I have 2 + 2 + 4 is eight cars total there we go so now I have again now I have a whole bunch of of cars and that you know again I could also have them each have an image associated with them it's their own animation but is this playable that's the question yeah that looks like I made it but have I actually you know so we've got a row of cars I'm going to just keep three but what I need to do I've got one more feature I've got to add to this part which is that I need to check that intersection thing but guess what I don't know why I spent the part one of this video's tutorial series on making Frogger doing the inter intersection CU I could have just waited now but thank goodness we did that because I have this function already so what I want to do is now say here if car intersects frog or maybe I want to say frog intersects car it doesn't matter frog and car both extend rectangle rectangle has in itself this convoluted but it works we don't know that it works I never tested it intersects function so now I could say if they intersect then let me do something like um let me just print let me just do a print line you know game over or something so now we should see if I look down here in the console oh so we have a problem here which as you can see I see the game over already which is that it's actually intersecting when they're right on top when it's when they're right next to each other and that's because I because in my intersect function I'm actually checking right remember I'm negating whether they're not overlapping and so they shouldn't be overlapping if those edges are equal and so I think if I add this in here that should fix that problem oh and it's less than or equal uh not equal less than less than or equal okay all right game is not over okay so now let's see if I can do this can I get through them I did it I saw no game over down here now let's make sure the intersect function is working game over game over aha so we have actually what do I want to do let's let's actually just have If instead of game over let's um let's just reset let's call a um let's call a function called a reset game and I'm going to make that function I'm going to just put it up here at the top reset game and what I'm going to do is and I think I'm just going to just reset the Frog's location uh and I'm I'm gonna I'm just going to put this here I'm going to make a new frog object and then I'll just call reset game here so I could be more thoughtful about this there might be a lot of other things you know ultimately I'm not really doing lives or levels and this isn't really a reset game but one thing you can notice here if there are a bunch of things that you want to re set that happen when the game starts but then also happen later when you make when something happens like the the frog and the car Collide I can have a separate function that does all that call that both in setup and also down here so let's see now if I can make it through not too hard to play actually let me run it again and mess up yeah so you can see if I mess up it just puts me back at the beginning so we've got we've got the basics of Frogger now part two done I'm going to end this part two and in the second part I'm going to add the logs the third part that is I'm going to add the logs at the top that instead of avoiding the frog has to actually jump onto and and ends up sticking to okay thanks for keeping going with me and I guess there will be a third part to this okay
