With timestamps:

00:00 - (train whistling)
00:01 - - Shocking development!
00:02 - I am adding another workflow
video, because every once
00:05 - in a while I have to download
a Python script and run it.
00:09 - And I do use lots of
different kinds of Python
00:11 - development tools from time to time.
00:13 - Jupyter Notebook is a wonderful
way of running Python code
00:18 - in an interactive way right
in the browser, and there's
00:20 - all sorts of other things you can do too,
00:23 - different ways to work with
Python, but I'm going to show you
00:25 - one little thing that I tend to use,
00:27 - which is that I often need
to run some Python script,
00:30 - to process some data, or
train a model or something
00:33 - that I'm going to eventually
come bring and use in JavaScript.
00:36 - And so the tool that I
have kind of landed on,
00:39 - that I like to use, is
something called Virtualenv.
00:42 - And Virtualenv, Virtual
Environment is a tool
00:44 - to create isolated Python environments.
00:47 - And this is useful because
I can kind of contain
00:52 - all the Python version,
and all the packages
00:54 - and all the dependencies for one thing
00:56 - that I'm trying to do
within one workspace.
00:59 - And again, there's Docker,
and there's so many
01:01 - other things you could use,
01:02 - so I'm just going to show
you Virtual Environment,
01:03 - 'cause it solved a lot of
problems for me when I get
01:06 - totally lost in my Python
installation on my computer.
01:08 - Now, one thing, to get started with this,
01:10 - you will need to have
Python on your computer
01:14 - and PIP on your computer, so
those are two prerequisites.
01:17 - Installing Python, installing
PIP, if you're on a Mac,
01:19 - it most likely came with some
version of one or the other.
01:21 - And the other, so you're
kind of in good shape,
01:23 - and that's what I am here, so
the first thing I want to do is,
01:26 - I actually just want to say pip install,
01:28 - PIP is Python installation packager.
01:31 - Ha, that's not what it stands for at all.
01:33 - But it's your package manager for Python.
01:36 - Sometimes you'll say PIP
three if using Python 3.
01:38 - pip install virtualenv,
Virtual Environment.
01:41 - So I want to install that.
01:42 - Truth of the matter is,
I've already installed it,
01:44 - so there it is, and you
can see it's kind of part
01:47 - of my default Mac OS Python
installation, so maybe
01:50 - you're using Miniconda
or Anaconda or some other
01:52 - but you want to first start
with Virtual Environment.
01:55 - Now, once I have that installed,
I need to find a place
01:58 - on my computer to set up
my Python environment.
02:01 - And it could be anywhere, I
could put it on my desktop.
02:03 - It's crazy, I am a crazy
person who sometimes keeps
02:06 - entire Python environments on my desktop.
02:08 - Watch, I'm going to do
that right now, cd desktop,
02:12 - I'm going to look on the
desktop, there's nothing there,
02:14 - there's like a folder called
website, there's processing
02:17 - dot app, and then, I'm
going to go here and,
02:20 - user guide is probably what
I want to take a look at.
02:22 - I want to create a virtual environment.
02:24 - This is the, this is
really the only command,
02:26 - well, this is one command,
you don't even need
02:28 - to memorize it because we can look it up.
02:30 - Virtual Environment ENV,
now, this is not meant
02:33 - for you to just have to
type, capital E, capital N,
02:36 - capital V, that is a
placeholder for the name
02:38 - of this Python workspace
that you want to use.
02:40 - So I'm going to grab this,
I'm just going to say,
02:42 - And I'm going to say, virtualenv
and I'm going to call this
02:46 - coding train demo, coding train dash demo,
02:49 - that's going to be the
name of this workspace,
02:52 - and it is doing all sorts
of stuff to set it up,
02:55 - and blah blah blah.
02:56 - Now I can navigate to the
desktop and look, there it is,
02:59 - right there, I've got
processing, website directory
03:01 - and coding train demo, and an
entire Python installation,
03:05 - with everything I might
ever possibly need.
03:07 - Now, it's Python 2.7, so,
I'm going to at some point
03:12 - have to examine how can I get
a different version of Python
03:15 - if I want with Virtual
Environment, which shouldn't
03:17 - be a problem, but let's just push forward.
03:19 - So once I've installed
a virtual environment,
03:22 - once I've created a virtual environment,
03:24 - I need to activate it,
so the way to activate it
03:28 - is by running this command,
source bin activate.
03:34 - So in other words, inside of
here, inside of bin activate,
03:38 - this shell script will turn
on this virtual environment.
03:41 - So right now, you can see,
if I'm in the desktop,
03:44 - and I just say which
python, it's pointing to
03:48 - user bin python, the default
MAC OS Python installation,
03:52 - and if I say, python dash dash
version, we're going to see,
03:56 - I'm using Python 2.7.10 which
I, admittedly, is a very old
03:59 - version of Python, so I'm going
to, by the end of this video,
04:02 - I'm going to be using Python 3 (laughs)
04:05 - So now, if I were to say source,
04:10 - coding train, oops, coding
train demo, (laughs).
04:14 - Oh no, I've got to tab through all
04:15 - of this 'cause I'm a lunatic.
04:16 - Coding train demo bin activate.
04:21 - All of a sudden you can see, look at this,
04:23 - this little note, in my terminal window,
04:27 - in my console, is letting me
know that coding train dash
04:30 - demo is activated, so
if I were to now say,
04:34 - which python, you can see
this is the one it's using.
04:38 - Users coding train desktop
coding train demo bin python.
04:41 - Now again, do I really
want to put this stuff
04:42 - on the desktop, probably not,
but I can move it around.
04:46 - Everything to have to do
with this version of Python
04:48 - is running right there,
if I can say, I can say
04:51 - python dash dash version,
and it's still 2.7.10
04:55 - but now let's say I want
to install TensorFlow.
04:59 - If I say pip install tensorflow
05:04 - (singing)
05:05 - ♪ PIP install TensorFlow dance ♪
05:07 - And it's finished, oh, and
it's installing some other
05:11 - dependencies (laughs),
it's going to take forever.
05:14 - Why did I pick this example?
05:16 - (train whistling)
05:17 - (singing)
05:23 - It's going to speed this
up, ah, okay, it's done!
05:26 - Alright, so it finished
installing TensorFlow,
05:29 - and if I'm just going
to run Python right now.
05:32 - I can say, import tensorflow just to see
05:35 - and I get no error, meaning
TensorFlow is properly
05:39 - installed for this environment,
05:41 - and how do I get out of this?
05:42 - Control C, no, exit,
something like that, okay.
05:45 - Now, if I were to go to
a new tab, right, look,
05:47 - coding train is not activated,
I'm in a different Python.
05:53 - I'm not in my virtual environment.
05:55 - If I were to say python, and I
were to say import tensorflow
06:02 - it has no idea what that is,
06:05 - but I can say source
06:09 - I got to go to coding train
06:14 - bin activate
06:17 - and now, now that workspace
is activated so I can install
06:22 - a whole lot of packages
and they are all here
06:25 - coding train demo, lib,
Python 2.7 and site-packages
06:31 - and we can see, aha, look,
these are all the things
06:34 - that were installed, including TensorFlow.
06:36 - So everything is contained
within this one directory
06:38 - and I'm working with it here right now.
06:40 - Alright, so now, what if
I want to create a virtual
06:43 - environment with a
different version of Python?
06:46 - So first what I want to do to
make a new virtual environment
06:49 - is I want to deactivate
the one that's going.
06:51 - So I'm just going to write deactivate
06:54 - and then I can just check
where I am, here I am on the
06:56 - desktop, so I want to make
a new virtual environment
06:59 - but with Python 3, so I
can say virtualenv dash p
07:04 - for the version of Python,
Python 3, and I'm going to call
07:08 - it coding train dash 3 (gasp)
aaaaahh, Python 3 does not
07:13 - exist, so the problem is
Virtual Environment, it's not
07:16 - magically creating a workspace
in Python out of thin air,
07:21 - it's actually taking it
from the existing default
07:24 - installation of Python, so I
actually have to have Python 3
07:27 - installed on this computer
to be able to make a virtual
07:30 - environment with Python 3,
so there's so many different
07:33 - ways you could install Python 3.
07:35 - I kind of like to avoid using
this tool called HomeBrew,
07:39 - which is a package manager
for installing Unix utilities,
07:43 - it's written in Ruby on a
Mac, but the official Python
07:47 - docs say that's the
correct way to install it,
07:49 - so let's do that, so
I'm going to grab this.
07:52 - I'm going to install
HomeBrew, which I probably,
07:54 - let's see, do I have brew installed?
07:56 - No, I do not, so let's install that.
08:00 - Install this thing called
HomeBrew, and I'm going to enter
08:03 - in my password, and I'm
going to enter it in again,
08:08 - and I'm going to try a
different password, there we go.
08:11 - So this is going to
install for a little while.
08:13 - (electric music)
08:16 - (bell ring)
Oh, it finished, okay.
08:17 - So I've got HomeBrew, looks
like it was installed properly.
08:21 - That's great, so now I'm going to,
08:27 - I think the path, let's see if the path,
08:30 - so remember, if I'm going to type brew,
08:34 - ah, it's already there,
great, so brew got added
08:36 - to my path already, and
remember if you've been
08:39 - following my workflow videos,
I'm not looking in the
08:41 - dot profile, I'm looking
in the settings file,
08:45 - it's like dot shrc, zshrc,
08:49 - that's my, so let's look at that.
08:52 - I can say, I can open code dot zshrc
08:59 - just so we can always have a look at
09:00 - this file and we can see, ah,
09:03 - so it probably, HomeBrew was
just part of the main path
09:06 - so it looks like we're okay, alright.
09:08 - So now, I can go and
try to install Python 3.
09:12 - Brew install python,
we'll see what happens.
09:16 - Like that, and now we're going to have
09:17 - to wait a little while again.
09:19 - (electric music)
09:22 - (bell ring)
Okay, so, great.
09:24 - So that's done, now, if I say which python
09:29 - user bin python, which python3
09:33 - user local bin python3, so
I have now have Python 3
09:37 - installed on this computer, and I can,
09:40 - and let me just say python dash version,
09:44 - oh, no no, sorry, dash dash version,
09:47 - (laughs) shoot, python dash dash version,
09:51 - and then python3 dash dash version, great.
09:55 - So look, I have both versions
of Python on my computer.
09:56 - Now, here we go, remember that command
09:59 - that I was trying to type earlier?
10:02 - Virtual environment dash
p python3 coding train 3.
10:06 - Here we go, and going to set
up my virtual environment.
10:11 - I'm going to say source,
coding train, oops.
10:17 - Coding train dash 3 bin activate.
10:22 - Now which python,
10:26 - bin python, python dash dash version.
10:30 - Python 3, so in this case,
right, let me just show you
10:33 - that again, Python, the word
Python, is tied to Python 3.7
10:38 - When I'm not in a virtual
environment, I need to specify
10:42 - Python, which is the original
Python that came with
10:45 - the computer, an old
version, 2.7, or Python 3,
10:48 - which is the new version
which I just installed,
10:50 - but since I created the virtual
environment with cloning
10:53 - Python 3, the keyword
Python is tied to that one
10:56 - and I can once again do
things like pip install numpy.
11:00 - Let's pick something that
hopefully won't take as long.
11:03 - NumPy is a math library
for Python that's used for
11:08 - matrix math and sorts of other things.
11:10 - It installed that, if I do,
if I say python import numpy,
11:18 - we can see, I'm just sort
of checking, it's working.
11:22 - I'm going to exit from here,
I'm going to deactivate
11:27 - and I'm going to say python3 import numpy.
11:33 - Oops, I can't spell, import
numpy, not there, okay?
11:37 - So we can see, these
workspaces, one is Python 2.7
11:40 - with TensorFlow and one is
Python 3 with NumPy installed
11:45 - and I can completely
treat these separately.
11:47 - I can, and they're just
sitting here on the desktop,
11:50 - which is a very weird place to have them,
11:52 - but if I decide, you know
what, this whole workspace
11:54 - is worthless, I'm just going
to delete it, and it's gone.
11:59 - Okay, what are some other
things I want to show you?
12:01 - So one thing is, you're going to
find it hard, you're going to,
12:04 - this is going to happen to
you if you're using Virtual
12:06 - Environment, you're going
to forget to activate it,
12:09 - and you're going to start
doing stuff and running Python
12:11 - scripts and you're like,
why is it not working?
12:13 - Well, so one thing is it's
helpful to have that reminder.
12:17 - Again, I want to say a few things, one is,
12:19 - I don't want to have to
type this every single time.
12:21 - Maybe there's a way I can
create a quick alias to that
12:23 - environment, and in fact there is.
12:25 - So I'm going to go back to my
zshrc, that's the equivalent
12:30 - of the bash profile,
this is where are of the,
12:33 - shell settings are, for the,
when you start up my shell.
12:36 - So I'm going to go to that, I
have it open in Visual Studio
12:38 - code and I can just create an
alias by saying something like
12:40 - So, I'm going to do an alias
for my virtual environment,
12:44 - and I'm going to say, alias
coding ct three, like just
12:52 - quick ct3 is my alias for
Python 3 and then I can say,
12:56 - I put in quotes, source
activate and then I need the
12:59 - full path, so I need to
say users, actually I might
13:03 - be able to do this, home.
13:08 - Right, home, desktop,
I don't know (laughs)
13:12 - Let's go to here and
say, let's just use this.
13:16 - There's probably a way to
use an environment variable,
13:18 - but basically what I'm
trying to do is do this.
13:20 - Users coding train desktop, and again,
13:22 - you probably don't want to put your
13:23 - virtual environment on
the desktop (laughs).
13:27 - Coding train 3 bin activate
13:30 - Actually, scratch that,
before I go to the shell,
13:32 - this is never going to work
because I forgot something
13:34 - very important, I have to
actually set this alias
13:37 - equal to that command, so
if I put an equals here,
13:41 - then I go back to the
shell, I should be able.
13:44 - Now, if I just type ct3, it's
not going to know that command.
13:48 - I could restart iTerm and
it would probably know it,
13:50 - but I can also just refresh
the shell by saying,
13:54 - source dot zshrc and now
I should be able to type
13:59 - ct3, ahh, oh, no such
file directory activate.
14:02 - So at least it was
looking for that command,
14:05 - it ran that command, why did it not?
14:09 - Oh, I don't know what I'm,
I don't know why there's
14:12 - an extra activate here,
this is what it should be.
14:14 - Source, the full path, to bin activate.
14:17 - Okay, save, update, and there we go.
14:22 - So that activates it and
then I can say, deactivate,
14:26 - and ct3, there we go, now
something you might want to do,
14:29 - although you have to
be careful about this,
14:30 - is what if I actually just
want to automatically,
14:32 - every time I open a new
shell, I just want to
14:36 - activate my virtual environment?
14:37 - So in fact, one thing I could
do is, once I have this alias,
14:40 - I could actually just say, hey,
the last thing that you do,
14:42 - after all the setup happens,
is just, I'm going to go down
14:45 - to the bottom, there's tons
of stuff commented out.
14:47 - Just run that alias, ct3, so now,
14:51 - if I quit iTerm, quit,
and I just restart it.
14:57 - You're going to see, hey look,
coding train 3 is activated.
14:59 - A new window, coding train 3 is activated.
15:01 - A new tab, coding train 3 is activated.
15:03 - So coding train 3, that
virtual environment,
15:05 - would be auto activated every time.
15:07 - Typically, this is not
what I do, I'm sort of,
15:10 - like to turn it on and off,
now you can see it's not there,
15:14 - but I can just type in
my alias, and I'm running
15:16 - my virtual environment, alright.
15:18 - So this is pretty good, now
you can do all of your Python
15:21 - stuff in this environment,
and also, it's safe.
15:27 - Any other, as long as
you're, if you deactivate it
15:30 - and start running all sorts
of other installation stuff,
15:33 - and other Python stuff on your computer,
15:34 - it will not affect that
virtual environment.
15:36 - So if you know you need to
have exactly this configuration
15:39 - and stuff for this one particular
project, you can sandbox
15:42 - it and not have anything else affect it.
15:44 - One more thing I'd like to mention.
15:46 - So I know I started with pip
install virtual environment,
15:49 - that's what I was kind of
used to, and that's what I've
15:51 - always been using, but it
is actually true that once
15:52 - you have Python 3, the whole
idea of virtual environments
15:55 - is built in to Python 3 and
as of Python 3.6, the way
16:00 - to run, to create a virtual environment
16:03 - just with Python 3, is by
saying, so first of all,
16:06 - you have to have Python 3
installed, which I have done
16:08 - as part of this tutorial,
but now I can say,
16:10 - python3 dash m and the
command I want to run is venv,
16:14 - Virtual Environment,
and then, oh actually,
16:16 - and let me be more thoughtful
about where I'm putting this.
16:19 - I'm going to go to the
documents directory,
16:21 - and then I'm going to say python3
dash m venv and I'm going to
16:25 - call this coding train demo again
16:31 - and I have now created
a virtual environment
16:34 - which I can see if I go to the finder.
16:38 - I can see, there it is,
coding train demo again.
16:41 - There is all the Python stuff, Python 3.7
16:44 - and now I can activate
it by saying, source,
16:51 - coding train, oops, coding
dash train demo again,
16:58 - bin activate and now that
Python's environment is activated.
17:03 - Just to be sure which Python,
yes, in fact it is this one.
17:06 - I could alias this one,
I could install stuff,
17:08 - I can deactivate it, so you
could say I could deactivate
17:10 - this and I can reactivate my
other virtual environment.
17:15 - I can deactivate that, I can
go back and activate this one.
17:19 - I can install packages for
this one, and deactivate
17:22 - and go back to the other
one, I could alias this one.
17:23 - All of the possibilities that
I have shown you are here.
17:26 - So, to recap, if you are using Python,
17:29 - and by the way, my most
recent, it's a guest tutorial
17:31 - from Yining, for training
a machine learning model
17:34 - to do style transfer, you
can go watch those video
17:37 - tutorials, this is a way
you can set up Python
17:39 - to run locally, training
your model on your computer.
17:43 - So, to recap, Virtual
Environment is a way of creating
17:47 - a sandboxed Python
environment on your computer
17:50 - that is not affected by
anything else and is just
17:53 - a folder anywhere on your
computer with all of the,
17:56 - everything Python and all the
dependencies you're using.
17:59 - In order to create a virtual environment,
18:01 - you have to have Python
installed in the first place.
18:02 - So I recommend you install
Python 3 on your computer.
18:05 - I showed you some steps
for doing that with brew,
18:07 - but if you're on Windows or
Lenix, there's other ways
18:08 - to install Python 3, and
actually, built in to Python 3
18:11 - is the virtual environment
command, so you can just say,
18:14 - python 3 dash m v environment,
venv, and then name
18:18 - your virtual environment,
activate it, deactivate it,
18:20 - and enjoy your Python life forever, okay?
18:23 - So, I look forward to hearing
what you think (laughs)
18:28 - I'm really not a Python
expert, you might have noticed.
18:30 - I barely use it, so
hopefully this was helpful.
18:33 - I'm sure some Python experts
out there will tell me
18:36 - all the things I could do
better, or different ways.
18:38 - I look forward to hearing
about those too, okay?
18:40 - Goodbye, and I hope you enjoyed
18:41 - this extra bonus workflow video.
18:44 - (upbeat music)

Cleaned transcript:

(train whistling) Shocking development! I am adding another workflow video, because every once in a while I have to download a Python script and run it. And I do use lots of different kinds of Python development tools from time to time. Jupyter Notebook is a wonderful way of running Python code in an interactive way right in the browser, and there's all sorts of other things you can do too, different ways to work with Python, but I'm going to show you one little thing that I tend to use, which is that I often need to run some Python script, to process some data, or train a model or something that I'm going to eventually come bring and use in JavaScript. And so the tool that I have kind of landed on, that I like to use, is something called Virtualenv. And Virtualenv, Virtual Environment is a tool to create isolated Python environments. And this is useful because I can kind of contain all the Python version, and all the packages and all the dependencies for one thing that I'm trying to do within one workspace. And again, there's Docker, and there's so many other things you could use, so I'm just going to show you Virtual Environment, 'cause it solved a lot of problems for me when I get totally lost in my Python installation on my computer. Now, one thing, to get started with this, you will need to have Python on your computer and PIP on your computer, so those are two prerequisites. Installing Python, installing PIP, if you're on a Mac, it most likely came with some version of one or the other. And the other, so you're kind of in good shape, and that's what I am here, so the first thing I want to do is, I actually just want to say pip install, PIP is Python installation packager. Ha, that's not what it stands for at all. But it's your package manager for Python. Sometimes you'll say PIP three if using Python 3. pip install virtualenv, Virtual Environment. So I want to install that. Truth of the matter is, I've already installed it, so there it is, and you can see it's kind of part of my default Mac OS Python installation, so maybe you're using Miniconda or Anaconda or some other but you want to first start with Virtual Environment. Now, once I have that installed, I need to find a place on my computer to set up my Python environment. And it could be anywhere, I could put it on my desktop. It's crazy, I am a crazy person who sometimes keeps entire Python environments on my desktop. Watch, I'm going to do that right now, cd desktop, I'm going to look on the desktop, there's nothing there, there's like a folder called website, there's processing dot app, and then, I'm going to go here and, user guide is probably what I want to take a look at. I want to create a virtual environment. This is the, this is really the only command, well, this is one command, you don't even need to memorize it because we can look it up. Virtual Environment ENV, now, this is not meant for you to just have to type, capital E, capital N, capital V, that is a placeholder for the name of this Python workspace that you want to use. So I'm going to grab this, I'm just going to say, And I'm going to say, virtualenv and I'm going to call this coding train demo, coding train dash demo, that's going to be the name of this workspace, and it is doing all sorts of stuff to set it up, and blah blah blah. Now I can navigate to the desktop and look, there it is, right there, I've got processing, website directory and coding train demo, and an entire Python installation, with everything I might ever possibly need. Now, it's Python 2.7, so, I'm going to at some point have to examine how can I get a different version of Python if I want with Virtual Environment, which shouldn't be a problem, but let's just push forward. So once I've installed a virtual environment, once I've created a virtual environment, I need to activate it, so the way to activate it is by running this command, source bin activate. So in other words, inside of here, inside of bin activate, this shell script will turn on this virtual environment. So right now, you can see, if I'm in the desktop, and I just say which python, it's pointing to user bin python, the default MAC OS Python installation, and if I say, python dash dash version, we're going to see, I'm using Python 2.7.10 which I, admittedly, is a very old version of Python, so I'm going to, by the end of this video, I'm going to be using Python 3 (laughs) So now, if I were to say source, coding train, oops, coding train demo, (laughs). Oh no, I've got to tab through all of this 'cause I'm a lunatic. Coding train demo bin activate. All of a sudden you can see, look at this, this little note, in my terminal window, in my console, is letting me know that coding train dash demo is activated, so if I were to now say, which python, you can see this is the one it's using. Users coding train desktop coding train demo bin python. Now again, do I really want to put this stuff on the desktop, probably not, but I can move it around. Everything to have to do with this version of Python is running right there, if I can say, I can say python dash dash version, and it's still 2.7.10 but now let's say I want to install TensorFlow. If I say pip install tensorflow (singing) ♪ PIP install TensorFlow dance ♪ And it's finished, oh, and it's installing some other dependencies (laughs), it's going to take forever. Why did I pick this example? (train whistling) (singing) It's going to speed this up, ah, okay, it's done! Alright, so it finished installing TensorFlow, and if I'm just going to run Python right now. I can say, import tensorflow just to see and I get no error, meaning TensorFlow is properly installed for this environment, and how do I get out of this? Control C, no, exit, something like that, okay. Now, if I were to go to a new tab, right, look, coding train is not activated, I'm in a different Python. I'm not in my virtual environment. If I were to say python, and I were to say import tensorflow it has no idea what that is, but I can say source I got to go to coding train bin activate and now, now that workspace is activated so I can install a whole lot of packages and they are all here coding train demo, lib, Python 2.7 and sitepackages and we can see, aha, look, these are all the things that were installed, including TensorFlow. So everything is contained within this one directory and I'm working with it here right now. Alright, so now, what if I want to create a virtual environment with a different version of Python? So first what I want to do to make a new virtual environment is I want to deactivate the one that's going. So I'm just going to write deactivate and then I can just check where I am, here I am on the desktop, so I want to make a new virtual environment but with Python 3, so I can say virtualenv dash p for the version of Python, Python 3, and I'm going to call it coding train dash 3 (gasp) aaaaahh, Python 3 does not exist, so the problem is Virtual Environment, it's not magically creating a workspace in Python out of thin air, it's actually taking it from the existing default installation of Python, so I actually have to have Python 3 installed on this computer to be able to make a virtual environment with Python 3, so there's so many different ways you could install Python 3. I kind of like to avoid using this tool called HomeBrew, which is a package manager for installing Unix utilities, it's written in Ruby on a Mac, but the official Python docs say that's the correct way to install it, so let's do that, so I'm going to grab this. I'm going to install HomeBrew, which I probably, let's see, do I have brew installed? No, I do not, so let's install that. Install this thing called HomeBrew, and I'm going to enter in my password, and I'm going to enter it in again, and I'm going to try a different password, there we go. So this is going to install for a little while. (electric music) (bell ring) Oh, it finished, okay. So I've got HomeBrew, looks like it was installed properly. That's great, so now I'm going to, I think the path, let's see if the path, so remember, if I'm going to type brew, ah, it's already there, great, so brew got added to my path already, and remember if you've been following my workflow videos, I'm not looking in the dot profile, I'm looking in the settings file, it's like dot shrc, zshrc, that's my, so let's look at that. I can say, I can open code dot zshrc just so we can always have a look at this file and we can see, ah, so it probably, HomeBrew was just part of the main path so it looks like we're okay, alright. So now, I can go and try to install Python 3. Brew install python, we'll see what happens. Like that, and now we're going to have to wait a little while again. (electric music) (bell ring) Okay, so, great. So that's done, now, if I say which python user bin python, which python3 user local bin python3, so I have now have Python 3 installed on this computer, and I can, and let me just say python dash version, oh, no no, sorry, dash dash version, (laughs) shoot, python dash dash version, and then python3 dash dash version, great. So look, I have both versions of Python on my computer. Now, here we go, remember that command that I was trying to type earlier? Virtual environment dash p python3 coding train 3. Here we go, and going to set up my virtual environment. I'm going to say source, coding train, oops. Coding train dash 3 bin activate. Now which python, bin python, python dash dash version. Python 3, so in this case, right, let me just show you that again, Python, the word Python, is tied to Python 3.7 When I'm not in a virtual environment, I need to specify Python, which is the original Python that came with the computer, an old version, 2.7, or Python 3, which is the new version which I just installed, but since I created the virtual environment with cloning Python 3, the keyword Python is tied to that one and I can once again do things like pip install numpy. Let's pick something that hopefully won't take as long. NumPy is a math library for Python that's used for matrix math and sorts of other things. It installed that, if I do, if I say python import numpy, we can see, I'm just sort of checking, it's working. I'm going to exit from here, I'm going to deactivate and I'm going to say python3 import numpy. Oops, I can't spell, import numpy, not there, okay? So we can see, these workspaces, one is Python 2.7 with TensorFlow and one is Python 3 with NumPy installed and I can completely treat these separately. I can, and they're just sitting here on the desktop, which is a very weird place to have them, but if I decide, you know what, this whole workspace is worthless, I'm just going to delete it, and it's gone. Okay, what are some other things I want to show you? So one thing is, you're going to find it hard, you're going to, this is going to happen to you if you're using Virtual Environment, you're going to forget to activate it, and you're going to start doing stuff and running Python scripts and you're like, why is it not working? Well, so one thing is it's helpful to have that reminder. Again, I want to say a few things, one is, I don't want to have to type this every single time. Maybe there's a way I can create a quick alias to that environment, and in fact there is. So I'm going to go back to my zshrc, that's the equivalent of the bash profile, this is where are of the, shell settings are, for the, when you start up my shell. So I'm going to go to that, I have it open in Visual Studio code and I can just create an alias by saying something like So, I'm going to do an alias for my virtual environment, and I'm going to say, alias coding ct three, like just quick ct3 is my alias for Python 3 and then I can say, I put in quotes, source activate and then I need the full path, so I need to say users, actually I might be able to do this, home. Right, home, desktop, I don't know (laughs) Let's go to here and say, let's just use this. There's probably a way to use an environment variable, but basically what I'm trying to do is do this. Users coding train desktop, and again, you probably don't want to put your virtual environment on the desktop (laughs). Coding train 3 bin activate Actually, scratch that, before I go to the shell, this is never going to work because I forgot something very important, I have to actually set this alias equal to that command, so if I put an equals here, then I go back to the shell, I should be able. Now, if I just type ct3, it's not going to know that command. I could restart iTerm and it would probably know it, but I can also just refresh the shell by saying, source dot zshrc and now I should be able to type ct3, ahh, oh, no such file directory activate. So at least it was looking for that command, it ran that command, why did it not? Oh, I don't know what I'm, I don't know why there's an extra activate here, this is what it should be. Source, the full path, to bin activate. Okay, save, update, and there we go. So that activates it and then I can say, deactivate, and ct3, there we go, now something you might want to do, although you have to be careful about this, is what if I actually just want to automatically, every time I open a new shell, I just want to activate my virtual environment? So in fact, one thing I could do is, once I have this alias, I could actually just say, hey, the last thing that you do, after all the setup happens, is just, I'm going to go down to the bottom, there's tons of stuff commented out. Just run that alias, ct3, so now, if I quit iTerm, quit, and I just restart it. You're going to see, hey look, coding train 3 is activated. A new window, coding train 3 is activated. A new tab, coding train 3 is activated. So coding train 3, that virtual environment, would be auto activated every time. Typically, this is not what I do, I'm sort of, like to turn it on and off, now you can see it's not there, but I can just type in my alias, and I'm running my virtual environment, alright. So this is pretty good, now you can do all of your Python stuff in this environment, and also, it's safe. Any other, as long as you're, if you deactivate it and start running all sorts of other installation stuff, and other Python stuff on your computer, it will not affect that virtual environment. So if you know you need to have exactly this configuration and stuff for this one particular project, you can sandbox it and not have anything else affect it. One more thing I'd like to mention. So I know I started with pip install virtual environment, that's what I was kind of used to, and that's what I've always been using, but it is actually true that once you have Python 3, the whole idea of virtual environments is built in to Python 3 and as of Python 3.6, the way to run, to create a virtual environment just with Python 3, is by saying, so first of all, you have to have Python 3 installed, which I have done as part of this tutorial, but now I can say, python3 dash m and the command I want to run is venv, Virtual Environment, and then, oh actually, and let me be more thoughtful about where I'm putting this. I'm going to go to the documents directory, and then I'm going to say python3 dash m venv and I'm going to call this coding train demo again and I have now created a virtual environment which I can see if I go to the finder. I can see, there it is, coding train demo again. There is all the Python stuff, Python 3.7 and now I can activate it by saying, source, coding train, oops, coding dash train demo again, bin activate and now that Python's environment is activated. Just to be sure which Python, yes, in fact it is this one. I could alias this one, I could install stuff, I can deactivate it, so you could say I could deactivate this and I can reactivate my other virtual environment. I can deactivate that, I can go back and activate this one. I can install packages for this one, and deactivate and go back to the other one, I could alias this one. All of the possibilities that I have shown you are here. So, to recap, if you are using Python, and by the way, my most recent, it's a guest tutorial from Yining, for training a machine learning model to do style transfer, you can go watch those video tutorials, this is a way you can set up Python to run locally, training your model on your computer. So, to recap, Virtual Environment is a way of creating a sandboxed Python environment on your computer that is not affected by anything else and is just a folder anywhere on your computer with all of the, everything Python and all the dependencies you're using. In order to create a virtual environment, you have to have Python installed in the first place. So I recommend you install Python 3 on your computer. I showed you some steps for doing that with brew, but if you're on Windows or Lenix, there's other ways to install Python 3, and actually, built in to Python 3 is the virtual environment command, so you can just say, python 3 dash m v environment, venv, and then name your virtual environment, activate it, deactivate it, and enjoy your Python life forever, okay? So, I look forward to hearing what you think (laughs) I'm really not a Python expert, you might have noticed. I barely use it, so hopefully this was helpful. I'm sure some Python experts out there will tell me all the things I could do better, or different ways. I look forward to hearing about those too, okay? Goodbye, and I hope you enjoyed this extra bonus workflow video. (upbeat music)
