With timestamps:

00:01 - hi
00:03 - a mouse joint a mouse joint in box2d
00:05 - yeah a mouse joint this video we're
00:07 - gonna talk about a mouse joint now I
00:10 - said Mouse joint like five times because
00:12 - really I have an essential question what
00:15 - what's the missing piece what is a
00:17 - missing piece of the puzzle with box2d
00:18 - how do we interact with objects in the
00:22 - box2d world what if we want to click our
00:24 - mouse on that object and move it around
00:26 - how do we do that so if you just kind of
00:29 - found yourself wandering through the
00:30 - internet one day and you were wading
00:32 - through the box2d documentation you
00:34 - would figure out that you can actually
00:35 - say something like this body dot set
00:38 - transform and it has some arguments to
00:44 - location in an angle so you can always
00:46 - manually set hey I want this body to be
00:49 - over here and I want it to be at this
00:51 - angle and if you had the mouse location
00:54 - you could say set at the mouse location
00:55 - set at the mask location set at the mass
00:56 - location we do those all the time in
00:58 - processing we say rect Mouse X comma
01:01 - Mouse Y but let's think for a moment
01:04 - what that might mean in terms of a world
01:07 - of physics what if I could say to this
01:12 - eraser I don't know why I'm talking to
01:14 - an eraser but what if I could say to
01:16 - this eraser set your location over here
01:18 - instantly it's essentially teleportation
01:22 - we'll be right over here instantly now
01:24 - of course I had to move it continuously
01:26 - over here because this is the real world
01:28 - a continuous time and space continuum
01:31 - place we need to we need to live up to
01:34 - those real-world principles in box2d
01:36 - we cannot just the physics will break
01:38 - and we start to teleport things around
01:40 - the screen however there is something we
01:42 - are allowed to do in box D we could say
01:44 - hey you know I'd like to do to get this
01:45 - from here over there I'm gonna tie a
01:47 - little string to it and I'm gonna tug it
01:49 - along and move it so we can tie strings
01:52 - to our box to the objects and move them
01:54 - around and that's what we're gonna do
01:55 - with the mouse joint the mouse joint is
01:57 - essentially a distance joint between a
01:59 - body here is a body remember a distance
02:03 - joint is between two bodies but instead
02:06 - we're going to make that distance joint
02:09 - a joint between the body and the mouse
02:10 - and as the mouse moves around
02:13 - the body gets tugged around it sounds a
02:17 - little strange but it will make sense to
02:18 - you but here's something kind of
02:20 - revolutionary it's not revolutionary but
02:21 - here's something that's really important
02:23 - in our thinking about this
02:24 - yes we're calling it a mouse joint yes
02:26 - we're demonstrating it with the mouse
02:28 - but you should realize that the mouse is
02:30 - just an X and a Y so if you have some
02:32 - algorithm some systems some set of rules
02:34 - by which you're setting XY locations you
02:37 - can move things around the box2d world
02:39 - according to that algorithm and I would
02:41 - say you know we get to the end of this
02:43 - video and exercise would be don't use
02:45 - the mouse use like a purlin noise random
02:47 - walk to tug something around the screen
02:48 - and see how that works okay so let's now
02:51 - that we've kind of covered why we want
02:54 - the mouse joint and how it works and and
02:56 - there's a by the way there's another
02:57 - solution to moving things around
02:59 - manually in box view which will which
03:01 - I'll mention at the end of this video
03:02 - the mouse joint isn't the only way I
03:04 - want to go over how do we how we write
03:06 - the code and again we've got to follow
03:08 - these steps first step is have two
03:11 - bodies ready to go okay wait just erase
03:15 - that diagram that I want body connected
03:18 - to the mouse well here's one body
03:22 - where's our second body there's no body
03:25 - here we're saying the mouse as a body
03:27 - there's a new concept we're going to
03:29 - introduce here called the ground body
03:32 - that's weird it's a 2d world is there a
03:35 - ground but you know you can kind of
03:37 - think of it as basically what we're
03:38 - doing is we're if the wall is the screen
03:40 - and that is the body we're sort of
03:42 - attaching it over here and this ground
03:44 - body is going to get a target and the
03:47 - target is the thing that's going to move
03:49 - around so as the moon Mouse moves around
03:51 - we set a new target on the ground and
03:54 - this body actually gets pulled along
03:57 - with that mouse joint hi okay so have
04:04 - two bodies ready to go so now that we've
04:06 - established that we have body 1 the
04:08 - ground body everything else is
04:09 - essentially the same as a distance joint
04:11 - we're gonna call it a mouse joint
04:13 - definition probably if I we're gonna
04:16 - look in the code to see the exact syntax
04:18 - or to configure all the parameters what
04:20 - is the maximum force what is the damping
04:23 - ratio the frequency Hertz the same kinds
04:25 - of
04:26 - bring like parameters we had in the
04:27 - distance joint we're gonna do and then
04:29 - create the joint but here is something a
04:32 - little bit different that we're gonna
04:33 - see in this example so now that we've
04:38 - established this set of steps and we
04:44 - kind of understand what the mouse joint
04:45 - is what is something that's a little bit
04:47 - different another thing in my way
04:50 - what is something that's a little bit
04:52 - different in this example in our main
04:55 - program when we press the mouse we want
05:01 - to create the joint so you're gonna see
05:04 - void mousepressed here is where we're
05:09 - gonna create the joint and then in void
05:16 - Mouse released void Mouse release and I
05:23 - hope this is visible we're going to
05:25 - destroy the joint so this is kind of
05:29 - interesting about this program instead
05:31 - of having this kind of permanent joint
05:32 - that's always there we didn't have to do
05:34 - this was distance joints we just chose
05:36 - to do it that way in our example we're
05:37 - gonna do things as soon as we click the
05:39 - mouse boom that joints gonna exist and
05:41 - we move it around we let go of the mouse
05:42 - boom that joint is gone this is gonna
05:44 - allow us to do things like click the
05:45 - mouse drag release and toss something
05:48 - across the screen as well so there's a
05:50 - lot of possibilities here but if we look
05:52 - at the code that's very important to
05:53 - understand how it's working with these
05:55 - events create the joint destroy the
05:57 - joint in draw write draw with an
06:00 - underline but it's in void draw we're
06:02 - always going to be setting the target so
06:06 - as we move that mouse around we're
06:08 - setting that new target so it gets
06:10 - tugged of course we only want to set the
06:12 - target if the mouse is pressed because
06:14 - that's when the mouse has been created
06:16 - but that we're gonna have a logic we're
06:17 - gonna have a spring class the spring
06:21 - class is going to manage the mouse joint
06:23 - definition will have functions to create
06:25 - the joint destroy the joint and set the
06:26 - target so we're gonna have a box class
06:28 - that's the thing that's moving around
06:30 - we're gonna have a spring class to
06:32 - manage that mouse joint and that spring
06:34 - is going to sometimes exist and
06:35 - sometimes not exist it's going to be
06:36 - just made and destroyed on the fly so
06:39 - I think I've kind of talked through how
06:41 - this example works let's actually go and
06:43 - look at the code and run the example to
06:45 - be very exciting press this button and
06:49 - here I am okay
06:50 - so first let's just run this example and
06:54 - we can see look we have this box object
06:56 - said it's in a box of the world and it's
06:58 - sort of responding to gravity and it's
06:59 - falling now when I click the mouse on it
07:01 - you can see I'm a label tugging I'm
07:04 - tugging it around and you can see
07:05 - actually as I move the mouse it you can
07:08 - see there's a little joint there it
07:09 - takes a moment but it kind of catches up
07:11 - to me now of course I don't have to draw
07:13 - that line I'm drawing that line just to
07:15 - demonstrate that that that that joint is
07:17 - there but if I want to make it look more
07:18 - like I'm just moving it around the
07:20 - screen with the mouse I don't have to
07:21 - draw that joint so you can see this is
07:23 - me now moving this object around with
07:24 - the mouse and I can toss it up I can try
07:27 - to catch it I don't know why I'm doing
07:29 - all this stuff in this video but it's
07:30 - kind of addictive to play with it I
07:32 - can't stop do it on your own time okay
07:34 - so now let's look at the code again
07:36 - remember let's look at the main program
07:39 - here's what I was talking about Mouse
07:42 - release that's where we destroy the
07:44 - joint mousepressed if the box contains
07:47 - that location so we're only creating the
07:49 - joint if we click on it you know this is
07:51 - a you know a choice that we're making we
07:53 - depending on what kind of interaction we
07:54 - want but in this example if we click on
07:57 - it then bind the spring to the box this
08:00 - is really interesting another scenario
08:02 - whoa here's an exercise for you try to
08:05 - create a scenario we have multiple boxes
08:06 - and you can click on any one how would
08:08 - you do this with a loop and an array to
08:10 - test which one are you clicking on which
08:12 - one should that spring get bound to but
08:14 - you can see this is how it's working
08:15 - destroy it when you release make it when
08:17 - you click the mouse and then draw we
08:20 - always update the Springs location with
08:22 - the mouse location so that's the general
08:24 - framework right click the mouse make
08:27 - this make the joint release the mouse
08:29 - just wait wait I'm sort of good click
08:31 - the mouse make the joint move the mouse
08:33 - around tug it around release joint is
08:35 - destroyed but this is all conceptually
08:37 - what we're doing the actual box2d code
08:40 - is deep within that's well not deep but
08:42 - it's in that spring class so we can see
08:44 - these moments right these moments are
08:46 - when we create the joint right that's
08:50 - binding it to that box we make a map
08:53 - joint definition here's this crazy line
08:55 - of code right body a is the ground body
08:59 - that just we're just attaching it to the
09:00 - screen the ground body B is the actual
09:03 - box so instead of a joint between two
09:05 - bodies it is between two bodies but
09:06 - instead of the two bodies away we
09:08 - normally think of it we have one body
09:09 - and then that ground then we set some
09:11 - parameters and we create that joint now
09:15 - the update function which is kind of key
09:18 - is we say ah as long as the joint exists
09:21 - set its target to the mouse location so
09:24 - and notice this function takes generic
09:26 - arguments XY we're passing in Mouse X
09:28 - and mouse Y but we could update it
09:30 - according to you know anything like a
09:31 - purlin noise random walk hint exercise
09:34 - okay so we can see all that these
09:37 - functions are contained within here
09:39 - we're drawing the joint as a line
09:41 - destroy is very very simple I'm sorry
09:44 - I'm kind of like lost here ah destroy is
09:47 - very very simple there's a nice function
09:49 - in the box 2d world class called destroy
09:52 - joint pass it a reference to that mouse
09:54 - joint and then set it equal to null we
09:56 - want to set it equal to null because
09:57 - this is how we're always going to test
09:59 - is it active if it's null it's not
10:01 - active if it's made it is active so any
10:04 - time in our program I want to know is
10:05 - the joint on or off we can just check if
10:07 - it's at all we could have used a boolean
10:09 - variable to keep track of that but
10:10 - keeping track of if an object is null or
10:12 - if it's created is also another way we
10:14 - can do that okay I think that's just
10:16 - about everything about the mouse joint
10:17 - aha
10:18 - but let me mention something so this is
10:20 - one technique we're tugging something
10:22 - around the screen using a mouse joint
10:24 - another technique that you can use is to
10:27 - set an object's type
10:37 - settin objects type - kinematic remember
10:44 - we had a dynamic body that's a body that
10:46 - moves around response to physics we had
10:48 - of static body that's a body that never
10:50 - moves and now we have a kinematic body
10:52 - this is a body that you're allowed to
10:53 - control yourself manually but you still
10:56 - don't set its location the way you can
10:58 - control it is by assigning it a velocity
11:01 - by assigning it a velocity so let's say
11:04 - this is the box and you know this is
11:07 - where you want it to be on the screen
11:08 - you could compute a vector which is the
11:12 - difference between its current location
11:14 - and that location on the screen and set
11:16 - that objects that velocity as that
11:18 - vector so I'm not kind of going into the
11:20 - details of this I personally like the
11:22 - sort of mouse joint technique it to move
11:24 - something around it has a very kind of
11:26 - like real feel and there's some
11:27 - limitations to the things that the
11:28 - kinematic body can do I think it can't
11:30 - collide with other kinematic bodies
11:32 - there's something like that it should
11:33 - probably look that up I will clarify
11:35 - somewhere of somehow someday but but
11:39 - this is one technique and if you're
11:40 - looking into this technique if I just go
11:43 - quickly to the examples and go back here
11:48 - kinam I believe kinematic test ice
11:51 - kinematic tested in a github repository
11:53 - I guess I should work on this one is one
11:55 - you could look at let's run this and
11:57 - hope it works you can see I yeah this is
11:59 - me moving it around and you can see I'm
12:01 - able to move this around manually with
12:04 - the mouse and it's very similar to and
12:06 - it fell because it's responding to
12:09 - gravity when I let go or it got bumped
12:10 - okay so so you can see that I don't know
12:13 - what I'm doing here I will kind of lost
12:15 - my train of thought but I wanted to just
12:17 - show you where now edit edit edit this
12:20 - make this video veteran shorter here
12:22 - it's where the body type is set to be
12:24 - kinematic so that's something you could
12:26 - take a look at okay so what I would
12:28 - suggest is couple things one try to have
12:32 - the box move around according to rules
12:33 - that's different than the mouse using
12:35 - the mouse joint another thing just add
12:37 - more stuff into the world can you do
12:38 - something where you're kind of moving
12:40 - something around to break things apart
12:42 - knock things around you can probably
12:44 - create some type of you can start to
12:46 - thinking of how you might create a game
12:47 - if there's some form of interaction with
12:49 - keyboard or mouse of
12:50 - acting the behavior of one of the bodies
12:52 - and by the way in the next video we're
12:54 - going to look at another way of
12:55 - affecting things manually by applying
12:57 - forces to the objects of Bach City
12:59 - all that time we spent figuring out how
13:01 - to make attraction forces friction
13:03 - forces and P vectors and apply force
13:06 - function we can do that with Bach city
13:08 - also so if you're excited about that
13:09 - like I'm excited about that that'll be
13:11 - in the next video great this was
13:13 - recording was on so I made this video it
13:15 - was maybe 12 minutes long and I'm gonna
13:17 - hit stop now

Cleaned transcript:

hi a mouse joint a mouse joint in box2d yeah a mouse joint this video we're gonna talk about a mouse joint now I said Mouse joint like five times because really I have an essential question what what's the missing piece what is a missing piece of the puzzle with box2d how do we interact with objects in the box2d world what if we want to click our mouse on that object and move it around how do we do that so if you just kind of found yourself wandering through the internet one day and you were wading through the box2d documentation you would figure out that you can actually say something like this body dot set transform and it has some arguments to location in an angle so you can always manually set hey I want this body to be over here and I want it to be at this angle and if you had the mouse location you could say set at the mouse location set at the mask location set at the mass location we do those all the time in processing we say rect Mouse X comma Mouse Y but let's think for a moment what that might mean in terms of a world of physics what if I could say to this eraser I don't know why I'm talking to an eraser but what if I could say to this eraser set your location over here instantly it's essentially teleportation we'll be right over here instantly now of course I had to move it continuously over here because this is the real world a continuous time and space continuum place we need to we need to live up to those realworld principles in box2d we cannot just the physics will break and we start to teleport things around the screen however there is something we are allowed to do in box D we could say hey you know I'd like to do to get this from here over there I'm gonna tie a little string to it and I'm gonna tug it along and move it so we can tie strings to our box to the objects and move them around and that's what we're gonna do with the mouse joint the mouse joint is essentially a distance joint between a body here is a body remember a distance joint is between two bodies but instead we're going to make that distance joint a joint between the body and the mouse and as the mouse moves around the body gets tugged around it sounds a little strange but it will make sense to you but here's something kind of revolutionary it's not revolutionary but here's something that's really important in our thinking about this yes we're calling it a mouse joint yes we're demonstrating it with the mouse but you should realize that the mouse is just an X and a Y so if you have some algorithm some systems some set of rules by which you're setting XY locations you can move things around the box2d world according to that algorithm and I would say you know we get to the end of this video and exercise would be don't use the mouse use like a purlin noise random walk to tug something around the screen and see how that works okay so let's now that we've kind of covered why we want the mouse joint and how it works and and there's a by the way there's another solution to moving things around manually in box view which will which I'll mention at the end of this video the mouse joint isn't the only way I want to go over how do we how we write the code and again we've got to follow these steps first step is have two bodies ready to go okay wait just erase that diagram that I want body connected to the mouse well here's one body where's our second body there's no body here we're saying the mouse as a body there's a new concept we're going to introduce here called the ground body that's weird it's a 2d world is there a ground but you know you can kind of think of it as basically what we're doing is we're if the wall is the screen and that is the body we're sort of attaching it over here and this ground body is going to get a target and the target is the thing that's going to move around so as the moon Mouse moves around we set a new target on the ground and this body actually gets pulled along with that mouse joint hi okay so have two bodies ready to go so now that we've established that we have body 1 the ground body everything else is essentially the same as a distance joint we're gonna call it a mouse joint definition probably if I we're gonna look in the code to see the exact syntax or to configure all the parameters what is the maximum force what is the damping ratio the frequency Hertz the same kinds of bring like parameters we had in the distance joint we're gonna do and then create the joint but here is something a little bit different that we're gonna see in this example so now that we've established this set of steps and we kind of understand what the mouse joint is what is something that's a little bit different another thing in my way what is something that's a little bit different in this example in our main program when we press the mouse we want to create the joint so you're gonna see void mousepressed here is where we're gonna create the joint and then in void Mouse released void Mouse release and I hope this is visible we're going to destroy the joint so this is kind of interesting about this program instead of having this kind of permanent joint that's always there we didn't have to do this was distance joints we just chose to do it that way in our example we're gonna do things as soon as we click the mouse boom that joints gonna exist and we move it around we let go of the mouse boom that joint is gone this is gonna allow us to do things like click the mouse drag release and toss something across the screen as well so there's a lot of possibilities here but if we look at the code that's very important to understand how it's working with these events create the joint destroy the joint in draw write draw with an underline but it's in void draw we're always going to be setting the target so as we move that mouse around we're setting that new target so it gets tugged of course we only want to set the target if the mouse is pressed because that's when the mouse has been created but that we're gonna have a logic we're gonna have a spring class the spring class is going to manage the mouse joint definition will have functions to create the joint destroy the joint and set the target so we're gonna have a box class that's the thing that's moving around we're gonna have a spring class to manage that mouse joint and that spring is going to sometimes exist and sometimes not exist it's going to be just made and destroyed on the fly so I think I've kind of talked through how this example works let's actually go and look at the code and run the example to be very exciting press this button and here I am okay so first let's just run this example and we can see look we have this box object said it's in a box of the world and it's sort of responding to gravity and it's falling now when I click the mouse on it you can see I'm a label tugging I'm tugging it around and you can see actually as I move the mouse it you can see there's a little joint there it takes a moment but it kind of catches up to me now of course I don't have to draw that line I'm drawing that line just to demonstrate that that that that joint is there but if I want to make it look more like I'm just moving it around the screen with the mouse I don't have to draw that joint so you can see this is me now moving this object around with the mouse and I can toss it up I can try to catch it I don't know why I'm doing all this stuff in this video but it's kind of addictive to play with it I can't stop do it on your own time okay so now let's look at the code again remember let's look at the main program here's what I was talking about Mouse release that's where we destroy the joint mousepressed if the box contains that location so we're only creating the joint if we click on it you know this is a you know a choice that we're making we depending on what kind of interaction we want but in this example if we click on it then bind the spring to the box this is really interesting another scenario whoa here's an exercise for you try to create a scenario we have multiple boxes and you can click on any one how would you do this with a loop and an array to test which one are you clicking on which one should that spring get bound to but you can see this is how it's working destroy it when you release make it when you click the mouse and then draw we always update the Springs location with the mouse location so that's the general framework right click the mouse make this make the joint release the mouse just wait wait I'm sort of good click the mouse make the joint move the mouse around tug it around release joint is destroyed but this is all conceptually what we're doing the actual box2d code is deep within that's well not deep but it's in that spring class so we can see these moments right these moments are when we create the joint right that's binding it to that box we make a map joint definition here's this crazy line of code right body a is the ground body that just we're just attaching it to the screen the ground body B is the actual box so instead of a joint between two bodies it is between two bodies but instead of the two bodies away we normally think of it we have one body and then that ground then we set some parameters and we create that joint now the update function which is kind of key is we say ah as long as the joint exists set its target to the mouse location so and notice this function takes generic arguments XY we're passing in Mouse X and mouse Y but we could update it according to you know anything like a purlin noise random walk hint exercise okay so we can see all that these functions are contained within here we're drawing the joint as a line destroy is very very simple I'm sorry I'm kind of like lost here ah destroy is very very simple there's a nice function in the box 2d world class called destroy joint pass it a reference to that mouse joint and then set it equal to null we want to set it equal to null because this is how we're always going to test is it active if it's null it's not active if it's made it is active so any time in our program I want to know is the joint on or off we can just check if it's at all we could have used a boolean variable to keep track of that but keeping track of if an object is null or if it's created is also another way we can do that okay I think that's just about everything about the mouse joint aha but let me mention something so this is one technique we're tugging something around the screen using a mouse joint another technique that you can use is to set an object's type settin objects type kinematic remember we had a dynamic body that's a body that moves around response to physics we had of static body that's a body that never moves and now we have a kinematic body this is a body that you're allowed to control yourself manually but you still don't set its location the way you can control it is by assigning it a velocity by assigning it a velocity so let's say this is the box and you know this is where you want it to be on the screen you could compute a vector which is the difference between its current location and that location on the screen and set that objects that velocity as that vector so I'm not kind of going into the details of this I personally like the sort of mouse joint technique it to move something around it has a very kind of like real feel and there's some limitations to the things that the kinematic body can do I think it can't collide with other kinematic bodies there's something like that it should probably look that up I will clarify somewhere of somehow someday but but this is one technique and if you're looking into this technique if I just go quickly to the examples and go back here kinam I believe kinematic test ice kinematic tested in a github repository I guess I should work on this one is one you could look at let's run this and hope it works you can see I yeah this is me moving it around and you can see I'm able to move this around manually with the mouse and it's very similar to and it fell because it's responding to gravity when I let go or it got bumped okay so so you can see that I don't know what I'm doing here I will kind of lost my train of thought but I wanted to just show you where now edit edit edit this make this video veteran shorter here it's where the body type is set to be kinematic so that's something you could take a look at okay so what I would suggest is couple things one try to have the box move around according to rules that's different than the mouse using the mouse joint another thing just add more stuff into the world can you do something where you're kind of moving something around to break things apart knock things around you can probably create some type of you can start to thinking of how you might create a game if there's some form of interaction with keyboard or mouse of acting the behavior of one of the bodies and by the way in the next video we're going to look at another way of affecting things manually by applying forces to the objects of Bach City all that time we spent figuring out how to make attraction forces friction forces and P vectors and apply force function we can do that with Bach city also so if you're excited about that like I'm excited about that that'll be in the next video great this was recording was on so I made this video it was maybe 12 minutes long and I'm gonna hit stop now
