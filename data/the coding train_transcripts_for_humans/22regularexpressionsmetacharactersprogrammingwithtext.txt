With timestamps:

00:01 - hello welcome to another video about
00:03 - regular
00:04 - Expressions um okay so in this video
00:07 - what I want to do is talk about a whole
00:10 - bunch of specific meta characters that
00:13 - you can use in a regular expression now
00:15 - I should note that there are what's
00:18 - commonly referred to as different
00:19 - flavors of regular Expressions so
00:21 - depending on the context that you're
00:23 - using the regular expression like the
00:24 - atom editor or I'm using a reg
00:26 - expression in my JavaScript program or
00:28 - in my Python program there will be
00:30 - subtle differences in how The Meta
00:33 - charact in what the meta characters are
00:35 - so I'm I'm kind of using I'm using for
00:38 - lack of a better uh I'm using the meta
00:41 - characters that work in JavaScript um
00:43 - I'm using the JavaScript
00:45 - flavor I think it might taste a little
00:46 - like blueberries um uh um uh in uh for
00:51 - the these regular expression videos so
00:53 - what I want to do is U just sort of talk
00:55 - through more in order in sequence um
00:57 - what some meta characters are so just to
00:59 - remind you we have this idea of literal
01:03 - characters like I want to match
01:05 - literally the character a and we have
01:07 - this idea of meta characters I want to
01:10 - match a a a any character of this kind
01:14 - so to speak so um I'm going to in this
01:16 - particular video there's more than just
01:18 - this and I'm not obviously not going to
01:19 - get to everything completely I want to
01:21 - look at um Single Character meta
01:25 - characters something called a quantifier
01:27 - and something called a position and I've
01:29 - just realized I can't remember which is
01:31 - which so I'm going I'm going to say what
01:33 - some of these are and then I'm going to
01:34 - quickly check the chat that's going on
01:35 - because it's being recorded live even
01:37 - though you might not be watching it live
01:38 - and I'll see if I got it right but I
01:39 - might get these wrong I might get a lot
01:40 - of stuff wrong but anyway and I
01:42 - obviously won't list every single meta
01:44 - character but I will provide you in the
01:45 - in the video description with links to
01:47 - where you can find more stuff out about
01:48 - of this so we saw by the way that slash
01:51 - D is a meta character that indicates any
01:54 - digit any value any character 0 through
01:56 - n okay slash back SL D and so one thing
02:00 - you'll notice is some meta characters
02:02 - are indicated because just D is a
02:04 - literal character so just D is a literal
02:06 - character backs slash is uh indicating
02:09 - that I want the meta character D for
02:11 - digit here's another one that's really
02:13 - useful back
02:15 - slw lowercase w that's very important is
02:19 - any character capital A through Z
02:22 - lowercase A through Z and 0 through 9
02:26 - the W stands for word so in essence this
02:29 - is any character that you might find as
02:31 - part of a word any letter or
02:34 - number back SLS any white
02:39 - space What could this match this could
02:42 - match a space a
02:46 - tab a space or a tab probably some other
02:49 - things too anything that's white space
02:51 - I'm not including line break here even
02:53 - though it can match a line break but
02:56 - whether or not a regular expression will
02:57 - match across different lines is a bit
02:59 - bit of a strange thing so yeah um and
03:02 - and involves a a flag a setting that you
03:04 - have to set and how you use a regular
03:06 - expression I'll get to that later when I
03:07 - talk about Flags um what are some other
03:11 - ones uh another meta character that's
03:15 - very key is and I talked about this in
03:18 - the previous video is
03:20 - dot this matches any character
03:23 - whatsoever any
03:26 - character
03:27 - whatsoever I don't know if that is in
03:29 - the technical description of regular
03:31 - Expressions the word whatsoever but I I
03:33 - just want to emphasize it so this is
03:35 - kind of a strange one to use and you've
03:36 - got to be very careful because it's
03:38 - there's this concept that I'll get you
03:39 - later of this greedy regular expression
03:41 - that just it can't so whoa hey I just
03:44 - got like three three pointer of there
03:46 - landed in this little box um it just
03:48 - can't stop eating and matching and
03:50 - matching dot dot dot match everything so
03:53 - okay um all right now an interesting
03:55 - thing about these particular characters
03:57 - SL dw/ s is these are lowercase and if
04:02 - you are and I I guess I'm going to kind
04:04 - of like take up if you if you use SL
04:08 - capital W or slash capital S this means
04:12 - anything that's not a word character
04:14 - anything that's not one of these
04:16 - characters or anything that's not white
04:18 - space and this can be very useful I want
04:20 - to match any nonwhite space character so
04:23 - um that's one thing I think I'll mention
04:25 - and I I don't I would assume actually I
04:27 - don't know that this I have to check
04:28 - this if you do back capital D is that
04:31 - anything that's not a digit I would
04:32 - think so so that's so these are
04:35 - um um these are I think some key single
04:38 - characters for you to look at let's
04:40 - let's actually go and um come over here
04:42 - and like type some of these in and see
04:44 - what happens um okay so I'm going to
04:48 - type in
04:49 - slw and uh you can see that matches
04:53 - everything what if I just look for uh
04:56 - three any sequence of three characters
04:58 - in a row and you can see sort of strange
05:00 - thing that's going on here because it
05:02 - matched the th H it doesn't match the
05:05 - hes because H is already part of this
05:08 - match if you want to match both of those
05:11 - you're going to have to do some other
05:13 - kind of acrobatics to do that but you'll
05:14 - notice how how that sort of works it
05:16 - matches the S so but not the OM but I
05:19 - could add a fourth one and we could see
05:21 - hey here are all um um here are any
05:25 - sequence of four word characters in a
05:27 - row uh here is a digit followed by a
05:30 - word character followed by a digit
05:31 - followed by a word character and by the
05:33 - way that matches these but it would also
05:36 - match if I put this in here or if I put
05:40 - this in here you can see how we can use
05:42 - these Single Character meta characters
05:45 - to make generic matches now there isn't
05:47 - a ton that we can do just by knowing
05:50 - these but I would like to just see how
05:51 - the white space works very briefly uh
05:54 - here is me matching all Whit space you
05:56 - can see I've matched all Whit space or
05:58 - this is matching only two white space in
06:00 - a row and you can see oh no I I think I
06:03 - put two spaces after my
06:08 - period I can't do it oh I fell sound
06:12 - effect horrible failure there okay I'm
06:15 - gonna uh so now by the way I found
06:18 - anywhere in my this is this is how you
06:20 - by the way can get rid of all of your
06:21 - two spaces after a period which I
06:24 - believe I really should be putting one
06:25 - space after a period according to
06:28 - something I saw on the internet at at
06:29 - one time anyway okay so let's come back
06:31 - over here and you can see that um
06:33 - something that I've been doing a lot is
06:35 - I've been saying I want to match three
06:37 - word characters in a row or three digit
06:40 - characters in a row so this by the way
06:42 - is where quantifiers come in so
06:44 - quantifiers are a meta characters that
06:46 - modify the previous character in the
06:49 - regular expression and say how many of
06:51 - those things you want to match in a row
06:53 - we saw that asterisk or star is zero or
06:58 - more
07:00 - uh plus is one or more so at least
07:05 - one uh question mark is zero or one so
07:10 - is like optional and then you can also
07:12 - use curly
07:14 - brackets with minimum comma maximum or
07:18 - just a single number n so these are at
07:21 - least in my head I might be missing one
07:23 - these are the basic quantifiers so we
07:25 - can match single characters and we can
07:27 - quantify those single characters how
07:29 - many in a row to match so let's go back
07:31 - over here and come back to this and I
07:33 - can say for example I want to find all
07:36 - five letter words see this regular
07:38 - expression I want to find all five
07:40 - letter words in my text and you can see
07:43 - there we go now this didn't really work
07:46 - why because it matched this because it's
07:49 - just matching five word characters in a
07:50 - row so how could I say five letter words
07:53 - well one way I could do it is all five
07:55 - letter word all sequen of of of five
07:58 - characters follow followed by wh space
08:01 - now you can see ah I got this because
08:04 - it's followed by wh space which is at
08:06 - the end that's no good so I could also
08:08 - say it has to be white space followed by
08:11 - five letters followed by white space Oh
08:13 - but these doesn't have white space on
08:15 - the beginning so then I'm I'm leading to
08:17 - something that I'm going to show you um
08:18 - there's there's some there's there's a
08:20 - really nice way you can look for uh uh
08:23 - words of certain length or words that
08:24 - match certain properties but I can see
08:26 - here how I can this is a way of matching
08:29 - whoops
08:32 - one or more word characters in a row um
08:35 - we can see how I could say uh a word
08:38 - character followed by one or more
08:41 - digits uh which again you can see what
08:44 - that matches um so these are ways that
08:47 - you can quantify and let's let's um let
08:50 - me show you uh let's let's let's say I
08:53 - want to match the word color so um uh
08:57 - the
08:58 - colors
08:59 - of the
09:01 - rainbow have many colors and the rainbow
09:06 - does not have a single color so
09:11 - uh so look this is now I want to match
09:14 - anytime the word color spelled c o l o
09:17 - Ur or colors
09:20 - or anytime the word color or colors
09:23 - appears color singular or plural a
09:25 - spelled o or spelled ouu let's look at
09:27 - how I would do that so if my expression
09:29 - is just color you can see what I match
09:32 - so I could say color with an optional U
09:36 - right like that and with an optional s
09:40 - so look at this this regular expression
09:42 - is match C literally C followed by zero
09:45 - followed by L followed by not zero I
09:48 - couldn't I could have it be also or zero
09:50 - C followed by o followed by L followed
09:52 - by o followed by U optionally followed
09:55 - by R followed by S
09:57 - optionally Okay so you can see here how
10:00 - these quantifiers can be quite useful
10:03 - okay let me come back over here so these
10:05 - are where's my where's my whiteboard
10:07 - marker here it is so these are
10:09 - quantifiers these are ways of indicating
10:11 - how many of a single um character you
10:14 - want to use now position is another kind
10:16 - of meta character which matches um the
10:20 - position of a character in the string
10:22 - itself so for example there is uh carrot
10:27 - which means the beginning
10:29 - of a line I think and dollar sign which
10:33 - means the
10:35 - end and um also um I'm going to put
10:39 - these in position uh meta characters uh
10:42 - SLB which is known as a word
10:46 - boundary so these are position meta
10:49 - characters which can also be incredibly
10:51 - useful let's look at um some scenarios
10:55 - where these can be
10:57 - useful oop I rang the bell okay um so
11:02 - let me come back over here and I'm going
11:04 - to type some text for
11:06 - you um this is a sequence of words color
11:13 - um Hello
11:17 - Goodbye go so what I want to match
11:25 - um right
11:27 - uh
11:31 - so what I want to do is match all the
11:33 - words that are at the beginning of a
11:35 - line so for example if I do slw plus you
11:39 - can see how I'm matching all the words
11:42 - here this is something is about a blah
11:44 - sequence of words hello and goodbye what
11:46 - if however I
11:49 - say hat now you can see I'm saying that
11:53 - hat is a position let me let me show you
11:54 - that again hat carrot something like
11:56 - that that is a position
11:59 - uh a a meta character meaning the
12:02 - beginning of a line followed by one or
12:04 - more word characters so look what I've
12:06 - been able to match now now what I could
12:08 - do is also put end of a line now I
12:11 - didn't get anything what if I take out
12:13 - the carrot you can see I'm getting all
12:15 - the words that are at the end of the
12:16 - line notice how I don't get rainbow
12:18 - because of the punctuation mark so I'd
12:20 - have to do something about that if I
12:21 - wanted to match that but what if I
12:23 - wanted to match
12:27 - only single words lines that have one
12:31 - word so now I could say
12:34 - match carrot followed by any sequence of
12:38 - word characters followed by end end of
12:42 - line so you can see now that regular
12:44 - expression matches only words and single
12:46 - because that they're the only lines that
12:48 - start and end with a sequence of word
12:50 - characters so you can see how those
12:51 - position meta characters could be
12:53 - particularly useful depending on what
12:55 - you're doing now another is word bound
12:59 - and remember this problem I was having
13:01 - where okay well this matches all of the
13:06 - um um but what if I want to match sorry
13:09 - what if I want to match only all
13:11 - four-letter words so you can see this
13:13 - isn't exactly working because I'm
13:16 - getting nuu MB numbers is actually a
13:19 - seven-letter word but these are four
13:21 - word characters in a row so something I
13:23 - can do is I can say SLB a word boundary
13:28 - followed by four word characters
13:31 - followed by
13:33 - SLB and so now you can see this is now
13:37 - look what it's getting sum is a
13:39 - four-letter word call is a four-letter
13:41 - word now look at these a period is also
13:44 - in between now now I'm saying this is a
13:46 - position meta character because it's not
13:48 - matching the thing after it it's
13:50 - matching this weird space the space in
13:53 - between the whoa the
13:56 - space the space in between the T in the
13:59 - period it's a position the boundary
14:01 - between a word and so um this is
14:03 - something that different implementations
14:05 - will do slightly differently depending
14:06 - on what environment or context you're in
14:08 - but it really means you know arguably
14:10 - the space in between a a word and it
14:13 - where it ends so you can see if I change
14:15 - this to um let's see anything between
14:17 - four comma 6 now I've matched all words
14:21 - between the uh between four and six
14:23 - characters so hopefully this runs you
14:25 - through um this runs you through uh the
14:30 - basics of what kinds of Single Character
14:32 - meta characters I can match a digit any
14:35 - letter or number I can match any white
14:37 - space I can match any character you
14:38 - might be asking yourself what if I want
14:40 - to match only letters so we need
14:42 - something called a character class for
14:43 - that which I'm going to show you in a
14:44 - different video uh quantifiers which
14:47 - which modify how many of these in a row
14:49 - and position like the beginning of a
14:51 - line the end of a line or the space
14:54 - between a character and another
14:56 - character at the beginning or end of a
14:57 - word uh and so if I'm continuing with
15:00 - this thread let's see now if we can
15:02 - match phone numbers I want to match
15:05 - slash d three digits followed by a dash
15:10 - followed by three digits followed by a
15:12 - dash followed by four digits uh
15:16 - whoops so I'm starting now this is now
15:18 - my regular expression on the way to
15:20 - matching all phone numbers and you can
15:21 - see what only matched that one why did
15:24 - it only match that one because I'm
15:25 - saying it has to be a dash how would I
15:28 - say a dash or a period and we need
15:31 - another concept called character classes
15:33 - for that which I also just mentioned
15:35 - which I'll cover in the next uh video
15:37 - okay thanks for uh tuning in and
15:39 - hopefully this is helping you get a
15:40 - sense of regular expressions and I'll
15:42 - see you maybe in the next
15:47 - [Music]
15:52 - video

Cleaned transcript:

hello welcome to another video about regular Expressions um okay so in this video what I want to do is talk about a whole bunch of specific meta characters that you can use in a regular expression now I should note that there are what's commonly referred to as different flavors of regular Expressions so depending on the context that you're using the regular expression like the atom editor or I'm using a reg expression in my JavaScript program or in my Python program there will be subtle differences in how The Meta charact in what the meta characters are so I'm I'm kind of using I'm using for lack of a better uh I'm using the meta characters that work in JavaScript um I'm using the JavaScript flavor I think it might taste a little like blueberries um uh um uh in uh for the these regular expression videos so what I want to do is U just sort of talk through more in order in sequence um what some meta characters are so just to remind you we have this idea of literal characters like I want to match literally the character a and we have this idea of meta characters I want to match a a a any character of this kind so to speak so um I'm going to in this particular video there's more than just this and I'm not obviously not going to get to everything completely I want to look at um Single Character meta characters something called a quantifier and something called a position and I've just realized I can't remember which is which so I'm going I'm going to say what some of these are and then I'm going to quickly check the chat that's going on because it's being recorded live even though you might not be watching it live and I'll see if I got it right but I might get these wrong I might get a lot of stuff wrong but anyway and I obviously won't list every single meta character but I will provide you in the in the video description with links to where you can find more stuff out about of this so we saw by the way that slash D is a meta character that indicates any digit any value any character 0 through n okay slash back SL D and so one thing you'll notice is some meta characters are indicated because just D is a literal character so just D is a literal character backs slash is uh indicating that I want the meta character D for digit here's another one that's really useful back slw lowercase w that's very important is any character capital A through Z lowercase A through Z and 0 through 9 the W stands for word so in essence this is any character that you might find as part of a word any letter or number back SLS any white space What could this match this could match a space a tab a space or a tab probably some other things too anything that's white space I'm not including line break here even though it can match a line break but whether or not a regular expression will match across different lines is a bit bit of a strange thing so yeah um and and involves a a flag a setting that you have to set and how you use a regular expression I'll get to that later when I talk about Flags um what are some other ones uh another meta character that's very key is and I talked about this in the previous video is dot this matches any character whatsoever any character whatsoever I don't know if that is in the technical description of regular Expressions the word whatsoever but I I just want to emphasize it so this is kind of a strange one to use and you've got to be very careful because it's there's this concept that I'll get you later of this greedy regular expression that just it can't so whoa hey I just got like three three pointer of there landed in this little box um it just can't stop eating and matching and matching dot dot dot match everything so okay um all right now an interesting thing about these particular characters SL dw/ s is these are lowercase and if you are and I I guess I'm going to kind of like take up if you if you use SL capital W or slash capital S this means anything that's not a word character anything that's not one of these characters or anything that's not white space and this can be very useful I want to match any nonwhite space character so um that's one thing I think I'll mention and I I don't I would assume actually I don't know that this I have to check this if you do back capital D is that anything that's not a digit I would think so so that's so these are um um these are I think some key single characters for you to look at let's let's actually go and um come over here and like type some of these in and see what happens um okay so I'm going to type in slw and uh you can see that matches everything what if I just look for uh three any sequence of three characters in a row and you can see sort of strange thing that's going on here because it matched the th H it doesn't match the hes because H is already part of this match if you want to match both of those you're going to have to do some other kind of acrobatics to do that but you'll notice how how that sort of works it matches the S so but not the OM but I could add a fourth one and we could see hey here are all um um here are any sequence of four word characters in a row uh here is a digit followed by a word character followed by a digit followed by a word character and by the way that matches these but it would also match if I put this in here or if I put this in here you can see how we can use these Single Character meta characters to make generic matches now there isn't a ton that we can do just by knowing these but I would like to just see how the white space works very briefly uh here is me matching all Whit space you can see I've matched all Whit space or this is matching only two white space in a row and you can see oh no I I think I put two spaces after my period I can't do it oh I fell sound effect horrible failure there okay I'm gonna uh so now by the way I found anywhere in my this is this is how you by the way can get rid of all of your two spaces after a period which I believe I really should be putting one space after a period according to something I saw on the internet at at one time anyway okay so let's come back over here and you can see that um something that I've been doing a lot is I've been saying I want to match three word characters in a row or three digit characters in a row so this by the way is where quantifiers come in so quantifiers are a meta characters that modify the previous character in the regular expression and say how many of those things you want to match in a row we saw that asterisk or star is zero or more uh plus is one or more so at least one uh question mark is zero or one so is like optional and then you can also use curly brackets with minimum comma maximum or just a single number n so these are at least in my head I might be missing one these are the basic quantifiers so we can match single characters and we can quantify those single characters how many in a row to match so let's go back over here and come back to this and I can say for example I want to find all five letter words see this regular expression I want to find all five letter words in my text and you can see there we go now this didn't really work why because it matched this because it's just matching five word characters in a row so how could I say five letter words well one way I could do it is all five letter word all sequen of of of five characters follow followed by wh space now you can see ah I got this because it's followed by wh space which is at the end that's no good so I could also say it has to be white space followed by five letters followed by white space Oh but these doesn't have white space on the beginning so then I'm I'm leading to something that I'm going to show you um there's there's some there's there's a really nice way you can look for uh uh words of certain length or words that match certain properties but I can see here how I can this is a way of matching whoops one or more word characters in a row um we can see how I could say uh a word character followed by one or more digits uh which again you can see what that matches um so these are ways that you can quantify and let's let's um let me show you uh let's let's let's say I want to match the word color so um uh the colors of the rainbow have many colors and the rainbow does not have a single color so uh so look this is now I want to match anytime the word color spelled c o l o Ur or colors or anytime the word color or colors appears color singular or plural a spelled o or spelled ouu let's look at how I would do that so if my expression is just color you can see what I match so I could say color with an optional U right like that and with an optional s so look at this this regular expression is match C literally C followed by zero followed by L followed by not zero I couldn't I could have it be also or zero C followed by o followed by L followed by o followed by U optionally followed by R followed by S optionally Okay so you can see here how these quantifiers can be quite useful okay let me come back over here so these are where's my where's my whiteboard marker here it is so these are quantifiers these are ways of indicating how many of a single um character you want to use now position is another kind of meta character which matches um the position of a character in the string itself so for example there is uh carrot which means the beginning of a line I think and dollar sign which means the end and um also um I'm going to put these in position uh meta characters uh SLB which is known as a word boundary so these are position meta characters which can also be incredibly useful let's look at um some scenarios where these can be useful oop I rang the bell okay um so let me come back over here and I'm going to type some text for you um this is a sequence of words color um Hello Goodbye go so what I want to match um right uh so what I want to do is match all the words that are at the beginning of a line so for example if I do slw plus you can see how I'm matching all the words here this is something is about a blah sequence of words hello and goodbye what if however I say hat now you can see I'm saying that hat is a position let me let me show you that again hat carrot something like that that is a position uh a a meta character meaning the beginning of a line followed by one or more word characters so look what I've been able to match now now what I could do is also put end of a line now I didn't get anything what if I take out the carrot you can see I'm getting all the words that are at the end of the line notice how I don't get rainbow because of the punctuation mark so I'd have to do something about that if I wanted to match that but what if I wanted to match only single words lines that have one word so now I could say match carrot followed by any sequence of word characters followed by end end of line so you can see now that regular expression matches only words and single because that they're the only lines that start and end with a sequence of word characters so you can see how those position meta characters could be particularly useful depending on what you're doing now another is word bound and remember this problem I was having where okay well this matches all of the um um but what if I want to match sorry what if I want to match only all fourletter words so you can see this isn't exactly working because I'm getting nuu MB numbers is actually a sevenletter word but these are four word characters in a row so something I can do is I can say SLB a word boundary followed by four word characters followed by SLB and so now you can see this is now look what it's getting sum is a fourletter word call is a fourletter word now look at these a period is also in between now now I'm saying this is a position meta character because it's not matching the thing after it it's matching this weird space the space in between the whoa the space the space in between the T in the period it's a position the boundary between a word and so um this is something that different implementations will do slightly differently depending on what environment or context you're in but it really means you know arguably the space in between a a word and it where it ends so you can see if I change this to um let's see anything between four comma 6 now I've matched all words between the uh between four and six characters so hopefully this runs you through um this runs you through uh the basics of what kinds of Single Character meta characters I can match a digit any letter or number I can match any white space I can match any character you might be asking yourself what if I want to match only letters so we need something called a character class for that which I'm going to show you in a different video uh quantifiers which which modify how many of these in a row and position like the beginning of a line the end of a line or the space between a character and another character at the beginning or end of a word uh and so if I'm continuing with this thread let's see now if we can match phone numbers I want to match slash d three digits followed by a dash followed by three digits followed by a dash followed by four digits uh whoops so I'm starting now this is now my regular expression on the way to matching all phone numbers and you can see what only matched that one why did it only match that one because I'm saying it has to be a dash how would I say a dash or a period and we need another concept called character classes for that which I also just mentioned which I'll cover in the next uh video okay thanks for uh tuning in and hopefully this is helping you get a sense of regular expressions and I'll see you maybe in the next video
