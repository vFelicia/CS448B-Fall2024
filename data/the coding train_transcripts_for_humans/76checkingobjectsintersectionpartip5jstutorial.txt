With timestamps:

00:00 - hi so I'm here with another video about
00:03 - things that come up when you've got
00:05 - arrays of objects and those objects are
00:08 - things that you're drawing in the screen
00:09 - so the topic for this video is looking
00:11 - at collision detection dealing with
00:12 - collisions now I should emphasize
00:13 - there's two things that play here
00:15 - there's collision detection meaning are
00:18 - those two circles overlapping which they
00:20 - are right now and then there's collision
00:22 - resolution meaning what do you do when
00:24 - the two things are overlapping do they
00:25 - bounce off of each other and I'm going
00:27 - to really be staying away from the
00:28 - physics side of this I'm just going to
00:30 - when they overlap how to change color
00:31 - when they don't overlap have them not
00:33 - change color but the reason why this is
00:37 - so useful is you know it's not going to
00:39 - be too hard for us to do this with two
00:41 - objects but ultimately you might have a
00:43 - system where every object in the system
00:45 - is checking itself against every other
00:47 - object and I have an example of this
00:49 - this is from a set of examples called
00:52 - from the nature of code
00:53 - this is agent modeling all of these
00:55 - agents are moving around the screen and
00:56 - they obey one simple rule don't bump
00:59 - into your neighbor so every single one
01:01 - of these has to check the position of
01:03 - every single other one and move out of
01:05 - the way if they're too close so you
01:06 - start small with these two objects then
01:09 - build a scenario with lots of objects
01:11 - and look at what we how we can make
01:12 - something happen based on how far apart
01:15 - those objects are so let's first I think
01:19 - a diagram here would be helpful just to
01:21 - sort of look at first how do you
01:22 - determine there you are I mean you're
01:24 - it's a camera looking at me but how do I
01:27 - determine how do you determine if two
01:29 - objects two circles are overlapping or
01:31 - not so in previous video I looked at how
01:32 - do you know if a point is inside a
01:34 - circle this is actually quite a similar
01:36 - thing
01:36 - so if I have circle a and I have circle
01:41 - B and then I have circle a and I have
01:44 - circle B you can plainly see that these
01:48 - two circles are overlapping and these
01:51 - two circles are not overlapping so
01:53 - obviously to a human being visually it's
01:54 - quite obvious so how do you determine
01:56 - that with code well the there's only two
01:59 - key pieces of information that you need
02:01 - you need to know you know X a Y a X B Y
02:07 - B you need to know where is the center
02:10 - of each of these circles and then you
02:11 - need to know
02:12 - how far apart are they what is that
02:15 - distance between them because if the
02:17 - distance between them is greater than
02:19 - the sum of the two radii here's a radius
02:22 - here's a radius this radius plus that
02:24 - radius is only like a line about that
02:26 - long you can see the distance is greater
02:28 - than that it means they are overlapping
02:30 - if that distance right you can see here
02:33 - is shorter than the sum of these two
02:35 - radii you can see that it is because
02:37 - this radius goes all the way to here
02:38 - this radius goes all the way here if
02:40 - it's less than the sum of those two
02:42 - radii then they are in fact overlapping
02:44 - so what we need is a way of calculating
02:48 - the distance between a sermon hat I lost
02:54 - my train of thought there for a second
02:56 - we need is a variable to store the
02:58 - distance using the p5 distance function
03:00 - that I previously referenced between you
03:02 - know X a Y a xB YB now this I this is
03:08 - sort of like math notation I'm mixing it
03:09 - was kind of like code but we'll name our
03:11 - variables in a different way in the
03:12 - actual thing if that distance is less
03:15 - than you know RA plus RB I wanted to
03:21 - make an Arby's joke here but that's just
03:23 - i watch too much TV show I'll skip that
03:25 - nobody knows what I'm talking about
03:26 - anyway if the distance is less than RA
03:29 - plus RB then those two circles are in
03:32 - fact overlapping okay so this is the
03:33 - algorithm that you need I kind of losing
03:36 - my steam here and try to get some energy
03:37 - going and now what I want to do is look
03:40 - at show at least very first how do I put
03:42 - this algorithm in code so one thing that
03:45 - I've done here with this particular
03:47 - example is I've simplified for a bit so
03:49 - starting out this idea I think it's
03:50 - easier for us to look at not at an array
03:52 - of objects but instead simply just two
03:56 - objects so you can see I have object b1
03:59 - an object p2 here's a bubble there's a
04:02 - bubble update both of them display both
04:04 - of them so what do I want to look at
04:06 - first I want to look at the distance
04:08 - between both of those objects so how do
04:10 - I do that
04:11 - I could say give me the distance between
04:13 - what b1 x b1 zwei and b2 x and b choose
04:19 - Y now another thing that I did is I've
04:22 - added a
04:24 - variable for radius R meaning this
04:27 - circles this bubbles radius it's 48 now
04:29 - remember the ellipse function expects a
04:33 - diameter so in the ellipse function here
04:35 - you can see excuse me I'm multiplying
04:37 - radius by two so if I'm going to use
04:39 - this concept of a radius in a math
04:41 - calculation that's something to do with
04:43 - geometry
04:43 - I better be consistent about what I'm
04:45 - doing so radius is 48 the size of it is
04:48 - 48 times 2 so now that I have that I can
04:52 - say if the distance is less than and let
04:56 - me give let me add some carriage returns
04:58 - here just so I can kind of look at this
04:59 - if the distance is less than V 1 dot R
05:01 - plus B 2 R then now do something what do
05:06 - I want to do maybe I'll say B 1 dot
05:08 - change color and B 2 dot change color
05:12 - right so this is the central idea first
05:15 - all I want to do is check the distance
05:17 - what's the distance between this objects
05:19 - X and that objects X based on that
05:23 - distance if it's less than they're two
05:24 - radiuses
05:25 - they're intersecting do something to
05:27 - them if it's greater then don't do
05:30 - anything right there's nothing in the
05:31 - else situation here so let's look at how
05:34 - what does this mean I just made up B 1
05:36 - change color just just a bubble just
05:38 - automatically change its color because I
05:39 - say change color no this is something I
05:41 - made up I need to add that function to
05:43 - the object itself so I'm going to go
05:44 - back over here and I'm going to add a
05:47 - function called change color is a new
05:51 - function now of course I did this in a
05:53 - previous video but I kind of like lost
05:55 - it and I start over
05:56 - I should add a variable for color right
06:00 - so the let's give it a color to start
06:03 - just white and then when I want to
06:06 - change its color let me make a new
06:10 - random color and I'll just do three
06:14 - random values you can be more creative
06:16 - with this and something that you
06:18 - actually change its size or something
06:19 - else but you can see here now all I'm
06:22 - doing is adding some functionality to
06:24 - the object the object kind of display
06:26 - function it draws as an update function
06:27 - which moves its x and y now it has a
06:29 - change color function which gives a new
06:31 - random color to the object and when am i
06:34 - changing its color only if its intersect
06:38 - right now notice by the way if I comment
06:40 - all of this out let me zoom back out
06:42 - here and only call the change color
06:45 - function in draw as I might and I have
06:49 - all these extra carriage returns put
06:51 - those back right so now I'm just always
06:53 - calling change color we can just make
06:56 - sure that feature Weavin works okay so
06:58 - that picture didn't work why didn't work
07:00 - oh my god I think I made the classic
07:02 - blunder which I really should have done
07:04 - this on purpose but I actually didn't do
07:06 - this on purpose like I added this dot
07:09 - color and then added change the color
07:11 - why it's not changing so this happens
07:13 - all the time in programming you think
07:14 - like just because you put some stuff in
07:16 - there stuff should happen but I forgot a
07:18 - really crucial step and let's just
07:21 - cancel that right I added a color
07:23 - variable I even changed that color
07:25 - variable over and over again but look
07:26 - what's happening here the fill its 255
07:28 - if you don't use again if the tree falls
07:31 - in the forest and there's nobody there
07:34 - whatever that is if the variable is
07:36 - initialized but you don't use it does it
07:38 - does it make us hound it doesn't change
07:40 - the color that's for sure
07:41 - so what I really need to make sure I do
07:43 - is add this dot color here so if you're
07:46 - going to add a new variable you better
07:48 - use that variable for what you intended
07:49 - to use it and I made that mistake and I
07:51 - forgot it so it's good that we check to
07:52 - see if that feature would even work
07:53 - first before we tried doing the
07:55 - intersection so now if I run this you
07:56 - can see they're just changing color like
07:58 - crazy now randomly if they would just
08:00 - spread apart a little bit come on
08:01 - randomness now look at that
08:03 - no oh wait of course they're doing it
08:05 - all the time I forgot so I forgot just
08:07 - testing to see if they would change
08:09 - their color I don't have that if
08:10 - statement in there yet so we could see
08:12 - that feature works so let's go back to
08:14 - the sketch and now let's add in distance
08:17 - let's add in this if statement and let's
08:21 - see what's going on here now they're not
08:23 - intersecting so they're not changing
08:25 - color now come on randomness come on
08:27 - randomness I got I like time lapse in
08:29 - this video oh they're so close oh please
08:33 - please please do this for me oh gods of
08:36 - computing random numbers I think I'm
08:38 - gonna have to just refresh get some new
08:40 - random numbers here there we go okay so
08:41 - you can see when they're touching
08:43 - they're flickering and flashing and now
08:44 - above hopefully they'll randomly spread
08:46 - apart at some point and you can see that
08:47 - they stop changing colors so this
08:49 - works now once again so we kind of have
08:54 - the basic idea here we know we can check
08:56 - the distance between these two objects
08:58 - and we could do something based on that
08:59 - distance so it could be map of force you
09:02 - know push them apart if they're close
09:03 - pull them together if they're far you
09:05 - know this is a whole other set of videos
09:07 - that we need to make about how to do
09:08 - that but at least we're seeing the basic
09:09 - idea there's two things that I think
09:12 - that could be done better here number
09:15 - one I think that we could take this idea
09:18 - of checking the distance between two
09:20 - bubble objects and put that into a
09:23 - function inside the object itself again
09:25 - this idea of object oriented programming
09:27 - like out here I don't want to mess with
09:28 - the wiring of the car there's no car the
09:31 - car is often the thing people use to
09:33 - talk about object-oriented programming
09:34 - right this I just want to say something
09:37 - really nice like if b1 intersects b2
09:44 - then change their color right all of
09:47 - this distance calculation and all of
09:49 - that that's something that really should
09:51 - be inside of this intersects function I
09:54 - should add a new function to the object
09:56 - that can check if it's intersecting
09:59 - another object the reason why I want to
10:00 - add that is I might have a lot of
10:02 - objects I want to check intersection
10:03 - with a lot of other objects I want the
10:05 - objects functionality to be inside the
10:07 - object and conceptually an object should
10:10 - be able to know is it intersecting with
10:12 - another object it's not happening out
10:14 - here in the main program it's called out
10:16 - here in the main program but the
10:17 - algorithm itself happens in the object
10:19 - so I think this is good practice
10:20 - whatever you do whatever you want to
10:22 - code I don't believe that good practice
10:24 - nonsense but I think this will help and
10:26 - be an interesting thing to look at at
10:27 - least so first I want to look at how do
10:29 - we do that so that's step one step two
10:31 - is once we're doing with just these two
10:32 - objects how do I do it with a hundred
10:34 - objects so they already been going on
10:37 - for 10 minutes I've gotten got the got
10:38 - that like lay of the land here but I'm
10:40 - going to try to push through these last
10:41 - two steps in this video so first let's
10:43 - think about what this means so this is
10:45 - particularly tricky so I think I don't
10:47 - go over the whiteboard for a second like
10:48 - if I say b1 intersects b2 what does that
10:51 - mean like what am I actually needing to
10:54 - write so we erase this and
10:59 - I will say I said in the code if B 1 dot
11:06 - intersects B 2 so what does this mean
11:16 - intersects made it with an S is a
11:19 - function that you can call on a bubble
11:21 - object that means in my bubble
11:23 - constructor I need to write a new
11:26 - function called intersects this
11:30 - intersects equals function now notice
11:37 - how I'm passing into that function an
11:39 - argument
11:40 - what is that argument it's another
11:43 - bubble object so I need to send that
11:45 - value into the function so the function
11:47 - definition now requires a parameter what
11:51 - is that parameter some other bubble so I
11:53 - could call that parameter other so the
11:56 - nice thing about this is this should be
11:57 - a generic function that can test if this
12:01 - particular object intersects any other
12:03 - object so I could say if b1 intersects
12:06 - b2 or if B 5 intersects b7 or FB 9 your
12:09 - sex be 27 right and this can be executed
12:12 - with any two objects and then the
12:14 - function is generic this object checking
12:17 - the other object and what does this
12:18 - function need to do it needs to return
12:20 - true or it needs to return false
12:24 - based on what the distance between this
12:27 - object and the other object okay so this
12:30 - is the idea that I'm trying to now that
12:32 - I now would like to go implement I
12:34 - really want to stop and ask see if you
12:35 - have any questions but I can't okay so
12:39 - here I'm over here and so I'm going to
12:42 - take this is kind of like we know this
12:44 - is what works so I'm going to just
12:46 - comment this out though and come back
12:48 - over to the bubble right I need to add
12:50 - that intersects function to the bubble
12:52 - object so here we go and I'm going to
12:55 - say this intersects equals a function
13:00 - with a parameter other right so this
13:04 - function should check if this XY the
13:07 - distance between this XY and the other
13:09 - XY it's a general function for for all
13:12 - the objects can check if they themselves
13:14 - this intersects with another so I want
13:17 - to get the distance between this X this
13:20 - dot Y and other X and other dot y right
13:23 - this object is the object here that's
13:25 - being made the other object is the one
13:27 - that's being passed in and if that
13:29 - distance is less than this objects are
13:32 - plus the other objects are right then
13:36 - they are intersecting right this is that
13:38 - algorithm we worked out if the distance
13:40 - between the two objects is less than the
13:42 - sum of the radii of the two objects yes
13:45 - they are intersecting so return true
13:46 - return true otherwise return false this
13:51 - is very similar to what we did when we
13:54 - had a function in the object check if
13:56 - the mouse was being clicked on that
13:57 - object which preparing the distance
14:00 - between this objects X and mouse X Mouse
14:02 - Y now we're checking the distance
14:04 - between this objects X Y and the other
14:06 - objects X Y returning true or false
14:08 - based on the those radiuses so if I come
14:12 - back over here
14:13 - I now don't need this anymore and look
14:16 - at this program it's like just like the
14:17 - most lovely little thing it's just like
14:20 - two objects make the objects update
14:23 - display them and look at this it almost
14:24 - reads like English if b1 intersects b2
14:27 - b1 should change its color b2 should
14:29 - change color notice how everything is
14:31 - really in the object so this is kind of
14:33 - the magic of object-oriented program you
14:35 - just have kind of like a macro view of
14:36 - what the program is doing here and the
14:38 - guts of it are in the object so if I
14:40 - want to change what it does I just
14:42 - changed this change color function if I
14:44 - want to change how the intersect test
14:45 - works I change that intersect function
14:47 - if I want to change how it updates
14:48 - itself I change that function we've got
14:50 - a really modular reusable program so
14:52 - let's make sure this still works and you
14:54 - can see they're white they're white now
14:56 - they're intersecting so they're
14:57 - flickering and when they go apart they
14:59 - don't flicker anymore that sort of thing
15:01 - okay boy are we trucking along here at
15:04 - 15 minutes so we really got far but I
15:07 - think I just got it like I should just
15:09 - wait to go to the next video if I'm just
15:10 - going to go right now
15:11 - so the next thing that I want to do is
15:13 - change this from only two objects to an
15:15 - array of objects and this is not the
15:17 - easiest thing in the world so what I
15:18 - want to do here is stop you stop you
15:22 - don't I'm going to do
15:23 - yeah I'm gonna do this in the next video
15:24 - I changed my mind because this is a good
15:27 - point to stop because if you're if
15:28 - you're like working with this I would
15:30 - suggest setting this up first with just
15:32 - two objects so get this sort of same
15:34 - thing working for yourself maybe do
15:36 - something besides change color change
15:38 - size play around with what this
15:40 - intersect test means like are you I
15:42 - could you'd like do if they just get
15:43 - kind of near each other like what you
15:45 - know what what strangely shaped thing
15:46 - what you have so try to get this working
15:48 - in the next video and to make us another
15:50 - video I'm going to change it from just
15:51 - two objects to an array okay and stop

Cleaned transcript:

hi so I'm here with another video about things that come up when you've got arrays of objects and those objects are things that you're drawing in the screen so the topic for this video is looking at collision detection dealing with collisions now I should emphasize there's two things that play here there's collision detection meaning are those two circles overlapping which they are right now and then there's collision resolution meaning what do you do when the two things are overlapping do they bounce off of each other and I'm going to really be staying away from the physics side of this I'm just going to when they overlap how to change color when they don't overlap have them not change color but the reason why this is so useful is you know it's not going to be too hard for us to do this with two objects but ultimately you might have a system where every object in the system is checking itself against every other object and I have an example of this this is from a set of examples called from the nature of code this is agent modeling all of these agents are moving around the screen and they obey one simple rule don't bump into your neighbor so every single one of these has to check the position of every single other one and move out of the way if they're too close so you start small with these two objects then build a scenario with lots of objects and look at what we how we can make something happen based on how far apart those objects are so let's first I think a diagram here would be helpful just to sort of look at first how do you determine there you are I mean you're it's a camera looking at me but how do I determine how do you determine if two objects two circles are overlapping or not so in previous video I looked at how do you know if a point is inside a circle this is actually quite a similar thing so if I have circle a and I have circle B and then I have circle a and I have circle B you can plainly see that these two circles are overlapping and these two circles are not overlapping so obviously to a human being visually it's quite obvious so how do you determine that with code well the there's only two key pieces of information that you need you need to know you know X a Y a X B Y B you need to know where is the center of each of these circles and then you need to know how far apart are they what is that distance between them because if the distance between them is greater than the sum of the two radii here's a radius here's a radius this radius plus that radius is only like a line about that long you can see the distance is greater than that it means they are overlapping if that distance right you can see here is shorter than the sum of these two radii you can see that it is because this radius goes all the way to here this radius goes all the way here if it's less than the sum of those two radii then they are in fact overlapping so what we need is a way of calculating the distance between a sermon hat I lost my train of thought there for a second we need is a variable to store the distance using the p5 distance function that I previously referenced between you know X a Y a xB YB now this I this is sort of like math notation I'm mixing it was kind of like code but we'll name our variables in a different way in the actual thing if that distance is less than you know RA plus RB I wanted to make an Arby's joke here but that's just i watch too much TV show I'll skip that nobody knows what I'm talking about anyway if the distance is less than RA plus RB then those two circles are in fact overlapping okay so this is the algorithm that you need I kind of losing my steam here and try to get some energy going and now what I want to do is look at show at least very first how do I put this algorithm in code so one thing that I've done here with this particular example is I've simplified for a bit so starting out this idea I think it's easier for us to look at not at an array of objects but instead simply just two objects so you can see I have object b1 an object p2 here's a bubble there's a bubble update both of them display both of them so what do I want to look at first I want to look at the distance between both of those objects so how do I do that I could say give me the distance between what b1 x b1 zwei and b2 x and b choose Y now another thing that I did is I've added a variable for radius R meaning this circles this bubbles radius it's 48 now remember the ellipse function expects a diameter so in the ellipse function here you can see excuse me I'm multiplying radius by two so if I'm going to use this concept of a radius in a math calculation that's something to do with geometry I better be consistent about what I'm doing so radius is 48 the size of it is 48 times 2 so now that I have that I can say if the distance is less than and let me give let me add some carriage returns here just so I can kind of look at this if the distance is less than V 1 dot R plus B 2 R then now do something what do I want to do maybe I'll say B 1 dot change color and B 2 dot change color right so this is the central idea first all I want to do is check the distance what's the distance between this objects X and that objects X based on that distance if it's less than they're two radiuses they're intersecting do something to them if it's greater then don't do anything right there's nothing in the else situation here so let's look at how what does this mean I just made up B 1 change color just just a bubble just automatically change its color because I say change color no this is something I made up I need to add that function to the object itself so I'm going to go back over here and I'm going to add a function called change color is a new function now of course I did this in a previous video but I kind of like lost it and I start over I should add a variable for color right so the let's give it a color to start just white and then when I want to change its color let me make a new random color and I'll just do three random values you can be more creative with this and something that you actually change its size or something else but you can see here now all I'm doing is adding some functionality to the object the object kind of display function it draws as an update function which moves its x and y now it has a change color function which gives a new random color to the object and when am i changing its color only if its intersect right now notice by the way if I comment all of this out let me zoom back out here and only call the change color function in draw as I might and I have all these extra carriage returns put those back right so now I'm just always calling change color we can just make sure that feature Weavin works okay so that picture didn't work why didn't work oh my god I think I made the classic blunder which I really should have done this on purpose but I actually didn't do this on purpose like I added this dot color and then added change the color why it's not changing so this happens all the time in programming you think like just because you put some stuff in there stuff should happen but I forgot a really crucial step and let's just cancel that right I added a color variable I even changed that color variable over and over again but look what's happening here the fill its 255 if you don't use again if the tree falls in the forest and there's nobody there whatever that is if the variable is initialized but you don't use it does it does it make us hound it doesn't change the color that's for sure so what I really need to make sure I do is add this dot color here so if you're going to add a new variable you better use that variable for what you intended to use it and I made that mistake and I forgot it so it's good that we check to see if that feature would even work first before we tried doing the intersection so now if I run this you can see they're just changing color like crazy now randomly if they would just spread apart a little bit come on randomness now look at that no oh wait of course they're doing it all the time I forgot so I forgot just testing to see if they would change their color I don't have that if statement in there yet so we could see that feature works so let's go back to the sketch and now let's add in distance let's add in this if statement and let's see what's going on here now they're not intersecting so they're not changing color now come on randomness come on randomness I got I like time lapse in this video oh they're so close oh please please please do this for me oh gods of computing random numbers I think I'm gonna have to just refresh get some new random numbers here there we go okay so you can see when they're touching they're flickering and flashing and now above hopefully they'll randomly spread apart at some point and you can see that they stop changing colors so this works now once again so we kind of have the basic idea here we know we can check the distance between these two objects and we could do something based on that distance so it could be map of force you know push them apart if they're close pull them together if they're far you know this is a whole other set of videos that we need to make about how to do that but at least we're seeing the basic idea there's two things that I think that could be done better here number one I think that we could take this idea of checking the distance between two bubble objects and put that into a function inside the object itself again this idea of object oriented programming like out here I don't want to mess with the wiring of the car there's no car the car is often the thing people use to talk about objectoriented programming right this I just want to say something really nice like if b1 intersects b2 then change their color right all of this distance calculation and all of that that's something that really should be inside of this intersects function I should add a new function to the object that can check if it's intersecting another object the reason why I want to add that is I might have a lot of objects I want to check intersection with a lot of other objects I want the objects functionality to be inside the object and conceptually an object should be able to know is it intersecting with another object it's not happening out here in the main program it's called out here in the main program but the algorithm itself happens in the object so I think this is good practice whatever you do whatever you want to code I don't believe that good practice nonsense but I think this will help and be an interesting thing to look at at least so first I want to look at how do we do that so that's step one step two is once we're doing with just these two objects how do I do it with a hundred objects so they already been going on for 10 minutes I've gotten got the got that like lay of the land here but I'm going to try to push through these last two steps in this video so first let's think about what this means so this is particularly tricky so I think I don't go over the whiteboard for a second like if I say b1 intersects b2 what does that mean like what am I actually needing to write so we erase this and I will say I said in the code if B 1 dot intersects B 2 so what does this mean intersects made it with an S is a function that you can call on a bubble object that means in my bubble constructor I need to write a new function called intersects this intersects equals function now notice how I'm passing into that function an argument what is that argument it's another bubble object so I need to send that value into the function so the function definition now requires a parameter what is that parameter some other bubble so I could call that parameter other so the nice thing about this is this should be a generic function that can test if this particular object intersects any other object so I could say if b1 intersects b2 or if B 5 intersects b7 or FB 9 your sex be 27 right and this can be executed with any two objects and then the function is generic this object checking the other object and what does this function need to do it needs to return true or it needs to return false based on what the distance between this object and the other object okay so this is the idea that I'm trying to now that I now would like to go implement I really want to stop and ask see if you have any questions but I can't okay so here I'm over here and so I'm going to take this is kind of like we know this is what works so I'm going to just comment this out though and come back over to the bubble right I need to add that intersects function to the bubble object so here we go and I'm going to say this intersects equals a function with a parameter other right so this function should check if this XY the distance between this XY and the other XY it's a general function for for all the objects can check if they themselves this intersects with another so I want to get the distance between this X this dot Y and other X and other dot y right this object is the object here that's being made the other object is the one that's being passed in and if that distance is less than this objects are plus the other objects are right then they are intersecting right this is that algorithm we worked out if the distance between the two objects is less than the sum of the radii of the two objects yes they are intersecting so return true return true otherwise return false this is very similar to what we did when we had a function in the object check if the mouse was being clicked on that object which preparing the distance between this objects X and mouse X Mouse Y now we're checking the distance between this objects X Y and the other objects X Y returning true or false based on the those radiuses so if I come back over here I now don't need this anymore and look at this program it's like just like the most lovely little thing it's just like two objects make the objects update display them and look at this it almost reads like English if b1 intersects b2 b1 should change its color b2 should change color notice how everything is really in the object so this is kind of the magic of objectoriented program you just have kind of like a macro view of what the program is doing here and the guts of it are in the object so if I want to change what it does I just changed this change color function if I want to change how the intersect test works I change that intersect function if I want to change how it updates itself I change that function we've got a really modular reusable program so let's make sure this still works and you can see they're white they're white now they're intersecting so they're flickering and when they go apart they don't flicker anymore that sort of thing okay boy are we trucking along here at 15 minutes so we really got far but I think I just got it like I should just wait to go to the next video if I'm just going to go right now so the next thing that I want to do is change this from only two objects to an array of objects and this is not the easiest thing in the world so what I want to do here is stop you stop you don't I'm going to do yeah I'm gonna do this in the next video I changed my mind because this is a good point to stop because if you're if you're like working with this I would suggest setting this up first with just two objects so get this sort of same thing working for yourself maybe do something besides change color change size play around with what this intersect test means like are you I could you'd like do if they just get kind of near each other like what you know what what strangely shaped thing what you have so try to get this working in the next video and to make us another video I'm going to change it from just two objects to an array okay and stop
