With timestamps:

00:00 - Hello and welcome to a tutorial
about how to program a loading animation
00:05 - on a page in javascript using p5.js. So
I have a p5.js sketch here all it renders is this
00:11 - gray square it doesn't do anything yet
but when I run it you'll notice that it says
00:16 - loading there and then the sketch pops up
and it took 1355 milliseconds or 1. you know
00:22 - about  1.4 seconds, did I round that correctly
am not sure. So what's going on here so p5.js
00:26 - actually has built in to itself if there are
things to be loaded before the sketch runs
00:32 - a sort of automatic loading display 
so you'll.. that sort of comes up automatically
00:36 - the reason why that comes up is because 
in the code am using this function called preload()
00:43 - so preload() is a function that is designed to 
operate synchronously meaning the rest of the
00:49 - code the setup function won't actually be 
triggered until every thing that need to be loaded
00:54 - in preload is done; so images, sounds, json files
data files, videos all sorts of media or data assets
01:03 - that you might load you can load those things in
preload() and then know that they're ready to be used
01:07 - when setup() and draw() continues. Now this is
very convenient for like quick and dirty testing for like
01:14 - I just have a couple of images whatever you 
don't have to worry about callbacks and asynchronous
01:18 - this and that or whatever and you know to 
just but once you're maybe
01:21 - a.. two reasons why this might not be so
great for you is #1) you might actually have
01:27 - a ton of stuff to load that it takes seconds, 5 seconds
6 seconds 7 seconds for the sketch to load
01:33 - and you wanna see other things start while
stuff is loading in the background
01:37 - that's one thing am gonna show you how to do;
the other thing is just you know as you release
01:40 - on to the web maybe you just don't want to 
the users to kinda see this default loading thing
01:45 - for a little bit and wanna customize and 
do something special yourself so that's what
01:48 - am gonna look at.
How do I take aah things that are loaded
01:52 - in ummm how do I take.. sorry am lookin..
how do I take things that are loaded in preload
01:59 - and load them asynchronously so that a callback
can register when they're loading and have other things
02:04 - animate at the same time. Ok I got distracted by
looking at a live chat that's going on, am not gonna
02:08 - look at it any more while I complete this video
ok here we go sooo  am gonna go back to the code
02:14 - and actually honestly what am gonna do 
am gonna show you eventually umm what I can
02:18 - do in terms of all of these images and multiple
mp3 files but am gonna simplify for a second
02:24 - and am gonna comment out some of this stuff
umm and am just gonna load, am just gonna have one
02:32 - mp3 file load, ok so let's run this again and we can
see that one mp3 file took about 811ms to load
02:41 - so one thing that I wanna do is let's come up
with some goofy loading animation ahh so am
02:48 - gonna do something really quickly am gonna say
translate width/2 height/2 am gonna draw a line
02:56 - from 0, 0 to like 100, 0 am gonna the stroke weight
is 4 and the stroke is 255 and then am also going to
03:06 - rotate by umm some angle and am going to have
that angle am gonna have that angle increase over time
03:15 - now I am making perhaps a rather 
uninteresting loading animation
03:19 - I just want like a spinning line but you know
this video is not about making an interesing
03:25 - animation.. loading animation it's just about
how to.. where to place it and how to deal with it
03:29 - and then I hope to see all of your exciting different 
creative rainbow colored loading animations
03:35 - on the internet after you watch this video
so if I run this, you can see.. now notice that
03:40 - animation came up after right? cause this happens
in draw(), draw() starts after.. so this is
03:45 - my loading animation I have a little spinning line
um nothing too fancy so if I were to not load this
03:52 - song; you can see it comes up basically that 
comes up basically immediately so.. now what if
04:01 - what if I were to take this loadSound() code and put
loadSound() now in setup()
04:07 - notice there's no delay anymore the..
when you call.. so a loading function that you call
04:16 - in preload() it has to wait and finish before it 
goes to setup. A loading function that you call in
04:22 - setup() does not stop and wait before it goes to draw(),
it goes to draw immediatlely. So how do you know
04:28 - right? If I were to say this: song1 = loadSound(),
and then I were to say song1.play()
04:34 - why did those.. why dis this get sort of like 
strangely colored? I don't know what Atom is
04:41 - doing to syntax highlight this stuff but
am not gonna worry about that
04:44 - if I run this you can see this is the error 
am gonna get. It's not ready to play the file
04:48 - because it hasn't loaded yet
so the way that this works and I have some other
04:51 - videos about this; is with this idea of a 'callback' 
so I can write a callback here that's called something
04:57 - soundLoaded, so I can add a second 
argument to the load function and this is the
05:02 - same for loadImage, loadJSON.., I can add that 
second function and here I can write that func.. I can
05:08 - you know there's lots of different ways; I can 
write the function embed it in there anonymously
05:14 - but am just going to make it a separate function
outside here and it's going to have.. it has an
05:18 - argument which is the sound fi.. object 
that actually was loaded and am gonna say
05:24 - song1 = song am just gonna do this 
for right now and am gonna say song1.play
05:30 - and now we should see..
do you here it? There should be a song playing
05:37 - it's got a liltle like record scratch at the beginning
so you  can see that song as soon as it's loaded
05:42 - that thing is spinning, and there's like
a little pause there
05:46 - iippp, now that hiccup really shouldn't be
there, I wonder why that hiccup is there
05:50 - because I.. interesting to sort of like 
examine and debug that. The whole point of
05:53 - what am doing is to avoid a hiccup like that 
umm but let's see
05:58 - what I could now do is I could create
a varaible like finishedLoadng
06:03 - or I could.. I mean let me just create a 
variable called loading and am gonna set that
06:07 - variable equal to true
and I could say here in draw()
06:11 - if (loading) draw this loading animation
otherwise you know am just gonna do a
06:20 - green background like everything is loaded
so what I can actually do is I can put in the
06:25 - callback that plays the song 
I could say loaded = true;
06:32 - so I started with a boolean variable... ooh
no sorry, it's called loading
06:36 - loading  equals false;
so I start with a loading variable
06:42 - equal to true, so while that's true I draw the spinning animation and then at some point in the callback when
06:51 - loading is finished I set it to false and draw the n switches to the other animation
06:55 - so let's go back and see
spinning spinning..   green
06:59 - and the music starts
green
07:01 - ok so now here's the thing 
So that's part One (laughs)
07:06 - there's actually a bit more to it than this 
let's just see something kinda exciting
07:11 - I'm pretty sure ahh I need a a stop button
am gonna mute the tab just for a second
07:17 - so it doesn't play the song umm now there's 
another aspect to this.. (claps while laughing)
07:22 - ahh am pretty sure that the sound library
when you call.. when you pass in a callback
07:29 - like soundLoaded you can actually 
ohh give it a third callback
07:36 - I think you can give it a third calback which is like
maybe I'll call it progress
07:41 - and then am gonna say; I.. am gonna have 
to look in the reference a second if I get
07:45 - this wrong, but I can write another function
called progress and that callback is triggered
07:50 - continuously giving you a percentage of the
amount that's loaded
07:54 - so am just gonna do put console.log(percent)
to see if this works *laughs*
08:00 - noo; so let's go and look at the p5.js
reference
08:04 - ahhh aah sound file and I'm going to go and 
look for ahaah successCallback,
08:12 - errorCallback, and whileLoadingCallback
so I think if I want to use this whileLoadingCallback
08:18 - I need to also give it an errorCallback which
is useful to have as well
08:22 - so am gonna do like error and now I just
need a function error()
08:29 - and I can just if there were and error or like
the file doesn't.. didn't exit
08:33 - I could log that error, so here am getting kind 
of like ballooning my code
08:38 - which is why when you just kind of like
sketching out ideas you don't necessarily
08:41 - wanna do all of this stuff, but when you
get to a finishing stage of a project
08:44 - and you wanna kind of like add some you know
nicer nice features you could sort of start adding
08:48 - all this stuff. So I have a callback, there's 3 kinds of events
08:52 - there's ahaa I loaded the song successfully,
ah I don.. there was an error the song didn't load
08:57 - and then there's a callback that's like
♪♫ it's loading it's loading it's the loading song♫
09:02 - (then sings again... )
♪♫ it's loading it's loading it's the loading song♫
09:05 - so let's see if this will work now 
ahh right you can see ooh this is like
09:11 - ok let's be a little more thoughtfull about this
so am gonna percent times 100 and am gonna
09:17 - floor it 
why did I get -308 and then 229??
09:25 - That is crazy, let's look at the documentation
am not sure if am either made a mistake
09:30 - or umm there's a bug in p5
so whileLoadingCallback: Name of the function
09:36 - to call while file is loading. That function 
will receive a percentage loaded (between
09:41 - 0 and 1) as a parameter. mmhh huh
I believe that I have done this correctly
09:46 - and that aahh I should get.. oops
I should get oh perecent
10:00 - I spelled percent wrong huhh
I should get ahh so am gonna investigate
10:05 - that later aaah I might come up.. I probably at
the end of this video  you might see an addendum
10:10 - where I fix that because I'll go and debug 
that and edit that back on later
10:13 - but am just gonna keep going although what
I was gonna demonstrate to you.. wait
10:16 - PAUSE! am gonna debug this.
10:18 - I'm back and I couldn't figure out that error
so am gonna have to
10:21 - later and file some sort of like follow
up video to this but I'm going to keep
10:25 - moving in this tutorial
10:26 - so what I'm gonna do right now is
actually take out that progress thing since
10:29 - it's not working for me, I'm not going to
use it in this particular button and I'm
10:33 - gonna show you some other stuff and I'm
just going to go back to sound loaded
10:37 - and I'm going to do this we're going to
see
10:40 - ok so this is working now here's the
thing what if I have two
10:45 - sounds song.. song1 and song2
10:48 - so now what I need to do is do song1
and song2; so you know they should be
10:57 - different
10:58 - it should be different, two different
songs but actually the computer doesn't
11:01 - know like I just tell you to load the
same mp3 file it's gonna take a while
11:05 - so the issue is what if i want both of
those two have the same callback
11:09 - mmm but i want the correct one to play
when it's loaded and I want to keep
11:14 - track of the total number of things
loaded
11:16 - oh my goodness yiikes.. this is actually a
time I walked into a sort of treacherous
11:22 - area here but this is a time where using
a JavaScript closure would actually be
11:27 - something quite useful
11:30 - so I'm going to actually create a
function that's called umm that's umm
11:39 - you know i'm going to call it aah rainbowSongLoad..
rainbowSong() and i'm going to
11:46 - pass it (song1, 'rainbow.mp3')
11:51 - you'll see what i'm going to do in a
second and I'm gonna call that function again
11:55 - now these should really be like two
different mp3 files but i'm just going
11:59 - to use one mp3 file for right now; you'll
see in a minute why I'm doing this
12:04 - so I have a separate function what I
want to do is say i want... the variable
12:08 - song1 to go with this mp3 file and
you know what am gonna do
12:11 - this is I I... even though that it's the
same music umm
12:15 - what I'm going to do is ahh umm hold on,
12:18 - reveal in finder.. show in finder ah this
is this is going to make things much
12:24 - less confusing
12:25 - I'm actually just going to create two
versions of the file because what you
12:32 - actually would be doing is if you want
to load two songs
12:35 - ok so now there are two different mp3
files for... all you know there are two
12:39 - different songs and what I'm going to do
here right?
12:44 - I have 2 that I want to load so i'm
creating a function called rainbowSong()
12:49 - and in that function
12:52 - what does that function take aah
rainbowSong()
12:57 - it takes a variable like song and it
takes a file name and what I want to do
13:05 - is I want to load that file into that
particular variable name and then know
13:10 - that it's loaded and play that
particular variable so here in other
13:17 - words now this loaSound function needs
to then go inside that function
13:24 - ok and what am I loading
13:27 - I'm actually loading this file name now
so i just created a wrapper function to
13:33 - call the loadSound function and be able
to receive the file name as an argument
13:37 - why? because now what I can do is in this
soundLoaded function
13:43 - I could say song equals that particular
sound, right?
13:50 - This is a closure, I now have access to
either the variable song1 or song2
13:55 - I have a whole video just about this
concept that you can go and look and now
13:59 - what I will can do is I can say song.play()
14:02 - so in other words I was able to.. here if
I say song1 equals to loadSound
14:08 - soundLoaded, song2 equals loadSound soundLoaded
14:11 - and this is my soundLoaded function, I
have no way to know when that callback
14:15 - happens which file was it
14:17 - but here I now know how to do that
because I have then instead
14:23 - taken the load sound away and made that
happen in my own function that receives arguments
14:28 - this is essentially how you pass
arguments to a callback
14:32 - I pass arguments to a function that then
defines the callback within that
14:36 - function so I have access to those
arguments and that's a JavaScript closure.
14:40 - This function is enclosed in that other
function, ok that's a bit of a side topic
14:44 - here but it's kind of necessary for this
type of thing that you might be doing
14:47 - umm there's an error I made a mistake I'm
missing a semicolon somewhere
14:52 - umm ah yes thank you very much this is an
error the chat thankfully saved me there
14:57 - so I'm going to put that; I think I've
got everything right now
15:00 - so what I want to do.. ah forget about the
loading animation for a second
15:05 - what I want to do now is I just want to
do this, console.log(filename);
15:13 - so here I'm going to be able to see the
file that was loaded run this..
15:21 - rainbow1 so you can see those files I now
have access to when they're loaded
15:25 - separately and I get this like weird little 
pause when the first one loads in my animation
15:30 - I don't know why that's happening the
whole point of doing this is to
15:32 - eliminate that but ok so I've got my
loading animation going and now what I
15:37 - can do is I could have a counter..
15:39 - you know I really should be using an
array let's use an array yeah let's use
15:44 - an array that's how you would do it
probably i'm going to make this an array
15:47 - and what I'm actually going to do is I'm
going to say
15:51 - 0  1 so I'm just going to pass in an index
into the array those should be named
15:56 - rainbow0 rainb.. and and then what
I'm going to do is here
16:00 - I'm going to say songs index and this is
now an index, songs[index] equals sound
16:06 - and I'm gonna say console.log(index
+ ' ' + filename) and then songs[index] so now
16:13 - I have an array of sounds and only two of
them and you can see there being loaded
16:20 - separately 0 and 1
16:22 - now I could easily have something like a
counter right? so i could say aah counter
16:29 - equals 0 and here whenever the song is
loaded I could say you know counter++
16:36 - and I could say if counter equals 2
then loading equals false;
16:42 - so now i know only stop the loading
animation actually only stop the loading
16:48 - animation ac... after I've loaded
everything and there we go
16:53 - so you can see it's loading them one at
a time and it's loading them one at a time.
17:00 - PAUSE edit point. Ok I'm back
17:04 - and what I'm going to do now is improve
the code with a few clean up things as
17:08 - well as show you how to have a loading
bar kind of go through the percentages
17:12 - as a bunch of things are loading so
while I was taking a quick break their
17:15 - what i did is i made I added 10 songs to
a folder
17:20 - so now what I want is for this sketch to
load all 10 so there's a bunch of
17:24 - improvements i can do here
17:26 - number one is I can have a variable
called total songs and that's going to
17:32 - be equal to 10
17:33 - the other thing I could do is I really
don't need to call this individually
17:36 - with passing in the index
17:39 - I can really just write a loop right now
I could say for (var i = 0, i < totalSongs;
17:45 - i++ ) and
really all I need to do now is I don't
17:53 - need that index
17:55 - I can just say umm.. I can just say a let me
18:02 - let me dynamically make that file name let's
leave the index there for right because am gonna
18:06 - I'll show you why no.. why you may or may
not want to use it and I can just put a..
18:10 - sorry,  i in the file name
18:12 - so this is my di... me saying like instead
of saying load rainbow1 load rainbow2
18:17 - I'm saying loop through i going from 0
up to 10 and loop and get.. do rainbow i
18:22 - rainbow i, which israinbow0 rainbow1
rainbow2.. that's a song; ♫rainbow0 rainbow1♫
18:27 - ummm ok so now we should see 0 1 2 3
18:34 - now notice it's stopped,
it thinks that loaded after got just threw 2
18:39 - that's because i have this counter here
and really I need to say when this
18:42 - counter equals totalSongs now
18:44 - now that I have that as a variable so
now i can say it's loading 0 1 2 3 4 5 6
18:51 - 7 8 9 and (claps) then it's finished loading so
I'm getting pretty I'm doing pretty well
18:58 - here and let's see let's make a few more
improvements are now one thing is I
19:02 - don't actually need this index here
19:04 - I can get rid of the index here because
one thing I could just do and I'm going
19:09 - to keep the file name here is I can just
say songs.push(sound) and that will
19:17 - just say anything thats coming in push
it onto the array but there is a slight
19:20 - issue with this
19:22 - let's see... well first of all the issue is
that nothing..  ♪I'm loading forever♪
19:31 - ♪loading forever♪
umm what did i miss here?
19:37 - Oops I have index still here as an
argument where I just want filename now
19:41 - and you can see 0 1 2 3 4 5 6 7 8 9
19:47 - wow so what I was really expecting to
happen is for those not to come in order
19:53 - they did come in order which is kind of
lucky but there's no way to guarantee
19:57 - that they're going to happen in order on
19:59 - so do if you care about the order of
those things in the array then you're
20:03 - going to want to like keep the index as
you're calling the load function but in
20:08 - this case it didn't really matter
20:09 - so what I'm going to do now is do
something really really simple in
20:12 - addition as i'm going to say ok I'm
going to draw a rectangle
20:16 - I'm going to make a stroke of 255 and
I'm going
20:20 - have noFill() and I'm going to draw a
rectangle from 10, 10 to like 500 across
20:28 - that's 20 pixels high. Let's just see
that there.. oops that's way too wide
20:32 - still too wide, ok so you can see now i
have a rectangle up at the top and then
20:39 - what I want to do is draw a rectangle
with noFill I mean no sorry noStroke()
20:44 - and I want to give it a fill like to 255
and maybe with some alpha and then I
20:51 - want to draw that same rectangle but I
want the with to be a variable so if I
20:56 - do this for example
20:58 - just give that width equal to mouseX
look as I move my mouse around that
21:02 - rectangle there's a rectangle inside the
outer one and now since I have that counter
21:08 - I can say that is something like 200
times the counter/totalSongs right?
21:15 - because counter is counting up how
many total songs and we should be able
21:19 - to see here on as they're loading you
can see the progress of that loading bar
21:23 - moving forward
21:24 - uuh ok I like this. This will be like like
a gif animation.. the loading song.
21:29 - ♪♪♪loading loading loading loading loading
loading loading loadiiiing ♪♪
21:34 - ♪loaded!♪ ok, alright so that's how to
program a loading animation in p5.js
21:42 - instead of using preload() which I've now
commented out
21:45 - you can call things in setup() with
callbacks you can keep track of when the
21:49 - callbacks are finished you can put
things into an array you can use a
21:53 - closure to keep track of a whole bunch
of things with the same callback
21:56 - there's a lot to this but hopefully this
gave you some JavaScript learning and
22:00 - information and was helpful
22:02 - make your... make a nicely designed more
beautiful rainbow colored perhaps
22:05 - loading animation
22:07 - share it with me and I would love to
check it out, okay thanks for watching
22:11 - this video and (chuckles) there maybe an
addendum on it I'm not sure just yet or
22:15 - this might be the end
22:16 - I don't know it'll be a mystery.. it's a
mystery
22:19 - it's a mystery oh I need the soundboard
really badly
22:23 - ♫♪ suspense music play ♪♫
22:27 - goodbye maybe.....

Cleaned transcript:

Hello and welcome to a tutorial about how to program a loading animation on a page in javascript using p5.js. So I have a p5.js sketch here all it renders is this gray square it doesn't do anything yet but when I run it you'll notice that it says loading there and then the sketch pops up and it took 1355 milliseconds or 1. you know about 1.4 seconds, did I round that correctly am not sure. So what's going on here so p5.js actually has built in to itself if there are things to be loaded before the sketch runs a sort of automatic loading display so you'll.. that sort of comes up automatically the reason why that comes up is because in the code am using this function called preload() so preload() is a function that is designed to operate synchronously meaning the rest of the code the setup function won't actually be triggered until every thing that need to be loaded in preload is done; so images, sounds, json files data files, videos all sorts of media or data assets that you might load you can load those things in preload() and then know that they're ready to be used when setup() and draw() continues. Now this is very convenient for like quick and dirty testing for like I just have a couple of images whatever you don't have to worry about callbacks and asynchronous this and that or whatever and you know to just but once you're maybe a.. two reasons why this might not be so great for you is #1) you might actually have a ton of stuff to load that it takes seconds, 5 seconds 6 seconds 7 seconds for the sketch to load and you wanna see other things start while stuff is loading in the background that's one thing am gonna show you how to do; the other thing is just you know as you release on to the web maybe you just don't want to the users to kinda see this default loading thing for a little bit and wanna customize and do something special yourself so that's what am gonna look at. How do I take aah things that are loaded in ummm how do I take.. sorry am lookin.. how do I take things that are loaded in preload and load them asynchronously so that a callback can register when they're loading and have other things animate at the same time. Ok I got distracted by looking at a live chat that's going on, am not gonna look at it any more while I complete this video ok here we go sooo am gonna go back to the code and actually honestly what am gonna do am gonna show you eventually umm what I can do in terms of all of these images and multiple mp3 files but am gonna simplify for a second and am gonna comment out some of this stuff umm and am just gonna load, am just gonna have one mp3 file load, ok so let's run this again and we can see that one mp3 file took about 811ms to load so one thing that I wanna do is let's come up with some goofy loading animation ahh so am gonna do something really quickly am gonna say translate width/2 height/2 am gonna draw a line from 0, 0 to like 100, 0 am gonna the stroke weight is 4 and the stroke is 255 and then am also going to rotate by umm some angle and am going to have that angle am gonna have that angle increase over time now I am making perhaps a rather uninteresting loading animation I just want like a spinning line but you know this video is not about making an interesing animation.. loading animation it's just about how to.. where to place it and how to deal with it and then I hope to see all of your exciting different creative rainbow colored loading animations on the internet after you watch this video so if I run this, you can see.. now notice that animation came up after right? cause this happens in draw(), draw() starts after.. so this is my loading animation I have a little spinning line um nothing too fancy so if I were to not load this song; you can see it comes up basically that comes up basically immediately so.. now what if what if I were to take this loadSound() code and put loadSound() now in setup() notice there's no delay anymore the.. when you call.. so a loading function that you call in preload() it has to wait and finish before it goes to setup. A loading function that you call in setup() does not stop and wait before it goes to draw(), it goes to draw immediatlely. So how do you know right? If I were to say this song1 = loadSound(), and then I were to say song1.play() why did those.. why dis this get sort of like strangely colored? I don't know what Atom is doing to syntax highlight this stuff but am not gonna worry about that if I run this you can see this is the error am gonna get. It's not ready to play the file because it hasn't loaded yet so the way that this works and I have some other videos about this; is with this idea of a 'callback' so I can write a callback here that's called something soundLoaded, so I can add a second argument to the load function and this is the same for loadImage, loadJSON.., I can add that second function and here I can write that func.. I can you know there's lots of different ways; I can write the function embed it in there anonymously but am just going to make it a separate function outside here and it's going to have.. it has an argument which is the sound fi.. object that actually was loaded and am gonna say song1 = song am just gonna do this for right now and am gonna say song1.play and now we should see.. do you here it? There should be a song playing it's got a liltle like record scratch at the beginning so you can see that song as soon as it's loaded that thing is spinning, and there's like a little pause there iippp, now that hiccup really shouldn't be there, I wonder why that hiccup is there because I.. interesting to sort of like examine and debug that. The whole point of what am doing is to avoid a hiccup like that umm but let's see what I could now do is I could create a varaible like finishedLoadng or I could.. I mean let me just create a variable called loading and am gonna set that variable equal to true and I could say here in draw() if (loading) draw this loading animation otherwise you know am just gonna do a green background like everything is loaded so what I can actually do is I can put in the callback that plays the song I could say loaded = true; so I started with a boolean variable... ooh no sorry, it's called loading loading equals false; so I start with a loading variable equal to true, so while that's true I draw the spinning animation and then at some point in the callback when loading is finished I set it to false and draw the n switches to the other animation so let's go back and see spinning spinning.. green and the music starts green ok so now here's the thing So that's part One (laughs) there's actually a bit more to it than this let's just see something kinda exciting I'm pretty sure ahh I need a a stop button am gonna mute the tab just for a second so it doesn't play the song umm now there's another aspect to this.. (claps while laughing) ahh am pretty sure that the sound library when you call.. when you pass in a callback like soundLoaded you can actually ohh give it a third callback I think you can give it a third calback which is like maybe I'll call it progress and then am gonna say; I.. am gonna have to look in the reference a second if I get this wrong, but I can write another function called progress and that callback is triggered continuously giving you a percentage of the amount that's loaded so am just gonna do put console.log(percent) to see if this works *laughs* noo; so let's go and look at the p5.js reference ahhh aah sound file and I'm going to go and look for ahaah successCallback, errorCallback, and whileLoadingCallback so I think if I want to use this whileLoadingCallback I need to also give it an errorCallback which is useful to have as well so am gonna do like error and now I just need a function error() and I can just if there were and error or like the file doesn't.. didn't exit I could log that error, so here am getting kind of like ballooning my code which is why when you just kind of like sketching out ideas you don't necessarily wanna do all of this stuff, but when you get to a finishing stage of a project and you wanna kind of like add some you know nicer nice features you could sort of start adding all this stuff. So I have a callback, there's 3 kinds of events there's ahaa I loaded the song successfully, ah I don.. there was an error the song didn't load and then there's a callback that's like ♪♫ it's loading it's loading it's the loading song♫ (then sings again... ) ♪♫ it's loading it's loading it's the loading song♫ so let's see if this will work now ahh right you can see ooh this is like ok let's be a little more thoughtfull about this so am gonna percent times 100 and am gonna floor it why did I get 308 and then 229?? That is crazy, let's look at the documentation am not sure if am either made a mistake or umm there's a bug in p5 so whileLoadingCallback Name of the function to call while file is loading. That function will receive a percentage loaded (between 0 and 1) as a parameter. mmhh huh I believe that I have done this correctly and that aahh I should get.. oops I should get oh perecent I spelled percent wrong huhh I should get ahh so am gonna investigate that later aaah I might come up.. I probably at the end of this video you might see an addendum where I fix that because I'll go and debug that and edit that back on later but am just gonna keep going although what I was gonna demonstrate to you.. wait PAUSE! am gonna debug this. I'm back and I couldn't figure out that error so am gonna have to later and file some sort of like follow up video to this but I'm going to keep moving in this tutorial so what I'm gonna do right now is actually take out that progress thing since it's not working for me, I'm not going to use it in this particular button and I'm gonna show you some other stuff and I'm just going to go back to sound loaded and I'm going to do this we're going to see ok so this is working now here's the thing what if I have two sounds song.. song1 and song2 so now what I need to do is do song1 and song2; so you know they should be different it should be different, two different songs but actually the computer doesn't know like I just tell you to load the same mp3 file it's gonna take a while so the issue is what if i want both of those two have the same callback mmm but i want the correct one to play when it's loaded and I want to keep track of the total number of things loaded oh my goodness yiikes.. this is actually a time I walked into a sort of treacherous area here but this is a time where using a JavaScript closure would actually be something quite useful so I'm going to actually create a function that's called umm that's umm you know i'm going to call it aah rainbowSongLoad.. rainbowSong() and i'm going to pass it (song1, 'rainbow.mp3') you'll see what i'm going to do in a second and I'm gonna call that function again now these should really be like two different mp3 files but i'm just going to use one mp3 file for right now; you'll see in a minute why I'm doing this so I have a separate function what I want to do is say i want... the variable song1 to go with this mp3 file and you know what am gonna do this is I I... even though that it's the same music umm what I'm going to do is ahh umm hold on, reveal in finder.. show in finder ah this is this is going to make things much less confusing I'm actually just going to create two versions of the file because what you actually would be doing is if you want to load two songs ok so now there are two different mp3 files for... all you know there are two different songs and what I'm going to do here right? I have 2 that I want to load so i'm creating a function called rainbowSong() and in that function what does that function take aah rainbowSong() it takes a variable like song and it takes a file name and what I want to do is I want to load that file into that particular variable name and then know that it's loaded and play that particular variable so here in other words now this loaSound function needs to then go inside that function ok and what am I loading I'm actually loading this file name now so i just created a wrapper function to call the loadSound function and be able to receive the file name as an argument why? because now what I can do is in this soundLoaded function I could say song equals that particular sound, right? This is a closure, I now have access to either the variable song1 or song2 I have a whole video just about this concept that you can go and look and now what I will can do is I can say song.play() so in other words I was able to.. here if I say song1 equals to loadSound soundLoaded, song2 equals loadSound soundLoaded and this is my soundLoaded function, I have no way to know when that callback happens which file was it but here I now know how to do that because I have then instead taken the load sound away and made that happen in my own function that receives arguments this is essentially how you pass arguments to a callback I pass arguments to a function that then defines the callback within that function so I have access to those arguments and that's a JavaScript closure. This function is enclosed in that other function, ok that's a bit of a side topic here but it's kind of necessary for this type of thing that you might be doing umm there's an error I made a mistake I'm missing a semicolon somewhere umm ah yes thank you very much this is an error the chat thankfully saved me there so I'm going to put that; I think I've got everything right now so what I want to do.. ah forget about the loading animation for a second what I want to do now is I just want to do this, console.log(filename); so here I'm going to be able to see the file that was loaded run this.. rainbow1 so you can see those files I now have access to when they're loaded separately and I get this like weird little pause when the first one loads in my animation I don't know why that's happening the whole point of doing this is to eliminate that but ok so I've got my loading animation going and now what I can do is I could have a counter.. you know I really should be using an array let's use an array yeah let's use an array that's how you would do it probably i'm going to make this an array and what I'm actually going to do is I'm going to say 0 1 so I'm just going to pass in an index into the array those should be named rainbow0 rainb.. and and then what I'm going to do is here I'm going to say songs index and this is now an index, songs[index] equals sound and I'm gonna say console.log(index + ' ' + filename) and then songs[index] so now I have an array of sounds and only two of them and you can see there being loaded separately 0 and 1 now I could easily have something like a counter right? so i could say aah counter equals 0 and here whenever the song is loaded I could say you know counter++ and I could say if counter equals 2 then loading equals false; so now i know only stop the loading animation actually only stop the loading animation ac... after I've loaded everything and there we go so you can see it's loading them one at a time and it's loading them one at a time. PAUSE edit point. Ok I'm back and what I'm going to do now is improve the code with a few clean up things as well as show you how to have a loading bar kind of go through the percentages as a bunch of things are loading so while I was taking a quick break their what i did is i made I added 10 songs to a folder so now what I want is for this sketch to load all 10 so there's a bunch of improvements i can do here number one is I can have a variable called total songs and that's going to be equal to 10 the other thing I could do is I really don't need to call this individually with passing in the index I can really just write a loop right now I could say for (var i = 0, i < totalSongs; i++ ) and really all I need to do now is I don't need that index I can just say umm.. I can just say a let me let me dynamically make that file name let's leave the index there for right because am gonna I'll show you why no.. why you may or may not want to use it and I can just put a.. sorry, i in the file name so this is my di... me saying like instead of saying load rainbow1 load rainbow2 I'm saying loop through i going from 0 up to 10 and loop and get.. do rainbow i rainbow i, which israinbow0 rainbow1 rainbow2.. that's a song; ♫rainbow0 rainbow1♫ ummm ok so now we should see 0 1 2 3 now notice it's stopped, it thinks that loaded after got just threw 2 that's because i have this counter here and really I need to say when this counter equals totalSongs now now that I have that as a variable so now i can say it's loading 0 1 2 3 4 5 6 7 8 9 and (claps) then it's finished loading so I'm getting pretty I'm doing pretty well here and let's see let's make a few more improvements are now one thing is I don't actually need this index here I can get rid of the index here because one thing I could just do and I'm going to keep the file name here is I can just say songs.push(sound) and that will just say anything thats coming in push it onto the array but there is a slight issue with this let's see... well first of all the issue is that nothing.. ♪I'm loading forever♪ ♪loading forever♪ umm what did i miss here? Oops I have index still here as an argument where I just want filename now and you can see 0 1 2 3 4 5 6 7 8 9 wow so what I was really expecting to happen is for those not to come in order they did come in order which is kind of lucky but there's no way to guarantee that they're going to happen in order on so do if you care about the order of those things in the array then you're going to want to like keep the index as you're calling the load function but in this case it didn't really matter so what I'm going to do now is do something really really simple in addition as i'm going to say ok I'm going to draw a rectangle I'm going to make a stroke of 255 and I'm going have noFill() and I'm going to draw a rectangle from 10, 10 to like 500 across that's 20 pixels high. Let's just see that there.. oops that's way too wide still too wide, ok so you can see now i have a rectangle up at the top and then what I want to do is draw a rectangle with noFill I mean no sorry noStroke() and I want to give it a fill like to 255 and maybe with some alpha and then I want to draw that same rectangle but I want the with to be a variable so if I do this for example just give that width equal to mouseX look as I move my mouse around that rectangle there's a rectangle inside the outer one and now since I have that counter I can say that is something like 200 times the counter/totalSongs right? because counter is counting up how many total songs and we should be able to see here on as they're loading you can see the progress of that loading bar moving forward uuh ok I like this. This will be like like a gif animation.. the loading song. ♪♪♪loading loading loading loading loading loading loading loadiiiing ♪♪ ♪loaded!♪ ok, alright so that's how to program a loading animation in p5.js instead of using preload() which I've now commented out you can call things in setup() with callbacks you can keep track of when the callbacks are finished you can put things into an array you can use a closure to keep track of a whole bunch of things with the same callback there's a lot to this but hopefully this gave you some JavaScript learning and information and was helpful make your... make a nicely designed more beautiful rainbow colored perhaps loading animation share it with me and I would love to check it out, okay thanks for watching this video and (chuckles) there maybe an addendum on it I'm not sure just yet or this might be the end I don't know it'll be a mystery.. it's a mystery it's a mystery oh I need the soundboard really badly ♫♪ suspense music play ♪♫ goodbye maybe.....
