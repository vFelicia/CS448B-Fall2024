With timestamps:

00:02 - It's me, back for another
video about objects and classes
00:07 - and stuff using
JavaScript and p5.js.
00:10 - So one of the things that I get
asked all the time, I think.
00:13 - I wander around the street
and people are like, hey,
00:15 - you there.
00:17 - If I made a bunch of
bubble objects in a canvas
00:20 - in the browser-- can you imagine
if this actually happened to me
00:22 - on the street--
00:24 - and I want to interact with
them with a mouse individually,
00:26 - how would I know if
the mouse is hovering
00:29 - over one versus the other?
00:30 - How would I deal with that?
00:31 - Well, just a little bit
of this aside before.
00:33 - So this is what I want to
implement in this video.
00:37 - How can you have
the user interact
00:38 - with individual objects?
00:41 - How do I set the code
to make that happen?
00:43 - How does this work?
00:44 - So here's the thing.
00:46 - Eventually, if
you're watching all
00:48 - of these videos in the
order that they are,
00:50 - there is going to be
a time in the future.
00:53 - I actually recorded
these videos in the past,
00:55 - but for you it will be the
future where I will add things
00:58 - below the canvas.
00:59 - Like, there will
be a button here,
01:00 - or like a box with text in it.
01:02 - And the canvas is actually
one of those things too.
01:04 - On this page is a canvas.
01:05 - I could put other
things on this page.
01:07 - Everything on a web page
can register events.
01:11 - It can register this
event like a click-on--
01:14 - that's not really an
event-- or a mouse over,
01:16 - and there's all
sorts of fancy ways
01:18 - in JavaScript and in p5.js.
01:19 - to handle all these
different types of events
01:21 - to know how users are
interacting with things.
01:24 - But this thing here, this thing
here is one thing, the canvas.
01:29 - The only thing that p5.js.
01:30 - Knows is if you're clicking
on the canvas or not.
01:34 - And actually to be honest,
if you click off the canvas,
01:36 - it's going to make one
kind of like in its mind
01:38 - off the canvas that might wonder
on, which you just saw happen.
01:41 - Because I'm using this
global mouse pressed event.
01:45 - I have an event, it's just
press the mouse anywhere.
01:47 - But what if I want
to have an event
01:49 - that's like only when
I click on this circle.
01:52 - So the circles are
my own invention,
01:55 - they are pixels that I've
drawn in their space.
01:58 - It's up to me as the
programmer, the person
02:01 - who designed this sketch to
figure out how to handle that.
02:05 - And so that's what I'm
going to do in this video.
02:07 - So let me think about,
what would make sense?
02:09 - I think what I'm going to
do is I'm going to rewrite
02:11 - this sketch a little bit.
02:12 - I'm going to get rid of
this mouse pressed function.
02:14 - I mean, I'm going
to come back to it.
02:16 - But in Setup I'm going to
say, let x equal random with.
02:23 - Let y equal random height.
02:27 - Let r equal random 10 comma 50.
02:33 - And then I'm going
to say, I'm just
02:35 - going to make this new bubble.
02:36 - I'm going to take this
exact code from the bottom.
02:38 - You're over there.
02:39 - I'm like, I never
know where to look.
02:42 - One of these days
I'll figure it out.
02:44 - Take this exact code
from the bottom,
02:47 - and I'm going to make a
new bubble, all right.
02:53 - So actually, let's
do this first.
02:57 - Let's peel away from
the array for a second.
03:00 - And let's simplify our lives.
03:02 - And I'm just going to make
a single bubble object,
03:07 - and that's going to be it, and
forget about this array just
03:10 - for a little bit.
03:11 - And so I'll come back
to the array eventually.
03:15 - Now notice, I'm not changing
this bubble class at all.
03:21 - It's still the same thing.
03:23 - All right, where is it?
03:24 - Ah, but I do need to say
that individual bubble move
03:29 - bubble.show.
03:32 - So what I want to do is I want
to have something to happen
03:34 - when I click on that bubble.
03:36 - So your first instinct
might be, aha.
03:39 - Well, there's this
mouse pressed function
03:41 - that I can write out here.
03:44 - Oh, ah, look at this.
03:45 - I wrote this nice mouse pressed
function right out here, yay.
03:50 - So why not, why not.
03:52 - There's this bubble
class that I've
03:53 - been learning all about it.
03:55 - I know, let's just do this.
03:58 - Console log clicked
on bubble, right?
04:03 - Won't that work?
04:04 - That will work.
04:04 - Oh, I'm so excited.
04:05 - Oh, this is going to work.
04:08 - Click, click, click, I
hear click on the bubble.
04:10 - Oh, nothing's happening.
04:12 - Nothing's happening.
04:12 - So I've sent you in the
completely wrong direction.
04:15 - Although the instinct
is kind of right, yeah.
04:18 - This is like a function
that's just out in the wild.
04:20 - It's global so it's
for any mouse pressed.
04:23 - This is a function that's inside
of the bubble, so it's fine.
04:27 - But here's the thing.
04:29 - This function mouse pressed
is a special function
04:33 - that p5 recognizes.
04:34 - Just like set up and draw
are special functions
04:36 - that p5 recognizes.
04:38 - p5 is not going to go
inside of these new classes
04:41 - that you write and
somehow recognize
04:43 - that you have a mouse
pressed function,
04:45 - know where the object
is, figure out,
04:46 - this is not part
of its capability.
04:49 - I don't even know how it
could even be capable of that.
04:51 - But there isn't any reason why
I couldn't write a function.
04:55 - And you know, it's a little
bit problematic for me
04:57 - to call it mouse pressed.
04:58 - So maybe, let's just call
it clicked for right now.
05:04 - There's no reason why I couldn't
inside of the mouse pressed
05:07 - function say, hey, whenever
the user clicks the mouse,
05:12 - I know that globally.
05:14 - Why don't I just call another
function inside any my objects
05:18 - that need to handle that click.
05:20 - So I would say bubble.clicked.
05:21 - So now, look at this.
05:22 - It's going to work.
05:23 - Oh.
05:23 - Let's get a bigger one.
05:24 - It's going to work.
05:25 - OK, I'm going to click on it.
05:25 - Click on it.
05:26 - Ah, look, I clicked
on the bubble.
05:27 - Look at me do it again.
05:28 - Oh, I clicked on the
bubble three times.
05:30 - I'm going to click on it over
here now, 6 times, 7 times, 8.
05:33 - So here's the thing.
05:34 - Remember, this is a
global mouse pressed.
05:37 - So I can call my function
on this bubble object.
05:41 - But it's just going to do
this every single time.
05:43 - It's up to me to write
some code to figure out,
05:48 - wherever I click the mouse,
I know where the bubble is.
05:51 - And I know how big it is.
05:53 - This dot, if you know
the x the y and the r,
05:56 - we could write some code.
05:57 - So I could say something like--
06:02 - so here's a little
bit of a moment here.
06:04 - Let's say, one of the
things I need to figure out
06:06 - and I've probably done
this in other videos,
06:08 - but this seems like a nice
time to talk it through.
06:10 - If I had a circle, how do I know
if a point is inside the circle
06:15 - or is outside the circle?
06:16 - Because what I'm trying to do
is figure out, is the mouse--
06:19 - that's the mouse arrow--
06:21 - did it click outside
or inside the circle?
06:24 - I could ask the same
question for a square.
06:28 - I could ask that
question for a triangle.
06:30 - I could ask that question for
some arbitrary strangely shaped
06:32 - polygon.
06:33 - And all of these are going to
get progressively more complex.
06:37 - A rectangle and a circle
are pretty easy to do.
06:40 - This is much harder, but
all of this is possible.
06:42 - The point is, I need to write
some code to figure that out.
06:45 - That code needs to go here.
06:48 - Wherever that mouse is, is
it actually related to where
06:51 - this.x, this.y, this.r are?
06:53 - So how do I do that?
06:54 - So one of the nice things
on p5 and both processing--
06:56 - if you were using that instead--
06:58 - have is a function called dist
which stands for distance.
07:01 - And I can give that function 2
points, arbitrarily x1, y1, x2,
07:08 - y2.
07:08 - So if I make one of those
points the center of the circle,
07:13 - maybe I'll call that cx, cy.
07:17 - And then the other point
over here for example
07:20 - is the mouse where
the mouse clicked.
07:21 - We'll call that mx, my.
07:26 - I could pass these values
into that distance function
07:28 - and get the length of this line.
07:30 - Call that d.
07:33 - Something that I happen
to know from my code--
07:37 - whoops, wrong button-- is
r, the radius of the circle.
07:42 - Now I'm actually using
it as a radius, I am.
07:44 - Because remember, the
ellipse function itself
07:45 - wants wants the diameter.
07:46 - So r really means the radius
which is half of the diameter.
07:49 - What do I mean by that?
07:51 - So I happen to know,
this.r is this distance.
07:57 - Or another way of looking at
it is this distance right here.
08:00 - So guess what, this is
probably popping into your head
08:03 - just about now.
08:04 - If the distance between
the center and the mouse
08:07 - is greater than the
radius, then that point
08:09 - is outside the circle.
08:11 - If it's less than the
radius, then that point
08:13 - is inside the circle.
08:17 - OK, so now we can
come over here,
08:20 - and I can start
to add that code.
08:22 - I can say, let me find
the distance between mouse
08:27 - x, mouse y, and this
dot x, and this dot y.
08:33 - And I can now say--
08:36 - now, this is not this.d because
this is a local variable
08:40 - that I'm using
just to calculate.
08:41 - At this moment, the distance
is less than this.r.
08:47 - Then the console log
clicked on bubble.
08:52 - Now we're really
getting somewhere.
08:54 - [DRUM ROLL]
09:07 - OK, so this is a
moment of success.
09:09 - And that was really loud.
09:11 - I don't know if that's
going to ruin this video.
09:14 - So what I've now
successfully done
09:16 - is I'm able to determine and
only print out this statement.
09:20 - So what's the full story here?
09:22 - This is where I know
that the mouse has
09:24 - been pressed anywhere.
09:26 - So it's up to me
now to say, well,
09:28 - if the mouse is
pressed anywhere,
09:29 - let's check if the mouse
is pressed for this bubble.
09:31 - And guess what?
09:33 - Let's go back to the array now.
09:35 - Let's put this array back.
09:39 - Let's make this a single bubble.
09:43 - Let's put that into the array.
09:45 - And now this loop
here, just like in Draw
09:51 - when I want to move
and show everything,
09:53 - there's no reason why I couldn't
when I click the mouse use
09:56 - that same exact
loop and just call
09:58 - clicked on all the bubbles
that are in that array.
10:03 - So let's see if this works.
10:05 - Whoops, OK, I have some error.
10:06 - Bubble is not defined a draw.
10:08 - So I forgot that I still have
this old individual bubble
10:12 - that I don't need anymore.
10:15 - So I can click on it.
10:17 - It worked.
10:17 - I can click outside.
10:18 - I don't see anything.
10:20 - Let's actually add now.
10:26 - Let's do this five
times in Setup.
10:30 - So I'm going to add 5 bubbles.
10:32 - And now in theory, we're
getting that message
10:36 - if I click on any of them.
10:37 - But here's the thing.
10:38 - I really want
something to happen.
10:40 - So I could change its color.
10:42 - Here's the thing.
10:44 - What if I were to just hover
over these bubbles, AND I
10:46 - wanted to change
their color if I
10:48 - were to hover over the bubbles?
10:49 - And then have something when I--
10:51 - Well, actually, you know what?
10:52 - Hold on.
10:52 - There's another important
point that I want to make.
10:55 - There's something
about this function
10:57 - that I don't really like.
10:58 - And yes, I'm going to do
this from time to time.
11:01 - And you will too, and it's OK.
11:02 - But right there, I
don't love the fact
11:04 - that I'm using
mouse x and mouse y.
11:06 - Those are global variables.
11:08 - In theory, I want
my bubble class
11:10 - to only know about itself.
11:12 - It doesn't really need to
know about the outside world.
11:15 - It doesn't have to know it's on
a canvas that there's a mouse.
11:17 - And in theory, what
I want to be able do
11:19 - is write a generic bubble
class that I could say,
11:22 - hey, is the mouse
clicking on you?
11:23 - Or is this other object at
the same location as you?
11:29 - Or, I switch it to using like
a connect to track my hand.
11:32 - Is my hand location
near this bubble?
11:34 - So really what would
make more sense
11:36 - is for me to actually
put arguments
11:40 - into the click function.
11:41 - And again, I'm doing
this sort of awful thing
11:43 - where I'm giving them the
same name as properties
11:49 - of the class itself.
11:50 - I'm giving these
parameters x and y
11:51 - the same name as this.x, this.y.
11:53 - But JavaScript is very
good at distinguishing
11:56 - because this x and y are
the ones that are coming in
12:00 - through the parameters.
12:01 - And these here are
the properties,
12:03 - this dot of the object itself.
12:04 - But maybe if I wanted to be a
little less confusing about it,
12:09 - I might say px, py for like
pixel x or pixel y or something
12:12 - like that.
12:14 - And so now, what
makes more sense
12:15 - and what I really want to do
is pass in mouse x, mouse y.
12:19 - Because what I want to do when
the mouse is pressed is ask,
12:23 - does this point?
12:25 - And really, I might do something
like contains or inside
12:28 - or it includes.
12:29 - I could name that
function some other way
12:31 - because really
what I'm asking is
12:35 - that point inside that object.
12:37 - So interestingly
enough, what I could do
12:40 - is let's give the
bubbles a color.
12:44 - I going to give it like a
brightness and make it a 0.
12:51 - And I'm going to say,
fill this.brightness.
12:58 - And I'll give it some alpha.
13:02 - And then, what I am going to do
is when I've clicked on them,
13:05 - I am going to say
this.brightness equals 255.
13:13 - So the idea here is
that now bubbles each
13:17 - have a new property, a color.
13:19 - It starts at 0.
13:21 - And anytime I click
on one of them,
13:23 - I turn that one a
different color.
13:25 - So what's really
nice about this is,
13:26 - I have one function,
one function
13:29 - that's part of the class.
13:32 - And I could use that function
in any way that I want.
13:35 - All that function does is
test at any generic point
13:38 - is inside a given object.
13:40 - And if it is inside that shape,
the geometry of that object,
13:46 - if it is, I change its color.
13:48 - And the way I happen to be using
it is by saying, hey, whenever
13:51 - the user clicks
the mouse anywhere,
13:52 - let's go check all the
objects in our array
13:54 - and see if the mouse
is inside them.
13:57 - So all right, I think this
ends this particular video.
14:00 - I need to do something.
14:03 - One thing I would really
actually like to do,
14:06 - you should do an exercise here.
14:07 - So if you're watching
this, try to make
14:09 - it do something different if
you hover over the bubble,
14:13 - change the bubble
to a rectangle,
14:15 - see if you can make the same
thing work with a rectangle.
14:18 - Allow yourself to
click on it twice.
14:20 - Turn it on and off.
14:21 - That's something you could try.
14:23 - And have a different
behavior for when
14:25 - you click on it versus
when you just mouse
14:27 - over it, those types of things.
14:28 - But something that I want
to do, and maybe I'll
14:30 - do it in the next video is when
I click on each one of these,
14:33 - I remove them from the world.
14:36 - So I can add bubbles and
delete them sometimes.
14:39 - We have to look at how to
delete things from an array, OK?
14:41 - See you in the next
video, perhaps, maybe.
14:44 - OK, goodbye.
14:45 - [MUSIC PLAYING]

Cleaned transcript:

It's me, back for another video about objects and classes and stuff using JavaScript and p5.js. So one of the things that I get asked all the time, I think. I wander around the street and people are like, hey, you there. If I made a bunch of bubble objects in a canvas in the browser can you imagine if this actually happened to me on the street and I want to interact with them with a mouse individually, how would I know if the mouse is hovering over one versus the other? How would I deal with that? Well, just a little bit of this aside before. So this is what I want to implement in this video. How can you have the user interact with individual objects? How do I set the code to make that happen? How does this work? So here's the thing. Eventually, if you're watching all of these videos in the order that they are, there is going to be a time in the future. I actually recorded these videos in the past, but for you it will be the future where I will add things below the canvas. Like, there will be a button here, or like a box with text in it. And the canvas is actually one of those things too. On this page is a canvas. I could put other things on this page. Everything on a web page can register events. It can register this event like a clickon that's not really an event or a mouse over, and there's all sorts of fancy ways in JavaScript and in p5.js. to handle all these different types of events to know how users are interacting with things. But this thing here, this thing here is one thing, the canvas. The only thing that p5.js. Knows is if you're clicking on the canvas or not. And actually to be honest, if you click off the canvas, it's going to make one kind of like in its mind off the canvas that might wonder on, which you just saw happen. Because I'm using this global mouse pressed event. I have an event, it's just press the mouse anywhere. But what if I want to have an event that's like only when I click on this circle. So the circles are my own invention, they are pixels that I've drawn in their space. It's up to me as the programmer, the person who designed this sketch to figure out how to handle that. And so that's what I'm going to do in this video. So let me think about, what would make sense? I think what I'm going to do is I'm going to rewrite this sketch a little bit. I'm going to get rid of this mouse pressed function. I mean, I'm going to come back to it. But in Setup I'm going to say, let x equal random with. Let y equal random height. Let r equal random 10 comma 50. And then I'm going to say, I'm just going to make this new bubble. I'm going to take this exact code from the bottom. You're over there. I'm like, I never know where to look. One of these days I'll figure it out. Take this exact code from the bottom, and I'm going to make a new bubble, all right. So actually, let's do this first. Let's peel away from the array for a second. And let's simplify our lives. And I'm just going to make a single bubble object, and that's going to be it, and forget about this array just for a little bit. And so I'll come back to the array eventually. Now notice, I'm not changing this bubble class at all. It's still the same thing. All right, where is it? Ah, but I do need to say that individual bubble move bubble.show. So what I want to do is I want to have something to happen when I click on that bubble. So your first instinct might be, aha. Well, there's this mouse pressed function that I can write out here. Oh, ah, look at this. I wrote this nice mouse pressed function right out here, yay. So why not, why not. There's this bubble class that I've been learning all about it. I know, let's just do this. Console log clicked on bubble, right? Won't that work? That will work. Oh, I'm so excited. Oh, this is going to work. Click, click, click, I hear click on the bubble. Oh, nothing's happening. Nothing's happening. So I've sent you in the completely wrong direction. Although the instinct is kind of right, yeah. This is like a function that's just out in the wild. It's global so it's for any mouse pressed. This is a function that's inside of the bubble, so it's fine. But here's the thing. This function mouse pressed is a special function that p5 recognizes. Just like set up and draw are special functions that p5 recognizes. p5 is not going to go inside of these new classes that you write and somehow recognize that you have a mouse pressed function, know where the object is, figure out, this is not part of its capability. I don't even know how it could even be capable of that. But there isn't any reason why I couldn't write a function. And you know, it's a little bit problematic for me to call it mouse pressed. So maybe, let's just call it clicked for right now. There's no reason why I couldn't inside of the mouse pressed function say, hey, whenever the user clicks the mouse, I know that globally. Why don't I just call another function inside any my objects that need to handle that click. So I would say bubble.clicked. So now, look at this. It's going to work. Oh. Let's get a bigger one. It's going to work. OK, I'm going to click on it. Click on it. Ah, look, I clicked on the bubble. Look at me do it again. Oh, I clicked on the bubble three times. I'm going to click on it over here now, 6 times, 7 times, 8. So here's the thing. Remember, this is a global mouse pressed. So I can call my function on this bubble object. But it's just going to do this every single time. It's up to me to write some code to figure out, wherever I click the mouse, I know where the bubble is. And I know how big it is. This dot, if you know the x the y and the r, we could write some code. So I could say something like so here's a little bit of a moment here. Let's say, one of the things I need to figure out and I've probably done this in other videos, but this seems like a nice time to talk it through. If I had a circle, how do I know if a point is inside the circle or is outside the circle? Because what I'm trying to do is figure out, is the mouse that's the mouse arrow did it click outside or inside the circle? I could ask the same question for a square. I could ask that question for a triangle. I could ask that question for some arbitrary strangely shaped polygon. And all of these are going to get progressively more complex. A rectangle and a circle are pretty easy to do. This is much harder, but all of this is possible. The point is, I need to write some code to figure that out. That code needs to go here. Wherever that mouse is, is it actually related to where this.x, this.y, this.r are? So how do I do that? So one of the nice things on p5 and both processing if you were using that instead have is a function called dist which stands for distance. And I can give that function 2 points, arbitrarily x1, y1, x2, y2. So if I make one of those points the center of the circle, maybe I'll call that cx, cy. And then the other point over here for example is the mouse where the mouse clicked. We'll call that mx, my. I could pass these values into that distance function and get the length of this line. Call that d. Something that I happen to know from my code whoops, wrong button is r, the radius of the circle. Now I'm actually using it as a radius, I am. Because remember, the ellipse function itself wants wants the diameter. So r really means the radius which is half of the diameter. What do I mean by that? So I happen to know, this.r is this distance. Or another way of looking at it is this distance right here. So guess what, this is probably popping into your head just about now. If the distance between the center and the mouse is greater than the radius, then that point is outside the circle. If it's less than the radius, then that point is inside the circle. OK, so now we can come over here, and I can start to add that code. I can say, let me find the distance between mouse x, mouse y, and this dot x, and this dot y. And I can now say now, this is not this.d because this is a local variable that I'm using just to calculate. At this moment, the distance is less than this.r. Then the console log clicked on bubble. Now we're really getting somewhere. [DRUM ROLL] OK, so this is a moment of success. And that was really loud. I don't know if that's going to ruin this video. So what I've now successfully done is I'm able to determine and only print out this statement. So what's the full story here? This is where I know that the mouse has been pressed anywhere. So it's up to me now to say, well, if the mouse is pressed anywhere, let's check if the mouse is pressed for this bubble. And guess what? Let's go back to the array now. Let's put this array back. Let's make this a single bubble. Let's put that into the array. And now this loop here, just like in Draw when I want to move and show everything, there's no reason why I couldn't when I click the mouse use that same exact loop and just call clicked on all the bubbles that are in that array. So let's see if this works. Whoops, OK, I have some error. Bubble is not defined a draw. So I forgot that I still have this old individual bubble that I don't need anymore. So I can click on it. It worked. I can click outside. I don't see anything. Let's actually add now. Let's do this five times in Setup. So I'm going to add 5 bubbles. And now in theory, we're getting that message if I click on any of them. But here's the thing. I really want something to happen. So I could change its color. Here's the thing. What if I were to just hover over these bubbles, AND I wanted to change their color if I were to hover over the bubbles? And then have something when I Well, actually, you know what? Hold on. There's another important point that I want to make. There's something about this function that I don't really like. And yes, I'm going to do this from time to time. And you will too, and it's OK. But right there, I don't love the fact that I'm using mouse x and mouse y. Those are global variables. In theory, I want my bubble class to only know about itself. It doesn't really need to know about the outside world. It doesn't have to know it's on a canvas that there's a mouse. And in theory, what I want to be able do is write a generic bubble class that I could say, hey, is the mouse clicking on you? Or is this other object at the same location as you? Or, I switch it to using like a connect to track my hand. Is my hand location near this bubble? So really what would make more sense is for me to actually put arguments into the click function. And again, I'm doing this sort of awful thing where I'm giving them the same name as properties of the class itself. I'm giving these parameters x and y the same name as this.x, this.y. But JavaScript is very good at distinguishing because this x and y are the ones that are coming in through the parameters. And these here are the properties, this dot of the object itself. But maybe if I wanted to be a little less confusing about it, I might say px, py for like pixel x or pixel y or something like that. And so now, what makes more sense and what I really want to do is pass in mouse x, mouse y. Because what I want to do when the mouse is pressed is ask, does this point? And really, I might do something like contains or inside or it includes. I could name that function some other way because really what I'm asking is that point inside that object. So interestingly enough, what I could do is let's give the bubbles a color. I going to give it like a brightness and make it a 0. And I'm going to say, fill this.brightness. And I'll give it some alpha. And then, what I am going to do is when I've clicked on them, I am going to say this.brightness equals 255. So the idea here is that now bubbles each have a new property, a color. It starts at 0. And anytime I click on one of them, I turn that one a different color. So what's really nice about this is, I have one function, one function that's part of the class. And I could use that function in any way that I want. All that function does is test at any generic point is inside a given object. And if it is inside that shape, the geometry of that object, if it is, I change its color. And the way I happen to be using it is by saying, hey, whenever the user clicks the mouse anywhere, let's go check all the objects in our array and see if the mouse is inside them. So all right, I think this ends this particular video. I need to do something. One thing I would really actually like to do, you should do an exercise here. So if you're watching this, try to make it do something different if you hover over the bubble, change the bubble to a rectangle, see if you can make the same thing work with a rectangle. Allow yourself to click on it twice. Turn it on and off. That's something you could try. And have a different behavior for when you click on it versus when you just mouse over it, those types of things. But something that I want to do, and maybe I'll do it in the next video is when I click on each one of these, I remove them from the world. So I can add bubbles and delete them sometimes. We have to look at how to delete things from an array, OK? See you in the next video, perhaps, maybe. OK, goodbye. [MUSIC PLAYING]
