With timestamps:

00:00 - Hello and welcome to a coding rainbow
coding challenge. Today's coding challenge
00:06 - I'm going to attempt to make a flappy
bird clone which I admit it is kind of
00:12 - like a bit of a cliché probably at this point
don't know how many people have made
00:15 - flappy bird clone tutorial whatever's on
in the world but it was requested I
00:21 - think it will be fu,n I'm going to give
it a try, I'm going to do it in
00:23 - JavaScript I'm going to try to do it
fast
00:25 - but with time to explain and time to
relax and just enjoy myself and
00:30 - hopefully you might enjoy watching this. So umm
00:32 - if you're not familiar with flappy bird
then I would say pause this video and go
00:37 - familiarize yourself with it.
I actually don't think I've ever
00:39 - actually played it before but I am
somewhat familiar with the gameplay
00:42 - we'll see how well I do, I've got a live
chat going on and you guys can tell me
00:47 - how I'm doing
00:48 - if you're watching this is a YouTube
archive you won't be able to follow
00:50 - along live but that's fine.
00:51 - Ok so I'm using p5.js which is a
JavaScript framework has a function setup
00:55 - it has a function draw and so the only
thing I've got so far in the browser is
00:59 - just a canvas
01:01 - that's 400 x 600 pixels and a black
background on that canvas
01:04 - so the first thing that I want to do I
actually have a separate javascript file
01:07 - called bird.js and I'm actually
going to make this a constructor
01:13 - function and the bird.. all the bird
really needs is a y-value, right? The bird
01:18 - moves up and down 
and it stays in one spot
01:20 - so I'm going to give this.. bird.. I'm going
to start the bird off in the center of
01:24 - the window and I'm going to write also a
function called show where I draw the
01:30 - bird and again I'm gonna.. my design is
going to be very poor so it's going to
01:35 - be up to you to take my code which will
be linked in this description and make
01:39 - something more beautiful and interesting
and reef off with this so I'm just going to
01:42 - say let's make a white circle and you
what let's get this bird and x-position
01:47 - as well even though it will be fixed but
let's just try
01:50 - 25 for right now and I'm gonna never
forget the.. ♫this dot♫ you always need
01:58 - this dot in JavaScript. So let's make this
bird a circle and let's say in the
02:06 - main program now
02:08 - var bird and we're going to say bird
equals new bird and bird.show(), so we
02:17 - should have something a little bit more
interesting now there it is
02:20 - bird.. width/2 you know would probably
makes more sense if I want the bird to
02:24 - be in the middle to be height/2
02:27 - so let's fix that. I'm gonna say height/2,
I think the bird could be a little bit
02:32 - bigger and the bird could be a little
bit more in on the screen
02:36 - so there we go this is the beginning of
flappy bird now what happens to the bird
02:40 - without you doing anything?
02:42 - the bird falls down. So oops oops wrong window
02:46 - so I'm going to go here and I'm going to
say this.update equals function and it
02:52 - would be good to have some sort of
variable called gravity and gravity
02:55 - being the force that's pushing that bird
down and let's say that the gravity
03:01 - here is going to be one
03:02 - I also need a velocity, right? I need a
velocity so gravity is the force that's
03:06 - causing the velocity of the bird to
increase so I'm gonna say
03:09 - this.velocity equals 0 and now I'm going to
say this.y changes by this.velocity
03:17 - and this.velocity changes by
this.gravity
03:26 - ok so now we have a function that's
going to push that bird down so I'm
03:30 - gonna go over here and I'm going to say
also bird.update();
03:34 - there we go bye bird it flew down. Now
03:37 - we should probably do something where the
bird stops when it gets to the
03:41 - bottom of the window
03:42 - that makes sense so I'm gonna go back to
the bird and I'm gonna say.. I'll just do this
03:46 - in the update function, I could write a
separate.. and I'm gonna say if this.y
03:50 - is greater than height then
03:53 - then I'm just gonna keep the bird
on the screen I'm going to say this.y
03:58 - equals height and I'm also going to set
that velocity to zero so we can see here
04:05 - that bird stops. I don't know if that's
actually what happens in flappy bird but
04:09 - I just kind of want to do that anyway
04:11 - and you know what I'm going to do that
also for the top of the window because
04:14 - ultimately I'm going to be able to push
the bird up
04:18 - so let's do that for less than zero,
now of course...
04:22 - oh ok so now what.. How does the game work?
04:27 - I think it's a mobile game right you
could tap your mobile device.. this is my
04:30 - mobile device
04:31 - so I mean as a tap I'm going to just
use the spacebar on my keyboard so in p5.js
04:36 - I can write a function called
keypPessed and I can check to see if the
04:42 - key is the space bar
04:44 - and let me just make sure this is working
I'm just going to console log something
04:49 - right now so I'm going to run this and you
can see each time I press the spacebar
04:53 - it says here in the console, it prints out,
SPACE. So that works
04:57 - so what do I want to do I want to cause a
force to cause that bird to go up so I'm
05:04 - going to say bird.up and so what's
going to happen with this bird.up
05:08 - function?
05:11 - What do I want to do.. I want instead of
the velocity being pushed down by
05:18 - gravity
05:19 - I want to say this.velocity minus
equals, I want it to go up or I could say
05:25 - plus equals but some minus amount
05:27 - now what if I just said minus this.gravity?
Let's try that for a second just to see
05:31 - what happens
05:32 - Come on! Wait oh you know what's a little bit
annoying, I have to.. oh I took off that
05:39 - console.log(), hold on.
05:40 - Let's say minus equals this.gravity
times 10 so nothing's working here and I
05:46 - have a kind of a sneaking suspicion that
I've done something totally wrong
05:51 - bird.up let's make sure this
is happening.
05:59 - I'm gonna say print line this.velocity
06:07 - ok so you can see that's working so
let's try to tune.. I think there's sort
06:12 - of an issue here we've got to sort of
tune the numbers
06:15 - so let's make the gravity just for right
now a lot less strong so it's not going
06:19 - so fast
06:20 - now you can see though that this isn't
really doing very much
06:26 - let's make a this.up force
06:30 - let's call this lift and we'll say it's
negative 10
06:36 - so I'm going to say this.velocity
plus equals this.lift; not left lift.
06:42 - There we go, so you can see there's a
sort of an element of tuning those
06:48 - numbers
06:48 - so now it doesn't really feel like it's
falling fast enough but me pushing the
06:52 - spacebar is kind of working out.
06:55 - What happens if I hold down the spacebar?
so that's good ok so that lift is too
06:58 - much. Let's make the gravity 0.6 and
let's keep the lift there but now I'm
07:05 - going to need to make the lift a little
bit stronger.
07:07 - There we go, so this..
07:11 - so now I have, I sort of have the game
going and lift is a little bit too strong
07:15 - let's make it less strong
07:23 - so this you know, something something
that I could do is actually limit the
07:27 - top speed or also like give
it some.. something that I could also do
07:33 - is add some like air resistance in
general which I could say something like
07:37 - this.velocity times equals 0.9
so that actually like helps with things
07:45 - quite a bit because it's just there's
some sort of like a limit to what the
07:48 - speed is so now I've got something that
is a bit more kind of like reasonable to
07:53 - play here. So you could spend your time
tuning this even more but I think just
07:57 - like keeping the velocity keeping some
like air resistance by always shrinking
08:01 - the velocity a little bit
08:02 - tuning how much the lift is versus the
gravity those types of things you can
08:06 - kind of play around with.
08:07 - Ok, so now we have the basic game
mechanic here which is just a falling
08:12 - circle and each time I press the
spacebar
08:14 - I can kind of like have it lift up a
little bit. Now what do we need to add? We
08:18 - need to add those pipe things that kind
of come from the right of the screen,
08:23 - I'm only at eight minutes by the way
which is pretty good; the pipes things
08:27 - that come from the right of the screen
and you have to steer your way through.
08:30 - Let's see if we can do this. So let's
think about this, I'm going to also
08:34 - create a pipe object with a constructor
function and let's think about what
08:38 - does a pipe need?
08:39 - So a pipe needs, I would say it's going
to extend from the top to somewhere in
08:43 - the middle of the screen and then
somewhere further down to the bottom so
08:47 - I need, I'm going to say like a value
called top which is going to be some
08:51 - random amount between the top of the
screen and the middle of the screen and
08:56 - let's say this.bottom is some random
amount also between the middle of the
09:00 - screen in the bottom of the screen and
the pipe also needs an x-position
09:06 - which is always going to start at the
edge of the screen and then let's
09:12 - write a function called show where I
draw the pipe
09:16 - as a white.. fill white and I draw a
rectangle at this.x, 0 all the
09:23 - way with a width of like, let's say the
width is 20 and let's actually make that
09:27 - a variable and this..
09:33 - a width and also the height then is this.top
and then I need another rectangle
09:40 - which starts from the bottom
09:44 - minus how tall it is and let's make.. minus
this.bottom and its height is this.bottom.
09:54 - Okay in case this isn't 
making sense to you
09:58 - that's actually.. let's actually do a
quick diagram here. What I'm trying to do
10:02 - is create something that looks like this
10:05 - so I need two random numbers this length
is what I'm calling top, this length is
10:12 - what I'm calling bottom and then this
length.. this width is what I'm calling w.
10:17 - So I first draw a rectangle from here
with this width with a height of top and
10:22 - then I draw a rectangle from here which
is height
10:25 - minus bottom which is this point with this
width and then the height of that
10:28 - rectangle is bottom.
10:30 - So this is what I'm getting and if these
values are random I'll sometimes get stuff
10:33 - that looks like this
10:34 - etc. Now I could be more
thoughtful like right now the way that
10:38 - I'm doing it
10:39 - there's.. this.. you could never get
something that looks like this. So it
10:43 - probably would make a.. I could probably
do something different where I pick like
10:47 - a random empty amount of space and then
I pick a random starting point for that
10:51 - empty amount of space. That might be
interesting to do, we can make that as an
10:54 - improvement later but let's just stick
with what I have right now which I think
10:58 - is good enough
10:59 - ok am back over here and let's just see
now I need a function like this.update
11:04 - and all I want to do in this.update is
say this.x minus equals some speed
11:11 - this.speed. So let's say this.speed
is always going to be 5. I'm gonna just..
11:19 - so all of these are always going to
move to the left. So let's look now here
11:22 - in sketch I'm going to create an array
called pipes and what I'm going to do is
11:29 - say
11:29 - pipes.push a new pipe; and then in draw
11:36 - I'm going to say for all of the pipes in
the array
11:43 - yeah I also have a problem with this,
somebody in the chat is saying, where I could
11:46 - technically have a pipe with no space in
it. So all that stuff can be corrected
11:50 - later and I want to say show and I want
to say update.
11:54 - So let's run this now and see. There we
go, that's moving quite fast.
12:00 - So let's go back to the pipe and let's
just make the speed 1. So we could see
12:06 - aah look we basically have 
flappy bird already
12:08 - it's so easy to play so it's moving
kind of slow now but of course I only
12:12 - have one. So let's think about this,
12:14 - what.. couple of things that I want to do;
one is I want to I want to say something
12:19 - like if frameCount, I want to have a
pipe every like so often, modulus 40
12:25 - equals zero which means every 40 frames,
the modulus operator being the remainder
12:29 - of division. So anytime a number is
divisible by 40 with a remainder of 0 is
12:34 - 0 40 80 120 160 etc
12:37 - let's add a new pipe and
let's see how this looks
12:44 - that's a lot of.. that's a lot of.. every
40 frames is quite a view. Look at this, oh
12:52 - I'm pretty good at this
12:53 - ♪ta da da da♪ I need some like
music to play along with this. Okay so
12:57 - that's no good obviously. Lets umm
12:59 - let's make the pipes move a little bit
faster, twice as fast, and let's uh let's
13:04 - say every hundred frames. So obviously
you can see uh how the speed of the
13:11 - pipes, how frequent they are and we can
see basically I have the game right now.
13:15 - I've made a very easy version of the
game to play
13:18 - it's not very hard but one thing that I
haven't done is figure out when I need
13:24 - to actually., you know this, i'm doing a
great job here so let's actually add
13:28 - something that shows us when the circle
hits the pipe or doesn't hit the pipe so
13:32 - and also by the way I should be getting
rid of the pipes at some point so one
13:37 - thing I should do is I should I should
say
13:39 - if pipes index I is finished and I can
actually just say x is less than zero..
13:50 - you know what I'm going to write a
function. I'll write a function called
13:53 - offscreen so if the pipe is off the
screen
13:56 - I want to say pipes.splice(i, 1)
14:01 - so splice is a function that deletes an
element from the array. So I want to know
14:04 - if the pipe went off the screen, get rid
of it
14:07 - I don't need it anymore. Now of course
there's a little bit of an issue here
14:11 - which is one is there's no such thing as
a function called offscreen that's a
14:14 - function I have to write.
14:15 - There's another issue here which is that
when I'm deleting stuff out of the array
14:19 - I really should go through the array
backwards and I've covered that in other
14:22 - videos but basically the array slides..
the elements slide back and if I'm going
14:27 - forwards, the elements slide back while am going
forward I could end up skipping things.
14:30 - So I'm just going to switch my loop to
saying greater than or equal to 0 and
14:38 - i minus minus, and then
I'm gonna.. if I run this, right?
14:42 - no function named offscreen so I have
to go into the pipe and I have to write
14:46 - a function called this.offscreen is a
function and this is very simple, I can
14:51 - just say if this.x is less than
negative w, right? because I want it to be
14:57 - all the way off
14:58 - so it's width has to be all the way off;
return true else return false and now I know
15:04 - all of you watching this video are
going to complain to me and just say, "But
15:08 - couldn't you just say return this.x is
less than negative w because that
15:12 - evaluates to true or false."
15:14 - Yes, I could do that but you know what
sometimes I like to write my code this
15:17 - way. I like it to be long-winded, multiple
line, I love the way that curly brackets
15:22 - just nest themselves so beautifully, I love
to say a return true return false
15:26 - you can write your code a different way
but yeah and now I sort of feel like I
15:29 - should change it but I'm not going to
15:32 - I'll do it later. Okay, so coming back
let's see now we should see.. oops w is not
15:36 - defined
15:37 - so I have to say ♪this dot this dot♫
15:42 - I always forget the this dot. Ok,
now we should see.. now I can't really
15:48 - tell if this is working, I can only
assume this is working but if I do
15:52 - something where I say like this
15:53 - oh pipes.length, if I look at the
length of that array it's two and it's
15:59 - always two.
16:00 - So even though I'm adding more and more
they're getting deleted, ok, so we can be
16:04 - pretty sure that that's working.
16:06 - Ok now let's see, now we've got to do the
exciting part here .. I mean this whole
16:11 - thing hopefully is somewhat exciting but
we've really got to get the gameplay
16:17 - mechanic where you..
16:18 - it's going to give you some visual
feedback if you hit one of those pipes.
16:22 - So let's think about how we might write
this, ultimately here's where I have
16:26 - this single bird that says bird.update
bird.show
16:29 - and I'm also looping through all the
pipes so one thing I could do, I don't
16:32 - really need to do it this way but I'm
gonna I'm gonna move this loop first
16:36 - just so the bird comes after and I'm
going to say here I'm going to say if
16:44 - pipes index i hits the bird
16:52 - then do something. I'm just going to say
console.log("HIT"); so I need to have a
17:01 - function that determines if a pipe has
hit the bird
17:05 - so if looking at this bit of code you
can see here what do I need to write?
17:09 - I need to write a function called hits
and that function is going to be part of
17:13 - the pipe object and its going to receive
a bird object as an argument
17:17 - so I'm gonna go to the pipe object and I'm
going to write, I'm just going to write
17:20 - the function up there.. here, this.hits
17:23 - I called it hits equals function bird and
now I just need to check. What do I need
17:29 - to check?
17:29 - I need to check if bird.y is less than
the top and bird.. or
17:39 - or bird.y is greater than height
17:44 - minus this.bottom. So if the bird is ever..
17:50 - if I come back here to my whiteboard if
the bird is ever, right?
17:55 - less than top or greater than height minus
bottom here then it's kind of it's
18:03 - hitting that.. it's hitting that pipe.
18:05 - So let's come back over here. Did I get
that right is greater than height.. okay, so
18:08 - then I want to say return true
although this isn't good enough, right?
18:13 - It's also got to be within the actual
x-position
18:19 - so we should also say and I uh I could I
mean I could be much better about how I
18:23 - construct this but I'm gonna
put it inside here
18:26 - so let's just say it's within that stuff
also lets now check if bird.x
18:32 - it's x-position is greater than this.x
and bird.x is less than this.x
18:45 - plus this.w
18:47 - so I'm also just checking if it's in
between the actual x-position of the
18:51 - pipe
18:52 - so if all of that is true I'm going to return
true. You know am just working it out we
18:57 - could.. I could.. this double if statement
is kind of an awful way to write this
19:00 - and I could probably be more clever and I
could write a separate function that
19:03 - just tests intersection between a circle
and a rectangle but right now this will
19:07 - be good enough for us right now and I
look forward to hearing your
19:09 - improvements and suggestions in the
comments
19:12 - so let's just see here if.. whoops,
19:15 - right now I'm not seeing anything. Hit hit ahaa
19:19 - so this is basically working, you can see
that anytime,
19:24 - this is gonna be hard; so
let's actually give ourselves some
19:27 - visual feedback
19:28 - if this is the case, let's write a
variable called highlight set it equal
19:35 - to false
19:36 - let's also say this.highlight equals
true and then under fill.. under show I'm going
19:42 - to say if this.highlight
19:46 - I'm going to say fill(2..), I'm gonna make
it red
19:49 - so let's just see if this gives us some
nice visual feedback. Oh you know what I
19:56 - never said highlight equal to false so
watch it hits it
20:01 - so you know that's fine but I might want
to actually also say
20:07 - this.highlight equals false, hope it's
not hitting it, so now here we go
20:16 - it hits it you can see. So now I could add
things like score
20:20 - I could be more careful about like I'm
really only checking the center
20:24 - go go go
20:27 - tada dada dada.. this is way too easy to
play, oop, there we go. Okay so you get the
20:35 - idea so I i think that I've kind of
completed this and there's a lot of
20:39 - improvements that would want to make to
this in terms of being more thoughtful
20:42 - about checking that intersection to be a
bit more precise good enough though..
20:46 - be a bit..
20:47 - I could do a better job of picking the,
the way that.. oh here's a difficult one;
20:53 - a better job of how I pick the top and
bottom heights of these rectangles
20:58 - I could add score, right? You start with
a score maybe as time goes on your
21:02 - score goes up every time you hit a pipe
the score goes down, all those things.
21:06 - I would say umm ask me your questions in
the comments, suggest, make versions of
21:12 - this and tweet me your exciting,
doesn't you know.. you could make a nice bird
21:16 - design you can reimagine this entire
game to not be a bird and pipes but to be
21:21 - you know a flower and rainbows I don't
know how that would work
21:24 - so ummm
21:28 - tweet me and share with me all of
your interesting variations on this and
21:32 - I'll maybe come back and do some Q&A
video where I follow up on some of your
21:35 - questions and make some improvements to
this flappy bird challenge. Okay, thanks
21:39 - for watching and I will see you in a
future coding challenge.
21:42 - Goodbye.
21:43 - Subtitles by the Amara.org community

Cleaned transcript:

Hello and welcome to a coding rainbow coding challenge. Today's coding challenge I'm going to attempt to make a flappy bird clone which I admit it is kind of like a bit of a cliché probably at this point don't know how many people have made flappy bird clone tutorial whatever's on in the world but it was requested I think it will be fu,n I'm going to give it a try, I'm going to do it in JavaScript I'm going to try to do it fast but with time to explain and time to relax and just enjoy myself and hopefully you might enjoy watching this. So umm if you're not familiar with flappy bird then I would say pause this video and go familiarize yourself with it. I actually don't think I've ever actually played it before but I am somewhat familiar with the gameplay we'll see how well I do, I've got a live chat going on and you guys can tell me how I'm doing if you're watching this is a YouTube archive you won't be able to follow along live but that's fine. Ok so I'm using p5.js which is a JavaScript framework has a function setup it has a function draw and so the only thing I've got so far in the browser is just a canvas that's 400 x 600 pixels and a black background on that canvas so the first thing that I want to do I actually have a separate javascript file called bird.js and I'm actually going to make this a constructor function and the bird.. all the bird really needs is a yvalue, right? The bird moves up and down and it stays in one spot so I'm going to give this.. bird.. I'm going to start the bird off in the center of the window and I'm going to write also a function called show where I draw the bird and again I'm gonna.. my design is going to be very poor so it's going to be up to you to take my code which will be linked in this description and make something more beautiful and interesting and reef off with this so I'm just going to say let's make a white circle and you what let's get this bird and xposition as well even though it will be fixed but let's just try 25 for right now and I'm gonna never forget the.. ♫this dot♫ you always need this dot in JavaScript. So let's make this bird a circle and let's say in the main program now var bird and we're going to say bird equals new bird and bird.show(), so we should have something a little bit more interesting now there it is bird.. width/2 you know would probably makes more sense if I want the bird to be in the middle to be height/2 so let's fix that. I'm gonna say height/2, I think the bird could be a little bit bigger and the bird could be a little bit more in on the screen so there we go this is the beginning of flappy bird now what happens to the bird without you doing anything? the bird falls down. So oops oops wrong window so I'm going to go here and I'm going to say this.update equals function and it would be good to have some sort of variable called gravity and gravity being the force that's pushing that bird down and let's say that the gravity here is going to be one I also need a velocity, right? I need a velocity so gravity is the force that's causing the velocity of the bird to increase so I'm gonna say this.velocity equals 0 and now I'm going to say this.y changes by this.velocity and this.velocity changes by this.gravity ok so now we have a function that's going to push that bird down so I'm gonna go over here and I'm going to say also bird.update(); there we go bye bird it flew down. Now we should probably do something where the bird stops when it gets to the bottom of the window that makes sense so I'm gonna go back to the bird and I'm gonna say.. I'll just do this in the update function, I could write a separate.. and I'm gonna say if this.y is greater than height then then I'm just gonna keep the bird on the screen I'm going to say this.y equals height and I'm also going to set that velocity to zero so we can see here that bird stops. I don't know if that's actually what happens in flappy bird but I just kind of want to do that anyway and you know what I'm going to do that also for the top of the window because ultimately I'm going to be able to push the bird up so let's do that for less than zero, now of course... oh ok so now what.. How does the game work? I think it's a mobile game right you could tap your mobile device.. this is my mobile device so I mean as a tap I'm going to just use the spacebar on my keyboard so in p5.js I can write a function called keypPessed and I can check to see if the key is the space bar and let me just make sure this is working I'm just going to console log something right now so I'm going to run this and you can see each time I press the spacebar it says here in the console, it prints out, SPACE. So that works so what do I want to do I want to cause a force to cause that bird to go up so I'm going to say bird.up and so what's going to happen with this bird.up function? What do I want to do.. I want instead of the velocity being pushed down by gravity I want to say this.velocity minus equals, I want it to go up or I could say plus equals but some minus amount now what if I just said minus this.gravity? Let's try that for a second just to see what happens Come on! Wait oh you know what's a little bit annoying, I have to.. oh I took off that console.log(), hold on. Let's say minus equals this.gravity times 10 so nothing's working here and I have a kind of a sneaking suspicion that I've done something totally wrong bird.up let's make sure this is happening. I'm gonna say print line this.velocity ok so you can see that's working so let's try to tune.. I think there's sort of an issue here we've got to sort of tune the numbers so let's make the gravity just for right now a lot less strong so it's not going so fast now you can see though that this isn't really doing very much let's make a this.up force let's call this lift and we'll say it's negative 10 so I'm going to say this.velocity plus equals this.lift; not left lift. There we go, so you can see there's a sort of an element of tuning those numbers so now it doesn't really feel like it's falling fast enough but me pushing the spacebar is kind of working out. What happens if I hold down the spacebar? so that's good ok so that lift is too much. Let's make the gravity 0.6 and let's keep the lift there but now I'm going to need to make the lift a little bit stronger. There we go, so this.. so now I have, I sort of have the game going and lift is a little bit too strong let's make it less strong so this you know, something something that I could do is actually limit the top speed or also like give it some.. something that I could also do is add some like air resistance in general which I could say something like this.velocity times equals 0.9 so that actually like helps with things quite a bit because it's just there's some sort of like a limit to what the speed is so now I've got something that is a bit more kind of like reasonable to play here. So you could spend your time tuning this even more but I think just like keeping the velocity keeping some like air resistance by always shrinking the velocity a little bit tuning how much the lift is versus the gravity those types of things you can kind of play around with. Ok, so now we have the basic game mechanic here which is just a falling circle and each time I press the spacebar I can kind of like have it lift up a little bit. Now what do we need to add? We need to add those pipe things that kind of come from the right of the screen, I'm only at eight minutes by the way which is pretty good; the pipes things that come from the right of the screen and you have to steer your way through. Let's see if we can do this. So let's think about this, I'm going to also create a pipe object with a constructor function and let's think about what does a pipe need? So a pipe needs, I would say it's going to extend from the top to somewhere in the middle of the screen and then somewhere further down to the bottom so I need, I'm going to say like a value called top which is going to be some random amount between the top of the screen and the middle of the screen and let's say this.bottom is some random amount also between the middle of the screen in the bottom of the screen and the pipe also needs an xposition which is always going to start at the edge of the screen and then let's write a function called show where I draw the pipe as a white.. fill white and I draw a rectangle at this.x, 0 all the way with a width of like, let's say the width is 20 and let's actually make that a variable and this.. a width and also the height then is this.top and then I need another rectangle which starts from the bottom minus how tall it is and let's make.. minus this.bottom and its height is this.bottom. Okay in case this isn't making sense to you that's actually.. let's actually do a quick diagram here. What I'm trying to do is create something that looks like this so I need two random numbers this length is what I'm calling top, this length is what I'm calling bottom and then this length.. this width is what I'm calling w. So I first draw a rectangle from here with this width with a height of top and then I draw a rectangle from here which is height minus bottom which is this point with this width and then the height of that rectangle is bottom. So this is what I'm getting and if these values are random I'll sometimes get stuff that looks like this etc. Now I could be more thoughtful like right now the way that I'm doing it there's.. this.. you could never get something that looks like this. So it probably would make a.. I could probably do something different where I pick like a random empty amount of space and then I pick a random starting point for that empty amount of space. That might be interesting to do, we can make that as an improvement later but let's just stick with what I have right now which I think is good enough ok am back over here and let's just see now I need a function like this.update and all I want to do in this.update is say this.x minus equals some speed this.speed. So let's say this.speed is always going to be 5. I'm gonna just.. so all of these are always going to move to the left. So let's look now here in sketch I'm going to create an array called pipes and what I'm going to do is say pipes.push a new pipe; and then in draw I'm going to say for all of the pipes in the array yeah I also have a problem with this, somebody in the chat is saying, where I could technically have a pipe with no space in it. So all that stuff can be corrected later and I want to say show and I want to say update. So let's run this now and see. There we go, that's moving quite fast. So let's go back to the pipe and let's just make the speed 1. So we could see aah look we basically have flappy bird already it's so easy to play so it's moving kind of slow now but of course I only have one. So let's think about this, what.. couple of things that I want to do; one is I want to I want to say something like if frameCount, I want to have a pipe every like so often, modulus 40 equals zero which means every 40 frames, the modulus operator being the remainder of division. So anytime a number is divisible by 40 with a remainder of 0 is 0 40 80 120 160 etc let's add a new pipe and let's see how this looks that's a lot of.. that's a lot of.. every 40 frames is quite a view. Look at this, oh I'm pretty good at this ♪ta da da da♪ I need some like music to play along with this. Okay so that's no good obviously. Lets umm let's make the pipes move a little bit faster, twice as fast, and let's uh let's say every hundred frames. So obviously you can see uh how the speed of the pipes, how frequent they are and we can see basically I have the game right now. I've made a very easy version of the game to play it's not very hard but one thing that I haven't done is figure out when I need to actually., you know this, i'm doing a great job here so let's actually add something that shows us when the circle hits the pipe or doesn't hit the pipe so and also by the way I should be getting rid of the pipes at some point so one thing I should do is I should I should say if pipes index I is finished and I can actually just say x is less than zero.. you know what I'm going to write a function. I'll write a function called offscreen so if the pipe is off the screen I want to say pipes.splice(i, 1) so splice is a function that deletes an element from the array. So I want to know if the pipe went off the screen, get rid of it I don't need it anymore. Now of course there's a little bit of an issue here which is one is there's no such thing as a function called offscreen that's a function I have to write. There's another issue here which is that when I'm deleting stuff out of the array I really should go through the array backwards and I've covered that in other videos but basically the array slides.. the elements slide back and if I'm going forwards, the elements slide back while am going forward I could end up skipping things. So I'm just going to switch my loop to saying greater than or equal to 0 and i minus minus, and then I'm gonna.. if I run this, right? no function named offscreen so I have to go into the pipe and I have to write a function called this.offscreen is a function and this is very simple, I can just say if this.x is less than negative w, right? because I want it to be all the way off so it's width has to be all the way off; return true else return false and now I know all of you watching this video are going to complain to me and just say, "But couldn't you just say return this.x is less than negative w because that evaluates to true or false." Yes, I could do that but you know what sometimes I like to write my code this way. I like it to be longwinded, multiple line, I love the way that curly brackets just nest themselves so beautifully, I love to say a return true return false you can write your code a different way but yeah and now I sort of feel like I should change it but I'm not going to I'll do it later. Okay, so coming back let's see now we should see.. oops w is not defined so I have to say ♪this dot this dot♫ I always forget the this dot. Ok, now we should see.. now I can't really tell if this is working, I can only assume this is working but if I do something where I say like this oh pipes.length, if I look at the length of that array it's two and it's always two. So even though I'm adding more and more they're getting deleted, ok, so we can be pretty sure that that's working. Ok now let's see, now we've got to do the exciting part here .. I mean this whole thing hopefully is somewhat exciting but we've really got to get the gameplay mechanic where you.. it's going to give you some visual feedback if you hit one of those pipes. So let's think about how we might write this, ultimately here's where I have this single bird that says bird.update bird.show and I'm also looping through all the pipes so one thing I could do, I don't really need to do it this way but I'm gonna I'm gonna move this loop first just so the bird comes after and I'm going to say here I'm going to say if pipes index i hits the bird then do something. I'm just going to say console.log("HIT"); so I need to have a function that determines if a pipe has hit the bird so if looking at this bit of code you can see here what do I need to write? I need to write a function called hits and that function is going to be part of the pipe object and its going to receive a bird object as an argument so I'm gonna go to the pipe object and I'm going to write, I'm just going to write the function up there.. here, this.hits I called it hits equals function bird and now I just need to check. What do I need to check? I need to check if bird.y is less than the top and bird.. or or bird.y is greater than height minus this.bottom. So if the bird is ever.. if I come back here to my whiteboard if the bird is ever, right? less than top or greater than height minus bottom here then it's kind of it's hitting that.. it's hitting that pipe. So let's come back over here. Did I get that right is greater than height.. okay, so then I want to say return true although this isn't good enough, right? It's also got to be within the actual xposition so we should also say and I uh I could I mean I could be much better about how I construct this but I'm gonna put it inside here so let's just say it's within that stuff also lets now check if bird.x it's xposition is greater than this.x and bird.x is less than this.x plus this.w so I'm also just checking if it's in between the actual xposition of the pipe so if all of that is true I'm going to return true. You know am just working it out we could.. I could.. this double if statement is kind of an awful way to write this and I could probably be more clever and I could write a separate function that just tests intersection between a circle and a rectangle but right now this will be good enough for us right now and I look forward to hearing your improvements and suggestions in the comments so let's just see here if.. whoops, right now I'm not seeing anything. Hit hit ahaa so this is basically working, you can see that anytime, this is gonna be hard; so let's actually give ourselves some visual feedback if this is the case, let's write a variable called highlight set it equal to false let's also say this.highlight equals true and then under fill.. under show I'm going to say if this.highlight I'm going to say fill(2..), I'm gonna make it red so let's just see if this gives us some nice visual feedback. Oh you know what I never said highlight equal to false so watch it hits it so you know that's fine but I might want to actually also say this.highlight equals false, hope it's not hitting it, so now here we go it hits it you can see. So now I could add things like score I could be more careful about like I'm really only checking the center go go go tada dada dada.. this is way too easy to play, oop, there we go. Okay so you get the idea so I i think that I've kind of completed this and there's a lot of improvements that would want to make to this in terms of being more thoughtful about checking that intersection to be a bit more precise good enough though.. be a bit.. I could do a better job of picking the, the way that.. oh here's a difficult one; a better job of how I pick the top and bottom heights of these rectangles I could add score, right? You start with a score maybe as time goes on your score goes up every time you hit a pipe the score goes down, all those things. I would say umm ask me your questions in the comments, suggest, make versions of this and tweet me your exciting, doesn't you know.. you could make a nice bird design you can reimagine this entire game to not be a bird and pipes but to be you know a flower and rainbows I don't know how that would work so ummm tweet me and share with me all of your interesting variations on this and I'll maybe come back and do some Q&A video where I follow up on some of your questions and make some improvements to this flappy bird challenge. Okay, thanks for watching and I will see you in a future coding challenge. Goodbye. Subtitles by the Amara.org community
