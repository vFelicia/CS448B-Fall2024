With timestamps:

00:00 - Welcome to part two
of a multi-part series
00:02 - about Perlin Noise
in which I eventually
00:04 - am going to build a simulation
like this, which kind of looks
00:07 - like a hair, lots of hair,
or a river or something.
00:09 - Eventually, it will
be rainbow colored.
00:11 - But I am talking
about Perlin Noise,
00:14 - ultimately how to deal with
multi-dimensional Perlin Noise
00:16 - and how to make some interesting
pretty graphics from that.
00:19 - So where I last
left off previously
00:23 - on Perlin Noise
explained, I was making
00:25 - a mess of this diagram
trying to explain
00:27 - how Perlin Noise is calculated
over multiple octaves.
00:33 - So what I next need to look
at is how do I actually
00:40 - call the noise function
in p5.js or Processing,
00:44 - and get values out of it,
and make use of those values?
00:47 - So one thing that is true is if
you call the random function,
00:53 - random you can give it a
minimum and a maximum argument.
00:59 - Meaning, I want a random
value between 0 and 50.
01:04 - If you give it
just one argument,
01:06 - it will always assume
the minimum is zero.
01:08 - Anyway, there's a variety of
ways we could think about that.
01:10 - But this is probably
something, if you're
01:12 - watching this video,
that's familiar to you.
01:15 - You might think that's the same
thing to do with Perlin Noise,
01:18 - right?
01:19 - OK.
01:19 - So I could get my
crazy, random values
01:21 - or I could get my nice
smooth random values.
01:24 - And when I want the
crazy random values,
01:26 - I want to give a
minimum and maximum.
01:27 - When I want the
smooth values, I want
01:28 - to get the minimum and maximum.
01:30 - But there's a problem here.
01:32 - Because of the nature of how
Perlin Noise is calculated,
01:38 - you can't simply--
01:40 - you need to give it
a different argument.
01:42 - And that argument is--
01:44 - in my previous
discussion, I talked
01:46 - about thinking about the space
of one dimensional noise almost
01:50 - as a graph along an x-axis.
01:52 - And you could think
of the x-axis as time.
01:54 - But we can also
now take a moment
01:56 - to just think of this
as x, the x-axis.
01:59 - And you'll see this, a
variable's named in a lot
02:01 - of Perlin Noise examples as
x off because what you want
02:05 - to tell p5 or
Processing that you're--
02:08 - you want to tell
those environments is
02:10 - I want the particular
Perlin Noise
02:12 - value at this position
along the x-axis.
02:16 - So let's actually
go and do that.
02:19 - So I'm going to go look at this.
02:20 - I'm going to go over
here and I'm actually
02:22 - going to just go over to
the JavaScript console.
02:27 - And I'm going to call--
02:28 - first of all, I'm going to
call the random function
02:30 - just so we can see that.
02:31 - So if I call the random
function with no arguments,
02:33 - I get some random
value between 0 and 1.
02:36 - If I call it with
one argument, I'm
02:39 - going to get the value between--
02:40 - I'm going to get a random
value between 0 and 100.
02:45 - 21.
02:46 - Lucky 21.
02:47 - Now, incidentally by
the way, never mind.
02:50 - I was going to show you that if
you give it a-- let's do this.
02:53 - If you give it an array
and I say random A,
02:59 - I will get a random
value from that array.
03:03 - Nice to see.
03:04 - So let's refresh here.
03:06 - Now, let's call
the noise function.
03:09 - Now, I got not a number.
03:11 - So noise cannot be called
without an argument.
03:14 - So given my previous
discussion, we might say, OK.
03:18 - Well, what if I want a noise
value between 0 and 100?
03:21 - You might think to do that.
03:22 - OK.
03:22 - I got 0.577.
03:24 - Let me call that again.
03:25 - Hey, I got 0.577 again.
03:28 - Let me call at 100.01.
03:32 - Look at that.
03:32 - I've got a very similar
number, but it's a little bit
03:35 - different.
03:36 - See, how this number that
I'm passing into noise
03:38 - is really like time.
03:40 - It's where am I
along this x-axis?
03:43 - What's my offset along
this pre-calculated--
03:46 - In truth, it's not like this big
array it's already calculated.
03:50 - There's a formula for
doing it behind the scenes,
03:52 - but it's this pre-existing
set of values.
03:56 - So if I say I want the
noise value at 100,
03:58 - I'm always going to get
the very, very same value.
04:01 - Now, you'll also notice
here that the number I got
04:03 - was 0.577.
04:04 - Let's try saying let
me get noise at zero.
04:07 - How about noise at 200.
04:10 - Notice the value is always
a floating point value
04:12 - and it doesn't seem
to be greater than 1.
04:14 - It also seems to be
clustering around 0.5.
04:16 - So noise values actually don't
have a uniform distribution
04:19 - between them.
04:20 - By the way, the range
is between 0 and 1.
04:22 - They also don't have a
uniform distribution.
04:25 - If I were to say to
you let's look at--
04:30 - let's say I want to pick
random values between 0 and 1
04:35 - over time.
04:37 - And over hours and hours,
and days, and days, and days,
04:40 - how often do I pick
0.5, versus I pick 0.75,
04:44 - versus I pick 0.05?
04:46 - I should get a
uniform distribution
04:48 - for pure randomness.
04:50 - That's the nature of randomness.
04:52 - With Perlin Noise,
you'll actually
04:54 - see that the values cluster
around the mean or the center,
04:57 - 0.5.
04:58 - So the distribution
looks more like this,
05:00 - which is like a bell curve
or a normal distribution.
05:02 - That's another topic
for another day.
05:04 - But interesting to note
that or point that out.
05:06 - OK, so there I am.
05:07 - This is what I'm doing.
05:08 - I'm getting those values.
05:10 - So let's now actually make
the sketch do something.
05:13 - I'm going to create a variable.
05:14 - I'm going to call it x and I'm
going to set it equal to 0.
05:18 - And I actually don't
know why I'm doing that.
05:20 - First thing I'm going to
do is just draw a circle.
05:23 - I going to use the
ellipse function
05:25 - and I'm going to just change the
size of this to a 400 by 400.
05:28 - And I'm going to draw the circle
in the center of the window
05:31 - and make it 24 pixel diameter.
05:35 - And let's just see that
I have a circle there.
05:36 - There we go.
05:37 - See this circle here?
05:38 - Let's make that a
little bit bigger.
05:41 - OK.
05:41 - And now, I don't know.
05:42 - There's some extra
nonsense here by accident.
05:46 - Get rid of that.
05:48 - OK.
05:49 - There you go.
05:49 - See that circle?
05:50 - There it is.
05:51 - Now, let's make
a variable called
05:53 - x and set that equal to 200.
05:57 - There we go.
05:58 - Now, let's do
something different
06:00 - and let's set that x equal
to a random with value.
06:05 - Now, you can see
every moment in time
06:07 - I'm getting a random value.
06:11 - OK.
06:11 - Now, I want to
instead have noise.
06:14 - So let me look at--
let me comment this
06:16 - out and say var x equals noise.
06:20 - And then, I'm going to say noise
at time 100, something random.
06:24 - We'll notice it's over here.
06:26 - No matter what you
do, the noise function
06:28 - will always return
values between 0 and 1.
06:31 - So one thing that
I want to do is
06:33 - take that, the result
of that function which
06:36 - goes between 0 and 1, and
map it to be zero and width.
06:39 - In truth, I could
just multiply by width
06:42 - because multiplying a
number between 0 and 1
06:46 - multiplies it by width, gives
me a value between 0 and width.
06:50 - So now if I refresh this--
06:53 - did I not hit save?
06:54 - I didn't hit save.
06:55 - There you go.
06:56 - You can see every time.
06:57 - Now, every time I
refresh the page,
06:59 - the sketch creates a new
set of Perlin Noise values.
07:04 - So even though the values
are fixed for that moment,
07:07 - if I say noise 100,
I'm always going
07:09 - to get the same value over,
and over, and over again.
07:15 - If I refresh the page, I'm going
to get a different same value
07:19 - over, and over, and over
again because the Perlin Noise
07:22 - space is seeded.
07:24 - And p5.js is going to
reseed it every time
07:26 - you refresh the sketch.
07:27 - And you could use the noiseSeed
function to fix the seed,
07:30 - but that's a little
bit of an aside here.
07:32 - OK.
07:32 - So we're getting something,
but the number isn't changing.
07:35 - Why?
07:36 - Because that number is
the same all the time.
07:39 - So what I want to do is make
this, instead of a fixed
07:42 - value of 100, I want to call
this something like x offset.
07:45 - I want a variable.
07:46 - What I want to do is I want--
07:48 - I don't have my
graph here anymore.
07:50 - But if this is my
graph of Perlin Noise,
07:52 - I want to move
throughout the space.
07:54 - I could move
forward or backward.
07:55 - I could move quickly.
07:56 - I could move slowly.
07:57 - I want to get new values
every time through draw.
08:01 - So here, all I can
do now is say x.
08:04 - I can say x offset here.
08:06 - And I can say x offset
plus equals 0.01.
08:11 - So let me do that
and refresh this.
08:13 - And you can see now.
08:14 - You can see how it's
random, but it's smooth.
08:17 - This is now the
difference between this.
08:19 - Now, you're looking
at Perlin Noise values
08:21 - over time represented
as an exposition width
08:27 - compared to random
values over time
08:31 - represented as an exposition.
08:32 - So, see the difference.
08:33 - I'm not looking at
that graph anymore.
08:35 - I'm just looking
at a single value,
08:37 - but I'm looking at it
each moment in time.
08:39 - So hopefully, this gives you
the idea of Perlin Noise,
08:45 - of how Perlin Noise
works in it's core level.
08:46 - I think what I'm
going to do is I'm
08:48 - going to end this particular
video and the next video,
08:50 - I'm actually just
going to show you
08:51 - how to draw a graph
of those values which
08:53 - might be somewhat useful.
08:55 - Don't go.
08:55 - Don't go.
08:56 - Don't go.
08:57 - Stay with me please.
08:58 - [LAUGHS]
09:00 - This is an addendum to
this particular video,
09:02 - which is that I forgot to
mention something important.
09:05 - Which is, I picked this number
0.01 somewhat out of a hat.
09:09 - And it really-- this number
really means something.
09:12 - It was really a
vital, crucial number
09:14 - in how the values will behave.
09:16 - So let's look at
this sketch again
09:18 - and look at how it's behaving.
09:19 - Let's think about
this graph up here
09:22 - that probably has a lot of
glare that you can't barely see.
09:24 - But think about how it might be
to jump ahead really quickly,
09:30 - or to move really slowly.
09:31 - And you can almost
think about that
09:33 - as the speed of this thing.
09:34 - How quickly are you
getting those new values?
09:37 - So for example, if I were
to change this to 0.001
09:40 - and refresh the
page, you can see
09:43 - it's like moving very,
very slowly because it's
09:46 - taking a lot of time to slowly
walk through that Perlin Noise
09:49 - graph.
09:50 - But if I were to change
it to 0.1 and hit refresh,
09:54 - you could see it's
moving much more quickly.
09:57 - If I were to make that number
very large, like really large,
10:01 - if I were to say
it's like 100, this
10:04 - is essentially just
like randomness
10:06 - now because it's moving so
far ahead in that Perlin Noise
10:09 - space that an idea of
the values being tied
10:12 - to the previous
one or the next one
10:14 - is almost lost because
you're jumping so far ahead.
10:16 - However, it does look
different than random.
10:19 - If I go back to this random--
10:24 - because you'll notice
the random values
10:25 - are getting further
along to the edges.
10:27 - That has to do with that
uniform distribution of values,
10:30 - as opposed to
Perlin Noise values
10:31 - which tend to cluster
around the center.
10:34 - OK.
10:34 - So I'm going to do a
little bit more with you
10:36 - in the next video just about
one dimensional Perlin Noise
10:39 - before we move on to two
dimensional Perlin Noise
10:42 - and looking at how you might
make procedural textures
10:44 - in Perlin Noise.

Cleaned transcript:

Welcome to part two of a multipart series about Perlin Noise in which I eventually am going to build a simulation like this, which kind of looks like a hair, lots of hair, or a river or something. Eventually, it will be rainbow colored. But I am talking about Perlin Noise, ultimately how to deal with multidimensional Perlin Noise and how to make some interesting pretty graphics from that. So where I last left off previously on Perlin Noise explained, I was making a mess of this diagram trying to explain how Perlin Noise is calculated over multiple octaves. So what I next need to look at is how do I actually call the noise function in p5.js or Processing, and get values out of it, and make use of those values? So one thing that is true is if you call the random function, random you can give it a minimum and a maximum argument. Meaning, I want a random value between 0 and 50. If you give it just one argument, it will always assume the minimum is zero. Anyway, there's a variety of ways we could think about that. But this is probably something, if you're watching this video, that's familiar to you. You might think that's the same thing to do with Perlin Noise, right? OK. So I could get my crazy, random values or I could get my nice smooth random values. And when I want the crazy random values, I want to give a minimum and maximum. When I want the smooth values, I want to get the minimum and maximum. But there's a problem here. Because of the nature of how Perlin Noise is calculated, you can't simply you need to give it a different argument. And that argument is in my previous discussion, I talked about thinking about the space of one dimensional noise almost as a graph along an xaxis. And you could think of the xaxis as time. But we can also now take a moment to just think of this as x, the xaxis. And you'll see this, a variable's named in a lot of Perlin Noise examples as x off because what you want to tell p5 or Processing that you're you want to tell those environments is I want the particular Perlin Noise value at this position along the xaxis. So let's actually go and do that. So I'm going to go look at this. I'm going to go over here and I'm actually going to just go over to the JavaScript console. And I'm going to call first of all, I'm going to call the random function just so we can see that. So if I call the random function with no arguments, I get some random value between 0 and 1. If I call it with one argument, I'm going to get the value between I'm going to get a random value between 0 and 100. 21. Lucky 21. Now, incidentally by the way, never mind. I was going to show you that if you give it a let's do this. If you give it an array and I say random A, I will get a random value from that array. Nice to see. So let's refresh here. Now, let's call the noise function. Now, I got not a number. So noise cannot be called without an argument. So given my previous discussion, we might say, OK. Well, what if I want a noise value between 0 and 100? You might think to do that. OK. I got 0.577. Let me call that again. Hey, I got 0.577 again. Let me call at 100.01. Look at that. I've got a very similar number, but it's a little bit different. See, how this number that I'm passing into noise is really like time. It's where am I along this xaxis? What's my offset along this precalculated In truth, it's not like this big array it's already calculated. There's a formula for doing it behind the scenes, but it's this preexisting set of values. So if I say I want the noise value at 100, I'm always going to get the very, very same value. Now, you'll also notice here that the number I got was 0.577. Let's try saying let me get noise at zero. How about noise at 200. Notice the value is always a floating point value and it doesn't seem to be greater than 1. It also seems to be clustering around 0.5. So noise values actually don't have a uniform distribution between them. By the way, the range is between 0 and 1. They also don't have a uniform distribution. If I were to say to you let's look at let's say I want to pick random values between 0 and 1 over time. And over hours and hours, and days, and days, and days, how often do I pick 0.5, versus I pick 0.75, versus I pick 0.05? I should get a uniform distribution for pure randomness. That's the nature of randomness. With Perlin Noise, you'll actually see that the values cluster around the mean or the center, 0.5. So the distribution looks more like this, which is like a bell curve or a normal distribution. That's another topic for another day. But interesting to note that or point that out. OK, so there I am. This is what I'm doing. I'm getting those values. So let's now actually make the sketch do something. I'm going to create a variable. I'm going to call it x and I'm going to set it equal to 0. And I actually don't know why I'm doing that. First thing I'm going to do is just draw a circle. I going to use the ellipse function and I'm going to just change the size of this to a 400 by 400. And I'm going to draw the circle in the center of the window and make it 24 pixel diameter. And let's just see that I have a circle there. There we go. See this circle here? Let's make that a little bit bigger. OK. And now, I don't know. There's some extra nonsense here by accident. Get rid of that. OK. There you go. See that circle? There it is. Now, let's make a variable called x and set that equal to 200. There we go. Now, let's do something different and let's set that x equal to a random with value. Now, you can see every moment in time I'm getting a random value. OK. Now, I want to instead have noise. So let me look at let me comment this out and say var x equals noise. And then, I'm going to say noise at time 100, something random. We'll notice it's over here. No matter what you do, the noise function will always return values between 0 and 1. So one thing that I want to do is take that, the result of that function which goes between 0 and 1, and map it to be zero and width. In truth, I could just multiply by width because multiplying a number between 0 and 1 multiplies it by width, gives me a value between 0 and width. So now if I refresh this did I not hit save? I didn't hit save. There you go. You can see every time. Now, every time I refresh the page, the sketch creates a new set of Perlin Noise values. So even though the values are fixed for that moment, if I say noise 100, I'm always going to get the same value over, and over, and over again. If I refresh the page, I'm going to get a different same value over, and over, and over again because the Perlin Noise space is seeded. And p5.js is going to reseed it every time you refresh the sketch. And you could use the noiseSeed function to fix the seed, but that's a little bit of an aside here. OK. So we're getting something, but the number isn't changing. Why? Because that number is the same all the time. So what I want to do is make this, instead of a fixed value of 100, I want to call this something like x offset. I want a variable. What I want to do is I want I don't have my graph here anymore. But if this is my graph of Perlin Noise, I want to move throughout the space. I could move forward or backward. I could move quickly. I could move slowly. I want to get new values every time through draw. So here, all I can do now is say x. I can say x offset here. And I can say x offset plus equals 0.01. So let me do that and refresh this. And you can see now. You can see how it's random, but it's smooth. This is now the difference between this. Now, you're looking at Perlin Noise values over time represented as an exposition width compared to random values over time represented as an exposition. So, see the difference. I'm not looking at that graph anymore. I'm just looking at a single value, but I'm looking at it each moment in time. So hopefully, this gives you the idea of Perlin Noise, of how Perlin Noise works in it's core level. I think what I'm going to do is I'm going to end this particular video and the next video, I'm actually just going to show you how to draw a graph of those values which might be somewhat useful. Don't go. Don't go. Don't go. Stay with me please. [LAUGHS] This is an addendum to this particular video, which is that I forgot to mention something important. Which is, I picked this number 0.01 somewhat out of a hat. And it really this number really means something. It was really a vital, crucial number in how the values will behave. So let's look at this sketch again and look at how it's behaving. Let's think about this graph up here that probably has a lot of glare that you can't barely see. But think about how it might be to jump ahead really quickly, or to move really slowly. And you can almost think about that as the speed of this thing. How quickly are you getting those new values? So for example, if I were to change this to 0.001 and refresh the page, you can see it's like moving very, very slowly because it's taking a lot of time to slowly walk through that Perlin Noise graph. But if I were to change it to 0.1 and hit refresh, you could see it's moving much more quickly. If I were to make that number very large, like really large, if I were to say it's like 100, this is essentially just like randomness now because it's moving so far ahead in that Perlin Noise space that an idea of the values being tied to the previous one or the next one is almost lost because you're jumping so far ahead. However, it does look different than random. If I go back to this random because you'll notice the random values are getting further along to the edges. That has to do with that uniform distribution of values, as opposed to Perlin Noise values which tend to cluster around the center. OK. So I'm going to do a little bit more with you in the next video just about one dimensional Perlin Noise before we move on to two dimensional Perlin Noise and looking at how you might make procedural textures in Perlin Noise.
