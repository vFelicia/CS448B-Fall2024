With timestamps:

00:04 - hi we're going to talk about fractals
00:06 - today fractals what is a fractal okay
00:09 - let's for a moment um think about the
00:13 - think about back in time sometime in
00:15 - your life where you were sitting at a
00:17 - chair with a little desk in front of it
00:19 - and you were studying geometry middle
00:21 - school high school last week who knows
00:24 - you were learning about circles and
00:26 - polygons and rectangles and lines and
00:28 - the relationships between angles and
00:30 - triangles and sides of shapes all this
00:32 - stuff very important very interesting
00:35 - but now let's think about and so let's
00:37 - think about those shapes that you
00:38 - learned in geometry and how they might
00:40 - describe things we find in our world
00:42 - okay so over here I have the top of a
00:45 - cup of tea and maybe you're would say to
00:47 - yourself that looks I mean you can't
00:48 - really see look it disappears with the
00:49 - white but I can put it right here it
00:51 - looks just like a circle and over here I
00:54 - have this eraser and if I look at this
00:56 - eraser it's rectangular so to some
00:58 - extent these idealized forms these ukian
01:02 - GE geometrical shapes can describe the
01:05 - world we live in I'm staring at this
01:07 - camera it's also very circular and
01:08 - rectangular but think about nature and I
01:11 - have this I don't know if this is going
01:13 - to work but think about nature look at
01:14 - these clouds and I don't know look at
01:17 - these crazy coastlines and these U this
01:19 - sea shell thing and the waves of the
01:21 - water and look at these trees and look
01:22 - at all the lightning and all this stuff
01:24 - and this man is talking about fractals
01:27 - this is by the way is from PBS hunting
01:29 - the hidden dimension I highly recommend
01:30 - you watch that if you want to kind of
01:31 - dive deeper into fractal stuff think
01:33 - about all that stuff that worked
01:36 - perfectly just the way I imagine these
01:39 - are not shapes that we can describe with
01:41 - UK idealized ukan forms we can't
01:44 - describe a lightning bolt I mean maybe
01:45 - it's a series of connected lines but the
01:47 - overall quality of the shape mountains
01:50 - coastlines lightning bolts these are
01:52 - things we need a new type of geometry to
01:56 - describe and it's not so new but it was
01:57 - new in 1975 not actually it wasn't n
02:00 - really new in 1975 the fractals have
02:02 - been around for a very very long time
02:04 - but the term fractal came about in
02:07 - 1975 with the publication of this book I
02:10 - mean you know condensing history there
02:13 - I'm sure there the term came before the
02:14 - book but um the fractal geometry of
02:16 - nature by Ben benoa Mandel BR who coined
02:20 - the term fractal and I'm sure many of
02:22 - you have seen the mandal BR set which is
02:24 - a very very famous fractal um shape I
02:27 - don't have a prepared image to show you
02:29 - but um so what I'm talking in circles
02:33 - here what we want to do today is look at
02:37 - what is this thing called a fractal that
02:39 - describes somehow the these shapes that
02:42 - appear in nature and if we could
02:44 - understand what a fractal is then could
02:45 - we write code to implement algorithms
02:48 - behind that would generate fractal
02:50 - patterns that's what we're going to do
02:52 - today it's very exciting so um let's
02:55 - think so let's I want to define the term
02:57 - fractal a little bit more formally
02:59 - perhaps so a fractal is a shape that
03:03 - when broken into parts right fractal
03:06 - from the Latin fractus meaning broken a
03:08 - shape that when broken into Parts the
03:11 - parts look like a copy of the whole
03:13 - shape now what does that mean exactly so
03:16 - a very common scenario which we'll
03:17 - actually make a processing example that
03:18 - implements in a later video is a tree so
03:21 - let's say I draw a line here and then I
03:23 - connect that line with two other lines
03:25 - and each of those two lines I connect
03:26 - with two other lines and each of those
03:27 - two lines I connect with other two other
03:29 - lines I'm like all these lines a little
03:30 - bit shorter every time I do it and I
03:33 - could sit here all day and I would be a
03:35 - very happy person actually just but I
03:36 - think I'll takeing up too much time in
03:38 - this video so I'll stop but you can see
03:40 - here even though I barely scratched the
03:42 - surface of how many times I can keep
03:43 - connecting these lines if I grab this
03:47 - particular branch and bring it down here
03:50 - and kind of rotate it so it faces up
03:53 - what do I have here I have this shape
03:56 - which is essentially the same as the
03:57 - bigger shape we started with this is is
03:59 - the concept of self-
04:02 - similarity very the sort of key quality
04:05 - of fractals fractals are self-similar
04:08 - meaning the parts of the shape look like
04:10 - the whole shape and here we have an
04:12 - exact copy of the whole shape inside the
04:14 - part which is an important distinction
04:16 - this is a sort of exact
04:19 - fractal um one thing I should point out
04:21 - though that self similarity isn't just
04:23 - enough to make a
04:25 - fractal there is a self-similar shape if
04:28 - I take a part of that shape this little
04:30 - line segment and zoom in on it it looks
04:32 - like the original line but this shape
04:34 - doesn't have I would say which is a sort
04:36 - of important thing a kind of fine
04:39 - structure at small scales so this is an
04:41 - important principle of fractals that
04:43 - self- similarity isn't just enough but I
04:46 - want to return back to this idea that
04:47 - this was an exact fractal let's take
04:49 - another
04:52 - scenario now this isn't a shape in
04:55 - nature exactly but let me let me let me
04:57 - um pose this scenario okay I'm going to
05:00 - draw for you because I have this I I I
05:02 - was I've been checking the stock market
05:03 - a lot recently not at all but um let's
05:05 - say we pick a company Apple and we're
05:07 - going to draw the price of Apple stock
05:10 - this is what's been happening to Apple
05:11 - stock maybe it's been going down
05:12 - recently there we go this is a graph of
05:16 - Apple stock now let me ask the question
05:19 - over what time over what time period
05:21 - have I graphed here is this a week a
05:24 - month 10 years a day a minute a second
05:27 - you know trades happen very quickly we
05:28 - don't know the answer to that because
05:31 - let's just say for a second I said this
05:33 - was one year what if I were to go and
05:35 - grab this section which is maybe let's
05:38 - say one month and zoom in on
05:41 - it maybe we might have something that
05:44 - looks like this the parts at at any
05:47 - level of Zoom the shape has the same
05:50 - quality to it now this though is not
05:52 - exact right the pattern that's zoomed in
05:55 - on this part of this time period of the
05:57 - Apple stock is not the exact the one one
05:59 - month shape is not exactly one year but
06:01 - it has the same quality and this is
06:03 - often referred to as a
06:05 - stochastic fractal and the the quality
06:08 - of the shape is kind of has a a random
06:11 - or probab probability component to it so
06:13 - this is an important distinction as we
06:15 - look at different algorithms for
06:16 - generating fractals and making things
06:18 - look natural to what extent do we want
06:20 - kind of exact copies or copies that
06:23 - approximate the whole with some kind of
06:25 - range of probability so um okay so these
06:29 - are the these are uh two important um
06:33 - aspects of a fractal but the key thing
06:38 - the key element that I have not
06:39 - mentioned which will lead us to this
06:42 - path of making all these processing
06:43 - examples that are going to be wonderful
06:45 - is the concept of recursion fractals
06:49 - have are generated from a
06:53 - recursive
06:56 - definition now the idea of of recursion
07:00 - is a beautiful and
07:02 - elegant thing when we implement it it
07:05 - makes our code so short and it's so
07:07 - elegant looking and it creates this
07:08 - beautiful pattern but it's a weird thing
07:10 - and it's a thing that doesn't
07:11 - immediately make sense to us and I want
07:14 - to look uh first at a kind of just pure
07:17 - mathematical scenario where a
07:19 - mathematical concept is defined through
07:21 - recursion recursion means a a function a
07:25 - recursive function is a function that
07:27 - uses itself in its own definition it's
07:30 - it's like saying hi it's like very warm
07:33 - under these lights and people ask well
07:34 - what does it mean for it to be warm and
07:36 - I say oh the definition of warm is the
07:38 - feeling you have when you feel warm
07:40 - that's probably a terrible example for
07:42 - all sorts of linguistic reasons but I'm
07:44 - using the term warm in my definition of
07:46 - the of the term worm worm which seems
07:49 - like a crazy thing that you shouldn't be
07:50 - able to do but in math and in
07:52 - programming this is actually something
07:54 - you you should be doing it's wonderful
07:57 - okay so what let's look at the classic
08:00 - scenario is factorial and I think we're
08:02 - going to look at this we're going to end
08:04 - this video and start to look at
08:05 - recursion in code next okay so let's
08:08 - look at um factorial so uh if you don't
08:11 - remember what factorial is let's just
08:13 - say for a moment right five factorial 5
08:16 - factorial equal 5 * 4 * 3 * 2 * 1 we
08:22 - multiply the number five times every
08:25 - number that come that is that that is
08:27 - less than five all the way down to one
08:29 - right okay so now let's look at what
08:31 - four factorial is 4 * 3 * 2 * 1 oh
08:36 - interesting look this is the same as
08:39 - this right those match so I could
08:42 - actually say 5 factorial equals 5 * 4
08:47 - factorial interesting which actually
08:50 - means I could say the factorial of any
08:53 - number n equals n * the number n -1
08:58 - factorial faal look at this this is it's
09:02 - crazy this is the definition of
09:04 - factorial the definition of factorial is
09:06 - n factorial equals the number n * nus
09:09 - one factorial have we really said what
09:10 - factorial is here I mean it looks kind
09:12 - of like we have it but we have actually
09:15 - because if we play this out more then
09:17 - we're saying ah well you know what this
09:18 - really means 5 factorial = 5 * 4 * 3
09:22 - factorial which means 5 factorial is 5 *
09:24 - 4 * 3 * 2 factorial which is 5 * 4 * 3 *
09:28 - 2 * 1 1 factorial and actually we need
09:31 - to add something to this definition 1
09:34 - factorial equal 1 and in a way this is
09:38 - our exit
09:40 - condition now I mean exit condition I'm
09:43 - using the term exit condition because
09:45 - we're about to program this stuff and
09:47 - one of the things we're going to see
09:48 - with a recursive definition is it's
09:50 - something like a loop right you could
09:52 - imagine write the code this is your
09:54 - exercise write the code to define the
09:58 - function factorial
09:59 - int
10:02 - factorial int n oh I'm kind of ran out
10:06 - of space there you need to return the
10:09 - answer well you could probably do this
10:12 - fairly easily with a loop a for Loop
10:14 - right what I mean 5 * 4 * 3 * 2 * 1 and
10:19 - you know I equals 5 I is greater than um
10:22 - Z iusus the result equals uh the result
10:27 - time I right you could imagine some
10:29 - where you say 5 * 5 - 1 * 5 - 2 * 5 - 3
10:33 - right you have this Loop that's doing
10:34 - that try to do it with recursion a loop
10:37 - has an exit condition when I gets down
10:39 - to one stop looping the recursive
10:42 - definition where factorial is defined
10:44 - according to itself you call itself
10:46 - which calls itself which calls itself
10:48 - which calls itself that has to stop at
10:50 - some point not in theoretical fantasy
10:52 - land where we make fractal that go on
10:53 - for Infinity which is an important
10:55 - question but in real life programming
10:58 - world where we we have discret finite
11:00 - things we have to have an exit condition
11:03 - so this is what this is the principle by
11:06 - which we are going to generate fractal
11:08 - patterns instead of thinking in terms of
11:10 - numbers which is probably you know
11:12 - somebody would probably tell me I can't
11:14 - believe you started without visual
11:15 - imagery people need to learn visually so
11:17 - I don't know but um this is a nice
11:20 - scenario with numbers we're going to
11:21 - look what does it mean when we have a
11:23 - function which draws something which is
11:25 - defined according to drawing something
11:27 - so that's what we're going to do in the
11:29 - next video I had to open the window very
11:31 - hot I don't know if you hear the sounds
11:33 - of the street but um um but before we
11:35 - get to that video Try um doing this try
11:37 - writing the code for factorial and see
11:39 - how far you get and obviously there's an
11:40 - answer in the repository and I'll link
11:42 - to that below as well
11:47 - okay

Cleaned transcript:

hi we're going to talk about fractals today fractals what is a fractal okay let's for a moment um think about the think about back in time sometime in your life where you were sitting at a chair with a little desk in front of it and you were studying geometry middle school high school last week who knows you were learning about circles and polygons and rectangles and lines and the relationships between angles and triangles and sides of shapes all this stuff very important very interesting but now let's think about and so let's think about those shapes that you learned in geometry and how they might describe things we find in our world okay so over here I have the top of a cup of tea and maybe you're would say to yourself that looks I mean you can't really see look it disappears with the white but I can put it right here it looks just like a circle and over here I have this eraser and if I look at this eraser it's rectangular so to some extent these idealized forms these ukian GE geometrical shapes can describe the world we live in I'm staring at this camera it's also very circular and rectangular but think about nature and I have this I don't know if this is going to work but think about nature look at these clouds and I don't know look at these crazy coastlines and these U this sea shell thing and the waves of the water and look at these trees and look at all the lightning and all this stuff and this man is talking about fractals this is by the way is from PBS hunting the hidden dimension I highly recommend you watch that if you want to kind of dive deeper into fractal stuff think about all that stuff that worked perfectly just the way I imagine these are not shapes that we can describe with UK idealized ukan forms we can't describe a lightning bolt I mean maybe it's a series of connected lines but the overall quality of the shape mountains coastlines lightning bolts these are things we need a new type of geometry to describe and it's not so new but it was new in 1975 not actually it wasn't n really new in 1975 the fractals have been around for a very very long time but the term fractal came about in 1975 with the publication of this book I mean you know condensing history there I'm sure there the term came before the book but um the fractal geometry of nature by Ben benoa Mandel BR who coined the term fractal and I'm sure many of you have seen the mandal BR set which is a very very famous fractal um shape I don't have a prepared image to show you but um so what I'm talking in circles here what we want to do today is look at what is this thing called a fractal that describes somehow the these shapes that appear in nature and if we could understand what a fractal is then could we write code to implement algorithms behind that would generate fractal patterns that's what we're going to do today it's very exciting so um let's think so let's I want to define the term fractal a little bit more formally perhaps so a fractal is a shape that when broken into parts right fractal from the Latin fractus meaning broken a shape that when broken into Parts the parts look like a copy of the whole shape now what does that mean exactly so a very common scenario which we'll actually make a processing example that implements in a later video is a tree so let's say I draw a line here and then I connect that line with two other lines and each of those two lines I connect with two other lines and each of those two lines I connect with other two other lines I'm like all these lines a little bit shorter every time I do it and I could sit here all day and I would be a very happy person actually just but I think I'll takeing up too much time in this video so I'll stop but you can see here even though I barely scratched the surface of how many times I can keep connecting these lines if I grab this particular branch and bring it down here and kind of rotate it so it faces up what do I have here I have this shape which is essentially the same as the bigger shape we started with this is is the concept of self similarity very the sort of key quality of fractals fractals are selfsimilar meaning the parts of the shape look like the whole shape and here we have an exact copy of the whole shape inside the part which is an important distinction this is a sort of exact fractal um one thing I should point out though that self similarity isn't just enough to make a fractal there is a selfsimilar shape if I take a part of that shape this little line segment and zoom in on it it looks like the original line but this shape doesn't have I would say which is a sort of important thing a kind of fine structure at small scales so this is an important principle of fractals that self similarity isn't just enough but I want to return back to this idea that this was an exact fractal let's take another scenario now this isn't a shape in nature exactly but let me let me let me um pose this scenario okay I'm going to draw for you because I have this I I I was I've been checking the stock market a lot recently not at all but um let's say we pick a company Apple and we're going to draw the price of Apple stock this is what's been happening to Apple stock maybe it's been going down recently there we go this is a graph of Apple stock now let me ask the question over what time over what time period have I graphed here is this a week a month 10 years a day a minute a second you know trades happen very quickly we don't know the answer to that because let's just say for a second I said this was one year what if I were to go and grab this section which is maybe let's say one month and zoom in on it maybe we might have something that looks like this the parts at at any level of Zoom the shape has the same quality to it now this though is not exact right the pattern that's zoomed in on this part of this time period of the Apple stock is not the exact the one one month shape is not exactly one year but it has the same quality and this is often referred to as a stochastic fractal and the the quality of the shape is kind of has a a random or probab probability component to it so this is an important distinction as we look at different algorithms for generating fractals and making things look natural to what extent do we want kind of exact copies or copies that approximate the whole with some kind of range of probability so um okay so these are the these are uh two important um aspects of a fractal but the key thing the key element that I have not mentioned which will lead us to this path of making all these processing examples that are going to be wonderful is the concept of recursion fractals have are generated from a recursive definition now the idea of of recursion is a beautiful and elegant thing when we implement it it makes our code so short and it's so elegant looking and it creates this beautiful pattern but it's a weird thing and it's a thing that doesn't immediately make sense to us and I want to look uh first at a kind of just pure mathematical scenario where a mathematical concept is defined through recursion recursion means a a function a recursive function is a function that uses itself in its own definition it's it's like saying hi it's like very warm under these lights and people ask well what does it mean for it to be warm and I say oh the definition of warm is the feeling you have when you feel warm that's probably a terrible example for all sorts of linguistic reasons but I'm using the term warm in my definition of the of the term worm worm which seems like a crazy thing that you shouldn't be able to do but in math and in programming this is actually something you you should be doing it's wonderful okay so what let's look at the classic scenario is factorial and I think we're going to look at this we're going to end this video and start to look at recursion in code next okay so let's look at um factorial so uh if you don't remember what factorial is let's just say for a moment right five factorial 5 factorial equal 5 * 4 * 3 * 2 * 1 we multiply the number five times every number that come that is that that is less than five all the way down to one right okay so now let's look at what four factorial is 4 * 3 * 2 * 1 oh interesting look this is the same as this right those match so I could actually say 5 factorial equals 5 * 4 factorial interesting which actually means I could say the factorial of any number n equals n * the number n 1 factorial faal look at this this is it's crazy this is the definition of factorial the definition of factorial is n factorial equals the number n * nus one factorial have we really said what factorial is here I mean it looks kind of like we have it but we have actually because if we play this out more then we're saying ah well you know what this really means 5 factorial = 5 * 4 * 3 factorial which means 5 factorial is 5 * 4 * 3 * 2 factorial which is 5 * 4 * 3 * 2 * 1 1 factorial and actually we need to add something to this definition 1 factorial equal 1 and in a way this is our exit condition now I mean exit condition I'm using the term exit condition because we're about to program this stuff and one of the things we're going to see with a recursive definition is it's something like a loop right you could imagine write the code this is your exercise write the code to define the function factorial int factorial int n oh I'm kind of ran out of space there you need to return the answer well you could probably do this fairly easily with a loop a for Loop right what I mean 5 * 4 * 3 * 2 * 1 and you know I equals 5 I is greater than um Z iusus the result equals uh the result time I right you could imagine some where you say 5 * 5 1 * 5 2 * 5 3 right you have this Loop that's doing that try to do it with recursion a loop has an exit condition when I gets down to one stop looping the recursive definition where factorial is defined according to itself you call itself which calls itself which calls itself which calls itself that has to stop at some point not in theoretical fantasy land where we make fractal that go on for Infinity which is an important question but in real life programming world where we we have discret finite things we have to have an exit condition so this is what this is the principle by which we are going to generate fractal patterns instead of thinking in terms of numbers which is probably you know somebody would probably tell me I can't believe you started without visual imagery people need to learn visually so I don't know but um this is a nice scenario with numbers we're going to look what does it mean when we have a function which draws something which is defined according to drawing something so that's what we're going to do in the next video I had to open the window very hot I don't know if you hear the sounds of the street but um um but before we get to that video Try um doing this try writing the code for factorial and see how far you get and obviously there's an answer in the repository and I'll link to that below as well okay
