With timestamps:

00:00 - [MUSIC PLAYING]
00:07 - I'm sorry.
00:08 - Am I still recording
a video here?
00:10 - [AUDIO LOGO]
00:15 - A coding challenge idea that has
been suggested to me many times
00:18 - is a falling sand simulation.
00:20 - And today is the day that
I'm going to tackle it.
00:22 - Now, I have to confess,
this is not the first time
00:25 - that I've tried to make a
falling sand simulation.
00:27 - If you're familiar with the
initiative called Genuary,
00:30 - which is a month of
generative art in January,
00:33 - it's probably happening
right now because I
00:35 - think it's January 2024.
00:37 - In 2022, I made a falling
sand simulation for Genuary.
00:41 - I have no recollection
of how I did it.
00:44 - But hopefully, there's
some muscle memory
00:46 - or deep within the
recesses of my brain
00:48 - that will help me through today.
00:49 - A really excellent, wonderful
reference if you're like,
00:52 - what are you even talking
about, is the game Noita.
00:55 - It's built on top of the
Falling Everything Engine, which
00:58 - is this incredible game engine,
where every single pixel is
01:01 - simulated.
01:02 - I'd also love to highlight
Max Bittker's Sandspiel.
01:06 - It might not be how
it's pronounced.
01:08 - But I choose to pronounce it
Sandspiel, where you could just
01:12 - create this world of
sand and water and fire
01:15 - and smoke and fungus
all out of pixels.
01:18 - My previous coding challenge,
if you happened to watch it,
01:21 - was about cellular automata.
01:24 - And in fact, this falling
sand simulation, this idea
01:28 - of any pixel having
a state-- is it sand?
01:30 - Is it water?
01:31 - Is it fire?
01:32 - And changing its state based on
what its neighbors are doing,
01:35 - I believe this can be
done with CA-like rules.
01:39 - Now, maybe you want to
keep watching this video.
01:41 - But I do want to just
mention that there
01:44 - is this wonderful
tutorial online by Jason,
01:47 - at jason.today, about
making a falling sand
01:51 - simulator with p5.js.
01:53 - So we'll see.
01:53 - We'll compare and contrast.
01:55 - Maybe at the end, we'll see.
01:56 - How does my version work?
01:57 - How does Jason's version work?
01:58 - But you could also
go check that out.
02:00 - Make your own version.
02:01 - Submit it to the
Passenger Showcase.
02:03 - And we'll see what kinds
of amazing projects
02:06 - this community can make out
of falling sand simulated.
02:10 - Let's first establish the
world that I intend to create.
02:14 - So the Wolfram elementary
CA was a one-dimensional CA
02:19 - where every cell had
a state of a 0 or a 1.
02:23 - Coding Challenge 105, I
think, was the Game of Life,
02:27 - which is a two-dimensional
CA, meaning the grid
02:32 - lives in two dimensions.
02:34 - And every cell has
a state of 0 or 1.
02:39 - For the falling sand simulation,
a two-dimensional grid
02:43 - makes more sense.
02:47 - Let's say this is
my p5.js canvas,
02:50 - and I decide that I'm going
to place a grain of sand
02:54 - on the canvas.
02:54 - That means maybe this
particular cell's state is 1.
02:59 - And all the other states are 0.
03:04 - I want the sand to fall,
meaning the rule will
03:07 - be if there is a cell
with a state of 1
03:10 - that has a cell with
a state of 0 below it,
03:13 - then that piece of sand will
move from its current location
03:17 - to the location below.
03:19 - If it so happens
that there is already
03:23 - a cell with a state of 1
below it, then it can't move.
03:29 - It stops.
03:30 - That way, the sand will pile up.
03:33 - Let's begin by
implementing only that.
03:36 - To make my life a
little easier, I'm
03:38 - going to grab this make2DArray
function from the Game of Life
03:43 - coding challenge.
03:45 - Then let's call the space that
I'm going to create a grid.
03:50 - And let's establish
the resolution
03:53 - of every grain of sand.
03:54 - Now, at some point,
it might be fun to try
03:57 - having a grain of sand
be a single pixel.
03:59 - But for now, let's have
a 10 by 10 rectangle.
04:03 - So I need to establish the
number of columns and rows.
04:10 - The number of
columns is the width
04:12 - of the canvas divided
by the width of one
04:14 - of those little squares--
04:15 - so in this case,
40 divided by 10--
04:17 - 400 divided by 10 would be 40.
04:20 - So I'm going to have
a 40 by 40 grid.
04:22 - So that's what I need to size
my two-dimensional array as.
04:29 - So I'm using a
nested loop to set
04:32 - every position, every
column i, every row j, to 0.
04:37 - I can then use that same nested
loop to draw every square.
04:41 - Maybe if it's 0, it's black.
04:43 - If it's 1, it's white.
04:47 - And just so we can see it, let
me give it a stroke of 255.
04:53 - Oh, and the x position
would be the column
04:56 - times the width of that square.
04:59 - There we go-- a grid
of black squares.
05:02 - That's exactly what
I expected to see.
05:04 - What happens now if I set one
particular cell on this grid
05:09 - to have a state of 1?
05:11 - Look at that.
05:13 - Column 20, row 10 is now white.
05:17 - I am ready to
implement this logic.
05:20 - I need to run a loop over
every single one of these cells
05:25 - and look for any
1's, then check what
05:29 - is the surroundings
of that particular 1.
05:31 - Now, while I'm
doing this analysis,
05:34 - I cannot change the values
in the original grid.
05:37 - So I need another
two-dimensional grid
05:39 - that can act as the next
grid, the next generation,
05:42 - the next frame of animation of
this falling sand simulation.
05:49 - Let's get the state of the
current cell we're looking at.
05:54 - If the state is 1,
I need to look below
05:57 - and see what is there.
05:59 - This is not cols, rows.
06:01 - This is i, j, the state of
the current cell that I'm on.
06:06 - And the cell below is j plus 1.
06:10 - If the state below has a
value of 0, then the cell i,
06:16 - j should now have a state
of 0 in the next generation.
06:20 - And below should
have a state of 1.
06:23 - And now the current
grid is the next grid.
06:27 - I've missed some steps here,
but let's see what we--
06:29 - how far we get.
06:30 - OK, so everything went white.
06:32 - So why?
06:33 - Well, one issue is when
I make this new 2D array,
06:36 - it doesn't have
any values in it.
06:38 - And I'm only assigning the value
0 or 1 if and when I find a 1
06:43 - in the previous grid.
06:44 - I need to set all the
values of the next grid.
06:47 - However, if I'm checking all
the cells and I get to here
06:53 - and I say, like, oh,
in the next generation,
06:56 - this one should be a 0 and
this one should be a 1,
07:00 - I'm going to keep checking.
07:01 - And eventually, I'm
going to get to here
07:03 - and find that it
was a 0 and probably
07:05 - say it should stay a 0.
07:06 - So what I think would work--
07:08 - I'm not 100% sure about
this-- is if I just start in
07:11 - with the new grid, the next
generation having all 0's
07:15 - in it, and I'm just
setting the values of 1
07:17 - based on where the 1's are
in the previous generation.
07:21 - A way I can address this is by
having the make2DArray function
07:26 - just fill everything with 0's.
07:28 - That way, I'm only
moving the 1's around.
07:30 - And the 0's are going
to be there by default.
07:32 - I should mention
that the way that I'm
07:34 - doing this, where the first
index grid, i, is the column
07:39 - and the second
index, j, is the row
07:41 - is be a little backwards,
depending on your point of view
07:45 - and your experience.
07:46 - If you're used to
matrix math, a 2D array,
07:48 - you'd often be saying row,
column, instead of column, row.
07:51 - But this is just the way I
did it in the Game of Life.
07:53 - And as long as I'm being
consistent, it will work.
07:56 - And it's fine.
07:56 - It's fine, it's fine.
07:58 - So now what I'm going to do is
add another little j in here.
08:04 - Oh, look at that.
08:05 - It works now.
08:07 - Amazing.
08:07 - It disappeared when
it hit the bottom.
08:09 - So I need to account
for the edge.
08:12 - If below equals 0 or
if j plus 1 is greater
08:18 - than the number of rows.
08:19 - If j plus 1 is greater than
the number of rows minus 1.
08:24 - Oh.
08:25 - No, less than.
08:26 - If below is 0 and j
is not the bottom row.
08:34 - [BUZZER]
08:35 - I have an OR there,
and I said AND.
08:39 - If below is less--
08:42 - why am I getting this
wrong so many times?
08:45 - Oh!
08:46 - Otherwise, it
needs to stay as 1.
08:48 - I might have had it
right all those times.
08:51 - Otherwise, nextGrid
i, j should stay as 1.
08:57 - And in fact, if everything is
going to be set initially to 0,
09:02 - I don't have to
explicitly set it to 0.
09:04 - So I'm basically deciding if I
should move it down or leave it
09:08 - where it is.
09:09 - Let's add some
mouse interaction.
09:12 - When I click the mouse,
I'll add a grain of sand.
09:20 - So if I take the mouse position
divided by the size of each
09:25 - cell, the width of each cell--
every cell is a square--
09:28 - that should give me the column
and row index into my grid.
09:34 - Look, I'm piling up sand.
09:35 - Let's change this
to mouseDragged.
09:41 - All right, we're cooking.
09:43 - However, I want to add some
more sophistication here.
09:47 - What if I have a grain
of sand and below it
09:51 - is a 1 so it can't move down?
09:54 - However, there is a space
open to the left or the right.
09:58 - It could move to one
of those empty spots.
10:00 - The sand would be
falling down to the right
10:03 - and left building
up a little hill.
10:05 - So let's look at below
right and below left.
10:10 - Now, I should say,
do I even need this?
10:14 - Because wouldn't it be
undefined otherwise?
10:18 - Yeah, it works.
10:20 - I don't even need that.
10:21 - Some better error checking.
10:22 - Yes, good.
10:23 - But why not?
10:25 - Otherwise, I could check
if below right is 0.
10:30 - And then if that's the
case, nextGrid i plus 1,
10:35 - j equals 1, else if below
left equals 0, i minus 1.
10:44 - Oh, boy.
10:46 - OK, all right.
10:47 - I did forget.
10:48 - It's kind of scooting
across there.
10:50 - I do need to ignore
the bottom row.
10:53 - So I only want to check
if j equals rows minus 1,
11:01 - keep it the same.
11:03 - This if statement has gotten
really out of control.
11:06 - I will refactor this later.
11:07 - [MUSIC PLAYING] I will refactor.
11:09 - So if it hits the bottom,
don't do anything.
11:13 - Oh, it's going to keep going.
11:15 - Wait.
11:15 - Oh, I have to go down one.
11:17 - Oh, I'm only going to the right.
11:19 - I also have to go down one.
11:20 - Well, of course.
11:21 - So I actually don't
have this problem.
11:24 - Welcome to a coding
challenge where
11:26 - I didn't plan this in advance.
11:27 - OK, let's come back to this.
11:29 - OK, this is better.
11:33 - OK, there we go.
11:35 - Look at my falling
sand simulation.
11:38 - Now, we do have a
little bit of a problem.
11:39 - Notice how it's always going
to go to the right first.
11:44 - What would be a nice way
of having that be random?
11:47 - I'm going to call it belowA
and belowB plus dir, minus dir.
11:54 - dir is either negative
1 or positive 1.
11:57 - How do I figure out that?
11:59 - Well, dir is 1.
12:01 - If random of 1 is
less than 0.5, then
12:05 - multiply dir times negative 1.
12:07 - Oh, I can't wait to
hear your better way
12:08 - of doing that in the comments.
12:10 - So A is going to
be plus or minus.
12:12 - B is going to be the
opposite of that.
12:14 - And then if belowA is 0,
we're saying plus dir.
12:20 - And if belowB is 0,
we're saying minus dir.
12:23 - So now it should randomly
go left or right.
12:29 - Oh, oh!
12:31 - Now I need to handle the
left and right edges.
12:34 - How do I do that?
12:36 - Oh, whoops!
12:37 - Ah!
12:38 - I forgot the plus 1 here.
12:40 - I need the plus 1 here also.
12:43 - OK, this looks more
like falling sand now.
12:46 - It's not jump bouncing
off like it was before.
12:49 - But why do I get an error here?
12:55 - I'm accessing a nested array.
12:58 - So it's fine if
this is undefined.
13:01 - If the first part is undefined,
I can't get the second part.
13:05 - That will throw an error.
13:06 - Well, I think I could just
check to see if I'm on an edge.
13:10 - Let's just do that.
13:11 - All right, I'm going to
say let belowA and belowB.
13:15 - Let's let them be undefined.
13:18 - I just need to check
the left and the right.
13:20 - And I only need to check i.
13:22 - OK, only if i is greater than
0 and i is less than columns
13:30 - minus 1, then try to
actually get a real value.
13:35 - I still got an error.
13:37 - As long as i plus dir is
greater than or equal to 0
13:43 - and i plus dir is less than or
equal to the number of columns
13:49 - minus 1, then I can do belowA.
13:55 - This is me double-checking
that that's a valid spot.
14:01 - Oh!
14:02 - It's just because my
mouse went off the screen.
14:05 - This is correct now, as
clunky and terrible as it is.
14:08 - But my mouse is
going off the screen.
14:15 - OK, let's take out this
initial grain of sand.
14:18 - Let's review.
14:20 - I want to add grains
of sand but only
14:23 - if my mouse is
within the canvas.
14:26 - Then I want the grains
of sand to move down
14:30 - or to the left or
right if down is filled
14:34 - but not if it's on the bottom
edge or the left or right edge.
14:38 - It can't leave the canvas.
14:40 - Let's improve a few
things about this.
14:42 - One is we can make it
more efficient because I
14:44 - don't need to draw all
of the black squares.
14:50 - Now this is much
faster because I'm only
14:52 - drawing the white squares.
14:53 - I'm skipping drawing
and just filling
14:55 - the background with black.
14:56 - Let's give ourselves
a bit more space.
15:00 - And instead of dropping
just a single grain of sand,
15:03 - what if I drop a small
collection of sand particles
15:06 - around the area
where the mouse is?
15:08 - So I have the column and row.
15:10 - And we could make
a little matrix.
15:13 - How about 5 by 5?
15:16 - So I could write
another little loop
15:18 - where I want to go
from negative 2 to 2.
15:20 - That would be 5 by 5.
15:22 - So I have to say, the extent--
15:24 - I don't know if
that's a good word
15:25 - to use-- would be
divide the matrix by 2.
15:29 - So I'm going to go from
i is negative extent.
15:33 - i is less than or equal
to positive extent, i++.
15:39 - j, j, j.
15:43 - And I'm going to call this the
mouse column and the mouse row
15:48 - because the actual column now
is the mouse column plus i.
15:56 - And the actual row is
the mouse row plus j.
16:00 - And then here, I can take
this and put this in here.
16:05 - So as long as this 5 by 5
area, any one of those cells
16:11 - is within the canvas, I
should be dropping sand.
16:14 - And you can see I'm dropping a
much larger amount of sand now.
16:18 - Nice little stripes--
striping effect.
16:21 - Now, here's the thing.
16:22 - I don't actually
want to do 5 by 5.
16:24 - First of all, that was
much bigger than I thought.
16:26 - So let's make this
3, for example.
16:30 - But also, maybe they shouldn't
always all be dropping.
16:35 - So what if I were to actually
introduce some randomness here.
16:39 - Only if random 1--
16:41 - maybe there's a
75% chance that I'm
16:44 - going to drop that little
grain of sand there.
16:46 - Let's go back to 5.
16:49 - So it's a little more amorphous.
16:52 - OK, now we're
dropping some sand.
16:54 - This is just lovely.
16:55 - How about adding some color?
16:58 - So one thing that I've done here
is that everything is based off
17:02 - of the state being a 0 or a 1.
17:05 - But what if I think of
the state as being 0
17:09 - or anything that's not 0?
17:11 - As long as it's greater
than 0, draw the--
17:15 - what if I used its color?
17:18 - Oh, I have an idea.
17:19 - What if I have a hue
value equal to 0.
17:23 - And let's say-- this is a little
bit nuts-- colorMode, because I
17:27 - have to make everything a
rainbow, clearly, HSB, 360
17:30 - is the default, 255, 255.
17:33 - So this is hue,
saturation, and brightness.
17:35 - So what I'm going
to do is I'm going
17:37 - to set the grid to a hue value.
17:41 - Then I'm going to
fill it with that hue
17:44 - value and a full
brightness and saturation.
17:47 - As long as the state
is greater than 0,
17:51 - everything else
should be the same.
17:52 - Equals not 1 but
the current state.
17:58 - So I'm passing the color around.
18:01 - Let's see what happens.
18:02 - [BUZZER]
18:04 - I don't see anything.
18:05 - Oh, the hue value is 0.
18:08 - I forgot I can't use
a hue value of 0.
18:10 - Oh, my goodness.
18:11 - Let's give it a
hue value of 200.
18:14 - There, OK, it's blue.
18:15 - The reason why I was doing
this is I was thinking,
18:18 - what if the hue
changed over time?
18:20 - So hueValue plus equals 0.1
as I'm dragging the mouse.
18:28 - OK, I guess I should have
it change a little faster.
18:33 - Ooh, I love this.
18:36 - OK, well, it's going
to stop at 360.
18:39 - So if hueValue is greater than
360, set it back equal to 1.
18:47 - [MUSIC PLAYING]
18:54 - Coding challenge complete.
18:57 - However, I don't
know if I can release
19:01 - this code without fixing
it up just a little bit.
19:04 - Let's write a function to help
with this logic down here,
19:09 - a function that returns
true or false if a column is
19:15 - within the bounds or not.
19:18 - What should I call this?
19:19 - withinColumns i.
19:22 - return i is greater
than or equal to 0
19:27 - and i is less than or equal
to the columns minus 1.
19:30 - So now I can check here.
19:33 - withinCols, the column.
19:36 - And let's do one for rows.
19:43 - So that cleans up this
code just a little bit.
19:46 - I can also now clean this code--
19:53 - the state of the current cell.
19:55 - Ah, look at this.
19:56 - I have that variable, state.
19:58 - So I can use that here.
20:00 - This will make things a
little bit nicer also.
20:05 - I'm checking a random direction.
20:06 - That's fine.
20:07 - I don't love just
making them undefined.
20:10 - Let's start with
them as negative 1.
20:12 - Then if it's within, then
I'll give it the actual value.
20:17 - And then these won't
trigger unless they're
20:20 - 0, which is not negative 1.
20:23 - I don't know if that's better.
20:24 - A little bit better.
20:25 - Maybe I'll put some
comments in the code.
20:27 - That'll help a little bit.
20:28 - Just hold that
thought for a second.
20:30 - [MUSIC PLAYING]
20:34 - I don't need this anymore.
20:49 - Do I dare try this now
with the sand smaller?
20:56 - It's divided by half.
21:01 - So this is lovely.
21:03 - But it's missing a
kind of critical thing.
21:05 - Notice how the sand is
falling at a constant speed.
21:09 - It just so happens I've
written this entire book called
21:13 - Nature of Code all about
physics simulation.
21:16 - And chapter 2 is all about
velocity and acceleration.
21:20 - And what is a force but a vector
that causes an object with mass
21:25 - to accelerate?
21:26 - Is there a way
that I could apply
21:29 - a gravitational acceleration
to these little bits of sand
21:33 - as they fall?
21:34 - That would be a little
tricky because the sand
21:39 - should be falling more than
just one cell at a time.
21:45 - This is a challenge I'm
going to leave to you.
21:48 - I'll address it maybe
at a live stream
21:50 - and showcase any of you who
submit your falling sand
21:54 - simulations to the
Passenger Showcase.
21:56 - I also want to remind
you to read jason.today.
22:00 - Well, that's not
their last name.
22:01 - But that's their URL--
22:03 - jason.today's blog post all
about making a falling sand
22:07 - simulator.
22:07 - And you can see here that
there is a Grid class, ooh,
22:12 - with a higher order
function like fill
22:14 - and this swapping
function that allows
22:16 - you to swap two particles.
22:18 - Oh, and they're just using
a one-dimensional array.
22:20 - You might like this strategy.
22:22 - Oh, and you can see
there's different colors.
22:25 - So there's some other
things you could
22:27 - learn by following this post.
22:28 - But hopefully, you enjoyed
this coding challenge.
22:31 - This was technically another
cellular automata, though,
22:34 - in truth, it's a stochastic
one because of the way
22:37 - that I'm randomly
moving the sand
22:39 - left or right as it's falling.
22:41 - And I can't wait to
see what you make.
22:43 - Have a great day.
22:45 - [TOOTING]
22:46 - [MUSIC PLAYING]
22:51 - [BLIPS AND BLEEPS]

Cleaned transcript:

[MUSIC PLAYING] I'm sorry. Am I still recording a video here? [AUDIO LOGO] A coding challenge idea that has been suggested to me many times is a falling sand simulation. And today is the day that I'm going to tackle it. Now, I have to confess, this is not the first time that I've tried to make a falling sand simulation. If you're familiar with the initiative called Genuary, which is a month of generative art in January, it's probably happening right now because I think it's January 2024. In 2022, I made a falling sand simulation for Genuary. I have no recollection of how I did it. But hopefully, there's some muscle memory or deep within the recesses of my brain that will help me through today. A really excellent, wonderful reference if you're like, what are you even talking about, is the game Noita. It's built on top of the Falling Everything Engine, which is this incredible game engine, where every single pixel is simulated. I'd also love to highlight Max Bittker's Sandspiel. It might not be how it's pronounced. But I choose to pronounce it Sandspiel, where you could just create this world of sand and water and fire and smoke and fungus all out of pixels. My previous coding challenge, if you happened to watch it, was about cellular automata. And in fact, this falling sand simulation, this idea of any pixel having a state is it sand? Is it water? Is it fire? And changing its state based on what its neighbors are doing, I believe this can be done with CAlike rules. Now, maybe you want to keep watching this video. But I do want to just mention that there is this wonderful tutorial online by Jason, at jason.today, about making a falling sand simulator with p5.js. So we'll see. We'll compare and contrast. Maybe at the end, we'll see. How does my version work? How does Jason's version work? But you could also go check that out. Make your own version. Submit it to the Passenger Showcase. And we'll see what kinds of amazing projects this community can make out of falling sand simulated. Let's first establish the world that I intend to create. So the Wolfram elementary CA was a onedimensional CA where every cell had a state of a 0 or a 1. Coding Challenge 105, I think, was the Game of Life, which is a twodimensional CA, meaning the grid lives in two dimensions. And every cell has a state of 0 or 1. For the falling sand simulation, a twodimensional grid makes more sense. Let's say this is my p5.js canvas, and I decide that I'm going to place a grain of sand on the canvas. That means maybe this particular cell's state is 1. And all the other states are 0. I want the sand to fall, meaning the rule will be if there is a cell with a state of 1 that has a cell with a state of 0 below it, then that piece of sand will move from its current location to the location below. If it so happens that there is already a cell with a state of 1 below it, then it can't move. It stops. That way, the sand will pile up. Let's begin by implementing only that. To make my life a little easier, I'm going to grab this make2DArray function from the Game of Life coding challenge. Then let's call the space that I'm going to create a grid. And let's establish the resolution of every grain of sand. Now, at some point, it might be fun to try having a grain of sand be a single pixel. But for now, let's have a 10 by 10 rectangle. So I need to establish the number of columns and rows. The number of columns is the width of the canvas divided by the width of one of those little squares so in this case, 40 divided by 10 400 divided by 10 would be 40. So I'm going to have a 40 by 40 grid. So that's what I need to size my twodimensional array as. So I'm using a nested loop to set every position, every column i, every row j, to 0. I can then use that same nested loop to draw every square. Maybe if it's 0, it's black. If it's 1, it's white. And just so we can see it, let me give it a stroke of 255. Oh, and the x position would be the column times the width of that square. There we go a grid of black squares. That's exactly what I expected to see. What happens now if I set one particular cell on this grid to have a state of 1? Look at that. Column 20, row 10 is now white. I am ready to implement this logic. I need to run a loop over every single one of these cells and look for any 1's, then check what is the surroundings of that particular 1. Now, while I'm doing this analysis, I cannot change the values in the original grid. So I need another twodimensional grid that can act as the next grid, the next generation, the next frame of animation of this falling sand simulation. Let's get the state of the current cell we're looking at. If the state is 1, I need to look below and see what is there. This is not cols, rows. This is i, j, the state of the current cell that I'm on. And the cell below is j plus 1. If the state below has a value of 0, then the cell i, j should now have a state of 0 in the next generation. And below should have a state of 1. And now the current grid is the next grid. I've missed some steps here, but let's see what we how far we get. OK, so everything went white. So why? Well, one issue is when I make this new 2D array, it doesn't have any values in it. And I'm only assigning the value 0 or 1 if and when I find a 1 in the previous grid. I need to set all the values of the next grid. However, if I'm checking all the cells and I get to here and I say, like, oh, in the next generation, this one should be a 0 and this one should be a 1, I'm going to keep checking. And eventually, I'm going to get to here and find that it was a 0 and probably say it should stay a 0. So what I think would work I'm not 100% sure about this is if I just start in with the new grid, the next generation having all 0's in it, and I'm just setting the values of 1 based on where the 1's are in the previous generation. A way I can address this is by having the make2DArray function just fill everything with 0's. That way, I'm only moving the 1's around. And the 0's are going to be there by default. I should mention that the way that I'm doing this, where the first index grid, i, is the column and the second index, j, is the row is be a little backwards, depending on your point of view and your experience. If you're used to matrix math, a 2D array, you'd often be saying row, column, instead of column, row. But this is just the way I did it in the Game of Life. And as long as I'm being consistent, it will work. And it's fine. It's fine, it's fine. So now what I'm going to do is add another little j in here. Oh, look at that. It works now. Amazing. It disappeared when it hit the bottom. So I need to account for the edge. If below equals 0 or if j plus 1 is greater than the number of rows. If j plus 1 is greater than the number of rows minus 1. Oh. No, less than. If below is 0 and j is not the bottom row. [BUZZER] I have an OR there, and I said AND. If below is less why am I getting this wrong so many times? Oh! Otherwise, it needs to stay as 1. I might have had it right all those times. Otherwise, nextGrid i, j should stay as 1. And in fact, if everything is going to be set initially to 0, I don't have to explicitly set it to 0. So I'm basically deciding if I should move it down or leave it where it is. Let's add some mouse interaction. When I click the mouse, I'll add a grain of sand. So if I take the mouse position divided by the size of each cell, the width of each cell every cell is a square that should give me the column and row index into my grid. Look, I'm piling up sand. Let's change this to mouseDragged. All right, we're cooking. However, I want to add some more sophistication here. What if I have a grain of sand and below it is a 1 so it can't move down? However, there is a space open to the left or the right. It could move to one of those empty spots. The sand would be falling down to the right and left building up a little hill. So let's look at below right and below left. Now, I should say, do I even need this? Because wouldn't it be undefined otherwise? Yeah, it works. I don't even need that. Some better error checking. Yes, good. But why not? Otherwise, I could check if below right is 0. And then if that's the case, nextGrid i plus 1, j equals 1, else if below left equals 0, i minus 1. Oh, boy. OK, all right. I did forget. It's kind of scooting across there. I do need to ignore the bottom row. So I only want to check if j equals rows minus 1, keep it the same. This if statement has gotten really out of control. I will refactor this later. [MUSIC PLAYING] I will refactor. So if it hits the bottom, don't do anything. Oh, it's going to keep going. Wait. Oh, I have to go down one. Oh, I'm only going to the right. I also have to go down one. Well, of course. So I actually don't have this problem. Welcome to a coding challenge where I didn't plan this in advance. OK, let's come back to this. OK, this is better. OK, there we go. Look at my falling sand simulation. Now, we do have a little bit of a problem. Notice how it's always going to go to the right first. What would be a nice way of having that be random? I'm going to call it belowA and belowB plus dir, minus dir. dir is either negative 1 or positive 1. How do I figure out that? Well, dir is 1. If random of 1 is less than 0.5, then multiply dir times negative 1. Oh, I can't wait to hear your better way of doing that in the comments. So A is going to be plus or minus. B is going to be the opposite of that. And then if belowA is 0, we're saying plus dir. And if belowB is 0, we're saying minus dir. So now it should randomly go left or right. Oh, oh! Now I need to handle the left and right edges. How do I do that? Oh, whoops! Ah! I forgot the plus 1 here. I need the plus 1 here also. OK, this looks more like falling sand now. It's not jump bouncing off like it was before. But why do I get an error here? I'm accessing a nested array. So it's fine if this is undefined. If the first part is undefined, I can't get the second part. That will throw an error. Well, I think I could just check to see if I'm on an edge. Let's just do that. All right, I'm going to say let belowA and belowB. Let's let them be undefined. I just need to check the left and the right. And I only need to check i. OK, only if i is greater than 0 and i is less than columns minus 1, then try to actually get a real value. I still got an error. As long as i plus dir is greater than or equal to 0 and i plus dir is less than or equal to the number of columns minus 1, then I can do belowA. This is me doublechecking that that's a valid spot. Oh! It's just because my mouse went off the screen. This is correct now, as clunky and terrible as it is. But my mouse is going off the screen. OK, let's take out this initial grain of sand. Let's review. I want to add grains of sand but only if my mouse is within the canvas. Then I want the grains of sand to move down or to the left or right if down is filled but not if it's on the bottom edge or the left or right edge. It can't leave the canvas. Let's improve a few things about this. One is we can make it more efficient because I don't need to draw all of the black squares. Now this is much faster because I'm only drawing the white squares. I'm skipping drawing and just filling the background with black. Let's give ourselves a bit more space. And instead of dropping just a single grain of sand, what if I drop a small collection of sand particles around the area where the mouse is? So I have the column and row. And we could make a little matrix. How about 5 by 5? So I could write another little loop where I want to go from negative 2 to 2. That would be 5 by 5. So I have to say, the extent I don't know if that's a good word to use would be divide the matrix by 2. So I'm going to go from i is negative extent. i is less than or equal to positive extent, i++. j, j, j. And I'm going to call this the mouse column and the mouse row because the actual column now is the mouse column plus i. And the actual row is the mouse row plus j. And then here, I can take this and put this in here. So as long as this 5 by 5 area, any one of those cells is within the canvas, I should be dropping sand. And you can see I'm dropping a much larger amount of sand now. Nice little stripes striping effect. Now, here's the thing. I don't actually want to do 5 by 5. First of all, that was much bigger than I thought. So let's make this 3, for example. But also, maybe they shouldn't always all be dropping. So what if I were to actually introduce some randomness here. Only if random 1 maybe there's a 75% chance that I'm going to drop that little grain of sand there. Let's go back to 5. So it's a little more amorphous. OK, now we're dropping some sand. This is just lovely. How about adding some color? So one thing that I've done here is that everything is based off of the state being a 0 or a 1. But what if I think of the state as being 0 or anything that's not 0? As long as it's greater than 0, draw the what if I used its color? Oh, I have an idea. What if I have a hue value equal to 0. And let's say this is a little bit nuts colorMode, because I have to make everything a rainbow, clearly, HSB, 360 is the default, 255, 255. So this is hue, saturation, and brightness. So what I'm going to do is I'm going to set the grid to a hue value. Then I'm going to fill it with that hue value and a full brightness and saturation. As long as the state is greater than 0, everything else should be the same. Equals not 1 but the current state. So I'm passing the color around. Let's see what happens. [BUZZER] I don't see anything. Oh, the hue value is 0. I forgot I can't use a hue value of 0. Oh, my goodness. Let's give it a hue value of 200. There, OK, it's blue. The reason why I was doing this is I was thinking, what if the hue changed over time? So hueValue plus equals 0.1 as I'm dragging the mouse. OK, I guess I should have it change a little faster. Ooh, I love this. OK, well, it's going to stop at 360. So if hueValue is greater than 360, set it back equal to 1. [MUSIC PLAYING] Coding challenge complete. However, I don't know if I can release this code without fixing it up just a little bit. Let's write a function to help with this logic down here, a function that returns true or false if a column is within the bounds or not. What should I call this? withinColumns i. return i is greater than or equal to 0 and i is less than or equal to the columns minus 1. So now I can check here. withinCols, the column. And let's do one for rows. So that cleans up this code just a little bit. I can also now clean this code the state of the current cell. Ah, look at this. I have that variable, state. So I can use that here. This will make things a little bit nicer also. I'm checking a random direction. That's fine. I don't love just making them undefined. Let's start with them as negative 1. Then if it's within, then I'll give it the actual value. And then these won't trigger unless they're 0, which is not negative 1. I don't know if that's better. A little bit better. Maybe I'll put some comments in the code. That'll help a little bit. Just hold that thought for a second. [MUSIC PLAYING] I don't need this anymore. Do I dare try this now with the sand smaller? It's divided by half. So this is lovely. But it's missing a kind of critical thing. Notice how the sand is falling at a constant speed. It just so happens I've written this entire book called Nature of Code all about physics simulation. And chapter 2 is all about velocity and acceleration. And what is a force but a vector that causes an object with mass to accelerate? Is there a way that I could apply a gravitational acceleration to these little bits of sand as they fall? That would be a little tricky because the sand should be falling more than just one cell at a time. This is a challenge I'm going to leave to you. I'll address it maybe at a live stream and showcase any of you who submit your falling sand simulations to the Passenger Showcase. I also want to remind you to read jason.today. Well, that's not their last name. But that's their URL jason.today's blog post all about making a falling sand simulator. And you can see here that there is a Grid class, ooh, with a higher order function like fill and this swapping function that allows you to swap two particles. Oh, and they're just using a onedimensional array. You might like this strategy. Oh, and you can see there's different colors. So there's some other things you could learn by following this post. But hopefully, you enjoyed this coding challenge. This was technically another cellular automata, though, in truth, it's a stochastic one because of the way that I'm randomly moving the sand left or right as it's falling. And I can't wait to see what you make. Have a great day. [TOOTING] [MUSIC PLAYING] [BLIPS AND BLEEPS]
