With timestamps:

00:04 - here is a scenario for you we have a
00:06 - processing
00:08 - window we have a mover object it's a
00:11 - nice little friendly little circle that
00:13 - we've drawn in that processing window
00:15 - and that mover object has a location
00:16 - Vector right we know the location Vector
00:19 - we can think of it as a vector that
00:20 - points from the origin to that object's
00:23 - location which is some XY location on
00:27 - the screen now we know that object has a
00:30 - we know it has a velocity and we're
00:32 - adding this piece acceleration that's
00:34 - what we did in the last video but we
00:35 - looked at a constant acceleration a
00:37 - random acceleration we gave some
00:38 - suggestions ideas in this video we are
00:41 - going to look at an acceleration I have
00:42 - a scratch that always points in the
00:46 - direction of the mouse so let's draw our
00:49 - Mouse uh Arrow I'm spending way too much
00:52 - time drawing this mouse arrow and
00:55 - this that right there is our
00:58 - acceleration
01:01 - this is something we have to compute
01:03 - each and every frame because the
01:05 - relationship between the object location
01:07 - and the mouse changes the user is moving
01:08 - the mouse the object is moving so every
01:11 - frame we have to calculate a vector that
01:13 - points from the location to the mouse so
01:16 - how do we do that thinking thinking are
01:19 - you thinking I'm thinking I already know
01:20 - the answer because I thought about this
01:22 - in advance we need subtraction am I
01:25 - recording I'm recording excellent we
01:26 - need subtraction so first we need two
01:28 - things one is we're in the mover class
01:30 - presumably we know we have a p Vector
01:33 - called
01:34 - location so this we can just assume
01:37 - exists it exist it is the P Vector
01:39 - location now we're in some function
01:44 - maybe this function is called
01:46 - update and this is where we're going to
01:49 - calculate our acceleration at the very
01:51 - very end of this
01:54 - function we want to set the value of
01:56 - acceleration to something a vector that
01:59 - points from the the location to the
02:00 - mouse so how do we do that well the
02:02 - first thing we need to do is establish
02:04 - the mouse's location as a
02:06 - vector the mouse's location is a vector
02:09 - so we can create one p Vector Mouse
02:13 - right is a new P vector and what are its
02:17 - values Mouse X comma Mouse
02:21 - y
02:24 - oh okay so we have a new V Vector called
02:27 - Mouse which has a location Mouse X Comm
02:29 - Mouse y awesome we already have location
02:32 - boom because we're in the Mover class
02:34 - with the location variable now we just
02:35 - created Mouse how do we get a vector
02:37 - that points from one location to another
02:40 - that a vector that points from one
02:42 - location to another is the difference
02:44 - between those two locations the
02:46 - difference between two vectors um the
02:49 - the mouse minus location is the vector
02:51 - that points from location to Mouse we
02:53 - went through this in a video about
02:56 - Vector math in addition in subtraction I
02:58 - I think I kind of botched it which is I
02:59 - don't want to do it again but if you're
03:01 - confused by that go back and try to
03:02 - watch that video and then uh send me
03:05 - your complaint letters to um PO Box
03:07 - something or other whatever I don't know
03:10 - I hate the regular mail that's another
03:12 - story for another time so we just can do
03:14 - something much simpler here we can just
03:15 - say mouse.
03:17 - subtract location and this Vector that
03:21 - we called Mouse is now a vector that
03:23 - points all the way from here to there
03:25 - all right that's pretty good why don't
03:26 - we go ahead and add that into our code
03:29 - uh
03:32 - no I want to I want to but it's not the
03:35 - right time what's the problem here let's
03:38 - let's kind of let's for a moment bear
03:40 - with me we're going to redraw this
03:42 - diagram
03:44 - again okay we have the object's location
03:48 - that's represented by that Circle we
03:50 - have the
03:51 - objects we have the mouse location as
03:54 - represented by that Arrow let us now
03:56 - visually represent the vector we've
03:58 - calculated here as the mouse location
04:00 - minus the object's actual
04:05 - location does that Vector make sense for
04:08 - acceleration I will ask you it in a
04:10 - different way is it your goal to
04:13 - simulate the process of teleportation
04:15 - right if we say if I want to get from
04:18 - here all the way to where the camera is
04:19 - which would be a bad idea because then
04:20 - i' walk into the camera and that would
04:22 - be weird and bump into it and fall over
04:23 - or whatever but if I want to get from
04:25 - here all the way to another point if I
04:28 - accelerate with a MAG itude of the
04:30 - distance between where I am and that
04:32 - point it's like I'm kind of getting
04:33 - going instantly there no we want to
04:34 - create a simulation which appears kind
04:37 - of lifelike and improvisational these
04:38 - are terms we're going to use we're
04:40 - especially going to see those when we
04:41 - get to steering behaviors
04:43 - later um so we don't want to accelerate
04:46 - with such a large magnitude that will
04:48 - not be a very satisfying uh visual
04:51 - experience for us to watch on the screen
04:53 - so we need to reduce this
04:55 - magnitude to something so there are are
04:59 - lots of different ways we could do that
05:01 - I could say mouse. multiply .1 so I
05:04 - would reduce the magnitude to 0.1 or I
05:07 - might say normalize the mouse normalize
05:09 - the vector to unit one and then scale
05:11 - accordingly or even just as a simple
05:14 - thing right now I could say set
05:16 - magnitude to
05:18 - 0.5 some arbitrary value so look how
05:21 - simple this was all we needed to do
05:24 - because we have this physics engine of
05:27 - acceleration into velocity velocity into
05:28 - location we already have all of the sort
05:31 - of ground the groundwork for motion done
05:34 - all we've done is created a really
05:35 - simple algorithm for calculating
05:36 - acceleration as where is the mouse
05:39 - what's the difference between the mouse
05:40 - and where I currently am am make that a
05:42 - vector set its magnitude to this and
05:45 - then I want to put exclamation point
05:47 - here Al you can't put that in your code
05:48 - acceleration equals that Vector it's
05:51 - really as easy as that now that we have
05:53 - this foundation so let us walk over to
05:55 - our
05:58 - example okay and let's look at where we
06:01 - are well first let's run this just so we
06:03 - remember what's it doing right now this
06:05 - is the random acceleration so it's
06:07 - moving every frame with some random
06:08 - acceleration and we can see that in our
06:10 - code right down here this is random
06:13 - acceleration random acceleration now
06:16 - we're going to adjust this and we're
06:17 - going to do exactly we're going to
06:18 - rewrite what we did over here right see
06:21 - that we're going to put that uh over
06:24 - here we're going to do it together okay
06:26 - so first we need a p Vector named Mouse
06:30 - which is the mouse's location then we
06:33 - need to subtract the object's actual
06:35 - location then we want to set its
06:37 - magnitude to I don't know we pick 0 five
06:39 - and say acceleration equals mouse let's
06:43 - run this and look at this I now have an
06:46 - object that is following the mouse and
06:48 - if I let the mouse just stop here in the
06:50 - center you can see it's kind of hovering
06:53 - around it now one thing we we one thing
06:56 - that's important about this to realize
06:57 - is we still have this velocity. limit
06:59 - fine so we had a little safety net built
07:01 - in we don't actually know if our
07:03 - acceleration value is really reasonable
07:05 - so let's act I'm just out of just out of
07:07 - I really should just end this video
07:08 - right now because I finally did one
07:09 - that's only seven minutes long but let's
07:11 - just take a minute to just take a look
07:12 - at what happens here we can see like
07:14 - whoa okay so first of all something sort
07:17 - of funny now that we have this kind of
07:19 - scenario where we want this thing
07:21 - following the mouse it doesn't really
07:22 - make sense for it when it goes to the
07:23 - top to come back in the bottom you can
07:25 - see it's spiraling out of control so one
07:27 - thing that's really nice about the way
07:28 - that we built this sketch is we have
07:30 - update edges and display in separate
07:32 - methods so we can just turn off that
07:34 - wraparound on the edges very easily and
07:36 - see what's happening here oh come back
07:39 - now look at this that acceleration is so
07:42 - strong that it's kind of we need a much
07:44 - bigger window to see what's happening so
07:46 - you can see the value of kind of
07:48 - limiting a velocity we could also say ah
07:51 - maybe that magnitude was kind of very
07:53 - large let's set it to 02 and you can see
07:56 - ah now we have something maybe a little
07:58 - bit more Reon was kind of like speeding
08:00 - up and we have this sort of orbiting
08:02 - thing it's very similar to what
08:03 - gravitational attraction might seem
08:07 - like but I kind of like having that
08:09 - limit in there I like having it a little
08:11 - bit stronger so anyway this is up to you
08:14 - now to tune this and to sort of figure
08:16 - out what's going to kind of make the
08:18 - most sense for what you're trying to do
08:19 - but you can see now if you ever wanted
08:21 - to have something follow the mouse this
08:24 - is something following the mouse with
08:26 - this kind of acceleration model there a
08:29 - few things about this that I think would
08:31 - be uh worth noting number one is the
08:34 - magnitude of the acceleration is fixed
08:37 - maybe you want to think about a scenario
08:39 - where the closer it is to the mouse the
08:41 - stronger that acceleration or the weaker
08:43 - that acceleration so is it stronger when
08:45 - it's far away or stronger when it's
08:46 - close in fact when we see gravitational
08:48 - attraction that is a perfect scenario of
08:50 - this right the formula of gravity the
08:53 - the force of gravity the magnitude of
08:54 - the force of gravity is inversely
08:56 - proportional to the distance bodies that
08:58 - are farther away experience much less
09:00 - gravitational attraction than bodies
09:02 - that are close look I have some
09:03 - clementines here these so these gravity
09:06 - weaker gravity stronger weaker stronger
09:09 - in our case force the acceleration is
09:12 - the same the acceleration is the same
09:13 - maybe you want it to slow down when it
09:15 - gets near there maybe you wanted to
09:16 - there's all maybe you want to add see if
09:18 - you can add some random acceleration
09:20 - along with the acceleration towards the
09:21 - mouse there's lots that you could do for
09:23 - this but we're going to we're going to
09:24 - formalize all of this into a more
09:28 - um
09:30 - and
09:30 - seed to finish what I'm saying what you
09:33 - should look at doing right now is
09:35 - creating a motion simulation where you
09:37 - control acceleration only we said this
09:39 - in the last video I'm saying it again
09:41 - keep going with that model in the next
09:43 - series of videos we're going to we're
09:44 - going to we're going to say ah
09:47 - acceleration that is when we when we are
09:49 - controlling an object's acceleration
09:51 - we're really applying forces to that
09:52 - object and we're going to have a
09:54 - specific model for applying multiple
09:55 - forces to that object that's where we're
09:57 - going from here and that's what we're
09:58 - going to see in the next
10:01 - video
10:04 - goodbye

Cleaned transcript:

here is a scenario for you we have a processing window we have a mover object it's a nice little friendly little circle that we've drawn in that processing window and that mover object has a location Vector right we know the location Vector we can think of it as a vector that points from the origin to that object's location which is some XY location on the screen now we know that object has a we know it has a velocity and we're adding this piece acceleration that's what we did in the last video but we looked at a constant acceleration a random acceleration we gave some suggestions ideas in this video we are going to look at an acceleration I have a scratch that always points in the direction of the mouse so let's draw our Mouse uh Arrow I'm spending way too much time drawing this mouse arrow and this that right there is our acceleration this is something we have to compute each and every frame because the relationship between the object location and the mouse changes the user is moving the mouse the object is moving so every frame we have to calculate a vector that points from the location to the mouse so how do we do that thinking thinking are you thinking I'm thinking I already know the answer because I thought about this in advance we need subtraction am I recording I'm recording excellent we need subtraction so first we need two things one is we're in the mover class presumably we know we have a p Vector called location so this we can just assume exists it exist it is the P Vector location now we're in some function maybe this function is called update and this is where we're going to calculate our acceleration at the very very end of this function we want to set the value of acceleration to something a vector that points from the the location to the mouse so how do we do that well the first thing we need to do is establish the mouse's location as a vector the mouse's location is a vector so we can create one p Vector Mouse right is a new P vector and what are its values Mouse X comma Mouse y oh okay so we have a new V Vector called Mouse which has a location Mouse X Comm Mouse y awesome we already have location boom because we're in the Mover class with the location variable now we just created Mouse how do we get a vector that points from one location to another that a vector that points from one location to another is the difference between those two locations the difference between two vectors um the the mouse minus location is the vector that points from location to Mouse we went through this in a video about Vector math in addition in subtraction I I think I kind of botched it which is I don't want to do it again but if you're confused by that go back and try to watch that video and then uh send me your complaint letters to um PO Box something or other whatever I don't know I hate the regular mail that's another story for another time so we just can do something much simpler here we can just say mouse. subtract location and this Vector that we called Mouse is now a vector that points all the way from here to there all right that's pretty good why don't we go ahead and add that into our code uh no I want to I want to but it's not the right time what's the problem here let's let's kind of let's for a moment bear with me we're going to redraw this diagram again okay we have the object's location that's represented by that Circle we have the objects we have the mouse location as represented by that Arrow let us now visually represent the vector we've calculated here as the mouse location minus the object's actual location does that Vector make sense for acceleration I will ask you it in a different way is it your goal to simulate the process of teleportation right if we say if I want to get from here all the way to where the camera is which would be a bad idea because then i' walk into the camera and that would be weird and bump into it and fall over or whatever but if I want to get from here all the way to another point if I accelerate with a MAG itude of the distance between where I am and that point it's like I'm kind of getting going instantly there no we want to create a simulation which appears kind of lifelike and improvisational these are terms we're going to use we're especially going to see those when we get to steering behaviors later um so we don't want to accelerate with such a large magnitude that will not be a very satisfying uh visual experience for us to watch on the screen so we need to reduce this magnitude to something so there are are lots of different ways we could do that I could say mouse. multiply .1 so I would reduce the magnitude to 0.1 or I might say normalize the mouse normalize the vector to unit one and then scale accordingly or even just as a simple thing right now I could say set magnitude to 0.5 some arbitrary value so look how simple this was all we needed to do because we have this physics engine of acceleration into velocity velocity into location we already have all of the sort of ground the groundwork for motion done all we've done is created a really simple algorithm for calculating acceleration as where is the mouse what's the difference between the mouse and where I currently am am make that a vector set its magnitude to this and then I want to put exclamation point here Al you can't put that in your code acceleration equals that Vector it's really as easy as that now that we have this foundation so let us walk over to our example okay and let's look at where we are well first let's run this just so we remember what's it doing right now this is the random acceleration so it's moving every frame with some random acceleration and we can see that in our code right down here this is random acceleration random acceleration now we're going to adjust this and we're going to do exactly we're going to rewrite what we did over here right see that we're going to put that uh over here we're going to do it together okay so first we need a p Vector named Mouse which is the mouse's location then we need to subtract the object's actual location then we want to set its magnitude to I don't know we pick 0 five and say acceleration equals mouse let's run this and look at this I now have an object that is following the mouse and if I let the mouse just stop here in the center you can see it's kind of hovering around it now one thing we we one thing that's important about this to realize is we still have this velocity. limit fine so we had a little safety net built in we don't actually know if our acceleration value is really reasonable so let's act I'm just out of just out of I really should just end this video right now because I finally did one that's only seven minutes long but let's just take a minute to just take a look at what happens here we can see like whoa okay so first of all something sort of funny now that we have this kind of scenario where we want this thing following the mouse it doesn't really make sense for it when it goes to the top to come back in the bottom you can see it's spiraling out of control so one thing that's really nice about the way that we built this sketch is we have update edges and display in separate methods so we can just turn off that wraparound on the edges very easily and see what's happening here oh come back now look at this that acceleration is so strong that it's kind of we need a much bigger window to see what's happening so you can see the value of kind of limiting a velocity we could also say ah maybe that magnitude was kind of very large let's set it to 02 and you can see ah now we have something maybe a little bit more Reon was kind of like speeding up and we have this sort of orbiting thing it's very similar to what gravitational attraction might seem like but I kind of like having that limit in there I like having it a little bit stronger so anyway this is up to you now to tune this and to sort of figure out what's going to kind of make the most sense for what you're trying to do but you can see now if you ever wanted to have something follow the mouse this is something following the mouse with this kind of acceleration model there a few things about this that I think would be uh worth noting number one is the magnitude of the acceleration is fixed maybe you want to think about a scenario where the closer it is to the mouse the stronger that acceleration or the weaker that acceleration so is it stronger when it's far away or stronger when it's close in fact when we see gravitational attraction that is a perfect scenario of this right the formula of gravity the the force of gravity the magnitude of the force of gravity is inversely proportional to the distance bodies that are farther away experience much less gravitational attraction than bodies that are close look I have some clementines here these so these gravity weaker gravity stronger weaker stronger in our case force the acceleration is the same the acceleration is the same maybe you want it to slow down when it gets near there maybe you wanted to there's all maybe you want to add see if you can add some random acceleration along with the acceleration towards the mouse there's lots that you could do for this but we're going to we're going to formalize all of this into a more um and seed to finish what I'm saying what you should look at doing right now is creating a motion simulation where you control acceleration only we said this in the last video I'm saying it again keep going with that model in the next series of videos we're going to we're going to we're going to say ah acceleration that is when we when we are controlling an object's acceleration we're really applying forces to that object and we're going to have a specific model for applying multiple forces to that object that's where we're going from here and that's what we're going to see in the next video goodbye
