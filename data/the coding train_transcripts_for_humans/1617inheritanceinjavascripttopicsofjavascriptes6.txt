With timestamps:

00:00 - - I am here in this video
00:01 - to talk to you about
something called inheritance.
00:04 - Inheritance in the context of
object oriented programming
00:08 - and JavaScript and ES6 classes.
00:12 - Oof!
00:12 - So, first of all,
00:13 - there are three core
foundational principles
00:16 - to object oriented programming.
00:17 - Let me write those down!
00:19 - There's this idea of encapsulation,
00:21 - there is this idea of inheritance,
00:23 - that is the topic of
this particular video,
00:27 - and there is also the
concept of polymorphism
00:31 - which I will come back to.
00:32 - And I have made videos on
all of these topics before.
00:36 - I can link to them.
00:38 - Those videos, however,
00:39 - were all made in the processing
programming environment
00:42 - and looking at these three principles
00:44 - in the Java programming language.
00:46 - Now I am talking about
exactly the same thing
00:49 - but in JavaScript.
00:51 - And I have already made a
whole set of videos about
00:54 - encapsulation and object orineted
programming in JavaScript
00:57 - making use of something
called ES6 classes.
01:02 - So one of the things
you have to get used to
01:04 - if you choose to spend you
life programming in JavaScript
01:08 - is that it's just always changing
01:09 - and there's 500 different
ways to do the same thing
01:11 - and everybody's got their
opinion on which way is best.
01:14 - And a lot of my older
videos used a prototype
01:18 - a prototypical object based way
01:21 - of doing object oriented programming
01:23 - with a constructor function
01:25 - and you'll find those in
older coding challenges
01:27 - and you'll even find a set of videos about
01:29 - how to do object oriented
programming that way
01:31 - and even one about how to
do inheritance that way.
01:34 - And if you watch that
you're a true champion
01:37 - because this is wildly confusing
01:39 - and I have no idea if I explain that well.
01:40 - But I am here in this video
01:42 - to talk about ES6 classes.
01:43 - So what is a class?
01:47 - Oh, sorry, ES6 being the
version of JavaScript
01:50 - that came out in 2015.
01:53 - It is currently 2019
while I'm recording this.
01:56 - But it is now pretty widely
supported across all browsers.
01:59 - So, the idea of a class,
02:01 - and I'm going to use as my example
02:03 - something called particle,
02:05 - because I am demonstrating
this in the context
02:07 - of animation and graphics.
02:09 - So I'm drawing particles in a canvas
02:12 - those particles move around the canvas
02:14 - and the class is a template
02:19 - for the making of an object.
02:21 - If I create a particle class,
02:24 - then I can have a variable somewhere else,
02:26 - maybe I call it p,
02:27 - and I can say new particle.
02:30 - An analogy that's often used to describe
02:32 - the distinction between
the class and the object
02:35 - is the cookie cutter versus the cookie.
02:38 - So the cookie cutter
isn't actually a cookie.
02:41 - It's a thing that you
can make cookies with.
02:44 - So this is a template, there's
no particle object here.
02:47 - This is just a template to
make actual particle objects.
02:50 - And if I have my template
02:51 - I can make more than one particle object
02:55 - each with its own set of properites
02:57 - all made from the same template.
02:59 - So the new key word here,
03:01 - saying new particle means execute
something inside the class
03:05 - called a constructor function.
03:07 - So I'm kind of I guess
by accident reviewing
03:10 - some of the basics of ES6 classes
03:12 - and object oriented programming
03:13 - to get myself into the inheritance topic.
03:15 - But I'm going to kind of move along
03:16 - because you can find and see many more
03:18 - details and examples about
this in the other videos.
03:21 - So this is the basic idea.
03:22 - So let's go over to the code for a second.
03:25 - So what I have over here is a canvas
03:27 - with a little dot moving around.
03:28 - And this dot is an example
of a particle object.
03:31 - So here's my class.
03:32 - I have the constructor,
03:34 - the object gets an x and a y
03:36 - and the update function
changes the x and y randomly
03:39 - and the show function draws it as a boint.
03:42 - A boint?
03:43 - (laughs)
03:45 - It would be great if there
was a function called boint,
03:47 - by the way.
03:48 - Anyway.
03:50 - So let's say now,
03:51 - let's say this is your life,
03:52 - this is what's happening to you.
03:54 - You know what I would like?
03:56 - I would like to put another
one of these particles
03:58 - I wanted to,
03:59 - but I want it to look different.
04:01 - And so I want it to be a square particle.
04:04 - So the first thing you
might do is like, okay,
04:06 - I'm going to make a Boolean
variable like isSquare
04:10 - and I'm going to set that to a square,
04:14 - I'm going to add another
argument here square.
04:17 - And then I'm going to say
04:20 - alright, if this dot is square,
04:24 - then draw this as a,
04:29 - not a square a function,
04:30 - then just use rectangle,
04:33 - this dot x this dot y,
04:35 - when will this ever end?
04:36 - At least I could use the square function,
04:38 - it's the least I could do.
04:40 - Could say square,
04:41 - otherwise make it a point,
04:44 - and then, ugh, I'm so tired already.
04:47 - I need a parenthesis here
04:49 - and then I have to go over here,
04:51 - and I could change this to like true
04:53 - because I want it to be a square,
04:54 - and then I refresh and
look, it's a square,
04:56 - and then I could say false and it's not.
04:59 - So now I could have two particles,
05:02 - oh, I could have p1 and p2
05:07 - and I could have p1 do this
05:09 - and p2 do this,
05:12 - oh, I'm so tired.
05:14 - This is so much work and so much coding.
05:17 - And I'm going to call update
and show on both of those.
05:20 - And there we go.
05:21 - Now I have my circle and my square.
05:23 - Alright, so that's one solution to this.
05:25 - I have two different
mostly the same things
05:28 - with some sort of core
essential difference.
05:30 - I don't like this solution.
05:31 - Let me do it another way.
05:33 - I'm going to make another,
05:35 - I'm going to just create
a new JavaScript file.
05:37 - I'm going to call it square.js.
05:40 - I'm going to go here,
05:42 - I'm going to copy paste the whole thing
05:44 - paste that in here,
05:46 - I'm going to get rid of
this idea of isSquare,
05:48 - and I'm going to have
a class called SquareP
05:51 - for square particle.
05:53 - I'm going to get rid of this variable.
05:55 - And then I'm going to,
05:58 - this one's the square so I'm
going to draw it as a square.
06:02 - And then this one is the circle
06:04 - so I'm going to draw this
just as a plain old point.
06:08 - And I don't need this anymore,
06:09 - and I don't need this.
06:10 - So I have basically a particle class
06:13 - and I have a square class, SquareP class,
06:16 - they're entirely the same
06:17 - but one draws as a square
06:19 - and one draws as a particle.
06:20 - Now I'm going to go back to Sketch.js
06:22 - and I'm going to say new SquareP
06:28 - and I'm going to refresh,
06:30 - and if I did everything right,
06:31 - no, SquareP is not defined
06:33 - because I forgot to reference it
06:35 - in my index.html so let me do that.
06:39 - Then I'm going to go back
06:42 - and there we go!
06:43 - (bell dings)
06:44 - Good night!
06:45 - This video is now over,
06:46 - but not at all!
06:46 - In fact, I'm only just getting started.
06:49 - All of this was exposition.
06:51 - Exposition to the point
where we are right now,
06:52 - where we think to ourselves,
06:55 - there has got to be a better way.
06:57 - There has got to be a better way
06:58 - than having some kind of type
variable inside of my class
07:02 - and then I use if statements,
07:03 - or to have two separate classes
07:06 - which I've just copy pasted the code
07:07 - and changed some things.
07:09 - How could I have this idea of classes
07:13 - that inherit a bunch of
properties from another class,
07:16 - but modify them.
07:17 - And this is in fact
what inheritance is for.
07:20 - So let's now think about that
07:21 - in the context of this.
07:24 - What if I could write another class
07:29 - and I'm going to call that class SquareP,
07:33 - which is like the silliest
name for a class ever,
07:36 - but it's somehow my
example for this video.
07:38 - This is what happens when
you record a tutorial
07:41 - after three hours of recording tutorials.
07:43 - Class SquareP, ugh!
07:46 - But I missed the most
important piece of this.
07:48 - You had to wait through so much video
07:51 - just to get to this point
07:53 - where now I am going to say extends,
07:56 - and this is the most important thing,
07:58 - particle.
08:00 - This is the keyword.
08:03 - Extends is a keyword in JavaScript.
08:05 - In ES6 that makes the
square particle class,
08:10 - the SquareP class,
08:11 - inherit from particle.
08:14 - So let's think about what this is.
08:15 - Now the constructor is a special case.
08:18 - The constructor is a special case
08:20 - where we're going to have to
work with it in a different way.
08:22 - But, if what this means
08:27 - is if there is an update function,
08:31 - update function,
08:33 - and if there is a show function,
08:37 - that it's as if I copy pasted
08:40 - the update and the show
function into SquareP
08:43 - but I don't actually have to.
08:45 - These functions are now
part of the SquareP class.
08:49 - It extends from particle,
08:51 - it inherits particle.
08:52 - This is also sometimes
referred to as the child class,
08:57 - or maybe the subclass.
08:59 - And this is often referred
to as the super class
09:02 - or the parent class.
09:03 - And the word super is quite important here
09:06 - because that's actually
a keyword in JavaScript
09:10 - that's going to allow us to do
some interesting things later.
09:12 - In a moment.
09:13 - Now while I could be done
09:15 - by just inheriting update and show
09:17 - and sort of assuming I'm also
going to inherit the constructor,
09:21 - it's a good habit,
09:23 - and I think in almost all cases
09:24 - you really need to explicitly
write your own constructor
09:28 - even if you are extending another class,
09:31 - but in the case where all I want to do
09:35 - is when I make a SquareP,
09:38 - a square particle,
09:39 - and actually in my Nature of Code book,
09:40 - which this example is mostly the same,
09:42 - I call this class confetti.
09:44 - That's another name I could be using.
09:46 - If I want to just say,
09:48 - you know what?
09:49 - I'm going to define my own constructor
09:50 - but I want to do exactly the same thing
09:53 - as whatever happens in here
09:54 - and the way to do that
09:56 - is just by calling the super function.
09:59 - So the keyword super means
10:02 - execute something from
the parent or super class.
10:06 - So super with parenthesis
means run the constructor.
10:09 - So let's now actually try to go over
10:11 - and do this in the code.
10:13 - So now what we can do
10:15 - is we can say SquareP extends particle,
10:19 - this is the magic.
10:20 - Once I've extended particle,
10:23 - I can just get rid of this.
10:25 - That stuff is all inherited
now from particle!
10:27 - Woohoo!
10:28 - And then I can just say hey,
super, do the same thing.
10:32 - And I still have to
path in those arguments.
10:35 - This is basically saying hey,
10:36 - you're making a new SquareP.
10:38 - When you make a new SquareP
go ahead and make a,
10:42 - call the particle code,
10:43 - the code that's in the
particle constructor.
10:45 - So this is now the square particle,
10:47 - let's call this confetti.
10:50 - Just as a different name.
10:53 - Now if I go back to the sketch.
10:56 - And this was left over from before,
10:58 - I forgot that I had this in there.
11:00 - Right, if I run this again,
11:03 - we have two identical particles.
11:05 - It's as if I made two particles
11:08 - because the confetti class,
11:11 - the confetti object is
a complete duplicate.
11:14 - It just inherits the
particle class completely.
11:17 - But the whole point of this
is we can now do things
11:21 - like augment and override.
11:24 - So what if I want my confetti
object to always have a color?
11:30 - So maybe I can add another value here.
11:33 - Like I'm going to call this
this.bright equals a random number
11:38 - between 0 and 255.
11:40 - So confetti objects do
everything a particle does
11:45 - but get an additional property.
11:47 - And then maybe, you know,
11:50 - I want to draw them a different way.
11:51 - I want their physics
to be exactly the same
11:54 - so I want to inherit the update function,
11:56 - but I want to draw them a different way.
11:58 - So I can actually override
the show function.
12:01 - So if I write a function
that has the same name
12:04 - of the function that it's inheriting
12:06 - then this will then be ignored
for any confetti objects.
12:11 - And just to change that name here.
12:15 - Let me call this confetti.
12:16 - So let's do that.
12:17 - Let's augment and override.
12:20 - I mean, those are sort of terms,
12:21 - I don't know what the technical
terms for those things are.
12:23 - So back over here I
might say something like
12:26 - alright, so initialize
x and y the same way
12:29 - but add a new property
12:33 - that's a random number between 0 and 255.
12:35 - Then override the show function.
12:38 - You know I could go back and be like,
12:39 - how did I do this?
12:41 - But I don't need to.
12:42 - I don't even need to.
12:43 - I'm just going to say in the
show function I'm going to say
12:45 - fill this.bright stroke 255,
12:51 - strokeWeight 1,
12:53 - and then I'm going to
say square this.x this.y,
13:00 - and oh, maybe this should also have
13:03 - a variable called r for the side length.
13:06 - And I'm going to make that 10.
13:08 - And then I'm going to say this.r.
13:11 - So now if I run this we can see, look!
13:15 - There is a square, there's
a confetti particle,
13:18 - and a regular particle.
13:19 - This is the idea of inheritance.
13:21 - I can have a base class,
13:23 - or I can have a parent class,
13:24 - I can inherit from it,
13:26 - I can add properties and I can override.
13:29 - But guess what I could also do?
13:30 - Let's say what I want to do is, you know,
13:33 - my confetti object,
13:35 - it should update just
like a particle updates,
13:38 - but I also want to do one thing more,
13:40 - I want its size to change.
13:42 - So if I come back to
here one thing I could do
13:46 - is in the confetti
object I could say update
13:51 - and then I could say well,
13:53 - first do whatever you
do in the parent object.
13:57 - Call super.update.
13:59 - So do whatever you would
normally do for updating
14:02 - and then do one more thing.
14:04 - This.r plus equal random value.
14:08 - So in addition to,
14:10 - in addition to, sorry, changing the,
14:14 - that's going to be too much.
14:15 - In addition to changing the x and y
14:18 - which presumably is taken care
of by what it's inherited,
14:20 - also change r.
14:22 - And now, there we go.
14:23 - You can see that this is now
having an additional behavior.
14:26 - The size is changing.
14:28 - Now I don't know that the
way that I've set this up
14:31 - is particularly elegant or useful,
14:33 - but what I will say is a common technique,
14:36 - especially you'll see
this in some of my videos
14:39 - where I work with physics libraries,
14:41 - is that you might have
kind of this base class
14:44 - that includes all of the
code and math for the physics
14:47 - of how something moves,
14:50 - and you can imagine that
being a particle class,
14:51 - but you have all these
different variations of that
14:54 - with slightly different behaviors
14:55 - and different design elements
14:57 - so that base class can kind of be
15:00 - the core physics of your system,
15:03 - but lots of different things
can exist in your system
15:05 - and be customized in ways
without having to duplicate code
15:08 - over and over again.
15:09 - I should also mention that
classes can only inherit
15:13 - from one other class,
15:15 - but it is called a tree,
15:17 - an inheritance tree because,
15:20 - and an example I think I've
given before in other videos
15:23 - is an animal kingdom.
15:25 - So you could imagine a scenario
15:27 - where you have this
idea of an animal class,
15:35 - and maybe that has some
properties that all animals share.
15:39 - I don't know what this would be.
15:40 - Weight?
15:42 - That's all I can think of.
15:44 - But then you might have,
15:46 - from that you might have some mammal,
15:49 - a mammal class, a reptile class,
15:54 - those would have things specific to that.
15:57 - And then maybe the mammal
from that is going to inherit,
16:01 - there's going to be a canine class.
16:02 - I don't know if this is
right biologically or what,
16:05 - but the point is you can inherit things
16:07 - all the way up the tree.
16:08 - So if animal has a property called weight
16:12 - and mammal has a property like fur color,
16:16 - then canine is going to
get fur color and weight,
16:19 - it's going to inherit that.
16:20 - Everything inherits.
16:20 - So you can have,
16:22 - it's not a network, it's a tree.
16:24 - And so this is something
that's really quite powerful
16:27 - in designing large software systems
16:30 - and working with other
JavaScript libraries
16:32 - that you want to have a
very flexible and agile way
16:36 - of augmenting and using
features from something else
16:38 - while implementing your own thing.
16:40 - This is kind of the core principle
16:42 - of object oriented programming.
16:44 - Of inheritance.
16:45 - So I need to come back and
I need to do one more video
16:47 - to talk about one other thing,
16:49 - which is the term polymorphism.
16:51 - Which for me feels a little
less relevant in JavaScript,
16:54 - because polymorphism really comes up
16:57 - when you have a strongly typed language
16:59 - cause how you specify what
data types certain things are.
17:02 - JavaScript is very good at just kind of
17:04 - figuring it out in lots of cases.
17:06 - But in this case what I can do
17:08 - is I can make an array
17:09 - that's full of lots of
different kinds of objects
17:12 - that inherit from each other
17:13 - and then just blanket
apply the same thing,
17:16 - the same functions, the same functionality
17:18 - to all of them.
17:19 - So maybe I'll try to do one more video
17:20 - just to basically take this
and put it into an array.
17:24 - Alright?
17:25 - Thanks, I hope you got
something from this.
17:26 - There's probably like a
lot more that you can do,
17:29 - but this maybe gives you an
inkling of how inheritance works
17:31 - and might change the way you think about
17:33 - making a project in
JavaScript in the future.
17:36 - Thanks!
17:37 - (upbeat electronic music)
17:44 - (bell dings)

Cleaned transcript:

I am here in this video to talk to you about something called inheritance. Inheritance in the context of object oriented programming and JavaScript and ES6 classes. Oof! So, first of all, there are three core foundational principles to object oriented programming. Let me write those down! There's this idea of encapsulation, there is this idea of inheritance, that is the topic of this particular video, and there is also the concept of polymorphism which I will come back to. And I have made videos on all of these topics before. I can link to them. Those videos, however, were all made in the processing programming environment and looking at these three principles in the Java programming language. Now I am talking about exactly the same thing but in JavaScript. And I have already made a whole set of videos about encapsulation and object orineted programming in JavaScript making use of something called ES6 classes. So one of the things you have to get used to if you choose to spend you life programming in JavaScript is that it's just always changing and there's 500 different ways to do the same thing and everybody's got their opinion on which way is best. And a lot of my older videos used a prototype a prototypical object based way of doing object oriented programming with a constructor function and you'll find those in older coding challenges and you'll even find a set of videos about how to do object oriented programming that way and even one about how to do inheritance that way. And if you watch that you're a true champion because this is wildly confusing and I have no idea if I explain that well. But I am here in this video to talk about ES6 classes. So what is a class? Oh, sorry, ES6 being the version of JavaScript that came out in 2015. It is currently 2019 while I'm recording this. But it is now pretty widely supported across all browsers. So, the idea of a class, and I'm going to use as my example something called particle, because I am demonstrating this in the context of animation and graphics. So I'm drawing particles in a canvas those particles move around the canvas and the class is a template for the making of an object. If I create a particle class, then I can have a variable somewhere else, maybe I call it p, and I can say new particle. An analogy that's often used to describe the distinction between the class and the object is the cookie cutter versus the cookie. So the cookie cutter isn't actually a cookie. It's a thing that you can make cookies with. So this is a template, there's no particle object here. This is just a template to make actual particle objects. And if I have my template I can make more than one particle object each with its own set of properites all made from the same template. So the new key word here, saying new particle means execute something inside the class called a constructor function. So I'm kind of I guess by accident reviewing some of the basics of ES6 classes and object oriented programming to get myself into the inheritance topic. But I'm going to kind of move along because you can find and see many more details and examples about this in the other videos. So this is the basic idea. So let's go over to the code for a second. So what I have over here is a canvas with a little dot moving around. And this dot is an example of a particle object. So here's my class. I have the constructor, the object gets an x and a y and the update function changes the x and y randomly and the show function draws it as a boint. A boint? (laughs) It would be great if there was a function called boint, by the way. Anyway. So let's say now, let's say this is your life, this is what's happening to you. You know what I would like? I would like to put another one of these particles I wanted to, but I want it to look different. And so I want it to be a square particle. So the first thing you might do is like, okay, I'm going to make a Boolean variable like isSquare and I'm going to set that to a square, I'm going to add another argument here square. And then I'm going to say alright, if this dot is square, then draw this as a, not a square a function, then just use rectangle, this dot x this dot y, when will this ever end? At least I could use the square function, it's the least I could do. Could say square, otherwise make it a point, and then, ugh, I'm so tired already. I need a parenthesis here and then I have to go over here, and I could change this to like true because I want it to be a square, and then I refresh and look, it's a square, and then I could say false and it's not. So now I could have two particles, oh, I could have p1 and p2 and I could have p1 do this and p2 do this, oh, I'm so tired. This is so much work and so much coding. And I'm going to call update and show on both of those. And there we go. Now I have my circle and my square. Alright, so that's one solution to this. I have two different mostly the same things with some sort of core essential difference. I don't like this solution. Let me do it another way. I'm going to make another, I'm going to just create a new JavaScript file. I'm going to call it square.js. I'm going to go here, I'm going to copy paste the whole thing paste that in here, I'm going to get rid of this idea of isSquare, and I'm going to have a class called SquareP for square particle. I'm going to get rid of this variable. And then I'm going to, this one's the square so I'm going to draw it as a square. And then this one is the circle so I'm going to draw this just as a plain old point. And I don't need this anymore, and I don't need this. So I have basically a particle class and I have a square class, SquareP class, they're entirely the same but one draws as a square and one draws as a particle. Now I'm going to go back to Sketch.js and I'm going to say new SquareP and I'm going to refresh, and if I did everything right, no, SquareP is not defined because I forgot to reference it in my index.html so let me do that. Then I'm going to go back and there we go! (bell dings) Good night! This video is now over, but not at all! In fact, I'm only just getting started. All of this was exposition. Exposition to the point where we are right now, where we think to ourselves, there has got to be a better way. There has got to be a better way than having some kind of type variable inside of my class and then I use if statements, or to have two separate classes which I've just copy pasted the code and changed some things. How could I have this idea of classes that inherit a bunch of properties from another class, but modify them. And this is in fact what inheritance is for. So let's now think about that in the context of this. What if I could write another class and I'm going to call that class SquareP, which is like the silliest name for a class ever, but it's somehow my example for this video. This is what happens when you record a tutorial after three hours of recording tutorials. Class SquareP, ugh! But I missed the most important piece of this. You had to wait through so much video just to get to this point where now I am going to say extends, and this is the most important thing, particle. This is the keyword. Extends is a keyword in JavaScript. In ES6 that makes the square particle class, the SquareP class, inherit from particle. So let's think about what this is. Now the constructor is a special case. The constructor is a special case where we're going to have to work with it in a different way. But, if what this means is if there is an update function, update function, and if there is a show function, that it's as if I copy pasted the update and the show function into SquareP but I don't actually have to. These functions are now part of the SquareP class. It extends from particle, it inherits particle. This is also sometimes referred to as the child class, or maybe the subclass. And this is often referred to as the super class or the parent class. And the word super is quite important here because that's actually a keyword in JavaScript that's going to allow us to do some interesting things later. In a moment. Now while I could be done by just inheriting update and show and sort of assuming I'm also going to inherit the constructor, it's a good habit, and I think in almost all cases you really need to explicitly write your own constructor even if you are extending another class, but in the case where all I want to do is when I make a SquareP, a square particle, and actually in my Nature of Code book, which this example is mostly the same, I call this class confetti. That's another name I could be using. If I want to just say, you know what? I'm going to define my own constructor but I want to do exactly the same thing as whatever happens in here and the way to do that is just by calling the super function. So the keyword super means execute something from the parent or super class. So super with parenthesis means run the constructor. So let's now actually try to go over and do this in the code. So now what we can do is we can say SquareP extends particle, this is the magic. Once I've extended particle, I can just get rid of this. That stuff is all inherited now from particle! Woohoo! And then I can just say hey, super, do the same thing. And I still have to path in those arguments. This is basically saying hey, you're making a new SquareP. When you make a new SquareP go ahead and make a, call the particle code, the code that's in the particle constructor. So this is now the square particle, let's call this confetti. Just as a different name. Now if I go back to the sketch. And this was left over from before, I forgot that I had this in there. Right, if I run this again, we have two identical particles. It's as if I made two particles because the confetti class, the confetti object is a complete duplicate. It just inherits the particle class completely. But the whole point of this is we can now do things like augment and override. So what if I want my confetti object to always have a color? So maybe I can add another value here. Like I'm going to call this this.bright equals a random number between 0 and 255. So confetti objects do everything a particle does but get an additional property. And then maybe, you know, I want to draw them a different way. I want their physics to be exactly the same so I want to inherit the update function, but I want to draw them a different way. So I can actually override the show function. So if I write a function that has the same name of the function that it's inheriting then this will then be ignored for any confetti objects. And just to change that name here. Let me call this confetti. So let's do that. Let's augment and override. I mean, those are sort of terms, I don't know what the technical terms for those things are. So back over here I might say something like alright, so initialize x and y the same way but add a new property that's a random number between 0 and 255. Then override the show function. You know I could go back and be like, how did I do this? But I don't need to. I don't even need to. I'm just going to say in the show function I'm going to say fill this.bright stroke 255, strokeWeight 1, and then I'm going to say square this.x this.y, and oh, maybe this should also have a variable called r for the side length. And I'm going to make that 10. And then I'm going to say this.r. So now if I run this we can see, look! There is a square, there's a confetti particle, and a regular particle. This is the idea of inheritance. I can have a base class, or I can have a parent class, I can inherit from it, I can add properties and I can override. But guess what I could also do? Let's say what I want to do is, you know, my confetti object, it should update just like a particle updates, but I also want to do one thing more, I want its size to change. So if I come back to here one thing I could do is in the confetti object I could say update and then I could say well, first do whatever you do in the parent object. Call super.update. So do whatever you would normally do for updating and then do one more thing. This.r plus equal random value. So in addition to, in addition to, sorry, changing the, that's going to be too much. In addition to changing the x and y which presumably is taken care of by what it's inherited, also change r. And now, there we go. You can see that this is now having an additional behavior. The size is changing. Now I don't know that the way that I've set this up is particularly elegant or useful, but what I will say is a common technique, especially you'll see this in some of my videos where I work with physics libraries, is that you might have kind of this base class that includes all of the code and math for the physics of how something moves, and you can imagine that being a particle class, but you have all these different variations of that with slightly different behaviors and different design elements so that base class can kind of be the core physics of your system, but lots of different things can exist in your system and be customized in ways without having to duplicate code over and over again. I should also mention that classes can only inherit from one other class, but it is called a tree, an inheritance tree because, and an example I think I've given before in other videos is an animal kingdom. So you could imagine a scenario where you have this idea of an animal class, and maybe that has some properties that all animals share. I don't know what this would be. Weight? That's all I can think of. But then you might have, from that you might have some mammal, a mammal class, a reptile class, those would have things specific to that. And then maybe the mammal from that is going to inherit, there's going to be a canine class. I don't know if this is right biologically or what, but the point is you can inherit things all the way up the tree. So if animal has a property called weight and mammal has a property like fur color, then canine is going to get fur color and weight, it's going to inherit that. Everything inherits. So you can have, it's not a network, it's a tree. And so this is something that's really quite powerful in designing large software systems and working with other JavaScript libraries that you want to have a very flexible and agile way of augmenting and using features from something else while implementing your own thing. This is kind of the core principle of object oriented programming. Of inheritance. So I need to come back and I need to do one more video to talk about one other thing, which is the term polymorphism. Which for me feels a little less relevant in JavaScript, because polymorphism really comes up when you have a strongly typed language cause how you specify what data types certain things are. JavaScript is very good at just kind of figuring it out in lots of cases. But in this case what I can do is I can make an array that's full of lots of different kinds of objects that inherit from each other and then just blanket apply the same thing, the same functions, the same functionality to all of them. So maybe I'll try to do one more video just to basically take this and put it into an array. Alright? Thanks, I hope you got something from this. There's probably like a lot more that you can do, but this maybe gives you an inkling of how inheritance works and might change the way you think about making a project in JavaScript in the future. Thanks! (upbeat electronic music) (bell dings)
