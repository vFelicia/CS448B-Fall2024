With timestamps:

00:00 - [TRAIN WHISTLE]
00:01 - Hello.
00:02 - OK, I have to admit
something to you.
00:04 - This is a substitute
train whistle.
00:06 - But this is not a substitute
Coding Train video.
00:10 - I'm so excited about
what I am embarking
00:12 - on today, a new tutorial
sequence about how
00:16 - to make your own Discord bot.
00:17 - I hope that by the end of all
these videos, however many
00:21 - I end up making,
you'll be able to have
00:22 - your own bot up and running
in your own Discord server,
00:26 - or a server that
you participate in.
00:27 - Now, if you haven't
already joined
00:31 - the Coding Train Discord,
[TRAIN WHISTLE] oh dear,
00:35 - I'm so sorry.
00:36 - If we could get the sound effect
of the actual train whistle.
00:39 - [TRAIN WHISTLE]
00:40 - Please come and join.
00:41 - I'll put an invite to the
Coding Train Discord server
00:44 - in the video's description.
00:46 - If you don't have
a Discord account,
00:47 - you're going to need
to sign up for one.
00:49 - But guess what, you'll need one
to make your own Discord bot.
00:52 - Please, the first thing you
should do is go to read me,
00:55 - where there is a code
of conduct and a set
00:57 - of rules and expectations
for the server.
01:00 - And in order to get access
to all of the channels,
01:04 - you'll need to
react with an emoji
01:05 - to acknowledge that you
have read this message
01:07 - and agree to follow
the code of conduct.
01:09 - So there's lots more to
say about the Coding Train
01:12 - community on the
Discord server itself.
01:14 - It's a great place if you
need help with your code,
01:16 - if you just want to hang out
and share pictures of your pets.
01:19 - There's a lot of channels for
a lot of different things.
01:22 - And so please come
and say hi there.
01:23 - One of my favorite
things to do is
01:25 - to read the
Introductions channel,
01:27 - because I get to know the
community of people who
01:29 - are watching these videos
and where they come from
01:31 - and what they care about and
what they're excited to try
01:34 - and make themselves with code.
01:36 - OK, enough, enough.
01:37 - In this first video,
what I want to do
01:39 - is cover all of the technical
pieces, like what do you need?
01:43 - You need a text editor, you need
a console, you need Node.js.
01:47 - What are all the pieces you
need to run your Discord bot?
01:49 - And in case you haven't
heard of one of those pieces,
01:51 - where can you find the
resources to get those up
01:53 - and running on your computer?
01:55 - As well as how to create
a Discord application
01:59 - through the developer docs,
or the developer website,
02:02 - the Discord developer website.
02:04 - And get your secret
token key thingies
02:07 - that you'll need to be able
to run your Discord bot, OK?
02:10 - So we're going to do that,
all that, in this first video,
02:12 - and then I'll start following
up with the basics of writing
02:15 - the code, and showing
you how to run the bot,
02:17 - and all that other
good stuff too.
02:18 - All right, what are the
pieces of the puzzle here?
02:22 - Ultimately, where I
want to get to first
02:25 - is that on my own
computer, I am going
02:28 - to be typing code
into a text editor.
02:32 - The text editor I use is
VSCode, Visual Studio Code,
02:35 - but you could really use any.
02:38 - I want to run this code.
02:39 - Maybe this is going to be
a file called index.js.
02:42 - And I want to run this
code using Node.js.
02:46 - So I'm going to say
something like node index.js.
02:52 - And when I run
this, the bot itself
02:57 - is running on my laptop,
my personal computer.
03:02 - But how is it going to
communicate with Discord?
03:05 - Well, weirdly enough, Discord
is also running on my computer.
03:11 - So do they talk to each
other directly like that?
03:13 - Like am I running a
bot on my computer
03:14 - that's talking to Discord
running on my computer?
03:16 - No.
03:18 - So discord is a service.
03:20 - I'm just running
the Discord client
03:21 - on my laptop where I
can send my messages
03:24 - and read messages coming in.
03:25 - But ultimately,
there is a server,
03:29 - the Discord server
itself, that my laptop
03:34 - is communicating with.
03:36 - That's how, when
I type a message,
03:37 - it sends it to the server.
03:38 - And presumably,
somebody else who's
03:40 - running-- if it's direct
message to somebody else,
03:42 - then that message I send to
the server is going to get
03:44 - sent to that other client.
03:45 - So this server is
managing everything.
03:47 - So ultimately,
actually, the way that I
03:51 - will see a message
that the bot posts
03:53 - or that I could send a message
from Discord to the bot--
03:56 - this should really be
a much bigger diagram.
04:03 - Now that I've zoomed
in a little bit,
04:05 - if my code wants
to send a message
04:07 - to be viewable in Discord, it's
going to send it to the server.
04:11 - And the server will send
it to the Discord client.
04:13 - So ultimately, the
bot that I'm writing
04:16 - is a Discord application
like the client.
04:19 - It's just not as sophisticated.
04:20 - It's just a command
line thing that I
04:22 - run through Node that can send
messages and read messages.
04:26 - Now, this isn't the
end of the story.
04:28 - I mean, running index.js as
the Discord bot on my laptop
04:31 - isn't a sustainable solution,
because eventually I
04:33 - need to close my laptop.
04:35 - I need to put it away
to go on vacation.
04:37 - I need to sleep.
04:39 - And I need a permanent
computer that can always
04:42 - have the Discord bot running.
04:43 - And so what I would like to
show you, eventually also,
04:46 - is how to not run index.js
on my local laptop here,
04:50 - but to deploy it somewhere
into the so-called cloud.
04:54 - I could use a service
like Glitch or Heroku
04:57 - or DigitalOcean, or
Amazon Web Services.
04:59 - I could make my own
Raspberry Pi or set up
05:02 - my own old computer
that's always
05:04 - connected to the internet.
05:05 - Anything that's like
an always on computer
05:07 - that can run my Node code
can act as the permanent bot.
05:14 - Now I can make
this smaller again.
05:18 - And the idea here is
all the human beings,
05:20 - as represented by these
laptops, are communicating
05:23 - with the Discord server.
05:24 - They're sending messages.
05:25 - They're receiving messages.
05:26 - And now I have a new
non-human being, a bot,
05:30 - also communicating
with the server,
05:32 - sending and receiving messages.
05:33 - And I can code and
program any crazy ID
05:37 - I want for how the
humans and the bot
05:40 - could interact with each other.
05:41 - One thing that should
really explain here.
05:43 - I'm conflating the idea of
the Discord service, which
05:46 - is a company that runs probably
a lot of different servers
05:50 - that allows people to sign
up for Discord accounts,
05:52 - and the idea of a Discord server
like the Coding Train Choo Choo
05:56 - server.
05:57 - So the terms Discord
server generally
05:59 - means like a server, a specific
server for a single community,
06:03 - like Coding Train, or
there's an ML5 Discord,
06:06 - and there's countless
other Discord
06:07 - servers for gaming communities
and podcast communities.
06:11 - And so all of those are
like little bubbles in here.
06:15 - And the clients that are
members of Coding Train
06:17 - are all connected to just one.
06:19 - And I'm going to add my bot
specifically to the Coding
06:22 - Train Discord server.
06:23 - But a bot, just like
any human being,
06:25 - can be members of
multiple servers.
06:27 - So really, this bubble here
represents the discords service
06:31 - itself, which is
also a server that's
06:33 - managing multiple instances
of different communities
06:37 - with their own servers.
06:38 - I probably, in the end, have
made this much more complicated
06:40 - than it needs to be.
06:41 - If I were to just simplify
all this for a second,
06:44 - there is a Coding
Train community
06:46 - that is a Discord server.
06:48 - You can sign up and be a
part of that community,
06:51 - and read and write
messages yourself.
06:53 - And now I'm showing you how
to sign up, essentially,
06:57 - a bot, or robot, member of that
community that can automate
07:00 - different processes, reading,
sending messages, reacting
07:03 - to emojis, posting gifts, all
sorts of other kinds of things
07:07 - that a Discord bot can do.
07:09 - So what do you
need in order to be
07:12 - able to make your
own Discord bot?
07:14 - Now certainly, there are
lots of different ways
07:16 - to make Discord bots, I'm sure.
07:17 - But if you want to make one in
JavaScript and using Node.js,
07:21 - the things you will
need are as follows.
07:23 - Console access to your computer.
07:27 - Another word for that
is like terminal access.
07:29 - I use iTerm.
07:30 - There's Terminal on the Mac.
07:32 - There's Powershell, Git BASH.
07:34 - I'm always making this list
over and over again on Windows.
07:38 - I have a whole separate video
about terminal and shell access
07:41 - that you could watch if that's
a totally new concept to you.
07:44 - You need a text editor.
07:46 - That's to edit your code.
07:47 - I've already mentioned
the one that I'm
07:49 - going to use is VSCode.
07:51 - Finally, you need
to install Node.js.
07:54 - And I have a whole
video about what is Node
07:56 - and how to install it
and all that thing.
07:58 - But really, you can
just go to a URL
08:00 - that I'll put in the
video's description,
08:02 - click the Download button,
install it on your computer,
08:04 - and you'll know it's working is
if when you go into Terminal,
08:08 - if you type in Node
dash dash version,
08:12 - you'll see a message
come out that says,
08:14 - I'm Node version
something, instead
08:16 - of, I don't know
what Node is, help!
08:19 - Let me show you all
these things in action.
08:21 - So this is my console.
08:22 - I'm open to the console.
08:23 - I'm using iTerm as my terminal
application on the Mac.
08:27 - I can put links
to download that.
08:28 - And again, there are
countless other ones
08:30 - that you could use on Mac,
Windows, Linux, et cetera.
08:33 - I'm going to type Node
dash dash version.
08:36 - Now, if I were to
misspell that, or if you
08:39 - didn't have Node installed,
I would see something
08:42 - like command not found, nope.
08:44 - And I'm using
something called ZSH.
08:46 - Oh, my goodness, so many
terms, so much weird stuff.
08:49 - Again, I cover that more
in my full console video
08:52 - that you can take a look.
08:53 - But hopefully, if you've
gone to the Node website,
08:58 - you've downloaded--
08:59 - it doesn't really matter
what version, to be honest.
09:01 - I would grab what it says
recommended for most users.
09:03 - You've installed it
on your computer.
09:05 - You're back in your
terminal window.
09:07 - And you type Node
dash dash version.
09:09 - If you see it recognize it and
give you a version number back,
09:13 - you are good to go.
09:14 - That said, you're
struggling with this,
09:17 - ask your question
in the comments,
09:18 - or come and join the Coding
Train Discord itself,
09:21 - and we'll help you get
to this stage right here.
09:24 - The next thing you
want to do is go
09:26 - to the Discord website
itself and sign up
09:28 - for a Discord account.
09:29 - If you already have a Discord
account, you can use that one.
09:31 - You could make a new
dummy account just
09:33 - to test with your bot.
09:34 - But I'm using my
main Discord account,
09:35 - because I can make multiple bots
and try different experiments
09:38 - through one Discord
account itself.
09:41 - So if you have Terminal and
you're able to type Node,
09:44 - if you have a
Discord account, you
09:46 - are ready to move on
to the next video.
09:48 - So in the next video,
I'm going to show you
09:50 - the Discord Developer
portal, where you create
09:53 - the actual bot account itself.
09:55 - And that's where the
information that you'll
09:58 - bring into your code will live.
10:01 - So that's coming up.
10:03 - I can't wait.
10:03 - I mean, I'm going
to do it right now.
10:05 - Maybe you will too.
10:06 - I don't know, you'll--
10:07 - take a break, take a
break, take a break, relax.
10:09 - Deep breath, deep
breath, deep breath.
10:10 - I'll see you for the next
video, maybe, maybe, we'll see.
10:12 - It's fine if you don't go.
10:13 - I get it.
10:14 - I get it.
10:15 - I'll just stop talking now.
10:15 - Goodbye.
10:16 - Bye.
10:16 - [BLOWS KISS]
10:17 - [MUSIC PLAYING]

Cleaned transcript:

[TRAIN WHISTLE] Hello. OK, I have to admit something to you. This is a substitute train whistle. But this is not a substitute Coding Train video. I'm so excited about what I am embarking on today, a new tutorial sequence about how to make your own Discord bot. I hope that by the end of all these videos, however many I end up making, you'll be able to have your own bot up and running in your own Discord server, or a server that you participate in. Now, if you haven't already joined the Coding Train Discord, [TRAIN WHISTLE] oh dear, I'm so sorry. If we could get the sound effect of the actual train whistle. [TRAIN WHISTLE] Please come and join. I'll put an invite to the Coding Train Discord server in the video's description. If you don't have a Discord account, you're going to need to sign up for one. But guess what, you'll need one to make your own Discord bot. Please, the first thing you should do is go to read me, where there is a code of conduct and a set of rules and expectations for the server. And in order to get access to all of the channels, you'll need to react with an emoji to acknowledge that you have read this message and agree to follow the code of conduct. So there's lots more to say about the Coding Train community on the Discord server itself. It's a great place if you need help with your code, if you just want to hang out and share pictures of your pets. There's a lot of channels for a lot of different things. And so please come and say hi there. One of my favorite things to do is to read the Introductions channel, because I get to know the community of people who are watching these videos and where they come from and what they care about and what they're excited to try and make themselves with code. OK, enough, enough. In this first video, what I want to do is cover all of the technical pieces, like what do you need? You need a text editor, you need a console, you need Node.js. What are all the pieces you need to run your Discord bot? And in case you haven't heard of one of those pieces, where can you find the resources to get those up and running on your computer? As well as how to create a Discord application through the developer docs, or the developer website, the Discord developer website. And get your secret token key thingies that you'll need to be able to run your Discord bot, OK? So we're going to do that, all that, in this first video, and then I'll start following up with the basics of writing the code, and showing you how to run the bot, and all that other good stuff too. All right, what are the pieces of the puzzle here? Ultimately, where I want to get to first is that on my own computer, I am going to be typing code into a text editor. The text editor I use is VSCode, Visual Studio Code, but you could really use any. I want to run this code. Maybe this is going to be a file called index.js. And I want to run this code using Node.js. So I'm going to say something like node index.js. And when I run this, the bot itself is running on my laptop, my personal computer. But how is it going to communicate with Discord? Well, weirdly enough, Discord is also running on my computer. So do they talk to each other directly like that? Like am I running a bot on my computer that's talking to Discord running on my computer? No. So discord is a service. I'm just running the Discord client on my laptop where I can send my messages and read messages coming in. But ultimately, there is a server, the Discord server itself, that my laptop is communicating with. That's how, when I type a message, it sends it to the server. And presumably, somebody else who's running if it's direct message to somebody else, then that message I send to the server is going to get sent to that other client. So this server is managing everything. So ultimately, actually, the way that I will see a message that the bot posts or that I could send a message from Discord to the bot this should really be a much bigger diagram. Now that I've zoomed in a little bit, if my code wants to send a message to be viewable in Discord, it's going to send it to the server. And the server will send it to the Discord client. So ultimately, the bot that I'm writing is a Discord application like the client. It's just not as sophisticated. It's just a command line thing that I run through Node that can send messages and read messages. Now, this isn't the end of the story. I mean, running index.js as the Discord bot on my laptop isn't a sustainable solution, because eventually I need to close my laptop. I need to put it away to go on vacation. I need to sleep. And I need a permanent computer that can always have the Discord bot running. And so what I would like to show you, eventually also, is how to not run index.js on my local laptop here, but to deploy it somewhere into the socalled cloud. I could use a service like Glitch or Heroku or DigitalOcean, or Amazon Web Services. I could make my own Raspberry Pi or set up my own old computer that's always connected to the internet. Anything that's like an always on computer that can run my Node code can act as the permanent bot. Now I can make this smaller again. And the idea here is all the human beings, as represented by these laptops, are communicating with the Discord server. They're sending messages. They're receiving messages. And now I have a new nonhuman being, a bot, also communicating with the server, sending and receiving messages. And I can code and program any crazy ID I want for how the humans and the bot could interact with each other. One thing that should really explain here. I'm conflating the idea of the Discord service, which is a company that runs probably a lot of different servers that allows people to sign up for Discord accounts, and the idea of a Discord server like the Coding Train Choo Choo server. So the terms Discord server generally means like a server, a specific server for a single community, like Coding Train, or there's an ML5 Discord, and there's countless other Discord servers for gaming communities and podcast communities. And so all of those are like little bubbles in here. And the clients that are members of Coding Train are all connected to just one. And I'm going to add my bot specifically to the Coding Train Discord server. But a bot, just like any human being, can be members of multiple servers. So really, this bubble here represents the discords service itself, which is also a server that's managing multiple instances of different communities with their own servers. I probably, in the end, have made this much more complicated than it needs to be. If I were to just simplify all this for a second, there is a Coding Train community that is a Discord server. You can sign up and be a part of that community, and read and write messages yourself. And now I'm showing you how to sign up, essentially, a bot, or robot, member of that community that can automate different processes, reading, sending messages, reacting to emojis, posting gifts, all sorts of other kinds of things that a Discord bot can do. So what do you need in order to be able to make your own Discord bot? Now certainly, there are lots of different ways to make Discord bots, I'm sure. But if you want to make one in JavaScript and using Node.js, the things you will need are as follows. Console access to your computer. Another word for that is like terminal access. I use iTerm. There's Terminal on the Mac. There's Powershell, Git BASH. I'm always making this list over and over again on Windows. I have a whole separate video about terminal and shell access that you could watch if that's a totally new concept to you. You need a text editor. That's to edit your code. I've already mentioned the one that I'm going to use is VSCode. Finally, you need to install Node.js. And I have a whole video about what is Node and how to install it and all that thing. But really, you can just go to a URL that I'll put in the video's description, click the Download button, install it on your computer, and you'll know it's working is if when you go into Terminal, if you type in Node dash dash version, you'll see a message come out that says, I'm Node version something, instead of, I don't know what Node is, help! Let me show you all these things in action. So this is my console. I'm open to the console. I'm using iTerm as my terminal application on the Mac. I can put links to download that. And again, there are countless other ones that you could use on Mac, Windows, Linux, et cetera. I'm going to type Node dash dash version. Now, if I were to misspell that, or if you didn't have Node installed, I would see something like command not found, nope. And I'm using something called ZSH. Oh, my goodness, so many terms, so much weird stuff. Again, I cover that more in my full console video that you can take a look. But hopefully, if you've gone to the Node website, you've downloaded it doesn't really matter what version, to be honest. I would grab what it says recommended for most users. You've installed it on your computer. You're back in your terminal window. And you type Node dash dash version. If you see it recognize it and give you a version number back, you are good to go. That said, you're struggling with this, ask your question in the comments, or come and join the Coding Train Discord itself, and we'll help you get to this stage right here. The next thing you want to do is go to the Discord website itself and sign up for a Discord account. If you already have a Discord account, you can use that one. You could make a new dummy account just to test with your bot. But I'm using my main Discord account, because I can make multiple bots and try different experiments through one Discord account itself. So if you have Terminal and you're able to type Node, if you have a Discord account, you are ready to move on to the next video. So in the next video, I'm going to show you the Discord Developer portal, where you create the actual bot account itself. And that's where the information that you'll bring into your code will live. So that's coming up. I can't wait. I mean, I'm going to do it right now. Maybe you will too. I don't know, you'll take a break, take a break, take a break, relax. Deep breath, deep breath, deep breath. I'll see you for the next video, maybe, maybe, we'll see. It's fine if you don't go. I get it. I get it. I'll just stop talking now. Goodbye. Bye. [BLOWS KISS] [MUSIC PLAYING]
