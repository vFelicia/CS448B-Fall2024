With timestamps:

00:00 - (bell dinging)
00:01 - - All right, you've returned perhaps
00:02 - from somewhere else or I don't know
00:04 - some weird machine learning
algorithm sent you here.
00:07 - If you haven't watched my previous video
00:09 - which introduces the idea of unit testing
00:11 - and continuous integration,
00:12 - I would recommend that you do.
00:13 - This tutorial is sponsored by CircleCI,
00:16 - linked to find out more
right here maybe (laughs).
00:20 - I don't know,
00:22 - I don't know how this magical
post-production stuff works.
00:24 - But what I'm going to do in this video
00:26 - is I'm actually going to make
exactly what I talked about here.
00:29 - I am going to make a sketched JS file.
00:32 - Has a little bit of JavaSript code in it.
00:34 - I'm going to create a little node project
00:36 - so I can run a unit test.
00:38 - I'm going to push that project to GitHub
00:40 - and I'm going to link it with CircleCI
00:42 - so that the tests will be run
00:44 - before I can merge any changes.
00:46 - Now GitHub, merge, no, what
do all these things mean?
00:49 - I will also provide some links to videos
00:52 - that you might want to watch
00:53 - before arriving here
if you haven't used any
00:55 - of those tools before.
00:56 - But yeah, I'm just plopping you right
00:57 - in the middle here.
00:59 - If you've never programmed before,
01:00 - you know, maybe it's going
to be interesting here,
01:02 - but yeah, anyway, okay.
01:04 - Back over here, all right.
01:04 - So what do I got?
01:05 - This is my Coding Train
GitHub organization.
01:08 - And so what I want to do is I
want to make a new repository.
01:10 - But I'm going to do it in
a slightly different way.
01:13 - I'm not sure why but I'm just going to.
01:15 - First what I'm going to do
is I have a nice folder here
01:17 - on my computer called
TestingTestTest (laughs).
01:20 - TestingTestTest is the
name of my new project
01:22 - 'cause it's all about test, test, testing.
01:24 - And I'm going to make a file in it
01:26 - and I'm just going to call it sketch.js.
01:29 - And I'm going to, by the way,
01:31 - I'm going to use the testing
framework that I'm going to use
01:32 - in a moment I'll show you,
it's something called Jest.
01:34 - I'm basically going to do the example
01:36 - that's in the getting
started tutorial in Jest.
01:38 - Just to say this is not my invention here.
01:40 - So I'm going to write a
really simple function
01:42 - called sum.
01:44 - And what it's going to do
01:45 - is it's going to return
the sum of two numbers.
01:50 - So again, I'm showing you a
completely trivial (laughs)
01:54 - example that's kind of silly and obvious
01:58 - just to see what all the
pieces are and how it works.
02:00 - And then hopefully what I'm going to do
02:01 - is after this, I'm actually
going to add some unit tests
02:03 - to my neuro network library thing
02:06 - that I've been working on
some other video tutorials.
02:08 - But I'll get to that later.
02:09 - So I'm just writing this.
02:10 - Now, what do I need to do?
02:12 - Well, in order to run the tests,
02:15 - I need to make a node project.
02:20 - So one way that I can do that
02:21 - is by, by the way, I'm in terminal
02:24 - and I'm in my directory testing test test.
02:27 - And I'm going to say npm init.
02:29 - That's a way to create a node
project in that directory.
02:32 - Really all this is doing
is making the package
02:35 - that json file, which is
the configuration file
02:37 - for your node project.
02:39 - And again, some other
node tutorials I have
02:40 - go through this a bit more.
02:42 - So I'm going to do this and
it's saying this utility
02:44 - will walk you through creating a package,
02:45 - blah, blah, blah.
02:46 - I want the name to be testingtesttest.
02:48 - It's version 1.0.
02:49 - It is all about testing test test.
02:55 - And entry point is sketch.js,
02:57 - oh it even autodetected that was in there.
02:59 - Test command, oh.
03:01 - The test command, now I
don't have to do this here
03:04 - 'cause I could always change it later
03:05 - but I know what it's going to be.
03:07 - It's going to be Jest.
03:08 - Jest is the amand like
JavaScript test, test, Jest.
03:12 - Anyway, Jest.
03:14 - The git repository, ah,
I don't have one yet.
03:16 - Hit enter.
03:17 - Keywords, testing test.
03:20 - Then author is the coding train.
03:24 - License, MIT.
03:26 - I don't know and then
I'm going to say okay.
03:28 - And then now, if we look back in Adam,
03:32 - look at this, this new file has appeared.
03:34 - The package that json file
03:36 - and that is the file that has
all the configuration settings
03:40 - for my project.
03:41 - This is the main file.
03:42 - There's a test script
I can run called Jest
03:45 - that's all about testing.
03:46 - It's by the Coding
Train installations MIT.
03:48 - Et cetera, et cetera.
03:49 - Okay, so now, let's go
to the Jest website.
03:53 - And I'm going to actually
click on get started.
03:58 - So one thing that I can pull from here
04:00 - is if I want to run a test with Jest,
04:03 - I must install the node package Jest.
04:06 - And again, I will refrain to my video
04:08 - about node package manager
04:09 - and a lot of you who
have experience with this
04:11 - will be telling me why
aren't you using yarn,
04:13 - 'cause supposedly that's
better for a variety of reasons
04:15 - that I'm sure I will hear about.
04:16 - But I'm still in the world of npm
04:19 - so I'm going to grab this.
04:21 - And I'm going to paste this into terminal.
04:24 - Now I just want to mention what I've shown
04:27 - in other tutorials what
dash dash save means.
04:30 - That means I want to use this node package
04:32 - in my project.
04:33 - For example, I'm doing
something on text analysis.
04:36 - So I want the node natural
text analysis package.
04:39 - I'm going to say npm
install, save, no natural.
04:42 - But save dev means I am using this,
04:45 - but only for the purpose of development.
04:46 - My project itself, when
I publish and release it,
04:50 - doesn't need the Jest package.
04:53 - I need Jest just for developing it.
04:54 - So I'm going to hit enter.
04:56 - I'm going to put on my waiting music.
04:58 - (upbeat music)
05:01 - Do do do!
05:02 - Oh we finished, okay.
05:04 - And now we're good.
05:05 - Now, just to double check this,
05:07 - look at this.
05:08 - Package at json now has devDependencies.
05:12 - Jest version 22.1.4.
05:14 - So that dash dash save
dash dev put it here
05:17 - in devDependencies.
05:18 - So now I have my testing framework.
05:20 - Now how do I write a test?
05:22 - One of the things you might remember
05:23 - from when I was looking at the P5 project,
05:27 - is the source folder had
all of your JavaScript code.
05:32 - And the test folder had
all of your testing code
05:36 - and they were the identical
directory structures.
05:39 - For every directory or JavaScript file
05:40 - there was a corresponding
directory JavaScript file
05:42 - for testing.
05:44 - And this is a fine way of doing it.
05:45 - From what I understand (laughs),
05:46 - it can become a bit unwieldy after a while
05:48 - to kind of keep these
duplicate directory structures.
05:51 - Jest provides a bunch of
different ways of doing it
05:53 - through basically the key word test.
05:55 - And there's a way of having a folder
05:57 - that has test in it,
05:58 - but what I'm going to do
here that's the easiest thing
06:00 - in the world is I'm just
going to make a new file
06:03 - and I'm going to call that file,
06:05 - I can't remember if it's test.sketch.js
06:07 - or sketch.test.js.
06:08 - Pretty sure it's sketch.test.js.
06:11 - Let's try calling it that.
06:12 - And then let's go back to
the getting started page
06:16 - and see what it says.
06:18 - Sum, so this example that, by the way,
06:19 - I'm doing exactly the same example.
06:21 - I'm creating a, it says
to create a new file
06:23 - called sum.test.js.
06:25 - So you can see Jest is going to know
06:28 - that this file is
associated with this file.
06:30 - These are the tests for this file.
06:32 - So now, I need to write those tests.
06:33 - Whoo boy!
06:35 - So I am going to go and just
keep following along this.
06:37 - And I'm just going to,
to be honest with you,
06:39 - copy and paste the code from the example.
06:43 - Later I'll try to write my own tests
06:44 - in a more interesting way.
06:45 - And we can see this makes sense.
06:46 - There is a function I wrote called sum
06:50 - that receives two numbers
and returns those two numbers
06:52 - added together.
06:53 - So you can see this is now the syntax,
06:55 - the api, expect is a
function, toBe is a function.
06:59 - Those are functions that
are part of Jest, right?
07:01 - Sum is my function, test is part of Jest.
07:04 - And this is written
07:05 - with a really nice
lovely ES6 arrow syntax.
07:08 - Just to like unpack this for a second
07:11 - even though I like the
way this is written,
07:12 - I will try to write tests this way too.
07:14 - What I'm going to do is I'm
going to just break this out
07:18 - into multiple lines of code.
07:20 - Just so you can see it in
a slightly different way.
07:25 - Just give me a second
(laughs) while I do this
07:27 - in the most convoluted manner.
07:31 - So what this is saying
here now you can see
07:33 - is like I want to run this test.
07:34 - This is the name of my test.
07:36 - And the function to run
the test is called sumTest
07:39 - and it's down here.
07:40 - So this is just, it's
exactly the same as this
07:42 - but it's just written in a
kind of more long winded,
07:45 - less traditional, like
less fancy, newer way
07:48 - of writing JavaScript.
07:49 - All right, so I think we're kind of ready.
07:53 - I've missed some stuff
here, which I'll get to,
07:55 - but I wanted to fail all these first.
07:56 - I have my JavaScript file.
07:58 - And I have my testing file.
08:00 - So there's no reason why I couldn't now,
08:02 - and package json, it says test jest
08:07 - and I have the dependency.
08:09 - Okay, let's try it.
08:10 - So now I'm here.
08:12 - I'm going to hit clear
and I am going to say,
08:13 - here we go, npm test.
08:19 - (drum rolling)
08:27 - (buzzer buzzing)
08:28 - One failed.
08:29 - Now I already know why it failed
08:30 - 'cause I kind of did that on purpose
08:31 - 'cause I know it'd be nice
to like see the test fail.
08:34 - But we can actually see why did it fail?
08:36 - Hmm, constant sum equals
required dot slash sum, huh?
08:42 - What is that?
08:43 - Uh, cannot find module dot sum, hmm.
08:47 - All right.
08:47 - So here's the thing.
08:49 - I'm making use of a feature of node
08:52 - that is not necessary
08:53 - when just doing client side programming.
08:55 - And client side programming
might have an html file
08:58 - which just imports all of the
JavaScript files I'm using.
09:02 - But node, we need to do
this more explicitly.
09:04 - This is a little tricky here
09:05 - because maybe you can make the argument
09:06 - if I'm writing client side code,
09:08 - I should run tests in the browser.
09:10 - And there's a whole big
world of possibilities here.
09:12 - But I'm trying to stick
to the very, very basics.
09:14 - The simplest possible scenario.
09:15 - And if we look here in sketch,
we can see constant sum,
09:19 - now first of all, constant,
I could say let sum.
09:22 - But this is good.
09:24 - It's not going to change.
09:24 - Not going to be reassigned.
09:25 - Constant sum equals required dot sum.
09:27 - Well, what this really
should be in my case
09:29 - is dot sketch.
09:30 - This is a way require is saying
09:33 - I am going to require
another JavaScript file
09:38 - dot slash in the same
directory called sketch.js.
09:42 - Then you would think
that would be better now
09:45 - but I'm still missing a piece.
09:49 - I mean I'm not even going to pretend
09:51 - 'cause I know this is going to run.
09:53 - It didn't fail.
09:54 - Sum is not a function so
that's a different air message.
09:56 - The reason why it imported
that file correctly
09:58 - but I didn't export it.
10:00 - So this is one of the things I have to do.
10:02 - I have to say export dot modules,
10:06 - no, modules dot exports (laughs).
10:08 - Module dot exports equals sum.
10:11 - So again, there's a lot more to this
10:13 - in terms of how you can link
and reference different files,
10:16 - but on a very basic level,
10:18 - this is saying this node module
10:19 - should export the sum function.
10:21 - That's the one I want to test
if I had multiple functions,
10:23 - I could export multiple functions.
10:25 - There's a variety of different
ways I could do this.
10:27 - So now, here we go.
10:36 - (laughs) Oop!
10:39 - (drum rolling)
10:41 - Whoo hoo!
10:43 - (horns playing)
10:44 - Okay, so the test passed.
10:45 - So this is basically, now
I've kind of come to the end
10:47 - of the testing component.
10:50 - All I've done so far is created this.
10:55 - I wrote my code and it
could've been a P5 project.
10:58 - The module thing is going
to muck that up a little bit
11:00 - so maybe I'll show you a
little trick about that
11:01 - in a second.
11:02 - But all I've done is write this part.
11:06 - So the next things that I need to do
11:08 - is send this project up to GitHub
11:11 - and then figure out a way to
allow anybody contributing
11:14 - to it to have the tests
automatically run via CircleCI.
11:18 - Okay?
11:19 - So that's going to
happen in the next video.
11:22 - (upbeat music)

Cleaned transcript:

(bell dinging) All right, you've returned perhaps from somewhere else or I don't know some weird machine learning algorithm sent you here. If you haven't watched my previous video which introduces the idea of unit testing and continuous integration, I would recommend that you do. This tutorial is sponsored by CircleCI, linked to find out more right here maybe (laughs). I don't know, I don't know how this magical postproduction stuff works. But what I'm going to do in this video is I'm actually going to make exactly what I talked about here. I am going to make a sketched JS file. Has a little bit of JavaSript code in it. I'm going to create a little node project so I can run a unit test. I'm going to push that project to GitHub and I'm going to link it with CircleCI so that the tests will be run before I can merge any changes. Now GitHub, merge, no, what do all these things mean? I will also provide some links to videos that you might want to watch before arriving here if you haven't used any of those tools before. But yeah, I'm just plopping you right in the middle here. If you've never programmed before, you know, maybe it's going to be interesting here, but yeah, anyway, okay. Back over here, all right. So what do I got? This is my Coding Train GitHub organization. And so what I want to do is I want to make a new repository. But I'm going to do it in a slightly different way. I'm not sure why but I'm just going to. First what I'm going to do is I have a nice folder here on my computer called TestingTestTest (laughs). TestingTestTest is the name of my new project 'cause it's all about test, test, testing. And I'm going to make a file in it and I'm just going to call it sketch.js. And I'm going to, by the way, I'm going to use the testing framework that I'm going to use in a moment I'll show you, it's something called Jest. I'm basically going to do the example that's in the getting started tutorial in Jest. Just to say this is not my invention here. So I'm going to write a really simple function called sum. And what it's going to do is it's going to return the sum of two numbers. So again, I'm showing you a completely trivial (laughs) example that's kind of silly and obvious just to see what all the pieces are and how it works. And then hopefully what I'm going to do is after this, I'm actually going to add some unit tests to my neuro network library thing that I've been working on some other video tutorials. But I'll get to that later. So I'm just writing this. Now, what do I need to do? Well, in order to run the tests, I need to make a node project. So one way that I can do that is by, by the way, I'm in terminal and I'm in my directory testing test test. And I'm going to say npm init. That's a way to create a node project in that directory. Really all this is doing is making the package that json file, which is the configuration file for your node project. And again, some other node tutorials I have go through this a bit more. So I'm going to do this and it's saying this utility will walk you through creating a package, blah, blah, blah. I want the name to be testingtesttest. It's version 1.0. It is all about testing test test. And entry point is sketch.js, oh it even autodetected that was in there. Test command, oh. The test command, now I don't have to do this here 'cause I could always change it later but I know what it's going to be. It's going to be Jest. Jest is the amand like JavaScript test, test, Jest. Anyway, Jest. The git repository, ah, I don't have one yet. Hit enter. Keywords, testing test. Then author is the coding train. License, MIT. I don't know and then I'm going to say okay. And then now, if we look back in Adam, look at this, this new file has appeared. The package that json file and that is the file that has all the configuration settings for my project. This is the main file. There's a test script I can run called Jest that's all about testing. It's by the Coding Train installations MIT. Et cetera, et cetera. Okay, so now, let's go to the Jest website. And I'm going to actually click on get started. So one thing that I can pull from here is if I want to run a test with Jest, I must install the node package Jest. And again, I will refrain to my video about node package manager and a lot of you who have experience with this will be telling me why aren't you using yarn, 'cause supposedly that's better for a variety of reasons that I'm sure I will hear about. But I'm still in the world of npm so I'm going to grab this. And I'm going to paste this into terminal. Now I just want to mention what I've shown in other tutorials what dash dash save means. That means I want to use this node package in my project. For example, I'm doing something on text analysis. So I want the node natural text analysis package. I'm going to say npm install, save, no natural. But save dev means I am using this, but only for the purpose of development. My project itself, when I publish and release it, doesn't need the Jest package. I need Jest just for developing it. So I'm going to hit enter. I'm going to put on my waiting music. (upbeat music) Do do do! Oh we finished, okay. And now we're good. Now, just to double check this, look at this. Package at json now has devDependencies. Jest version 22.1.4. So that dash dash save dash dev put it here in devDependencies. So now I have my testing framework. Now how do I write a test? One of the things you might remember from when I was looking at the P5 project, is the source folder had all of your JavaScript code. And the test folder had all of your testing code and they were the identical directory structures. For every directory or JavaScript file there was a corresponding directory JavaScript file for testing. And this is a fine way of doing it. From what I understand (laughs), it can become a bit unwieldy after a while to kind of keep these duplicate directory structures. Jest provides a bunch of different ways of doing it through basically the key word test. And there's a way of having a folder that has test in it, but what I'm going to do here that's the easiest thing in the world is I'm just going to make a new file and I'm going to call that file, I can't remember if it's test.sketch.js or sketch.test.js. Pretty sure it's sketch.test.js. Let's try calling it that. And then let's go back to the getting started page and see what it says. Sum, so this example that, by the way, I'm doing exactly the same example. I'm creating a, it says to create a new file called sum.test.js. So you can see Jest is going to know that this file is associated with this file. These are the tests for this file. So now, I need to write those tests. Whoo boy! So I am going to go and just keep following along this. And I'm just going to, to be honest with you, copy and paste the code from the example. Later I'll try to write my own tests in a more interesting way. And we can see this makes sense. There is a function I wrote called sum that receives two numbers and returns those two numbers added together. So you can see this is now the syntax, the api, expect is a function, toBe is a function. Those are functions that are part of Jest, right? Sum is my function, test is part of Jest. And this is written with a really nice lovely ES6 arrow syntax. Just to like unpack this for a second even though I like the way this is written, I will try to write tests this way too. What I'm going to do is I'm going to just break this out into multiple lines of code. Just so you can see it in a slightly different way. Just give me a second (laughs) while I do this in the most convoluted manner. So what this is saying here now you can see is like I want to run this test. This is the name of my test. And the function to run the test is called sumTest and it's down here. So this is just, it's exactly the same as this but it's just written in a kind of more long winded, less traditional, like less fancy, newer way of writing JavaScript. All right, so I think we're kind of ready. I've missed some stuff here, which I'll get to, but I wanted to fail all these first. I have my JavaScript file. And I have my testing file. So there's no reason why I couldn't now, and package json, it says test jest and I have the dependency. Okay, let's try it. So now I'm here. I'm going to hit clear and I am going to say, here we go, npm test. (drum rolling) (buzzer buzzing) One failed. Now I already know why it failed 'cause I kind of did that on purpose 'cause I know it'd be nice to like see the test fail. But we can actually see why did it fail? Hmm, constant sum equals required dot slash sum, huh? What is that? Uh, cannot find module dot sum, hmm. All right. So here's the thing. I'm making use of a feature of node that is not necessary when just doing client side programming. And client side programming might have an html file which just imports all of the JavaScript files I'm using. But node, we need to do this more explicitly. This is a little tricky here because maybe you can make the argument if I'm writing client side code, I should run tests in the browser. And there's a whole big world of possibilities here. But I'm trying to stick to the very, very basics. The simplest possible scenario. And if we look here in sketch, we can see constant sum, now first of all, constant, I could say let sum. But this is good. It's not going to change. Not going to be reassigned. Constant sum equals required dot sum. Well, what this really should be in my case is dot sketch. This is a way require is saying I am going to require another JavaScript file dot slash in the same directory called sketch.js. Then you would think that would be better now but I'm still missing a piece. I mean I'm not even going to pretend 'cause I know this is going to run. It didn't fail. Sum is not a function so that's a different air message. The reason why it imported that file correctly but I didn't export it. So this is one of the things I have to do. I have to say export dot modules, no, modules dot exports (laughs). Module dot exports equals sum. So again, there's a lot more to this in terms of how you can link and reference different files, but on a very basic level, this is saying this node module should export the sum function. That's the one I want to test if I had multiple functions, I could export multiple functions. There's a variety of different ways I could do this. So now, here we go. (laughs) Oop! (drum rolling) Whoo hoo! (horns playing) Okay, so the test passed. So this is basically, now I've kind of come to the end of the testing component. All I've done so far is created this. I wrote my code and it could've been a P5 project. The module thing is going to muck that up a little bit so maybe I'll show you a little trick about that in a second. But all I've done is write this part. So the next things that I need to do is send this project up to GitHub and then figure out a way to allow anybody contributing to it to have the tests automatically run via CircleCI. Okay? So that's going to happen in the next video. (upbeat music)
