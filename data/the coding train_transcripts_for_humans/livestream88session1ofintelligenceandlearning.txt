With timestamps:

00:00 - can you hear me right let's try to pick
00:02 - the time of the week when I am most
00:05 - exhausted and that's when I'll live
00:07 - stream on
00:08 - YouTube that's what time it is right now
00:11 - this I I have to say that you know I if
00:13 - you'll just bear if you will bear with
00:14 - me and allow me to have a little uh
00:16 - therapy with you um few dozen people who
00:20 - happen to be watching this right now uh
00:23 - I would say that this week and through
00:25 - the next six or seven or eight weeks
00:27 - somewhere to the middle of May are are
00:30 - probably the busiest weeks for me of the
00:32 - whole year so um I'm here and I'll hope
00:36 - probably be here next Friday but I'm
00:39 - only I uh but and I'll probably be here
00:40 - the Friday after that but we'll see I
00:42 - might miss a Friday but I'm I'm looking
00:44 - forward to Springtime end of May June
00:47 - and hopefully then you'll be seeing a
00:49 - lot more of me so if I seem a
00:51 - little
00:53 - wobbly a little tired if you don't see
00:56 - me on a Friday know that everything is
00:58 - fine but I I do have
01:00 - um this like a job thing that I do and
01:03 - it's a it's a busy time of year here
01:06 - at New York University okay so uh first
01:09 - of all I have a very important
01:11 - announcement to make I have some
01:14 - new uh new hydration technology that I
01:18 - have been working on all week asking for
01:22 - recommendations typing in credit card
01:25 - information onto Amazon actually you
01:26 - don't have to type in the credit card
01:27 - information it remembers it but
01:30 - I present to
01:35 - you a purple water bottle okay this the
01:39 - nice thing about this is a little less
01:41 - dangerous I don't know if you remember I
01:42 - had a pitcher one week um so this is
01:44 - good I'm going to step off stage I'm off
01:47 - stage right now it's not really a stage
01:49 - and drink some
01:54 - water
01:57 - okay now um I have to get moving here
02:01 - because um I've got to leave in about an
02:04 - hour and a half um and you know first of
02:07 - all I think
02:09 - it's one hour is a pretty good amount of
02:12 - time for a weekly live stream I would
02:14 - say um I like to do two hours if I can
02:17 - two and a half hours even sometimes been
02:19 - having a um a thing where like the last
02:21 - few weeks I did like five or six hours
02:23 - each Friday
02:26 - so um I audio up maybe turn your audio
02:30 - up because I see lots of green I see
02:32 - people asking if the stream is crashed
02:34 - everything looks like it's working for
02:35 - me so um I don't have a lot of time
02:38 - today but I have two um I'm going to try
02:40 - to um over the next several weeks get
02:43 - started with content more quickly uh I
02:45 - still do would like to do something
02:46 - where I share work from the community
02:47 - but I'm going to uh put that aside just
02:49 - for today hopefully next week I'll have
02:51 - more time to do that um and um I'm going
02:55 - to try to pick essentially one project
02:58 - to do each week I don't know what what I
02:59 - mean by project but one thing to focus
03:02 - on as opposed to trying to do four or
03:03 - five things and then and then I will um
03:09 - hopefully once things calm down when my
03:11 - schedule opens up a bit more in May and
03:13 - June maybe I'll get some do some more
03:16 - other stuff and extra live streams and
03:17 - all sorts of that stuff hopefully I'll
03:19 - have some more guests if you didn't
03:20 - watch uh Saran yarak was on this week
03:24 - talking about uh how to give a good Tech
03:26 - talk um sum it up in one sentence like
03:29 - about it as a story not Tech techn you
03:32 - know I I I deal with this all the time
03:34 - here I guess with uh listening to people
03:36 - present about their work here at NYU and
03:38 - you know some one thing that I think is
03:40 - a pitfall is you get up you want to talk
03:42 - about your project and you say okay so I
03:44 - made this
03:45 - thing uh I did it with illustrator uh
03:49 - and then with a pen and then uh purple
03:51 - and pink colors
03:53 - and that this doesn't work the wallpaper
03:55 - here's my website I made it with jQuery
03:58 - but then I had to uh use a node Sear
03:59 - server because I wanted websockets cu
04:01 - the thing about websockets is they can
04:02 - talk real time in two directions and
04:04 - instead of this is my story this is who
04:07 - I am this is why I care about this idea
04:10 - and this is the thing that I want to
04:11 - communicate to you today so
04:14 - anyway I'm off topic uh toot toot is
04:18 - absolutely
04:21 - right okay uh Dan in the chat asks oh
04:24 - hey princi hi Dan my name is also Dan
04:27 - how long are you live tonight let's say
04:29 - 5:30 p.m. that is about 1 hour and 25
04:31 - minutes from
04:33 - now uh okay but as all of you know there
04:36 - will there are always um after this is
04:39 - over an archive is always uploaded and
04:42 - um shorter edited versions of the stuff
04:45 - that I do in this one and a half uh hour
04:47 - time period are also uh put together and
04:50 - uploaded separately because why not just
04:52 - have redundant content more
04:55 - views um so what did I want to say ah I
04:59 - in fact last week I've been behind on so
05:01 - many things that I haven't even released
05:03 - two videos two edited versions of and
05:06 - one of them is not edited at all because
05:07 - it was
05:09 - my pong coding challenge which took me a
05:13 - little over one
05:15 - hour um I see people everybody's having
05:18 - sort of issues but um book of random
05:21 - numbers please I don't have my
05:24 - unfortunately I don't have my um sound
05:26 - effects today actually while I get set
05:28 - up here for a second I'm going to let
05:29 - you guys in on
05:32 - something I was noticing I know that
05:36 - everyone is a big fan of the always I
05:39 - don't know that everyone is a big fan
05:40 - some people enjoy this Dot
05:44 - Song little known to you there is a
05:47 - second uh this Dot Song and actually
05:50 - this I I don't know if this was actually
05:51 - the first this Dot Song but F Looper
05:54 - also made the pear and noise song that I
05:55 - often play by F Looper F Looper also
05:58 - made a version of the this song song
05:59 - which I will now play for you while I um
06:04 - oh sorry it's not at the beginning yep
06:06 - as always I always forg I get set up
06:14 - here that song for
06:16 - me
06:28 - okay
06:47 - firework firework is not defined okay
06:50 - line six as always I always forget the
06:52 - this dot
06:54 - thisor firework is not defined okay line
06:58 - as I always forget to this do this do
07:01 - this do this
07:03 - dotor is noted okay
07:08 - line it's funny cuz I can't really hear
07:10 - it is it is it too
07:15 - loud I made it a little louder but maybe
07:19 - I shouldn't
07:21 - have I
07:22 - always dot this dot do this dot dot do
07:27 - this do song never forget this do
07:29 - somebody compose that song for
07:35 - me all right I think I'm
07:38 - ready so uh it's too quiet if anything
07:41 - okay so it's not too loud louder a
07:43 - little quiet okay um so what am I going
07:47 - to do today in this short amount of time
07:49 - that I have I would like to do two
07:51 - things one is as a lot of you have
07:53 - requested and know I am teaching a
07:55 - course here at ITP at NYU uh called
07:58 - intelligence and learning
07:59 - so I'm going to do a what I hope is just
08:02 - a
08:03 - 15 translate it to three hours a 15 to
08:07 - 20 minute introduction to the uh that
08:10 - course what topics I'm going to cover in
08:12 - that course what are my goals and sort
08:14 - of themes behind that course what are
08:16 - some of the references that I'm using
08:18 - for the course and then
08:21 - um a so so I'm going to do that and then
08:24 - after that I am going to do um
08:30 - a quick introduction to week one of the
08:33 - course which involves uh search graph
08:37 - systems and search algorithms and then
08:39 - I've already made videos on the the next
08:42 - videos that would go in the sequence
08:43 - would be binary tree dep uh maze
08:47 - generation AAR traveling salesperson
08:50 - those videos then I'll do um and then I
08:53 - want to do one new uh video One new
08:55 - tutorial for this material on breath
08:57 - first search and then if I have time
09:00 - I'll do a quick five minute like here's
09:01 - some ideas for an exercise that you
09:03 - could do for next week um so um that's
09:07 - my plan let me come
09:28 - over
09:54 - got it sound is off on the Whiteboard
09:56 - thank you guys for letting me know that
09:58 - I'm going to fix that
10:01 - uh hold on a second I have to switch to
10:04 - the I have to switch to the Whiteboard
10:06 - um it's going to take me it's G to take
10:07 - me 30 seconds to fix this the funny
10:10 - thing is I bet you I'll keep playing no
10:12 - let me just fix this quickly
10:25 - uh test test okay so you should have uh
10:29 - audio for me now in the Whiteboard shot
10:33 - yes okay and then still have audio here
10:40 - okay uh okay um that should be good
10:47 - now I'm afraid to take the top off of
10:49 - this because I'm going to knock it over
10:51 - but it'll be a little bit easier to
10:52 - drink if I
10:57 - did okay
11:03 - let's see okay so I've got to get moving
11:05 - here um I'm sure the cameras are about
11:08 - to shut off not I'm not about to okay so
11:10 - this is the syllabus for the course let
11:14 - me let me give this a little bit let me
11:18 - do this I
11:20 - think
11:26 - um okay I think what I want to do is
11:30 - is this example
11:33 - available I want to discuss
11:36 - this okay and then I also want to
11:43 - have this oh no no no wrong thing sorry
11:46 - everybody almost ready
11:51 - here it's not really readable is it and
11:54 - I wish
11:55 - um well it will be what it will be I
11:58 - will zoom in on things things so that's
12:00 - going to have to do and same for here
12:03 - okay
12:07 - um okay uh this is the real live stream
12:10 - experience okay uh everything the audio
12:13 - is working fine now correct I'm seeing
12:15 - old messages I think um
12:18 - okay so what gonna do was gonna cover
12:22 - Big O notation I don't think I'm going
12:25 - to get to that today that's okay though
12:28 - uh
12:29 - yeah we're not doing all this today but
12:31 - this is this is my schedule for the next
12:34 - seven weeks um I'll probably be slower
12:36 - to get to it on the YouTube channel so
12:39 - maybe you might consider this the
12:40 - schedule over the next 10 weeks or so
12:43 - but um I'm going to do my best but this
12:45 - is my schedule in preparing materials
12:47 - and information so if you want to follow
12:48 - along with this GitHub repository
12:49 - there'll be stuff each week um okay
12:55 - so boy one of these days you know what I
12:58 - was gonna do I had this idea that I
12:59 - would prepare slides for this quick
13:02 - introduction and then I'd be organized
13:04 - and I'd have like a plan for
13:06 - it oh well next
13:09 - time you you know those courses that are
13:12 - on corsera they're very organized I
13:14 - highly recommend them okay um so here
13:17 - we're gonna do I'm gonna get
13:27 - started
13:32 - okay I just press some buttons on the
13:34 - cameras to see if that
13:36 - happens okay I don't know what the best
13:39 - thing I guess I'm Gonna Leave This right
13:42 - here okay here we go I'm going to get
13:45 - started uh somebody hey so those of you
13:47 - in the um chat if anybody wants to do me
13:51 - uh some a help oh this is not going well
13:55 - if anybody wants to help me out a little
13:57 - bit one thing you could do is kind of
13:58 - just keep track of the time it's
13:59 - something that I don't do a very good
14:01 - job of I prefer for my videos to be
14:03 - between 20 and 30 minutes long and then
14:06 - when I have a longer topic to break them
14:08 - into parts so you know it's hard a
14:10 - little hard to keep track because
14:11 - sometimes I'll pause and then I'll edit
14:13 - out the pause but you know you might
14:14 - have a sense of that um if anybody wants
14:17 - to um kind of send me send me a little
14:22 - nudge hey it's been 20 minutes uh let me
14:25 - know if only I had a JavaScript timer
14:28 - yeah
14:31 - if only I had a timer or some sort of
14:34 - computing device that could keep track
14:36 - of the time I'm I'm just I'm not okay
14:38 - here we go
14:43 - 4:15 I do not need to look at my phone
14:45 - too many random unnecessary alerts here
14:48 - we
14:49 - go hello welcome to the first
14:53 - video in a new course I don't know
14:57 - series set of videos that I am here me
15:02 - Dan shiffman presenting to you on my
15:05 - YouTube channel the coding Trin okay so
15:07 - what is this uh you might be aware you
15:10 - might remember me from such videos as
15:13 - the nature of code um I have a playlist
15:16 - of videos most of these videos were
15:17 - recorded probably several years ago um
15:20 - they cover um I'm going to zoom in here
15:23 - all of these topics one through eight
15:26 - and I I have a book which covers all of
15:29 - these topics one through eight and I've
15:30 - been teaching a class at uh about this
15:34 - stuff for a bunch of years many years
15:36 - almost like seven or eight years in fact
15:38 - and so this year I am trying something
15:40 - new with this course and therefore also
15:43 - on this YouTube channel now what is this
15:45 - new thing that I'm trying what always
15:47 - happens when I teach this course is if
15:49 - it's a full semester course at a like
15:51 - kind of University like place um there
15:54 - are where am I over here there are these
15:56 - 10 topics oh you can't see the bottom
15:58 - let's see see um I'm not zoomed properly
16:01 - okay there we go there are these 10
16:03 - topics and what happens is you know this
16:06 - here the first half of it is really
16:08 - about physics simulation animation
16:11 - moving things on the screen um and all
16:15 - the kind of stuff you could do with that
16:17 - and by the time we get to this people
16:19 - are on their way and they've been
16:20 - overloaded they're trying to learn all
16:21 - this stuff that what's here in 9 and 10
16:24 - chapters 9 and 10 gets lost so what I'm
16:28 - doing this year is and starting right
16:31 - now is I would like to take what's in
16:34 - this book here 9 and 10 chapters 9 and
16:37 - 10 and expand the material out over to
16:40 - something that would be several you know
16:42 - many sessions about seven five or six or
16:45 - seven or eight I have no idea some
16:47 - amount of sessions of content where I
16:49 - take a closer look at topics related to
16:53 - and here's the title of this course
16:55 - intelligence and learning so I'm going
16:57 - to come over here and I'm going to write
16:58 - that down this is like what people who
17:00 - are teachers I've been watching some
17:02 - like open course Weare uh you know you
17:04 - have a big chalkboard and then you just
17:06 - like make a point and you write it down
17:07 - so I'm going to do that uh
17:11 - intelligence and learning
17:14 - now I am specific first of all well
17:17 - there's I'm specifically not calling
17:19 - this a
17:21 - course like artificial
17:24 - intelligence nor am I calling this a
17:27 - course
17:30 - like introduction to machine
17:33 - learning nor am I saying it's a course
17:37 - called say introduction to deep
17:40 - learning so what's one reason why I'm
17:42 - not calling it that well first of all
17:44 - I'm afraid of all these things so I feel
17:46 - like if I call it this is a course on
17:48 - artificial intelligence or machine
17:49 - learning that's a little bit scary to me
17:52 - um you know but also I'm I want to make
17:55 - the point in this course and and and
17:58 - that about let's ask let let me ask you
18:00 - a question for a second what's the
18:02 - difference
18:03 - between a computer that is intelligent
18:07 - or a computer that appears intelligent
18:10 - or has a piece of soft let's say piece
18:12 - of software what's the difference
18:14 - between a piece of software that is
18:15 - intelligent versus a piece of software
18:18 - that emanate that that gives off that
18:20 - has the illusion of
18:23 - intelligence I don't know and so what
18:26 - this course to me is about is creating
18:28 - systems examples
18:31 - interactivity projects CRA strange
18:34 - useless experiments that relate to the
18:38 - concept of my computer
18:41 - program oh
18:44 - crap let's let's uh the other computer
18:47 - does I like I didn't like what I was
18:49 - saying and um I'm just I'm taking a
18:51 - break for a
18:55 - second all right I'm going to come back
18:58 - to that Mato is going to do some magic
19:03 - editing I'm going to go
19:05 - from after I'm afraid of all this
19:13 - stuff other reason that I want to call
19:15 - this course just intelligence and
19:17 - learning is as I've always done with my
19:20 - materials I'm not necessarily looking to
19:23 - um create a perfect scientific
19:26 - simulation of the the
19:30 - um give me one more chance you're not
19:33 - over here everybody bear with me give me
19:35 - one more chance this is what happens
19:37 - Friday at four o'clock I'm gonna get
19:38 - through this this is the kind of stuff I
19:39 - really struggle with i' much rather just
19:40 - be coding right now but I'm gonna the
19:43 - thing is I'm GNA move more quickly the
19:44 - answer is to move more quickly thank you
19:47 - thank you for your patient live
19:49 - audience um okay so the other reason why
19:53 - I want to call it intelligence and
19:54 - learning is I want to take the broadest
19:55 - approach possible so you watching this
19:57 - course
19:59 - whether it's you implement the latest
20:01 - and greatest perfect machine learning
20:02 - neural network convolutional recurrent
20:05 - magical system thing that does something
20:06 - you read about in some academic paper or
20:09 - you make some crazy project where it
20:10 - seems like the computer is playing this
20:12 - goofy game with you and it and how could
20:14 - it possibly be doing that so there's a
20:16 - lot of space in between and for me I
20:18 - want to just really take a broad
20:19 - approach to and this not just look at
20:22 - only you know neural networks and
20:23 - machine learning and not just look at
20:25 - only these Topics in artificial
20:26 - intelligence and and okay so first of
20:28 - let's I'm kind of blending all these
20:30 - terms let's try to at least Define them
20:33 - so uh let's I saw this chart in a book
20:37 - somewhere so I'm going to recreate it so
20:39 - artificial intelligence is a topic so
20:42 - what is artificial intelligence well I
20:43 - actually just uh uh recently watched uh
20:46 - a lecture by a professor at MIT Patrick
20:48 - Winston Patrick Winston I think says at
20:51 - the opening of the lecture uh models
20:54 - someone will correct me if I'm wrong
20:56 - for thinking
21:01 - perception and
21:05 - action so this is a very broad term so
21:08 - let's think about this for a second let
21:09 - me go back to some of my other
21:11 - examples going to come over here and I'm
21:14 - going to open up where if if we were
21:15 - following along with the sort of pre if
21:17 - we stopped here at week six or session
21:19 - six or chapter six whatever you want to
21:21 - call it and I
21:23 - ran this flocking
21:27 - simulation I could ask the question is
21:30 - this artificial
21:33 - intelligence wait nobody can answer this
21:36 - question I want to hear from you so I I
21:39 - want to I'm I'm asking this question
21:41 - that but what's interesting whether or
21:43 - not you want to say yes or no I'm going
21:45 - to go back to here for a second models
21:48 - for thinking perception and action so
21:50 - one thing if you remember if you look at
21:52 - steering behaviors and steering
21:54 - behaviors pioneered by Craig
21:56 - Reynolds uh uh what is it um a uh
22:03 - action
22:05 - steering
22:08 - Locomotion so I've really been focusing
22:11 - on steering how do you calculate a
22:13 - steering Force how do you do the physics
22:15 - for that and how do you actually make
22:16 - that triangle move from one pixel to
22:18 - another uh and steering in Locomotion
22:21 - kind of cover all those pieces
22:24 - action this is a place where well what
22:27 - is the what are the goals in the
22:29 - flocking system the goals are stay with
22:31 - your neighbors but don't crash into your
22:33 - neighbors and also stay stay in
22:35 - proximity of your neighbors and also
22:36 - move in the same direction as your
22:37 - neighbors but don't crash into your
22:39 - neighbors and other kind of um action
22:41 - things that you might select is follow
22:43 - this thing or chase this thing or run
22:45 - away from this thing or try to get
22:46 - through this doorway the fastest as you
22:48 - can so what's interesting here is seeing
22:51 - this link is what are models for
22:54 - thinking and perception that might lead
22:56 - to action to govern the types of an
22:57 - animated systems that you might create
22:59 - so this to me is the link here whether
23:02 - it's enough to say I am going to kind of
23:05 - Define the rules almost known as a like
23:08 - a rule-based system feature engineering
23:09 - so to speak like I don't need a learning
23:12 - based system I'm going to define the
23:13 - rules of how all these things should
23:14 - behave but they're going to appear
23:16 - intelligent versus something like a
23:18 - learning system which has to learn over
23:20 - time so machine learning being something
23:23 - that uh crosses over with artificial
23:26 - intelligence you know I think of machine
23:27 - learning as uh something that you have
23:31 - data and you make meaning from that data
23:34 - so how do you how do you and and the you
23:37 - know two there's there's more to it than
23:39 - this but you know one of the most uh
23:41 - classic applications of a machine
23:43 - Learning System is classifying
23:46 - data classification so here's a bunch of
23:49 - pictures which ones are cats and which
23:52 - ones are dogs and there's more you know
23:54 - the the other type of system that you uh
23:57 - classicc of machine learning is
23:59 - regression which instead of categorizing
24:02 - into a discrete set of labels you know
24:05 - cats or dogs you might say you know
24:07 - here's all of these um you you want to
24:10 - arrive at a more continuous result so
24:12 - here's all these properties of a house
24:14 - how many bedrooms where is it located
24:16 - how many bathrooms and can the m can the
24:19 - system take that data and determine
24:22 - predict a price so um these are two
24:25 - classic uh tasks in machine learning now
24:28 - what's in the news and what's all the
24:30 - rage what's everybody working with these
24:33 - days uh are neural networks so you know
24:36 - a popular and powerful and exciting so
24:39 - much new research in this right now
24:41 - recently of creating machine Learning
24:44 - Systems to do these tasks with neural
24:45 - networks however in this course I want
24:48 - to look at other systems that do the
24:49 - same thing that are simpler um that
24:52 - might not be as powerful but might have
24:54 - opportunities for Creative possibilities
24:56 - but also if you can use the simpler
24:58 - system for the same result it's going to
25:00 - make it a little easier to perhaps dive
25:02 - into what in my mind might be the most
25:05 - difficult I might cancel this part
25:07 - actually last time I mentioned machine
25:08 - learning a fire alarm went off which
25:10 - saved me nothing happened this time but
25:13 - um so so we'll see so
25:16 - now so these are these are areas where I
25:19 - want to just look at and cover in this
25:21 - course um now what's this thing down
25:24 - here under DL this is deep learning and
25:26 - you know what I'm going to put deep
25:27 - learning in
25:28 - here so as I just mentioned uh one
25:33 - technique for performing these machine
25:35 - learning tasks is using something called
25:38 - an artificial neural network so an
25:41 - artificial neural network is a system
25:43 - where the
25:44 - data flows in as
25:49 - inputs and there is there are some set
25:53 - of connected neurons that that we so
25:57 - it's
26:00 - a how am I doing on time everybody the
26:03 - birds have no feelings I'm looking at
26:05 - the chat uh okay um let me come back let
26:08 - me let me erase this for a
26:13 - second let me do that again for a second
26:16 - CU I lost my train of
26:20 - thought uh 4:30 okay got to keep moving
26:24 - um
26:26 - okay so in the case of an artificial
26:29 - neural
26:31 - network that data that you're trying to
26:36 - classify enters as input to something
26:39 - called a
26:43 - neuron and then passes through a network
26:47 - of
26:48 - neurons to have some sort of output and
26:52 - I spelled that wrong but close enough
26:54 - cat dog price of a price of a house that
26:57 - sort of thing
26:58 - now an artificial neural network is a
27:01 - system and I'm going to get more into
27:02 - this in another video that's
27:04 - specifically just about this so I kind
27:05 - of want to just actually kind of move
27:06 - ahead and skip over this but the reason
27:08 - why I was mentioning this is there's a
27:10 - quite there's a long history of this and
27:13 - the very first discovery of an
27:14 - artificial neural network and we're I'm
27:16 - going to build one of these in a future
27:17 - coding challenge is called a perceptron
27:20 - which is a neural it's it's almost wrong
27:22 - to call it a network because it's a
27:23 - single neuron so a model for a single
27:25 - neuron an artificial neural network
27:28 - being a model for many interconnected
27:30 - neurons maybe it's a fully connected
27:32 - Network maybe it's like a partially
27:34 - connected network but the reason why so
27:38 - much that there has been a revolution in
27:41 - research and applications uh neural
27:44 - networks when they were first discovered
27:46 - this idea of a perceptron couldn't solve
27:48 - very simple problems so there's a famous
27:51 - paper the perceptron paper Mulla pittz I
27:54 - believe I'm getting that right so me the
27:56 - chat will confirm I'll try to have a
27:58 - link to that information in this video's
27:59 - description um and there were various
28:02 - steps along the way but there was a long
28:03 - time before anyone was really able to do
28:05 - a lot of work with uh neural networks
28:09 - and so deep learning refers to the idea
28:12 - of a neural network which has a lot of
28:15 - depth to it so in between the inputs and
28:18 - the outputs output and these could be
28:20 - both be plural or singular there are
28:23 - many many many layers it is deep very
28:27 - deep
28:28 - um so you know you can imagine all of
28:31 - these connections and so the idea here
28:33 - and and and you know the training
28:35 - systems and how it works and how the
28:36 - Learning System oh we got to get into
28:37 - all that but that's not for this video
28:39 - right here I got got off got off on this
28:41 - tangent um about neural networks so this
28:44 - is these are the different aspects of
28:46 - the pieces of this course that I would
28:48 - like to look at now let me come back
28:49 - over
28:52 - here um okay I'm coming back over here
28:56 - uh anybody
28:59 - um
29:01 - um oh do someone someone sent me a an
29:04 - amount of time so far I'm about 10
29:06 - minutes a few minutes ago great uh okay
29:09 - that's good um okay so anybody want to
29:15 - fact check my Mulla pittz
29:22 - reference uh
29:25 - perceptron Maka and perceptron models
29:29 - Mulla pittz model so I must be right
29:33 - okay
29:34 - good uh
29:37 - okay all right um okay so history of the
29:42 - perceptron I'm going to do like stuff
29:44 - about the history and all that when I
29:45 - actually do neural networks I think so
29:48 - I'm coming back over here what was oh
29:50 - this would be
29:51 - open and this was
29:55 - open okay and I probably zoomed in on
29:57 - this okay so let me come
30:02 - back okay so let me take a look at the
30:04 - uh list of topics I'm going to skip uh
30:07 - week one for a second oop so this is the
30:09 - course if you want this URL will be in
30:10 - the video's description um this is the
30:14 - uh the uh syllabus for the course it's
30:16 - kind of my working document boy do I
30:18 - accept any and all contributions and
30:20 - help so feel free to um uh file GitHub
30:24 - issues and pull requests and things and
30:26 - if I come down here to the oh and I'm
30:28 - kind of in a place where you can't
30:29 - really see it I'm going to uh skip I'm
30:32 - skip over week one and so here are my
30:33 - topics so I'm going to go through these
30:35 - kind of quickly um again this is very
30:37 - survey oriented and Bo and I'm missing a
30:39 - ton of stuff you know so this is just a
30:42 - selection but I'm also still figuring
30:43 - this out so next week I'm going to uh
30:46 - talk about genetic algorithms which is
30:48 - an evolutionary based approach to uh
30:50 - solving problems with which is a way of
30:52 - solving problems in software uh taking
30:54 - inspiration from evolutionary processes
30:56 - in nature so I already have a bunch of
30:58 - videos on that and I'll do some more
30:59 - content about that as well and that will
31:01 - be in next week um oh this should say
31:04 - classification and regression um and
31:06 - recently I learned um that the term
31:08 - regression comes from uh regression to
31:10 - the mean and this is like a 19th century
31:13 - uh concept but anyway uh I'll talk about
31:15 - where I'm getting all my in I just read
31:16 - a bunch of books in the last week I got
31:18 - to thank all these people that I'm you
31:19 - know probably messing up all the stuff
31:21 - that I read um but uh I want to get
31:25 - interested in those I want to get
31:26 - started with those tasks without using
31:29 - uh neural network-based models so
31:30 - something called K nearest neighbor uh
31:32 - one of the things I would like to do is
31:33 - build a simple uh movie recommendation
31:36 - system with K nearest neighbor is an
31:37 - idea if you have an idea for a data set
31:39 - or an interesting creative application
31:41 - for K nearest neighbor that's very
31:42 - simple with a simple data set that I can
31:44 - work with I would love that suggestion
31:47 - uh and also linear regression so I want
31:49 - to do um I want to do an example of the
31:51 - sort of simplest form of regression uh
31:54 - and we could think of that in um uh uh
31:56 - with an input and and and having an
31:58 - output um that's a continuous floating
32:00 - point value so um I want to look at that
32:02 - and when we'll do that we're going to
32:04 - get all this stuff like oh there's a
32:06 - learning rate what's this gradient
32:07 - descent thing and all this stuff so
32:10 - hopefully kind of defining some of the
32:12 - terminology and understanding those
32:13 - pieces as we look at k k nearest
32:15 - neighbor and linear regression will um
32:18 - will give us a leg up for the next week
32:20 - when we look at neural networks so I'm
32:23 - would like to build some simple neural
32:26 - network examples from scratch uh and
32:28 - when I all of this stuff I'm going to do
32:30 - so far probably in processing or
32:32 - JavaScript using the p5js library some
32:34 - combination of those things so I
32:35 - definitely want to build a perceptron
32:37 - you know if I'm feeling ambitious we
32:38 - might look at what happens if instead of
32:40 - a perceptron we have a multi-layered
32:42 - network and uh you know all of this you
32:44 - can think of the neural network as like
32:46 - you're tuning all of these knobs so that
32:48 - the output gives you something that's
32:50 - correct you know you there's a whole
32:52 - training process that we're going to
32:53 - have to discuss called supervised
32:54 - learning supervised learning unsup
32:57 - supervised learning reinforcement
32:58 - learning interesting topics that I'm
33:00 - going to get into um but uh with one of
33:03 - the most complex aspects of neural
33:06 - networks is what do you do how do you
33:09 - train all that stuff that's in the
33:11 - middle and so there's a concept known as
33:12 - back back propagation that
33:15 - I that's like almost almost like querian
33:18 - for me but I'm not running out of the
33:19 - room just yet um and once I get to there
33:22 - I want to investigate some other
33:24 - platform so I might if I'm I might all
33:27 - this is I might but my plan and hope is
33:30 - to look a bit at um once we built some
33:33 - simple examples from scratch to look at
33:35 - other tools uh um for some more
33:37 - sophisticated applications like
33:39 - tensorflow uh and then be able to get
33:42 - into certain specific kinds of neural
33:44 - networks that can do different kinds of
33:46 - tasks what is a convolution network what
33:49 - is a recurrent Network and what is
33:51 - reinforcement learning so those are some
33:53 - aspects of things and you know I don't
33:55 - plan on building those
33:57 - larger more sophisticated systems from
33:59 - scratch but if we can build some basic
34:01 - ones understand how everything works
34:03 - then my thinking is then we'll have a
34:05 - leg up to using Frameworks and tools to
34:07 - do some of the other stuff um again all
34:10 - this is subject to change one of the
34:11 - things I mentioned this last week that
34:13 - I'm hoping to do because even though I
34:15 - might move to some something like
34:16 - tensorflow and python to demonstrate
34:19 - some examples in some of these other
34:20 - areas I would love to work on a simple
34:22 - web server that runs tensorflow in the
34:25 - background that processing or P5 could
34:27 - talk to there are also examples of some
34:29 - of these written in JavaScript
34:30 - well-known examples by Andre karpathy
34:33 - the recurrent rn. JS and convet con
34:37 - convet I to pronounce that. JS so uh
34:41 - people are telling me time's up I told
34:43 - people I'm doing this live but you might
34:44 - be watching this as an archive that I
34:45 - wanted to keep this to 20 minutes uh
34:47 - sound is low okay hold on time
34:52 - out okay hold on let's people a lot of
34:55 - people are complaining about the sound
34:57 - fortunately for everybody I have a dial
34:59 - here that I can just turn it
35:02 - up is that better is that better for
35:04 - everybody and is there any peing or
35:07 - Distortion let me
35:10 - know
35:12 - uh sound is fine okay well now it's up a
35:15 - little
35:17 - bit I guess I maybe I shouldn't have
35:20 - changed it for the um okay everyone
35:24 - saying sound is fine I turned it up a
35:25 - little bit okay I forgot what was saying
35:29 - um okay
35:33 - so I think I'm I'm wrapping up then okay
35:36 - so that's my
35:37 - introduction uh I you know here's the
35:39 - thing I'm learning this stuff so if you
35:41 - want to go watch a course from somebody
35:44 - who really knows this stuff I will uh
35:45 - link to lots of resources and that's
35:47 - what I meant to uh what I wanted to um I
35:49 - wanted to mention some resources that
35:51 - I'm using ah very important that I will
35:53 - include in this video's description um
35:55 - and I think here under the Wiki under
35:57 - related projects and
35:59 - resources um here are um here are some
36:03 - resources that I want to specifically
36:05 - mention so one is a website called
36:06 - machine learning for artists it's got
36:09 - videos ex uh video tutorial video
36:11 - lectures uh examples written
36:14 - descriptions lots of wonderful thing by
36:15 - an artist and researcher named Jean
36:17 - kogan absolute expert wonderful in this
36:19 - field uh I watched a lot of Rebecca
36:21 - fbr's machine learning for musicians and
36:23 - artists videos Rebecca febr uh has made
36:25 - something absolutely Wonder ful called
36:27 - wekinator which is a tool that allows
36:29 - you to send data it does machine
36:30 - learning stuff and it sends it back out
36:32 - all with something called osc open Sound
36:34 - control I would love to do some video
36:35 - tutorials on that or have some guest
36:37 - tutorials from Rebecca febr um there's
36:40 - also a Caden course on a creative
36:43 - applications with tensorflow that I tend
36:45 - to look at and get some resources from
36:48 - um I also want to mention um the let's
36:51 - see what else ah uh Andrew Glassner is
36:55 - writing a book about machine learning
36:57 - and deep learning it is not out yet but
36:59 - he was generous enough to let me look at
37:00 - some preview drafts so uh thank you very
37:02 - much follow at Andrew Glassner on
37:05 - Twitter uh if you want to find out about
37:07 - his upcoming uh book that's coming out
37:09 - it's been really helpful to read and I'm
37:12 - sure there are um uh yeah also uh oh I
37:15 - uh grocking deep learning uh is a book
37:17 - from Manning and grocking algorithms
37:19 - these are books that I've mentioned that
37:20 - I have kind of have been looking as well
37:22 - as a make your own neural network which
37:23 - is a a book that walks you through
37:25 - programming your own neural Network in
37:27 - Python now people in the chat are giving
37:29 - me lots of suggestions for other uh deep
37:32 - learning and machine learning and AI
37:33 - books I don't have my props I have these
37:35 - old uh textbooks I'll bring those
37:38 - another time on artificial intelligence
37:39 - which are great um but the other thing I
37:42 - would recommend is uh these are three
37:45 - comp compilations of resources so this
37:48 - is one that's put together by this
37:49 - community this is awesome machine
37:51 - learning there's a lot of awesome blank
37:53 - lists um that I've uh are put together
37:56 - let me let me see who puts this together
37:58 - just cuz I forgot uh from Joseph MTI on
38:02 - uh GitHub and uh also uh this is a a
38:05 - list of resources from memo Atkin okay
38:08 - so uh please I'm accepting all
38:10 - suggestions and help and examples and
38:12 - ideas I look forward to all of the uh
38:16 - hopefully not so angry letters I will
38:17 - receive as I screw everything up over
38:19 - the next six or seven weeks we're going
38:21 - to um uh you know I have I guess what I
38:23 - didn't really say is I have you know to
38:26 - wrap up here what I have is these two
38:28 - chapters in nature of code which deal
38:31 - with genetic algorithms and the basics
38:32 - of neural networks that's where I've
38:33 - kind of left my knowledge behind and I'm
38:35 - embarking on this journey here on
38:37 - YouTube to try to expand past what's in
38:40 - there and we will see how it goes so
38:42 - thanks for joining me and I look forward
38:44 - to seeing you in some future
38:47 - videos okay uh great stay hydrated all
38:50 - right so that was my introduction I um I
38:53 - there was so many things that I wanted
38:54 - to talk about and cover but I think it
38:56 - was good good that I didn't uh
39:02 - okay I'm okay on time it's 440 so now
39:06 - what I want to
39:07 - do is introduce the first
39:13 - week oh I'm there already
39:18 - okay um okay yeah see I had all these
39:22 - other notes about these are my notes of
39:24 - things that I want to talk about in my
39:25 - introduction that I didn't really uh
39:28 - remember oh I wanted to talk this is so
39:30 - important well what are we going to do
39:32 - another time I will maybe I'll do a
39:35 - separate video about this and we'll come
39:38 - back to it as we get further along
39:40 - somebody remind me about this um I don't
39:43 - think I need to reinsert this into that
39:45 - introduction but I think it's incredibly
39:48 - important when studying and working with
39:50 - these topics to ask to be critical and
39:53 - ask questions if anything we're doing is
39:55 - actually a good idea
39:57 - um David ha who's a researcher at Google
39:59 - I believe our Google creative lab who
40:00 - makes lots of great machine learning
40:02 - projects tweeted one point I thought
40:05 - what happened to making the world a
40:06 - better place see I'm doing this now
40:08 - it'll just be in um you know what let's
40:12 - do an
40:13 - addendum what do you think Mata you said
40:16 - it was under 20 minutes I'm going to do
40:18 - a quick addendum I'm GNA do a quick
40:21 - addendum okay oh I'm back I do this a
40:25 - lot I'm back because I forgot that I had
40:27 - this page of notes instead I just
40:28 - rambled and you know it's got a few more
40:31 - links about thinking about the
40:32 - definition of artificial intelligence
40:33 - and machine learning I'm still working
40:35 - on stuff you'll find this also linked
40:37 - but you know something really important
40:38 - here that I wanted to just mention was
40:41 - uh you know it's it's very important
40:44 - when studying and I'm really just going
40:45 - to be looking at the algorithms and
40:47 - making stuff and trying to be creative
40:48 - and wacka doodling my way through this
40:50 - if that's a verb but it is really
40:53 - important for you the world of people
40:55 - who are going to to be using these tools
40:57 - using these algorithms making projects
40:59 - working for companies to be critical and
41:01 - think about what you're doing and
41:03 - whether it's even a good idea and is it
41:04 - hurting anybody is it helping anybody
41:06 - and so um there are some uh you know
41:08 - some uh uh one thing I'll just mention
41:11 - here is there's an organization called
41:13 - AI now which I just learned about
41:14 - recently um I thought I just clicked on
41:16 - them yep over here uh which is a
41:19 - initiative to research the social
41:20 - impacts of artificial intelligence to
41:22 - ensure a more Equitable future um so I
41:24 - encourage you to check out there's going
41:25 - to be a Symposium in July uh check out
41:28 - about this I also just love this uh
41:30 - quote from uh hard Maru on Twitter uh
41:33 - which is um who makes uh uh David Hoff
41:37 - from Google makes a lot of wonderful I
41:38 - have a recurrent neural there's a
41:39 - wonderful recurrent neural network
41:41 - handwriting with p5js example uh um that
41:45 - uh um you can find I'll try to link to
41:47 - that as well but you know whatever
41:49 - happened to making the world a better
41:51 - place so you know when you talk about
41:53 - what is your goal with building an AI
41:55 - system with using machine learning why
41:58 - are you doing it and so I'll leave you
41:59 - with that are you making the world a
42:01 - better place I hope that you are and
42:03 - come along uh I'll see you in the next
42:06 - video okay you can decide whether to
42:09 - include that or not uh we can decide
42:11 - that later but that was something that I
42:13 - wanted to say here at least in this
42:15 - longer live stream it will be here in
42:17 - this video okay so now what I want to do
42:20 - uh is uh yeah I talked about this I
42:23 - didn't go over my sort of glossery of
42:24 - terms but that's okay
42:27 - um we'll come back to those and now here
42:29 - we
42:30 - go so I'm going to do I'm going to now
42:36 - okay
42:38 - okay okay so here we go I'm looking at
42:41 - the
42:42 - chat um okay so now this video so that
42:45 - was an introduction to the whole course
42:48 - this video which I hope will just be 5
42:50 - to 10 minutes if not even shorter than
42:53 - that uh will be just an introduction to
42:56 - to the topics for week one and one of
42:58 - the things my dream has always been that
43:00 - I just make all these coding challenges
43:01 - and random videos but they're modular
43:04 - pieces that could be assembled into a
43:06 - course so I'm kind of trying to do that
43:08 - to some extent here like most of the
43:10 - stuff that's in this week one are video
43:12 - or topics I've already made videos about
43:14 - traveling salesperson
43:16 - AAR uh binary search tree so you know
43:19 - the only thing that I'm going to have
43:20 - time for today really is H the camera
43:23 - went off is breath first
43:24 - search but but
43:27 - um but as I go on and make more videos
43:31 - someday I'll do a video on Big O
43:32 - notation I don't think I'll get to it
43:33 - today I'll insert it back into this
43:35 - course so in the introduction I want to
43:37 - sort of first lay out what the topic is
43:39 - but also explain to people that these
43:40 - aren't necessarily sequenced but they're
43:43 - if you're watching in this playlist they
43:44 - are okay so sorry I'm going to say
43:46 - everything twice but I have to like sort
43:48 - of figure it out
43:52 - but
43:53 - okay um here we
43:57 - go let's uh let's
44:00 - begin so I'm going to leave this here
44:03 - let me actually so I will oh yeah
44:09 - okay oh this is a
44:12 - mistake I'm not logged I always forget
44:14 - that I'm not logged in at GitHub I need
44:15 - to fix this bottom link um wait I can do
44:18 - ah never mind it's fine I got to time is
44:21 - of the essence
44:24 - okay okay so maybe you watched the first
44:27 - the introduction to this uh larger
44:30 - playlist the intelligence and learning
44:32 - set of videos but now this video is an
44:35 - introduction to just the first session
44:38 - and the first session is about search
44:41 - and graph systems now why why why should
44:44 - that be the first session I don't know
44:45 - might be a bad idea first of all I
44:47 - wanted a warmup so I wanted something to
44:49 - kind of get us thinking about algorithms
44:52 - and data and things that seem
44:54 - intelligent or that solve problems in an
44:56 - intelligent way so um and also there are
44:59 - some very you know in some ways common
45:01 - unsolved problems of computer science
45:03 - like the traveling salesperson problem
45:05 - which is one of the topics of this
45:06 - week's that could could
45:08 - use a a new newly invented machine
45:12 - Learning System to solve it so anyway
45:14 - I'm off I'm off track so where where
45:16 - does this fit in so if you go and grab I
45:18 - I wish I had my props can we get some
45:20 - like post- production here I'm going to
45:22 - hold up uh the um um what what's the
45:24 - book that I always use hold on time
45:28 - out um it's the um it's the norvig
45:32 - artificial
45:35 - intelligence um I just want to get the
45:38 - name of it correct artificial
45:39 - intelligence a modern approach by
45:41 - Russell and norvig okay that's what I
45:43 - was
45:45 - meing uh good luck editing this um
45:49 - okay
45:54 - um
45:56 - I'm GNA like pretend I'm just GNA like
45:58 - pretend I'm doing that again which is so
46:00 - ridiculous I'm do it anyway oh God I
46:02 - can't believe I do these live um you
46:05 - know oh I don't have my Pro if I had my
46:08 - book uh artificial intelligence the the
46:11 - uh modern approach the norvig Russell
46:14 - book yes I know hopefully I got that
46:16 - right um you know you would see a lot of
46:18 - I don't have my pen anymore ah
46:20 - continuity error um you would notice um
46:24 - that uh there's a lot of algorithms in
46:26 - these books about search because one of
46:28 - the first one of the kinds of problems
46:31 - that artificial intelligence algorithms
46:32 - that intelligent
46:34 - algorithms often need to solve in
46:36 - computer science in applications
46:39 - interactivity all the sort of kind of
46:41 - projects that you might be thinking of
46:42 - making
46:43 - is there's a problem I need to figure
46:46 - out the answer to this problem but there
46:48 - are so many possible answers I couldn't
46:51 - possibly check every single one and so
46:55 - search refers to the idea of searching
46:58 - for the answer in uh in a sea of
47:01 - possibilities now one way is to search
47:03 - every single possibility I mentioned the
47:04 - traveling salesperson problem let's talk
47:07 - about that for a
47:10 - second
47:11 - so I want to talk about uh search and
47:16 - graph systems this is kind of loosely
47:19 - the topic for right
47:21 - now there goes that eraser oh my God
47:24 - sorry everybody the eracer is okay
47:26 - everything's fine okay so um The
47:28 - Traveling salesperson problem says oh I
47:32 - have videos on this already so you can
47:33 - go watch those there are some number of
47:37 - cities and let's say there are five and
47:41 - that A salesperson needs to visit all of
47:45 - the cities in the shortest amount of
47:46 - time or taking with the shortest
47:48 - distance in any order starting with
47:50 - anyone ending with anyone so I might be
47:52 - able to eyeball this and say like okay
47:55 - well maybe that's the path it's probably
47:57 - not the path it's probably more like
47:58 - this whatever the point is we could have
48:00 - a computer algorithm figure this out
48:02 - let's just check every single
48:03 - possibility so first let's pick a city
48:05 - how many cities should I pick how many
48:07 - cities could I pick oh there's five of
48:09 - them okay now if I pick if there's five
48:12 - possibilities now once I picked one city
48:13 - how many possibilities are there left
48:16 - four and how many are left three and how
48:18 - many are left two how many left one so
48:20 - five factorial 20 60 120 120
48:23 - possibilities for five cities and this
48:25 - is 5 factorial so this is the kind of
48:28 - problem that doesn't seem like such a
48:30 - big deal but if I just have 10
48:34 - cities what's 10 factorial I don't know
48:38 - a computer could probably crunch through
48:40 - that number uh what about uh 50
48:45 - cities okay that's a three with 64 zeros
48:49 - after it it's like a really really
48:52 - really big number I mean what's the
48:54 - what's the uh the um age of the known
49:00 - universe it's just 13.77 two billion
49:03 - years that other number is a lot more
49:05 - than that so and you know even if we
49:07 - could do like a million per second or
49:09 - something it's trust me we're going to
49:11 - have some issues and we'll talk about
49:12 - that so what are some solutions to this
49:13 - next week we're going to look at genetic
49:15 - algorithms which is a technique for
49:18 - trying to optimally find a solution and
49:20 - there are ways we might say something
49:21 - known as a greedy
49:24 - algorithm I went off put a tangent here
49:26 - we'll see if this is a problem maybe
49:27 - we'll edit this part out but a greedy
49:29 - algorithm which you might say like I
49:30 - don't know let's just pick a city and
49:31 - then pick the closest one then pick the
49:33 - closest one to that it's probably going
49:34 - to get us a pretty good answer even if
49:36 - it's not the exact optimal answer the
49:38 - point of what I'm saying is this is the
49:40 - application that I want to look at in
49:42 - this first week so the things that we
49:45 - need to learn about to be able to do
49:47 - things and work with problems like the
49:49 - traveling salesperson are number one
49:53 - graph
49:54 - systems
49:56 - and number two search
50:01 - algorithms okay now what is a graph
50:05 - system a graph
50:08 - system is something a system that is
50:11 - made up of two
50:13 - elements node and an edge we could name
50:17 - these other things but I'm going to call
50:18 - them nodes and edges um one of the next
50:22 - videos that you'll watch if you follow
50:23 - this playlist will be on something
50:25 - called binary search tree a binary tree
50:27 - is a graph system where every node is
50:31 - connected to two children nodes a left
50:34 - and a right and those are connected to
50:37 - two and those are connected to
50:40 - two etc etc etc so this is one example
50:44 - of a graph system so what you'll notice
50:46 - is we need some sort of data structure
50:49 - to store what are all the nodes and what
50:51 - are all the edges and this depends on
50:53 - the problem uh a common example also of
50:56 - a graph system similar to The Traveling
50:58 - salesperson problem is a subway map so
51:01 - let's say I need to get from this
51:03 - station to this station well there are
51:05 - all these other stations and routs and
51:07 - maybe they all are interconnected and
51:09 - there's many ways to get um this the
51:11 - subway map makes no sense there's many
51:13 - ways to get there but they all take
51:16 - different amounts of time like maybe I
51:18 - could go from here to here to here to
51:20 - here to here which is hold on let me re
51:23 - let me redraw this timeout
51:31 - editor okay I'm back I'm going to redraw
51:33 - that to make more
51:37 - sense let me just draw it like
51:40 - this so let's say we I wanted to get
51:42 - from here to here we could see like oh
51:44 - I'm going to get from in one step to
51:46 - here and it's going a two steps I want
51:48 - to take two trains to get to here but
51:50 - what if this train takes 60 Minutes this
51:53 - train takes 30 minutes and each one of
51:55 - these this takes five this takes two
51:57 - this takes one and this takes six so
51:59 - even though I have to go on 1 2 3 four
52:02 - trains this is optimal this will get me
52:05 - there faster this is known as a weighted
52:07 - graph
52:10 - system so the grph system is a bunch of
52:13 - nodes those nodes might have value so a
52:15 - binary search tree you can use to
52:16 - organize in alphabetical order a lot of
52:18 - words or numbers and other variety of
52:21 - things you could think of this but the
52:23 - edges here don't necessarily have
52:24 - weights at least in a standard binary
52:27 - tree but here they do now there's an
52:29 - algorithm for searching for that optimal
52:32 - path in this scenario in a weighted
52:33 - graph and it's called Uh dyra
52:37 - algorithm uh there's also another
52:39 - algorithm called uh
52:42 - AAR and etc etc so these are different
52:46 - examples binary search algorithm dyis
52:48 - algorithm a star and the one that I'm
52:50 - actually doing today but that doesn't
52:53 - really matter to you because you're
52:54 - going to watch these videos and sequence
52:55 - which I'll talk about in a second is
52:57 - something called breath first search so
52:59 - breath first search is a good algorithm
53:01 - for finding the shortest path between
53:03 - two nodes in a graph that aren't
53:05 - weighted so the shortest number of steps
53:08 - and I'll talk about the example that I'm
53:09 - going to use for that in a bit so this
53:11 - week is all about learning how to
53:13 - program a graph system and learning
53:15 - about different algorithms to
53:17 - efficiently solve a some type of problem
53:21 - associated with the graph system like
53:22 - the shortest path and you and so now now
53:25 - once you stop watching this video
53:27 - there's going to be a bunch of others in
53:28 - this playlist that I've made at all
53:30 - different times under different
53:31 - circumstances so this is experiment that
53:32 - I'm trying trying to put together a
53:34 - sequence course with all different
53:36 - coding challenges so you'll see there's
53:37 - a binary search tree example there will
53:40 - be a breath first search example there's
53:43 - uh there is no at the time of this
53:45 - recording but there might be at the time
53:46 - of you're watching a Dyas algorithm AAR
53:48 - so you'll see and I'm going to be
53:50 - filling stuff in as time goes on once
53:52 - you get to the end of all of those if
53:54 - you choose to watch them all I'll make
53:56 - another video that kind of wraps up and
53:57 - shows you a bunch of examples all
54:00 - together and um gives you some ideas for
54:02 - some homework exercises that you might
54:04 - do that you could share with me in the
54:05 - comments and that sort of thing uh if
54:07 - you want to participate in a slack
54:09 - Channel that I have that's going on for
54:10 - this course you can sign up at uh
54:13 - patreon.com coding train it's a
54:14 - crowdfunding thing if you want to
54:16 - participate in that slack Channel but
54:17 - you can also always hit me up on Twitter
54:18 - at shiffman and uh in the comments here
54:22 - which I do read okay so that's what's
54:24 - going to happen next and I will see you
54:27 - uh if you decide to come back in a
54:29 - wrap-up video where I um kind of
54:32 - summarize a bunch of this stuff and give
54:34 - you some exercise ideas uh great so I'm
54:36 - going to go and actually record a video
54:38 - right now on breath first search uh but
54:40 - you might watch some of these other ones
54:41 - first thanks very
54:43 - much
54:44 - um let me see uh oops how was that
54:52 - um um people are talking about quality
54:56 - okay so how are we doing here how long
54:58 - was that would you say that was probably
55:00 - way too long
55:02 - okay um
55:08 - okay oh Big O notation is something I I
55:12 - didn't mention that's fine that's
55:15 - fine um 9 to 10 minutes wow all
55:22 - right I don't have my sound board today
55:25 - I forgot it sad okay so I got to get set
55:28 - up for this coding
55:31 - challenge oh I knew something I forgot
55:33 - to mention does anybody have any
55:36 - questions because one thing I should do
55:38 - is answer questions um I totally forgot
55:40 - to mention something important that's
55:42 - fine um that's fine because the thing
55:45 - that I want to mention ah
55:48 - shoot I'm going to mention it I'm GNA
55:52 - come I'm going to do my addendum we can
55:55 - if it makes no sense that's just it's
55:58 - what I always do uh week one read
56:04 - me
56:07 - here um
56:10 - okay I didn't really talk about pre
56:14 - prequisites it's a very hard word to say
56:17 - [Music]
56:18 - prerequisites pre
56:20 - prerequisites okay don't really talk
56:22 - about prerequisites PR pre prerequisits
56:26 - maage anyway um how many of you get that
56:30 - reference okay you want to see the mug
56:32 - oh I didn't bring the mug because I have
56:33 - my water bottle my purple clean
56:36 - canteen sponsored by would that be great
56:39 - if they would sponsor me I need a water
56:41 - I actually I make that joke but I really
56:43 - should get a water company or something
56:46 - to sponsor me product placement oh my
56:51 - god um you know what I think maybe I
56:54 - should just leave things as they are uh
56:56 - let me do a little maybe this will get
56:58 - added on maybe it won't but um this is
57:00 - important so I'm going to mention it
57:02 - here okay oops I'm always back at the
57:05 - end of my videos when you think they're
57:06 - over so one thing I want to mention that
57:08 - if you're about to watch some of these
57:11 - the rest of the videos in this sequence
57:13 - first of all you should um you know if
57:15 - you don't know uh JavaScript programming
57:17 - in p5js um you might want to take a look
57:19 - at some of my intro to p5js videos but
57:22 - more importantly than that if you have
57:23 - experience with um two things that I'm
57:25 - using in these videos is one is this uh
57:28 - concept of prototype as a as a a way of
57:31 - attaching methods to an object in
57:33 - JavaScript as well as this idea of an
57:35 - associative array or hash table and how
57:37 - that works in JavaScript so those two
57:39 - things might be videos that you might
57:40 - want to go and watch first before you
57:42 - start looking at some of the graph
57:43 - systems and different search algorithms
57:45 - okay just in case that matters to you
57:47 - you know um but you don't really have to
57:49 - know very much to follow this stuff
57:50 - along if you know a bit about
57:52 - programming you've tried you've watched
57:53 - some of my other videos hopefully you'll
57:54 - be okay if not let me know and I'll see
57:56 - what I can do okay see you soon okay
58:01 - uh okay so oh I ignore questions I'm
58:05 - trying to not ignore questions oh uni
58:07 - Kitty uni Kitty is in the chat um what
58:13 - sometimes might the YouTube the YouTube
58:15 - chat Scrolls pretty fast and it's very
58:17 - hard for me um to um watch it
58:23 - continuously but but I do um so
58:26 - sometimes if there's a really important
58:27 - Salient question and somebody who's in
58:30 - both YouTube and slack wants to paste it
58:32 - over I'm I'm uh that could be a way okay
58:37 - uh okay um so where how are we how are
58:40 - we on time five o'clock so this is the
58:42 - thing that I'm now hoping to do in a
58:44 - half an hour it'll take longer but we'll
58:46 - see okay um I got to get myself ready
58:49 - for this now so what I need is a couple
58:53 - things I need to get a data
58:58 - set
59:01 - um okay so first okay hold on ah uh I
59:05 - need to go
59:08 - here I'm so I'm I'm going to clone my
59:18 - repo and I'm going to run a
59:23 - server and now I'm going to get the
59:25 - browser back open oops wrong
59:30 - thing and uh oops I'm I really don't
59:34 - want to run the server from the desktop
59:36 - that's a little bit
59:38 - silly uh oh
59:40 - shoot um
59:43 - ah sorry
59:45 - everybody
59:49 - uh I will run it from
59:52 - here um sorry that I'm standing in front
59:54 - front of what I'm doing I'm just kind of
59:56 - getting some examples ready to go oops
60:02 - uh okay so this one we're going to
60:05 - need uh
60:08 - okay um thank you somebody contributed
60:12 - the force directed physics of this I
60:15 - should I want to make sure I thank this
60:16 - person let me look at poll requests I
60:19 - made a bunch of changes to it but the
60:21 - original implementation was done by so
60:23 - first of all thank you to there's a
60:25 - bunch of let me thank all these people
60:28 - uh Kay weekman who has added a lot of
60:30 - like links to references and other uh
60:32 - information that's been really super
60:34 - helpful um somebody uh contributed a
60:37 - better uh a better way of laying out the
60:41 - binary tree um example that I made which
60:43 - was like in my videos as well uh which
60:46 - is D um drw on GitHub and then our
60:49 - hacking contributed the force directed
60:51 - aspect of this particular um uh breath
60:54 - for a search
60:55 - example um um I want to also go to the
60:59 - Wikipedia
60:59 - [Music]
61:03 - page um because we can follow along with
61:06 - the algorithm
61:09 - here um okay and then what I also need
61:14 - is oh so now I need to make my own
61:17 - thing what I'm going to do let me just
61:20 - get any
61:22 - random example let me just grab this one
61:26 - I'm going to do this from scratch so I
61:29 - don't need any of this code I'm going to
61:32 - call this uh six
61:36 - degrees of
61:38 - bacon by bacon I mean Kevin Bacon uh and
61:42 - I'm going
61:44 - to open that in
61:48 - adom I'm going to delete all of the
61:52 - code I am going to make a new new file
61:55 - call it uh Kevin bacon.
61:59 - Json and then somewhere I made what I
62:02 - already did is I made a little data
62:05 - set uh here it
62:09 - is uh whoops let's do this I can put in
62:13 - here and there we go okay so
62:18 - now uh yeah okay so I'm just about ready
62:23 - to talk
62:25 - about uh can you code it in Java you
62:30 - know I'm going to do this one in
62:33 - um JavaScript in P5
62:36 - because I wanted to just make it quickly
62:39 - interactive in the browser um but I'm
62:41 - not opposed to making a
62:43 - um oh the Chrome extension by the way
62:46 - that I use it's really really good for
62:47 - the I love this Json formatter Chrome
62:51 - extension got to get this Chrome
62:53 - extension
62:55 - you got to get this Chrome extension let
62:57 - me tell you uh Json former I believe
63:00 - it's this one first one that comes up in
63:02 - Google uh okay um but I I I'm happy to
63:06 - make processing versions or come back
63:08 - and do it again but I'm today is going
63:10 - to be um um
63:13 - okay okay um all right so this is okay
63:18 - so that I wanted to
63:19 - demonstrate just as a
63:23 - diagram uh
63:25 - okay so I don't
63:34 - know wait no what am I
63:36 - doing uh hold on everybody six degrees
63:40 - I'm going to just run this on a
63:41 - different
63:44 - port that'll
63:46 - do
63:49 - uh there we go and let me actually just
63:52 - change the
63:53 - title Six Degrees of Kevin
63:58 - Bacon uh so I can see that that's
64:00 - different and uh there we go okay
64:06 - um okay so I I want to reference this
64:09 - book which
64:13 - um this particular example comes from
64:16 - make this
64:21 - bigger um and then
64:25 - oops then I have this then I have the
64:28 - breath first search page so I think we
64:30 - are good I'm going to go erase the
64:44 - Whiteboard
64:46 - uh
64:48 - and so
64:52 - um I think much
64:54 - uh in terms of editing this I think this
64:57 - well it doesn't we have to decide this
64:59 - right now but I think this is a coding
65:00 - challenge I could make it one video
65:03 - where I explain the algorithm and
65:05 - another video where I code it but I kind
65:07 - of prefer to just do them both together
65:09 - so I think what I'll try to do is
65:14 - um
65:16 - uh there's a pole now going on by the
65:19 - way somebody pointed out that I can use
65:20 - straw pole for polls uh and Nadim in the
65:23 - chat asked will this video be available
65:25 - after the stream ends yes it will be
65:28 - um I think what I want to do is try to
65:30 - do this all at once like describe the
65:33 - problem and the algorithm and write the
65:34 - code all at the same time and if it is
65:37 - taking a while I might break it into two
65:41 - parts um this is probably I mean this is
65:44 - in theory much more complex than my pong
65:47 - example but I don't know why I think in
65:49 - my head this is like not going to take
65:50 - very long to program but we'll sort of
65:53 - see
65:54 - okay um so here we go me let me uh see
65:59 - if I can get these cameras to not go to
66:12 - sleep and where am I on this other
66:17 - camera uh
66:19 - okay uh here we
66:22 - go okay here we go everybody ready this
66:25 - is the last thing that I'm going to do
66:26 - today just so you guys know although
66:27 - I'll happy to if assuming this goes okay
66:30 - and it's not a total and I don't go
66:32 - running out of here with like my hair on
66:33 - fire or something um I will maybe try to
66:36 - answer a few questions boy I'm really
66:38 - exhausted but we're going to go through
66:39 - this anyway I had no tea I got no coffee
66:42 - but I do have my clean canteen of
66:48 - water
66:49 - okay here we
66:53 - go hello welcome to a coding challenge
66:56 - in this coding challenge I am going
66:58 - to uh what am I going to do ah breath
67:01 - first search what's breath first search
67:03 - why should you care first before I even
67:04 - get into it I would like to thank the
67:07 - author of this book grocking algorithms
67:09 - because this particular example um
67:12 - that's not the thing exactly the thing
67:13 - that I'm going to build but it's
67:14 - something that I did recently after
67:16 - reading this book this is a version this
67:21 - examp do I get my do over
67:29 - okay maybe I should use the whistle
67:31 - whistle is good luck
67:34 - okay
67:36 - hello welcome to a coding challenge uh
67:39 - this coding challenge I am going to um
67:42 - attempt something called breath first
67:43 - search now this is an example uh an
67:46 - implementation in p5js of breath first
67:49 - search it comes directly from this book
67:51 - grocking algorithms by a did
67:54 - y barava It's a Wonderful book I highly
67:57 - recommend it Buzz Marketing books here
67:58 - on my uh uh YouTube thing but I I do
68:02 - want to thank that's where I learned uh
68:04 - more recently about this algorithm and
68:06 - in practicing it implemented the example
68:07 - so what is breath first search so this
68:09 - video first of all is also placed in a
68:11 - series of videos about graph systems and
68:14 - search algorithms so you can in the
68:16 - video's description go back to some of
68:18 - the introduction videos that will lead
68:20 - you up to here but you can also just be
68:21 - here right now because I'm going to do
68:22 - everything from scratch with no
68:24 - knowledge but a graph system is a system
68:26 - of nodes and edges and you can see here
68:28 - are the nodes now the nodes all have a
68:30 - name these names are exactly the names
68:32 - in the grocking algorithms book um and
68:35 - they have edges so they have connections
68:36 - you can think of this as maybe a map of
68:39 - friends and their relationships um you
68:42 - could also turn this into more like a uh
68:45 - a maze type thing there's so many
68:47 - different ways you could sort of
68:48 - visualize this idea of a graph system
68:50 - and you'll see in some future videos
68:52 - that I actually made previously I do
68:54 - have some implementations of graph
68:56 - systems to create mazes but that aside
68:58 - what breath first search is designed to
69:01 - do is find the shortest path between two
69:04 - nodes and in something like this you
69:07 - know it's quite a simple problem to
69:11 - eyeball it we can see like if I want to
69:13 - get from you or me or whoever this
69:15 - person is to Tom I can see through CLA
69:19 - there are just two steps if I want to
69:21 - get to an this through Bob is faster
69:23 - than going through Alice Peggy Bob anou
69:26 - so how do you figure this out it's
69:28 - called the one algorithm for doing this
69:30 - is called breath first search and the
69:32 - reason why it's called breath first
69:34 - search rather than something else that
69:35 - you might have learn learned about or
69:37 - see in a future video called depth first
69:39 - search is breath first search by
69:41 - definition looks at all the nearest
69:43 - nodes first sees if it finds what it's
69:46 - looking for then looks at all the
69:47 - nearest ones to those first and sees
69:49 - what it looks at find as opposed to
69:51 - going all the way through I recently
69:53 - made a video video about binary trees
69:55 - and search trees that's more like depth
69:57 - first search because in the binary tree
69:59 - you just keep going to the left all the
70:00 - way to the bottom but here breath first
70:03 - we're looking at the nearest neighbors
70:04 - to start okay so what's the problem that
70:06 - I'm going to work with today um you may
70:10 - or may not be familiar with I don't know
70:11 - what this is a thought experiment a
70:13 - weird idea Six Degrees of Kevin Bacon
70:16 - there's actually a website it's called
70:18 - Oracle of
70:19 - bacon uh and I'm going to go to it right
70:21 - now and I don't know I needed uh I need
70:24 - an actor or I need an actor um let's
70:27 - pick um Amy
70:30 - Schumer and I'm G to pick a f
70:33 - link okay Amy Schumer has a Bacon number
70:36 - of two the shortest path between Amy
70:40 - Schumer and Kevin Bacon Amy Schumer was
70:42 - in the movie train wreck with Marissa to
70:45 - who's in the movie Crazy Stupid Love who
70:47 - with Kevin Bacon so this particular
70:50 - website has a massive database of movies
70:53 - casts and uses breath first search to
70:56 - find the shortest path between two
70:58 - actors and the the thought experiment
70:59 - here is that Kevin Bacon has just been
71:00 - in so many movies that um anyone could
71:04 - be within six degrees of Kevin Bacon I
71:06 - don't think I have an IMDb what's the
71:08 - what's the chance that Kevin Bacon to
71:10 - Daniel schiffman n infinity infinity we
71:13 - got to work on that come on help me out
71:15 - with this here I want my Kevin Bacon
71:17 - number to come on down okay um so how
71:20 - are we going to do this now I would love
71:22 - if anybody uh so this is an experiment
71:25 - you I'm I'm going to do this for you and
71:27 - hopefully teach you something about this
71:29 - and then maybe you could do something
71:30 - similar but with a different data set
71:32 - but I'm going to use just a toy data set
71:35 - essentially I manually created before
71:37 - coming here right now this data set so
71:40 - this data set has uh a few movies in it
71:43 - some of which have Kevin Bacon in it and
71:45 - some of which don't have Kevin Bacon
71:48 - it's organized in Json format which is
71:50 - Javascript object notation I do have
71:52 - some video tutorials about that if
71:54 - that's unfamiliar to you but I'll try to
71:56 - talk about that a little bit as I go
71:57 - through so let's let me move over to the
71:59 - Whiteboard to figure out how we're going
72:01 - to work this
72:02 - out so what I need to do in my program
72:06 - we're going to look at the algorithm
72:07 - itself on Wikipedia and start
72:08 - translating it into code but before we
72:10 - even do that what I need is I need a uh
72:13 - I need two I need a node I need a node
72:16 - object so in the end um there's going to
72:18 - be Kevin Bacon there's going to be some
72:21 - movie and there's going to be some other
72:25 - actor so and then there's lots of other
72:28 - stuff so in order to keep track of these
72:31 - what I need is I need some sort of
72:33 - object I'm going to call it a node and
72:35 - that object needs to have we call it a
72:37 - value or a label we're going to say a
72:40 - value it also needs each object needs to
72:43 - keep track of its edges which other uh
72:47 - nodes is it connected to so we need
72:50 - edges and this will be an array I don't
72:52 - like these dashes here they look like
72:54 - minus signs so I don't know dot that
72:57 - looks like something else but anyway
72:58 - these are this is the data now at its
73:00 - core this is very similar to my binary
73:02 - search tree that I mentioned which each
73:05 - node just has a left and a right but
73:07 - here each node could have just one
73:09 - connection zero connections 10
73:10 - connections now there's other pieces of
73:12 - data that the node is going to need um
73:14 - and these are part of the breath first
73:16 - search algorithm I'm just going to
73:17 - mention them right now since while
73:18 - they're on on in my mind one is we need
73:21 - to know a
73:22 - Boolean how has it been checked searched
73:24 - or not like is this we're looking for
73:26 - Kevin Bacon is this node been checked
73:28 - already to see whether it's Kevin Bacon
73:29 - or not so this is going to be true or
73:32 - false this is going to be a Boolean
73:33 - we're also going to want eventually
73:35 - we're trying to solve for that path so
73:38 - we're going to have nodes keep track of
73:40 - their parent meaning as I'm checking and
73:42 - go moving about through this graph
73:44 - system I want to keep track of where I
73:46 - came from what was the previous node so
73:48 - that when I find Kevin Bacon I can back
73:50 - up and find that full path so I want to
73:53 - keep track of the parent as well okay so
73:55 - we know we need an object that stores
73:58 - all of this stuff so let me come back
74:00 - and start building that uh and I'm just
74:03 - going to put that so I have I have a a
74:04 - JavaScript project set up if I go to the
74:07 - browser and refresh the page there's
74:09 - nothing on the page but I'm going to
74:11 - start adding some code so um first thing
74:14 - I'm going to do is I'm going to write a
74:16 - Constructor function for a node object
74:19 - and I'm going to say I'm going to say
74:21 - this.v value equals something we needed
74:24 - that uh this. edges is an array uh this
74:29 - do searched is false it hasn't been
74:31 - searched and this. parent I'm going to
74:35 - just set it equal to null so I I want to
74:37 - be able to whenever I make a node with
74:40 - this Constructor function uh you know
74:42 - even though this by definition its
74:46 - parent would be undefined I'm going to
74:47 - explicitly said to no just so I'm kind
74:48 - of keeping track of that okay so this is
74:51 - pretty good this is pretty good okay
74:53 - first all this shouldn't be blank so
74:54 - maybe when I say new node I'm going to
74:57 - uh give it a
75:00 - value okay so this is good you know what
75:02 - I want to do I want to take this code
75:04 - and I want to put this in a file called
75:06 - I probably shouldn't call it node.js
75:08 - should I fine I'm gonna call it no
75:11 - DCH uh okay
75:14 - um okay uh so now sketch doesn't need so
75:18 - in P5 uh P5 has a setup function setup
75:21 - function is kind of like window page
75:23 - loaded type thing so that's going to be
75:25 - in sketch I'm also going to make here's
75:27 - the thing I'm going to make uh a graph
75:33 - object so I might have some redundancy
75:36 - or some things in my code hello I'm sort
75:38 - of out of the picture here that are a
75:39 - little bit unnecessary but what I would
75:41 - like to do with the graph object is I
75:44 - would like to
75:47 - store an array of all the
75:50 - nodes and then I would like of all the
75:52 - nodes and I probably need you know what
75:54 - the graph really should be as a data
75:57 - structure would be something like I
75:59 - could look up each
76:01 - node by its uh um I I'll call this a
76:05 - graph by its label by its value so uh
76:08 - this mode typically be something like
76:11 - you know a hash table where uh the the
76:15 - key might be Kevin
76:18 - Bacon and then I could uh with that key
76:22 - I would find out all its edges its
76:24 - parent all that other stuff so I want to
76:26 - be able to have I might not need this
76:28 - array because I can always the whole
76:29 - point of the algorithm is to Traverse
76:31 - the graph to find what I'm looking for
76:33 - but it might be useful to have this
76:34 - array if I want to visualize it or do
76:35 - something that I could just iterate over
76:37 - all the nodes really quickly you know
76:38 - there's going to be some done to the
76:39 - here but this is what I'm going to do so
76:41 - let's go and uh do that and uh I look
76:46 - forward to hearing from everybody later
76:48 - about how I'm not doing this correctly
76:50 - uh I'm going to say uh function graph
76:53 - graph this. nodes is an array and this.
76:57 - graph is an object uh an empty object so
77:00 - if you're going to use this object
77:01 - essentially as an associative array or a
77:03 - hash table and I have a video about that
77:04 - if you're interested okay now I need to
77:06 - read the data that's the first thing I
77:08 - need to
77:09 - do so I'm going to use P5 has a function
77:12 - called
77:13 - preload which I can use to uh I'm just
77:16 - going to say VAR
77:17 - data and then I'm going to say data
77:20 - equals and this is a P5 function called
77:22 - Low Json where I can just pass in the
77:24 - name of my Json file which is Kevin
77:26 - bacon.
77:29 - Json Kevin bacon. Jason Json Jason ah
77:33 - what is it somebody will tell me I'm
77:35 - pretty sure from the comments that it's
77:37 - GIF though and not GIF I've been told
77:39 - that many a time okay so now I'm just
77:41 - going to in setup I'm going to say no
77:42 - canvas P5 makes a canvas by default but
77:45 - I don't need it and then I'm going to
77:46 - console.log the data so let's just make
77:48 - sure the data is there and we can see
77:51 - there it is so the data came in I have
77:53 - an object which has an array called
77:55 - movies and each movie has a a a property
77:58 - called cast which is an array of all the
77:59 - actors so that's great so now what I
78:02 - need to do is I need to make a node for
78:05 - every movie and every actor okay so I
78:09 - want to be able to parse through and
78:11 - read this list so the object has movies
78:15 - so I'm going to say VAR movies equals
78:18 - data. movies then I'm going to Loop over
78:21 - all the movies in that Json
78:24 - file well I'm really not on to breath
78:27 - first search yet I'm just kind of
78:28 - gathering the data and I'm going to get
78:30 - um and what I'm going to do is I'm going
78:32 - to get the movie equals and what what
78:34 - what was the movie the movie has a cast
78:36 - and a title so the title is also a node
78:39 - so I want the movie movies indexi tile
78:43 - and cast equals movies indexi do cast so
78:47 - first I need to make a
78:49 - node Varn equals a new
78:54 - node movies indexi do tile okay so oh
79:00 - actually I don't need to say that again
79:01 - movie so I need to make a movie node and
79:05 - then what I want to do in the graph is I
79:07 - want to say oh I want to say I'm going
79:10 - to make a graph
79:11 - object and then right the graph object
79:13 - is the thing that's going to keep track
79:15 - of all the nodes so I need to say at the
79:18 - beginning graph equals new graph and
79:21 - then what I would like to do is add add
79:23 - this node to the graph so I'm want to
79:25 - take this node object which whose value
79:28 - is a particular movie and add it to the
79:30 - graph graph. add node n now can I just
79:36 - do this and get this to run Tada no
79:40 - graph is not defined okay so first of
79:41 - all I forgot a bunch of things one is I
79:44 - forgot I need to add a
79:46 - reference to my node object Javascript
79:50 - file and the graph object Javascript
79:51 - file so that's one problem
79:53 - number two add node is not a function
79:55 - this doesn't just exist it's a function
79:57 - that I need to write so I'm going to
79:59 - attach a method to the graph object
80:02 - using the Prototype I have a video about
80:05 - what prototype is if that's not familiar
80:06 - to you graph. prototype add
80:10 - node equals
80:12 - function okay now what comes in a node
80:16 - so what do I want to do okay so I need
80:20 - first a couple things one is I want to
80:21 - say this. node
80:23 - push. node so any node that comes in I
80:26 - want to put it in the array because I
80:27 - want to store all the nodes in an array
80:28 - which might be unnecessary but I'm doing
80:29 - that as a safety mechanism then I also
80:32 - want to
80:33 - have a lookup of the node based on the
80:36 - name so the movie name needs to be the
80:39 - key for that node object so this is
80:42 - going to look a little bit weird but I'm
80:43 - going to say uh title equals n. tile no
80:47 - do value right the node the title is
80:49 - stored in the node's value and then I'm
80:51 - going to say this do graph index that
80:56 - title equals that node so this is
81:00 - me uh putting this is node into
81:04 - array and node into you know it's not
81:08 - really a hash table because it's
81:10 - JavaScript but I'm thinking of it as
81:11 - like a hash table okay so that's good
81:13 - I've got the
81:17 - um I've got the what do I have the
81:20 - movies okay let's now add the actors
81:23 - what I'm going to do in this first part
81:24 - is I'm going to add all the data and get
81:26 - the graph set up and then I'll take a
81:28 - break and there'll be a second part of
81:29 - this video which will be the um actual
81:31 - implement the algorithm okay so now the
81:33 - cast for I need another loop I can't use
81:36 - I so I'm going to use J uh the cast.
81:39 - length uh
81:42 - j++ and now I need to make a node I'll
81:45 - call this uh you know actor equals cast
81:49 - I'm not call sorry cast index I
81:53 - yeah the strings are just there in the
81:54 - array let me just console log everything
81:56 - to make sure I'm getting all the uh
82:00 - that's that's correct what I'm thinking
82:02 - here okay so we can see that oops I used
82:06 - index I I'm like why is it Steve
82:08 - Gutenberg 14 times because this needs to
82:11 - be J okay so now okay so now you can see
82:16 - I'm that's me iterating over all the
82:17 - movies and the actors so now what I need
82:19 - to do is I need to say bar uh actor node
82:26 - equals a new node with that actor name
82:29 - and then graph add node actor node so
82:33 - just like for every movie add the movie
82:36 - then add all the actors wonderful okay
82:39 - so now let's also at the end of setup
82:42 - now let's say
82:44 - console.log graph just so we can look at
82:47 - what's in
82:48 - there and I don't need to console log
82:50 - the data anymore I feel confident about
82:52 - that
82:53 - so whoops and I don't need to
82:54 - console.log the actors
82:56 - anymore so let me go here so this is the
82:59 - graph you can see it's an array it's got
83:01 - an array of 74 nodes and it's also got a
83:04 - whole bunch of objects which all have
83:06 - the actor name or the movie name as the
83:08 - lookup so this is good I'm kind of
83:10 - almost there like what do I have so far
83:12 - I have a graph object which stores all
83:16 - of these nodes only it looks like this I
83:19 - haven't done any of the edges so what do
83:22 - I need to do every movie needs to be
83:24 - connected to every actor that's in that
83:27 - movie so I need some way of setting
83:31 - edges so the edges for each node should
83:33 - be a list of other nodes that it's
83:35 - connected to so let me see if I can do
83:38 - this so the if I'm thinking about this
83:40 - codewise what I want to do here is for
83:43 - every actor and let me call this movie
83:47 - node I want to say something like movie
83:51 - node. connect
83:53 - actor node so I want to connect the
83:56 - movie to the actor and the other thing I
83:57 - want to do though this is a question
83:59 - that comes up with these kind of
84:00 - algorithms is the graph does the graph
84:03 - only go in One Direction or do things go
84:04 - in two directions so in this case I want
84:06 - to be able to go in either direction so
84:08 - let's let's we need to add this connect
84:10 - function or add edge maybe I should just
84:11 - call this add edge because I have ADD
84:13 - node now I have an add edge function
84:15 - okay here in
84:17 - node so now I want to add to the node
84:20 - object a function called
84:23 - add edge and it gets another a I'll call
84:27 - it a neighbor and then I just want to
84:29 - say this. edges. push neighbor simple as
84:33 - that all I need to do push the neighbor
84:36 - now hold on a second we've got a problem
84:40 - I just realized we have a problem the
84:43 - whole point of this is that actors can
84:45 - be in multiple
84:47 - movies right so here I am always always
84:51 - always making
84:52 - a new actor node now I know I can't have
84:56 - two instances of the same movie in this
84:59 - data set but I could have two instances
85:01 - of the same actor so whenever I go
85:03 - through the cast I need to figure out if
85:06 - the node already exists if the node
85:08 - already exists I shouldn't make a new
85:10 - node so I want to
85:12 - say if graph contains
85:17 - actor
85:19 - then actor node
85:23 - so I want to say VAR uh actor node I'm
85:26 - just going to set an actor node to null
85:28 - for a second if graph contains the actor
85:32 - then I want to say graph. getet node
85:36 - actor or something you know what I could
85:39 - do is I could say VAR actor node equals
85:43 - graph get the actor get node so I could
85:46 - just have a function that says get node
85:49 - and that function will return null if
85:51 - the actor is not in there there so then
85:53 - I could say if actor
85:55 - node equals
85:57 - null
86:00 - then I make a new actor node so what do
86:06 - I need to add here I need to add a get
86:08 - node function into the graph so let me
86:10 - add that so I want to say
86:12 - graph.
86:14 - prototype. getet node equals function
86:18 - and what do I want to do I want to look
86:20 - up and so this is like a uh
86:23 - actor so I want to say uh what do I want
86:27 - to say VAR
86:29 - n
86:30 - equals uh this. graph look up by the
86:36 - actor and then return
86:40 - n so this is going to get undefined
86:43 - right it's not going to actually return
86:44 - null so I should actually say in the
86:47 - main program if actor node equals
86:49 - undefined oh I'm so exhausted this this
86:52 - is exhausting are you still watching
86:53 - this video I need to take a nap but I've
86:56 - got to finish this it's so uh it's
86:58 - getting late okay maybe you just woke up
87:00 - and you're having a nice little sip of
87:01 - tea and watching this video okay um so I
87:05 - think this is going to work I might have
87:06 - made a
87:07 - mistake but let's take a
87:10 - look refresh H okay node.js
87:14 - line8 there is an error oh this should
87:17 - say equals function and just had the
87:19 - wrong
87:20 - syntax so now let's look at this the gra
87:24 - the nodes so let's look at any given
87:25 - node uh this is Mickey roor edges it
87:29 - doesn't have any edges so what did I
87:30 - forget the edges have to go both
87:33 - ways so this. edges. push neighbor and
87:38 - neighbor. edges. push
87:42 - this uh both directions so let's try
87:47 - that again refresh let's look at a
87:50 - arbitrary node Kevin B bacon uh which is
87:53 - connected to ah what did I just do like
87:57 - uh Kevin Bacon H which is connected to
88:00 - flatliners foot loose and Diner and if I
88:03 - look at zero which is Diner it's
88:05 - connected to uh all these other actors
88:08 - which are also connected to other things
88:09 - so I think this is right I'm pretty sure
88:11 - I have the data
88:14 - correct anybody want to say otherwise
88:17 - because then I'm gonna move on to part
88:19 - two so now we could actually do the
88:21 - algorithm right so this it would be
88:23 - really nice if I had a visual example
88:25 - right so one of the this I will link to
88:28 - this code example as well which is using
88:30 - a force directed graph to like arrange
88:32 - it and as an exercise you could even
88:34 - stop here and just try to like visualize
88:37 - this graph not the easiest problem I
88:38 - would love to see your solution um but
88:41 - I'm going to stop and what I'm going to
88:43 - do in the next video is I'm going to
88:44 - implement the breath first search
88:46 - algorithm and when I come back at the
88:48 - beginning of it if I found any mistakes
88:50 - I'll let you know
88:53 - okay
88:57 - 530
88:59 - um yeah I Mark in the chat writes can
89:02 - you visualize this I'm have a hard time
89:03 - understanding this setup it's a very
89:05 - good
89:09 - point it's not the best
89:13 - um so what I'm going to do
89:17 - um uh K weekman asked there's no
89:20 - inherent set data structure is
89:23 - there um set node type you know what I
89:27 - don't actually need to set the node type
89:28 - to movie or
89:30 - actor um
89:32 - um yeah no I'm not I'm kind of just if
89:35 - you if we look when I get to this it's
89:38 - going to say empty
89:43 - set wait what's the empty
89:46 - set oh that's for
89:48 - searched so I'm doing it differently so
89:51 - I just need need create a Q and The Root
89:57 - okay um so I'm doing it a little bit
90:00 - differently but um yeah these are the
90:02 - data structures I'm using okay sorry I'm
90:04 - fading here but I'm going to I'm going
90:06 - to push through and finish this but it
90:08 - was a really good point in the chat
90:09 - about visualizing this maybe I'll
90:12 - start by drawing this out a bit more
90:18 - okay okay nobody sees any mistakes here
90:21 - let's just double check
90:24 - this this is a terrible way of looking
90:26 - at it but I'm pretty sure it's
90:31 - right if I look at this particular actor
90:34 - it's these edges which is eat pre love
90:38 - which is connected to all these other
90:40 - actors and I don't see any there's no
90:46 - duplicate there shouldn't be any
90:47 - duplicates so I think this is
90:50 - good
90:53 - okay s is a tab with visited nodes yeah
90:56 - yeah yeah yeah yeah um okay why don't I
91:00 - make games anymore I don't know I wish I
91:03 - was doing
91:04 - that I agreed to teach this class on
91:07 - artificial intelligence and machine
91:08 - learning and I don't know I thought the
91:10 - search algorithms would work and really
91:12 - I just want to take a nap and read some
91:15 - nice
91:16 - fiction but this is what I'm doing I'm
91:19 - definitely with you there though okay
91:23 - so let's come back
91:25 - here
91:28 - and
91:32 - um okay so
91:35 - graph okay I'm gonna I'm GNA try to
91:38 - finish this
91:43 - now
91:44 - uh uh okay uh here we go let
91:49 - me I know that wasn't a half half an
91:52 - hour because the cameras didn't go off
91:53 - so that's
92:03 - good okay take a nap poor Dan I don't
92:06 - mean for all your sympathy here I just
92:09 - it's thank you though that's nice of
92:11 - you okay uh all right let's go
92:16 - here know what to start
92:19 - with Okay um
92:33 - okay so I'm back here for part two of
92:35 - this breath first search algorithm
92:39 - thingy so um you know somebody in the
92:41 - chat had asked um this is really hard to
92:44 - follow you know could you visualize this
92:46 - it's a very very good point and
92:47 - unfortunately the way that I'm building
92:48 - this example right now um I'm not going
92:51 - to sort of build in a lot of graphics
92:52 - features that's a great exercise for you
92:54 - to do and I do have other examples that
92:56 - do have those features that you could
92:58 - that I'll link to you could look at but
92:59 - I think that we could at the very
93:02 - least I could draw it for you what this
93:04 - is looking like so um without using
93:08 - actual movie names or actor names I'm
93:10 - just going to I'm going to say like
93:12 - movie one movie Two movie three I'm
93:17 - going to have you know actor one actor 2
93:20 - I should probably use real names to make
93:21 - this make more sense actor three actor
93:23 - four actor five so maybe these actors
93:26 - were in this movie uh these actors were
93:30 - in this movie uh oops the actors don't
93:33 - have connections to each other and this
93:36 - right so the actors just it's only in
93:38 - this particular example the actors only
93:40 - have connections to each other through
93:41 - movies and somebody else in the chat
93:43 - mentioned you should distinguish between
93:44 - movie and actor nodes and that could be
93:46 - an interesting thing to work with and
93:48 - you know depending on how you're
93:49 - visualizing it you probably would want
93:50 - to do that for for just finding the
93:51 - short shortest path I don't actually
93:52 - need to do that so let's say that actor
93:55 - one uh let's say actor four is actually
93:58 - Kevin
93:59 - Bacon so what the depth sorry not depth
94:04 - breath first search algorithm looks to
94:06 - do is I want to pick any actor and find
94:09 - the shortest route to get to Kevin Bacon
94:12 - and this we can see here is actor 2 was
94:15 - in Movie 2 with Kevin Bacon actor 3 was
94:18 - in Movie 2 with Kevin Bacon or this is
94:20 - the same distance Act five was in Movie
94:22 - 3 with Kevin Bacon and actor one was in
94:24 - movie one with actor 3 who was in movie
94:27 - two with Kevin Bacon so this there's not
94:30 - a lot of possibilities here but you
94:32 - could imagine a much more complex
94:34 - interconnected Network and if you think
94:36 - about actors and all the movies they've
94:37 - been in in full cast list it's massive
94:40 - okay so
94:43 - now let's come back here okay so now I
94:48 - need to do is actually implement the
94:49 - breath first search algorithm now before
94:51 - I do that I need to I need to
94:55 - um I need to add a beginning and end so
94:58 - I need somewhere to start and somewhere
94:59 - I want to finish so always the graph
95:01 - always wants to end I'm going to just
95:03 - I'm G to have a graph have this do end
95:07 - and um this. start so I'm going to give
95:11 - the graph object an end in a start
95:13 - node um and what I'm going to do is uh
95:18 - in after I've added all the data
95:23 - I mean I'm just going to hard code this
95:25 - in which is a little bit
95:26 - silly um and I'm going to say uh graph.
95:31 - set
95:32 - and I'll just do it this way set end
95:35 - Kevin
95:36 - Bacon and graph. set start uh let's just
95:41 - pick some actor from
95:43 - whoops let's pick some actor from that
95:46 - list wasn't Mickey roor in that list
95:48 - let's see if I get this right uh so
95:50 - Mickey work to Kevin Bacon okay uh so
95:54 - now I'm going to go and in gra I need to
95:57 - add those functions set
96:00 - start set start equals
96:04 - function and I'm going to say you know
96:07 - actor and then I'm going
96:11 - to say set
96:15 - end and then this. start equals this.
96:20 - graph now if actor doesn't exist we're
96:22 - going to have a problem but I'm just
96:24 - going to uh assume that actor does exist
96:26 - so I want to pull I need to get the
96:29 - node um I need I mean maybe I could just
96:31 - keep it as a string but I want to get
96:32 - the node the particular node that is the
96:34 - start associated with that actor and the
96:36 - particular node that is the end
96:37 - associate with that actor okay we've got
96:39 - that should have put that in the last
96:41 - video but we've got that now we are
96:44 - ready for breath first search so I'm
96:46 - going to use I'm just going to pull I I
96:48 - referenced before this book which is a
96:50 - really great visual explanation uh
96:52 - grocking algorithms of this particular
96:54 - algorithm but I'm just going to try to
96:57 - write the algorithm from um the
97:00 - Wikipedia page but you know I could also
97:02 - just explain it to you so what we're
97:04 - going to do if we're starting with an
97:05 - actor is we're just going to say breath
97:07 - for search means check every single edge
97:10 - connected to this actor is that Kevin
97:12 - Bacon no is that Kevin Bacon no is that
97:14 - Kevin Bacon nope so all of these that
97:17 - aren't Kevin Bacon should get added to
97:19 - something called a q
97:22 - a q is a kind of data structure
97:25 - that's first in first out so it's like
97:30 - lining up to buy tickets if you got in
97:32 - line first you get to buy the first
97:33 - ticket so if this is not Kevin Bacon it
97:37 - gets added to the
97:38 - Q then M2 is not Kevin Bacon it gets
97:41 - added to the Q then M3 is not Kevin
97:43 - Bacon it gets added to the Q now when
97:46 - I'm done checking all those edges I go
97:48 - to the Q and take the first thing off
97:50 - which is M1 and check all its edges well
97:53 - this I don't have to check that anymore
97:54 - because it's been checked so I got to
97:56 - Mark things checked when I check them
97:57 - and then I got to check its edges nope
98:00 - so that's not it so this goes off the Q
98:02 - now this is next A1 actually then gets
98:05 - added to the Q as well uh then M2 I'm
98:09 - going to check all his edges that's not
98:11 - Kevin Bacon it's been checked it's been
98:12 - checked oh that's Kevin Bacon I'm done
98:16 - so now I'm done and all the while I was
98:18 - doing this by the way I was keeping
98:19 - track that M2 came
98:21 - from uh actor 3 and then Kevin Bacon
98:24 - came from actor 4 so that I will then be
98:26 - able to back up and create a list a path
98:29 - of those nodes so the idea is check
98:31 - everything nearest and add that to a
98:33 - queue and when you're done checking
98:34 - everything nearest just keep pulling
98:35 - from the queue to check what's nearest
98:37 - to that and keep going until you find
98:38 - Kevin Bacon okay so hopefully that helps
98:41 - you understand it a little bit and now
98:43 - we're gonna now okay so empty set s the
98:47 - way that this is described as Wikipedia
98:49 - on Wikipedia is to keep a separate
98:51 - list or set of things that have already
98:54 - been searched but I'm going to do this a
98:55 - little bit differently um in my node
98:58 - object I have a buan to keep track of
99:00 - whether it's been searched or not so I
99:02 - could just flag it when it's been
99:03 - searched I don't need a separate data
99:04 - structure for that but I KN do need a q
99:07 - now here's the thing I could actually
99:09 - like Implement a que and have like in a
99:12 - fancy way but it's this I'm in
99:14 - JavaScript it's late I'm tired I'm just
99:16 - going to use an array because an array
99:18 - is something I can add to and I can pull
99:19 - off from the beginning so what I'm going
99:21 - to do is I'm going to call it a q I'm
99:23 - going to say right down here VAR Q
99:27 - equals n array okay V Q equals an
99:31 - array and then what I'm going to do is
99:34 - let's just keep following this algorithm
99:36 - uh okay so the root we got to start with
99:37 - the root so the root is the start so um
99:42 - VAR start this is a little silly that
99:44 - this is kind of redundant but graph. get
99:47 - so I should have this
99:49 - return the value of r
99:51 - start VAR end so that way I can have a
99:54 - reference to it out here so I'm going to
99:56 - go to the graph and have it also return
99:59 - this. start so I can have the node
100:02 - return this.
100:04 - end and now what I'm going to do is
100:08 - let's now I've got the start let's look
100:10 - back at the algorithm the starts parent
100:13 - is already null add root to S so Roots
100:16 - now going to be searched start. searched
100:20 - equals true that's the first thing so I
100:22 - don't need to add it to the set I'm just
100:23 - going to flag it as
100:25 - searched oh then I need to add it to the
100:28 - que q. push the start so uh now I'm
100:33 - adding it to the Q okay what else do I
100:35 - need to do now I'm going to keep going
100:38 - as long as the Q has stuff to look at
100:41 - now it is possible that there is no
100:43 - connection so you saw that in my in the
100:45 - quick demonstration in the previous
100:46 - video there could be Infinity there's no
100:48 - connection but as long as Q is is not
100:51 - empty which I could say is while q.
100:54 - length is greater than zero sure there's
100:56 - a more elegant way to say that DQ which
100:59 - means get the first thing off the Q I
101:02 - think in JavaScript that is
101:06 - uh I'm let just call this current um
101:10 - equals a q. shift I think it's shift is
101:14 - that right hopefully that's right
101:15 - somebody correct me if that's wrong um
101:18 - okay now if current is the goal
101:21 - we're done
101:24 - okay if current equals
101:29 - end uh console
101:34 - console.log
101:37 - found uh and then I'm going to say
101:39 - current.
101:42 - value so just to make sure this works
101:46 - I'm going to set temporarily the
101:49 - start also to Kevin
101:55 - Bacon because now when I run it it
101:58 - should set it to search put it in the
102:01 - queue get the first thing off the queue
102:03 - and check to see if it's the end I don't
102:05 - know what this is here okay so let's run
102:09 - that found Kevin Bacon so things are
102:11 - working if the start and the end are
102:13 - equal we're
102:15 - good what's
102:17 - next I want to check uh if it's not I
102:20 - want check all of the edges so let's go
102:24 - through and say um and so I probably
102:27 - want to say break here too break is a
102:28 - way of getting out of the loop once
102:30 - you're
102:31 - done so I want to say uh VAR edges
102:34 - equals current. edges then I want to
102:38 - Loop through all of the edges right I
102:40 - want to check them
102:44 - all and I want to say first of all I
102:46 - need to check was edges so let's um
102:50 - let's call this like
102:52 - neighbor equals edges index I so if
102:57 - neighbor. searched already skip it skip
103:02 - so maybe I go to say if it's not been
103:03 - searched what does it say here if it's
103:06 - not in s means it's not searched now
103:08 - it's being
103:10 - searched so I'm going to say neighbor
103:12 - because I'm searching it now do searched
103:15 - equals true I'm checking it then I also
103:18 - want to set its parent like where did I
103:20 - just come from from neighbor. parent
103:23 - equals current so where did it just come
103:26 - from and then I want to add it to the Q
103:29 - on Q so what's that q. push push adds it
103:34 - to the
103:34 - end neighbor so we can see how this
103:37 - algorithm is working it's really very
103:40 - simple it seems so compx such a fancy
103:42 - name but we're just saying start with
103:45 - the beginning look at everything next to
103:46 - it did you find it nope look at
103:49 - everything next to that did you find it
103:51 - nope look at everything next to that did
103:52 - you find it nope and all the while make
103:54 - sure you don't double check anything
103:56 - you've already checked before that's
103:57 - really all that's going on
103:59 - here okay now let's
104:03 - see um what am I missing what else
104:08 - nothing H let's run this so let's let's
104:12 - run
104:14 - this uh here we go hey found Kevin
104:18 - Bacon now let's change the start to
104:22 - Mickey
104:23 - Rook now whenever I do these kind of
104:26 - things I often end up with an infinite
104:27 - Loop and the browser crashes let's see
104:29 - if I made a mistake
104:30 - somewhere uh and let's see nope found
104:33 - Kevin Bacon now is this really working
104:36 - let's look at um so let's every time we
104:40 - check a
104:43 - node let's console log it and let's say
104:46 - console log.
104:48 - value so we're check Mickey roor who's
104:52 - in diner and then we checked a bunch of
104:54 - actors oh and found Kevin Bacon and
104:55 - we're done great let's use a different
104:58 - actor that is kind of further down here
105:01 - these are actors that are in movies
105:03 - without Uh Kevin Bacon so let's pick uh
105:05 - Rachel
105:07 - McAdams uh wow I think we might be done
105:11 - uh I I'm gonna add some more stuff to
105:12 - this in a second but let's uh add uh set
105:16 - start Rachel McAdams we're not actually
105:18 - done because ah I copy pasted the wrong
105:20 - thing sorry
105:21 - Rachel McAdams sketch r ah why is this
105:24 - not working why can I not copy paste ah
105:27 - oh my goodness I copy pasted the
105:29 - file this is falling everything's
105:31 - falling apart help me Rachel McAdams and
105:35 - Mickey roor and LEF
105:37 - shriber okay Rachel M there we go okay
105:40 - let's do this again we can see what's
105:42 - going on Rachel M in Spotlight with all
105:45 - these actors oh my goodness which was
105:47 - eay love all these actors all these
105:48 - actors all found Kevin Bacon so I can't
105:50 - really follow this this is why I need to
105:52 - now go backwards through the parents so
105:55 - when I'm done so let's take this is not
105:56 - helping us follow this but when we're
105:59 - done here we should be able to say I'm
106:02 - going to create a variable called path
106:05 - which is an array and I want to put the
106:07 - full path in that
106:09 - array and I'm going to say um so uh
106:15 - path. push uh graph. end right
106:21 - uh or no end that's where we're
106:23 - starting end and then I want to say next
106:27 - equals end because I want to do a loop
106:30 - to just go from next equals end.
106:33 - parent and I want to say
106:37 - while while next does not equal to null
106:41 - I'll explain this again in a second
106:44 - while next does not equal to null path.
106:47 - push next and then next equals next.
106:51 - parent okay let's I think this is
106:54 - right right what I want to
106:56 - do is I want to start with the end and
107:01 - then go backwards go to the end's parent
107:03 - then that one's parent then that one's
107:04 - parent and that's one's parent to trace
107:06 - back to find that path that was found so
107:09 - that's what this particular algorithm is
107:11 - doing we start with the end then we get
107:15 - the parent of the end and as long as it
107:17 - exists put it in the path and then we
107:19 - get the parent of that and as long as it
107:21 - exists put in the path and keep doing
107:22 - till eventually something has no parent
107:23 - anymore because it's where we started so
107:26 - the start has no parent so now I should
107:28 - be able to
107:30 - say um and I'm going to actually uh
107:32 - create a Dom element I should be able to
107:34 - iterate over the path do I have to
107:37 - iterate the bath path
107:39 - backwards because what's yeah the last
107:41 - thing is the beginning so I'm going to
107:43 - say path. length I mean I could do this
107:45 - a number of different ways minus one
107:48 - I goes all the way down down to zero and
107:52 - I'm going to say uh node equals path
107:55 - index I then I'm going to say I'm going
107:57 - to say uh VAR uh text equals an empty
108:02 - string and I'm going to say uh
108:06 - text plus
108:09 - equals um n.v Value Plus uh like an
108:14 - arrow I should get the right arrow key
108:16 - and then I'm going to say create P text
108:19 - so what I want to do here is just the
108:21 - reason why I'm doing this instead of
108:22 - console loging create p is a P5 function
108:25 - that will create a paragraph element in
108:26 - the browser so I can see it written out
108:28 - there so let's see if this helps so we
108:31 - can see there we go Rachel McAdams was
108:34 - in Spotlight with Billy crudup who's an
108:36 - Eat Pray Love with Julia Roberts who is
108:37 - in flatliners with Kevin Bacon now I
108:39 - should also have something that I don't
108:41 - need that last
108:43 - Arrow um so if I is not equal to
108:48 - zero then also add
108:51 - the arrow did me just correct
108:54 - that
108:57 - uh and there we go now let's just
109:00 - quickly while we're here we're almost
109:03 - done H people are asking the chat
109:05 - wouldn't this be a good time to talk
109:06 - about Big O notation definitely I got to
109:08 - make a video about that sometime and
109:10 - it'll come before this one maybe you
109:12 - already watched it because you're in the
109:13 - future okay very quickly just to make
109:16 - this a little bit more interesting uh
109:18 - let me do something I'm going to use a
109:20 - P5 function oh this is going to make it
109:22 - harder though I should really just stop
109:24 - I'm going to do this anyway I'm going to
109:26 - say VAR dropdown equals create
109:30 - select um so uh what the create select
109:33 - function
109:35 - does is it makes a little drop- down uh
109:38 - menu and uh there's some silly uh CSS
109:40 - styling here which um is causing it all
109:44 - to have no like margins which is
109:46 - unnecessary okay so it makes a little uh
109:49 - drop down
109:52 - uh but I need to put stuff in the drop
109:53 - down I want to have I want to be able to
109:54 - select any actor and see the results so
109:58 - now what I'm going to
109:59 - do is while I'm going through these
110:01 - actors this is where I get every actor
110:04 - name as long as it's a new actor I'm
110:07 - going to say dropd down. option actor
110:12 - watch this very simple in P5 create a
110:14 - Dom element and add some options to it
110:16 - number of other ways you could do this
110:17 - I'm adding this part kind of quickly now
110:19 - you can see I have little menu where I
110:21 - can pick other any actor now I need to
110:24 - be able to know when do I pick a new
110:25 - actor when I pick a new
110:30 - actor when I pick a new actor it's an
110:33 - event on this Dom element so uh the
110:36 - event this is a P5 function I'm going to
110:38 - call
110:39 - changed so anytime uh I'm going to say
110:42 - run I'm just going to say BFS so anytime
110:46 - the drop down change just run breath
110:48 - first search and I'm going going to now
110:51 - go down and take everything
110:55 - here that's the entire breath first
110:58 - search algorithm and put that in its own
111:02 - function function
111:04 - BFS there we go so now just to see if
111:09 - this works I'm going to
111:13 - um what we're going to do is we're going
111:14 - to run the page again I'm going to
111:16 - change the actor and it Rand breath
111:19 - first search but it ran it with Rachel
111:20 - McAdams so the point is what I want is
111:23 - to have it run with Paul Riser so where
111:27 - do I um so this dropdown needs to be a
111:31 - global
111:35 - variable and the drop down needs to be a
111:37 - global variable I've got a lot of messy
111:40 - code here but someday we'll clean that
111:42 - up a little bit and I'm going to change
111:45 - the start set start
111:48 - to drop down
111:50 - value so the actor's name for the start
111:52 - will actually come from there now let's
111:54 - do this
111:56 - again I'm going to pick Paul Riser again
111:59 - Paul Riser was the diner with Kevin
112:00 - Bacon now let's pick somebody else ah
112:02 - this not gonna work Paul Riser it didn't
112:05 - work so first of all that's why didn't
112:08 - it work well a couple things remember
112:10 - one it's weird that it's starting with
112:11 - Paul Riser again I don't know what the
112:14 - bug is specifically but there's a major
112:15 - problem see this node
112:18 - object remember I was setting parents
112:21 - and searched I got to start over all the
112:24 - searched has to be set to false and all
112:26 - the parents have to be set to null so I
112:28 - need a function in
112:30 - graph which essentially is like a reset
112:34 - function and what I'm going to do in
112:36 - this reset function I knew I needed that
112:38 - nodes array for some reason I'm just
112:40 - going to go through all the nodes their
112:42 - edges all stay the same and I'm going to
112:45 - say uh nodes indexi do searched equals
112:51 - false and nodes index i. search oh no no
112:55 - parent equal you still with me are you
112:57 - with me I'm barely with myself here but
113:01 - it's about to be the weekend for me okay
113:02 - no okay here we go Steve Gutenberg
113:05 - Mickey roor was in diner with Kevin
113:06 - Bacon uh Lin Marta was
113:11 - in sad trombone okay what did I
113:14 - miss uh
113:16 - okay what did I miss um path. Joo oh I
113:21 - could use join that's right uh what did
113:24 - I
113:25 - miss oh I didn't call reset I wrote the
113:28 - reset function but I didn't call it oh
113:31 - classic horrible error here graph. reset
113:34 - oh my
113:38 - God coding coding okay here we
113:41 - go Steve Gutenberg Oh Ellen barin oh
113:45 - nodes is not defined uh this dot this
113:49 - Dot this dot it's got to be that right
113:51 - the this Dot Song never
113:53 - forget the this Dot
113:58 - Song never forget the this Dot Song okay
114:02 - Ellen barin was in diner with Kevin
114:05 - Bacon and Lin Marta was in foot loose
114:07 - with Kevin Bacon and Mark Ruffalo was in
114:10 - Spotlight with Billy cotop who was in E
114:11 - pray love with Julia Roberts who is in
114:13 - flatliners with Kevin
114:16 - [Music]
114:18 - Bacon okay so this is breath first
114:21 - search in two videos if you watch this
114:23 - the whole way through that is amazing to
114:25 - me thank you very much # Six Degrees of
114:28 - Kevin Bacon breath first search
114:30 - algorithm whatever you know there's a
114:32 - lot of details about algorithms things
114:34 - I'm sure I've missed here you thinking
114:36 - about the interactivity you could
114:38 - visualize this so many wonderful
114:40 - possibilities um I am going to be done
114:42 - for today and um I will see you in a
114:46 - future video sometime uh as always the
114:48 - code for this particular challenge is in
114:51 - the description as well as links to
114:52 - other videos and things that I've
114:53 - referenced if anything's missing just
114:55 - let me know in the comments thanks for
114:57 - watching all right
115:01 - everybody oh my
115:05 - God unfortunately I don't think I can
115:08 - manage right now to do the um homework
115:12 - assignment video but the good news is
115:14 - any of you who are watching this live if
115:16 - you want the homework assignment to sort
115:18 - of think about it it's just on the um I
115:20 - mean one thing I should say is this um
115:23 - this website is for the actual NYU
115:26 - course but you're all welcome to read
115:28 - and and participate and make poll
115:29 - requests but this Wiki that has the
115:31 - homework assignment um with some ideas
115:34 - um um um here so let me um it's just for
115:37 - students here at NYU but you can share
115:39 - your stuff with me in the comments and
115:40 - that sort of thing so these are my um
115:42 - exercise ideas which is really just you
115:45 - know if you look through a bunch of the
115:46 - things that I've done already um um you
115:49 - can think about I have this animal
115:50 - guessing game which uses kind of like a
115:52 - binary tree like thing to to do a 20
115:54 - questions like thing read use a bigger
115:57 - data set with this six Dees of Kevin
115:59 - Bacon um your own data set visualize it
116:02 - these are the kind of things I'm looking
116:03 - for people to try to do what's your own
116:04 - cre you make a piece of art with this um
116:07 - and then other examples that I have that
116:09 - I want to just quickly show you that are
116:11 - in the repository so there's the binary
116:14 - tree stuff which is uh which I have
116:16 - other videos about which don't have as
116:18 - nice of a visualization in them but you
116:19 - can see this one um this is uh the same
116:23 - exact um breath first search but using
116:25 - Force directed
116:27 - graph um I have a Dyas algorithm example
116:30 - that's just straight from the book but
116:31 - it just console logs the answer so I
116:34 - would love to make a video about that at
116:35 - some point um this I have a whole
116:37 - separate vid set of videos about which
116:39 - is depth first search to whoops to uh
116:43 - make a maze and then as you guys might
116:47 - have seen I have some videos on AAR to
116:49 - kind of like pathfind within that within
116:52 - and then I made this as I made an
116:54 - example of
116:57 - um I made an example of actually AAR
117:00 - with the maze generation so solving for
117:01 - the path so these are things you can
117:03 - play around with and I have other videos
117:04 - that connect to that and then oh I have
117:07 - uh the traveling um salesperson problem
117:10 - so this is just doing all possibilities
117:12 - with five nodes and I'll come back to
117:14 - that next time that I'm
117:16 - around okay um so that's my quick if
117:18 - people like work with this stuff and
117:20 - make stuff share it with me on Twitter
117:21 - share it in the comments um that sort of
117:24 - thing um Okay I uh phone is ringing
117:29 - which means it's time for me to go um I
117:31 - I it's six o'clock I'm a half an hour
117:33 - late which I said I need to leave by
117:35 - 5:30 so I'm looking to see if there's
117:37 - any am I ever going to code straight
117:38 - Java I do Java in processing and uh but
117:42 - and I will I do have on my list to do
117:43 - some uh Java in Eclipse uh videos that
117:47 - use processing libraries but I just
117:48 - haven't had the time to get to it yeah
117:50 - uh okay um thank you everybody for
117:54 - sticking around for this session I'm
117:56 - done I hope that I will be back next
117:58 - Friday like I said the next month um is
118:02 - going to be kind of rough and so I
118:05 - expect to miss a couple weeks here and
118:07 - there but I am determined you know I
118:09 - would say if I'm giving myself a
118:11 - personal deadline that I feel is
118:13 - realistic I'm quite determined by um you
118:16 - know by the sort of middle of the summer
118:18 - to have gotten through all this stuff uh
118:21 - and certainly I'm going to be preparing
118:23 - and working and researching all this
118:24 - stuff whether the videos happen we'll
118:27 - see for those of you who are supporting
118:28 - me on patreon I thank you if I miss
118:31 - weeks and you want to like turn off your
118:34 - patreon that's completely understandable
118:37 - um uh it's it's nice to have but I don't
118:39 - want anyone to ever feel obligated to it
118:41 - um and that sort of thing so okay um I
118:43 - will see you guys all later I'm going to
118:45 - turn off this live stream good night
118:47 - good weekend and keep in touch okay okay
118:52 - goodbye people are requesting the choo
118:54 - choo sound I'm going to read you since I
118:57 - didn't do any random
118:59 - numbers like Sesame Street this episode
119:03 - was brought to you by the letter or the
119:04 - number this coding Train episode was
119:06 - brought to you by the
119:08 - number 965877502
119:20 - by

Cleaned transcript:

can you hear me right let's try to pick the time of the week when I am most exhausted and that's when I'll live stream on YouTube that's what time it is right now this I I have to say that you know I if you'll just bear if you will bear with me and allow me to have a little uh therapy with you um few dozen people who happen to be watching this right now uh I would say that this week and through the next six or seven or eight weeks somewhere to the middle of May are are probably the busiest weeks for me of the whole year so um I'm here and I'll hope probably be here next Friday but I'm only I uh but and I'll probably be here the Friday after that but we'll see I might miss a Friday but I'm I'm looking forward to Springtime end of May June and hopefully then you'll be seeing a lot more of me so if I seem a little wobbly a little tired if you don't see me on a Friday know that everything is fine but I I do have um this like a job thing that I do and it's a it's a busy time of year here at New York University okay so uh first of all I have a very important announcement to make I have some new uh new hydration technology that I have been working on all week asking for recommendations typing in credit card information onto Amazon actually you don't have to type in the credit card information it remembers it but I present to you a purple water bottle okay this the nice thing about this is a little less dangerous I don't know if you remember I had a pitcher one week um so this is good I'm going to step off stage I'm off stage right now it's not really a stage and drink some water okay now um I have to get moving here because um I've got to leave in about an hour and a half um and you know first of all I think it's one hour is a pretty good amount of time for a weekly live stream I would say um I like to do two hours if I can two and a half hours even sometimes been having a um a thing where like the last few weeks I did like five or six hours each Friday so um I audio up maybe turn your audio up because I see lots of green I see people asking if the stream is crashed everything looks like it's working for me so um I don't have a lot of time today but I have two um I'm going to try to um over the next several weeks get started with content more quickly uh I still do would like to do something where I share work from the community but I'm going to uh put that aside just for today hopefully next week I'll have more time to do that um and um I'm going to try to pick essentially one project to do each week I don't know what what I mean by project but one thing to focus on as opposed to trying to do four or five things and then and then I will um hopefully once things calm down when my schedule opens up a bit more in May and June maybe I'll get some do some more other stuff and extra live streams and all sorts of that stuff hopefully I'll have some more guests if you didn't watch uh Saran yarak was on this week talking about uh how to give a good Tech talk um sum it up in one sentence like about it as a story not Tech techn you know I I I deal with this all the time here I guess with uh listening to people present about their work here at NYU and you know some one thing that I think is a pitfall is you get up you want to talk about your project and you say okay so I made this thing uh I did it with illustrator uh and then with a pen and then uh purple and pink colors and that this doesn't work the wallpaper here's my website I made it with jQuery but then I had to uh use a node Sear server because I wanted websockets cu the thing about websockets is they can talk real time in two directions and instead of this is my story this is who I am this is why I care about this idea and this is the thing that I want to communicate to you today so anyway I'm off topic uh toot toot is absolutely right okay uh Dan in the chat asks oh hey princi hi Dan my name is also Dan how long are you live tonight let's say 530 p.m. that is about 1 hour and 25 minutes from now uh okay but as all of you know there will there are always um after this is over an archive is always uploaded and um shorter edited versions of the stuff that I do in this one and a half uh hour time period are also uh put together and uploaded separately because why not just have redundant content more views um so what did I want to say ah I in fact last week I've been behind on so many things that I haven't even released two videos two edited versions of and one of them is not edited at all because it was my pong coding challenge which took me a little over one hour um I see people everybody's having sort of issues but um book of random numbers please I don't have my unfortunately I don't have my um sound effects today actually while I get set up here for a second I'm going to let you guys in on something I was noticing I know that everyone is a big fan of the always I don't know that everyone is a big fan some people enjoy this Dot Song little known to you there is a second uh this Dot Song and actually this I I don't know if this was actually the first this Dot Song but F Looper also made the pear and noise song that I often play by F Looper F Looper also made a version of the this song song which I will now play for you while I um oh sorry it's not at the beginning yep as always I always forg I get set up here that song for me okay firework firework is not defined okay line six as always I always forget the this dot thisor firework is not defined okay line as I always forget to this do this do this do this dotor is noted okay line it's funny cuz I can't really hear it is it is it too loud I made it a little louder but maybe I shouldn't have I always dot this dot do this dot dot do this do song never forget this do somebody compose that song for me all right I think I'm ready so uh it's too quiet if anything okay so it's not too loud louder a little quiet okay um so what am I going to do today in this short amount of time that I have I would like to do two things one is as a lot of you have requested and know I am teaching a course here at ITP at NYU uh called intelligence and learning so I'm going to do a what I hope is just a 15 translate it to three hours a 15 to 20 minute introduction to the uh that course what topics I'm going to cover in that course what are my goals and sort of themes behind that course what are some of the references that I'm using for the course and then um a so so I'm going to do that and then after that I am going to do um a quick introduction to week one of the course which involves uh search graph systems and search algorithms and then I've already made videos on the the next videos that would go in the sequence would be binary tree dep uh maze generation AAR traveling salesperson those videos then I'll do um and then I want to do one new uh video One new tutorial for this material on breath first search and then if I have time I'll do a quick five minute like here's some ideas for an exercise that you could do for next week um so um that's my plan let me come over got it sound is off on the Whiteboard thank you guys for letting me know that I'm going to fix that uh hold on a second I have to switch to the I have to switch to the Whiteboard um it's going to take me it's G to take me 30 seconds to fix this the funny thing is I bet you I'll keep playing no let me just fix this quickly uh test test okay so you should have uh audio for me now in the Whiteboard shot yes okay and then still have audio here okay uh okay um that should be good now I'm afraid to take the top off of this because I'm going to knock it over but it'll be a little bit easier to drink if I did okay let's see okay so I've got to get moving here um I'm sure the cameras are about to shut off not I'm not about to okay so this is the syllabus for the course let me let me give this a little bit let me do this I think um okay I think what I want to do is is this example available I want to discuss this okay and then I also want to have this oh no no no wrong thing sorry everybody almost ready here it's not really readable is it and I wish um well it will be what it will be I will zoom in on things things so that's going to have to do and same for here okay um okay uh this is the real live stream experience okay uh everything the audio is working fine now correct I'm seeing old messages I think um okay so what gonna do was gonna cover Big O notation I don't think I'm going to get to that today that's okay though uh yeah we're not doing all this today but this is this is my schedule for the next seven weeks um I'll probably be slower to get to it on the YouTube channel so maybe you might consider this the schedule over the next 10 weeks or so but um I'm going to do my best but this is my schedule in preparing materials and information so if you want to follow along with this GitHub repository there'll be stuff each week um okay so boy one of these days you know what I was gonna do I had this idea that I would prepare slides for this quick introduction and then I'd be organized and I'd have like a plan for it oh well next time you you know those courses that are on corsera they're very organized I highly recommend them okay um so here we're gonna do I'm gonna get started okay I just press some buttons on the cameras to see if that happens okay I don't know what the best thing I guess I'm Gonna Leave This right here okay here we go I'm going to get started uh somebody hey so those of you in the um chat if anybody wants to do me uh some a help oh this is not going well if anybody wants to help me out a little bit one thing you could do is kind of just keep track of the time it's something that I don't do a very good job of I prefer for my videos to be between 20 and 30 minutes long and then when I have a longer topic to break them into parts so you know it's hard a little hard to keep track because sometimes I'll pause and then I'll edit out the pause but you know you might have a sense of that um if anybody wants to um kind of send me send me a little nudge hey it's been 20 minutes uh let me know if only I had a JavaScript timer yeah if only I had a timer or some sort of computing device that could keep track of the time I'm I'm just I'm not okay here we go 415 I do not need to look at my phone too many random unnecessary alerts here we go hello welcome to the first video in a new course I don't know series set of videos that I am here me Dan shiffman presenting to you on my YouTube channel the coding Trin okay so what is this uh you might be aware you might remember me from such videos as the nature of code um I have a playlist of videos most of these videos were recorded probably several years ago um they cover um I'm going to zoom in here all of these topics one through eight and I I have a book which covers all of these topics one through eight and I've been teaching a class at uh about this stuff for a bunch of years many years almost like seven or eight years in fact and so this year I am trying something new with this course and therefore also on this YouTube channel now what is this new thing that I'm trying what always happens when I teach this course is if it's a full semester course at a like kind of University like place um there are where am I over here there are these 10 topics oh you can't see the bottom let's see see um I'm not zoomed properly okay there we go there are these 10 topics and what happens is you know this here the first half of it is really about physics simulation animation moving things on the screen um and all the kind of stuff you could do with that and by the time we get to this people are on their way and they've been overloaded they're trying to learn all this stuff that what's here in 9 and 10 chapters 9 and 10 gets lost so what I'm doing this year is and starting right now is I would like to take what's in this book here 9 and 10 chapters 9 and 10 and expand the material out over to something that would be several you know many sessions about seven five or six or seven or eight I have no idea some amount of sessions of content where I take a closer look at topics related to and here's the title of this course intelligence and learning so I'm going to come over here and I'm going to write that down this is like what people who are teachers I've been watching some like open course Weare uh you know you have a big chalkboard and then you just like make a point and you write it down so I'm going to do that uh intelligence and learning now I am specific first of all well there's I'm specifically not calling this a course like artificial intelligence nor am I calling this a course like introduction to machine learning nor am I saying it's a course called say introduction to deep learning so what's one reason why I'm not calling it that well first of all I'm afraid of all these things so I feel like if I call it this is a course on artificial intelligence or machine learning that's a little bit scary to me um you know but also I'm I want to make the point in this course and and and that about let's ask let let me ask you a question for a second what's the difference between a computer that is intelligent or a computer that appears intelligent or has a piece of soft let's say piece of software what's the difference between a piece of software that is intelligent versus a piece of software that emanate that that gives off that has the illusion of intelligence I don't know and so what this course to me is about is creating systems examples interactivity projects CRA strange useless experiments that relate to the concept of my computer program oh crap let's let's uh the other computer does I like I didn't like what I was saying and um I'm just I'm taking a break for a second all right I'm going to come back to that Mato is going to do some magic editing I'm going to go from after I'm afraid of all this stuff other reason that I want to call this course just intelligence and learning is as I've always done with my materials I'm not necessarily looking to um create a perfect scientific simulation of the the um give me one more chance you're not over here everybody bear with me give me one more chance this is what happens Friday at four o'clock I'm gonna get through this this is the kind of stuff I really struggle with i' much rather just be coding right now but I'm gonna the thing is I'm GNA move more quickly the answer is to move more quickly thank you thank you for your patient live audience um okay so the other reason why I want to call it intelligence and learning is I want to take the broadest approach possible so you watching this course whether it's you implement the latest and greatest perfect machine learning neural network convolutional recurrent magical system thing that does something you read about in some academic paper or you make some crazy project where it seems like the computer is playing this goofy game with you and it and how could it possibly be doing that so there's a lot of space in between and for me I want to just really take a broad approach to and this not just look at only you know neural networks and machine learning and not just look at only these Topics in artificial intelligence and and okay so first of let's I'm kind of blending all these terms let's try to at least Define them so uh let's I saw this chart in a book somewhere so I'm going to recreate it so artificial intelligence is a topic so what is artificial intelligence well I actually just uh uh recently watched uh a lecture by a professor at MIT Patrick Winston Patrick Winston I think says at the opening of the lecture uh models someone will correct me if I'm wrong for thinking perception and action so this is a very broad term so let's think about this for a second let me go back to some of my other examples going to come over here and I'm going to open up where if if we were following along with the sort of pre if we stopped here at week six or session six or chapter six whatever you want to call it and I ran this flocking simulation I could ask the question is this artificial intelligence wait nobody can answer this question I want to hear from you so I I want to I'm I'm asking this question that but what's interesting whether or not you want to say yes or no I'm going to go back to here for a second models for thinking perception and action so one thing if you remember if you look at steering behaviors and steering behaviors pioneered by Craig Reynolds uh uh what is it um a uh action steering Locomotion so I've really been focusing on steering how do you calculate a steering Force how do you do the physics for that and how do you actually make that triangle move from one pixel to another uh and steering in Locomotion kind of cover all those pieces action this is a place where well what is the what are the goals in the flocking system the goals are stay with your neighbors but don't crash into your neighbors and also stay stay in proximity of your neighbors and also move in the same direction as your neighbors but don't crash into your neighbors and other kind of um action things that you might select is follow this thing or chase this thing or run away from this thing or try to get through this doorway the fastest as you can so what's interesting here is seeing this link is what are models for thinking and perception that might lead to action to govern the types of an animated systems that you might create so this to me is the link here whether it's enough to say I am going to kind of Define the rules almost known as a like a rulebased system feature engineering so to speak like I don't need a learning based system I'm going to define the rules of how all these things should behave but they're going to appear intelligent versus something like a learning system which has to learn over time so machine learning being something that uh crosses over with artificial intelligence you know I think of machine learning as uh something that you have data and you make meaning from that data so how do you how do you and and the you know two there's there's more to it than this but you know one of the most uh classic applications of a machine Learning System is classifying data classification so here's a bunch of pictures which ones are cats and which ones are dogs and there's more you know the the other type of system that you uh classicc of machine learning is regression which instead of categorizing into a discrete set of labels you know cats or dogs you might say you know here's all of these um you you want to arrive at a more continuous result so here's all these properties of a house how many bedrooms where is it located how many bathrooms and can the m can the system take that data and determine predict a price so um these are two classic uh tasks in machine learning now what's in the news and what's all the rage what's everybody working with these days uh are neural networks so you know a popular and powerful and exciting so much new research in this right now recently of creating machine Learning Systems to do these tasks with neural networks however in this course I want to look at other systems that do the same thing that are simpler um that might not be as powerful but might have opportunities for Creative possibilities but also if you can use the simpler system for the same result it's going to make it a little easier to perhaps dive into what in my mind might be the most difficult I might cancel this part actually last time I mentioned machine learning a fire alarm went off which saved me nothing happened this time but um so so we'll see so now so these are these are areas where I want to just look at and cover in this course um now what's this thing down here under DL this is deep learning and you know what I'm going to put deep learning in here so as I just mentioned uh one technique for performing these machine learning tasks is using something called an artificial neural network so an artificial neural network is a system where the data flows in as inputs and there is there are some set of connected neurons that that we so it's a how am I doing on time everybody the birds have no feelings I'm looking at the chat uh okay um let me come back let me let me erase this for a second let me do that again for a second CU I lost my train of thought uh 430 okay got to keep moving um okay so in the case of an artificial neural network that data that you're trying to classify enters as input to something called a neuron and then passes through a network of neurons to have some sort of output and I spelled that wrong but close enough cat dog price of a price of a house that sort of thing now an artificial neural network is a system and I'm going to get more into this in another video that's specifically just about this so I kind of want to just actually kind of move ahead and skip over this but the reason why I was mentioning this is there's a quite there's a long history of this and the very first discovery of an artificial neural network and we're I'm going to build one of these in a future coding challenge is called a perceptron which is a neural it's it's almost wrong to call it a network because it's a single neuron so a model for a single neuron an artificial neural network being a model for many interconnected neurons maybe it's a fully connected Network maybe it's like a partially connected network but the reason why so much that there has been a revolution in research and applications uh neural networks when they were first discovered this idea of a perceptron couldn't solve very simple problems so there's a famous paper the perceptron paper Mulla pittz I believe I'm getting that right so me the chat will confirm I'll try to have a link to that information in this video's description um and there were various steps along the way but there was a long time before anyone was really able to do a lot of work with uh neural networks and so deep learning refers to the idea of a neural network which has a lot of depth to it so in between the inputs and the outputs output and these could be both be plural or singular there are many many many layers it is deep very deep um so you know you can imagine all of these connections and so the idea here and and and you know the training systems and how it works and how the Learning System oh we got to get into all that but that's not for this video right here I got got off got off on this tangent um about neural networks so this is these are the different aspects of the pieces of this course that I would like to look at now let me come back over here um okay I'm coming back over here uh anybody um um oh do someone someone sent me a an amount of time so far I'm about 10 minutes a few minutes ago great uh okay that's good um okay so anybody want to fact check my Mulla pittz reference uh perceptron Maka and perceptron models Mulla pittz model so I must be right okay good uh okay all right um okay so history of the perceptron I'm going to do like stuff about the history and all that when I actually do neural networks I think so I'm coming back over here what was oh this would be open and this was open okay and I probably zoomed in on this okay so let me come back okay so let me take a look at the uh list of topics I'm going to skip uh week one for a second oop so this is the course if you want this URL will be in the video's description um this is the uh the uh syllabus for the course it's kind of my working document boy do I accept any and all contributions and help so feel free to um uh file GitHub issues and pull requests and things and if I come down here to the oh and I'm kind of in a place where you can't really see it I'm going to uh skip I'm skip over week one and so here are my topics so I'm going to go through these kind of quickly um again this is very survey oriented and Bo and I'm missing a ton of stuff you know so this is just a selection but I'm also still figuring this out so next week I'm going to uh talk about genetic algorithms which is an evolutionary based approach to uh solving problems with which is a way of solving problems in software uh taking inspiration from evolutionary processes in nature so I already have a bunch of videos on that and I'll do some more content about that as well and that will be in next week um oh this should say classification and regression um and recently I learned um that the term regression comes from uh regression to the mean and this is like a 19th century uh concept but anyway uh I'll talk about where I'm getting all my in I just read a bunch of books in the last week I got to thank all these people that I'm you know probably messing up all the stuff that I read um but uh I want to get interested in those I want to get started with those tasks without using uh neural networkbased models so something called K nearest neighbor uh one of the things I would like to do is build a simple uh movie recommendation system with K nearest neighbor is an idea if you have an idea for a data set or an interesting creative application for K nearest neighbor that's very simple with a simple data set that I can work with I would love that suggestion uh and also linear regression so I want to do um I want to do an example of the sort of simplest form of regression uh and we could think of that in um uh uh with an input and and and having an output um that's a continuous floating point value so um I want to look at that and when we'll do that we're going to get all this stuff like oh there's a learning rate what's this gradient descent thing and all this stuff so hopefully kind of defining some of the terminology and understanding those pieces as we look at k k nearest neighbor and linear regression will um will give us a leg up for the next week when we look at neural networks so I'm would like to build some simple neural network examples from scratch uh and when I all of this stuff I'm going to do so far probably in processing or JavaScript using the p5js library some combination of those things so I definitely want to build a perceptron you know if I'm feeling ambitious we might look at what happens if instead of a perceptron we have a multilayered network and uh you know all of this you can think of the neural network as like you're tuning all of these knobs so that the output gives you something that's correct you know you there's a whole training process that we're going to have to discuss called supervised learning supervised learning unsup supervised learning reinforcement learning interesting topics that I'm going to get into um but uh with one of the most complex aspects of neural networks is what do you do how do you train all that stuff that's in the middle and so there's a concept known as back back propagation that I that's like almost almost like querian for me but I'm not running out of the room just yet um and once I get to there I want to investigate some other platform so I might if I'm I might all this is I might but my plan and hope is to look a bit at um once we built some simple examples from scratch to look at other tools uh um for some more sophisticated applications like tensorflow uh and then be able to get into certain specific kinds of neural networks that can do different kinds of tasks what is a convolution network what is a recurrent Network and what is reinforcement learning so those are some aspects of things and you know I don't plan on building those larger more sophisticated systems from scratch but if we can build some basic ones understand how everything works then my thinking is then we'll have a leg up to using Frameworks and tools to do some of the other stuff um again all this is subject to change one of the things I mentioned this last week that I'm hoping to do because even though I might move to some something like tensorflow and python to demonstrate some examples in some of these other areas I would love to work on a simple web server that runs tensorflow in the background that processing or P5 could talk to there are also examples of some of these written in JavaScript wellknown examples by Andre karpathy the recurrent rn. JS and convet con convet I to pronounce that. JS so uh people are telling me time's up I told people I'm doing this live but you might be watching this as an archive that I wanted to keep this to 20 minutes uh sound is low okay hold on time out okay hold on let's people a lot of people are complaining about the sound fortunately for everybody I have a dial here that I can just turn it up is that better is that better for everybody and is there any peing or Distortion let me know uh sound is fine okay well now it's up a little bit I guess I maybe I shouldn't have changed it for the um okay everyone saying sound is fine I turned it up a little bit okay I forgot what was saying um okay so I think I'm I'm wrapping up then okay so that's my introduction uh I you know here's the thing I'm learning this stuff so if you want to go watch a course from somebody who really knows this stuff I will uh link to lots of resources and that's what I meant to uh what I wanted to um I wanted to mention some resources that I'm using ah very important that I will include in this video's description um and I think here under the Wiki under related projects and resources um here are um here are some resources that I want to specifically mention so one is a website called machine learning for artists it's got videos ex uh video tutorial video lectures uh examples written descriptions lots of wonderful thing by an artist and researcher named Jean kogan absolute expert wonderful in this field uh I watched a lot of Rebecca fbr's machine learning for musicians and artists videos Rebecca febr uh has made something absolutely Wonder ful called wekinator which is a tool that allows you to send data it does machine learning stuff and it sends it back out all with something called osc open Sound control I would love to do some video tutorials on that or have some guest tutorials from Rebecca febr um there's also a Caden course on a creative applications with tensorflow that I tend to look at and get some resources from um I also want to mention um the let's see what else ah uh Andrew Glassner is writing a book about machine learning and deep learning it is not out yet but he was generous enough to let me look at some preview drafts so uh thank you very much follow at Andrew Glassner on Twitter uh if you want to find out about his upcoming uh book that's coming out it's been really helpful to read and I'm sure there are um uh yeah also uh oh I uh grocking deep learning uh is a book from Manning and grocking algorithms these are books that I've mentioned that I have kind of have been looking as well as a make your own neural network which is a a book that walks you through programming your own neural Network in Python now people in the chat are giving me lots of suggestions for other uh deep learning and machine learning and AI books I don't have my props I have these old uh textbooks I'll bring those another time on artificial intelligence which are great um but the other thing I would recommend is uh these are three comp compilations of resources so this is one that's put together by this community this is awesome machine learning there's a lot of awesome blank lists um that I've uh are put together let me let me see who puts this together just cuz I forgot uh from Joseph MTI on uh GitHub and uh also uh this is a a list of resources from memo Atkin okay so uh please I'm accepting all suggestions and help and examples and ideas I look forward to all of the uh hopefully not so angry letters I will receive as I screw everything up over the next six or seven weeks we're going to um uh you know I have I guess what I didn't really say is I have you know to wrap up here what I have is these two chapters in nature of code which deal with genetic algorithms and the basics of neural networks that's where I've kind of left my knowledge behind and I'm embarking on this journey here on YouTube to try to expand past what's in there and we will see how it goes so thanks for joining me and I look forward to seeing you in some future videos okay uh great stay hydrated all right so that was my introduction I um I there was so many things that I wanted to talk about and cover but I think it was good good that I didn't uh okay I'm okay on time it's 440 so now what I want to do is introduce the first week oh I'm there already okay um okay yeah see I had all these other notes about these are my notes of things that I want to talk about in my introduction that I didn't really uh remember oh I wanted to talk this is so important well what are we going to do another time I will maybe I'll do a separate video about this and we'll come back to it as we get further along somebody remind me about this um I don't think I need to reinsert this into that introduction but I think it's incredibly important when studying and working with these topics to ask to be critical and ask questions if anything we're doing is actually a good idea um David ha who's a researcher at Google I believe our Google creative lab who makes lots of great machine learning projects tweeted one point I thought what happened to making the world a better place see I'm doing this now it'll just be in um you know what let's do an addendum what do you think Mata you said it was under 20 minutes I'm going to do a quick addendum I'm GNA do a quick addendum okay oh I'm back I do this a lot I'm back because I forgot that I had this page of notes instead I just rambled and you know it's got a few more links about thinking about the definition of artificial intelligence and machine learning I'm still working on stuff you'll find this also linked but you know something really important here that I wanted to just mention was uh you know it's it's very important when studying and I'm really just going to be looking at the algorithms and making stuff and trying to be creative and wacka doodling my way through this if that's a verb but it is really important for you the world of people who are going to to be using these tools using these algorithms making projects working for companies to be critical and think about what you're doing and whether it's even a good idea and is it hurting anybody is it helping anybody and so um there are some uh you know some uh uh one thing I'll just mention here is there's an organization called AI now which I just learned about recently um I thought I just clicked on them yep over here uh which is a initiative to research the social impacts of artificial intelligence to ensure a more Equitable future um so I encourage you to check out there's going to be a Symposium in July uh check out about this I also just love this uh quote from uh hard Maru on Twitter uh which is um who makes uh uh David Hoff from Google makes a lot of wonderful I have a recurrent neural there's a wonderful recurrent neural network handwriting with p5js example uh um that uh um you can find I'll try to link to that as well but you know whatever happened to making the world a better place so you know when you talk about what is your goal with building an AI system with using machine learning why are you doing it and so I'll leave you with that are you making the world a better place I hope that you are and come along uh I'll see you in the next video okay you can decide whether to include that or not uh we can decide that later but that was something that I wanted to say here at least in this longer live stream it will be here in this video okay so now what I want to do uh is uh yeah I talked about this I didn't go over my sort of glossery of terms but that's okay um we'll come back to those and now here we go so I'm going to do I'm going to now okay okay okay so here we go I'm looking at the chat um okay so now this video so that was an introduction to the whole course this video which I hope will just be 5 to 10 minutes if not even shorter than that uh will be just an introduction to to the topics for week one and one of the things my dream has always been that I just make all these coding challenges and random videos but they're modular pieces that could be assembled into a course so I'm kind of trying to do that to some extent here like most of the stuff that's in this week one are video or topics I've already made videos about traveling salesperson AAR uh binary search tree so you know the only thing that I'm going to have time for today really is H the camera went off is breath first search but but um but as I go on and make more videos someday I'll do a video on Big O notation I don't think I'll get to it today I'll insert it back into this course so in the introduction I want to sort of first lay out what the topic is but also explain to people that these aren't necessarily sequenced but they're if you're watching in this playlist they are okay so sorry I'm going to say everything twice but I have to like sort of figure it out but okay um here we go let's uh let's begin so I'm going to leave this here let me actually so I will oh yeah okay oh this is a mistake I'm not logged I always forget that I'm not logged in at GitHub I need to fix this bottom link um wait I can do ah never mind it's fine I got to time is of the essence okay okay so maybe you watched the first the introduction to this uh larger playlist the intelligence and learning set of videos but now this video is an introduction to just the first session and the first session is about search and graph systems now why why why should that be the first session I don't know might be a bad idea first of all I wanted a warmup so I wanted something to kind of get us thinking about algorithms and data and things that seem intelligent or that solve problems in an intelligent way so um and also there are some very you know in some ways common unsolved problems of computer science like the traveling salesperson problem which is one of the topics of this week's that could could use a a new newly invented machine Learning System to solve it so anyway I'm off I'm off track so where where does this fit in so if you go and grab I I wish I had my props can we get some like post production here I'm going to hold up uh the um um what what's the book that I always use hold on time out um it's the um it's the norvig artificial intelligence um I just want to get the name of it correct artificial intelligence a modern approach by Russell and norvig okay that's what I was meing uh good luck editing this um okay um I'm GNA like pretend I'm just GNA like pretend I'm doing that again which is so ridiculous I'm do it anyway oh God I can't believe I do these live um you know oh I don't have my Pro if I had my book uh artificial intelligence the the uh modern approach the norvig Russell book yes I know hopefully I got that right um you know you would see a lot of I don't have my pen anymore ah continuity error um you would notice um that uh there's a lot of algorithms in these books about search because one of the first one of the kinds of problems that artificial intelligence algorithms that intelligent algorithms often need to solve in computer science in applications interactivity all the sort of kind of projects that you might be thinking of making is there's a problem I need to figure out the answer to this problem but there are so many possible answers I couldn't possibly check every single one and so search refers to the idea of searching for the answer in uh in a sea of possibilities now one way is to search every single possibility I mentioned the traveling salesperson problem let's talk about that for a second so I want to talk about uh search and graph systems this is kind of loosely the topic for right now there goes that eraser oh my God sorry everybody the eracer is okay everything's fine okay so um The Traveling salesperson problem says oh I have videos on this already so you can go watch those there are some number of cities and let's say there are five and that A salesperson needs to visit all of the cities in the shortest amount of time or taking with the shortest distance in any order starting with anyone ending with anyone so I might be able to eyeball this and say like okay well maybe that's the path it's probably not the path it's probably more like this whatever the point is we could have a computer algorithm figure this out let's just check every single possibility so first let's pick a city how many cities should I pick how many cities could I pick oh there's five of them okay now if I pick if there's five possibilities now once I picked one city how many possibilities are there left four and how many are left three and how many are left two how many left one so five factorial 20 60 120 120 possibilities for five cities and this is 5 factorial so this is the kind of problem that doesn't seem like such a big deal but if I just have 10 cities what's 10 factorial I don't know a computer could probably crunch through that number uh what about uh 50 cities okay that's a three with 64 zeros after it it's like a really really really big number I mean what's the what's the uh the um age of the known universe it's just 13.77 two billion years that other number is a lot more than that so and you know even if we could do like a million per second or something it's trust me we're going to have some issues and we'll talk about that so what are some solutions to this next week we're going to look at genetic algorithms which is a technique for trying to optimally find a solution and there are ways we might say something known as a greedy algorithm I went off put a tangent here we'll see if this is a problem maybe we'll edit this part out but a greedy algorithm which you might say like I don't know let's just pick a city and then pick the closest one then pick the closest one to that it's probably going to get us a pretty good answer even if it's not the exact optimal answer the point of what I'm saying is this is the application that I want to look at in this first week so the things that we need to learn about to be able to do things and work with problems like the traveling salesperson are number one graph systems and number two search algorithms okay now what is a graph system a graph system is something a system that is made up of two elements node and an edge we could name these other things but I'm going to call them nodes and edges um one of the next videos that you'll watch if you follow this playlist will be on something called binary search tree a binary tree is a graph system where every node is connected to two children nodes a left and a right and those are connected to two and those are connected to two etc etc etc so this is one example of a graph system so what you'll notice is we need some sort of data structure to store what are all the nodes and what are all the edges and this depends on the problem uh a common example also of a graph system similar to The Traveling salesperson problem is a subway map so let's say I need to get from this station to this station well there are all these other stations and routs and maybe they all are interconnected and there's many ways to get um this the subway map makes no sense there's many ways to get there but they all take different amounts of time like maybe I could go from here to here to here to here to here which is hold on let me re let me redraw this timeout editor okay I'm back I'm going to redraw that to make more sense let me just draw it like this so let's say we I wanted to get from here to here we could see like oh I'm going to get from in one step to here and it's going a two steps I want to take two trains to get to here but what if this train takes 60 Minutes this train takes 30 minutes and each one of these this takes five this takes two this takes one and this takes six so even though I have to go on 1 2 3 four trains this is optimal this will get me there faster this is known as a weighted graph system so the grph system is a bunch of nodes those nodes might have value so a binary search tree you can use to organize in alphabetical order a lot of words or numbers and other variety of things you could think of this but the edges here don't necessarily have weights at least in a standard binary tree but here they do now there's an algorithm for searching for that optimal path in this scenario in a weighted graph and it's called Uh dyra algorithm uh there's also another algorithm called uh AAR and etc etc so these are different examples binary search algorithm dyis algorithm a star and the one that I'm actually doing today but that doesn't really matter to you because you're going to watch these videos and sequence which I'll talk about in a second is something called breath first search so breath first search is a good algorithm for finding the shortest path between two nodes in a graph that aren't weighted so the shortest number of steps and I'll talk about the example that I'm going to use for that in a bit so this week is all about learning how to program a graph system and learning about different algorithms to efficiently solve a some type of problem associated with the graph system like the shortest path and you and so now now once you stop watching this video there's going to be a bunch of others in this playlist that I've made at all different times under different circumstances so this is experiment that I'm trying trying to put together a sequence course with all different coding challenges so you'll see there's a binary search tree example there will be a breath first search example there's uh there is no at the time of this recording but there might be at the time of you're watching a Dyas algorithm AAR so you'll see and I'm going to be filling stuff in as time goes on once you get to the end of all of those if you choose to watch them all I'll make another video that kind of wraps up and shows you a bunch of examples all together and um gives you some ideas for some homework exercises that you might do that you could share with me in the comments and that sort of thing uh if you want to participate in a slack Channel that I have that's going on for this course you can sign up at uh patreon.com coding train it's a crowdfunding thing if you want to participate in that slack Channel but you can also always hit me up on Twitter at shiffman and uh in the comments here which I do read okay so that's what's going to happen next and I will see you uh if you decide to come back in a wrapup video where I um kind of summarize a bunch of this stuff and give you some exercise ideas uh great so I'm going to go and actually record a video right now on breath first search uh but you might watch some of these other ones first thanks very much um let me see uh oops how was that um um people are talking about quality okay so how are we doing here how long was that would you say that was probably way too long okay um okay oh Big O notation is something I I didn't mention that's fine that's fine um 9 to 10 minutes wow all right I don't have my sound board today I forgot it sad okay so I got to get set up for this coding challenge oh I knew something I forgot to mention does anybody have any questions because one thing I should do is answer questions um I totally forgot to mention something important that's fine um that's fine because the thing that I want to mention ah shoot I'm going to mention it I'm GNA come I'm going to do my addendum we can if it makes no sense that's just it's what I always do uh week one read me here um okay I didn't really talk about pre prequisites it's a very hard word to say prerequisites pre prerequisites okay don't really talk about prerequisites PR pre prerequisits maage anyway um how many of you get that reference okay you want to see the mug oh I didn't bring the mug because I have my water bottle my purple clean canteen sponsored by would that be great if they would sponsor me I need a water I actually I make that joke but I really should get a water company or something to sponsor me product placement oh my god um you know what I think maybe I should just leave things as they are uh let me do a little maybe this will get added on maybe it won't but um this is important so I'm going to mention it here okay oops I'm always back at the end of my videos when you think they're over so one thing I want to mention that if you're about to watch some of these the rest of the videos in this sequence first of all you should um you know if you don't know uh JavaScript programming in p5js um you might want to take a look at some of my intro to p5js videos but more importantly than that if you have experience with um two things that I'm using in these videos is one is this uh concept of prototype as a as a a way of attaching methods to an object in JavaScript as well as this idea of an associative array or hash table and how that works in JavaScript so those two things might be videos that you might want to go and watch first before you start looking at some of the graph systems and different search algorithms okay just in case that matters to you you know um but you don't really have to know very much to follow this stuff along if you know a bit about programming you've tried you've watched some of my other videos hopefully you'll be okay if not let me know and I'll see what I can do okay see you soon okay uh okay so oh I ignore questions I'm trying to not ignore questions oh uni Kitty uni Kitty is in the chat um what sometimes might the YouTube the YouTube chat Scrolls pretty fast and it's very hard for me um to um watch it continuously but but I do um so sometimes if there's a really important Salient question and somebody who's in both YouTube and slack wants to paste it over I'm I'm uh that could be a way okay uh okay um so where how are we how are we on time five o'clock so this is the thing that I'm now hoping to do in a half an hour it'll take longer but we'll see okay um I got to get myself ready for this now so what I need is a couple things I need to get a data set um okay so first okay hold on ah uh I need to go here I'm so I'm I'm going to clone my repo and I'm going to run a server and now I'm going to get the browser back open oops wrong thing and uh oops I'm I really don't want to run the server from the desktop that's a little bit silly uh oh shoot um ah sorry everybody uh I will run it from here um sorry that I'm standing in front front of what I'm doing I'm just kind of getting some examples ready to go oops uh okay so this one we're going to need uh okay um thank you somebody contributed the force directed physics of this I should I want to make sure I thank this person let me look at poll requests I made a bunch of changes to it but the original implementation was done by so first of all thank you to there's a bunch of let me thank all these people uh Kay weekman who has added a lot of like links to references and other uh information that's been really super helpful um somebody uh contributed a better uh a better way of laying out the binary tree um example that I made which was like in my videos as well uh which is D um drw on GitHub and then our hacking contributed the force directed aspect of this particular um uh breath for a search example um um I want to also go to the Wikipedia page um because we can follow along with the algorithm here um okay and then what I also need is oh so now I need to make my own thing what I'm going to do let me just get any random example let me just grab this one I'm going to do this from scratch so I don't need any of this code I'm going to call this uh six degrees of bacon by bacon I mean Kevin Bacon uh and I'm going to open that in adom I'm going to delete all of the code I am going to make a new new file call it uh Kevin bacon. Json and then somewhere I made what I already did is I made a little data set uh here it is uh whoops let's do this I can put in here and there we go okay so now uh yeah okay so I'm just about ready to talk about uh can you code it in Java you know I'm going to do this one in um JavaScript in P5 because I wanted to just make it quickly interactive in the browser um but I'm not opposed to making a um oh the Chrome extension by the way that I use it's really really good for the I love this Json formatter Chrome extension got to get this Chrome extension you got to get this Chrome extension let me tell you uh Json former I believe it's this one first one that comes up in Google uh okay um but I I I'm happy to make processing versions or come back and do it again but I'm today is going to be um um okay okay um all right so this is okay so that I wanted to demonstrate just as a diagram uh okay so I don't know wait no what am I doing uh hold on everybody six degrees I'm going to just run this on a different port that'll do uh there we go and let me actually just change the title Six Degrees of Kevin Bacon uh so I can see that that's different and uh there we go okay um okay so I I want to reference this book which um this particular example comes from make this bigger um and then oops then I have this then I have the breath first search page so I think we are good I'm going to go erase the Whiteboard uh and so um I think much uh in terms of editing this I think this well it doesn't we have to decide this right now but I think this is a coding challenge I could make it one video where I explain the algorithm and another video where I code it but I kind of prefer to just do them both together so I think what I'll try to do is um uh there's a pole now going on by the way somebody pointed out that I can use straw pole for polls uh and Nadim in the chat asked will this video be available after the stream ends yes it will be um I think what I want to do is try to do this all at once like describe the problem and the algorithm and write the code all at the same time and if it is taking a while I might break it into two parts um this is probably I mean this is in theory much more complex than my pong example but I don't know why I think in my head this is like not going to take very long to program but we'll sort of see okay um so here we go me let me uh see if I can get these cameras to not go to sleep and where am I on this other camera uh okay uh here we go okay here we go everybody ready this is the last thing that I'm going to do today just so you guys know although I'll happy to if assuming this goes okay and it's not a total and I don't go running out of here with like my hair on fire or something um I will maybe try to answer a few questions boy I'm really exhausted but we're going to go through this anyway I had no tea I got no coffee but I do have my clean canteen of water okay here we go hello welcome to a coding challenge in this coding challenge I am going to uh what am I going to do ah breath first search what's breath first search why should you care first before I even get into it I would like to thank the author of this book grocking algorithms because this particular example um that's not the thing exactly the thing that I'm going to build but it's something that I did recently after reading this book this is a version this examp do I get my do over okay maybe I should use the whistle whistle is good luck okay hello welcome to a coding challenge uh this coding challenge I am going to um attempt something called breath first search now this is an example uh an implementation in p5js of breath first search it comes directly from this book grocking algorithms by a did y barava It's a Wonderful book I highly recommend it Buzz Marketing books here on my uh uh YouTube thing but I I do want to thank that's where I learned uh more recently about this algorithm and in practicing it implemented the example so what is breath first search so this video first of all is also placed in a series of videos about graph systems and search algorithms so you can in the video's description go back to some of the introduction videos that will lead you up to here but you can also just be here right now because I'm going to do everything from scratch with no knowledge but a graph system is a system of nodes and edges and you can see here are the nodes now the nodes all have a name these names are exactly the names in the grocking algorithms book um and they have edges so they have connections you can think of this as maybe a map of friends and their relationships um you could also turn this into more like a uh a maze type thing there's so many different ways you could sort of visualize this idea of a graph system and you'll see in some future videos that I actually made previously I do have some implementations of graph systems to create mazes but that aside what breath first search is designed to do is find the shortest path between two nodes and in something like this you know it's quite a simple problem to eyeball it we can see like if I want to get from you or me or whoever this person is to Tom I can see through CLA there are just two steps if I want to get to an this through Bob is faster than going through Alice Peggy Bob anou so how do you figure this out it's called the one algorithm for doing this is called breath first search and the reason why it's called breath first search rather than something else that you might have learn learned about or see in a future video called depth first search is breath first search by definition looks at all the nearest nodes first sees if it finds what it's looking for then looks at all the nearest ones to those first and sees what it looks at find as opposed to going all the way through I recently made a video video about binary trees and search trees that's more like depth first search because in the binary tree you just keep going to the left all the way to the bottom but here breath first we're looking at the nearest neighbors to start okay so what's the problem that I'm going to work with today um you may or may not be familiar with I don't know what this is a thought experiment a weird idea Six Degrees of Kevin Bacon there's actually a website it's called Oracle of bacon uh and I'm going to go to it right now and I don't know I needed uh I need an actor or I need an actor um let's pick um Amy Schumer and I'm G to pick a f link okay Amy Schumer has a Bacon number of two the shortest path between Amy Schumer and Kevin Bacon Amy Schumer was in the movie train wreck with Marissa to who's in the movie Crazy Stupid Love who with Kevin Bacon so this particular website has a massive database of movies casts and uses breath first search to find the shortest path between two actors and the the thought experiment here is that Kevin Bacon has just been in so many movies that um anyone could be within six degrees of Kevin Bacon I don't think I have an IMDb what's the what's the chance that Kevin Bacon to Daniel schiffman n infinity infinity we got to work on that come on help me out with this here I want my Kevin Bacon number to come on down okay um so how are we going to do this now I would love if anybody uh so this is an experiment you I'm I'm going to do this for you and hopefully teach you something about this and then maybe you could do something similar but with a different data set but I'm going to use just a toy data set essentially I manually created before coming here right now this data set so this data set has uh a few movies in it some of which have Kevin Bacon in it and some of which don't have Kevin Bacon it's organized in Json format which is Javascript object notation I do have some video tutorials about that if that's unfamiliar to you but I'll try to talk about that a little bit as I go through so let's let me move over to the Whiteboard to figure out how we're going to work this out so what I need to do in my program we're going to look at the algorithm itself on Wikipedia and start translating it into code but before we even do that what I need is I need a uh I need two I need a node I need a node object so in the end um there's going to be Kevin Bacon there's going to be some movie and there's going to be some other actor so and then there's lots of other stuff so in order to keep track of these what I need is I need some sort of object I'm going to call it a node and that object needs to have we call it a value or a label we're going to say a value it also needs each object needs to keep track of its edges which other uh nodes is it connected to so we need edges and this will be an array I don't like these dashes here they look like minus signs so I don't know dot that looks like something else but anyway these are this is the data now at its core this is very similar to my binary search tree that I mentioned which each node just has a left and a right but here each node could have just one connection zero connections 10 connections now there's other pieces of data that the node is going to need um and these are part of the breath first search algorithm I'm just going to mention them right now since while they're on on in my mind one is we need to know a Boolean how has it been checked searched or not like is this we're looking for Kevin Bacon is this node been checked already to see whether it's Kevin Bacon or not so this is going to be true or false this is going to be a Boolean we're also going to want eventually we're trying to solve for that path so we're going to have nodes keep track of their parent meaning as I'm checking and go moving about through this graph system I want to keep track of where I came from what was the previous node so that when I find Kevin Bacon I can back up and find that full path so I want to keep track of the parent as well okay so we know we need an object that stores all of this stuff so let me come back and start building that uh and I'm just going to put that so I have I have a a JavaScript project set up if I go to the browser and refresh the page there's nothing on the page but I'm going to start adding some code so um first thing I'm going to do is I'm going to write a Constructor function for a node object and I'm going to say I'm going to say this.v value equals something we needed that uh this. edges is an array uh this do searched is false it hasn't been searched and this. parent I'm going to just set it equal to null so I I want to be able to whenever I make a node with this Constructor function uh you know even though this by definition its parent would be undefined I'm going to explicitly said to no just so I'm kind of keeping track of that okay so this is pretty good this is pretty good okay first all this shouldn't be blank so maybe when I say new node I'm going to uh give it a value okay so this is good you know what I want to do I want to take this code and I want to put this in a file called I probably shouldn't call it node.js should I fine I'm gonna call it no DCH uh okay um okay uh so now sketch doesn't need so in P5 uh P5 has a setup function setup function is kind of like window page loaded type thing so that's going to be in sketch I'm also going to make here's the thing I'm going to make uh a graph object so I might have some redundancy or some things in my code hello I'm sort of out of the picture here that are a little bit unnecessary but what I would like to do with the graph object is I would like to store an array of all the nodes and then I would like of all the nodes and I probably need you know what the graph really should be as a data structure would be something like I could look up each node by its uh um I I'll call this a graph by its label by its value so uh this mode typically be something like you know a hash table where uh the the key might be Kevin Bacon and then I could uh with that key I would find out all its edges its parent all that other stuff so I want to be able to have I might not need this array because I can always the whole point of the algorithm is to Traverse the graph to find what I'm looking for but it might be useful to have this array if I want to visualize it or do something that I could just iterate over all the nodes really quickly you know there's going to be some done to the here but this is what I'm going to do so let's go and uh do that and uh I look forward to hearing from everybody later about how I'm not doing this correctly uh I'm going to say uh function graph graph this. nodes is an array and this. graph is an object uh an empty object so if you're going to use this object essentially as an associative array or a hash table and I have a video about that if you're interested okay now I need to read the data that's the first thing I need to do so I'm going to use P5 has a function called preload which I can use to uh I'm just going to say VAR data and then I'm going to say data equals and this is a P5 function called Low Json where I can just pass in the name of my Json file which is Kevin bacon. Json Kevin bacon. Jason Json Jason ah what is it somebody will tell me I'm pretty sure from the comments that it's GIF though and not GIF I've been told that many a time okay so now I'm just going to in setup I'm going to say no canvas P5 makes a canvas by default but I don't need it and then I'm going to console.log the data so let's just make sure the data is there and we can see there it is so the data came in I have an object which has an array called movies and each movie has a a a property called cast which is an array of all the actors so that's great so now what I need to do is I need to make a node for every movie and every actor okay so I want to be able to parse through and read this list so the object has movies so I'm going to say VAR movies equals data. movies then I'm going to Loop over all the movies in that Json file well I'm really not on to breath first search yet I'm just kind of gathering the data and I'm going to get um and what I'm going to do is I'm going to get the movie equals and what what what was the movie the movie has a cast and a title so the title is also a node so I want the movie movies indexi tile and cast equals movies indexi do cast so first I need to make a node Varn equals a new node movies indexi do tile okay so oh actually I don't need to say that again movie so I need to make a movie node and then what I want to do in the graph is I want to say oh I want to say I'm going to make a graph object and then right the graph object is the thing that's going to keep track of all the nodes so I need to say at the beginning graph equals new graph and then what I would like to do is add add this node to the graph so I'm want to take this node object which whose value is a particular movie and add it to the graph graph. add node n now can I just do this and get this to run Tada no graph is not defined okay so first of all I forgot a bunch of things one is I forgot I need to add a reference to my node object Javascript file and the graph object Javascript file so that's one problem number two add node is not a function this doesn't just exist it's a function that I need to write so I'm going to attach a method to the graph object using the Prototype I have a video about what prototype is if that's not familiar to you graph. prototype add node equals function okay now what comes in a node so what do I want to do okay so I need first a couple things one is I want to say this. node push. node so any node that comes in I want to put it in the array because I want to store all the nodes in an array which might be unnecessary but I'm doing that as a safety mechanism then I also want to have a lookup of the node based on the name so the movie name needs to be the key for that node object so this is going to look a little bit weird but I'm going to say uh title equals n. tile no do value right the node the title is stored in the node's value and then I'm going to say this do graph index that title equals that node so this is me uh putting this is node into array and node into you know it's not really a hash table because it's JavaScript but I'm thinking of it as like a hash table okay so that's good I've got the um I've got the what do I have the movies okay let's now add the actors what I'm going to do in this first part is I'm going to add all the data and get the graph set up and then I'll take a break and there'll be a second part of this video which will be the um actual implement the algorithm okay so now the cast for I need another loop I can't use I so I'm going to use J uh the cast. length uh j++ and now I need to make a node I'll call this uh you know actor equals cast I'm not call sorry cast index I yeah the strings are just there in the array let me just console log everything to make sure I'm getting all the uh that's that's correct what I'm thinking here okay so we can see that oops I used index I I'm like why is it Steve Gutenberg 14 times because this needs to be J okay so now okay so now you can see I'm that's me iterating over all the movies and the actors so now what I need to do is I need to say bar uh actor node equals a new node with that actor name and then graph add node actor node so just like for every movie add the movie then add all the actors wonderful okay so now let's also at the end of setup now let's say console.log graph just so we can look at what's in there and I don't need to console log the data anymore I feel confident about that so whoops and I don't need to console.log the actors anymore so let me go here so this is the graph you can see it's an array it's got an array of 74 nodes and it's also got a whole bunch of objects which all have the actor name or the movie name as the lookup so this is good I'm kind of almost there like what do I have so far I have a graph object which stores all of these nodes only it looks like this I haven't done any of the edges so what do I need to do every movie needs to be connected to every actor that's in that movie so I need some way of setting edges so the edges for each node should be a list of other nodes that it's connected to so let me see if I can do this so the if I'm thinking about this codewise what I want to do here is for every actor and let me call this movie node I want to say something like movie node. connect actor node so I want to connect the movie to the actor and the other thing I want to do though this is a question that comes up with these kind of algorithms is the graph does the graph only go in One Direction or do things go in two directions so in this case I want to be able to go in either direction so let's let's we need to add this connect function or add edge maybe I should just call this add edge because I have ADD node now I have an add edge function okay here in node so now I want to add to the node object a function called add edge and it gets another a I'll call it a neighbor and then I just want to say this. edges. push neighbor simple as that all I need to do push the neighbor now hold on a second we've got a problem I just realized we have a problem the whole point of this is that actors can be in multiple movies right so here I am always always always making a new actor node now I know I can't have two instances of the same movie in this data set but I could have two instances of the same actor so whenever I go through the cast I need to figure out if the node already exists if the node already exists I shouldn't make a new node so I want to say if graph contains actor then actor node so I want to say VAR uh actor node I'm just going to set an actor node to null for a second if graph contains the actor then I want to say graph. getet node actor or something you know what I could do is I could say VAR actor node equals graph get the actor get node so I could just have a function that says get node and that function will return null if the actor is not in there there so then I could say if actor node equals null then I make a new actor node so what do I need to add here I need to add a get node function into the graph so let me add that so I want to say graph. prototype. getet node equals function and what do I want to do I want to look up and so this is like a uh actor so I want to say uh what do I want to say VAR n equals uh this. graph look up by the actor and then return n so this is going to get undefined right it's not going to actually return null so I should actually say in the main program if actor node equals undefined oh I'm so exhausted this this is exhausting are you still watching this video I need to take a nap but I've got to finish this it's so uh it's getting late okay maybe you just woke up and you're having a nice little sip of tea and watching this video okay um so I think this is going to work I might have made a mistake but let's take a look refresh H okay node.js line8 there is an error oh this should say equals function and just had the wrong syntax so now let's look at this the gra the nodes so let's look at any given node uh this is Mickey roor edges it doesn't have any edges so what did I forget the edges have to go both ways so this. edges. push neighbor and neighbor. edges. push this uh both directions so let's try that again refresh let's look at a arbitrary node Kevin B bacon uh which is connected to ah what did I just do like uh Kevin Bacon H which is connected to flatliners foot loose and Diner and if I look at zero which is Diner it's connected to uh all these other actors which are also connected to other things so I think this is right I'm pretty sure I have the data correct anybody want to say otherwise because then I'm gonna move on to part two so now we could actually do the algorithm right so this it would be really nice if I had a visual example right so one of the this I will link to this code example as well which is using a force directed graph to like arrange it and as an exercise you could even stop here and just try to like visualize this graph not the easiest problem I would love to see your solution um but I'm going to stop and what I'm going to do in the next video is I'm going to implement the breath first search algorithm and when I come back at the beginning of it if I found any mistakes I'll let you know okay 530 um yeah I Mark in the chat writes can you visualize this I'm have a hard time understanding this setup it's a very good point it's not the best um so what I'm going to do um uh K weekman asked there's no inherent set data structure is there um set node type you know what I don't actually need to set the node type to movie or actor um um yeah no I'm not I'm kind of just if you if we look when I get to this it's going to say empty set wait what's the empty set oh that's for searched so I'm doing it differently so I just need need create a Q and The Root okay um so I'm doing it a little bit differently but um yeah these are the data structures I'm using okay sorry I'm fading here but I'm going to I'm going to push through and finish this but it was a really good point in the chat about visualizing this maybe I'll start by drawing this out a bit more okay okay nobody sees any mistakes here let's just double check this this is a terrible way of looking at it but I'm pretty sure it's right if I look at this particular actor it's these edges which is eat pre love which is connected to all these other actors and I don't see any there's no duplicate there shouldn't be any duplicates so I think this is good okay s is a tab with visited nodes yeah yeah yeah yeah yeah um okay why don't I make games anymore I don't know I wish I was doing that I agreed to teach this class on artificial intelligence and machine learning and I don't know I thought the search algorithms would work and really I just want to take a nap and read some nice fiction but this is what I'm doing I'm definitely with you there though okay so let's come back here and um okay so graph okay I'm gonna I'm GNA try to finish this now uh uh okay uh here we go let me I know that wasn't a half half an hour because the cameras didn't go off so that's good okay take a nap poor Dan I don't mean for all your sympathy here I just it's thank you though that's nice of you okay uh all right let's go here know what to start with Okay um okay so I'm back here for part two of this breath first search algorithm thingy so um you know somebody in the chat had asked um this is really hard to follow you know could you visualize this it's a very very good point and unfortunately the way that I'm building this example right now um I'm not going to sort of build in a lot of graphics features that's a great exercise for you to do and I do have other examples that do have those features that you could that I'll link to you could look at but I think that we could at the very least I could draw it for you what this is looking like so um without using actual movie names or actor names I'm just going to I'm going to say like movie one movie Two movie three I'm going to have you know actor one actor 2 I should probably use real names to make this make more sense actor three actor four actor five so maybe these actors were in this movie uh these actors were in this movie uh oops the actors don't have connections to each other and this right so the actors just it's only in this particular example the actors only have connections to each other through movies and somebody else in the chat mentioned you should distinguish between movie and actor nodes and that could be an interesting thing to work with and you know depending on how you're visualizing it you probably would want to do that for for just finding the short shortest path I don't actually need to do that so let's say that actor one uh let's say actor four is actually Kevin Bacon so what the depth sorry not depth breath first search algorithm looks to do is I want to pick any actor and find the shortest route to get to Kevin Bacon and this we can see here is actor 2 was in Movie 2 with Kevin Bacon actor 3 was in Movie 2 with Kevin Bacon or this is the same distance Act five was in Movie 3 with Kevin Bacon and actor one was in movie one with actor 3 who was in movie two with Kevin Bacon so this there's not a lot of possibilities here but you could imagine a much more complex interconnected Network and if you think about actors and all the movies they've been in in full cast list it's massive okay so now let's come back here okay so now I need to do is actually implement the breath first search algorithm now before I do that I need to I need to um I need to add a beginning and end so I need somewhere to start and somewhere I want to finish so always the graph always wants to end I'm going to just I'm G to have a graph have this do end and um this. start so I'm going to give the graph object an end in a start node um and what I'm going to do is uh in after I've added all the data I mean I'm just going to hard code this in which is a little bit silly um and I'm going to say uh graph. set and I'll just do it this way set end Kevin Bacon and graph. set start uh let's just pick some actor from whoops let's pick some actor from that list wasn't Mickey roor in that list let's see if I get this right uh so Mickey work to Kevin Bacon okay uh so now I'm going to go and in gra I need to add those functions set start set start equals function and I'm going to say you know actor and then I'm going to say set end and then this. start equals this. graph now if actor doesn't exist we're going to have a problem but I'm just going to uh assume that actor does exist so I want to pull I need to get the node um I need I mean maybe I could just keep it as a string but I want to get the node the particular node that is the start associated with that actor and the particular node that is the end associate with that actor okay we've got that should have put that in the last video but we've got that now we are ready for breath first search so I'm going to use I'm just going to pull I I referenced before this book which is a really great visual explanation uh grocking algorithms of this particular algorithm but I'm just going to try to write the algorithm from um the Wikipedia page but you know I could also just explain it to you so what we're going to do if we're starting with an actor is we're just going to say breath for search means check every single edge connected to this actor is that Kevin Bacon no is that Kevin Bacon no is that Kevin Bacon nope so all of these that aren't Kevin Bacon should get added to something called a q a q is a kind of data structure that's first in first out so it's like lining up to buy tickets if you got in line first you get to buy the first ticket so if this is not Kevin Bacon it gets added to the Q then M2 is not Kevin Bacon it gets added to the Q then M3 is not Kevin Bacon it gets added to the Q now when I'm done checking all those edges I go to the Q and take the first thing off which is M1 and check all its edges well this I don't have to check that anymore because it's been checked so I got to Mark things checked when I check them and then I got to check its edges nope so that's not it so this goes off the Q now this is next A1 actually then gets added to the Q as well uh then M2 I'm going to check all his edges that's not Kevin Bacon it's been checked it's been checked oh that's Kevin Bacon I'm done so now I'm done and all the while I was doing this by the way I was keeping track that M2 came from uh actor 3 and then Kevin Bacon came from actor 4 so that I will then be able to back up and create a list a path of those nodes so the idea is check everything nearest and add that to a queue and when you're done checking everything nearest just keep pulling from the queue to check what's nearest to that and keep going until you find Kevin Bacon okay so hopefully that helps you understand it a little bit and now we're gonna now okay so empty set s the way that this is described as Wikipedia on Wikipedia is to keep a separate list or set of things that have already been searched but I'm going to do this a little bit differently um in my node object I have a buan to keep track of whether it's been searched or not so I could just flag it when it's been searched I don't need a separate data structure for that but I KN do need a q now here's the thing I could actually like Implement a que and have like in a fancy way but it's this I'm in JavaScript it's late I'm tired I'm just going to use an array because an array is something I can add to and I can pull off from the beginning so what I'm going to do is I'm going to call it a q I'm going to say right down here VAR Q equals n array okay V Q equals an array and then what I'm going to do is let's just keep following this algorithm uh okay so the root we got to start with the root so the root is the start so um VAR start this is a little silly that this is kind of redundant but graph. get so I should have this return the value of r start VAR end so that way I can have a reference to it out here so I'm going to go to the graph and have it also return this. start so I can have the node return this. end and now what I'm going to do is let's now I've got the start let's look back at the algorithm the starts parent is already null add root to S so Roots now going to be searched start. searched equals true that's the first thing so I don't need to add it to the set I'm just going to flag it as searched oh then I need to add it to the que q. push the start so uh now I'm adding it to the Q okay what else do I need to do now I'm going to keep going as long as the Q has stuff to look at now it is possible that there is no connection so you saw that in my in the quick demonstration in the previous video there could be Infinity there's no connection but as long as Q is is not empty which I could say is while q. length is greater than zero sure there's a more elegant way to say that DQ which means get the first thing off the Q I think in JavaScript that is uh I'm let just call this current um equals a q. shift I think it's shift is that right hopefully that's right somebody correct me if that's wrong um okay now if current is the goal we're done okay if current equals end uh console console.log found uh and then I'm going to say current. value so just to make sure this works I'm going to set temporarily the start also to Kevin Bacon because now when I run it it should set it to search put it in the queue get the first thing off the queue and check to see if it's the end I don't know what this is here okay so let's run that found Kevin Bacon so things are working if the start and the end are equal we're good what's next I want to check uh if it's not I want check all of the edges so let's go through and say um and so I probably want to say break here too break is a way of getting out of the loop once you're done so I want to say uh VAR edges equals current. edges then I want to Loop through all of the edges right I want to check them all and I want to say first of all I need to check was edges so let's um let's call this like neighbor equals edges index I so if neighbor. searched already skip it skip so maybe I go to say if it's not been searched what does it say here if it's not in s means it's not searched now it's being searched so I'm going to say neighbor because I'm searching it now do searched equals true I'm checking it then I also want to set its parent like where did I just come from from neighbor. parent equals current so where did it just come from and then I want to add it to the Q on Q so what's that q. push push adds it to the end neighbor so we can see how this algorithm is working it's really very simple it seems so compx such a fancy name but we're just saying start with the beginning look at everything next to it did you find it nope look at everything next to that did you find it nope look at everything next to that did you find it nope and all the while make sure you don't double check anything you've already checked before that's really all that's going on here okay now let's see um what am I missing what else nothing H let's run this so let's let's run this uh here we go hey found Kevin Bacon now let's change the start to Mickey Rook now whenever I do these kind of things I often end up with an infinite Loop and the browser crashes let's see if I made a mistake somewhere uh and let's see nope found Kevin Bacon now is this really working let's look at um so let's every time we check a node let's console log it and let's say console log. value so we're check Mickey roor who's in diner and then we checked a bunch of actors oh and found Kevin Bacon and we're done great let's use a different actor that is kind of further down here these are actors that are in movies without Uh Kevin Bacon so let's pick uh Rachel McAdams uh wow I think we might be done uh I I'm gonna add some more stuff to this in a second but let's uh add uh set start Rachel McAdams we're not actually done because ah I copy pasted the wrong thing sorry Rachel McAdams sketch r ah why is this not working why can I not copy paste ah oh my goodness I copy pasted the file this is falling everything's falling apart help me Rachel McAdams and Mickey roor and LEF shriber okay Rachel M there we go okay let's do this again we can see what's going on Rachel M in Spotlight with all these actors oh my goodness which was eay love all these actors all these actors all found Kevin Bacon so I can't really follow this this is why I need to now go backwards through the parents so when I'm done so let's take this is not helping us follow this but when we're done here we should be able to say I'm going to create a variable called path which is an array and I want to put the full path in that array and I'm going to say um so uh path. push uh graph. end right uh or no end that's where we're starting end and then I want to say next equals end because I want to do a loop to just go from next equals end. parent and I want to say while while next does not equal to null I'll explain this again in a second while next does not equal to null path. push next and then next equals next. parent okay let's I think this is right right what I want to do is I want to start with the end and then go backwards go to the end's parent then that one's parent then that one's parent and that's one's parent to trace back to find that path that was found so that's what this particular algorithm is doing we start with the end then we get the parent of the end and as long as it exists put it in the path and then we get the parent of that and as long as it exists put in the path and keep doing till eventually something has no parent anymore because it's where we started so the start has no parent so now I should be able to say um and I'm going to actually uh create a Dom element I should be able to iterate over the path do I have to iterate the bath path backwards because what's yeah the last thing is the beginning so I'm going to say path. length I mean I could do this a number of different ways minus one I goes all the way down down to zero and I'm going to say uh node equals path index I then I'm going to say I'm going to say uh VAR uh text equals an empty string and I'm going to say uh text plus equals um n.v Value Plus uh like an arrow I should get the right arrow key and then I'm going to say create P text so what I want to do here is just the reason why I'm doing this instead of console loging create p is a P5 function that will create a paragraph element in the browser so I can see it written out there so let's see if this helps so we can see there we go Rachel McAdams was in Spotlight with Billy crudup who's an Eat Pray Love with Julia Roberts who is in flatliners with Kevin Bacon now I should also have something that I don't need that last Arrow um so if I is not equal to zero then also add the arrow did me just correct that uh and there we go now let's just quickly while we're here we're almost done H people are asking the chat wouldn't this be a good time to talk about Big O notation definitely I got to make a video about that sometime and it'll come before this one maybe you already watched it because you're in the future okay very quickly just to make this a little bit more interesting uh let me do something I'm going to use a P5 function oh this is going to make it harder though I should really just stop I'm going to do this anyway I'm going to say VAR dropdown equals create select um so uh what the create select function does is it makes a little drop down uh menu and uh there's some silly uh CSS styling here which um is causing it all to have no like margins which is unnecessary okay so it makes a little uh drop down uh but I need to put stuff in the drop down I want to have I want to be able to select any actor and see the results so now what I'm going to do is while I'm going through these actors this is where I get every actor name as long as it's a new actor I'm going to say dropd down. option actor watch this very simple in P5 create a Dom element and add some options to it number of other ways you could do this I'm adding this part kind of quickly now you can see I have little menu where I can pick other any actor now I need to be able to know when do I pick a new actor when I pick a new actor when I pick a new actor it's an event on this Dom element so uh the event this is a P5 function I'm going to call changed so anytime uh I'm going to say run I'm just going to say BFS so anytime the drop down change just run breath first search and I'm going going to now go down and take everything here that's the entire breath first search algorithm and put that in its own function function BFS there we go so now just to see if this works I'm going to um what we're going to do is we're going to run the page again I'm going to change the actor and it Rand breath first search but it ran it with Rachel McAdams so the point is what I want is to have it run with Paul Riser so where do I um so this dropdown needs to be a global variable and the drop down needs to be a global variable I've got a lot of messy code here but someday we'll clean that up a little bit and I'm going to change the start set start to drop down value so the actor's name for the start will actually come from there now let's do this again I'm going to pick Paul Riser again Paul Riser was the diner with Kevin Bacon now let's pick somebody else ah this not gonna work Paul Riser it didn't work so first of all that's why didn't it work well a couple things remember one it's weird that it's starting with Paul Riser again I don't know what the bug is specifically but there's a major problem see this node object remember I was setting parents and searched I got to start over all the searched has to be set to false and all the parents have to be set to null so I need a function in graph which essentially is like a reset function and what I'm going to do in this reset function I knew I needed that nodes array for some reason I'm just going to go through all the nodes their edges all stay the same and I'm going to say uh nodes indexi do searched equals false and nodes index i. search oh no no parent equal you still with me are you with me I'm barely with myself here but it's about to be the weekend for me okay no okay here we go Steve Gutenberg Mickey roor was in diner with Kevin Bacon uh Lin Marta was in sad trombone okay what did I miss uh okay what did I miss um path. Joo oh I could use join that's right uh what did I miss oh I didn't call reset I wrote the reset function but I didn't call it oh classic horrible error here graph. reset oh my God coding coding okay here we go Steve Gutenberg Oh Ellen barin oh nodes is not defined uh this dot this Dot this dot it's got to be that right the this Dot Song never forget the this Dot Song never forget the this Dot Song okay Ellen barin was in diner with Kevin Bacon and Lin Marta was in foot loose with Kevin Bacon and Mark Ruffalo was in Spotlight with Billy cotop who was in E pray love with Julia Roberts who is in flatliners with Kevin Bacon okay so this is breath first search in two videos if you watch this the whole way through that is amazing to me thank you very much # Six Degrees of Kevin Bacon breath first search algorithm whatever you know there's a lot of details about algorithms things I'm sure I've missed here you thinking about the interactivity you could visualize this so many wonderful possibilities um I am going to be done for today and um I will see you in a future video sometime uh as always the code for this particular challenge is in the description as well as links to other videos and things that I've referenced if anything's missing just let me know in the comments thanks for watching all right everybody oh my God unfortunately I don't think I can manage right now to do the um homework assignment video but the good news is any of you who are watching this live if you want the homework assignment to sort of think about it it's just on the um I mean one thing I should say is this um this website is for the actual NYU course but you're all welcome to read and and participate and make poll requests but this Wiki that has the homework assignment um with some ideas um um um here so let me um it's just for students here at NYU but you can share your stuff with me in the comments and that sort of thing so these are my um exercise ideas which is really just you know if you look through a bunch of the things that I've done already um um you can think about I have this animal guessing game which uses kind of like a binary tree like thing to to do a 20 questions like thing read use a bigger data set with this six Dees of Kevin Bacon um your own data set visualize it these are the kind of things I'm looking for people to try to do what's your own cre you make a piece of art with this um and then other examples that I have that I want to just quickly show you that are in the repository so there's the binary tree stuff which is uh which I have other videos about which don't have as nice of a visualization in them but you can see this one um this is uh the same exact um breath first search but using Force directed graph um I have a Dyas algorithm example that's just straight from the book but it just console logs the answer so I would love to make a video about that at some point um this I have a whole separate vid set of videos about which is depth first search to whoops to uh make a maze and then as you guys might have seen I have some videos on AAR to kind of like pathfind within that within and then I made this as I made an example of um I made an example of actually AAR with the maze generation so solving for the path so these are things you can play around with and I have other videos that connect to that and then oh I have uh the traveling um salesperson problem so this is just doing all possibilities with five nodes and I'll come back to that next time that I'm around okay um so that's my quick if people like work with this stuff and make stuff share it with me on Twitter share it in the comments um that sort of thing um Okay I uh phone is ringing which means it's time for me to go um I I it's six o'clock I'm a half an hour late which I said I need to leave by 530 so I'm looking to see if there's any am I ever going to code straight Java I do Java in processing and uh but and I will I do have on my list to do some uh Java in Eclipse uh videos that use processing libraries but I just haven't had the time to get to it yeah uh okay um thank you everybody for sticking around for this session I'm done I hope that I will be back next Friday like I said the next month um is going to be kind of rough and so I expect to miss a couple weeks here and there but I am determined you know I would say if I'm giving myself a personal deadline that I feel is realistic I'm quite determined by um you know by the sort of middle of the summer to have gotten through all this stuff uh and certainly I'm going to be preparing and working and researching all this stuff whether the videos happen we'll see for those of you who are supporting me on patreon I thank you if I miss weeks and you want to like turn off your patreon that's completely understandable um uh it's it's nice to have but I don't want anyone to ever feel obligated to it um and that sort of thing so okay um I will see you guys all later I'm going to turn off this live stream good night good weekend and keep in touch okay okay goodbye people are requesting the choo choo sound I'm going to read you since I didn't do any random numbers like Sesame Street this episode was brought to you by the letter or the number this coding Train episode was brought to you by the number 965877502 by
