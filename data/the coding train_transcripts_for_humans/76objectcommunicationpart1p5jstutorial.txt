With timestamps:

00:00 - Hello.
00:01 - Are you just sitting
at home wondering,
00:03 - when could I possibly watch
another video about bubbles?
00:07 - Well today's your lucky day.
00:08 - This is another
video about bubbles.
00:10 - And in this video, what I
want to look at specifically
00:13 - is, how can I-- if I have a
bubble object like this, bubble
00:18 - one, and I have another bubble
object like this, bubble two,
00:24 - how can these objects
talk to each other?
00:27 - Communicate to each other?
00:29 - How can they ask
each other questions,
00:30 - like, am I intersecting you
or am I overlapping you?
00:35 - How close are you from me?
00:36 - These types of things.
00:37 - And you can imagine all of the
implications and possibilities
00:40 - of this.
00:41 - Now, on the one hand, to
do this, all we need to do
00:44 - is figure out some math, right?
00:45 - And that math is,
what is the math
00:48 - of two circles that are
overlapping versus two circles
00:52 - that aren't overlapping.
00:53 - That math is quite
simple in some ways.
00:56 - I just want to look
at the distance
00:58 - between the centers of both
of those circles, right?
01:01 - And you can see here
that that distance
01:04 - is going to tell
us whether they're
01:06 - overlapping or not, right?
01:07 - So one way that I could
think about it, look at this.
01:09 - If this is r1 and this is r2--
01:13 - this is the radius
of this circle,
01:15 - this is the radius
of this circle.
01:17 - If this distance-- that's
also, this is r2 right here
01:22 - and this is r1 right here.
01:23 - If that distance is greater
than r1 plus r2, then certainly,
01:29 - the circles are not overlapping.
01:31 - However, if that
distance is less
01:34 - than the sum of the radii
of these two circles,
01:37 - then they are overlapping.
01:38 - So on the one hand, this
is all I need to do.
01:40 - I need to be able to say,
give me the distance--
01:44 - can you see that?
01:45 - Just barely on the top.
01:46 - Of between x1, y1,
x2, y2, and then
01:52 - I need some sort of
if statement to see,
01:55 - is this distance
less than r1 plus r2?
01:59 - Then they are intersecting.
02:01 - So let's actually go
and start to implement
02:03 - that math in the code first, but
what I want you to think about,
02:07 - is there a way for
the objects themselves
02:10 - to handle the computation of
that math rather than that math
02:14 - just be fiddling about
in the code somewhere,
02:16 - perhaps less convenient.
02:18 - So come back over here with
me and let's go over here.
02:22 - And so I'm continuing
from where I left off.
02:24 - This is essentially the
same Bubble class that's
02:27 - been in my previous videos.
02:29 - And I'm just going
to make two objects.
02:31 - I'm going to say
bubble1 and bubble2.
02:38 - The E key on my
keyboard doesn't work.
02:40 - It only works about
40% of the time,
02:42 - if you notice me pressing
it a bunch of times.
02:44 - So then what I'm going to
do is I'm going to say,
02:47 - bubble1 equals a
new bubble at 200--
02:53 - I'm going to put one on the
left side of the screen--
02:55 - and one on the 300.
02:57 - 200 on the right
side of the screen.
02:59 - And then I'm going to say
bubble1.show and bubble2.show.
03:06 - And that's bubble1 and bubble2.
03:07 - So now, when I go to my
sketch, I should hit Refresh.
03:13 - I don't see any bubbles.
03:17 - Let's look here.
03:18 - Bubble1.
03:20 - Oh, look at this.
03:20 - I forgot.
03:22 - The bubble has a r
property for its radius
03:25 - and I did not define that.
03:27 - Here's an interesting
thing, as if I'm just
03:29 - coming up with this right now.
03:31 - One of the features
of ES6, which
03:33 - is the version of
JavaScript that we're
03:35 - using that allows us to write
classes to make objects from,
03:38 - allows us to give a default
value to a particular argument
03:42 - if we forget to pass it in.
03:45 - So this parameter
here, r, which is
03:48 - going to be assigned to the
bubble object's r property,
03:52 - I can actually say r
equals 50 right up here,
03:54 - and then if I refresh it, look.
03:56 - I have two bubble objects.
03:58 - They seem to be
sort of a weird--
04:00 - oh, I meant for this one to be
at 400, not that that really
04:02 - matters.
04:03 - So you can see those
are two bubble objects.
04:06 - And I could optionally
give one of them--
04:09 - if I don't want to use
that default value for r,
04:13 - I could give it a value.
04:14 - So this is actually
incredibly convenient.
04:16 - Little piece of syntax
here that if you're
04:18 - going to have a parameter
to a function-- and this
04:21 - is not just for the constructor.
04:23 - You can do this
for any function,
04:24 - although it's quite
convenient to do it
04:26 - with constructor functions.
04:27 - And I want to give
it a default value.
04:28 - So that's a little
tidbit there for you
04:30 - inside this video, which is
about the objects intersecting.
04:33 - OK, so now, let's
move them around.
04:36 - Bubble1.move, bubble2.move.
04:40 - Let's move them
around just to see.
04:41 - OK.
04:42 - So what I want-- come on.
04:44 - Come on, bubbles.
04:47 - So we're going to have
to do some work here
04:49 - to get those bubbles to get a
little closer to each other.
04:53 - All right, so what I want to
do now is I want to go back
04:56 - and let's-- oh,
you can't really.
04:58 - I did end up going
above, but this is fine.
05:01 - You can see that.
05:02 - I'll be better about
this in the future.
05:04 - So I want to try to
implement this math.
05:06 - For example, what if I want
to say, right here in draw,
05:10 - I can say, all right, I
need to find the distance
05:15 - between bubble1.x, bubble1.y.
05:20 - These are the properties--
the x and y of that bubble.
05:23 - And bubble2.x and bubble2.y.
05:30 - Oh, and this should say d.
05:31 - And then I want to say,
if d is less than what?
05:37 - If it's less than bubble1.r
plus bubble2.r, then--
05:46 - and let's put all--
05:46 - I'm going to do
something silly here.
05:48 - Let's put all of this over
here and I can say, bubble1.--
05:54 - no, no, I'm just going to say,
like, background 200, 0, 100.
05:59 - OK?
06:00 - So this is the
idea of, like, ah,
06:02 - now I have the math
for intersection.
06:03 - I know I need to find the
distance between those two
06:06 - bubble objects.
06:08 - What's the distance between
these two bubble objects?
06:10 - If it's less than the
sum of their two radii,
06:14 - then it's intersecting.
06:15 - OK, so let's run this.
06:19 - You can do it, bubble.
06:21 - Be together, bubbles.
06:22 - Be together.
06:24 - OK, I'm just going
to have to force it.
06:27 - Let's bring them a
little bit closer.
06:33 - [DRUMROLL]
06:35 - Ah, there you go.
06:36 - Now move apart, bubbles.
06:38 - So one thing I could do
is I could just assign--
06:41 - that was a terrible idea.
06:43 - I could just assign the
bubble location to the mouse
06:45 - or something, and
then I could move it
06:47 - and you would be able to
see-- but the bubbles,
06:48 - they're going to move
apart eventually.
06:50 - Come on, move apart.
06:51 - Move apart.
06:52 - Oh, it's close.
06:56 - I think you saw the
background flick.
06:58 - OK.
06:58 - So you get that this works.
06:59 - And there we go.
07:00 - I've got to be a little bit
more thoughtful about the sort
07:02 - of intersection thing.
07:03 - Now here's the thing.
07:06 - I don't like this at all.
07:08 - I don't like this one
bit because the idea here
07:11 - is, eventually, what if I have
three bubbles or four bubbles
07:15 - or 10 bubbles or 100 bubbles?
07:17 - I need some way that I
really just want to say,
07:21 - if any given bubble, let's
say b1.intersects b2.
07:37 - I want to be able to
write code like this.
07:40 - I want to be able to encapsulate
all the idea of this math
07:44 - into a function in
the bubble object.
07:47 - So bubbles know how to
communicate with each other
07:53 - and how to test one
bubble's location
07:54 - versus another
bubble's location.
07:56 - So if I come back over
here, what I mean is,
07:59 - I want to say something like,
if bubble1.intersects bubble2,
08:08 - then do this.
08:12 - OK?
08:12 - So this is the
idea because then I
08:15 - could start having a
raise of things and loops
08:17 - and check every
bubble and it's just
08:19 - going to be more convenient than
having this math sort of out
08:22 - here where it doesn't
really need to be.
08:25 - So let's take a look at
how we might do this.
08:28 - So what this means
to me is, I need
08:30 - to write a new function that's
part of the Bubble class called
08:33 - intersects.
08:36 - So that's pretty easy.
08:37 - I could just do that.
08:40 - Done.
08:41 - That function, by the way,
because of the way that I wrote
08:45 - it here inside
this if statement,
08:47 - the idea is that
function is going
08:49 - to return true or return false.
08:53 - So right now, just to
have this do something,
08:55 - I could just say
return true right here.
08:57 - And the idea here is that, OK,
well the intersects function
09:03 - is a function that's
called on one bubble
09:06 - and receives as an
argument another bubble.
09:09 - So I need to give
it an argument here,
09:11 - and I can call that
other, for example.
09:14 - So now, if I comment out
this math and I run this,
09:19 - it looks like it's working.
09:21 - But of course, if I move
their locations away,
09:24 - it's always drawing
that pinkish background
09:27 - because my function
always returns true.
09:32 - So one thing you can
kind of see from this
09:33 - is, it's often worth
kind of writing
09:35 - the skeleton of your
code and then just,
09:37 - like, hard-coding
in true or false
09:40 - and see if it's working as,
ah, false, I don't see it.
09:44 - True, I do see it.
09:46 - Now I could actually go and
fill in the math in that part.
09:50 - So what I'm going
to do is I'm going
09:51 - to grab this math
that I had before
09:55 - and I'm going to
bring it down here
09:56 - and things are going to
get a little bit easier.
09:59 - I still want to
calculate the distance,
10:01 - but what do I want to
calculate it between?
10:03 - I want to calculate it between
the bubble that I am right now.
10:08 - What is the bubble
that I am right now?
10:10 - This.
10:11 - This bubble with what?
10:15 - The other bubble.
10:16 - The other bubble
that you have so
10:17 - generously passed in as an
argument to my parameter
10:21 - named other.
10:23 - Other, other.
10:25 - And then, if that
distance is less
10:28 - than my radius and the other
radius, then and only then
10:32 - would I return true.
10:34 - And don't worry,
I'm going to show
10:35 - you something that's going to
make this nicer in a minute
10:37 - because many of you are
complaining right now,
10:39 - the way I'm writing this.
10:41 - And we can see, now, this bubble
class has a function called
10:46 - intersects which can
receive any other bubble
10:49 - and always check if the
current bubble is intersecting
10:52 - the other bubble.
10:53 - So here we go, I'm
going to do this.
10:56 - They're not intersecting.
10:57 - Let's hack something to make
our lives a little easier.
11:01 - Instead of moving bubble2,
I'm just going to say,
11:04 - bubble2.x equals mouseX and
bubble2.y equals mouseY.
11:11 - OK?
11:11 - Now of course I could
write a function
11:13 - to have it follow the mouse
or set the mouse or whatever,
11:14 - but I'm just going to
throw this in there
11:16 - really quickly so
that I can do this
11:18 - and I can do-- woo,
intersects, doesn't intersect.
11:24 - OK.
11:24 - So now, let's take a
look at one thing which
11:27 - I want to change
here, which is that I
11:30 - am a weird, strange
person and I really
11:32 - like the way I wrote this.
11:34 - It just says it all.
11:35 - I know I have an if statement,
and I know when it's true,
11:39 - I want to return true,
and when it's false,
11:41 - I want to return false.
11:42 - And I've said all
that and I said it
11:44 - in like five lines of code here.
11:45 - But the truth of the matter
is, this is a statement,
11:48 - distance is less than
this.r plus other.r.
11:51 - That whole statement
evaluates to true or false.
11:53 - When it evaluates to true,
I want it to return true.
11:56 - When it evaluates to false,
I want it to return false.
11:58 - So this can actually be
condensed into just--
12:02 - whoops.
12:02 - Oh, autofill.
12:04 - Return the result
of this Boolean.
12:09 - Right?
12:10 - I could just say,
does that return
12:12 - the truth of this
statement, true or false,
12:15 - and this will in fact be
the same exact result. Yay.
12:19 - Oh, this is the
end of this video.
12:21 - So what have I done here?
12:22 - What might you want to do?
12:24 - Now here's the thing.
12:25 - Ah, let me show you
one other thing.
12:26 - Let's ask a question.
12:28 - I'm going to ask a very
important question here.
12:31 - If I were to say, if bubble2
intersects bubble1, have I
12:39 - changed anything?
12:40 - Program still works.
12:41 - This is exactly
the same program.
12:43 - So in this case, I am
writing sort of a function.
12:46 - You could maybe make the
argument that you want, like,
12:49 - a BubbleManager class and
the BubbleManager class
12:53 - has an intersects function
that takes two bubbles.
12:56 - So the point is, there's
always other ways
12:59 - to organize your code, and you
have to watch out for, like,
13:02 - over-engineering
your system, but this
13:05 - is one way of doing it.
13:06 - It's the way that I
kind of like to do it.
13:07 - Later, you might see in
other videos or tutorials
13:09 - that I make where I have--
13:10 - instead of just all bubbles, I
have frogs and turtles and fish
13:14 - and kitty cats,
and maybe the frogs
13:15 - have to check their location
relative to the kitty cats
13:18 - but the kitty cats have
to check their location
13:20 - relative to the turtles.
13:21 - So having the
different objects act
13:23 - on different kinds of objects
is also something that comes up.
13:26 - But what I'm going to
do in the next video
13:29 - is, how do I go from this
idea to suddenly have
13:32 - a system of like 100 bubbles?
13:35 - And I'm checking
if every single one
13:37 - is intersecting any other one.
13:38 - And what happens
when we do that?
13:40 - So I am going to do
that in the next video.
13:42 - You might actually just
give that a try yourself
13:45 - and then see how it goes
and watch the next video.
13:48 - OK, thanks for watching.
13:49 - [MUSIC PLAYING]

Cleaned transcript:

Hello. Are you just sitting at home wondering, when could I possibly watch another video about bubbles? Well today's your lucky day. This is another video about bubbles. And in this video, what I want to look at specifically is, how can I if I have a bubble object like this, bubble one, and I have another bubble object like this, bubble two, how can these objects talk to each other? Communicate to each other? How can they ask each other questions, like, am I intersecting you or am I overlapping you? How close are you from me? These types of things. And you can imagine all of the implications and possibilities of this. Now, on the one hand, to do this, all we need to do is figure out some math, right? And that math is, what is the math of two circles that are overlapping versus two circles that aren't overlapping. That math is quite simple in some ways. I just want to look at the distance between the centers of both of those circles, right? And you can see here that that distance is going to tell us whether they're overlapping or not, right? So one way that I could think about it, look at this. If this is r1 and this is r2 this is the radius of this circle, this is the radius of this circle. If this distance that's also, this is r2 right here and this is r1 right here. If that distance is greater than r1 plus r2, then certainly, the circles are not overlapping. However, if that distance is less than the sum of the radii of these two circles, then they are overlapping. So on the one hand, this is all I need to do. I need to be able to say, give me the distance can you see that? Just barely on the top. Of between x1, y1, x2, y2, and then I need some sort of if statement to see, is this distance less than r1 plus r2? Then they are intersecting. So let's actually go and start to implement that math in the code first, but what I want you to think about, is there a way for the objects themselves to handle the computation of that math rather than that math just be fiddling about in the code somewhere, perhaps less convenient. So come back over here with me and let's go over here. And so I'm continuing from where I left off. This is essentially the same Bubble class that's been in my previous videos. And I'm just going to make two objects. I'm going to say bubble1 and bubble2. The E key on my keyboard doesn't work. It only works about 40% of the time, if you notice me pressing it a bunch of times. So then what I'm going to do is I'm going to say, bubble1 equals a new bubble at 200 I'm going to put one on the left side of the screen and one on the 300. 200 on the right side of the screen. And then I'm going to say bubble1.show and bubble2.show. And that's bubble1 and bubble2. So now, when I go to my sketch, I should hit Refresh. I don't see any bubbles. Let's look here. Bubble1. Oh, look at this. I forgot. The bubble has a r property for its radius and I did not define that. Here's an interesting thing, as if I'm just coming up with this right now. One of the features of ES6, which is the version of JavaScript that we're using that allows us to write classes to make objects from, allows us to give a default value to a particular argument if we forget to pass it in. So this parameter here, r, which is going to be assigned to the bubble object's r property, I can actually say r equals 50 right up here, and then if I refresh it, look. I have two bubble objects. They seem to be sort of a weird oh, I meant for this one to be at 400, not that that really matters. So you can see those are two bubble objects. And I could optionally give one of them if I don't want to use that default value for r, I could give it a value. So this is actually incredibly convenient. Little piece of syntax here that if you're going to have a parameter to a function and this is not just for the constructor. You can do this for any function, although it's quite convenient to do it with constructor functions. And I want to give it a default value. So that's a little tidbit there for you inside this video, which is about the objects intersecting. OK, so now, let's move them around. Bubble1.move, bubble2.move. Let's move them around just to see. OK. So what I want come on. Come on, bubbles. So we're going to have to do some work here to get those bubbles to get a little closer to each other. All right, so what I want to do now is I want to go back and let's oh, you can't really. I did end up going above, but this is fine. You can see that. I'll be better about this in the future. So I want to try to implement this math. For example, what if I want to say, right here in draw, I can say, all right, I need to find the distance between bubble1.x, bubble1.y. These are the properties the x and y of that bubble. And bubble2.x and bubble2.y. Oh, and this should say d. And then I want to say, if d is less than what? If it's less than bubble1.r plus bubble2.r, then and let's put all I'm going to do something silly here. Let's put all of this over here and I can say, bubble1. no, no, I'm just going to say, like, background 200, 0, 100. OK? So this is the idea of, like, ah, now I have the math for intersection. I know I need to find the distance between those two bubble objects. What's the distance between these two bubble objects? If it's less than the sum of their two radii, then it's intersecting. OK, so let's run this. You can do it, bubble. Be together, bubbles. Be together. OK, I'm just going to have to force it. Let's bring them a little bit closer. [DRUMROLL] Ah, there you go. Now move apart, bubbles. So one thing I could do is I could just assign that was a terrible idea. I could just assign the bubble location to the mouse or something, and then I could move it and you would be able to see but the bubbles, they're going to move apart eventually. Come on, move apart. Move apart. Oh, it's close. I think you saw the background flick. OK. So you get that this works. And there we go. I've got to be a little bit more thoughtful about the sort of intersection thing. Now here's the thing. I don't like this at all. I don't like this one bit because the idea here is, eventually, what if I have three bubbles or four bubbles or 10 bubbles or 100 bubbles? I need some way that I really just want to say, if any given bubble, let's say b1.intersects b2. I want to be able to write code like this. I want to be able to encapsulate all the idea of this math into a function in the bubble object. So bubbles know how to communicate with each other and how to test one bubble's location versus another bubble's location. So if I come back over here, what I mean is, I want to say something like, if bubble1.intersects bubble2, then do this. OK? So this is the idea because then I could start having a raise of things and loops and check every bubble and it's just going to be more convenient than having this math sort of out here where it doesn't really need to be. So let's take a look at how we might do this. So what this means to me is, I need to write a new function that's part of the Bubble class called intersects. So that's pretty easy. I could just do that. Done. That function, by the way, because of the way that I wrote it here inside this if statement, the idea is that function is going to return true or return false. So right now, just to have this do something, I could just say return true right here. And the idea here is that, OK, well the intersects function is a function that's called on one bubble and receives as an argument another bubble. So I need to give it an argument here, and I can call that other, for example. So now, if I comment out this math and I run this, it looks like it's working. But of course, if I move their locations away, it's always drawing that pinkish background because my function always returns true. So one thing you can kind of see from this is, it's often worth kind of writing the skeleton of your code and then just, like, hardcoding in true or false and see if it's working as, ah, false, I don't see it. True, I do see it. Now I could actually go and fill in the math in that part. So what I'm going to do is I'm going to grab this math that I had before and I'm going to bring it down here and things are going to get a little bit easier. I still want to calculate the distance, but what do I want to calculate it between? I want to calculate it between the bubble that I am right now. What is the bubble that I am right now? This. This bubble with what? The other bubble. The other bubble that you have so generously passed in as an argument to my parameter named other. Other, other. And then, if that distance is less than my radius and the other radius, then and only then would I return true. And don't worry, I'm going to show you something that's going to make this nicer in a minute because many of you are complaining right now, the way I'm writing this. And we can see, now, this bubble class has a function called intersects which can receive any other bubble and always check if the current bubble is intersecting the other bubble. So here we go, I'm going to do this. They're not intersecting. Let's hack something to make our lives a little easier. Instead of moving bubble2, I'm just going to say, bubble2.x equals mouseX and bubble2.y equals mouseY. OK? Now of course I could write a function to have it follow the mouse or set the mouse or whatever, but I'm just going to throw this in there really quickly so that I can do this and I can do woo, intersects, doesn't intersect. OK. So now, let's take a look at one thing which I want to change here, which is that I am a weird, strange person and I really like the way I wrote this. It just says it all. I know I have an if statement, and I know when it's true, I want to return true, and when it's false, I want to return false. And I've said all that and I said it in like five lines of code here. But the truth of the matter is, this is a statement, distance is less than this.r plus other.r. That whole statement evaluates to true or false. When it evaluates to true, I want it to return true. When it evaluates to false, I want it to return false. So this can actually be condensed into just whoops. Oh, autofill. Return the result of this Boolean. Right? I could just say, does that return the truth of this statement, true or false, and this will in fact be the same exact result. Yay. Oh, this is the end of this video. So what have I done here? What might you want to do? Now here's the thing. Ah, let me show you one other thing. Let's ask a question. I'm going to ask a very important question here. If I were to say, if bubble2 intersects bubble1, have I changed anything? Program still works. This is exactly the same program. So in this case, I am writing sort of a function. You could maybe make the argument that you want, like, a BubbleManager class and the BubbleManager class has an intersects function that takes two bubbles. So the point is, there's always other ways to organize your code, and you have to watch out for, like, overengineering your system, but this is one way of doing it. It's the way that I kind of like to do it. Later, you might see in other videos or tutorials that I make where I have instead of just all bubbles, I have frogs and turtles and fish and kitty cats, and maybe the frogs have to check their location relative to the kitty cats but the kitty cats have to check their location relative to the turtles. So having the different objects act on different kinds of objects is also something that comes up. But what I'm going to do in the next video is, how do I go from this idea to suddenly have a system of like 100 bubbles? And I'm checking if every single one is intersecting any other one. And what happens when we do that? So I am going to do that in the next video. You might actually just give that a try yourself and then see how it goes and watch the next video. OK, thanks for watching. [MUSIC PLAYING]
