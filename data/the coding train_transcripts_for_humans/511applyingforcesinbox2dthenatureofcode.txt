With timestamps:

00:05 - yeah do you remember a time oh not so
00:08 - long ago when we were writing code that
00:11 - looked like this
00:13 - mover M and then
00:16 - setup m is a new
00:20 - mover and then in draw we would say
00:23 - things like m. apply
00:27 - force wind and we would make a T Vector
00:30 - called wind we would calculate it
00:32 - somehow we would send it in we would say
00:34 - acceleration add force and force divided
00:37 - by mass and all this stuff we
00:40 - learned it was a nice time back then so
00:44 - here's the interesting thing we said
00:46 - that aha let's let's try box 2D as a way
00:49 - of replacing our physics engine instead
00:51 - of keeping track of our object's
00:53 - location velocity and acceleration on
00:55 - our own let's let box do it through a
00:57 - boxd body but what what thing that's
01:01 - interesting about doing this
01:03 - is now that we've done all that we can
01:05 - Circle back and say okay well once we
01:08 - figured out our own physics Engine with
01:10 - location velocity acceleration we were
01:11 - able to apply forces to those objects
01:13 - and move them around the screen
01:14 - according to forces like wind and
01:16 - traction or whatever we came up with the
01:18 - interesting thing is in box 2D even
01:20 - though box 2D is handling our physics we
01:22 - can still make up our own forces and
01:24 - apply them to those objects we can apply
01:27 - forces to bodies so let's think about
01:33 - this we're writing a box
01:37 - class that instead of location velocity
01:40 - and
01:42 - acceleration it has a body object what
01:45 - if we want to write a function called
01:49 - apply
01:52 - Force now one thing we should note when
01:54 - we previously had an apply Force
01:56 - function we passed in a p Vector a force
01:58 - is a vector that causes a an object with
02:00 - mass to accelerate so the argument to
02:02 - the apply force method is a p Vector
02:05 - here however in box DD we still want to
02:07 - apply a force as a vector but we want it
02:09 - to be a VC 2 object VC 2 force and what
02:14 - do we do with that well we can say body
02:17 - which is B do apply force it so happens
02:21 - that the body method has an apply Force
02:25 - function so just like we were writing
02:27 - our own apply Force function for our
02:29 - what we're doing is we're say our apply
02:30 - Force function will receive a vector and
02:32 - pass it along to that body and we can
02:34 - pass it on but the funny thing is box DD
02:37 - is more sophisticated and not only do we
02:40 - need to apply a
02:41 - force but we need to say where on that
02:45 - box to De body do we want to apply the
02:46 - force right it's going to be quite
02:48 - different if we apply the force on this
02:49 - corner which might cause it to spin
02:51 - around versus right in the center so for
02:54 - Simplicity one thing we can do right now
02:56 - is just say you know what no matter what
02:58 - we're going to always apply forces to
03:00 - the center of that body and we can say
03:02 - VC 2 pause equals body. getet
03:07 - World Center so we can ask for that
03:10 - body's Center then we could say apply
03:13 - that Force to That Body Center so this
03:15 - is very simple we're actually
03:17 - this hopefully the shortest video ever
03:20 - this is all we're adding to our examples
03:22 - if we just add just this one function
03:24 - suddenly we can start applying forces to
03:26 - the objects but key thing that we're
03:29 - adding here in addition to applying the
03:30 - force Vector we need to apply the force
03:33 - to a specific location in this case
03:35 - we're going to simplify things and say
03:37 - always added to the object Center
03:39 - exercise to yourself try adding forces
03:41 - to other parts of the object so try
03:43 - creating a scenario where you apply
03:45 - forces to the corner of an object and
03:47 - see if it spins that sort of thing
03:49 - another thing we should mention about
03:51 - this is this the Assumption here is that
03:54 - this is a world Vector right the unit
03:57 - remember the unit is meters not pixels
04:00 - so when we start making up our forces or
04:02 - calculating them we have to remember are
04:04 - we in pixel land or box Dy worldland so
04:07 - let's take a look at how this actually
04:08 - works in a code
04:11 - example oh come on switch there we go
04:13 - hello Okay so let's just run this simple
04:16 - example which this looks like lots of
04:18 - the examples we've made in box 2D I'm
04:20 - just going to move the window over here
04:21 - for a second it's got a bunch of boxes
04:23 - being made fall and falling there's some
04:25 - boundary objects they're static now
04:27 - watch what happens when I click the
04:29 - mouse we're going to apply a wind Force
04:31 - to all these objects click the mouse and
04:33 - you can see suddenly the wind is pushing
04:34 - them all to the right they're piling up
04:37 - it's a very strong wind I let go the
04:39 - wind is gone they all start to fall down
04:41 - how does this happen well one thing we
04:43 - should look at is in the main program
04:46 - here this is just like what we did we
04:48 - could go back to the chapter 2 examples
04:49 - and this looks exactly the same the
04:51 - difference is that Vector seems kind of
04:53 - extreme 200 comma 0 remember we need a
04:56 - world Vector not a pixel Vector so I'm
04:59 - kind of making up numbers just to try
05:01 - stuff you know if I said five comma 0
05:04 - and ran this we can see the wind isn't
05:06 - very strong I'm clicking the mouse as
05:07 - hard as I want but um the number 200 is
05:11 - going to give us kind of a value that
05:12 - makes more sense you know obviously that
05:14 - could be a variable I don't know why all
05:16 - I ever could think of is pearing noise
05:18 - but you could you could have the wind
05:20 - shift from right to left it could be a
05:21 - sine wave there's so many ways you could
05:23 - kind of augment what this force is but
05:25 - the point is just in the same way we
05:27 - used to make up forces we can make up
05:29 - vectors and apply them to the objects
05:31 - and again the only thing that changed
05:33 - from our box class is just adding this
05:36 - method just adding this method receive
05:38 - the force find the object Center apply
05:41 - that Force Vector to the object Center
05:43 - that's all we've done just this little
05:45 - bit of code is the only thing that's
05:46 - added and this little bit of code to
05:48 - from our previous examples it's that
05:50 - simple to start applying forces and one
05:52 - of the things that's exciting about this
05:54 - is if I minimize this we can go back and
05:56 - here is example 2.7 from chapter 2 you
05:59 - you can see here is a bunch of things
06:03 - being attracted to the center this was
06:05 - the attraction example this is without
06:06 - box 2D these objects are experiencing a
06:09 - force and we're updating the physics
06:10 - oursel through location velocity
06:12 - acceleration now let's look what happens
06:14 - when we take that exact same scenario oh
06:17 - this really bothers me that it's not the
06:19 - same size oh it's so sad that I didn't
06:21 - do this in advance edit this
06:24 - out someday when I have my magical
06:26 - editing machine okay look at this so
06:28 - there's a lot objects there's a couple
06:30 - things that are inconsistent but you can
06:31 - see the there actually now we have ATT
06:34 - traction but we have it with collisions
06:36 - and you can see what's interesting here
06:37 - as the things are attracted to the
06:39 - center they're also colliding with each
06:41 - other and piling up um and kind of
06:44 - getting stuck based on how the behavior
06:45 - has worked out so this is pretty
06:47 - interesting and if we look at the code
06:50 - these two examples both look at this
06:52 - attraction function and this attraction
06:55 - function I'm going to step to the side
06:56 - here this is how we're we used to do it
06:58 - with P vector now we're doing it with v
07:00 - 2 the fun it's exactly the same look we
07:04 - we a force with which is between the
07:06 - location and the other object's location
07:09 - now we're saying hey this force is
07:11 - between one position and the other
07:13 - object's position we're just using the
07:16 - vect 2 syntax now um the strength of the
07:19 - same mole local instead of multiply you
07:22 - could go and compare look at exercise
07:24 - 5.10 look at example 2.7 and you'll see
07:27 - that the exact functions are in there
07:30 - just one over here uses the V 2 syntax
07:34 - and over here uses the P Vector syntax
07:36 - so this takes a little getting used to
07:37 - but we can do this stuff really easily
07:40 - um with box 2D so one thing you might
07:42 - think about doing is go back to stuff
07:45 - you used to do what did you what kind of
07:47 - forces did you make up how do you
07:48 - control the motion of objects with
07:49 - forces can you bring some of those
07:51 - forces over into a box2d sketch what if
07:54 - you tried adding a friction Force um uh
07:57 - what if you tried making a PE noise wind
08:00 - there's so many ideas that you can uh
08:03 - think about okay um great I think this
08:06 - covers this topic and there's only one
08:08 - more box dut video left to go we're
08:10 - going to look at how to determine when
08:11 - two objects Collide and cause an event
08:14 - to happen when they've actually collided
08:16 - okay

Cleaned transcript:

yeah do you remember a time oh not so long ago when we were writing code that looked like this mover M and then setup m is a new mover and then in draw we would say things like m. apply force wind and we would make a T Vector called wind we would calculate it somehow we would send it in we would say acceleration add force and force divided by mass and all this stuff we learned it was a nice time back then so here's the interesting thing we said that aha let's let's try box 2D as a way of replacing our physics engine instead of keeping track of our object's location velocity and acceleration on our own let's let box do it through a boxd body but what what thing that's interesting about doing this is now that we've done all that we can Circle back and say okay well once we figured out our own physics Engine with location velocity acceleration we were able to apply forces to those objects and move them around the screen according to forces like wind and traction or whatever we came up with the interesting thing is in box 2D even though box 2D is handling our physics we can still make up our own forces and apply them to those objects we can apply forces to bodies so let's think about this we're writing a box class that instead of location velocity and acceleration it has a body object what if we want to write a function called apply Force now one thing we should note when we previously had an apply Force function we passed in a p Vector a force is a vector that causes a an object with mass to accelerate so the argument to the apply force method is a p Vector here however in box DD we still want to apply a force as a vector but we want it to be a VC 2 object VC 2 force and what do we do with that well we can say body which is B do apply force it so happens that the body method has an apply Force function so just like we were writing our own apply Force function for our what we're doing is we're say our apply Force function will receive a vector and pass it along to that body and we can pass it on but the funny thing is box DD is more sophisticated and not only do we need to apply a force but we need to say where on that box to De body do we want to apply the force right it's going to be quite different if we apply the force on this corner which might cause it to spin around versus right in the center so for Simplicity one thing we can do right now is just say you know what no matter what we're going to always apply forces to the center of that body and we can say VC 2 pause equals body. getet World Center so we can ask for that body's Center then we could say apply that Force to That Body Center so this is very simple we're actually this hopefully the shortest video ever this is all we're adding to our examples if we just add just this one function suddenly we can start applying forces to the objects but key thing that we're adding here in addition to applying the force Vector we need to apply the force to a specific location in this case we're going to simplify things and say always added to the object Center exercise to yourself try adding forces to other parts of the object so try creating a scenario where you apply forces to the corner of an object and see if it spins that sort of thing another thing we should mention about this is this the Assumption here is that this is a world Vector right the unit remember the unit is meters not pixels so when we start making up our forces or calculating them we have to remember are we in pixel land or box Dy worldland so let's take a look at how this actually works in a code example oh come on switch there we go hello Okay so let's just run this simple example which this looks like lots of the examples we've made in box 2D I'm just going to move the window over here for a second it's got a bunch of boxes being made fall and falling there's some boundary objects they're static now watch what happens when I click the mouse we're going to apply a wind Force to all these objects click the mouse and you can see suddenly the wind is pushing them all to the right they're piling up it's a very strong wind I let go the wind is gone they all start to fall down how does this happen well one thing we should look at is in the main program here this is just like what we did we could go back to the chapter 2 examples and this looks exactly the same the difference is that Vector seems kind of extreme 200 comma 0 remember we need a world Vector not a pixel Vector so I'm kind of making up numbers just to try stuff you know if I said five comma 0 and ran this we can see the wind isn't very strong I'm clicking the mouse as hard as I want but um the number 200 is going to give us kind of a value that makes more sense you know obviously that could be a variable I don't know why all I ever could think of is pearing noise but you could you could have the wind shift from right to left it could be a sine wave there's so many ways you could kind of augment what this force is but the point is just in the same way we used to make up forces we can make up vectors and apply them to the objects and again the only thing that changed from our box class is just adding this method just adding this method receive the force find the object Center apply that Force Vector to the object Center that's all we've done just this little bit of code is the only thing that's added and this little bit of code to from our previous examples it's that simple to start applying forces and one of the things that's exciting about this is if I minimize this we can go back and here is example 2.7 from chapter 2 you you can see here is a bunch of things being attracted to the center this was the attraction example this is without box 2D these objects are experiencing a force and we're updating the physics oursel through location velocity acceleration now let's look what happens when we take that exact same scenario oh this really bothers me that it's not the same size oh it's so sad that I didn't do this in advance edit this out someday when I have my magical editing machine okay look at this so there's a lot objects there's a couple things that are inconsistent but you can see the there actually now we have ATT traction but we have it with collisions and you can see what's interesting here as the things are attracted to the center they're also colliding with each other and piling up um and kind of getting stuck based on how the behavior has worked out so this is pretty interesting and if we look at the code these two examples both look at this attraction function and this attraction function I'm going to step to the side here this is how we're we used to do it with P vector now we're doing it with v 2 the fun it's exactly the same look we we a force with which is between the location and the other object's location now we're saying hey this force is between one position and the other object's position we're just using the vect 2 syntax now um the strength of the same mole local instead of multiply you could go and compare look at exercise 5.10 look at example 2.7 and you'll see that the exact functions are in there just one over here uses the V 2 syntax and over here uses the P Vector syntax so this takes a little getting used to but we can do this stuff really easily um with box 2D so one thing you might think about doing is go back to stuff you used to do what did you what kind of forces did you make up how do you control the motion of objects with forces can you bring some of those forces over into a box2d sketch what if you tried adding a friction Force um uh what if you tried making a PE noise wind there's so many ideas that you can uh think about okay um great I think this covers this topic and there's only one more box dut video left to go we're going to look at how to determine when two objects Collide and cause an event to happen when they've actually collided okay
