With timestamps:

00:00 - Hello.
00:01 - This is another video
in my continuing
00:03 - series about perlin noise.
00:04 - I just want to briefly show
you what the noise detail
00:07 - function does.
00:09 - And if you can remember a time,
a little while ago and when
00:13 - I recorded my first video,
today, or I don't know when,
00:16 - never mind about time.
00:18 - Time doesn't exist in
the world of YouTube,
00:20 - but I do have a
previous video, which
00:22 - you might watch where I
talk about how the noise
00:24 - algorithm actually works.
00:26 - And if you recall, there is
this idea-- oh, look it's
00:28 - a purple pen.
00:29 - This is so exciting.
00:30 - I didn't even know this was.
00:32 - There was this idea of picking
random values spaced apart
00:36 - with some amplitude and then
interpolating between them.
00:40 - And then again
picking random values
00:44 - spaced closer together
with a smaller amplitude,
00:47 - and then again, picking
random values closer together
00:51 - with an even smaller amplitude,
and then interpolating
00:55 - between those.
00:56 - And then adding all of
these random waves together
01:00 - results in some
nice perlin noise.
01:03 - This is how the perlin
noise algorithm works.
01:06 - Now, over here, we have a
visualization of perlin noise
01:10 - in two dimensions, which
I just talked about
01:12 - in my previous video, smooths
randomness, each pixel
01:15 - having a similar grayscale
value to the pixels around it.
01:20 - Now, what-- we can actually--
so this is the default
01:24 - visualization of two
dimensional perlin noise,
01:26 - but we can look at
how that changes based
01:31 - on this noise detail function.
01:33 - So what the noise
detail function does
01:35 - is it actually
takes two arguments.
01:37 - Let's say I say noise
detail 4, and I'm
01:40 - going to make this
a little bit bigger.
01:42 - You could see nothing changed.
01:45 - If I say noise detail 8, you
could see that it changed.
01:50 - Look.
01:50 - It's got finer detail.
01:52 - Noise detail 24.
01:54 - Can you see that
even finer detail?
01:57 - So what that first argument
is doing is controlling
02:00 - the number of octaves.
02:02 - So the more octaves that you
have, the further down this
02:06 - trajectory you're going in
the smaller more fine detail
02:09 - you're getting.
02:10 - Now, over here, I want to--
02:14 - OK, now, so let's go
back to noise detail 4.
02:19 - That's the default.
There's also a second--
02:21 - and by the way, if I were
to say noise detail 1,
02:24 - like what if I
just do one octave.
02:26 - You can see now we've
lost that finer detail
02:29 - and just have this sort of
smooth grayscale values.
02:32 - Now, what if we look
at the second argument?
02:37 - The second argument is often
referred to as fall off.
02:40 - Remember I was saying how
the period of these waves
02:43 - is shrinking, the
amplitude is shrinking?
02:45 - Well, by what factor?
02:47 - It's shrinking by
a factor of 0.5.
02:49 - Have.
02:50 - So if I were to say
noise detail 4, 0.5.
02:55 - Hold on.
02:56 - I don't like the size
of my things here.
03:00 - You can see that's the
sort of default noise,
03:03 - but I can now say
noise detail 4.9,
03:07 - and look what that looks like.
03:08 - A little bit weird.
03:09 - Or 0.2, and look
what that looks like,
03:12 - or I could say 0.4
but with 12 octaves.
03:17 - You can control the quality
of the perlin noise.
03:20 - Actually, I'm curious
just for a second to look
03:23 - at what it looks like with
this one dimensional perlin
03:31 - noise example.
03:33 - Let's just change the
noise detail to 1.
03:41 - Let's try noise detail 1.
03:45 - You can see how this
graph really changes.
03:47 - You lost the finer detail.
03:50 - You only have that
original random noise.
03:54 - Now, if I say
noise detail 8, you
03:58 - can see how there is even
more detail in the finer
04:02 - points of change, and I could
also say now noise detail 8,
04:07 - and then change the
fall off to 0.2,
04:09 - and you can see what that
looks like versus 0.8,
04:12 - and you can see what
that looks like.
04:13 - So there is a lot of--
04:16 - how you alter the noise
detail function can change
04:19 - the behavior of the noise,
and that's something
04:21 - you can control to get a
variety of different effects,
04:24 - whether it's a pixel
effects or otherwise.

Cleaned transcript:

Hello. This is another video in my continuing series about perlin noise. I just want to briefly show you what the noise detail function does. And if you can remember a time, a little while ago and when I recorded my first video, today, or I don't know when, never mind about time. Time doesn't exist in the world of YouTube, but I do have a previous video, which you might watch where I talk about how the noise algorithm actually works. And if you recall, there is this idea oh, look it's a purple pen. This is so exciting. I didn't even know this was. There was this idea of picking random values spaced apart with some amplitude and then interpolating between them. And then again picking random values spaced closer together with a smaller amplitude, and then again, picking random values closer together with an even smaller amplitude, and then interpolating between those. And then adding all of these random waves together results in some nice perlin noise. This is how the perlin noise algorithm works. Now, over here, we have a visualization of perlin noise in two dimensions, which I just talked about in my previous video, smooths randomness, each pixel having a similar grayscale value to the pixels around it. Now, what we can actually so this is the default visualization of two dimensional perlin noise, but we can look at how that changes based on this noise detail function. So what the noise detail function does is it actually takes two arguments. Let's say I say noise detail 4, and I'm going to make this a little bit bigger. You could see nothing changed. If I say noise detail 8, you could see that it changed. Look. It's got finer detail. Noise detail 24. Can you see that even finer detail? So what that first argument is doing is controlling the number of octaves. So the more octaves that you have, the further down this trajectory you're going in the smaller more fine detail you're getting. Now, over here, I want to OK, now, so let's go back to noise detail 4. That's the default. There's also a second and by the way, if I were to say noise detail 1, like what if I just do one octave. You can see now we've lost that finer detail and just have this sort of smooth grayscale values. Now, what if we look at the second argument? The second argument is often referred to as fall off. Remember I was saying how the period of these waves is shrinking, the amplitude is shrinking? Well, by what factor? It's shrinking by a factor of 0.5. Have. So if I were to say noise detail 4, 0.5. Hold on. I don't like the size of my things here. You can see that's the sort of default noise, but I can now say noise detail 4.9, and look what that looks like. A little bit weird. Or 0.2, and look what that looks like, or I could say 0.4 but with 12 octaves. You can control the quality of the perlin noise. Actually, I'm curious just for a second to look at what it looks like with this one dimensional perlin noise example. Let's just change the noise detail to 1. Let's try noise detail 1. You can see how this graph really changes. You lost the finer detail. You only have that original random noise. Now, if I say noise detail 8, you can see how there is even more detail in the finer points of change, and I could also say now noise detail 8, and then change the fall off to 0.2, and you can see what that looks like versus 0.8, and you can see what that looks like. So there is a lot of how you alter the noise detail function can change the behavior of the noise, and that's something you can control to get a variety of different effects, whether it's a pixel effects or otherwise.
