With timestamps:

00:00 - okay here we are a coding challenge to
00:02 - this coding challenge I'm gonna do in
00:04 - processing and it's cool I'm going to
00:06 - attempt to implement this thing called
00:08 - Langdon's and
00:09 - now one thing I might recommend is go
00:11 - back and watch my game of life coding
00:13 - challenge because there's gonna be a lot
00:14 - of similarities between these two this
00:16 - is an example of another cellular
00:17 - automata system however I'm gonna do
00:20 - this one in processing so we just sort
00:21 - of see a different environment I will of
00:23 - course make a port to JavaScript so if
00:26 - you make your own variation of this and
00:27 - want to share it on the web you can look
00:30 - at the p5.js version of this so what do
00:32 - I need what I need with this first
00:35 - cellular automata system just like and
00:38 - is it atomic ah is it at um I could
00:42 - never get this right I need to have a
00:44 - two-dimensional array and this is
00:45 - actually a place where I'm kind of happy
00:46 - that I'm using Java in processing where
00:49 - I can say I can make this grid a new
00:52 - two-dimensional array and you know what
00:55 - though guess what I'm gonna do I'm gonna
00:57 - have every cell be an individual pixel
00:59 - because processing is pretty fast I
01:01 - could do individual pixel setting so
01:03 - let's instead of having like a grid of
01:04 - squares that are a larger size I'm gonna
01:06 - actually do it on the pixel by pixel
01:07 - level let's see how that goes so let's
01:10 - just decide in advance actually I don't
01:15 - need to decide in advance I'm going to
01:17 - create I'm gonna have a window that's
01:19 - let's just do like 200 bytes 400 by 400
01:22 - to start and then so the array is going
01:26 - to be a new array of integers which the
01:29 - same nonresponse width and height and
01:31 - it's actually going to just fill that
01:33 - whole thing with zeros so I don't
01:35 - actually even need in Java if I was
01:37 - doing this in JavaScript I've got to
01:38 - like fill it with zeros but I could just
01:40 - I could just assume that it's filling it
01:42 - with zeros great now we should really
01:44 - learn what license it is let's go take a
01:47 - look so it's a it's a system souther
01:50 - automata system that will produce
01:53 - interesting patterns and I need to
01:55 - follow these rules
01:56 - okay so squares on a plain or colored
01:58 - variously either black or white
02:00 - so we'll say white if the ant hasn't
02:03 - hasn't been there that'll be oh well I
02:07 - guess zero it's black white is one I
02:09 - don't know we'll figure that out we
02:10 - arbitrarily identify once
02:12 - as the aunt so let's start that let's
02:15 - have the aunts location we're just gonna
02:17 - call that we're gonna have that just be
02:19 - x and y and the aunt is gonna start at
02:22 - 200 200 okay that's where the ants going
02:25 - to start I probably should say with / -
02:26 - whatever so I'm going to say grid X y
02:30 - equals 1 that's where the ant is and
02:34 - actually to be honest with you maybe I
02:39 - should have that be the value 2 so I
02:42 - kind of 0 for what let's let's keep
02:43 - going here so the ant moves according to
02:46 - the role rules below at a white square
02:48 - it turns 90 degrees white right ok so
02:52 - actually what I want to do is each time
02:59 - and let's make a background of white I
03:02 - need to figure out what is the state of
03:05 - the current spot where the ant is right
03:09 - so this is the state of the current spot
03:11 - where the antis so if the ant we can
03:16 - look at these rules if the ant is at a
03:18 - white square okay and we need to keep
03:21 - track of its direction which way is it
03:23 - moving
03:23 - so I also need a direction and let's
03:27 - just be let's do something goofy and do
03:30 - like these because I think you're
03:31 - supposed to like it kind of make
03:33 - constants you may be you say final or
03:34 - something but I'm just gonna call them
03:36 - cap I'm gonna say like up oh that's a
03:39 - reserved word in in in processing ant up
03:49 - is 1 2 0 ant down is 1 and right is 2
04:05 - this might be really silly the way that
04:08 - I'm doing this ant left is 3 so I'm
04:10 - gonna make up some constants to keep
04:11 - track of the direction and I need a
04:14 - variable called ant direction and I can
04:18 - just call that direction so I have
04:24 - I already have that I have the ants XY
04:27 - location and its direction it's probably
04:29 - nicer way of doing that but I'm gonna
04:30 - keep going with what I have its
04:31 - direction I'm just gonna start by going
04:33 - up that's its direction so now if add a
04:40 - white oh you know what I should have
04:42 - those in clockwise order because then I
04:45 - could just add one is adding one is
04:47 - turning right subtracting one is turning
04:50 - left so this should actually be up is
04:53 - zero right is two is one down is two and
04:59 - left is three so if the state is white
05:04 - and I'll have white be one no white
05:08 - should be zero because they're all
05:09 - starting a zero because I'm filling it
05:11 - with white so if the state is zero the
05:14 - ant should turn right
05:15 - meaning ant oh just Direction plus plus
05:20 - and I'm gonna what I'm actually going to
05:22 - do is I'm going to almost in a silly way
05:25 - write a separate function for turning
05:27 - right because I can I need to deal with
05:30 - like so this is ant
05:35 - this is Direction plus plus but if
05:38 - Direction E is greater than ant left
05:45 - then Direction equals ant up right so I
05:51 - could use modulus but I'm just gonna be
05:54 - sort of silly about this you can all do
05:57 - your nice refactoring and I'm gonna say
05:59 - - - and if it's less than ant
06:03 - up it's ant left so this will account
06:08 - for when 0 goes to negative 1 it should
06:10 - be 3 when 3 goes to 4 it should be 0 and
06:13 - again I could have done this all on one
06:14 - line of code with modulus but that's
06:17 - fine
06:18 - so if state is 0 turn right and then
06:27 - what's the next thing
06:29 - flip the color of the square and move
06:32 - forward one unit okay so then state
06:40 - grid X why should now be one right
06:45 - that's flipping and move and then move
06:49 - forward needs to be a function so I'm
06:51 - now going to write a function called
06:54 - move forward which is if Direction is up
07:05 - then Y minus minus again I could use a
07:10 - switch statement a case statement all
07:12 - that if Direction is right I could do
07:16 - this with all sorts of fancier ways else
07:19 - if but I'm just going to really try to
07:22 - I'm gonna really try to be long-winded
07:25 - about this to understand it if it's down
07:28 - y plus plus else if direction is left
07:36 - then left is X minus minus then I need
07:40 - to account for the edges so if X is
07:43 - greater than width then x equals 0 if X
07:48 - is else if X is less than 0 then x
07:53 - equals with minus 1 and again I could
07:57 - use modulus but I'm just gonna be super
07:58 - long-winded about this and I'm gonna do
08:02 - this for Y and I'm gonna change that to
08:06 - height and put Y in here and here we go
08:11 - ok so now I have this crazy long
08:13 - function a crazy long function for
08:18 - moving forward it should change the x
08:21 - and y value based on its current
08:22 - direction and it should wrap around the
08:24 - edges ok so now move forward ok else if
08:29 - what what could the other if it's the
08:33 - state is already one if there's really
08:38 - only one other possibility but I'll be
08:39 - I'll check else if state is 1 turn left
08:46 - turn
08:51 - change the state to zero and then move
08:56 - forward I think we're done let's just
09:01 - run this it's not gonna draw anything
09:02 - let's just run this and see if we get
09:03 - any errors I usually don't like to write
09:05 - so much code without running at first
09:07 - okay it's running but let's now see now
09:10 - all I need to do is visualize this grid
09:12 - and I should have probably made this the
09:16 - pixels are in a one dimensional array
09:18 - but I'm now going to loop through and I
09:21 - is every export column I plus plus J is
09:33 - every why I don't want to use x and y
09:35 - because I already used those for the
09:36 - ants and then and I could actually you
09:41 - know what I really could be so efficient
09:42 - about this because I could make this is
09:45 - very silly I could make an image I only
09:47 - have to change one pixel each frame it's
09:51 - really silly for me too so let's do this
09:55 - I can't bear I mean this let's do it
09:57 - this way first but I am going to
09:59 - refactor this because this is really
10:01 - ridiculous what I'm about to do so the
10:03 - pixel location is I times width plus J
10:07 - and this is a formula that I have used
10:08 - in countless videos and I'm going to
10:11 - call this pics for pixel so the actual
10:13 - pixel location in the window is all the
10:17 - pixel colors are stored in a one
10:18 - dimensional array and so I but I'm gonna
10:21 - operate on those pixels I need to say
10:22 - load pixels and I also need to say
10:25 - update pixels so I will refer you to my
10:28 - video tutorials about pixels in
10:31 - processing they'll be a if this is not
10:33 - infinitely to you I'll I'll link to
10:35 - those tutorials but basically what I
10:37 - need to do now is just say pixels index
10:40 - pix equals something like if I say color
10:43 - random 255 what you're gonna see here is
10:49 - whoops when I run this sketch is every
10:52 - pixel is a random color now what I want
10:54 - to do is I want to say if grid I J equal
11:01 - zero then set that pixel to white
11:08 - otherwise if it's equal to one but
11:11 - that's the only other possibility set
11:13 - that pixel to black and we should see
11:16 - this is just rendering the results of
11:18 - Langston's ant with each and every pixel
11:22 - as a cell in the grid so let's run this
11:24 - and we can kind of zoom in and see is
11:28 - this the correct pattern can anyone
11:30 - confirm or deny for me that this is the
11:33 - correct pattern let's see if it looks
11:37 - kind of like so this is what it should
11:42 - look like after eleven thousand steps
11:45 - all right let's stop this and I'm gonna
11:48 - do something I'm gonna say I'm actually
11:52 - just going to do this all at once I'm
11:54 - gonna say for int N equals zero and is
11:57 - less than 11,000 n plus plus I just want
12:01 - to know that I did this correctly I'm
12:02 - gonna just run through the whole
12:04 - algorithm 11,000 times then I'm gonna
12:08 - render it and I'm gonna say no loop so
12:10 - it's only gonna do it once okay so this
12:13 - is instead of watching it animate that
12:14 - looks pretty good right that looks
12:16 - exactly like hopefully dad yep I can
12:23 - verify that these well it's flipped but
12:25 - that's fine because Y is up what you
12:27 - could you could flip it if you want I
12:29 - flipped it fine okay great so that is
12:31 - working we're done yeah but this is this
12:34 - is making me crazy because I've only
12:36 - changed one pixel every frame so I can't
12:39 - bear to leave it this way I'm gonna do
12:42 - one there's so much refactoring of this
12:44 - that you could do and actually I'm going
12:47 - to leave that in here because one thing
12:49 - but just having this in here by the way
12:51 - and taking out the no loop like this is
12:54 - this I can make it appear to run much
12:56 - faster like this is doing five five five
13:01 - cycles per frame of animation so to make
13:04 - this more clear what if I did 100 cycles
13:07 - per frame of animation whoops
13:11 - you can see that this is happening much
13:13 - faster now
13:14 - Oh Oh whoops we have an error array out
13:18 - of bounds exception okay where did I not
13:22 - what did I not do correctly uh if it's
13:25 - greater than with minus 1 greater than
13:29 - height minus 1 okay good thing I check
13:30 - that let's try this again yeah there we
13:35 - go so we're gonna get some pretty crazy
13:40 - patterns after a while and I'm sure you
13:44 - could be clever and think about like
13:46 - modifying the rules to use color maybe
13:48 - get of multiple states so this is
13:50 - actually running super fast because
13:52 - processing can really handle doing it at
13:54 - this resolution but you know we could
13:56 - asked like what if I do this at like
13:57 - 1200 by 800 like ooh so we also had an
14:03 - error if it's not a square so I have to
14:08 - fix that I times width plus J oh my
14:13 - goodness I have this totally wrong had
14:18 - for me worked that's why I was on its
14:21 - size
14:21 - I had this formula wrong the whole time
14:22 - ah I referenced my tutorials and
14:25 - everything I just did it really quickly
14:26 - that formula was wrong I need to look at
14:29 - the row I mean sorry the column and then
14:33 - add to it the row times the width
14:36 - well glad I checked so now this is right
14:39 - so let's what I want to show you is what
14:41 - happens if I go to like 1200 by 800
14:44 - which is probably beyond the Wow so you
14:48 - know processing it really is not having
14:50 - a problem doing this super fast but I
14:53 - could make this much more efficient so
14:55 - one way that I'm going to do that is I'm
14:56 - going to make a P image and I'm gonna
14:58 - call that ant and I'm gonna say ant
15:00 - equals create image width height RGB so
15:05 - I want an RGB image and I want that to
15:09 - be white to start with so there's
15:12 - probably a way for me to do this more
15:14 - efficiently but I'm just going to set
15:17 - every pixel of that image to white so so
15:25 - I'm gonna set every pixel to white
15:28 - and I'm gonna say aunt dot load pixels
15:31 - and update pixels and then I'm going to
15:38 - instead of doing all this I'm just going
15:41 - to draw that image so that's me drawing
15:46 - the image now the only thing I need to
15:48 - do is change whatever change the state
15:53 - here so what I need to do is like I need
15:56 - to do it though before I move forward
15:57 - but we're always going to move forward
15:59 - right so that move forward doesn't
16:01 - actually have to be in there can be down
16:03 - here and I can now find that pixel
16:08 - location as X plus y times ant dot width
16:14 - right
16:16 - that's the pixel location in that image
16:18 - and now if I say ant I might not even
16:20 - need the load pixels what I'm going to
16:21 - put it in here any ant dot pixels and
16:23 - you know what I could just use set
16:25 - because I'm just doing one pixel at a
16:28 - time set will in-turn the set function
16:30 - internally calls load pixels and update
16:32 - pixels for you so I could just say ant
16:35 - set the XY to the color and so I'm gonna
16:44 - say if if grid x y equals zero then the
16:56 - then the color should be black
17:00 - so we're going to assume the color is
17:03 - white and we're going to make a color
17:07 - we're going to assume the color is white
17:09 - if it's zero we're gonna set it to black
17:11 - and then we're gonna set that pixel so
17:13 - this is me just doing that one pixel at
17:14 - a time cuz I only change one pixel per
17:16 - per frame or per cycle here I'm actually
17:20 - doing 100 you can see this is the same
17:22 - exact thing did I did it work correctly
17:25 - let's let's go back to let's let me just
17:29 - see here I think I might have a slight
17:31 - issue let's double check let's go let's
17:36 - double check that this is right by
17:37 - resetting this back to 400 by 400 doing
17:41 - this
17:42 - eleven thousand times and then saying no
17:45 - loop and let's see here did I get is
17:54 - this location correct let's see now
17:58 - let's take a look at that as compared to
18:00 - the Wikipedia again I'm doing like a
18:03 - mirror image of it but yeah that looks
18:05 - right so I think it's right so now we
18:08 - could let it run again the same way like
18:12 - let's do like we could probably do like
18:16 - five hundred perfect the thing is that
18:18 - fact that I'm doing five hundred so
18:21 - really if I want it I should really be
18:22 - smart about this and say aunt load
18:25 - pixels to be the the most optimized I
18:28 - shouldn't use set and I should say aunt
18:30 - low pixels aunt update pixels at the end
18:32 - of all of this and then I should say the
18:37 - location is X plus y times aunt ton dot
18:40 - width and I should say aunt dot pixels
18:44 - that picks location is that color so
18:48 - this would actually be the most
18:49 - optimized so I'm only calling up little
18:52 - pixel an update pixels once only
18:53 - changing the pixels that need to be
18:55 - changed and then I should be able to do
18:57 - this and what did I miss
18:58 - oh I have no loop in here still I should
19:02 - be able to do this at very high
19:03 - resolutions really fast so for example I
19:07 - can change this now to fullscreen and
19:15 - run it and it should have no problem
19:19 - doing this super fast so let's let this
19:24 - run for a little while I'll be back in a
19:27 - minute or two this will be it and you'll
19:30 - see me again after this ran for a while
19:32 - I'm back from you waiting because I
19:35 - think I got this wrong it should be
19:37 - black if it's one so hold on a sec let's
19:41 - run this again there we go
19:44 - and
19:46 - this is going to run for a while and
19:48 - then I'll be back to see what the
19:51 - pattern is okay so this is what it got -
19:55 - you can sort of think it's sort of zoom
19:56 - in here and see like what sort of
19:57 - interesting beautiful patterns are here
19:59 - someone in the chat told me there's a
20:00 - number file video about Langston's ant
20:03 - which you can get more of the background
20:04 - the history of it and the possibilities
20:06 - I would encourage you here's some things
20:08 - you could do you could refactor my code
20:09 - to make it more efficient you could
20:12 - think about how would you make this have
20:14 - color in an interesting way maybe maybe
20:16 - the grid isn't isn't just pixels maybe
20:20 - it's not even just squares maybe it's a
20:22 - grid of interesting shapes or patterns
20:24 - you use color in some way what kind of
20:26 - beautiful thing can you make from
20:27 - lenghtens and and if you want to make
20:30 - this run on the web take a look I'll
20:32 - also create a JavaScript version of this
20:34 - but again if I think if you want to get
20:35 - this sort of like fullscreen speed of it
20:37 - you're probably going to want to do it
20:38 - in processing so thanks everybody and
20:44 - see you soon
20:46 - [Music]
20:54 - you

Cleaned transcript:

okay here we are a coding challenge to this coding challenge I'm gonna do in processing and it's cool I'm going to attempt to implement this thing called Langdon's and now one thing I might recommend is go back and watch my game of life coding challenge because there's gonna be a lot of similarities between these two this is an example of another cellular automata system however I'm gonna do this one in processing so we just sort of see a different environment I will of course make a port to JavaScript so if you make your own variation of this and want to share it on the web you can look at the p5.js version of this so what do I need what I need with this first cellular automata system just like and is it atomic ah is it at um I could never get this right I need to have a twodimensional array and this is actually a place where I'm kind of happy that I'm using Java in processing where I can say I can make this grid a new twodimensional array and you know what though guess what I'm gonna do I'm gonna have every cell be an individual pixel because processing is pretty fast I could do individual pixel setting so let's instead of having like a grid of squares that are a larger size I'm gonna actually do it on the pixel by pixel level let's see how that goes so let's just decide in advance actually I don't need to decide in advance I'm going to create I'm gonna have a window that's let's just do like 200 bytes 400 by 400 to start and then so the array is going to be a new array of integers which the same nonresponse width and height and it's actually going to just fill that whole thing with zeros so I don't actually even need in Java if I was doing this in JavaScript I've got to like fill it with zeros but I could just I could just assume that it's filling it with zeros great now we should really learn what license it is let's go take a look so it's a it's a system souther automata system that will produce interesting patterns and I need to follow these rules okay so squares on a plain or colored variously either black or white so we'll say white if the ant hasn't hasn't been there that'll be oh well I guess zero it's black white is one I don't know we'll figure that out we arbitrarily identify once as the aunt so let's start that let's have the aunts location we're just gonna call that we're gonna have that just be x and y and the aunt is gonna start at 200 200 okay that's where the ants going to start I probably should say with / whatever so I'm going to say grid X y equals 1 that's where the ant is and actually to be honest with you maybe I should have that be the value 2 so I kind of 0 for what let's let's keep going here so the ant moves according to the role rules below at a white square it turns 90 degrees white right ok so actually what I want to do is each time and let's make a background of white I need to figure out what is the state of the current spot where the ant is right so this is the state of the current spot where the antis so if the ant we can look at these rules if the ant is at a white square okay and we need to keep track of its direction which way is it moving so I also need a direction and let's just be let's do something goofy and do like these because I think you're supposed to like it kind of make constants you may be you say final or something but I'm just gonna call them cap I'm gonna say like up oh that's a reserved word in in in processing ant up is 1 2 0 ant down is 1 and right is 2 this might be really silly the way that I'm doing this ant left is 3 so I'm gonna make up some constants to keep track of the direction and I need a variable called ant direction and I can just call that direction so I have I already have that I have the ants XY location and its direction it's probably nicer way of doing that but I'm gonna keep going with what I have its direction I'm just gonna start by going up that's its direction so now if add a white oh you know what I should have those in clockwise order because then I could just add one is adding one is turning right subtracting one is turning left so this should actually be up is zero right is two is one down is two and left is three so if the state is white and I'll have white be one no white should be zero because they're all starting a zero because I'm filling it with white so if the state is zero the ant should turn right meaning ant oh just Direction plus plus and I'm gonna what I'm actually going to do is I'm going to almost in a silly way write a separate function for turning right because I can I need to deal with like so this is ant this is Direction plus plus but if Direction E is greater than ant left then Direction equals ant up right so I could use modulus but I'm just gonna be sort of silly about this you can all do your nice refactoring and I'm gonna say and if it's less than ant up it's ant left so this will account for when 0 goes to negative 1 it should be 3 when 3 goes to 4 it should be 0 and again I could have done this all on one line of code with modulus but that's fine so if state is 0 turn right and then what's the next thing flip the color of the square and move forward one unit okay so then state grid X why should now be one right that's flipping and move and then move forward needs to be a function so I'm now going to write a function called move forward which is if Direction is up then Y minus minus again I could use a switch statement a case statement all that if Direction is right I could do this with all sorts of fancier ways else if but I'm just going to really try to I'm gonna really try to be longwinded about this to understand it if it's down y plus plus else if direction is left then left is X minus minus then I need to account for the edges so if X is greater than width then x equals 0 if X is else if X is less than 0 then x equals with minus 1 and again I could use modulus but I'm just gonna be super longwinded about this and I'm gonna do this for Y and I'm gonna change that to height and put Y in here and here we go ok so now I have this crazy long function a crazy long function for moving forward it should change the x and y value based on its current direction and it should wrap around the edges ok so now move forward ok else if what what could the other if it's the state is already one if there's really only one other possibility but I'll be I'll check else if state is 1 turn left turn change the state to zero and then move forward I think we're done let's just run this it's not gonna draw anything let's just run this and see if we get any errors I usually don't like to write so much code without running at first okay it's running but let's now see now all I need to do is visualize this grid and I should have probably made this the pixels are in a one dimensional array but I'm now going to loop through and I is every export column I plus plus J is every why I don't want to use x and y because I already used those for the ants and then and I could actually you know what I really could be so efficient about this because I could make this is very silly I could make an image I only have to change one pixel each frame it's really silly for me too so let's do this I can't bear I mean this let's do it this way first but I am going to refactor this because this is really ridiculous what I'm about to do so the pixel location is I times width plus J and this is a formula that I have used in countless videos and I'm going to call this pics for pixel so the actual pixel location in the window is all the pixel colors are stored in a one dimensional array and so I but I'm gonna operate on those pixels I need to say load pixels and I also need to say update pixels so I will refer you to my video tutorials about pixels in processing they'll be a if this is not infinitely to you I'll I'll link to those tutorials but basically what I need to do now is just say pixels index pix equals something like if I say color random 255 what you're gonna see here is whoops when I run this sketch is every pixel is a random color now what I want to do is I want to say if grid I J equal zero then set that pixel to white otherwise if it's equal to one but that's the only other possibility set that pixel to black and we should see this is just rendering the results of Langston's ant with each and every pixel as a cell in the grid so let's run this and we can kind of zoom in and see is this the correct pattern can anyone confirm or deny for me that this is the correct pattern let's see if it looks kind of like so this is what it should look like after eleven thousand steps all right let's stop this and I'm gonna do something I'm gonna say I'm actually just going to do this all at once I'm gonna say for int N equals zero and is less than 11,000 n plus plus I just want to know that I did this correctly I'm gonna just run through the whole algorithm 11,000 times then I'm gonna render it and I'm gonna say no loop so it's only gonna do it once okay so this is instead of watching it animate that looks pretty good right that looks exactly like hopefully dad yep I can verify that these well it's flipped but that's fine because Y is up what you could you could flip it if you want I flipped it fine okay great so that is working we're done yeah but this is this is making me crazy because I've only changed one pixel every frame so I can't bear to leave it this way I'm gonna do one there's so much refactoring of this that you could do and actually I'm going to leave that in here because one thing but just having this in here by the way and taking out the no loop like this is this I can make it appear to run much faster like this is doing five five five cycles per frame of animation so to make this more clear what if I did 100 cycles per frame of animation whoops you can see that this is happening much faster now Oh Oh whoops we have an error array out of bounds exception okay where did I not what did I not do correctly uh if it's greater than with minus 1 greater than height minus 1 okay good thing I check that let's try this again yeah there we go so we're gonna get some pretty crazy patterns after a while and I'm sure you could be clever and think about like modifying the rules to use color maybe get of multiple states so this is actually running super fast because processing can really handle doing it at this resolution but you know we could asked like what if I do this at like 1200 by 800 like ooh so we also had an error if it's not a square so I have to fix that I times width plus J oh my goodness I have this totally wrong had for me worked that's why I was on its size I had this formula wrong the whole time ah I referenced my tutorials and everything I just did it really quickly that formula was wrong I need to look at the row I mean sorry the column and then add to it the row times the width well glad I checked so now this is right so let's what I want to show you is what happens if I go to like 1200 by 800 which is probably beyond the Wow so you know processing it really is not having a problem doing this super fast but I could make this much more efficient so one way that I'm going to do that is I'm going to make a P image and I'm gonna call that ant and I'm gonna say ant equals create image width height RGB so I want an RGB image and I want that to be white to start with so there's probably a way for me to do this more efficiently but I'm just going to set every pixel of that image to white so so I'm gonna set every pixel to white and I'm gonna say aunt dot load pixels and update pixels and then I'm going to instead of doing all this I'm just going to draw that image so that's me drawing the image now the only thing I need to do is change whatever change the state here so what I need to do is like I need to do it though before I move forward but we're always going to move forward right so that move forward doesn't actually have to be in there can be down here and I can now find that pixel location as X plus y times ant dot width right that's the pixel location in that image and now if I say ant I might not even need the load pixels what I'm going to put it in here any ant dot pixels and you know what I could just use set because I'm just doing one pixel at a time set will inturn the set function internally calls load pixels and update pixels for you so I could just say ant set the XY to the color and so I'm gonna say if if grid x y equals zero then the then the color should be black so we're going to assume the color is white and we're going to make a color we're going to assume the color is white if it's zero we're gonna set it to black and then we're gonna set that pixel so this is me just doing that one pixel at a time cuz I only change one pixel per per frame or per cycle here I'm actually doing 100 you can see this is the same exact thing did I did it work correctly let's let's go back to let's let me just see here I think I might have a slight issue let's double check let's go let's double check that this is right by resetting this back to 400 by 400 doing this eleven thousand times and then saying no loop and let's see here did I get is this location correct let's see now let's take a look at that as compared to the Wikipedia again I'm doing like a mirror image of it but yeah that looks right so I think it's right so now we could let it run again the same way like let's do like we could probably do like five hundred perfect the thing is that fact that I'm doing five hundred so really if I want it I should really be smart about this and say aunt load pixels to be the the most optimized I shouldn't use set and I should say aunt low pixels aunt update pixels at the end of all of this and then I should say the location is X plus y times aunt ton dot width and I should say aunt dot pixels that picks location is that color so this would actually be the most optimized so I'm only calling up little pixel an update pixels once only changing the pixels that need to be changed and then I should be able to do this and what did I miss oh I have no loop in here still I should be able to do this at very high resolutions really fast so for example I can change this now to fullscreen and run it and it should have no problem doing this super fast so let's let this run for a little while I'll be back in a minute or two this will be it and you'll see me again after this ran for a while I'm back from you waiting because I think I got this wrong it should be black if it's one so hold on a sec let's run this again there we go and this is going to run for a while and then I'll be back to see what the pattern is okay so this is what it got you can sort of think it's sort of zoom in here and see like what sort of interesting beautiful patterns are here someone in the chat told me there's a number file video about Langston's ant which you can get more of the background the history of it and the possibilities I would encourage you here's some things you could do you could refactor my code to make it more efficient you could think about how would you make this have color in an interesting way maybe maybe the grid isn't isn't just pixels maybe it's not even just squares maybe it's a grid of interesting shapes or patterns you use color in some way what kind of beautiful thing can you make from lenghtens and and if you want to make this run on the web take a look I'll also create a JavaScript version of this but again if I think if you want to get this sort of like fullscreen speed of it you're probably going to want to do it in processing so thanks everybody and see you soon you
