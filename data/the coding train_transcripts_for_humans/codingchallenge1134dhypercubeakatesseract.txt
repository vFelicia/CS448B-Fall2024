With timestamps:

00:00 - (whistle blowing)
00:02 - (suspenseful music)
00:04 - - Welcome to A Coding
Challenge, where I will enter...
00:13 - The fourth dimension.
00:17 - Well, I didn't really time
it, I expected some dramatic
00:19 - moment to happen with the music
there but it didn't happen.
00:21 - So alright, this is A Coding Challenge,
00:24 - I am so crazily excited about this.
00:26 - If this actually works I think
that, I don't know what's
00:29 - gonna happen, stuff will just
like, smoke, and brain matter
00:33 - will start just like
leaking out of my nostrils.
00:36 - I don't even know, so wait 'til
00:38 - the end of this video to see.
00:39 - Now what I'm starting with
here looks like a plain old
00:42 - spinning cube and actually
that's what it is.
00:45 - What I wanna do is not
just make a plain old
00:48 - spinning cube in three dimensions,
00:51 - I wanna make a hypercube
spinning in the...
00:59 - (suspenseful music)
01:02 - Fourth dimension.
01:04 - So I want to make something
that looks like this, right?
01:10 - So this is a hypercube,
otherwise known as a tesseract.
01:16 - And I'm gonna, before I
start coding any of this
01:18 - I'm gonna explain to you
what that is exactly.
01:21 - So let me come over here, so I,
01:25 - I think my favorite
dimension is one dimension.
01:27 - No, zero, let's start
with zero dimensions.
01:30 - A point is a shape that
exists in 0D, that's a zero.
01:38 - Now the line which is bound
by two points is something
01:44 - that exists in one dimensional space.
01:47 - This is one dimensional space.
01:50 - A rectangle, a square, a
plane which is bound by one,
01:55 - two, three, four lines exists
in two dimensional space.
02:00 - Now notice the pattern here.
02:02 - This is bound by two lines,
this is bound by four.
02:10 - I'm sorry, this is bound by two points,
02:13 - this is bound by four lines.
02:15 - Now if I create two planes
and then connect all the edges
02:23 - I have what is commonly
referred to as a cube.
02:27 - This is something that
exists in three dimensions,
02:30 - are the number of dimensions
that we live in on this planet
02:35 - where we live and it
is bound by six planes.
02:40 - So you can see a pattern here.
02:41 - I was gonna say you double
it but this is not bound
02:44 - by anything I guess so
this sorta makes sense.
02:45 - This is bound by zero things,
this is the beginning.
02:48 - Now what does it mean, then,
to have four dimensions?
02:53 - Well I'm not really gonna be
able to draw this too easily
02:57 - but we could make the case,
right, if I'm following this
03:02 - pattern, that four dimensions
is bound by eight cubes.
03:08 - And this is mathematically
true, this is accurate.
03:13 - The problem is I'm gonna sit here
03:15 - and I'm gonna visualize this in my head.
03:20 - Are you doing this with me?
03:22 - I can't, I just cannot do it at all.
03:25 - Human beings did not evolve
to understand the world
03:28 - in an dimensions higher than three.
03:36 - Anyway, I could keep going
on about this since this
03:38 - is a mathematical truth,
why isn't there some way
03:43 - that we could somehow
unlock is and see this
03:46 - on a computer screen in some way?
03:48 - And in fact, there is, so this is how.
03:51 - How do we even see this?
03:53 - How do we even see this 3D
shape on a 2D computer screen?
03:58 - Well the way we do that is by writing code
04:02 - like this one that I've done right here.
04:04 - Now the truth of the
matter is, in processing,
04:06 - which the programming language environment
04:09 - I'm using right now, I could just say box
04:10 - and I would get that because
I'm in the P3D renderer.
04:13 - And the P3D renderer knows
how to take the mathematics
04:16 - of a 3D shape and project
it into a 2D canvas
04:19 - to create the illusion
of the third dimension.
04:22 - And it totally makes sense to our brains
04:23 - 'cause we're so used to 3D.
04:25 - We can imagine it, we
can see the 2D version
04:27 - of it and imagine it in three dimensions.
04:33 - And I did, you don't have
to have watched that video
04:36 - to watch this one but
I did a whole previous
04:38 - Coding Challenge where I made exactly this
04:40 - put only using the P2D renderer.
04:42 - So I did the math of taking
3D points and projecting
04:45 - them into 2D, so if I can
do that, why can't I create
04:51 - the math for a 4D shape,
do the projection into 3D
04:57 - and render it with the P3D renderer?
05:00 - The truth of the matter
is I could then project it
05:01 - into 2D and render it with
the P2D renderer as well,
05:04 - but I'm lazy, I'm just
gonna do one projection.
05:06 - And if this is true there's no
reason why I couldn't create
05:09 - a 5D shape and a 6D shape and a 7D shape.
05:12 - And I project 7D into 6D into 5D into 4D
05:14 - and then into 3D and visualize it.
05:16 - So this is what I'm going to
attempt to do in this video.
05:20 - It is going to require matrices.
05:25 - There are other ways to do it without it
05:27 - or create the visual
illusion of it but I'm going
05:29 - to be using matrices and the matrices
05:30 - are going to be used for a couple things.
05:32 - I need a projection
matrix, this is a matrix
05:37 - that takes a 4D point and
turns it into a 3D point.
05:43 - And I'm going to also
need a rotation matrix.
05:47 - I don't need the rotation
matrix but the rotation matrix
05:50 - is what's gonna make this fun
(laughs) because I can start
05:53 - to rotate around weird axis
to see crazy things happen.
05:56 - So this is kind of like optional
but this is what's gonna
06:00 - make the visualizations, so
I'm gonna do the most basic
06:02 - wire frame version of this and
hopefully you are then going
06:08 - to make beautiful, interesting,
weird things about this.
06:10 - If somebody watching this, but who can go
06:13 - to the highest dimension
possible in processing?
06:16 - I would like to see that as a challenge.
06:18 - Now if you want to learn more
or see a condensed version
06:21 - of the explanation of what
the tester act is and how this
06:25 - works I would highly recommend,
for me, I'm making this
06:29 - coding challenge because
of this particular video.
06:31 - From, how do you pronounce that?
06:35 - Anybody know how you say this?
06:38 - (laughs) Okay, I can't figure out how
06:40 - to pronounce it, I'm gonna guess, LeiosOS.
06:43 - But this is a wonderful,
wonderful YouTube channel
06:44 - with many excellent
explanatory videos and this one
06:46 - about understanding 4D, the
tesseract, is excellent.
06:50 - So you could pause this, go watch that,
06:52 - come back later, all of the above.
06:55 - Okay, alright so now I think
we're good, we're good,
06:57 - we're good, and I minimize
the browser and here I am.
06:59 - Okay, alright, now what do I need?
07:03 - The first thing I need
to do, if I'm gonna make
07:05 - something 4D, to do something
in 3D I make heavy use
07:09 - of this idea of a PVector which is a data
07:13 - structure that holds an X, Y, and a Z.
07:17 - I need something that can
hold an X, Y, Z, and W
07:20 - for that fourth dimension
so I'm gonna make a new tab
07:24 - and I'm gonna call it P4
Vector and I'm gonna say
07:27 - class P4 Vector and
I'm going to say it has
07:32 - an X, Y, Z, and a W and
it needs a constructor.
07:38 - And it can get a X, a Y, a Z, and a W.
07:44 - And then I'm gonna say
this.x, isn't it fun when you
07:49 - have to use the this. in java
'cause it's like so rare?
07:52 - Every once in a while you do.
07:54 - Z, W, X, Y, Z, W, so now
this is my P4 Vector.
08:01 - Alright, P4 Vector, there
we go, and now I am going
08:07 - to make this cube, this
very cube, all the points
08:11 - of the cube and actually
one thing I want to do
08:13 - just not, I'll leave it right
now, I'm gonna make it in 4D.
08:18 - Zero, zero, the fourth dimension (yells).
08:24 - (suspenseful music)
08:27 - And then while I'm adding
the fourth dimension
08:30 - I gotta change these P4 Vector.
08:32 - Then I've gotta change
this P4 Vector, P4 Vector.
08:39 - And now this stuff I'm
gonna worry about later.
08:43 - (suspenseful music)
08:48 - And let's see, we're gonna watch,
08:50 - it's gonna be four
dimensions now, everybody.
08:52 - Here it comes, four dimensions.
08:55 - Look away (yells).
08:57 - This is the same exact cube, right?
09:00 - It's the same, is that four dimensions?
09:02 - Oh I'm so confused.
09:05 - Well how are you even going
to see this fourth dimension?
09:10 - First of all, all the points are on zero.
09:13 - So what you can think
about it is it's flat.
09:15 - I took a four dimensional
shape and flattened it,
09:18 - flattened it, you know,
we say flat 'cause usually
09:21 - we're taking a three dimensional
shape and flattening it
09:23 - into 2D so a cube if you flatten
it would just be a square.
09:27 - So I took this hypercube and
flattened it and I just have
09:29 - the cube so I need to make the hypercube.
09:32 - You know what, I'm gonna,
against my better judgment
09:36 - (laughs) I'm just gonna extend
this array to have 16 points.
09:41 - Right, a hypercube is made
up of 16 vertices because
09:45 - it's basically two cubes with
all the points connected.
09:49 - So I am going to, I was
gonna make like a cube object
09:53 - and a hypercube as two cubes
but I'm gonna just keep going.
09:55 - So I'm gonna say eight,
nine, 10, 11, 12, 13, 14, 15.
10:04 - And then I'm actually
gonna put this in 4D.
10:07 - So all of these zeroes,
right, they should all be 100.
10:13 - The rest of them at negative 100.
10:15 - I know I'm doing this
in a highly manual way
10:18 - but first of all I find it
kinda relaxing sometimes
10:20 - just to sit here and copy
paste the same thing over
10:23 - and over again, you should
try it, it's very soothing.
10:25 - And then also I can
always refactor it later
10:29 - but just so I really know
that it's working, okay.
10:31 - I've got 16 four
dimensional points, (gasps),
10:35 - I am going to now draw them again.
10:39 - (suspenseful music)
10:47 - Okay, so it still just
looks like those points.
10:52 - What's missing here?
10:53 - Well I'm not actually doing the projection
10:55 - so now it's time for me, like,
I'm just taking the 4D point,
10:59 - ignoring that v.w part and
then doing a projection.
11:05 - So really what I need to
do right now is think about
11:09 - how I do the projection
so I'm gonna create
11:13 - a projection matrix for a 4D point.
11:19 - So this is the point X,Y,W,Z.
11:22 - The projection matrix to take a 4D point
11:26 - and turn it into, oh wait, X, Y, Z, W.
11:31 - And project it into something
I can draw in 3D, X,Y,Z.
11:37 - The idea is I want to look at
the shadow of the 4D object in
11:41 - 3D, just like I might look at
the shadow of a 3D object in
11:44 - 2D so to do that I need a
matrix that has four columns and
11:54 - three rows so the typical way
to do that would be like this.
11:59 - One, zero, zero, zero,
zero, one, zero, zero.
12:02 - Zero, zero, one, zero, right,
I think I got everything.
12:08 - The idea here, if I
actually use this matrix
12:11 - and perform matrix
multiplication which I'll link
12:14 - to two videos where I go
through that in more detail,
12:16 - this actually gives me literally this.
12:19 - It's like, just chopping off the W.
12:21 - So let's actually put this in
our code and see what happens.
12:25 - So I'm gonna create a matrix.
12:26 - Now one thing I didn't
mention is I'm working with
12:29 - a set of helper functions and
I worked these functions out
12:33 - into separate video if you're
interested but it's not,
12:36 - too much, it's way too
much to be in this video.
12:38 - That has actually the matrix
multiplication math in it,
12:42 - as well as some helper stuff to do matrix
12:45 - multiplication with a matrix and a vector.
12:47 - I'm gonna have to change
this to P4 Vector,
12:49 - I'm just realizing that,
but that's no problem.
12:51 - Okay so what I first want to do
12:54 - is create that projection matrix.
12:58 - So I'm just gonna do it right
here as a local variable
13:02 - and a little bit later it'll
sort of make sense why.
13:05 - So I'm gonna say, float projection equals,
13:09 - so I need to make that matrix
which is an array or arrays.
13:15 - So there are three rows, 0,
1, 0, 0, and then 0, 0, 1, 0.
13:26 - This is the equivalent of
orthographic projection,
13:29 - if you've heard that term before.
13:31 - Okay so now we've done that,
then what I'm gonna say is,
13:36 - P4 Vector, actually P
Vector, I don't need it to be
13:41 - a P4 Vector, I'm taking the 3D point.
13:44 - P Vector equals matrix multiplication,
13:51 - the projection times V, okay?
13:55 - So now it's telling me
it doesn't know how to do
13:58 - matrix multiplication
with a projection, matrix,
14:02 - and V which is a P4
Vector, which is strange
14:05 - because if I go in here it
has a function to matrix
14:08 - multiply a two dimensional
array and a P Vector.
14:13 - But I need this to be a P4 Vector, okay.
14:16 - Oh, Vec to matrix, doesn't
know how to make a P4 Vector,
14:20 - so I'm just gonna change these
functions to deal with 4D.
14:25 - M3 equals VW, so again if you
wanna see on a separate video
14:35 - where I wrote all this code
and now I'm just adjusting it
14:38 - to add this fourth dimension.
14:41 - And then matrix to vec is
going to be, you know what,
14:50 - I'm gonna always be
doing this, this is fine,
14:54 - this stays the same, so that
stays the same 'cause I still
14:57 - want, what I'm gonna get is
a 3D vector inside a matrix
15:02 - and I want to turn it into
a P Vector so let's see.
15:05 - Nobody's complaining at
me and now I wanna look
15:08 - at the projected points,
projected, projected, projected.
15:14 - Here we go, oh what's wrong here?
15:18 - Vec to matrix... array
out of bounds exception.
15:25 - I have an error somewhere,
where is this called?
15:29 - Oh this has to be four,
this has to be a four.
15:31 - So I forget that I'm in java
and I really have to specify
15:35 - types and lengths of things
so that has to be a four.
15:38 - Is there anywhere else
where I need to do that?
15:40 - We'll find out soon enough.
15:42 - Okay, let's try this one more time,
15:44 - we're entering the fourth dimension.
15:47 - Whoa, okay, it's still the same (yelling).
15:50 - Why? There are eight
points in four dimensions.
15:53 - Well guess what, if I took a
cube and I showed it to you
15:57 - in orthographic projection
facing the camera basically
16:01 - it would look like just four points.
16:02 - The four points on the back
of the cube would be sitting
16:05 - right exactly behind the
four points at the front
16:08 - and you wouldn't see them as different.
16:09 - Same thing is going on here,
so what I actually need
16:12 - is not orthographic projection,
I need stereographic
16:15 - projection, I need to
create that perspective.
16:17 - And the way to do that is
with moving, sort of thinking
16:23 - of a light source that
has a certain distance
16:26 - from the object that I'm casting a shadow.
16:28 - So I'm gonna create a variable,
distance, and this is going
16:32 - to be, oh, you know one thing
I really should do is I'm
16:35 - gonna take all these 100s and
make them just the number one.
16:39 - I'm gonna normalize my
shape to just have all ones,
16:42 - it looks like a completely
insane person wrote this code.
16:45 - And in fact, a completely insane
person did write that code.
16:48 - So I'm gonna think of the
camera as two units away
16:56 - and then the projection W is
one divided by that distance
17:03 - minus V.W, this is a sort
of tried and true formula
17:08 - for creating perspective projection.
17:11 - And then I can put that W in
here and now see what happens.
17:17 - Do we have four dimensions?
17:19 - Oh, I'm so close, I'm so close.
17:22 - So I forgot that all my numbers are one
17:23 - so I'm just gonna scale,
there's a variety of ways
17:26 - I could scale things up but I'm
just gonna do it right here.
17:28 - So I multiply by 100 and
now, oh look at that.
17:33 - It kinda looks like that tesseract thing.
17:38 - Wait a second, wait a second,
wait a second, wait a second.
17:41 - Oh this crazy, oh I
gotta connect the lines.
17:43 - So first of all I need more,
I guess I should make this
17:45 - smaller, let's make
this 50, do you see it?
17:50 - That's that tesseract looking
thing, the fourth dimension.
17:53 - (yells) Our brains can't do this.
17:57 - Connecting it will help, I'm
gonna connect all the lines.
17:59 - Let's do that, I had a
function that connects all
18:05 - the edges, I think I did this in the video
18:08 - where I was just making a cube.
18:09 - And these are P4 Vectors
now, oh no they're not,
18:14 - they're still P Vectors
and I need to connect, oh,
18:17 - I need to make, alright,
everything's going to be okay,
18:20 - everybody, I'm gonna make
an array P Vector projected.
18:28 - Projected 3D which is an
array is a new P Vector
18:34 - also with 16 points in it
and I'm just gonna take
18:38 - projected 3D index I, there's no index,
18:44 - I'm gonna add an index, that is,
18:46 - I'm using this enhanced loop,
I probably should just make it
18:49 - a four loop, let's make it a four loop.
18:50 - I got time to do that,
you'll watch me do this.
18:54 - Four int I equals zero, I
is less than points.length,
18:58 - I plus plus and then P4 Vector
V equals points index I.
19:06 - So I'm manually iterating
through it because now
19:08 - I can have this index and
then with this index, here,
19:12 - I can say I equals that
projected V, projected,
19:16 - and then I can still draw
these here but now I can say
19:22 - projected 3D so I want to
connect the various points there.
19:29 - And so now I should see,
that's just one, oh right,
19:32 - 'cause I gotta do this twice.
19:35 - Oh no, I gotta do this all the way.
19:37 - Oh, this is confusing (laughs).
19:42 - I gotta use the second half
of the array which would be
19:44 - from like eight to 12, I don't know.
19:50 - I equals eight...
(groans) that's not right.
19:58 - Seven? Zero, one, two, three,
four, five, six, seven.
20:04 - Eight, zero to four
because if I want all the,
20:09 - oh modulus, modulus is four plus eight.
20:13 - Oh I made a horrorshow out of this.
20:21 - I went out of bounds, stop the presses!
21:34 - Okay, I now realize that,
I try not to do this,
21:38 - I try to have my videos
be very self contained
21:40 - and there's, you know,
there's a few things that you
21:43 - might have to watch a
previous video for but I think
21:45 - it's worth explaining
this just for a second.
21:49 - So basically what I did
in this connect function
21:53 - is this is a connect function
to just take two of the points
21:56 - and draw a line between them,
and to draw a cube, right,
21:59 - normally I might just say
box or begin shape, end shape
22:02 - and it's gonna sort of like
make all these connections
22:08 - for me but what I'm doing,
what I'm doing is I basically
22:11 - have points zero, one,
two, three, four, five,
22:16 - actually it's zero, one, two,
three, four, five, six, seven.
22:24 - So that function is basically
saying, connect zero and one,
22:27 - connect one and two,
connect two and three,
22:30 - connect three and zero,
connect four and five,
22:32 - connect five and six,
connect six and seven,
22:35 - connect seven and four and
then connect zero and four,
22:39 - one and five, two and
six, three and seven.
22:41 - That's what that function is doing.
22:43 - And so now I have two of them.
22:46 - If I have another one,
basically, it's along the four
22:50 - dimensional axis, I don't
even know where to draw that.
22:53 - SO first of all all of
its points start at eight,
22:57 - nine, 10, 11, 12, and this is
not, somebody watching this
23:03 - will give me some nice
adjustments about how
23:05 - to completely refactor
this in a better way.
23:07 - But you can see now I just
need to connect these.
23:10 - So the way I think I'm gonna approach that
23:13 - is by I'm gonna add another,
I think if I just add, like,
23:20 - an offset, like I can add an
offset, this is kinda silly.
23:26 - Here and then that offset could be zero.
23:34 - And then that offset
could be seven, right,
23:39 - 'cause then just want to do this.
23:41 - And so this would just be I
plus offset, J plus offset,
23:47 - so if I do this twice, and again
I could do this in one loop
23:54 - right, I could add an offset
that's eight, is it eight?
23:58 - I think it's eight.
24:01 - There we go, ha, so now you
can see I connected both cubes.
24:05 - Now interestingly enough,
what's the fourth dimension
24:08 - with this kind of perspective?
24:10 - The fourth dimension
is actually like, is W.
24:15 - W is expressed as kind of the
distance between these cubes.
24:18 - Again we can only think about
it, I can only describe it
24:20 - to you in three dimensional terms.
24:23 - So for example you see this
here, like if I were to put
24:27 - one of these points like at negative five,
24:33 - look, it's all the way out there.
24:35 - So this hypercube isn't
perfectly symmetrical.
24:37 - One of the points, it's W
location, is all the way out
24:41 - along that axis and I make
this a variable and I could
24:43 - slide it around and do stuff like that,
24:44 - but I'm not gonna do that.
24:46 - I haven't actually finished
the connections, though,
24:48 - because what I want here is
I need to connect all these
24:51 - points to those points
for the visualization
24:53 - to be fully complete, that's
actually gonna be pretty easy.
24:56 - Because all I'm doing in
my array of 16 points,
24:59 - zero connects to eight,
one connects to nine,
25:02 - four connects to 12,
five connects to three.
25:03 - So that's actually easy,
that's just another loop
25:08 - all the way through all the
points and I'm gonna have
25:13 - with an offset of zero I
connected to I plus eight.
25:20 - So this should do this
last set of connections.
25:24 - Whoops, no somethings wrong here.
25:26 - Oh, no, no, I only need to
go through half the points
25:31 - 'cause the first half are
connected to the second bunch.
25:33 - Alright, is this right?
25:36 - This looks right to me.
25:37 - Oh why is it going towards the center?
25:38 - Something is wrong here.
25:41 - (bell ringing)
25:43 - (whining)
25:45 - Okay so if you're out of abrupt
edit, you're not watching
25:47 - this live, you're watching
the recorded version, I just
25:50 - spent about 45 minutes
trying to debug a problem
25:53 - and I went off completely
in the wrong direction.
25:54 - Although it was a really interesting,
25:57 - lots of interesting
tangents, I encourage you,
25:59 - I'll link to the time
code of the livestream
26:00 - where you can watch that whole part.
26:02 - But I was trying to figure
out why these points
26:04 - aren't connecting properly
an I started doing things
26:07 - like drawing numbers
where all the points were
26:09 - and all sorts of stuff,
but actually the mistake,
26:12 - which you may have already
seen and been singing to me
26:15 - about it, perhaps, is right here.
26:17 - Notice these parenthesis
here, the formula for the
26:19 - perspective projection
requires one minus one
26:21 - divided by the distance
minus the actual W point.
26:25 - As soon as I put that
in now all of the points
26:28 - are in the right place
and those connections
26:31 - are doing what they should do.
26:33 - The actual draw points
are little bit too large
26:36 - for my taste right now, I'm
gonna take this to eight.
26:41 - And this looks better now, okay.
26:43 - So there we can see, there's
our hyper cube in 3D.
26:48 - Sort of, okay, let's take
a deep breath here 'cause
26:51 - that was a lot of stuff and I
gotta figure out where I am.
26:54 - Oh, oh yes, rotation (laughs),
before I get to rotation
27:00 - actually let me just mention
one more thing about this.
27:02 - It was pointed out in
the chat by many people
27:04 - that instead of trying to
write some kind of kooky,
27:08 - nonsensical, crazy person
algorithm like I did here
27:11 - to figure out where all
the connections are,
27:13 - that you could actually
just test for unit distance
27:15 - between the points, right,
because if you think about
27:17 - a square, right, you don't
connect the diagonals
27:19 - 'cause they're not distance,
they have a different distance.
27:22 - So if I look at the distance
between all the points
27:24 - I'll find all the connections there.
27:26 - So that's an interesting
side project for any of you
27:28 - as an extra to do while
you're watching this.
27:30 - But I wanna talk about rotation.
27:32 - So how is this rotation even
happening in the first place?
27:34 - I'm rotating in the third dimension,
27:36 - which is not really what I wanna do.
27:38 - I wanna rotate in the fourth dimension,
27:40 - then project that down
to the third dimension.
27:42 - So let's try to back up, let's
try to create exactly this
27:45 - by rotating in the
fourth dimension and then
27:47 - projecting back down
in the third dimension.
27:49 - The reason why I'm not
actually doing the rotation
27:51 - in the fourth dimension is
'cause the rotation is happening
27:54 - right here with the built
in native rotate Y function.
27:57 - That means rotating around the Y axis.
27:59 - So how does rotation actually happen?
28:02 - Well rotation happens
with a rotation matrix.
28:07 - So here I am on the Wikipedia
page and you can see
28:09 - this rotation matrix right here.
28:11 - So let's come back over here
and let's think about that.
28:14 - So this is rotation
matrix, cosign of theta,
28:19 - negative sign of theta, sign
of theta, cosign of theta.
28:24 - Did I get that right, looks like I did.
28:26 - Alright so this is a 2D rotation matrix.
28:29 - If I were to take this
rotation matrix and do a matrix
28:33 - multiplication with any given
2D point this is exactly
28:37 - the math behind rotate
in processing byte data.
28:43 - This is exactly that.
28:44 - So then what is the math behind
28:47 - rotate Y or rotate X or rotate Z?
28:53 - And in fact is indeed
also a rotation matrix
28:56 - only it's three by three rotation matrix.
28:59 - And in fact if I come over
here on this Wikipedia page
29:03 - about rotation matrices
and keep scrolling,
29:05 - keep scrolling and keep
scrolling and keep scrolling,
29:07 - there we go, here it is,
this is the rotation matrix
29:10 - for around the Y axis and you
can see a pattern here, right?
29:14 - That's that 2D rotation but
it's here within the Y and Z
29:18 - which is rotating around the X axis.
29:19 - Same pattern but between the
X and the Z, between the X
29:23 - and the Y, that's how I get
all those different rotations.
29:25 - But I wanna do this in four
dimensions so what I need
29:29 - do to, rotation in four
dimensions, is the following.
29:36 - I need to pick which axis
I want and I need a four
29:39 - by four matrix and in this
case the axis that I want,
29:44 - I'm gonna use the X and
Y axis and I'm gonna say
29:48 - cosign theta, negative sign
theta, sign theta, cosign theta.
29:55 - Oh and this has to be a one, apologies,
29:58 - and this has to be a
one, right, 'cause it's
30:01 - the identity matrix
for Y and Z, basically.
30:04 - The identity being just
a one in those areas.
30:08 - So I don't know if that's
actually the right way
30:11 - to phrase it but anyway
this is the rotation matrix.
30:13 - I'm gonna call this, for
4D, this is rotation X, Y.
30:17 - And actually what I was doing
in rotate Y would be X, Z.
30:21 - But anyway, we come back to
the computer, I'm going to
30:24 - comment out rotate Y, so
now there's no rotation.
30:28 - And actually just to be
clear I'm gonna start with
30:33 - rotate X, no rotate Z, I
think that'll be the simplest.
30:36 - So I'm gonna start with rotate Z,
30:38 - so I'm gonna recreate exactly this.
30:40 - This doesn't look super interesting
'cause of how flat it is
30:43 - but that's what I'm going to start with.
30:45 - 'Cause I think that'll
be the easiest one to do.
30:46 - I want to recreate that with the matrix.
30:49 - So the first thing I
have to do is before I do
30:51 - the projection I have to
create a rotation matrix
30:56 - and I'm gonna call this X, Y rotation.
30:58 - And that is going to
equal a matrix that has,
31:02 - I forgot already, cosign
of the angle, negative sign
31:06 - of the angle zero, zero, sign
of the angle, cosign of the
31:13 - angle zero, zero and then
zero, zero, one, zero, zero,
31:18 - zero, zero, one, so this
is my rotation XY matrix.
31:29 - Autoformat, there we go,
okay, so now what I need to do
31:33 - is I need to say P4 Vector,
right, I wanna get a rotated
31:38 - point which is the rotation,
which is the matrix
31:43 - multiplication result of the
rotation matrix X,Y with V.
31:48 - That point V, now this is
telling me it doesn't know
31:52 - how to do this, remember I have
all those helper functions?
31:55 - The helper functions do
these matrix multiplication
31:58 - operations, well I do
have a helper function,
32:01 - a matrix times a P4 Vector, I have that.
32:03 - But look at it, it returns
a P Vector 'cause I have
32:06 - the one to give me a 3P Vector back.
32:09 - I should probably just leave
everything as P4 Vectors,
32:12 - it would make our life so much easier.
32:14 - There's not really any
reason for me to use P Vector
32:16 - at this point 'cause I
could always, but I'm gonna,
32:18 - I've done what I've done (laughs).
32:21 - We can think about refactoring
it later which is like
32:24 - a little bit of my mantra
and I'm going to say...
32:29 - This still works, so I wanna say if,
32:32 - so this is matrix to vec,
I need another one of these
32:40 - which does, I'm just
gonna write this function.
32:43 - I don't think I need this anymore
32:45 - 'cause it's always gonna
have three dimensions.
32:46 - That was sort of an extra
thing, just to simplify this
32:49 - I'm gonna make another
function that's gonna be called
32:52 - matrix to vec four, and I'll
make a P4 Vector and then
32:56 - I'm gonna say V.W is this, so
I made a different function
33:00 - and this returns a P4 vector, P4 Vector.
33:04 - So I just made a helper
function that takes a,
33:06 - oh I don't have that up,
zero, zero, zero, zero.
33:10 - That basically takes a matrix
that has one column, right,
33:20 - this is what it is, it's
a matrix with one column
33:23 - and four rows and turns
this into a P4 Vector.
33:27 - I need that because down
here I now want to say,
33:35 - I'm gonna say results
equals matmul A and M
33:42 - and then I'm going to
say, if result.length.
33:47 - So how many rows, do I
have four rows or not?
33:50 - Equals four, then return, oh no wait,
33:56 - I can't have it return
two different types.
33:58 - I'll just have to do this,
oh, java is a weird place.
34:03 - Right, it can't return
something of a different type.
34:07 - So I'm gonna just pass
a bullion in (laughs).
34:10 - I'm gonna pass our
dimensions like int dim.
34:16 - So I don't even need to figure it out,
34:18 - if dimensions equal four,
oh no it's the same problem.
34:24 - Oh, oh I couldn't, oh no,
I could just overload it.
34:27 - Alright, I'm gonna overload
it, sorry everybody.
34:29 - So this is... Sorry for these digressions
34:33 - and making this video
extra long, yay for me.
34:37 - This is what it was before, right?
34:40 - Returning a matrix to vec, oh no, return,
34:49 - sorry, sorry everybody, this...
34:53 - There, this is what it was before.
34:55 - Now what I'm gonna do is I'm gonna just,
34:57 - this is very awkward but I'm gonna add,
35:00 - I'm gonna say a bullion or a
fourth, this is sort of silly,
35:07 - and I'm just gonna say, matrix to vec four
35:09 - and it returns a P4 Vector.
35:12 - Okay so I made two
versions of this function.
35:14 - This is very silly, I should've just made,
35:17 - but it is what it is (laughs).
35:20 - Okay, could we get back
to what we were doing?
35:23 - Which was important, so
now I'm gonna say mat mole
35:26 - rotation X,Y true so this
should return a 4D vector
35:29 - then now I want to get the W
of the rotated vector, right?
35:39 - 'Cause I'm about to calculate
the projection matrix,
35:42 - I'm not going to use the original point,
35:44 - I want to use the point
that's been calculated
35:46 - after the rotation and now we
should see (gasps) I projected
35:57 - V again so this down here
needs to be rotated also.
36:03 - There we go, I have now created exactly
36:10 - zero rotation with my own rotation matrix.
36:13 - We're getting really close
everybody, this is very exciting.
36:15 - So now I have a rotation
X,Y, just to prove a point
36:20 - let's do rotation, what was the one we saw
36:24 - with it spinning like this?
36:26 - Let's do rotation X,Z
meaning zero goes here.
36:33 - Meaning a one goes here, a zero goes here.
36:45 - Let's look at this, is this right?
36:47 - I think this is rotation with X and Z,
36:50 - one in the Y and one in the W.
36:52 - So let's now change that
to X, Z here and then look.
36:58 - There we go, I have it
just rotating around
37:02 - what looks like the Y
axis, okay, exciting.
37:05 - Now watch this, what if I want
37:07 - to apply more than one rotation?
37:12 - So here I've rotated by XZ,
now I can just rotate again
37:17 - by rotating by X, Y, what's wrong here?
37:23 - Multiply rotation X, Y by rotated true.
37:27 - Oh so I don't want to
redeclare the variable.
37:31 - And here we go, now we see both rotation.
37:34 - But everything still feels
very much like all I did
37:37 - was make two 3D cubes
and connect the corners.
37:40 - So that's what you're
seeing, right, because that's
37:43 - the shadow of what the
four dimensional shape
37:48 - in the only way our
brains can process, 3D.
37:51 - But let's really try to stretch
our brains for a second.
37:55 - What if I include, this
is really where things
37:57 - are gonna go nuts, what
if I include the W axis?
38:02 - What does it mean to
rotate around the W axis?
38:04 - Think about that for a second.
38:06 - Okay rotate around the
Y, rotate around the X,
38:10 - rotate around the Z,
(making strange noises),
38:14 - you can't even, that W axis
that was kind of like extruding,
38:17 - who knows what that's even gonna be.
38:19 - Let's see what that looks like.
38:20 - We are now really about to
enter the fourth dimension.
38:24 - Okay, okay, okay, let's
try, what do I want?
38:27 - X, W, I don't know what's
a good one to start with.
38:30 - Let's try X, W, so I'm gonna
make a rotation matrix X, W.
38:36 - Okay here we go, so X
and a zero goes here,
38:40 - then that stays the
same then this should be
38:44 - in the bottom and a zero goes
here, get rid of this comma,
38:49 - get rid of this zero, and
then the one goes here.
38:53 - So let's actually just for,
I'm afraid to add too many
38:58 - rotations so let's do X, W
and let's comment these out.
39:09 - So I am only using rotation
around the X, W axis.
39:20 - We're entering the fourth dimension.
39:22 - (suspenseful music)
39:31 - This isn't right (laughs).
39:36 - (buzzer buzzing)
39:38 - Something is wrong there.
39:40 - It did something
interesting though (laughs).
39:43 - Alright, what's it that, oh,
you know what most people do,
39:46 - I think actually, is not
Z, W, so let's do Z, W.
39:52 - (laughs) Let's put this
here and then these go away.
39:59 - I mean, I just wanna see that
I'm doing this correctly.
40:04 - And then this would be
one, zero, zero, one,
40:08 - so let's try Z, W and
let's see what this does.
40:16 - Okay this is actually correct.
40:18 - Now it looks really weird but
I think I'm gonna be able to
40:23 - fix this, I'm just gonna
do something really quickly
40:26 - just as a test, just want to
like rotate it on its side.
40:36 - It would be this side.
40:41 - No, something is still wrong.
40:44 - (bell ringing)
40:45 - I'm back again, I was trying
to figure out why this
40:48 - was wrong and then I realized,
oh, this is actually right.
40:50 - I'm used to seeing a certain
pattern and I've just got
40:54 - the viewing angle slightly
wrong or slightly different.
40:57 - So basically let me comment
this line rotate Y out.
41:01 - The two rotations that I'm
doing right now are X,Y, Z,W.
41:05 - And if we do that just natively,
the way that I drew the
41:09 - cube, you sort of see the Z
rotation and that W rotation
41:12 - projected into the 3D world,
it's like kind of coming
41:16 - in and out, almost looks like breathing.
41:19 - And so what I actually wanna
do is just rotate along
41:23 - the X axis to put things on the side.
41:24 - And I could do that with a
rotation matrix but because
41:26 - I have a full 3D renderer
I'm gonna say rotate X,
41:29 - negative pi divided by
two and there we go.
41:33 - Now this should look like the tesseract
41:36 - visualization that you're used to seeing.
41:39 - This is that W rotation like rotating.
41:42 - And by the way, we have now...
41:46 - (suspenseful music)
41:50 - Entered the fourth dimension.
41:51 - You know, it was a little
bit anticlimatic I guess.
41:54 - But here, we're done, this
coding challenge is complete.
41:57 - And I just want to stop,
I'm not gonna do anymore
42:00 - because I'm gonna leave this for you.
42:03 - Let's think about all the
kinds of things you could do
42:06 - to this to make this more
beautiful or interesting or weird.
42:09 - First of all, you know,
what are all sorts of other
42:13 - rotation matrices you could apply?
42:15 - What's like a three axis rotation?
42:17 - You could certainly do that, right?
42:20 - What multi, how many,
this is a double rotation.
42:24 - Could you do a triple or quadruple?
42:25 - What if you tried a bunch
of different other axis
42:28 - with the W axis, you know,
I'm just drawing these little
42:31 - (popping sounds) points and
connecting them with lines.
42:35 - There are probably so many
other ways you could think
42:38 - to visualize the pattern of the tesseract.
42:41 - You can now enter the fourth dimension,
42:44 - project it into the third
dimension, and see a result.
42:47 - I'll also make a
javascript version of this
42:49 - using the P5GS Library
which has a web GL renderer,
42:51 - although in theory I don't
even need a 3D renderer
42:54 - 'cause I could project the 4D points to 3D
42:56 - and then project the 3D points to 2D.
42:59 - If you really want a hard
problem try doing that.
43:01 - Ah, but really, I ask you, how
many, how, what dimension can
43:05 - you project down into three
dimensions and visualize?
43:09 - Can you get up to five, to
six, to seven, what happens?
43:12 - So I encourage you, I
challenge you to try all sorts
43:15 - of weird stuff, to make
some beautiful art and enjoy
43:18 - spending time in the fourth dimension.
43:23 - (suspenseful music)
43:43 - (upbeat music)

Cleaned transcript:

(whistle blowing) (suspenseful music) Welcome to A Coding Challenge, where I will enter... The fourth dimension. Well, I didn't really time it, I expected some dramatic moment to happen with the music there but it didn't happen. So alright, this is A Coding Challenge, I am so crazily excited about this. If this actually works I think that, I don't know what's gonna happen, stuff will just like, smoke, and brain matter will start just like leaking out of my nostrils. I don't even know, so wait 'til the end of this video to see. Now what I'm starting with here looks like a plain old spinning cube and actually that's what it is. What I wanna do is not just make a plain old spinning cube in three dimensions, I wanna make a hypercube spinning in the... (suspenseful music) Fourth dimension. So I want to make something that looks like this, right? So this is a hypercube, otherwise known as a tesseract. And I'm gonna, before I start coding any of this I'm gonna explain to you what that is exactly. So let me come over here, so I, I think my favorite dimension is one dimension. No, zero, let's start with zero dimensions. A point is a shape that exists in 0D, that's a zero. Now the line which is bound by two points is something that exists in one dimensional space. This is one dimensional space. A rectangle, a square, a plane which is bound by one, two, three, four lines exists in two dimensional space. Now notice the pattern here. This is bound by two lines, this is bound by four. I'm sorry, this is bound by two points, this is bound by four lines. Now if I create two planes and then connect all the edges I have what is commonly referred to as a cube. This is something that exists in three dimensions, are the number of dimensions that we live in on this planet where we live and it is bound by six planes. So you can see a pattern here. I was gonna say you double it but this is not bound by anything I guess so this sorta makes sense. This is bound by zero things, this is the beginning. Now what does it mean, then, to have four dimensions? Well I'm not really gonna be able to draw this too easily but we could make the case, right, if I'm following this pattern, that four dimensions is bound by eight cubes. And this is mathematically true, this is accurate. The problem is I'm gonna sit here and I'm gonna visualize this in my head. Are you doing this with me? I can't, I just cannot do it at all. Human beings did not evolve to understand the world in an dimensions higher than three. Anyway, I could keep going on about this since this is a mathematical truth, why isn't there some way that we could somehow unlock is and see this on a computer screen in some way? And in fact, there is, so this is how. How do we even see this? How do we even see this 3D shape on a 2D computer screen? Well the way we do that is by writing code like this one that I've done right here. Now the truth of the matter is, in processing, which the programming language environment I'm using right now, I could just say box and I would get that because I'm in the P3D renderer. And the P3D renderer knows how to take the mathematics of a 3D shape and project it into a 2D canvas to create the illusion of the third dimension. And it totally makes sense to our brains 'cause we're so used to 3D. We can imagine it, we can see the 2D version of it and imagine it in three dimensions. And I did, you don't have to have watched that video to watch this one but I did a whole previous Coding Challenge where I made exactly this put only using the P2D renderer. So I did the math of taking 3D points and projecting them into 2D, so if I can do that, why can't I create the math for a 4D shape, do the projection into 3D and render it with the P3D renderer? The truth of the matter is I could then project it into 2D and render it with the P2D renderer as well, but I'm lazy, I'm just gonna do one projection. And if this is true there's no reason why I couldn't create a 5D shape and a 6D shape and a 7D shape. And I project 7D into 6D into 5D into 4D and then into 3D and visualize it. So this is what I'm going to attempt to do in this video. It is going to require matrices. There are other ways to do it without it or create the visual illusion of it but I'm going to be using matrices and the matrices are going to be used for a couple things. I need a projection matrix, this is a matrix that takes a 4D point and turns it into a 3D point. And I'm going to also need a rotation matrix. I don't need the rotation matrix but the rotation matrix is what's gonna make this fun (laughs) because I can start to rotate around weird axis to see crazy things happen. So this is kind of like optional but this is what's gonna make the visualizations, so I'm gonna do the most basic wire frame version of this and hopefully you are then going to make beautiful, interesting, weird things about this. If somebody watching this, but who can go to the highest dimension possible in processing? I would like to see that as a challenge. Now if you want to learn more or see a condensed version of the explanation of what the tester act is and how this works I would highly recommend, for me, I'm making this coding challenge because of this particular video. From, how do you pronounce that? Anybody know how you say this? (laughs) Okay, I can't figure out how to pronounce it, I'm gonna guess, LeiosOS. But this is a wonderful, wonderful YouTube channel with many excellent explanatory videos and this one about understanding 4D, the tesseract, is excellent. So you could pause this, go watch that, come back later, all of the above. Okay, alright so now I think we're good, we're good, we're good, and I minimize the browser and here I am. Okay, alright, now what do I need? The first thing I need to do, if I'm gonna make something 4D, to do something in 3D I make heavy use of this idea of a PVector which is a data structure that holds an X, Y, and a Z. I need something that can hold an X, Y, Z, and W for that fourth dimension so I'm gonna make a new tab and I'm gonna call it P4 Vector and I'm gonna say class P4 Vector and I'm going to say it has an X, Y, Z, and a W and it needs a constructor. And it can get a X, a Y, a Z, and a W. And then I'm gonna say this.x, isn't it fun when you have to use the this. in java 'cause it's like so rare? Every once in a while you do. Z, W, X, Y, Z, W, so now this is my P4 Vector. Alright, P4 Vector, there we go, and now I am going to make this cube, this very cube, all the points of the cube and actually one thing I want to do just not, I'll leave it right now, I'm gonna make it in 4D. Zero, zero, the fourth dimension (yells). (suspenseful music) And then while I'm adding the fourth dimension I gotta change these P4 Vector. Then I've gotta change this P4 Vector, P4 Vector. And now this stuff I'm gonna worry about later. (suspenseful music) And let's see, we're gonna watch, it's gonna be four dimensions now, everybody. Here it comes, four dimensions. Look away (yells). This is the same exact cube, right? It's the same, is that four dimensions? Oh I'm so confused. Well how are you even going to see this fourth dimension? First of all, all the points are on zero. So what you can think about it is it's flat. I took a four dimensional shape and flattened it, flattened it, you know, we say flat 'cause usually we're taking a three dimensional shape and flattening it into 2D so a cube if you flatten it would just be a square. So I took this hypercube and flattened it and I just have the cube so I need to make the hypercube. You know what, I'm gonna, against my better judgment (laughs) I'm just gonna extend this array to have 16 points. Right, a hypercube is made up of 16 vertices because it's basically two cubes with all the points connected. So I am going to, I was gonna make like a cube object and a hypercube as two cubes but I'm gonna just keep going. So I'm gonna say eight, nine, 10, 11, 12, 13, 14, 15. And then I'm actually gonna put this in 4D. So all of these zeroes, right, they should all be 100. The rest of them at negative 100. I know I'm doing this in a highly manual way but first of all I find it kinda relaxing sometimes just to sit here and copy paste the same thing over and over again, you should try it, it's very soothing. And then also I can always refactor it later but just so I really know that it's working, okay. I've got 16 four dimensional points, (gasps), I am going to now draw them again. (suspenseful music) Okay, so it still just looks like those points. What's missing here? Well I'm not actually doing the projection so now it's time for me, like, I'm just taking the 4D point, ignoring that v.w part and then doing a projection. So really what I need to do right now is think about how I do the projection so I'm gonna create a projection matrix for a 4D point. So this is the point X,Y,W,Z. The projection matrix to take a 4D point and turn it into, oh wait, X, Y, Z, W. And project it into something I can draw in 3D, X,Y,Z. The idea is I want to look at the shadow of the 4D object in 3D, just like I might look at the shadow of a 3D object in 2D so to do that I need a matrix that has four columns and three rows so the typical way to do that would be like this. One, zero, zero, zero, zero, one, zero, zero. Zero, zero, one, zero, right, I think I got everything. The idea here, if I actually use this matrix and perform matrix multiplication which I'll link to two videos where I go through that in more detail, this actually gives me literally this. It's like, just chopping off the W. So let's actually put this in our code and see what happens. So I'm gonna create a matrix. Now one thing I didn't mention is I'm working with a set of helper functions and I worked these functions out into separate video if you're interested but it's not, too much, it's way too much to be in this video. That has actually the matrix multiplication math in it, as well as some helper stuff to do matrix multiplication with a matrix and a vector. I'm gonna have to change this to P4 Vector, I'm just realizing that, but that's no problem. Okay so what I first want to do is create that projection matrix. So I'm just gonna do it right here as a local variable and a little bit later it'll sort of make sense why. So I'm gonna say, float projection equals, so I need to make that matrix which is an array or arrays. So there are three rows, 0, 1, 0, 0, and then 0, 0, 1, 0. This is the equivalent of orthographic projection, if you've heard that term before. Okay so now we've done that, then what I'm gonna say is, P4 Vector, actually P Vector, I don't need it to be a P4 Vector, I'm taking the 3D point. P Vector equals matrix multiplication, the projection times V, okay? So now it's telling me it doesn't know how to do matrix multiplication with a projection, matrix, and V which is a P4 Vector, which is strange because if I go in here it has a function to matrix multiply a two dimensional array and a P Vector. But I need this to be a P4 Vector, okay. Oh, Vec to matrix, doesn't know how to make a P4 Vector, so I'm just gonna change these functions to deal with 4D. M3 equals VW, so again if you wanna see on a separate video where I wrote all this code and now I'm just adjusting it to add this fourth dimension. And then matrix to vec is going to be, you know what, I'm gonna always be doing this, this is fine, this stays the same, so that stays the same 'cause I still want, what I'm gonna get is a 3D vector inside a matrix and I want to turn it into a P Vector so let's see. Nobody's complaining at me and now I wanna look at the projected points, projected, projected, projected. Here we go, oh what's wrong here? Vec to matrix... array out of bounds exception. I have an error somewhere, where is this called? Oh this has to be four, this has to be a four. So I forget that I'm in java and I really have to specify types and lengths of things so that has to be a four. Is there anywhere else where I need to do that? We'll find out soon enough. Okay, let's try this one more time, we're entering the fourth dimension. Whoa, okay, it's still the same (yelling). Why? There are eight points in four dimensions. Well guess what, if I took a cube and I showed it to you in orthographic projection facing the camera basically it would look like just four points. The four points on the back of the cube would be sitting right exactly behind the four points at the front and you wouldn't see them as different. Same thing is going on here, so what I actually need is not orthographic projection, I need stereographic projection, I need to create that perspective. And the way to do that is with moving, sort of thinking of a light source that has a certain distance from the object that I'm casting a shadow. So I'm gonna create a variable, distance, and this is going to be, oh, you know one thing I really should do is I'm gonna take all these 100s and make them just the number one. I'm gonna normalize my shape to just have all ones, it looks like a completely insane person wrote this code. And in fact, a completely insane person did write that code. So I'm gonna think of the camera as two units away and then the projection W is one divided by that distance minus V.W, this is a sort of tried and true formula for creating perspective projection. And then I can put that W in here and now see what happens. Do we have four dimensions? Oh, I'm so close, I'm so close. So I forgot that all my numbers are one so I'm just gonna scale, there's a variety of ways I could scale things up but I'm just gonna do it right here. So I multiply by 100 and now, oh look at that. It kinda looks like that tesseract thing. Wait a second, wait a second, wait a second, wait a second. Oh this crazy, oh I gotta connect the lines. So first of all I need more, I guess I should make this smaller, let's make this 50, do you see it? That's that tesseract looking thing, the fourth dimension. (yells) Our brains can't do this. Connecting it will help, I'm gonna connect all the lines. Let's do that, I had a function that connects all the edges, I think I did this in the video where I was just making a cube. And these are P4 Vectors now, oh no they're not, they're still P Vectors and I need to connect, oh, I need to make, alright, everything's going to be okay, everybody, I'm gonna make an array P Vector projected. Projected 3D which is an array is a new P Vector also with 16 points in it and I'm just gonna take projected 3D index I, there's no index, I'm gonna add an index, that is, I'm using this enhanced loop, I probably should just make it a four loop, let's make it a four loop. I got time to do that, you'll watch me do this. Four int I equals zero, I is less than points.length, I plus plus and then P4 Vector V equals points index I. So I'm manually iterating through it because now I can have this index and then with this index, here, I can say I equals that projected V, projected, and then I can still draw these here but now I can say projected 3D so I want to connect the various points there. And so now I should see, that's just one, oh right, 'cause I gotta do this twice. Oh no, I gotta do this all the way. Oh, this is confusing (laughs). I gotta use the second half of the array which would be from like eight to 12, I don't know. I equals eight... (groans) that's not right. Seven? Zero, one, two, three, four, five, six, seven. Eight, zero to four because if I want all the, oh modulus, modulus is four plus eight. Oh I made a horrorshow out of this. I went out of bounds, stop the presses! Okay, I now realize that, I try not to do this, I try to have my videos be very self contained and there's, you know, there's a few things that you might have to watch a previous video for but I think it's worth explaining this just for a second. So basically what I did in this connect function is this is a connect function to just take two of the points and draw a line between them, and to draw a cube, right, normally I might just say box or begin shape, end shape and it's gonna sort of like make all these connections for me but what I'm doing, what I'm doing is I basically have points zero, one, two, three, four, five, actually it's zero, one, two, three, four, five, six, seven. So that function is basically saying, connect zero and one, connect one and two, connect two and three, connect three and zero, connect four and five, connect five and six, connect six and seven, connect seven and four and then connect zero and four, one and five, two and six, three and seven. That's what that function is doing. And so now I have two of them. If I have another one, basically, it's along the four dimensional axis, I don't even know where to draw that. SO first of all all of its points start at eight, nine, 10, 11, 12, and this is not, somebody watching this will give me some nice adjustments about how to completely refactor this in a better way. But you can see now I just need to connect these. So the way I think I'm gonna approach that is by I'm gonna add another, I think if I just add, like, an offset, like I can add an offset, this is kinda silly. Here and then that offset could be zero. And then that offset could be seven, right, 'cause then just want to do this. And so this would just be I plus offset, J plus offset, so if I do this twice, and again I could do this in one loop right, I could add an offset that's eight, is it eight? I think it's eight. There we go, ha, so now you can see I connected both cubes. Now interestingly enough, what's the fourth dimension with this kind of perspective? The fourth dimension is actually like, is W. W is expressed as kind of the distance between these cubes. Again we can only think about it, I can only describe it to you in three dimensional terms. So for example you see this here, like if I were to put one of these points like at negative five, look, it's all the way out there. So this hypercube isn't perfectly symmetrical. One of the points, it's W location, is all the way out along that axis and I make this a variable and I could slide it around and do stuff like that, but I'm not gonna do that. I haven't actually finished the connections, though, because what I want here is I need to connect all these points to those points for the visualization to be fully complete, that's actually gonna be pretty easy. Because all I'm doing in my array of 16 points, zero connects to eight, one connects to nine, four connects to 12, five connects to three. So that's actually easy, that's just another loop all the way through all the points and I'm gonna have with an offset of zero I connected to I plus eight. So this should do this last set of connections. Whoops, no somethings wrong here. Oh, no, no, I only need to go through half the points 'cause the first half are connected to the second bunch. Alright, is this right? This looks right to me. Oh why is it going towards the center? Something is wrong here. (bell ringing) (whining) Okay so if you're out of abrupt edit, you're not watching this live, you're watching the recorded version, I just spent about 45 minutes trying to debug a problem and I went off completely in the wrong direction. Although it was a really interesting, lots of interesting tangents, I encourage you, I'll link to the time code of the livestream where you can watch that whole part. But I was trying to figure out why these points aren't connecting properly an I started doing things like drawing numbers where all the points were and all sorts of stuff, but actually the mistake, which you may have already seen and been singing to me about it, perhaps, is right here. Notice these parenthesis here, the formula for the perspective projection requires one minus one divided by the distance minus the actual W point. As soon as I put that in now all of the points are in the right place and those connections are doing what they should do. The actual draw points are little bit too large for my taste right now, I'm gonna take this to eight. And this looks better now, okay. So there we can see, there's our hyper cube in 3D. Sort of, okay, let's take a deep breath here 'cause that was a lot of stuff and I gotta figure out where I am. Oh, oh yes, rotation (laughs), before I get to rotation actually let me just mention one more thing about this. It was pointed out in the chat by many people that instead of trying to write some kind of kooky, nonsensical, crazy person algorithm like I did here to figure out where all the connections are, that you could actually just test for unit distance between the points, right, because if you think about a square, right, you don't connect the diagonals 'cause they're not distance, they have a different distance. So if I look at the distance between all the points I'll find all the connections there. So that's an interesting side project for any of you as an extra to do while you're watching this. But I wanna talk about rotation. So how is this rotation even happening in the first place? I'm rotating in the third dimension, which is not really what I wanna do. I wanna rotate in the fourth dimension, then project that down to the third dimension. So let's try to back up, let's try to create exactly this by rotating in the fourth dimension and then projecting back down in the third dimension. The reason why I'm not actually doing the rotation in the fourth dimension is 'cause the rotation is happening right here with the built in native rotate Y function. That means rotating around the Y axis. So how does rotation actually happen? Well rotation happens with a rotation matrix. So here I am on the Wikipedia page and you can see this rotation matrix right here. So let's come back over here and let's think about that. So this is rotation matrix, cosign of theta, negative sign of theta, sign of theta, cosign of theta. Did I get that right, looks like I did. Alright so this is a 2D rotation matrix. If I were to take this rotation matrix and do a matrix multiplication with any given 2D point this is exactly the math behind rotate in processing byte data. This is exactly that. So then what is the math behind rotate Y or rotate X or rotate Z? And in fact is indeed also a rotation matrix only it's three by three rotation matrix. And in fact if I come over here on this Wikipedia page about rotation matrices and keep scrolling, keep scrolling and keep scrolling and keep scrolling, there we go, here it is, this is the rotation matrix for around the Y axis and you can see a pattern here, right? That's that 2D rotation but it's here within the Y and Z which is rotating around the X axis. Same pattern but between the X and the Z, between the X and the Y, that's how I get all those different rotations. But I wanna do this in four dimensions so what I need do to, rotation in four dimensions, is the following. I need to pick which axis I want and I need a four by four matrix and in this case the axis that I want, I'm gonna use the X and Y axis and I'm gonna say cosign theta, negative sign theta, sign theta, cosign theta. Oh and this has to be a one, apologies, and this has to be a one, right, 'cause it's the identity matrix for Y and Z, basically. The identity being just a one in those areas. So I don't know if that's actually the right way to phrase it but anyway this is the rotation matrix. I'm gonna call this, for 4D, this is rotation X, Y. And actually what I was doing in rotate Y would be X, Z. But anyway, we come back to the computer, I'm going to comment out rotate Y, so now there's no rotation. And actually just to be clear I'm gonna start with rotate X, no rotate Z, I think that'll be the simplest. So I'm gonna start with rotate Z, so I'm gonna recreate exactly this. This doesn't look super interesting 'cause of how flat it is but that's what I'm going to start with. 'Cause I think that'll be the easiest one to do. I want to recreate that with the matrix. So the first thing I have to do is before I do the projection I have to create a rotation matrix and I'm gonna call this X, Y rotation. And that is going to equal a matrix that has, I forgot already, cosign of the angle, negative sign of the angle zero, zero, sign of the angle, cosign of the angle zero, zero and then zero, zero, one, zero, zero, zero, zero, one, so this is my rotation XY matrix. Autoformat, there we go, okay, so now what I need to do is I need to say P4 Vector, right, I wanna get a rotated point which is the rotation, which is the matrix multiplication result of the rotation matrix X,Y with V. That point V, now this is telling me it doesn't know how to do this, remember I have all those helper functions? The helper functions do these matrix multiplication operations, well I do have a helper function, a matrix times a P4 Vector, I have that. But look at it, it returns a P Vector 'cause I have the one to give me a 3P Vector back. I should probably just leave everything as P4 Vectors, it would make our life so much easier. There's not really any reason for me to use P Vector at this point 'cause I could always, but I'm gonna, I've done what I've done (laughs). We can think about refactoring it later which is like a little bit of my mantra and I'm going to say... This still works, so I wanna say if, so this is matrix to vec, I need another one of these which does, I'm just gonna write this function. I don't think I need this anymore 'cause it's always gonna have three dimensions. That was sort of an extra thing, just to simplify this I'm gonna make another function that's gonna be called matrix to vec four, and I'll make a P4 Vector and then I'm gonna say V.W is this, so I made a different function and this returns a P4 vector, P4 Vector. So I just made a helper function that takes a, oh I don't have that up, zero, zero, zero, zero. That basically takes a matrix that has one column, right, this is what it is, it's a matrix with one column and four rows and turns this into a P4 Vector. I need that because down here I now want to say, I'm gonna say results equals matmul A and M and then I'm going to say, if result.length. So how many rows, do I have four rows or not? Equals four, then return, oh no wait, I can't have it return two different types. I'll just have to do this, oh, java is a weird place. Right, it can't return something of a different type. So I'm gonna just pass a bullion in (laughs). I'm gonna pass our dimensions like int dim. So I don't even need to figure it out, if dimensions equal four, oh no it's the same problem. Oh, oh I couldn't, oh no, I could just overload it. Alright, I'm gonna overload it, sorry everybody. So this is... Sorry for these digressions and making this video extra long, yay for me. This is what it was before, right? Returning a matrix to vec, oh no, return, sorry, sorry everybody, this... There, this is what it was before. Now what I'm gonna do is I'm gonna just, this is very awkward but I'm gonna add, I'm gonna say a bullion or a fourth, this is sort of silly, and I'm just gonna say, matrix to vec four and it returns a P4 Vector. Okay so I made two versions of this function. This is very silly, I should've just made, but it is what it is (laughs). Okay, could we get back to what we were doing? Which was important, so now I'm gonna say mat mole rotation X,Y true so this should return a 4D vector then now I want to get the W of the rotated vector, right? 'Cause I'm about to calculate the projection matrix, I'm not going to use the original point, I want to use the point that's been calculated after the rotation and now we should see (gasps) I projected V again so this down here needs to be rotated also. There we go, I have now created exactly zero rotation with my own rotation matrix. We're getting really close everybody, this is very exciting. So now I have a rotation X,Y, just to prove a point let's do rotation, what was the one we saw with it spinning like this? Let's do rotation X,Z meaning zero goes here. Meaning a one goes here, a zero goes here. Let's look at this, is this right? I think this is rotation with X and Z, one in the Y and one in the W. So let's now change that to X, Z here and then look. There we go, I have it just rotating around what looks like the Y axis, okay, exciting. Now watch this, what if I want to apply more than one rotation? So here I've rotated by XZ, now I can just rotate again by rotating by X, Y, what's wrong here? Multiply rotation X, Y by rotated true. Oh so I don't want to redeclare the variable. And here we go, now we see both rotation. But everything still feels very much like all I did was make two 3D cubes and connect the corners. So that's what you're seeing, right, because that's the shadow of what the four dimensional shape in the only way our brains can process, 3D. But let's really try to stretch our brains for a second. What if I include, this is really where things are gonna go nuts, what if I include the W axis? What does it mean to rotate around the W axis? Think about that for a second. Okay rotate around the Y, rotate around the X, rotate around the Z, (making strange noises), you can't even, that W axis that was kind of like extruding, who knows what that's even gonna be. Let's see what that looks like. We are now really about to enter the fourth dimension. Okay, okay, okay, let's try, what do I want? X, W, I don't know what's a good one to start with. Let's try X, W, so I'm gonna make a rotation matrix X, W. Okay here we go, so X and a zero goes here, then that stays the same then this should be in the bottom and a zero goes here, get rid of this comma, get rid of this zero, and then the one goes here. So let's actually just for, I'm afraid to add too many rotations so let's do X, W and let's comment these out. So I am only using rotation around the X, W axis. We're entering the fourth dimension. (suspenseful music) This isn't right (laughs). (buzzer buzzing) Something is wrong there. It did something interesting though (laughs). Alright, what's it that, oh, you know what most people do, I think actually, is not Z, W, so let's do Z, W. (laughs) Let's put this here and then these go away. I mean, I just wanna see that I'm doing this correctly. And then this would be one, zero, zero, one, so let's try Z, W and let's see what this does. Okay this is actually correct. Now it looks really weird but I think I'm gonna be able to fix this, I'm just gonna do something really quickly just as a test, just want to like rotate it on its side. It would be this side. No, something is still wrong. (bell ringing) I'm back again, I was trying to figure out why this was wrong and then I realized, oh, this is actually right. I'm used to seeing a certain pattern and I've just got the viewing angle slightly wrong or slightly different. So basically let me comment this line rotate Y out. The two rotations that I'm doing right now are X,Y, Z,W. And if we do that just natively, the way that I drew the cube, you sort of see the Z rotation and that W rotation projected into the 3D world, it's like kind of coming in and out, almost looks like breathing. And so what I actually wanna do is just rotate along the X axis to put things on the side. And I could do that with a rotation matrix but because I have a full 3D renderer I'm gonna say rotate X, negative pi divided by two and there we go. Now this should look like the tesseract visualization that you're used to seeing. This is that W rotation like rotating. And by the way, we have now... (suspenseful music) Entered the fourth dimension. You know, it was a little bit anticlimatic I guess. But here, we're done, this coding challenge is complete. And I just want to stop, I'm not gonna do anymore because I'm gonna leave this for you. Let's think about all the kinds of things you could do to this to make this more beautiful or interesting or weird. First of all, you know, what are all sorts of other rotation matrices you could apply? What's like a three axis rotation? You could certainly do that, right? What multi, how many, this is a double rotation. Could you do a triple or quadruple? What if you tried a bunch of different other axis with the W axis, you know, I'm just drawing these little (popping sounds) points and connecting them with lines. There are probably so many other ways you could think to visualize the pattern of the tesseract. You can now enter the fourth dimension, project it into the third dimension, and see a result. I'll also make a javascript version of this using the P5GS Library which has a web GL renderer, although in theory I don't even need a 3D renderer 'cause I could project the 4D points to 3D and then project the 3D points to 2D. If you really want a hard problem try doing that. Ah, but really, I ask you, how many, how, what dimension can you project down into three dimensions and visualize? Can you get up to five, to six, to seven, what happens? So I encourage you, I challenge you to try all sorts of weird stuff, to make some beautiful art and enjoy spending time in the fourth dimension. (suspenseful music) (upbeat music)
