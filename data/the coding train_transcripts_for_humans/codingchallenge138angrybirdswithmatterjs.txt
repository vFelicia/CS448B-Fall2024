With timestamps:

00:00 - (train whistle sound)
00:01 - - Hello, welcome to a coding
challenge, Angry Birds.
00:03 - Although, my birds won't be angry,
00:05 - they're going to be loving loving birds.
00:07 - But maybe they won't even be birds,
00:09 - they'll be like cute little Coding
00:10 - Train characters, but
that's not the point.
00:12 - I am going to program a version,
00:15 - a much simpler simplified version
00:18 - of an Angry Bird style clone.
00:20 - I'm going to use p5.js,
I'm going to use a physics
00:22 - library called matter.js, and I'm going to
00:23 - get started in one moment.
00:25 - But first (laughs) let me
diagram out what I need.
00:29 - So, I'm going to use an
object-oriented programing approach.
00:32 - I'm going to need something
called like a box.
00:36 - So, this will be a box class.
00:38 - I'm going to need something like a bird,
00:40 - we'll just call it a bird for right now.
00:41 - And I also need,
00:45 - the ground.
00:46 - So, I'm going to start my
simplified Angry Birds,
00:49 - it's going to have a
single box, a single bird.
00:52 - The box is sitting on the ground.
00:54 - I'm going to want to
toss the bird at the box
00:57 - and knock it over.
00:58 - And from there, the glorious games
01:01 - throughout the universe that you will make
01:03 - maybe will follow.
01:04 - This is the p5 web editor,
I'm going to use p5
01:06 - for all of the drawing stuff,
01:08 - and I'm going to use the
physics library matter.js
01:11 - for handling all of the physics.
01:13 - Now, matter.js does have
rendering built into it
01:16 - but I'm going to do things my sort of way
01:18 - of combining both libraries
01:20 - so that I can do all the
rendering custom in p5,
01:24 - and maybe by the end of this video,
01:25 - have some of my Coding Train characters
01:27 - inside of this little game that we make.
01:29 - Alright, so, first I want to take
01:31 - an object-oriented approach
01:32 - and I'm going to do Add
File, and I want to add,
01:35 - I need a bird.js, and I'm going to make
01:39 - something called a box.js.
01:40 - And I think I'm going to be able to use
01:41 - the box for both.
01:44 - I'm going to use the box class for both
01:47 - this thing that can
actually get knocked over,
01:49 - and the ground, which needs
01:50 - to be something immobile, static.
01:53 - So, what does a box need to have?
01:56 - It needs to have an x,
it needs to have a y,
02:00 - it needs to have a width, and
it needs to have a height.
02:03 - And I'm going to require
that all of those arguments
02:07 - are passed in, via the constructor.
02:11 - Then I'm going to, oh, and so I need
02:13 - to put the arguments in here, x, y, w, h,
02:18 - and I need to, what do I need to do?
02:20 - I'm going to write a show function,
02:22 - and in here, I'm just going to say,
02:24 - I'm going to use fill to make it white
02:27 - and I'm going to say rectangle this.x,
02:31 - this.y, this.w, this.h.
02:34 - Okay, so, this is the
basic idea of a box class,
02:37 - with no physics, this is just the data
02:39 - about a box and this is me drawing it.
02:42 - So, now, in the main
sketch, I'm going to say,
02:47 - let ground, I'm going to have a
global variable called ground.
02:51 - I'm going to say ground equals a new Box,
02:53 - and it's going to be, the
x is going to be at zero,
02:56 - the y is going to be at
like height minus 20,
02:58 - and the width will be the
full width of the window,
03:01 - and the height will be 20.
03:04 - And then I'm going to say ground.show.
03:06 - Now, it's giving me all sorts of errors
03:07 - like it has no idea what a box is,
03:09 - and the reason why it has
no idea what a box is,
03:11 - is because even though I
added a new JavaScript file,
03:14 - I didn't add it to my index.html.
03:16 - So, let me go and add it
to index.html, box.js.
03:20 - And there we go look.
03:22 - (bell ringing)
03:23 - Step one is done.
03:24 - I have the ground.
03:25 - The ground is there.
03:27 - Now, the next thing I'm going to do,
03:29 - is I'm going to have a box.
03:31 - I'm going to just call it a box.
03:33 - A box is another new Box,
03:35 - and let's put it over to the side
03:38 - in some arbitrary place.
03:40 - And say box.show, there it is.
03:45 - I want it to be tall.
03:47 - I don't know what I'm doing exactly yet,
03:49 - but something like this, there we go.
03:51 - Okay, so that's the thing that
I need to throw my bird at.
03:55 - Now, I need another class.
03:57 - I'm going to do Add File, and
I'm going to call this bird,
04:01 - oh, look when did I?
04:02 - It like knows what I'm
going to do in advance,
04:04 - isn't that crazy?
04:05 - I think I've written other things
04:06 - in the p5 editor with a bird.js.
04:09 - bird.js, class Bird,
and I'm just, you know,
04:13 - I probably could maybe
use inheritance here,
04:15 - where I made some videos about recently,
04:18 - but I'm just going to do like a sort
04:19 - of horrible copy paste job.
04:21 - But I'm going to change this to an r,
04:23 - to indicate radius, because my bird
04:26 - is going to be a circle, and this dot r.
04:32 - And now I can say let
bird, bird equals new Bird,
04:39 - and it'll be at like 50
pixels over, 300 pixels down,
04:42 - and with a radius of
25, and oh, doesn't know
04:46 - what bird is yet again because
04:48 - I now also need to add
bird.js to my index.html file.
04:53 - So, I've got the bird, I've got the box,
04:56 - these are all the elements.
04:57 - So, I have all the elements
that I want in my scene.
05:01 - Ultimately, I'm going to want
to have like a stack of boxes
05:03 - and use images to make
this have more personality.
05:07 - But the next thing that I need to do,
05:09 - is add physics.
05:12 - Now, I could use, you
know, I could start doing,
05:16 - adding some functions to
do all the physics myself,
05:18 - but I would like to use a physics engine.
05:20 - The matter.js library
is released through NPM,
05:23 - node package manager.
05:25 - So, I can go, and everything NPM,
05:27 - it's already like appearing in my,
05:28 - 'cause I looked for it
before I started this.
05:30 - But if I just go to unpkg, unpackage
05:33 - which is the content delivery network
05:35 - for NPM packages, and do matter.js,
05:38 - and hit Enter, we can see this is the URL
05:40 - for the matter.js library.
05:42 - I want to get the minified version of it.
05:45 - So, I'm going to also add .min.js.
05:47 - So, now I have this particular URL.
05:49 - I can go back to the p5
web editor, index and html
05:53 - and I can, I'm just going
to like paste it here
05:55 - for a second.
05:56 - I'm going to grab one of these.
05:58 - These are the script tags
for the p5 library, right.
06:03 - And so, instead of, I've
got p5, p5 dom, p5 sound
06:07 - and now I want to add
matter.js as a library.
06:11 - So, these are now all of my libraries,
06:13 - and all of my custom JavaScript code.
06:16 - And if I go back to sketch.js.
06:18 - Let's make sure the matter
dot library has loaded.
06:21 - If I just say console log Matter.
06:24 - We can see yes, stuff is coming out here.
06:26 - The library is loading.
06:28 - That would obviously say if
I hadn't loaded that library,
06:30 - I don't know what you're talking about.
06:31 - So, I have a whole bunch of tutorials
06:35 - about the matter.js library.
06:36 - So, I don't need to spend.
06:38 - I can refer you to those if
you want more background.
06:40 - But basically, I need to establish
06:42 - this idea of an engine object,
06:45 - and a world object.
06:47 - The world is talking
about the environment,
06:49 - and then, each one of these things
06:52 - will be a body.
06:53 - This will be a rectangular body,
06:55 - this will be a rectangular body,
06:56 - and this will be a circular body.
06:58 - So, my classes, box and bird,
07:01 - I'm going to make them wrappers
07:04 - to have inside of them, a piece of data
07:07 - which refers to the actual matter.js body.
07:09 - So, the first thing that I need to do,
07:13 - I think is let's have
a world and an engine.
07:19 - And then I think I say
engine equals Matter.
07:23 - Well, I think I better do this first.
07:26 - engine equals Matter.Engine.create,
07:29 - I don't know, I'm guessing.
07:30 - I think that's right,
having done this before.
07:33 - And then I think the world is actually
07:35 - created when I create the engine,
07:36 - I can just grab it from the world.
07:38 - So, now I have the matter engine,
07:40 - and the matter world.
07:42 - Then inside of my objects,
what I want to do,
07:49 - let's just do the box first.
07:51 - So, here instead of having an x, a y
07:54 - and a width, and a height.
07:55 - Although, I think I might keep
07:56 - the width and the height just to store it.
07:59 - I now want to add this.body
equals Matter.Bodies.rectangle.
08:05 - This is a function that
in the matter library,
08:08 - will create a rectangular
body object for me.
08:12 - And I can give it,
08:15 - I'm going to do this first.
08:16 - Like, I don't, this box
object no longer is going
08:20 - to have its own x and y, it's just going
08:23 - to give the matter body, the x and the y.
08:26 - So, I'm going to say x, y,
08:28 - I think this is actually what it gets.
08:30 - And then I need to say
08:31 - Matter.World.add to the world, this.body.
08:38 - So, I need to actually
put it in the world.
08:41 - So, what happened to the box?
08:42 - Oh, oh, oh, I took out this.x.y,
08:45 - so now, the whole point of this
08:47 - is in show, I want to ask,
08:49 - I want to say hey, Matter. (laughs)
08:51 - I want to say give me a position
08:56 - which is this.body's position.
09:00 - And now, I'm going to draw the
rectangle at pos.x, and pos.y.
09:07 - Now, there may be a way in fact,
09:09 - that I could dig into the body
09:12 - and get its width and height
but I'm just going to store
09:15 - those out of convenience for myself.
09:17 - The size of these rectangles
is never going to change,
09:19 - so I can keep that.
09:20 - There is a big issue here though.
09:22 - Which is that, one, is that
once I start adding the physics,
09:26 - the box could wobble,
meaning it could rotate,
09:29 - so, I'm also wanting, I'm also
going to want to get an angle.
09:35 - And I am going to want to
then draw it with rotation.
09:40 - So, I'm going to say push,
I'm going to say pop.
09:42 - I'm going to say, translate pos.x, pos.y.
09:51 - And then the rectangle's at zero, zero.
09:55 - And I'm going to rotate by that angle.
09:59 - There's another little weird nuance here.
10:01 - So, I like for myself,
I like to think about
10:04 - placing the rectangle with
the x, y in the corner,
10:07 - and then the width and the height,
10:08 - and that's the default behavior of p5.
10:13 - But matter.js, when you make a rectangular
10:16 - or circular object, the x, y position
10:18 - for that object is always in the center.
10:19 - So, this actually have told matter.js
10:22 - where the object is and drawn it
10:24 - in a different place.
10:25 - So, I need to reconcile those two things.
10:28 - So, to reconcile those two things.
10:31 - There's a few different
ways I could do it.
10:33 - One, is first, I should
say rectMode CENTER.
10:36 - So, that I'm drawing.
10:37 - But now you can see everything's
off in a weird place,
10:40 - which is maybe fine, maybe
I just need to rethink
10:43 - where I'm placing the stuff.
10:44 - For example, the ground would be now at,
10:48 - width divided by two, height minus 10.
10:52 - So, that's the same thing.
10:52 - So, that's fine.
10:53 - (hands clapping)
10:54 - (laughs) That's one way of doing it.
10:55 - And my rectangle is in a weird place.
10:58 - But I'm not going to worry
about that right now,
10:59 - I'm going to position
stuff and I obviously
11:01 - could use some math to get it to rest
11:02 - perfectly on the ground.
11:04 - But I'm not going to worry about that.
11:04 - Still, there's no physics happening.
11:07 - Why is there no physics happening?
11:08 - I created the body, I
added it to the world.
11:10 - It's because I'm not running the engine.
11:13 - So, what I need to do, draw is my loop.
11:16 - So, basically I need to say every time
11:18 - through draw step forward in time.
11:20 - So, I think I can just say engine.run, no.
11:26 - (bell ringing)
11:27 - I looked it up.
11:28 - I probably could have
shown you me looking it up,
11:30 - but it's not, how do
you look this stuff up?
11:32 - Let me show you, looking it up.
11:33 - So, if I go here and I go under engine,
11:35 - and I scroll through here.
11:36 - I could be like, oh, where's
that engine.run function.
11:39 - Oh, it is there, how interesting.
11:42 - But that's not, oh I forgot
to say Matter.engine,
11:44 - but that's actually not
what I want. (laughs)
11:46 - I want to use update.
11:47 - I think there's two different
ways of doing things.
11:50 - Engine.run will just
set the engine running.
11:53 - But I want to lock step
my p5 animation loop
11:57 - with my matter physics engine,
11:59 - so I'm going to use update.
12:00 - So, and what I'm going to do then
12:03 - is in here, I'm going
to say Engine.update,
12:06 - but I need to say Matter.Engine.update
12:09 - and there we go, oh, did you see that.
12:14 - The physics is happening. (sighing)
12:16 - But the ground fell out below
us, we're sinking. (laughs)
12:21 - It's okay everybody, we can
violate the laws of physics
12:24 - and create an object with
infinite mass that never moves.
12:28 - The ground can be known as a static,
12:31 - it can be a static object.
12:32 - So, objects that you create in matter.js,
12:35 - the physics engines can
be static or dynamic,
12:37 - by default they're dynamic.
12:38 - So, the tricky thing here is I'm using
12:40 - the same box class to describe both
12:43 - the ground, and that rectangle.
12:45 - So, I could separate them if they really
12:46 - are different, or use inheritance,
12:48 - but maybe, why not?
12:51 - Let's use inheritance.
12:53 - This will be fun.
12:53 - I've been talking about
inheritance, let's use it.
12:56 - So, I'm going to add another file.
12:57 - I don't know if this
is the best technique.
12:58 - I'm going to call it ground.
13:01 - And I'm going to say class Ground,
13:05 - oh there's a problem with
this idea but it's fine,
13:07 - extends Box (laughs) and then
I'm going to say constructor.
13:12 - It's going to get a x,
y, width, and a height.
13:15 - I'm going to say super
x, y, width, and height.
13:19 - So, now, the ground is a class
13:22 - that inherits everything from box.
13:24 - If you don't know about inheritance,
13:25 - I'll refer you to my video about that.
13:27 - And I can go into sketch,
13:29 - and I can now say ground
equals new Ground,
13:33 - and it's not defined because
13:35 - I have to add it to my index.html,
13:38 - there it is, hello.
13:40 - Alright, now, what still?
13:42 - Still.
13:44 - (bell ringing)
13:44 - Wow, something really crazy happened.
13:46 - I kind of forgot that the order,
13:49 - it usually doesn't matter for me
13:51 - because I don't have
anything really happen
13:52 - until the setup function in
draw, and everything has loaded.
13:55 - But I can't reference the
Ground.js JavaScript file
13:59 - before box.js 'cause it's extending box,
14:02 - and as it's loading the DOM,
14:03 - it's got to look at the box file first.
14:05 - So, this actually is one
of the rare instances
14:08 - where I've got to put this script tag
14:10 - before that one, no. (laughs)
14:12 - Oh no, that's the bird.
14:13 - Yes, this is going to work any second now.
14:16 - Yes.
14:17 - Okay, oh, it still goes away.
14:18 - So, now I need to figure out how do I
14:20 - just change one thing to make this static?
14:24 - Can I do this?
14:25 - this.body is static equals true.
14:29 - Yay.
14:29 - Okay, so, this is the idea of I have
14:31 - a whole other kind of
body that extends box,
14:36 - it does everything the same way,
14:38 - but I can set an additional
variable isStatic to true.
14:41 - And so, now, when this runs, we've got
14:43 - our Angry Bird box thing over there,
14:46 - and now we're ready to
start working with our bird.
14:48 - Oh, okay.
14:49 - So, let's work with our bird now.
14:51 - So, we need to get rid of the x and the y.
14:54 - I'm going to say this.body equals
14:56 - Matter.Bodies.circle, x, y, r.
15:01 - I'm going to do the same thing.
15:05 - I'll actually worry about rotation.
15:07 - So, I'm going to sort
of cheat a little bit,
15:11 - by just copying this over,
15:12 - 'cause I don't feel like typing right now,
15:14 - and then just change this
to circle, and this dot r,
15:19 - and there we go.
15:20 - And then I also should
say Matter.World.add
15:27 - this.body to the world,
15:30 - or this.body to the world.
15:35 - There we go.
15:36 - Ah, it's rolling away.
15:37 - Alright, excellent.
15:38 - So, I want to be able to toss
15:41 - this bird over here to this rectangle,
15:44 - how do I do that?
15:46 - Well okay, maybe I do an if statement
15:47 - to see if I click the mouse
inside it, then I grab it.
15:50 - Well, one of the nice things
that matter.js provides
15:53 - is this very general thing
called a MouseConstraint.
15:57 - So, I can add, I'm going to add,
and this is a little tricky.
16:00 - I'm definitely going to
have to look this up.
16:03 - I'm going to call this
mConstraint for mouse constraint,
16:07 - and then I'm going to say
mConstraint equals matter dot,
16:11 - alright we're going to
have to look this up.
16:12 - I want a MouseConstraint.
16:14 - Create engine options, okay.
16:18 - So, this is what I want,
matter.MouseConstraint.create.
16:22 - So, I'm going to say,
Matter.MouseConstraint,
16:27 - was capital, MouseConstraint.create,
16:30 - and give it the engine.
16:33 - Okay, so, look at this,
options.mouse was undefined,
16:37 - options.element was undefined.
16:39 - May not function as expected.
16:42 - So, matter.js is giving
me a nice warning here,
16:44 - explaining that well you
made this mouse constraint,
16:47 - but you need tell me
where you're going to be
16:49 - clicking the mouse, I need to know
16:50 - where you're clicking the mouse.
16:52 - And where I am clicking
the mouse is in the canvas.
16:55 - So, I could like if the
canvas is a DOM element,
16:58 - does it have an ID.
16:59 - Well, one of the nice
things about using p5
17:01 - is I can just store in a variable,
17:05 - the result of createCanvas
which is this canvas object.
17:10 - And I should be able to now say,
17:12 - I should be able to give it some options.
17:17 - And then so I can add
a second argument here,
17:20 - which is options,
17:21 - and I think I need to
just give it mouse null.
17:26 - I'm just going to put things as null,
17:27 - and then element null.
17:31 - (bell ringing)
17:32 - Alright I'm back, after
looking up what I need to do.
17:35 - So, what I forgot is
that I need this mouse.
17:40 - So, I need a separate mouse object
17:44 - that I can use to create
17:45 - and manipulate those mouse inputs.
17:47 - One of the interesting
things, there's a live chat
17:49 - going on right now as I'm recording this.
17:51 - And Alka wrote a nice
suggestion for aliasing
17:54 - all these matter dot things, you'll notice
17:56 - how I'm driving to write matter dot,
17:57 - matter dot, matter dot everywhere.
17:59 - So, I'm going to actually
just go over here and take.
18:03 - I forget what this is called, but this
18:05 - is kind of a new fangled JavaScript thing,
18:07 - where I can basically
just make a nice list
18:08 - of all these objects I want.
18:10 - I'm at Engine, World, MouseConstraint
18:15 - and I'm maybe going to use Constraint,
18:17 - and I can just set that
all equal to Matter.
18:20 - So, basically, this is me
18:23 - aliasing everything that's matter.Engine,
18:25 - matter.World, matter.Bodies.
18:27 - So, in theory, I should be able
to just say Engine now here,
18:31 - this makes things a little bit easier,
18:33 - just MouseConstraint here.
18:34 - So, my code is a little bit more succinct
18:36 - and I'll go back and fix that
18:38 - in other places, as necessary.
18:40 - But, what I need here is a Mouse,
18:44 - and I need to say constant Matter mouse,
18:49 - I'll just call it mouse equals
Mouse.create canvas.elt.
18:54 - So, I need to make a mouse
object with the DOM element
18:57 - associated with the canvas.
18:58 - And then I believe, I can just
put this here, under options.
19:03 - And now, here we go, let me
bring this all the way back.
19:07 - Dare I say, oh no, oh, so close.
19:10 - Oh, what did I forget?
19:11 - I probably have to add it to the world.
19:14 - World.add world, mConstraint.
19:23 - Yay, look.
19:24 - Now, I can pick this stuff up
19:25 - and I can toss it, oh look come on.
19:26 - I can do better.
19:29 - Yay, oh, goodbye.
19:30 - What's left to do?
19:32 - I want to add a few more boxes.
19:34 - I want to put images instead of these,
19:36 - just these boxes and circles, and I think
19:39 - I should try to add a slingshot,
even though right now,
19:42 - I could kind of just toss it.
19:44 - Okay, the first thing would
be just adding more boxes.
19:47 - So, I'm going to change box to boxes,
19:50 - and I am going to now
have a little for loop,
19:56 - i is zero, i is less
than three, i plus plus.
20:02 - And then I'm going to say
instead of a single box,
20:05 - I'm going to say boxes
index i equals a new Box,
20:09 - and then here I am going to then
20:12 - say for let box of boxes,
little for loop, draw them all.
20:17 - So, now you can see, look at that,
20:18 - What's so crazy, is when I start
them all at the same point,
20:21 - the two objects cannot appear,
20:24 - cannot occupy the same
space in a world of physics.
20:27 - So, they like burst off from each other.
20:29 - But let's do something like
say, 300 minus i times 75,
20:33 - which will stack them.
20:35 - So, now I have little stack of boxes,
20:37 - and then I can toss it, and there we go,
20:38 - I didn't knock them over.
20:40 - Oh, whoa, I threw it over.
20:42 - So there's some nuance here
to how physics engines work
20:45 - and how I'm going to need to
create some balance in the system.
20:48 - And you know, one of the things there
20:50 - is I probably need to increase
the number of iterations
20:54 - per update in order for
it not to be able to move
20:57 - so fast, just to jump over the stuff.
20:59 - But let me just run this again.
21:00 - I want to really see if I
can knock those things over.
21:02 - Yay, I knocked them over.
21:04 - I could also play around
with the properties
21:08 - like restitution and friction, which are
21:11 - physics attributes of
each of these objects,
21:13 - restitution being
elasticity or bouncyness.
21:16 - So, maybe towards the end of this video,
21:18 - I'll try adding that.
21:19 - But now we're in pretty good shape.
21:20 - So, let me add the slingshot.
21:23 - So, what I did right now, is I created
21:27 - this idea of a MouseConstraint,
21:28 - and a MouseConstraint is
this very generic constraint
21:31 - that just like, any time
I click on something
21:33 - it'll make a little spring like connection
21:36 - between where I click the
mouse, and the object,
21:38 - so I can move it around.
21:40 - But what I want, is actually to introduce,
21:42 - a constraint maybe right here,
that's fixed to this point,
21:47 - and only attached to this particular bird.
21:51 - And I think it's probably
smart for me to wrap
21:54 - this into a class.
21:56 - Because I'm really going all in
21:57 - on this object-orientated
programming approach.
21:59 - So, let me make another JavaScript
file called slingshot.js,
22:06 - and let me just right out the outset,
22:09 - remember that I need to
refer to slingshot.js,
22:17 - then class SlingShot.
22:23 - So, what does a slingshot need?
22:26 - So, I think it needs an x and a y,
22:29 - like where is the point from which
22:32 - this object will be attached?
22:33 - And then it needs. Oh, no no,
that's not where these go.
22:35 - It needs an x and a y,
and then it needs a body.
22:38 - So, now, I'm going to create,
let's call this this.sling,
22:44 - equals Constraint.create and then options.
22:51 - I think this is how that works.
22:53 - And this should be Constraint. (laughs)
22:56 - Constraint.
22:57 - So, I'm going to make up some options now.
23:01 - So, I need to configure that Constraint.
23:03 - The two things I want to be connected,
23:05 - with this constraint are a point,
23:08 - which I'll call pointA,
this is in the matter.js
23:12 - documentation specs,
pointA, which is an object
23:15 - with an x, which will be what I pass in,
23:18 - and a y, which will be what I pass in,
23:20 - and then also it needs to be connected
23:24 - to something else, bodyB.
23:25 - I think it could be bodyA and bodyB,
23:28 - or pointA and bodyB.
23:29 - There's different ways
you can configure it,
23:31 - but I want a point and a body.
23:32 - I could make another body
that's static body I guess,
23:35 - but a point is the equivalent to that.
23:37 - So, then the body is going to be,
23:40 - oh, I don't think I need an object here,
23:42 - just this particular body.
23:43 - Then I want to say
World.add, this to the world,
23:49 - this.sling.
23:53 - And the other things that
are part of a constraint,
23:57 - I believe, I forget the actual stiffness,
24:00 - like, it's like a spring connection,
24:03 - how stiff is it?
24:04 - So, I think that's actually
just called stiffness.
24:07 - A value of one means the constraint
24:09 - should be very stiff, a value of 0.2,
24:10 - means the constraint
acts like a soft spring.
24:14 - So, let's just try, just to
start with, let's try 0.5.
24:19 - And then, a length is very important.
24:21 - What is the rest length of that spring?
24:23 - Let's make it like 20 pixels.
24:25 - So, now, I've created this slingshot.
24:28 - I also think it would make
sense for me to draw it.
24:33 - So, I'm going to do a show, I'm
going to make show function,
24:36 - and I'm going to say stroke 255,
and I'm going to draw a line,
24:45 - well, let's make posA
equal this.sling.pointA.
24:51 - And posB equals this.sling.body.position.
24:59 - These are the two things that the sling,
25:02 - the string, the spring, the connection,
25:04 - the constraint is attached to.
25:06 - So, draw a line from posA.x,
posA.y, posB.x, posB.y.
25:15 - Oh, so, I think, by the
way I'm writing this class,
25:18 - I didn't even make the slingshot.
25:20 - So, now, I need to go into sketch.js
25:24 - and I'm going to make a
variable called slingshot.
25:28 - I'm going to say slingshot
equals a new SlingShot.
25:35 - And I need to give it a x and a y,
25:38 - which where did I make the bird 5300?
25:40 - Let's just put it in the same place.
25:42 - And then, I need to connect
it to the bird's body.
25:46 - You can see already, look,
25:48 - this is kind of like
stuck somewhere, right.
25:52 - This is great.
25:52 - But let me draw it, 'cause I think
25:54 - that'll make it more obvious.
25:57 - slingshot slash show,
26:02 - and what did I call it?
26:03 - slingshot show, ah PosB.
26:09 - Oh, bodyB, it's pointA and bodyB.
26:13 - So, if I do this.
26:13 - Right, you can see there it is.
26:16 - Now, okay, this was some goofiness here.
26:18 - So, one thing that's really weird
26:20 - is that if I drag the mouse off,
26:22 - the mouse constraint gets confused,
26:24 - and thinks it's stuck.
26:25 - So, that's just an
interaction design problem,
26:28 - that I have to iron out at some point.
26:29 - Let's change a few things like
26:32 - let's make the bird much smaller.
26:35 - Let's move everything over a little bit.
26:40 - Just to give me little space here.
26:44 - So, now, we can see and maybe
I should make that rest length
26:47 - a little bit longer, there we go.
26:50 - And maybe the stiffness should
26:51 - be a little bit less, there we go.
26:54 - So, I'm pulling this back.
26:55 - The idea is that I'm going to pull it back
26:56 - and let go, and I want it to fly.
26:58 - So, we're getting there.
27:00 - I have this slingshot now.
27:02 - Now, how do I release it?
27:04 - I have to come up with
a way of releasing this.
27:08 - I need a way somehow, to launch this bird
27:14 - off of the slingshot.
27:15 - Like the slingshot should be broken,
27:17 - and the constraint should be broken,
27:20 - and it should go flying.
27:21 - So, first let me least
create a mechanism for that.
27:24 - So, let me write a function here.
27:25 - I'm going to call it fly.
27:28 - And I think if I just say
this.sling.bodyB equals null.
27:35 - Like if I just detach the body
27:37 - then the thing that's attached
to it, will go flying.
27:41 - So, let's just try in, let's
just add, just as a test,
27:45 - a keyPressed function.
27:48 - If key equals space, then slingshot.fly.
27:53 - So, again, I need to figure
out when it should be flying.
27:57 - But if I just hit the space bar,
28:01 - cannot read property position
of null, slingshot line 24.
28:06 - So, okay, so only if
there is a body attached,
28:14 - then should I bother to draw the line.
28:16 - Okay, so, I need to also not draw the line
28:18 - if there's no body.
28:19 - So, let me run it, there we go.
28:21 - We can see (laughs) now
could I possibly time it?
28:24 - Like now my interaction
is, I have to do this.
28:28 - Yeah, but I shouldn't have
to hit the space bar, right.
28:32 - I shouldn't have to hit the space bar.
28:34 - So, how can I determine a time
28:37 - where I should have it fly?
28:41 - What if I were to get
the body's speed right.
28:46 - So, a suggestion came in the chat
28:48 - to just look at when
the mouse is released.
28:50 - I think this isn't going
to work, timing wise.
28:53 - But let's try it.
28:54 - What if I just write
function mouseReleased
28:57 - which is a global p5 event
for when I release the mouse.
29:00 - And there I could just say, slingshot fly.
29:03 - So now, I'm pulling this
back and release the mouse.
29:06 - See, it didn't have a chance to move,
29:10 - before it could start pulling it.
29:11 - So, I could use like setTimeout,
this is kind of ridiculous.
29:19 - I could and then, like do it
in like 50 milliseconds later.
29:24 - Is that right?
29:27 - Maybe it should be more like
a 100 milliseconds later.
29:31 - Oh, that's actually kind of great.
29:34 - That worked.
29:40 - Weirdly, just giving
it a little time later.
29:42 - I was going to go through this whole
29:44 - thing of testing its speed.
29:45 - You know what?
29:46 - This is good enough.
29:47 - I think you could probably,
29:48 - those of you watching, you might
29:49 - want to come up with a different solution.
29:51 - But I'm surprised that
this actually worked,
29:53 - just the little setTimeout, just give
29:55 - it a 100 milliseconds later,
29:56 - thank you to Betatester704, who maybe was
29:59 - the one who suggested that.
30:02 - So, this is great.
30:03 - We have Angry Birds.
30:04 - Now, one thing I should
say, is like, at some point
30:06 - I want to be able to like have a new bird,
30:10 - and so, there's a variety
of ways I could do that.
30:13 - Let's use keyPressed.
30:14 - We'll just use a key press right now.
30:16 - And I could say,
30:21 - remake the bird, and then I could say,
30:25 - slingshot.attach this bird.body,
30:29 - and then in bird, I mean
sorry, in slingshot,
30:33 - I could say, attach, get a body,
30:37 - and I could say this.sling.bodyB
equals that new body.
30:42 - So here, now, what I
should be able to do is
30:45 - I should be able to let it
fly, knock the stuff over,
30:48 - and then, oh sure I
want to probably detect
30:50 - when it should do this.
30:51 - I can hit space, oh no sorry, oops.
30:55 - Space and then, oh there
is, there's a big flaw
30:59 - here in my system, I'm not
going to worry about it,
31:01 - this is good enough because
I could like, first of all,
31:04 - I can use the MouseConstraint (laughs)
31:06 - the MouseConstraint
will let me do anything.
31:08 - And then I can also release,
31:10 - when I release the box,
also the bird gets released.
31:14 - But you, the viewer, these
things can be cleaned up.
31:17 - These are interaction design problems.
31:19 - There are better solutions.
31:20 - This is kind of exciting.
31:21 - I've got the basics of Angry Birds here.
31:25 - Alma writes, you should utilize
the concept of potential
31:28 - and kinetic energy for it, it's just
31:30 - a pure projectile thing.
31:32 - So, I would love to see somebody
make a variation on this,
31:36 - and submit it to thecodingtrain.com.
31:38 - There's a way that you can submit
31:39 - your versions and doing that.
31:41 - But I just got one more
thing I want to do.
31:43 - I want to add some images to this.
31:47 - Before I add the images, there
is kind of a big bug here
31:49 - that I really should
fix, which is that when
31:51 - I put the new bird in, there's actually
31:56 - another bird, that old bird is still here,
31:58 - I'm just not drawing it anymore.
31:59 - Maybe I want it there, or
maybe I should remove it.
32:03 - But probably right now, I should
32:05 - just say World.remove bird.body world.
32:12 - And its always the other way around.
32:15 - So, I believe this.
32:17 - Right, let me see if I
can show you what I mean.
32:20 - Right, I'm going to shoot this over there.
32:23 - Now, notice this is here, I'm
not going to see it anymore,
32:27 - but I'm going to try to shoot
it right over there again.
32:29 - (laughs) See how it hit
the invisible thing.
32:32 - So, let me remove it.
32:33 - And that should fix that.
32:35 - So, if I do this.
32:37 - And it's there, and then
I do this again. (laughs)
32:41 - I do this again.
32:44 - Anyway, you can see it's
gone, it's removing it.
32:45 - So, there are different ways
that I could approach this.
32:48 - A Simon in the chat is pointing out
32:50 - that instead of just making the bodyB
32:52 - of the slingshot null, I could actually
32:54 - remove the slingshot, I could reuse
32:56 - the same bird by just
resetting its position.
32:59 - So, again, you might make,
33:01 - have a different take on this, refactor
33:03 - this in a different way.
33:05 - But I've got the basic idea down.
33:06 - Now, I want to start adding images.
33:09 - Alright, so, I have all these
Coding Train character images
33:13 - designed by Jason Hegland,
thank you for that.
33:16 - I'm going to use the dot for
the bird, a little smiley dot,
33:18 - and the angry equals sign for the block.
33:21 - Now, this block is square
I think, not rectangular,
33:25 - so I'll probably have to
adjust the dimensions.
33:27 - But the first thing I need to do,
33:28 - is upload these images to the web editor.
33:30 - So, the way that I will do that,
33:32 - is by just going over
here, doing Add File,
33:36 - and then I can just drag
these two images in.
33:40 - You know, I could put them
in a folder or something,
33:41 - and we can see they're there.
33:43 - So, now I have dot png and equals png.
33:49 - And you know, there's
probably a thoughtful way,
33:52 - that I could think about what if
33:54 - I want different blocks
to show different images,
33:56 - but I'm just going to
in a very simple way,
33:59 - use the preload function of p5.
34:01 - I'm going to have a
variable called dotImage,
34:04 - and a variable called boxImage.
34:09 - And I'm going to say dot image
equals loadImage dot.png,
34:14 - and boxImage equals loadImage,
34:18 - what is it called?
34:19 - equals.png.
34:21 - And let's first just
change the bird to show,
34:29 - instead of a circle, instead of fill,
34:32 - I'm just going to say image and
then I'm, what was the name?
34:37 - dotImg.
34:39 - Oh, and then I want to
say, imageMode CENTER,
34:47 - and then I'm going to have to say this.r.
34:51 - And this should be
this.r times two really.
34:53 - If I'm thinking about that as a radius.
34:55 - So, there we go.
34:56 - So, we can see now I've got
the little dot, it's so tiny.
35:01 - I should make it bigger.
35:02 - And I think what I
would prefer to do also,
35:05 - is draw the slingshot behind the bird.
35:08 - Okay.
35:09 - So, now, I have my dot.
35:10 - There it goes.
35:11 - Now, I just need to replace those blocks.
35:13 - So, the boxes.
35:15 - When I make the box, I am in sketch.js.
35:20 - When I make the box, I'm
giving them an x and a y,
35:24 - and a width, and a height.
35:25 - Let's just make them square right now.
35:29 - I could have an image that's not square.
35:31 - So, they're much larger
now, but that's fine.
35:34 - And then, what I'm going to do is in box,
35:38 - let's change I to image.
35:42 - image, what did I call it?
35:45 - boxImage, there we go.
35:48 - Oh, we've got a problem. (laughs)
35:51 - So, the ground is messed up now
35:54 - 'cause the ground is also the equals.
35:57 - So, and we also have to say
imageMode CENTER, (laughs)
36:01 - the ground is this like
smooshed equals, but guess what?
36:05 - Not to worry, I used inheritance.
36:07 - Oh, I'm so happy I used inheritance.
36:09 - Then I could just override
the show function,
36:12 - and there's probably a more
thoughtful way I could do this,
36:15 - but I am just going to
put this all in here,
36:21 - and I'm just going to
put this back TO rect,
36:26 - and back to this.
36:28 - And now, there we go.
36:30 - So, I now, here we go.
36:32 - (drum beating)
36:34 - I have my Angry Birds
clone with p5 and matter.js
36:40 - and I'm going to pull
this back, release and,
36:44 - oh wait why did it make
it so small? (laughs)
36:50 - So, one thing I really need to
36:53 - do a lot of
(energetic rock music)
36:54 - refactoring of this,
36:56 - because I did something very silly here,
36:58 - where I remake the bird,
but I use a different size.
37:04 - Which having a hard coded
value here is pretty bad.
37:08 - Right, let's try this one more time.
37:09 - (drum beating)
37:10 - Right.
37:12 - Wait, wait, wait, wait.
37:13 - I have an idea, I have an idea.
37:15 - Let's add restitution.
37:17 - So, I'm going to go to the
bird, and when I make the body,
37:21 - I could also add some options.
37:24 - For example, one option
might be restitution,
37:27 - which is like elasticity.
37:30 - Let's give that a value of one. (laughs)
37:35 - Let's look it up in the documentation.
37:38 - Always positive and in
the range, zero to one.
37:40 - A value of zero means the collision
37:42 - would be perfectly
inelastic and no bouncing
37:47 - would may occur.
37:47 - A value of 0.8 means
the body may bounce back
37:50 - with approximately 80 percent
of its kinetic energy.
37:53 - So, let's try giving it a value of 0.8.
38:00 - Oh, guess what?
38:01 - I can make up this variable called options
38:04 - till the cows come home,
38:06 - but if I don't actually put
it in creating the body,
38:09 - it's not going to make any difference.
38:11 - So, now, let's see how
that changes things.
38:14 - There we go. (laughs)
38:17 - It's kind of like Jenga, where it
38:18 - just like slid out a little bit.
38:21 - Oh, wait a sec, it's even bigger.
38:23 - Whoa, okay, oh, things have
gone really off the rails here.
38:26 - This is supposed to be 25.
38:28 - And let's be a little bit more kind,
38:33 - let's give it 0.5 and
let's also go to the box,
38:39 - and let's give that also a restitution.
38:46 - Okay, here we go.
38:48 - (drum beating)
38:49 - This is my angry birds game,
38:52 - made with p5 and matter.js,
38:55 - and Coding Train characters. (laughs)
38:58 - Oh, fall, fall, fall.
39:09 - Yes.
39:11 - (triumphant classical music)
39:15 - Thank you for watching
this coding challenge.
39:18 - Sorry to interrupt, I'm
about to wrap this video up,
39:20 - but I want to show you two quick
improvements before I finish.
39:22 - The first one is, when
I loaded my Coding Train
39:25 - equals character, it was a square image,
39:27 - and there's actually a lot
of additional extra space
39:30 - on the width, and so there
is some funny physics
39:33 - happening that looked a little bit off.
39:35 - So, I'm now actually cropped
and re-uploaded that image.
39:37 - So, that it's 84 pixels by 100.
39:40 - The other thing that,
thanks to a suggestion,
39:43 - I increased the mass of the bird's body.
39:48 - So, the matter.js will give elements
39:51 - a sort of default mass,
probably based on their size
39:54 - and their geometry, and
I just take the bodies
39:57 - and set its mass to its
own mass times four.
40:00 - And so, now, if I were to play my game.
40:05 - (drum beating)
40:07 - One more time.
40:08 - Let's zoom in on this.
40:12 - And go.
40:14 - Boom.
40:15 - Yeah.
40:17 - I am so angry dot Shiffman coding.
40:21 - Oops sorry bonk.
40:23 - So, this is my version,
there are so many flaws
40:25 - to what I've done here, in terms of how
40:27 - I've organized the code,
there's some like weirdness
40:29 - in the physics, I haven't really been sort
40:31 - of thoughtful about the design.
40:33 - The whole slingshot
mechanic is kind of off.
40:35 - So, there's a couple things
you could do for me here.
40:37 - Number one, go to
thecodingtrain.com, find the page
40:40 - for this challenge, the
source code will be there,
40:42 - as well as any other supplementary links,
40:43 - and you can submit your own version.
40:45 - Maybe you just want to improve
the way I wrote the code,
40:48 - to make it better organized.
40:49 - So, that people could see that.
40:50 - Maybe you want to make your own delightful
40:52 - design of a scene.
40:53 - Maybe you have a totally
other game mechanic
40:55 - and idea for how the physics
of this world should work.
40:58 - Maybe you actually want
to build this out to be,
41:00 - you have more features,
and levels, and score.
41:03 - There's so many possibilities.
41:04 - So, make your own version of this,
41:06 - you don't need to use p5, you
don't even need to use matter.
41:08 - These kind of concepts will extend
41:10 - to other drawing libraries
and game engines.
41:13 - Phaser might be one that
you should take a look at.
41:15 - Even perhaps, you can check out
41:17 - the video from Catt Small,
41:18 - about using Phaser and
codependents on this channel.
41:21 - And I will see you in a
future coding challenge.
41:24 - Thank you.
41:25 - Mwah, goodbye.
41:25 - (energetic electronic music)
41:33 - (bell ringing)

Cleaned transcript:

(train whistle sound) Hello, welcome to a coding challenge, Angry Birds. Although, my birds won't be angry, they're going to be loving loving birds. But maybe they won't even be birds, they'll be like cute little Coding Train characters, but that's not the point. I am going to program a version, a much simpler simplified version of an Angry Bird style clone. I'm going to use p5.js, I'm going to use a physics library called matter.js, and I'm going to get started in one moment. But first (laughs) let me diagram out what I need. So, I'm going to use an objectoriented programing approach. I'm going to need something called like a box. So, this will be a box class. I'm going to need something like a bird, we'll just call it a bird for right now. And I also need, the ground. So, I'm going to start my simplified Angry Birds, it's going to have a single box, a single bird. The box is sitting on the ground. I'm going to want to toss the bird at the box and knock it over. And from there, the glorious games throughout the universe that you will make maybe will follow. This is the p5 web editor, I'm going to use p5 for all of the drawing stuff, and I'm going to use the physics library matter.js for handling all of the physics. Now, matter.js does have rendering built into it but I'm going to do things my sort of way of combining both libraries so that I can do all the rendering custom in p5, and maybe by the end of this video, have some of my Coding Train characters inside of this little game that we make. Alright, so, first I want to take an objectoriented approach and I'm going to do Add File, and I want to add, I need a bird.js, and I'm going to make something called a box.js. And I think I'm going to be able to use the box for both. I'm going to use the box class for both this thing that can actually get knocked over, and the ground, which needs to be something immobile, static. So, what does a box need to have? It needs to have an x, it needs to have a y, it needs to have a width, and it needs to have a height. And I'm going to require that all of those arguments are passed in, via the constructor. Then I'm going to, oh, and so I need to put the arguments in here, x, y, w, h, and I need to, what do I need to do? I'm going to write a show function, and in here, I'm just going to say, I'm going to use fill to make it white and I'm going to say rectangle this.x, this.y, this.w, this.h. Okay, so, this is the basic idea of a box class, with no physics, this is just the data about a box and this is me drawing it. So, now, in the main sketch, I'm going to say, let ground, I'm going to have a global variable called ground. I'm going to say ground equals a new Box, and it's going to be, the x is going to be at zero, the y is going to be at like height minus 20, and the width will be the full width of the window, and the height will be 20. And then I'm going to say ground.show. Now, it's giving me all sorts of errors like it has no idea what a box is, and the reason why it has no idea what a box is, is because even though I added a new JavaScript file, I didn't add it to my index.html. So, let me go and add it to index.html, box.js. And there we go look. (bell ringing) Step one is done. I have the ground. The ground is there. Now, the next thing I'm going to do, is I'm going to have a box. I'm going to just call it a box. A box is another new Box, and let's put it over to the side in some arbitrary place. And say box.show, there it is. I want it to be tall. I don't know what I'm doing exactly yet, but something like this, there we go. Okay, so that's the thing that I need to throw my bird at. Now, I need another class. I'm going to do Add File, and I'm going to call this bird, oh, look when did I? It like knows what I'm going to do in advance, isn't that crazy? I think I've written other things in the p5 editor with a bird.js. bird.js, class Bird, and I'm just, you know, I probably could maybe use inheritance here, where I made some videos about recently, but I'm just going to do like a sort of horrible copy paste job. But I'm going to change this to an r, to indicate radius, because my bird is going to be a circle, and this dot r. And now I can say let bird, bird equals new Bird, and it'll be at like 50 pixels over, 300 pixels down, and with a radius of 25, and oh, doesn't know what bird is yet again because I now also need to add bird.js to my index.html file. So, I've got the bird, I've got the box, these are all the elements. So, I have all the elements that I want in my scene. Ultimately, I'm going to want to have like a stack of boxes and use images to make this have more personality. But the next thing that I need to do, is add physics. Now, I could use, you know, I could start doing, adding some functions to do all the physics myself, but I would like to use a physics engine. The matter.js library is released through NPM, node package manager. So, I can go, and everything NPM, it's already like appearing in my, 'cause I looked for it before I started this. But if I just go to unpkg, unpackage which is the content delivery network for NPM packages, and do matter.js, and hit Enter, we can see this is the URL for the matter.js library. I want to get the minified version of it. So, I'm going to also add .min.js. So, now I have this particular URL. I can go back to the p5 web editor, index and html and I can, I'm just going to like paste it here for a second. I'm going to grab one of these. These are the script tags for the p5 library, right. And so, instead of, I've got p5, p5 dom, p5 sound and now I want to add matter.js as a library. So, these are now all of my libraries, and all of my custom JavaScript code. And if I go back to sketch.js. Let's make sure the matter dot library has loaded. If I just say console log Matter. We can see yes, stuff is coming out here. The library is loading. That would obviously say if I hadn't loaded that library, I don't know what you're talking about. So, I have a whole bunch of tutorials about the matter.js library. So, I don't need to spend. I can refer you to those if you want more background. But basically, I need to establish this idea of an engine object, and a world object. The world is talking about the environment, and then, each one of these things will be a body. This will be a rectangular body, this will be a rectangular body, and this will be a circular body. So, my classes, box and bird, I'm going to make them wrappers to have inside of them, a piece of data which refers to the actual matter.js body. So, the first thing that I need to do, I think is let's have a world and an engine. And then I think I say engine equals Matter. Well, I think I better do this first. engine equals Matter.Engine.create, I don't know, I'm guessing. I think that's right, having done this before. And then I think the world is actually created when I create the engine, I can just grab it from the world. So, now I have the matter engine, and the matter world. Then inside of my objects, what I want to do, let's just do the box first. So, here instead of having an x, a y and a width, and a height. Although, I think I might keep the width and the height just to store it. I now want to add this.body equals Matter.Bodies.rectangle. This is a function that in the matter library, will create a rectangular body object for me. And I can give it, I'm going to do this first. Like, I don't, this box object no longer is going to have its own x and y, it's just going to give the matter body, the x and the y. So, I'm going to say x, y, I think this is actually what it gets. And then I need to say Matter.World.add to the world, this.body. So, I need to actually put it in the world. So, what happened to the box? Oh, oh, oh, I took out this.x.y, so now, the whole point of this is in show, I want to ask, I want to say hey, Matter. (laughs) I want to say give me a position which is this.body's position. And now, I'm going to draw the rectangle at pos.x, and pos.y. Now, there may be a way in fact, that I could dig into the body and get its width and height but I'm just going to store those out of convenience for myself. The size of these rectangles is never going to change, so I can keep that. There is a big issue here though. Which is that, one, is that once I start adding the physics, the box could wobble, meaning it could rotate, so, I'm also wanting, I'm also going to want to get an angle. And I am going to want to then draw it with rotation. So, I'm going to say push, I'm going to say pop. I'm going to say, translate pos.x, pos.y. And then the rectangle's at zero, zero. And I'm going to rotate by that angle. There's another little weird nuance here. So, I like for myself, I like to think about placing the rectangle with the x, y in the corner, and then the width and the height, and that's the default behavior of p5. But matter.js, when you make a rectangular or circular object, the x, y position for that object is always in the center. So, this actually have told matter.js where the object is and drawn it in a different place. So, I need to reconcile those two things. So, to reconcile those two things. There's a few different ways I could do it. One, is first, I should say rectMode CENTER. So, that I'm drawing. But now you can see everything's off in a weird place, which is maybe fine, maybe I just need to rethink where I'm placing the stuff. For example, the ground would be now at, width divided by two, height minus 10. So, that's the same thing. So, that's fine. (hands clapping) (laughs) That's one way of doing it. And my rectangle is in a weird place. But I'm not going to worry about that right now, I'm going to position stuff and I obviously could use some math to get it to rest perfectly on the ground. But I'm not going to worry about that. Still, there's no physics happening. Why is there no physics happening? I created the body, I added it to the world. It's because I'm not running the engine. So, what I need to do, draw is my loop. So, basically I need to say every time through draw step forward in time. So, I think I can just say engine.run, no. (bell ringing) I looked it up. I probably could have shown you me looking it up, but it's not, how do you look this stuff up? Let me show you, looking it up. So, if I go here and I go under engine, and I scroll through here. I could be like, oh, where's that engine.run function. Oh, it is there, how interesting. But that's not, oh I forgot to say Matter.engine, but that's actually not what I want. (laughs) I want to use update. I think there's two different ways of doing things. Engine.run will just set the engine running. But I want to lock step my p5 animation loop with my matter physics engine, so I'm going to use update. So, and what I'm going to do then is in here, I'm going to say Engine.update, but I need to say Matter.Engine.update and there we go, oh, did you see that. The physics is happening. (sighing) But the ground fell out below us, we're sinking. (laughs) It's okay everybody, we can violate the laws of physics and create an object with infinite mass that never moves. The ground can be known as a static, it can be a static object. So, objects that you create in matter.js, the physics engines can be static or dynamic, by default they're dynamic. So, the tricky thing here is I'm using the same box class to describe both the ground, and that rectangle. So, I could separate them if they really are different, or use inheritance, but maybe, why not? Let's use inheritance. This will be fun. I've been talking about inheritance, let's use it. So, I'm going to add another file. I don't know if this is the best technique. I'm going to call it ground. And I'm going to say class Ground, oh there's a problem with this idea but it's fine, extends Box (laughs) and then I'm going to say constructor. It's going to get a x, y, width, and a height. I'm going to say super x, y, width, and height. So, now, the ground is a class that inherits everything from box. If you don't know about inheritance, I'll refer you to my video about that. And I can go into sketch, and I can now say ground equals new Ground, and it's not defined because I have to add it to my index.html, there it is, hello. Alright, now, what still? Still. (bell ringing) Wow, something really crazy happened. I kind of forgot that the order, it usually doesn't matter for me because I don't have anything really happen until the setup function in draw, and everything has loaded. But I can't reference the Ground.js JavaScript file before box.js 'cause it's extending box, and as it's loading the DOM, it's got to look at the box file first. So, this actually is one of the rare instances where I've got to put this script tag before that one, no. (laughs) Oh no, that's the bird. Yes, this is going to work any second now. Yes. Okay, oh, it still goes away. So, now I need to figure out how do I just change one thing to make this static? Can I do this? this.body is static equals true. Yay. Okay, so, this is the idea of I have a whole other kind of body that extends box, it does everything the same way, but I can set an additional variable isStatic to true. And so, now, when this runs, we've got our Angry Bird box thing over there, and now we're ready to start working with our bird. Oh, okay. So, let's work with our bird now. So, we need to get rid of the x and the y. I'm going to say this.body equals Matter.Bodies.circle, x, y, r. I'm going to do the same thing. I'll actually worry about rotation. So, I'm going to sort of cheat a little bit, by just copying this over, 'cause I don't feel like typing right now, and then just change this to circle, and this dot r, and there we go. And then I also should say Matter.World.add this.body to the world, or this.body to the world. There we go. Ah, it's rolling away. Alright, excellent. So, I want to be able to toss this bird over here to this rectangle, how do I do that? Well okay, maybe I do an if statement to see if I click the mouse inside it, then I grab it. Well, one of the nice things that matter.js provides is this very general thing called a MouseConstraint. So, I can add, I'm going to add, and this is a little tricky. I'm definitely going to have to look this up. I'm going to call this mConstraint for mouse constraint, and then I'm going to say mConstraint equals matter dot, alright we're going to have to look this up. I want a MouseConstraint. Create engine options, okay. So, this is what I want, matter.MouseConstraint.create. So, I'm going to say, Matter.MouseConstraint, was capital, MouseConstraint.create, and give it the engine. Okay, so, look at this, options.mouse was undefined, options.element was undefined. May not function as expected. So, matter.js is giving me a nice warning here, explaining that well you made this mouse constraint, but you need tell me where you're going to be clicking the mouse, I need to know where you're clicking the mouse. And where I am clicking the mouse is in the canvas. So, I could like if the canvas is a DOM element, does it have an ID. Well, one of the nice things about using p5 is I can just store in a variable, the result of createCanvas which is this canvas object. And I should be able to now say, I should be able to give it some options. And then so I can add a second argument here, which is options, and I think I need to just give it mouse null. I'm just going to put things as null, and then element null. (bell ringing) Alright I'm back, after looking up what I need to do. So, what I forgot is that I need this mouse. So, I need a separate mouse object that I can use to create and manipulate those mouse inputs. One of the interesting things, there's a live chat going on right now as I'm recording this. And Alka wrote a nice suggestion for aliasing all these matter dot things, you'll notice how I'm driving to write matter dot, matter dot, matter dot everywhere. So, I'm going to actually just go over here and take. I forget what this is called, but this is kind of a new fangled JavaScript thing, where I can basically just make a nice list of all these objects I want. I'm at Engine, World, MouseConstraint and I'm maybe going to use Constraint, and I can just set that all equal to Matter. So, basically, this is me aliasing everything that's matter.Engine, matter.World, matter.Bodies. So, in theory, I should be able to just say Engine now here, this makes things a little bit easier, just MouseConstraint here. So, my code is a little bit more succinct and I'll go back and fix that in other places, as necessary. But, what I need here is a Mouse, and I need to say constant Matter mouse, I'll just call it mouse equals Mouse.create canvas.elt. So, I need to make a mouse object with the DOM element associated with the canvas. And then I believe, I can just put this here, under options. And now, here we go, let me bring this all the way back. Dare I say, oh no, oh, so close. Oh, what did I forget? I probably have to add it to the world. World.add world, mConstraint. Yay, look. Now, I can pick this stuff up and I can toss it, oh look come on. I can do better. Yay, oh, goodbye. What's left to do? I want to add a few more boxes. I want to put images instead of these, just these boxes and circles, and I think I should try to add a slingshot, even though right now, I could kind of just toss it. Okay, the first thing would be just adding more boxes. So, I'm going to change box to boxes, and I am going to now have a little for loop, i is zero, i is less than three, i plus plus. And then I'm going to say instead of a single box, I'm going to say boxes index i equals a new Box, and then here I am going to then say for let box of boxes, little for loop, draw them all. So, now you can see, look at that, What's so crazy, is when I start them all at the same point, the two objects cannot appear, cannot occupy the same space in a world of physics. So, they like burst off from each other. But let's do something like say, 300 minus i times 75, which will stack them. So, now I have little stack of boxes, and then I can toss it, and there we go, I didn't knock them over. Oh, whoa, I threw it over. So there's some nuance here to how physics engines work and how I'm going to need to create some balance in the system. And you know, one of the things there is I probably need to increase the number of iterations per update in order for it not to be able to move so fast, just to jump over the stuff. But let me just run this again. I want to really see if I can knock those things over. Yay, I knocked them over. I could also play around with the properties like restitution and friction, which are physics attributes of each of these objects, restitution being elasticity or bouncyness. So, maybe towards the end of this video, I'll try adding that. But now we're in pretty good shape. So, let me add the slingshot. So, what I did right now, is I created this idea of a MouseConstraint, and a MouseConstraint is this very generic constraint that just like, any time I click on something it'll make a little spring like connection between where I click the mouse, and the object, so I can move it around. But what I want, is actually to introduce, a constraint maybe right here, that's fixed to this point, and only attached to this particular bird. And I think it's probably smart for me to wrap this into a class. Because I'm really going all in on this objectorientated programming approach. So, let me make another JavaScript file called slingshot.js, and let me just right out the outset, remember that I need to refer to slingshot.js, then class SlingShot. So, what does a slingshot need? So, I think it needs an x and a y, like where is the point from which this object will be attached? And then it needs. Oh, no no, that's not where these go. It needs an x and a y, and then it needs a body. So, now, I'm going to create, let's call this this.sling, equals Constraint.create and then options. I think this is how that works. And this should be Constraint. (laughs) Constraint. So, I'm going to make up some options now. So, I need to configure that Constraint. The two things I want to be connected, with this constraint are a point, which I'll call pointA, this is in the matter.js documentation specs, pointA, which is an object with an x, which will be what I pass in, and a y, which will be what I pass in, and then also it needs to be connected to something else, bodyB. I think it could be bodyA and bodyB, or pointA and bodyB. There's different ways you can configure it, but I want a point and a body. I could make another body that's static body I guess, but a point is the equivalent to that. So, then the body is going to be, oh, I don't think I need an object here, just this particular body. Then I want to say World.add, this to the world, this.sling. And the other things that are part of a constraint, I believe, I forget the actual stiffness, like, it's like a spring connection, how stiff is it? So, I think that's actually just called stiffness. A value of one means the constraint should be very stiff, a value of 0.2, means the constraint acts like a soft spring. So, let's just try, just to start with, let's try 0.5. And then, a length is very important. What is the rest length of that spring? Let's make it like 20 pixels. So, now, I've created this slingshot. I also think it would make sense for me to draw it. So, I'm going to do a show, I'm going to make show function, and I'm going to say stroke 255, and I'm going to draw a line, well, let's make posA equal this.sling.pointA. And posB equals this.sling.body.position. These are the two things that the sling, the string, the spring, the connection, the constraint is attached to. So, draw a line from posA.x, posA.y, posB.x, posB.y. Oh, so, I think, by the way I'm writing this class, I didn't even make the slingshot. So, now, I need to go into sketch.js and I'm going to make a variable called slingshot. I'm going to say slingshot equals a new SlingShot. And I need to give it a x and a y, which where did I make the bird 5300? Let's just put it in the same place. And then, I need to connect it to the bird's body. You can see already, look, this is kind of like stuck somewhere, right. This is great. But let me draw it, 'cause I think that'll make it more obvious. slingshot slash show, and what did I call it? slingshot show, ah PosB. Oh, bodyB, it's pointA and bodyB. So, if I do this. Right, you can see there it is. Now, okay, this was some goofiness here. So, one thing that's really weird is that if I drag the mouse off, the mouse constraint gets confused, and thinks it's stuck. So, that's just an interaction design problem, that I have to iron out at some point. Let's change a few things like let's make the bird much smaller. Let's move everything over a little bit. Just to give me little space here. So, now, we can see and maybe I should make that rest length a little bit longer, there we go. And maybe the stiffness should be a little bit less, there we go. So, I'm pulling this back. The idea is that I'm going to pull it back and let go, and I want it to fly. So, we're getting there. I have this slingshot now. Now, how do I release it? I have to come up with a way of releasing this. I need a way somehow, to launch this bird off of the slingshot. Like the slingshot should be broken, and the constraint should be broken, and it should go flying. So, first let me least create a mechanism for that. So, let me write a function here. I'm going to call it fly. And I think if I just say this.sling.bodyB equals null. Like if I just detach the body then the thing that's attached to it, will go flying. So, let's just try in, let's just add, just as a test, a keyPressed function. If key equals space, then slingshot.fly. So, again, I need to figure out when it should be flying. But if I just hit the space bar, cannot read property position of null, slingshot line 24. So, okay, so only if there is a body attached, then should I bother to draw the line. Okay, so, I need to also not draw the line if there's no body. So, let me run it, there we go. We can see (laughs) now could I possibly time it? Like now my interaction is, I have to do this. Yeah, but I shouldn't have to hit the space bar, right. I shouldn't have to hit the space bar. So, how can I determine a time where I should have it fly? What if I were to get the body's speed right. So, a suggestion came in the chat to just look at when the mouse is released. I think this isn't going to work, timing wise. But let's try it. What if I just write function mouseReleased which is a global p5 event for when I release the mouse. And there I could just say, slingshot fly. So now, I'm pulling this back and release the mouse. See, it didn't have a chance to move, before it could start pulling it. So, I could use like setTimeout, this is kind of ridiculous. I could and then, like do it in like 50 milliseconds later. Is that right? Maybe it should be more like a 100 milliseconds later. Oh, that's actually kind of great. That worked. Weirdly, just giving it a little time later. I was going to go through this whole thing of testing its speed. You know what? This is good enough. I think you could probably, those of you watching, you might want to come up with a different solution. But I'm surprised that this actually worked, just the little setTimeout, just give it a 100 milliseconds later, thank you to Betatester704, who maybe was the one who suggested that. So, this is great. We have Angry Birds. Now, one thing I should say, is like, at some point I want to be able to like have a new bird, and so, there's a variety of ways I could do that. Let's use keyPressed. We'll just use a key press right now. And I could say, remake the bird, and then I could say, slingshot.attach this bird.body, and then in bird, I mean sorry, in slingshot, I could say, attach, get a body, and I could say this.sling.bodyB equals that new body. So here, now, what I should be able to do is I should be able to let it fly, knock the stuff over, and then, oh sure I want to probably detect when it should do this. I can hit space, oh no sorry, oops. Space and then, oh there is, there's a big flaw here in my system, I'm not going to worry about it, this is good enough because I could like, first of all, I can use the MouseConstraint (laughs) the MouseConstraint will let me do anything. And then I can also release, when I release the box, also the bird gets released. But you, the viewer, these things can be cleaned up. These are interaction design problems. There are better solutions. This is kind of exciting. I've got the basics of Angry Birds here. Alma writes, you should utilize the concept of potential and kinetic energy for it, it's just a pure projectile thing. So, I would love to see somebody make a variation on this, and submit it to thecodingtrain.com. There's a way that you can submit your versions and doing that. But I just got one more thing I want to do. I want to add some images to this. Before I add the images, there is kind of a big bug here that I really should fix, which is that when I put the new bird in, there's actually another bird, that old bird is still here, I'm just not drawing it anymore. Maybe I want it there, or maybe I should remove it. But probably right now, I should just say World.remove bird.body world. And its always the other way around. So, I believe this. Right, let me see if I can show you what I mean. Right, I'm going to shoot this over there. Now, notice this is here, I'm not going to see it anymore, but I'm going to try to shoot it right over there again. (laughs) See how it hit the invisible thing. So, let me remove it. And that should fix that. So, if I do this. And it's there, and then I do this again. (laughs) I do this again. Anyway, you can see it's gone, it's removing it. So, there are different ways that I could approach this. A Simon in the chat is pointing out that instead of just making the bodyB of the slingshot null, I could actually remove the slingshot, I could reuse the same bird by just resetting its position. So, again, you might make, have a different take on this, refactor this in a different way. But I've got the basic idea down. Now, I want to start adding images. Alright, so, I have all these Coding Train character images designed by Jason Hegland, thank you for that. I'm going to use the dot for the bird, a little smiley dot, and the angry equals sign for the block. Now, this block is square I think, not rectangular, so I'll probably have to adjust the dimensions. But the first thing I need to do, is upload these images to the web editor. So, the way that I will do that, is by just going over here, doing Add File, and then I can just drag these two images in. You know, I could put them in a folder or something, and we can see they're there. So, now I have dot png and equals png. And you know, there's probably a thoughtful way, that I could think about what if I want different blocks to show different images, but I'm just going to in a very simple way, use the preload function of p5. I'm going to have a variable called dotImage, and a variable called boxImage. And I'm going to say dot image equals loadImage dot.png, and boxImage equals loadImage, what is it called? equals.png. And let's first just change the bird to show, instead of a circle, instead of fill, I'm just going to say image and then I'm, what was the name? dotImg. Oh, and then I want to say, imageMode CENTER, and then I'm going to have to say this.r. And this should be this.r times two really. If I'm thinking about that as a radius. So, there we go. So, we can see now I've got the little dot, it's so tiny. I should make it bigger. And I think what I would prefer to do also, is draw the slingshot behind the bird. Okay. So, now, I have my dot. There it goes. Now, I just need to replace those blocks. So, the boxes. When I make the box, I am in sketch.js. When I make the box, I'm giving them an x and a y, and a width, and a height. Let's just make them square right now. I could have an image that's not square. So, they're much larger now, but that's fine. And then, what I'm going to do is in box, let's change I to image. image, what did I call it? boxImage, there we go. Oh, we've got a problem. (laughs) So, the ground is messed up now 'cause the ground is also the equals. So, and we also have to say imageMode CENTER, (laughs) the ground is this like smooshed equals, but guess what? Not to worry, I used inheritance. Oh, I'm so happy I used inheritance. Then I could just override the show function, and there's probably a more thoughtful way I could do this, but I am just going to put this all in here, and I'm just going to put this back TO rect, and back to this. And now, there we go. So, I now, here we go. (drum beating) I have my Angry Birds clone with p5 and matter.js and I'm going to pull this back, release and, oh wait why did it make it so small? (laughs) So, one thing I really need to do a lot of (energetic rock music) refactoring of this, because I did something very silly here, where I remake the bird, but I use a different size. Which having a hard coded value here is pretty bad. Right, let's try this one more time. (drum beating) Right. Wait, wait, wait, wait. I have an idea, I have an idea. Let's add restitution. So, I'm going to go to the bird, and when I make the body, I could also add some options. For example, one option might be restitution, which is like elasticity. Let's give that a value of one. (laughs) Let's look it up in the documentation. Always positive and in the range, zero to one. A value of zero means the collision would be perfectly inelastic and no bouncing would may occur. A value of 0.8 means the body may bounce back with approximately 80 percent of its kinetic energy. So, let's try giving it a value of 0.8. Oh, guess what? I can make up this variable called options till the cows come home, but if I don't actually put it in creating the body, it's not going to make any difference. So, now, let's see how that changes things. There we go. (laughs) It's kind of like Jenga, where it just like slid out a little bit. Oh, wait a sec, it's even bigger. Whoa, okay, oh, things have gone really off the rails here. This is supposed to be 25. And let's be a little bit more kind, let's give it 0.5 and let's also go to the box, and let's give that also a restitution. Okay, here we go. (drum beating) This is my angry birds game, made with p5 and matter.js, and Coding Train characters. (laughs) Oh, fall, fall, fall. Yes. (triumphant classical music) Thank you for watching this coding challenge. Sorry to interrupt, I'm about to wrap this video up, but I want to show you two quick improvements before I finish. The first one is, when I loaded my Coding Train equals character, it was a square image, and there's actually a lot of additional extra space on the width, and so there is some funny physics happening that looked a little bit off. So, I'm now actually cropped and reuploaded that image. So, that it's 84 pixels by 100. The other thing that, thanks to a suggestion, I increased the mass of the bird's body. So, the matter.js will give elements a sort of default mass, probably based on their size and their geometry, and I just take the bodies and set its mass to its own mass times four. And so, now, if I were to play my game. (drum beating) One more time. Let's zoom in on this. And go. Boom. Yeah. I am so angry dot Shiffman coding. Oops sorry bonk. So, this is my version, there are so many flaws to what I've done here, in terms of how I've organized the code, there's some like weirdness in the physics, I haven't really been sort of thoughtful about the design. The whole slingshot mechanic is kind of off. So, there's a couple things you could do for me here. Number one, go to thecodingtrain.com, find the page for this challenge, the source code will be there, as well as any other supplementary links, and you can submit your own version. Maybe you just want to improve the way I wrote the code, to make it better organized. So, that people could see that. Maybe you want to make your own delightful design of a scene. Maybe you have a totally other game mechanic and idea for how the physics of this world should work. Maybe you actually want to build this out to be, you have more features, and levels, and score. There's so many possibilities. So, make your own version of this, you don't need to use p5, you don't even need to use matter. These kind of concepts will extend to other drawing libraries and game engines. Phaser might be one that you should take a look at. Even perhaps, you can check out the video from Catt Small, about using Phaser and codependents on this channel. And I will see you in a future coding challenge. Thank you. Mwah, goodbye. (energetic electronic music) (bell ringing)
