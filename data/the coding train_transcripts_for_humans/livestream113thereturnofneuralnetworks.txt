With timestamps:

00:00 - hello happy 2018 it is me Dan
00:05 - stripping life on a Friday as I hope to
00:08 - and expect to all of 2018 I'm sure on
00:11 - this and Fridays here and there but this
00:13 - is the coding train I'm starting a new
00:17 - year fresh but I hope that some of you
00:20 - were able to tune in to my end of the
00:22 - year livestream where I broke out a
00:25 - keyboard and tried to sing some songs
00:28 - hopefully not have you actually watched
00:30 - that it was so I'm just hoping that
00:37 - everything seems to be working yeah so
00:40 - here's the thing I really had planned to
00:43 - do some grooming and freshen up but I
00:47 - don't know if you know this I kept this
00:49 - backup pager cuz it's really really cold
00:52 - for something you probably live in parts
00:54 - of the world where it is much colder and
00:55 - it is even colder than this year-round
00:57 - but for New York City it's quite cold in
01:00 - I find that this is like having a
01:01 - built-in ski mask basically so as soon
01:04 - as the weather warms up a little bit I
01:05 - will get back to the being a little less
01:09 - I don't know wilderness man thing that I
01:13 - look that I'm going for right now okay
01:15 - so yes I see that there are some viewers
01:19 - from Quebec which as we say here Quebec
01:21 - I think it's Americanized pronunciation
01:24 - of Quebec right my right I don't know if
01:27 - I'm right so but maybe to your chagrin
01:32 - or maybe to your happiness today is the
01:35 - day where I'm making a commitment to
01:37 - continue doing a set of tutorials and
01:41 - examples and coding challenges around AI
01:44 - and machine learning and so in the
01:45 - broadest sense what I'll be starting
01:48 - with here today is continuing my
01:50 - playlist where I was building a little
01:52 - JavaScript neural network library from
01:54 - scratch bit by bit that's what I'm gonna
01:55 - do probably for the entire time today up
01:58 - until about 4:00 p.m. Eastern time I'm
02:03 - getting the audio is out of sync you
02:06 - know this is what happens I cannot
02:09 - control this the audio being out of sync
02:11 - although actually hold on
02:13 - a second let me let me see usually I say
02:18 - that I can't but oh my goodness
02:21 - my old hole let me look here in my
02:23 - settings here because I do do something
02:27 - I do actually have a built-in delay I
02:32 - think that I put in one point when I was
02:33 - out of sync
02:34 - I don't see it anymore no way I forget
02:40 - where that is an open broadcast studio
02:45 - advanced output audio oh no it's fine so
02:55 - I'm gonna I'm gonna just keep going one
03:01 - thing is that eventually these videos
03:03 - most of what I do today will be edited
03:05 - into shorter chunks that get uploaded
03:07 - later
03:08 - and the wonderful matcha who helps me
03:10 - with this can often realign the audio in
03:13 - what I like to call post Claude nooks
03:16 - young the French is like something about
03:19 - French is filtering it's through my head
03:21 - today post-production so even if the
03:24 - audio is a little bit out of sync in
03:25 - this YouTube version but I think mostly
03:27 - I don't have control over this because I
03:29 - just have a computer I have some
03:30 - software open broadcast studio I have a
03:32 - microphone some cameras I send it out to
03:34 - the internet and it arrives on your
03:36 - screens in some form so I'm gonna keep
03:43 - going yeah I know I know it appeared the
03:45 - beard what can I do
03:46 - it's very cold this Alps so let me get
03:52 - you some updates what's gonna happen
03:55 - this month is I will be here every
03:57 - Friday and I'm gonna continue I just
04:00 - already said all this me know just get
04:02 - started okay well this is another
04:04 - business there's a new year let me tell
04:06 - you about what is out there on the
04:07 - internet that you could look at related
04:10 - to the coding train so you can if you
04:14 - like the work that I do you can support
04:18 - me on patreon patreon.com slash coding
04:22 - train you may also find
04:29 - actually all these links at the coding
04:33 - train com
04:34 - you can see here latest video this
04:36 - should be me this should show up here be
04:38 - live streaming I don't know why that's
04:40 - my latest video you can subscribe you
04:42 - can like all the videos I'm told that
04:44 - the machine learning algorithm that
04:46 - YouTube employs to recommend its videos
04:48 - appreciates when you like and subscribe
04:51 - and you can find some links to the
04:53 - videos here I know what I'm done
04:55 - you can also some of the anytime I use a
04:57 - book all the books that I use as
04:59 - learning materials for myself you can
05:01 - find those at amazon.com slash shop the
05:04 - coding train you can also get yourself
05:07 - your very own coding train branded it's
05:11 - not at all I wish I should have a coding
05:13 - trick
05:14 - what about what I turned into this 2018
05:16 - apparently is the year me just trying to
05:17 - sell you stuff but train whistle here
05:21 - and that's pretty much it so that's what
05:24 - you're watching now I also like to
05:29 - remind you that I use in almost all of
05:32 - my tutorials open source software from
05:35 - the processing foundation I also full
05:36 - disclosure and one of the organizers
05:39 - directors members I don't know what the
05:41 - right term is of the processing
05:43 - foundation it's a project that I spend a
05:45 - lot of time working on and you can also
05:47 - support the processing foundation it is
05:49 - we're not prosecution is a non for
05:52 - profit entity so your donation is tax
05:55 - deductible depending on the laws of you
05:57 - wherever you with but certainly for the
05:59 - US is tax deductible so those are the
06:02 - kind of as this is a new year 2018
06:05 - things that I would again Simon is
06:10 - making a point in the chat which is a
06:12 - good one that I should say machine
06:14 - learning and deep learning instead of AI
06:16 - and ml so here's yeah
06:18 - so I think a long time ago when I was
06:21 - doing me when I started this playlist I
06:22 - kind of had some introductory video that
06:25 - talked about the terminology of machine
06:27 - learning deep learning artificial
06:29 - intelligence I like to think I agree
06:33 - that there is something very specific
06:34 - that I'm doing right now which is using
06:37 - neural network based systems for machine
06:40 - learning
06:40 - and then that might turn into deep
06:42 - learning as these are neural network
06:44 - based systems get more complex and
06:46 - sophisticated and the amount of data
06:48 - that's going in them gets much larger
06:49 - but I like to in this very abstract way
06:53 - if the camera went off already think
06:55 - about what I'm doing as broader than
06:58 - that
06:59 - while the tutorials yes right now are
07:01 - really zoned in highly specific what I'm
07:05 - interested in is as a creative coder
07:08 - just to use that term for a moment what
07:11 - are ways that my systems that I develop
07:14 - can appear have the illusion of our
07:17 - perhaps even actually have intelligence
07:19 - and in that sense artificial
07:22 - intelligence is a nice really broad term
07:24 - for that so what does it mean for Boyd
07:27 - flocking with other Boyd's on the screen
07:29 - to suddenly have a brain and make
07:30 - decisions based on a neural network or
07:32 - what does it mean to have all this data
07:35 - that's coming from you know some type of
07:37 - quantified self system and visualize it
07:40 - and analyze it in a machine learning
07:42 - like way so there's a lot of that don't
07:45 - really make much sense but I really want
07:46 - to think of this sort of like broad that
07:48 - that broad picture and I'm not this is
07:51 - not a channel on this is not a tutorial
07:52 - for kind of you know specifically
07:56 - related to only data science and you
08:00 - know machine learning in a kind of
08:02 - scientific which is actually a really
08:04 - good thing to learn I don't know why I
08:05 - said it like this that's what this is
08:07 - this is me being scientific apparently
08:09 - but so I'm trying to treat this sort of
08:13 - broad creative approach okay yes
08:16 - pointing out all these excellent things
08:18 - in the chat you're wondering what this
08:19 - chat that I'm looking at this is my this
08:21 - is a slack channel for patrons of the
08:23 - coding train there's also a youtube chat
08:25 - where everyone's telling me that the
08:26 - audio is out of sync I'm aware of it
08:28 - where is that in open broadcast I just
08:30 - want to make sure I didn't yeah I'm
08:32 - gonna just take a minute to look at this
08:33 - audio issue one more time we're open
08:37 - broadcasting studio audio delay where is
08:41 - that setting audio out-of-sync huh
08:48 - sound settings
08:51 - Advanced tab audio global hmm I don't
08:56 - have an advance tab miles of the in
09:01 - collection tools under settings probably
09:05 - oh it Vance I do have an advanced tab
09:07 - audio audio default I do not see in a
09:15 - delay stream delay 20 seconds 20 seconds
09:27 - people tell you for some people are okay
09:29 - it's some people it's out of sync which
09:30 - means there's probably nothing I can do
09:32 - about it I swear at one point though I
09:34 - did really I didn't add a setting clap
09:38 - alright alright everybody start off 2000
09:43 - team with a nice I'm gonna do two things
09:47 - actually one thing I want to know is if
09:49 - my if my audio is different than my
09:50 - sound effect audio this is just out of
09:52 - my own curiosity okay little live live
09:57 - little live live stream debugging so I
10:00 - am now going to clap and so my questions
10:06 - for you are did you hear the clap before
10:08 - you saw the clap after you look laughs
10:11 - how long was that play now I really want
10:14 - to check this all so I'm gonna do this
10:21 - tick-tock sound no that's not a good one
10:24 - I'm gonna do the buzzer sound and I'm
10:32 - gonna raise my hand when you hear that
10:33 - when I I'm gonna go like this when the
10:36 - buzzer goes off and see if the buzzer
10:38 - and my finger at the same time even know
10:40 - I don't know I don't know what I'm doing
10:44 - there's a delay in that sound doesn't
10:47 - start at the beginning when I hit the
10:49 - button nevermind does it that dust I'm
10:52 - gonna hit the snare drum and now
11:00 - was there is there is that so 200
11:03 - milliseconds sound was right see that
11:06 - 200 millisecond delay i think i have a
11:08 - 200 millisecond delay audio ahead so
11:10 - where is that settings advanced somebody
11:16 - must somebody watching must know
11:19 - somebody must know open broadcast studio
11:23 - audio maybe it's actually in hold on
11:28 - hold on
11:29 - maybe it's actually in here ah mic
11:33 - advanced audio properties I found it
11:37 - volume sync oh yeah there is a synch
11:40 - offset by a hundred milliseconds
11:45 - interesting yeah I know where it is now
11:49 - so I wonder if I should I'm gonna delete
11:57 - that I'm gonna get rid of the sync
12:02 - offset I got it
12:04 - I can get rid of that offset okay I got
12:07 - rid of the offset and I'm gonna see is
12:11 - it worse or better
12:19 - I know everybody says who cares I don't
12:21 - know why I'm not gonna know where I
12:22 - won't waste too much time on this but I
12:24 - can fix it worse same worse worse worse
12:32 - better same same worse worse same same
12:34 - worse worse same same worse worse worse
12:35 - worse worse or same same same words oh
12:37 - this is very scientific of me okay I
12:39 - think I know what to do I know what to
12:41 - do and I've got it now everyone be
12:45 - amazed at my amazing ability to fix the
12:51 - audio sync issue and here we go ready
13:00 - here comes another clap it's gonna be
13:03 - perfect
13:06 - alright so I made it 300 everybody
13:09 - that's what you people in patriot in the
13:11 - slack channel over time you can all see
13:12 - I really should use this Bell but you
13:15 - can't start for you to see it
13:17 - so I think I got it perfect great okay
13:20 - uh so let me talk about some things
13:28 - number one I want to mention that I'm
13:32 - gonna mention this book again you go to
13:34 - amazon.com slash shop slash coding train
13:37 - this is a book that I used first of all
13:39 - back up a little bit let me let me open
13:43 - up the playlist let me to open up the
13:45 - playlist YouTube Schiffman and what's
13:55 - the one that I'm looking for
13:57 - under playlists this one okay so this is
14:08 - a playlist that I began back in when did
14:15 - I do this I think it was when were these
14:18 - videos published it doesn't tell me here
14:20 - these videos were made at the end of May
14:23 - I believe and some may perhaps in June
14:26 - and then I had this bicycle accident and
14:29 - I kind of took a couple months off and
14:31 - then when I came back it was the
14:32 - beginning of the semester and I was
14:34 - teaching other stuff so I wasn't really
14:35 - able to get back to this so this now
14:38 - will be my top primary topic for this
14:42 - semester which doesn't mean when I say
14:46 - primary it's still planning on doing
14:48 - other I have some github stuff but I
14:51 - want to keep doing do I got to go see
14:53 - more of those coding challenges that I
14:54 - want to get out of the way I really want
14:57 - to do some more videos about working
14:59 - with processing in Eclipse and Java to
15:01 - make processing libraries so I do have a
15:03 - bunch of things in my on my mind that I
15:04 - would like to get to huh I should I need
15:07 - to get to I term at some point no I did
15:09 - Chrome extensions though but at least
15:12 - for the next couple months this is what
15:13 - I'm a focusing on now some this was
15:16 - actually fortuitous the what's that
15:19 - thing the silver lining of looking on
15:23 - the bright side of having had this delay
15:25 - is new stuff has happened number one
15:28 - three if I go to my Twitter
15:31 - we just tweeted about this because this
15:35 - is just so darn good way better than
15:38 - anything I could possibly make three
15:42 - three blue one Brown is a YouTube
15:45 - channel and a three blue one Brown has
15:50 - several different videos about neural
15:52 - networks and how they work they're
15:55 - really good
15:56 - so these have come out since I started
16:00 - that and so these are a really excellent
16:01 - resource for a deeper dive into the
16:05 - mathematics these are animated they're
16:07 - edited there's a lot of beautiful work
16:08 - done thoughtfully done on these videos
16:10 - they make so much sense a wonderful
16:12 - animations it's very different than my
16:13 - style of like haphazard trying to
16:15 - explain things in live coding but so I
16:18 - think that's good in that I there's no
16:19 - way I'd ever be able to make something
16:20 - of this quality that within me but this
16:23 - is an excellent resource to dive a
16:25 - little bit deeper into some of the maths
16:27 - behind how neural networks work as you
16:32 - know along with or before you watch my
16:34 - videos where I'm gonna try to code this
16:36 - stuff so that's number one that's
16:38 - excellent the other the other thing
16:40 - that's happened is that a new JavaScript
16:43 - library has come out called deep learn
16:45 - j/s deep learn j/s is a JavaScript
16:49 - library that is you might call it like a
16:52 - tensor flow for the web it doesn't
16:57 - really help if you don't know what
16:58 - tensor flow is but it is a hardware
17:00 - accelerated machine intelligence library
17:02 - for the web so what I'm doing right now
17:05 - what I will continue doing today is
17:07 - create this own let me open up atom
17:17 - create this here we are this is good
17:20 - I've been working on this somewhat
17:22 - ridiculous matrix and I'm going to call
17:26 - I'm going to change it to es6 class a
17:28 - class but matrix library which has like
17:31 - a bunch of functions like I could add a
17:32 - number to every element of a matrix or I
17:35 - could add two matrices element wise
17:37 - together so I've been working on this
17:39 - rather absurdly and I intend to continue
17:43 - and finish this the
17:44 - what I want to have hopefully by the end
17:46 - of this month is a complete set of
17:48 - tutorials for building your own vanilla
17:51 - basic neural network in JavaScript with
17:53 - no other dependencies p5 might be a
17:55 - dependency in terms of how I might
17:57 - visualize and draw it but the library
17:59 - itself that does the neural network math
18:00 - will all be there but this isn't really
18:05 - going to get us very far when we want to
18:07 - do some maybe more real-world or faster
18:10 - more optimized projects for the web and
18:13 - that's where deep learn Jas comes in I
18:17 - think I mentioned in some of my videos
18:19 - where I started this matrix math stuff
18:21 - that there's math Jas and like GPU dot
18:24 - rocks there's a bunch of JavaScript
18:26 - implementations but deep learned yes
18:27 - it's a project developed at by Google of
18:31 - the big picture research group up in
18:33 - Cambridge sort of part of the Google
18:35 - brain initiative it's an open source
18:37 - library it's not an official Google
18:39 - product but it's an open source library
18:40 - and there's I encourage you to check out
18:42 - the examples tutorials all this stuff so
18:44 - in relation to this along with a whole
18:47 - bunch of other folks here at ITP
18:49 - students and other staff faculty and
18:52 - researchers there is a library under
18:54 - development called if I go to github.com
18:57 - slash ITP NYU /p 5ml I think what could
19:03 - be the no it's a that's not the final
19:05 - name of it any in any case let me find
19:07 - that repo p5 sorry - t plur and j s so
19:11 - this is also why am I not logged in here
19:13 - I'm gonna sign in to get up at some
19:15 - point so this is also a library that's
19:17 - under development that will also allow
19:22 - me and you to do a lot more with these
19:24 - machine learning algorithm is if I can
19:27 - summarize it step 1 build and in a
19:32 - vanilla meaning basic with no dependency
19:35 - is not worrying about being optimized or
19:36 - having it really be very good but build
19:38 - all the pieces of a neural network from
19:40 - scratch in JavaScript to understand how
19:41 - it works step 2 replace the engine that
19:46 - does the math the matrix math that's in
19:48 - that implementation with deep learn Jas
19:52 - so that it works a little bit faster
19:54 - step 3
19:55 - start to actually use deep learn Jess
19:58 - which has a set of classes and objects
20:00 - for different neural network
20:04 - architectures to do projects and so just
20:07 - let me just show you for example if I go
20:10 - under examples and let's go into this
20:15 - KNN image classifier so let's actually
20:21 - run this for fun let's run let's see if
20:23 - this works this is by the way a simple
20:26 - if you might have you've seen Google's
20:27 - the creative labs project teachable
20:30 - machines which I am also going to
20:31 - reference in some tutorials that used as
20:32 - a explanatory this is very similar to
20:34 - that and so Mike I gotta turn my webcam
20:37 - on so here I am I'm going to do this so
20:47 - that's me training this neural network
20:50 - system this machine learning system let
20:53 - me just say that category a now I'm
20:56 - going to do category B and now what I
21:02 - want to do is start guessing so I fear
21:05 - II it should know whenever I go I'm a
21:08 - whatever I go I'd be I'm going to start
21:10 - guessing and here we go
21:14 - hold on training this design could use a
21:19 - little work but you know usually I'd
21:21 - have a higher resolution
21:22 - but you can see it here let's look at
21:23 - confidence of a is oh I'm standing in
21:31 - front of it hold on so you can see
21:35 - confidence in a and confidence of B so
21:44 - these are the kinds of creative projects
21:46 - that we can think about making also um
21:48 - and and there's lots more so I want to
21:50 - get to all this but I've got to start
21:52 - somewhere
21:52 - okay so that's my plan and we can see
21:55 - where I left off this is where I left
21:57 - off well I left off update on machine
22:00 - learning video series which was kind of
22:02 - like I'm gonna take a break from this
22:03 - for a while but I left off here matrix
22:06 - math part 2 so what I hope to get done
22:08 - today although I'm quickly running out
22:09 - of time
22:10 - just randomly talk is matrix math part 3
22:13 - which will be doing actual matrix
22:16 - multiplication matrix product
22:22 - and then implementing feed-forward the
22:27 - feed-forward algorithm for the neural
22:30 - network and then next week I hope to
22:32 - come back and look at training and back
22:34 - propagation so that's gonna be that's
22:36 - kind of my plan okay so I'm looking and
22:47 - it looks like I see Chris who has done a
22:51 - lot of work ITP student who's done a lot
22:53 - of work with the P 5 ml library is in
22:55 - looks like is in the live channel so hi
22:57 - Chris answer all your questions okay now
23:00 - so before I get started let's just see
23:03 - if I can if there's any questions I can
23:05 - answer in the YouTube chat really
23:06 - quickly hi from Sweden
23:14 - it's
23:25 - all right there don't look like there's
23:27 - too many questions there people are
23:29 - asking for shoutouts I don't know what
23:31 - is the Amazon store for coding train
23:32 - please okay oh and through that question
23:35 - yeah I should mention also Suraj I
23:38 - didn't mention Suraj
23:39 - that this is another YouTube channel
23:41 - which I would highly recommend ah no I
23:43 - know I feel I just sort of that was kind
23:45 - of like assumed for me so I also would
23:49 - highly recommend if you're interested in
23:51 - this topic I mean this channel is
23:52 - amazing and completely dedicated to this
23:54 - topic so I would definitely check out
23:57 - Suraj's channel which I watch all those
23:58 - videos as well ok yes I will be making
24:03 - some processing things in the future
24:06 - will you make a tutorial on how
24:08 - backpropagation works on convolution or
24:10 - recurrent Nets I don't know I mean again
24:12 - my plan is to do all the pieces of the
24:16 - vanilla neural network from scratch but
24:18 - using a library like deep learn jazz
24:20 - that's gonna have the architecture for a
24:22 - convolutional neural network built into
24:24 - it so I can really just use the library
24:27 - to implement a convolutional neural
24:28 - network but I certainly will talk about
24:30 - what it is and how it works but I don't
24:33 - intend to build every new neural network
24:37 - architecture that's been developed that
24:39 - comes out of paper from scratch in
24:40 - JavaScript in this I don't think I'm
24:43 - capable of that I don't think that would
24:44 - make sense so ok the store so there are
24:49 - two places if you're interested in
24:51 - coding trade merchandise there's coding
24:53 - train store Envy calm and then there is
24:57 - where I have all the books that I'm
24:58 - using and there's a bunch of them need
25:00 - to add
25:01 - amazon.com slash shop slash the coding
25:04 - drain ok all right so now I think I can
25:10 - get started oh oh it's three blueberries
25:18 - what is talking to me videos are so good
25:24 - I can't it's like I wash it I'm like oh
25:26 - Mike oh my goodness what am i doing I'm
25:29 - like a complete crazy person these this
25:32 - is what like this is the model of
25:33 - Education
25:37 - different styles different strokes for
25:39 - different folks hopefully what I'm doing
25:41 - also has value but those are really good
25:45 - all right okay so it's this is gonna be
25:49 - a little tricky because I got to get
25:51 - sort of back into this frame of mind I
25:53 - did try to do that dukes I did some
25:55 - reading and actually watch some of my
25:57 - videos she almost never do just to try
25:59 - to see what I covered and that was a
26:00 - that was kind of a shock to see what
26:02 - they're like but this is where I am in
26:07 - so let me get this I don't need the
26:11 - whole desktop open here in Adam I'm
26:14 - wonder if this is a new year if I should
26:16 - just switch over to using Microsoft
26:18 - Visual Studio
26:18 - I guess not today I'm not ready for that
26:22 - today I feel like it's a new year I
26:24 - should start like I want to use glitch I
26:26 - love glitch this year I'm going to use
26:28 - that just close all this stuff I'm gonna
26:34 - close this let me go to terminal desktop
26:42 - now open this up one thing I just want
26:49 - to check here also is I might as well go
26:51 - ahead and update to the more recent
26:54 - versions of p5 and and then what else
27:05 - was I saying I want to do I need to run
27:08 - a server and okay
27:20 - so there shouldn't be anything there
27:22 - really this is what matters and okay all
27:33 - right yes I'm gonna do the convert to
27:35 - es6
27:39 - okay so first I'm going to make a video
27:42 - that the first the first video that I'm
27:45 - going to do here I guess will be ten
27:47 - point eight which will be kind of like a
27:49 - little bit of an interstitial video of
27:51 - like moving over to es6 and I know um
27:59 - one thing I asked this in the slack
28:01 - channel I didn't get a firm answer I'm
28:03 - pretty let me try to look this up if I
28:05 - were to use the array function map the
28:13 - array function map is not does it can I
28:17 - look for it somewhere here that's
28:19 - actually it's not he actually es sick
28:21 - yes yes five I guess I just think of it
28:25 - as es6 cuz I've never used it and then
28:27 - when I was like looking at yes sick
28:29 - stuff I was looking at these things okay
28:30 - so I'll mention that as well because I
28:32 - want to do want to convert everything to
28:34 - es6 keep finishing the tutorial and then
28:37 - i also want to use some advanced array
28:38 - functions just to but I'm gonna not use
28:42 - the and the arrow syntax and all that
28:43 - stuff but I'm not gonna do that at first
28:46 - okay okay so
28:55 - it is 236 p.m. we have about an hour and
28:59 - a half left you can hear me blowing my
29:05 - nose probably because I forgot to hit
29:07 - mute but life will go on
29:11 - yes it's true I am back and I am in
29:16 - severe cold weather
29:18 - revisiting my machine-learning playlist
29:21 - which is really not at this point of
29:22 - machine learning it's something stuck I
29:27 - be hurt we try that again hello I'm back
29:33 - I'm finally getting to that neural
29:35 - network playlist which left off in May
29:39 - and I'm continuing it now you might be
29:41 - watching again you might be watching
29:42 - through the future when it's all been
29:43 - completed but you can as you could see
29:45 - some time passed and Here I am again now
29:48 - the last video in this playlist looked
29:52 - at vector math and I believe I looked at
29:55 - adding oh I can actually look it up here
29:57 - the last thing I did was this function
30:00 - multiply which was simply multiplying a
30:03 - matrix by a scalar so taking each
30:06 - element of a matrix and multiplying it
30:08 - by a single number
30:09 - now you also might notice here matrix
30:11 - prototype multiply yeah what is that
30:15 - well since I last did these videos I
30:18 - have started adopting yes six classes
30:21 - class is a template for creating an
30:24 - object that's part of ECMAScript version
30:28 - six yadda-yadda-yadda
30:29 - I have a whole playlist about that stuff
30:31 - if you don't know about classes you can
30:33 - go and look at those tutorials but
30:34 - before I move on and finish the vector
30:37 - the matrix math that we need to build
30:39 - this neural network I want to rewrite
30:41 - all of these when I have so far with es6
30:44 - so that's all I'm gonna do in this video
30:46 - okay so let's actually do that first
30:48 - let's wander over I was first building a
30:51 - neural network object the idea of a
30:53 - neural network is having input nodes a
30:55 - hidden layer and output nodes so let me
30:59 - first change this to be a class class
31:03 - neural network and then once I have a
31:07 - class
31:08 - this constructor function actually can
31:11 - now become constructor called
31:15 - constructor and you know what what the
31:16 - the method that I'm kind of adopting is
31:18 - when I pass arguments in I actually give
31:21 - those arguments and parameters I guess
31:25 - in this case in the constructor
31:26 - definition I give those parameters the
31:28 - same name as the property's attached to
31:32 - the object and they are differentiated
31:34 - by stay with me this dot that's right
31:45 - okay so so there we go so now that
31:50 - converted the neural network class it
31:53 - wasn't a class before but if constructor
31:55 - function into an es6 class now I've got
31:57 - to do the same thing with the matrix
31:59 - constructor function so this was the
32:01 - matrix constructor function and I now
32:03 - want this to be a class called matrix
32:05 - and I'm gonna put this around everything
32:10 - and I don't know what Adam wants me to
32:14 - do but okay and then this constructor
32:17 - function is now called constructor this
32:22 - is what happens to the constructor and
32:23 - this is just the randomize function all
32:29 - these functions that are attached to the
32:30 - prototype can just be written by their
32:33 - name inside of the class this is ad and
32:37 - this is multiply and that's what we're
32:41 - gonna be working on the next video all
32:43 - right so so in a moment I want to check
32:47 - let me let me check to make sure this is
32:48 - like still working so if I go to the
32:50 - browser refresh the page I should be
32:53 - able to say things like let m equal a
32:56 - new matrix 3 3 by 3 i should be able say
32:59 - console table m and I can see oops nope
33:04 - I think this mistake in my previous
33:06 - console table M matrix and you can see
33:11 - there it is so this seems to be and I
33:13 - could say m dot add the number 5 and
33:16 - then I could look at it so it still
33:18 - seems to be working
33:19 - I have a matrix that's 3 by 3 it
33:22 - by default it's filled with zeros if I
33:25 - add 5 to it it looks like five if I say
33:27 - m dot randomized now I can look at it
33:32 - again it has random numbers so it's
33:34 - still working that's good now here's the
33:37 - other aspect of this one thing you might
33:40 - notice is that I'm doing a lot of loops
33:44 - and array operations like I'm saying hey
33:47 - for every element of this array at index
33:50 - I did next J do this thing except there
33:53 - are actually you probably know this
33:55 - already I'm very slow on the draw here
33:58 - whoops let me sorry this was not on you
34:09 - probably know this already I'm a bit
34:11 - slow to catch up with these things there
34:14 - are a bunch of useful array functions I
34:17 - often think of them as es6 like this
34:19 - video is about converting it to es6 but
34:20 - really they've been around before es6
34:23 - and these are those these functions
34:24 - called like map reduces one fill is one
34:31 - and I filter I actually don't remember
34:33 - what filter does I know what these do
34:35 - and I think having access to using some
34:38 - of these array functions will make this
34:41 - matrix lot will be useful in the
34:44 - development of this matrix library
34:45 - however for simplicity's sake as I go on
34:48 - into the next video I am still going to
34:50 - do all of the matrix math operations in
34:54 - the sort of longest long winded astray
34:57 - it's not actually a word but in a very
34:59 - long-winded way then I think and I'll
35:02 - try to come back and and use some of
35:05 - these and I and I should mention that
35:06 - where am I going with this
35:08 - eventually this I want to learn and
35:10 - understand all of these matrix
35:12 - operations and write the code for them
35:14 - to kind of get my hands in there and
35:16 - figure it out but in the end I'm gonna
35:19 - actually take out all of this stuff and
35:21 - replace all of the matrix operations
35:25 - with a library from Google called deep
35:29 - learn so stay tuned there's gonna be a
35:32 - lot more about this live
35:34 - and a helper library where deep learn
35:37 - can use with p5 in future videos alright
35:40 - so I think that's pretty much it for
35:41 - this video I'm now ready to kind of like
35:44 - get back up to speed and the things that
35:46 - I need to do our finish this matrix
35:50 - class with more useful matrix math
35:52 - operations I need to be able to multiply
35:54 - two matrices together and understand
35:56 - what it means to do that and then also
36:02 - uh and then finish this to add the rest
36:06 - of the functionality for the neural
36:08 - network that uses that stores all the
36:10 - pieces of the neural network in these
36:11 - matrices and implements the algorithms
36:13 - I'll be getting to all that stuff so see
36:14 - you in the next video Oh audio way
36:20 - before in the the sink was not fixed for
36:23 - the other one okay that's fine you know
36:25 - that all unfortunately that'll match you
36:28 - will have to fix that but I can fix that
36:31 - right now for the future whoops I didn't
36:34 - that didn't occur to me that that would
36:36 - be an issue Solon let me fix that really
36:37 - quick I realize there's just two
36:41 - separate audio settings for each no it's
36:45 - the same that's weird the audio settings
36:49 - are the same for both so hold on let me
36:52 - let's just let's just be sure about this
36:56 - whoops and of course the cameras going
37:00 - off
37:04 - ah whoops
37:11 - canceled
37:20 - Oh weird
37:26 - yeah weirdly the video that's so weird
37:33 - I can actually see the delay in I could
37:37 - probably restart open broadcast studio
37:40 - but mmm do you guys mind if I that's
37:44 - really weird wonder why it does that can
37:47 - I do
37:48 - is there an advanced video is it
37:50 - possible I have a like delay on this
37:53 - hold on sorry just excuse me for a
37:57 - second so I don't understand huh I don't
38:12 - understand what's why it's doing that
38:16 - yeah unfortunately I know I could
38:18 - probably have separate settings for each
38:20 - one but I think I'll spend all my time
38:24 - doing that yeah Simon's mentioning let
38:28 - in the in the for loop where did where
38:31 - did I oh my goodness oh thank you all
38:38 - right let's see wait this video is not
38:41 - over yet
38:41 - I forgot that I should also replace bar
38:47 - with let's replace all all right why why
38:54 - why do you keep meeting me to put my
38:56 - password in hold on a second
39:01 - I think I'm something weirds going on I
39:06 - just realized something a little bit
39:09 - weird is going on I have a feeling yeah
39:14 - I know why it's it's asking for my
39:18 - password every time I change it because
39:20 - these this files are not owned by this
39:23 - particular login and so I have to fix
39:26 - that okay that should be fine
39:32 - all right now whatever all right yes I
39:39 - do read this chat Jeffrey but just very
39:42 - rarely I don't know what to do about the
39:46 - other yeah I can see that it's I can
39:57 - actually yeah wow that's a huge delay so
40:01 - I didn't realize this I can actually see
40:03 - the delay in I can actually see the
40:17 - delay in what in my preview window but
40:21 - why why would it be different for
40:22 - different cameras is there does anybody
40:25 - know how to do the video delay in open
40:29 - broadcasting studio settings advanced
40:36 - video output streaming
40:51 - huh
40:55 - the camera was restart stream all right
41:04 - let's let me restart the stream YouTube
41:06 - is actually usually pretty good at it if
41:08 - I shut it down and restart it it keeps
41:10 - it as one thing
41:11 - why not I'm just curious why not try I'm
41:17 - gonna just try that okay
41:18 - everybody I'll be right back
41:28 - yeah the delay actually looks completely
41:30 - gone to me now which interestingly
41:32 - enough it might be there might be a
41:34 - delay there because I have the built-in
41:37 - delay so check this again and here did
41:52 - that fix it
42:00 - okay great all right great
42:03 - okay all fixed thank you everybody
42:08 - all right so I just have to remember so
42:12 - let me think about this what do I want
42:14 - to do I want to multiply okay so first
42:21 - of all I gotta get my terminology right
42:25 - let's see some of you guys can help me
42:29 - with this one thing I want to do is
42:35 - actually let's go back to this
42:38 - particular video and let me see what the
42:43 - whiteboard looked like at the end so
42:48 - this is oh I'm in the wrong camp grammar
42:51 - okay
42:51 - you can now see the difference of the
42:53 - beer so this is what can I please move
42:57 - out of the way my goodness yeah that's a
43:03 - little bit better there we go all right
43:06 - so this is what I had before if you
43:08 - don't mind bearing with me for a second
43:11 - I'm going to I'm over here I know you
43:13 - can't see me but I am erasing the array
43:18 - functions from the whiteboard and I am
43:23 - going to kind of rewrite some of that
43:31 - stuff my video looks so dark so scaler
43:39 - element-wise dot products so I'm just
43:44 - gonna write these scalar element-wise
43:55 - and then three dot product okay so I
44:02 - just made that list which you can now
44:05 - see there and yeah so so what I want to
44:17 - do is get my terms right what I'm
44:19 - talking about is matrix multiplication
44:22 - but there are different countries let me
44:29 - just think about this and I'm gonna kind
44:31 - of like do this twice I know people
44:33 - don't really like it when I do that
44:34 - actually no one's actually ever said
44:35 - that I try to get rid that glare okay so
44:41 - in other words when I when I when I'm
44:44 - doing multiplication there's I could
44:49 - multiply by a scalar in which case that
44:53 - has to be element wise or I could
44:59 - multiply by another matrix and then that
45:04 - could be element wise if only if this
45:10 - matrix is this so if I have a matrix
45:11 - some arbitrary matrix you have same
45:14 - exact size as you right if I'm gonna do
45:23 - oh sorry
45:24 - if I'm gonna do element wise this is me
45:28 - just practicing by the way I'm gonna do
45:32 - it it has to be the same exact size
45:34 - right because if I have two matrices and
45:37 - I want to multiply each element by each
45:39 - other element it's got to be the same
45:41 - size or it could be like weirdly the
45:45 - same number of rows only now but then if
45:48 - or no that's Orica multiplied by a
45:51 - vector I can multiply also by a vector
45:53 - just do kind of like element wise per
45:55 - row but that's but this is called this
45:58 - element wise same exact size that's
46:00 - called that like hod how do you how do
46:02 - you say that that a product that
46:09 - I'm gonna get this wrong Hadamard
46:12 - products right so that's the Hadamard
46:15 - product I believe this is an adornment
46:19 - to go through and explain all this again
46:20 - in that second Hadamard product Hadamard
46:27 - and then if I'm doing the if I'm taking
46:33 - one matrix multiplied by another matrix
46:38 - and doing the dot product I could also
46:41 - do then there's the dot product which
46:44 - with two vectors would give me a scalar
46:47 - but and in this case the row let's let's
46:52 - look let's look at this matrix
46:56 - let's find like a Wikipedia or reference
47:00 - matrix top product oh look at this nice
47:05 - forget about Wikipedia thank you for
47:07 - this okay I want to look at this the the
47:12 - matrix dot product we end up with a
47:17 - matrix that has the same number of rows
47:21 - as the first order matters the that sort
47:25 - of distributive or associative property
47:28 - what all these things are I don't
47:30 - remember
47:30 - associative property come on just give
47:37 - me an image to show it to me all right
47:39 - this is a distributive associative
47:41 - property multiplication right yes which
47:46 - is that the order I could change this is
47:48 - not true for commutative commutative yes
47:55 - yes okay we c'mon
47:57 - we are still at commutative properties
47:59 - that what I'm looking for
48:01 - thank you yeah either order but not true
48:09 - for matrices for matrix multiplication
48:13 - okay
48:13 - there's cross product I don't want to
48:16 - get into that so I'm what I'm trying to
48:19 - just
48:20 - is that correct to call this the dot
48:22 - product and that is the the you have to
48:27 - have the order matters a dot B B has to
48:32 - have the same number of columns as a has
48:36 - rows columns must match rows because and
48:42 - let me just practice this again if I
48:44 - have a b c d e f times g h a b c d e f g
48:55 - h j right if this is what I'm doing this
49:02 - equals I'm done this in so long
49:06 - the do this again don't worry when I'm
49:09 - way off the screen here this equals I'm
49:13 - gonna get a 2 by 2 right because I'm
49:15 - gonna get 2 rows from here I always get
49:19 - wait a second yeah yeah yeah I always
49:29 - get the number of rows and then the
49:31 - number of columns comes from here no no
49:34 - no because I can I can multiply this by
49:39 - oh I'm confused I confused myself matrix
49:47 - product columns has to equal rows rows
49:49 - didn't have to equal columns thank you I
49:51 - knew that was real and you hos backwards
49:53 - here okay okay the columns has two of a
50:05 - has to equal the rows of B this was not
50:08 - going to work
50:18 - de ABCDE F a B where did see go hey b c
50:27 - d e right so for example what am i doing
50:38 - here
50:39 - this is two columns well this was still
50:44 - oh my god I've lost my mind the number
50:49 - of call this is fine the number of
50:53 - columns has to equal the number of rows
51:01 - because what I'm gonna get now is this
51:06 - is you always say rows first so this is
51:09 - 3 by 2 and this is 2 by 2 and so my
51:15 - result and actually the one we care
51:18 - about the most here is just because what
51:21 - we're gonna but I mean let me explain it
51:24 - this way is we're gonna get two by two
51:28 - here at the end and the way that we do
51:33 - that is with the dot product so it is
51:37 - let's let's pull up that math is fun
51:40 - page right here where we basically take
51:50 - the dot product of the vectors right so
51:53 - we take I yeah yeah yeah right right
51:56 - this example is probably a better one
51:59 - did I do it wrong again I told did I do
52:04 - it wrong again let's just do the same as
52:06 - the so the columns has to equal the rows
52:13 - in a second
52:27 - oh yeah yeah no no I'm right I just like
52:30 - the I like this so you could see here
52:33 - the columns has to equal the number of
52:35 - rows this is actually kind of a nicer
52:37 - way of looking at an example because
52:40 - neither of the matrices is a square so I
52:44 - kind of like that so I wonder if maybe
52:47 - that's a better we can borrow we can
52:57 - borrow ABC that's what we can start the
53:02 - way head start a d e f and then we could
53:08 - say for example ABCDE F a b c d e f g h
53:15 - i j k l okay so I know why I wrote the
53:21 - LD way this totally makes sense of
53:23 - course the the number of columns has to
53:30 - equal the number of rows because we're
53:37 - going to because we're going to take
53:39 - these three there we go we're doing the
53:41 - dot product I the reason why I was
53:43 - saying a number of rows has to equal the
53:45 - number of columns I was thinking about
53:46 - it backwards
53:47 - I knew that way I had to take the dot
53:49 - product of this times this I was
53:51 - thinking of this as a row and this is
53:52 - the column but this is a row made up of
53:54 - three columns and the length of this is
53:56 - what matters
53:57 - so we basically make a new matrix by
54:00 - taking the dot product of this vector
54:02 - with with this that goes here this
54:06 - vector with this that goes here this
54:10 - vector with this that goes here and this
54:13 - vector with this and that goes here okay
54:16 - so this would be a times G Plus B times
54:19 - I plus C times K and this would be d
54:22 - times G Plus D times I plus D okay I
54:24 - think I've got it right and what I'm
54:27 - being told
54:27 - breaking news
54:29 - is that you can just call this the
54:31 - matrix product so this element wise is
54:36 - the Hadamard product and the this is the
54:39 - matrix product so what would be Oh M X
54:47 - and P oh yeah that's interesting okay so
54:51 - this would be am I correct about the
54:55 - Hadamard product that they have to be
54:58 - equal
54:59 - is there a special way to do it if
55:00 - they're not equal I don't know that I'm
55:04 - gonna I don't know that I don't think I
55:06 - actually need this product so I actually
55:08 - just only need to reference it let's see
55:11 - if I'm a matrix product do we have a
55:13 - nice Wikipedia page there we go
55:17 - it's our a nice diagram oh yeah look at
55:20 - this awful diagram well actually
55:22 - probably a beautiful diagram okay
55:24 - I like this one okay great
55:27 - great okay so I can use matrix product
55:30 - is the standard sure product that's
55:33 - interesting okay all right so now what I
55:36 - need to do is do this tutorial oh I
55:40 - forgot I have to actually implement the
55:42 - code for that that's gonna be
55:44 - interesting
55:45 - I'm gonna do a terrible job of that I'm
55:48 - almost certain you know what's
55:50 - interesting actually is I'm gonna do a
55:52 - video later this month about unit tests
55:54 - working with a continuous integration
55:57 - company etc and actually one thing that
56:00 - I could do is test to make sure as you
56:02 - modify the code it's the math still
56:05 - works that could be something I could do
56:07 - okay we erase all this
56:20 - I'm gonna I'm gonna redo all this I had
56:24 - to work it out in my head try to make
56:30 - this a little bit cleaner okay okay all
56:48 - right yes no I realized that the
56:57 - Hadamard product is certainly useful
56:59 - I just don't know and if I'm ranking a
57:01 - full like fully implemented matrix
57:04 - library that I really wanted people to
57:07 - use I would want to make sure every math
57:09 - possibility is accounted for but in this
57:11 - case I'm just kind of like putting stuff
57:13 - in when I need it for this neural
57:14 - network so okay anything else oh I'm
57:29 - looking at the chat okay okay
57:32 - everybody's everybody's got great
57:34 - suggestions yeah I am not erasing the
57:38 - whiteboard with my hand I had a paper
57:39 - towel kind of like cupped inside my hand
57:42 - okay right people are telling me begin
57:46 - with the neural network the linear
57:48 - algebra will follow
57:49 - I got you I got you what you don't what
57:51 - you might not realize is that's actually
57:53 - what I've already done I have this
57:56 - playlist and I have introduced all of
57:59 - these concepts and now I needed the
58:02 - matrix math so I'm doing it but that
58:04 - actual kind of this is happening in a
58:07 - very long-winded way you know I probably
58:10 - could in some other universe do all this
58:13 - stuff in one video that just takes like
58:14 - an hour or something
58:15 - but I'm kind of breaking this up into
58:17 - parts because I I take a long time to do
58:19 - stuff okay here we go now I don't want
58:25 - to use a squirrel that's right I don't
58:27 - wanna use a square matrix as an example
58:29 - even though I make it simple because you
58:32 - can get you can really mislead yourself
58:35 - what do you have square matrices and
58:36 - thinking things work in a certain way
58:37 - when they don't okay it happened here to
58:46 - my alright
59:02 - and we are here this is the video in
59:06 - this playlist which really comes right
59:09 - after 10.7 matrix backs part 2 this is
59:12 - matrix math part 3 where I am finally
59:15 - going to look at okay
59:21 - matrix multiplication or really I should
59:23 - say matrix multiplication okay so if you
59:30 - recall what I'm doing with I know it
59:34 - look quite different but I already
59:35 - covered that well bring this one was
59:38 - made a while ago anyway if I have a
59:41 - matrix right and what I mean by a matrix
59:43 - is a grid of values and let's say I have
59:49 - one that looks like this a b c d e this
59:55 - is a 3 no no it is a 2 by 3 matrix we
60:03 - always refer to the number of rows
60:05 - before the number of columns now what
60:07 - does it need and and and previously with
60:10 - when i made some videos just about
60:12 - vectors i talked about this thing called
60:14 - the dot product but i'm gonna change
60:17 - that here and write the matrix product
60:19 - so first of all what does it mean to
60:21 - multiply a matrix by by something i
60:25 - could just multiply this matrix by a
60:26 - single number and that's what's known as
60:29 - well it's not really that's what's known
60:30 - as a scaler sorry scaler if i multiply
60:33 - this by a single number then i just say
60:35 - if this was a whole bunch of ones
60:37 - multiply it by two i got a whole bunch
60:38 - of two's you know if i multiply by two
60:40 - double every value in the matrix and I
60:42 - think actually now I did that in the
60:43 - previous video I could also do what's
60:46 - known as element wise multiplication and
60:49 - that is also referred to as the hata
60:52 - mard
60:52 - i don't know if i'm pronouncing that
60:53 - correctly and do somebody in the live
60:56 - chat that's going on right now told me
60:58 - that it also son is called a short
60:59 - product and what that means is imagine I
61:02 - have another matrix that's exactly the
61:05 - same size as this one and in fact I
61:08 - could kind of do that little small over
61:11 - here and I could say G H I J
61:14 - k:l right so I could have another matrix
61:17 - if it's exactly the same size and mine
61:19 - if I multiplied these together I have a
61:20 - new matrix which is has a times G B
61:23 - times H C times I D times J element-wise
61:26 - each each element of the matrix get
61:29 - multiplied by its corresponding other
61:30 - element now I don't those are perfectly
61:34 - valid I'm looking for my eraser
61:36 - perfectly valid ways of doing
61:38 - multiplication oops but what I'm really
61:41 - interested in is the matrix product and
61:44 - the reason why I'm interested in the
61:47 - matrix product is because I want to use
61:52 - the matrix product for a neural network
61:54 - for example this node in a neural
61:58 - network is going to be the result of the
62:01 - weighted sum of all of the input nodes x
62:06 - weighted connections and this one is
62:10 - also going to be the weighted sum of all
62:13 - of the input nodes x weighted
62:15 - connections and so on and so forth and
62:16 - so these weights are stored in a matrix
62:19 - and the inputs come in in a matrix as
62:24 - well so the inputs we could think of
62:26 - like this and so what I actually need
62:33 - hold on time out for a second I got
62:35 - confused so if if the columns the number
62:43 - of columns of the first one the number
62:47 - of columns of the first thing has okay
62:51 - so the weighted the weights go here
62:53 - they're multiplied by the inputs got it
62:55 - okay sorry so if this is how I'm
63:02 - representing the inputs then you might
63:08 - discover that I have this matrix of all
63:13 - these weights that I need to both apply
63:15 - those inputs by to get the new values of
63:19 - the outputs of this hidden layer now
63:21 - anyway I kind of talked about that in a
63:24 - previous video and I'm going to talk
63:26 - about it
63:27 - a lot more in the next video when we
63:29 - look at this in more detail but the
63:31 - point here is that this idea of a matrix
63:34 - product is something that I'm going to
63:36 - need so what I want to do don't worry
63:38 - about the neural network stuff so much
63:39 - right now I'll come back to that what I
63:41 - want to focus on is how does the matrix
63:43 - product work so one thing that's very
63:44 - important to understand is a matrix
63:47 - product which I'm going to use the dot
63:48 - to signify matrix product let's say I
63:52 - have a matrix a this is my matrix a and
63:55 - I'm gonna have another matrix called B
63:57 - and that matrix is going to be equal to
64:00 - the following g h i j k l one thing you
64:10 - might note one thing that's really
64:11 - important is a matrix product B does not
64:15 - equal does not equal B matrix product a
64:20 - the commutative property does not hold
64:22 - right 3 times 4 is equal to 4 times 3
64:25 - they're both equal to 12 but this is not
64:27 - true here and another thing to realize
64:30 - that's super important is that if you
64:34 - have look if you have a dot B it's only
64:44 - oh the camera went off ah when did that
64:48 - happen
64:49 - how long ago did that happen okay must
64:54 - not have happened that 103 11 p.m. must
64:56 - not have happened that long ago oh no
65:02 - welcome to the coding trade podcast I'm
65:04 - trying to figure out what what did I
65:06 - last say I'm waiting for somebody in the
65:13 - patron group because they're a little
65:14 - bit more trustworthy than YouTube chat
65:17 - one minute 36 seconds ago yeah I don't
65:20 - this doesn't matter how the exact amount
65:22 - of time I don't know what the last thing
65:24 - I said was
65:39 - don't worry about the neural network
65:42 - thing okay that's the last thing I said
65:43 - okay wow so they'll quite a while ago I
65:48 - know I've lost my rhythm here let's see
65:53 - got it
65:54 - oh yes so the whole thing where I was
65:57 - talking about the commutative property
65:58 - okay fine fine all right so I'm going to
66:05 - pretend I finish just erasing the neural
66:07 - network thing and I know I'm in the
66:10 - wrong camera so don't worry about the
66:13 - whole neural network thing I'm going to
66:15 - come back to that in next video go
66:18 - through that in detail what I need to do
66:19 - here is just understand I know I need
66:22 - the matrix product how does it work and
66:24 - then we'll see how it's applied in the
66:26 - neural network example okay so let's say
66:29 - that I have another I have a matrix a
66:31 - and I have another matrix B and that
66:34 - matrix is equal to g h i j k l I'm
66:42 - writing the L like that so that I can
66:43 - see that it's not at one or whatever
66:45 - okay
66:46 - so I have these two matrices the way
66:49 - that I write the expression a matrix
66:52 - product B I'm gonna write it like this
66:54 - a dot B the dot as the indicator for the
66:59 - matrix product now what couple things
67:01 - that are really important here one the
67:04 - commutative property does not hold a dot
67:06 - B does not equal BA this is not true and
67:10 - you're gonna see why in a minute
67:12 - you know if I were to say three times
67:14 - four that's equal to four times three
67:16 - they're both equal to twelve but again
67:18 - this matrix product is a different kind
67:20 - of multiplication this commutative
67:21 - property does not hold so that's kind of
67:24 - key another thing that's really
67:28 - important is the matrix product is
67:31 - something you could only do if the sizes
67:34 - of the matrices match up and what do I
67:36 - mean by that
67:37 - now one thing you might have something
67:38 - but realize like if I was doing when I
67:39 - have that example the Hadamard product
67:41 - that's only gonna work if I have two
67:43 - matrices with the same exact dimensions
67:45 - right because
67:46 - if I if I don't have the same rock
67:47 - dimensions how can I multiply each
67:49 - element by the other element because
67:50 - some elements might not exist in one of
67:51 - them but something even completely
67:52 - different is going to go on here I need
67:55 - to have for this to be valid I need to
67:57 - have the columns right the columns of a
68:03 - equal to the rows of B and you'll notice
68:06 - I made these do that so I have to have
68:09 - however many columns I have here three I
68:11 - have to have exactly the same number of
68:12 - rows and B otherwise this won't work and
68:15 - the reason is what I'm actually going to
68:19 - do is the reason why I use this dot here
68:21 - is I'm going to use vector dot product
68:23 - vector dot product so you might have to
68:26 - go back to one of my previous videos
68:28 - where I talked about the vector dot
68:29 - product or going to do it here again but
68:31 - what the vector dot product does is it
68:34 - takes kind of like the sum of all the
68:36 - elements multiplied the element wise
68:39 - elements both tied to each other what do
68:41 - I mean by that so if I say a dot B what
68:45 - I'm going to get is a matrix that has
68:54 - that has sorry the number of rows of a
69:01 - I'm confused here and the number of
69:04 - columns of B right so there's a time out
69:10 - for a second I'm getting on because
69:14 - little time I'm going to pause at that
69:16 - explanation right because I want to go
69:17 - back to my example if this was
69:23 - multiplied by the number of columns e FG
69:28 - is multiplied by the number of rows the
69:30 - result I get is actually the number of
69:34 - rows and of the first in the number of
69:37 - columns of the second yep okay
69:45 - I had to work that out in my head can
69:50 - this visible okay I'm gonna get when I
69:54 - when I take one matrix the a matrix
69:57 - product B the result is also going to be
70:00 - a matrix now how do I know the
70:02 - dimensions of that matrix it's going to
70:04 - have the number of rows of a which is
70:08 - how many two followed by the number of
70:13 - columns of B what - so in the enemy in a
70:17 - two by two matrix now this is going to
70:19 - be different with any all different
70:21 - matrix dimensions and after you watch
70:23 - this video you can make up lots of
70:24 - different matrices and play a game with
70:25 - yourself to like do this matrix product
70:27 - with pencil and paper boy won't that be
70:29 - fine I'm gonna go do that later myself
70:31 - I'm sure but here we can see I'm gonna
70:34 - get a square 2 by 2 matrix now what am I
70:37 - doing here
70:38 - how do I fill in each of these blanks so
70:40 - I'm gonna just put a little blank square
70:44 - here I know I need two by two
70:45 - well what I do is I take the dot product
70:50 - of the row of the first one with the cup
70:55 - of the row of a with the column of B
70:58 - right so it's almost kind of like the
71:00 - intersection this first element right I
71:04 - gotta get the first row of a and the
71:06 - first column of B that's why they have
71:08 - to have the same number of rows and B as
71:10 - columns in a so what this actually is
71:12 - this value here is the dot product of
71:15 - these two vectors which is actually I'm
71:19 - just come over here which is a times G
71:24 - Plus B times I plus C times I ok so
71:33 - that's this element here now let's do
71:36 - this element here well I'm in row 1 so I
71:41 - stay with Row 1 of a but now I'm in
71:44 - column 2 so I go to column 2 of B so now
71:48 - this particular value is a times h plus
71:54 - b times j
71:56 - plus C times L okay that's good now let
72:04 - me do this one this one is the second
72:07 - row times the first row the first column
72:12 - of B D times G Plus e times I plus F
72:15 - times K and then this one here is going
72:18 - to be the second row times the second
72:21 - column D times h plus e times J plus F
72:24 - times L okay so that's the math for any
72:28 - arbitrary set of matrices you take the
72:31 - dot product of all the rows with the
72:33 - columns to fill out your resulting
72:35 - matrix product and you must have the
72:37 - same number of columns in a as rows of B
72:41 - okay so pause this video if you want try
72:45 - to draw some diagrams Google matrix
72:47 - product google image search matrix
72:49 - product you prop up with a million
72:50 - visual examples of this watch three blue
72:53 - one browns videos on linear algebra
72:54 - which will probably teach this in a much
72:56 - more intuitive and nice way but I don't
73:00 - link to that in this video's description
73:01 - I'm now going to try to implement this
73:02 - matrix product in code okay
73:10 - what's the chance I got something no one
73:13 - is yelling at me in the chat which means
73:15 - I might have actually gotten that right
73:16 - did I get that right do I deserve a nice
73:21 - sip of some cold water oh shoot people
73:31 - are saying C times K oh I said it
73:35 - correct I just wrote the wrong thing
73:37 - right okay all right all right all right
73:43 - minor correction hopefully I said the
73:45 - right thing but I do have something
73:47 - wrong here a times G B times I C times K
73:52 - this should be a K right here
73:58 - okay I said I are well I thought maybe I
74:06 - at least said the
74:09 - but it's fine get a little bit wrong
74:11 - I'll get lots of nice comments about
74:12 - that okay so now I need to implement the
74:21 - code for this I think I can do this do I
74:26 - need to think about this and try it
74:27 - first all right let's just do this okay
74:35 - let me just okay okay so let's now go to
74:41 - our code and try to write an algorithm
74:43 - to do this now once again my plant and
74:46 - I'm in multiply hmm I wonder if I should
74:51 - just let me write a new function and
74:52 - call it a product no let me let me call
74:56 - it and multiply when I want to multiply
74:58 - a matrix by another matrix by definition
75:01 - I want the matrix product in this case
75:03 - so I'm gonna do the same thing I did in
75:05 - the add function which I'm going to
75:07 - check if n is an instance of another
75:10 - matrix do it one way otherwise assume
75:15 - it's a scalar and do it another way and
75:19 - so it's still doing this every time I
75:22 - save hold on pause for a sec yeah okay
75:31 - it's fine now hold on let me do this
75:36 - again
75:43 - so if and I'm gonna do it what sorry I'm
75:50 - gonna do the same thing that I did up
75:51 - here in AD where I'm gonna check is it a
75:53 - matrix or is it a number so if n is an
75:57 - instance of a matrix I want to do the
76:02 - matrix whoops do the matrix product
76:05 - otherwise do this scalar product
76:09 - otherwise scalar product so I need to
76:12 - write the code for the matrix product
76:15 - now what do I need to check first was
76:21 - this right yeah what do I need to check
76:23 - first now first I need to make sure that
76:26 - the number of columns of a is equal to
76:29 - the number of rows of B otherwise I
76:30 - can't do a matrix product so I want to
76:34 - say if n n is B so ends rows so let's
76:42 - say if this dot do we have rows in a
76:45 - variable yeah if this dot rows does not
76:50 - equal n dot columns then return I don't
76:55 - know undefined maybe or null and Mabel
77:00 - add an error console dot log Rose must
77:06 - rows of a must match columns of B so one
77:13 - thing we can do right now let's just
77:14 - even see let's see what happens here
77:16 - let's make sure that this check oh I
77:18 - mean the wrong screen the whole time
77:21 - oh I got the worst I'm the worst
77:29 - that was quite a while ago too okay good
77:34 - news is I'll just do this again let's do
77:40 - a lot of undoing sorry everybody
77:45 - that's me electroshock therapy zeng
77:48 - myself
77:53 - okay a system that would track me is
77:59 - good but I need to be able to override
78:00 - it because I often want to like just
78:02 - reference this and then come right back
78:07 - okay I'm just start this whole thing
78:11 - over I'm gonna make one video tutorial
78:16 - today you know that's that's kind of how
78:18 - it is I do need more than two hours to
78:20 - really get a lot done it seems like in
78:21 - these video tutorials maybe I could just
78:23 - instead of doing the feed-forward part
78:25 - like do some other coding challenge or
78:27 - something okay okay so let's try to
78:31 - implement the math for this so where I'm
78:34 - gonna do this is in the multiply
78:35 - function and I had written that before
78:37 - to do scalar multiplication and I'm
78:39 - gonna do the same thing I did an ad
78:41 - where I'm gonna check what is the thing
78:43 - coming in is it a matrix or is it a
78:45 - scalar or etc so I'm not going to bother
78:48 - with the Hadamard product I'll add that
78:51 - into this matrix library if I ever need
78:53 - it but I'm just gonna check is N and
78:56 - instance of a matrix if that's so then I
78:59 - want to do matrix product otherwise I
79:04 - want to do scalar product okay so now I
79:11 - need to write the code for the matrix
79:13 - product right there but first I must
79:16 - check are the columns of a equal to the
79:20 - rows of B otherwise I cannot perform the
79:22 - matrix product at all so I'm gonna come
79:24 - over here and I'm gonna say if I mean
79:29 - the right screen yes if the a is this
79:34 - matrix object if this dot rows know if
79:38 - it stud columns does not equal and rows
79:42 - I kind of don't like this is called n
79:45 - here but whatever
79:46 - this then and I'll use this more strict
79:50 - equals here then ID to return like
79:54 - undefined or something like just get out
79:56 - of here
79:57 - this is no good and I'm going to console
79:59 - dot log columns of a must
80:04 - match rows of B columns now I could be
80:09 - more thoughtful and I can use a
80:10 - try-catch and some error handling but
80:12 - I'm just going to do this for right now
80:13 - just to be some and let's actually make
80:15 - sure this works so if I go back to
80:18 - loading that code and I said something
80:21 - like a is a matrix that is three by
80:26 - three and B is a matrix that is five by
80:31 - ten if I say a multiply B I get
80:38 - undefined and it says columns of a must
80:40 - match rows of B so that's working and I
80:42 - could just say B is a matrix of five by
80:51 - sorry three by three also then they
80:54 - match and I'm say a multiply B I still
80:57 - get under firing because I have done it
80:58 - yet but I don't get that error message
80:59 - okay
81:00 - so now I need to create a new matrix so
81:06 - I'm just say the result is a new matrix
81:10 - that has the number of what did I say it
81:16 - has the number of rows of a and the
81:20 - number of columns of B so it has the
81:24 - number of rows of a and the number of
81:28 - columns of B come on Adam
81:33 - keeps wanting me to put my password in
81:34 - okay all right so that's good now I need
81:38 - to do each spot so for each row whoops
81:50 - for each row and for each column I need
82:00 - to do the dot product of values in
82:10 - column oh my goodness this is so simple
82:14 - it's kind of simple when you look at it
82:17 - this way right
82:17 - I need the values of I need the dot
82:20 - product of the vector of the values in
82:23 - all of row J time out time out out to
82:32 - think about this people tell you oh
82:37 - whoops first of all I have an error
82:39 - before I can do this I have an error
82:42 - here and what I want is if I'm at 0-0 I
82:47 - want all of the values I want to do the
82:50 - sum of all of the values well so I want
82:54 - of a bro okay so of I console dot error
83:10 - makes an error message that's good Oh an
83:14 - OBS plugin to check for movement oh
83:17 - that's interesting
83:18 - I need three nested loops I know I've
83:21 - just heard it my brain hurts
83:22 - it got it's like really cold and it like
83:25 - throws slightly on the way here I know I
83:27 - can do this I know so let me just think
83:31 - about this for a second so if I have
83:43 - let's think about this for a second
83:45 - if I'm looping through every row as I so
83:51 - I'm starting here and every column as J
83:55 - and you know the convention might be to
83:57 - have these swaps but whatever that's
83:59 - what I have right now I I need to take
84:03 - from a I need to take every element from
84:08 - row I and molt and multiply it by every
84:12 - element of column I in B column J in B
84:19 - and then add those together and then I
84:22 - have i J okay okay so I need to say
84:33 - in other words let's just do this
84:36 - manually in this case it would be this
84:42 - dot matrix I times and matrix J sorry I
84:54 - I need yeah I need another double nested
84:58 - loop in here right because I'm going to
85:00 - take this and add I plus plus one but
85:11 - staying in J J plus 1 right is this
85:15 - right I plus 2 J plus 2 I mean this
85:21 - isn't I'm making this up because I don't
85:23 - I'm doing this an arbitrary way we don't
85:25 - know what the actual rows this this just
85:27 - goes up depending on the number of rows
85:33 - columns there are all right right so
85:37 - maybe I only need one loop here because
85:39 - I need one loop so what's that know
85:44 - because these could be different yeah k
85:49 - week Mon is telling me in the chat
85:51 - another way of thinking about this is I
85:53 - could say and you know what would might
85:56 - be nice actually one thing that I could
85:59 - do here just at least I think it's gonna
86:00 - help me work this out is I could say let
86:03 - a equal this dot matrix and let B equal
86:07 - n just to have variables called a and B
86:13 - for the two different matrices and this
86:17 - is still the result but in other words
86:19 - what I'm saying is a and this is B so a
86:24 - I K B KJ so so hold on let me with K sum
86:35 - over K so hold on so let me put this
86:39 - here did I get this wrong this is B you
86:44 - is it yes so you know what's wrong about
86:50 - this
86:50 - so let's look now we can get this right
86:53 - here's what I'm doing here I want a I
86:55 - want to be increasing not the row but
86:58 - the column I did it wrong I did it
87:00 - backwards do you guys like watching
87:02 - these videos where I try to figure it
87:03 - out I don't know could I could just get
87:06 - it right the first time could just like
87:07 - start over and get it right but what I'm
87:10 - doing is I'm every column of a which
87:13 - column is I'm actually using yes it's
87:19 - call it's all its row i but I'm
87:21 - iterating over the columns of course of
87:24 - course of course so it is this Jay
87:37 - so this is actually this is what I need
87:39 - so what I should be able to say is
87:43 - result
87:44 - I need another loop for let K equals 0 K
87:50 - is less than and I can use remember I
87:52 - could use a Scala's or B's Rose those
87:55 - have to be the same so I'm going to use
87:57 - AIDS columns yes k plus plus and then
88:06 - I'm first I need to say let sum equals 0
88:10 - and then I'm going to say sum plus equal
88:13 - a index I k plus B index K J this I
88:22 - think is right and then I have to put
88:26 - that in the result result result i J
88:36 - equals sum so if I was using like some
88:42 - other vector library I could like pull
88:44 - those out then do the dot product but
88:46 - let's see here let's make sure this is
88:48 - right I want to for every element in the
88:52 - results I want to sum the dot product of
88:56 - all of the column spots in a that's K
89:00 - with all of the row spots in B and then
89:04 - I've got the result and line 50 so I've
89:08 - seen deep space in the chat says lying
89:09 - 57 oh yes sorry this needs to be
89:12 - multiplied so these get multiplied I'm
89:14 - summing the product of all those yes and
89:17 - of course there are much faster ways I'm
89:20 - not looking for any any efficiency here
89:22 - I'm just trying to understand the
89:24 - algorithm and make sure I have something
89:26 - that works okay so now I need one more
89:32 - curly bracket and I think if i zoom back
89:38 - out here I think I am done this is the
89:42 - algorithm right I have a new matrix that
89:46 - has that is of the size of and this I
89:49 - should do
89:50 - this down here the size of a's rose and
89:53 - bees columns then i go through it and i
89:57 - do the dot product of a vector from of a
89:59 - row of a and a column of b store that
90:03 - result okay and bi yes here's another
90:06 - mistake b equals n dot matrix right
90:09 - because the actual two-dimensional array
90:11 - is stored in a variable called matrix
90:15 - it's not it's not the it's the the
90:19 - object itself has the data inside a
90:21 - variable okay so how are we gonna test
90:24 - this well let's look at let's look at
90:32 - hmm did that make a weird sound i just
90:35 - put my hand on the microphone let's
90:38 - create a known scenario actually let's
90:41 - not okay let's yes alright so here's
90:44 - what we're gonna do I'm gonna say and I
90:47 - got a remember let a equals a new matrix
90:50 - and I'm gonna use though these
90:52 - dimensions it's two by three Oh a has
90:56 - already been declared so I'll just keep
90:58 - using bar so new matrix let me just
91:01 - refresh the page clear oops I'm doing
91:07 - scratch all that let let a equal a new
91:14 - new matrix that's two by three excellent
91:18 - let B equal a new matrix that is what
91:24 - I'm gonna do three by two that's what I
91:28 - did in my example three by two then I'm
91:31 - gonna say a dot randomized B dot
91:35 - randomized you know what I should do all
91:36 - this just in the sketch itself I know
91:38 - why I'm doing this in the console so I'm
91:40 - gonna sit let me do this in the sketch I
91:42 - actually have a sketch here so I'm gonna
91:45 - in that's a p5 sketch and they not
91:47 - didn't use anything about p5 I'm gonna
91:49 - have a be a new matrix that's 3 by 2
91:52 - sorry 2 by 3 I'm going to say the same
91:57 - for B which is 3 by 2
92:02 - then I'm going to say a a dot randomized
92:07 - B dot randomized console.log a dot
92:12 - matrix and console dot log and not dot
92:18 - log table B dot matrix so let's take a
92:25 - look at that okay so now I have to make
92:30 - two matrices this is one and they would
92:32 - random values in them now
92:35 - let's now let's say a C equals a
92:41 - multiply B console dot table C ready
92:47 - everybody ready ready ready I so people
92:53 - are born me be able to reproduce the
92:55 - results so let me just do random seed
92:57 - one so by the way random seed is a
93:00 - function in p5 that'll seed the random
93:01 - numbers so I should every time i refresh
93:05 - this page oh that did not work oh what
93:07 - am i using for random values in my
93:09 - library Oh cuz right because I don't
93:15 - want this to depend on p5 so I seeded it
93:18 - whatever what it's fine I will worry
93:20 - about seeding it later ok now so I'm
93:25 - gonna get different random numbers each
93:26 - time but we'll see all right let's see
93:30 - so now I'm gonna say let C equal a dot
93:34 - multiply B
93:50 - oh I didn't get anything there oh oh I
93:57 - didn't console.log it
93:59 - oh man console table C dot matrix oh I
94:04 - forgot about that part okay here we go
94:07 - again
94:14 - shoot all right so what's this error
94:19 - sketch that Jess line eleven cannot did
94:26 - Isis forget to return it I forgot to
94:28 - return it didn't I
94:31 - okay you know what would be nice is that
94:33 - the end of this I said return results
94:36 - and this actually goes where here right
94:39 - I got a return how to return that result
94:41 - all right let's try this again
94:50 - no I forgot hit save alright let's see
94:58 - what's going I'm gonna stop doing it
94:59 - stupid sound effect is apparently I'm
95:01 - doing a terrible job at this let's just
95:07 - are we even here this is everybody's
95:11 - favorite debugging here uh-oh I'm being
95:16 - told breaking news breaking news the
95:20 - return is in this for loop that's not
95:22 - good oh right because this just the
95:25 - return was in the for loop that's
95:27 - terrible and this says results and it
95:29 - should say results okay I'm feeling a
95:31 - little bit a little bit more confident
95:34 - now what what what turn results mmm
95:49 - sketch dot eleven its console logging
95:53 - something but nothing is there oh no but
96:05 - yeah I know there's an issue with hold
96:08 - on Oh debug this for a second here
96:12 - oh my goodness
96:18 - I'm completely losing my mind here so
96:21 - it's very important to realize that
96:22 - result is the matrix object ah the
96:26 - matrix object has this array called
96:29 - matrix which actually stores the values
96:31 - and there's no like set function or
96:33 - anything so what I actually really need
96:35 - to put here is result dot matrix right
96:39 - equals this result dot matrix equals oh
96:44 - no and then return results right so I
96:46 - these values that I'm calculating this
96:48 - probably be like a set function or
96:50 - something like that and I probably
96:51 - should just created a 2d array here and
96:53 - then made a major but whatever this is
96:55 - what it needs to be I think we got it
96:57 - now oh boy okay let me do some console
97:03 - logging in here
97:04 - console.log result and then let me say
97:18 - console.log results here all right so
97:22 - that worked
97:24 - Ruth's a problem here columns and rows
97:27 - are undefined so something is really
97:29 - going wrong here new matrix a dot rows B
97:34 - columns alright let's look at a dot rows
97:43 - undefined line 5000 this is the worst
97:54 - I'm really doing a horror look so I've
97:57 - done something terrible here but
97:59 - hopefully you know you're watching this
98:00 - video it may be this is valuable to you
98:02 - I have really conflated the idea of the
98:04 - 2d array that stores the values with the
98:07 - object and I'm using it in all sorts of
98:08 - terrible ways so let's think about this
98:13 - this is this is this is what I want a is
98:16 - this B is n now I can get the rows and
98:20 - columns but down here I really need to
98:23 - say a dot matrix B dot matrix right and
98:30 - and that goes into the resultant matrix
98:34 - so hopefully this is clear to you the
98:37 - issue let me try to rephrase it again in
98:40 - case it's not there is this idea of a
98:43 - matrix object it has three properties
98:45 - the number of rows the number of columns
98:47 - and the actual 2d array so where I refer
98:50 - to the variable that's the matrix object
98:52 - and I want to actually do something to
98:53 - the data I have to say the name of the
98:56 - object dot matrix and some I'm
98:58 - forgetting to do that in so many
99:00 - different places so what I'm gonna do
99:04 - what I'm gonna look at down here is I
99:06 - think now everything is correct if a and
99:08 - B are the names of the objects I could
99:10 - pull out the rows and columns from a and
99:13 - then I could pull out the values from a
99:15 - dot
99:15 - metrics and B dot matrix and set the
99:17 - values in resultant matrix okay how
99:23 - could I shouldn't be confident I really
99:25 - should not be confident this is a
99:26 - terrible idea
99:28 - but I'm confident okay so we finally got
99:36 - three things if this is a and this is B
99:40 - this is a dot B anybody want a fact
99:43 - check from me for this is it coming the
99:45 - chat I don't I'm gonna pop in a wait now
99:50 - this will get edited out anybody want to
99:54 - fact check these
100:07 - yes Simon I saw your comment about the
100:09 - other functions changing the current
100:11 - matrix not giving a new matrix back that
100:15 - is true and I probably should be more
100:19 - thoughtful about that in the library put
100:22 - small numbers to be easier to check
100:24 - wrong doesn't look right okay let's see
100:28 - all right I'm gonna have to check this
100:29 - myself six times three yeah it
100:33 - definitely does not look right didn't
100:35 - know no that's right six times five is
100:38 - thirty seven times one is seven zero
100:42 - times five is zero thirty seven it's
100:47 - right it's right that's good
100:51 - seven times five is thirty five plus 2
100:58 - is 37 plus 30 is 67 so those are right
101:03 - and then seven times six times three is
101:08 - eighteen plus seven is twenty five
101:11 - that's right all right
101:12 - I think it's right it's right yay okay
101:23 - we got it everybody thank you thank you
101:30 - these numbers are in fact correct I took
101:32 - a little break there and check they are
101:34 - right I encourage you to pause the video
101:35 - and check them yourself to see if you
101:37 - understand how the library is working
101:38 - one thing that actually could be really
101:40 - useful I don't ever employ tests ever
101:44 - really but I should learn about tests
101:45 - and I should probably do some stuff with
101:47 - tests on this channel so I think I might
101:48 - come back and try to do some tests that
101:51 - would if I ever change the code for this
101:53 - matrix library to ensure that the math
101:55 - still works so maybe someday I'll come
101:57 - back and do that but and now yes there
102:01 - needs to be a lot of tidying up and
102:03 - refactoring I can use these array
102:04 - functions and I'm gonna get to all that
102:06 - but now we're ready the next video I can
102:09 - take this matrix library this matrix
102:13 - class and use it in my neural network
102:16 - class to perform the feed-forward
102:20 - rhythm of taking all these inputs
102:22 - multiplying them by weights and getting
102:25 - new outputs which then go into other
102:28 - node they become inputs to a hidden
102:29 - layer of nodes eccentric search I've
102:31 - talked about that in the previous videos
102:32 - and now I'm gonna come back and actually
102:34 - do that I do want to point out something
102:36 - Simon in the chat did mention a good
102:40 - point which is that if you look at all
102:42 - of these functions randomized effects
102:45 - this actual object add effects this
102:48 - actual object I'm doing something's
102:51 - different with matrix multiplication
102:52 - where instead of affecting this actual
102:55 - object I'm creating a new object and
102:57 - returning it so I probably should be
102:59 - more thoughtful maybe use like a static
103:01 - method for that and so maybe I maybe
103:04 - I'll refactor that some actually you
103:06 - know what let's do that right now
103:10 - now I'll refactor that later wait time
103:13 - timeout the reason why I don't want to
103:21 - do that right now
103:25 - I'm not going to do that right now
103:26 - because I haven't talked about static
103:30 - methods oh oh you know we're gonna do
103:33 - some refactoring okay actually so even
103:36 - so I'm gonna do in the next video before
103:38 - I get to the neural network stuff I'm
103:40 - gonna do a little bit of refactoring
103:41 - with this I'm gonna take the multiply
103:42 - function and make it a static method and
103:44 - I'm gonna look at using some advanced
103:47 - array functions like Map Reduce and that
103:51 - sort of thing to just sort of clean up
103:52 - the code a little bit alright thanks
103:54 - everybody and see you in the next future
103:56 - videos oh I need transpose Oh crud well
104:08 - let's do it hold on Matt's gonna give it
104:11 - let me like rerecord the whole end of
104:12 - this video I'm gonna go back to where I
104:14 - mentioned Simon's comments okay Simon in
104:19 - the chat makes a good point where if you
104:21 - look at this class all of these
104:24 - functions randomized add multiply up to
104:29 - multiply they change the object that I'm
104:31 - calling the function on so if I say
104:34 - matrix a I say a dot randomized that
104:37 - matrix object actually changes but in
104:40 - this with this matrix product I'm not
104:42 - actually affecting the object when I say
104:43 - a multiply B I don't change the value of
104:46 - a I create a new a new matrix object and
104:51 - return that value so I probably should
104:54 - refactor the library to do maybe that no
105:00 - matrix product in a slightly different
105:02 - way and I could use something called a
105:03 - static method so I'm like I'll come back
105:06 - maybe in a later video when I refactor
105:07 - this a little bit I want to mention that
105:08 - now but it also reminded me that what
105:12 - I've been told in the chat that later
105:15 - equals never but I sometimes sometimes I
105:17 - do come back I do come back and do the
105:18 - things I say sometimes I also need to
105:22 - transpose a matrix that is another
105:24 - whoops that is another matrix operation
105:34 - that I need I don't know where to put it
105:36 - but I need to transpose you'll see in
105:38 - the neural now in the feed-forward
105:40 - algorithm actually don't think that I
105:42 - need this in the feed-forward algorithm
105:43 - but when I get to the training step
105:45 - where I see if that neural network made
105:47 - a good or bad guess and try to adjust
105:49 - everything internally to tune it to get
105:52 - a better guess I think that I need to
105:55 - transpose a vector what does it mean to
105:57 - transpose a vector to transpose a vector
106:00 - means to just like rotate it so if I'm
106:03 - correct transposing this vector would
106:09 - turn it to this so I I might have gotten
106:13 - that wrong in which case if you watch
106:16 - the next video I'll correct it and if I
106:18 - got that right in the next video I will
106:20 - implement it okay
106:21 - so stay tuned I'm gonna transpose
106:27 - alright alright
106:32 - Oh what warez is Dow in the chat ASEC I
106:35 - made a matrix library but it was so much
106:37 - more messy is that possible could you
106:40 - possible may get more more messy okay
106:47 - all right did I get that right about
106:49 - transpose I'm gonna do the transpose
106:51 - video now too because I have time it's
106:54 - not a saying vector instead of matrix
106:56 - all right fine what happened what
107:02 - happens when you get older is you start
107:04 - mixing words together maybe that doesn't
107:06 - maybe I'm not you know it seems to be
107:08 - happening more recently okay let me let
107:13 - me let me redo this all right just just
107:24 - ignore me for a second there's one more
107:31 - matrix operation that I need from the
107:33 - neural network stuff I think I don't
107:34 - actually need it for the feed-forward so
107:36 - I could come back and do it after that
107:37 - but I do need it for the training aspect
107:40 - when I adjust and tune it based on the
107:43 - with the guesses well I get to all that
107:44 - later the thing that I need is to
107:47 - transpose a matrix so how do I transpose
107:50 - a matrix if I have the matrix a with a
107:51 - certain number of rows and columns start
107:54 - rows and columns the columns become the
107:56 - rows the rows become the columns so
107:58 - transposing this matrix would turn it
108:02 - into this matrix okay so I'm going to
108:05 - quickly in the next video write a
108:07 - function that does exactly that
108:14 - alright alright alright alright wait did
108:30 - I do something wrong again I see I see I
108:31 - see so many people typing am I good am i
108:40 - good
108:58 - I'm waiting for somebody in the pastry
109:00 - group to tell me I'm good Jose says I'm
109:03 - good see I don't some people yes okay
109:11 - thank you all right all right
109:21 - you know what I need to do is I yeah cuz
109:24 - I'm gonna want to return a new all right
109:26 - all right all right Thank You Simon
109:37 - further comment about vectors and
109:39 - transposition okay if anybody can think
109:52 - of a very very short coding challenge so
109:56 - Ricardo there are moderators in the chat
109:58 - actually I think all right here we go
110:06 - okay another matrix math video I I need
110:10 - I mean there's lots more of matrix
110:12 - there's lots more to matrix math and
110:14 - again let me encourage you I will link
110:17 - to in this video's description to check
110:18 - out three blue one brown's youtube
110:20 - channel which is a whole series about
110:21 - linear algebra I'm just kind of
110:23 - implementing the minimum that I need for
110:26 - this neural network example that I want
110:28 - to build in JavaScript so the missing
110:31 - piece and I just talked about at the end
110:33 - of the last video is to transpose a
110:35 - matrix transposing a matrix means take
110:39 - all the rows and make them columns so
110:43 - ABC this row becomes the first column
110:46 - ABC this row becomes the first column D
110:48 - yeah now this is yet another function
110:52 - which requires me twitch which requires
110:55 - me to make a new matrix so I'm not
110:57 - actually taking the matrix it's I mean
110:59 - it could take the matrix and redo it but
111:02 - I think what I'm going to do is make
111:03 - just write this function transpose what
111:07 - I want to do is have a result I guess
111:11 - I'll call it and have that be a new
111:13 - matrix that instead of having write the
111:18 - rows and cop the columns become the rows
111:21 - the rows become the columns so I'm going
111:24 - to say this dot columns this dot rows
111:32 - so I'm crazy that I Adam I think it's
111:43 - because
111:44 - oh it's each of the files hold on just
111:47 - just ignore me for a second I gotta fix
111:51 - this it's driving me way too crazy I'm
111:53 - gonna rewrite this function I know
111:55 - what's going on I copied some code from
111:59 - I have different user logins into the
112:01 - computer and it doesn't think it owns
112:05 - the code so if I go like get info on
112:08 - this file yeah I did it on the folder
112:11 - that's so annoying and it doesn't do it
112:14 - to all the files recursively so I have
112:18 - to say that this file really belongs to
112:22 - processing and processing has read and
112:24 - write and do I really have to do this to
112:27 - all the files was there maybe like a
112:29 - checkbox for like doing everything does
112:34 - anybody know I'll just do them
112:35 - individually because I'm
112:41 - just bear with me I just want Adam to
112:47 - stop yelling at me
112:49 - and now it will stop should change the
113:01 - username decoding train once I called it
113:05 - processing okay okay so I'm gonna write
113:10 - this transpose function and the first
113:14 - thing I need to do is make a new matrix
113:16 - which I will call result again equals a
113:19 - new matrix and it has the number of rows
113:24 - that it used to have columns and it has
113:27 - the number of columns that it used to
113:28 - have rows and I should be able to just
113:32 - say now it should be as easy as it
113:35 - should be as easy as if I was like ever
113:38 - going through the entire matrix and I
113:42 - should be just saying that the results
113:46 - matrix I J equals the and actually I
113:54 - should say the results matrix J I equals
113:59 - the this matrix I J we see this now it's
114:07 - possible I got this backwards but it
114:10 - should be if I'm iterating over all the
114:13 - rows and columns every row column
114:15 - position should become the column row
114:17 - position so I should be able to just say
114:18 - J index I equals the of the new matrix
114:21 - is this matrix I come egg i J that
114:25 - should work so and then I need to say
114:29 - return again return results okay so
114:35 - let's test this out could I really have
114:37 - done this this quickly very unlikely oh
114:41 - why am I saying plus equals should not
114:43 - be plus equals it should just literally
114:45 - be equal and if I go into the sketch
114:51 - that I had and all I need is a
114:55 - so I'm gonna have this random one and
114:59 - then I'm going to say let B equal a dot
115:03 - transpose and then I'm going to say
115:08 - console dot table a and console table B
115:14 - all right let's take a look I'm not
115:18 - accounting for the number of rows and
115:20 - columns differences I think that I am
115:22 - hold on let's take a look probably get
115:24 - this wrong whoops
115:28 - and of course I need to consult the
115:33 - actual matrix object to see it try this
115:36 - again six seven four one zero nine six
115:41 - one seven zero four nine six seven four
115:43 - six seven four one zero nine one zero
115:46 - nine all right I think we got transposed
115:50 - correct so that's great so we did this
115:55 - we're done we're done with the matrix
115:58 - math videos and it's the next one that
116:02 - will the next thing I need to do is
116:04 - actually start thinking about how does
116:07 - this feed-forward algorithm work if I
116:10 - were to write a feed-forward function
116:13 - and I were to give it some input by word
116:16 - you feed some input how do I
116:21 - ultimately return some guests so this is
116:25 - where lots of matrix math needs to
116:30 - happen so again if you're interested I'm
116:33 - also going to link to three blue one
116:35 - Browns video what is a neural network
116:37 - it's an excellent animated explanation
116:40 - of a lot of the things that I covered in
116:42 - the earlier videos in this playlist but
116:44 - what I'm going to do is try to write the
116:46 - code for the neural network right here
116:48 - once we have that done I think I'm going
116:50 - to just try doing a couple tests like
116:52 - I'm gonna solve a problem called XOR
116:53 - which is a really simple problem and I'm
116:55 - also gonna look at the EM NIST data set
116:58 - which is kind of like the hello world of
116:59 - machine learning with this neural
117:01 - network and then then with the idea of
117:03 - just seeing if it works so that I can
117:05 - then once I know that it works I
117:06 - do some more creative stuff with it okay
117:08 - so thanks everybody and see you in the
117:10 - next video
117:13 - okay all right it's after 4:00 and I
117:21 - think I have to go unfortunately but I
117:24 - will be back next Friday and I will get
117:29 - to the next part next Friday
117:31 - which will be starting to build this out
117:33 - and I would say that hopefully it'll go
117:36 - faster but probably well but we're gonna
117:40 - get to all this stuff let me just check
117:43 - my messages see if I got any important
117:47 - message while I see if you guys have any
117:50 - questions all right no okay so yeah I
118:07 - know I could do what's a what's a coding
118:10 - challenge I could do before I go I can't
118:13 - do Tetris I could think of something
118:17 - like really simple let's look let's look
118:20 - let's see if I can make it
118:26 - what were the ones that I was looking at
118:28 - rainbow that I thought were possible and
118:34 - then I want to see the ones the ones
118:37 - that I thought were possible I assigned
118:38 - to myself
118:40 - no no Koch snowflake true no Langton
118:45 - Zant no none of these are very simple
118:51 - double pendulum weirdly no need
118:56 - something simpler mmm
119:01 - simple sound pinball the oven we had for
119:04 - rotating oh oh there were some things
119:08 - that I feel like I had some Corrections
119:11 - from
119:17 - dragon curve yeah looking at looking at
119:20 - all these suggestions Langton Zant
119:23 - really isn't that hard right I already
119:24 - have the the the game of life one okay
119:42 - all right
119:44 - squares on a plane are colored variously
119:47 - either black or white we arbitrarily
119:49 - identify one square as the aunt and can
119:52 - travel in any of four cardinal
119:53 - directions at each step it takes the
119:55 - aunt moves according to the rules below
119:57 - and a white square turn 90 degrees right
120:00 - flip the color of the square move
120:02 - forward one unit the black square turn I
120:05 - degrees left with the coach camera all
120:07 - right all right all right
120:11 - all right we can do this we can do this
120:15 - we can do this all right
120:16 - we're gonna do Lankans aunt as the
120:18 - coding challenge for this week um and I
120:20 - say have to leave it for I really meant
120:22 - 4:30 because I always never gonna take a
120:24 - little longer but I really have to leave
120:25 - at 4:30
120:26 - you know 4:45 the very very latest we
120:30 - just we just send a message here
120:45 - just don't mind me I'm wasting time that
121:02 - I don't have but all right let's I'm
121:07 - gonna do something here which is I want
121:16 - to find my game of life code here it is
121:21 - and I'm going to copy it to the desktop
121:25 - and I'm going to call it lenghtens
121:29 - ant and then I'm going to in terminal
121:37 - actually never programmed this before
121:50 - let's open it up and
122:01 - whoops what's going on here oh my
122:07 - goodness I have some nonsense code
122:11 - because I was explaining something okay
122:14 - great so I should be able to use this
122:16 - structure for Langton Zandt so I'm gonna
122:21 - allow myself do you we all think this is
122:33 - okay
122:44 - there is so much similar here that is
122:49 - this okay to start my coding challenge
122:51 - with this same make 2d array function
122:54 - these variables that talk about the grid
122:58 - initializing the grids to zero and just
123:01 - drawing the grid a one is white are we
123:08 - ok with this start from scratch
123:12 - people really think how interesting
123:18 - interesting I will start from scratch if
123:20 - that's what people think
123:22 - me I am Samia is saying that's sensible
123:26 - it's just I'm gonna end up programming
123:29 - exactly this again vote and people could
123:34 - just you know this is like part two and
123:36 - what alright I'll give it a couple
123:38 - minutes to vote I'm gonna do a poll in
123:41 - both I'm just curious to be scientific
123:43 - about this
123:52 - now a lot of people are telling me
123:54 - scratch can I at least keep this make 2d
123:58 - array function how about at least keep
124:00 - that I think I should at least keep that
124:06 - people want me to time this as well
124:08 - all right yeah I'm going to I'm gonna at
124:15 - least use that make 2d array function
124:18 - cuz I don't know I'm gonna allow myself
124:24 - that
124:31 - and
124:42 - all right hold on
124:49 - whoops look I'm wasting all this time
124:53 - that I could just be doing this with
124:55 - trying to make a poll in here
125:09 - pixels as squares would be fairly neat
125:14 - wait wait I'm getting some interesting
125:15 - suggestions so I mean do it as a pixel
125:20 - by pixel level make it in processing
125:24 - that's a good idea I should just do this
125:27 - in processing yeah let me do this in
125:29 - processing because it's so similar at
125:31 - least we could see something kinda
125:33 - that's a great idea that answers that
125:35 - solves lots of problems it solves the
125:39 - problem of doing it whether I should do
125:42 - it from scratch or not and it also
125:44 - solves the problem of of people who keep
125:51 - saying will you do more challenges in
125:53 - processing yes and that this will be a
125:56 - lot faster to do it on the pixel level
125:57 - I'll do it on the pixel level okay we're
126:00 - gonna do it on the pixel level in
126:02 - processing from scratch and we'll make a
126:07 - JavaScript version we'll port the code
126:09 - don't worry Oh lenghtens ant okay okay
126:24 - all right here we go you're saying
126:30 - openFrameworks yeah you guys are gonna
126:31 - have to do it redo it openFrameworks
126:33 - yourself somebody I'll have a guest do
126:34 - some openFrameworks tutorials I keep you
126:36 - need to make that happen okay
126:39 - whoops all right what's this thing here
126:48 - that's the Bell visible slightly visible
126:51 - okay so let me close all this stuff
126:57 - click this click this click this and
127:03 - we're gonna do lenghtens ant
127:21 - oh uh oops yeah replace it alright Oh
127:35 - checkboxes that's a great idea okay
127:38 - somebody posted that nice antimage I
127:40 - don't know that I don't have time to use
127:42 - that but but thank you cuz I don't do it
127:45 - pixel-by-pixel anyway alright here we go
127:51 - I'm moderating the chat oh yeah I like
127:59 - this okay here we are a coding challenge
128:06 - for this coding challenge I'm gonna do
128:08 - in processing and it's cool I'm going to
128:10 - attempt to implement this thing called
128:11 - Langton Zant now one thing I might
128:14 - recommend is go back and watch my game
128:16 - of life coding challenge because there's
128:17 - gonna be a lot of similarities between
128:18 - these two this is an example of another
128:20 - cellular automata system however I'm
128:23 - gonna do this one in processing so we
128:25 - just sort of see a different environment
128:26 - I will of course make a port to
128:29 - JavaScript so if you make your own
128:30 - variation of this and want to share it
128:32 - on the web you can look at the p5.js
128:34 - version of this so what do I need what I
128:37 - need with this first cellular automata
128:39 - system just like it is it otama taw is
128:43 - it at um I could never get this right I
128:47 - need to have a two dimensional array and
128:48 - this is actually a place where I'm kind
128:50 - of happy that I'm using Java in
128:52 - processing where I can say I can make
128:54 - this grid a new two dimensional array
128:57 - and you know what though
128:59 - guess what I'm gonna do I'm gonna have
129:01 - every cell be an individual pixel
129:03 - because processing is pretty fast I
129:05 - could do individual pixel setting so
129:06 - let's instead of having like a grid of
129:08 - squares that are larger size I'm
129:10 - actually do it on the pixel by pixel
129:11 - level let's see how that goes so let's
129:13 - just decide in advance actually I don't
129:18 - need to decide in advance I'm going to
129:21 - create I'm gonna have a window that's
129:23 - let's just do like 200 bytes 400 by 400
129:26 - to start and then so the array is going
129:30 - to be a new array of integers which the
129:33 - same nonresponse width and height and
129:35 - it's actually going to just fill that
129:37 - whole thing with zeros so I don't
129:39 - actually even need in Java if I was
129:40 - doing this in JavaScript I've got to
129:42 - like fill it with zeros but I could just
129:44 - a good just assume that it's filling it
129:45 - with zeros great now wish
129:48 - really learn what license it is let's go
129:50 - take a look so it's a it's a system
129:53 - souther automatic system that will
129:56 - produce interesting patterns and I need
129:59 - to follow these rules
130:00 - okay so squares on a plane or colored
130:02 - variously either black or white
130:04 - so we'll say white if the aunt hasn't
130:07 - hasn't been there that'll be oh well I
130:11 - guess zero it's black white is one I
130:12 - don't know we'll figure that out we
130:14 - arbitrarily identify one square as the
130:16 - aunt so let's start that let's have the
130:19 - aunts location we're just going to call
130:21 - that we're gonna have that just be x and
130:23 - y and the aunt is gonna start at 200 200
130:27 - okay that's where the aunt's gonna start
130:29 - I probably should say with divided by 2
130:30 - whatever so I'm going to say grid X y
130:34 - equals 1 that's where the aunt is and
130:38 - actually to be honest with you maybe I
130:42 - should have that be the value 2 so I can
130:45 - have 0 4 but let's let's keep going here
130:48 - so the aunt moves according to the role
130:50 - rules below at a white square it turns
130:53 - 90 degrees white right okay so actually
130:59 - what I want to do is each time and let's
131:04 - make a background of white I need to
131:06 - figure out what is the state of the
131:09 - current spot where the aunt is right so
131:13 - this is the state of the current spot
131:15 - where the antis so if the aunt we can
131:19 - look at these rules if the aunt is at a
131:22 - white square okay and then we need to
131:25 - keep track of its direction
131:26 - which way is it moving so I also need a
131:29 - direction and let's just be let's do
131:32 - something goofy and do like these I
131:34 - think you're supposed to like it kind of
131:36 - make constancy maybe you say final or
131:38 - something but I'm just gonna call them
131:40 - cap I'm gonna say like up oh that's a
131:43 - reserved word in in in processing aunt
131:52 - up is 1 2 0 and
132:00 - is one and right is to this might be
132:10 - really silly the way that I'm doing this
132:12 - ant left is three so I'm gonna make up
132:14 - some constants that keep track of the
132:15 - direction and I need a variable called
132:19 - ant direction and I can just call that
132:22 - direction so I have I already have that
132:29 - I have the ants XY location and its
132:31 - direction it's probably a nicer way of
132:33 - doing that but I'm gonna keep going with
132:34 - what I have its direction I was going to
132:35 - start by going up that's its direction
132:38 - so now if add a white oh you know what I
132:45 - should have those in clockwise order
132:48 - because then I could just add one is
132:50 - adding one is turning right subtracting
132:53 - one is turning left so this should
132:55 - actually be up is zero right is two is
133:00 - one down is two and left is three so if
133:05 - the state is white and I'll have white
133:10 - be one no white should be zero because
133:13 - they're all starting a zero because I'm
133:15 - filling it with white so if the state is
133:17 - zero then the ant should turn right
133:31 - time's it if if the state is white if
133:39 - it's zero the ant should turn right
133:41 - meaning ant so just direction plus plus
133:45 - and I'm gonna what I'm actually going to
133:48 - do is I'm going to almost in a silly way
133:51 - write a separate function for turning
133:53 - right because I can I need to deal with
133:55 - like so this is ant
134:01 - this is Direction plus plus but if
134:04 - Direction E is greater than ant left
134:11 - then Direction equals ant up right so I
134:17 - could use modulus but I'm just gonna be
134:20 - sort of silly about this you can all do
134:23 - your nice refactoring and I'm gonna say
134:25 - - - and if it's less than ant up
134:29 - it's ant left so this will account for
134:34 - when 0 goes to negative 1 it should be 3
134:37 - when 3 goes to 4 it should be 0 and
134:39 - again I could have done this all on one
134:40 - line of code with modulus but that's
134:43 - fine
134:43 - so if state is zero turn right and then
134:53 - what's the next thing
134:54 - flip the color of the square and move
134:58 - forward one unit
134:59 - okay so then state grid X Y should now
135:10 - be one right that's flipping and move
135:13 - and then move forward needs to be a
135:15 - function so I'm now going to write a
135:18 - function called
135:20 - move forward which is if Direction is up
135:31 - then Y minus - again I could use a
135:36 - switch statement a case statement all
135:38 - that if Direction is right I could do
135:42 - this with all sorts of fancier ways
135:44 - Ales if but I'm just gonna really try to
135:48 - I'm gonna really try to be long-winded
135:51 - about this to understand it if it's down
135:54 - y plus plus else if direction is left
136:01 - then left is X minus minus then I need
136:06 - to account for the edges so if X is
136:09 - greater than width then X equals 0 if X
136:14 - is else if X is less than 0 then x
136:19 - equals with minus 1 and again I could
136:23 - use modulus but I'm just gonna be super
136:24 - long-winded about this and I'm gonna do
136:27 - this for Y and I'm gonna change that to
136:32 - height and put Y in here and here we go
136:37 - okay so now I have this crazy long
136:38 - function a crazy long function for
136:44 - moving forward it should change the x
136:46 - and y value based on its current
136:48 - direction and it should wrap around the
136:49 - edges okay so now move forward okay else
136:54 - if what what could the other if it's the
136:59 - state is already one if there's really
137:04 - only one other possibility but I'll be
137:05 - I'll check else if state is one turn
137:08 - left turn left change the state to zero
137:19 - and then move forward I think we're done
137:25 - let's just run this it's not gonna draw
137:28 - anything but let's just run this and see
137:29 - if we get any errors I usually don't
137:30 - like to write so much code without
137:31 - running at first okay it's running but
137:34 - let's now see now all I need to do is
137:37 - visualize this grid and I should have
137:40 - probably made this the pixels are in a
137:43 - one dimensional array but I'm now going
137:45 - to loop through and I is every X column
137:52 - I plus plus
137:57 - J is every why I don't want to use X&Y
138:00 - because I already use those for the ants
138:02 - and then and I could actually you know
138:07 - what I really could be so efficient
138:08 - about this because I could make this is
138:11 - very silly
138:11 - I could make an image I only have to
138:13 - change one pixel each frame it's really
138:17 - silly for me to so let's do this I can't
138:21 - bear I mean let's do it this way first
138:23 - but I am gonna refactor this because
138:26 - this is really ridiculous what I'm about
138:27 - to do so the pixel location is I times
138:31 - width plus J and this is a formula that
138:34 - I have used in countless videos and I'm
138:36 - gonna call this pics for pixel so the
138:39 - actual pixel location in the window is
138:42 - all the pixel colors are stored in a 1
138:44 - dimensional array and so I but I'm gonna
138:46 - operate on those pixels I need to say
138:48 - load pixels and I also need to say
138:51 - update pixels so I will refer you to my
138:54 - video tutorials about pixels in
138:56 - processing they'll be a if this is not
138:59 - infinite to you I'll I'll link to those
139:01 - tutorials but basically what I need to
139:04 - do now is just say pixels index pix
139:06 - equals something
139:08 - like if I say color random 255 what
139:14 - you're gonna see here is whoops when I
139:16 - run this sketch is every pixel is a
139:18 - random color now what I want to do is I
139:20 - want to say if grid I J equals 0 then
139:29 - set that pixel to white otherwise if
139:35 - it's equal to 1 but that's the only
139:37 - other possibility set that pixel to
139:39 - black and we should see this is just
139:42 - rendering the results of Langston's ant
139:45 - with each and every pixel as a cell in
139:49 - the grid so let's run this and we could
139:52 - kind of zoom in and see is this the
139:54 - correct pattern can anyone confirm or
139:57 - deny for me that this is the correct
139:59 - pattern let's see if it looks kind of
140:03 - like so this is what it should look like
140:08 - after 11,000 steps
140:10 - all right let's stop this and I'm gonna
140:14 - do something I'm gonna say I'm actually
140:17 - just going to do this all at once I'm
140:20 - going to say for int N equals zero and
140:23 - is less than 11-thousand n plus plus I
140:26 - just want to know that I did this
140:27 - correctly I'm going to just run through
140:29 - the whole algorithm 11,000 times then
140:33 - I'm gonna render it and I'm gonna say no
140:35 - loop so it's only gonna do it once okay
140:38 - so this is instead of watching it
140:39 - animate that looks pretty good right
140:41 - that looks exactly like hopefully dad
140:46 - yeah I can verify that these well it's
140:50 - flipped but that's fine because why is
140:52 - up what you could you could flip it if
140:54 - you want I flipped it fine okay great so
140:56 - that is working we're done yeah but this
140:59 - is this is making me crazy because I've
141:01 - only changed one pixel every frame so I
141:05 - can't bear to leave it this way I'm
141:07 - gonna do one there's so much refactoring
141:10 - of this that you could do and actually
141:12 - I'm gonna leave that in here because one
141:15 - thing but just having this in here by
141:16 - the way and taking out the no loop like
141:19 - this is this I can make it appear to run
141:21 - much faster like this is doing five five
141:26 - five cycles per frame of animation so to
141:29 - make this more clear what if I did 100
141:32 - cycles per frame of animation whoops
141:36 - you can see that this is happening much
141:39 - faster now whoa
141:40 - oh whoops we have an error array out of
141:43 - bounds exception okay where did I not
141:47 - what did I not do correctly uh if it's
141:50 - greater than with minus 1 greater than
141:54 - height minus 1 okay good thing I checked
141:56 - that let's try this again yeah there we
142:01 - go so we're gonna get some pretty crazy
142:05 - patterns after a while and I'm sure you
142:10 - could be clever and think about like
142:12 - modifying the rules to use color made
142:14 - you get of multiple states so this is
142:16 - actually running super fast because
142:18 - processing can really handle doing it at
142:20 - this resolution but you know we could
142:21 - ask like what if I do this at like 1200
142:24 - by 800 like ooh so we also had an error
142:30 - if it's not a square so I have to fix
142:34 - that
142:36 - mmm wait hold on let's 120 by 80 is that
142:42 - the error yep
142:44 - and 8 somewhere I have a mistake in my
142:47 - code what if I do at 80 by 120 yeah so
142:52 - where if oh no cuz hold on width / 2
142:58 - height divided by 2
143:00 - Oh though that's fine and 120 by 80 that
143:05 - worked
143:07 - no so i times width plus J oh my
143:14 - goodness I have this totally wrong had
143:19 - for me worked that's why I was on it
143:21 - sighs I had this formula wrong the whole
143:23 - time ah I referenced my tutorials and
143:26 - everything I just did it really quickly
143:27 - that formula was wrong I need to look at
143:29 - the row I mean sorry the column and then
143:34 - add to it the row times the width
143:37 - well glad I checked so now this is right
143:39 - so let's what I want to show you is what
143:41 - happens if I go to like 1200 by 800
143:44 - which is probably beyond the Wow
143:48 - so you know processing it really is not
143:50 - having a problem doing this superfast
143:52 - but I could make this much more
143:54 - efficient so one way that I'm going to
143:56 - do that is I'm going to make a P image
143:58 - and I'm gonna call that ant and I'm
144:00 - gonna say ant equals create image width
144:03 - height RGB so I want an RGB image and I
144:08 - want that to be white to start with so
144:12 - there's probably a way for me to do this
144:14 - more efficiently but I'm just going to
144:17 - set every pixel of that image to white
144:22 - so so I'm gonna set every pixel to white
144:27 - and I'm gonna say aunt dot load pixels
144:31 - and update pixels and then
144:37 - I'm going to instead of doing all this
144:40 - I'm just gonna draw that image so that's
144:46 - me drawing the image now the only thing
144:48 - I need to do is change whatever changed
144:54 - the state here so what I need to do is
144:56 - like I need to do it though before I
144:58 - move forward but we're always going to
145:00 - move forward right so that move forward
145:02 - doesn't actually have to be in there it
145:03 - can be down here and I can now find that
145:08 - pixel location as X plus y times ant
145:14 - dot width right that's the pixel
145:17 - location in that image and now if I say
145:19 - ant I might not even need the load
145:21 - pixels what I'm gonna put it in here
145:22 - anything aunt dot pixels and you know
145:24 - what I could just use set because I'm
145:27 - just doing one pixel at a time set will
145:30 - in-turn the set function internally
145:31 - calls load pixels and update pixels for
145:33 - you so I can just say ant set the XY to
145:42 - the color and so I'm gonna say if if
145:50 - grid X y equals zero then the then the
145:57 - colour should be black so we're gonna
146:02 - assume the color is white and we're
146:07 - going to make a color we're going to
146:08 - assume the color is white if it's zero
146:11 - we're gonna set to black and then we're
146:12 - going to set that pixel so this is me
146:14 - just doing that one pixel at a time cuz
146:15 - I only change one pixel per per frame or
146:18 - per cycle here I'm actually doing 100
146:21 - and you can see this is the same exact
146:23 - thing did I do that work correctly let's
146:26 - let's go back to let's let me just see
146:29 - here I think I might have a slight issue
146:33 - let's double check let's go let's double
146:37 - check that this is right by resetting
146:39 - this back to 400 by 400 doing this
146:42 - 11,000 times and then saying no
146:51 - and let's see here did I get is this
146:55 - location correct let's see now let's
146:59 - take a look at that as compared to the
147:01 - Wikipedia again I'm doing like a mirror
147:04 - image of it but yeah that looks right so
147:07 - I think it's right so now we could let
147:10 - it run again the same way like let's do
147:15 - like we could probably do like five
147:17 - hundred perfect the thing is that fact
147:19 - that I'm doing five hundred so really if
147:22 - I want it I should really be smart about
147:23 - this and say aunt load pixels to be the
147:27 - most optimized I shouldn't use set and I
147:30 - should say aunt low pixels and update
147:32 - pixels at the end of all of this and
147:34 - then I should say the location is X plus
147:38 - y times aunt ton dot width and I should
147:42 - say aunt dot pixels that picks location
147:46 - is that color so this would actually be
147:50 - the most optimized so I'm only calling
147:52 - up little pixel an update pixels once
147:54 - only changing the pixels that need to be
147:56 - changed and then I should be able to do
147:58 - this and what did I miss
147:59 - oh I have no loop in here still I should
148:03 - be able to do this at very high
148:04 - resolutions really fast so for example I
148:08 - can change this now to full screen and
148:16 - run it and it should have no problem
148:20 - doing this super fast so let's let this
148:24 - run for a little while I'll be back in a
148:27 - minute or two this will be it and you'll
148:31 - see me again after this ran for a while
148:39 - the if condition is backwards
148:43 - could be
148:48 - all right so hold on maybe I'm having
148:51 - some errors so while this is running let
148:59 - me look at the code so what's wrong
149:00 - possibly here oh if it's zero its oh it
149:06 - should be if it's one oh I'm back from
149:10 - you waiting because I think I got this
149:12 - wrong it should be black if it's one so
149:16 - hold on a sec let's run this again there
149:20 - we go and again this is going to run for
149:24 - a while and then I'll be back to see
149:27 - what the pattern is the in a minute
149:33 - okay I think I got it right right now is
149:36 - it right me I am so me we got to wait a
149:40 - while before it actually finds itself
149:42 - and this is by the way not part of the
149:44 - design ah there we go we're getting
149:52 - something now what time is it
150:23 - all right oh there's a number file video
150:26 - so I should reference that one okay
150:34 - okay so this is what it got - you can
150:36 - sort of I can sort of zoom in here and
150:37 - see like what sort of interesting
150:39 - beautiful patterns are here someone in
150:41 - the chat told me there's a number file
150:42 - video about Langston's ant which you can
150:44 - get more of the background the history
150:46 - of it and the possibilities I would
150:48 - encourage you here's some things you
150:49 - could do you could refactor my code to
150:51 - make it more efficient you could think
150:53 - about how would you make this have color
150:55 - in an interesting way maybe maybe the
150:57 - grid isn't is it just pixels maybe it's
151:01 - not even just squares maybe it's a grid
151:04 - of interesting shapes or patterns you
151:05 - use color in some way what kind of
151:07 - beautiful thing can you make from
151:08 - lenghtens and and if you want to make
151:11 - this run on the web take a look I'll
151:13 - also create a JavaScript version of this
151:15 - but again if I think if you want to get
151:16 - this sort of like fullscreen speed of it
151:18 - you're probably gonna want to do it in
151:20 - processing so thanks everybody and see
151:26 - you soon
151:30 - just in case let me make I'm gonna make
151:32 - an intro in case Macchio wants to use
151:36 - this hello you're about to see a coding
151:39 - challenge where I produce this
151:40 - Langston's and I'm using processing
151:43 - which you can get at processing org it's
151:45 - a Java based programming development
151:48 - environment and library which you could
151:51 - find other videos where I talk about it
151:52 - some more but I thought I would mention
151:53 - that since I've been using javascript
151:54 - and almost everything but I also will
151:57 - make a JavaScript version that I will
151:58 - post and I also should mention if you
152:01 - want to learn more about Langston's aunt
152:02 - before you watch me do the code for it
152:04 - I'll link to a number file video all
152:06 - about it as well in the description ok
152:08 - thanks and enjoy the challenge okay so
152:11 - in case it's useful to use that when it
152:13 - gets edited together I'll have Matt to
152:15 - use that okay everybody I have got to go
152:17 - I think we did a good job today of
152:19 - getting a little bit through yeah this
152:23 - will make a nice thumbnail too
152:31 - so yeah I'm gonna keep letting it run
152:35 - I'll see if there's any questions I mean
152:41 - one thing I should do is just I could
152:43 - really really increase the speed do you
152:45 - guys mind cuz I really have to go I want
152:48 - to just increase the speed oh yeah you
152:52 - should increase try it yeah yeah so you
152:54 - should try all these things but I just
152:56 - want for my own sake to just have it run
152:59 - like I think I could do ten thousand no
153:02 - problem
153:03 - yeah see how fast this is like let's do
153:05 - I mean we could do a hundred thousand
153:07 - pixels no problem each frame yeah so
153:11 - there we go
153:11 - that's a hundred thousand pixels each
153:13 - frame it just looks like noise to me but
153:18 - is there a pattern in there I'm in the
153:20 - hello YouTube compression okay I gotta
153:33 - go everybody thank you for tuning in I
153:36 - should read a couple random numbers
153:38 - before I go because maybe some of you
153:43 - are at a place where it's your bedtime
153:45 - you want to lie down
153:46 - curl up get cozy with a blanket it's
153:48 - cold outside light the fire two thousand
153:53 - eight hundred eighty nine sixty nine
153:55 - thousand six hundred eighteen seventy
153:57 - two thousand four hundred seventy five
153:59 - seventeen thousand seven hundred sixty
154:01 - eight sixty two thousand eighty eight
154:02 - forty nine thousand seven hundred thirty
154:04 - seven forty four thousand eight hundred
154:07 - seventy three seventy nine thousand one
154:09 - hundred ten three thousand to try to you
154:13 - thought it was done twenty 1175 1450
154:18 - thirty six thousand five hundred twelve
154:21 - we should have this in the background
154:26 - sixty-five thousand seven hundred thirty
154:28 - seven thirty thousand five hundred
154:30 - seventy-one 69 thousand three hundred
154:32 - eighteen eighty five thousand eighty
154:35 - four twenty seven thousand nine hundred
154:37 - twenty-five ninety seven thousand five
154:40 - hundred and thirty eight thank you
154:43 - everybody for tuning in tuning in to
154:47 - this week's Kodi train I'll be back next
154:49 - Friday I will continue the neural
154:51 - network stuff I'll be doing the
154:53 - feed-forward algorithm if there's time
154:55 - I'll be doing the backpropagation
154:56 - algorithm and solving one or two simple
154:59 - problems and I'm gonna just and then
155:01 - I'll be refactoring using deep learning
155:03 - j/s all that stuff I'll get to it when I
155:05 - get to it so thanks everybody and if
155:10 - you're interested in that book you could
155:11 - go to amazon.com slash shop slash the
155:16 - coding train and get your very own copy
155:19 - of a million random digits with 100,000
155:23 - normals deviance unfortunately it's a
155:25 - reprint if anybody knows where I can get
155:28 - original copy million random digits like
155:39 - I would love to get an original copy not
155:41 - the reprint does it exist anywhere I
155:45 - don't know so maybe on ebay or something
155:48 - if anybody finds one tweeted at me and
155:50 - my new year's eve was excellent
155:53 - bye bye bye good night England just
155:56 - looking at the chat for a few last
155:57 - things this is my goodbye song I will
156:02 - let that stick around so I'll look and
156:05 - answer any questions for two and a half
156:07 - minutes
156:14 - Arduino programming um I don't do a lot
156:17 - of Arduino programming but there is if
156:20 - you go to ITP program where I teach has
156:22 - amazing Arduino and physical computing
156:24 - resources if you go to ITP NYU edu slash
156:28 - fist comp which is this URL right here
156:31 - and go to under videos I mean first of
156:37 - all there's tons of non video tutorial
156:39 - information but since we're here in the
156:41 - world of videos there in this album I
156:46 - think so these are an incredible
156:50 - resource of videos doing all sorts of
156:54 - physical computing stuff made by Jeff
156:57 - Patterson and Tom I go and you can see
156:59 - with guests like Benjamin light and so I
157:02 - highly recommend you check these out
157:04 - maybe I can get some physical computing
157:09 - folks to be a guest sometime Alka asked
157:12 - I have an echo dot now are you still
157:14 - doing the Lexus stuff I would like to do
157:16 - it I didn't get to was on my list for
157:18 - the fall doing a Lexus kill a bunch of
157:21 - tutorials doing it
157:23 - so I right now my priority is those
157:26 - neural network examples but Alki would
157:28 - like to come back to that if I can
157:29 - shaders I would like to get to that as
157:31 - well
157:32 - a computer vision with open CV ah there
157:35 - is a wonderful book that just came out
157:37 - Brian Chung Amazon oh I should put this
157:43 - OpenCV I need to put this on the page
157:46 - this book I have a copy of it um yeah I
157:50 - have a copy of it am I logged in as
157:53 - myself I'm never gonna be all login as
157:56 - myself and add it to my anyway I need to
157:59 - add that to the page somebody will treat
158:00 - me and remind me to do that I need to
158:02 - add Brian Chung's book it's wonderful
158:05 - and I keep meeting ready to Amazon
158:07 - review for it
158:09 - C sharp water my new year's resolutions
158:13 - are cook more I'd like to cook a living
158:16 - in New York ordered a lot of delivery
158:18 - and eat out a lot I want to cook more
158:19 - that was my main New Year's resolution
158:24 - and well I ever turned myself into a
158:28 - cyborg well I do have a large amount of
158:30 - titanium in my arm right now there's a
158:33 - quite obviously a screw right here and a
158:35 - metal plate you can feel right here so
158:39 - I'm part cyborg I think already
158:41 - processing in Python mode I would like
158:44 - to look at that as well I'm not really
158:45 - that much of a Python programmer how
158:49 - many years when you started programming
158:50 - I started programming at the 8th I mean
158:52 - I did the quick answer of this is I did
158:54 - do some programming in middle school I
158:56 - did a semi language in basic and in
158:58 - elementary school this would have been
159:01 - in the 80s but then I didn't actually
159:06 - program again route at all until I think
159:09 - I was 28 or 29 a whole bunch of years
159:12 - ago so I and I learned at this program
159:15 - called ITP where I teach and I so that
159:18 - we have an undergraduate program and a
159:19 - graduate program here interactive media
159:21 - arts interactive telecommunications
159:22 - program
159:23 - I usually include links to those in the
159:25 - video descriptions of your interested as
159:27 - well ok so yes I should start a whole
159:29 - new YouTube channel look I was thinking
159:31 - the other thing anybody interested in a
159:34 - gaming channel I a Nintendo switch
159:37 - arrived and I've been I've been kind of
159:40 - getting a little and I'm not really
159:41 - addicted to it but I've been playing a
159:42 - lot of Let's Dance
159:43 - anybody play I could do practically do
159:45 - everything to another one I could do the
159:47 - entire dance routine to another one
159:49 - bites the dust but I will get a
159:51 - copyright violation if I play it here so
159:53 - off to anyway
159:55 - now I've been learning some new moves
159:57 - like it's like this is one of them from
160:03 - if anyone's ever played less let's dance
160:05 - on the Nintendo okay see you guys I get
160:08 - an endless stream now I'll see you next
160:09 - Friday thanks for thanks for tuning in
160:14 - anybody wants to trade intend to switch
160:16 - games I'm looking for
160:18 - alright wants to sell me some used ones
160:20 - at a low price I'm looking for Odyssey I
160:23 - need to get the ones I want able to get
160:25 - arms Zelda Super Mario Odyssey those are
160:28 - on my list I'll just get them off I
160:30 - can't bear to pay full price for these
160:32 - games so I'm gonna start looking on eBay
160:34 - ok where do I hit stop streaming there
160:38 - it is
160:38 - okay the buyer

Cleaned transcript:

hello happy 2018 it is me Dan stripping life on a Friday as I hope to and expect to all of 2018 I'm sure on this and Fridays here and there but this is the coding train I'm starting a new year fresh but I hope that some of you were able to tune in to my end of the year livestream where I broke out a keyboard and tried to sing some songs hopefully not have you actually watched that it was so I'm just hoping that everything seems to be working yeah so here's the thing I really had planned to do some grooming and freshen up but I don't know if you know this I kept this backup pager cuz it's really really cold for something you probably live in parts of the world where it is much colder and it is even colder than this yearround but for New York City it's quite cold in I find that this is like having a builtin ski mask basically so as soon as the weather warms up a little bit I will get back to the being a little less I don't know wilderness man thing that I look that I'm going for right now okay so yes I see that there are some viewers from Quebec which as we say here Quebec I think it's Americanized pronunciation of Quebec right my right I don't know if I'm right so but maybe to your chagrin or maybe to your happiness today is the day where I'm making a commitment to continue doing a set of tutorials and examples and coding challenges around AI and machine learning and so in the broadest sense what I'll be starting with here today is continuing my playlist where I was building a little JavaScript neural network library from scratch bit by bit that's what I'm gonna do probably for the entire time today up until about 400 p.m. Eastern time I'm getting the audio is out of sync you know this is what happens I cannot control this the audio being out of sync although actually hold on a second let me let me see usually I say that I can't but oh my goodness my old hole let me look here in my settings here because I do do something I do actually have a builtin delay I think that I put in one point when I was out of sync I don't see it anymore no way I forget where that is an open broadcast studio advanced output audio oh no it's fine so I'm gonna I'm gonna just keep going one thing is that eventually these videos most of what I do today will be edited into shorter chunks that get uploaded later and the wonderful matcha who helps me with this can often realign the audio in what I like to call post Claude nooks young the French is like something about French is filtering it's through my head today postproduction so even if the audio is a little bit out of sync in this YouTube version but I think mostly I don't have control over this because I just have a computer I have some software open broadcast studio I have a microphone some cameras I send it out to the internet and it arrives on your screens in some form so I'm gonna keep going yeah I know I know it appeared the beard what can I do it's very cold this Alps so let me get you some updates what's gonna happen this month is I will be here every Friday and I'm gonna continue I just already said all this me know just get started okay well this is another business there's a new year let me tell you about what is out there on the internet that you could look at related to the coding train so you can if you like the work that I do you can support me on patreon patreon.com slash coding train you may also find actually all these links at the coding train com you can see here latest video this should be me this should show up here be live streaming I don't know why that's my latest video you can subscribe you can like all the videos I'm told that the machine learning algorithm that YouTube employs to recommend its videos appreciates when you like and subscribe and you can find some links to the videos here I know what I'm done you can also some of the anytime I use a book all the books that I use as learning materials for myself you can find those at amazon.com slash shop the coding train you can also get yourself your very own coding train branded it's not at all I wish I should have a coding trick what about what I turned into this 2018 apparently is the year me just trying to sell you stuff but train whistle here and that's pretty much it so that's what you're watching now I also like to remind you that I use in almost all of my tutorials open source software from the processing foundation I also full disclosure and one of the organizers directors members I don't know what the right term is of the processing foundation it's a project that I spend a lot of time working on and you can also support the processing foundation it is we're not prosecution is a non for profit entity so your donation is tax deductible depending on the laws of you wherever you with but certainly for the US is tax deductible so those are the kind of as this is a new year 2018 things that I would again Simon is making a point in the chat which is a good one that I should say machine learning and deep learning instead of AI and ml so here's yeah so I think a long time ago when I was doing me when I started this playlist I kind of had some introductory video that talked about the terminology of machine learning deep learning artificial intelligence I like to think I agree that there is something very specific that I'm doing right now which is using neural network based systems for machine learning and then that might turn into deep learning as these are neural network based systems get more complex and sophisticated and the amount of data that's going in them gets much larger but I like to in this very abstract way if the camera went off already think about what I'm doing as broader than that while the tutorials yes right now are really zoned in highly specific what I'm interested in is as a creative coder just to use that term for a moment what are ways that my systems that I develop can appear have the illusion of our perhaps even actually have intelligence and in that sense artificial intelligence is a nice really broad term for that so what does it mean for Boyd flocking with other Boyd's on the screen to suddenly have a brain and make decisions based on a neural network or what does it mean to have all this data that's coming from you know some type of quantified self system and visualize it and analyze it in a machine learning like way so there's a lot of that don't really make much sense but I really want to think of this sort of like broad that that broad picture and I'm not this is not a channel on this is not a tutorial for kind of you know specifically related to only data science and you know machine learning in a kind of scientific which is actually a really good thing to learn I don't know why I said it like this that's what this is this is me being scientific apparently but so I'm trying to treat this sort of broad creative approach okay yes pointing out all these excellent things in the chat you're wondering what this chat that I'm looking at this is my this is a slack channel for patrons of the coding train there's also a youtube chat where everyone's telling me that the audio is out of sync I'm aware of it where is that in open broadcast I just want to make sure I didn't yeah I'm gonna just take a minute to look at this audio issue one more time we're open broadcasting studio audio delay where is that setting audio outofsync huh sound settings Advanced tab audio global hmm I don't have an advance tab miles of the in collection tools under settings probably oh it Vance I do have an advanced tab audio audio default I do not see in a delay stream delay 20 seconds 20 seconds people tell you for some people are okay it's some people it's out of sync which means there's probably nothing I can do about it I swear at one point though I did really I didn't add a setting clap alright alright everybody start off 2000 team with a nice I'm gonna do two things actually one thing I want to know is if my if my audio is different than my sound effect audio this is just out of my own curiosity okay little live live little live live stream debugging so I am now going to clap and so my questions for you are did you hear the clap before you saw the clap after you look laughs how long was that play now I really want to check this all so I'm gonna do this ticktock sound no that's not a good one I'm gonna do the buzzer sound and I'm gonna raise my hand when you hear that when I I'm gonna go like this when the buzzer goes off and see if the buzzer and my finger at the same time even know I don't know I don't know what I'm doing there's a delay in that sound doesn't start at the beginning when I hit the button nevermind does it that dust I'm gonna hit the snare drum and now was there is there is that so 200 milliseconds sound was right see that 200 millisecond delay i think i have a 200 millisecond delay audio ahead so where is that settings advanced somebody must somebody watching must know somebody must know open broadcast studio audio maybe it's actually in hold on hold on maybe it's actually in here ah mic advanced audio properties I found it volume sync oh yeah there is a synch offset by a hundred milliseconds interesting yeah I know where it is now so I wonder if I should I'm gonna delete that I'm gonna get rid of the sync offset I got it I can get rid of that offset okay I got rid of the offset and I'm gonna see is it worse or better I know everybody says who cares I don't know why I'm not gonna know where I won't waste too much time on this but I can fix it worse same worse worse worse better same same worse worse same same worse worse same same worse worse worse worse worse or same same same words oh this is very scientific of me okay I think I know what to do I know what to do and I've got it now everyone be amazed at my amazing ability to fix the audio sync issue and here we go ready here comes another clap it's gonna be perfect alright so I made it 300 everybody that's what you people in patriot in the slack channel over time you can all see I really should use this Bell but you can't start for you to see it so I think I got it perfect great okay uh so let me talk about some things number one I want to mention that I'm gonna mention this book again you go to amazon.com slash shop slash coding train this is a book that I used first of all back up a little bit let me let me open up the playlist let me to open up the playlist YouTube Schiffman and what's the one that I'm looking for under playlists this one okay so this is a playlist that I began back in when did I do this I think it was when were these videos published it doesn't tell me here these videos were made at the end of May I believe and some may perhaps in June and then I had this bicycle accident and I kind of took a couple months off and then when I came back it was the beginning of the semester and I was teaching other stuff so I wasn't really able to get back to this so this now will be my top primary topic for this semester which doesn't mean when I say primary it's still planning on doing other I have some github stuff but I want to keep doing do I got to go see more of those coding challenges that I want to get out of the way I really want to do some more videos about working with processing in Eclipse and Java to make processing libraries so I do have a bunch of things in my on my mind that I would like to get to huh I should I need to get to I term at some point no I did Chrome extensions though but at least for the next couple months this is what I'm a focusing on now some this was actually fortuitous the what's that thing the silver lining of looking on the bright side of having had this delay is new stuff has happened number one three if I go to my Twitter we just tweeted about this because this is just so darn good way better than anything I could possibly make three three blue one Brown is a YouTube channel and a three blue one Brown has several different videos about neural networks and how they work they're really good so these have come out since I started that and so these are a really excellent resource for a deeper dive into the mathematics these are animated they're edited there's a lot of beautiful work done thoughtfully done on these videos they make so much sense a wonderful animations it's very different than my style of like haphazard trying to explain things in live coding but so I think that's good in that I there's no way I'd ever be able to make something of this quality that within me but this is an excellent resource to dive a little bit deeper into some of the maths behind how neural networks work as you know along with or before you watch my videos where I'm gonna try to code this stuff so that's number one that's excellent the other the other thing that's happened is that a new JavaScript library has come out called deep learn j/s deep learn j/s is a JavaScript library that is you might call it like a tensor flow for the web it doesn't really help if you don't know what tensor flow is but it is a hardware accelerated machine intelligence library for the web so what I'm doing right now what I will continue doing today is create this own let me open up atom create this here we are this is good I've been working on this somewhat ridiculous matrix and I'm going to call I'm going to change it to es6 class a class but matrix library which has like a bunch of functions like I could add a number to every element of a matrix or I could add two matrices element wise together so I've been working on this rather absurdly and I intend to continue and finish this the what I want to have hopefully by the end of this month is a complete set of tutorials for building your own vanilla basic neural network in JavaScript with no other dependencies p5 might be a dependency in terms of how I might visualize and draw it but the library itself that does the neural network math will all be there but this isn't really going to get us very far when we want to do some maybe more realworld or faster more optimized projects for the web and that's where deep learn Jas comes in I think I mentioned in some of my videos where I started this matrix math stuff that there's math Jas and like GPU dot rocks there's a bunch of JavaScript implementations but deep learned yes it's a project developed at by Google of the big picture research group up in Cambridge sort of part of the Google brain initiative it's an open source library it's not an official Google product but it's an open source library and there's I encourage you to check out the examples tutorials all this stuff so in relation to this along with a whole bunch of other folks here at ITP students and other staff faculty and researchers there is a library under development called if I go to github.com slash ITP NYU /p 5ml I think what could be the no it's a that's not the final name of it any in any case let me find that repo p5 sorry t plur and j s so this is also why am I not logged in here I'm gonna sign in to get up at some point so this is also a library that's under development that will also allow me and you to do a lot more with these machine learning algorithm is if I can summarize it step 1 build and in a vanilla meaning basic with no dependency is not worrying about being optimized or having it really be very good but build all the pieces of a neural network from scratch in JavaScript to understand how it works step 2 replace the engine that does the math the matrix math that's in that implementation with deep learn Jas so that it works a little bit faster step 3 start to actually use deep learn Jess which has a set of classes and objects for different neural network architectures to do projects and so just let me just show you for example if I go under examples and let's go into this KNN image classifier so let's actually run this for fun let's run let's see if this works this is by the way a simple if you might have you've seen Google's the creative labs project teachable machines which I am also going to reference in some tutorials that used as a explanatory this is very similar to that and so Mike I gotta turn my webcam on so here I am I'm going to do this so that's me training this neural network system this machine learning system let me just say that category a now I'm going to do category B and now what I want to do is start guessing so I fear II it should know whenever I go I'm a whatever I go I'd be I'm going to start guessing and here we go hold on training this design could use a little work but you know usually I'd have a higher resolution but you can see it here let's look at confidence of a is oh I'm standing in front of it hold on so you can see confidence in a and confidence of B so these are the kinds of creative projects that we can think about making also um and and there's lots more so I want to get to all this but I've got to start somewhere okay so that's my plan and we can see where I left off this is where I left off well I left off update on machine learning video series which was kind of like I'm gonna take a break from this for a while but I left off here matrix math part 2 so what I hope to get done today although I'm quickly running out of time just randomly talk is matrix math part 3 which will be doing actual matrix multiplication matrix product and then implementing feedforward the feedforward algorithm for the neural network and then next week I hope to come back and look at training and back propagation so that's gonna be that's kind of my plan okay so I'm looking and it looks like I see Chris who has done a lot of work ITP student who's done a lot of work with the P 5 ml library is in looks like is in the live channel so hi Chris answer all your questions okay now so before I get started let's just see if I can if there's any questions I can answer in the YouTube chat really quickly hi from Sweden it's all right there don't look like there's too many questions there people are asking for shoutouts I don't know what is the Amazon store for coding train please okay oh and through that question yeah I should mention also Suraj I didn't mention Suraj that this is another YouTube channel which I would highly recommend ah no I know I feel I just sort of that was kind of like assumed for me so I also would highly recommend if you're interested in this topic I mean this channel is amazing and completely dedicated to this topic so I would definitely check out Suraj's channel which I watch all those videos as well ok yes I will be making some processing things in the future will you make a tutorial on how backpropagation works on convolution or recurrent Nets I don't know I mean again my plan is to do all the pieces of the vanilla neural network from scratch but using a library like deep learn jazz that's gonna have the architecture for a convolutional neural network built into it so I can really just use the library to implement a convolutional neural network but I certainly will talk about what it is and how it works but I don't intend to build every new neural network architecture that's been developed that comes out of paper from scratch in JavaScript in this I don't think I'm capable of that I don't think that would make sense so ok the store so there are two places if you're interested in coding trade merchandise there's coding train store Envy calm and then there is where I have all the books that I'm using and there's a bunch of them need to add amazon.com slash shop slash the coding drain ok all right so now I think I can get started oh oh it's three blueberries what is talking to me videos are so good I can't it's like I wash it I'm like oh Mike oh my goodness what am i doing I'm like a complete crazy person these this is what like this is the model of Education different styles different strokes for different folks hopefully what I'm doing also has value but those are really good all right okay so it's this is gonna be a little tricky because I got to get sort of back into this frame of mind I did try to do that dukes I did some reading and actually watch some of my videos she almost never do just to try to see what I covered and that was a that was kind of a shock to see what they're like but this is where I am in so let me get this I don't need the whole desktop open here in Adam I'm wonder if this is a new year if I should just switch over to using Microsoft Visual Studio I guess not today I'm not ready for that today I feel like it's a new year I should start like I want to use glitch I love glitch this year I'm going to use that just close all this stuff I'm gonna close this let me go to terminal desktop now open this up one thing I just want to check here also is I might as well go ahead and update to the more recent versions of p5 and and then what else was I saying I want to do I need to run a server and okay so there shouldn't be anything there really this is what matters and okay all right yes I'm gonna do the convert to es6 okay so first I'm going to make a video that the first the first video that I'm going to do here I guess will be ten point eight which will be kind of like a little bit of an interstitial video of like moving over to es6 and I know um one thing I asked this in the slack channel I didn't get a firm answer I'm pretty let me try to look this up if I were to use the array function map the array function map is not does it can I look for it somewhere here that's actually it's not he actually es sick yes yes five I guess I just think of it as es6 cuz I've never used it and then when I was like looking at yes sick stuff I was looking at these things okay so I'll mention that as well because I want to do want to convert everything to es6 keep finishing the tutorial and then i also want to use some advanced array functions just to but I'm gonna not use the and the arrow syntax and all that stuff but I'm not gonna do that at first okay okay so it is 236 p.m. we have about an hour and a half left you can hear me blowing my nose probably because I forgot to hit mute but life will go on yes it's true I am back and I am in severe cold weather revisiting my machinelearning playlist which is really not at this point of machine learning it's something stuck I be hurt we try that again hello I'm back I'm finally getting to that neural network playlist which left off in May and I'm continuing it now you might be watching again you might be watching through the future when it's all been completed but you can as you could see some time passed and Here I am again now the last video in this playlist looked at vector math and I believe I looked at adding oh I can actually look it up here the last thing I did was this function multiply which was simply multiplying a matrix by a scalar so taking each element of a matrix and multiplying it by a single number now you also might notice here matrix prototype multiply yeah what is that well since I last did these videos I have started adopting yes six classes class is a template for creating an object that's part of ECMAScript version six yaddayaddayadda I have a whole playlist about that stuff if you don't know about classes you can go and look at those tutorials but before I move on and finish the vector the matrix math that we need to build this neural network I want to rewrite all of these when I have so far with es6 so that's all I'm gonna do in this video okay so let's actually do that first let's wander over I was first building a neural network object the idea of a neural network is having input nodes a hidden layer and output nodes so let me first change this to be a class class neural network and then once I have a class this constructor function actually can now become constructor called constructor and you know what what the the method that I'm kind of adopting is when I pass arguments in I actually give those arguments and parameters I guess in this case in the constructor definition I give those parameters the same name as the property's attached to the object and they are differentiated by stay with me this dot that's right okay so so there we go so now that converted the neural network class it wasn't a class before but if constructor function into an es6 class now I've got to do the same thing with the matrix constructor function so this was the matrix constructor function and I now want this to be a class called matrix and I'm gonna put this around everything and I don't know what Adam wants me to do but okay and then this constructor function is now called constructor this is what happens to the constructor and this is just the randomize function all these functions that are attached to the prototype can just be written by their name inside of the class this is ad and this is multiply and that's what we're gonna be working on the next video all right so so in a moment I want to check let me let me check to make sure this is like still working so if I go to the browser refresh the page I should be able to say things like let m equal a new matrix 3 3 by 3 i should be able say console table m and I can see oops nope I think this mistake in my previous console table M matrix and you can see there it is so this seems to be and I could say m dot add the number 5 and then I could look at it so it still seems to be working I have a matrix that's 3 by 3 it by default it's filled with zeros if I add 5 to it it looks like five if I say m dot randomized now I can look at it again it has random numbers so it's still working that's good now here's the other aspect of this one thing you might notice is that I'm doing a lot of loops and array operations like I'm saying hey for every element of this array at index I did next J do this thing except there are actually you probably know this already I'm very slow on the draw here whoops let me sorry this was not on you probably know this already I'm a bit slow to catch up with these things there are a bunch of useful array functions I often think of them as es6 like this video is about converting it to es6 but really they've been around before es6 and these are those these functions called like map reduces one fill is one and I filter I actually don't remember what filter does I know what these do and I think having access to using some of these array functions will make this matrix lot will be useful in the development of this matrix library however for simplicity's sake as I go on into the next video I am still going to do all of the matrix math operations in the sort of longest long winded astray it's not actually a word but in a very longwinded way then I think and I'll try to come back and and use some of these and I and I should mention that where am I going with this eventually this I want to learn and understand all of these matrix operations and write the code for them to kind of get my hands in there and figure it out but in the end I'm gonna actually take out all of this stuff and replace all of the matrix operations with a library from Google called deep learn so stay tuned there's gonna be a lot more about this live and a helper library where deep learn can use with p5 in future videos alright so I think that's pretty much it for this video I'm now ready to kind of like get back up to speed and the things that I need to do our finish this matrix class with more useful matrix math operations I need to be able to multiply two matrices together and understand what it means to do that and then also uh and then finish this to add the rest of the functionality for the neural network that uses that stores all the pieces of the neural network in these matrices and implements the algorithms I'll be getting to all that stuff so see you in the next video Oh audio way before in the the sink was not fixed for the other one okay that's fine you know that all unfortunately that'll match you will have to fix that but I can fix that right now for the future whoops I didn't that didn't occur to me that that would be an issue Solon let me fix that really quick I realize there's just two separate audio settings for each no it's the same that's weird the audio settings are the same for both so hold on let me let's just let's just be sure about this whoops and of course the cameras going off ah whoops canceled Oh weird yeah weirdly the video that's so weird I can actually see the delay in I could probably restart open broadcast studio but mmm do you guys mind if I that's really weird wonder why it does that can I do is there an advanced video is it possible I have a like delay on this hold on sorry just excuse me for a second so I don't understand huh I don't understand what's why it's doing that yeah unfortunately I know I could probably have separate settings for each one but I think I'll spend all my time doing that yeah Simon's mentioning let in the in the for loop where did where did I oh my goodness oh thank you all right let's see wait this video is not over yet I forgot that I should also replace bar with let's replace all all right why why why do you keep meeting me to put my password in hold on a second I think I'm something weirds going on I just realized something a little bit weird is going on I have a feeling yeah I know why it's it's asking for my password every time I change it because these this files are not owned by this particular login and so I have to fix that okay that should be fine all right now whatever all right yes I do read this chat Jeffrey but just very rarely I don't know what to do about the other yeah I can see that it's I can actually yeah wow that's a huge delay so I didn't realize this I can actually see the delay in I can actually see the delay in what in my preview window but why why would it be different for different cameras is there does anybody know how to do the video delay in open broadcasting studio settings advanced video output streaming huh the camera was restart stream all right let's let me restart the stream YouTube is actually usually pretty good at it if I shut it down and restart it it keeps it as one thing why not I'm just curious why not try I'm gonna just try that okay everybody I'll be right back yeah the delay actually looks completely gone to me now which interestingly enough it might be there might be a delay there because I have the builtin delay so check this again and here did that fix it okay great all right great okay all fixed thank you everybody all right so I just have to remember so let me think about this what do I want to do I want to multiply okay so first of all I gotta get my terminology right let's see some of you guys can help me with this one thing I want to do is actually let's go back to this particular video and let me see what the whiteboard looked like at the end so this is oh I'm in the wrong camp grammar okay you can now see the difference of the beer so this is what can I please move out of the way my goodness yeah that's a little bit better there we go all right so this is what I had before if you don't mind bearing with me for a second I'm going to I'm over here I know you can't see me but I am erasing the array functions from the whiteboard and I am going to kind of rewrite some of that stuff my video looks so dark so scaler elementwise dot products so I'm just gonna write these scalar elementwise and then three dot product okay so I just made that list which you can now see there and yeah so so what I want to do is get my terms right what I'm talking about is matrix multiplication but there are different countries let me just think about this and I'm gonna kind of like do this twice I know people don't really like it when I do that actually no one's actually ever said that I try to get rid that glare okay so in other words when I when I when I'm doing multiplication there's I could multiply by a scalar in which case that has to be element wise or I could multiply by another matrix and then that could be element wise if only if this matrix is this so if I have a matrix some arbitrary matrix you have same exact size as you right if I'm gonna do oh sorry if I'm gonna do element wise this is me just practicing by the way I'm gonna do it it has to be the same exact size right because if I have two matrices and I want to multiply each element by each other element it's got to be the same size or it could be like weirdly the same number of rows only now but then if or no that's Orica multiplied by a vector I can multiply also by a vector just do kind of like element wise per row but that's but this is called this element wise same exact size that's called that like hod how do you how do you say that that a product that I'm gonna get this wrong Hadamard products right so that's the Hadamard product I believe this is an adornment to go through and explain all this again in that second Hadamard product Hadamard and then if I'm doing the if I'm taking one matrix multiplied by another matrix and doing the dot product I could also do then there's the dot product which with two vectors would give me a scalar but and in this case the row let's let's look let's look at this matrix let's find like a Wikipedia or reference matrix top product oh look at this nice forget about Wikipedia thank you for this okay I want to look at this the the matrix dot product we end up with a matrix that has the same number of rows as the first order matters the that sort of distributive or associative property what all these things are I don't remember associative property come on just give me an image to show it to me all right this is a distributive associative property multiplication right yes which is that the order I could change this is not true for commutative commutative yes yes okay we c'mon we are still at commutative properties that what I'm looking for thank you yeah either order but not true for matrices for matrix multiplication okay there's cross product I don't want to get into that so I'm what I'm trying to just is that correct to call this the dot product and that is the the you have to have the order matters a dot B B has to have the same number of columns as a has rows columns must match rows because and let me just practice this again if I have a b c d e f times g h a b c d e f g h j right if this is what I'm doing this equals I'm done this in so long the do this again don't worry when I'm way off the screen here this equals I'm gonna get a 2 by 2 right because I'm gonna get 2 rows from here I always get wait a second yeah yeah yeah I always get the number of rows and then the number of columns comes from here no no no because I can I can multiply this by oh I'm confused I confused myself matrix product columns has to equal rows rows didn't have to equal columns thank you I knew that was real and you hos backwards here okay okay the columns has two of a has to equal the rows of B this was not going to work de ABCDE F a B where did see go hey b c d e right so for example what am i doing here this is two columns well this was still oh my god I've lost my mind the number of call this is fine the number of columns has to equal the number of rows because what I'm gonna get now is this is you always say rows first so this is 3 by 2 and this is 2 by 2 and so my result and actually the one we care about the most here is just because what we're gonna but I mean let me explain it this way is we're gonna get two by two here at the end and the way that we do that is with the dot product so it is let's let's pull up that math is fun page right here where we basically take the dot product of the vectors right so we take I yeah yeah yeah right right this example is probably a better one did I do it wrong again I told did I do it wrong again let's just do the same as the so the columns has to equal the rows in a second oh yeah yeah no no I'm right I just like the I like this so you could see here the columns has to equal the number of rows this is actually kind of a nicer way of looking at an example because neither of the matrices is a square so I kind of like that so I wonder if maybe that's a better we can borrow we can borrow ABC that's what we can start the way head start a d e f and then we could say for example ABCDE F a b c d e f g h i j k l okay so I know why I wrote the LD way this totally makes sense of course the the number of columns has to equal the number of rows because we're going to because we're going to take these three there we go we're doing the dot product I the reason why I was saying a number of rows has to equal the number of columns I was thinking about it backwards I knew that way I had to take the dot product of this times this I was thinking of this as a row and this is the column but this is a row made up of three columns and the length of this is what matters so we basically make a new matrix by taking the dot product of this vector with with this that goes here this vector with this that goes here this vector with this that goes here and this vector with this and that goes here okay so this would be a times G Plus B times I plus C times K and this would be d times G Plus D times I plus D okay I think I've got it right and what I'm being told breaking news is that you can just call this the matrix product so this element wise is the Hadamard product and the this is the matrix product so what would be Oh M X and P oh yeah that's interesting okay so this would be am I correct about the Hadamard product that they have to be equal is there a special way to do it if they're not equal I don't know that I'm gonna I don't know that I don't think I actually need this product so I actually just only need to reference it let's see if I'm a matrix product do we have a nice Wikipedia page there we go it's our a nice diagram oh yeah look at this awful diagram well actually probably a beautiful diagram okay I like this one okay great great okay so I can use matrix product is the standard sure product that's interesting okay all right so now what I need to do is do this tutorial oh I forgot I have to actually implement the code for that that's gonna be interesting I'm gonna do a terrible job of that I'm almost certain you know what's interesting actually is I'm gonna do a video later this month about unit tests working with a continuous integration company etc and actually one thing that I could do is test to make sure as you modify the code it's the math still works that could be something I could do okay we erase all this I'm gonna I'm gonna redo all this I had to work it out in my head try to make this a little bit cleaner okay okay all right yes no I realized that the Hadamard product is certainly useful I just don't know and if I'm ranking a full like fully implemented matrix library that I really wanted people to use I would want to make sure every math possibility is accounted for but in this case I'm just kind of like putting stuff in when I need it for this neural network so okay anything else oh I'm looking at the chat okay okay everybody's everybody's got great suggestions yeah I am not erasing the whiteboard with my hand I had a paper towel kind of like cupped inside my hand okay right people are telling me begin with the neural network the linear algebra will follow I got you I got you what you don't what you might not realize is that's actually what I've already done I have this playlist and I have introduced all of these concepts and now I needed the matrix math so I'm doing it but that actual kind of this is happening in a very longwinded way you know I probably could in some other universe do all this stuff in one video that just takes like an hour or something but I'm kind of breaking this up into parts because I I take a long time to do stuff okay here we go now I don't want to use a squirrel that's right I don't wanna use a square matrix as an example even though I make it simple because you can get you can really mislead yourself what do you have square matrices and thinking things work in a certain way when they don't okay it happened here to my alright and we are here this is the video in this playlist which really comes right after 10.7 matrix backs part 2 this is matrix math part 3 where I am finally going to look at okay matrix multiplication or really I should say matrix multiplication okay so if you recall what I'm doing with I know it look quite different but I already covered that well bring this one was made a while ago anyway if I have a matrix right and what I mean by a matrix is a grid of values and let's say I have one that looks like this a b c d e this is a 3 no no it is a 2 by 3 matrix we always refer to the number of rows before the number of columns now what does it need and and and previously with when i made some videos just about vectors i talked about this thing called the dot product but i'm gonna change that here and write the matrix product so first of all what does it mean to multiply a matrix by by something i could just multiply this matrix by a single number and that's what's known as well it's not really that's what's known as a scaler sorry scaler if i multiply this by a single number then i just say if this was a whole bunch of ones multiply it by two i got a whole bunch of two's you know if i multiply by two double every value in the matrix and I think actually now I did that in the previous video I could also do what's known as element wise multiplication and that is also referred to as the hata mard i don't know if i'm pronouncing that correctly and do somebody in the live chat that's going on right now told me that it also son is called a short product and what that means is imagine I have another matrix that's exactly the same size as this one and in fact I could kind of do that little small over here and I could say G H I J kl right so I could have another matrix if it's exactly the same size and mine if I multiplied these together I have a new matrix which is has a times G B times H C times I D times J elementwise each each element of the matrix get multiplied by its corresponding other element now I don't those are perfectly valid I'm looking for my eraser perfectly valid ways of doing multiplication oops but what I'm really interested in is the matrix product and the reason why I'm interested in the matrix product is because I want to use the matrix product for a neural network for example this node in a neural network is going to be the result of the weighted sum of all of the input nodes x weighted connections and this one is also going to be the weighted sum of all of the input nodes x weighted connections and so on and so forth and so these weights are stored in a matrix and the inputs come in in a matrix as well so the inputs we could think of like this and so what I actually need hold on time out for a second I got confused so if if the columns the number of columns of the first one the number of columns of the first thing has okay so the weighted the weights go here they're multiplied by the inputs got it okay sorry so if this is how I'm representing the inputs then you might discover that I have this matrix of all these weights that I need to both apply those inputs by to get the new values of the outputs of this hidden layer now anyway I kind of talked about that in a previous video and I'm going to talk about it a lot more in the next video when we look at this in more detail but the point here is that this idea of a matrix product is something that I'm going to need so what I want to do don't worry about the neural network stuff so much right now I'll come back to that what I want to focus on is how does the matrix product work so one thing that's very important to understand is a matrix product which I'm going to use the dot to signify matrix product let's say I have a matrix a this is my matrix a and I'm gonna have another matrix called B and that matrix is going to be equal to the following g h i j k l one thing you might note one thing that's really important is a matrix product B does not equal does not equal B matrix product a the commutative property does not hold right 3 times 4 is equal to 4 times 3 they're both equal to 12 but this is not true here and another thing to realize that's super important is that if you have look if you have a dot B it's only oh the camera went off ah when did that happen how long ago did that happen okay must not have happened that 103 11 p.m. must not have happened that long ago oh no welcome to the coding trade podcast I'm trying to figure out what what did I last say I'm waiting for somebody in the patron group because they're a little bit more trustworthy than YouTube chat one minute 36 seconds ago yeah I don't this doesn't matter how the exact amount of time I don't know what the last thing I said was don't worry about the neural network thing okay that's the last thing I said okay wow so they'll quite a while ago I know I've lost my rhythm here let's see got it oh yes so the whole thing where I was talking about the commutative property okay fine fine all right so I'm going to pretend I finish just erasing the neural network thing and I know I'm in the wrong camera so don't worry about the whole neural network thing I'm going to come back to that in next video go through that in detail what I need to do here is just understand I know I need the matrix product how does it work and then we'll see how it's applied in the neural network example okay so let's say that I have another I have a matrix a and I have another matrix B and that matrix is equal to g h i j k l I'm writing the L like that so that I can see that it's not at one or whatever okay so I have these two matrices the way that I write the expression a matrix product B I'm gonna write it like this a dot B the dot as the indicator for the matrix product now what couple things that are really important here one the commutative property does not hold a dot B does not equal BA this is not true and you're gonna see why in a minute you know if I were to say three times four that's equal to four times three they're both equal to twelve but again this matrix product is a different kind of multiplication this commutative property does not hold so that's kind of key another thing that's really important is the matrix product is something you could only do if the sizes of the matrices match up and what do I mean by that now one thing you might have something but realize like if I was doing when I have that example the Hadamard product that's only gonna work if I have two matrices with the same exact dimensions right because if I if I don't have the same rock dimensions how can I multiply each element by the other element because some elements might not exist in one of them but something even completely different is going to go on here I need to have for this to be valid I need to have the columns right the columns of a equal to the rows of B and you'll notice I made these do that so I have to have however many columns I have here three I have to have exactly the same number of rows and B otherwise this won't work and the reason is what I'm actually going to do is the reason why I use this dot here is I'm going to use vector dot product vector dot product so you might have to go back to one of my previous videos where I talked about the vector dot product or going to do it here again but what the vector dot product does is it takes kind of like the sum of all the elements multiplied the element wise elements both tied to each other what do I mean by that so if I say a dot B what I'm going to get is a matrix that has that has sorry the number of rows of a I'm confused here and the number of columns of B right so there's a time out for a second I'm getting on because little time I'm going to pause at that explanation right because I want to go back to my example if this was multiplied by the number of columns e FG is multiplied by the number of rows the result I get is actually the number of rows and of the first in the number of columns of the second yep okay I had to work that out in my head can this visible okay I'm gonna get when I when I take one matrix the a matrix product B the result is also going to be a matrix now how do I know the dimensions of that matrix it's going to have the number of rows of a which is how many two followed by the number of columns of B what so in the enemy in a two by two matrix now this is going to be different with any all different matrix dimensions and after you watch this video you can make up lots of different matrices and play a game with yourself to like do this matrix product with pencil and paper boy won't that be fine I'm gonna go do that later myself I'm sure but here we can see I'm gonna get a square 2 by 2 matrix now what am I doing here how do I fill in each of these blanks so I'm gonna just put a little blank square here I know I need two by two well what I do is I take the dot product of the row of the first one with the cup of the row of a with the column of B right so it's almost kind of like the intersection this first element right I gotta get the first row of a and the first column of B that's why they have to have the same number of rows and B as columns in a so what this actually is this value here is the dot product of these two vectors which is actually I'm just come over here which is a times G Plus B times I plus C times I ok so that's this element here now let's do this element here well I'm in row 1 so I stay with Row 1 of a but now I'm in column 2 so I go to column 2 of B so now this particular value is a times h plus b times j plus C times L okay that's good now let me do this one this one is the second row times the first row the first column of B D times G Plus e times I plus F times K and then this one here is going to be the second row times the second column D times h plus e times J plus F times L okay so that's the math for any arbitrary set of matrices you take the dot product of all the rows with the columns to fill out your resulting matrix product and you must have the same number of columns in a as rows of B okay so pause this video if you want try to draw some diagrams Google matrix product google image search matrix product you prop up with a million visual examples of this watch three blue one browns videos on linear algebra which will probably teach this in a much more intuitive and nice way but I don't link to that in this video's description I'm now going to try to implement this matrix product in code okay what's the chance I got something no one is yelling at me in the chat which means I might have actually gotten that right did I get that right do I deserve a nice sip of some cold water oh shoot people are saying C times K oh I said it correct I just wrote the wrong thing right okay all right all right all right minor correction hopefully I said the right thing but I do have something wrong here a times G B times I C times K this should be a K right here okay I said I are well I thought maybe I at least said the but it's fine get a little bit wrong I'll get lots of nice comments about that okay so now I need to implement the code for this I think I can do this do I need to think about this and try it first all right let's just do this okay let me just okay okay so let's now go to our code and try to write an algorithm to do this now once again my plant and I'm in multiply hmm I wonder if I should just let me write a new function and call it a product no let me let me call it and multiply when I want to multiply a matrix by another matrix by definition I want the matrix product in this case so I'm gonna do the same thing I did in the add function which I'm going to check if n is an instance of another matrix do it one way otherwise assume it's a scalar and do it another way and so it's still doing this every time I save hold on pause for a sec yeah okay it's fine now hold on let me do this again so if and I'm gonna do it what sorry I'm gonna do the same thing that I did up here in AD where I'm gonna check is it a matrix or is it a number so if n is an instance of a matrix I want to do the matrix whoops do the matrix product otherwise do this scalar product otherwise scalar product so I need to write the code for the matrix product now what do I need to check first was this right yeah what do I need to check first now first I need to make sure that the number of columns of a is equal to the number of rows of B otherwise I can't do a matrix product so I want to say if n n is B so ends rows so let's say if this dot do we have rows in a variable yeah if this dot rows does not equal n dot columns then return I don't know undefined maybe or null and Mabel add an error console dot log Rose must rows of a must match columns of B so one thing we can do right now let's just even see let's see what happens here let's make sure that this check oh I mean the wrong screen the whole time oh I got the worst I'm the worst that was quite a while ago too okay good news is I'll just do this again let's do a lot of undoing sorry everybody that's me electroshock therapy zeng myself okay a system that would track me is good but I need to be able to override it because I often want to like just reference this and then come right back okay I'm just start this whole thing over I'm gonna make one video tutorial today you know that's that's kind of how it is I do need more than two hours to really get a lot done it seems like in these video tutorials maybe I could just instead of doing the feedforward part like do some other coding challenge or something okay okay so let's try to implement the math for this so where I'm gonna do this is in the multiply function and I had written that before to do scalar multiplication and I'm gonna do the same thing I did an ad where I'm gonna check what is the thing coming in is it a matrix or is it a scalar or etc so I'm not going to bother with the Hadamard product I'll add that into this matrix library if I ever need it but I'm just gonna check is N and instance of a matrix if that's so then I want to do matrix product otherwise I want to do scalar product okay so now I need to write the code for the matrix product right there but first I must check are the columns of a equal to the rows of B otherwise I cannot perform the matrix product at all so I'm gonna come over here and I'm gonna say if I mean the right screen yes if the a is this matrix object if this dot rows know if it stud columns does not equal and rows I kind of don't like this is called n here but whatever this then and I'll use this more strict equals here then ID to return like undefined or something like just get out of here this is no good and I'm going to console dot log columns of a must match rows of B columns now I could be more thoughtful and I can use a trycatch and some error handling but I'm just going to do this for right now just to be some and let's actually make sure this works so if I go back to loading that code and I said something like a is a matrix that is three by three and B is a matrix that is five by ten if I say a multiply B I get undefined and it says columns of a must match rows of B so that's working and I could just say B is a matrix of five by sorry three by three also then they match and I'm say a multiply B I still get under firing because I have done it yet but I don't get that error message okay so now I need to create a new matrix so I'm just say the result is a new matrix that has the number of what did I say it has the number of rows of a and the number of columns of B so it has the number of rows of a and the number of columns of B come on Adam keeps wanting me to put my password in okay all right so that's good now I need to do each spot so for each row whoops for each row and for each column I need to do the dot product of values in column oh my goodness this is so simple it's kind of simple when you look at it this way right I need the values of I need the dot product of the vector of the values in all of row J time out time out out to think about this people tell you oh whoops first of all I have an error before I can do this I have an error here and what I want is if I'm at 00 I want all of the values I want to do the sum of all of the values well so I want of a bro okay so of I console dot error makes an error message that's good Oh an OBS plugin to check for movement oh that's interesting I need three nested loops I know I've just heard it my brain hurts it got it's like really cold and it like throws slightly on the way here I know I can do this I know so let me just think about this for a second so if I have let's think about this for a second if I'm looping through every row as I so I'm starting here and every column as J and you know the convention might be to have these swaps but whatever that's what I have right now I I need to take from a I need to take every element from row I and molt and multiply it by every element of column I in B column J in B and then add those together and then I have i J okay okay so I need to say in other words let's just do this manually in this case it would be this dot matrix I times and matrix J sorry I I need yeah I need another double nested loop in here right because I'm going to take this and add I plus plus one but staying in J J plus 1 right is this right I plus 2 J plus 2 I mean this isn't I'm making this up because I don't I'm doing this an arbitrary way we don't know what the actual rows this this just goes up depending on the number of rows columns there are all right right so maybe I only need one loop here because I need one loop so what's that know because these could be different yeah k week Mon is telling me in the chat another way of thinking about this is I could say and you know what would might be nice actually one thing that I could do here just at least I think it's gonna help me work this out is I could say let a equal this dot matrix and let B equal n just to have variables called a and B for the two different matrices and this is still the result but in other words what I'm saying is a and this is B so a I K B KJ so so hold on let me with K sum over K so hold on so let me put this here did I get this wrong this is B you is it yes so you know what's wrong about this so let's look now we can get this right here's what I'm doing here I want a I want to be increasing not the row but the column I did it wrong I did it backwards do you guys like watching these videos where I try to figure it out I don't know could I could just get it right the first time could just like start over and get it right but what I'm doing is I'm every column of a which column is I'm actually using yes it's call it's all its row i but I'm iterating over the columns of course of course of course so it is this Jay so this is actually this is what I need so what I should be able to say is result I need another loop for let K equals 0 K is less than and I can use remember I could use a Scala's or B's Rose those have to be the same so I'm going to use AIDS columns yes k plus plus and then I'm first I need to say let sum equals 0 and then I'm going to say sum plus equal a index I k plus B index K J this I think is right and then I have to put that in the result result result i J equals sum so if I was using like some other vector library I could like pull those out then do the dot product but let's see here let's make sure this is right I want to for every element in the results I want to sum the dot product of all of the column spots in a that's K with all of the row spots in B and then I've got the result and line 50 so I've seen deep space in the chat says lying 57 oh yes sorry this needs to be multiplied so these get multiplied I'm summing the product of all those yes and of course there are much faster ways I'm not looking for any any efficiency here I'm just trying to understand the algorithm and make sure I have something that works okay so now I need one more curly bracket and I think if i zoom back out here I think I am done this is the algorithm right I have a new matrix that has that is of the size of and this I should do this down here the size of a's rose and bees columns then i go through it and i do the dot product of a vector from of a row of a and a column of b store that result okay and bi yes here's another mistake b equals n dot matrix right because the actual twodimensional array is stored in a variable called matrix it's not it's not the it's the the object itself has the data inside a variable okay so how are we gonna test this well let's look at let's look at hmm did that make a weird sound i just put my hand on the microphone let's create a known scenario actually let's not okay let's yes alright so here's what we're gonna do I'm gonna say and I got a remember let a equals a new matrix and I'm gonna use though these dimensions it's two by three Oh a has already been declared so I'll just keep using bar so new matrix let me just refresh the page clear oops I'm doing scratch all that let let a equal a new new matrix that's two by three excellent let B equal a new matrix that is what I'm gonna do three by two that's what I did in my example three by two then I'm gonna say a dot randomized B dot randomized you know what I should do all this just in the sketch itself I know why I'm doing this in the console so I'm gonna sit let me do this in the sketch I actually have a sketch here so I'm gonna in that's a p5 sketch and they not didn't use anything about p5 I'm gonna have a be a new matrix that's 3 by 2 sorry 2 by 3 I'm going to say the same for B which is 3 by 2 then I'm going to say a a dot randomized B dot randomized console.log a dot matrix and console dot log and not dot log table B dot matrix so let's take a look at that okay so now I have to make two matrices this is one and they would random values in them now let's now let's say a C equals a multiply B console dot table C ready everybody ready ready ready I so people are born me be able to reproduce the results so let me just do random seed one so by the way random seed is a function in p5 that'll seed the random numbers so I should every time i refresh this page oh that did not work oh what am i using for random values in my library Oh cuz right because I don't want this to depend on p5 so I seeded it whatever what it's fine I will worry about seeding it later ok now so I'm gonna get different random numbers each time but we'll see all right let's see so now I'm gonna say let C equal a dot multiply B oh I didn't get anything there oh oh I didn't console.log it oh man console table C dot matrix oh I forgot about that part okay here we go again shoot all right so what's this error sketch that Jess line eleven cannot did Isis forget to return it I forgot to return it didn't I okay you know what would be nice is that the end of this I said return results and this actually goes where here right I got a return how to return that result all right let's try this again no I forgot hit save alright let's see what's going I'm gonna stop doing it stupid sound effect is apparently I'm doing a terrible job at this let's just are we even here this is everybody's favorite debugging here uhoh I'm being told breaking news breaking news the return is in this for loop that's not good oh right because this just the return was in the for loop that's terrible and this says results and it should say results okay I'm feeling a little bit a little bit more confident now what what what turn results mmm sketch dot eleven its console logging something but nothing is there oh no but yeah I know there's an issue with hold on Oh debug this for a second here oh my goodness I'm completely losing my mind here so it's very important to realize that result is the matrix object ah the matrix object has this array called matrix which actually stores the values and there's no like set function or anything so what I actually really need to put here is result dot matrix right equals this result dot matrix equals oh no and then return results right so I these values that I'm calculating this probably be like a set function or something like that and I probably should just created a 2d array here and then made a major but whatever this is what it needs to be I think we got it now oh boy okay let me do some console logging in here console.log result and then let me say console.log results here all right so that worked Ruth's a problem here columns and rows are undefined so something is really going wrong here new matrix a dot rows B columns alright let's look at a dot rows undefined line 5000 this is the worst I'm really doing a horror look so I've done something terrible here but hopefully you know you're watching this video it may be this is valuable to you I have really conflated the idea of the 2d array that stores the values with the object and I'm using it in all sorts of terrible ways so let's think about this this is this is this is what I want a is this B is n now I can get the rows and columns but down here I really need to say a dot matrix B dot matrix right and and that goes into the resultant matrix so hopefully this is clear to you the issue let me try to rephrase it again in case it's not there is this idea of a matrix object it has three properties the number of rows the number of columns and the actual 2d array so where I refer to the variable that's the matrix object and I want to actually do something to the data I have to say the name of the object dot matrix and some I'm forgetting to do that in so many different places so what I'm gonna do what I'm gonna look at down here is I think now everything is correct if a and B are the names of the objects I could pull out the rows and columns from a and then I could pull out the values from a dot metrics and B dot matrix and set the values in resultant matrix okay how could I shouldn't be confident I really should not be confident this is a terrible idea but I'm confident okay so we finally got three things if this is a and this is B this is a dot B anybody want a fact check from me for this is it coming the chat I don't I'm gonna pop in a wait now this will get edited out anybody want to fact check these yes Simon I saw your comment about the other functions changing the current matrix not giving a new matrix back that is true and I probably should be more thoughtful about that in the library put small numbers to be easier to check wrong doesn't look right okay let's see all right I'm gonna have to check this myself six times three yeah it definitely does not look right didn't know no that's right six times five is thirty seven times one is seven zero times five is zero thirty seven it's right it's right that's good seven times five is thirty five plus 2 is 37 plus 30 is 67 so those are right and then seven times six times three is eighteen plus seven is twenty five that's right all right I think it's right it's right yay okay we got it everybody thank you thank you these numbers are in fact correct I took a little break there and check they are right I encourage you to pause the video and check them yourself to see if you understand how the library is working one thing that actually could be really useful I don't ever employ tests ever really but I should learn about tests and I should probably do some stuff with tests on this channel so I think I might come back and try to do some tests that would if I ever change the code for this matrix library to ensure that the math still works so maybe someday I'll come back and do that but and now yes there needs to be a lot of tidying up and refactoring I can use these array functions and I'm gonna get to all that but now we're ready the next video I can take this matrix library this matrix class and use it in my neural network class to perform the feedforward rhythm of taking all these inputs multiplying them by weights and getting new outputs which then go into other node they become inputs to a hidden layer of nodes eccentric search I've talked about that in the previous videos and now I'm gonna come back and actually do that I do want to point out something Simon in the chat did mention a good point which is that if you look at all of these functions randomized effects this actual object add effects this actual object I'm doing something's different with matrix multiplication where instead of affecting this actual object I'm creating a new object and returning it so I probably should be more thoughtful maybe use like a static method for that and so maybe I maybe I'll refactor that some actually you know what let's do that right now now I'll refactor that later wait time timeout the reason why I don't want to do that right now I'm not going to do that right now because I haven't talked about static methods oh oh you know we're gonna do some refactoring okay actually so even so I'm gonna do in the next video before I get to the neural network stuff I'm gonna do a little bit of refactoring with this I'm gonna take the multiply function and make it a static method and I'm gonna look at using some advanced array functions like Map Reduce and that sort of thing to just sort of clean up the code a little bit alright thanks everybody and see you in the next future videos oh I need transpose Oh crud well let's do it hold on Matt's gonna give it let me like rerecord the whole end of this video I'm gonna go back to where I mentioned Simon's comments okay Simon in the chat makes a good point where if you look at this class all of these functions randomized add multiply up to multiply they change the object that I'm calling the function on so if I say matrix a I say a dot randomized that matrix object actually changes but in this with this matrix product I'm not actually affecting the object when I say a multiply B I don't change the value of a I create a new a new matrix object and return that value so I probably should refactor the library to do maybe that no matrix product in a slightly different way and I could use something called a static method so I'm like I'll come back maybe in a later video when I refactor this a little bit I want to mention that now but it also reminded me that what I've been told in the chat that later equals never but I sometimes sometimes I do come back I do come back and do the things I say sometimes I also need to transpose a matrix that is another whoops that is another matrix operation that I need I don't know where to put it but I need to transpose you'll see in the neural now in the feedforward algorithm actually don't think that I need this in the feedforward algorithm but when I get to the training step where I see if that neural network made a good or bad guess and try to adjust everything internally to tune it to get a better guess I think that I need to transpose a vector what does it mean to transpose a vector to transpose a vector means to just like rotate it so if I'm correct transposing this vector would turn it to this so I I might have gotten that wrong in which case if you watch the next video I'll correct it and if I got that right in the next video I will implement it okay so stay tuned I'm gonna transpose alright alright Oh what warez is Dow in the chat ASEC I made a matrix library but it was so much more messy is that possible could you possible may get more more messy okay all right did I get that right about transpose I'm gonna do the transpose video now too because I have time it's not a saying vector instead of matrix all right fine what happened what happens when you get older is you start mixing words together maybe that doesn't maybe I'm not you know it seems to be happening more recently okay let me let me let me redo this all right just just ignore me for a second there's one more matrix operation that I need from the neural network stuff I think I don't actually need it for the feedforward so I could come back and do it after that but I do need it for the training aspect when I adjust and tune it based on the with the guesses well I get to all that later the thing that I need is to transpose a matrix so how do I transpose a matrix if I have the matrix a with a certain number of rows and columns start rows and columns the columns become the rows the rows become the columns so transposing this matrix would turn it into this matrix okay so I'm going to quickly in the next video write a function that does exactly that alright alright alright alright wait did I do something wrong again I see I see I see so many people typing am I good am i good I'm waiting for somebody in the pastry group to tell me I'm good Jose says I'm good see I don't some people yes okay thank you all right all right you know what I need to do is I yeah cuz I'm gonna want to return a new all right all right all right Thank You Simon further comment about vectors and transposition okay if anybody can think of a very very short coding challenge so Ricardo there are moderators in the chat actually I think all right here we go okay another matrix math video I I need I mean there's lots more of matrix there's lots more to matrix math and again let me encourage you I will link to in this video's description to check out three blue one brown's youtube channel which is a whole series about linear algebra I'm just kind of implementing the minimum that I need for this neural network example that I want to build in JavaScript so the missing piece and I just talked about at the end of the last video is to transpose a matrix transposing a matrix means take all the rows and make them columns so ABC this row becomes the first column ABC this row becomes the first column D yeah now this is yet another function which requires me twitch which requires me to make a new matrix so I'm not actually taking the matrix it's I mean it could take the matrix and redo it but I think what I'm going to do is make just write this function transpose what I want to do is have a result I guess I'll call it and have that be a new matrix that instead of having write the rows and cop the columns become the rows the rows become the columns so I'm going to say this dot columns this dot rows so I'm crazy that I Adam I think it's because oh it's each of the files hold on just just ignore me for a second I gotta fix this it's driving me way too crazy I'm gonna rewrite this function I know what's going on I copied some code from I have different user logins into the computer and it doesn't think it owns the code so if I go like get info on this file yeah I did it on the folder that's so annoying and it doesn't do it to all the files recursively so I have to say that this file really belongs to processing and processing has read and write and do I really have to do this to all the files was there maybe like a checkbox for like doing everything does anybody know I'll just do them individually because I'm just bear with me I just want Adam to stop yelling at me and now it will stop should change the username decoding train once I called it processing okay okay so I'm gonna write this transpose function and the first thing I need to do is make a new matrix which I will call result again equals a new matrix and it has the number of rows that it used to have columns and it has the number of columns that it used to have rows and I should be able to just say now it should be as easy as it should be as easy as if I was like ever going through the entire matrix and I should be just saying that the results matrix I J equals the and actually I should say the results matrix J I equals the this matrix I J we see this now it's possible I got this backwards but it should be if I'm iterating over all the rows and columns every row column position should become the column row position so I should be able to just say J index I equals the of the new matrix is this matrix I come egg i J that should work so and then I need to say return again return results okay so let's test this out could I really have done this this quickly very unlikely oh why am I saying plus equals should not be plus equals it should just literally be equal and if I go into the sketch that I had and all I need is a so I'm gonna have this random one and then I'm going to say let B equal a dot transpose and then I'm going to say console dot table a and console table B all right let's take a look I'm not accounting for the number of rows and columns differences I think that I am hold on let's take a look probably get this wrong whoops and of course I need to consult the actual matrix object to see it try this again six seven four one zero nine six one seven zero four nine six seven four six seven four one zero nine one zero nine all right I think we got transposed correct so that's great so we did this we're done we're done with the matrix math videos and it's the next one that will the next thing I need to do is actually start thinking about how does this feedforward algorithm work if I were to write a feedforward function and I were to give it some input by word you feed some input how do I ultimately return some guests so this is where lots of matrix math needs to happen so again if you're interested I'm also going to link to three blue one Browns video what is a neural network it's an excellent animated explanation of a lot of the things that I covered in the earlier videos in this playlist but what I'm going to do is try to write the code for the neural network right here once we have that done I think I'm going to just try doing a couple tests like I'm gonna solve a problem called XOR which is a really simple problem and I'm also gonna look at the EM NIST data set which is kind of like the hello world of machine learning with this neural network and then then with the idea of just seeing if it works so that I can then once I know that it works I do some more creative stuff with it okay so thanks everybody and see you in the next video okay all right it's after 400 and I think I have to go unfortunately but I will be back next Friday and I will get to the next part next Friday which will be starting to build this out and I would say that hopefully it'll go faster but probably well but we're gonna get to all this stuff let me just check my messages see if I got any important message while I see if you guys have any questions all right no okay so yeah I know I could do what's a what's a coding challenge I could do before I go I can't do Tetris I could think of something like really simple let's look let's look let's see if I can make it what were the ones that I was looking at rainbow that I thought were possible and then I want to see the ones the ones that I thought were possible I assigned to myself no no Koch snowflake true no Langton Zant no none of these are very simple double pendulum weirdly no need something simpler mmm simple sound pinball the oven we had for rotating oh oh there were some things that I feel like I had some Corrections from dragon curve yeah looking at looking at all these suggestions Langton Zant really isn't that hard right I already have the the the game of life one okay all right squares on a plane are colored variously either black or white we arbitrarily identify one square as the aunt and can travel in any of four cardinal directions at each step it takes the aunt moves according to the rules below and a white square turn 90 degrees right flip the color of the square move forward one unit the black square turn I degrees left with the coach camera all right all right all right all right we can do this we can do this we can do this all right we're gonna do Lankans aunt as the coding challenge for this week um and I say have to leave it for I really meant 430 because I always never gonna take a little longer but I really have to leave at 430 you know 445 the very very latest we just we just send a message here just don't mind me I'm wasting time that I don't have but all right let's I'm gonna do something here which is I want to find my game of life code here it is and I'm going to copy it to the desktop and I'm going to call it lenghtens ant and then I'm going to in terminal actually never programmed this before let's open it up and whoops what's going on here oh my goodness I have some nonsense code because I was explaining something okay great so I should be able to use this structure for Langton Zandt so I'm gonna allow myself do you we all think this is okay there is so much similar here that is this okay to start my coding challenge with this same make 2d array function these variables that talk about the grid initializing the grids to zero and just drawing the grid a one is white are we ok with this start from scratch people really think how interesting interesting I will start from scratch if that's what people think me I am Samia is saying that's sensible it's just I'm gonna end up programming exactly this again vote and people could just you know this is like part two and what alright I'll give it a couple minutes to vote I'm gonna do a poll in both I'm just curious to be scientific about this now a lot of people are telling me scratch can I at least keep this make 2d array function how about at least keep that I think I should at least keep that people want me to time this as well all right yeah I'm going to I'm gonna at least use that make 2d array function cuz I don't know I'm gonna allow myself that and all right hold on whoops look I'm wasting all this time that I could just be doing this with trying to make a poll in here pixels as squares would be fairly neat wait wait I'm getting some interesting suggestions so I mean do it as a pixel by pixel level make it in processing that's a good idea I should just do this in processing yeah let me do this in processing because it's so similar at least we could see something kinda that's a great idea that answers that solves lots of problems it solves the problem of doing it whether I should do it from scratch or not and it also solves the problem of of people who keep saying will you do more challenges in processing yes and that this will be a lot faster to do it on the pixel level I'll do it on the pixel level okay we're gonna do it on the pixel level in processing from scratch and we'll make a JavaScript version we'll port the code don't worry Oh lenghtens ant okay okay all right here we go you're saying openFrameworks yeah you guys are gonna have to do it redo it openFrameworks yourself somebody I'll have a guest do some openFrameworks tutorials I keep you need to make that happen okay whoops all right what's this thing here that's the Bell visible slightly visible okay so let me close all this stuff click this click this click this and we're gonna do lenghtens ant oh uh oops yeah replace it alright Oh checkboxes that's a great idea okay somebody posted that nice antimage I don't know that I don't have time to use that but but thank you cuz I don't do it pixelbypixel anyway alright here we go I'm moderating the chat oh yeah I like this okay here we are a coding challenge for this coding challenge I'm gonna do in processing and it's cool I'm going to attempt to implement this thing called Langton Zant now one thing I might recommend is go back and watch my game of life coding challenge because there's gonna be a lot of similarities between these two this is an example of another cellular automata system however I'm gonna do this one in processing so we just sort of see a different environment I will of course make a port to JavaScript so if you make your own variation of this and want to share it on the web you can look at the p5.js version of this so what do I need what I need with this first cellular automata system just like it is it otama taw is it at um I could never get this right I need to have a two dimensional array and this is actually a place where I'm kind of happy that I'm using Java in processing where I can say I can make this grid a new two dimensional array and you know what though guess what I'm gonna do I'm gonna have every cell be an individual pixel because processing is pretty fast I could do individual pixel setting so let's instead of having like a grid of squares that are larger size I'm actually do it on the pixel by pixel level let's see how that goes so let's just decide in advance actually I don't need to decide in advance I'm going to create I'm gonna have a window that's let's just do like 200 bytes 400 by 400 to start and then so the array is going to be a new array of integers which the same nonresponse width and height and it's actually going to just fill that whole thing with zeros so I don't actually even need in Java if I was doing this in JavaScript I've got to like fill it with zeros but I could just a good just assume that it's filling it with zeros great now wish really learn what license it is let's go take a look so it's a it's a system souther automatic system that will produce interesting patterns and I need to follow these rules okay so squares on a plane or colored variously either black or white so we'll say white if the aunt hasn't hasn't been there that'll be oh well I guess zero it's black white is one I don't know we'll figure that out we arbitrarily identify one square as the aunt so let's start that let's have the aunts location we're just going to call that we're gonna have that just be x and y and the aunt is gonna start at 200 200 okay that's where the aunt's gonna start I probably should say with divided by 2 whatever so I'm going to say grid X y equals 1 that's where the aunt is and actually to be honest with you maybe I should have that be the value 2 so I can have 0 4 but let's let's keep going here so the aunt moves according to the role rules below at a white square it turns 90 degrees white right okay so actually what I want to do is each time and let's make a background of white I need to figure out what is the state of the current spot where the aunt is right so this is the state of the current spot where the antis so if the aunt we can look at these rules if the aunt is at a white square okay and then we need to keep track of its direction which way is it moving so I also need a direction and let's just be let's do something goofy and do like these I think you're supposed to like it kind of make constancy maybe you say final or something but I'm just gonna call them cap I'm gonna say like up oh that's a reserved word in in in processing aunt up is 1 2 0 and is one and right is to this might be really silly the way that I'm doing this ant left is three so I'm gonna make up some constants that keep track of the direction and I need a variable called ant direction and I can just call that direction so I have I already have that I have the ants XY location and its direction it's probably a nicer way of doing that but I'm gonna keep going with what I have its direction I was going to start by going up that's its direction so now if add a white oh you know what I should have those in clockwise order because then I could just add one is adding one is turning right subtracting one is turning left so this should actually be up is zero right is two is one down is two and left is three so if the state is white and I'll have white be one no white should be zero because they're all starting a zero because I'm filling it with white so if the state is zero then the ant should turn right time's it if if the state is white if it's zero the ant should turn right meaning ant so just direction plus plus and I'm gonna what I'm actually going to do is I'm going to almost in a silly way write a separate function for turning right because I can I need to deal with like so this is ant this is Direction plus plus but if Direction E is greater than ant left then Direction equals ant up right so I could use modulus but I'm just gonna be sort of silly about this you can all do your nice refactoring and I'm gonna say and if it's less than ant up it's ant left so this will account for when 0 goes to negative 1 it should be 3 when 3 goes to 4 it should be 0 and again I could have done this all on one line of code with modulus but that's fine so if state is zero turn right and then what's the next thing flip the color of the square and move forward one unit okay so then state grid X Y should now be one right that's flipping and move and then move forward needs to be a function so I'm now going to write a function called move forward which is if Direction is up then Y minus again I could use a switch statement a case statement all that if Direction is right I could do this with all sorts of fancier ways Ales if but I'm just gonna really try to I'm gonna really try to be longwinded about this to understand it if it's down y plus plus else if direction is left then left is X minus minus then I need to account for the edges so if X is greater than width then X equals 0 if X is else if X is less than 0 then x equals with minus 1 and again I could use modulus but I'm just gonna be super longwinded about this and I'm gonna do this for Y and I'm gonna change that to height and put Y in here and here we go okay so now I have this crazy long function a crazy long function for moving forward it should change the x and y value based on its current direction and it should wrap around the edges okay so now move forward okay else if what what could the other if it's the state is already one if there's really only one other possibility but I'll be I'll check else if state is one turn left turn left change the state to zero and then move forward I think we're done let's just run this it's not gonna draw anything but let's just run this and see if we get any errors I usually don't like to write so much code without running at first okay it's running but let's now see now all I need to do is visualize this grid and I should have probably made this the pixels are in a one dimensional array but I'm now going to loop through and I is every X column I plus plus J is every why I don't want to use X&Y because I already use those for the ants and then and I could actually you know what I really could be so efficient about this because I could make this is very silly I could make an image I only have to change one pixel each frame it's really silly for me to so let's do this I can't bear I mean let's do it this way first but I am gonna refactor this because this is really ridiculous what I'm about to do so the pixel location is I times width plus J and this is a formula that I have used in countless videos and I'm gonna call this pics for pixel so the actual pixel location in the window is all the pixel colors are stored in a 1 dimensional array and so I but I'm gonna operate on those pixels I need to say load pixels and I also need to say update pixels so I will refer you to my video tutorials about pixels in processing they'll be a if this is not infinite to you I'll I'll link to those tutorials but basically what I need to do now is just say pixels index pix equals something like if I say color random 255 what you're gonna see here is whoops when I run this sketch is every pixel is a random color now what I want to do is I want to say if grid I J equals 0 then set that pixel to white otherwise if it's equal to 1 but that's the only other possibility set that pixel to black and we should see this is just rendering the results of Langston's ant with each and every pixel as a cell in the grid so let's run this and we could kind of zoom in and see is this the correct pattern can anyone confirm or deny for me that this is the correct pattern let's see if it looks kind of like so this is what it should look like after 11,000 steps all right let's stop this and I'm gonna do something I'm gonna say I'm actually just going to do this all at once I'm going to say for int N equals zero and is less than 11thousand n plus plus I just want to know that I did this correctly I'm going to just run through the whole algorithm 11,000 times then I'm gonna render it and I'm gonna say no loop so it's only gonna do it once okay so this is instead of watching it animate that looks pretty good right that looks exactly like hopefully dad yeah I can verify that these well it's flipped but that's fine because why is up what you could you could flip it if you want I flipped it fine okay great so that is working we're done yeah but this is this is making me crazy because I've only changed one pixel every frame so I can't bear to leave it this way I'm gonna do one there's so much refactoring of this that you could do and actually I'm gonna leave that in here because one thing but just having this in here by the way and taking out the no loop like this is this I can make it appear to run much faster like this is doing five five five cycles per frame of animation so to make this more clear what if I did 100 cycles per frame of animation whoops you can see that this is happening much faster now whoa oh whoops we have an error array out of bounds exception okay where did I not what did I not do correctly uh if it's greater than with minus 1 greater than height minus 1 okay good thing I checked that let's try this again yeah there we go so we're gonna get some pretty crazy patterns after a while and I'm sure you could be clever and think about like modifying the rules to use color made you get of multiple states so this is actually running super fast because processing can really handle doing it at this resolution but you know we could ask like what if I do this at like 1200 by 800 like ooh so we also had an error if it's not a square so I have to fix that mmm wait hold on let's 120 by 80 is that the error yep and 8 somewhere I have a mistake in my code what if I do at 80 by 120 yeah so where if oh no cuz hold on width / 2 height divided by 2 Oh though that's fine and 120 by 80 that worked no so i times width plus J oh my goodness I have this totally wrong had for me worked that's why I was on it sighs I had this formula wrong the whole time ah I referenced my tutorials and everything I just did it really quickly that formula was wrong I need to look at the row I mean sorry the column and then add to it the row times the width well glad I checked so now this is right so let's what I want to show you is what happens if I go to like 1200 by 800 which is probably beyond the Wow so you know processing it really is not having a problem doing this superfast but I could make this much more efficient so one way that I'm going to do that is I'm going to make a P image and I'm gonna call that ant and I'm gonna say ant equals create image width height RGB so I want an RGB image and I want that to be white to start with so there's probably a way for me to do this more efficiently but I'm just going to set every pixel of that image to white so so I'm gonna set every pixel to white and I'm gonna say aunt dot load pixels and update pixels and then I'm going to instead of doing all this I'm just gonna draw that image so that's me drawing the image now the only thing I need to do is change whatever changed the state here so what I need to do is like I need to do it though before I move forward but we're always going to move forward right so that move forward doesn't actually have to be in there it can be down here and I can now find that pixel location as X plus y times ant dot width right that's the pixel location in that image and now if I say ant I might not even need the load pixels what I'm gonna put it in here anything aunt dot pixels and you know what I could just use set because I'm just doing one pixel at a time set will inturn the set function internally calls load pixels and update pixels for you so I can just say ant set the XY to the color and so I'm gonna say if if grid X y equals zero then the then the colour should be black so we're gonna assume the color is white and we're going to make a color we're going to assume the color is white if it's zero we're gonna set to black and then we're going to set that pixel so this is me just doing that one pixel at a time cuz I only change one pixel per per frame or per cycle here I'm actually doing 100 and you can see this is the same exact thing did I do that work correctly let's let's go back to let's let me just see here I think I might have a slight issue let's double check let's go let's double check that this is right by resetting this back to 400 by 400 doing this 11,000 times and then saying no and let's see here did I get is this location correct let's see now let's take a look at that as compared to the Wikipedia again I'm doing like a mirror image of it but yeah that looks right so I think it's right so now we could let it run again the same way like let's do like we could probably do like five hundred perfect the thing is that fact that I'm doing five hundred so really if I want it I should really be smart about this and say aunt load pixels to be the most optimized I shouldn't use set and I should say aunt low pixels and update pixels at the end of all of this and then I should say the location is X plus y times aunt ton dot width and I should say aunt dot pixels that picks location is that color so this would actually be the most optimized so I'm only calling up little pixel an update pixels once only changing the pixels that need to be changed and then I should be able to do this and what did I miss oh I have no loop in here still I should be able to do this at very high resolutions really fast so for example I can change this now to full screen and run it and it should have no problem doing this super fast so let's let this run for a little while I'll be back in a minute or two this will be it and you'll see me again after this ran for a while the if condition is backwards could be all right so hold on maybe I'm having some errors so while this is running let me look at the code so what's wrong possibly here oh if it's zero its oh it should be if it's one oh I'm back from you waiting because I think I got this wrong it should be black if it's one so hold on a sec let's run this again there we go and again this is going to run for a while and then I'll be back to see what the pattern is the in a minute okay I think I got it right right now is it right me I am so me we got to wait a while before it actually finds itself and this is by the way not part of the design ah there we go we're getting something now what time is it all right oh there's a number file video so I should reference that one okay okay so this is what it got you can sort of I can sort of zoom in here and see like what sort of interesting beautiful patterns are here someone in the chat told me there's a number file video about Langston's ant which you can get more of the background the history of it and the possibilities I would encourage you here's some things you could do you could refactor my code to make it more efficient you could think about how would you make this have color in an interesting way maybe maybe the grid isn't is it just pixels maybe it's not even just squares maybe it's a grid of interesting shapes or patterns you use color in some way what kind of beautiful thing can you make from lenghtens and and if you want to make this run on the web take a look I'll also create a JavaScript version of this but again if I think if you want to get this sort of like fullscreen speed of it you're probably gonna want to do it in processing so thanks everybody and see you soon just in case let me make I'm gonna make an intro in case Macchio wants to use this hello you're about to see a coding challenge where I produce this Langston's and I'm using processing which you can get at processing org it's a Java based programming development environment and library which you could find other videos where I talk about it some more but I thought I would mention that since I've been using javascript and almost everything but I also will make a JavaScript version that I will post and I also should mention if you want to learn more about Langston's aunt before you watch me do the code for it I'll link to a number file video all about it as well in the description ok thanks and enjoy the challenge okay so in case it's useful to use that when it gets edited together I'll have Matt to use that okay everybody I have got to go I think we did a good job today of getting a little bit through yeah this will make a nice thumbnail too so yeah I'm gonna keep letting it run I'll see if there's any questions I mean one thing I should do is just I could really really increase the speed do you guys mind cuz I really have to go I want to just increase the speed oh yeah you should increase try it yeah yeah so you should try all these things but I just want for my own sake to just have it run like I think I could do ten thousand no problem yeah see how fast this is like let's do I mean we could do a hundred thousand pixels no problem each frame yeah so there we go that's a hundred thousand pixels each frame it just looks like noise to me but is there a pattern in there I'm in the hello YouTube compression okay I gotta go everybody thank you for tuning in I should read a couple random numbers before I go because maybe some of you are at a place where it's your bedtime you want to lie down curl up get cozy with a blanket it's cold outside light the fire two thousand eight hundred eighty nine sixty nine thousand six hundred eighteen seventy two thousand four hundred seventy five seventeen thousand seven hundred sixty eight sixty two thousand eighty eight forty nine thousand seven hundred thirty seven forty four thousand eight hundred seventy three seventy nine thousand one hundred ten three thousand to try to you thought it was done twenty 1175 1450 thirty six thousand five hundred twelve we should have this in the background sixtyfive thousand seven hundred thirty seven thirty thousand five hundred seventyone 69 thousand three hundred eighteen eighty five thousand eighty four twenty seven thousand nine hundred twentyfive ninety seven thousand five hundred and thirty eight thank you everybody for tuning in tuning in to this week's Kodi train I'll be back next Friday I will continue the neural network stuff I'll be doing the feedforward algorithm if there's time I'll be doing the backpropagation algorithm and solving one or two simple problems and I'm gonna just and then I'll be refactoring using deep learning j/s all that stuff I'll get to it when I get to it so thanks everybody and if you're interested in that book you could go to amazon.com slash shop slash the coding train and get your very own copy of a million random digits with 100,000 normals deviance unfortunately it's a reprint if anybody knows where I can get original copy million random digits like I would love to get an original copy not the reprint does it exist anywhere I don't know so maybe on ebay or something if anybody finds one tweeted at me and my new year's eve was excellent bye bye bye good night England just looking at the chat for a few last things this is my goodbye song I will let that stick around so I'll look and answer any questions for two and a half minutes Arduino programming um I don't do a lot of Arduino programming but there is if you go to ITP program where I teach has amazing Arduino and physical computing resources if you go to ITP NYU edu slash fist comp which is this URL right here and go to under videos I mean first of all there's tons of non video tutorial information but since we're here in the world of videos there in this album I think so these are an incredible resource of videos doing all sorts of physical computing stuff made by Jeff Patterson and Tom I go and you can see with guests like Benjamin light and so I highly recommend you check these out maybe I can get some physical computing folks to be a guest sometime Alka asked I have an echo dot now are you still doing the Lexus stuff I would like to do it I didn't get to was on my list for the fall doing a Lexus kill a bunch of tutorials doing it so I right now my priority is those neural network examples but Alki would like to come back to that if I can shaders I would like to get to that as well a computer vision with open CV ah there is a wonderful book that just came out Brian Chung Amazon oh I should put this OpenCV I need to put this on the page this book I have a copy of it um yeah I have a copy of it am I logged in as myself I'm never gonna be all login as myself and add it to my anyway I need to add that to the page somebody will treat me and remind me to do that I need to add Brian Chung's book it's wonderful and I keep meeting ready to Amazon review for it C sharp water my new year's resolutions are cook more I'd like to cook a living in New York ordered a lot of delivery and eat out a lot I want to cook more that was my main New Year's resolution and well I ever turned myself into a cyborg well I do have a large amount of titanium in my arm right now there's a quite obviously a screw right here and a metal plate you can feel right here so I'm part cyborg I think already processing in Python mode I would like to look at that as well I'm not really that much of a Python programmer how many years when you started programming I started programming at the 8th I mean I did the quick answer of this is I did do some programming in middle school I did a semi language in basic and in elementary school this would have been in the 80s but then I didn't actually program again route at all until I think I was 28 or 29 a whole bunch of years ago so I and I learned at this program called ITP where I teach and I so that we have an undergraduate program and a graduate program here interactive media arts interactive telecommunications program I usually include links to those in the video descriptions of your interested as well ok so yes I should start a whole new YouTube channel look I was thinking the other thing anybody interested in a gaming channel I a Nintendo switch arrived and I've been I've been kind of getting a little and I'm not really addicted to it but I've been playing a lot of Let's Dance anybody play I could do practically do everything to another one I could do the entire dance routine to another one bites the dust but I will get a copyright violation if I play it here so off to anyway now I've been learning some new moves like it's like this is one of them from if anyone's ever played less let's dance on the Nintendo okay see you guys I get an endless stream now I'll see you next Friday thanks for thanks for tuning in anybody wants to trade intend to switch games I'm looking for alright wants to sell me some used ones at a low price I'm looking for Odyssey I need to get the ones I want able to get arms Zelda Super Mario Odyssey those are on my list I'll just get them off I can't bear to pay full price for these games so I'm gonna start looking on eBay ok where do I hit stop streaming there it is okay the buyer
