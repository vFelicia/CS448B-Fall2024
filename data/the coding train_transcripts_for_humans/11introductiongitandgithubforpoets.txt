With timestamps:

00:00 - - Hello and welcome to
Git and GitHub for poets.
00:03 - This is a tutorial series
that I am beginning today
00:05 - and the whole point of
this tutorial series
00:08 - is to explain what is Git, what is GitHub,
00:11 - how do you use them.
00:12 - Let me say something really
important from the outright.
00:15 - You don't need to know
anything about programming
00:17 - or code whatsoever to
follow this tutorial.
00:19 - Git and GitHub are tools generally used
00:22 - by software developers, creative coders,
00:24 - and eventually as I get
through more and more
00:26 - videos about getting GitHub,
00:28 - we'll start getting and
looking at code repository
00:31 - but right now, that doesn't matter.
00:32 - What I want to do is put a poem on GitHub
00:34 - and I want to see what happens
when you take a poem on GitHub
00:37 - and why is that powerful and why would
00:39 - that be something exciting to learn about.
00:40 - I hope that people will watch this
00:42 - who want to use Git and
GitHub for creative ways
00:44 - that might not even necessarily,
00:45 - for collaboration and creativity,
00:47 - that might not necessarily have
00:48 - anything to do with programming.
00:49 - We're going to start from total scratch.
00:52 - First of all, why do these things exist?
00:55 - I'm going to come over
here to my computer screen
00:57 - and I've been working very
hard on a poem about rainbows.
01:00 - It's a terrible poem.
01:02 - I don't know if I can show you it.
01:03 - I don't even want to show it to you.
01:05 - Has this ever happened to you?
01:07 - Did you write a poem and then you
01:08 - made some revisions and
saved it under file_one
01:11 - and then you save another file_two
01:12 - then you called it final but then
01:13 - you wanted to revise it again
so you call it final revise,
01:16 - but then it was really the final?
01:17 - You see the point.
01:18 - Often what happens is
you're working on something,
01:21 - a poem, an essay, an image,
a design, a piece of code,
01:26 - and you have versions of those over time
01:28 - and you want to save a previous one.
01:30 - The history of what you're
making is important.
01:33 - This is primarily the first thing
01:37 - about what Git is that is why Git exists,
01:40 - for something called version control.
01:44 - Rather than you, the creator,
01:47 - having to keep track of separate files
01:49 - and history yourself manually,
01:51 - Git is a piece of software
that does that for you.
01:54 - It keeps track of the entire history
01:57 - of things that you're
working on on the computer.
02:02 - It's not just for you.
02:03 - This is very powerful on its own,
02:06 - but there's something more to what Git has
02:08 - and with a lot of features that Git has.
02:10 - What I would say the other
thing that's really key here,
02:13 - and I don't know why I'm putting
02:14 - quotes here but, collaboration.
02:18 - To be honest,
02:20 - you can do a lot of
what we're talking about
02:22 - with things like Dropbox or Google Docs
02:24 - or all sorts of other tools that
02:26 - allow you to keep track
of the history of a file
02:29 - or even have multiple people
work on the same file,
02:32 - but Git is a particularly special tool
02:34 - which has a lot of advanced and
02:36 - sophisticated features for collaboration.
02:39 - In particular, it doesn't
have a problem with
02:41 - two people working on the
same document at the same time
02:44 - and there's lots of ways of managing that
02:46 - which I'll get into as I get
further and further along.
02:49 - This is what I want you to think about.
02:51 - This is system that you can use to
02:53 - keep track of the history of a project
02:56 - as well as allow many people to
02:57 - collaborate on the project together.
03:00 - That's the first point I want
to make which hopefully is good.
03:05 - Let's move on here for a second.
03:07 - I need to make a really
important distinction.
03:12 - What is Git and what is GitHub?
03:15 - Let's write Git over here and
let's write GitHub over here.
03:23 - This tutorial is going to
live somewhere in the middle.
03:29 - I'm going to kind of start with
just only showing you GitHub,
03:31 - and eventually later I'm going to only
03:34 - show you how to do stuff only with Git.
03:36 - Right now, I want to live
in this strange place
03:38 - that's in the center.
03:40 - Why?
03:41 - Git is the actual
version control software.
03:48 - This is the actual application.
03:50 - It was invented by that
guy who invested Linux.
03:54 - His name and a link to it will
03:56 - be somewhere in the description.
03:57 - It has another story
about why it has a name,
03:59 - why it's called Git.
04:01 - You can look that up on Wikipedia.
04:03 - Git is just version control software.
04:05 - There are countless examples historically
04:07 - of other version control software.
04:08 - This is a particularly popular one.
04:10 - You can run this on your laptop,
04:11 - you can run this on anywhere you want.
04:14 - GitHub, I'm going to call it
a web cider, a web service.
04:22 - GitHub is a web service where you can
04:24 - sign up and have an account and
04:27 - do stuff, do Git things,
on a server, on a website.
04:32 - GitHub kind of runs the Git
software behind the scenes.
04:36 - Some people call it social coding.
04:37 - In a way, it's like a
social network for projects
04:41 - that are managed through Git.
04:45 - The reason why we're
living in the middle here
04:47 - is I want to show you how to use GitHub
04:50 - to do all the things that Git does,
04:52 - but it should be really
important to realize
04:55 - that these are two
completely different things.
04:57 - Git itself is the application.
04:59 - You could spend you
life being a Git person
05:03 - and never ever go to the GitHub website.
05:06 - Interestingly, you can
also spend all of your time
05:08 - on the GitHub website and never actually
05:10 - run Git anywhere else.
05:11 - I want to live here in the middle.
05:14 - I want you to start by using Git
05:17 - and learning the Git concepts
through the GitHub interface,
05:20 - and later see how those concepts
05:21 - translate locally to your own computer.
05:23 - I said that way too many times,
05:25 - but I'm trying to set
the stage for myself.
05:27 - You can skip ahead to future videos
05:28 - if you felt the rambling too much.
05:31 - Let's now actually go and get started.
05:35 - Here we are.
05:36 - We are writing a poem about rainbows
05:38 - and this has become a disaster.
05:41 - We're going to go over
to the GitHub website.
05:44 - The one thing that I've done that
05:46 - I'm not doing in this video tutorial
05:48 - is I already signed up
for a GitHub account,
05:50 - a brand new GitHub account.
05:52 - My username is RainbowCoder.
05:54 - You just need a username and an email,
05:56 - you can upload an image,
that sort of thing.
05:58 - Pause this video now and
go sign up for an account
06:00 - or just keep watching,
whatever you want to do.
06:02 - If you haven't done that and you
want to try to do this along.
06:05 - The first thing that I want to do
06:07 - and I'm going to keep track of kind of
06:09 - a list of terms over here.
06:13 - The first term that's important,
06:15 - this is a different pen, let's
try using it, is repository
06:21 - affectionately by me or
also known as a repo.
06:29 - A GitHub repository is
another word for a project.
06:33 - It can have multiple
files associated with it,
06:38 - it's a repository of files.
06:41 - The first thing I want to do is just
06:42 - make a new repository for my poem.
06:46 - New repository.
06:48 - I'm going to call it Rainbow Poem.
06:55 - I'm calling it Rainbow Poem.
06:58 - Notice by the way,
06:59 - it's going to name it for
me automatically with a dash
07:02 - because Git repositories can't
have spaces in their names.
07:06 - This is a repo for my poem.
07:11 - I want this to be public and I also
07:13 - want to check this box right now,
07:15 - initialize this repository with a README.
07:18 - A README is a special kind of file
07:20 - that goes in your repository that says,
07:23 - this repository is a repository
for poems about rainbows.
07:28 - I'm just going to check that 'cause it's
07:29 - going to make it a little bit
easier for me to work with it.
07:31 - Then I'm going to hit this
green button over here
07:33 - to create that repository.
07:36 - Now you can see, look at this,
07:37 - I have my GitHub repository.
07:40 - This you can see is the README file.
07:42 - It made one by default right over here.
07:45 - This is it.
07:46 - I've now made a repository,
07:47 - a place where we can have files.
07:49 - What kind of file do I want to work with?
07:50 - I'm a writer, I'm a poet,
07:52 - a really terrible one, not actually.
07:55 - What I want to do is create a new file.
07:57 - I want to put a new file in my repository.
08:00 - This is the file that
I'm going to work on.
08:02 - I can have many files, but I'm
going to start with just one.
08:04 - I'm going to create new file and I'm
08:06 - going to name my file apoem.txt.
08:09 - There are lots of different file formats
08:11 - that Git and GitHub can keep
track for you, anything,
08:15 - but I'm going to work with
just a plain raw text file.
08:20 - I'm going to scroll down
and now look at this.
08:23 - This is where I name the file.
08:25 - I'm going to write my poem.
08:28 - I'm going to write my poem
down here, The Rainbow.
08:31 - Purple, pink, orange, blue, red,
08:36 - these are the colors of the rainbow.
08:42 - That's the end of my poem.
08:44 - I wrote my poem and now I'm going to
08:45 - scroll down and you might think,
now I'm going to hit save,
08:48 - but notice here.
08:50 - Look at this.
08:52 - Commit new file.
08:54 - This is another key term
in our list of terms.
08:59 - Repository is the repository of stuff,
09:02 - commit, you can think of this as a save.
09:10 - A commit is I'm going to change
the file and make a commit.
09:13 - I'm committed to this.
09:15 - Very committed to making this tutorial.
09:17 - There's all sorts of stuff about
09:19 - commit directly to the master
branch or create a new branch.
09:22 - Branching is going to be
the topic of my next video
09:24 - which is going to be exciting
I hope, but right now,
09:27 - all I want to do is press commit new file.
09:30 - I press that.
09:31 - I'm going to zoom back
out and you can see now,
09:33 - here are the files in my repository,
09:35 - the README file and the poem.
09:37 - I'm going to click on poem and we can see,
09:40 - there it is, there's my
poem, here's the file.
09:43 - Let's say I wanted to make
a change to this file.
09:46 - I've decided that it's
missing the color green.
09:54 - This little icon over
here is the edit button.
09:59 - I can use that button to edit this file.
10:01 - I'm going to click edit.
10:05 - You can't see.
10:06 - I'm doing a terrible job of managing
10:08 - where the stuff is here.
10:09 - I'm going to add right now the line green.
10:13 - I added this, I'm editing my poem,
10:16 - then I'm going to scroll
down and look at this now.
10:19 - Over here under commit
changes, this is the button.
10:23 - All I need to do is press that button
10:24 - and I've made a save.
10:26 - However, each commit, each save,
10:29 - can have a note associated with it,
10:31 - which can sometimes be useful when
10:32 - you're collaborating or even
10:33 - to keep track of things yourself.
10:35 - I'm going to say I am
adding the color green.
10:39 - Then I'm going to just hit commit again
10:42 - and I'm also going to do
this again really quickly
10:47 - and I'm going to add
yellow and I'm going to say
10:52 - adding the color yellow and I'm
going to commit those changes.
10:56 - I've made a bunch of commits.
10:59 - Here we can see the
current version of my poem.
11:07 - What have we done so far?
11:10 - We've made a GitHub repository,
11:12 - we put a single file into it,
11:14 - and we made a few commits on that file.
11:16 - Why is Git and GitHub
exciting and powerful?
11:19 - Because now I can actually
go and view the history.
11:22 - One thing I can do is I can click.
11:27 - I'm looking for somewhere
in this interface
11:31 - where I see the word history.
11:36 - Right here. I don't know
why I couldn't see that.
11:38 - Over here there's a button called history
11:40 - and I'm going to click on that.
11:42 - Look at this.
11:43 - This is now my GitHub history.
11:46 - The first thing I did was create poem.txt,
11:49 - then I added the color green,
11:51 - and then I added the color yellow.
11:53 - Any one of these that I click on,
11:55 - it can actually show me what
was changed at that moment.
11:59 - You can see the line that
was changed is highlighted,
12:02 - plus meaning something was added.
12:05 - It's funny, it was green,
it's also a green color
12:07 - showing you what was added.
12:09 - I can also go back and look and see
12:12 - when I added the color yellow.
12:14 - This is what happened here.
12:15 - There's all sorts of ways.
12:17 - Something kind of goofy is over here.
12:20 - Look at this crazy number.
12:22 - While this looks like the most nonsensical
12:25 - thing that you would ever want to look at
12:27 - and looks sort of terrifying,
12:28 - this strange crazy string
of numbers and characters.
12:32 - This is the commit hash meaning,
12:35 - a unique identifier for
this particular commit.
12:38 - Notice also up here in the browser's URL,
12:43 - rainbow-poem/commit/ that crazy number.
12:47 - You don't ever have to memorize this,
12:49 - you don't ever have to write it down,
12:50 - but this is something that
I want to point out to you
12:52 - 'cause it's going to
come up again and again.
12:55 - I'm going to come over here
and look at commit hash.
13:00 - This is a key concept.
13:01 - Let's review.
13:03 - Git is version control,
13:05 - GitHub is a website where you can do
13:07 - projects that have
version control on them.
13:10 - You can make a repository where you
13:12 - add files to that repository,
13:13 - then you can make changes to
those files by making commits,
13:16 - and those commits allow
you to browse the history
13:19 - and each one of those commits has a
13:20 - unique identifier for it.
13:23 - This really is the basic idea.
13:26 - What I would say now is go and make
13:28 - your own GitHub repository,
write a poem in it,
13:31 - get it going, play around
with the interface,
13:33 - see what happens, and in the next video,
13:35 - I'm going to talk to you
about branches, Git branches.
13:38 - What is a branch and
why might you use them
13:40 - and how do they work on GitHub.

Cleaned transcript:

Hello and welcome to Git and GitHub for poets. This is a tutorial series that I am beginning today and the whole point of this tutorial series is to explain what is Git, what is GitHub, how do you use them. Let me say something really important from the outright. You don't need to know anything about programming or code whatsoever to follow this tutorial. Git and GitHub are tools generally used by software developers, creative coders, and eventually as I get through more and more videos about getting GitHub, we'll start getting and looking at code repository but right now, that doesn't matter. What I want to do is put a poem on GitHub and I want to see what happens when you take a poem on GitHub and why is that powerful and why would that be something exciting to learn about. I hope that people will watch this who want to use Git and GitHub for creative ways that might not even necessarily, for collaboration and creativity, that might not necessarily have anything to do with programming. We're going to start from total scratch. First of all, why do these things exist? I'm going to come over here to my computer screen and I've been working very hard on a poem about rainbows. It's a terrible poem. I don't know if I can show you it. I don't even want to show it to you. Has this ever happened to you? Did you write a poem and then you made some revisions and saved it under file_one and then you save another file_two then you called it final but then you wanted to revise it again so you call it final revise, but then it was really the final? You see the point. Often what happens is you're working on something, a poem, an essay, an image, a design, a piece of code, and you have versions of those over time and you want to save a previous one. The history of what you're making is important. This is primarily the first thing about what Git is that is why Git exists, for something called version control. Rather than you, the creator, having to keep track of separate files and history yourself manually, Git is a piece of software that does that for you. It keeps track of the entire history of things that you're working on on the computer. It's not just for you. This is very powerful on its own, but there's something more to what Git has and with a lot of features that Git has. What I would say the other thing that's really key here, and I don't know why I'm putting quotes here but, collaboration. To be honest, you can do a lot of what we're talking about with things like Dropbox or Google Docs or all sorts of other tools that allow you to keep track of the history of a file or even have multiple people work on the same file, but Git is a particularly special tool which has a lot of advanced and sophisticated features for collaboration. In particular, it doesn't have a problem with two people working on the same document at the same time and there's lots of ways of managing that which I'll get into as I get further and further along. This is what I want you to think about. This is system that you can use to keep track of the history of a project as well as allow many people to collaborate on the project together. That's the first point I want to make which hopefully is good. Let's move on here for a second. I need to make a really important distinction. What is Git and what is GitHub? Let's write Git over here and let's write GitHub over here. This tutorial is going to live somewhere in the middle. I'm going to kind of start with just only showing you GitHub, and eventually later I'm going to only show you how to do stuff only with Git. Right now, I want to live in this strange place that's in the center. Why? Git is the actual version control software. This is the actual application. It was invented by that guy who invested Linux. His name and a link to it will be somewhere in the description. It has another story about why it has a name, why it's called Git. You can look that up on Wikipedia. Git is just version control software. There are countless examples historically of other version control software. This is a particularly popular one. You can run this on your laptop, you can run this on anywhere you want. GitHub, I'm going to call it a web cider, a web service. GitHub is a web service where you can sign up and have an account and do stuff, do Git things, on a server, on a website. GitHub kind of runs the Git software behind the scenes. Some people call it social coding. In a way, it's like a social network for projects that are managed through Git. The reason why we're living in the middle here is I want to show you how to use GitHub to do all the things that Git does, but it should be really important to realize that these are two completely different things. Git itself is the application. You could spend you life being a Git person and never ever go to the GitHub website. Interestingly, you can also spend all of your time on the GitHub website and never actually run Git anywhere else. I want to live here in the middle. I want you to start by using Git and learning the Git concepts through the GitHub interface, and later see how those concepts translate locally to your own computer. I said that way too many times, but I'm trying to set the stage for myself. You can skip ahead to future videos if you felt the rambling too much. Let's now actually go and get started. Here we are. We are writing a poem about rainbows and this has become a disaster. We're going to go over to the GitHub website. The one thing that I've done that I'm not doing in this video tutorial is I already signed up for a GitHub account, a brand new GitHub account. My username is RainbowCoder. You just need a username and an email, you can upload an image, that sort of thing. Pause this video now and go sign up for an account or just keep watching, whatever you want to do. If you haven't done that and you want to try to do this along. The first thing that I want to do and I'm going to keep track of kind of a list of terms over here. The first term that's important, this is a different pen, let's try using it, is repository affectionately by me or also known as a repo. A GitHub repository is another word for a project. It can have multiple files associated with it, it's a repository of files. The first thing I want to do is just make a new repository for my poem. New repository. I'm going to call it Rainbow Poem. I'm calling it Rainbow Poem. Notice by the way, it's going to name it for me automatically with a dash because Git repositories can't have spaces in their names. This is a repo for my poem. I want this to be public and I also want to check this box right now, initialize this repository with a README. A README is a special kind of file that goes in your repository that says, this repository is a repository for poems about rainbows. I'm just going to check that 'cause it's going to make it a little bit easier for me to work with it. Then I'm going to hit this green button over here to create that repository. Now you can see, look at this, I have my GitHub repository. This you can see is the README file. It made one by default right over here. This is it. I've now made a repository, a place where we can have files. What kind of file do I want to work with? I'm a writer, I'm a poet, a really terrible one, not actually. What I want to do is create a new file. I want to put a new file in my repository. This is the file that I'm going to work on. I can have many files, but I'm going to start with just one. I'm going to create new file and I'm going to name my file apoem.txt. There are lots of different file formats that Git and GitHub can keep track for you, anything, but I'm going to work with just a plain raw text file. I'm going to scroll down and now look at this. This is where I name the file. I'm going to write my poem. I'm going to write my poem down here, The Rainbow. Purple, pink, orange, blue, red, these are the colors of the rainbow. That's the end of my poem. I wrote my poem and now I'm going to scroll down and you might think, now I'm going to hit save, but notice here. Look at this. Commit new file. This is another key term in our list of terms. Repository is the repository of stuff, commit, you can think of this as a save. A commit is I'm going to change the file and make a commit. I'm committed to this. Very committed to making this tutorial. There's all sorts of stuff about commit directly to the master branch or create a new branch. Branching is going to be the topic of my next video which is going to be exciting I hope, but right now, all I want to do is press commit new file. I press that. I'm going to zoom back out and you can see now, here are the files in my repository, the README file and the poem. I'm going to click on poem and we can see, there it is, there's my poem, here's the file. Let's say I wanted to make a change to this file. I've decided that it's missing the color green. This little icon over here is the edit button. I can use that button to edit this file. I'm going to click edit. You can't see. I'm doing a terrible job of managing where the stuff is here. I'm going to add right now the line green. I added this, I'm editing my poem, then I'm going to scroll down and look at this now. Over here under commit changes, this is the button. All I need to do is press that button and I've made a save. However, each commit, each save, can have a note associated with it, which can sometimes be useful when you're collaborating or even to keep track of things yourself. I'm going to say I am adding the color green. Then I'm going to just hit commit again and I'm also going to do this again really quickly and I'm going to add yellow and I'm going to say adding the color yellow and I'm going to commit those changes. I've made a bunch of commits. Here we can see the current version of my poem. What have we done so far? We've made a GitHub repository, we put a single file into it, and we made a few commits on that file. Why is Git and GitHub exciting and powerful? Because now I can actually go and view the history. One thing I can do is I can click. I'm looking for somewhere in this interface where I see the word history. Right here. I don't know why I couldn't see that. Over here there's a button called history and I'm going to click on that. Look at this. This is now my GitHub history. The first thing I did was create poem.txt, then I added the color green, and then I added the color yellow. Any one of these that I click on, it can actually show me what was changed at that moment. You can see the line that was changed is highlighted, plus meaning something was added. It's funny, it was green, it's also a green color showing you what was added. I can also go back and look and see when I added the color yellow. This is what happened here. There's all sorts of ways. Something kind of goofy is over here. Look at this crazy number. While this looks like the most nonsensical thing that you would ever want to look at and looks sort of terrifying, this strange crazy string of numbers and characters. This is the commit hash meaning, a unique identifier for this particular commit. Notice also up here in the browser's URL, rainbowpoem/commit/ that crazy number. You don't ever have to memorize this, you don't ever have to write it down, but this is something that I want to point out to you 'cause it's going to come up again and again. I'm going to come over here and look at commit hash. This is a key concept. Let's review. Git is version control, GitHub is a website where you can do projects that have version control on them. You can make a repository where you add files to that repository, then you can make changes to those files by making commits, and those commits allow you to browse the history and each one of those commits has a unique identifier for it. This really is the basic idea. What I would say now is go and make your own GitHub repository, write a poem in it, get it going, play around with the interface, see what happens, and in the next video, I'm going to talk to you about branches, Git branches. What is a branch and why might you use them and how do they work on GitHub.
