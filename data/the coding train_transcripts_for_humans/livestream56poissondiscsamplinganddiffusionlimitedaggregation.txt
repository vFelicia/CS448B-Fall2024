With timestamps:

00:00 - oh school for poetic
00:02 - computation I have a new uh coding
00:05 - Rainbow theme song uh I'm not ready to
00:08 - play it for you yet however in the
00:09 - background right now are the
00:11 - instrumentals for this theme song uh and
00:14 - I see that things are working uh please
00:17 - let me know in the chat if you can hear
00:19 - me and see me okay uh yeah okay I see
00:23 - that I have a green bars for audio so
00:25 - anyway welcome my name is Dan uh I here
00:28 - live at the school for poetic
00:29 - computation in New York City in the West
00:31 - Village uh the school is actually having
00:32 - their final showcase this week on um
00:35 - Saturday and Sunday if you happen to be
00:36 - in the New York City area and want to
00:38 - come see the projects of uh 12 students
00:41 - here and what they're making and working
00:42 - on please
00:44 - do um and so so first of all okay if
00:49 - you're watching this as an archive video
00:50 - on YouTube uh check this video's
00:52 - description there'll be links to time
00:53 - codes where various tutorials will
00:55 - happen also at some point uh this will
00:57 - be about a 2-hour session I hope that at
00:59 - least three three or four Standalone 10
01:01 - to 20 minute video tutorials will come
01:02 - out of it so you can look for those
01:03 - separate videos if you don't want to
01:05 - watch this long probably messy and
01:07 - Scattered uh live stream thing um but I
01:12 - I'm a little bit uh out of sorts this
01:14 - morning and I know that uh something is
01:18 - going on here when uh you know one of
01:20 - the things that I do so I teach these
01:22 - classes at a school called New York
01:24 - University for For Better or Worse um
01:27 - and I have this habit of um if I have to
01:30 - teach say on a Tuesday or a Thursday or
01:32 - a Friday the night before I'm always up
01:35 - late looking at things and trying to
01:37 - prepare some example or getting panicked
01:39 - and I'm anxiety ridden and strangely
01:42 - that hasn't happened to me um doing
01:44 - these live sessions I just kind of show
01:45 - up turn on but it started last night so
01:48 - somebody had suggested um uh oh verto in
01:52 - the chat asked did you do the KH Academy
01:54 - recording I did not KH Academy was
01:56 - having some sort of video contest and I
01:59 - was like oh maybe I'll make a video for
02:00 - it and I don't think I ever did uh
02:02 - people are here hoping for dancing
02:03 - that's interesting it'll happen I'm sure
02:06 - um so uh one of the things that I have
02:09 - associated with my channel here is a
02:11 - GitHub repository called rainbow topics
02:15 - and a topic that I I will tackle that I
02:17 - am planning to tackle at some point
02:18 - though not today for the reasons that
02:21 - I'm telling you this ridiculous story
02:23 - that probably nobody cares about um so
02:25 - there is oh I put this in um one of the
02:28 - topics is something called navier Stokes
02:31 - which is a particular kind of algorithm
02:33 - for fluid simulation and actually
02:35 - there's another suggestion here these
02:37 - are kind of related called fluid
02:38 - dynamics and there's some other
02:40 - references here people are interested in
02:42 - this um and so I thought you know I
02:45 - thought
02:46 - oh I worked on programming things with
02:50 - processing for like 15 some years and uh
02:55 - I've done fluid simulation stuff before
02:56 - I've used uh a library called MSA fluid
03:00 - I found this other Library I think I
03:01 - might have you know I've made little
03:03 - quick
03:04 - experiments and I thought okay I'm gonna
03:08 - I'm gonna prepare this for tomorrow's
03:10 - session and so I found myself at night
03:12 - fluid dynamics for
03:16 - games sitting and this oh this the is
03:19 - this the paper I'm looking for yes no
03:20 - wait wait hold on I just want to make
03:21 - sure because this is not the URL that
03:23 - I'm used to seeing yeah this is it this
03:25 - is the URL that I'm used to seeing uh
03:28 - fluid uh this one this I
03:36 - believe yeah so this is sort of a
03:39 - wellknown
03:41 - paper uh which describes a particular
03:44 - algorithm for creating real time fluid
03:46 - dynamics you know I would say you could
03:48 - let's see if I am back now that was very
03:51 - very sad but
03:58 - uh
04:04 - um okay uh hopefully things are working
04:07 - again um okay so I was in the middle of
04:11 - telling a story a really not very
04:12 - interesting story but I was telling the
04:14 - story nonetheless you could always turn
04:15 - this off and do something else or maybe
04:17 - this is just in the background but
04:20 - anyway uh okay so I was reading through
04:21 - this paper and I was was looking here I
04:23 - was like okay okay this looks good I a
04:26 - grid that makes sense we got a grid with
04:28 - some edge cases of Z and N plus one okay
04:31 - this is good okay we're going to make
04:32 - some arrays this idea of density and
04:35 - this is really this is really uh this is
04:37 - very similar to if you look through some
04:39 - of my previous tutorials I did a
04:41 - tutorial on reaction diffusion where you
04:43 - have this grid each cell in the grid has
04:46 - some amount of chemicals in it you add
04:48 - some forces and that stuff diffuses and
04:50 - it combines and then you visualize that
04:51 - with colors and this is good and now we
04:53 - have some formulas ah we have
04:55 - neighboring so the fluid stuff goes from
04:57 - one neighbor to the other and we're
04:58 - going through here okay okay ah this is
05:00 - looks kind of messy but we can do this
05:01 - and I I can Port this code and Etc ET
05:04 - and then I started realizing you know
05:05 - it's like 11:30 at night I might getting
05:08 - a headache uh and I I I I came across
05:12 - this particular um part of the paper
05:15 - which says the following code implements
05:17 - this idea and we use a simple can you
05:20 - hear me yes a simple uh linear back
05:23 - trace and I was like looking at this
05:25 - these formulas here and
05:28 - thinking you know what maybe I'm not
05:30 - going to do navier Stokes uh fluid
05:32 - simulation um on uh tomorrow's live
05:35 - stream so you know I have this um I have
05:39 - this
05:40 - quandry um which is to kind of in
05:45 - picking topics there's always this
05:46 - question I think that comes up in doing
05:49 - uh creative uh projects for
05:55 - example that was a loud noise in the
05:57 - other
05:58 - room
06:02 - um I have more than one sound effect not
06:04 - that you guys really want me to play
06:05 - sound effects uh okay so you know if I
06:08 - was doing um if I was doing fluid
06:11 - simulation I might go ahead and look for
06:14 - something like this particular uh oh
06:17 - look at all these beautiful
06:20 - um uh hold
06:23 - on
06:26 - uh can I start over I can't just delete
06:28 - this and like start over again I feel
06:30 - like my the point of what I'm saying is
06:32 - I didn't get very much sleep very tired
06:34 - my head's in a strange place I was
06:36 - really thinking about this fluid stuff I
06:37 - was having nightmares where the fluid
06:39 - was taking over I was being drowned in
06:42 - the Navy or Stokes fluid simulation oh
06:45 - look at this P5 uh so anyway so you know
06:48 - there's this balance that you have to
06:50 - strike which is I want to create a
06:52 - project I could Implement an algorithm
06:54 - from scratch uh what's the utility in
06:57 - doing that what's the value in kind of
06:58 - learning how to to do that what's the
07:00 - value in using a library another
07:02 - implementation and I'm kind of walking a
07:04 - along this fine line in this uh thing
07:07 - called coding rainbow and I think right
07:10 - now I have discovered that the fluid
07:12 - simulation algorithm is a particularly
07:14 - Advanced large case scenario that would
07:17 - Merit multiple videos going through all
07:19 - of these different steps possibly also
07:21 - looking at using a library so anyway I
07:23 - want you guys to
07:27 - um what yes I want you guys to keep me
07:30 - in check here um I what I've noticed is
07:32 - that in particular the live stream
07:35 - audience uh has a um generally a pretty
07:39 - sophisticated background and I would
07:41 - like to make sure that I'm doing a good
07:43 - balance of tutorials that are kind of
07:45 - quick and easy and accessible to create
07:46 - interesting experiments and projects
07:48 - beginner friendly a little experience
07:51 - necessary friendly as well as spots
07:53 - where people can go further in depth uh
07:55 - building on previous tutorials and
07:57 - previous skills so um
08:00 - uh so anyway so keep in touch especially
08:02 - if you are a beginner if programming is
08:04 - new to you if it's something that you've
08:05 - only been doing in the last year or in
08:07 - the last week or in the last day uh have
08:10 - you been able to find the tutorials that
08:12 - I have on YouTube that are for that were
08:14 - that have no experience necessary and
08:16 - have those tutorials been enough for you
08:18 - to follow those and then go on to some
08:20 - of the other ones this is something that
08:21 - I would like to hear some feedback on
08:23 - mostly the feedback that I'm getting is
08:25 - requesting like hey could you build a
08:26 - rain tracing engine from scratch so not
08:29 - that I I think that could be interesting
08:31 - it's interesting as an exercise we'll
08:32 - learn something about code and we might
08:34 - discover something new I want to do all
08:35 - that stuff too but I want to keep that
08:37 - balance okay so that was my little uh
08:39 - Spiel um for this morning um I'm trying
08:43 - to figure out where all my music is oh
08:45 - there's some my music so um I'm getting
08:49 - ready today is going to be a day though
08:50 - however of looking at some interesting
08:54 - algorithms like past on
08:58 - disc like um what's another one that I
09:02 - was thinking about ah diffusion limited
09:05 - aggregation we're going to do all these
09:07 - things we're going to make some cool
09:09 - stuff I'm going to work in JavaScript
09:10 - maybe in processing and we will see oh I
09:13 - also wanted to look at some a circle
09:15 - disc Point picking all these things I
09:18 - don't maybe sound that interesting but I
09:20 - assure you they are okay so um let me
09:24 - get through a few things so just in case
09:26 - some people are new I'm going to just
09:28 - run through something that I always run
09:30 - through which is that you can go to
09:32 - coding rainbow.com for all of your
09:35 - coding rainbow Deeds uh I encourage you
09:38 - it's uh to subscribe on YouTube you're
09:40 - welcome to join this crowdfunding uh
09:42 - website patreon if you feel so inclined
09:44 - by no means are you required to of
09:46 - course I will always be here and
09:48 - enjoying your company virtually and then
09:51 - uh you can also put your email in here
09:53 - if you're interested in signing up for
09:55 - email announcements for when I'm going
09:56 - to do a live stream I should mention
09:58 - that this is my last live stream for
10:00 - this week I plan to have at least one
10:03 - live stream next week and then I'll be
10:04 - on Hiatus for like the last two weeks of
10:06 - August however I have a huge not huge
10:09 - but I have a backlog of maybe like 10 to
10:11 - 12 video tutorials that have kind of
10:13 - been edited from the live streams and
10:14 - haven't been published yet so I hope
10:16 - that even while I'm away I'm going to be
10:17 - releasing a video per day and obviously
10:19 - if you're subscribed you will get a
10:21 - notice for that
10:23 - um uh okay so that that's the Spiel
10:27 - there um
10:29 - and let's see so let's see if we can um
10:32 - I'm about I don't know let's see if I
10:34 - can just get started
10:36 - here um let me put
10:39 - on
10:42 - the
10:44 - nope sorry having a little frog in my
10:51 - throat
10:53 - no okay so
10:56 - um I'm going to I'm going to look at
10:58 - some of these I feel like there's a
10:59 - theme to today and the theme for
11:05 - today is random
11:08 - circles
11:11 - appearing right so let me get set up
11:13 - here for a
11:15 - second it would be good if I ever did
11:17 - this stuff in
11:20 - advance uh so
11:23 - let's um let me go
11:27 - to
11:31 - oh I remember something I was going to
11:33 - talk
11:37 - about by the way this music is composed
11:40 - by Adam
11:42 - Blau Adam Blau on Twitter I
11:46 - think
11:52 - uh okay wait I should I should do some
11:54 - programming okay phot taxis I think
11:56 - that's a
11:57 - good uh
12:01 - let's random
12:03 - circles
12:07 - one all right let's see if Adam worked I
12:10 - was having a problem with
12:14 - Adam let's see I'm still having this
12:16 - problem yeah I'm still having this
12:19 - problem some I I forgot to check into
12:22 - this problem and fix
12:24 - it let's show the stack Trace let's see
12:26 - if we can fix this for a second uh why
12:29 - is the
12:30 - beautify
12:33 - package um seem to be having some sort
12:37 - of
12:39 - problem anybody know what this err could
12:41 - be kides
12:44 - beautify is having some sort of
12:48 - problem maybe if I package Adam
12:52 - beautify beautify debug package manager
12:55 - where do I where do I do that Adam
12:58 - preferen says may check for update let's
12:59 - check for
13:01 - update latest version uh
13:08 - preferences whoops that's with some of
13:10 - the the
13:11 - lyrics Wait hold on I was just trying to
13:13 - put on some music for you guys here we
13:18 - go
13:22 - packages disable update let's try
13:27 - that the WG Bros asks in chat are you
13:31 - going to make another episode of the
13:33 - agario Remake I am going to I don't
13:35 - think believe that I'm necessarily going
13:37 - to tackle that today though however uh
13:39 - but I will definitely be continuing that
13:41 - at some point is it
13:43 - [Music]
13:57 - updating
13:59 - [Music]
14:04 - how do I know if it's
14:06 - [Music]
14:20 - working it's hot in here so I think I
14:22 - need my Sweat
14:24 - Band which I think makes my head
14:27 - separate from my body
14:29 - this it has a green stripee on it all
14:31 - right let's see how we doing
14:36 - here did it update okay it
14:40 - update let's
14:42 - [Music]
14:52 - restart hey okay
14:57 - fixed
15:00 - okay so
15:05 - now I made at some point let's let me
15:08 - let's look at an interesting
15:11 - problem I think this is going to be an
15:13 - interesting problem all so there's a lot
15:15 - of steps to this thing that I want to
15:17 - show you um trying to think of where I
15:19 - want to
15:20 - start let's start let's start with this
15:23 - let's just say that I have
15:26 - a uh hold on
15:29 - why do I have slack open quit QuickTime
15:32 - open
15:32 - quit uh okay let's say that I'm going to
15:36 - now go
15:38 - to ah I I need to run a little server oh
15:41 - let's add let's add this Adam live okay
15:44 - so let's try to add a new package so
15:46 - something that you guys that I was told
15:47 - that I should consider using uh is um
15:52 - let's see how do I find a new package
15:55 - install uh
15:57 - live search
16:00 - server adom live server launch an HTTP
16:04 - server with live reload capability let's
16:08 - see how this
16:09 - works and then I was going to talk about
16:11 - code pen I knew I had something else I
16:13 - wanted to talk about we're going to do
16:15 - some code pen too I um Let me let me
16:18 - pull up my information on code
16:22 - pen uh
16:27 - uh
16:35 - uh
16:42 - okay okay how's that that that that
16:44 - install so now everyone let's see how do
16:49 - I does anyone know Auto live server
16:53 - start look at
16:55 - this look at this what port should I use
16:58 - is I cannot even imagine what poor oh I
17:04 - know
17:09 - um wait is this
17:17 - it that's a bad joke okay let me just
17:21 - you know okay let's try po 3000 look at
17:25 - that how lovely now we don't need to
17:29 - worry about this silly so look at this
17:31 - what if I just were to add now uh let's
17:34 - let's try something so one one of the
17:35 - things I was going to show you is what
17:37 - if I just
17:39 - say uh I'm going to say a stroke weight
17:43 - for uh Point random width random
17:49 - height stroke 255 a th
17:54 - points so um
17:57 - whoops
17:59 - look at that I don't even have to do
18:01 - let's make it 5,000 points look at that
18:04 - it reloads automatically so this is
18:06 - first of all so this is exciting I
18:07 - encourage you to use that um I I lost
18:10 - track of my chat here
18:18 - um okay uh okay so here's the thing I
18:24 - think an interest
18:26 - there's how how you just distribute
18:29 - random points into a window might seem
18:32 - like in many ways not that interesting
18:35 - of a topic and in fact here in about 10
18:38 - seconds I created this sketch that just
18:41 - made a whole bunch of random points in
18:43 - the window and we could discuss there's
18:45 - some issu there's some issues are not
18:47 - issues with this but we could we could
18:48 - say like what if we wanted to have a
18:50 - scenario where we distribute these
18:52 - points randomly but none of them are
18:53 - overlapping and in fact I did previously
18:56 - do a video on this topic uh
18:59 - shiftman
19:00 - YouTube random circles let's try to find
19:04 - that right ah yeah random circles with
19:07 - no overlap you can kind of see what's
19:08 - going on here in this uh thumbnail there
19:12 - um and I we don't need to watch that
19:14 - video so and what I did in that video
19:17 - was employ a strategy that I that is
19:18 - often referred to as dart throwing
19:20 - essentially which you could imagine here
19:22 - what if I'm throwing darts at this
19:24 - canvas and every time I hit the canvas
19:27 - with a dart
19:28 - wait I hit the canvas with a dart I draw
19:31 - a circle there and then I throw another
19:33 - Dart it hits over here and I draw a
19:34 - circle there and I throw another Dart it
19:35 - hits over there and I BR another Circle
19:37 - there what if I throw a dart and it
19:38 - lands on top of one of my previous
19:39 - circles well then I go and I pluck that
19:41 - dart out and I throw again so that's if
19:43 - you w go back and watch that previous
19:45 - video I looked at that strategy and you
19:46 - can imagine why that's not that
19:48 - efficient of a strategy because if I now
19:51 - if the my canvas is full of all these
19:52 - dots and I throw a dart to keep throwing
19:54 - darts I'm going to have to keep taking
19:55 - it out a lot before I find by accident
19:57 - throw it somewhere where there's a
19:58 - random point so I want to kind of take
20:02 - this as a broader theme for today and
20:06 - this camera is about to shut off I bet
20:09 - um and uh I want to look at a a a bunch
20:13 - of different algorithms related to this
20:16 - theme one that I found through the prog
20:19 - JavaScript programming um environment
20:22 - called D3 uh and this is something
20:25 - called Pon disc sampling and you can see
20:27 - how these particular dots are
20:30 - distributed randomly none of them are
20:32 - overlapping and they exhibit
20:35 - this P um you know named for the French
20:38 - mathematician P not uh from The Little
20:42 - Mermaid I don't know it's actually also
20:44 - a French word meaning fish clearly um
20:47 - but uh you can see how not only are they
20:50 - not overlapping but they have this kind
20:52 - of even distribution right A P
20:55 - distribution of random numbers it's kind
20:57 - of related to if something happens about
20:59 - four times randomly per day what's that
21:02 - what's that kind of distribution going
21:04 - to look like over time of those four
21:05 - events each day I mean they generally
21:07 - aren't going to Cluster all together
21:09 - that sort of thing so um you can read
21:11 - more about Pon distribution um you know
21:14 - Wikipedia Etc but I uh you know so there
21:17 - are various strategies for making this
21:20 - kind of distribution um one of which
21:23 - that I did mostly in my previous video
21:24 - was this sort of dart throwing thing so
21:27 - I was looking at this and you know
21:28 - there's a sort of like amazing
21:30 - Simplicity and Beauty to this even
21:32 - though all it's doing is filling it with
21:33 - random spots but you can imagine
21:35 - different kind of applications for this
21:38 - um some other type of you know I had um
21:41 - I did a video about a space colonization
21:43 - algorithm which draws a tree pattern as
21:45 - it's pulled to random points and I just
21:48 - put all those points randomly in the
21:50 - window what if I use this kind of
21:51 - distribution what sort of tree would I
21:53 - get out of that if I was creating an
21:54 - ecosystem simulation where I wanted to
21:56 - create a sea of food or I wanted to have
21:59 - Blades of grass over a meadow what if I
22:01 - gave all the initial points of
22:03 - distribution like this so um and someone
22:06 - in the chat is writing the pon
22:07 - distribution is used for molecular
22:09 - modeling that's great to know super
22:10 - interesting so uh this is kind of a
22:13 - theme I want to maybe start with this um
22:15 - and we're going to look at um I actually
22:17 - have not programmed this but we're going
22:19 - to look at this particular paper by
22:21 - Robert britson which describes the
22:22 - algorithm uh I don't know if the source
22:25 - code for this is available in this D3
22:26 - website it probably is we could look at
22:28 - that as well um and then you know other
22:31 - things related to this uh that I want to
22:33 - look at is circle dis pointing dis Point
22:37 - picking uh to kind of look at the
22:39 - distribution of picking points inside of
22:41 - a circle whether they cluster randomly
22:43 - towards the center are evenly spaced out
22:46 - that's something I want to look at as
22:47 - well as
22:49 - um uh one of my favorite algorithms that
22:52 - I think that I've implemented before I
22:55 - didn't include it in the nature of code
22:56 - book but is uh called diffusion limited
22:59 - aggregation and you can see
23:02 - uh um that this is a kind of um an
23:06 - algorithm that can model crystall likee
23:09 - growth patterns that happen in nature um
23:11 - and you know we can kind of peek through
23:13 - this Wikipedia page and you can see that
23:16 - you can get different patterns based on
23:17 - whether you start growing from the
23:18 - bottom or out of the center and I'll
23:20 - probably use I'm uh Paul bour Paul bour
23:25 - is a is a person uh he has a website
23:29 - that I use that that I found lots of
23:30 - really nice um explanations of various
23:34 - um algorithms on let me find this
23:36 - diffusion limited aggregation so I think
23:38 - we could read through this together we
23:40 - can have like a soothing quiet you guys
23:42 - could all maybe all of you are watching
23:44 - somewhere and you have like a couch or a
23:46 - bed nearby and a pillow and you could
23:47 - lie down put on some quiet music or
23:50 - better yet I could put on some quiet
23:51 - music for you and then you could lie
23:54 - down and I could just read to you from
23:55 - this paper and I could say things like
23:57 - figure three shows a box attractor new
24:01 - points enter in the interior the center
24:04 - of the image say the source code
24:07 - supplied here a soothing voice and that
24:09 - could be how you could go to sleep at
24:11 - night okay I I I lost track of uh my my
24:15 - head there so I I don't know I'm un sure
24:17 - whether um so so that's kind of my plan
24:19 - broader theme for today um I'm going to
24:22 - be doing these as coding challenges
24:24 - meaning I will essentially this is empty
24:27 - it's a
24:32 - um I will be programming them from
24:33 - scratch while reading through either the
24:35 - paper or the website that explains the
24:37 - algorithm I feel like that's a really
24:38 - useful process for people to see I enjoy
24:41 - doing it as this kind of like strange
24:44 - performance art kind of academic math
24:48 - paper programming code in p5js thing um
24:52 - and that's sort of my plan for today so
24:56 - um uh there are some some questions
24:58 - going on in the chat which may be
25:01 - uh ah yes so by the way the pon
25:04 - distribution which we'll look at you um
25:06 - and I believe Pro on this um page the
25:09 - Jason Davies page that um by the way
25:13 - there's also some further reading down
25:15 - here of other links you could look at um
25:18 - and ah you can look at random points on
25:20 - a sphere so these kinds of things can
25:22 - also be used to and this is interesting
25:25 - for sort of mapping applications and
25:26 - stuff like that so
25:28 - um this is what I want to look at today
25:30 - okay
25:35 - um uh okay so let's see I think there
25:37 - must be a lot of new people in the chat
25:39 - today I'm seeing lots of new names so
25:41 - ask your questions I kind of take a peek
25:42 - at the chat as I can but I'm not glued
25:44 - to it um unfortunately it's sort of a
25:47 - little bit hard to do that okay so let's
25:48 - start
25:51 - with um let me close all this
25:53 - stuff
25:55 - um and let's see where uh where am I
25:58 - here uh rant distribution let's find the
26:02 - GitHub issue no what was it called
26:06 - random uh random sampling of points oh
26:10 - okay ah oh the other thing I was
26:12 - thinking it's sort of I don't know the
26:14 - other thing that I was thinking was
26:17 - um uh
26:20 - whoops so one of the things that I
26:22 - wanted to also tackle is the traveling
26:24 - salesperson algorithm and the travel I
26:27 - don't know if algorithm is the right
26:28 - word actually traveling salesperson
26:30 - problem so the traveling salesperson
26:32 - problem is a problem where you look at a
26:35 - space full of points and you try to say
26:37 - what is the path I'm a traveling
26:39 - salesperson I'm here to sell my rainbow
26:42 - oh no no my rainbow
26:45 - sweatbands uh here I am I'm a traveling
26:50 - salesperson with rainbow sweatbands and
26:53 - I want to visit all of these cities and
26:55 - I want to sell these things in all of
26:57 - these these
26:59 - cities what's the shortest path so that
27:02 - I can go from one city to another and
27:04 - hit all of them and walk the fewest
27:06 - amount of steps and this is a
27:09 - surprisingly uh difficult problem to
27:11 - solve once you start having a lot of
27:13 - points because there's just so many
27:15 - possible paths through all of these
27:16 - points and so we could use a kind of
27:18 - check every possibility and find the
27:19 - shortest one approach or a genetic
27:21 - algorithm to solve this problem so I
27:22 - think it's sort of interesting to think
27:23 - about some of these algorithms for
27:25 - generating like a diffusion Limited
27:27 - aggregation visualization and then apply
27:29 - the traveling salesperson problem to it
27:31 - so you connect all of them with a with a
27:33 - line or um that type of thing um okay uh
27:37 - what can you tell us what you use for
27:38 - browser live reload um he's I'm using uh
27:42 - a package for Adam called Adam live
27:44 - server and I I if I guess if you watched
27:46 - this back in the archive I went through
27:47 - the steps of installing it uh
27:50 - okay so um I wanted to talk a little bit
27:53 - about code pen I think I'll since I've
27:55 - been kind of um going on and on and on
27:58 - and on without actually getting to
27:59 - anything yet I think I will save that
28:01 - perhaps for a little bit later but I
28:02 - want to mention that I did a tutorial
28:05 - using codepen the other day I used
28:06 - codepen uh has a thing called Professor
28:08 - mode where you can actually be on the
28:10 - same web page as me and see me typing
28:12 - the code in real time problem is you're
28:14 - about 15 or 20 seconds behind on the
28:17 - YouTube stream but the actual
28:20 - um uh the actual codepad thing is in
28:23 - real time anyway I made all sorts of I
28:25 - was like I made all sorts of mistakes
28:26 - and had a uh had some questions about
28:28 - codepen and I got an email from a
28:30 - codepen engineer and I got um answers to
28:33 - a lot of those questions and I want to
28:34 - go over some of those at some point okay
28:37 - um so let's uh let's start with the
28:41 - p disc sampling let's start with
28:45 - that okay um so let's look at this
28:48 - particular paper is everybody in their
28:51 - quiet
28:53 - couch uh okay so what I'm going to look
28:56 - for actually so I encourage you to read
28:59 - the whole paper um you sort of get the
29:02 - idea though that what we're trying to do
29:04 - is and this is by the way visualizing
29:07 - the uh
29:09 - distribution of I probably distances
29:11 - between all the points somebody correct
29:13 - me if that's wrong but anyway this is
29:15 - the goal here right to create a random
29:17 - distribution around of points in a plane
29:20 - that exhibit a uh that aren't
29:22 - overlapping and they all have a minimum
29:24 - distance none of them are are closer
29:26 - than a certain Thresh hold um and and
29:29 - and that will give them this kind of
29:30 - like even but random distribution so we
29:33 - could use the dart throwing approach I
29:35 - did that in a previous video so I'm not
29:37 - going to do that here um instead what
29:39 - I'm going to do is um uh read starting
29:44 - from the algorithm here and the point of
29:46 - this algorithm is not to make a more
29:48 - beautiful version of the distribution
29:50 - but to have an algorithm that actually
29:52 - runs rather quickly which in this case
29:54 - um really can make quite a difference if
29:56 - you're doing a you know in a lot of
29:58 - cases I'm in a lot of in a lot of
30:01 - scenarios for me I don't I don't really
30:03 - worry about optimization like I'll just
30:05 - make my interesting weird project and
30:06 - try to make it work and I can optimize
30:08 - later I think that's generally a good
30:09 - strategy but this might be a case where
30:11 - you already know like I have a high
30:13 - resolution image I want to fill it with
30:15 - points and I need to do that like every
30:16 - frame I I can't like have it take a
30:18 - super long amount of time plus I think
30:20 - we're going to discover some interesting
30:22 - programming techniques while doing this
30:25 - I read this on the subway this morning
30:27 - so so hopefully it's going to work um
30:29 - but uh so I think we're going to
30:31 - discover some interesting techniques and
30:32 - also the point of this channel coding
30:35 - rainbow is for you is to look at some of
30:37 - these classic algorithms Implement them
30:39 - verbatim and then for you the audience
30:41 - to do your own creative riff off of it
30:44 - okay here we go uh so I want to make
30:46 - this a uh a separate Standalone tutorial
30:51 - so
30:53 - um I am going
30:56 - to cycle these
30:58 - cameras I'm going
31:05 - to get myself
31:10 - ready okay um uh let's say we're going
31:15 - to
31:17 - have uh
31:19 - okay go here
31:23 - th
31:25 - uh I'm going to do this in JavaScript I
31:28 - got the browser
31:29 - [Music]
31:31 - going uh we'll close this for right now
31:37 - um okay and
31:40 - here okay I can't see hold on I got to
31:44 - fix
31:45 - something
31:47 - uh here we go so this wasn't so great
31:50 - this is probably about 45 minutes before
31:51 - I actually started doing
31:53 - anything but uh thank you guys for
31:56 - bearing with with me and being here with
31:58 - me this morning okay this is a very
32:00 - serious topic so I won't be wearing my
32:02 - sweatbands I'll wear
32:04 - one no it's too weird okay
32:08 - uh okay here we
32:14 - go welcome to a video tutorial where I
32:19 - am going to implement I'm going to read
32:20 - this paper in this video out loud to you
32:23 - so if you ever thought oh you know what
32:24 - I want to do I want to watch a video on
32:26 - YouTube where somebody reads out loud to
32:28 - be an academic paper with some math
32:30 - stuff in it you you come to the right
32:32 - place it is called fast fast Pon disc
32:35 - sampling and arbitrary Dimensions just
32:37 - to uh kind of cover what that is the
32:40 - idea here is that I want to fill a space
32:42 - with points these could be uh you know I
32:44 - want to uh I want to use this to create
32:47 - a um I can't think of any good examples
32:50 - like an ecosystem simulation where
32:52 - creatures are wandering around I want to
32:53 - fill a space with food or I want to use
32:55 - these as seed points for something some
32:57 - type of other generative growth
32:58 - algorithm or I just want to have a nice
33:01 - pretty dots pattern that then I color
33:02 - According to some image and I want those
33:04 - points to be evenly spaced around and
33:05 - not overlapping so let's look at how we
33:09 - can implement this algorithm and I'm not
33:10 - going to read the whole paper I'm just
33:11 - going to start from down here and the
33:13 - idea is the algorithm takes and by the
33:16 - way let just so um look you look in this
33:18 - video in the URL for this paper and it's
33:20 - by Robert britson from the University of
33:22 - British Columbia and this is I think
33:23 - from uh I assume that this ' 07 means
33:25 - it's from 2007
33:28 - so the algorithm takes as input the
33:31 - extent of the sample domain the minimum
33:34 - distance R between samples okay so what
33:36 - does that mean a sample by the way is
33:38 - each one of these dots that's a sample
33:41 - so I first will need a minimum distance
33:43 - so I'm going to go to my code oh by the
33:45 - way what's my code doing right now so
33:46 - I'm starting with this uh code written
33:48 - in JavaScript using the p5js library and
33:51 - it just draws what has a loop to go from
33:53 - zero to a th000 to draw a thousand
33:55 - random points in a window and we can see
33:58 - that's happening here and you can see
33:59 - that these points don't have that kind
34:01 - of distribution they're overlapping
34:03 - they're not kind of evenly spaced I this
34:05 - is a perfectly fine distribution I don't
34:07 - I don't have nothing against this
34:08 - particular pattern whatsoever but uh
34:11 - it's interesting to look at other
34:12 - patterns of what types of beautiful
34:15 - beautiful beautiful beautiful things
34:17 - could emerge out of that okay so um here
34:21 - we go okay so now back to the paper
34:24 - where was I okay so let's go okay so R
34:26 - uh so I need to add R so I'm going to
34:29 - add a variable R and let's say right now
34:31 - we're going to start with I want these
34:33 - points to be 10 pixels apart that's kind
34:36 - of a reasonable value to start and then
34:38 - a constant K what is K as the limit of
34:41 - samples to choose before rejection in
34:43 - the algorithm typically k equals 30 okay
34:46 - so that seems to me I can create a
34:48 - variable k equal to 30 but what is that
34:51 - mean limit of samples to choose before
34:54 - rejection so probably in the algorithm I
34:56 - read this before before I haven't
34:57 - implemented the code yet but I did read
34:59 - this before so I know but what it means
35:01 - there's going to be some point where I'm
35:03 - going to try to do something a certain
35:04 - amount of times and if it doesn't work
35:06 - at some point I'm going to quit and this
35:09 - is this is telling the algorithm to quit
35:11 - after 30 times and that's obviously both
35:12 - of these are numbers we could play with
35:13 - to see if we get different effects so
35:16 - now what I want to do is initialize an
35:18 - n-dimensional background grid oh boy
35:22 - what the what is an
35:24 - n-dimensional background grid that
35:26 - sounds complic it um sorry I just needed
35:29 - to get to my keyboard here so what I
35:31 - want is to have a
35:35 - two-dimensional background grid meaning
35:37 - I want to think of some sort of grid and
35:40 - what I'm going to do is I'm going to
35:42 - store everything in that Grid in an
35:44 - array so I'm going to make actually just
35:46 - one I think I'm going to make a
35:47 - one-dimensional array and that
35:50 - onedimensional array will number the in
35:53 - every single element in that grid and
35:56 - this is what I do I've I've done this in
35:57 - countless different examples and things
36:00 - online where uh online on YouTube on on
36:04 - the internet um where um this is uh
36:08 - where I have this one-dimensional array
36:10 - to store information in a for a
36:11 - two-dimensional space pixels do that all
36:13 - sorts of things so let me come back here
36:15 - and let's set that up so what I'm going
36:17 - to do is I'm going to create a variable
36:19 - and I'm going to call it grid and I'm
36:21 - going to make it an array now I need to
36:23 - think about what is the what is this
36:26 - this pen is by the way very light can
36:28 - you see this um what is the size of each
36:30 - one of these uh cells in the grid so
36:34 - here it says we pick the cell size to be
36:37 - bounded by r divided by the square root
36:40 - of
36:41 - n r is the minimum distance we want
36:44 - between our points n is the dimensions
36:47 - two Dimensions I mean so interestingly
36:50 - enough we could do this in three
36:51 - dimensions or in four dimensions or in I
36:54 - was going to play some Spacey music for
36:55 - four dimensions but whatever I I'm not I
36:59 - got to work on this whole soundboard
37:00 - thing I'm not very good at it um okay so
37:03 - uh so so that's something I need to
37:06 - calculate and I'm going to calculate it
37:08 - I'll just do it up here um I'm going to
37:10 - call that variable W as kind of like the
37:15 - wh time
37:19 - out this will get headit it
37:25 - out
37:30 - hold on I'm looking in the chat you can
37:32 - barely see the green on the
37:35 - Whiteboard okay hold on should I well I
37:39 - think it'll be good enough but I won't
37:40 - use that green marker anymore uh where's
37:43 - a black one you would think that I would
37:46 - be more prepared for these sorts of
37:48 - things okay I have the black marker here
37:51 - okay coming back all right this will
37:54 - this was a little edit Point sorry I'm
37:56 - going
37:57 - to I'm going to call that variable W to
38:00 - be
38:02 - the I have a black marker now by the way
38:05 - so you could see this better the size
38:07 - what's the width what's the height of
38:09 - each one of these cells okay so I need
38:12 - that to be uh r divided the square root
38:16 - of n which is two so uh so you know you
38:21 - can figure that out but I I I you don't
38:23 - have to figure that out because the pro
38:24 - the code will calculate that for you
38:25 - okay so I have that
38:28 - now um so let's read this so okay the
38:31 - grid can be implemented as a simple nend
38:33 - dimensional array of integers the
38:35 - default negative one indicates no sample
38:38 - a non- negative integer gives the index
38:40 - of the sample located in a Cell so
38:42 - basically that big array is either going
38:44 - to have a negative one in it or or
38:47 - another number in it to say like oh
38:49 - there's something in that AR right so
38:50 - let's let's start by
38:53 - um okay so first of all we have to
38:55 - figure out how many columns are
38:58 - there because the space is 400x 400
39:01 - pixels and the size of each one of those
39:02 - cells is W so I want to have and I want
39:05 - it to be an integer so I'm going to use
39:06 - the floor function I want to take the
39:08 - width divided by W for the number of
39:11 - columns and the number of rows is the
39:14 - height divided by W and then what I want
39:17 - to do is Loop
39:22 - through
39:24 - uh every single spot which is the number
39:26 - of columns times the number of rows and
39:29 - in the
39:30 - grid initialize its value to negative
39:32 - one so I'm starting with a grid the idea
39:35 - here is the grid you just pick up a
39:38 - different marker each time where the
39:40 - grid is just filled with these are the
39:42 - index values but the grid itself is
39:45 - filled with negative 1 negative 1
39:46 - negative 1 negative 1 because we're
39:47 - going to start actually putting points
39:49 - filling that grid with values okay who
39:51 - you still why is this still interesting
39:52 - to you I hope so okay so going back to
39:55 - this paper okay good good good good good
39:56 - good ah select the initial sample X subz
40:01 - whatever what do I mean pick a random
40:03 - point that means pick one random Point
40:05 - randomly choose a chosen in uniformly
40:08 - from the domain insert it into the
40:10 - background grid and initialize the
40:12 - active list okay there's a bunch of
40:15 - extra stuff there okay so forget about
40:16 - this active list for a second let's say
40:18 - I need to pick a random Point that's not
40:21 - too hard I can pick a random Point wh so
40:25 - let's let's see here so this is uh this
40:28 - is really uh in if I'm reading the paper
40:30 - this was Step
40:32 - Zero and uh now I'm going to
40:34 - do this by the way is no longer
40:37 - relevant now I'm going to do uh step one
40:41 - so which was pick a random Point VAR x
40:44 - equals random
40:47 - width VAR y equals random
40:51 - height and you know what me make that a
40:54 - vector I think it's going to be useful a
40:55 - vector in p 5 is an object that stores
40:58 - both in X and Y so I don't have to keep
40:59 - them as separate variables uh let's make
41:02 - a a vector called pause with an X and
41:05 - the Y in it okay we're doing well okay
41:07 - so that
41:08 - was there we go so now select the
41:11 - initial sample chosen blah blah blah
41:14 - inserted into the background grid so
41:16 - what does that mean so if I pick a
41:19 - random
41:20 - Point somewhere in this
41:23 - window oh I got to throw a dart right
41:25 - ready one
41:26 - two three it worked exciting live
41:31 - demonstration okay so right I picked
41:34 - this random point and I can see that
41:35 - it's in spot eight unfortunately I can't
41:38 - actually in my code like throw something
41:40 - and then just see where it is so I have
41:42 - to figure out where it goes and the oh
41:45 - did
41:45 - I yeah no okay um I have to am I back in
41:50 - the right place okay um I have to now
41:53 - figure out where it goes and how do I
41:54 - figure out where something goes well
41:56 - where its column which I'm going to call
41:58 - I is the EXP position divided by W right
42:02 - W being the size that's that sort of
42:04 - scaling Factor the size of each cell um
42:07 - and I also want to use the floor
42:09 - function to make that an integer because
42:11 - it's going to be an index into an array
42:14 - and then uh J is the Y value divided by
42:17 - W and so what I want to say is the grids
42:21 - I + J * the number of columns equals
42:25 - that position so this is me inserting it
42:27 - into the grid I pick a random XY point I
42:31 - find its column in row position I'm
42:33 - saying I and J in the grid I make a
42:36 - position Vector out of it and I insert
42:38 - it into the array so this i+ J * columns
42:41 - thing this is a Formula that exists in
42:44 - just about so many of my code examples
42:47 - but it basically is a formula for taking
42:49 - a column position and a row position and
42:53 - figuring out ah if the column is z 0 1 2
42:56 - 3 and the row is
42:59 - 012 um that the actual position in the
43:02 - array is 13 and you can see that is the
43:05 - column plus the row times the width 1 2
43:09 - 3 4 5 so 5 * 2 is 10 plus 3 is 13 yeah
43:13 - that formula works so that was kind of a
43:14 - quick explanation I think I have a video
43:16 - somewhere where I go over that more you
43:17 - can try to find it um okay great so now
43:21 - we have that inserted so that's step two
43:24 - let's go back oh no that's step one
43:27 - sorry so now we've done step two oh but
43:29 - we're missing something active list so
43:32 - this algorithm requires an active list
43:34 - of points that we are currently working
43:36 - with and it's going to make more sense
43:37 - as I get further into this but
43:41 - um uh there's some interesting stuff
43:43 - going on in the live chat here okay so
43:45 - um so let me f let's let's create I want
43:47 - to create another array called active
43:50 - and what I want to do is also say
43:52 - active. push that position so I want
43:56 - that position that Vector to both be
43:58 - inserted into the grid remember this
43:59 - grid is an array now that has negative
44:01 - one everywhere except for this one spot
44:03 - that it actually has a vector and then
44:05 - what I want to do is I'm going to um add
44:07 - the draw function back in I want to say
44:10 - background zero and I just want to say I
44:13 - want to Loop through the grid just to
44:15 - make sure things are working and I want
44:19 - to say a stroke
44:21 - 255 stroke weight 4 and then I want to
44:27 - say sorry I want to say uh Point uh grid
44:30 - indexi dox grid indexi doy however I
44:35 - only want to I want to Loop through the
44:36 - whole grid and draw all the points but
44:38 - not if there's a negative one there so I
44:41 - want to say as long as grid index I does
44:44 - not equal to
44:46 - -1 then I can draw the point so I just
44:49 - want to be able to see what's going on
44:51 - and then also I think it would be useful
44:55 - to look at at all the active points so
44:57 - I'm also going to Loop through the
44:59 - active array this is really mostly for
45:00 - debugging but I think it might also make
45:02 - kind of an interesting pattern and I'm
45:04 - going to say stroke 255 comma 0 comma
45:07 - 255 stroke weight four and I'm going to
45:12 - uh draw a point but this time um at the
45:16 - Active spot
45:18 - okay uh there we go
45:20 - whoops how's this looking everybody live
45:23 - reload going let's take a look oh so
45:26 - have an error square root is not defined
45:28 - look at that so this is by the way a
45:29 - very common p5js problem if you ever try
45:32 - to call a p5js function outside of setup
45:35 - it actually won't work because p5js has
45:38 - not been initialized the page has not
45:39 - been loaded until setup this is like an
45:41 - onloaded type event I could get around
45:43 - that here just because it's square root
45:45 - by just accessing the JavaScript square
45:47 - root function directly I'll just do that
45:48 - otherwise I would have to move the
45:49 - square root function into setup call is
45:52 - not defined uh sketch. Js
45:54 - line5 uh this is columns times
45:58 - rows there we go okay so you can see
46:00 - there's one random Point that's also one
46:03 - active point and you can see each time I
46:05 - reload the page it's somewhere there
46:07 - okay we're moving along here we're
46:09 - Trucking along here I'm getting
46:11 - somewhere now I think yes yes people in
46:14 - the chat are telling me to use a four
46:16 - each Loop I'm I have nothing against
46:17 - four each Loops but I think it's a
46:19 - little bit more readable to do this
46:20 - right at the moment um so let me go back
46:22 - to this paper and now we're going to
46:26 - look at step two this is
46:29 - the this is the tofu of the algorithm
46:32 - right this is where the main stuff is
46:35 - happening while the active list is not
46:37 - empty choose a random index from it okay
46:40 - let's start with that so I have to say
46:43 - down here let's put let's put step
46:45 - two at the beginning of draw and I'm
46:48 - going to say while um active is not
46:52 - while active. length is greater than
46:54 - zero that's that's saying as long as
46:57 - it's not empty now I'm going to make
46:59 - something a little bit different here
47:01 - the algorithm has a while loop B built
47:04 - into the description in other words it's
47:06 - saying wow this is true keep doing this
47:08 - keep doing this keep doing this but I
47:09 - actually don't want to do this I want to
47:10 - make use of the draw Loop which animates
47:12 - so I can see the algorithm animating
47:14 - itself so I'm actually just going to say
47:15 - if because I want to just do this one at
47:17 - a time and it's going to come around and
47:19 - do it again with draw so if active do
47:21 - length is greater than zero What's the
47:23 - next thing uh choose a random index okay
47:26 - so I'm going to say VAR index I I'll
47:29 - call that R maybe R equals random
47:33 - active. length and I need to floor that
47:36 - that's a random
47:38 - index and then generate up to K points
47:43 - chosen uniformly from the spher
47:46 - spherical annulus
47:48 - between Radius R and 2 R and oops sorry
47:53 - I don't have my
47:57 - there really no point to be sound
47:58 - effects um okay ah okay hold on hold on
48:00 - hold on we're going to be okay let's go
48:03 - about let's start with generate up to
48:05 - let's start with generate up to K
48:08 - points I'm going to say for VAR n equals
48:11 - z n is less than K n++ so I'm going to
48:15 - do a loop at least K times up to K
48:18 - points and then now this is kind of
48:21 - crazy uniformly from the spherical
48:25 - angular
48:26 - between Radius R and 2 R around X index
48:30 - I let's talk about what this
48:32 - means uh okay so I have to find an
48:37 - eraser which uh I'm going to use this
48:39 - paper towel so here's what we have to do
48:41 - this is kind of a useful thing in
48:43 - programming to sort of think about I
48:46 - have a point that I just
48:48 - picked this is my random active
48:51 - point now there is some value in our
48:54 - program called r
48:56 - which has this
48:58 - distance okay so R I don't know why I
49:01 - wrote distance there R has some length
49:03 - so what I want to do is pick another
49:06 - Point around this point whose distance
49:09 - is somewhere randomly
49:11 - between
49:13 - R and 2 R so in other words I want to
49:17 - pick any point that's within kind
49:22 - of
49:24 - this
49:26 - dut right I don't want it to be it can't
49:28 - be within R otherwise it's invalid and I
49:31 - don't want it to be really far away I
49:33 - want it to between R and 2 R so how do I
49:36 - do that well one thing I need to do is
49:38 - one thing I could do is just pick a
49:39 - random angle right first let me pick a
49:41 - random angle and then let me pick a
49:43 - random value between R and 2 R and I
49:46 - want to place the point offset from here
49:49 - along that angle somewhere between R and
49:52 - 2 R so that's what I need to do so let's
49:54 - come back to the code
49:58 - uh and what I want to do is say so first
50:02 - I want to angle random to Pi honestly
50:06 - here's the thing I could take some let
50:08 - me do it long- winded but I could take
50:10 - some shortcuts because there some
50:11 - functions in P5 that would sort of do
50:12 - some of these steps for me but um then I
50:15 - want to uh create the offset values so
50:20 - uh offset X is cosine of that
50:23 - angle uh offset Y is sign of that angle
50:26 - right this is trigonometry that if I
50:29 - have an angle I can get the the sides of
50:32 - the triangle right the from that angle
50:34 - with cosine and s look for one of my
50:35 - video tutorials that goes through this
50:37 - math so but actually what I can actually
50:39 - do by the way is just pick a random
50:42 - Vector so all of this really what I want
50:44 - to do is say VAR offset equals P5
50:48 - vector. random 2D because what that's
50:50 - going to give me is a random unit Vector
50:54 - pointing out in some direction from here
50:58 - and then all I want to do is make the
50:59 - length of that Vector between R and 2 R
51:02 - so now I want to uh create a magnitude
51:05 - which is some random value between R and
51:08 - 2 * R and then I want to take the offset
51:11 - and set the offset's magnitude to that
51:14 - random value and then where's the point
51:18 - that point actually I can just say
51:21 - offset add oh wait I forgot to get it so
51:26 - the position the position that I'm
51:28 - working with is from the active array
51:32 - that particular um so I remember I I'm
51:34 - picking a random point from the active
51:36 - array and then up to K times 30 times
51:39 - I'm going to pick random points around
51:40 - it between between what between R and 2
51:45 - R so now if I add position to that
51:48 - offset this is really the point and
51:50 - actually here's what I'm going to do I'm
51:52 - going to change my variable naming a
51:54 - little bit what I'm trying to do is make
51:55 - a new sample so I'm going to call this
51:58 - sample and I'm going to make a random
52:01 - vector and then and then sample's going
52:03 - to get the position added to it so now
52:05 - that's that actual point so I'm now done
52:09 - with this uh this particular step
52:12 - generate up to K points I've done one
52:14 - point uniformly between R and 2 R for
52:16 - each point check if it is within
52:20 - distance oh wait there's a mouse in the
52:21 - way check if it is within distance R of
52:24 - existing same samples using the
52:26 - background grid to only test nearby
52:29 - samples this is an exciting moment okay
52:33 - I don't know if anyone is still watching
52:35 - this video however many minutes in I
52:37 - might be like 20 minutes in already this
52:39 - is like a video about P disc Point
52:41 - picking but this is a moment because
52:43 - what I'm going to do here actually
52:44 - applies to a lot of other scenarios
52:47 - let's think about this for a second I
52:48 - want to talk about what's going on let
52:50 - me find my marker let me find my paper
52:52 - towel okay uh let me come over here so
52:57 - let's think about
52:59 - this there is a
53:02 - space and that space is full of
53:06 - points and I am working with a
53:09 - particular new point right
53:12 - here and let's say I want to know is
53:15 - this
53:16 - point too close to any of the points in
53:19 - the space most algorithms would say I
53:22 - have to check this point against every
53:24 - other point in the space and there could
53:27 - be you know something like 10 million
53:29 - points in a space and this could take a
53:31 - long time especially I'm doing this as
53:32 - part of some animation algorithm however
53:34 - the whole point of this Pon dis thing
53:37 - that we're doing is that the points are
53:40 - registered to a spot on the on some kind
53:43 - of
53:44 - grid and if the only thing I care about
53:47 - is is a point too close to another point
53:50 - if this point is within this spot on the
53:52 - grid I kind of know 100% that I don't
53:55 - need to check these points or these
53:57 - points or these points the only ones
53:59 - that are worth checking are the ones
54:01 - that are in immediate neighboring spots
54:03 - on the grid and this allows a massive
54:06 - Savings in performance and in a flocking
54:09 - simulation in a collision detection
54:11 - simulation this kind of algorithm can
54:13 - also be used and it's quad tree type
54:16 - stuff I'll do some other videos on that
54:18 - at some point but so let's look at how
54:19 - we're going to do that
54:21 - here okay
54:23 - now uh
54:25 - so what I need to do is
54:28 - check I want to check okay so first of
54:30 - all I need to know where is this point
54:32 - in the grid so I need to know its column
54:35 - position is sample dox / W and I need to
54:40 - floor that so this is where it's going
54:42 - to be in the
54:46 - grid then I need to know it's row
54:48 - position which is sample doy / W and
54:51 - then I need to do another loop like I
54:52 - could check each neighbor individually
54:54 - but let's do another Loop right uh
54:56 - nested loop I starts at -1 which is like
54:59 - the spot to the left I is less than or
55:02 - equal to 1 which is the spot to the
55:04 - right I
55:06 - ++ and then uh J is equal to1 same thing
55:11 - j is less than one
55:14 - j++ and then what I want to do is I want
55:18 - to look at uh uh I want to look at a
55:21 - point I don't know what to call it um uh
55:25 - neighbor I'll call it neighbor equals uh
55:28 - the Grid at I + J * the number of
55:31 - columns and I want to check the distance
55:34 - now between the
55:36 - sample the distance between and I can
55:39 - use the P5 Vector distance function the
55:42 - distance between the sample and the
55:45 - neighbor and I want to do something
55:48 - right this is gonna
55:50 - if if that distance is less than
55:53 - R right the whole point of this whole
55:57 - thing that we're doing is to make all
55:58 - these points on the screen where none of
56:00 - them are within this distance threshold
56:02 - okay so this is very key right here what
56:04 - do I do if I find one by accident that's
56:06 - too close to so let me go back to this
56:09 - and see for each point in turn check if
56:12 - it is within distance R okay if a point
56:15 - is adequately far from existing samples
56:18 - then it becomes then it goes into the
56:19 - active list and it's good okay so we're
56:21 - trying to find at 30 times we're going
56:23 - to try to find a Point that's okay so
56:27 - here what I think would work best is for
56:29 - me to create a Boolean variable like I'm
56:31 - going to call it okay and I'm going to
56:33 - assume it's okay VAR okay is true it's
56:36 - going to be okay however if that
56:38 - distance is ever less
56:40 - than R it's not okay anymore so I got to
56:45 - check everything now here's a
56:47 - problem I don't want to check ah here's
56:49 - another first of all there might be
56:50 - nothing in the grid so I only want to do
56:53 - this uh if um I only want to do this if
56:56 - the neighbor is not equal to negative 1
56:58 - remember negative one there's probably a
57:00 - different way I might clean this code up
57:01 - later Famous Last famous words of every
57:04 - single programmer ever I might clean
57:06 - this code up
57:08 - later um but um here remember if
57:11 - something's not actually in the grid
57:13 - we're just sticking a negative one in
57:14 - the array so I only want to do this
57:16 - right if negative one if there's nothing
57:18 - there it's definitely not too close
57:20 - because there's nothing there to be too
57:21 - close to so okay so after I do this I
57:25 - want to check and say after all of this
57:27 - if it's okay what do I want to do I want
57:31 - the Grid at that
57:35 - spot to be that sample and I want
57:39 - active I want to add that sample to
57:42 - active so I I'm remember I'm keeping two
57:45 - lists I'm keeping an array of this grid
57:47 - so I want to put the point in the grid
57:49 - but I also want to put it in the active
57:51 - list because it's going to be another
57:52 - point that we could use later to pick a
57:54 - point next to it okay uh boy there um
57:59 - okay
58:00 - so now let's think I I feel like there's
58:03 - some there's some sort of missing issue
58:04 - here there's kind of an issue what if I
58:08 - I I think I need to check it's not
58:10 - written in let's keep let's keep reading
58:12 - the
58:13 - paper
58:14 - um so okay adid as the next uh uh okay
58:19 - so let's let me I I feel like I missed a
58:21 - step here that isn't explicitly written
58:23 - here but I'm going to keep going with
58:24 - what's written WR here so okay so one
58:26 - thing we should do is say like well if
58:28 - it's okay remember I'm in this Loop to
58:30 - try this K times if I find a point I
58:33 - don't need to keep trying so um or or
58:37 - should I keep trying uh generate up DEC
58:41 - points ah I guess I could keep trying uh
58:45 - but but I do need to check I do need to
58:47 - figure out if I get Decay and I haven't
58:49 - found a point then uh at least one point
58:53 - then I need to remove this a active one
58:55 - so let's say let's create a variable
58:56 - called found uh is false so I'm assuming
59:00 - I'm going to try now K times if I find
59:02 - something I'm going to set found equal
59:03 - to True here is where I know I found
59:05 - something so I'm going to say found
59:07 - equals
59:08 - true and then what I'm also going to do
59:12 - now is if I get to the end of this Loop
59:15 - K boy there's a lot of code here um if
59:19 - it's not found what do I want to do
59:21 - active. splice R comma 1 right remember
59:25 - the whole point is I started with a
59:26 - random point in the active list and I
59:29 - tried to find points around it that are
59:31 - okay if I didn't find any points around
59:34 - it that are okay I want to take that
59:36 - point out of the list and splice is a
59:38 - JavaScript function that removes an
59:40 - element from an array splice at the
59:42 - index R oh boy there's a big problem
59:44 - here right I've used r as the variable
59:46 - name for that minimum dis distance
59:48 - threshold and then I just made a new
59:50 - variable R for that index so I'm going
59:51 - to rename this to Rand index let's let's
59:54 - use a better variable name Rand index
59:57 - and then go back and uh add that here
60:01 - okay I can't believe I've written so
60:02 - much code without running it it's
60:04 - terrible idea actually I generally try
60:05 - to avoid doing this um yeah Taylor in
60:08 - the chat says can't you break after OA
60:10 - um okay equals false I think actually
60:13 - after okay is true yeah so I was going
60:14 - to put a break here um let's comment
60:17 - this out and see how it works with or
60:19 - without it let's just put a little
60:21 - question here should we break oh we'll
60:23 - discuss that later
60:25 - so
60:26 - weirdly I kind of have all of the code
60:29 - right now right if we go back uh and
60:32 - look at this um we're done now but I
60:35 - know that I I in my head I I there's
60:37 - something that I'm missing let's see if
60:38 - you can think about what I'm missing but
60:40 - let's actually just try running
60:43 - it
60:45 - well uh nothing's happening you know
60:50 - let's let's uh which is not surprising
60:53 - I'm surprised that I'm not seeing
60:54 - anything at all at all actually oh the
60:55 - camera went off okay well this is can be
60:58 - an edit Point anyway MAA who's maybe
61:01 - watching I'm gonna make this an edit
61:03 - Point too
61:07 - um Danish in the chat asks can anybody
61:10 - tell me what he's trying to make and uh
61:12 - apparently you are correct bacon uh
61:15 - someone in the chat named bacon a pink
61:17 - dot half an hour of programming and we
61:19 - have a pink dot um okay so um I'm
61:24 - thinking here here
61:26 - uh um um what could be I just want to
61:30 - look here for a second JavaScript is so
61:32 - not interested in giving me errors ah
61:36 - there's definitely a problem I'm
61:38 - surprised that I didn't get
61:40 - that uh you know what I could do so I'm
61:43 - going to get index out of bounds errors
61:45 - that's one thing that's an issue
61:49 - um uh so um oh yes thank you thank thank
61:54 - you thank you thank you thank you next
61:55 - to Kate okay so that's certainly a um
61:59 - that's certainly a big mistake that I
62:01 - had there sorry I'm reali fan okay um so
62:06 - I'm gonna come back into the tutorial
62:08 - now
62:11 - um okay uh so there's a bunch of errors
62:14 - in my code one of which which is quite
62:16 - crucial is that actually the uh this
62:19 - here is absolutely wrong what I'm
62:21 - looking for right this nested Loop where
62:23 - I'm trying to find the neighbors I need
62:25 - to add the actual place that I'm at so
62:29 - this should actually be column plus I
62:32 - plus and I kind of hate the way that
62:35 - I've written this row plus J times
62:37 - columns but we'll leave it um you know I
62:40 - I I think I might like to say something
62:42 - like this just to uh kind of put this in
62:45 - a separate variable like calculate that
62:47 - Index this way okay so that was
62:49 - something I definitely was missing
62:52 - um uh so that's thing I'm definitely
62:54 - missing let's see if we can kind of
62:56 - debug this a little
62:59 - bit uh actually I'm going to there's
63:02 - something else that I feel like I'm
63:03 - missing which is sort of crucial which
63:04 - is that if I pick a point and let's add
63:08 - the break there maybe the break is a bit
63:10 - of a
63:12 - problem uh let's see if things are
63:16 - going uh let's
63:18 - um whoa okay let's Okay
63:23 - pause
63:25 - don't pause I'm going to do some
63:25 - debugging
63:27 - now
63:32 - uh oh you know what it got stuck at one
63:35 - point in an infinite Loop you can see if
63:38 - you ever see this like the page I I
63:40 - shouldn't probably shouldn't use this
63:41 - live reload thing look you can see this
63:43 - tab is
63:47 - crashed calls is not defined sketch line
63:52 - 48 ah look at this I have oh these I
63:55 - didn't make Global variables so that's a
63:57 - bit of a problem wa hold on I don't know
64:00 - if that should be edited
64:01 - out but I'm going to go back into it as
64:03 - if there was like an edit point there to
64:05 - kind of like shorten this when I publish
64:06 - this as a standalone video okay I'm G to
64:09 - come back let's let's check let's check
64:12 - the code oh calls is not defined okay so
64:15 - oops one thing that I forgot is that if
64:17 - I'm going to use these in setup or Draw
64:19 - they need to be Global variables so
64:21 - let's do that ah okay oh look at this
64:25 - amazingly it's actually
64:26 - working I kind of thought for sure I had
64:29 - a problem ah yeah okay great so we we
64:32 - have an Eric uncaught cannot read
64:34 - property copy of undefined let's see if
64:36 - we can uh the distance function uh in
64:38 - draw uh sketch. JS line 52 so we have a
64:43 - problem here and I think I know this is
64:44 - what I was thinking of here that um what
64:48 - it if neighbor does not equal negative
64:51 - one well guess what neighbor could also
64:53 - be could neighbor ever be or could
64:56 - sample be undefined I'm trying to think
64:59 - about this uh well to me there's an
65:02 - issue here which and I don't know if
65:03 - this would this this this is what I'm
65:06 - thinking okay this is what I'm thinking
65:08 - I'm thinking that what this new point
65:11 - that I've
65:14 - picked if grid oh oh I know what it is
65:18 - of course so there's definitely a major
65:20 - issue here which is that if neighbor
65:23 - does not equal Nega one or if
65:27 - neighbor I think I could just say if not
65:30 - neighbor and you know what you know what
65:32 - would be better let's not even because I
65:35 - could just fill it with
65:37 - undefined because um undefined in
65:40 - JavaScript evaluates to
65:43 - false um and then uh was there another
65:46 - place that I was checking negative one
65:49 - and then I can just also say if not grid
65:51 - index I which I think is a better way to
65:53 - the reason why I want to do this is this
65:56 - is
65:57 - sometimes going to give me what if I'm
66:00 - on the edge right if I'm if I'm in the
66:02 - cell on the edge and I try to look to
66:05 - neighbor negative one it's going to be
66:07 - undefined so I also need to check for
66:09 - that and if I come back over here um did
66:14 - I switch to the other screen there I
66:15 - don't know if I did uh so I'm still
66:18 - getting this issue uh okay uh okay what
66:24 - what happened
66:26 - here uh sketch line
66:29 - 52 so let's look at
66:33 - uh let's look at what the value of
66:35 - neighbor is
66:37 - undefined oh if neighbor I only want to
66:40 - do this not if not neighbor if
66:43 - neighbor cannot read property X of
66:45 - undefined line
66:48 - 78 uh if only if not if not only if boy
66:54 - uh here we go now we can start to see
66:57 - this working and we're getting this
66:58 - distribution now I kind of thought that
67:00 - I needed another check but I'm kind of
67:02 - amazed that this is working anyway I
67:03 - guess I don't need that other check and
67:05 - you can see which points are active and
67:07 - which points are finished and we can
67:10 - let's just let this finish it should get
67:13 - um now the reason why you're not seeing
67:15 - this happen really really fast is
67:17 - because
67:19 - um is because I'm doing it once per
67:22 - frame and P5 only runs like 30 frames or
67:24 - 60 frames per second but I could now
67:27 - really really couple things I want to
67:28 - check one I want to take this console
67:29 - log out one thing I'm just curious what
67:31 - happens if I take out this break yeah
67:34 - then we can find multiple points per
67:35 - frame so if I'm checking for 30 points
67:37 - around a point this is then I'm finding
67:39 - multiple points per frame doesn't really
67:41 - make a difference I I kind of like the
67:43 - animation better when I am uh enforcing
67:47 - just one point per
67:49 - frame and look at that starting from the
67:51 - bottom now um but something that I want
67:53 - to uh add here just to show you is I'm
67:55 - going to change this to a while
68:00 - loop and look at this so there is a
68:03 - issue with the
68:05 - code which is that um what happens when
68:08 - it it's not finishing correctly so I
68:11 - need to figure this
68:13 - out uh right so Taylor S is asking this
68:16 - question how quick is it if it runs
68:17 - entirely one frame and this is not
68:19 - working right now and I I I I even
68:22 - crashed the uh so so let's think about
68:25 - this why is this not working so I think
68:27 - there's an issue this is an issue that
68:29 - I'm thinking
68:30 - of when I pick I know what the problem
68:34 - is what if I pick this sample point and
68:38 - there already exists a point in that
68:40 - spot in the grid I could be stuck in an
68:42 - infinite Loop because I could
68:44 - continuously just keep picking a new
68:45 - sample point if the grid is Ever full I
68:48 - don't want to pick points anymore so I
68:50 - think that I should add a check right if
68:54 - grid column plus row times The Columns
68:59 - right if it
69:00 - exists then
69:05 - uh then I don't right if something ex
69:09 - already exists there then um also skip
69:17 - everything hold on a sec I'm
69:20 - thinking right let me think about this
69:22 - for a second more
69:25 - pause wait a sec okay let me think about
69:28 - this um right I just picked a new sample
69:31 - and a sample already exists there found
69:34 - is going to be I don't want found to be
69:37 - able to be true so I should just skip
69:40 - this whole thing that point is no good
69:44 - okay so I can put that around there yeah
69:46 - that's definitely going to be
69:47 - right sorry I meant to um oops I have to
69:53 - I have to go back back into this video
69:55 - is this what it
70:00 - was
70:01 - if let me think about this remove oh
70:05 - hold on hold on let's put it back to if
70:07 - I got to get this right and then we'll
70:10 - edit back into the
70:14 - video uh so now I only have one point
70:17 - why is that
70:21 - uh the sample the new sample that I
70:24 - picked should be in a new
70:30 - spot uh
70:32 - no am I picking by accident in the
70:37 - same just
70:39 - curri just want to do this for a
70:43 - second no what did I miss okay hold on
70:47 - we're GNA figure this out everybody this
70:49 - last little
70:52 - piece
70:58 - right that
71:00 - works
71:06 - why right let's look
71:12 - at let's look at
71:16 - this oh no no no I'm I'm always doing
71:19 - this it this needs to be a not if it
71:21 - doesn't exist go ahead
71:24 - there we go okay hold on I got to go
71:25 - back into the video because now I should
71:27 - be able to put a while
71:31 - here no infinite Loop
71:35 - still uh okay hold on what's happening
71:39 - at the
71:42 - end
71:46 - uh
71:48 - uh boy this am I this is a much um more
71:53 - complex problem that I imagine okay so
71:54 - this is working let's let it do this
71:58 - um oh no no not while here the while
72:01 - goes here
72:03 - right
72:05 - no did I do that right okay hold on
72:08 - everybody let's have this do it
72:12 - uh
72:15 - um
72:18 - um I want to do T oh hold on let's make
72:21 - um let's make the uh space between them
72:26 - bigger and the canvas really
72:34 - small so what's happening at the
72:41 - end so
72:43 - let's let's look at the um active
72:52 - array
72:55 - things aren't getting removed from the
72:57 - active array it
73:11 - seems yeah look at
73:14 - that maybe while active. length is
73:17 - greater
73:22 - than
73:25 - no if it's empty I want to
73:30 - stop let's just agree Java is better why
73:33 - are there so many points in the active
73:35 - array all right let's think about
73:38 - this where am I removing
73:43 - stuff if not
73:52 - found round is
73:54 - false all right
73:56 - let's do
73:59 - this also how are there so many
74:02 - points um where do I
74:07 - uh no if it's GES to the end the index
74:10 - would stay the
74:15 - same okay hold on yeah that's that's
74:19 - weird um so let's let me make the frame
74:20 - rate
74:22 - one
74:27 - let's look at
74:32 - this little more
74:38 - closely look at
74:40 - this it's adding points somewhere that I
74:43 - can't
74:46 - see so let's look at
74:52 - um
75:01 - sample is always a new Vector
75:09 - right this was going so well till I ran
75:11 - into this
75:13 - problem it's interesting how it's
75:14 - working but it's just not finishing it's
75:16 - got all this extra stuff in there that's
75:22 - unnecessary
75:31 - let's look at the sequence
75:35 - here add add add add add add so what are
75:42 - those points what's being added when I
75:43 - can't see
75:45 - something
75:52 - uh
75:55 - add add
75:58 - add yeah look here's a point off hold on
76:02 - hold on hold stop stop stop how do I
76:06 - stop no oops no
76:10 - Loop why are there points being
76:13 - generated off
76:15 - screen oh oh oh oh so points should be
76:22 - invalid I've got to
76:24 - check because of the way JavaScript is
76:28 - okay okay I think I know what's going
76:31 - on um yeah you know I always forget this
76:35 - about JavaScript JavaScript I would get
76:37 - an error if I tried to put a point in
76:40 - the grid it doesn't exist it's actually
76:42 - just the space is expanding beyond what
76:45 - we can
76:47 - [Laughter]
76:49 - see because it's just like the array is
76:52 - not a fixed
76:54 - length so
76:57 - funny I mean not so okay I have to think
77:02 - about how to solve this and then I this
77:05 - video is gets this part's this whole
77:07 - thinking part's going to be edited out
77:09 - I'm G to start with the debugging let's
77:10 - look at the code boy oh
77:14 - JavaScript oh JavaScript okay um this is
77:18 - the
77:19 - problem
77:21 - here this point is invalid if it's off
77:26 - screen okay so that's that's actually
77:28 - should be yeah JS array is a dynamic
77:31 - array so
77:35 - um so we there in addition
77:42 - to
77:45 - checking if it doesn't
77:51 - exist it can exist or be off the
77:54 - screen so uh it can't exist or column it
77:59 - was just expanding forever which is kind
78:01 - of
78:02 - interesting but not what we want okay uh
78:07 - okay so I'm G to go back into this video
78:08 - and I think I can I think I can fix this
78:14 - um I'm trying to decide if I want to
78:19 - um okay so uh
78:24 - um Let me let me I just want to
78:27 - uh take this out okay
78:34 - and okay all right so
78:44 - um okay I'm back and to debug this um
78:48 - which I just did and you can find the
78:50 - live stream version of this if you want
78:51 - to see that about like 15 minutes of
78:53 - figuring this out uh I've changed the
78:54 - frame rate to one and I'm looking now
78:57 - and seeing like whoa why is it
78:59 - generating all of these positions that
79:01 - are like way off screen like -16 and -68
79:04 - those aren valid points in my space and
79:07 - I forget I always forget that a
79:09 - JavaScript array is this Dynamic thing
79:12 - so it has no problem just saying like oh
79:14 - okay you're generating points off the
79:16 - screen I'm just going to keep adding
79:17 - them as opposed to giving me something
79:19 - like an index out of bounds exception
79:20 - like oh you generated a point that's not
79:22 - part of your original grid so I need to
79:24 - protect against that in some way and the
79:26 - way that I think I could do that right
79:28 - here is um in the same way that I am
79:32 - checking to make sure that this is not
79:37 - um that this is a a spot that's not
79:39 - already filled um what I can also check
79:43 - is that column I want to make sure that
79:46 - column is less than columns and I only
79:49 - can go forward if the column is actually
79:51 - on the screen and row is less than the
79:54 - total rows and it is a spot that is
79:57 - empty so that if I add that in we should
79:59 - be able to watch this now and if I run
80:02 - this I shouldn't see any points being
80:04 - generated off
80:06 - screen so let's look and see if this is
80:09 - working now I'm going to console log the
80:11 - length of the active array and I'm going
80:14 - to get rid of console logging where that
80:16 - point is and I'm going to put the frame
80:19 - rate
80:20 - back and I'm going to run it again
80:23 - and we should
80:27 - see okay time out I got closer I still
80:31 - have points off
80:36 - screen so
80:39 - maybe oh greater than Z yeah okay also
80:44 - oh my God so many things to check I also
80:45 - have to make sure it's greater than all
80:47 - right I I can't just check if it's
80:50 - not I'm going to just give my a clean
80:53 - edit
81:00 - Point obviously I only checked not
81:03 - obviously because apparently not
81:04 - obviously to me I only checked if it was
81:06 - off the right hand side or the bottom so
81:08 - I need to also check if it's greater
81:10 - than zero or if it is uh uh uh or if
81:14 - it's greater than and actually zero is
81:15 - perfectly valid so greater than negative
81:17 - 1 I could say greater than or equal to
81:19 - zero all of these as well this is a very
81:21 - awkward if statement so maybe I can
81:23 - figure out a better way to write that at
81:24 - some point and now you can see there we
81:26 - go active got down to zero and you can
81:28 - see how it fills up rather quickly so
81:30 - let's go back now and I'm going to
81:32 - comment this out I'm going to make the
81:35 - screen again 400 by
81:38 - 400 and I am going to uh give myself
81:42 - some more space to see this
81:44 - in uh I'm going to make R back down to
81:47 - like 10 and I'm going to run it and you
81:49 - can see now here it is filling the
81:51 - entire window now let's just see if I
81:53 - actually put in a while loop here in
81:57 - draw and I could also say no Loop so it
81:59 - only does it once and you can see boom
82:04 - each time I
82:06 - refresh it's you can see I get a
82:08 - completely different distribution very
82:09 - very fast and I could make this even
82:11 - higher resolution I'm going to get this
82:13 - image very very fast I do kind of like
82:15 - watching it grow though so let's see if
82:17 - we can make some something a little
82:19 - prettier out of this so one as we see
82:21 - the active point points um and the
82:23 - non-active points which is kind of
82:25 - interesting to see um one thing that I
82:28 - might be curious to do is change that R
82:29 - to like four and change the stroke
82:31 - weight to one and then also I think what
82:34 - could be interesting is let's actually
82:35 - have it pick more than one point per
82:37 - frame uh so I'm going to oops I'm going
82:40 - to say for of our total equals zero
82:42 - total is less than five uh total plus
82:45 - plus so this I'm just going to do this
82:47 - whole
82:49 - thing uh five times per frame
82:53 - I don't want to draw everything five
82:54 - times per frame and we can see now you
82:58 - can see it growing kind of faster oh
82:59 - look at this I have a stroke weight four
83:01 - somewhere
83:02 - else
83:07 - uh and you can see look at this kind of
83:10 - Spacey thing growing uh I think it's
83:12 - even actually kind of uh beautiful let's
83:15 - make this I mean you can now stop
83:16 - watching this video and go and grab my
83:18 - code and play around with this but I
83:20 - could do like 25 at a time it's kind of
83:21 - nice to watch grow um you know I could
83:24 - even make that R like two and you could
83:27 - see look at this kind of amazing uh what
83:30 - I'm getting that you could uh kind of
83:32 - pattern and then I could also think
83:33 - about uh what
83:35 - if uh as I'm drawing these points I did
83:39 - something like I said color
83:41 - mode uh
83:43 - HSB and I used the color to be so um
83:48 - this is just the active let's get rid of
83:50 - the active points for a second what if I
83:52 - said said um the color is I modulus
83:56 - 360 uh 255 oh 100 100 I think are the
84:01 - defaults so you can see something
84:03 - interesting Happening Here uh and maybe
84:05 - I should say something like uh I divided
84:09 - by
84:10 - 100 um you can see I kind of am getting
84:12 - this rainbow pattern out of the growth
84:15 - of points so
84:19 - um that's interesting this is not what I
84:22 - was
84:23 - expecting I oh because I'm doing it
84:26 - based on where they are in the grid not
84:28 - their order of when they were added so
84:30 - you know what I would need to do ah
84:34 - um um oh oh some people are making great
84:37 - suggestions in the chat which I would
84:39 - like to I I this video needs to be over
84:41 - soon so this by the way is just giving
84:43 - you you're just seeing the stripes
84:45 - because it's just drawing them according
84:46 - to the grid pattern but what I want to
84:49 - actually do is have their order so let's
84:50 - have another array sure there's I'm
84:53 - going to call it
84:54 - ordered and every time I add a sample to
84:57 - the grid a valid sample I'm going to say
85:00 - ordered. push sample so I'm just going
85:04 - to make a separate array that just has
85:06 - them in order and then actually what I
85:08 - would like to do is uh draw them based
85:11 - on the order and whoops uh and I need to
85:15 - do this as
85:17 - well uh uh order ordered I called it
85:20 - ordered I think right so if I add this
85:24 - now uh we can see and I don't need that
85:26 - divide by 100
85:29 - anymore you can see now their color is
85:31 - according to when they were created and
85:33 - this is a bit too uh you know too
85:36 - extreme and you know what might be nice
85:38 - by the way is just that my stroke weight
85:39 - be
85:40 - R uh because then you can see there we
85:43 - go um and let's you know what just so I
85:46 - can see this more consistently um let's
85:49 - add always start the point not random
85:51 - but actually have have the first point
85:53 - just be in the
85:56 - middle
85:58 - and there we go okay so now we have fast
86:04 - animated plle dis pointing evenly
86:08 - distributed and uh one of the
86:09 - suggestions and really actually
86:11 - unfortunately the way that I've written
86:13 - this because of the way that this should
86:14 - really be divided by two or times
86:17 - 0.5 um uh there we go so that that way
86:21 - they won't be overlapping so you can see
86:22 - this is kind of an interesting uh
86:24 - algorithm for seeding these points um my
86:27 - um somebody in the chat uh yes I am
86:29 - addicted to HSB you know I'm going with
86:31 - the Rainbow theme if somebody I I should
86:33 - really think of a different way of doing
86:35 - it but it's my theme um so if somebody
86:38 - uh somebody suggested and this is an
86:40 - interesting thing to think about how
86:41 - could you start with larger points and
86:44 - then slowly over time have smaller
86:46 - points and have that distance threshold
86:48 - be something that's variable and that
86:50 - grid be something that's variable that's
86:51 - kind of probably quite a complex prog
86:53 - problem which I would like to think
86:54 - about and do future videos on okay so
86:57 - thanks for watching this video about uh
87:00 - Pome distribution of points in a
87:02 - two-dimensional plane see if you can
87:04 - expand this into three dimensions see if
87:06 - you can change the sizes of these find a
87:07 - different way to color them uh use this
87:10 - as a way of seating another type of
87:12 - system and um what kind whatever
87:15 - creative possibilities you build out of
87:17 - this uh build from the code that you'll
87:19 - find in this video's description and
87:21 - keep me posted and share on Twitter or
87:23 - wherever you can share it and i' I'm
87:25 - excited to see what you make okay
87:28 - goodbye uh wow that was kind of uh way
87:32 - longer than I ever expected um which
87:35 - just goes to show you if I don't do
87:37 - these practice these things in advance
87:39 - um I don't really know how long it's
87:41 - going to take it is 12:20 I definitely
87:43 - want to do more
87:48 - today so
87:51 - um
87:53 - [Music]
87:54 - things that I'm thinking
88:01 - about
88:12 - are okay here this one we could
88:14 - definitely do
88:17 - quickly this is a
88:21 - possibility
88:26 - I feel like we should probably do this
88:27 - one oh yeah let's do this one this cuz
88:29 - this look look how similar this looks in
88:31 - an interesting way ibe we should do this
88:33 - one look HSP right I think probably this
88:38 - one there was one other thing that I was
88:40 - thinking about oh traveling
88:50 - salesperson right we could apply the
88:53 - traveling salesperson to those points I
88:55 - really want to do
89:05 - that I need some energy I'm feeling
89:07 - quite
89:12 - tired I don't know if this will help oh
89:14 - there's 82 people watching right now
89:16 - really that's crazy uh what other music
89:20 - do I have I'll give you a sneak preview
89:23 - of the theme song this is just a sneak
89:34 - preview okay that's my quick sneak
89:37 - preview uh everyone spam
89:39 - agario
89:44 - um sorry limit Za I should say that I I
89:47 - think I used YouTube's like standard
89:49 - words of uh standard list of words to
89:52 - immediately um block somebody in the
89:55 - chat so if you use certain words in the
89:56 - chat I apologize okay
90:01 - um okay I'm looking to see if anyone's
90:03 - yeah agario is not going to happen today
90:05 - I know you guys I did uh the beginning
90:08 - of it oh question time yeah you could
90:11 - watch ask some questions
90:13 - now
90:18 - um um okay so I'm I'm thinking it is
90:22 - 12:20 I I think I've got you know I'm
90:25 - I'm a little bit losing energy computer
90:27 - craft yeah I really want to do computer
90:28 - craft yeah I'm not prepared for
90:31 - that
90:32 - [Music]
90:38 - um yeah so I'll mention by the way
90:41 - um you all of you have asked about show
90:44 - I I would first of all I done a whole
90:46 - series of about 10 videos on genetic
90:48 - algorithms uh about half of them have
90:50 - been published you can find the rest of
90:51 - it in the in the live stream archives
90:53 - but those videos are machine learning so
90:56 - genetic algorithms is a is an algorithm
90:58 - to use an evolution use the evolutionary
91:00 - process for a system to learn something
91:03 - to adapt over time it's an Adaptive
91:05 - process
91:07 - um uh I the the machine learning stuff
91:10 - is probably going to come more in the
91:11 - fall I've been but but you can two
91:13 - things you can do uh if you want to kind
91:16 - of stay up to date on what I'm thinking
91:18 - um thinking I'll go to uh
91:23 - um I'm going to go to uh sort by most
91:28 - requested which is clearly machine
91:30 - learning I did a pass over my outline so
91:34 - the very first this is the set of videos
91:36 - that I'm going to make and I'm also
91:38 - writing a new chapter to the nature of
91:39 - code book that will'll go not through
91:41 - all of this but I want to start I think
91:43 - with just basics of classification I
91:45 - think I want to implement this thing
91:46 - called K nearest neighbor like from
91:48 - scratch and then show a how a library
91:50 - would do it more efficiently
91:52 - and look at the basics of neural
91:53 - networks and I've been looking also at a
91:56 - library called Deep learning forj which
91:57 - is a Java based deep learning library
91:59 - which I can use with processing uh to do
92:02 - um some deep learning stuff with images
92:04 - or shapes and so um please uh on this at
92:07 - this GitHub issue thread um send me your
92:09 - ideas for example applications or
92:12 - particular libraries that I might look
92:13 - at um that could be
92:16 - useful um yeah the Whiteboard is peeking
92:19 - in I will fix that uh um so that's one
92:23 - thing I'll mention about machine
92:24 - learning stuff there was something else
92:26 - that I was going to say that somebody
92:28 - had asked
92:29 - about uh uh Titus in the chat asks could
92:32 - you create a video how exactly pein
92:35 - noise algorithm works I have that video
92:37 - already go look for my pein noise uh
92:39 - playlist so there's a playlist of five
92:40 - or six videos about pearlin noise and
92:42 - how it works um okay
92:46 - uh so snake automated snake game yeah
92:50 - okay uh
92:53 - uh I'm looking back and forth computer
92:56 - craft yeah okay somebody had asked
92:58 - something else
93:01 - um all right so let's see here no um I
93:05 - think what I am going to do is finish
93:08 - off
93:09 - today with another coding challenge to
93:12 - make I would like to see this in my
93:15 - JavaScript window this one's not going
93:17 - to be so easy I have to say I thought
93:19 - the other one I thought the other one by
93:21 - the way was going to be really easy or
93:23 - easy is the wrong word but I thought the
93:24 - other one was going to take me very
93:25 - little time amazingly it took quite a
93:27 - bit longer than I
93:29 - thought um I'm tempted to do this though
93:32 - so temp this is this is going to take
93:34 - too
93:35 - long so hard to decide I should I should
93:38 - definitely always decide in
93:41 - advance that's why I'm looking at the
93:42 - chat yeah interesting it does look it's
93:45 - interesting how it looks so similar to
93:46 - the last one so let's let's do it okay
93:48 - so this I'm going to finish off with
93:49 - this today an answer some question more
93:52 - questions at the
93:53 - end um let me get myself uh ready
93:59 - here uh as always I always forget the
94:02 - this
94:03 - do
94:13 - [Music]
94:18 - doget this this
94:22 - this do this dot s this dot dot dotg do
94:27 - this dot this dot this dot going to do
94:31 - going to
94:32 - do going to do going to
94:37 - do
94:41 - do
94:42 - [Music]
94:50 - do never forget this
94:56 - dot this dot this dot this do never
95:00 - forget the this dot I'm G to do the this
95:02 - this dot this dot this dot the this Dot
95:05 - Song never forget the this dot somebody
95:07 - composed that song for
95:20 - me
95:43 - I'm resting my voice just try to get
95:45 - ready for the next
95:50 - challenge
96:02 - [Music]
96:14 - okay oh F Looper ask why you never play
96:17 - my this Dot Song well
96:19 - okay that's a very good
96:24 - question and I don't have a oops I don't
96:28 - have a good reason for it other than
96:31 - when I made the soundboard I had two
96:34 - this dot songs and one pear and noise
96:36 - song and so since they were by two
96:39 - different people I took the this Dot
96:41 - from the other person I took the PE
96:43 - noise one from you which is so this is
96:45 - random is noise pearly noise that is in
96:48 - the core but I should add your this do
96:50 - song hereand lthm itself those numbers
96:53 - aren't related at all you pick like I'm
96:55 - picking random numbers between 0 and 10
96:57 - 9 2 7 6 1 n 48 9 2 1 3 I pick nine a lot
97:04 - apparently but with pear and noise I
97:06 - might pick numbers like this two three
97:09 - four three four five six five four five
97:13 - six seven five six seven 5 6 S 8 9 8 7
97:18 - six well this is like noise performance
97:20 - art
97:21 - [Music]
97:26 - 2 I'm thinking my brain is
97:32 - working this is like noise
97:36 - performance
97:40 - 2 but with curly noise I might pick
97:43 - numbers like this 2 3 4 3 four five six
97:47 - 5 4 five six 7 five six
97:52 - noise that is noise so this is noise
97:54 - that is noise this this is noise that is
97:57 - noise so this is noise that is noise
97:59 - noise that is noise so this is noise
98:02 - that is noise this this is noise that is
98:04 - noise so this is noise that is
98:09 - [Music]
98:19 - noise that is
98:22 - but with pearing noise I might pick
98:24 - numbers like this 2 3 4 3 4 6
98:31 - 5 5 2 3 4 4 5 hello have
98:40 - aell this is like pear noise performance
98:43 - art all right I'm getting ready to now
98:48 - do a particular video on the algorithm
98:52 - I'm looking for a tissue feel like I
98:54 - need to blow my nose I'm gonna step over
98:55 - here to do that I'm gonna mute my
98:57 - microphone I'll give you a little
98:58 - sampling of the theme song
99:13 - again um all right so uh here we are uh
99:18 - I I'm asked uh at what age did I start
99:20 - programming okay well I don't want to
99:22 - get too lost in this uh story here but
99:24 - I'll give you a a multi-part answer to
99:26 - that question I believe I first did
99:28 - programming in the basic programming
99:30 - language on an Apple
99:32 - 2C somewhere in a like sort of
99:35 - Elementary School kind of age I also
99:37 - remember in Middle School in like a
99:39 - seven in seventh grade I did some
99:40 - Assembly Language and some more basic
99:42 - programming and then that was it and
99:45 - then I didn't actually program again
99:49 - until I want to say age 30 if you can
99:53 - believe that so I actually really only
99:54 - learned to program that like no 27 what
99:57 - what I have to do the math here so hard
100:00 - 28 it was 20 27 or
100:04 - 28 okay uh now that I've admitted that I
100:08 - I wasted a lot of years although
100:10 - actually I think not programming is not
100:12 - is I in anyway diffusion limited
100:17 - aggregation okay here we
100:19 - go
100:26 - [Music]
100:32 - okay let's see here we go this is going
100:35 - to be my last coding challenge for today
100:38 - uh I need to move this over here move
100:41 - this over here I want to cycle the
100:44 - cameras this is one that I really really
100:47 - feel like I should have done practiced
100:50 - in it
100:52 - Advance now I have I especially if I'm
100:54 - going to do this in JavaScript with but
100:56 - I think I'll could I'll do this one in
100:58 - JavaScript okay here we
101:01 - go ah so people are asking about the
101:03 - theme song so the the theme song is
101:05 - completed and uh I'm I'm working on I'm
101:09 - not actually I I with collaborating with
101:11 - um some uh friends and colleagues I'm
101:14 - working on a music video which is a lot
101:16 - of weird green screen footage you um and
101:19 - I um by the way so you're interested I'm
101:21 - looking for animations and colorful
101:24 - things made with processing or P5 that
101:26 - could maybe make their way into the
101:28 - music video as part of the backgrounds
101:29 - or the foregrounds so if you're
101:31 - interested in submitting something um
101:33 - you can I I would say tweet me at
101:35 - shiffman is probably the best way okay
101:38 - um here we
101:40 - go let's get started it's 12:34 I think
101:44 - I I have maximum an hour I need to eat
101:47 - lunch I have something to do at 1:30
101:49 - which is an hour from now
101:51 - so I would like to be done before that
101:52 - but let's see how it goes okay
101:57 - uh here we go there's too much going on
101:59 - in the chat I can't follow it any any
102:01 - longer okay um so here we
102:06 - go I'm gonna try starting this video
102:10 - with a bumper
102:17 - music hello and welcome to another
102:20 - coding challenge this one is diffusion
102:23 - limited
102:26 - aggregation okay so diffusion limited
102:29 - aggregation is an algorithm uh it's a
102:32 - it's an algorithm where I got to try
102:35 - this
102:36 - again I'm thinking about thinking about
102:38 - it uh Brownie and
102:42 - trees fractal yada yada yada let's look
102:45 - at what Paul bour
102:47 - says uh yeah electrolyte solution zinc
102:50 - ion ions
102:52 - diffusion uh whoa oh my goodness look at
102:55 - this how
102:58 - interesting okay let's start
103:04 - over
103:07 - uh so I'm going to definitely need the
103:09 - Whiteboard for
103:10 - this get myself
103:19 - ready okay
103:25 - let's see if I can make this
103:29 - happen
103:33 - Okay welcome to another coding challenge
103:36 - in this coding challenge I'm going to
103:38 - tackle diffusion limited
103:41 - aggregation so what is diffusion limited
103:44 - aggregation well I encourage you to take
103:45 - a look at two references there's always
103:47 - of course a Wikipedia page you can kind
103:49 - of find out a little about the history
103:50 - of of this algorithm where how it was
103:52 - thought of what it's apply to what it
103:54 - kind of uh um what what it can be used
103:57 - for um the reference that I'm using here
104:00 - uh uh that I read right before making
104:02 - this video or actually earlier this
104:03 - morning a couple hours ago at this point
104:05 - uh is a page on the internet from June
104:07 - 1991 written by Paul bour which
104:10 - describes the algorithm uh you can see
104:12 - that diffusion describes among other
104:14 - things the diffusion of the aggregation
104:17 - of zinc ions in an electrolytic solution
104:19 - ooo that sounds kind of exciting but
104:21 - anyway the point of what we can do with
104:23 - this algorithm is to create certain
104:24 - kinds of fractal-like tree like
104:27 - crystal-like growth patterns and you can
104:29 - see there's a variety of possibilities
104:30 - and I there's one down here that I
104:32 - particularly like this one which I might
104:33 - try to recreate by the end of this video
104:35 - but let me um rather than read to you as
104:37 - much as you might enjoy me just reading
104:39 - that web page to you in this video um
104:41 - why don't I describe to you a little bit
104:42 - about how this algorithm works at least
104:45 - how I think it works and then the
104:46 - internet can always correct me and once
104:48 - I start to write the code for it we'll
104:50 - see if I'm thinking about it correctly
104:51 - because honestly I don't know I should
104:53 - have practiced this in advance something
104:55 - is definitely going to go wrong in this
104:56 - video okay so let's say we pick a point
104:58 - at the middle of the screen and then we
105:01 - just say oh hello I don't know who we're
105:04 - saying hello to but uh there's this
105:06 - thing called a random
105:09 - Walker and the random Walker starts here
105:11 - just starts to randomly move around the
105:14 - screen and at some point it hits this
105:17 - point now obviously it's not going to
105:19 - take that exact path although could
105:20 - randomly and once it hits an existing
105:22 - point it gets stuck and then we release
105:25 - a new random Walker and it starts to
105:27 - walk around and when it hits an existing
105:29 - point it also gets stuck and then we
105:31 - release another random Walker and it
105:33 - gets stuck and another one gets stuck
105:34 - and another one gets stuck and another
105:35 - one gets stuck and as they get stuck we
105:37 - start to see this Fanning out pattern so
105:40 - this is what I want to do now I think it
105:41 - would be really interesting to actually
105:43 - animate the full process there's kind of
105:45 - a spectrum here we could write code to
105:48 - animate the whole thing like we see
105:49 - these random Walkers moving around the
105:50 - screen and getting stuck we could also
105:52 - not animate anything and just see the
105:54 - final image or we could do something in
105:56 - between I think I'm going to try to do
105:57 - Point by Point um but not animate the
106:00 - random walk itself that's what I'm going
106:01 - to attempt so let's go back over and we
106:04 - need some code to start with which I
106:06 - have here no no code I mean I have a
106:09 - p5js sketch with a canvas and a
106:11 - background and if I go back to the
106:13 - browser I think I have it running here
106:14 - in the browser I can open up the console
106:16 - which I'm definitely going to need for
106:17 - debugging um and so let's first start
106:20 - what do I
106:21 - need I want I think I want to have an
106:24 - object no you know what let's just start
106:26 - right now first let's do this rather
106:29 - simply I'm going to say uh I'm going to
106:33 - call the thing that's finished the tree
106:36 - I don't know if that's a good name for
106:37 - it but all of the points that are in the
106:38 - pattern I'm going to call the
106:40 - tree uh I'm going to need a walker the
106:43 - thing the point that's moving
106:46 - around and uh that's just about it
106:49 - really and what I want to do is and I
106:51 - need a size like the size the radius for
106:54 - each one of these points which by the
106:56 - way you could do it on a per pixel basis
106:57 - so that always could be one but I'm
106:59 - going to try I'm going to try something
107:00 - like 16 just to have it be bigger to
107:03 - start with so um the first thing I'm
107:05 - going to do is I'm going to create I'm
107:07 - going to say tree index zero equals
107:11 - create
107:12 - Vector a point in the middle of the
107:15 - window and then what I'm going to do in
107:17 - draw is I'm going to say for all the
107:19 - points in the
107:22 - tree uh uh say stroke weight R and
107:27 - stroke 255 and I'm just going to draw a
107:29 - point tree index i.x tree indexi
107:33 - doy so and let's not worry about this
107:36 - walker for a
107:37 - second so I'm going to refresh it well
107:39 - okay I don't need to refresh it it's
107:41 - live I'm using this adom package called
107:42 - live reload so there's the point okay so
107:45 - now what I want to
107:46 - do is I want to create something that
107:50 - I'm going to call a walker and I'm going
107:51 - to create I I don't know if this is such
107:53 - a good idea but I'm just going to put it
107:55 - completely randomly anywhere in the in
107:58 - the sketch window it probably should
108:00 - start along the edge or something or
108:01 - actually if you read Paul bork's Page I
108:03 - remember now reading a point that you
108:04 - can make the algorithm more efficient by
108:06 - cleverly picking it close to where you
108:08 - think it might need to be but I'm just
108:10 - going to create a random Walker and I'm
108:13 - going to say I'm going to see if that
108:15 - Walker should be stuck so first thing I
108:17 - need to do is check again all of the
108:19 - points of the tree
108:21 - and I want to see I want to know uh the
108:26 - distance between that walker and a
108:29 - particular point in the tree and if that
108:32 - distance is less than some threshold R I
108:35 - guess oh no r r * 2 right because I just
108:38 - want to know if those two circles are
108:39 - touching so if the circle if the two
108:42 - circles are touching the distance is
108:44 - less than twice their radi radius um if
108:47 - distance is less than R then uh stuck
108:49 - equals true so I'm going to create a
108:51 - Boolean
108:54 - variable assuming stuck is
108:57 - false and then I'm going to go through
109:00 - all of the points and if stuck is true I
109:02 - can say uh break and now what do I do
109:06 - here I'm going to say uh and actually
109:08 - what I want to do is like keep going
109:11 - until you get stuck so as long as you're
109:13 - not stuck keep checking all of the
109:16 - points and as soon as you get stuck set
109:19 - stuck equal to true and what happens if
109:20 - you get through this Loop and you're
109:22 - still not stuck then
109:25 - Walker should it should randomly walk by
109:28 - some amount let's and you know I could
109:30 - probably be more thoughtful about this
109:32 - walker dox should change and Walker doy
109:34 - should change the other thing I really
109:36 - need to do is I should make sure it
109:39 - stays on the I don't want it to walk
109:40 - randomly Far Far Away off the window so
109:43 - I should constrain it to um to between
109:46 - zero and the width of the
109:49 - window
109:52 - so let's see and
109:54 - now once it finds a part point when it's
109:57 - stuck um then what do I do I say tree.
110:03 - push
110:05 - Walker there we go and now uh let's see
110:08 - what happens here so I've got some
110:10 - infinite Loop problem this always
110:12 - happens uh with live reload I shouldn't
110:15 - be like there we go oh look at that so I
110:17 - missed up like something good is
110:19 - happening but boy I mess something
110:22 - up this is interesting so I must have
110:24 - used an X and A Y ah
110:27 - okay that should
110:31 - help yeah so interestingly enough this
110:34 - doesn't look so totally
110:36 - crazy is this correct though very hard
110:39 - to tell so let's do a couple things one
110:41 - is um The Stroke weight should really be
110:44 - half the
110:45 - radius um they should be right up
110:48 - against each other uh let's move them by
110:52 - let's move it by just one one thing I
110:54 - want to do is create um uh I'm going to
110:57 - I'm going to just make a random unit
110:59 - Vector to be a little bit more
111:01 - controlled about how they're moving uh
111:04 - and then I'm just going to say uh
111:06 - walker. add that velocity so this is a
111:08 - little bit better just to make a random
111:09 - vector and add that to the
111:12 - walker uh I I got to I think this live
111:14 - reload thing doesn't work for me because
111:18 - um um
111:21 - because okay that's good and actually
111:24 - maybe I meant for this to be times
111:28 - two yeah there we go okay so this is
111:30 - definitely looking kind of right right
111:34 - now uh
111:36 - let's the basic idea let's make this
111:39 - much
111:41 - smaller
111:44 - yeah so you can see this is actually
111:47 - working although it's quite of a slow
111:52 - algorithm can speed this
111:55 - up so I think I've got the basics of the
111:58 - algorithm correct actually it's just
112:01 - kind of slow to do this one point a time
112:04 - let's do it this way um one thing I want
112:08 - to do wow this maybe this isn't as bad
112:09 - as I thought Let's uh let's let's think
112:12 - about this let's do um I think we could
112:15 - release a bunch of walkers at a
112:18 - time
112:21 - so let's try
112:25 - um let's try releasing 10 walkers at a
112:29 - time and
112:33 - uh just to see if we can kind of get
112:36 - this going a little bit
112:39 - faster oh you know what the Walkers I
112:42 - think need to um the start from an
112:44 - outside
112:45 - point right well let me let me do this
112:48 - though anyway and then we're going to do
112:49 - pick how where the Walkers start
112:51 - differently which is going to be much
112:52 - better I think so
112:55 - um so all right so I just want to see
112:58 - something if I I'm going to create a
113:00 - bunch of these Walkers and then
113:04 - now uh actually I can just do this as a
113:08 - loop
113:10 - right uh while you're not
113:14 - stuck okay
113:17 - if hold on
113:20 - just pause for a
113:22 - second boy this is really hard to doing
113:24 - like two hours into today without having
113:26 - eaten very much very well what I was
113:29 - thinking I was going to be clever was
113:30 - like add a whole bunch around the edges
113:33 - uh and have the all just like kind of
113:35 - start walking and then remove them as
113:37 - they're done and I think I really need a
113:40 - a walker object to do that so let me
113:47 - um this is why I want to practice these
113:49 - things in advance to S think them
113:52 - through um thinking about the best way
113:54 - the best most efficient way to do
114:00 - this uh create vector by the way people
114:03 - are uh someone is asking in the chat
114:04 - Akash is asking create Vector creates a
114:06 - P5 Vector object which stores both an X
114:09 - and A
114:10 - Y um
114:16 - so okay so hold
114:18 - on
114:25 - I'm back and um I thought of something
114:28 - which I think it might make a little bit
114:29 - more sense to be able to play with this
114:32 - a bit more by having the Walker itself
114:35 - be an object so I would like the uh
114:38 - instead of just being a vector I want it
114:39 - to be an object that can store both
114:41 - where it is on the screen its size it
114:43 - can call functions on it that's going to
114:45 - give us more ways of playing with this
114:47 - algorithm and make it perhaps a bit more
114:48 - efficient so so let me go here and what
114:52 - I'm going to do is I'm going to create a
114:54 - new file and I'm going to call that file
114:56 - walker. JS and I'm going to make a
114:59 - walker object a Constructor function and
115:03 - I'm going to say uh I'm going to say
115:04 - this. position equals create
115:07 - Vector uh random width random uh height
115:13 - so I just want to take a lot of this
115:15 - functionality um and that I've written
115:19 - out here and I want to also whoops I
115:21 - want to create a variable called uh
115:25 - this. stuck and I want that variable to
115:28 - be uh false when it starts I want to
115:32 - have a
115:34 - function
115:36 - um that's called
115:39 - walk so I want to um I'm going to I want
115:42 - to have a
115:45 - function I want to have a function
115:47 - called walk where I implement this
115:49 - algorithm where I pick a random Vector I
115:52 - add it to the Walker so it moves
115:53 - somewhere on the screen I can strain
115:55 - where it is in the window um and I want
115:58 - to have a function that says
116:00 - check uh what What's a better name for
116:03 - that function like uh update no uh uh
116:07 - stick I can't think of a good name
116:09 - whatever uh check
116:12 - sticky check stuck whatever that's going
116:15 - to be the name of the function check
116:17 - stuck and in that function what I'm
116:19 - going to do do is I'm going to take this
116:21 - particular
116:23 - algorithm uh and I am going to I
116:27 - actually kind of want to see them walk
116:29 - but I think I have I actually kind of
116:32 - want to do this without the while
116:36 - loop so what I want to for a second what
116:38 - I want to do is check all of the points
116:41 - on the tree and see if the distance
116:43 - between this
116:44 - Walker's
116:46 - position right which is actually uh this
116:49 - pause now dot right the Walker is no
116:52 - longer The Walker is now an object with
116:54 - a
116:55 - position um is near anything that's in
116:59 - the trees's position because everything
117:00 - in the tree are Walkers that are stuck
117:03 - oh you know what I didn't do is I'm not
117:05 - delete anyway so okay
117:07 - keep so um and then if it's stuck I'm
117:11 - going to do something
117:13 - obviously okay so what I want to do here
117:17 - now is create an an array of
117:22 - Walkers and actually tree uh index zero
117:26 - is going to be a new
117:30 - Walker that is in the middle of the
117:33 - window uh then and that is stuck so what
117:37 - I'm going to do in the object is I'm
117:38 - going to have some optional
117:40 - arguments I'm going to say XY stuck and
117:44 - I'm going to say
117:47 - um uh I'm going to say
117:51 - uh
117:52 - X
117:54 - um I'm going to say X or this is a way
117:57 - of doing optional arguments so if I pass
118:00 - in an X I'm going to create the vector
118:02 - at that X but if I don't X will be
118:04 - undefined then I'll get a random
118:06 - value y or or random
118:10 - height okay and then uh same thing here
118:14 - I'm going to say this stuck equals stuck
118:16 - and if it's undefined that's the same
118:17 - thing as saying false
118:20 - um and then I Need To Say by the way
118:21 - this do stuck is true and this is this.
118:25 - pause tree. pause okay and I should
118:28 - really check against uh some other array
118:32 - like the others I'll call that which is
118:34 - called tree so what I want to do right
118:37 - now is I want to create one
118:41 - Walker in the tree and then I want to
118:44 - create in the
118:46 - Walkers I want to put just a random
118:48 - Walker
118:50 - so I have tree and I have walkers and I
118:53 - I might as well do that the same way in
118:55 - index spot
118:56 - zero and then what I want to do is I
118:59 - want to see oh and you know what I
119:01 - should do is I should uh now I can also
119:04 - have a
119:06 - function which is called uh this.
119:10 - show and I can actually take all this
119:13 - code I should have done this at the
119:14 - beginning I can take all this code and
119:17 - put it in the object so I can um set a
119:22 - stroke weight set a stroke and this.
119:24 - pause and draw the point at this. pause
119:28 - doy and and I you know I could be a
119:29 - little smarter about this and actually
119:31 - just make this an
119:33 - ellipse so I could be more precise about
119:36 - the radius and I could say R * 2 R * 2
119:40 - which is a global variable at some point
119:42 - but I can have them be variable sizes at
119:44 - some point okay so now I have this
119:47 - object I have a walker object which can
119:48 - move
119:49 - it can check to see if it's sticking to
119:51 - anything else in some other array and it
119:54 - can also um it can also draw itself so
119:58 - what I want to do first is I just want
120:01 - to say let me display everything in the
120:07 - tree and let me
120:10 - display everything in the Walker's
120:15 - array okay ready so if I if I reload
120:18 - this sketch
120:21 - Walker is not defined oh uh sketch line
120:24 - seven it's not defined because I have to
120:26 - remember to add a reference to it in my
120:28 - Javascript file uh to walker.
120:32 - JS and missing walker. JS line 25 has an
120:35 - error so let me go down and see uh this.
120:40 - ellipse this. p.x this.p doy I don't see
120:45 - any error here on line five
120:48 - 25
120:50 - missing parentheses after argument list
120:52 - sketch. 7 Walker is not defined function
120:58 - walker
121:02 - uh period no com hold on time
121:06 - out what am I missing here walker. JS oh
121:10 - is there a
121:12 - comma okay thank
121:15 - you oops I had a period there not a
121:18 - comma there we go
121:20 - great so I should see here whoops I
121:24 - should see this is this and this is the
121:27 - Walker so let's now have let's just now
121:30 - in sketch let's also have Walker's index
121:34 - i.
121:37 - update oh update was not it
121:40 - walk so you can see there it is moving
121:44 - randomly it's going to take a while to
121:47 - randomly intersect that
121:50 - but it is walking randomly uh I could
121:53 - obviously make it uh walk faster so what
121:55 - I want to do now actually just as an
121:58 - experiment is I want to I this is not at
122:00 - all I've gone off the beaten path here
122:02 - from the actual probably algorithm but I
122:05 - want to put 100 Walkers into the
122:12 - space right okay so they're all moving
122:15 - around
122:16 - randomly and what I want for them to do
122:19 - is
122:20 - if if
122:22 - Walkers index I check
122:25 - stuck
122:27 - others then
122:30 - Walkers uh then I what I want to do is
122:33 - say
122:35 - walkers. splice I want to take it out of
122:39 - there and I want to say tree. push
122:43 - Walkers index I so I want to uh whoops
122:48 - what I want to do
122:50 - is I want to anytime one of those
122:53 - Walkers gets stuck I want to put it in
122:55 - the tree and I want to take it out of
122:57 - the Walker's array because it's not
122:58 - something that's moving anymore so uh we
123:01 - let's check this. stuck equals true so
123:05 - actually
123:07 - um let's make a function uh
123:11 - is stuck actually so I don't need a I
123:16 - don't need this variable I can just say
123:19 - return true and if it kind of gets to
123:22 - the end return false so let's look at
123:26 - that
123:27 - um and see what happens others is not
123:31 - defined a tree right I have to pass in
123:33 - the
123:34 - tree there we go you can see them
123:36 - getting
123:40 - stuck go go Walkers go go go go Walkers
123:44 - go so you can see how this takes a very
123:46 - long time I I'm kind of curious to try a
123:48 - few things
123:49 - let's try a thousand
123:54 - Walkers and I this isn't what Paul bour
123:58 - describes what to
123:59 - do um on the website at all but I kind
124:03 - of like and so I kind of want to um
124:06 - highlight them differently so uh I
124:08 - should actually by the
124:13 - way I should have that be a particular
124:16 - variable uh because what I would like to
124:20 - do when I draw them uh is if if this dot
124:25 - stuck I want to give them a different
124:30 - color uh so let's
124:37 - uh so we can see which ones are stuck um
124:41 - so now though uh I think better more
124:43 - than better than
124:45 - adding a ton so let's still add it let's
124:48 - Act actually do this particular
124:51 - algorithm multiple times per
124:54 - frame like let's let it try to move all
124:58 - the Walkers 100 times per
125:05 - frame whoa why are they all clustering
125:08 - near each
125:11 - other am I oh I'm drawing them 100 times
125:14 - I don't want to I don't want to do this
125:16 - show so I just want to show them once
125:26 - there we go this is what I was sort of
125:27 - hoping to see so now there finally okay
125:30 - so now we can kind of see the algorithm
125:33 - happening which I think is kind of
125:34 - interesting it's it's going to happen
125:36 - very slow this is a complete and total
125:38 - brute force method um but I
125:41 - finally got something that I like here
125:44 - um and because at least it's sort of
125:46 - interesting to watch it is happening
125:48 - kind of slow slowly I want to try a few
125:50 - things to make it happen faster let's
125:51 - increase to 200 Walkers and let's
125:54 - increase the number of times uh to
125:58 - 250 um the frame rate is a little bit
126:00 - slower now I kind of like to keep the
126:02 - frame rate up so let's go down to
126:05 - 200 um there we go so we could obviously
126:09 - um and the other thing I could do uh
126:13 - it's interesting oh it's slowing down
126:14 - over time so the reason why it's slowing
126:17 - down over time is there's more distance
126:19 - checking so one thing that I could do
126:21 - that I would hopefully um help this run
126:24 - a bit faster
126:26 - um which normally I wouldn't care about
126:29 - but it is kind of bothering me how slow
126:31 - that it's running is let's see if we can
126:33 - eliminate the square root calculation um
126:35 - and to see if that makes it run a lot
126:37 - faster so one thing that I'm doing here
126:39 - in the check stuck
126:41 - function is using this distance function
126:44 - and I want to write my own distance
126:47 - function I'm going to call it distance
126:49 - Square ukian distance um and I want to
126:52 - take it I want it between two vectors A
126:54 - and B so what I want is the difference
126:57 - in X which is bx- a a dotx I want the
127:02 - difference in Y which is B Yus a doy and
127:06 - now normally if I were I would say
127:09 - return the square root of DX * DX + Dy *
127:14 - Dy this would be regular oldfashioned
127:17 - ukian distance right uh a um the square
127:21 - root of you know the hypotenuse of a
127:23 - triangle a plus b c s or c equal the
127:26 - square root of a square plus b^ s so
127:28 - what I actually want to do here is just
127:30 - write this algorithm but take out the
127:32 - square
127:33 - root and
127:35 - then what I can do now is not use this
127:39 - but use my own distance squared function
127:42 - and then I can actually have that
127:44 - distance be uh R * R * 4
127:49 - which is what I want now is for the
127:51 - distance to be did I did I mess
127:54 - something up here yeah I'm missing a
127:55 - parentheses uh what I want is the
127:57 - distance to be instead of checking if
127:59 - the distance is less than R * r i want
128:03 - the distance r squ or R * 2 2 is R * R *
128:06 - 4 so this now uh distance uh dist
128:11 - squared this should hopefully be a lot
128:13 - faster um you know uh did I wow good
128:17 - okay so boy just eliminating that square
128:19 - root you can see how much faster this is
128:22 - now okay now here's the other thing is
128:24 - every time I remove a walker oh this is
128:29 - kind of nice actually just to like Let
128:30 - It Grow with a fixed number of Walkers
128:32 - I'm kind of enjoying that and I have
128:34 - sort of an interesting pattern I don't
128:36 - know why oh did the stream cut out oh
128:40 - wait back there was a technical glitch
128:42 - there but hopefully you're still seeing
128:44 - me I seem to be I see myself again so
128:46 - you can see here that I have this kind
128:48 - of nice finished pattern which I really
128:50 - quite like actually um so some other
128:53 - things that I can do here are one is
128:57 - whenever I remove a walker uh I could
129:01 - say like I always want to have 200
129:04 - Walkers so
129:07 - um
129:09 - uh I can I can always say like wow
129:12 - walkers.
129:14 - length is is sorry is less than 200
129:19 - um
129:21 - walkers. push um walkers. push uh new
129:27 - Walker so this is even when they get
129:29 - stuck I add new Walkers so I never oh
129:33 - and by the way I started with so let's
129:35 - make a variable called uh Max Walkers
129:39 - equals uh 200
129:42 - 200 and we're going to start with uh
129:46 - that's we're going to do it oh no no no
129:48 - that's a different value Max Walkers I
129:51 - kind of made and then I'm going to make
129:52 - another variable which is uh iterations
129:56 - which I'm also going to make 200 let's
129:57 - make these variables I think it's kind
129:59 - of
130:00 - nice right we can see how it behaves and
130:02 - we can see how it behaves so now I'm
130:04 - always keeping um 200 Walkers so I want
130:07 - I want this really to happen pretty fast
130:09 - so let's see if I can up the iterations
130:12 - a
130:15 - bit um and see if we can get this screen
130:18 - now it is uh it is sort of slowing down
130:20 - so I think we're we're in we're in
130:22 - pretty good shape now here's the thing I
130:25 - think what's interesting oh you can see
130:26 - it really slowing down um so if I go
130:29 - back to oh and you know what there's
130:31 - also a problem here which is that I
130:33 - shouldn't be creating random Walkers
130:35 - anywhere in the window I should only be
130:38 - creating them around the edges so let's
130:41 - also make that Improvement okay I think
130:43 - it's worth making that
130:45 - Improvement so I'm going to make I'm
130:47 - going to go back into to the Walker and
130:49 - instead of doing random width random
130:51 - height I need a
130:54 - function uh make Rand uh let's do a
130:58 - random point and I'm going to give it
130:59 - that X and
131:01 - Y right I want to have some separate
131:04 - function somewhere that's going to take
131:05 - care of this for
131:08 - me uh actually I'm going to say if x
131:13 - this.p equals create Vector at that X
131:17 - and Y so uh if you get an X and A Y um
131:23 - otherwise let's pick a random
131:26 - point now I'm sure there are lots of
131:28 - clever ways I could write a function to
131:31 - give me a random point along the edge
131:34 - but the way I'm going to do it as as
131:37 - follows I want four possibilities top
131:41 - right bottom or
131:46 - left so if
131:48 - if I'm picking something along the
131:50 - top I want a random
131:54 - X and I want to return create
131:58 - Vector uh that random X comma
132:02 - 0er else if I equals 1 let's just say
132:06 - that's the
132:07 - bottom uh and again we could make this
132:10 - more efficient let's make that along the
132:15 - height else if I equals two I want a
132:19 - random
132:21 - Y and I'm going to along the left side
132:24 - and in all other
132:29 - cases I want a random Point uh along the
132:33 - right hand side so let's run this now
132:35 - you can see that I'm only picking random
132:37 - points that are coming from the edge
132:39 - which I think is also going to work a
132:41 - lot better because I don't want to pick
132:42 - random points kind of inside the thing
132:44 - that I'm already creating so here we
132:46 - have now uh diffus Fusion limited
132:48 - aggregation go go go I wanted it to
132:51 - finish
132:52 - um so one thing that I kind of miss so
132:56 - this I I got to come up with a clever
132:57 - solution to figure out when it's
132:59 - done because you can see it's kind of uh
133:02 - it's now like just infinitely picking
133:04 - points along the edge and it kind of
133:06 - went crazy a little bit when it kind of
133:07 - got to the edge so but I kind of like
133:10 - the idea of actually just for right
133:13 - now um never not adding um not adding
133:18 - any more Walkers and starting with a
133:20 - fixed number of points so I'm going to
133:22 - start with 1,000
133:24 - points and yes it is running kind of
133:26 - slow but when those points are removed
133:29 - we got to get our first point to get
133:31 - stuck randomly there we go I think it's
133:34 - going to kind of speed up over
133:37 - time is my belief but uh and you know
133:41 - one thing I could probably do which
133:43 - might also help it run faster is draw
133:45 - less
133:46 - stuff uh or what might be better is to
133:49 - just add you know add one point at a
133:51 - time uh so I think really the way that
133:54 - you would do this is I might let's just
133:56 - do five but like have like a thousand
133:58 - iterations here's another way to doing
134:00 - it yeah I like this this is nice I like
134:02 - looking at it this way too so there so
134:04 - many different ways you can visualize
134:05 - this I'm kind of stuck on it um and I
134:07 - encourage you to uh sort of enjoy coming
134:10 - up with ideas on your own but what I
134:12 - what I do want to do is
134:15 - um what I do want to do is uh let's
134:19 - let's go back to
134:20 - this um what I do want to do is kind of
134:23 - look at how um how you can vary this
134:26 - algorithm to get different star
134:29 - different kinds of patterns so let's go
134:31 - back and look at uh the Paul Bor website
134:33 - and let's first sort of see a couple
134:34 - things one is how right now this is
134:37 - essentially what I'm getting you know I
134:39 - could do a better job of kind of
134:41 - thinking about the layout of the space
134:42 - and making the algorithm more efficient
134:44 - or that you know letting it run for a
134:46 - long time I encourage you to do all that
134:48 - I'm going to release a processing
134:49 - version of this which maybe runs for a
134:52 - while and like renders the final version
134:53 - to an image somebody remind me in the
134:54 - comments if that doesn't exists so we
134:56 - can make a version of it it looks like
134:58 - this in the browser it'll kind of I
134:59 - don't want to like shut down a browser
135:00 - window but let's at least first think
135:03 - let's try to see how we create this
135:04 - pattern so this pattern is all about the
135:07 - seed points what if I fill the tree with
135:09 - points along the bottom so let's let's
135:13 - fill the in the beginning instead of
135:14 - having one point what if I say four r i
135:18 - equals I'm going to say r x equals 0 x
135:21 - is less than with x +al r * 2 and what I
135:26 - want to do is say tree.
135:29 - push new Walker at X comma height so I
135:34 - just want to create a whole bunch of
135:36 - points that I start with at the
135:38 - bottom and you can see what happens when
135:40 - I do that now what if I want I think I
135:42 - want all my Walkers actually just to
135:43 - start at the top so let's go now to the
135:46 - Walker file and and what if I basically
135:49 - say h you know what let's just all
135:51 - always have I'm going to comment all
135:53 - this out and let's always have all the
135:56 - Walkers start at the top so I just
135:58 - changed this function have all the
135:59 - Walkers start at the top
136:02 - whoa what did I do
136:05 - wrong the
136:07 - Walkers are
136:09 - starting time
136:12 - out
136:15 - um uh uh what did I do what did I do
136:20 - create Vector
136:22 - X return X comma 0 so it's at the top
136:27 - and the
136:34 - tree this new Walker's X comma
136:41 - height why are they getting
136:46 - stuck oh
136:59 - no hey let just try something here I
137:02 - think
137:12 - the this I like better but doesn't make
137:15 - a
137:16 - difference
137:19 - that worked for a second random
137:25 - Point let me put this
137:34 - back yeah why are
137:37 - they this
137:43 - works
137:46 - uh
137:54 - why why if I only create them at the
138:00 - top are they all getting
138:04 - stuck uh hold
138:07 - on I need them I'm debugging again in a
138:11 - sort of 110 I got to solve this okay do
138:15 - I equals p hold on so you guys in the
138:17 - chat are probably giving me good
138:19 - suggestions here
138:25 - um there's one point at the top for
138:28 - whatever
138:37 - reason why is there one point at the
138:44 - top you see what I mean
138:48 - hold
139:02 - on what's this
139:15 - point why
139:17 - is that a walker or a
139:20 - tree that's the
139:24 - tree what's that extra point there's a
139:27 - whole row of stuck ones at the bottom
139:28 - there's supposed to be a row of stuck
139:29 - ones at the bottom but what's this extra
139:32 - one at the
139:36 - top what's this
139:46 - point
139:54 - H where is the Walker getting a
140:01 - point hold
140:05 - on
140:11 - zero lost my mind
140:14 - here it's in the tree
140:44 - uh and add true in the Constructor
140:47 - somebody is telling me something good I
140:57 - think the first
141:01 - one well there's an extra there's an
141:03 - extra spot up
141:05 - there I must have this in like a really
141:07 - obvious place that I can't
141:15 - see x = 0 X is less than
141:22 - wi yeah but I took out the whole
141:25 - dependency on that
141:27 - here
141:42 - uh so why is one of them oh I know what
141:47 - the problem
141:48 - is
141:50 - ah oh
141:55 - JavaScript you guys see what the problem
142:00 - [Music]
142:07 - is guess
142:08 - what when X is equal to zero it
142:11 - evaluates to
142:13 - false okay let me back out of this for a
142:15 - little bit here
142:26 - uh I want to get to where I was when I
142:29 - started
142:43 - debugging so I
142:46 - can
142:56 - yes uh Dr Fresco is probably telling me
142:58 - this the whole time in the chat and I
143:00 - just like didn't see it because there's
143:02 - too many other messages and I wasn't
143:04 - able to like get my head around it oh
143:06 - what a what an awful
143:08 - mistake uh okay so let me go back
143:14 - to okay so um
143:22 - look at the crazy Walkers I don't know
143:23 - what they're doing
143:25 - um
143:28 - okay I'm back there was a major problem
143:31 - with my code which is right here oh this
143:34 - is a um whoops okay hold
143:38 - on try that
143:41 - again I'm back there was a major problem
143:43 - with my code which is right here
143:45 - remember how I was saying I'm so so
143:47 - clever and I can check to see if the
143:49 - user gives it an X and A Y so if x and
143:53 - if there's an X and A Y make a vector
143:55 - out of the X and the Y otherwise make a
143:57 - random Point well it turns out that if
144:00 - you give it the value zero right zero
144:02 - evaluates to false so when I say make a
144:05 - walker at 0 comma 0 for example or Z
144:08 - comma height it's actually going to not
144:09 - make it at that point but give me a
144:11 - random point so what I actually need to
144:13 - do here is say as long as X is not
144:18 - undefined and I'm sure there's a more
144:20 - elegant way of doing this but I'm just
144:21 - going to fix it right now and saying and
144:23 - Y is not undefined do this and that
144:27 - should I think I have some sort of uh
144:31 - browser having crashed
144:35 - problem infinite Loop
144:39 - problem if x probably
144:45 - um
144:53 - uh oh right I'm drawing them all again h
144:56 - i
145:06 - un yeah it's just
145:10 - slow and then
145:15 - um
145:18 - um and also I think I can do away with
145:21 - this third argument stuck and just say
145:25 - this dot you know it's if if I'm making
145:27 - it at a particular point it's
145:29 - automatically stuck otherwise it's
145:32 - automatically not stuck just to be clear
145:34 - about that and now we should see okay so
145:37 - here we go now we have starting all the
145:39 - points at the top and they're going to
145:41 - go they're going to kind of get glued at
145:42 - the bottom so this we should see some
145:44 - kind of pattern as this runs for a
145:46 - little bit you know Speed Ahead in this
145:48 - video if you want you know listen to
145:50 - some music while you're uh
145:56 - waiting come on trees grow so um so we
146:00 - should see a pattern that's coming much
146:01 - more like what we've got here in oops
146:04 - I'm in the wrong place what we've got
146:06 - here in this particular example so
146:08 - here's another so come up with your own
146:10 - scenario what if you start with points
146:12 - all along the edges what if you start
146:15 - with points along a radial path in a
146:17 - circle or have points moving um ah you
146:20 - have points starting around the edges of
146:21 - a circle and your random Walkers all
146:23 - start in the center you can get
146:24 - something like this um now but I do want
146:27 - to add something else here which is um
146:33 - oops I got too much music playing okay I
146:35 - do want to add something else here uh
146:37 - let's just see how it's going you can
146:38 - see oh it's it's moving along here we're
146:40 - growing our trees I want to go I want to
146:42 - go back to Paul Bor site and you can see
146:44 - something here which is
146:45 - interesting
146:47 - look at this particular image now as I
146:49 - scroll down look at this particular
146:51 - image and look at this particular image
146:53 - there's a kind of density or fuzziness
146:55 - or almost hairiness to it and you can
146:57 - what you can actually do is uh it's
147:00 - called stickiness you can have a
147:02 - probability you can think of when it
147:04 - touches something that's part of the uh
147:08 - part of this tree this this diffusion
147:10 - limited aggregation thing that's growing
147:12 - you could have a probability that it
147:14 - gets stuck rather than automatically
147:16 - getting stuck uck um so I think that's
147:18 - something interesting to add for example
147:21 - if it's within this threshold Jo don't
147:23 - just automatically have it get stuck but
147:25 - pick a random number between zero and
147:27 - one and if that random number like our
147:29 - stickiness is now
147:31 - 10% uh then I could actually have it get
147:34 - stuck and unfortunately we didn't get to
147:36 - see how that was going um let me see if
147:38 - I can make this run a little faster um
147:41 - there's a couple things um so I'm going
147:43 - to uh I'm going to give it more
147:44 - iterations and more max random walk
147:47 - Walkers um the other thing that I could
147:49 - do actually that I think would really
147:51 - help is I could have the uh Walkers as
147:54 - they walk not just I could have them
147:57 - only ever walk down so I could actually
148:00 - say I'm just going to comment this out
148:03 - uh VAR velocity equals create
148:06 - Vector some random amount between
148:09 - negative 1 and one and then some uh
148:12 - random amount between zero and one so
148:15 - that these uh the the random Walkers
148:18 - only ever move
148:20 - down boy they they move down much too
148:24 - fast I guess I should maybe I should
148:26 - weight it just a little
148:28 - bit something like
148:30 - that oh okay hold on too many this was a
148:33 - nice idea that I had that doesn't seem
148:35 - to be working out very
148:40 - well there you can sort of see I don't
148:42 - know if this was a good idea or not but
148:44 - you can sort of see how if I have them
148:46 - randomly moving down why do they always
148:48 - uh go back up to the top am I oh I'm
148:50 - adding them back in again that's making
148:52 - it run slower so um uh uh yeah so I I
148:56 - wanted to take that out
148:58 - actually and you can sort of see anyway
149:02 - you could see that by varying lots of
149:04 - the algorithm I'm G when I when I
149:05 - publish the code for this I'm going to
149:06 - make you a nice clean version that works
149:08 - really well because there's so many
149:10 - variables you can play with here okay I
149:12 - want to play with one last variable so
149:15 - uh look how slowly
149:17 - come fall Walkers go to the bottom stick
149:19 - to the aggregation pattern oh um okay so
149:22 - let's do one last thing um what I'm
149:25 - going to do now which I think will be
149:27 - particularly interesting and uh is try
149:29 - to recreate this pattern notice how the
149:31 - walkers at the
149:33 - center are larger than the ones on the
149:35 - outside you can see this one as well um
149:38 - I didn't get to do the the the probab
149:41 - didn't get to see the the probability
149:42 - thing play out uh let me take that out
149:45 - for a second and so what I want to do
149:48 - now before I leave you if you're still
149:51 - watching is I don't want to have r as a
149:53 - global variable anymore I want to have
149:56 - each
149:57 - Walker have its own variable so I'm
150:00 - going to make R
150:02 - 32 uh and I need to look for anywhere
150:05 - that I reference it this. R uh other. R
150:09 - right now I'm also importantly checking
150:11 - my own radius against another radius or
150:13 - others index i. r
150:17 - and then I also want to draw it with
150:19 - this.
150:20 - r this R so one thing that I could do
150:24 - which is and then I want to go back to
150:26 - the center ver the version where it's uh
150:29 - all
150:31 - um where it's starting in the center
150:34 - which I think is a bit easier to kind of
150:35 - work with right
150:37 - now so I'm going to take out this tree
150:39 - that starts off the bottom let's just
150:41 - make sure this still works whoa look at
150:43 - these so if I make them really quite big
150:46 - that was kind of interesting uh let's
150:48 - make this
150:49 - eight okay so you can see what this
150:52 - looks like now and this is working again
150:54 - now with
150:56 - um with uh with just sort of larger
150:59 - circles and I kind of would like to uh
151:02 - just also when I draw them I would like
151:04 - to give it a little bit of alpha here I
151:05 - think would be worth
151:08 - seeing uh uh
151:12 - let's just a little bit of alpha Okay so
151:16 - so okay so now we have the basic core
151:18 - algorithm happening and you can see all
151:20 - of these uh Walkers getting stuck so
151:23 - what I want to do I think which I think
151:24 - would be interesting is I'm going to I'm
151:27 - going to make the maximum number of
151:28 - Walkers just 10 but I'm going to
151:30 - increase the iterations by 10 to a
151:33 - thousand so these are the Walkers now
151:36 - sticking uh one at a time now there were
151:38 - only 10 of them so 10 of them are going
151:39 - to get stuck that's all we're going to
151:41 - see but now what I'm going to do is I'm
151:43 - going
151:44 - to each time I delete one from the
151:50 - array uh I am going to add a new
151:55 - one with a smaller radius so what I want
151:59 - to do is let me get the oops let me get
152:03 - the radius
152:05 - of the uh last one in the array this
152:09 - might be
152:10 - a and I'm going to make a new
152:14 - Walker with uh boy uh I want to make a
152:18 - new Walker with a that that radius times
152:23 - 0.5 so half the size the problem is now
152:27 - I need to make the Walker be able to be
152:29 - created now with a
152:32 - radius but at a random point so I think
152:36 - one thing I need to do one thing I could
152:37 - do actually this is better is I could
152:39 - say if arguments.length equals two that
152:43 - means I've gotten two arguments in X and
152:45 - A Y then create the then create a a
152:49 - walker with a radius of eight
152:54 - otherwise then create it with the radius
152:59 - of and then otherwise if
153:03 - um yeah otherwise create a the AER with
153:06 - the radius of the first argument so if
153:08 - you have less than two arguments so this
153:09 - is another way I could just check that
153:10 - arguments array I have a video tutorial
153:12 - about that otherwise I can uh I can get
153:16 - it I can make one with a particular
153:17 - radius and so let's see uh let's see
153:21 - what happens here um uh okay so where am
153:25 - I making
153:26 - Walkers ah so this is with I forgot no
153:30 - no no no no so with wait or else if
153:36 - arguments.length
153:38 - equals
153:41 - 1 else now with no
153:45 - arguments right then the position is
153:48 - random the radius is eight and stuck is
153:51 - false so uh now the other whoa what just
153:55 - happened here
153:57 - so
154:00 - pause
154:03 - uh let's look at the
154:06 - sketch ah whoops I have the third
154:08 - argument
154:09 - there okay I had by
154:13 - accident
154:15 - whoops
154:17 - I had by accident a third argument left
154:19 - over for when I was passing true or
154:21 - false in for stuck so if I take that out
154:24 - um
154:26 - whoops hold on no there's going to have
154:29 - to be an edit Point here while I because
154:31 - I screwed this
154:36 - up yeah a lot of people are asking about
154:39 - the grid optimization from the pon
154:40 - distribution and absolutely we could add
154:43 - that in but hold on a second I want to I
154:45 - want to fix
154:50 - this I realize I have some okay so back
154:54 - I realized there's a problem here where
154:55 - I have actually I'm passing into three
154:57 - arguments because I had an extra stray
154:58 - true from before so let me take that out
155:01 - and you can see this is working now
155:03 - strangely enough though uh the um the
155:05 - Walkers are getting like really really
155:07 - really small really fast and I just
155:08 - realized that's because um what I want
155:11 - to do is get that before I start adding
155:13 - a whole bunch of them I want to get the
155:15 - radius of the last one there cuz when I
155:16 - add one and get the radius of the last
155:17 - one they're getting smaller and smaller
155:19 - and let's let's just make them uh go
155:21 - down by
155:22 - 75% so you can see here that the Walkers
155:25 - are getting smaller as they adding them
155:27 - back in and maybe that's like too much
155:29 - they just get smaller so quickly so
155:32 - let's see what this
155:36 - does am I yeah so you can see over time
155:40 - as I'm adding more and more walkers in
155:41 - they're getting smaller and smaller and
155:43 - smaller uh we could also do something
155:46 - now while we're here let that run for a
155:48 - little bit um let's let's see if I give
155:50 - it 50 at a time will it it kind of
155:52 - perform okay um so one thing that I want
155:55 - to do is uh and I actually could just
155:59 - have every Walker in sequence be
156:02 - actually a little bit smaller than the
156:03 - previous one that might actually be a
156:05 - better way to do it um because I could
156:07 - have like a radius counter uh and and
156:10 - and that's kind of uh yeah let's do it
156:12 - that way actually let's try this I want
156:13 - to have a radius a starting radius
156:17 - starting R uh I actually just say
156:19 - radius
156:23 - equals
156:26 - uh I can have a starting
156:29 - radius just for that Center one no
156:32 - that's fine radius so I want to have a
156:34 - starting radius of
156:36 - eight and whenever I make a a walker I
156:39 - say radius times
156:42 - equals 0.99 so shrink it a little bit
156:46 - shrink it a little bit and then there's
156:48 - another place where I make new ones
156:50 - which is here shrink it a little bit and
156:53 - then
156:55 - actually I can take out this idea of the
156:58 - argument because I'm just going to use a
156:59 - global variable I don't love this
157:01 - anymore I just use a global variable
157:04 - radius that's always
157:06 - shrinking uh to go back and um put that
157:10 - in
157:12 - here uh and have this always be
157:17 - radius
157:19 - radius so there is no there is only back
157:23 - now I have I'm sort of simplified back
157:24 - to just two
157:26 - cases I either getting an X and A Y
157:30 - and this. R is always just equal to that
157:34 - Global variable rate I don't like now
157:36 - how I've done this but we're going to do
157:38 - it this way anyway so you can see every
157:40 - single one is like 1% smaller than the
157:42 - previous one which is kind of
157:45 - interesting cuz we're getting sort of
157:46 - they're actually not exactly in order so
157:48 - that's not what I intended to happen but
157:49 - we are seeing sort of an interesting
157:51 - result from this and they're getting
157:52 - smaller and smaller and smaller and then
157:53 - I could also say what I like about this
157:56 - is I couldn't I now have sort of like a
157:58 - terminal point where I can say if the
158:00 - radius is less than one um only
158:04 - whoops only bother to do this if radius
158:07 - is greater than two so now we actually
158:10 - like I don't want to have circles where
158:11 - the radius is less than one so now we
158:14 - actually have a terminal condition for
158:16 - this algorithm and I also now want to
158:18 - add one last thing which is coloring
158:20 - them so uh and you know I could actually
158:24 - uh so the other thing we could do is I
158:26 - could have a
158:28 - um I could map their Hue I could map
158:31 - their Hue uh so I could say it I could
158:34 - say uh color
158:37 - mode HSB and in the Walker object
158:41 - itself got to add this in I could say
158:44 - Phil I could I could say the Hue is
158:47 - mapped to the radius which goes kind of
158:49 - between like 0 and 8 to between 0 and
158:52 - 360 and I could give it that that
158:57 - color and I think I'm actually going to
159:00 - say no stroke and let's forget about the
159:03 - coloring it based on whether it's stuck
159:04 - or
159:05 - not and I have an error
159:14 - somewhere
159:17 - so we can see now and they're not
159:19 - actually so I probably should order
159:21 - their color based on when they get stuck
159:23 - but this is kind of interesting
159:25 - nonetheless and you can see as they're
159:26 - getting smaller and bigger and you know
159:29 - uh I don't know what just St why it just
159:31 - stopped right there oops but you could
159:34 - see I'm going to clean up this code and
159:36 - give you a working version I might
159:37 - change the order around the colors I'm
159:40 - going to um uh I'm very good at crashing
159:43 - Chrome but you can see sort of the ideas
159:45 - is behind this particular algorithm I
159:47 - don't really I time is up I think
159:50 - because this has gone on for way too
159:51 - long I don't have a good perfect version
159:53 - of this to show you but um I will uh I
159:56 - will include that in the the link from
159:58 - this video to the source code I'm going
160:00 - to make both a P5 JS and a processing
160:02 - version of this so I can do kind of like
160:04 - a higher resolution one that kind of
160:05 - generates it and just saves it to like a
160:07 - JPEG so you can see how that works maybe
160:09 - I'll come back and do another video
160:10 - followup about that but now you can see
160:12 - sort of the basic idea and the
160:13 - implementation behind this particular
160:15 - algorithm that's on Paul bork's website
160:18 - okay thank you
160:20 - for
160:25 - watching and I'll see you in another
160:27 - coding challenge
160:32 - soon okay I should have I forgot um uh
160:37 - uh I should have break from the loop
160:39 - where did I break where where did I miss
160:41 - so I'm gonna I'm gonna fix this now I've
160:43 - got to go actually this was uh
160:48 - so first of all I absolutely could use
160:49 - the like uh tree thing uh I should break
160:53 - from the loop so where should I break uh
160:56 - if it's
160:59 - stuck remove it oh you know what this
161:03 - should um I should really go through the
161:06 - loop backwards that's
161:08 - bad because I'm removing from
161:12 - it
161:14 - uh
161:20 - oh oh this is the problem of course
161:24 - um while
161:27 - and radius is greater than
161:30 - one so I can I should do that test there
161:33 - of course I'm gonna come do an
161:42 - addendum so and then also I want to just
161:44 - create
161:49 - so each time it gets
161:51 - stuck
161:56 - um then I'm going to
162:05 - say I'm going to change the I'm gonna
162:08 - set the Hue actually the moment it gets
162:10 - stuck so it actually has no color until
162:13 - it gets stuck um and so I'm going to go
162:16 - back to saying it's
162:18 - white or
162:27 - it's and I'm going to say this do H
162:30 - equals H so I'm going to give it a a hue
162:33 - the moment it gets
162:35 - stuck and so now
162:39 - whoops this do stuck
162:43 - otherwise why oh because I'm in HSB
162:46 - mode how do I get it to be white in
162:50 - HSB oh no saturation there we
162:53 - go right
162:56 - no Hue saturation brightness
163:00 - right oh how do I get white in
163:06 - HSB and I'm losing my
163:14 - mind
163:20 - and let's have the
163:23 - uh uh let's make shrink a
163:29 - variable
163:37 - so oh my God it's 137 I really have to
163:40 - go
163:44 - um
163:47 - am I still mapping it
163:54 - from ah
163:57 - whoops there we
164:03 - go wait this do
164:14 - here
164:22 - that's
164:26 - happening why is this
164:42 - not oh whoops I'd had the saturation
164:47 - off there we go
164:54 - okay yeah the Hue uh the Hue should is
164:58 - going to have to
165:00 - increase a little bit
165:02 - more and this the shrink is much too
165:09 - uh there we go this is what I was
165:11 - attempting to do I'm gonna come back for
165:13 - a
165:14 - second
165:27 - uh back for a quick addendum I actually
165:30 - I kind of cleaned up the cat a little
165:31 - bit and it's making it work a little
165:32 - better now um I had two big things that
165:34 - I missed one is that um it was it was
165:37 - crashing the browser I think I need to
165:39 - point this out because I had this while
165:41 - loop that was always trying to fill it I
165:43 - was trying to fill it if if it ever got
165:45 - less than a certain amount but I didn't
165:47 - allow myself to add any if radius was
165:49 - below a certain amount so it got stuck
165:51 - in that while loop so I fixed it to just
165:53 - say only do the while loop if radius is
165:55 - greater than one and the other thing
165:57 - that I did is I added a hue variable so
165:59 - that each time it gets stuck I increase
166:00 - this sort of global Hue variable and you
166:02 - can see now the Hue is sort of assigned
166:04 - to the order in which it gets stuck so
166:06 - this isn't doesn't exactly match um what
166:10 - you see on the uh these particular
166:12 - scenarios but I bet you with a little
166:14 - bit fiddling and speaking of the
166:15 - algorithm you could get something like
166:16 - that so um give that a try and uh if you
166:20 - can if and as you make more beautiful
166:21 - and interesting versions of this uh
166:23 - think about ways of optimizing it of
166:25 - where you start the Walkers how many you
166:26 - use how you check to see if they're near
166:28 - something um we'll come back and I'll
166:30 - make some improvements to this okay this
166:31 - is really the end now
166:33 - goodbye okay um so I'm sorry everyone
166:37 - that I'm now going to be rushing to
166:40 - leave um I normally I would take some
166:43 - time to answer questions but I forgot
166:46 - that I I made some appointments here
166:47 - starting at 1:30 um and uh I'm just
166:52 - going to um say
166:55 - uh I'm just going to send a message
166:58 - saying that I'm running a little bit
166:59 - late um and I'm going to check here
167:05 - um to
167:07 - see sorry I'm trying to
167:10 - look
167:12 - um I'm trying to look for
167:16 - the my message ah here we go to see how
167:19 - late I
167:21 - am oh
167:23 - whoops
167:26 - uh I'm not finding
167:29 - it uh I'm wasting all this time trying
167:31 - to here we
167:34 - go
167:38 - uh almost there
167:42 - everyone uh and I'm going to go to home
167:46 - um ah okay so that's fine I'm only like
167:49 - about 10 minutes late which I think is
167:50 - not that big of a deal um so uh let me
167:53 - just check back to the chat again uh to
167:55 - give you guys a few parting
167:57 - words
168:01 - uh uh okay I hope you guys en I hope
168:05 - everyone enjoyed this today it was a
168:07 - little bit crazy I hope two video
168:08 - tutorials will come out of this both
168:10 - much longer than I could have ever
168:11 - anticipated and hopefully somewhat
168:12 - useful I will also be releasing the code
168:15 - I have of a mind to like redo these
168:17 - challenges again having done them once
168:19 - but I guess you know to leave leave them
168:20 - messy and crazy that's kind of the way
168:22 - that it is so
168:25 - um um I'm going to get going um just to
168:29 - uh quickly remind you guys if you I'll
168:31 - be doing one live stream again next week
168:33 - this is the last live stream for to for
168:35 - this week uh if you want to sign up for
168:38 - an email list look this is me live right
168:41 - now if I hit play here look there I am
168:43 - on my website live
168:46 - um uh by um you can put your email here
168:50 - at coding rainbow.com I'll send an email
168:52 - over the weekend or Monday kind of
168:53 - letting you know when the time will be
168:54 - for next week if you want to tune in
168:56 - live uh if you subscribe on YouTube
168:58 - You'll also get a notice and I have a
169:00 - slack Channel where you can suggest
169:01 - topics and ask questions um and there's
169:04 - a small Discussion Group there if you
169:06 - want to sign up for the patreon which is
169:07 - a crowdfunding website um I also have
169:10 - stickers available via Sticker Mule you
169:12 - can tweet me if you're interested in
169:13 - those they look like this you can buy
169:15 - them uh uh if you if you're in New York
169:18 - City and I run into you on the street I
169:20 - will hand one of these to you um and I
169:22 - had t-shirts available at one point but
169:23 - those are no longer for sale but I'm
169:26 - going to do another run of them so if
169:27 - you're interested in that um let me know
169:29 - or better yet you can go to cotton.com
169:32 - product/ coding rainbow and you can put
169:35 - your email in uh here so far 11 people
169:38 - have requested at the t-shirts I think
169:39 - they run them again once it gets up to
169:41 - 40 um so I think that's about all I have
169:45 - to say I don't know what I'm going to
169:46 - tackle again next week um so send me
169:49 - your suggestions on GitHub on Twitter or
169:51 - if you're in the slack Channel um that's
169:54 - where I'll be sort of posting what I'm
169:55 - thinking about and uh uh and the kind of
169:57 - different things that I'm looking at so
169:59 - um send me your feedback uh yesterday's
170:03 - live stream it wasn't yesterday actually
170:06 - um the
170:08 - um uh yesterday's live stream I just
170:11 - released it's here coding rainbow live
170:13 - number 55
170:15 - and I did a Flappy Bird and an agario
170:17 - clone challenge the agario one I only
170:19 - just did the basic mechanics I didn't
170:21 - actually get to all the networking
170:22 - multiplayer stuff or a lot of the
170:24 - features I will try to come back to that
170:26 - at some point so many topics so many
170:28 - topics so little time so uh thanks again
170:31 - I'm looking in do I do any CSS
170:33 - programming a little bit and I do have
170:35 - if you are interested I do if you go
170:37 - under these playlists uh uh play number
170:40 - seven is a whole set of playl uh
170:42 - tutorials about HTML CSS and the P5 Dom
170:45 - Library which I encourage you to uh
170:47 - check out if you're interested in
170:48 - learning more about G and GitHub there
170:50 - are these videos The Connect some
170:52 - websockets I have got a lot of stuff in
170:54 - here so um so uh please be in touch
170:59 - thank you as always for watching thanks
171:00 - for your
171:02 - enthusiasm uh and I'm gonna dance my way
171:06 - out of here I
171:13 - guess
171:20 - awkwardly oh it's awkward that I'm still
171:22 - here
171:23 - right so I'm gonna I gonna I have to
171:25 - press a button to stop the stream should
171:27 - I try that again to be more elegantly
171:29 - about
171:31 - it did I not oh I didn't press it
171:42 - correctly bye

Cleaned transcript:

oh school for poetic computation I have a new uh coding Rainbow theme song uh I'm not ready to play it for you yet however in the background right now are the instrumentals for this theme song uh and I see that things are working uh please let me know in the chat if you can hear me and see me okay uh yeah okay I see that I have a green bars for audio so anyway welcome my name is Dan uh I here live at the school for poetic computation in New York City in the West Village uh the school is actually having their final showcase this week on um Saturday and Sunday if you happen to be in the New York City area and want to come see the projects of uh 12 students here and what they're making and working on please do um and so so first of all okay if you're watching this as an archive video on YouTube uh check this video's description there'll be links to time codes where various tutorials will happen also at some point uh this will be about a 2hour session I hope that at least three three or four Standalone 10 to 20 minute video tutorials will come out of it so you can look for those separate videos if you don't want to watch this long probably messy and Scattered uh live stream thing um but I I'm a little bit uh out of sorts this morning and I know that uh something is going on here when uh you know one of the things that I do so I teach these classes at a school called New York University for For Better or Worse um and I have this habit of um if I have to teach say on a Tuesday or a Thursday or a Friday the night before I'm always up late looking at things and trying to prepare some example or getting panicked and I'm anxiety ridden and strangely that hasn't happened to me um doing these live sessions I just kind of show up turn on but it started last night so somebody had suggested um uh oh verto in the chat asked did you do the KH Academy recording I did not KH Academy was having some sort of video contest and I was like oh maybe I'll make a video for it and I don't think I ever did uh people are here hoping for dancing that's interesting it'll happen I'm sure um so uh one of the things that I have associated with my channel here is a GitHub repository called rainbow topics and a topic that I I will tackle that I am planning to tackle at some point though not today for the reasons that I'm telling you this ridiculous story that probably nobody cares about um so there is oh I put this in um one of the topics is something called navier Stokes which is a particular kind of algorithm for fluid simulation and actually there's another suggestion here these are kind of related called fluid dynamics and there's some other references here people are interested in this um and so I thought you know I thought oh I worked on programming things with processing for like 15 some years and uh I've done fluid simulation stuff before I've used uh a library called MSA fluid I found this other Library I think I might have you know I've made little quick experiments and I thought okay I'm gonna I'm gonna prepare this for tomorrow's session and so I found myself at night fluid dynamics for games sitting and this oh this the is this the paper I'm looking for yes no wait wait hold on I just want to make sure because this is not the URL that I'm used to seeing yeah this is it this is the URL that I'm used to seeing uh fluid uh this one this I believe yeah so this is sort of a wellknown paper uh which describes a particular algorithm for creating real time fluid dynamics you know I would say you could let's see if I am back now that was very very sad but uh um okay uh hopefully things are working again um okay so I was in the middle of telling a story a really not very interesting story but I was telling the story nonetheless you could always turn this off and do something else or maybe this is just in the background but anyway uh okay so I was reading through this paper and I was was looking here I was like okay okay this looks good I a grid that makes sense we got a grid with some edge cases of Z and N plus one okay this is good okay we're going to make some arrays this idea of density and this is really this is really uh this is very similar to if you look through some of my previous tutorials I did a tutorial on reaction diffusion where you have this grid each cell in the grid has some amount of chemicals in it you add some forces and that stuff diffuses and it combines and then you visualize that with colors and this is good and now we have some formulas ah we have neighboring so the fluid stuff goes from one neighbor to the other and we're going through here okay okay ah this is looks kind of messy but we can do this and I I can Port this code and Etc ET and then I started realizing you know it's like 1130 at night I might getting a headache uh and I I I I came across this particular um part of the paper which says the following code implements this idea and we use a simple can you hear me yes a simple uh linear back trace and I was like looking at this these formulas here and thinking you know what maybe I'm not going to do navier Stokes uh fluid simulation um on uh tomorrow's live stream so you know I have this um I have this quandry um which is to kind of in picking topics there's always this question I think that comes up in doing uh creative uh projects for example that was a loud noise in the other room um I have more than one sound effect not that you guys really want me to play sound effects uh okay so you know if I was doing um if I was doing fluid simulation I might go ahead and look for something like this particular uh oh look at all these beautiful um uh hold on uh can I start over I can't just delete this and like start over again I feel like my the point of what I'm saying is I didn't get very much sleep very tired my head's in a strange place I was really thinking about this fluid stuff I was having nightmares where the fluid was taking over I was being drowned in the Navy or Stokes fluid simulation oh look at this P5 uh so anyway so you know there's this balance that you have to strike which is I want to create a project I could Implement an algorithm from scratch uh what's the utility in doing that what's the value in kind of learning how to to do that what's the value in using a library another implementation and I'm kind of walking a along this fine line in this uh thing called coding rainbow and I think right now I have discovered that the fluid simulation algorithm is a particularly Advanced large case scenario that would Merit multiple videos going through all of these different steps possibly also looking at using a library so anyway I want you guys to um what yes I want you guys to keep me in check here um I what I've noticed is that in particular the live stream audience uh has a um generally a pretty sophisticated background and I would like to make sure that I'm doing a good balance of tutorials that are kind of quick and easy and accessible to create interesting experiments and projects beginner friendly a little experience necessary friendly as well as spots where people can go further in depth uh building on previous tutorials and previous skills so um uh so anyway so keep in touch especially if you are a beginner if programming is new to you if it's something that you've only been doing in the last year or in the last week or in the last day uh have you been able to find the tutorials that I have on YouTube that are for that were that have no experience necessary and have those tutorials been enough for you to follow those and then go on to some of the other ones this is something that I would like to hear some feedback on mostly the feedback that I'm getting is requesting like hey could you build a rain tracing engine from scratch so not that I I think that could be interesting it's interesting as an exercise we'll learn something about code and we might discover something new I want to do all that stuff too but I want to keep that balance okay so that was my little uh Spiel um for this morning um I'm trying to figure out where all my music is oh there's some my music so um I'm getting ready today is going to be a day though however of looking at some interesting algorithms like past on disc like um what's another one that I was thinking about ah diffusion limited aggregation we're going to do all these things we're going to make some cool stuff I'm going to work in JavaScript maybe in processing and we will see oh I also wanted to look at some a circle disc Point picking all these things I don't maybe sound that interesting but I assure you they are okay so um let me get through a few things so just in case some people are new I'm going to just run through something that I always run through which is that you can go to coding rainbow.com for all of your coding rainbow Deeds uh I encourage you it's uh to subscribe on YouTube you're welcome to join this crowdfunding uh website patreon if you feel so inclined by no means are you required to of course I will always be here and enjoying your company virtually and then uh you can also put your email in here if you're interested in signing up for email announcements for when I'm going to do a live stream I should mention that this is my last live stream for this week I plan to have at least one live stream next week and then I'll be on Hiatus for like the last two weeks of August however I have a huge not huge but I have a backlog of maybe like 10 to 12 video tutorials that have kind of been edited from the live streams and haven't been published yet so I hope that even while I'm away I'm going to be releasing a video per day and obviously if you're subscribed you will get a notice for that um uh okay so that that's the Spiel there um and let's see so let's see if we can um I'm about I don't know let's see if I can just get started here um let me put on the nope sorry having a little frog in my throat no okay so um I'm going to I'm going to look at some of these I feel like there's a theme to today and the theme for today is random circles appearing right so let me get set up here for a second it would be good if I ever did this stuff in advance uh so let's um let me go to oh I remember something I was going to talk about by the way this music is composed by Adam Blau Adam Blau on Twitter I think uh okay wait I should I should do some programming okay phot taxis I think that's a good uh let's random circles one all right let's see if Adam worked I was having a problem with Adam let's see I'm still having this problem yeah I'm still having this problem some I I forgot to check into this problem and fix it let's show the stack Trace let's see if we can fix this for a second uh why is the beautify package um seem to be having some sort of problem anybody know what this err could be kides beautify is having some sort of problem maybe if I package Adam beautify beautify debug package manager where do I where do I do that Adam preferen says may check for update let's check for update latest version uh preferences whoops that's with some of the the lyrics Wait hold on I was just trying to put on some music for you guys here we go packages disable update let's try that the WG Bros asks in chat are you going to make another episode of the agario Remake I am going to I don't think believe that I'm necessarily going to tackle that today though however uh but I will definitely be continuing that at some point is it updating how do I know if it's working it's hot in here so I think I need my Sweat Band which I think makes my head separate from my body this it has a green stripee on it all right let's see how we doing here did it update okay it update let's restart hey okay fixed okay so now I made at some point let's let me let's look at an interesting problem I think this is going to be an interesting problem all so there's a lot of steps to this thing that I want to show you um trying to think of where I want to start let's start let's start with this let's just say that I have a uh hold on why do I have slack open quit QuickTime open quit uh okay let's say that I'm going to now go to ah I I need to run a little server oh let's add let's add this Adam live okay so let's try to add a new package so something that you guys that I was told that I should consider using uh is um let's see how do I find a new package install uh live search server adom live server launch an HTTP server with live reload capability let's see how this works and then I was going to talk about code pen I knew I had something else I wanted to talk about we're going to do some code pen too I um Let me let me pull up my information on code pen uh uh uh okay okay how's that that that that install so now everyone let's see how do I does anyone know Auto live server start look at this look at this what port should I use is I cannot even imagine what poor oh I know um wait is this it that's a bad joke okay let me just you know okay let's try po 3000 look at that how lovely now we don't need to worry about this silly so look at this what if I just were to add now uh let's let's try something so one one of the things I was going to show you is what if I just say uh I'm going to say a stroke weight for uh Point random width random height stroke 255 a th points so um whoops look at that I don't even have to do let's make it 5,000 points look at that it reloads automatically so this is first of all so this is exciting I encourage you to use that um I I lost track of my chat here um okay uh okay so here's the thing I think an interest there's how how you just distribute random points into a window might seem like in many ways not that interesting of a topic and in fact here in about 10 seconds I created this sketch that just made a whole bunch of random points in the window and we could discuss there's some issu there's some issues are not issues with this but we could we could say like what if we wanted to have a scenario where we distribute these points randomly but none of them are overlapping and in fact I did previously do a video on this topic uh shiftman YouTube random circles let's try to find that right ah yeah random circles with no overlap you can kind of see what's going on here in this uh thumbnail there um and I we don't need to watch that video so and what I did in that video was employ a strategy that I that is often referred to as dart throwing essentially which you could imagine here what if I'm throwing darts at this canvas and every time I hit the canvas with a dart wait I hit the canvas with a dart I draw a circle there and then I throw another Dart it hits over here and I draw a circle there and I throw another Dart it hits over there and I BR another Circle there what if I throw a dart and it lands on top of one of my previous circles well then I go and I pluck that dart out and I throw again so that's if you w go back and watch that previous video I looked at that strategy and you can imagine why that's not that efficient of a strategy because if I now if the my canvas is full of all these dots and I throw a dart to keep throwing darts I'm going to have to keep taking it out a lot before I find by accident throw it somewhere where there's a random point so I want to kind of take this as a broader theme for today and this camera is about to shut off I bet um and uh I want to look at a a a bunch of different algorithms related to this theme one that I found through the prog JavaScript programming um environment called D3 uh and this is something called Pon disc sampling and you can see how these particular dots are distributed randomly none of them are overlapping and they exhibit this P um you know named for the French mathematician P not uh from The Little Mermaid I don't know it's actually also a French word meaning fish clearly um but uh you can see how not only are they not overlapping but they have this kind of even distribution right A P distribution of random numbers it's kind of related to if something happens about four times randomly per day what's that what's that kind of distribution going to look like over time of those four events each day I mean they generally aren't going to Cluster all together that sort of thing so um you can read more about Pon distribution um you know Wikipedia Etc but I uh you know so there are various strategies for making this kind of distribution um one of which that I did mostly in my previous video was this sort of dart throwing thing so I was looking at this and you know there's a sort of like amazing Simplicity and Beauty to this even though all it's doing is filling it with random spots but you can imagine different kind of applications for this um some other type of you know I had um I did a video about a space colonization algorithm which draws a tree pattern as it's pulled to random points and I just put all those points randomly in the window what if I use this kind of distribution what sort of tree would I get out of that if I was creating an ecosystem simulation where I wanted to create a sea of food or I wanted to have Blades of grass over a meadow what if I gave all the initial points of distribution like this so um and someone in the chat is writing the pon distribution is used for molecular modeling that's great to know super interesting so uh this is kind of a theme I want to maybe start with this um and we're going to look at um I actually have not programmed this but we're going to look at this particular paper by Robert britson which describes the algorithm uh I don't know if the source code for this is available in this D3 website it probably is we could look at that as well um and then you know other things related to this uh that I want to look at is circle dis pointing dis Point picking uh to kind of look at the distribution of picking points inside of a circle whether they cluster randomly towards the center are evenly spaced out that's something I want to look at as well as um uh one of my favorite algorithms that I think that I've implemented before I didn't include it in the nature of code book but is uh called diffusion limited aggregation and you can see uh um that this is a kind of um an algorithm that can model crystall likee growth patterns that happen in nature um and you know we can kind of peek through this Wikipedia page and you can see that you can get different patterns based on whether you start growing from the bottom or out of the center and I'll probably use I'm uh Paul bour Paul bour is a is a person uh he has a website that I use that that I found lots of really nice um explanations of various um algorithms on let me find this diffusion limited aggregation so I think we could read through this together we can have like a soothing quiet you guys could all maybe all of you are watching somewhere and you have like a couch or a bed nearby and a pillow and you could lie down put on some quiet music or better yet I could put on some quiet music for you and then you could lie down and I could just read to you from this paper and I could say things like figure three shows a box attractor new points enter in the interior the center of the image say the source code supplied here a soothing voice and that could be how you could go to sleep at night okay I I I lost track of uh my my head there so I I don't know I'm un sure whether um so so that's kind of my plan broader theme for today um I'm going to be doing these as coding challenges meaning I will essentially this is empty it's a um I will be programming them from scratch while reading through either the paper or the website that explains the algorithm I feel like that's a really useful process for people to see I enjoy doing it as this kind of like strange performance art kind of academic math paper programming code in p5js thing um and that's sort of my plan for today so um uh there are some some questions going on in the chat which may be uh ah yes so by the way the pon distribution which we'll look at you um and I believe Pro on this um page the Jason Davies page that um by the way there's also some further reading down here of other links you could look at um and ah you can look at random points on a sphere so these kinds of things can also be used to and this is interesting for sort of mapping applications and stuff like that so um this is what I want to look at today okay um uh okay so let's see I think there must be a lot of new people in the chat today I'm seeing lots of new names so ask your questions I kind of take a peek at the chat as I can but I'm not glued to it um unfortunately it's sort of a little bit hard to do that okay so let's start with um let me close all this stuff um and let's see where uh where am I here uh rant distribution let's find the GitHub issue no what was it called random uh random sampling of points oh okay ah oh the other thing I was thinking it's sort of I don't know the other thing that I was thinking was um uh whoops so one of the things that I wanted to also tackle is the traveling salesperson algorithm and the travel I don't know if algorithm is the right word actually traveling salesperson problem so the traveling salesperson problem is a problem where you look at a space full of points and you try to say what is the path I'm a traveling salesperson I'm here to sell my rainbow oh no no my rainbow sweatbands uh here I am I'm a traveling salesperson with rainbow sweatbands and I want to visit all of these cities and I want to sell these things in all of these these cities what's the shortest path so that I can go from one city to another and hit all of them and walk the fewest amount of steps and this is a surprisingly uh difficult problem to solve once you start having a lot of points because there's just so many possible paths through all of these points and so we could use a kind of check every possibility and find the shortest one approach or a genetic algorithm to solve this problem so I think it's sort of interesting to think about some of these algorithms for generating like a diffusion Limited aggregation visualization and then apply the traveling salesperson problem to it so you connect all of them with a with a line or um that type of thing um okay uh what can you tell us what you use for browser live reload um he's I'm using uh a package for Adam called Adam live server and I I if I guess if you watched this back in the archive I went through the steps of installing it uh okay so um I wanted to talk a little bit about code pen I think I'll since I've been kind of um going on and on and on and on without actually getting to anything yet I think I will save that perhaps for a little bit later but I want to mention that I did a tutorial using codepen the other day I used codepen uh has a thing called Professor mode where you can actually be on the same web page as me and see me typing the code in real time problem is you're about 15 or 20 seconds behind on the YouTube stream but the actual um uh the actual codepad thing is in real time anyway I made all sorts of I was like I made all sorts of mistakes and had a uh had some questions about codepen and I got an email from a codepen engineer and I got um answers to a lot of those questions and I want to go over some of those at some point okay um so let's uh let's start with the p disc sampling let's start with that okay um so let's look at this particular paper is everybody in their quiet couch uh okay so what I'm going to look for actually so I encourage you to read the whole paper um you sort of get the idea though that what we're trying to do is and this is by the way visualizing the uh distribution of I probably distances between all the points somebody correct me if that's wrong but anyway this is the goal here right to create a random distribution around of points in a plane that exhibit a uh that aren't overlapping and they all have a minimum distance none of them are are closer than a certain Thresh hold um and and and that will give them this kind of like even but random distribution so we could use the dart throwing approach I did that in a previous video so I'm not going to do that here um instead what I'm going to do is um uh read starting from the algorithm here and the point of this algorithm is not to make a more beautiful version of the distribution but to have an algorithm that actually runs rather quickly which in this case um really can make quite a difference if you're doing a you know in a lot of cases I'm in a lot of in a lot of scenarios for me I don't I don't really worry about optimization like I'll just make my interesting weird project and try to make it work and I can optimize later I think that's generally a good strategy but this might be a case where you already know like I have a high resolution image I want to fill it with points and I need to do that like every frame I I can't like have it take a super long amount of time plus I think we're going to discover some interesting programming techniques while doing this I read this on the subway this morning so so hopefully it's going to work um but uh so I think we're going to discover some interesting techniques and also the point of this channel coding rainbow is for you is to look at some of these classic algorithms Implement them verbatim and then for you the audience to do your own creative riff off of it okay here we go uh so I want to make this a uh a separate Standalone tutorial so um I am going to cycle these cameras I'm going to get myself ready okay um uh let's say we're going to have uh okay go here th uh I'm going to do this in JavaScript I got the browser going uh we'll close this for right now um okay and here okay I can't see hold on I got to fix something uh here we go so this wasn't so great this is probably about 45 minutes before I actually started doing anything but uh thank you guys for bearing with with me and being here with me this morning okay this is a very serious topic so I won't be wearing my sweatbands I'll wear one no it's too weird okay uh okay here we go welcome to a video tutorial where I am going to implement I'm going to read this paper in this video out loud to you so if you ever thought oh you know what I want to do I want to watch a video on YouTube where somebody reads out loud to be an academic paper with some math stuff in it you you come to the right place it is called fast fast Pon disc sampling and arbitrary Dimensions just to uh kind of cover what that is the idea here is that I want to fill a space with points these could be uh you know I want to uh I want to use this to create a um I can't think of any good examples like an ecosystem simulation where creatures are wandering around I want to fill a space with food or I want to use these as seed points for something some type of other generative growth algorithm or I just want to have a nice pretty dots pattern that then I color According to some image and I want those points to be evenly spaced around and not overlapping so let's look at how we can implement this algorithm and I'm not going to read the whole paper I'm just going to start from down here and the idea is the algorithm takes and by the way let just so um look you look in this video in the URL for this paper and it's by Robert britson from the University of British Columbia and this is I think from uh I assume that this ' 07 means it's from 2007 so the algorithm takes as input the extent of the sample domain the minimum distance R between samples okay so what does that mean a sample by the way is each one of these dots that's a sample so I first will need a minimum distance so I'm going to go to my code oh by the way what's my code doing right now so I'm starting with this uh code written in JavaScript using the p5js library and it just draws what has a loop to go from zero to a th000 to draw a thousand random points in a window and we can see that's happening here and you can see that these points don't have that kind of distribution they're overlapping they're not kind of evenly spaced I this is a perfectly fine distribution I don't I don't have nothing against this particular pattern whatsoever but uh it's interesting to look at other patterns of what types of beautiful beautiful beautiful beautiful things could emerge out of that okay so um here we go okay so now back to the paper where was I okay so let's go okay so R uh so I need to add R so I'm going to add a variable R and let's say right now we're going to start with I want these points to be 10 pixels apart that's kind of a reasonable value to start and then a constant K what is K as the limit of samples to choose before rejection in the algorithm typically k equals 30 okay so that seems to me I can create a variable k equal to 30 but what is that mean limit of samples to choose before rejection so probably in the algorithm I read this before before I haven't implemented the code yet but I did read this before so I know but what it means there's going to be some point where I'm going to try to do something a certain amount of times and if it doesn't work at some point I'm going to quit and this is this is telling the algorithm to quit after 30 times and that's obviously both of these are numbers we could play with to see if we get different effects so now what I want to do is initialize an ndimensional background grid oh boy what the what is an ndimensional background grid that sounds complic it um sorry I just needed to get to my keyboard here so what I want is to have a twodimensional background grid meaning I want to think of some sort of grid and what I'm going to do is I'm going to store everything in that Grid in an array so I'm going to make actually just one I think I'm going to make a onedimensional array and that onedimensional array will number the in every single element in that grid and this is what I do I've I've done this in countless different examples and things online where uh online on YouTube on on the internet um where um this is uh where I have this onedimensional array to store information in a for a twodimensional space pixels do that all sorts of things so let me come back here and let's set that up so what I'm going to do is I'm going to create a variable and I'm going to call it grid and I'm going to make it an array now I need to think about what is the what is this this pen is by the way very light can you see this um what is the size of each one of these uh cells in the grid so here it says we pick the cell size to be bounded by r divided by the square root of n r is the minimum distance we want between our points n is the dimensions two Dimensions I mean so interestingly enough we could do this in three dimensions or in four dimensions or in I was going to play some Spacey music for four dimensions but whatever I I'm not I got to work on this whole soundboard thing I'm not very good at it um okay so uh so so that's something I need to calculate and I'm going to calculate it I'll just do it up here um I'm going to call that variable W as kind of like the wh time out this will get headit it out hold on I'm looking in the chat you can barely see the green on the Whiteboard okay hold on should I well I think it'll be good enough but I won't use that green marker anymore uh where's a black one you would think that I would be more prepared for these sorts of things okay I have the black marker here okay coming back all right this will this was a little edit Point sorry I'm going to I'm going to call that variable W to be the I have a black marker now by the way so you could see this better the size what's the width what's the height of each one of these cells okay so I need that to be uh r divided the square root of n which is two so uh so you know you can figure that out but I I I you don't have to figure that out because the pro the code will calculate that for you okay so I have that now um so let's read this so okay the grid can be implemented as a simple nend dimensional array of integers the default negative one indicates no sample a non negative integer gives the index of the sample located in a Cell so basically that big array is either going to have a negative one in it or or another number in it to say like oh there's something in that AR right so let's let's start by um okay so first of all we have to figure out how many columns are there because the space is 400x 400 pixels and the size of each one of those cells is W so I want to have and I want it to be an integer so I'm going to use the floor function I want to take the width divided by W for the number of columns and the number of rows is the height divided by W and then what I want to do is Loop through uh every single spot which is the number of columns times the number of rows and in the grid initialize its value to negative one so I'm starting with a grid the idea here is the grid you just pick up a different marker each time where the grid is just filled with these are the index values but the grid itself is filled with negative 1 negative 1 negative 1 negative 1 because we're going to start actually putting points filling that grid with values okay who you still why is this still interesting to you I hope so okay so going back to this paper okay good good good good good good ah select the initial sample X subz whatever what do I mean pick a random point that means pick one random Point randomly choose a chosen in uniformly from the domain insert it into the background grid and initialize the active list okay there's a bunch of extra stuff there okay so forget about this active list for a second let's say I need to pick a random Point that's not too hard I can pick a random Point wh so let's let's see here so this is uh this is really uh in if I'm reading the paper this was Step Zero and uh now I'm going to do this by the way is no longer relevant now I'm going to do uh step one so which was pick a random Point VAR x equals random width VAR y equals random height and you know what me make that a vector I think it's going to be useful a vector in p 5 is an object that stores both in X and Y so I don't have to keep them as separate variables uh let's make a a vector called pause with an X and the Y in it okay we're doing well okay so that was there we go so now select the initial sample chosen blah blah blah inserted into the background grid so what does that mean so if I pick a random Point somewhere in this window oh I got to throw a dart right ready one two three it worked exciting live demonstration okay so right I picked this random point and I can see that it's in spot eight unfortunately I can't actually in my code like throw something and then just see where it is so I have to figure out where it goes and the oh did I yeah no okay um I have to am I back in the right place okay um I have to now figure out where it goes and how do I figure out where something goes well where its column which I'm going to call I is the EXP position divided by W right W being the size that's that sort of scaling Factor the size of each cell um and I also want to use the floor function to make that an integer because it's going to be an index into an array and then uh J is the Y value divided by W and so what I want to say is the grids I + J * the number of columns equals that position so this is me inserting it into the grid I pick a random XY point I find its column in row position I'm saying I and J in the grid I make a position Vector out of it and I insert it into the array so this i+ J * columns thing this is a Formula that exists in just about so many of my code examples but it basically is a formula for taking a column position and a row position and figuring out ah if the column is z 0 1 2 3 and the row is 012 um that the actual position in the array is 13 and you can see that is the column plus the row times the width 1 2 3 4 5 so 5 * 2 is 10 plus 3 is 13 yeah that formula works so that was kind of a quick explanation I think I have a video somewhere where I go over that more you can try to find it um okay great so now we have that inserted so that's step two let's go back oh no that's step one sorry so now we've done step two oh but we're missing something active list so this algorithm requires an active list of points that we are currently working with and it's going to make more sense as I get further into this but um uh there's some interesting stuff going on in the live chat here okay so um so let me f let's let's create I want to create another array called active and what I want to do is also say active. push that position so I want that position that Vector to both be inserted into the grid remember this grid is an array now that has negative one everywhere except for this one spot that it actually has a vector and then what I want to do is I'm going to um add the draw function back in I want to say background zero and I just want to say I want to Loop through the grid just to make sure things are working and I want to say a stroke 255 stroke weight 4 and then I want to say sorry I want to say uh Point uh grid indexi dox grid indexi doy however I only want to I want to Loop through the whole grid and draw all the points but not if there's a negative one there so I want to say as long as grid index I does not equal to 1 then I can draw the point so I just want to be able to see what's going on and then also I think it would be useful to look at at all the active points so I'm also going to Loop through the active array this is really mostly for debugging but I think it might also make kind of an interesting pattern and I'm going to say stroke 255 comma 0 comma 255 stroke weight four and I'm going to uh draw a point but this time um at the Active spot okay uh there we go whoops how's this looking everybody live reload going let's take a look oh so have an error square root is not defined look at that so this is by the way a very common p5js problem if you ever try to call a p5js function outside of setup it actually won't work because p5js has not been initialized the page has not been loaded until setup this is like an onloaded type event I could get around that here just because it's square root by just accessing the JavaScript square root function directly I'll just do that otherwise I would have to move the square root function into setup call is not defined uh sketch. Js line5 uh this is columns times rows there we go okay so you can see there's one random Point that's also one active point and you can see each time I reload the page it's somewhere there okay we're moving along here we're Trucking along here I'm getting somewhere now I think yes yes people in the chat are telling me to use a four each Loop I'm I have nothing against four each Loops but I think it's a little bit more readable to do this right at the moment um so let me go back to this paper and now we're going to look at step two this is the this is the tofu of the algorithm right this is where the main stuff is happening while the active list is not empty choose a random index from it okay let's start with that so I have to say down here let's put let's put step two at the beginning of draw and I'm going to say while um active is not while active. length is greater than zero that's that's saying as long as it's not empty now I'm going to make something a little bit different here the algorithm has a while loop B built into the description in other words it's saying wow this is true keep doing this keep doing this keep doing this but I actually don't want to do this I want to make use of the draw Loop which animates so I can see the algorithm animating itself so I'm actually just going to say if because I want to just do this one at a time and it's going to come around and do it again with draw so if active do length is greater than zero What's the next thing uh choose a random index okay so I'm going to say VAR index I I'll call that R maybe R equals random active. length and I need to floor that that's a random index and then generate up to K points chosen uniformly from the spher spherical annulus between Radius R and 2 R and oops sorry I don't have my there really no point to be sound effects um okay ah okay hold on hold on hold on we're going to be okay let's go about let's start with generate up to let's start with generate up to K points I'm going to say for VAR n equals z n is less than K n++ so I'm going to do a loop at least K times up to K points and then now this is kind of crazy uniformly from the spherical angular between Radius R and 2 R around X index I let's talk about what this means uh okay so I have to find an eraser which uh I'm going to use this paper towel so here's what we have to do this is kind of a useful thing in programming to sort of think about I have a point that I just picked this is my random active point now there is some value in our program called r which has this distance okay so R I don't know why I wrote distance there R has some length so what I want to do is pick another Point around this point whose distance is somewhere randomly between R and 2 R so in other words I want to pick any point that's within kind of this dut right I don't want it to be it can't be within R otherwise it's invalid and I don't want it to be really far away I want it to between R and 2 R so how do I do that well one thing I need to do is one thing I could do is just pick a random angle right first let me pick a random angle and then let me pick a random value between R and 2 R and I want to place the point offset from here along that angle somewhere between R and 2 R so that's what I need to do so let's come back to the code uh and what I want to do is say so first I want to angle random to Pi honestly here's the thing I could take some let me do it long winded but I could take some shortcuts because there some functions in P5 that would sort of do some of these steps for me but um then I want to uh create the offset values so uh offset X is cosine of that angle uh offset Y is sign of that angle right this is trigonometry that if I have an angle I can get the the sides of the triangle right the from that angle with cosine and s look for one of my video tutorials that goes through this math so but actually what I can actually do by the way is just pick a random Vector so all of this really what I want to do is say VAR offset equals P5 vector. random 2D because what that's going to give me is a random unit Vector pointing out in some direction from here and then all I want to do is make the length of that Vector between R and 2 R so now I want to uh create a magnitude which is some random value between R and 2 * R and then I want to take the offset and set the offset's magnitude to that random value and then where's the point that point actually I can just say offset add oh wait I forgot to get it so the position the position that I'm working with is from the active array that particular um so I remember I I'm picking a random point from the active array and then up to K times 30 times I'm going to pick random points around it between between what between R and 2 R so now if I add position to that offset this is really the point and actually here's what I'm going to do I'm going to change my variable naming a little bit what I'm trying to do is make a new sample so I'm going to call this sample and I'm going to make a random vector and then and then sample's going to get the position added to it so now that's that actual point so I'm now done with this uh this particular step generate up to K points I've done one point uniformly between R and 2 R for each point check if it is within distance oh wait there's a mouse in the way check if it is within distance R of existing same samples using the background grid to only test nearby samples this is an exciting moment okay I don't know if anyone is still watching this video however many minutes in I might be like 20 minutes in already this is like a video about P disc Point picking but this is a moment because what I'm going to do here actually applies to a lot of other scenarios let's think about this for a second I want to talk about what's going on let me find my marker let me find my paper towel okay uh let me come over here so let's think about this there is a space and that space is full of points and I am working with a particular new point right here and let's say I want to know is this point too close to any of the points in the space most algorithms would say I have to check this point against every other point in the space and there could be you know something like 10 million points in a space and this could take a long time especially I'm doing this as part of some animation algorithm however the whole point of this Pon dis thing that we're doing is that the points are registered to a spot on the on some kind of grid and if the only thing I care about is is a point too close to another point if this point is within this spot on the grid I kind of know 100% that I don't need to check these points or these points or these points the only ones that are worth checking are the ones that are in immediate neighboring spots on the grid and this allows a massive Savings in performance and in a flocking simulation in a collision detection simulation this kind of algorithm can also be used and it's quad tree type stuff I'll do some other videos on that at some point but so let's look at how we're going to do that here okay now uh so what I need to do is check I want to check okay so first of all I need to know where is this point in the grid so I need to know its column position is sample dox / W and I need to floor that so this is where it's going to be in the grid then I need to know it's row position which is sample doy / W and then I need to do another loop like I could check each neighbor individually but let's do another Loop right uh nested loop I starts at 1 which is like the spot to the left I is less than or equal to 1 which is the spot to the right I ++ and then uh J is equal to1 same thing j is less than one j++ and then what I want to do is I want to look at uh uh I want to look at a point I don't know what to call it um uh neighbor I'll call it neighbor equals uh the Grid at I + J * the number of columns and I want to check the distance now between the sample the distance between and I can use the P5 Vector distance function the distance between the sample and the neighbor and I want to do something right this is gonna if if that distance is less than R right the whole point of this whole thing that we're doing is to make all these points on the screen where none of them are within this distance threshold okay so this is very key right here what do I do if I find one by accident that's too close to so let me go back to this and see for each point in turn check if it is within distance R okay if a point is adequately far from existing samples then it becomes then it goes into the active list and it's good okay so we're trying to find at 30 times we're going to try to find a Point that's okay so here what I think would work best is for me to create a Boolean variable like I'm going to call it okay and I'm going to assume it's okay VAR okay is true it's going to be okay however if that distance is ever less than R it's not okay anymore so I got to check everything now here's a problem I don't want to check ah here's another first of all there might be nothing in the grid so I only want to do this uh if um I only want to do this if the neighbor is not equal to negative 1 remember negative one there's probably a different way I might clean this code up later Famous Last famous words of every single programmer ever I might clean this code up later um but um here remember if something's not actually in the grid we're just sticking a negative one in the array so I only want to do this right if negative one if there's nothing there it's definitely not too close because there's nothing there to be too close to so okay so after I do this I want to check and say after all of this if it's okay what do I want to do I want the Grid at that spot to be that sample and I want active I want to add that sample to active so I I'm remember I'm keeping two lists I'm keeping an array of this grid so I want to put the point in the grid but I also want to put it in the active list because it's going to be another point that we could use later to pick a point next to it okay uh boy there um okay so now let's think I I feel like there's some there's some sort of missing issue here there's kind of an issue what if I I I think I need to check it's not written in let's keep let's keep reading the paper um so okay adid as the next uh uh okay so let's let me I I feel like I missed a step here that isn't explicitly written here but I'm going to keep going with what's written WR here so okay so one thing we should do is say like well if it's okay remember I'm in this Loop to try this K times if I find a point I don't need to keep trying so um or or should I keep trying uh generate up DEC points ah I guess I could keep trying uh but but I do need to check I do need to figure out if I get Decay and I haven't found a point then uh at least one point then I need to remove this a active one so let's say let's create a variable called found uh is false so I'm assuming I'm going to try now K times if I find something I'm going to set found equal to True here is where I know I found something so I'm going to say found equals true and then what I'm also going to do now is if I get to the end of this Loop K boy there's a lot of code here um if it's not found what do I want to do active. splice R comma 1 right remember the whole point is I started with a random point in the active list and I tried to find points around it that are okay if I didn't find any points around it that are okay I want to take that point out of the list and splice is a JavaScript function that removes an element from an array splice at the index R oh boy there's a big problem here right I've used r as the variable name for that minimum dis distance threshold and then I just made a new variable R for that index so I'm going to rename this to Rand index let's let's use a better variable name Rand index and then go back and uh add that here okay I can't believe I've written so much code without running it it's terrible idea actually I generally try to avoid doing this um yeah Taylor in the chat says can't you break after OA um okay equals false I think actually after okay is true yeah so I was going to put a break here um let's comment this out and see how it works with or without it let's just put a little question here should we break oh we'll discuss that later so weirdly I kind of have all of the code right now right if we go back uh and look at this um we're done now but I know that I I in my head I I there's something that I'm missing let's see if you can think about what I'm missing but let's actually just try running it well uh nothing's happening you know let's let's uh which is not surprising I'm surprised that I'm not seeing anything at all at all actually oh the camera went off okay well this is can be an edit Point anyway MAA who's maybe watching I'm gonna make this an edit Point too um Danish in the chat asks can anybody tell me what he's trying to make and uh apparently you are correct bacon uh someone in the chat named bacon a pink dot half an hour of programming and we have a pink dot um okay so um I'm thinking here here uh um um what could be I just want to look here for a second JavaScript is so not interested in giving me errors ah there's definitely a problem I'm surprised that I didn't get that uh you know what I could do so I'm going to get index out of bounds errors that's one thing that's an issue um uh so um oh yes thank you thank thank you thank you thank you thank you next to Kate okay so that's certainly a um that's certainly a big mistake that I had there sorry I'm reali fan okay um so I'm gonna come back into the tutorial now um okay uh so there's a bunch of errors in my code one of which which is quite crucial is that actually the uh this here is absolutely wrong what I'm looking for right this nested Loop where I'm trying to find the neighbors I need to add the actual place that I'm at so this should actually be column plus I plus and I kind of hate the way that I've written this row plus J times columns but we'll leave it um you know I I I think I might like to say something like this just to uh kind of put this in a separate variable like calculate that Index this way okay so that was something I definitely was missing um uh so that's thing I'm definitely missing let's see if we can kind of debug this a little bit uh actually I'm going to there's something else that I feel like I'm missing which is sort of crucial which is that if I pick a point and let's add the break there maybe the break is a bit of a problem uh let's see if things are going uh let's um whoa okay let's Okay pause don't pause I'm going to do some debugging now uh oh you know what it got stuck at one point in an infinite Loop you can see if you ever see this like the page I I shouldn't probably shouldn't use this live reload thing look you can see this tab is crashed calls is not defined sketch line 48 ah look at this I have oh these I didn't make Global variables so that's a bit of a problem wa hold on I don't know if that should be edited out but I'm going to go back into it as if there was like an edit point there to kind of like shorten this when I publish this as a standalone video okay I'm G to come back let's let's check let's check the code oh calls is not defined okay so oops one thing that I forgot is that if I'm going to use these in setup or Draw they need to be Global variables so let's do that ah okay oh look at this amazingly it's actually working I kind of thought for sure I had a problem ah yeah okay great so we we have an Eric uncaught cannot read property copy of undefined let's see if we can uh the distance function uh in draw uh sketch. JS line 52 so we have a problem here and I think I know this is what I was thinking of here that um what it if neighbor does not equal negative one well guess what neighbor could also be could neighbor ever be or could sample be undefined I'm trying to think about this uh well to me there's an issue here which and I don't know if this would this this this is what I'm thinking okay this is what I'm thinking I'm thinking that what this new point that I've picked if grid oh oh I know what it is of course so there's definitely a major issue here which is that if neighbor does not equal Nega one or if neighbor I think I could just say if not neighbor and you know what you know what would be better let's not even because I could just fill it with undefined because um undefined in JavaScript evaluates to false um and then uh was there another place that I was checking negative one and then I can just also say if not grid index I which I think is a better way to the reason why I want to do this is this is sometimes going to give me what if I'm on the edge right if I'm if I'm in the cell on the edge and I try to look to neighbor negative one it's going to be undefined so I also need to check for that and if I come back over here um did I switch to the other screen there I don't know if I did uh so I'm still getting this issue uh okay uh okay what what happened here uh sketch line 52 so let's look at uh let's look at what the value of neighbor is undefined oh if neighbor I only want to do this not if not neighbor if neighbor cannot read property X of undefined line 78 uh if only if not if not only if boy uh here we go now we can start to see this working and we're getting this distribution now I kind of thought that I needed another check but I'm kind of amazed that this is working anyway I guess I don't need that other check and you can see which points are active and which points are finished and we can let's just let this finish it should get um now the reason why you're not seeing this happen really really fast is because um is because I'm doing it once per frame and P5 only runs like 30 frames or 60 frames per second but I could now really really couple things I want to check one I want to take this console log out one thing I'm just curious what happens if I take out this break yeah then we can find multiple points per frame so if I'm checking for 30 points around a point this is then I'm finding multiple points per frame doesn't really make a difference I I kind of like the animation better when I am uh enforcing just one point per frame and look at that starting from the bottom now um but something that I want to uh add here just to show you is I'm going to change this to a while loop and look at this so there is a issue with the code which is that um what happens when it it's not finishing correctly so I need to figure this out uh right so Taylor S is asking this question how quick is it if it runs entirely one frame and this is not working right now and I I I I even crashed the uh so so let's think about this why is this not working so I think there's an issue this is an issue that I'm thinking of when I pick I know what the problem is what if I pick this sample point and there already exists a point in that spot in the grid I could be stuck in an infinite Loop because I could continuously just keep picking a new sample point if the grid is Ever full I don't want to pick points anymore so I think that I should add a check right if grid column plus row times The Columns right if it exists then uh then I don't right if something ex already exists there then um also skip everything hold on a sec I'm thinking right let me think about this for a second more pause wait a sec okay let me think about this um right I just picked a new sample and a sample already exists there found is going to be I don't want found to be able to be true so I should just skip this whole thing that point is no good okay so I can put that around there yeah that's definitely going to be right sorry I meant to um oops I have to I have to go back back into this video is this what it was if let me think about this remove oh hold on hold on let's put it back to if I got to get this right and then we'll edit back into the video uh so now I only have one point why is that uh the sample the new sample that I picked should be in a new spot uh no am I picking by accident in the same just curri just want to do this for a second no what did I miss okay hold on we're GNA figure this out everybody this last little piece right that works why right let's look at let's look at this oh no no no I'm I'm always doing this it this needs to be a not if it doesn't exist go ahead there we go okay hold on I got to go back into the video because now I should be able to put a while here no infinite Loop still uh okay hold on what's happening at the end uh uh boy this am I this is a much um more complex problem that I imagine okay so this is working let's let it do this um oh no no not while here the while goes here right no did I do that right okay hold on everybody let's have this do it uh um um I want to do T oh hold on let's make um let's make the uh space between them bigger and the canvas really small so what's happening at the end so let's let's look at the um active array things aren't getting removed from the active array it seems yeah look at that maybe while active. length is greater than no if it's empty I want to stop let's just agree Java is better why are there so many points in the active array all right let's think about this where am I removing stuff if not found round is false all right let's do this also how are there so many points um where do I uh no if it's GES to the end the index would stay the same okay hold on yeah that's that's weird um so let's let me make the frame rate one let's look at this little more closely look at this it's adding points somewhere that I can't see so let's look at um sample is always a new Vector right this was going so well till I ran into this problem it's interesting how it's working but it's just not finishing it's got all this extra stuff in there that's unnecessary let's look at the sequence here add add add add add add so what are those points what's being added when I can't see something uh add add add yeah look here's a point off hold on hold on hold stop stop stop how do I stop no oops no Loop why are there points being generated off screen oh oh oh oh so points should be invalid I've got to check because of the way JavaScript is okay okay I think I know what's going on um yeah you know I always forget this about JavaScript JavaScript I would get an error if I tried to put a point in the grid it doesn't exist it's actually just the space is expanding beyond what we can [Laughter] see because it's just like the array is not a fixed length so funny I mean not so okay I have to think about how to solve this and then I this video is gets this part's this whole thinking part's going to be edited out I'm G to start with the debugging let's look at the code boy oh JavaScript oh JavaScript okay um this is the problem here this point is invalid if it's off screen okay so that's that's actually should be yeah JS array is a dynamic array so um so we there in addition to checking if it doesn't exist it can exist or be off the screen so uh it can't exist or column it was just expanding forever which is kind of interesting but not what we want okay uh okay so I'm G to go back into this video and I think I can I think I can fix this um I'm trying to decide if I want to um okay so uh um Let me let me I just want to uh take this out okay and okay all right so um okay I'm back and to debug this um which I just did and you can find the live stream version of this if you want to see that about like 15 minutes of figuring this out uh I've changed the frame rate to one and I'm looking now and seeing like whoa why is it generating all of these positions that are like way off screen like 16 and 68 those aren valid points in my space and I forget I always forget that a JavaScript array is this Dynamic thing so it has no problem just saying like oh okay you're generating points off the screen I'm just going to keep adding them as opposed to giving me something like an index out of bounds exception like oh you generated a point that's not part of your original grid so I need to protect against that in some way and the way that I think I could do that right here is um in the same way that I am checking to make sure that this is not um that this is a a spot that's not already filled um what I can also check is that column I want to make sure that column is less than columns and I only can go forward if the column is actually on the screen and row is less than the total rows and it is a spot that is empty so that if I add that in we should be able to watch this now and if I run this I shouldn't see any points being generated off screen so let's look and see if this is working now I'm going to console log the length of the active array and I'm going to get rid of console logging where that point is and I'm going to put the frame rate back and I'm going to run it again and we should see okay time out I got closer I still have points off screen so maybe oh greater than Z yeah okay also oh my God so many things to check I also have to make sure it's greater than all right I I can't just check if it's not I'm going to just give my a clean edit Point obviously I only checked not obviously because apparently not obviously to me I only checked if it was off the right hand side or the bottom so I need to also check if it's greater than zero or if it is uh uh uh or if it's greater than and actually zero is perfectly valid so greater than negative 1 I could say greater than or equal to zero all of these as well this is a very awkward if statement so maybe I can figure out a better way to write that at some point and now you can see there we go active got down to zero and you can see how it fills up rather quickly so let's go back now and I'm going to comment this out I'm going to make the screen again 400 by 400 and I am going to uh give myself some more space to see this in uh I'm going to make R back down to like 10 and I'm going to run it and you can see now here it is filling the entire window now let's just see if I actually put in a while loop here in draw and I could also say no Loop so it only does it once and you can see boom each time I refresh it's you can see I get a completely different distribution very very fast and I could make this even higher resolution I'm going to get this image very very fast I do kind of like watching it grow though so let's see if we can make some something a little prettier out of this so one as we see the active point points um and the nonactive points which is kind of interesting to see um one thing that I might be curious to do is change that R to like four and change the stroke weight to one and then also I think what could be interesting is let's actually have it pick more than one point per frame uh so I'm going to oops I'm going to say for of our total equals zero total is less than five uh total plus plus so this I'm just going to do this whole thing uh five times per frame I don't want to draw everything five times per frame and we can see now you can see it growing kind of faster oh look at this I have a stroke weight four somewhere else uh and you can see look at this kind of Spacey thing growing uh I think it's even actually kind of uh beautiful let's make this I mean you can now stop watching this video and go and grab my code and play around with this but I could do like 25 at a time it's kind of nice to watch grow um you know I could even make that R like two and you could see look at this kind of amazing uh what I'm getting that you could uh kind of pattern and then I could also think about uh what if uh as I'm drawing these points I did something like I said color mode uh HSB and I used the color to be so um this is just the active let's get rid of the active points for a second what if I said said um the color is I modulus 360 uh 255 oh 100 100 I think are the defaults so you can see something interesting Happening Here uh and maybe I should say something like uh I divided by 100 um you can see I kind of am getting this rainbow pattern out of the growth of points so um that's interesting this is not what I was expecting I oh because I'm doing it based on where they are in the grid not their order of when they were added so you know what I would need to do ah um um oh oh some people are making great suggestions in the chat which I would like to I I this video needs to be over soon so this by the way is just giving you you're just seeing the stripes because it's just drawing them according to the grid pattern but what I want to actually do is have their order so let's have another array sure there's I'm going to call it ordered and every time I add a sample to the grid a valid sample I'm going to say ordered. push sample so I'm just going to make a separate array that just has them in order and then actually what I would like to do is uh draw them based on the order and whoops uh and I need to do this as well uh uh order ordered I called it ordered I think right so if I add this now uh we can see and I don't need that divide by 100 anymore you can see now their color is according to when they were created and this is a bit too uh you know too extreme and you know what might be nice by the way is just that my stroke weight be R uh because then you can see there we go um and let's you know what just so I can see this more consistently um let's add always start the point not random but actually have have the first point just be in the middle and there we go okay so now we have fast animated plle dis pointing evenly distributed and uh one of the suggestions and really actually unfortunately the way that I've written this because of the way that this should really be divided by two or times 0.5 um uh there we go so that that way they won't be overlapping so you can see this is kind of an interesting uh algorithm for seeding these points um my um somebody in the chat uh yes I am addicted to HSB you know I'm going with the Rainbow theme if somebody I I should really think of a different way of doing it but it's my theme um so if somebody uh somebody suggested and this is an interesting thing to think about how could you start with larger points and then slowly over time have smaller points and have that distance threshold be something that's variable and that grid be something that's variable that's kind of probably quite a complex prog problem which I would like to think about and do future videos on okay so thanks for watching this video about uh Pome distribution of points in a twodimensional plane see if you can expand this into three dimensions see if you can change the sizes of these find a different way to color them uh use this as a way of seating another type of system and um what kind whatever creative possibilities you build out of this uh build from the code that you'll find in this video's description and keep me posted and share on Twitter or wherever you can share it and i' I'm excited to see what you make okay goodbye uh wow that was kind of uh way longer than I ever expected um which just goes to show you if I don't do these practice these things in advance um I don't really know how long it's going to take it is 1220 I definitely want to do more today so um things that I'm thinking about are okay here this one we could definitely do quickly this is a possibility I feel like we should probably do this one oh yeah let's do this one this cuz this look look how similar this looks in an interesting way ibe we should do this one look HSP right I think probably this one there was one other thing that I was thinking about oh traveling salesperson right we could apply the traveling salesperson to those points I really want to do that I need some energy I'm feeling quite tired I don't know if this will help oh there's 82 people watching right now really that's crazy uh what other music do I have I'll give you a sneak preview of the theme song this is just a sneak preview okay that's my quick sneak preview uh everyone spam agario um sorry limit Za I should say that I I think I used YouTube's like standard words of uh standard list of words to immediately um block somebody in the chat so if you use certain words in the chat I apologize okay um okay I'm looking to see if anyone's yeah agario is not going to happen today I know you guys I did uh the beginning of it oh question time yeah you could watch ask some questions now um um okay so I'm I'm thinking it is 1220 I I think I've got you know I'm I'm a little bit losing energy computer craft yeah I really want to do computer craft yeah I'm not prepared for that um yeah so I'll mention by the way um you all of you have asked about show I I would first of all I done a whole series of about 10 videos on genetic algorithms uh about half of them have been published you can find the rest of it in the in the live stream archives but those videos are machine learning so genetic algorithms is a is an algorithm to use an evolution use the evolutionary process for a system to learn something to adapt over time it's an Adaptive process um uh I the the machine learning stuff is probably going to come more in the fall I've been but but you can two things you can do uh if you want to kind of stay up to date on what I'm thinking um thinking I'll go to uh um I'm going to go to uh sort by most requested which is clearly machine learning I did a pass over my outline so the very first this is the set of videos that I'm going to make and I'm also writing a new chapter to the nature of code book that will'll go not through all of this but I want to start I think with just basics of classification I think I want to implement this thing called K nearest neighbor like from scratch and then show a how a library would do it more efficiently and look at the basics of neural networks and I've been looking also at a library called Deep learning forj which is a Java based deep learning library which I can use with processing uh to do um some deep learning stuff with images or shapes and so um please uh on this at this GitHub issue thread um send me your ideas for example applications or particular libraries that I might look at um that could be useful um yeah the Whiteboard is peeking in I will fix that uh um so that's one thing I'll mention about machine learning stuff there was something else that I was going to say that somebody had asked about uh uh Titus in the chat asks could you create a video how exactly pein noise algorithm works I have that video already go look for my pein noise uh playlist so there's a playlist of five or six videos about pearlin noise and how it works um okay uh so snake automated snake game yeah okay uh uh I'm looking back and forth computer craft yeah okay somebody had asked something else um all right so let's see here no um I think what I am going to do is finish off today with another coding challenge to make I would like to see this in my JavaScript window this one's not going to be so easy I have to say I thought the other one I thought the other one by the way was going to be really easy or easy is the wrong word but I thought the other one was going to take me very little time amazingly it took quite a bit longer than I thought um I'm tempted to do this though so temp this is this is going to take too long so hard to decide I should I should definitely always decide in advance that's why I'm looking at the chat yeah interesting it does look it's interesting how it looks so similar to the last one so let's let's do it okay so this I'm going to finish off with this today an answer some question more questions at the end um let me get myself uh ready here uh as always I always forget the this do doget this this this do this dot s this dot dot dotg do this dot this dot this dot going to do going to do going to do going to do do do never forget this dot this dot this dot this do never forget the this dot I'm G to do the this this dot this dot this dot the this Dot Song never forget the this dot somebody composed that song for me I'm resting my voice just try to get ready for the next challenge okay oh F Looper ask why you never play my this Dot Song well okay that's a very good question and I don't have a oops I don't have a good reason for it other than when I made the soundboard I had two this dot songs and one pear and noise song and so since they were by two different people I took the this Dot from the other person I took the PE noise one from you which is so this is random is noise pearly noise that is in the core but I should add your this do song hereand lthm itself those numbers aren't related at all you pick like I'm picking random numbers between 0 and 10 9 2 7 6 1 n 48 9 2 1 3 I pick nine a lot apparently but with pear and noise I might pick numbers like this two three four three four five six five four five six seven five six seven 5 6 S 8 9 8 7 six well this is like noise performance art 2 I'm thinking my brain is working this is like noise performance 2 but with curly noise I might pick numbers like this 2 3 4 3 four five six 5 4 five six 7 five six noise that is noise so this is noise that is noise this this is noise that is noise so this is noise that is noise noise that is noise so this is noise that is noise this this is noise that is noise so this is noise that is noise that is but with pearing noise I might pick numbers like this 2 3 4 3 4 6 5 5 2 3 4 4 5 hello have aell this is like pear noise performance art all right I'm getting ready to now do a particular video on the algorithm I'm looking for a tissue feel like I need to blow my nose I'm gonna step over here to do that I'm gonna mute my microphone I'll give you a little sampling of the theme song again um all right so uh here we are uh I I'm asked uh at what age did I start programming okay well I don't want to get too lost in this uh story here but I'll give you a a multipart answer to that question I believe I first did programming in the basic programming language on an Apple 2C somewhere in a like sort of Elementary School kind of age I also remember in Middle School in like a seven in seventh grade I did some Assembly Language and some more basic programming and then that was it and then I didn't actually program again until I want to say age 30 if you can believe that so I actually really only learned to program that like no 27 what what I have to do the math here so hard 28 it was 20 27 or 28 okay uh now that I've admitted that I I wasted a lot of years although actually I think not programming is not is I in anyway diffusion limited aggregation okay here we go okay let's see here we go this is going to be my last coding challenge for today uh I need to move this over here move this over here I want to cycle the cameras this is one that I really really feel like I should have done practiced in it Advance now I have I especially if I'm going to do this in JavaScript with but I think I'll could I'll do this one in JavaScript okay here we go ah so people are asking about the theme song so the the theme song is completed and uh I'm I'm working on I'm not actually I I with collaborating with um some uh friends and colleagues I'm working on a music video which is a lot of weird green screen footage you um and I um by the way so you're interested I'm looking for animations and colorful things made with processing or P5 that could maybe make their way into the music video as part of the backgrounds or the foregrounds so if you're interested in submitting something um you can I I would say tweet me at shiffman is probably the best way okay um here we go let's get started it's 1234 I think I I have maximum an hour I need to eat lunch I have something to do at 130 which is an hour from now so I would like to be done before that but let's see how it goes okay uh here we go there's too much going on in the chat I can't follow it any any longer okay um so here we go I'm gonna try starting this video with a bumper music hello and welcome to another coding challenge this one is diffusion limited aggregation okay so diffusion limited aggregation is an algorithm uh it's a it's an algorithm where I got to try this again I'm thinking about thinking about it uh Brownie and trees fractal yada yada yada let's look at what Paul bour says uh yeah electrolyte solution zinc ion ions diffusion uh whoa oh my goodness look at this how interesting okay let's start over uh so I'm going to definitely need the Whiteboard for this get myself ready okay let's see if I can make this happen Okay welcome to another coding challenge in this coding challenge I'm going to tackle diffusion limited aggregation so what is diffusion limited aggregation well I encourage you to take a look at two references there's always of course a Wikipedia page you can kind of find out a little about the history of of this algorithm where how it was thought of what it's apply to what it kind of uh um what what it can be used for um the reference that I'm using here uh uh that I read right before making this video or actually earlier this morning a couple hours ago at this point uh is a page on the internet from June 1991 written by Paul bour which describes the algorithm uh you can see that diffusion describes among other things the diffusion of the aggregation of zinc ions in an electrolytic solution ooo that sounds kind of exciting but anyway the point of what we can do with this algorithm is to create certain kinds of fractallike tree like crystallike growth patterns and you can see there's a variety of possibilities and I there's one down here that I particularly like this one which I might try to recreate by the end of this video but let me um rather than read to you as much as you might enjoy me just reading that web page to you in this video um why don't I describe to you a little bit about how this algorithm works at least how I think it works and then the internet can always correct me and once I start to write the code for it we'll see if I'm thinking about it correctly because honestly I don't know I should have practiced this in advance something is definitely going to go wrong in this video okay so let's say we pick a point at the middle of the screen and then we just say oh hello I don't know who we're saying hello to but uh there's this thing called a random Walker and the random Walker starts here just starts to randomly move around the screen and at some point it hits this point now obviously it's not going to take that exact path although could randomly and once it hits an existing point it gets stuck and then we release a new random Walker and it starts to walk around and when it hits an existing point it also gets stuck and then we release another random Walker and it gets stuck and another one gets stuck and another one gets stuck and another one gets stuck and as they get stuck we start to see this Fanning out pattern so this is what I want to do now I think it would be really interesting to actually animate the full process there's kind of a spectrum here we could write code to animate the whole thing like we see these random Walkers moving around the screen and getting stuck we could also not animate anything and just see the final image or we could do something in between I think I'm going to try to do Point by Point um but not animate the random walk itself that's what I'm going to attempt so let's go back over and we need some code to start with which I have here no no code I mean I have a p5js sketch with a canvas and a background and if I go back to the browser I think I have it running here in the browser I can open up the console which I'm definitely going to need for debugging um and so let's first start what do I need I want I think I want to have an object no you know what let's just start right now first let's do this rather simply I'm going to say uh I'm going to call the thing that's finished the tree I don't know if that's a good name for it but all of the points that are in the pattern I'm going to call the tree uh I'm going to need a walker the thing the point that's moving around and uh that's just about it really and what I want to do is and I need a size like the size the radius for each one of these points which by the way you could do it on a per pixel basis so that always could be one but I'm going to try I'm going to try something like 16 just to have it be bigger to start with so um the first thing I'm going to do is I'm going to create I'm going to say tree index zero equals create Vector a point in the middle of the window and then what I'm going to do in draw is I'm going to say for all the points in the tree uh uh say stroke weight R and stroke 255 and I'm just going to draw a point tree index i.x tree indexi doy so and let's not worry about this walker for a second so I'm going to refresh it well okay I don't need to refresh it it's live I'm using this adom package called live reload so there's the point okay so now what I want to do is I want to create something that I'm going to call a walker and I'm going to create I I don't know if this is such a good idea but I'm just going to put it completely randomly anywhere in the in the sketch window it probably should start along the edge or something or actually if you read Paul bork's Page I remember now reading a point that you can make the algorithm more efficient by cleverly picking it close to where you think it might need to be but I'm just going to create a random Walker and I'm going to say I'm going to see if that Walker should be stuck so first thing I need to do is check again all of the points of the tree and I want to see I want to know uh the distance between that walker and a particular point in the tree and if that distance is less than some threshold R I guess oh no r r * 2 right because I just want to know if those two circles are touching so if the circle if the two circles are touching the distance is less than twice their radi radius um if distance is less than R then uh stuck equals true so I'm going to create a Boolean variable assuming stuck is false and then I'm going to go through all of the points and if stuck is true I can say uh break and now what do I do here I'm going to say uh and actually what I want to do is like keep going until you get stuck so as long as you're not stuck keep checking all of the points and as soon as you get stuck set stuck equal to true and what happens if you get through this Loop and you're still not stuck then Walker should it should randomly walk by some amount let's and you know I could probably be more thoughtful about this walker dox should change and Walker doy should change the other thing I really need to do is I should make sure it stays on the I don't want it to walk randomly Far Far Away off the window so I should constrain it to um to between zero and the width of the window so let's see and now once it finds a part point when it's stuck um then what do I do I say tree. push Walker there we go and now uh let's see what happens here so I've got some infinite Loop problem this always happens uh with live reload I shouldn't be like there we go oh look at that so I missed up like something good is happening but boy I mess something up this is interesting so I must have used an X and A Y ah okay that should help yeah so interestingly enough this doesn't look so totally crazy is this correct though very hard to tell so let's do a couple things one is um The Stroke weight should really be half the radius um they should be right up against each other uh let's move them by let's move it by just one one thing I want to do is create um uh I'm going to I'm going to just make a random unit Vector to be a little bit more controlled about how they're moving uh and then I'm just going to say uh walker. add that velocity so this is a little bit better just to make a random vector and add that to the walker uh I I got to I think this live reload thing doesn't work for me because um um because okay that's good and actually maybe I meant for this to be times two yeah there we go okay so this is definitely looking kind of right right now uh let's the basic idea let's make this much smaller yeah so you can see this is actually working although it's quite of a slow algorithm can speed this up so I think I've got the basics of the algorithm correct actually it's just kind of slow to do this one point a time let's do it this way um one thing I want to do wow this maybe this isn't as bad as I thought Let's uh let's let's think about this let's do um I think we could release a bunch of walkers at a time so let's try um let's try releasing 10 walkers at a time and uh just to see if we can kind of get this going a little bit faster oh you know what the Walkers I think need to um the start from an outside point right well let me let me do this though anyway and then we're going to do pick how where the Walkers start differently which is going to be much better I think so um so all right so I just want to see something if I I'm going to create a bunch of these Walkers and then now uh actually I can just do this as a loop right uh while you're not stuck okay if hold on just pause for a second boy this is really hard to doing like two hours into today without having eaten very much very well what I was thinking I was going to be clever was like add a whole bunch around the edges uh and have the all just like kind of start walking and then remove them as they're done and I think I really need a a walker object to do that so let me um this is why I want to practice these things in advance to S think them through um thinking about the best way the best most efficient way to do this uh create vector by the way people are uh someone is asking in the chat Akash is asking create Vector creates a P5 Vector object which stores both an X and A Y um so okay so hold on I'm back and um I thought of something which I think it might make a little bit more sense to be able to play with this a bit more by having the Walker itself be an object so I would like the uh instead of just being a vector I want it to be an object that can store both where it is on the screen its size it can call functions on it that's going to give us more ways of playing with this algorithm and make it perhaps a bit more efficient so so let me go here and what I'm going to do is I'm going to create a new file and I'm going to call that file walker. JS and I'm going to make a walker object a Constructor function and I'm going to say uh I'm going to say this. position equals create Vector uh random width random uh height so I just want to take a lot of this functionality um and that I've written out here and I want to also whoops I want to create a variable called uh this. stuck and I want that variable to be uh false when it starts I want to have a function um that's called walk so I want to um I'm going to I want to have a function I want to have a function called walk where I implement this algorithm where I pick a random Vector I add it to the Walker so it moves somewhere on the screen I can strain where it is in the window um and I want to have a function that says check uh what What's a better name for that function like uh update no uh uh stick I can't think of a good name whatever uh check sticky check stuck whatever that's going to be the name of the function check stuck and in that function what I'm going to do do is I'm going to take this particular algorithm uh and I am going to I actually kind of want to see them walk but I think I have I actually kind of want to do this without the while loop so what I want to for a second what I want to do is check all of the points on the tree and see if the distance between this Walker's position right which is actually uh this pause now dot right the Walker is no longer The Walker is now an object with a position um is near anything that's in the trees's position because everything in the tree are Walkers that are stuck oh you know what I didn't do is I'm not delete anyway so okay keep so um and then if it's stuck I'm going to do something obviously okay so what I want to do here now is create an an array of Walkers and actually tree uh index zero is going to be a new Walker that is in the middle of the window uh then and that is stuck so what I'm going to do in the object is I'm going to have some optional arguments I'm going to say XY stuck and I'm going to say um uh I'm going to say uh X um I'm going to say X or this is a way of doing optional arguments so if I pass in an X I'm going to create the vector at that X but if I don't X will be undefined then I'll get a random value y or or random height okay and then uh same thing here I'm going to say this stuck equals stuck and if it's undefined that's the same thing as saying false um and then I Need To Say by the way this do stuck is true and this is this. pause tree. pause okay and I should really check against uh some other array like the others I'll call that which is called tree so what I want to do right now is I want to create one Walker in the tree and then I want to create in the Walkers I want to put just a random Walker so I have tree and I have walkers and I I might as well do that the same way in index spot zero and then what I want to do is I want to see oh and you know what I should do is I should uh now I can also have a function which is called uh this. show and I can actually take all this code I should have done this at the beginning I can take all this code and put it in the object so I can um set a stroke weight set a stroke and this. pause and draw the point at this. pause doy and and I you know I could be a little smarter about this and actually just make this an ellipse so I could be more precise about the radius and I could say R * 2 R * 2 which is a global variable at some point but I can have them be variable sizes at some point okay so now I have this object I have a walker object which can move it can check to see if it's sticking to anything else in some other array and it can also um it can also draw itself so what I want to do first is I just want to say let me display everything in the tree and let me display everything in the Walker's array okay ready so if I if I reload this sketch Walker is not defined oh uh sketch line seven it's not defined because I have to remember to add a reference to it in my Javascript file uh to walker. JS and missing walker. JS line 25 has an error so let me go down and see uh this. ellipse this. p.x this.p doy I don't see any error here on line five 25 missing parentheses after argument list sketch. 7 Walker is not defined function walker uh period no com hold on time out what am I missing here walker. JS oh is there a comma okay thank you oops I had a period there not a comma there we go great so I should see here whoops I should see this is this and this is the Walker so let's now have let's just now in sketch let's also have Walker's index i. update oh update was not it walk so you can see there it is moving randomly it's going to take a while to randomly intersect that but it is walking randomly uh I could obviously make it uh walk faster so what I want to do now actually just as an experiment is I want to I this is not at all I've gone off the beaten path here from the actual probably algorithm but I want to put 100 Walkers into the space right okay so they're all moving around randomly and what I want for them to do is if if Walkers index I check stuck others then Walkers uh then I what I want to do is say walkers. splice I want to take it out of there and I want to say tree. push Walkers index I so I want to uh whoops what I want to do is I want to anytime one of those Walkers gets stuck I want to put it in the tree and I want to take it out of the Walker's array because it's not something that's moving anymore so uh we let's check this. stuck equals true so actually um let's make a function uh is stuck actually so I don't need a I don't need this variable I can just say return true and if it kind of gets to the end return false so let's look at that um and see what happens others is not defined a tree right I have to pass in the tree there we go you can see them getting stuck go go Walkers go go go go Walkers go so you can see how this takes a very long time I I'm kind of curious to try a few things let's try a thousand Walkers and I this isn't what Paul bour describes what to do um on the website at all but I kind of like and so I kind of want to um highlight them differently so uh I should actually by the way I should have that be a particular variable uh because what I would like to do when I draw them uh is if if this dot stuck I want to give them a different color uh so let's uh so we can see which ones are stuck um so now though uh I think better more than better than adding a ton so let's still add it let's Act actually do this particular algorithm multiple times per frame like let's let it try to move all the Walkers 100 times per frame whoa why are they all clustering near each other am I oh I'm drawing them 100 times I don't want to I don't want to do this show so I just want to show them once there we go this is what I was sort of hoping to see so now there finally okay so now we can kind of see the algorithm happening which I think is kind of interesting it's it's going to happen very slow this is a complete and total brute force method um but I finally got something that I like here um and because at least it's sort of interesting to watch it is happening kind of slow slowly I want to try a few things to make it happen faster let's increase to 200 Walkers and let's increase the number of times uh to 250 um the frame rate is a little bit slower now I kind of like to keep the frame rate up so let's go down to 200 um there we go so we could obviously um and the other thing I could do uh it's interesting oh it's slowing down over time so the reason why it's slowing down over time is there's more distance checking so one thing that I could do that I would hopefully um help this run a bit faster um which normally I wouldn't care about but it is kind of bothering me how slow that it's running is let's see if we can eliminate the square root calculation um and to see if that makes it run a lot faster so one thing that I'm doing here in the check stuck function is using this distance function and I want to write my own distance function I'm going to call it distance Square ukian distance um and I want to take it I want it between two vectors A and B so what I want is the difference in X which is bx a a dotx I want the difference in Y which is B Yus a doy and now normally if I were I would say return the square root of DX * DX + Dy * Dy this would be regular oldfashioned ukian distance right uh a um the square root of you know the hypotenuse of a triangle a plus b c s or c equal the square root of a square plus b^ s so what I actually want to do here is just write this algorithm but take out the square root and then what I can do now is not use this but use my own distance squared function and then I can actually have that distance be uh R * R * 4 which is what I want now is for the distance to be did I did I mess something up here yeah I'm missing a parentheses uh what I want is the distance to be instead of checking if the distance is less than R * r i want the distance r squ or R * 2 2 is R * R * 4 so this now uh distance uh dist squared this should hopefully be a lot faster um you know uh did I wow good okay so boy just eliminating that square root you can see how much faster this is now okay now here's the other thing is every time I remove a walker oh this is kind of nice actually just to like Let It Grow with a fixed number of Walkers I'm kind of enjoying that and I have sort of an interesting pattern I don't know why oh did the stream cut out oh wait back there was a technical glitch there but hopefully you're still seeing me I seem to be I see myself again so you can see here that I have this kind of nice finished pattern which I really quite like actually um so some other things that I can do here are one is whenever I remove a walker uh I could say like I always want to have 200 Walkers so um uh I can I can always say like wow walkers. length is is sorry is less than 200 um walkers. push um walkers. push uh new Walker so this is even when they get stuck I add new Walkers so I never oh and by the way I started with so let's make a variable called uh Max Walkers equals uh 200 200 and we're going to start with uh that's we're going to do it oh no no no that's a different value Max Walkers I kind of made and then I'm going to make another variable which is uh iterations which I'm also going to make 200 let's make these variables I think it's kind of nice right we can see how it behaves and we can see how it behaves so now I'm always keeping um 200 Walkers so I want I want this really to happen pretty fast so let's see if I can up the iterations a bit um and see if we can get this screen now it is uh it is sort of slowing down so I think we're we're in we're in pretty good shape now here's the thing I think what's interesting oh you can see it really slowing down um so if I go back to oh and you know what there's also a problem here which is that I shouldn't be creating random Walkers anywhere in the window I should only be creating them around the edges so let's also make that Improvement okay I think it's worth making that Improvement so I'm going to make I'm going to go back into to the Walker and instead of doing random width random height I need a function uh make Rand uh let's do a random point and I'm going to give it that X and Y right I want to have some separate function somewhere that's going to take care of this for me uh actually I'm going to say if x this.p equals create Vector at that X and Y so uh if you get an X and A Y um otherwise let's pick a random point now I'm sure there are lots of clever ways I could write a function to give me a random point along the edge but the way I'm going to do it as as follows I want four possibilities top right bottom or left so if if I'm picking something along the top I want a random X and I want to return create Vector uh that random X comma 0er else if I equals 1 let's just say that's the bottom uh and again we could make this more efficient let's make that along the height else if I equals two I want a random Y and I'm going to along the left side and in all other cases I want a random Point uh along the right hand side so let's run this now you can see that I'm only picking random points that are coming from the edge which I think is also going to work a lot better because I don't want to pick random points kind of inside the thing that I'm already creating so here we have now uh diffus Fusion limited aggregation go go go I wanted it to finish um so one thing that I kind of miss so this I I got to come up with a clever solution to figure out when it's done because you can see it's kind of uh it's now like just infinitely picking points along the edge and it kind of went crazy a little bit when it kind of got to the edge so but I kind of like the idea of actually just for right now um never not adding um not adding any more Walkers and starting with a fixed number of points so I'm going to start with 1,000 points and yes it is running kind of slow but when those points are removed we got to get our first point to get stuck randomly there we go I think it's going to kind of speed up over time is my belief but uh and you know one thing I could probably do which might also help it run faster is draw less stuff uh or what might be better is to just add you know add one point at a time uh so I think really the way that you would do this is I might let's just do five but like have like a thousand iterations here's another way to doing it yeah I like this this is nice I like looking at it this way too so there so many different ways you can visualize this I'm kind of stuck on it um and I encourage you to uh sort of enjoy coming up with ideas on your own but what I what I do want to do is um what I do want to do is uh let's let's go back to this um what I do want to do is kind of look at how um how you can vary this algorithm to get different star different kinds of patterns so let's go back and look at uh the Paul Bor website and let's first sort of see a couple things one is how right now this is essentially what I'm getting you know I could do a better job of kind of thinking about the layout of the space and making the algorithm more efficient or that you know letting it run for a long time I encourage you to do all that I'm going to release a processing version of this which maybe runs for a while and like renders the final version to an image somebody remind me in the comments if that doesn't exists so we can make a version of it it looks like this in the browser it'll kind of I don't want to like shut down a browser window but let's at least first think let's try to see how we create this pattern so this pattern is all about the seed points what if I fill the tree with points along the bottom so let's let's fill the in the beginning instead of having one point what if I say four r i equals I'm going to say r x equals 0 x is less than with x +al r * 2 and what I want to do is say tree. push new Walker at X comma height so I just want to create a whole bunch of points that I start with at the bottom and you can see what happens when I do that now what if I want I think I want all my Walkers actually just to start at the top so let's go now to the Walker file and and what if I basically say h you know what let's just all always have I'm going to comment all this out and let's always have all the Walkers start at the top so I just changed this function have all the Walkers start at the top whoa what did I do wrong the Walkers are starting time out um uh uh what did I do what did I do create Vector X return X comma 0 so it's at the top and the tree this new Walker's X comma height why are they getting stuck oh no hey let just try something here I think the this I like better but doesn't make a difference that worked for a second random Point let me put this back yeah why are they this works uh why why if I only create them at the top are they all getting stuck uh hold on I need them I'm debugging again in a sort of 110 I got to solve this okay do I equals p hold on so you guys in the chat are probably giving me good suggestions here um there's one point at the top for whatever reason why is there one point at the top you see what I mean hold on what's this point why is that a walker or a tree that's the tree what's that extra point there's a whole row of stuck ones at the bottom there's supposed to be a row of stuck ones at the bottom but what's this extra one at the top what's this point H where is the Walker getting a point hold on zero lost my mind here it's in the tree uh and add true in the Constructor somebody is telling me something good I think the first one well there's an extra there's an extra spot up there I must have this in like a really obvious place that I can't see x = 0 X is less than wi yeah but I took out the whole dependency on that here uh so why is one of them oh I know what the problem is ah oh JavaScript you guys see what the problem is guess what when X is equal to zero it evaluates to false okay let me back out of this for a little bit here uh I want to get to where I was when I started debugging so I can yes uh Dr Fresco is probably telling me this the whole time in the chat and I just like didn't see it because there's too many other messages and I wasn't able to like get my head around it oh what a what an awful mistake uh okay so let me go back to okay so um look at the crazy Walkers I don't know what they're doing um okay I'm back there was a major problem with my code which is right here oh this is a um whoops okay hold on try that again I'm back there was a major problem with my code which is right here remember how I was saying I'm so so clever and I can check to see if the user gives it an X and A Y so if x and if there's an X and A Y make a vector out of the X and the Y otherwise make a random Point well it turns out that if you give it the value zero right zero evaluates to false so when I say make a walker at 0 comma 0 for example or Z comma height it's actually going to not make it at that point but give me a random point so what I actually need to do here is say as long as X is not undefined and I'm sure there's a more elegant way of doing this but I'm just going to fix it right now and saying and Y is not undefined do this and that should I think I have some sort of uh browser having crashed problem infinite Loop problem if x probably um uh oh right I'm drawing them all again h i un yeah it's just slow and then um um and also I think I can do away with this third argument stuck and just say this dot you know it's if if I'm making it at a particular point it's automatically stuck otherwise it's automatically not stuck just to be clear about that and now we should see okay so here we go now we have starting all the points at the top and they're going to go they're going to kind of get glued at the bottom so this we should see some kind of pattern as this runs for a little bit you know Speed Ahead in this video if you want you know listen to some music while you're uh waiting come on trees grow so um so we should see a pattern that's coming much more like what we've got here in oops I'm in the wrong place what we've got here in this particular example so here's another so come up with your own scenario what if you start with points all along the edges what if you start with points along a radial path in a circle or have points moving um ah you have points starting around the edges of a circle and your random Walkers all start in the center you can get something like this um now but I do want to add something else here which is um oops I got too much music playing okay I do want to add something else here uh let's just see how it's going you can see oh it's it's moving along here we're growing our trees I want to go I want to go back to Paul Bor site and you can see something here which is interesting look at this particular image now as I scroll down look at this particular image and look at this particular image there's a kind of density or fuzziness or almost hairiness to it and you can what you can actually do is uh it's called stickiness you can have a probability you can think of when it touches something that's part of the uh part of this tree this this diffusion limited aggregation thing that's growing you could have a probability that it gets stuck rather than automatically getting stuck uck um so I think that's something interesting to add for example if it's within this threshold Jo don't just automatically have it get stuck but pick a random number between zero and one and if that random number like our stickiness is now 10% uh then I could actually have it get stuck and unfortunately we didn't get to see how that was going um let me see if I can make this run a little faster um there's a couple things um so I'm going to uh I'm going to give it more iterations and more max random walk Walkers um the other thing that I could do actually that I think would really help is I could have the uh Walkers as they walk not just I could have them only ever walk down so I could actually say I'm just going to comment this out uh VAR velocity equals create Vector some random amount between negative 1 and one and then some uh random amount between zero and one so that these uh the the random Walkers only ever move down boy they they move down much too fast I guess I should maybe I should weight it just a little bit something like that oh okay hold on too many this was a nice idea that I had that doesn't seem to be working out very well there you can sort of see I don't know if this was a good idea or not but you can sort of see how if I have them randomly moving down why do they always uh go back up to the top am I oh I'm adding them back in again that's making it run slower so um uh uh yeah so I I wanted to take that out actually and you can sort of see anyway you could see that by varying lots of the algorithm I'm G when I when I publish the code for this I'm going to make you a nice clean version that works really well because there's so many variables you can play with here okay I want to play with one last variable so uh look how slowly come fall Walkers go to the bottom stick to the aggregation pattern oh um okay so let's do one last thing um what I'm going to do now which I think will be particularly interesting and uh is try to recreate this pattern notice how the walkers at the center are larger than the ones on the outside you can see this one as well um I didn't get to do the the the probab didn't get to see the the probability thing play out uh let me take that out for a second and so what I want to do now before I leave you if you're still watching is I don't want to have r as a global variable anymore I want to have each Walker have its own variable so I'm going to make R 32 uh and I need to look for anywhere that I reference it this. R uh other. R right now I'm also importantly checking my own radius against another radius or others index i. r and then I also want to draw it with this. r this R so one thing that I could do which is and then I want to go back to the center ver the version where it's uh all um where it's starting in the center which I think is a bit easier to kind of work with right now so I'm going to take out this tree that starts off the bottom let's just make sure this still works whoa look at these so if I make them really quite big that was kind of interesting uh let's make this eight okay so you can see what this looks like now and this is working again now with um with uh with just sort of larger circles and I kind of would like to uh just also when I draw them I would like to give it a little bit of alpha here I think would be worth seeing uh uh let's just a little bit of alpha Okay so so okay so now we have the basic core algorithm happening and you can see all of these uh Walkers getting stuck so what I want to do I think which I think would be interesting is I'm going to I'm going to make the maximum number of Walkers just 10 but I'm going to increase the iterations by 10 to a thousand so these are the Walkers now sticking uh one at a time now there were only 10 of them so 10 of them are going to get stuck that's all we're going to see but now what I'm going to do is I'm going to each time I delete one from the array uh I am going to add a new one with a smaller radius so what I want to do is let me get the oops let me get the radius of the uh last one in the array this might be a and I'm going to make a new Walker with uh boy uh I want to make a new Walker with a that that radius times 0.5 so half the size the problem is now I need to make the Walker be able to be created now with a radius but at a random point so I think one thing I need to do one thing I could do actually this is better is I could say if arguments.length equals two that means I've gotten two arguments in X and A Y then create the then create a a walker with a radius of eight otherwise then create it with the radius of and then otherwise if um yeah otherwise create a the AER with the radius of the first argument so if you have less than two arguments so this is another way I could just check that arguments array I have a video tutorial about that otherwise I can uh I can get it I can make one with a particular radius and so let's see uh let's see what happens here um uh okay so where am I making Walkers ah so this is with I forgot no no no no no so with wait or else if arguments.length equals 1 else now with no arguments right then the position is random the radius is eight and stuck is false so uh now the other whoa what just happened here so pause uh let's look at the sketch ah whoops I have the third argument there okay I had by accident whoops I had by accident a third argument left over for when I was passing true or false in for stuck so if I take that out um whoops hold on no there's going to have to be an edit Point here while I because I screwed this up yeah a lot of people are asking about the grid optimization from the pon distribution and absolutely we could add that in but hold on a second I want to I want to fix this I realize I have some okay so back I realized there's a problem here where I have actually I'm passing into three arguments because I had an extra stray true from before so let me take that out and you can see this is working now strangely enough though uh the um the Walkers are getting like really really really small really fast and I just realized that's because um what I want to do is get that before I start adding a whole bunch of them I want to get the radius of the last one there cuz when I add one and get the radius of the last one they're getting smaller and smaller and let's let's just make them uh go down by 75% so you can see here that the Walkers are getting smaller as they adding them back in and maybe that's like too much they just get smaller so quickly so let's see what this does am I yeah so you can see over time as I'm adding more and more walkers in they're getting smaller and smaller and smaller uh we could also do something now while we're here let that run for a little bit um let's let's see if I give it 50 at a time will it it kind of perform okay um so one thing that I want to do is uh and I actually could just have every Walker in sequence be actually a little bit smaller than the previous one that might actually be a better way to do it um because I could have like a radius counter uh and and and that's kind of uh yeah let's do it that way actually let's try this I want to have a radius a starting radius starting R uh I actually just say radius equals uh I can have a starting radius just for that Center one no that's fine radius so I want to have a starting radius of eight and whenever I make a a walker I say radius times equals 0.99 so shrink it a little bit shrink it a little bit and then there's another place where I make new ones which is here shrink it a little bit and then actually I can take out this idea of the argument because I'm just going to use a global variable I don't love this anymore I just use a global variable radius that's always shrinking uh to go back and um put that in here uh and have this always be radius radius so there is no there is only back now I have I'm sort of simplified back to just two cases I either getting an X and A Y and this. R is always just equal to that Global variable rate I don't like now how I've done this but we're going to do it this way anyway so you can see every single one is like 1% smaller than the previous one which is kind of interesting cuz we're getting sort of they're actually not exactly in order so that's not what I intended to happen but we are seeing sort of an interesting result from this and they're getting smaller and smaller and smaller and then I could also say what I like about this is I couldn't I now have sort of like a terminal point where I can say if the radius is less than one um only whoops only bother to do this if radius is greater than two so now we actually like I don't want to have circles where the radius is less than one so now we actually have a terminal condition for this algorithm and I also now want to add one last thing which is coloring them so uh and you know I could actually uh so the other thing we could do is I could have a um I could map their Hue I could map their Hue uh so I could say it I could say uh color mode HSB and in the Walker object itself got to add this in I could say Phil I could I could say the Hue is mapped to the radius which goes kind of between like 0 and 8 to between 0 and 360 and I could give it that that color and I think I'm actually going to say no stroke and let's forget about the coloring it based on whether it's stuck or not and I have an error somewhere so we can see now and they're not actually so I probably should order their color based on when they get stuck but this is kind of interesting nonetheless and you can see as they're getting smaller and bigger and you know uh I don't know what just St why it just stopped right there oops but you could see I'm going to clean up this code and give you a working version I might change the order around the colors I'm going to um uh I'm very good at crashing Chrome but you can see sort of the ideas is behind this particular algorithm I don't really I time is up I think because this has gone on for way too long I don't have a good perfect version of this to show you but um I will uh I will include that in the the link from this video to the source code I'm going to make both a P5 JS and a processing version of this so I can do kind of like a higher resolution one that kind of generates it and just saves it to like a JPEG so you can see how that works maybe I'll come back and do another video followup about that but now you can see sort of the basic idea and the implementation behind this particular algorithm that's on Paul bork's website okay thank you for watching and I'll see you in another coding challenge soon okay I should have I forgot um uh uh I should have break from the loop where did I break where where did I miss so I'm gonna I'm gonna fix this now I've got to go actually this was uh so first of all I absolutely could use the like uh tree thing uh I should break from the loop so where should I break uh if it's stuck remove it oh you know what this should um I should really go through the loop backwards that's bad because I'm removing from it uh oh oh this is the problem of course um while and radius is greater than one so I can I should do that test there of course I'm gonna come do an addendum so and then also I want to just create so each time it gets stuck um then I'm going to say I'm going to change the I'm gonna set the Hue actually the moment it gets stuck so it actually has no color until it gets stuck um and so I'm going to go back to saying it's white or it's and I'm going to say this do H equals H so I'm going to give it a a hue the moment it gets stuck and so now whoops this do stuck otherwise why oh because I'm in HSB mode how do I get it to be white in HSB oh no saturation there we go right no Hue saturation brightness right oh how do I get white in HSB and I'm losing my mind and let's have the uh uh let's make shrink a variable so oh my God it's 137 I really have to go um am I still mapping it from ah whoops there we go wait this do here that's happening why is this not oh whoops I'd had the saturation off there we go okay yeah the Hue uh the Hue should is going to have to increase a little bit more and this the shrink is much too uh there we go this is what I was attempting to do I'm gonna come back for a second uh back for a quick addendum I actually I kind of cleaned up the cat a little bit and it's making it work a little better now um I had two big things that I missed one is that um it was it was crashing the browser I think I need to point this out because I had this while loop that was always trying to fill it I was trying to fill it if if it ever got less than a certain amount but I didn't allow myself to add any if radius was below a certain amount so it got stuck in that while loop so I fixed it to just say only do the while loop if radius is greater than one and the other thing that I did is I added a hue variable so that each time it gets stuck I increase this sort of global Hue variable and you can see now the Hue is sort of assigned to the order in which it gets stuck so this isn't doesn't exactly match um what you see on the uh these particular scenarios but I bet you with a little bit fiddling and speaking of the algorithm you could get something like that so um give that a try and uh if you can if and as you make more beautiful and interesting versions of this uh think about ways of optimizing it of where you start the Walkers how many you use how you check to see if they're near something um we'll come back and I'll make some improvements to this okay this is really the end now goodbye okay um so I'm sorry everyone that I'm now going to be rushing to leave um I normally I would take some time to answer questions but I forgot that I I made some appointments here starting at 130 um and uh I'm just going to um say uh I'm just going to send a message saying that I'm running a little bit late um and I'm going to check here um to see sorry I'm trying to look um I'm trying to look for the my message ah here we go to see how late I am oh whoops uh I'm not finding it uh I'm wasting all this time trying to here we go uh almost there everyone uh and I'm going to go to home um ah okay so that's fine I'm only like about 10 minutes late which I think is not that big of a deal um so uh let me just check back to the chat again uh to give you guys a few parting words uh uh okay I hope you guys en I hope everyone enjoyed this today it was a little bit crazy I hope two video tutorials will come out of this both much longer than I could have ever anticipated and hopefully somewhat useful I will also be releasing the code I have of a mind to like redo these challenges again having done them once but I guess you know to leave leave them messy and crazy that's kind of the way that it is so um um I'm going to get going um just to uh quickly remind you guys if you I'll be doing one live stream again next week this is the last live stream for to for this week uh if you want to sign up for an email list look this is me live right now if I hit play here look there I am on my website live um uh by um you can put your email here at coding rainbow.com I'll send an email over the weekend or Monday kind of letting you know when the time will be for next week if you want to tune in live uh if you subscribe on YouTube You'll also get a notice and I have a slack Channel where you can suggest topics and ask questions um and there's a small Discussion Group there if you want to sign up for the patreon which is a crowdfunding website um I also have stickers available via Sticker Mule you can tweet me if you're interested in those they look like this you can buy them uh uh if you if you're in New York City and I run into you on the street I will hand one of these to you um and I had tshirts available at one point but those are no longer for sale but I'm going to do another run of them so if you're interested in that um let me know or better yet you can go to cotton.com product/ coding rainbow and you can put your email in uh here so far 11 people have requested at the tshirts I think they run them again once it gets up to 40 um so I think that's about all I have to say I don't know what I'm going to tackle again next week um so send me your suggestions on GitHub on Twitter or if you're in the slack Channel um that's where I'll be sort of posting what I'm thinking about and uh uh and the kind of different things that I'm looking at so um send me your feedback uh yesterday's live stream it wasn't yesterday actually um the um uh yesterday's live stream I just released it's here coding rainbow live number 55 and I did a Flappy Bird and an agario clone challenge the agario one I only just did the basic mechanics I didn't actually get to all the networking multiplayer stuff or a lot of the features I will try to come back to that at some point so many topics so many topics so little time so uh thanks again I'm looking in do I do any CSS programming a little bit and I do have if you are interested I do if you go under these playlists uh uh play number seven is a whole set of playl uh tutorials about HTML CSS and the P5 Dom Library which I encourage you to uh check out if you're interested in learning more about G and GitHub there are these videos The Connect some websockets I have got a lot of stuff in here so um so uh please be in touch thank you as always for watching thanks for your enthusiasm uh and I'm gonna dance my way out of here I guess awkwardly oh it's awkward that I'm still here right so I'm gonna I gonna I have to press a button to stop the stream should I try that again to be more elegantly about it did I not oh I didn't press it correctly bye
