With timestamps:

00:01 - - Hello I am continuing my tutorial series
00:03 - called Git and GitHub for poets
00:05 - and I'm very excited about
this particular section
00:07 - because what I'm going
to do in this session
00:09 - is crucial to your life as
a user of Git and GitHub.
00:13 - What I did before was show you
all of these concepts, right?
00:17 - Here's my list of concepts,
you have a Git repository
00:19 - you can make commits
which are like changes,
00:21 - you can make branches,
you can merge branches,
00:23 - you can fork, you can do a pull request
00:24 - all these types of things
00:26 - that you can do with the Git software.
00:28 - You can do all those things
just using the GitHub website
00:31 - through its interface however
the truth of the matter is
00:34 - if you're going to be working with this
00:36 - for open source projects
or even other kind
00:38 - of creative ideas of how you might want
00:39 - to work with Git you're ultimately going
00:41 - to want to work on your own laptop.
00:43 - So in the previous video I
talked through the basics
00:45 - of just using this terminal
so if you don't know
00:49 - how to use terminal go back
and watch the previous video
00:51 - but if you do you're in the right place
00:53 - and you're ready to actually download
00:55 - and install Git onto your local computer.
00:57 - Now I'm not going to do this in the video
00:58 - so if you're watching this in real time
01:00 - pause go to this URL git-scm.com,
download, install Git.
01:05 - Once you've done that open up terminal
01:07 - and you'll be ready to continue with me.
01:09 - So to make sure everything's working
01:12 - what you want to do and I'm
going to, whoops (laughs)
01:15 - I just want to get into the right place
01:17 - so I'm in the trash? (laughs)
01:20 - Okay I want to be just in,
I want to be on my desktop.
01:25 - Okay, so I am now on my desktop
that's where I want to be.
01:29 - Be somewhere, your documents
folder, your desktop,
01:31 - where you can start adding files.
01:33 - Desktop's going to work
for me and the thing
01:35 - that I want to do is
just type the words Git.
01:40 - So if you see this you're in good shape.
01:43 - Now my fonts kind of big so this looks
01:44 - kind of like a mess,
it'll hopefully look nice
01:46 - and neat on your particular laptop.
01:48 - I'm going to hit clear if you see this,
01:51 - now well I misspelled Git to
make sure I got this error.
01:54 - If you see Git colon command not found
01:56 - then your Git is not
installed properly try again,
01:59 - ask a question in the comments here.
02:00 - Hopefully I can help you
figure out where you missed
02:02 - that or make another video
for one of the common problems
02:04 - but hopefully you're
actually, Git is working
02:07 - and when you only type Git what you get
02:10 - is a lot of explanation
of well, you need to issue
02:14 - also a command, so everything
02:15 - about using Git locally
is all about saying
02:17 - Git something like you can imagine
02:19 - what this is, Git commit, make a commit,
02:22 - make a change, make it, save a change.
02:24 - So the first thing though,
like if I just type this,
02:27 - the first thing that's
going to happen is saying,
02:29 - not a Git repository so this directory
02:32 - is not a Git repository.
02:33 - What is a Git repository?
02:35 - Remember this thing, this rainbow poem?
02:38 - This is a Git repository.
02:39 - So what you need to issue
Git commands is a folder
02:42 - on your computer which
is a Git repository.
02:45 - This is essentially a
folder on the GitHub server,
02:48 - you now want a folder on your computer.
02:50 - So I could just go and
grab this exact repository
02:54 - and bring it down to my computer
02:56 - and then work with it there
and I'm going to do that
02:58 - in either this video or the next one
03:00 - but I think it would be
useful just to show you
03:01 - what happens again when you start fresh.
03:04 - So there are two ways of starting fresh.
03:06 - One way is actually just saying Git init
03:09 - and I'm going to show that to you
03:11 - at the end of this
video or in the next one
03:13 - but I think an easier way for you to work
03:15 - when you're getting started
is make your repository
03:18 - on GitHub and then download
it to your computer
03:20 - and I keep saying the word download
03:22 - but in a moment, soon I got
to start saying push and pull
03:25 - because ultimately pull it or clone it
03:28 - is actually a new term
so we're going to get
03:30 - some new concepts here
and this idea of cloning.
03:34 - So cloning is the act
of taking a repository
03:38 - that's on a server like
GitHub and cloning it
03:41 - to your computer,
downloading a kind of copy
03:45 - of it to your computer that you can work
03:46 - with and then you could push it back
03:47 - or you could pull from the server again
03:49 - if there are changes
that are on the server
03:51 - that aren't in your computer,
we'll get to that in a moment.
03:53 - Okay so here I am, so
let's go back to GitHub
03:56 - and I'm going to to go over here
03:59 - and I'm going to say,
create a new repository
04:02 - and I'm going to call
this one Rainbow Song.
04:05 - This one will be a song
04:08 - and a song about rainbows, and one thing
04:13 - that I want to do that's
kind of important here
04:14 - is I want to check this box here.
04:18 - Initialize this repository with a read me.
04:20 - The reason why I want to do
this is it's going to make
04:23 - a lot easier to work with
if the repository on GitHub
04:26 - has a file associated with it already.
04:29 - And I'll show you the difference
04:30 - when I show you get
init a little bit later.
04:32 - Okay so I'm going to select that
04:34 - and I'm going to hit create repository
04:37 - and now something really.
04:39 - So this is an empty
repository I did this before,
04:41 - it's my rainbow song
but right here this is
04:44 - what's really really important.
04:46 - There is a special URL
here, this is the URL
04:50 - for the repos file for
its, for its repository.
04:54 - This is the URL you need to
clone it to your computer.
04:57 - Now there are different
options, choose a clone URL.
05:01 - HTTPS recommended so this
is what you want to use
05:04 - if you don't want to get fancy.
05:07 - There is, in other words, when
I'm going to do it this way
05:09 - and it's going to ask me
for passwords every once
05:11 - in a while if I'm trying to save changes
05:13 - and that sort of thing,
there is a way to store
05:15 - your user and password name permanently
05:18 - to be able to, on your laptop
to be able to push and pull
05:20 - and work with GitHub that
requires this other SSH option
05:25 - which I will show you in a separate video
05:27 - because it's kind of like
this convoluted thing.
05:29 - So for now I just want to use this HTTPS
05:31 - and I want to hit copy
and I want to go here,
05:35 - back to terminal and we're going to do
05:37 - our first local terminal Git command.
05:41 - Here it comes everybody.
05:43 - I need my drum roll sound effect.
05:45 - Git clone, by the way
pasting works in terminal
05:51 - so I'm going to hit
command V and you can see
05:54 - there it is and you
can see that's the URL,
05:56 - GitHub.com/RainbowCoder/Rainbow-Song.Git.
06:01 - Incidentally this is
exactly this same exact URL
06:06 - just with .Git at the end
06:08 - because .Git is actually
kind of like this sync,
06:11 - saying I want the URL
of the repository itself
06:13 - not the sort of web
interface to the repository.
06:15 - And so once I'd hit
that and I wish my font,
06:19 - I wish it fit all in one line.
06:20 - Let's see if I, there we
go that's a little nicer.
06:22 - Once I hit enter you can
see it's cloning out.
06:25 - For a large, if this was a
repository with a lot of files
06:28 - this would take quite a while
as it's downloading everything
06:31 - but you can see it counted
objects three, total three.
06:35 - Reuse blah blah blah blah 100% done.
06:37 - Checking connectivity, done.
06:38 - So it's giving you some debug information
06:40 - about what's going on and now I can say
06:43 - open dot and I'm on to the desktop
06:45 - and we can see look, there's a repository
06:47 - called Rainbow Song.
06:49 - Now there's nothing in
it but that read me file
06:52 - because that was the only thing
06:54 - that was in the repository
in the repository on GitHub.
07:00 - So let's say I want to actually
make some changes to it now.
07:03 - So what I'm going to do is I'm
going to drag this down here
07:06 - and I'm going to open it with,
I'm just going to open it
07:08 - with Sublime Text I was using, whoops.
07:12 - So any text editor will do.
07:14 - You can use Atom, actually
there's some nice things
07:16 - about using Atom with Git, I mean I'll use
07:17 - that in a different video and
I can just go to this file.
07:20 - You can see there's the that read me file.
07:22 - Now this read me file is written
in a format called markdown
07:26 - and this markdown is just
a markup language to like,
07:29 - and the pound sign means a
header that sort of thing.
07:31 - So I just do a testing,
a song about rainbows
07:34 - in the key of C major.
07:37 - So I'm going to make
that change I hit save
07:40 - and now I'm going to show you
07:41 - another Git command so we're making a list
07:45 - of them, clone is one, here's another one
07:47 - that's very useful, Git status, okay?
07:51 - So I'm coming back over here
and I'm going to show you
07:53 - Git status, Git status,
ah not a Git repository,
07:58 - why is it not a Git repository?
07:59 - I cloned it, the directory is there
08:01 - but I'm not in that directory
so I need to CD into
08:04 - that directory and I can
make sure I've been there
08:07 - by saying I'm in desktop rainbow song
08:09 - and now I should be able hit Git status.
08:13 - Look at this, it's telling
me lots of information.
08:15 - I'm on the branch
master, remember branches
08:18 - I'm up to date with origin
but I've modified this file
08:21 - so if I've modified this
file now, even though,
08:25 - so this is what's different,
08:26 - when you were on GitHub
and you edited a file
08:29 - and hit save you actually
made, you changed the file
08:35 - and committed it to the
repository at the same time.
08:37 - Right now this file is just
floating there, is it changed?
08:40 - I could get rid of the change,
I could just, I could keep it
08:43 - whatever but what I want
to do is actually say
08:44 - that change I made I
really want to commit it.
08:47 - So what I'm going to do
is say, is Git commit.
08:49 - That's another command in this list.
08:52 - Now, oh commit is already
up here so that's not
08:54 - a new command but we want to issue now
08:56 - this command commit and I want to issue
08:58 - that command locally.
09:00 - Now, commands need arguments.
09:02 - The first way I'm going to
show you how to do this is
09:04 - with the argument dash a.
09:06 - The argument dash a
essentially stands for all.
09:09 - Just like anything that was changed,
09:11 - anywhere, commit all of it.
09:13 - In probably in a separate
video I'm going to show you
09:16 - about how you can only
commit certain changes
09:18 - and not other changes and
there's an add command
09:21 - which is like a step before commit
09:23 - but this is a good way of
getting started Git commit dash a
09:28 - and I'm going to now, oh and
then if I want to add a comment
09:31 - I'm going to dash M for a message, dash M
09:34 - for message I'm going to
say, adding the key of C
09:39 - and in quotes so this is now,
09:41 - Git commish, commit.
09:42 - Git commish?
09:43 - Git commit dash a, commit any
changes I made to any files
09:47 - dash M, with this message,
adding the key of C.
09:51 - So I'm going to hit enter and you can see,
09:54 - ah now here's the thing, oh boy.
09:57 - So this is that it's
going to happen to you
09:59 - once and only once in your life
10:01 - unless you change your name or email
10:03 - that sort of thing so it
might happen to you again.
10:06 - What it's telling me is,
it's saying I don't know
10:08 - who you are (laughs).
10:09 - Like I need an author to be associated
10:12 - with this particular Git change.
10:14 - Now, if I were on GitHub in the browser
10:17 - and I made a change it knows who I am
10:20 - because I'm logged in, right?
10:21 - I'm logged in as the user RainbowCoder
10:25 - so it doesn't have to ask me who I am
10:27 - but on my computer it
doesn't know who I am.
10:30 - So what I need to do is tell my computer
10:33 - who I am who I'm going to be
10:35 - when I make Git changes.
10:36 - Now if you want to have multiple Git users
10:39 - that can get very like
messy and complicated
10:41 - there's probably way of doing that.
10:42 - Maybe I'll make a video about that someday
10:44 - but for now I'm just going to do this,
10:46 - I'm going to actually
just copy this command,
10:48 - Git config dash dat so to
set my username RainbowCoder,
10:55 - that's my username, then
I'm going to copy this one
11:01 - and set my email, now
this is very important.
11:04 - I don't know if it matters
whether your username
11:06 - exactly matches GitHub, you
probably should have it match.
11:09 - Your email needs to
exactly match the email
11:12 - you signed up for GitHub
with and I actually signed up
11:15 - with Daniel.Schiffman+rainbow@gmail.com.
11:20 - So I'm going to enter that in.
11:24 - So that should be done and by the way,
11:26 - I'm going to hit clear
again, if I want to check
11:27 - to make sure that worked, another command
11:30 - is a Git config list I think.
11:36 - Nope, Git config dash
dash list, there we go.
11:39 - So you can see this is listing
all of the configuration
11:43 - settings for Git on this local computer
11:45 - and you can see my username
and user email is now set.
11:49 - So I should and if I
type Git status, whoops
11:54 - I want to go back and hit Git status,
11:57 - so uh, it actually, so we
managed to make that commit.
12:02 - It did actually do that
commit but it just,
12:04 - it's uh, it's it used like
some anonymous username
12:10 - or the username that's on my
laptop so that's not good.
12:16 - So one thing it doesn't really matter.
12:19 - You know I'm going to,
I'm going to let that be.
12:21 - There's a way, there's an amend command
12:24 - which I could amend my previous commands,
12:27 - commits to be now with
my particular username
12:29 - that I am now but what I'm going to do is
12:31 - just make another change
and I'm going to say
12:34 - in the key of C major
the song is a happy song
12:39 - and I'm going to do Git status.
12:41 - I made a change, I'm
going to do Git commit.
12:45 - I want to go back a vine, oops,
12:47 - I want to find that command again
12:49 - Git commit, there it is
and adding a happy song.
12:56 - So now I'm going to show you
12:58 - another command that you can use, log.
13:02 - So the command log
allows you to see locally
13:07 - the history of your Git commits.
13:08 - To be honest it's much
more convenient to look at
13:10 - this stuff on GitHub because you have
13:12 - a nice visual interface for doing that
13:13 - but every once in a while
you might want to see that
13:16 - and what I'm actually going to do is type
13:18 - Git log dash two which should show me
13:20 - only the last two commits.
13:21 - Although there only have been two commits
13:23 - so you can see here it
is and now you can see
13:25 - the difference, you can see this author
13:29 - is Coding Rainbow
Daniel.Schiffman+rainbow@Gmail
13:33 - whereas the author of the
first commit is processing.
13:36 - It made some default user
based on my computer's law.
13:39 - So you want to, what you want
to do is set your username
13:42 - and email before you do that first commit.
13:45 - Okay, oh oh something very
important that I didn't show you.
13:48 - You can get into this place,
this very dangerous place
13:53 - by accident called Vim.
13:57 - Vim, I'm using Sublime as a text editor,
14:00 - Atom is another nice text editor
14:02 - that you can use,
TextEdit is a text editor.
14:05 - Vim is a terminal based
command line based text editor
14:10 - and when you type in things like Git log
14:15 - you're actually in this place
that you can never get out of.
14:20 - I am in Vim because somehow
I'm in this weird text editor
14:24 - thing where it wants me to do
stuff that I don't want to do
14:27 - so I can always type colon, shift colon
14:32 - and then type Q to get out of it.
14:34 - So often when Git, if you
end up in that text editor
14:38 - you could just, you want to type colon
14:39 - and Q and it will get you out of it.
14:41 - Now you may be, you're a kind
of person who wants to use Vim
14:44 - and Vim is I'm sure is a
wonderful place for many people
14:47 - but it is also a place of
heartache and despair and danger.
14:50 - So, colon Q, colon Q that's
the new song for today
14:54 - if you get stuck in Vim land.
14:58 - Now I'm going to type Git
status and here we are.
15:00 - Now I'm reaching the end of
this particular tutorial video
15:03 - because I've been going on and on and on.
15:05 - What is it that I, what
is it that it's missing?
15:07 - Now here, my read me file, here
15:12 - in this particular repository has changes
15:15 - that are not reflected on GitHub itself
15:18 - and you can see that right here,
15:20 - that we're seeing the old
read me file here on GitHub.
15:22 - So now I want to talk to you
15:24 - about the concepts of push and pull.
15:26 - I mentioned these concepts when I talked
15:28 - about pull requests so I'm
adding to here push and pull.
15:33 - So let's review this, this is GitHub,
15:39 - this is you working
locally in your terminal.
15:43 - Pushing is the act of sending to GitHub,
15:47 - pulling is the act of
receiving from GitHub.
15:51 - So what I've done is I've
worked on my repository
15:55 - here locally and the
changes that I've made here
15:57 - no longer exist, are
not reflected on GitHub
16:00 - so I want to push to GitHub.
16:02 - When would you want to pull from GitHub?
16:04 - Well maybe somebody else is also working
16:08 - on your repository and they
push some changes to GitHub
16:11 - and you don't have those
changes on your laptop
16:14 - then you would want to
pull, so GitHub being
16:15 - the sort of central
place for multiple people
16:18 - to contribute to and you could always push
16:20 - your changes there and
pull other people's changes
16:22 - back down to yours, so
let's just look at push.
16:26 - Back over here, now here I
am again I'm going to say,
16:30 - Git push, huh?
16:33 - It doesn't know what to do.
16:35 - Now I've discovered there's
another really key aspect
16:38 - of this, there is another
command to add to our list
16:43 - called remote, this is
me working on my laptop
16:50 - on my Git repository,
GitHub is now an example
16:54 - of a remote, a remote
is a duplicate instance
16:59 - of your repository that
lives somewhere else
17:01 - on a remote server, you
can have multiple remotes
17:04 - for a particular project,
in most of the cases
17:06 - into my tutorial videos I'm
just going to have one remote,
17:09 - GitHub as that particular remote.
17:12 - So what I need to do is say
where, when I say Git push
17:17 - I need to say Git push where?
17:20 - So you might think that
what I would say is
17:23 - Git push GitHub because
what I want to do is
17:26 - Git pushed to my remote GitHub.
17:28 - Now, it doesn't know what that is.
17:31 - So, it doesn't, it gave me
a bunch of error messages.
17:35 - So I'm going to type
something, Git remote.
17:38 - Ah, this lists me all
the remotes associated
17:41 - with my project one of
which is called origin.
17:44 - I can actually also say Git remote dash V
17:47 - the V's meaning verbose and
it's showing me more origin
17:52 - is actually this particular URL.
17:55 - So now, I don't want to, I
want to say Git push origin
18:00 - so origin is the name of the remote,
18:03 - it's just whatever
default name that GitHub
18:06 - and Git used when you
clone your repo originally,
18:10 - it just calls it origin,
it's the where word,
18:12 - where it came from, it's the
origin of this particular repo
18:15 - so Git push origin
should be enough, right?
18:18 - Nope gave me some more
actually, it didn't give me
18:22 - those error, gave me a
lot of a lot of error,
18:25 - a lot of junk, I think it tried to do it
18:27 - with sub default but
I'm missing one piece.
18:31 - I need to say the remote which is origin
18:34 - and then I need one more argument
18:36 - which is the branch.
18:37 - See how much more work
this is to work locally
18:40 - through terminal, it
just, all I did, to do it
18:41 - was commit button on GitHub and I was done
18:44 - but I want to push origin branch master.
18:48 - So I'm just working in the
master branch right now,
18:51 - we're going to do fancier
stuff with branching
18:53 - and all that sort of thing later.
18:54 - Git push origin master.
18:58 - Git push origin master.
19:02 - Denied to Shiffman, oh
you, I'm not Shiffman,
19:07 - I'm RainbowCoder, timeout
pause this video tutorial.
19:16 - I'm back and ready to push to GitHub.
19:18 - The reason why I had a
problem is I've logged
19:20 - into my computer previously
as a different username
19:23 - and it still thought I was that.
19:24 - So I fixed it now and I'm ready to say
19:26 - Git push origin master here we go,
19:30 - Git push origin master,
19:33 - now this is what you should see.
19:36 - Of course it's not going
to just let me do this
19:38 - because it doesn't know who I am,
19:40 - you need to, if whether
I have access rights to
19:43 - that particular repository on GitHub.
19:45 - Now in fact I do and I
should be able to enter
19:48 - in my GitHub username right here
19:50 - and then I should be able to
enter in my GitHub password
19:54 - so hopefully I remember right here
19:56 - and hit enter and it
happened, there we go.
19:59 - Now you can see it gave me information
20:01 - about the stuff being sent to GitHub
20:02 - and I can go here and I can hit refresh
20:06 - and you can now see the new text is here
20:09 - and if I go under
commits you can see here.
20:12 - Now, the good news is remembering
this particular commit
20:15 - has an incorrect user name,
I didn't go back and fix it
20:18 - because I don't really care, big deal
20:21 - but you can see that
this particular commit
20:24 - is assigned to the correct user
20:25 - because my Git settings on my laptop
20:28 - are the same username as
my username on GitHub,
20:32 - username and email, okay.
20:34 - So this video turned out
to be a little bit less
20:37 - than I originally intended but let me
20:38 - just recap for a second and talk about
20:40 - what I'm going to do in the next one.
20:41 - So, all we did in this video was create
20:44 - a totally new repository on
GitHub, cloned it to our laptop
20:49 - made some changes to it and pushed it back
20:52 - and while doing that we
realize we have to install Git
20:55 - on the laptop, we have to
know about Unix commands
20:58 - and I have to also make
sure that my global username
21:01 - and email settings are configured.
21:04 - Once you've done that
you're kind of good to go
21:06 - for a much longer period of time
21:08 - and in, because you don't
have to do all that again.
21:10 - Just say that I always
spent like a half an hour
21:12 - trying to get my username
correct if you're watching
21:14 - this that's why I've gotten lost my train
21:16 - of thought here, in the next
video I'm going to show you
21:19 - how to make a fresh repository
from an existing folder
21:22 - on your computer and send that to GitHub
21:25 - because a lot of cases
you might actually have
21:27 - already made something on your computer
21:29 - that you want suddenly
turn into a repository
21:31 - on GitHub so I'll show you that
21:32 - not using the Git init command
in the next particular video
21:35 - and from there I'm going to keep going
21:36 - with more and more types of things
21:37 - that you might want to do with working
21:39 - with other people's
repositories and branching
21:40 - and merging and all sorts
of other possible things
21:43 - that you might need to do at some point.
21:45 - Okay, see you in the next video maybe,
21:47 - if you choose to continue to watch.

Cleaned transcript:

Hello I am continuing my tutorial series called Git and GitHub for poets and I'm very excited about this particular section because what I'm going to do in this session is crucial to your life as a user of Git and GitHub. What I did before was show you all of these concepts, right? Here's my list of concepts, you have a Git repository you can make commits which are like changes, you can make branches, you can merge branches, you can fork, you can do a pull request all these types of things that you can do with the Git software. You can do all those things just using the GitHub website through its interface however the truth of the matter is if you're going to be working with this for open source projects or even other kind of creative ideas of how you might want to work with Git you're ultimately going to want to work on your own laptop. So in the previous video I talked through the basics of just using this terminal so if you don't know how to use terminal go back and watch the previous video but if you do you're in the right place and you're ready to actually download and install Git onto your local computer. Now I'm not going to do this in the video so if you're watching this in real time pause go to this URL gitscm.com, download, install Git. Once you've done that open up terminal and you'll be ready to continue with me. So to make sure everything's working what you want to do and I'm going to, whoops (laughs) I just want to get into the right place so I'm in the trash? (laughs) Okay I want to be just in, I want to be on my desktop. Okay, so I am now on my desktop that's where I want to be. Be somewhere, your documents folder, your desktop, where you can start adding files. Desktop's going to work for me and the thing that I want to do is just type the words Git. So if you see this you're in good shape. Now my fonts kind of big so this looks kind of like a mess, it'll hopefully look nice and neat on your particular laptop. I'm going to hit clear if you see this, now well I misspelled Git to make sure I got this error. If you see Git colon command not found then your Git is not installed properly try again, ask a question in the comments here. Hopefully I can help you figure out where you missed that or make another video for one of the common problems but hopefully you're actually, Git is working and when you only type Git what you get is a lot of explanation of well, you need to issue also a command, so everything about using Git locally is all about saying Git something like you can imagine what this is, Git commit, make a commit, make a change, make it, save a change. So the first thing though, like if I just type this, the first thing that's going to happen is saying, not a Git repository so this directory is not a Git repository. What is a Git repository? Remember this thing, this rainbow poem? This is a Git repository. So what you need to issue Git commands is a folder on your computer which is a Git repository. This is essentially a folder on the GitHub server, you now want a folder on your computer. So I could just go and grab this exact repository and bring it down to my computer and then work with it there and I'm going to do that in either this video or the next one but I think it would be useful just to show you what happens again when you start fresh. So there are two ways of starting fresh. One way is actually just saying Git init and I'm going to show that to you at the end of this video or in the next one but I think an easier way for you to work when you're getting started is make your repository on GitHub and then download it to your computer and I keep saying the word download but in a moment, soon I got to start saying push and pull because ultimately pull it or clone it is actually a new term so we're going to get some new concepts here and this idea of cloning. So cloning is the act of taking a repository that's on a server like GitHub and cloning it to your computer, downloading a kind of copy of it to your computer that you can work with and then you could push it back or you could pull from the server again if there are changes that are on the server that aren't in your computer, we'll get to that in a moment. Okay so here I am, so let's go back to GitHub and I'm going to to go over here and I'm going to say, create a new repository and I'm going to call this one Rainbow Song. This one will be a song and a song about rainbows, and one thing that I want to do that's kind of important here is I want to check this box here. Initialize this repository with a read me. The reason why I want to do this is it's going to make a lot easier to work with if the repository on GitHub has a file associated with it already. And I'll show you the difference when I show you get init a little bit later. Okay so I'm going to select that and I'm going to hit create repository and now something really. So this is an empty repository I did this before, it's my rainbow song but right here this is what's really really important. There is a special URL here, this is the URL for the repos file for its, for its repository. This is the URL you need to clone it to your computer. Now there are different options, choose a clone URL. HTTPS recommended so this is what you want to use if you don't want to get fancy. There is, in other words, when I'm going to do it this way and it's going to ask me for passwords every once in a while if I'm trying to save changes and that sort of thing, there is a way to store your user and password name permanently to be able to, on your laptop to be able to push and pull and work with GitHub that requires this other SSH option which I will show you in a separate video because it's kind of like this convoluted thing. So for now I just want to use this HTTPS and I want to hit copy and I want to go here, back to terminal and we're going to do our first local terminal Git command. Here it comes everybody. I need my drum roll sound effect. Git clone, by the way pasting works in terminal so I'm going to hit command V and you can see there it is and you can see that's the URL, GitHub.com/RainbowCoder/RainbowSong.Git. Incidentally this is exactly this same exact URL just with .Git at the end because .Git is actually kind of like this sync, saying I want the URL of the repository itself not the sort of web interface to the repository. And so once I'd hit that and I wish my font, I wish it fit all in one line. Let's see if I, there we go that's a little nicer. Once I hit enter you can see it's cloning out. For a large, if this was a repository with a lot of files this would take quite a while as it's downloading everything but you can see it counted objects three, total three. Reuse blah blah blah blah 100% done. Checking connectivity, done. So it's giving you some debug information about what's going on and now I can say open dot and I'm on to the desktop and we can see look, there's a repository called Rainbow Song. Now there's nothing in it but that read me file because that was the only thing that was in the repository in the repository on GitHub. So let's say I want to actually make some changes to it now. So what I'm going to do is I'm going to drag this down here and I'm going to open it with, I'm just going to open it with Sublime Text I was using, whoops. So any text editor will do. You can use Atom, actually there's some nice things about using Atom with Git, I mean I'll use that in a different video and I can just go to this file. You can see there's the that read me file. Now this read me file is written in a format called markdown and this markdown is just a markup language to like, and the pound sign means a header that sort of thing. So I just do a testing, a song about rainbows in the key of C major. So I'm going to make that change I hit save and now I'm going to show you another Git command so we're making a list of them, clone is one, here's another one that's very useful, Git status, okay? So I'm coming back over here and I'm going to show you Git status, Git status, ah not a Git repository, why is it not a Git repository? I cloned it, the directory is there but I'm not in that directory so I need to CD into that directory and I can make sure I've been there by saying I'm in desktop rainbow song and now I should be able hit Git status. Look at this, it's telling me lots of information. I'm on the branch master, remember branches I'm up to date with origin but I've modified this file so if I've modified this file now, even though, so this is what's different, when you were on GitHub and you edited a file and hit save you actually made, you changed the file and committed it to the repository at the same time. Right now this file is just floating there, is it changed? I could get rid of the change, I could just, I could keep it whatever but what I want to do is actually say that change I made I really want to commit it. So what I'm going to do is say, is Git commit. That's another command in this list. Now, oh commit is already up here so that's not a new command but we want to issue now this command commit and I want to issue that command locally. Now, commands need arguments. The first way I'm going to show you how to do this is with the argument dash a. The argument dash a essentially stands for all. Just like anything that was changed, anywhere, commit all of it. In probably in a separate video I'm going to show you about how you can only commit certain changes and not other changes and there's an add command which is like a step before commit but this is a good way of getting started Git commit dash a and I'm going to now, oh and then if I want to add a comment I'm going to dash M for a message, dash M for message I'm going to say, adding the key of C and in quotes so this is now, Git commish, commit. Git commish? Git commit dash a, commit any changes I made to any files dash M, with this message, adding the key of C. So I'm going to hit enter and you can see, ah now here's the thing, oh boy. So this is that it's going to happen to you once and only once in your life unless you change your name or email that sort of thing so it might happen to you again. What it's telling me is, it's saying I don't know who you are (laughs). Like I need an author to be associated with this particular Git change. Now, if I were on GitHub in the browser and I made a change it knows who I am because I'm logged in, right? I'm logged in as the user RainbowCoder so it doesn't have to ask me who I am but on my computer it doesn't know who I am. So what I need to do is tell my computer who I am who I'm going to be when I make Git changes. Now if you want to have multiple Git users that can get very like messy and complicated there's probably way of doing that. Maybe I'll make a video about that someday but for now I'm just going to do this, I'm going to actually just copy this command, Git config dash dat so to set my username RainbowCoder, that's my username, then I'm going to copy this one and set my email, now this is very important. I don't know if it matters whether your username exactly matches GitHub, you probably should have it match. Your email needs to exactly match the email you signed up for GitHub with and I actually signed up with Daniel.Schiffman+rainbow@gmail.com. So I'm going to enter that in. So that should be done and by the way, I'm going to hit clear again, if I want to check to make sure that worked, another command is a Git config list I think. Nope, Git config dash dash list, there we go. So you can see this is listing all of the configuration settings for Git on this local computer and you can see my username and user email is now set. So I should and if I type Git status, whoops I want to go back and hit Git status, so uh, it actually, so we managed to make that commit. It did actually do that commit but it just, it's uh, it's it used like some anonymous username or the username that's on my laptop so that's not good. So one thing it doesn't really matter. You know I'm going to, I'm going to let that be. There's a way, there's an amend command which I could amend my previous commands, commits to be now with my particular username that I am now but what I'm going to do is just make another change and I'm going to say in the key of C major the song is a happy song and I'm going to do Git status. I made a change, I'm going to do Git commit. I want to go back a vine, oops, I want to find that command again Git commit, there it is and adding a happy song. So now I'm going to show you another command that you can use, log. So the command log allows you to see locally the history of your Git commits. To be honest it's much more convenient to look at this stuff on GitHub because you have a nice visual interface for doing that but every once in a while you might want to see that and what I'm actually going to do is type Git log dash two which should show me only the last two commits. Although there only have been two commits so you can see here it is and now you can see the difference, you can see this author is Coding Rainbow Daniel.Schiffman+rainbow@Gmail whereas the author of the first commit is processing. It made some default user based on my computer's law. So you want to, what you want to do is set your username and email before you do that first commit. Okay, oh oh something very important that I didn't show you. You can get into this place, this very dangerous place by accident called Vim. Vim, I'm using Sublime as a text editor, Atom is another nice text editor that you can use, TextEdit is a text editor. Vim is a terminal based command line based text editor and when you type in things like Git log you're actually in this place that you can never get out of. I am in Vim because somehow I'm in this weird text editor thing where it wants me to do stuff that I don't want to do so I can always type colon, shift colon and then type Q to get out of it. So often when Git, if you end up in that text editor you could just, you want to type colon and Q and it will get you out of it. Now you may be, you're a kind of person who wants to use Vim and Vim is I'm sure is a wonderful place for many people but it is also a place of heartache and despair and danger. So, colon Q, colon Q that's the new song for today if you get stuck in Vim land. Now I'm going to type Git status and here we are. Now I'm reaching the end of this particular tutorial video because I've been going on and on and on. What is it that I, what is it that it's missing? Now here, my read me file, here in this particular repository has changes that are not reflected on GitHub itself and you can see that right here, that we're seeing the old read me file here on GitHub. So now I want to talk to you about the concepts of push and pull. I mentioned these concepts when I talked about pull requests so I'm adding to here push and pull. So let's review this, this is GitHub, this is you working locally in your terminal. Pushing is the act of sending to GitHub, pulling is the act of receiving from GitHub. So what I've done is I've worked on my repository here locally and the changes that I've made here no longer exist, are not reflected on GitHub so I want to push to GitHub. When would you want to pull from GitHub? Well maybe somebody else is also working on your repository and they push some changes to GitHub and you don't have those changes on your laptop then you would want to pull, so GitHub being the sort of central place for multiple people to contribute to and you could always push your changes there and pull other people's changes back down to yours, so let's just look at push. Back over here, now here I am again I'm going to say, Git push, huh? It doesn't know what to do. Now I've discovered there's another really key aspect of this, there is another command to add to our list called remote, this is me working on my laptop on my Git repository, GitHub is now an example of a remote, a remote is a duplicate instance of your repository that lives somewhere else on a remote server, you can have multiple remotes for a particular project, in most of the cases into my tutorial videos I'm just going to have one remote, GitHub as that particular remote. So what I need to do is say where, when I say Git push I need to say Git push where? So you might think that what I would say is Git push GitHub because what I want to do is Git pushed to my remote GitHub. Now, it doesn't know what that is. So, it doesn't, it gave me a bunch of error messages. So I'm going to type something, Git remote. Ah, this lists me all the remotes associated with my project one of which is called origin. I can actually also say Git remote dash V the V's meaning verbose and it's showing me more origin is actually this particular URL. So now, I don't want to, I want to say Git push origin so origin is the name of the remote, it's just whatever default name that GitHub and Git used when you clone your repo originally, it just calls it origin, it's the where word, where it came from, it's the origin of this particular repo so Git push origin should be enough, right? Nope gave me some more actually, it didn't give me those error, gave me a lot of a lot of error, a lot of junk, I think it tried to do it with sub default but I'm missing one piece. I need to say the remote which is origin and then I need one more argument which is the branch. See how much more work this is to work locally through terminal, it just, all I did, to do it was commit button on GitHub and I was done but I want to push origin branch master. So I'm just working in the master branch right now, we're going to do fancier stuff with branching and all that sort of thing later. Git push origin master. Git push origin master. Denied to Shiffman, oh you, I'm not Shiffman, I'm RainbowCoder, timeout pause this video tutorial. I'm back and ready to push to GitHub. The reason why I had a problem is I've logged into my computer previously as a different username and it still thought I was that. So I fixed it now and I'm ready to say Git push origin master here we go, Git push origin master, now this is what you should see. Of course it's not going to just let me do this because it doesn't know who I am, you need to, if whether I have access rights to that particular repository on GitHub. Now in fact I do and I should be able to enter in my GitHub username right here and then I should be able to enter in my GitHub password so hopefully I remember right here and hit enter and it happened, there we go. Now you can see it gave me information about the stuff being sent to GitHub and I can go here and I can hit refresh and you can now see the new text is here and if I go under commits you can see here. Now, the good news is remembering this particular commit has an incorrect user name, I didn't go back and fix it because I don't really care, big deal but you can see that this particular commit is assigned to the correct user because my Git settings on my laptop are the same username as my username on GitHub, username and email, okay. So this video turned out to be a little bit less than I originally intended but let me just recap for a second and talk about what I'm going to do in the next one. So, all we did in this video was create a totally new repository on GitHub, cloned it to our laptop made some changes to it and pushed it back and while doing that we realize we have to install Git on the laptop, we have to know about Unix commands and I have to also make sure that my global username and email settings are configured. Once you've done that you're kind of good to go for a much longer period of time and in, because you don't have to do all that again. Just say that I always spent like a half an hour trying to get my username correct if you're watching this that's why I've gotten lost my train of thought here, in the next video I'm going to show you how to make a fresh repository from an existing folder on your computer and send that to GitHub because a lot of cases you might actually have already made something on your computer that you want suddenly turn into a repository on GitHub so I'll show you that not using the Git init command in the next particular video and from there I'm going to keep going with more and more types of things that you might want to do with working with other people's repositories and branching and merging and all sorts of other possible things that you might need to do at some point. Okay, see you in the next video maybe, if you choose to continue to watch.
