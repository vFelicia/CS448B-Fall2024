With timestamps:

00:00 - Welcome to the last video for
the Data Selfie App project.
00:02 - There are so many things that
I haven't covered or talked
00:05 - about.
00:06 - And to some extent, the next
module with another project
00:09 - will address some of these.
00:10 - Namely, what if you want to
load data from another API,
00:12 - like get the
weather information?
00:14 - What if you want to do that
from Node, itself, rather
00:15 - than the client.
00:16 - Why would you want to do that?
00:17 - And what kind of possibilities
emerge from doing that?
00:19 - So that I'm really going to
address in the next project.
00:22 - The other thing that I
really need to address
00:23 - is, OK, well what if you want
to take the thing that you made
00:25 - and put it on the web
somewhere so that people
00:27 - could see it and use it?
00:28 - How do you deploy?
00:30 - How do you deploy a
project that involves
00:32 - node server and client code?
00:34 - So, there's so
many different ways
00:35 - that you could do this and
different services, that cost
00:38 - money, that are free.
00:39 - I'm going to look at a couple
different basic options
00:41 - for doing that in
the next project.
00:43 - The next project, by the way,
is called The Weather Here.
00:45 - And it's also a project by
Joey Lee for a course at ITP
00:50 - that I'm basing my
examples off of.
00:52 - So, thank you again,
Joey Lee, for all
00:53 - of your help in
preparing material
00:55 - for me to use in this series.
00:57 - But before I do any of that,
I want to just, in this video,
00:59 - do a little cleanup,
reorganize the code a tiny bit,
01:02 - and suggest a bunch of
technical exercises,
01:04 - or creative exercises,
even, that you
01:06 - might try to tackle
yourself before you
01:08 - move on to the next project.
01:09 - The first thing that I want
to do as a simple cleanup step
01:12 - is to give myself
a bit more to work
01:13 - with in this public folder.
01:14 - Right now everything
is in two HTML files.
01:18 - So one thing that I think
would make sense to do
01:20 - is to make, maybe, a
directory called logs.
01:23 - And then have this
all.html live in there.
01:26 - And then, maybe,
call that index.html.
01:28 - So, in other words, right now
I'm changing it so that you can
01:31 - just go to the Home page,
index.html or /logs to see
01:34 - maybe the logs
from the database.
01:36 - So that's a little
bit nicer to put
01:38 - that in a separate
folder, which becomes
01:39 - like a path on
the server itself.
01:42 - Navigating over to
Visual Studio Code,
01:44 - I can see that I have
my Public directory.
01:47 - Now, I now, have the Logs
directory with index.html.
01:49 - And then I have just,
in the Root directory,
01:51 - another index.html file.
01:54 - What I want to do is add--
and I'm going to do this
01:56 - in public--
01:58 - I'm going to add a file called--
02:00 - I don't know--
script.js, main.js.
02:03 - Let's call it sketch.js.
02:05 - So I like to use
sketch.js because it's
02:07 - a sort of naming convention
for the p5 library.
02:10 - Maybe atypical for JavaScript.
02:12 - But ultimately, the goal here
is to put my JavaScript code
02:15 - in a separate file.
02:16 - So I'll call that sketch.js.
02:18 - And then I also want to put
in the Logs directory a file.
02:22 - And I'll just call that
a logs.js just to give it
02:25 - a different file name.
02:26 - I now have separate
JavaScript files
02:28 - for each one of these pages.
02:29 - I'm also going to create,
just in the Root directory,
02:32 - another file called style.css.
02:35 - CSS, which stands for
Cascading Style Sheets
02:37 - and is where you can define a
lot of information about color
02:41 - and layout and fonts
for your project,
02:44 - is well beyond the scope of
what I'm doing in this series.
02:47 - But I'll show you how to put
a little boilerplate in there
02:49 - to get you started with
redesigning the page,
02:52 - if that's something
that interests you.
02:53 - So step one, let's
go to index.html.
02:56 - And let's find all of this code
that was in the script tag.
03:00 - And let's remove it.
03:02 - So I'm going to
save all that code.
03:04 - I'm going to remove it.
03:07 - And I'm now going to
put it into sketch.js.
03:10 - So I just copy/pasted
all of the code that
03:13 - was right there in the
script tag in index.html
03:15 - and put it in a separate
JavaScript file.
03:17 - Then in index.html, where
I have that script tag,
03:20 - I can actually just
say src="sketch.js".
03:23 - So, really, this is identical
to what I had before.
03:26 - It's just that instead of
having all of it in there,
03:28 - I'm now referencing a
separate file, which
03:30 - is going to make things a lot
easier to maintain and develop.
03:32 - And I'll do exactly the same
thing here with the Logs file.
03:35 - So let me grab all of this.
03:37 - Let me put this in logs.js.
03:40 - Let me go back to
index.html and save.
03:43 - And say src="logs.js", great.
03:46 - So, hopefully, the
project is just
03:48 - going to work as it did before.
03:50 - I'm going to test in a second.
03:51 - Before I do that, let me
also reference style.css.
03:55 - To add an external style
sheet to a web page,
03:58 - I can use the Link element
with two attributes.
04:00 - Well, more than two, but the key
ones that I want to point out
04:03 - are the rel, or
relationship attribute,
04:05 - that says, oh, this is
going to be a style sheet.
04:08 - And then the href
attribute, which is
04:10 - short for hypertext reference.
04:11 - That's just the file--
04:13 - the text that I'm
referencing, itself.
04:15 - And I can insert that right
in the header tag of the HTML
04:18 - page, right where I'm
referencing the p5 js
04:20 - libraries.
04:21 - I'll put that right here.
04:22 - I'm just going to paste
this line of text in here.
04:25 - You can see it's a link.
04:26 - It's a style sheet.
04:27 - Its type is CSS.
04:29 - And the href is
the file style.css.
04:32 - So if I put that here,
and then I also--
04:35 - if I go to index.html
in the logs directory,
04:38 - I can put that here.
04:40 - But if I want to reference
the same style sheet,
04:43 - it's up one directory
from the Logs directory.
04:47 - So I need to say ../ which
will say look for style.css one
04:52 - directory behind this one.
04:54 - The real question, now, is
is anything going to break?
04:57 - All I've done is move
the JavaScript code
04:59 - into a separate file and added
a blank style.css style sheet.
05:04 - So hopefully nothing will break.
05:05 - It will work as is.
05:07 - I'm going to go over
to the web page.
05:08 - And I'm going to refresh it.
05:10 - You know, one thing that I
want to do, just I think,
05:12 - is make this image a
little bit smaller.
05:14 - It's a little bit silly
that I'm doing this now.
05:16 - But just to see that we can
continue to edit the code,
05:19 - I'm going to go here and
change this to 160 by 120.
05:23 - And refresh the page.
05:25 - OK, there's the image.
05:26 - Let me add a few
things to the database.
05:28 - They're all going to be rainbow.
05:33 - And now, if I go to list--
05:35 - Ah, OK, so one
thing broke, right.
05:38 - I have, in the Nav bar, going
to something called /all.html.
05:43 - And now, what I want
to do is go to /logs.
05:46 - So, that's important
for me to fix.
05:48 - So, let me go back to index.html
and change this to logs.
05:52 - Also, it's worth
noting that here,
05:54 - while I'm entering in
the path to the logs,
05:56 - I should use something called an
absolute path, which would have
05:58 - the slash at the beginning.
06:00 - So this means it's always
going to go to /logs.
06:02 - A relative path wouldn't have
that slash and would be going
06:05 - to wherever you are /logs.
06:08 - In this tiny little
example doesn't make that
06:10 - much of a difference.
06:11 - But that's an important
thing to mention.
06:13 - And I'll also go and
add that into logs--
06:16 - the logs file, here, as well.
06:19 - Let me go back and hit Refresh.
06:22 - And I should now
be able go to List.
06:24 - It takes me to Logs.
06:25 - And there we go.
06:26 - There's all the logs
from the database.
06:28 - And I can go back to Enter.
06:29 - Just to make sure
this is still working,
06:31 - I'm going to hit mango.
06:33 - And then I'm going
to go back to List.
06:35 - And I should see
there's mango, there.
06:37 - So let's do one more thing.
06:38 - Let's add a little
bit of CSS, just
06:40 - to see how that
affects the layout.
06:43 - Well I'm going to
go to style.css,
06:45 - which is completely empty.
06:47 - And let me add something
for paragraph elements.
06:50 - So I'm going to say p and
then put curly brackets in.
06:54 - I'm going to say padding.
06:56 - And I'm going to give it
a padding of 10 pixels.
06:58 - I'm going to say
background-color.
07:01 - And I'll give it a nice
background color of #FFAAFF.
07:05 - I'm just making
this up on the spot.
07:06 - I think these are
semicolons, not commas.
07:09 - Oh, we can see, actually,
Visual Studio Code is telling me
07:12 - what what color it is.
07:13 - Perfect.
07:13 - And so, now, if I save that,
and I go back to that Logs page,
07:18 - we can see-- there we go.
07:19 - I've now added a little CSS
for a little bit of layout.
07:23 - So, this is now my
exercise to you.
07:26 - Think more carefully about the
design and view of these pages.
07:32 - Manipulating the CSS
is a good segue, also,
07:34 - into thinking about
accessibility.
07:36 - In order for a website
to be accessible,
07:39 - it should meet the Web Content
Accessibility Guidelines
07:42 - requirements.
07:43 - One of the things that I use
for this is a Chrome extension
07:45 - called WAVE, which
is from WebAIM,
07:47 - or web accessibility in mind.
07:49 - I'll include a link to
the WAVE evaluation tool
07:51 - in this video's description.
07:53 - And I have it already
installed here in my browser.
07:55 - Once you have the Chrome
extension installed,
07:57 - I can see up here
in the top right,
07:59 - I have a little
button with a W. I'm
08:01 - going to remove the JavaScript
console and click this button.
08:04 - And we can see, here,
ah, I have five errors.
08:07 - Five things about
this page don't meet
08:09 - the accessibility guidelines.
08:10 - So I can hover
over here and see,
08:12 - Image alternative
text is not present.
08:14 - So anytime you have an
image on a web page,
08:17 - it should have
Alt text, which is
08:18 - a alternative text, a
text description of what's
08:21 - in that image.
08:22 - That's so a screen reader--
08:24 - somebody who uses
a screen reader
08:25 - can hear that read out loud--
the contents of that image.
08:29 - I'm going to add
that into my code.
08:30 - It's as easy as
saying image.alt.
08:33 - And I'm going to say "Dan
Schiffman making silly faces."
08:39 - And once I do that,
I can go back here
08:41 - and refresh this page.
08:43 - I should build it hit
the Checker again.
08:45 - And we can see, I
have no more errors.
08:47 - So that's great.
08:47 - And you can see that the alt
text is being shown here.
08:50 - Let's also go to
the Data entry page
08:54 - and check for
accessibility there.
08:56 - And we have one error,
which is right here.
08:59 - My form doesn't have a label.
09:00 - So it's important for--
again, for a screen reader
09:03 - for this form to have a label
to say what should go in there.
09:05 - So that's an easy
thing for me to fix.
09:07 - I can go to index.html and
find where I have that input.
09:12 - I can go here and I can
add a label element.
09:15 - So I can just say label.
09:16 - Then I can say for=.
09:18 - And I want this label to
be for this input element,
09:20 - so I put "mood" in here.
09:23 - And then, I'll just say what
the label is, enter your mood.
09:27 - And if I go back to the
page and hit Refresh,
09:31 - hit the WAVE checker again.
09:33 - Now I have no more errors.
09:34 - Now, of course, there's
a lot more to web design
09:37 - and accessibility.
09:38 - But I just want to
emphasize this as something
09:39 - that you should consider and
think about with every web
09:42 - application you make.
09:43 - And I will include
some links to resources
09:45 - for more about web accessibility
in this video's description.
09:48 - So what's next for you?
09:49 - You can move on to
the next project.
09:51 - One of the focuses there
will be accessing data
09:53 - from external APIs
from Node, itself
09:55 - and sending that
information to the client.
09:57 - And that opens up a
lot of possibilities.
09:59 - But there are some
exercises you could
10:00 - try to expand what I
built in this project.
10:02 - So one simple thing
is the data logs,
10:05 - they just kind of are
shown on that page
10:08 - in arbitrary order, whatever
order they come back
10:10 - from the database.
10:10 - So, how might you sort them?
10:11 - Could you even create buttons
to sort them in different ways,
10:14 - sort them
alphabetically by mood,
10:16 - sort of descending
by time stamp?
10:19 - That's something
that you could try.
10:20 - You also might want
to consider what
10:22 - happens when there's hundreds
or thousands or, potentially,
10:25 - millions of entries
in the database?
10:27 - Of course, our simple
database system,
10:29 - with saving the base64 encoded
image into the database,
10:32 - might break down at such scale.
10:34 - But even thinking
about how you might
10:35 - have to page through
all of that data,
10:38 - or just show the first
10 entries on one page,
10:40 - is something you could
think about doing.
10:42 - In terms of thinking about how
you're working with the image
10:44 - data, the looking at how you
would save the image as a file,
10:48 - and save the path to that
file in the database,
10:50 - would also be a nice
exercise to try.
10:52 - Finally, you might think
about doing something
10:54 - more creative with the image.
10:56 - After all, p5 has
the full capabilities
10:58 - of HTML Canvas built
in that library.
11:00 - So you could have the
user draw on the image,
11:02 - save it to the database.
11:03 - Maybe you could incorporate
another type of computer vision
11:06 - JavaScript library.
11:07 - There's one called face-api.js,
that can analyze the expression
11:11 - that the person is
making in the image.
11:13 - So there's a lot
of possibilities
11:14 - of sort of creative
twists you could
11:16 - explore on just having the
image from the webcam, itself.
11:18 - I hope you enjoyed watching
me build this project.
11:21 - Thanks, again, so much to
Joey Lee for the original Data
11:23 - Selfie App.
11:24 - Which I used to base
all of this material on.
11:26 - And, if you're interested,
I've got one more project
11:29 - to build as part of this series.
11:30 - Also, based on
material from Joey Lee.
11:32 - And it's called
The Weather Here.
11:34 - So stick around
in the next video.
11:35 - I'm going to start making it.
11:36 - [MUSIC PLAYING]

Cleaned transcript:

Welcome to the last video for the Data Selfie App project. There are so many things that I haven't covered or talked about. And to some extent, the next module with another project will address some of these. Namely, what if you want to load data from another API, like get the weather information? What if you want to do that from Node, itself, rather than the client. Why would you want to do that? And what kind of possibilities emerge from doing that? So that I'm really going to address in the next project. The other thing that I really need to address is, OK, well what if you want to take the thing that you made and put it on the web somewhere so that people could see it and use it? How do you deploy? How do you deploy a project that involves node server and client code? So, there's so many different ways that you could do this and different services, that cost money, that are free. I'm going to look at a couple different basic options for doing that in the next project. The next project, by the way, is called The Weather Here. And it's also a project by Joey Lee for a course at ITP that I'm basing my examples off of. So, thank you again, Joey Lee, for all of your help in preparing material for me to use in this series. But before I do any of that, I want to just, in this video, do a little cleanup, reorganize the code a tiny bit, and suggest a bunch of technical exercises, or creative exercises, even, that you might try to tackle yourself before you move on to the next project. The first thing that I want to do as a simple cleanup step is to give myself a bit more to work with in this public folder. Right now everything is in two HTML files. So one thing that I think would make sense to do is to make, maybe, a directory called logs. And then have this all.html live in there. And then, maybe, call that index.html. So, in other words, right now I'm changing it so that you can just go to the Home page, index.html or /logs to see maybe the logs from the database. So that's a little bit nicer to put that in a separate folder, which becomes like a path on the server itself. Navigating over to Visual Studio Code, I can see that I have my Public directory. Now, I now, have the Logs directory with index.html. And then I have just, in the Root directory, another index.html file. What I want to do is add and I'm going to do this in public I'm going to add a file called I don't know script.js, main.js. Let's call it sketch.js. So I like to use sketch.js because it's a sort of naming convention for the p5 library. Maybe atypical for JavaScript. But ultimately, the goal here is to put my JavaScript code in a separate file. So I'll call that sketch.js. And then I also want to put in the Logs directory a file. And I'll just call that a logs.js just to give it a different file name. I now have separate JavaScript files for each one of these pages. I'm also going to create, just in the Root directory, another file called style.css. CSS, which stands for Cascading Style Sheets and is where you can define a lot of information about color and layout and fonts for your project, is well beyond the scope of what I'm doing in this series. But I'll show you how to put a little boilerplate in there to get you started with redesigning the page, if that's something that interests you. So step one, let's go to index.html. And let's find all of this code that was in the script tag. And let's remove it. So I'm going to save all that code. I'm going to remove it. And I'm now going to put it into sketch.js. So I just copy/pasted all of the code that was right there in the script tag in index.html and put it in a separate JavaScript file. Then in index.html, where I have that script tag, I can actually just say src="sketch.js". So, really, this is identical to what I had before. It's just that instead of having all of it in there, I'm now referencing a separate file, which is going to make things a lot easier to maintain and develop. And I'll do exactly the same thing here with the Logs file. So let me grab all of this. Let me put this in logs.js. Let me go back to index.html and save. And say src="logs.js", great. So, hopefully, the project is just going to work as it did before. I'm going to test in a second. Before I do that, let me also reference style.css. To add an external style sheet to a web page, I can use the Link element with two attributes. Well, more than two, but the key ones that I want to point out are the rel, or relationship attribute, that says, oh, this is going to be a style sheet. And then the href attribute, which is short for hypertext reference. That's just the file the text that I'm referencing, itself. And I can insert that right in the header tag of the HTML page, right where I'm referencing the p5 js libraries. I'll put that right here. I'm just going to paste this line of text in here. You can see it's a link. It's a style sheet. Its type is CSS. And the href is the file style.css. So if I put that here, and then I also if I go to index.html in the logs directory, I can put that here. But if I want to reference the same style sheet, it's up one directory from the Logs directory. So I need to say ../ which will say look for style.css one directory behind this one. The real question, now, is is anything going to break? All I've done is move the JavaScript code into a separate file and added a blank style.css style sheet. So hopefully nothing will break. It will work as is. I'm going to go over to the web page. And I'm going to refresh it. You know, one thing that I want to do, just I think, is make this image a little bit smaller. It's a little bit silly that I'm doing this now. But just to see that we can continue to edit the code, I'm going to go here and change this to 160 by 120. And refresh the page. OK, there's the image. Let me add a few things to the database. They're all going to be rainbow. And now, if I go to list Ah, OK, so one thing broke, right. I have, in the Nav bar, going to something called /all.html. And now, what I want to do is go to /logs. So, that's important for me to fix. So, let me go back to index.html and change this to logs. Also, it's worth noting that here, while I'm entering in the path to the logs, I should use something called an absolute path, which would have the slash at the beginning. So this means it's always going to go to /logs. A relative path wouldn't have that slash and would be going to wherever you are /logs. In this tiny little example doesn't make that much of a difference. But that's an important thing to mention. And I'll also go and add that into logs the logs file, here, as well. Let me go back and hit Refresh. And I should now be able go to List. It takes me to Logs. And there we go. There's all the logs from the database. And I can go back to Enter. Just to make sure this is still working, I'm going to hit mango. And then I'm going to go back to List. And I should see there's mango, there. So let's do one more thing. Let's add a little bit of CSS, just to see how that affects the layout. Well I'm going to go to style.css, which is completely empty. And let me add something for paragraph elements. So I'm going to say p and then put curly brackets in. I'm going to say padding. And I'm going to give it a padding of 10 pixels. I'm going to say backgroundcolor. And I'll give it a nice background color of #FFAAFF. I'm just making this up on the spot. I think these are semicolons, not commas. Oh, we can see, actually, Visual Studio Code is telling me what what color it is. Perfect. And so, now, if I save that, and I go back to that Logs page, we can see there we go. I've now added a little CSS for a little bit of layout. So, this is now my exercise to you. Think more carefully about the design and view of these pages. Manipulating the CSS is a good segue, also, into thinking about accessibility. In order for a website to be accessible, it should meet the Web Content Accessibility Guidelines requirements. One of the things that I use for this is a Chrome extension called WAVE, which is from WebAIM, or web accessibility in mind. I'll include a link to the WAVE evaluation tool in this video's description. And I have it already installed here in my browser. Once you have the Chrome extension installed, I can see up here in the top right, I have a little button with a W. I'm going to remove the JavaScript console and click this button. And we can see, here, ah, I have five errors. Five things about this page don't meet the accessibility guidelines. So I can hover over here and see, Image alternative text is not present. So anytime you have an image on a web page, it should have Alt text, which is a alternative text, a text description of what's in that image. That's so a screen reader somebody who uses a screen reader can hear that read out loud the contents of that image. I'm going to add that into my code. It's as easy as saying image.alt. And I'm going to say "Dan Schiffman making silly faces." And once I do that, I can go back here and refresh this page. I should build it hit the Checker again. And we can see, I have no more errors. So that's great. And you can see that the alt text is being shown here. Let's also go to the Data entry page and check for accessibility there. And we have one error, which is right here. My form doesn't have a label. So it's important for again, for a screen reader for this form to have a label to say what should go in there. So that's an easy thing for me to fix. I can go to index.html and find where I have that input. I can go here and I can add a label element. So I can just say label. Then I can say for=. And I want this label to be for this input element, so I put "mood" in here. And then, I'll just say what the label is, enter your mood. And if I go back to the page and hit Refresh, hit the WAVE checker again. Now I have no more errors. Now, of course, there's a lot more to web design and accessibility. But I just want to emphasize this as something that you should consider and think about with every web application you make. And I will include some links to resources for more about web accessibility in this video's description. So what's next for you? You can move on to the next project. One of the focuses there will be accessing data from external APIs from Node, itself and sending that information to the client. And that opens up a lot of possibilities. But there are some exercises you could try to expand what I built in this project. So one simple thing is the data logs, they just kind of are shown on that page in arbitrary order, whatever order they come back from the database. So, how might you sort them? Could you even create buttons to sort them in different ways, sort them alphabetically by mood, sort of descending by time stamp? That's something that you could try. You also might want to consider what happens when there's hundreds or thousands or, potentially, millions of entries in the database? Of course, our simple database system, with saving the base64 encoded image into the database, might break down at such scale. But even thinking about how you might have to page through all of that data, or just show the first 10 entries on one page, is something you could think about doing. In terms of thinking about how you're working with the image data, the looking at how you would save the image as a file, and save the path to that file in the database, would also be a nice exercise to try. Finally, you might think about doing something more creative with the image. After all, p5 has the full capabilities of HTML Canvas built in that library. So you could have the user draw on the image, save it to the database. Maybe you could incorporate another type of computer vision JavaScript library. There's one called faceapi.js, that can analyze the expression that the person is making in the image. So there's a lot of possibilities of sort of creative twists you could explore on just having the image from the webcam, itself. I hope you enjoyed watching me build this project. Thanks, again, so much to Joey Lee for the original Data Selfie App. Which I used to base all of this material on. And, if you're interested, I've got one more project to build as part of this series. Also, based on material from Joey Lee. And it's called The Weather Here. So stick around in the next video. I'm going to start making it. [MUSIC PLAYING]
