With timestamps:

00:00 - Welcome back to another
Discord BOT tutorial.
00:02 - Yeah!
00:03 - I was so excited about this one.
00:04 - So where I last left off--
00:06 - I mean, I couldn't
possibly have left off
00:08 - at a better place, where
I have a kitten riding
00:10 - a unicorn with a rainbow
in the background.
00:12 - [KISSES] But I have a bot
that does only two things.
00:15 - I say "!choochoo" to it, and it
replies with a random message,
00:19 - "Choo choo!" back.
00:20 - I say "!gif," and maybe I feel
like looking at a kitten today.
00:23 - And I get a nice--
00:25 - [INAUDIBLE]
00:28 - So how is this
working in the code?
00:30 - Well, if I look at the code, I
have this lovely if statement--
00:33 - if tokens equals "!choochoo",
else if tokens index[0] equals
00:37 - "!gif".
00:37 - So this is not a super
sustainable method.
00:40 - I mean, if I'm being
honest, this is kind of--
00:42 - I would be happy to just stay
with this method, add a few
00:44 - more commands, a
few more else/ifs.
00:46 - But a much more sort
of conventional way
00:48 - of building a scalable Discord
bot with many-- handling
00:52 - many, many commands is to use
some kind of command handler
00:56 - framework.
00:57 - And in fact, if you go
to the Discord.js guide,
01:00 - you'll see an entire page
here on command handling.
01:03 - I'm going to use a
slightly different method
01:06 - than the one described
here, although you certainly
01:08 - could use this one as well.
01:09 - I'm going to follow
the methodology
01:11 - that I learned when I was
a guest on Coding Garden
01:13 - that CJ showed me.
01:14 - I think it works well, and it's
a nice way to handle commands.
01:18 - So you could check
out this GitHub repo
01:20 - for another version
of the example
01:21 - that I'm going to
build right now.
01:23 - And the core idea, if I--
01:25 - looking at the code here
that I'm about to write,
01:27 - is that there's
almost nothing here.
01:29 - There's just, like,
creating the Discord client.
01:31 - It's ready.
01:32 - And when there's a message,
ah, send the message
01:35 - to this thing called
the commandHandler.
01:37 - And that commandHandler is
required from ./commands.
01:42 - What does that even mean?
01:44 - So this is where
I want to start.
01:46 - What does it mean to,
in your Node program,
01:51 - in your JavaScript file that
you've been writing a node,
01:53 - that I've been
writing a node, that's
01:55 - only ever been in my entire
life until now basically
01:57 - one JavaScript file--
01:59 - how can I pull code that I save
and manage in multiple files?
02:03 - This is not unlike what I
do very commonly with p5.js.
02:07 - So here's a p5.js sketch
of a particle system.
02:10 - And the way that I manage
that in client-side JavaScript
02:13 - is have index.html where I
reference multiple JavaScript
02:17 - files-- sketch.js for
the sketch, main sketch,
02:19 - particle.js for the
particles, system.js
02:21 - for the particle system code.
02:23 - So I want to figure out
what is the equivalent
02:26 - of multiple JavaScript
files for a Node project.
02:30 - And the secret to that is right
there in this require function.
02:37 - Now, in truth,
require is perhaps
02:39 - going to become
outdated as time passes.
02:44 - There's now something
called an import module
02:46 - that's part of JavaScript.
02:47 - From what I understand,
it's an experimental feature
02:50 - in Node.js, using imports
instead of require.
02:54 - So I'm going to
stick with require.
02:56 - And then someday in the future,
I look forward to your comments
02:59 - that all say about how
I should be using import
03:01 - instead of require.
03:02 - Oh, it's going to be great.
03:03 - Pressing forward,
step number 1, I
03:05 - want to take this entire
gotMessage function
03:07 - and just put it in
another JavaScript file
03:09 - because I want to be able
to work with it separately
03:12 - from this main index.js file.
03:15 - Or it's called bot.js.
03:16 - I called it bot.js.
03:18 - Creating a new file,
I'll call it commands.js.
03:22 - And I've pasted it in.
03:24 - And back in bot.js, you can see
there's almost nothing left.
03:27 - Ah, this replies really
goes with those commands.
03:31 - So I should also move this over.
03:32 - I mean, ultimately, this might
have to go in a different place
03:34 - entirely.
03:35 - But let's take it out
of here right now.
03:38 - Then the idea is, could I
get this gotMessage function
03:44 - from the other file?
03:45 - And let's call this
commandHandler, right?
03:50 - I want that to be
commandHandler.
03:51 - And I want to say, const
commandHandler equals require.
03:57 - What do I put here?
03:59 - So I'm pretty sure the way that
it works is for me to reference
04:03 - the name of the other
JavaScript file without .js.
04:08 - However, if I do
this, it's actually
04:11 - going to look for a
proper Node module that's
04:15 - been installed as part
of my Node modules,
04:18 - like Discord.js or node.fetch.
04:20 - So I need to tell
it, no, no, no, no.
04:22 - Don't go look in the
Node modules folder.
04:24 - Look locally.
04:25 - And the way that that is
done is with dot slash.
04:29 - So I'm done, right?
04:30 - commandHandler equals
require ./commands.
04:33 - I get everything
in that other file.
04:34 - And now I can just say, client
dot on message commandHandler.
04:37 - No!
04:38 - No, no, no, no, no, no, no, no!
04:39 - Stop!
04:40 - I have to add something else.
04:42 - I have to explicitly
state inside
04:45 - of this file what I want to make
available when it is required.
04:50 - And the way that I do that
is saying, module.exports.
04:55 - So anything that I put
inside of module.exports
04:58 - will be available.
04:59 - So what do I want
to make available?
05:01 - This gotMessage function.
05:05 - And there we go--
05:06 - module.exports equals
the function, gotMessage.
05:09 - Now, ultimately, I don't need
that name of the function
05:12 - anymore.
05:13 - It's irrelevant.
05:14 - Basically, when I say,
require ./commands,
05:18 - whatever is in module.exports
will now be saved
05:21 - in commandHandler.
05:22 - So the name of the
variable that's
05:24 - holding that function
here is commandHandler.
05:26 - So going back to commands,
I can get rid of this.
05:30 - And I think this is
all I need to do.
05:33 - Let's hope that my
bot still works.
05:36 - Let's try running it again.
05:39 - Appears to be working--
05:41 - go back to Discord.
05:44 - And voila, let's check
the GIFs because we
05:48 - can't have enough rainbow GIFs.
05:51 - Oh, ah, oh, it's not working!
05:54 - The GIFs aren't working!
05:55 - What happened?
05:58 - The fetch is not defined.
05:59 - So guess what?
06:01 - The fetch function is being
used here in commands.js.
06:05 - It is not being
used here in bot.js.
06:08 - So I will want to
bring over this require
06:12 - of the Node module, node-fetch.
06:20 - And there we go.
06:21 - Oh, we have this beautiful cat
riding a unicorn with a rainbow
06:25 - GIF again.
06:26 - Now, there's a lot more to
say about module.exports.
06:28 - I'm just scratching
the surface here.
06:30 - You know, I could set it
equal to an object that
06:32 - has multiple properties and
multiple functions or use
06:35 - classes and all sorts of other
kinds of JavaScript things
06:39 - that I export from a
particular JavaScript file.
06:42 - But I'm going to stick with
just this basic idea right now
06:44 - and, in fact, take it the one
step further because still,
06:48 - look, I have this
long if statement.
06:51 - Yes, I get to put this if
statement in a separate file.
06:53 - But how could I maybe handle
these commands more elegantly?
06:56 - And my goal here is to
have a separate JavaScript
07:00 - file for every single command.
07:02 - So let's think about--
let's maybe add a folder.
07:06 - I'll create a folder
called "commands."
07:08 - In that folder, let's add a file
called choochoo.js and a file
07:15 - called gif.js.
07:17 - Now I can require both of those.
07:25 - So what goes in those
JavaScript files?
07:27 - (LAUGHING) I want to think
about this I'm going.
07:30 - So in choochoo.js,
that's the command
07:33 - that returns a random reply.
07:35 - So let's take these
two lines of code
07:37 - and just kind of put them in
here for safekeeping right now.
07:40 - And then also go
back to commands.js
07:43 - and take this whole bit of code
and put that into a gif.js.
07:51 - All right, so I've got the
code for sending a GIF.
07:55 - And I've got the code for
sending a random reply
07:57 - in my separate files.
07:58 - The other thing that I
think would be quite helpful
08:01 - here is for me to think
more clearly about what's
08:03 - in this variable called tokens.
08:06 - There's really two things.
08:08 - There's the command,
that !choochoo, !gif,
08:13 - and then there's the arguments.
08:14 - What comes after that command?
08:19 - So the command is
the first token.
08:21 - And it's only a valid command
if the first character of it
08:25 - is an exclamation point.
08:32 - And actually, a better
way for me to do this
08:34 - would be to actually remove
that first token from the array
08:37 - because I don't want
it anymore because I
08:39 - want that array to the
left to be the arguments.
08:41 - So let's say tokens.shift.
08:45 - Tokens.shift shifts everything
in the array over one spot
08:50 - and removes the first element.
08:51 - So that command is there.
08:52 - If the first character
is exclamation point,
08:55 - then also take out
that first character,
08:58 - which I can do by using the
substring function to go
09:01 - from 1 to the end of the
string, but if I leave out
09:04 - the second argument by default.
09:06 - So this now-- I mean, it's
a little bit convoluted.
09:08 - I'm sure this
could be condensed.
09:10 - But take out the
first token, check
09:12 - to see if its first character
is an exclamation point,
09:14 - and then remove that
exclamation point.
09:16 - And I've got the valid command.
09:18 - I can get rid of this
stuff now at the bottom.
09:20 - The only thing-- the
things that might
09:22 - be in the command variable
now are choochoo or gif.
09:26 - OK, what do I do?
09:28 - What if I have an object--
09:29 - think about this--
called commands?
09:33 - And in that object,
I have something
09:35 - called choochoo, which is a
function that does something.
09:39 - And I have something
called gif, which is
09:42 - a function that does something.
09:44 - And maybe that function
takes arguments.
09:49 - So this object acts as
something like a lookup table.
09:52 - Let me look up the function
associated with choochoo.
09:55 - Let me look up the function
associated with gif.
09:58 - So whatever the
command is, I can
10:00 - look up the function associated
with it in that object
10:05 - and call that function
with the tokens, which
10:09 - are the arguments.
10:09 - Oh boy, doesn't this
look terrifying?
10:12 - Let's think about it this way.
10:13 - If I had just said
choochoo(tokens) and written
10:18 - some function like this,
this would probably
10:23 - make sense to you.
10:23 - I'm calling the
function, choochoo,
10:25 - and passing it the tokens.
10:27 - What am I doing here?
10:29 - I am doing exactly
the same thing,
10:31 - only the function isn't
just called choochoo.
10:33 - It's called choochoo inside
of an object called commands.
10:36 - And the term, the lookup term,
choochoo, that property name,
10:39 - is inside of the
variable called commands.
10:42 - So this is the
equivalent of saying,
10:44 - commands.choochoo(tokens).
10:48 - However, I can't do that
because command is a variable.
10:52 - I've got to pass it in
with the square brackets.
10:54 - So you might have
to pause the video
10:56 - and think about this for a bit.
10:57 - But hopefully, you're
following along with me.
10:59 - And please ask your
questions in the comments
11:01 - if this is confusing.
11:02 - So let's build these
out a little bit more.
11:08 - And let's just test to
see if this system works.
11:11 - Whatever the command
that comes in is,
11:13 - I should see a console
log in the server.
11:15 - Remember, ultimately,
where I'm going
11:17 - is I've got to execute the code
that's in another JavaScript
11:19 - file, but I'm not there yet.
11:21 - I just want to have
the command come in,
11:23 - look up the function associated
with it, and run that function.
11:26 - And this was extra
extraneous code
11:28 - that I need to
make sure I remove.
11:31 - Back to Discord, I shouldn't
see anything here now.
11:33 - But I should see a
!gif and !choochoo.
11:37 - And then if I go
back to the server,
11:38 - we see "gif" and "choochoo."
11:39 - So those functions are
being called correctly.
11:42 - All right.
11:43 - And just as a reminder,
this extra if statement
11:45 - up here is just
because I want this--
11:48 - I'm testing this bot only
in one particular channel.
11:51 - So this might not at all
be necessary for what
11:53 - you're doing.
11:54 - If I wanted my
bot to participate
11:56 - in all the channels of
a particular server,
11:57 - I certainly wouldn't
have this here.
11:59 - OK, we are getting close now to
the end of this demonstration.
12:04 - The big next step
it's very exciting.
12:07 - Instead of defining the
function right here,
12:10 - I want to pull it from that
other choochoo.js file.
12:15 - So first, I need to add
module.exports to choochoo.js.
12:23 - And it's as easy as this.
12:24 - Now, I'm not using
the arguments in this.
12:27 - It's just a random reply.
12:28 - And of course, I need to get--
12:30 - I keep moving this around.
12:31 - But I need to get these replies.
12:35 - These are part of this
particular command.
12:37 - I'm noticing another major
issue that I forgot about.
12:41 - The reply is being sent
to the channel associated
12:45 - with the original message.
12:47 - And I don't have access to that
message variable here anymore.
12:51 - So I think it would be
important for the commandHandler
12:54 - to also pass that in.
12:57 - So not only send the tokens,
the actual tokens which
13:01 - are the arguments, but send--
13:03 - also pass along that
additional message
13:05 - object which has all of
the metadata associated
13:07 - with the message, so adding
that as another property here.
13:12 - Let's see.
13:12 - Let's just, before
I go on to the GIF,
13:15 - let's just see if
this works now.
13:17 - Oh no, it doesn't.
13:18 - It won't.
13:18 - It won't.
13:19 - Why not?
13:19 - I need to replace this
function here with the function
13:25 - that I'm getting
from choochoo itself.
13:32 - Now, this is kind of
silly, ultimately.
13:34 - When I have a
JavaScript object where
13:37 - the property and the value
have the same name, I can use--
13:41 - what is that called again,
enhanced object literals?
13:45 - I'm going to leave
the gif out right now.
13:48 - So essentially, this
is my list of commands.
13:50 - The function, choochoo,
is right in there.
13:54 - Let's see if this works
14:00 - Beautiful.
14:01 - Who should have my bell?
14:02 - Ding!
14:02 - [DING]
14:03 - Next step, let's
add the gif command.
14:08 - So now the commands
object has two properties,
14:11 - choochoo and gif both coming
from two separate JavaScript
14:14 - files.
14:14 - I need to add the
module.exports stuff
14:17 - to gif.js and the arguments.
14:23 - Also, once again, this
particular command
14:26 - is using node-fetch, so that
should no longer be here.
14:31 - Instead, it goes here.
14:33 - And, ah, OK, so the
key words are no longer
14:37 - coming from the tokens.
14:39 - They're coming
from the arguments.
14:40 - And I don't need to
slice out the first one
14:43 - because that's already been
done by the original commands
14:46 - function.
14:47 - So this is much simpler now.
14:48 - I can just say,
args.join with a space.
14:52 - And then I think
we're good here.
14:56 - Let's try running it.
14:59 - "Await is only valid
in an async function."
15:02 - Ah, of course.
15:04 - So I need to make sure that
this function is modified
15:07 - with the async keyword.
15:10 - Back to Discord, and
I hope this works.
15:14 - We already know !choochoo works.
15:17 - Let's try !gif, and let's take
a look at some puppies today.
15:23 - Ooh, it's not coming.
15:24 - There's an error.
15:26 - "Tokens is not defined," gif.js.
15:29 - What did I miss?
15:30 - Aha, I joined the
args, but I still
15:32 - check the length of tokens.
15:34 - So now I just need to check
if there are actual arguments
15:37 - and if the length
is greater than 0
15:39 - because, again, the command
is not part of it anymore.
15:41 - So that should fix it.
15:43 - Back to Discord.
15:44 - Let's see those puppies.
15:48 - Aw.
15:50 - [KISSES] There we go.
15:51 - It couldn't be a more fitting
end to this particular video.
15:55 - So hopefully now, just
to recap for a moment,
15:58 - starting back from bot.js,
the only thing bot.js does
16:03 - is connect Discord and then
import a commandHandler
16:07 - function from another
JavaScript file.
16:10 - In that commandHandler
JavaScript file,
16:14 - that file imports
other JavaScript files,
16:17 - one for each command,
stores them in an object,
16:20 - checks to make sure
it's a valid message,
16:22 - and then executes
the proper function
16:24 - associated with that command.
16:26 - So now if I wanted to
add another command,
16:28 - let's say we're going to look up
some information about a word.
16:30 - Maybe I'll use the Wordnik API.
16:32 - I definitely want to do an
example of a Discord bot
16:34 - that connects to an API.
16:35 - I mean, I am doing that
with [INAUDIBLE] API,
16:37 - but some other API.
16:39 - So if I were to
say, like, define--
16:42 - there's a define command--
16:43 - all I would need to do is
add that particular define
16:49 - JavaScript file.
16:50 - That would have to have
exactly the same format
16:52 - of a single function
that handles the command,
16:54 - does everything it needs.
16:55 - And I would be done.
16:57 - And then I could keep
adding more commands.
17:00 - So hopefully, if you watch
this particular video,
17:04 - and you're making
your own bot, try this
17:06 - and try adding
some more commands.
17:08 - I should say, however, there
is one small potential issue.
17:12 - You might be making a bot
where you imagine having
17:14 - a hundred-plus commands in it.
17:16 - If that's the case, having
a hundred require statements
17:19 - is maybe not so great.
17:21 - So one of the
things you could do
17:22 - is actually read
the file system.
17:24 - So if you have this particular
commands folder with a hundred
17:28 - JavaScript files in it,
you can automatically,
17:30 - with the Node file
system package,
17:32 - just read what all
those files are,
17:34 - and then you have all of
your commands that way.
17:35 - So actually, the
only thing you would
17:37 - need to do to add a
new command is just add
17:39 - another JavaScript
file that's formatted
17:41 - in the same exact way.
17:42 - Whoo, oh, this is great.
17:43 - This is going to make bot-making
so much more organized
17:46 - and neat and tidy and all of the
wonderful things that I love.
17:48 - So this is a little challenging
to make this video for you
17:51 - to watch it, perhaps.
17:52 - I hope this makes sense.
17:53 - Ask your questions
in the comments.
17:55 - There are more to come.
17:56 - So what have I said
so far I want to do?
17:58 - I want to make a--
connect to an API just
18:01 - to show another command.
18:02 - I think there were some other
things I was thinking of.
18:04 - I'll think of those again.
18:05 - But I do want to show
how to work with embeds.
18:09 - Embeds, embeds, embeds.
18:11 - I will figure out
how to say that word.
18:13 - You've probably
seen a Discord bot
18:14 - that shows this kind of replies
with this message that's nicely
18:18 - formatted.
18:19 - Here's an example
one, the Train bot,
18:21 - if you issued the
command !userinfo,
18:23 - it gives you this nice, sort of
organized table, if you will,
18:26 - box of information.
18:28 - Another example of this is,
if I issue the command, !help,
18:33 - I'll get a nice explanation of
all the kinds of things this
18:36 - bot can do and what the commands
are and tips for using it.
18:39 - Oh, that's what I should do!
18:40 - I'll definitely
make-- maybe I should
18:42 - make a video on how to create
an embed with a help command.
18:45 - So that'll be perfect.
18:46 - So that'll come maybe
in the next video.
18:49 - Yeah, the next video, maybe
the Wordnik API thing.
18:51 - Leave your suggestions
in the comments
18:53 - if the next video
doesn't exist yet
18:54 - because that'll help
me figure out where
18:56 - this journey is taking me.
18:57 - At some point, I've
got to stop and just,
18:58 - like, leave the Discord
bots alone and see
19:01 - what the universe brings
me as little Discord bot
19:04 - presents the people are making.
19:05 - But there are a few more
things I'd like to show you.
19:07 - So stay tuned.
19:08 - And thanks again for watching.
19:09 - [KISSES] Goodbye, and see you
in a future Coding Train video.
19:13 - [TOOT TOOT]
19:14 - Ugh.
19:15 - [MUSIC PLAYING]

Cleaned transcript:

Welcome back to another Discord BOT tutorial. Yeah! I was so excited about this one. So where I last left off I mean, I couldn't possibly have left off at a better place, where I have a kitten riding a unicorn with a rainbow in the background. [KISSES] But I have a bot that does only two things. I say "!choochoo" to it, and it replies with a random message, "Choo choo!" back. I say "!gif," and maybe I feel like looking at a kitten today. And I get a nice [INAUDIBLE] So how is this working in the code? Well, if I look at the code, I have this lovely if statement if tokens equals "!choochoo", else if tokens index[0] equals "!gif". So this is not a super sustainable method. I mean, if I'm being honest, this is kind of I would be happy to just stay with this method, add a few more commands, a few more else/ifs. But a much more sort of conventional way of building a scalable Discord bot with many handling many, many commands is to use some kind of command handler framework. And in fact, if you go to the Discord.js guide, you'll see an entire page here on command handling. I'm going to use a slightly different method than the one described here, although you certainly could use this one as well. I'm going to follow the methodology that I learned when I was a guest on Coding Garden that CJ showed me. I think it works well, and it's a nice way to handle commands. So you could check out this GitHub repo for another version of the example that I'm going to build right now. And the core idea, if I looking at the code here that I'm about to write, is that there's almost nothing here. There's just, like, creating the Discord client. It's ready. And when there's a message, ah, send the message to this thing called the commandHandler. And that commandHandler is required from ./commands. What does that even mean? So this is where I want to start. What does it mean to, in your Node program, in your JavaScript file that you've been writing a node, that I've been writing a node, that's only ever been in my entire life until now basically one JavaScript file how can I pull code that I save and manage in multiple files? This is not unlike what I do very commonly with p5.js. So here's a p5.js sketch of a particle system. And the way that I manage that in clientside JavaScript is have index.html where I reference multiple JavaScript files sketch.js for the sketch, main sketch, particle.js for the particles, system.js for the particle system code. So I want to figure out what is the equivalent of multiple JavaScript files for a Node project. And the secret to that is right there in this require function. Now, in truth, require is perhaps going to become outdated as time passes. There's now something called an import module that's part of JavaScript. From what I understand, it's an experimental feature in Node.js, using imports instead of require. So I'm going to stick with require. And then someday in the future, I look forward to your comments that all say about how I should be using import instead of require. Oh, it's going to be great. Pressing forward, step number 1, I want to take this entire gotMessage function and just put it in another JavaScript file because I want to be able to work with it separately from this main index.js file. Or it's called bot.js. I called it bot.js. Creating a new file, I'll call it commands.js. And I've pasted it in. And back in bot.js, you can see there's almost nothing left. Ah, this replies really goes with those commands. So I should also move this over. I mean, ultimately, this might have to go in a different place entirely. But let's take it out of here right now. Then the idea is, could I get this gotMessage function from the other file? And let's call this commandHandler, right? I want that to be commandHandler. And I want to say, const commandHandler equals require. What do I put here? So I'm pretty sure the way that it works is for me to reference the name of the other JavaScript file without .js. However, if I do this, it's actually going to look for a proper Node module that's been installed as part of my Node modules, like Discord.js or node.fetch. So I need to tell it, no, no, no, no. Don't go look in the Node modules folder. Look locally. And the way that that is done is with dot slash. So I'm done, right? commandHandler equals require ./commands. I get everything in that other file. And now I can just say, client dot on message commandHandler. No! No, no, no, no, no, no, no, no! Stop! I have to add something else. I have to explicitly state inside of this file what I want to make available when it is required. And the way that I do that is saying, module.exports. So anything that I put inside of module.exports will be available. So what do I want to make available? This gotMessage function. And there we go module.exports equals the function, gotMessage. Now, ultimately, I don't need that name of the function anymore. It's irrelevant. Basically, when I say, require ./commands, whatever is in module.exports will now be saved in commandHandler. So the name of the variable that's holding that function here is commandHandler. So going back to commands, I can get rid of this. And I think this is all I need to do. Let's hope that my bot still works. Let's try running it again. Appears to be working go back to Discord. And voila, let's check the GIFs because we can't have enough rainbow GIFs. Oh, ah, oh, it's not working! The GIFs aren't working! What happened? The fetch is not defined. So guess what? The fetch function is being used here in commands.js. It is not being used here in bot.js. So I will want to bring over this require of the Node module, nodefetch. And there we go. Oh, we have this beautiful cat riding a unicorn with a rainbow GIF again. Now, there's a lot more to say about module.exports. I'm just scratching the surface here. You know, I could set it equal to an object that has multiple properties and multiple functions or use classes and all sorts of other kinds of JavaScript things that I export from a particular JavaScript file. But I'm going to stick with just this basic idea right now and, in fact, take it the one step further because still, look, I have this long if statement. Yes, I get to put this if statement in a separate file. But how could I maybe handle these commands more elegantly? And my goal here is to have a separate JavaScript file for every single command. So let's think about let's maybe add a folder. I'll create a folder called "commands." In that folder, let's add a file called choochoo.js and a file called gif.js. Now I can require both of those. So what goes in those JavaScript files? (LAUGHING) I want to think about this I'm going. So in choochoo.js, that's the command that returns a random reply. So let's take these two lines of code and just kind of put them in here for safekeeping right now. And then also go back to commands.js and take this whole bit of code and put that into a gif.js. All right, so I've got the code for sending a GIF. And I've got the code for sending a random reply in my separate files. The other thing that I think would be quite helpful here is for me to think more clearly about what's in this variable called tokens. There's really two things. There's the command, that !choochoo, !gif, and then there's the arguments. What comes after that command? So the command is the first token. And it's only a valid command if the first character of it is an exclamation point. And actually, a better way for me to do this would be to actually remove that first token from the array because I don't want it anymore because I want that array to the left to be the arguments. So let's say tokens.shift. Tokens.shift shifts everything in the array over one spot and removes the first element. So that command is there. If the first character is exclamation point, then also take out that first character, which I can do by using the substring function to go from 1 to the end of the string, but if I leave out the second argument by default. So this now I mean, it's a little bit convoluted. I'm sure this could be condensed. But take out the first token, check to see if its first character is an exclamation point, and then remove that exclamation point. And I've got the valid command. I can get rid of this stuff now at the bottom. The only thing the things that might be in the command variable now are choochoo or gif. OK, what do I do? What if I have an object think about this called commands? And in that object, I have something called choochoo, which is a function that does something. And I have something called gif, which is a function that does something. And maybe that function takes arguments. So this object acts as something like a lookup table. Let me look up the function associated with choochoo. Let me look up the function associated with gif. So whatever the command is, I can look up the function associated with it in that object and call that function with the tokens, which are the arguments. Oh boy, doesn't this look terrifying? Let's think about it this way. If I had just said choochoo(tokens) and written some function like this, this would probably make sense to you. I'm calling the function, choochoo, and passing it the tokens. What am I doing here? I am doing exactly the same thing, only the function isn't just called choochoo. It's called choochoo inside of an object called commands. And the term, the lookup term, choochoo, that property name, is inside of the variable called commands. So this is the equivalent of saying, commands.choochoo(tokens). However, I can't do that because command is a variable. I've got to pass it in with the square brackets. So you might have to pause the video and think about this for a bit. But hopefully, you're following along with me. And please ask your questions in the comments if this is confusing. So let's build these out a little bit more. And let's just test to see if this system works. Whatever the command that comes in is, I should see a console log in the server. Remember, ultimately, where I'm going is I've got to execute the code that's in another JavaScript file, but I'm not there yet. I just want to have the command come in, look up the function associated with it, and run that function. And this was extra extraneous code that I need to make sure I remove. Back to Discord, I shouldn't see anything here now. But I should see a !gif and !choochoo. And then if I go back to the server, we see "gif" and "choochoo." So those functions are being called correctly. All right. And just as a reminder, this extra if statement up here is just because I want this I'm testing this bot only in one particular channel. So this might not at all be necessary for what you're doing. If I wanted my bot to participate in all the channels of a particular server, I certainly wouldn't have this here. OK, we are getting close now to the end of this demonstration. The big next step it's very exciting. Instead of defining the function right here, I want to pull it from that other choochoo.js file. So first, I need to add module.exports to choochoo.js. And it's as easy as this. Now, I'm not using the arguments in this. It's just a random reply. And of course, I need to get I keep moving this around. But I need to get these replies. These are part of this particular command. I'm noticing another major issue that I forgot about. The reply is being sent to the channel associated with the original message. And I don't have access to that message variable here anymore. So I think it would be important for the commandHandler to also pass that in. So not only send the tokens, the actual tokens which are the arguments, but send also pass along that additional message object which has all of the metadata associated with the message, so adding that as another property here. Let's see. Let's just, before I go on to the GIF, let's just see if this works now. Oh no, it doesn't. It won't. It won't. Why not? I need to replace this function here with the function that I'm getting from choochoo itself. Now, this is kind of silly, ultimately. When I have a JavaScript object where the property and the value have the same name, I can use what is that called again, enhanced object literals? I'm going to leave the gif out right now. So essentially, this is my list of commands. The function, choochoo, is right in there. Let's see if this works Beautiful. Who should have my bell? Ding! [DING] Next step, let's add the gif command. So now the commands object has two properties, choochoo and gif both coming from two separate JavaScript files. I need to add the module.exports stuff to gif.js and the arguments. Also, once again, this particular command is using nodefetch, so that should no longer be here. Instead, it goes here. And, ah, OK, so the key words are no longer coming from the tokens. They're coming from the arguments. And I don't need to slice out the first one because that's already been done by the original commands function. So this is much simpler now. I can just say, args.join with a space. And then I think we're good here. Let's try running it. "Await is only valid in an async function." Ah, of course. So I need to make sure that this function is modified with the async keyword. Back to Discord, and I hope this works. We already know !choochoo works. Let's try !gif, and let's take a look at some puppies today. Ooh, it's not coming. There's an error. "Tokens is not defined," gif.js. What did I miss? Aha, I joined the args, but I still check the length of tokens. So now I just need to check if there are actual arguments and if the length is greater than 0 because, again, the command is not part of it anymore. So that should fix it. Back to Discord. Let's see those puppies. Aw. [KISSES] There we go. It couldn't be a more fitting end to this particular video. So hopefully now, just to recap for a moment, starting back from bot.js, the only thing bot.js does is connect Discord and then import a commandHandler function from another JavaScript file. In that commandHandler JavaScript file, that file imports other JavaScript files, one for each command, stores them in an object, checks to make sure it's a valid message, and then executes the proper function associated with that command. So now if I wanted to add another command, let's say we're going to look up some information about a word. Maybe I'll use the Wordnik API. I definitely want to do an example of a Discord bot that connects to an API. I mean, I am doing that with [INAUDIBLE] API, but some other API. So if I were to say, like, define there's a define command all I would need to do is add that particular define JavaScript file. That would have to have exactly the same format of a single function that handles the command, does everything it needs. And I would be done. And then I could keep adding more commands. So hopefully, if you watch this particular video, and you're making your own bot, try this and try adding some more commands. I should say, however, there is one small potential issue. You might be making a bot where you imagine having a hundredplus commands in it. If that's the case, having a hundred require statements is maybe not so great. So one of the things you could do is actually read the file system. So if you have this particular commands folder with a hundred JavaScript files in it, you can automatically, with the Node file system package, just read what all those files are, and then you have all of your commands that way. So actually, the only thing you would need to do to add a new command is just add another JavaScript file that's formatted in the same exact way. Whoo, oh, this is great. This is going to make botmaking so much more organized and neat and tidy and all of the wonderful things that I love. So this is a little challenging to make this video for you to watch it, perhaps. I hope this makes sense. Ask your questions in the comments. There are more to come. So what have I said so far I want to do? I want to make a connect to an API just to show another command. I think there were some other things I was thinking of. I'll think of those again. But I do want to show how to work with embeds. Embeds, embeds, embeds. I will figure out how to say that word. You've probably seen a Discord bot that shows this kind of replies with this message that's nicely formatted. Here's an example one, the Train bot, if you issued the command !userinfo, it gives you this nice, sort of organized table, if you will, box of information. Another example of this is, if I issue the command, !help, I'll get a nice explanation of all the kinds of things this bot can do and what the commands are and tips for using it. Oh, that's what I should do! I'll definitely make maybe I should make a video on how to create an embed with a help command. So that'll be perfect. So that'll come maybe in the next video. Yeah, the next video, maybe the Wordnik API thing. Leave your suggestions in the comments if the next video doesn't exist yet because that'll help me figure out where this journey is taking me. At some point, I've got to stop and just, like, leave the Discord bots alone and see what the universe brings me as little Discord bot presents the people are making. But there are a few more things I'd like to show you. So stay tuned. And thanks again for watching. [KISSES] Goodbye, and see you in a future Coding Train video. [TOOT TOOT] Ugh. [MUSIC PLAYING]
