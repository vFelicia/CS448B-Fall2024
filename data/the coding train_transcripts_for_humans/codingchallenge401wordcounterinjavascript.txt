With timestamps:

00:00 - hello and welcome to another coding
00:02 - challenge in this coding challenge I am
00:04 - going to build a word counting
00:06 - application so what can you do with a
00:08 - word counting application a lot of
00:10 - things its forms the basis of text
00:12 - analysis operations you can make all
00:14 - sorts of visualizations you know word
00:17 - cloud being this or classic perhaps
00:19 - cliched example but I'm sure a lot of
00:21 - you will come up hopefully with creative
00:23 - outputs from this I'm just going to do
00:25 - the core word counting application two
00:27 - things I'll mention I'm gonna use
00:29 - something called an associative array if
00:31 - you don't know what that is I just made
00:32 - a video all about an associate of a rice
00:34 - you can go back and watch that and I'm
00:35 - also going to do another follow up I'm
00:37 - doing this one in JavaScript using p5.js
00:39 - I'm going to do this exact same thing in
00:42 - processing on the java programming
00:43 - language right after it so you could if
00:45 - you're more interesting that good go and
00:46 - skip and watch that video
00:47 - okay so let's just get started so I need
00:50 - a text I'm going to load text from a
00:53 - text file I just copy pasted the
00:55 - description of Rainbows from Wikipedia
00:58 - so I'm going to load this particular
01:00 - text and count all the word occurrence
01:02 - count all the word frequencies in this
01:04 - text but you could you know pull text
01:07 - from an API project gutenberg is a great
01:09 - place to find a lot of public domain
01:11 - text that you can work with or you could
01:13 - even have you know users upload files as
01:16 - you've seen in previous examples so you
01:17 - might take your own spin on where are
01:19 - you getting your data from but I want to
01:20 - focus on the core algorithm of counting
01:23 - words so before I can actually count the
01:25 - words though I need to write the code to
01:27 - load the text file I'm going to do this
01:28 - in the simplest way by adding a preload
01:32 - function to my p5 code I don't need the
01:35 - draw function there's not going to be
01:36 - any animation in this so there certainly
01:38 - could be one I'm going to create a
01:40 - variable called txt for the raw text I'm
01:44 - going to say T XT equals load strings
01:48 - rainbow dot txt so this is me loading
01:51 - that file in and if I now go to my page
01:55 - and I type txt here we can see what did
01:57 - it load and it actually loads everything
01:59 - in it as an array with each line each
02:02 - element of that array being one line
02:04 - from that text file that's how the load
02:06 - strings function works in p5 so one of
02:08 - the first things I want to do is just
02:11 - create a
02:13 - variable where I join all of that
02:15 - together so I can join it all I just
02:18 - want to have one long string because
02:20 - ultimately I'm going to chop up that
02:21 - long string into word tokens so I get I
02:24 - get a text file I have it an array of
02:26 - lines I want to join all those lines
02:28 - together so that I can split up the
02:30 - whole thing by word tokens so then after
02:33 - I have all words I can save our tokens
02:35 - equals all words dot split now if you
02:38 - recall split is a JavaScript function
02:41 - you can call on a string that says
02:43 - here's a delimiter this is the space in
02:45 - between words and I want you to separate
02:48 - this text into an array where each token
02:50 - each word in this case word is a
02:53 - separate element of that array so and I
02:55 - can use a regular expression C my videos
02:57 - and regular expressions to define the
02:59 - delimiter so the simplest thing I could
03:01 - do would just be split by space but I'm
03:03 - going to and this isn't going to be so
03:05 - great but I'm actually going to split by
03:06 - this regular expression what this
03:09 - regular expression means is slash is a
03:12 - slash W back slash W is a medic act
03:15 - character for any alphanumeric character
03:18 - abc123
03:20 - but that's lowercase W capital W means
03:23 - anything that's not a through Z or 0
03:25 - through 9 so essentially I want to split
03:27 - by all spaces all punctuation that sort
03:29 - of thing could be some problems with
03:30 - this can't will split into Ken and T but
03:33 - you know we could refine this later and
03:36 - get a better better egg expression in
03:37 - there mostly I just want to work on the
03:39 - word counting part so that's all set now
03:41 - let's just make sure this aspect of it
03:43 - is working and let's just look at that
03:45 - array in the console so we can see it is
03:48 - working you can now see that I have an
03:49 - array where each word is a separate
03:52 - element of that array okay what's next
03:56 - what I wanted what I need to do now is
03:58 - look at every word one at time so first
04:00 - of all how would I do this if I didn't
04:03 - have a computer you know people used to
04:05 - do these text-based concordance --is all
04:07 - the time if I had a book like how
04:11 - computers work I could just start
04:12 - reading this book the oh okay
04:20 - the one changes change one in one okay
04:33 - etc etc Cedric Cedric Cedric says ah ah
04:35 - oh I already found that uh okay - so you
04:41 - can see this is the algorithm right and
04:43 - I encourage you to always do your
04:44 - algorithms not always but when you when
04:46 - you can when you feel like it do your
04:48 - algebra algorithms manually by hand to
04:50 - understand how they work I need this pen
04:52 - so what is the algorithm it is look at
04:55 - each word is it a new word is it a new
05:04 - word yes
05:07 - add it and set count to 1 right if it's
05:14 - not a new word increase its existing
05:20 - count so this is the algorithm we now
05:22 - need to implement in our code I'm sorry
05:25 - for the chicken scratch and the focus
05:27 - box focus box focus box but this is the
05:31 - algorithm that we want to implement look
05:33 - at each word is it a new word yes
05:35 - add it to the dictionary the associative
05:37 - array thingy the JavaScript object no
05:40 - increase its existing count okay come
05:42 - back over here let's start doing that so
05:45 - how do i iterate through all the words
05:46 - for VAR i equals 0 i is less than tokens
05:52 - dot length i plus plus and now i'd say
05:57 - ok let's look at the let's look at each
05:59 - word tokens index i now I need to have
06:04 - this dictionary that I'm talking about
06:05 - the dictionary of counts so I'm going to
06:07 - create a global variable doesn't need to
06:09 - be global necessarily but I'm going to
06:11 - do that just so I can kind of play with
06:12 - it in the console if I need to counts
06:14 - and what should counts be counts should
06:17 - be an empty object because what I'm
06:20 - going to do is put the words as the keys
06:23 - the properties of the object and the
06:25 - counts as the values in the object so
06:27 - how do I determine if this word right
06:30 - the first thing I need to do is
06:32 - determine is
06:33 - is it a new word so the way that I can
06:35 - check if it's a new word is to look at
06:38 - if it's a property of counts now there
06:41 - are some things I can do I think I
06:42 - JavaScript and say like if counts has
06:44 - own property or something like that but
06:47 - I an easier way for me to do this is
06:49 - just reference reference the property
06:53 - right if that property doesn't exist it
06:56 - will be undefined right so in other
06:58 - words let me come over here and look at
07:03 - this count object right if I try to say
07:05 - counts the it's going to I'm going to
07:10 - get back undefined so I can actually
07:12 - undefined evaluates in JavaScript to
07:15 - false or I can actually be really
07:16 - explicit about it in tests if it equals
07:18 - undefined let's do that so if counts
07:22 - word equals undefined right if it's
07:25 - undefined again that's a little bit of
07:26 - overkill there but if it's undefined
07:28 - what do I do
07:30 - set its count to 1 right set its count
07:34 - to 1 if it's not undefined what do I do
07:39 - and that should be word not words
07:43 - increase its count by 1 of course I
07:47 - could say counts word plus plus but I'm
07:49 - being very long-winded here if it's
07:51 - undefined
07:52 - we found it it's a new word if not
07:54 - increase its count by one so now let's
07:57 - take a look at what we got
07:59 - ooh boy what did I do wrong I definitely
08:05 - got a mistake because the keys are all
08:07 - numbers let's see what's going on here
08:10 - word equals tokens index I what did I do
08:18 - wrong here a console dot log word that's
08:26 - right
08:31 - counts it's called counts right it's an
08:34 - object if it's undefined it equals one
08:38 - otherwise it equals plus one what's
08:41 - going on here what did I do
08:46 - oh no no I didn't do anything there's
08:49 - just a ton of numbers in the text so by
08:51 - the way this is easy to forget and it's
08:53 - by the way
08:54 - it's actually sorted in alphabetical
08:56 - order which was like oh why are all
08:57 - these numbers this something must be
08:59 - wrong so you know like I could maybe say
09:01 - like actually I want to ignore numbers
09:04 - and let's do that so let's say I wanted
09:07 - to ignore numbers what would be some
09:09 - ways that I could do that well one thing
09:11 - I could do is I could make sure I could
09:13 - only do this if I could I could write a
09:16 - right expression like something like
09:20 - this so if I believe this is right so
09:22 - let's let's let's test this in the
09:23 - console so a regular expression like /d
09:29 - oops this is any number of digits I
09:37 - should get false I should get true so I
09:42 - could ignore anything that is not just a
09:46 - string of digit that is only a string of
09:48 - digits so I could put a little if
09:50 - statement around anything so as long as
09:56 - it is not just a string of digits then
10:00 - I'll actually count this word and if I
10:02 - do this again oops and I have a syntax
10:04 - error I guess I need another parenthesis
10:07 - and I say counts now we can see this is
10:11 - a bit better this is war what I
10:12 - expecting so I got some junk in there
10:14 - eccentric so now one thing you'll notice
10:16 - is oh there's a lot of capital words and
10:19 - then there's a lot of lowercase words
10:21 - but there might be a capital the and a
10:23 - lowercase the and I want to count those
10:25 - as the same thing so let's let's fix
10:28 - that one way one way I could do that is
10:30 - just as I'm going through every single
10:32 - word I can say two lowercase so I want
10:35 - to convert all those tokens to lowercase
10:37 - so that as I'm filling up this
10:40 - dictionary this associative array this
10:41 - JavaScript object
10:42 - I'm just including the lowercase
10:44 - versions as the keys so now if I go to
10:47 - counts we can see there we go
10:50 - a 206 Abel 3 about 10 above 14 apps and
10:55 - accepts Accord etc etc so now
10:57 - interestingly enough so this basically
10:59 - at you can see in many ways I'm done I
11:00 - now have a JavaScript object that has
11:03 - every single word as a key and the
11:05 - number of times it appeared in that
11:06 - document as the count now here's the
11:11 - thing it looks like it's in alphabetical
11:14 - order there which weirdly by the way is
11:15 - not the order its heat in here so let's
11:18 - try to understand what's going on here
11:20 - I'm going to make another I'm going to
11:22 - make a test object it is a little bigger
11:26 - so this is an empty object I'm gonna say
11:28 - test dot B equals 100 and test out a
11:33 - equals 50 and now I want to look at this
11:36 - object so one thing that's confusing
11:40 - here is an object a JavaScript object
11:43 - isn't ordered the properties dark don't
11:46 - exist in an order now they do kind of
11:49 - have this inherent order and you can see
11:51 - that inherent order there I put them I
11:53 - added them to the object in an order I
11:55 - said B first and then I said a so in
11:57 - some ways that's an order that
11:59 - JavaScript maintains for you and there
12:01 - is a way to iterate over all the
12:03 - properties of an object and this is the
12:05 - next thing I need to do but I also need
12:07 - to sort that order and there's no real
12:09 - way to sort the order of keys in a
12:12 - JavaScript object easily now looks like
12:15 - they're also an alphabetical order here
12:17 - which my guess is that's actually just
12:18 - the chrome developer console deciding
12:20 - like ah maybe you want to look at them
12:22 - in alphabetical order I'll put them in
12:23 - alphabetical order for you whatever a
12:25 - question like this comes up I think to
12:27 - myself could I add some extra redundancy
12:30 - to my code and just like not worry about
12:33 - it but store all the keys in another
12:36 - data structure that has ordered to it
12:37 - and I can check my attack in both places
12:39 - so if I need the order I have them over
12:41 - here and if I don't need the order I
12:42 - have them over here now there might be
12:44 - reasons someday why you don't want to do
12:45 - that but this is going to be a perfectly
12:47 - good and and I think kind of excellent
12:49 - solution for us right now
12:51 - so what I want to do so what's a data
12:52 - structure that has an order to it
12:55 - a structure that has an order to it is
12:56 - an array so what I actually want to do
12:59 - in this example because ultimately I
13:00 - want to sort everything from highest
13:03 - count to lowest count and there's no way
13:05 - to do that really just in the JavaScript
13:07 - object itself
13:08 - without some acrobatics as much as I
13:12 - want to try some acrobatics so what I
13:13 - want to add actually is a variable
13:16 - called keys and that's going to be an
13:18 - array the idea here is that I'm going to
13:20 - store all of the pairs the keys and the
13:24 - values in the counts object but I'm
13:26 - going to store separately a list of all
13:29 - of the unique words that I found because
13:31 - that's going to have an order I get
13:32 - iterate over it I can sort it I can do
13:34 - all sorts of stuff with it so how will I
13:37 - do that if I have this empty array when
13:40 - do I want to add a word to that array
13:44 - looking through the algorithm here I
13:46 - only want to add words to that array
13:48 - when I've discovered a new word that I
13:50 - haven't encountered before which is
13:51 - happening right here when it doesn't
13:53 - exist already in the dictionary the
13:56 - JavaScript object the associative array
13:58 - hash table thing so I'm going to say
14:02 - here keys and I'm using the word key
14:06 - because we can think of this JavaScript
14:08 - act object as a collection of key value
14:11 - pairs the values being the count the
14:13 - words being the keys and so now I'm
14:15 - calling the array keys keys dot push
14:17 - word so if I do that now let's look at
14:21 - what I have I have my counts which are
14:25 - all the words and their counts and then
14:27 - I also have my keys and my key is this
14:30 - 1343 words and you can see here they are
14:32 - it's a big array and all of them so
14:34 - these are all the unique words in the
14:36 - order that I found them now here's the
14:39 - thing we can now sort that array so
14:43 - first of all what what's the point of
14:46 - that array the main point of that array
14:47 - is I can now iterate over it so let's
14:49 - say I just wanted to create a div for
14:51 - every single word what I can do here is
14:55 - I can loop over that array we're
14:58 - actually going to have a problem here
14:59 - which I will try to remedy I'm going to
15:01 - iterate over all the keys and I'm going
15:05 - to say create div and this is p5 Dom
15:07 - syntax you could use document
15:09 - create element or whatever but create
15:11 - div keys index I so let's just look at
15:15 - what that does okay so I'm going to
15:17 - refresh this page and we can see there
15:20 - we go here's all the keys now what if I
15:25 - want to actually also show the counts
15:27 - for those words while I'm iterating over
15:29 - the keys but the counts are stored in
15:32 - the counts dictionary so what I want to
15:34 - do is say var key equals keys index I
15:37 - and I want to create a div that's both
15:40 - the key and what the counts for that key
15:44 - so the key the key is the thing that I'm
15:48 - getting from the array but then I use it
15:50 - as the lookup in to the counts
15:52 - JavaScript object so this now allows me
15:55 - to say this I now have all the words in
15:59 - there counts and I can make this a
16:01 - little bit bigger now they're not sorted
16:03 - in any order but I can now sort that
16:05 - array so let's say I do this Keys dot
16:10 - sort that's going to sort that array
16:14 - it's sorted it now look it's in
16:16 - alphabetical order now if it so happens
16:18 - you want your keys in alphabetical order
16:22 - done turn off the video go outside fly a
16:25 - kite skip to your loo whatever you want
16:28 - to do you are done but most likely
16:30 - you're going to want to sort that array
16:32 - from some other mechanism and JavaScript
16:36 - kind of has this sort function for
16:37 - arrays and it's just like okay you said
16:39 - sort I I guess I'll sort by alphabetical
16:42 - it has like one way it knows how to sort
16:43 - the array the numbers it'll sort it by
16:45 - like ascending or descending order
16:47 - something like that probably but what
16:49 - you want to do what I want to do is sort
16:51 - this by the counts but the counts aren't
16:53 - in the array so how do I sort the array
16:55 - by the counts that the counts are in the
16:57 - object but not in the array guess what a
17:01 - javascript has this neat little feature
17:03 - which allows you to pass a function into
17:06 - the sort function so sort without any
17:08 - argument will sort by default but if I
17:10 - write a function called compare if I
17:12 - write a word variable name called
17:14 - compare that means I can write a
17:16 - function called compare and what that
17:18 - functions job is is to return
17:22 - a positive or negative number based on
17:24 - whether it wants a so a and B are two L
17:27 - any two elements in that array
17:29 - JavaScript behind the scenes is going to
17:31 - sort the array based on your comparison
17:34 - of those two elements so what I could do
17:38 - now is say okay well count a equals
17:41 - counts a count B equals counts B so in
17:46 - this function which is telling keys how
17:48 - to sort I can reach into the dictionary
17:50 - like reaching into the dictionary
17:52 - pulling out those counts and now I can
17:54 - get a positive or negative number right
17:56 - I could send it pop one if count a is
17:59 - bigger than count B I could send it
18:01 - negative one if count B is bigger than
18:03 - count a and actually an even simpler
18:04 - thing I can do is just say return count
18:06 - a minus count B right because 10 minus 5
18:09 - is 5 and 5 minus 10 is negative 5 so
18:12 - that should work so let's put that in
18:15 - there let's run it and look oh well I
18:19 - sorted it the wrong way because now I
18:21 - have the lowest ones first so I'll just
18:24 - say count B minus count a I can never
18:26 - remember which one is which so I always
18:27 - just do it one way and then reverse it
18:29 - just the wrong way and we can see there
18:31 - we go the appears 537 times 248 times a
18:35 - 206 times rainbow 100 and 660 times etc
18:39 - etc etc so this now gives you a solid
18:43 - foundation for how to build a word
18:46 - counting application in JavaScript
18:50 - particularly using p5 so if you're
18:51 - watching this video and thinking well
18:53 - what should I do next here's what I
18:54 - would ask of you
18:55 - number one think of some interesting
18:57 - text that's meaningful to you or just
18:59 - something you want to play with that you
19:00 - want to do word counting with give that
19:02 - a try other aspects are think is this
19:05 - isn't so great this is a literal list of
19:09 - the words in there counts what type of
19:12 - creative idea might you have how might
19:14 - you animate the results of this how much
19:17 - you animate it while it's computing it
19:19 - how might you visualize these word
19:21 - counts how much you do a concordance of
19:23 - multiple texts and compare them so
19:25 - please if you make something please
19:27 - share it with me and the last thing that
19:28 - I'm going to mention is if I go to I
19:32 - just want to show you if I go back to my
19:33 - course website under
19:35 - text analysis I just want to show you
19:37 - this particular example this is
19:39 - essentially the same example that I just
19:41 - built but it has a bit more features to
19:45 - it where and you can take a look at this
19:46 - code if you want where you can drag a
19:47 - file in you can use a text sample sample
19:50 - it has a submit button you know formats
19:53 - it as a list so this this you might want
19:55 - to take a look for some more features
19:57 - and I also want to mention that what
19:58 - this example does is it takes everything
20:01 - that has to do with word counting and
20:03 - packages that in a JavaScript object
20:05 - that you can use generically
20:06 - there's one more example I'll show you
20:08 - that's also on my website which is
20:10 - whoops which is the parts of speech
20:13 - concordance so you can also look at this
20:15 - one which uses Rita J s which I showed
20:18 - in another video to not just count the
20:20 - word frequencies but actually count how
20:23 - many nouns we're in there how many verbs
20:25 - and these are parts of speech tags short
20:28 - short indicators of what parts of speech
20:30 - so you can take a look at that and think
20:31 - about what are other things count how
20:33 - many verbs there were count how many
20:36 - words that had six letters in it there
20:38 - were what other kinds of work no
20:41 - counting applications can you make where
20:43 - you're not just counting the word
20:44 - frequency itself one other thing I'd
20:46 - like to mention thanks to Alvaro in the
20:48 - chat who just brought this up is even
20:50 - though I made that keys array myself one
20:53 - thing you can do in JavaScript if I have
20:56 - this count counts object is I can say
20:59 - object dot keys counts and this will
21:04 - actually return an array of all the keys
21:06 - in that object so you can actually get
21:09 - this automatically and then sort that
21:10 - array but I've still just like to kind
21:13 - of just might as well build it myself
21:14 - because I'm reading through everything
21:15 - so hope you enjoyed this video see you
21:18 - in another one I'm going to uh in the
21:20 - next video I'm going to do this exact
21:21 - same or accounting application but in
21:23 - processing using the java programming
21:25 - language and later i'm also going to do
21:28 - a word counting application that does
21:30 - keyword generation using tf-idf and
21:34 - algorithm known as that which i'll
21:35 - explain
21:35 - and at some point look at bayesian text
21:37 - analysis as well to do text
21:39 - classification which also employs word
21:41 - counting okay thanks very much and see
21:43 - you soon
21:52 - you

Cleaned transcript:

hello and welcome to another coding challenge in this coding challenge I am going to build a word counting application so what can you do with a word counting application a lot of things its forms the basis of text analysis operations you can make all sorts of visualizations you know word cloud being this or classic perhaps cliched example but I'm sure a lot of you will come up hopefully with creative outputs from this I'm just going to do the core word counting application two things I'll mention I'm gonna use something called an associative array if you don't know what that is I just made a video all about an associate of a rice you can go back and watch that and I'm also going to do another follow up I'm doing this one in JavaScript using p5.js I'm going to do this exact same thing in processing on the java programming language right after it so you could if you're more interesting that good go and skip and watch that video okay so let's just get started so I need a text I'm going to load text from a text file I just copy pasted the description of Rainbows from Wikipedia so I'm going to load this particular text and count all the word occurrence count all the word frequencies in this text but you could you know pull text from an API project gutenberg is a great place to find a lot of public domain text that you can work with or you could even have you know users upload files as you've seen in previous examples so you might take your own spin on where are you getting your data from but I want to focus on the core algorithm of counting words so before I can actually count the words though I need to write the code to load the text file I'm going to do this in the simplest way by adding a preload function to my p5 code I don't need the draw function there's not going to be any animation in this so there certainly could be one I'm going to create a variable called txt for the raw text I'm going to say T XT equals load strings rainbow dot txt so this is me loading that file in and if I now go to my page and I type txt here we can see what did it load and it actually loads everything in it as an array with each line each element of that array being one line from that text file that's how the load strings function works in p5 so one of the first things I want to do is just create a variable where I join all of that together so I can join it all I just want to have one long string because ultimately I'm going to chop up that long string into word tokens so I get I get a text file I have it an array of lines I want to join all those lines together so that I can split up the whole thing by word tokens so then after I have all words I can save our tokens equals all words dot split now if you recall split is a JavaScript function you can call on a string that says here's a delimiter this is the space in between words and I want you to separate this text into an array where each token each word in this case word is a separate element of that array so and I can use a regular expression C my videos and regular expressions to define the delimiter so the simplest thing I could do would just be split by space but I'm going to and this isn't going to be so great but I'm actually going to split by this regular expression what this regular expression means is slash is a slash W back slash W is a medic act character for any alphanumeric character abc123 but that's lowercase W capital W means anything that's not a through Z or 0 through 9 so essentially I want to split by all spaces all punctuation that sort of thing could be some problems with this can't will split into Ken and T but you know we could refine this later and get a better better egg expression in there mostly I just want to work on the word counting part so that's all set now let's just make sure this aspect of it is working and let's just look at that array in the console so we can see it is working you can now see that I have an array where each word is a separate element of that array okay what's next what I wanted what I need to do now is look at every word one at time so first of all how would I do this if I didn't have a computer you know people used to do these textbased concordance is all the time if I had a book like how computers work I could just start reading this book the oh okay the one changes change one in one okay etc etc Cedric Cedric Cedric says ah ah oh I already found that uh okay so you can see this is the algorithm right and I encourage you to always do your algorithms not always but when you when you can when you feel like it do your algebra algorithms manually by hand to understand how they work I need this pen so what is the algorithm it is look at each word is it a new word is it a new word yes add it and set count to 1 right if it's not a new word increase its existing count so this is the algorithm we now need to implement in our code I'm sorry for the chicken scratch and the focus box focus box focus box but this is the algorithm that we want to implement look at each word is it a new word yes add it to the dictionary the associative array thingy the JavaScript object no increase its existing count okay come back over here let's start doing that so how do i iterate through all the words for VAR i equals 0 i is less than tokens dot length i plus plus and now i'd say ok let's look at the let's look at each word tokens index i now I need to have this dictionary that I'm talking about the dictionary of counts so I'm going to create a global variable doesn't need to be global necessarily but I'm going to do that just so I can kind of play with it in the console if I need to counts and what should counts be counts should be an empty object because what I'm going to do is put the words as the keys the properties of the object and the counts as the values in the object so how do I determine if this word right the first thing I need to do is determine is is it a new word so the way that I can check if it's a new word is to look at if it's a property of counts now there are some things I can do I think I JavaScript and say like if counts has own property or something like that but I an easier way for me to do this is just reference reference the property right if that property doesn't exist it will be undefined right so in other words let me come over here and look at this count object right if I try to say counts the it's going to I'm going to get back undefined so I can actually undefined evaluates in JavaScript to false or I can actually be really explicit about it in tests if it equals undefined let's do that so if counts word equals undefined right if it's undefined again that's a little bit of overkill there but if it's undefined what do I do set its count to 1 right set its count to 1 if it's not undefined what do I do and that should be word not words increase its count by 1 of course I could say counts word plus plus but I'm being very longwinded here if it's undefined we found it it's a new word if not increase its count by one so now let's take a look at what we got ooh boy what did I do wrong I definitely got a mistake because the keys are all numbers let's see what's going on here word equals tokens index I what did I do wrong here a console dot log word that's right counts it's called counts right it's an object if it's undefined it equals one otherwise it equals plus one what's going on here what did I do oh no no I didn't do anything there's just a ton of numbers in the text so by the way this is easy to forget and it's by the way it's actually sorted in alphabetical order which was like oh why are all these numbers this something must be wrong so you know like I could maybe say like actually I want to ignore numbers and let's do that so let's say I wanted to ignore numbers what would be some ways that I could do that well one thing I could do is I could make sure I could only do this if I could I could write a right expression like something like this so if I believe this is right so let's let's let's test this in the console so a regular expression like /d oops this is any number of digits I should get false I should get true so I could ignore anything that is not just a string of digit that is only a string of digits so I could put a little if statement around anything so as long as it is not just a string of digits then I'll actually count this word and if I do this again oops and I have a syntax error I guess I need another parenthesis and I say counts now we can see this is a bit better this is war what I expecting so I got some junk in there eccentric so now one thing you'll notice is oh there's a lot of capital words and then there's a lot of lowercase words but there might be a capital the and a lowercase the and I want to count those as the same thing so let's let's fix that one way one way I could do that is just as I'm going through every single word I can say two lowercase so I want to convert all those tokens to lowercase so that as I'm filling up this dictionary this associative array this JavaScript object I'm just including the lowercase versions as the keys so now if I go to counts we can see there we go a 206 Abel 3 about 10 above 14 apps and accepts Accord etc etc so now interestingly enough so this basically at you can see in many ways I'm done I now have a JavaScript object that has every single word as a key and the number of times it appeared in that document as the count now here's the thing it looks like it's in alphabetical order there which weirdly by the way is not the order its heat in here so let's try to understand what's going on here I'm going to make another I'm going to make a test object it is a little bigger so this is an empty object I'm gonna say test dot B equals 100 and test out a equals 50 and now I want to look at this object so one thing that's confusing here is an object a JavaScript object isn't ordered the properties dark don't exist in an order now they do kind of have this inherent order and you can see that inherent order there I put them I added them to the object in an order I said B first and then I said a so in some ways that's an order that JavaScript maintains for you and there is a way to iterate over all the properties of an object and this is the next thing I need to do but I also need to sort that order and there's no real way to sort the order of keys in a JavaScript object easily now looks like they're also an alphabetical order here which my guess is that's actually just the chrome developer console deciding like ah maybe you want to look at them in alphabetical order I'll put them in alphabetical order for you whatever a question like this comes up I think to myself could I add some extra redundancy to my code and just like not worry about it but store all the keys in another data structure that has ordered to it and I can check my attack in both places so if I need the order I have them over here and if I don't need the order I have them over here now there might be reasons someday why you don't want to do that but this is going to be a perfectly good and and I think kind of excellent solution for us right now so what I want to do so what's a data structure that has an order to it a structure that has an order to it is an array so what I actually want to do in this example because ultimately I want to sort everything from highest count to lowest count and there's no way to do that really just in the JavaScript object itself without some acrobatics as much as I want to try some acrobatics so what I want to add actually is a variable called keys and that's going to be an array the idea here is that I'm going to store all of the pairs the keys and the values in the counts object but I'm going to store separately a list of all of the unique words that I found because that's going to have an order I get iterate over it I can sort it I can do all sorts of stuff with it so how will I do that if I have this empty array when do I want to add a word to that array looking through the algorithm here I only want to add words to that array when I've discovered a new word that I haven't encountered before which is happening right here when it doesn't exist already in the dictionary the JavaScript object the associative array hash table thing so I'm going to say here keys and I'm using the word key because we can think of this JavaScript act object as a collection of key value pairs the values being the count the words being the keys and so now I'm calling the array keys keys dot push word so if I do that now let's look at what I have I have my counts which are all the words and their counts and then I also have my keys and my key is this 1343 words and you can see here they are it's a big array and all of them so these are all the unique words in the order that I found them now here's the thing we can now sort that array so first of all what what's the point of that array the main point of that array is I can now iterate over it so let's say I just wanted to create a div for every single word what I can do here is I can loop over that array we're actually going to have a problem here which I will try to remedy I'm going to iterate over all the keys and I'm going to say create div and this is p5 Dom syntax you could use document create element or whatever but create div keys index I so let's just look at what that does okay so I'm going to refresh this page and we can see there we go here's all the keys now what if I want to actually also show the counts for those words while I'm iterating over the keys but the counts are stored in the counts dictionary so what I want to do is say var key equals keys index I and I want to create a div that's both the key and what the counts for that key so the key the key is the thing that I'm getting from the array but then I use it as the lookup in to the counts JavaScript object so this now allows me to say this I now have all the words in there counts and I can make this a little bit bigger now they're not sorted in any order but I can now sort that array so let's say I do this Keys dot sort that's going to sort that array it's sorted it now look it's in alphabetical order now if it so happens you want your keys in alphabetical order done turn off the video go outside fly a kite skip to your loo whatever you want to do you are done but most likely you're going to want to sort that array from some other mechanism and JavaScript kind of has this sort function for arrays and it's just like okay you said sort I I guess I'll sort by alphabetical it has like one way it knows how to sort the array the numbers it'll sort it by like ascending or descending order something like that probably but what you want to do what I want to do is sort this by the counts but the counts aren't in the array so how do I sort the array by the counts that the counts are in the object but not in the array guess what a javascript has this neat little feature which allows you to pass a function into the sort function so sort without any argument will sort by default but if I write a function called compare if I write a word variable name called compare that means I can write a function called compare and what that functions job is is to return a positive or negative number based on whether it wants a so a and B are two L any two elements in that array JavaScript behind the scenes is going to sort the array based on your comparison of those two elements so what I could do now is say okay well count a equals counts a count B equals counts B so in this function which is telling keys how to sort I can reach into the dictionary like reaching into the dictionary pulling out those counts and now I can get a positive or negative number right I could send it pop one if count a is bigger than count B I could send it negative one if count B is bigger than count a and actually an even simpler thing I can do is just say return count a minus count B right because 10 minus 5 is 5 and 5 minus 10 is negative 5 so that should work so let's put that in there let's run it and look oh well I sorted it the wrong way because now I have the lowest ones first so I'll just say count B minus count a I can never remember which one is which so I always just do it one way and then reverse it just the wrong way and we can see there we go the appears 537 times 248 times a 206 times rainbow 100 and 660 times etc etc etc so this now gives you a solid foundation for how to build a word counting application in JavaScript particularly using p5 so if you're watching this video and thinking well what should I do next here's what I would ask of you number one think of some interesting text that's meaningful to you or just something you want to play with that you want to do word counting with give that a try other aspects are think is this isn't so great this is a literal list of the words in there counts what type of creative idea might you have how might you animate the results of this how much you animate it while it's computing it how might you visualize these word counts how much you do a concordance of multiple texts and compare them so please if you make something please share it with me and the last thing that I'm going to mention is if I go to I just want to show you if I go back to my course website under text analysis I just want to show you this particular example this is essentially the same example that I just built but it has a bit more features to it where and you can take a look at this code if you want where you can drag a file in you can use a text sample sample it has a submit button you know formats it as a list so this this you might want to take a look for some more features and I also want to mention that what this example does is it takes everything that has to do with word counting and packages that in a JavaScript object that you can use generically there's one more example I'll show you that's also on my website which is whoops which is the parts of speech concordance so you can also look at this one which uses Rita J s which I showed in another video to not just count the word frequencies but actually count how many nouns we're in there how many verbs and these are parts of speech tags short short indicators of what parts of speech so you can take a look at that and think about what are other things count how many verbs there were count how many words that had six letters in it there were what other kinds of work no counting applications can you make where you're not just counting the word frequency itself one other thing I'd like to mention thanks to Alvaro in the chat who just brought this up is even though I made that keys array myself one thing you can do in JavaScript if I have this count counts object is I can say object dot keys counts and this will actually return an array of all the keys in that object so you can actually get this automatically and then sort that array but I've still just like to kind of just might as well build it myself because I'm reading through everything so hope you enjoyed this video see you in another one I'm going to uh in the next video I'm going to do this exact same or accounting application but in processing using the java programming language and later i'm also going to do a word counting application that does keyword generation using tfidf and algorithm known as that which i'll explain and at some point look at bayesian text analysis as well to do text classification which also employs word counting okay thanks very much and see you soon you
