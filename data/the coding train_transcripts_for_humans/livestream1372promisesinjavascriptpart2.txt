With timestamps:

00:04 - [Music]
00:07 - good morning again it's a second coding
00:11 - trained livestream of this week so I'm
00:17 - really gonna try to just jump right into
00:19 - things as opposed to what I did
00:21 - yesterday which will spend about 45
00:24 - minutes talking arbitrarily about all
00:26 - sorts of random topics like schedule and
00:29 - that sort of thing I do have to say
00:31 - something important here which is that
00:32 - as many of you might are interested in I
00:35 - know I don't know whether there's many
00:37 - of you are just the loudest voices of
00:39 - you are interested in more tutorials on
00:42 - machine learning in particular in the
00:44 - browser with tensorflow yes I'm getting
00:46 - tonight and I'd hoped that that would be
00:48 - the primary topic of today but yesterday
00:51 - I started doing some tutorials on
00:54 - promises and I want to finish that
00:56 - sequence first because it will lay the
00:59 - foundation for certain things that I
01:00 - will need when making some examples with
01:04 - tensorflow das for example in particular
01:06 - the async keyword and the await keyword
01:09 - now something very strange has been
01:11 - going on in here in the studio and which
01:13 - I can't really explain because I I don't
01:17 - this room gets used by other people and
01:19 - of course other people should use this
01:20 - room and I try to as much time as I
01:23 - might have looking for my marker help
01:25 - other people make use of this room but
01:27 - usually I hear about it and also it's
01:30 - the summer so I didn't really think but
01:32 - there's a marker down here is this it
01:34 - strangely the whiteboard was a race
01:37 - actually had some other writing on and I
01:38 - erased it before I started
01:39 - live-streaming I'm just gonna check to
01:41 - make sure everything looks and sounds ok
01:43 - ding - - nobody seems to be complaining
01:47 - so yep alright so um I don't know who
01:51 - was in here yesterday if you're if you
01:53 - are watching this and you were in here
01:55 - yesterday please so let me make a list
01:59 - of what I want to cover today so
02:01 - yesterday I just did the basic you know
02:05 - what is a promise and I looked at it in
02:11 - the context of fetch
02:13 - fetch so using the fetch function to
02:17 - retrieve data from URL and resolving the
02:21 - promise when the data comes in that
02:24 - might not have been the best way to
02:25 - explain that but so be it so and then I
02:28 - went off off and off and off and off
02:30 - trying to explain promise dot all and so
02:34 - many things I got wrong but one is I
02:35 - just kept saying promises all and its
02:37 - promise not all number two is I got into
02:40 - this thing when I was like I have an
02:41 - array of promises and then I need to get
02:44 - a new array of promises from that array
02:46 - of promises and there was a whole extra
02:47 - sequence and then I used a loop and I
02:49 - tried to use the map function it was
02:50 - kind of a mess it was good it was really
02:52 - good for me I learned a lot and I also
02:54 - learned what people think about that the
02:56 - way that I code just often that's
02:59 - terrible why are you doing it that way
03:00 - and then there's some people who have
03:01 - some other feedback like yeah you know
03:03 - maybe it's not the best but it kind of
03:04 - explains it it works
03:05 - so anyway I'm gonna take a mulligan on
03:09 - that but I'm thought about this and I
03:11 - actually did some coding this morning
03:12 - before I came in here so what I'm gonna
03:14 - do next I'm gonna get to promise that
03:17 - all but next I'm going to look at how to
03:20 - make your own promise I promise you how
03:25 - to I wish I had I have my keyboard over
03:28 - here if I had really thought better of
03:31 - it I would have I would have come in
03:33 - with some promise related music maybe
03:36 - later how to make your own progress I
03:41 - think the joke I made yesterday is this
03:44 - still am I still on the board was that
03:47 - if I title a YouTube video or how to
03:50 - keep your promises maybe like people who
03:52 - are looking for self-help videos will
03:53 - come inside what is a promise fetch how
04:00 - to make you promise okay that's a weird
04:03 - thing that I wrote how to make your
04:04 - promise I don't know how I feel about
04:06 - that but I'll leave it there it's a
04:09 - little bit weird but fine then I want to
04:13 - look at a sink and a weight and this is
04:18 - really what's often referred to as
04:21 - syntax sugar so there will be no new
04:24 - concepts but there will be a less
04:26 - verbose way of
04:27 - a function that returns a promise using
04:30 - a sink and a weight and then the last
04:32 - piece of this I think will be promise
04:35 - dot all so this is my new plan if I can
04:40 - get through all of this today I'll be
04:42 - amazed if I could get through all this
04:44 - today and start to talk about yes the
04:47 - more that will be a miracle but have no
04:50 - fear whatever I don't get to I will get
04:53 - to next time I am here every week
04:55 - throughout the summer I did say
04:56 - yesterday that I was gonna do twice a
04:58 - week live streams and that's sort of
05:00 - true but then I started looking at the
05:03 - calendar and there's a lot going on and
05:04 - also um this here I said I was gonna get
05:07 - started writing the material now I'm
05:09 - just rambling but one thing I want to
05:11 - say is that I I think and I'm sorry for
05:13 - using my YouTube channel as a personal
05:15 - therapy session so but I'm realizing
05:18 - that there are some things I really want
05:20 - to accomplish this summer two of the
05:23 - these are the things I really want to I
05:34 - really want to have a second edition of
05:37 - this book out and a version of it within
05:40 - JavaScript so right now this book the
05:42 - nature of code is written with in Java
05:45 - using the processing programming
05:46 - environment I want to I have many
05:48 - updates that I've actually made to it
05:49 - but I just never gotten them onto the
05:51 - website and into the print version of
05:52 - the book so I want to make that happen I
05:54 - want to add a new chapter which is about
05:56 - neural evolution and then I want to once
05:59 - that's done have a JavaScript version in
06:01 - the book and if I'm live-streaming all
06:03 - the time I'll never have any time to
06:05 - work on this so number one is wants to
06:07 - help me with this you know on the one
06:09 - hand I just kind of need to go off and
06:11 - work on it but if you have some clever
06:13 - ideas or want to look through my various
06:14 - github repositories and help I'm open
06:17 - I'm open to that and then I think that I
06:20 - need to at some points limit myself as
06:23 - much to focus make sure I work so keep
06:25 - me honest here so this is the number one
06:27 - and the other thing is and let's see if
06:29 - I can get there now the new URL I
06:31 - haven't gotten HTTPS working yet so we
06:33 - need to get HTTPS working for this
06:35 - domain but ml v jf which is a
06:38 - a friendly machine learning library
06:41 - written in JavaScript built on top of
06:42 - tension float is um this is a project
06:44 - that I would like to spend a lot of time
06:46 - working on the good news about this is
06:47 - this has a whole group of people who are
06:51 - developing it and it's an open source
06:53 - project and you can see some of them
06:55 - here people who are contributing to this
06:57 - project so this is even if I broke my
07:01 - other elbow and stopped working this
07:02 - suffers this would still happen but the
07:05 - nature of codebook is something I really
07:06 - need to focus on a live stream working
07:10 - on it problem solved huh I don't know
07:14 - what that refers to all right looking at
07:21 - the chat it's spring yes it is
07:24 - oh you know the other thing I really
07:25 - should do is I really want to update my
07:27 - workflow this summer so I want to want
07:29 - to start playing around with using
07:30 - Visual Studio code I might use Adam here
07:33 - and there still I want to use I term
07:35 - it's a different terminal and I want to
07:38 - start to also also I'm gonna go back and
07:41 - start to do some very beginner videos
07:43 - again because it's been quite a while
07:45 - since I did my beginner learn to program
07:48 - from scratch videos and those needs some
07:50 - refreshing interfere interference
08:00 - something and why heat rights will you
08:02 - make some project Euler problems is it's
08:04 - pronounced Euler right it's very
08:05 - interesting thing check it out I am
08:07 - familiar with project Euler I would have
08:09 - fun doing that so that's not a bad idea
08:11 - Oh problem solved working on the book I
08:14 - mean oh livestream working on the book I
08:18 - get it me I am so Mia is making a good
08:21 - point that I could just live stream my
08:24 - work sessions it's not the worst idea
08:27 - definitely would consider that all right
08:33 - the stream title says async instead of
08:36 - async let me fix that let me fix that
08:40 - thank you for pointing that out
08:42 - where do I find that info and settings a
08:48 - wha a s why thank you
08:51 - whoops
08:52 - asy NZ okay thanks for all the nice cuff
08:59 - him I'm not really a vin per I wish I I
09:02 - wish I was like a vim person but you
09:04 - know me I'm not a vain person like mmm I
09:09 - didn't grow up programming and and so I
09:14 - never found my way to those kind of
09:16 - old-school tools okay alright so thanks
09:29 - everyone saying hi in the chat
09:30 - appreciate all those messages I think I
09:33 - think I'm just gonna get started so um
09:36 - it's gonna be how to make your promise
09:39 - alright let's come I didn't buy new
09:43 - microphones and buy a new microphone I
09:45 - still haven't found the old microphone I
09:47 - think this one might be a little bit
09:48 - better though I know you tell me
09:51 - ok so let me close a bunch of stuff and
09:57 - promise you what is that song and if I
10:04 - do my like terrible singing I don't
10:06 - think I get a copyright violation
10:07 - mostly because I think it's only if it's
10:10 - like exactly the original track but also
10:12 - because I'm terribly out of tune it's an
10:13 - advantage to being out of tune let me
10:17 - move to the side desktop I want to be
10:22 - working on promises I'm gonna move this
10:26 - away let's pretend we never did this
10:31 - let's go to desktop promises let's put
10:36 - this away in the past it's in the past
10:38 - we're moving on to the future and we're
10:41 - gonna say oh - promises make your own
10:47 - and I'm going to do this make your own
10:53 - quadrennial and then I'm going to I must
10:56 - have Adam about this open somewhere and
11:03 - check the slack channel mike is way
11:06 - better okay that's good to hear so maybe
11:07 - I'll just keep using this mic old mic is
11:10 - better okay well I could do a straw poll
11:13 - for that I'm not going to alright let's
11:16 - go here alright we don't need any of
11:18 - this stuff
11:22 - one thing is here's actually I shouldn't
11:25 - talk about this yet I have a maybe
11:27 - possibly almost tentative plan to also
11:31 - live stream from home that's a terrible
11:35 - idea
11:35 - I think but stay tuned I need to buy a
11:39 - new computer to do that though that's
11:41 - the issue and that is expensive but I'm
11:45 - waiting until WWDC is that what it's
11:48 - called and maybe they'll announce all
11:49 - the new stuff there so then I could just
11:54 - be like on Saturday morning at 9 a.m. we
11:57 - work on nature of God but of course it's
11:59 - complicated anyway all right so let's do
12:03 - this I'm gonna keep the p5 library base
12:11 - almost like as a security blanket I'm
12:17 - gonna just do something I just want to
12:23 - have this video start so I just want to
12:33 - have an example some example code ready
12:38 - to go and say hello is not defined oops
12:42 - I should say say hello all right
12:56 - um alright here we go oh this is really
13:01 - not good today that's a little better
13:04 - yeah cuz I can't really see it by the
13:10 - way if people have equipment suggest the
13:12 - good if people have equipment
13:13 - suggestions for things that I should get
13:15 - to improve this livestream I'm
13:18 - definitely a all ears and the nose and a
13:22 - mouth but I'd be happy for suggestions
13:28 - all right let me cycle the cameras so
13:31 - that we'll all right you know I'm also
13:47 - having this like lower back pain on this
13:49 - side that's not gonna mess up my lives
13:51 - here I don't think it's from I think
13:53 - it's probably from sitting thing is like
13:55 - I don't actually sit and work very much
13:56 - because the I just I'm either like
13:59 - standing and talking or I'm like running
14:02 - around like talking to people or doing
14:04 - stuff I don't actually sit and work at
14:06 - the VA but yesterday and the day before
14:08 - I was kind of doing that for hours at
14:10 - the time and I think maybe I need to get
14:11 - up get a sin Heiser lavell ear mic I
14:14 - think that's what my other thing was but
14:16 - I will check so I'm gonna answer one
14:20 - more question that I'm going to move on
14:22 - couche in the chat asks can we have a
14:24 - discord where we can discuss our problem
14:26 - the coding train so let me just quickly
14:29 - say a few words about community I while
14:32 - I'm here so there everyone watching the
14:35 - channel is welcome to self-organize and
14:38 - create their own forums or dis cords or
14:41 - reddit threads or whatever to talk about
14:42 - coding and and you're welcome to do that
14:47 - I am currently keeping a I have an
14:54 - official coding training slack channel
14:57 - but the best way I found to manage that
14:59 - right now is through a membership to
15:02 - patreon or sponsorship on the YouTube
15:04 - channel so I don't want it I've gone
15:06 - I've talked about it in several
15:07 - different videos already
15:08 - you find it but that's basically that's
15:11 - the one official then of course there
15:13 - are the official coding train github
15:15 - repositories and I do want to mention it
15:17 - I really am remiss in not having done
15:20 - this sooner but I just want to mention
15:22 - this III maybe I'll come back to this
15:24 - one it's more finalized but I also now
15:27 - have a code of conduct repo so this code
15:32 - of conduct applies to interactions in
15:34 - the YouTube chat YouTube comments slack
15:37 - channel github participation in the
15:39 - coding train community so if also what
15:42 - this isn't really is in the present is a
15:44 - copy of the p5.js code of conduct and so
15:48 - if anyone has experience with online
15:50 - communities and codes of conduct and
15:52 - wants to contribute and help make this
15:54 - better and help me do better managing
15:57 - the community I am again all ears and no
16:02 - you know I I need to get new lenses
16:03 - because even though I'm eyes I my lens
16:06 - is all scratched up right there and I
16:07 - can't actually see and I have tickets to
16:09 - go see solo this weekend and I if I
16:12 - don't have good glasses I'm not gonna
16:13 - enjoy the movie I don't know how this is
16:14 - gonna happen huh okay I got to get
16:18 - started so that's what I have to say all
16:23 - right hey we've got a new sponsor or
16:33 - Moebius thank you once again if you once
16:40 - again if you choose to sponsor this
16:42 - youtube channel on youtube you will get
16:45 - a big green thing in the chat that's
16:47 - this new sponsor and I will say huh new
16:50 - sponsor and then some - appears next to
16:53 - your name why not subscribe today you
16:56 - will get a piece of graphics that
16:59 - appears next to your game why you would
17:01 - want that I don't know but hey it's
17:02 - possible for you alright thanks
17:05 - everybody that was my sponsored by the
17:08 - sponsors of the sponsored coding train
17:10 - sponsors
17:12 - all right let's move on Anabelle by the
17:22 - way the in it's also a thing this is one
17:25 - thing I really like to explore I know
17:26 - twitch has a lot of us but I think there
17:29 - are ways that I could hook stuff up into
17:30 - the chat to like various devices and
17:32 - things here and I have to go would be
17:34 - fun but I also could do tutorials about
17:36 - you know getting a light to turn on or
17:38 - something so if anybody has experiences
17:41 - with that in particular with YouTube
17:43 - streaming let me know ok hello welcome
17:59 - to a second video on promises now what I
18:03 - think if you watch the previous video I
18:06 - talked about the idea of a promise how
18:08 - to use a promise with this function
18:11 - called fetch which retrieves data from
18:14 - URL and a variety of other things and I
18:17 - looked at how you how you when the
18:20 - promise finishes how you use then to
18:23 - execute code and how you use catch if
18:25 - there's an error and you can chain
18:27 - promises if there's a bunch of things
18:28 - happening in sequence that's what I
18:30 - tried to look at so far in the previous
18:32 - video now I'm actually gonna take a step
18:33 - back here and in a way do something much
18:35 - simpler and probably less important but
18:39 - maybe will give some good background
18:40 - foundational knowledge so I'm going to
18:43 - talk about how to make your own promise
18:46 - and just in case maybe you're here for
18:48 - like how to keep your own how to keep
18:50 - your bra to keep your own profits and if
18:53 - you're here for like a self-help video
18:55 - unfortunately somewhat this is but maybe
18:56 - you want to learn about coding you might
18:58 - want to go to the beginner ones though
19:01 - it but maybe this could be the first
19:02 - video watching anyway how to make your
19:05 - own promise
19:05 - so let's come with me over here and so
19:09 - this is more relevant probably if you
19:12 - are the developer of a JavaScript
19:13 - library and you want to support promises
19:15 - in your library most of the stuff that
19:17 - I'm going to do will involve making use
19:20 - of other libraries that give me promises
19:23 - and I take those promises and hope that
19:25 - are kept and also I'm actually
19:29 - eventually gonna get to this like new I
19:31 - think these are a part of yes I think
19:35 - it's a 2793 and 402 it's not even a
19:39 - number that's anyway I think it's
19:44 - actually just es 7 I was trying to make
19:45 - a joke there um but I'm actually gonna
19:47 - use a sink and a weight await the key
19:49 - words to write an asynchronous function
19:51 - that returns a promise but I'm stepping
19:55 - through this stuff one step at a time so
19:56 - come back over here with me
19:57 - and so I've got a little p5 Sketch
19:59 - there's nothing about this that you need
20:01 - p5 for
20:02 - but it's my comfort object you know when
20:04 - you're small and you have your little
20:06 - lovey that you sleep with B 5 was like a
20:08 - little lovey that I code with and so
20:12 - what does this do this in setup I don't
20:14 - make a canvas I call set time out if you
20:16 - don't know what set time out is I've
20:17 - whole video about that um which executes
20:20 - a callback to say hello function 1000
20:23 - milliseconds later and that makes a
20:25 - paragraph hello so let me go to the
20:27 - browser and you can see 1 second later
20:28 - boom hello and if I made this 5,000 or
20:32 - 6,000 you know 6 seconds later that
20:35 - hello is gonna pop up so this is the old
20:40 - the old way of doing it in JavaScript we
20:43 - have a function that's asynchronous that
20:45 - we pass a callback so what if I wanted
20:47 - to create a version of set timeout that
20:50 - returned a promise instead so I'm gonna
20:53 - write my own and again this is really I
20:56 - don't know that this is something you
20:57 - need to do in a program but this is
20:59 - gonna give us some background so I'm
21:01 - gonna write a function and I'm gonna
21:03 - this by the way is not my original idea
21:04 - sure you can find lots of tutorials that
21:05 - show this exact same scenario I probably
21:08 - read a few of them so I'm gonna write a
21:10 - function called delay I could also call
21:12 - it like set timeout promise just to be
21:15 - explicit about what I'm doing but I'm
21:16 - just gonna give it a different name
21:17 - called delay and what I want to do is I
21:21 - want that function to take an amount of
21:24 - time so that function is going to so
21:26 - really what I'm doing here is like just
21:29 - this to start set timeout so at first
21:34 - I've just like basically I mean this is
21:35 - completely insane what I've done but
21:37 - I've written my own function
21:39 - delay to just call set timeout and if I
21:41 - give that you know 1000 there we go but
21:46 - what I want to do is I want to do this I
21:48 - want to say delay 1000 dot then and I'm
21:53 - gonna use the arrow syntax here create P
21:57 - hello
21:58 - so again if the arrow syntax in is not
22:02 - familiar to you a new part of es6
22:04 - javascript I have a video on that
22:06 - and then I'm gonna say catch console dot
22:13 - log error so I won't and I'm missing
22:17 - some stuff here this doesn't need
22:19 - semicolon there we go so this is what I
22:22 - want to do I want to write I want to
22:24 - write my code like this I want the delay
22:27 - function to delay for one second return
22:29 - a promise when it's done create that
22:32 - paragraph and if there was an error
22:34 - somehow console.log the error and
22:36 - yesterday someone was saying to me I
22:38 - should say console dot error or I could
22:40 - put the error in the in the Dom as well
22:44 - so okay so this is what I want to do now
22:46 - this won't work right now because it's
22:48 - gonna say cannot read property then of
22:50 - undefined because there's nothing
22:52 - there's no promise that's been returned
22:54 - so what I need is my delay function has
22:58 - to return a promise do I have to say new
23:03 - promise yes eight hold on timeout
23:09 - I shouldn't look at the chat in the
23:11 - middle of these tutorials oh and you
23:15 - can't even see this I went off the but
23:17 - is this is this is async away part of es
23:21 - eight or es seven uh who cares yes new
23:27 - promise catch console I know I don't
23:33 - need the error function for catch up I
23:35 - thought Gannon writes catch console
23:36 - player I thought that's a little gonna
23:37 - be a little bit confusing for beginners
23:40 - but okay let me come back
23:47 - oh it's yes 2017 which is es8 yes oh oh
23:53 - I'm gonna get flooded in the comments
23:55 - for that crap crud I mean I don't you
24:00 - know how I was using the giffy API and I
24:02 - like set the PG rating can I set the PG
24:04 - rating for myself all right yes the
24:06 - wrong camera I know I know I'm 20
24:09 - seconds ahead of you in the future all
24:10 - right all right so I forgot I need to
24:13 - return a new promise so this is sort of
24:16 - I'm kind of getting closer let's just
24:18 - see what happens now well promise
24:21 - resolver is undefined so if I want to
24:25 - make my own promise how to make your own
24:28 - promise in addition to just promising
24:30 - something I have to provide pathways for
24:33 - resolution of that promise or rejection
24:37 - of that promise so when I create the new
24:40 - promise I have to say what happens when
24:41 - it's resolved what happens when it's
24:43 - rejected so first of all something that
24:46 - I could actually do here just for fun
24:47 - actually lo hmm I'm thinking here how
24:54 - did I do this well let me okay so what
24:56 - goes in here we need a function called
25:00 - deal with it till with promise resolve
25:04 - reject right oh this is so weird I'm
25:14 - totally blanking for a second I did this
25:16 - this morning I should go look at what I
25:18 - wrote just timeout for a second I just
25:23 - look at what I wrote this morning I have
25:25 - it on this new promise oh yeah yeah this
25:29 - is totally right ah I'm there okay I
25:33 - don't know why okay I'm doing it the
25:36 - right way I just got confused for a
25:37 - second okay
25:43 - then I want to pass that deal with
25:47 - promise function into the into the new
25:51 - promise so the deal with promise
25:52 - function is a function that I'm defining
25:54 - to handle resolution and rejection of
25:58 - the promise and that function is
26:00 - put is returned with this new promise
26:03 - but again even though I like to write no
26:06 - one's really gonna write it this way
26:07 - you're mostly gonna see it as an
26:09 - anonymous function written right in here
26:12 - and then you know if we're sticking with
26:14 - this es6 arrow notation we would see it
26:17 - look like this so now this is most
26:21 - likely what you're gonna see
26:23 - I want this delay function to return a
26:24 - new promise and I need to provide
26:26 - pathways for how I resolve and reject
26:29 - those promises so here's what I could do
26:31 - I'm gonna put this set timeout say hello
26:36 - time then I'm actually going to so uh
26:43 - sorry I need to do really don't look up
26:52 - my code because I'm usually figuring out
26:54 - I just want to look it up oh yes a
26:57 - timeout a function I just call resolve
27:02 - okay
27:03 - all right I'm sorry I got so confused
27:07 - let me just go back
27:20 - though the least I need to return
27:27 - anything just called oh right right
27:30 - right okay all right so what do I want
27:34 - to do what I want - sorry is I want to
27:38 - call set timeout what I want to call set
27:43 - timeout with that amount of time so I'm
27:45 - going to use the call back but what is
27:47 - the call back the call back is actually
27:49 - just resolved so and I don't need this
27:53 - say hello function anymore because I'm
27:56 - gonna handle what I want to do I don't
27:58 - have a call back anymore I mean I handle
28:00 - what I want to do with the then so here
28:03 - what I want to do is say after this
28:07 - amount of time resolve the promise okay
28:10 - so let's just see if this works
28:12 - yeah it worked now here's the thing I
28:15 - might want to do more stuff in here and
28:18 - so this could actually be I could
28:20 - actually also write this like this as a
28:22 - function that executes to resolve and
28:24 - then other things could happen in here
28:26 - but I think that's besides the point
28:28 - I just want to recall resolve because
28:32 - all I'm doing is waiting for a certain
28:34 - amount of time but here's the thing
28:36 - what if I were to say also in addition
28:40 - to delay 1000 delay you know um
28:45 - promise sing like this doesn't make any
28:49 - sense right you can't pass a string to
28:51 - the delay function it doesn't know how
28:53 - much time it's supposed to wait so if I
28:55 - run this now it's sort of just worked
28:58 - weirdly but I want to make that an error
29:01 - I want to reject the promise if I don't
29:03 - get a number so one thing I can do here
29:06 - is I can say if there's a function
29:08 - actually in JavaScript I believe it's is
29:10 - n a n so is n a n stands for is not a
29:14 - number so if time is not a number I now
29:18 - want to reject that promise otherwise I
29:22 - want to resolve the promise after a
29:25 - certain amount of time so this is me
29:27 - taking the non promise function set
29:30 - which has a callback and wrapping it in
29:33 - a new function that handles it with a
29:35 - promise but better than just car so list
29:38 - this should work now in other words we
29:40 - should see we see this like undefined
29:43 - sketch ojs line 9 because but I should
29:47 - really give it an error so I should be
29:49 - able to say I believe reject new and
29:53 - pass an error new error you delay
29:57 - requires a valid number or something so
30:01 - if I do this and now let me just take
30:05 - this out here right so this now is the
30:07 - full promise of a 5 promise of a fight
30:11 - that's not a word
30:13 - delay function it returns a new promise
30:16 - which is a function that handles
30:19 - resolution and rejection and it's if
30:22 - it's if it's passed not a number it
30:24 - calls reject otherwise it just calls
30:26 - resolved after a certain amount of time
30:28 - so let's run this this is my this is me
30:31 - calling it now delay 1000 there we go
30:36 - hello and now if I say delay blah blah
30:41 - we should see error and you can see my
30:44 - error here delay requires a valid number
30:46 - so again this is more likely something
30:50 - you would be doing as the author of a
30:51 - JavaScript library and your library has
30:54 - asynchronous code that supports promises
30:56 - again though and I think I'm gonna do
30:58 - this in the next video I am going to
31:02 - actually completely rewrite that using
31:04 - and I got it wrong apologies to everyone
31:06 - so just to be clear this is es is so
31:10 - confusing so let me think about this yes
31:15 - 5 I don't know this stuff I'm gonna
31:19 - write this out that I'm gonna go check
31:20 - the chat and I'll come back and correct
31:22 - it so let me go backwards
31:23 - this async an 808 is from es 8 which is
31:28 - JavaScript es ECM CA or something MCA a
31:33 - specification 2017 this is es 8 es 6
31:40 - which promises are a native of
31:43 - JavaScript as a yeah
31:44 - six is es2015 I think and then es5 I
31:51 - don't know when yet that's the kind of
31:52 - old JavaScript that with var so things
31:55 - that are in es6 are like var no sorry
31:58 - let I'm totally off the board here I
32:01 - don't think you can see what I'm writing
32:03 - hold on let me just or like let const
32:14 - arrow a yes five is you know var
32:18 - callbacks promises so jobs could visit
32:21 - the thing JavaScript is like and always
32:23 - changing an evolving language and as you
32:26 - know watching this video in the year
32:28 - 3122 none of this is relevant anymore
32:34 - but thanks for watching anyway about
32:36 - because you were here for a little self
32:37 - hip help video about how to keep your
32:38 - promises alright what was I talking
32:40 - saying I'm gonna come back I'm in the
32:42 - next video I probably got this wrong so
32:44 - in the next video
32:46 - check this video's description for a
32:47 - link to the next one I will come and
32:49 - correct anything here and talk about
32:51 - async and a weight thanks for watching
33:01 - be sure to reduce or return reject did I
33:07 - get something wrong here I'm looking at
33:15 - the chat yes latest yes did I get
33:20 - anything wrong about this ecmascript
33:27 - East ECMA script yeah script no just
33:36 - call the reject okay good
33:43 - great alright so now we are done with
33:47 - this so now I'm gonna talk about a sink
33:53 - and a weight everybody ready for that oh
34:02 - great okay
34:14 - all right you are still setting the time
34:19 - out in error case is all uh-oh that's a
34:23 - little that is an error yeah so
34:25 - interesting
34:27 - no reject oh that's interesting but but
34:32 - it never it stops this it's the
34:36 - JavaScript program quits so I really
34:39 - should oh I see so I should technically
34:40 - have this here this is more correct yes
34:45 - I see so maybe I'll just mention that at
34:50 - the beginning of the next video okay I'm
35:05 - waiting for the chat to catch up with me
35:07 - to tell me if there's anything else
35:09 - important that I'm forgetting it's not
35:15 - even noon yet look how well we're doing
35:27 - oh you can only reject resolve once so
35:30 - it ignores the resolve after the reject
35:32 - but you are setting a weird time out
35:34 - right so this code still it it runs
35:38 - through this code but it won't actually
35:39 - call resolve because it's already been
35:41 - rejected I see so I probably this would
35:44 - actually make more sense to just write
35:46 - it this way I think this is the way that
35:48 - I would choose to write it okay yeah um
35:56 - egg Yi in the chat rightz Dan can you
35:59 - explain what is new and es8 no I mean
36:03 - not because I don't want to but I'm kind
36:04 - of catching up so that what I'm about to
36:07 - do is talk about a sink and a weight a
36:10 - weight I keep saying a weight because
36:13 - it's a sink a sink a weight a weight in
36:16 - a sink async/await
36:19 - but I will I'm at least gonna talk about
36:21 - that all right so let me at the
36:22 - beginning of the next video just fix
36:24 - this all right hold on one second here
36:45 - by the way matsya when you watch this I
36:49 - wonder and all of you watching at home I
36:51 - part or wherever you are
36:53 - I wonder if because I have on my channel
36:56 - if I go to youtube.com slash the coding
37:00 - train and I go here go here go here
37:10 - topics right so this kind of fits in let
37:13 - me look at this playlist so this is what
37:17 - I've got in this playlist so far let
37:19 - versus VAR Const arrow functions for of
37:21 - Ohio order functions but those aren't
37:25 - es6 are they are the higher-order
37:27 - functions es6 oh they existed before
37:30 - didn't they oh but maybe I'm using arrow
37:31 - functions with them anyway so this would
37:35 - make sense this stuff would make sense
37:36 - to go in this video series but I wonder
37:38 - if I should have 17 topics of JavaScript
37:42 - yes 8 may be so let's think about that
37:51 - return reject I could also do okay thank
37:54 - you
37:55 - [Music]
37:56 - alright here we go
37:58 - Oh someone who's mentioned in the chat
38:06 - is mentioning Bluebird das is a nice
38:09 - promise library in JavaScript ok oh I
38:13 - muted am i muted no I'm not muted okay
38:18 - I'm not muted sorry
38:24 - [Music]
38:26 - all right it's time yes 8:00 I have
38:31 - never talked about es8 before but this
38:34 - video I'm going to look at something
38:36 - called a sink and a weight and it's part
38:40 - of es 8 which is es 2017 but anyway this
38:45 - is really what's often referred to as
38:49 - syntax sugar so basically we're not
38:54 - gonna get any new functionality but
38:57 - we're going to have a different way to
38:59 - write in asynchronous function that
39:01 - returns a promise that just makes things
39:04 - easier to follow and nicer I think I
39:07 - mean we we you can you can choose to
39:08 - decide whether it's better or not but I
39:10 - I think I like it it's new for me I
39:13 - haven't really worked with this until
39:15 - yesterday so let's see how this goes
39:17 - alright so just your review if you
39:19 - watched the previous video I wrote this
39:21 - function called delay this function
39:25 - called delay returns a new promise and
39:30 - uh-oh ID there's one mistake here so
39:33 - this isn't that big of a deal once the
39:35 - promise is rejected I really should stop
39:37 - and not do anything else but this code
39:39 - keeps going and calls this set timeout
39:41 - it won't resolve the promise but still
39:43 - doing this weird set timeout so I could
39:44 - there's some options here I could say
39:45 - like return I could also I think what
39:48 - I'm just gonna do for my the way I like
39:50 - to do things has just put an else here
39:52 - so I'm gonna add that so this function
39:54 - receives a number creates a promise o
39:57 - receives an argument if the receives a
40:00 - parameter if the parameter is not a
40:03 - number it rejects the promise and throws
40:06 - an error if it is it calls set timeout
40:09 - and resolve the promise that way I can
40:11 - say after a certain delay like 1,000
40:14 - milliseconds create a paragraph or catch
40:16 - the error so now what I'm gonna do is
40:18 - I'm gonna write delay es8 so here's the
40:25 - thing if a function returns a promise if
40:30 - a function returns a promise and what
40:33 - returns a promise the delay function
40:37 - returns a promise I'm gonna
40:40 - I'm gonna do something weird here so I'm
40:44 - gonna what I want to do is called delay
40:46 - es 8 so I'm just I'm writing a new
40:50 - function I'm gonna call that this is
40:51 - gonna stay exactly the same this is
40:54 - gonna stay exactly the same now this is
40:56 - really weird and you know it in the next
40:57 - video I'm gonna do this with the word
41:00 - Nick and gif V example that's gonna make
41:02 - way more sense I probably should just do
41:03 - that now but I'm already going down
41:05 - there you can skip to the next video if
41:07 - you want this is a little bit weird you
41:09 - almost want to forget pretend that delay
41:12 - isn't a function that I wrote but delay
41:15 - is a function that's part of some
41:17 - JavaScript library that I've imported
41:19 - and delay returns a promise so and I'm
41:25 - trying to think of a better name for
41:26 - this then delay es 8 but I guess I'll
41:28 - keep that right now so what this allows
41:32 - me to do right if a function this
41:36 - function I'm taking a long time to get
41:38 - to this returns a promise if that's the
41:42 - case I can suddenly use this keyword a
41:47 - wait meaning just wait for the promise
41:52 - to resolve it's almost like it's kind of
41:55 - like writing blocking code so I can say
41:58 - a wait delay time a wait delay time then
42:07 - I can return now this is why I really
42:11 - want to do this with the fetch function
42:14 - because there's so much more so this is
42:16 - like a very tiny little bit but this now
42:19 - should it's going to make much more
42:20 - sense when I actually have to do more
42:22 - steps don't do anything just awaiting
42:24 - that I don't do anything after but this
42:26 - now will automatically return profits
42:29 - now I'm missing an important piece let's
42:30 - just run this and see what happens I
42:32 - don't know if I like this video so far I
42:33 - might have to rethink this but I'm going
42:35 - I'm going I'm going with it let me
42:36 - refresh a wait is only valid in an a
42:40 - sync function oh dear
42:44 - so here's the thing the oh wait
42:48 - keyword kit just use it anywhere in your
42:50 - code like oh wait for this then do this
42:52 - then wait for this
42:53 - you have to write your own asynchronous
42:56 - function basically you have to write a
42:59 - function that returns a promise but
43:01 - rather than having to say new return
43:03 - return new promise the async keyword
43:07 - just says hey do all that stuff kind of
43:10 - invisibly behind the scenes for me so
43:12 - now if I come back over here and I tag
43:15 - this function basically attacking is the
43:19 - wrong word but I modify by giving this
43:22 - function a modify or async I say this is
43:24 - an asynchronous function it's going to
43:27 - execute asynchronously and and when and
43:30 - return a promise after all after however
43:32 - many calls to a weight that I want so
43:36 - now let me just hit refresh here oh
43:39 - shoot so now let me just hit refresh
43:53 - here and this works again so this now is
43:58 - an asynchronous function so this and
44:02 - that's the reason why this is exciting
44:05 - is I can start to do this so I can
44:13 - sequence a bunch of things that are
44:16 - asynchronous that and and and some of
44:20 - these might actually return something
44:22 - and this now instead of having to chain
44:26 - all these different promises with then
44:28 - dot n dot then dot then dot then catch
44:31 - this catch that I can just do it all in
44:33 - one function and that function will
44:35 - return a promise so I think I don't know
44:39 - how much I don't know if this was that
44:41 - useful to you hopefully gives you kind
44:43 - of a sense but I think a practical
44:44 - example will make a lot more sense so if
44:47 - you remember this particular example
44:51 - look at what I had to do here I had to
44:53 - fetch from Wernick then get the response
44:56 - converted to JSON then convert that then
44:58 - get the word out of that then go to
45:00 - another API I'm gonna rewrite all of
45:02 - this in an asynchronous function using
45:05 - await and I think
45:06 - that's going to help make things make
45:09 - more sense so that's what's gonna be in
45:11 - the next video okay see you there
45:13 - maybe maybe not Oh actually hold on no
45:20 - no maybe I should i that marilyn is is
45:22 - doing is is making a good point that I
45:28 - could actually like wait multiple things
45:36 - but I think that's I think maybe that
45:40 - sort of understood don't forget for
45:44 - await all right yeah bad example since
45:50 - delay doesn't return any value I agree I
45:52 - don't know what well you till you tell
45:53 - me do you think I should just cancel the
45:56 - idea of a separate tutorial
46:00 - I don't know I'm thinking the good news
46:08 - is I'm turning through this we won't we
46:11 - don't have too much further to go
46:19 - let's see people are giving me some
46:21 - feedback here so let me think about this
46:27 - does something else helped okay all
46:31 - right I think actually because I added
46:33 - this stuff in this is okay I think I'm
46:37 - gonna keep it
46:38 - don't cancel okay scripted types of love
46:41 - jazz
46:41 - I appreciate that feedback alright I'm
46:43 - gonna keep going so now what I want to
46:47 - do oh and you know what I forgot to make
46:52 - a I'm when I upload all this code I kind
46:57 - of forgot but that's okay
46:59 - alright so now what I'm gonna do is I'm
47:02 - gonna go to oh one promises oh three
47:07 - async/await and that's what I want to be
47:13 - editing now
47:30 - okay and here should be again just over
47:40 - and over again refresh okay that works
47:52 - for me
47:53 - water drip okay all right here we are
47:59 - now I'm ready for the next bit of this
48:06 - let me cycle the cameras
48:27 - all right here we are now I am going to
48:31 - once again in this video use a sink and
48:34 - a weight but I'm gonna use them in a
48:36 - much more practical way that will
48:39 - actually show you something hopefully
48:40 - that you might at some point want to do
48:42 - in your own javascript thing so back
48:45 - over here um this is what I made in the
48:47 - first part of this series about promises
48:49 - I made this particular JavaScript
48:52 - program it asks the word Nick API for a
48:56 - random word water-drip then once it
48:58 - receives that random word it goes and
49:00 - fetches a gift from the gif gif II API
49:03 - and shows that gift so every time i
49:05 - refresh and sometimes no gift comes back
49:08 - and i get an error which is good I feel
49:14 - like something was up weird with those
49:16 - gifts and I'm gonna regret showing those
49:19 - don't do I still have the PG thing in
49:21 - here no I still have it rated PG maybe I
49:23 - should just rated G let's try that let
49:31 - me come back I just like this kiss
49:41 - you really haven't whoa what the no no
49:45 - no no okay
49:46 - oh no no why I get such long
50:04 - alright whatever that is I have no idea
50:05 - let me come back all right I'm just
50:09 - gonna start this over
50:11 - hello alright in this video I am once
50:14 - again going to talk about a sink and a
50:18 - weight but in this case I'm gonna use a
50:20 - much more practical example so I'm gonna
50:22 - return back to what I did in the very
50:23 - first video about what is the promise
50:25 - and using fetch and I'm going to revisit
50:28 - this example so what this example does
50:30 - is it goes out to the word Nick API goes
50:34 - out it calls fetch on the word Nick API
50:35 - gets a random word once it has that
50:37 - random word it then requests a gift from
50:40 - the giffy API and we can see fetch
50:43 - returns a promise and so I've chained a
50:46 - whole lot of promises fetch from the
50:48 - word Nick API then we'd get a response
50:50 - convert the response to JSON then once
50:52 - you have the JSON put the word on the in
50:55 - the Dom then go to gif e then convert
50:58 - that to JSON then make an image and if
51:01 - there's any error anywhere on there log
51:02 - the error and I you know maybe I want to
51:04 - say console dot error error here all
51:06 - right so now I want to change I want to
51:09 - do this in a much nicer syntactically
51:13 - sugary way with async and await so how
51:17 - do I do that well the first thing that I
51:18 - want to do is just take all of this code
51:20 - and put it in a separate function so I'm
51:24 - gonna say whoa I don't know what this is
51:26 - like I'm gonna call this function word
51:28 - gif and I actually want to change a
51:32 - couple things here I what I want to do
51:34 - is I want to give it a because I
51:37 - actually this isn't important right now
51:39 - I'm gonna add this in the next video I
51:40 - want to show you what happens when you
51:42 - then need to call I have multiple
51:44 - promises but I'll come back to that so
51:45 - I'm just gonna call this function word
51:46 - gift so if I go in here and set up and
51:49 - call this word gift
51:51 - function we are gonna see some gifts and
51:58 - sometimes there's an error right okay so
52:00 - now I want to make this I want to use a
52:05 - weight instead in other words I want to
52:08 - say a weight fetch word Nick API and I'm
52:15 - gonna say let data equals weight so this
52:17 - is
52:17 - by the way I can do this now this is the
52:20 - idea instead of all of this stuff all I
52:23 - have to do and I guess I call this
52:25 - response I can actually just await the
52:27 - result instead of having to fetch and
52:29 - call then that's the new thing but
52:31 - remember if I'm writing a function that
52:33 - uses a weight I must make sure that I
52:36 - label that function async so that's my
52:39 - replacement here and then guess what
52:41 - look at this oh my god
52:42 - I can just say then a weight response
52:47 - JSON so all of this stuff that I had to
52:49 - chain with vens I don't need to do that
52:52 - anymore I could just write them line by
52:54 - line by line in sequence and though all
52:56 - wait this will happen asynchronously
52:57 - because I've made it an async function
53:00 - so I'm just gonna keep going here then
53:02 - I'm gonna send I'm gonna call this
53:03 - response one I don't love that but this
53:06 - for the sake of argument here I'm now
53:09 - gonna say this now a weight fetch gif ei
53:14 - PI plus that word then I'm gonna and I'm
53:16 - gonna call this JSON one then I'm gonna
53:18 - say let and these should all be constant
53:21 - and this is response one response to
53:25 - JSON so that's all the steps right and
53:28 - then and then I want to say let image
53:41 - equal JSON two dot and all of this stuff
53:47 - I want to get that gift and now and I'm
53:54 - gonna also say I think what I want to do
53:56 - here is say let word equal JSON one word
53:59 - these are the things I want to get
54:00 - during these steps so I'm gonna put
54:02 - words here and then I could just return
54:06 - at the very end an object with a word
54:10 - word image image yeah this should be
54:15 - like image URL probably so let's um
54:19 - let's call this and I guess I'm going to
54:23 - be I I guess I'm gonna let's let me just
54:28 - do this I think this will be simpler
54:30 - JSON
54:31 - one dot word so now I've made this a
54:35 - sinc function we're called word gif that
54:38 - oh wait oh wait oh wait oh wait oh wait
54:40 - just go through that all those steps and
54:42 - when it's done it returns an object with
54:45 - the data that it's retrieved guess what
54:50 - I don't need any of that anymore
54:52 - none of this and guess what this
54:56 - remember this is just syntax sugar to
55:00 - wrap all of this stuff in a promise so
55:03 - all I have to do now is say word gif dot
55:06 - then and then I can say results right
55:11 - what comes back an object with these
55:14 - things in it and I can say create P
55:17 - results dot word create image results
55:23 - dot image URL so then and then I can
55:30 - catch any error the same exact way
55:33 - console dot error error so look at this
55:39 - so look at this oh my goodness is this
55:41 - right could this possibly be right
55:43 - whoops I'm looking I'm looking sort of
55:49 - seems right sort of seems right all
55:52 - right here we go okay so I can't believe
55:57 - I just did this are you following me I
55:59 - guess I got lost in my own thoughts
56:01 - there let's just run this and see what
56:03 - happens
56:12 - cannot read property data of undefined
56:15 - sketch that you asked line 20 let's see
56:18 - what did I mess up oh hold on maybe
56:24 - actually oh this is right it works
56:26 - actually this it's just printing out the
56:31 - error it there was no image so I need to
56:33 - be better about handling the error which
56:35 - I'm gonna do in a second so let me
56:37 - change this they let me change the word
56:38 - Nick API to give me a word that's
56:41 - between three and five characters cuz so
56:44 - I really make sure that I get a gift
56:48 - okay well let's just see something is
56:53 - missed something's going wrong here
56:56 - let's take a look at json one huh no the
57:01 - word came in
57:02 - there's just no it's just no gift
57:03 - associated with any of these words
57:06 - really no there's got to be a gift
57:09 - associated with fried I think I might be
57:10 - missing something
57:12 - gif tapi let's let's look at let's look
57:21 - at json - oh look at this I just have
57:24 - this extra nonsense here uh I had that
57:30 - in there by accident I when I was recopy
57:32 - pasting things I made a mistake
57:34 - so hopefully that little debugging
57:35 - helped you sort of see what to figure
57:37 - out here it's nice though that it was
57:39 - this is so much easier to debug that if
57:41 - I had all that Venn stuff and all the
57:43 - functions in sinner like anonymous
57:46 - function stuff I can just really debug
57:48 - this much more easily now alright let's
57:49 - try this again there we go so we haven't
57:54 - gotten a gift yet so why not let's look
58:03 - at
58:05 - let's look at this now all right data
58:13 - index 0 images so data index 0 images
58:21 - fixed height small URL why why is that
58:25 - oh I just called it image Oh another
58:28 - mistake eventually results tough image
58:34 - so many little tiny errors because of
58:36 - all my naming weirdness okay here we go
58:39 - ready so I called it this variables
58:41 - image URL and that's what goes into the
58:43 - image property of the object I'm
58:45 - returning so that's the property need to
58:47 - get out here all right here we go
58:48 - feeling pretty good about this let me
58:52 - hit refresh
58:58 - all right we did it everybody so this
59:01 - was now an example of writing a function
59:04 - called word gift and what that function
59:07 - does is it asynchronously steps through
59:10 - all of these different asynchronous
59:12 - calls one at a time using the await
59:15 - keyword so that I can sequence them and
59:17 - when it's done I have the data that I
59:19 - want and I can send it back if I'm gonna
59:21 - write a separate just put a weight
59:23 - anywhere in my code
59:25 - I can't just suddenly put a weight in
59:26 - setup for example in p5 because I can't
59:29 - make setup an asynchronous function if I
59:31 - put a weight I've got to modify that
59:33 - function to make it a sync
59:34 - okay so what's left this is my chair I
59:39 - say that this is maybe a useful tutorial
59:41 - I don't know you tell me but what's left
59:44 - is I'm now going to show you what if I
59:47 - want to have 10 words and get all 10
59:52 - words and gifts all together and I want
59:54 - to have something happen when they're
59:55 - all done that's what I'm going to need
59:58 - promise all for and that will be in the
60:00 - next video and that's the last one of
60:02 - this series on promises and async and
60:05 - weight all right thanks
60:06 - wow I'm like a chef MA ok
60:16 - can't you use es6 enhanced object
60:19 - literal syntax there probably I could
60:28 - just do word yes I absolutely could do
60:30 - the create P and the create image stuff
60:33 - inside of here I just don't really want
60:36 - to I want that to be like a thing that's
60:39 - handled elsewhere just for kind of
60:42 - sanity sake like I want this function
60:44 - just to be about retrieving the data and
60:46 - not using the data but yes that's
60:48 - absolutely correct I don't know what an
60:51 - es6 enhanced object literal syntax is oh
60:55 - oh that's a thing you can do yeah I see
60:59 - I see
61:07 - okay Wow we actually might get to
61:13 - tensorflow j/s today because I have till
61:14 - 1 o'clock and I don't think promises
61:17 - about all it's gonna take very long now
61:19 - that I have this already let me look up
61:26 - what this is es6 enhanced object
61:31 - literals yes 5 although you could just
61:42 - do that wow that's really interesting I
61:45 - did not know that okay good to know
61:52 - maybe I'll mention that a fractional
61:58 - asks coding train you planning to start
62:01 - any open source GS related projects that
62:02 - all viewers can join and contribute to a
62:05 - small app or something so let me take a
62:08 - minute to answer this question before I
62:09 - go do promised all because this is a
62:11 - great question fractional so I have in
62:13 - the past and in fact you can go through
62:16 - if you go to code github.com slash
62:19 - coding train under I got it under
62:25 - repositories you can actually see there
62:28 - are a lot of repositories and all these
62:30 - are open source projects that people can
62:32 - contribute to this was done one that was
62:34 - done officially for processing community
62:35 - day as far as I know there's gonna be
62:37 - another processing community day next I
62:39 - believe probably in next January 2019
62:42 - but don't quote me on that
62:43 - there's the twelve O'Clock project which
62:45 - was a port of john midas twelve O'Clock
62:47 - design i there's an issue that i have
62:49 - which is that it takes time and work to
62:53 - manage an open-source project and i have
62:57 - in the past
62:59 - employed people to help manage github
63:02 - repositories i also have had people just
63:04 - volunteer to do it and there are plenty
63:07 - of volunteers like me I am so me and
63:10 - Neil's web and Alka ADA I'm mentioning
63:15 - just top off top of my head some
63:17 - contributors from the
63:18 - patron community who have done a lot of
63:20 - work a website being like kind of like a
63:22 - primary one that's you know has a lot of
63:24 - activity so I don't have a good system
63:26 - and but you can see this is what happens
63:27 - I have this github tutorial and on on
63:31 - github and I think a rainbow poem this
63:37 - has 313 open pull requests because it's
63:40 - a video tutorial about how to make a
63:41 - pull request and then I ask people to
63:44 - make the pull request and then you know
63:46 - for a while I was merging them and
63:47 - checking them every day and then I like
63:49 - I think actually I was doing this all
63:51 - the way up to last summer when I broke
63:52 - my elbow I might not I might this might
63:53 - have already happened way before last
63:55 - summer but I just like didn't do it for
63:56 - a few weeks and then once I came back to
63:59 - it I was just like oh I can't I can't
64:01 - it's too much so I don't I need a you
64:05 - know a way to vet people to to enforce
64:12 - the code of conduct and volunteer to
64:15 - manage some of these repos so anyway
64:17 - that's my example slightly bad example
64:20 - as none of the code subsequent to each
64:22 - oh wait runs async because each relies
64:24 - on the result of the previous oh wait so
64:25 - execution still held up until that
64:27 - results arrive writes David Smith that's
64:30 - interesting so David Smith are you
64:36 - saying that my example is slightly bad
64:49 - [Music]
64:51 - so I I oh and Madden ah sorry Meriden
64:56 - has if you're in the slack Channel I
64:57 - forgot your name it's only because I'm
64:59 - afraid of mispronouncing it yes I
65:08 - certainly could in the same way I mean
65:10 - one thing I don't want to go off to
65:12 - off-topic here but I not opposed to
65:16 - Valen for volunteering out stickers to
65:19 - people who help contribute a certain
65:21 - amount or even you know membership to
65:24 - the sponsor group or whatever as well
65:25 - but okay you should do something that
65:32 - can run while the request is running oh
65:34 - yes right so the idea here is that what
65:39 - I could do is you know I could show like
65:43 - a loading screen that then finishes once
65:45 - it's done so like I don't know that I
65:46 - need to do this but like like I may be
65:50 - what David Smith is suggesting if I say
65:52 - like loading is true and then if I
65:55 - actually had a draw loop if loading I
65:58 - would like draw a loading bar and then I
66:00 - would set loading equal false here and
66:03 - then I would show something else once
66:05 - it's loaded okay so but point points
66:11 - taken that I didn't go the next step
66:13 - maybe I'll mention that is an exercise
66:21 - okay all right let's do promised on all
66:43 - all right and then I could do a loading
66:47 - bar with promise dot all that would
66:49 - actually make sense does I have to do a
66:50 - lot of them but anyway okay it's a stage
67:03 - before the all makes sense means if you
67:05 - do away oh yeah I got a move off from
67:07 - the chat and to I'm very interested
67:09 - which is kind of the issue let me just
67:10 - check to make sure there's no
67:11 - emergencies going on here that I need to
67:16 - respond to Oh coding train tweeted I
67:18 - started a live stream on YouTube okay
67:25 - yet that is a good point about
67:27 - sequential asynchronous versus parallel
67:30 - asynchronous like if I wanted to do
67:33 - during but but I'm just I'm not gonna
67:36 - there's a lot more to this and I'm
67:38 - trying to stay in a friendly place all
67:42 - right
67:47 - all right welcome back this for the
67:50 - moment for the time being is the last
67:52 - video in my series on promises in es6
67:57 - and a sink and a weight in ES 8 now many
68:02 - people who are watching the live version
68:04 - of this you might be watching the
68:05 - recorded version or making lots of
68:07 - excellent comments about things that I'm
68:08 - not demonstrating for example what if I
68:11 - want things to happen like on the
68:13 - interim during various stages of this or
68:15 - why I want to show like a loading bar oh
68:17 - you know I want my asynchronous calls to
68:19 - be happening in parallel instead of like
68:21 - waiting for all this to be done and then
68:23 - just showing the results those are all
68:25 - really good questions so I'm trying to
68:27 - stay in sort of a simple place to
68:29 - demonstrate the basic idea but I would
68:31 - leave some of those as exercises to you
68:33 - and maybe I can come back and continue
68:34 - this series if there are some key things
68:36 - that I've missed so please give me your
68:38 - feedback in the comments but what I want
68:39 - to show in this particular video is what
68:42 - if I want to make multiple calls to word
68:44 - gift and I want them I want to be able
68:48 - to retain sort of something about the
68:50 - sequence of those calls so for example
68:53 - something I absolutely could do is I
68:55 - could just do this twice right and in
68:57 - fact I can still leave the catch at the
69:00 - end so I can actually do this I think
69:05 - right because this returns oh no I would
69:08 - have to say right this is a little bit
69:10 - goofy but I could say return word gif
69:14 - sorry word gif
69:16 - inside of here and then I could say then
69:22 - do another one right so this is just me
69:25 - doing - this is a little bit weird and
69:27 - I'm need to finish off the code here and
69:29 - I need a dot here so this is the way of
69:32 - chain this is kind of without the await
69:34 - thing this is the way of chaining
69:36 - promises so first I call word gif I show
69:40 - the results I returned the next call to
69:43 - word gift which is a new promise and
69:45 - then I show those results so let's run
69:46 - this and see if we get two up sorry I'm
69:49 - in a different place we see two and they
69:52 - happen one after the other and sometimes
69:54 - I'm gonna get an error if there's no
69:56 - gift okay now here's the thing I want to
69:59 - change something about the word
70:01 - gift function I want to make this have
70:03 - an argument numb and that's going to be
70:07 - the number of the number of sorry I'm
70:13 - spacing the number of letters that I
70:16 - want so I'm gonna go to the word Nick
70:19 - API and hmm I'm gonna take this out and
70:27 - I'm gonna say when I'm calling that I'm
70:31 - gonna say plus and so I'm just adding
70:34 - and um there's a nice way I should use
70:36 - those what's that called in es6 the
70:38 - string thing I'll have to make a video
70:39 - on that but I'm gonna do it my highly
70:41 - manual way I'm just adding in the
70:45 - minimum maximum length as a number so
70:48 - hopefully you can follow what I'm doing
70:49 - here because I'm all right
70:51 - so what I'm doing is I'm just modifying
70:53 - the call to the word Nick API to specify
70:56 - a number of characters so I'm gonna say
70:58 - word Nick for and then word Nick five
71:01 - we're sorry not word Nick word gift for
71:03 - word gift five so I should get a
71:05 - four-letter word and then a five letter
71:06 - word four letters all right I got an
71:12 - error four letters five letters okay so
71:16 - that this works for letters five letters
71:19 - in sequence so so why am I doing this so
71:22 - one thing I want to point out about
71:23 - sequence versus parallel I know I'm
71:25 - gonna get the promise that all
71:26 - interestingly enough what if I didn't
71:29 - chain these so let's take out the second
71:32 - one and just leave this first one and
71:37 - now I'm going to actually just
71:38 - completely duplicate this code and say
71:43 - I'm gonna say three and four three and
71:45 - four let's run this now so now they're
71:47 - not chained so I'm not waiting to do the
71:49 - second one until the first one comes
71:51 - back I'm just saying do these in
71:52 - parallel do both of them and when they
71:54 - both come back create the paragraphs in
71:57 - the image so let's look at this three
71:59 - four three four three three four so
72:03 - interesting enough let me let's I'm sort
72:06 - of surprised
72:07 - I want to just try now with a five as
72:09 - well I look at this for three
72:15 - so when they're happening in parallel
72:17 - what I'm saying just like do this do
72:19 - this do this just start them all I'm not
72:21 - necessarily going to be sure about the
72:22 - order that they come back in so one way
72:25 - to deal with that is to chain them like
72:27 - I did there's another way to deal with
72:29 - that if I want to say like wait till
72:31 - everything is done and then show the
72:33 - results and that's where promise dot all
72:36 - comes in
72:37 - so promise dot all requires an array so
72:42 - let me let's just so let's just pretend
72:45 - I have something like called promises
72:47 - and it has it's an array of three
72:52 - promises if there is an array of three
72:54 - promises I can write promise dot all
72:58 - pass in promises that array and then add
73:05 - sorry it's a then and catch so hold on
73:10 - I'm I'm this is hard I have to think
73:15 - about this while I'm doing it promise
73:16 - dot all promises then and this gets a
73:20 - function of what to do when it comes
73:22 - back and this gets a function which is
73:25 - pretty much you know if there is an
73:30 - error okay so I think this is the
73:33 - skeleton of what I want I have some
73:35 - syntax errors here maybe I you know
73:37 - semicolon looking looking looking oh
73:41 - well this should say error console.log
73:45 - err what's wrong here what am I missing
73:47 - ah this needs us there we go no so just
73:53 - one oh there's no yep what's wrong
74:14 - let's see now I know that's not the
74:17 - problem come I don't see what it is oh
74:21 - no this is right that's where that goes
74:26 - that's the clutch closing setup okay
74:31 - this is actually correct this curly
74:32 - bracket I don't know why I was I had a
74:34 - little brain malfunction there where I
74:35 - thought it was supposed to be there but
74:37 - this is actually closing setup so this
74:38 - is in the correct spot so this is the
74:40 - skeleton the idea is and by the way this
74:44 - this is really a problem
74:46 - this needs to have an argument the idea
74:48 - the skeleton is if I create an array of
74:50 - three promises I can say when all of the
74:53 - promises are complete and resolved give
74:56 - me the result of all those promises in
74:58 - an array of the same order as the
75:01 - original promises that's the idea of
75:03 - promise doll so what are these promises
75:06 - well they could be this word gift three
75:12 - word gift for and certainly I could
75:15 - create them in a loop or with separate
75:17 - variables but just to do this word gif
75:19 - five so this is the idea here I'm gonna
75:21 - give myself a little bit more space that
75:25 - what I can do here is just say hey I
75:27 - want to make three promises I want three
75:29 - word gift things when all of those are
75:32 - done show me the results and now this is
75:37 - I'm just gonna use a like a regular loop
75:40 - because instead of a four of loop I'm
75:43 - not sure why but that's how I feel right
75:45 - now so now I can do a loop to go through
75:47 - all the results and then I could say
75:50 - data equal results index I and then what
75:55 - do I want to do actually let's just put
75:59 - this in here the difference is I'm
76:00 - saying results index I results index I
76:04 - right
76:05 - so the idea here is now this is exactly
76:08 - what I had before starting took me a
76:10 - little while to get to this this is
76:11 - exactly what I had before the difference
76:14 - is I am putting all the promises in an
76:17 - array I'm not handling them with our
76:18 - each their own then or in separate
76:21 - blocks I'm just putting all the promises
76:23 - right word gift returns a promise
76:25 - remember this code of
76:27 - this I can totally delete now remember
76:32 - this async function we wrote the async
76:34 - function with awaits returns a promise
76:37 - when the promise is resolved you get
76:40 - this particular object so now when all
76:43 - of the promises are resolved then I have
76:45 - all of the resolutions in an array
76:47 - called results and I can go through them
76:49 - one at a time and they should be in the
76:51 - same exact order as the array original
76:54 - array did I do this correctly did I do
77:01 - this correctly
77:03 - ah shoot gets that to have slide 49 what
77:09 - did I do
77:10 - wine 49 am I even in the right yeah I'm
77:14 - in the right
77:15 - 49 hold on let's not I didn't save I
77:19 - didn't save save this is like wasted
77:28 - time in the video but
77:31 - well I'm 20 now should never use that
77:34 - drum sound effect oh I just have an
77:36 - extra curly bracket thank you
77:39 - there we go so when they're done all
77:42 - three of them happen at once and they're
77:45 - always in the right order three four
77:47 - five three four or five let's get an
77:51 - error I'm sure we'll get errors if we
77:54 - give longer words so let's just see what
78:01 - happens with an error didn't get it how
78:07 - are we not getting any errors there we
78:10 - go
78:11 - now interesting enough is that I really
78:12 - should stop because this video should be
78:14 - done but is there a way that I just want
78:16 - to look at that results array if I get
78:18 - an error whoops
78:22 - do I at least get yeah I guess I don't
78:27 - was time out for a second so here's the
78:32 - thing I guess if I want to handle these
78:34 - individually and have the ones that
78:35 - succeed succeed and the ones that fail
78:38 - fail I can't use the solution is that
78:40 - correct I need some help with this
78:46 - question twelve twenty I'm gonna have to
78:56 - get some water
79:02 - you don't get results on the air ever so
79:06 - if I wanted to do if I wanted to do like
79:12 - a hundred of them this doesn't really
79:13 - make sense right I would really want to
79:17 - sequence it not use promise dot all
79:19 - right okay so I think I would say oh I
79:28 - forgot to show try and catch in here but
79:30 - that's fine
79:32 - that could come another time
79:35 - all or nothing okay all right so I got
79:42 - an error so here's the thing this
79:44 - promise that all might not actually be
79:46 - such a great solution for this because
79:48 - promise dot all is all or nothing so if
79:50 - any of those promises have an error then
79:53 - I don't get any of the results so if
79:55 - what I wanted to do here was create a
79:56 - for loop you know let I equals zero I is
80:00 - less than 100 I plus plus and I have
80:03 - like let promises equal an array and
80:07 - then it's a promises dot push word gift
80:12 - you know for for I write this is now
80:18 - going to work and it should show me a
80:20 - hundred word gifts but if any one of
80:22 - those words come does not have a proper
80:24 - gift associated with it I'm not gonna
80:26 - get anything so let's see it's doing
80:29 - them all what this is actually a great
80:31 - exercise now for you to do a loading bar
80:33 - because this takes awhile and actually I
80:35 - got lucky I guess
80:37 - like all 100 of them worked but if I
80:39 - want to see them like appearing as they
80:41 - come in I want to do them more in
80:43 - parallel I want to sequence them but
80:44 - hopefully you've seen the range of ideas
80:46 - here so I'd encourage you to take this
80:48 - code play with it maybe back out of the
80:50 - promise tall thing what can you add a
80:52 - loading bar how can you like load them
80:54 - cleverly and try some other stuff with
80:57 - it
80:58 - and I also I think I'm forgetting I
81:01 - guess I'll do this in another video if I
81:03 - can remember I also can use try and
81:06 - catch inside of this async function if I
81:08 - want to handle the errors in a slightly
81:10 - more custom
81:11 - I think that's correct but if that's not
81:13 - correct
81:14 - eventually I'll make a video about try
81:16 - and catch alright thanks for watching
81:18 - this series on oops
81:25 - thanks for what them thanks for watching
81:28 - this series on promises I think I now
81:31 - have made a video tutorial that follows
81:33 - this list leave me your comments and
81:36 - your questions and all that sort of
81:37 - stuff and I'll see you again sometime
81:39 - goodbye
81:43 - alright everybody
81:50 - oh yes Matt this higher-order functions
81:56 - would certainly but I think that I I
81:59 - think I stayed in my lane here like I
82:01 - was very important feel like yesterday I
82:02 - went I didn't I was I went off target
82:06 - and I got to stay in my lane which was
82:08 - like the basics and the fundamental
82:09 - concepts and I think to the extent that
82:12 - it's helpful yeah right tension flow yes
82:20 - I know which is bad for me to start with
82:22 - this as I'm so first light I definitely
82:25 - need to get some water so if you don't
82:28 - mind I am going to leave you
82:40 - how would I was gonna like let this go
82:43 - for a long time but let me oh if I use a
82:49 - try-catch on the image URL you can use
82:51 - promised I'll return a no gif image
82:53 - right I see so in other words like this
83:05 - let me just try this catch because maybe
83:10 - I will
83:36 - so I just want to experiment this idea
83:42 - would this work
83:55 - I need to do this
84:06 - I'm just gonna leave this blank for a
84:07 - second
84:21 - ah
84:26 - interesting so that's a great so I
84:29 - should really do this I should add
84:31 - another video right to give me feedback
84:33 - about this what is there anything
84:36 - particularly weird about this that's
84:37 - like totally wrong
84:58 - so um um err in the chat the slack group
85:01 - asked how is threading handled in Jay s
85:03 - what I mean is what happens if variable
85:04 - is shared in more than one promised
85:06 - action here's the good news
85:07 - good news bad news there is no threading
85:09 - in Jay s is a single JavaScript a single
85:12 - threaded so there is no way to have that
85:14 - conflict and the way this asynchronous
85:16 - stuff works is there's a good article
85:18 - about that that people have been sharing
85:19 - somebody could share it in both chats
85:21 - that would be helpful is this how do
85:30 - people feel about this like should I
85:32 - write this in a last-ditch video that
85:35 - shows try and catch they don't just come
85:36 - back to it let me go get some water
85:38 - let me I'm gonna get some water I'm
85:44 - muting myself I'll be right back i muted
85:47 - I'm not mute
85:54 - I'll look in the slack Channel when I
85:56 - come back so if there was any good
85:58 - feedback about this code put it there
86:00 - and don't chat after it I see it
86:09 - [Music]
86:34 - [Music]
86:41 - [Music]
87:12 - [Music]
87:19 - [Music]
87:51 - [Music]
88:01 - [Music]
89:36 - [Music]
89:45 - [Music]
90:13 - okay here I am back so I've thought
90:16 - about this it's 12:30
90:19 - I only have till one o'clock and I don't
90:24 - think it's wise to try to do the layers
90:27 - API or the tensorflow j/s linear
90:30 - regression example with time pressure
90:33 - and also my brain is starting to melt a
90:36 - little bit so here's here's the thing
90:37 - I've good news bad news bad news is I'm
90:39 - gonna wrap up soon and I'm gonna not do
90:42 - tension flow yes right now the good news
90:44 - is I'm going to create an event for
90:48 - today and I will come back for an
90:50 - additional hour because I do technically
90:51 - I'm free between 4 & 5 you can hear me
90:56 - now right okay so let me do this right
90:58 - now otherwise awful things my mind about
91:01 - it after I ate so I'm going to creator
91:07 - studio and I'm going to and then I'm
91:13 - going to talk about the try-catch I'll
91:14 - do that before I go bro whoops so bring
91:24 - back the timer
91:26 - hold on I'm Andrea vents ah shoot live
91:32 - streaming events so there is an option
91:40 - to no new live event but I want to
91:46 - create a new event from the settings of
91:48 - the other one it's all that option once
91:51 - in YouTube maybe I can't do that one
91:56 - that's actually live
92:04 - [Music]
92:06 - uh-uh you know well I'm just gonna do it
92:15 - here okay
92:30 - a promise you today 4 p.m. eastern end
92:38 - time 5 p.m. I'm like a live streaming
92:44 - addicts here public advanced settings
92:49 - enable slow mode video according date
92:58 - language is English where's the one
93:10 - where it says like I guess I can fix
93:12 - this I Oh make this archive unlisted
93:14 - once it's finished yet ok so create
93:20 - event so I just I guess I can take off
93:29 - this back in five minutes thing so there
93:32 - should be now if I go to open up here
93:39 - YouTube the coding train I say 1 p.m. oh
93:48 - that's not right info and settings 4
93:56 - p.m. to 5 p.m. Eastern
93:58 - I guess maybe my YouTube thinks I'm in
94:03 - Pacific time because that's 1 p.m.
94:05 - Pacific time because it definitely says
94:07 - here in the page but anyway so I'm gonna
94:10 - come back so by the way in case you want
94:15 - to know to get a notification when this
94:17 - actually happens you should I guess this
94:20 - is me I'm logged in as myself so I can't
94:21 - click Subscribe but somewhere here you
94:24 - could click subscribe you could click
94:26 - Submit reminder there's a way for me to
94:29 - view as something but whatever let me
94:32 - just go to I'm just curious I'm just
94:34 - curious
94:34 - does this look like if I'm not logged in
94:40 - so yeah sponsor subscribe
94:44 - alarm bell and set reminder okay so this
94:47 - is gonna happen later now go back to the
94:54 - code let me go back to the slack channel
94:59 - okay so I'm gonna read through this
95:02 - comments only one bit of code has ever
95:05 - executed at once so in synchronous lines
95:07 - of code you can early that's that's the
95:08 - answer that other question Maddon writes
95:11 - I would put let imageurl equal no image
95:13 - and have the catch just for logging the
95:15 - error yes that's a good idea I like that
95:19 - you can also catch on the promise
95:20 - returned from word gif which might make
95:24 - more sense from an error catching
95:26 - standpoint oh you mean like catch it
95:34 - here like actually put a catch here and
95:41 - then not add it to the array but if that
95:45 - feels confusing also you need to do
95:48 - catch e with a catch without an argument
95:54 - so this I kind of like this idea also
96:14 - let me just try this oh right that's
96:24 - right that's the error okay like no
96:33 - image for this gift
96:43 - great
96:46 - okay so this makes sense I'm gonna do it
96:51 - this way for simplicity because I don't
96:53 - want to muck with this up here hey just
96:58 - in time coding garden with CJ is on now
97:02 - so when I believe you could go watch
97:03 - that
97:04 - so YouTube channel I subscribes you have
97:08 - some more water alright alright I'm
97:21 - gonna do it my way
97:22 - even though there are other ways of
97:24 - doing it so now what I want to do is go
97:28 - out of this and put it back maybe I'll
97:37 - mention the what was that thing called
97:39 - again
97:54 - what was that thing called when see this
97:58 - is why came to the tensorflow tasvideos
98:01 - now-enhanced object literal or something
98:03 - oh yeah
98:10 - is there a documentation of on the
98:12 - mozilla documentation
98:29 - yeah this is the enhanced
98:38 - okay all right all right
98:43 - Oh property is No
98:47 - yeah I agree I agree with that me I am
98:50 - Sania okay
98:53 - all right everybody I think I'm good
99:02 - right
99:11 - all right
99:14 - okay all right here we go everybody let
99:18 - me recycle you cycle the cameras this is
99:22 - gonna be the last thing for today
99:23 - because I have run out of steam and
99:25 - somehow I committed to coming back for
99:27 - an hour to do so somebody will spot
99:35 - maybe get a few new sponsors this
99:37 - afternoon for doing the extra effort
99:38 - okay
99:41 - Marin is light right about lying 28 now
99:51 - huh oh yeah thank you
99:57 - 26 got it okay
100:08 - all right
100:24 - oh it can't be zero let's do all right
100:34 - here we go I do I am feel sleepy I sell
100:40 - say I need to eat lunch I'm getting a
100:42 - little tired just when you thought it
100:48 - was safe to go back in the water the
100:51 - swim with the promises I don't know
100:52 - anyway I I do want to add something to
100:55 - this list here you're watching this so
100:57 - there's another video here so I want to
100:58 - talk just really quickly and show you
101:01 - one thing about try and catch so if you
101:03 - remember where I left off with promise
101:06 - all what I had is I have this particular
101:10 - and I kind of made some modifications in
101:12 - between the last video in this one but I
101:14 - have this particular JavaScript program
101:18 - using the p5 just library that makes a
101:21 - bunch of calls to word NIC and the giffy
101:24 - API and when everything is done and it's
101:27 - finished with all those calls they're
101:28 - all promises I get back some results and
101:32 - I place them all in the Dom with a
101:34 - paragraph element in the image elements
101:35 - now the problem here and again promises
101:39 - at all promise not all is not
101:40 - necessarily the best solution for this
101:41 - anyway but since I'm demonstrating it
101:44 - the main issue here is if any of those
101:46 - it's all or nothing if any single one of
101:48 - those has an error like there isn't a
101:50 - gif associated with that word available
101:51 - in the gif the API the whole thing
101:53 - doesn't do it it doesn't do anything so
101:55 - just about every time I run this I'm not
101:58 - getting anything now let me just make it
102:00 - work by let me just let me just get like
102:03 - three of them and let me just say
102:06 - they're all gonna be three letter words
102:07 - I think this will probably work right so
102:09 - I got three gifts with three three
102:11 - letter words so you can see that that
102:12 - worked but what I want is I want to I
102:16 - want it to work anyway and I want to see
102:18 - a two letter word a three letter word
102:19 - four or five six seven and so let's do
102:21 - that
102:21 - oh whoa it actually worked so that was
102:24 - the first time that worked but most of
102:27 - the time we're going to get an error so
102:28 - there's a way around this and it is not
102:32 - a way around this but there's another
102:34 - concept that could help here that's
102:35 - important which is try and catch
102:38 - so a place that I could use truck what I
102:40 - want to do is individually handle error
102:42 - messages differently and a way that I
102:45 - can do that here is is by I can I can
102:50 - handle the error message myself and not
102:52 - cause it to fail by using a try-catch
102:55 - here so the first thing I'm going to do
102:56 - is I'm actually just gonna say let image
102:58 - URL equal no so I'm gonna assume that
103:03 - I'm starting with the idea that there
103:04 - isn't an image URL then I'm going to try
103:09 - to get the image URL from from the sorry
103:18 - try to get the image your health I'm
103:20 - getting sleepy after making all these
103:21 - videos I'm gonna try to get the image
103:23 - URL from the data now it might not exist
103:26 - that's fine I'm just gonna try then I'm
103:29 - gonna return JSON one word and image URL
103:32 - now this will be no if this doesn't work
103:34 - so I can now go up whoops I can go back
103:37 - up in my code and I could say hey if
103:40 - results index I dot image equals null
103:44 - you know as long as it's not no do this
103:48 - so this now should let everything keep
103:51 - going and it will only just skip making
103:54 - an image where there wasn't one let's
103:56 - see if that works
103:58 - okay ah all right so fine I was thinking
104:02 - I could demonstrate this without a catch
104:04 - and then show you the catch
104:07 - next I thought there might be like a
104:08 - default catch but clearly there's not
104:10 - that makes sense right
104:11 - so and there's a finally thing too off
104:14 - to come back to that another time but
104:15 - what it's saying is like hey hey if
104:17 - you're gonna try something you I can try
104:20 - it but you got to tell me what to do if
104:22 - things go wrong my god you're in charge
104:24 - now
104:24 - like the the error isn't just going to
104:26 - be handled however it's going to be
104:27 - handled so I need to actually say catch
104:30 - and the catch actually gets inside of
104:33 - here
104:34 - it's like a function it's not an
104:36 - argument and I could call that error so
104:39 - I'm actually gonna catch that error I'm
104:41 - gonna say console.log no image found for
104:46 - JSON oops
104:47 - for a JSON one word
104:52 - and then I'm also going to just say
104:55 - console dot error
104:57 - I'm as well as print out that error as
105:00 - well and let's just call it er are just
105:01 - so we have things name differently so I
105:03 - think this is right now now what I'm
105:05 - doing is I'm saying hey let me uh try to
105:09 - grab the image URL if it doesn't exist
105:12 - just spit something out to the console
105:15 - and but keep going so let's see if this
105:17 - works now whoa
105:21 - right it didn't find it for any of them
105:25 - weird okay so I got a mistake somewhere
105:28 - because it only didn't find it for one
105:30 - of them
105:31 - I think I'm I've got something wrong
105:34 - somewhere Oh Oh what did I do here if
105:38 - yeah if this is like total nonsense this
105:42 - is what I need to eat lunch people I
105:43 - should not be making this video tutorial
105:45 - right now that was total nonsense what I
105:48 - wrote before what I'm saying is as long
105:50 - as the results image is not null not not
105:54 - image equal to no that makes no sense at
105:56 - all let's try that again
105:59 - great now they all unfortunately they
106:01 - all worked but you can see now work but
106:04 - no image found for fueler and we should
106:07 - see that fueler is still here but just
106:09 - no image is associated with it so no
106:11 - image found for fueler no image transfer
106:13 - whatever that word is and so now this
106:16 - goes through but I can sort of see what
106:18 - are the things where it doesn't work
106:20 - okay so I have talked to you about now I
106:23 - added this last little bit about try and
106:26 - catch here's the thing we're here
106:32 - because why while we're here in es6 and
106:34 - es8 land there is something called
106:38 - enhanced object initialization is that
106:42 - what it's called enhanced object
106:44 - literals in es6 so something that I can
106:49 - actually do here Oh weird I don't want
106:53 - to talk about it that's it's not it's
106:56 - not that put that in here it's fine
107:01 - yeah Oh too many people use try-catch
107:07 - rather than defensive programming which
107:08 - is lazy hmm weird added point I'm
107:15 - getting some interesting feedback on the
107:16 - chat that's things like people use
107:19 - try-catch too much and that try-catch is
107:23 - is useful but it should be used as a
107:24 - last resort if all your other stuff
107:26 - fails so again I'm not necessarily
107:28 - suggesting that the way that I've done
107:31 - this is the optimal way to create this
107:34 - word gift generator I mean ultimately if
107:37 - I wanted to do that I'd probably want to
107:38 - not just like have a hundred promises
107:41 - that all happen all at once I'd want to
107:43 - animate and sequence and make things
107:45 - interactive and maybe I type in a word
107:46 - all sorts of possibilities but I'm
107:48 - trying to show you the bits and pieces
107:49 - and features so the important thing here
107:52 - I think is that you can write an
107:55 - asynchronous function that returns a
107:57 - promise without ever saying promise by
108:00 - using the await keyword and the async
108:02 - keyword you can use promise all to
108:07 - execute some code when a whole lot of
108:09 - promises are finished and the results
108:11 - will always come in in the same orders
108:13 - the array and but you can also sequence
108:16 - processing promises with denne denne
108:19 - denne denne okay so there's some other
108:21 - things that I should do like I should
108:22 - use enhanced object literals which is
108:25 - like an es6 feature maybe I'll come back
108:26 - and talk about that in a video that's
108:28 - thing with the strings what's the thing
108:30 - with the string strings es6 literals
108:33 - there's like a thing template literals I
108:36 - should use that so so somebody remind me
108:40 - that's our video I'll talk about some
108:42 - other es6 features like template
108:44 - literals and enhanced object literals
108:46 - now just go look up those things on your
108:48 - own little tidbits here good bye
108:58 - alright alright okay I'm done it's 1250
109:10 - I'm going to answer a few questions that
109:15 - come in from the chat thank you to all
109:16 - the sponsors and patrons of the coding
109:19 - train this really motivates me like a
109:21 - numbers person so the funding also the
109:23 - funding helps but also just sort of like
109:25 - the number stuff appreciate it
109:29 - and I'm gonna come back for today so
109:35 - actually I'm gonna put up a little straw
109:37 - poll and just know I won't because I'm
109:39 - not gonna listen to it probably so the
109:41 - things I want to talk about the things
109:43 - that I want to do tensorflow das wise is
109:48 - I was gonna I think I'm not gonna do
109:52 - this today there's currently a bug in
109:53 - tensorflow GS associated with the from
109:56 - pixels so I think I'm not gonna come
109:58 - back and do that maybe what I'll do is
109:59 - I'll do the linear regression example
110:02 - and if I can do that and talk about the
110:06 - layers API I'll be happy I probably
110:10 - could only do I was going to just do
110:11 - linear regression with tensorflow das
110:14 - that's like a kind of baseline example
110:16 - lairs API the next thing would be X or
110:18 - an image classification and other stuff
110:20 - but I think that's what I'll start with
110:23 - [Music]
110:25 - what's what the best way to sponsor
110:28 - patreon or YouTube I don't know it's
110:32 - really up to you and you could always
110:33 - cancel one and switch the other one if
110:35 - you don't like it I mean probably in
110:37 - theory I would get more YouTube takes
110:39 - 30% patreon in theory doesn't take 30%
110:42 - but the fee structure there is gooliope
110:43 - ache to me so I don't say I'm knowing I
110:45 - almost like it better that it just
110:47 - clearly 30% even though that's kind of
110:49 - high so I don't know a YouTube thing is
110:52 - nice if you want to sponsor for more
110:54 - than $5 you have to use patreon if I
110:58 - also sponsor on YouTube as well as on
110:59 - patreon will that get me the $10 patreon
111:02 - rewards yes ma'am sure why not why not
111:06 - [Music]
111:07 - wait let's let's have an off line slack
111:12 - DM discussion about that but I'm happy
111:14 - to do ours fair how is ITP different
111:16 - from a normal University with some
111:18 - standard courses it's a great question
111:20 - from Joffrey so first of all let me just
111:24 - be clear ITP NYU dot edu
111:29 - there are two programs ITP two-year
111:32 - master's program ima four-year
111:34 - undergraduate program ima is a BFA
111:38 - Bachelor of Fine Arts ITP is some degree
111:40 - that I don't know what it never heard of
111:42 - them is it MPs master professional
111:45 - masters and probably something I think
111:47 - that's what it is
111:48 - so but I would say that and I can speak
111:52 - to more about ITP having been having
111:55 - been being an ITP alum and having worked
111:57 - at ITP for 15 years
112:02 - ima is a new program starting this fall
112:04 - uh I am a in many ways it's probably a
112:07 - bit more traditional in the academic
112:09 - sense as it's an undergraduate BFA
112:10 - program non-traditional probably in
112:13 - spirits and culture I would I would hope
112:15 - so I would say ITP is is a program about
112:22 - making more so than about sort of theory
112:27 - and it's very interdisciplinary and it's
112:32 - pass/fail and a lot of what to me the
112:35 - magic divide to be is not the courses
112:37 - that you're taking it's the community
112:39 - and being here I would encourage you to
112:40 - watch my night to be show videos which
112:42 - will give you a sense welcome new
112:45 - sponsor met in Thank You Mara and double
112:47 - sponsor welcome there are now only two
112:49 - double sponsors me I am so me and Marin
112:54 - no me Ames there's another bug in from
112:57 - pixels I don't want to get lost
113:01 - Oh thy song and they don't know I just
113:03 - paused it let me just look there's
113:05 - another let me just look really quickly
113:13 - there's another from pixels bug it's in
113:21 - just in point 11 yep it's this one this
113:30 - particular bug so this is uh from pixels
113:33 - bug in zero point eleven point one
113:37 - sensei oh one more question since a
113:41 - clock khlo asks hey Dan I wondered how
113:45 - you started coding train alright I've
113:48 - got an answer for this one Vimeo
113:51 - shipment so if you go look at this now
113:59 - deprecated Vimeo channel you will see a
114:03 - lot of the videos that I have on YouTube
114:06 - here so originally I was just making
114:08 - these videos and publishing them on
114:10 - Vimeo and I was really doing it just as
114:12 - for the courses that I was teaching and
114:13 - then putting them online hoping other
114:15 - people would watch and I should try to
114:17 - find somewhere I have an email from
114:19 - somebody who said could you upload your
114:20 - videos to YouTube I want to watch them
114:22 - on to X and I did that I think in like
114:25 - September 2015 and I had I just took all
114:29 - of the videos so I guess to 253 videos I
114:32 - had on Vimeo and I uploaded them all to
114:35 - YouTube and then I discovered that I
114:37 - could also livestream at some point so
114:40 - something that you can amuse yourself
114:42 - with watching is if you go to the coding
114:46 - train and under let's see playlists
114:53 - and uh unlisted live streams don't look
114:57 - at that one
115:04 - I shouldn't be lipo I shouldn't log into
115:06 - my YouTube live stream a live stream
115:12 - archive yeah this one live stream number
115:17 - one September 4th 2015 and this is me I
115:23 - think live streaming through Google
115:24 - Hangouts I think I don't I don't know
115:32 - but this is you can watch this right
115:35 - somewhere there's a live stream that I
115:37 - did through Google Hangouts that's not
115:38 - what this is this looks like it's
115:39 - actually live streamed live streamed but
115:42 - anyway so that's kind of a bit of the
115:45 - history it looks like there wasn't maybe
115:51 - another sponsor is that still just
115:52 - Manning and that's just Mary
115:55 - [Music]
116:02 - thank you everybody for tuning in I have
116:05 - a bunch of think buns web lunch and a
116:08 - bunch of things I have to do today was
116:10 - coming back at four things gonna be
116:11 - tricky but I think it's worth doing it
116:13 - will only be for an hour so if I can
116:15 - least do linear regression with
116:17 - centrifugal Jess how are you able to
116:19 - learn so much programming language I
116:21 - don't know I don't know that I know so
116:23 - much programming language I think it's
116:24 - just draw it to it doing and trying and
116:26 - actually teaching it as it helps me
116:28 - learn a lot okay thank you so much
116:32 - everybody
116:33 - I just just stop torturing me people I'm
116:42 - gonna go now I don't maybe I'm torturing
116:44 - people too much with playing that outro
116:46 - every time so I think maybe I'll maybe I
116:48 - won't do the outro especially since I'm
116:49 - coming back oh the coding train
116:51 - wallpaper I think on the coding train
117:00 - github website issues so yeah I mean it
117:08 - doesn't you have to dig into this issue
117:11 - and find maybe a link that I put
117:14 - somewhere in here
117:17 - oh yeah the files are on github but it
117:21 - should there should be like a more
117:22 - obvious place to download it but yeah so
117:24 - if you read through this issue you'll
117:26 - see where it is do I play fortnight well
117:29 - that's cool that's question I have not
117:31 - my son who is 9 plays fortnight he's up
117:38 - and that is that where everyone does the
117:40 - like pickle thing from which I can't do
117:42 - anyway I gotta go
117:45 - this live chat will be that this live
117:53 - chat the live chats are always archived
117:55 - so you come back and watch the the the
117:58 - archive of the stream the live chats
117:59 - play along okay I gotta go
118:00 - goodbye everybody thank you I will see
118:02 - you I think this afternoon for one hour

Cleaned transcript:

good morning again it's a second coding trained livestream of this week so I'm really gonna try to just jump right into things as opposed to what I did yesterday which will spend about 45 minutes talking arbitrarily about all sorts of random topics like schedule and that sort of thing I do have to say something important here which is that as many of you might are interested in I know I don't know whether there's many of you are just the loudest voices of you are interested in more tutorials on machine learning in particular in the browser with tensorflow yes I'm getting tonight and I'd hoped that that would be the primary topic of today but yesterday I started doing some tutorials on promises and I want to finish that sequence first because it will lay the foundation for certain things that I will need when making some examples with tensorflow das for example in particular the async keyword and the await keyword now something very strange has been going on in here in the studio and which I can't really explain because I I don't this room gets used by other people and of course other people should use this room and I try to as much time as I might have looking for my marker help other people make use of this room but usually I hear about it and also it's the summer so I didn't really think but there's a marker down here is this it strangely the whiteboard was a race actually had some other writing on and I erased it before I started livestreaming I'm just gonna check to make sure everything looks and sounds ok ding nobody seems to be complaining so yep alright so um I don't know who was in here yesterday if you're if you are watching this and you were in here yesterday please so let me make a list of what I want to cover today so yesterday I just did the basic you know what is a promise and I looked at it in the context of fetch fetch so using the fetch function to retrieve data from URL and resolving the promise when the data comes in that might not have been the best way to explain that but so be it so and then I went off off and off and off and off trying to explain promise dot all and so many things I got wrong but one is I just kept saying promises all and its promise not all number two is I got into this thing when I was like I have an array of promises and then I need to get a new array of promises from that array of promises and there was a whole extra sequence and then I used a loop and I tried to use the map function it was kind of a mess it was good it was really good for me I learned a lot and I also learned what people think about that the way that I code just often that's terrible why are you doing it that way and then there's some people who have some other feedback like yeah you know maybe it's not the best but it kind of explains it it works so anyway I'm gonna take a mulligan on that but I'm thought about this and I actually did some coding this morning before I came in here so what I'm gonna do next I'm gonna get to promise that all but next I'm going to look at how to make your own promise I promise you how to I wish I had I have my keyboard over here if I had really thought better of it I would have I would have come in with some promise related music maybe later how to make your own progress I think the joke I made yesterday is this still am I still on the board was that if I title a YouTube video or how to keep your promises maybe like people who are looking for selfhelp videos will come inside what is a promise fetch how to make you promise okay that's a weird thing that I wrote how to make your promise I don't know how I feel about that but I'll leave it there it's a little bit weird but fine then I want to look at a sink and a weight and this is really what's often referred to as syntax sugar so there will be no new concepts but there will be a less verbose way of a function that returns a promise using a sink and a weight and then the last piece of this I think will be promise dot all so this is my new plan if I can get through all of this today I'll be amazed if I could get through all this today and start to talk about yes the more that will be a miracle but have no fear whatever I don't get to I will get to next time I am here every week throughout the summer I did say yesterday that I was gonna do twice a week live streams and that's sort of true but then I started looking at the calendar and there's a lot going on and also um this here I said I was gonna get started writing the material now I'm just rambling but one thing I want to say is that I I think and I'm sorry for using my YouTube channel as a personal therapy session so but I'm realizing that there are some things I really want to accomplish this summer two of the these are the things I really want to I really want to have a second edition of this book out and a version of it within JavaScript so right now this book the nature of code is written with in Java using the processing programming environment I want to I have many updates that I've actually made to it but I just never gotten them onto the website and into the print version of the book so I want to make that happen I want to add a new chapter which is about neural evolution and then I want to once that's done have a JavaScript version in the book and if I'm livestreaming all the time I'll never have any time to work on this so number one is wants to help me with this you know on the one hand I just kind of need to go off and work on it but if you have some clever ideas or want to look through my various github repositories and help I'm open I'm open to that and then I think that I need to at some points limit myself as much to focus make sure I work so keep me honest here so this is the number one and the other thing is and let's see if I can get there now the new URL I haven't gotten HTTPS working yet so we need to get HTTPS working for this domain but ml v jf which is a a friendly machine learning library written in JavaScript built on top of tension float is um this is a project that I would like to spend a lot of time working on the good news about this is this has a whole group of people who are developing it and it's an open source project and you can see some of them here people who are contributing to this project so this is even if I broke my other elbow and stopped working this suffers this would still happen but the nature of codebook is something I really need to focus on a live stream working on it problem solved huh I don't know what that refers to all right looking at the chat it's spring yes it is oh you know the other thing I really should do is I really want to update my workflow this summer so I want to want to start playing around with using Visual Studio code I might use Adam here and there still I want to use I term it's a different terminal and I want to start to also also I'm gonna go back and start to do some very beginner videos again because it's been quite a while since I did my beginner learn to program from scratch videos and those needs some refreshing interfere interference something and why heat rights will you make some project Euler problems is it's pronounced Euler right it's very interesting thing check it out I am familiar with project Euler I would have fun doing that so that's not a bad idea Oh problem solved working on the book I mean oh livestream working on the book I get it me I am so Mia is making a good point that I could just live stream my work sessions it's not the worst idea definitely would consider that all right the stream title says async instead of async let me fix that let me fix that thank you for pointing that out where do I find that info and settings a wha a s why thank you whoops asy NZ okay thanks for all the nice cuff him I'm not really a vin per I wish I I wish I was like a vim person but you know me I'm not a vain person like mmm I didn't grow up programming and and so I never found my way to those kind of oldschool tools okay alright so thanks everyone saying hi in the chat appreciate all those messages I think I think I'm just gonna get started so um it's gonna be how to make your promise alright let's come I didn't buy new microphones and buy a new microphone I still haven't found the old microphone I think this one might be a little bit better though I know you tell me ok so let me close a bunch of stuff and promise you what is that song and if I do my like terrible singing I don't think I get a copyright violation mostly because I think it's only if it's like exactly the original track but also because I'm terribly out of tune it's an advantage to being out of tune let me move to the side desktop I want to be working on promises I'm gonna move this away let's pretend we never did this let's go to desktop promises let's put this away in the past it's in the past we're moving on to the future and we're gonna say oh promises make your own and I'm going to do this make your own quadrennial and then I'm going to I must have Adam about this open somewhere and check the slack channel mike is way better okay that's good to hear so maybe I'll just keep using this mic old mic is better okay well I could do a straw poll for that I'm not going to alright let's go here alright we don't need any of this stuff one thing is here's actually I shouldn't talk about this yet I have a maybe possibly almost tentative plan to also live stream from home that's a terrible idea I think but stay tuned I need to buy a new computer to do that though that's the issue and that is expensive but I'm waiting until WWDC is that what it's called and maybe they'll announce all the new stuff there so then I could just be like on Saturday morning at 9 a.m. we work on nature of God but of course it's complicated anyway all right so let's do this I'm gonna keep the p5 library base almost like as a security blanket I'm gonna just do something I just want to have this video start so I just want to have an example some example code ready to go and say hello is not defined oops I should say say hello all right um alright here we go oh this is really not good today that's a little better yeah cuz I can't really see it by the way if people have equipment suggest the good if people have equipment suggestions for things that I should get to improve this livestream I'm definitely a all ears and the nose and a mouth but I'd be happy for suggestions all right let me cycle the cameras so that we'll all right you know I'm also having this like lower back pain on this side that's not gonna mess up my lives here I don't think it's from I think it's probably from sitting thing is like I don't actually sit and work very much because the I just I'm either like standing and talking or I'm like running around like talking to people or doing stuff I don't actually sit and work at the VA but yesterday and the day before I was kind of doing that for hours at the time and I think maybe I need to get up get a sin Heiser lavell ear mic I think that's what my other thing was but I will check so I'm gonna answer one more question that I'm going to move on couche in the chat asks can we have a discord where we can discuss our problem the coding train so let me just quickly say a few words about community I while I'm here so there everyone watching the channel is welcome to selforganize and create their own forums or dis cords or reddit threads or whatever to talk about coding and and you're welcome to do that I am currently keeping a I have an official coding training slack channel but the best way I found to manage that right now is through a membership to patreon or sponsorship on the YouTube channel so I don't want it I've gone I've talked about it in several different videos already you find it but that's basically that's the one official then of course there are the official coding train github repositories and I do want to mention it I really am remiss in not having done this sooner but I just want to mention this III maybe I'll come back to this one it's more finalized but I also now have a code of conduct repo so this code of conduct applies to interactions in the YouTube chat YouTube comments slack channel github participation in the coding train community so if also what this isn't really is in the present is a copy of the p5.js code of conduct and so if anyone has experience with online communities and codes of conduct and wants to contribute and help make this better and help me do better managing the community I am again all ears and no you know I I need to get new lenses because even though I'm eyes I my lens is all scratched up right there and I can't actually see and I have tickets to go see solo this weekend and I if I don't have good glasses I'm not gonna enjoy the movie I don't know how this is gonna happen huh okay I got to get started so that's what I have to say all right hey we've got a new sponsor or Moebius thank you once again if you once again if you choose to sponsor this youtube channel on youtube you will get a big green thing in the chat that's this new sponsor and I will say huh new sponsor and then some appears next to your name why not subscribe today you will get a piece of graphics that appears next to your game why you would want that I don't know but hey it's possible for you alright thanks everybody that was my sponsored by the sponsors of the sponsored coding train sponsors all right let's move on Anabelle by the way the in it's also a thing this is one thing I really like to explore I know twitch has a lot of us but I think there are ways that I could hook stuff up into the chat to like various devices and things here and I have to go would be fun but I also could do tutorials about you know getting a light to turn on or something so if anybody has experiences with that in particular with YouTube streaming let me know ok hello welcome to a second video on promises now what I think if you watch the previous video I talked about the idea of a promise how to use a promise with this function called fetch which retrieves data from URL and a variety of other things and I looked at how you how you when the promise finishes how you use then to execute code and how you use catch if there's an error and you can chain promises if there's a bunch of things happening in sequence that's what I tried to look at so far in the previous video now I'm actually gonna take a step back here and in a way do something much simpler and probably less important but maybe will give some good background foundational knowledge so I'm going to talk about how to make your own promise and just in case maybe you're here for like how to keep your own how to keep your bra to keep your own profits and if you're here for like a selfhelp video unfortunately somewhat this is but maybe you want to learn about coding you might want to go to the beginner ones though it but maybe this could be the first video watching anyway how to make your own promise so let's come with me over here and so this is more relevant probably if you are the developer of a JavaScript library and you want to support promises in your library most of the stuff that I'm going to do will involve making use of other libraries that give me promises and I take those promises and hope that are kept and also I'm actually eventually gonna get to this like new I think these are a part of yes I think it's a 2793 and 402 it's not even a number that's anyway I think it's actually just es 7 I was trying to make a joke there um but I'm actually gonna use a sink and a weight await the key words to write an asynchronous function that returns a promise but I'm stepping through this stuff one step at a time so come back over here with me and so I've got a little p5 Sketch there's nothing about this that you need p5 for but it's my comfort object you know when you're small and you have your little lovey that you sleep with B 5 was like a little lovey that I code with and so what does this do this in setup I don't make a canvas I call set time out if you don't know what set time out is I've whole video about that um which executes a callback to say hello function 1000 milliseconds later and that makes a paragraph hello so let me go to the browser and you can see 1 second later boom hello and if I made this 5,000 or 6,000 you know 6 seconds later that hello is gonna pop up so this is the old the old way of doing it in JavaScript we have a function that's asynchronous that we pass a callback so what if I wanted to create a version of set timeout that returned a promise instead so I'm gonna write my own and again this is really I don't know that this is something you need to do in a program but this is gonna give us some background so I'm gonna write a function and I'm gonna this by the way is not my original idea sure you can find lots of tutorials that show this exact same scenario I probably read a few of them so I'm gonna write a function called delay I could also call it like set timeout promise just to be explicit about what I'm doing but I'm just gonna give it a different name called delay and what I want to do is I want that function to take an amount of time so that function is going to so really what I'm doing here is like just this to start set timeout so at first I've just like basically I mean this is completely insane what I've done but I've written my own function delay to just call set timeout and if I give that you know 1000 there we go but what I want to do is I want to do this I want to say delay 1000 dot then and I'm gonna use the arrow syntax here create P hello so again if the arrow syntax in is not familiar to you a new part of es6 javascript I have a video on that and then I'm gonna say catch console dot log error so I won't and I'm missing some stuff here this doesn't need semicolon there we go so this is what I want to do I want to write I want to write my code like this I want the delay function to delay for one second return a promise when it's done create that paragraph and if there was an error somehow console.log the error and yesterday someone was saying to me I should say console dot error or I could put the error in the in the Dom as well so okay so this is what I want to do now this won't work right now because it's gonna say cannot read property then of undefined because there's nothing there's no promise that's been returned so what I need is my delay function has to return a promise do I have to say new promise yes eight hold on timeout I shouldn't look at the chat in the middle of these tutorials oh and you can't even see this I went off the but is this is this is async away part of es eight or es seven uh who cares yes new promise catch console I know I don't need the error function for catch up I thought Gannon writes catch console player I thought that's a little gonna be a little bit confusing for beginners but okay let me come back oh it's yes 2017 which is es8 yes oh oh I'm gonna get flooded in the comments for that crap crud I mean I don't you know how I was using the giffy API and I like set the PG rating can I set the PG rating for myself all right yes the wrong camera I know I know I'm 20 seconds ahead of you in the future all right all right so I forgot I need to return a new promise so this is sort of I'm kind of getting closer let's just see what happens now well promise resolver is undefined so if I want to make my own promise how to make your own promise in addition to just promising something I have to provide pathways for resolution of that promise or rejection of that promise so when I create the new promise I have to say what happens when it's resolved what happens when it's rejected so first of all something that I could actually do here just for fun actually lo hmm I'm thinking here how did I do this well let me okay so what goes in here we need a function called deal with it till with promise resolve reject right oh this is so weird I'm totally blanking for a second I did this this morning I should go look at what I wrote just timeout for a second I just look at what I wrote this morning I have it on this new promise oh yeah yeah this is totally right ah I'm there okay I don't know why okay I'm doing it the right way I just got confused for a second okay then I want to pass that deal with promise function into the into the new promise so the deal with promise function is a function that I'm defining to handle resolution and rejection of the promise and that function is put is returned with this new promise but again even though I like to write no one's really gonna write it this way you're mostly gonna see it as an anonymous function written right in here and then you know if we're sticking with this es6 arrow notation we would see it look like this so now this is most likely what you're gonna see I want this delay function to return a new promise and I need to provide pathways for how I resolve and reject those promises so here's what I could do I'm gonna put this set timeout say hello time then I'm actually going to so uh sorry I need to do really don't look up my code because I'm usually figuring out I just want to look it up oh yes a timeout a function I just call resolve okay all right I'm sorry I got so confused let me just go back though the least I need to return anything just called oh right right right okay all right so what do I want to do what I want sorry is I want to call set timeout what I want to call set timeout with that amount of time so I'm going to use the call back but what is the call back the call back is actually just resolved so and I don't need this say hello function anymore because I'm gonna handle what I want to do I don't have a call back anymore I mean I handle what I want to do with the then so here what I want to do is say after this amount of time resolve the promise okay so let's just see if this works yeah it worked now here's the thing I might want to do more stuff in here and so this could actually be I could actually also write this like this as a function that executes to resolve and then other things could happen in here but I think that's besides the point I just want to recall resolve because all I'm doing is waiting for a certain amount of time but here's the thing what if I were to say also in addition to delay 1000 delay you know um promise sing like this doesn't make any sense right you can't pass a string to the delay function it doesn't know how much time it's supposed to wait so if I run this now it's sort of just worked weirdly but I want to make that an error I want to reject the promise if I don't get a number so one thing I can do here is I can say if there's a function actually in JavaScript I believe it's is n a n so is n a n stands for is not a number so if time is not a number I now want to reject that promise otherwise I want to resolve the promise after a certain amount of time so this is me taking the non promise function set which has a callback and wrapping it in a new function that handles it with a promise but better than just car so list this should work now in other words we should see we see this like undefined sketch ojs line 9 because but I should really give it an error so I should be able to say I believe reject new and pass an error new error you delay requires a valid number or something so if I do this and now let me just take this out here right so this now is the full promise of a 5 promise of a fight that's not a word delay function it returns a new promise which is a function that handles resolution and rejection and it's if it's if it's passed not a number it calls reject otherwise it just calls resolved after a certain amount of time so let's run this this is my this is me calling it now delay 1000 there we go hello and now if I say delay blah blah we should see error and you can see my error here delay requires a valid number so again this is more likely something you would be doing as the author of a JavaScript library and your library has asynchronous code that supports promises again though and I think I'm gonna do this in the next video I am going to actually completely rewrite that using and I got it wrong apologies to everyone so just to be clear this is es is so confusing so let me think about this yes 5 I don't know this stuff I'm gonna write this out that I'm gonna go check the chat and I'll come back and correct it so let me go backwards this async an 808 is from es 8 which is JavaScript es ECM CA or something MCA a specification 2017 this is es 8 es 6 which promises are a native of JavaScript as a yeah six is es2015 I think and then es5 I don't know when yet that's the kind of old JavaScript that with var so things that are in es6 are like var no sorry let I'm totally off the board here I don't think you can see what I'm writing hold on let me just or like let const arrow a yes five is you know var callbacks promises so jobs could visit the thing JavaScript is like and always changing an evolving language and as you know watching this video in the year 3122 none of this is relevant anymore but thanks for watching anyway about because you were here for a little self hip help video about how to keep your promises alright what was I talking saying I'm gonna come back I'm in the next video I probably got this wrong so in the next video check this video's description for a link to the next one I will come and correct anything here and talk about async and a weight thanks for watching be sure to reduce or return reject did I get something wrong here I'm looking at the chat yes latest yes did I get anything wrong about this ecmascript East ECMA script yeah script no just call the reject okay good great alright so now we are done with this so now I'm gonna talk about a sink and a weight everybody ready for that oh great okay all right you are still setting the time out in error case is all uhoh that's a little that is an error yeah so interesting no reject oh that's interesting but but it never it stops this it's the JavaScript program quits so I really should oh I see so I should technically have this here this is more correct yes I see so maybe I'll just mention that at the beginning of the next video okay I'm waiting for the chat to catch up with me to tell me if there's anything else important that I'm forgetting it's not even noon yet look how well we're doing oh you can only reject resolve once so it ignores the resolve after the reject but you are setting a weird time out right so this code still it it runs through this code but it won't actually call resolve because it's already been rejected I see so I probably this would actually make more sense to just write it this way I think this is the way that I would choose to write it okay yeah um egg Yi in the chat rightz Dan can you explain what is new and es8 no I mean not because I don't want to but I'm kind of catching up so that what I'm about to do is talk about a sink and a weight a weight I keep saying a weight because it's a sink a sink a weight a weight in a sink async/await but I will I'm at least gonna talk about that all right so let me at the beginning of the next video just fix this all right hold on one second here by the way matsya when you watch this I wonder and all of you watching at home I part or wherever you are I wonder if because I have on my channel if I go to youtube.com slash the coding train and I go here go here go here topics right so this kind of fits in let me look at this playlist so this is what I've got in this playlist so far let versus VAR Const arrow functions for of Ohio order functions but those aren't es6 are they are the higherorder functions es6 oh they existed before didn't they oh but maybe I'm using arrow functions with them anyway so this would make sense this stuff would make sense to go in this video series but I wonder if I should have 17 topics of JavaScript yes 8 may be so let's think about that return reject I could also do okay thank you alright here we go Oh someone who's mentioned in the chat is mentioning Bluebird das is a nice promise library in JavaScript ok oh I muted am i muted no I'm not muted okay I'm not muted sorry all right it's time yes 800 I have never talked about es8 before but this video I'm going to look at something called a sink and a weight and it's part of es 8 which is es 2017 but anyway this is really what's often referred to as syntax sugar so basically we're not gonna get any new functionality but we're going to have a different way to write in asynchronous function that returns a promise that just makes things easier to follow and nicer I think I mean we we you can you can choose to decide whether it's better or not but I I think I like it it's new for me I haven't really worked with this until yesterday so let's see how this goes alright so just your review if you watched the previous video I wrote this function called delay this function called delay returns a new promise and uhoh ID there's one mistake here so this isn't that big of a deal once the promise is rejected I really should stop and not do anything else but this code keeps going and calls this set timeout it won't resolve the promise but still doing this weird set timeout so I could there's some options here I could say like return I could also I think what I'm just gonna do for my the way I like to do things has just put an else here so I'm gonna add that so this function receives a number creates a promise o receives an argument if the receives a parameter if the parameter is not a number it rejects the promise and throws an error if it is it calls set timeout and resolve the promise that way I can say after a certain delay like 1,000 milliseconds create a paragraph or catch the error so now what I'm gonna do is I'm gonna write delay es8 so here's the thing if a function returns a promise if a function returns a promise and what returns a promise the delay function returns a promise I'm gonna I'm gonna do something weird here so I'm gonna what I want to do is called delay es 8 so I'm just I'm writing a new function I'm gonna call that this is gonna stay exactly the same this is gonna stay exactly the same now this is really weird and you know it in the next video I'm gonna do this with the word Nick and gif V example that's gonna make way more sense I probably should just do that now but I'm already going down there you can skip to the next video if you want this is a little bit weird you almost want to forget pretend that delay isn't a function that I wrote but delay is a function that's part of some JavaScript library that I've imported and delay returns a promise so and I'm trying to think of a better name for this then delay es 8 but I guess I'll keep that right now so what this allows me to do right if a function this function I'm taking a long time to get to this returns a promise if that's the case I can suddenly use this keyword a wait meaning just wait for the promise to resolve it's almost like it's kind of like writing blocking code so I can say a wait delay time a wait delay time then I can return now this is why I really want to do this with the fetch function because there's so much more so this is like a very tiny little bit but this now should it's going to make much more sense when I actually have to do more steps don't do anything just awaiting that I don't do anything after but this now will automatically return profits now I'm missing an important piece let's just run this and see what happens I don't know if I like this video so far I might have to rethink this but I'm going I'm going I'm going with it let me refresh a wait is only valid in an a sync function oh dear so here's the thing the oh wait keyword kit just use it anywhere in your code like oh wait for this then do this then wait for this you have to write your own asynchronous function basically you have to write a function that returns a promise but rather than having to say new return return new promise the async keyword just says hey do all that stuff kind of invisibly behind the scenes for me so now if I come back over here and I tag this function basically attacking is the wrong word but I modify by giving this function a modify or async I say this is an asynchronous function it's going to execute asynchronously and and when and return a promise after all after however many calls to a weight that I want so now let me just hit refresh here oh shoot so now let me just hit refresh here and this works again so this now is an asynchronous function so this and that's the reason why this is exciting is I can start to do this so I can sequence a bunch of things that are asynchronous that and and and some of these might actually return something and this now instead of having to chain all these different promises with then dot n dot then dot then dot then catch this catch that I can just do it all in one function and that function will return a promise so I think I don't know how much I don't know if this was that useful to you hopefully gives you kind of a sense but I think a practical example will make a lot more sense so if you remember this particular example look at what I had to do here I had to fetch from Wernick then get the response converted to JSON then convert that then get the word out of that then go to another API I'm gonna rewrite all of this in an asynchronous function using await and I think that's going to help make things make more sense so that's what's gonna be in the next video okay see you there maybe maybe not Oh actually hold on no no maybe I should i that marilyn is is doing is is making a good point that I could actually like wait multiple things but I think that's I think maybe that sort of understood don't forget for await all right yeah bad example since delay doesn't return any value I agree I don't know what well you till you tell me do you think I should just cancel the idea of a separate tutorial I don't know I'm thinking the good news is I'm turning through this we won't we don't have too much further to go let's see people are giving me some feedback here so let me think about this does something else helped okay all right I think actually because I added this stuff in this is okay I think I'm gonna keep it don't cancel okay scripted types of love jazz I appreciate that feedback alright I'm gonna keep going so now what I want to do oh and you know what I forgot to make a I'm when I upload all this code I kind of forgot but that's okay alright so now what I'm gonna do is I'm gonna go to oh one promises oh three async/await and that's what I want to be editing now okay and here should be again just over and over again refresh okay that works for me water drip okay all right here we are now I'm ready for the next bit of this let me cycle the cameras all right here we are now I am going to once again in this video use a sink and a weight but I'm gonna use them in a much more practical way that will actually show you something hopefully that you might at some point want to do in your own javascript thing so back over here um this is what I made in the first part of this series about promises I made this particular JavaScript program it asks the word Nick API for a random word waterdrip then once it receives that random word it goes and fetches a gift from the gif gif II API and shows that gift so every time i refresh and sometimes no gift comes back and i get an error which is good I feel like something was up weird with those gifts and I'm gonna regret showing those don't do I still have the PG thing in here no I still have it rated PG maybe I should just rated G let's try that let me come back I just like this kiss you really haven't whoa what the no no no no okay oh no no why I get such long alright whatever that is I have no idea let me come back all right I'm just gonna start this over hello alright in this video I am once again going to talk about a sink and a weight but in this case I'm gonna use a much more practical example so I'm gonna return back to what I did in the very first video about what is the promise and using fetch and I'm going to revisit this example so what this example does is it goes out to the word Nick API goes out it calls fetch on the word Nick API gets a random word once it has that random word it then requests a gift from the giffy API and we can see fetch returns a promise and so I've chained a whole lot of promises fetch from the word Nick API then we'd get a response convert the response to JSON then once you have the JSON put the word on the in the Dom then go to gif e then convert that to JSON then make an image and if there's any error anywhere on there log the error and I you know maybe I want to say console dot error error here all right so now I want to change I want to do this in a much nicer syntactically sugary way with async and await so how do I do that well the first thing that I want to do is just take all of this code and put it in a separate function so I'm gonna say whoa I don't know what this is like I'm gonna call this function word gif and I actually want to change a couple things here I what I want to do is I want to give it a because I actually this isn't important right now I'm gonna add this in the next video I want to show you what happens when you then need to call I have multiple promises but I'll come back to that so I'm just gonna call this function word gift so if I go in here and set up and call this word gift function we are gonna see some gifts and sometimes there's an error right okay so now I want to make this I want to use a weight instead in other words I want to say a weight fetch word Nick API and I'm gonna say let data equals weight so this is by the way I can do this now this is the idea instead of all of this stuff all I have to do and I guess I call this response I can actually just await the result instead of having to fetch and call then that's the new thing but remember if I'm writing a function that uses a weight I must make sure that I label that function async so that's my replacement here and then guess what look at this oh my god I can just say then a weight response JSON so all of this stuff that I had to chain with vens I don't need to do that anymore I could just write them line by line by line in sequence and though all wait this will happen asynchronously because I've made it an async function so I'm just gonna keep going here then I'm gonna send I'm gonna call this response one I don't love that but this for the sake of argument here I'm now gonna say this now a weight fetch gif ei PI plus that word then I'm gonna and I'm gonna call this JSON one then I'm gonna say let and these should all be constant and this is response one response to JSON so that's all the steps right and then and then I want to say let image equal JSON two dot and all of this stuff I want to get that gift and now and I'm gonna also say I think what I want to do here is say let word equal JSON one word these are the things I want to get during these steps so I'm gonna put words here and then I could just return at the very end an object with a word word image image yeah this should be like image URL probably so let's um let's call this and I guess I'm going to be I I guess I'm gonna let's let me just do this I think this will be simpler JSON one dot word so now I've made this a sinc function we're called word gif that oh wait oh wait oh wait oh wait oh wait just go through that all those steps and when it's done it returns an object with the data that it's retrieved guess what I don't need any of that anymore none of this and guess what this remember this is just syntax sugar to wrap all of this stuff in a promise so all I have to do now is say word gif dot then and then I can say results right what comes back an object with these things in it and I can say create P results dot word create image results dot image URL so then and then I can catch any error the same exact way console dot error error so look at this so look at this oh my goodness is this right could this possibly be right whoops I'm looking I'm looking sort of seems right sort of seems right all right here we go okay so I can't believe I just did this are you following me I guess I got lost in my own thoughts there let's just run this and see what happens cannot read property data of undefined sketch that you asked line 20 let's see what did I mess up oh hold on maybe actually oh this is right it works actually this it's just printing out the error it there was no image so I need to be better about handling the error which I'm gonna do in a second so let me change this they let me change the word Nick API to give me a word that's between three and five characters cuz so I really make sure that I get a gift okay well let's just see something is missed something's going wrong here let's take a look at json one huh no the word came in there's just no it's just no gift associated with any of these words really no there's got to be a gift associated with fried I think I might be missing something gif tapi let's let's look at let's look at json oh look at this I just have this extra nonsense here uh I had that in there by accident I when I was recopy pasting things I made a mistake so hopefully that little debugging helped you sort of see what to figure out here it's nice though that it was this is so much easier to debug that if I had all that Venn stuff and all the functions in sinner like anonymous function stuff I can just really debug this much more easily now alright let's try this again there we go so we haven't gotten a gift yet so why not let's look at let's look at this now all right data index 0 images so data index 0 images fixed height small URL why why is that oh I just called it image Oh another mistake eventually results tough image so many little tiny errors because of all my naming weirdness okay here we go ready so I called it this variables image URL and that's what goes into the image property of the object I'm returning so that's the property need to get out here all right here we go feeling pretty good about this let me hit refresh all right we did it everybody so this was now an example of writing a function called word gift and what that function does is it asynchronously steps through all of these different asynchronous calls one at a time using the await keyword so that I can sequence them and when it's done I have the data that I want and I can send it back if I'm gonna write a separate just put a weight anywhere in my code I can't just suddenly put a weight in setup for example in p5 because I can't make setup an asynchronous function if I put a weight I've got to modify that function to make it a sync okay so what's left this is my chair I say that this is maybe a useful tutorial I don't know you tell me but what's left is I'm now going to show you what if I want to have 10 words and get all 10 words and gifts all together and I want to have something happen when they're all done that's what I'm going to need promise all for and that will be in the next video and that's the last one of this series on promises and async and weight all right thanks wow I'm like a chef MA ok can't you use es6 enhanced object literal syntax there probably I could just do word yes I absolutely could do the create P and the create image stuff inside of here I just don't really want to I want that to be like a thing that's handled elsewhere just for kind of sanity sake like I want this function just to be about retrieving the data and not using the data but yes that's absolutely correct I don't know what an es6 enhanced object literal syntax is oh oh that's a thing you can do yeah I see I see okay Wow we actually might get to tensorflow j/s today because I have till 1 o'clock and I don't think promises about all it's gonna take very long now that I have this already let me look up what this is es6 enhanced object literals yes 5 although you could just do that wow that's really interesting I did not know that okay good to know maybe I'll mention that a fractional asks coding train you planning to start any open source GS related projects that all viewers can join and contribute to a small app or something so let me take a minute to answer this question before I go do promised all because this is a great question fractional so I have in the past and in fact you can go through if you go to code github.com slash coding train under I got it under repositories you can actually see there are a lot of repositories and all these are open source projects that people can contribute to this was done one that was done officially for processing community day as far as I know there's gonna be another processing community day next I believe probably in next January 2019 but don't quote me on that there's the twelve O'Clock project which was a port of john midas twelve O'Clock design i there's an issue that i have which is that it takes time and work to manage an opensource project and i have in the past employed people to help manage github repositories i also have had people just volunteer to do it and there are plenty of volunteers like me I am so me and Neil's web and Alka ADA I'm mentioning just top off top of my head some contributors from the patron community who have done a lot of work a website being like kind of like a primary one that's you know has a lot of activity so I don't have a good system and but you can see this is what happens I have this github tutorial and on on github and I think a rainbow poem this has 313 open pull requests because it's a video tutorial about how to make a pull request and then I ask people to make the pull request and then you know for a while I was merging them and checking them every day and then I like I think actually I was doing this all the way up to last summer when I broke my elbow I might not I might this might have already happened way before last summer but I just like didn't do it for a few weeks and then once I came back to it I was just like oh I can't I can't it's too much so I don't I need a you know a way to vet people to to enforce the code of conduct and volunteer to manage some of these repos so anyway that's my example slightly bad example as none of the code subsequent to each oh wait runs async because each relies on the result of the previous oh wait so execution still held up until that results arrive writes David Smith that's interesting so David Smith are you saying that my example is slightly bad so I I oh and Madden ah sorry Meriden has if you're in the slack Channel I forgot your name it's only because I'm afraid of mispronouncing it yes I certainly could in the same way I mean one thing I don't want to go off to offtopic here but I not opposed to Valen for volunteering out stickers to people who help contribute a certain amount or even you know membership to the sponsor group or whatever as well but okay you should do something that can run while the request is running oh yes right so the idea here is that what I could do is you know I could show like a loading screen that then finishes once it's done so like I don't know that I need to do this but like like I may be what David Smith is suggesting if I say like loading is true and then if I actually had a draw loop if loading I would like draw a loading bar and then I would set loading equal false here and then I would show something else once it's loaded okay so but point points taken that I didn't go the next step maybe I'll mention that is an exercise okay all right let's do promised on all all right and then I could do a loading bar with promise dot all that would actually make sense does I have to do a lot of them but anyway okay it's a stage before the all makes sense means if you do away oh yeah I got a move off from the chat and to I'm very interested which is kind of the issue let me just check to make sure there's no emergencies going on here that I need to respond to Oh coding train tweeted I started a live stream on YouTube okay yet that is a good point about sequential asynchronous versus parallel asynchronous like if I wanted to do during but but I'm just I'm not gonna there's a lot more to this and I'm trying to stay in a friendly place all right all right welcome back this for the moment for the time being is the last video in my series on promises in es6 and a sink and a weight in ES 8 now many people who are watching the live version of this you might be watching the recorded version or making lots of excellent comments about things that I'm not demonstrating for example what if I want things to happen like on the interim during various stages of this or why I want to show like a loading bar oh you know I want my asynchronous calls to be happening in parallel instead of like waiting for all this to be done and then just showing the results those are all really good questions so I'm trying to stay in sort of a simple place to demonstrate the basic idea but I would leave some of those as exercises to you and maybe I can come back and continue this series if there are some key things that I've missed so please give me your feedback in the comments but what I want to show in this particular video is what if I want to make multiple calls to word gift and I want them I want to be able to retain sort of something about the sequence of those calls so for example something I absolutely could do is I could just do this twice right and in fact I can still leave the catch at the end so I can actually do this I think right because this returns oh no I would have to say right this is a little bit goofy but I could say return word gif sorry word gif inside of here and then I could say then do another one right so this is just me doing this is a little bit weird and I'm need to finish off the code here and I need a dot here so this is the way of chain this is kind of without the await thing this is the way of chaining promises so first I call word gif I show the results I returned the next call to word gift which is a new promise and then I show those results so let's run this and see if we get two up sorry I'm in a different place we see two and they happen one after the other and sometimes I'm gonna get an error if there's no gift okay now here's the thing I want to change something about the word gift function I want to make this have an argument numb and that's going to be the number of the number of sorry I'm spacing the number of letters that I want so I'm gonna go to the word Nick API and hmm I'm gonna take this out and I'm gonna say when I'm calling that I'm gonna say plus and so I'm just adding and um there's a nice way I should use those what's that called in es6 the string thing I'll have to make a video on that but I'm gonna do it my highly manual way I'm just adding in the minimum maximum length as a number so hopefully you can follow what I'm doing here because I'm all right so what I'm doing is I'm just modifying the call to the word Nick API to specify a number of characters so I'm gonna say word Nick for and then word Nick five we're sorry not word Nick word gift for word gift five so I should get a fourletter word and then a five letter word four letters all right I got an error four letters five letters okay so that this works for letters five letters in sequence so so why am I doing this so one thing I want to point out about sequence versus parallel I know I'm gonna get the promise that all interestingly enough what if I didn't chain these so let's take out the second one and just leave this first one and now I'm going to actually just completely duplicate this code and say I'm gonna say three and four three and four let's run this now so now they're not chained so I'm not waiting to do the second one until the first one comes back I'm just saying do these in parallel do both of them and when they both come back create the paragraphs in the image so let's look at this three four three four three three four so interesting enough let me let's I'm sort of surprised I want to just try now with a five as well I look at this for three so when they're happening in parallel what I'm saying just like do this do this do this just start them all I'm not necessarily going to be sure about the order that they come back in so one way to deal with that is to chain them like I did there's another way to deal with that if I want to say like wait till everything is done and then show the results and that's where promise dot all comes in so promise dot all requires an array so let me let's just so let's just pretend I have something like called promises and it has it's an array of three promises if there is an array of three promises I can write promise dot all pass in promises that array and then add sorry it's a then and catch so hold on I'm I'm this is hard I have to think about this while I'm doing it promise dot all promises then and this gets a function of what to do when it comes back and this gets a function which is pretty much you know if there is an error okay so I think this is the skeleton of what I want I have some syntax errors here maybe I you know semicolon looking looking looking oh well this should say error console.log err what's wrong here what am I missing ah this needs us there we go no so just one oh there's no yep what's wrong let's see now I know that's not the problem come I don't see what it is oh no this is right that's where that goes that's the clutch closing setup okay this is actually correct this curly bracket I don't know why I was I had a little brain malfunction there where I thought it was supposed to be there but this is actually closing setup so this is in the correct spot so this is the skeleton the idea is and by the way this this is really a problem this needs to have an argument the idea the skeleton is if I create an array of three promises I can say when all of the promises are complete and resolved give me the result of all those promises in an array of the same order as the original promises that's the idea of promise doll so what are these promises well they could be this word gift three word gift for and certainly I could create them in a loop or with separate variables but just to do this word gif five so this is the idea here I'm gonna give myself a little bit more space that what I can do here is just say hey I want to make three promises I want three word gift things when all of those are done show me the results and now this is I'm just gonna use a like a regular loop because instead of a four of loop I'm not sure why but that's how I feel right now so now I can do a loop to go through all the results and then I could say data equal results index I and then what do I want to do actually let's just put this in here the difference is I'm saying results index I results index I right so the idea here is now this is exactly what I had before starting took me a little while to get to this this is exactly what I had before the difference is I am putting all the promises in an array I'm not handling them with our each their own then or in separate blocks I'm just putting all the promises right word gift returns a promise remember this code of this I can totally delete now remember this async function we wrote the async function with awaits returns a promise when the promise is resolved you get this particular object so now when all of the promises are resolved then I have all of the resolutions in an array called results and I can go through them one at a time and they should be in the same exact order as the array original array did I do this correctly did I do this correctly ah shoot gets that to have slide 49 what did I do wine 49 am I even in the right yeah I'm in the right 49 hold on let's not I didn't save I didn't save save this is like wasted time in the video but well I'm 20 now should never use that drum sound effect oh I just have an extra curly bracket thank you there we go so when they're done all three of them happen at once and they're always in the right order three four five three four or five let's get an error I'm sure we'll get errors if we give longer words so let's just see what happens with an error didn't get it how are we not getting any errors there we go now interesting enough is that I really should stop because this video should be done but is there a way that I just want to look at that results array if I get an error whoops do I at least get yeah I guess I don't was time out for a second so here's the thing I guess if I want to handle these individually and have the ones that succeed succeed and the ones that fail fail I can't use the solution is that correct I need some help with this question twelve twenty I'm gonna have to get some water you don't get results on the air ever so if I wanted to do if I wanted to do like a hundred of them this doesn't really make sense right I would really want to sequence it not use promise dot all right okay so I think I would say oh I forgot to show try and catch in here but that's fine that could come another time all or nothing okay all right so I got an error so here's the thing this promise that all might not actually be such a great solution for this because promise dot all is all or nothing so if any of those promises have an error then I don't get any of the results so if what I wanted to do here was create a for loop you know let I equals zero I is less than 100 I plus plus and I have like let promises equal an array and then it's a promises dot push word gift you know for for I write this is now going to work and it should show me a hundred word gifts but if any one of those words come does not have a proper gift associated with it I'm not gonna get anything so let's see it's doing them all what this is actually a great exercise now for you to do a loading bar because this takes awhile and actually I got lucky I guess like all 100 of them worked but if I want to see them like appearing as they come in I want to do them more in parallel I want to sequence them but hopefully you've seen the range of ideas here so I'd encourage you to take this code play with it maybe back out of the promise tall thing what can you add a loading bar how can you like load them cleverly and try some other stuff with it and I also I think I'm forgetting I guess I'll do this in another video if I can remember I also can use try and catch inside of this async function if I want to handle the errors in a slightly more custom I think that's correct but if that's not correct eventually I'll make a video about try and catch alright thanks for watching this series on oops thanks for what them thanks for watching this series on promises I think I now have made a video tutorial that follows this list leave me your comments and your questions and all that sort of stuff and I'll see you again sometime goodbye alright everybody oh yes Matt this higherorder functions would certainly but I think that I I think I stayed in my lane here like I was very important feel like yesterday I went I didn't I was I went off target and I got to stay in my lane which was like the basics and the fundamental concepts and I think to the extent that it's helpful yeah right tension flow yes I know which is bad for me to start with this as I'm so first light I definitely need to get some water so if you don't mind I am going to leave you how would I was gonna like let this go for a long time but let me oh if I use a trycatch on the image URL you can use promised I'll return a no gif image right I see so in other words like this let me just try this catch because maybe I will so I just want to experiment this idea would this work I need to do this I'm just gonna leave this blank for a second ah interesting so that's a great so I should really do this I should add another video right to give me feedback about this what is there anything particularly weird about this that's like totally wrong so um um err in the chat the slack group asked how is threading handled in Jay s what I mean is what happens if variable is shared in more than one promised action here's the good news good news bad news there is no threading in Jay s is a single JavaScript a single threaded so there is no way to have that conflict and the way this asynchronous stuff works is there's a good article about that that people have been sharing somebody could share it in both chats that would be helpful is this how do people feel about this like should I write this in a lastditch video that shows try and catch they don't just come back to it let me go get some water let me I'm gonna get some water I'm muting myself I'll be right back i muted I'm not mute I'll look in the slack Channel when I come back so if there was any good feedback about this code put it there and don't chat after it I see it okay here I am back so I've thought about this it's 1230 I only have till one o'clock and I don't think it's wise to try to do the layers API or the tensorflow j/s linear regression example with time pressure and also my brain is starting to melt a little bit so here's here's the thing I've good news bad news bad news is I'm gonna wrap up soon and I'm gonna not do tension flow yes right now the good news is I'm going to create an event for today and I will come back for an additional hour because I do technically I'm free between 4 & 5 you can hear me now right okay so let me do this right now otherwise awful things my mind about it after I ate so I'm going to creator studio and I'm going to and then I'm going to talk about the trycatch I'll do that before I go bro whoops so bring back the timer hold on I'm Andrea vents ah shoot live streaming events so there is an option to no new live event but I want to create a new event from the settings of the other one it's all that option once in YouTube maybe I can't do that one that's actually live uhuh you know well I'm just gonna do it here okay a promise you today 4 p.m. eastern end time 5 p.m. I'm like a live streaming addicts here public advanced settings enable slow mode video according date language is English where's the one where it says like I guess I can fix this I Oh make this archive unlisted once it's finished yet ok so create event so I just I guess I can take off this back in five minutes thing so there should be now if I go to open up here YouTube the coding train I say 1 p.m. oh that's not right info and settings 4 p.m. to 5 p.m. Eastern I guess maybe my YouTube thinks I'm in Pacific time because that's 1 p.m. Pacific time because it definitely says here in the page but anyway so I'm gonna come back so by the way in case you want to know to get a notification when this actually happens you should I guess this is me I'm logged in as myself so I can't click Subscribe but somewhere here you could click subscribe you could click Submit reminder there's a way for me to view as something but whatever let me just go to I'm just curious I'm just curious does this look like if I'm not logged in so yeah sponsor subscribe alarm bell and set reminder okay so this is gonna happen later now go back to the code let me go back to the slack channel okay so I'm gonna read through this comments only one bit of code has ever executed at once so in synchronous lines of code you can early that's that's the answer that other question Maddon writes I would put let imageurl equal no image and have the catch just for logging the error yes that's a good idea I like that you can also catch on the promise returned from word gif which might make more sense from an error catching standpoint oh you mean like catch it here like actually put a catch here and then not add it to the array but if that feels confusing also you need to do catch e with a catch without an argument so this I kind of like this idea also let me just try this oh right that's right that's the error okay like no image for this gift great okay so this makes sense I'm gonna do it this way for simplicity because I don't want to muck with this up here hey just in time coding garden with CJ is on now so when I believe you could go watch that so YouTube channel I subscribes you have some more water alright alright I'm gonna do it my way even though there are other ways of doing it so now what I want to do is go out of this and put it back maybe I'll mention the what was that thing called again what was that thing called when see this is why came to the tensorflow tasvideos nowenhanced object literal or something oh yeah is there a documentation of on the mozilla documentation yeah this is the enhanced okay all right all right Oh property is No yeah I agree I agree with that me I am Sania okay all right everybody I think I'm good right all right okay all right here we go everybody let me recycle you cycle the cameras this is gonna be the last thing for today because I have run out of steam and somehow I committed to coming back for an hour to do so somebody will spot maybe get a few new sponsors this afternoon for doing the extra effort okay Marin is light right about lying 28 now huh oh yeah thank you 26 got it okay all right oh it can't be zero let's do all right here we go I do I am feel sleepy I sell say I need to eat lunch I'm getting a little tired just when you thought it was safe to go back in the water the swim with the promises I don't know anyway I I do want to add something to this list here you're watching this so there's another video here so I want to talk just really quickly and show you one thing about try and catch so if you remember where I left off with promise all what I had is I have this particular and I kind of made some modifications in between the last video in this one but I have this particular JavaScript program using the p5 just library that makes a bunch of calls to word NIC and the giffy API and when everything is done and it's finished with all those calls they're all promises I get back some results and I place them all in the Dom with a paragraph element in the image elements now the problem here and again promises at all promise not all is not necessarily the best solution for this anyway but since I'm demonstrating it the main issue here is if any of those it's all or nothing if any single one of those has an error like there isn't a gif associated with that word available in the gif the API the whole thing doesn't do it it doesn't do anything so just about every time I run this I'm not getting anything now let me just make it work by let me just let me just get like three of them and let me just say they're all gonna be three letter words I think this will probably work right so I got three gifts with three three letter words so you can see that that worked but what I want is I want to I want it to work anyway and I want to see a two letter word a three letter word four or five six seven and so let's do that oh whoa it actually worked so that was the first time that worked but most of the time we're going to get an error so there's a way around this and it is not a way around this but there's another concept that could help here that's important which is try and catch so a place that I could use truck what I want to do is individually handle error messages differently and a way that I can do that here is is by I can I can handle the error message myself and not cause it to fail by using a trycatch here so the first thing I'm going to do is I'm actually just gonna say let image URL equal no so I'm gonna assume that I'm starting with the idea that there isn't an image URL then I'm going to try to get the image URL from from the sorry try to get the image your health I'm getting sleepy after making all these videos I'm gonna try to get the image URL from the data now it might not exist that's fine I'm just gonna try then I'm gonna return JSON one word and image URL now this will be no if this doesn't work so I can now go up whoops I can go back up in my code and I could say hey if results index I dot image equals null you know as long as it's not no do this so this now should let everything keep going and it will only just skip making an image where there wasn't one let's see if that works okay ah all right so fine I was thinking I could demonstrate this without a catch and then show you the catch next I thought there might be like a default catch but clearly there's not that makes sense right so and there's a finally thing too off to come back to that another time but what it's saying is like hey hey if you're gonna try something you I can try it but you got to tell me what to do if things go wrong my god you're in charge now like the the error isn't just going to be handled however it's going to be handled so I need to actually say catch and the catch actually gets inside of here it's like a function it's not an argument and I could call that error so I'm actually gonna catch that error I'm gonna say console.log no image found for JSON oops for a JSON one word and then I'm also going to just say console dot error I'm as well as print out that error as well and let's just call it er are just so we have things name differently so I think this is right now now what I'm doing is I'm saying hey let me uh try to grab the image URL if it doesn't exist just spit something out to the console and but keep going so let's see if this works now whoa right it didn't find it for any of them weird okay so I got a mistake somewhere because it only didn't find it for one of them I think I'm I've got something wrong somewhere Oh Oh what did I do here if yeah if this is like total nonsense this is what I need to eat lunch people I should not be making this video tutorial right now that was total nonsense what I wrote before what I'm saying is as long as the results image is not null not not image equal to no that makes no sense at all let's try that again great now they all unfortunately they all worked but you can see now work but no image found for fueler and we should see that fueler is still here but just no image is associated with it so no image found for fueler no image transfer whatever that word is and so now this goes through but I can sort of see what are the things where it doesn't work okay so I have talked to you about now I added this last little bit about try and catch here's the thing we're here because why while we're here in es6 and es8 land there is something called enhanced object initialization is that what it's called enhanced object literals in es6 so something that I can actually do here Oh weird I don't want to talk about it that's it's not it's not that put that in here it's fine yeah Oh too many people use trycatch rather than defensive programming which is lazy hmm weird added point I'm getting some interesting feedback on the chat that's things like people use trycatch too much and that trycatch is is useful but it should be used as a last resort if all your other stuff fails so again I'm not necessarily suggesting that the way that I've done this is the optimal way to create this word gift generator I mean ultimately if I wanted to do that I'd probably want to not just like have a hundred promises that all happen all at once I'd want to animate and sequence and make things interactive and maybe I type in a word all sorts of possibilities but I'm trying to show you the bits and pieces and features so the important thing here I think is that you can write an asynchronous function that returns a promise without ever saying promise by using the await keyword and the async keyword you can use promise all to execute some code when a whole lot of promises are finished and the results will always come in in the same orders the array and but you can also sequence processing promises with denne denne denne denne okay so there's some other things that I should do like I should use enhanced object literals which is like an es6 feature maybe I'll come back and talk about that in a video that's thing with the strings what's the thing with the string strings es6 literals there's like a thing template literals I should use that so so somebody remind me that's our video I'll talk about some other es6 features like template literals and enhanced object literals now just go look up those things on your own little tidbits here good bye alright alright okay I'm done it's 1250 I'm going to answer a few questions that come in from the chat thank you to all the sponsors and patrons of the coding train this really motivates me like a numbers person so the funding also the funding helps but also just sort of like the number stuff appreciate it and I'm gonna come back for today so actually I'm gonna put up a little straw poll and just know I won't because I'm not gonna listen to it probably so the things I want to talk about the things that I want to do tensorflow das wise is I was gonna I think I'm not gonna do this today there's currently a bug in tensorflow GS associated with the from pixels so I think I'm not gonna come back and do that maybe what I'll do is I'll do the linear regression example and if I can do that and talk about the layers API I'll be happy I probably could only do I was going to just do linear regression with tensorflow das that's like a kind of baseline example lairs API the next thing would be X or an image classification and other stuff but I think that's what I'll start with what's what the best way to sponsor patreon or YouTube I don't know it's really up to you and you could always cancel one and switch the other one if you don't like it I mean probably in theory I would get more YouTube takes 30% patreon in theory doesn't take 30% but the fee structure there is gooliope ache to me so I don't say I'm knowing I almost like it better that it just clearly 30% even though that's kind of high so I don't know a YouTube thing is nice if you want to sponsor for more than $5 you have to use patreon if I also sponsor on YouTube as well as on patreon will that get me the $10 patreon rewards yes ma'am sure why not why not wait let's let's have an off line slack DM discussion about that but I'm happy to do ours fair how is ITP different from a normal University with some standard courses it's a great question from Joffrey so first of all let me just be clear ITP NYU dot edu there are two programs ITP twoyear master's program ima fouryear undergraduate program ima is a BFA Bachelor of Fine Arts ITP is some degree that I don't know what it never heard of them is it MPs master professional masters and probably something I think that's what it is so but I would say that and I can speak to more about ITP having been having been being an ITP alum and having worked at ITP for 15 years ima is a new program starting this fall uh I am a in many ways it's probably a bit more traditional in the academic sense as it's an undergraduate BFA program nontraditional probably in spirits and culture I would I would hope so I would say ITP is is a program about making more so than about sort of theory and it's very interdisciplinary and it's pass/fail and a lot of what to me the magic divide to be is not the courses that you're taking it's the community and being here I would encourage you to watch my night to be show videos which will give you a sense welcome new sponsor met in Thank You Mara and double sponsor welcome there are now only two double sponsors me I am so me and Marin no me Ames there's another bug in from pixels I don't want to get lost Oh thy song and they don't know I just paused it let me just look there's another let me just look really quickly there's another from pixels bug it's in just in point 11 yep it's this one this particular bug so this is uh from pixels bug in zero point eleven point one sensei oh one more question since a clock khlo asks hey Dan I wondered how you started coding train alright I've got an answer for this one Vimeo shipment so if you go look at this now deprecated Vimeo channel you will see a lot of the videos that I have on YouTube here so originally I was just making these videos and publishing them on Vimeo and I was really doing it just as for the courses that I was teaching and then putting them online hoping other people would watch and I should try to find somewhere I have an email from somebody who said could you upload your videos to YouTube I want to watch them on to X and I did that I think in like September 2015 and I had I just took all of the videos so I guess to 253 videos I had on Vimeo and I uploaded them all to YouTube and then I discovered that I could also livestream at some point so something that you can amuse yourself with watching is if you go to the coding train and under let's see playlists and uh unlisted live streams don't look at that one I shouldn't be lipo I shouldn't log into my YouTube live stream a live stream archive yeah this one live stream number one September 4th 2015 and this is me I think live streaming through Google Hangouts I think I don't I don't know but this is you can watch this right somewhere there's a live stream that I did through Google Hangouts that's not what this is this looks like it's actually live streamed live streamed but anyway so that's kind of a bit of the history it looks like there wasn't maybe another sponsor is that still just Manning and that's just Mary thank you everybody for tuning in I have a bunch of think buns web lunch and a bunch of things I have to do today was coming back at four things gonna be tricky but I think it's worth doing it will only be for an hour so if I can least do linear regression with centrifugal Jess how are you able to learn so much programming language I don't know I don't know that I know so much programming language I think it's just draw it to it doing and trying and actually teaching it as it helps me learn a lot okay thank you so much everybody I just just stop torturing me people I'm gonna go now I don't maybe I'm torturing people too much with playing that outro every time so I think maybe I'll maybe I won't do the outro especially since I'm coming back oh the coding train wallpaper I think on the coding train github website issues so yeah I mean it doesn't you have to dig into this issue and find maybe a link that I put somewhere in here oh yeah the files are on github but it should there should be like a more obvious place to download it but yeah so if you read through this issue you'll see where it is do I play fortnight well that's cool that's question I have not my son who is 9 plays fortnight he's up and that is that where everyone does the like pickle thing from which I can't do anyway I gotta go this live chat will be that this live chat the live chats are always archived so you come back and watch the the the archive of the stream the live chats play along okay I gotta go goodbye everybody thank you I will see you I think this afternoon for one hour
