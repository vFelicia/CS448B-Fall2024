With timestamps:

00:00 - hello and welcome to a video tutorial
00:02 - about programming something called the
00:04 - super shape oh look at that formula in
00:06 - I'm going to do this in JavaScript going
00:08 - to use the p5 GS formula this is a topic
00:11 - which is a continuation of a previous
00:13 - video that I made about the super
00:15 - ellipse I'm essentially going to use the
00:17 - exact same code I had in my previous
00:18 - Super ellipse video and turn it into
00:20 - this other more elaborate formula called
00:22 - the super shape the super shape is in a
00:25 - this is Paul Bork's website I'll include
00:28 - a link to in the description this is a
00:29 - page documenting how to do this from
00:31 - 2002 and the equation is something based
00:34 - on Johan G Elise Elise I'm not sure if I
00:37 - pronounced that correctly and you know
00:39 - this is these are formulas that are
00:40 - designed to try to simulate and create
00:42 - different kinds of natural forms and
00:44 - eventually if I am strong enough if I'm
00:46 - courageous enough if I can manage it I'm
00:50 - going to in the next video finally look
00:52 - at the super shape in 3d which allow us
00:55 - to start creating forms that look like
00:56 - this sort of stuff but at first we just
00:58 - want to see if we can make these 2d like
01:01 - forms with different parameters for this
01:03 - particular formula so let me come back
01:05 - and here is the formula okay so what's
01:08 - the core idea here let me come back to
01:10 - the whiteboard here for a second the
01:11 - core idea if you've forgotten is that I
01:14 - have this idea of a polar coordinate
01:15 - system so I have some are and some angle
01:20 - and actually what I'm going to do is I'm
01:23 - going to iterate over every possible
01:25 - angle from zero all the way to 2pi and
01:28 - actually you can generate interesting
01:29 - super shapes
01:30 - by doing this multiple times so going
01:32 - like from 0 to 2pi like six times and
01:35 - what I'm going to do is with this angle
01:36 - I need some way of calculating R so that
01:39 - for example if one of the super shapes
01:42 - might look something like a flower that
01:44 - R is changing based on the angle in a
01:47 - way like it's oscillate almost like you
01:48 - can just sort of do this with a sine
01:49 - wave like you could say you know R
01:51 - equals sine of the angle which is
01:53 - actually giving me of like a backwards
01:56 - headache because there's so much to
01:57 - brafton but anyway you get the idea I
01:58 - need to calculate R from theta and in
02:00 - fact that's what this formula is doing
02:03 - it's saying 1 over R equals all of this
02:06 - stuff and Phi being the angle or I'm
02:09 - saying data that's I think that's the
02:10 - Greek letter Phi or fee or I don't know
02:11 - everything's going wrong today
02:13 - and you know I can flip this one of our
02:15 - articles that so articles that so I need
02:16 - to figure out a way of getting this
02:18 - formula in my code it's going to be a
02:20 - bit awkward I'm sure going to make some
02:21 - mistakes but the other thing that's
02:22 - really important here is that looking
02:24 - deeper into this formula there are four
02:26 - constants Oh a and B by the way ah okay
02:30 - so they're actually more than four
02:31 - constants there's like six I think
02:34 - there's a B and that's not six yeah it
02:37 - is a BM n1 n2 and n3 so based on those
02:40 - values you are going to get a variety of
02:44 - different of different results and you
02:48 - can see here if I look at this page you
02:51 - can see with different values of M we've
02:52 - got these different results so hopefully
02:54 - I'm going to do this correctly and we'll
02:56 - see the results that are in that that
02:59 - are on this page so let's go to the
03:01 - let's go to the code and this is
03:03 - actually just the code now that I picked
03:04 - up from the super ellipse and you can
03:07 - see I'm running this here this is the
03:09 - super lips which is just changing a one
03:10 - particular parameter to create these
03:12 - different kinds of ellipsoid patterns
03:14 - and I am now going to I actually don't
03:17 - need this particular function and I'm
03:20 - good the thing that I'm going to leave
03:22 - in here which is the most important
03:23 - thing is this so ultimately what I need
03:29 - is begin shape and shape every single
03:32 - angle and I need to get an X and a y and
03:34 - I need to draw that vertex so this I
03:36 - need and then I'm not going to worry
03:39 - about the slider thing right now we'll
03:40 - come back to that later what I also need
03:42 - is I need to have a bunch of constants
03:44 - so I'm going to say I have n1 I'm going
03:49 - to have n2 I'm going to have n 3 I'm
03:51 - going to have em and I'm gonna have a
03:53 - and I'm going to have B now for
03:55 - simplicity right now let's make
03:57 - everything one and obviously you know
04:01 - you can declare and initialize variables
04:02 - all in one line and all sorts of fancy
04:04 - ways but I'm just going to be very
04:06 - explicit about it those are all of my
04:08 - constants so I need to go back and forth
04:11 - I need two screens really because I
04:12 - really need to refer to this formula
04:14 - quite a bit but I think what might make
04:16 - things nice and actually you know Paul
04:18 - Bork has code for doing this here and I
04:21 - guess I could check it if I get confused
04:22 - or wrong something wrong but what I
04:25 - think would be useful to do is to
04:26 - create a function I'm going to do that
04:28 - up here and I'm going to create a
04:30 - function called a super shape and it
04:33 - gets an angle so this function receives
04:36 - an angle maybe I should call it theta a
04:38 - for angle doesn't matter so it receives
04:40 - an angle and it needs to return back R
04:45 - because that's what I'm trying to
04:47 - calculate so at the end I want to return
04:49 - R so let's see somehow and I want to
04:54 - save our R equals one so let's just say
04:56 - right now let's say this is my function
04:59 - and then what I want to do here in this
05:01 - code is I want to say I want to say VAR
05:07 - r equals super shape of that angle and
05:12 - then I need to say x equals what R times
05:15 - cosine of that angle y equals R times
05:20 - sine of that angle and if I wanted to I
05:25 - could also like scale these up by some
05:27 - arbitrary value and I'm going to make
05:29 - that a separate variable like radius
05:32 - just to scale them up and I could
05:34 - probably build that I know I'm doing
05:35 - something like ridiculous right now but
05:36 - I'll fix this later because it's
05:39 - returning one so the idea is I should
05:41 - just see a circle okay great so this is
05:45 - working the idea here is that I have a
05:47 - function that takes the angle and sends
05:50 - back a value and then what sends back
05:52 - that value I do it for every I do it for
05:54 - every angle and I get this circle now of
05:57 - course I'm getting a perfect circle
05:58 - because no matter what the angle comes
05:59 - in I'm just returning one and now what I
06:02 - need to do is I need to get that super
06:03 - shape formula in here so let's try to do
06:05 - that together and hopefully we get
06:07 - something that looks about right so I'm
06:09 - going to go back to Paul Bork's site one
06:10 - more time and so the bunch of things I
06:12 - need to calculate one is one divided by
06:14 - a times cosine of M divided by four
06:17 - times theta Who am I really gonna be
06:20 - able to remember this ah I'm going to
06:24 - call this I needed some like I'll call
06:28 - this part one one oh I did something
06:32 - terrible so there's a constant called a
06:34 - so this I don't want this I want I want
06:36 - this to be calling all this theta so one
06:39 - divided by theta
06:42 - times cosine of n divided by four times
06:49 - that angle that's not theta that's one
06:55 - divided by a times cosine of theta which
06:58 - is the angle times M divided by four
07:01 - okay so that's this thing in here so
07:05 - then I need to take the absolute value
07:07 - of that and then I need to raise it to
07:13 - an exponent which is n 2 which is 2 the
07:17 - N tooth power that's part one now I need
07:21 - to do part two which will probably be
07:23 - somewhat similar part two is 1 divided
07:25 - by B times sine of the same thing to the
07:27 - N 3 power
07:29 - ok so what did I say 1 divided by B and
07:31 - sign those are the only things that
07:33 - change and then this obviously needs to
07:35 - be part 2 part 2 this is n 3 part 2 part
07:38 - 2 ok so now I've got that formula there
07:41 - in two different parts by the way this I
07:42 - think is a useful thing to do you guys
07:43 - this big elaborate formula rather than
07:45 - to try to write it all out one line of
07:47 - code so divide it into parts
07:49 - ok so we got that now let's see ok now I
07:52 - need to add them together so I'll say
07:55 - part 3 equals part 1 plus part 2 then I
08:01 - need to take the square root of it so I
08:02 - can probably do that just in this line
08:04 - of code square root right and then I
08:08 - need to multiply it by n1 so I just need
08:10 - to say and 1 times that so that's that
08:15 - so though in this year to the part 3
08:16 - with no space so this is mostly like me
08:19 - just like getting that formula in here
08:20 - ok I think we're pretty good shape I
08:22 - think I'm doing this right please please
08:24 - now what else oh 1 divided by R equals
08:28 - all this so with 1 divided by R equals
08:30 - all this R should equal 1 divided by all
08:33 - of this right I can just flip that so I
08:35 - should be able to say and actually I
08:38 - don't need this VAR r equals I should
08:41 - just be able to say return oh there's a
08:43 - dangerous thing that could happen here
08:44 - return 1 divided by part 3 now I'm a
08:49 - little bit afraid of a / of a divided by
08:53 - 0
08:54 - problem so I think I better put
08:56 - something in here like if part three
08:58 - equals 0 then return 0 I don't know if
09:01 - that's correct
09:02 - look it I'm oh end wait this is not n
09:05 - times wasn't there something no that is
09:08 - what yeah maybe this is right okay so I
09:10 - think I got this right and maybe there's
09:12 - something else that I did slightly wrong
09:13 - but but let's see if this is good enough
09:15 - I have a working version of this I can
09:17 - always check it if this doesn't seem to
09:18 - work right okay here we go so let's just
09:21 - see what happens now if I actually let
09:23 - this be and let this go oh and by the
09:26 - way I had this like radius thing equal
09:32 - to 100 I don't need I don't need a
09:34 - separate variable okay so let's now run
09:36 - this hmm oh look at that
09:40 - that's promising so I got something that
09:42 - looks right but it's a slightly
09:43 - different slightly different shape so
09:45 - let's actually go in let's go to Paul
09:48 - Bork's page and how do I get over here
09:53 - let's look at okay let's look at an
09:56 - example with N 1 equals n 2 equals n 300
09:59 - if M is 0 I should get a circle let's at
10:01 - least test that so let me make M equals
10:04 - 0 ah perfect
10:08 - I got a circle so I think I did the code
10:09 - correctly so now if I go back here and I
10:13 - look at with all these equal to 1 but if
10:15 - I have M equal to 5 I should get that
10:17 - shape so let me change M equal to 5 and
10:21 - run it again close do I have something
10:27 - wrong it looks a little bit different
10:31 - that's a little distressing pause back
10:38 - now I figured out the error so I had a
10:39 - major error actually I completely read
10:41 - the formula incorrectly this is not the
10:44 - square root of all of this times N 1
10:46 - this is simple this this the way that
10:49 - this is written means it's the N 1 root
10:51 - of all of that added together in other
10:54 - words if N 1 is equal to 2 then it's the
10:56 - square root so I really need to fix that
10:58 - in my code so let me do that briefly
11:00 - really quickly so instead of N 1 times
11:03 - the square root I want to use the power
11:05 - function power takes something
11:08 - and if this is like to the N once power
11:10 - part one plus part two to the n ones
11:13 - power if I say 1 divided by n 1 here
11:16 - this is part 1 plus this is the N 1 root
11:19 - of part 1 plus part 2 so I can do that
11:23 - and then if I do it again we can see aha
11:27 - now I have the correct shape but you'll
11:28 - notice something look at this there's
11:29 - like a weird like mistake here and you
11:31 - can see it doesn't look exactly right
11:33 - here so one thing I've done very not
11:35 - carefully and let me fix that here is
11:37 - that I just decided in my loop down here
11:40 - to just say let me look at every single
11:42 - angle start at 0 go to 2pi go up by 0.1
11:44 - well that's not very thoughtful
11:46 - because 2pi isn't necessarily perfectly
11:48 - divisible by 0.1 and it's not that many
11:50 - points I could say 0.01 and I'm going to
11:52 - increase the resolution of what I'm
11:54 - drawing much more you can see now it
11:56 - looks much more like that super shape
11:57 - but I probably would make sense for me
11:59 - to be a bit more thoughtful of it
12:01 - thoughtful and say something like I want
12:03 - to have a total of 500 points and then I
12:05 - want to have the increment the angle
12:07 - increment to be 2pi divided by that
12:11 - total and then I'm going to always go up
12:13 - by that increment so if I just do it
12:16 - that way then I could say this is 500
12:18 - points that's what I get with 500 points
12:20 - and I could say something like oh whoops
12:22 - I only want 10 points and if you see
12:25 - that you're going to see it still looks
12:28 - right but there's only actually 10
12:29 - points in there and it's you there's
12:30 - much less curvature because it's drawing
12:32 - big straight lines between some of those
12:34 - points but this is I think a better way
12:35 - of being able to control this you know
12:37 - with a hundred points looks like this so
12:39 - like what how many points do I really
12:41 - need to get kind of like a good
12:42 - resolution on that shape and when I do
12:43 - this in 3d we'll need some sort of mesh
12:45 - I hope I can do it 3d ok so let's look
12:48 - at this now now I have this slider down
12:49 - here let's at least do something like
12:51 - tie that slider to a particular value so
12:53 - for example what if I were to say so one
12:56 - thing I want to do here is one thing
12:57 - that's interesting is that I want my I
12:59 - want actually the increment values of m
13:02 - to be incrementing by 1 so I want to
13:06 - start with an M of 5 and I want to go
13:08 - between 0 and 10 and then what I want to
13:12 - do here in the draw loop is just say M
13:15 - equals slider value so we can just sort
13:19 - of make sure things are
13:20 - value make sure things are kind of
13:23 - working you can see now you can see as I
13:27 - move the slider that shape is changing
13:28 - and we're seeing we're getting exactly
13:31 - what is written are depicted on this
13:34 - Paul Bork website so you can see and
13:36 - this for I should get that ms5 is that
13:38 - now we can see okay what are these
13:40 - shapes here what if I have n 1 equals n
13:43 - 2 equals n 3 equals point 3 now I could
13:47 - change all of these and obviously it
13:48 - could be much smarter about not having
13:50 - three separate variables that if they're
13:53 - all the same value and now we can see
13:55 - what does this look like you can see now
13:58 - I have this particular kind of shape and
14:00 - you can see what it's doing as I change
14:01 - that value of M so I'm going to stop
14:03 - here because I could continue doing this
14:05 - forever I could say well let's make
14:06 - sliders for all the different variables
14:07 - let's try all of these different
14:08 - possibilities let's see can we get all
14:10 - of these different shapes so this is
14:12 - what I would encourage you to do and by
14:13 - the way you don't so tie them to sliders
14:15 - try tying those variables to like a sine
14:17 - function you know I could do that really
14:20 - really quickly right now like for
14:21 - example if I have I'm going to have a
14:23 - variable called like oscillate oscillate
14:27 - equals zero and I'm going to say M
14:29 - equals a you know map sine of oscillate
14:33 - which goes between negative 1 and 1 to
14:35 - some value between 0 and 10 and then I'm
14:38 - going to say oscillate goes up by 0.1
14:42 - and I'm going to refresh this you can
14:45 - see now this is happening it's happening
14:46 - very quickly but automatically so let's
14:49 - let's make it go up much more slowly
14:51 - and you can see here what's happening is
14:53 - it's kind of like changing that value on
14:54 - the fly and the shape is kind of like
14:56 - wrapping around itself unfurling and
14:58 - furling so there's a lot of
14:59 - possibilities here I could add HSV and
15:01 - make it a rainbow but I encourage you to
15:02 - explore this play around let's see what
15:04 - types of forms you can get and
15:06 - eventually at some point I will get to
15:09 - that next video and try to do this in 3d
15:11 - to get a lot more elaborate forms okay
15:13 - thanks for watching this particular
15:15 - video and I look forward to seeing you
15:18 - in another one in the future
15:19 - bye bye

Cleaned transcript:

hello and welcome to a video tutorial about programming something called the super shape oh look at that formula in I'm going to do this in JavaScript going to use the p5 GS formula this is a topic which is a continuation of a previous video that I made about the super ellipse I'm essentially going to use the exact same code I had in my previous Super ellipse video and turn it into this other more elaborate formula called the super shape the super shape is in a this is Paul Bork's website I'll include a link to in the description this is a page documenting how to do this from 2002 and the equation is something based on Johan G Elise Elise I'm not sure if I pronounced that correctly and you know this is these are formulas that are designed to try to simulate and create different kinds of natural forms and eventually if I am strong enough if I'm courageous enough if I can manage it I'm going to in the next video finally look at the super shape in 3d which allow us to start creating forms that look like this sort of stuff but at first we just want to see if we can make these 2d like forms with different parameters for this particular formula so let me come back and here is the formula okay so what's the core idea here let me come back to the whiteboard here for a second the core idea if you've forgotten is that I have this idea of a polar coordinate system so I have some are and some angle and actually what I'm going to do is I'm going to iterate over every possible angle from zero all the way to 2pi and actually you can generate interesting super shapes by doing this multiple times so going like from 0 to 2pi like six times and what I'm going to do is with this angle I need some way of calculating R so that for example if one of the super shapes might look something like a flower that R is changing based on the angle in a way like it's oscillate almost like you can just sort of do this with a sine wave like you could say you know R equals sine of the angle which is actually giving me of like a backwards headache because there's so much to brafton but anyway you get the idea I need to calculate R from theta and in fact that's what this formula is doing it's saying 1 over R equals all of this stuff and Phi being the angle or I'm saying data that's I think that's the Greek letter Phi or fee or I don't know everything's going wrong today and you know I can flip this one of our articles that so articles that so I need to figure out a way of getting this formula in my code it's going to be a bit awkward I'm sure going to make some mistakes but the other thing that's really important here is that looking deeper into this formula there are four constants Oh a and B by the way ah okay so they're actually more than four constants there's like six I think there's a B and that's not six yeah it is a BM n1 n2 and n3 so based on those values you are going to get a variety of different of different results and you can see here if I look at this page you can see with different values of M we've got these different results so hopefully I'm going to do this correctly and we'll see the results that are in that that are on this page so let's go to the let's go to the code and this is actually just the code now that I picked up from the super ellipse and you can see I'm running this here this is the super lips which is just changing a one particular parameter to create these different kinds of ellipsoid patterns and I am now going to I actually don't need this particular function and I'm good the thing that I'm going to leave in here which is the most important thing is this so ultimately what I need is begin shape and shape every single angle and I need to get an X and a y and I need to draw that vertex so this I need and then I'm not going to worry about the slider thing right now we'll come back to that later what I also need is I need to have a bunch of constants so I'm going to say I have n1 I'm going to have n2 I'm going to have n 3 I'm going to have em and I'm gonna have a and I'm going to have B now for simplicity right now let's make everything one and obviously you know you can declare and initialize variables all in one line and all sorts of fancy ways but I'm just going to be very explicit about it those are all of my constants so I need to go back and forth I need two screens really because I really need to refer to this formula quite a bit but I think what might make things nice and actually you know Paul Bork has code for doing this here and I guess I could check it if I get confused or wrong something wrong but what I think would be useful to do is to create a function I'm going to do that up here and I'm going to create a function called a super shape and it gets an angle so this function receives an angle maybe I should call it theta a for angle doesn't matter so it receives an angle and it needs to return back R because that's what I'm trying to calculate so at the end I want to return R so let's see somehow and I want to save our R equals one so let's just say right now let's say this is my function and then what I want to do here in this code is I want to say I want to say VAR r equals super shape of that angle and then I need to say x equals what R times cosine of that angle y equals R times sine of that angle and if I wanted to I could also like scale these up by some arbitrary value and I'm going to make that a separate variable like radius just to scale them up and I could probably build that I know I'm doing something like ridiculous right now but I'll fix this later because it's returning one so the idea is I should just see a circle okay great so this is working the idea here is that I have a function that takes the angle and sends back a value and then what sends back that value I do it for every I do it for every angle and I get this circle now of course I'm getting a perfect circle because no matter what the angle comes in I'm just returning one and now what I need to do is I need to get that super shape formula in here so let's try to do that together and hopefully we get something that looks about right so I'm going to go back to Paul Bork's site one more time and so the bunch of things I need to calculate one is one divided by a times cosine of M divided by four times theta Who am I really gonna be able to remember this ah I'm going to call this I needed some like I'll call this part one one oh I did something terrible so there's a constant called a so this I don't want this I want I want this to be calling all this theta so one divided by theta times cosine of n divided by four times that angle that's not theta that's one divided by a times cosine of theta which is the angle times M divided by four okay so that's this thing in here so then I need to take the absolute value of that and then I need to raise it to an exponent which is n 2 which is 2 the N tooth power that's part one now I need to do part two which will probably be somewhat similar part two is 1 divided by B times sine of the same thing to the N 3 power ok so what did I say 1 divided by B and sign those are the only things that change and then this obviously needs to be part 2 part 2 this is n 3 part 2 part 2 ok so now I've got that formula there in two different parts by the way this I think is a useful thing to do you guys this big elaborate formula rather than to try to write it all out one line of code so divide it into parts ok so we got that now let's see ok now I need to add them together so I'll say part 3 equals part 1 plus part 2 then I need to take the square root of it so I can probably do that just in this line of code square root right and then I need to multiply it by n1 so I just need to say and 1 times that so that's that so though in this year to the part 3 with no space so this is mostly like me just like getting that formula in here ok I think we're pretty good shape I think I'm doing this right please please now what else oh 1 divided by R equals all this so with 1 divided by R equals all this R should equal 1 divided by all of this right I can just flip that so I should be able to say and actually I don't need this VAR r equals I should just be able to say return oh there's a dangerous thing that could happen here return 1 divided by part 3 now I'm a little bit afraid of a / of a divided by 0 problem so I think I better put something in here like if part three equals 0 then return 0 I don't know if that's correct look it I'm oh end wait this is not n times wasn't there something no that is what yeah maybe this is right okay so I think I got this right and maybe there's something else that I did slightly wrong but but let's see if this is good enough I have a working version of this I can always check it if this doesn't seem to work right okay here we go so let's just see what happens now if I actually let this be and let this go oh and by the way I had this like radius thing equal to 100 I don't need I don't need a separate variable okay so let's now run this hmm oh look at that that's promising so I got something that looks right but it's a slightly different slightly different shape so let's actually go in let's go to Paul Bork's page and how do I get over here let's look at okay let's look at an example with N 1 equals n 2 equals n 300 if M is 0 I should get a circle let's at least test that so let me make M equals 0 ah perfect I got a circle so I think I did the code correctly so now if I go back here and I look at with all these equal to 1 but if I have M equal to 5 I should get that shape so let me change M equal to 5 and run it again close do I have something wrong it looks a little bit different that's a little distressing pause back now I figured out the error so I had a major error actually I completely read the formula incorrectly this is not the square root of all of this times N 1 this is simple this this the way that this is written means it's the N 1 root of all of that added together in other words if N 1 is equal to 2 then it's the square root so I really need to fix that in my code so let me do that briefly really quickly so instead of N 1 times the square root I want to use the power function power takes something and if this is like to the N once power part one plus part two to the n ones power if I say 1 divided by n 1 here this is part 1 plus this is the N 1 root of part 1 plus part 2 so I can do that and then if I do it again we can see aha now I have the correct shape but you'll notice something look at this there's like a weird like mistake here and you can see it doesn't look exactly right here so one thing I've done very not carefully and let me fix that here is that I just decided in my loop down here to just say let me look at every single angle start at 0 go to 2pi go up by 0.1 well that's not very thoughtful because 2pi isn't necessarily perfectly divisible by 0.1 and it's not that many points I could say 0.01 and I'm going to increase the resolution of what I'm drawing much more you can see now it looks much more like that super shape but I probably would make sense for me to be a bit more thoughtful of it thoughtful and say something like I want to have a total of 500 points and then I want to have the increment the angle increment to be 2pi divided by that total and then I'm going to always go up by that increment so if I just do it that way then I could say this is 500 points that's what I get with 500 points and I could say something like oh whoops I only want 10 points and if you see that you're going to see it still looks right but there's only actually 10 points in there and it's you there's much less curvature because it's drawing big straight lines between some of those points but this is I think a better way of being able to control this you know with a hundred points looks like this so like what how many points do I really need to get kind of like a good resolution on that shape and when I do this in 3d we'll need some sort of mesh I hope I can do it 3d ok so let's look at this now now I have this slider down here let's at least do something like tie that slider to a particular value so for example what if I were to say so one thing I want to do here is one thing that's interesting is that I want my I want actually the increment values of m to be incrementing by 1 so I want to start with an M of 5 and I want to go between 0 and 10 and then what I want to do here in the draw loop is just say M equals slider value so we can just sort of make sure things are value make sure things are kind of working you can see now you can see as I move the slider that shape is changing and we're seeing we're getting exactly what is written are depicted on this Paul Bork website so you can see and this for I should get that ms5 is that now we can see okay what are these shapes here what if I have n 1 equals n 2 equals n 3 equals point 3 now I could change all of these and obviously it could be much smarter about not having three separate variables that if they're all the same value and now we can see what does this look like you can see now I have this particular kind of shape and you can see what it's doing as I change that value of M so I'm going to stop here because I could continue doing this forever I could say well let's make sliders for all the different variables let's try all of these different possibilities let's see can we get all of these different shapes so this is what I would encourage you to do and by the way you don't so tie them to sliders try tying those variables to like a sine function you know I could do that really really quickly right now like for example if I have I'm going to have a variable called like oscillate oscillate equals zero and I'm going to say M equals a you know map sine of oscillate which goes between negative 1 and 1 to some value between 0 and 10 and then I'm going to say oscillate goes up by 0.1 and I'm going to refresh this you can see now this is happening it's happening very quickly but automatically so let's let's make it go up much more slowly and you can see here what's happening is it's kind of like changing that value on the fly and the shape is kind of like wrapping around itself unfurling and furling so there's a lot of possibilities here I could add HSV and make it a rainbow but I encourage you to explore this play around let's see what types of forms you can get and eventually at some point I will get to that next video and try to do this in 3d to get a lot more elaborate forms okay thanks for watching this particular video and I look forward to seeing you in another one in the future bye bye
