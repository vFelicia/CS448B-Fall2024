With timestamps:

00:00 - hello okay so now what I would like to
00:02 - do in this video is actually add a
00:04 - front-end client to this particular API
00:07 - and now there there's there's a there's
00:10 - a kind of question in my mind just
00:11 - floating around here which is like well
00:13 - why am I doing any of this and so on the
00:15 - one hand I might be making a a kind of a
00:18 - build your own API in node just for one
00:21 - person and that's for myself like I
00:22 - might want to make an API for of a way
00:25 - of storing data and communicating and
00:26 - doing server siiz stuff for my
00:28 - particular front end I also might want
00:30 - to make an API that is open for other
00:32 - clients to be able to connect to and
00:33 - that's something that I've got to get to
00:35 - in this list so at some point I'll show
00:36 - you it's actually very easy to open up
00:39 - um your API to other servers to make
00:41 - requests using um a node package called
00:44 - cores but I'll come back to that for
00:45 - right now I'm almost thinking of this as
00:47 - just my own little project and some of
00:49 - my project I need server side
00:50 - programming and some of my project I
00:51 - need client side programming but I need
00:53 - those two things to talk to each other
00:54 - so the first thing that I want if you
00:56 - recall one of the pieces of this uh
00:59 - program that we've written actually uses
01:02 - Express's ability to host static files
01:05 - and all the static files are in this
01:07 - directory called website but I I called
01:09 - it website just to like call it
01:10 - something but often it's called public
01:12 - or you could call it whatever you want
01:13 - unicorn whatever you want to call it you
01:14 - have a folder with files that you want
01:16 - to serve and I have right in there I
01:19 - have this index.html file and all it
01:21 - says in it is hello so if I go back to
01:24 - the browser and I go to the root page I
01:26 - see
01:28 - Hello and so um what I want to do now is
01:31 - I'm going to grab from my desktop a P5
01:35 - and a P5 sketch so it has an index on
01:37 - HTML file some JavaScript code and the
01:39 - libraries that I want to use and I'm
01:41 - going to actually go into um this
01:45 - particular uh uh API example that I'm
01:48 - making and I'm going to put that all in
01:50 - here and I'm going to replace so now if
01:53 - I hit refresh one thing is I don't have
01:54 - to restart the server by the way those
01:56 - server is going to be able to just serve
01:57 - up those files as they change and we can
02:00 - see now
02:02 - anything and I go over here and I can
02:05 - add some code I can say you know no
02:07 - maybe no canvas I don't want a canvas
02:09 - right now and I can say uh
02:12 - console.log uh running is your
02:15 - refrigerator running you better go and
02:17 - catch it and I can see ah so that sketch
02:20 - is working so now how do I do something
02:24 - to access the data that's part of this
02:26 - API so one thing is actually never mind
02:28 - that let me actually add a canvas
02:30 - and what I'm going to do is I'm going to
02:31 - say I'm going to say uh I'm going to say
02:34 - uh create
02:35 - canvas and I'm going to say uh you know
02:38 - 400 comma 400 and background uh 51 which
02:42 - is my background color of choice and we
02:44 - can see I now have a canvas wo it's huge
02:46 - uh no no no no keep stay large over
02:49 - there and small over here okay so now I
02:51 - have this canvas and what I want to do
02:53 - is I now want to say load Json SL all
02:58 - and I don't even know if I need that
02:59 - slash
03:01 - look at this if you've ever done
03:03 - anything with P5 or jQuery where you're
03:05 - loading something from an API open
03:07 - Weather map.org AI cityne York what I'm
03:11 - doing here is I'm querying the API but
03:13 - rather than the full URL the API is
03:17 - running on the same server that's
03:18 - hosting this JavaScript sketch so I
03:20 - could just say SL all or I can say slash
03:23 - search
03:25 - slash uh SL rainbow right I can go to
03:28 - any of the routes simply from the low
03:30 - Json function so what I want to do is do
03:33 - SL all and I'm going to then have a call
03:35 - back for when I've gotten the data
03:37 - called got data and I'm going to write
03:39 - that
03:40 - function and the data comes in as an
03:43 - argument to that function and just to
03:44 - see that it's working I'm going to say
03:45 - console log data so let's run this again
03:49 - we can see there it is I now have
03:51 - accessed in my client side code the all
03:54 - the data from that's running in the
03:56 - server and one thing that I'll do here
03:58 - just out of curiosity is get rid of this
04:00 - slash I think it works with absolute or
04:02 - relative paths so you can see that works
04:03 - either way okay now what could I do I
04:06 - let's say I want to um iterate all over
04:08 - these there's a kind of a trick this is
04:09 - an object so there's not an easy way to
04:11 - iterate over an object as if it's an
04:13 - array although there are plenty of ways
04:14 - to do that a way that I like to do it is
04:17 - I can say VAR Keys equals object Keys
04:21 - data and I'm going to just show you what
04:23 - that gives you console.log
04:26 - Keys what you can see is it gives you an
04:29 - array with just the keys in that object
04:32 - so you can see this is the full object
04:33 - but now I have an array with just the
04:35 - keys and that's an easy thing for me to
04:36 - iterate over so I can do something like
04:39 - four
04:40 - VAR I equals Zer and I know I could do a
04:43 - four each or whatever everybody always
04:44 - complains but I am like I'm just have
04:46 - like an old World style of programming
04:48 - like my for Loops like this and I'm
04:50 - going to say uh key equals keys index I
04:55 - I'm going say word actually and um score
04:58 - equals data index word and then I could
05:01 - say uh you know VAR x equals random WID
05:05 - and VAR y equals random height and Phill
05:09 - 255 and text word uh at X and Y and
05:15 - let's see what I get now if we run this
05:18 - we can see and let's make it bigger text
05:21 - size uh
05:23 - 64 and you can see there we go so
05:26 - obviously I could um I'm I'm seeing now
05:29 - all the words that are in the database
05:31 - kind of visualized in the canvas and I
05:34 - could of course like color them I could
05:36 - think about visualizing a thoughtful way
05:38 - I could make their font size and their
05:39 - color based on their sentiment score but
05:41 - I'm just showing you that I can access a
05:44 - particular route and then uh visualize
05:47 - that route visualize the results of the
05:49 - data that I'm getting through that route
05:50 - in a canvas But ultimately what I might
05:52 - want to do here actually even more
05:54 - importantly is I might want to add input
05:57 - ID equals uh word
06:00 - word and then input ID equals score so
06:05 - let's look at what that looks like and
06:08 - I'm gonna
06:09 - um I'm G to wrap that in a paragraph and
06:13 - I'm gonna say
06:15 - word and I'm going to put a line break
06:18 - and I'm going to say
06:19 - score uh and slash P so now we can see
06:24 - on my web page and something's driving
06:26 - me a little bit crazy here which is this
06:29 - uh default styling we can see here
06:33 - oops that I now have this little kind of
06:37 - basic form it's barely a form but it's
06:39 - like I made a little paragraph that has
06:42 - word and then a text input box score and
06:44 - a text input box I just put that in the
06:46 - HTML directly and then I probably also
06:49 - maybe want to add some sort of uh
06:53 - button uh submit button and I can give
06:57 - that an ID also ID equals submit
07:00 - so what I'm doing here is I've made a
07:02 - little interface that has a place for me
07:04 - to type a Word and a score and I'm able
07:06 - to hit submit so why am I doing this
07:09 - because what I want is the moment I
07:11 - click submit I want to send what is in
07:14 - those two text fields to the route ad
07:17 - right I need to go to if I go right now
07:19 - to add um I can't think uh
07:25 - sunflower uh
07:27 - 43 we can see that that was added and
07:30 - now if I go back to here uh we're going
07:33 - to see that sunflower shows up there I
07:35 - don't I don't really like what I've done
07:36 - here with this um visualization because
07:39 - it's sort of hard to see what's going on
07:40 - let's make that a little bit smaller and
07:42 - let's uh let's just make it
07:46 - a I'm sorry I'm going a little crazy
07:48 - here but just bear with me for a second
07:51 - unnecessarily uh there we go so now I
07:53 - can see like all the you can see that
07:54 - sunflower was added there but I added it
07:57 - manually only by going to the route the
07:59 - address bar but that's not really how
08:01 - anybody normally interacts with an API I
08:04 - don't know maybe I do that quite
08:05 - normally so now what I need to do is I
08:08 - need to handle that submit button so in
08:11 - P5 I can gain access to that through the
08:14 - select function so this is me using uh
08:18 - submit sorry this should say submit this
08:20 - is me selecting the Dom element with the
08:23 - ID submit and that button has the ID
08:25 - submit and now I have it in a variable
08:27 - and I can now attach an event like
08:29 - whenever the mouse is clicked on that
08:31 - button to uh I can say submit
08:34 - word and now I can write a
08:37 - function submit word where I get the
08:42 - word from the word element and I can
08:46 - just say
08:47 - value I can get the
08:51 - score from the score elements value so
08:54 - select looks for the text input box word
08:57 - score uh um uh and then then score and
09:00 - then the value function gives me the
09:02 - contents of what's in there so just to
09:03 - see that this is doing what I want it to
09:05 - do I'm going to say console log word
09:08 - score so let's go back so I'm not
09:10 - submitting it yet but let's go back and
09:11 - I'm going to hit refresh oh select is
09:14 - not defined guess what I'm these
09:16 - functions are part of the P5 Dom Library
09:19 - so I need to make sure I am referencing
09:22 - the P5 Dom library in my HTML which now
09:25 - I am
09:27 - p5.js and so now I can go back and hit
09:29 - ref refresh and now I should be able to
09:31 - type in uh uh cherry
09:34 - blossom two and hit submit and we can
09:37 - see that that I'm able to access those
09:40 - two values and now what do I want to do
09:44 - all I need to do is go to
09:47 - um load Json what's the route add slash
09:53 - plus word plus a
09:55 - slash plus a score so I can dynamically
10:00 - create this route in my code based on
10:02 - what the user is uh put into those two
10:05 - text boxes so now I want to now this is
10:07 - a little bit weird and I'm going to get
10:09 - into this in a future video where I talk
10:11 - about get versus post I'm actually doing
10:13 - something that's sort of against the
10:15 - traditional conventions I'm using low
10:17 - Json which is a get request to actually
10:20 - send data the word in the score to the
10:22 - server but I'm really doing that out of
10:23 - convenience because it kind of works and
10:25 - it's easy and it's simple you'll see in
10:27 - a lot of other scenarios if you want to
10:28 - send data to the server images large
10:31 - data private data you're going to need
10:32 - to use something called a post which
10:34 - cannot be done through low Json but I'll
10:36 - get to that in a future video but so and
10:38 - then um I'm going to just add uh a
10:42 - function called finished as the Callback
10:45 - whoops and then I can say um function
10:50 - finished data console.log data so I just
10:53 - want to see that it came back so I'm
10:56 - going to I'm going to send that data and
10:58 - see that it came back
11:00 - back and then I'm going to so I'm going
11:02 - to hit refresh and I'm going to add uh a
11:06 - blueberry uh 10 and I'm going to hit
11:08 - submit and we can see that this was sent
11:11 - to the database now if I hit refresh
11:14 - again we should see that blueberry is
11:16 - there why not though however once it's
11:19 - done ask the
11:22 - um ask the database for all the words
11:25 - again to like redraw what's in there so
11:28 - here this is what I did to like redraw
11:30 - everything I could actually put this in
11:31 - a function I could call this function
11:33 - like draw
11:36 - data and so when the program first
11:39 - starts I want to draw the data and then
11:42 - every time I submit a word and it's done
11:44 - I also want to draw the data again so
11:48 - now if I do this I can say hey let me
11:51 - add the word uh mango and give it a
11:54 - score of three and hit submit and now o
11:56 - look at that I one thing I forgot in my
11:58 - draw data function was to clear the
12:00 - background so because it it drew it
12:02 - again over everything so I'm going to
12:04 - take this background function and put it
12:07 - right here in the got data function and
12:11 - I'll hit refresh again we can see
12:13 - everything's in there mango flour
12:14 - blueberry sunflower all these things
12:16 - what's another fruit that is delicious a
12:18 - raspberry I only know how to spell
12:20 - raspberry now because of the raspberry
12:22 - pie and it's like that's like the
12:23 - password or something default typing it
12:25 - in all the time score uh uh four and I'm
12:29 - going to hit submit and there we go it
12:31 - runs and we see the result so now I have
12:33 - an interface where I can sit here and
12:35 - submit new words to the database and I
12:37 - also have this sort of goofy front end
12:39 - which just shows me a very poor
12:41 - visualization of all the words that are
12:44 - currently in this database and if I go
12:46 - look in the server code I should be able
12:47 - to see hey look at this this words. Json
12:50 - file it has everything so even if I now
12:53 - quit and restart the
12:56 - server and go here again I'm still going
12:59 - to see all of those words so now we have
13:01 - both now we have an API with routes that
13:03 - accept parameters we have a we have a
13:06 - persistence saving all the data to a
13:07 - Json file and now we have an even an
13:09 - interface that allows us to interact
13:11 - with the API in one way and so the next
13:15 - video that I'm going to do is look at
13:16 - how do I submit data to a server using a
13:19 - post and why would I need to use a post
13:21 - versus a get what's a get what's a post
13:23 - so that's what I'm going to look at in
13:25 - the next video that I'll make and then
13:26 - by the end I'll wrap it up and actually
13:28 - make this thing do some sort of uh
13:31 - sentiment analysis and give a scoreback
13:33 - when you post a large body of text to it
13:35 - okay thanks for watching and look
13:36 - forward to hearing what you think in the
13:37 - comments and all that sort of
13:43 - [Music]
13:48 - stuff

Cleaned transcript:

hello okay so now what I would like to do in this video is actually add a frontend client to this particular API and now there there's there's a there's a kind of question in my mind just floating around here which is like well why am I doing any of this and so on the one hand I might be making a a kind of a build your own API in node just for one person and that's for myself like I might want to make an API for of a way of storing data and communicating and doing server siiz stuff for my particular front end I also might want to make an API that is open for other clients to be able to connect to and that's something that I've got to get to in this list so at some point I'll show you it's actually very easy to open up um your API to other servers to make requests using um a node package called cores but I'll come back to that for right now I'm almost thinking of this as just my own little project and some of my project I need server side programming and some of my project I need client side programming but I need those two things to talk to each other so the first thing that I want if you recall one of the pieces of this uh program that we've written actually uses Express's ability to host static files and all the static files are in this directory called website but I I called it website just to like call it something but often it's called public or you could call it whatever you want unicorn whatever you want to call it you have a folder with files that you want to serve and I have right in there I have this index.html file and all it says in it is hello so if I go back to the browser and I go to the root page I see Hello and so um what I want to do now is I'm going to grab from my desktop a P5 and a P5 sketch so it has an index on HTML file some JavaScript code and the libraries that I want to use and I'm going to actually go into um this particular uh uh API example that I'm making and I'm going to put that all in here and I'm going to replace so now if I hit refresh one thing is I don't have to restart the server by the way those server is going to be able to just serve up those files as they change and we can see now anything and I go over here and I can add some code I can say you know no maybe no canvas I don't want a canvas right now and I can say uh console.log uh running is your refrigerator running you better go and catch it and I can see ah so that sketch is working so now how do I do something to access the data that's part of this API so one thing is actually never mind that let me actually add a canvas and what I'm going to do is I'm going to say I'm going to say uh I'm going to say uh create canvas and I'm going to say uh you know 400 comma 400 and background uh 51 which is my background color of choice and we can see I now have a canvas wo it's huge uh no no no no keep stay large over there and small over here okay so now I have this canvas and what I want to do is I now want to say load Json SL all and I don't even know if I need that slash look at this if you've ever done anything with P5 or jQuery where you're loading something from an API open Weather map.org AI cityne York what I'm doing here is I'm querying the API but rather than the full URL the API is running on the same server that's hosting this JavaScript sketch so I could just say SL all or I can say slash search slash uh SL rainbow right I can go to any of the routes simply from the low Json function so what I want to do is do SL all and I'm going to then have a call back for when I've gotten the data called got data and I'm going to write that function and the data comes in as an argument to that function and just to see that it's working I'm going to say console log data so let's run this again we can see there it is I now have accessed in my client side code the all the data from that's running in the server and one thing that I'll do here just out of curiosity is get rid of this slash I think it works with absolute or relative paths so you can see that works either way okay now what could I do I let's say I want to um iterate all over these there's a kind of a trick this is an object so there's not an easy way to iterate over an object as if it's an array although there are plenty of ways to do that a way that I like to do it is I can say VAR Keys equals object Keys data and I'm going to just show you what that gives you console.log Keys what you can see is it gives you an array with just the keys in that object so you can see this is the full object but now I have an array with just the keys and that's an easy thing for me to iterate over so I can do something like four VAR I equals Zer and I know I could do a four each or whatever everybody always complains but I am like I'm just have like an old World style of programming like my for Loops like this and I'm going to say uh key equals keys index I I'm going say word actually and um score equals data index word and then I could say uh you know VAR x equals random WID and VAR y equals random height and Phill 255 and text word uh at X and Y and let's see what I get now if we run this we can see and let's make it bigger text size uh 64 and you can see there we go so obviously I could um I'm I'm seeing now all the words that are in the database kind of visualized in the canvas and I could of course like color them I could think about visualizing a thoughtful way I could make their font size and their color based on their sentiment score but I'm just showing you that I can access a particular route and then uh visualize that route visualize the results of the data that I'm getting through that route in a canvas But ultimately what I might want to do here actually even more importantly is I might want to add input ID equals uh word word and then input ID equals score so let's look at what that looks like and I'm gonna um I'm G to wrap that in a paragraph and I'm gonna say word and I'm going to put a line break and I'm going to say score uh and slash P so now we can see on my web page and something's driving me a little bit crazy here which is this uh default styling we can see here oops that I now have this little kind of basic form it's barely a form but it's like I made a little paragraph that has word and then a text input box score and a text input box I just put that in the HTML directly and then I probably also maybe want to add some sort of uh button uh submit button and I can give that an ID also ID equals submit so what I'm doing here is I've made a little interface that has a place for me to type a Word and a score and I'm able to hit submit so why am I doing this because what I want is the moment I click submit I want to send what is in those two text fields to the route ad right I need to go to if I go right now to add um I can't think uh sunflower uh 43 we can see that that was added and now if I go back to here uh we're going to see that sunflower shows up there I don't I don't really like what I've done here with this um visualization because it's sort of hard to see what's going on let's make that a little bit smaller and let's uh let's just make it a I'm sorry I'm going a little crazy here but just bear with me for a second unnecessarily uh there we go so now I can see like all the you can see that sunflower was added there but I added it manually only by going to the route the address bar but that's not really how anybody normally interacts with an API I don't know maybe I do that quite normally so now what I need to do is I need to handle that submit button so in P5 I can gain access to that through the select function so this is me using uh submit sorry this should say submit this is me selecting the Dom element with the ID submit and that button has the ID submit and now I have it in a variable and I can now attach an event like whenever the mouse is clicked on that button to uh I can say submit word and now I can write a function submit word where I get the word from the word element and I can just say value I can get the score from the score elements value so select looks for the text input box word score uh um uh and then then score and then the value function gives me the contents of what's in there so just to see that this is doing what I want it to do I'm going to say console log word score so let's go back so I'm not submitting it yet but let's go back and I'm going to hit refresh oh select is not defined guess what I'm these functions are part of the P5 Dom Library so I need to make sure I am referencing the P5 Dom library in my HTML which now I am p5.js and so now I can go back and hit ref refresh and now I should be able to type in uh uh cherry blossom two and hit submit and we can see that that I'm able to access those two values and now what do I want to do all I need to do is go to um load Json what's the route add slash plus word plus a slash plus a score so I can dynamically create this route in my code based on what the user is uh put into those two text boxes so now I want to now this is a little bit weird and I'm going to get into this in a future video where I talk about get versus post I'm actually doing something that's sort of against the traditional conventions I'm using low Json which is a get request to actually send data the word in the score to the server but I'm really doing that out of convenience because it kind of works and it's easy and it's simple you'll see in a lot of other scenarios if you want to send data to the server images large data private data you're going to need to use something called a post which cannot be done through low Json but I'll get to that in a future video but so and then um I'm going to just add uh a function called finished as the Callback whoops and then I can say um function finished data console.log data so I just want to see that it came back so I'm going to I'm going to send that data and see that it came back back and then I'm going to so I'm going to hit refresh and I'm going to add uh a blueberry uh 10 and I'm going to hit submit and we can see that this was sent to the database now if I hit refresh again we should see that blueberry is there why not though however once it's done ask the um ask the database for all the words again to like redraw what's in there so here this is what I did to like redraw everything I could actually put this in a function I could call this function like draw data and so when the program first starts I want to draw the data and then every time I submit a word and it's done I also want to draw the data again so now if I do this I can say hey let me add the word uh mango and give it a score of three and hit submit and now o look at that I one thing I forgot in my draw data function was to clear the background so because it it drew it again over everything so I'm going to take this background function and put it right here in the got data function and I'll hit refresh again we can see everything's in there mango flour blueberry sunflower all these things what's another fruit that is delicious a raspberry I only know how to spell raspberry now because of the raspberry pie and it's like that's like the password or something default typing it in all the time score uh uh four and I'm going to hit submit and there we go it runs and we see the result so now I have an interface where I can sit here and submit new words to the database and I also have this sort of goofy front end which just shows me a very poor visualization of all the words that are currently in this database and if I go look in the server code I should be able to see hey look at this this words. Json file it has everything so even if I now quit and restart the server and go here again I'm still going to see all of those words so now we have both now we have an API with routes that accept parameters we have a we have a persistence saving all the data to a Json file and now we have an even an interface that allows us to interact with the API in one way and so the next video that I'm going to do is look at how do I submit data to a server using a post and why would I need to use a post versus a get what's a get what's a post so that's what I'm going to look at in the next video that I'll make and then by the end I'll wrap it up and actually make this thing do some sort of uh sentiment analysis and give a scoreback when you post a large body of text to it okay thanks for watching and look forward to hearing what you think in the comments and all that sort of stuff
