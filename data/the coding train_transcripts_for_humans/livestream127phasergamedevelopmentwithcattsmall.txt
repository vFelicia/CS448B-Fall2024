With timestamps:

00:00 - as if I don't do this every Friday
00:05 - there's a good chance now that this is
00:08 - actually live so hello this is I am dan
00:11 - Shipman welcome to a surprise Kotick
00:16 - trade I have a train whistle it's
00:19 - embarrassing but I do have one oh I see
00:22 - myself so this is actually working all
00:24 - right so this is kind of a surprise I
00:26 - have a really exciting guest you can see
00:29 - oh I can't walk all the way over there
00:31 - you can see her Twitter handle down
00:32 - there cats mall I have been probably
00:35 - she's standing over here which is why I
00:37 - might look over here for a second I have
00:39 - been emailing with cat for probably like
00:43 - a year and I keep messing up the
00:45 - schedule it's usually my fault so I'm so
00:47 - excited that this is finally happy
00:49 - happening today
00:49 - it's definitely been a topic that's
00:51 - requested a lot other JavaScript
00:54 - libraries besides like p5.js game
00:56 - development stuff there's a library that
00:58 - you might have heard called phaser and
01:00 - so without spending too much time doing
01:04 - an introduction cat is amazing you
01:05 - should check out her website all of her
01:07 - work she does a lot of stuff with game
01:09 - development and other types of things
01:12 - and so we'll work this is gonna be a
01:14 - little awkward here but what I'm going
01:16 - to do so this is gonna be a short
01:18 - livestream I'm gonna be back later this
01:20 - afternoon in a few hours for like my
01:22 - regular livestream which I'm going to
01:23 - try to build a quadtree example but
01:26 - what's gonna happen is I'm going to
01:27 - awkwardly in a moment take off this
01:28 - microphone and hand it to Kat she's
01:31 - going to not awkwardly very gracefully
01:33 - put on with microphone and and then come
01:37 - and do a short presentation about phaser
01:39 - and an example show you an example it's
01:41 - gonna be short I'm gonna watch the live
01:43 - chat to see if there's any and I try to
01:46 - accumulate a few questions so you can
01:48 - ask those questions in the live chat and
01:49 - then maybe we'll have you know ten
01:52 - minutes or so after she shows some stuff
01:54 - where I'll ask a few of those questions
01:56 - I'm trying to think of anything else
01:58 - that I'm forgetting that's important
02:01 - I'm looking at people are saying hello
02:04 - okay so what I'm gonna do first here and
02:07 - is just mute the microphone so it
02:10 - doesn't make horrible
02:11 - while we're transferring it
02:20 - you
02:49 - okay unmuted hello hi I'm from the
02:54 - internet hopefully you can hear me okay
02:58 - humans if you can't then you can tell
03:01 - the Internet well it'll be great oh oh
03:06 - nice
03:07 - cool well now that the camera has
03:09 - randomly shut off and turned back on you
03:11 - can see me again hopefully cool hi this
03:14 - is phaser game development I'm gonna
03:16 - show you how I make it browser friendly
03:19 - games so firstly I am cat small I am a
03:24 - game programmer a game designer I'm also
03:27 - a product designer at Etsy and I also
03:29 - make lots of art mostly on Instagram and
03:33 - sometimes on Twitter if you want to play
03:36 - my games you can play them at cat small
03:40 - GGO it's like wherever right there yeah
03:44 - but we're not here to only talk about my
03:47 - games today we are here to talk about
03:49 - making games ah so I often use a
03:55 - JavaScript framework called phaser and I
03:58 - use it because I am mostly a web
04:01 - programmer by day and so it's much
04:04 - easier for me to switch contacts if I'm
04:08 - using the same language you can make
04:10 - language or you can make games with lots
04:12 - of languages for example c-sharp if you
04:15 - use unity but I find that phaser is much
04:19 - closer to what I'm using during the day
04:20 - so it's really convenient and
04:22 - specifically phaser is an open-source
04:24 - JavaScript framework and my framework
04:27 - that means that it's a set of code that
04:29 - enables you to make things without
04:31 - having to reinvent the wheel things that
04:33 - have already been created lots and lots
04:36 - of times
04:37 - for example physics and games like we've
04:40 - pretty much standardized that so it's
04:42 - easier to use a framework than having to
04:43 - write your own physics engine from
04:46 - scratch also open source means that
04:49 - phaser is free to use and it's
04:52 - constantly updated but usually when you
04:54 - use phaser you actually pull a version
04:57 - of it to your computer so that's like
04:59 - whatever version you're using
05:01 - that point in time is the one that you
05:02 - will continue to use so you don't have
05:04 - to worry about it being updated randomly
05:06 - on you which if you've used certain game
05:09 - engines you're very familiar with the
05:11 - suffering of random updates and the
05:14 - other thing that's really nice about it
05:15 - being open source is that you can
05:17 - actually contribute to its development
05:19 - so lots of people are contributing to
05:21 - making phaser better it also has a
05:24 - patreon that you can support it which is
05:26 - really cool and the other nice thing is
05:28 - that originally phaser was built by a
05:30 - company that actually also made and
05:33 - makes html5 games and they made this
05:35 - tool because when when flash was
05:39 - basically destroyed by Apple back in the
05:42 - day when they announced that the newest
05:44 - iPhone was not going to include flash
05:46 - they decided that it was time to figure
05:49 - out a good framework for the platform
05:52 - for the web and there weren't a lot of
05:55 - tools at the time that we're doing such
05:58 - a good job so they took it into their
05:59 - own hands and that's how we ended up
06:01 - here so the newest version of phaser the
06:05 - current version is the third one it's
06:08 - like it was 3.0 now they're at like 3.2
06:11 - or something like that
06:12 - and that's the one that I'm gonna be
06:14 - working in today they are still working
06:16 - out some kinks which is why it's at
06:18 - point two at this point but the
06:21 - improvements to this version include a
06:23 - better game camera new properties for
06:26 - game objects which make it easier for
06:27 - you to custom build things that you want
06:31 - to build it also has crisper pixel art
06:33 - which honestly for a while was pretty
06:36 - challenging because sometimes the
06:37 - sprites would be fuzzy and now there's
06:40 - actually built-in support and you can
06:41 - just type one thing that says pixel art
06:43 - equals true and then all the art is
06:45 - beautiful
06:46 - which is amazing and there's also an
06:48 - improved scene manager so that's how you
06:51 - actually build levels in the game and
06:53 - now they've done a lot of reworking to
06:55 - that so before I show you how I work in
06:59 - phaser some things that I wanted to note
07:02 - really quickly are I'm just going to
07:04 - kind of go through them but every
07:06 - framework in game engine has its own
07:08 - quirks so these are just some things to
07:10 - keep in mind it's not like a oh no don't
07:12 - you
07:12 - this it's more of a hey keep this in
07:14 - mind if you decide that you want to work
07:16 - with phaser so firstly phaser uses
07:20 - JavaScript as I mentioned so for
07:22 - security reasons it requires a server to
07:25 - run so when you're working on the game
07:27 - on your local computer you can create a
07:29 - local server using Python or PHP you can
07:32 - use your command line to create one of
07:34 - those or you can use a program like
07:36 - xampp or any of the other programs that
07:38 - you might have used in the past if
07:40 - you've ever worked with wordpress for
07:41 - example to host a web site
07:44 - what this does is it allows you to run
07:46 - phaser games without an internet
07:48 - connection so you're basically
07:49 - replicating what it's like to actually
07:51 - play a game your game for example on the
07:54 - internet next Cesar uses JavaScript
07:59 - again and usually when you're writing
08:01 - JavaScript you're working in a code
08:02 - editor there are a couple of visual
08:04 - editors out there but because phaser is
08:07 - constantly updated in it's open source
08:09 - and these editors are not usually
08:11 - affiliated directly with phaser those
08:13 - might be a couple of versions behind so
08:16 - if you for some reason are really
08:18 - attached to the version that I'm about
08:20 - to show you be warned that some of the
08:23 - visual editors may not be that
08:24 - up-to-date yet so if you're interested
08:26 - then I would suggest maybe just using
08:28 - sublime text or vim if you're that kind
08:30 - of person or whatever code editor you
08:33 - prefer and finally if you have made a
08:38 - game before then you have heard of the
08:40 - game loop and usually that just involves
08:43 - creating the game's initial state so
08:45 - that's known as the create function and
08:47 - then you update the game every
08:49 - millisecond or so and that's called the
08:50 - update function so the create function
08:52 - runs once and then the update function
08:54 - continues to run as the game is updated
08:57 - phaser actually has a third part of the
09:00 - sleep that runs before the other two and
09:02 - that's called the preload function and
09:04 - what that does is it allows you to
09:06 - preload files from the server or around
09:08 - the internet so for example if you
09:10 - wanted to use google fonts that is how
09:12 - you would preload google fonts before
09:15 - you actually ran the game so I'm going
09:17 - to show you what all that means if
09:18 - you're kind of like what so now that you
09:21 - know these things we can actually start
09:23 - and I'm going to
09:24 - walk through how I made a very simple
09:27 - game using phasers newest version so
09:30 - what I'm gonna do first is I'm gonna
09:31 - show you how I usually separate my files
09:34 - because usually I am making games that
09:36 - have multiple scenes or levels and then
09:40 - after I do that I'm gonna show you a
09:42 - simple game that I made using phasers
09:45 - template art which you can see up here
09:47 - looks really cute
09:48 - thank you phaser for actually including
09:50 - some really adorable art to use and it
09:53 - only has one scene so I put everything
09:55 - in one file so that you could go through
09:57 - and look at it and I'm gonna be using
09:58 - code pen which was really convenient and
10:00 - what you can do after this or even
10:02 - during this if you want to walk through
10:03 - at the same time is you can go to code
10:06 - pen do slash cat small and the stuff is
10:09 - there which is great so hopefully this
10:13 - will show you two ways that you can work
10:14 - with phaser one for simpler games and
10:17 - then once you are feeling like going
10:19 - more advanced then you'll be able to
10:22 - easily do that as well cool goodbye cool
10:28 - slides
10:29 - cool so this is what a version of my
10:34 - templates usually look like I'm gonna
10:36 - really quickly attempt to see if I can
10:37 - resize this because the font is so small
10:42 - oh there it is it's so convenient maybe
10:44 - like 20 hopefully that looks good to
10:48 - people or maybe I should just go all the
10:49 - way 26 I'm gonna go 20 and hope that
10:53 - people can see 20 if anyone can't see
10:57 - this is why we have feedback I'm gonna
10:59 - just reload it yeah that's beautiful
11:01 - okay sweet so I'm just gonna size this a
11:05 - little bit bigger so I can kind of show
11:08 - you more okay cool so how I usually
11:12 - organize things is that I have an index
11:15 - file that kind of just like holds and
11:18 - loads all of the the JavaScript his
11:22 - phaser is all JavaScript so what you
11:23 - usually want to do what you have to do
11:25 - is you have to load in the phaser
11:28 - JavaScript first and you can download
11:30 - that from phaser IO now you see oh my
11:35 - bookmarks they're great
11:36 - and what you do is you just go to
11:40 - download and then you can download it
11:41 - and it's awesome then what you do is you
11:46 - include any game files that you wanted
11:48 - to include so in this case I usually
11:51 - have global variables I also have a file
11:54 - that pre loads all of my files upfront
11:56 - just because I would rather have there
11:59 - be one time period where everything is
12:01 - pre loading at once and then I don't
12:05 - have to worry about my scene my scenes
12:07 - constantly loading between them or
12:08 - things loading between my scenes but you
12:11 - can organize things however you want
12:13 - which is great and then what I do is I
12:15 - usually have a main menu a gameplay
12:17 - state and then I would have a wins day
12:19 - to lose state etc however many scenes I
12:22 - wanted to have in my game I would put
12:24 - them in separate files and I'll show you
12:25 - what those contain in a moment so once
12:28 - all these files are load loaded which is
12:31 - why they are in the head tag in your
12:33 - HTML what you do is you have a body tag
12:35 - which is how every website is created
12:38 - and inside the body tag I put I usually
12:41 - this is where I usually put my
12:42 - JavaScript specifically for
12:43 - instantiating the game so what I do is I
12:46 - say on page load create this game config
12:49 - that contains a couple of things
12:51 - including the type of descending that
12:55 - we're going to use it can be phaser you
12:56 - can have phaser choose it automatically
12:58 - there are also a couple of other display
13:00 - settings that you can choose from you
13:02 - can tell phaser
13:03 - that the container should have a certain
13:05 - width and height and then for the scene
13:09 - we're actually giving in this object
13:11 - that's called my game dot scenes which I
13:13 - will tell you about more in a second and
13:15 - then once you actually have the
13:18 - configuration you can say variable game
13:21 - is a new version or a new instance of
13:25 - the phaser game class and you're pulling
13:27 - in the config that you just created so
13:30 - next I'm gonna go to the next file that
13:33 - was included up here which is the global
13:34 - variables where all I am doing is saying
13:36 - my game equals blah and then the scenes
13:40 - contain an array of scenes and then I
13:43 - also defined a framerate and this is
13:44 - where I put any other thing
13:46 - I want to kind of refer to a bunch so
13:47 - that when I if I ever need to adjust
13:49 - something across all my files I just
13:52 - have it in one convenient spot everyone
13:54 - kind of does their global variables in a
13:56 - different way and I just found this to
13:57 - be the most convenient tbh so next what
14:00 - I do is I created two states as I
14:02 - mentioned there's one or three states
14:04 - sorry there's one that I just used for
14:06 - pre loading so in the preload state I'm
14:08 - creating a new class of this scene
14:11 - called preload and then what I'm doing
14:14 - is I would put anything that I wanted to
14:16 - load in first in here and then next I
14:19 - would just start the main menu and then
14:23 - the same thing in the main menu I would
14:26 - just right now there's nothing in it so
14:28 - this is just a template but I would
14:29 - start the gameplay but if you wanted to
14:32 - actually do something you would do that
14:33 - stuff in the create section so one thing
14:37 - you'll also note is at the bottom of
14:38 - each of these you I wrote some code that
14:41 - adds the scene to the list of scenes
14:44 - that were in the global variables and
14:47 - that just makes sure that all these
14:48 - scenes are going in the order that I
14:50 - want them to and they're going in the
14:52 - order that they are loaded on the
14:54 - original HTML page so that's how I
14:56 - usually create my more complex games if
15:00 - your brain has exploded a little bit
15:01 - that's fine but what I'm gonna do now is
15:04 - go through a simpler game that I made in
15:06 - a single javascript file and there is no
15:10 - HTML involved at all I wrote some minor
15:13 - CSS just so that the spacing is a little
15:16 - bit tighter on the page itself but
15:18 - everything else is contained in this
15:20 - singular JavaScript file so just gonna
15:23 - like go through it and I'm gonna have to
15:26 - move myself out of the way slash resize
15:28 - this a little bit okay I can go this way
15:31 - yeah cool did it okay
15:34 - so we're gonna start from the top so if
15:38 - you're just using a singular file what
15:39 - you can do is define and declare all of
15:42 - your objects in a single place so at the
15:45 - top I usually put the main things that I
15:47 - want my game to be aware of the player
15:49 - which will eventually be defined more
15:52 - the enemies which is for now in a
15:55 - the number of enemies I want to spawn
15:57 - which I can change at any point from
15:58 - right here for now the enemies that are
16:01 - left are the number of enemies to spawn
16:03 - but later that's going to change because
16:05 - the point of this game is that we're
16:06 - gonna clear the enemies when they're
16:08 - weak so we're going to go up to them
16:10 - we're going to touch them and then if
16:12 - they are not weak then we lose health
16:15 - and that's kind of how the game works
16:17 - there's like a positive and a negative
16:18 - reinforcement that we're giving to
16:20 - people here so right now we're gonna
16:25 - define at the beginning that maybe the
16:26 - enemies are safe and then over time
16:28 - that's going to change we have a number
16:30 - of hit points which is five we are
16:32 - defining a string and then an object -
16:35 - that will later contain that string the
16:37 - score which is 0 etc we've got some text
16:41 - objects and then we also have a couple
16:43 - of other things that we're including
16:44 - which we'll say is the game has the game
16:46 - started yes or no and then has the game
16:49 - finished yes or no and that's how we
16:51 - know if the game is currently running so
16:53 - then everything is contained within this
16:55 - gigantic gameplay state which is super
16:59 - fun so how it works is just going back
17:04 - up to the top here so as I mentioned
17:07 - before we have a lot of stuff in this
17:11 - one file or in this one scene so we're
17:15 - in this scene we're actually going to do
17:16 - the following I'll play through it
17:17 - really quickly so when you click on the
17:20 - game it starts and then you can move
17:22 - around and when they are pink they are
17:25 - not safe when they are inverted they are
17:29 - safe for you to touch so if I go up to
17:32 - one right now my HP went down oh no oh
17:34 - no oh no game over
17:37 - and then I didn't really include a easy
17:40 - way to actually restart the game so I
17:42 - just rerun it so that's what we're
17:44 - making if you were curious okay so cool
17:47 - so the first thing we have to do is
17:49 - actually load the assets for this game
17:51 - so how you do that is there are a couple
17:55 - of types of images and sprites that are
17:58 - included in phaser one is a straight-up
17:59 - image the other type is a sprite sheet
18:01 - so you can say how much a single frame
18:04 - width and height are for a sprite sheet
18:06 - itself
18:08 - for Images you just say hey load this
18:09 - image and this is what its gonna be
18:10 - called so I have an object called sky I
18:14 - have an object called dude and I have an
18:16 - object called Maddy or these are like
18:18 - sprite sheets and images rather they are
18:19 - not objects yet and those are the only
18:22 - things that I'm including in the preload
18:23 - function so what I do next is I go down
18:26 - to the create function where it which is
18:28 - where you set up the actual scene once
18:31 - the files have loaded so what I'm doing
18:33 - here is actually creating the background
18:35 - and I create the background first
18:36 - because all the other objects I create
18:38 - are gonna go on top of the background so
18:40 - you want to make sure that you put that
18:41 - in first and you instantiate things in
18:44 - the order that you actually want them to
18:45 - show up on the screen although you can
18:47 - also change the ZN index which is like x
18:50 - y and z so you can change the direction
18:52 - or the order of things if you want to as
18:56 - you're going through but why do that
18:57 - this is a simple game so we're just
18:59 - gonna go with it so what I do next is I
19:02 - actually create the player and then I'm
19:05 - using phasers animations properties to
19:09 - create these global animations that I
19:11 - can use at any point in time so just
19:13 - breaking down the player really quickly
19:15 - how it works when you want to create a
19:17 - sprite object is you say this don't add
19:20 - that sprite you'll notice that there's
19:22 - this physics thing in here and I'm gonna
19:24 - talk a little bit more about that later
19:25 - but phaser has a phaser 3 especially has
19:29 - a new way that they're defining physics
19:31 - so it's actually defined from a global
19:33 - standpoint rather than within the
19:35 - individual scene so this dot physics
19:38 - just refers to the game object which has
19:41 - physics in it and we're adding the
19:44 - sprite to the game object and it is at
19:48 - the 32x and it is at the height that we
19:50 - define below I'll describe the Hat or
19:53 - show that more in a second and it's
19:55 - using the image that we called dude
19:57 - which if you remember was dude so
20:01 - hopefully that makes some sense and what
20:04 - we're gonna do next is again I mentioned
20:06 - creating these image these animations so
20:09 - what we're doing is we're naming it this
20:11 - key is going to be called left or this
20:13 - animation is going to be called left the
20:15 - frames that we're using our dude the
20:18 - first frame and that's it
20:20 - and then we're creating one that's down
20:22 - left right we're doing down writing up
20:26 - as well so if we go over here what that
20:29 - looks like
20:29 - is this and I'll show you how we call
20:32 - that as well and some time just kidding
20:37 - so now what we're doing is we're saying
20:40 - that the player should actually collide
20:42 - with the edges of the screen which is
20:44 - useful because we don't want the player
20:47 - to walk off the edge and then disappear
20:49 - it's not exactly fun and then what we do
20:52 - once we've defined all the stuff around
20:54 - the players we're saying hey this is how
20:57 - we can include keyboard input because
20:59 - we're gonna need that at some point so
21:01 - what you do in that case is you say the
21:04 - cursors in this are going to be the the
21:08 - game object should take in the input
21:10 - method of the keyboard and it should
21:12 - create the cursor keys which are up down
21:14 - left and right arrows so it's convenient
21:16 - that phaser again just has some of these
21:18 - things built in so you don't have to go
21:20 - about defining the keyboard keys
21:22 - manually which is not fun and you can
21:26 - have this in here or not I just put it
21:28 - in here because whatever when you're
21:30 - programming it like 9 p.m. or whatever
21:32 - you're kind of like yeah that makes
21:33 - sense which order should I start this in
21:35 - anyway moving on so then what we do
21:38 - after we've created the the player and
21:41 - worked with defining the keyboard keys
21:44 - is that we create the enemies so the
21:47 - enemies we're going to use we're gonna
21:49 - create a group of them firstly as I
21:51 - mentioned before and we're gonna use the
21:53 - image that's called baddie and we are
21:56 - going to repeat this the number of times
21:58 - that we created defined in the enemies
22:01 - to spawn above so if you don't remember
22:03 - what that looks like it's up here it's
22:05 - this and it's that cool so what we then
22:10 - do is we go through each of these
22:13 - enemies that we created and make sure
22:16 - that it's actually on the screen which
22:19 - is fun and we do that because otherwise
22:22 - we want to actually like randomize where
22:23 - they're showing up so that's what this
22:26 - code is here if you want to walk through
22:27 - this in the actual code pen that I
22:29 - created it's there but what it's
22:31 - basically saying is
22:33 - if it's off the screen then put it back
22:35 - on the screen and it's doing that for
22:39 - both the X and the y vertices so just
22:42 - making sure that these things are on
22:44 - screen if they are like half cut off for
22:46 - some reason it's fun and that's just
22:49 - like check saves anyhow moving on we
22:51 - also want to create animations for the
22:53 - enemies because we have a safe version
22:55 - and an unsafe version and then once we
22:58 - do that we want to update the physics
23:00 - colliders like the actual bodies for
23:02 - them and there's a way to see what that
23:05 - looks like that I'll show you in a
23:06 - moment after I go through the create so
23:08 - you can see what this config looks like
23:09 - for example and then what I'm gonna do
23:12 - is generate the actual text for the
23:14 - score I'm gonna put it at 32 X 24 Y and
23:18 - it's gonna use the score string that we
23:20 - made above plus the actual score number
23:22 - which at first is zero and we're going
23:24 - to keep it invisible until we actually
23:26 - let the player click the screen and we
23:29 - do the same thing for the HP and then we
23:32 - actually generate our intro text and we
23:34 - show it on the screen which is why we
23:36 - don't have the visible equals false
23:38 - there and then what we do is we say when
23:41 - the input is or when the game object
23:44 - itself is clicked and the game has not
23:46 - started yet start the game and then we
23:49 - generate this timer and when that timer
23:53 - runs what its gonna do is switch the
23:56 - enemies from safe to unsafe and then
23:58 - what we also do is we say that if the
24:01 - player and the enemies overlap and the
24:04 - enemies are actually like a group so
24:05 - every single one of these that you see
24:07 - on the screen is a part of that group so
24:09 - if this player interacts with any of
24:11 - these enemies then it's going to create
24:14 - it's gonna run this collide with enemy
24:16 - function so now what I'm gonna do very
24:18 - quickly is go down here to show you what
24:20 - the config looks like it's probably like
24:22 - what the heck this seems like there's
24:23 - more involved and there is so these
24:28 - parts you've already seen this I
24:30 - mentioned earlier pixel art equals true
24:32 - is what actually makes the screen look
24:34 - much more crisp so if I were to not
24:37 - include that things would look very
24:38 - fuzzy and we just have a pixel our game
24:41 - so it's nice this is the physics
24:43 - definition that I mentioned so we're
24:44 - using arcade physics
24:45 - so if I change this debug to true that's
24:48 - how you spell true definitely how you
24:50 - spell true what'll happen is you'll
24:53 - actually see the physics bodies so our
24:57 - Cade physics is straight up just squares
24:59 - and rectangles but there are more
25:00 - complicated types of physics that you
25:02 - can use as well that involve actually
25:04 - defining the shapes more you can use
25:06 - circles and things like that too in
25:08 - those types of physics but arcade
25:09 - physics is very easy for if you're just
25:12 - making a simple game like this one so
25:15 - now that you know a little bit about
25:17 - that very simply you can also have
25:19 - gravity in your game but because we're
25:22 - just working in this like very abstract
25:24 - XY state where we just want people to
25:27 - like walk around and not really care
25:28 - about gravity we don't have any but it's
25:30 - really important that you do have
25:31 - physics enabled because you want the
25:34 - player to be able to actually collide
25:35 - with objects so it's very important that
25:37 - they have these bodies there which is
25:40 - the weirdest thing I've probably ever
25:41 - said and then we have one scene so all
25:45 - we say is that the scene is the gameplay
25:46 - scene and it's just easier because then
25:48 - otherwise your your object for this
25:50 - config would be massive and so at least
25:53 - breaking it up a little bit by having
25:54 - the game play scene as its own little
25:56 - object is more convenient for like
25:58 - reading through the code or at least
26:00 - that's how I felt about it
26:01 - so now that we've looked at that a
26:04 - little bit and you've seen the create
26:06 - let's actually go down to the update
26:09 - function which is where a lot of other
26:11 - stuff happens okay so what we do is we
26:18 - make sure that the players velocity when
26:19 - the game when the player is not pressing
26:22 - a button we want to make sure that the
26:24 - player object's velocity is at zero so
26:27 - they're not just like shooting off
26:28 - somewhere basically and then what we
26:31 - want to do is say if the game started
26:33 - and has not finished
26:34 - then if the cursors are moving dead or
26:39 - if they're pressed then we should move
26:40 - the player in whatever direction that
26:42 - the cursor pressed wants it to go in so
26:45 - that's left right up down cool and then
26:50 - what we do next is we make sure that the
26:53 - score is updated at any point and that's
26:55 - literally all that we're doing in this
26:58 - function so it's
26:59 - but to just break things down a little
27:00 - bit we're studying the velocity which is
27:02 - another physics property to 150 in any
27:06 - directions so that's positive negative
27:08 - in the up the horizontal or the vertical
27:11 - and then we are just saying that the
27:13 - scoretext object should be set to the
27:16 - updated version of the score and the
27:19 - score string or the hit points and the
27:20 - hit point string which are objects that
27:22 - we defined in the create function so
27:25 - everything kind of refers back to things
27:27 - that were already created which is very
27:28 - nice and then the last thing that I did
27:30 - you probably noticed that there were a
27:32 - couple of functions in there and you
27:34 - might have been like what are those so
27:36 - there are there's a function called
27:37 - switch enemies state that changes the
27:39 - enemies from safe to unsafe so when the
27:42 - game is actually running which is really
27:44 - important because there's a game over
27:45 - area in this when the game is running if
27:48 - the enemies are not safe which you can
27:50 - write in a variety of ways and I
27:52 - realized that this is the very simple
27:53 - way easier for just showing people if
27:57 - the enemies are we're not safe then make
28:01 - them safe so you're just like switching
28:03 - binaries there are a variety of ways
28:05 - that you can write this this is one of
28:06 - the simplest and easiest ways and then
28:09 - you play the animation specifically on
28:11 - the enemy object so what you have to do
28:14 - is you say for each of the children in
28:16 - the enemies group go through them and
28:19 - play this animation that's called safe
28:22 - for that enemy which is again referenced
28:25 - in the parentheses of that function and
28:27 - then you do the same thing for the
28:29 - unsafe parameters as well and then we
28:33 - also have one called collide with enemy
28:35 - which is happening between the player
28:37 - and the enemy when they collide to each
28:38 - other if you saw that overlap earlier
28:41 - that overlap property is what is
28:43 - referred to here so if the game has
28:46 - started and has not finished again
28:48 - just useful if the enemies are safe or
28:51 - are not safe rather then you subtract
28:53 - hit points and if the enemies are safe
28:55 - then you add to the score and then when
28:59 - the enemy is touched in either either
29:01 - way you want to make sure that you're
29:02 - actually disabling it so what that does
29:05 - is it hides it basically and doesn't
29:07 - make it a functioning part of the game
29:08 - anymore and then you subtract from the
29:10 - number of N
29:10 - he's left and then what you do is you
29:13 - end the game whenever necessary so if
29:16 - the hit points are zero or are less than
29:19 - zero you want to actually kill the game
29:21 - and you can I pulled out kill game
29:25 - because there are a couple of things
29:26 - that were being written twice as you can
29:27 - see below and so it was easier to just
29:29 - kind of like write them once and
29:31 - reference them so you kill the game and
29:32 - then you change the intro text to say
29:34 - either game over or great job you want I
29:37 - did not win
29:38 - so it says game over rerun to play again
29:41 - but if I did win by making sure that my
29:45 - hit points were over zero and the
29:46 - enemies left were less than zero then
29:49 - that would be cool I also should
29:52 - probably have that anyway continuing so
29:55 - we have this function that's called
29:56 - start game that's run only when you
29:59 - click when you click here so that's this
30:02 - so what that does is it hides the it
30:06 - hides some things and it unhides other
30:08 - things so it sets intertext to false in
30:12 - terms of visibility and then it sets the
30:15 - score text to actually show up same with
30:17 - the hit point text and then it says the
30:19 - game has started but the game it's not
30:20 - ended Wow and then finally the last
30:23 - thing that is a function in here is when
30:25 - we kill the game so we say that the game
30:27 - has ended the player should not move
30:29 - anymore again really important the intro
30:33 - and the intro text is now visible again
30:36 - but it's changed to a different text you
30:38 - can also pull those out into separate
30:39 - like win or lose things if you wanted
30:41 - the score text and the hit points text
30:44 - are no longer visible and that's pretty
30:47 - much what happens so just running
30:48 - through this again you just kind of like
30:52 - poke around and hope that you don't oh
30:55 - oh no oh no yes gonna win this time it's
31:03 - the simplest of okay cool oh that's why
31:05 - I included the less than C this is what
31:07 - happens when you live edit your code
31:10 - anyway imagine that there was one less
31:13 - there and all as well cool and that's
31:15 - pretty much how to make a game with
31:17 - phaser a couple of more things to note
31:19 - that I wanted to just note before
31:23 - we're done it's gonna go through all the
31:27 - slides again that's great okay so if you
31:30 - wanted to learn a couple of more things
31:31 - about phaser specifically as I mentioned
31:34 - the official the official phaser website
31:40 - is phaser dot IO it's all the way up
31:42 - there yeah and phaser three examples if
31:47 - you're interested in the newest version
31:48 - of phaser three then you can go to labs
31:51 - phaser do the template that I made the
31:55 - first thing that I showed you is
31:56 - available at this very long link or you
31:59 - can just go to code pentaiah slash Kat
32:01 - small you can just go to that part and
32:03 - then you can click around you can see
32:05 - under my projects there is this one
32:07 - template if you are interested in the
32:08 - sample game that I just showed you it's
32:10 - at this pen with the gvj EP m that one
32:15 - or again you can just go to code pen dot
32:17 - io / Kat small if you have any other
32:20 - questions you can find me on the
32:21 - internet but you can tweet me or you can
32:24 - visit my website or if you want to play
32:25 - my games it's that cat small HD IO thank
32:29 - you
32:30 - it's been real yell at me that mic will
32:43 - pick me up first of all thank you so
32:44 - much that was awesome yeah it's also
32:50 - really interesting like I do most my
32:51 - tour tutorials and p5.js I'm trying to
32:53 - make some games and I usually watch them
32:55 - and have a design but it's really
32:56 - interesting to see you know oh there's
32:59 - all these conventions of kinds of modes
33:01 - and things that happen in games it makes
33:03 - sense to have a library that like just
33:05 - has all those bills so it's useful I
33:08 - think formal learning you have to like
33:10 - show the camera camera so so if you have
33:17 - a few more minutes
33:18 - yes I'm gonna I'm gonna I'm gonna ask
33:20 - some questions yeah but I pulled from
33:22 - the chat first of all Richard Davey
33:24 - who
33:28 - well this is just what I was like trying
33:30 - to learn this board and now I'm watching
33:32 - a livestream about it and the creator of
33:33 - the libraries in the chat Richard you're
33:35 - great
33:36 - so first let me just mentioned everyone
33:38 - watching because this was asked many
33:40 - times so this will definitely be
33:42 - archived and available forever but so
33:51 - this will be there I also will likely
33:53 - make an edited down version of this I'm
33:56 - just that some people who like to some
33:58 - people prefer the live streams and some
34:00 - people prefer to watch that don't want
34:01 - to watch the first five minutes of
34:02 - fumbling with the microphone so that
34:04 - will come out at some point I think and
34:07 - then also all of these links to cats
34:09 - website and to the game template and all
34:13 - of that in the presentation but there'll
34:15 - also be when this video gets published
34:17 - will actually be links you can click on
34:18 - in the video description okay so let me
34:22 - look for some of these questions okay so
34:23 - I actually this was my question to those
34:25 - kind of curious about there's some
34:26 - really specific technical questions but
34:28 - a very sort of broad general question we
34:30 - can ask by math blank so have you used
34:32 - other game frameworks and what
34:35 - advantages say or disadvantages to have
34:38 - over other ones some that people
34:40 - somebody I don't know yeah I think about
34:41 - these someone in the chat mentioned
34:43 - constructs yeah yeah
34:46 - so I personally use construct two I've
34:48 - also used unity and I've tried with a
34:52 - couple of other ones like back in the
34:53 - day I think I don't know if impact is
34:55 - still like a thing but anyway I tried
34:56 - that I've also tried some stuff with
34:59 - like game maker studio what I'll say is
35:02 - that phaser is really good for making
35:06 - games that you want to host on the web
35:09 - and also package for like applications
35:11 - and things like that
35:12 - it's like specifically made for that
35:14 - construct to you is as well but it's
35:16 - much it's more challenging to work with
35:19 - if you know how to program which is like
35:22 - weird thing to say
35:23 - you can definitely like build your own
35:24 - plugins and stuff like that using actual
35:26 - programming but like I found that for a
35:29 - person like me who just wants to be able
35:32 - to like pack away at stuff and like just
35:34 - directly program phaser is much better
35:38 - for like html5 game development
35:39 - specifically
35:42 - I don't really have a fun time with it I
35:44 - feel like unity is is great at what it
35:46 - does if you are looking to launch on
35:49 - consoles or things like that but
35:51 - especially lately as chrome has changed
35:54 - the way that it works with programs like
35:57 - unity for example you can't at least
36:00 - last I checked you couldn't host unity
36:02 - game or you couldn't play unity games on
36:04 - Chrome like very easily and I don't know
36:07 - if that's changed since the like the
36:09 - last five months but that was a really
36:11 - big unity killer in terms of web game
36:13 - development for me and I specifically
36:15 - want to make things that anyone can play
36:17 - and phase there because it is just a
36:20 - JavaScript framework that you literally
36:22 - are hosting on a webpage is the easiest
36:24 - way to do that so I find that if that's
36:26 - what you want to do or if you want to
36:28 - also have a game that you can play on
36:29 - the web that is also working on apps
36:31 - it's perfect for that use case and so
36:33 - right so you could pack it you can use
36:35 - phaser and package your game into losing
36:38 - like PhoneGap yeah and make it into apps
36:40 - you could also make an electron app yeah
36:41 - like a desktop thing exactly it's great
36:45 - okay
36:46 - Oh somebody asked I don't think this
36:48 - person is actually Friedrich Nietzsche
36:55 - because there's like phaser three yeah
36:58 - but maybe some of the tutorials or some
37:01 - of these like phew so three is kind of
37:02 - knew it if you're a total beginners it
37:04 - has to get started with phaser three
37:05 - mm-hmm using the most current good
37:08 - question um so I would say that there is
37:12 - a very basic getting started with phaser
37:14 - that's like using the newest and it's
37:17 - like the newest tutorial that's using
37:19 - the newest version so if you're looking
37:21 - to get into using phaser I would highly
37:23 - suggest that if you feel like you need a
37:25 - lot of documentation there is like the
37:28 - labs mate link that I mentioned up there
37:30 - and that's really helpful but I will
37:33 - also say that there is just because of
37:36 - time a lot more documentation on phaser
37:39 - to but that is not the that's not the
37:42 - way it's working any pores so I wouldn't
37:44 - really recommend it because they did a
37:46 - pretty large rewrite so I would highly
37:47 - recommend trying to use the newest
37:50 - version and just working with that
37:51 - tutorial there's a couple of other
37:52 - tutorials as well
37:53 - and there's like many many more that are
37:55 - being added day by day and week by queex
37:57 - so I would recommend trying the newest
38:00 - thing and just seeing how that works for
38:02 - you and if you find that you are just
38:05 - looking for something to just try making
38:08 - a game in general maybe I don't I don't
38:09 - know I feel like it's easier to just
38:11 - like go with what is the newest thing
38:13 - it's kind of I mean there might be some
38:15 - conceptual aspects that probably go
38:17 - across later but I think it probably
38:21 - makes sense to work with the most recent
38:23 - one and then kind of help contribute to
38:25 - it right yeah exactly there's like a
38:28 - forum and everything so you can ask all
38:30 - these kinds of questions in terms of
38:31 - like I can't figure out how to do this
38:33 - one thing and there is no document for
38:35 - it yet and then you can help actually
38:37 - make it which is a great point one thing
38:38 - I noticed about the game that you're
38:39 - showing us is that you showed us is that
38:42 - it has a sprite so although these are
38:44 - images and a lot of the stuff that I do
38:45 - or at least that I've seen that people
38:46 - do from watching the videos the more
38:48 - algorithmic or generative graphics does
38:50 - it have a drawing functionality or would
38:52 - you pair phaser ever with like another
38:54 - library like five paper or some just
38:58 - native canvas in terms of like actually
39:01 - making it so like there there is
39:02 - actually a way to include like tile maps
39:05 - and stuff like that if that's kind of
39:07 - what you're referring to I guess if you
39:08 - wanted to custom draw with like lines
39:10 - and shapes oh like on the actual screen
39:12 - on the screen instead of because it is
39:14 - it is it rendering stuff to you a canvas
39:17 - or no it's all it is a canvas yeah yeah
39:19 - yeah so I mean you can you can just draw
39:21 - two you can do anything you want yeah
39:22 - it's like you can actually just use this
39:23 - with straight-up JavaScript you can kind
39:25 - of do anything you want with it which is
39:26 - great and I have so the other thing
39:29 - that's nice about it is that I've done
39:30 - things like I made a game that I need to
39:34 - figure out how to put on my actual list
39:36 - of games but it's a game where it uses
39:38 - the leap motion so it's like using like
39:40 - recognition of your actual body motion
39:42 - and it's using the leap motion plug-ins
39:45 - for that and then it works really
39:47 - seamlessly so yeah you can do lots of
39:49 - stuff with it which is great because
39:51 - it's just a describe to be interesting I
39:52 - mean there is actually a library for p5
39:54 - and that's I don't know if it's still
39:56 - maintained but called p5 play mm-hm yeah
40:00 - but interesting to see if I if like I
40:02 - could make a you know a simple example
40:05 - that uses phaser for the physics yeah
40:07 - main mechanics but uses p5 for the
40:10 - drawing of the shapes very possibly I
40:11 - could see that working pretty easily
40:13 - another question that Ellen dole in the
40:15 - chat asked which I was curious about to
40:17 - I mean I think I know the answer to this
40:19 - but if you wanted to do something that's
40:20 - multiplayer and network based that's
40:22 - something that you would probably I
40:24 - guess do separately that you'd have to
40:27 - you and you know you'd most likely as
40:29 - far as I know I haven't really delved
40:32 - too much into that yet but my assumption
40:34 - would be that again you because it's
40:36 - like straight up just JavaScript you
40:38 - could make that work pretty simply which
40:40 - is convenient but maybe richard has more
40:43 - information about that Roberta chat just
40:45 - now it has a graphics API lines circles
40:48 - polygons yeah we've got a lot of
41:03 - properties so I think we get kind of
41:05 - rough I guess I'm just curious just
41:07 - generally speaking like where do you do
41:10 - independent game developer I assume so
41:12 - where do you come up with your ideas for
41:14 - games and do do user testing like house
41:16 - that is a huge question obviously how
41:20 - does that like how's that process for
41:22 - you how long does it take to make it go
41:24 - very loosely yeah so some games I make
41:26 - in like three days with a couple of
41:28 - people like I go to a lot of game jams
41:30 - which are like usually like 24 or 48
41:33 - hour time periods where you sit in a
41:35 - space with people and you you have an
41:38 - idea usually that's based on like a
41:39 - theme so they're like they give you a
41:40 - theme and then they're like go have fun
41:42 - and then you have 48 hours to make the
41:44 - thing and usually the elongated versions
41:48 - of that when I've made games for I've
41:50 - made a game that took like nine months I
41:52 - made a game for one of my thesis
41:54 - projects I also I'm still working on
41:57 - some and I'm working on them for like
41:59 - several years but usually it's like the
42:01 - idea is either like inspired by a theme
42:04 - from the game jam or it's like oh this
42:06 - random part of my life would be really
42:08 - cool as a game so like one of the things
42:12 - that I worked on my first actual game
42:14 - that I coded by myself which was like
42:16 - very exciting was a game where you are
42:19 - trying to get to the train and you have
42:20 - to like shove and kick people out of
42:22 - your way and they just like fly around
42:24 - which is like my first use of fun games
42:26 - physics and that was really fun and it's
42:28 - like a very real slice of life kind of
42:30 - thing and I find something really fun
42:32 - about those kinds of games and then
42:34 - usually how it works is you get the idea
42:37 - and then I figure out like okay now that
42:39 - I know like the narrative idea / the
42:41 - main mechanic like how does that work in
42:43 - a larger context and then I try to
42:46 - figure out like what the rules are what
42:48 - this world of the game is and then I
42:51 - just kind of like start prototyping and
42:53 - experimenting get the basics working I
42:56 - usually do a lot of play testing with
42:58 - people even if it's a 48 hour game I try
43:01 - to find someone who can just play it
43:03 - like friends and people like sort of
43:05 - you're directly sitting with a watching
43:06 - employee yeah yeah so I've done a couple
43:11 - of things where I've had people like use
43:14 - a Google forum and I'll just like send
43:15 - it out on Twitter or like Facebook and
43:17 - I'm like hey can you just try this thing
43:19 - and like see what it's like
43:20 - just like fill out this form and like
43:22 - let me know your feelings about it and
43:23 - people always have a lot of really
43:25 - helpful things to say yeah so I'm a huge
43:27 - fan of just getting stuff out there and
43:29 - seeing what people think awesome just
43:31 - checking somebody saying phasors working
43:40 - okay but lots of wonderful thank you for
43:42 - all these messages in the chat um thank
43:44 - you so much Kat for being here I'm good
43:47 - to make an edited version of this but
43:49 - there's not very much to edit so let's
43:51 - do it anyway at least so I can do a much
43:53 - better introduction to views I feel like
43:55 - I wasn't prepared to talk about all your
43:57 - wonderful so thank you for watching
44:01 - again this this will remain online on
44:04 - the on my youtube channel you can ask
44:07 - questions also in the comments and I
44:09 - will try to answer them or retrieve
44:10 - answers to them if I can you can find
44:12 - Kat on Twitter and all the other various
44:14 - lengths of they're right here still
44:17 - questions
44:18 - I hope to do I'm so glad to be finally
44:20 - getting back in the rhythm of having
44:21 - some guests cuz that there's only so
44:24 - much you know as we can see there's a
44:27 - lot more there's a lot of interesting
44:29 - wonderful stuff happening in the world
44:30 - code even stuff that I don't know
44:32 - anything about so thank you so much I'm
44:35 - going to do the very awkward thing
44:36 - everything that's a stop streaming and
44:42 - then we'll be gone I will be back just
44:44 - to mention it's a I'll be back and
44:46 - around probably 4 p.m. to do a tutorial
44:50 - about using quadtrees for collision
44:52 - detection stuff yeah so I'm like oh and
44:59 - then okay you go say Kate so it's
45:04 - quadtrees at 4 oh yes yes goodbye

Cleaned transcript:

as if I don't do this every Friday there's a good chance now that this is actually live so hello this is I am dan Shipman welcome to a surprise Kotick trade I have a train whistle it's embarrassing but I do have one oh I see myself so this is actually working all right so this is kind of a surprise I have a really exciting guest you can see oh I can't walk all the way over there you can see her Twitter handle down there cats mall I have been probably she's standing over here which is why I might look over here for a second I have been emailing with cat for probably like a year and I keep messing up the schedule it's usually my fault so I'm so excited that this is finally happy happening today it's definitely been a topic that's requested a lot other JavaScript libraries besides like p5.js game development stuff there's a library that you might have heard called phaser and so without spending too much time doing an introduction cat is amazing you should check out her website all of her work she does a lot of stuff with game development and other types of things and so we'll work this is gonna be a little awkward here but what I'm going to do so this is gonna be a short livestream I'm gonna be back later this afternoon in a few hours for like my regular livestream which I'm going to try to build a quadtree example but what's gonna happen is I'm going to awkwardly in a moment take off this microphone and hand it to Kat she's going to not awkwardly very gracefully put on with microphone and and then come and do a short presentation about phaser and an example show you an example it's gonna be short I'm gonna watch the live chat to see if there's any and I try to accumulate a few questions so you can ask those questions in the live chat and then maybe we'll have you know ten minutes or so after she shows some stuff where I'll ask a few of those questions I'm trying to think of anything else that I'm forgetting that's important I'm looking at people are saying hello okay so what I'm gonna do first here and is just mute the microphone so it doesn't make horrible while we're transferring it you okay unmuted hello hi I'm from the internet hopefully you can hear me okay humans if you can't then you can tell the Internet well it'll be great oh oh nice cool well now that the camera has randomly shut off and turned back on you can see me again hopefully cool hi this is phaser game development I'm gonna show you how I make it browser friendly games so firstly I am cat small I am a game programmer a game designer I'm also a product designer at Etsy and I also make lots of art mostly on Instagram and sometimes on Twitter if you want to play my games you can play them at cat small GGO it's like wherever right there yeah but we're not here to only talk about my games today we are here to talk about making games ah so I often use a JavaScript framework called phaser and I use it because I am mostly a web programmer by day and so it's much easier for me to switch contacts if I'm using the same language you can make language or you can make games with lots of languages for example csharp if you use unity but I find that phaser is much closer to what I'm using during the day so it's really convenient and specifically phaser is an opensource JavaScript framework and my framework that means that it's a set of code that enables you to make things without having to reinvent the wheel things that have already been created lots and lots of times for example physics and games like we've pretty much standardized that so it's easier to use a framework than having to write your own physics engine from scratch also open source means that phaser is free to use and it's constantly updated but usually when you use phaser you actually pull a version of it to your computer so that's like whatever version you're using that point in time is the one that you will continue to use so you don't have to worry about it being updated randomly on you which if you've used certain game engines you're very familiar with the suffering of random updates and the other thing that's really nice about it being open source is that you can actually contribute to its development so lots of people are contributing to making phaser better it also has a patreon that you can support it which is really cool and the other nice thing is that originally phaser was built by a company that actually also made and makes html5 games and they made this tool because when when flash was basically destroyed by Apple back in the day when they announced that the newest iPhone was not going to include flash they decided that it was time to figure out a good framework for the platform for the web and there weren't a lot of tools at the time that we're doing such a good job so they took it into their own hands and that's how we ended up here so the newest version of phaser the current version is the third one it's like it was 3.0 now they're at like 3.2 or something like that and that's the one that I'm gonna be working in today they are still working out some kinks which is why it's at point two at this point but the improvements to this version include a better game camera new properties for game objects which make it easier for you to custom build things that you want to build it also has crisper pixel art which honestly for a while was pretty challenging because sometimes the sprites would be fuzzy and now there's actually builtin support and you can just type one thing that says pixel art equals true and then all the art is beautiful which is amazing and there's also an improved scene manager so that's how you actually build levels in the game and now they've done a lot of reworking to that so before I show you how I work in phaser some things that I wanted to note really quickly are I'm just going to kind of go through them but every framework in game engine has its own quirks so these are just some things to keep in mind it's not like a oh no don't you this it's more of a hey keep this in mind if you decide that you want to work with phaser so firstly phaser uses JavaScript as I mentioned so for security reasons it requires a server to run so when you're working on the game on your local computer you can create a local server using Python or PHP you can use your command line to create one of those or you can use a program like xampp or any of the other programs that you might have used in the past if you've ever worked with wordpress for example to host a web site what this does is it allows you to run phaser games without an internet connection so you're basically replicating what it's like to actually play a game your game for example on the internet next Cesar uses JavaScript again and usually when you're writing JavaScript you're working in a code editor there are a couple of visual editors out there but because phaser is constantly updated in it's open source and these editors are not usually affiliated directly with phaser those might be a couple of versions behind so if you for some reason are really attached to the version that I'm about to show you be warned that some of the visual editors may not be that uptodate yet so if you're interested then I would suggest maybe just using sublime text or vim if you're that kind of person or whatever code editor you prefer and finally if you have made a game before then you have heard of the game loop and usually that just involves creating the game's initial state so that's known as the create function and then you update the game every millisecond or so and that's called the update function so the create function runs once and then the update function continues to run as the game is updated phaser actually has a third part of the sleep that runs before the other two and that's called the preload function and what that does is it allows you to preload files from the server or around the internet so for example if you wanted to use google fonts that is how you would preload google fonts before you actually ran the game so I'm going to show you what all that means if you're kind of like what so now that you know these things we can actually start and I'm going to walk through how I made a very simple game using phasers newest version so what I'm gonna do first is I'm gonna show you how I usually separate my files because usually I am making games that have multiple scenes or levels and then after I do that I'm gonna show you a simple game that I made using phasers template art which you can see up here looks really cute thank you phaser for actually including some really adorable art to use and it only has one scene so I put everything in one file so that you could go through and look at it and I'm gonna be using code pen which was really convenient and what you can do after this or even during this if you want to walk through at the same time is you can go to code pen do slash cat small and the stuff is there which is great so hopefully this will show you two ways that you can work with phaser one for simpler games and then once you are feeling like going more advanced then you'll be able to easily do that as well cool goodbye cool slides cool so this is what a version of my templates usually look like I'm gonna really quickly attempt to see if I can resize this because the font is so small oh there it is it's so convenient maybe like 20 hopefully that looks good to people or maybe I should just go all the way 26 I'm gonna go 20 and hope that people can see 20 if anyone can't see this is why we have feedback I'm gonna just reload it yeah that's beautiful okay sweet so I'm just gonna size this a little bit bigger so I can kind of show you more okay cool so how I usually organize things is that I have an index file that kind of just like holds and loads all of the the JavaScript his phaser is all JavaScript so what you usually want to do what you have to do is you have to load in the phaser JavaScript first and you can download that from phaser IO now you see oh my bookmarks they're great and what you do is you just go to download and then you can download it and it's awesome then what you do is you include any game files that you wanted to include so in this case I usually have global variables I also have a file that pre loads all of my files upfront just because I would rather have there be one time period where everything is pre loading at once and then I don't have to worry about my scene my scenes constantly loading between them or things loading between my scenes but you can organize things however you want which is great and then what I do is I usually have a main menu a gameplay state and then I would have a wins day to lose state etc however many scenes I wanted to have in my game I would put them in separate files and I'll show you what those contain in a moment so once all these files are load loaded which is why they are in the head tag in your HTML what you do is you have a body tag which is how every website is created and inside the body tag I put I usually this is where I usually put my JavaScript specifically for instantiating the game so what I do is I say on page load create this game config that contains a couple of things including the type of descending that we're going to use it can be phaser you can have phaser choose it automatically there are also a couple of other display settings that you can choose from you can tell phaser that the container should have a certain width and height and then for the scene we're actually giving in this object that's called my game dot scenes which I will tell you about more in a second and then once you actually have the configuration you can say variable game is a new version or a new instance of the phaser game class and you're pulling in the config that you just created so next I'm gonna go to the next file that was included up here which is the global variables where all I am doing is saying my game equals blah and then the scenes contain an array of scenes and then I also defined a framerate and this is where I put any other thing I want to kind of refer to a bunch so that when I if I ever need to adjust something across all my files I just have it in one convenient spot everyone kind of does their global variables in a different way and I just found this to be the most convenient tbh so next what I do is I created two states as I mentioned there's one or three states sorry there's one that I just used for pre loading so in the preload state I'm creating a new class of this scene called preload and then what I'm doing is I would put anything that I wanted to load in first in here and then next I would just start the main menu and then the same thing in the main menu I would just right now there's nothing in it so this is just a template but I would start the gameplay but if you wanted to actually do something you would do that stuff in the create section so one thing you'll also note is at the bottom of each of these you I wrote some code that adds the scene to the list of scenes that were in the global variables and that just makes sure that all these scenes are going in the order that I want them to and they're going in the order that they are loaded on the original HTML page so that's how I usually create my more complex games if your brain has exploded a little bit that's fine but what I'm gonna do now is go through a simpler game that I made in a single javascript file and there is no HTML involved at all I wrote some minor CSS just so that the spacing is a little bit tighter on the page itself but everything else is contained in this singular JavaScript file so just gonna like go through it and I'm gonna have to move myself out of the way slash resize this a little bit okay I can go this way yeah cool did it okay so we're gonna start from the top so if you're just using a singular file what you can do is define and declare all of your objects in a single place so at the top I usually put the main things that I want my game to be aware of the player which will eventually be defined more the enemies which is for now in a the number of enemies I want to spawn which I can change at any point from right here for now the enemies that are left are the number of enemies to spawn but later that's going to change because the point of this game is that we're gonna clear the enemies when they're weak so we're going to go up to them we're going to touch them and then if they are not weak then we lose health and that's kind of how the game works there's like a positive and a negative reinforcement that we're giving to people here so right now we're gonna define at the beginning that maybe the enemies are safe and then over time that's going to change we have a number of hit points which is five we are defining a string and then an object that will later contain that string the score which is 0 etc we've got some text objects and then we also have a couple of other things that we're including which we'll say is the game has the game started yes or no and then has the game finished yes or no and that's how we know if the game is currently running so then everything is contained within this gigantic gameplay state which is super fun so how it works is just going back up to the top here so as I mentioned before we have a lot of stuff in this one file or in this one scene so we're in this scene we're actually going to do the following I'll play through it really quickly so when you click on the game it starts and then you can move around and when they are pink they are not safe when they are inverted they are safe for you to touch so if I go up to one right now my HP went down oh no oh no oh no game over and then I didn't really include a easy way to actually restart the game so I just rerun it so that's what we're making if you were curious okay so cool so the first thing we have to do is actually load the assets for this game so how you do that is there are a couple of types of images and sprites that are included in phaser one is a straightup image the other type is a sprite sheet so you can say how much a single frame width and height are for a sprite sheet itself for Images you just say hey load this image and this is what its gonna be called so I have an object called sky I have an object called dude and I have an object called Maddy or these are like sprite sheets and images rather they are not objects yet and those are the only things that I'm including in the preload function so what I do next is I go down to the create function where it which is where you set up the actual scene once the files have loaded so what I'm doing here is actually creating the background and I create the background first because all the other objects I create are gonna go on top of the background so you want to make sure that you put that in first and you instantiate things in the order that you actually want them to show up on the screen although you can also change the ZN index which is like x y and z so you can change the direction or the order of things if you want to as you're going through but why do that this is a simple game so we're just gonna go with it so what I do next is I actually create the player and then I'm using phasers animations properties to create these global animations that I can use at any point in time so just breaking down the player really quickly how it works when you want to create a sprite object is you say this don't add that sprite you'll notice that there's this physics thing in here and I'm gonna talk a little bit more about that later but phaser has a phaser 3 especially has a new way that they're defining physics so it's actually defined from a global standpoint rather than within the individual scene so this dot physics just refers to the game object which has physics in it and we're adding the sprite to the game object and it is at the 32x and it is at the height that we define below I'll describe the Hat or show that more in a second and it's using the image that we called dude which if you remember was dude so hopefully that makes some sense and what we're gonna do next is again I mentioned creating these image these animations so what we're doing is we're naming it this key is going to be called left or this animation is going to be called left the frames that we're using our dude the first frame and that's it and then we're creating one that's down left right we're doing down writing up as well so if we go over here what that looks like is this and I'll show you how we call that as well and some time just kidding so now what we're doing is we're saying that the player should actually collide with the edges of the screen which is useful because we don't want the player to walk off the edge and then disappear it's not exactly fun and then what we do once we've defined all the stuff around the players we're saying hey this is how we can include keyboard input because we're gonna need that at some point so what you do in that case is you say the cursors in this are going to be the the game object should take in the input method of the keyboard and it should create the cursor keys which are up down left and right arrows so it's convenient that phaser again just has some of these things built in so you don't have to go about defining the keyboard keys manually which is not fun and you can have this in here or not I just put it in here because whatever when you're programming it like 9 p.m. or whatever you're kind of like yeah that makes sense which order should I start this in anyway moving on so then what we do after we've created the the player and worked with defining the keyboard keys is that we create the enemies so the enemies we're going to use we're gonna create a group of them firstly as I mentioned before and we're gonna use the image that's called baddie and we are going to repeat this the number of times that we created defined in the enemies to spawn above so if you don't remember what that looks like it's up here it's this and it's that cool so what we then do is we go through each of these enemies that we created and make sure that it's actually on the screen which is fun and we do that because otherwise we want to actually like randomize where they're showing up so that's what this code is here if you want to walk through this in the actual code pen that I created it's there but what it's basically saying is if it's off the screen then put it back on the screen and it's doing that for both the X and the y vertices so just making sure that these things are on screen if they are like half cut off for some reason it's fun and that's just like check saves anyhow moving on we also want to create animations for the enemies because we have a safe version and an unsafe version and then once we do that we want to update the physics colliders like the actual bodies for them and there's a way to see what that looks like that I'll show you in a moment after I go through the create so you can see what this config looks like for example and then what I'm gonna do is generate the actual text for the score I'm gonna put it at 32 X 24 Y and it's gonna use the score string that we made above plus the actual score number which at first is zero and we're going to keep it invisible until we actually let the player click the screen and we do the same thing for the HP and then we actually generate our intro text and we show it on the screen which is why we don't have the visible equals false there and then what we do is we say when the input is or when the game object itself is clicked and the game has not started yet start the game and then we generate this timer and when that timer runs what its gonna do is switch the enemies from safe to unsafe and then what we also do is we say that if the player and the enemies overlap and the enemies are actually like a group so every single one of these that you see on the screen is a part of that group so if this player interacts with any of these enemies then it's going to create it's gonna run this collide with enemy function so now what I'm gonna do very quickly is go down here to show you what the config looks like it's probably like what the heck this seems like there's more involved and there is so these parts you've already seen this I mentioned earlier pixel art equals true is what actually makes the screen look much more crisp so if I were to not include that things would look very fuzzy and we just have a pixel our game so it's nice this is the physics definition that I mentioned so we're using arcade physics so if I change this debug to true that's how you spell true definitely how you spell true what'll happen is you'll actually see the physics bodies so our Cade physics is straight up just squares and rectangles but there are more complicated types of physics that you can use as well that involve actually defining the shapes more you can use circles and things like that too in those types of physics but arcade physics is very easy for if you're just making a simple game like this one so now that you know a little bit about that very simply you can also have gravity in your game but because we're just working in this like very abstract XY state where we just want people to like walk around and not really care about gravity we don't have any but it's really important that you do have physics enabled because you want the player to be able to actually collide with objects so it's very important that they have these bodies there which is the weirdest thing I've probably ever said and then we have one scene so all we say is that the scene is the gameplay scene and it's just easier because then otherwise your your object for this config would be massive and so at least breaking it up a little bit by having the game play scene as its own little object is more convenient for like reading through the code or at least that's how I felt about it so now that we've looked at that a little bit and you've seen the create let's actually go down to the update function which is where a lot of other stuff happens okay so what we do is we make sure that the players velocity when the game when the player is not pressing a button we want to make sure that the player object's velocity is at zero so they're not just like shooting off somewhere basically and then what we want to do is say if the game started and has not finished then if the cursors are moving dead or if they're pressed then we should move the player in whatever direction that the cursor pressed wants it to go in so that's left right up down cool and then what we do next is we make sure that the score is updated at any point and that's literally all that we're doing in this function so it's but to just break things down a little bit we're studying the velocity which is another physics property to 150 in any directions so that's positive negative in the up the horizontal or the vertical and then we are just saying that the scoretext object should be set to the updated version of the score and the score string or the hit points and the hit point string which are objects that we defined in the create function so everything kind of refers back to things that were already created which is very nice and then the last thing that I did you probably noticed that there were a couple of functions in there and you might have been like what are those so there are there's a function called switch enemies state that changes the enemies from safe to unsafe so when the game is actually running which is really important because there's a game over area in this when the game is running if the enemies are not safe which you can write in a variety of ways and I realized that this is the very simple way easier for just showing people if the enemies are we're not safe then make them safe so you're just like switching binaries there are a variety of ways that you can write this this is one of the simplest and easiest ways and then you play the animation specifically on the enemy object so what you have to do is you say for each of the children in the enemies group go through them and play this animation that's called safe for that enemy which is again referenced in the parentheses of that function and then you do the same thing for the unsafe parameters as well and then we also have one called collide with enemy which is happening between the player and the enemy when they collide to each other if you saw that overlap earlier that overlap property is what is referred to here so if the game has started and has not finished again just useful if the enemies are safe or are not safe rather then you subtract hit points and if the enemies are safe then you add to the score and then when the enemy is touched in either either way you want to make sure that you're actually disabling it so what that does is it hides it basically and doesn't make it a functioning part of the game anymore and then you subtract from the number of N he's left and then what you do is you end the game whenever necessary so if the hit points are zero or are less than zero you want to actually kill the game and you can I pulled out kill game because there are a couple of things that were being written twice as you can see below and so it was easier to just kind of like write them once and reference them so you kill the game and then you change the intro text to say either game over or great job you want I did not win so it says game over rerun to play again but if I did win by making sure that my hit points were over zero and the enemies left were less than zero then that would be cool I also should probably have that anyway continuing so we have this function that's called start game that's run only when you click when you click here so that's this so what that does is it hides the it hides some things and it unhides other things so it sets intertext to false in terms of visibility and then it sets the score text to actually show up same with the hit point text and then it says the game has started but the game it's not ended Wow and then finally the last thing that is a function in here is when we kill the game so we say that the game has ended the player should not move anymore again really important the intro and the intro text is now visible again but it's changed to a different text you can also pull those out into separate like win or lose things if you wanted the score text and the hit points text are no longer visible and that's pretty much what happens so just running through this again you just kind of like poke around and hope that you don't oh oh no oh no yes gonna win this time it's the simplest of okay cool oh that's why I included the less than C this is what happens when you live edit your code anyway imagine that there was one less there and all as well cool and that's pretty much how to make a game with phaser a couple of more things to note that I wanted to just note before we're done it's gonna go through all the slides again that's great okay so if you wanted to learn a couple of more things about phaser specifically as I mentioned the official the official phaser website is phaser dot IO it's all the way up there yeah and phaser three examples if you're interested in the newest version of phaser three then you can go to labs phaser do the template that I made the first thing that I showed you is available at this very long link or you can just go to code pentaiah slash Kat small you can just go to that part and then you can click around you can see under my projects there is this one template if you are interested in the sample game that I just showed you it's at this pen with the gvj EP m that one or again you can just go to code pen dot io / Kat small if you have any other questions you can find me on the internet but you can tweet me or you can visit my website or if you want to play my games it's that cat small HD IO thank you it's been real yell at me that mic will pick me up first of all thank you so much that was awesome yeah it's also really interesting like I do most my tour tutorials and p5.js I'm trying to make some games and I usually watch them and have a design but it's really interesting to see you know oh there's all these conventions of kinds of modes and things that happen in games it makes sense to have a library that like just has all those bills so it's useful I think formal learning you have to like show the camera camera so so if you have a few more minutes yes I'm gonna I'm gonna I'm gonna ask some questions yeah but I pulled from the chat first of all Richard Davey who well this is just what I was like trying to learn this board and now I'm watching a livestream about it and the creator of the libraries in the chat Richard you're great so first let me just mentioned everyone watching because this was asked many times so this will definitely be archived and available forever but so this will be there I also will likely make an edited down version of this I'm just that some people who like to some people prefer the live streams and some people prefer to watch that don't want to watch the first five minutes of fumbling with the microphone so that will come out at some point I think and then also all of these links to cats website and to the game template and all of that in the presentation but there'll also be when this video gets published will actually be links you can click on in the video description okay so let me look for some of these questions okay so I actually this was my question to those kind of curious about there's some really specific technical questions but a very sort of broad general question we can ask by math blank so have you used other game frameworks and what advantages say or disadvantages to have over other ones some that people somebody I don't know yeah I think about these someone in the chat mentioned constructs yeah yeah so I personally use construct two I've also used unity and I've tried with a couple of other ones like back in the day I think I don't know if impact is still like a thing but anyway I tried that I've also tried some stuff with like game maker studio what I'll say is that phaser is really good for making games that you want to host on the web and also package for like applications and things like that it's like specifically made for that construct to you is as well but it's much it's more challenging to work with if you know how to program which is like weird thing to say you can definitely like build your own plugins and stuff like that using actual programming but like I found that for a person like me who just wants to be able to like pack away at stuff and like just directly program phaser is much better for like html5 game development specifically I don't really have a fun time with it I feel like unity is is great at what it does if you are looking to launch on consoles or things like that but especially lately as chrome has changed the way that it works with programs like unity for example you can't at least last I checked you couldn't host unity game or you couldn't play unity games on Chrome like very easily and I don't know if that's changed since the like the last five months but that was a really big unity killer in terms of web game development for me and I specifically want to make things that anyone can play and phase there because it is just a JavaScript framework that you literally are hosting on a webpage is the easiest way to do that so I find that if that's what you want to do or if you want to also have a game that you can play on the web that is also working on apps it's perfect for that use case and so right so you could pack it you can use phaser and package your game into losing like PhoneGap yeah and make it into apps you could also make an electron app yeah like a desktop thing exactly it's great okay Oh somebody asked I don't think this person is actually Friedrich Nietzsche because there's like phaser three yeah but maybe some of the tutorials or some of these like phew so three is kind of knew it if you're a total beginners it has to get started with phaser three mmhmm using the most current good question um so I would say that there is a very basic getting started with phaser that's like using the newest and it's like the newest tutorial that's using the newest version so if you're looking to get into using phaser I would highly suggest that if you feel like you need a lot of documentation there is like the labs mate link that I mentioned up there and that's really helpful but I will also say that there is just because of time a lot more documentation on phaser to but that is not the that's not the way it's working any pores so I wouldn't really recommend it because they did a pretty large rewrite so I would highly recommend trying to use the newest version and just working with that tutorial there's a couple of other tutorials as well and there's like many many more that are being added day by day and week by queex so I would recommend trying the newest thing and just seeing how that works for you and if you find that you are just looking for something to just try making a game in general maybe I don't I don't know I feel like it's easier to just like go with what is the newest thing it's kind of I mean there might be some conceptual aspects that probably go across later but I think it probably makes sense to work with the most recent one and then kind of help contribute to it right yeah exactly there's like a forum and everything so you can ask all these kinds of questions in terms of like I can't figure out how to do this one thing and there is no document for it yet and then you can help actually make it which is a great point one thing I noticed about the game that you're showing us is that you showed us is that it has a sprite so although these are images and a lot of the stuff that I do or at least that I've seen that people do from watching the videos the more algorithmic or generative graphics does it have a drawing functionality or would you pair phaser ever with like another library like five paper or some just native canvas in terms of like actually making it so like there there is actually a way to include like tile maps and stuff like that if that's kind of what you're referring to I guess if you wanted to custom draw with like lines and shapes oh like on the actual screen on the screen instead of because it is it is it rendering stuff to you a canvas or no it's all it is a canvas yeah yeah yeah so I mean you can you can just draw two you can do anything you want yeah it's like you can actually just use this with straightup JavaScript you can kind of do anything you want with it which is great and I have so the other thing that's nice about it is that I've done things like I made a game that I need to figure out how to put on my actual list of games but it's a game where it uses the leap motion so it's like using like recognition of your actual body motion and it's using the leap motion plugins for that and then it works really seamlessly so yeah you can do lots of stuff with it which is great because it's just a describe to be interesting I mean there is actually a library for p5 and that's I don't know if it's still maintained but called p5 play mmhm yeah but interesting to see if I if like I could make a you know a simple example that uses phaser for the physics yeah main mechanics but uses p5 for the drawing of the shapes very possibly I could see that working pretty easily another question that Ellen dole in the chat asked which I was curious about to I mean I think I know the answer to this but if you wanted to do something that's multiplayer and network based that's something that you would probably I guess do separately that you'd have to you and you know you'd most likely as far as I know I haven't really delved too much into that yet but my assumption would be that again you because it's like straight up just JavaScript you could make that work pretty simply which is convenient but maybe richard has more information about that Roberta chat just now it has a graphics API lines circles polygons yeah we've got a lot of properties so I think we get kind of rough I guess I'm just curious just generally speaking like where do you do independent game developer I assume so where do you come up with your ideas for games and do do user testing like house that is a huge question obviously how does that like how's that process for you how long does it take to make it go very loosely yeah so some games I make in like three days with a couple of people like I go to a lot of game jams which are like usually like 24 or 48 hour time periods where you sit in a space with people and you you have an idea usually that's based on like a theme so they're like they give you a theme and then they're like go have fun and then you have 48 hours to make the thing and usually the elongated versions of that when I've made games for I've made a game that took like nine months I made a game for one of my thesis projects I also I'm still working on some and I'm working on them for like several years but usually it's like the idea is either like inspired by a theme from the game jam or it's like oh this random part of my life would be really cool as a game so like one of the things that I worked on my first actual game that I coded by myself which was like very exciting was a game where you are trying to get to the train and you have to like shove and kick people out of your way and they just like fly around which is like my first use of fun games physics and that was really fun and it's like a very real slice of life kind of thing and I find something really fun about those kinds of games and then usually how it works is you get the idea and then I figure out like okay now that I know like the narrative idea / the main mechanic like how does that work in a larger context and then I try to figure out like what the rules are what this world of the game is and then I just kind of like start prototyping and experimenting get the basics working I usually do a lot of play testing with people even if it's a 48 hour game I try to find someone who can just play it like friends and people like sort of you're directly sitting with a watching employee yeah yeah so I've done a couple of things where I've had people like use a Google forum and I'll just like send it out on Twitter or like Facebook and I'm like hey can you just try this thing and like see what it's like just like fill out this form and like let me know your feelings about it and people always have a lot of really helpful things to say yeah so I'm a huge fan of just getting stuff out there and seeing what people think awesome just checking somebody saying phasors working okay but lots of wonderful thank you for all these messages in the chat um thank you so much Kat for being here I'm good to make an edited version of this but there's not very much to edit so let's do it anyway at least so I can do a much better introduction to views I feel like I wasn't prepared to talk about all your wonderful so thank you for watching again this this will remain online on the on my youtube channel you can ask questions also in the comments and I will try to answer them or retrieve answers to them if I can you can find Kat on Twitter and all the other various lengths of they're right here still questions I hope to do I'm so glad to be finally getting back in the rhythm of having some guests cuz that there's only so much you know as we can see there's a lot more there's a lot of interesting wonderful stuff happening in the world code even stuff that I don't know anything about so thank you so much I'm going to do the very awkward thing everything that's a stop streaming and then we'll be gone I will be back just to mention it's a I'll be back and around probably 4 p.m. to do a tutorial about using quadtrees for collision detection stuff yeah so I'm like oh and then okay you go say Kate so it's quadtrees at 4 oh yes yes goodbye
