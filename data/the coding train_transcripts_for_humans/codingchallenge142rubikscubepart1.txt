With timestamps:

00:01 - - Mm-hm.
00:04 - Aha!
00:06 - So that was fake.
00:07 - Welcome to, it was already solved,
00:09 - welcome to coding challenge
on the coding train.
00:12 - (blows train whistle)
00:13 - Rubik's Cube.
00:14 - So today,
00:15 - a while back in April 30, 2018,
00:17 - nilsweb suggested a Rubik's cube solver
00:20 - using a neural network.
00:21 - By the way, this is the green
side, not the white side.
00:24 - See? Eh.
00:27 - And I'm really interested in this.
00:29 - I actually picked up a
Rubik's Cube over the weekend,
00:32 - I've been learning to solve it,
00:34 - it takes me at least a half an hour,
00:36 - but I do do it, I don't
have to watch a video
00:38 - while I'm doing it.
00:39 - I did have to watch a bunch
of videos to figure it out.
00:41 - Getting off topic.
00:43 - But I really want to explore this idea.
00:45 - What types of AI machine
learning algorithms
00:48 - can I apply to solve a Rubik's Cube?
00:51 - This will be interesting to try.
00:52 - And to put on the channel.
00:53 - But there's a lot of steps I need
00:55 - to get to before I can get there.
00:57 - So what I'm going to start with today,
00:59 - is just creating a
Rubik's Cube simulation.
01:02 - Simon-tiger also posted an issue
01:04 - showing all the different
kinds of Rubik's Cubes
01:07 - configurations that are out there.
01:08 - Apparently there's this 28 by 28 one.
01:11 - I have some of these at home,
01:12 - they're super fun to play with.
01:15 - Anyway, but, so.
01:16 - So let me close all this stuff out.
01:18 - I should also reference Code Bullet.
01:20 - Code Bullet is a YouTube channel
01:22 - that has many different coding, exciting,
01:25 - adventurous topics, and Code Bullet has a
01:29 - video using a particular algorithm
01:31 - to solve a Rubik's Cube then
makes a giant Rubik's Cube.
01:34 - So if you want to get the
01:37 - 16 minute version of everything
01:39 - that is going to take me the next
01:40 - 700 days to figure out in
one video and be entertained?
01:44 - I would definitely recommend
the Code Bullet one.
01:46 - So closing that out, I'm going
to start here in processing.
01:49 - Processing, if you're not familiar,
01:51 - is a Java-based development environment
01:54 - for creative coding, images,
animations, all sorts of stuff.
01:57 - I use it a lot on my channel.
01:58 - I'm pretty sure that's
what Code Bullet used
02:00 - for his Rubik's Cube.
02:02 - I'm going to add the
setup and draw functions.
02:05 - I'm going to add a
window that's 400 by 400
02:09 - and I'm going to put in P3D.
02:12 - So P3D I definitely need
to use a 3D renderer
02:15 - because I'm going to
represent the Rubik's Cube
02:17 - in three dimensions.
02:19 - Let's make a.
02:23 - Let's make a class called box.
02:24 - I'm going to call each one of these
02:26 - little cubes inside the larger cube
02:29 - each cell of this three by three grid,
02:31 - just going to call it a box.
02:34 - So I need a constructor.
02:36 - And I need to know where is it,
02:39 - I need to know it's index in some type of,
02:41 - maybe, multidimensional array.
02:43 - But for drawing it I
really just need to know
02:45 - where it is in the virtual 3D space.
02:48 - When I create it let's
give it an X, a Y, and a Z.
02:53 - And then also, I need a side length.
02:56 - So I don't know whether I need the
02:57 - full side length or a half length.
02:59 - That's definitely going to be
something that's going to come up.
03:01 - But let's just assume right now,
03:02 - that I initialize it
with a full side length.
03:07 - And then I'll use a
Pvector, a vector object
03:10 - for the position and a
float for that side length.
03:16 - Let's just call that side.
03:17 - Oh, I'll call that length.
03:19 - And I'll use an underscore here
03:21 - to make this a different variable name.
03:23 - So now, I'm going to say
position is a new Pvector.
03:26 - X, Y, Z.
03:27 - And the, this needs a semicolon here.
03:31 - And the length is equal to this.
03:35 - So then I'm going to write
a function called show.
03:39 - And I'm just here, I'm going to say,
03:42 - pushMatrix, which saves
the transformation states.
03:46 - PopMatrix which restores
the transformation state.
03:49 - Oh, my god, what's a transformation state?
03:51 - You might be asking.
03:52 - So I'll tell you what it is.
03:54 - What I need to do is I
need to say translate
03:57 - to position dot X, position
dot Y, position dot Z.
04:00 - This is basically positioning
what I'm about to draw.
04:04 - This box with this
length at this position.
04:09 - I have a feeling people
who are watching this live
04:11 - in the chat are telling me
this isn't going to work.
04:13 - Because I need to color the
different faces differently.
04:16 - I'll get there, I mean, I have
to get there at some point.
04:19 - But let me just use the
processing box function
04:21 - which will just put a box right there.
04:23 - So in order for each box's translation
04:26 - to not affect the others, that's what
04:28 - pushMatrix and popMatrix does.
04:30 - I'll put something in
this video's description
04:31 - to more about matrix transformations
04:33 - if that is new topic for you.
04:37 - Let's just say a fill 255.
04:41 - Stroke zero.
04:42 - Stroke weight eight.
04:47 - And then I have this box class.
04:50 - So now I need to make a cube object.
04:53 - It's not really a cube object,
I'm making it right now.
04:54 - I could make a cube
class, I probably should,
04:57 - but just for simplicity right now
04:58 - let me make a three dimensional array
05:00 - for rows, columns, and what's
the other one? (laughs)
05:05 - I don't know, if you have a third one,
05:06 - it's the Z axis, I suppose.
05:10 - And this is going to be,
05:11 - let me make a variable
called dim for dimensions.
05:14 - 'Cause in theory, if I do this right,
05:16 - we could just change that one variable
05:17 - and have a much bigger cube.
05:20 - Equals new, box, which is dimension.
05:25 - Ah.
05:26 - Dimensions by dimensions by dimensions.
05:30 - Then I'm going to say, I'm going
to do a triple nested loop.
05:35 - With I, J, K.
05:39 - I, J, K, I, J, K, I, J, K, and then,
05:47 - I am going to,
05:51 - say cube index I, J, K,
05:58 - is a new box at some X, Y, Z,
06:04 - with some side length.
06:06 - How do I figure this out?
06:08 - If this is going to be
at zero, zero, zero,
06:12 - this is going to be at one, zero, zero.
06:17 - If I go down here I'll be
at like one, one, zero.
06:20 - Back, maybe the last row, anyway,
06:22 - you get the idea.
06:23 - It's like a grid but
with another dimension.
06:25 - I think I'm doing this right.
06:26 - But I need a side length.
06:27 - Let's just make that up right now.
06:28 - Length is, let's say it's 10.
06:30 - So the X would be length times I.
06:38 - The Y would be length, and
I might have my axes wrong,
06:41 - but whatever I call X, Y, and Z axis,
06:44 - eh, whatever, they're
all just different axes.
06:47 - I, J, K.
06:49 - So I'm going to say box X, box Y, box Z.
06:53 - X, Y, Z, and then length.
06:56 - And then, I mean,
06:58 - there's no way this is right.
07:00 - (laughs)
07:01 - Like, how could I possibly get,
07:02 - oh, I need another curly bracket.
07:05 - And then, now, if I grab this four loop
07:08 - and I put it in draw, but all I say now,
07:11 - is cube I J K, show,
07:15 - I almost want to keep these
in another array that's just a
07:17 - one-dimensional array for simplicity.
07:19 - But let's see how this goes.
07:25 - Hey, look!
07:26 - That's kind of like the Rubik's Cubey
07:28 - thing up there in the corner.
07:29 - So one thing I want to do,
I definitely want to do,
07:31 - is I want to add, well. (laughs)
07:34 - I want to first give it a background.
07:37 - Background 200.
07:40 - I'll use my number 51.
07:42 - And then I'll probably
want the side length
07:44 - to be much bigger and
let's just run this again.
07:49 - And you can see it's sort of up there.
07:50 - I think I need a larger space here.
07:55 - So I need to position it in the center
07:58 - so I can actually see it.
07:59 - And there's a variety of ways to do that.
08:01 - I could just translate to the center.
08:02 - But I'm going to use a library,
I think I have it installed.
08:05 - Import library, I don't, this is great.
08:07 - I'm going to use a
library called PeasyCam.
08:10 - And I'm going to hit install PeasyCam.
08:12 - For processing easy camera is a way,
08:15 - a library that allows you to very quickly
08:17 - get a mouse-camera interaction.
08:19 - Where I can spin around a
3D scene and processing.
08:22 - I've used it in other videos before.
08:24 - So I think if I just say PeasyCam cam.
08:28 - And then if say something
like cam equals new Peasy.
08:33 - Thank you to Jonathan Feinberg who created
08:35 - this library PeasyCam.
08:37 - This, I forget, this is
something to do with like
08:39 - how zoomed out or zoomed in it is.
08:42 - Oh, import.
08:43 - I need to import the library.
08:44 - Which I can do automatically like this.
08:48 - Import library PeasyCam.
08:51 - Was it there and I just didn't see?
08:53 - (laughs)
08:55 - There, ah, there we go.
08:56 - Look, hey,
08:58 - (rings bell)
coding job finished,
09:00 - thank you. (laughs)
09:01 - No, there's a lot more to do here.
09:02 - But look at this, that kind
of looks like a Rubik's Cube.
09:04 - Now it's rotating around
it's little corner there.
09:07 - I want it to rotate around the center.
09:09 - So what I need to do, I
need to have an offset.
09:12 - And the offset is going to
be half of the full width.
09:17 - So the full width is
dimensions times length
09:21 - and then if I divide that by two.
09:23 - So if I then subtract out the offset.
09:27 - That should give me our
nice little cube, no.
09:30 - That's not right.
09:32 - Oh, because.
09:35 - I think this is my off by,
09:37 - I think the box function is
probably using the half width.
09:44 - But then that'll be off now.
09:46 - No, ah, that's not right.
09:48 - What I have done?
09:49 - I think I have this
off by dividing by two.
09:52 - Alright, here's the issue,
09:52 - I actually just made a little diagram.
09:54 - If the box, these are just
two-dimensional rectangles,
09:58 - were drawn from the
corner like they are in,
10:02 - two D rectangles in
processing, this would work.
10:04 - Because I've just shifting everything over
10:06 - and the middle one is, but,
10:08 - the middle one is now
placed in the center.
10:10 - 'Cause I'm shifting over
by the total width is 30.
10:13 - I'm shifting over by 15, we've
got half here half there.
10:16 - But they're not, they're
actually drawn from the center.
10:18 - So by shifting them over I end up with
10:20 - the first two on one side and the other.
10:23 - So I actually need to shift it.
10:26 - There's a half of a
length that's incorrect.
10:28 - So there's probably a smarter
way to fix this formula.
10:32 - But right now I'm just going to
add another half length here.
10:39 - Or the offset, actually, that's silly.
10:42 - I should really add it in the offset.
10:44 - So length divided two plus this.
10:48 - And now we should have.
10:51 - (laughs)
10:54 - Eh.
10:55 - Oh, no, minus!
10:58 - I need to shift it over but it's
11:00 - in the offset, the offset
is a little bit less.
11:03 - Dimensions minus one, that's the issue!
11:07 - Hold on, everybody.
11:11 - This is so silly.
11:12 - Change this to point five.
11:14 - And this is actually dimensions minus one.
11:18 - Times length and then half of that.
11:21 - And now.
11:23 - We should have it, there we go.
11:25 - There's my Rubik's Cube in the center.
11:27 - Alright, phew, and I'm
being told, by the way,
11:29 - that these are called cubies.
11:32 - So I'm going to change that.
11:34 - Class, Cubie.
11:36 - Cubie.
11:39 - Cubie, Cubie.
11:41 - And Cubie.
11:47 - Step one is complete.
11:50 - But as you'll see, if
we look at this, whoops.
11:54 - If we look at this Rubik's Cube,
11:56 - each face has a different color.
11:57 - There are only six colors.
11:59 - There's white, red, so white on the top,
12:02 - yellow on the bottom, and then red, blue,
12:06 - orange, and green.
12:07 - So let me make an array with those colors.
12:14 - I think what I can do is just say.
12:17 - Oh, there's a datatype in
processing called color.
12:19 - It's actually just a integer.
12:22 - And I'm going to, let's
come up with an order.
12:24 - I'm going to say top,
bottom, I don't know if
12:27 - this is a good order to do.
12:29 - But top, bottom,
12:32 - I'm going to think of
the top as always white.
12:34 - So top, bottom, and then
right, left, front, back.
12:40 - Right, left, front, back.
12:44 - And I know there's actual
Rubik's Cube notation
12:46 - and I'm probably getting
that a little off.
12:48 - I think it's actually not
top, bottom, it's up, down.
12:51 - Up, down, right, left,
front, back. (rings bell)
12:54 - Okay, I'm back, I finished off the colors
12:57 - for this array and I'm using the order
12:58 - up, down, right, left, front, back,
13:02 - and I'm just right now,
using the convention
13:04 - as white being on the top.
13:06 - But I know there's some different ways
13:07 - of looking at the cube.
13:08 - You can think of yellow as the
top and white as the bottom.
13:11 - But I'm going to use, yellow's
the top and green as the front.
13:14 - So I have these colors.
13:15 - So how do I, then, apply these colors
13:19 - to the different faces
of these little Cubies.
13:22 - I love that they're called Cubies.
13:24 - It's like, that's like the
greatest thing I learned today.
13:27 - Unfortunately I will not be able to
13:29 - use this box function anymore.
13:32 - However, I can use my
own beginShape, endShape.
13:39 - So what I really want to do,
13:41 - instead of just using the box function
13:44 - to draw the full three-dimensional Cubie,
13:47 - I just need to use quads.
13:49 - I can use four quads, I
can probably use rectangle
13:52 - function or different things, but,
13:53 - I can do one quad, well
it's more than four.
13:55 - I need to do six.
13:56 - One quad, another quad, another quad,
14:00 - another quad, and another quad.
14:02 - Now, of course, if we look
at the actual cube itself,
14:06 - each of these corner pieces,
you can only see three faces.
14:10 - These other pieces on
the middle and the top
14:11 - you can only see two faces.
14:13 - But I'm just going to do all the faces.
14:15 - For each Cubie.
14:16 - We can optimize later, if need be.
14:18 - So let's just do one.
14:19 - So in other words, if I say,
14:21 - beginShape quads,
14:25 - then I can create the,
and let me just say,
14:28 - the R equals length divided by two.
14:33 - So now I'm going to take that side length
14:36 - and divide it by two because I want to
14:38 - set the vertices offset from the center.
14:41 - Negative R, plus R, negative R, plus R.
14:43 - So I should be able to
do, for the first one,
14:45 - vertex, negative R, negative R, zero.
14:50 - And I'm going to keep the Z
at zero for this first one.
14:54 - And then.
14:55 - So let me just diagram this, right?
14:58 - If this is what I'm doing.
14:59 - This is negative one, negative one.
15:02 - This is one, negative one.
15:05 - This is one, one, and this
is a negative one, one.
15:09 - So basically I just need to set
15:10 - all of these vertices to draw that quad.
15:14 - And a negative R, R.
15:17 - (laughs) What did I say it was?
15:19 - R, negative R, R, R, negative R, R.
15:24 - And now if we run this.
15:28 - We should see, oh, whoa.
15:32 - What did I just do?
15:34 - So first of all, oh,
you know what I'm doing?
15:37 - I'm still drawing the box.
15:39 - Yeah, take out that box,
thank you very much.
15:43 - And there we go, we can see
15:46 - now I just have those front faces.
15:49 - So all I need to do is do
exactly the same thing.
15:52 - I just need to do six of these.
15:53 - So with different axes.
15:57 - So if I put zero, zero,
zero, zero, zero, zero,
16:02 - zero, zero, and take the
zero off of the Z now.
16:09 - I have got,
16:13 - oh, wait a second.
16:15 - This is not right. (laughs)
16:17 - Oh! (rings bells)
16:19 - Oh, I'm so silly, this isn't zero.
16:22 - This is either at negative R.
16:24 - This is one side.
16:27 - And then the same face,
so comment this one out.
16:31 - Would be, at R, right?
16:35 - These don't cross the
center of each little Cubie,
16:37 - they go along the edges.
16:38 - So the Z has to be.
16:41 - So now we can see, now this is right
16:42 - 'cause it's a three by three cube.
16:44 - Looks like, why is there four?
16:45 - But these are the front and back
16:48 - or the left and right
or the top and bottom,
16:50 - every one I consider it.
16:51 - And so now if I do this.
16:55 - With negative R, of course,
17:02 - and then the same thing with positive R.
17:05 - There's six faces.
17:11 - There we go.
17:12 - Now I have my Rubik's Cube but without the
17:15 - left or right or top or bottom.
17:16 - (laughs) I have no idea
what the orientation is.
17:18 - But the Y axis needs to be fixed.
17:21 - So this is Z being fixed.
17:26 - This first one was Z being fixed.
17:27 - This one is X being fixed.
17:29 - So I'm going to say a Z fixed.
17:34 - X fixed.
17:37 - And now I need to do one that's Y fixed.
17:43 - And that,
17:46 - is going to be.
17:49 - So this one, I copied, what did I copy?
17:50 - I copied Z fixed.
17:52 - So all I need to do is fix Y.
17:55 - So negative R, negative R, negative R.
17:58 - R, R, R,
18:02 - and then this should be
negative R, negative R.
18:07 - R, negative R, R, R, negative R, R.
18:12 - And same thing here,
negative R, negative R.
18:16 - R, negative R, R,
18:18 - R, negative R, R.
18:23 - Look!
18:24 - There it is again!
18:25 - There's our cube but all different faces.
18:27 - So I have no idea.
18:30 - Let's just make a total guess here.
18:32 - What if I say, just for this.
18:33 - So let me do a fill on all of these.
18:35 - Fill 255.
18:41 - Fill 255.
18:43 - Fill 255.
18:45 - Fill 255.
18:48 - Ah, fill 255, fill 255.
18:52 - So now they're all white.
18:53 - But I can say, remember I have my colors.
18:56 - And what I'm actually going to do.
18:57 - Let's make some variables
that just keep these.
19:00 - Let's do top, no, let's do up.
19:03 - Well these are key words in processing.
19:09 - Let's do them all three letters.
19:10 - Up is zero.
19:16 - Down is one.
19:18 - I just want to keep
track of these constants.
19:20 - Final, is that a thing? I don't know.
19:23 - I don't know how Java works.
19:24 - There's probably like an enumerable.
19:26 - Down, right,
19:29 - left,
19:33 - front,
19:35 - and back.
19:37 - This might, I mean, this
is sort of unnecessary,
19:39 - but let's do that.
19:40 - So now, up, down, right,
left, front, back.
19:43 - So in theory, I want to say fill.
19:46 - If this is the top, I
have no idea if it is.
19:49 - (laughs) Whatever the top is.
19:50 - Fill colors top.
19:56 - Up, (laughs) up.
20:02 - Yes, that's the top, it's facing, whoa.
20:05 - Oh, yeah, it's white. (laughs)
20:06 - I shouldn't pick white as
the first one. (laughs)
20:09 - Fill colors, they're already white, down.
20:13 - Alright let's find where that is.
20:15 - Is it going to be on the bottom?
20:16 - No, it's facing us, but that's fine.
20:17 - Because the way I drew it, this is really
20:19 - the top over here, I think.
20:21 - So that's fine.
20:22 - Whatever, the point is I
just have to be consistent.
20:26 - Colors, so this would be if Y is fixed,
20:32 - if Y is fixed we're doing, oh, no.
20:35 - If Z is fixed. (laughs)
20:41 - Z is fixed, it's front and back.
20:46 - Behind is back, this is front.
20:52 - And then if Y is fixed,
it's not really fixed,
20:55 - then we have top.
21:00 - That's actually bottom.
21:03 - And then this,
21:06 - would be,
21:08 - and it's down and this is up.
21:11 - Boy, this is taking a crazy
amount of time. (laughs)
21:13 - I can't believe how much
time this is taking.
21:15 - And this, everybody in
the chat is going crazy
21:18 - with better solutions than this.
21:21 - X, this is left.
21:24 - And this is right.
21:32 - Alright, let's see.
21:33 - Oh, hold on.
21:35 - (laughs)
21:37 - Let's look here.
21:38 - I have white, green, red,
orange, yellow, blue.
21:45 - Ah, red and orange are in the wrong place.
21:48 - Red and orange are in the wrong place.
21:50 - So, actually, drawing it is correct,
21:54 - I just have the colors
swapped incorrectly here.
21:57 - This should be orange on the left
22:00 - and red should be here on the right.
22:03 - Let's check it, here we go.
22:06 - Alright, so I'm looking at
green with yellow next to it.
22:10 - So I'm now holding it the same way.
22:13 - Green with yellow next to it.
22:15 - So if I go orange, red, white,
22:21 - and on the back, blue.
22:24 - I have now drawn the Rubik's Cube.
22:26 - I have made some of you
happy who think that
22:29 - the top is yellow because
the top is yellow here.
22:32 - 'Cause I drew it with the Y axis flipped.
22:34 - Even though it says top
is white in my code.
22:36 - Who knows, I'll figure that out later.
22:38 - Something that would really improve this
22:40 - would be using e-nums, enumerables,
22:42 - instead of these list of constants.
22:45 - It's a little tricky to
do that in processing
22:46 - because of the way that
processing wraps Java.
22:48 - Maybe I'll fix that up
when I refactor this later.
22:53 - In the next video I'm going to work on
22:54 - actually trying to figure
out how to do a rotation.
22:56 - How to turn and move the stuff around.
22:58 - And actually have all
the data move, as well.
23:02 - So that I could shuffle the Rubik's Cube.
23:04 - If at least in this first part,
23:06 - if I can now then make the moves,
23:08 - then I can do another part
where I can shuffle it
23:09 - and then play the shuffle back in reverse
23:11 - to make it look like it's
being solved, that'll be fun.
23:14 - Another thing that's really missing here
23:16 - is that you'll notice on
an actual Rubik's Cube,
23:19 - that the faces that you can't see
23:22 - are actually colored black.
23:24 - Whereas, once I start rotating these,
23:26 - all those other colors are
actually there internally
23:29 - and in fact, there's
like a cube in the center
23:30 - you'll never see, it has
the colors on it in mine.
23:33 - But eh, I think I've done enough.
23:35 - I will see you in the
next video. (rings bell)
23:38 - (upbeat music)

Cleaned transcript:

Mmhm. Aha! So that was fake. Welcome to, it was already solved, welcome to coding challenge on the coding train. (blows train whistle) Rubik's Cube. So today, a while back in April 30, 2018, nilsweb suggested a Rubik's cube solver using a neural network. By the way, this is the green side, not the white side. See? Eh. And I'm really interested in this. I actually picked up a Rubik's Cube over the weekend, I've been learning to solve it, it takes me at least a half an hour, but I do do it, I don't have to watch a video while I'm doing it. I did have to watch a bunch of videos to figure it out. Getting off topic. But I really want to explore this idea. What types of AI machine learning algorithms can I apply to solve a Rubik's Cube? This will be interesting to try. And to put on the channel. But there's a lot of steps I need to get to before I can get there. So what I'm going to start with today, is just creating a Rubik's Cube simulation. Simontiger also posted an issue showing all the different kinds of Rubik's Cubes configurations that are out there. Apparently there's this 28 by 28 one. I have some of these at home, they're super fun to play with. Anyway, but, so. So let me close all this stuff out. I should also reference Code Bullet. Code Bullet is a YouTube channel that has many different coding, exciting, adventurous topics, and Code Bullet has a video using a particular algorithm to solve a Rubik's Cube then makes a giant Rubik's Cube. So if you want to get the 16 minute version of everything that is going to take me the next 700 days to figure out in one video and be entertained? I would definitely recommend the Code Bullet one. So closing that out, I'm going to start here in processing. Processing, if you're not familiar, is a Javabased development environment for creative coding, images, animations, all sorts of stuff. I use it a lot on my channel. I'm pretty sure that's what Code Bullet used for his Rubik's Cube. I'm going to add the setup and draw functions. I'm going to add a window that's 400 by 400 and I'm going to put in P3D. So P3D I definitely need to use a 3D renderer because I'm going to represent the Rubik's Cube in three dimensions. Let's make a. Let's make a class called box. I'm going to call each one of these little cubes inside the larger cube each cell of this three by three grid, just going to call it a box. So I need a constructor. And I need to know where is it, I need to know it's index in some type of, maybe, multidimensional array. But for drawing it I really just need to know where it is in the virtual 3D space. When I create it let's give it an X, a Y, and a Z. And then also, I need a side length. So I don't know whether I need the full side length or a half length. That's definitely going to be something that's going to come up. But let's just assume right now, that I initialize it with a full side length. And then I'll use a Pvector, a vector object for the position and a float for that side length. Let's just call that side. Oh, I'll call that length. And I'll use an underscore here to make this a different variable name. So now, I'm going to say position is a new Pvector. X, Y, Z. And the, this needs a semicolon here. And the length is equal to this. So then I'm going to write a function called show. And I'm just here, I'm going to say, pushMatrix, which saves the transformation states. PopMatrix which restores the transformation state. Oh, my god, what's a transformation state? You might be asking. So I'll tell you what it is. What I need to do is I need to say translate to position dot X, position dot Y, position dot Z. This is basically positioning what I'm about to draw. This box with this length at this position. I have a feeling people who are watching this live in the chat are telling me this isn't going to work. Because I need to color the different faces differently. I'll get there, I mean, I have to get there at some point. But let me just use the processing box function which will just put a box right there. So in order for each box's translation to not affect the others, that's what pushMatrix and popMatrix does. I'll put something in this video's description to more about matrix transformations if that is new topic for you. Let's just say a fill 255. Stroke zero. Stroke weight eight. And then I have this box class. So now I need to make a cube object. It's not really a cube object, I'm making it right now. I could make a cube class, I probably should, but just for simplicity right now let me make a three dimensional array for rows, columns, and what's the other one? (laughs) I don't know, if you have a third one, it's the Z axis, I suppose. And this is going to be, let me make a variable called dim for dimensions. 'Cause in theory, if I do this right, we could just change that one variable and have a much bigger cube. Equals new, box, which is dimension. Ah. Dimensions by dimensions by dimensions. Then I'm going to say, I'm going to do a triple nested loop. With I, J, K. I, J, K, I, J, K, I, J, K, and then, I am going to, say cube index I, J, K, is a new box at some X, Y, Z, with some side length. How do I figure this out? If this is going to be at zero, zero, zero, this is going to be at one, zero, zero. If I go down here I'll be at like one, one, zero. Back, maybe the last row, anyway, you get the idea. It's like a grid but with another dimension. I think I'm doing this right. But I need a side length. Let's just make that up right now. Length is, let's say it's 10. So the X would be length times I. The Y would be length, and I might have my axes wrong, but whatever I call X, Y, and Z axis, eh, whatever, they're all just different axes. I, J, K. So I'm going to say box X, box Y, box Z. X, Y, Z, and then length. And then, I mean, there's no way this is right. (laughs) Like, how could I possibly get, oh, I need another curly bracket. And then, now, if I grab this four loop and I put it in draw, but all I say now, is cube I J K, show, I almost want to keep these in another array that's just a onedimensional array for simplicity. But let's see how this goes. Hey, look! That's kind of like the Rubik's Cubey thing up there in the corner. So one thing I want to do, I definitely want to do, is I want to add, well. (laughs) I want to first give it a background. Background 200. I'll use my number 51. And then I'll probably want the side length to be much bigger and let's just run this again. And you can see it's sort of up there. I think I need a larger space here. So I need to position it in the center so I can actually see it. And there's a variety of ways to do that. I could just translate to the center. But I'm going to use a library, I think I have it installed. Import library, I don't, this is great. I'm going to use a library called PeasyCam. And I'm going to hit install PeasyCam. For processing easy camera is a way, a library that allows you to very quickly get a mousecamera interaction. Where I can spin around a 3D scene and processing. I've used it in other videos before. So I think if I just say PeasyCam cam. And then if say something like cam equals new Peasy. Thank you to Jonathan Feinberg who created this library PeasyCam. This, I forget, this is something to do with like how zoomed out or zoomed in it is. Oh, import. I need to import the library. Which I can do automatically like this. Import library PeasyCam. Was it there and I just didn't see? (laughs) There, ah, there we go. Look, hey, (rings bell) coding job finished, thank you. (laughs) No, there's a lot more to do here. But look at this, that kind of looks like a Rubik's Cube. Now it's rotating around it's little corner there. I want it to rotate around the center. So what I need to do, I need to have an offset. And the offset is going to be half of the full width. So the full width is dimensions times length and then if I divide that by two. So if I then subtract out the offset. That should give me our nice little cube, no. That's not right. Oh, because. I think this is my off by, I think the box function is probably using the half width. But then that'll be off now. No, ah, that's not right. What I have done? I think I have this off by dividing by two. Alright, here's the issue, I actually just made a little diagram. If the box, these are just twodimensional rectangles, were drawn from the corner like they are in, two D rectangles in processing, this would work. Because I've just shifting everything over and the middle one is, but, the middle one is now placed in the center. 'Cause I'm shifting over by the total width is 30. I'm shifting over by 15, we've got half here half there. But they're not, they're actually drawn from the center. So by shifting them over I end up with the first two on one side and the other. So I actually need to shift it. There's a half of a length that's incorrect. So there's probably a smarter way to fix this formula. But right now I'm just going to add another half length here. Or the offset, actually, that's silly. I should really add it in the offset. So length divided two plus this. And now we should have. (laughs) Eh. Oh, no, minus! I need to shift it over but it's in the offset, the offset is a little bit less. Dimensions minus one, that's the issue! Hold on, everybody. This is so silly. Change this to point five. And this is actually dimensions minus one. Times length and then half of that. And now. We should have it, there we go. There's my Rubik's Cube in the center. Alright, phew, and I'm being told, by the way, that these are called cubies. So I'm going to change that. Class, Cubie. Cubie. Cubie, Cubie. And Cubie. Step one is complete. But as you'll see, if we look at this, whoops. If we look at this Rubik's Cube, each face has a different color. There are only six colors. There's white, red, so white on the top, yellow on the bottom, and then red, blue, orange, and green. So let me make an array with those colors. I think what I can do is just say. Oh, there's a datatype in processing called color. It's actually just a integer. And I'm going to, let's come up with an order. I'm going to say top, bottom, I don't know if this is a good order to do. But top, bottom, I'm going to think of the top as always white. So top, bottom, and then right, left, front, back. Right, left, front, back. And I know there's actual Rubik's Cube notation and I'm probably getting that a little off. I think it's actually not top, bottom, it's up, down. Up, down, right, left, front, back. (rings bell) Okay, I'm back, I finished off the colors for this array and I'm using the order up, down, right, left, front, back, and I'm just right now, using the convention as white being on the top. But I know there's some different ways of looking at the cube. You can think of yellow as the top and white as the bottom. But I'm going to use, yellow's the top and green as the front. So I have these colors. So how do I, then, apply these colors to the different faces of these little Cubies. I love that they're called Cubies. It's like, that's like the greatest thing I learned today. Unfortunately I will not be able to use this box function anymore. However, I can use my own beginShape, endShape. So what I really want to do, instead of just using the box function to draw the full threedimensional Cubie, I just need to use quads. I can use four quads, I can probably use rectangle function or different things, but, I can do one quad, well it's more than four. I need to do six. One quad, another quad, another quad, another quad, and another quad. Now, of course, if we look at the actual cube itself, each of these corner pieces, you can only see three faces. These other pieces on the middle and the top you can only see two faces. But I'm just going to do all the faces. For each Cubie. We can optimize later, if need be. So let's just do one. So in other words, if I say, beginShape quads, then I can create the, and let me just say, the R equals length divided by two. So now I'm going to take that side length and divide it by two because I want to set the vertices offset from the center. Negative R, plus R, negative R, plus R. So I should be able to do, for the first one, vertex, negative R, negative R, zero. And I'm going to keep the Z at zero for this first one. And then. So let me just diagram this, right? If this is what I'm doing. This is negative one, negative one. This is one, negative one. This is one, one, and this is a negative one, one. So basically I just need to set all of these vertices to draw that quad. And a negative R, R. (laughs) What did I say it was? R, negative R, R, R, negative R, R. And now if we run this. We should see, oh, whoa. What did I just do? So first of all, oh, you know what I'm doing? I'm still drawing the box. Yeah, take out that box, thank you very much. And there we go, we can see now I just have those front faces. So all I need to do is do exactly the same thing. I just need to do six of these. So with different axes. So if I put zero, zero, zero, zero, zero, zero, zero, zero, and take the zero off of the Z now. I have got, oh, wait a second. This is not right. (laughs) Oh! (rings bells) Oh, I'm so silly, this isn't zero. This is either at negative R. This is one side. And then the same face, so comment this one out. Would be, at R, right? These don't cross the center of each little Cubie, they go along the edges. So the Z has to be. So now we can see, now this is right 'cause it's a three by three cube. Looks like, why is there four? But these are the front and back or the left and right or the top and bottom, every one I consider it. And so now if I do this. With negative R, of course, and then the same thing with positive R. There's six faces. There we go. Now I have my Rubik's Cube but without the left or right or top or bottom. (laughs) I have no idea what the orientation is. But the Y axis needs to be fixed. So this is Z being fixed. This first one was Z being fixed. This one is X being fixed. So I'm going to say a Z fixed. X fixed. And now I need to do one that's Y fixed. And that, is going to be. So this one, I copied, what did I copy? I copied Z fixed. So all I need to do is fix Y. So negative R, negative R, negative R. R, R, R, and then this should be negative R, negative R. R, negative R, R, R, negative R, R. And same thing here, negative R, negative R. R, negative R, R, R, negative R, R. Look! There it is again! There's our cube but all different faces. So I have no idea. Let's just make a total guess here. What if I say, just for this. So let me do a fill on all of these. Fill 255. Fill 255. Fill 255. Fill 255. Ah, fill 255, fill 255. So now they're all white. But I can say, remember I have my colors. And what I'm actually going to do. Let's make some variables that just keep these. Let's do top, no, let's do up. Well these are key words in processing. Let's do them all three letters. Up is zero. Down is one. I just want to keep track of these constants. Final, is that a thing? I don't know. I don't know how Java works. There's probably like an enumerable. Down, right, left, front, and back. This might, I mean, this is sort of unnecessary, but let's do that. So now, up, down, right, left, front, back. So in theory, I want to say fill. If this is the top, I have no idea if it is. (laughs) Whatever the top is. Fill colors top. Up, (laughs) up. Yes, that's the top, it's facing, whoa. Oh, yeah, it's white. (laughs) I shouldn't pick white as the first one. (laughs) Fill colors, they're already white, down. Alright let's find where that is. Is it going to be on the bottom? No, it's facing us, but that's fine. Because the way I drew it, this is really the top over here, I think. So that's fine. Whatever, the point is I just have to be consistent. Colors, so this would be if Y is fixed, if Y is fixed we're doing, oh, no. If Z is fixed. (laughs) Z is fixed, it's front and back. Behind is back, this is front. And then if Y is fixed, it's not really fixed, then we have top. That's actually bottom. And then this, would be, and it's down and this is up. Boy, this is taking a crazy amount of time. (laughs) I can't believe how much time this is taking. And this, everybody in the chat is going crazy with better solutions than this. X, this is left. And this is right. Alright, let's see. Oh, hold on. (laughs) Let's look here. I have white, green, red, orange, yellow, blue. Ah, red and orange are in the wrong place. Red and orange are in the wrong place. So, actually, drawing it is correct, I just have the colors swapped incorrectly here. This should be orange on the left and red should be here on the right. Let's check it, here we go. Alright, so I'm looking at green with yellow next to it. So I'm now holding it the same way. Green with yellow next to it. So if I go orange, red, white, and on the back, blue. I have now drawn the Rubik's Cube. I have made some of you happy who think that the top is yellow because the top is yellow here. 'Cause I drew it with the Y axis flipped. Even though it says top is white in my code. Who knows, I'll figure that out later. Something that would really improve this would be using enums, enumerables, instead of these list of constants. It's a little tricky to do that in processing because of the way that processing wraps Java. Maybe I'll fix that up when I refactor this later. In the next video I'm going to work on actually trying to figure out how to do a rotation. How to turn and move the stuff around. And actually have all the data move, as well. So that I could shuffle the Rubik's Cube. If at least in this first part, if I can now then make the moves, then I can do another part where I can shuffle it and then play the shuffle back in reverse to make it look like it's being solved, that'll be fun. Another thing that's really missing here is that you'll notice on an actual Rubik's Cube, that the faces that you can't see are actually colored black. Whereas, once I start rotating these, all those other colors are actually there internally and in fact, there's like a cube in the center you'll never see, it has the colors on it in mine. But eh, I think I've done enough. I will see you in the next video. (rings bell) (upbeat music)
