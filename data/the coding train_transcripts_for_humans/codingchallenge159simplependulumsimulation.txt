With timestamps:

00:00 - [Applause]
00:01 - it's 20 21. i have a new train whistle
00:04 - that's right welcome to the first coding
00:06 - challenge of 2021. i'm very excited to
00:08 - do this one i am going to program
00:10 - a swinging pendulum in p5.js starting
00:13 - from a blank sketch
00:15 - now this particular challenge this
00:17 - concept
00:18 - fits quite nicely and neatly into my
00:20 - nature of code
00:21 - playlist which has way too many videos
00:24 - about trigonometry and oscillating
00:26 - motion and vectors and forces
00:28 - so while you don't need to go back and
00:30 - watch those to follow along with this
00:32 - i will be building on top of a lot of
00:34 - the concepts covered there
00:35 - so uh if anything is confusing or i'll
00:37 - try to like refer you but you know check
00:39 - the video description there'll be links
00:40 - uh you can ask questions in the comments
00:41 - i'll help you along with this so what do
00:43 - i need to do
00:44 - to program a swinging pendulum well
00:47 - first i think i need this idea of a bob
00:49 - and then a arm so a line so i need an
00:52 - ellipse and a line
00:57 - great so i've got the visuals down for
00:59 - my pendulum
01:01 - now i just need to figure out oh how am
01:03 - i going to move it around and how am i
01:04 - going to have it swing
01:05 - i also was bothering me i want the
01:06 - center to be a little bit darker okay
01:08 - definitely going to need to do some
01:10 - white boarding here so the way
01:12 - that i'm going to work this out is that
01:14 - i am going to do this i mean there's
01:16 - definitely multiple ways that you could
01:17 - approach this problem and i'm also going
01:19 - to do a coding challenge about springs
01:21 - and you could take a look at that for a
01:23 - way of like you know i could also
01:24 - probably have a springy pendulum and
01:26 - i'll get to that when i get to that but
01:28 - ultimately what i want to do is i want
01:30 - to have this idea of an
01:31 - arm which i'm going to represent as a
01:34 - line and i can think about that as a
01:35 - vector
01:36 - and i want to have a bob which is just a
01:39 - circle right here
01:40 - and a very very important piece of
01:42 - information is
01:44 - the angle of the arm relative
01:47 - to the x-axis why is that
01:51 - the way that the pendulum should work is
01:53 - that
01:54 - i should figure out i need to calculate
01:56 - right the idea is if it swings
01:58 - it's swinging along a circular path the
02:00 - arm i'm talking about an idealized
02:02 - pendulum
02:03 - with an infinitely rigid arm that can
02:05 - never
02:06 - ever be stretched or contracted or
02:08 - broken
02:10 - so this distance this arm length is
02:13 - always the same
02:14 - no matter not drawing particularly well
02:16 - wherever the pendulum might be
02:18 - so the way that i go figure out how to
02:21 - draw the pendulum is
02:22 - all based on a particular angle and this
02:24 - is the important angle right here
02:26 - theta so let me actually first add that
02:28 - to the code like what if i happened and
02:30 - i'm going to use radians if you're
02:31 - unfamiliar with radians those nature of
02:32 - code play
02:33 - videos that i refer to at the beginning
02:34 - we'll cover that but let's just imagine
02:36 - first
02:36 - that i have the radians radians of pi
02:39 - divided by four is this particular angle
02:42 - uh well actually it's relative i said
02:44 - relative to here but i'm actually
02:46 - looking at relative to this y-axis to
02:48 - the center
02:48 - so i'm going to look at that particular
02:50 - angle and see if i can
02:52 - just change my drawing to have it start
02:53 - in the right place
02:55 - so i'm going to make a variable called
02:56 - angle and i'm going to say
02:59 - in setup angle equals pi divided by 4.
03:02 - now eventually i might want to do this
03:04 - in a sort of thoughtful object-oriented
03:06 - way
03:06 - but i'm just going to have a variable
03:08 - called bob and bob
03:09 - is going to be a vector and then
03:13 - i also need an arm length which i'll
03:16 - just use the variable l-e-n
03:18 - and i'll say that is 100. so i feel like
03:21 - i need to draw this again now with those
03:23 - three variables in mind
03:26 - this is the arm length 100. this is the
03:29 - angle
03:30 - pi divided by 4 i'm just going to write
03:31 - 45 degrees as that equivalent angle in
03:34 - degrees i need to figure out
03:37 - where is that point so i need to figure
03:40 - out what is
03:42 - the y offset from here and the x
03:46 - offset from here well guess what
03:48 - trigonometry
03:49 - is the answer to my prayers here
03:52 - if i know this angle and i know this
03:54 - value well
03:56 - sine right if this angle again is theta
03:59 - sine of theta equals
04:02 - opposite over hypotenuse x divided by
04:05 - 100
04:06 - cosine of theta equals y
04:10 - adjacent over hypotenuse y divided by
04:13 - 100
04:14 - multiply each side of the equation by
04:15 - 100 and x equals 100 times sine
04:18 - y equals 100 times cosine now you might
04:20 - be thinking oh that's a little bit
04:21 - backwards
04:22 - isn't x usually associated with cosine
04:25 - and y associated with sine
04:26 - yes if you look at my polar coordinates
04:28 - video it's absolutely true
04:30 - but i've kind of drawn things on their
04:32 - side here because i'm looking at this
04:34 - particular angle
04:35 - relative to the vertical axis rather
04:37 - than the horizontal axis
04:39 - i'm going to create a new variable for
04:41 - the
04:42 - origin point like where the arm is
04:43 - attached
04:45 - and we'll say origin equals create
04:48 - vector
04:49 - 300 comma zero like it's attached there
04:52 - at the top
04:53 - and so now the line should be from
04:57 - origin.x origin.y
05:00 - to bob.x bob.y
05:04 - and then the bob is at bob.x and bob.y
05:07 - the problem is i now need to calculate
05:10 - the bob
05:11 - position well that's why it just worked
05:14 - out
05:15 - bob.x equals the length
05:18 - times sine of the angle
05:22 - bob.y equals the length times cosine of
05:24 - the angle
05:26 - hmm that doesn't look right
05:29 - so why is that wrong the reason why that
05:32 - is wrong
05:33 - is these values are relative y
05:36 - offset and x offset from that origin
05:38 - point itself
05:39 - i just added those things to the origin
05:42 - point of zero
05:42 - zero so what i need to do here is say
05:46 - add origin.x and add origin.y
05:50 - there we go now i can make i probably
05:52 - want to make the pendulum a little bit
05:53 - longer
05:54 - let's make it 300 we can see and there
05:56 - we go all right
05:57 - so this is good if i have a particular
06:00 - angle value
06:02 - then i'm visualizing the pendulum
06:05 - correctly whatever that angle might be
06:07 - for example if i were to just say now
06:09 - angle plus
06:10 - equals 0.01
06:13 - the pendulum is not swinging in a
06:15 - realistic fashion
06:17 - but it is swinging around you can see
06:20 - that angle is changing so i just need to
06:22 - figure out
06:23 - how does that angle change realistically
06:25 - assuming that
06:26 - there is a force of gravity pulling it
06:29 - down
06:30 - noticing here to get it to move i'm
06:32 - changing the angle by some
06:34 - constant value that can also be thought
06:36 - of as an
06:37 - angular velocity once again a topic that
06:40 - i angular motion is a topic that i cover
06:42 - more extensively in the nature of code
06:43 - videos but for right now i'm just going
06:45 - to add
06:46 - two additional variables i'm going to
06:48 - say angle v
06:50 - for angular velocity and then angle a
06:52 - for angular acceleration
06:54 - acceleration is a concept that's tied
06:58 - to force newton's second law
07:01 - force equals mass times acceleration i'm
07:04 - ignoring mass here
07:06 - the obviously mass is very important the
07:07 - fact that that bob has a mass to it
07:10 - um but i'm going to kind of just assume
07:12 - its mass is one
07:13 - as of now um but so i could simplify
07:16 - newton's law and just say force equals
07:18 - acceleration
07:18 - so the idea is the gravity force will
07:21 - somehow go into the acceleration
07:22 - which will then alter the velocity so
07:25 - the math here would be
07:27 - the velocity changes the angle
07:33 - and the acceleration changes the
07:36 - velocity
07:37 - so if i were to just add a little
07:39 - acceleration value here
07:41 - we would see it's going to start it's as
07:43 - if i'm swinging it around and around and
07:45 - around and around
07:46 - but i need that acceleration to be
07:49 - related to the force of gravity itself
07:52 - so back to the whiteboard let's figure
07:54 - that out
07:58 - the force of gravity can be represented
08:02 - as a
08:03 - vector pointing down at least in the
08:05 - world that i'm deciding to visualize
08:06 - it's a flat world
08:08 - where gravity points down i can think of
08:11 - the force of gravity
08:12 - just as a constant uh i'll make up an
08:14 - arbitrary number obviously in the real
08:16 - world there are
08:16 - actual units of measurement that are
08:18 - quite fundamental to the laws of physics
08:20 - but you know for right now i'm this is
08:22 - going to be some arbitrary constant
08:24 - i saw they're going to be really strong
08:25 - really weak to um in the
08:27 - um in the actual simulation that we
08:29 - eventually create you know but maybe for
08:30 - now it's going to be what
08:31 - why doesn't the bob just fall to the
08:33 - ground well it doesn't because it's
08:35 - attached it's attached to this arm
08:37 - so there is a force a tension force of
08:40 - the arm
08:41 - that is keeping it from just falling
08:43 - down
08:44 - and there's so much more to how this
08:46 - might work
08:47 - in terms of tension and maybe torque and
08:50 - all sorts of other factors that we could
08:52 - bring into this ultimately the way we
08:55 - can work this out
08:56 - is to make a nice right triangle right
08:59 - here
09:00 - out of this particular force of gravity
09:03 - where the right angle is relative to
09:07 - the axis defined by the arm of the
09:09 - pendulum so in other words
09:11 - you know i have before i was making this
09:13 - right triangle up here
09:14 - to figure out where to position the bob
09:17 - now i'm making another right triangle to
09:19 - take this force of gravity
09:20 - and separate it into two components what
09:23 - are those components
09:25 - there's this component here which we can
09:27 - think of as
09:29 - the equivalent force holding it locking
09:33 - it
09:33 - in place uh not in place but um to its
09:37 - sort of swinging
09:37 - path the arm itself and then this right
09:41 - here
09:42 - is the angular acceleration the sort of
09:46 - component of the force of gravity
09:48 - that is applied to the swinging of the
09:51 - pendulum itself
09:53 - and guess what look at the way that i've
09:55 - drawn this
09:57 - right over there this angle theta is
09:59 - exactly the same
10:01 - angle as this so this right here is
10:03 - what's known as the pendulum force
10:06 - force of gravity this component of this
10:09 - right triangle
10:10 - is the force of the pendulum and let's
10:13 - go back to our trigonometry formulas
10:16 - sine
10:17 - of theta equals opposite
10:20 - the force of the pendulum divided by
10:22 - hypotenuse
10:24 - the force of gravity and therefore
10:27 - force of the pendulum equals sine of
10:30 - theta
10:31 - times the force of gravity which i have
10:34 - just by the way
10:35 - mentioned is just a
10:38 - uh constant what number that i can make
10:40 - up let's see what happens
10:42 - if i take this exact formula and apply
10:44 - it in code
10:46 - the force of the pendulum equals and i'm
10:48 - going to make gravity a constant
10:51 - gravity times sine of
10:55 - the angle then i'm just going to say
10:58 - angle of the angular acceleration
11:01 - equals that force now look at this
11:04 - whoa it's kind of going crazy why is it
11:07 - going crazy
11:08 - we have to remember this is not anything
11:10 - close to resembling the real world
11:12 - this is a canvas in javascript in the
11:15 - browser
11:16 - uh that's everything is a flat world
11:18 - measured in pixels
11:19 - so while the and the force of gravity
11:22 - the value
11:22 - one is a really really large number
11:26 - to ultimately start applying to an
11:28 - angular acceleration
11:29 - so let's go back and play with that
11:30 - number and make it much much smaller
11:34 - oh look it's kind of working but what's
11:37 - going on
11:38 - it's flying in the opposite direction
11:41 - whoa
11:41 - this is going kind of crazy this always
11:44 - happens right because
11:45 - though in in in the sort of typical
11:47 - mathematical diagramming of things
11:50 - we have a cartesian plane the y-axis
11:53 - points upwards
11:54 - zero one two three four five but in a
11:57 - computer graphics p5 canvas
11:59 - zero zero being in the top left y points
12:01 - down
12:02 - so i think i've got things flipped sorry
12:05 - sorry
12:05 - sorry i have to interrupt uh this is dan
12:08 - you recognize me
12:09 - uh because i'm the person in the video
12:10 - you're watching but
12:12 - i'm i'm coming to you to issue a
12:14 - correction i was
12:15 - after recording this video i've been
12:17 - looking around at some of the past
12:18 - material related to chapter three and i
12:20 - found some comments on the internet
12:22 - and i found out that i've been kind of
12:24 - making a mistake in the way that i've
12:25 - been describing the pendulum and i want
12:27 - to issue that correction
12:29 - here in this video what i was just
12:31 - discussing
12:32 - is why i need to add a negative one why
12:34 - do i need to multiply this formula that
12:36 - i derived
12:37 - the force of the pendulum equals the
12:39 - force of gravity times sine of theta
12:41 - why do i need to make this negative 1 or
12:43 - negative 1 times this
12:44 - and i was kind of just going with my
12:46 - usual shtick about how well it must be
12:48 - because y points down and
12:50 - p5 and y really points up in a cartesian
12:53 - plane but that's actually not really the
12:54 - case here
12:55 - the point of confusion is much more
12:57 - about the way that i'm looking at this
12:59 - angle
13:00 - relative to the y-axis so let's look at
13:02 - this
13:03 - usually like if you go back to my polar
13:04 - to cartesian video
13:06 - about those polar coordinates you'll see
13:08 - that yeah i talk about an angle and it's
13:10 - relative to the x-axis and that's
13:12 - much more typical but here because the
13:14 - angle is relative to the y-axis
13:16 - as the ang as the pendulum extends
13:18 - outward the
13:20 - force of the pendulum is negative sine
13:23 - of that
13:23 - angle so that's really why it just has
13:25 - to do with precisely
13:27 - the way that i'm drawing this diagram
13:29 - right here with the angle relative to
13:31 - the y-axis and while
13:34 - the force of gravity is pointing down
13:37 - causing it to accelerate back in this
13:39 - direction
13:40 - which is causing it to spin quite out of
13:42 - control so i think
13:44 - an easy uh fix to this is to just
13:47 - um add a negative one
13:50 - and we can see now it's swinging back
13:52 - and forth now uh oh oh my god
13:54 - it's ringing faster and faster and
13:55 - faster that doesn't seem right
13:58 - sorry hi um you're not going to believe
14:00 - this here i
14:01 - am again a different saint dan different
14:03 - time actually almost a full
14:05 - week later i've been working on this
14:07 - pendulum video it's been such a journey
14:08 - but i figured out with the help of the
14:10 - coding train members in the discord
14:12 - a couple things about this pendulum
14:14 - simulation that i never
14:16 - actually understood before right now and
14:18 - i'm really excited to share those things
14:19 - with you and sort of
14:20 - just finish off the last few minutes of
14:22 - this video with some new found knowledge
14:24 - first this spinning out of control why
14:27 - is it doing that
14:28 - well this happens in a lot of physics
14:30 - simulations where
14:31 - a system can be very unstable and
14:33 - there's various reasons for that i talk
14:35 - about euler integration as one of the
14:36 - reasons
14:37 - but actually i have a very subtle but
14:40 - unbelievably significant error here in
14:42 - the order that i wrote this
14:44 - i am calculating the angular
14:45 - acceleration
14:47 - based on the angle then i change the
14:49 - angle and then i change the velocity
14:51 - based on that angular acceleration
14:53 - there's a issue there's a three-step
14:55 - process here
14:56 - calculate the force update the velocity
14:59 - according to the force
15:00 - update the position according to the
15:02 - velocity and i have done that out of
15:03 - order here all i need to do
15:05 - is do this in the proper order where as
15:07 - soon as i calculate
15:08 - that angular acceleration based on the
15:10 - current angle
15:11 - then i apply that to the velocity and
15:12 - that velocity is what applied to the
15:14 - angle i don't change the angle based on
15:15 - the velocity from the previous time
15:17 - before the other position
15:18 - it's all out of whack so now if i run
15:20 - this again we'll see
15:21 - that this pendulum there are definitely
15:23 - inaccuracies to this due to the large
15:25 - time step of my p5 simulation but
15:28 - it is a much more stable pendulum here
15:31 - there's another
15:32 - aspect to this that has been a
15:34 - breakthrough in my mind that just
15:35 - just literally happened in the last 10
15:37 - minutes which has really bothered me for
15:39 - a long time
15:40 - in the way that i position this example
15:42 - the pendulum example in the nature of
15:44 - code book itself
15:45 - after all i spent two entire chapters
15:47 - talking about vectors
15:48 - and forces as vectors and moving mover
15:51 - objects around a canvas in a
15:53 - two-dimensional space according to their
15:54 - xy position
15:55 - and the x-y vector of their velocity and
15:58 - acceleration and then all of a sudden
15:59 - i say ah never mind about that let's
16:01 - just work on one angle angular
16:02 - acceleration
16:03 - well in the case of a simple pendulum
16:05 - right this idea of this sort of
16:06 - idealized pendulum
16:08 - that has no friction and like the rod is
16:11 - like massless and there's just this bob
16:12 - it kind of is a nice case study in
16:15 - working with
16:16 - angles so i think that's why it makes
16:17 - sense but i kind of never really
16:20 - understood
16:20 - something about it which i want to get
16:22 - into right now so what is that thing so
16:24 - there's a big missing piece here and i
16:25 - think that i could demonstrate it to you
16:27 - briefly for a second let's take a look
16:28 - i'm going to give myself more vertical
16:30 - space to work with and put on auto
16:32 - refresh
16:33 - and then i'm going to try just playing
16:34 - around with this arm length variable
16:37 - let's make it uh 600.
16:41 - all right that seems kind of weird right
16:43 - that doesn't really feel right well
16:44 - let's make it 60.
16:47 - oh that's kind of right what's going on
16:50 - here
16:51 - why does that not feel right when it's
16:53 - longer but it feels more right when it's
16:54 - shorter
16:55 - if it's in between what's going on
16:58 - if you look at the derivation of how the
17:01 - angular acceleration of a simple
17:02 - pendulum is calculated i will refer you
17:04 - to
17:04 - two wonderful websites that i'll also
17:07 - put up on the screen right now that have
17:08 - more detailed explanations what i'm
17:10 - giving you right now
17:11 - you'll see the angular acceleration
17:13 - which i could sort of say like theta
17:15 - acceleration is equal to
17:18 - [Music]
17:19 - the gravitational force times
17:22 - sine of the angle divided by
17:27 - r r being this arm length
17:30 - why is that after all the force of the
17:33 - pendulum
17:34 - is equal to the force of gravity times
17:37 - sine of theta i've worked that out just
17:40 - previously like
17:41 - in the video you were just watching just
17:43 - now so why does that change
17:44 - that force of the pendulum is the same
17:45 - well that force of the pendulum is the
17:47 - same
17:48 - and if i were looking at linear
17:50 - acceleration in terms of the cartesian
17:52 - space
17:52 - it would accelerate and therefore move
17:54 - the same distance
17:56 - but guess what let's say this is the arc
17:59 - path of the pendulum here with this arm
18:01 - length now let's say i have a much
18:03 - longer arm length
18:05 - this is the arc path well if it moves
18:08 - this amount of distance
18:09 - here that references this
18:12 - change in the angle but let's say i move
18:14 - that same amount of distance down here
18:18 - notice that i need a much smaller angle
18:21 - to get that far so the longer the arm
18:23 - length the less the angle needs to
18:25 - change to travel a certain distance
18:27 - when the arm length is shorter the angle
18:29 - needs to change more to travel that same
18:30 - distance so the angular acceleration
18:32 - is larger shorter arm smaller
18:36 - longer arm divide by the angle divide by
18:39 - that arm length okay i think i finally
18:43 - understand this now
18:44 - hopefully i explained this in a way that
18:45 - was helpful to you i admit that maybe i
18:47 - didn't
18:48 - um hopefully some of the resources that
18:50 - i'll put in the video's description
18:51 - will be better explanations it took me a
18:53 - long time to sort of sort this out
18:54 - i can come back and follow up on it more
18:56 - in a live stream or some other videos
18:58 - but let's just take a look let's add
18:59 - that now to the code so
19:01 - the next piece that i need to add is to
19:03 - divide by
19:04 - r or in this case my variable is called
19:06 - length so if i look at that angular
19:08 - acceleration calculation
19:10 - divide by length
19:13 - now it's moving incredibly slowly of
19:15 - course because now that i'm dividing by
19:16 - length i need a
19:17 - larger force to begin with to make it
19:20 - sort of feel
19:20 - more natural so let's go back and just
19:22 - change this to like one
19:26 - that looks pretty good so let's see now
19:28 - if i
19:29 - make the arm shorter versus longer
19:31 - versus medium does it feel right i'll
19:33 - just sort of do this quickly and you let
19:34 - me know well you won't be able to let me
19:36 - know but
19:36 - i'm gonna watch you let me know in the
19:38 - comments arm length six hundred
19:42 - right feels pretty good arm length sixty
19:48 - arm length two hundred
19:52 - i would say this feels pretty good now
19:54 - because this is an idealized
19:56 - frictionless pendulum it will swing
19:58 - forever you know
20:00 - with some other inaccuracies so one
20:02 - thing you might want to consider is
20:03 - adding some damping to this
20:04 - for example if i were to just always
20:06 - every frame take the angular velocity
20:09 - and multiply it by like 0.99 reducing
20:12 - that velocity by
20:13 - one percent each frame eventually it
20:14 - will swing less and less and come to a
20:16 - stop personally i like it kind of
20:18 - swinging forever so i'm going to comment
20:20 - that out right now what's next for you
20:22 - well if you're looking for a technical
20:23 - exercise one thing that i would suggest
20:25 - is just try to turn this into an
20:27 - object-oriented sketch
20:28 - what would it mean to write a pendulum
20:30 - class in fact that's the example that i
20:32 - have in the nature of code book and i'll
20:34 - i'll provide a solution to that in the
20:36 - video's description if you're looking
20:38 - for a way to take this idea and make
20:40 - more creative visuals out of it just
20:42 - making many pendulums is a great place
20:44 - to start
20:45 - so what if you make many pendulums and
20:47 - vary their arm length their period their
20:49 - frequency
20:50 - all sorts of properties of the pendulum
20:52 - i actually did a whole
20:53 - half an hour hour in a recent live
20:55 - stream where i tried this a few
20:56 - different ways
20:57 - i'll link to that in the video's
20:59 - description so you can go watch that
21:00 - kind of like extended cut of this video
21:02 - if you want to check that out then of
21:04 - course there is the
21:05 - double pendulum or triple pendulum or
21:07 - quadruple pendulum
21:08 - what does it mean to take one pendulum
21:11 - and then attach another pendulum to the
21:13 - bob of the first pendulum this is
21:14 - actually
21:15 - quite a bit more of a complex problem
21:17 - than just
21:18 - adding two pendulums to one sketch i did
21:20 - this in a previous coding challenge
21:21 - which just runs through
21:23 - the uh porting the differential
21:25 - equations associated with the double
21:26 - pendulum
21:27 - to code in a p5.js sketch so you could
21:30 - explore that if you want
21:31 - and then future videos where i'm looking
21:33 - at other types of physics libraries or
21:34 - even in the next one
21:36 - the springs what does it mean to take
21:38 - one spring and attach another spring to
21:39 - and attach another to it
21:41 - though that will also kind of get you in
21:43 - that direction as well if you're
21:44 - interested
21:45 - so try all this stuff please make
21:47 - something i would be so happy if you did
21:50 - share it with me you can share it in the
21:51 - comments but better yet move on over to
21:53 - the coding train website where there's a
21:54 - system that you can link
21:56 - your creative version of a pendulum
21:58 - simple pendulum and share it with the
21:59 - coding trade community all right so
22:01 - thanks so much for watching and i will
22:02 - see you in a future coding train video
22:04 - [Music]
22:10 - goodbye
22:13 - you

Cleaned transcript:

it's 20 21. i have a new train whistle that's right welcome to the first coding challenge of 2021. i'm very excited to do this one i am going to program a swinging pendulum in p5.js starting from a blank sketch now this particular challenge this concept fits quite nicely and neatly into my nature of code playlist which has way too many videos about trigonometry and oscillating motion and vectors and forces so while you don't need to go back and watch those to follow along with this i will be building on top of a lot of the concepts covered there so uh if anything is confusing or i'll try to like refer you but you know check the video description there'll be links uh you can ask questions in the comments i'll help you along with this so what do i need to do to program a swinging pendulum well first i think i need this idea of a bob and then a arm so a line so i need an ellipse and a line great so i've got the visuals down for my pendulum now i just need to figure out oh how am i going to move it around and how am i going to have it swing i also was bothering me i want the center to be a little bit darker okay definitely going to need to do some white boarding here so the way that i'm going to work this out is that i am going to do this i mean there's definitely multiple ways that you could approach this problem and i'm also going to do a coding challenge about springs and you could take a look at that for a way of like you know i could also probably have a springy pendulum and i'll get to that when i get to that but ultimately what i want to do is i want to have this idea of an arm which i'm going to represent as a line and i can think about that as a vector and i want to have a bob which is just a circle right here and a very very important piece of information is the angle of the arm relative to the xaxis why is that the way that the pendulum should work is that i should figure out i need to calculate right the idea is if it swings it's swinging along a circular path the arm i'm talking about an idealized pendulum with an infinitely rigid arm that can never ever be stretched or contracted or broken so this distance this arm length is always the same no matter not drawing particularly well wherever the pendulum might be so the way that i go figure out how to draw the pendulum is all based on a particular angle and this is the important angle right here theta so let me actually first add that to the code like what if i happened and i'm going to use radians if you're unfamiliar with radians those nature of code play videos that i refer to at the beginning we'll cover that but let's just imagine first that i have the radians radians of pi divided by four is this particular angle uh well actually it's relative i said relative to here but i'm actually looking at relative to this yaxis to the center so i'm going to look at that particular angle and see if i can just change my drawing to have it start in the right place so i'm going to make a variable called angle and i'm going to say in setup angle equals pi divided by 4. now eventually i might want to do this in a sort of thoughtful objectoriented way but i'm just going to have a variable called bob and bob is going to be a vector and then i also need an arm length which i'll just use the variable len and i'll say that is 100. so i feel like i need to draw this again now with those three variables in mind this is the arm length 100. this is the angle pi divided by 4 i'm just going to write 45 degrees as that equivalent angle in degrees i need to figure out where is that point so i need to figure out what is the y offset from here and the x offset from here well guess what trigonometry is the answer to my prayers here if i know this angle and i know this value well sine right if this angle again is theta sine of theta equals opposite over hypotenuse x divided by 100 cosine of theta equals y adjacent over hypotenuse y divided by 100 multiply each side of the equation by 100 and x equals 100 times sine y equals 100 times cosine now you might be thinking oh that's a little bit backwards isn't x usually associated with cosine and y associated with sine yes if you look at my polar coordinates video it's absolutely true but i've kind of drawn things on their side here because i'm looking at this particular angle relative to the vertical axis rather than the horizontal axis i'm going to create a new variable for the origin point like where the arm is attached and we'll say origin equals create vector 300 comma zero like it's attached there at the top and so now the line should be from origin.x origin.y to bob.x bob.y and then the bob is at bob.x and bob.y the problem is i now need to calculate the bob position well that's why it just worked out bob.x equals the length times sine of the angle bob.y equals the length times cosine of the angle hmm that doesn't look right so why is that wrong the reason why that is wrong is these values are relative y offset and x offset from that origin point itself i just added those things to the origin point of zero zero so what i need to do here is say add origin.x and add origin.y there we go now i can make i probably want to make the pendulum a little bit longer let's make it 300 we can see and there we go all right so this is good if i have a particular angle value then i'm visualizing the pendulum correctly whatever that angle might be for example if i were to just say now angle plus equals 0.01 the pendulum is not swinging in a realistic fashion but it is swinging around you can see that angle is changing so i just need to figure out how does that angle change realistically assuming that there is a force of gravity pulling it down noticing here to get it to move i'm changing the angle by some constant value that can also be thought of as an angular velocity once again a topic that i angular motion is a topic that i cover more extensively in the nature of code videos but for right now i'm just going to add two additional variables i'm going to say angle v for angular velocity and then angle a for angular acceleration acceleration is a concept that's tied to force newton's second law force equals mass times acceleration i'm ignoring mass here the obviously mass is very important the fact that that bob has a mass to it um but i'm going to kind of just assume its mass is one as of now um but so i could simplify newton's law and just say force equals acceleration so the idea is the gravity force will somehow go into the acceleration which will then alter the velocity so the math here would be the velocity changes the angle and the acceleration changes the velocity so if i were to just add a little acceleration value here we would see it's going to start it's as if i'm swinging it around and around and around and around but i need that acceleration to be related to the force of gravity itself so back to the whiteboard let's figure that out the force of gravity can be represented as a vector pointing down at least in the world that i'm deciding to visualize it's a flat world where gravity points down i can think of the force of gravity just as a constant uh i'll make up an arbitrary number obviously in the real world there are actual units of measurement that are quite fundamental to the laws of physics but you know for right now i'm this is going to be some arbitrary constant i saw they're going to be really strong really weak to um in the um in the actual simulation that we eventually create you know but maybe for now it's going to be what why doesn't the bob just fall to the ground well it doesn't because it's attached it's attached to this arm so there is a force a tension force of the arm that is keeping it from just falling down and there's so much more to how this might work in terms of tension and maybe torque and all sorts of other factors that we could bring into this ultimately the way we can work this out is to make a nice right triangle right here out of this particular force of gravity where the right angle is relative to the axis defined by the arm of the pendulum so in other words you know i have before i was making this right triangle up here to figure out where to position the bob now i'm making another right triangle to take this force of gravity and separate it into two components what are those components there's this component here which we can think of as the equivalent force holding it locking it in place uh not in place but um to its sort of swinging path the arm itself and then this right here is the angular acceleration the sort of component of the force of gravity that is applied to the swinging of the pendulum itself and guess what look at the way that i've drawn this right over there this angle theta is exactly the same angle as this so this right here is what's known as the pendulum force force of gravity this component of this right triangle is the force of the pendulum and let's go back to our trigonometry formulas sine of theta equals opposite the force of the pendulum divided by hypotenuse the force of gravity and therefore force of the pendulum equals sine of theta times the force of gravity which i have just by the way mentioned is just a uh constant what number that i can make up let's see what happens if i take this exact formula and apply it in code the force of the pendulum equals and i'm going to make gravity a constant gravity times sine of the angle then i'm just going to say angle of the angular acceleration equals that force now look at this whoa it's kind of going crazy why is it going crazy we have to remember this is not anything close to resembling the real world this is a canvas in javascript in the browser uh that's everything is a flat world measured in pixels so while the and the force of gravity the value one is a really really large number to ultimately start applying to an angular acceleration so let's go back and play with that number and make it much much smaller oh look it's kind of working but what's going on it's flying in the opposite direction whoa this is going kind of crazy this always happens right because though in in in the sort of typical mathematical diagramming of things we have a cartesian plane the yaxis points upwards zero one two three four five but in a computer graphics p5 canvas zero zero being in the top left y points down so i think i've got things flipped sorry sorry sorry i have to interrupt uh this is dan you recognize me uh because i'm the person in the video you're watching but i'm i'm coming to you to issue a correction i was after recording this video i've been looking around at some of the past material related to chapter three and i found some comments on the internet and i found out that i've been kind of making a mistake in the way that i've been describing the pendulum and i want to issue that correction here in this video what i was just discussing is why i need to add a negative one why do i need to multiply this formula that i derived the force of the pendulum equals the force of gravity times sine of theta why do i need to make this negative 1 or negative 1 times this and i was kind of just going with my usual shtick about how well it must be because y points down and p5 and y really points up in a cartesian plane but that's actually not really the case here the point of confusion is much more about the way that i'm looking at this angle relative to the yaxis so let's look at this usually like if you go back to my polar to cartesian video about those polar coordinates you'll see that yeah i talk about an angle and it's relative to the xaxis and that's much more typical but here because the angle is relative to the yaxis as the ang as the pendulum extends outward the force of the pendulum is negative sine of that angle so that's really why it just has to do with precisely the way that i'm drawing this diagram right here with the angle relative to the yaxis and while the force of gravity is pointing down causing it to accelerate back in this direction which is causing it to spin quite out of control so i think an easy uh fix to this is to just um add a negative one and we can see now it's swinging back and forth now uh oh oh my god it's ringing faster and faster and faster that doesn't seem right sorry hi um you're not going to believe this here i am again a different saint dan different time actually almost a full week later i've been working on this pendulum video it's been such a journey but i figured out with the help of the coding train members in the discord a couple things about this pendulum simulation that i never actually understood before right now and i'm really excited to share those things with you and sort of just finish off the last few minutes of this video with some new found knowledge first this spinning out of control why is it doing that well this happens in a lot of physics simulations where a system can be very unstable and there's various reasons for that i talk about euler integration as one of the reasons but actually i have a very subtle but unbelievably significant error here in the order that i wrote this i am calculating the angular acceleration based on the angle then i change the angle and then i change the velocity based on that angular acceleration there's a issue there's a threestep process here calculate the force update the velocity according to the force update the position according to the velocity and i have done that out of order here all i need to do is do this in the proper order where as soon as i calculate that angular acceleration based on the current angle then i apply that to the velocity and that velocity is what applied to the angle i don't change the angle based on the velocity from the previous time before the other position it's all out of whack so now if i run this again we'll see that this pendulum there are definitely inaccuracies to this due to the large time step of my p5 simulation but it is a much more stable pendulum here there's another aspect to this that has been a breakthrough in my mind that just just literally happened in the last 10 minutes which has really bothered me for a long time in the way that i position this example the pendulum example in the nature of code book itself after all i spent two entire chapters talking about vectors and forces as vectors and moving mover objects around a canvas in a twodimensional space according to their xy position and the xy vector of their velocity and acceleration and then all of a sudden i say ah never mind about that let's just work on one angle angular acceleration well in the case of a simple pendulum right this idea of this sort of idealized pendulum that has no friction and like the rod is like massless and there's just this bob it kind of is a nice case study in working with angles so i think that's why it makes sense but i kind of never really understood something about it which i want to get into right now so what is that thing so there's a big missing piece here and i think that i could demonstrate it to you briefly for a second let's take a look i'm going to give myself more vertical space to work with and put on auto refresh and then i'm going to try just playing around with this arm length variable let's make it uh 600. all right that seems kind of weird right that doesn't really feel right well let's make it 60. oh that's kind of right what's going on here why does that not feel right when it's longer but it feels more right when it's shorter if it's in between what's going on if you look at the derivation of how the angular acceleration of a simple pendulum is calculated i will refer you to two wonderful websites that i'll also put up on the screen right now that have more detailed explanations what i'm giving you right now you'll see the angular acceleration which i could sort of say like theta acceleration is equal to the gravitational force times sine of the angle divided by r r being this arm length why is that after all the force of the pendulum is equal to the force of gravity times sine of theta i've worked that out just previously like in the video you were just watching just now so why does that change that force of the pendulum is the same well that force of the pendulum is the same and if i were looking at linear acceleration in terms of the cartesian space it would accelerate and therefore move the same distance but guess what let's say this is the arc path of the pendulum here with this arm length now let's say i have a much longer arm length this is the arc path well if it moves this amount of distance here that references this change in the angle but let's say i move that same amount of distance down here notice that i need a much smaller angle to get that far so the longer the arm length the less the angle needs to change to travel a certain distance when the arm length is shorter the angle needs to change more to travel that same distance so the angular acceleration is larger shorter arm smaller longer arm divide by the angle divide by that arm length okay i think i finally understand this now hopefully i explained this in a way that was helpful to you i admit that maybe i didn't um hopefully some of the resources that i'll put in the video's description will be better explanations it took me a long time to sort of sort this out i can come back and follow up on it more in a live stream or some other videos but let's just take a look let's add that now to the code so the next piece that i need to add is to divide by r or in this case my variable is called length so if i look at that angular acceleration calculation divide by length now it's moving incredibly slowly of course because now that i'm dividing by length i need a larger force to begin with to make it sort of feel more natural so let's go back and just change this to like one that looks pretty good so let's see now if i make the arm shorter versus longer versus medium does it feel right i'll just sort of do this quickly and you let me know well you won't be able to let me know but i'm gonna watch you let me know in the comments arm length six hundred right feels pretty good arm length sixty arm length two hundred i would say this feels pretty good now because this is an idealized frictionless pendulum it will swing forever you know with some other inaccuracies so one thing you might want to consider is adding some damping to this for example if i were to just always every frame take the angular velocity and multiply it by like 0.99 reducing that velocity by one percent each frame eventually it will swing less and less and come to a stop personally i like it kind of swinging forever so i'm going to comment that out right now what's next for you well if you're looking for a technical exercise one thing that i would suggest is just try to turn this into an objectoriented sketch what would it mean to write a pendulum class in fact that's the example that i have in the nature of code book and i'll i'll provide a solution to that in the video's description if you're looking for a way to take this idea and make more creative visuals out of it just making many pendulums is a great place to start so what if you make many pendulums and vary their arm length their period their frequency all sorts of properties of the pendulum i actually did a whole half an hour hour in a recent live stream where i tried this a few different ways i'll link to that in the video's description so you can go watch that kind of like extended cut of this video if you want to check that out then of course there is the double pendulum or triple pendulum or quadruple pendulum what does it mean to take one pendulum and then attach another pendulum to the bob of the first pendulum this is actually quite a bit more of a complex problem than just adding two pendulums to one sketch i did this in a previous coding challenge which just runs through the uh porting the differential equations associated with the double pendulum to code in a p5.js sketch so you could explore that if you want and then future videos where i'm looking at other types of physics libraries or even in the next one the springs what does it mean to take one spring and attach another spring to and attach another to it though that will also kind of get you in that direction as well if you're interested so try all this stuff please make something i would be so happy if you did share it with me you can share it in the comments but better yet move on over to the coding train website where there's a system that you can link your creative version of a pendulum simple pendulum and share it with the coding trade community all right so thanks so much for watching and i will see you in a future coding train video goodbye you
