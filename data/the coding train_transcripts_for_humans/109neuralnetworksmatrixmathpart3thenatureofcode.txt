With timestamps:

00:00 - and we are here this is the video in
00:03 - this playlist which really comes right
00:07 - after 10.7 matrix backs part two this is
00:09 - matrix math part 3 where I am finally
00:12 - going to look at okay
00:19 - matrix multiplication or really I should
00:21 - say matrix multiplication okay so if you
00:28 - recall what I'm doing I know it looked
00:32 - quite different but I already covered
00:33 - that we'll bring this one was made a
00:36 - while ago anyway if I have a matrix
00:39 - right and what I mean by a matrix is a
00:42 - grid of values and let's say I have one
00:46 - that looks like this a b c d e this is a
00:53 - 3 no no it is a 2 by 3 matrix we always
01:01 - refer to the number of rows before the
01:03 - number of columns now what does it need
01:06 - and and and previously with when i made
01:09 - some videos just about vectors i talked
01:11 - about this thing called a dot product
01:13 - but i'm gonna change that here and write
01:16 - the matrix product so first of all what
01:18 - does it mean to multiply a matrix by by
01:22 - something i could just multiply this
01:23 - matrix by a single number and that's
01:26 - what's known as well it's not really
01:27 - that's what's known as scaler sorry
01:29 - scaler if i multiply this by a single
01:31 - number then I just say if this was a
01:34 - whole bunch of ones multiply it by two I
01:35 - got a whole bunch of two's you know if I
01:37 - multiply by two double every value in
01:39 - the matrix and I think actually now I
01:40 - did that in the previous video I could
01:43 - also do what's known as element wise
01:45 - multiplication and that is also referred
01:48 - to as the hata mard
01:50 - i don't know if i'm pronouncing that
01:51 - correctly and breaking new somebody in
01:53 - the live chat that's going on right now
01:55 - told me that it also son is called a
01:57 - short product and what that means is
01:59 - imagine I have another matrix that's
02:01 - exactly the same size as this one and in
02:06 - fact I could kind of do that little
02:07 - small over here and I could say G H I J
02:12 - k:l right so I could have another matrix
02:14 - if it's exactly the same size and mine
02:16 - if I multiplied these together I have a
02:18 - new matrix which is has a times G B
02:21 - times H C times I D times J element-wise
02:24 - each each element of the matrix get
02:26 - multiplied by its corresponding other
02:28 - element now I don't those are perfectly
02:32 - valid I'm looking for my eraser
02:34 - perfectly valid ways of doing
02:35 - multiplication oops but what I'm really
02:39 - interested in is the matrix product and
02:42 - the reason why I'm interested in the
02:44 - matrix product is because I want to use
02:49 - the matrix product for a neural network
02:52 - for example this node in a neural
02:55 - network is going to be the result of the
02:59 - weighted sum of all of the input nodes x
03:04 - weighted connections and this one is
03:08 - also going to be the weighted sum of all
03:10 - of the input nodes x weighted
03:12 - connections and so on and so forth and
03:14 - so these weights are stored in a matrix
03:17 - and the inputs come in in a matrix as
03:21 - well so if this is how I'm representing
03:24 - the inputs then you might discover that
03:30 - I have this matrix of all these weights
03:35 - that I need to multiply those inputs by
03:38 - to get the new values of the outputs of
03:42 - this hidden layer now anyway I kind of
03:44 - talked about that in a previous video
03:46 - and I'm going to talk about it a lot
03:49 - more in the next video when we look at
03:51 - this in more detail but the point here
03:54 - is that this idea of a matrix product is
03:56 - something that I'm going to need don't
03:58 - worry about the whole neural network
04:00 - thing I'm going to come back to that in
04:02 - next video and go through that in detail
04:04 - what I need to do here is just
04:06 - understand I know I need the matrix
04:08 - product how does it work and then we'll
04:11 - see how its applied in the neural
04:12 - network example ok so let's say that I
04:15 - have another I have a matrix a and I
04:18 - have another matrix B and that matrix is
04:21 - equal to
04:23 - g h i j k l I'm writing l like that so
04:29 - that I can see that it's not a 1 or
04:31 - whatever ok so I have these two matrices
04:34 - the way that I write the expression a
04:37 - matrix product B I'm gonna write it like
04:40 - this a dot B the dot is the indicator
04:44 - for the matrix product
04:46 - now what couple things that are really
04:47 - important here 1 the commutative
04:50 - property does not hold a dot B does not
04:53 - equal B dot a this is not true and
04:57 - you're gonna see why in a minute
04:58 - you know if I were to say 3 times 4
05:01 - that's equal to 4 times 3 they're both
05:03 - equal to 12 but again this matrix
05:04 - product is a different kind of
05:06 - multiplication this commutative property
05:08 - does not hold so that's kind of key
05:12 - another thing that's really important is
05:15 - the matrix product is something you
05:17 - could only do if the sizes of the
05:20 - matrices match up and what do I mean by
05:22 - that now one thing you might have
05:23 - thought but realize like if I was doing
05:25 - when I have that example the Hadamard
05:26 - product that's only gonna work if I have
05:28 - two matrices with the same exact
05:30 - dimensions right because if I if I don't
05:33 - have the same dimensions how can I
05:34 - multiply each element by the other
05:35 - element because some elements might not
05:37 - exist in one of them but something even
05:38 - completely different it's going to go on
05:40 - here I need to have for this to be valid
05:42 - I need to have the columns right the
05:47 - columns of a equal to the rows of B and
05:51 - you'll notice I made these do that so I
05:54 - have to have however many columns I have
05:56 - here 3 I have to have exactly the same
05:58 - number of rows and B otherwise this
06:00 - won't work and the reason is what I'm
06:04 - actually going to do is the reason why I
06:06 - use this dot here is I'm going to use
06:08 - the vector dot product vector dot
06:11 - product so you might have to go back to
06:13 - one of my previous videos where I talked
06:15 - about the vector dot product or gonna do
06:16 - it here again but what the vector dot
06:18 - product does is it takes kind of like
06:20 - the sum of all the elements multiplied
06:24 - the element wise elements both tied to
06:26 - each other what do I mean by that so if
06:29 - I say a dot B I'm gonna get when I when
06:32 - I take one matrix the a matrix product B
06:37 - result is also going to be a matrix now
06:39 - how do I know the dimensions of that
06:41 - matrix
06:41 - it's going to have the number of rows of
06:44 - a which is how many - followed by the
06:50 - number of columns of B what - so in the
06:55 - enemy in a 2 by 2 matrix now this is
06:57 - gonna be different with any all
06:59 - different matrix dimensions and after
07:01 - you watch this video you can make up
07:02 - lots of different matrices and play a
07:03 - game with yourself to like do this
07:05 - matrix product with pencil and paper boy
07:07 - won't that be fine I'm gonna go do that
07:09 - later
07:09 - myself I'm sure um but here we can see
07:12 - I'm gonna get a square 2 by 2 matrix now
07:15 - what am I doing here how do I fill in
07:17 - each of these blanks so I'm gonna just
07:20 - put a little blank square here I know I
07:23 - need to buy two well what I do is I take
07:27 - the dot product of the row of the first
07:30 - one with the cup of the row of a with
07:35 - the column of B right so it's almost
07:38 - kind of like the intersection this first
07:41 - element right I gotta get the first row
07:44 - of a and the first column of B that's
07:46 - why they have to have the same number of
07:47 - rows and B as columns an a so what this
07:50 - actually is this value here is the dot
07:53 - product of these two vectors which is
07:56 - actually let me just come over here
07:59 - which is a times G Plus B times I plus C
08:09 - times I ok so that's this element here
08:13 - now let's do this element here well I'm
08:16 - in row 1 so I stay with Row 1 of a but
08:22 - now I'm in column 2 so I go to column 2
08:24 - of B so now this particular value is a
08:29 - times H plus B times J plus C times L
08:39 - okay that's good
08:42 - now let me do this one this one is the
08:45 - second row times the first row the first
08:50 - column of B
08:51 - D times G + e times I plus F times K and
08:55 - then this one here is going to be the
08:58 - second row times the second column D
09:00 - times H + e times J plus F times L ok so
09:04 - that's the math for any arbitrary set of
09:08 - matrices you take the dot product of all
09:10 - the rows with the columns to fill out
09:13 - your resulting matrix product and you
09:15 - must have the same number of columns in
09:17 - a as rows of B ok so pause this video if
09:23 - you want try to draw some diagrams
09:25 - google matrix product google image
09:26 - search matrix product you probably come
09:28 - up with a million visual examples of
09:29 - this watch three blue one browns videos
09:32 - on lunar algebra which will probably
09:33 - teach dozen a much more intuitive and
09:35 - nice way but I don't link to that in
09:39 - this video's description I'm now going
09:40 - to try to implement this matrix product
09:41 - even code minor correction hopefully I
09:44 - said the right thing but I do have
09:47 - something wrong here a times G B times I
09:50 - C times K this should be a K right here
09:56 - okay so let's try to implement the math
09:59 - for this so where I'm gonna do this is
10:01 - in the multiply function and I had
10:03 - written that before to do scalar
10:05 - multiplication and I'm gonna do the same
10:07 - thing I did an ad where I'm gonna check
10:09 - what is the thing coming in is it a
10:11 - matrix or is it a scalar or etc so I'm
10:15 - not going to bother with the Hadamard
10:16 - product I'll add that into this matrix
10:19 - library if I ever need it but I'm just
10:22 - going to check is N and instance of a
10:24 - matrix if that's so then I want to do
10:27 - matrix product otherwise I want to do
10:34 - scalar product okay so now I need to
10:39 - write the code for the matrix product
10:40 - right there but first I must check are
10:45 - the columns of a equal to the rows of B
10:47 - otherwise I cannot perform the matrix
10:49 - product at all so I'm going to come over
10:51 - here and I'm gonna say if I mean the
10:56 - right screen yes if the a is this matrix
11:01 - object if this dot Rose
11:04 - know if it stud columns does not equal
11:07 - and rose I kind of don't like that this
11:11 - is called n here but whatever just then
11:15 - and I'll use this more strict equals
11:18 - here then I D to return like undefined
11:22 - or something like just get out of here
11:23 - this is no good and I'm going to console
11:26 - dot log columns of a must match rows of
11:32 - B columns now I could be more thoughtful
11:37 - and I can use a try-catch with some
11:38 - error handling but I'm just going to do
11:39 - this for right now just to be some and
11:41 - let's actually make sure this works so
11:43 - if I go back to loading that code and I
11:47 - said something like a is a matrix that
11:51 - is three by three and B is a matrix that
11:57 - is five by ten if I say a multiply B I
12:04 - get undefined and it says columns of a
12:06 - must match rows of B so that's working
12:08 - and I could just say B is a matrix of
12:17 - five by sorry three by three also then
12:20 - they match and I'm say a multiply B I
12:23 - still get under fine because I have done
12:25 - it yet but I don't get that error
12:26 - message okay so now I need to create a
12:30 - new matrix so I'm just say the result is
12:36 - a new matrix that has the number of what
12:42 - did I say it has the number of rows of a
12:46 - and the number of columns of B so it has
12:50 - the number of rows of a and the number
12:54 - of columns of B come on Adam keeps
13:00 - wanting me to put my password in okay
13:02 - all right so that's good now I need to
13:05 - do each spot so for each row whoops
13:17 - for each row and for each column I need
13:27 - to do the dot product of that lips first
13:34 - of all I have an error before I can do
13:35 - this I have an error here and what I
13:40 - want is if I'm at 0-0 I want all of the
13:44 - values I want to do the sum of all of
13:47 - the values well so I want let's just do
13:52 - this manually in this case it would be
13:57 - this dot matrix I times and matrix J
14:09 - sorry I I need yeah I need another
14:14 - double nested loop in here right because
14:16 - I'm going to take this and add I plus
14:23 - plus one but staying in J J plus 1 right
14:30 - is this right I plus 2 J plus 2 I mean
14:37 - this isn't I'm making this up because I
14:39 - don't I'm doing this an arbitrary way we
14:41 - don't know what the actual rows this
14:43 - this just goes up depending on the
14:45 - number of of rows columns there are all
14:50 - right right so maybe I only need one
14:55 - loop here because I need one loop so
14:57 - what's that know because these could be
15:01 - different yeah k week Mon is telling me
15:06 - in the chat another way of thinking
15:08 - about this is I could say and you know
15:12 - what would might be nice actually one
15:14 - thing that I could do here just at least
15:16 - I think it's gonna help me work this out
15:17 - is I could say let a equal this dot
15:21 - matrix and let B equal end
15:26 - just to have variables called a and B
15:29 - for the two different matrices and this
15:33 - is still the result but in other words
15:35 - what I'm saying is a and this is B so a
15:40 - I K B KJ so it's a little Olin let me
15:49 - with K sum over K so hold on so let me
15:55 - put this here did I get this wrong this
15:58 - is B is it yes so you know what's wrong
16:06 - about this
16:07 - so let's look now we can get this right
16:09 - here's what I'm doing here I want a I
16:11 - want to be increasing not the row but
16:14 - the column I did it wrong I did it
16:16 - backwards do you guys like watching
16:18 - these videos where I try to figure it
16:19 - out I don't know it could I could just
16:22 - get it right the first time I could just
16:24 - like start over and get it right but
16:25 - what I'm doing is I'm every column of a
16:29 - which column is I'm actually using yes
16:35 - it's Col it's all its row I
16:37 - but I'm iterating over the columns of
16:39 - course of course of course
16:41 - so it is this J
16:53 - so this is actually this is what I need
16:56 - so what I should be able to say is
16:59 - result
17:00 - I need another loop for let K equals 0 K
17:06 - is less than and I can use remember I
17:08 - could use a column Zoar B's rows those
17:12 - have to be the same so I'm gonna use a
17:13 - as columns yes k plus plus and then I'm
17:23 - first I need to say let sum equals 0 and
17:26 - then I'm gonna say sum plus equal a
17:29 - index I K plus B index K J this I think
17:38 - is right and then I have to put that in
17:42 - the result result result i J equals sum
17:56 - so if I was using like some other vector
17:59 - library I could like pull those out then
18:00 - do the dot product but let's see here
18:03 - let's make sure this is right I want to
18:06 - for every element in the results I want
18:09 - to sum the dot product of all of the
18:13 - column spots in a that's K with all of
18:17 - the row spots in B and then I've got the
18:20 - result and lying 50s I'm seeing deep
18:24 - space in the chat says lying 57 oh yes
18:26 - sorry this needs to be multiplied so
18:29 - these get multiplied I'm summing the
18:30 - product of all those yes and of course
18:34 - there are much faster ways I'm not
18:36 - looking for any any efficiency here I'm
18:39 - just trying to understand the algorithm
18:40 - and make sure I have something that
18:42 - works okay so now I need one more curly
18:49 - bracket and I think if i zoom back out
18:55 - here I think I am done this is the
18:58 - algorithm right I have a new matrix that
19:02 - has that is of the size of an
19:05 - this I should do this down here the size
19:07 - of A's rose and B is columns then I go
19:12 - through it and I do the dot product of a
19:14 - vector from of a row of a and a column
19:17 - of B store that result okay
19:21 - and B is here's another mistake B equals
19:24 - n dot matrix right because the actual
19:26 - two dimensional array is stored in a
19:30 - variable called matrix it's not it's not
19:34 - the it's the the object itself has the
19:37 - data inside a variable okay so how are
19:39 - we gonna test this I actually have a
19:42 - sketch here so I'm gonna in that's a p5
19:45 - sketch I may not even use anything about
19:47 - p5 I'm gonna have a be a new matrix
19:49 - that's 3 by 2 sorry 2 by 3 I'm going to
19:55 - see the same for B which is 3 by 2 then
20:02 - I'm going to say a a dot randomized B
20:06 - dot randomized console.log a dot matrix
20:11 - and console dot log and not dot log
20:16 - table B dot matrix so let's take a look
20:24 - at that okay so now I have to make two
20:28 - matrices this is one and they with
20:31 - random values in them so now I'm gonna
20:33 - say let C equal a dot multiply B
20:54 - oh I didn't get anything there oh oh I
20:59 - didn't console.log it
21:00 - oh man console table C dot matrix oh I
21:06 - forgot about that part okay here we go
21:08 - again
21:16 - shoot all right so what's this error
21:21 - sketch that jeaious line 11 cannot did
21:28 - Isis forget to return it I forgot to
21:30 - return it didn't I
21:32 - okay you know what would be nice is that
21:35 - the end of this I said return result and
21:38 - this actually goes we're here right
21:41 - I got a return to return that result all
21:44 - right let's try this again
21:52 - no I forgot hit save uh-oh I'm being
22:00 - told breaking news breaking news the
22:04 - return is in this for loop that's not
22:06 - good oh right because this just the
22:09 - return was in the for loop that's
22:11 - terrible and this says results and it
22:13 - should say results okay I'm feeling a
22:15 - little bit a little bit more confident
22:18 - now what what what oh oh oh my goodness
22:30 - I'm completely losing my mind here so
22:34 - it's very important to realize that
22:35 - result is the matrix object ah the
22:39 - matrix object has this array called
22:42 - matrix which actually stores the values
22:44 - and there's no like set function or
22:46 - anything so what I actually really need
22:48 - to put here is result dot matrix right
22:52 - equals this result dot matrix equals no
22:57 - and then return results right so I these
22:59 - values that I'm calculating this
23:01 - probably be like a set function or
23:02 - something like that
23:03 - and I probably should just created the
23:05 - 2d array here and then made a major but
23:07 - whatever this is what it needs to be I
23:08 - think we got it now oh boy oh oh this is
23:20 - the worst I'm really doing a horrible so
23:25 - I've done something terrible here but
23:27 - hopefully you know you're watching this
23:29 - video and maybe this is valuable to you
23:30 - I have really conflated the idea of the
23:33 - 2d array that stores the values with the
23:35 - object and I'm using it all sorts of
23:37 - terrible ways so let's think about this
23:41 - this is this is this is what I want a is
23:45 - this B is n now I can get the rows and
23:49 - columns but down here I really need to
23:52 - say a dot matrix B dot matrix right and
23:58 - and that goes into the resultant matrix
24:03 - so I hopefully this is clear too
24:06 - the issue let me try to rephrase it
24:08 - again in case it's not there is this
24:10 - idea of a matrix object it has three
24:13 - properties the number of rows the number
24:15 - of columns and the actual 2d array so
24:18 - where I refer to the variable that's the
24:19 - matrix object and I want to actually do
24:21 - something to the data I have to say the
24:23 - name of the object dot matrix and some
24:26 - I'm forgetting to do that in so many
24:28 - different places so what I'm gonna do
24:33 - what I'm gonna look at down here is I
24:34 - think now everything is correct if a and
24:36 - B are the names of the objects I could
24:39 - pull out the rows and columns from a and
24:41 - then I could pull out the values from a
24:43 - dot matrix and B dot matrix and set the
24:46 - values in result dot matrix okay how
24:51 - couldn't be confident I really should
24:53 - not be confident this is a terrible idea
24:56 - but I'm confident
25:03 - okay so we finally got three things if
25:06 - this is a and this is B this is a dot B
25:10 - anybody want a fact check from me for
25:13 - this coming the chat I don't I'm gonna
25:17 - pop in a wait now this will get edited
25:20 - out thank you thank you these numbers
25:25 - are in fact correct I took a little
25:26 - break there and check them they are
25:28 - right I encourage you to pause the video
25:29 - and check them yourself to see if you
25:31 - understand how the library is working
25:32 - one thing that actually could be really
25:34 - useful
25:35 - I don't ever employ tests never really
25:38 - but I should learn about tests and I
25:40 - should probably do some stuff with tests
25:41 - on this channel so I think I might come
25:43 - back and try to do some tests that would
25:45 - if I ever change the code for this
25:47 - matrix library to ensure that the math
25:49 - still works so maybe someday I'll come
25:51 - back and do that but and now yes there
25:55 - needs to be a lot of tidying up and
25:57 - refactoring I can use these array
25:58 - functions and I'm gonna get to all that
26:00 - but now we're ready the next video I can
26:03 - take this matrix library this matrix
26:07 - class and use it in my neural network
26:10 - class to perform the feed-forward
26:14 - algorithm of taking all these inputs
26:16 - multiplying them by weights and getting
26:19 - new outputs which then go into other
26:22 - node they become inputs to a hidden
26:23 - layer of nodes eccentric search I've
26:25 - talked about that in the previous videos
26:26 - and now I'm gonna come back and actually
26:28 - do that címon in the chat makes a good
26:31 - point where if you look at this class
26:34 - all of these functions randomized ad
26:38 - multiply up to multiply they change the
26:42 - object that I'm calling the function on
26:43 - so if I say matrix a I say a dot
26:47 - randomized that matrix object actually
26:50 - changes but in this with this matrix
26:52 - product I'm not actually affecting the
26:54 - object when I say a multiply B I don't
26:57 - change the value of a I create a new a
27:00 - new matrix object and return that value
27:04 - so I probably should refactor the
27:07 - library to do maybe that mult matrix
27:12 - product in a slightly different way and
27:13 - I could use something called a static
27:15 - method so I'm like I'll come back maybe
27:17 - in a later video when I refactor this a
27:19 - little bit I wanted to mention that now
27:20 - but it also reminded me there's one more
27:23 - matrix operation that I need for the
27:25 - neural network stuff I think I don't
27:26 - actually need it for the feed-forward so
27:28 - I could come back and do it after that
27:29 - but I do need it for the training aspect
27:32 - when I adjust and tune it based on the
27:35 - width the guess is well I get to all
27:36 - that later the thing that I need is to
27:39 - transpose a matrix so how do I transpose
27:42 - a matrix if I have a matrix a with a
27:43 - certain number of rows and columns start
27:46 - rows and columns the columns become the
27:48 - rows the rows become the columns so
27:50 - transposing this matrix would turn it
27:54 - into this matrix okay so I'm going to
27:57 - quickly in the next video write a
27:59 - function that does exactly that
28:05 - [Music]

Cleaned transcript:

and we are here this is the video in this playlist which really comes right after 10.7 matrix backs part two this is matrix math part 3 where I am finally going to look at okay matrix multiplication or really I should say matrix multiplication okay so if you recall what I'm doing I know it looked quite different but I already covered that we'll bring this one was made a while ago anyway if I have a matrix right and what I mean by a matrix is a grid of values and let's say I have one that looks like this a b c d e this is a 3 no no it is a 2 by 3 matrix we always refer to the number of rows before the number of columns now what does it need and and and previously with when i made some videos just about vectors i talked about this thing called a dot product but i'm gonna change that here and write the matrix product so first of all what does it mean to multiply a matrix by by something i could just multiply this matrix by a single number and that's what's known as well it's not really that's what's known as scaler sorry scaler if i multiply this by a single number then I just say if this was a whole bunch of ones multiply it by two I got a whole bunch of two's you know if I multiply by two double every value in the matrix and I think actually now I did that in the previous video I could also do what's known as element wise multiplication and that is also referred to as the hata mard i don't know if i'm pronouncing that correctly and breaking new somebody in the live chat that's going on right now told me that it also son is called a short product and what that means is imagine I have another matrix that's exactly the same size as this one and in fact I could kind of do that little small over here and I could say G H I J kl right so I could have another matrix if it's exactly the same size and mine if I multiplied these together I have a new matrix which is has a times G B times H C times I D times J elementwise each each element of the matrix get multiplied by its corresponding other element now I don't those are perfectly valid I'm looking for my eraser perfectly valid ways of doing multiplication oops but what I'm really interested in is the matrix product and the reason why I'm interested in the matrix product is because I want to use the matrix product for a neural network for example this node in a neural network is going to be the result of the weighted sum of all of the input nodes x weighted connections and this one is also going to be the weighted sum of all of the input nodes x weighted connections and so on and so forth and so these weights are stored in a matrix and the inputs come in in a matrix as well so if this is how I'm representing the inputs then you might discover that I have this matrix of all these weights that I need to multiply those inputs by to get the new values of the outputs of this hidden layer now anyway I kind of talked about that in a previous video and I'm going to talk about it a lot more in the next video when we look at this in more detail but the point here is that this idea of a matrix product is something that I'm going to need don't worry about the whole neural network thing I'm going to come back to that in next video and go through that in detail what I need to do here is just understand I know I need the matrix product how does it work and then we'll see how its applied in the neural network example ok so let's say that I have another I have a matrix a and I have another matrix B and that matrix is equal to g h i j k l I'm writing l like that so that I can see that it's not a 1 or whatever ok so I have these two matrices the way that I write the expression a matrix product B I'm gonna write it like this a dot B the dot is the indicator for the matrix product now what couple things that are really important here 1 the commutative property does not hold a dot B does not equal B dot a this is not true and you're gonna see why in a minute you know if I were to say 3 times 4 that's equal to 4 times 3 they're both equal to 12 but again this matrix product is a different kind of multiplication this commutative property does not hold so that's kind of key another thing that's really important is the matrix product is something you could only do if the sizes of the matrices match up and what do I mean by that now one thing you might have thought but realize like if I was doing when I have that example the Hadamard product that's only gonna work if I have two matrices with the same exact dimensions right because if I if I don't have the same dimensions how can I multiply each element by the other element because some elements might not exist in one of them but something even completely different it's going to go on here I need to have for this to be valid I need to have the columns right the columns of a equal to the rows of B and you'll notice I made these do that so I have to have however many columns I have here 3 I have to have exactly the same number of rows and B otherwise this won't work and the reason is what I'm actually going to do is the reason why I use this dot here is I'm going to use the vector dot product vector dot product so you might have to go back to one of my previous videos where I talked about the vector dot product or gonna do it here again but what the vector dot product does is it takes kind of like the sum of all the elements multiplied the element wise elements both tied to each other what do I mean by that so if I say a dot B I'm gonna get when I when I take one matrix the a matrix product B result is also going to be a matrix now how do I know the dimensions of that matrix it's going to have the number of rows of a which is how many followed by the number of columns of B what so in the enemy in a 2 by 2 matrix now this is gonna be different with any all different matrix dimensions and after you watch this video you can make up lots of different matrices and play a game with yourself to like do this matrix product with pencil and paper boy won't that be fine I'm gonna go do that later myself I'm sure um but here we can see I'm gonna get a square 2 by 2 matrix now what am I doing here how do I fill in each of these blanks so I'm gonna just put a little blank square here I know I need to buy two well what I do is I take the dot product of the row of the first one with the cup of the row of a with the column of B right so it's almost kind of like the intersection this first element right I gotta get the first row of a and the first column of B that's why they have to have the same number of rows and B as columns an a so what this actually is this value here is the dot product of these two vectors which is actually let me just come over here which is a times G Plus B times I plus C times I ok so that's this element here now let's do this element here well I'm in row 1 so I stay with Row 1 of a but now I'm in column 2 so I go to column 2 of B so now this particular value is a times H plus B times J plus C times L okay that's good now let me do this one this one is the second row times the first row the first column of B D times G + e times I plus F times K and then this one here is going to be the second row times the second column D times H + e times J plus F times L ok so that's the math for any arbitrary set of matrices you take the dot product of all the rows with the columns to fill out your resulting matrix product and you must have the same number of columns in a as rows of B ok so pause this video if you want try to draw some diagrams google matrix product google image search matrix product you probably come up with a million visual examples of this watch three blue one browns videos on lunar algebra which will probably teach dozen a much more intuitive and nice way but I don't link to that in this video's description I'm now going to try to implement this matrix product even code minor correction hopefully I said the right thing but I do have something wrong here a times G B times I C times K this should be a K right here okay so let's try to implement the math for this so where I'm gonna do this is in the multiply function and I had written that before to do scalar multiplication and I'm gonna do the same thing I did an ad where I'm gonna check what is the thing coming in is it a matrix or is it a scalar or etc so I'm not going to bother with the Hadamard product I'll add that into this matrix library if I ever need it but I'm just going to check is N and instance of a matrix if that's so then I want to do matrix product otherwise I want to do scalar product okay so now I need to write the code for the matrix product right there but first I must check are the columns of a equal to the rows of B otherwise I cannot perform the matrix product at all so I'm going to come over here and I'm gonna say if I mean the right screen yes if the a is this matrix object if this dot Rose know if it stud columns does not equal and rose I kind of don't like that this is called n here but whatever just then and I'll use this more strict equals here then I D to return like undefined or something like just get out of here this is no good and I'm going to console dot log columns of a must match rows of B columns now I could be more thoughtful and I can use a trycatch with some error handling but I'm just going to do this for right now just to be some and let's actually make sure this works so if I go back to loading that code and I said something like a is a matrix that is three by three and B is a matrix that is five by ten if I say a multiply B I get undefined and it says columns of a must match rows of B so that's working and I could just say B is a matrix of five by sorry three by three also then they match and I'm say a multiply B I still get under fine because I have done it yet but I don't get that error message okay so now I need to create a new matrix so I'm just say the result is a new matrix that has the number of what did I say it has the number of rows of a and the number of columns of B so it has the number of rows of a and the number of columns of B come on Adam keeps wanting me to put my password in okay all right so that's good now I need to do each spot so for each row whoops for each row and for each column I need to do the dot product of that lips first of all I have an error before I can do this I have an error here and what I want is if I'm at 00 I want all of the values I want to do the sum of all of the values well so I want let's just do this manually in this case it would be this dot matrix I times and matrix J sorry I I need yeah I need another double nested loop in here right because I'm going to take this and add I plus plus one but staying in J J plus 1 right is this right I plus 2 J plus 2 I mean this isn't I'm making this up because I don't I'm doing this an arbitrary way we don't know what the actual rows this this just goes up depending on the number of of rows columns there are all right right so maybe I only need one loop here because I need one loop so what's that know because these could be different yeah k week Mon is telling me in the chat another way of thinking about this is I could say and you know what would might be nice actually one thing that I could do here just at least I think it's gonna help me work this out is I could say let a equal this dot matrix and let B equal end just to have variables called a and B for the two different matrices and this is still the result but in other words what I'm saying is a and this is B so a I K B KJ so it's a little Olin let me with K sum over K so hold on so let me put this here did I get this wrong this is B is it yes so you know what's wrong about this so let's look now we can get this right here's what I'm doing here I want a I want to be increasing not the row but the column I did it wrong I did it backwards do you guys like watching these videos where I try to figure it out I don't know it could I could just get it right the first time I could just like start over and get it right but what I'm doing is I'm every column of a which column is I'm actually using yes it's Col it's all its row I but I'm iterating over the columns of course of course of course so it is this J so this is actually this is what I need so what I should be able to say is result I need another loop for let K equals 0 K is less than and I can use remember I could use a column Zoar B's rows those have to be the same so I'm gonna use a as columns yes k plus plus and then I'm first I need to say let sum equals 0 and then I'm gonna say sum plus equal a index I K plus B index K J this I think is right and then I have to put that in the result result result i J equals sum so if I was using like some other vector library I could like pull those out then do the dot product but let's see here let's make sure this is right I want to for every element in the results I want to sum the dot product of all of the column spots in a that's K with all of the row spots in B and then I've got the result and lying 50s I'm seeing deep space in the chat says lying 57 oh yes sorry this needs to be multiplied so these get multiplied I'm summing the product of all those yes and of course there are much faster ways I'm not looking for any any efficiency here I'm just trying to understand the algorithm and make sure I have something that works okay so now I need one more curly bracket and I think if i zoom back out here I think I am done this is the algorithm right I have a new matrix that has that is of the size of an this I should do this down here the size of A's rose and B is columns then I go through it and I do the dot product of a vector from of a row of a and a column of B store that result okay and B is here's another mistake B equals n dot matrix right because the actual two dimensional array is stored in a variable called matrix it's not it's not the it's the the object itself has the data inside a variable okay so how are we gonna test this I actually have a sketch here so I'm gonna in that's a p5 sketch I may not even use anything about p5 I'm gonna have a be a new matrix that's 3 by 2 sorry 2 by 3 I'm going to see the same for B which is 3 by 2 then I'm going to say a a dot randomized B dot randomized console.log a dot matrix and console dot log and not dot log table B dot matrix so let's take a look at that okay so now I have to make two matrices this is one and they with random values in them so now I'm gonna say let C equal a dot multiply B oh I didn't get anything there oh oh I didn't console.log it oh man console table C dot matrix oh I forgot about that part okay here we go again shoot all right so what's this error sketch that jeaious line 11 cannot did Isis forget to return it I forgot to return it didn't I okay you know what would be nice is that the end of this I said return result and this actually goes we're here right I got a return to return that result all right let's try this again no I forgot hit save uhoh I'm being told breaking news breaking news the return is in this for loop that's not good oh right because this just the return was in the for loop that's terrible and this says results and it should say results okay I'm feeling a little bit a little bit more confident now what what what oh oh oh my goodness I'm completely losing my mind here so it's very important to realize that result is the matrix object ah the matrix object has this array called matrix which actually stores the values and there's no like set function or anything so what I actually really need to put here is result dot matrix right equals this result dot matrix equals no and then return results right so I these values that I'm calculating this probably be like a set function or something like that and I probably should just created the 2d array here and then made a major but whatever this is what it needs to be I think we got it now oh boy oh oh this is the worst I'm really doing a horrible so I've done something terrible here but hopefully you know you're watching this video and maybe this is valuable to you I have really conflated the idea of the 2d array that stores the values with the object and I'm using it all sorts of terrible ways so let's think about this this is this is this is what I want a is this B is n now I can get the rows and columns but down here I really need to say a dot matrix B dot matrix right and and that goes into the resultant matrix so I hopefully this is clear too the issue let me try to rephrase it again in case it's not there is this idea of a matrix object it has three properties the number of rows the number of columns and the actual 2d array so where I refer to the variable that's the matrix object and I want to actually do something to the data I have to say the name of the object dot matrix and some I'm forgetting to do that in so many different places so what I'm gonna do what I'm gonna look at down here is I think now everything is correct if a and B are the names of the objects I could pull out the rows and columns from a and then I could pull out the values from a dot matrix and B dot matrix and set the values in result dot matrix okay how couldn't be confident I really should not be confident this is a terrible idea but I'm confident okay so we finally got three things if this is a and this is B this is a dot B anybody want a fact check from me for this coming the chat I don't I'm gonna pop in a wait now this will get edited out thank you thank you these numbers are in fact correct I took a little break there and check them they are right I encourage you to pause the video and check them yourself to see if you understand how the library is working one thing that actually could be really useful I don't ever employ tests never really but I should learn about tests and I should probably do some stuff with tests on this channel so I think I might come back and try to do some tests that would if I ever change the code for this matrix library to ensure that the math still works so maybe someday I'll come back and do that but and now yes there needs to be a lot of tidying up and refactoring I can use these array functions and I'm gonna get to all that but now we're ready the next video I can take this matrix library this matrix class and use it in my neural network class to perform the feedforward algorithm of taking all these inputs multiplying them by weights and getting new outputs which then go into other node they become inputs to a hidden layer of nodes eccentric search I've talked about that in the previous videos and now I'm gonna come back and actually do that címon in the chat makes a good point where if you look at this class all of these functions randomized ad multiply up to multiply they change the object that I'm calling the function on so if I say matrix a I say a dot randomized that matrix object actually changes but in this with this matrix product I'm not actually affecting the object when I say a multiply B I don't change the value of a I create a new a new matrix object and return that value so I probably should refactor the library to do maybe that mult matrix product in a slightly different way and I could use something called a static method so I'm like I'll come back maybe in a later video when I refactor this a little bit I wanted to mention that now but it also reminded me there's one more matrix operation that I need for the neural network stuff I think I don't actually need it for the feedforward so I could come back and do it after that but I do need it for the training aspect when I adjust and tune it based on the width the guess is well I get to all that later the thing that I need is to transpose a matrix so how do I transpose a matrix if I have a matrix a with a certain number of rows and columns start rows and columns the columns become the rows the rows become the columns so transposing this matrix would turn it into this matrix okay so I'm going to quickly in the next video write a function that does exactly that
