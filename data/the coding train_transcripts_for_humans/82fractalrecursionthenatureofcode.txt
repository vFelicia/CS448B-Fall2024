With timestamps:

00:01 - now we've established that fractals are
00:04 - generated from functions with recursive
00:07 - definitions what does it mean to have a
00:09 - function with a recursive definition in
00:12 - a processing sketch this is what we're
00:13 - going to look at exclusively in this
00:15 - video you know we'll get to some more
00:17 - advanced stuff later but we're going to
00:18 - start with this very basic idea so here
00:20 - we have an incredibly simple processing
00:22 - sketch it's so nice that in this this
00:24 - topic we return back to the kind of very
00:26 - roots of ourselves and the very
00:28 - beginnings of working in processing we
00:30 - have this sketch that when I run it does
00:32 - nothing but draw this nice beautiful
00:33 - round circle this Euclidean form here in
00:37 - the center of the screen right all we're
00:39 - doing is making the size we're saying
00:41 - stroke of zero no fill drawing ellipse
00:43 - to the center of 300 300 so one thing
00:45 - we've learned about in programming is
00:47 - hey this functionality here we could
00:50 - wrap they put it into a function and
00:51 - it's silly to do this because you know
00:54 - why are we making a whole another
00:55 - function just to draw a circle but I
00:58 - could put all of this in this function I
01:03 - could run it and I have the exact I
01:07 - would have the exact same result if I
01:09 - called the function and draw so there we
01:12 - go we have that result right up there
01:14 - above my head probably
01:16 - there okay so now we've got it in a
01:19 - function let's do one more thing and
01:21 - let's add some arguments to the function
01:23 - we need a location and a diameter which
01:27 - will determine the size of the circle
01:32 - and I'm going to pass those arguments
01:35 - into that function okay pretty good
01:38 - pretty basic if you've been following
01:41 - all these videos your way further ahead
01:42 - than this kind of stuff in processing
01:44 - but now we're going to add a little
01:46 - twist here let's say what if I were to
01:50 - say draw all the function draw a circle
01:53 - inside of this function I'm going to do
01:54 - it this way I'm going to say call it
01:57 - again but with a diameter that is half
02:01 - the size now first of all this looks
02:04 - like a horrible idea
02:06 - first I mean are you that you just wrote
02:09 - the function draw circle and then you
02:11 - call it draw circle
02:12 - out of it so when Drago gets called it
02:14 - calls drawcircle which then calls
02:15 - drawcircle we've said Co straw circling
02:17 - like all of our heads explode and like a
02:19 - to madness in fact this is really a
02:23 - quite excellent thing to do and tons of
02:26 - algorithms and things that you might see
02:28 - in just sorting algorithms and all sorts
02:30 - of things can work off of this principle
02:33 - of recursion a function that calls
02:34 - itself but there is a problem here that
02:36 - we need to solve if I were to actually
02:38 - run this we see nothing on the screen
02:41 - and in fact we get this wonderful error
02:44 - message which I hope you find some day
02:46 - in your life this sketch is attempting
02:49 - to much recurse you can write it it's
02:50 - like figured out it's like recursion
02:53 - recursion so just as when you first
02:55 - learned about a for loop in processing
02:57 - and you figured out that you are a while
02:59 - loop that you need to have an exit
03:00 - condition we need to have an exit
03:02 - condition for this recursion what should
03:05 - that exit condition be let's think about
03:07 - it for a second think of how to yourself
03:09 - a circle half the circle half a circle
03:12 - half a circle what about when the circle
03:14 - gets too small so as long as the
03:18 - diameter is greater then I don't know 10
03:21 - pixels which is arbitrary and then you
03:24 - can continue to call yourself so if we
03:27 - do this we now have and I'll just move
03:29 - this over so I'm not blocking it we now
03:31 - have look at this a circle and then
03:33 - another circle then another circle and
03:34 - eventually we stop calling that function
03:36 - over and over again recursively now if
03:38 - we keep looking at this I'm like okay
03:40 - come on you went through all of that and
03:43 - all you have is a bunch of circles I
03:45 - mean I could have done that with a for
03:46 - loop and linked lickety-split and this
03:48 - is true everything that you could do
03:50 - with recursion you could also do with a
03:52 - loop
03:53 - I don't know if everything they go back
03:55 - and forth but there are some things that
03:58 - you're going to see that we can do with
03:59 - recursion that doing with just a plain
04:01 - old loop would be incredibly hard and I
04:05 - that can I do that as a challenge to you
04:07 - look at the kind of example all examples
04:09 - in this particular video when we get to
04:12 - the end of them try going back and doing
04:13 - them without recursion we send them to
04:15 - me out
04:16 - you know I'll be really excited okay so
04:19 - let's just say what if instead of
04:21 - drawing the circle at the same location
04:23 - I'm going to draw it a little bit to the
04:25 - right and now we look at this we can see
04:28 - I have circles going to the right now
04:30 - let's also say I'm going to draw that
04:33 - circle a little bit to the left now I'm
04:38 - not going to run this yet because I know
04:40 - I'm taking a very long time to go over
04:42 - this but I think it's important to think
04:44 - about whoops I left all this what did we
04:46 - just do first we said halt draw the
04:55 - circle and then draw one half the size
04:59 - of the right half the size to the right
05:00 - half the size the right half the size of
05:02 - them right and then we said you know
05:03 - what to the right and to the left and so
05:05 - you might think to yourself here is the
05:07 - result right circles are going to the
05:12 - right and circles are going to the left
05:13 - but this isn't the result we're saying
05:16 - this circle should have a circle to the
05:19 - right and the left and you know what
05:21 - each of those circles should have a
05:22 - circle to the right and the left and you
05:25 - know each of those circles should have a
05:27 - circle to the right and the left right
05:30 - this is the power of recursion we are
05:32 - actually being able to duplicate this
05:34 - kind of multi-dimensional branching
05:37 - shape over and over again it's like the
05:39 - loop went off in this direction and also
05:41 - this direction and also this direction
05:43 - when it goes off that direction also
05:44 - goes in this direction also this
05:45 - direction it's really magical so let's
05:47 - go back right let's come back here and
05:50 - say remember what did we do we're going
05:51 - to comment this line out and we're going
05:53 - to say here we go we've got them going
05:55 - to the right now let's add them going to
05:57 - the left and here you can see and if we
06:00 - zoom in on this shape here you can see
06:02 - the majesty of this here we have that
06:04 - every circle has two circles around of
06:06 - course it stops this is the sadness we
06:09 - have it stops when you know we don't
06:12 - what we're making a circle it's no more
06:13 - than ten pixels we could we could get a
06:15 - little bit further we could say you know
06:16 - what I don't care a two pixel circle is
06:18 - good enough for me and now we can really
06:20 - zoom in you can start to see but at a
06:22 - certain point you know there's only so
06:24 - much space with these pixel
06:25 - which is really the tragedy here one
06:27 - thing that you might consider is a very
06:29 - challenging exercise I'm just zooming
06:31 - through the you know operating system
06:33 - zoom but what if you built the sketch
06:34 - where you actually could zoom into it
06:36 - and as you know behind the scenes you're
06:38 - kind of drawing more and more parts of
06:40 - the fractal and depending on what zoom
06:41 - level you're at that would be a great
06:43 - project of this duds been done a zillion
06:46 - times you know Google Mandelbrot set
06:48 - zooming trippy video with colors and
06:50 - cool music you'll find a ton of them for
06:52 - you to stay up at night and like watch
06:54 - with you know colored glasses and
06:57 - something but anyway um this is now
07:00 - something we've achieved in processing
07:01 - and we should also note you know that we
07:04 - could keep going with this what if I
07:07 - wanted to put one above right it should
07:12 - be at the X location but a little above
07:15 - as well and we can start to see I guess
07:17 - above means below when you're adding
07:18 - right we can start to see in what's
07:20 - called this is so crazy look at this
07:22 - let's make our window size bigger this
07:27 - by the way somehow just by drawing all
07:29 - these circles we get another fractal
07:31 - pattern that's the sierpinski triangle
07:33 - right there
07:33 - what is the sierpinski triangle the
07:35 - sierpinski triangle is a triangle which
07:41 - is broken into three triangles and each
07:44 - of those triangles are broken into three
07:46 - triangles and each of those are broken
07:48 - into three triangles right I you know I
07:51 - have to like watch myself not to keep
07:53 - drawing here right we get this this is a
07:55 - very very famous fractal pattern which
07:57 - you could now as an exercise also try to
07:59 - create by drawing triangles how would
08:01 - you create the iterative structure but
08:04 - it's kind of amazing that we see we've
08:05 - got this just by these circles being
08:06 - overlaid on top of each other this it's
08:08 - amazing okay so I forgot how long we've
08:11 - been going but the next video is gonna
08:14 - is kind of important but I think before
08:16 - we go there let me just um mention one
08:20 - thing um I think the I think so P
08:24 - correct me the kind of first known
08:26 - instance of a fractal is about 1883
08:29 - discovered by a mathematician
08:32 - called the Cantor set well the thing
08:34 - that I want to emphasize about these
08:37 - fractals is that they are generated
08:40 - through a recursive cursive function but
08:44 - they're off often come within a set of
08:46 - production rules so even though we kind
08:47 - of started with the code in other
08:49 - scenarios you might start with those
08:51 - production rules so you can stop the
08:53 - video Nichols probably done enough but
08:55 - if you're interested interested let me
08:56 - keep listening
08:57 - so the Cantor set by the way as a
08:59 - production rule which is start with a
09:04 - line start with a line two is divide the
09:10 - line into thirds right so that's
09:17 - approximately the line divided into the
09:19 - thirds erase middle third so if I get
09:26 - the eraser here and I erase this middle
09:28 - third this was be applying the
09:31 - production rule to that line what do we
09:34 - have left over two lines let's apply
09:38 - this production role start with a line
09:39 - apply to this line start with a line
09:41 - apply to this line what do we have that
09:43 - let's do that again two four lines the
09:49 - reason why I bring this up and I wanted
09:50 - to just take a moment is one of the
09:52 - things about fractals is in the sort of
09:55 - theoretical pretend land where we could
09:57 - do this to infinity
09:58 - they exhibit these kind of crazy
10:00 - properties I mean first of all we could
10:03 - do this to infinity we're gonna have an
10:04 - infinite number of points just between
10:06 - in this very very finite space that
10:08 - doesn't seem really possible what's the
10:10 - what is you know add up the lengths of
10:13 - all of these lines as you do this to
10:14 - infinity if the first line is one the
10:17 - second line is 2/3 what's the next line
10:19 - add up those legs what happens when you
10:21 - do that to infinity I encourage you to
10:23 - kind of research and look at a lot of
10:25 - material about the Cantor set in these
10:26 - strange paradoxes when we look at the
10:28 - Copts curve it's often referred to as
10:30 - the monster curve because it has an
10:32 - infinitely
10:33 - even though it's in a finite space so
10:35 - this is really kind of a fascinating
10:36 - thing about fractals but in our world
10:38 - we're making stuff with pixels and it's
10:41 - quite finite but what I wanted to just
10:43 - briefly show you is you know you could
10:44 - say to yourself okay well if you
10:46 - understand these production rules now
10:48 - translate these production rules into a
10:51 - function and obviously this is something
10:53 - that I'm not obviously but this is
10:55 - something that I've done with one of the
10:56 - examples from the book this by the way
11:00 - with the circles is examples eight point
11:02 - one eight point two and eight point
11:03 - three I believe and once we get to
11:05 - example eight point four we can see here
11:08 - here is the cantor set now I'm showing
11:10 - each generation as a separate kind of as
11:14 - a separate line you can see the first
11:16 - line then two lines that 4 then 8 then
11:18 - 16 etc etc and you can see how is this
11:22 - done right you can take this as an
11:25 - exercise but you can see the the
11:27 - function takes an X Y which is the
11:31 - leftmost point of the line and the
11:32 - length of the line and then for every
11:35 - single generation it draws two more
11:37 - lines recursively so Cantor calls itself
11:40 - twice so I didn't think I don't so I
11:44 - wanted to just go through these two
11:45 - scenarios there's a kind of essential
11:48 - problem with these two I mean they're
11:49 - they work but these these shapes are
11:52 - going to be very hard for us to
11:53 - manipulate after the fact I just sort of
11:55 - drawn and sitting there so that's the
11:57 - aspect I want to talk about in the next
11:59 - video
12:00 - for example what if you wanted to draw
12:02 - that circular pattern that have all
12:03 - those circles like float away like
12:05 - bubbles how would you do that so um and
12:07 - the technique that we're going to look
12:09 - at is using an ArrayList to be our kind
12:11 - of repository of the recursion and
12:14 - hopefully this kind of gives you the
12:15 - give you the basic idea you know try to
12:17 - generate your own fractal try to create
12:19 - your own production rules see if you can
12:20 - create a fractal where you can zoom
12:21 - there's lots of possibilities there

Cleaned transcript:

now we've established that fractals are generated from functions with recursive definitions what does it mean to have a function with a recursive definition in a processing sketch this is what we're going to look at exclusively in this video you know we'll get to some more advanced stuff later but we're going to start with this very basic idea so here we have an incredibly simple processing sketch it's so nice that in this this topic we return back to the kind of very roots of ourselves and the very beginnings of working in processing we have this sketch that when I run it does nothing but draw this nice beautiful round circle this Euclidean form here in the center of the screen right all we're doing is making the size we're saying stroke of zero no fill drawing ellipse to the center of 300 300 so one thing we've learned about in programming is hey this functionality here we could wrap they put it into a function and it's silly to do this because you know why are we making a whole another function just to draw a circle but I could put all of this in this function I could run it and I have the exact I would have the exact same result if I called the function and draw so there we go we have that result right up there above my head probably there okay so now we've got it in a function let's do one more thing and let's add some arguments to the function we need a location and a diameter which will determine the size of the circle and I'm going to pass those arguments into that function okay pretty good pretty basic if you've been following all these videos your way further ahead than this kind of stuff in processing but now we're going to add a little twist here let's say what if I were to say draw all the function draw a circle inside of this function I'm going to do it this way I'm going to say call it again but with a diameter that is half the size now first of all this looks like a horrible idea first I mean are you that you just wrote the function draw circle and then you call it draw circle out of it so when Drago gets called it calls drawcircle which then calls drawcircle we've said Co straw circling like all of our heads explode and like a to madness in fact this is really a quite excellent thing to do and tons of algorithms and things that you might see in just sorting algorithms and all sorts of things can work off of this principle of recursion a function that calls itself but there is a problem here that we need to solve if I were to actually run this we see nothing on the screen and in fact we get this wonderful error message which I hope you find some day in your life this sketch is attempting to much recurse you can write it it's like figured out it's like recursion recursion so just as when you first learned about a for loop in processing and you figured out that you are a while loop that you need to have an exit condition we need to have an exit condition for this recursion what should that exit condition be let's think about it for a second think of how to yourself a circle half the circle half a circle half a circle what about when the circle gets too small so as long as the diameter is greater then I don't know 10 pixels which is arbitrary and then you can continue to call yourself so if we do this we now have and I'll just move this over so I'm not blocking it we now have look at this a circle and then another circle then another circle and eventually we stop calling that function over and over again recursively now if we keep looking at this I'm like okay come on you went through all of that and all you have is a bunch of circles I mean I could have done that with a for loop and linked licketysplit and this is true everything that you could do with recursion you could also do with a loop I don't know if everything they go back and forth but there are some things that you're going to see that we can do with recursion that doing with just a plain old loop would be incredibly hard and I that can I do that as a challenge to you look at the kind of example all examples in this particular video when we get to the end of them try going back and doing them without recursion we send them to me out you know I'll be really excited okay so let's just say what if instead of drawing the circle at the same location I'm going to draw it a little bit to the right and now we look at this we can see I have circles going to the right now let's also say I'm going to draw that circle a little bit to the left now I'm not going to run this yet because I know I'm taking a very long time to go over this but I think it's important to think about whoops I left all this what did we just do first we said halt draw the circle and then draw one half the size of the right half the size to the right half the size the right half the size of them right and then we said you know what to the right and to the left and so you might think to yourself here is the result right circles are going to the right and circles are going to the left but this isn't the result we're saying this circle should have a circle to the right and the left and you know what each of those circles should have a circle to the right and the left and you know each of those circles should have a circle to the right and the left right this is the power of recursion we are actually being able to duplicate this kind of multidimensional branching shape over and over again it's like the loop went off in this direction and also this direction and also this direction when it goes off that direction also goes in this direction also this direction it's really magical so let's go back right let's come back here and say remember what did we do we're going to comment this line out and we're going to say here we go we've got them going to the right now let's add them going to the left and here you can see and if we zoom in on this shape here you can see the majesty of this here we have that every circle has two circles around of course it stops this is the sadness we have it stops when you know we don't what we're making a circle it's no more than ten pixels we could we could get a little bit further we could say you know what I don't care a two pixel circle is good enough for me and now we can really zoom in you can start to see but at a certain point you know there's only so much space with these pixel which is really the tragedy here one thing that you might consider is a very challenging exercise I'm just zooming through the you know operating system zoom but what if you built the sketch where you actually could zoom into it and as you know behind the scenes you're kind of drawing more and more parts of the fractal and depending on what zoom level you're at that would be a great project of this duds been done a zillion times you know Google Mandelbrot set zooming trippy video with colors and cool music you'll find a ton of them for you to stay up at night and like watch with you know colored glasses and something but anyway um this is now something we've achieved in processing and we should also note you know that we could keep going with this what if I wanted to put one above right it should be at the X location but a little above as well and we can start to see I guess above means below when you're adding right we can start to see in what's called this is so crazy look at this let's make our window size bigger this by the way somehow just by drawing all these circles we get another fractal pattern that's the sierpinski triangle right there what is the sierpinski triangle the sierpinski triangle is a triangle which is broken into three triangles and each of those triangles are broken into three triangles and each of those are broken into three triangles right I you know I have to like watch myself not to keep drawing here right we get this this is a very very famous fractal pattern which you could now as an exercise also try to create by drawing triangles how would you create the iterative structure but it's kind of amazing that we see we've got this just by these circles being overlaid on top of each other this it's amazing okay so I forgot how long we've been going but the next video is gonna is kind of important but I think before we go there let me just um mention one thing um I think the I think so P correct me the kind of first known instance of a fractal is about 1883 discovered by a mathematician called the Cantor set well the thing that I want to emphasize about these fractals is that they are generated through a recursive cursive function but they're off often come within a set of production rules so even though we kind of started with the code in other scenarios you might start with those production rules so you can stop the video Nichols probably done enough but if you're interested interested let me keep listening so the Cantor set by the way as a production rule which is start with a line start with a line two is divide the line into thirds right so that's approximately the line divided into the thirds erase middle third so if I get the eraser here and I erase this middle third this was be applying the production rule to that line what do we have left over two lines let's apply this production role start with a line apply to this line start with a line apply to this line what do we have that let's do that again two four lines the reason why I bring this up and I wanted to just take a moment is one of the things about fractals is in the sort of theoretical pretend land where we could do this to infinity they exhibit these kind of crazy properties I mean first of all we could do this to infinity we're gonna have an infinite number of points just between in this very very finite space that doesn't seem really possible what's the what is you know add up the lengths of all of these lines as you do this to infinity if the first line is one the second line is 2/3 what's the next line add up those legs what happens when you do that to infinity I encourage you to kind of research and look at a lot of material about the Cantor set in these strange paradoxes when we look at the Copts curve it's often referred to as the monster curve because it has an infinitely even though it's in a finite space so this is really kind of a fascinating thing about fractals but in our world we're making stuff with pixels and it's quite finite but what I wanted to just briefly show you is you know you could say to yourself okay well if you understand these production rules now translate these production rules into a function and obviously this is something that I'm not obviously but this is something that I've done with one of the examples from the book this by the way with the circles is examples eight point one eight point two and eight point three I believe and once we get to example eight point four we can see here here is the cantor set now I'm showing each generation as a separate kind of as a separate line you can see the first line then two lines that 4 then 8 then 16 etc etc and you can see how is this done right you can take this as an exercise but you can see the the function takes an X Y which is the leftmost point of the line and the length of the line and then for every single generation it draws two more lines recursively so Cantor calls itself twice so I didn't think I don't so I wanted to just go through these two scenarios there's a kind of essential problem with these two I mean they're they work but these these shapes are going to be very hard for us to manipulate after the fact I just sort of drawn and sitting there so that's the aspect I want to talk about in the next video for example what if you wanted to draw that circular pattern that have all those circles like float away like bubbles how would you do that so um and the technique that we're going to look at is using an ArrayList to be our kind of repository of the recursion and hopefully this kind of gives you the give you the basic idea you know try to generate your own fractal try to create your own production rules see if you can create a fractal where you can zoom there's lots of possibilities there
