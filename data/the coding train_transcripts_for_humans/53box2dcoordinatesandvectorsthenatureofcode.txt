With timestamps:

00:00 - oh it said in the net previously I said
00:05 - in this video we'll be getting to
00:07 - actually writing the code and making our
00:09 - first box of the example but this is the
00:11 - thing you know box CD it's it's it's
00:13 - this sound so amazing and it's just
00:15 - gonna solve all of our problems but it
00:17 - might it might solve some of our
00:19 - problems I have many problems which it
00:21 - has not yet solved but it it's
00:25 - complicated so here's the thing I forgot
00:27 - something and but so before we can get
00:29 - to this writing the actual code into our
00:31 - example and making bucks unique having
00:33 - bought you to calculate the figures to
00:35 - us for us we need to talk about one more
00:37 - thing what is that one more thing we
00:39 - need to talk about box 2d z-- coordinate
00:41 - system so you know we have this
00:43 - processing window and it has 0 0 in the
00:48 - top left it has a width
00:50 - you know 640 it has a height maybe it's
00:53 - 360 it has all that stuff it's all pixel
00:56 - coordinates its pixel coordinates on the
00:58 - screen here's one of the wonderful
01:00 - things about box 2d vaak siddhi is a
01:03 - physics engine in the purest sense of
01:05 - the world it knows nothing it cares
01:07 - nothing about our processing window it's
01:11 - actually doing all of its calculations
01:13 - in meters in seconds it thinks about the
01:16 - real physical world we are creating we
01:19 - have to give box2d numbers that
01:23 - correspond to things in the real
01:25 - physical world well here's this you know
01:27 - object it's 3 centimeters long and it's
01:30 - it's a meter away from this other object
01:31 - we have to really work in those terms
01:34 - which is a little bit strange because
01:36 - everything we've been doing all along is
01:37 - like you know in the middle of the
01:38 - screen is three 6180 and it's draw this
01:42 - and pixel word at that so we've got to
01:44 - take a whole new way of thinking in and
01:46 - in fact this little diagram we have
01:49 - which is sort of describes the magic of
01:51 - how simple box2d is which is you know
01:53 - make a bunch of objects set them up in
01:55 - the magic box box to these world and
01:57 - then every time through draw just ask
01:59 - where are they I'm gonna draw them where
02:01 - are they when I'm drawing them so but we
02:02 - need to add two steps here convert from
02:08 - pixels to world so whenever we say
02:13 - world that's gonna refer to the box2d
02:15 - world but you know corresponds something
02:18 - to like our actual world but in two
02:19 - dimensions and then so we create our
02:23 - objects we think in pixels we convert
02:25 - them to world coordinates send them into
02:27 - box a day when it's time for us to draw
02:30 - them box it is going to give them to us
02:32 - in world coordinates so we have to
02:34 - convert from world to pixels so what
02:43 - does it mean to do this so one of the
02:45 - things that the P Basu T this helper
02:48 - class that I've created does for us is
02:50 - it has a bunch of bunch of functions for
02:52 - these conversions they're not that
02:54 - complicated it's just a matter of
02:55 - translating and scaling back this is
02:58 - this is our processing world box today's
03:00 - world is just the Cartesian coordinate
03:03 - system you might have done in a high
03:04 - school geometry class you've got zero
03:07 - zero at the center and you've got the y
03:10 - axis pointing up and the x axis pointed
03:12 - to the right this is the same as our
03:14 - processing world except you know in a
03:16 - processing world the zero zeros in the
03:18 - top left X points to the right the y
03:20 - axis positive points down so it's the
03:22 - same but flipped and much smaller so box
03:25 - 2d is not tuned for large distances it's
03:28 - kind of works well for like you know the
03:30 - Angry Birds thing we have this little
03:32 - tiny bird flying across and bouncing
03:35 - into a bunch of boxes so generally we're
03:37 - using small numbers so something that
03:39 - might be a hundred pixels wide should
03:41 - maybe should not be a hundred meters
03:43 - wide that would be somewhat insane so
03:46 - but all of that is gonna happen for you
03:48 - behind the scenes there's absolute ways
03:50 - of digging into that and and tuning it
03:52 - in a custom way but we're not gonna
03:54 - we're gonna sort of stay in a
03:56 - comfortable soothing and relaxing place
03:58 - we're gonna let the PBOT CD helper class
04:01 - kind of manage that conversion from for
04:03 - us
04:04 - now there's another aspect to this oh my
04:08 - goodness so many things this is
04:10 - definitely gonna be an entire video just
04:11 - kind of about this little topic here
04:13 - which we need to prepare ourselves we're
04:15 - gonna ghin what is the syntax how are we
04:17 - using that that's gonna happen in the
04:19 - next this this moment that I keep saying
04:21 - is going to happen eventually but before
04:23 - we can even look at implementing this
04:26 - there's another piece of this puzzle
04:28 - right we spent all this time learning
04:30 - about something called p-vector I guess
04:34 - I'm just gonna erase all this we spent
04:36 - all this time learning about something
04:38 - called P vector we box2d we now need to
04:45 - learn about something called Veck - so
04:50 - this is just a kind of hard truth of the
04:53 - world that we live in this idea of a
04:55 - vector is a general concept in physics
04:59 - simulation motion programming computer
05:01 - graphics all that stuff and when we are
05:04 - in processing so we're using P vector if
05:06 - you use you know if you ever programmed
05:08 - or something called openFrameworks you
05:09 - might be using ofx ofx vector when
05:12 - you're in box 2d using something called
05:13 - Veck - when we use toxic libs a little
05:16 - later we're gonna see vector 2d vector
05:18 - or vet 2d mech 3d so there are lots and
05:22 - lots of implementations of vector
05:24 - classes everywhere that you can look the
05:26 - good news is the concepts are all the
05:28 - same everything we learned about adding
05:30 - vectors scaling vectors normalizing
05:33 - magnitude all that stuff it exists in P
05:36 - vector it exists in the Box 2d vector to
05:38 - class the thing that's a little bit
05:40 - unfortunate is this syntax is always
05:42 - gonna be a little nuance a little
05:43 - different and I don't know maybe we like
05:45 - that syntax maybe we like that syntax
05:47 - I'm not really sure which one's better
05:48 - but we just have to we don't have to
05:51 - look memorize them both but we have to
05:53 - feel a little bit comfortable with them
05:54 - both so just to show just to kind of
05:56 - cover this in a little bits here you
05:58 - know whereas when we said in processing
06:01 - and pre vector P vector V equals a new P
06:03 - vector right with some coordinates in in
06:06 - in them where whatever we make vectors
06:10 - when we're using box2d we're going to
06:12 - make Veck two objects so it looks the
06:14 - same exact way you know an x and a y but
06:18 - instead of being a p vector object it's
06:20 - a vector object and there's a lot of
06:22 - other things like we did location dot
06:25 - add velocity added velocity location if
06:29 - we go look at how the syntax works in
06:31 - vet 2 you'll see that it's location dot
06:34 - add local sorry I didn't write that very
06:39 - well
06:40 - local velocity right so the you know
06:44 - it's in in toxic lives we're gonna see
06:46 - that it's ad self what's going on here
06:48 - velocity is being added to location
06:50 - velocity is being added to location so
06:52 - it's just called ad local to emphasize
06:54 - that location is changing here
06:57 - multiplied is the same thing instead
06:59 - processing it's mult back to it's just
07:03 - mu L you know you normalize it's the
07:06 - same normalized it's the same in both
07:08 - places magnitude however in processing
07:11 - we could get the magnitude of vector V
07:13 - mag in infect - I believe it's V dot
07:16 - length so we just need to feel a little
07:20 - comfortable with all these differences
07:21 - and I want I really really desperately
07:24 - want to point you to a place right now
07:26 - where you could just see a list of these
07:27 - if you look in the nature of codebook
07:29 - there's a little section that's where
07:31 - the link that I'll include that has kind
07:33 - of the functions and and their
07:35 - corresponding names you can also look in
07:37 - the J box to the documentation so if you
07:39 - download J Buc city from the J box2d
07:41 - website it'll have the Java Doc's which
07:43 - will have all the functions for Veck too
07:45 - so this is just something we need to be
07:47 - comfortable with so okay so we know
07:51 - there are two things we're we're getting
07:54 - closer now we know that we're gonna make
08:00 - bec two objects we're gonna have a vet
08:04 - two object may be called position we're
08:07 - gonna want to tell box2d about it and
08:09 - then later we're gonna want to ask for
08:12 - the new position back so remember we
08:17 - need to do a conversion conversion so
08:21 - how do we do those conversions the p
08:25 - box2d helper class has a set of
08:27 - functions that will take a world
08:30 - coordinate and convert it to pixels or a
08:32 - pixels coordinate and convert it to
08:34 - world these functions are somewhat
08:37 - really I just have to bet they're really
08:39 - awkwardly named and I'm this open
08:41 - competition to anybody has a better
08:42 - naming convention for these functions
08:44 - that want to suggest more I'm totally
08:46 - thrilled to to rewrite this library to
08:48 - be a little simpler but just to kind of
08:50 - go through what those are for example
08:53 - when we are converting when we have a
08:55 - when we set up we were thinking okay I
08:58 - want my X Y to be it I'm I want my
09:03 - object to be right there on the screen
09:04 - that's its pixels coordinate but I need
09:07 - to tell box2d about its world
09:08 - coordinates the functions going to be
09:10 - called chord pixels to world and then we
09:18 - pass in the X Y so this is going to be
09:21 - how we're going to convert from a pixel
09:23 - location and out is going to come the
09:26 - world location that we're gonna pass
09:28 - into box2d when it comes out we're going
09:32 - to get that world cool occasion because
09:34 - Bach City is only thinking in a world
09:35 - world world knows nothing about pixels
09:37 - then it's going to then then we we're
09:41 - going to get that world location and we
09:42 - need to convert that to pixels so to
09:45 - convert that to pixels we're gonna say
09:47 - coordinate chord world to pixels and
09:52 - we're gonna pass in and x and y these
09:56 - functions these conversion functions can
09:58 - take x2 arguments the X and the y
10:00 - separately is floats or they can take a
10:02 - vector object so it can take a vector
10:05 - object and give you the converted one
10:07 - back so we're gonna see there's lots of
10:09 - functions like this we're also going to
10:11 - need to do this for sizes if we set up a
10:14 - box if we set up a box with a given
10:16 - width and a given height we're gonna
10:18 - have to convert that pixel width like we
10:20 - know we want our box to be a hundred
10:22 - pixels wide and fix 250 pixels high but
10:25 - what is it in box 2d world units we're
10:28 - gonna have to say scaler pixels to world
10:35 - W so you can start to see the convention
10:39 - here we might convert a coordinate we
10:41 - might convert a scaler we might convert
10:42 - a vector there's a list of functions and
10:45 - we're going to see them in the examples
10:46 - and as we look through the examples I'll
10:47 - point them out again this is a big topic
10:50 - lots of code lots of things for you to
10:52 - work out there's the book there's what
10:53 - I'm talking about there's the examples
10:55 - let me know what's missing but hopefully
10:58 - we'll gonna figure this out together
11:00 - ok so you can see all these functions
11:01 - but ah there's one little detail that's
11:03 - kind of important when we draw a
11:06 - rectangle
11:07 - in processing we think of the rectangle
11:10 - as having a width and a height the full
11:16 - height the full width box2d
11:19 - thinks about the width and height of a
11:21 - rectangle as the distance from the
11:24 - center to the edge right so that's the
11:29 - width and that's the height so when we
11:30 - convert in the code examples you're
11:32 - going to be seeing that we think of our
11:34 - pixel width then when we convert that we
11:37 - need to divide it by two so these are
11:40 - just the little details we're going to
11:42 - see as we start to build this processing
11:44 - example that's actually going to have
11:46 - elements that we're going to create and
11:49 - put in the box through the world and get
11:50 - those locations back out okay so this is
11:52 - a lot of jumbled stuff here what would I
11:55 - hopefully want you to take away from
11:56 - this is we need to understand about
12:00 - converting between pixel coordinates and
12:02 - box 2d world coordinates we're going
12:04 - back and forth a lot we'll see this in
12:06 - the examples and we need to realize that
12:07 - all of this math that we're going to be
12:09 - doing with box 2d vectors is going to
12:11 - use the effect 2 class which is very
12:14 - similar to P vector but with different
12:15 - syntax so you know if you're confused
12:18 - about this every watch this maybe
12:21 - that'll help take a look at the section
12:23 - that I'm linking to in the nature of
12:24 - codebook but we this is now we kind of
12:27 - gathered all the pieces and we're gonna
12:29 - actually look at the code implementation
12:30 - and make our first box 2d sketch in the
12:33 - next video okay

Cleaned transcript:

oh it said in the net previously I said in this video we'll be getting to actually writing the code and making our first box of the example but this is the thing you know box CD it's it's it's this sound so amazing and it's just gonna solve all of our problems but it might it might solve some of our problems I have many problems which it has not yet solved but it it's complicated so here's the thing I forgot something and but so before we can get to this writing the actual code into our example and making bucks unique having bought you to calculate the figures to us for us we need to talk about one more thing what is that one more thing we need to talk about box 2d z coordinate system so you know we have this processing window and it has 0 0 in the top left it has a width you know 640 it has a height maybe it's 360 it has all that stuff it's all pixel coordinates its pixel coordinates on the screen here's one of the wonderful things about box 2d vaak siddhi is a physics engine in the purest sense of the world it knows nothing it cares nothing about our processing window it's actually doing all of its calculations in meters in seconds it thinks about the real physical world we are creating we have to give box2d numbers that correspond to things in the real physical world well here's this you know object it's 3 centimeters long and it's it's a meter away from this other object we have to really work in those terms which is a little bit strange because everything we've been doing all along is like you know in the middle of the screen is three 6180 and it's draw this and pixel word at that so we've got to take a whole new way of thinking in and in fact this little diagram we have which is sort of describes the magic of how simple box2d is which is you know make a bunch of objects set them up in the magic box box to these world and then every time through draw just ask where are they I'm gonna draw them where are they when I'm drawing them so but we need to add two steps here convert from pixels to world so whenever we say world that's gonna refer to the box2d world but you know corresponds something to like our actual world but in two dimensions and then so we create our objects we think in pixels we convert them to world coordinates send them into box a day when it's time for us to draw them box it is going to give them to us in world coordinates so we have to convert from world to pixels so what does it mean to do this so one of the things that the P Basu T this helper class that I've created does for us is it has a bunch of bunch of functions for these conversions they're not that complicated it's just a matter of translating and scaling back this is this is our processing world box today's world is just the Cartesian coordinate system you might have done in a high school geometry class you've got zero zero at the center and you've got the y axis pointing up and the x axis pointed to the right this is the same as our processing world except you know in a processing world the zero zeros in the top left X points to the right the y axis positive points down so it's the same but flipped and much smaller so box 2d is not tuned for large distances it's kind of works well for like you know the Angry Birds thing we have this little tiny bird flying across and bouncing into a bunch of boxes so generally we're using small numbers so something that might be a hundred pixels wide should maybe should not be a hundred meters wide that would be somewhat insane so but all of that is gonna happen for you behind the scenes there's absolute ways of digging into that and and tuning it in a custom way but we're not gonna we're gonna sort of stay in a comfortable soothing and relaxing place we're gonna let the PBOT CD helper class kind of manage that conversion from for us now there's another aspect to this oh my goodness so many things this is definitely gonna be an entire video just kind of about this little topic here which we need to prepare ourselves we're gonna ghin what is the syntax how are we using that that's gonna happen in the next this this moment that I keep saying is going to happen eventually but before we can even look at implementing this there's another piece of this puzzle right we spent all this time learning about something called pvector I guess I'm just gonna erase all this we spent all this time learning about something called P vector we box2d we now need to learn about something called Veck so this is just a kind of hard truth of the world that we live in this idea of a vector is a general concept in physics simulation motion programming computer graphics all that stuff and when we are in processing so we're using P vector if you use you know if you ever programmed or something called openFrameworks you might be using ofx ofx vector when you're in box 2d using something called Veck when we use toxic libs a little later we're gonna see vector 2d vector or vet 2d mech 3d so there are lots and lots of implementations of vector classes everywhere that you can look the good news is the concepts are all the same everything we learned about adding vectors scaling vectors normalizing magnitude all that stuff it exists in P vector it exists in the Box 2d vector to class the thing that's a little bit unfortunate is this syntax is always gonna be a little nuance a little different and I don't know maybe we like that syntax maybe we like that syntax I'm not really sure which one's better but we just have to we don't have to look memorize them both but we have to feel a little bit comfortable with them both so just to show just to kind of cover this in a little bits here you know whereas when we said in processing and pre vector P vector V equals a new P vector right with some coordinates in in in them where whatever we make vectors when we're using box2d we're going to make Veck two objects so it looks the same exact way you know an x and a y but instead of being a p vector object it's a vector object and there's a lot of other things like we did location dot add velocity added velocity location if we go look at how the syntax works in vet 2 you'll see that it's location dot add local sorry I didn't write that very well local velocity right so the you know it's in in toxic lives we're gonna see that it's ad self what's going on here velocity is being added to location velocity is being added to location so it's just called ad local to emphasize that location is changing here multiplied is the same thing instead processing it's mult back to it's just mu L you know you normalize it's the same normalized it's the same in both places magnitude however in processing we could get the magnitude of vector V mag in infect I believe it's V dot length so we just need to feel a little comfortable with all these differences and I want I really really desperately want to point you to a place right now where you could just see a list of these if you look in the nature of codebook there's a little section that's where the link that I'll include that has kind of the functions and and their corresponding names you can also look in the J box to the documentation so if you download J Buc city from the J box2d website it'll have the Java Doc's which will have all the functions for Veck too so this is just something we need to be comfortable with so okay so we know there are two things we're we're getting closer now we know that we're gonna make bec two objects we're gonna have a vet two object may be called position we're gonna want to tell box2d about it and then later we're gonna want to ask for the new position back so remember we need to do a conversion conversion so how do we do those conversions the p box2d helper class has a set of functions that will take a world coordinate and convert it to pixels or a pixels coordinate and convert it to world these functions are somewhat really I just have to bet they're really awkwardly named and I'm this open competition to anybody has a better naming convention for these functions that want to suggest more I'm totally thrilled to to rewrite this library to be a little simpler but just to kind of go through what those are for example when we are converting when we have a when we set up we were thinking okay I want my X Y to be it I'm I want my object to be right there on the screen that's its pixels coordinate but I need to tell box2d about its world coordinates the functions going to be called chord pixels to world and then we pass in the X Y so this is going to be how we're going to convert from a pixel location and out is going to come the world location that we're gonna pass into box2d when it comes out we're going to get that world cool occasion because Bach City is only thinking in a world world world knows nothing about pixels then it's going to then then we we're going to get that world location and we need to convert that to pixels so to convert that to pixels we're gonna say coordinate chord world to pixels and we're gonna pass in and x and y these functions these conversion functions can take x2 arguments the X and the y separately is floats or they can take a vector object so it can take a vector object and give you the converted one back so we're gonna see there's lots of functions like this we're also going to need to do this for sizes if we set up a box if we set up a box with a given width and a given height we're gonna have to convert that pixel width like we know we want our box to be a hundred pixels wide and fix 250 pixels high but what is it in box 2d world units we're gonna have to say scaler pixels to world W so you can start to see the convention here we might convert a coordinate we might convert a scaler we might convert a vector there's a list of functions and we're going to see them in the examples and as we look through the examples I'll point them out again this is a big topic lots of code lots of things for you to work out there's the book there's what I'm talking about there's the examples let me know what's missing but hopefully we'll gonna figure this out together ok so you can see all these functions but ah there's one little detail that's kind of important when we draw a rectangle in processing we think of the rectangle as having a width and a height the full height the full width box2d thinks about the width and height of a rectangle as the distance from the center to the edge right so that's the width and that's the height so when we convert in the code examples you're going to be seeing that we think of our pixel width then when we convert that we need to divide it by two so these are just the little details we're going to see as we start to build this processing example that's actually going to have elements that we're going to create and put in the box through the world and get those locations back out okay so this is a lot of jumbled stuff here what would I hopefully want you to take away from this is we need to understand about converting between pixel coordinates and box 2d world coordinates we're going back and forth a lot we'll see this in the examples and we need to realize that all of this math that we're going to be doing with box 2d vectors is going to use the effect 2 class which is very similar to P vector but with different syntax so you know if you're confused about this every watch this maybe that'll help take a look at the section that I'm linking to in the nature of codebook but we this is now we kind of gathered all the pieces and we're gonna actually look at the code implementation and make our first box 2d sketch in the next video okay
