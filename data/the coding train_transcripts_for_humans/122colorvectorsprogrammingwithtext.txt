With timestamps:

00:00 - (bell dinging)
00:01 - - Hello, part two.
00:02 - I think I'm on part two
of my word2vec series.
00:05 - I'm talking about word vectors,
00:06 - word embeddings,
00:07 - words and numbers and
how they go together.
00:10 - Now, let me be very clear here.
00:11 - This particular section,
00:13 - this video is directly based on this
00:16 - wonderful tutorial by
Allison Parrish called
00:18 - Understanding word vectors,
00:20 - released under the Creative
Commons by a 4.0 license.
00:23 - If you also use this stuff,
00:25 - please attribute it
according to the license
00:27 - to Allison Parrish.
00:29 - I will include a link to
this in the video's tutorial.
00:31 - I talked a bit about
word vectors in general,
00:33 - and about this tutorial,
00:35 - and other things that you
might look at for inspiration
00:37 - in the previous video, and now.
00:39 - So what I want to do is a direct port
00:41 - of this example from Allison Parrish
00:42 - that looks at language
with a vector's colors.
00:45 - Now, let me be clear about
something for a second.
00:47 - In the previous video,
00:49 - I talked a little bit about this example
00:51 - which was looking at animals
in a two dimensional space
00:55 - with the x-axis is like their size,
00:57 - or their y-axis is the size,
00:58 - and x-axis is their cuteness.
01:00 - And is that word2vec?
01:02 - Well, not exactly.
01:03 - These are word embeddings,
01:05 - meaning there is a word
01:08 - embedded with some numeric data.
01:10 - I don't know if that's the
best way to describe it.
01:11 - But it's not exactly what you will find
01:15 - if you look up the term word2vec.
01:17 - Word2vec is a particular algorithm,
01:19 - a machine learning algorithm
01:21 - to take a large body of text
01:23 - and produce these word embeddings,
01:25 - high dimensional arrays of numbers
01:27 - based on how the words appear
in context in that text.
01:31 - And I'm going to get to
that a little bit later.
01:32 - So sort of in theory,
01:34 - the theory of it is we'll end up with this
01:36 - essence of the word,
01:37 - and words that are similar
01:39 - in meaning, or context, or what,
01:41 - if it's a big question mark
01:43 - are going to live close
to each other in that
01:45 - 100, or 300, or a thousand
dimensional space.
01:49 - But I'm making the case,
01:50 - and this is really from
Allison Parrish's tutorial,
01:52 - that we can maybe understand this concept
01:54 - or practice this concept
in a simpler way to start.
01:57 - And that simpler way
01:59 - will be to use a data set.
02:02 - I want to use this data set.
02:04 - It's the xkcd color set.
02:06 - It's the 954 most common
RGB monitor colors
02:10 - as defined by hundreds
of thousand participants
02:12 - in a color name survey.
02:13 - You can see more information
about that survey here.
02:17 - So anyway, but the data set itself
02:19 - is over here
02:21 - in Darius Kazemi's open
source project Corpora,
02:24 - which has a lot of
interesting JSON data sets.
02:27 - So I have downloaded that data set
02:29 - and I have it right here.
02:31 - So the question is,
02:34 - can we turn this into
02:36 - a word2vec-like scenario?
02:40 - And what kind of strange
outcomes can happen
02:43 - if we compare each one of these words,
02:45 - or sets of words,
02:46 - like cloudy blue,
02:47 - with a set of numbers?
02:49 - All right so,
02:50 - let's write some code.
02:51 - So first thing I'm going to
do is I'm going to add to
02:54 - this preload function.
02:56 - And I am going to
02:59 - just create a data set.
03:00 - I want to say data equals loadJSON
03:03 - xkcd.json.
03:05 - And then I'm going to say here in setup,
03:08 - console.log data.
03:10 - So let's make sure this works.
03:12 - I'm going to go to the browser
03:14 - where I have my code running.
03:16 - Okay, so we can see here
that I have now loaded
03:19 - into that variable
03:20 - that array of 949 colors.
03:23 - Each one is an object with a label,
03:25 - cloudy blue, under the color property,
03:28 - and an actual hex value.
03:29 - So my goal right now
03:32 - is to turn that into a list
that looks more like this.
03:36 - The label with a number.
03:39 - All right so,
03:39 - let me first write
03:41 - a little bit of code to
kind of process that data.
03:45 - So I am going to, let's write a function.
03:49 - You know, processData.
03:51 - Put in a separate function.
03:55 - And I'm going to create a variable.
03:58 - Call it vectors.
04:00 - It's going to be an object.
04:05 - In this object,
04:05 - I first want to go through
everything in data.
04:12 - And actually, everything that's in data
04:14 - is in data colors.
04:19 - So I'm going to say let colors
04:22 - equal data.colors.
04:23 - Then I'm going to say colors.length.
04:27 - Ah, oh autofill.
04:28 - Auto-complete, you do not complete me.
04:31 - Colors and then I'm going
to get an individual color.
04:35 - It's colors index i.
04:37 - And then what I want to do is say vectors.
04:43 - Create, oh, oh, oh, oh.
04:44 - I'm going to use createVector.
04:46 - So this is what's kind of
interesting about this.
04:47 - I forgot while I was doing this.
04:49 - All right, so here's the thing.
04:51 - Right now the data.
04:53 - The data from that data file
04:55 - is just in a big array.
04:58 - And the array has a
bunch of objects in it.
05:01 - Color, you know, blue,
05:04 - comma RGB,
05:05 - I forgot what it is,
05:06 - and then like the hexadecimal, you know,
05:09 - value like this.
05:10 - It looks like this.
05:11 - I want this to be in a associative array,
05:14 - a dictionary.
05:15 - But I'm just going to use a
JavaScript object for that.
05:17 - So just an object where
05:19 - the color blue is the property name.
05:22 - And the value of that property...
05:24 - And originally in my head I was like,
05:25 - oh I just need to
convert this into numbers
05:27 - and then I can make a little array
05:29 - like zero, comma zero, 255
05:31 - But guess what.
05:32 - I want to do vector math.
05:35 - My vector is three dimensional,
05:37 - 'cause there's an R,
05:38 - a G, and a B.
05:39 - There happens to be in p5 itself
05:42 - a class called p5 vector.
05:46 - I can make an instance of it
05:47 - with the createVector function.
05:49 - So even though eventually later,
05:52 - if I'm going to be doing vector math
05:54 - on a 100 dimensional vector,
05:56 - an array with 100 numbers in it,
05:58 - this createVector won't work.
05:59 - It's a nice coincidence that RGB
06:02 - has three components,
06:04 - just like a three dimensional space,
06:07 - coordinate,
06:07 - x, y, z, a three dimensional vector.
06:09 - So I can put in here
06:11 - that p5 vector.
06:13 - createVector zero, comma zero, comma 255.
06:15 - So that's what I'm trying
to write the code to do.
06:19 - So I can say vectors.
06:24 - So I'm going to actually say label
06:26 - equals colors index i dot color.
06:29 - And then, rgb equals colors index i dot.
06:33 - And what is it in here?
06:35 - It is hex.
06:36 - It's under hex.
06:39 - And actually,
06:41 - I'm pretty sure that in p5,
06:45 - if I have a string,
06:46 - like let s equal zero, zero, zero.
06:50 - This is the hexadecimal code for red.
06:54 - I can say color s
06:57 - and it will give me a color object
06:59 - that has the RGB values in it.
07:02 - So what I'm going to do is...
07:03 - This is a little confusing
07:04 - 'cause everything is called color.
07:06 - So there's the colors
inside of the JSON file.
07:09 - And each element of the colors array
07:12 - has a color label.
07:13 - And now there's a p5 color function.
07:15 - So there's a lot of stuff called color.
07:16 - It's all different.
07:18 - But I'm going to say rgb
equals the color function
07:21 - with the hex thing passed through it.
07:24 - And then I can say,
07:26 - rgb.r,
07:27 - rgb.g,
07:30 - rgb.b.
07:32 - And then the vectors with that label,
07:35 - there we go.
07:36 - So this is just a little
bit of data cleanup
07:39 - to a format that I want to have it.
07:41 - I don't know if it really matters so much.
07:43 - But I think this is going to help.
07:45 - I create an empty object.
07:46 - I look at all the data,
07:48 - the way it's in the JSON file,
07:49 - and then one at a time,
07:51 - I make a p5 vector out of the RGB values.
07:55 - And then I'm going to say, return vectors.
08:01 - I suppose that it would be nice to like
08:03 - pass in this argument.
08:05 - And I could say,
08:06 - let vectors.
08:08 - And then I'm going to say vectors.
08:11 - Can't read property length of undefined
08:14 - sketch.js line 13.
08:19 - Let's console log data.
08:23 - I must have been confused.
08:28 - Oh boy, I'm doing this in the wrong place.
08:31 - The whole point of preload
08:33 - is that it's a function that you call
08:35 - to make sure the data is ready
08:37 - before you get to setup.
08:38 - Because loading data,
08:40 - loading a text file,
08:40 - loading a media file is
asynchronous in JavaScript.
08:43 - And I'm trying to simplify that.
08:44 - This needs to be in setup.
08:47 - And now I should be able
to say this here as well.
08:54 - Okay, here we go.
08:55 - There we go, now.
08:58 - Oh wait, okay, hold on.
09:02 - Weird, what's going on.
09:05 - Oh, there is a setup down here.
09:08 - Too many setups Mozart.
09:10 - Too many setups.
09:13 - Okay, here we go.
09:15 - This is going to be right eventually.
09:16 - There we go.
09:17 - Now I have basically a dictionary
09:20 - where every single one of these colors
09:23 - is paired with a p5 vector
09:25 - with these x, y, and z values.
09:26 - Now that's not right.
09:28 - That is not right at all.
09:30 - A lot of zeros in there.
09:32 - Let's see.
09:34 - So there is no .r, .g,
09:36 - or .b property of a p5 color.
09:38 - I made that up completely.
09:40 - (Daniel laughing)
09:42 - Red, it can call the red function
09:44 - and pass in the color.
09:46 - Green, blue.
09:51 - This should work now.
09:53 - Just makin' up stuff that doesn't work.
09:54 - Okay, r is not defined.
09:57 - This is rgb.
10:01 - There we go.
10:02 - And there we go.
10:03 - Now this is looking right, right.
10:05 - And algae lives in the vector space
10:08 - 84, comma 172, comma 104.
10:11 - Now that I have this data set,
10:13 - we can begin to imagine
10:16 - a physical space,
10:18 - a three dimensional space
10:20 - where all of these colors live.
10:25 - Right, so there's an x-axis,
10:27 - well a y-axis, an x-axis,
10:29 - and a z-axis
10:30 - which is actually coming
out from the wall here.
10:33 - And one color might be over here.
10:35 - And another color might be here.
10:36 - One might be off in the distance.
10:38 - One might be very close up, all right.
10:40 - So you could imagine this.
10:41 - I'm trying to draw this
three dimensional space
10:43 - on a two dimensional surface.
10:45 - But you could imagine now
10:47 - that I could do certain things by,
10:49 - what if I just did a random walk?
10:51 - What if I did a random
walk throughout this space?
10:54 - What colors would I find?
10:56 - Let's try that.
10:58 - Why not?
10:59 - Excellent starting point.
11:01 - Okay, so let's say
where I'm going to start
11:05 - is I am going to
11:07 - have a position.
11:11 - And in setup, I'm going
to say position equals
11:14 - createVector random 255,
11:17 - random 255,
11:19 - random 255.
11:21 - Now, what I want to do basically
11:23 - is what if I pick a random space,
11:27 - random vector in that
three dimensional space.
11:30 - Let me find the word,
11:32 - the color that is closest to that.
11:34 - So I'm going to write a new function
11:37 - which is I'm going to
say call, findNearest.
11:43 - And this function is
going to take in a vector.
11:46 - We'll call it v.
11:47 - So the first thing that I want to do
11:48 - is I want to get a list
of all of those colors
11:51 - into an array.
11:53 - So it's important to note that
11:55 - it looks like I have an
array of all these things.
11:57 - But this is actually an object
11:59 - where the key,
12:00 - all the keys of the object
12:02 - are the names of the colors
12:04 - paired with the value which is the vector.
12:06 - But what if I could sort this list
12:08 - by proximity to that other vector?
12:10 - Well I need an array
to be able to do that.
12:12 - And so a quick way I can
an array is I can say,
12:15 - keys equals Object.keys
12:19 - from vectors.
12:21 - This gives me, if I just console log this
12:27 - and I say findNearest,
12:31 - you can see now I just have
an array of all the keys.
12:34 - But I can sort this.
12:36 - I can say keys.sort.
12:38 - And now guess what.
12:39 - If I call a sort function,
12:42 - I can always sort by
12:45 - an array by
12:47 - my own arbitrary comparison
of the two elements.
12:51 - So I'm going to use the arrow syntax here
12:53 - and I'm going to write a function
12:56 - that compares two arbitrary
elements, a and b.
13:00 - If you're not familiar
with this arrow notation,
13:02 - it's like declaring,
13:03 - it's a new way to declare
a function in ES6,
13:05 - not so new.
13:06 - And I'll refer you to my video
about the arrow function.
13:07 - But what I'm going to do now
13:09 - is I want to say the distance,
13:12 - distance one is
13:14 - the distance between,
13:17 - the distance between...
13:18 - I'm going to pretend I have a
distance function for a second.
13:22 - Vectors key a,
13:26 - and vectors key b.
13:28 - Oh no, no, no, I'm sorry.
13:30 - The distance between
13:33 - v and vectors.
13:36 - Oh my goodness.
13:37 - Yeah, yeah, yeah, yeah.
13:38 - Between a, yeah sorry,
13:39 - I got confused for a second.
13:40 - Remember, I'm trying to tell the array
13:44 - which one is closer to v.
13:47 - So I somehow need to compute the distance
13:49 - between my random walker, v,
13:52 - and either a or b.
13:54 - Which one is closer?
13:55 - And then I can return d1 minus d2.
13:59 - Because, what sorting will do,
14:02 - sorting, when you have two elements,
14:05 - if you return a negative number,
14:07 - it puts a before b.
14:08 - A positive number puts b before a.
14:10 - It might be the other way around.
14:11 - I can't remember.
14:12 - And if it returns zero
then they're the same.
14:14 - It doesn't need to swap them.
14:15 - So you're just telling
the sorting algorithm
14:18 - which one goes before the other one.
14:20 - So I'm going to get a negative number
14:21 - by comparing these two values.
14:23 - Now of course,
14:24 - I need to have a distance function.
14:26 - So I need to have a distance function
14:28 - that can take a vector and,
14:30 - two vectors.
14:34 - v1 and v2.
14:36 - And I could just say
return p5.Vector.distance.
14:40 - This is a little silly, v1, v2.
14:42 - So I really just am wrapping.
14:43 - There is a distance function already.
14:46 - Function distance.
14:48 - That will take two p5 vectors
14:51 - and I can get the distance between them
14:53 - with p5.Vector.dist.
14:57 - But I just want to...
14:58 - And I'm doing that exactly here.
14:59 - So I think,
15:01 - let's look at this.
15:03 - Now I should be able to look here.
15:06 - So let's look at this
again and findNearest.
15:11 - Cannot read property dist of undefined.
15:14 - All right, so hold on a second.
15:15 - Let's make sure I have a vector here.
15:21 - Let me actually call
findNearest from the code.
15:28 - Oh, I have to call it with something.
15:30 - No wonder it was undefined.
15:32 - You can't just call...
15:33 - The whole point of calling findNearest
15:36 - with a particular vector, oye.
15:41 - Okay, so this now,
15:44 - does this look sorted to you?
15:46 - Let me actually unfold it.
15:49 - It's a lot of things.
15:49 - There's a lot of colors in here.
15:51 - Greenish blue,
15:52 - tealish, greenish teal,
15:53 - greenblue,
15:55 - aqua marine, sea.
15:56 - Right, I picked some arbitrary spot.
15:59 - Now what is that color actually?
16:01 - So here's the thing,
16:02 - did I sort it in the correct order?
16:03 - That would be a question.
16:05 - So let's console log v
16:10 - and then console log
16:14 - also vectors,
16:17 - sorry.
16:18 - Vectors, keys index zero.
16:21 - This would be the first one.
16:23 - So in theory,
16:24 - these should be two very similar values.
16:29 - Let's see.
16:34 - Whoa, I'm console logging
v in too many places.
16:39 - 64, 78,
16:41 - 250, 253,
16:42 - 69, 84.
16:43 - So that makes sense.
16:45 - That's pretty close.
16:47 - You know, 172, 189.
16:48 - Right, so this looks right.
16:49 - If I sorted it the other way.
16:52 - I can never remember which
way the sorting works
16:54 - so I just try it both ways.
16:56 - If I sort it the other
way you'll see I'm getting
16:58 - the furthest thing,
16:59 - the color that's the most different, okay.
17:01 - So now.
17:05 - What I'm going to do is
17:07 - I'm going to add a draw loop.
17:11 - And now this function I want it to return
17:16 - keys index zero.
17:19 - I just want to get the closest one.
17:24 - And so what I'm going to do is I, in draw,
17:27 - I'm going to say findNearest.
17:31 - And then I'm going to create
a div with that color in it.
17:35 - I'm going to say call it colorName.
17:38 - 'Cause I don't want to override
17:39 - the color variable, colorName.
17:40 - And then I'm going to say,
17:43 - let r equal p5.Vector.random.
17:49 - Is it random3D that
gives me a random vector?
17:51 - I think random3D will
give me a random vector.
17:54 - And then I will say pos.add r.
17:56 - So this is random walk.
17:58 - I'm just going to randomly
change that vector
18:00 - and create a div for a new color name.
18:02 - And let's change the frameRate to like one
18:05 - so it does this once per second.
18:06 - And let's take a look.
18:13 - So look at this.
18:14 - This is my random walk.
18:15 - You can see that it's not
getting very far away.
18:18 - It started with sepia.
18:20 - So I should probably take
a bigger step, right.
18:23 - The step is so small that it's mostly
18:25 - wandering around the same color.
18:27 - There aren't that many colors.
18:28 - So I'm going to say r.multiply by 10.
18:32 - So I'm going to make
that step much bigger.
18:37 - (Daniel laughing)
18:41 - Ah, it changed, oh okay.
18:44 - Boy, let's try this one more time.
18:47 - Let's make it much bigger.
18:48 - We can go a little faster.
18:52 - There we go.
18:53 - So we can see now I'm walking around.
18:55 - There should be like
18:56 - each one of these steps
18:58 - is a fairly similar color
to the previous one.
19:01 - So this is the idea.
19:02 - I'm performing a mathematical
operation in vector space,
19:06 - walking around a 3D vector.
19:09 - I'm finding the word
19:11 - that is most closely
associated with that one
19:13 - by Euclidean distance,
19:15 - and then I am rendering
that word on the screen.
19:18 - Before I move on,
19:19 - let's actually just test something.
19:21 - Like let's say for example
I want to instead of...
19:25 - 'Cause it's random,
19:26 - just to make sure this is
really doing what we think.
19:27 - Let me start with like blue.
19:30 - So I am going to start with...
19:32 - Not color, sorry, createVector.
19:34 - I'm going to start with blue
and let's see what we get.
19:36 - Primary blue, pure blue,
19:38 - true blue, pure blue,
19:39 - pure blue, primary blue.
19:40 - Now one thing,
19:41 - one thing that's an issue
19:42 - is I shouldn't,
19:43 - I really can't allow negative numbers.
19:46 - 'Cause if I'm wandering
off to negative land,
19:48 - there's no negative
numbers in my data set.
19:50 - So probably to make
this a bit more accurate
19:53 - in terms of this random walk.
19:55 - Where do I have that, in draw?
19:56 - It's right here.
19:57 - I probably want to say,
20:01 - pos.x.
20:03 - There's probably a more
thoughtful way of doing this.
20:05 - Equals, um.
20:07 - Oh, I could I see.
20:08 - This I could, equals.
20:12 - I need to stay in sort of positive land.
20:14 - So constrain
20:17 - pox.x between zero and 255.
20:20 - Or I could do like an
absolute value or something
20:22 - of the vector.
20:22 - That would be weird.
20:23 - But let's just do this.
20:25 - There's like a sort of a quick solution.
20:27 - So this'll keep me in that space.
20:29 - And let's run this again.
20:31 - So even though I start with primary blue,
20:33 - you can see I start walking
around and getting...
20:38 - I'm going to end up
somewhere else eventually.
20:40 - But these colors are related as I'm going.
20:42 - Okay, so this is working pretty well
20:43 - the way I imagined it.
20:44 - And of course.
20:45 - (bell dinging)
20:47 - Steve and me-iam-sah-me,
20:48 - both with chatter like uh hello,
20:50 - set the text to that color.
20:51 - So let's do that.
20:54 - So that I think will be more interesting.
20:55 - So where I create the div,
20:56 - where do I do that.
20:57 - I create the div here.
20:59 - And I'm going to say,
21:01 - let div equal createDiv.
21:02 - And I'm just going to
use the p5 DOM library
21:04 - and say style,
21:05 - background-color, oh.
21:08 - Background-color.
21:09 - Now too bad I didn't keep that hex code.
21:10 - 'Cause if I kept the hex code,
21:12 - I could put it right there.
21:14 - I could just say,
21:15 - I'm going to use a template literal rgb.
21:22 - What is it?
21:23 - The vector is
21:28 - vectors, colorName.
21:33 - 'Cause I just returned it.
21:34 - I just returned the key.
21:35 - So I probably should,
21:36 - I could have returned the whole vector.
21:37 - So many ways you could do this, ah.
21:40 - And now, rgb
21:45 - red, yeah no v.x.
21:48 - Okay this is easy.
21:49 - This is a fine way to do it.
21:51 - This is like the CSS syntax.
21:55 - v.y,
21:59 - v.z.
22:00 - All right, let's try this.
22:05 - And that should do the trick.
22:08 - All right, here we go.
22:09 - Oh, I put the background color.
22:11 - All right, I meant to
set the text color, but.
22:15 - How do I set the text color?
22:16 - Color, should probably just color.
22:19 - There we go, okay.
22:21 - So now we can see really
22:23 - how it's also,
22:24 - we can see how this is a random
walk through a color space.
22:28 - And I would love to let
this go for a little while
22:31 - and end up somewhere.
22:31 - Okay, so Allison Parrish in her tutorial
22:35 - actually does something
very similar to this.
22:37 - And I might as an exercise
suggest doing this.
22:39 - She actually takes this poem,
22:41 - this idea of a poem,
22:42 - roses are red, violets are blue,
22:44 - and walks through the color
space for each of these.
22:46 - I've done just a little piece of that.
22:48 - So what kind of creative idea can you do
22:50 - visualizing this three
dimensional color space
22:53 - through words, through color,
22:55 - through a random walk?
22:57 - I think I should do one more.
22:58 - I'm not sure.
22:59 - Yeah, I think I'm going to try to do
23:00 - one more demonstration with this data set
23:01 - and I'll do that in a separate video,
23:02 - and then I will come back
and actually finally go
23:05 - to the point where we look at
23:06 - what does it mean to
take a pre-trained set
23:09 - of word embeddings
23:10 - that's actually used the
word2vec machine learning model,
23:13 - training process.
23:14 - Okay, see you there.
23:16 - (bell dinging)
23:16 - (upbeat techno music)
23:24 - (bell dinging)

Cleaned transcript:

(bell dinging) Hello, part two. I think I'm on part two of my word2vec series. I'm talking about word vectors, word embeddings, words and numbers and how they go together. Now, let me be very clear here. This particular section, this video is directly based on this wonderful tutorial by Allison Parrish called Understanding word vectors, released under the Creative Commons by a 4.0 license. If you also use this stuff, please attribute it according to the license to Allison Parrish. I will include a link to this in the video's tutorial. I talked a bit about word vectors in general, and about this tutorial, and other things that you might look at for inspiration in the previous video, and now. So what I want to do is a direct port of this example from Allison Parrish that looks at language with a vector's colors. Now, let me be clear about something for a second. In the previous video, I talked a little bit about this example which was looking at animals in a two dimensional space with the xaxis is like their size, or their yaxis is the size, and xaxis is their cuteness. And is that word2vec? Well, not exactly. These are word embeddings, meaning there is a word embedded with some numeric data. I don't know if that's the best way to describe it. But it's not exactly what you will find if you look up the term word2vec. Word2vec is a particular algorithm, a machine learning algorithm to take a large body of text and produce these word embeddings, high dimensional arrays of numbers based on how the words appear in context in that text. And I'm going to get to that a little bit later. So sort of in theory, the theory of it is we'll end up with this essence of the word, and words that are similar in meaning, or context, or what, if it's a big question mark are going to live close to each other in that 100, or 300, or a thousand dimensional space. But I'm making the case, and this is really from Allison Parrish's tutorial, that we can maybe understand this concept or practice this concept in a simpler way to start. And that simpler way will be to use a data set. I want to use this data set. It's the xkcd color set. It's the 954 most common RGB monitor colors as defined by hundreds of thousand participants in a color name survey. You can see more information about that survey here. So anyway, but the data set itself is over here in Darius Kazemi's open source project Corpora, which has a lot of interesting JSON data sets. So I have downloaded that data set and I have it right here. So the question is, can we turn this into a word2veclike scenario? And what kind of strange outcomes can happen if we compare each one of these words, or sets of words, like cloudy blue, with a set of numbers? All right so, let's write some code. So first thing I'm going to do is I'm going to add to this preload function. And I am going to just create a data set. I want to say data equals loadJSON xkcd.json. And then I'm going to say here in setup, console.log data. So let's make sure this works. I'm going to go to the browser where I have my code running. Okay, so we can see here that I have now loaded into that variable that array of 949 colors. Each one is an object with a label, cloudy blue, under the color property, and an actual hex value. So my goal right now is to turn that into a list that looks more like this. The label with a number. All right so, let me first write a little bit of code to kind of process that data. So I am going to, let's write a function. You know, processData. Put in a separate function. And I'm going to create a variable. Call it vectors. It's going to be an object. In this object, I first want to go through everything in data. And actually, everything that's in data is in data colors. So I'm going to say let colors equal data.colors. Then I'm going to say colors.length. Ah, oh autofill. Autocomplete, you do not complete me. Colors and then I'm going to get an individual color. It's colors index i. And then what I want to do is say vectors. Create, oh, oh, oh, oh. I'm going to use createVector. So this is what's kind of interesting about this. I forgot while I was doing this. All right, so here's the thing. Right now the data. The data from that data file is just in a big array. And the array has a bunch of objects in it. Color, you know, blue, comma RGB, I forgot what it is, and then like the hexadecimal, you know, value like this. It looks like this. I want this to be in a associative array, a dictionary. But I'm just going to use a JavaScript object for that. So just an object where the color blue is the property name. And the value of that property... And originally in my head I was like, oh I just need to convert this into numbers and then I can make a little array like zero, comma zero, 255 But guess what. I want to do vector math. My vector is three dimensional, 'cause there's an R, a G, and a B. There happens to be in p5 itself a class called p5 vector. I can make an instance of it with the createVector function. So even though eventually later, if I'm going to be doing vector math on a 100 dimensional vector, an array with 100 numbers in it, this createVector won't work. It's a nice coincidence that RGB has three components, just like a three dimensional space, coordinate, x, y, z, a three dimensional vector. So I can put in here that p5 vector. createVector zero, comma zero, comma 255. So that's what I'm trying to write the code to do. So I can say vectors. So I'm going to actually say label equals colors index i dot color. And then, rgb equals colors index i dot. And what is it in here? It is hex. It's under hex. And actually, I'm pretty sure that in p5, if I have a string, like let s equal zero, zero, zero. This is the hexadecimal code for red. I can say color s and it will give me a color object that has the RGB values in it. So what I'm going to do is... This is a little confusing 'cause everything is called color. So there's the colors inside of the JSON file. And each element of the colors array has a color label. And now there's a p5 color function. So there's a lot of stuff called color. It's all different. But I'm going to say rgb equals the color function with the hex thing passed through it. And then I can say, rgb.r, rgb.g, rgb.b. And then the vectors with that label, there we go. So this is just a little bit of data cleanup to a format that I want to have it. I don't know if it really matters so much. But I think this is going to help. I create an empty object. I look at all the data, the way it's in the JSON file, and then one at a time, I make a p5 vector out of the RGB values. And then I'm going to say, return vectors. I suppose that it would be nice to like pass in this argument. And I could say, let vectors. And then I'm going to say vectors. Can't read property length of undefined sketch.js line 13. Let's console log data. I must have been confused. Oh boy, I'm doing this in the wrong place. The whole point of preload is that it's a function that you call to make sure the data is ready before you get to setup. Because loading data, loading a text file, loading a media file is asynchronous in JavaScript. And I'm trying to simplify that. This needs to be in setup. And now I should be able to say this here as well. Okay, here we go. There we go, now. Oh wait, okay, hold on. Weird, what's going on. Oh, there is a setup down here. Too many setups Mozart. Too many setups. Okay, here we go. This is going to be right eventually. There we go. Now I have basically a dictionary where every single one of these colors is paired with a p5 vector with these x, y, and z values. Now that's not right. That is not right at all. A lot of zeros in there. Let's see. So there is no .r, .g, or .b property of a p5 color. I made that up completely. (Daniel laughing) Red, it can call the red function and pass in the color. Green, blue. This should work now. Just makin' up stuff that doesn't work. Okay, r is not defined. This is rgb. There we go. And there we go. Now this is looking right, right. And algae lives in the vector space 84, comma 172, comma 104. Now that I have this data set, we can begin to imagine a physical space, a three dimensional space where all of these colors live. Right, so there's an xaxis, well a yaxis, an xaxis, and a zaxis which is actually coming out from the wall here. And one color might be over here. And another color might be here. One might be off in the distance. One might be very close up, all right. So you could imagine this. I'm trying to draw this three dimensional space on a two dimensional surface. But you could imagine now that I could do certain things by, what if I just did a random walk? What if I did a random walk throughout this space? What colors would I find? Let's try that. Why not? Excellent starting point. Okay, so let's say where I'm going to start is I am going to have a position. And in setup, I'm going to say position equals createVector random 255, random 255, random 255. Now, what I want to do basically is what if I pick a random space, random vector in that three dimensional space. Let me find the word, the color that is closest to that. So I'm going to write a new function which is I'm going to say call, findNearest. And this function is going to take in a vector. We'll call it v. So the first thing that I want to do is I want to get a list of all of those colors into an array. So it's important to note that it looks like I have an array of all these things. But this is actually an object where the key, all the keys of the object are the names of the colors paired with the value which is the vector. But what if I could sort this list by proximity to that other vector? Well I need an array to be able to do that. And so a quick way I can an array is I can say, keys equals Object.keys from vectors. This gives me, if I just console log this and I say findNearest, you can see now I just have an array of all the keys. But I can sort this. I can say keys.sort. And now guess what. If I call a sort function, I can always sort by an array by my own arbitrary comparison of the two elements. So I'm going to use the arrow syntax here and I'm going to write a function that compares two arbitrary elements, a and b. If you're not familiar with this arrow notation, it's like declaring, it's a new way to declare a function in ES6, not so new. And I'll refer you to my video about the arrow function. But what I'm going to do now is I want to say the distance, distance one is the distance between, the distance between... I'm going to pretend I have a distance function for a second. Vectors key a, and vectors key b. Oh no, no, no, I'm sorry. The distance between v and vectors. Oh my goodness. Yeah, yeah, yeah, yeah. Between a, yeah sorry, I got confused for a second. Remember, I'm trying to tell the array which one is closer to v. So I somehow need to compute the distance between my random walker, v, and either a or b. Which one is closer? And then I can return d1 minus d2. Because, what sorting will do, sorting, when you have two elements, if you return a negative number, it puts a before b. A positive number puts b before a. It might be the other way around. I can't remember. And if it returns zero then they're the same. It doesn't need to swap them. So you're just telling the sorting algorithm which one goes before the other one. So I'm going to get a negative number by comparing these two values. Now of course, I need to have a distance function. So I need to have a distance function that can take a vector and, two vectors. v1 and v2. And I could just say return p5.Vector.distance. This is a little silly, v1, v2. So I really just am wrapping. There is a distance function already. Function distance. That will take two p5 vectors and I can get the distance between them with p5.Vector.dist. But I just want to... And I'm doing that exactly here. So I think, let's look at this. Now I should be able to look here. So let's look at this again and findNearest. Cannot read property dist of undefined. All right, so hold on a second. Let's make sure I have a vector here. Let me actually call findNearest from the code. Oh, I have to call it with something. No wonder it was undefined. You can't just call... The whole point of calling findNearest with a particular vector, oye. Okay, so this now, does this look sorted to you? Let me actually unfold it. It's a lot of things. There's a lot of colors in here. Greenish blue, tealish, greenish teal, greenblue, aqua marine, sea. Right, I picked some arbitrary spot. Now what is that color actually? So here's the thing, did I sort it in the correct order? That would be a question. So let's console log v and then console log also vectors, sorry. Vectors, keys index zero. This would be the first one. So in theory, these should be two very similar values. Let's see. Whoa, I'm console logging v in too many places. 64, 78, 250, 253, 69, 84. So that makes sense. That's pretty close. You know, 172, 189. Right, so this looks right. If I sorted it the other way. I can never remember which way the sorting works so I just try it both ways. If I sort it the other way you'll see I'm getting the furthest thing, the color that's the most different, okay. So now. What I'm going to do is I'm going to add a draw loop. And now this function I want it to return keys index zero. I just want to get the closest one. And so what I'm going to do is I, in draw, I'm going to say findNearest. And then I'm going to create a div with that color in it. I'm going to say call it colorName. 'Cause I don't want to override the color variable, colorName. And then I'm going to say, let r equal p5.Vector.random. Is it random3D that gives me a random vector? I think random3D will give me a random vector. And then I will say pos.add r. So this is random walk. I'm just going to randomly change that vector and create a div for a new color name. And let's change the frameRate to like one so it does this once per second. And let's take a look. So look at this. This is my random walk. You can see that it's not getting very far away. It started with sepia. So I should probably take a bigger step, right. The step is so small that it's mostly wandering around the same color. There aren't that many colors. So I'm going to say r.multiply by 10. So I'm going to make that step much bigger. (Daniel laughing) Ah, it changed, oh okay. Boy, let's try this one more time. Let's make it much bigger. We can go a little faster. There we go. So we can see now I'm walking around. There should be like each one of these steps is a fairly similar color to the previous one. So this is the idea. I'm performing a mathematical operation in vector space, walking around a 3D vector. I'm finding the word that is most closely associated with that one by Euclidean distance, and then I am rendering that word on the screen. Before I move on, let's actually just test something. Like let's say for example I want to instead of... 'Cause it's random, just to make sure this is really doing what we think. Let me start with like blue. So I am going to start with... Not color, sorry, createVector. I'm going to start with blue and let's see what we get. Primary blue, pure blue, true blue, pure blue, pure blue, primary blue. Now one thing, one thing that's an issue is I shouldn't, I really can't allow negative numbers. 'Cause if I'm wandering off to negative land, there's no negative numbers in my data set. So probably to make this a bit more accurate in terms of this random walk. Where do I have that, in draw? It's right here. I probably want to say, pos.x. There's probably a more thoughtful way of doing this. Equals, um. Oh, I could I see. This I could, equals. I need to stay in sort of positive land. So constrain pox.x between zero and 255. Or I could do like an absolute value or something of the vector. That would be weird. But let's just do this. There's like a sort of a quick solution. So this'll keep me in that space. And let's run this again. So even though I start with primary blue, you can see I start walking around and getting... I'm going to end up somewhere else eventually. But these colors are related as I'm going. Okay, so this is working pretty well the way I imagined it. And of course. (bell dinging) Steve and meiamsahme, both with chatter like uh hello, set the text to that color. So let's do that. So that I think will be more interesting. So where I create the div, where do I do that. I create the div here. And I'm going to say, let div equal createDiv. And I'm just going to use the p5 DOM library and say style, backgroundcolor, oh. Backgroundcolor. Now too bad I didn't keep that hex code. 'Cause if I kept the hex code, I could put it right there. I could just say, I'm going to use a template literal rgb. What is it? The vector is vectors, colorName. 'Cause I just returned it. I just returned the key. So I probably should, I could have returned the whole vector. So many ways you could do this, ah. And now, rgb red, yeah no v.x. Okay this is easy. This is a fine way to do it. This is like the CSS syntax. v.y, v.z. All right, let's try this. And that should do the trick. All right, here we go. Oh, I put the background color. All right, I meant to set the text color, but. How do I set the text color? Color, should probably just color. There we go, okay. So now we can see really how it's also, we can see how this is a random walk through a color space. And I would love to let this go for a little while and end up somewhere. Okay, so Allison Parrish in her tutorial actually does something very similar to this. And I might as an exercise suggest doing this. She actually takes this poem, this idea of a poem, roses are red, violets are blue, and walks through the color space for each of these. I've done just a little piece of that. So what kind of creative idea can you do visualizing this three dimensional color space through words, through color, through a random walk? I think I should do one more. I'm not sure. Yeah, I think I'm going to try to do one more demonstration with this data set and I'll do that in a separate video, and then I will come back and actually finally go to the point where we look at what does it mean to take a pretrained set of word embeddings that's actually used the word2vec machine learning model, training process. Okay, see you there. (bell dinging) (upbeat techno music) (bell dinging)
