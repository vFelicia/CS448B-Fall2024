With timestamps:

00:00 - Hello.
00:01 - In this video, I'm going to
look at The New York Times
00:03 - API, which is an API that you
can query to get information
00:06 - about articles in The New
York Times, shockingly.
00:09 - Quite a surprise.
00:10 - Yeah.
00:10 - So again, I'm not
suggesting that this
00:13 - is the be all, end
all of APIs to use,
00:15 - but this is a nice case study
of finding an API that's
00:18 - out there, how do you
navigate its documentation,
00:21 - how do you figure out
how to form an API query
00:24 - and look at that data
and make something happen
00:27 - on the screen in a web page
using JavaScript, HTML,
00:30 - and CSS.
00:31 - And this thing over
here above my head--
00:34 - I just would rather
have that as a hat--
00:36 - called p5 GS.
00:38 - So the first thing, once
again, as in the previous video
00:41 - where I looked at Wordnik.
00:42 - The first thing is I
can spend a lot of time
00:44 - without even writing any
code or looking at any code
00:46 - because the first
thing I need to do
00:48 - is just figure out, like, huh?
00:49 - There's an API?
00:50 - Like what?
00:52 - So one thing, you'll
see, I'm already here.
00:54 - But I'm at
developer.nytimes.com.
00:57 - So once again, you're
at the mercy of the API.
01:00 - How good is the documentation?
01:02 - Are there examples?
01:02 - Is there an online tool that
helps you navigate the API?
01:05 - And again, this is a case
where there is a good one.
01:08 - And this is that question, like
you went to The New York Times
01:12 - website, and you found all this
data, and you want to use it.
01:14 - Is there an easy path
of that, or do you
01:16 - have to take some
sort of side road?
01:18 - In this particular video, I'm
showing you the easy path.
01:21 - And in another video, we'll
look at some side roads
01:23 - to how you might scrape or
parse data that isn't presented
01:26 - in a API, json friendly format.
01:29 - So all of that aside, here I am.
01:32 - Welcome.
01:32 - Get started.
01:33 - This is nice, friendly language.
01:35 - It makes me happy that someone
is welcoming me to the page,
01:37 - and I could get started.
01:38 - So the first thing you're
going to need to do, by the way
01:41 - if you're doing this on your
own, is request an API key.
01:43 - So again, you've got to sign up
for an account, get an API key.
01:46 - I don't believe-- actually
I don't know this one.
01:48 - I have no idea what
I'm talking about all
01:50 - of a sudden, which
is most of the time.
01:53 - But I don't know whether
there's any threshold
01:56 - of querying this API
where you suddenly
01:57 - have to pay for its use.
01:59 - But certainly, what I'm
going to show you today,
02:01 - getting a little bit
of data here and there,
02:02 - is something you
can do for free.
02:04 - This is a great thing.
02:06 - This is something that if
you see is good news for you.
02:09 - You're looking for
an API tool, meaning
02:11 - you can figure out
how the API works
02:13 - through an interface
in the browser.
02:14 - It's all the same exact
thing with Wordnik.
02:17 - So I could click around
and look at various things,
02:20 - available APIs, but I'm
going to go here directly
02:22 - to that API tool.
02:24 - And here you can
see API console.
02:26 - Actually, before I go that,
let me click to available APIs.
02:29 - So you can see here,
there's a lot of APIs.
02:32 - There's event listings and
geographic data, most popular
02:35 - API, movie reviews.
02:36 - There's lots of different
sub-APIs, different paths
02:40 - within the larger API.
02:41 - I think I'm going to stick
with, for simplicity, just
02:43 - this article search API.
02:45 - So interesting, this
is a nice data source
02:48 - because it actually
goes back to 1851.
02:51 - So I can query The New
York Times to ask for
02:54 - or I can search.
02:55 - I can say, give me
all the articles
02:56 - that have the word "rainbow"
in them or the word sea-bow.
03:00 - There's a such
thing as a see-bow
03:01 - as I learned in a previous
video or porcupine, whatever.
03:04 - Pick your word of choice.
03:05 - You can find the articles.
03:08 - So I'm want to
start with that one.
03:10 - And I could click on it.
03:11 - And here's some documentation
of how it all works.
03:14 - But once again, I'm going
to prefer to go back and go
03:19 - to this API tool.
03:20 - And here I am.
03:21 - Hi.
03:22 - Moment of technical
difficulty, but I'm back,
03:24 - and I am on the API console.
03:26 - So the first thing that
I'm going to do here
03:28 - is look at how the
API console works
03:30 - to figure out what
the query is I want
03:32 - to make to The New York Times.
03:33 - So I'm in the
article search API,
03:35 - but, of course, I could
change to a different one.
03:37 - And what I want to
do is click here.
03:39 - This is what's
known as endpoint,
03:41 - being the point
of end of the API
03:44 - where I'm going
to get something.
03:46 - But really, I think endpoint
is referring to search
03:49 - or maybe that's the method.
03:50 - It doesn't really
matter this terminology.
03:52 - The point is I want
to search the API,
03:54 - and this is the
path for doing that.
03:56 - So I can click here, and
I can see now, again,
03:58 - I have an interface.
03:59 - And yes, I want the format
to come back as json.
04:02 - That's going to
work well for me.
04:03 - And then q is the
search query term.
04:07 - So what's the
query term that I'm
04:10 - looking for articles that
contain that particular word?
04:13 - So I don't know.
04:14 - I really should think
of something different,
04:15 - but I'll just keep
using rainbow.
04:16 - By the way-- no, never mind.
04:19 - And then, there's other things.
04:20 - I could filter the search.
04:21 - Oh, there's a begin
date and an end date.
04:24 - So I could restrict only
getting articles from like 1957
04:27 - with the word rainbow in it.
04:28 - I could sort what I get
back by a different order.
04:31 - So all that stuff
is interesting,
04:32 - but it's also all
optional right now.
04:34 - I'm going to leave it out.
04:35 - So I encourage you
to look through this.
04:38 - Try it on your own.
04:39 - Add different parameters
to the API search.
04:41 - But the point is I
want to hit this now.
04:42 - And once again, the
most beautiful button
04:45 - in the internet is the Try
It button because that's
04:48 - going to let me just try the
API without having to write
04:50 - the code to see how it works.
04:51 - Now one thing here you can
see, The New York Times
04:54 - will often give you some results
with a key known as sample-key.
04:58 - I've overused the sample key.
05:00 - So I tried this a
minute ago, and it's
05:01 - going to tell me, no, sorry.
05:03 - You've overused the sample-key.
05:05 - But I have registered and
logged in for my own API key.
05:09 - So I'm not going to include
this process in the video.
05:12 - If you have trouble, ask a
question in the comments.
05:14 - Maybe I can help you.
05:15 - But once you've made
an account, logged in,
05:17 - you will get your own key.
05:19 - And I'm going to take that key,
and I'm going to go back here,
05:22 - and I'm going to
paste it in here.
05:24 - And then I'm going
to hit Try It.
05:26 - And once again, we can see
this is exactly what I want.
05:31 - The API tool formed
the API query for me.
05:35 - And also, we can scroll down.
05:37 - You can see it's
showing me the data.
05:38 - But this is a bit awkward
to look at it here,
05:40 - so what's a little bit easier
for me to do is grab this URL.
05:45 - Once again, open up a
new tab in the browser,
05:47 - paste it into the
browser, and now I
05:49 - can start to look at the data as
it looks in the browser itself.
05:54 - So I can start now.
05:56 - So first of all, it might
look like this to you.
05:59 - You might get this result.
I have a particular browser
06:02 - extension which formats
json for me nicely.
06:05 - I demonstrated in
an earlier video.
06:07 - I think if you just Google
Chrome extension json
06:10 - formatter, you'll find one.
06:12 - But even so, this is a good
example of how a lot of APIs
06:16 - will give you back
a ton of data.
06:18 - So really there's some
detective work involved here
06:21 - in figuring out how
to find the data.
06:23 - So let's say what we want
to do is show on screen
06:27 - the headlines for
all of the articles
06:29 - that contain the word
rainbow and maybe even
06:31 - a short snippet paragraph from
those particular articles.
06:35 - So let's think about
how we might do this.
06:37 - First of all, one thing
I often like to do
06:39 - is start minimizing these.
06:40 - You can see that really
the API is just giving me
06:43 - back an object with a
response property, a status
06:46 - property, and a
copyright property,
06:48 - which is important to note that
we're getting some copyrighted
06:51 - material here.
06:52 - So I can unpack this
response property.
06:54 - There's a meta property
and a docs property.
06:57 - Meta probably has
some information
06:58 - about the API query, how
many calls I have left,
07:01 - that sort of thing.
07:02 - Docs, which has 10 items--
07:04 - I know this in advance--
07:05 - that's giving me 10 articles.
07:07 - So most APIs won't give you
back all 10,000 articles
07:10 - all at once.
07:11 - They're going to give
you 10 at a time.
07:12 - And there's a way of
paging through them,
07:14 - but that's a bit beyond the
scope of this particular video.
07:17 - But what I want to do
is here look at docs,
07:19 - and docs is an array.
07:21 - So you can see these are
each element of the array.
07:24 - So each one of these
elements of the array
07:26 - is one particular article.
07:28 - So in this particular article--
07:29 - now I get to zoom back
out here and look--
07:33 - multimedia, headline--
there we go-- keywords.
07:35 - There's so much information--
publication date, byline.
07:39 - You can see some
things are right
07:40 - there, like snippet,
lead paragraph, abstract.
07:43 - I'm kind of interested
in the headline,
07:45 - which is now in another object.
07:47 - So I can unpack that and see
main, kicker, print headline.
07:50 - So we can see, I can spend all
day here looking into the API.
07:55 - But I can kind of
imagine now if I
07:57 - want the headline
is response.docs
08:01 - index, 0 for the first
one, dot headline.main.
08:06 - So I weirdly feel like I
have that memorized now,
08:08 - probably because I've
used The New York Times
08:10 - API a bunch of times.
08:11 - But this is the
thing that you're
08:12 - going to be needing
to take notes,
08:13 - practice, going to make
a mistake, try it again.
08:15 - This is the thing you're going
to want to do on your own.
08:18 - But now, we are ready to go
back and start to write code.
08:21 - We've looked at the API website.
08:23 - We've looked at
the documentation.
08:24 - We've used the tool.
08:25 - And we've got a working
path to getting data.
08:30 - And so now I'm going
to go back to p5.
08:33 - And I'm going to say just
at the beginning loadJSON,
08:37 - and I want the API URL--
08:39 - I'll have that as a variable--
and a callback called gotData.
08:43 - So I'm going to make a
variable, which is the URL,
08:46 - and I'm going to paste
this URL right in here.
08:51 - Now for expediency
here, I'm not going
08:53 - to go through the steps of
breaking that URL into parts.
08:56 - I've done that several times
in several other videos now.
08:59 - And, in fact, I would say
probably the exercise for you
09:01 - at the end of this video is to
have the user input the search
09:04 - word and then get
particular articles back
09:06 - with that search word.
09:07 - Right now, I'm just going
to get rainbow articles.
09:09 - But the first thing, what
I need to do right now
09:12 - is write this gotData callback.
09:15 - And remember, the gotData
callback needs an argument.
09:18 - That's where the
data from the API
09:20 - will fill that
variable with the data.
09:22 - And I can just look at
it to make sure it's
09:23 - working in the console.
09:25 - I'm not really going to
look at in the console,
09:26 - but I want to just hope
that I see something there.
09:28 - And you can see, there
is something there.
09:30 - So hopefully, we can
feel pretty confident
09:33 - that what's there is
exactly the same as here.
09:36 - So now let's think
about this again.
09:39 - Response.docs index
0 dot headline.main.
09:48 - Let's work with that.
09:50 - Data.response.docs index
0 dot headline.main.
09:58 - Did I dare possibly
get that right?
10:01 - Let's try it again.
10:03 - Let's run it.
10:04 - Looks like I got that right.
10:05 - Let's look at the second article
to see what the headline is.
10:08 - I'm changing that number 0--
10:09 - "Hollywood Dreams".
10:10 - That makes sense that
you might have a rainbow
10:12 - in your Hollywood dreams.
10:14 - My Hollywood dreams
consist of YouTube videos
10:17 - about data and API, which is
sort of a strange Hollywood
10:21 - dream some might say.
10:23 - I don't know where
I'm going with this.
10:25 - Let's stop now.
10:27 - Where are we?
10:27 - Oh, I've only been
doing this-- no, no.
10:29 - I forgot I have
two sections here.
10:30 - Anyway, I'm back.
10:32 - So blah, blah, blah.
10:33 - What do I want to do with this?
10:35 - Well I want to make something
appear in the browser.
10:37 - Now there's a lot of
interesting applications here.
10:39 - And maybe I'll get
to some ideas for you
10:41 - towards the end of this video.
10:42 - But right now,
let's at least make
10:44 - it loop through and show me
every headline and perhaps also
10:47 - a snippet.
10:48 - So let's go back to this.
10:49 - You can see snippet is actually
just response.docs index
10:53 - 0 dot snippet.
10:54 - Snippet being like a short
paragraph or a snippet
10:57 - from the article to give
us some more information.
11:00 - So one thing that happens
here is that I have an array--
11:07 - data.response.docs.
11:08 - And you know what I
think can be useful?
11:09 - This is a useful technique.
11:11 - If I just make up a variable
called articles and say
11:13 - articles is data.response.docs,
11:18 - I'm going to need it every
time I try to look for data.
11:20 - I'm going to say
data.response.docs blah, blah,
11:23 - blah, data.response.docs
da, da da, da.
11:25 - If you remix this, it has kind
of like a rhythmic quality
11:28 - to it-- data.response.docs
da, da da, da.
11:30 - But I'm going to need to do
that over and over again,
11:32 - so it's kind of useful if I just
store that in a variable called
11:35 - articles because now I can say
things like what I want to do
11:38 - is have a for loop.
11:39 - I goes from 0 to
articles.length I plus plus.
11:45 - And I could say something like--
11:48 - whoops, let me leave that
down here for reference.
11:51 - I don't need to say
data.response.docs headline
11:55 - main.
11:55 - I just thing to say
articles headline main.
11:57 - Well, what I need to say is--
11:59 - and I'll say createP articles
index i.headline.main.
12:06 - So this should now loop
through every single object
12:10 - in that docs array--
12:12 - each one having a headline
object and each headline
12:16 - having a main being
the main headline.
12:18 - So if I run this now,
you're going to see,
12:20 - here we go, I've got Rainbow
international, Painbow Charms--
12:23 - Painbow?
12:24 - What's a Painbow?
12:25 - That sounds terrible.
12:26 - No, no, no.
12:27 - No painbows-- rainbows.
12:30 - East Village Birdman
abandoning his nest of CDs.
12:33 - Anyway, there's some interesting
articles about rainbows.
12:36 - But maybe what I want to do
actually is say createElement.
12:39 - I'm going to make an H1
element for every headline.
12:42 - And then I'm going
to just quickly--
12:43 - I'm kind of like trying
to wrap this up here.
12:45 - I'm going to make
a paragraph element
12:49 - for every snippet,
which would be
12:51 - articles index i dot snippet.
12:54 - So again, there's a
lot of data there--
12:56 - articles index i
dot headline.main,
12:58 - articles index i dot snippet
make an H1 make a paragraph.
13:02 - And now when I look
at this, we can
13:04 - see I've now got like my own
version of The New York Times
13:08 - right here of a bunch of
articles and little snippets.
13:11 - And right now, if I wanted to
change what it's searching for,
13:15 - I've got to go into
my code into this URL.
13:18 - I could change it to porcupine,
and I could run it again.
13:23 - And you can see, I've got
now some prickly in name
13:26 - but refined on the table.
13:27 - I've got some articles
about porcupines.
13:30 - So here's what I
would say to you.
13:31 - First of all, just
showing you the beginnings
13:34 - of what you could do here.
13:36 - So one thing that I think
would be a good exercise
13:38 - is to make this work but not
have to go type into the code
13:41 - to change the word.
13:43 - Add a text input field.
13:45 - Add a button.
13:46 - When the user enters something
in that text input field
13:48 - and clicks the button,
you get the articles
13:50 - with that search term.
13:52 - Another thing you
might think about doing
13:53 - is, can you add query
string arguments?
13:57 - The only query argument
I have right now is q
13:59 - equals porcupine.
14:00 - But if you go back to the
tool, there was a begin
14:03 - and an end in terms of dates.
14:05 - So could I get all the articles
from a particular year?
14:08 - Could I even have that year
be selected by the user?
14:10 - That's something you might try.
14:12 - Another thing you
might look into,
14:13 - and I might need to add some
link or something in this,
14:15 - is that The New York
Times will give you
14:17 - the frequency that a word
appeared in The New York Times
14:20 - for a given year.
14:21 - So you can look at
interesting trends
14:23 - like when did the
word computer start
14:25 - getting used often in articles.
14:27 - This is a very
totally trite example,
14:29 - but you could think of something
like how many times the word
14:31 - war used versus the word peace.
14:33 - So anyway, you'll be more
thoughtful or creative
14:36 - about what kinds of
comparisons might
14:38 - you be interested in doing.
14:39 - But that's something in
this article search API.
14:41 - You can also get something
about word frequency.
14:43 - So there's a lot
of possibilities
14:45 - of things you might explore.
14:46 - If you make stuff,
share them with me.
14:47 - I would love to hear about it.
14:50 - And I hope that this
was useful to you
14:52 - in how you might use
The New York Times API.
14:56 - This is me signing off.
14:58 - WFMXY YouTube ITP
hot lights room,
15:03 - weird place over the
window and a computer and--
15:08 - goodbye.
15:09 - I'll talk to you.
15:09 - I don't have a hashtag for you--
15:11 - #uncomfortablepersonDan.
15:14 - Goodbye.
15:15 - Oh wait, this mouse fell
asleep, sleeping mouse again.

Cleaned transcript:

Hello. In this video, I'm going to look at The New York Times API, which is an API that you can query to get information about articles in The New York Times, shockingly. Quite a surprise. Yeah. So again, I'm not suggesting that this is the be all, end all of APIs to use, but this is a nice case study of finding an API that's out there, how do you navigate its documentation, how do you figure out how to form an API query and look at that data and make something happen on the screen in a web page using JavaScript, HTML, and CSS. And this thing over here above my head I just would rather have that as a hat called p5 GS. So the first thing, once again, as in the previous video where I looked at Wordnik. The first thing is I can spend a lot of time without even writing any code or looking at any code because the first thing I need to do is just figure out, like, huh? There's an API? Like what? So one thing, you'll see, I'm already here. But I'm at developer.nytimes.com. So once again, you're at the mercy of the API. How good is the documentation? Are there examples? Is there an online tool that helps you navigate the API? And again, this is a case where there is a good one. And this is that question, like you went to The New York Times website, and you found all this data, and you want to use it. Is there an easy path of that, or do you have to take some sort of side road? In this particular video, I'm showing you the easy path. And in another video, we'll look at some side roads to how you might scrape or parse data that isn't presented in a API, json friendly format. So all of that aside, here I am. Welcome. Get started. This is nice, friendly language. It makes me happy that someone is welcoming me to the page, and I could get started. So the first thing you're going to need to do, by the way if you're doing this on your own, is request an API key. So again, you've got to sign up for an account, get an API key. I don't believe actually I don't know this one. I have no idea what I'm talking about all of a sudden, which is most of the time. But I don't know whether there's any threshold of querying this API where you suddenly have to pay for its use. But certainly, what I'm going to show you today, getting a little bit of data here and there, is something you can do for free. This is a great thing. This is something that if you see is good news for you. You're looking for an API tool, meaning you can figure out how the API works through an interface in the browser. It's all the same exact thing with Wordnik. So I could click around and look at various things, available APIs, but I'm going to go here directly to that API tool. And here you can see API console. Actually, before I go that, let me click to available APIs. So you can see here, there's a lot of APIs. There's event listings and geographic data, most popular API, movie reviews. There's lots of different subAPIs, different paths within the larger API. I think I'm going to stick with, for simplicity, just this article search API. So interesting, this is a nice data source because it actually goes back to 1851. So I can query The New York Times to ask for or I can search. I can say, give me all the articles that have the word "rainbow" in them or the word seabow. There's a such thing as a seebow as I learned in a previous video or porcupine, whatever. Pick your word of choice. You can find the articles. So I'm want to start with that one. And I could click on it. And here's some documentation of how it all works. But once again, I'm going to prefer to go back and go to this API tool. And here I am. Hi. Moment of technical difficulty, but I'm back, and I am on the API console. So the first thing that I'm going to do here is look at how the API console works to figure out what the query is I want to make to The New York Times. So I'm in the article search API, but, of course, I could change to a different one. And what I want to do is click here. This is what's known as endpoint, being the point of end of the API where I'm going to get something. But really, I think endpoint is referring to search or maybe that's the method. It doesn't really matter this terminology. The point is I want to search the API, and this is the path for doing that. So I can click here, and I can see now, again, I have an interface. And yes, I want the format to come back as json. That's going to work well for me. And then q is the search query term. So what's the query term that I'm looking for articles that contain that particular word? So I don't know. I really should think of something different, but I'll just keep using rainbow. By the way no, never mind. And then, there's other things. I could filter the search. Oh, there's a begin date and an end date. So I could restrict only getting articles from like 1957 with the word rainbow in it. I could sort what I get back by a different order. So all that stuff is interesting, but it's also all optional right now. I'm going to leave it out. So I encourage you to look through this. Try it on your own. Add different parameters to the API search. But the point is I want to hit this now. And once again, the most beautiful button in the internet is the Try It button because that's going to let me just try the API without having to write the code to see how it works. Now one thing here you can see, The New York Times will often give you some results with a key known as samplekey. I've overused the sample key. So I tried this a minute ago, and it's going to tell me, no, sorry. You've overused the samplekey. But I have registered and logged in for my own API key. So I'm not going to include this process in the video. If you have trouble, ask a question in the comments. Maybe I can help you. But once you've made an account, logged in, you will get your own key. And I'm going to take that key, and I'm going to go back here, and I'm going to paste it in here. And then I'm going to hit Try It. And once again, we can see this is exactly what I want. The API tool formed the API query for me. And also, we can scroll down. You can see it's showing me the data. But this is a bit awkward to look at it here, so what's a little bit easier for me to do is grab this URL. Once again, open up a new tab in the browser, paste it into the browser, and now I can start to look at the data as it looks in the browser itself. So I can start now. So first of all, it might look like this to you. You might get this result. I have a particular browser extension which formats json for me nicely. I demonstrated in an earlier video. I think if you just Google Chrome extension json formatter, you'll find one. But even so, this is a good example of how a lot of APIs will give you back a ton of data. So really there's some detective work involved here in figuring out how to find the data. So let's say what we want to do is show on screen the headlines for all of the articles that contain the word rainbow and maybe even a short snippet paragraph from those particular articles. So let's think about how we might do this. First of all, one thing I often like to do is start minimizing these. You can see that really the API is just giving me back an object with a response property, a status property, and a copyright property, which is important to note that we're getting some copyrighted material here. So I can unpack this response property. There's a meta property and a docs property. Meta probably has some information about the API query, how many calls I have left, that sort of thing. Docs, which has 10 items I know this in advance that's giving me 10 articles. So most APIs won't give you back all 10,000 articles all at once. They're going to give you 10 at a time. And there's a way of paging through them, but that's a bit beyond the scope of this particular video. But what I want to do is here look at docs, and docs is an array. So you can see these are each element of the array. So each one of these elements of the array is one particular article. So in this particular article now I get to zoom back out here and look multimedia, headline there we go keywords. There's so much information publication date, byline. You can see some things are right there, like snippet, lead paragraph, abstract. I'm kind of interested in the headline, which is now in another object. So I can unpack that and see main, kicker, print headline. So we can see, I can spend all day here looking into the API. But I can kind of imagine now if I want the headline is response.docs index, 0 for the first one, dot headline.main. So I weirdly feel like I have that memorized now, probably because I've used The New York Times API a bunch of times. But this is the thing that you're going to be needing to take notes, practice, going to make a mistake, try it again. This is the thing you're going to want to do on your own. But now, we are ready to go back and start to write code. We've looked at the API website. We've looked at the documentation. We've used the tool. And we've got a working path to getting data. And so now I'm going to go back to p5. And I'm going to say just at the beginning loadJSON, and I want the API URL I'll have that as a variable and a callback called gotData. So I'm going to make a variable, which is the URL, and I'm going to paste this URL right in here. Now for expediency here, I'm not going to go through the steps of breaking that URL into parts. I've done that several times in several other videos now. And, in fact, I would say probably the exercise for you at the end of this video is to have the user input the search word and then get particular articles back with that search word. Right now, I'm just going to get rainbow articles. But the first thing, what I need to do right now is write this gotData callback. And remember, the gotData callback needs an argument. That's where the data from the API will fill that variable with the data. And I can just look at it to make sure it's working in the console. I'm not really going to look at in the console, but I want to just hope that I see something there. And you can see, there is something there. So hopefully, we can feel pretty confident that what's there is exactly the same as here. So now let's think about this again. Response.docs index 0 dot headline.main. Let's work with that. Data.response.docs index 0 dot headline.main. Did I dare possibly get that right? Let's try it again. Let's run it. Looks like I got that right. Let's look at the second article to see what the headline is. I'm changing that number 0 "Hollywood Dreams". That makes sense that you might have a rainbow in your Hollywood dreams. My Hollywood dreams consist of YouTube videos about data and API, which is sort of a strange Hollywood dream some might say. I don't know where I'm going with this. Let's stop now. Where are we? Oh, I've only been doing this no, no. I forgot I have two sections here. Anyway, I'm back. So blah, blah, blah. What do I want to do with this? Well I want to make something appear in the browser. Now there's a lot of interesting applications here. And maybe I'll get to some ideas for you towards the end of this video. But right now, let's at least make it loop through and show me every headline and perhaps also a snippet. So let's go back to this. You can see snippet is actually just response.docs index 0 dot snippet. Snippet being like a short paragraph or a snippet from the article to give us some more information. So one thing that happens here is that I have an array data.response.docs. And you know what I think can be useful? This is a useful technique. If I just make up a variable called articles and say articles is data.response.docs, I'm going to need it every time I try to look for data. I'm going to say data.response.docs blah, blah, blah, data.response.docs da, da da, da. If you remix this, it has kind of like a rhythmic quality to it data.response.docs da, da da, da. But I'm going to need to do that over and over again, so it's kind of useful if I just store that in a variable called articles because now I can say things like what I want to do is have a for loop. I goes from 0 to articles.length I plus plus. And I could say something like whoops, let me leave that down here for reference. I don't need to say data.response.docs headline main. I just thing to say articles headline main. Well, what I need to say is and I'll say createP articles index i.headline.main. So this should now loop through every single object in that docs array each one having a headline object and each headline having a main being the main headline. So if I run this now, you're going to see, here we go, I've got Rainbow international, Painbow Charms Painbow? What's a Painbow? That sounds terrible. No, no, no. No painbows rainbows. East Village Birdman abandoning his nest of CDs. Anyway, there's some interesting articles about rainbows. But maybe what I want to do actually is say createElement. I'm going to make an H1 element for every headline. And then I'm going to just quickly I'm kind of like trying to wrap this up here. I'm going to make a paragraph element for every snippet, which would be articles index i dot snippet. So again, there's a lot of data there articles index i dot headline.main, articles index i dot snippet make an H1 make a paragraph. And now when I look at this, we can see I've now got like my own version of The New York Times right here of a bunch of articles and little snippets. And right now, if I wanted to change what it's searching for, I've got to go into my code into this URL. I could change it to porcupine, and I could run it again. And you can see, I've got now some prickly in name but refined on the table. I've got some articles about porcupines. So here's what I would say to you. First of all, just showing you the beginnings of what you could do here. So one thing that I think would be a good exercise is to make this work but not have to go type into the code to change the word. Add a text input field. Add a button. When the user enters something in that text input field and clicks the button, you get the articles with that search term. Another thing you might think about doing is, can you add query string arguments? The only query argument I have right now is q equals porcupine. But if you go back to the tool, there was a begin and an end in terms of dates. So could I get all the articles from a particular year? Could I even have that year be selected by the user? That's something you might try. Another thing you might look into, and I might need to add some link or something in this, is that The New York Times will give you the frequency that a word appeared in The New York Times for a given year. So you can look at interesting trends like when did the word computer start getting used often in articles. This is a very totally trite example, but you could think of something like how many times the word war used versus the word peace. So anyway, you'll be more thoughtful or creative about what kinds of comparisons might you be interested in doing. But that's something in this article search API. You can also get something about word frequency. So there's a lot of possibilities of things you might explore. If you make stuff, share them with me. I would love to hear about it. And I hope that this was useful to you in how you might use The New York Times API. This is me signing off. WFMXY YouTube ITP hot lights room, weird place over the window and a computer and goodbye. I'll talk to you. I don't have a hashtag for you #uncomfortablepersonDan. Goodbye. Oh wait, this mouse fell asleep, sleeping mouse again.
