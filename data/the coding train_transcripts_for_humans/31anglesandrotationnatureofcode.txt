With timestamps:

00:00 - Hello, and welcome to chapter
3 of the nature of code.
00:03 - The title of this chapter
is Oscillating Motion.
00:05 - And that's where
I want to get to.
00:07 - What does it mean to
model a swinging pendulum
00:10 - to the plucking of a
guitar string, waveforms?
00:14 - How do we model and visualize
all of those in code in p5.js?
00:18 - But before I can get
to those examples,
00:20 - I need to build up
the building blocks
00:22 - of the tools and knowledge
that we'll need to make those.
00:25 - So the starting point
is really trigonometry.
00:27 - I need to look at the
trigonometric functions--
00:29 - sine, cosine, tangent.
00:30 - You might have heard of those.
00:32 - You might be studying them now.
00:33 - You might have studied
them many, many years ago.
00:34 - I'm going to review
all of those.
00:36 - But before I can
even get to that,
00:38 - I just want to talk about
the concept of an angle.
00:43 - In trigonometry,
the idea of an angle
00:45 - is often found in what's
known as a right triangle,
00:49 - a right triangle being
a triangle where one
00:51 - of the angles is 90 degrees.
00:53 - And then we might be looking
at this particular angle
00:55 - of the triangle and evaluating
it for some purpose.
00:58 - We are also going
to see that angles
01:00 - are really
fundamental to the way
01:02 - that we describe the path, the
perimeter, the circumference
01:06 - of a circle.
01:09 - So let's say I have
a circle like this.
01:11 - And the radius is defined as
the distance between the center
01:15 - to the edge of the circle.
01:17 - I might look at a given
point on that circle based
01:21 - on the angle relative
to this horizontal axis.
01:26 - So the question becomes,
what are the units
01:29 - of measurement for an angle?
01:31 - And what can I do
with angles in p5.js?
01:34 - The starting point of what
I want to look at in p5.js
01:38 - is rotation based on an angle.
01:41 - 90 degrees is a right angle.
01:45 - Looking back at the
circle, you might
01:46 - think about, oh, 360
degrees of full rotation
01:51 - all the way around a circle.
01:52 - That's 360 degrees.
01:54 - Half way across, this
angle is 180 degrees.
01:58 - So these are common measurements
in the unit of degrees.
02:02 - Most computer graphics
systems, however,
02:05 - do not work with
measurements in degrees.
02:09 - They work with measurements
in a unit known as radians.
02:15 - Now p5 will actually let
you work with either degrees
02:18 - or radians, and I will show you
how to make that designation.
02:21 - But I think it's really
useful for us to practice,
02:25 - thinking, and
working in radians.
02:27 - There will be some conveniences
for that in future examples.
02:30 - And it will reveal the
beauty and wonderfulness
02:34 - of this magic
number so to speak--
02:36 - pi.
02:38 - So first, let's look
at some common angles
02:40 - and their corresponding
measurement in radians.
02:44 - 0 degrees is 0 radians.
02:49 - 180 degrees is pi radians.
02:53 - And I'm using the Greek letter
pi to indicate the value of pi.
02:58 - However, in p5,
we're going to see
03:00 - that that's written out with
the letters PI both in capitals.
03:05 - The value of pi is 3.14159
and so on and so forth.
03:10 - It's an irrational number.
03:11 - Probably the most famous
number in mathematics
03:14 - because the decimal
places go on forever
03:17 - with no repeating pattern.
03:19 - 360 degrees is 2pi, 2 times pi,
or if we were doing this in p5,
03:26 - it would be written out
as the constant 2_PI.
03:31 - So where does this
number come from?
03:33 - Why do we care about it so much?
03:34 - And why is this unit of
measurement called radians?
03:37 - Well, it all goes back to
this particular diagram.
03:41 - If I were to draw what is
known as a unit circle,
03:45 - meaning a circle where
the radius is of length 1,
03:49 - and if I were to take
a string and wrap it
03:52 - around the circumference,
the perimeter of that circle
03:55 - and then unfurl that
string and measure it,
04:00 - its length would be 2pi.
04:03 - So if it were 1 meter, if
the radius was 1 meter,
04:09 - the length or the
circumference of the circle
04:11 - would be 2pi meters.
04:13 - Pi is the value of the
ratio of the circumference
04:18 - of a circle, the length of the
perimeter of a circle divided
04:22 - by its diameter because in this
case, the diameter would be 2
04:27 - and the length of the
full circle is 2pi.
04:31 - If I wanted to think about
what 90 degrees is in pi,
04:36 - 90 degrees is, well,
pi divided by 2.
04:39 - It's the length of this much of
the arc of the circle itself.
04:43 - So this is why pi
is so important.
04:45 - It's fundamental to
the study of geometry,
04:48 - of how we look at and define
circles, of how we look at
04:51 - and define the angles
of right triangles,
04:54 - and so much more
that we're going
04:55 - to need as I build
all these examples
04:57 - throughout this
chapter in p5.js.
05:00 - So where do I want to
begin though with this?
05:02 - I want to just go back
to this idea of rotation.
05:04 - We want to rotate by an angle.
05:06 - We could maybe do
that in degrees.
05:08 - We could maybe do
that in radians.
05:10 - Let's look at both of those
things in code itself.
05:13 - So here, I have a very simple
p5.js sketch that's doing just
05:17 - one thing--
05:17 - drawing a rectangle in
the center of the canvas.
05:21 - So presumably, I could
do something like say,
05:23 - hey, rotate that rectangle by
90 degrees and rerun the sketch.
05:29 - And I'm going to
put auto refresh on
05:30 - so that it constantly updates.
05:32 - So first of all,
it's completely gone.
05:34 - What happened here?
05:35 - So I'm not going to get
into this aspect of it
05:38 - in full detail in this video.
05:39 - I have a whole separate video
about transformations in p5.js.
05:43 - But when I'm working
with rotation,
05:45 - I need to be conscientious
not just about the angle
05:48 - that I want to
rotate something by.
05:49 - But around what
point of origin do I
05:51 - want to rotate the thing about?
05:53 - So I want this rectangle to
rotate around its center.
05:56 - I'm going to need to use
the translate function.
05:58 - And if you've never
used translate before,
06:00 - again, I'll refer you
to that other video that
06:02 - explains this in more detail.
06:05 - Once I've translated
to 200, 200,
06:07 - I need to then draw
the rectangle at 0,
06:09 - 0 because the origin
point is now at 200, 200.
06:13 - And then I'm rotated
by 90 degrees.
06:15 - That doesn't look
like 90 degrees.
06:18 - If the rectangle is
like this at 0 degrees,
06:21 - then it should be perfectly
vertical at 90 degrees.
06:25 - Well, the reason is is,
natively, the computer,
06:28 - the JavaScript, p5.js, whoever
is reading our instructions
06:32 - is thinking in terms of radians.
06:34 - It's not a person.
06:35 - There's no person
reading the instructions.
06:36 - If I do want to work with a
unit of measurement degrees
06:39 - in my code, then in set up, I
can change the mode of p5.js
06:43 - to angleMode(DEGREES).
06:45 - And once I've done
that, you can see
06:47 - I now have this rectangle
rotated perfectly
06:50 - by 90 degrees.
06:51 - And there might be some
reasons why, I mean,
06:53 - I can think of actually a
really convenient reason
06:55 - to do this right now.
06:57 - What if I were to make
a variable called angle,
07:00 - set it to 0, put angle inside
of the rotate function,
07:06 - and then say, OK, every frame
30 frames per second, I'm
07:09 - going to rotate 1 degree?
07:13 - Now I have a spinning rectangle.
07:15 - So this is reason number
one maybe to use degrees.
07:19 - It might be a little bit more
intuitive to sort of think
07:21 - about relative measurements in
terms of animation and location
07:26 - in a canvas.
07:27 - However, from this
point on, I am just
07:29 - going to make the
decision to use radians.
07:31 - I feel like here we are in the
middle of this nature of code
07:33 - playlist.
07:34 - It's a perfectly
appropriate time
07:36 - to practice thinking
and programming
07:38 - graphics with radians.
07:39 - It will translate to
other environments
07:41 - that don't have this option
of angleMode(DEGREES).
07:43 - And there may also be
some benefits otherwise
07:46 - to keeping things in
radians for other examples
07:49 - that will come in the future
that we may or may not see.
07:52 - I think there will be though.
07:52 - I think there will.
07:53 - So let me comment--
07:55 - let me change this now
to angleMode(RADIANS).
07:59 - And you can see like,
whoa, this makes sense.
08:02 - It's spinning super, super
fast because if instead of one
08:06 - full rotation being 360
degrees, one full rotation
08:10 - is about 6.28.
08:13 - Is that right?
08:14 - Something.
08:15 - What's that number called again?
08:16 - Tau.
08:18 - So there's actually
a whole other--
08:19 - we could go off on a very
long tangent about whether we
08:22 - should be using pi or tau.
08:23 - But tau is a Greek letter
that's commonly used
08:26 - to stand in for 2pi radians.
08:29 - The point is 1
radian is almost 1/6
08:34 - all the way around a circle.
08:35 - So we're going to get
there in six frames, which
08:37 - is really fast in terms of the
30 frames per second animation.
08:40 - So if I'm using
radians, I might want
08:42 - to use a smaller number like
maybe I'm going to say 0.05.
08:48 - And we can see this
maps a little bit more
08:50 - closely to what I had before.
08:53 - Smaller numbers for working
with angle in radians.
08:57 - Before I move on
to the next video
08:59 - where I want to look more
formally at angular motion,
09:03 - I just want to point out one
important sort of tidbit here.
09:06 - Look at how this
rectangle is rotating.
09:09 - It's rotating in a
clockwise direction.
09:12 - Why is that?
09:13 - And is that what you
expected it to be?
09:18 - After all, I have been
drawing my diagrams
09:20 - over here like this.
09:22 - Oh, this angle is 45 degrees.
09:25 - So if I had a rectangle
and rotated by 45 degrees,
09:31 - I should see it
rotate like that.
09:32 - But in p5, it rotated
the other way.
09:37 - It rotated this way.
09:38 - It rotated down
positive 45 degrees
09:41 - or positive pi divided by 4.
09:44 - That's what that would be.
09:45 - If pi is 180, pi
divided by 2 is 90.
09:49 - Pi divided by 4 is 45 degrees.
09:51 - Went this way.
09:51 - So why is that?
09:52 - Well, it has to do with
the fact that, once again,
09:55 - in a sort of like a mathematical
diagram of a Cartesian plane,
09:59 - the y-axis points upwards.
10:01 - 0, 1, 2, 3, 4, 5.
10:03 - But in a computer
graphics window,
10:06 - even though I've translated
0, 0 to be in the center,
10:09 - the positive direction
is still down.
10:11 - So I could do things like
use the scale function
10:14 - to sort of flip the
y-axis and kind of get
10:16 - into all sorts of
wonkiness there.
10:18 - But I think I'm going
to keep our world still,
10:21 - point it in the traditional
computer graphics way-- down--
10:25 - in which case a positive angle
is, by definition, moving
10:29 - in the clockwise direction.
10:31 - So if you're looking
for an exercise
10:33 - to do at the end of
this video, which
10:34 - I am going to tackle
immediately in the next one,
10:37 - what would it mean to have
this rectangle speed up
10:39 - as it is rotating, slow
down as it is rotating?
10:42 - Could I create an example of,
say, a Wheel of Fortune wheel
10:46 - that I spin and,
slowly over time,
10:48 - it's slowing, slowing
down and coming to a stop?
10:50 - How would I deal with
the mechanics of motion
10:52 - when we're talking
about angular motion?
10:55 - Spinning and
rotating, that's what
10:56 - I'm going to look at
in the next video.
10:58 - [MUSIC PLAYING]

Cleaned transcript:

Hello, and welcome to chapter 3 of the nature of code. The title of this chapter is Oscillating Motion. And that's where I want to get to. What does it mean to model a swinging pendulum to the plucking of a guitar string, waveforms? How do we model and visualize all of those in code in p5.js? But before I can get to those examples, I need to build up the building blocks of the tools and knowledge that we'll need to make those. So the starting point is really trigonometry. I need to look at the trigonometric functions sine, cosine, tangent. You might have heard of those. You might be studying them now. You might have studied them many, many years ago. I'm going to review all of those. But before I can even get to that, I just want to talk about the concept of an angle. In trigonometry, the idea of an angle is often found in what's known as a right triangle, a right triangle being a triangle where one of the angles is 90 degrees. And then we might be looking at this particular angle of the triangle and evaluating it for some purpose. We are also going to see that angles are really fundamental to the way that we describe the path, the perimeter, the circumference of a circle. So let's say I have a circle like this. And the radius is defined as the distance between the center to the edge of the circle. I might look at a given point on that circle based on the angle relative to this horizontal axis. So the question becomes, what are the units of measurement for an angle? And what can I do with angles in p5.js? The starting point of what I want to look at in p5.js is rotation based on an angle. 90 degrees is a right angle. Looking back at the circle, you might think about, oh, 360 degrees of full rotation all the way around a circle. That's 360 degrees. Half way across, this angle is 180 degrees. So these are common measurements in the unit of degrees. Most computer graphics systems, however, do not work with measurements in degrees. They work with measurements in a unit known as radians. Now p5 will actually let you work with either degrees or radians, and I will show you how to make that designation. But I think it's really useful for us to practice, thinking, and working in radians. There will be some conveniences for that in future examples. And it will reveal the beauty and wonderfulness of this magic number so to speak pi. So first, let's look at some common angles and their corresponding measurement in radians. 0 degrees is 0 radians. 180 degrees is pi radians. And I'm using the Greek letter pi to indicate the value of pi. However, in p5, we're going to see that that's written out with the letters PI both in capitals. The value of pi is 3.14159 and so on and so forth. It's an irrational number. Probably the most famous number in mathematics because the decimal places go on forever with no repeating pattern. 360 degrees is 2pi, 2 times pi, or if we were doing this in p5, it would be written out as the constant 2_PI. So where does this number come from? Why do we care about it so much? And why is this unit of measurement called radians? Well, it all goes back to this particular diagram. If I were to draw what is known as a unit circle, meaning a circle where the radius is of length 1, and if I were to take a string and wrap it around the circumference, the perimeter of that circle and then unfurl that string and measure it, its length would be 2pi. So if it were 1 meter, if the radius was 1 meter, the length or the circumference of the circle would be 2pi meters. Pi is the value of the ratio of the circumference of a circle, the length of the perimeter of a circle divided by its diameter because in this case, the diameter would be 2 and the length of the full circle is 2pi. If I wanted to think about what 90 degrees is in pi, 90 degrees is, well, pi divided by 2. It's the length of this much of the arc of the circle itself. So this is why pi is so important. It's fundamental to the study of geometry, of how we look at and define circles, of how we look at and define the angles of right triangles, and so much more that we're going to need as I build all these examples throughout this chapter in p5.js. So where do I want to begin though with this? I want to just go back to this idea of rotation. We want to rotate by an angle. We could maybe do that in degrees. We could maybe do that in radians. Let's look at both of those things in code itself. So here, I have a very simple p5.js sketch that's doing just one thing drawing a rectangle in the center of the canvas. So presumably, I could do something like say, hey, rotate that rectangle by 90 degrees and rerun the sketch. And I'm going to put auto refresh on so that it constantly updates. So first of all, it's completely gone. What happened here? So I'm not going to get into this aspect of it in full detail in this video. I have a whole separate video about transformations in p5.js. But when I'm working with rotation, I need to be conscientious not just about the angle that I want to rotate something by. But around what point of origin do I want to rotate the thing about? So I want this rectangle to rotate around its center. I'm going to need to use the translate function. And if you've never used translate before, again, I'll refer you to that other video that explains this in more detail. Once I've translated to 200, 200, I need to then draw the rectangle at 0, 0 because the origin point is now at 200, 200. And then I'm rotated by 90 degrees. That doesn't look like 90 degrees. If the rectangle is like this at 0 degrees, then it should be perfectly vertical at 90 degrees. Well, the reason is is, natively, the computer, the JavaScript, p5.js, whoever is reading our instructions is thinking in terms of radians. It's not a person. There's no person reading the instructions. If I do want to work with a unit of measurement degrees in my code, then in set up, I can change the mode of p5.js to angleMode(DEGREES). And once I've done that, you can see I now have this rectangle rotated perfectly by 90 degrees. And there might be some reasons why, I mean, I can think of actually a really convenient reason to do this right now. What if I were to make a variable called angle, set it to 0, put angle inside of the rotate function, and then say, OK, every frame 30 frames per second, I'm going to rotate 1 degree? Now I have a spinning rectangle. So this is reason number one maybe to use degrees. It might be a little bit more intuitive to sort of think about relative measurements in terms of animation and location in a canvas. However, from this point on, I am just going to make the decision to use radians. I feel like here we are in the middle of this nature of code playlist. It's a perfectly appropriate time to practice thinking and programming graphics with radians. It will translate to other environments that don't have this option of angleMode(DEGREES). And there may also be some benefits otherwise to keeping things in radians for other examples that will come in the future that we may or may not see. I think there will be though. I think there will. So let me comment let me change this now to angleMode(RADIANS). And you can see like, whoa, this makes sense. It's spinning super, super fast because if instead of one full rotation being 360 degrees, one full rotation is about 6.28. Is that right? Something. What's that number called again? Tau. So there's actually a whole other we could go off on a very long tangent about whether we should be using pi or tau. But tau is a Greek letter that's commonly used to stand in for 2pi radians. The point is 1 radian is almost 1/6 all the way around a circle. So we're going to get there in six frames, which is really fast in terms of the 30 frames per second animation. So if I'm using radians, I might want to use a smaller number like maybe I'm going to say 0.05. And we can see this maps a little bit more closely to what I had before. Smaller numbers for working with angle in radians. Before I move on to the next video where I want to look more formally at angular motion, I just want to point out one important sort of tidbit here. Look at how this rectangle is rotating. It's rotating in a clockwise direction. Why is that? And is that what you expected it to be? After all, I have been drawing my diagrams over here like this. Oh, this angle is 45 degrees. So if I had a rectangle and rotated by 45 degrees, I should see it rotate like that. But in p5, it rotated the other way. It rotated this way. It rotated down positive 45 degrees or positive pi divided by 4. That's what that would be. If pi is 180, pi divided by 2 is 90. Pi divided by 4 is 45 degrees. Went this way. So why is that? Well, it has to do with the fact that, once again, in a sort of like a mathematical diagram of a Cartesian plane, the yaxis points upwards. 0, 1, 2, 3, 4, 5. But in a computer graphics window, even though I've translated 0, 0 to be in the center, the positive direction is still down. So I could do things like use the scale function to sort of flip the yaxis and kind of get into all sorts of wonkiness there. But I think I'm going to keep our world still, point it in the traditional computer graphics way down in which case a positive angle is, by definition, moving in the clockwise direction. So if you're looking for an exercise to do at the end of this video, which I am going to tackle immediately in the next one, what would it mean to have this rectangle speed up as it is rotating, slow down as it is rotating? Could I create an example of, say, a Wheel of Fortune wheel that I spin and, slowly over time, it's slowing, slowing down and coming to a stop? How would I deal with the mechanics of motion when we're talking about angular motion? Spinning and rotating, that's what I'm going to look at in the next video. [MUSIC PLAYING]
