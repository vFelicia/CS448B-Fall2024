With timestamps:

00:00 - Here I am in San Francisco, at
this latitude and longitude,
00:04 - with a temperature
of around 54 degrees
00:06 - Fahrenheit and some
particulate matter in the air.
00:09 - That was last recorded
just yesterday.
00:11 - Oh, excellent.
00:12 - So this is a pretty
recent air quality rating.
00:14 - So this is where The Weather
Here project is right now.
00:16 - And what I want to do
in this video is now,
00:20 - every time I press
this Check In button,
00:22 - save all of this
information into a database
00:25 - so that I could go onto
a View Checkins page--
00:29 - there's nothing
there right now--
00:30 - and see all of the
records, everything
00:33 - that I've ever saved in the
database, plotted on a map.
00:36 - I'm realizing, however, that
this button that I have here
00:39 - is kind of useless.
00:40 - I have this Check In link
and the View Checkins page,
00:44 - so every time I go
back to check in,
00:46 - it's reloading my current
latitude and longitude
00:48 - and checking me in.
00:49 - I could have that happen
in a separate button.
00:51 - This is really an
interaction design question.
00:53 - So I'm not going to pretend to
get into good user experience
00:58 - or interaction
design in this video.
01:00 - I just want the
functionality to work.
01:02 - So I think to
simplify, I'm going
01:03 - to get rid of this
button, and just have--
01:05 - whenever the page loads--
01:07 - have the information logged
into the database itself.
01:10 - And then if I want to
relog in to the database,
01:12 - I can always just click
this Check In link, which
01:16 - will then refresh the page.
01:17 - And this is going to
simplify a lot of things.
01:19 - So I'm going to move
and remove this button.
01:21 - So if I go back
here, we can see--
01:22 - OK the button is gone.
01:24 - Now I have this
addEventListener missing.
01:26 - So I can go back to my code.
01:28 - And ultimately,
all of this stuff
01:30 - that's happening right here,
when I click the button,
01:35 - is POSTing to the database.
01:36 - And what I want to do?
01:38 - I want that to
happen right here.
01:42 - So I want to send
everything to the database
01:44 - right here, after I've
finished all of my API calls.
01:48 - And I can paste
that in right here.
01:51 - And what I actually want
to put in the database
01:53 - is the latitude, the
longitude, the weather,
01:58 - and the air quality.
02:00 - So this now would
take all of that data,
02:01 - and send it back to the server,
and save it into the database.
02:05 - This is functionality
that we already
02:07 - built in the previous
Data Selfie App project.
02:11 - There is a little bit of
an irony here, I suppose.
02:13 - I request the data from Dark
Sky and OpenAQ on the server,
02:18 - send it to the client to
display on the web page,
02:20 - and then send it
back to the server
02:22 - to put it in the database.
02:23 - I probably could bypass
that and actually just
02:26 - have it go into the
database itself--
02:30 - right here, when I'm actually
requesting that weather
02:33 - information at that
latitude and longitude.
02:35 - But I really wanted to keep
things modular and organized
02:39 - and have a completely
separate route--
02:41 - this POST route that puts
stuff into the database.
02:44 - This is arguably a
better way at least
02:48 - to demonstrate how to do this in
larger, more scalable projects,
02:51 - even though it doesn't
really matter here that much.
02:53 - So going back into sketch.js,
I can see I'm now--
02:56 - have this thing
entering the database.
02:58 - And what I'm going to do is
I'm going to refresh this page.
03:02 - Response has already
been declared.
03:05 - So once again, I'm kind of
using the sequence of API, URL,
03:08 - response, JSON.
03:09 - And I've got that down here--
03:11 - response, JSON.
03:12 - So let's call this
db_response, db_json.
03:18 - And we'll put this here.
03:21 - And then, just to
see that, let's
03:23 - console.log the db_json to see
that it went into the database.
03:26 - And here we go.
03:28 - Hit refresh.
03:29 - OK, so this is what was saved
in the database-- all the data--
03:32 - and it's displayed here.
03:33 - I can go to View Checkins
and we can see-- there it is.
03:36 - There's nothing on
the web page here.
03:38 - It's just console.log-ing
what's in the database.
03:40 - And I can go back to check
in again, and check in again,
03:42 - and I can switch my location
to Moscow, and check in again,
03:46 - and check in again, and switch
my location back to Berlin,
03:49 - and check in again.
03:52 - And now, if I go
to View Checkins,
03:54 - we will see there are six
entries into the database
03:56 - at all these different
latitudes and longitudes
03:58 - with this weather
and air quality.
04:00 - And if I go look at my
actual database file,
04:03 - I can see everything is here
in the database file, as well.
04:06 - One quick thing
before I start to look
04:08 - at plotting the
checkins themselves
04:10 - is, you'll notice that
the default from Dark Sky
04:12 - is to get the temperature
reading back in Fahrenheit.
04:15 - This can be changed.
04:17 - If I actually look at
the API documentation,
04:19 - there's a little
section on units here.
04:21 - I can add a URL query
string property,
04:24 - units equals something,
to specify the units.
04:26 - And SI units-- or
international system units,
04:28 - which is typically Kelvin--
04:30 - but that would come back--
04:31 - SI units would come
back in Celsius.
04:33 - So I could go to
the server where
04:35 - I'm making my
request to Dark Sky,
04:38 - I could add a slash and then a
question mark for a URL query
04:41 - string, and then
say units equals SI.
04:44 - And then, of
course, I would want
04:46 - to update my index.html
page, accordingly,
04:49 - which is right over here.
04:50 - And change that to a C. And
then go back and hit Refresh.
04:55 - And there we go.
04:56 - I've got Celsius.
04:57 - So I just wanted to make sure
I showed that to you before we
04:59 - go on to the next step
of plotting everything
05:02 - from the database.
05:03 - Moving on to View Checkins,
what I'm going to go do first is
05:05 - just grab my code-- my
Leaflet.js example code--
05:08 - from the International
Space Station
05:10 - project so that I can start
with a map on this page.
05:12 - [MUSIC PLAYING]
05:16 - I'm back, and I've added a map
to the page using Leaflet.js.
05:19 - So the only things I pulled from
my International Space station
05:21 - examples are the URLs for the
leaflet.css and leaflet.js
05:27 - files, and then a div
for the checkin map--
05:30 - I'm calling it checkinMap--
and then in logs.js, I just
05:34 - have a little bit of
code to specify the tiles
05:36 - from OpenStreetMap and place
the map at with a zoom level
05:41 - one, latitude longitude zero,
zero, right there on the page.
05:45 - The data from the
database has been
05:46 - loaded with the getData
function by making a fetch call
05:49 - to the API endpoint.
05:51 - And we can see here
in the browser,
05:53 - these are seven checkins at
seven different latitudes
05:56 - and longitudes, along
with the weather
05:59 - and, presumably, also
the associated air
06:01 - quality information.
06:03 - So now, what I want to
do on this checkins page
06:06 - is see all those
points on the map.
06:08 - Now, while it might be fun
to draw some kind of path
06:11 - from checkin to checkin or
some kind of custom drawing
06:13 - on top of the map,
I'm just going
06:14 - to do, for simplicity's
sake, the same thing I
06:16 - did in the International
Space Station example,
06:18 - and place each checkin
as a marker on the map.
06:21 - So if I go to the
Leaflet documentation,
06:23 - I can grab this marker
code, go back to my code.
06:27 - And here is the
for loop where I'm
06:28 - going through every
element from the database.
06:30 - So I've gotten the data
from the database and I
06:34 - can set a marker to data dot--
06:39 - oh, item, sorry.
06:40 - It's item dot
latitude comma item
06:42 - dot longitude, and add it to--
06:45 - what did I just
call it?-- mymap.
06:48 - So there we go.
06:49 - Now, if I go back to the page
here, we see-- there we go.
06:52 - I've got a marker at
every one of my checkins,
06:55 - and I can zoom and find it.
06:57 - Now, if I click on the checkin
or if I hover over the checkin,
07:00 - nothing happens.
07:01 - So the only last thing
that I want to do
07:03 - is place some text over the
checkin that has the weather
07:09 - and air quality information.
07:10 - I've basically
done this already,
07:12 - so I'm just going to repurpose
the code that I had before.
07:16 - I'm going to switch over and
find that index.html page which
07:18 - has this text.
07:19 - I'm going to grab it all.
07:21 - I'm going to bring it
over here to my logs file,
07:24 - and I'm going to
say const text--
07:30 - So I'll just call it txt--
07:31 - equals-- and I'm going
to use a string literal.
07:35 - And now, these were all spans,
but what I'm going to do
07:38 - is just pull the
data that I want.
07:40 - So here, I want to have item dot
latitude, item dot longitude,
07:52 - and then now, I just
want weather dot summary.
07:57 - And I'm going to
finish this off.
07:59 - [MUSIC PLAYING]
08:01 - All right.
08:02 - I have now typed all of this in.
08:04 - I've got a long block of text--
a narrative, so to speak.
08:08 - With my text, the
weather here is,
08:10 - and then I'm
pulling bits of data
08:12 - from each element of
the array of information
08:14 - I got from the database.
08:15 - So for each item
in the data array,
08:18 - I get the item's latitude, the
item's longitude, the item's
08:21 - whether summary, the item's
whether temperature-- all
08:23 - this stuff.
08:23 - This is the way that
I've organized it.
08:25 - And then what I should be doing
is saying, take that marker,
08:32 - put it in a variable, and
then say, marker bindPopup.
08:36 - This is a function that's
part of Leaflet.js where
08:39 - I can bind some text to
a popup any time I hover
08:42 - or click on a marker.
08:44 - Bind that text.
08:45 - We can go see,
now, if this works.
08:46 - Go over the browser.
08:47 - Hit Refresh.
08:48 - And there we go.
08:49 - We see all of the markers
for all of my checkins.
08:51 - And if I click on any of
them, look, there we go.
08:53 - I've got the information about
the weather and air quality
08:56 - at that time of checkin.
08:58 - All right, let's add
one more checkin.
09:00 - So I'm spoofing this location,
which is Rainbow street,
09:03 - in Jordan.
09:05 - And I'm going to hit Check In.
09:07 - And then-- oh, no, there's
no measurements there.
09:10 - So I would like to still put
the checkin in the database,
09:15 - even with no reading,
and then have
09:16 - that be a pop up that just
says, no air quality reading.
09:20 - I just really-- I want
Rainbow street in my database.
09:23 - So right now, I don't think--
09:25 - I think if I go back
to my code, we'll
09:26 - see, here, that if the
error happens and there's
09:29 - no reading available, I
don't add to the database.
09:33 - So let's think about
how to handle this.
09:37 - I am going to make
these variables--
09:41 - let lat, long,
weather, and air all
09:46 - be variables before the try.
09:50 - Then I'm going to set lat,
long, whether, and air.
10:01 - And then I'll take this, where
I POST it to the database,
10:05 - and I will have that
happen after the try catch.
10:08 - So no matter what, the air will
be entered into the database.
10:14 - But if there is no
reading, what I'm
10:18 - going to do is I'm going to
say, air equals an object
10:21 - with value of negative 1.
10:23 - So I'm going to hard code
something into the database,
10:26 - if there is no reading, with
this value of negative 1.
10:30 - And that will get POSTed
into the database.
10:32 - So now, I could go
back to my checkin.
10:37 - I'm going to check in
again on Rainbow street
10:40 - in Amman, Jordan.
10:41 - That got entered
into the database.
10:43 - Now I can go to
the View Checkins,
10:45 - but I've got to check now--
10:47 - I've got to go to my logs
code and if item dot air
10:56 - dot value is less than zero--
10:58 - so it gets a negative reading--
11:00 - I want my text to be different.
11:04 - So we're going to start with
the weather information.
11:08 - Everything's going to
have weather information.
11:12 - Then I'm going to say, if it's
negative I'm going to do txt
11:15 - plus equal " No air quality
reading.", with a space.
11:22 - Otherwise, I'm going to add
the particulate information
11:30 - with a string literal.
11:33 - And this should come up here.
11:35 - OK, I'm good.
11:36 - So this is a little
bit convoluted,
11:37 - and maybe there's a nice way
to make this more elegant.
11:40 - But I'm creating the marker,
I'm putting the weather text in.
11:43 - If the what comes
back from the database
11:44 - is a negative 1
for the air value,
11:46 - that means there's no
air quality reading.
11:48 - Otherwise, I put the actual air
quality reading in the text.
11:51 - So let's see now, if
we view the checkins,
11:53 - if we have Rainbow street
in Amman, Jordan with no air
11:56 - quality reading.
11:58 - View Checkins-- oh
assignment to const variable.
12:02 - Oh, so this can't be a cont.
12:04 - It's got to be let
because I'm adjusting it.
12:07 - Let's hit Refresh.
12:08 - View Checkins.
12:10 - And there-- look,
this looks like--
12:13 - no air quality reading for
Amman, Jordan, right there.
12:17 - This project is
completed, sort of.
12:19 - There's a lot more
that you could do.
12:20 - First of all, I haven't
really taken the time
12:22 - to think about visual design
or interaction design.
12:25 - You might take a
look, once again,
12:27 - at Joey Lee's version
of the project that
12:28 - has a lot more design
elements to it.
12:30 - You might think about,
well, how is the map?
12:32 - Where's the zoom happening?
12:34 - There are so many different
ways you could draw on the map.
12:36 - Maybe you can have a
path between checkins.
12:38 - Think about animating.
12:39 - You can rewrite the text to
have more poetic language.
12:42 - There are a lot
of possibilities.
12:43 - You could even just--
there's a lot more data
12:45 - in there from the weather and
air quality API than I'm using.
12:50 - So I'm going to let you
take this project further
12:53 - in those directions, but I want
to show two really important
12:57 - things in two separate videos.
12:59 - Number one is, if I went to
open source this, which I do,
13:03 - how can I open source this and
publish the code without my API
13:06 - key?
13:07 - Without just sort of having
to delete my API key?
13:09 - What is a way to deploy
a project, separating out
13:13 - secret keys that you
want to be hidden,
13:15 - separate from the source code?
13:16 - So I'm going to show you how
to do that with something
13:18 - called an environment variable.
13:19 - That will come in
the next video.
13:21 - And then the last
piece that I'm going
13:23 - to show you, in
the final video, is
13:24 - had actually take this project
and deploy it onto the web.
13:27 - So I'm going to look at,
maybe, a few different options
13:29 - for doing that,
and just pick one
13:31 - that you can follow along and
have your project live online.
13:34 - So thanks so much, and
see you in the next video.
13:36 - [BELL RINGS]
13:37 - [MUSIC PLAYING]

Cleaned transcript:

Here I am in San Francisco, at this latitude and longitude, with a temperature of around 54 degrees Fahrenheit and some particulate matter in the air. That was last recorded just yesterday. Oh, excellent. So this is a pretty recent air quality rating. So this is where The Weather Here project is right now. And what I want to do in this video is now, every time I press this Check In button, save all of this information into a database so that I could go onto a View Checkins page there's nothing there right now and see all of the records, everything that I've ever saved in the database, plotted on a map. I'm realizing, however, that this button that I have here is kind of useless. I have this Check In link and the View Checkins page, so every time I go back to check in, it's reloading my current latitude and longitude and checking me in. I could have that happen in a separate button. This is really an interaction design question. So I'm not going to pretend to get into good user experience or interaction design in this video. I just want the functionality to work. So I think to simplify, I'm going to get rid of this button, and just have whenever the page loads have the information logged into the database itself. And then if I want to relog in to the database, I can always just click this Check In link, which will then refresh the page. And this is going to simplify a lot of things. So I'm going to move and remove this button. So if I go back here, we can see OK the button is gone. Now I have this addEventListener missing. So I can go back to my code. And ultimately, all of this stuff that's happening right here, when I click the button, is POSTing to the database. And what I want to do? I want that to happen right here. So I want to send everything to the database right here, after I've finished all of my API calls. And I can paste that in right here. And what I actually want to put in the database is the latitude, the longitude, the weather, and the air quality. So this now would take all of that data, and send it back to the server, and save it into the database. This is functionality that we already built in the previous Data Selfie App project. There is a little bit of an irony here, I suppose. I request the data from Dark Sky and OpenAQ on the server, send it to the client to display on the web page, and then send it back to the server to put it in the database. I probably could bypass that and actually just have it go into the database itself right here, when I'm actually requesting that weather information at that latitude and longitude. But I really wanted to keep things modular and organized and have a completely separate route this POST route that puts stuff into the database. This is arguably a better way at least to demonstrate how to do this in larger, more scalable projects, even though it doesn't really matter here that much. So going back into sketch.js, I can see I'm now have this thing entering the database. And what I'm going to do is I'm going to refresh this page. Response has already been declared. So once again, I'm kind of using the sequence of API, URL, response, JSON. And I've got that down here response, JSON. So let's call this db_response, db_json. And we'll put this here. And then, just to see that, let's console.log the db_json to see that it went into the database. And here we go. Hit refresh. OK, so this is what was saved in the database all the data and it's displayed here. I can go to View Checkins and we can see there it is. There's nothing on the web page here. It's just console.loging what's in the database. And I can go back to check in again, and check in again, and I can switch my location to Moscow, and check in again, and check in again, and switch my location back to Berlin, and check in again. And now, if I go to View Checkins, we will see there are six entries into the database at all these different latitudes and longitudes with this weather and air quality. And if I go look at my actual database file, I can see everything is here in the database file, as well. One quick thing before I start to look at plotting the checkins themselves is, you'll notice that the default from Dark Sky is to get the temperature reading back in Fahrenheit. This can be changed. If I actually look at the API documentation, there's a little section on units here. I can add a URL query string property, units equals something, to specify the units. And SI units or international system units, which is typically Kelvin but that would come back SI units would come back in Celsius. So I could go to the server where I'm making my request to Dark Sky, I could add a slash and then a question mark for a URL query string, and then say units equals SI. And then, of course, I would want to update my index.html page, accordingly, which is right over here. And change that to a C. And then go back and hit Refresh. And there we go. I've got Celsius. So I just wanted to make sure I showed that to you before we go on to the next step of plotting everything from the database. Moving on to View Checkins, what I'm going to go do first is just grab my code my Leaflet.js example code from the International Space Station project so that I can start with a map on this page. [MUSIC PLAYING] I'm back, and I've added a map to the page using Leaflet.js. So the only things I pulled from my International Space station examples are the URLs for the leaflet.css and leaflet.js files, and then a div for the checkin map I'm calling it checkinMap and then in logs.js, I just have a little bit of code to specify the tiles from OpenStreetMap and place the map at with a zoom level one, latitude longitude zero, zero, right there on the page. The data from the database has been loaded with the getData function by making a fetch call to the API endpoint. And we can see here in the browser, these are seven checkins at seven different latitudes and longitudes, along with the weather and, presumably, also the associated air quality information. So now, what I want to do on this checkins page is see all those points on the map. Now, while it might be fun to draw some kind of path from checkin to checkin or some kind of custom drawing on top of the map, I'm just going to do, for simplicity's sake, the same thing I did in the International Space Station example, and place each checkin as a marker on the map. So if I go to the Leaflet documentation, I can grab this marker code, go back to my code. And here is the for loop where I'm going through every element from the database. So I've gotten the data from the database and I can set a marker to data dot oh, item, sorry. It's item dot latitude comma item dot longitude, and add it to what did I just call it? mymap. So there we go. Now, if I go back to the page here, we see there we go. I've got a marker at every one of my checkins, and I can zoom and find it. Now, if I click on the checkin or if I hover over the checkin, nothing happens. So the only last thing that I want to do is place some text over the checkin that has the weather and air quality information. I've basically done this already, so I'm just going to repurpose the code that I had before. I'm going to switch over and find that index.html page which has this text. I'm going to grab it all. I'm going to bring it over here to my logs file, and I'm going to say const text So I'll just call it txt equals and I'm going to use a string literal. And now, these were all spans, but what I'm going to do is just pull the data that I want. So here, I want to have item dot latitude, item dot longitude, and then now, I just want weather dot summary. And I'm going to finish this off. [MUSIC PLAYING] All right. I have now typed all of this in. I've got a long block of text a narrative, so to speak. With my text, the weather here is, and then I'm pulling bits of data from each element of the array of information I got from the database. So for each item in the data array, I get the item's latitude, the item's longitude, the item's whether summary, the item's whether temperature all this stuff. This is the way that I've organized it. And then what I should be doing is saying, take that marker, put it in a variable, and then say, marker bindPopup. This is a function that's part of Leaflet.js where I can bind some text to a popup any time I hover or click on a marker. Bind that text. We can go see, now, if this works. Go over the browser. Hit Refresh. And there we go. We see all of the markers for all of my checkins. And if I click on any of them, look, there we go. I've got the information about the weather and air quality at that time of checkin. All right, let's add one more checkin. So I'm spoofing this location, which is Rainbow street, in Jordan. And I'm going to hit Check In. And then oh, no, there's no measurements there. So I would like to still put the checkin in the database, even with no reading, and then have that be a pop up that just says, no air quality reading. I just really I want Rainbow street in my database. So right now, I don't think I think if I go back to my code, we'll see, here, that if the error happens and there's no reading available, I don't add to the database. So let's think about how to handle this. I am going to make these variables let lat, long, weather, and air all be variables before the try. Then I'm going to set lat, long, whether, and air. And then I'll take this, where I POST it to the database, and I will have that happen after the try catch. So no matter what, the air will be entered into the database. But if there is no reading, what I'm going to do is I'm going to say, air equals an object with value of negative 1. So I'm going to hard code something into the database, if there is no reading, with this value of negative 1. And that will get POSTed into the database. So now, I could go back to my checkin. I'm going to check in again on Rainbow street in Amman, Jordan. That got entered into the database. Now I can go to the View Checkins, but I've got to check now I've got to go to my logs code and if item dot air dot value is less than zero so it gets a negative reading I want my text to be different. So we're going to start with the weather information. Everything's going to have weather information. Then I'm going to say, if it's negative I'm going to do txt plus equal " No air quality reading.", with a space. Otherwise, I'm going to add the particulate information with a string literal. And this should come up here. OK, I'm good. So this is a little bit convoluted, and maybe there's a nice way to make this more elegant. But I'm creating the marker, I'm putting the weather text in. If the what comes back from the database is a negative 1 for the air value, that means there's no air quality reading. Otherwise, I put the actual air quality reading in the text. So let's see now, if we view the checkins, if we have Rainbow street in Amman, Jordan with no air quality reading. View Checkins oh assignment to const variable. Oh, so this can't be a cont. It's got to be let because I'm adjusting it. Let's hit Refresh. View Checkins. And there look, this looks like no air quality reading for Amman, Jordan, right there. This project is completed, sort of. There's a lot more that you could do. First of all, I haven't really taken the time to think about visual design or interaction design. You might take a look, once again, at Joey Lee's version of the project that has a lot more design elements to it. You might think about, well, how is the map? Where's the zoom happening? There are so many different ways you could draw on the map. Maybe you can have a path between checkins. Think about animating. You can rewrite the text to have more poetic language. There are a lot of possibilities. You could even just there's a lot more data in there from the weather and air quality API than I'm using. So I'm going to let you take this project further in those directions, but I want to show two really important things in two separate videos. Number one is, if I went to open source this, which I do, how can I open source this and publish the code without my API key? Without just sort of having to delete my API key? What is a way to deploy a project, separating out secret keys that you want to be hidden, separate from the source code? So I'm going to show you how to do that with something called an environment variable. That will come in the next video. And then the last piece that I'm going to show you, in the final video, is had actually take this project and deploy it onto the web. So I'm going to look at, maybe, a few different options for doing that, and just pick one that you can follow along and have your project live online. So thanks so much, and see you in the next video. [BELL RINGS] [MUSIC PLAYING]
