With timestamps:

00:00 - glitch there in the video i again i'm
00:02 - having some trouble with youtube live
00:03 - but i am streaming live however
00:05 - if you are watching this as an archived
00:06 - video on youtube not watching this live
00:08 - i would encourage you to check this
00:10 - video's description as there will be
00:11 - links to time codes where uh certain
00:14 - tutorials happen as well as actually
00:15 - links to the edited
00:17 - finished versions of these tutorials
00:18 - which you might just want to go ahead
00:20 - and watch
00:21 - um so uh i please in the chat uh let me
00:24 - know if this
00:25 - is uh working in fact i do see on my
00:28 - preview screen that it it seems to have
00:29 - um
00:30 - it says stream resumed that i am live i
00:32 - should so i should be live on youtube
00:34 - and i should be live on twitch
00:36 - and i should have a screen behind me now
00:39 - i had to
00:40 - unplug and restart and do a bunch of
00:42 - things so a few things are now
00:44 - not set as they normally would be i will
00:46 - set those as i continue but let me
00:48 - first just say hello and introduce
00:49 - myself and begin what and talk about a
00:51 - little bit what's gonna happen
00:52 - in today's uh session ah can you please
00:56 - in the chat tell me that you see me
00:57 - because i don't actually see myself in
00:59 - the preview
01:01 - shoot uh um
01:04 - i'm gonna hit oh i do see myself in the
01:05 - preview now okay great
01:07 - okay so hello my name is dan schiffman
01:09 - um
01:10 - this is my youtube channel uh informally
01:13 - known as
01:14 - uh coding rainbow uh and what i do in
01:17 - this channel is make uh tutorials
01:19 - answer questions about creative code
01:23 - making art with code or just sort of
01:25 - learning how to program
01:27 - in general and the environments that i
01:29 - tend to use most often are
01:30 - behind me over here something called
01:32 - processing which is java based and
01:34 - something called p5 which is javascript
01:36 - based
01:36 - and today what i intend to do is talk
01:40 - through how to simulate a
01:44 - chaotic system known as the lorenz
01:46 - attractor and i'm going to use
01:47 - processing and use 3d in order to do
01:49 - that so that's kind of my main topic
01:50 - today
01:52 - before i get to that um i'm gonna i need
01:55 - to just make
01:55 - set up i kind of screwed up uh my
01:58 - whiteboard
01:59 - uh camera so i have to fix that so i
02:01 - have that accessible
02:03 - um um and then i also wanna see if
02:05 - people have
02:06 - general questions in the chat uh
02:09 - and also i have a online course that
02:11 - launched with a company called cadenza
02:13 - just launched a couple days ago and i
02:16 - said i would answer questions if people
02:17 - had questions about session one
02:19 - which is about random walker and vectors
02:21 - and p5.js
02:22 - and there's actually a really
02:24 - interesting question that came up about
02:26 - on the forums there about the keyword
02:28 - this in javascript it's republic versus
02:30 - private variables maybe i'll
02:31 - talk about that a little bit today
02:33 - because i'm sure you all woke up this
02:34 - morning thinking oh i wish somebody
02:35 - would just turn on a youtube stream
02:37 - and talk about the keyword this in
02:39 - javascript to me
02:41 - uh okay so i'm looking at the chat i
02:44 - don't see
02:45 - okay i see live again okay i see
02:48 - encouraging words in the chat like i'm
02:49 - actually working so i just gotta
02:51 - i need to come over to the computer over
02:52 - here which is my this is where i have
02:55 - a um uh and i need to uh just fix this
02:58 - whiteboard shot so hopefully this
03:00 - is going to be a really quick thing ah
03:02 - that worked and then i need to do one
03:05 - more
03:05 - thing which is uh
03:11 - um source settings i
03:15 - i'm just gonna fix one other thing which
03:17 - is i need to select
03:19 - this button that should have done it
03:22 - brilliant
03:23 - brilliant okay so you see that there
03:24 - whiteboard there you see me here
03:26 - there was one other thing which i needed
03:28 - to make sure i did before i started
03:31 - ah i know what it is um
03:37 - um i'm wearing the same shirt as in the
03:40 - video
03:40 - uh yes and this is my video recording
03:42 - shirt if you
03:43 - notice it i just also want to check my
03:46 - video channel
03:47 - my youtube channel because i i tried to
03:50 - start the stream like three or four
03:51 - times
03:52 - and sometimes it leaves these like stray
03:53 - extra videos on the channel so i'm just
03:55 - looking right now in this laptop
03:58 - under my um video manager to see if
04:01 - there are some by accident
04:03 - uh extra videos like may 5th
04:08 - yeah so these look like i'm going to
04:09 - make these private
04:11 - uh so you don't watch them by accident
04:14 - uh
04:14 - okay yes i understand that i can't undo
04:17 - this
04:18 - and once it started it started okay yes
04:20 - yes submit okay
04:22 - so hopefully uh you're still seeing me
04:23 - live everybody everything going well so
04:25 - the first thing i'd like to ask you guys
04:27 - is and i got to get back to the chat
04:29 - here
04:30 - uh live on twitch yep is um
04:35 - yes so the first question how do you
04:37 - pronounce cadenze
04:39 - i think that's why i've been saying it
04:42 - so
04:42 - uh let me just come up here and say
04:44 - cadenze this is my
04:46 - uh this is my current cadenze course
04:49 - called the nature of code which you can
04:50 - enroll in and watch videos for and i
04:52 - will answer questions about in a moment
04:54 - if people have them in the chat
04:55 - i am pretty sure that the way that you
04:58 - pronounce it is
04:59 - cadenze cadenz a
05:02 - like cadenz and the letter a cadenze
05:04 - cadenze
05:05 - somebody tweet cadenzeofficial on
05:07 - twitter and ask them if i'm pronouncing
05:08 - it correctly
05:10 - um and i've got 26 people live here i
05:15 - you know i i was going to send out an
05:16 - announcement to the course
05:18 - list that i am doing this and i will
05:21 - definitely do i mean the course is going
05:22 - all the way through mid-july
05:24 - so i'm going to do and as in you know as
05:26 - some of the topics get a bit more
05:27 - sophisticated i'm going to do
05:28 - some live sessions just about that week
05:30 - which i think to answer questions and
05:31 - that sort of thing
05:33 - was a little hesitant to use cadenza's
05:35 - email blasting system
05:37 - to announce this because i don't want to
05:39 - i don't want to be spamming people and i
05:41 - don't want to be sort of like
05:42 - look like i'm just like promoting random
05:44 - stuff but um i will think about a
05:46 - thoughtful way to do that
05:47 - um in the future i'm i'm vamping here to
05:49 - see if people ask any questions
05:51 - um put the link to nature of code in the
05:53 - description yes
05:54 - so in fact um um it takes some time but
05:58 - after this video gets uh archived
06:01 - um matia who is uh from canada
06:04 - has been helping me with editing videos
06:06 - and uploading them and writing
06:07 - descriptions he's doing an amazing job
06:10 - and so um usually you know within 24
06:12 - hours
06:13 - he's got the time codes noted down and
06:15 - written into the description so
06:16 - um that's been like a wonderful super
06:19 - helpful because that's
06:20 - one of my i'm very i think that i'm good
06:23 - at turning on record and talking
06:25 - but i'm not so good at that after the
06:26 - fact like keeping things organized so
06:28 - that's
06:28 - that's hopefully going to be help um
06:31 - okay
06:32 - um so all right so
06:35 - um i don't see a lot of questions in the
06:37 - chat right now um
06:39 - i i might check the forum actually it
06:41 - would be sort of fun to just check the
06:42 - forum right now
06:43 - here live and see if there's any
06:45 - questions there but i also i don't know
06:47 - i think i'll do that in a minute um but
06:49 - what i want to do
06:50 - is talk about um
06:53 - the lorenz system so i'm going to at
06:55 - some point start
06:56 - what i hope will be about a 10 to 15
06:58 - minute tutorial where i build this
07:00 - lorenz system from scratch
07:02 - but what i want to do first is talk
07:04 - through some of the kind of conceptual
07:07 - details behind what this system is
07:10 - um and so that i can kind of maybe you
07:13 - guys will help me with this a bit in the
07:15 - chat if i'm getting things right or
07:16 - wrong
07:17 - um you know what what is a differential
07:19 - equation uh what does it mean
07:21 - in in terms of like mathematics and
07:22 - calculus and what does that mean in
07:24 - terms of actual like code and writing
07:25 - things in software what does it mean for
07:27 - something to be
07:27 - a chaotic system what does it mean for
07:30 - something to be a non-linear system
07:31 - where did this lorenz system come from
07:33 - so i want to kind of like look at
07:34 - wikipedia and some other resources and
07:36 - talk through that stuff
07:37 - and then i will start the part where i
07:39 - actually just programmed the thing from
07:40 - scratch
07:42 - um okay now i see some questions
07:45 - in the chat about uh the cadenze course
07:48 - so i'm gonna i'm gonna answer those now
07:50 - and then we'll get back to this
07:51 - lorenz stuff okay
07:55 - when creating vectors inside of
07:57 - functions you don't have to initialize
07:59 - them is the question asked by kurt
08:00 - strong um so let me actually see if i
08:04 - can uh pull up one of the examples
08:07 - um i'm going to open up this p5 editor i
08:09 - actually probably have an old version of
08:11 - the editor
08:11 - no it didn't didn't yell at me and so
08:13 - now i want to say
08:14 - open and documents and
08:18 - where where where okay let me do
08:20 - something really quick so by the way
08:24 - the cadenze course just to like for
08:26 - those of you who might be a little
08:27 - confused what i'm talking about
08:28 - i i mentioned already that i have this
08:31 - course
08:31 - on cadenze this course is being taught
08:34 - about
08:35 - physics systems and natural systems
08:37 - using javascript and p5.js
08:39 - i also have a book at uh
08:43 - natureofcode.com this the book is
08:45 - entirely available online
08:47 - as html the book is written with
08:49 - processing
08:50 - java in mind i'm actively working on a
08:52 - javascript version of the book
08:54 - which will come out at some point this
08:55 - summer hopefully by the before the
08:57 - cadenza course ends if i can get it
08:59 - together
09:00 - um so and on github
09:04 - um a there is a repository
09:09 - a github repository i'm going to zoom in
09:10 - on it now this particular link
09:13 - github.com the nature of code
09:15 - examples this is where all the example
09:17 - code is
09:18 - for the original book written in
09:20 - processing if i were to just go over
09:21 - here and type
09:22 - dash p5.js now
09:26 - i am at the repository where all of the
09:27 - examples in p5.js are
09:29 - and i actually want to go back for a
09:31 - second here and show you what i meant to
09:33 - show you down here is also
09:36 - many people have contributed ports of
09:38 - all of the examples to other languages
09:40 - so you can see there's a bunch of
09:42 - versions of it in open frameworks which
09:43 - is a c
09:44 - plus framework a bunch of other
09:45 - javascript ports a ruby port
09:48 - so if you are doing that maybe you're
09:50 - making them all in unity
09:52 - let me know submit a pull request add it
09:53 - to this readme if you don't know how to
09:54 - submit a pull request
09:56 - i made a whole video tutorial about that
09:58 - um i got to get back to the questions
10:00 - um but uh the reason why i'm showing you
10:02 - all of this is because
10:04 - i believe if i go to dash cadenze now
10:07 - oh nope i'll have to just go i have to
10:09 - find this
10:10 - um ah here it is
10:14 - so i made this is a little bit redundant
10:16 - but because as i made the video
10:19 - tutorials for the course
10:20 - little things about the code were like
10:22 - slightly different as i was like kind of
10:24 - doing it live
10:25 - so i have an entirely separate
10:27 - repository
10:28 - mostly redundant from dash examples
10:30 - p5.js but if you want to follow this one
10:32 - along and the reason why i was doing
10:34 - this now is i'm going to
10:35 - quickly just download this repository
10:38 - and open up
10:39 - the random walker example which
10:43 - i believe is what kurt in the chat is
10:46 - currently asking about so
10:47 - whoops let me go here and do i think i
10:50 - will open up this one
10:53 - is this using uh oops can i use it can i
10:55 - do that
10:56 - yes uh yeah okay
11:01 - so let's see if i can now uh read kurt's
11:05 - questions again
11:05 - and answer them as they reference this
11:08 - particular example and this is by the
11:09 - way just a really
11:10 - really basic simple demonstration of a
11:13 - random walk
11:14 - an object on the screen that has a
11:16 - position and that position changes
11:17 - randomly every frame so let me go back
11:20 - to the chat
11:21 - and see what these questions are
11:25 - when creating vectors inside of
11:26 - functions eg walker you don't do you
11:29 - have to initialize them
11:30 - so i'm not sure i entirely understand
11:31 - the question but let's kind of look at
11:33 - this
11:33 - so i would say that so a couple things
11:36 - one this
11:37 - walker function is a special kind of
11:40 - function
11:40 - now it's not special because of anything
11:44 - i um it's not special due
11:47 - with in the way that it's actually
11:49 - written
11:50 - it looks just like any other syntax-wise
11:52 - it's exactly like any other function
11:54 - function name of the function arguments
11:56 - however
11:57 - this i am using it i'm choosing to use
12:00 - it as a constructor function
12:01 - meaning a special function that
12:04 - generates
12:04 - objects and the
12:07 - you can see that because i am executing
12:09 - the function not just as calling the
12:11 - function on its own but with the new
12:13 - keyword
12:14 - new call the function that means the
12:15 - function's job is to make an object and
12:17 - return that object
12:18 - now the reason why it's capital w is
12:21 - just convention
12:22 - so this entire program would work
12:26 - exactly the same way if i made that
12:27 - lowercase w
12:29 - but it would completely break if i take
12:31 - out the new keyword
12:33 - now it doesn't work so the new keyword
12:35 - is
12:36 - really really the only thing in the code
12:38 - that's actually saying i want you to
12:39 - execute this as a constructor function
12:41 - the capital w is just a convention for
12:43 - me visually to see that ah i capitalize
12:46 - my constructor functions
12:47 - so i would say that the vectors that i'm
12:49 - using in the constructor function
12:51 - they have they do have to be initialized
12:53 - in fact they are here so position is
12:55 - but um but position is a vector that's
12:58 - part of the walker object
13:00 - and so it's initial create and
13:01 - initialize and attach to this keyword
13:03 - maybe i'll talk about that for those of
13:04 - you that might be confused by that later
13:07 - and velocity here is just a temporary
13:09 - local variable for this particular
13:10 - example so they are initialized
13:14 - do you think about joining the vectors
13:15 - together when adding vectors in future
13:17 - code example thinking
13:20 - so um so this is interesting
13:23 - so what's happening here is there are
13:25 - two vectors there's a position vector
13:29 - there's a position vector which maybe
13:32 - sets the position of an object
13:34 - and then there is a velocity vector
13:37 - which is
13:38 - explaining how that object should move
13:40 - um over time
13:41 - or just for that particular frame so the
13:44 - next location of the object is here
13:45 - so i'm adding those vectors together
13:47 - position plus
13:49 - position plus velocity equals this
13:51 - vector so
13:52 - in a way adding is like joining vectors
13:55 - in that the operation is you're putting
13:57 - them end to end but what i'm doing is
13:58 - saying
13:59 - position plus velocity and then
14:00 - resetting that to position
14:02 - so now the next position is defined as
14:03 - here and the circle is drawn there
14:05 - so hopefully that answers that question
14:08 - um
14:09 - in p5 editor wire w dot update and w dot
14:12 - display highlighted differently that's
14:13 - interesting um so i don't see them as up
14:17 - color differently here uh oh they are
14:20 - here
14:20 - interesting okay so i have a feeling
14:23 - this is
14:23 - i wouldn't say like a bug exactly but i
14:26 - have a feeling that display
14:27 - is some other key word in javascript uh
14:30 - for something so it's getting even
14:32 - though i'm using it naming it
14:34 - it's getting some so if i were to just
14:36 - change this to
14:37 - um like show and then change this to
14:41 - show it wouldn't have that highlight
14:42 - anymore and the program so i probably
14:44 - shouldn't use the word display
14:46 - since it's kind of conflicting as a
14:47 - keyword with something else
14:49 - um do vectors use floating point numbers
14:52 - by default
14:53 - yes they do except for you know the so
14:55 - certainly in processing the p vector
14:57 - class
14:58 - is defined with floating point uh fields
15:01 - x y and z javascript there's really not
15:04 - a distinction between an integer and a
15:05 - float
15:06 - is just a number and numbers could be an
15:08 - integer or float depending on like
15:09 - all the flexible wonderfulness of
15:11 - javascript or not wonderfulness
15:12 - depending on
15:13 - how you feel on a given day but um but
15:16 - yes
15:17 - everything's using floating point math
15:19 - essentially okay
15:20 - um how does programming in a group
15:24 - work is asked by kunjung sherpa okay so
15:28 - programming a group a great way of doing
15:30 - that is using
15:31 - uh git and github as a tool i mean
15:33 - programming in group
15:34 - i should say like how does programming a
15:36 - group works it works probably best
15:38 - if you can all just hang out have some
15:40 - lunch
15:41 - some fruit some tea hang out in a room
15:44 - together talk to each other share code
15:46 - draw on a whiteboard be with people now
15:48 - a lot of obviously a lot of large
15:50 - complex software projects worked on by
15:52 - large teams
15:53 - globally need some set of software tools
15:56 - to help facilitate that collaboration
15:58 - and
15:58 - for me currently that software tool is
16:01 - known as git
16:01 - and a web service server
16:05 - service that you can use to work with
16:07 - git collaboratively through the internet
16:09 - is github um so and i i have a whole set
16:12 - of i
16:12 - probably if you just search github
16:13 - shiffman on youtube you'll find my set
16:15 - of tutorials about that
16:17 - um okay um
16:21 - andrew kim asks oh and andrew kim is
16:24 - going to be
16:25 - our um set user as moderator
16:28 - andrew i just set you as a moderator so
16:30 - andrew kim has volunteered to try to be
16:31 - a moderator in the chat
16:32 - in case we have um somebody who's very
16:35 - disruptive which we had the other day
16:37 - um so um andrew kim
16:41 - asks how do you use the vector's
16:43 - magnitude versus the angle
16:45 - great question okay i love this there's
16:47 - questions today
16:48 - this is this is by the way what i had
16:50 - always imagined make videos
16:53 - and those things where people could
16:54 - watch do live sessions where people get
16:55 - asked questions
16:56 - i don't know this is i like this this
16:58 - makes me happy okay so let's talk about
17:00 - uh
17:01 - magnitude uh the only one thing that's
17:04 - not making me happy is that this eraser
17:06 - you know i'm really i'm doing my small
17:09 - part to kill the earth because it seems
17:11 - that these paper towels
17:13 - work well to erase on this white board
17:16 - and that eraser does not so i'm i'm
17:18 - gonna try to use this single paper towel
17:20 - today and not make too much of
17:22 - not ruin the earth hopefully i'm putting
17:23 - some good stuff into the world
17:25 - to uh to counteract the bad stuff um
17:29 - like using too many paper towels okay
17:31 - what were we talking about vector okay
17:32 - so this is how
17:33 - uh one thinks of a vector in a
17:36 - two-dimensional space as an arrow
17:39 - defining how to get from you know this
17:41 - point to this point
17:43 - uh code wise you probably notice that
17:46 - vector is made up of an x and y
17:47 - component
17:48 - v dot x v dot y there's also a z and
17:51 - you'll see that actually when i do my
17:53 - lorenzo tractor example i'm going to use
17:54 - the z component
17:56 - so this is really kind of what's there
17:58 - in the computer
18:00 - when you're programming with vectors but
18:02 - a vector
18:03 - typically uh in other without can
18:07 - all in addition to being thought of as
18:08 - having components can be thought of as
18:10 - a magnitude meaning the length how long
18:13 - is that vector if you think of a vector
18:14 - a force
18:15 - is the force very strong or is it very
18:17 - weak is it a big
18:18 - long vector or a short vector and then
18:20 - also a direction like am i pushing in
18:22 - this direction or in this direction
18:23 - what's the direct direction
18:25 - and that's often thought of as an angle
18:27 - so when you make if you
18:28 - in p5 you make a vector with create
18:31 - vector
18:32 - you're making it typically with the
18:34 - components
18:35 - with the x and y components however you
18:38 - can access
18:39 - both the angle and the magnitude through
18:41 - functions so if this were the variable v
18:44 - i can say v dot mag and this will return
18:48 - the length of the vector
18:49 - and i can also say v dot heading
18:53 - and this will return the angle
18:55 - associated with that vector i believe it
18:57 - returns it in
18:58 - radians or degrees depending on what the
19:00 - angle mode is now
19:02 - magnitude will work whether you're
19:04 - working with a two-dimensional or a
19:06 - three-dimensional vector it's just the
19:08 - length of the vector
19:09 - this heading function is only for
19:11 - two-dimensional vectors i mean it'll
19:13 - give you an angle
19:14 - but an angle based only on the x-y plane
19:16 - so
19:17 - the direction of a vector in
19:18 - three-dimensional space cannot be
19:20 - defined as a single value because you
19:22 - need like
19:24 - euler angles or quaternions or something
19:26 - that's going to make me turn off all the
19:27 - cameras and run
19:28 - screaming out to the streets of new york
19:29 - city screaming quaternions
19:32 - help they're after me they're attacking
19:34 - me um
19:35 - okay so that's um heading is deprecated
19:41 - um yeah i don't think heading so
19:44 - heading it used to be called heading in
19:46 - processing it used to be called heading
19:48 - 2d
19:49 - to emphasize that it was only for a
19:51 - two-dimensional vector but
19:52 - now that's deprecated now just called
19:54 - heading i've been talking for a half an
19:55 - hour
19:56 - because that's when these cameras turn
19:58 - off
20:00 - by the way i'm using uh canon 5d
20:03 - cameras and they're being passed through
20:05 - this sort of black magic box as capture
20:07 - devices and then streamed out to youtube
20:09 - so this is the mark ii i'm pretty sure
20:11 - if i ever could get my hands on the mark
20:13 - iii camera it has a lot more features
20:15 - for doing this kind of like live
20:16 - streaming stuff
20:18 - um so someday once i start my patreon
20:21 - and raise a lot of money i will get some
20:23 - better equipment actually a lot of this
20:25 - equipment is on loan from nyu so thank
20:27 - you to nyu for helping me with that
20:28 - okay um
20:33 - okay so christopher akiki asks how is it
20:36 - you add velocities and accelerations and
20:38 - positions together
20:39 - i'm sure i'm missing something in terms
20:41 - of dimensional analysis
20:43 - okay so one thing is i i should say that
20:45 - um
20:46 - i'm pretty sure that that is um this
20:49 - particular question is covered quite a
20:51 - bit
20:51 - in the cadenza videos itself so i'd
20:53 - encourage you to go check those out
20:55 - um but basically um
20:59 - adding vectors means like i said before
21:01 - putting them visually it's putting them
21:03 - end to end
21:04 - you know obviously when you're adding
21:05 - numbers you use the plus sign to say 5
21:09 - plus 6
21:09 - equals 11. if you have vector variables
21:12 - the plus operator does not work with
21:14 - vector variables
21:16 - because plus the plus operator the
21:18 - computer only knows how to interpret
21:19 - that as adding numbers
21:21 - so there is if you have a vector v1 and
21:23 - you want to add it
21:24 - there is an add function and so um so
21:27 - that's the way you add
21:29 - now acceleration is the rate oh this is
21:31 - perfect because this totally relates to
21:33 - this idea of differential equations that
21:34 - i want to talk about
21:37 - but acceleration is the rate of change
21:39 - of velocity velocity is the rate of
21:41 - change of position so acceleration gets
21:43 - added to velocity as it change
21:45 - velocity is changing over time based on
21:46 - an object's acceleration and the
21:48 - position is changing over time based on
21:49 - the object's velocity so this is like
21:51 - a perfect segue into the lorenz
21:53 - attractor stuff but i'm just going to
21:54 - check the chat really quick
21:56 - before i get to that um heading is a
21:59 - weird way to name
22:00 - that i agree it could just be direction
22:03 - the reason why it's called heading
22:05 - is because typically you might use it to
22:08 - let's say you have um i can just pull up
22:11 - um
22:14 - uh hopefully this is gonna work
22:18 - uh so this particular example um
22:22 - if you look at the this is my flocking
22:24 - example and i will uh this is covered
22:26 - this will be covered in detail hey where
22:28 - did everything go
22:30 - look at this i got a bug report somebody
22:32 - file a bug
22:33 - on uh github.com
22:36 - processing processing docs um
22:40 - the processing docs repository uh tag at
22:42 - shiftment in it if you or
22:44 - um and say uh i need to fix this example
22:46 - to have
22:47 - a wraparound so the flock doesn't leave
22:50 - i don't know i thought that was in there
22:52 - but the borders function for whatever
22:53 - reason is not being called this borders
22:55 - function to check if they're at the
22:56 - edges so someone file that on github
22:59 - because i will fix that but what i
23:00 - wanted to show you before they all run
23:01 - away is you can see each one of these
23:03 - triangles
23:04 - is pointing in the direction of its
23:05 - velocity so as it moves it's rotating in
23:08 - that direction
23:09 - look they're still here they're going to
23:11 - go away are they going to come back now
23:12 - i don't know maybe they're
23:13 - maybe they're just oh wait now it's
23:15 - working don't file that bug
23:17 - oh is it just maybe it's just working
23:19 - left and right
23:20 - but not up and down that's interesting
23:23 - look
23:24 - go down and they're not coming out the
23:25 - top
23:27 - oh and it didn't even work that that's
23:29 - weird oh maybe it works only on one edge
23:31 - i don't know i have to investigate that
23:32 - and fix that
23:33 - but the point of what i'm saying is that
23:36 - um you often want an object moving
23:39 - pointing in the direction that it's
23:40 - moving that's its heading so to speak so
23:42 - you rotate by the angle of the velocity
23:44 - vector
23:45 - um okay lucas king
23:49 - asks this is maybe a dumb question i
23:52 - 100 do not believe this will be a dumb
23:54 - question but i was wondering what's
23:55 - inside the random function
23:57 - how exactly does a computer generate
23:58 - random numbers oh my god this is
24:00 - the farthest thing from a dumb question
24:02 - whatsoever in fact this is a
24:03 - phenomenally important question
24:06 - and it is really a fundamental question
24:08 - to how
24:09 - generative algorithmic systems work and
24:12 - are developed
24:14 - so um you know without i would love to
24:16 - make a particular video maybe just on
24:18 - this topic
24:19 - uh and maybe uh implement some random
24:21 - number generation in a video but let's
24:22 - just sort of say the key term here
24:25 - is pseudo random numbers so randomness
24:28 - right if you think about what randomness
24:31 - really is
24:32 - is it is a uh let me pull up my examples
24:35 - actually
24:35 - this is so i'm gonna i'm gonna go in
24:38 - processing i'm pretty sure that i have
24:40 - all my nature of code examples here
24:42 - so i should have random graph so
24:46 - um whoops processing quit unexpectedly
24:50 - oh boy okay come back processing let me
24:52 - close this window
24:53 - um okay so what i want to talk about is
24:56 - random number generation
24:58 - and let me i'm going to interpret so by
25:00 - the way if you don't have
25:02 - the nature of code examples in your
25:04 - processing you can get it by going to uh
25:06 - clicking add examples
25:08 - and you'll see here all you have to do
25:09 - is click nature of code
25:11 - and click uh install down here but i've
25:13 - already done that
25:14 - so what i'm looking for is in the
25:16 - introduction i'm looking for a
25:18 - particular example called
25:20 - um random distribution
25:24 - interesting i think that's what i'm
25:26 - looking for random graph
25:28 - i was also going but let's look at
25:29 - random distribution so i'm going to run
25:30 - this example
25:33 - so what this example is demonstrating
25:35 - let me run it
25:36 - is it is picking a random number
25:40 - 1 2 3 4 5 6 7 8 9 10 11 12 however many
25:45 - bars there are
25:46 - and each time it picks that random
25:47 - number
25:49 - it raises that bar so if
25:52 - a perfect random number generator would
25:55 - give you a completely unpredictable
25:57 - random number
25:58 - every single time you ask for it but
26:00 - over time
26:01 - you would get a perfectly even
26:03 - distribution of
26:04 - all numbers right it should pick the
26:07 - number five just as many times as it
26:09 - picks the number eight
26:10 - so now randomness you know if you had
26:14 - some kind of like
26:15 - fancy machine that like measured the
26:17 - movement of electrons around like a
26:19 - nucleus
26:19 - you could there's probably some like
26:22 - thermodynamic perfect randomness there
26:24 - that you could measure and in fact i
26:25 - think
26:26 - some um this becomes a question for like
26:28 - online gambling software like a
26:31 - poker online a poker gambling software
26:33 - that needs to produce a random shuffle
26:35 - if you could reverse engineer their
26:37 - random number generator you could hack
26:39 - their system and know what cards are
26:41 - coming and do a lot of nefarious things
26:43 - so i i feel like i remember reading like
26:45 - an article about some like online poker
26:47 - company that actually had like a bank of
26:49 - like these machines that were
26:51 - uh bubbling up like gaseous particles
26:53 - and using that to measure randomness
26:56 - but in processing that's not happening
26:58 - what's happening is it's using something
27:00 - called pseudo random number generation
27:02 - oh i would
27:03 - i wish i had a great prop here which i'm
27:04 - going to refer to this in a second so
27:06 - pseudo random number generation is this
27:08 - idea of oh could we find a mathematical
27:11 - function
27:12 - that if you passed a number into it it
27:14 - would give you sort of another number
27:16 - back and if you fed that number back
27:17 - into it it would give you another number
27:18 - back
27:19 - and those numbers over time would
27:20 - exhibit the properties
27:22 - close to sort of perfect randomness and
27:25 - that's what's happening there's just
27:26 - a mathematical function you know people
27:28 - probably spend their lives researching
27:30 - or their phd dissertations
27:32 - inventing better pseudo random number
27:34 - generation functions
27:35 - um but you could see that for for as a
27:38 - creative coder somebody making an art
27:40 - installation or whatever it's fine if
27:41 - it's like
27:42 - you know not the best um
27:46 - the most perfect random number generator
27:49 - um
27:49 - and over time this the random number
27:51 - generator that processing is using
27:53 - would in fact exhibit a pattern now i'm
27:56 - going to show you i i think i actually
27:59 - dare i say i think i worked on some of
28:01 - the implementing the random number
28:03 - generator for p5
28:04 - so i'm going to go to um so i know where
28:07 - it is
28:08 - i apologize if i'm wrong and somebody
28:09 - else did it
28:11 - but i'm going to go in the p5 under
28:13 - source under math
28:15 - and go to random and you can see here ah
28:18 - yes there it is
28:20 - so this is the random number generator
28:22 - function that's in p5
28:25 - it is called a linear con congruential
28:28 - generator a variant of a lehman
28:30 - generator
28:31 - and you can look up this wikipedia page
28:33 - called numerical
28:35 - recipes and you can see that it is just
28:36 - some function it uses some arbitrary
28:39 - constants
28:40 - and then it runs this code and gives
28:43 - back a random number generator
28:45 - and what's key about this though is that
28:47 - there is a seed
28:48 - and um
28:52 - uh what's so funny about this is
28:55 - so okay so random number of generators
28:57 - need a seed and
28:58 - the seed is the first number that's
29:00 - passed into it to get the first random
29:02 - number generator this is actually
29:03 - incredibly useful because if you always
29:05 - want to get the same if you want to get
29:06 - random numbers but you want to get the
29:07 - same exact sequence over time
29:09 - you can set the seed and there is a
29:11 - function both in processing and p5
29:13 - called set seed
29:14 - so let's say you are making a a
29:16 - generative poster design program
29:19 - and your program generates these poster
29:21 - designs and
29:22 - what you want is to run it a bunch of
29:24 - times and generate a pdf and you it's
29:26 - going to be random but you want the
29:28 - exact same one every time
29:29 - and then maybe you want a different one
29:30 - or you want to be able to like go back
29:32 - and get the one you had before
29:33 - you could always set the seed in your
29:35 - setup function
29:36 - um now you could set uh you could just
29:39 - send it to like the number five or the
29:40 - number 63 what's funny about this
29:42 - is pro p5 and a uh p5 grabs a seed from
29:47 - like the native javascript random number
29:49 - generator
29:50 - if you don't give it one which is kind
29:51 - of funny it's using somebody else's
29:52 - random number generator to get your
29:54 - random seed for your random number
29:55 - generator
29:56 - and if we looked up in the processing
29:58 - source code i'd love somebody to go do
29:59 - that let me know you can see how it's
30:00 - seated
30:01 - you know sometimes random number
30:02 - generators are seated based on like the
30:04 - number of milliseconds since the
30:05 - computer booted up
30:06 - or the time of day or the mouse location
30:09 - on the screen you've got to come up with
30:10 - something that's
30:11 - kind of random-ish to use as a seed
30:15 - okay so hopefully that helped
30:21 - uh um it a question here's another
30:23 - question actually i probably missed some
30:25 - questions
30:26 - uh okay um
30:30 - is it really important that you write
30:31 - unit tests for the programs you write
30:33 - you are so
30:34 - asking the wrong person this question
30:36 - because my answer is
30:38 - definitively no it's not important
30:40 - however i'm sure there are
30:41 - many instances where it is quite
30:43 - important and you'll see that large
30:45 - software projects that you know really
30:47 - need to be working
30:49 - and not have issues and are managed by
30:51 - large teams having unit tests can be an
30:53 - incredibly
30:54 - valuable uh tool to as you make it
30:57 - what does a unit test do by the way so a
30:59 - unit test is something that runs
31:01 - separately when you make so let's say
31:02 - you're building a library like p5.js
31:04 - and you change the code in the library
31:06 - the unit tests are programs that run
31:08 - using your new version of library
31:10 - and check to make sure things aren't
31:11 - broken and they can do that by
31:13 - you know testing certain functions
31:15 - knowing what the answer should be
31:16 - seeing what the result is and comparing
31:18 - it to the known answer so what i
31:20 - what i would be um wary of as a kind of
31:24 - you know prototyper maker of things
31:26 - sketching out ideas
31:28 - you don't want to get so lost in making
31:31 - unit tests for your thing that you never
31:32 - make the thing itself
31:34 - so you know and a lot of things you're
31:36 - doing if you're making an interactive
31:38 - project
31:39 - what i would say is more crucial than
31:40 - unit testing is user testing
31:42 - so you know you can get is the program
31:44 - working does it make sense
31:46 - does your idea communicate what you want
31:48 - to communicate through users so i would
31:49 - say user testing is
31:50 - really important unit testing i would
31:52 - sort of it sort of depends on the
31:54 - scenario
31:56 - um oh yes okay so andrew kim
31:59 - mentions um mentions what i wanted to
32:02 - mention i have this book but it's at my
32:04 - office at itp so i don't have it with
32:06 - you but i'll bring it up now which is
32:08 - a million random digits
32:11 - so back in the old days olden times
32:14 - uh let me just see if i can google image
32:16 - search this um
32:19 - uh the um you know if you didn't have a
32:23 - pseudo-random number generator or it's a
32:24 - computer super computer to generate
32:26 - random numbers for you and you wanted to
32:27 - do some type of
32:29 - what's often referred to as a monte
32:30 - carlo simulation
32:32 - simulate out some idea ran with random
32:35 - numbers over and over again
32:36 - this is actually a book published by the
32:38 - rand corporation
32:40 - with just like pages and pages of
32:42 - sequences of random numbers
32:43 - and incidentally you know how i was
32:46 - saying before
32:48 - in processing that um
32:51 - that these uh what you want is an even
32:54 - distribution of random numbers
32:57 - that's what you want for a pseudo random
32:59 - number generation with
33:01 - a i don't want to say normal because
33:03 - normal is another word for the gaussian
33:05 - distribution
33:05 - uniform that's what it is this is known
33:07 - as a uniform distribution where you have
33:09 - an equal probability of any number being
33:11 - picked at any time
33:12 - but this is not always what you want
33:14 - perhaps you want to pick
33:15 - random numbers but you want to pick
33:17 - higher random numbers
33:18 - more often than lower random numbers
33:20 - when i get to genetic algorithms in my
33:22 - cadenza
33:22 - course you want to pick randomly you
33:25 - want to pick randomly from a population
33:28 - to make uh the next generation but
33:31 - certain members of that population
33:33 - should have a higher probability of
33:34 - being picked
33:35 - and then of course there are well-known
33:37 - distributions
33:38 - and i'm going to try to
33:43 - uh i think this particular sketch
33:46 - this is the the bell curve or a gaussian
33:49 - distribution so
33:50 - if you want to simulate um heights let's
33:53 - say you want to
33:53 - simulate a a collection of people
33:57 - and you want to pick heights for those
33:58 - people randomly well
34:00 - and p and you decide that in your alien
34:02 - world
34:03 - peop aliens forget about people aliens
34:05 - are between three feet and seven
34:07 - feet well maybe there's a sort of
34:09 - average height
34:12 - around five feet yes five feet that's
34:14 - the average of three and seven
34:16 - but most people cluster around the
34:18 - average so you would want to more often
34:20 - have people that are around five feet
34:22 - and less often so this is showing you
34:24 - the probability map of
34:25 - of how often you want things and that's
34:27 - known as you know bell curve is
34:28 - uh you know with um you can see is there
34:31 - a y
34:32 - distribution a very uh thin distribu
34:35 - thin distribution um i need to take a
34:38 - drink of
34:39 - tea here i just like i lost steam for a
34:41 - second
34:44 - but hopefully that makes sense and helps
34:45 - you guys
34:48 - peter quan says that his company logo is
34:51 - a gaussian curve
34:52 - um it's only important
34:56 - this is uh nuna costa makes an excellent
34:59 - point saying it's only important to have
35:00 - unit tests if you don't want your flock
35:02 - of triangles to fly away
35:04 - so yes you can see that if there was
35:06 - some type of unit test to test the
35:08 - examples there on the processing website
35:09 - it might have caught
35:10 - that but i would say another unit test
35:13 - for that is uh
35:14 - you know the collective consciousness
35:16 - the collaborative what's the
35:18 - crowd-sourced
35:19 - error reporting um
35:22 - okay um
35:25 - so a nine cat fan asks uh how andrew got
35:28 - moderator so
35:30 - what happened the other day just to
35:31 - mention and i should check twitch i
35:32 - apologize
35:34 - um a galvabart on twitch asks if this is
35:37 - live
35:37 - yes it's live um uh so that that proves
35:41 - that it's live by me checking twitch
35:42 - real quick um so
35:44 - something happened the other day where
35:45 - somebody came into the chat and was
35:46 - using some kind of offensive language
35:48 - and just filling up the chat with like a
35:49 - zillion comments
35:50 - and i didn't notice it for quite a while
35:51 - and then i went and just turned that
35:52 - person off
35:54 - um and so um i think it's useful just to
35:57 - have somebody in the chat who can kind
35:58 - of make
35:59 - you know as best they can just kind of
36:01 - decisions about that if we have someone
36:02 - that's there that's um
36:03 - you know so disruptive that it's that
36:05 - they need to be muted
36:06 - um and so andrew volunteered to do that
36:08 - and i assigned to the moderator if
36:09 - anybody else wants to uh
36:11 - be a moderator i uh you all seem like
36:13 - nice lovely trusted people i'm happy to
36:15 - make all of you moderators
36:17 - okay i don't know what you get to do as
36:19 - a moderator um
36:21 - it would be great if what you could do
36:22 - is alert me when my sound battery dies
36:24 - but i
36:25 - have a new system of charging the
36:26 - batteries overnight and i've got three
36:27 - bars each
36:28 - okay so i've been streaming now for
36:30 - about 35 minutes
36:32 - and i think i want to start getting to
36:34 - um
36:36 - um i think i want to start getting to my
36:40 - lorenz attractor
36:41 - coding challenge so i'm going to kind of
36:44 - poke around some urls here and get
36:46 - set up for that
36:50 - okay let's see loren's system okay so
36:53 - okay first of all if you guys don't know
36:54 - about paul bork
36:58 - basically paul bork has a website i
37:00 - think which outlines
37:01 - every single coding challenge i want to
37:03 - get to and just has an explanation of
37:05 - the code for it so you really just turn
37:07 - off my stream and i should just
37:08 - basically say thank you paul bork if i
37:11 - ever make any money from this i need to
37:12 - send you some royalties
37:14 - um paul bork uh
37:18 - paul bork i'm just gonna search lorenz
37:21 - so uh paul bork and maybe i'll go to
37:23 - paul borg's uh
37:26 - main url uh has a public i believe is a
37:29 - researcher
37:31 - located in australia in sydney and
37:33 - there's a lot of papers and pages and a
37:35 - lot of these are from many many years
37:37 - ago
37:37 - with like you know very simple c code
37:39 - implementing a lot of these kind of
37:41 - classic computational algorithms
37:44 - and so one that i want to look at today
37:47 - is
37:48 - the lorenz attractor and you can see
37:50 - this is paul bork's page where there's a
37:51 - nice explanation
37:52 - showing the formulas i want to talk
37:54 - about like ah these formulas look scary
37:55 - what do they mean
37:56 - this is some of the example output and
37:59 - then what i want to show you as i scroll
38:01 - down here is to show you
38:02 - he usually also always has just the kind
38:05 - of some really basic
38:06 - c code and you can see that the c code
38:08 - is actually not drawing anything
38:10 - it's just an algorithm that's printing
38:11 - out the xyz coordinates of the result of
38:14 - that algorithm
38:15 - so one thing i could do is take this and
38:17 - like paste it into processing and
38:18 - translate it into java and add the sort
38:20 - of drawing stuff
38:21 - but i think what i'm going to do is when
38:22 - i do the tutorials build it from scratch
38:24 - by looking at the formulas and trying to
38:26 - understand them
38:27 - because i think that might in the end
38:28 - actually be a bit more useful but i want
38:30 - to make sure
38:31 - i reference paul borg's site because i
38:33 - have learned so much
38:34 - from this site the other thing that i
38:36 - think is worth mentioning
38:38 - is like so on the one hand
38:42 - why am i here doing this i think it's
38:44 - valuable
38:45 - to learn these skills to unlock
38:48 - new ideas and possibilities in your head
38:50 - be creative with them
38:51 - play experiment and teach others there's
38:55 - all sorts of possible things
38:56 - i do know that there is this sort of
38:58 - thread this conversation that happens in
38:59 - the kind of
39:00 - computational art world so to speak
39:03 - which is
39:04 - you know is this like a cliche like if
39:06 - you take this exact algorithm
39:08 - generate it pick some colors and print
39:11 - out a you know pdf of it and
39:13 - put it in an art gallery on the wall is
39:14 - that good or bad or good you know what's
39:18 - what have you done there so i'm going to
39:20 - completely stay
39:21 - away from that question i do think that
39:24 - it's important for you to think about
39:25 - if what's the context of how you're
39:28 - using these algorithms and why you're
39:29 - using those algorithms but i'm going to
39:30 - leave that for you
39:32 - to discuss to tweet me to discuss it in
39:34 - another context
39:36 - uh that's different from this and my
39:38 - goal today is really just the tutorial
39:40 - aspect of it
39:41 - and um you know i think there is a lot
39:44 - of value
39:44 - in recreating things that other people
39:46 - have made to discover something new to
39:48 - learn about it to be inspired by it
39:50 - um and also just as practice so to speak
39:53 - so
39:54 - so that's uh spectron asks will videos
39:57 - be recorded oh
39:59 - spectron says i feel like i'm getting
40:01 - ignored oh i don't want that to happen
40:03 - um uh
40:07 - oh kendall okay sorry i see now there's
40:09 - a question
40:10 - um spectron asks if i'll get back to
40:13 - lorenzo tractor i don't want anyone to
40:14 - feel ignored
40:15 - can you link a random number on a range
40:17 - with random and transforming it into a
40:19 - normal gaussian distributed random
40:20 - number okay so this is a great question
40:22 - how do you get that different range
40:24 - this really merits a whole separate
40:26 - tutorial just about that i definitely
40:27 - have some
40:28 - in my youtube nature of code playlist
40:30 - different distributions of random
40:31 - numbers i recall making some videos like
40:33 - that
40:34 - but for processing the random function
40:36 - does not do that for you
40:37 - it just gives you a uniform distribution
40:39 - there is a function processing called
40:41 - random gaussian which will give you
40:43 - gaussian random numbers uh there are
40:45 - java classes for this i'm sure there are
40:46 - javascript
40:47 - uh libraries and frameworks which will
40:49 - do this for you also but ultimately you
40:51 - need your own algorithm
40:52 - to specify to like manipulate the random
40:55 - number generator
40:56 - and um in the cadenza course i actually
40:58 - go over this also when i get to the
41:00 - genetic algorithms part
41:01 - uh okay um
41:06 - yes uh okay um
41:11 - uh oh yeah and spectron by the way makes
41:13 - wonderful coding challenge tutorial
41:15 - videos in french so if you're french
41:17 - uh check out spectron's channel um
41:20 - okay um now back to
41:23 - the lorenz system okay so that's that's
41:25 - my introduction to what it is i'm doing
41:27 - now the one
41:27 - company i want to read a couple things
41:29 - to you guys
41:31 - which um which i will keep in my head as
41:33 - i start
41:34 - so the lorenz attractor it was uh first
41:37 - study by someone named ed
41:38 - lorenz this is from 1963. uh thank you
41:42 - paul burke for providing me with my
41:44 - materials to read um and it it was
41:47 - derived from a simplified model of
41:49 - convection in the earth's atmosphere
41:51 - so it's interesting about these kinds of
41:54 - algorithms
41:55 - something known as a strange attractor
41:56 - or a chaotic system they're
41:58 - non-linear systems is that they are
42:01 - models of things that exist in nature
42:04 - where uh if you are if you plug this
42:07 - sort of initial variables into the
42:09 - system
42:10 - the output is deterministic meaning it
42:12 - will happen exactly
42:14 - as the math dictates however
42:17 - if you change the inputs ever so
42:21 - slightly
42:22 - the output will be wildly different so
42:25 - that
42:25 - that's sort of the chaos of it it's
42:27 - unpredictable it's non-linear meaning a
42:29 - slight change in an input value makes a
42:31 - massive change in an output value
42:33 - this is also known as the butterfly
42:34 - effect right a butterfly flapping its
42:36 - wings
42:37 - a slight change in the earth's
42:39 - atmosphere would cause
42:40 - some major event you know volcano
42:42 - eruption on the other side of the world
42:44 - whether that that actually happens with
42:45 - a butterfly is i think
42:47 - an interesting question to discuss but
42:49 - that's the idea here so this is an
42:51 - example of a system like that
42:53 - okay now those systems exist in nature
42:56 - those systems are defined
42:58 - by and i'm probably going to repeat a
42:59 - lot of this when i start to like record
43:01 - the actual video tutorial maybe i'm
43:03 - doing it already
43:04 - but i want to make a kind of condensed
43:05 - version of it that focuses on the code
43:07 - so i'm kind of talking it through to
43:08 - kind of remind myself how the stuff
43:09 - works
43:10 - and and rely on you in the chat to say
43:12 - actually you're getting this wrong
43:14 - if you if you think about so now this
43:17 - um all runs on a differential um a
43:20 - differential equation so this is what i
43:21 - wanted to try to sort of wrap my head
43:23 - around trying to explain
43:24 - in the sort of creative coding context
43:26 - because you could definitely go and
43:27 - watch
43:28 - a kind of like what is a differential
43:29 - equation video on cod academy
43:32 - or other you know math type lecture type
43:35 - materials
43:36 - but it will be very focused on the sort
43:38 - of calculus path you know
43:39 - derivative and integral first derivative
43:42 - second derivative
43:43 - that sort of more abstractly and so what
43:46 - i want to try to describe and i'm going
43:48 - to do this
43:49 - probably a couple times um is
43:54 - uh what is a differential equation
43:58 - and how does how does it how what is a
44:01 - differential equation just sort of
44:02 - higher level
44:03 - and how does this abstractly
44:08 - um how does this abstractly
44:12 - i'm sorry i'm apparently i can't do the
44:14 - thing
44:16 - where i tap my head and rub my stomach
44:17 - because i can't think while i'm erasing
44:19 - how does it why is a differential
44:21 - equation relevant to a creative coding
44:23 - context
44:24 - so another resource that i think is
44:27 - useful
44:27 - for this is this particular url
44:31 - myphysicslab.com
44:32 - i'm sure you could google for this and
44:34 - i'll include a link what is a
44:35 - differential equation
44:36 - and this i think is a really nice
44:39 - succinct
44:40 - summary that sort of stays away from
44:42 - some of the kind of calculus aspects
44:44 - that are unnecessary for what we're
44:45 - doing although
44:46 - important and interesting in their own
44:47 - right i'm just checking
44:49 - nobody is complaining in the chat yet a
44:51 - differential equation states how a rate
44:53 - of change
44:54 - a differential in one variable is
44:56 - related to other variables
44:59 - so let's think about this in the context
45:02 - of nature of code physics simulation
45:04 - you have a position and let's just think
45:06 - of a position only as an x value
45:09 - so position along a one-dimensional axis
45:12 - you know you could say the change
45:16 - in x so okay
45:19 - so this position can have a velocity
45:21 - which is the
45:22 - change in x over time this is often
45:24 - written as
45:25 - dx over dt equals something
45:30 - this is essentially a differential
45:31 - equation
45:34 - um how does the how do
45:37 - certain variables affect the rate of
45:40 - change of
45:40 - other variables um and let's see another
45:44 - let's let's look um let's look at this
45:47 - this is described here as like a
45:51 - a spring uh oh a spring is a great oh
45:54 - i'm sorry i came over here
45:56 - so a spring um is a great um
45:59 - is there anything like am i doing
46:01 - anything wrong by using other people's
46:03 - online materials to do this teaching
46:06 - anyway hopefully now i would do this in
46:08 - the classroom but somehow when i'm
46:09 - broadcasting this and then i don't know
46:11 - but hopefully i'm just
46:13 - i would be happy for somebody else to
46:14 - use buy stuff that i put online so i
46:15 - hope it's okay i think
46:17 - anyway i'll keep going to keep going
46:18 - here the rate of change
46:21 - um okay the rate of change in velocity
46:25 - is proportional to the position
46:27 - so let's think about that in in the
46:29 - spring context
46:32 - um so if you have a spring which
46:35 - i could draw like this i was actually
46:37 - thinking of a pendulum
46:39 - when thinking about this but i think
46:40 - spring is good so
46:42 - in other words aha if you pull this out
46:45 - really far if you stretch that spring
46:48 - really far
46:51 - then um then it's going to uh
46:55 - spring back really fast so it's position
46:58 - that the velocity
46:59 - of this spring is relative to its
47:01 - position so that's the differential
47:02 - equation
47:03 - how is its velocity the rate of change
47:05 - of its position
47:06 - related to the variable position itself
47:10 - so that's kind of like the basic idea of
47:12 - a differential equation
47:13 - how does the difference of a variable
47:16 - affect
47:17 - uh let me look back at how that was
47:19 - described here again because i said it
47:20 - wrong
47:21 - uh the rate of change the rate of change
47:24 - is the differential and by the way this
47:25 - derivative uh uh is uh
47:28 - is another way of saying kind of rate of
47:30 - change um
47:31 - so in one variable's rate of other
47:33 - values so that's the idea so now
47:36 - if i go to wikipedia we can see aha
47:40 - this gives us a little more sense of
47:43 - what it means for the
47:44 - what these lorenz equations are lorenz
47:47 - equation
47:48 - is keeping track of the rate of change
47:50 - of a particle in space
47:52 - in three dimensional space how does the
47:54 - x change how does the y change how does
47:56 - the z
47:57 - change and it changes based on its
47:59 - position also
48:00 - it's x it's wide at z and some other
48:02 - constants
48:03 - you guys are gonna have to help me with
48:04 - this sigma
48:07 - rho beta did i get that right that's the
48:09 - greek letter sigma lowercase
48:11 - the greek letter rho and the greek
48:13 - letter beta
48:14 - the other half of my family is greek
48:18 - so i should know this stuff um uh let's
48:21 - see
48:22 - um so somebody in the chat tell me if i
48:25 - got say you got your greek letters right
48:27 - you got your greek letters wrong because
48:28 - i would really like to know that
48:30 - um okay so i think that's so what i need
48:32 - to do now
48:34 - is translate this into code so that's my
48:37 - that's my introduction to the idea of
48:39 - what is the lorenz attractor and what is
48:41 - a differential equation
48:43 - and how does and how does that relate to
48:45 - code the next thing is to actually
48:47 - program it
48:48 - so i'm gonna as much as i should
48:49 - probably practice programming it and
48:51 - then record
48:52 - and then start the actual lesson i'm
48:53 - gonna i think i'm getting ready to do
48:55 - the challenge i'm gonna set the timer
48:56 - i'm gonna
48:57 - give a quick introduction and then refer
48:59 - to this and then start programming
49:01 - so leave me your feedback or comment in
49:03 - the chat right now if i got anything
49:04 - wrong or anything was confusing or
49:06 - that sort of thing i got my greek
49:09 - letters right somebody said that's lucky
49:11 - okay so let me i'm just gonna
49:14 - erase the whiteboard here
49:19 - i'm going to i think i'm going to do the
49:20 - same explanation about
49:22 - uh differential equations
49:27 - and then i'm going to refer to the
49:29 - wikipedia page
49:31 - and then i'm going to build the code and
49:33 - let me actually run
49:34 - i'm going to you know i i have a version
49:37 - of this example which i
49:38 - cooked up this morning really quick
49:43 - so let me open that is that open already
49:45 - or no
49:46 - um sorry uh open recent it should be
49:49 - here
49:50 - uh strange attractor okay so this is
49:53 - i just want to have this
49:56 - running okay so oh camera that went off
50:00 - okay
50:01 - so um this is the oh i guess i made some
50:04 - changes to it and didn't save those
50:06 - changes
50:09 - um because
50:12 - whoops okay hold on i have to fix a
50:14 - couple things
50:18 - uh i'm just gonna i want to have a
50:19 - visual reference running when when i
50:20 - start
50:22 - i swear i made these change ah weird
50:26 - did i restart the computer or change the
50:28 - name of it or save it somewhere else
50:30 - that's really weird uh hold on everybody
50:32 - i i have to um
50:35 - i'm just gonna save this as
50:38 - uh underscore and then
50:41 - uh i want to
50:47 - take this out and i want to put um
50:51 - oh that's right okay i just want to
50:53 - check make sure this is working
50:58 - you know why i lost the three the z
51:02 - oh right okay no wonder bear with me for
51:08 - a second everybody while i get this
51:10 - working
51:12 - okay so this is essentially the example
51:14 - i'm going to build from scratch and
51:15 - actually
51:17 - i'm also going to do another thing here
51:19 - which is
51:22 - translate by a negative
51:25 - like 80. i believe would be the middle
51:27 - if i'm right about that
51:31 - no no 0 0.
51:36 - i want to put it back a little bit yeah
51:39 - okay that's good
51:40 - i wanted to sort of rotate around the
51:42 - center
51:43 - uh and
51:46 - so let me see here then i want to
51:50 - open a blank sketch which will which i
51:52 - will program
51:54 - oh i mean the uh let me just do save as
52:02 - lorenz
52:04 - um okay
52:07 - uh 800 600 this should work pretty well
52:17 - this will be where my code is this is a
52:20 - visual reference to start with
52:29 - i should have maybe i should have this
52:30 - spinning automatically
52:32 - i'll put that back in uh
52:37 - since uh shoot
52:44 - here we go
52:50 - actually i kind of want i should do this
52:53 - right
52:54 - okay sorry everybody i just had to
52:58 - uh oh no i do want to uh
53:02 - rotate before i translate yep okay
53:07 - there we go okay so this will be oh and
53:10 - you know what i should
53:13 - i kind of want to be able to click the
53:14 - mouse and have it restart
53:16 - so i can when i'm making the video so
53:19 - if uh
53:22 - so if i click the mouse it will
53:26 - set these things back
53:29 - and clear the arraylist
53:36 - oops
53:40 - i'm about to be ready to do what i'm
53:42 - doing okay so now if i click the mouse
53:44 - it starts over
53:45 - oh look at that is it starting in the
53:47 - right same place each time
53:49 - yeah okay um okay just checking
53:54 - um i'm not sure x y z refer to position
54:00 - well the thing is you're you're okay so
54:02 - um
54:05 - i'm just checking okay so christopher
54:07 - akiki makes a good point
54:09 - that x y and z don't necessarily refer
54:11 - to position
54:12 - but i'm choosing to visualize the system
54:15 - according to position and actually if
54:16 - you go to paul borg's site
54:18 - he has some sound files where the
54:21 - the values that the lorenz attractor
54:24 - produces are used to like set midi note
54:26 - values and it plays a little
54:28 - song based on lorenz attractor values so
54:30 - you're right that they don't
54:31 - necessarily have to refer to as position
54:33 - but um that's what i'm choosing to use
54:35 - and that's how you get this visual
54:36 - result
54:39 - okay so
54:42 - here we are about an hour in the wiki
54:45 - says they are the state of the system
54:48 - yeah so that's right state variables
54:50 - that makes it i mean
54:51 - they're defining the state of the system
54:53 - so
54:54 - and uh um so how do and i'm visualizing
54:57 - the state that's a good i think that's
54:58 - an
54:58 - important point that i'm probably being
55:01 - kind of muddy about
55:03 - i don't think i ate a big enough
55:04 - breakfast i hope i'm gonna be able to do
55:05 - this coding challenge
55:08 - all right um the whiteboard is clean
55:11 - i have my wikipedia page
55:17 - um i have camera working
55:21 - so all i really need is this
55:25 - uh radar i could refer to
55:28 - these sites as well if i want to
55:37 - and there we go okay so i think ah now i
55:39 - want to get the timer going
55:42 - uh again i'm not going to do a timer
55:44 - counting down like i have some deadline
55:46 - i have to hit but it's useful for me to
55:47 - just sort of
55:48 - see how long it takes and have a sense
55:49 - of it um
55:51 - and the ideas for these coding
55:52 - challenges except for the multi-part
55:54 - ones
55:55 - to be between 10 and 20 minutes because
55:57 - that's i think
55:58 - kind of a good attention span sort of
56:02 - thing okay
56:03 - so i just need to add that in putting
56:06 - this here
56:07 - there we go so you should see it now
56:11 - there and then i just need to change
56:13 - this to stopwatch
56:16 - there so it should be in both shots now
56:19 - the timer stopwatch thing and this is
56:22 - here
56:25 - and i can restart this and you have
56:29 - okay um yes um
56:33 - matthew van den heivel
56:37 - hovel asked will you teach us to code it
56:39 - from scratch
56:40 - this is exactly what i'm planning to do
56:42 - i'm to program it from scratch
56:46 - actually though i want to have
56:52 - that reminded me that i want to at least
56:54 - put in
56:56 - setup and draw and
56:59 - size you know
57:04 - i don't know some arbitrary size and i'm
57:07 - going to say
57:09 - that's fine i'll put in comments later
57:11 - um
57:12 - and there's something else about this
57:14 - that i wanted to do
57:17 - ah which is the font size is this font
57:19 - size reasonable can you guys let me know
57:20 - what do i have it at 36.
57:24 - um you know often what i do is sort of
57:27 - zoom into the code anyway while i'm
57:29 - showing a particular part so let me know
57:30 - if that font size seems reasonable
57:32 - okay 42 people are watching i'm going to
57:36 - check the twitch chat which i've been
57:38 - ignoring
57:41 - yes everybody on twitch the main the
57:43 - most frequently asked question on twitch
57:46 - am i live i am live it is 12 p.m
57:49 - right now in new york city and uh
57:52 - zorizei asks is the guy with glasses
57:54 - that's me the guy with glasses live
57:56 - okay here we go okay thanks for your
58:00 - feedback okay so i'm gonna start this
58:01 - now
58:02 - hopefully not screw it up too much again
58:04 - this thing will be
58:06 - uh this i'm hoping will be about 10 to
58:08 - 20 minutes uh
58:09 - and then i'll see what i have sort of
58:10 - time and energy for after in terms of
58:12 - questions
58:13 - um and um
58:16 - yeah so that's that
58:20 - have a little sip of this here
58:27 - i have trouble getting started as you
58:28 - guys can see you know it's like
58:33 - okay here we go so first thing i have to
58:37 - do is click
58:38 - move this over i have to click start
58:42 - here
58:42 - oh and then i want sorry then i want
58:44 - this open oh and i want the wikipedia
58:46 - page
58:48 - um
58:56 - uh okay
59:04 - yeah i mean the interesting thing about
59:05 - a differential equation is
59:07 - you're not solving for numbers you're
59:10 - solving for a function that satisfies
59:12 - the differential equation but i
59:14 - i can't go too far down that road in
59:17 - this particular video because i want to
59:18 - focus on the code
59:19 - but i would like to see if i could
59:22 - connect the dots a bit more with some of
59:23 - the math
59:24 - maybe somebody will have some
59:26 - suggestions for me okay
59:28 - so here i go uh
59:32 - click start here hello welcome to
59:35 - another coding challenge in this
59:37 - particular coding challenge
59:38 - i didn't get the thing didn't start
59:42 - let's start over again
59:48 - hello and welcome to another coding
59:50 - challenge in this coding challenge i am
59:52 - going to program the system you see over
59:54 - here on your
59:55 - on your right which is the lorenz
59:57 - attractor system
59:59 - how do you what is it why does it exist
60:02 - how does the math behind it work and how
60:04 - do you write the code for the system
60:06 - from scratch
60:06 - this is what i hope to tackle in about
60:09 - 10 to 20 minutes and we'll find out at
60:10 - the end of this video
60:12 - how long this took so there's a lot of
60:14 - references online that you could read
60:16 - about
60:16 - strange attractors chaotic systems all
60:19 - that sort of stuff i'm gonna just sort
60:20 - of pull from
60:21 - the wikipedia page um and and
60:24 - and and and highlight a few key points
60:26 - and the formula before we start writing
60:28 - the code for it so one thing that i'll
60:30 - point out here is this lorenz system
60:32 - is a system of ordinary differential
60:34 - equations
60:35 - so first thing we have to answer is what
60:36 - is a differential equation
60:38 - so if you are a programmer here watching
60:40 - this video you've probably maybe worked
60:42 - in processing or p5.js or done some
60:44 - other things let's think about a object
60:47 - that moves on the screen you have a
60:48 - circle
60:49 - and it's moving it has an x position
60:51 - that's changing over time
60:53 - you might think of that x position as a
60:56 - a variable called dx and it's and its
60:59 - actual x position
61:00 - is x and you would say x equals x plus
61:03 - dx
61:06 - so now another way of thinking about how
61:09 - this system works is this idea
61:11 - i got to start over i got to start over
61:13 - sorry buddy
61:14 - i i don't want to spend too much time
61:18 - on the differential equation part and i
61:21 - was heading down
61:22 - a road that i didn't like try this one
61:25 - more time
61:28 - you you guys are very kind and patient
61:30 - to bear with me but i kind of want i
61:32 - want this video to be
61:35 - particularly good i don't know
61:38 - i'm going to come back over here
61:44 - get myself set up again
61:47 - okay oops i got to close this
61:54 - i also don't recall if i actually cycled
61:56 - the cameras
61:59 - oops
62:02 - um and hold on a second
62:05 - make sure this is working oh boy
62:09 - ah shoot
62:20 - i gotta fix now i screwed this up
62:27 - i'm putting the timer in the right place
62:29 - again
62:31 - and put that down here okay
62:34 - um okay sorry about that everybody
62:37 - uh is this working yes
62:41 - and ah
62:44 - okay okay
62:50 - uh rate of change of one
62:53 - oh sorry how the how the rate of change
62:56 - of one variable
62:58 - is affected by other variables and then
63:01 - what is the rate of change
63:03 - spring example that sort of thing
63:06 - okay uh i see things are happening in
63:09 - the chat
63:10 - again i don't know what they don't seem
63:11 - to be related to okay here we go
63:13 - everybody sorry about that
63:15 - i'm going to try this again
63:21 - hello and welcome to another coding
63:23 - challenge
63:24 - in this coding challenge i am going to
63:25 - implement the system you see over here
63:27 - on the right called the lorenz attractor
63:30 - visualize that in 3d in processing all
63:33 - in one session here which will hopefully
63:35 - be about
63:36 - 10 to 20 minutes we'll see how long it
63:38 - takes i've got a timer running up there
63:40 - okay so before i start actually writing
63:41 - the code for it i want to talk about
63:43 - what this system is why does it exist
63:45 - why is it interesting
63:46 - and how does the math behind it work on
63:48 - a kind of
63:50 - you know higher level and then we'll
63:51 - start looking at the formulas for it and
63:53 - implementing those formulas in code
63:55 - okay so lorenz system you know there's a
63:57 - lot of resources for this online i'm
63:58 - going to put a few in the description of
64:00 - this video a paul bork site
64:01 - is a particularly useful one that i'll
64:03 - just mention really briefly but i'm
64:04 - going to look just at the wikipedia page
64:06 - here
64:06 - which says the lorenz system is a system
64:09 - of ordinary differential equations
64:11 - okay so the first thing we have to
64:13 - tackle here is what is a differential
64:15 - equation
64:16 - i could easily i got a timer writing
64:18 - here i could usually be here for like
64:19 - the rest of the day talking about
64:21 - differential equations and confusing
64:22 - myself
64:23 - over and over again but the basic idea
64:25 - of a differential equation
64:26 - is an equation that looks at how a
64:29 - certain variable
64:30 - changes according to other variables how
64:33 - the rate of change of a variable
64:35 - is affected by other variables in a
64:36 - system that rate of change being a
64:38 - differential so let me give you an
64:40 - actual practical
64:42 - real world example that might help
64:44 - solidify this understanding
64:45 - let's say you have a spring okay so i
64:48 - have a spring connected to
64:50 - a wall with a bob at the bottom and
64:53 - you could think of this spring as having
64:55 - a position called y
64:57 - how does its y position change over time
65:00 - that's often written as
65:01 - the change in y over time you could
65:04 - think of that as
65:04 - in programming speak as y equals y plus
65:08 - the change in y right every frame of
65:10 - animation
65:11 - y changes but it changes based on
65:15 - its uh the rate of change of y actually
65:18 - changes based on the y position itself
65:20 - if you pull it all the way down here how
65:22 - fast it's going to spring back
65:23 - is going to be much more than if you
65:25 - pull it over here so
65:27 - d y over dt the change in y the
65:30 - differential of y
65:31 - is a function of other variables in the
65:33 - system itself y itself
65:35 - this is a differential equation and so
65:38 - you know this actually comes up all the
65:39 - time in programming you have position
65:41 - you have velocity
65:42 - velocity being the derivative the rate
65:44 - of change of position this is a
65:46 - something that you'll see over and over
65:47 - again and here the lorenz system is
65:50 - defined
65:51 - by these particular differential
65:53 - equations
65:54 - the rate of change of x over time the
65:57 - rate of change of y
65:58 - over time and the rate of change of z
66:00 - over time now these
66:02 - variables x y and z those are those
66:04 - define the
66:05 - state of the system but i'm going to use
66:07 - those literally as
66:09 - x y z positions to visualize uh
66:12 - this particular to get this particular
66:14 - structure so if i look at those
66:16 - posit those those values the state x y z
66:19 - over time and draw them with colors and
66:21 - lines
66:21 - i'm going to see this particular um this
66:24 - particular system
66:25 - so why is this system interesting it
66:28 - turns out that
66:28 - the loren system which was you know
66:31 - invented or discovered in 1963 by eduard
66:34 - edvard eduard edward edward lorenz
66:38 - um you know he was studying
66:39 - meteorological conditions the flow of
66:41 - the atmosphere this type of thing
66:43 - it's one of these chaotic non-linear
66:46 - systems
66:47 - meaning whatever the inputs you feed
66:49 - into the system
66:51 - you feed some inputs into the system you
66:53 - calculate that system over time it's a
66:55 - deterministic system that will produce
66:57 - an exact result every time with the same
66:59 - inputs but
67:00 - if you change the input ever so slightly
67:03 - you could get a widely different
67:05 - output it's non-linear a tiny change to
67:07 - the input makes a large change to the
67:09 - output
67:09 - this is the butterfly effect a little
67:11 - butterfly flaps its wings
67:13 - changing the air just a tiny bit
67:16 - in the uh outside on one side of the
67:19 - world and on the other side of the world
67:20 - a giant volcano erupts
67:22 - okay so this is this idea of a
67:24 - non-linear system it's chaotic it's
67:25 - unpredictable
67:27 - and a lot of these types of systems
67:29 - exist in nature and this is one
67:31 - particular example of a model
67:33 - of that type of system okay so now let's
67:35 - look at these formula
67:36 - and let's try to figure out how we're
67:38 - going to actually make this happen in
67:40 - code i think we're ready so
67:42 - we know that i need three variables an x
67:44 - a y and a z
67:45 - so let me go to my uh program here and
67:48 - i'm going to close this one
67:50 - and i'm going to start writing some code
67:51 - from scratch and i am going to give
67:54 - myself
67:56 - an x and a y
67:59 - and a z and i'm going to give them some
68:01 - initial values
68:06 - like that okay so we're good so i saw
68:08 - those equations
68:09 - i know i need an x a y and a z so that's
68:11 - a good start now one thing i should
68:13 - mention really briefly as i'm
68:14 - about five minutes into this is that
68:16 - notice i defined those values as
68:18 - floats if you look at examples you'll
68:20 - find on the internet
68:22 - often the the data type that will be
68:24 - used is a double
68:25 - a double being just like a floating
68:27 - point number but having more decimal
68:28 - places
68:29 - and sometimes with these systems you
68:31 - really need a high degree of accuracy
68:33 - but i'm just some person here on the
68:35 - internet programming colors and things
68:37 - on the screen
68:38 - i don't care if it's a little bit not so
68:40 - accurate and float is a bit more native
68:41 - to processing so i'm going to use floats
68:43 - um okay so now what i need to figure out
68:46 - is i want to kind of implement these
68:49 - equations so let's just start with
68:51 - x the change in x over time equals
68:56 - sigma that's the greek letter sigma
68:58 - times y minus
68:59 - x so first of all i i can't use the
69:02 - greek letter sigma easily in my code so
69:04 - sigma i'm going to make a row i'm going
69:06 - to make b
69:07 - and beta i'm going to make c which i
69:09 - realize is a bit confusing but that's
69:11 - what i'm going to do
69:11 - so those are constants by the way i need
69:14 - constants for those values
69:15 - so let me go back to my code and i'm
69:17 - going to say a float a
69:18 - equals one so i'm just going to start
69:20 - with the constant one
69:22 - now what i'm going to do is have this
69:24 - particular calculation
69:26 - happen over and over over time right
69:28 - it's supposed to happen over time
69:30 - time this is the interesting thing about
69:31 - this those formulas the change in
69:33 - x over time those formulas are talking
69:35 - about real life time that's continuous
69:38 - our time in processing is frame by frame
69:40 - by frame
69:41 - so every cycle through draw is one unit
69:43 - of time so what i'm going to say is that
69:46 - the change in x equals that constant
69:50 - times what y minus
69:53 - x y minus x
69:56 - and now x equals x plus that change in x
70:00 - it's really that simple right i'm just
70:03 - taking that exact formula that says
70:05 - the change in x over time equals
70:08 - the constant times y minus x and now
70:11 - change in x just means change x by that
70:13 - value x equals x plus dx
70:14 - so i can actually start to go and
70:16 - implement y
70:17 - and z the change in y
70:21 - and the change in z and i just need to
70:23 - go back and refer to those formulas
70:25 - again
70:25 - x times b minus z minus y oh god i hope
70:29 - i get this right
70:30 - this is hard to do oh no sorry x
70:33 - x times
70:36 - b minus z times y did i get this right
70:39 - minus y
70:44 - i i want to have spaces there what's
70:45 - wrong here oh it doesn't know what b is
70:47 - i'll fix that later
70:48 - and now the change in z is x times y
70:50 - minus c
70:51 - times z so it's x times y
70:55 - minus c times z
70:58 - so this should be good and now i just
71:00 - need to get some spacing here and i need
71:02 - to also add
71:04 - two more constants float b equals one
71:07 - float
71:08 - c equals one and now i need to just
71:11 - change
71:12 - x y and z x y
71:15 - z x y z
71:18 - y z d y d z okay so this is the idea
71:22 - i implement those formulas directly from
71:24 - the wikipedia page to calculate the
71:26 - change in x the change in y
71:27 - the change is the and then actually
71:28 - change them now here's the thing
71:32 - what is my time there's a weird sort of
71:34 - thing that i'm going to bring up here
71:35 - which is my
71:36 - time step so right
71:40 - now every frame is like a singular unit
71:43 - of time
71:44 - but the the pattern that i'm going to
71:46 - draw right is going to look
71:47 - you know i'm not going to it's going to
71:48 - look something like this and
71:51 - in the sort of continuous world i was
71:53 - moving this marker continuously
71:54 - but in the processing animation world i
71:56 - have point
71:57 - point point point point so how close and
72:00 - i might connect those with a line
72:02 - so do i want to see my result look like
72:04 - this
72:05 - or do i want to see it as more
72:07 - continuous curve how fine do i want
72:09 - those to be
72:10 - and that's the sort of d t right if you
72:13 - think about oops i'm going to come back
72:14 - over here right
72:15 - really i'm saying dx over dt equals
72:17 - something
72:18 - so what i want to do is actually take
72:19 - that something and multiply it by dt
72:22 - what is the change of time for each
72:24 - frame
72:25 - so what i'm going to do is also
72:27 - introduce a variable called dt
72:29 - and i'm going to say it's like zero
72:30 - point i'm just going to make that one
72:32 - for right now
72:33 - but i'm going to take the whole thing
72:36 - and multiply that by dt for each one of
72:38 - these to sort of scale and i'll show you
72:41 - how different that's going to look um
72:46 - as we as i continue doing this so now
72:49 - we've got those formulas implemented now
72:50 - we've got to see
72:51 - is anything working correctly here so i
72:54 - need a way of figuring that out the
72:55 - first way i'm going to do to figure that
72:56 - out
72:57 - is first just make sure i the program
72:59 - runs i'm going to add a black background
73:01 - and i'm going to run it and okay so i
73:03 - don't have any errors that's a good sign
73:05 - you know one thing i could do is i could
73:07 - say print line x y z
73:09 - so i can sort of look at what's being
73:10 - printed out now notice something here
73:12 - all i'm doing is getting the values of
73:14 - zero so there's a little bit of an issue
73:15 - here
73:16 - which is that that doesn't make any
73:17 - sense so i can't start with zero zero
73:19 - if i start with zero zero zero these
73:21 - formulas are only ever going to produce
73:23 - zero zero zero so i gotta modify the
73:24 - inputs a little bit and i'll just start
73:26 - with x as like 0.01
73:28 - that should do pretty well and if i run
73:30 - this again we should see like look
73:32 - i'm getting some interesting values
73:33 - there now what are these values
73:35 - producing anything of note
73:36 - not really but why not well because my
73:39 - constants
73:40 - i just made my constants one one and one
73:42 - so the lorenz attractor
73:44 - works a particular way based on what
73:47 - those
73:48 - input constants are so if i go back to
73:50 - the wikipedia page i could sort of find
73:54 - somewhere on here it's going to give me
73:56 - some values i could use
73:57 - like sigma equals 10 rho equals 28
74:01 - and beta equals 8 divided by 3. so let's
74:03 - use those constants
74:05 - i believe sigma was a
74:08 - b was um b was 28
74:11 - and c was 8 divided by 3
74:14 - and i'm going to do that just to make
74:16 - sure i get a floating point value
74:18 - okay so i think that should work
74:22 - i'm like skeptical and we should see oh
74:24 - not a number
74:25 - okay so what have i done wrong here i
74:27 - might have to time out this video
74:29 - see how long this debugging takes and
74:31 - this might get edited out if it starts
74:33 - to take a really long time
74:34 - but let's look here um so what have i
74:37 - done wrong here
74:38 - uh xyz z
74:42 - so let's let's comment out and just do x
74:44 - for a second
74:48 - and see what i get
74:51 - oops and i just want to look at x
74:55 - oh i had some numbers and then i got not
74:57 - a number for y so i might just be like
74:59 - one is a terrible number for dt
75:01 - because i'm like it's as if i'm
75:02 - teleporting myself through time
75:04 - massively fast so let me just make this
75:06 - 0.01
75:07 - yeah okay this is more like what i
75:09 - expected to see well those numbers are
75:10 - getting incredibly small i hope i
75:12 - implemented this right
75:13 - i have to check my formulas
75:16 - but let's go back here and see if i'm
75:19 - getting some reasonable formulas
75:21 - okay good reason okay so this is better
75:23 - this is what i expected to see okay
75:25 - great so now i'm seeing some numbers
75:27 - that make more sense so my issue there
75:29 - was literally just having and maybe that
75:31 - won't get edited out
75:32 - was just having the number one and it
75:35 - just sort of went off to infinity super
75:36 - fast
75:37 - these systems um they don't have a
75:40 - recognizable repeating pattern and they
75:42 - tend towards
75:43 - they're often 10 towards infinity or
75:44 - some like non-existent value
75:46 - okay so let me go back to 0.01 now i
75:49 - want to be able to figure out is
75:50 - something actually working here
75:52 - so the first thing i'm going to do is
75:53 - just say stroke 255
75:55 - and i'm going to i'm also going to
75:57 - translate to the center of the window
76:00 - and i'm just going to draw a point and
76:02 - i'm just going to do this in 2d
76:03 - so i'm not going to worry about the z i
76:05 - just want to at least see like let me
76:06 - plot those
76:07 - the state of the system over time with x
76:09 - y
76:10 - so let's do that and ah good this is
76:12 - very good so it looks like i
76:14 - did the formulas correctly you could
76:15 - start to see like that's something there
76:17 - so i'm actually we're kind of like we're
76:19 - trucking along here i've got the lorenz
76:21 - system like sort of visualizing right
76:23 - now
76:23 - so that really basically i'm done
76:27 - however i want to make this look like
76:29 - something i want to make this look like
76:30 - a 3d shape
76:31 - i want to maybe add some color to it i
76:32 - want to be able to spin around it i want
76:34 - to
76:34 - i need to do more with it maybe i want
76:36 - to be able to like explode it so that
76:38 - all the points should like fly off of it
76:39 - and come back
76:40 - so i want to do even though in 13
76:41 - minutes we kind of got the math down
76:44 - i want to do more with this in terms of
76:45 - the visual output of it
76:47 - so um so let's go forward with that so
76:50 - the first thing that i'll do is let's
76:52 - just go ahead and work in 3d
76:54 - so i'm going to change the renderer to
76:56 - p3d and then i'm going to add
76:58 - the z point so we should
77:02 - see now that um it's the same
77:05 - it looks pretty similar but there's
77:07 - actually a z value there
77:09 - now one thing i want to add also is just
77:11 - i want to use the uh
77:13 - the processing function scale so scale
77:16 - is a transformation you can add to your
77:17 - scene
77:18 - to kind of like stretch it out a little
77:20 - bit i'm not going to get this through
77:21 - zooming in and out as well
77:22 - but i just want all the points to be
77:23 - sort of spaced out a bit more and look a
77:25 - little bigger so i'm going to
77:26 - basically scale everything by five so we
77:28 - can see yeah so this looks so now i kind
77:30 - of have a bit of a closer view you can
77:31 - see
77:32 - all the points of the lorenz tractor are
77:34 - being plotted in 3d
77:35 - now here's the thing how am i getting
77:38 - all these points on the screen i'm just
77:39 - drawing one point at a time
77:41 - well notice how my background is in
77:43 - setup so
77:44 - this worked just to see that the system
77:46 - was working but it's not going to be a
77:48 - very good solution
77:49 - for eventually over time being able to
77:50 - manipulate this system so what i need
77:52 - is some sort of data structure some sort
77:55 - of list that i can store all the points
77:57 - of the lorenz attractor
77:58 - so let me do that and what i'm going to
78:00 - do for that is an arraylist
78:02 - and this is where we might rather be in
78:03 - javascript and i'll try to make a
78:04 - javascript version of this as well i'm
78:06 - going to call that points
78:08 - i'm going to make that a new empty
78:10 - arraylist
78:12 - so this is the syntax for something in
78:14 - java called an arraylist which is a
78:15 - flexibly sized array
78:17 - something i could just add to and i'm
78:18 - calling it points and the data that i'm
78:20 - going to put into that arraylist
78:21 - are p vector objects why do i want a p
78:24 - vector object
78:25 - is because every single frame i'm going
78:27 - to say
78:28 - points dot add a new p vector with that
78:31 - x y and z okay so i want to add a new
78:34 - vector with x
78:35 - y and z to that particular array list
78:38 - and we can see that this is
78:40 - still working nothing is broken yet and
78:42 - what do i want to do now
78:44 - as those points are being added over
78:45 - time i want to draw all of them because
78:47 - i need to erase the background right
78:49 - so let me let me just show you what i
78:50 - mean i'm going to move this background
78:52 - to draw
78:52 - this is actually going to produce kind
78:53 - of an interesting result because now
78:56 - you're going to see this point i kind of
78:57 - love this
78:58 - just moving along the pattern of the
79:00 - lorenza tractor it's kind of this
79:02 - beautiful
79:02 - interesting kind of chaotic motion i
79:05 - just want to stop and watch it but i'm
79:06 - 15 minutes in i want to see if we can
79:08 - wrap this up in about 20 minutes so i'm
79:09 - going to keep going so
79:11 - what i want to do is instead of just
79:12 - drawing the existing point
79:15 - what i want to do is say
79:19 - for every vector
79:22 - v in that array list points draw a point
79:26 - at v dot x v dot y and v
79:30 - dot z so i'm now saying instead of just
79:32 - drawing the current point
79:33 - loop through and this is known as an
79:34 - enhanced loop in java for
79:36 - every vector v in the arraylist points
79:38 - draw a point at v x v y v y v y v y
79:41 - v y v y v
79:48 - back after a technical hiccup you can
79:50 - see that the entire
79:52 - lorenz attractor is drawn with each
79:54 - element as a separate point
79:56 - based on every p vector that's in that
79:58 - array so
79:59 - really essentially i'm done there you go
80:01 - it's in 3d that's the entire lorenz
80:03 - attractor shape but i do want to add
80:05 - some more things to this
80:07 - and give you some exercises to think
80:08 - about what you might do with this so
80:10 - first let's just change the way we're
80:11 - drawing this a little bit
80:13 - one thing that i could do is connect all
80:15 - the points with a line
80:17 - so instead of drawing everything as a
80:18 - single point i could actually set
80:20 - the vertex of a shape so if i say begin
80:24 - shape before i draw all the points and
80:26 - end shape
80:27 - after i draw all the points with vertex
80:29 - instead of point what that's going to do
80:31 - is connect
80:32 - every point and you're going to see now
80:33 - that whoa it's doing it but it's
80:35 - actually trying to fill it in as if it's
80:37 - an entire shape
80:38 - so there might be some interesting
80:39 - things i could do with that but for now
80:41 - i'm just going to add no
80:42 - fill and we're going to be able to see
80:44 - now this continuous line
80:46 - so i could zoom into it and sort of see
80:48 - that every point is now connected
80:50 - right so now we have this continuous
80:51 - shape which is a nice start of sort of
80:53 - seeing how i could sort of tinker with
80:55 - how this is visually i could also try to
80:57 - come up with like a clever way of
80:59 - changing the colors of it i'm sure that
81:01 - you as a
81:02 - wonderful person on the internet with
81:04 - visual design talent will do something
81:05 - much more interesting
81:06 - but i'll just show you really quickly i
81:08 - already have that in there because i
81:10 - that was from the technical glitch but i
81:11 - could add something called color mode
81:14 - and i could change the color mode to hsb
81:17 - meaning hue
81:17 - saturation brightness so what i could do
81:20 - is set the stroke
81:21 - of with a some sort of hue a saturation
81:24 - of 255 the maximum and a brightness of
81:26 - 255. so i'm now now
81:28 - as i draw it it's going to have a
81:29 - particular kind of like turquoisey
81:31 - greeny hue
81:32 - and why not while i'm doing this um make
81:35 - a variable
81:36 - start it as zero have that variable be
81:39 - the hue
81:40 - and for every single vertex uh increase
81:43 - that by some value
81:45 - and then uh if it goes above 255 uh
81:48 - reset it
81:49 - back to zero and now i should get uh why
81:51 - not have a rainbow since this is coding
81:53 - rainbow
81:54 - uh a rainbow lorenz attractor um powder
81:57 - so you can see as the color is changing
81:59 - we've got kind of yellow
82:00 - red to yellow to orange and that sort of
82:02 - thing so really
82:04 - okay the last thing i want to mention so
82:05 - what's interesting about what i'm doing
82:07 - with this particular strategy
82:08 - separate from the lorenz attractor
82:11 - separate from the lorenz attractor
82:14 - algorithm itself
82:15 - is the fact that every one of these
82:17 - points is saved in memory in that array
82:19 - so one thing i might just demonstrate to
82:21 - you is the fact that those points can be
82:23 - manipulable
82:24 - in real time so for example one thing i
82:26 - could do in processing is i could
82:28 - write a vector called offset uh and i
82:31 - could say p vector dot
82:32 - random 3d that's going to be give me
82:35 - just a random unit vector of unit 1
82:38 - of length 1 pointed in a random
82:40 - direction and i could add that offset
82:44 - to every single vector in the lorenz
82:46 - attractor now if i run this it's kind of
82:48 - going to go crazy
82:49 - because the unit of i've scaled up by
82:51 - five so you can see it's like shaking
82:53 - and jiggling like crazy
82:54 - so what i could do is maybe shrink that
82:57 - offset down quite a bit by you know
82:59 - make it ten percent of the length of
83:00 - itself and you can see now
83:02 - if i zoom into it you can see how the
83:04 - points are kind of moving ever so
83:06 - slightly in space
83:07 - now i'm not suggesting that what i've
83:09 - done is a particularly
83:10 - magnificent result but what if you had
83:13 - all those points move along a sine wave
83:15 - or what if you have those points
83:16 - expand out and then come back to their
83:18 - original location or morph into another
83:19 - shape
83:20 - or fill in the blank of your interesting
83:22 - idea there
83:23 - so what i think i would like you to do
83:26 - now that you've seen how to program this
83:28 - lorenz attractor
83:29 - from scratch you don't have to do
83:30 - anything you're just watching this video
83:32 - maybe you want to go
83:34 - outside and toss a frisbee around or eat
83:36 - some lunch which is what i kind of want
83:37 - to do right now because i'm feeling a
83:38 - little woozy
83:39 - but i think what would be interesting
83:41 - i'd be excited for some of you watching
83:42 - this video to explore is
83:44 - what types of other how can you put your
83:46 - own design spin
83:48 - on this particular shape what happens if
83:50 - you start to manipulate the variables
83:51 - right
83:52 - here are the constants that i'm using
83:54 - make up your own constants
83:55 - look up on the internet some other known
83:57 - constants for the lorenz attractor
83:59 - that produce other kinds of shapes what
84:01 - happens if you change the dt
84:03 - variable what can you mess around with
84:05 - these formulas and get something else
84:06 - can you go to paul
84:07 - could you go to a site and find a
84:08 - different kind of attractor that's not
84:10 - the lorenz one there's a sort of there's
84:12 - a lot of these under the sort of
84:14 - category of strange attractors so try to
84:16 - make your own version of this
84:18 - uh be creative play experiment don't
84:20 - worry too much and share with me
84:22 - your results but this has been hopefully
84:25 - something you've enjoyed
84:26 - which is programming the lorenz
84:28 - attractor from scratch
84:29 - in processing in 3d thank you very much
84:31 - for watching i'm thrilled to have
84:33 - finished this because
84:34 - you might not know there was about a 45
84:35 - minute audio problem i really hope the
84:37 - audio is working right now and this is
84:38 - actually
84:39 - the end of this video thanks for
84:40 - watching and i'll see you in the future
84:42 - in next in another video goodbye
84:46 - okay ah oh that's a great suggestion and
84:49 - the chat by
84:51 - mesa mousavi says animate a camera along
84:53 - the path
84:54 - that would be a really cool
84:58 - okay i think i did it i i don't know to
85:01 - what extent
85:03 - um those i you know i kind of had lost
85:06 - my momentum in rhythm so much but
85:08 - hopefully when it gets put together
85:10 - it'll be a reasonable video tutorial and
85:11 - i could always someday do this one again
85:13 - as
85:13 - i say for everything so i've i've gone
85:15 - for about 45 minutes longer than i had
85:17 - meant to today just because i really
85:18 - wanted to make sure this finished and
85:20 - unfortunately this was the only
85:21 - video tutorial i made although there was
85:23 - a lot of interesting stuff at the
85:24 - beginning
85:25 - hopefully about like questions from the
85:27 - cadenze course
85:29 - so uh a couple things i want to mention
85:31 - uh next week i am traveling to
85:33 - the great country of china i will be in
85:35 - the city of shanghai i've never been
85:37 - there before i'll be there for a week
85:38 - visiting nyu shanghai there's an
85:41 - interactive media arts program that has
85:42 - their big end of semester show i'm going
85:43 - to see their show
85:45 - it's unlikely i'll be able to live
85:46 - stream from there i do hope to record
85:48 - one or two video tutorials or probably
85:49 - just be screen captures which maybe are
85:51 - just as good as my
85:52 - ridiculous system here um but so i'll
85:55 - have some new content i'll be on twitter
85:57 - and on email and that sort of thing
85:59 - uh don't email me that's my one request
86:02 - out of life
86:02 - twitter is great the processing forum is
86:04 - great uh
86:06 - the forum for the cadenza course is
86:08 - great i can't deal with email
86:09 - but you should email me and you should
86:10 - not listen to me no one should listen to
86:12 - anything i say
86:12 - i want to be in touch with you watching
86:15 - um
86:16 - so i um i please
86:19 - if you make something from this let me
86:21 - know be in touch i will publish
86:23 - at some point hopefully in the next 24
86:25 - hours this
86:27 - video tutorial will go online these i'll
86:30 - probably leave the stream archives
86:31 - online
86:32 - somehow there will be two of them i
86:34 - guess this one that worked is the second
86:35 - half and the first half and i'll try to
86:37 - link
86:37 - between them somehow figure it out um
86:40 - but i'm rambling i'm really exhausted
86:42 - from this
86:43 - and so i think i'm gonna go um i'm gonna
86:46 - check the twitch chat
86:48 - i will need a vpn yes i do have a vpn
86:50 - for a while i'm there if you have any
86:51 - suggestions for things that i should
86:52 - make sure to see
86:54 - in shanghai um i would love to hear them
86:57 - uh
86:57 - food that i should eat a particular
86:58 - restaurant or a place to go to uh let me
87:00 - know i'm gonna be there for one week
87:02 - i'll be back may 15th and when i get
87:03 - back
87:04 - i mean assuming i don't continue to have
87:06 - these technical problems
87:07 - i um i'm going to start a patreon i
87:10 - think to uh
87:11 - uh just now that i've been doing this
87:13 - for long enough i feel maybe ready to
87:15 - think about
87:15 - funding this a little bit um
87:19 - you know for myself and also to be able
87:21 - to have some flexibility to spend some
87:23 - money on
87:24 - um getting you know better equipment or
87:26 - better people helping like write
87:28 - descriptions and that
87:28 - that that i already have too now so
87:30 - anyway if you have thoughts about that
87:32 - let me know the real thing that i can't
87:34 - figure out is whether to do i'm leaning
87:36 - towards having the patreon
87:38 - be a charge per live stream or per week
87:41 - that there is a live stream
87:44 - or i could do a monthly thing but i'm
87:45 - just a little bit afraid like what if i
87:46 - go away for two weeks
87:48 - i don't want people to be charged for
87:49 - the monthly thing so i'm really thinking
87:50 - about that if anybody has any clever
87:51 - ideas
87:52 - uh let me know okay do something with
87:55 - the heat
87:56 - okay so i i thank you for being so
87:58 - patient i apologize
88:00 - for your ears that got blown out i hope
88:02 - you're enjoying this and finding this
88:03 - useful send me your feedback get in
88:05 - touch on twitter
88:06 - and in the youtube comments or in the
88:08 - cadenze forum or in the processing forum
88:10 - and i'll see you all sometime soon after
88:13 - may 15th i will not be live
88:15 - probably until fight uh may 15th i think
88:18 - is a sunday so sometime that week
88:19 - possibly not to like the 18th or 19th
88:21 - like wednesday or thursday that week
88:22 - thanks very much and uh you can sign up
88:24 - ah if you're still watching this
88:26 - and you want to know um if you want to
88:28 - get notifications
88:30 - uh if you go to shiffman.net you can
88:32 - sign up for email notifications when
88:34 - there's going to be a live stream
88:35 - in the top right corner okay and i
88:37 - always post on twitter shiffman goodbye

Cleaned transcript:

glitch there in the video i again i'm having some trouble with youtube live but i am streaming live however if you are watching this as an archived video on youtube not watching this live i would encourage you to check this video's description as there will be links to time codes where uh certain tutorials happen as well as actually links to the edited finished versions of these tutorials which you might just want to go ahead and watch um so uh i please in the chat uh let me know if this is uh working in fact i do see on my preview screen that it it seems to have um it says stream resumed that i am live i should so i should be live on youtube and i should be live on twitch and i should have a screen behind me now i had to unplug and restart and do a bunch of things so a few things are now not set as they normally would be i will set those as i continue but let me first just say hello and introduce myself and begin what and talk about a little bit what's gonna happen in today's uh session ah can you please in the chat tell me that you see me because i don't actually see myself in the preview shoot uh um i'm gonna hit oh i do see myself in the preview now okay great okay so hello my name is dan schiffman um this is my youtube channel uh informally known as uh coding rainbow uh and what i do in this channel is make uh tutorials answer questions about creative code making art with code or just sort of learning how to program in general and the environments that i tend to use most often are behind me over here something called processing which is java based and something called p5 which is javascript based and today what i intend to do is talk through how to simulate a chaotic system known as the lorenz attractor and i'm going to use processing and use 3d in order to do that so that's kind of my main topic today before i get to that um i'm gonna i need to just make set up i kind of screwed up uh my whiteboard uh camera so i have to fix that so i have that accessible um um and then i also wanna see if people have general questions in the chat uh and also i have a online course that launched with a company called cadenza just launched a couple days ago and i said i would answer questions if people had questions about session one which is about random walker and vectors and p5.js and there's actually a really interesting question that came up about on the forums there about the keyword this in javascript it's republic versus private variables maybe i'll talk about that a little bit today because i'm sure you all woke up this morning thinking oh i wish somebody would just turn on a youtube stream and talk about the keyword this in javascript to me uh okay so i'm looking at the chat i don't see okay i see live again okay i see encouraging words in the chat like i'm actually working so i just gotta i need to come over to the computer over here which is my this is where i have a um uh and i need to uh just fix this whiteboard shot so hopefully this is going to be a really quick thing ah that worked and then i need to do one more thing which is uh um source settings i i'm just gonna fix one other thing which is i need to select this button that should have done it brilliant brilliant okay so you see that there whiteboard there you see me here there was one other thing which i needed to make sure i did before i started ah i know what it is um um i'm wearing the same shirt as in the video uh yes and this is my video recording shirt if you notice it i just also want to check my video channel my youtube channel because i i tried to start the stream like three or four times and sometimes it leaves these like stray extra videos on the channel so i'm just looking right now in this laptop under my um video manager to see if there are some by accident uh extra videos like may 5th yeah so these look like i'm going to make these private uh so you don't watch them by accident uh okay yes i understand that i can't undo this and once it started it started okay yes yes submit okay so hopefully uh you're still seeing me live everybody everything going well so the first thing i'd like to ask you guys is and i got to get back to the chat here uh live on twitch yep is um yes so the first question how do you pronounce cadenze i think that's why i've been saying it so uh let me just come up here and say cadenze this is my uh this is my current cadenze course called the nature of code which you can enroll in and watch videos for and i will answer questions about in a moment if people have them in the chat i am pretty sure that the way that you pronounce it is cadenze cadenz a like cadenz and the letter a cadenze cadenze somebody tweet cadenzeofficial on twitter and ask them if i'm pronouncing it correctly um and i've got 26 people live here i you know i i was going to send out an announcement to the course list that i am doing this and i will definitely do i mean the course is going all the way through midjuly so i'm going to do and as in you know as some of the topics get a bit more sophisticated i'm going to do some live sessions just about that week which i think to answer questions and that sort of thing was a little hesitant to use cadenza's email blasting system to announce this because i don't want to i don't want to be spamming people and i don't want to be sort of like look like i'm just like promoting random stuff but um i will think about a thoughtful way to do that um in the future i'm i'm vamping here to see if people ask any questions um put the link to nature of code in the description yes so in fact um um it takes some time but after this video gets uh archived um matia who is uh from canada has been helping me with editing videos and uploading them and writing descriptions he's doing an amazing job and so um usually you know within 24 hours he's got the time codes noted down and written into the description so um that's been like a wonderful super helpful because that's one of my i'm very i think that i'm good at turning on record and talking but i'm not so good at that after the fact like keeping things organized so that's that's hopefully going to be help um okay um so all right so um i don't see a lot of questions in the chat right now um i i might check the forum actually it would be sort of fun to just check the forum right now here live and see if there's any questions there but i also i don't know i think i'll do that in a minute um but what i want to do is talk about um the lorenz system so i'm going to at some point start what i hope will be about a 10 to 15 minute tutorial where i build this lorenz system from scratch but what i want to do first is talk through some of the kind of conceptual details behind what this system is um and so that i can kind of maybe you guys will help me with this a bit in the chat if i'm getting things right or wrong um you know what what is a differential equation uh what does it mean in in terms of like mathematics and calculus and what does that mean in terms of actual like code and writing things in software what does it mean for something to be a chaotic system what does it mean for something to be a nonlinear system where did this lorenz system come from so i want to kind of like look at wikipedia and some other resources and talk through that stuff and then i will start the part where i actually just programmed the thing from scratch um okay now i see some questions in the chat about uh the cadenze course so i'm gonna i'm gonna answer those now and then we'll get back to this lorenz stuff okay when creating vectors inside of functions you don't have to initialize them is the question asked by kurt strong um so let me actually see if i can uh pull up one of the examples um i'm going to open up this p5 editor i actually probably have an old version of the editor no it didn't didn't yell at me and so now i want to say open and documents and where where where okay let me do something really quick so by the way the cadenze course just to like for those of you who might be a little confused what i'm talking about i i mentioned already that i have this course on cadenze this course is being taught about physics systems and natural systems using javascript and p5.js i also have a book at uh natureofcode.com this the book is entirely available online as html the book is written with processing java in mind i'm actively working on a javascript version of the book which will come out at some point this summer hopefully by the before the cadenza course ends if i can get it together um so and on github um a there is a repository a github repository i'm going to zoom in on it now this particular link github.com the nature of code examples this is where all the example code is for the original book written in processing if i were to just go over here and type dash p5.js now i am at the repository where all of the examples in p5.js are and i actually want to go back for a second here and show you what i meant to show you down here is also many people have contributed ports of all of the examples to other languages so you can see there's a bunch of versions of it in open frameworks which is a c plus framework a bunch of other javascript ports a ruby port so if you are doing that maybe you're making them all in unity let me know submit a pull request add it to this readme if you don't know how to submit a pull request i made a whole video tutorial about that um i got to get back to the questions um but uh the reason why i'm showing you all of this is because i believe if i go to dash cadenze now oh nope i'll have to just go i have to find this um ah here it is so i made this is a little bit redundant but because as i made the video tutorials for the course little things about the code were like slightly different as i was like kind of doing it live so i have an entirely separate repository mostly redundant from dash examples p5.js but if you want to follow this one along and the reason why i was doing this now is i'm going to quickly just download this repository and open up the random walker example which i believe is what kurt in the chat is currently asking about so whoops let me go here and do i think i will open up this one is this using uh oops can i use it can i do that yes uh yeah okay so let's see if i can now uh read kurt's questions again and answer them as they reference this particular example and this is by the way just a really really basic simple demonstration of a random walk an object on the screen that has a position and that position changes randomly every frame so let me go back to the chat and see what these questions are when creating vectors inside of functions eg walker you don't do you have to initialize them so i'm not sure i entirely understand the question but let's kind of look at this so i would say that so a couple things one this walker function is a special kind of function now it's not special because of anything i um it's not special due with in the way that it's actually written it looks just like any other syntaxwise it's exactly like any other function function name of the function arguments however this i am using it i'm choosing to use it as a constructor function meaning a special function that generates objects and the you can see that because i am executing the function not just as calling the function on its own but with the new keyword new call the function that means the function's job is to make an object and return that object now the reason why it's capital w is just convention so this entire program would work exactly the same way if i made that lowercase w but it would completely break if i take out the new keyword now it doesn't work so the new keyword is really really the only thing in the code that's actually saying i want you to execute this as a constructor function the capital w is just a convention for me visually to see that ah i capitalize my constructor functions so i would say that the vectors that i'm using in the constructor function they have they do have to be initialized in fact they are here so position is but um but position is a vector that's part of the walker object and so it's initial create and initialize and attach to this keyword maybe i'll talk about that for those of you that might be confused by that later and velocity here is just a temporary local variable for this particular example so they are initialized do you think about joining the vectors together when adding vectors in future code example thinking so um so this is interesting so what's happening here is there are two vectors there's a position vector there's a position vector which maybe sets the position of an object and then there is a velocity vector which is explaining how that object should move um over time or just for that particular frame so the next location of the object is here so i'm adding those vectors together position plus position plus velocity equals this vector so in a way adding is like joining vectors in that the operation is you're putting them end to end but what i'm doing is saying position plus velocity and then resetting that to position so now the next position is defined as here and the circle is drawn there so hopefully that answers that question um in p5 editor wire w dot update and w dot display highlighted differently that's interesting um so i don't see them as up color differently here uh oh they are here interesting okay so i have a feeling this is i wouldn't say like a bug exactly but i have a feeling that display is some other key word in javascript uh for something so it's getting even though i'm using it naming it it's getting some so if i were to just change this to um like show and then change this to show it wouldn't have that highlight anymore and the program so i probably shouldn't use the word display since it's kind of conflicting as a keyword with something else um do vectors use floating point numbers by default yes they do except for you know the so certainly in processing the p vector class is defined with floating point uh fields x y and z javascript there's really not a distinction between an integer and a float is just a number and numbers could be an integer or float depending on like all the flexible wonderfulness of javascript or not wonderfulness depending on how you feel on a given day but um but yes everything's using floating point math essentially okay um how does programming in a group work is asked by kunjung sherpa okay so programming a group a great way of doing that is using uh git and github as a tool i mean programming in group i should say like how does programming a group works it works probably best if you can all just hang out have some lunch some fruit some tea hang out in a room together talk to each other share code draw on a whiteboard be with people now a lot of obviously a lot of large complex software projects worked on by large teams globally need some set of software tools to help facilitate that collaboration and for me currently that software tool is known as git and a web service server service that you can use to work with git collaboratively through the internet is github um so and i i have a whole set of i probably if you just search github shiffman on youtube you'll find my set of tutorials about that um okay um andrew kim asks oh and andrew kim is going to be our um set user as moderator andrew i just set you as a moderator so andrew kim has volunteered to try to be a moderator in the chat in case we have um somebody who's very disruptive which we had the other day um so um andrew kim asks how do you use the vector's magnitude versus the angle great question okay i love this there's questions today this is this is by the way what i had always imagined make videos and those things where people could watch do live sessions where people get asked questions i don't know this is i like this this makes me happy okay so let's talk about uh magnitude uh the only one thing that's not making me happy is that this eraser you know i'm really i'm doing my small part to kill the earth because it seems that these paper towels work well to erase on this white board and that eraser does not so i'm i'm gonna try to use this single paper towel today and not make too much of not ruin the earth hopefully i'm putting some good stuff into the world to uh to counteract the bad stuff um like using too many paper towels okay what were we talking about vector okay so this is how uh one thinks of a vector in a twodimensional space as an arrow defining how to get from you know this point to this point uh code wise you probably notice that vector is made up of an x and y component v dot x v dot y there's also a z and you'll see that actually when i do my lorenzo tractor example i'm going to use the z component so this is really kind of what's there in the computer when you're programming with vectors but a vector typically uh in other without can all in addition to being thought of as having components can be thought of as a magnitude meaning the length how long is that vector if you think of a vector a force is the force very strong or is it very weak is it a big long vector or a short vector and then also a direction like am i pushing in this direction or in this direction what's the direct direction and that's often thought of as an angle so when you make if you in p5 you make a vector with create vector you're making it typically with the components with the x and y components however you can access both the angle and the magnitude through functions so if this were the variable v i can say v dot mag and this will return the length of the vector and i can also say v dot heading and this will return the angle associated with that vector i believe it returns it in radians or degrees depending on what the angle mode is now magnitude will work whether you're working with a twodimensional or a threedimensional vector it's just the length of the vector this heading function is only for twodimensional vectors i mean it'll give you an angle but an angle based only on the xy plane so the direction of a vector in threedimensional space cannot be defined as a single value because you need like euler angles or quaternions or something that's going to make me turn off all the cameras and run screaming out to the streets of new york city screaming quaternions help they're after me they're attacking me um okay so that's um heading is deprecated um yeah i don't think heading so heading it used to be called heading in processing it used to be called heading 2d to emphasize that it was only for a twodimensional vector but now that's deprecated now just called heading i've been talking for a half an hour because that's when these cameras turn off by the way i'm using uh canon 5d cameras and they're being passed through this sort of black magic box as capture devices and then streamed out to youtube so this is the mark ii i'm pretty sure if i ever could get my hands on the mark iii camera it has a lot more features for doing this kind of like live streaming stuff um so someday once i start my patreon and raise a lot of money i will get some better equipment actually a lot of this equipment is on loan from nyu so thank you to nyu for helping me with that okay um okay so christopher akiki asks how is it you add velocities and accelerations and positions together i'm sure i'm missing something in terms of dimensional analysis okay so one thing is i i should say that um i'm pretty sure that that is um this particular question is covered quite a bit in the cadenza videos itself so i'd encourage you to go check those out um but basically um adding vectors means like i said before putting them visually it's putting them end to end you know obviously when you're adding numbers you use the plus sign to say 5 plus 6 equals 11. if you have vector variables the plus operator does not work with vector variables because plus the plus operator the computer only knows how to interpret that as adding numbers so there is if you have a vector v1 and you want to add it there is an add function and so um so that's the way you add now acceleration is the rate oh this is perfect because this totally relates to this idea of differential equations that i want to talk about but acceleration is the rate of change of velocity velocity is the rate of change of position so acceleration gets added to velocity as it change velocity is changing over time based on an object's acceleration and the position is changing over time based on the object's velocity so this is like a perfect segue into the lorenz attractor stuff but i'm just going to check the chat really quick before i get to that um heading is a weird way to name that i agree it could just be direction the reason why it's called heading is because typically you might use it to let's say you have um i can just pull up um uh hopefully this is gonna work uh so this particular example um if you look at the this is my flocking example and i will uh this is covered this will be covered in detail hey where did everything go look at this i got a bug report somebody file a bug on uh github.com processing processing docs um the processing docs repository uh tag at shiftment in it if you or um and say uh i need to fix this example to have a wraparound so the flock doesn't leave i don't know i thought that was in there but the borders function for whatever reason is not being called this borders function to check if they're at the edges so someone file that on github because i will fix that but what i wanted to show you before they all run away is you can see each one of these triangles is pointing in the direction of its velocity so as it moves it's rotating in that direction look they're still here they're going to go away are they going to come back now i don't know maybe they're maybe they're just oh wait now it's working don't file that bug oh is it just maybe it's just working left and right but not up and down that's interesting look go down and they're not coming out the top oh and it didn't even work that that's weird oh maybe it works only on one edge i don't know i have to investigate that and fix that but the point of what i'm saying is that um you often want an object moving pointing in the direction that it's moving that's its heading so to speak so you rotate by the angle of the velocity vector um okay lucas king asks this is maybe a dumb question i 100 do not believe this will be a dumb question but i was wondering what's inside the random function how exactly does a computer generate random numbers oh my god this is the farthest thing from a dumb question whatsoever in fact this is a phenomenally important question and it is really a fundamental question to how generative algorithmic systems work and are developed so um you know without i would love to make a particular video maybe just on this topic uh and maybe uh implement some random number generation in a video but let's just sort of say the key term here is pseudo random numbers so randomness right if you think about what randomness really is is it is a uh let me pull up my examples actually this is so i'm gonna i'm gonna go in processing i'm pretty sure that i have all my nature of code examples here so i should have random graph so um whoops processing quit unexpectedly oh boy okay come back processing let me close this window um okay so what i want to talk about is random number generation and let me i'm going to interpret so by the way if you don't have the nature of code examples in your processing you can get it by going to uh clicking add examples and you'll see here all you have to do is click nature of code and click uh install down here but i've already done that so what i'm looking for is in the introduction i'm looking for a particular example called um random distribution interesting i think that's what i'm looking for random graph i was also going but let's look at random distribution so i'm going to run this example so what this example is demonstrating let me run it is it is picking a random number 1 2 3 4 5 6 7 8 9 10 11 12 however many bars there are and each time it picks that random number it raises that bar so if a perfect random number generator would give you a completely unpredictable random number every single time you ask for it but over time you would get a perfectly even distribution of all numbers right it should pick the number five just as many times as it picks the number eight so now randomness you know if you had some kind of like fancy machine that like measured the movement of electrons around like a nucleus you could there's probably some like thermodynamic perfect randomness there that you could measure and in fact i think some um this becomes a question for like online gambling software like a poker online a poker gambling software that needs to produce a random shuffle if you could reverse engineer their random number generator you could hack their system and know what cards are coming and do a lot of nefarious things so i i feel like i remember reading like an article about some like online poker company that actually had like a bank of like these machines that were uh bubbling up like gaseous particles and using that to measure randomness but in processing that's not happening what's happening is it's using something called pseudo random number generation oh i would i wish i had a great prop here which i'm going to refer to this in a second so pseudo random number generation is this idea of oh could we find a mathematical function that if you passed a number into it it would give you sort of another number back and if you fed that number back into it it would give you another number back and those numbers over time would exhibit the properties close to sort of perfect randomness and that's what's happening there's just a mathematical function you know people probably spend their lives researching or their phd dissertations inventing better pseudo random number generation functions um but you could see that for for as a creative coder somebody making an art installation or whatever it's fine if it's like you know not the best um the most perfect random number generator um and over time this the random number generator that processing is using would in fact exhibit a pattern now i'm going to show you i i think i actually dare i say i think i worked on some of the implementing the random number generator for p5 so i'm going to go to um so i know where it is i apologize if i'm wrong and somebody else did it but i'm going to go in the p5 under source under math and go to random and you can see here ah yes there it is so this is the random number generator function that's in p5 it is called a linear con congruential generator a variant of a lehman generator and you can look up this wikipedia page called numerical recipes and you can see that it is just some function it uses some arbitrary constants and then it runs this code and gives back a random number generator and what's key about this though is that there is a seed and um uh what's so funny about this is so okay so random number of generators need a seed and the seed is the first number that's passed into it to get the first random number generator this is actually incredibly useful because if you always want to get the same if you want to get random numbers but you want to get the same exact sequence over time you can set the seed and there is a function both in processing and p5 called set seed so let's say you are making a a generative poster design program and your program generates these poster designs and what you want is to run it a bunch of times and generate a pdf and you it's going to be random but you want the exact same one every time and then maybe you want a different one or you want to be able to like go back and get the one you had before you could always set the seed in your setup function um now you could set uh you could just send it to like the number five or the number 63 what's funny about this is pro p5 and a uh p5 grabs a seed from like the native javascript random number generator if you don't give it one which is kind of funny it's using somebody else's random number generator to get your random seed for your random number generator and if we looked up in the processing source code i'd love somebody to go do that let me know you can see how it's seated you know sometimes random number generators are seated based on like the number of milliseconds since the computer booted up or the time of day or the mouse location on the screen you've got to come up with something that's kind of randomish to use as a seed okay so hopefully that helped uh um it a question here's another question actually i probably missed some questions uh okay um is it really important that you write unit tests for the programs you write you are so asking the wrong person this question because my answer is definitively no it's not important however i'm sure there are many instances where it is quite important and you'll see that large software projects that you know really need to be working and not have issues and are managed by large teams having unit tests can be an incredibly valuable uh tool to as you make it what does a unit test do by the way so a unit test is something that runs separately when you make so let's say you're building a library like p5.js and you change the code in the library the unit tests are programs that run using your new version of library and check to make sure things aren't broken and they can do that by you know testing certain functions knowing what the answer should be seeing what the result is and comparing it to the known answer so what i what i would be um wary of as a kind of you know prototyper maker of things sketching out ideas you don't want to get so lost in making unit tests for your thing that you never make the thing itself so you know and a lot of things you're doing if you're making an interactive project what i would say is more crucial than unit testing is user testing so you know you can get is the program working does it make sense does your idea communicate what you want to communicate through users so i would say user testing is really important unit testing i would sort of it sort of depends on the scenario um oh yes okay so andrew kim mentions um mentions what i wanted to mention i have this book but it's at my office at itp so i don't have it with you but i'll bring it up now which is a million random digits so back in the old days olden times uh let me just see if i can google image search this um uh the um you know if you didn't have a pseudorandom number generator or it's a computer super computer to generate random numbers for you and you wanted to do some type of what's often referred to as a monte carlo simulation simulate out some idea ran with random numbers over and over again this is actually a book published by the rand corporation with just like pages and pages of sequences of random numbers and incidentally you know how i was saying before in processing that um that these uh what you want is an even distribution of random numbers that's what you want for a pseudo random number generation with a i don't want to say normal because normal is another word for the gaussian distribution uniform that's what it is this is known as a uniform distribution where you have an equal probability of any number being picked at any time but this is not always what you want perhaps you want to pick random numbers but you want to pick higher random numbers more often than lower random numbers when i get to genetic algorithms in my cadenza course you want to pick randomly you want to pick randomly from a population to make uh the next generation but certain members of that population should have a higher probability of being picked and then of course there are wellknown distributions and i'm going to try to uh i think this particular sketch this is the the bell curve or a gaussian distribution so if you want to simulate um heights let's say you want to simulate a a collection of people and you want to pick heights for those people randomly well and p and you decide that in your alien world peop aliens forget about people aliens are between three feet and seven feet well maybe there's a sort of average height around five feet yes five feet that's the average of three and seven but most people cluster around the average so you would want to more often have people that are around five feet and less often so this is showing you the probability map of of how often you want things and that's known as you know bell curve is uh you know with um you can see is there a y distribution a very uh thin distribu thin distribution um i need to take a drink of tea here i just like i lost steam for a second but hopefully that makes sense and helps you guys peter quan says that his company logo is a gaussian curve um it's only important this is uh nuna costa makes an excellent point saying it's only important to have unit tests if you don't want your flock of triangles to fly away so yes you can see that if there was some type of unit test to test the examples there on the processing website it might have caught that but i would say another unit test for that is uh you know the collective consciousness the collaborative what's the crowdsourced error reporting um okay um so a nine cat fan asks uh how andrew got moderator so what happened the other day just to mention and i should check twitch i apologize um a galvabart on twitch asks if this is live yes it's live um uh so that that proves that it's live by me checking twitch real quick um so something happened the other day where somebody came into the chat and was using some kind of offensive language and just filling up the chat with like a zillion comments and i didn't notice it for quite a while and then i went and just turned that person off um and so um i think it's useful just to have somebody in the chat who can kind of make you know as best they can just kind of decisions about that if we have someone that's there that's um you know so disruptive that it's that they need to be muted um and so andrew volunteered to do that and i assigned to the moderator if anybody else wants to uh be a moderator i uh you all seem like nice lovely trusted people i'm happy to make all of you moderators okay i don't know what you get to do as a moderator um it would be great if what you could do is alert me when my sound battery dies but i have a new system of charging the batteries overnight and i've got three bars each okay so i've been streaming now for about 35 minutes and i think i want to start getting to um um i think i want to start getting to my lorenz attractor coding challenge so i'm going to kind of poke around some urls here and get set up for that okay let's see loren's system okay so okay first of all if you guys don't know about paul bork basically paul bork has a website i think which outlines every single coding challenge i want to get to and just has an explanation of the code for it so you really just turn off my stream and i should just basically say thank you paul bork if i ever make any money from this i need to send you some royalties um paul bork uh paul bork i'm just gonna search lorenz so uh paul bork and maybe i'll go to paul borg's uh main url uh has a public i believe is a researcher located in australia in sydney and there's a lot of papers and pages and a lot of these are from many many years ago with like you know very simple c code implementing a lot of these kind of classic computational algorithms and so one that i want to look at today is the lorenz attractor and you can see this is paul bork's page where there's a nice explanation showing the formulas i want to talk about like ah these formulas look scary what do they mean this is some of the example output and then what i want to show you as i scroll down here is to show you he usually also always has just the kind of some really basic c code and you can see that the c code is actually not drawing anything it's just an algorithm that's printing out the xyz coordinates of the result of that algorithm so one thing i could do is take this and like paste it into processing and translate it into java and add the sort of drawing stuff but i think what i'm going to do is when i do the tutorials build it from scratch by looking at the formulas and trying to understand them because i think that might in the end actually be a bit more useful but i want to make sure i reference paul borg's site because i have learned so much from this site the other thing that i think is worth mentioning is like so on the one hand why am i here doing this i think it's valuable to learn these skills to unlock new ideas and possibilities in your head be creative with them play experiment and teach others there's all sorts of possible things i do know that there is this sort of thread this conversation that happens in the kind of computational art world so to speak which is you know is this like a cliche like if you take this exact algorithm generate it pick some colors and print out a you know pdf of it and put it in an art gallery on the wall is that good or bad or good you know what's what have you done there so i'm going to completely stay away from that question i do think that it's important for you to think about if what's the context of how you're using these algorithms and why you're using those algorithms but i'm going to leave that for you to discuss to tweet me to discuss it in another context uh that's different from this and my goal today is really just the tutorial aspect of it and um you know i think there is a lot of value in recreating things that other people have made to discover something new to learn about it to be inspired by it um and also just as practice so to speak so so that's uh spectron asks will videos be recorded oh spectron says i feel like i'm getting ignored oh i don't want that to happen um uh oh kendall okay sorry i see now there's a question um spectron asks if i'll get back to lorenzo tractor i don't want anyone to feel ignored can you link a random number on a range with random and transforming it into a normal gaussian distributed random number okay so this is a great question how do you get that different range this really merits a whole separate tutorial just about that i definitely have some in my youtube nature of code playlist different distributions of random numbers i recall making some videos like that but for processing the random function does not do that for you it just gives you a uniform distribution there is a function processing called random gaussian which will give you gaussian random numbers uh there are java classes for this i'm sure there are javascript uh libraries and frameworks which will do this for you also but ultimately you need your own algorithm to specify to like manipulate the random number generator and um in the cadenza course i actually go over this also when i get to the genetic algorithms part uh okay um yes uh okay um uh oh yeah and spectron by the way makes wonderful coding challenge tutorial videos in french so if you're french uh check out spectron's channel um okay um now back to the lorenz system okay so that's that's my introduction to what it is i'm doing now the one company i want to read a couple things to you guys which um which i will keep in my head as i start so the lorenz attractor it was uh first study by someone named ed lorenz this is from 1963. uh thank you paul burke for providing me with my materials to read um and it it was derived from a simplified model of convection in the earth's atmosphere so it's interesting about these kinds of algorithms something known as a strange attractor or a chaotic system they're nonlinear systems is that they are models of things that exist in nature where uh if you are if you plug this sort of initial variables into the system the output is deterministic meaning it will happen exactly as the math dictates however if you change the inputs ever so slightly the output will be wildly different so that that's sort of the chaos of it it's unpredictable it's nonlinear meaning a slight change in an input value makes a massive change in an output value this is also known as the butterfly effect right a butterfly flapping its wings a slight change in the earth's atmosphere would cause some major event you know volcano eruption on the other side of the world whether that that actually happens with a butterfly is i think an interesting question to discuss but that's the idea here so this is an example of a system like that okay now those systems exist in nature those systems are defined by and i'm probably going to repeat a lot of this when i start to like record the actual video tutorial maybe i'm doing it already but i want to make a kind of condensed version of it that focuses on the code so i'm kind of talking it through to kind of remind myself how the stuff works and and rely on you in the chat to say actually you're getting this wrong if you if you think about so now this um all runs on a differential um a differential equation so this is what i wanted to try to sort of wrap my head around trying to explain in the sort of creative coding context because you could definitely go and watch a kind of like what is a differential equation video on cod academy or other you know math type lecture type materials but it will be very focused on the sort of calculus path you know derivative and integral first derivative second derivative that sort of more abstractly and so what i want to try to describe and i'm going to do this probably a couple times um is uh what is a differential equation and how does how does it how what is a differential equation just sort of higher level and how does this abstractly um how does this abstractly i'm sorry i'm apparently i can't do the thing where i tap my head and rub my stomach because i can't think while i'm erasing how does it why is a differential equation relevant to a creative coding context so another resource that i think is useful for this is this particular url myphysicslab.com i'm sure you could google for this and i'll include a link what is a differential equation and this i think is a really nice succinct summary that sort of stays away from some of the kind of calculus aspects that are unnecessary for what we're doing although important and interesting in their own right i'm just checking nobody is complaining in the chat yet a differential equation states how a rate of change a differential in one variable is related to other variables so let's think about this in the context of nature of code physics simulation you have a position and let's just think of a position only as an x value so position along a onedimensional axis you know you could say the change in x so okay so this position can have a velocity which is the change in x over time this is often written as dx over dt equals something this is essentially a differential equation um how does the how do certain variables affect the rate of change of other variables um and let's see another let's let's look um let's look at this this is described here as like a a spring uh oh a spring is a great oh i'm sorry i came over here so a spring um is a great um is there anything like am i doing anything wrong by using other people's online materials to do this teaching anyway hopefully now i would do this in the classroom but somehow when i'm broadcasting this and then i don't know but hopefully i'm just i would be happy for somebody else to use buy stuff that i put online so i hope it's okay i think anyway i'll keep going to keep going here the rate of change um okay the rate of change in velocity is proportional to the position so let's think about that in in the spring context um so if you have a spring which i could draw like this i was actually thinking of a pendulum when thinking about this but i think spring is good so in other words aha if you pull this out really far if you stretch that spring really far then um then it's going to uh spring back really fast so it's position that the velocity of this spring is relative to its position so that's the differential equation how is its velocity the rate of change of its position related to the variable position itself so that's kind of like the basic idea of a differential equation how does the difference of a variable affect uh let me look back at how that was described here again because i said it wrong uh the rate of change the rate of change is the differential and by the way this derivative uh uh is uh is another way of saying kind of rate of change um so in one variable's rate of other values so that's the idea so now if i go to wikipedia we can see aha this gives us a little more sense of what it means for the what these lorenz equations are lorenz equation is keeping track of the rate of change of a particle in space in three dimensional space how does the x change how does the y change how does the z change and it changes based on its position also it's x it's wide at z and some other constants you guys are gonna have to help me with this sigma rho beta did i get that right that's the greek letter sigma lowercase the greek letter rho and the greek letter beta the other half of my family is greek so i should know this stuff um uh let's see um so somebody in the chat tell me if i got say you got your greek letters right you got your greek letters wrong because i would really like to know that um okay so i think that's so what i need to do now is translate this into code so that's my that's my introduction to the idea of what is the lorenz attractor and what is a differential equation and how does and how does that relate to code the next thing is to actually program it so i'm gonna as much as i should probably practice programming it and then record and then start the actual lesson i'm gonna i think i'm getting ready to do the challenge i'm gonna set the timer i'm gonna give a quick introduction and then refer to this and then start programming so leave me your feedback or comment in the chat right now if i got anything wrong or anything was confusing or that sort of thing i got my greek letters right somebody said that's lucky okay so let me i'm just gonna erase the whiteboard here i'm going to i think i'm going to do the same explanation about uh differential equations and then i'm going to refer to the wikipedia page and then i'm going to build the code and let me actually run i'm going to you know i i have a version of this example which i cooked up this morning really quick so let me open that is that open already or no um sorry uh open recent it should be here uh strange attractor okay so this is i just want to have this running okay so oh camera that went off okay so um this is the oh i guess i made some changes to it and didn't save those changes um because whoops okay hold on i have to fix a couple things uh i'm just gonna i want to have a visual reference running when when i start i swear i made these change ah weird did i restart the computer or change the name of it or save it somewhere else that's really weird uh hold on everybody i i have to um i'm just gonna save this as uh underscore and then uh i want to take this out and i want to put um oh that's right okay i just want to check make sure this is working you know why i lost the three the z oh right okay no wonder bear with me for a second everybody while i get this working okay so this is essentially the example i'm going to build from scratch and actually i'm also going to do another thing here which is translate by a negative like 80. i believe would be the middle if i'm right about that no no 0 0. i want to put it back a little bit yeah okay that's good i wanted to sort of rotate around the center uh and so let me see here then i want to open a blank sketch which will which i will program oh i mean the uh let me just do save as lorenz um okay uh 800 600 this should work pretty well this will be where my code is this is a visual reference to start with i should have maybe i should have this spinning automatically i'll put that back in uh since uh shoot here we go actually i kind of want i should do this right okay sorry everybody i just had to uh oh no i do want to uh rotate before i translate yep okay there we go okay so this will be oh and you know what i should i kind of want to be able to click the mouse and have it restart so i can when i'm making the video so if uh so if i click the mouse it will set these things back and clear the arraylist oops i'm about to be ready to do what i'm doing okay so now if i click the mouse it starts over oh look at that is it starting in the right same place each time yeah okay um okay just checking um i'm not sure x y z refer to position well the thing is you're you're okay so um i'm just checking okay so christopher akiki makes a good point that x y and z don't necessarily refer to position but i'm choosing to visualize the system according to position and actually if you go to paul borg's site he has some sound files where the the values that the lorenz attractor produces are used to like set midi note values and it plays a little song based on lorenz attractor values so you're right that they don't necessarily have to refer to as position but um that's what i'm choosing to use and that's how you get this visual result okay so here we are about an hour in the wiki says they are the state of the system yeah so that's right state variables that makes it i mean they're defining the state of the system so and uh um so how do and i'm visualizing the state that's a good i think that's an important point that i'm probably being kind of muddy about i don't think i ate a big enough breakfast i hope i'm gonna be able to do this coding challenge all right um the whiteboard is clean i have my wikipedia page um i have camera working so all i really need is this uh radar i could refer to these sites as well if i want to and there we go okay so i think ah now i want to get the timer going uh again i'm not going to do a timer counting down like i have some deadline i have to hit but it's useful for me to just sort of see how long it takes and have a sense of it um and the ideas for these coding challenges except for the multipart ones to be between 10 and 20 minutes because that's i think kind of a good attention span sort of thing okay so i just need to add that in putting this here there we go so you should see it now there and then i just need to change this to stopwatch there so it should be in both shots now the timer stopwatch thing and this is here and i can restart this and you have okay um yes um matthew van den heivel hovel asked will you teach us to code it from scratch this is exactly what i'm planning to do i'm to program it from scratch actually though i want to have that reminded me that i want to at least put in setup and draw and size you know i don't know some arbitrary size and i'm going to say that's fine i'll put in comments later um and there's something else about this that i wanted to do ah which is the font size is this font size reasonable can you guys let me know what do i have it at 36. um you know often what i do is sort of zoom into the code anyway while i'm showing a particular part so let me know if that font size seems reasonable okay 42 people are watching i'm going to check the twitch chat which i've been ignoring yes everybody on twitch the main the most frequently asked question on twitch am i live i am live it is 12 p.m right now in new york city and uh zorizei asks is the guy with glasses that's me the guy with glasses live okay here we go okay thanks for your feedback okay so i'm gonna start this now hopefully not screw it up too much again this thing will be uh this i'm hoping will be about 10 to 20 minutes uh and then i'll see what i have sort of time and energy for after in terms of questions um and um yeah so that's that have a little sip of this here i have trouble getting started as you guys can see you know it's like okay here we go so first thing i have to do is click move this over i have to click start here oh and then i want sorry then i want this open oh and i want the wikipedia page um uh okay yeah i mean the interesting thing about a differential equation is you're not solving for numbers you're solving for a function that satisfies the differential equation but i i can't go too far down that road in this particular video because i want to focus on the code but i would like to see if i could connect the dots a bit more with some of the math maybe somebody will have some suggestions for me okay so here i go uh click start here hello welcome to another coding challenge in this particular coding challenge i didn't get the thing didn't start let's start over again hello and welcome to another coding challenge in this coding challenge i am going to program the system you see over here on your on your right which is the lorenz attractor system how do you what is it why does it exist how does the math behind it work and how do you write the code for the system from scratch this is what i hope to tackle in about 10 to 20 minutes and we'll find out at the end of this video how long this took so there's a lot of references online that you could read about strange attractors chaotic systems all that sort of stuff i'm gonna just sort of pull from the wikipedia page um and and and and and highlight a few key points and the formula before we start writing the code for it so one thing that i'll point out here is this lorenz system is a system of ordinary differential equations so first thing we have to answer is what is a differential equation so if you are a programmer here watching this video you've probably maybe worked in processing or p5.js or done some other things let's think about a object that moves on the screen you have a circle and it's moving it has an x position that's changing over time you might think of that x position as a a variable called dx and it's and its actual x position is x and you would say x equals x plus dx so now another way of thinking about how this system works is this idea i got to start over i got to start over sorry buddy i i don't want to spend too much time on the differential equation part and i was heading down a road that i didn't like try this one more time you you guys are very kind and patient to bear with me but i kind of want i want this video to be particularly good i don't know i'm going to come back over here get myself set up again okay oops i got to close this i also don't recall if i actually cycled the cameras oops um and hold on a second make sure this is working oh boy ah shoot i gotta fix now i screwed this up i'm putting the timer in the right place again and put that down here okay um okay sorry about that everybody uh is this working yes and ah okay okay uh rate of change of one oh sorry how the how the rate of change of one variable is affected by other variables and then what is the rate of change spring example that sort of thing okay uh i see things are happening in the chat again i don't know what they don't seem to be related to okay here we go everybody sorry about that i'm going to try this again hello and welcome to another coding challenge in this coding challenge i am going to implement the system you see over here on the right called the lorenz attractor visualize that in 3d in processing all in one session here which will hopefully be about 10 to 20 minutes we'll see how long it takes i've got a timer running up there okay so before i start actually writing the code for it i want to talk about what this system is why does it exist why is it interesting and how does the math behind it work on a kind of you know higher level and then we'll start looking at the formulas for it and implementing those formulas in code okay so lorenz system you know there's a lot of resources for this online i'm going to put a few in the description of this video a paul bork site is a particularly useful one that i'll just mention really briefly but i'm going to look just at the wikipedia page here which says the lorenz system is a system of ordinary differential equations okay so the first thing we have to tackle here is what is a differential equation i could easily i got a timer writing here i could usually be here for like the rest of the day talking about differential equations and confusing myself over and over again but the basic idea of a differential equation is an equation that looks at how a certain variable changes according to other variables how the rate of change of a variable is affected by other variables in a system that rate of change being a differential so let me give you an actual practical real world example that might help solidify this understanding let's say you have a spring okay so i have a spring connected to a wall with a bob at the bottom and you could think of this spring as having a position called y how does its y position change over time that's often written as the change in y over time you could think of that as in programming speak as y equals y plus the change in y right every frame of animation y changes but it changes based on its uh the rate of change of y actually changes based on the y position itself if you pull it all the way down here how fast it's going to spring back is going to be much more than if you pull it over here so d y over dt the change in y the differential of y is a function of other variables in the system itself y itself this is a differential equation and so you know this actually comes up all the time in programming you have position you have velocity velocity being the derivative the rate of change of position this is a something that you'll see over and over again and here the lorenz system is defined by these particular differential equations the rate of change of x over time the rate of change of y over time and the rate of change of z over time now these variables x y and z those are those define the state of the system but i'm going to use those literally as x y z positions to visualize uh this particular to get this particular structure so if i look at those posit those those values the state x y z over time and draw them with colors and lines i'm going to see this particular um this particular system so why is this system interesting it turns out that the loren system which was you know invented or discovered in 1963 by eduard edvard eduard edward edward lorenz um you know he was studying meteorological conditions the flow of the atmosphere this type of thing it's one of these chaotic nonlinear systems meaning whatever the inputs you feed into the system you feed some inputs into the system you calculate that system over time it's a deterministic system that will produce an exact result every time with the same inputs but if you change the input ever so slightly you could get a widely different output it's nonlinear a tiny change to the input makes a large change to the output this is the butterfly effect a little butterfly flaps its wings changing the air just a tiny bit in the uh outside on one side of the world and on the other side of the world a giant volcano erupts okay so this is this idea of a nonlinear system it's chaotic it's unpredictable and a lot of these types of systems exist in nature and this is one particular example of a model of that type of system okay so now let's look at these formula and let's try to figure out how we're going to actually make this happen in code i think we're ready so we know that i need three variables an x a y and a z so let me go to my uh program here and i'm going to close this one and i'm going to start writing some code from scratch and i am going to give myself an x and a y and a z and i'm going to give them some initial values like that okay so we're good so i saw those equations i know i need an x a y and a z so that's a good start now one thing i should mention really briefly as i'm about five minutes into this is that notice i defined those values as floats if you look at examples you'll find on the internet often the the data type that will be used is a double a double being just like a floating point number but having more decimal places and sometimes with these systems you really need a high degree of accuracy but i'm just some person here on the internet programming colors and things on the screen i don't care if it's a little bit not so accurate and float is a bit more native to processing so i'm going to use floats um okay so now what i need to figure out is i want to kind of implement these equations so let's just start with x the change in x over time equals sigma that's the greek letter sigma times y minus x so first of all i i can't use the greek letter sigma easily in my code so sigma i'm going to make a row i'm going to make b and beta i'm going to make c which i realize is a bit confusing but that's what i'm going to do so those are constants by the way i need constants for those values so let me go back to my code and i'm going to say a float a equals one so i'm just going to start with the constant one now what i'm going to do is have this particular calculation happen over and over over time right it's supposed to happen over time time this is the interesting thing about this those formulas the change in x over time those formulas are talking about real life time that's continuous our time in processing is frame by frame by frame so every cycle through draw is one unit of time so what i'm going to say is that the change in x equals that constant times what y minus x y minus x and now x equals x plus that change in x it's really that simple right i'm just taking that exact formula that says the change in x over time equals the constant times y minus x and now change in x just means change x by that value x equals x plus dx so i can actually start to go and implement y and z the change in y and the change in z and i just need to go back and refer to those formulas again x times b minus z minus y oh god i hope i get this right this is hard to do oh no sorry x x times b minus z times y did i get this right minus y i i want to have spaces there what's wrong here oh it doesn't know what b is i'll fix that later and now the change in z is x times y minus c times z so it's x times y minus c times z so this should be good and now i just need to get some spacing here and i need to also add two more constants float b equals one float c equals one and now i need to just change x y and z x y z x y z y z d y d z okay so this is the idea i implement those formulas directly from the wikipedia page to calculate the change in x the change in y the change is the and then actually change them now here's the thing what is my time there's a weird sort of thing that i'm going to bring up here which is my time step so right now every frame is like a singular unit of time but the the pattern that i'm going to draw right is going to look you know i'm not going to it's going to look something like this and in the sort of continuous world i was moving this marker continuously but in the processing animation world i have point point point point point so how close and i might connect those with a line so do i want to see my result look like this or do i want to see it as more continuous curve how fine do i want those to be and that's the sort of d t right if you think about oops i'm going to come back over here right really i'm saying dx over dt equals something so what i want to do is actually take that something and multiply it by dt what is the change of time for each frame so what i'm going to do is also introduce a variable called dt and i'm going to say it's like zero point i'm just going to make that one for right now but i'm going to take the whole thing and multiply that by dt for each one of these to sort of scale and i'll show you how different that's going to look um as we as i continue doing this so now we've got those formulas implemented now we've got to see is anything working correctly here so i need a way of figuring that out the first way i'm going to do to figure that out is first just make sure i the program runs i'm going to add a black background and i'm going to run it and okay so i don't have any errors that's a good sign you know one thing i could do is i could say print line x y z so i can sort of look at what's being printed out now notice something here all i'm doing is getting the values of zero so there's a little bit of an issue here which is that that doesn't make any sense so i can't start with zero zero if i start with zero zero zero these formulas are only ever going to produce zero zero zero so i gotta modify the inputs a little bit and i'll just start with x as like 0.01 that should do pretty well and if i run this again we should see like look i'm getting some interesting values there now what are these values producing anything of note not really but why not well because my constants i just made my constants one one and one so the lorenz attractor works a particular way based on what those input constants are so if i go back to the wikipedia page i could sort of find somewhere on here it's going to give me some values i could use like sigma equals 10 rho equals 28 and beta equals 8 divided by 3. so let's use those constants i believe sigma was a b was um b was 28 and c was 8 divided by 3 and i'm going to do that just to make sure i get a floating point value okay so i think that should work i'm like skeptical and we should see oh not a number okay so what have i done wrong here i might have to time out this video see how long this debugging takes and this might get edited out if it starts to take a really long time but let's look here um so what have i done wrong here uh xyz z so let's let's comment out and just do x for a second and see what i get oops and i just want to look at x oh i had some numbers and then i got not a number for y so i might just be like one is a terrible number for dt because i'm like it's as if i'm teleporting myself through time massively fast so let me just make this 0.01 yeah okay this is more like what i expected to see well those numbers are getting incredibly small i hope i implemented this right i have to check my formulas but let's go back here and see if i'm getting some reasonable formulas okay good reason okay so this is better this is what i expected to see okay great so now i'm seeing some numbers that make more sense so my issue there was literally just having and maybe that won't get edited out was just having the number one and it just sort of went off to infinity super fast these systems um they don't have a recognizable repeating pattern and they tend towards they're often 10 towards infinity or some like nonexistent value okay so let me go back to 0.01 now i want to be able to figure out is something actually working here so the first thing i'm going to do is just say stroke 255 and i'm going to i'm also going to translate to the center of the window and i'm just going to draw a point and i'm just going to do this in 2d so i'm not going to worry about the z i just want to at least see like let me plot those the state of the system over time with x y so let's do that and ah good this is very good so it looks like i did the formulas correctly you could start to see like that's something there so i'm actually we're kind of like we're trucking along here i've got the lorenz system like sort of visualizing right now so that really basically i'm done however i want to make this look like something i want to make this look like a 3d shape i want to maybe add some color to it i want to be able to spin around it i want to i need to do more with it maybe i want to be able to like explode it so that all the points should like fly off of it and come back so i want to do even though in 13 minutes we kind of got the math down i want to do more with this in terms of the visual output of it so um so let's go forward with that so the first thing that i'll do is let's just go ahead and work in 3d so i'm going to change the renderer to p3d and then i'm going to add the z point so we should see now that um it's the same it looks pretty similar but there's actually a z value there now one thing i want to add also is just i want to use the uh the processing function scale so scale is a transformation you can add to your scene to kind of like stretch it out a little bit i'm not going to get this through zooming in and out as well but i just want all the points to be sort of spaced out a bit more and look a little bigger so i'm going to basically scale everything by five so we can see yeah so this looks so now i kind of have a bit of a closer view you can see all the points of the lorenz tractor are being plotted in 3d now here's the thing how am i getting all these points on the screen i'm just drawing one point at a time well notice how my background is in setup so this worked just to see that the system was working but it's not going to be a very good solution for eventually over time being able to manipulate this system so what i need is some sort of data structure some sort of list that i can store all the points of the lorenz attractor so let me do that and what i'm going to do for that is an arraylist and this is where we might rather be in javascript and i'll try to make a javascript version of this as well i'm going to call that points i'm going to make that a new empty arraylist so this is the syntax for something in java called an arraylist which is a flexibly sized array something i could just add to and i'm calling it points and the data that i'm going to put into that arraylist are p vector objects why do i want a p vector object is because every single frame i'm going to say points dot add a new p vector with that x y and z okay so i want to add a new vector with x y and z to that particular array list and we can see that this is still working nothing is broken yet and what do i want to do now as those points are being added over time i want to draw all of them because i need to erase the background right so let me let me just show you what i mean i'm going to move this background to draw this is actually going to produce kind of an interesting result because now you're going to see this point i kind of love this just moving along the pattern of the lorenza tractor it's kind of this beautiful interesting kind of chaotic motion i just want to stop and watch it but i'm 15 minutes in i want to see if we can wrap this up in about 20 minutes so i'm going to keep going so what i want to do is instead of just drawing the existing point what i want to do is say for every vector v in that array list points draw a point at v dot x v dot y and v dot z so i'm now saying instead of just drawing the current point loop through and this is known as an enhanced loop in java for every vector v in the arraylist points draw a point at v x v y v y v y v y v y v y v back after a technical hiccup you can see that the entire lorenz attractor is drawn with each element as a separate point based on every p vector that's in that array so really essentially i'm done there you go it's in 3d that's the entire lorenz attractor shape but i do want to add some more things to this and give you some exercises to think about what you might do with this so first let's just change the way we're drawing this a little bit one thing that i could do is connect all the points with a line so instead of drawing everything as a single point i could actually set the vertex of a shape so if i say begin shape before i draw all the points and end shape after i draw all the points with vertex instead of point what that's going to do is connect every point and you're going to see now that whoa it's doing it but it's actually trying to fill it in as if it's an entire shape so there might be some interesting things i could do with that but for now i'm just going to add no fill and we're going to be able to see now this continuous line so i could zoom into it and sort of see that every point is now connected right so now we have this continuous shape which is a nice start of sort of seeing how i could sort of tinker with how this is visually i could also try to come up with like a clever way of changing the colors of it i'm sure that you as a wonderful person on the internet with visual design talent will do something much more interesting but i'll just show you really quickly i already have that in there because i that was from the technical glitch but i could add something called color mode and i could change the color mode to hsb meaning hue saturation brightness so what i could do is set the stroke of with a some sort of hue a saturation of 255 the maximum and a brightness of 255. so i'm now now as i draw it it's going to have a particular kind of like turquoisey greeny hue and why not while i'm doing this um make a variable start it as zero have that variable be the hue and for every single vertex uh increase that by some value and then uh if it goes above 255 uh reset it back to zero and now i should get uh why not have a rainbow since this is coding rainbow uh a rainbow lorenz attractor um powder so you can see as the color is changing we've got kind of yellow red to yellow to orange and that sort of thing so really okay the last thing i want to mention so what's interesting about what i'm doing with this particular strategy separate from the lorenz attractor separate from the lorenz attractor algorithm itself is the fact that every one of these points is saved in memory in that array so one thing i might just demonstrate to you is the fact that those points can be manipulable in real time so for example one thing i could do in processing is i could write a vector called offset uh and i could say p vector dot random 3d that's going to be give me just a random unit vector of unit 1 of length 1 pointed in a random direction and i could add that offset to every single vector in the lorenz attractor now if i run this it's kind of going to go crazy because the unit of i've scaled up by five so you can see it's like shaking and jiggling like crazy so what i could do is maybe shrink that offset down quite a bit by you know make it ten percent of the length of itself and you can see now if i zoom into it you can see how the points are kind of moving ever so slightly in space now i'm not suggesting that what i've done is a particularly magnificent result but what if you had all those points move along a sine wave or what if you have those points expand out and then come back to their original location or morph into another shape or fill in the blank of your interesting idea there so what i think i would like you to do now that you've seen how to program this lorenz attractor from scratch you don't have to do anything you're just watching this video maybe you want to go outside and toss a frisbee around or eat some lunch which is what i kind of want to do right now because i'm feeling a little woozy but i think what would be interesting i'd be excited for some of you watching this video to explore is what types of other how can you put your own design spin on this particular shape what happens if you start to manipulate the variables right here are the constants that i'm using make up your own constants look up on the internet some other known constants for the lorenz attractor that produce other kinds of shapes what happens if you change the dt variable what can you mess around with these formulas and get something else can you go to paul could you go to a site and find a different kind of attractor that's not the lorenz one there's a sort of there's a lot of these under the sort of category of strange attractors so try to make your own version of this uh be creative play experiment don't worry too much and share with me your results but this has been hopefully something you've enjoyed which is programming the lorenz attractor from scratch in processing in 3d thank you very much for watching i'm thrilled to have finished this because you might not know there was about a 45 minute audio problem i really hope the audio is working right now and this is actually the end of this video thanks for watching and i'll see you in the future in next in another video goodbye okay ah oh that's a great suggestion and the chat by mesa mousavi says animate a camera along the path that would be a really cool okay i think i did it i i don't know to what extent um those i you know i kind of had lost my momentum in rhythm so much but hopefully when it gets put together it'll be a reasonable video tutorial and i could always someday do this one again as i say for everything so i've i've gone for about 45 minutes longer than i had meant to today just because i really wanted to make sure this finished and unfortunately this was the only video tutorial i made although there was a lot of interesting stuff at the beginning hopefully about like questions from the cadenze course so uh a couple things i want to mention uh next week i am traveling to the great country of china i will be in the city of shanghai i've never been there before i'll be there for a week visiting nyu shanghai there's an interactive media arts program that has their big end of semester show i'm going to see their show it's unlikely i'll be able to live stream from there i do hope to record one or two video tutorials or probably just be screen captures which maybe are just as good as my ridiculous system here um but so i'll have some new content i'll be on twitter and on email and that sort of thing uh don't email me that's my one request out of life twitter is great the processing forum is great uh the forum for the cadenza course is great i can't deal with email but you should email me and you should not listen to me no one should listen to anything i say i want to be in touch with you watching um so i um i please if you make something from this let me know be in touch i will publish at some point hopefully in the next 24 hours this video tutorial will go online these i'll probably leave the stream archives online somehow there will be two of them i guess this one that worked is the second half and the first half and i'll try to link between them somehow figure it out um but i'm rambling i'm really exhausted from this and so i think i'm gonna go um i'm gonna check the twitch chat i will need a vpn yes i do have a vpn for a while i'm there if you have any suggestions for things that i should make sure to see in shanghai um i would love to hear them uh food that i should eat a particular restaurant or a place to go to uh let me know i'm gonna be there for one week i'll be back may 15th and when i get back i mean assuming i don't continue to have these technical problems i um i'm going to start a patreon i think to uh uh just now that i've been doing this for long enough i feel maybe ready to think about funding this a little bit um you know for myself and also to be able to have some flexibility to spend some money on um getting you know better equipment or better people helping like write descriptions and that that that i already have too now so anyway if you have thoughts about that let me know the real thing that i can't figure out is whether to do i'm leaning towards having the patreon be a charge per live stream or per week that there is a live stream or i could do a monthly thing but i'm just a little bit afraid like what if i go away for two weeks i don't want people to be charged for the monthly thing so i'm really thinking about that if anybody has any clever ideas uh let me know okay do something with the heat okay so i i thank you for being so patient i apologize for your ears that got blown out i hope you're enjoying this and finding this useful send me your feedback get in touch on twitter and in the youtube comments or in the cadenze forum or in the processing forum and i'll see you all sometime soon after may 15th i will not be live probably until fight uh may 15th i think is a sunday so sometime that week possibly not to like the 18th or 19th like wednesday or thursday that week thanks very much and uh you can sign up ah if you're still watching this and you want to know um if you want to get notifications uh if you go to shiffman.net you can sign up for email notifications when there's going to be a live stream in the top right corner okay and i always post on twitter shiffman goodbye
