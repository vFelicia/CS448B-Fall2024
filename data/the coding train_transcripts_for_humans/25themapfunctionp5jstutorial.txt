With timestamps:

00:01 - Hi.
00:02 - So this video that I'm
making is about a function
00:06 - in p5.js called map.
00:09 - So there's a very
common scenario
00:12 - that comes up over and
over and over again
00:14 - in programming graphics,
programming interaction,
00:19 - working with data.
00:21 - There's so many places that
this scenario comes up.
00:23 - And so this particular
function, map,
00:26 - is a nice resolution
to this problem.
00:29 - And let me give you a simple
version of this problem.
00:33 - So let's say we have a canvas.
00:38 - And the canvas has
a background color.
00:43 - And what you want is for
that background color
00:45 - to sometimes be black
and sometimes be white.
00:50 - So when it's black,
the color that you
00:54 - should put in the
background function is 0.
01:01 - When it is white, the color you
should put in the background
01:05 - function is 255.
01:07 - So we can say, together,
the range for the background
01:11 - function that I want in
this particular program is
01:15 - a number between 0 and 255.
01:17 - So really, a variable
might go here.
01:20 - We'll call it COL.
And COL should
01:23 - have a range between 0 and 255.
01:26 - Now, how do I want that
value to be chosen?
01:29 - When should it be black and
when should it be white?
01:31 - What I would like is
when the mouse pointer is
01:35 - at this side of the screen,
I want the background
01:37 - to be black.
01:38 - And when the mouse pointer is
at this side of the screen,
01:41 - I want the background
to be white.
01:43 - So I would like to
create a scenario where
01:45 - I move the mouse left and
right, left and right,
01:48 - and I see the background
shift from black all the way
01:51 - to white, down to gray,
darker gray, down to black,
01:55 - et cetera, et cetera.
01:56 - This is what we want to program.
01:59 - Now, let's say this canvas
has dimensions of 600 by 400.
02:05 - So mouse x is a variable.
02:07 - If you've been watching these
videos in sequence, which
02:09 - you don't need to have been to
watch this particular video,
02:12 - mouse x is a sort of
recent new phenomenon
02:15 - that I just talked about
in a previous video.
02:18 - So if these are the
dimensions of the canvas,
02:21 - we know that mouse x has a range
that goes between 0 and 600.
02:28 - So we now want the
background color
02:33 - to have a rate-- oh, sorry.
02:36 - I lost my train
of thought there.
02:37 - The mouse has a range
between 0 and 600
02:40 - and the background
color we want to have
02:41 - a range between 0 and 255.
02:44 - So we need to take this
value with this range
02:47 - and what do we want to do?
02:48 - Map it to this range.
02:52 - When mouse x equals 0,
background color equals 0.
02:55 - When mouse x equals 600,
background color equals 255.
02:59 - Let's kind of like start
doing that a little bit
03:01 - for a moment without
the map function at all.
03:05 - OK, so here's the program.
03:07 - I'm going to actually
simplify this for a second.
03:10 - Var color equals 0.
03:13 - I'm going to say
background color.
03:15 - And you can see this.
03:17 - So we can see here, here
I'm running this program.
03:20 - This ellipse is being
drawn where the mouse is,
03:22 - so we can see.
03:23 - And the background
is being colored
03:24 - according to that variable.
03:25 - But the background
color is not changing
03:26 - because I set it equal to
0 and I never changed it.
03:29 - So now I could try
to do some math.
03:32 - Like I could just say
color equals mouse x.
03:35 - Why not?
03:36 - That's pretty good.
03:37 - Whatever the value
of mouse x is,
03:38 - set the background
color to that.
03:40 - So let's see what happens.
03:41 - I'm going to run this.
03:43 - Look, it's working,
it's changing.
03:44 - But it's already white.
03:46 - Why?
03:47 - Because as soon
as I get to pixel
03:48 - 255, that's the full whiteness.
03:53 - So I'm not getting
this perfect mapping.
03:56 - It's kind of working, but
it's not exactly right.
03:59 - So I can be approximate
and I can say,
04:01 - OK, the canvas is
600 pixels wide.
04:04 - Why don't I divide by 2?
04:06 - That's pretty good.
04:08 - Whatever the mouse
x is divided by 2.
04:10 - That's getting me pretty close.
04:12 - It actually kind of
looks like it's working
04:14 - and, you know, we kind
of solved the problem.
04:17 - But here's the thing.
04:18 - This problem that we have
just sort of barely solved
04:21 - over there, this is a very
simplistic view of it.
04:24 - But there's lots of times where
you have a sensor, like data
04:27 - coming in from some
sensor and the range
04:29 - is between 321 and 1057.
04:33 - And then you want
to map that range
04:35 - to some other set of values.
04:38 - And actually, that
other set of values
04:39 - has a range between 20 and 35.
04:42 - And the math is a
little bit trickier.
04:43 - Or perhaps you want
to take a value that
04:45 - goes between 0 and
200 and invert that
04:48 - and map that between
200 down to 0.
04:50 - So there's lots of
more complex scenarios.
04:53 - The map function is
a general function
04:56 - that will take any range and
map a value inside that range
05:00 - to a new value in
any other range.
05:02 - So let's take a look at how
that works in this context.
05:12 - So first of all, what
do I mean by function?
05:17 - So already, hopefully you know
about calling functions in p5.
05:21 - Right?
05:22 - You might have done this.
05:23 - Line is a function that
takes four arguments.
05:29 - One, two, three, four.
05:30 - And what does it do?
05:31 - It draws a line from
point 100, 100 to 50, 50.
05:35 - Done.
05:36 - So map is the same thing.
05:38 - It's a function that takes
some amount of arguments.
05:41 - It's actually going
to be five arguments.
05:44 - I better give myself
more room here.
05:47 - I can see that you're not
going to be able to see this.
05:50 - Map, it takes five arguments.
05:53 - One, two, three, four, five.
05:56 - Can you see all those?
05:57 - Yes.
05:58 - OK, so this seems like,
oh, boy, five arguments.
06:01 - That's terrifying.
06:01 - But actually, it's not so bad.
06:03 - So remember, I have a range
that goes between 0 and 600.
06:10 - This is the range we
know that mouse x is.
06:14 - And I want to map this range
to a range between 0 and 255,
06:20 - which is what I want to
assign to my variable color.
06:23 - So the arguments that map
requires are the following.
06:28 - What is the minimum and
maximum of my current range?
06:34 - 0 to 600.
06:37 - What is the minimum and
maximum of my new range?
06:42 - 0 to 255.
06:44 - And what is the value
that has this range which
06:49 - I want to map to the new range?
06:50 - Well, in this
case, it's mouse x.
06:53 - So I want to map
mouse x, which I
06:57 - know has this range,
that's the x values.
06:59 - And I want to map it to
this range between 0 and 255
07:02 - for the purpose of color.
07:04 - And then when I map it,
what do I do with it?
07:06 - I want to take the result of
that mapping and set it equal.
07:10 - Assign the result to
my variable color.
07:13 - So this is actually
something quite new
07:15 - about this map function.
07:17 - The line function doesn't do--
07:20 - it performs a task.
07:22 - Line.
07:23 - It draws a line in the canvas.
07:25 - Well, whatever.
07:25 - The computer draws a
line on the canvas.
07:27 - The map function actually
performs a calculation
07:30 - and answers a question.
07:31 - It resolves to a single number.
07:34 - So I can use that number
and assign it back
07:36 - to this variable.
07:37 - OK?
07:38 - So this is kind
of a new concept.
07:39 - Let's go try to do
it in this program.
07:43 - So instead of my
goofy math here,
07:48 - mouse x divided by 2,
what I want to do now
07:50 - is use that map function.
07:52 - So I'm going to go over
here, I'm going to say map,
07:55 - mouse x, which has a
range between 0 and 600.
08:00 - Oops, I guess I
better zoom back out.
08:02 - And give me a new value within
a new range between 0 and 255.
08:08 - So here, mouse x
between 0 and 600
08:10 - give me a range from 0
and 255 and assign that
08:13 - to this variable
color, which I'm then
08:15 - going to use in background.
08:17 - And watch this.
08:18 - You can see all the way
perfectly white at pixel 600,
08:21 - perfectly black at pixel 0.
08:24 - Let's have a little
more fun with this.
08:27 - Fun is all relative, of course.
08:28 - Let's give ourselves
two more variables.
08:36 - So I'm going to make a variable
r and b, r for red, b for blue.
08:41 - And what I'm going
to do is I'm going
08:43 - to set the red value
equal to that mapping.
08:47 - So you can see now blue
is at 255, red is at 0.
08:54 - And red, r, is getting
that mapping with mouse x.
08:58 - So as I move to the right,
I get more pink and purple,
09:01 - all the way back more blue.
09:03 - And here's something
interesting I could do with map.
09:06 - Let's also map the blue value.
09:10 - But instead of saying
when the mouse is at 0,
09:15 - the blue is at 0.
09:16 - When the mouse is at
600, the blue is at 255.
09:19 - Let's do the reverse.
09:20 - Let's say when the mouse
is at 0, we have 255 blue,
09:24 - and when the mouse is all
the way on the other side,
09:26 - we have 0 blue.
09:27 - So we can also invert
that range, which is great
09:30 - that map will do that for us.
09:32 - And all the way, we can
see I get all the way red,
09:36 - all the way blue,
and in the middle,
09:37 - I've got red and blue together.
09:40 - And also, by the way,
if you're thinking
09:43 - of-- so you might
take this exercise,
09:45 - maybe add mouse y to
it, try to map mouse y.
09:48 - There's all sorts of possible
things you can do with this.
09:51 - So hopefully that gives you
a bit of a sense of the map
09:53 - function and that you found
that useful, possibly.
09:58 - OK, I'm going to stop this.
10:00 - Oops.

Cleaned transcript:

Hi. So this video that I'm making is about a function in p5.js called map. So there's a very common scenario that comes up over and over and over again in programming graphics, programming interaction, working with data. There's so many places that this scenario comes up. And so this particular function, map, is a nice resolution to this problem. And let me give you a simple version of this problem. So let's say we have a canvas. And the canvas has a background color. And what you want is for that background color to sometimes be black and sometimes be white. So when it's black, the color that you should put in the background function is 0. When it is white, the color you should put in the background function is 255. So we can say, together, the range for the background function that I want in this particular program is a number between 0 and 255. So really, a variable might go here. We'll call it COL. And COL should have a range between 0 and 255. Now, how do I want that value to be chosen? When should it be black and when should it be white? What I would like is when the mouse pointer is at this side of the screen, I want the background to be black. And when the mouse pointer is at this side of the screen, I want the background to be white. So I would like to create a scenario where I move the mouse left and right, left and right, and I see the background shift from black all the way to white, down to gray, darker gray, down to black, et cetera, et cetera. This is what we want to program. Now, let's say this canvas has dimensions of 600 by 400. So mouse x is a variable. If you've been watching these videos in sequence, which you don't need to have been to watch this particular video, mouse x is a sort of recent new phenomenon that I just talked about in a previous video. So if these are the dimensions of the canvas, we know that mouse x has a range that goes between 0 and 600. So we now want the background color to have a rate oh, sorry. I lost my train of thought there. The mouse has a range between 0 and 600 and the background color we want to have a range between 0 and 255. So we need to take this value with this range and what do we want to do? Map it to this range. When mouse x equals 0, background color equals 0. When mouse x equals 600, background color equals 255. Let's kind of like start doing that a little bit for a moment without the map function at all. OK, so here's the program. I'm going to actually simplify this for a second. Var color equals 0. I'm going to say background color. And you can see this. So we can see here, here I'm running this program. This ellipse is being drawn where the mouse is, so we can see. And the background is being colored according to that variable. But the background color is not changing because I set it equal to 0 and I never changed it. So now I could try to do some math. Like I could just say color equals mouse x. Why not? That's pretty good. Whatever the value of mouse x is, set the background color to that. So let's see what happens. I'm going to run this. Look, it's working, it's changing. But it's already white. Why? Because as soon as I get to pixel 255, that's the full whiteness. So I'm not getting this perfect mapping. It's kind of working, but it's not exactly right. So I can be approximate and I can say, OK, the canvas is 600 pixels wide. Why don't I divide by 2? That's pretty good. Whatever the mouse x is divided by 2. That's getting me pretty close. It actually kind of looks like it's working and, you know, we kind of solved the problem. But here's the thing. This problem that we have just sort of barely solved over there, this is a very simplistic view of it. But there's lots of times where you have a sensor, like data coming in from some sensor and the range is between 321 and 1057. And then you want to map that range to some other set of values. And actually, that other set of values has a range between 20 and 35. And the math is a little bit trickier. Or perhaps you want to take a value that goes between 0 and 200 and invert that and map that between 200 down to 0. So there's lots of more complex scenarios. The map function is a general function that will take any range and map a value inside that range to a new value in any other range. So let's take a look at how that works in this context. So first of all, what do I mean by function? So already, hopefully you know about calling functions in p5. Right? You might have done this. Line is a function that takes four arguments. One, two, three, four. And what does it do? It draws a line from point 100, 100 to 50, 50. Done. So map is the same thing. It's a function that takes some amount of arguments. It's actually going to be five arguments. I better give myself more room here. I can see that you're not going to be able to see this. Map, it takes five arguments. One, two, three, four, five. Can you see all those? Yes. OK, so this seems like, oh, boy, five arguments. That's terrifying. But actually, it's not so bad. So remember, I have a range that goes between 0 and 600. This is the range we know that mouse x is. And I want to map this range to a range between 0 and 255, which is what I want to assign to my variable color. So the arguments that map requires are the following. What is the minimum and maximum of my current range? 0 to 600. What is the minimum and maximum of my new range? 0 to 255. And what is the value that has this range which I want to map to the new range? Well, in this case, it's mouse x. So I want to map mouse x, which I know has this range, that's the x values. And I want to map it to this range between 0 and 255 for the purpose of color. And then when I map it, what do I do with it? I want to take the result of that mapping and set it equal. Assign the result to my variable color. So this is actually something quite new about this map function. The line function doesn't do it performs a task. Line. It draws a line in the canvas. Well, whatever. The computer draws a line on the canvas. The map function actually performs a calculation and answers a question. It resolves to a single number. So I can use that number and assign it back to this variable. OK? So this is kind of a new concept. Let's go try to do it in this program. So instead of my goofy math here, mouse x divided by 2, what I want to do now is use that map function. So I'm going to go over here, I'm going to say map, mouse x, which has a range between 0 and 600. Oops, I guess I better zoom back out. And give me a new value within a new range between 0 and 255. So here, mouse x between 0 and 600 give me a range from 0 and 255 and assign that to this variable color, which I'm then going to use in background. And watch this. You can see all the way perfectly white at pixel 600, perfectly black at pixel 0. Let's have a little more fun with this. Fun is all relative, of course. Let's give ourselves two more variables. So I'm going to make a variable r and b, r for red, b for blue. And what I'm going to do is I'm going to set the red value equal to that mapping. So you can see now blue is at 255, red is at 0. And red, r, is getting that mapping with mouse x. So as I move to the right, I get more pink and purple, all the way back more blue. And here's something interesting I could do with map. Let's also map the blue value. But instead of saying when the mouse is at 0, the blue is at 0. When the mouse is at 600, the blue is at 255. Let's do the reverse. Let's say when the mouse is at 0, we have 255 blue, and when the mouse is all the way on the other side, we have 0 blue. So we can also invert that range, which is great that map will do that for us. And all the way, we can see I get all the way red, all the way blue, and in the middle, I've got red and blue together. And also, by the way, if you're thinking of so you might take this exercise, maybe add mouse y to it, try to map mouse y. There's all sorts of possible things you can do with this. So hopefully that gives you a bit of a sense of the map function and that you found that useful, possibly. OK, I'm going to stop this. Oops.
