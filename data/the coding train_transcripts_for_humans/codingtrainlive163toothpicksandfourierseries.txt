With timestamps:

00:09 - hello good morning afternoon whatever
00:13 - time it might be it's morning for me hi
00:15 - it's Friday something exciting to show
00:18 - you really quickly but well oh wait it's
00:22 - all assumed in anyway how are you I is
00:28 - my mic on my mic is on music is playing
00:31 - I am so excited for today's livestream
00:35 - because I'm going I have out a plan I've
00:38 - thought about it
00:39 - I'm not exactly prepared but I spent I
00:44 - spent some time on the subway doing some
00:46 - reading and watching some videos to
00:48 - think about what it is I'm going to do
00:50 - today and the first thing that I'm going
00:52 - to do has to do with this box of
00:54 - toothpicks could there possibly be what
00:57 - could possibly on the coding train
00:59 - related to a box of toothpicks you might
01:01 - be asking well soon I will tell you
01:03 - first let me do some housekeeping here
01:09 - and talk to you about what's happening
01:13 - for the rest of the year on this YouTube
01:15 - channel that you are watching so there
01:17 - are only two more live streams in 2018
01:22 - both of which are happening next week
01:24 - and then I will be off for quite a while
01:27 - until January so I believe here whoops
01:31 - if I go to website youtube.com slash the
01:36 - coding train I will see first that I am
01:41 - streaming live and then I want to show
01:44 - you these two things so two things are
01:46 - set for next week on Monday at about 3
01:50 - p.m. Eastern Time I will be coming to
01:52 - you live from not this room but from
01:56 - about five floors down on the fourth
01:58 - floor is the program called ITP that's
02:02 - the graduate program the undergraduate
02:04 - program is called ima these are both
02:06 - programs at Tisch School of the Arts at
02:07 - New York University the end of the
02:09 - semester show is coming over a hundred
02:11 - projects made by an incredible set of
02:14 - talented students from all over the
02:15 - world so I'm going to walk around with a
02:17 - my phone
02:19 - and somebody to help me an interview
02:23 - students and show projects so you can
02:24 - tune in for that if you miss it don't
02:26 - worry it will all be archived and I also
02:29 - will produce probably the whole live
02:31 - stream we'll probably be out two hours
02:32 - but typically after that's done I
02:34 - produce about a 20 minute kind of like
02:36 - edited compilation highlight reel of a
02:38 - bunch of the projects by the way if you
02:40 - have any experience live-streaming that
02:46 - might that and you might have some tips
02:48 - for me I'm looking into currently
02:50 - getting I have a gimbal I have a person
02:53 - who's gonna help me hold the camera I
02:55 - have a variety of different microphones
02:56 - that I'm looking at using but I'm
02:58 - looking at getting one of those kits for
03:00 - a mic that goes with the camera and a
03:02 - handheld thing and all that sort of
03:04 - stuff so if anybody has any experience
03:06 - or some things you want to suggest that
03:07 - I get that I could get between now and
03:09 - Monday let me know then coming to you
03:12 - next Thursday at about 10:30 a.m. in the
03:18 - morning I will be doing my annual
03:22 - processing foundation holiday telethon
03:25 - biannual I mean a second annual but did
03:28 - it last year sort of spur-of-the-moment
03:30 - last year I'm a little bit more planned
03:33 - this year although I don't actually have
03:35 - any topics in mind but I am looking for
03:38 - you to suggest stuff so let's let's move
03:41 - over here for a second if I go to and I
03:44 - want to come back to this in a second
03:45 - but if I go to one I don't want to
03:49 - import my bookmarks go away whatever if
03:52 - I go to github.com slash website slash
03:56 - rainbow topics I think I need to rename
03:59 - this repo not know oh no coding train
04:03 - coding train slash rainbow topics um
04:07 - this is a repository where I kind of
04:10 - keep a list of things of suggestions of
04:13 - things that I might do in a video or on
04:15 - a live stream and currently there are
04:18 - 800 77 open things look at this
04:20 - suggested four days ago tooth pick
04:22 - patterns toothpick toothpick toothpicks
04:29 - nice not a sponsor
04:32 - so I'm gonna do the toothpick challenge
04:35 - today but I'm thinking what I would like
04:37 - to do is add a label I'll go to labels
04:42 - I'm gonna create a new label I'm gonna
04:44 - call it holiday telethon probably be
04:49 - should be some reddish I like that green
04:52 - I can't hold on we'll get there
04:55 - eventually yeah that's not really very
04:56 - ah that's that's good so that's very
05:02 - dark but holiday telethon label I will
05:04 - so I'm looking for holiday themed coding
05:09 - challenge ideas for example one that I
05:11 - will most likely do next week is the
05:14 - Koch snowflake which looks like any of
05:19 - these patterns whoa I've never seen it
05:21 - done like this so we're gonna have to
05:23 - figure that out so this is something
05:25 - like things that are wintery holiday
05:27 - themed that's my plan for next week
05:32 - hey startup guy thank you for the super
05:34 - chat from India t other thing I'm trying
05:36 - to get working but I don't believe that
05:39 - I'm gonna get it unlocked unfortunately
05:40 - there is a YouTube as a feature called
05:42 - super chat for good which is a way of
05:44 - sending super chat donations directly to
05:48 - a non-profit 501c3 organization of which
05:50 - the processing foundation is one so I've
05:53 - been in contact with YouTube to see if I
05:54 - can get that enabled for my account for
05:56 - next Thursday but it's I don't know if
05:59 - that's going to be possible so just to
06:00 - be aware I'll be asking people if your
06:03 - if you have if you are able to make your
06:06 - donation through processing
06:07 - foundation.org slash support but anyway
06:09 - that'll be next Thursday and builds eat
06:15 - emoji and the chat asks you really came
06:18 - up with this video after smarter every
06:21 - day yes so I mean so I was had the honor
06:25 - was lucky to get to actually meet Destin
06:28 - at thinker con which was a conference
06:29 - that he organized a little while back in
06:32 - Huntsville Alabama and I've been
06:34 - obsessively tuned into his channel ever
06:37 - since and
06:39 - the Fourier series video I mean I also
06:41 - want to show and reference the three
06:43 - blue one Brown series on Fourier series
06:45 - which is also excellent and as something
06:48 - that I had tuned into quite a while ago
06:49 - and re-watched so I want to get started
06:52 - with that
06:54 - Simon tiger is taking I'm pronouncing
06:56 - Koch wrong I know I know I'm pronouncing
07:00 - it wrong but sometimes in life we just
07:03 - have to pronounce things wrong to get
07:05 - through the day
07:06 - okay now oh and smarter every day just
07:13 - said hello in the chat what up fourier
07:15 - peeps
07:15 - okay so this is what I'm looking for for
07:17 - next week your holiday-themed coding
07:21 - ideas I have purchased a new ukelele I
07:29 - purchased a new ukulele which if you can
07:32 - stomach your way through about an hour
07:33 - from now if you're still actually
07:34 - watching or two hours from now I might
07:36 - actually unbox I hear unboxing is like a
07:39 - thing I you know I'm of a mind I'm just
07:43 - gonna like forget this coding thing or
07:45 - just make unboxing ukulele videos but
07:47 - we'll see I'm gonna open up my new
07:49 - ukulele and try it out
07:50 - because I will be singing very badly
07:54 - next Thursday a coding themed holidays
07:57 - it's really a terrible idea but and as
08:02 - you donate to the wonderful nonprofit
08:05 - the processing foundation so I'm also
08:06 - looking in addition to suggestions for
08:08 - holiday themed coding challenges I am
08:12 - looking for your lyric lyric submissions
08:16 - of holiday music with coding lyrics and
08:21 - I had a bunch of them from last year
08:22 - thank you to me IMC and to me who wrote
08:25 - a whole bunch of those alright so that's
08:28 - what I have to say now one thing I want
08:30 - to do is I want to briefly before I get
08:31 - started with the first coding challenge
08:33 - I want to show some of the projects that
08:36 - the community has made so I'm gonna go
08:37 - to the coding train here
08:39 - the most recent coding challenge I did
08:41 - was this flocking simulation oh oh and I
08:43 - was recently speaking with Nicki case
08:46 - who is one of my absolute favorite
08:48 - internet artists ever if you do not know
08:50 - the work of Nicki case you should
08:51 - their work out but explore Nikki case
08:56 - reminded me explorable x' website i hope
09:00 - this is gonna come up yep here we go
09:02 - explorable explanations look at that
09:04 - does anybody recognize that that those
09:08 - are boys right there on the explorable
09:10 - explanations website so if you want to
09:12 - know how to code these this boy's
09:14 - algorithm you can go right here and
09:16 - watch the flocking simulation one now
09:17 - I'm gonna go to this page here and we
09:20 - have a couple look we have a bunch of
09:22 - submissions from the community so as you
09:25 - know as you might not know but if you
09:28 - watch where my coding challenges does
09:29 - that make your own version of it you can
09:32 - submit it over here um so I want to
09:34 - click through these there was also one
09:36 - that isn't submitted here but came
09:37 - through the comments I'll have to dig it
09:40 - up and find it somebody made a flocking
09:41 - simulation in unity which kind of like
09:44 - blew my mind so let's before I get
09:46 - started with the coding challenge let's
09:47 - take a look at a few of these so I'm
09:50 - gonna go here on this one I love and I'm
09:53 - gonna go to the full view of it what
09:58 - this one is here is the tasteful toasty
10:01 - love these internet names took my flock
10:03 - encoding challenge and combined it with
10:07 - my quadtree coding challenge this
10:10 - definitely gets a like a person in their
10:17 - 40s who has a train whistle on the
10:19 - Internet okay
10:20 - but so what this combination is one of
10:23 - the things you might notice if I go to
10:25 - just my actual coding challenge let's
10:30 - let's actually oh shoot see it live no
10:34 - view code web header that's what I want
10:35 - to do so I'm gonna run this be really
10:37 - nice of you I appreciate that
10:40 - okay so what I want to show here is see
10:43 - how there are two hundred Boyd's
10:44 - flocking right now if I increase this to
10:47 - even just like five hundred look how
10:50 - slow that's running this is because
10:53 - every single Boyd has to check every
10:57 - other Boyd in relation to where it is if
10:59 - you watch the coding challenge that's
11:00 - what I went through how do these Boyd's
11:02 - move
11:03 - to their neighbors this is incredibly
11:05 - slow if you could do the math 500
11:08 - checkpoints each one checking every
11:10 - other 500 is 500 times 500 which is I
11:13 - could get the answer to on a calculator
11:15 - or in my head but it's too stressful
11:17 - when you're live streaming so and if I
11:21 - made this a thousand look at that it can
11:26 - barely go now this is not a limit of a
11:28 - computer to draw right if I do if I
11:31 - comment out this line look at this if
11:33 - the computer is no problem drawing a
11:35 - thousand circles quadratic complexity
11:38 - thank you I always say exponential which
11:42 - is absolutely wrong it is quadratic
11:44 - thank you
11:46 - and so here now if I go back to this
11:49 - this what this is doing is it's using a
11:51 - quadtree algorithm what is a quadtree
11:53 - it's a way of sectioning a computer
11:57 - graphics window or any two-dimensional
12:00 - space you can have an octree in
12:02 - three-dimensional space into various
12:04 - buckets and all the voids register
12:06 - themselves in particular buckets and
12:08 - then when it's time to look at the
12:09 - neighbors it doesn't have to look at
12:11 - everyone it can look at just the ones
12:12 - that are within its bucket and this is
12:14 - called quadtree optimization it sounds
12:16 - very fancy but it's not that you it's
12:18 - it's a thing you can do you can actually
12:20 - do squat it's called quadtree because
12:22 - you can actually keep subdividing
12:23 - subdividing based on how many boys are
12:26 - in any particular area but you could
12:28 - also just do what's called spacial
12:30 - subdivision like we could just divide
12:32 - the screen into equal parts and that
12:34 - would also be work well for flocking now
12:37 - I should let me go back to the code and
12:39 - I change this look that's already 500
12:42 - let's change this to a thousand you can
12:46 - see like okay it's not running super
12:49 - fast that's because there's still a lot
12:51 - of stuff for it to do and this is
12:52 - javascript in the browser but this is a
12:54 - reasonable animation with a thousand
12:56 - which is really wild and there's
12:59 - probably a lot of like further
13:00 - optimizations you could do like there's
13:02 - tons of stuff in my code where I'm doing
13:03 - all these extra square root calculations
13:05 - and that type of thing okay so I am
13:09 - going to sorry I'm distracted by
13:15 - multiple chats going on I'm going
13:16 - just takes us back to 500 which is a
13:18 - nice number for us to see look how fluid
13:20 - and passive great so thank you tasteful
13:22 - toasty for doing this so I'm gonna leave
13:25 - now I'm gonna go back to where was I
13:28 - here to find the other ones the internet
13:33 - is a hard thing oh there we go let's
13:35 - look at colorful regular polygons
13:37 - flocking by Juan Carlos and let's click
13:42 - on that this I love to see so a couple
13:45 - things about this I love one is that a
13:47 - nice new interface that's a little
13:49 - that's quite a bit more nicely designed
13:50 - with actual labels to play with the
13:52 - different rules and then you know a
13:55 - lovely design take on this instead of
13:57 - just using circles to use different
13:59 - polygons with different colors wonderful
14:01 - work let's move on to three 3d does this
14:08 - involve quaternions 3d Boyd's with
14:11 - quadtree and then let's look at this one
14:16 - let's actually once again I want to go
14:18 - one of the things I think would be nice
14:19 - to add to this web editor is a button
14:21 - that immediately gets me to the
14:22 - fullscreen view but I can just type it
14:24 - into the address bar so this is really
14:26 - cool to see so this is actually now I
14:28 - wonder is this using the WebGL renderer
14:31 - of p5 amazing if it is and you can see
14:34 - this is happening in 3d we can decrease
14:36 - the number of Boyd's increase them
14:38 - change their perception bump up the
14:41 - separation so many fun things I
14:43 - encourage you to play around with this
14:44 - on your own then we've got evolution
14:49 - aquarium oh oh oh I saw this I think
14:54 - someone said to be on Twitter or like
14:55 - post it in a comment I don't underst
14:59 - but this this is the kind of this is
15:01 - like my dream project if you ever have
15:04 - seen the nature of code book they sort
15:07 - of like working exercise through that
15:08 - whole book is to make your own ecosystem
15:11 - with a lot of different agents that are
15:14 - have different rules and are evolving
15:16 - different behaviors and this looks like
15:18 - it is a manifestation of that a smarter
15:23 - every day is still in the chat says oh
15:25 - dang I was hoping for 3d the 3d is
15:27 - coming I'm gonna find that unity one
15:28 - which is really wild so what
15:30 - I love about this is each one of these
15:32 - creatures I know I don't I haven't
15:35 - looked at the code I don't know what's
15:36 - going on here I actually think it would
15:38 - be but in this kind of case I would love
15:39 - for the creator of this maybe to
15:41 - consider a write up about how all this
15:43 - is working but there are predators there
15:45 - are voyeurs there are food there's food
15:47 - there's poison and those creatures and
15:49 - you can see that everything is that the
15:52 - I imagine this is also built on top in
15:54 - addition to the flocking behaviors using
15:56 - my genetic algorithm evolutionary series
15:58 - to evolve different behaviors what I
16:00 - love about this is I can click on show
16:02 - names all have names like sweet or Daisy
16:07 - I just love that like where do these
16:10 - names come from maybe they could use
16:11 - some kind of like text generative
16:13 - generation neural networks thing to like
16:15 - generate names for all these creatures
16:16 - and then I can do things like add a
16:19 - predator I think that's spelled
16:21 - incorrectly Allah I'll pull requests
16:23 - that a pull request that predator so I
16:26 - think if I click now oh so the red are
16:28 - the Predators so I could get distracted
16:31 - with plane we fish the whole day I think
16:33 - I want to feed them ok so I mean I could
16:37 - feed them look Oh these kind of projects
16:43 - can be so excited so I would I really
16:45 - want to like play around with this and
16:46 - explore the code and kind of understand
16:47 - what it's doing but I'm going to set
16:49 - that aside so I was planning on starting
16:52 - with the toothpicks that was gonna be my
16:55 - warmup because I have to admit hi I
16:57 - checked out this book from the current
17:00 - library which is the like math computer
17:03 - science library here at NYU called
17:04 - Fourier analysis so excited I was like
17:07 - I'm gonna go get a math book
17:08 - I forgot I left it downstairs I want to
17:10 - have it here as a prop I'm gonna read it
17:11 - on the sub and then I started looking at
17:14 - us like oh my whoa oh dear this is this
17:17 - is a little bit beyond but so I have two
17:19 - things I want to do one is the Fourier
17:21 - series and one is the toothpick
17:24 - challenge I don't know I don't know I
17:27 - don't know I was planning to do the
17:28 - toothpick challenge first but now I'm
17:30 - thinking maybe I should start with the
17:32 - Fourier series I could always just go oh
17:35 - the unity thing that's one more 3d so
17:38 - I'm gonna find this video and
17:42 - yes sure you can show me notifications I
17:45 - am going to find the unity can I find a
17:49 - comment where is it somebody commented
17:51 - and linked to their unity version maybe
17:54 - somebody watching can find this more
17:57 - quickly than me
18:01 - unity seriously I just thought okay I
18:06 - could find this hold on
18:09 - is it not maybe it was aunt wasn't on
18:11 - this video let me find it on this
18:13 - computer I have to decide shoot here let
18:19 - me play some awkward waiting music
18:23 - [Music]
18:29 - alright let me try it if anybody in the
18:31 - chat can find
18:32 - yeah I was trying command F but you can
18:36 - find this comment recent comment I'm
18:38 - gonna go into my YouTube studio over
18:41 - here
18:42 - it was the URL was an itch dot IO I'm
18:46 - gonna go to community I have a second
18:50 - computer here if you're wondering what's
18:51 - going on and I'm gonna go
18:57 - [Music]
19:04 - on earth ah here it is
19:07 - I found it I found it oh okay box rock
19:12 - ox Rock Bukit io / okay here we go
19:26 - here is someone ox Rock 2k1 on YouTube
19:32 - rights
19:33 - I created a 3d implementation with Blue
19:35 - Jays I love birds
19:37 - I love birds I'm like a I wanna be
19:40 - birder I have one of those life books
19:41 - you know the life book is where you
19:43 - write down every single bird you've ever
19:44 - seen I travel I know I've talked about
19:45 - this I traveled to Norway to rune de
19:47 - bird Island to see the puffins which I
19:49 - didn't see but I had an amazing time
19:50 - there
19:51 - well I won't rehash that story of going
19:52 - to Norway but allow you to adjust
19:55 - relevant values in real time you can
19:57 - play it here link I also posted the
20:00 - scripts on github for any who are
20:01 - interested I will bring out its
20:03 - github.com / øx rock / Boyd's but let's
20:06 - run this and see I do not know how to
20:10 - program in unity it's something I have
20:12 - always wanted to explore but I love like
20:14 - I love the fact that there's this actual
20:16 - like bird flapping 3d model animation I
20:19 - don't know how well this is reading you
20:22 - know one thing I would love everybody
20:23 - who watches my videos to always be
20:24 - conscientious of is contrast ratio this
20:26 - is a really important thing to consider
20:28 - when you're making content on the web
20:30 - Forex accessibility people with low
20:32 - vision can honestly read text that it's
20:34 - not high contrast and there are certain
20:35 - web accessibility standards that would
20:37 - be good to follow
20:38 - so anyway I'm not sure if you can see
20:40 - this but you can see there's bird count
20:41 - separation distance cohesion elijan
20:43 - alignment momentum and settings so so
20:48 - anyway I would look I would play around
20:50 - with this who can add a lot more birds
20:51 - but I encourage you to check this out on
20:53 - your own it is really interesting to see
20:54 - this play out in 3d Daniel asks in the
20:59 - chat is unity only first c-sharp so it's
21:05 - unity only for c-sharp you both I think
21:08 - c-sharp is
21:08 - the programming language of unity you
21:10 - can also program apparently in
21:11 - JavaScript in unity but I don't think
21:13 - does wonderful so thank you for this to
21:17 - ox rock this was really exciting to see
21:19 - it kind of makes me think about wanting
21:21 - to try a little unity and also I still
21:24 - want to put this out there anybody who
21:26 - wants to try no one tried this I don't
21:32 - think I'm gonna go here view rule a
21:36 - flake yes so I mention this that in the
21:42 - book the computational beauty of nature
21:44 - which is a MIT press by Gary flake Gary
21:47 - flake describes a fourth rule for
21:49 - flocking view move laterally away from
21:53 - any boyd that blocks the view and the
21:56 - theory here is that if the Boyd's in
22:00 - addition to the alignment separation
22:02 - cohesion rules are also trying to keep
22:04 - their view clear they might actually end
22:06 - up in the kind of pattern you typically
22:09 - see of birds in the sky that V pattern
22:11 - that pattern emerges without a leader
22:14 - through the local interactions between
22:17 - those birds okay so let's go to I let's
22:23 - go to Schiffman dotnet randomizer no
22:28 - it's not that Schiffman dot github I oh
22:32 - let's put in a toothpick for ei well
22:37 - let's submit these let's spin the wheel
22:40 - okay everyone speaking of accessibility
22:43 - I really need to work on this a spinner
22:46 - like it's very like holiday themed today
22:49 - okay here we go
22:55 - [Music]
23:01 - which one will I do
23:03 - [Music]
23:08 - oh it's gonna it's gonna stop before it
23:12 - gets all the way through this I'm pretty
23:13 - sure I really have to do the Fourier
23:15 - series first I really want to do the
23:17 - toothpick series
23:18 - I even even rigged up an overhead camera
23:21 - which is no longer on oh wait my
23:27 - overlook there you go have you been
23:30 - rigged up an overhead camera whoa that
23:38 - made me a little bit dizzy actually to
23:39 - be perfectly honest um all right I guess
23:42 - we're guess we're starting with Fourier
23:43 - series all right so I need to get myself
23:49 - set up a little bit and so first let's
23:57 - pull up a bunch of links smart every day
24:04 - [Music]
24:06 - this video let's pull up actually let's
24:15 - go to dokas blog which is in turkish but
24:21 - there's actually yoga has a post which
24:27 - was translated into english how am I
24:29 - gonna find this Twitter I think so what
24:35 - I'm doing right now just so you know is
24:36 - trying to find all the resources that I
24:38 - use to make sure I credit things
24:39 - properly a building misses a little Baba
24:43 - okay hold on I just wanna there we go
24:47 - I'm pretty sure that's the Twitter
24:48 - handle and then yep and then somewhere
24:53 - in here is a post translated English so
24:57 - great we're gonna do this we're gonna
25:02 - come down here to look at this okay
25:05 - then we are going to also go to a three
25:09 - blue one brown 4ei this this video is
25:15 - really remarkable if you have not
25:18 - watched but what is offered
25:22 - that this is still on move the overhead
25:25 - I'm so sorry I didn't realized that was
25:26 - there if you have not watched this but
25:31 - what is the Fourier transform so when I
25:33 - make an edited when I make an edited
25:36 - version of this as of like a short
25:38 - coding challenge video I will probably
25:41 - reference to watch this and the smarter
25:44 - everyday video first because I'm
25:46 - essentially like the way that my channel
25:48 - works if you haven't watched it before
25:50 - um is that I try to do that sort of like
25:56 - last step implementation sometimes I
25:59 - know exactly how the math works and I
26:01 - can explain that
26:02 - sometimes I'm relying on somebody else's
26:04 - derivation or proof of a formula and I'm
26:05 - just figuring out how to make it work
26:07 - but I want to show the entire process
26:09 - from start to finish of creating this
26:12 - visualization even if we don't
26:13 - understand every interim step we can
26:15 - understand every line of code so that's
26:17 - what but this could not because is
26:19 - really a remarkable explanation of the
26:22 - Fourier transform there's also actually
26:23 - a really nice better explained better
26:27 - explained a Fourier I was looking at
26:29 - this also is excellent an interactive
26:33 - guide to the Fourier transform and so
26:35 - now I think I can close out all these
26:37 - other things and then I'm gonna do this
26:41 - I'm gonna do this in the p5 web editor I
26:43 - think this can work in this I think is I
26:49 - mean there's nothing simple about what
26:51 - I'm gonna do it's very hard I had a
26:53 - really hard time thinking about this and
26:55 - trying this out this week but I think
26:58 - it's a small issue amount of code what
27:02 - is the password oh no it's just coding
27:04 - train that's why it's a smallish amount
27:08 - of code that I think I can do it in this
27:11 - editor so that there's an online version
27:13 - that you can find oh and then of course
27:16 - we would not be able to live without
27:19 - Wikipedia no Fourier series I want
27:24 - Fourier series yep here we go alright
27:29 - and so one of the things that I love but
27:30 - okay here we go
27:32 - oops did I lose the better explained
27:35 - I've got this I've got the Wikipedia
27:40 - I've got the blogpost I've got the three
27:45 - blue on Browns video let's let's get
27:47 - this somewhere as I reference it there's
27:52 - a like a mind-blowing part of this to me
27:54 - and there's so many mind-blowing parts
27:56 - to this video I've watched this video
27:57 - probably like over 10 times so but and
28:03 - also we can move this to like just like
28:07 - this would be good like look at this the
28:09 - mechanical see this is I wish I could do
28:10 - stuff like this build mechanical things
28:14 - someday we can dream okay so this I've
28:17 - got the code thing here I'm gonna put
28:19 - that here Oh better except I lost the
28:22 - better explained I don't know why one of
28:25 - the things I love about this page is
28:27 - talking up is this smoothie to recipe so
28:31 - I was trying to come up with my own
28:32 - metaphor to explain what a Fourier
28:35 - transform can do and then I read though
28:37 - that's really good hello maybe I should
28:39 - use it I should come up with my own but
28:41 - I'm gonna use this and credit it okay
28:44 - alright so how's everybody doing
28:47 - everybody ready for this let's get the
28:48 - whiteboard going whoops
28:53 - next time I livestream maybe I might
28:57 - remember to actually erase the
28:59 - whiteboard before I use it this by the
29:04 - way is a book of Christmas songs for the
29:08 - ukulele that I just got delivered to me
29:11 - yesterday from Amazon I also have this
29:13 - keyboard but that's what I used last
29:15 - year but oh and there's the eraser
29:17 - wonderful okay so this was my diagram of
29:20 - the flocking stuff let me erase that I
29:27 - have so many good toothpick stick ideas
29:30 - you know dropping them all on the floor
29:31 - there were gonna be lots I all these
29:33 - plans and the Fourier series is gonna
29:35 - it's really good it's good it's gonna
29:38 - make my head hurt race race race race
29:43 - race
29:47 - let's make sure I have a working marker
29:50 - hello I'm over here and for a for a
29:57 - let's write this Fourier ba-ba-ba-ba
30:02 - I'm very no I'm not gonna write transfer
30:07 - my just gonna I miss a Fourier series
30:08 - all these aren't related interrelated
30:11 - terms and that definitely get some like
30:18 - hearts and like a little rainbow for
30:22 - Fourier maybe like some stars there we
30:28 - go okay
30:29 - how we doing all right can you tell that
30:33 - I'm procrastinating that I've liked
30:35 - terrified and don't want to try this all
30:37 - right uh here we go okay toothpicks just
30:48 - just think of the possibilities hmm I
30:54 - will have to first read some random
30:59 - numbers let's see here
31:05 - [Music]
31:13 - she's gonna help me relax before I get
31:16 - started with the Fourier series I will
31:17 - be reading from a million random digits
31:20 - with 100,000 normal DBS if you were
31:22 - waiting for me to actually do some
31:24 - coding I'm so sorry
31:27 - page 165 4289 twenty-five thousand one
31:34 - hundred and eighty two eighty nine
31:36 - thousand one hundred seventy six eighty
31:39 - eight thousand one hundred and eighty
31:40 - five fifty two thousand three hundred
31:42 - and sixty one seven hundred and
31:48 - eighty-five seven thousand six hundred
31:50 - and twenty six five thousand four
31:52 - hundred seventy nine ninety one thousand
31:56 - one hundred okay
32:03 - ceci gauche writes in the chat I'm
32:06 - French and you don't pronounce for you
32:09 - correctly okay sorry
32:14 - if you I would I'm totally game for a
32:17 - lesson on pronouncing Frawley a
32:19 - correctly in French alright let's get
32:24 - started actually doing some coding so
32:28 - let's call this okay all right here we
32:45 - go house this font size can people see
32:47 - this font size okay I think this is
32:52 - going to be a fine size for the canvas
32:58 - wait why
33:01 - what's going on
33:08 - it's weird there we go okay something
33:13 - weird happened for a second oh whoops
33:18 - let me do this I think it's actually
33:20 - better for me to just increase the font
33:23 - size this way my computer is really
33:27 - acting up and then have a larger canvas
33:32 - to work with and then give myself a
33:37 - little more space okay
33:42 - Fuli eh is that is that better what is
33:47 - going on on this computer I let me just
33:51 - mmm
33:53 - this makes me nervous hold on just make
34:00 - sure things are working yep all right
34:02 - we're fine I'm having a little panic
34:04 - attack okay
34:05 - ah what did you not just see that change
34:08 - just the command s and it changed what
34:13 - is going on all right I gotta just we're
34:18 - gonna code doesn't a second but I'm
34:20 - having a little bit of a panic here let
34:22 - me close this I have a feeling that this
34:29 - paint not this page but this page is
34:31 - running a lot of real-time JavaScript T
34:33 - stuff and so I wonder if that is causing
34:38 - problems yeah the editor I wonder if I
34:43 - need to like move away from the editor
34:45 - some weird stuff is happening
34:52 - okay all right
34:58 - something weird is going on but let me
35:02 - just just bear with me for one more
35:05 - second okay all right
35:12 - it's not getting the last thing I say
35:15 - you know something got fixed so I'm
35:18 - gonna not use the web editor right now
35:20 - because I'm just going to actually use a
35:22 - a Visual Studio code I think this is my
35:26 - time sorry to like go off-topic yet
35:29 - again I'm really proud I really will be
35:31 - starting this in a second but I'm just
35:33 - going to point this out I have a feeling
35:37 - that recent there's issue 675 yes I have
35:46 - issue numbers memorized this is a bug in
35:49 - the web editor that the leaf site dialog
35:52 - shows even after you save your work and
35:55 - this was just fixed within the last 18
35:58 - hours and I think there's like something
36:03 - maybe it's something that this fixed
36:04 - like broke something else
36:07 - so so I am going to what I'm gonna do is
36:11 - this will take me just another couple
36:13 - minutes so apologies I could also just
36:19 - do this in processing but I think I want
36:22 - to do this in JavaScript for a couple of
36:23 - reasons
36:24 - so what I'm gonna do is
36:28 - [Music]
36:41 - [Music]
36:44 - better so if you're wondering what I'm
37:03 - doing you can check out all my workflow
37:05 - videos which show how I work and create
37:08 - these projects
37:10 - [Music]
38:01 - so we're gonna use okay now I'm ready
38:17 - sorry for that little pause thing but
38:23 - now we are ready this is actually a nice
38:28 - oh you know what I'm going to start with
38:33 - us this because this is basically
38:35 - exactly what I'm going to recreate so I
38:39 - will have this open here bean is I don't
38:44 - know how to pronounce that this is which
38:46 - is on the problem okay let me cycle the
38:50 - cameras again we're really getting
38:52 - started now everybody okay you know what
39:05 - I'm going to I'm going to do this yes
39:09 - okay
39:15 - all right so just so you know this is
39:18 - basically exactly what I am about to
39:20 - program and I am going to get started
39:22 - right now let me just open this computer
39:24 - back up in case there's any emergency
39:26 - messages okay stretch
39:37 - [Music]
39:38 - hello welcome to a coding challenge
39:41 - Fourier series so what I am going to
39:44 - program in JavaScript using the p5.js
39:46 - library is exactly this this is what's
39:50 - known as a Fourier series it is a series
39:54 - of wave patterns that when summed up
39:57 - together approximate some other function
40:00 - what does that even mean so I'm first of
40:04 - all you should yeah I'm going to show
40:05 - you some resources the things that got
40:07 - me thinking about this topic and wanting
40:09 - to make this coding challenge and you
40:11 - probably should if you want stop this
40:13 - video and go what look at these other
40:14 - resources and then you can you can come
40:16 - back if you want or maybe you're just
40:18 - off doing something else so pretty
40:20 - recently smartereveryday came out with a
40:23 - video called what is a Fourier series
40:24 - explained by drawing circles this video
40:28 - reminded me of a amazing video that I
40:31 - watched at some point in the past I
40:34 - guess like almost a year ago called what
40:37 - is the Fourier transform of visual
40:39 - introduction you probably if you've done
40:41 - any coding and programming you've
40:43 - probably heard these terms before FFT
40:45 - fast Fourier transform it's usually
40:48 - referenced in the context of analyzing
40:51 - sound and so a smarter every day's a
40:55 - video was a collaboration worked with a
40:59 - Turkish researcher on this website here
41:04 - I'm not going to attempt to pronounce it
41:05 - I will Billy Mina's gazelle on net I
41:08 - encourage you to check out and read this
41:10 - whole article but this is a
41:13 - visualization again of exactly what I
41:15 - want to do a series of wave patterns
41:20 - visualized as a path along a circle
41:23 - periodic functions sum together to
41:26 - approximate a square wave and if we can
41:30 - make this happen in JavaScript then
41:32 - there in theory is no reason why we
41:37 - couldn't then figure out how to draw any
41:40 - given path as a series of Fourier
41:43 - transforms and there's like a sort of
41:44 - well-known gift for video of this like
41:47 - crazy set of circles drawing Homer
41:48 - Simpson
41:49 - so I'm hoping to get there but this
41:52 - video I just want to by the end of this
41:54 - video have exactly this pattern in
41:57 - JavaScript okay so I also want to
42:01 - reference this website better explain
42:04 - calm which has a nice article an
42:06 - interactive guide to the Fourier
42:08 - transform and this I think is a really
42:12 - excellent excellent explainer so again
42:15 - I'm gonna get start coding in a second
42:16 - but you're just gonna have to humor me
42:18 - to let me kind of talk about this a
42:19 - little bit more just to get my feet
42:21 - under me here so the idea of a Fourier
42:25 - transform so a sound wave right we have
42:28 - this idea of a sine wave you've probably
42:29 - seen me draw sine waves on the board or
42:32 - in code in countless videos usually
42:35 - drawn something like this a sine wave
42:37 - has a frequency which is how fat how
42:41 - often does it repeat like if if this is
42:44 - the sort of x-axis like this is one
42:47 - whole cycle right and I could think of
42:50 - that as like the time it takes for this
42:52 - circle to pass this dot to go all the
42:55 - way around the circle so frequency is
42:56 - like how how how how many cycles of the
43:00 - wave per unit of time like per second or
43:02 - per frame there's also amplitude
43:05 - amplitude is the height of the sine wave
43:09 - how how much distance between the very
43:12 - top and the very bottom and so a sound a
43:15 - pure sound the tone the musical note
43:20 - that was I meant to pick a but I hit G
43:23 - and that was I don't have any door close
43:25 - to perfect pitch who knows what note I
43:27 - just sung we can get the ml5
43:28 - machine-learning pitch detection model
43:29 - to tell us that's another story for
43:31 - another time could be represented as a
43:34 - sine wave so but you probably have seen
43:36 - like oh I've got this recording device
43:39 - sound D thingy and what it's doing is
43:41 - it's like this is like the sound this is
43:44 - the wave this is the representation of
43:46 - the sound that I'm listening to right
43:47 - now well you can create this kind of
43:51 - wave pattern is typically actually the
43:54 - sum of multiple wave patterns can be
43:59 - represented this way pets so so in other
44:00 - words if this is like the music
44:02 - note a and then this is like the musical
44:06 - note something else and we're to add
44:08 - these two waves together can you still
44:10 - see where I'm drawing you know I might
44:12 - get something that looks like this right
44:15 - and I've done this I think I have like
44:16 - an additive wave video and the nature of
44:18 - code series about this kind of idea the
44:20 - idea of the Fourier transform is can we
44:23 - go right I could have these two waves I
44:26 - could add them together and get this
44:29 - pattern could I go in Reverse if I'm
44:32 - listening to a sound like this could I
44:35 - pull out all of the waves the sounds the
44:38 - frequencies that make up that that's
44:40 - like pitch detection or if I wanted to
44:43 - then filter out a very high pitched
44:46 - sound if I could take this sound break
44:48 - it apart take away one of the high pitch
44:51 - sound add it back together I would get
44:53 - this so this is akin to I love this
44:56 - metaphor here in the better explain of
44:58 - unsmooth iing a smoothie so I'm like to
45:02 - make smoothies actually a little known
45:03 - fact I was like anyway so but could you
45:08 - like right let's say I take some mango
45:10 - and some kale and two blueberries and
45:12 - some like almond milk and I mix them all
45:14 - together and I give it to my children
45:15 - and I say I made you this beautiful
45:17 - smoothie can you guess what's inside of
45:19 - it this is actually a game we actually
45:20 - play at home I've just realized that
45:22 - this is perfect well if I could do a
45:24 - Fourier transform I could take the mixed
45:27 - smoothie and filter out unco in Reverse
45:30 - and find out all the ingredients that's
45:32 - the idea so that's the idea of a Fourier
45:34 - transform
45:35 - that's conceptually what it is now what
45:36 - I want to do in this video is I'm not
45:38 - going to worry about figuring any of
45:40 - this out I'm just I now I understand
45:43 - what it is what it can be used for I
45:45 - have this goal eventually of having it
45:48 - of using a Fourier series to draw any
45:51 - arbitrary path but one way to get
45:55 - started with that is exactly what's
45:57 - demonstrated here on this website which
46:00 - is could you what what ways do you need
46:03 - to add up together to end up with a
46:05 - square wave and you can see here this is
46:07 - actually a really nice visualization as
46:09 - as as you have you have more and more
46:11 - iterations of the Fourier series how it
46:14 - convert
46:14 - is even closer and closer to the square
46:16 - wave I can also just go here to
46:18 - Wikipedia and find this again so this is
46:22 - the clue so there's this idea in a
46:24 - Fourier series of Fourier coefficients
46:27 - and some kind of like iterative thing of
46:29 - like N and n plus 1 and n plus 2 and we
46:32 - can actually see a nice clue to that in
46:33 - here this is actually a very this is one
46:35 - of the simplest Fourier series what is
46:37 - the series one three five seven can you
46:41 - guess the next number nine eleven so if
46:47 - I can just implement this each one of
46:50 - these circles and like have them rotate
46:52 - around like this at that period or
46:53 - frequency with that amplitude we're
46:55 - gonna get somewhere so let's I talked
46:57 - about this away too long let's try to
46:59 - actually code this down alright so the
47:01 - first thing that I'm gonna do is Oh
47:03 - where's my code here it is ah here it is
47:06 - okay so the first thing I wanna do I'm
47:07 - just gonna start I'm going to start like
47:09 - kind of you're not thinking about the
47:11 - Fourier series and I'm just gonna make
47:12 - up a variable called angle you can
47:14 - really think of that as time it might be
47:15 - more appropriate for me to call this
47:17 - time because time is moving forward
47:19 - that's a sort of crucial idea and then
47:21 - I'm just gonna say time equals every
47:23 - time through draw if you haven't sorry
47:26 - let me make this a little bigger that's
47:29 - too big if you haven't work with p5
47:32 - before draw is a function that loops
47:34 - over and over again over and over again
47:35 - so time is moving forward then what I
47:38 - want to also do is I just want to like a
47:40 - draw a circle somewhere so I'm gonna
47:43 - translate to like 200 pixels over and
47:46 - 200 pixels down I'm gonna have this idea
47:49 - of a radius like the radius of a circle
47:51 - that I want to draw is maybe going to be
47:53 - 50 pixels and then I'm gonna say ellipse
47:57 - at 0-0 with that radius times two
48:01 - because the lips function expects the
48:03 - diameter radius is half that I'm gonna
48:05 - make this white so I'm gonna say a
48:07 - stroke two fifths the stroke 255
48:11 - somebody told me how to get rid of that
48:12 - autocomplete and I still haven't done it
48:14 - and a no fill so when I go back to the
48:16 - browser and refresh it I've got a nice
48:18 - circle there let's make it a little
48:19 - bigger all right so now what I want to
48:23 - do is how can I have that dot traveling
48:25 - around the circle let me have the dot
48:27 - traveling around this
48:27 - Circle so the way that I would do that
48:30 - is I would use polar to Cartesian
48:33 - coordinate transformation and I
48:35 - certainly have a video that talks about
48:37 - how to do that but what I'm talking
48:38 - about here is if this is the radius and
48:40 - this is the angle which is really in my
48:43 - program the time how far over an X and
48:46 - how far over an Y can be calculate how
48:49 - far up in Y can be calculated based on
48:52 - trigonometry so the radius times cosine
48:56 - of the angle or angle is the x-value the
48:59 - radius times sine of the angle is the
49:01 - y-value so I'm gonna do that here I'm
49:05 - going to say I'm gonna say let X equal
49:09 - radius times cosine cosine of time and
49:14 - let y equal radius times sine of this
49:19 - sign of time I should write pause and
49:23 - turn that off and then but let me get
49:26 - through this first point X I'm
49:28 - definitely gonna positive turn this off
49:30 - point XY I'm gonna say stroke 2:55
49:35 - stroke actually actually let's make this
49:37 - a circle also so we're gonna say like
49:40 - ellipse X Y I'm just gonna make it
49:41 - smaller like 8 pixels and let's also say
49:44 - fill 255 oh my gosh making me crazy and
49:48 - here we go look at that there's that
49:51 - circle moving right circle is moving and
49:54 - maybe it makes sense to also draw a line
49:56 - from a line from 0 0 to X Y and now I've
50:03 - got this and I want it to move a little
50:04 - bit faster and honestly I'd like it to
50:07 - go the other direction I'm not sure I
50:09 - should actually check what is it doing
50:10 - if I want to like recreate exactly
50:12 - what's here yeah that's moving the other
50:14 - drag so I've got the beginnings of this
50:16 - now I haven't worried about the number 4
50:18 - here and the fact that I've got the
50:19 - angle divided by PI but we'll get there
50:22 - okay I'm gonna pause for a second this
50:27 - will get when I release this as an edit
50:29 - video this will get edited out let me
50:30 - try to find okay so also armor is makes
50:38 - a good point
50:39 - writes in the chat I am you
50:41 - using Fourier series and Fourier
50:43 - transform interchangeably but they are
50:46 - not the same thing that is absolutely
50:48 - correct not my intention to use them
50:52 - interchangeably let me see let me so
50:57 - first thing I want to do is figure out
50:58 - how does somebody in the chat know how
51:01 - to turn off that autocomplete that's
51:03 - making me crazy and then maybe I will
51:06 - try to give a statement to clarify the
51:08 - difference so hold on how do I turn off
51:18 - visual studio code autocomplete
51:26 - pre-press simply press escape alright ii
51:30 - can disable it in the vs tool settings
51:33 - requires a restart a visual studio to
51:35 - take effect
51:41 - thank you smarter every day for the
51:44 - superjet that's very kind unnecessary
51:47 - but kind did i miss any i should really
51:49 - make sure i didn't miss anyone else so
51:53 - hold on i is let's just turn it off
51:55 - completely for right now visual code
51:57 - studio tools auto complete I was
52:08 - JavaScript well I guess I'm just gonna
52:10 - turn this off right now
52:11 - I like tab completions but let me just
52:16 - turn this off okay
52:20 - now still doing it let's let's see if I
52:25 - restart a Visual Studio code was what
52:28 - the doctor ordered
52:36 - oh this by the way is what programming
52:45 - really is the instructions do not match
52:49 - the behavior let's actually this is
52:52 - unlike the unity website someone's got
52:55 - no oh editor accept suggestion on commit
52:58 - character false okay thank you me I am
53:00 - so me
53:02 - let's try by the way so Visual Studio
53:05 - code this is a nice this is a bit of an
53:07 - aside if I go to preferences settings
53:09 - this is like the interface for changing
53:11 - the settings
53:13 - thank you new made you mosa
53:15 - I'm gonna what I'm gonna do it first of
53:17 - all it's very nice to people are super
53:19 - chatting me I will go I think I have a
53:21 - way of checking all of these after later
53:23 - you will hold your donations until next
53:26 - week when I'm doing my fundraiser okay
53:30 - open settings JSON you can also actually
53:33 - just edit the settings through here and
53:35 - I'm going to try what me I am so me
53:38 - suggested which is editor
53:41 - doc look at this this is what I want the
53:44 - autocomplete thank you very much whoops
53:49 - I need more space here to see this
53:53 - editor dot except it went away fine
54:00 - except suggestions I have this
54:05 - JavaScript dot suggest enable this false
54:07 - that's interesting suggestion on commit
54:13 - character false comma goes here in curly
54:23 - bracket okay
54:29 - let's just restart Visual Studio code
54:31 - one more time but it's not as bad now oh
54:43 - it's just giving me like this is better
54:46 - it's actually giving me like p5 things
54:51 - Oh it'll bring up the suggestions that
54:54 - just won't fill it in when you do all
54:56 - right that's fine that's fine the nice
55:00 - thing is here for some reason it was
55:02 - giving me crazy stuff but now it's
55:05 - actually giving me p5 suggestions like
55:07 - that's what I want all right I think
55:10 - we're gonna move on let's also install
55:14 - this update whatever it is okay all
55:23 - right
55:26 - yeah it looks like it's only pulling
55:28 - stuff that's in the current file which
55:29 - is as far as I'm concerned great and I
55:32 - lost my cap to this marker all right so
55:46 - let's let's try to let's before I get
55:50 - back into the coding I think maybe I
55:52 - should also clarify Fourier series
55:57 - versus Fourier transform oh yes yes yes
56:03 - yes yes
56:04 - Fourier series is for periodic chto
56:07 - signals and a Fourier transform is for a
56:10 - periodic signals for days series is used
56:12 - to decompose signals into basis elements
56:15 - while Fourier transforms are used to
56:17 - analyze single another domain ok ok so I
56:21 - think I'm at a point hopefully this is a
56:23 - good answer that makes sense to me and
56:28 - you can see here periodic function by
56:31 - discrete sum of complement for you is
56:32 - used to represent a general non periodic
56:34 - function right so ok so let me just
56:39 - bring this up really quickly
56:42 - so that people so I don't I don't
56:44 - confuse people who are watching the
56:45 - video later okay I'm back I fixed this
56:51 - autocomplete thing that was bothering me
56:52 - in Visual Studio code I'll put something
56:54 - in the description about how I did that
56:56 - but I also want to mention it in the
56:57 - chat I'm thank you to honor who
56:59 - mentioned who wrote you are using
57:01 - Fourier series and Fourier transform
57:03 - interchangeably but they are not the
57:05 - same thing so thank you so much for that
57:07 - comment applause no no if you can hear
57:11 - that there's like a presentation going
57:13 - on out there and people just started
57:14 - applauding just right so I don't
57:16 - definitely don't applaud for me so um I
57:19 - will I will post some links also in the
57:20 - video's description for more reading
57:22 - about this but in short the Fourier
57:24 - series is for periodic signals which is
57:26 - what I'm doing exactly right now to
57:28 - create this square wave which is
57:29 - periodic verses the Fourier transform
57:32 - which is for a periodic signals another
57:36 - way of thinking about that is to
57:37 - represent general any general non
57:40 - periodic functions so hopefully as I get
57:42 - further down this road I will come back
57:44 - to this but and and also in the chat I'm
57:47 - smarter every day writes Fourier
57:48 - transform is for swapping between
57:50 - frequency domain and time domain which
57:52 - is an also a really nice way of putting
57:54 - it okay but what I am doing in this
57:57 - video is implementing the Fourier series
57:59 - the periodic series of two to two
58:05 - that add up together to the square wave
58:07 - pattern okay all right
58:09 - let's get back to the code so here we go
58:12 - so I have success step one I have my
58:15 - circle passing around and you know what
58:18 - I think that I probably should I think
58:24 - that I probably should not put this I'm
58:29 - gonna have it go the I should wait a
58:32 - second yeah I'm gonna have this not go
58:35 - the the correct order action I may have
58:38 - it go this because I don't know if the
58:39 - negative numbers gonna mess things up
58:40 - okay
58:41 - all right next up next thing that I need
58:43 - to do and if we go back to this
58:45 - particular video is how can I take this
58:48 - circle that's moving around and then
58:50 - draw the resulting wave pattern
58:52 - and this is actually kind of a much
58:54 - simpler problem than you might think
58:55 - because basically what I want to do this
58:58 - is moving in two dimensions X is
59:00 - oscillating back and forth Y is
59:02 - oscillating back and forth and both
59:05 - those oscillating at the same frequency
59:06 - with the same amplitude in the same
59:08 - phase the starting together is moving
59:11 - along the path of circle so I just need
59:13 - to take the Y value and and graph that
59:15 - along the x axis so the way that I'm
59:17 - gonna do that is I'm gonna add an array
59:20 - to my code I'll call it wave and it's
59:23 - going to be an empty array has nothing
59:25 - in it and what I'm going to do here is
59:27 - every time I calculate a new Y value I'm
59:30 - gonna say what wave push Y so I'm just
59:33 - gonna save that particular Y value so
59:35 - now all I need to do is say you know for
59:38 - let Act you know I'm not gonna use X I
59:41 - equals 0 you know eyes less than
59:44 - wavelength I plus plus let's draw a
59:48 - point at I comma wave index I right so
59:54 - all I'm doing here is saying let's just
59:57 - draw all of those height values those Y
60:01 - values from kind of x equals 0 to as
60:04 - many as them as I get so if I do this
60:06 - you're gonna see look at that there's
60:08 - that wave pattern going all those points
60:11 - are moving up and down and you can see
60:13 - how the height of that wave is the same
60:15 - as the thing passing around okay but
60:18 - this doesn't look so great so what I
60:20 - want to do is I want to instead use
60:22 - begin shape and end shape this will this
60:26 - and then say vertex so this will
60:28 - actually like tie it all together and I
60:31 - think if I say no it's actually I'm not
60:32 - a minute I'm gonna leave the fill in
60:34 - there for a second because it's kind of
60:35 - cool so that's actually like trying to
60:37 - fill in the shape which is that sort of
60:38 - a nice pattern but I'm gonna just say no
60:42 - fill I'm gonna do this refresh the page
60:45 - and then also you know why not translate
60:50 - just to translate this a little bit over
60:52 - like 200 pixels and we can see this and
60:56 - then I guess I could also draw a line
61:00 - would this make sense a line from
61:05 - uh X Y X minus 200 this is weird what
61:09 - I'm doing now to the first point wait
61:15 - there's people timeout for it's like it
61:18 - what am I doing here I I just like
61:22 - thinking what do I wait what do I want
61:24 - it visually to do let's look at this
61:26 - Wikipedia thing yes sorry I want to draw
61:28 - a line yes I want to draw
61:30 - sorry I got confused while I was doing I
61:31 - want the end of the line to connect to
61:34 - where that is of course okay so what I
61:38 - want to do is draw a line so I need that
61:41 - first I need this first value so I have
61:46 - X minus 200 comma Y 2 I comma wave index
61:53 - 0 and actually it's not I it's zero so
61:56 - this is just this this I know is the
61:59 - very first point in this loop and since
62:01 - I translated over I've got like back up
62:03 - with my x-value this is very awkward
62:08 - [Music]
62:14 - oh no no I don't want it to connect to
62:18 - here what am I doing wrong why is what
62:25 - I'm doing different oh this is oh I'm
62:27 - doing it backwards I know what I'm doing
62:29 - I doing it backwards I actually don't
62:32 - want to I mad I'm appending to the end
62:34 - of the array so every new value I'm
62:36 - appending to the end I want to add it to
62:37 - the beginning so instead of using push
62:39 - there we go instead of using push I want
62:44 - to use unshipped so unshifted a
62:46 - JavaScript function a weird name for it
62:48 - but push just adds this thing to the end
62:50 - of the array one add it to the beginning
62:51 - well that was that was a mistake there
62:55 - we go this is what I'm looking for there
62:58 - we go okay so now I have the line
63:01 - connected there now one thing that's a
63:04 - little bit of an issue here is that I'm
63:06 - just like adding points and adding
63:08 - points and adding points and adding
63:09 - points and never getting rid of any
63:10 - points so I also should probably at some
63:14 - point I should say something like if
63:16 - wave dot length is greater than like I'm
63:21 - just going to make up some number right
63:23 - now I could do a calculation of how many
63:24 - points I need to the end of the canvas
63:26 - but just to move more quickly here I'm
63:28 - gonna say wave dot pop so that would
63:30 - just like if it's getting more than 500
63:32 - is gonna like delete the last one off
63:33 - the end and now we should be able to say
63:37 - like I should be able to look at
63:39 - wavelength 152 so clearly I only need
63:44 - like I don't need more than 250 so let's
63:47 - redo that again and we'll get like 250
63:50 - points you can see it's there we go
63:52 - I just want to make sure it stops at 250
63:56 - yeah there we go so to stop at 150 okay
64:01 - how we doing
64:07 - okay sorry this I just I need a second
64:12 - little water all right let me think what
64:18 - the next Lex step is all right okay all
64:26 - right all right okay coming back
64:39 - let me disciple the camera while I'm
64:40 - taking a minute here okay there's a lot
64:53 - of noise going on in the hallway all
64:58 - right we are at we are at this spot now
65:02 - comes the exciting part I mean this was
65:05 - hopefully all somewhat exciting but to
65:06 - me how do I suddenly go from I have one
65:10 - circle with a point around it to another
65:16 - circle that's kind of like there with
65:19 - another point around it to another
65:21 - circle that's like there with another
65:23 - point around it how am I going to add up
65:26 - these circles and continue this path of
65:29 - X Y along them with all of these points
65:31 - rotating and spinning and guess what
65:32 - I've actually done this before
65:34 - I'm just remembering now I have a video
65:37 - on the fractal spirograph let's see if
65:40 - this comes up yeah the fractal
65:43 - spirograph I actually did this already
65:44 - in the fractal spirograph which was this
65:46 - way of doing exactly this to create a
65:49 - fractal pattern which I should go back
65:50 - and revisit this but so we'll see if
65:53 - that's how this compares to that so let
65:55 - me go back to the code here and so what
65:57 - I want to do so first of all before I do
65:59 - this I think I need to think a bit more
66:02 - formally about these functions so before
66:05 - I was just saying radius cosign of time
66:08 - radius sign of time but these functions
66:12 - actually map to these values on
66:17 - Wikipedia here so if
66:20 - theta is my time basically what I'm
66:23 - saying is that I want to and and the the
66:27 - the value multiplied by that is four
66:31 - divided by sorry theta is my time and
66:35 - four divided by PI is basically my
66:37 - radius in a way here kind of conflating
66:40 - some things but I can start to use this
66:42 - particular series to understand the
66:45 - ratio of the radii and the frequencies
66:47 - between these these different
66:50 - oscillating circles okay so let's say
66:53 - what if I what I do is I say four
66:57 - divided by pi times cosine of what was
67:02 - it again one times time so I'm going to
67:05 - do this I'm going to just change the Y
67:08 - here and then what I'm going to do is
67:12 - I'm also doing to say radius times that
67:19 - and also I missed something
67:23 - four divided by what one time so this is
67:27 - confusing because there's a 1 here 1
67:29 - times angle 1 times pi so I'm gonna say
67:33 - 1 that that's 1 times time 1 times time
67:36 - and this is 1 times pi and this is 1
67:40 - times pi so the number that I need to
67:43 - change for each circle is that 1 so
67:46 - let's just see what this actually yields
67:49 - and I'm gonna go back to here well it's
67:54 - sort of it's the same thing but now the
67:56 - fact that I have that radius was 100
67:58 - it's like everything is way too big and
68:01 - so what I'm gonna do is I'm gonna change
68:04 - this is really more like a scaling
68:05 - factor at this point I'm gonna change
68:07 - this to 20 and now we can see whoa boy
68:11 - that's still really well let's just
68:14 - change this to 10 yeah that looks better
68:18 - and then what I need to do here is this
68:23 - number here so I'm gonna say I really
68:26 - what I should be saying is this this
68:32 - need this hold on
68:33 - this is gonna get calculated here I will
68:37 - refer to this later let's put this in
68:41 - here
68:41 - and then let's make this back to this
68:45 - because I don't really need let's like
68:46 - to make this back to here okay and for
68:50 - time divided oh oh this should be dip
68:52 - one time spot why is it doing that to me
68:55 - I don't want that far I want these
68:56 - divided by each other visual studio code
68:58 - is too smart for my own good there we go
69:02 - there we go that's what I wanted that's
69:04 - why it was giving me something crazy
69:07 - anyway okay radius is not to find a sure
69:13 - it is where Oh huh radius oh this is the
69:18 - point ah the circle now I need to draw
69:22 - the circle next this is when things are
69:24 - going awry and let me put this here
69:29 - there we go and now there really of
69:33 - course the out was that of course I had
69:35 - the division in the wrong place I have
69:37 - this tiny little wave so let's go back
69:39 - and make that about 25 which I think
69:43 - would be now basically I hope it's
69:45 - divided by pi ah this is going
69:50 - remarkably well there we go okay
69:52 - I'm happy with where I am now okay so
69:56 - now I have that first circle the reason
69:58 - why I am doing this the reason why I'm
70:00 - putting this making all this work
70:02 - because I want this to be n I actually
70:05 - want this to be a number that changes
70:07 - right first first it's 1 then it's 3
70:12 - then it's 5 then it's 7 that's not too
70:15 - hard to figure out right and what I want
70:17 - is to start X with and Y both at 0 and
70:21 - just add this stuff together so X plus
70:24 - equal X y plus equal so I want to and
70:31 - then what I want to do is I want to loop
70:33 - n so n is going to go from one I'm gonna
70:36 - say 0 actually and because I you got a
70:40 - count starting with 0 n is less than 2 n
70:43 - plus plus and then
70:46 - and this really by the way I should call
70:48 - this I because what I'm really saying is
70:50 - what I N is how do I do 1/3 and this is
70:55 - pretty easy I multiply by 2 and add one
70:57 - N equals I times 2 plus 1 right when I
71:02 - is zero I get 1 when I is 1 I get 3 when
71:06 - I is 2 I get 5 so now if we add these
71:09 - together and I'm just doing two right
71:11 - now and speaking of which I should move
71:15 - this all the way down to here and I'm
71:18 - gonna take I'm gonna take this out for a
71:20 - second and then I got to go back here
71:24 - and there we go okay so something is
71:26 - wrong I kind of got things close like
71:28 - look at this interesting weird crazy
71:30 - pattern that I've got wha what is going
71:34 - on so I definitely I definitely messed
71:36 - something up but oh but but let's see if
71:41 - we can figure that out okay so the line
71:44 - should not be going from so I should be
71:47 - actually keeping track of previous X is
71:51 - X and previous previous Y is y so I I
71:57 - don't I'm gonna like take out the wave
71:58 - for a second because I'm gonna have to
72:00 - change where I'm viewing here and then
72:01 - I'm going to just say a previous x
72:04 - equals x oh no
72:07 - and then pre and then previous x equals
72:11 - x previous y equals y and then the line
72:14 - is is going from those like that's not
72:16 - always going from zero zero it's going
72:18 - from the previous XY so now that's right
72:22 - the other circle also needs to have its
72:27 - Center be at previous X previous Y and
72:30 - there we go so now I have this I have
72:35 - this circle spinning around this circle
72:38 - spinning around this circle there's only
72:40 - two circles but in theory if I change
72:43 - this to like five there we go now we're
72:47 - now we're getting somewhere
72:48 - and actually it would be sort of fun I
72:50 - really think that I should think about
72:51 - how I'm drawing this a little bit better
72:53 - so for example I think I want these
72:55 - circles to be much lighter so let me
72:58 - give them a little alpha
73:00 - and then the points should also be I
73:03 - think the points are almost like less
73:06 - relevant I almost don't want to draw
73:08 - these points let's just because I have
73:10 - the lines now so let's see what happens
73:12 - if I take this out and I do this
73:15 - oops but I want the line to be full
73:21 - brightness there we go so this is what
73:23 - I'm looking to draw so there we go
73:25 - so I now have this particular series
73:28 - with every circle next to rotating
73:33 - around every other circle and I the I am
73:38 - using the values from the particular
73:41 - fourier series for a square wave okay so
73:46 - now and I feel like this should be
73:48 - bigger it's so small let's go back to
73:52 - having this be 100 and let's actually
73:55 - not let's just see how this looks and
73:57 - let's we can also I'm being like
73:59 - neurotically silly about let's move it
74:01 - over a little bit okay
74:02 - oh I don't want it to go off the screen
74:04 - though so let's leave it there split the
74:08 - difference
74:08 - 75 okay and then have to go back a
74:11 - little bit this is very silly what I'm
74:14 - doing okay 150 there we go okay so I
74:19 - know this is hard for you to see let me
74:21 - zoom in on it so this is we go so now
74:22 - guess what we're basically done right
74:25 - before I have to put the wave back let's
74:27 - see what happens if I just put that wave
74:29 - back like what happens I put it back
74:36 - well what's going on like I'm getting
74:38 - some crazy thing here I don't even know
74:40 - what's going on so what I need to do
74:44 - what clearly is happening is I am not
74:45 - getting for why the correct Y values and
74:49 - drawing it to the correct place so I've
74:51 - got to fix that even I like this
74:52 - interesting pattern I've got to fix that
74:54 - if I want that square where you can sort
74:55 - of see the square wave pattern here so
74:57 - what I want to do here is oh I'm pushing
75:01 - all the values I just want to push the
75:04 - last value actually this is gonna be a
75:05 - much easier fix I think I just want to
75:07 - push the laughs value after the loop is
75:09 - over and there we can see there we go
75:12 - but I don't know
75:13 - why this isn't shifted over did I lose
75:17 - that somewhere yes so this I need to do
75:25 - this this is actually going to be all of
75:28 - this was actually fine and there we go
75:30 - we are done this is the Fourier series
75:36 - for a square wave in JavaScript
75:39 - programmed in about oh I'm not
75:41 - visualizing the middle line this is a
75:43 - good point well I don't know if that's
75:45 - what but what smartereveryday is asking
75:46 - in the chat but I I should add one more
75:49 - thing to this because this is going to
75:51 - become relevant later in my mind's eye
75:54 - of how I'm going to do more videos on
75:55 - this so right now I am visualizing the
75:58 - resulting wave pattern also I got to do
76:01 - a few more things will you please bear
76:02 - with me I know this videos already about
76:04 - 70,000 hours long but let's at least add
76:07 - one slider and I'm going to use the and
76:16 - so I'm gonna have a slider that gives me
76:18 - values between 1 and 10 and I'm gonna
76:21 - start it at 1 and what I'm gonna do is
76:26 - I'm gonna take a slider dot value so
76:29 - basically I'm going to have n be slider
76:33 - dot I'm gonna have n control the amount
76:36 - of iterations of the Fourier series
76:38 - itself so now you can see there's just
76:40 - one so I can use this slider to add 2 3
76:42 - 4 5 6 and this is 10 and I could this is
76:44 - fun that I can actually do this in real
76:46 - time so now you the viewers of this
76:49 - video will have so many more creative
76:52 - and interesting ideas about how to make
76:55 - this prettier how to create more
76:57 - interactivity there's so many but this
76:59 - is just an inkling right every system
77:01 - that you build with code has a bunch of
77:03 - variables and parameters there's no
77:04 - reason why you couldn't make those
77:05 - interactive you couldn't even think we
77:07 - could make the number of iterations
77:10 - that's to a sine wave itself like what
77:13 - would happen there that would be crazy
77:15 - but now you can see up to 10 we can see
77:18 - how it's converging and I you know I
77:20 - don't know how far I want to push this
77:22 - let's push it a little let's try
77:26 - let's put it at 100 and that's zero all
77:31 - the way up to 100 performance-wise it's
77:34 - fine it's happy to do 100 there we go
77:37 - look at this look at that square wave
77:38 - all that is that is like nice and square
77:42 - I've ever seen this is making me so
77:44 - happy I cannot explain to you I feel
77:46 - like this is a thing that's been in my
77:47 - head for years but I never actually like
77:50 - sat down to program it course I am
77:52 - standing right now but close enough all
77:55 - right so one more thing that I want to
77:56 - do I would really like to also see this
77:59 - path here like what I would like to
78:01 - trace out the path of this of what these
78:04 - endpoint is doing not map to only the x
78:07 - value but also the Y value so the way
78:09 - that I might do that is I might say a
78:10 - let path another array this is I think
78:13 - going to be a little bit easier and I'm
78:15 - going to say path dot push this I can
78:23 - add to the end and I'm going to use
78:24 - create vector because I need to store
78:25 - both an X and a Y so in this way if I
78:28 - only needed the Y value because the X
78:30 - values are fixed with the path I need
78:32 - both the X and the y value because I
78:34 - want to visual that that path well we'll
78:38 - see how high we can get it to go in
78:39 - JavaScript before like my computer
78:41 - explodes okay so that now what I should
78:45 - be doing and then I just need another
78:47 - one of these thingies by the way that's
78:50 - the technical term for this this thingy
78:53 - so I want to do another loop I want to
78:58 - do it actually before I translate and I
79:01 - want to just instead I'm gonna do path
79:02 - dot length and I'm gonna say path index
79:05 - I dot X and path index I dot y yeah okay
79:14 - is this right my brain is starting to
79:16 - melt oh yeah there we go
79:18 - look it's drawing the path of the circle
79:20 - I move it up to one now it's drawing
79:23 - Napa now of course it's like drawing
79:24 - over itself a million times so every
79:28 - time its cycles past two pi I can resize
79:34 - should reset it
79:35 - [Music]
79:37 - what's going on here time n times time
79:41 - oh but when n is one that's one full
79:44 - cycle I mean this is later is a little
79:46 - bit silly but I'm gonna say if time is
79:48 - greater than 2 pi just reset the path to
79:54 - nothing and then reset time back too
79:58 - zero this I'm sure a more thoughtful way
80:00 - to do this but let's just see if that
80:01 - works like it's drawing the path and
80:04 - then we're not going to really see it
80:06 - clear yeah it cleared right so that's
80:07 - exactly what I want and then now if I do
80:09 - a couple iterations we can see and this
80:12 - is sort of crazy what it's doing like
80:13 - I'm seeing it draw that it's it's draw
80:17 - that path I need more I need more space
80:19 - any more pixels Mozart
80:22 - let's get myself let's oh I should end
80:27 - this video ok so I'm gonna stop here I'm
80:30 - gonna do some more in during this life
80:32 - this is so confusing to explain thank
80:34 - you for watching this coding challenge
80:36 - I'm still talking a second and that's
80:40 - your edifice right
80:42 - okay hold on let me just put this back
80:47 - to something reasonable all right thank
80:58 - you for watching this coding challenge
81:00 - visualization of the Fourier series for
81:02 - I'm making a square wave check this
81:05 - video's description for a link to the
81:08 - coding train webpage with this challenge
81:09 - on the code for it and then if you make
81:11 - your own variation of this please share
81:13 - it with me you could contribute it right
81:14 - there so what are some things you might
81:16 - do number one is why don't you try doing
81:18 - this sawtooth wave could you take the
81:21 - code that I wrote and make it do this
81:23 - that would be a nice exercise to try
81:25 - what other kinds of interactivity can
81:28 - you add to this to in terms of changing
81:31 - the colors changing the different
81:33 - parameters changing the view of it what
81:35 - happens if you do this like in 3d like
81:37 - right could you have like some kind of
81:38 - like point oscillating over three
81:40 - dimensions in a sphere and then map that
81:42 - that would be cool so III look forward
81:45 - to seeing what kinds of things you
81:46 - create ask your questions and all that
81:48 - nonsense it's not it isn't I mean
81:50 - whatever goodbye see you next time all
81:55 - right that was just my end of the video
81:57 - thing for when this gets edited I feel
81:58 - like I'm having I there's like a lot of
82:00 - new viewers I'm getting the sense of so
82:01 - I'm trying to explain my weird process
82:02 - but I'm not doing that well at all so
82:05 - let's let's see how far we can push this
82:08 - so first of all let me let me give
82:14 - myself a little bit more let's all right
82:20 - let me see I need to save a snapshot of
82:21 - this but I am going to I'm trying to
82:28 - think of what I want to do and then I
82:29 - want to do the toothpick challenge what
82:30 - time is it always noon oh I took a long
82:33 - time it's gonna be a really long video
82:36 - okay I need i plus equals to not I plus
82:41 - plus as alka says oh you guys are having
82:43 - it you all are having a chat about
82:45 - something else in there alright so let's
82:47 - see let me let me get myself a little
82:48 - bit more space here and really what I
82:51 - need is more width and I should if I'm
82:57 - really thinking about this I should have
82:58 - everything be relative to like the size
83:01 - of the window but I'm not gonna program
83:04 - that right now let's just try putting
83:08 - this up to like 500 and see what happens
83:10 - oh I lost the and then let's translate
83:16 - this over like a bit more this should
83:20 - obviously be a variable there we go okay
83:23 - so we're gonna give this a try we're
83:25 - gonna see like how the JavaScript
83:27 - performs as I move this up and maybe
83:29 - what I should also do I should probably
83:31 - like console.log what the number is but
83:32 - that's fine there that's 500 what is
83:43 - something is like very weird but I'll
83:49 - take it
83:49 - I just when I want to turn off the I
83:53 - wonder if I did something with the path
83:55 - incorrectly
83:56 - that's confusing me let's turn that off
83:58 - there we go
83:59 - let's push it up to 500
84:08 - [Music]
84:18 - hello to consult Keith young apparently
84:21 - welcome to all the new viewers dan you
84:24 - could have the user be able to change
84:25 - the riemann function yes I could all
84:31 - right this is crazy all right Bert make
84:34 - the first circle set to fiy try to make
84:38 - a 4pi limit people are giving me all
84:40 - these amazing suggestions I'm gonna move
84:42 - on I think it's time to do the toothpick
84:45 - I want to do at least two things today
84:46 - plus I said I was gonna unbox both your
84:49 - couple so I think I'm gonna leave this
84:52 - at where it is and I'm gonna move on and
84:55 - do the toothpick challenge but thank you
84:59 - everybody make the path fade yeah I'm
85:03 - gonna do that you know what I'll do the
85:04 - toothpicks in processing because people
85:07 - have been clamoring for a processing and
85:09 - since I'm having trouble with the p5 web
85:11 - editor anyway I will have to use array
85:14 - list which is always really awkward but
85:16 - that's fine okay so I'm gonna close out
85:20 - all this stuff I am going to put this
85:28 - back to what it was
85:30 - [Music]
85:54 - okay so I'm gonna leave the code like
85:56 - this
85:57 - [Music]
86:01 - alright so people are asking what did I
86:03 - mean by Homer Simpson so my goal my new
86:08 - goal in life is to be able to fight
86:12 - google Fourier series and homework
86:14 - Fourier transform maybe there we go
86:16 - amazing how things work is to recreate
86:19 - this and I'm just gonna skip ahead
86:21 - pretty far here you can see look at this
86:23 - this is using like basically doing
86:26 - exactly what I did but on this
86:28 - completely arbitrary path of Homer
86:30 - Simpson drawing like this like makes my
86:34 - mind and and so if you watch the
86:36 - smartereveryday video what dhoka did is
86:40 - - what doe guy did was recreate the
86:45 - smartereveryday logo so I suppose I
86:47 - would love to in JavaScript
86:51 - maybe recreate I don't know this
86:55 - something a rainbow this clouds
86:57 - something like that
86:59 - one of these characters something like
87:01 - that so that's what I'm gonna do can we
87:04 - take a break ridiculous can we take a
87:07 - break before the toothpick yes because I
87:10 - also need to go get some more water
87:11 - so I'll probably take a few minute break
87:13 - and so actually what I so one of the
87:16 - things I really want to do is um create
87:18 - some I need a like a video that I can
87:20 - play while I'm taking a break that's
87:21 - like be right back but I am going to
87:24 - right now just go toothpick number file
87:30 - let's go here let's find a nice
87:41 - that's good and then I also want to go
87:44 - here and I want to go where it here here
87:53 - okay this is by the way quite possibly
87:57 - my favorite website in the entire world
87:59 - look for Homer Simpson cycloid from
88:02 - Santiago let me see if I can there's a
88:05 - way that I'm so sorry sorry look for
88:08 - Homer Simpson cycloid from Santiago
88:09 - Ginobili writes with a super chat Vitor
88:12 - Nogueira there's a way that I can see
88:14 - all of the super chats I think through
88:20 - an interface that I have here let me
88:23 - just try this I think if I go here no
88:28 - that's for me to give myself a super
88:30 - chat somewhere I saw that there's like a
88:33 - way that I can have a page actually by
88:38 - next week if I could get the super chat
88:40 - for good thing I want to have something
88:41 - I want to program some stuff where like
88:43 - a little thing would happen when there's
88:45 - a super chat if it's a donation to the
88:47 - processing foundation I can't find it I
88:52 - don't know how YouTube works but if I go
88:54 - here here no I can't find it I can't
89:02 - find it so I apologize if I've missed
89:05 - people's super chats I can definitely
89:08 - see them later and yes I'm using the
89:13 - invisible computer that's where I look
89:16 - at your chat and also the slack channel
89:18 - that's going for patron patreon you
89:21 - should do it with drawings from the
89:22 - quick draw data because they already
89:24 - give you the right path inputs says me I
89:26 - am Sania this I should do for next week
89:29 - so quick draw data set what's the most
89:32 - holiday II thing in the quick-draw data
89:35 - set is it maybe like snow snowman I'm
89:41 - guessing I forgot what the so yes so
89:46 - let's let's work on that coding train
89:49 - enthusiasts let's try to figure out a
89:51 - way to do that the quick-draw data set
89:53 - is right
89:54 - Thank You AJ 3600 okay Wolfram Alpha can
90:01 - give you an formula to draw images to
90:03 - interesting that's interesting okay
90:09 - so I'm gonna do the toothpick patterns
90:12 - which is here and here here I want a a 1
90:25 - 9 a 1 3 9 2 5 0 a 1 9 2 3 5 0 is that
90:33 - what it was a 1 3 9 2 5 0 search
90:39 - that's this sequence so I have this
90:44 - sequence which is this sequence which is
90:47 - this okay this is and then let's do this
90:53 - in processing so processing is a Java
90:57 - based program environment very similar
90:59 - to p5 in JavaScript but it's a
91:02 - downloadable desktop thingamabob hi
91:05 - vocabulary as it gets closer to
91:07 - lunchtime my vocabulary really starts to
91:09 - fade it's not good
91:11 - never attempt complicated fractal
91:14 - recursive coding challenges before lunch
91:20 - alright so I'm gonna take a short break
91:23 - I know people like the this stop song as
91:27 - always I always forget this stop
91:39 - [Music]
91:52 - like solution I am so good with
92:05 - technology okay I'll put on something
92:14 - else for you all right I'm about to mute
92:21 - my microphone and I will be back in
92:24 - about five minutes
92:27 - [Music]
92:44 - [Music]
94:00 - [Music]
94:26 - [Applause]
94:28 - [Music]
96:15 - okay I'm back how is that longer than
96:17 - five minutes it is time ups overhead
96:24 - camera that was about ten minutes
96:29 - [Music]
96:40 - [Music]
97:09 - one more coding challenge for today
97:13 - and then where did I put my eraser
97:17 - [Music]
97:41 - okay so toothpicks toothpicks toothpicks
97:54 - okay this one's good this is I'm really
97:58 - excited about this hopefully every
98:06 - what's going on here yeah all right
98:17 - maybe pouring all the two things out
98:20 - wasn't the right idea we're not over
98:25 - here yeah I don't know it here and then
98:28 - okay all right so all right let's try
98:38 - this a little bit ourselves so I'm gonna
98:41 - try as best I can to make this toothpick
98:45 - pattern that I learned about from this
98:47 - numberphile video oh you get the old I
98:54 - mean mine here okay wait I don't know
99:02 - this is not going well yeah so the idea
99:09 - here
99:17 - this is almost this is like this is just
99:20 - like when we played the universal paper
99:22 - clips game on the coding train let's see
99:29 - how I am so mechanically challenged it's
99:34 - so sad I will definitely be able to
99:45 - ironically program this faster then I
99:49 - could possibly make the toothpick
99:52 - pattern let's just try to I'm gonna try
99:55 - to fill up at least the space that you
99:57 - can see so where do I need to add some
100:03 - definitely want to go here one go here
100:14 - yes you are now watching a live stream
100:22 - of a person arranging toothpicks on a
100:25 - desk I think I've run out of space I
100:32 - guess I could go up here right cuz
100:36 - there's still more that you're seeing
100:37 - oh it's oom din again every time what
100:42 - does go just the camera like oh you know
100:44 - what it is the camera look at this could
100:49 - it be just the weight that the fact that
100:52 - the camera is pointed down and mounted
100:54 - that the gravity is actually zooming it
100:59 - back out zooming it in is that what's
101:02 - going on it's like why is there no space
101:04 - for my toothpick fix I wasn't doing this
101:10 - in the right order now okay I give up
101:21 - okay there's like a ring man joke in
101:24 - here somewhere - I think but okay it
101:29 - didn't sue min it didn't what's going on
101:33 - is it just like slowly over time yeah
101:36 - like if I pull it down it zooms in if I
101:40 - yeah I don't know what's going on
101:43 - gravity is a thing hmm okay anyway this
101:54 - is not really that relevant so first of
102:07 - all welcome new viewers apparently I
102:09 - don't know how many people are watching
102:10 - right now but I seem to have a lot of
102:12 - new viewers thank you I am a person who
102:16 - wastes a lot of time on a live stream
102:18 - that's supposed to be about programming
102:20 - I guess but really it's just about a lot
102:23 - of nonsense around toothpicks and random
102:25 - numbers and brain-melting out of ear
102:29 - things and so here we are so I am now
102:34 - going to attempt to do a coding
102:36 - challenge to implement this particular
102:41 - visualization of the toothpick pattern
102:45 - as demonstrated in this recent
102:47 - numberphile video I will be using this
102:53 - online encyclopedia of integer sequences
102:56 - by into a Sloan who is featured in the
102:58 - video this is the particular sequence
103:01 - that I'm looking for I think is this a 1
103:06 - 9 2 3 5 0 a 1 9 - oh no 3 a 1 the wrong
103:12 - one 8 let me copy it a a 1 3 9 2 5 0 a 1
103:18 - oh boy this is not the right one a 1 3 9
103:21 - 2 5 0 totally on the wrong - to make
103:25 - sequence there we go
103:26 - so if I do my programming correctly I
103:29 - should get the sequence a number
103:31 - here we go here we go okay here we go
103:38 - mmm stretch stretch always important to
103:42 - stretch when you're programming Oh
103:46 - myself there okay hello and welcome to
104:01 - Makoto challenge toothpicks I know it's
104:04 - a little weird what I'm doing I'm really
104:06 - doing a coding challenge about
104:07 - toothpicks and in fact I have all these
104:11 - toothpicks on my desk over here and I'm
104:13 - trying to I thought oh man I have this
104:14 - really amazing video where I arrange
104:16 - them and I just I can't I can I'm
104:18 - terrible at this sort of thing so I'm
104:20 - gonna but but I do have an overhead
104:21 - camera which is exciting there's some
104:22 - possibilities there so what is this
104:24 - toothpick pattern terrific toothpick
104:25 - pattern so first of all you I would
104:27 - suggest pause this video right now go
104:29 - and watch this wonderful numberphile
104:31 - video which explains the toothpick
104:34 - pattern and you can use it to generate
104:37 - interesting fractal like visualizations
104:40 - in a two-dimensional space this actually
104:43 - comes from the research of NJ Sloan who
104:47 - is the founder of my absolute favorite
104:50 - website I mean I don't know oh there's
104:52 - other wonderful websites so I don't know
104:53 - I don't want to play favorites here but
104:54 - the online encyclopedia of integer
104:56 - sequences is a pretty awesome website
104:59 - it's just a website of sequences of
105:01 - numbers and I've used it before and
105:04 - there's so many things to explore in
105:06 - terms of these sequences of numbers but
105:08 - one of these a particular sequence of
105:10 - numbers comes out of this toothpick
105:12 - sequence
105:13 - Omar pols toothpick sequence so this is
105:15 - a nice interactive demonstration of the
105:17 - toothpick sequence you start with oh
105:20 - wait wait wait wait we could do this you
105:21 - start with a single toothpick unless you
105:24 - say next and you put two toothpicks
105:28 - consume you doughnut to to fix you put
105:35 - two toothpicks like this on the ends and
105:38 - then you say next and I also put
105:40 - toothpicks on the
105:42 - but the next step is the key step so
105:47 - once I get to here and I say next again
105:49 - notice how no toothpick goes here right
105:54 - toothpicks can only go on eight what's
105:56 - called a free edge an edge that's not
105:58 - touching any other toothpicks so this is
106:00 - touching here this is touching here I
106:03 - can actually point over this way I don't
106:04 - know I don't know the best way to do
106:05 - this let's get rid of that camera shot
106:07 - but so and then if I keep hitting next
106:10 - look at this I keep going and going and
106:12 - going and going and going and going and
106:13 - I can adjust the scale and I could
106:15 - actually just say run and move so I want
106:17 - to make this in the processing
106:19 - programming environment which is a Java
106:21 - based program vironment can I make this
106:23 - so a couple things one is this is fun to
106:26 - play around with you can play with
106:27 - different you can play with different
106:29 - parameters you can render out to a PDF
106:31 - and in addition what's going on here why
106:35 - is this a number sequence what's kind of
106:36 - fascinating about this and if you watch
106:38 - the numberphile videos can you create an
106:40 - equation a formula to sum all the given
106:44 - toothpicks at any stage of iteration and
106:48 - that's exactly what this particular
106:51 - number sequence is which I will now do a
106:53 - dramatic reading of because I like to
106:55 - read number sequences 0 1 3 7 11 15 23
107:04 - 35 43 47 fifty-five sixty seven seventy
107:10 - nine ninety five hundred twenty three
107:13 - years 55 her 71 her 3500 three 195 207
107:19 - 223 150 120 day three
107:23 - three 347 eighty three 423 483 571 651
107:36 - 683 687 690 five six seven 719 735 763
107:48 - 795 15:31 895 okay that's good enough
108:02 - let's start coding so the first thing
108:07 - that actually did I think I wouldn't let
108:08 - me save this call it toothpicks let me
108:12 - make sure let me minimize some of this
108:14 - other nonsense that I'm not using move
108:16 - this over here
108:18 - let me make a window that's 600 by 600
108:20 - let me draw a background that is white
108:23 - and let me hit run and we can see there
108:26 - it is there's my window this is where I
108:28 - need to draw the toothpicks so I think
108:29 - what I want to do is you know skip a few
108:32 - steps here like I might but you know if
108:34 - I'm really trying to do this the first
108:35 - thing that I might do is just literally
108:37 - draw a line but I know that I'm gonna
108:39 - need some kind of toothpick object this
108:41 - is a good case of object-oriented
108:43 - programming because I need to create a
108:44 - class that describes what it means to be
108:47 - a toothpick what does it mean to be a
108:49 - toothpick then I can have an array of
108:51 - many toothpicks okay so that's not going
108:58 - to work
108:58 - neutab call it toothpick I'm going to
109:02 - say class toothpick and what do I need
109:06 - in the toothpicks so I know that I need
109:09 - a toothpick I need to have two end
109:11 - points
109:11 - what's the XY location here and what's
109:14 - the XY location here so I'm gonna call
109:16 - those a X a Y B X B Y and I'm gonna
109:21 - write the constructor and the way that
109:25 - I'm gonna do this the way that I think
109:27 - is gonna work the best like when I
109:28 - create a toothpick what I'm going to do
109:30 - the toothpicks can only be horizontal or
109:32 - vertical so I'm gonna create a toothpick
109:34 - by giving it the center point
109:35 - and then giving it a value like one or
109:38 - negative one whether it's horizontal or
109:39 - vertical so in addition it is also going
109:42 - to each toothpick will have a variable
109:44 - called dir for direction or orientation
109:46 - so I'm gonna give each toothpick and X
109:50 - and I'm using integers very specifically
109:52 - because I think this is gonna make my
109:55 - life easier to sort of almost think of
109:57 - this toothpick as living on a grid and
110:00 - you can't have spot 1.37 or to point
110:03 - like I really want to like be as close
110:05 - to pixel perfect as I can so and I also
110:09 - I mean this was really a global variable
110:10 - for the whole system I'm just gonna make
110:12 - a variable called length for how long a
110:15 - toothpick is and I do want an odd number
110:17 - because I want to be able to have that
110:18 - center point be perfectly have each half
110:23 - of the toothpick be equal in size so for
110:25 - example if I had a toothpick of length 9
110:29 - then the center point is at five no four
110:35 - zero one two three five six seven eight
110:40 - hey hold on let me explain why this is
110:54 - important if I have something of length
110:57 - three right this is the cent this is if
111:01 - the total length of this is three this
111:03 - is the center I have one spot here in
111:05 - one spot here if I have something that's
111:08 - of length five then I've got two here
111:11 - two here and a perfect Center so this is
111:14 - going to be important in terms of I
111:15 - think that sort of evenness of how I
111:17 - place them the toothpicks and we could
111:19 - probably make a difference in the code
111:22 - that accounts for that but it's gonna
111:23 - make my life easier two things wait
111:25 - there's a toothpick stuck in my computer
111:26 - ah okay I'm gonna get it out to think no
111:30 - there we go okay all right so length
111:34 - let's just start with a length of 9 and
111:36 - what I'm going to say is that oh and I
111:40 - get to get a direction so I'm gonna say
111:45 - that if the direction oh so first I'm
111:47 - going to say that
111:49 - and let's just call this D Direction
111:51 - equals D if the direction equals one
111:54 - let's make that a horizontal toothpick
111:57 - so then a X should equal X plus length
112:01 - divided by two and a y no sorry and B X
112:08 - should equal owed so a X should be X
112:10 - minus length divided by two whoo and B X
112:13 - should be X plus length divided by two
112:14 - and then the Y's are the same a y is y
112:18 - and B Y is y and then let's make a
112:22 - toothpick that is vertical so I'm gonna
112:26 - do all the same stuff but these are now
112:30 - going to be with the Y higher and lower
112:34 - and let's get rid of this white space
112:37 - here and so now then I'm gonna write a
112:39 - function called like show and I'm gonna
112:43 - say I'm just gonna draw I'm gonna say
112:44 - stroke zero let's make it a little
112:47 - stroke weight like two just so we can
112:49 - see it and then I'm going to say line
112:53 - from a X a Y to B X B Y so this is the
112:59 - idea of a toothpick a toothpick has two
113:02 - points a and B a XY Y ax ay Y B X B Y
113:08 - and it has a direction just to be clear
113:12 - about this because this is so
113:13 - fundamental this is the toothpick this
113:16 - is point a X a Y this is point B X B Y
113:21 - but also the toothpick could be written
113:24 - in this orientation as well okay so now
113:28 - in my main program I'm gonna make an ER
113:32 - I know I'm gonna need to have a list of
113:33 - toothpicks so I'm gonna make an
113:36 - ArrayList full of toothpicks let's call
113:40 - that pics equals new ArrayList toothpick
113:45 - now if you've if you're coming from all
113:47 - of my JavaScript video tutorials this is
113:50 - a pretty weird thing that I've written
113:52 - because in essence if I were doing this
113:54 - in JavaScript why does it not know
113:58 - [Music]
113:59 - errors
114:03 - wait what did I do wrong
114:07 - timeout for a second
114:20 - wait a sec what did I do wrong here
114:23 - Oh toothpick capital P also does this
114:29 - code to a good size and I think it needs
114:31 - to move over a little bit silly me I
114:37 - have a capital P there for no reason so
114:39 - what I was saying was if you've come
114:42 - from my JavaScript videos you would see
114:43 - me do something like this like making an
114:46 - empty array that I'm gonna fill in
114:48 - JavaScript is super simple in Java which
114:51 - this which processing is built on top of
114:53 - I've got to use this data structure
114:55 - called an array list I don't have to
114:57 - there's other data structures which I
114:58 - need to specify what's going in it
114:59 - toothpick objects and then I need to
115:01 - create it so so there now what I want to
115:05 - do is I want to say pics add a a new
115:10 - toothpick which I'm going to put at 300
115:13 - 300 and you know what I'm gonna put it
115:15 - at 0 0 and I'm gonna give it a direction
115:18 - of 1 because what I'm gonna do here is
115:21 - I'm gonna say translate with / - I'm
115:24 - always going to think of the center at
115:28 - the center of the canvas as 0 0 so I
115:32 - need to translate to that Center and
115:34 - then I'm going to say for every
115:36 - toothpick T in pics T dot show so this
115:44 - is now a loop where I'm just gonna say
115:46 - whatever toothpicks I have so I'm
115:48 - starting with 1 toothpick
115:49 - I made a class object-oriented class a
115:52 - template for a toothpick then I made an
115:56 - actual toothpick 0 0 I can't remember
115:58 - it's 1 is either this way or this way
115:59 - and then I'm saying whatever toothpicks
116:02 - I have show them all and so now if I
116:05 - were to run this again we can see
116:07 - there's my toothpick and let's make the
116:10 - length let's let's have length be kind
116:12 - of like a global variable over here and
116:15 - let's have that be something more like
116:16 - 63 let's run this again we can see
116:20 - there's my toothpick and by the way I
116:23 - could do something like this I mean I
116:25 - you know as an exercise I could just
116:27 - make a ton of random
116:28 - - thanks but that's not what I want to
116:30 - do what I want to do is each cycle right
116:34 - I want to say what are all the existing
116:36 - toothpicks check every existing
116:38 - toothpick look at its endpoints or is
116:41 - that a free end point and if there is
116:43 - make a new toothpick there so a nice way
116:46 - to do that in the draw loop is to start
116:50 - by actually saying make another empty
116:53 - ArrayList
116:54 - I'm gonna call it next so this is kind
116:56 - of like the next generation of
116:58 - toothpicks is another new boy's a lot of
117:01 - typing going on here with these array
117:04 - lists I'm gonna make a new list of
117:06 - toothpicks the next list and as I go
117:10 - through all of these existing toothpicks
117:13 - what I want to say is I'm gonna say like
117:19 - I'm gonna you know what I'm gonna do I'm
117:20 - gonna ask the toothpick to create I'm
117:23 - gonna say call create I'm gonna say I'm
117:24 - gonna name these create a create B it's
117:26 - probably a better name for that I'm
117:27 - trying to think but what I mean is let's
117:29 - have the toothpick itself it knows about
117:32 - its edges maybe I need to when I call
117:35 - those functions pass in an array to all
117:38 - of the existing toothpicks like hey
117:42 - check yourself before you wreck yourself
117:45 - know check yourself against all the
117:48 - other toothpicks to see if your edges
117:51 - are touching any of them and if not make
117:58 - a make a new toothpick ah and these
118:01 - should be and then I should say
118:04 - toothpick this should this function
118:06 - should return to new toothpicks I'm
118:10 - going to call them a and B I should
118:13 - probably call them if I'm being
118:14 - consistent here like next a and next B
118:22 - so right and then so okay so what if
118:26 - then then I want to I think I'll do is
118:27 - I'll have this function I'm kind of
118:29 - planning this out as I'm going this
118:30 - might be a bad idea we'll find out I'm
118:32 - gonna have the function if the endpoint
118:35 - is not actually free just return null so
118:38 - it will return a new toothpick if it's a
118:40 - valid endpoint
118:41 - edge if it's not it'll just return null
118:43 - so what I'll say they hear is if next a
118:47 - is not equal to null then next dot add
118:53 - next a and this probably way I could do
118:58 - this with one function or something
118:59 - and if next B is not null add next B and
119:03 - then at the end what do I want to do I
119:06 - want to say I think toothpicks dot add
119:13 - all next so I think this is the ideally
119:16 - I haven't really written the code for
119:18 - doing this yet but this is the idea for
119:20 - every existing toothpick and here's the
119:23 - thing I don't want this would be
119:25 - problematic if I didn't I think there's
119:27 - a couple reasons why I want this next
119:28 - ArrayList and III did sort of think
119:30 - about this in advance like you might be
119:32 - thinking why not just add them to the
119:33 - existing list of pics well one thing is
119:36 - if I add stuff to the end while I'm
119:39 - iterating through it if things could go
119:41 - pretty awry also visually what I want to
119:44 - do I might want to draw the new
119:45 - toothpicks
119:46 - each time like as a different color
119:48 - there might be some separating out what
119:50 - the next generation of toothpicks is
119:51 - from the current generation might
119:52 - actually be somewhat helpful okay so now
119:56 - what I really need to do is write this
119:57 - these create functions so let's say
120:00 - let's first write the create a function
120:04 - so with this function it gets another
120:09 - ArrayList whoo I'll call these others
120:14 - and return null here so the idea of this
120:20 - function is that it's going to compare
120:23 - this toothpick this toothpicks against
120:29 - all the other toothpicks
120:31 - to see if it's if yeah so I saw a
120:37 - message in the chat and I maybe I did
120:39 - another capital P Ulmer is asking do you
120:42 - really need to redraw everything you're
120:43 - just drawing new pick yeah I could just
120:44 - draw the new toothpicks the reason why I
120:47 - want to redraw everything is cuz I'm
120:48 - going to do this
120:48 - thing so sorry I felt like I had to
120:50 - answer that question sorry I'm getting a
120:58 - little bit exhausted here it's so hearty
121:02 - 12:30 whoo all right let me try that
121:04 - again the idea of this function is I
121:08 - want to check this toothpick against any
121:10 - other existing toothpicks to see if
121:12 - they're sitting on the edge and if
121:13 - they're not I'm gonna create a new
121:15 - toothpick on the edge so here's how I'm
121:17 - going to do that I'm gonna say for every
121:21 - tooth pick other in others if and let's
121:32 - try let's so I'm gonna write some
121:41 - pseudocode for a second
121:42 - if this pick is touching other and also
121:51 - I first I want to say actually by the
121:53 - way if other is not equal to this like I
121:59 - only want to check yeah I don't want to
122:01 - check this if this toothpick against
122:04 - itself and I'm gonna say oh this is
122:08 - boolean available so I'm gonna assume
122:14 - the pick the toothpick is available so
122:18 - and then I'm going to look through all
122:19 - of them and if I find that it's edge is
122:22 - touching any other edge then it's not
122:24 - going to be available so how am I going
122:26 - to do that so I let's write a separate
122:29 - function
122:40 - how am I gonna do that let's write a
122:42 - separate function and let's just write a
122:45 - function called something like boolean
122:49 - equal and it takes two points can I go
122:58 - back and have I I need a second
123:02 - my brain is like hurting me I know I
123:05 - shouldn't do these new those are the
123:08 - chat is I probably shouldn't look at the
123:09 - chat cuz because I I've got it I know
123:12 - what I'm doing here it's not you'll see
123:19 - that it's not N squared all right I'm
123:24 - not sure I'm gonna go back to where I
123:25 - was writing this function so alright
123:38 - alright so I'm gonna write a function
123:40 - that returns true or false for two for
123:43 - two two arbitrary points so so what I'm
123:47 - going to do is equivalent or like cut
123:53 - intercept I'm trying to think of what I
124:03 - want to do I'm trying to decide whether
124:05 - I want to do this with like with like
124:07 - two objects and maybe I should put like
124:09 - maybe I should actually have a function
124:11 - in here like intersects another
124:13 - toothpick and then I could say if others
124:15 - not equal this and this and this does
124:20 - not intersect in this intersects other
124:25 - yeah let's do that
124:27 - okay sorry about you I'm making this
124:32 - editing complicated
124:40 - yes and Aaron is saying check only the
124:43 - newly added toothpicks I definitely I'm
124:45 - gonna that's gonna be a really important
124:46 - optimization so I will do that but I've
124:49 - gotten there yet okay
124:56 - so first let me actually I think what
124:59 - would be I think what would be helpful
125:00 - here is in addition to checking to make
125:02 - what I want to say is as long as the
125:04 - other toothpick is not this toothpick
125:06 - and the other toothpick I'm going to say
125:11 - dot like touches this toothpick then
125:16 - available is false so it's not available
125:22 - so this is not an available spot so now
125:26 - I need to write a function that can one
125:28 - tooth can check against the other one
125:29 - and I'm going to write that in here I'm
125:32 - gonna say boolean touches another
125:35 - toothpick and basically like how do I
125:37 - know if I basically want to check to see
125:39 - if two endpoints are the same and
125:41 - because I used integers I'm good
125:43 - actually check for a quality here I want
125:44 - to do like a distance thing so I can
125:46 - actually just say if other dot X ax
125:50 - equals this dot a X and other does a y
125:59 - equals this dot a Y return true I could
126:03 - write this as one statement but I'm just
126:04 - going to do it this way for a second and
126:06 - then let's check the B values OBO
126:10 - there's four possibilities here though
126:12 - oh I'm making this so silly this is one
126:14 - of the silliest functions I've ever
126:16 - written
126:18 - [Music]
126:21 - because there's four possible right
126:25 - because then a could also equal B and be
126:31 - good also equal a and this we should
126:35 - write so ax equals ax a y equals a YB x
126:42 - equals B xB YB b y equals b y a x equals
126:48 - oh boy this is getting really bad let's
127:06 - go over here for a second right I have
127:11 - two points ax I I have a 1 and B 1 Oh
127:21 - this camera is off
127:37 - let's take a minute to actually like
127:39 - really figure out what's going on here
127:41 - right because I have to it with two
127:42 - toothpicks I have a one and I have b1
127:45 - and I have a 2 and I have b2 so I want
127:49 - to make sure so I have 4 points I want
127:51 - to make sure that a 1 and a 2 are not
127:54 - the same that a 1 and B 2 are not the
127:56 - same I want to make sure that B 1 and a
128:00 - 2 are not the same and that B to know
128:03 - that B 1 and B 2 are not the same so yes
128:07 - there are four possibilities here and if
128:11 - any of those are the same and by the way
128:14 - this is this could a could be this one
128:18 - could be this and other could be two
128:22 - right it's not one and two are this in
128:24 - other so what I'm doing is checking to
128:28 - see if other a is equal to this a or if
128:34 - other a is equal to this B or if other B
128:39 - is equal to this a and if other B is
128:44 - equal to this be so insane I'm really
128:56 - doing a horrible job at this return and
128:58 - then if none of those are true we're
129:00 - gonna return though oh I I should be
129:03 - taken to the coding sanatorium right if
129:06 - none of these are true return null why
129:09 - why what what what error could you
129:10 - possibly look at you possibly have to
129:12 - complain about and why is oh I'm zoomed
129:14 - in
129:25 - Matthieu you said a other a is equal to
129:31 - this be other a other a this a other a
129:37 - is equal to this be an end point can
129:41 - also touch a center let's get roll it
129:51 - off now we're turn off boolean yes
129:56 - return false thank you oh yeah no you
130:03 - know what
130:05 - so someone in the chat is suggesting
130:09 - that they can also touch a center and
130:14 - while that's true
130:19 - well that's true I never have to check
130:22 - for that because I'm always placing them
130:25 - at the center and so and so and and so
130:31 - once I whenever I add a new toothpick
130:33 - it's never the new toothpick its
130:36 - endpoints are never going to be touching
130:38 - another toothpick Center and I only need
130:41 - to check the new ones so that's an
130:43 - important important one I should use
130:47 - vectors instead of integers I know I
130:49 - know right I know I know okay oops
131:00 - all right so this error is because I
131:02 - need to return false and I am also
131:04 - getting the question about couldn't a
131:06 - toothpick be touching the center so
131:10 - here's the thing there's also another
131:11 - really important piece of this that I
131:13 - kind of have in my head but I don't
131:14 - think I really like to talk through
131:16 - which is that now I need to check this
131:19 - toothpick or its end points free yes now
131:22 - I don't ever need to check this
131:24 - toothpick again once it's been added I
131:27 - actually don't need to check it again
131:28 - and so the idea of a toothpick touching
131:30 - another toothpick Center is actually
131:32 - irrelevant and I don't think touching or
131:35 - intersecting these are actually gonna be
131:37 - at exactly the same point the way that
131:38 - I've done the math so I know maybe I
131:40 - should say intersecting you're touching
131:41 - but I don't actually have to check this
131:43 - out I don't think we'll find out we'll
131:45 - find out if I have the correct code okay
131:47 - so now here so now if if okay oh you
131:59 - know what oh oh I went I went so off the
132:04 - beaten path the way that I've written
132:09 - this oh oh the way that I've written
132:16 - this I'm gonna go back the way that I
132:24 - have written this I actually I wrote two
132:26 - functions so this is just this is
132:29 - actually irrelevant in this function
132:31 - because I'm checking a separately from
132:35 - checking B so what I want to do oh let
132:41 - me go back
132:48 - I'm gonna do this a different way boy
132:51 - this is gonna be a fun editing project
133:04 - an endpoint with a toothpick yeah I just
133:08 - want to check the endpoint I'm actually
133:11 - not checking to toothpicks I'm checking
133:12 - an endpoint with all the other
133:13 - toothpicks I have other stuff to do
133:22 - today people I think once I get the core
133:24 - idea of this down though it's gonna go
133:26 - really fast all right
133:34 - yes I'm sorry everybody I'm literally
133:37 - doing this again simplifying so I don't
133:46 - want any of this discussion about this
133:50 - and other an a and B and four
133:53 - possibilities
133:56 - whatever whatever
133:58 - all that is irrelevant I'm gonna do this
134:01 - in a different way it's slow mode K week
134:05 - - is slow mode off no but I think it
134:08 - actually might be I thought I'd put it
134:09 - on five seconds do I need to fix slow
134:13 - mode this is great it's good for me to
134:15 - have all these new viewers and have it I
134:25 - don't know what the f is for is this
134:28 - some kind of thing that I don't
134:33 - understand let's see a live control room
134:38 - I don't know how to find the slow mode
134:44 - thing use point objects instead of
134:46 - toothpick objects FFF okay I don't know
134:49 - what the f thing is I will I'm gonna I'm
134:51 - gonna push forward okay okay
135:02 - now because I've written this and kind
135:04 - of what is now arguably a silly quo so
135:07 - to fix wet fly somebody slow-mo that
135:11 - down I hope you could see that do we
135:13 - have smarter every day's like
135:14 - slow-motion camera somewhere available
135:16 - okay if it because I wrote this in a
135:18 - sort of silly way I'm writing a create a
135:20 - and create B function what I actually
135:23 - just want to do here is check the a and
135:26 - point against every other toothpick to
135:28 - see if two toothpicks have the same end
135:31 - point as each other to see if they're
135:34 - intersecting at that same end point and
135:37 - you know somebody did ask about
135:40 - toothpicks
135:41 - put a toothpick right I'm looking for
135:44 - the case where this is toothpick one and
135:45 - this is toothpick two and this is like
135:47 - point a and maybe it's the same as point
135:50 - A or B of another toothpick this is what
135:53 - I'm looking for but it is the case that
135:55 - toothpicks could also be intersecting
135:59 - the center of another toothpick but I'm
136:00 - pretty sure I don't have to check for
136:02 - that because once I add a toothpick if I
136:07 - add two more toothpicks sure this
136:09 - toothpick is intersecting here at the
136:12 - center of these two toothpicks but it
136:14 - done like I never have to check this
136:16 - toothpick again once I have added
136:18 - something that toothpick I can call it
136:20 - quits and only check the endpoints of
136:22 - these new toothpicks and by definition
136:23 - there can't there could only be the way
136:27 - this algorithm works out is you know
136:29 - these two are the two toothpicks here
136:31 - are intersecting at the end point so I'm
136:33 - pretty sure that's how it's going to
136:34 - work if you if you look at the demos of
136:36 - it and how it works I don't think I need
136:37 - to check the center okay at least I'm
136:39 - trying to convince myself so as long as
136:41 - it's not the same toothpick and
136:44 - intersects I'm going to write this
136:45 - rather awkwardly
136:47 - I'm gonna say intersects a X a Y with
136:51 - other with other then available is false
136:58 - and so maybe what I want to do is say
137:02 - like other dot intersects a X a Y so
137:06 - this is actually like o equals false
137:11 - so maybe this is kind of like a function
137:15 - inside inside of the toothpick class
137:21 - that it can check if it's intersecting
137:23 - any generic point so this is a little
137:25 - bit confusing what I'm doing when I
137:26 - write a boolean function that says
137:29 - intersects any arbitrary XY and I can
137:33 - say basically if a x equals x and a y
137:37 - equals y that is the case where I should
137:40 - return true otherwise if a be x equals x
137:47 - I'm just checking both points and again
137:49 - you know easily there's a 5ever way to
137:51 - do this I'm also going to return true
137:56 - otherwise is turn fall so basically this
138:01 - is the idea and these are integers and I
138:04 - can check for equality here because I'm
138:06 - doing all integer math if I had used P
138:08 - vectors and floating points I'd be
138:09 - worried about then I have to use the
138:11 - distance or something but as long as the
138:15 - a point and the B point of this
138:17 - toothpick is not equal to this X
138:19 - arbitrary X&Y point that I want to
138:21 - return false so now here comes the fun
138:25 - part this fun emoji if it's still
138:34 - available then what I want to do is
138:36 - return a new toothpick and the new
138:43 - toothpick Center the new toothpick
138:46 - Center is where it's at that point so
138:49 - the new toothpick is at a X a Y and it's
138:51 - Direction is what its direction as
138:54 - always the inverse so if this one's one
138:56 - this one's negative one if this one's
138:58 - negative one this one's one so it's just
139:00 - Direction times negative one otherwise
139:06 - otherwise return null ok so now we're
139:11 - going to go back here let's forget about
139:13 - next B let's forget about create B I
139:17 - also want to do something I'm gonna say
139:19 - no loop I want to control
139:23 - looping and then I'm gonna add
139:25 - mousepressed and in mousepressed I'm
139:28 - gonna call redraw this is so I can click
139:31 - the mouse through every frame so let's
139:33 - see if this works let's see if I can
139:35 - kind of condense the code a little bit
139:37 - so we can look at more of it at once
139:39 - and now if other does not equal this and
139:43 - other into I'm missing a parenthesis
139:45 - there let's go back here let's run this
139:51 - okay so now if I click I got a new
139:57 - toothpick I got a new toothpick new
140:00 - toothpick new toothpick so this is
140:01 - actually working but it's just doing
140:04 - that one endpoint so again I really
140:09 - should there's no reason for me to have
140:10 - two separate functions here but why not
140:16 - what I'm going to do now is in the
140:20 - toothpick I'm kind of just this is
140:23 - Terrell I do not like this at all do you
140:26 - not like copy pasting I'm gonna just
140:29 - call this create B I'm gonna say B X B Y
140:32 - and B X B Y so this is exactly the same
140:36 - function but checking the B endpoint and
140:39 - I could do this because a toothpick only
140:41 - has two endpoints but this doesn't scale
140:44 - this you can't generalize this to any
140:46 - kind of shape with any end number of
140:48 - endpoints so definitely gonna have to
140:50 - rethink this for maybe a future video I
140:52 - might make what look at that that kind
140:56 - of looks like the toothpick pattern
140:59 - so in some sense we're done but a couple
141:04 - things I want to do number one is I
141:05 - would like to I need to I there's a big
141:08 - optimization I can make here which is to
141:11 - only check the new toothpicks so one
141:14 - thing that I'm going to do is let's make
141:17 - these two different loops just two let's
141:22 - separate out the drawing from the like
141:24 - picking the next stuff the other thing I
141:26 - should do is when a toothpick is a new
141:32 - toothpick so let's call it a
141:36 - new new pic oh that's weird is true so
141:44 - and then the what I want to do here is
141:49 - when I draw it let's try it let's just
141:52 - try this for a second if it's a new pic
141:55 - say stroke let's make it blue and then
142:00 - by definition then new pic would be
142:04 - false so I just want to and actually let
142:07 - me not do that here so this should be
142:09 - now they're all blue okay so they're all
142:12 - blue when I knew all the new toothpicks
142:15 - are blue and then what I want to do here
142:17 - is I would say if T is a new pic like
142:21 - again I could probably keep it in a
142:22 - separate list but whatever if T is if T
142:26 - is a new pic and then then I could do
142:29 - all this checking and then say it's not
142:32 - a new pic anymore all right so this is
142:36 - this is going to limit all of the
142:39 - checking to only the toothpicks that
142:42 - were actually new the previous time and
142:44 - I could keep the next ArrayList from one
142:46 - cycle to the other but this I think will
142:48 - do the trick right now blue you can see
142:51 - this one is no longer blue only these
142:53 - are blue only these are blue so in
142:55 - theory I have now optimized this a bit
142:57 - faster okay
142:58 - so now going back to the code I can to
143:03 - get rid of this no loop I can let it
143:06 - just go on its own and we can see it's
143:09 - sort of filled up the screen really
143:11 - quickly so this is what I want to do
143:13 - here I want to use the scale function to
143:18 - as it grows sort of zoom out on the
143:21 - drawing so scale is a transformation
143:23 - that can scale what I'm seeing so for
143:25 - example if in the draw loop here I just
143:29 - say scale 0.5 you can see there it is at
143:33 - half the size if I say scale 0.1 we can
143:38 - see now we can see all those toothpicks
143:39 - and being added at a much lower scale
143:44 - okay okay so how do I have that dynamic
143:47 - so the way to have that dynamic is
143:50 - one way would be let's try to figure out
143:53 - maybe what the what toothpick is
143:56 - furthest to the left edge and furthest
143:58 - to the right edge so what if I have some
144:00 - global variables like min X which is
144:04 - equal to zero and and Max X which is
144:11 - equal to width
144:12 - oh and actually these should be negative
144:14 - so I because I'm because I am
144:17 - considering this around zero min X would
144:20 - be negative with / - max X would be
144:25 - positive with / - so negative 300 that's
144:29 - the sort of a minimum and maximum range
144:31 - to start so I could say of the
144:36 - difference is this the scale the scale
144:44 - that I want let's call that like by a
144:47 - factor is the maximum X minus the
144:51 - minimum X divided by the width right or
144:56 - actually width divided by that right
144:59 - because if the distance between the the
145:04 - furthest toothpick to one side and the
145:05 - furthest 2bic to the other side is twice
145:07 - as long as the actual width of the
145:09 - window then I want to scale it to 0.5 so
145:12 - but of course I need to find out these
145:15 - maximum and minimums so the way I can do
145:17 - that is I can actually just right here
145:19 - since I'm looping through all the pics
145:20 - and you know in theory like I'm going to
145:24 - get the scale for the next round but
145:26 - that's fine min X is the minimum
145:28 - whichever is smaller between the current
145:31 - pixs let's just use one end point I mean
145:34 - I could probably check both end points
145:36 - but let's just make sure this works and
145:38 - the current min value and the maximum is
145:41 - whatever is the biggest between B X
145:45 - sorry sorry ax and Max X right I think
145:50 - this should work factor is what did I
145:56 - get did I get like a the value of the
145:59 - local variable factor is not used well
146:02 - sure
146:03 - Oh scale factor true but that's not the
146:06 - era I'm getting but / 0 min max X minus
146:16 - min X Oh
146:20 - whichever one's bigger oh no no no no no
146:24 - no this has to be max X like right hand
146:28 - that run for a while there okay yep oh
146:37 - you know what are these these are all
146:41 - integers ah these are all integers so
146:44 - integer math is gonna give me zero there
146:46 - we go okay so now I am scaling inter and
146:50 - according to and you know as you dude
146:52 - these are getting I'm scaling according
146:56 - to the distance between the sort of like
146:58 - furthest toothpick and the furthest
147:00 - toothpick along the x-axis I could do
147:02 - this along the y-axis there's probably a
147:04 - lot of smarter ways to do this but this
147:06 - will work right now so the other thing
147:08 - that I might like to do is calculate
147:11 - this factor you should probably store
147:14 - this as a global variable also because I
147:16 - kind of want to use it and you know what
147:19 - I could actually do I could just do this
147:20 - I could I could pass it in here because
147:23 - what I want is also the stroke weight to
147:26 - be maybe inversely proportional to the
147:29 - factor so like as the factor is getting
147:32 - smaller I want the lines to be thicker
147:34 - so that maybe they show up better yeah I
147:39 - don't know if this is really reading but
147:41 - like as they're shrinking the lines are
147:43 - getting thicker goodbye YouTube
147:47 - compression algorithm but you can see
147:49 - the idea here so this is gonna run
147:51 - really slow
147:52 - I have not super optimized this but what
147:55 - would be fun to try is and maybe I
148:00 - should just make them a little bit
148:02 - thicker like two times that what would
148:06 - be fun to try what I would like to do is
148:10 - to see if I can make a nice full screen
148:12 - version of this
148:17 - in p.2d will that help so here we go
148:26 - here is the tooth I'm sure the YouTube
148:29 - compression algorithm is making this
148:30 - impossible to watch but here is the
148:33 - tooth pick number series from the
148:38 - numberphile channel visualized using
148:40 - Java in processing now it's running
148:43 - super slow I kind of what I want to do
148:45 - but I should check the number series
148:48 - so let's actually check that number
148:50 - series let's do print one more time
148:53 - print line what do I want to do I want
148:57 - to check how many toothpicks there are
149:02 - pix dot size and let's change the frame
149:06 - rate to 1 and let's open up the console
149:12 - let's put it back to a smaller size and
149:17 - let's open up the console so I can see
149:19 - this better all right so here we go 1 3
149:25 - 7 11 15 23 35 43 47 55 6779
149:33 - 195 120 is this right I really hope this
149:36 - is right let's check I hit stop what
149:40 - stay yes okay let's go back to that
149:43 - number sequence site cross-check this I
149:52 - didn't use 0 1 3 7 11 15 23 35 43 47 55
150:00 - 67 thank you so by the way you should
150:09 - watch that numberphile video you should
150:12 - look at these you should try there are
150:13 - so many other ones and there's different
150:16 - shapes toothpick on a hexagon whoa a
150:20 - reset reset reset look at this oh no
150:23 - wait wait hold on reset reset toothpick
150:26 - on a hexagon oh boy whew so there's so
150:31 - many interesting possibilities here of
150:33 - things you could try let's look at
150:35 - there's one that's like a nice
150:38 - maybe it's the e toothpick that's kind
150:40 - of like snowflake like yeah look at this
150:42 - one oh that's so I really wanted so
150:44 - maybe next week for my holiday special
150:46 - I'll try to do this one but you should
150:48 - explore all these Washington of her file
150:50 - video expand this refactor the code make
150:52 - your own version I will release a
150:54 - version of this that also runs in
150:55 - JavaScript that you can do that to run
150:57 - in the web browser so you can check this
150:59 - video's description and share with me
151:00 - your variations in color and animation
151:03 - and how you think about doing this I
151:05 - can't wait to see what creative stuff
151:06 - you make ok good bye ok this has been a
151:16 - 2 and a half hour live stream it's 1
151:18 - o'clock and I'm looking at my email
151:29 - which I should not be doing time to
151:33 - unbox use a map Elmer is saying use a
151:39 - map data structure where the key is the
151:43 - endpoints and the value is the number of
151:45 - toothpicks touching it Oh interesting
151:49 - that's a great idea
151:50 - don't forget to scale against height
151:53 - yeah you know Iran is saying you're
152:01 - still checking every newly toothpick
152:03 - against all of them I am but I don't
152:06 - know if I that I don't know what's an
152:08 - optimization around that like which ones
152:13 - can I skip
152:17 - I am I just checking like the last round
152:19 - Oh am I only checking in the new ones
152:20 - against the also the new ones no hold on
152:27 - let's look at this oops right so the
152:45 - next toothpicks clearly I mean they're
152:48 - intersecting against this toothpicks
152:51 - from their current round same here
152:58 - but these toothpicks hit the end point
153:01 - of this toothpick which is from a
153:05 - previous round so I think I do have to
153:09 - check I think I have to check I can't
153:13 - just check the new toothpicks against
153:15 - other new toothpicks yeah so I'm not
153:21 - sure thank you graven developed mole
153:24 - this dot channel dot donate that's cute
153:27 - I love that why is this really showing
153:32 - up time to unbox that uke yeah I did say
153:39 - I was gonna do that I definitely can't
153:41 - do any coding I am done coding I am
153:46 - actually recording this to disk amazing
153:49 - and you just just so I make sure it
153:52 - captures for once I remembered color the
153:56 - toothpicks based on their XY mapping
153:58 - between 0 and 360 for hue that way you
154:00 - get a rainbow you should do that swirl
154:02 - studios and then submit it alright
154:09 - you asked for it you're getting it
154:16 - overhead camera not not a sponsor buzz
154:27 - marketing this ukulele company so the
154:48 - previous ukulele was a very inexpensive
154:51 - ukulele that was less than $30 this is a
154:55 - bit more is not a super expensive one
154:56 - but it's a should be a bit nicer with
154:58 - nicer strings it's also concert size
155:00 - it's a little bit bigger
155:02 - instead of soprano which so I can play
155:07 - some holiday coding songs on it next
155:10 - week and it comes with some accessories
155:19 - like a tuner right definitely gonna need
155:22 - right now a strap ooh there's actually a
155:27 - strap how interesting I wanted to find a
155:32 - rainbow ukulele but all of the ukuleles
155:34 - that had crazy weird patterns on them
155:36 - seem to not be of high quality if I put
155:40 - a sticker on this ukulele is that going
155:42 - to cause a problem and then this in
155:45 - theory is the strap do I unscrew this
155:50 - and so mechanically challenged how do I
155:54 - attach this to that maybe I don't need
155:56 - to worry about the strap right now but
155:59 - there are these two right the strap goes
156:00 - on these things okay so that's the strap
156:10 - else do I have some sort of oh my god
156:15 - pick case and a pic never used a pic
156:20 - with a ukulele oh by the way I am NOT a
156:22 - musician and I have extra strings
156:28 - please read other side before contacting
156:31 - or returning the ukulele please do not
156:35 - return it to the retailer okay alright
156:38 - there's some nice information this is a
156:40 - tuner a ceg right do I need a bat I'm
156:50 - ight need a battery for this shoot you
156:54 - may need to flip the battery around okay
156:57 - oh there's a battery in here there's two
157:03 - batteries wow you really thought of
157:05 - everything except for the fact that I am
157:10 - completely mechanically challenged push
157:14 - the metal through the strap hole and it
157:16 - should stay so which way does this go
157:21 - one side is the positive side this is
157:24 - the positive side positive side goes
157:28 - goes which way negative side does it say
157:31 - here well we'll just try it one way
157:34 - let's try it this way this is my best
157:36 - guess very little chance this is right
157:39 - you know what yeah this has got to be
157:43 - this way right it's kind of click on in
157:45 - there there we go okay maybe that's not
157:56 - right well good thing I have all these
157:58 - toothpicks ah must be the other way yep
158:08 - now the tuner is on and
158:18 - [Music]
158:34 - this should this one see ace
158:44 - this should be gee I still want to do
158:50 - that coding challenge
158:52 - [Music]
159:09 - really
159:23 - right a yes sorry everybody
160:07 - [Music]
160:10 - should I say for you so many of the
160:12 - chats on the AE a AE see I have a sexy
160:47 - [Music]
161:23 - sorry attitude alright so this is ready
161:45 - for a me gotta tune it bunch of Dimes
161:48 - hopefully it will hold its to fairly
161:51 - recently but this will be ready for next
161:53 - week so send me your I've got twenty one
161:58 - I should get rid of this here
162:06 - 21:21
162:07 - Christmas songs I suppose I could try to
162:09 - learn some Hanukkah songs or some other
162:11 - holiday songs for other holidays around
162:13 - this time of year some of them are easy
162:15 - they're like two chords like jingle
162:17 - jingle bells probably three chords right
162:19 - well let's go to it let's find that any
162:25 - song that I have in this book you can
162:27 - send me new lyrics
162:28 - [Music]
162:42 - [Applause]
162:49 - [Music]
162:58 - so uh-huh right so now it's pretty easy
163:02 - gingka files so in order to solicit your
163:04 - donations I will be making a fool of
163:06 - myself and embarrassing myself next
163:09 - Thursday
163:09 - playing coding holiday theme mute coding
163:13 - themed holiday music on this ukulele
163:16 - while on a live internet stream so thank
163:22 - you all for tuning in thank you for
163:26 - watching the coding train this has been
163:30 - a lot of fun I don't know I feel like
163:32 - the Fortier thing worked out pretty well
163:34 - but I feel like the Fourier thing worked
163:39 - out pretty well but it was kind of long
163:42 - - big thing was kind of a mess I don't
163:47 - know unknown gamer asks is it hard to
163:52 - learn ukulele in comparison to guitar
163:53 - easier I would guess easier because I
163:56 - never like I started trying to teach
164:00 - myself that ukulele like three months
164:02 - ago something like that somebody find
164:04 - when I first did it in a you know
164:06 - annakodi trade so I have I can play the
164:10 - piano a little bit well
164:12 - [Music]
164:48 - all right okay
164:51 - uh I'm exhausted I'm gonna go have some
164:56 - lunch answer all my emails thank you
164:58 - everybody for tuning in welcome new
165:00 - viewers if the today was the first time
165:02 - you watched Thank You of today was like
165:06 - the hundredth time you've watched thank
165:08 - you you can I would love to hear any
165:11 - feedback you can let me know on Twitter
165:18 - [Music]
165:20 - I'm gonna clean up all these to fix
165:23 - later oh my god
165:26 - and I will see you all ah in a future
165:29 - coding Train episode uh so also if you
165:33 - don't know I will make edited versions
165:35 - of these two coding challenges they'll
165:36 - come out sometime next week I have to
165:38 - fix my shirt now and I will uh well
165:42 - thank you for watching this has been
165:43 - wonderful I've really enjoyed being with
165:45 - you today and I am going to click the
165:48 - stop streaming button oh no it's over
165:50 - here someday I'll have an outro coming
165:55 - soon someday and here we go I know so
166:01 - sorry you just joined you as soon as I
166:03 - stop this you'll be able to watch the
166:04 - whole thing back if you feel so inclined

Cleaned transcript:

hello good morning afternoon whatever time it might be it's morning for me hi it's Friday something exciting to show you really quickly but well oh wait it's all assumed in anyway how are you I is my mic on my mic is on music is playing I am so excited for today's livestream because I'm going I have out a plan I've thought about it I'm not exactly prepared but I spent I spent some time on the subway doing some reading and watching some videos to think about what it is I'm going to do today and the first thing that I'm going to do has to do with this box of toothpicks could there possibly be what could possibly on the coding train related to a box of toothpicks you might be asking well soon I will tell you first let me do some housekeeping here and talk to you about what's happening for the rest of the year on this YouTube channel that you are watching so there are only two more live streams in 2018 both of which are happening next week and then I will be off for quite a while until January so I believe here whoops if I go to website youtube.com slash the coding train I will see first that I am streaming live and then I want to show you these two things so two things are set for next week on Monday at about 3 p.m. Eastern Time I will be coming to you live from not this room but from about five floors down on the fourth floor is the program called ITP that's the graduate program the undergraduate program is called ima these are both programs at Tisch School of the Arts at New York University the end of the semester show is coming over a hundred projects made by an incredible set of talented students from all over the world so I'm going to walk around with a my phone and somebody to help me an interview students and show projects so you can tune in for that if you miss it don't worry it will all be archived and I also will produce probably the whole live stream we'll probably be out two hours but typically after that's done I produce about a 20 minute kind of like edited compilation highlight reel of a bunch of the projects by the way if you have any experience livestreaming that might that and you might have some tips for me I'm looking into currently getting I have a gimbal I have a person who's gonna help me hold the camera I have a variety of different microphones that I'm looking at using but I'm looking at getting one of those kits for a mic that goes with the camera and a handheld thing and all that sort of stuff so if anybody has any experience or some things you want to suggest that I get that I could get between now and Monday let me know then coming to you next Thursday at about 1030 a.m. in the morning I will be doing my annual processing foundation holiday telethon biannual I mean a second annual but did it last year sort of spurofthemoment last year I'm a little bit more planned this year although I don't actually have any topics in mind but I am looking for you to suggest stuff so let's let's move over here for a second if I go to and I want to come back to this in a second but if I go to one I don't want to import my bookmarks go away whatever if I go to github.com slash website slash rainbow topics I think I need to rename this repo not know oh no coding train coding train slash rainbow topics um this is a repository where I kind of keep a list of things of suggestions of things that I might do in a video or on a live stream and currently there are 800 77 open things look at this suggested four days ago tooth pick patterns toothpick toothpick toothpicks nice not a sponsor so I'm gonna do the toothpick challenge today but I'm thinking what I would like to do is add a label I'll go to labels I'm gonna create a new label I'm gonna call it holiday telethon probably be should be some reddish I like that green I can't hold on we'll get there eventually yeah that's not really very ah that's that's good so that's very dark but holiday telethon label I will so I'm looking for holiday themed coding challenge ideas for example one that I will most likely do next week is the Koch snowflake which looks like any of these patterns whoa I've never seen it done like this so we're gonna have to figure that out so this is something like things that are wintery holiday themed that's my plan for next week hey startup guy thank you for the super chat from India t other thing I'm trying to get working but I don't believe that I'm gonna get it unlocked unfortunately there is a YouTube as a feature called super chat for good which is a way of sending super chat donations directly to a nonprofit 501c3 organization of which the processing foundation is one so I've been in contact with YouTube to see if I can get that enabled for my account for next Thursday but it's I don't know if that's going to be possible so just to be aware I'll be asking people if your if you have if you are able to make your donation through processing foundation.org slash support but anyway that'll be next Thursday and builds eat emoji and the chat asks you really came up with this video after smarter every day yes so I mean so I was had the honor was lucky to get to actually meet Destin at thinker con which was a conference that he organized a little while back in Huntsville Alabama and I've been obsessively tuned into his channel ever since and the Fourier series video I mean I also want to show and reference the three blue one Brown series on Fourier series which is also excellent and as something that I had tuned into quite a while ago and rewatched so I want to get started with that Simon tiger is taking I'm pronouncing Koch wrong I know I know I'm pronouncing it wrong but sometimes in life we just have to pronounce things wrong to get through the day okay now oh and smarter every day just said hello in the chat what up fourier peeps okay so this is what I'm looking for for next week your holidaythemed coding ideas I have purchased a new ukelele I purchased a new ukulele which if you can stomach your way through about an hour from now if you're still actually watching or two hours from now I might actually unbox I hear unboxing is like a thing I you know I'm of a mind I'm just gonna like forget this coding thing or just make unboxing ukulele videos but we'll see I'm gonna open up my new ukulele and try it out because I will be singing very badly next Thursday a coding themed holidays it's really a terrible idea but and as you donate to the wonderful nonprofit the processing foundation so I'm also looking in addition to suggestions for holiday themed coding challenges I am looking for your lyric lyric submissions of holiday music with coding lyrics and I had a bunch of them from last year thank you to me IMC and to me who wrote a whole bunch of those alright so that's what I have to say now one thing I want to do is I want to briefly before I get started with the first coding challenge I want to show some of the projects that the community has made so I'm gonna go to the coding train here the most recent coding challenge I did was this flocking simulation oh oh and I was recently speaking with Nicki case who is one of my absolute favorite internet artists ever if you do not know the work of Nicki case you should their work out but explore Nikki case reminded me explorable x' website i hope this is gonna come up yep here we go explorable explanations look at that does anybody recognize that that those are boys right there on the explorable explanations website so if you want to know how to code these this boy's algorithm you can go right here and watch the flocking simulation one now I'm gonna go to this page here and we have a couple look we have a bunch of submissions from the community so as you know as you might not know but if you watch where my coding challenges does that make your own version of it you can submit it over here um so I want to click through these there was also one that isn't submitted here but came through the comments I'll have to dig it up and find it somebody made a flocking simulation in unity which kind of like blew my mind so let's before I get started with the coding challenge let's take a look at a few of these so I'm gonna go here on this one I love and I'm gonna go to the full view of it what this one is here is the tasteful toasty love these internet names took my flock encoding challenge and combined it with my quadtree coding challenge this definitely gets a like a person in their 40s who has a train whistle on the Internet okay but so what this combination is one of the things you might notice if I go to just my actual coding challenge let's let's actually oh shoot see it live no view code web header that's what I want to do so I'm gonna run this be really nice of you I appreciate that okay so what I want to show here is see how there are two hundred Boyd's flocking right now if I increase this to even just like five hundred look how slow that's running this is because every single Boyd has to check every other Boyd in relation to where it is if you watch the coding challenge that's what I went through how do these Boyd's move to their neighbors this is incredibly slow if you could do the math 500 checkpoints each one checking every other 500 is 500 times 500 which is I could get the answer to on a calculator or in my head but it's too stressful when you're live streaming so and if I made this a thousand look at that it can barely go now this is not a limit of a computer to draw right if I do if I comment out this line look at this if the computer is no problem drawing a thousand circles quadratic complexity thank you I always say exponential which is absolutely wrong it is quadratic thank you and so here now if I go back to this this what this is doing is it's using a quadtree algorithm what is a quadtree it's a way of sectioning a computer graphics window or any twodimensional space you can have an octree in threedimensional space into various buckets and all the voids register themselves in particular buckets and then when it's time to look at the neighbors it doesn't have to look at everyone it can look at just the ones that are within its bucket and this is called quadtree optimization it sounds very fancy but it's not that you it's it's a thing you can do you can actually do squat it's called quadtree because you can actually keep subdividing subdividing based on how many boys are in any particular area but you could also just do what's called spacial subdivision like we could just divide the screen into equal parts and that would also be work well for flocking now I should let me go back to the code and I change this look that's already 500 let's change this to a thousand you can see like okay it's not running super fast that's because there's still a lot of stuff for it to do and this is javascript in the browser but this is a reasonable animation with a thousand which is really wild and there's probably a lot of like further optimizations you could do like there's tons of stuff in my code where I'm doing all these extra square root calculations and that type of thing okay so I am going to sorry I'm distracted by multiple chats going on I'm going just takes us back to 500 which is a nice number for us to see look how fluid and passive great so thank you tasteful toasty for doing this so I'm gonna leave now I'm gonna go back to where was I here to find the other ones the internet is a hard thing oh there we go let's look at colorful regular polygons flocking by Juan Carlos and let's click on that this I love to see so a couple things about this I love one is that a nice new interface that's a little that's quite a bit more nicely designed with actual labels to play with the different rules and then you know a lovely design take on this instead of just using circles to use different polygons with different colors wonderful work let's move on to three 3d does this involve quaternions 3d Boyd's with quadtree and then let's look at this one let's actually once again I want to go one of the things I think would be nice to add to this web editor is a button that immediately gets me to the fullscreen view but I can just type it into the address bar so this is really cool to see so this is actually now I wonder is this using the WebGL renderer of p5 amazing if it is and you can see this is happening in 3d we can decrease the number of Boyd's increase them change their perception bump up the separation so many fun things I encourage you to play around with this on your own then we've got evolution aquarium oh oh oh I saw this I think someone said to be on Twitter or like post it in a comment I don't underst but this this is the kind of this is like my dream project if you ever have seen the nature of code book they sort of like working exercise through that whole book is to make your own ecosystem with a lot of different agents that are have different rules and are evolving different behaviors and this looks like it is a manifestation of that a smarter every day is still in the chat says oh dang I was hoping for 3d the 3d is coming I'm gonna find that unity one which is really wild so what I love about this is each one of these creatures I know I don't I haven't looked at the code I don't know what's going on here I actually think it would be but in this kind of case I would love for the creator of this maybe to consider a write up about how all this is working but there are predators there are voyeurs there are food there's food there's poison and those creatures and you can see that everything is that the I imagine this is also built on top in addition to the flocking behaviors using my genetic algorithm evolutionary series to evolve different behaviors what I love about this is I can click on show names all have names like sweet or Daisy I just love that like where do these names come from maybe they could use some kind of like text generative generation neural networks thing to like generate names for all these creatures and then I can do things like add a predator I think that's spelled incorrectly Allah I'll pull requests that a pull request that predator so I think if I click now oh so the red are the Predators so I could get distracted with plane we fish the whole day I think I want to feed them ok so I mean I could feed them look Oh these kind of projects can be so excited so I would I really want to like play around with this and explore the code and kind of understand what it's doing but I'm going to set that aside so I was planning on starting with the toothpicks that was gonna be my warmup because I have to admit hi I checked out this book from the current library which is the like math computer science library here at NYU called Fourier analysis so excited I was like I'm gonna go get a math book I forgot I left it downstairs I want to have it here as a prop I'm gonna read it on the sub and then I started looking at us like oh my whoa oh dear this is this is a little bit beyond but so I have two things I want to do one is the Fourier series and one is the toothpick challenge I don't know I don't know I don't know I was planning to do the toothpick challenge first but now I'm thinking maybe I should start with the Fourier series I could always just go oh the unity thing that's one more 3d so I'm gonna find this video and yes sure you can show me notifications I am going to find the unity can I find a comment where is it somebody commented and linked to their unity version maybe somebody watching can find this more quickly than me unity seriously I just thought okay I could find this hold on is it not maybe it was aunt wasn't on this video let me find it on this computer I have to decide shoot here let me play some awkward waiting music alright let me try it if anybody in the chat can find yeah I was trying command F but you can find this comment recent comment I'm gonna go into my YouTube studio over here it was the URL was an itch dot IO I'm gonna go to community I have a second computer here if you're wondering what's going on and I'm gonna go on earth ah here it is I found it I found it oh okay box rock ox Rock Bukit io / okay here we go here is someone ox Rock 2k1 on YouTube rights I created a 3d implementation with Blue Jays I love birds I love birds I'm like a I wanna be birder I have one of those life books you know the life book is where you write down every single bird you've ever seen I travel I know I've talked about this I traveled to Norway to rune de bird Island to see the puffins which I didn't see but I had an amazing time there well I won't rehash that story of going to Norway but allow you to adjust relevant values in real time you can play it here link I also posted the scripts on github for any who are interested I will bring out its github.com / øx rock / Boyd's but let's run this and see I do not know how to program in unity it's something I have always wanted to explore but I love like I love the fact that there's this actual like bird flapping 3d model animation I don't know how well this is reading you know one thing I would love everybody who watches my videos to always be conscientious of is contrast ratio this is a really important thing to consider when you're making content on the web Forex accessibility people with low vision can honestly read text that it's not high contrast and there are certain web accessibility standards that would be good to follow so anyway I'm not sure if you can see this but you can see there's bird count separation distance cohesion elijan alignment momentum and settings so so anyway I would look I would play around with this who can add a lot more birds but I encourage you to check this out on your own it is really interesting to see this play out in 3d Daniel asks in the chat is unity only first csharp so it's unity only for csharp you both I think csharp is the programming language of unity you can also program apparently in JavaScript in unity but I don't think does wonderful so thank you for this to ox rock this was really exciting to see it kind of makes me think about wanting to try a little unity and also I still want to put this out there anybody who wants to try no one tried this I don't think I'm gonna go here view rule a flake yes so I mention this that in the book the computational beauty of nature which is a MIT press by Gary flake Gary flake describes a fourth rule for flocking view move laterally away from any boyd that blocks the view and the theory here is that if the Boyd's in addition to the alignment separation cohesion rules are also trying to keep their view clear they might actually end up in the kind of pattern you typically see of birds in the sky that V pattern that pattern emerges without a leader through the local interactions between those birds okay so let's go to I let's go to Schiffman dotnet randomizer no it's not that Schiffman dot github I oh let's put in a toothpick for ei well let's submit these let's spin the wheel okay everyone speaking of accessibility I really need to work on this a spinner like it's very like holiday themed today okay here we go which one will I do oh it's gonna it's gonna stop before it gets all the way through this I'm pretty sure I really have to do the Fourier series first I really want to do the toothpick series I even even rigged up an overhead camera which is no longer on oh wait my overlook there you go have you been rigged up an overhead camera whoa that made me a little bit dizzy actually to be perfectly honest um all right I guess we're guess we're starting with Fourier series all right so I need to get myself set up a little bit and so first let's pull up a bunch of links smart every day this video let's pull up actually let's go to dokas blog which is in turkish but there's actually yoga has a post which was translated into english how am I gonna find this Twitter I think so what I'm doing right now just so you know is trying to find all the resources that I use to make sure I credit things properly a building misses a little Baba okay hold on I just wanna there we go I'm pretty sure that's the Twitter handle and then yep and then somewhere in here is a post translated English so great we're gonna do this we're gonna come down here to look at this okay then we are going to also go to a three blue one brown 4ei this this video is really remarkable if you have not watched but what is offered that this is still on move the overhead I'm so sorry I didn't realized that was there if you have not watched this but what is the Fourier transform so when I make an edited when I make an edited version of this as of like a short coding challenge video I will probably reference to watch this and the smarter everyday video first because I'm essentially like the way that my channel works if you haven't watched it before um is that I try to do that sort of like last step implementation sometimes I know exactly how the math works and I can explain that sometimes I'm relying on somebody else's derivation or proof of a formula and I'm just figuring out how to make it work but I want to show the entire process from start to finish of creating this visualization even if we don't understand every interim step we can understand every line of code so that's what but this could not because is really a remarkable explanation of the Fourier transform there's also actually a really nice better explained better explained a Fourier I was looking at this also is excellent an interactive guide to the Fourier transform and so now I think I can close out all these other things and then I'm gonna do this I'm gonna do this in the p5 web editor I think this can work in this I think is I mean there's nothing simple about what I'm gonna do it's very hard I had a really hard time thinking about this and trying this out this week but I think it's a small issue amount of code what is the password oh no it's just coding train that's why it's a smallish amount of code that I think I can do it in this editor so that there's an online version that you can find oh and then of course we would not be able to live without Wikipedia no Fourier series I want Fourier series yep here we go alright and so one of the things that I love but okay here we go oops did I lose the better explained I've got this I've got the Wikipedia I've got the blogpost I've got the three blue on Browns video let's let's get this somewhere as I reference it there's a like a mindblowing part of this to me and there's so many mindblowing parts to this video I've watched this video probably like over 10 times so but and also we can move this to like just like this would be good like look at this the mechanical see this is I wish I could do stuff like this build mechanical things someday we can dream okay so this I've got the code thing here I'm gonna put that here Oh better except I lost the better explained I don't know why one of the things I love about this page is talking up is this smoothie to recipe so I was trying to come up with my own metaphor to explain what a Fourier transform can do and then I read though that's really good hello maybe I should use it I should come up with my own but I'm gonna use this and credit it okay alright so how's everybody doing everybody ready for this let's get the whiteboard going whoops next time I livestream maybe I might remember to actually erase the whiteboard before I use it this by the way is a book of Christmas songs for the ukulele that I just got delivered to me yesterday from Amazon I also have this keyboard but that's what I used last year but oh and there's the eraser wonderful okay so this was my diagram of the flocking stuff let me erase that I have so many good toothpick stick ideas you know dropping them all on the floor there were gonna be lots I all these plans and the Fourier series is gonna it's really good it's good it's gonna make my head hurt race race race race race let's make sure I have a working marker hello I'm over here and for a for a let's write this Fourier babababa I'm very no I'm not gonna write transfer my just gonna I miss a Fourier series all these aren't related interrelated terms and that definitely get some like hearts and like a little rainbow for Fourier maybe like some stars there we go okay how we doing all right can you tell that I'm procrastinating that I've liked terrified and don't want to try this all right uh here we go okay toothpicks just just think of the possibilities hmm I will have to first read some random numbers let's see here she's gonna help me relax before I get started with the Fourier series I will be reading from a million random digits with 100,000 normal DBS if you were waiting for me to actually do some coding I'm so sorry page 165 4289 twentyfive thousand one hundred and eighty two eighty nine thousand one hundred seventy six eighty eight thousand one hundred and eighty five fifty two thousand three hundred and sixty one seven hundred and eightyfive seven thousand six hundred and twenty six five thousand four hundred seventy nine ninety one thousand one hundred okay ceci gauche writes in the chat I'm French and you don't pronounce for you correctly okay sorry if you I would I'm totally game for a lesson on pronouncing Frawley a correctly in French alright let's get started actually doing some coding so let's call this okay all right here we go house this font size can people see this font size okay I think this is going to be a fine size for the canvas wait why what's going on it's weird there we go okay something weird happened for a second oh whoops let me do this I think it's actually better for me to just increase the font size this way my computer is really acting up and then have a larger canvas to work with and then give myself a little more space okay Fuli eh is that is that better what is going on on this computer I let me just mmm this makes me nervous hold on just make sure things are working yep all right we're fine I'm having a little panic attack okay ah what did you not just see that change just the command s and it changed what is going on all right I gotta just we're gonna code doesn't a second but I'm having a little bit of a panic here let me close this I have a feeling that this paint not this page but this page is running a lot of realtime JavaScript T stuff and so I wonder if that is causing problems yeah the editor I wonder if I need to like move away from the editor some weird stuff is happening okay all right something weird is going on but let me just just bear with me for one more second okay all right it's not getting the last thing I say you know something got fixed so I'm gonna not use the web editor right now because I'm just going to actually use a a Visual Studio code I think this is my time sorry to like go offtopic yet again I'm really proud I really will be starting this in a second but I'm just going to point this out I have a feeling that recent there's issue 675 yes I have issue numbers memorized this is a bug in the web editor that the leaf site dialog shows even after you save your work and this was just fixed within the last 18 hours and I think there's like something maybe it's something that this fixed like broke something else so so I am going to what I'm gonna do is this will take me just another couple minutes so apologies I could also just do this in processing but I think I want to do this in JavaScript for a couple of reasons so what I'm gonna do is better so if you're wondering what I'm doing you can check out all my workflow videos which show how I work and create these projects so we're gonna use okay now I'm ready sorry for that little pause thing but now we are ready this is actually a nice oh you know what I'm going to start with us this because this is basically exactly what I'm going to recreate so I will have this open here bean is I don't know how to pronounce that this is which is on the problem okay let me cycle the cameras again we're really getting started now everybody okay you know what I'm going to I'm going to do this yes okay all right so just so you know this is basically exactly what I am about to program and I am going to get started right now let me just open this computer back up in case there's any emergency messages okay stretch hello welcome to a coding challenge Fourier series so what I am going to program in JavaScript using the p5.js library is exactly this this is what's known as a Fourier series it is a series of wave patterns that when summed up together approximate some other function what does that even mean so I'm first of all you should yeah I'm going to show you some resources the things that got me thinking about this topic and wanting to make this coding challenge and you probably should if you want stop this video and go what look at these other resources and then you can you can come back if you want or maybe you're just off doing something else so pretty recently smartereveryday came out with a video called what is a Fourier series explained by drawing circles this video reminded me of a amazing video that I watched at some point in the past I guess like almost a year ago called what is the Fourier transform of visual introduction you probably if you've done any coding and programming you've probably heard these terms before FFT fast Fourier transform it's usually referenced in the context of analyzing sound and so a smarter every day's a video was a collaboration worked with a Turkish researcher on this website here I'm not going to attempt to pronounce it I will Billy Mina's gazelle on net I encourage you to check out and read this whole article but this is a visualization again of exactly what I want to do a series of wave patterns visualized as a path along a circle periodic functions sum together to approximate a square wave and if we can make this happen in JavaScript then there in theory is no reason why we couldn't then figure out how to draw any given path as a series of Fourier transforms and there's like a sort of wellknown gift for video of this like crazy set of circles drawing Homer Simpson so I'm hoping to get there but this video I just want to by the end of this video have exactly this pattern in JavaScript okay so I also want to reference this website better explain calm which has a nice article an interactive guide to the Fourier transform and this I think is a really excellent excellent explainer so again I'm gonna get start coding in a second but you're just gonna have to humor me to let me kind of talk about this a little bit more just to get my feet under me here so the idea of a Fourier transform so a sound wave right we have this idea of a sine wave you've probably seen me draw sine waves on the board or in code in countless videos usually drawn something like this a sine wave has a frequency which is how fat how often does it repeat like if if this is the sort of xaxis like this is one whole cycle right and I could think of that as like the time it takes for this circle to pass this dot to go all the way around the circle so frequency is like how how how how many cycles of the wave per unit of time like per second or per frame there's also amplitude amplitude is the height of the sine wave how how much distance between the very top and the very bottom and so a sound a pure sound the tone the musical note that was I meant to pick a but I hit G and that was I don't have any door close to perfect pitch who knows what note I just sung we can get the ml5 machinelearning pitch detection model to tell us that's another story for another time could be represented as a sine wave so but you probably have seen like oh I've got this recording device sound D thingy and what it's doing is it's like this is like the sound this is the wave this is the representation of the sound that I'm listening to right now well you can create this kind of wave pattern is typically actually the sum of multiple wave patterns can be represented this way pets so so in other words if this is like the music note a and then this is like the musical note something else and we're to add these two waves together can you still see where I'm drawing you know I might get something that looks like this right and I've done this I think I have like an additive wave video and the nature of code series about this kind of idea the idea of the Fourier transform is can we go right I could have these two waves I could add them together and get this pattern could I go in Reverse if I'm listening to a sound like this could I pull out all of the waves the sounds the frequencies that make up that that's like pitch detection or if I wanted to then filter out a very high pitched sound if I could take this sound break it apart take away one of the high pitch sound add it back together I would get this so this is akin to I love this metaphor here in the better explain of unsmooth iing a smoothie so I'm like to make smoothies actually a little known fact I was like anyway so but could you like right let's say I take some mango and some kale and two blueberries and some like almond milk and I mix them all together and I give it to my children and I say I made you this beautiful smoothie can you guess what's inside of it this is actually a game we actually play at home I've just realized that this is perfect well if I could do a Fourier transform I could take the mixed smoothie and filter out unco in Reverse and find out all the ingredients that's the idea so that's the idea of a Fourier transform that's conceptually what it is now what I want to do in this video is I'm not going to worry about figuring any of this out I'm just I now I understand what it is what it can be used for I have this goal eventually of having it of using a Fourier series to draw any arbitrary path but one way to get started with that is exactly what's demonstrated here on this website which is could you what what ways do you need to add up together to end up with a square wave and you can see here this is actually a really nice visualization as as as you have you have more and more iterations of the Fourier series how it convert is even closer and closer to the square wave I can also just go here to Wikipedia and find this again so this is the clue so there's this idea in a Fourier series of Fourier coefficients and some kind of like iterative thing of like N and n plus 1 and n plus 2 and we can actually see a nice clue to that in here this is actually a very this is one of the simplest Fourier series what is the series one three five seven can you guess the next number nine eleven so if I can just implement this each one of these circles and like have them rotate around like this at that period or frequency with that amplitude we're gonna get somewhere so let's I talked about this away too long let's try to actually code this down alright so the first thing that I'm gonna do is Oh where's my code here it is ah here it is okay so the first thing I wanna do I'm just gonna start I'm going to start like kind of you're not thinking about the Fourier series and I'm just gonna make up a variable called angle you can really think of that as time it might be more appropriate for me to call this time because time is moving forward that's a sort of crucial idea and then I'm just gonna say time equals every time through draw if you haven't sorry let me make this a little bigger that's too big if you haven't work with p5 before draw is a function that loops over and over again over and over again so time is moving forward then what I want to also do is I just want to like a draw a circle somewhere so I'm gonna translate to like 200 pixels over and 200 pixels down I'm gonna have this idea of a radius like the radius of a circle that I want to draw is maybe going to be 50 pixels and then I'm gonna say ellipse at 00 with that radius times two because the lips function expects the diameter radius is half that I'm gonna make this white so I'm gonna say a stroke two fifths the stroke 255 somebody told me how to get rid of that autocomplete and I still haven't done it and a no fill so when I go back to the browser and refresh it I've got a nice circle there let's make it a little bigger all right so now what I want to do is how can I have that dot traveling around the circle let me have the dot traveling around this Circle so the way that I would do that is I would use polar to Cartesian coordinate transformation and I certainly have a video that talks about how to do that but what I'm talking about here is if this is the radius and this is the angle which is really in my program the time how far over an X and how far over an Y can be calculate how far up in Y can be calculated based on trigonometry so the radius times cosine of the angle or angle is the xvalue the radius times sine of the angle is the yvalue so I'm gonna do that here I'm going to say I'm gonna say let X equal radius times cosine cosine of time and let y equal radius times sine of this sign of time I should write pause and turn that off and then but let me get through this first point X I'm definitely gonna positive turn this off point XY I'm gonna say stroke 255 stroke actually actually let's make this a circle also so we're gonna say like ellipse X Y I'm just gonna make it smaller like 8 pixels and let's also say fill 255 oh my gosh making me crazy and here we go look at that there's that circle moving right circle is moving and maybe it makes sense to also draw a line from a line from 0 0 to X Y and now I've got this and I want it to move a little bit faster and honestly I'd like it to go the other direction I'm not sure I should actually check what is it doing if I want to like recreate exactly what's here yeah that's moving the other drag so I've got the beginnings of this now I haven't worried about the number 4 here and the fact that I've got the angle divided by PI but we'll get there okay I'm gonna pause for a second this will get when I release this as an edit video this will get edited out let me try to find okay so also armor is makes a good point writes in the chat I am you using Fourier series and Fourier transform interchangeably but they are not the same thing that is absolutely correct not my intention to use them interchangeably let me see let me so first thing I want to do is figure out how does somebody in the chat know how to turn off that autocomplete that's making me crazy and then maybe I will try to give a statement to clarify the difference so hold on how do I turn off visual studio code autocomplete prepress simply press escape alright ii can disable it in the vs tool settings requires a restart a visual studio to take effect thank you smarter every day for the superjet that's very kind unnecessary but kind did i miss any i should really make sure i didn't miss anyone else so hold on i is let's just turn it off completely for right now visual code studio tools auto complete I was JavaScript well I guess I'm just gonna turn this off right now I like tab completions but let me just turn this off okay now still doing it let's let's see if I restart a Visual Studio code was what the doctor ordered oh this by the way is what programming really is the instructions do not match the behavior let's actually this is unlike the unity website someone's got no oh editor accept suggestion on commit character false okay thank you me I am so me let's try by the way so Visual Studio code this is a nice this is a bit of an aside if I go to preferences settings this is like the interface for changing the settings thank you new made you mosa I'm gonna what I'm gonna do it first of all it's very nice to people are super chatting me I will go I think I have a way of checking all of these after later you will hold your donations until next week when I'm doing my fundraiser okay open settings JSON you can also actually just edit the settings through here and I'm going to try what me I am so me suggested which is editor doc look at this this is what I want the autocomplete thank you very much whoops I need more space here to see this editor dot except it went away fine except suggestions I have this JavaScript dot suggest enable this false that's interesting suggestion on commit character false comma goes here in curly bracket okay let's just restart Visual Studio code one more time but it's not as bad now oh it's just giving me like this is better it's actually giving me like p5 things Oh it'll bring up the suggestions that just won't fill it in when you do all right that's fine that's fine the nice thing is here for some reason it was giving me crazy stuff but now it's actually giving me p5 suggestions like that's what I want all right I think we're gonna move on let's also install this update whatever it is okay all right yeah it looks like it's only pulling stuff that's in the current file which is as far as I'm concerned great and I lost my cap to this marker all right so let's let's try to let's before I get back into the coding I think maybe I should also clarify Fourier series versus Fourier transform oh yes yes yes yes yes Fourier series is for periodic chto signals and a Fourier transform is for a periodic signals for days series is used to decompose signals into basis elements while Fourier transforms are used to analyze single another domain ok ok so I think I'm at a point hopefully this is a good answer that makes sense to me and you can see here periodic function by discrete sum of complement for you is used to represent a general non periodic function right so ok so let me just bring this up really quickly so that people so I don't I don't confuse people who are watching the video later okay I'm back I fixed this autocomplete thing that was bothering me in Visual Studio code I'll put something in the description about how I did that but I also want to mention it in the chat I'm thank you to honor who mentioned who wrote you are using Fourier series and Fourier transform interchangeably but they are not the same thing so thank you so much for that comment applause no no if you can hear that there's like a presentation going on out there and people just started applauding just right so I don't definitely don't applaud for me so um I will I will post some links also in the video's description for more reading about this but in short the Fourier series is for periodic signals which is what I'm doing exactly right now to create this square wave which is periodic verses the Fourier transform which is for a periodic signals another way of thinking about that is to represent general any general non periodic functions so hopefully as I get further down this road I will come back to this but and and also in the chat I'm smarter every day writes Fourier transform is for swapping between frequency domain and time domain which is an also a really nice way of putting it okay but what I am doing in this video is implementing the Fourier series the periodic series of two to two that add up together to the square wave pattern okay all right let's get back to the code so here we go so I have success step one I have my circle passing around and you know what I think that I probably should I think that I probably should not put this I'm gonna have it go the I should wait a second yeah I'm gonna have this not go the the correct order action I may have it go this because I don't know if the negative numbers gonna mess things up okay all right next up next thing that I need to do and if we go back to this particular video is how can I take this circle that's moving around and then draw the resulting wave pattern and this is actually kind of a much simpler problem than you might think because basically what I want to do this is moving in two dimensions X is oscillating back and forth Y is oscillating back and forth and both those oscillating at the same frequency with the same amplitude in the same phase the starting together is moving along the path of circle so I just need to take the Y value and and graph that along the x axis so the way that I'm gonna do that is I'm gonna add an array to my code I'll call it wave and it's going to be an empty array has nothing in it and what I'm going to do here is every time I calculate a new Y value I'm gonna say what wave push Y so I'm just gonna save that particular Y value so now all I need to do is say you know for let Act you know I'm not gonna use X I equals 0 you know eyes less than wavelength I plus plus let's draw a point at I comma wave index I right so all I'm doing here is saying let's just draw all of those height values those Y values from kind of x equals 0 to as many as them as I get so if I do this you're gonna see look at that there's that wave pattern going all those points are moving up and down and you can see how the height of that wave is the same as the thing passing around okay but this doesn't look so great so what I want to do is I want to instead use begin shape and end shape this will this and then say vertex so this will actually like tie it all together and I think if I say no it's actually I'm not a minute I'm gonna leave the fill in there for a second because it's kind of cool so that's actually like trying to fill in the shape which is that sort of a nice pattern but I'm gonna just say no fill I'm gonna do this refresh the page and then also you know why not translate just to translate this a little bit over like 200 pixels and we can see this and then I guess I could also draw a line would this make sense a line from uh X Y X minus 200 this is weird what I'm doing now to the first point wait there's people timeout for it's like it what am I doing here I I just like thinking what do I wait what do I want it visually to do let's look at this Wikipedia thing yes sorry I want to draw a line yes I want to draw sorry I got confused while I was doing I want the end of the line to connect to where that is of course okay so what I want to do is draw a line so I need that first I need this first value so I have X minus 200 comma Y 2 I comma wave index 0 and actually it's not I it's zero so this is just this this I know is the very first point in this loop and since I translated over I've got like back up with my xvalue this is very awkward oh no no I don't want it to connect to here what am I doing wrong why is what I'm doing different oh this is oh I'm doing it backwards I know what I'm doing I doing it backwards I actually don't want to I mad I'm appending to the end of the array so every new value I'm appending to the end I want to add it to the beginning so instead of using push there we go instead of using push I want to use unshipped so unshifted a JavaScript function a weird name for it but push just adds this thing to the end of the array one add it to the beginning well that was that was a mistake there we go this is what I'm looking for there we go okay so now I have the line connected there now one thing that's a little bit of an issue here is that I'm just like adding points and adding points and adding points and adding points and never getting rid of any points so I also should probably at some point I should say something like if wave dot length is greater than like I'm just going to make up some number right now I could do a calculation of how many points I need to the end of the canvas but just to move more quickly here I'm gonna say wave dot pop so that would just like if it's getting more than 500 is gonna like delete the last one off the end and now we should be able to say like I should be able to look at wavelength 152 so clearly I only need like I don't need more than 250 so let's redo that again and we'll get like 250 points you can see it's there we go I just want to make sure it stops at 250 yeah there we go so to stop at 150 okay how we doing okay sorry this I just I need a second little water all right let me think what the next Lex step is all right okay all right all right okay coming back let me disciple the camera while I'm taking a minute here okay there's a lot of noise going on in the hallway all right we are at we are at this spot now comes the exciting part I mean this was hopefully all somewhat exciting but to me how do I suddenly go from I have one circle with a point around it to another circle that's kind of like there with another point around it to another circle that's like there with another point around it how am I going to add up these circles and continue this path of X Y along them with all of these points rotating and spinning and guess what I've actually done this before I'm just remembering now I have a video on the fractal spirograph let's see if this comes up yeah the fractal spirograph I actually did this already in the fractal spirograph which was this way of doing exactly this to create a fractal pattern which I should go back and revisit this but so we'll see if that's how this compares to that so let me go back to the code here and so what I want to do so first of all before I do this I think I need to think a bit more formally about these functions so before I was just saying radius cosign of time radius sign of time but these functions actually map to these values on Wikipedia here so if theta is my time basically what I'm saying is that I want to and and the the the value multiplied by that is four divided by sorry theta is my time and four divided by PI is basically my radius in a way here kind of conflating some things but I can start to use this particular series to understand the ratio of the radii and the frequencies between these these different oscillating circles okay so let's say what if I what I do is I say four divided by pi times cosine of what was it again one times time so I'm going to do this I'm going to just change the Y here and then what I'm going to do is I'm also doing to say radius times that and also I missed something four divided by what one time so this is confusing because there's a 1 here 1 times angle 1 times pi so I'm gonna say 1 that that's 1 times time 1 times time and this is 1 times pi and this is 1 times pi so the number that I need to change for each circle is that 1 so let's just see what this actually yields and I'm gonna go back to here well it's sort of it's the same thing but now the fact that I have that radius was 100 it's like everything is way too big and so what I'm gonna do is I'm gonna change this is really more like a scaling factor at this point I'm gonna change this to 20 and now we can see whoa boy that's still really well let's just change this to 10 yeah that looks better and then what I need to do here is this number here so I'm gonna say I really what I should be saying is this this need this hold on this is gonna get calculated here I will refer to this later let's put this in here and then let's make this back to this because I don't really need let's like to make this back to here okay and for time divided oh oh this should be dip one time spot why is it doing that to me I don't want that far I want these divided by each other visual studio code is too smart for my own good there we go there we go that's what I wanted that's why it was giving me something crazy anyway okay radius is not to find a sure it is where Oh huh radius oh this is the point ah the circle now I need to draw the circle next this is when things are going awry and let me put this here there we go and now there really of course the out was that of course I had the division in the wrong place I have this tiny little wave so let's go back and make that about 25 which I think would be now basically I hope it's divided by pi ah this is going remarkably well there we go okay I'm happy with where I am now okay so now I have that first circle the reason why I am doing this the reason why I'm putting this making all this work because I want this to be n I actually want this to be a number that changes right first first it's 1 then it's 3 then it's 5 then it's 7 that's not too hard to figure out right and what I want is to start X with and Y both at 0 and just add this stuff together so X plus equal X y plus equal so I want to and then what I want to do is I want to loop n so n is going to go from one I'm gonna say 0 actually and because I you got a count starting with 0 n is less than 2 n plus plus and then and this really by the way I should call this I because what I'm really saying is what I N is how do I do 1/3 and this is pretty easy I multiply by 2 and add one N equals I times 2 plus 1 right when I is zero I get 1 when I is 1 I get 3 when I is 2 I get 5 so now if we add these together and I'm just doing two right now and speaking of which I should move this all the way down to here and I'm gonna take I'm gonna take this out for a second and then I got to go back here and there we go okay so something is wrong I kind of got things close like look at this interesting weird crazy pattern that I've got wha what is going on so I definitely I definitely messed something up but oh but but let's see if we can figure that out okay so the line should not be going from so I should be actually keeping track of previous X is X and previous previous Y is y so I I don't I'm gonna like take out the wave for a second because I'm gonna have to change where I'm viewing here and then I'm going to just say a previous x equals x oh no and then pre and then previous x equals x previous y equals y and then the line is is going from those like that's not always going from zero zero it's going from the previous XY so now that's right the other circle also needs to have its Center be at previous X previous Y and there we go so now I have this I have this circle spinning around this circle spinning around this circle there's only two circles but in theory if I change this to like five there we go now we're now we're getting somewhere and actually it would be sort of fun I really think that I should think about how I'm drawing this a little bit better so for example I think I want these circles to be much lighter so let me give them a little alpha and then the points should also be I think the points are almost like less relevant I almost don't want to draw these points let's just because I have the lines now so let's see what happens if I take this out and I do this oops but I want the line to be full brightness there we go so this is what I'm looking to draw so there we go so I now have this particular series with every circle next to rotating around every other circle and I the I am using the values from the particular fourier series for a square wave okay so now and I feel like this should be bigger it's so small let's go back to having this be 100 and let's actually not let's just see how this looks and let's we can also I'm being like neurotically silly about let's move it over a little bit okay oh I don't want it to go off the screen though so let's leave it there split the difference 75 okay and then have to go back a little bit this is very silly what I'm doing okay 150 there we go okay so I know this is hard for you to see let me zoom in on it so this is we go so now guess what we're basically done right before I have to put the wave back let's see what happens if I just put that wave back like what happens I put it back well what's going on like I'm getting some crazy thing here I don't even know what's going on so what I need to do what clearly is happening is I am not getting for why the correct Y values and drawing it to the correct place so I've got to fix that even I like this interesting pattern I've got to fix that if I want that square where you can sort of see the square wave pattern here so what I want to do here is oh I'm pushing all the values I just want to push the last value actually this is gonna be a much easier fix I think I just want to push the laughs value after the loop is over and there we can see there we go but I don't know why this isn't shifted over did I lose that somewhere yes so this I need to do this this is actually going to be all of this was actually fine and there we go we are done this is the Fourier series for a square wave in JavaScript programmed in about oh I'm not visualizing the middle line this is a good point well I don't know if that's what but what smartereveryday is asking in the chat but I I should add one more thing to this because this is going to become relevant later in my mind's eye of how I'm going to do more videos on this so right now I am visualizing the resulting wave pattern also I got to do a few more things will you please bear with me I know this videos already about 70,000 hours long but let's at least add one slider and I'm going to use the and so I'm gonna have a slider that gives me values between 1 and 10 and I'm gonna start it at 1 and what I'm gonna do is I'm gonna take a slider dot value so basically I'm going to have n be slider dot I'm gonna have n control the amount of iterations of the Fourier series itself so now you can see there's just one so I can use this slider to add 2 3 4 5 6 and this is 10 and I could this is fun that I can actually do this in real time so now you the viewers of this video will have so many more creative and interesting ideas about how to make this prettier how to create more interactivity there's so many but this is just an inkling right every system that you build with code has a bunch of variables and parameters there's no reason why you couldn't make those interactive you couldn't even think we could make the number of iterations that's to a sine wave itself like what would happen there that would be crazy but now you can see up to 10 we can see how it's converging and I you know I don't know how far I want to push this let's push it a little let's try let's put it at 100 and that's zero all the way up to 100 performancewise it's fine it's happy to do 100 there we go look at this look at that square wave all that is that is like nice and square I've ever seen this is making me so happy I cannot explain to you I feel like this is a thing that's been in my head for years but I never actually like sat down to program it course I am standing right now but close enough all right so one more thing that I want to do I would really like to also see this path here like what I would like to trace out the path of this of what these endpoint is doing not map to only the x value but also the Y value so the way that I might do that is I might say a let path another array this is I think going to be a little bit easier and I'm going to say path dot push this I can add to the end and I'm going to use create vector because I need to store both an X and a Y so in this way if I only needed the Y value because the X values are fixed with the path I need both the X and the y value because I want to visual that that path well we'll see how high we can get it to go in JavaScript before like my computer explodes okay so that now what I should be doing and then I just need another one of these thingies by the way that's the technical term for this this thingy so I want to do another loop I want to do it actually before I translate and I want to just instead I'm gonna do path dot length and I'm gonna say path index I dot X and path index I dot y yeah okay is this right my brain is starting to melt oh yeah there we go look it's drawing the path of the circle I move it up to one now it's drawing Napa now of course it's like drawing over itself a million times so every time its cycles past two pi I can resize should reset it what's going on here time n times time oh but when n is one that's one full cycle I mean this is later is a little bit silly but I'm gonna say if time is greater than 2 pi just reset the path to nothing and then reset time back too zero this I'm sure a more thoughtful way to do this but let's just see if that works like it's drawing the path and then we're not going to really see it clear yeah it cleared right so that's exactly what I want and then now if I do a couple iterations we can see and this is sort of crazy what it's doing like I'm seeing it draw that it's it's draw that path I need more I need more space any more pixels Mozart let's get myself let's oh I should end this video ok so I'm gonna stop here I'm gonna do some more in during this life this is so confusing to explain thank you for watching this coding challenge I'm still talking a second and that's your edifice right okay hold on let me just put this back to something reasonable all right thank you for watching this coding challenge visualization of the Fourier series for I'm making a square wave check this video's description for a link to the coding train webpage with this challenge on the code for it and then if you make your own variation of this please share it with me you could contribute it right there so what are some things you might do number one is why don't you try doing this sawtooth wave could you take the code that I wrote and make it do this that would be a nice exercise to try what other kinds of interactivity can you add to this to in terms of changing the colors changing the different parameters changing the view of it what happens if you do this like in 3d like right could you have like some kind of like point oscillating over three dimensions in a sphere and then map that that would be cool so III look forward to seeing what kinds of things you create ask your questions and all that nonsense it's not it isn't I mean whatever goodbye see you next time all right that was just my end of the video thing for when this gets edited I feel like I'm having I there's like a lot of new viewers I'm getting the sense of so I'm trying to explain my weird process but I'm not doing that well at all so let's let's see how far we can push this so first of all let me let me give myself a little bit more let's all right let me see I need to save a snapshot of this but I am going to I'm trying to think of what I want to do and then I want to do the toothpick challenge what time is it always noon oh I took a long time it's gonna be a really long video okay I need i plus equals to not I plus plus as alka says oh you guys are having it you all are having a chat about something else in there alright so let's see let me let me get myself a little bit more space here and really what I need is more width and I should if I'm really thinking about this I should have everything be relative to like the size of the window but I'm not gonna program that right now let's just try putting this up to like 500 and see what happens oh I lost the and then let's translate this over like a bit more this should obviously be a variable there we go okay so we're gonna give this a try we're gonna see like how the JavaScript performs as I move this up and maybe what I should also do I should probably like console.log what the number is but that's fine there that's 500 what is something is like very weird but I'll take it I just when I want to turn off the I wonder if I did something with the path incorrectly that's confusing me let's turn that off there we go let's push it up to 500 hello to consult Keith young apparently welcome to all the new viewers dan you could have the user be able to change the riemann function yes I could all right this is crazy all right Bert make the first circle set to fiy try to make a 4pi limit people are giving me all these amazing suggestions I'm gonna move on I think it's time to do the toothpick I want to do at least two things today plus I said I was gonna unbox both your couple so I think I'm gonna leave this at where it is and I'm gonna move on and do the toothpick challenge but thank you everybody make the path fade yeah I'm gonna do that you know what I'll do the toothpicks in processing because people have been clamoring for a processing and since I'm having trouble with the p5 web editor anyway I will have to use array list which is always really awkward but that's fine okay so I'm gonna close out all this stuff I am going to put this back to what it was okay so I'm gonna leave the code like this alright so people are asking what did I mean by Homer Simpson so my goal my new goal in life is to be able to fight google Fourier series and homework Fourier transform maybe there we go amazing how things work is to recreate this and I'm just gonna skip ahead pretty far here you can see look at this this is using like basically doing exactly what I did but on this completely arbitrary path of Homer Simpson drawing like this like makes my mind and and so if you watch the smartereveryday video what dhoka did is what doe guy did was recreate the smartereveryday logo so I suppose I would love to in JavaScript maybe recreate I don't know this something a rainbow this clouds something like that one of these characters something like that so that's what I'm gonna do can we take a break ridiculous can we take a break before the toothpick yes because I also need to go get some more water so I'll probably take a few minute break and so actually what I so one of the things I really want to do is um create some I need a like a video that I can play while I'm taking a break that's like be right back but I am going to right now just go toothpick number file let's go here let's find a nice that's good and then I also want to go here and I want to go where it here here okay this is by the way quite possibly my favorite website in the entire world look for Homer Simpson cycloid from Santiago let me see if I can there's a way that I'm so sorry sorry look for Homer Simpson cycloid from Santiago Ginobili writes with a super chat Vitor Nogueira there's a way that I can see all of the super chats I think through an interface that I have here let me just try this I think if I go here no that's for me to give myself a super chat somewhere I saw that there's like a way that I can have a page actually by next week if I could get the super chat for good thing I want to have something I want to program some stuff where like a little thing would happen when there's a super chat if it's a donation to the processing foundation I can't find it I don't know how YouTube works but if I go here here no I can't find it I can't find it so I apologize if I've missed people's super chats I can definitely see them later and yes I'm using the invisible computer that's where I look at your chat and also the slack channel that's going for patron patreon you should do it with drawings from the quick draw data because they already give you the right path inputs says me I am Sania this I should do for next week so quick draw data set what's the most holiday II thing in the quickdraw data set is it maybe like snow snowman I'm guessing I forgot what the so yes so let's let's work on that coding train enthusiasts let's try to figure out a way to do that the quickdraw data set is right Thank You AJ 3600 okay Wolfram Alpha can give you an formula to draw images to interesting that's interesting okay so I'm gonna do the toothpick patterns which is here and here here I want a a 1 9 a 1 3 9 2 5 0 a 1 9 2 3 5 0 is that what it was a 1 3 9 2 5 0 search that's this sequence so I have this sequence which is this sequence which is this okay this is and then let's do this in processing so processing is a Java based program environment very similar to p5 in JavaScript but it's a downloadable desktop thingamabob hi vocabulary as it gets closer to lunchtime my vocabulary really starts to fade it's not good never attempt complicated fractal recursive coding challenges before lunch alright so I'm gonna take a short break I know people like the this stop song as always I always forget this stop like solution I am so good with technology okay I'll put on something else for you all right I'm about to mute my microphone and I will be back in about five minutes okay I'm back how is that longer than five minutes it is time ups overhead camera that was about ten minutes one more coding challenge for today and then where did I put my eraser okay so toothpicks toothpicks toothpicks okay this one's good this is I'm really excited about this hopefully every what's going on here yeah all right maybe pouring all the two things out wasn't the right idea we're not over here yeah I don't know it here and then okay all right so all right let's try this a little bit ourselves so I'm gonna try as best I can to make this toothpick pattern that I learned about from this numberphile video oh you get the old I mean mine here okay wait I don't know this is not going well yeah so the idea here this is almost this is like this is just like when we played the universal paper clips game on the coding train let's see how I am so mechanically challenged it's so sad I will definitely be able to ironically program this faster then I could possibly make the toothpick pattern let's just try to I'm gonna try to fill up at least the space that you can see so where do I need to add some definitely want to go here one go here yes you are now watching a live stream of a person arranging toothpicks on a desk I think I've run out of space I guess I could go up here right cuz there's still more that you're seeing oh it's oom din again every time what does go just the camera like oh you know what it is the camera look at this could it be just the weight that the fact that the camera is pointed down and mounted that the gravity is actually zooming it back out zooming it in is that what's going on it's like why is there no space for my toothpick fix I wasn't doing this in the right order now okay I give up okay there's like a ring man joke in here somewhere I think but okay it didn't sue min it didn't what's going on is it just like slowly over time yeah like if I pull it down it zooms in if I yeah I don't know what's going on gravity is a thing hmm okay anyway this is not really that relevant so first of all welcome new viewers apparently I don't know how many people are watching right now but I seem to have a lot of new viewers thank you I am a person who wastes a lot of time on a live stream that's supposed to be about programming I guess but really it's just about a lot of nonsense around toothpicks and random numbers and brainmelting out of ear things and so here we are so I am now going to attempt to do a coding challenge to implement this particular visualization of the toothpick pattern as demonstrated in this recent numberphile video I will be using this online encyclopedia of integer sequences by into a Sloan who is featured in the video this is the particular sequence that I'm looking for I think is this a 1 9 2 3 5 0 a 1 9 oh no 3 a 1 the wrong one 8 let me copy it a a 1 3 9 2 5 0 a 1 oh boy this is not the right one a 1 3 9 2 5 0 totally on the wrong to make sequence there we go so if I do my programming correctly I should get the sequence a number here we go here we go okay here we go mmm stretch stretch always important to stretch when you're programming Oh myself there okay hello and welcome to Makoto challenge toothpicks I know it's a little weird what I'm doing I'm really doing a coding challenge about toothpicks and in fact I have all these toothpicks on my desk over here and I'm trying to I thought oh man I have this really amazing video where I arrange them and I just I can't I can I'm terrible at this sort of thing so I'm gonna but but I do have an overhead camera which is exciting there's some possibilities there so what is this toothpick pattern terrific toothpick pattern so first of all you I would suggest pause this video right now go and watch this wonderful numberphile video which explains the toothpick pattern and you can use it to generate interesting fractal like visualizations in a twodimensional space this actually comes from the research of NJ Sloan who is the founder of my absolute favorite website I mean I don't know oh there's other wonderful websites so I don't know I don't want to play favorites here but the online encyclopedia of integer sequences is a pretty awesome website it's just a website of sequences of numbers and I've used it before and there's so many things to explore in terms of these sequences of numbers but one of these a particular sequence of numbers comes out of this toothpick sequence Omar pols toothpick sequence so this is a nice interactive demonstration of the toothpick sequence you start with oh wait wait wait wait we could do this you start with a single toothpick unless you say next and you put two toothpicks consume you doughnut to to fix you put two toothpicks like this on the ends and then you say next and I also put toothpicks on the but the next step is the key step so once I get to here and I say next again notice how no toothpick goes here right toothpicks can only go on eight what's called a free edge an edge that's not touching any other toothpicks so this is touching here this is touching here I can actually point over this way I don't know I don't know the best way to do this let's get rid of that camera shot but so and then if I keep hitting next look at this I keep going and going and going and going and going and going and I can adjust the scale and I could actually just say run and move so I want to make this in the processing programming environment which is a Java based program vironment can I make this so a couple things one is this is fun to play around with you can play with different you can play with different parameters you can render out to a PDF and in addition what's going on here why is this a number sequence what's kind of fascinating about this and if you watch the numberphile videos can you create an equation a formula to sum all the given toothpicks at any stage of iteration and that's exactly what this particular number sequence is which I will now do a dramatic reading of because I like to read number sequences 0 1 3 7 11 15 23 35 43 47 fiftyfive sixty seven seventy nine ninety five hundred twenty three years 55 her 71 her 3500 three 195 207 223 150 120 day three three 347 eighty three 423 483 571 651 683 687 690 five six seven 719 735 763 795 1531 895 okay that's good enough let's start coding so the first thing that actually did I think I wouldn't let me save this call it toothpicks let me make sure let me minimize some of this other nonsense that I'm not using move this over here let me make a window that's 600 by 600 let me draw a background that is white and let me hit run and we can see there it is there's my window this is where I need to draw the toothpicks so I think what I want to do is you know skip a few steps here like I might but you know if I'm really trying to do this the first thing that I might do is just literally draw a line but I know that I'm gonna need some kind of toothpick object this is a good case of objectoriented programming because I need to create a class that describes what it means to be a toothpick what does it mean to be a toothpick then I can have an array of many toothpicks okay so that's not going to work neutab call it toothpick I'm going to say class toothpick and what do I need in the toothpicks so I know that I need a toothpick I need to have two end points what's the XY location here and what's the XY location here so I'm gonna call those a X a Y B X B Y and I'm gonna write the constructor and the way that I'm gonna do this the way that I think is gonna work the best like when I create a toothpick what I'm going to do the toothpicks can only be horizontal or vertical so I'm gonna create a toothpick by giving it the center point and then giving it a value like one or negative one whether it's horizontal or vertical so in addition it is also going to each toothpick will have a variable called dir for direction or orientation so I'm gonna give each toothpick and X and I'm using integers very specifically because I think this is gonna make my life easier to sort of almost think of this toothpick as living on a grid and you can't have spot 1.37 or to point like I really want to like be as close to pixel perfect as I can so and I also I mean this was really a global variable for the whole system I'm just gonna make a variable called length for how long a toothpick is and I do want an odd number because I want to be able to have that center point be perfectly have each half of the toothpick be equal in size so for example if I had a toothpick of length 9 then the center point is at five no four zero one two three five six seven eight hey hold on let me explain why this is important if I have something of length three right this is the cent this is if the total length of this is three this is the center I have one spot here in one spot here if I have something that's of length five then I've got two here two here and a perfect Center so this is going to be important in terms of I think that sort of evenness of how I place them the toothpicks and we could probably make a difference in the code that accounts for that but it's gonna make my life easier two things wait there's a toothpick stuck in my computer ah okay I'm gonna get it out to think no there we go okay all right so length let's just start with a length of 9 and what I'm going to say is that oh and I get to get a direction so I'm gonna say that if the direction oh so first I'm going to say that and let's just call this D Direction equals D if the direction equals one let's make that a horizontal toothpick so then a X should equal X plus length divided by two and a y no sorry and B X should equal owed so a X should be X minus length divided by two whoo and B X should be X plus length divided by two and then the Y's are the same a y is y and B Y is y and then let's make a toothpick that is vertical so I'm gonna do all the same stuff but these are now going to be with the Y higher and lower and let's get rid of this white space here and so now then I'm gonna write a function called like show and I'm gonna say I'm just gonna draw I'm gonna say stroke zero let's make it a little stroke weight like two just so we can see it and then I'm going to say line from a X a Y to B X B Y so this is the idea of a toothpick a toothpick has two points a and B a XY Y ax ay Y B X B Y and it has a direction just to be clear about this because this is so fundamental this is the toothpick this is point a X a Y this is point B X B Y but also the toothpick could be written in this orientation as well okay so now in my main program I'm gonna make an ER I know I'm gonna need to have a list of toothpicks so I'm gonna make an ArrayList full of toothpicks let's call that pics equals new ArrayList toothpick now if you've if you're coming from all of my JavaScript video tutorials this is a pretty weird thing that I've written because in essence if I were doing this in JavaScript why does it not know errors wait what did I do wrong timeout for a second wait a sec what did I do wrong here Oh toothpick capital P also does this code to a good size and I think it needs to move over a little bit silly me I have a capital P there for no reason so what I was saying was if you've come from my JavaScript videos you would see me do something like this like making an empty array that I'm gonna fill in JavaScript is super simple in Java which this which processing is built on top of I've got to use this data structure called an array list I don't have to there's other data structures which I need to specify what's going in it toothpick objects and then I need to create it so so there now what I want to do is I want to say pics add a a new toothpick which I'm going to put at 300 300 and you know what I'm gonna put it at 0 0 and I'm gonna give it a direction of 1 because what I'm gonna do here is I'm gonna say translate with / I'm always going to think of the center at the center of the canvas as 0 0 so I need to translate to that Center and then I'm going to say for every toothpick T in pics T dot show so this is now a loop where I'm just gonna say whatever toothpicks I have so I'm starting with 1 toothpick I made a class objectoriented class a template for a toothpick then I made an actual toothpick 0 0 I can't remember it's 1 is either this way or this way and then I'm saying whatever toothpicks I have show them all and so now if I were to run this again we can see there's my toothpick and let's make the length let's let's have length be kind of like a global variable over here and let's have that be something more like 63 let's run this again we can see there's my toothpick and by the way I could do something like this I mean I you know as an exercise I could just make a ton of random thanks but that's not what I want to do what I want to do is each cycle right I want to say what are all the existing toothpicks check every existing toothpick look at its endpoints or is that a free end point and if there is make a new toothpick there so a nice way to do that in the draw loop is to start by actually saying make another empty ArrayList I'm gonna call it next so this is kind of like the next generation of toothpicks is another new boy's a lot of typing going on here with these array lists I'm gonna make a new list of toothpicks the next list and as I go through all of these existing toothpicks what I want to say is I'm gonna say like I'm gonna you know what I'm gonna do I'm gonna ask the toothpick to create I'm gonna say call create I'm gonna say I'm gonna name these create a create B it's probably a better name for that I'm trying to think but what I mean is let's have the toothpick itself it knows about its edges maybe I need to when I call those functions pass in an array to all of the existing toothpicks like hey check yourself before you wreck yourself know check yourself against all the other toothpicks to see if your edges are touching any of them and if not make a make a new toothpick ah and these should be and then I should say toothpick this should this function should return to new toothpicks I'm going to call them a and B I should probably call them if I'm being consistent here like next a and next B so right and then so okay so what if then then I want to I think I'll do is I'll have this function I'm kind of planning this out as I'm going this might be a bad idea we'll find out I'm gonna have the function if the endpoint is not actually free just return null so it will return a new toothpick if it's a valid endpoint edge if it's not it'll just return null so what I'll say they hear is if next a is not equal to null then next dot add next a and this probably way I could do this with one function or something and if next B is not null add next B and then at the end what do I want to do I want to say I think toothpicks dot add all next so I think this is the ideally I haven't really written the code for doing this yet but this is the idea for every existing toothpick and here's the thing I don't want this would be problematic if I didn't I think there's a couple reasons why I want this next ArrayList and III did sort of think about this in advance like you might be thinking why not just add them to the existing list of pics well one thing is if I add stuff to the end while I'm iterating through it if things could go pretty awry also visually what I want to do I might want to draw the new toothpicks each time like as a different color there might be some separating out what the next generation of toothpicks is from the current generation might actually be somewhat helpful okay so now what I really need to do is write this these create functions so let's say let's first write the create a function so with this function it gets another ArrayList whoo I'll call these others and return null here so the idea of this function is that it's going to compare this toothpick this toothpicks against all the other toothpicks to see if it's if yeah so I saw a message in the chat and I maybe I did another capital P Ulmer is asking do you really need to redraw everything you're just drawing new pick yeah I could just draw the new toothpicks the reason why I want to redraw everything is cuz I'm going to do this thing so sorry I felt like I had to answer that question sorry I'm getting a little bit exhausted here it's so hearty 1230 whoo all right let me try that again the idea of this function is I want to check this toothpick against any other existing toothpicks to see if they're sitting on the edge and if they're not I'm gonna create a new toothpick on the edge so here's how I'm going to do that I'm gonna say for every tooth pick other in others if and let's try let's so I'm gonna write some pseudocode for a second if this pick is touching other and also I first I want to say actually by the way if other is not equal to this like I only want to check yeah I don't want to check this if this toothpick against itself and I'm gonna say oh this is boolean available so I'm gonna assume the pick the toothpick is available so and then I'm going to look through all of them and if I find that it's edge is touching any other edge then it's not going to be available so how am I going to do that so I let's write a separate function how am I gonna do that let's write a separate function and let's just write a function called something like boolean equal and it takes two points can I go back and have I I need a second my brain is like hurting me I know I shouldn't do these new those are the chat is I probably shouldn't look at the chat cuz because I I've got it I know what I'm doing here it's not you'll see that it's not N squared all right I'm not sure I'm gonna go back to where I was writing this function so alright alright so I'm gonna write a function that returns true or false for two for two two arbitrary points so so what I'm going to do is equivalent or like cut intercept I'm trying to think of what I want to do I'm trying to decide whether I want to do this with like with like two objects and maybe I should put like maybe I should actually have a function in here like intersects another toothpick and then I could say if others not equal this and this and this does not intersect in this intersects other yeah let's do that okay sorry about you I'm making this editing complicated yes and Aaron is saying check only the newly added toothpicks I definitely I'm gonna that's gonna be a really important optimization so I will do that but I've gotten there yet okay so first let me actually I think what would be I think what would be helpful here is in addition to checking to make what I want to say is as long as the other toothpick is not this toothpick and the other toothpick I'm going to say dot like touches this toothpick then available is false so it's not available so this is not an available spot so now I need to write a function that can one tooth can check against the other one and I'm going to write that in here I'm gonna say boolean touches another toothpick and basically like how do I know if I basically want to check to see if two endpoints are the same and because I used integers I'm good actually check for a quality here I want to do like a distance thing so I can actually just say if other dot X ax equals this dot a X and other does a y equals this dot a Y return true I could write this as one statement but I'm just going to do it this way for a second and then let's check the B values OBO there's four possibilities here though oh I'm making this so silly this is one of the silliest functions I've ever written because there's four possible right because then a could also equal B and be good also equal a and this we should write so ax equals ax a y equals a YB x equals B xB YB b y equals b y a x equals oh boy this is getting really bad let's go over here for a second right I have two points ax I I have a 1 and B 1 Oh this camera is off let's take a minute to actually like really figure out what's going on here right because I have to it with two toothpicks I have a one and I have b1 and I have a 2 and I have b2 so I want to make sure so I have 4 points I want to make sure that a 1 and a 2 are not the same that a 1 and B 2 are not the same I want to make sure that B 1 and a 2 are not the same and that B to know that B 1 and B 2 are not the same so yes there are four possibilities here and if any of those are the same and by the way this is this could a could be this one could be this and other could be two right it's not one and two are this in other so what I'm doing is checking to see if other a is equal to this a or if other a is equal to this B or if other B is equal to this a and if other B is equal to this be so insane I'm really doing a horrible job at this return and then if none of those are true we're gonna return though oh I I should be taken to the coding sanatorium right if none of these are true return null why why what what what error could you possibly look at you possibly have to complain about and why is oh I'm zoomed in Matthieu you said a other a is equal to this be other a other a this a other a is equal to this be an end point can also touch a center let's get roll it off now we're turn off boolean yes return false thank you oh yeah no you know what so someone in the chat is suggesting that they can also touch a center and while that's true well that's true I never have to check for that because I'm always placing them at the center and so and so and and so once I whenever I add a new toothpick it's never the new toothpick its endpoints are never going to be touching another toothpick Center and I only need to check the new ones so that's an important important one I should use vectors instead of integers I know I know right I know I know okay oops all right so this error is because I need to return false and I am also getting the question about couldn't a toothpick be touching the center so here's the thing there's also another really important piece of this that I kind of have in my head but I don't think I really like to talk through which is that now I need to check this toothpick or its end points free yes now I don't ever need to check this toothpick again once it's been added I actually don't need to check it again and so the idea of a toothpick touching another toothpick Center is actually irrelevant and I don't think touching or intersecting these are actually gonna be at exactly the same point the way that I've done the math so I know maybe I should say intersecting you're touching but I don't actually have to check this out I don't think we'll find out we'll find out if I have the correct code okay so now here so now if if okay oh you know what oh oh I went I went so off the beaten path the way that I've written this oh oh the way that I've written this I'm gonna go back the way that I have written this I actually I wrote two functions so this is just this is actually irrelevant in this function because I'm checking a separately from checking B so what I want to do oh let me go back I'm gonna do this a different way boy this is gonna be a fun editing project an endpoint with a toothpick yeah I just want to check the endpoint I'm actually not checking to toothpicks I'm checking an endpoint with all the other toothpicks I have other stuff to do today people I think once I get the core idea of this down though it's gonna go really fast all right yes I'm sorry everybody I'm literally doing this again simplifying so I don't want any of this discussion about this and other an a and B and four possibilities whatever whatever all that is irrelevant I'm gonna do this in a different way it's slow mode K week is slow mode off no but I think it actually might be I thought I'd put it on five seconds do I need to fix slow mode this is great it's good for me to have all these new viewers and have it I don't know what the f is for is this some kind of thing that I don't understand let's see a live control room I don't know how to find the slow mode thing use point objects instead of toothpick objects FFF okay I don't know what the f thing is I will I'm gonna I'm gonna push forward okay okay now because I've written this and kind of what is now arguably a silly quo so to fix wet fly somebody slowmo that down I hope you could see that do we have smarter every day's like slowmotion camera somewhere available okay if it because I wrote this in a sort of silly way I'm writing a create a and create B function what I actually just want to do here is check the a and point against every other toothpick to see if two toothpicks have the same end point as each other to see if they're intersecting at that same end point and you know somebody did ask about toothpicks put a toothpick right I'm looking for the case where this is toothpick one and this is toothpick two and this is like point a and maybe it's the same as point A or B of another toothpick this is what I'm looking for but it is the case that toothpicks could also be intersecting the center of another toothpick but I'm pretty sure I don't have to check for that because once I add a toothpick if I add two more toothpicks sure this toothpick is intersecting here at the center of these two toothpicks but it done like I never have to check this toothpick again once I have added something that toothpick I can call it quits and only check the endpoints of these new toothpicks and by definition there can't there could only be the way this algorithm works out is you know these two are the two toothpicks here are intersecting at the end point so I'm pretty sure that's how it's going to work if you if you look at the demos of it and how it works I don't think I need to check the center okay at least I'm trying to convince myself so as long as it's not the same toothpick and intersects I'm going to write this rather awkwardly I'm gonna say intersects a X a Y with other with other then available is false and so maybe what I want to do is say like other dot intersects a X a Y so this is actually like o equals false so maybe this is kind of like a function inside inside of the toothpick class that it can check if it's intersecting any generic point so this is a little bit confusing what I'm doing when I write a boolean function that says intersects any arbitrary XY and I can say basically if a x equals x and a y equals y that is the case where I should return true otherwise if a be x equals x I'm just checking both points and again you know easily there's a 5ever way to do this I'm also going to return true otherwise is turn fall so basically this is the idea and these are integers and I can check for equality here because I'm doing all integer math if I had used P vectors and floating points I'd be worried about then I have to use the distance or something but as long as the a point and the B point of this toothpick is not equal to this X arbitrary X&Y point that I want to return false so now here comes the fun part this fun emoji if it's still available then what I want to do is return a new toothpick and the new toothpick Center the new toothpick Center is where it's at that point so the new toothpick is at a X a Y and it's Direction is what its direction as always the inverse so if this one's one this one's negative one if this one's negative one this one's one so it's just Direction times negative one otherwise otherwise return null ok so now we're going to go back here let's forget about next B let's forget about create B I also want to do something I'm gonna say no loop I want to control looping and then I'm gonna add mousepressed and in mousepressed I'm gonna call redraw this is so I can click the mouse through every frame so let's see if this works let's see if I can kind of condense the code a little bit so we can look at more of it at once and now if other does not equal this and other into I'm missing a parenthesis there let's go back here let's run this okay so now if I click I got a new toothpick I got a new toothpick new toothpick new toothpick so this is actually working but it's just doing that one endpoint so again I really should there's no reason for me to have two separate functions here but why not what I'm going to do now is in the toothpick I'm kind of just this is Terrell I do not like this at all do you not like copy pasting I'm gonna just call this create B I'm gonna say B X B Y and B X B Y so this is exactly the same function but checking the B endpoint and I could do this because a toothpick only has two endpoints but this doesn't scale this you can't generalize this to any kind of shape with any end number of endpoints so definitely gonna have to rethink this for maybe a future video I might make what look at that that kind of looks like the toothpick pattern so in some sense we're done but a couple things I want to do number one is I would like to I need to I there's a big optimization I can make here which is to only check the new toothpicks so one thing that I'm going to do is let's make these two different loops just two let's separate out the drawing from the like picking the next stuff the other thing I should do is when a toothpick is a new toothpick so let's call it a new new pic oh that's weird is true so and then the what I want to do here is when I draw it let's try it let's just try this for a second if it's a new pic say stroke let's make it blue and then by definition then new pic would be false so I just want to and actually let me not do that here so this should be now they're all blue okay so they're all blue when I knew all the new toothpicks are blue and then what I want to do here is I would say if T is a new pic like again I could probably keep it in a separate list but whatever if T is if T is a new pic and then then I could do all this checking and then say it's not a new pic anymore all right so this is this is going to limit all of the checking to only the toothpicks that were actually new the previous time and I could keep the next ArrayList from one cycle to the other but this I think will do the trick right now blue you can see this one is no longer blue only these are blue only these are blue so in theory I have now optimized this a bit faster okay so now going back to the code I can to get rid of this no loop I can let it just go on its own and we can see it's sort of filled up the screen really quickly so this is what I want to do here I want to use the scale function to as it grows sort of zoom out on the drawing so scale is a transformation that can scale what I'm seeing so for example if in the draw loop here I just say scale 0.5 you can see there it is at half the size if I say scale 0.1 we can see now we can see all those toothpicks and being added at a much lower scale okay okay so how do I have that dynamic so the way to have that dynamic is one way would be let's try to figure out maybe what the what toothpick is furthest to the left edge and furthest to the right edge so what if I have some global variables like min X which is equal to zero and and Max X which is equal to width oh and actually these should be negative so I because I'm because I am considering this around zero min X would be negative with / max X would be positive with / so negative 300 that's the sort of a minimum and maximum range to start so I could say of the difference is this the scale the scale that I want let's call that like by a factor is the maximum X minus the minimum X divided by the width right or actually width divided by that right because if the distance between the the furthest toothpick to one side and the furthest 2bic to the other side is twice as long as the actual width of the window then I want to scale it to 0.5 so but of course I need to find out these maximum and minimums so the way I can do that is I can actually just right here since I'm looping through all the pics and you know in theory like I'm going to get the scale for the next round but that's fine min X is the minimum whichever is smaller between the current pixs let's just use one end point I mean I could probably check both end points but let's just make sure this works and the current min value and the maximum is whatever is the biggest between B X sorry sorry ax and Max X right I think this should work factor is what did I get did I get like a the value of the local variable factor is not used well sure Oh scale factor true but that's not the era I'm getting but / 0 min max X minus min X Oh whichever one's bigger oh no no no no no no this has to be max X like right hand that run for a while there okay yep oh you know what are these these are all integers ah these are all integers so integer math is gonna give me zero there we go okay so now I am scaling inter and according to and you know as you dude these are getting I'm scaling according to the distance between the sort of like furthest toothpick and the furthest toothpick along the xaxis I could do this along the yaxis there's probably a lot of smarter ways to do this but this will work right now so the other thing that I might like to do is calculate this factor you should probably store this as a global variable also because I kind of want to use it and you know what I could actually do I could just do this I could I could pass it in here because what I want is also the stroke weight to be maybe inversely proportional to the factor so like as the factor is getting smaller I want the lines to be thicker so that maybe they show up better yeah I don't know if this is really reading but like as they're shrinking the lines are getting thicker goodbye YouTube compression algorithm but you can see the idea here so this is gonna run really slow I have not super optimized this but what would be fun to try is and maybe I should just make them a little bit thicker like two times that what would be fun to try what I would like to do is to see if I can make a nice full screen version of this in p.2d will that help so here we go here is the tooth I'm sure the YouTube compression algorithm is making this impossible to watch but here is the tooth pick number series from the numberphile channel visualized using Java in processing now it's running super slow I kind of what I want to do but I should check the number series so let's actually check that number series let's do print one more time print line what do I want to do I want to check how many toothpicks there are pix dot size and let's change the frame rate to 1 and let's open up the console let's put it back to a smaller size and let's open up the console so I can see this better all right so here we go 1 3 7 11 15 23 35 43 47 55 6779 195 120 is this right I really hope this is right let's check I hit stop what stay yes okay let's go back to that number sequence site crosscheck this I didn't use 0 1 3 7 11 15 23 35 43 47 55 67 thank you so by the way you should watch that numberphile video you should look at these you should try there are so many other ones and there's different shapes toothpick on a hexagon whoa a reset reset reset look at this oh no wait wait hold on reset reset toothpick on a hexagon oh boy whew so there's so many interesting possibilities here of things you could try let's look at there's one that's like a nice maybe it's the e toothpick that's kind of like snowflake like yeah look at this one oh that's so I really wanted so maybe next week for my holiday special I'll try to do this one but you should explore all these Washington of her file video expand this refactor the code make your own version I will release a version of this that also runs in JavaScript that you can do that to run in the web browser so you can check this video's description and share with me your variations in color and animation and how you think about doing this I can't wait to see what creative stuff you make ok good bye ok this has been a 2 and a half hour live stream it's 1 o'clock and I'm looking at my email which I should not be doing time to unbox use a map Elmer is saying use a map data structure where the key is the endpoints and the value is the number of toothpicks touching it Oh interesting that's a great idea don't forget to scale against height yeah you know Iran is saying you're still checking every newly toothpick against all of them I am but I don't know if I that I don't know what's an optimization around that like which ones can I skip I am I just checking like the last round Oh am I only checking in the new ones against the also the new ones no hold on let's look at this oops right so the next toothpicks clearly I mean they're intersecting against this toothpicks from their current round same here but these toothpicks hit the end point of this toothpick which is from a previous round so I think I do have to check I think I have to check I can't just check the new toothpicks against other new toothpicks yeah so I'm not sure thank you graven developed mole this dot channel dot donate that's cute I love that why is this really showing up time to unbox that uke yeah I did say I was gonna do that I definitely can't do any coding I am done coding I am actually recording this to disk amazing and you just just so I make sure it captures for once I remembered color the toothpicks based on their XY mapping between 0 and 360 for hue that way you get a rainbow you should do that swirl studios and then submit it alright you asked for it you're getting it overhead camera not not a sponsor buzz marketing this ukulele company so the previous ukulele was a very inexpensive ukulele that was less than $30 this is a bit more is not a super expensive one but it's a should be a bit nicer with nicer strings it's also concert size it's a little bit bigger instead of soprano which so I can play some holiday coding songs on it next week and it comes with some accessories like a tuner right definitely gonna need right now a strap ooh there's actually a strap how interesting I wanted to find a rainbow ukulele but all of the ukuleles that had crazy weird patterns on them seem to not be of high quality if I put a sticker on this ukulele is that going to cause a problem and then this in theory is the strap do I unscrew this and so mechanically challenged how do I attach this to that maybe I don't need to worry about the strap right now but there are these two right the strap goes on these things okay so that's the strap else do I have some sort of oh my god pick case and a pic never used a pic with a ukulele oh by the way I am NOT a musician and I have extra strings please read other side before contacting or returning the ukulele please do not return it to the retailer okay alright there's some nice information this is a tuner a ceg right do I need a bat I'm ight need a battery for this shoot you may need to flip the battery around okay oh there's a battery in here there's two batteries wow you really thought of everything except for the fact that I am completely mechanically challenged push the metal through the strap hole and it should stay so which way does this go one side is the positive side this is the positive side positive side goes goes which way negative side does it say here well we'll just try it one way let's try it this way this is my best guess very little chance this is right you know what yeah this has got to be this way right it's kind of click on in there there we go okay maybe that's not right well good thing I have all these toothpicks ah must be the other way yep now the tuner is on and this should this one see ace this should be gee I still want to do that coding challenge really right a yes sorry everybody should I say for you so many of the chats on the AE a AE see I have a sexy sorry attitude alright so this is ready for a me gotta tune it bunch of Dimes hopefully it will hold its to fairly recently but this will be ready for next week so send me your I've got twenty one I should get rid of this here 2121 Christmas songs I suppose I could try to learn some Hanukkah songs or some other holiday songs for other holidays around this time of year some of them are easy they're like two chords like jingle jingle bells probably three chords right well let's go to it let's find that any song that I have in this book you can send me new lyrics so uhhuh right so now it's pretty easy gingka files so in order to solicit your donations I will be making a fool of myself and embarrassing myself next Thursday playing coding holiday theme mute coding themed holiday music on this ukulele while on a live internet stream so thank you all for tuning in thank you for watching the coding train this has been a lot of fun I don't know I feel like the Fortier thing worked out pretty well but I feel like the Fourier thing worked out pretty well but it was kind of long big thing was kind of a mess I don't know unknown gamer asks is it hard to learn ukulele in comparison to guitar easier I would guess easier because I never like I started trying to teach myself that ukulele like three months ago something like that somebody find when I first did it in a you know annakodi trade so I have I can play the piano a little bit well all right okay uh I'm exhausted I'm gonna go have some lunch answer all my emails thank you everybody for tuning in welcome new viewers if the today was the first time you watched Thank You of today was like the hundredth time you've watched thank you you can I would love to hear any feedback you can let me know on Twitter I'm gonna clean up all these to fix later oh my god and I will see you all ah in a future coding Train episode uh so also if you don't know I will make edited versions of these two coding challenges they'll come out sometime next week I have to fix my shirt now and I will uh well thank you for watching this has been wonderful I've really enjoyed being with you today and I am going to click the stop streaming button oh no it's over here someday I'll have an outro coming soon someday and here we go I know so sorry you just joined you as soon as I stop this you'll be able to watch the whole thing back if you feel so inclined
