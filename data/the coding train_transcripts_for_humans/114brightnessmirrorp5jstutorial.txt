With timestamps:

00:00 - hello and welcome to another video about
00:03 - pixels in this video I'm going to change
00:06 - this rainbow set of pixels behind me to
00:09 - the pixels from a live video stream and
00:11 - from that I'm going to show you how to
00:12 - create abstract mirror from that video
00:16 - stream based on just the brightness
00:17 - values of the pixels so let's just dive
00:20 - right in and go ahead and do this so I'm
00:22 - going to pull up the code for this one
00:25 - and the first thing I want to do is just
00:26 - add a video Dom element here so I'm
00:28 - gonna create a variable called video I'm
00:30 - going to say video equals create video
00:33 - create capture video and I'm going to
00:35 - say video dot size 320 240 so I'm going
00:40 - to just run this again and we can see
00:43 - there we go I now have my canvas with
00:46 - random pixels next to the video Dom
00:48 - element so the next thing I want to do
00:50 - is say instead of making these pixels
00:52 - random I want to actually just pull the
00:54 - pixels from the video itself so if I go
00:57 - into the code here you can see this
00:59 - particular nested loop is looking at
01:01 - every single X and every single Y
01:03 - finding the pixel giving it and setting
01:06 - its color and I covered all how this
01:07 - works in a previous video link to that
01:09 - now magically the rule but if I make a
01:13 - weird sound than a pair I hope that a
01:15 - annotation will pop up that will link
01:17 - there so so but if I want to look at the
01:20 - videos pixels a first thing I have to do
01:22 - is just say video dot load pixels video
01:26 - dot load pixels now in addition to the
01:27 - canvas pixels I want to look at the
01:29 - video pixels okay and here I can
01:31 - actually just say hey the red pixel for
01:33 - the canvas I want it to be the red pixel
01:39 - from the video and the green pixel I
01:43 - want it to be the green pixel and the
01:45 - blue pixel I want it to be the blue
01:47 - pixel and the alpha I could get the
01:49 - Alpha but I know it's 255 why bother
01:50 - looking it up let's just put the number
01:52 - 255 in there so now if I were to run
01:54 - this we're going to see look at that
01:57 - video in there and the canvas but notice
02:00 - we've got some stuttering now so it's a
02:02 - pretty expensive thing if you've worked
02:04 - in Java or C++ before you be like what I
02:08 - can look at a 320 by 240 image and look
02:10 - at all the pixels of no problem the
02:12 - truth of matter is this is a little bit
02:13 - slow in the browser so even even though
02:15 - it's working we've got some performance
02:17 - issues here so I'm gonna deal with those
02:20 - performance issues in a hidden way by
02:22 - saying like well I wanted to make
02:23 - something artistic anyway so I'm gonna
02:24 - do this at lower resolution but that's
02:27 - gonna sort of be the main thing that I'm
02:28 - gonna do but before I get to that one
02:31 - thing I want to show you how to do is
02:32 - just look at the grayscale or brightness
02:35 - value of each pixel now there is a
02:36 - function in p5 called the brightness
02:38 - function which takes the color gives you
02:40 - its brightness value I'm gonna do it
02:42 - sort of in a manual simpler way which i
02:44 - think is just going to be a bit more
02:45 - efficient here and what I'm going to do
02:47 - is I'm going to take those values I'm
02:49 - going to say R this is the red value
02:51 - from the video this is the green value
02:55 - from the video and this is the excuse me
03:01 - and this is the blue value from the
03:04 - video and one zero one and two so really
03:07 - what I could do is they are this is I'm
03:10 - just breaking this out into different
03:12 - lines of code by the way this is like
03:14 - hello image processing 101 I've got an
03:17 - image I look at it's red green and blue
03:19 - value I do something to that red green
03:21 - and blue value and set a new pixel so
03:23 - this is really image processing here if
03:24 - the thing that I'm doing to that red
03:26 - green blue value is nothing but if I
03:27 - wanted to manipulate them or swap them
03:29 - so I could go off on another tangent
03:31 - here but I'm not gonna go off on that
03:32 - other tangent what I want to do is
03:33 - actually just look at the brightness
03:35 - value and the brightness value for a
03:37 - given pixel is really just the average
03:39 - you know it could be more complex than
03:42 - this if you're like a black and white
03:43 - photographer who cares about the nuance
03:45 - of how you grayscale something but a
03:46 - simplistic thing I could do is just add
03:48 - all the RGB together and divide by 3 and
03:51 - say let me set each pixel to a
03:55 - brightness value so there we go and now
03:58 - if i refresh this you're gonna see I've
04:00 - got the image on the right live from the
04:03 - video and a kind of grayscale version
04:05 - I've taken out the colors because I'm
04:06 - making the red green and blue values all
04:08 - equal all equal to the average of their
04:10 - sum okay so this is pretty good but
04:14 - we've got this issue here where I've got
04:17 - a performance problem and I want to do
04:19 - this abstract mirror thing anyway so
04:20 - there's a there's a solution to this so
04:22 - I'm gonna come over here and talk about
04:23 - what that solution is let's say my
04:27 - window itself is 800 by 600 it's not but
04:32 - let's say how to camp sorry the canvas
04:34 - itself is 800 by 600 what if I were to
04:39 - capture my p5 video at 80 by 60 so you
04:45 - can see here and I'd you know not drawn
04:47 - perfectly to scale this is one-tenth the
04:50 - size of this one
04:52 - well it's actually not 1/10 because it's
04:55 - two-dimensional but the width is 110 the
04:58 - height is 110 so really it's one one
05:00 - hundredth the size that's right boy it's
05:03 - somebody correct me if I'm wrong the
05:04 - point of this is there is a relationship
05:07 - between these two if I take any x value
05:09 - here its corresponding place there is x
05:12 - times 10 if I take any x value here its
05:16 - corresponding place here is X divided by
05:19 - 10 so I need a new variable like scale
05:23 - which is going to keep track of that
05:25 - relationship between my source material
05:27 - and the place where I'm drawing Oh just
05:30 - not too late that I looked at light I've
05:31 - got a half blinded everything's gonna be
05:33 - okay uh-huh so but this would be a
05:36 - terrible terrible terrible name for a
05:39 - variable terrible name for a variable
05:42 - because scale is actually a built-in p5
05:45 - function so you really want to watch out
05:47 - not name your variables things that
05:49 - already exist in p5 and cause all sorts
05:51 - of problems there's all sorts of
05:52 - interesting ways around that a topic for
05:54 - another time so I'm gonna call this a V
05:56 - scale for video scale so I'm gonna come
05:59 - back over here and I'm going to go back
06:01 - to my co hello go back to my code and
06:03 - I'm going to add a variable called V
06:07 - scale and I'm gonna make it the value 16
06:10 - because I think that will kind of do the
06:13 - math work the math out nicely I'm
06:14 - actually gonna make my canvas 640 by 480
06:19 - and then I want my video size to be the
06:23 - width of the canvas divided by V scale
06:25 - you know and the height of the canvas
06:28 - divided by V scale so I want the video
06:32 - to be smaller the canvas to be bigger
06:35 - the video to be 1/16 of the canvas the
06:37 - width and height that is okay so once
06:40 - I've
06:41 - that now you know for a second here
06:44 - let's just comment this out actually
06:47 - let's just leave it in there it's gonna
06:48 - do weird things and run this you can see
06:52 - that the video is here small very low
06:57 - resolution and who knows what's going on
06:59 - in here all that broke because my math
07:01 - is now way off
07:02 - well actually what I want to do is not
07:05 - even bother to set pixels anymore I do
07:07 - want to look up pixels in the video but
07:10 - instead what I want to do is for each
07:12 - pixel now draw a big rectangle that's 16
07:14 - by 16 so here we go instead of I want to
07:19 - fill that rectangle based on that
07:21 - brightness and draw a rectangle at X at
07:24 - Y that is V scale V scale and let's run
07:31 - this and you can see whoops and let's
07:34 - get rid of this update pixels we don't
07:35 - need that anymore come on I think I
07:40 - might have frozen what did I do here
07:41 - okay well there's some mistakes here I
07:43 - just realized terrible mistakes I was
07:45 - trying to are you paying attention what
07:48 - have I missed
07:48 - so first of all now that I'm looking I'm
07:50 - looking at the videos pixels right the
07:52 - video thing this is the small thing I
07:55 - want to iterate over its pixels and do
07:57 - things bigger in the canvas so I've got
07:59 - to go back and I was being very
08:00 - loosey-goosey about all this I've got to
08:03 - look at the video height in the video
08:05 - with and in my formula in looking at the
08:07 - pixels
08:07 - I need the video with as well so now and
08:11 - I think I might have crashed the browser
08:12 - so let's close look at this look at me
08:15 - crashing you're not really doing p5
08:19 - unless you crash your browser every once
08:20 - in a while doing p5 I don't know what
08:22 - that means you're not really programming
08:23 - p5
08:26 - this was going well a second ago there
08:29 - we go so you can see something happen
08:31 - but whatever happened doesn't make any
08:33 - sense
08:33 - why I forgot a really really crucial
08:35 - detail looking at my code the x and y
08:39 - values are the x and y positions in that
08:43 - low resolution video but I want to see
08:45 - them in their in their spots in the
08:50 - actual canvas itself so we
08:54 - I need to do is multiply scale back up
08:57 - by V scale these scale and now magic of
09:03 - magic we should see and just we should
09:06 - see that I have exactly what I expected
09:08 - now you can see their performances
09:09 - pright quite good I don't know what the
09:11 - size of that is 32 24 or something like
09:13 - that it's pretty low resolution plenty
09:16 - of resolution to get some sense of the
09:18 - image and you can see I now have this
09:19 - pixelated version of myself and I could
09:22 - go back to their RGB values I could do
09:23 - you know I can start to do all sorts of
09:25 - weird things so this I think is the
09:27 - moment where I could stop and say hey
09:28 - now you be creative why don't you draw
09:30 - circles instead or strange hexagons
09:32 - excellent hexagonal shapes or other
09:34 - images to make this other kind of mosaic
09:36 - but you know text you could Patek stin
09:39 - there whatever you want to create this
09:41 - sort of mirroring effect that's abstract
09:43 - but I think something that I'll show you
09:44 - that I think is worth looking at is
09:45 - what's the sort of bare minimum and the
09:48 - reason why I chose brightness this
09:49 - brightness of each pixel is kind of the
09:50 - bare minimum value to convey the
09:54 - information of the image so what I want
09:56 - to do is just draw each pixel as a
10:00 - rectangle with its size relative to
10:02 - brightness and I can use the map
10:04 - function so let me create a variable
10:06 - called W for like width of that
10:07 - rectangle and I want to map the
10:10 - brightness of each pixel which goes
10:12 - between 0 and 255 to a size of that
10:16 - rectangle dark excuse dark pixels should
10:20 - be small rectangles bright pixels should
10:22 - be large rectangles so between 0 and V
10:24 - scale itself and then I want each pixel
10:28 - to be white and I want its size to be
10:32 - that W so you can see what I'm doing now
10:35 - is I'm saying look at every pixel in the
10:37 - low-resolution image get its brightness
10:39 - map that brightness to some size and
10:41 - draw a rectangle in the higher
10:43 - resolution canvas according to that
10:45 - particular brightness and here we go so
10:47 - let me hit refresh and you can see this
10:50 - is what I've got now so you can kind of
10:52 - see am I in there can I create a pose
10:55 - that you can recognize but if i zoom in
10:58 - here right
10:58 - zoom in really close you can see that
11:00 - what's happening is these are just
11:02 - little rectangles that are getting
11:03 - bigger with brighter pixels and smaller
11:05 - with darker pixels very
11:07 - very simple idea a little bit
11:09 - information you'll notice that the
11:10 - rectangles are kind of growing from the
11:12 - corner so really I should probably use
11:14 - if I you know was thinking about
11:16 - symmetry and design and all that sort of
11:18 - stuff that maybe somebody else knows
11:19 - about I should probably use rect mode
11:21 - Center and then if i refresh the page
11:24 - you should see that now the rectangles
11:27 - are growing from their center if i zoom
11:30 - in and kind of move around to create
11:32 - some various effects and you know
11:35 - they're a little bit it's a little bit
11:36 - off now you can see at the bottom the
11:37 - math is off so I could surprise if to
11:39 - everything to the right and down by V
11:41 - scale / - I'll let you add that part if
11:43 - you want to play around with this but I
11:44 - would say this is the basics of an idea
11:46 - of how you might look at the pixels of a
11:50 - video and redraw them in a different way
11:52 - while remaining on that grid so one of
11:54 - the next things I'm going to show you is
11:56 - how to just forget about this idea of
11:57 - the grid entirely and create a painting
11:59 - system that paints the pixels of a video
12:02 - and that's what I look at next I should
12:04 - mention one other thing though even
12:05 - though this looks correct to you right I
12:07 - stand here I move my arm to the right my
12:09 - arm moves to the right behind me a
12:11 - little bit of a lag but it moves to the
12:12 - right nonetheless it's not actually
12:14 - mirrored if I were in some kind of art
12:15 - installation and I'm looking at it as I
12:17 - move my arm to the right what I'm seeing
12:19 - on the screen is it moving to the left
12:21 - so I'm actually just gonna reverse that
12:23 - even though it'll look reversed here but
12:25 - I think this is useful for you in case
12:26 - you don't know how to do this well
12:28 - because a way to reverse it by the way
12:30 - is if I'm looking up if I'm gonna draw
12:34 - the rectangle here I could just look up
12:36 - the pixel over here and then the
12:37 - rectangle here I look up the pixel over
12:39 - here so for every pixel on the left look
12:41 - up every pixel on the right and the way
12:43 - to do that is just to say with - the x
12:45 - value minus one right because if I have
12:48 - an image here over the hair if I have an
12:51 - image that's 320 pixels wide zero should
12:54 - map to 319 one should map to 318 two
12:58 - should map to 317 etc etc so I can just
13:01 - without having to actually manipulate or
13:03 - flip the image I'm looking up every
13:04 - pixel I could just look at the other
13:06 - side a quick way of doing that is to say
13:08 - video dot width + X oh sorry sorry - x +
13:14 - 1 + y and I think parenthesis wise that
13:18 - you know just to be more clear I might
13:20 - put parentheses here but
13:21 - think it should be fine anyway so now if
13:23 - I hit refresh we can see here it's
13:27 - reversed so it looks reversed to you
13:29 - like I'm gonna give myself a high-five
13:31 - hey by five I'll do that on my own time
13:35 - later but it's actually now looks
13:38 - mirrored properly when I look at the
13:39 - screen here okay so this concludes this
13:41 - tutorial of making a brightness mirror
13:43 - with p5 GS create capture rectangle rec
13:47 - bud center and a whole bunch of other
13:48 - things and I'm gonna go over here and
13:50 - hit stop and see you soon

Cleaned transcript:

hello and welcome to another video about pixels in this video I'm going to change this rainbow set of pixels behind me to the pixels from a live video stream and from that I'm going to show you how to create abstract mirror from that video stream based on just the brightness values of the pixels so let's just dive right in and go ahead and do this so I'm going to pull up the code for this one and the first thing I want to do is just add a video Dom element here so I'm gonna create a variable called video I'm going to say video equals create video create capture video and I'm going to say video dot size 320 240 so I'm going to just run this again and we can see there we go I now have my canvas with random pixels next to the video Dom element so the next thing I want to do is say instead of making these pixels random I want to actually just pull the pixels from the video itself so if I go into the code here you can see this particular nested loop is looking at every single X and every single Y finding the pixel giving it and setting its color and I covered all how this works in a previous video link to that now magically the rule but if I make a weird sound than a pair I hope that a annotation will pop up that will link there so so but if I want to look at the videos pixels a first thing I have to do is just say video dot load pixels video dot load pixels now in addition to the canvas pixels I want to look at the video pixels okay and here I can actually just say hey the red pixel for the canvas I want it to be the red pixel from the video and the green pixel I want it to be the green pixel and the blue pixel I want it to be the blue pixel and the alpha I could get the Alpha but I know it's 255 why bother looking it up let's just put the number 255 in there so now if I were to run this we're going to see look at that video in there and the canvas but notice we've got some stuttering now so it's a pretty expensive thing if you've worked in Java or C++ before you be like what I can look at a 320 by 240 image and look at all the pixels of no problem the truth of matter is this is a little bit slow in the browser so even even though it's working we've got some performance issues here so I'm gonna deal with those performance issues in a hidden way by saying like well I wanted to make something artistic anyway so I'm gonna do this at lower resolution but that's gonna sort of be the main thing that I'm gonna do but before I get to that one thing I want to show you how to do is just look at the grayscale or brightness value of each pixel now there is a function in p5 called the brightness function which takes the color gives you its brightness value I'm gonna do it sort of in a manual simpler way which i think is just going to be a bit more efficient here and what I'm going to do is I'm going to take those values I'm going to say R this is the red value from the video this is the green value from the video and this is the excuse me and this is the blue value from the video and one zero one and two so really what I could do is they are this is I'm just breaking this out into different lines of code by the way this is like hello image processing 101 I've got an image I look at it's red green and blue value I do something to that red green and blue value and set a new pixel so this is really image processing here if the thing that I'm doing to that red green blue value is nothing but if I wanted to manipulate them or swap them so I could go off on another tangent here but I'm not gonna go off on that other tangent what I want to do is actually just look at the brightness value and the brightness value for a given pixel is really just the average you know it could be more complex than this if you're like a black and white photographer who cares about the nuance of how you grayscale something but a simplistic thing I could do is just add all the RGB together and divide by 3 and say let me set each pixel to a brightness value so there we go and now if i refresh this you're gonna see I've got the image on the right live from the video and a kind of grayscale version I've taken out the colors because I'm making the red green and blue values all equal all equal to the average of their sum okay so this is pretty good but we've got this issue here where I've got a performance problem and I want to do this abstract mirror thing anyway so there's a there's a solution to this so I'm gonna come over here and talk about what that solution is let's say my window itself is 800 by 600 it's not but let's say how to camp sorry the canvas itself is 800 by 600 what if I were to capture my p5 video at 80 by 60 so you can see here and I'd you know not drawn perfectly to scale this is onetenth the size of this one well it's actually not 1/10 because it's twodimensional but the width is 110 the height is 110 so really it's one one hundredth the size that's right boy it's somebody correct me if I'm wrong the point of this is there is a relationship between these two if I take any x value here its corresponding place there is x times 10 if I take any x value here its corresponding place here is X divided by 10 so I need a new variable like scale which is going to keep track of that relationship between my source material and the place where I'm drawing Oh just not too late that I looked at light I've got a half blinded everything's gonna be okay uhhuh so but this would be a terrible terrible terrible name for a variable terrible name for a variable because scale is actually a builtin p5 function so you really want to watch out not name your variables things that already exist in p5 and cause all sorts of problems there's all sorts of interesting ways around that a topic for another time so I'm gonna call this a V scale for video scale so I'm gonna come back over here and I'm going to go back to my co hello go back to my code and I'm going to add a variable called V scale and I'm gonna make it the value 16 because I think that will kind of do the math work the math out nicely I'm actually gonna make my canvas 640 by 480 and then I want my video size to be the width of the canvas divided by V scale you know and the height of the canvas divided by V scale so I want the video to be smaller the canvas to be bigger the video to be 1/16 of the canvas the width and height that is okay so once I've that now you know for a second here let's just comment this out actually let's just leave it in there it's gonna do weird things and run this you can see that the video is here small very low resolution and who knows what's going on in here all that broke because my math is now way off well actually what I want to do is not even bother to set pixels anymore I do want to look up pixels in the video but instead what I want to do is for each pixel now draw a big rectangle that's 16 by 16 so here we go instead of I want to fill that rectangle based on that brightness and draw a rectangle at X at Y that is V scale V scale and let's run this and you can see whoops and let's get rid of this update pixels we don't need that anymore come on I think I might have frozen what did I do here okay well there's some mistakes here I just realized terrible mistakes I was trying to are you paying attention what have I missed so first of all now that I'm looking I'm looking at the videos pixels right the video thing this is the small thing I want to iterate over its pixels and do things bigger in the canvas so I've got to go back and I was being very looseygoosey about all this I've got to look at the video height in the video with and in my formula in looking at the pixels I need the video with as well so now and I think I might have crashed the browser so let's close look at this look at me crashing you're not really doing p5 unless you crash your browser every once in a while doing p5 I don't know what that means you're not really programming p5 this was going well a second ago there we go so you can see something happen but whatever happened doesn't make any sense why I forgot a really really crucial detail looking at my code the x and y values are the x and y positions in that low resolution video but I want to see them in their in their spots in the actual canvas itself so we I need to do is multiply scale back up by V scale these scale and now magic of magic we should see and just we should see that I have exactly what I expected now you can see their performances pright quite good I don't know what the size of that is 32 24 or something like that it's pretty low resolution plenty of resolution to get some sense of the image and you can see I now have this pixelated version of myself and I could go back to their RGB values I could do you know I can start to do all sorts of weird things so this I think is the moment where I could stop and say hey now you be creative why don't you draw circles instead or strange hexagons excellent hexagonal shapes or other images to make this other kind of mosaic but you know text you could Patek stin there whatever you want to create this sort of mirroring effect that's abstract but I think something that I'll show you that I think is worth looking at is what's the sort of bare minimum and the reason why I chose brightness this brightness of each pixel is kind of the bare minimum value to convey the information of the image so what I want to do is just draw each pixel as a rectangle with its size relative to brightness and I can use the map function so let me create a variable called W for like width of that rectangle and I want to map the brightness of each pixel which goes between 0 and 255 to a size of that rectangle dark excuse dark pixels should be small rectangles bright pixels should be large rectangles so between 0 and V scale itself and then I want each pixel to be white and I want its size to be that W so you can see what I'm doing now is I'm saying look at every pixel in the lowresolution image get its brightness map that brightness to some size and draw a rectangle in the higher resolution canvas according to that particular brightness and here we go so let me hit refresh and you can see this is what I've got now so you can kind of see am I in there can I create a pose that you can recognize but if i zoom in here right zoom in really close you can see that what's happening is these are just little rectangles that are getting bigger with brighter pixels and smaller with darker pixels very very simple idea a little bit information you'll notice that the rectangles are kind of growing from the corner so really I should probably use if I you know was thinking about symmetry and design and all that sort of stuff that maybe somebody else knows about I should probably use rect mode Center and then if i refresh the page you should see that now the rectangles are growing from their center if i zoom in and kind of move around to create some various effects and you know they're a little bit it's a little bit off now you can see at the bottom the math is off so I could surprise if to everything to the right and down by V scale / I'll let you add that part if you want to play around with this but I would say this is the basics of an idea of how you might look at the pixels of a video and redraw them in a different way while remaining on that grid so one of the next things I'm going to show you is how to just forget about this idea of the grid entirely and create a painting system that paints the pixels of a video and that's what I look at next I should mention one other thing though even though this looks correct to you right I stand here I move my arm to the right my arm moves to the right behind me a little bit of a lag but it moves to the right nonetheless it's not actually mirrored if I were in some kind of art installation and I'm looking at it as I move my arm to the right what I'm seeing on the screen is it moving to the left so I'm actually just gonna reverse that even though it'll look reversed here but I think this is useful for you in case you don't know how to do this well because a way to reverse it by the way is if I'm looking up if I'm gonna draw the rectangle here I could just look up the pixel over here and then the rectangle here I look up the pixel over here so for every pixel on the left look up every pixel on the right and the way to do that is just to say with the x value minus one right because if I have an image here over the hair if I have an image that's 320 pixels wide zero should map to 319 one should map to 318 two should map to 317 etc etc so I can just without having to actually manipulate or flip the image I'm looking up every pixel I could just look at the other side a quick way of doing that is to say video dot width + X oh sorry sorry x + 1 + y and I think parenthesis wise that you know just to be more clear I might put parentheses here but think it should be fine anyway so now if I hit refresh we can see here it's reversed so it looks reversed to you like I'm gonna give myself a highfive hey by five I'll do that on my own time later but it's actually now looks mirrored properly when I look at the screen here okay so this concludes this tutorial of making a brightness mirror with p5 GS create capture rectangle rec bud center and a whole bunch of other things and I'm gonna go over here and hit stop and see you soon
