With timestamps:

00:00 - I don't know where
you arrived from,
00:01 - but if you didn't arrive
from the previous videos
00:05 - about training your
own neural network,
00:06 - you might feel a little bit lost
because what I'm going to do
00:09 - here entirely depends on
the previous few videos
00:12 - where I trained model to
classify musical notes based
00:17 - on mouse clicks in a P5 canvas.
00:20 - So what I'm going
to do in this video
00:21 - is change this word
from classification--
00:24 - I'm going to do it right
now-- to regression,
00:27 - and this is going to
drastically change
00:29 - what the neural network outputs
and how I use that output.
00:34 - But before I start changing
anything else in the code,
00:37 - let me talk about what I mean
by regression in the context
00:42 - of machine learning.
00:43 - First, let's recap
classification.
00:48 - The idea of classification
is that the neural network
00:50 - is going to receive
some input and end up
00:53 - with a discrete,
categorical output,
00:56 - meaning it's going to
assign a label C, D, or E.
01:01 - We can think of that as
there's three light bulbs.
01:07 - Are those like little
drawings of light bulbs?
01:10 - Each light bulb is associated
with one of the possible labels
01:14 - or categories, classifications.
01:16 - And if the neural
network decides
01:18 - that this particular input
corresponds to the label E,
01:21 - then maybe this light
bulb would light up.
01:24 - And you could do this.
01:25 - You could build an
Arduino with some LEDs
01:27 - and have the results of the
machine learning classification
01:30 - light up a particular LED.
01:33 - A regression, you could
think of the output
01:35 - being a slider or maybe a dial.
01:39 - As the data comes into
the neural network,
01:42 - the dial ends up at some
value between some minimum
01:46 - and maximum.
01:47 - The output is numerical
continuous output.
01:51 - So classification is one of a
discrete set of possibilities,
01:57 - and regression is any value
between a given range.
02:02 - Now you can still have multiple
outputs in a regression
02:04 - because you can have
multiple continuous values,
02:08 - but in this case, I want
to redo this example
02:11 - by having a single
output and that output
02:14 - be the frequency value.
02:16 - So if I change the
task to regression,
02:19 - now I want my output to
be tied to a frequency.
02:23 - No longer do I want during
the training process
02:25 - to give target labels.
02:26 - I want to give target
numbers so that it
02:28 - will get the number as part
of the regression output.
02:32 - So this is my code
for data collection.
02:34 - When I click the mouse,
the inputs are in x and y,
02:37 - and the target is
a target label.
02:40 - But I don't want it to be
a target label anymore.
02:43 - I want it to be a frequency.
02:49 - And I can figure out what
that target frequency
02:51 - is by looking it up in this
particular JavaScript object.
02:55 - So I can say let target
frequency equal notes
02:58 - target label, and
in fact, that's
03:01 - something that I'm
already doing down here.
03:03 - So let's replace this
with target frequency.
03:07 - Now, ordinarily, I might
remove target label
03:09 - completely as a
variable in the system
03:11 - because I don't need
the label anymore
03:12 - for the machine learning
model, not using CDE and not
03:15 - using the note name
for training the model.
03:19 - But while I'm
collecting the data,
03:22 - I still would like to
see the note C or A or G
03:26 - because I think that's
less awkward than drawing
03:29 - the frequency number
in the window.
03:32 - So crazily, I
think I've actually
03:34 - done with all that I need
for the first two steps--
03:41 - the first two steps
being collect the data
03:43 - and train the model.
03:44 - I've changed the
task to regression,
03:46 - and now I obtained the output
to a single output node that
03:54 - just has a frequency value.
03:56 - So I should be able to run
all of the bits of code
03:59 - that I did before and
have a train the model.
04:01 - Let's see if that works.
04:03 - [MUSIC PLAYING]
04:08 - All right, collected some
data-- let's train the model.
04:13 - And it worked.
04:14 - I mean, it worked
in the sense that I
04:15 - didn't don't see any
errors in the console,
04:17 - and I see a nice graph with the
loss going all the way down.
04:20 - Incidentally, the lost went
way down very, very quickly.
04:23 - / I probably don't
need 200 epochs.
04:25 - Maybe this regression problem
is a little bit easier for it
04:27 - to learn more accurately.
04:29 - Who knows?
04:29 - But it optimized very quickly.
04:31 - So now that collecting data
and training the model is done,
04:35 - I need to just do that last
stage of basically deploying
04:38 - the model and making
predictions with new data.
04:42 - And I don't think
this is going to work.
04:44 - I haven't adjusted
the code at all.
04:45 - It's still looking for
a label and all that.
04:47 - So who knows what will happen.
04:52 - First of all, it's writing the
word frequency here and just
04:55 - playing one particular note.
04:56 - So let's go look at
the prediction code
04:58 - and see what need to
adjust for a regression.
05:00 - First thing is because we're
no longer doing classification,
05:04 - we shouldn't call model.classify
with the given inputs.
05:07 - We want to change this
to model.classify.
05:10 - So predict is the function
name for a regression.
05:12 - Classify is the function
name for a classification.
05:15 - Let's collect it again
and retrain the model.
05:22 - It's trained.
05:22 - Let me click into the canvas,
and let's look and see
05:26 - what came out here.
05:29 - So this is what I get back.
05:30 - I get back an array.
05:31 - I only have one output
in this particular model,
05:34 - and so I look at the 0
element of that array.
05:37 - This is the value it predicted.
05:39 - And I have a label that in
case I had multiple things,
05:41 - I could sort of know
which goes with which.
05:43 - So based on what's here, I want
to change this to results index
05:47 - 0 .value.
05:50 - That's the frequency
that I want to play.
05:52 - Now what do I want to draw?
05:54 - Maybe I'll actually
look at the number.
05:56 - So let's actually
also draw that,
05:59 - but maybe we'll take
away the decimal place
06:02 - by using floor just
so it's less busy,
06:05 - takes up less room
in the canvas itself.
06:07 - OK, all right, let me add
that save data feature.
06:11 - Before I collect the
data, let me just change
06:13 - that for epochs to 50 because
I don't need 200 epochs.
06:17 - Now I'm going to
collect a bunch of data,
06:18 - so let me make a bunch of Cs.
06:25 - I clicked around
somewhat arbitrarily,
06:27 - but let me now
actually save this,
06:28 - so I don't have to always
collect the data again
06:30 - every single time.
06:32 - So I'm saying that
to a JSON file.
06:34 - I am now going to
train the model.
06:39 - What do I expect to happen?
06:41 - Before when I was
doing classification,
06:43 - I would expect to hear a C
when I click near the Cs and F
06:47 - when I click near the Fs.
06:48 - And I would hopefully get
something similar to that.
06:50 - Like does this sound
like a C to you?
06:54 - You can hear it's
changing, though, f.
06:58 - But look, I'm getting a
different note every time
07:10 - because the regression, once
again, remember is like a dial.
07:14 - So if I have the
notes C over here
07:17 - and I have the note
E over here, ideally,
07:21 - when I click here, I'm
going to get a note that's
07:23 - in between like D.
07:25 - But the notes are
completely irrelevant here.
07:27 - It's really all about
the numbers, the idea
07:30 - being that if I have
the number 200 here
07:32 - and I have the number 300
here, clicking in between
07:35 - is like having a
slider or a dial
07:37 - going between 200 all
the way up to 300.
07:41 - And while this works in
a somewhat obvious way
07:44 - in this two-dimensional
space with me putting
07:46 - a lot of Cs over here and
a lot of Gs over there,
07:48 - you could imagine how this
could become a much more
07:51 - sophisticated
musical instrument,
07:53 - or the output doesn't even
have to be a musical frequency,
07:57 - a sound frequency.
07:58 - There's so many possibilities.
08:00 - But now we've seen
that in addition
08:04 - to using the ML5 neural
network for classification.
08:08 - You can also use
it for regression.
08:10 - So what's next?
08:12 - Let's think of some
exercises for you to do.
08:14 - So first of all,
I right now I have
08:15 - to click around
to hear the note,
08:17 - but there's no reason why,
in this particular example,
08:19 - I couldn't move the mouse around
and have that frequency adjust.
08:24 - I don't need an
envelope anymore maybe
08:25 - on this continuously
playing a note.
08:27 - So that may be
something that you try.
08:29 - You can play around
with saving the model,
08:31 - saving the data, all that
stuff that I showed you
08:33 - in the previous two videos
with this regression example
08:36 - as well.
08:36 - But ultimately, I think what
I want to look at here--
08:39 - and I will come back and do
another video-- is what are
08:43 - some ideas for inputs that allow
for more creative or surprising
08:48 - results than just mouse clicks?
08:50 - And I think the one that I want
to show you is using Poe's net.
08:53 - So Poe's net is also a
machine learning model
08:56 - that takes an image as
the input and guesses
09:01 - where you parts
of your body are,
09:03 - so it can find your
nose and your eyes
09:05 - and your hands and your elbows--
09:06 - a whole set of key
points on a human body.
09:09 - Why not train a
model to recognize
09:12 - as the inputs certain
poses and then
09:14 - have a particular output
associated with that.
09:17 - So I'm going to
build a project using
09:19 - all of this stuff
in the next video.
09:22 - I think I'll make it
a coding challenge,
09:24 - build a project that
does pose classification
09:28 - with the ML5 neural
network library,
09:31 - or maybe it'll be
posed regression.
09:32 - I don't know.
09:33 - We'll see.
09:34 - It'll be in the next video.
09:35 - Thanks for watching,
and I look forward
09:37 - to all of your
questions and comments
09:38 - and all that sort of stuff.
09:39 - Goodbye.
09:40 - [MUSIC PLAYING]

Cleaned transcript:

I don't know where you arrived from, but if you didn't arrive from the previous videos about training your own neural network, you might feel a little bit lost because what I'm going to do here entirely depends on the previous few videos where I trained model to classify musical notes based on mouse clicks in a P5 canvas. So what I'm going to do in this video is change this word from classification I'm going to do it right now to regression, and this is going to drastically change what the neural network outputs and how I use that output. But before I start changing anything else in the code, let me talk about what I mean by regression in the context of machine learning. First, let's recap classification. The idea of classification is that the neural network is going to receive some input and end up with a discrete, categorical output, meaning it's going to assign a label C, D, or E. We can think of that as there's three light bulbs. Are those like little drawings of light bulbs? Each light bulb is associated with one of the possible labels or categories, classifications. And if the neural network decides that this particular input corresponds to the label E, then maybe this light bulb would light up. And you could do this. You could build an Arduino with some LEDs and have the results of the machine learning classification light up a particular LED. A regression, you could think of the output being a slider or maybe a dial. As the data comes into the neural network, the dial ends up at some value between some minimum and maximum. The output is numerical continuous output. So classification is one of a discrete set of possibilities, and regression is any value between a given range. Now you can still have multiple outputs in a regression because you can have multiple continuous values, but in this case, I want to redo this example by having a single output and that output be the frequency value. So if I change the task to regression, now I want my output to be tied to a frequency. No longer do I want during the training process to give target labels. I want to give target numbers so that it will get the number as part of the regression output. So this is my code for data collection. When I click the mouse, the inputs are in x and y, and the target is a target label. But I don't want it to be a target label anymore. I want it to be a frequency. And I can figure out what that target frequency is by looking it up in this particular JavaScript object. So I can say let target frequency equal notes target label, and in fact, that's something that I'm already doing down here. So let's replace this with target frequency. Now, ordinarily, I might remove target label completely as a variable in the system because I don't need the label anymore for the machine learning model, not using CDE and not using the note name for training the model. But while I'm collecting the data, I still would like to see the note C or A or G because I think that's less awkward than drawing the frequency number in the window. So crazily, I think I've actually done with all that I need for the first two steps the first two steps being collect the data and train the model. I've changed the task to regression, and now I obtained the output to a single output node that just has a frequency value. So I should be able to run all of the bits of code that I did before and have a train the model. Let's see if that works. [MUSIC PLAYING] All right, collected some data let's train the model. And it worked. I mean, it worked in the sense that I didn't don't see any errors in the console, and I see a nice graph with the loss going all the way down. Incidentally, the lost went way down very, very quickly. / I probably don't need 200 epochs. Maybe this regression problem is a little bit easier for it to learn more accurately. Who knows? But it optimized very quickly. So now that collecting data and training the model is done, I need to just do that last stage of basically deploying the model and making predictions with new data. And I don't think this is going to work. I haven't adjusted the code at all. It's still looking for a label and all that. So who knows what will happen. First of all, it's writing the word frequency here and just playing one particular note. So let's go look at the prediction code and see what need to adjust for a regression. First thing is because we're no longer doing classification, we shouldn't call model.classify with the given inputs. We want to change this to model.classify. So predict is the function name for a regression. Classify is the function name for a classification. Let's collect it again and retrain the model. It's trained. Let me click into the canvas, and let's look and see what came out here. So this is what I get back. I get back an array. I only have one output in this particular model, and so I look at the 0 element of that array. This is the value it predicted. And I have a label that in case I had multiple things, I could sort of know which goes with which. So based on what's here, I want to change this to results index 0 .value. That's the frequency that I want to play. Now what do I want to draw? Maybe I'll actually look at the number. So let's actually also draw that, but maybe we'll take away the decimal place by using floor just so it's less busy, takes up less room in the canvas itself. OK, all right, let me add that save data feature. Before I collect the data, let me just change that for epochs to 50 because I don't need 200 epochs. Now I'm going to collect a bunch of data, so let me make a bunch of Cs. I clicked around somewhat arbitrarily, but let me now actually save this, so I don't have to always collect the data again every single time. So I'm saying that to a JSON file. I am now going to train the model. What do I expect to happen? Before when I was doing classification, I would expect to hear a C when I click near the Cs and F when I click near the Fs. And I would hopefully get something similar to that. Like does this sound like a C to you? You can hear it's changing, though, f. But look, I'm getting a different note every time because the regression, once again, remember is like a dial. So if I have the notes C over here and I have the note E over here, ideally, when I click here, I'm going to get a note that's in between like D. But the notes are completely irrelevant here. It's really all about the numbers, the idea being that if I have the number 200 here and I have the number 300 here, clicking in between is like having a slider or a dial going between 200 all the way up to 300. And while this works in a somewhat obvious way in this twodimensional space with me putting a lot of Cs over here and a lot of Gs over there, you could imagine how this could become a much more sophisticated musical instrument, or the output doesn't even have to be a musical frequency, a sound frequency. There's so many possibilities. But now we've seen that in addition to using the ML5 neural network for classification. You can also use it for regression. So what's next? Let's think of some exercises for you to do. So first of all, I right now I have to click around to hear the note, but there's no reason why, in this particular example, I couldn't move the mouse around and have that frequency adjust. I don't need an envelope anymore maybe on this continuously playing a note. So that may be something that you try. You can play around with saving the model, saving the data, all that stuff that I showed you in the previous two videos with this regression example as well. But ultimately, I think what I want to look at here and I will come back and do another video is what are some ideas for inputs that allow for more creative or surprising results than just mouse clicks? And I think the one that I want to show you is using Poe's net. So Poe's net is also a machine learning model that takes an image as the input and guesses where you parts of your body are, so it can find your nose and your eyes and your hands and your elbows a whole set of key points on a human body. Why not train a model to recognize as the inputs certain poses and then have a particular output associated with that. So I'm going to build a project using all of this stuff in the next video. I think I'll make it a coding challenge, build a project that does pose classification with the ML5 neural network library, or maybe it'll be posed regression. I don't know. We'll see. It'll be in the next video. Thanks for watching, and I look forward to all of your questions and comments and all that sort of stuff. Goodbye. [MUSIC PLAYING]
