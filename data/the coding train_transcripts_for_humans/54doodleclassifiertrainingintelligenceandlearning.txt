With timestamps:

00:00 - all right now I think we're here I mean
00:02 - this is like I'm ready to actually start
00:04 - trying to do guess yeah settle down
00:07 - outside the room I'm ready to try to
00:09 - start actually doing the neural network
00:12 - training so just to kind of recap you
00:16 - know hopefully you've watched some of
00:17 - the videos that are leading up to this
00:18 - particular one but what I have right now
00:20 - is I have a JavaScript program that
00:23 - loads eight data for 800 doodles of cats
00:27 - 800 one thousand eight hundred thousand
00:30 - Turtles of cat a thousand doodles of
00:32 - trains
00:32 - a thousand doodles of rainbows all these
00:34 - doodles come from the Google quick-draw
00:36 - dataset which I covered in previous
00:38 - videos now what I've also done is
00:40 - prepare the data and separate it out
00:42 - into into eight it's about 80 percent
00:47 - twenty percent eighty eighty percent for
00:50 - training and 20 percent for testing so
00:53 - the first thing that I want to do now is
00:55 - I need to create a neural network that
00:57 - will work with this data it needs to be
01:00 - able to receive a single image as input
01:03 - with 784 pixels and it needs to give me
01:07 - an output with three numbers which each
01:10 - represent a likelihood or like a score
01:14 - of how likely it is to be of a given
01:17 - category so we can think of maybe this
01:19 - category will be cat this category will
01:22 - be rainbow and this category will be
01:26 - train and low so let's actually set
01:29 - something up because we're altom utley
01:31 - everything is everything boils down to
01:33 - numbers and we think of this as an image
01:35 - and we think of these as string labels
01:37 - but it's going to make sense for us
01:39 - ultimately to use numbers so what I'm
01:42 - going to do just really in the code
01:45 - really quickly is I'm going to add at
01:47 - the top some constants like cat equals
01:52 - zero
01:53 - rainbow equals one so this will be kind
01:57 - of a mapping rainbow what was the other
02:01 - one train equals two this will map each
02:04 - one of those categories to a number I
02:06 - already have as part of my index.html
02:10 - file a reference to mine
02:13 - network library so when I released this
02:15 - code when I released this example and
02:17 - you're looking at the video description
02:18 - to find a link to the code you will find
02:20 - it with this library included and what
02:23 - this light where the this libraries
02:25 - repository is here on github under toy
02:27 - neural network j/s and what it allows me
02:29 - to do if I go back to my main sketch is
02:32 - I can create a variable I'm gonna call
02:36 - it I'm just dare I call it an end for
02:40 - neural network I'm going to and end for
02:43 - neural network and I'm going to say and
02:47 - and equals a new neural network so what
02:54 - arguments go inside the parentheses
02:57 - there the way the library is designed
03:01 - and this is not universal is first I
03:03 - need to say how many inputs are there
03:05 - 784 second I need to say something else
03:08 - and third I just say how many outputs I
03:10 - want which in this case right now is 3
03:13 - the second argument is how many hidden
03:17 - nodes now you're gonna want to go back
03:19 - and watch my neural network build a
03:21 - neural network playlist which where I go
03:24 - much more into detail about what the
03:25 - hidden nodes are and how they work but
03:27 - right now the hidden nodes it's really
03:29 - you can think about it as the kind of
03:31 - magic in a way that's in between the
03:33 - input and the output that allows it to
03:36 - make lots that allows it to learn and so
03:38 - the more hidden nodes we have the more
03:40 - parameters there are the more things the
03:43 - more sophisticated in a way the neural
03:44 - network can be now of course there can
03:46 - even be not just the number of hidden
03:48 - nodes if there's if there's input hidden
03:52 - and output there what I'm talking about
03:55 - is sort of vertically how many hidden
03:58 - nodes are there but there could also be
04:00 - more hidden layers but this is again
04:03 - kind of beyond the scope of where we are
04:05 - currently in my videos about machine
04:07 - learning and neural networks right now
04:08 - the library I'm gonna just assume
04:10 - there's 784 inputs
04:12 - there's one input there's one set of
04:14 - inputs with 754 one set of outputs was
04:18 - three and then there is a hidden layer
04:21 - which I'm gonna arbitrarily just say I
04:23 - don't know 64 sounds like a
04:25 - good number and if maybe things aren't
04:26 - working very well maybe I'll try making
04:28 - it higher if it's running too slow maybe
04:31 - I'll try making it lower so there'll be
04:32 - less math for it to do we'll just sort
04:34 - of play around with it okay so coming
04:37 - over here I'm now gonna say 784 then I'm
04:43 - going to say I've already forgot 784 I
04:47 - guess sixty four and three so this is my
04:50 - neural network 780 four inputs three
04:53 - outputs and sixty-four hidden nodes and
05:00 - time and I think I'm good I'm good I'm
05:02 - done
05:03 - no none now what I want to do is I want
05:06 - to train it to learn I don't know why
05:10 - I'm all caps all of a sudden about cats
05:13 - so what I want to do is say four let I
05:18 - equals zero I is less than cats dot
05:21 - training dot length how many training
05:25 - data sets are there i plus plus then
05:31 - what I need to do so here's the thing by
05:34 - definition this is a cat so and I've set
05:38 - so I need to say the let me create the
05:40 - outputs okay so I just realized
05:43 - something
05:44 - here's a terrible idea that I was about
05:46 - to do let me train the neural network
05:50 - with all 1,000 cats now let me train the
05:54 - neural network with all 1,000 trains now
05:57 - let me train the neural network with all
05:59 - 1000 rainbows this is no good I need to
06:01 - tune order for this to work effectively
06:03 - I need to just be training it with all
06:05 - the training data in random order so
06:08 - it's like cat rainbow train train
06:10 - rainbow cat rainbow cat train train cat
06:13 - rainbow train so I'm gonna need to do I
06:16 - thought I prepared all the data in the
06:17 - previous video I gonna have to do some
06:19 - more work preparing the data and so one
06:21 - thing that I think that I can do is I
06:23 - can actually pass in what I'm gonna do
06:25 - here is pass in the label so this is a
06:29 - cat this is a rainbow I'm going to give
06:34 - it and this is a train I'm going to add
06:38 - another
06:39 - argument called label and what I'm going
06:41 - to do this is a little bit goofy but you
06:43 - could do this kind of stuff in
06:44 - JavaScript
06:45 - this array I'm going to just give it an
06:48 - additional property and I'm going to
06:53 - give it that label and I'm gonna call it
06:56 - label so it's a little bit goofy I'll
06:58 - I'm using the same variable name
06:59 - everywhere but I think in the end it's
07:01 - gonna make things make sense I will show
07:02 - it to you in the console and this is I -
07:05 - threshold because I need the testing
07:07 - data and this is testing also needs a
07:10 - label so look at this let me just show
07:13 - you what's gonna happen now okay now
07:15 - that I've added that in i refresh the
07:18 - sketch let's look at the Rainbows you
07:21 - can see there's still 800 training
07:23 - rainbows 200 testing if I look at the
07:26 - testing ones and I look at number two
07:29 - for example this is the array and it has
07:32 - a label of one so all of the rainbows
07:35 - should have a label of one all of the
07:40 - cats if I look at just an arbitrary 101
07:44 - have whoops and this is a weird thing
07:46 - you can do with JavaScript even though
07:48 - it's an array an array is an object and
07:51 - so I can attach some other properties to
07:53 - that object as well so the labels are in
07:54 - there
07:55 - now what I can do is I what I need to do
07:58 - is put all of them together into one big
08:01 - array and then shuffle it so what I
08:05 - should say is let training equal a blank
08:11 - array and then training equals
08:14 - training.com cat cat start raining like
08:19 - cats should join it right and then just
08:24 - join the rainbows I don't know if this
08:28 - is right and the the rainbows and what
08:34 - was the other one I got the trains
08:36 - alright so here we go so that is now
08:39 - let's let's let's see what that comes up
08:43 - with console.log training let's look at
08:46 - that there we go
08:49 - 2,400 that's 800 times 3
08:53 - yeah why is there oh yeah yeah it's 2400
08:57 - of these wonderful look and now and this
09:00 - one in here is label1
09:02 - oh this is good this is actually making
09:04 - sense okay so I have all the training
09:06 - data in here but I want to shuffle that
09:07 - I want it to be in random order but so
09:11 - how do I shuffle an array okay well
09:14 - today is our lucky day
09:16 - because it just so happens that p5 has a
09:18 - function in it to shuffle an array so
09:23 - I'm gonna say shuffle training now one
09:25 - thing that's interesting about the p5
09:26 - shuffle function and let me just show
09:28 - this to you in the breath let me just
09:30 - show you the student in the console and
09:31 - let's make sure this is true let's say I
09:33 - make an array and I say 4 1 9 10 right
09:37 - so there's an array I could say shuffle
09:40 - the array a and it's giving me back a
09:46 - new array in a randomized order but if I
09:49 - look at the original array it's still in
09:50 - the original order so I could say a
09:52 - equals shuffle a but another way I could
09:55 - do it I believe in p5 is say shuffle a
09:57 - and then pass in a second argument
09:59 - that's a boolean variable true and then
10:02 - I get this array again in a random order
10:04 - but it's actually affected it's actually
10:07 - affected that array itself this is
10:09 - similar to when I looked at array
10:11 - functions like does the array function
10:13 - map alter the array or make a new array
10:15 - this is similar here so I'm gonna say
10:17 - shuffle training true so and then I'm
10:20 - going to console.log it again so this
10:26 - was it it should be like everything at
10:28 - the beginning should just be like 1 0 oh
10:32 - no no I'm sorry
10:34 - so the problem with console.log by the
10:36 - way is it tries to be this happened to
10:38 - me all the time it tries to be smarter
10:40 - than you and so even though it's console
10:44 - logging it here I changed that array and
10:47 - it so even though it's I'm console
10:51 - logging it before I call shuffle it's
10:53 - there in the console and it's like live
10:55 - updating as the date of that object
10:57 - changes so I would have to so I think
11:00 - we're just gonna trust that this is
11:01 - working and I'm gonna take this out and
11:02 - I'm just gonna call shuffle again and
11:05 - as I look at it we should see here okay
11:07 - the first one is a two the second one is
11:10 - a zero the third one is one perfect it
11:12 - is in random shuffled order excellent so
11:16 - now I can finally go through and train
11:18 - the neural network this is my image
11:21 - drawing stuff which I don't need so I am
11:26 - going to this is making the neural
11:28 - network
11:32 - this is preparing the data making the
11:38 - neural network and now randomizing and
11:44 - now we're going to do something very
11:46 - exciting we are going to train oops
11:50 - train for one and what's the word that
11:53 - I'm going to use I'm going to add a term
11:55 - somewhere epoch which is in my view of
12:01 - the proper pronunciation of this word
12:02 - not how I like to nevermind anyway so
12:07 - epoch or epoch whatever
12:10 - so one epoch is tripping over all 800 of
12:16 - the training elements but in this case
12:19 - it's 800 times 3
12:21 - so overall 2400 so I want to say for one
12:28 - epoch I'm gonna say 4 let I equals 0 I
12:32 - is less than training dot length I plus
12:37 - plus and I'm gonna say the the data is
12:42 - training index I the label is training
12:46 - index i dot label so now what I need is
12:51 - I need the inputs and I let me say so
12:53 - inputs is training in his training index
12:56 - I is that array it is a little bit
13:02 - confusing but let's think about it let's
13:04 - just do this so for a moment just so I
13:06 - get a handle on this I'm gonna actually
13:08 - just do one thing so instead of training
13:12 - over all the training game I'm going to
13:14 - just train over one so let's console.log
13:19 - the inputs and then console.log the
13:25 - label and I just realized I've got a
13:29 - major issue which is fine it's it's it's
13:32 - a major issue but but I can I could hate
13:36 - I could do this I actually need to make
13:39 - a new array I need to make inputs
13:41 - actually has to be a new array because
13:44 - what I want to feed if you remember I
13:46 - talked about this in one of my earlier
13:47 - videos I don't want to feed in the raw
13:50 - bytes of a number 0 through 255 into the
13:54 - network I want to feed in a normalized
13:58 - number so that byte value which is an
14:01 - integer or byte between 0 and 255 go and
14:04 - divide that by 255 to get a
14:05 - floating-point number so I'm gonna make
14:07 - a new array again I'm not worrying about
14:09 - being efficient here and I'm gonna say
14:11 - let I'm gonna say 4 I'm gonna do another
14:16 - loop I'm gonna just use j j is less than
14:21 - training index i dot length right which
14:24 - i know is going to be 784 so really i
14:28 - can use that global variable j plus plus
14:31 - and I'm gonna say inputs index J equals
14:37 - training index I index J oh boy let's
14:43 - make another variable data equals
14:46 - training index I that way I can just say
14:49 - this I can say data length and now I can
14:55 - just say inputs J equals data J divided
14:59 - by 255 I can't override that data
15:02 - because that's an integer that says this
15:04 - this training array is reserved to be
15:06 - integers so now I have the inputs the
15:09 - inputs should be 784 floating-point
15:12 - numbers and then so let's look at that
15:16 - let's look at the inputs and oh let's
15:19 - look at that let's look at the inputs
15:20 - and then let's look at the label so we
15:24 - can see there are the inputs let's go
15:26 - into the middle somewhere where we have
15:28 - some color values mmm oh there we go
15:30 - so we can see
15:32 - these values have been normalized now we
15:33 - have floating point numbers between zero
15:35 - and one those are the inputs now let
15:40 - label and the label is for this
15:42 - particular one is 2 now here's the thing
15:47 - I don't what I need for the outputs is
15:50 - an array that has 3 that has 3 values in
15:55 - it it should have zeros for the category
15:59 - it is not and a 1 for the category it is
16:02 - that's often by the way we refer to as
16:04 - one hot encoding it's an array that has
16:07 - only one vector that only has one
16:09 - element with the value of 1 everything
16:11 - else is 0 so the way that I could do
16:14 - that is I can say let targets now be an
16:19 - array with 3 zeros in it and then I
16:23 - could say targets index label equals 1
16:26 - right because remember that label is a 0
16:29 - 1 or 2 so I either want this to be 1
16:31 - this to be 1 or this to be 1 and now I
16:33 - could say console dot log targets so
16:40 - let's do that let's run this we can see
16:44 - look now every time I run this I'm gonna
16:46 - get something different because remember
16:48 - it's shuffling the array a different way
16:50 - but we can see though I got a lot we
16:52 - could see this is working I'm getting an
16:54 - image with 784 pick on an image but an
16:56 - array of 784 floating-point values and
16:59 - I'm getting the target outputs so
17:02 - finally finally finally finally I can
17:04 - say neural network trained inputs
17:09 - targets so what is happening inside of
17:12 - this function so to really dive more
17:17 - deeply into what is happening inside
17:19 - this function you've got to go back and
17:21 - watch my playlist where I build the
17:24 - neural network library itself and write
17:27 - the code for the training function just
17:29 - to give you an overview an idea here is
17:32 - what we're saying is hey neural network
17:35 - whatever state you're in take this input
17:38 - data and give me some outputs and maybe
17:41 - those outputs it's going to make a total
17:43 - guess
17:47 - so those outputs are going to be some
17:49 - arbitrary numbers like 0.4 0.9 0.003
17:57 - it's gonna just come up with some but
17:59 - it's gonna be random when it starts but
18:01 - I've also given it targets and maybe I
18:05 - said the targets are 1 0 0 so this is
18:08 - its actual guess its prediction and this
18:11 - these are the targets and so what the
18:15 - neural network is able to do is
18:16 - calculate an error and the error is
18:19 - really something quite simple it's just
18:21 - the difference between and I mean
18:24 - subtraction when I say difference
18:26 - between what it guests and what the
18:27 - targets are and it uses that difference
18:30 - as a way of internally adjusting a whole
18:33 - bunch of dials which are essentially the
18:35 - weights of all the connections between
18:37 - the inputs and the hidden layer and this
18:39 - output layer so you can go back and
18:42 - watch my neural network playlist to dive
18:44 - into how that process works more deeply
18:46 - but that's basically what the library is
18:49 - doing so now in theory if I run this and
18:58 - I'm going to take out this console log
19:00 - and I'm gonna put this back in I can say
19:07 - console dot log trained for one epoch
19:18 - hmm we're stuck is it just taking a long
19:22 - time or are we really stuck it just took
19:26 - a long time so that can take awhile
19:28 - right it's slow because I haven't done
19:31 - anything to optimize my code it's just -
19:34 - and really what I might want to do is
19:36 - like sort of like put this in the draw
19:38 - loop and have some kind of animation but
19:40 - I'll come back to that I'll believe
19:42 - we'll add that in a future video I just
19:44 - want to see now what happens well let's
19:51 - try using let's try it let's evaluate it
19:52 - okay
19:53 - so let's wait actually you know what
19:54 - we're good I gotta stop here I mean we
19:57 - don't know if it's worked
19:58 - but I think this is a good point to stop
20:01 - and take a break and get ready for the
20:03 - next video because what is it that I
20:04 - need to do I now need to test how it did
20:07 - so the next thing I need to do is give
20:10 - it all of the test data don't train with
20:13 - it but just evaluate how well it does
20:15 - with all of that testing data so that's
20:17 - what I'll do in the next video then of
20:18 - course what I ultimately want to be able
20:20 - to do is I want to be able to use my
20:22 - mouse to draw a nice little train or
20:26 - rainbow or cat into this canvas right
20:28 - here and have it guess what it is okay
20:31 - so so hopefully this video about
20:36 - training has helped I know we're not
20:39 - seeing anything yet so we haven't gotten
20:41 - to the exciting part but we have now
20:43 - trained over all of the training data
20:45 - and if I looked at the neural network
20:47 - it's still there you can see it has some
20:49 - input nodes you can see it's got stuff
20:51 - in it I got to talk about the learning
20:53 - rate we'll get to all this stuff later
20:54 - okay
20:55 - see you in the next video
20:57 - [Music]
21:06 - you

Cleaned transcript:

all right now I think we're here I mean this is like I'm ready to actually start trying to do guess yeah settle down outside the room I'm ready to try to start actually doing the neural network training so just to kind of recap you know hopefully you've watched some of the videos that are leading up to this particular one but what I have right now is I have a JavaScript program that loads eight data for 800 doodles of cats 800 one thousand eight hundred thousand Turtles of cat a thousand doodles of trains a thousand doodles of rainbows all these doodles come from the Google quickdraw dataset which I covered in previous videos now what I've also done is prepare the data and separate it out into into eight it's about 80 percent twenty percent eighty eighty percent for training and 20 percent for testing so the first thing that I want to do now is I need to create a neural network that will work with this data it needs to be able to receive a single image as input with 784 pixels and it needs to give me an output with three numbers which each represent a likelihood or like a score of how likely it is to be of a given category so we can think of maybe this category will be cat this category will be rainbow and this category will be train and low so let's actually set something up because we're altom utley everything is everything boils down to numbers and we think of this as an image and we think of these as string labels but it's going to make sense for us ultimately to use numbers so what I'm going to do just really in the code really quickly is I'm going to add at the top some constants like cat equals zero rainbow equals one so this will be kind of a mapping rainbow what was the other one train equals two this will map each one of those categories to a number I already have as part of my index.html file a reference to mine network library so when I released this code when I released this example and you're looking at the video description to find a link to the code you will find it with this library included and what this light where the this libraries repository is here on github under toy neural network j/s and what it allows me to do if I go back to my main sketch is I can create a variable I'm gonna call it I'm just dare I call it an end for neural network I'm going to and end for neural network and I'm going to say and and equals a new neural network so what arguments go inside the parentheses there the way the library is designed and this is not universal is first I need to say how many inputs are there 784 second I need to say something else and third I just say how many outputs I want which in this case right now is 3 the second argument is how many hidden nodes now you're gonna want to go back and watch my neural network build a neural network playlist which where I go much more into detail about what the hidden nodes are and how they work but right now the hidden nodes it's really you can think about it as the kind of magic in a way that's in between the input and the output that allows it to make lots that allows it to learn and so the more hidden nodes we have the more parameters there are the more things the more sophisticated in a way the neural network can be now of course there can even be not just the number of hidden nodes if there's if there's input hidden and output there what I'm talking about is sort of vertically how many hidden nodes are there but there could also be more hidden layers but this is again kind of beyond the scope of where we are currently in my videos about machine learning and neural networks right now the library I'm gonna just assume there's 784 inputs there's one input there's one set of inputs with 754 one set of outputs was three and then there is a hidden layer which I'm gonna arbitrarily just say I don't know 64 sounds like a good number and if maybe things aren't working very well maybe I'll try making it higher if it's running too slow maybe I'll try making it lower so there'll be less math for it to do we'll just sort of play around with it okay so coming over here I'm now gonna say 784 then I'm going to say I've already forgot 784 I guess sixty four and three so this is my neural network 780 four inputs three outputs and sixtyfour hidden nodes and time and I think I'm good I'm good I'm done no none now what I want to do is I want to train it to learn I don't know why I'm all caps all of a sudden about cats so what I want to do is say four let I equals zero I is less than cats dot training dot length how many training data sets are there i plus plus then what I need to do so here's the thing by definition this is a cat so and I've set so I need to say the let me create the outputs okay so I just realized something here's a terrible idea that I was about to do let me train the neural network with all 1,000 cats now let me train the neural network with all 1,000 trains now let me train the neural network with all 1000 rainbows this is no good I need to tune order for this to work effectively I need to just be training it with all the training data in random order so it's like cat rainbow train train rainbow cat rainbow cat train train cat rainbow train so I'm gonna need to do I thought I prepared all the data in the previous video I gonna have to do some more work preparing the data and so one thing that I think that I can do is I can actually pass in what I'm gonna do here is pass in the label so this is a cat this is a rainbow I'm going to give it and this is a train I'm going to add another argument called label and what I'm going to do this is a little bit goofy but you could do this kind of stuff in JavaScript this array I'm going to just give it an additional property and I'm going to give it that label and I'm gonna call it label so it's a little bit goofy I'll I'm using the same variable name everywhere but I think in the end it's gonna make things make sense I will show it to you in the console and this is I threshold because I need the testing data and this is testing also needs a label so look at this let me just show you what's gonna happen now okay now that I've added that in i refresh the sketch let's look at the Rainbows you can see there's still 800 training rainbows 200 testing if I look at the testing ones and I look at number two for example this is the array and it has a label of one so all of the rainbows should have a label of one all of the cats if I look at just an arbitrary 101 have whoops and this is a weird thing you can do with JavaScript even though it's an array an array is an object and so I can attach some other properties to that object as well so the labels are in there now what I can do is I what I need to do is put all of them together into one big array and then shuffle it so what I should say is let training equal a blank array and then training equals training.com cat cat start raining like cats should join it right and then just join the rainbows I don't know if this is right and the the rainbows and what was the other one I got the trains alright so here we go so that is now let's let's let's see what that comes up with console.log training let's look at that there we go 2,400 that's 800 times 3 yeah why is there oh yeah yeah it's 2400 of these wonderful look and now and this one in here is label1 oh this is good this is actually making sense okay so I have all the training data in here but I want to shuffle that I want it to be in random order but so how do I shuffle an array okay well today is our lucky day because it just so happens that p5 has a function in it to shuffle an array so I'm gonna say shuffle training now one thing that's interesting about the p5 shuffle function and let me just show this to you in the breath let me just show you the student in the console and let's make sure this is true let's say I make an array and I say 4 1 9 10 right so there's an array I could say shuffle the array a and it's giving me back a new array in a randomized order but if I look at the original array it's still in the original order so I could say a equals shuffle a but another way I could do it I believe in p5 is say shuffle a and then pass in a second argument that's a boolean variable true and then I get this array again in a random order but it's actually affected it's actually affected that array itself this is similar to when I looked at array functions like does the array function map alter the array or make a new array this is similar here so I'm gonna say shuffle training true so and then I'm going to console.log it again so this was it it should be like everything at the beginning should just be like 1 0 oh no no I'm sorry so the problem with console.log by the way is it tries to be this happened to me all the time it tries to be smarter than you and so even though it's console logging it here I changed that array and it so even though it's I'm console logging it before I call shuffle it's there in the console and it's like live updating as the date of that object changes so I would have to so I think we're just gonna trust that this is working and I'm gonna take this out and I'm just gonna call shuffle again and as I look at it we should see here okay the first one is a two the second one is a zero the third one is one perfect it is in random shuffled order excellent so now I can finally go through and train the neural network this is my image drawing stuff which I don't need so I am going to this is making the neural network this is preparing the data making the neural network and now randomizing and now we're going to do something very exciting we are going to train oops train for one and what's the word that I'm going to use I'm going to add a term somewhere epoch which is in my view of the proper pronunciation of this word not how I like to nevermind anyway so epoch or epoch whatever so one epoch is tripping over all 800 of the training elements but in this case it's 800 times 3 so overall 2400 so I want to say for one epoch I'm gonna say 4 let I equals 0 I is less than training dot length I plus plus and I'm gonna say the the data is training index I the label is training index i dot label so now what I need is I need the inputs and I let me say so inputs is training in his training index I is that array it is a little bit confusing but let's think about it let's just do this so for a moment just so I get a handle on this I'm gonna actually just do one thing so instead of training over all the training game I'm going to just train over one so let's console.log the inputs and then console.log the label and I just realized I've got a major issue which is fine it's it's it's a major issue but but I can I could hate I could do this I actually need to make a new array I need to make inputs actually has to be a new array because what I want to feed if you remember I talked about this in one of my earlier videos I don't want to feed in the raw bytes of a number 0 through 255 into the network I want to feed in a normalized number so that byte value which is an integer or byte between 0 and 255 go and divide that by 255 to get a floatingpoint number so I'm gonna make a new array again I'm not worrying about being efficient here and I'm gonna say let I'm gonna say 4 I'm gonna do another loop I'm gonna just use j j is less than training index i dot length right which i know is going to be 784 so really i can use that global variable j plus plus and I'm gonna say inputs index J equals training index I index J oh boy let's make another variable data equals training index I that way I can just say this I can say data length and now I can just say inputs J equals data J divided by 255 I can't override that data because that's an integer that says this this training array is reserved to be integers so now I have the inputs the inputs should be 784 floatingpoint numbers and then so let's look at that let's look at the inputs and oh let's look at that let's look at the inputs and then let's look at the label so we can see there are the inputs let's go into the middle somewhere where we have some color values mmm oh there we go so we can see these values have been normalized now we have floating point numbers between zero and one those are the inputs now let label and the label is for this particular one is 2 now here's the thing I don't what I need for the outputs is an array that has 3 that has 3 values in it it should have zeros for the category it is not and a 1 for the category it is that's often by the way we refer to as one hot encoding it's an array that has only one vector that only has one element with the value of 1 everything else is 0 so the way that I could do that is I can say let targets now be an array with 3 zeros in it and then I could say targets index label equals 1 right because remember that label is a 0 1 or 2 so I either want this to be 1 this to be 1 or this to be 1 and now I could say console dot log targets so let's do that let's run this we can see look now every time I run this I'm gonna get something different because remember it's shuffling the array a different way but we can see though I got a lot we could see this is working I'm getting an image with 784 pick on an image but an array of 784 floatingpoint values and I'm getting the target outputs so finally finally finally finally I can say neural network trained inputs targets so what is happening inside of this function so to really dive more deeply into what is happening inside this function you've got to go back and watch my playlist where I build the neural network library itself and write the code for the training function just to give you an overview an idea here is what we're saying is hey neural network whatever state you're in take this input data and give me some outputs and maybe those outputs it's going to make a total guess so those outputs are going to be some arbitrary numbers like 0.4 0.9 0.003 it's gonna just come up with some but it's gonna be random when it starts but I've also given it targets and maybe I said the targets are 1 0 0 so this is its actual guess its prediction and this these are the targets and so what the neural network is able to do is calculate an error and the error is really something quite simple it's just the difference between and I mean subtraction when I say difference between what it guests and what the targets are and it uses that difference as a way of internally adjusting a whole bunch of dials which are essentially the weights of all the connections between the inputs and the hidden layer and this output layer so you can go back and watch my neural network playlist to dive into how that process works more deeply but that's basically what the library is doing so now in theory if I run this and I'm going to take out this console log and I'm gonna put this back in I can say console dot log trained for one epoch hmm we're stuck is it just taking a long time or are we really stuck it just took a long time so that can take awhile right it's slow because I haven't done anything to optimize my code it's just and really what I might want to do is like sort of like put this in the draw loop and have some kind of animation but I'll come back to that I'll believe we'll add that in a future video I just want to see now what happens well let's try using let's try it let's evaluate it okay so let's wait actually you know what we're good I gotta stop here I mean we don't know if it's worked but I think this is a good point to stop and take a break and get ready for the next video because what is it that I need to do I now need to test how it did so the next thing I need to do is give it all of the test data don't train with it but just evaluate how well it does with all of that testing data so that's what I'll do in the next video then of course what I ultimately want to be able to do is I want to be able to use my mouse to draw a nice little train or rainbow or cat into this canvas right here and have it guess what it is okay so so hopefully this video about training has helped I know we're not seeing anything yet so we haven't gotten to the exciting part but we have now trained over all of the training data and if I looked at the neural network it's still there you can see it has some input nodes you can see it's got stuff in it I got to talk about the learning rate we'll get to all this stuff later okay see you in the next video you
