With timestamps:

00:00 - hello and welcome to another coding
00:02 - challenge in this coding challenge I am
00:04 - going to implement the system you see
00:06 - over here on the right called the Lorenz
00:08 - attractor visualize that in 3d in
00:11 - processing all in one session here which
00:14 - will hopefully be about 10 to 20 minutes
00:15 - we'll see how long it takes I've got a
00:17 - timer running up there ok so before I
00:20 - start actually writing the code for it I
00:21 - want to talk about what this system is
00:23 - why does it exist why is it interesting
00:25 - and well how does the math behind it
00:27 - work on a kind of you know higher level
00:30 - and then we'll start looking at the
00:31 - formulas for it and implementing those
00:33 - formulas in code okay so Lorenz system
00:35 - you know there's a lot of resources for
00:37 - this online I'm going to put a few in
00:38 - the description of this video a Paul
00:40 - Bork site is a particularly useful one
00:42 - that I'll just mention really briefly
00:43 - but I'll go to look just at the
00:44 - Wikipedia page here which says the
00:46 - Lorenz system is a system of ordinary
00:48 - differential equations ok so the first
00:51 - thing we have to tackle here is what is
00:53 - a differential equation I could easily
00:56 - I got a timer reading here I can easily
00:58 - be here for like the rest of the day
00:59 - talking about differential equations and
01:01 - confusing myself over and over again but
01:03 - the basic idea of a differential
01:05 - equation is an equation that looks at
01:07 - how a certain variable changes according
01:11 - to other variables how the rate of
01:13 - change of a variable is affected by
01:15 - other variables in a system that rate of
01:16 - change being a differential so let me
01:19 - give you an actual practical real-world
01:21 - example that might help solidify this
01:23 - understanding let's say you have a
01:25 - spring okay so I have a spring connected
01:28 - to a wall with a bob at the bottom and
01:31 - you could think of this spring as having
01:34 - a position called Y how does its Y
01:37 - position change over time that's often
01:40 - written as the change in Y over time you
01:43 - could think of that at in programming
01:44 - speak as y equals y plus the change in Y
01:48 - right every frame of animation Y changes
01:51 - but it changes based on its the rate of
01:56 - change of Y actually changes based on
01:57 - the Y position itself if you pull it all
02:00 - the way down here how fast it's going to
02:01 - spring back is going to be much more
02:04 - than if you pull it over here so dy over
02:07 - DT the change in Y the differential of Y
02:10 - is a function of other
02:12 - variables in the system itself y itself
02:14 - this is a differential equation and so
02:16 - you know this actually comes up all the
02:18 - time in programming you have position
02:20 - you have velocity velocity being the
02:22 - derivative the rate of change of
02:23 - position this is a sickness of something
02:26 - that you'll see over and over again and
02:27 - here the Lorenz system is defined by
02:30 - these particular differential equations
02:33 - the rate of change of X over time the
02:36 - rate of change of Y over time in the
02:38 - rate of change of Z over time now these
02:40 - variables x y&z those are those defined
02:44 - the state of the system but I'm going to
02:46 - use those literally as XYZ positions to
02:50 - visualize this particular to get this
02:53 - particular structure so if I look at
02:55 - those visit the state XYZ over time and
02:59 - draw them with colors and lines I'm
03:00 - going to see this particular this
03:03 - particular system so why is this system
03:05 - interesting it turns out that the Lorenz
03:08 - system which was you know invented or
03:11 - discovered in 1963 by Edward Edward
03:14 - Edward Edward Edward Lorenz you know
03:18 - here studying medial wild row conditions
03:20 - the flow of the atmosphere this type of
03:22 - thing it's one of these chaotic
03:24 - nonlinear systems meaning whatever the
03:27 - inputs you feed into the system you feed
03:31 - some inputs into the system you
03:32 - calculate that system over time it's a
03:34 - deterministic system that will produce
03:36 - an exact result every time with the same
03:38 - inputs but if you change the input ever
03:41 - so slightly you could get a wildly
03:43 - different output it's nonlinear a tiny
03:46 - change to the input makes a large change
03:48 - of the output this is the butterfly
03:49 - effect a little butterfly flaps its
03:51 - wings changing the air just a tiny bit
03:55 - in the outside on one side of the world
03:58 - and on the other side of the world a
04:00 - giant volcano erupts okay so this is
04:02 - this idea of a nonlinear system it's
04:04 - chaotic its unpredictable and a lot of
04:07 - these types of systems exist in nature
04:09 - and this is one particular example of a
04:11 - model of that type of system okay so now
04:14 - let's look at these formula and let's
04:16 - try to figure out how we're going to
04:18 - actually make this happen in code I
04:20 - think we're ready so we know that I need
04:22 - three variables and X a Y and a Z so let
04:25 - me go to my
04:26 - program here and I'm going to close this
04:28 - one and I'm going to start writing some
04:30 - code from scratch and I am going to give
04:33 - myself an x and a y and z and I'm going
04:40 - to give them some initial values like
04:45 - that okay so we're good so I saw those
04:48 - equations I know I need an X a Y to Z so
04:50 - that's a good start now one thing I
04:52 - should mention really briefly as I'm for
04:54 - about five minutes into this is that
04:55 - notice I could find those values as
04:57 - floats if you look at examples you'll
04:59 - find on the Internet
05:00 - often the the datatype that will be used
05:03 - as a double a double being just like a
05:06 - floating-point number but having more
05:07 - decimal places and sometimes with these
05:09 - systems you really need a high degree of
05:11 - accuracy but I'm just some person here
05:14 - on the internet programming colors and
05:16 - things on the screen I don't care if
05:17 - it's a little bit not so accurate and
05:19 - float is a bit more native to processing
05:21 - so I'm going to use floats okay so now
05:24 - what I need to figure out is I want to
05:27 - kind of implement these equations so
05:29 - let's just start with X the change in X
05:32 - over time equals a Sigma that's the
05:36 - Greek letter Sigma times y minus X so
05:39 - first of all I can't use the Greek
05:42 - letter Sigma easily in my code so Sigma
05:44 - I'm going to make a row I'm going to
05:46 - make B and Beta I'm going to make C
05:48 - which I realize is a bit confusing but
05:50 - that's what I'm going to do so those are
05:51 - constants by the way I need constants
05:54 - for those values so let me go back to my
05:56 - code and I'm going to say a float a
05:57 - equals one let's start with the constant
06:00 - one now what I'm going to do is have
06:03 - this particular calculation happen over
06:06 - and over over time right it's supposed
06:08 - to happen over time taught this is the
06:10 - interesting thing about this those
06:11 - formulas the change in X over time where
06:13 - those formulas are talking about real
06:15 - life time that's continuous our time in
06:17 - processing is frame by frame by frame so
06:20 - every cycle through draw is one unit of
06:22 - time so what I'm going to say is that
06:25 - the change in X equals that constant
06:28 - times what Y minus x y minus X and now x
06:36 - equals x plus that change in
06:39 - it's really that simple right I'm just
06:42 - taking that exact formula says the
06:44 - change in X over time equals the
06:47 - constant times y minus X and now change
06:50 - in X just means change X by that value x
06:52 - equals x plus DX so I can actually start
06:54 - to go implement y&z the change in Y and
07:00 - the change in Z and now I just need to
07:03 - go back and refer to those formulas
07:04 - again x times B minus Z minus y I've got
07:08 - I hope I get this right it's hard to -
07:10 - oh sorry X X times B minus Z times y I
07:17 - get this right - why I want to have
07:24 - spaces there what's wrong here oh it
07:25 - doesn't know it B is I'll fix that later
07:26 - and now the change in Z is x times y
07:29 - minus C times Z so it's x times y minus
07:34 - C times Z so this should be good and now
07:39 - I just need to get some spacing here and
07:41 - I need to also add two more constants
07:44 - float B equals one float C equals one
07:48 - and now I need to just change XY and Z X
07:53 - Y Z X Y Z Y Z dy DZ ok so this is the
08:01 - idea I implement those formulas directly
08:03 - from the Wikipedia page to calculate the
08:05 - change in X to change it why the changes
08:07 - thee and then actually change it now
08:08 - here's the thing what is my time there's
08:13 - a weird sort of thing that I'm going to
08:14 - bring up here which is my time step so
08:18 - right now every frame is like a singular
08:22 - unit of time but the the pattern that
08:24 - I'm going to draw right is going to look
08:26 - you know I'm not going to it's going to
08:28 - look something like this and in the sort
08:31 - of continuous world I was moving this
08:32 - marker continuously but in the
08:34 - processing animation world I have point
08:36 - point point point point so how close and
08:40 - I might connect those with a line so do
08:42 - I want to see my result look like this
08:44 - or do I want to see it as more
08:46 - continuous curve how fine do I want
08:48 - those to be and that's the sort of D
08:50 - tea right if you think about whoops I'm
08:53 - going to come back over here right
08:54 - really I'm saying DX over DT equals
08:57 - something so I want to do is actually
08:58 - take that something and multiply it by
09:00 - DT what is the change of time for each
09:03 - frame so what I'm going to do is also
09:06 - introduce a variable called DT and I'm
09:09 - going to say it's like zero point I'm
09:10 - just going to make that one for right
09:11 - now but I'm going to take the whole
09:14 - thing and multiply that by DT for each
09:17 - one of these to sort of scale and I'll
09:19 - show you how different that's going to
09:21 - look as we as I continue doing this so
09:28 - now we've got those formulas implemented
09:29 - now we've got to see is anything working
09:32 - correctly here so I need a way of
09:33 - figuring that out the first way I'm
09:35 - going to do to figure that out is first
09:37 - just make sure the program runs I'm
09:39 - going to add a black background and I'm
09:41 - going to run it and okay so I don't have
09:43 - any errors that's a good sign you know
09:45 - one thing I could do is I could say
09:46 - print line XYZ so I could sort of look
09:49 - at what's being printed out now notice
09:50 - something here all I'm doing is getting
09:52 - the values of zero so there's a little
09:54 - bit of an issue here which is that that
09:56 - doesn't make any sense so I can't start
09:57 - with zero zero if I start with zero zero
10:00 - zero these formulas are only ever going
10:01 - to produce zero zero zero so I gotta
10:03 - modify the inputs a little bit and I'll
10:05 - just start with X as like 0.01 that
10:07 - should do pretty well and if I run this
10:09 - again we should see like look I'm
10:11 - getting some interesting values there
10:13 - now what are these values producing
10:14 - anything of note not really
10:16 - but why not well because my constants I
10:19 - just made my constants 1 1 and 1 so the
10:22 - Lorenz attractor works a particular way
10:25 - based on what those input constants are
10:28 - so if I go back to the Wikipedia page I
10:31 - could sort of find somewhere on here
10:34 - it's going to give me some values I
10:36 - could use like Sigma equals 10 Rho
10:39 - equals 28 and beta equals 8 divided by 3
10:42 - so let's use those constants
10:44 - I believe Sigma was a B was B was 28 and
10:50 - C was 8 divided by 3 and I'm going to do
10:54 - that just to make sure I get a floating
10:56 - point value okay so I think that should
10:59 - work like skeptical and we should see
11:03 - who not
11:04 - number okay so what have I done wrong
11:06 - here I might have to timeout this video
11:08 - Scott long was debugging Jake's and this
11:10 - might get edited out if it starts to
11:12 - take a really long time but let's look
11:14 - here so what have I done wrong here XYZ
11:20 - so let's let's comment out and just do X
11:23 - for a second and see what I get
11:29 - oops and I just want to look at X oh I
11:35 - had some numbers and then I got not a
11:36 - number for y so I might just be like one
11:38 - is a terrible number for DT because I'm
11:41 - like it's as if I'm teleporting myself
11:42 - through time massively fast so let me
11:44 - just make this 0.01 yeah okay this is
11:47 - more like what I expect it to see all
11:49 - those numbers are getting incredibly
11:51 - small I hope I implemented this right I
11:53 - have to check my formulas let's go back
11:56 - here and see if I'm getting some
11:58 - reasonable formulas ok good reason okay
12:01 - so this is better this is what I
12:03 - expected to see okay great so now I'm
12:05 - seeing some numbers that make more sense
12:07 - so my issue there was literally just
12:09 - having an apical that won't get edited
12:11 - out was just having the number 1 it just
12:14 - sort of went off to infinity super fast
12:16 - these systems um they don't have a
12:19 - recognizable repeating pattern and they
12:21 - tend towards though often tend towards
12:23 - infinity or some like non-existent value
12:25 - okay
12:26 - so let me go back to 0.01 now I want to
12:29 - be able to figure out is something
12:30 - actually working here so the first thing
12:32 - I'm going to do is just say stroke 255
12:34 - and I'm going to I'm also going to
12:36 - translate to the center of the window
12:38 - and I'm just going to draw a point and
12:41 - I'm just going to do this in 2d so I'm
12:43 - not going to worry about the Z I just
12:44 - want at least see like let me plot those
12:46 - the state of the system over time with
12:48 - XY so let's do that and AH good this is
12:52 - very good so it looks like I did the
12:53 - formulas correctly you can start to see
12:55 - like that's something there so I'm
12:56 - actually we're kind of like we're
12:58 - trucking along here I've got the Lorenz
13:00 - system like sort of visualizing right
13:02 - now so that we're really basically I'm
13:05 - done however I want to make this look
13:07 - like something I want to make this look
13:09 - like a 3d shape I want to maybe add some
13:11 - color to it I want to be able to spin
13:12 - around it I want to I need to do more
13:14 - with it maybe I want to be able to like
13:16 - explode it so that all the points
13:18 - also didn't come back so I want to do
13:19 - even though it's 13 minutes we kind of
13:21 - got the math down I want to do more with
13:24 - this in terms of the visual output of it
13:26 - so so let's go forward with that so the
13:30 - first thing that I'll do is let's just
13:31 - go ahead and work in 3d so I'm going to
13:34 - change the renderer to P 3d and then I'm
13:36 - going to add the Z point so we should
13:41 - see now that it's the same it looks
13:45 - pretty similar but there's actually a Z
13:47 - value there now one thing I want to add
13:50 - also is just I want to use the the
13:52 - processing function scale so scale is a
13:55 - transformation you can add to your scene
13:57 - to kind of like stretch it out a little
13:59 - bit I'm not going to get this through
14:00 - zooming in and out as well but I just
14:01 - want all the points to be sort of spaced
14:03 - out a bit more and look a little bigger
14:04 - so I'm going to basically scale
14:06 - everything by 5 so we can see yes so
14:08 - this looks so now I kind of have a bit
14:10 - of a closer view you can see all the
14:11 - points of the Lorenz attractor are being
14:13 - plotted in 3d now here's the thing how
14:16 - am I getting all these points on the
14:18 - screen I'm just drawing one point at a
14:19 - time well notice how my background is in
14:22 - setup so this worked just to see that
14:25 - the system was working but it's not
14:26 - going to be a very good solution for
14:28 - eventually over time be able to
14:29 - manipulate this system so what I need is
14:32 - some sort of data structure some sort of
14:34 - list that I can store all the points of
14:36 - the Lorenz attractor so let me do that
14:38 - and what I'm going to do for that is an
14:40 - ArrayList and this is where we might
14:42 - rather be in JavaScript and I'll try to
14:43 - make a JavaScript version of this as
14:45 - well I'm going to call that points I'm
14:47 - going to make that a new empty ArrayList
14:50 - so this is the syntax for something in
14:53 - Java called an ArrayList which is a
14:54 - flexibly sized array I mean I could just
14:56 - add two and I'm calling it points and
14:58 - the data that I'm going to put into that
15:00 - array list or P vector objects why do I
15:02 - want a p vector object it's because
15:04 - every single frame I'm going to say
15:07 - points add a new P vector with that x
15:10 - y&z okay so I want to add a new vector
15:14 - with x y&z to that particular array list
15:17 - and we can see that this is still
15:20 - working nothing is broken yet and what
15:22 - do I want to do now as those points are
15:24 - being added over time I want to draw all
15:26 - of them because I need to erase the
15:27 - background right so let me let me just
15:29 - show you what I mean I'm going to move
15:30 - this background to draw
15:31 - well this is actually going to produce
15:32 - kind of an interesting result because
15:35 - now you're going to see this point I
15:36 - kind of love this just moving along the
15:39 - pattern of the Lorenz attractor it's
15:41 - kind of this beautiful interesting kind
15:42 - of chaotic motion I just want to stop
15:44 - and watch it but 15 minutes in I want to
15:46 - see if we can wrap this up in about 20
15:48 - minutes so I'm going to keep going
15:49 - so what I want to do is instead of just
15:51 - drawing the existing point what I want
15:54 - to do is say for every vector V in that
16:02 - ArrayList points draw a point at V X V Y
16:07 - and V dot Z so I'm now saying instead of
16:11 - just drawing the current point loop
16:12 - through and this is known as an enhanced
16:14 - loop in Java for every vector V in the
16:16 - ArrayList points draw a point at V X V Y
16:19 - V wise be wise
16:23 - back after a technical hiccup you can
16:26 - see that the entire Lorenz attractor is
16:29 - drawn with each element as a separate
16:31 - point based on every P vector that's in
16:33 - that array so really essentially I'm
16:36 - done there you go it's in 3d that's the
16:38 - entire Lorenz attractor shape but I do
16:40 - want to add some more things to this and
16:43 - give you some exercises to think about
16:44 - what you might do with this so first
16:46 - let's just change the way we're drawing
16:47 - this a little bit one thing that I could
16:49 - do is connect all the points with a line
16:52 - so instead of drawing everything as a
16:54 - single point I could actually set the
16:56 - vertex of a shape so if I say begin
17:00 - shape before I draw all the points and
17:02 - end shape after I draw all the points
17:04 - with vertex instead of point what that's
17:07 - going to do is connect every point and
17:08 - you're going to see now that whoa it's
17:10 - doing it but it's actually trying to
17:12 - fill it in as if it's an entire shape so
17:14 - there might be some interesting things I
17:16 - could do with that but for now I'm just
17:17 - going to add no fill and we're going to
17:19 - be able to see now this continuous line
17:21 - so I could zoom into it and sort of see
17:23 - that every point is now connected right
17:26 - so now we have this continuous shape
17:27 - which is a nice start of sort of seeing
17:29 - how I could sort of tinker with how this
17:31 - is visually I could also try to come up
17:33 - with like a clever way of changing the
17:35 - colors of it I'm sure that you as a
17:37 - wonderful person on the internet with
17:39 - visual design talent will do something
17:41 - much more interesting but I'll just show
17:43 - you really quickly I already have that
17:44 - in there because I that was from the
17:46 - technical glitch but I could add
17:47 - something called color mode and I could
17:50 - change the color mode to HSB meaning hue
17:53 - saturation brightness so what I could do
17:56 - is set the stroke of with a some sort of
17:59 - hue a saturation of 255 the maximum and
18:01 - a brightness of 255 so I'm now now as I
18:04 - draw it it's going to have a particular
18:05 - kind of like turquoisey greeny hue and
18:08 - why not while I'm doing this make a
18:11 - variable start it as zero have that
18:14 - variable be the hue and for every single
18:17 - vertex increase that by some value and
18:20 - then if it goes above 255 reset it back
18:25 - to zero and now I should get a why not
18:27 - have a rainbow since this is coding
18:29 - rainbow a rainbow Lorenz attractor
18:32 - patter so you can see as the color is
18:34 - changing we've got kind of yell
18:36 - Oh red to yellow to orange that sort of
18:38 - thing so really it's the last thing I
18:40 - want to mention so what's interesting
18:42 - about what I'm doing with this
18:43 - particular strategy separate from the
18:45 - Lorenz attractor separate from the
18:48 - Lorenz attractor algorithm itself is the
18:51 - fact that every one of these points is
18:53 - saved in memory in that array so one
18:56 - thing I might just demonstrate to you is
18:57 - the fact that those points can be
19:01 - manipulated do in processing is I could
19:04 - write a vector called offset and I could
19:07 - say P vector dot random
19:09 - 3d that's going to be give me just a
19:11 - random unit vector of unit 1 of length 1
19:15 - pointed in a random direction and I
19:17 - could add that offset to every single
19:21 - vector in the Lorenz attractor now if I
19:23 - run this it's kind of going to go crazy
19:24 - because the unit of I've scaled up by
19:27 - five so you can see it's like shaking
19:29 - and jiggling like crazy so what I could
19:30 - do is maybe shrink that offset down
19:34 - quite a bit by you know make it 10% of
19:36 - the length of itself and you can see now
19:38 - if i zoom into it you can see how the
19:40 - points are kind of moving ever so
19:42 - slightly in space now I'm not suggesting
19:44 - that what I've done is a particularly
19:46 - magnificent result but what if you had
19:49 - all those points move along a sine wave
19:50 - or what if you have those points expand
19:52 - out and then come back to their original
19:54 - location are morph into another shape or
19:56 - fill in the blank of your interesting
19:58 - idea there so what I think I would like
20:01 - you to do now that you've seen how to
20:03 - program this Lorenz attractor from
20:05 - scratch if you have to do anything if
20:07 - you're just watching this video maybe
20:08 - you want to go outside and toss a
20:10 - frisbee around or eat some lunch which
20:12 - is what I kind of want to do right now
20:13 - because I'm feeling a little woozy but I
20:15 - think what would be interesting well I'd
20:17 - be excited for some of you watching this
20:18 - video to explore is what types of other
20:21 - how can you put your own design spin on
20:24 - this particular shape what happens if
20:26 - you start to manipulate the variables
20:27 - right here are the constants that I'm
20:29 - using make up your own constants look up
20:31 - on the internet some other known
20:33 - constants for the Lorenz attractor that
20:35 - produce other kinds of shapes what
20:37 - happens if you change the DT variable
20:39 - what can you mess around with these
20:41 - formulas and get something else can you
20:42 - go to poll could you go to its site and
20:44 - find a different kind of attractor
20:46 - that's not the Lorenz one there's a sort
20:48 - of there's a lot of these under the sort
20:49 - category of strange attractors so try to
20:52 - make your own version of this be
20:54 - creative play experiment don't worry too
20:57 - much and share with me your results but
20:59 - this has been hopefully something you've
21:01 - enjoyed which is programming the Lorenz
21:03 - attractor from scratch in processing in
21:06 - 3d thank you very much for watching I'm
21:08 - thrilled I finished this because you may
21:10 - not know there was about a 45-minute
21:11 - audio problem I really hope the audio is
21:13 - working right now this is actually the
21:15 - end of this video thanks for watching
21:16 - and I'll see you in the future and in
21:18 - DECT in another video goodbye

Cleaned transcript:

hello and welcome to another coding challenge in this coding challenge I am going to implement the system you see over here on the right called the Lorenz attractor visualize that in 3d in processing all in one session here which will hopefully be about 10 to 20 minutes we'll see how long it takes I've got a timer running up there ok so before I start actually writing the code for it I want to talk about what this system is why does it exist why is it interesting and well how does the math behind it work on a kind of you know higher level and then we'll start looking at the formulas for it and implementing those formulas in code okay so Lorenz system you know there's a lot of resources for this online I'm going to put a few in the description of this video a Paul Bork site is a particularly useful one that I'll just mention really briefly but I'll go to look just at the Wikipedia page here which says the Lorenz system is a system of ordinary differential equations ok so the first thing we have to tackle here is what is a differential equation I could easily I got a timer reading here I can easily be here for like the rest of the day talking about differential equations and confusing myself over and over again but the basic idea of a differential equation is an equation that looks at how a certain variable changes according to other variables how the rate of change of a variable is affected by other variables in a system that rate of change being a differential so let me give you an actual practical realworld example that might help solidify this understanding let's say you have a spring okay so I have a spring connected to a wall with a bob at the bottom and you could think of this spring as having a position called Y how does its Y position change over time that's often written as the change in Y over time you could think of that at in programming speak as y equals y plus the change in Y right every frame of animation Y changes but it changes based on its the rate of change of Y actually changes based on the Y position itself if you pull it all the way down here how fast it's going to spring back is going to be much more than if you pull it over here so dy over DT the change in Y the differential of Y is a function of other variables in the system itself y itself this is a differential equation and so you know this actually comes up all the time in programming you have position you have velocity velocity being the derivative the rate of change of position this is a sickness of something that you'll see over and over again and here the Lorenz system is defined by these particular differential equations the rate of change of X over time the rate of change of Y over time in the rate of change of Z over time now these variables x y&z those are those defined the state of the system but I'm going to use those literally as XYZ positions to visualize this particular to get this particular structure so if I look at those visit the state XYZ over time and draw them with colors and lines I'm going to see this particular this particular system so why is this system interesting it turns out that the Lorenz system which was you know invented or discovered in 1963 by Edward Edward Edward Edward Edward Lorenz you know here studying medial wild row conditions the flow of the atmosphere this type of thing it's one of these chaotic nonlinear systems meaning whatever the inputs you feed into the system you feed some inputs into the system you calculate that system over time it's a deterministic system that will produce an exact result every time with the same inputs but if you change the input ever so slightly you could get a wildly different output it's nonlinear a tiny change to the input makes a large change of the output this is the butterfly effect a little butterfly flaps its wings changing the air just a tiny bit in the outside on one side of the world and on the other side of the world a giant volcano erupts okay so this is this idea of a nonlinear system it's chaotic its unpredictable and a lot of these types of systems exist in nature and this is one particular example of a model of that type of system okay so now let's look at these formula and let's try to figure out how we're going to actually make this happen in code I think we're ready so we know that I need three variables and X a Y and a Z so let me go to my program here and I'm going to close this one and I'm going to start writing some code from scratch and I am going to give myself an x and a y and z and I'm going to give them some initial values like that okay so we're good so I saw those equations I know I need an X a Y to Z so that's a good start now one thing I should mention really briefly as I'm for about five minutes into this is that notice I could find those values as floats if you look at examples you'll find on the Internet often the the datatype that will be used as a double a double being just like a floatingpoint number but having more decimal places and sometimes with these systems you really need a high degree of accuracy but I'm just some person here on the internet programming colors and things on the screen I don't care if it's a little bit not so accurate and float is a bit more native to processing so I'm going to use floats okay so now what I need to figure out is I want to kind of implement these equations so let's just start with X the change in X over time equals a Sigma that's the Greek letter Sigma times y minus X so first of all I can't use the Greek letter Sigma easily in my code so Sigma I'm going to make a row I'm going to make B and Beta I'm going to make C which I realize is a bit confusing but that's what I'm going to do so those are constants by the way I need constants for those values so let me go back to my code and I'm going to say a float a equals one let's start with the constant one now what I'm going to do is have this particular calculation happen over and over over time right it's supposed to happen over time taught this is the interesting thing about this those formulas the change in X over time where those formulas are talking about real life time that's continuous our time in processing is frame by frame by frame so every cycle through draw is one unit of time so what I'm going to say is that the change in X equals that constant times what Y minus x y minus X and now x equals x plus that change in it's really that simple right I'm just taking that exact formula says the change in X over time equals the constant times y minus X and now change in X just means change X by that value x equals x plus DX so I can actually start to go implement y&z the change in Y and the change in Z and now I just need to go back and refer to those formulas again x times B minus Z minus y I've got I hope I get this right it's hard to oh sorry X X times B minus Z times y I get this right why I want to have spaces there what's wrong here oh it doesn't know it B is I'll fix that later and now the change in Z is x times y minus C times Z so it's x times y minus C times Z so this should be good and now I just need to get some spacing here and I need to also add two more constants float B equals one float C equals one and now I need to just change XY and Z X Y Z X Y Z Y Z dy DZ ok so this is the idea I implement those formulas directly from the Wikipedia page to calculate the change in X to change it why the changes thee and then actually change it now here's the thing what is my time there's a weird sort of thing that I'm going to bring up here which is my time step so right now every frame is like a singular unit of time but the the pattern that I'm going to draw right is going to look you know I'm not going to it's going to look something like this and in the sort of continuous world I was moving this marker continuously but in the processing animation world I have point point point point point so how close and I might connect those with a line so do I want to see my result look like this or do I want to see it as more continuous curve how fine do I want those to be and that's the sort of D tea right if you think about whoops I'm going to come back over here right really I'm saying DX over DT equals something so I want to do is actually take that something and multiply it by DT what is the change of time for each frame so what I'm going to do is also introduce a variable called DT and I'm going to say it's like zero point I'm just going to make that one for right now but I'm going to take the whole thing and multiply that by DT for each one of these to sort of scale and I'll show you how different that's going to look as we as I continue doing this so now we've got those formulas implemented now we've got to see is anything working correctly here so I need a way of figuring that out the first way I'm going to do to figure that out is first just make sure the program runs I'm going to add a black background and I'm going to run it and okay so I don't have any errors that's a good sign you know one thing I could do is I could say print line XYZ so I could sort of look at what's being printed out now notice something here all I'm doing is getting the values of zero so there's a little bit of an issue here which is that that doesn't make any sense so I can't start with zero zero if I start with zero zero zero these formulas are only ever going to produce zero zero zero so I gotta modify the inputs a little bit and I'll just start with X as like 0.01 that should do pretty well and if I run this again we should see like look I'm getting some interesting values there now what are these values producing anything of note not really but why not well because my constants I just made my constants 1 1 and 1 so the Lorenz attractor works a particular way based on what those input constants are so if I go back to the Wikipedia page I could sort of find somewhere on here it's going to give me some values I could use like Sigma equals 10 Rho equals 28 and beta equals 8 divided by 3 so let's use those constants I believe Sigma was a B was B was 28 and C was 8 divided by 3 and I'm going to do that just to make sure I get a floating point value okay so I think that should work like skeptical and we should see who not number okay so what have I done wrong here I might have to timeout this video Scott long was debugging Jake's and this might get edited out if it starts to take a really long time but let's look here so what have I done wrong here XYZ so let's let's comment out and just do X for a second and see what I get oops and I just want to look at X oh I had some numbers and then I got not a number for y so I might just be like one is a terrible number for DT because I'm like it's as if I'm teleporting myself through time massively fast so let me just make this 0.01 yeah okay this is more like what I expect it to see all those numbers are getting incredibly small I hope I implemented this right I have to check my formulas let's go back here and see if I'm getting some reasonable formulas ok good reason okay so this is better this is what I expected to see okay great so now I'm seeing some numbers that make more sense so my issue there was literally just having an apical that won't get edited out was just having the number 1 it just sort of went off to infinity super fast these systems um they don't have a recognizable repeating pattern and they tend towards though often tend towards infinity or some like nonexistent value okay so let me go back to 0.01 now I want to be able to figure out is something actually working here so the first thing I'm going to do is just say stroke 255 and I'm going to I'm also going to translate to the center of the window and I'm just going to draw a point and I'm just going to do this in 2d so I'm not going to worry about the Z I just want at least see like let me plot those the state of the system over time with XY so let's do that and AH good this is very good so it looks like I did the formulas correctly you can start to see like that's something there so I'm actually we're kind of like we're trucking along here I've got the Lorenz system like sort of visualizing right now so that we're really basically I'm done however I want to make this look like something I want to make this look like a 3d shape I want to maybe add some color to it I want to be able to spin around it I want to I need to do more with it maybe I want to be able to like explode it so that all the points also didn't come back so I want to do even though it's 13 minutes we kind of got the math down I want to do more with this in terms of the visual output of it so so let's go forward with that so the first thing that I'll do is let's just go ahead and work in 3d so I'm going to change the renderer to P 3d and then I'm going to add the Z point so we should see now that it's the same it looks pretty similar but there's actually a Z value there now one thing I want to add also is just I want to use the the processing function scale so scale is a transformation you can add to your scene to kind of like stretch it out a little bit I'm not going to get this through zooming in and out as well but I just want all the points to be sort of spaced out a bit more and look a little bigger so I'm going to basically scale everything by 5 so we can see yes so this looks so now I kind of have a bit of a closer view you can see all the points of the Lorenz attractor are being plotted in 3d now here's the thing how am I getting all these points on the screen I'm just drawing one point at a time well notice how my background is in setup so this worked just to see that the system was working but it's not going to be a very good solution for eventually over time be able to manipulate this system so what I need is some sort of data structure some sort of list that I can store all the points of the Lorenz attractor so let me do that and what I'm going to do for that is an ArrayList and this is where we might rather be in JavaScript and I'll try to make a JavaScript version of this as well I'm going to call that points I'm going to make that a new empty ArrayList so this is the syntax for something in Java called an ArrayList which is a flexibly sized array I mean I could just add two and I'm calling it points and the data that I'm going to put into that array list or P vector objects why do I want a p vector object it's because every single frame I'm going to say points add a new P vector with that x y&z okay so I want to add a new vector with x y&z to that particular array list and we can see that this is still working nothing is broken yet and what do I want to do now as those points are being added over time I want to draw all of them because I need to erase the background right so let me let me just show you what I mean I'm going to move this background to draw well this is actually going to produce kind of an interesting result because now you're going to see this point I kind of love this just moving along the pattern of the Lorenz attractor it's kind of this beautiful interesting kind of chaotic motion I just want to stop and watch it but 15 minutes in I want to see if we can wrap this up in about 20 minutes so I'm going to keep going so what I want to do is instead of just drawing the existing point what I want to do is say for every vector V in that ArrayList points draw a point at V X V Y and V dot Z so I'm now saying instead of just drawing the current point loop through and this is known as an enhanced loop in Java for every vector V in the ArrayList points draw a point at V X V Y V wise be wise back after a technical hiccup you can see that the entire Lorenz attractor is drawn with each element as a separate point based on every P vector that's in that array so really essentially I'm done there you go it's in 3d that's the entire Lorenz attractor shape but I do want to add some more things to this and give you some exercises to think about what you might do with this so first let's just change the way we're drawing this a little bit one thing that I could do is connect all the points with a line so instead of drawing everything as a single point I could actually set the vertex of a shape so if I say begin shape before I draw all the points and end shape after I draw all the points with vertex instead of point what that's going to do is connect every point and you're going to see now that whoa it's doing it but it's actually trying to fill it in as if it's an entire shape so there might be some interesting things I could do with that but for now I'm just going to add no fill and we're going to be able to see now this continuous line so I could zoom into it and sort of see that every point is now connected right so now we have this continuous shape which is a nice start of sort of seeing how I could sort of tinker with how this is visually I could also try to come up with like a clever way of changing the colors of it I'm sure that you as a wonderful person on the internet with visual design talent will do something much more interesting but I'll just show you really quickly I already have that in there because I that was from the technical glitch but I could add something called color mode and I could change the color mode to HSB meaning hue saturation brightness so what I could do is set the stroke of with a some sort of hue a saturation of 255 the maximum and a brightness of 255 so I'm now now as I draw it it's going to have a particular kind of like turquoisey greeny hue and why not while I'm doing this make a variable start it as zero have that variable be the hue and for every single vertex increase that by some value and then if it goes above 255 reset it back to zero and now I should get a why not have a rainbow since this is coding rainbow a rainbow Lorenz attractor patter so you can see as the color is changing we've got kind of yell Oh red to yellow to orange that sort of thing so really it's the last thing I want to mention so what's interesting about what I'm doing with this particular strategy separate from the Lorenz attractor separate from the Lorenz attractor algorithm itself is the fact that every one of these points is saved in memory in that array so one thing I might just demonstrate to you is the fact that those points can be manipulated do in processing is I could write a vector called offset and I could say P vector dot random 3d that's going to be give me just a random unit vector of unit 1 of length 1 pointed in a random direction and I could add that offset to every single vector in the Lorenz attractor now if I run this it's kind of going to go crazy because the unit of I've scaled up by five so you can see it's like shaking and jiggling like crazy so what I could do is maybe shrink that offset down quite a bit by you know make it 10% of the length of itself and you can see now if i zoom into it you can see how the points are kind of moving ever so slightly in space now I'm not suggesting that what I've done is a particularly magnificent result but what if you had all those points move along a sine wave or what if you have those points expand out and then come back to their original location are morph into another shape or fill in the blank of your interesting idea there so what I think I would like you to do now that you've seen how to program this Lorenz attractor from scratch if you have to do anything if you're just watching this video maybe you want to go outside and toss a frisbee around or eat some lunch which is what I kind of want to do right now because I'm feeling a little woozy but I think what would be interesting well I'd be excited for some of you watching this video to explore is what types of other how can you put your own design spin on this particular shape what happens if you start to manipulate the variables right here are the constants that I'm using make up your own constants look up on the internet some other known constants for the Lorenz attractor that produce other kinds of shapes what happens if you change the DT variable what can you mess around with these formulas and get something else can you go to poll could you go to its site and find a different kind of attractor that's not the Lorenz one there's a sort of there's a lot of these under the sort category of strange attractors so try to make your own version of this be creative play experiment don't worry too much and share with me your results but this has been hopefully something you've enjoyed which is programming the Lorenz attractor from scratch in processing in 3d thank you very much for watching I'm thrilled I finished this because you may not know there was about a 45minute audio problem I really hope the audio is working right now this is actually the end of this video thanks for watching and I'll see you in the future and in DECT in another video goodbye
