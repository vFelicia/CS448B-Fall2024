With timestamps:

00:00 - I'm back to talk
more about variables.
00:02 - It's an exciting thing that
we've done so far, right?
00:05 - This circle moves.
00:06 - It's being drawn according to
the built-in system variable,
00:10 - mouseX and mouseY.
00:12 - But this really only
scratches the surface
00:15 - of variables themselves.
00:16 - A goal here that I'm
going to get to-- it's
00:18 - going to take quite a bit,
we have a whole other topic
00:21 - called conditionals
to get there--
00:22 - is to have this ball, this
circle, move on its own.
00:25 - The reason why I said ball is
the sort of classic beginning
00:27 - example is a bouncing ball.
00:29 - What if I wanted it
to move on its own,
00:31 - and when it hits the
edge, it bounces off?
00:32 - So we'll get there.
00:33 - But we're not even at
the point yet where
00:35 - it could move on its own.
00:37 - How do I have it
move on its own?
00:38 - I need its X location to be
something that varies according
00:42 - to some algorithm.
00:43 - Start here, then go here,
then go here, then go here.
00:46 - The current algorithm is,
go wherever the mouse is.
00:50 - How do I do that?
00:52 - To realize this
vision, I need to be
00:54 - able to create my own variables.
00:58 - Right now, there is a
variable in draw, mouseX.
01:02 - But that variable will
always be the mouse location.
01:05 - To create my own variable,
there are three steps.
01:12 - The first thing that I need
to do is declare a variable.
01:15 - In truth, JavaScript is such
a friendly little language.
01:18 - [LAUGHS] It lets you
skip steps if you want.
01:20 - But I think it's
good practice to do
01:22 - that variable declaration.
01:23 - And I do that with
the key word let.
01:26 - In addition to the key word let,
I need to name the variable.
01:31 - The name can be anything I want.
01:32 - I can make up anything.
01:33 - I can call it unicorn,
or rainbow, or kitten,
01:36 - or softfurrypuppyvariable12.
01:40 - Whatever I want it to
be, I can make that up.
01:42 - I'm going to try to pick
a name that makes sense.
01:45 - I will call this circleX.
01:47 - I should note that there
are certain restrictions
01:49 - to variable names.
01:50 - I can't start with a number.
01:51 - I can't have spaces in it.
01:53 - But for the most part,
you'll figure that out just
01:56 - through trial and error.
01:57 - [LAUGHS] But it is good
practice to name your variables
01:59 - with a lowercase letter.
02:00 - And if you're joining multiple
words like happyPuppy,
02:03 - I might say happy and
then capitalized the P.
02:06 - So I'm doing circleX
with a capital X here.
02:08 - Again, these are
just conventions.
02:10 - They aren't hard-and-fast rules.
02:11 - But they will help you keep
your code organized if you
02:13 - follow these conventions.
02:14 - I also need to put
a semicolon here.
02:17 - I should also mention that
because this is JavaScript,
02:20 - there's always more than
one way to do something,
02:22 - which kind of makes
things confusing
02:23 - and a little frustrating
for me as a teacher.
02:25 - But this is the
current base way that I
02:28 - like to declare a variable
with the key word let.
02:31 - In a moment, you'll sort of
see why the word let is used.
02:34 - But in olden times
of JavaScript,
02:38 - the key word var was used.
02:40 - It actually makes a little bit
more sense, var for variable.
02:42 - And there's also a reason
why you sometimes might
02:45 - want to say, instead, const--
02:48 - const or constant.
02:50 - But I'm not going to worry
about this right now.
02:52 - I have a whole separate
video about the difference
02:53 - between let and var.
02:54 - So maybe I'll get to that later.
02:56 - But I just want
to point that out
02:57 - because you might see those in
examples you're looking at you.
02:59 - Whew!
03:00 - So that was declare.
03:01 - We're good with declare.
03:02 - The next thing I need
to do is initialize.
03:05 - I want to have this
variable, circleX.
03:07 - I want it to store
a value for me,
03:09 - a number, the X
location of the circle.
03:11 - I need to give it
something to start with.
03:14 - So in Setup, when
the program begins,
03:17 - I'm going to give
it an initial value.
03:18 - I'm initializing the circleX
variable with the value 100.
03:23 - There's also something
really notable about this.
03:25 - Every line of code
that I've written
03:27 - so far in these tutorials,
it just is function,
03:30 - parentheses, arguments;
function, parentheses,
03:32 - arguments.
03:33 - This is a different
kind of line of code.
03:35 - Now we have something called
an assignment operation.
03:40 - This is very critical.
03:41 - We're going to use
assignment operations a lot.
03:43 - It's assigning the value
100 to the variable circleX.
03:47 - Please store 100 in
the variable circleX.
03:51 - This leads me to think of how
you can think of a variable.
03:53 - It's almost like it's a bucket.
03:55 - And you're like, I put
the number 100 in it.
03:57 - Is it a box of chocolates?
03:58 - No, it's like a
Post-It note, right?
04:00 - Ah, I want to keep
track of circleX.
04:01 - I'm going to put this Post-It
note on the wall over here.
04:03 - I'm going to w rite 100 on it.
04:04 - If ever that value
changes for circleX,
04:06 - I'll cross it out and write
a different number on it.
04:09 - There's lots, I
think, for metaphors
04:10 - that you could come up
with to what a variable is.
04:12 - It's a named entity
that's storing a reference
04:17 - to some data, some information--
in this case, just a number.
04:19 - I've declared and
I've initialized.
04:21 - Now it's time to use.
04:23 - I mean, do I need
to use the variable?
04:26 - If I declare a
variable in the forest,
04:28 - and initialize it, but never
use it, does it make a sound?
04:31 - [LAUGHS] I think I've used
that in previous videos,
04:33 - and I'm just regurgitating it.
04:35 - But it's kind of an interesting
philosophical question.
04:38 - But I think the whole point
here is we declare the variable.
04:41 - We initialize it.
04:41 - Of course we want to use it.
04:43 - And so instead of mouseX,
a built-in system variable,
04:45 - I now want to use
my own variable.
04:48 - So those are all the pieces.
04:49 - Declare with let, your
own variable name.
04:52 - Initialize with a value--
04:54 - in this case, a number.
04:55 - And then use that
variable somewhere
04:57 - where you would
ordinarily just write
04:59 - the literal value itself--
05:01 - in this case, the
circleX position.
05:03 - I'm going to now add the
code that I mapped out
05:06 - over here on the
whiteboard to this sketch.
05:12 - Now I've left mouseY
in there because I
05:14 - could use multiple variables.
05:15 - But just to make things
easier to follow right now,
05:18 - let me take out mouseY and
just put it in the middle.
05:21 - So now the circle's not going to
move with the mouse, no mouseX
05:24 - and mouseY.
05:25 - Instead, the circle is where?
05:27 - At location pixel,
horizontal pixel 100.
05:31 - If I change this to 150,
it's going to move over;
05:35 - to 200, it's going to move over;
to 0, it's going to move back.
05:39 - Whatever value I
give it-- and notice
05:41 - it's only moving because the
sketch is restarting, right?
05:45 - So this is just
the initial value
05:48 - of circleX, which leads me
to fill in a little gap here
05:51 - of a couple of things.
05:52 - One is even though I have
described to you declaration,
05:56 - let circleX, and
initialization, circleX = 100
06:00 - as two separate steps, in most
cases, practically speaking,
06:04 - those can be done as one step.
06:05 - It can be combined.
06:07 - And I could just say
let circleX equal 100
06:10 - and take this out of setup.
06:13 - This, by the way, is why
the word let is used.
06:15 - I want to declare and
initialize a variable.
06:17 - I want to let it be 100.
06:19 - It's very nice, actually.
06:20 - Please, I'm going
to let you be 100.
06:23 - It's not so commanding of it.
06:25 - Let circleX equal 100.
06:27 - There are some
scenarios, and they'll
06:29 - come up, where you have to do
the initialization in setup.
06:32 - It has to do with what's
available to P5 and not,
06:36 - depending on whether you're
outside setup or inside setup.
06:39 - Hopefully, this will
become more clear
06:41 - as I get through
future examples.
06:42 - But I should note that me saying
let circleX outside of setup
06:48 - is very important.
06:50 - This is what's known
as a global variable.
06:52 - It is available to
the entire code,
06:55 - all of the events, the Setup
function and the Draw function.
06:58 - circleX can be used anywhere.
07:00 - If I were to just put, let
circleX = 100 in Setup,
07:06 - I'm getting an error.
07:07 - That error is uncaught reference
error, circleX is not defined.
07:12 - It is defined!
07:13 - I defined it there in Setup.
07:14 - But if I define a variable, if
I declare a variable in Setup
07:17 - with let, I can only
use it in Setup.
07:20 - So I want this to be
a global variable.
07:22 - This will also be
something that will
07:23 - be addressed in future videos.
07:25 - And for now, I might just
say put all your variables
07:28 - at the top.
07:28 - Make them all global.
07:30 - I imagine you might be
a little bit frustrated
07:32 - watching these videos.
07:33 - I'm talking, and
talking, and talking,
07:35 - and still the circle just
stays right there in one spot.
07:37 - After all this, it's
not even moving.
07:40 - And even so, just
moving a little bit--
07:42 - I mean, I think this is
really exciting stuff.
07:44 - But I could see how it's
a slow process here.
07:46 - We've got to build up to
more dynamic examples.
07:48 - How do I get it to move?
07:50 - Well, I was able to
change its location
07:52 - by giving it a different
initial value than restarting
07:55 - the sketch, and then a
different initial value,
07:57 - and then restarting the sketch.
07:59 - Instead, what I
want to do is I want
08:01 - to keep giving it a new
value inside of Draw.
08:03 - And if I were just
to speak this command
08:05 - in English, or in pseudocode,
I might say, increment circleX
08:09 - by 1 pixel.
08:11 - Every time through Draw--
remember, Draw is looping--
08:14 - set circleX to itself plus 1.
08:17 - Go to the next pixel.
08:18 - And in fact, I can do that
with a singular statement.
08:23 - circleX equals circleX plus 1.
08:25 - And off it goes.
08:28 - Now, this might look
like something weird.
08:30 - Like, what?
08:31 - circleX does not equal
circleX plus 1, that's wrong.
08:34 - But that's not what this it
This is an assignment operation.
08:37 - The right-hand
side is evaluated.
08:39 - So if circleX is 100,
100 plus 1 is 101.
08:43 - And then that value is
then stored in circleX.
08:47 - Then Draw loops, and it
comes back to it again.
08:50 - 101 becomes 102, and
stored back in circleX,
08:53 - and so on and so forth.
08:55 - If I change this
to 5, it's going
08:58 - to move faster, 5
pixels at a time.
09:00 - Goodbye, circle, who's
never coming back!
09:03 - So again, how do we
get it to come back?
09:05 - That's going to involve a
conditional statement coming
09:08 - in a future video.
09:09 - But for now, this is the idea.
09:12 - I want to create variables,
initialize them, and manipulate
09:17 - them as the program runs.
09:19 - Maybe I'm going to add
back function mousePressed.
09:22 - Now, notice-- before, I put
mousePressed below Draw,
09:25 - and now I put it above.
09:26 - The order of these
functions actually
09:27 - doesn't matter as
long as they are
09:28 - self-contained blocks of code.
09:30 - But here, I could say, let's
reset circleX back to 0.
09:34 - So every time I click the mouse,
the circle starts back at 0.
09:40 - This is me creating some
data, manipulating it
09:43 - as the program runs,
changing its value
09:46 - according to different events--
09:47 - interactivity right here.
09:50 - So what's next for you?
09:51 - I would say as an
exercise, before I move
09:54 - on to whatever's coming next--
09:55 - I'm not actually entirely sure.
09:57 - [LAUGHS] I mean, I know what's
coming in the long term.
09:59 - But in the very short term,
just look at the next video.
10:02 - You'll see.
10:02 - Try to make more variables.
10:03 - What if you make a variable
for the circle's Y position,
10:06 - for its color, for
the background?
10:07 - And you manipulate those.
10:08 - Can you use the sides?
10:09 - Can you have the circle
grow, and every time
10:11 - you click the mouse, have
it start back over growing?
10:15 - There's so many
things you could try,
10:17 - maybe have three
or four variables?
10:20 - And can you practice
declaring, initializing,
10:21 - and using them all?
10:22 - What kind of animations
can you make?
10:24 - I can't wait to see.
10:25 - Please share them with me.
10:26 - And I will see you
as I move forward
10:28 - and eventually get that
circle to come back to us.
10:31 - Come back, circle!
10:32 - [MUSIC PLAYING]

Cleaned transcript:

I'm back to talk more about variables. It's an exciting thing that we've done so far, right? This circle moves. It's being drawn according to the builtin system variable, mouseX and mouseY. But this really only scratches the surface of variables themselves. A goal here that I'm going to get to it's going to take quite a bit, we have a whole other topic called conditionals to get there is to have this ball, this circle, move on its own. The reason why I said ball is the sort of classic beginning example is a bouncing ball. What if I wanted it to move on its own, and when it hits the edge, it bounces off? So we'll get there. But we're not even at the point yet where it could move on its own. How do I have it move on its own? I need its X location to be something that varies according to some algorithm. Start here, then go here, then go here, then go here. The current algorithm is, go wherever the mouse is. How do I do that? To realize this vision, I need to be able to create my own variables. Right now, there is a variable in draw, mouseX. But that variable will always be the mouse location. To create my own variable, there are three steps. The first thing that I need to do is declare a variable. In truth, JavaScript is such a friendly little language. [LAUGHS] It lets you skip steps if you want. But I think it's good practice to do that variable declaration. And I do that with the key word let. In addition to the key word let, I need to name the variable. The name can be anything I want. I can make up anything. I can call it unicorn, or rainbow, or kitten, or softfurrypuppyvariable12. Whatever I want it to be, I can make that up. I'm going to try to pick a name that makes sense. I will call this circleX. I should note that there are certain restrictions to variable names. I can't start with a number. I can't have spaces in it. But for the most part, you'll figure that out just through trial and error. [LAUGHS] But it is good practice to name your variables with a lowercase letter. And if you're joining multiple words like happyPuppy, I might say happy and then capitalized the P. So I'm doing circleX with a capital X here. Again, these are just conventions. They aren't hardandfast rules. But they will help you keep your code organized if you follow these conventions. I also need to put a semicolon here. I should also mention that because this is JavaScript, there's always more than one way to do something, which kind of makes things confusing and a little frustrating for me as a teacher. But this is the current base way that I like to declare a variable with the key word let. In a moment, you'll sort of see why the word let is used. But in olden times of JavaScript, the key word var was used. It actually makes a little bit more sense, var for variable. And there's also a reason why you sometimes might want to say, instead, const const or constant. But I'm not going to worry about this right now. I have a whole separate video about the difference between let and var. So maybe I'll get to that later. But I just want to point that out because you might see those in examples you're looking at you. Whew! So that was declare. We're good with declare. The next thing I need to do is initialize. I want to have this variable, circleX. I want it to store a value for me, a number, the X location of the circle. I need to give it something to start with. So in Setup, when the program begins, I'm going to give it an initial value. I'm initializing the circleX variable with the value 100. There's also something really notable about this. Every line of code that I've written so far in these tutorials, it just is function, parentheses, arguments; function, parentheses, arguments. This is a different kind of line of code. Now we have something called an assignment operation. This is very critical. We're going to use assignment operations a lot. It's assigning the value 100 to the variable circleX. Please store 100 in the variable circleX. This leads me to think of how you can think of a variable. It's almost like it's a bucket. And you're like, I put the number 100 in it. Is it a box of chocolates? No, it's like a PostIt note, right? Ah, I want to keep track of circleX. I'm going to put this PostIt note on the wall over here. I'm going to w rite 100 on it. If ever that value changes for circleX, I'll cross it out and write a different number on it. There's lots, I think, for metaphors that you could come up with to what a variable is. It's a named entity that's storing a reference to some data, some information in this case, just a number. I've declared and I've initialized. Now it's time to use. I mean, do I need to use the variable? If I declare a variable in the forest, and initialize it, but never use it, does it make a sound? [LAUGHS] I think I've used that in previous videos, and I'm just regurgitating it. But it's kind of an interesting philosophical question. But I think the whole point here is we declare the variable. We initialize it. Of course we want to use it. And so instead of mouseX, a builtin system variable, I now want to use my own variable. So those are all the pieces. Declare with let, your own variable name. Initialize with a value in this case, a number. And then use that variable somewhere where you would ordinarily just write the literal value itself in this case, the circleX position. I'm going to now add the code that I mapped out over here on the whiteboard to this sketch. Now I've left mouseY in there because I could use multiple variables. But just to make things easier to follow right now, let me take out mouseY and just put it in the middle. So now the circle's not going to move with the mouse, no mouseX and mouseY. Instead, the circle is where? At location pixel, horizontal pixel 100. If I change this to 150, it's going to move over; to 200, it's going to move over; to 0, it's going to move back. Whatever value I give it and notice it's only moving because the sketch is restarting, right? So this is just the initial value of circleX, which leads me to fill in a little gap here of a couple of things. One is even though I have described to you declaration, let circleX, and initialization, circleX = 100 as two separate steps, in most cases, practically speaking, those can be done as one step. It can be combined. And I could just say let circleX equal 100 and take this out of setup. This, by the way, is why the word let is used. I want to declare and initialize a variable. I want to let it be 100. It's very nice, actually. Please, I'm going to let you be 100. It's not so commanding of it. Let circleX equal 100. There are some scenarios, and they'll come up, where you have to do the initialization in setup. It has to do with what's available to P5 and not, depending on whether you're outside setup or inside setup. Hopefully, this will become more clear as I get through future examples. But I should note that me saying let circleX outside of setup is very important. This is what's known as a global variable. It is available to the entire code, all of the events, the Setup function and the Draw function. circleX can be used anywhere. If I were to just put, let circleX = 100 in Setup, I'm getting an error. That error is uncaught reference error, circleX is not defined. It is defined! I defined it there in Setup. But if I define a variable, if I declare a variable in Setup with let, I can only use it in Setup. So I want this to be a global variable. This will also be something that will be addressed in future videos. And for now, I might just say put all your variables at the top. Make them all global. I imagine you might be a little bit frustrated watching these videos. I'm talking, and talking, and talking, and still the circle just stays right there in one spot. After all this, it's not even moving. And even so, just moving a little bit I mean, I think this is really exciting stuff. But I could see how it's a slow process here. We've got to build up to more dynamic examples. How do I get it to move? Well, I was able to change its location by giving it a different initial value than restarting the sketch, and then a different initial value, and then restarting the sketch. Instead, what I want to do is I want to keep giving it a new value inside of Draw. And if I were just to speak this command in English, or in pseudocode, I might say, increment circleX by 1 pixel. Every time through Draw remember, Draw is looping set circleX to itself plus 1. Go to the next pixel. And in fact, I can do that with a singular statement. circleX equals circleX plus 1. And off it goes. Now, this might look like something weird. Like, what? circleX does not equal circleX plus 1, that's wrong. But that's not what this it This is an assignment operation. The righthand side is evaluated. So if circleX is 100, 100 plus 1 is 101. And then that value is then stored in circleX. Then Draw loops, and it comes back to it again. 101 becomes 102, and stored back in circleX, and so on and so forth. If I change this to 5, it's going to move faster, 5 pixels at a time. Goodbye, circle, who's never coming back! So again, how do we get it to come back? That's going to involve a conditional statement coming in a future video. But for now, this is the idea. I want to create variables, initialize them, and manipulate them as the program runs. Maybe I'm going to add back function mousePressed. Now, notice before, I put mousePressed below Draw, and now I put it above. The order of these functions actually doesn't matter as long as they are selfcontained blocks of code. But here, I could say, let's reset circleX back to 0. So every time I click the mouse, the circle starts back at 0. This is me creating some data, manipulating it as the program runs, changing its value according to different events interactivity right here. So what's next for you? I would say as an exercise, before I move on to whatever's coming next I'm not actually entirely sure. [LAUGHS] I mean, I know what's coming in the long term. But in the very short term, just look at the next video. You'll see. Try to make more variables. What if you make a variable for the circle's Y position, for its color, for the background? And you manipulate those. Can you use the sides? Can you have the circle grow, and every time you click the mouse, have it start back over growing? There's so many things you could try, maybe have three or four variables? And can you practice declaring, initializing, and using them all? What kind of animations can you make? I can't wait to see. Please share them with me. And I will see you as I move forward and eventually get that circle to come back to us. Come back, circle! [MUSIC PLAYING]
