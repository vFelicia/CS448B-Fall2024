With timestamps:

00:00 - So we've covered the basics of object-oriented programming and we could probably
00:05 - Easily go on and on, for video after video after video, to look at all sorts of different
00:10 - scenarios and complications and different ways of..., and we will get to some of that as we start to look at
00:16 - lists and arrays
00:17 - multiple objects, but there's a few kind of key pieces that I think I want to kind of mention
00:23 - I originally intended this would be like three or four videos
00:25 - But I think I'm gonna give you a survey of a couple added features of object oriented programming that
00:30 - even if we don't get into in depth here... will get you kind of like thinking and know some terminology
00:35 - so you kind of do your own google searching or look at examples, and you know?
00:39 - Complain to me to make more videos at some point too. So the first thing that I want to mention is just the fact that
00:44 - We spent a lot of time kind of understanding the idea
00:48 - that a class is a template for making an object and
00:52 - the class has data in it
00:56 - and functionality in it.
00:58 - Some variables and some functions a key piece of information, I think to realize and think about is that this data
01:05 - doesn't just have to be a float or an int or just as a bunch of simple numbers it could be other objects and I
01:11 - Think there are a lot of scenarios where it makes sense to program this way for example
01:15 - Let's say you were making a body object so we had a class
01:20 - called body and the body conceptually has a head and
01:24 - torso and an arm and some legs and a hand right you know my terrible drawing skills aside
01:30 - You can see that this body is made up of multiple pieces
01:32 - And we might start having things like oh head x head y head size arm
01:37 - but what if we thought about this that actually what a body is is it is a
01:44 - head it is
01:46 - an arm which is like the right arm
01:51 - and it is another arm object. Which is the left arm right and so what does this mean? Oh, I need to write a class
01:59 - that is the head class, I need to write an arm clas. So this idea of a
02:03 - hierarchy that the data of an object could actually be other
02:06 - objects and later when we see when we look at lists of objects, what if I have a particle system with a thousand particles?
02:12 - I might have an object that has a list of a thousand other objects in it.
02:17 - So this is all of this this idea of nesting of creating some type of
02:21 - organizational hierarchy is something you should be thinking about as you start to build out larger and larger programs, okay?
02:25 - So I just wanted to briefly mention that another thing that I think is worth
02:29 - Kind of briefly mentioning even though you kind of don't really need it that much
02:32 - but you might see it in some examples. As you can actually write more than one constructor
02:38 - So I just want to come over here this very simple example.
02:41 - Where I just have a particle class particle class is just an x a y and a size and here we have
02:47 - two particle objects, um...
02:51 - notice the particle constructor receives three arguments a temporary x, temporary y, temporary R to fill the, those
02:58 - parameters of this object. So
03:00 - What if I wanted to do this?
03:05 - And say okay well if I specify the three arguments?
03:10 - then I want those arguments to be the...
03:14 - pieces of data for that particle object.
03:16 - But what if I don't specify any arguments then I just want you to make a random particle well?
03:20 - This is actually quite allowed and common. I could write a second constructor that takes no arguments
03:29 - where the lo... where something different happens?
03:34 - To those variables, so this is what's known as overloading I've overloaded the constructor, meaning
03:40 - I made two different versions of it one that requires three arguments one that requires no arguments.
03:45 - I could make a version that requires two arguments or one that requires four arguments
03:48 - And this is actually quite common in fact this is not just limited to the constructor after all in Processing
03:54 - you can say fill and give it an
03:57 - RGB or you can say fill and give it a just a single grayscale value.
04:02 - You could give it four arguments for an RGB and alpha and this is something that the designers of Processing have put into the API
04:10 - many different versions of the same function that
04:13 - expect different numbers of arguments. And this might be something that you think about as you start to build out
04:20 - programs yourself. So, if I come back to this... we could now... I'm going to get rid of this third particle.
04:25 - I could say hey... let me make this second particle, just be random. As you can see, whoops
04:31 - when I run it... Why is it always in the top...
04:34 - left. Something is wrong here.
04:36 - x is random width. y is random height. I don't see why that should happen...
04:42 - for p2 I'm after size....
04:46 - oh, it's... I'm sorry. I forgot that I had this extra piece of code in it.
04:50 - That's putting it where the mouse is. Sorry. So you could see that every time I run this that second particle is...
04:57 - Somewhere else. And now if I go back to what it was before
05:02 - Something like this you can see now
05:04 - I'm specifying, it's always going to be over there. So this is something, this idea of overloading is something that you can do. Okay.
05:10 - So there's one last piece here that I want to look at and
05:14 - Gonna just sort of scratch the surface of this by looking at a kind of simplified scenario.
05:18 - But this way of thinking, I think will apply to lots of things that you might do who ever you are might
05:24 - try to do at some point. So let's think back to this
05:28 - Processing sketch we have, where we have
05:31 - these two objects on the screen. How do we get these objects to communicate with each other?
05:35 - How do we know when they're overlapping or not overlapping? How do we know?
05:40 - How do they know their distance apart?
05:41 - What if we want something to happen when they hit when they get close versus when they get far?
05:45 - So this idea of having two objects communicate with each other. This is a kind of key
05:50 - concept that involves some
05:54 - techniques that are a little bit beyond just the basics of object-oriented programming. So let's look at this for a second.
06:00 - There's a few different elements here. One, so let's just take for a second. How do we know if two circles are overlapping or not?
06:06 - So each circle has a radius R1.
06:10 - This circle also has a radius R2.
06:13 - We can clearly see that these circles are not overlapping and I can clearly see...
06:20 - That these two circles are overlapping. The key piece of information. We need to know whether they're overlapping is the distance between them.
06:29 - The distance between them and
06:31 - what we can... the way we can determine if they're overlapping is if the distance...
06:37 - is greater than the sum of the two radii this being one radius, this being another. Clearly if you add these two together...
06:43 - The actual distance is longer however if we look at this radius
06:47 - plus this radius the distance is shorter than the sum of those two radii. So this is one way that we could determine if two
06:54 - shapes on the screen are overlapping. So let's come back to this program and let's sort of see what we... if we can figure that
07:01 - out here. So I can say for example. What is the distance?
07:05 - between p1 x and p1 y and p2 x and p2 y and if that distance is less than the
07:13 - sum of their radii, then let's draw a green background.
07:19 - So if we run this...
07:21 - No green background, and if I were to put them at as
07:26 - overlapping
07:29 - Yes, a green background, so let's do something where...
07:34 - aaaa...
07:35 - I can put this piece of code back in here where I can just kind of move
07:40 - this one's location as soon as I come over here. We can see we get this green
07:45 - background. And let's make the...
07:51 - let's make the...
07:54 - Stroke weight a bit bigger okay, so just so we can see here okay, so you can see we get when they're overlapped.
08:00 - No we're not but while I've done this what I haven't really done is I don't like the way that
08:06 - I did this I just kind of had some gobbledygook code out here
08:08 - That's like checking these values together, but really what I want to say is the following
08:16 - if p1 overlaps p2 then draw a bit green background. if...
08:25 - p1 dot overlaps p2...
08:32 - Then draw a background. Okay, so how do I make this happen?
08:40 - How do I write code like this? This is so nice actually?
08:44 - This this is what what is what's going on here?
08:46 - I... you know, I know we have... you know I have a display function. I can display p1 I can display p2
08:53 - I'm now saying
08:57 - if p1 overlaps p2
09:02 - Then do something. So what's going on here. Just like there's a display function. I now need to write a function called overlaps.
09:11 - And... What is the argument, what are the arguments to this function? Okay... So let's start doing this what the
09:16 - reason why I'm sorry I kind of like
09:18 - lost my train of thought here
09:20 - But the reason why this is useful is
09:23 - this way of thinking in terms of object orientation and having a...
09:27 - calling a function on object and passing another object into that function
09:30 - This is now unlocking the key to what code I actually need to write
09:33 - I need to write a function as part of the particle class called overlaps so I can actually go ahead and do that
09:44 - But I'm missing some stuff right what I said... When I say overlaps
09:48 - I'm passing in another object. So now what I need to do is
09:54 - Pass in some other object. I'm just going to call it other. So the overlaps function takes an argument
10:01 - which is some other object. This is a little bit strange conceptually because we're in the particle class and yet
10:08 - I have a function which receives another particle what you have to remember is the idea here is you could call the overlaps function on
10:15 - this particle in reference to another particle. You could actually check if a particle overlaps itself
10:21 - But that would be kind of conceptually flawed the other thing that I think is key here is...
10:26 - Notice this function is inside an if statement so p.overlaps p2 has to evaluate to true or false.
10:34 - Right it either does or a doesn't. Which means that this function...
10:39 - needs to return a boolean varia...
10:42 - a boolean value. So the function overlaps receives another particle and answers the question am I overlapping that other particle?
10:49 - Yes, or no, return true, or false
10:52 - Just for right now. I could just say let's not bother to implement this let's just write return true in there...
10:58 - and I'm going to take this out of here and
11:00 - Get rid of this stuff we worked out before...
11:05 - and now I'm going to run this and of course it's always green because I'm always returning true.
11:10 - Now I could go back to this function, and I could return false and now it's never going to be green.
11:16 - But this isn't what I want to do obviously. In here, now
11:19 - here is the place where I want to write that code where the object that I am right now the particle object
11:24 - communicates with the other particle object. So...
11:28 - How do we do that? I want the distance between what?
11:32 - Okay, I'm a particle object. I'm in the particle class. I want my distance between my location... x comma y and
11:41 - Then I want the distance between my location and some other particle that's coming in as the in the argument
11:47 - its location other x other not y. And then if that distance is less than this my radius plus the other radius
11:55 - return true otherwise
11:58 - return false. So this is now a function
12:03 - inside of an object which receives another object as its argument so that the two objects can talk to each other. They could compare their
12:10 - locations they can compare their size and if we run this
12:14 - Now you can see it's working again
12:18 - The reason why this is so useful and it's not really emphasized here. Is that...
12:25 - I could now check if I have five different particles
12:27 - I could just check if p2 overlaps p5 or if p3 overlaps p1 or p4 overlaps p2.
12:33 - So I have a generic function that checks if
12:38 - one object overlaps another object. Now, I realize in making this quick example
12:43 - this is a little bit tricky, and it might actually been a little bit simpler if I had you know
12:48 - particle objects and bubble objects and the particles check if they're overlapping the bubbles because then you wouldn't have this thing where you have a
12:54 - Single object checking another object of the same type which can be a little tricky
12:59 - But this is kind of a way of thinking that you I think want to get used to so as an exercise
13:05 - I might give you the following exercise
13:08 - Take this idea
13:10 - re-implement this basically this exact same code and
13:14 - Instead of having two particles have three and can you make something different happen when these two overlap versus when these
13:21 - other two overlap and
13:24 - I think that would be kind of a good
13:26 - A good way to start so how could you have one how could you have maybe try four particles or five but
13:32 - particles and have different things happen with different combinations of
13:35 - overlapping and
13:36 - see how that goes for you. You might also want to file this in the back of your mind that later when we get to
13:41 - looking at arrays and lists of objects. How would you have every particle checking if it's overlapping every other particle?
13:48 - Which is kind of a tricky problem.
13:50 - Okay, hopefully this video. Did some good... and I'm going to stop now.

Cleaned transcript:

So we've covered the basics of objectoriented programming and we could probably Easily go on and on, for video after video after video, to look at all sorts of different scenarios and complications and different ways of..., and we will get to some of that as we start to look at lists and arrays multiple objects, but there's a few kind of key pieces that I think I want to kind of mention I originally intended this would be like three or four videos But I think I'm gonna give you a survey of a couple added features of object oriented programming that even if we don't get into in depth here... will get you kind of like thinking and know some terminology so you kind of do your own google searching or look at examples, and you know? Complain to me to make more videos at some point too. So the first thing that I want to mention is just the fact that We spent a lot of time kind of understanding the idea that a class is a template for making an object and the class has data in it and functionality in it. Some variables and some functions a key piece of information, I think to realize and think about is that this data doesn't just have to be a float or an int or just as a bunch of simple numbers it could be other objects and I Think there are a lot of scenarios where it makes sense to program this way for example Let's say you were making a body object so we had a class called body and the body conceptually has a head and torso and an arm and some legs and a hand right you know my terrible drawing skills aside You can see that this body is made up of multiple pieces And we might start having things like oh head x head y head size arm but what if we thought about this that actually what a body is is it is a head it is an arm which is like the right arm and it is another arm object. Which is the left arm right and so what does this mean? Oh, I need to write a class that is the head class, I need to write an arm clas. So this idea of a hierarchy that the data of an object could actually be other objects and later when we see when we look at lists of objects, what if I have a particle system with a thousand particles? I might have an object that has a list of a thousand other objects in it. So this is all of this this idea of nesting of creating some type of organizational hierarchy is something you should be thinking about as you start to build out larger and larger programs, okay? So I just wanted to briefly mention that another thing that I think is worth Kind of briefly mentioning even though you kind of don't really need it that much but you might see it in some examples. As you can actually write more than one constructor So I just want to come over here this very simple example. Where I just have a particle class particle class is just an x a y and a size and here we have two particle objects, um... notice the particle constructor receives three arguments a temporary x, temporary y, temporary R to fill the, those parameters of this object. So What if I wanted to do this? And say okay well if I specify the three arguments? then I want those arguments to be the... pieces of data for that particle object. But what if I don't specify any arguments then I just want you to make a random particle well? This is actually quite allowed and common. I could write a second constructor that takes no arguments where the lo... where something different happens? To those variables, so this is what's known as overloading I've overloaded the constructor, meaning I made two different versions of it one that requires three arguments one that requires no arguments. I could make a version that requires two arguments or one that requires four arguments And this is actually quite common in fact this is not just limited to the constructor after all in Processing you can say fill and give it an RGB or you can say fill and give it a just a single grayscale value. You could give it four arguments for an RGB and alpha and this is something that the designers of Processing have put into the API many different versions of the same function that expect different numbers of arguments. And this might be something that you think about as you start to build out programs yourself. So, if I come back to this... we could now... I'm going to get rid of this third particle. I could say hey... let me make this second particle, just be random. As you can see, whoops when I run it... Why is it always in the top... left. Something is wrong here. x is random width. y is random height. I don't see why that should happen... for p2 I'm after size.... oh, it's... I'm sorry. I forgot that I had this extra piece of code in it. That's putting it where the mouse is. Sorry. So you could see that every time I run this that second particle is... Somewhere else. And now if I go back to what it was before Something like this you can see now I'm specifying, it's always going to be over there. So this is something, this idea of overloading is something that you can do. Okay. So there's one last piece here that I want to look at and Gonna just sort of scratch the surface of this by looking at a kind of simplified scenario. But this way of thinking, I think will apply to lots of things that you might do who ever you are might try to do at some point. So let's think back to this Processing sketch we have, where we have these two objects on the screen. How do we get these objects to communicate with each other? How do we know when they're overlapping or not overlapping? How do we know? How do they know their distance apart? What if we want something to happen when they hit when they get close versus when they get far? So this idea of having two objects communicate with each other. This is a kind of key concept that involves some techniques that are a little bit beyond just the basics of objectoriented programming. So let's look at this for a second. There's a few different elements here. One, so let's just take for a second. How do we know if two circles are overlapping or not? So each circle has a radius R1. This circle also has a radius R2. We can clearly see that these circles are not overlapping and I can clearly see... That these two circles are overlapping. The key piece of information. We need to know whether they're overlapping is the distance between them. The distance between them and what we can... the way we can determine if they're overlapping is if the distance... is greater than the sum of the two radii this being one radius, this being another. Clearly if you add these two together... The actual distance is longer however if we look at this radius plus this radius the distance is shorter than the sum of those two radii. So this is one way that we could determine if two shapes on the screen are overlapping. So let's come back to this program and let's sort of see what we... if we can figure that out here. So I can say for example. What is the distance? between p1 x and p1 y and p2 x and p2 y and if that distance is less than the sum of their radii, then let's draw a green background. So if we run this... No green background, and if I were to put them at as overlapping Yes, a green background, so let's do something where... aaaa... I can put this piece of code back in here where I can just kind of move this one's location as soon as I come over here. We can see we get this green background. And let's make the... let's make the... Stroke weight a bit bigger okay, so just so we can see here okay, so you can see we get when they're overlapped. No we're not but while I've done this what I haven't really done is I don't like the way that I did this I just kind of had some gobbledygook code out here That's like checking these values together, but really what I want to say is the following if p1 overlaps p2 then draw a bit green background. if... p1 dot overlaps p2... Then draw a background. Okay, so how do I make this happen? How do I write code like this? This is so nice actually? This this is what what is what's going on here? I... you know, I know we have... you know I have a display function. I can display p1 I can display p2 I'm now saying if p1 overlaps p2 Then do something. So what's going on here. Just like there's a display function. I now need to write a function called overlaps. And... What is the argument, what are the arguments to this function? Okay... So let's start doing this what the reason why I'm sorry I kind of like lost my train of thought here But the reason why this is useful is this way of thinking in terms of object orientation and having a... calling a function on object and passing another object into that function This is now unlocking the key to what code I actually need to write I need to write a function as part of the particle class called overlaps so I can actually go ahead and do that But I'm missing some stuff right what I said... When I say overlaps I'm passing in another object. So now what I need to do is Pass in some other object. I'm just going to call it other. So the overlaps function takes an argument which is some other object. This is a little bit strange conceptually because we're in the particle class and yet I have a function which receives another particle what you have to remember is the idea here is you could call the overlaps function on this particle in reference to another particle. You could actually check if a particle overlaps itself But that would be kind of conceptually flawed the other thing that I think is key here is... Notice this function is inside an if statement so p.overlaps p2 has to evaluate to true or false. Right it either does or a doesn't. Which means that this function... needs to return a boolean varia... a boolean value. So the function overlaps receives another particle and answers the question am I overlapping that other particle? Yes, or no, return true, or false Just for right now. I could just say let's not bother to implement this let's just write return true in there... and I'm going to take this out of here and Get rid of this stuff we worked out before... and now I'm going to run this and of course it's always green because I'm always returning true. Now I could go back to this function, and I could return false and now it's never going to be green. But this isn't what I want to do obviously. In here, now here is the place where I want to write that code where the object that I am right now the particle object communicates with the other particle object. So... How do we do that? I want the distance between what? Okay, I'm a particle object. I'm in the particle class. I want my distance between my location... x comma y and Then I want the distance between my location and some other particle that's coming in as the in the argument its location other x other not y. And then if that distance is less than this my radius plus the other radius return true otherwise return false. So this is now a function inside of an object which receives another object as its argument so that the two objects can talk to each other. They could compare their locations they can compare their size and if we run this Now you can see it's working again The reason why this is so useful and it's not really emphasized here. Is that... I could now check if I have five different particles I could just check if p2 overlaps p5 or if p3 overlaps p1 or p4 overlaps p2. So I have a generic function that checks if one object overlaps another object. Now, I realize in making this quick example this is a little bit tricky, and it might actually been a little bit simpler if I had you know particle objects and bubble objects and the particles check if they're overlapping the bubbles because then you wouldn't have this thing where you have a Single object checking another object of the same type which can be a little tricky But this is kind of a way of thinking that you I think want to get used to so as an exercise I might give you the following exercise Take this idea reimplement this basically this exact same code and Instead of having two particles have three and can you make something different happen when these two overlap versus when these other two overlap and I think that would be kind of a good A good way to start so how could you have one how could you have maybe try four particles or five but particles and have different things happen with different combinations of overlapping and see how that goes for you. You might also want to file this in the back of your mind that later when we get to looking at arrays and lists of objects. How would you have every particle checking if it's overlapping every other particle? Which is kind of a tricky problem. Okay, hopefully this video. Did some good... and I'm going to stop now.
