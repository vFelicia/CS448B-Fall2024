With timestamps:

00:01 - hello welcome to another coding
00:02 - challenge in this coding challenge I'm
00:04 - going to explore the traveling sales
00:06 - person algorithm it's a classical
00:08 - algorithm that you'll find from kind of
00:10 - this thing known as computer science uh
00:12 - I want to talk about what the algorithm
00:14 - is I want to build a quick JavaScript
00:15 - example to demonstrate how to kind of
00:18 - program the problem and then I'm going
00:19 - to do several follow-up videos to look
00:21 - at different solutions to this
00:23 - particular problem and for you the
00:24 - viewer I want you to think about what
00:26 - are some creative applications could you
00:28 - make some kind of interesting line
00:29 - drawing visual art with it could you
00:31 - create a musical system uh could you use
00:33 - it for some sort of uh data
00:35 - visualization scientific simulation
00:37 - creative project in your field of
00:38 - Interest so I hope that you'll watch
00:39 - these videos get the example code play
00:42 - with it and make an application with it
00:43 - and share that application with me which
00:45 - I might share then with other people but
00:48 - whatever that's not the point the point
00:49 - is let's talk about this algorithm so
00:50 - this is currently a processing sketch
00:52 - I'm going to program this in JavaScript
00:54 - which is checking every single possible
00:56 - solution to what so let me walk the
00:59 - traveling sales person so you know I
01:01 - think that um Pokémon go would in the
01:05 - future some many years from now when
01:07 - somebody's watching this video Pokemon
01:08 - go is the most irrelevant thing it'll be
01:10 - so annoying to watch this but um the
01:13 - problem is let's say you have a space
01:15 - and this could be a two-dimensional or a
01:16 - three-dimensional or an n-dimensional
01:18 - space but we're going to work with a
01:19 - two-dimensional space and the problem is
01:21 - usually framed as there are a bunch of
01:23 - cities so here are several City a map of
01:26 - a bunch of cities or perhaps there a map
01:28 - of a bunch of Pokémon that you want to
01:30 - catch but you're a salesperson and you
01:31 - want to go sell your you know cating
01:34 - rainbow stickers or t-shirts or whatever
01:36 - in every city so you know I could go
01:39 - here and then I could go here and then I
01:41 - could go over here and then I could take
01:42 - the train here and I could fly here and
01:44 - I could go here and I could go here you
01:45 - could see that would be a path that hits
01:47 - every single City but it wouldn't be the
01:49 - shortest path and I could try to eyeball
01:52 - it and this might be an interesting
01:53 - application by the way idea what if you
01:55 - build a computer algorithmic system
01:57 - solving the optimal fastest solution
02:00 - and you have it compete with a person
02:01 - trying to draw that solution that could
02:03 - be an interesting interactive exhibit
02:05 - but you know we could try to say like oh
02:06 - maybe the optimal solution is something
02:08 - like uh this but you know that's just
02:12 - kind of a guess so we don't have to
02:14 - guess I could go back over here and this
02:16 - is a program that checked every single
02:19 - possible
02:21 - solution uh for and this is 12 points
02:23 - now you might think big deal how many
02:26 - possible ways are there to explore how
02:30 - many possible ways are there to connect
02:31 - 12 points well there's actually quite a
02:33 - few and it it it it and let's kind of
02:36 - explore that for a second so let's say
02:38 - there are only three
02:40 - points and the points are a b and c well
02:45 - let's look at all the possible ways a b
02:49 - c a c b b a c b c a I'm doing this in a
02:57 - specific order for a reason which will
02:58 - become relevant in a future video c a b
03:02 - CB a and if I did this correctly these
03:05 - are actually sorted in alphabetical
03:06 - order which is a kind of piece of this
03:09 - that's going to come up as I explore
03:10 - this further so you can see did I do
03:12 - this right there were three
03:14 - possibilities and there are there were
03:15 - three uh cities or three Pokemon there
03:18 - are one two three four five six um six
03:23 - possibilities so the way you can
03:25 - actually calculate how many
03:26 - possibilities is 3 * 2 * 1 which is also
03:29 - known as factorial and why is that
03:31 - because there are uh there are uh three
03:35 - possibilities for the first Le for the
03:38 - first letter and with each one of those
03:39 - there are two possibilities for the
03:41 - second and for each one of those there's
03:42 - one possibility for the third so
03:44 - actually if you are if there are 12
03:46 - points there are 12 factorial possible
03:49 - ways of connecting all of those dots
03:51 - which if you pull up your calculator is
03:53 - a really really big number and when you
03:55 - go to 13 it's a really big number so
03:57 - actually like if I change this program
03:59 - right now to try to uh use like 20
04:03 - points watch how slowly it's going to
04:07 - complete all the possibilities we are
04:09 - going to be here till the Dawn Till the
04:12 - time the sun envelops the Earth and we
04:14 - we won't be alive then I guess but you
04:16 - know you get the point this is going to
04:18 - take a really long time um and if I even
04:20 - just go let's just go from 12 to 13 just
04:23 - to make this point a little bit more
04:25 - explicit um you can see now come on
04:29 - computer
04:30 - um you can see that it's still checking
04:32 - all the possibilities but even just to
04:34 - get to 1% of the possibilities is taking
04:36 - quite a while and this is a program
04:39 - that's written in Java that's running
04:40 - relatively fast okay so um people in the
04:45 - chat are posting the answers to these
04:46 - factorial questions I'm glad because I
04:48 - don't have them I don't have those
04:50 - numbers in my head so now let's let's
04:51 - start to program how how do we think
04:53 - about this program in a visual
04:55 - simulation this idea in a visual
04:56 - simulation so I'm going to move out of
04:58 - processing you'll be able to get this
04:59 - Java based processing code also in this
05:02 - video's description but I'm going to
05:03 - quit processing here uh I'm going to
05:06 - don't save that and I'm going to work in
05:08 - the browser which admittedly JavaScript
05:10 - HTML 5 canvas is not the place where
05:13 - you're going to find your greatest power
05:14 - and speed from your computer but it's a
05:16 - place that we can kind of explore this
05:18 - idea and so what I have here is a simple
05:20 - JavaScript program it makes a canvas and
05:22 - it has a draw Loop so what I'm going to
05:24 - do is I'm going to create an array and
05:27 - I'm going to call that array cities but
05:29 - this could be anything please think more
05:31 - creatively what are the what are the
05:33 - things in your world that you need to
05:34 - find a pathway through and then what I'm
05:37 - going to do is I'm going to say uh let's
05:39 - just have three just to be simple about
05:42 - this I'm going to have three cities I'm
05:43 - going to say cities index cities index I
05:48 - equals create vector and I'm going to
05:52 - create a random vector and I'm going to
05:54 - do this as a separate line of
05:56 - code
05:58 - uh random width random height so a
06:01 - vector is just an object in p5js uh I
06:05 - mean it's you know the concept extends
06:07 - Beyond P5 GS but that stores an X and Y
06:09 - position it does more than that but
06:10 - that's what we're using it for and so I
06:12 - want to create a bunch of those and then
06:14 - I just want to see those points in the
06:17 - window so I'm going to do that same
06:18 - exact Loop but I'm going to say Here
06:20 - cities. length and I'm going to actually
06:22 - make that a variable like total cities
06:25 - so it's something we can vary equals
06:27 - three and uh then uh instead uh then
06:31 - what I want to do is say I want to draw
06:33 - a circle at cities index
06:37 - I uhx cities indexi doy we'll make it
06:42 - Circle 4x4 pixels we'll say Phil 255 so
06:46 - it's white and I just want a little bit
06:48 - more room to write my code and then uh
06:51 - I'm going to hit refresh here whoops hit
06:53 - refresh here and you can see there are
06:55 - three cities picked randomly refresh the
06:57 - page I get three random cities so and
07:00 - you can see here you know if I just now
07:02 - go and say total cities 20 now I have 20
07:06 - but I want to work with a small number
07:08 - so I can sort of visually see that
07:10 - things are working okay um am I
07:14 - recording this yes excellent all right
07:17 - so um let's go back to three cities
07:21 - let's make these a little bit bigger so
07:22 - you can see them and let's also uh
07:26 - whoops let's make this a little bit
07:27 - bigger and and I can make the console a
07:29 - little bit smaller smaller okay so now
07:30 - what I want to do is start exploring
07:33 - possible orders well I have an order
07:35 - already actually the order that I have
07:37 - is in this City's array so I could sort
07:40 - of say this is an order and what I might
07:42 - actually do Beyond just draw those
07:44 - cities is draw a path between them so
07:47 - I'm going to say a begin
07:50 - shape end shape and instead of drawing a
07:53 - circle at each point I'm going to say
07:55 - vertex cities XY and I'm going to say a
07:59 - stroke 255 I'm going to say stroke
08:02 - weight two just to give it a little bit
08:04 - of thickness so it's a little easier to
08:05 - see and I'm also going to say no fill
08:07 - and so now I'm going to run this and we
08:10 - can
08:11 - see there we go now I just realized what
08:14 - I want to do is Shuffle the array so
08:16 - what I want to do is I want to try these
08:18 - are now I'm getting uh I'm getting
08:19 - random uh every time I refresh but what
08:21 - I want to do in draw in that draw Loop
08:24 - is I want to shuffle that array to try
08:25 - different random orders so how do I do
08:28 - that so I have a feeling if I go and
08:31 - look up the Milla
08:33 - documentation for the array object in
08:35 - JavaScript there might be a kind of
08:37 - function that's part of the array
08:38 - prototype whoa what's a prototype ah did
08:40 - I just say prototype in a video um but
08:43 - in other words when I say prototype
08:44 - prototype being the sort of like thing
08:46 - that is in charge of every array that's
08:48 - ever made ever in JavaScript and there
08:50 - are some functions that I've explored in
08:52 - other videos like remove or splice or
08:54 - push that allow you to manipulate that
08:56 - array I I'm wondering if there's one
08:57 - that's called Shuffle whether or not
08:59 - there is I'm going to write my own
09:00 - function so I'm going to write a
09:02 - function and I'm actually going to call
09:04 - it swap not Shuffle and you'll see what
09:06 - it's going to do in a second it needs an
09:08 - array and it needs two IND index things
09:11 - so something that's going to be very
09:12 - useful in just about every scenario that
09:14 - I explore the traveling salesperson is
09:17 - this idea of a Swap and this comes up
09:19 - all the time in different things you
09:20 - might want to program and do so in other
09:22 - words a swap is if I have an array that
09:25 - says a b c what if I want to pick two
09:28 - random elements like oh this this one
09:29 - and this one and I want to swap their
09:31 - position so now the array is CB and I
09:34 - might use this if I do this with a
09:35 - genetic algorithm as later as a mutation
09:38 - so the mutation of a path through all
09:40 - the cities is swapping two R cities
09:42 - randomly so let's look at how I might do
09:45 - that and uh I am going to say well so
09:50 - what you would think you might do is say
09:51 - a index I equals a index J and a index J
09:55 - equals a index I right this is the idea
09:58 - of a SW oops index I this is the idea of
10:01 - taking an array and swapping two
10:03 - elements right put the element number
10:06 - three at element zero and put element
10:08 - number zero at element three the problem
10:11 - is if I set a index J equal to a index I
10:15 - I just reset a index I to a equal J so
10:17 - I'm actually setting AAL a index J to
10:19 - itself so in order to perform a swap I
10:22 - need to say this actually I need to have
10:24 - some temporary variable which is holds a
10:27 - index I so I keep track of what a index
10:29 - I is and then later once I I replace a
10:33 - index I with j and then J can be equal
10:35 - to Temp so this is just a really simple
10:38 - uh a really simple algorithm for taking
10:40 - two elements of the array and swapping
10:42 - them and let's look at what happens now
10:44 - if what I do every time through draw at
10:46 - the end is I say swap cities and then oh
10:50 - I need two random IND indexes so I'm
10:52 - going to say uh I equals uh floor random
11:01 - uh uh cities.
11:04 - length and J is also a random value so
11:09 - I'm going to uh swap I and J and of
11:12 - course I you know I'm not guaranteeing
11:14 - that I don't pick the same one and swap
11:16 - an element with itself but big deal it's
11:18 - going to do this a bunch of times let's
11:19 - run this program again and you can see
11:21 - you know with three things there's not a
11:23 - lot of order possibilities but if I make
11:25 - this total cities 10 you can see now you
11:28 - can see how ele are being swapped and so
11:30 - it's doing this very fast but I'm
11:32 - exploring a whole lot of
11:33 - possibilities okay so now what can I do
11:37 - what I want to do just to kind of
11:39 - explore this in a Brute Force way is as
11:42 - I'm trying all these different
11:43 - possibilities I want to calculate what
11:46 - is the distance traveled through this
11:47 - particular order and if that distance is
11:50 - the best one I've gotten so far let's
11:52 - save it um so let's do that uh as the
11:55 - following so one thing I need to do I
11:57 - think it might be useful to write a
11:58 - function that calculates the distance uh
12:01 - between every point in an array so I'm
12:04 - going to write uh another function down
12:06 - here at the
12:07 - bottom and I'm going to call this
12:09 - function uh Cal distance and it's going
12:13 - to get uh a list of
12:16 - points all right so I'm getting a
12:18 - function it gets an array of points and
12:20 - the whole point of this function is now
12:21 - to return the total distance between all
12:23 - those points in the order that they are
12:25 - so I need some sort of sum that starts
12:28 - at zero I need a loop where I start at
12:31 - zero I go all the way through the length
12:35 - of that array and I say what so if this
12:39 - is my uh this is my order I want to know
12:42 - this distance plus this distance plus
12:45 - this distance plus this distance so I
12:46 - always want to know the the the distance
12:48 - between I and I + one and then this
12:51 - becomes I and this becomes I + one etc
12:53 - etc so if I come back here I'm going to
12:57 - say uh VAR D equals distance between
13:02 - points index i dox Points index i.y
13:07 - points uh index I +
13:12 - 1.x points index I + 1 dot y okay and
13:18 - then I'm going to add that sum plus
13:20 - equals D and then I'm just going to
13:22 - return the sum so by the way this is a
13:25 - function in P5 that calculates the
13:27 - distance for you between two two points
13:29 - so I'm giving it points index I X and Y
13:32 - points index I +1 x and y so that should
13:35 - be the now later I'm going to optimize
13:37 - this because this is actually going to
13:38 - be kind of a slow operation to calculate
13:40 - distance and there's a way later that I
13:41 - mean I could speed this up and when I'm
13:43 - trying to do this zillions and
13:44 - gazillions of times speeding it up could
13:46 - be a good thing okay um now what I'm
13:49 - going to do is I'm going to
13:54 - say uh I want to have a variable called
13:57 - record distance
13:59 - now uh so the first thing I want to do
14:02 - is whatever order this array is
14:04 - calculated in first I want to
14:06 - know calc
14:09 - distance of cities right calculate the
14:12 - distance for this array cities and then
14:15 - the record distance is that first
14:18 - distance so I'm going to try I'm going
14:20 - to get a random set of points I'm going
14:21 - to get a distance between those and
14:23 - that's my best so far then remember down
14:26 - here I did a swap so I shuffled it
14:29 - around so once I did a swap let's
14:32 - calculate that distance
14:36 - again uh of cities and then if that
14:40 - distance is less than the record
14:45 - distance then record distance equals
14:50 - that distance so this is me just
14:52 - checking all like randomly swapping
14:54 - things around this again is not going to
14:56 - be an efficient algorithm for solving
14:58 - the traveling sales for I'm building it
14:59 - this way just to show what the problem
15:01 - is and how kind of impossible it is to
15:02 - find that optimal solution uh with a
15:04 - with a certain number of points so what
15:06 - I want to do here is just say uh console
15:11 - whoops what I want to say is
15:14 - console.log uh record distance so we can
15:16 - kind of look at these values as I'm
15:18 - finding them so let's run this program
15:21 - now oops uh sketch. JS line 55 what
15:25 - mistake did I make points hm
15:31 - uh okay uh I get a list of points ah of
15:35 - course I meant to I I made this mistake
15:37 - on purpose and because I wanted to
15:39 - correct it later and then I forgot about
15:41 - it so what's the problem here remember
15:43 - I'm checking in the array element I and
15:46 - the next one i+ one so I can't go to the
15:48 - end of the array because if I go to the
15:49 - end of the array there's no i+ one
15:51 - there's no element after the end of the
15:53 - array I don't actually care because
15:54 - that's the end of my journey that's the
15:56 - end of my traveling to catch all my
15:58 - Pokémon or whatever is I'm doing so
16:00 - later somebody will dub this video over
16:02 - with whatever is the newest thing like
16:06 - um I don't uh never mind I don't know
16:08 - what the newest thing will be it won't
16:10 - be Pokemon it'll be
16:14 - B okay uh so I need to add a minus one
16:17 - here so I don't go to the last one okay
16:19 - uh now we can see uh I'm getting these
16:22 - nice uh so far uh I had a distance of
16:26 - 105 uh which was the record and at some
16:28 - point point it got a distance of 76 and
16:30 - then it got a distance of 19 pixels
16:32 - through all of those points that seems
16:34 - kind of insane to me that must I don't
16:36 - know if we're ever going to beat that
16:37 - record in a while so let's run this one
16:38 - more time uh and see like yeah so you
16:41 - can see that's optimizing now I'm not
16:43 - saving what that optimal uh what that
16:45 - optimal uh path is so that's the next
16:48 - step that I want to look at so I might
16:52 - need your help in the chat here I'm not
16:55 - really a JavaScript programmer that's a
16:57 - confession I have to make to you and I
16:59 - don't I feel like in the let's look
17:00 - actually so there must be a way I want
17:02 - what one thing I want to do is make a
17:03 - copy of an array I'm going to need to be
17:05 - able to do that because if I have a an
17:06 - array with an ordered list of vectors I
17:09 - want to be able to like save a version
17:10 - of that if it's a really good one and I
17:12 - could write my own function to copy an
17:13 - array and I'm kind of tempted to just do
17:15 - that to know that it works but let's
17:17 - let's take a minute in this video to and
17:19 - somebody in the chat will um oh did I
17:22 - forget return some oh thank you no
17:25 - wonder this is a big bug I just had by
17:27 - the way somebody in the chat just
17:28 - mentioned and I had another bug where I
17:30 - was returning D which makes no sense at
17:32 - all cuz I'm just returning the last
17:33 - distance which of course why that value
17:35 - didn't make any sense so return sum is
17:37 - correct so let's run this again to take
17:39 - a look at it there we go these values
17:42 - make much more sense right so you can
17:44 - see like it's you know thousands of
17:46 - pixels between all these points and you
17:47 - can see the the best one that I've
17:49 - gotten so far okay so I'm running that
17:51 - now let me go back to what I was doing
17:53 - is I'm going to go to U Milla uh uh
17:57 - developer doc array something like this
18:00 - I'm Googling that to get to here and
18:02 - what I want to look for is like what are
18:04 - all of the available functions things
18:06 - that I've used I've used push which is a
18:09 - function in Array that adds an element
18:11 - to an array reverse o I might need to
18:13 - use reverse later unshift there's so
18:15 - many things I might use but I'm looking
18:17 - for one I think slice might do this for
18:20 - me the slice method returns a shallow
18:23 - copy of a portion of an array into a new
18:25 - array object let's explore if this is
18:29 - what's going to work for me so I'm just
18:31 - going to go over here this is how I like
18:32 - to figure things out I'm going to go
18:33 - into the console here while this is
18:35 - running and I'm just going to make an
18:36 - array that's like
18:40 - 156 uh and I'm going to look at that
18:41 - array it's 156 now I want to say b
18:45 - equals a do slice what does that give
18:48 - me B is also 156 that's good that's what
18:52 - I need what if I say now B uh index uh 2
18:57 - equals 7
19:00 - 157 and a is still 156 so this should
19:03 - work for me and I believe shallow means
19:06 - because I'm actually not putting numbers
19:08 - in there I'm actually going to put
19:09 - arrays in there sorry vectors in there
19:11 - that though those it won't copy the
19:13 - vectors it's just going to copy the
19:14 - array and that's exactly what I want
19:16 - because I want to keep that same list of
19:17 - vectors it's just the the arrays are
19:20 - pointing to the same Vector object but
19:21 - in a different position in the array so
19:23 - this is going to work uh po perfectly uh
19:27 - for me uh uh so so uh hopefully I got
19:29 - that explanation right and things are
19:30 - going to work people in the chat are
19:31 - giving me good advice about shallow copy
19:33 - I might have messed up that explanation
19:35 - I'll correct it as I continue to talk in
19:37 - this video yes you are watching a video
19:39 - of a person teaching about programming
19:41 - who really does not know what he's doing
19:43 - okay so um let's come back and let's say
19:46 - what I want to do is I'm G to say best
19:49 - ever and what I want to say here is uh
19:53 - best you know you know there was a show
19:55 - that I used to watch back when I watched
19:57 - television which I don't time for
19:59 - anymore which was called best week ever
20:00 - so this is best I guess that's from you
20:02 - know there's the whole Simpsons thing
20:04 - best anyway whatever never mind best
20:06 - City's path ever is cities to start and
20:10 - then every time I find a record oh no
20:12 - it's uh I want to actually say do slice
20:15 - I want a copy of it and then uh every
20:18 - time I I get a record I want to say uh
20:22 - best ever is cities slice so just to see
20:25 - if this is working what I want to do is
20:29 - I want to draw the path twice I want to
20:32 - draw the current cities and I want to
20:35 - draw the best ever and I'm going to make
20:38 - the best ever uh thicker and some uh
20:43 - pinkish purplish color and I'm going to
20:45 - make the current cities thinner and
20:47 - white so let's run this yeah this is
20:49 - working so I think it's I believe this
20:51 - is doing um uh what I wanted to do which
20:55 - is just randomly swapping things and
20:58 - every time and we can look here and see
21:00 - that oh I took the print line out but
21:02 - you can see the pink path is currently
21:05 - the best path that it's got now with 10
21:09 - points I can see here like this is no
21:11 - good like over here this part is like
21:14 - terrible because look at them Crossing I
21:16 - could easily myself just design like go
21:18 - here I can't I can't do this like people
21:21 - who do the weather on television are
21:22 - like so good at this I could go here
21:24 - then I could go here then I could go
21:27 - there then anyway you could see how
21:28 - could easily design a more efficient
21:30 - path so this isn't going to get us that
21:32 - most efficient path that's what future
21:33 - videos that I'm going to go into the
21:34 - next steps are going to explore but
21:36 - let's just see that this program is
21:38 - working by just having Four Points
21:40 - because I think we can probably visually
21:41 - see that looks like the best path
21:44 - between those four points same there it
21:47 - looks like it's kind of finding it
21:48 - rather quickly right you can kind of
21:50 - imagine you know arguably is it going to
21:53 - be better I don't think so but you can
21:54 - see it's going to randomly kind of try
21:56 - every possibility with Just Four Points
21:58 - rather quickly we can even try five
22:00 - cities and you can see that it's kind of
22:02 - finding it so you know you know if I
22:04 - slow this down if I draw it more
22:05 - artistically if I allow the user to
22:07 - interact with it by adding points I mean
22:10 - that's sort of an interesting thing
22:11 - right um dare I I don't um you know
22:14 - these are might be some things that you
22:15 - can explore so I'm kind of finished with
22:17 - this first video demonstrating the
22:20 - traveling I don't know what the Bell
22:21 - does but it's a thing um uh uh with this
22:25 - um traveling salesperson problem in the
22:27 - next video what I'm going to do is show
22:29 - you how to not just randomly swap points
22:32 - to try a bunch of different
22:33 - possibilities but actually sort an array
22:37 - of numbers with every single possible
22:39 - premutation so we can actually just try
22:41 - every single possibility in order which
22:43 - I think has some kind of interesting
22:44 - creative applications to it as well so
22:46 - I'm going to do that in the next uh next
22:48 - video okay so thanks for watching this
22:50 - one and the the next video will follow
22:52 - up on this uh okay talk to you soon

Cleaned transcript:

hello welcome to another coding challenge in this coding challenge I'm going to explore the traveling sales person algorithm it's a classical algorithm that you'll find from kind of this thing known as computer science uh I want to talk about what the algorithm is I want to build a quick JavaScript example to demonstrate how to kind of program the problem and then I'm going to do several followup videos to look at different solutions to this particular problem and for you the viewer I want you to think about what are some creative applications could you make some kind of interesting line drawing visual art with it could you create a musical system uh could you use it for some sort of uh data visualization scientific simulation creative project in your field of Interest so I hope that you'll watch these videos get the example code play with it and make an application with it and share that application with me which I might share then with other people but whatever that's not the point the point is let's talk about this algorithm so this is currently a processing sketch I'm going to program this in JavaScript which is checking every single possible solution to what so let me walk the traveling sales person so you know I think that um Pokémon go would in the future some many years from now when somebody's watching this video Pokemon go is the most irrelevant thing it'll be so annoying to watch this but um the problem is let's say you have a space and this could be a twodimensional or a threedimensional or an ndimensional space but we're going to work with a twodimensional space and the problem is usually framed as there are a bunch of cities so here are several City a map of a bunch of cities or perhaps there a map of a bunch of Pokémon that you want to catch but you're a salesperson and you want to go sell your you know cating rainbow stickers or tshirts or whatever in every city so you know I could go here and then I could go here and then I could go over here and then I could take the train here and I could fly here and I could go here and I could go here you could see that would be a path that hits every single City but it wouldn't be the shortest path and I could try to eyeball it and this might be an interesting application by the way idea what if you build a computer algorithmic system solving the optimal fastest solution and you have it compete with a person trying to draw that solution that could be an interesting interactive exhibit but you know we could try to say like oh maybe the optimal solution is something like uh this but you know that's just kind of a guess so we don't have to guess I could go back over here and this is a program that checked every single possible solution uh for and this is 12 points now you might think big deal how many possible ways are there to explore how many possible ways are there to connect 12 points well there's actually quite a few and it it it it and let's kind of explore that for a second so let's say there are only three points and the points are a b and c well let's look at all the possible ways a b c a c b b a c b c a I'm doing this in a specific order for a reason which will become relevant in a future video c a b CB a and if I did this correctly these are actually sorted in alphabetical order which is a kind of piece of this that's going to come up as I explore this further so you can see did I do this right there were three possibilities and there are there were three uh cities or three Pokemon there are one two three four five six um six possibilities so the way you can actually calculate how many possibilities is 3 * 2 * 1 which is also known as factorial and why is that because there are uh there are uh three possibilities for the first Le for the first letter and with each one of those there are two possibilities for the second and for each one of those there's one possibility for the third so actually if you are if there are 12 points there are 12 factorial possible ways of connecting all of those dots which if you pull up your calculator is a really really big number and when you go to 13 it's a really big number so actually like if I change this program right now to try to uh use like 20 points watch how slowly it's going to complete all the possibilities we are going to be here till the Dawn Till the time the sun envelops the Earth and we we won't be alive then I guess but you know you get the point this is going to take a really long time um and if I even just go let's just go from 12 to 13 just to make this point a little bit more explicit um you can see now come on computer um you can see that it's still checking all the possibilities but even just to get to 1% of the possibilities is taking quite a while and this is a program that's written in Java that's running relatively fast okay so um people in the chat are posting the answers to these factorial questions I'm glad because I don't have them I don't have those numbers in my head so now let's let's start to program how how do we think about this program in a visual simulation this idea in a visual simulation so I'm going to move out of processing you'll be able to get this Java based processing code also in this video's description but I'm going to quit processing here uh I'm going to don't save that and I'm going to work in the browser which admittedly JavaScript HTML 5 canvas is not the place where you're going to find your greatest power and speed from your computer but it's a place that we can kind of explore this idea and so what I have here is a simple JavaScript program it makes a canvas and it has a draw Loop so what I'm going to do is I'm going to create an array and I'm going to call that array cities but this could be anything please think more creatively what are the what are the things in your world that you need to find a pathway through and then what I'm going to do is I'm going to say uh let's just have three just to be simple about this I'm going to have three cities I'm going to say cities index cities index I equals create vector and I'm going to create a random vector and I'm going to do this as a separate line of code uh random width random height so a vector is just an object in p5js uh I mean it's you know the concept extends Beyond P5 GS but that stores an X and Y position it does more than that but that's what we're using it for and so I want to create a bunch of those and then I just want to see those points in the window so I'm going to do that same exact Loop but I'm going to say Here cities. length and I'm going to actually make that a variable like total cities so it's something we can vary equals three and uh then uh instead uh then what I want to do is say I want to draw a circle at cities index I uhx cities indexi doy we'll make it Circle 4x4 pixels we'll say Phil 255 so it's white and I just want a little bit more room to write my code and then uh I'm going to hit refresh here whoops hit refresh here and you can see there are three cities picked randomly refresh the page I get three random cities so and you can see here you know if I just now go and say total cities 20 now I have 20 but I want to work with a small number so I can sort of visually see that things are working okay um am I recording this yes excellent all right so um let's go back to three cities let's make these a little bit bigger so you can see them and let's also uh whoops let's make this a little bit bigger and and I can make the console a little bit smaller smaller okay so now what I want to do is start exploring possible orders well I have an order already actually the order that I have is in this City's array so I could sort of say this is an order and what I might actually do Beyond just draw those cities is draw a path between them so I'm going to say a begin shape end shape and instead of drawing a circle at each point I'm going to say vertex cities XY and I'm going to say a stroke 255 I'm going to say stroke weight two just to give it a little bit of thickness so it's a little easier to see and I'm also going to say no fill and so now I'm going to run this and we can see there we go now I just realized what I want to do is Shuffle the array so what I want to do is I want to try these are now I'm getting uh I'm getting random uh every time I refresh but what I want to do in draw in that draw Loop is I want to shuffle that array to try different random orders so how do I do that so I have a feeling if I go and look up the Milla documentation for the array object in JavaScript there might be a kind of function that's part of the array prototype whoa what's a prototype ah did I just say prototype in a video um but in other words when I say prototype prototype being the sort of like thing that is in charge of every array that's ever made ever in JavaScript and there are some functions that I've explored in other videos like remove or splice or push that allow you to manipulate that array I I'm wondering if there's one that's called Shuffle whether or not there is I'm going to write my own function so I'm going to write a function and I'm actually going to call it swap not Shuffle and you'll see what it's going to do in a second it needs an array and it needs two IND index things so something that's going to be very useful in just about every scenario that I explore the traveling salesperson is this idea of a Swap and this comes up all the time in different things you might want to program and do so in other words a swap is if I have an array that says a b c what if I want to pick two random elements like oh this this one and this one and I want to swap their position so now the array is CB and I might use this if I do this with a genetic algorithm as later as a mutation so the mutation of a path through all the cities is swapping two R cities randomly so let's look at how I might do that and uh I am going to say well so what you would think you might do is say a index I equals a index J and a index J equals a index I right this is the idea of a SW oops index I this is the idea of taking an array and swapping two elements right put the element number three at element zero and put element number zero at element three the problem is if I set a index J equal to a index I I just reset a index I to a equal J so I'm actually setting AAL a index J to itself so in order to perform a swap I need to say this actually I need to have some temporary variable which is holds a index I so I keep track of what a index I is and then later once I I replace a index I with j and then J can be equal to Temp so this is just a really simple uh a really simple algorithm for taking two elements of the array and swapping them and let's look at what happens now if what I do every time through draw at the end is I say swap cities and then oh I need two random IND indexes so I'm going to say uh I equals uh floor random uh uh cities. length and J is also a random value so I'm going to uh swap I and J and of course I you know I'm not guaranteeing that I don't pick the same one and swap an element with itself but big deal it's going to do this a bunch of times let's run this program again and you can see you know with three things there's not a lot of order possibilities but if I make this total cities 10 you can see now you can see how ele are being swapped and so it's doing this very fast but I'm exploring a whole lot of possibilities okay so now what can I do what I want to do just to kind of explore this in a Brute Force way is as I'm trying all these different possibilities I want to calculate what is the distance traveled through this particular order and if that distance is the best one I've gotten so far let's save it um so let's do that uh as the following so one thing I need to do I think it might be useful to write a function that calculates the distance uh between every point in an array so I'm going to write uh another function down here at the bottom and I'm going to call this function uh Cal distance and it's going to get uh a list of points all right so I'm getting a function it gets an array of points and the whole point of this function is now to return the total distance between all those points in the order that they are so I need some sort of sum that starts at zero I need a loop where I start at zero I go all the way through the length of that array and I say what so if this is my uh this is my order I want to know this distance plus this distance plus this distance plus this distance so I always want to know the the the distance between I and I + one and then this becomes I and this becomes I + one etc etc so if I come back here I'm going to say uh VAR D equals distance between points index i dox Points index i.y points uh index I + 1.x points index I + 1 dot y okay and then I'm going to add that sum plus equals D and then I'm just going to return the sum so by the way this is a function in P5 that calculates the distance for you between two two points so I'm giving it points index I X and Y points index I +1 x and y so that should be the now later I'm going to optimize this because this is actually going to be kind of a slow operation to calculate distance and there's a way later that I mean I could speed this up and when I'm trying to do this zillions and gazillions of times speeding it up could be a good thing okay um now what I'm going to do is I'm going to say uh I want to have a variable called record distance now uh so the first thing I want to do is whatever order this array is calculated in first I want to know calc distance of cities right calculate the distance for this array cities and then the record distance is that first distance so I'm going to try I'm going to get a random set of points I'm going to get a distance between those and that's my best so far then remember down here I did a swap so I shuffled it around so once I did a swap let's calculate that distance again uh of cities and then if that distance is less than the record distance then record distance equals that distance so this is me just checking all like randomly swapping things around this again is not going to be an efficient algorithm for solving the traveling sales for I'm building it this way just to show what the problem is and how kind of impossible it is to find that optimal solution uh with a with a certain number of points so what I want to do here is just say uh console whoops what I want to say is console.log uh record distance so we can kind of look at these values as I'm finding them so let's run this program now oops uh sketch. JS line 55 what mistake did I make points hm uh okay uh I get a list of points ah of course I meant to I I made this mistake on purpose and because I wanted to correct it later and then I forgot about it so what's the problem here remember I'm checking in the array element I and the next one i+ one so I can't go to the end of the array because if I go to the end of the array there's no i+ one there's no element after the end of the array I don't actually care because that's the end of my journey that's the end of my traveling to catch all my Pokémon or whatever is I'm doing so later somebody will dub this video over with whatever is the newest thing like um I don't uh never mind I don't know what the newest thing will be it won't be Pokemon it'll be B okay uh so I need to add a minus one here so I don't go to the last one okay uh now we can see uh I'm getting these nice uh so far uh I had a distance of 105 uh which was the record and at some point point it got a distance of 76 and then it got a distance of 19 pixels through all of those points that seems kind of insane to me that must I don't know if we're ever going to beat that record in a while so let's run this one more time uh and see like yeah so you can see that's optimizing now I'm not saving what that optimal uh what that optimal uh path is so that's the next step that I want to look at so I might need your help in the chat here I'm not really a JavaScript programmer that's a confession I have to make to you and I don't I feel like in the let's look actually so there must be a way I want what one thing I want to do is make a copy of an array I'm going to need to be able to do that because if I have a an array with an ordered list of vectors I want to be able to like save a version of that if it's a really good one and I could write my own function to copy an array and I'm kind of tempted to just do that to know that it works but let's let's take a minute in this video to and somebody in the chat will um oh did I forget return some oh thank you no wonder this is a big bug I just had by the way somebody in the chat just mentioned and I had another bug where I was returning D which makes no sense at all cuz I'm just returning the last distance which of course why that value didn't make any sense so return sum is correct so let's run this again to take a look at it there we go these values make much more sense right so you can see like it's you know thousands of pixels between all these points and you can see the the best one that I've gotten so far okay so I'm running that now let me go back to what I was doing is I'm going to go to U Milla uh uh developer doc array something like this I'm Googling that to get to here and what I want to look for is like what are all of the available functions things that I've used I've used push which is a function in Array that adds an element to an array reverse o I might need to use reverse later unshift there's so many things I might use but I'm looking for one I think slice might do this for me the slice method returns a shallow copy of a portion of an array into a new array object let's explore if this is what's going to work for me so I'm just going to go over here this is how I like to figure things out I'm going to go into the console here while this is running and I'm just going to make an array that's like 156 uh and I'm going to look at that array it's 156 now I want to say b equals a do slice what does that give me B is also 156 that's good that's what I need what if I say now B uh index uh 2 equals 7 157 and a is still 156 so this should work for me and I believe shallow means because I'm actually not putting numbers in there I'm actually going to put arrays in there sorry vectors in there that though those it won't copy the vectors it's just going to copy the array and that's exactly what I want because I want to keep that same list of vectors it's just the the arrays are pointing to the same Vector object but in a different position in the array so this is going to work uh po perfectly uh for me uh uh so so uh hopefully I got that explanation right and things are going to work people in the chat are giving me good advice about shallow copy I might have messed up that explanation I'll correct it as I continue to talk in this video yes you are watching a video of a person teaching about programming who really does not know what he's doing okay so um let's come back and let's say what I want to do is I'm G to say best ever and what I want to say here is uh best you know you know there was a show that I used to watch back when I watched television which I don't time for anymore which was called best week ever so this is best I guess that's from you know there's the whole Simpsons thing best anyway whatever never mind best City's path ever is cities to start and then every time I find a record oh no it's uh I want to actually say do slice I want a copy of it and then uh every time I I get a record I want to say uh best ever is cities slice so just to see if this is working what I want to do is I want to draw the path twice I want to draw the current cities and I want to draw the best ever and I'm going to make the best ever uh thicker and some uh pinkish purplish color and I'm going to make the current cities thinner and white so let's run this yeah this is working so I think it's I believe this is doing um uh what I wanted to do which is just randomly swapping things and every time and we can look here and see that oh I took the print line out but you can see the pink path is currently the best path that it's got now with 10 points I can see here like this is no good like over here this part is like terrible because look at them Crossing I could easily myself just design like go here I can't I can't do this like people who do the weather on television are like so good at this I could go here then I could go here then I could go there then anyway you could see how could easily design a more efficient path so this isn't going to get us that most efficient path that's what future videos that I'm going to go into the next steps are going to explore but let's just see that this program is working by just having Four Points because I think we can probably visually see that looks like the best path between those four points same there it looks like it's kind of finding it rather quickly right you can kind of imagine you know arguably is it going to be better I don't think so but you can see it's going to randomly kind of try every possibility with Just Four Points rather quickly we can even try five cities and you can see that it's kind of finding it so you know you know if I slow this down if I draw it more artistically if I allow the user to interact with it by adding points I mean that's sort of an interesting thing right um dare I I don't um you know these are might be some things that you can explore so I'm kind of finished with this first video demonstrating the traveling I don't know what the Bell does but it's a thing um uh uh with this um traveling salesperson problem in the next video what I'm going to do is show you how to not just randomly swap points to try a bunch of different possibilities but actually sort an array of numbers with every single possible premutation so we can actually just try every single possibility in order which I think has some kind of interesting creative applications to it as well so I'm going to do that in the next uh next video okay so thanks for watching this one and the the next video will follow up on this uh okay talk to you soon
