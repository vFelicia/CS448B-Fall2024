With timestamps:

00:00 - okay I've got a set of questions that
00:02 - came from the chat I'm going to try to
00:04 - answer some of them which are end you
00:05 - know who might not be answer or I may
00:07 - not know the answer but I'm going to
00:08 - discuss them with you to the best of my
00:10 - ability and you're going to write in the
00:11 - comments and help people who come back
00:13 - and watch this video later to see other
00:15 - thoughts and perspectives and answers
00:17 - here okay so first question here's help
00:19 - from Nick and I'm combining it rewording
00:22 - some of these questions so Nick asks how
00:24 - flexible are the engines and how easily
00:26 - can you integrate them with code and
00:28 - related to that Jonathan asks are there
00:30 - abstract uses of a be using these
00:32 - physics engines you know without even
00:34 - computer graphics and drawing simulation
00:36 - if we come back over here and I think
00:38 - you know in some ways there's a
00:39 - different answer for a lot of these
00:41 - questions one thing that makes box2d
00:44 - difficult to work with is box2d is
00:47 - actually in many ways sort of a silly
00:49 - word to use but a very pure physics
00:51 - engine it knows nothing about computer
00:54 - graphics and pixels and it's units of
00:57 - measurements are actually meters seconds
01:00 - real world measurements now there's some
01:02 - nuance to this because it's sort of
01:04 - finely tuned for small units of
01:06 - measurements but but that aside when you
01:10 - actually do this prophets effect where
01:13 - all the things are you have to give box
01:15 - to be a set of locations in which
01:18 - physical measurements as if it's in a
01:19 - real physical space and box2d will tell
01:22 - you where the stuff is at a moment in
01:24 - time and you have to convert that back
01:26 - to a pixel space so in that sense is
01:28 - incredibly flexible because it
01:32 - abstracted from computer graphics at all
01:34 - and you could actually use it in the
01:35 - program and never draw anything and can
01:37 - use it to simulate some aspects of
01:39 - things it makes it kind of difficult to
01:41 - work with but because you have to do all
01:44 - this conversion and thinking and it
01:45 - makes it more complex than say matter
01:47 - that chance or toxic list where you can
01:49 - just give the engine pixel based
01:51 - coordinates and it gives you back pixel
01:53 - based coordinates but it does give it us
01:56 - through level of sophistication and
01:57 - perhaps even accuracy you could maybe
01:59 - say I mean I'm not expert enough in the
02:02 - lower level mechanics of all these
02:04 - engines to
02:05 - really say which one's more accurate
02:07 - than the other but but that certainly is
02:10 - an aspect of this for sure okay we come
02:13 - back and see what the next question is a
02:15 - flip kid and the app can use multiple
02:18 - engines at once you absolutely could I
02:20 - think you're probably asking for trouble
02:23 - in some ways I mean I'm sure there are
02:24 - some very unique interesting situations
02:26 - where that makes sense but there's
02:27 - enough time and overhead in sort of
02:30 - learning it's certainly worth learning
02:33 - multiple physics engines but you know
02:34 - there's enough specificity to what are
02:37 - the objects that are available one of
02:39 - the names of all the functions and
02:40 - there's you know if each physics engine
02:43 - probably has its own vector object and
02:46 - you can't give box2d a vector from toxic
02:49 - lives and you can't give toxic lives a
02:50 - vector from box of these you're gonna
02:52 - have to be converting so I'm not so sure
02:53 - that you would really want to do that
02:55 - but you again this is anything is
02:59 - possible because you are the designer of
03:02 - the system and you are the drawer of the
03:04 - knee or the person rendering the world
03:06 - so you could give the information to
03:08 - multiple physics engines and try to like
03:11 - get stuff out and send it back you know
03:13 - in put it back into the other ones and
03:14 - do some kind of crazy convoluted thing
03:16 - but I'm not so sure one thing I should
03:17 - mention is that you don't actually have
03:20 - to do this necessarily matter touch is
03:22 - and up for example I know very
03:25 - specifically has a kind of automatic
03:27 - debug view so you can just say to matter
03:29 - here's a canvas draw where everything is
03:31 - on the canvas is behind the scene in its
03:33 - code has the ability to do that but my
03:36 - point of view and showing you these
03:37 - things is really to focus on how you
03:39 - draw the stuff yourself because that's
03:41 - where you can really explain your own
03:43 - design sensibility and that's kind of
03:44 - one of the questions here I'm going out
03:46 - of order here but Albert asks I can use
03:49 - shaders and how can you really put your
03:51 - design it's really that's a really key
03:53 - aspect of being creative and working
03:56 - with physics engines in creep and making
03:57 - something that's not just looking like a
04:00 - demo so all of my examples are demos
04:02 - because I'm taking I'm taking the
04:05 - physics engine and kind of drawing the
04:09 - literal pieces of it on the screen in a
04:13 - literal way i'm overusing the word
04:15 - literal but but i'm
04:19 - saying what stay in the physics engine
04:21 - let me draw exactly what's in the
04:23 - physics engine as for simple geometric
04:25 - shapes whereas there's no reason why you
04:27 - couldn't make fuzzy textures and blend
04:29 - modes and do all of your creative
04:31 - drawing using the coordinate and
04:33 - geometry information that's coming out
04:34 - of the engine okay what else did one of
04:36 - us what else do I got here on this
04:38 - question so I this this performance
04:40 - considerations is absolutely a big one
04:42 - so one of the nice things about using a
04:44 - physics engine is that you know assuming
04:46 - it's something that's worked on by a lot
04:48 - of people over a long period of time you
04:50 - know all the ones I'm talking about our
04:52 - open source engines that are most of
04:54 - them the source code is on github and
04:56 - have a wide variety of contributors but
04:58 - probably for you know people have been
05:00 - working for years on optimizing them so
05:02 - in many ways it's going to be more
05:03 - efficient and have higher performance
05:05 - than what you might throw together and
05:08 - today that said these types of
05:11 - computations are expensive to look at
05:13 - every object in a system and weapon
05:15 - warehouse colliding with every other
05:17 - object and it's going to have some kind
05:18 - of complex polygon geometry so you know
05:21 - there certainly is a slowness here but
05:24 - you know box2d is very efficient runs
05:26 - very fast especially if you're in C++
05:28 - that's going to run slower in the canvas
05:30 - and the browser qurani slower so you
05:32 - know yes there are performance
05:33 - considerations you could I sit here and
05:36 - like talk about them for I'm like asking
05:38 - myself questions now the answer that is
05:39 - no like I I'm that I think Marisa kind
05:41 - of a lot of trial and error and digging
05:43 - into the source code and seeing where
05:45 - how things worked at best okay Nick does
05:50 - not deserve credit for the first
05:52 - question I don't know who who asked that
05:54 - question was a great question it was not
05:56 - by dick thank you and let's see do some
06:03 - simulate more accurately than others
06:05 - that's you know that's another
06:06 - consideration here there's all usually
06:07 - often a trade-off right it's going to be
06:10 - slower if it's more accurate it's going
06:12 - to be faster if it's less accurate
06:13 - apparently that question is from gap
06:15 - Gabriel frappe and Kenya okay another
06:21 - question here is from Philippe how to
06:23 - use for this I reward this question but
06:25 - how do use force this with physics
06:27 - engine and can control the losses this
06:28 - is a big question which I will cover and
06:30 - look at in a lot of my example
06:32 - but the question really is I kind of set
06:35 - you up in this way of like hey let's put
06:36 - stuff in the world it's in the world now
06:38 - let's go over here let's read where the
06:40 - stuff is and let's draw it to the screen
06:42 - but what if the thing listed in the
06:44 - world I want to control how it's moving
06:46 - or I want to like add a force into the
06:48 - world that's going to affect the way
06:50 - that the world is behaving so most of
06:52 - the physics engines are going to have a
06:54 - mechanic for this for example the body
06:56 - object you create this body object you
06:59 - put it in the world you can keep a
07:00 - reference to that body object and later
07:02 - you might be able to call the function
07:03 - code like add forth or apply force to
07:06 - cause the body to experience maybe a
07:08 - sudden gust of wind for example there's
07:10 - another there's a question those like
07:12 - well what if you want to affect these
07:15 - not with a force but by actually say hey
07:17 - look this object's velocity to be this
07:19 - and yes physics engines will let you do
07:21 - that because you know number one is you
07:23 - can just kind of dig into the source
07:24 - code they're going to body's going to
07:25 - have a variable in it someone it's like
07:27 - the velocity you could set it but you
07:29 - have to watch out a big problem here
07:32 - it's very easy to violate the laws of
07:35 - physics in witnessing extensions it's
07:37 - kind of hard to do that although I would
07:38 - love that's a good like real world
07:40 - challenge let's violate the laws of
07:42 - physics sure that would be an exciting
07:43 - YouTube video get lots of views but we
07:46 - can easily violate the laws of physics
07:47 - for example what if I just take an
07:49 - object that's in the world and I say hey
07:52 - you know its position is over here now
07:54 - instead it's positioned over here I can
07:55 - actually do that and it's going to
07:57 - appear over there but I what I've
07:59 - essentially just done is i teleported it
08:01 - which violates the laws of physics you
08:03 - know at least in terms of specific
08:04 - action and so in that case you might
08:07 - start to see some strange behavior but
08:09 - if I wanted to move something around
08:11 - manually through an interaction without
08:14 - teleporting it to cause some strange
08:16 - behavior what I might be able to do is
08:17 - attach a connection
08:19 - maybe I captured a connection to the
08:21 - object and I connect it also to my mouth
08:23 - and then I move the mouse around and I'm
08:26 - tugging around looks like I attached the
08:27 - string to something and moving it so
08:29 - that's a way that's one strategy for
08:32 - moving something around through you know
08:34 - a pearly noise algorithm or to user
08:36 - interaction by still staying within the
08:39 - sort of laws of physics of that
08:41 - it depends on how the physics engine
08:42 - works but this is certainly a common
08:44 - problem and another was really a
08:46 - question I added to my list another very
08:48 - common thing about physics engine is oh
08:50 - it's doing all this collision stuff for
08:52 - me that's great yeah I don't do the
08:55 - collision stuff but what I really want
08:56 - is when they collide I want to think
08:58 - play a doughnut music or something so if
09:00 - you want to do that you have to know
09:02 - when the things collide and that's
09:04 - happening in here how do you know when
09:06 - it collides well you could say okay well
09:08 - what I'm going to start to do is I'm
09:09 - going to look at all the things and look
09:11 - at where they are in relation to each
09:12 - other when they're when they're within a
09:13 - certain distance they must be collect
09:15 - but then if you go down that road
09:16 - thinking it's completely defeated the
09:18 - whole purpose of them using the physical
09:19 - engine you're starting to really
09:20 - implement those collision algorithms
09:21 - yourself
09:22 - so most physics engines will have this
09:24 - idea of a collision listener so you can
09:28 - write a callback function or some create
09:31 - some type of object that sits there and
09:33 - tells you information about hey there's
09:35 - been an event these two things collided
09:38 - here's object one here's object two
09:40 - here's their properties you know what
09:41 - are you going to do about this like oh
09:43 - if it's a purple object with a red
09:45 - object it plays you know see if it's a
09:48 - green object with a pink object it plays
09:50 - the note D so you can you're going to
09:52 - want to look for something like a
09:53 - listener to be able to also not just
09:56 - extract where the things that you want
09:58 - to draw but to extract moments in time
10:00 - that a certain event like collision
10:02 - events that you want to handle in a
10:04 - certain way okay so I don't this is like
10:07 - a ridiculously long intro to physics
10:09 - engines tutorial video that I can't
10:12 - imagine anybody really wanted to watch
10:14 - but if you're still here thank you for
10:16 - watching and I think the other videos in
10:19 - this particular playlist will have much
10:21 - more information and actual code about
10:23 - how to do these things and how they work
10:25 - so I hope you asked them and I hope you
10:27 - enjoy them and I'm sure and I hope you
10:30 - leave me some comments feedback okay
10:32 - thanks very much and I'll see you
10:39 - [Music]

Cleaned transcript:

okay I've got a set of questions that came from the chat I'm going to try to answer some of them which are end you know who might not be answer or I may not know the answer but I'm going to discuss them with you to the best of my ability and you're going to write in the comments and help people who come back and watch this video later to see other thoughts and perspectives and answers here okay so first question here's help from Nick and I'm combining it rewording some of these questions so Nick asks how flexible are the engines and how easily can you integrate them with code and related to that Jonathan asks are there abstract uses of a be using these physics engines you know without even computer graphics and drawing simulation if we come back over here and I think you know in some ways there's a different answer for a lot of these questions one thing that makes box2d difficult to work with is box2d is actually in many ways sort of a silly word to use but a very pure physics engine it knows nothing about computer graphics and pixels and it's units of measurements are actually meters seconds real world measurements now there's some nuance to this because it's sort of finely tuned for small units of measurements but but that aside when you actually do this prophets effect where all the things are you have to give box to be a set of locations in which physical measurements as if it's in a real physical space and box2d will tell you where the stuff is at a moment in time and you have to convert that back to a pixel space so in that sense is incredibly flexible because it abstracted from computer graphics at all and you could actually use it in the program and never draw anything and can use it to simulate some aspects of things it makes it kind of difficult to work with but because you have to do all this conversion and thinking and it makes it more complex than say matter that chance or toxic list where you can just give the engine pixel based coordinates and it gives you back pixel based coordinates but it does give it us through level of sophistication and perhaps even accuracy you could maybe say I mean I'm not expert enough in the lower level mechanics of all these engines to really say which one's more accurate than the other but but that certainly is an aspect of this for sure okay we come back and see what the next question is a flip kid and the app can use multiple engines at once you absolutely could I think you're probably asking for trouble in some ways I mean I'm sure there are some very unique interesting situations where that makes sense but there's enough time and overhead in sort of learning it's certainly worth learning multiple physics engines but you know there's enough specificity to what are the objects that are available one of the names of all the functions and there's you know if each physics engine probably has its own vector object and you can't give box2d a vector from toxic lives and you can't give toxic lives a vector from box of these you're gonna have to be converting so I'm not so sure that you would really want to do that but you again this is anything is possible because you are the designer of the system and you are the drawer of the knee or the person rendering the world so you could give the information to multiple physics engines and try to like get stuff out and send it back you know in put it back into the other ones and do some kind of crazy convoluted thing but I'm not so sure one thing I should mention is that you don't actually have to do this necessarily matter touch is and up for example I know very specifically has a kind of automatic debug view so you can just say to matter here's a canvas draw where everything is on the canvas is behind the scene in its code has the ability to do that but my point of view and showing you these things is really to focus on how you draw the stuff yourself because that's where you can really explain your own design sensibility and that's kind of one of the questions here I'm going out of order here but Albert asks I can use shaders and how can you really put your design it's really that's a really key aspect of being creative and working with physics engines in creep and making something that's not just looking like a demo so all of my examples are demos because I'm taking I'm taking the physics engine and kind of drawing the literal pieces of it on the screen in a literal way i'm overusing the word literal but but i'm saying what stay in the physics engine let me draw exactly what's in the physics engine as for simple geometric shapes whereas there's no reason why you couldn't make fuzzy textures and blend modes and do all of your creative drawing using the coordinate and geometry information that's coming out of the engine okay what else did one of us what else do I got here on this question so I this this performance considerations is absolutely a big one so one of the nice things about using a physics engine is that you know assuming it's something that's worked on by a lot of people over a long period of time you know all the ones I'm talking about our open source engines that are most of them the source code is on github and have a wide variety of contributors but probably for you know people have been working for years on optimizing them so in many ways it's going to be more efficient and have higher performance than what you might throw together and today that said these types of computations are expensive to look at every object in a system and weapon warehouse colliding with every other object and it's going to have some kind of complex polygon geometry so you know there certainly is a slowness here but you know box2d is very efficient runs very fast especially if you're in C++ that's going to run slower in the canvas and the browser qurani slower so you know yes there are performance considerations you could I sit here and like talk about them for I'm like asking myself questions now the answer that is no like I I'm that I think Marisa kind of a lot of trial and error and digging into the source code and seeing where how things worked at best okay Nick does not deserve credit for the first question I don't know who who asked that question was a great question it was not by dick thank you and let's see do some simulate more accurately than others that's you know that's another consideration here there's all usually often a tradeoff right it's going to be slower if it's more accurate it's going to be faster if it's less accurate apparently that question is from gap Gabriel frappe and Kenya okay another question here is from Philippe how to use for this I reward this question but how do use force this with physics engine and can control the losses this is a big question which I will cover and look at in a lot of my example but the question really is I kind of set you up in this way of like hey let's put stuff in the world it's in the world now let's go over here let's read where the stuff is and let's draw it to the screen but what if the thing listed in the world I want to control how it's moving or I want to like add a force into the world that's going to affect the way that the world is behaving so most of the physics engines are going to have a mechanic for this for example the body object you create this body object you put it in the world you can keep a reference to that body object and later you might be able to call the function code like add forth or apply force to cause the body to experience maybe a sudden gust of wind for example there's another there's a question those like well what if you want to affect these not with a force but by actually say hey look this object's velocity to be this and yes physics engines will let you do that because you know number one is you can just kind of dig into the source code they're going to body's going to have a variable in it someone it's like the velocity you could set it but you have to watch out a big problem here it's very easy to violate the laws of physics in witnessing extensions it's kind of hard to do that although I would love that's a good like real world challenge let's violate the laws of physics sure that would be an exciting YouTube video get lots of views but we can easily violate the laws of physics for example what if I just take an object that's in the world and I say hey you know its position is over here now instead it's positioned over here I can actually do that and it's going to appear over there but I what I've essentially just done is i teleported it which violates the laws of physics you know at least in terms of specific action and so in that case you might start to see some strange behavior but if I wanted to move something around manually through an interaction without teleporting it to cause some strange behavior what I might be able to do is attach a connection maybe I captured a connection to the object and I connect it also to my mouth and then I move the mouse around and I'm tugging around looks like I attached the string to something and moving it so that's a way that's one strategy for moving something around through you know a pearly noise algorithm or to user interaction by still staying within the sort of laws of physics of that it depends on how the physics engine works but this is certainly a common problem and another was really a question I added to my list another very common thing about physics engine is oh it's doing all this collision stuff for me that's great yeah I don't do the collision stuff but what I really want is when they collide I want to think play a doughnut music or something so if you want to do that you have to know when the things collide and that's happening in here how do you know when it collides well you could say okay well what I'm going to start to do is I'm going to look at all the things and look at where they are in relation to each other when they're when they're within a certain distance they must be collect but then if you go down that road thinking it's completely defeated the whole purpose of them using the physical engine you're starting to really implement those collision algorithms yourself so most physics engines will have this idea of a collision listener so you can write a callback function or some create some type of object that sits there and tells you information about hey there's been an event these two things collided here's object one here's object two here's their properties you know what are you going to do about this like oh if it's a purple object with a red object it plays you know see if it's a green object with a pink object it plays the note D so you can you're going to want to look for something like a listener to be able to also not just extract where the things that you want to draw but to extract moments in time that a certain event like collision events that you want to handle in a certain way okay so I don't this is like a ridiculously long intro to physics engines tutorial video that I can't imagine anybody really wanted to watch but if you're still here thank you for watching and I think the other videos in this particular playlist will have much more information and actual code about how to do these things and how they work so I hope you asked them and I hope you enjoy them and I'm sure and I hope you leave me some comments feedback okay thanks very much and I'll see you
