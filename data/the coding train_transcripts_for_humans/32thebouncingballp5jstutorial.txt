With timestamps:

00:01 - Hi again.
00:02 - So in this video, I
would like to look
00:04 - at a kind of classic problem
that comes up in programming
00:07 - graphics when you're first
getting started that requires
00:10 - a conditional statement.
00:11 - You really need an if
statement for this problem.
00:13 - And the problem is this.
00:15 - So here I have a little
bit of an example here.
00:17 - We can see there's one
variable, x equals 0.
00:20 - There's a canvas.
00:21 - I'm drawing a circle at that x,
and x, every time through draw
00:24 - is increasing,
incrementing by three.
00:26 - What will the result of that be?
00:28 - This circle that moves
across the screen and it
00:31 - leaves and it never comes back.
00:33 - So the problem that we
need to look at here
00:35 - in this particular video is,
how do we get that circle
00:38 - to turn around and come back?
00:41 - OK, so I'm going to come
over here for a second.
00:43 - And the topic, if you just
watched the previous video,
00:45 - we are looking at
conditional statements.
00:48 - Conditional statements.
00:49 - An if statement has this format,
if open parentheses closed
00:53 - parentheses open curly
bracket closed curly bracket,
00:56 - and some sort of Boolean
expression, true or false,
01:03 - goes in here.
01:04 - So let's think about,
what is the condition that
01:07 - has to be met in order
for that circle--
01:10 - the ball, so to
speak-- to turn around.
01:14 - So if this is the canvas,
here is the circle.
01:18 - It's moving along.
01:19 - If the location of this
circle is at the edge,
01:25 - that's the condition.
01:26 - So that's the condition for
which it should turn around.
01:29 - So you might think, what's
the name of the variable?
01:31 - x.
01:32 - So if x is equal to width.
01:39 - You might think that this is
where you want to get started
01:41 - and this is not
completely illegitimate.
01:43 - I mean, this could work and
it's sort of the right idea.
01:46 - If the circle location equals
the width of the window,
01:50 - that's when you
want to turn around.
01:53 - I don't know why I feel like
I want to start this one over
01:55 - again, but I'm just
going to keep going.
01:57 - I'm not starting over.
01:58 - OK.
01:59 - So this isn't really good.
02:01 - Think about it.
02:01 - First of all, in the program
that I just showed you,
02:04 - x is going up by
three each time.
02:07 - x equals x plus 3.
02:07 - It goes up by three, goes up
by three, goes up by three.
02:10 - So if the width of the
window is, like, 200,
02:15 - x might not ever
actually equal 200.
02:17 - It might be at, like, 197--
02:19 - well then it'll be
at 200, but you know,
02:21 - whatever is divisible
by 3 up there near 200.
02:23 - So this isn't really good.
02:25 - We need a condition
that will no matter what
02:28 - catch that circle before it
goes too far off the screen.
02:32 - And if you could think about
that, a nice condition for that
02:34 - might be, if x is greater than--
you could use greater than
02:37 - or equals, but I'm just
going to use greater than.
02:40 - If x is greater
than width, what?
02:44 - Do something.
02:45 - So first let's just make
sure this is the right idea.
02:48 - So let's come back over here.
02:49 - And now we can add--
hi, back over here.
02:51 - We can add this to this
particular program.
02:52 - And I'm standing in
front of it too much.
02:54 - Let me scooch this over.
02:56 - Scooch this over.
02:56 - That's a little bit better.
02:58 - So I'm going to add, if
x is greater than width--
03:02 - and remember, width is a
built-in variable in P5
03:07 - that knows inherently
the width of the canvas.
03:10 - And where does it
get that value?
03:12 - It gets it from here.
03:13 - And I could have put 600.
03:15 - I don't know where I'm looking.
03:17 - I could have put 600 down there,
but if I ever change the canvas
03:20 - size, then I won't have to
change the number elsewhere
03:23 - in the program.
03:24 - So using these built-in
variables are a useful thing.
03:26 - So you may not have
seen this, but I'm
03:30 - going to add a print statement.
03:33 - So something you
can always do in P5
03:35 - is say println, which
means print line.
03:38 - I'm going to print a line down
here in the console that's
03:40 - going to say off the screen.
03:42 - So we should only see
that message print
03:45 - if x is greater than width.
03:47 - So let's run this.
03:49 - And we can see, I
don't see the message,
03:51 - I don't see the message,
I don't see the message,
03:53 - I see the message.
03:54 - So you can see our
if statement works.
03:56 - It only triggered printing that
as soon as it left the screen.
03:59 - So now you have to ask yourself,
what's the thing we put there?
04:04 - What do you put there in order
to have it to go backwards?
04:07 - OK.
04:08 - So here's what you
might be thinking.
04:12 - It's not right, but here's
what you might be thinking.
04:14 - If going forwards is x equals
x plus 3, then going backwards
04:18 - is maybe x equals
x minus 3, right?
04:21 - So if x is greater than
width, then go backwards.
04:25 - OK, technical mishap, but
the camera is working again.
04:28 - Now where were we?
04:29 - We were looking at this
particular scenario.
04:32 - We need to get that
circle to turn around.
04:35 - We know it's moving to the
right because it's increasing
04:37 - by three every
time through draw,
04:39 - so when it gets to the edge,
it should decrease by three,
04:42 - x equals x minus 3.
04:44 - Now this is flawed
logic but it sort of
04:46 - has this almost intuitive
idea that it might be right.
04:48 - And we need to figure
out, why is it wrong
04:50 - and what's the correct way to
do it, which will hopefully
04:52 - help you understand about how
conditional statements work
04:55 - even more.
04:56 - So let me run it and let's
see what the problem is.
04:58 - So it's moving to the edge.
05:00 - Now that if statement is true
and it moves back by three.
05:03 - But what does it
do the next line?
05:05 - It moves up by three again.
05:06 - Then it comes around,
does draw again.
05:08 - Is it over the edge?
05:08 - Yeah, move back by three
and then move up by three.
05:11 - So this didn't really
solve our problem,
05:13 - I just moved it back once,
and then this line of code
05:16 - is still executing.
05:17 - What we need to do
is figure out a way
05:19 - to permanently have the circle
stop increasing by three.
05:25 - Permanently stop this
decrease by three.
05:28 - We need the number 3 to
turn into a negative 3
05:31 - for the next many
cycles through draw.
05:33 - And how do we do that?
05:35 - How do you need to do that?
05:37 - The way to do that
is with a variable.
05:38 - So let's look at this again.
05:40 - Let's say I say, if I have
a variable speed equals 3,
05:44 - and then I say x
equals x plus speed,
05:48 - and I'm going to take this out.
05:50 - So x is always
changing by whatever
05:53 - the value of that
variable, speed, is.
05:55 - And when the program starts,
that speed variable is 3.
05:58 - It's 3, it's 3, it's 3, it's 3.
06:00 - Oh, what do we want it to be?
06:01 - We want it to turn around.
06:02 - What if we made that speed
variable negative 3 now?
06:04 - x equals x plus negative
3 is the equivalent
06:07 - of x equals x minus 3.
06:09 - So all I need to do here is
say speed equals negative 3.
06:15 - So at a certain moment,
speed equals negative 3.
06:21 - And when we get to the edge, you
go, ah, then it's moving around
06:25 - and now it's coming
back and goodbye.
06:27 - So for you, with
this exercise, you
06:30 - might think about, OK, what if
it's also moving up and down?
06:33 - How do you deal with the
top and bottom edges?
06:35 - How do you deal just with
the right and left edge?
06:37 - How might you have a changed
color or changed size?
06:40 - How could you have other
things about the circle
06:42 - change every time
it hits a boundary?
06:45 - Maybe its speed even changes,
so each time it hits,
06:47 - it starts going
faster and faster.
06:49 - There are lots of
little variations
06:51 - on this that you could
try that I might recommend
06:53 - doing to kind of keep
playing with this idea
06:55 - of a conditional statement.
06:57 - And in the next
video, what I want
06:58 - to look at is something that
is kind of missing here,
07:02 - is, what if I want to say,
if it's greater than width,
07:05 - do this.
07:06 - Otherwise, do something else.
07:07 - So this idea of an else
or an else if is something
07:10 - we need to look at.
07:11 - We can also join Boolean
logic with an AND and an OR.
07:14 - You know, if I'm feeling nervous
and scared, then I don't know,
07:19 - don't make videos
about programming.
07:24 - Anyway, you get
the idea, AND Or.
07:25 - So those are the things I need
to look at in the next video,
07:28 - which I will do.
07:29 - So I'm going to hit Stop
here and you're going
07:33 - to not be watching anymore.
07:34 - OK.

Cleaned transcript:

Hi again. So in this video, I would like to look at a kind of classic problem that comes up in programming graphics when you're first getting started that requires a conditional statement. You really need an if statement for this problem. And the problem is this. So here I have a little bit of an example here. We can see there's one variable, x equals 0. There's a canvas. I'm drawing a circle at that x, and x, every time through draw is increasing, incrementing by three. What will the result of that be? This circle that moves across the screen and it leaves and it never comes back. So the problem that we need to look at here in this particular video is, how do we get that circle to turn around and come back? OK, so I'm going to come over here for a second. And the topic, if you just watched the previous video, we are looking at conditional statements. Conditional statements. An if statement has this format, if open parentheses closed parentheses open curly bracket closed curly bracket, and some sort of Boolean expression, true or false, goes in here. So let's think about, what is the condition that has to be met in order for that circle the ball, so to speak to turn around. So if this is the canvas, here is the circle. It's moving along. If the location of this circle is at the edge, that's the condition. So that's the condition for which it should turn around. So you might think, what's the name of the variable? x. So if x is equal to width. You might think that this is where you want to get started and this is not completely illegitimate. I mean, this could work and it's sort of the right idea. If the circle location equals the width of the window, that's when you want to turn around. I don't know why I feel like I want to start this one over again, but I'm just going to keep going. I'm not starting over. OK. So this isn't really good. Think about it. First of all, in the program that I just showed you, x is going up by three each time. x equals x plus 3. It goes up by three, goes up by three, goes up by three. So if the width of the window is, like, 200, x might not ever actually equal 200. It might be at, like, 197 well then it'll be at 200, but you know, whatever is divisible by 3 up there near 200. So this isn't really good. We need a condition that will no matter what catch that circle before it goes too far off the screen. And if you could think about that, a nice condition for that might be, if x is greater than you could use greater than or equals, but I'm just going to use greater than. If x is greater than width, what? Do something. So first let's just make sure this is the right idea. So let's come back over here. And now we can add hi, back over here. We can add this to this particular program. And I'm standing in front of it too much. Let me scooch this over. Scooch this over. That's a little bit better. So I'm going to add, if x is greater than width and remember, width is a builtin variable in P5 that knows inherently the width of the canvas. And where does it get that value? It gets it from here. And I could have put 600. I don't know where I'm looking. I could have put 600 down there, but if I ever change the canvas size, then I won't have to change the number elsewhere in the program. So using these builtin variables are a useful thing. So you may not have seen this, but I'm going to add a print statement. So something you can always do in P5 is say println, which means print line. I'm going to print a line down here in the console that's going to say off the screen. So we should only see that message print if x is greater than width. So let's run this. And we can see, I don't see the message, I don't see the message, I don't see the message, I see the message. So you can see our if statement works. It only triggered printing that as soon as it left the screen. So now you have to ask yourself, what's the thing we put there? What do you put there in order to have it to go backwards? OK. So here's what you might be thinking. It's not right, but here's what you might be thinking. If going forwards is x equals x plus 3, then going backwards is maybe x equals x minus 3, right? So if x is greater than width, then go backwards. OK, technical mishap, but the camera is working again. Now where were we? We were looking at this particular scenario. We need to get that circle to turn around. We know it's moving to the right because it's increasing by three every time through draw, so when it gets to the edge, it should decrease by three, x equals x minus 3. Now this is flawed logic but it sort of has this almost intuitive idea that it might be right. And we need to figure out, why is it wrong and what's the correct way to do it, which will hopefully help you understand about how conditional statements work even more. So let me run it and let's see what the problem is. So it's moving to the edge. Now that if statement is true and it moves back by three. But what does it do the next line? It moves up by three again. Then it comes around, does draw again. Is it over the edge? Yeah, move back by three and then move up by three. So this didn't really solve our problem, I just moved it back once, and then this line of code is still executing. What we need to do is figure out a way to permanently have the circle stop increasing by three. Permanently stop this decrease by three. We need the number 3 to turn into a negative 3 for the next many cycles through draw. And how do we do that? How do you need to do that? The way to do that is with a variable. So let's look at this again. Let's say I say, if I have a variable speed equals 3, and then I say x equals x plus speed, and I'm going to take this out. So x is always changing by whatever the value of that variable, speed, is. And when the program starts, that speed variable is 3. It's 3, it's 3, it's 3, it's 3. Oh, what do we want it to be? We want it to turn around. What if we made that speed variable negative 3 now? x equals x plus negative 3 is the equivalent of x equals x minus 3. So all I need to do here is say speed equals negative 3. So at a certain moment, speed equals negative 3. And when we get to the edge, you go, ah, then it's moving around and now it's coming back and goodbye. So for you, with this exercise, you might think about, OK, what if it's also moving up and down? How do you deal with the top and bottom edges? How do you deal just with the right and left edge? How might you have a changed color or changed size? How could you have other things about the circle change every time it hits a boundary? Maybe its speed even changes, so each time it hits, it starts going faster and faster. There are lots of little variations on this that you could try that I might recommend doing to kind of keep playing with this idea of a conditional statement. And in the next video, what I want to look at is something that is kind of missing here, is, what if I want to say, if it's greater than width, do this. Otherwise, do something else. So this idea of an else or an else if is something we need to look at. We can also join Boolean logic with an AND and an OR. You know, if I'm feeling nervous and scared, then I don't know, don't make videos about programming. Anyway, you get the idea, AND Or. So those are the things I need to look at in the next video, which I will do. So I'm going to hit Stop here and you're going to not be watching anymore. OK.
