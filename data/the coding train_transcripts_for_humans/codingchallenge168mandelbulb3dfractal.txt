With timestamps:

00:00 - hello everyone and welcome to
00:03 - coding challenge i'm slightly afraid
00:05 - it's the mandelbulb it's something that
00:08 - i've wanted to try for a really long
00:10 - time but i've never really thought that
00:12 - i could do it i think today is the day
00:14 - where maybe i'll be able to it's my hope
00:16 - that we're going to get to the point
00:17 - where we understand the mandelbulb able
00:19 - to write the code for the mandelbulb and
00:21 - then you the viewing audience will take
00:23 - it from there and make all sorts of
00:26 - beautiful versions of this amazing
00:28 - intricate fantastical fractal pattern in
00:31 - 3d now before i get going i want to
00:34 - mention two previous videos one is my
00:37 - mandelbrot coding challenge from six
00:39 - plus years ago that is the origin story
00:42 - of the mandelbulb itself as well as my
00:45 - spherical geometry coding challenge
00:47 - which looks at how to map cartesian
00:49 - coordinates in 3d space to the surface
00:52 - of a sphere and we're going to need that
00:54 - same math
00:55 - when taking this 2d fractal this 2d
00:58 - mandelbrot set and stretching it
01:00 - twisting it extruding it pulling it low
01:04 - into three dimensions now this is not a
01:06 - new idea the mandelbulb itself this idea
01:08 - of taking the 2d mandelbrot set and
01:10 - making three dimensions was first
01:12 - proposed in 1997 by jules reese but if
01:16 - you've seen the mandible before and it
01:18 - appears in popular culture i believe
01:19 - it's in the movie big hero 6. maybe i
01:21 - could show a clip of that the one that
01:23 - you might have seen and the one that i'm
01:25 - going to try to make is the 2009 version
01:29 - developed by daniel white and paul
01:31 - nylander before i write the code let's
01:34 - take a step back and let me try to
01:35 - explain the concepts behind what i'm
01:37 - about to attempt to do here and the
01:39 - place where i really need to start is
01:41 - the mandelbrot set itself
01:47 - the mandelbrot set appears as a pattern
01:50 - on a complex plane while a complex plane
01:53 - is a very fancy term for a plane of
01:56 - numbers that has a horizontal axis and a
01:58 - vertical axis the key difference here is
02:01 - that this complex number which has both
02:04 - a real component
02:05 - and an imaginary component
02:08 - involves something known as i
02:11 - i is the square root of negative one
02:14 - this is often referred to as an
02:16 - imaginary number because i don't know
02:18 - the square root of negative one i can't
02:19 - calculate that that must be part of your
02:22 - imagination but it's actually something
02:24 - very real in theoretical and practical
02:27 - mathematics saying that it doesn't exist
02:28 - is like saying well negative numbers
02:30 - don't exist because i can't actually
02:31 - make you negative three apples
02:33 - so to calculate and visualize the
02:35 - mandelbrot set the idea is to look at
02:38 - every single
02:40 - complex number on this plane
02:43 - so if i pick this number i might have a
02:45 - certain value for a
02:46 - maybe it's 0.4 and a certain value for b
02:49 - maybe it's negative 0.2 0.4 minus 0.2 i
02:54 - and the idea here is to take this number
02:57 - plug it into c
02:59 - start with z equal to zero
03:02 - so
03:03 - z iteration one
03:06 - equals zero
03:08 - plus
03:09 - c
03:09 - so now this is the new value of z
03:12 - so at z iteration two i get what's zero
03:16 - plus c is c
03:17 - c squared plus c and then at iteration 3
03:21 - i'm going to take this value c squared
03:24 - plus c square it plus c and so on and so
03:28 - forth and the idea here is if i apply
03:30 - this math over and over again the result
03:34 - is going to either go to infinity or
03:37 - stay bounded it's going to kind of
03:38 - oscillate around a stable value so i'm
03:41 - examining every single point on this
03:44 - complex plane running this algorithm and
03:46 - determining whether it stays bounded or
03:48 - tends to infinity the set of the points
03:51 - that stay bounded i always get this
03:53 - confused but the set of the points that
03:55 - stay bounded is the mandelbrot set if i
03:58 - color all of those points black and all
04:01 - the other points that are not part of
04:02 - the metal bar set white i will see this
04:05 - fractal pattern so if this is the
04:07 - mandelbrot set
04:09 - what is the mandelbulb
04:12 - the mandelbrot set is inherently a
04:15 - fractal that lives in two dimensions
04:17 - instead of a complex number could we use
04:21 - something called a triplex number
04:25 - after all a coordinate in
04:27 - three-dimensional space
04:30 - has three components to it x y z so
04:33 - there's there's plenty more to this
04:34 - story here that i want to map out some
04:36 - of the math to but i think this is a
04:38 - good time to just take a little pause
04:40 - and actually set up a processing sketch
04:43 - that will allow us to visualize triplex
04:46 - numbers or in essence
04:48 - 3d coordinates in space
04:51 - for this coding challenge i'm going to
04:52 - use processing it's a creative coding
04:54 - framework it's built in java you can
04:56 - download it at processing.org and i
04:58 - probably have hundreds of videos that
05:00 - talk about it but check out the website
05:02 - check out the processing foundation to
05:04 - learn more the reason why i'm using it
05:06 - is because it has a wonderful 3d
05:07 - rendering engine that exists in p52 but
05:10 - i want to explore this in processing
05:11 - first
05:15 - let me say a few quick things about the
05:16 - code i have so far size gives me a
05:19 - window size of 600x600 pixels p3d for 3d
05:23 - rendering window move is just because
05:24 - i'm obsessive and i want the processing
05:26 - window to be on the other side of my
05:28 - desktop here
05:30 - that's a new feature i don't know if
05:31 - that name will stay but it's working
05:33 - right now and then i have a draw loop
05:35 - and i'm just drawing a background the
05:37 - first step i'd like to do is just be
05:39 - able to visualize the voxels of a cube
05:43 - because ultimately i'm going to try to
05:45 - place this mantle bulb inside of a fixed
05:47 - space in three dimensions
05:49 - so i'm going to use a variable to talk
05:51 - about the dimensions of a cube
05:54 - i'm going to call that dim short for
05:56 - dimensions
06:00 - so i'm starting off with a triple nested
06:03 - loop for every i from 0 to 32 and every
06:06 - j from 0 to 32 and every k from 0 to 32
06:09 - let's create an x y z point in three
06:12 - dimensional space
06:21 - and there you see this cube all of the
06:23 - voxels all of these 3d pixels points in
06:27 - three-dimensional space making up a cube
06:29 - every single point is spaced out between
06:32 - negative 100 and 100 along the x y and z
06:35 - axis and something that i can do just to
06:37 - make this a little nicer to examine and
06:39 - look at is add the processing library
06:42 - called pz cam
06:47 - pz cam will center the view in the
06:50 - center of the processing window itself
06:51 - so i no longer need this translate
06:54 - and then once i run the sketch i can now
06:56 - use the mouse to sort of look around
06:58 - zoom in and out of this 3d point cloud
07:02 - if you're wondering what that 500 is
07:04 - doing that's kind of like the camera
07:06 - position how far away am i looking at
07:09 - the points that i'm placing in space
07:12 - so making that 1500 it's quite a bit
07:14 - further away but i can scroll to zoom in
07:17 - and rotate and spin around
07:19 - so how do i make the leap from this
07:21 - value c right here which is a complex
07:23 - number with a x component and a y
07:26 - component to a triplex number with an x
07:29 - component y component and z component
07:31 - and the answer lies within something
07:34 - called a spherical coordinate but before
07:36 - i define a spherical coordinate let's
07:38 - review a polar coordinate first
07:43 - so in two dimensions a cartesian
07:46 - coordinate is an x y coordinate
07:50 - defining a position according to its
07:52 - placement along the horizontal and
07:53 - vertical axis and i can describe that
07:55 - same point as a polar coordinate
07:59 - its position is indicated as a distance
08:02 - from the origin r a radius and an angle
08:05 - of rotation theta
08:08 - we can describe points in three
08:10 - dimensions in a similar way using
08:12 - cartesian and spherical
08:18 - cartesian having an x y and z axis
08:27 - and a spherical coordinate being
08:28 - described as an r just like in polar
08:31 - coordinates a distance from the center
08:33 - but then two angles of rotation theta
08:36 - and phi
08:37 - but why do i need spherical coordinates
08:41 - after all for the regular mandelbrot set
08:43 - i didn't need polar coordinates i could
08:45 - just take this complex number and square
08:47 - it no problem so while there might be a
08:50 - way for me to create a version of the
08:53 - mandelbot set in 3d without the idea of
08:56 - spherical coordinates the mandelbulb
08:58 - that i want to make the one that was
09:00 - developed in 2009
09:02 - uses the idea of spherical coordinates
09:04 - to take a triplex number and square it
09:07 - or cube it or put it to the fourth power
09:09 - and ultimately to the eighth power so we
09:12 - have to look at a little bit more math
09:14 - before i put this into the code
09:19 - remember the iterative formula that i'm
09:22 - using for both the mandelbrot set and
09:25 - the mandelbulb is as follows
09:27 - z
09:28 - equals z now with mandelbrot it's z
09:31 - squared but a more generic form would be
09:33 - z to the n plus c and now c
09:37 - is
09:38 - a triplex number so if z
09:42 - equals zero to start we have z the next
09:46 - z is zero to the n plus c
09:51 - which is just c and then the next z
09:55 - is
09:55 - c to the n plus c
09:58 - and the next z is
10:01 - c to the n plus c to the n plus c so
10:05 - looking at this math that i'm doing i
10:07 - need an answer to the question how do i
10:10 - calculate
10:11 - x y z
10:13 - to the nth power
10:15 - and this is the innovation from daniel
10:17 - white and paul nylander a formula for
10:19 - taking a vector v in three dimensions x
10:22 - y z and setting it to the nth power to
10:25 - do that requires the spherical version
10:28 - of that x y z vector we need the r we
10:31 - need the theta we need the fee if you
10:33 - look at that formula and wander back to
10:35 - this original proposal which has exactly
10:38 - the formulas written out here
10:40 - this is how i calculate r theta and phi
10:43 - and this is how i set xyz to the nth
10:45 - power i think i can start to put this in
10:47 - the code now i'm going to have to go
10:48 - back and forth between this page and the
10:50 - code many times so first change i want
10:53 - to do is while it's plotting the points
10:54 - it was useful to map the all the voxels
10:58 - out to between negative 100 and 100 i
11:00 - want to now keep all my numbers between
11:02 - the range of negative 1 and 1.
11:05 - then from this x y and z
11:08 - coordinate i need to convert that to
11:10 - spherical coordinates
11:14 - so r is
11:16 - the square root of x times x y times y
11:19 - and z times z
11:22 - theta is
11:25 - the arc tangent of the square root of
11:28 - x times x
11:30 - y times y
11:32 - comma z
11:33 - and phi is the arc tangent
11:36 - y comma x
11:38 - now there's certainly efficiencies that
11:40 - i could do in this code in terms of like
11:42 - i'm squaring numbers and doing the
11:43 - square root multiple times but i'm just
11:46 - going to pre-compute the whole mandal
11:47 - bulb one time and set up so i'm not
11:49 - going to worry about that right now
11:52 - do i need a loop
11:53 - now i need a z
11:55 - i need a c
11:57 - let me look back at that webpage oh yeah
11:59 - ah okay look at this i need to take get
12:02 - a new x and a new y and a new z
12:12 - now processing is wondering what is n so
12:15 - n is the order it is the power to which
12:18 - i am going to set everything in my
12:20 - formula z equals z to the n plus c and
12:24 - we can try different numbers to get
12:26 - different patterns but i want to start
12:27 - with the number eight
12:30 - what's a little bit unfortunate here
12:32 - is that i want to use the variable z
12:35 - to keep track of z and z and zero z one
12:38 - in in a loop
12:40 - but z is also the component of the
12:42 - vector x y z so i think i need a new
12:46 - variable name for this
12:48 - what if i make it a vector and call it z
12:50 - zz
12:52 - so it's zz
12:52 - [Music]
12:54 - zeta oh people are saying zeta i love
12:57 - that okay let's call it zeta new
12:59 - variable name makes me so happy
13:02 - now i'm gonna do something that i really
13:04 - hate doing and i really hate that i'm
13:06 - about to do this but
13:08 - no i could do it a different way no i'm
13:09 - just going to do it the way i hate i'm
13:11 - going to say while true
13:13 - now generally speaking if you're going
13:14 - to say wild true you've got a problem
13:16 - because that's a loop that's never going
13:17 - to end the only way to get out of a loop
13:20 - that's looping while true the hard-coded
13:23 - value true that can never be changed is
13:25 - to put a break in somewhere so i need to
13:27 - remember put that break in there else
13:29 - i'm gonna have an infinite loop and
13:30 - everything's gonna crash and we're just
13:31 - gonna throw away all this footage and
13:33 - i'm going to be done never come back to
13:34 - another challenge ever again and just to
13:37 - set myself up for success i'm going to
13:39 - make a variable called
13:41 - max iterations
13:44 - i'm going to set that equal to 10
13:46 - and then i'm going to have iteration
13:48 - equals zero i'm going to say iteration
13:51 - plus plus
13:52 - if iteration is greater than max
13:55 - iterations
13:58 - break
13:59 - now this is kind of silly because i
14:01 - could have just said while iteration is
14:03 - less than max iterations but i don't
14:05 - know this is the way i'm doing it
14:07 - we'll clean it up later this int n
14:09 - equals 8 does not need to be in this
14:11 - loop i mean it honestly could just be a
14:12 - global variable
14:13 - but i'm going to put it up here just so
14:15 - i have all the variables i want to mess
14:16 - with
14:17 - the order of this stuff is going to be
14:19 - important
14:21 - so
14:22 - zeta starts at zero and the very first
14:25 - time
14:26 - i'm taking zeta squared
14:29 - and then adding c to it
14:33 - so could i make a vector that holds the
14:37 - spherical coordinate and that is c
14:40 - i think that's right so then in the loop
14:44 - zeta equals
14:47 - power i mean this won't work because
14:48 - zeta is a vector power
14:51 - zeta to the n
14:53 - plus
14:54 - c
14:55 - right
14:56 - this is the idea of what i'm doing i'm
14:58 - doing this every single time and the way
15:00 - that i take
15:02 - zeta to the power of n are these
15:04 - formulas
15:06 - so zeta dot x
15:08 - equals new x
15:11 - plus c dot x
15:17 - the first thing that happens is i need
15:20 - to get
15:22 - these this should be in the loop
15:24 - i think it's really going to help me if
15:25 - i have a function to convert
15:27 - from cartesian to polar
15:39 - i kind of hate that i'm using
15:42 - the p vector for this because i'm
15:44 - putting the r and x the thick and y and
15:46 - the
15:47 - the v in z which is quite confusing
15:50 - because now when i come to do this
15:54 - this is actually like
15:57 - c dot x oh okay i'm gonna write my own
16:00 - spherical class
16:03 - might be totally unnecessary but i'm
16:05 - gonna do it
16:09 - just let me figure this out in my own
16:11 - way please i'm sure i'm doing this wrong
16:13 - but i'll get there eventually
16:18 - so the function returns a spherical
16:21 - object
16:22 - it's basically just like an object that
16:24 - holds three values but i want to be able
16:26 - to name those values r theta and phi so
16:29 - this is spherical
16:31 - c
16:32 - is the spherical version of x y z
16:37 - power of c dot r
16:40 - c dot theta
16:44 - and then
16:46 - oh there's no
16:47 - this was a mistake
16:49 - i'm getting very close i can feel it
16:53 - oh can i just do this
16:57 - like isn't that what these are
17:02 - i've mixed everything up
17:04 - let's go back to the whiteboard
17:06 - c
17:08 - is x y z
17:10 - so c to the n is defined by what i did
17:13 - and this gives me in my code
17:15 - new x
17:17 - new y
17:18 - new z
17:20 - then i add c
17:21 - the original x y z to it
17:24 - and then i take this convert it to
17:26 - spherical
17:27 - and do it again to the nth power okay
17:31 - i s when i said it over there it made
17:33 - sense in my head and now i have to see
17:35 - if i can put that into action here
17:38 - won't it work
17:40 - if i just start with this
17:43 - by the way why am i getting weird little
17:44 - errors here the variable r does not
17:47 - exist
17:48 - oh
17:50 - i have to define these variables
17:52 - i think this is fine because i'm
17:54 - starting with zero so the spherical
17:57 - coordinate zero zero zero is going to be
17:59 - 0 0 0. so i could go through this then
18:03 - add x y z to it
18:05 - and then get the new spherical
18:07 - coordinate
18:08 - put it to the power of n
18:10 - then add x y z to it again et cetera et
18:12 - cetera i think this is good
18:14 - i think i've got it sorry to interrupt i
18:16 - really just had to come from the future
18:18 - to acknowledge the fact that this
18:19 - variable c is really unfortunately named
18:22 - if you look at the formula for the
18:24 - mandelbulb itself z equals z to the n
18:26 - plus c there's a c in there yeah but
18:29 - it's not that c why did i call it that c
18:32 - the actual c the constant is the triplex
18:35 - number x y z that i'm adding iteratively
18:38 - each time through this loop that
18:40 - spherical coordinate is just the
18:42 - spherical version of zeta
18:47 - so this maybe is a more accurate way to
18:49 - write it not that these variable names
18:50 - are that great either but it's better
18:52 - than putting a false c there so the rest
18:55 - of the video is going to continue with
18:56 - the c there but i hope in case this was
18:58 - a point of confusion for you that this
19:00 - helps a little bit
19:01 - as you were
19:02 - let's just run this code
19:04 - why not it's not going to visualize
19:06 - anything let's see if i get any errors
19:08 - all
19:08 - right and if i were to say like if i
19:11 - were to multiply these i mean i could
19:13 - just use scale
19:15 - but this math is going to work
19:18 - for every for every pixel there okay i
19:21 - think we're getting somewhere so now i
19:23 - just need to figure out and am i in
19:25 - setup no i'm in draw so here's the thing
19:27 - i don't want to calculate the mandelbulb
19:29 - over and over again
19:31 - so i think what i want to do
19:33 - is take this
19:35 - code
19:36 - and put it in setup
19:40 - then what i'm going to do is i'm going
19:43 - to create an array of all the points
19:46 - that are within the mandible set itself
19:49 - that'll be an array list of p vectors
19:54 - in other words
19:55 - if at this point instead of drawing a
19:58 - point i just say
20:01 - add new p vector
20:05 - and i should do something better than
20:06 - just multiplying each value by 100 but
20:08 - that'll be good enough for right now
20:11 - right so right now i'm adding every
20:13 - point i'm doing the mandible math but
20:15 - i'm not checking what the outcome is i'm
20:17 - just doing the mandible math and adding
20:18 - every point into this arraylist then in
20:21 - draw
20:25 - i should still see that cube
20:28 - okay now all i need to do
20:31 - is determine
20:33 - whether or not
20:35 - i should add the point as part of the
20:37 - mandelbulb set itself
20:40 - so i'm only going to do that if i make
20:42 - it
20:43 - to max iterations if i make it to max
20:46 - iterations that means it is bounded i
20:50 - haven't gotten past some large value so
20:53 - i also need to test if i've gotten to
20:56 - some large value how do i do that well i
20:59 - think the easiest way for me to do that
21:01 - would be to
21:03 - check r
21:04 - r is like the distance from the center
21:07 - so if r keeps going like way way way out
21:10 - and way way out like greater than 16
21:13 - then break
21:15 - so now only the points where the radius
21:18 - value hasn't gotten past a number the
21:21 - number 16 will make their way into the
21:24 - mandelbulb set itself oh my god
21:28 - what is the chance that when i run the
21:30 - code right now i will see something that
21:32 - looks like the mantle bulb after being
21:34 - in this room for like you know i've been
21:36 - in this room for four hours today i mean
21:38 - i was thinking doing a lot of stuff
21:40 - before i even started coding because i
21:41 - was so stressed out
21:44 - oh
21:46 - everybody
21:47 - say your 3d fractal prayer i mean
21:48 - there's no way this is going to work
21:49 - right
21:50 - no chance
21:52 - all right i'm hitting run
21:56 - i can't look
21:57 - wait a second
22:00 - okay
22:00 - that kind of looks like
22:03 - i don't know
22:04 - kind of looks like a mandel bulby thing
22:07 - let's make the dimension 64.
22:13 - oh my goodness
22:15 - okay so here's the thing ah
22:17 - that's the mandelbulb
22:19 - that's the mandelbo
22:21 - i think that's the mandible
22:23 - okay i think i know what i want to do
22:25 - here which is that let me just make n
22:27 - equal to one
22:29 - just like that cube thing right
22:31 - why is that not a sphere somebody will
22:33 - explain this to me in the comments i
22:34 - thought that would be a sphere but it's
22:36 - running really slow
22:37 - the reason is well i need some kind of
22:39 - prop some kind of device hold on here is
22:42 - a basketball a little miniature
22:44 - basketball that really needs some air
22:45 - bumped into it oh no oh no it's all well
22:48 - it's fine i'm gonna make this into the
22:49 - mandelbulb what i have done
22:51 - i'm plotting every point along the
22:54 - surface of this mandelbulb basketball as
22:57 - well as every point on the inside
23:00 - so i think what i want to look for are
23:02 - the points at which
23:04 - the neighbor
23:06 - is
23:06 - a
23:07 - bounded point or a not bounded point
23:09 - right like if i'm looking at where is
23:11 - the edge between this basketball and the
23:14 - rest of the three-dimensional space let
23:16 - me go back to eight
23:18 - so basically
23:20 - as i'm looking at i guess k is the z
23:23 - axis so i can do it i can just consider
23:25 - every point along the z axis
23:28 - right before i do this
23:30 - boolean edge
23:33 - so they're going to be
23:34 - the when i start like the middle bulb is
23:36 - in the center so when i start
23:39 - they're going to be
23:40 - not
23:41 - bounded so as soon as i find one
23:46 - that makes it to the end
23:48 - edge is true
23:50 - so as long as it's not
23:52 - the not the edge edge is true
23:55 - um add it to the set
23:58 - let's run this
24:02 - yeah so that's like half the shape you
24:04 - can kind of see it can i go up to 128
24:07 - so you can see i'm just getting the
24:09 - bottom half of the mandle bulb
24:12 - because
24:14 - i also need to say
24:16 - if
24:17 - it is an edge
24:19 - then i can say
24:20 - edge is false
24:23 - right this is like the edge variable is
24:24 - like a switch
24:26 - like first it's off and it finds a point
24:28 - on the mandelbulb in the mandelbulb it
24:30 - flips it on and and places that point
24:33 - now it doesn't flip that switch back off
24:36 - until it finds a part that's not so it
24:38 - can flip it off and then find the next
24:39 - one i think this is gonna work
24:47 - yeah that's a point cloud mandelbulb
24:50 - look at that that's a point clown vandal
24:52 - bomb
24:53 - we did it
24:54 - [Laughter]
24:56 - i mean it looks nothing like the beauty
24:58 - of the like fully ray traced rendered
25:01 - colored lit mandelbalms but my by golly
25:05 - my brain somehow
25:07 - made it from the start of whatever i
25:09 - started today to this and i'm very very
25:11 - happy
25:12 - the other thing i can play with is what
25:14 - value of n am i using and we can see
25:17 - here in this post that these are the
25:19 - shapes that i would get from the power
25:20 - of 2 power of 3 power of 16 whoa let's
25:24 - look at that
25:26 - n is 16 here
25:30 - yeah take a look at that crazy
25:32 - fractal death star
25:36 - hi uh dan from the future here let's
25:38 - wrap this video up dad from the past
25:40 - kept going down a road uh there was no
25:43 - train there or was off the tracks
25:46 - and didn't really get anywhere what i've
25:48 - explored here is the math behind the
25:49 - mantle bulb and rendering it as a point
25:51 - cloud so there's probably some things
25:53 - that you could try to do even with this
25:55 - like is there some logic by which you
25:57 - could choose different colors for
25:58 - different points of the point cloud
26:00 - could you render each point of the point
26:01 - cloud as not just a point but with a
26:04 - texture or some other kind of shape
26:06 - could you save all the points from out
26:09 - from processing and import them into
26:11 - something i tried my hand a little bit
26:13 - at this using something called mesh lab
26:14 - and you can see some of the sort of
26:16 - awkward results i'm showing you here but
26:18 - the manual bulb fractal fractals in
26:20 - general have so much detail to them that
26:22 - trying to turn it into a mesh isn't a
26:24 - particularly viable solution the most
26:26 - common technique for rendering the
26:28 - mandelbulb in its full spectacular glory
26:31 - is using an algorithm called ray
26:33 - marching in combination with the signed
26:35 - distance function this is a technique
26:37 - that allows you to render different
26:38 - kinds of shapes in 3d like a sphere or a
26:41 - cube
26:42 - but you can also use it to render any
26:45 - kind of shape or you can estimate the
26:47 - distance to that shape from the eye or
26:51 - camera that's looking at that shape but
26:52 - if you want to get started on learning
26:54 - about these algorithms take a look at
26:56 - the website and youtube channel from
26:57 - anigo quiles it is a literal treasure
27:00 - trove of graphics tutorials and
27:02 - knowledge wow so i don't want this to be
27:05 - the end i think i'm gonna have to just
27:07 - completely learn how shaders work now
27:10 - learn about sign distance functions and
27:12 - return someday i don't know you know in
27:14 - 10 years when you're still watching this
27:15 - video and i haven't done it yet please
27:16 - let me know in the comments i'm going to
27:18 - return someday to uh revisit different
27:22 - techniques for rendering the mandelbulb
27:24 - in real time maybe using shaders maybe
27:26 - using sign distance functions maybe just
27:28 - using the point cloud in a different way
27:30 - i don't know yet if you are able to make
27:31 - your own creative twist off this point
27:33 - cloud mandelbulb please let me know
27:35 - share it with me in the comments social
27:37 - media on the coding train website all
27:39 - the ways i love you all i love you for
27:41 - having me somehow to the end of this
27:43 - video i can't believe you did if you did
27:45 - and thank you i'll see you soon in the
27:47 - next coding challenge on the coding
27:49 - trade
27:51 - [Music]

Cleaned transcript:

hello everyone and welcome to coding challenge i'm slightly afraid it's the mandelbulb it's something that i've wanted to try for a really long time but i've never really thought that i could do it i think today is the day where maybe i'll be able to it's my hope that we're going to get to the point where we understand the mandelbulb able to write the code for the mandelbulb and then you the viewing audience will take it from there and make all sorts of beautiful versions of this amazing intricate fantastical fractal pattern in 3d now before i get going i want to mention two previous videos one is my mandelbrot coding challenge from six plus years ago that is the origin story of the mandelbulb itself as well as my spherical geometry coding challenge which looks at how to map cartesian coordinates in 3d space to the surface of a sphere and we're going to need that same math when taking this 2d fractal this 2d mandelbrot set and stretching it twisting it extruding it pulling it low into three dimensions now this is not a new idea the mandelbulb itself this idea of taking the 2d mandelbrot set and making three dimensions was first proposed in 1997 by jules reese but if you've seen the mandible before and it appears in popular culture i believe it's in the movie big hero 6. maybe i could show a clip of that the one that you might have seen and the one that i'm going to try to make is the 2009 version developed by daniel white and paul nylander before i write the code let's take a step back and let me try to explain the concepts behind what i'm about to attempt to do here and the place where i really need to start is the mandelbrot set itself the mandelbrot set appears as a pattern on a complex plane while a complex plane is a very fancy term for a plane of numbers that has a horizontal axis and a vertical axis the key difference here is that this complex number which has both a real component and an imaginary component involves something known as i i is the square root of negative one this is often referred to as an imaginary number because i don't know the square root of negative one i can't calculate that that must be part of your imagination but it's actually something very real in theoretical and practical mathematics saying that it doesn't exist is like saying well negative numbers don't exist because i can't actually make you negative three apples so to calculate and visualize the mandelbrot set the idea is to look at every single complex number on this plane so if i pick this number i might have a certain value for a maybe it's 0.4 and a certain value for b maybe it's negative 0.2 0.4 minus 0.2 i and the idea here is to take this number plug it into c start with z equal to zero so z iteration one equals zero plus c so now this is the new value of z so at z iteration two i get what's zero plus c is c c squared plus c and then at iteration 3 i'm going to take this value c squared plus c square it plus c and so on and so forth and the idea here is if i apply this math over and over again the result is going to either go to infinity or stay bounded it's going to kind of oscillate around a stable value so i'm examining every single point on this complex plane running this algorithm and determining whether it stays bounded or tends to infinity the set of the points that stay bounded i always get this confused but the set of the points that stay bounded is the mandelbrot set if i color all of those points black and all the other points that are not part of the metal bar set white i will see this fractal pattern so if this is the mandelbrot set what is the mandelbulb the mandelbrot set is inherently a fractal that lives in two dimensions instead of a complex number could we use something called a triplex number after all a coordinate in threedimensional space has three components to it x y z so there's there's plenty more to this story here that i want to map out some of the math to but i think this is a good time to just take a little pause and actually set up a processing sketch that will allow us to visualize triplex numbers or in essence 3d coordinates in space for this coding challenge i'm going to use processing it's a creative coding framework it's built in java you can download it at processing.org and i probably have hundreds of videos that talk about it but check out the website check out the processing foundation to learn more the reason why i'm using it is because it has a wonderful 3d rendering engine that exists in p52 but i want to explore this in processing first let me say a few quick things about the code i have so far size gives me a window size of 600x600 pixels p3d for 3d rendering window move is just because i'm obsessive and i want the processing window to be on the other side of my desktop here that's a new feature i don't know if that name will stay but it's working right now and then i have a draw loop and i'm just drawing a background the first step i'd like to do is just be able to visualize the voxels of a cube because ultimately i'm going to try to place this mantle bulb inside of a fixed space in three dimensions so i'm going to use a variable to talk about the dimensions of a cube i'm going to call that dim short for dimensions so i'm starting off with a triple nested loop for every i from 0 to 32 and every j from 0 to 32 and every k from 0 to 32 let's create an x y z point in three dimensional space and there you see this cube all of the voxels all of these 3d pixels points in threedimensional space making up a cube every single point is spaced out between negative 100 and 100 along the x y and z axis and something that i can do just to make this a little nicer to examine and look at is add the processing library called pz cam pz cam will center the view in the center of the processing window itself so i no longer need this translate and then once i run the sketch i can now use the mouse to sort of look around zoom in and out of this 3d point cloud if you're wondering what that 500 is doing that's kind of like the camera position how far away am i looking at the points that i'm placing in space so making that 1500 it's quite a bit further away but i can scroll to zoom in and rotate and spin around so how do i make the leap from this value c right here which is a complex number with a x component and a y component to a triplex number with an x component y component and z component and the answer lies within something called a spherical coordinate but before i define a spherical coordinate let's review a polar coordinate first so in two dimensions a cartesian coordinate is an x y coordinate defining a position according to its placement along the horizontal and vertical axis and i can describe that same point as a polar coordinate its position is indicated as a distance from the origin r a radius and an angle of rotation theta we can describe points in three dimensions in a similar way using cartesian and spherical cartesian having an x y and z axis and a spherical coordinate being described as an r just like in polar coordinates a distance from the center but then two angles of rotation theta and phi but why do i need spherical coordinates after all for the regular mandelbrot set i didn't need polar coordinates i could just take this complex number and square it no problem so while there might be a way for me to create a version of the mandelbot set in 3d without the idea of spherical coordinates the mandelbulb that i want to make the one that was developed in 2009 uses the idea of spherical coordinates to take a triplex number and square it or cube it or put it to the fourth power and ultimately to the eighth power so we have to look at a little bit more math before i put this into the code remember the iterative formula that i'm using for both the mandelbrot set and the mandelbulb is as follows z equals z now with mandelbrot it's z squared but a more generic form would be z to the n plus c and now c is a triplex number so if z equals zero to start we have z the next z is zero to the n plus c which is just c and then the next z is c to the n plus c and the next z is c to the n plus c to the n plus c so looking at this math that i'm doing i need an answer to the question how do i calculate x y z to the nth power and this is the innovation from daniel white and paul nylander a formula for taking a vector v in three dimensions x y z and setting it to the nth power to do that requires the spherical version of that x y z vector we need the r we need the theta we need the fee if you look at that formula and wander back to this original proposal which has exactly the formulas written out here this is how i calculate r theta and phi and this is how i set xyz to the nth power i think i can start to put this in the code now i'm going to have to go back and forth between this page and the code many times so first change i want to do is while it's plotting the points it was useful to map the all the voxels out to between negative 100 and 100 i want to now keep all my numbers between the range of negative 1 and 1. then from this x y and z coordinate i need to convert that to spherical coordinates so r is the square root of x times x y times y and z times z theta is the arc tangent of the square root of x times x y times y comma z and phi is the arc tangent y comma x now there's certainly efficiencies that i could do in this code in terms of like i'm squaring numbers and doing the square root multiple times but i'm just going to precompute the whole mandal bulb one time and set up so i'm not going to worry about that right now do i need a loop now i need a z i need a c let me look back at that webpage oh yeah ah okay look at this i need to take get a new x and a new y and a new z now processing is wondering what is n so n is the order it is the power to which i am going to set everything in my formula z equals z to the n plus c and we can try different numbers to get different patterns but i want to start with the number eight what's a little bit unfortunate here is that i want to use the variable z to keep track of z and z and zero z one in in a loop but z is also the component of the vector x y z so i think i need a new variable name for this what if i make it a vector and call it z zz so it's zz zeta oh people are saying zeta i love that okay let's call it zeta new variable name makes me so happy now i'm gonna do something that i really hate doing and i really hate that i'm about to do this but no i could do it a different way no i'm just going to do it the way i hate i'm going to say while true now generally speaking if you're going to say wild true you've got a problem because that's a loop that's never going to end the only way to get out of a loop that's looping while true the hardcoded value true that can never be changed is to put a break in somewhere so i need to remember put that break in there else i'm gonna have an infinite loop and everything's gonna crash and we're just gonna throw away all this footage and i'm going to be done never come back to another challenge ever again and just to set myself up for success i'm going to make a variable called max iterations i'm going to set that equal to 10 and then i'm going to have iteration equals zero i'm going to say iteration plus plus if iteration is greater than max iterations break now this is kind of silly because i could have just said while iteration is less than max iterations but i don't know this is the way i'm doing it we'll clean it up later this int n equals 8 does not need to be in this loop i mean it honestly could just be a global variable but i'm going to put it up here just so i have all the variables i want to mess with the order of this stuff is going to be important so zeta starts at zero and the very first time i'm taking zeta squared and then adding c to it so could i make a vector that holds the spherical coordinate and that is c i think that's right so then in the loop zeta equals power i mean this won't work because zeta is a vector power zeta to the n plus c right this is the idea of what i'm doing i'm doing this every single time and the way that i take zeta to the power of n are these formulas so zeta dot x equals new x plus c dot x the first thing that happens is i need to get these this should be in the loop i think it's really going to help me if i have a function to convert from cartesian to polar i kind of hate that i'm using the p vector for this because i'm putting the r and x the thick and y and the the v in z which is quite confusing because now when i come to do this this is actually like c dot x oh okay i'm gonna write my own spherical class might be totally unnecessary but i'm gonna do it just let me figure this out in my own way please i'm sure i'm doing this wrong but i'll get there eventually so the function returns a spherical object it's basically just like an object that holds three values but i want to be able to name those values r theta and phi so this is spherical c is the spherical version of x y z power of c dot r c dot theta and then oh there's no this was a mistake i'm getting very close i can feel it oh can i just do this like isn't that what these are i've mixed everything up let's go back to the whiteboard c is x y z so c to the n is defined by what i did and this gives me in my code new x new y new z then i add c the original x y z to it and then i take this convert it to spherical and do it again to the nth power okay i s when i said it over there it made sense in my head and now i have to see if i can put that into action here won't it work if i just start with this by the way why am i getting weird little errors here the variable r does not exist oh i have to define these variables i think this is fine because i'm starting with zero so the spherical coordinate zero zero zero is going to be 0 0 0. so i could go through this then add x y z to it and then get the new spherical coordinate put it to the power of n then add x y z to it again et cetera et cetera i think this is good i think i've got it sorry to interrupt i really just had to come from the future to acknowledge the fact that this variable c is really unfortunately named if you look at the formula for the mandelbulb itself z equals z to the n plus c there's a c in there yeah but it's not that c why did i call it that c the actual c the constant is the triplex number x y z that i'm adding iteratively each time through this loop that spherical coordinate is just the spherical version of zeta so this maybe is a more accurate way to write it not that these variable names are that great either but it's better than putting a false c there so the rest of the video is going to continue with the c there but i hope in case this was a point of confusion for you that this helps a little bit as you were let's just run this code why not it's not going to visualize anything let's see if i get any errors all right and if i were to say like if i were to multiply these i mean i could just use scale but this math is going to work for every for every pixel there okay i think we're getting somewhere so now i just need to figure out and am i in setup no i'm in draw so here's the thing i don't want to calculate the mandelbulb over and over again so i think what i want to do is take this code and put it in setup then what i'm going to do is i'm going to create an array of all the points that are within the mandible set itself that'll be an array list of p vectors in other words if at this point instead of drawing a point i just say add new p vector and i should do something better than just multiplying each value by 100 but that'll be good enough for right now right so right now i'm adding every point i'm doing the mandible math but i'm not checking what the outcome is i'm just doing the mandible math and adding every point into this arraylist then in draw i should still see that cube okay now all i need to do is determine whether or not i should add the point as part of the mandelbulb set itself so i'm only going to do that if i make it to max iterations if i make it to max iterations that means it is bounded i haven't gotten past some large value so i also need to test if i've gotten to some large value how do i do that well i think the easiest way for me to do that would be to check r r is like the distance from the center so if r keeps going like way way way out and way way out like greater than 16 then break so now only the points where the radius value hasn't gotten past a number the number 16 will make their way into the mandelbulb set itself oh my god what is the chance that when i run the code right now i will see something that looks like the mantle bulb after being in this room for like you know i've been in this room for four hours today i mean i was thinking doing a lot of stuff before i even started coding because i was so stressed out oh everybody say your 3d fractal prayer i mean there's no way this is going to work right no chance all right i'm hitting run i can't look wait a second okay that kind of looks like i don't know kind of looks like a mandel bulby thing let's make the dimension 64. oh my goodness okay so here's the thing ah that's the mandelbulb that's the mandelbo i think that's the mandible okay i think i know what i want to do here which is that let me just make n equal to one just like that cube thing right why is that not a sphere somebody will explain this to me in the comments i thought that would be a sphere but it's running really slow the reason is well i need some kind of prop some kind of device hold on here is a basketball a little miniature basketball that really needs some air bumped into it oh no oh no it's all well it's fine i'm gonna make this into the mandelbulb what i have done i'm plotting every point along the surface of this mandelbulb basketball as well as every point on the inside so i think what i want to look for are the points at which the neighbor is a bounded point or a not bounded point right like if i'm looking at where is the edge between this basketball and the rest of the threedimensional space let me go back to eight so basically as i'm looking at i guess k is the z axis so i can do it i can just consider every point along the z axis right before i do this boolean edge so they're going to be the when i start like the middle bulb is in the center so when i start they're going to be not bounded so as soon as i find one that makes it to the end edge is true so as long as it's not the not the edge edge is true um add it to the set let's run this yeah so that's like half the shape you can kind of see it can i go up to 128 so you can see i'm just getting the bottom half of the mandle bulb because i also need to say if it is an edge then i can say edge is false right this is like the edge variable is like a switch like first it's off and it finds a point on the mandelbulb in the mandelbulb it flips it on and and places that point now it doesn't flip that switch back off until it finds a part that's not so it can flip it off and then find the next one i think this is gonna work yeah that's a point cloud mandelbulb look at that that's a point clown vandal bomb we did it [Laughter] i mean it looks nothing like the beauty of the like fully ray traced rendered colored lit mandelbalms but my by golly my brain somehow made it from the start of whatever i started today to this and i'm very very happy the other thing i can play with is what value of n am i using and we can see here in this post that these are the shapes that i would get from the power of 2 power of 3 power of 16 whoa let's look at that n is 16 here yeah take a look at that crazy fractal death star hi uh dan from the future here let's wrap this video up dad from the past kept going down a road uh there was no train there or was off the tracks and didn't really get anywhere what i've explored here is the math behind the mantle bulb and rendering it as a point cloud so there's probably some things that you could try to do even with this like is there some logic by which you could choose different colors for different points of the point cloud could you render each point of the point cloud as not just a point but with a texture or some other kind of shape could you save all the points from out from processing and import them into something i tried my hand a little bit at this using something called mesh lab and you can see some of the sort of awkward results i'm showing you here but the manual bulb fractal fractals in general have so much detail to them that trying to turn it into a mesh isn't a particularly viable solution the most common technique for rendering the mandelbulb in its full spectacular glory is using an algorithm called ray marching in combination with the signed distance function this is a technique that allows you to render different kinds of shapes in 3d like a sphere or a cube but you can also use it to render any kind of shape or you can estimate the distance to that shape from the eye or camera that's looking at that shape but if you want to get started on learning about these algorithms take a look at the website and youtube channel from anigo quiles it is a literal treasure trove of graphics tutorials and knowledge wow so i don't want this to be the end i think i'm gonna have to just completely learn how shaders work now learn about sign distance functions and return someday i don't know you know in 10 years when you're still watching this video and i haven't done it yet please let me know in the comments i'm going to return someday to uh revisit different techniques for rendering the mandelbulb in real time maybe using shaders maybe using sign distance functions maybe just using the point cloud in a different way i don't know yet if you are able to make your own creative twist off this point cloud mandelbulb please let me know share it with me in the comments social media on the coding train website all the ways i love you all i love you for having me somehow to the end of this video i can't believe you did if you did and thank you i'll see you soon in the next coding challenge on the coding trade
