With timestamps:

00:01 - Hello this video is about just matrix multiplication
00:04 - That's the only thing it's about. I'm gonna write a function to do matrix multiplication
00:08 - with simple two-dimensional arrays in processing which is the java programming language
00:14 - so really I'm writing a Java function to do matrix multiplication now if you want to know a lot more about
00:19 - Matrices and matrix multiplications. I'll refer you to the Three Blue One Brown
00:24 - Series on linear algebra, but I also do have my own videos where I code a simple matrix library in JavaScript
00:31 - But this video is an anticipation of doing some... 3D
00:37 - Make 3D graphics in 2D. So projecting a 3D shape into two dimensions
00:43 - And so to do those tutorials, I need a function that will do matrix multiplication for me.
00:49 - So...
00:50 - A Matrix is a 2-dimensional table of numbers.
00:56 - For example, this is a matrix
01:01 - [And, I cou... I could write I'm gon... I'm gonna... heuu... write three zeros down here just... No, you know what... you know what just...]
01:07 - For demonstration purposes
01:10 - I'm gonna leave it like this because this is actually a matrix that I'm going to use in my code itself
01:15 - This is a matrix it is... two rows by three columns
01:21 - Okay
01:23 - Now I'm gonna show you here's another matrix
01:26 - Here is another matrix, and I'm just going to write X Y Z
01:31 - This matrix is... three rows by one column
01:39 - Right and so one thing that's very important is that
01:44 - [When you do matrix multiplication.]
01:46 - Matrix multiplication only works if the columns of matrix A match the rows of matrix B.
[And you can see those match up here.]
01:57 - Now. What do I mean by matrix multiplication?
01:58 - how do we multiply these two things normally when I say multiplication I might mean something like
02:03 - You know 2 x 3 = 6 or 
[I could even like do something where...]
02:09 - [Oh, I have these two]
02:13 - What if I did some like 3... 1... 4... and 2... 2... 1...
02:18 - You can almost think of multiplying these and getting a new
02:23 - matrix, that's 
3 x 2 = 6, 
1 x 2 = 2,
4 x 1 = 4
02:31 - But that's not matrix multiplication. What I just did here is what's known as element-wise multiplication.
02:40 - It's not what I'm talking about here
02:43 - What I'm talking about here is matrix multiplication also relates to something called the dot product
02:47 - You know, I'm gonna I there's too much to talk about forever and ever in this video
02:51 - I really just want a function to perform matrix multiplication with this and what this does is
02:57 - basically
02:59 - the way that this works is you
03:01 - [Matrix multiplication, which has... don't really have a good symbol for it.]
03:04 - So I'm just gonna write MatMul right here
03:06 - I want to do matrix multiplication. Let's go back to that webpage that I was at at the beginning
03:12 - and
03:13 - I'm going to press multiply here. Let's see what happens
03:18 - whoa, OMG, aaah !
03:21 - Look at that it like went up and then went sideways. That's interesting. Let's go to next. Whoo. Look at that
03:26 - So what so what just happened there? Look at this I am
03:32 - going to take this row and
03:36 - Multiply it by this column in a way that this number gets multiplied here. This number gets multiplied here
03:42 - This number gets multiplied here and they all get added together
03:44 - so what I'm going to get is
03:48 - 1X + 0Y + 0Z
03:54 - X now I'm gonna do exactly the same thing. We can confirm this
04:00 - Then we do exactly the same thing for the second row
04:05 - Press this button. I'm going to take 0 times X plus 1 times y
04:11 - Plus 0 times Z and I'm gonna get Y and then I am done
04:17 - so
04:19 - 2 by 3 matrix multiplied by a 3x1 matrix
04:25 - rows in what a
04:28 - 2 by 1
04:30 - 2 by 1 matrix now, so
04:35 - This is the basic idea
04:36 - this is actually the reason why I'm showing you just this one scenario is this is what's going to happen over and over again in
04:42 - the videos I'm about to make about taking a 3d point with an x,y,z and
04:48 - Projecting it into two dimensions and what this matrix actually just did is just eliminate the Z. It's as if I
04:56 - am looking
04:58 - straight on at a three-dimensional object and
05:01 - I just can't see the Z at all
05:04 - Ok
05:06 - so now let's
05:08 - Go and write the code to do this matrix multiplication
05:12 - So now let's open up processing and... how am I going to make a matrix? So I'm gonna do I'm going to call
05:20 - This first matrix. I'm going to make it a two-dimensional array a projection and I can just say what I say {1, 0, 0}
05:28 - And I'm going to format it in my own goofy way
05:32 - {0, 1, 0} and then I'm gonna say...
05:37 - float [][] point = [now this is silly but I'm gonna do...]
05:45 - float [][] point = {175, 50}
05:49 - [Okay, so let me just do this and let me do...]
05:54 - matrix multiplication
06:02 - All right, what's wrong here need another bracket
06:07 - All right, so you can see and I guess if I want to be consistent I could do this
06:14 - And there we go, so these are my two matrices I have
06:22 - This one and I'm just storing them as two-dimensional arrays and I'm basically the first
06:29 - Array the first index is which row and the second index is which column? Okay, so that's what I've got right now
06:35 - alright first since I'm in processing
06:37 - Let me just add a setup function here because the idea is what I want to do is I want to say float
06:43 - result being a new matrix is is
06:47 - something like the result of matrix multiplication
06:51 - Between the projection and the point matmul
06:57 - So I need to write my own function. Of course. It's complaining to me because it doesn't know what this is
07:01 - I need to write my own matrix multiplication function. So I'm gonna go ahead and do that right now and I'm gonna say
07:08 - This is a function. That's also going to return a two-dimensional array
07:12 - And it's going to take two
07:16 - Two matrices in which are two and then it's got to return something. So let me just add `return null` at the bottom here
07:23 - So now I should have no errors.
07:26 - NO ERRORS ! So this is now this is what I want to do. I have projection point I
07:32 - Want to be able to matrix multiply both of those and get the result. So, how do I do that?
07:37 - Well one thing as I need to do is I need to know
07:42 - Columns A is a dot
07:46 - Right. Okay, how is it a dot length? And then rows a is a index 0 dot length
07:53 - Does it not let me do that? Yes, okay
07:55 - so in other words
07:56 - I first want to figure out the columns and rows of each one of these because that's going to be pretty important now
08:03 - It's a two-dimensional array
08:06 - So if I say
08:08 - Index 0 the length, that's actually that's the number or no. So this is the columns
08:15 - This is the columns right? The number of things in it is the number of rows
08:21 - Right, we could see here like just `point.length` is three, `point[0].length` is one
08:28 - so that's the columns of A and and now the columns and rows of B, or
08:35 - `B[0].length` now this assumes that there's at least one thing. So an empty matrix this is going to give us an Error
08:42 - but... big deal now, the other thing that I need to look at is I need to make sure
08:49 - That the number of columns of a matches the number of rows of B
08:57 - So if
09:00 - Columns a
09:02 - Does not equal rows B
09:06 - Then I'm going to just like return null and maybe print line
09:11 - columns of a must match rows of B
09:16 - Okay. So now we have a little and then now assuming that everything is okay. I can now say
09:22 - float result is a new array with
09:29 - The number of [so hard] the number of rows of A and the number of columns of B
09:39 - The number of rows of A and the number of columns of B
09:46 - There's a great comment in the chat: "why would they be float? I'm pretty sure .length is an int." Yes
09:51 - These should be integers. There's no reason to make them a float. In fact, that's only gonna cause me problems. I'm just so used to
09:59 - Programming in JavaScript. I don't have to worry about this stuff
10:01 - And so to me float is like var let [or const] that sort of thing, but great point.
10:06 - Okay, so that's a really great point. So what I need to do, first of all is I need to fill every single spot of
10:11 - the resulting matrix
10:13 - So I need to go through all of the rows
10:18 - And then I need to go through all of the columns
10:28 - [Oops... result]
10:32 - [Oh Wait wait, yeah result...]
10:33 - This is silly because I could just use rows A and cols B, [but I'm gonna... oh... these don't have... aaaaaah]
10:39 - Sorry, I need to go through all of the rows which is rows A and all the columns which is columns B sorry.
10:46 - I was imagining like in my previous [and this is for] I made this matrix library
10:52 - So this could be the beginnings of a matrix library potentially if you wanted to write your own. Have fun ! How about it !
11:00 - Look, I'm like Sisyphus and I just programmed the same stuff over and over again and I make the same and then I get all
11:06 - The way up to the top and my matrix thing works and then it the matrix
11:09 - Multiplication rolls all the way down to the bottom the hill
11:11 - I forget how it works completely and have to like push it all the way back up. Again. This is my life
11:16 - Alright, so, okay. So now what I need to do
11:20 - Is now do that dot product
11:23 - the reason why I say dot product is really
11:25 - What this is is it's the dot product of these three numbers with these three numbers. So I need to take row from one and
11:34 - The the row and the column here, okay
11:37 - So what I'm going to do is so the dot product needs a sum
11:40 - So I'm gonna say `sum = 0` then I need to go through
11:46 - All of the columns again, I guess I'll call this K
11:55 - Columns B. And then I need to add up
12:02 - [What do I need to add... I need to add the...]
12:06 - [The the J... Sorry...] I need to add
12:11 - [This which is in position most in position (0, 0), but that's really positioned]
12:20 - position (I, K) I think
12:25 - A[I][K] * B[K][J]
12:31 - Does that make sense?
12:33 - right because I'm going through all the columns of B all the rows of a and then K is just
12:40 - Moving me along all the columns of A and all the rows of B, right
12:49 - [This is... so...] I'm gonna go through
12:53 - I'm in row I and
12:57 - I'm in column J. And then I'm gonna take K which from row I ?
13:04 - From column I times row... J
13:09 - (Crying nervously) [Are you watching this ? I am so sorry for you.]
13:14 - It is right though I actually think I have this right, but let me actually make this more clear
13:20 - This is row. I
13:22 - Column K. And so when Row I is 0, K is the thing going up
13:27 - this is
13:29 - Row K is the thing going up
13:32 - Column J which is fixed here. Just zero. So look at that. This should be what I have here
13:39 - I want to take and multiply add all those things together. And guess what?
13:43 - You might have to pause this video and and and make sense of this yourself
13:47 - [I should have practiced this] the `result [I][J]` is that sum?
13:53 - so now I
13:56 - Should be all say return results. This is by the way what happens when you don't have numpy?
14:03 - Your life becomes I'm sure there's plenty of matrix libraries for Java I just can't bring myself to use them
14:08 - Alright first let's just run this and see if I get any errors. So no errors came up. That's good
14:13 - I want to write a function. I'm gonna call it
14:19 - Log matrix or let's call it print matrix.
14:26 - That's already a function in processing actually. Oh so great if we get to show that later all this is so exciting
14:32 - okay, I'm gonna call i'm just called log matrix and it's gonna get
14:38 - Matrix m and then first i'm just going to get the columns and rows
14:46 - Columns and rows
14:47 - and
14:49 - Then I'm going to print line columns
14:53 - by on a rows
14:56 - By columns
14:59 - Then I am going to a print line
15:04 - Some nonsense and then I'm going to say I'm gonna do this nice little loop again this double loop
15:13 - And this is rows and this is columns and I'm gonna say print
15:22 - Matrix row
15:25 - column
15:27 - Plus a space
15:31 - And then when I get to the end I'll do print line
15:35 - and
15:36 - now what I should be able to do is I should be able to say to
15:41 - Test if this works I should be able to say log matrix projection
15:49 - Log matrix point
15:53 - Log matrix result so now let's see if anything I did work correctly
16:02 - All right, let's look. Oh no, no, no, it's wrong. Well, I've gotten close. So okay, so
16:08 - First of all, let's let's do an extra. I need an extra print line in my log function
16:16 - Let's do when it's done let's do an extra print line. Okay, we run this again, so I have some mistakes
16:22 - So the good news is this is right two by three. This is a two by three matrix and that
16:29 - Looks right. This is a three by one matrix
16:33 - three rows one column that looks right and the result should be a
16:37 - 2 by 1 matrix
16:40 - 7550
16:41 - now I
16:43 - Oh
16:44 - We're not 7550. I've used different numbers. It should be 175. That's what I should see, right
16:50 - 175 X Y. So something is wrong in my matrix
16:55 - Math calculation, so let's look at this
16:58 - Okay, I found my bug
17:00 - This right? This is the bug. This is the offending line of code columns B
17:07 - Why is that wrong? That is wrong? That is most definitely wrong. Let's go over and look as to why it's wrong
17:14 - Remember how I was saying K is?
17:17 - Counting through each column here and then counting through each row here. That's the whole thing that has to be equal
17:25 - Three columns three rows three columns three rows
17:29 - So that number could either be columns a or rows b either one of those things. Is that what I put in there
17:37 - no, so this should be columns A could be rows B, that would also work and I am now going to run this again and
17:51 - VOILA !
17:53 - (Jumps)
17:54 - We perform matrix multiplication now, I need one more helper function if you will bear with me
18:04 - I'm going to need this for
18:07 - For the future
18:09 - In these videos that I'm intending to make I need a function because I'm gonna use PVectors a lot
18:15 - So a PVector, by the way
18:17 - like PVector V is
18:20 - Typically how I'm going to want to represent a point
18:23 - So if I want to represent a point
18:25 - I don't want to have to write it like this all the time my code that's gonna be a major pain
18:29 - but if I want to do matrix multiplication
18:32 - I'm gonna want a some tool to convert from a point to a PVector to a matrix. So I want to function
18:41 - Vec...
18:43 - vec to matrix
18:45 - That receives a P vector and then I want to function probably also
18:51 - matrix
18:53 - to Vec
18:54 - That receives a matrix
19:00 - And
19:01 - So let's write both these functions. So
19:05 - This should be pretty easy. I just want to create
19:08 - a
19:10 - matrix, which is
19:12 - It has one
19:15 - No, three rows at one column and then I mean I'm gonna be really lazy about this
19:20 - I'm going to say `M [0] [0] = v.x`
19:25 - and
19:27 - then
19:29 - [Whoops 1 I can't type] 1 and 2
19:34 - v.y, v.z, that's useful and then I just say return M
19:40 - Then I'm gonna write the other function here now which is
19:45 - I'm gonna say PVector V is a new PVector
19:51 - And V.X equals M
19:58 - What am I saying here which is M [0] [0]
20:01 - V.y equals and 1 0 now I might get some matrices back
20:10 - That don't have that many rows. So only if m dot length is
20:17 - Greater than 2 2
20:20 - Then I can say V.Z equals M [2][0]
20:25 - and return V
20:28 - So assuming these helper functions are written correctly
20:32 - Now I don't need this. I'm going to take this out and
20:36 - I'm going to say we're set up. I'm going to say
20:41 - Float[][] point
20:44 - equals Vec to matrix
20:51 - Vector matrix V
20:54 - Now I can do that. Then. I also want to say just to be sure I'm gonna say
21:04 - Yeah, I'm gonna say now I'm also going to say
21:08 - PVector V equals
21:11 - Matrix to Veck result and then print line V also, okay
21:17 - Let's run this now and we should see
21:20 - What do we got?
21:22 - so
21:24 - I have my two by three matrix
21:26 - My vector got so I really just to be clear about this. I
21:31 - Should probably say right up here also print line V
21:36 - So just to see that everything worked
21:39 - This is my PVector
21:41 - 175 50 this is my projection matrix
21:46 - This is my PVector converted to a 3 by 1 matrix
21:52 - this down here is the result of the matrix multiplication as a vector and this down here is
22:01 - That same result all of this to just take the Z component out but oh
22:07 - Boy, we're ready. Now. We're gonna have rotation matrices. I'm ready. I'm ready
22:11 - I'm ready to move from the first dimension to the second dimension. Oh
22:16 - One more thing
22:18 - suggestion from Kelli in the chat in terms of making a useful helper function
22:23 - It would be really nice for this here to be right the first thing that's passed in the second thing is the vector
22:31 - so
22:33 - So I should have an option where this is a vector and then I would just say I
22:41 - Could just quickly com overloading the function
22:44 - I'm running a same version of function, but with a different argument. This is how this is done in Java
22:48 - I would say Veck to matrix
22:52 - B and
22:54 - then I would say return Matmul a
22:58 - M
23:00 - Right, so if I do that then now I can get rid of this line and I can just say
23:07 - V here and
23:10 - I should have the same result and get rid of this log
23:13 - I don't think I need these logs anymore just to make sure it works. Yep
23:17 - So that that worked we can see that worked as well
23:19 - So this makes our life a little bit easier now again, this is by no means comprehensive
23:26 - In terms of matrix mathematics, but I happen to know that for the next video
23:30 - I'm going to make where I'm going to take 3d points and project them into 2d. This is all that I need
23:37 - Okay, see you in the next video which I will link to through the magic of the linking of the the things
23:45 - (BELL RINGING)
23:47 - (MUSIC)

Cleaned transcript:

Hello this video is about just matrix multiplication That's the only thing it's about. I'm gonna write a function to do matrix multiplication with simple twodimensional arrays in processing which is the java programming language so really I'm writing a Java function to do matrix multiplication now if you want to know a lot more about Matrices and matrix multiplications. I'll refer you to the Three Blue One Brown Series on linear algebra, but I also do have my own videos where I code a simple matrix library in JavaScript But this video is an anticipation of doing some... 3D Make 3D graphics in 2D. So projecting a 3D shape into two dimensions And so to do those tutorials, I need a function that will do matrix multiplication for me. So... A Matrix is a 2dimensional table of numbers. For example, this is a matrix [And, I cou... I could write I'm gon... I'm gonna... heuu... write three zeros down here just... No, you know what... you know what just...] For demonstration purposes I'm gonna leave it like this because this is actually a matrix that I'm going to use in my code itself This is a matrix it is... two rows by three columns Okay Now I'm gonna show you here's another matrix Here is another matrix, and I'm just going to write X Y Z This matrix is... three rows by one column Right and so one thing that's very important is that [When you do matrix multiplication.] Matrix multiplication only works if the columns of matrix A match the rows of matrix B. [And you can see those match up here.] Now. What do I mean by matrix multiplication? how do we multiply these two things normally when I say multiplication I might mean something like You know 2 x 3 = 6 or [I could even like do something where...] [Oh, I have these two] What if I did some like 3... 1... 4... and 2... 2... 1... You can almost think of multiplying these and getting a new matrix, that's 3 x 2 = 6, 1 x 2 = 2, 4 x 1 = 4 But that's not matrix multiplication. What I just did here is what's known as elementwise multiplication. It's not what I'm talking about here What I'm talking about here is matrix multiplication also relates to something called the dot product You know, I'm gonna I there's too much to talk about forever and ever in this video I really just want a function to perform matrix multiplication with this and what this does is basically the way that this works is you [Matrix multiplication, which has... don't really have a good symbol for it.] So I'm just gonna write MatMul right here I want to do matrix multiplication. Let's go back to that webpage that I was at at the beginning and I'm going to press multiply here. Let's see what happens whoa, OMG, aaah ! Look at that it like went up and then went sideways. That's interesting. Let's go to next. Whoo. Look at that So what so what just happened there? Look at this I am going to take this row and Multiply it by this column in a way that this number gets multiplied here. This number gets multiplied here This number gets multiplied here and they all get added together so what I'm going to get is 1X + 0Y + 0Z X now I'm gonna do exactly the same thing. We can confirm this Then we do exactly the same thing for the second row Press this button. I'm going to take 0 times X plus 1 times y Plus 0 times Z and I'm gonna get Y and then I am done so 2 by 3 matrix multiplied by a 3x1 matrix rows in what a 2 by 1 2 by 1 matrix now, so This is the basic idea this is actually the reason why I'm showing you just this one scenario is this is what's going to happen over and over again in the videos I'm about to make about taking a 3d point with an x,y,z and Projecting it into two dimensions and what this matrix actually just did is just eliminate the Z. It's as if I am looking straight on at a threedimensional object and I just can't see the Z at all Ok so now let's Go and write the code to do this matrix multiplication So now let's open up processing and... how am I going to make a matrix? So I'm gonna do I'm going to call This first matrix. I'm going to make it a twodimensional array a projection and I can just say what I say {1, 0, 0} And I'm going to format it in my own goofy way {0, 1, 0} and then I'm gonna say... float [][] point = [now this is silly but I'm gonna do...] float [][] point = {175, 50} [Okay, so let me just do this and let me do...] matrix multiplication All right, what's wrong here need another bracket All right, so you can see and I guess if I want to be consistent I could do this And there we go, so these are my two matrices I have This one and I'm just storing them as twodimensional arrays and I'm basically the first Array the first index is which row and the second index is which column? Okay, so that's what I've got right now alright first since I'm in processing Let me just add a setup function here because the idea is what I want to do is I want to say float result being a new matrix is is something like the result of matrix multiplication Between the projection and the point matmul So I need to write my own function. Of course. It's complaining to me because it doesn't know what this is I need to write my own matrix multiplication function. So I'm gonna go ahead and do that right now and I'm gonna say This is a function. That's also going to return a twodimensional array And it's going to take two Two matrices in which are two and then it's got to return something. So let me just add `return null` at the bottom here So now I should have no errors. NO ERRORS ! So this is now this is what I want to do. I have projection point I Want to be able to matrix multiply both of those and get the result. So, how do I do that? Well one thing as I need to do is I need to know Columns A is a dot Right. Okay, how is it a dot length? And then rows a is a index 0 dot length Does it not let me do that? Yes, okay so in other words I first want to figure out the columns and rows of each one of these because that's going to be pretty important now It's a twodimensional array So if I say Index 0 the length, that's actually that's the number or no. So this is the columns This is the columns right? The number of things in it is the number of rows Right, we could see here like just `point.length` is three, `point[0].length` is one so that's the columns of A and and now the columns and rows of B, or `B[0].length` now this assumes that there's at least one thing. So an empty matrix this is going to give us an Error but... big deal now, the other thing that I need to look at is I need to make sure That the number of columns of a matches the number of rows of B So if Columns a Does not equal rows B Then I'm going to just like return null and maybe print line columns of a must match rows of B Okay. So now we have a little and then now assuming that everything is okay. I can now say float result is a new array with The number of [so hard] the number of rows of A and the number of columns of B The number of rows of A and the number of columns of B There's a great comment in the chat "why would they be float? I'm pretty sure .length is an int." Yes These should be integers. There's no reason to make them a float. In fact, that's only gonna cause me problems. I'm just so used to Programming in JavaScript. I don't have to worry about this stuff And so to me float is like var let [or const] that sort of thing, but great point. Okay, so that's a really great point. So what I need to do, first of all is I need to fill every single spot of the resulting matrix So I need to go through all of the rows And then I need to go through all of the columns [Oops... result] [Oh Wait wait, yeah result...] This is silly because I could just use rows A and cols B, [but I'm gonna... oh... these don't have... aaaaaah] Sorry, I need to go through all of the rows which is rows A and all the columns which is columns B sorry. I was imagining like in my previous [and this is for] I made this matrix library So this could be the beginnings of a matrix library potentially if you wanted to write your own. Have fun ! How about it ! Look, I'm like Sisyphus and I just programmed the same stuff over and over again and I make the same and then I get all The way up to the top and my matrix thing works and then it the matrix Multiplication rolls all the way down to the bottom the hill I forget how it works completely and have to like push it all the way back up. Again. This is my life Alright, so, okay. So now what I need to do Is now do that dot product the reason why I say dot product is really What this is is it's the dot product of these three numbers with these three numbers. So I need to take row from one and The the row and the column here, okay So what I'm going to do is so the dot product needs a sum So I'm gonna say `sum = 0` then I need to go through All of the columns again, I guess I'll call this K Columns B. And then I need to add up [What do I need to add... I need to add the...] [The the J... Sorry...] I need to add [This which is in position most in position (0, 0), but that's really positioned] position (I, K) I think A[I][K] * B[K][J] Does that make sense? right because I'm going through all the columns of B all the rows of a and then K is just Moving me along all the columns of A and all the rows of B, right [This is... so...] I'm gonna go through I'm in row I and I'm in column J. And then I'm gonna take K which from row I ? From column I times row... J (Crying nervously) [Are you watching this ? I am so sorry for you.] It is right though I actually think I have this right, but let me actually make this more clear This is row. I Column K. And so when Row I is 0, K is the thing going up this is Row K is the thing going up Column J which is fixed here. Just zero. So look at that. This should be what I have here I want to take and multiply add all those things together. And guess what? You might have to pause this video and and and make sense of this yourself [I should have practiced this] the `result [I][J]` is that sum? so now I Should be all say return results. This is by the way what happens when you don't have numpy? Your life becomes I'm sure there's plenty of matrix libraries for Java I just can't bring myself to use them Alright first let's just run this and see if I get any errors. So no errors came up. That's good I want to write a function. I'm gonna call it Log matrix or let's call it print matrix. That's already a function in processing actually. Oh so great if we get to show that later all this is so exciting okay, I'm gonna call i'm just called log matrix and it's gonna get Matrix m and then first i'm just going to get the columns and rows Columns and rows and Then I'm going to print line columns by on a rows By columns Then I am going to a print line Some nonsense and then I'm going to say I'm gonna do this nice little loop again this double loop And this is rows and this is columns and I'm gonna say print Matrix row column Plus a space And then when I get to the end I'll do print line and now what I should be able to do is I should be able to say to Test if this works I should be able to say log matrix projection Log matrix point Log matrix result so now let's see if anything I did work correctly All right, let's look. Oh no, no, no, it's wrong. Well, I've gotten close. So okay, so First of all, let's let's do an extra. I need an extra print line in my log function Let's do when it's done let's do an extra print line. Okay, we run this again, so I have some mistakes So the good news is this is right two by three. This is a two by three matrix and that Looks right. This is a three by one matrix three rows one column that looks right and the result should be a 2 by 1 matrix 7550 now I Oh We're not 7550. I've used different numbers. It should be 175. That's what I should see, right 175 X Y. So something is wrong in my matrix Math calculation, so let's look at this Okay, I found my bug This right? This is the bug. This is the offending line of code columns B Why is that wrong? That is wrong? That is most definitely wrong. Let's go over and look as to why it's wrong Remember how I was saying K is? Counting through each column here and then counting through each row here. That's the whole thing that has to be equal Three columns three rows three columns three rows So that number could either be columns a or rows b either one of those things. Is that what I put in there no, so this should be columns A could be rows B, that would also work and I am now going to run this again and VOILA ! (Jumps) We perform matrix multiplication now, I need one more helper function if you will bear with me I'm going to need this for For the future In these videos that I'm intending to make I need a function because I'm gonna use PVectors a lot So a PVector, by the way like PVector V is Typically how I'm going to want to represent a point So if I want to represent a point I don't want to have to write it like this all the time my code that's gonna be a major pain but if I want to do matrix multiplication I'm gonna want a some tool to convert from a point to a PVector to a matrix. So I want to function Vec... vec to matrix That receives a P vector and then I want to function probably also matrix to Vec That receives a matrix And So let's write both these functions. So This should be pretty easy. I just want to create a matrix, which is It has one No, three rows at one column and then I mean I'm gonna be really lazy about this I'm going to say `M [0] [0] = v.x` and then [Whoops 1 I can't type] 1 and 2 v.y, v.z, that's useful and then I just say return M Then I'm gonna write the other function here now which is I'm gonna say PVector V is a new PVector And V.X equals M What am I saying here which is M [0] [0] V.y equals and 1 0 now I might get some matrices back That don't have that many rows. So only if m dot length is Greater than 2 2 Then I can say V.Z equals M [2][0] and return V So assuming these helper functions are written correctly Now I don't need this. I'm going to take this out and I'm going to say we're set up. I'm going to say Float[][] point equals Vec to matrix Vector matrix V Now I can do that. Then. I also want to say just to be sure I'm gonna say Yeah, I'm gonna say now I'm also going to say PVector V equals Matrix to Veck result and then print line V also, okay Let's run this now and we should see What do we got? so I have my two by three matrix My vector got so I really just to be clear about this. I Should probably say right up here also print line V So just to see that everything worked This is my PVector 175 50 this is my projection matrix This is my PVector converted to a 3 by 1 matrix this down here is the result of the matrix multiplication as a vector and this down here is That same result all of this to just take the Z component out but oh Boy, we're ready. Now. We're gonna have rotation matrices. I'm ready. I'm ready I'm ready to move from the first dimension to the second dimension. Oh One more thing suggestion from Kelli in the chat in terms of making a useful helper function It would be really nice for this here to be right the first thing that's passed in the second thing is the vector so So I should have an option where this is a vector and then I would just say I Could just quickly com overloading the function I'm running a same version of function, but with a different argument. This is how this is done in Java I would say Veck to matrix B and then I would say return Matmul a M Right, so if I do that then now I can get rid of this line and I can just say V here and I should have the same result and get rid of this log I don't think I need these logs anymore just to make sure it works. Yep So that that worked we can see that worked as well So this makes our life a little bit easier now again, this is by no means comprehensive In terms of matrix mathematics, but I happen to know that for the next video I'm going to make where I'm going to take 3d points and project them into 2d. This is all that I need Okay, see you in the next video which I will link to through the magic of the linking of the the things (BELL RINGING) (MUSIC)
