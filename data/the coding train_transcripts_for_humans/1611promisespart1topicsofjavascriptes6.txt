With timestamps:

00:00 - hello I have a promise to make sure by
00:04 - the end of this video I am hopeful that
00:06 - you and I together will understand what
00:10 - the how this promises thing is in
00:15 - JavaScript because me I'm a person who
00:17 - programs in JavaScript with callbacks
00:19 - but there has been for quite a while
00:22 - something called a promise in JavaScript
00:24 - and it used to be something that was
00:26 - part of certain libraries that you could
00:28 - import and add to your code now as of I
00:31 - think es6 which is yes 2015 whatever as
00:36 - of a more recent version of JavaScript
00:37 - promises are something native to how
00:40 - JavaScript works so I hope this video
00:42 - will answer the question for myself as
00:45 - well as you why should you care about
00:46 - this what is a promise and how do you
00:49 - make use of a promise so the
00:52 - demonstration so I have a JavaScript
00:54 - program already running it and I think a
00:58 - good way to demonstrate this is to look
01:01 - at making requests for data from api's
01:04 - so I am making a request for a random
01:07 - word from the word Nick API and then I
01:09 - am asking the giffy API for a gif Assoc
01:12 - of that word so if i refresh this page
01:14 - there we go
01:16 - i refresh this page again there we go so
01:19 - this is the demonstration I'm going to
01:20 - use now that at present the code for
01:23 - this is using the p5.js library with
01:26 - callbacks there are no promises involved
01:28 - there's a load JSON function that passes
01:31 - in the URL to a particular API
01:34 - it has a callback for when the data is
01:37 - ready then I get that data and then I go
01:39 - I ask load JSON again with another URL
01:44 - and then I who then I have another
01:46 - callback oh my goodness so here's the
01:48 - thing a callback really makes sense for
01:51 - this idea of an event right when the
01:54 - mouse is pressed trigger this function
01:56 - it's an event
01:57 - but if I want to sequence asynchronous
02:01 - things that happen in my program meaning
02:03 - I'm making all these API requests I'm
02:05 - asking for this I'm asking for this and
02:07 - then when this comes back I want to do
02:08 - this callbacks can get very unwieldy and
02:11 - you can actually find yourself living
02:13 - in what's known as sound effects please
02:17 - call back hell so I'm going to show you
02:24 - right now and call back hell
02:27 - [Music]
02:28 - now I've written this in a weird sort of
02:30 - way where I call low JSON okay that's
02:33 - just way too distracting
02:34 - where I call low JSON and then but you
02:37 - might be you might imagine that you use
02:39 - anonymous functions so when I call low
02:41 - JSON instead of having this separate you
02:43 - got data function I'm gonna take this up
02:45 - here and I'm gonna put this in here why
02:48 - is this so and then I'm going to I don't
02:49 - need it to be a name I'm just gonna pass
02:52 - the call back in here directly okay so
02:55 - this is perfectly normal to do ah but
02:57 - then when this one when I then go to the
03:00 - giffy API then I'm gonna I need this
03:03 - next anonymous function and I need that
03:05 - to go in here I don't want to name it
03:08 - anymore it's an anonymous function and
03:10 - there we go so now let's refresh this
03:14 - and it still works homeward bound oh
03:19 - there is no what's great about this is
03:21 - this is going to trigger an error
03:23 - sometimes when it can't find an image
03:25 - and I'm gonna need that with promises
03:27 - I'm need to figure out of handling
03:28 - errors so look at this this isn't even
03:32 - that bad this is fur but but look how
03:35 - this is just not sustainable first of
03:37 - all I don't like how much room I have
03:38 - here this is like absolutely not
03:40 - sustainable
03:41 - I won't up load JSON have this callback
03:43 - then load is none of this callback this
03:45 - King I could just keep going with this
03:46 - and all of a sudden you can see my code
03:47 - just gets indented and indented and
03:49 - indented more this isn't good
03:52 - could there be something better I don't
03:55 - know I don't know really if it's better
03:57 - or not but there is something and that
03:59 - something is called a promise a promise
04:02 - is an object so the idea of in so let's
04:12 - say so we have this load JSON function
04:15 - which expects a URL and then a callback
04:20 - here's another reason why we could get
04:22 - stuck in callback hell we might need
04:25 - multiple callbacks or different things
04:27 - like an error callback and then or then
04:31 - our code is even more unwieldy because
04:33 - then we have these sequences and we have
04:34 - different things for the success
04:35 - callback so this is what our code looks
04:38 - like with a callback now
04:39 - p5 at present doesn't support
04:42 - promises but if it did instead I could
04:49 - say something like this let promised
04:52 - equal lo JSON URL so the idea is instead
04:58 - of passing a function a callback you ask
05:02 - a function for a promise
05:04 - so because the p5 GS library doesn't
05:06 - support promises and I am here to teach
05:09 - or learn which one I'm not sure yet
05:12 - about promises I'm going to instead use
05:15 - a function called fetch which is a
05:17 - function native to javascript in the
05:19 - browser that supports promises so this
05:23 - gives me a promise once I have that
05:26 - promise I have it as an object and I can
05:29 - do all sorts of things with it but the
05:32 - idea of a promise it's an object that
05:34 - can be in a certain state so the
05:37 - possible states are it can be pending
05:40 - right this is while I'm waiting to get
05:44 - the data back from the API it can be
05:48 - fulfilled which means it's it's been
05:53 - successfully resolved I have the results
05:56 - back from the API or it can be rejected
05:59 - meaning some error has happened so if I
06:03 - have this object the idea is that I can
06:06 - just check this object to say wait hey
06:08 - object what pay promise everything's
06:14 - fine I just dropped the top of the
06:16 - marker I have this problem I have this
06:21 - promise I promise you promise me
06:24 - something
06:24 - are you still pending I'm waiting for
06:26 - you to finish promise are you pending
06:28 - and then I could say like hey were you
06:30 - rejected were you filled and then give
06:32 - me the stuff back but here's the thing
06:33 - if I do this I actually don't need to
06:37 - query the promise continuously I can use
06:42 - something called then and/or catch then
06:50 - is a function that receives a function
06:54 - to be execute
06:55 - it's kind of like a call pack when it
06:57 - has been fulfilled and catch receives a
07:05 - function to be executed when it has been
07:08 - if and when it has been rejected and
07:12 - there's actually if we go back if we go
07:13 - to the Mozilla JavaScript documentation
07:16 - page there's a nice diagram so this idea
07:18 - of a promise it's pending you can see
07:21 - all this stuff that happens but in the
07:23 - end there's just a then or a catch so
07:27 - this is the basic idea so what I'm gonna
07:29 - do now is I'm gonna start to rewrite
07:32 - that code using promises now I should be
07:34 - explicit about a couple things number
07:36 - one is I am NOT creating I can write
07:40 - code that creates promises I can use
07:43 - them and I'm gonna get to that but I'm
07:45 - not doing that right now what I am doing
07:46 - is using somebody else's function that
07:49 - returns a promise so I need to get to
07:52 - creating your own promises and I'm gonna
07:55 - make lots of promises and then the other
07:59 - thing is I need to like to see does this
08:01 - willy help us does this really make our
08:03 - code easier to follow and so let's just
08:06 - sort of see so let's let's go back so
08:08 - first of all let me just show you where
08:10 - this function called fetch is coming
08:12 - from so this is the fetch function and
08:22 - basically fetch is just a function that
08:25 - you give it a URL and it fetches the
08:28 - stuff from that URL and gives you a
08:29 - promise back so I am going to I'm going
08:33 - to comment this out and I'm gonna say
08:37 - let promise equals fetch word Nick API
08:43 - and then I'm gonna say console.log
08:47 - promise so I so let's take a look and
08:51 - see what this is
08:53 - look at that and at the moment that
08:56 - promise is pending
08:57 - look the promise is pending yeah here's
09:00 - the thing let me make I'm gonna do
09:01 - something very silly which is actually
09:05 - let me do let me do this in
09:07 - let's do another one here let P equal
09:11 - Fett let's do this again just in the
09:13 - console and let's look at that it's
09:17 - resolved like a few moments later it's
09:18 - resolved right so at the next line of
09:21 - code so I could do something crazy like
09:24 - while promise is not resolved wait wait
09:28 - wait wait wait wait but that would be
09:29 - like blocking code the point of a
09:32 - promise is to handle asynchronous things
09:35 - my program is going to keep going but
09:38 - behind the scenes it's going to be
09:40 - waiting for that data and the way I do
09:42 - that I don't think way too much time to
09:44 - get to this is with the ven function so
09:46 - watch this if I say promise then and
09:50 - then I put got data in here and this is
09:53 - nobody would ever write JavaScript like
09:55 - this I'm just doing this in kind of a
09:56 - crazy way and then I will condense it
09:58 - down and then I write my got data
10:00 - function let's run this and take a look
10:06 - at this looks a little weird let's run
10:08 - this now so I got oh yeah I forgot all
10:15 - this is great
10:16 - I forgot the fetch function has some
10:17 - weird properties which is going to cause
10:19 - us a bit of a problem which is why we
10:21 - need promises so look at this I actually
10:24 - so you can see I got the results back
10:26 - but actually the results have to be
10:29 - converted into a format that I can use
10:32 - so all right so first of all so this is
10:35 - the idea right and if there was an error
10:37 - I could say promise catch got error and
10:47 - I could say console.log error all right
10:54 - so now let's make it have an error let's
10:57 - like mess up the URL by accident and we
11:02 - can see I got an error there type error
11:06 - failed to fetch so you can see this is
11:08 - the idea I get a promise I can give it a
11:11 - function to with then for when it's
11:14 - successful and I can give it a function
11:16 - for when there's an error I forgot to
11:18 - mention
11:19 - I'm gonna start probably using the
11:21 - JavaScript arrow syntax in the course of
11:24 - looking at promises because it's really
11:27 - helpful and it's many ways necessary for
11:30 - working with them effectively so if you
11:31 - haven't already watched my video or
11:33 - somebody else's video or tutorial about
11:36 - the JavaScript arrow notation which is
11:38 - this notation I would suggest you pause
11:40 - and go ahead and watch that and come
11:43 - back okay so how would somebody really
11:45 - write this code well most likely you
11:48 - don't need to create this variable call
11:51 - to promise and then say dot then really
11:54 - most likely what you're gonna see is
11:55 - just saying fetch and this is called
11:57 - chaining almost everything in JavaScript
11:59 - is chained meaning I'm gonna do this
12:00 - function and chain it with the next
12:02 - thing I can say dot then got data dot
12:06 - catch got error so this is more likely
12:13 - how you're gonna see it written and
12:14 - let's just see do we still get that we
12:16 - still get that error and then if I fix
12:18 - it now we can see we've got that
12:22 - response back correctly okay now how
12:25 - would I really see this most likely I
12:27 - would see this with the use of anonymous
12:28 - functions so this whole thing would end
12:32 - up in here without a name and then this
12:36 - whole thing would end up in here also
12:39 - without a name this is starting to maybe
12:45 - look a little better and you might even
12:46 - see people do this so thes here's the
12:50 - thing there's gonna be a lot of
12:51 - sequencing and what promises are gonna
12:53 - allow me to do is really nicely say dot
12:56 - ven-ven then dot then so I can create
12:59 - this sequence of callbacks more easily
13:02 - now here's the thing if I want to clean
13:05 - this up even a little bit more I might
13:08 - want to use the arrow syntax and once I
13:13 - use the arrow syntax if I just have one
13:14 - line of code I can simplify this let me
13:21 - make sure I have this right and then I
13:26 - can do this
13:33 - did I stop talking I have to concentrate
13:36 - and this doesn't need a semicolon whoa I
13:41 - made this confusing but let's just do my
13:43 - best here all right so let's just make
13:46 - sure this still works and then let's
13:47 - look look at it again okay it's still
13:49 - working so look at this business
13:50 - starting to look kind of nice it's
13:52 - confusing this is not for the this is
13:56 - not for your first day of programming
13:57 - but I now have fetch which returns a
14:00 - promise and I can also because I only
14:02 - have this one I can do that I can get
14:04 - rid of these parentheses I have this
14:07 - function which returns a promise and the
14:11 - promise is handled when it is fulfilled
14:13 - the data is console logged when there is
14:17 - an error the error is console.log that's
14:19 - what I have so far right now and here's
14:21 - the thing I want to I want to actually
14:23 - get that word like I want to say data
14:25 - dot word but that's undefined so this is
14:29 - the funny thing about fetch if I go to
14:31 - the documentation for fetch and go under
14:33 - use using fetch yes here's the thing you
14:38 - can start to see that there's something
14:40 - like what I'm showing you here but
14:42 - there's also this like dot JSON so the
14:45 - thing is the thing that's coming back
14:47 - from fetch I have to ask for it to be
14:49 - converted into an object that I can use
14:51 - and that's with the dot JSON function so
14:54 - let's look at how I would do this so
15:01 - here's the thing the dot JSON function
15:05 - also it returns a promise so what I
15:10 - really want to do is this I want to say
15:12 - when the data comes back call dot JSON
15:15 - and then guess what
15:17 - so this is really the response convert
15:23 - that to JSON and then take the JSON and
15:27 - console.log log that which is like this
15:35 - alright let's take a look at this so now
15:38 - you can see how my sequencing is much
15:40 - easier to manage I don't have callback L
15:43 - I actually just have the things that
15:44 - have to happen one line after the other
15:46 - boy this is tough stuff whoops there we
15:52 - go
15:52 - and now you can see I have that word and
15:54 - now okay so let's get a little bit
15:56 - better here because what I really needed
15:58 - to do was call my create P function to
16:01 - make that paragraph so I'm gonna do this
16:06 - so let's take a look at this let's just
16:09 - put that in there now and there we go
16:14 - every time I read so now I'm using
16:16 - promises I'm using fetch and promises
16:20 - okay now I want to next go and try to
16:28 - request a gift associated with that word
16:31 - how am I going to do that now first of
16:34 - all I need to now this is the thing
16:37 - remember with the JavaScript arrow
16:38 - syntax what this really is right here
16:42 - this whole thing right here if I were to
16:44 - rewrite this it's this function JSON
16:51 - create PE write this is just this
16:57 - shorthand but if I want to now ask to
17:02 - fetch the what am i fetching the giffy
17:07 - api if i want to do two if i want to
17:13 - create the paragraph and then fetch the
17:15 - giffy api I no longer can be as short
17:18 - handy I need to put the brackets back
17:22 - because I have two lines of code I need
17:24 - to put those brackets back and that
17:26 - means a parenthesis needs to go here
17:29 - mm-hmm
17:31 - this doesn't look right to me and it's
17:34 - because I have an extra parenthesis here
17:35 - where there should be a semicolon there
17:37 - we go so I have to put the curly
17:40 - brackets back in then I can have two
17:43 - lines of code here right so now first I
17:49 - want to fetch the word Nick API then I
17:51 - want to take the response and convert it
17:53 - into JSON once I have a JSON I want to
17:55 - create the
17:56 - and then fetch from the giffy api so
17:58 - what do I want to do now then the same
18:03 - thing then take that response and
18:07 - convert it into JSON then and then the
18:14 - JSON I'm gonna do this I need to just
18:19 - whoops then with that JSON all I need to
18:22 - do is create the image so I can get that
18:27 - code I had before this is creating an
18:29 - image object and you know I'm not going
18:31 - through how the giffy API works but I in
18:34 - the giffy API
18:35 - I get did I get the JSON data index yeah
18:39 - I get the first gift that's fixed-height
18:40 - small and it's URL so look at this now
18:43 - again this is not so super I mean this
18:46 - is very concise and it's difficult to
18:48 - understand but you can see how nice the
18:50 - sequencing and I'm sure I know I have
18:52 - some errors here but let's at least see
18:54 - how far we get
19:00 - let's see how far we get all right so
19:03 - good news I got the word sketch digest
19:06 - 18 JSON of undefined 18 wait why does
19:14 - that say 18 let me know join this again
19:16 - skip 14 sorry
19:18 - alright so ah so here's the thing
19:22 - promises are chainable right what are
19:24 - the things that return a promise
19:27 - fetch returns a promise which is here
19:31 - risk dot JSON also returns a promise
19:34 - so how come if this returns a promise
19:36 - this worked but this returns a promise
19:41 - this one didn't work well here's the
19:43 - thing you have to explicitly in this
19:46 - chain of promises say return to continue
19:50 - to chain all of the VINs
19:52 - so I actually missed saying return here
19:55 - so if I have to return the promise in
20:00 - order to have the next then sequence
20:02 - properly how come I didn't have to
20:04 - return the response dot JSON promise up
20:07 - here well it's just because I'm making
20:09 - use of the arrow syntax shorthand so I
20:11 - think I want to just remove most of the
20:14 - shorthand here and add back in the curly
20:18 - brackets and say return so and then what
20:23 - am I I need the parentheses here and
20:26 - then also now this is more long-winded
20:29 - than it needs to be but I'm gonna add
20:32 - back in the curly brackets but I just
20:34 - want to emphasize and I've already made
20:36 - another mistake there we go
20:38 - so now let's see can I fit this all in
20:41 - one page here so now look at this now if
20:45 - you if I showed you this at the
20:47 - beginning of this video you would look
20:48 - at me like oh my god you're crazy that
20:51 - makes no sense to me but I'm hoping
20:53 - maybe maybe this is somewhat comfortable
20:56 - for you maybe you have to go back and
20:57 - watch this video again maybe you never
20:59 - want to watch another video in my
21:00 - channel ever but I'm starting with fetch
21:03 - and getting a promise then I get a
21:06 - response back and I'm returning the next
21:08 - promise about converting it to JSON then
21:12 - I
21:13 - returning the then I'm then I'm getting
21:15 - the JSON mmm adding the paragraph and
21:18 - asking to fetch more data once that
21:21 - promise gets resolved I take that result
21:23 - returned into the JSON once that's ready
21:26 - I take that JSON and make an image and
21:28 - then I'm done now here's something that
21:31 - I didn't mention that's so magical about
21:33 - all this each one of these things an
21:37 - error could happen along the way it
21:40 - could break because either one of these
21:41 - URLs could be wrong the data that comes
21:43 - back couldn't be formatted right in such
21:45 - a way that I could get it back to JSON
21:47 - this catch will catch any error anywhere
21:50 - throughout here so if any error happens
21:52 - anywhere it jumps down to here this is
21:54 - much nicer than having to have separate
21:56 - error callbacks for every single thing
21:59 - that I might be doing in a sequence like
22:00 - this so let me now let's hope this works
22:03 - this is time for me to use a drum roll
22:07 - let's see if this works this has been a
22:11 - long video I think
22:15 - there we go it's still working no no no
22:20 - that's the wrong one no no there we go
22:23 - really sound effect challenge so there
22:26 - we go so I'm just gonna now now that we
22:28 - see this full sequence here I'm gonna go
22:32 - back and remove I kind of like using
22:35 - this in once I'm already using the arrow
22:37 - syntax I like to I like to have that
22:41 - shorthand when possible because it does
22:43 - make it easier for me to follow the code
22:47 - so I think and I think I'm gonna keep
22:51 - the curly brackets here because this is
22:53 - kind of a long thing to do so now we can
22:54 - see there might be some other
22:57 - simplifications that I can write to this
22:58 - and there's a lot of extra steps just
23:01 - because of the way that fetch works but
23:03 - this really shows like if I had to do
23:05 - this without promises this code would
23:08 - become really unwieldy and difficult to
23:10 - manage and write so I think I've done at
23:13 - least with this first part what's coming
23:15 - next
23:15 - so I need to show you how to use
23:19 - something called promises all I think so
23:21 - if I want to create like a big array of
23:23 - promises I can wait and have something
23:25 - happen when they're all complete that's
23:27 - thing that's worth showing you another
23:29 - thing is let me make a list of this
23:32 - stuff so can I come over here so I need
23:36 - to show promises all I need to show how
23:42 - to make your own promises how to make
23:45 - your own promises I'm gonna just title
23:47 - the video how to make your problems and
23:48 - maybe people who don't know learn a
23:50 - certain code would just want to know
23:51 - about how to make your own problems how
23:53 - to make your own promises how to promise
23:58 - safai something and then then we're
24:04 - gonna look at I can actually really
24:06 - simplify how this code looks in a really
24:10 - nice way I mean you know you can
24:12 - actually skip all of that entirely if I
24:15 - use and this is an e part of like yes
24:18 - 427 it's a more recent version of
24:20 - JavaScript called a async the async and
24:25 - the await keywords so I'm gonna show how
24:28 - those
24:29 - work and that's gonna even simplify what
24:30 - we did here further now I might be
24:32 - forgetting something that's important in
24:33 - this list and when I come back in the
24:35 - next video I will add to that list as
24:36 - well ok thanks for watching I hope you
24:38 - learned something about promises looking
24:40 - too long and this was helpful to you
24:47 - [Music]

Cleaned transcript:

hello I have a promise to make sure by the end of this video I am hopeful that you and I together will understand what the how this promises thing is in JavaScript because me I'm a person who programs in JavaScript with callbacks but there has been for quite a while something called a promise in JavaScript and it used to be something that was part of certain libraries that you could import and add to your code now as of I think es6 which is yes 2015 whatever as of a more recent version of JavaScript promises are something native to how JavaScript works so I hope this video will answer the question for myself as well as you why should you care about this what is a promise and how do you make use of a promise so the demonstration so I have a JavaScript program already running it and I think a good way to demonstrate this is to look at making requests for data from api's so I am making a request for a random word from the word Nick API and then I am asking the giffy API for a gif Assoc of that word so if i refresh this page there we go i refresh this page again there we go so this is the demonstration I'm going to use now that at present the code for this is using the p5.js library with callbacks there are no promises involved there's a load JSON function that passes in the URL to a particular API it has a callback for when the data is ready then I get that data and then I go I ask load JSON again with another URL and then I who then I have another callback oh my goodness so here's the thing a callback really makes sense for this idea of an event right when the mouse is pressed trigger this function it's an event but if I want to sequence asynchronous things that happen in my program meaning I'm making all these API requests I'm asking for this I'm asking for this and then when this comes back I want to do this callbacks can get very unwieldy and you can actually find yourself living in what's known as sound effects please call back hell so I'm going to show you right now and call back hell now I've written this in a weird sort of way where I call low JSON okay that's just way too distracting where I call low JSON and then but you might be you might imagine that you use anonymous functions so when I call low JSON instead of having this separate you got data function I'm gonna take this up here and I'm gonna put this in here why is this so and then I'm going to I don't need it to be a name I'm just gonna pass the call back in here directly okay so this is perfectly normal to do ah but then when this one when I then go to the giffy API then I'm gonna I need this next anonymous function and I need that to go in here I don't want to name it anymore it's an anonymous function and there we go so now let's refresh this and it still works homeward bound oh there is no what's great about this is this is going to trigger an error sometimes when it can't find an image and I'm gonna need that with promises I'm need to figure out of handling errors so look at this this isn't even that bad this is fur but but look how this is just not sustainable first of all I don't like how much room I have here this is like absolutely not sustainable I won't up load JSON have this callback then load is none of this callback this King I could just keep going with this and all of a sudden you can see my code just gets indented and indented and indented more this isn't good could there be something better I don't know I don't know really if it's better or not but there is something and that something is called a promise a promise is an object so the idea of in so let's say so we have this load JSON function which expects a URL and then a callback here's another reason why we could get stuck in callback hell we might need multiple callbacks or different things like an error callback and then or then our code is even more unwieldy because then we have these sequences and we have different things for the success callback so this is what our code looks like with a callback now p5 at present doesn't support promises but if it did instead I could say something like this let promised equal lo JSON URL so the idea is instead of passing a function a callback you ask a function for a promise so because the p5 GS library doesn't support promises and I am here to teach or learn which one I'm not sure yet about promises I'm going to instead use a function called fetch which is a function native to javascript in the browser that supports promises so this gives me a promise once I have that promise I have it as an object and I can do all sorts of things with it but the idea of a promise it's an object that can be in a certain state so the possible states are it can be pending right this is while I'm waiting to get the data back from the API it can be fulfilled which means it's it's been successfully resolved I have the results back from the API or it can be rejected meaning some error has happened so if I have this object the idea is that I can just check this object to say wait hey object what pay promise everything's fine I just dropped the top of the marker I have this problem I have this promise I promise you promise me something are you still pending I'm waiting for you to finish promise are you pending and then I could say like hey were you rejected were you filled and then give me the stuff back but here's the thing if I do this I actually don't need to query the promise continuously I can use something called then and/or catch then is a function that receives a function to be execute it's kind of like a call pack when it has been fulfilled and catch receives a function to be executed when it has been if and when it has been rejected and there's actually if we go back if we go to the Mozilla JavaScript documentation page there's a nice diagram so this idea of a promise it's pending you can see all this stuff that happens but in the end there's just a then or a catch so this is the basic idea so what I'm gonna do now is I'm gonna start to rewrite that code using promises now I should be explicit about a couple things number one is I am NOT creating I can write code that creates promises I can use them and I'm gonna get to that but I'm not doing that right now what I am doing is using somebody else's function that returns a promise so I need to get to creating your own promises and I'm gonna make lots of promises and then the other thing is I need to like to see does this willy help us does this really make our code easier to follow and so let's just sort of see so let's let's go back so first of all let me just show you where this function called fetch is coming from so this is the fetch function and basically fetch is just a function that you give it a URL and it fetches the stuff from that URL and gives you a promise back so I am going to I'm going to comment this out and I'm gonna say let promise equals fetch word Nick API and then I'm gonna say console.log promise so I so let's take a look and see what this is look at that and at the moment that promise is pending look the promise is pending yeah here's the thing let me make I'm gonna do something very silly which is actually let me do let me do this in let's do another one here let P equal Fett let's do this again just in the console and let's look at that it's resolved like a few moments later it's resolved right so at the next line of code so I could do something crazy like while promise is not resolved wait wait wait wait wait wait but that would be like blocking code the point of a promise is to handle asynchronous things my program is going to keep going but behind the scenes it's going to be waiting for that data and the way I do that I don't think way too much time to get to this is with the ven function so watch this if I say promise then and then I put got data in here and this is nobody would ever write JavaScript like this I'm just doing this in kind of a crazy way and then I will condense it down and then I write my got data function let's run this and take a look at this looks a little weird let's run this now so I got oh yeah I forgot all this is great I forgot the fetch function has some weird properties which is going to cause us a bit of a problem which is why we need promises so look at this I actually so you can see I got the results back but actually the results have to be converted into a format that I can use so all right so first of all so this is the idea right and if there was an error I could say promise catch got error and I could say console.log error all right so now let's make it have an error let's like mess up the URL by accident and we can see I got an error there type error failed to fetch so you can see this is the idea I get a promise I can give it a function to with then for when it's successful and I can give it a function for when there's an error I forgot to mention I'm gonna start probably using the JavaScript arrow syntax in the course of looking at promises because it's really helpful and it's many ways necessary for working with them effectively so if you haven't already watched my video or somebody else's video or tutorial about the JavaScript arrow notation which is this notation I would suggest you pause and go ahead and watch that and come back okay so how would somebody really write this code well most likely you don't need to create this variable call to promise and then say dot then really most likely what you're gonna see is just saying fetch and this is called chaining almost everything in JavaScript is chained meaning I'm gonna do this function and chain it with the next thing I can say dot then got data dot catch got error so this is more likely how you're gonna see it written and let's just see do we still get that we still get that error and then if I fix it now we can see we've got that response back correctly okay now how would I really see this most likely I would see this with the use of anonymous functions so this whole thing would end up in here without a name and then this whole thing would end up in here also without a name this is starting to maybe look a little better and you might even see people do this so thes here's the thing there's gonna be a lot of sequencing and what promises are gonna allow me to do is really nicely say dot venven then dot then so I can create this sequence of callbacks more easily now here's the thing if I want to clean this up even a little bit more I might want to use the arrow syntax and once I use the arrow syntax if I just have one line of code I can simplify this let me make sure I have this right and then I can do this did I stop talking I have to concentrate and this doesn't need a semicolon whoa I made this confusing but let's just do my best here all right so let's just make sure this still works and then let's look look at it again okay it's still working so look at this business starting to look kind of nice it's confusing this is not for the this is not for your first day of programming but I now have fetch which returns a promise and I can also because I only have this one I can do that I can get rid of these parentheses I have this function which returns a promise and the promise is handled when it is fulfilled the data is console logged when there is an error the error is console.log that's what I have so far right now and here's the thing I want to I want to actually get that word like I want to say data dot word but that's undefined so this is the funny thing about fetch if I go to the documentation for fetch and go under use using fetch yes here's the thing you can start to see that there's something like what I'm showing you here but there's also this like dot JSON so the thing is the thing that's coming back from fetch I have to ask for it to be converted into an object that I can use and that's with the dot JSON function so let's look at how I would do this so here's the thing the dot JSON function also it returns a promise so what I really want to do is this I want to say when the data comes back call dot JSON and then guess what so this is really the response convert that to JSON and then take the JSON and console.log log that which is like this alright let's take a look at this so now you can see how my sequencing is much easier to manage I don't have callback L I actually just have the things that have to happen one line after the other boy this is tough stuff whoops there we go and now you can see I have that word and now okay so let's get a little bit better here because what I really needed to do was call my create P function to make that paragraph so I'm gonna do this so let's take a look at this let's just put that in there now and there we go every time I read so now I'm using promises I'm using fetch and promises okay now I want to next go and try to request a gift associated with that word how am I going to do that now first of all I need to now this is the thing remember with the JavaScript arrow syntax what this really is right here this whole thing right here if I were to rewrite this it's this function JSON create PE write this is just this shorthand but if I want to now ask to fetch the what am i fetching the giffy api if i want to do two if i want to create the paragraph and then fetch the giffy api I no longer can be as short handy I need to put the brackets back because I have two lines of code I need to put those brackets back and that means a parenthesis needs to go here mmhmm this doesn't look right to me and it's because I have an extra parenthesis here where there should be a semicolon there we go so I have to put the curly brackets back in then I can have two lines of code here right so now first I want to fetch the word Nick API then I want to take the response and convert it into JSON once I have a JSON I want to create the and then fetch from the giffy api so what do I want to do now then the same thing then take that response and convert it into JSON then and then the JSON I'm gonna do this I need to just whoops then with that JSON all I need to do is create the image so I can get that code I had before this is creating an image object and you know I'm not going through how the giffy API works but I in the giffy API I get did I get the JSON data index yeah I get the first gift that's fixedheight small and it's URL so look at this now again this is not so super I mean this is very concise and it's difficult to understand but you can see how nice the sequencing and I'm sure I know I have some errors here but let's at least see how far we get let's see how far we get all right so good news I got the word sketch digest 18 JSON of undefined 18 wait why does that say 18 let me know join this again skip 14 sorry alright so ah so here's the thing promises are chainable right what are the things that return a promise fetch returns a promise which is here risk dot JSON also returns a promise so how come if this returns a promise this worked but this returns a promise this one didn't work well here's the thing you have to explicitly in this chain of promises say return to continue to chain all of the VINs so I actually missed saying return here so if I have to return the promise in order to have the next then sequence properly how come I didn't have to return the response dot JSON promise up here well it's just because I'm making use of the arrow syntax shorthand so I think I want to just remove most of the shorthand here and add back in the curly brackets and say return so and then what am I I need the parentheses here and then also now this is more longwinded than it needs to be but I'm gonna add back in the curly brackets but I just want to emphasize and I've already made another mistake there we go so now let's see can I fit this all in one page here so now look at this now if you if I showed you this at the beginning of this video you would look at me like oh my god you're crazy that makes no sense to me but I'm hoping maybe maybe this is somewhat comfortable for you maybe you have to go back and watch this video again maybe you never want to watch another video in my channel ever but I'm starting with fetch and getting a promise then I get a response back and I'm returning the next promise about converting it to JSON then I returning the then I'm then I'm getting the JSON mmm adding the paragraph and asking to fetch more data once that promise gets resolved I take that result returned into the JSON once that's ready I take that JSON and make an image and then I'm done now here's something that I didn't mention that's so magical about all this each one of these things an error could happen along the way it could break because either one of these URLs could be wrong the data that comes back couldn't be formatted right in such a way that I could get it back to JSON this catch will catch any error anywhere throughout here so if any error happens anywhere it jumps down to here this is much nicer than having to have separate error callbacks for every single thing that I might be doing in a sequence like this so let me now let's hope this works this is time for me to use a drum roll let's see if this works this has been a long video I think there we go it's still working no no no that's the wrong one no no there we go really sound effect challenge so there we go so I'm just gonna now now that we see this full sequence here I'm gonna go back and remove I kind of like using this in once I'm already using the arrow syntax I like to I like to have that shorthand when possible because it does make it easier for me to follow the code so I think and I think I'm gonna keep the curly brackets here because this is kind of a long thing to do so now we can see there might be some other simplifications that I can write to this and there's a lot of extra steps just because of the way that fetch works but this really shows like if I had to do this without promises this code would become really unwieldy and difficult to manage and write so I think I've done at least with this first part what's coming next so I need to show you how to use something called promises all I think so if I want to create like a big array of promises I can wait and have something happen when they're all complete that's thing that's worth showing you another thing is let me make a list of this stuff so can I come over here so I need to show promises all I need to show how to make your own promises how to make your own promises I'm gonna just title the video how to make your problems and maybe people who don't know learn a certain code would just want to know about how to make your own problems how to make your own promises how to promise safai something and then then we're gonna look at I can actually really simplify how this code looks in a really nice way I mean you know you can actually skip all of that entirely if I use and this is an e part of like yes 427 it's a more recent version of JavaScript called a async the async and the await keywords so I'm gonna show how those work and that's gonna even simplify what we did here further now I might be forgetting something that's important in this list and when I come back in the next video I will add to that list as well ok thanks for watching I hope you learned something about promises looking too long and this was helpful to you
