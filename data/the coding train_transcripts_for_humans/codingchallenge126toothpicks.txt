With timestamps:

00:00 - (train whistle)
00:01 - - Hello and welcome to a coding challenge.
00:03 - Toothpicks?
00:04 - I know, seems a little weird.
00:05 - What?
00:06 - I'm really doing a coding
challenge about toothpicks?
00:08 - And in fact I have all these toothpicks
00:12 - on my desk over here and I'm trying to,
00:14 - I thought, "Oh I'm going to
have this really amazing video
00:15 - "where I arrange them."
00:17 - And I just, I just, I can't.
00:18 - I'm terrible at this sort of thing.
00:20 - So I'm going to, but I do
have an overhead camera,
00:22 - which is exciting.
00:22 - There's some possibilities there.
00:23 - So what is this toothpick pattern?
00:25 - Terrific toothpick pattern.
00:26 - So first of all, I would suggest
pause this video right now.
00:29 - Go and watch this
wonderful Numberphile video
00:32 - which explains the toothpick pattern.
00:35 - And you can use it
00:36 - to generate interesting
fractal-like visualizations
00:40 - in a two dimensional space.
00:42 - This actually comes from the research
00:45 - of N. J. A. Sloane who is the founder
00:48 - of my absolute favorite website.
00:51 - I mean, I don't know, but
there's other wonderful websites
00:53 - so I don't know.
00:54 - I don't want to play favorites here,
00:54 - but the On-line Encyclopedia
of Integer Sequences is
00:57 - a pretty awesome website.
00:59 - It's just a website of
sequences of numbers.
01:03 - And I've used it before
and there's so many things
01:05 - to explore in terms of
these sequences of numbers,
01:07 - but one of these, a particular
sequence of numbers comes
01:10 - out of this toothpick sequence,
01:13 - Omar Pol's toothpick sequence.
01:15 - So this is a nice
interactive demonstration
01:18 - of the toothpick sequence.
01:19 - You start with, oh, wait, wait, wait.
01:20 - We can do this.
01:21 - You start with a single toothpick.
01:24 - Let's just say next.
01:25 - And you put two toothpicks,
I can zoom in on that,
01:30 - two toothpicks.
01:32 - I'm doing it!
01:33 - I'm making content with
multiple (mumbles).
01:35 - You put two toothpicks
like this on the ends
01:38 - and then you say next and I
also put toothpicks on the ends,
01:43 - but the next step is the key step.
01:47 - So once I get to here
and I say next again,
01:49 - notice how no toothpick goes here, right?
01:54 - Toothpicks can only go on
what's called a free edge,
01:57 - an edge that's not touching
any other toothpicks.
02:00 - So this is touching here,
this is touching here.
02:03 - I can actually point over this way.
02:04 - I don't know.
02:05 - I don't know the best way to do this.
02:06 - Let's get rid of that camera shot.
02:07 - But so and then if I keep
hitting next, look at this.
02:11 - I keep going and going and going and going
02:13 - and going and going and
I can adjust the scale
02:15 - and I could actually
just say run and boom.
02:17 - And so I want to make this
02:18 - in the processing programming environment,
02:21 - which is a Java 8 programming environment.
02:22 - Can I make this?
02:24 - So a couple of things.
02:25 - One is this is fun to play around with.
02:26 - You can play with different, you can play
02:29 - with different parameters.
02:30 - You can render out to a PDF.
02:32 - And in addition, what's going on here,
02:35 - why is this a number sequence?
02:36 - What's kind of fascinating about this
02:37 - and if you watch the Numberphile videos,
02:39 - can you create an equation, a formula
02:41 - to sum all the given toothpicks
at any stage of iteration?
02:48 - And that's exactly what this
particular number sequence is
02:52 - which I will now do a dramatic reading of
02:54 - because I like to read number sequences.
02:57 - (gentle lullaby music)
02:58 - Zero, one, three, seven,
11, 15, 23, 195, 207, 223,
03:07 - 251, 283, 303, 319, 347,
735, 763, 795, 815, 859, 895.
03:25 - Okay, that's good enough.
03:27 - (laughs)
03:28 - (claps)
03:30 - Let's start coding.
03:32 - Let me make a window that's 600 by 600.
03:35 - Let me draw a background that
is white and let me hit run
03:40 - and we can see.
03:40 - There it is.
03:42 - There's my window.
03:43 - This is where I need
to draw the toothpicks.
03:43 - So I think what I need to do is, you know,
03:46 - skip a few steps here,
03:47 - like I might, if I'm
really trying to do this,
03:49 - the first thing that I might do is
03:50 - just literally draw a line.
03:52 - But I know that I'm
going to need some kind
03:54 - of toothpick object.
03:55 - This is a good case of
object-oriented programming
03:57 - because I need to create a class
03:59 - that describes what it
means to be a toothpick.
04:02 - What does it mean to be a toothpick?
04:03 - Then I can have an array
of many toothpicks.
04:07 - I'm going to say class toothpick.
04:10 - And what do I need in a toothpick?
04:12 - So, I know that I need a toothpick.
04:15 - I need to have two endpoints.
04:17 - What's the xy location here and
what's the xy location here?
04:20 - So I'm going to call those ax, ay, bx, by.
04:26 - And I'm going to write the constructor.
04:29 - And the way that I'm going to do this,
04:31 - the way that I think this
is going to work the best,
04:33 - like when I create a toothpick,
what I'm going to do,
04:35 - the toothpicks can only
be horizontal or vertical.
04:38 - So I'm going to create a toothpick
04:39 - by giving it the center point
04:40 - and then giving it a value
like one or negative one
04:43 - whether it's horizontal or vertical.
04:45 - So in addition, it is also
going to each toothpick
04:48 - will have a variable called dir
04:50 - for direction or orientation.
04:52 - So I'm going to give each toothpick an x.
04:55 - And I'm using integers very specifically
04:57 - because I think this is
going to make my life easier
05:01 - to sort of almost think of this toothpick
05:04 - as living on a grid
05:05 - and you can't have spot 1.37 or 2 point,
05:08 - like I really want to be like as close
05:11 - to pixel perfect as I can.
05:13 - So, and I also, I mean this
is really a global variable
05:16 - for the whole system.
05:17 - I'm just going to make
a variable called length
05:19 - for how long a toothpick is.
05:21 - And I do want an add number
05:22 - because I do want to have that
center point be perfectly,
05:25 - have each half of the
toothpick be equal in size.
05:30 - So for example, if I had a
toothpick of length nine,
05:35 - then the center point is at five, no four.
05:40 - Zero, one, two, three,
five, six, seven, eight.
05:44 - Hold on, let me explain
why this is important.
05:48 - If I have something of
length three, right,
05:52 - this is the center, the total
length of this is three,
05:55 - this is the center.
05:56 - I have one spot here and one spot here.
05:59 - If I have something that's of length five,
06:02 - then I've got two here, two
here, and a perfect center.
06:05 - So this is going to be
important in terms of, I think,
06:08 - the sort of evenness of
how I place the toothpicks.
06:11 - Alright, so length.
06:13 - Let's just start with a length of nine.
06:16 - And what I'm going to say is that, oh,
06:18 - and I get to get a direction.
06:22 - So I'm going to say that
if the direction, oh,
06:25 - so first I'm going to say
that, let's just call this d.
06:29 - Direction equals d.
06:31 - If the direction equals one,
06:33 - let's make that a horizontal toothpick.
06:36 - So then ax should equal x
plus length divided by two
06:42 - and ay, no sorry, and bx should equal,
06:47 - oh so ax should be x minus
length divided by two
06:50 - and bx should be x plus
length divided by two.
06:54 - And then the y's are the same.
06:56 - Ay is y and by is y.
06:59 - And then let's make a
toothpick that is vertical.
07:05 - So I'm going to do all the same stuff,
07:07 - but these are now going to be with the y,
07:11 - higher and lower.
07:14 - And let's get rid of
this white space here.
07:16 - And so now, then I'm going to
write a function called like show
07:21 - and I'm going to say,
I'm just going to draw.
07:23 - I'm going to say stroke zero.
07:25 - Let's make a little,
stroke weight like two
07:28 - just so we can see it.
07:29 - And then I'm going to say
line from ax, ay to bx, by.
07:37 - So this is the idea of a toothpick.
07:39 - A toothpick has two points a
and b, axy, ay, ax, ay, bx, by
07:47 - and it has a direction.
07:48 - Just to be clear about this
07:49 - because this is so fundamental,
07:51 - this is the toothpick.
07:53 - This is point ax, ay.
07:56 - This is point bx, by.
07:58 - But also the toothpick could
be in this orientation as well.
08:03 - So now in my main program,
I'm going to make an,
08:06 - I know I'm going to need to
have a list of toothpicks.
08:09 - So I'm going to make an array
list full of toothpicks.
08:14 - Let's call that picks equals
new array list toothpick.
08:20 - Now if you've, if you're coming from all
08:22 - of my JavaScript tutorials,
this is a pretty weird thing
08:25 - that I've written
08:27 - because in essence, if I were
doing this is JavaScript...
08:30 - Why does it not know?
08:33 - (bell rings)
08:34 - Silly me, I have a capital
P there for no reason.
08:37 - So what I was saying was, if you've come
08:40 - from my JavaScript videos,
you would see me do something
08:42 - like this, like making an empty array
08:45 - that I'm going to fill in
JavaScript is super simple.
08:48 - In Java, which this
processing is built on top of,
08:51 - I've got to use this data
structure called an array list.
08:54 - I don't have to.
08:55 - There's other data
structures, which I need
08:56 - to specify what's going
in it: toothpick objects.
08:59 - And then I need to create it.
09:01 - So there.
09:02 - Now what I want to do is I want
to picks add a new toothpick
09:10 - which I'm going to put at 300, 300.
09:12 - And you know what?
09:13 - I'm going to put it at zero, zero
09:15 - and I'm going to give
it a direction of one
09:18 - because what I'm going to do here
is I'm going to say translate
09:21 - width divided by two.
09:22 - I'm always going to think of the center
09:25 - at the center of the canvas as zero, zero.
09:30 - So I need to translate to that center
09:32 - and then I'm going to
say for every toothpick t
09:37 - in picks t dot show.
09:42 - So this now a loop where
I'm just going to say
09:44 - whatever toothpicks I have,
09:45 - so I'm starting with one toothpick.
09:47 - I made a class, object-oriented
class, a template
09:50 - for a toothpick.
09:53 - Then I made an actual toothpick.
09:55 - Zero, zero, I can't remember.
09:56 - One is either this way or this way.
09:58 - And then I say whatever
toothpicks I have, show them all.
10:02 - And so now if I were to run this again,
10:04 - we can there's my toothpick.
10:07 - And let's make the length,
let's have length be kind
10:10 - of like a global variable over here.
10:13 - And let's have that be
something more like 63.
10:16 - Let's run this again.
10:18 - We can see there's my toothpick.
10:20 - And by the way, I could
do something like this.
10:23 - I mean, you know, as an
exercise, I could just make a ton
10:25 - of random toothpicks,
10:27 - but that's not what I want to do.
10:28 - What I want to do is each cycle, right,
10:32 - I want to say what are all
the existing toothpicks?
10:35 - Check every existing toothpick.
10:37 - Look at its endpoints.
10:39 - Is that a free endpoint?
10:40 - And if there is, make
a new toothpick there.
10:43 - So a nice way to do
that in the draw loop is
10:47 - to start by actually saying,
make another empty array list.
10:53 - I'm going to call it next.
10:54 - So this is kind of like
the next generation
10:56 - of toothpicks is another
new, boy, there's a lot
10:59 - of typing going on here
with these array lists.
11:02 - I'm going to make a new list
of toothpicks, the next list.
11:07 - And as I go through all of
these existing toothpicks,
11:11 - what I want to say is, I'm
going to say, I'm going to,
11:17 - you know what I'm going to do?
11:18 - I'm going to ask the toothpick to create.
11:20 - I'm going to say call create.
11:22 - I'm going to say, I'm going to
name these create a, create b.
11:24 - There's probably a better name for that.
11:26 - I'm trying to think,
11:27 - but what I mean is, let's
have the toothpick itself,
11:29 - it knows about its edges.
11:31 - Maybe I need to, when I
call those functions pass
11:35 - in an array to all of
the existing toothpicks.
11:39 - Like hey, check yourself
before you wreck yourself.
11:44 - No, check yourself against
all the other toothpicks
11:47 - to see if your edges are
touching any of them.
11:50 - If not, make a new toothpick.
11:54 - Ah, and these should be and
then I should say toothpick.
11:59 - This function should
return two new toothpicks.
12:04 - I'm going to call them a and b.
12:07 - I should probably call them,
if I'm being consistent here,
12:09 - like next a and next b.
12:17 - So, right, and then, so okay.
12:19 - So what if, and then I want to,
12:21 - what I think I'll do is
I'll have this function.
12:22 - I'm kind of planning
this out as I'm going.
12:24 - This might be a bad idea.
12:25 - We'll find out.
12:26 - I'm going to have the function
12:27 - if the endpoint is not actually
free, just return null.
12:32 - So it will return a new toothpick
12:33 - if it's a valid endpoint edge.
12:36 - If it's not, it'll just return null.
12:37 - So what I'll say there
is if next a is not equal
12:42 - to null, then next dot add next a,
12:50 - and there's probably a way I could do this
12:52 - with one function or something,
12:54 - and if next b is not null, add next b.
12:57 - And then at the end, what do I want to do?
13:00 - I want to say I think
toothpicks dot add all next.
13:09 - So I think this is the idea.
13:10 - Like I haven't really written the code
13:11 - for doing this yet, but this is the idea.
13:13 - For every existing toothpick...
13:16 - And here's the thing, I don't want...
13:18 - This would be problematic if I didn't...
13:20 - I think, there's a
couple reasons why I want
13:22 - this next array list.
13:24 - And I did sort of think
about this in advance.
13:25 - Like you might be thinking
why not just add them
13:28 - to the existing list of picks?
13:29 - Well, one thing is if I add stuff
13:32 - to the end while I'm iterating through it,
13:34 - things could go pretty awry.
13:36 - Also, visually what I want to do,
13:38 - I might want to draw the new
toothpicks each time like
13:41 - as a different color.
13:42 - There might be some separating out
13:43 - what the next generation of toothpicks is
13:45 - from the current generation
13:46 - might actually be somewhat helpful.
13:48 - (claps)
13:48 - Okay, so now what I really
need to do is write this,
13:51 - these create functions.
13:53 - So let's say, let's first
write the create a function.
13:58 - So with this function, it
gets another array list, whoa.
14:06 - I'll call these others
and return null here.
14:13 - The idea of this function is I want
14:14 - to check this toothpick against
14:16 - any other existing toothpicks
to see if they're sitting
14:18 - on the edge and if they're not,
14:20 - I'm going to create a new
toothpick on the edge.
14:22 - So, here's how I'm going to do that.
14:24 - I'm going to say for every
toothpick other in others,
14:33 - oh geez, if and let's try...
14:41 - So I'm going to write some
pseudo code for a second.
14:43 - If this pick is touching other
14:51 - and I also, first I want to
say, actually by the way,
14:54 - if other is not equal to this,
14:59 - like I only want to check,
I don't want to check this,
15:03 - if this toothpick against itself.
15:06 - And I'm going to say, oh
this is, boolean available.
15:13 - So I'm going to assume the pick,
the toothpick is available.
15:18 - So and then I'm going to
loop through all of them
15:20 - and if I find that its edge
is touching any other edge,
15:24 - then it's not going to be available.
15:26 - So how am I going to do that?
15:27 - Now because I've written this in kind
15:29 - of what is now arguable a silly, whoa,
15:32 - toothpicks went flying!
15:34 - Somebody slow-mo that down.
15:36 - (deep slow motion voice)
15:39 - Do we have Smarter Everyday's
like slow motion camera
15:41 - somewhere available?
15:42 - Okay, if because I wrote
this in a sort of silly way,
15:46 - I'm writing a create a
and a create b function,
15:49 - what I actually just want
15:50 - to do here is check the a endpoint against
15:53 - every other toothpick to see
15:55 - if two toothpicks have the
same endpoint as each other,
16:00 - to see if they're intersecting
at that same endpoint.
16:03 - And you know somebody
did ask about toothpicks.
16:08 - A toothpick right, I'm
looking for the case
16:10 - where this is toothpick one
and this is toothpick two
16:13 - and this is like point a
and maybe it's the same
16:16 - as point a or b of another toothpick.
16:19 - This is what I'm looking
for, but it is the case
16:22 - that toothpicks could also
be intersecting the center
16:25 - of another toothpick.
16:26 - But I'm pretty sure I don't have
16:29 - to check for that because
once I add a toothpick,
16:33 - if I add two more toothpicks,
16:35 - sure this toothpick is intersecting here
16:38 - at the center of these two
toothpicks, but it's done,
16:41 - like I never have to check
this toothpick again.
16:43 - Once I have added something
to that toothpick,
16:45 - I can call it quits and
only check the endpoints
16:48 - of these new toothpicks and by definition,
16:50 - there can't, there could only be,
16:52 - the way this algorithm
works out is, you know,
16:55 - these two, the two toothpicks
here are intersecting
16:58 - at the endpoints.
16:59 - So I'm pretty sure that's
how it's going to work
17:00 - if you look at the demos
of it and how it works.
17:03 - I don't think I need to check the center.
17:05 - Okay, at least I'm trying
to convince myself.
17:07 - So as long as it's not the same toothpick
17:09 - and intersects, I'm going to
write this rather awkwardly.
17:14 - I'm going to say intersects
ax, ay with other, with other,
17:21 - then available is false.
17:27 - And so maybe what I want to do is say
17:28 - like other dot intersects ax, ay.
17:32 - So this is actually like
available equals false.
17:37 - So maybe this is kind of like a function
17:41 - inside of the toothpick class,
17:47 - that it can check if it's
intersecting any generic point.
17:51 - So this is a little bit
confusing what I'm doing.
17:53 - I'm going to write a boolean function
17:54 - that says intersects any arbitrary xy.
17:59 - And I can say basically if ax equals x
18:02 - and ay equals y, that is a case
where I should return true.
18:08 - Otherwise if bx equals x, I'm
just checking both points.
18:14 - And again easily, there's
probably a better way to do this.
18:21 - I'm also going to return true.
18:22 - Otherwise, return false.
18:27 - So basically this is the
idea and these are integers.
18:30 - And I can check for equality here
18:32 - because I'm doing all integer math.
18:34 - If I used p vectors and floating points,
18:35 - I'd be worried about, you know, I'd have
18:37 - to use the distance or something.
18:39 - But as long as the a point and the b point
18:43 - of this toothpick is not
equal to this arbitrary x
18:46 - and y point, then I want to return false.
18:48 - So now here comes the fun part.
18:52 - Right isn't this fun?
18:53 - I'm having fun!
18:55 - Weeping emoji.
18:57 - If it's still available, then what I want
19:02 - to do is return a new toothpick.
19:09 - And the new toothpick center,
19:11 - the new toothpick center is where?
19:13 - It's at that point.
19:15 - So the new toothpick is at ax, ay
19:17 - and it's direction is what?
19:19 - It's direction is always the inverse.
19:21 - So if this one's one,
this one's negative one.
19:23 - If this one's negative
one, this one's one.
19:25 - So it's just direction times negative one.
19:30 - Otherwise return null, okay?
19:37 - So now we're going to go back here.
19:39 - Let's forget about next b.
19:41 - Let's forget about create b.
19:43 - I also want to do something.
19:45 - I'm going to say no loop.
19:48 - I want to control the looping
19:50 - and then I'm going to add mousePressed
19:53 - and in mousePressed, I'm
going to call redraw.
19:56 - This is so I can click the
mouse through every frame.
19:59 - So let's see if this works.
20:01 - Let's see if I can kind of
condense the code a little bit
20:03 - so we can look at more of it at once.
20:06 - And now, oops, if other
does not equal this
20:09 - and other, oh, I'm missing
a parentheses there.
20:12 - Let's run this.
20:13 - Okay, so now if I click,
I got a new toothpick.
20:20 - I got a new toothpick, new
toothpick, new toothpick.
20:22 - So this is actually
working, but it's just doing
20:24 - that one endpoint.
20:29 - So again I really shouldn't,
there's no reason for me
20:32 - to have two separate
functions here, but why not?
20:38 - What I'm going to do now is in
the toothpick, I'm going to,
20:43 - just this is terrible.
20:45 - I do not like this at all,
do not like copy pasting.
20:50 - I'm just going to call this create b.
20:52 - I'm going to say bx, by and bx, by.
20:56 - So this is exactly the same function,
20:58 - but checking the b endpoint.
21:01 - And I can do this
21:02 - because a toothpick
only has two endpoints.
21:03 - But this doesn't scale.
21:06 - It can't generalize this
to any kind of shape
21:08 - with any n number of endpoints.
21:10 - So, definitely going
to have to rethink this
21:12 - for maybe a future video I might make.
21:15 - Oh, look at that!
21:17 - That kind of looks like
the toothpick pattern.
21:20 - (bell dings)
21:21 - So in some sense, we're done.
21:23 - But couple things I want to do.
21:26 - Number one is I would like to, I need to,
21:29 - there's a big optimization I can make here
21:31 - which is to only check the new toothpicks.
21:35 - So one thing that I'm going to do is,
21:39 - let's make these two
different loops just to,
21:43 - let's separate out the drawing from the
21:45 - like picking the next stuff.
21:47 - The other thing I should do is
21:49 - when a toothpick is a new toothpick,
21:55 - so let's call it new pick,
oh, that's weird, is true.
22:05 - So and then the, what I want to do here is
22:11 - when I draw it, let's try it.
22:13 - Let's just try this for a second.
22:15 - If it's a new pick, say
stroke, let's make it blue.
22:21 - And then by definition, then
new pick would be false.
22:27 - So I just want to and actually
let me not do that here.
22:29 - So this should be, now they're all blue.
22:33 - Okay, so they're all blue.
22:35 - All the new toothpicks are blue.
22:37 - And then what I want to
do here is I would say
22:40 - if t is a new pick, again,
22:43 - I could probably keep it in a
separate list, but whatever.
22:46 - If t is a new pick, then I
could do all of this checking
22:52 - and then say it's not a new pick anymore.
22:57 - Alright, so this is going to limit all
23:00 - of the checking to only the toothpicks
23:03 - that were actually new the previous time.
23:05 - And I could keep the next array list
23:07 - from one cycle to the other,
23:08 - but this I think will
do the trick right now.
23:11 - Blue, you can see this
one is no longer blue.
23:14 - Only these are blue.
23:15 - Only these are blue.
23:16 - So in theory, I have now
optimized this a bit faster.
23:19 - Okay, so now going back to the code,
23:23 - I can, to get rid of this no
loop, I can let it just go
23:29 - on its own and we see it sort of filled
23:31 - up the screen really quickly.
23:33 - So this is what I want to do here.
23:35 - I want to use the scale
function to, as it grows,
23:41 - sort of zoom out on the drawing.
23:43 - So scale is a transformation
that can scale what I'm seeing.
23:46 - So, for example, if in the draw loop here,
23:50 - I just say scale 0.5,
you can see there it is
23:55 - at half the size.
23:56 - If I say scale 0.1, we can see,
23:59 - now we can see all those
toothpicks being added
24:03 - at a much lower scale.
24:06 - Okay, okay, so how do I have that dynamic?
24:09 - So the way to have that dynamic is one way
24:12 - would be let's try to
figure out maybe what the,
24:15 - what toothpick is
furthest to the left edge
24:19 - and furthest to the right edge.
24:21 - So what if I have some global variables
24:23 - like min x, which is equal to zero,
24:31 - and max x, which is equal to width?
24:34 - Oh and actually these
should be negative, so I,
24:37 - because I am considering this around zero,
24:41 - min x would be negative
width divided by two.
24:45 - Max x would be positive
width divided by two.
24:49 - So negative 300, that's
the sort of the minimum
24:51 - and maximum range to start.
24:54 - So I could say the
difference is the scale,
25:05 - the scale that I want,
25:08 - let's call that like a
factor is the maximum x minus
25:13 - the minimum x divided by the width, right,
25:17 - or actually the width
divided by that, right.
25:20 - Because if the distance
between the furthest toothpick
25:26 - to one side and the furthest toothpick
25:27 - to the other side is twice
as long as the actually width
25:30 - of the window, then I
want to scale it to .5.
25:34 - So, but of course, I need
to find out these maximums
25:37 - and minimums.
25:38 - So the way I could do that
is I can actually just,
25:40 - right here as I'm looping
through all of the picks.
25:42 - And you know in theory like
I'm going to get the scale
25:46 - for the next round, but that's fine.
25:48 - Min x is the minimum, whichever is smaller
25:50 - between the current picks.
25:53 - Let's just use one endpoint.
25:55 - I mean, I could probably
check both endpoints,
25:58 - but let's just make sure this works.
25:59 - And the current min
value and the maximum is
26:03 - whatever is the biggest
between bx, sorry sorry,
26:08 - ax and max x.
26:11 - Right?
26:12 - I think this should work.
26:14 - Factor is, what did I get?
26:17 - Did I get like a, the value
26:21 - of the local variable factor is not used.
26:22 - Oh, sure.
26:24 - Oh, scale factor, but that's
not the error I'm getting.
26:29 - But divide by zero.
26:33 - Oh no, no, no, no, no, no, no, no.
26:35 - This has to be max x.
26:36 - (bell dings)
26:37 - Oy!
26:38 - I had the wrong for awhile there.
26:39 - Okay.
26:48 - Oh, you know what?
26:49 - Are these, these are all integers.
26:53 - These are all integers.
26:54 - So integer math is going to give me zero.
26:56 - There we go.
26:57 - Okay, so now I am scaling according to,
27:01 - and you know actually these are getting...
27:04 - I'm scaling according to the distance
27:07 - between the sort of
like furthest toothpick
27:09 - and the furthest toothpick
along the x axis.
27:12 - I could do this along the y axis.
27:13 - There's probably a lot of
smarter ways to do this,
27:15 - but this will work right now.
27:17 - So, the other thing that I
might like to do is calculate
27:21 - this factor.
27:22 - I should probably store this
as a global variable also
27:26 - because I kind of want to use it.
27:28 - And you know what I could actually do?
27:30 - I could just do this.
27:31 - I could pass it in here because
27:33 - what I want is also the stroke weight
27:35 - to be maybe inversely
proportional to the factor.
27:40 - So like as the factor is getting smaller,
27:42 - I want the lines to be thicker
27:44 - so that maybe they show up better.
27:49 - Yeah, I don't know if
this is really reading,
27:51 - but like as they're shrinking,
27:53 - the lines are getting thicker.
27:54 - Goodbye Youtube compression algorithm,
27:59 - but you can see the idea here.
28:00 - So it's going to run really slow.
28:02 - I have not super optimized this,
28:04 - but what would be fun to try is,
28:10 - and maybe I should just make
them a little bit thicker
28:12 - like two times that.
28:15 - What would be fun to try,
what I would like to do is
28:20 - to see if I can make a
nice full screen version
28:22 - of this in P2D.
28:28 - Will that help?
28:35 - So here we go.
28:36 - Here is the, I'm sure the
Youtube compression algorithm
28:40 - is making this impossible to watch,
28:42 - but here is the toothpick number series
28:46 - from the Numberphile channel
visualized using Java
28:51 - in processing.
28:52 - Now, it's running super slow.
28:54 - I kind of, what I want to do,
28:56 - but I should check the number series.
28:58 - So let's actually check
that number series.
29:00 - Let's do print.
29:03 - One more time, print line.
29:04 - What do I want to do?
29:07 - I want to check how many
toothpicks there are,
29:12 - picks dot size.
29:15 - And lets change the frame rate to one.
29:20 - And let's open up the console.
29:22 - Let's put it back to a smaller size
29:26 - and let's open up the console
so I can see this better.
29:31 - Alright, so here we go.
29:35 - (gentle lullaby music)
29:35 - One, three, seven, 11, 15,
23, 35, 43, 47, 55, 67, 79,
29:42 - 95, 123.
29:44 - Is this right?
29:46 - I really hope this is right.
29:47 - Let's check.
29:48 - One, three, seven, 11, 15,
23, 35, 43, 47, 55, 67.
29:57 - (upbeat music)
29:59 - Thank you.
30:01 - Woohoo, it worked!
30:02 - So by the way, you should
watch that Numberphile video.
30:05 - You should look at these.
30:07 - You should try, there
are so many other ones
30:09 - and there's different shapes.
30:10 - Toothpick on a hexagon.
30:12 - Whoa!
30:14 - Reset, reset, reset.
30:16 - Look at this.
30:18 - Oh no wait, hold on.
30:18 - Reset, reset.
30:20 - Toothpick on a hexagon.
30:24 - Oh boy, whoa.
30:25 - So there's so many
interesting possibilities here
30:28 - of things you could try.
30:29 - Lets look at, there's
one that's like a nice,
30:31 - maybe it's the e toothpick
30:34 - that's kind of like snowflake like.
30:35 - Yeah, look at this one.
30:36 - Oh, that is so, I really wanted,
30:38 - so maybe next week for my holiday special,
30:40 - I'll try to do this one.
30:42 - But you should explore all these.
30:43 - Watch the Numberphile video.
30:45 - Expand this, refactor the code.
30:47 - Make it your own version.
30:47 - I will release a version of this
30:49 - that also runs in JavaScript
that you can do that
30:51 - to run in the web browser.
30:52 - So you can check this video's description
30:54 - and share with me your variations in color
30:57 - and animation and how you
think about doing this.
30:59 - I can't wait to see what
creative stuff you make.
31:01 - Okay, goodbye.
31:02 - (bell dings)
31:03 - (upbeat music)
31:10 - (bell dings)

Cleaned transcript:

(train whistle) Hello and welcome to a coding challenge. Toothpicks? I know, seems a little weird. What? I'm really doing a coding challenge about toothpicks? And in fact I have all these toothpicks on my desk over here and I'm trying to, I thought, "Oh I'm going to have this really amazing video "where I arrange them." And I just, I just, I can't. I'm terrible at this sort of thing. So I'm going to, but I do have an overhead camera, which is exciting. There's some possibilities there. So what is this toothpick pattern? Terrific toothpick pattern. So first of all, I would suggest pause this video right now. Go and watch this wonderful Numberphile video which explains the toothpick pattern. And you can use it to generate interesting fractallike visualizations in a two dimensional space. This actually comes from the research of N. J. A. Sloane who is the founder of my absolute favorite website. I mean, I don't know, but there's other wonderful websites so I don't know. I don't want to play favorites here, but the Online Encyclopedia of Integer Sequences is a pretty awesome website. It's just a website of sequences of numbers. And I've used it before and there's so many things to explore in terms of these sequences of numbers, but one of these, a particular sequence of numbers comes out of this toothpick sequence, Omar Pol's toothpick sequence. So this is a nice interactive demonstration of the toothpick sequence. You start with, oh, wait, wait, wait. We can do this. You start with a single toothpick. Let's just say next. And you put two toothpicks, I can zoom in on that, two toothpicks. I'm doing it! I'm making content with multiple (mumbles). You put two toothpicks like this on the ends and then you say next and I also put toothpicks on the ends, but the next step is the key step. So once I get to here and I say next again, notice how no toothpick goes here, right? Toothpicks can only go on what's called a free edge, an edge that's not touching any other toothpicks. So this is touching here, this is touching here. I can actually point over this way. I don't know. I don't know the best way to do this. Let's get rid of that camera shot. But so and then if I keep hitting next, look at this. I keep going and going and going and going and going and going and I can adjust the scale and I could actually just say run and boom. And so I want to make this in the processing programming environment, which is a Java 8 programming environment. Can I make this? So a couple of things. One is this is fun to play around with. You can play with different, you can play with different parameters. You can render out to a PDF. And in addition, what's going on here, why is this a number sequence? What's kind of fascinating about this and if you watch the Numberphile videos, can you create an equation, a formula to sum all the given toothpicks at any stage of iteration? And that's exactly what this particular number sequence is which I will now do a dramatic reading of because I like to read number sequences. (gentle lullaby music) Zero, one, three, seven, 11, 15, 23, 195, 207, 223, 251, 283, 303, 319, 347, 735, 763, 795, 815, 859, 895. Okay, that's good enough. (laughs) (claps) Let's start coding. Let me make a window that's 600 by 600. Let me draw a background that is white and let me hit run and we can see. There it is. There's my window. This is where I need to draw the toothpicks. So I think what I need to do is, you know, skip a few steps here, like I might, if I'm really trying to do this, the first thing that I might do is just literally draw a line. But I know that I'm going to need some kind of toothpick object. This is a good case of objectoriented programming because I need to create a class that describes what it means to be a toothpick. What does it mean to be a toothpick? Then I can have an array of many toothpicks. I'm going to say class toothpick. And what do I need in a toothpick? So, I know that I need a toothpick. I need to have two endpoints. What's the xy location here and what's the xy location here? So I'm going to call those ax, ay, bx, by. And I'm going to write the constructor. And the way that I'm going to do this, the way that I think this is going to work the best, like when I create a toothpick, what I'm going to do, the toothpicks can only be horizontal or vertical. So I'm going to create a toothpick by giving it the center point and then giving it a value like one or negative one whether it's horizontal or vertical. So in addition, it is also going to each toothpick will have a variable called dir for direction or orientation. So I'm going to give each toothpick an x. And I'm using integers very specifically because I think this is going to make my life easier to sort of almost think of this toothpick as living on a grid and you can't have spot 1.37 or 2 point, like I really want to be like as close to pixel perfect as I can. So, and I also, I mean this is really a global variable for the whole system. I'm just going to make a variable called length for how long a toothpick is. And I do want an add number because I do want to have that center point be perfectly, have each half of the toothpick be equal in size. So for example, if I had a toothpick of length nine, then the center point is at five, no four. Zero, one, two, three, five, six, seven, eight. Hold on, let me explain why this is important. If I have something of length three, right, this is the center, the total length of this is three, this is the center. I have one spot here and one spot here. If I have something that's of length five, then I've got two here, two here, and a perfect center. So this is going to be important in terms of, I think, the sort of evenness of how I place the toothpicks. Alright, so length. Let's just start with a length of nine. And what I'm going to say is that, oh, and I get to get a direction. So I'm going to say that if the direction, oh, so first I'm going to say that, let's just call this d. Direction equals d. If the direction equals one, let's make that a horizontal toothpick. So then ax should equal x plus length divided by two and ay, no sorry, and bx should equal, oh so ax should be x minus length divided by two and bx should be x plus length divided by two. And then the y's are the same. Ay is y and by is y. And then let's make a toothpick that is vertical. So I'm going to do all the same stuff, but these are now going to be with the y, higher and lower. And let's get rid of this white space here. And so now, then I'm going to write a function called like show and I'm going to say, I'm just going to draw. I'm going to say stroke zero. Let's make a little, stroke weight like two just so we can see it. And then I'm going to say line from ax, ay to bx, by. So this is the idea of a toothpick. A toothpick has two points a and b, axy, ay, ax, ay, bx, by and it has a direction. Just to be clear about this because this is so fundamental, this is the toothpick. This is point ax, ay. This is point bx, by. But also the toothpick could be in this orientation as well. So now in my main program, I'm going to make an, I know I'm going to need to have a list of toothpicks. So I'm going to make an array list full of toothpicks. Let's call that picks equals new array list toothpick. Now if you've, if you're coming from all of my JavaScript tutorials, this is a pretty weird thing that I've written because in essence, if I were doing this is JavaScript... Why does it not know? (bell rings) Silly me, I have a capital P there for no reason. So what I was saying was, if you've come from my JavaScript videos, you would see me do something like this, like making an empty array that I'm going to fill in JavaScript is super simple. In Java, which this processing is built on top of, I've got to use this data structure called an array list. I don't have to. There's other data structures, which I need to specify what's going in it toothpick objects. And then I need to create it. So there. Now what I want to do is I want to picks add a new toothpick which I'm going to put at 300, 300. And you know what? I'm going to put it at zero, zero and I'm going to give it a direction of one because what I'm going to do here is I'm going to say translate width divided by two. I'm always going to think of the center at the center of the canvas as zero, zero. So I need to translate to that center and then I'm going to say for every toothpick t in picks t dot show. So this now a loop where I'm just going to say whatever toothpicks I have, so I'm starting with one toothpick. I made a class, objectoriented class, a template for a toothpick. Then I made an actual toothpick. Zero, zero, I can't remember. One is either this way or this way. And then I say whatever toothpicks I have, show them all. And so now if I were to run this again, we can there's my toothpick. And let's make the length, let's have length be kind of like a global variable over here. And let's have that be something more like 63. Let's run this again. We can see there's my toothpick. And by the way, I could do something like this. I mean, you know, as an exercise, I could just make a ton of random toothpicks, but that's not what I want to do. What I want to do is each cycle, right, I want to say what are all the existing toothpicks? Check every existing toothpick. Look at its endpoints. Is that a free endpoint? And if there is, make a new toothpick there. So a nice way to do that in the draw loop is to start by actually saying, make another empty array list. I'm going to call it next. So this is kind of like the next generation of toothpicks is another new, boy, there's a lot of typing going on here with these array lists. I'm going to make a new list of toothpicks, the next list. And as I go through all of these existing toothpicks, what I want to say is, I'm going to say, I'm going to, you know what I'm going to do? I'm going to ask the toothpick to create. I'm going to say call create. I'm going to say, I'm going to name these create a, create b. There's probably a better name for that. I'm trying to think, but what I mean is, let's have the toothpick itself, it knows about its edges. Maybe I need to, when I call those functions pass in an array to all of the existing toothpicks. Like hey, check yourself before you wreck yourself. No, check yourself against all the other toothpicks to see if your edges are touching any of them. If not, make a new toothpick. Ah, and these should be and then I should say toothpick. This function should return two new toothpicks. I'm going to call them a and b. I should probably call them, if I'm being consistent here, like next a and next b. So, right, and then, so okay. So what if, and then I want to, what I think I'll do is I'll have this function. I'm kind of planning this out as I'm going. This might be a bad idea. We'll find out. I'm going to have the function if the endpoint is not actually free, just return null. So it will return a new toothpick if it's a valid endpoint edge. If it's not, it'll just return null. So what I'll say there is if next a is not equal to null, then next dot add next a, and there's probably a way I could do this with one function or something, and if next b is not null, add next b. And then at the end, what do I want to do? I want to say I think toothpicks dot add all next. So I think this is the idea. Like I haven't really written the code for doing this yet, but this is the idea. For every existing toothpick... And here's the thing, I don't want... This would be problematic if I didn't... I think, there's a couple reasons why I want this next array list. And I did sort of think about this in advance. Like you might be thinking why not just add them to the existing list of picks? Well, one thing is if I add stuff to the end while I'm iterating through it, things could go pretty awry. Also, visually what I want to do, I might want to draw the new toothpicks each time like as a different color. There might be some separating out what the next generation of toothpicks is from the current generation might actually be somewhat helpful. (claps) Okay, so now what I really need to do is write this, these create functions. So let's say, let's first write the create a function. So with this function, it gets another array list, whoa. I'll call these others and return null here. The idea of this function is I want to check this toothpick against any other existing toothpicks to see if they're sitting on the edge and if they're not, I'm going to create a new toothpick on the edge. So, here's how I'm going to do that. I'm going to say for every toothpick other in others, oh geez, if and let's try... So I'm going to write some pseudo code for a second. If this pick is touching other and I also, first I want to say, actually by the way, if other is not equal to this, like I only want to check, I don't want to check this, if this toothpick against itself. And I'm going to say, oh this is, boolean available. So I'm going to assume the pick, the toothpick is available. So and then I'm going to loop through all of them and if I find that its edge is touching any other edge, then it's not going to be available. So how am I going to do that? Now because I've written this in kind of what is now arguable a silly, whoa, toothpicks went flying! Somebody slowmo that down. (deep slow motion voice) Do we have Smarter Everyday's like slow motion camera somewhere available? Okay, if because I wrote this in a sort of silly way, I'm writing a create a and a create b function, what I actually just want to do here is check the a endpoint against every other toothpick to see if two toothpicks have the same endpoint as each other, to see if they're intersecting at that same endpoint. And you know somebody did ask about toothpicks. A toothpick right, I'm looking for the case where this is toothpick one and this is toothpick two and this is like point a and maybe it's the same as point a or b of another toothpick. This is what I'm looking for, but it is the case that toothpicks could also be intersecting the center of another toothpick. But I'm pretty sure I don't have to check for that because once I add a toothpick, if I add two more toothpicks, sure this toothpick is intersecting here at the center of these two toothpicks, but it's done, like I never have to check this toothpick again. Once I have added something to that toothpick, I can call it quits and only check the endpoints of these new toothpicks and by definition, there can't, there could only be, the way this algorithm works out is, you know, these two, the two toothpicks here are intersecting at the endpoints. So I'm pretty sure that's how it's going to work if you look at the demos of it and how it works. I don't think I need to check the center. Okay, at least I'm trying to convince myself. So as long as it's not the same toothpick and intersects, I'm going to write this rather awkwardly. I'm going to say intersects ax, ay with other, with other, then available is false. And so maybe what I want to do is say like other dot intersects ax, ay. So this is actually like available equals false. So maybe this is kind of like a function inside of the toothpick class, that it can check if it's intersecting any generic point. So this is a little bit confusing what I'm doing. I'm going to write a boolean function that says intersects any arbitrary xy. And I can say basically if ax equals x and ay equals y, that is a case where I should return true. Otherwise if bx equals x, I'm just checking both points. And again easily, there's probably a better way to do this. I'm also going to return true. Otherwise, return false. So basically this is the idea and these are integers. And I can check for equality here because I'm doing all integer math. If I used p vectors and floating points, I'd be worried about, you know, I'd have to use the distance or something. But as long as the a point and the b point of this toothpick is not equal to this arbitrary x and y point, then I want to return false. So now here comes the fun part. Right isn't this fun? I'm having fun! Weeping emoji. If it's still available, then what I want to do is return a new toothpick. And the new toothpick center, the new toothpick center is where? It's at that point. So the new toothpick is at ax, ay and it's direction is what? It's direction is always the inverse. So if this one's one, this one's negative one. If this one's negative one, this one's one. So it's just direction times negative one. Otherwise return null, okay? So now we're going to go back here. Let's forget about next b. Let's forget about create b. I also want to do something. I'm going to say no loop. I want to control the looping and then I'm going to add mousePressed and in mousePressed, I'm going to call redraw. This is so I can click the mouse through every frame. So let's see if this works. Let's see if I can kind of condense the code a little bit so we can look at more of it at once. And now, oops, if other does not equal this and other, oh, I'm missing a parentheses there. Let's run this. Okay, so now if I click, I got a new toothpick. I got a new toothpick, new toothpick, new toothpick. So this is actually working, but it's just doing that one endpoint. So again I really shouldn't, there's no reason for me to have two separate functions here, but why not? What I'm going to do now is in the toothpick, I'm going to, just this is terrible. I do not like this at all, do not like copy pasting. I'm just going to call this create b. I'm going to say bx, by and bx, by. So this is exactly the same function, but checking the b endpoint. And I can do this because a toothpick only has two endpoints. But this doesn't scale. It can't generalize this to any kind of shape with any n number of endpoints. So, definitely going to have to rethink this for maybe a future video I might make. Oh, look at that! That kind of looks like the toothpick pattern. (bell dings) So in some sense, we're done. But couple things I want to do. Number one is I would like to, I need to, there's a big optimization I can make here which is to only check the new toothpicks. So one thing that I'm going to do is, let's make these two different loops just to, let's separate out the drawing from the like picking the next stuff. The other thing I should do is when a toothpick is a new toothpick, so let's call it new pick, oh, that's weird, is true. So and then the, what I want to do here is when I draw it, let's try it. Let's just try this for a second. If it's a new pick, say stroke, let's make it blue. And then by definition, then new pick would be false. So I just want to and actually let me not do that here. So this should be, now they're all blue. Okay, so they're all blue. All the new toothpicks are blue. And then what I want to do here is I would say if t is a new pick, again, I could probably keep it in a separate list, but whatever. If t is a new pick, then I could do all of this checking and then say it's not a new pick anymore. Alright, so this is going to limit all of the checking to only the toothpicks that were actually new the previous time. And I could keep the next array list from one cycle to the other, but this I think will do the trick right now. Blue, you can see this one is no longer blue. Only these are blue. Only these are blue. So in theory, I have now optimized this a bit faster. Okay, so now going back to the code, I can, to get rid of this no loop, I can let it just go on its own and we see it sort of filled up the screen really quickly. So this is what I want to do here. I want to use the scale function to, as it grows, sort of zoom out on the drawing. So scale is a transformation that can scale what I'm seeing. So, for example, if in the draw loop here, I just say scale 0.5, you can see there it is at half the size. If I say scale 0.1, we can see, now we can see all those toothpicks being added at a much lower scale. Okay, okay, so how do I have that dynamic? So the way to have that dynamic is one way would be let's try to figure out maybe what the, what toothpick is furthest to the left edge and furthest to the right edge. So what if I have some global variables like min x, which is equal to zero, and max x, which is equal to width? Oh and actually these should be negative, so I, because I am considering this around zero, min x would be negative width divided by two. Max x would be positive width divided by two. So negative 300, that's the sort of the minimum and maximum range to start. So I could say the difference is the scale, the scale that I want, let's call that like a factor is the maximum x minus the minimum x divided by the width, right, or actually the width divided by that, right. Because if the distance between the furthest toothpick to one side and the furthest toothpick to the other side is twice as long as the actually width of the window, then I want to scale it to .5. So, but of course, I need to find out these maximums and minimums. So the way I could do that is I can actually just, right here as I'm looping through all of the picks. And you know in theory like I'm going to get the scale for the next round, but that's fine. Min x is the minimum, whichever is smaller between the current picks. Let's just use one endpoint. I mean, I could probably check both endpoints, but let's just make sure this works. And the current min value and the maximum is whatever is the biggest between bx, sorry sorry, ax and max x. Right? I think this should work. Factor is, what did I get? Did I get like a, the value of the local variable factor is not used. Oh, sure. Oh, scale factor, but that's not the error I'm getting. But divide by zero. Oh no, no, no, no, no, no, no, no. This has to be max x. (bell dings) Oy! I had the wrong for awhile there. Okay. Oh, you know what? Are these, these are all integers. These are all integers. So integer math is going to give me zero. There we go. Okay, so now I am scaling according to, and you know actually these are getting... I'm scaling according to the distance between the sort of like furthest toothpick and the furthest toothpick along the x axis. I could do this along the y axis. There's probably a lot of smarter ways to do this, but this will work right now. So, the other thing that I might like to do is calculate this factor. I should probably store this as a global variable also because I kind of want to use it. And you know what I could actually do? I could just do this. I could pass it in here because what I want is also the stroke weight to be maybe inversely proportional to the factor. So like as the factor is getting smaller, I want the lines to be thicker so that maybe they show up better. Yeah, I don't know if this is really reading, but like as they're shrinking, the lines are getting thicker. Goodbye Youtube compression algorithm, but you can see the idea here. So it's going to run really slow. I have not super optimized this, but what would be fun to try is, and maybe I should just make them a little bit thicker like two times that. What would be fun to try, what I would like to do is to see if I can make a nice full screen version of this in P2D. Will that help? So here we go. Here is the, I'm sure the Youtube compression algorithm is making this impossible to watch, but here is the toothpick number series from the Numberphile channel visualized using Java in processing. Now, it's running super slow. I kind of, what I want to do, but I should check the number series. So let's actually check that number series. Let's do print. One more time, print line. What do I want to do? I want to check how many toothpicks there are, picks dot size. And lets change the frame rate to one. And let's open up the console. Let's put it back to a smaller size and let's open up the console so I can see this better. Alright, so here we go. (gentle lullaby music) One, three, seven, 11, 15, 23, 35, 43, 47, 55, 67, 79, 95, 123. Is this right? I really hope this is right. Let's check. One, three, seven, 11, 15, 23, 35, 43, 47, 55, 67. (upbeat music) Thank you. Woohoo, it worked! So by the way, you should watch that Numberphile video. You should look at these. You should try, there are so many other ones and there's different shapes. Toothpick on a hexagon. Whoa! Reset, reset, reset. Look at this. Oh no wait, hold on. Reset, reset. Toothpick on a hexagon. Oh boy, whoa. So there's so many interesting possibilities here of things you could try. Lets look at, there's one that's like a nice, maybe it's the e toothpick that's kind of like snowflake like. Yeah, look at this one. Oh, that is so, I really wanted, so maybe next week for my holiday special, I'll try to do this one. But you should explore all these. Watch the Numberphile video. Expand this, refactor the code. Make it your own version. I will release a version of this that also runs in JavaScript that you can do that to run in the web browser. So you can check this video's description and share with me your variations in color and animation and how you think about doing this. I can't wait to see what creative stuff you make. Okay, goodbye. (bell dings) (upbeat music) (bell dings)
