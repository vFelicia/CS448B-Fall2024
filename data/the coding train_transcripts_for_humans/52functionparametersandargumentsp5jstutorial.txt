With timestamps:

00:01 - So in this video, I want to
look at the topic of functions
00:04 - and reusability.
00:05 - What does it mean to call
a function multiple times?
00:08 - And why might you do that?
00:10 - And so to illustrate
that, I want
00:13 - to start with this
particular example.
00:16 - Now, this example
is from the book
00:17 - Getting Started with P5 JS.
00:19 - It's by Lauren
McCarthy and based
00:22 - on the Getting Started
with Processing book
00:24 - by Casey Reas and Ben Fry.
00:25 - So if you're looking for
an additional resource,
00:27 - that's a great one
for you, and there's
00:29 - many more great
examples like this one.
00:31 - The reason why I'm using
this example is look here.
00:33 - So this robot creature thing
is a rather elaborate design.
00:36 - It involves a whole bunch of
circles, a rectangle, a bunch
00:39 - of lines, maybe some dots--
00:40 - I don't know-- lots
of lines of code--
00:42 - a lot.
00:43 - So you can imagine
if you knowing
00:45 - what you might have
known a day or two ago
00:48 - or before you watched this video
to draw that robot design four
00:53 - times, there's so much
that you would have to do.
00:57 - You have to have all of that
code for the entire design
00:59 - four times, and your code
would get very, very long.
01:01 - So there's got to
be a better way.
01:03 - If you could just
figure out what
01:05 - it means to draw that robot,
package that into a function,
01:08 - you could call that
function multiple times.
01:10 - And then you could
think of, what
01:12 - are the parameters by
which that design can
01:15 - be altered or changed?
01:17 - For example, one parameter
is where is it on the screen?
01:20 - What's the sort of xy of
the center of the robot.
01:22 - Another might be its neck
length or its body length.
01:25 - So you can see each one of these
robots is slightly different.
01:28 - And if you look at the code,
the draw robot function
01:30 - is called four times
with four arguments.
01:33 - And I'm guessing they are x
location, y location, neck
01:37 - length, body length,
something like that.
01:39 - I guess I've looked at
this before so not just
01:41 - totally guessing.
01:42 - But you get the idea.
01:44 - So this is essentially what I
want to look at in this video.
01:47 - I'm going to talk through
the pieces of how you define
01:50 - and call a function
when there are arguments
01:52 - and then kind of build a
much simpler, less visually
01:56 - interesting version of
something like this.
01:59 - OK, so let's come back
over here for a second,
02:02 - and let's imagine
something different.
02:03 - Let's say you were
going to build a flower,
02:09 - and it might be something like
this that might be like erect.
02:12 - I don't know what
I'm doing here.
02:14 - I was trying to draw a flower.
02:15 - It's pathetic.
02:16 - So the point is let's say
you wanted to have a flower.
02:19 - So let's think
about what might be
02:20 - the parameters for this flower.
02:23 - I don't know what
I'm doing here,
02:24 - but the parameters
might be location.
02:28 - We can think of the xy location.
02:31 - Let's be really
simple about this,
02:32 - and let's just think
we're not going
02:34 - to get a number of petals.
02:39 - So we need an xy location
and how many petals
02:42 - should appear on the flower?
02:43 - So we know before that the
syntax for defining a function
02:47 - is function, the name
of the function--
02:52 - I will call it flower and then
open and close parentheses.
03:00 - Now when we looked at the
setup function, draw function,
03:03 - those never had any arguments.
03:05 - You never say set up
with this argument
03:08 - or draw with this argument.
03:09 - But with the robot
function, you do.
03:11 - So you draw the robot at
this location with this neck
03:13 - length with this body length.
03:15 - Here I want to say draw this
flower at this x and this y
03:19 - with this number of
petals, which means
03:23 - you need to put something here.
03:24 - And the things that we put
in between these parentheses
03:28 - are known as parameters.
03:29 - They are the
parameters by which we
03:31 - define how that flower is drawn
and really how that function is
03:35 - executed.
03:36 - And those parameters are
essentially variables.
03:40 - It's up to me to name them.
03:41 - I'm going to have an x, a y,
and a variable called petals.
03:48 - So those variables-- the
names for those variables
03:50 - go in between those parentheses
separated by commas.
03:54 - And then I can
start to use them.
03:56 - For example, I can say ellipse.
03:58 - Draw an ellipse at that xy
with some width and height.
04:04 - And then maybe the petals--
04:05 - the number of petals--
04:07 - I'm going to use in
some sort of for loop.
04:11 - I don't know.
04:12 - I'm imagining some
complex scenario
04:14 - now where I'm rotating around
and drawing a bunch of circles.
04:17 - But you can see
that the x and the y
04:20 - are used here on the
ellipse function.
04:21 - The variable petals is
used here in this for loop.
04:24 - So what these
parameters are, they're
04:27 - essentially like variables that
are local to this function.
04:31 - It's as if at the top
of the function, I said
04:34 - var x, var y, var petals.
04:36 - The question is when
we looked at variables,
04:39 - we said, OK, well,
you have a variable.
04:41 - You need to declare it, var x.
04:43 - Well, this is like
declaring it-- declaring it
04:45 - as a parameter to
this function x.
04:47 - And then you need
to initialize it.
04:49 - Var x equals zero
var x equals 200.
04:53 - So where does x get
its initial value?
04:55 - And this is the
new piece here xy,
04:58 - and petals get
their initial value
05:00 - from where you
call the function.
05:03 - So if I were to say flowers
200 comma 100 comma 10,
05:11 - it's the equivalent
of saying here--
05:13 - I'm not saying this--
05:14 - var x equals 200.
05:17 - So that's what we're writing
because 200 goes into x.
05:20 - 100 goes into y.
05:22 - 10 goes into petals.
05:24 - And by the way, these are
what are known as arguments.
05:28 - So the terminology, it's
easy to confuse these,
05:32 - and you don't have
to worry about this
05:33 - too much because
the program's not
05:36 - going to care what you're
calling what to your friends
05:38 - when you're talking
about your code.
05:40 - But the variables
that you define
05:42 - in the parentheses in
the function definition,
05:45 - those are called parameters.
05:46 - They're the parameters
to the function,
05:48 - and the arguments
are the things that
05:50 - get passed into the
parameters, 200, 100, comma 10.
05:53 - And by the way this
is just how p 5 works.
05:58 - When you say ellipse, you
say xy or width and height,
06:00 - and then the ellipse function
is defined somewhere function
06:03 - ellipse xywh--
06:05 - something like that.
06:09 - And I, by the way,
wrote flowers.
06:10 - This is flower, flower.
06:11 - The wonderful thing here
is once you've figured out
06:13 - this elaborate code for drawing
this elaborate beautiful,
06:16 - wonderful flower design, you
can then have more than one
06:19 - on the screen.
06:20 - So you could say now flower
300 comma 50 comma 20.
06:23 - So you have a flower
in a different place
06:24 - with a different
number of petals.
06:26 - So this is essentially
the exercise
06:28 - that I think you should try it
for yourself is build yourself
06:31 - some kind of interesting
design, see if you can give
06:33 - that design parameters,
define it in a function,
06:36 - and call that function
multiple times.
06:39 - And let's come over
here, and let's look
06:41 - at just kind of doing that
quickly in an example.
06:45 - I've gone up by self-enforced
10-minute limit.
06:50 - So let's look at this.
06:51 - This is again.
06:52 - I call this the lollipop.
06:54 - I'm trying to do something
just very simple here.
06:57 - So this is just a single design.
06:59 - It involves both a
rectangle and an ellipse.
07:04 - So now what I would like
to do is write a function,
07:08 - call it lollipop--
07:12 - hope I spelled that right.
07:13 - I'm going to put this code just
right there inside the lollipop
07:18 - function.
07:20 - OK, and I'm going to run it.
07:22 - Of course, we don't see
anything because all I did
07:24 - was define this function.
07:26 - I didn't actually call it.
07:27 - So the next thing that I'm going
to do is call the function.
07:33 - And now you see there is the hum
flickering, which is not good.
07:37 - Yeah, I'm back.
07:38 - Hopefully, I fixed
that camera problem.
07:42 - What I did before in the
previous video, which I just
07:44 - took a chunk of code,
put it in a function.
07:46 - I'm calling that function.
07:48 - And then when I run it,
it executes the function.
07:50 - But the point of what
I want to do right now
07:52 - is add parameters
to this function.
07:54 - And just to be
overly simplistic,
07:57 - I'm going to give this three
parameters-- an x location, a y
08:00 - location, and a size of
the lollipop thing itself.
08:04 - So to three
parameters need to go
08:06 - inside the parentheses
as variables--
08:09 - an x location, a y
location, and because I'm
08:12 - the least creative
person ever, I'm
08:13 - going to call this diameter--
so diameter meaning
08:16 - the diameter of that circle.
08:18 - So we know the ellipse,
instead of saying 100,
08:20 - I want to use the
variable diameter.
08:22 - The ellipse itself should
be at the x and y location.
08:26 - And the rectangle
itself should also
08:28 - be at the x and y location.
08:29 - But I'm going to say minus 10
here because that's helping me.
08:32 - The rectangle is 20 pixels wide.
08:34 - I'm going to center
it a little bit over.
08:35 - So now if I run
this, first of all,
08:38 - I'm going to get an error,
which if you read down here,
08:43 - it's going to say--
08:44 - well if my font is too big, and
I'm failing to see if I can--
08:48 - says looks like an ellipse,
receive an empty variable,
08:50 - bla, bla, bla.
08:51 - So it can't figure out what to
do because I called lollipop
08:54 - without the proper
arguments, and so it
08:57 - doesn't know what x is.
08:58 - And it's trying to
call ellipse with an x,
09:00 - but the x is undefined.
09:01 - So this is going
to cause problems.
09:03 - If your arguments don't
match the parameters,
09:07 - things will break.
09:08 - There's all sorts of
clever ways around that.
09:09 - But for right now, if
I've got three parameters,
09:12 - I want to have three
arguments here.
09:13 - So I want to have the
lollipop at say 100 comma 100
09:18 - with a diameter of 50.
09:20 - And you can see
there's lollipop.
09:22 - And then if I want to have
this line of code again,
09:25 - at 300 comma 200
with 150 diameter,
09:30 - there now I have two lollipops.
09:32 - And you can see this
shows how untalented
09:35 - I am in that that's
why I had to pull
09:38 - that beautiful interesting,
intricate robot example.
09:40 - But you see the point here.
09:42 - You have a function.
09:43 - I have defined a function.
09:44 - I made it up.
09:45 - It's called lollipop.
09:46 - It's my own.
09:46 - It's my own function.
09:47 - It takes three arguments.
09:49 - I can do whatever I want
with those arguments,
09:51 - execute code, execute
drawing stuff,
09:52 - and I can call that
function then multiple times
09:55 - in different places.
09:56 - So I think this is hopefully
a useful exercise for you
09:59 - to try something similar.
10:00 - Hopefully, you have
more talent than I do,
10:02 - can come up with
something different than
10:04 - this pathetic looking lollipop.
10:07 - And I have two more videos
that I want to make.
10:10 - One will look at a
function that returns
10:12 - a value, which is a key thing.
10:14 - And the other
thing I want to do,
10:15 - which is a little
bit crazy, is look
10:17 - at what happens if I put a
function inside an object.
10:22 - OK, so I will see you
in the next video.
10:25 - I won't see you.
10:26 - I would like to see you--
10:28 - goodbye.
10:29 - I can't stop here.
10:29 - I have to stop here.

Cleaned transcript:

So in this video, I want to look at the topic of functions and reusability. What does it mean to call a function multiple times? And why might you do that? And so to illustrate that, I want to start with this particular example. Now, this example is from the book Getting Started with P5 JS. It's by Lauren McCarthy and based on the Getting Started with Processing book by Casey Reas and Ben Fry. So if you're looking for an additional resource, that's a great one for you, and there's many more great examples like this one. The reason why I'm using this example is look here. So this robot creature thing is a rather elaborate design. It involves a whole bunch of circles, a rectangle, a bunch of lines, maybe some dots I don't know lots of lines of code a lot. So you can imagine if you knowing what you might have known a day or two ago or before you watched this video to draw that robot design four times, there's so much that you would have to do. You have to have all of that code for the entire design four times, and your code would get very, very long. So there's got to be a better way. If you could just figure out what it means to draw that robot, package that into a function, you could call that function multiple times. And then you could think of, what are the parameters by which that design can be altered or changed? For example, one parameter is where is it on the screen? What's the sort of xy of the center of the robot. Another might be its neck length or its body length. So you can see each one of these robots is slightly different. And if you look at the code, the draw robot function is called four times with four arguments. And I'm guessing they are x location, y location, neck length, body length, something like that. I guess I've looked at this before so not just totally guessing. But you get the idea. So this is essentially what I want to look at in this video. I'm going to talk through the pieces of how you define and call a function when there are arguments and then kind of build a much simpler, less visually interesting version of something like this. OK, so let's come back over here for a second, and let's imagine something different. Let's say you were going to build a flower, and it might be something like this that might be like erect. I don't know what I'm doing here. I was trying to draw a flower. It's pathetic. So the point is let's say you wanted to have a flower. So let's think about what might be the parameters for this flower. I don't know what I'm doing here, but the parameters might be location. We can think of the xy location. Let's be really simple about this, and let's just think we're not going to get a number of petals. So we need an xy location and how many petals should appear on the flower? So we know before that the syntax for defining a function is function, the name of the function I will call it flower and then open and close parentheses. Now when we looked at the setup function, draw function, those never had any arguments. You never say set up with this argument or draw with this argument. But with the robot function, you do. So you draw the robot at this location with this neck length with this body length. Here I want to say draw this flower at this x and this y with this number of petals, which means you need to put something here. And the things that we put in between these parentheses are known as parameters. They are the parameters by which we define how that flower is drawn and really how that function is executed. And those parameters are essentially variables. It's up to me to name them. I'm going to have an x, a y, and a variable called petals. So those variables the names for those variables go in between those parentheses separated by commas. And then I can start to use them. For example, I can say ellipse. Draw an ellipse at that xy with some width and height. And then maybe the petals the number of petals I'm going to use in some sort of for loop. I don't know. I'm imagining some complex scenario now where I'm rotating around and drawing a bunch of circles. But you can see that the x and the y are used here on the ellipse function. The variable petals is used here in this for loop. So what these parameters are, they're essentially like variables that are local to this function. It's as if at the top of the function, I said var x, var y, var petals. The question is when we looked at variables, we said, OK, well, you have a variable. You need to declare it, var x. Well, this is like declaring it declaring it as a parameter to this function x. And then you need to initialize it. Var x equals zero var x equals 200. So where does x get its initial value? And this is the new piece here xy, and petals get their initial value from where you call the function. So if I were to say flowers 200 comma 100 comma 10, it's the equivalent of saying here I'm not saying this var x equals 200. So that's what we're writing because 200 goes into x. 100 goes into y. 10 goes into petals. And by the way, these are what are known as arguments. So the terminology, it's easy to confuse these, and you don't have to worry about this too much because the program's not going to care what you're calling what to your friends when you're talking about your code. But the variables that you define in the parentheses in the function definition, those are called parameters. They're the parameters to the function, and the arguments are the things that get passed into the parameters, 200, 100, comma 10. And by the way this is just how p 5 works. When you say ellipse, you say xy or width and height, and then the ellipse function is defined somewhere function ellipse xywh something like that. And I, by the way, wrote flowers. This is flower, flower. The wonderful thing here is once you've figured out this elaborate code for drawing this elaborate beautiful, wonderful flower design, you can then have more than one on the screen. So you could say now flower 300 comma 50 comma 20. So you have a flower in a different place with a different number of petals. So this is essentially the exercise that I think you should try it for yourself is build yourself some kind of interesting design, see if you can give that design parameters, define it in a function, and call that function multiple times. And let's come over here, and let's look at just kind of doing that quickly in an example. I've gone up by selfenforced 10minute limit. So let's look at this. This is again. I call this the lollipop. I'm trying to do something just very simple here. So this is just a single design. It involves both a rectangle and an ellipse. So now what I would like to do is write a function, call it lollipop hope I spelled that right. I'm going to put this code just right there inside the lollipop function. OK, and I'm going to run it. Of course, we don't see anything because all I did was define this function. I didn't actually call it. So the next thing that I'm going to do is call the function. And now you see there is the hum flickering, which is not good. Yeah, I'm back. Hopefully, I fixed that camera problem. What I did before in the previous video, which I just took a chunk of code, put it in a function. I'm calling that function. And then when I run it, it executes the function. But the point of what I want to do right now is add parameters to this function. And just to be overly simplistic, I'm going to give this three parameters an x location, a y location, and a size of the lollipop thing itself. So to three parameters need to go inside the parentheses as variables an x location, a y location, and because I'm the least creative person ever, I'm going to call this diameter so diameter meaning the diameter of that circle. So we know the ellipse, instead of saying 100, I want to use the variable diameter. The ellipse itself should be at the x and y location. And the rectangle itself should also be at the x and y location. But I'm going to say minus 10 here because that's helping me. The rectangle is 20 pixels wide. I'm going to center it a little bit over. So now if I run this, first of all, I'm going to get an error, which if you read down here, it's going to say well if my font is too big, and I'm failing to see if I can says looks like an ellipse, receive an empty variable, bla, bla, bla. So it can't figure out what to do because I called lollipop without the proper arguments, and so it doesn't know what x is. And it's trying to call ellipse with an x, but the x is undefined. So this is going to cause problems. If your arguments don't match the parameters, things will break. There's all sorts of clever ways around that. But for right now, if I've got three parameters, I want to have three arguments here. So I want to have the lollipop at say 100 comma 100 with a diameter of 50. And you can see there's lollipop. And then if I want to have this line of code again, at 300 comma 200 with 150 diameter, there now I have two lollipops. And you can see this shows how untalented I am in that that's why I had to pull that beautiful interesting, intricate robot example. But you see the point here. You have a function. I have defined a function. I made it up. It's called lollipop. It's my own. It's my own function. It takes three arguments. I can do whatever I want with those arguments, execute code, execute drawing stuff, and I can call that function then multiple times in different places. So I think this is hopefully a useful exercise for you to try something similar. Hopefully, you have more talent than I do, can come up with something different than this pathetic looking lollipop. And I have two more videos that I want to make. One will look at a function that returns a value, which is a key thing. And the other thing I want to do, which is a little bit crazy, is look at what happens if I put a function inside an object. OK, so I will see you in the next video. I won't see you. I would like to see you goodbye. I can't stop here. I have to stop here.
