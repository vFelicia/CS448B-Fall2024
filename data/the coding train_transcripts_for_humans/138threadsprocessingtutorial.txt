With timestamps:

00:01 - so now that we've looked at a lot of
00:04 - different scenarios and possibilities
00:06 - around retrieving data a data feed from
00:08 - an external source I want to talk about
00:10 - a problem that happens when you are
00:13 - trying to update your updated data feed
00:16 - while and it program that's animating is
00:18 - running so for example we have we have a
00:21 - simple processing sketch with like setup
00:23 - and draw and maybe here is where we have
00:27 - our call to load XML and some URL goes
00:31 - here we load all sorts of data we
00:33 - calculate it we get everything we do all
00:35 - we want and then we do all this work
00:37 - here and we get this beautiful you know
00:40 - design spiral pattern colorful things on
00:43 - the screen what if in what if this data
00:47 - that we use to draw this it changes
00:49 - every five minutes or every five seconds
00:50 - or every half a second what if every so
00:54 - often I want to ask in draw for new data
00:57 - well this is this is an asynchronous
01:00 - call meaning it takes time when I say
01:05 - load XML I've got a request this URL
01:08 - pull the data back and once I've got it
01:11 - and that takes time
01:12 - and the server's gotta like here my
01:14 - request response and and it might not
01:15 - take very long it might be like half a
01:17 - second for us that's no problem but for
01:19 - an animation program that's trying to
01:21 - run 30 frames per second this can be a
01:23 - huge problem and what you'll see is that
01:25 - your program will stutter so let's take
01:28 - a look at kind of a fake scenario here
01:30 - whoops
01:31 - so I'm gonna I've got a program here
01:34 - where I have okay so I have a fake
01:37 - function called load data which does
01:39 - nothing and if I were to take that load
01:42 - data function and put it in setup we've
01:46 - got no problem my program runs even if I
01:49 - create now I'm Kecia this function delay
01:52 - exists in processing and basically you
01:55 - should never ever ever use it the only
01:57 - valid use i've ever fasting delay is
01:59 - exactly this demonstrating something
02:01 - that takes longer so let's say there was
02:03 - something in here that takes a thousand
02:07 - milliseconds or one second to execute
02:10 - it's no problem if that happens to setup
02:12 - a second
02:13 - by before the program starts now however
02:17 - if I were to now put that load data
02:20 - function into draw and run this my
02:28 - program is like crawling to a halt
02:29 - because every time before it draws it's
02:32 - got a request data wait till it comes
02:34 - back and then draw the next frame this
02:36 - is no good
02:37 - and what we want is instead for the call
02:41 - to load data to go off and do its own
02:46 - thing however long it takes
02:47 - while draw continues to execute and this
02:50 - is what's known the solution for this is
02:53 - called threading a thread being a
02:56 - sequence of instructions that's
02:58 - happening one at a time while the
03:00 - program is running that's like the worst
03:01 - definition of thread ever it's like
03:03 - that's a string and we've got one string
03:06 - and we're just going along it if I could
03:07 - have two strings one going and reeving
03:10 - the data the other animating if this
03:12 - one's taking a long time
03:13 - this one would still go fast so and this
03:16 - by the way the processing a processing
03:18 - program is a single thread it's often
03:20 - referred to as the animation thread
03:21 - setup then draw over and over again
03:23 - every line of code one at a time so what
03:26 - we want is for load data to happen off
03:28 - in another thread so now if I jump over
03:33 - here for a second again I'm gonna kind
03:35 - of show you a program that's rather
03:37 - complex that we could kind of mostly
03:41 - ignore but I want to show you this
03:42 - because here I made these two like
03:44 - thread objects and I'm giving them some
03:47 - values like a thousand and cat and 1500
03:49 - dog and when I run this program what
03:51 - you're actually going to see is that cat
03:53 - is count and dog are both counting up
03:55 - but they are cat is counting every 1000
04:00 - milliseconds dog is counting every 15
04:02 - hundred milliseconds so these are
04:03 - actually separate threads that are
04:05 - happening in the background and I'm just
04:06 - drawing their status onto the screen
04:08 - this is I probably should have shown
04:10 - this to you first this is kind of how
04:12 - you do threads in Java and you can see
04:14 - there's a class here and it extends
04:17 - thread and there's all these variables
04:18 - like how long to wait and whether it's
04:20 - running or not this is something you
04:21 - might look into at some point if you
04:23 - need a more sophisticated thread that's
04:26 - keeping
04:27 - lack of a lot of information however if
04:29 - we go back to this problem of simply
04:32 - wanting to execute a function and have
04:34 - it have draw keep going while that
04:36 - happens in a separate thread there's
04:38 - actually quite a way to do this and if
04:41 - you ever done any programming in
04:42 - JavaScript this almost kind of mirrors
04:44 - how JavaScript works javascript is has a
04:46 - really easy time with these types of
04:48 - multiple events and asynchronous things
04:50 - all happening so let me come back to
04:53 - here and let's go back to our program
04:55 - where we were loading data now one thing
04:57 - I want to change about this is I want to
04:58 - say like I'm going to use the modulus
05:01 - operation I don't know if in any of
05:03 - these videos I've covered the modulus
05:04 - operation but just very briefly modulus
05:07 - is the % it gives you the remainder of
05:10 - division
05:11 - so 60 divided by 60 equal or 120 divided
05:16 - by 60 is 2 remainder 0 121 divided by 60
05:21 - is 2 remainder 1 modulus is 0 or 1 that
05:25 - remainder so if the frame count module
05:28 - is 60 we'll only equal 0 at 0 60 180 240
05:32 - etc so every 60 frames I want this to
05:35 - happen and what you'll see is every 60
05:38 - frames there's a one-second pause while
05:41 - it loads the data and then keeps going
05:43 - so instead of calling load data directly
05:47 - I'm going to use Processing's thread
05:50 - function and pass into the thread
05:53 - function the name of the function I want
05:56 - to execute as a separate thread so this
05:58 - code down here is going to execute
06:00 - however it's not gonna stop here it's
06:02 - going to keep going processing is gonna
06:04 - keep going or in the hallway talking
06:06 - very loudly or if you could hear them so
06:08 - you can see now I'm getting my data but
06:10 - this animation is never stopping so this
06:12 - is a case uh you know again this is not
06:17 - what you'll be doing presumably you're
06:19 - going to have like kind of a massive
06:20 - amount of stuff you know you're making a
06:23 - request for some data source something
06:25 - that actually takes a small amount of
06:26 - time the reason why I said massive
06:28 - amount of stuff is I was kind of
06:30 - thinking of another example which I'm
06:32 - just gonna pull up really quickly it's
06:35 - inside of processing under threads and
06:38 - I'm gonna run this one
06:40 - you can see what happened so fast let's
06:42 - let me let me put it like a delay in
06:48 - here just sometimes so this is a
06:53 - scenario where I have this like loading
06:55 - bar going and then it's it's finished
06:56 - loading click the mouse to load again so
06:59 - this is also a nice use for a thread if
07:02 - you have something that's going to take
07:04 - a really long time at the beginning of
07:06 - your program and you don't want it to
07:07 - just be this blank screen while the user
07:09 - is waiting you could potentially have
07:11 - that go off in a separate thread and
07:13 - draw is continuing so it knows if it's
07:16 - not finished draw this loading bar if it
07:19 - is finished draw this other stuff and
07:21 - you can see here the what a nice sort of
07:25 - trick here and I'm gonna come back to
07:26 - here to explain this is if this is
07:30 - pedestal good if this is my load data
07:35 - function and if I have a global variable
07:38 - sorry maybe called finished which I must
07:43 - say is equal to false if this takes a
07:48 - long time to execute and at the very
07:51 - very end I say finished equals true then
07:56 - inside of draw I can be doing stuff draw
08:00 - looping while it's inside this code here
08:03 - and I could say is if you're not
08:04 - finished draw this loading bar and as
08:07 - soon as that gets to the end the thread
08:09 - will be done and it then draw can draw
08:10 - something else so this is also a common
08:12 - technique that you might take a look at
08:15 - so if you're looking for a kind of
08:18 - example that kind of brings all this
08:21 - together I might take a look at example
08:22 - 18.9 in the learning processing github
08:26 - set of examples there's this one thing
08:28 - that's very hard to do is find a data
08:29 - source that changes very often like the
08:31 - weather feeds you know the temperature
08:33 - is not changing on a like second to
08:35 - second basis but this is actually if
08:38 - you're just looking to practice this is
08:39 - a pretty good one it's time JSON test
08:42 - calm and this is a JSON feed that all it
08:46 - does is give you the actual current time
08:49 - you can see milliseconds since the epoch
08:52 - and you can see the actual
08:53 - here so this is a data feed that's
08:55 - changing very very very very rapidly and
08:57 - so this particular processing sketch is
09:01 - requesting the time every so often and
09:04 - one and and you can see that this
09:06 - request is being done in a separate
09:09 - thread so what you what you can kind of
09:12 - see here this is a little bit goofy but
09:13 - this little animation right above my
09:16 - head
09:16 - it's animating whenever it's waiting to
09:18 - load the time so this is also something
09:20 - you could think about if you have a
09:21 - program that's looking for a piece of
09:24 - data you might show an animation while
09:28 - like you know updating and then it's
09:29 - done and it has the new data it's kind
09:31 - of indicate to the user what's going on
09:32 - but you need to be drawing so that
09:34 - request has to be in a separate thread
09:36 - anyway there's so much more kind of
09:39 - scenarios and possibilities and
09:40 - different kind of configurations of how
09:42 - this might work actually one thing I
09:44 - just thought of that might be worth
09:45 - mentioning is what if you want to load
09:48 - an image and loading an image can take
09:49 - quite a bit of time it's a large file
09:51 - you might need a thread for that
09:52 - actually processing has a little known
09:55 - function that will take care of this for
09:58 - you you could use the thread function
10:01 - but one thing I just should mention is
10:04 - that you can also use this request image
10:07 - function so request image function will
10:09 - launch the loading of the image in a
10:11 - separate thread so if you have a very
10:13 - large image that allow processing to
10:14 - continue and what you can actually do is
10:17 - you know the image is ready as soon as
10:19 - the width is not zero so the width is
10:23 - zero it hasn't loaded yet if it's
10:24 - negative one it means actually it failed
10:26 - to load there was a problem otherwise
10:27 - draw the image so that's something you
10:29 - might take a look at it for something
10:31 - that you're doing
10:32 - so anyway thus ends this sort of section
10:35 - of videos on data threads being a last
10:36 - little piece there and what I might
10:39 - suggest is if you did something where
10:41 - you're where you've loaded data try
10:43 - putting that loading data into draw and
10:45 - see if you can make it happen in a
10:46 - different thread and that's it you know
10:49 - you need to find the button that I press
10:51 - to stop

Cleaned transcript:

so now that we've looked at a lot of different scenarios and possibilities around retrieving data a data feed from an external source I want to talk about a problem that happens when you are trying to update your updated data feed while and it program that's animating is running so for example we have we have a simple processing sketch with like setup and draw and maybe here is where we have our call to load XML and some URL goes here we load all sorts of data we calculate it we get everything we do all we want and then we do all this work here and we get this beautiful you know design spiral pattern colorful things on the screen what if in what if this data that we use to draw this it changes every five minutes or every five seconds or every half a second what if every so often I want to ask in draw for new data well this is this is an asynchronous call meaning it takes time when I say load XML I've got a request this URL pull the data back and once I've got it and that takes time and the server's gotta like here my request response and and it might not take very long it might be like half a second for us that's no problem but for an animation program that's trying to run 30 frames per second this can be a huge problem and what you'll see is that your program will stutter so let's take a look at kind of a fake scenario here whoops so I'm gonna I've got a program here where I have okay so I have a fake function called load data which does nothing and if I were to take that load data function and put it in setup we've got no problem my program runs even if I create now I'm Kecia this function delay exists in processing and basically you should never ever ever use it the only valid use i've ever fasting delay is exactly this demonstrating something that takes longer so let's say there was something in here that takes a thousand milliseconds or one second to execute it's no problem if that happens to setup a second by before the program starts now however if I were to now put that load data function into draw and run this my program is like crawling to a halt because every time before it draws it's got a request data wait till it comes back and then draw the next frame this is no good and what we want is instead for the call to load data to go off and do its own thing however long it takes while draw continues to execute and this is what's known the solution for this is called threading a thread being a sequence of instructions that's happening one at a time while the program is running that's like the worst definition of thread ever it's like that's a string and we've got one string and we're just going along it if I could have two strings one going and reeving the data the other animating if this one's taking a long time this one would still go fast so and this by the way the processing a processing program is a single thread it's often referred to as the animation thread setup then draw over and over again every line of code one at a time so what we want is for load data to happen off in another thread so now if I jump over here for a second again I'm gonna kind of show you a program that's rather complex that we could kind of mostly ignore but I want to show you this because here I made these two like thread objects and I'm giving them some values like a thousand and cat and 1500 dog and when I run this program what you're actually going to see is that cat is count and dog are both counting up but they are cat is counting every 1000 milliseconds dog is counting every 15 hundred milliseconds so these are actually separate threads that are happening in the background and I'm just drawing their status onto the screen this is I probably should have shown this to you first this is kind of how you do threads in Java and you can see there's a class here and it extends thread and there's all these variables like how long to wait and whether it's running or not this is something you might look into at some point if you need a more sophisticated thread that's keeping lack of a lot of information however if we go back to this problem of simply wanting to execute a function and have it have draw keep going while that happens in a separate thread there's actually quite a way to do this and if you ever done any programming in JavaScript this almost kind of mirrors how JavaScript works javascript is has a really easy time with these types of multiple events and asynchronous things all happening so let me come back to here and let's go back to our program where we were loading data now one thing I want to change about this is I want to say like I'm going to use the modulus operation I don't know if in any of these videos I've covered the modulus operation but just very briefly modulus is the % it gives you the remainder of division so 60 divided by 60 equal or 120 divided by 60 is 2 remainder 0 121 divided by 60 is 2 remainder 1 modulus is 0 or 1 that remainder so if the frame count module is 60 we'll only equal 0 at 0 60 180 240 etc so every 60 frames I want this to happen and what you'll see is every 60 frames there's a onesecond pause while it loads the data and then keeps going so instead of calling load data directly I'm going to use Processing's thread function and pass into the thread function the name of the function I want to execute as a separate thread so this code down here is going to execute however it's not gonna stop here it's going to keep going processing is gonna keep going or in the hallway talking very loudly or if you could hear them so you can see now I'm getting my data but this animation is never stopping so this is a case uh you know again this is not what you'll be doing presumably you're going to have like kind of a massive amount of stuff you know you're making a request for some data source something that actually takes a small amount of time the reason why I said massive amount of stuff is I was kind of thinking of another example which I'm just gonna pull up really quickly it's inside of processing under threads and I'm gonna run this one you can see what happened so fast let's let me let me put it like a delay in here just sometimes so this is a scenario where I have this like loading bar going and then it's it's finished loading click the mouse to load again so this is also a nice use for a thread if you have something that's going to take a really long time at the beginning of your program and you don't want it to just be this blank screen while the user is waiting you could potentially have that go off in a separate thread and draw is continuing so it knows if it's not finished draw this loading bar if it is finished draw this other stuff and you can see here the what a nice sort of trick here and I'm gonna come back to here to explain this is if this is pedestal good if this is my load data function and if I have a global variable sorry maybe called finished which I must say is equal to false if this takes a long time to execute and at the very very end I say finished equals true then inside of draw I can be doing stuff draw looping while it's inside this code here and I could say is if you're not finished draw this loading bar and as soon as that gets to the end the thread will be done and it then draw can draw something else so this is also a common technique that you might take a look at so if you're looking for a kind of example that kind of brings all this together I might take a look at example 18.9 in the learning processing github set of examples there's this one thing that's very hard to do is find a data source that changes very often like the weather feeds you know the temperature is not changing on a like second to second basis but this is actually if you're just looking to practice this is a pretty good one it's time JSON test calm and this is a JSON feed that all it does is give you the actual current time you can see milliseconds since the epoch and you can see the actual here so this is a data feed that's changing very very very very rapidly and so this particular processing sketch is requesting the time every so often and one and and you can see that this request is being done in a separate thread so what you what you can kind of see here this is a little bit goofy but this little animation right above my head it's animating whenever it's waiting to load the time so this is also something you could think about if you have a program that's looking for a piece of data you might show an animation while like you know updating and then it's done and it has the new data it's kind of indicate to the user what's going on but you need to be drawing so that request has to be in a separate thread anyway there's so much more kind of scenarios and possibilities and different kind of configurations of how this might work actually one thing I just thought of that might be worth mentioning is what if you want to load an image and loading an image can take quite a bit of time it's a large file you might need a thread for that actually processing has a little known function that will take care of this for you you could use the thread function but one thing I just should mention is that you can also use this request image function so request image function will launch the loading of the image in a separate thread so if you have a very large image that allow processing to continue and what you can actually do is you know the image is ready as soon as the width is not zero so the width is zero it hasn't loaded yet if it's negative one it means actually it failed to load there was a problem otherwise draw the image so that's something you might take a look at it for something that you're doing so anyway thus ends this sort of section of videos on data threads being a last little piece there and what I might suggest is if you did something where you're where you've loaded data try putting that loading data into draw and see if you can make it happen in a different thread and that's it you know you need to find the button that I press to stop
