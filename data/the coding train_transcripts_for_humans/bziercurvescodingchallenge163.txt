With timestamps:

00:00 - hello and welcome to a very special
00:03 - coding challenge video this video is
00:05 - part of support p5 2020 i know it's 2021
00:09 - but part of the campaign to raise money
00:11 - for the processing foundation in 2020
00:13 - one of the rewards for making a donation
00:15 - was request a topic for a coding trade
00:17 - video and i'm here finally in the summer
00:19 - of 2021 to fulfill these requests this
00:22 - video was is thanks to the generous
00:24 - donation from jason oswald chair of
00:27 - computer science at germantown academy
00:29 - if you're not familiar with the
00:30 - processing foundation it is the
00:32 - organization that maintains p5.js
00:34 - processing you can learn all about the
00:36 - processing foundation at the processing
00:38 - foundation website and that's where you
00:40 - too can also make a donation
00:43 - so much of what i do on the coding
00:44 - terrain actually basically all of what i
00:46 - do on the coding trade would not be
00:48 - possible without the processing
00:49 - foundation's uh support and community
00:51 - and that's the anything that i could do
00:53 - to give back i am thrilled to be able to
00:55 - do so what function did jason request
00:58 - that i explore in this particular video
01:01 - it is ta-da
01:03 - the bezier function the bezier function
01:06 - draws a bezier curve named for the
01:08 - french engineer pial bezier who was
01:11 - working on i think modeling renault cars
01:14 - in the 1960s and developed this curve so
01:16 - in this video i both want to demonstrate
01:18 - the bezier function itself as it exists
01:21 - in p5.js as well as the math behind it
01:24 - what if you didn't have that function
01:26 - could you get that curve on the screen
01:28 - just through your own calculations in
01:31 - learning about the bezier curve your
01:32 - first stop should really be roone
01:34 - madsen's programming design systems book
01:36 - in the shapes chapter in the custom
01:38 - shapes section he has a wonderful
01:40 - explanation of what a bezier curve is
01:43 - how it works and what kinds of designs
01:45 - and shapes you can create in p5.js
01:47 - really everything that i want to cover
01:49 - in this video is very well explained
01:51 - there you might also want to wonder your
01:53 - way over to the wikipedia page for the
01:55 - psja curve there you can find all the
01:57 - math behind how the curve is calculated
02:00 - now what is most commonly referred to as
02:03 - a bezier curve is actually known as a
02:06 - cubic bezier curve there's such thing as
02:08 - a linear bezier curve which is really
02:10 - just a line a quadratic bezier curve and
02:13 - a cubic bezier curve the bezier function
02:16 - in p5 itself is the cubic bezier curve
02:19 - and that's what you usually find in
02:20 - things like adobe illustrator as well a
02:23 - bezier curve always has two anchor
02:25 - points
02:27 - a linear bezier curve is just a line
02:30 - between those two points
02:32 - what's special about bezier curves what
02:35 - makes them curvy is the fact that in
02:37 - addition to the anchor point there are
02:39 - also control points a quadratic bezier
02:43 - curve involves just one control point
02:46 - so i'm going to re-number these points
02:48 - now
02:50 - the middle point is the control point
02:52 - and it's like a gravitational pull
02:56 - if i were to pull this point down
03:00 - the curve would also be pulled down
03:04 - and if you're thinking what i'm thinking
03:06 - a cubic bezier curve has two control
03:09 - points
03:12 - four points in total both of them
03:15 - controlling the shape of the curve
03:18 - additionally a single bezier curve which
03:21 - has these four points can be extended to
03:23 - what's known as a bezier spline by
03:26 - adding more control points along a
03:30 - sequence we can create continuous
03:33 - geometry that bends according to a
03:35 - sequence of bezier vertices but i'm
03:38 - getting ahead of myself let's start by
03:40 - exploring the bezier function in p5
03:48 - before i write the bezier function i
03:50 - just want to lay out where i imagine the
03:52 - anchor points and control points to be
03:54 - so i'm going to draw four points anchor
03:56 - point control point control point anchor
03:58 - point the bezier function itself takes
04:00 - eight arguments four pairs of x y points
04:03 - anchor control control anchor
04:08 - interestingly the bezier function
04:10 - natively tries to create an enclosed
04:12 - shape with a fill
04:14 - is this what you expected i always
04:16 - expect the curve itself to end up much
04:18 - closer to the control point but we'll
04:20 - see in a moment when i start to look at
04:21 - the math why it's not coming all the way
04:24 - up to that control point so we can see a
04:26 - little better let me move one with the
04:27 - mouse
04:31 - now as i move this control point around
04:33 - we can see how the bezier curve itself
04:35 - responds
04:36 - let me add a couple more lines
04:44 - one thing you might notice now is that
04:46 - these lines are tangent to the curve
04:48 - that's an important mathematical
04:50 - principle here in the bezier curve as an
04:52 - exercise i might suggest can you make
04:54 - your own bezier curve tool but you can
04:56 - move all the points around individually
04:58 - now before i move on to the math behind
05:00 - the bezier curve i think it's worth
05:01 - exploring what the bezier vertex
05:04 - function does in p5.js as well
05:13 - here we can see with begin shape and end
05:16 - shape we can set single vertices so if
05:19 - there are only two vertices then i have
05:21 - a line that connects those two vertices
05:25 - a bezier vertex and it's giving me an
05:27 - error because i haven't finished here
05:29 - not only sets the next point that you're
05:31 - defining along the way of a shape but
05:34 - two control points along the way that
05:37 - determine how you curve between this
05:39 - first vertex which has to be specified
05:41 - with the plane vertex function and the
05:44 - next vertex which is the last two
05:46 - arguments of the bezier vertex function
05:50 - now you see i have precisely the same
05:54 - curve that i had before but instead of
05:56 - the full bezier function i set the first
05:59 - anchor point with vertex and then the
06:00 - next two control points and the next
06:02 - anchor point with bezier vertex what
06:04 - does this allow me to do it allows me to
06:07 - continue
06:13 - this is how i can start to create more
06:14 - elaborate shapes like the one that
06:16 - you're seeing here by stringing together
06:19 - multiple bezier vertices and you can
06:20 - actually go quite far with this there's
06:22 - also a quadratic vertex which just
06:24 - involves a single control point you can
06:26 - have regular vertices and bezier
06:28 - vertices and quadratic vertices to
06:30 - create all sorts of possibilities and
06:32 - remember with a custom shape like this
06:36 - you can also include a fill this alone
06:39 - should give you plenty to explore just
06:41 - having the bezier function of the bezier
06:42 - vertex function right there in p5 opens
06:45 - up so many visual possibilities i
06:47 - recently did a coding challenge about a
06:48 - self-avoiding walk which connects a
06:51 - whole set of points with line segments
06:53 - and just adding the variation of
06:55 - connecting all these points with bezier
06:57 - vertices creates a very different visual
07:00 - quality to the output so maybe just
07:03 - trying to sketch where you put a lot of
07:04 - lines and vertices in and try using
07:07 - bezier curves instead but we are limited
07:09 - here because we're using the bezier
07:11 - function in p5 directly we don't have
07:13 - access to all the points along the way
07:15 - on the wikipedia page you might have
07:17 - noticed a diagram of the quadratic
07:19 - bezier curve visualized with string art
07:22 - we can do this with something really
07:25 - special another function a bonus that
07:27 - you're getting in this video for free
07:29 - the lerp function now how in the world
07:32 - is the bezier function related to the
07:35 - alert function
07:37 - let's go back to a simple
07:40 - linear bezier curve or just a line
07:42 - between two points i'm going to call
07:44 - this x0
07:47 - and this one x1
07:53 - the lerp function takes two values and
07:56 - returns back to you a value in between
07:58 - those two values some percentage along
08:00 - the way between 0 and 100
08:04 - in this case 0.5 would give me the value
08:07 - 50 of the way there this value is often
08:10 - represented with the letter t i think of
08:13 - it as like the amount of time to get
08:15 - from this point all the way to this
08:17 - point the math for doing this is quite
08:19 - simple and intuitive
08:23 - let's imagine t is equal to 0.2
08:27 - well we want to start at this point and
08:30 - then we want to go about 20
08:32 - of the way of the distance between x0
08:35 - and x1 so start at x0 and add
08:39 - 20
08:39 - of the distance which is x1 minus x0
08:44 - times 0.2
08:46 - linear interpolation
08:48 - coming back to the wikipedia page you'll
08:50 - notice something interesting look at
08:51 - that formula right there under linear
08:53 - bezier curve exactly this formula
08:57 - let's implement this in a code example
09:05 - so here we have our straight line i'm
09:07 - using the create vector function to pair
09:10 - an x and y value in a single variable
09:13 - now there's a lot more to vectors than
09:15 - that but for our purposes here i just
09:17 - don't want to have a lot of separate x y
09:18 - variables so i've got p zero dot x
09:21 - dot p0.y p1.x and p1.y and of course i'm
09:24 - just using the line function to draw
09:26 - that line but what if instead of using
09:29 - line i wanted to draw the line myself as
09:32 - many different points along the way
09:34 - between those two anchor points i'll
09:36 - start with a for loop
09:39 - i'm choosing to loop t starting at zero
09:42 - all the way up to one hundred percent or
09:44 - one then let me just apply this formula
09:53 - and look at that there's that beautiful
09:55 - formula that i'm getting all of the
09:57 - points each an additional 10
10:00 - along the way to the end adding begin
10:03 - shape and end shape
10:06 - and changing it to vertex i have my line
10:09 - again now while i've put in here the raw
10:12 - math for linear interpolation p5 has the
10:16 - lerp function so i believe i could get
10:18 - my code to be easier to read without the
10:21 - raw math there with just the lerp
10:23 - function itself
10:29 - and there we go now i have that line
10:31 - drawn with the lerp function
10:35 - because i'm using p5 vector i could
10:37 - actually use the p5 vector lerp function
10:39 - which will allow me to sort of
10:40 - consolidate the xy together but just to
10:42 - make everything really clear and for me
10:44 - be able to follow it i'm going to keep
10:45 - it as separate x y's for right now but
10:48 - i'm
10:48 - making a bezier curve this is just a
10:50 - line
10:51 - lerp works for linear interpolation
10:53 - lines
10:54 - how do i make a quadratic bezier from
10:58 - three points and lerp
11:05 - remember a quadratic bezier has two
11:08 - anchor points and one control point
11:11 - probably ends up something like this
11:13 - well what if i wanted to do linear
11:16 - interpolation between x0 and x1 it would
11:20 - look like this
11:21 - what if i wanted to do linear
11:22 - interpolation between x1 and x2 it would
11:25 - look like this
11:29 - this is the linear interpolation between
11:32 - these two points this is the linear
11:34 - interpolation between these two points
11:37 - what if i took and this is going to blow
11:39 - your mind it's like
11:41 - ler perception i can't say that
11:43 - lerpception
11:44 - [Music]
11:46 - what if i
11:48 - lurked
11:49 - this point and this point by t as well
11:54 - so i would be taking the if this whole
11:56 - thing were a and this whole thing were b
12:00 - i would say a
12:01 - plus
12:02 - b minus a
12:04 - times t so plug this whole thing into
12:07 - here and then plug this into here and
12:09 - listen to here and oh let's go back and
12:10 - look at the wikipedia page that's
12:12 - exactly what's happening there and it's
12:14 - working all its way out and you can see
12:16 - eventually we end up with this
12:17 - particular formula there i could go
12:19 - through and derive all of the math
12:22 - and then write it all out in my p5 code
12:26 - itself but i've got the lerp function
12:29 - there remember this
12:34 - is just this lerp function
12:39 - this one is just this lerp function
12:42 - and this is going to look really crazy
12:44 - but i can just put the lerps inside the
12:47 - lerp
12:53 - lerp
12:54 - the result of the first lerp with the
12:56 - result of the second lerp according to t
13:01 - this is the quadratic bezier
13:05 - and if your mind's going where mine's
13:06 - going right now just wait till we get to
13:08 - the cubic one let's put this into the
13:10 - code and see what we get
13:14 - so the vertex now with the math that i
13:16 - had before is just drawing the line
13:18 - between p0 and p1 let's call that x1 and
13:22 - y1
13:26 - x2 and y2 is the lerp between p1 and p2
13:31 - and then x is the lerp between x1 and x2
13:39 - and look there's our quadratic bezier
13:43 - all with lerp
13:44 - i can't believe that worked
13:47 - i love it so much
13:48 - let's have p1 be controlled by the mouse
13:53 - well what's going on here oh no no p1 i
13:56 - really did something crazy there
13:59 - the other thing that's super interesting
14:00 - here is this value
14:02 - 0.1 that's the amount of space in
14:06 - between every point along the way that
14:08 - we're calculating i could call that the
14:10 - delta maybe
14:13 - if delta or 0.5 you can see i'm just
14:16 - basically getting one point in between
14:21 - a very small delta would be calculating
14:24 - lots of little points
14:25 - in a way i want to go back to drawing
14:27 - those points
14:33 - and incidentally what happens then if i
14:36 - connect
14:37 - x1 and y1 with x2 and y2 with a line
14:44 - oh
14:45 - look at that
14:54 - remember the string art on the wikipedia
14:56 - page
14:58 - that's what i've got right now i don't
15:00 - even need to draw these points or the
15:02 - bezier curve itself the bezier curve
15:04 - happens just by the sort of layering of
15:07 - all these lines and because they're all
15:09 - separate lines i could make the rainbow
15:11 - colored
15:15 - so for whatever reason i'm not i'm
15:18 - getting the first line because i'm
15:20 - starting at t equals zero but i'm not
15:22 - getting the what i expect to see as
15:25 - completely closing off
15:27 - um at t is equal to one this is because
15:31 - of one of those pesky little javascript
15:33 - things where there's like a rounding
15:34 - error and i'm not actually getting all
15:37 - the way up to t equals one oh
15:41 - there we go
15:42 - so that's a little bit of a hack
15:44 - solution there but i'm just gonna leave
15:46 - it and now i've closed off this shape oh
15:48 - i love it so much we're not done yet
15:50 - though i have got to do cubic oh boy how
15:54 - am i gonna do cubic
15:55 - well i need another point
15:59 - so p2 will be something like 400 comma
16:02 - zero i'm just gonna make something
16:04 - simple right now and p3 is then the last
16:07 - point
16:08 - and i'm going to write a function that's
16:10 - called quadratic
16:12 - and quadratic is going to receive
16:16 - three points
16:18 - and it's going to do exactly this
16:25 - and return that result as a vector
16:30 - i'm going to say v for vertex is the
16:32 - result of quadratic oh and it needs
16:35 - a t obviously
16:39 - okay great
16:40 - so i forgot like i can put in p3 here
16:43 - and we can see this is what i had before
16:46 - all right but i have it all in a
16:48 - function that's doing the quadratic
16:50 - bezier math always learned
16:54 - now what if i were to say v1
16:56 - is the quadratic
16:59 - from p0 to p1 to p2
17:02 - and v2
17:04 - is the quadratic
17:06 - from p1
17:07 - p2 to p3
17:11 - then i could just say that x is lerp v1
17:16 - right i need to lerp both quadratics
17:20 - are you with me if quadratic is lurping
17:25 - two lerps
17:27 - then cubic is lurping
17:29 - two quadratics
17:33 - find the quadratic bezier between these
17:36 - three points
17:37 - find the quadratic bezier between these
17:40 - three points i totally numbered them
17:42 - wrong x1 x2 x3
17:46 - and then lurk those two curves together
17:54 - i've messed something up here what did i
17:57 - mess up
17:59 - oh oh oh my goodness what am i doing
18:03 - there we go sorry for that so this is
18:06 - correct in the sense that i've taken two
18:08 - quadratic curves and lurped between them
18:11 - i think it would be advisable for me to
18:14 - put all of this into a function called
18:16 - cubic
18:19 - which takes all the points
18:22 - then
18:24 - does the quadratic between the first
18:26 - three and the second three
18:30 - calculates the x y and returns
18:34 - that
18:35 - as a vector
18:37 - so quadratic is lurping two line
18:39 - segments p0 p1 p1 p2
18:42 - cubic is lurping two quadratics
18:46 - now i can just say let v is cubic p0 p1
18:50 - p2 p3 comma t
18:54 - vertex v dot x
18:56 - v dot y
18:59 - there we go
19:01 - so this works i've got the bezier curve
19:03 - drawn as a sequence of vertices but i
19:06 - lost the beautiful string art and the
19:08 - rainbow colors so let's see if i can get
19:10 - that back
19:11 - i'm going to add that stroke in there
19:13 - get rid of begin shape and end shape
19:17 - and the vertices
19:18 - and now let's just draw lines connecting
19:20 - various points so what if here in cubic
19:23 - i connect v1 to v2
19:27 - look at that and i can see the bezier
19:30 - curve there as the sort of tangents of
19:32 - all of these lines mixed together
19:35 - but i could make this really crazy and i
19:37 - could also draw all those quadratic
19:39 - connections
19:43 - whoa i did something wrong here
19:45 - x1 y1
19:48 - x2 y2 i got a little overly excited
19:50 - there there we go look at this this is
19:51 - two quadratic curves meeting in the
19:54 - middle to draw the bezier
19:56 - i could add a little bit of alpha here
19:58 - just so it's you get some blending
20:00 - i could go on forever here but what if i
20:04 - instead of just moving one point around
20:06 - with the mouse let me move all the
20:08 - points around according to just some
20:11 - random bouncing ball logic
20:26 - so very quickly i just made a class
20:28 - called particle that both has an x y as
20:31 - well as a d x and d y are x speed and y
20:34 - speed i could have called them the x y's
20:36 - move around and if it hits the edges the
20:38 - direction is reversed
20:42 - so all of these are particles now
20:46 - adding particle.js to index.html and
20:49 - i've got the exact same sketch the
20:52 - difference is now that these are all
20:54 - particle objects instead of setting one
20:57 - to the mouse location
20:59 - i can call their update function which
21:01 - causes it to bounce around
21:06 - i really don't know what i've made here
21:07 - but it's kind of cool
21:10 - let me try commenting out moving the
21:12 - anchor points of this bezier curve
21:14 - so i have some semblance of control here
21:17 - so now just the control points are
21:19 - moving i don't know what i've made here
21:21 - but hopefully i've opened up a door to a
21:23 - lot of creative possibilities that you
21:25 - could explore from this code i should
21:27 - say that i'm not so convinced that this
21:29 - implementation of the bezier curve as
21:31 - this kind of nested calls to the lerp
21:33 - function is particularly efficient but
21:36 - it does uh provide
21:38 - all of the data involved in the creation
21:42 - of the curve so that you can draw all
21:43 - sorts of visualizations of all of the
21:46 - properties but ultimately i could have
21:48 - just written a single function that uses
21:50 - this exact formula which is the result
21:53 - of playing out all of these nested
21:55 - linear interpolations so i'll include as
21:57 - an extra example a version of this with
21:59 - just that formula in it well
22:03 - i think that's everything you could
22:05 - possibly want to know about the bezier
22:07 - function the bezier vertex quadratic
22:09 - vertex how to do all this stuff without
22:12 - those functions play with this make your
22:14 - own variation of it share it with me at
22:17 - thecodingtrain.com there's instructions
22:18 - there for how to do so i will take a
22:20 - look at some and feature them in a
22:22 - future live stream really though what i
22:25 - should be doing next right i got some
22:26 - spare i got like three more hours is try
22:29 - it one more level in right what if
22:31 - instead of four points i now had five i
22:34 - think that would be a quartic
22:37 - bezier
22:39 - lerp the cubics which lerp the
22:41 - quadratics i'll leave that to you please
22:43 - do that let me know how it goes in the
22:44 - comments can't wait to see goodbye see
22:47 - you in the next coding challenge
22:52 - [Music]
22:58 - you

Cleaned transcript:

hello and welcome to a very special coding challenge video this video is part of support p5 2020 i know it's 2021 but part of the campaign to raise money for the processing foundation in 2020 one of the rewards for making a donation was request a topic for a coding trade video and i'm here finally in the summer of 2021 to fulfill these requests this video was is thanks to the generous donation from jason oswald chair of computer science at germantown academy if you're not familiar with the processing foundation it is the organization that maintains p5.js processing you can learn all about the processing foundation at the processing foundation website and that's where you too can also make a donation so much of what i do on the coding terrain actually basically all of what i do on the coding trade would not be possible without the processing foundation's uh support and community and that's the anything that i could do to give back i am thrilled to be able to do so what function did jason request that i explore in this particular video it is tada the bezier function the bezier function draws a bezier curve named for the french engineer pial bezier who was working on i think modeling renault cars in the 1960s and developed this curve so in this video i both want to demonstrate the bezier function itself as it exists in p5.js as well as the math behind it what if you didn't have that function could you get that curve on the screen just through your own calculations in learning about the bezier curve your first stop should really be roone madsen's programming design systems book in the shapes chapter in the custom shapes section he has a wonderful explanation of what a bezier curve is how it works and what kinds of designs and shapes you can create in p5.js really everything that i want to cover in this video is very well explained there you might also want to wonder your way over to the wikipedia page for the psja curve there you can find all the math behind how the curve is calculated now what is most commonly referred to as a bezier curve is actually known as a cubic bezier curve there's such thing as a linear bezier curve which is really just a line a quadratic bezier curve and a cubic bezier curve the bezier function in p5 itself is the cubic bezier curve and that's what you usually find in things like adobe illustrator as well a bezier curve always has two anchor points a linear bezier curve is just a line between those two points what's special about bezier curves what makes them curvy is the fact that in addition to the anchor point there are also control points a quadratic bezier curve involves just one control point so i'm going to renumber these points now the middle point is the control point and it's like a gravitational pull if i were to pull this point down the curve would also be pulled down and if you're thinking what i'm thinking a cubic bezier curve has two control points four points in total both of them controlling the shape of the curve additionally a single bezier curve which has these four points can be extended to what's known as a bezier spline by adding more control points along a sequence we can create continuous geometry that bends according to a sequence of bezier vertices but i'm getting ahead of myself let's start by exploring the bezier function in p5 before i write the bezier function i just want to lay out where i imagine the anchor points and control points to be so i'm going to draw four points anchor point control point control point anchor point the bezier function itself takes eight arguments four pairs of x y points anchor control control anchor interestingly the bezier function natively tries to create an enclosed shape with a fill is this what you expected i always expect the curve itself to end up much closer to the control point but we'll see in a moment when i start to look at the math why it's not coming all the way up to that control point so we can see a little better let me move one with the mouse now as i move this control point around we can see how the bezier curve itself responds let me add a couple more lines one thing you might notice now is that these lines are tangent to the curve that's an important mathematical principle here in the bezier curve as an exercise i might suggest can you make your own bezier curve tool but you can move all the points around individually now before i move on to the math behind the bezier curve i think it's worth exploring what the bezier vertex function does in p5.js as well here we can see with begin shape and end shape we can set single vertices so if there are only two vertices then i have a line that connects those two vertices a bezier vertex and it's giving me an error because i haven't finished here not only sets the next point that you're defining along the way of a shape but two control points along the way that determine how you curve between this first vertex which has to be specified with the plane vertex function and the next vertex which is the last two arguments of the bezier vertex function now you see i have precisely the same curve that i had before but instead of the full bezier function i set the first anchor point with vertex and then the next two control points and the next anchor point with bezier vertex what does this allow me to do it allows me to continue this is how i can start to create more elaborate shapes like the one that you're seeing here by stringing together multiple bezier vertices and you can actually go quite far with this there's also a quadratic vertex which just involves a single control point you can have regular vertices and bezier vertices and quadratic vertices to create all sorts of possibilities and remember with a custom shape like this you can also include a fill this alone should give you plenty to explore just having the bezier function of the bezier vertex function right there in p5 opens up so many visual possibilities i recently did a coding challenge about a selfavoiding walk which connects a whole set of points with line segments and just adding the variation of connecting all these points with bezier vertices creates a very different visual quality to the output so maybe just trying to sketch where you put a lot of lines and vertices in and try using bezier curves instead but we are limited here because we're using the bezier function in p5 directly we don't have access to all the points along the way on the wikipedia page you might have noticed a diagram of the quadratic bezier curve visualized with string art we can do this with something really special another function a bonus that you're getting in this video for free the lerp function now how in the world is the bezier function related to the alert function let's go back to a simple linear bezier curve or just a line between two points i'm going to call this x0 and this one x1 the lerp function takes two values and returns back to you a value in between those two values some percentage along the way between 0 and 100 in this case 0.5 would give me the value 50 of the way there this value is often represented with the letter t i think of it as like the amount of time to get from this point all the way to this point the math for doing this is quite simple and intuitive let's imagine t is equal to 0.2 well we want to start at this point and then we want to go about 20 of the way of the distance between x0 and x1 so start at x0 and add 20 of the distance which is x1 minus x0 times 0.2 linear interpolation coming back to the wikipedia page you'll notice something interesting look at that formula right there under linear bezier curve exactly this formula let's implement this in a code example so here we have our straight line i'm using the create vector function to pair an x and y value in a single variable now there's a lot more to vectors than that but for our purposes here i just don't want to have a lot of separate x y variables so i've got p zero dot x dot p0.y p1.x and p1.y and of course i'm just using the line function to draw that line but what if instead of using line i wanted to draw the line myself as many different points along the way between those two anchor points i'll start with a for loop i'm choosing to loop t starting at zero all the way up to one hundred percent or one then let me just apply this formula and look at that there's that beautiful formula that i'm getting all of the points each an additional 10 along the way to the end adding begin shape and end shape and changing it to vertex i have my line again now while i've put in here the raw math for linear interpolation p5 has the lerp function so i believe i could get my code to be easier to read without the raw math there with just the lerp function itself and there we go now i have that line drawn with the lerp function because i'm using p5 vector i could actually use the p5 vector lerp function which will allow me to sort of consolidate the xy together but just to make everything really clear and for me be able to follow it i'm going to keep it as separate x y's for right now but i'm making a bezier curve this is just a line lerp works for linear interpolation lines how do i make a quadratic bezier from three points and lerp remember a quadratic bezier has two anchor points and one control point probably ends up something like this well what if i wanted to do linear interpolation between x0 and x1 it would look like this what if i wanted to do linear interpolation between x1 and x2 it would look like this this is the linear interpolation between these two points this is the linear interpolation between these two points what if i took and this is going to blow your mind it's like ler perception i can't say that lerpception what if i lurked this point and this point by t as well so i would be taking the if this whole thing were a and this whole thing were b i would say a plus b minus a times t so plug this whole thing into here and then plug this into here and listen to here and oh let's go back and look at the wikipedia page that's exactly what's happening there and it's working all its way out and you can see eventually we end up with this particular formula there i could go through and derive all of the math and then write it all out in my p5 code itself but i've got the lerp function there remember this is just this lerp function this one is just this lerp function and this is going to look really crazy but i can just put the lerps inside the lerp lerp the result of the first lerp with the result of the second lerp according to t this is the quadratic bezier and if your mind's going where mine's going right now just wait till we get to the cubic one let's put this into the code and see what we get so the vertex now with the math that i had before is just drawing the line between p0 and p1 let's call that x1 and y1 x2 and y2 is the lerp between p1 and p2 and then x is the lerp between x1 and x2 and look there's our quadratic bezier all with lerp i can't believe that worked i love it so much let's have p1 be controlled by the mouse well what's going on here oh no no p1 i really did something crazy there the other thing that's super interesting here is this value 0.1 that's the amount of space in between every point along the way that we're calculating i could call that the delta maybe if delta or 0.5 you can see i'm just basically getting one point in between a very small delta would be calculating lots of little points in a way i want to go back to drawing those points and incidentally what happens then if i connect x1 and y1 with x2 and y2 with a line oh look at that remember the string art on the wikipedia page that's what i've got right now i don't even need to draw these points or the bezier curve itself the bezier curve happens just by the sort of layering of all these lines and because they're all separate lines i could make the rainbow colored so for whatever reason i'm not i'm getting the first line because i'm starting at t equals zero but i'm not getting the what i expect to see as completely closing off um at t is equal to one this is because of one of those pesky little javascript things where there's like a rounding error and i'm not actually getting all the way up to t equals one oh there we go so that's a little bit of a hack solution there but i'm just gonna leave it and now i've closed off this shape oh i love it so much we're not done yet though i have got to do cubic oh boy how am i gonna do cubic well i need another point so p2 will be something like 400 comma zero i'm just gonna make something simple right now and p3 is then the last point and i'm going to write a function that's called quadratic and quadratic is going to receive three points and it's going to do exactly this and return that result as a vector i'm going to say v for vertex is the result of quadratic oh and it needs a t obviously okay great so i forgot like i can put in p3 here and we can see this is what i had before all right but i have it all in a function that's doing the quadratic bezier math always learned now what if i were to say v1 is the quadratic from p0 to p1 to p2 and v2 is the quadratic from p1 p2 to p3 then i could just say that x is lerp v1 right i need to lerp both quadratics are you with me if quadratic is lurping two lerps then cubic is lurping two quadratics find the quadratic bezier between these three points find the quadratic bezier between these three points i totally numbered them wrong x1 x2 x3 and then lurk those two curves together i've messed something up here what did i mess up oh oh oh my goodness what am i doing there we go sorry for that so this is correct in the sense that i've taken two quadratic curves and lurped between them i think it would be advisable for me to put all of this into a function called cubic which takes all the points then does the quadratic between the first three and the second three calculates the x y and returns that as a vector so quadratic is lurping two line segments p0 p1 p1 p2 cubic is lurping two quadratics now i can just say let v is cubic p0 p1 p2 p3 comma t vertex v dot x v dot y there we go so this works i've got the bezier curve drawn as a sequence of vertices but i lost the beautiful string art and the rainbow colors so let's see if i can get that back i'm going to add that stroke in there get rid of begin shape and end shape and the vertices and now let's just draw lines connecting various points so what if here in cubic i connect v1 to v2 look at that and i can see the bezier curve there as the sort of tangents of all of these lines mixed together but i could make this really crazy and i could also draw all those quadratic connections whoa i did something wrong here x1 y1 x2 y2 i got a little overly excited there there we go look at this this is two quadratic curves meeting in the middle to draw the bezier i could add a little bit of alpha here just so it's you get some blending i could go on forever here but what if i instead of just moving one point around with the mouse let me move all the points around according to just some random bouncing ball logic so very quickly i just made a class called particle that both has an x y as well as a d x and d y are x speed and y speed i could have called them the x y's move around and if it hits the edges the direction is reversed so all of these are particles now adding particle.js to index.html and i've got the exact same sketch the difference is now that these are all particle objects instead of setting one to the mouse location i can call their update function which causes it to bounce around i really don't know what i've made here but it's kind of cool let me try commenting out moving the anchor points of this bezier curve so i have some semblance of control here so now just the control points are moving i don't know what i've made here but hopefully i've opened up a door to a lot of creative possibilities that you could explore from this code i should say that i'm not so convinced that this implementation of the bezier curve as this kind of nested calls to the lerp function is particularly efficient but it does uh provide all of the data involved in the creation of the curve so that you can draw all sorts of visualizations of all of the properties but ultimately i could have just written a single function that uses this exact formula which is the result of playing out all of these nested linear interpolations so i'll include as an extra example a version of this with just that formula in it well i think that's everything you could possibly want to know about the bezier function the bezier vertex quadratic vertex how to do all this stuff without those functions play with this make your own variation of it share it with me at thecodingtrain.com there's instructions there for how to do so i will take a look at some and feature them in a future live stream really though what i should be doing next right i got some spare i got like three more hours is try it one more level in right what if instead of four points i now had five i think that would be a quartic bezier lerp the cubics which lerp the quadratics i'll leave that to you please do that let me know how it goes in the comments can't wait to see goodbye see you in the next coding challenge you
