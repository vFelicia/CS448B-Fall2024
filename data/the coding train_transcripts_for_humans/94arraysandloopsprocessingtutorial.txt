With timestamps:

00:00 - Okay, we're close now. We're close now okay um so
00:04 - Here's the thing maybe hopefully you worked on that exercise
00:07 - What do we have now? We have an array?
00:09 - It's got two spots in it. Pretend for a moment that it had three spots in it.
00:13 - And what does our code look like? It looks like this. Let's say we want to display all of the bubbles.
00:17 - We have to say bubbles index zero display, bubbles index one display, bubbles index two display. We...
00:24 - With the knowledge that we have right now the way that we've done everything we have three lines of code
00:29 - This leads us to wonder when we have a thousand bubbles will we have a thousand lines of code?
00:34 - I think I've said that in every single video up until now. Maybe I'm just repeating myself.
00:39 - I have no idea, but this is the concept. This is where we're going. This is the gold. This is very exciting.
00:45 - Pretend you're excited. Just try. I'm trying. I'm trying to pretend. I do feel genuinely excited.
00:52 - Sort of. Okay, so...
00:55 - How we gonna do this? Let's look at...
00:58 - Something we learned about a few videos back. Let's look at a loop.
01:03 - Let's... I'm gonna write out this loop for you. for
01:07 - Actually, this is exciting. I just got excited about it. Okay. int t equals 0. i is less than 3. i plus
01:15 - plus, and I'm gonna write inside this line of code. I mean this loop. Inside the structure.
01:21 - I'm going to write print
01:24 - ln i.
01:27 - Okay, let's actually... This is... this is momentous. Let's actually go and and actually and take a look at the output of this.
01:40 - println(i). When I run this...
01:45 - What's down at the bottom? Down here if you could see that. 0, 1 & 2. What prints out? First
01:51 - i is 0. Is i less... 0 less than 3? Yes it is. Print i 0. i equals 0. Then...
01:58 - Then... then i plus plus. i is 1. Is 1 less than 3?
02:02 - Yes, print i. 1. Is.... i plus plus. i is 2. Is 2 less than 3. Yes print
02:07 - i. Yes, i plus plus. i equals 3. Is 3 less than 3. No. Exit the loop.
02:11 - This is the output we get from this loop.
02:14 - Notice that.... notice notice anything similar? Take a look at these values and take a look at these values.
02:21 - This just so happens to be a structure where we have a variable called
02:25 - i... that starts at 0 then becomes 1 then becomes 2 and then completes. Well
02:30 - isn't that what we needed to do? We needed to display Bubble 0, then display Bubble 1, then display bubbles 2. What if
02:37 - instead of saying print i here. We said bubbles...
02:42 - index i dot display.
02:46 - What we've now done is we've essentially said...
02:50 - "Instead of
02:52 - individually referencing each
02:54 - index with a hard-coded number, let's use a variable that counts through all those numbers and
03:00 - repeat over and over again." Bubbles index i for when i is 0. Bubbles index
03:04 - i for when i is 1. Bubbles index i for when i is 2 and we have now condensed these three lines of code
03:11 - essentially into one line of code.
03:13 - It's 3 with the loop part, it's actually four with the print,
03:16 - but, you know,
03:18 - once this goes all the way up to 999.
03:21 - This is still going to be the same length. The only thing that's going to change here is we want i to go up to
03:26 - a thousand. So let's look. Let's actually... This is this is huge! By the way.
03:31 - You know... you... Let's put this into our program and see what happens.
03:36 - Ok
03:38 - We don't need to save that.
03:40 - So let's go down here and say ok for int i equals 0, i is less than... and right now
03:46 - we have two, i plus plus and
03:49 - we don't need both of these anymore.
03:52 - All we need... is to reference index i.
03:56 - Let's run this program and see if we get the same result.
04:02 - We get the same result. Instead of having to say: "ascend, display and top for 0.
04:07 - ascend, display and top for one. We now just say it for i.
04:11 - For i. i
04:14 - Okay
04:16 - Pretty good so far, but we still initialized each bubble individually you know, what if we want it to have...
04:25 - Different sizes? What are we going to do? Well, let's, don't worry about that right now. Let's take this
04:31 - and go up here and do the same thing for initializing
04:37 - Bubbles index i. Let's run this again. Now instead of having to initialize each one individually
04:43 - we're initializing each one in that loop. They all have the same size, but we'll get to that in a moment.
04:51 - Great. We're close five minutes 30 seconds. Actually that's probably not the time you see. That's a arbitrary time that I put up there.
04:59 - Let's change this now. Let's not get too crazy. Let's just make this 20, okay now. We got 20 bubbles.
05:05 - Let's run it. Let's run. It let's run it two bubbles. Shoot what happened?
05:10 - Well, we updated the array to have 20 spots in it, but our loop is still only looping to two.
05:15 - So we're only using two parts of the array even though the array itself has 20 spots.
05:20 - So we could fix this by changing this to 20 and this to 20.
05:27 - Now let's run this. Ah
05:30 - 20 bubbles, oh my god, okay. There's 20 bubbles now and look... by the way
05:35 - I should really point out something very very important incredibly important notice this bubble tab over here.
05:41 - We haven't touched this once.
05:43 - This whole... all of these videos about arrays, we've never touched this bubble class. We're not doing anything to the object that's different.
05:50 - It's the same object. All we're doing is figuring out how to make a list of many of them to have one or many the
05:56 - object is still the same. So...
05:59 - Let's go. Let's go for it. Let's go for let's just go for a thousand.
06:03 - And by the way, this is driving me crazy.
06:05 - I'm gonna have a thousando. I got to change the thousand here
06:07 - and then here and then here. I'm going to change twenty one thousand, twenty one thousand. This is kind of a problem because
06:12 - really you could be referencing this array in a
06:14 - zillion places in your code.
06:16 - Well one of the things about an array that I haven't pointed out to you is it has a property.
06:22 - A length property. We can actually access the length of that array directly dynamically.
06:28 - So instead of typing 20 here I can say...
06:32 - bubbles dot length and
06:35 - I can say bubbles
06:37 - dot length
06:41 - And now we have 20 bubbles. It's the same program, but watch this I could go back and say 3.
06:49 - 3 bubbles and here we go here we go. oh
06:52 - Get ready, you can ready to like stand up and applaud.
06:55 - Which you're totally not gonna do because why would you that would be weird. Um....
06:59 - We got a thousand. Oh, it's so sad.
07:02 - There's a thousand bubbles there, but it's running kind of slow. So we kind of ran into something here.
07:06 - We ran into the fact that it's slow to draw a ton of stuff on the screen.
07:11 - This is actually kind of a little bit of an aside, but an important point nonetheless. That...
07:17 - Generally speaking the thing that's going to make your Processing program run slow is drawing too much stuff.
07:23 - Not calculating too many numbers or having too many lines of code, but drawing too much stuff. Now at some pointwe'll have to have a video.
07:31 - I'm sure we could get... I know for a fact we could get this to run faster through various
07:35 - optimizations in particular using a different drawing mode with hardware acceleration which I'm just kind of rambling about right now.
07:42 - We could even just try that by the way by saying, I'm gonna change it to P2D.
07:46 - Which is just throwing a random thing into this video.
07:50 - Yeah, that's better. It's kind of working anyways it's a little bit faster.
07:54 - But more likely... so what... what... by the way let me just mention what I did.
07:57 - P2D is a
07:59 - What I've done here in the size function is in the last parameter I can specify what
08:05 - behind-the-scenes rendering engine do I want to use. This really is nothing to do with this the array topic.
08:10 - But I can't stop. Um... and... and what's the deal with that. It's, you know, you have to imagine like there's this team...
08:17 - this team of people sitting inside of Processing and
08:19 - they're just waiting to like draw the pixels on the screen. But there's like two separate teams.
08:23 - There's the default team when you don't say anything in size, and there's a P2D team.
08:27 - There's also the P3D team for when you're like: "I need to draw stuff in 3D."
08:31 - And they jump into action and start drawing stuff. P2D and P3D use the graphics card in a particular way.
08:37 - Farm out a lot of the rendering to the graphics card which can make things a lot faster.
08:41 - They use opengl which is a term you can now google look up if you're not familiar with it.
08:45 - But let's just go back and make 300 bubbles and get rid of P2D.
08:48 - And this is a nice place to sort of just like watch our bubbles.
08:53 - Uh... you know, 300. I can't tell actually if that's running slow or fast or what. I think all that alpha.
08:58 - You know it's actually slowing things down.
09:01 - This is quite...
09:03 - All that alpha makes things pretty slow.
09:05 - To make it look like a bubble. We don't need a fill and watch how much faster it's gonna be. Look at that.
09:10 - Lhat's nice and fast now I think.
09:13 - I don't know what's slow, what's fast anymore. So they don't really look like bubbles.
09:17 - But whatever. Um so... It's funny because my I did this the other day
09:21 - they really look like bubbles, and I don't know what this looks like.
09:24 - They're probably gonna shut off because I think I need to stop now. Okay, so...
09:28 - There's a.... there's okay.... There's a couple of nuances to this. Edit the last one minute out
09:32 - please. There's a couple of nuances to this.
09:34 - One is that
09:36 - when you're initializing a bunch of objects this way... You only have one line of code to initialize the objects. In essence
09:42 - we're initializing every object identically. So one thing that we can look at here is that?
09:49 - Why are they? Why are there? Why is there variation?
09:52 - It's because in the constructor a lot of the parameters are set randomly. x is a random location. The speed is a random value.
09:59 - So this is a way
10:00 - we have a wide variety and there might be some other algorithm for which you would initialize these parameters.
10:05 - But one thing that you can do that is quite common. Let's just go back to like
10:10 - 25 Bubbles for a second.
10:13 - There's 25 bubbles, okay. Let's go back and see those 25 bubbles
10:17 - What if I did this and this is going to be a little bit confusing and i
10:22 - times
10:26 - four. 4. Let's run this.
10:30 - Notice that I have
10:32 - bubbles of varying size. In fact each bubble has a particularly unique size. The first one is 0.
10:38 - The second one is four. The next one is 8. The next one is
10:42 - 12... right? The next one is 16. The next one is 20, right?
10:46 - I'm using the fact that I'm counting through bubbles 0. I'm using the fact that its index 0 to do it, assign a size.
10:52 - Index is 1 to assign a size. This is one way of doing it. I could also have just done something random right here.
11:00 - And now I have bubbles of all random sizes. So the point is
11:05 - what's happening now, and I can't believe this is - oh that stopped recording a while ago
11:10 - or just now. Alright, in a minute.
11:13 - I'm just over here. This... this stopped, but this is definitely gonna cut out of me any second. Um so try this.
11:18 - Try now, make your objects, make an array.
11:22 - Use a loop and see how do you initialize that array of objects. Are they all the same?
11:26 - Is it through random? Is it an algorithm based on counting? Give that a try and see how you do.

Cleaned transcript:

Okay, we're close now. We're close now okay um so Here's the thing maybe hopefully you worked on that exercise What do we have now? We have an array? It's got two spots in it. Pretend for a moment that it had three spots in it. And what does our code look like? It looks like this. Let's say we want to display all of the bubbles. We have to say bubbles index zero display, bubbles index one display, bubbles index two display. We... With the knowledge that we have right now the way that we've done everything we have three lines of code This leads us to wonder when we have a thousand bubbles will we have a thousand lines of code? I think I've said that in every single video up until now. Maybe I'm just repeating myself. I have no idea, but this is the concept. This is where we're going. This is the gold. This is very exciting. Pretend you're excited. Just try. I'm trying. I'm trying to pretend. I do feel genuinely excited. Sort of. Okay, so... How we gonna do this? Let's look at... Something we learned about a few videos back. Let's look at a loop. Let's... I'm gonna write out this loop for you. for Actually, this is exciting. I just got excited about it. Okay. int t equals 0. i is less than 3. i plus plus, and I'm gonna write inside this line of code. I mean this loop. Inside the structure. I'm going to write print ln i. Okay, let's actually... This is... this is momentous. Let's actually go and and actually and take a look at the output of this. println(i). When I run this... What's down at the bottom? Down here if you could see that. 0, 1 & 2. What prints out? First i is 0. Is i less... 0 less than 3? Yes it is. Print i 0. i equals 0. Then... Then... then i plus plus. i is 1. Is 1 less than 3? Yes, print i. 1. Is.... i plus plus. i is 2. Is 2 less than 3. Yes print i. Yes, i plus plus. i equals 3. Is 3 less than 3. No. Exit the loop. This is the output we get from this loop. Notice that.... notice notice anything similar? Take a look at these values and take a look at these values. This just so happens to be a structure where we have a variable called i... that starts at 0 then becomes 1 then becomes 2 and then completes. Well isn't that what we needed to do? We needed to display Bubble 0, then display Bubble 1, then display bubbles 2. What if instead of saying print i here. We said bubbles... index i dot display. What we've now done is we've essentially said... "Instead of individually referencing each index with a hardcoded number, let's use a variable that counts through all those numbers and repeat over and over again." Bubbles index i for when i is 0. Bubbles index i for when i is 1. Bubbles index i for when i is 2 and we have now condensed these three lines of code essentially into one line of code. It's 3 with the loop part, it's actually four with the print, but, you know, once this goes all the way up to 999. This is still going to be the same length. The only thing that's going to change here is we want i to go up to a thousand. So let's look. Let's actually... This is this is huge! By the way. You know... you... Let's put this into our program and see what happens. Ok We don't need to save that. So let's go down here and say ok for int i equals 0, i is less than... and right now we have two, i plus plus and we don't need both of these anymore. All we need... is to reference index i. Let's run this program and see if we get the same result. We get the same result. Instead of having to say "ascend, display and top for 0. ascend, display and top for one. We now just say it for i. For i. i Okay Pretty good so far, but we still initialized each bubble individually you know, what if we want it to have... Different sizes? What are we going to do? Well, let's, don't worry about that right now. Let's take this and go up here and do the same thing for initializing Bubbles index i. Let's run this again. Now instead of having to initialize each one individually we're initializing each one in that loop. They all have the same size, but we'll get to that in a moment. Great. We're close five minutes 30 seconds. Actually that's probably not the time you see. That's a arbitrary time that I put up there. Let's change this now. Let's not get too crazy. Let's just make this 20, okay now. We got 20 bubbles. Let's run it. Let's run. It let's run it two bubbles. Shoot what happened? Well, we updated the array to have 20 spots in it, but our loop is still only looping to two. So we're only using two parts of the array even though the array itself has 20 spots. So we could fix this by changing this to 20 and this to 20. Now let's run this. Ah 20 bubbles, oh my god, okay. There's 20 bubbles now and look... by the way I should really point out something very very important incredibly important notice this bubble tab over here. We haven't touched this once. This whole... all of these videos about arrays, we've never touched this bubble class. We're not doing anything to the object that's different. It's the same object. All we're doing is figuring out how to make a list of many of them to have one or many the object is still the same. So... Let's go. Let's go for it. Let's go for let's just go for a thousand. And by the way, this is driving me crazy. I'm gonna have a thousando. I got to change the thousand here and then here and then here. I'm going to change twenty one thousand, twenty one thousand. This is kind of a problem because really you could be referencing this array in a zillion places in your code. Well one of the things about an array that I haven't pointed out to you is it has a property. A length property. We can actually access the length of that array directly dynamically. So instead of typing 20 here I can say... bubbles dot length and I can say bubbles dot length And now we have 20 bubbles. It's the same program, but watch this I could go back and say 3. 3 bubbles and here we go here we go. oh Get ready, you can ready to like stand up and applaud. Which you're totally not gonna do because why would you that would be weird. Um.... We got a thousand. Oh, it's so sad. There's a thousand bubbles there, but it's running kind of slow. So we kind of ran into something here. We ran into the fact that it's slow to draw a ton of stuff on the screen. This is actually kind of a little bit of an aside, but an important point nonetheless. That... Generally speaking the thing that's going to make your Processing program run slow is drawing too much stuff. Not calculating too many numbers or having too many lines of code, but drawing too much stuff. Now at some pointwe'll have to have a video. I'm sure we could get... I know for a fact we could get this to run faster through various optimizations in particular using a different drawing mode with hardware acceleration which I'm just kind of rambling about right now. We could even just try that by the way by saying, I'm gonna change it to P2D. Which is just throwing a random thing into this video. Yeah, that's better. It's kind of working anyways it's a little bit faster. But more likely... so what... what... by the way let me just mention what I did. P2D is a What I've done here in the size function is in the last parameter I can specify what behindthescenes rendering engine do I want to use. This really is nothing to do with this the array topic. But I can't stop. Um... and... and what's the deal with that. It's, you know, you have to imagine like there's this team... this team of people sitting inside of Processing and they're just waiting to like draw the pixels on the screen. But there's like two separate teams. There's the default team when you don't say anything in size, and there's a P2D team. There's also the P3D team for when you're like "I need to draw stuff in 3D." And they jump into action and start drawing stuff. P2D and P3D use the graphics card in a particular way. Farm out a lot of the rendering to the graphics card which can make things a lot faster. They use opengl which is a term you can now google look up if you're not familiar with it. But let's just go back and make 300 bubbles and get rid of P2D. And this is a nice place to sort of just like watch our bubbles. Uh... you know, 300. I can't tell actually if that's running slow or fast or what. I think all that alpha. You know it's actually slowing things down. This is quite... All that alpha makes things pretty slow. To make it look like a bubble. We don't need a fill and watch how much faster it's gonna be. Look at that. Lhat's nice and fast now I think. I don't know what's slow, what's fast anymore. So they don't really look like bubbles. But whatever. Um so... It's funny because my I did this the other day they really look like bubbles, and I don't know what this looks like. They're probably gonna shut off because I think I need to stop now. Okay, so... There's a.... there's okay.... There's a couple of nuances to this. Edit the last one minute out please. There's a couple of nuances to this. One is that when you're initializing a bunch of objects this way... You only have one line of code to initialize the objects. In essence we're initializing every object identically. So one thing that we can look at here is that? Why are they? Why are there? Why is there variation? It's because in the constructor a lot of the parameters are set randomly. x is a random location. The speed is a random value. So this is a way we have a wide variety and there might be some other algorithm for which you would initialize these parameters. But one thing that you can do that is quite common. Let's just go back to like 25 Bubbles for a second. There's 25 bubbles, okay. Let's go back and see those 25 bubbles What if I did this and this is going to be a little bit confusing and i times four. 4. Let's run this. Notice that I have bubbles of varying size. In fact each bubble has a particularly unique size. The first one is 0. The second one is four. The next one is 8. The next one is 12... right? The next one is 16. The next one is 20, right? I'm using the fact that I'm counting through bubbles 0. I'm using the fact that its index 0 to do it, assign a size. Index is 1 to assign a size. This is one way of doing it. I could also have just done something random right here. And now I have bubbles of all random sizes. So the point is what's happening now, and I can't believe this is oh that stopped recording a while ago or just now. Alright, in a minute. I'm just over here. This... this stopped, but this is definitely gonna cut out of me any second. Um so try this. Try now, make your objects, make an array. Use a loop and see how do you initialize that array of objects. Are they all the same? Is it through random? Is it an algorithm based on counting? Give that a try and see how you do.
