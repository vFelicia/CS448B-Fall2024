With timestamps:

00:01 - In this video, what
I want to look at
00:03 - is how you can take
user input from a user
00:06 - and pass that user input to
an API query, get some data,
00:11 - have the data come
back into your program,
00:13 - and visualize something
on the screen.
00:14 - So, this is an
example that I built
00:17 - in the previous video,
which I'll link to below,
00:20 - and what this
example is doing is
00:22 - it's querying an API
called Open Weather Map.
00:25 - It's sending a city.
00:27 - The city that it's sending, you
can see right there, is London,
00:30 - and then it gets back
some data about London.
00:32 - What's the current temperature,
what's the current humidity?
00:35 - And in this example, I'm
pulling that data out
00:37 - into two variables and drawing
two circles on the screen.
00:40 - So first I've got
to admit something,
00:42 - which is that this is
perhaps the least visually
00:45 - interesting data visualization
anybody has ever done.
00:50 - But I'm making--
00:51 - I don't have a
visual bone, but I'm
00:56 - demonstrating the technique.
00:57 - So what you would do, hopefully,
with this technique is thinking
01:01 - of a new way of presenting
information via weather,
01:04 - or doing some type of animation,
there's lots of possibilities.
01:07 - But what I want to
show you here is,
01:09 - no matter how many
times I run this,
01:12 - it's always just going to
query the API, boom, as
01:14 - soon as the program
starts, and then
01:16 - it's going to get that
weather from London,
01:18 - and it's never going
to query the API again.
01:20 - So how do we make something that
when the user enters a city,
01:25 - that we get that--
01:28 - then we query the API
to show the information?
01:31 - The user could then
enter another city,
01:32 - we'd get that information,
query the API again.
01:35 - So how can we have
queried the API over time
01:37 - while the program is running?
01:38 - How do we think about it
as a sequence of events?
01:40 - And how do we tie
that to drawing?
01:42 - We, being me right
now, and then you.
01:45 - I got this thing
about pronouns; it's
01:47 - really like a problem that's
in my head all the time.
01:49 - I can only think about
what pronoun I use.
01:51 - But a link to something in the
description will [INAUDIBLE]
01:53 - why I think about
that all the time.
01:55 - OK, so let's make that happen.
01:57 - So first of all, I need
somewhere to get user input.
01:59 - So right now, what
this actually is
02:01 - is a webpage just with
this canvas on it.
02:03 - So what I would like to do is
add to the webpage something
02:06 - where the user
could type in some--
02:09 - type in a city.
02:10 - So guess what?
02:11 - I'm going to add--
02:12 - there is an HTML page associated
with this JavaScript code;
02:15 - it's the page that's
loading this code.
02:17 - So I'm going to go there first.
02:18 - So in this P5JS editor, I'm
going to hit the Settings
02:22 - button and say, "show sidebar."
02:24 - And there's a bunch
extra stuff in here
02:26 - that I'm not using
because this was built,
02:27 - and I'm going to go to
this index, that HTML file.
02:31 - And now, in the HTML body, what
I want to do is add paragraph,
02:37 - and then I'm going
to add an input.
02:38 - Can you see this?
02:39 - I'm going to add an input field.
02:45 - And I'm going to give it
an ID; we'll call it, city.
02:50 - And I'll put London in there,
and I'll say, "city, colon."
02:54 - So now, what I've added is just
some HTML that on the page,
02:58 - I want to see a field that a
user could type something into.
03:03 - And if we run this, you
can see, there it is, oops.
03:06 - And by the way, so I
did that incorrectly.
03:08 - Look at this.
03:09 - So what I wanted to do--
03:10 - well, if we look
back at that window--
03:13 - this was going so well
until I got confused.
03:16 - Look what's here.
03:17 - What I wanted to do is,
I wanted to have the word
03:19 - London populate that text
input field automatically,
03:24 - and I thought, I don't
know how to do this,
03:26 - but sometimes it works this way.
03:29 - I could just create
this HTML input element
03:31 - and put London in the middle.
03:33 - But I forgot that the text that
is in the text input element
03:38 - is actually its value; value
being an attribute of this HTML
03:42 - element.
03:42 - So if I want to do that,
I just need to say,
03:44 - "value equals London."
03:47 - So now, if I fix that, and let
me make this a little bit wider
03:51 - so you can kind of see it, and
I run this again, you can see,
03:54 - there we go.
03:55 - So I now have this
text input box
03:57 - at the top with the
word London in it.
04:00 - OK, we're getting somewhere.
04:02 - Now, maybe I should also
add, very briefly, I'll
04:04 - put a line break,
and then I'm going
04:07 - to add a button with an ID
called, Submit, and I'll say,
04:13 - "Submit."
04:14 - So now, I've also added
an HTML element, a button.
04:18 - So I have a text input element,
pre-populated with London,
04:22 - and I have a button.
04:23 - So when I press that
button, I'm going
04:24 - to ask the API to give me
the weather for whatever city
04:27 - is in that field.
04:29 - Excellent.
04:29 - OK, so let's look
at this, run this,
04:31 - you can see-- there we go.
04:32 - Now, I could do a better job
like styling this and putting
04:35 - line breaks in and
that sort of thing,
04:37 - but the point here is
that I could do this,
04:39 - and then I could type New York.
04:40 - And I want to see what's
in the canvas, what's
04:43 - in the drawing change based
on that current weather.
04:47 - So how do we do that?
04:49 - I'm excited.
04:50 - Are you excited?
04:51 - I don't know.
04:52 - You shouldn't be as excited,
I'm a little bit excitable, .
04:54 - It's a bit of a
problem; it gives me
04:56 - a lot of anxiety in life,
but I'm doing well today,
04:58 - and I'm happy to talk
about this with you.
05:00 - OK, so let's first--
05:02 - to answer this question, we
have to look at something.
05:05 - We have to look at this URL.
05:07 - Look at this URL,
it's a long thing.
05:08 - I figured it out in the
last video that I got.
05:10 - I have a path to the
API, I had some weather,
05:14 - I have a question mark,
q equals London, that's
05:16 - the city app ID, that's my
API key, units equal metric,
05:20 - that's giving me the
information in Celsius, right?
05:24 - So how do we--
05:26 - what do we need to do?
05:27 - And to figure this
out, I'm going
05:28 - to come over here to my
trusty friend, the whiteboard.
05:31 - Hi, trusty friend,
the whiteboard.
05:33 - And let's think about this URL.
05:36 - So most APIs, if you're
making an API query,
05:40 - it's very similar to typing
a URL into the browser.
05:43 - In fact, if I pasted that
URL into the browser,
05:45 - we are going to see the
data associated with it.
05:47 - I kind of wish I was
doing that right now.
05:49 - Let's do that for a second.
05:51 - I'll come back to
the whiteboard.
05:52 - So let me go over here, and I'm
going to copy this whole thing.
05:57 - I'm going to go
into Chrome, and I'm
06:00 - going to paste it in up here,
and I'm going to look and see.
06:02 - Look, here's the data coming in.
06:04 - And you can see that
up here is the city.
06:08 - So even if I just, in the
browser up here, if I just
06:10 - change that to New York, for
example, you can see, aha,
06:15 - now I have the
weather associated
06:17 - with New York, which
the temperature is
06:19 - about 18 degrees Celsius.
06:22 - That's about right; it's
actually quite a beautiful day.
06:24 - The sun was shining,
I don't know why,
06:26 - inside, talking to a
camera all by myself.
06:28 - I make the same stupid
joke in all my videos
06:30 - about how I'm talking
to a camera by myself,
06:32 - but it is true.
06:34 - OK, so that's what I'm doing.
06:36 - OK, so now you can see,
the way that you could
06:39 - get a different city, I could--
06:41 - over here, I could type
Tokyo, and I'm going
06:43 - to get the weather for Tokyo.
06:44 - The way that I get the
data from a different city
06:48 - is to change the URL.
06:50 - So somehow, I'm able to do
that manually in the browser.
06:53 - Somehow, I need to figure out
a way of doing that in code.
06:57 - And the reason why I was
coming over here is--
07:00 - was I not-- no, I was here.
07:03 - Was I in the right place the
whole time missing London?
07:06 - Somebody tell me in the chat.
07:07 - Hopefully, I record.
07:08 - I'll have to fix this video if--
07:10 - no, I'm over-- this is like
Charlie Chaplin, like, duh,
07:14 - duh, duh, duh, duh.
07:15 - Someone play it, download
this, edit this and that,
07:17 - add some music to it.
07:20 - Yeah, I'm not like
Charlie Chaplin.
07:21 - I wish I was like
Charlie Chaplin.
07:23 - That would be good.
07:24 - OK, so all right.
07:27 - So how do we do this?
07:28 - I don't know.
07:28 - This video, I kind of want
to rerecord this video.
07:32 - So in my code, there is a URL.
07:36 - And it's one long string.
07:39 - It starts with HTTP, it has
like openweathermapof blah blah
07:43 - blah blah blah blah.
07:44 - So somehow we have
to figure out the way
07:48 - to do this is to piece together
the URL from its components,
07:53 - one of which happens to be
dynamic, that's happening
07:57 - with input from the user.
07:58 - So for example, one way that
I could think about doing this
08:01 - is, I could say, "var api
equals http://openweath
08:14 - ermap.org/weather?
08:15 - So this is the beginning
of the API query.
08:20 - Then, I might have another
variable called, city,
08:24 - which I say--
these are strings--
08:26 - which I say is London.
08:29 - Then I might have another
variable, where I say something
08:31 - like, api key equals, you
know, my crazy API key,
08:36 - and then, when I want to
make the actual URL, which
08:40 - is the actual URL that I
will send to the API, then,
08:44 - all I need to do is say, "I want
to have the api plus the city
08:52 - plus the api key," right?
08:55 - Remember, the plus
symbol with text--
08:58 - 2 plus 2 equals 4,
but the string "two"
09:01 - plus the string "two"--
09:02 - this is actually a valid use
of air quotes, by the way.
09:05 - Usually air quotes are just
kind of an obnoxious thing,
09:07 - in general, but I
feel like, if you're
09:08 - trying to indicate a string,
this is like a time in my life
09:11 - where I'm allowed to use air
quotes; now I feel ridiculous.
09:14 - But the "two" in quotes
plus "two" in quotes is 22.
09:19 - "2" plus "2" is "22,"
not 22, but 2 2.
09:24 - So if this is 2 2,
like a thing that you
09:27 - wear when you're doing ballet.
09:29 - So this-- I'm
trying much too hard
09:32 - to be more interesting
when we talk about this.
09:35 - It's not going well;
it feels forced today.
09:38 - So this is the way that
you can put together
09:43 - the pieces of an
API call as a URL
09:49 - by having them in components.
09:50 - The whole reason I'm
talking about this
09:52 - is because now this
one can be dynamic.
09:54 - So if "city" is not
a hardcoded value,
09:56 - it's coming from the
user, and every time we
09:58 - want to query the API,
this always stays the same,
10:01 - this always stays the same,
this is the thing that changes.
10:04 - So let's go see if we
can add that to the code
10:06 - and make this work.
10:08 - I'm over here now.
10:09 - OK, so coming back
to the program--
10:12 - let me minimize this--
10:13 - coming back to the
program, we can look now
10:17 - at the components of this URL.
10:19 - So let's say what I want
is-- all the way up to here
10:21 - is going to be kind of
like the first part.
10:24 - So I'm just going to
call this the API,
10:26 - and maybe, I'll call
this the API path.
10:28 - So it's sort of like
the path of the API.
10:29 - Let's just call it API.
10:31 - Then, I'm going to make
a variable called, city,
10:34 - and I'm going to
make that London.
10:37 - Then, I'm going to make a
variable called, api key,
10:41 - and it's going to
be this whole thing.
10:46 - And then, I'm going to make
a variable called, units,
10:55 - and add this.
10:56 - So you can see now--
and I think if I
11:00 - make this a little bit
wider, unfortunately, it's
11:02 - sort of hard to fit everything
on, but now I've got it.
11:04 - I've got it.
11:05 - You can see now--
what do I have?
11:06 - I have some weird warnings here.
11:08 - Missing a semicolon somewhere.
11:11 - I don't see my--
11:12 - oh, you know what I did
is I used a double quote
11:14 - and a single quote.
11:15 - That'll fix things up.
11:16 - OK, so you can see now
that I broke the API
11:19 - call into its parts.
11:21 - So all of these things,
all of these things
11:24 - are not going to-- the
API key and units are not
11:28 - going to change.
11:29 - I always want to query
open weather map,
11:31 - I always want it in metric,
and I always have this API key.
11:33 - Now, of course,
your scenario might
11:35 - be different, but for
this particular scenario,
11:37 - the only thing that
changes is the city.
11:40 - So now, when I want to
load the data, I would say,
11:45 - "var URL equals api plus
city plus apiKey plus units.
11:51 - And now, we can see--
let's see, let's just
11:53 - make sure this still
works as before.
11:55 - It still works as before.
11:56 - So instead of having the full
API call as one long string,
12:00 - I now have it in pieces.
12:01 - And we could see, if I
changed this to do New York,
12:05 - now I'm seeing the
New York weather.
12:07 - You're just going
to have to trust
12:08 - that that's the right
values again because this
12:10 - is my pathetic little--
12:11 - I'm just drawing the
temperature and the humidity
12:13 - as circles on the screen.
12:15 - OK, so we're getting
somewhere, though, because now,
12:19 - I can move this, right?
12:22 - This API call is happening
in Setup, only in Setup.
12:26 - Where do I want
it to happen now?
12:28 - If we look at this
webpage that I've made,
12:32 - I want that API call to happen
when I click the Submit button.
12:37 - So how do I make that happen?
12:38 - I need two steps.
12:39 - One, I need access
to that DOM element.
12:41 - I need to select
that DOM element.
12:43 - Then, I also need to attach
a mouse pressed event
12:47 - to that DOM element.
12:48 - So let's add those two
things to this program.
12:52 - I'm going to say, "var button
equals select, Submit."
13:00 - So if you remember,
in the HTML page,
13:03 - the button has an ID "submit."
13:06 - So the ID is a way that I can
select that element in my code
13:10 - and do things to it.
13:11 - So now, in my code, as long
as I select by the button's ID
13:16 - submit, I can now say,
"button.mousePressed(askfor)--
13:24 - but I don't like-- (ask)--
13:27 - (weatherask)-- I don't know.
13:29 - You think of a better--
13:30 - I'm so bad at function names.
13:31 - You think of a better
function name than me.
13:33 - But the event that I
want is weather ask.
13:35 - So now, I can take this and I
can write a function called,
13:41 - weatherAsk, and I can paste
that in there, and oops,
13:47 - I need two parentheses.
13:49 - And by the way, I'm
kind of standing
13:51 - in front of my code, which is
the thing that always happens.
13:54 - So if I move this
over, that'll help you.
13:55 - So now, I selected the button,
when I press the button,
14:00 - call weatherAsk-- when
I call weatherAsk,
14:02 - ask for the weather
based on this URL
14:04 - that I've made of all these
components from the API call.
14:08 - Now run this, and every time I
hit Submit, I get that weather.
14:11 - Now notice, every time I hit
Submit, it's the same thing.
14:14 - Why?
14:15 - Because city is still
hardcoded as New York.
14:19 - But now, we can do
something really exciting.
14:22 - That's just a variable, right?
14:23 - Why not get the value of what?
14:27 - This text input field.
14:29 - Why not get what's in
that text input field
14:32 - and store that in that
particular variable?
14:34 - This is going to make things
a really, really great.
14:38 - OK, so here we go.
14:39 - So first of all, I
need a variable called,
14:42 - input, and I need to
also select that input.
14:45 - Input equals select.
14:47 - Now, I don't remember
what ID I gave it.
14:49 - I gave it an ID, city.
14:51 - So now, I need to
say, "select city."
14:55 - And then, what am I doing here?
14:57 - Instead of city being
hardcoded as New York,
15:03 - I can overwrite-- you know,
we actually don't even
15:05 - need this variable
anymore, honestly,
15:07 - because we don't want
to hardcode the city,
15:09 - so I can take that out
and actually, instead, I
15:12 - can make it a separate variable.
15:14 - But all I need to do now is
put input, not value here.
15:17 - So because I've gotten that
text input element there,
15:21 - I can get the value and
add that to my API call.
15:25 - So, again, the path to
the API doesn't change,
15:27 - my API key doesn't change, I
always want it in metric units,
15:31 - but I want the city,
that piece of it,
15:35 - to be from that
text input field.
15:36 - And here we go, it's
running, I can see it submit,
15:41 - and I've got London.
15:42 - And let's try some other
cities like Tokyo, Los Angeles,
15:51 - you can see-- ooh, it's not
very humid in Los Angeles--
15:54 - New York, Toronto.
15:59 - OK, so you get it.
16:00 - It works.
16:00 - Oh, that's great that it works.
16:02 - So this is a nice thing
to practice with APIs.
16:06 - This is kind of one obvious
way of doing things.
16:09 - You take some from the--
you take some information
16:12 - from the user and you
send that to the API,
16:14 - you get some data back,
you display the data
16:15 - back to the user.
16:16 - So I might suggest, what
else could you imagine here?
16:19 - Could you create a checkbox
and whether the checkbox
16:22 - is checked, when it's checked,
you would get Celsius,
16:25 - when it's unchecked you
would get Fahrenheit?
16:27 - So that would be
one thing to try
16:28 - to add to this as an
exercise, I think,
16:30 - if you're looking for a
technical exercise to do.
16:33 - Mostly, I would say, what
sort of data is in there?
16:35 - What more interesting way
can you display the data?
16:37 - Like, if it's raining, can you
make it rain in the canvas?
16:41 - Again, these are kind of obvious
literal visual representations
16:46 - of the data, but I
think you might also be
16:48 - able to think more creatively.
16:49 - And what I would
like to do now--
16:51 - I think that kind of
covers the whole basis.
16:53 - There's actually a
missing piece here,
16:55 - I just realized, which is
that we've done two things.
16:58 - One, we've queried
the API the moment
17:00 - the program runs,
and then, we're done.
17:02 - Now we've done the second thing.
17:03 - Anytime the user performs an
action like pressing a button,
17:06 - we query the API and
we get data back.
17:08 - A third thing would be, have
the program automatically
17:11 - query the API every so often.
17:13 - And this is something you
want to do if you have
17:15 - data that's changing a lot.
17:17 - And there's an example of an
API that gives you the latitude
17:20 - longitude of the
International Space Station,
17:23 - where it is above
the earth, and so,
17:25 - that's an API that the
space station is moving,
17:27 - I think, continuously,
that you get different data
17:29 - all the time.
17:30 - So I would also like to do it.
17:31 - Maybe I'll do that
in the next videos,
17:33 - look at how you query
an API over-- how
17:35 - do you set to do it every
100 milliseconds or every one
17:38 - second or every 30
seconds and just
17:39 - have that happen
in the background
17:41 - while an animation
is continuing?
17:43 - So I'll take a look at
that in the next video.
17:45 - And the other things
I want to do in some
17:47 - these future videos is
just look at other APIs.
17:48 - The New York Times
is on my list,
17:50 - Wordnik is on my list,
that sort of thing.
17:51 - So this ended up being
a very long video,
17:53 - it was so short
for a while, but I
17:55 - had this section in the middle
where I just wasn't sure
17:57 - if I was in the right place
and I sort of rambling
17:59 - about wearing a tutu.
18:01 - If you're still watching
this video right now,
18:03 - hashtag Schiffman tutu
or something to let
18:05 - me know you were watching
because no one's going
18:07 - to be at 18 minutes in
this video, I swear.
18:10 - OK, I think that's a thing
that maybe I'll do at the end,
18:14 - hashtag Schiffman air quotes.
18:16 - I think I need to put
Schiffman in there maybe--
18:18 - just stop watching already.
18:20 - Hopefully, you live somewhere
where it's a beautiful day.
18:22 - And even it's not a beautiful
day, being outside is nice.
18:26 - OK, even my mouse
went to sleep, that's
18:29 - how long I've been recording.

Cleaned transcript:

In this video, what I want to look at is how you can take user input from a user and pass that user input to an API query, get some data, have the data come back into your program, and visualize something on the screen. So, this is an example that I built in the previous video, which I'll link to below, and what this example is doing is it's querying an API called Open Weather Map. It's sending a city. The city that it's sending, you can see right there, is London, and then it gets back some data about London. What's the current temperature, what's the current humidity? And in this example, I'm pulling that data out into two variables and drawing two circles on the screen. So first I've got to admit something, which is that this is perhaps the least visually interesting data visualization anybody has ever done. But I'm making I don't have a visual bone, but I'm demonstrating the technique. So what you would do, hopefully, with this technique is thinking of a new way of presenting information via weather, or doing some type of animation, there's lots of possibilities. But what I want to show you here is, no matter how many times I run this, it's always just going to query the API, boom, as soon as the program starts, and then it's going to get that weather from London, and it's never going to query the API again. So how do we make something that when the user enters a city, that we get that then we query the API to show the information? The user could then enter another city, we'd get that information, query the API again. So how can we have queried the API over time while the program is running? How do we think about it as a sequence of events? And how do we tie that to drawing? We, being me right now, and then you. I got this thing about pronouns; it's really like a problem that's in my head all the time. I can only think about what pronoun I use. But a link to something in the description will [INAUDIBLE] why I think about that all the time. OK, so let's make that happen. So first of all, I need somewhere to get user input. So right now, what this actually is is a webpage just with this canvas on it. So what I would like to do is add to the webpage something where the user could type in some type in a city. So guess what? I'm going to add there is an HTML page associated with this JavaScript code; it's the page that's loading this code. So I'm going to go there first. So in this P5JS editor, I'm going to hit the Settings button and say, "show sidebar." And there's a bunch extra stuff in here that I'm not using because this was built, and I'm going to go to this index, that HTML file. And now, in the HTML body, what I want to do is add paragraph, and then I'm going to add an input. Can you see this? I'm going to add an input field. And I'm going to give it an ID; we'll call it, city. And I'll put London in there, and I'll say, "city, colon." So now, what I've added is just some HTML that on the page, I want to see a field that a user could type something into. And if we run this, you can see, there it is, oops. And by the way, so I did that incorrectly. Look at this. So what I wanted to do well, if we look back at that window this was going so well until I got confused. Look what's here. What I wanted to do is, I wanted to have the word London populate that text input field automatically, and I thought, I don't know how to do this, but sometimes it works this way. I could just create this HTML input element and put London in the middle. But I forgot that the text that is in the text input element is actually its value; value being an attribute of this HTML element. So if I want to do that, I just need to say, "value equals London." So now, if I fix that, and let me make this a little bit wider so you can kind of see it, and I run this again, you can see, there we go. So I now have this text input box at the top with the word London in it. OK, we're getting somewhere. Now, maybe I should also add, very briefly, I'll put a line break, and then I'm going to add a button with an ID called, Submit, and I'll say, "Submit." So now, I've also added an HTML element, a button. So I have a text input element, prepopulated with London, and I have a button. So when I press that button, I'm going to ask the API to give me the weather for whatever city is in that field. Excellent. OK, so let's look at this, run this, you can see there we go. Now, I could do a better job like styling this and putting line breaks in and that sort of thing, but the point here is that I could do this, and then I could type New York. And I want to see what's in the canvas, what's in the drawing change based on that current weather. So how do we do that? I'm excited. Are you excited? I don't know. You shouldn't be as excited, I'm a little bit excitable, . It's a bit of a problem; it gives me a lot of anxiety in life, but I'm doing well today, and I'm happy to talk about this with you. OK, so let's first to answer this question, we have to look at something. We have to look at this URL. Look at this URL, it's a long thing. I figured it out in the last video that I got. I have a path to the API, I had some weather, I have a question mark, q equals London, that's the city app ID, that's my API key, units equal metric, that's giving me the information in Celsius, right? So how do we what do we need to do? And to figure this out, I'm going to come over here to my trusty friend, the whiteboard. Hi, trusty friend, the whiteboard. And let's think about this URL. So most APIs, if you're making an API query, it's very similar to typing a URL into the browser. In fact, if I pasted that URL into the browser, we are going to see the data associated with it. I kind of wish I was doing that right now. Let's do that for a second. I'll come back to the whiteboard. So let me go over here, and I'm going to copy this whole thing. I'm going to go into Chrome, and I'm going to paste it in up here, and I'm going to look and see. Look, here's the data coming in. And you can see that up here is the city. So even if I just, in the browser up here, if I just change that to New York, for example, you can see, aha, now I have the weather associated with New York, which the temperature is about 18 degrees Celsius. That's about right; it's actually quite a beautiful day. The sun was shining, I don't know why, inside, talking to a camera all by myself. I make the same stupid joke in all my videos about how I'm talking to a camera by myself, but it is true. OK, so that's what I'm doing. OK, so now you can see, the way that you could get a different city, I could over here, I could type Tokyo, and I'm going to get the weather for Tokyo. The way that I get the data from a different city is to change the URL. So somehow, I'm able to do that manually in the browser. Somehow, I need to figure out a way of doing that in code. And the reason why I was coming over here is was I not no, I was here. Was I in the right place the whole time missing London? Somebody tell me in the chat. Hopefully, I record. I'll have to fix this video if no, I'm over this is like Charlie Chaplin, like, duh, duh, duh, duh, duh. Someone play it, download this, edit this and that, add some music to it. Yeah, I'm not like Charlie Chaplin. I wish I was like Charlie Chaplin. That would be good. OK, so all right. So how do we do this? I don't know. This video, I kind of want to rerecord this video. So in my code, there is a URL. And it's one long string. It starts with HTTP, it has like openweathermapof blah blah blah blah blah blah. So somehow we have to figure out the way to do this is to piece together the URL from its components, one of which happens to be dynamic, that's happening with input from the user. So for example, one way that I could think about doing this is, I could say, "var api equals http//openweath ermap.org/weather? So this is the beginning of the API query. Then, I might have another variable called, city, which I say these are strings which I say is London. Then I might have another variable, where I say something like, api key equals, you know, my crazy API key, and then, when I want to make the actual URL, which is the actual URL that I will send to the API, then, all I need to do is say, "I want to have the api plus the city plus the api key," right? Remember, the plus symbol with text 2 plus 2 equals 4, but the string "two" plus the string "two" this is actually a valid use of air quotes, by the way. Usually air quotes are just kind of an obnoxious thing, in general, but I feel like, if you're trying to indicate a string, this is like a time in my life where I'm allowed to use air quotes; now I feel ridiculous. But the "two" in quotes plus "two" in quotes is 22. "2" plus "2" is "22," not 22, but 2 2. So if this is 2 2, like a thing that you wear when you're doing ballet. So this I'm trying much too hard to be more interesting when we talk about this. It's not going well; it feels forced today. So this is the way that you can put together the pieces of an API call as a URL by having them in components. The whole reason I'm talking about this is because now this one can be dynamic. So if "city" is not a hardcoded value, it's coming from the user, and every time we want to query the API, this always stays the same, this always stays the same, this is the thing that changes. So let's go see if we can add that to the code and make this work. I'm over here now. OK, so coming back to the program let me minimize this coming back to the program, we can look now at the components of this URL. So let's say what I want is all the way up to here is going to be kind of like the first part. So I'm just going to call this the API, and maybe, I'll call this the API path. So it's sort of like the path of the API. Let's just call it API. Then, I'm going to make a variable called, city, and I'm going to make that London. Then, I'm going to make a variable called, api key, and it's going to be this whole thing. And then, I'm going to make a variable called, units, and add this. So you can see now and I think if I make this a little bit wider, unfortunately, it's sort of hard to fit everything on, but now I've got it. I've got it. You can see now what do I have? I have some weird warnings here. Missing a semicolon somewhere. I don't see my oh, you know what I did is I used a double quote and a single quote. That'll fix things up. OK, so you can see now that I broke the API call into its parts. So all of these things, all of these things are not going to the API key and units are not going to change. I always want to query open weather map, I always want it in metric, and I always have this API key. Now, of course, your scenario might be different, but for this particular scenario, the only thing that changes is the city. So now, when I want to load the data, I would say, "var URL equals api plus city plus apiKey plus units. And now, we can see let's see, let's just make sure this still works as before. It still works as before. So instead of having the full API call as one long string, I now have it in pieces. And we could see, if I changed this to do New York, now I'm seeing the New York weather. You're just going to have to trust that that's the right values again because this is my pathetic little I'm just drawing the temperature and the humidity as circles on the screen. OK, so we're getting somewhere, though, because now, I can move this, right? This API call is happening in Setup, only in Setup. Where do I want it to happen now? If we look at this webpage that I've made, I want that API call to happen when I click the Submit button. So how do I make that happen? I need two steps. One, I need access to that DOM element. I need to select that DOM element. Then, I also need to attach a mouse pressed event to that DOM element. So let's add those two things to this program. I'm going to say, "var button equals select, Submit." So if you remember, in the HTML page, the button has an ID "submit." So the ID is a way that I can select that element in my code and do things to it. So now, in my code, as long as I select by the button's ID submit, I can now say, "button.mousePressed(askfor) but I don't like (ask) (weatherask) I don't know. You think of a better I'm so bad at function names. You think of a better function name than me. But the event that I want is weather ask. So now, I can take this and I can write a function called, weatherAsk, and I can paste that in there, and oops, I need two parentheses. And by the way, I'm kind of standing in front of my code, which is the thing that always happens. So if I move this over, that'll help you. So now, I selected the button, when I press the button, call weatherAsk when I call weatherAsk, ask for the weather based on this URL that I've made of all these components from the API call. Now run this, and every time I hit Submit, I get that weather. Now notice, every time I hit Submit, it's the same thing. Why? Because city is still hardcoded as New York. But now, we can do something really exciting. That's just a variable, right? Why not get the value of what? This text input field. Why not get what's in that text input field and store that in that particular variable? This is going to make things a really, really great. OK, so here we go. So first of all, I need a variable called, input, and I need to also select that input. Input equals select. Now, I don't remember what ID I gave it. I gave it an ID, city. So now, I need to say, "select city." And then, what am I doing here? Instead of city being hardcoded as New York, I can overwrite you know, we actually don't even need this variable anymore, honestly, because we don't want to hardcode the city, so I can take that out and actually, instead, I can make it a separate variable. But all I need to do now is put input, not value here. So because I've gotten that text input element there, I can get the value and add that to my API call. So, again, the path to the API doesn't change, my API key doesn't change, I always want it in metric units, but I want the city, that piece of it, to be from that text input field. And here we go, it's running, I can see it submit, and I've got London. And let's try some other cities like Tokyo, Los Angeles, you can see ooh, it's not very humid in Los Angeles New York, Toronto. OK, so you get it. It works. Oh, that's great that it works. So this is a nice thing to practice with APIs. This is kind of one obvious way of doing things. You take some from the you take some information from the user and you send that to the API, you get some data back, you display the data back to the user. So I might suggest, what else could you imagine here? Could you create a checkbox and whether the checkbox is checked, when it's checked, you would get Celsius, when it's unchecked you would get Fahrenheit? So that would be one thing to try to add to this as an exercise, I think, if you're looking for a technical exercise to do. Mostly, I would say, what sort of data is in there? What more interesting way can you display the data? Like, if it's raining, can you make it rain in the canvas? Again, these are kind of obvious literal visual representations of the data, but I think you might also be able to think more creatively. And what I would like to do now I think that kind of covers the whole basis. There's actually a missing piece here, I just realized, which is that we've done two things. One, we've queried the API the moment the program runs, and then, we're done. Now we've done the second thing. Anytime the user performs an action like pressing a button, we query the API and we get data back. A third thing would be, have the program automatically query the API every so often. And this is something you want to do if you have data that's changing a lot. And there's an example of an API that gives you the latitude longitude of the International Space Station, where it is above the earth, and so, that's an API that the space station is moving, I think, continuously, that you get different data all the time. So I would also like to do it. Maybe I'll do that in the next videos, look at how you query an API over how do you set to do it every 100 milliseconds or every one second or every 30 seconds and just have that happen in the background while an animation is continuing? So I'll take a look at that in the next video. And the other things I want to do in some these future videos is just look at other APIs. The New York Times is on my list, Wordnik is on my list, that sort of thing. So this ended up being a very long video, it was so short for a while, but I had this section in the middle where I just wasn't sure if I was in the right place and I sort of rambling about wearing a tutu. If you're still watching this video right now, hashtag Schiffman tutu or something to let me know you were watching because no one's going to be at 18 minutes in this video, I swear. OK, I think that's a thing that maybe I'll do at the end, hashtag Schiffman air quotes. I think I need to put Schiffman in there maybe just stop watching already. Hopefully, you live somewhere where it's a beautiful day. And even it's not a beautiful day, being outside is nice. OK, even my mouse went to sleep, that's how long I've been recording.
