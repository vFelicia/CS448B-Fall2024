With timestamps:

00:01 - Welcome to a new multipart
series about Perlin noise
00:04 - and creating a 2D Perlin
noise field, which you can
00:07 - visualize in a variety of ways.
00:09 - Eventually maybe we'll make
a nice rainbow colored one.
00:11 - So ultimately at the end
of this video series, which
00:14 - is going to be two or
three short videos,
00:16 - I want to show you how to
make this particular project.
00:18 - But before I can
get there, I just
00:20 - want to answer the question
in this video, what
00:22 - is Perlin noise, and do a quick
p5.js JavaScript sketch that
00:27 - shows you the basics of it.
00:28 - So let me come over here
and make a little diagram.
00:32 - So there are two functions
in the p5.js library.
00:36 - This is also in
processing as well.
00:38 - There are more
than two functions.
00:40 - But there's two functions
that I'm thinking of right now
00:42 - that are relevant
to this discussion.
00:43 - One function is called random.
00:49 - Another function
is called noise.
00:53 - Now, this is a
little bit confusing,
00:55 - because in truth, the
word "noise" really
00:58 - just means random.
00:59 - If you think about audio
noise, the [STATIC] sound.
01:03 - It's kind of like
random audio gibberish.
01:05 - But the noise function in
both processing and p5.js
01:09 - refers to a particular kind
of noise called Perlin noise.
01:15 - Now, Perlin noise is named
for a computer scientist named
01:20 - Ken Perlin who was
developing algorithms
01:24 - and has been developing
algorithms for many years,
01:27 - but in particular, in the
1980s for a film called Tron.
01:32 - Now, I'm not
referring to whatever
01:34 - that recent one was called.
01:35 - I don't even know if
it's recent anymore--
01:37 - Tron Legacy, I think--
the original Tron
01:38 - from sometime in the 1980s.
01:40 - And one of the things that
you might have noticed
01:42 - in computer-generated things
that you experience is,
01:46 - maybe there is a-- in
the scene, there's--
01:50 - does this show my
horrific artistic talent?
01:54 - There is a vase
sitting on a table.
01:57 - And at one point in computer
graphics, there's this--
02:00 - OK, so this is [INAUDIBLE].
02:02 - There's this idea of a texture--
02:03 - I should re-record this.
02:04 - But I'm going to keep going.
02:05 - There's this idea
of a texture, which
02:07 - is this stuff that is painted
onto that three-dimensional
02:11 - form.
02:11 - Now, at one point,
computer animators
02:13 - had to hand-make these
textures if you wanted the vase
02:16 - to appear like-- look
like wood or marble.
02:18 - I don't know why you'd want
a wood vase, but whatever.
02:20 - The point is, Perlin
noise was originally
02:23 - developed for procedural
textures of objects, meaning,
02:29 - how do I create--
02:31 - I could-- as an
artist, I could render
02:35 - some sort of wood-like texture
just with my pencil and paper,
02:39 - and scan it, or use some fancy
Photoshop Illustrator program.
02:43 - Or I could have
an algorithm that
02:45 - generates all the pixels to
make that kind of texture.
02:49 - So that's what Perlin noise
was originally developed for,
02:52 - procedural textures for
three-dimensional objects
02:55 - in computer graphics.
02:58 - Now, Ken Perlin actually won
an Academy Award for that.
03:01 - I don't know why--
03:01 - that's my terrible
drawing of an Oscar
03:03 - that looks nothing like an
Oscar for technical achievement.
03:07 - So that's a little
bit about back story.
03:09 - Now, circling back, I
mentioned there is a noise
03:15 - function and a random function.
03:17 - The noise function gives
you Perlin noise values.
03:21 - So hold off on the idea
of procedural textures.
03:25 - I have an eraser here.
03:27 - I'm going to come
back to that in part 2
03:29 - when I look at
two-dimensional Perlin noise.
03:31 - But in this particular
video, I am just
03:34 - going to talk about
one-dimensional Perlin noise.
03:38 - So what do I mean
by one dimensional?
03:40 - Let's think about numbers
over in a single dimension.
03:44 - Let's just pretend for a moment
that that dimension is time.
03:47 - It's a useful way of
thinking about it.
03:49 - So this is the axis
of time-- getting
03:52 - very deep into philosophy here.
03:54 - This is an x-axis of time.
03:56 - Let's think about
the random function.
03:59 - So let's say every two--
04:01 - at 60 frames per second,
like an animation,
04:04 - like a p5.js or
processing sketch,
04:06 - I'm calling the random function.
04:08 - I'm going to get a
random value over time--
04:11 - random, random, random, random,
random, random, random, random,
04:14 - random.
04:15 - OK, I can't pick random numbers,
because I'm a human being.
04:18 - But you can imagine, I might
be getting random numbers
04:21 - between 0 and 1 over time.
04:26 - So that's all right.
04:27 - And this will look if
I were to graph it,
04:28 - like some kind of big mess.
04:29 - Now, Perlin noise
in one dimension
04:33 - has the same sort of idea.
04:36 - Let's say I want to
get random numbers.
04:38 - This pen is terrible.
04:39 - I don't even know if
you can read this.
04:42 - Time out.
04:45 - Back with a new marker.
04:46 - This isn't so great, but
let's see how this does.
04:48 - So I'm going to draw now
the x-axis of time in blue.
04:53 - I wish I had a pink
one or a purple one.
04:54 - Those are my favorite colors,
in case you were wondering.
04:57 - But I don't.
04:59 - And I want now-- instead
of random values,
05:02 - I want Perlin noise
values over time.
05:05 - So I'm going to draw you in a
visual approximation of what it
05:08 - might look like,
something like this.
05:12 - So the idea here--
and the idea here
05:15 - is that ultimately at its
core, Perlin noise gives you
05:18 - smooth, random numbers.
05:20 - What do I mean by smooth?
05:22 - I mean that a random
number that you
05:24 - might pick at any
point in time is
05:26 - related to the random
number you might pick later,
05:29 - a moment later, or
the random number you
05:31 - picked a moment before.
05:33 - Whereas in-- so this is random.
05:35 - This is noise, Perlin
noise, that is.
05:38 - In the core random algorithm,
the actual random algorithm
05:42 - itself, those numbers
aren't related at all.
05:45 - You pick-- I'm picking random
numbers between 0 and 10--
05:48 - 9, 2, 7, 6, 1, 9,
4, 8, 9, 2, 1, 3.
05:54 - I pick 9 a lot apparently.
05:56 - But with Perlin noise, I
might pick numbers like this--
05:59 - 2, 3, 4, 3, 4, 5, 6, 5, 4, 5,
6, 7, 5, 6, 7, 5, 6, 7, 8, 9,
06:08 - 8, 7, 6.
06:09 - Boy, this is like Perlin
noise performance art.
06:12 - I won't do it again.
06:13 - But that's what that was like.
06:14 - I'm going to do a whole separate
video, which is me reading
06:16 - aloud Perlin noise values.
06:18 - I'm sure people
want to watch that.
06:20 - Maybe I'll even sing them.
06:21 - Anyway, so you get the idea.
06:23 - That's the core difference.
06:24 - Now that's how it works.
06:26 - Now, there's two more pieces
I really want to get to here.
06:29 - One is, OK, I get it.
06:31 - I get the difference
conceptually.
06:33 - How are these values generated?
06:34 - Well, actually,
they're generated--
06:37 - just ultimately,
Perlin noise is just
06:40 - a lot of math on top of the
actual random function itself.
06:43 - So let's look at this.
06:45 - And I'm going to grab
a paper towel here.
06:47 - And I'm going to
explain to you--
06:49 - I put my best effort how the
actual Perlin noise algorithm
06:54 - works underneath the hood.
06:56 - Now, Ken Perlin has revised
the algorithm several times
07:00 - over the years--
07:01 - I don't know, several one or two
times, three times, who knows.
07:04 - And you can kind of--
07:04 - I'll try to post some links
to different versions.
07:07 - There's update-- But
I'm going to give you
07:09 - the basic gist of it.
07:10 - So let's say-- so let's
go back to random.
07:14 - Let's say I'm going to pick
random values over time
07:19 - to start with.
07:20 - And what I'm going
to do is actually
07:21 - say I'm going to pick them
every 10 units of time--
07:28 - 10, 20, 30, 40.
07:30 - So I'm going to
pick-- and I'm going
07:32 - to pick those random
values with some amplitude
07:35 - between something
like 0 and 100.
07:38 - These are all made-up values.
07:41 - So I pick a random number here.
07:42 - Then I pick a
random number here.
07:43 - Then I pick a
random number here.
07:45 - And then I pick a
random number here.
07:46 - Now, the next thing
I want to do is
07:50 - do an interpolation function.
07:52 - What is an
interpolation function?
07:53 - Well, here are some numbers.
07:56 - Here's me interpolating
between them.
07:58 - That's like linear
interpolation, I think.
07:59 - I just draw a line
between the values.
08:01 - But maybe I want to do
something a little nicer.
08:04 - And a one possibility, a
one kind of interpolation,
08:07 - is called cosine interpolation,
or sine interpolation probably,
08:10 - which means, let me draw a nice
curve between these values.
08:15 - So here is the start of
my Perlin noise function.
08:19 - And let's just
pretend I also had
08:20 - to pick a value at 0, which
let's say I picked this one.
08:23 - So now I'm going
to do that again.
08:26 - This time, however, I'm going
to pick those random values
08:29 - every five units of time--
08:30 - 5, 10, 15, 20, 25, 30, 35--
08:36 - I don't know why I'm writing--
08:37 - 40.
08:37 - And instead of picking
between 0 and 100,
08:40 - I'm just going to
pick between 0 and 50.
08:43 - So let me pick random values.
08:47 - And now, just using
a random function,
08:51 - now I'm going to do this.
08:53 - Now let me do that
one more time.
08:54 - And I'm going to pick them
every two and 1/2 units of time.
08:59 - And I'm just going to
go between 0 and 25.
09:01 - And now I'm going to just--
09:03 - and it's going to be
something like this.
09:04 - Now, what if I were to do this
possibly eight times, 16 times,
09:08 - 25 times, however
many times I want,
09:11 - and each time I'm having
essentially the amount of time
09:17 - that passes before I
pick a new random number
09:19 - and I'm also having
that amplitude?
09:21 - Having-- is that a--
09:22 - I'm having it.
09:23 - I'm having it for lunch.
09:26 - But I'm halfing it-- having it.
09:28 - I'm dividing it
by half, whatever.
09:31 - What then if I take all of
these and add them together?
09:36 - Now, I'm going to lose
my mind here really
09:38 - trying to do this
visually accurately.
09:40 - But let me just--
09:42 - let's just say for right now
I'm going to take this graph
09:45 - and add it with this graph.
09:46 - I'm going to get something
that looks like this.
09:51 - It has the essential--
09:54 - I'm adding these values
together with these values.
09:57 - It has this same basic quality.
10:00 - It looks kind of like
that original shape.
10:02 - But there's lots of
little variations
10:04 - based on these little
tiny variations.
10:06 - And this is essentially how
Perlin noise is calculated.
10:09 - And these, by the way,
are known as octaves.
10:12 - So Perlin noise is calculated
over a number of octaves.
10:15 - And essentially it's a
bunch of random waveforms.
10:18 - And those waveforms, their
period and their amplitude
10:21 - change over those octaves
and get added together.
10:24 - And in that sense, it has
a fractal-like quality.
10:26 - You might have to go back
and find some of my videos
10:28 - about fractals if that concept
doesn't make sense to you.
10:31 - But fractal is this idea
of self-similar shape,
10:34 - meaning at any zoom level,
it's the same thing.
10:36 - And because we're getting
finer and finer detail
10:39 - as we go through these
different octaves,
10:41 - if we were to zoom in
here and blow that up,
10:45 - we might see something that
looks something like this,
10:47 - almost like that original one.
10:48 - So Perlin noise, this is
really how it's calculated.
10:52 - OK.
10:53 - I'm glad I'm almost
done with this video,
10:55 - because in the next
video, I'm just
10:56 - going to dive in and write
code to sort of visualize
10:58 - how it works.
10:59 - But let's just make
one more point here.
11:03 - Actually, you know what?
11:04 - I'm done with this video.
11:06 - This is the end of
this first video,
11:07 - which is just explaining
the history of Perlin noise
11:10 - and how the algorithm works.
11:12 - The next video I
need to look at--
11:14 - OK, well, if this is how
I'm getting the Perlin noise
11:16 - values, how does that tie
into the noise function?
11:19 - How do I call it?
11:20 - And how do I get
those values back?
11:21 - And how I use them in code?
11:22 - OK, this concludes
this particular video,
11:25 - which may or may not have
a variety of mistakes
11:27 - and confusing aspects to them.
11:29 - And you, the internet,
will let me know.
11:31 - Thank you for watching.

Cleaned transcript:

Welcome to a new multipart series about Perlin noise and creating a 2D Perlin noise field, which you can visualize in a variety of ways. Eventually maybe we'll make a nice rainbow colored one. So ultimately at the end of this video series, which is going to be two or three short videos, I want to show you how to make this particular project. But before I can get there, I just want to answer the question in this video, what is Perlin noise, and do a quick p5.js JavaScript sketch that shows you the basics of it. So let me come over here and make a little diagram. So there are two functions in the p5.js library. This is also in processing as well. There are more than two functions. But there's two functions that I'm thinking of right now that are relevant to this discussion. One function is called random. Another function is called noise. Now, this is a little bit confusing, because in truth, the word "noise" really just means random. If you think about audio noise, the [STATIC] sound. It's kind of like random audio gibberish. But the noise function in both processing and p5.js refers to a particular kind of noise called Perlin noise. Now, Perlin noise is named for a computer scientist named Ken Perlin who was developing algorithms and has been developing algorithms for many years, but in particular, in the 1980s for a film called Tron. Now, I'm not referring to whatever that recent one was called. I don't even know if it's recent anymore Tron Legacy, I think the original Tron from sometime in the 1980s. And one of the things that you might have noticed in computergenerated things that you experience is, maybe there is a in the scene, there's does this show my horrific artistic talent? There is a vase sitting on a table. And at one point in computer graphics, there's this OK, so this is [INAUDIBLE]. There's this idea of a texture I should rerecord this. But I'm going to keep going. There's this idea of a texture, which is this stuff that is painted onto that threedimensional form. Now, at one point, computer animators had to handmake these textures if you wanted the vase to appear like look like wood or marble. I don't know why you'd want a wood vase, but whatever. The point is, Perlin noise was originally developed for procedural textures of objects, meaning, how do I create I could as an artist, I could render some sort of woodlike texture just with my pencil and paper, and scan it, or use some fancy Photoshop Illustrator program. Or I could have an algorithm that generates all the pixels to make that kind of texture. So that's what Perlin noise was originally developed for, procedural textures for threedimensional objects in computer graphics. Now, Ken Perlin actually won an Academy Award for that. I don't know why that's my terrible drawing of an Oscar that looks nothing like an Oscar for technical achievement. So that's a little bit about back story. Now, circling back, I mentioned there is a noise function and a random function. The noise function gives you Perlin noise values. So hold off on the idea of procedural textures. I have an eraser here. I'm going to come back to that in part 2 when I look at twodimensional Perlin noise. But in this particular video, I am just going to talk about onedimensional Perlin noise. So what do I mean by one dimensional? Let's think about numbers over in a single dimension. Let's just pretend for a moment that that dimension is time. It's a useful way of thinking about it. So this is the axis of time getting very deep into philosophy here. This is an xaxis of time. Let's think about the random function. So let's say every two at 60 frames per second, like an animation, like a p5.js or processing sketch, I'm calling the random function. I'm going to get a random value over time random, random, random, random, random, random, random, random, random. OK, I can't pick random numbers, because I'm a human being. But you can imagine, I might be getting random numbers between 0 and 1 over time. So that's all right. And this will look if I were to graph it, like some kind of big mess. Now, Perlin noise in one dimension has the same sort of idea. Let's say I want to get random numbers. This pen is terrible. I don't even know if you can read this. Time out. Back with a new marker. This isn't so great, but let's see how this does. So I'm going to draw now the xaxis of time in blue. I wish I had a pink one or a purple one. Those are my favorite colors, in case you were wondering. But I don't. And I want now instead of random values, I want Perlin noise values over time. So I'm going to draw you in a visual approximation of what it might look like, something like this. So the idea here and the idea here is that ultimately at its core, Perlin noise gives you smooth, random numbers. What do I mean by smooth? I mean that a random number that you might pick at any point in time is related to the random number you might pick later, a moment later, or the random number you picked a moment before. Whereas in so this is random. This is noise, Perlin noise, that is. In the core random algorithm, the actual random algorithm itself, those numbers aren't related at all. You pick I'm picking random numbers between 0 and 10 9, 2, 7, 6, 1, 9, 4, 8, 9, 2, 1, 3. I pick 9 a lot apparently. But with Perlin noise, I might pick numbers like this 2, 3, 4, 3, 4, 5, 6, 5, 4, 5, 6, 7, 5, 6, 7, 5, 6, 7, 8, 9, 8, 7, 6. Boy, this is like Perlin noise performance art. I won't do it again. But that's what that was like. I'm going to do a whole separate video, which is me reading aloud Perlin noise values. I'm sure people want to watch that. Maybe I'll even sing them. Anyway, so you get the idea. That's the core difference. Now that's how it works. Now, there's two more pieces I really want to get to here. One is, OK, I get it. I get the difference conceptually. How are these values generated? Well, actually, they're generated just ultimately, Perlin noise is just a lot of math on top of the actual random function itself. So let's look at this. And I'm going to grab a paper towel here. And I'm going to explain to you I put my best effort how the actual Perlin noise algorithm works underneath the hood. Now, Ken Perlin has revised the algorithm several times over the years I don't know, several one or two times, three times, who knows. And you can kind of I'll try to post some links to different versions. There's update But I'm going to give you the basic gist of it. So let's say so let's go back to random. Let's say I'm going to pick random values over time to start with. And what I'm going to do is actually say I'm going to pick them every 10 units of time 10, 20, 30, 40. So I'm going to pick and I'm going to pick those random values with some amplitude between something like 0 and 100. These are all madeup values. So I pick a random number here. Then I pick a random number here. Then I pick a random number here. And then I pick a random number here. Now, the next thing I want to do is do an interpolation function. What is an interpolation function? Well, here are some numbers. Here's me interpolating between them. That's like linear interpolation, I think. I just draw a line between the values. But maybe I want to do something a little nicer. And a one possibility, a one kind of interpolation, is called cosine interpolation, or sine interpolation probably, which means, let me draw a nice curve between these values. So here is the start of my Perlin noise function. And let's just pretend I also had to pick a value at 0, which let's say I picked this one. So now I'm going to do that again. This time, however, I'm going to pick those random values every five units of time 5, 10, 15, 20, 25, 30, 35 I don't know why I'm writing 40. And instead of picking between 0 and 100, I'm just going to pick between 0 and 50. So let me pick random values. And now, just using a random function, now I'm going to do this. Now let me do that one more time. And I'm going to pick them every two and 1/2 units of time. And I'm just going to go between 0 and 25. And now I'm going to just and it's going to be something like this. Now, what if I were to do this possibly eight times, 16 times, 25 times, however many times I want, and each time I'm having essentially the amount of time that passes before I pick a new random number and I'm also having that amplitude? Having is that a I'm having it. I'm having it for lunch. But I'm halfing it having it. I'm dividing it by half, whatever. What then if I take all of these and add them together? Now, I'm going to lose my mind here really trying to do this visually accurately. But let me just let's just say for right now I'm going to take this graph and add it with this graph. I'm going to get something that looks like this. It has the essential I'm adding these values together with these values. It has this same basic quality. It looks kind of like that original shape. But there's lots of little variations based on these little tiny variations. And this is essentially how Perlin noise is calculated. And these, by the way, are known as octaves. So Perlin noise is calculated over a number of octaves. And essentially it's a bunch of random waveforms. And those waveforms, their period and their amplitude change over those octaves and get added together. And in that sense, it has a fractallike quality. You might have to go back and find some of my videos about fractals if that concept doesn't make sense to you. But fractal is this idea of selfsimilar shape, meaning at any zoom level, it's the same thing. And because we're getting finer and finer detail as we go through these different octaves, if we were to zoom in here and blow that up, we might see something that looks something like this, almost like that original one. So Perlin noise, this is really how it's calculated. OK. I'm glad I'm almost done with this video, because in the next video, I'm just going to dive in and write code to sort of visualize how it works. But let's just make one more point here. Actually, you know what? I'm done with this video. This is the end of this first video, which is just explaining the history of Perlin noise and how the algorithm works. The next video I need to look at OK, well, if this is how I'm getting the Perlin noise values, how does that tie into the noise function? How do I call it? And how do I get those values back? And how I use them in code? OK, this concludes this particular video, which may or may not have a variety of mistakes and confusing aspects to them. And you, the internet, will let me know. Thank you for watching.
