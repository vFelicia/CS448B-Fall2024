With timestamps:

00:01 - Welcome to another working
with data and APIs video.
00:04 - I have one more thing
to demonstrate to you.
00:06 - I mean, the truth
of the matter is
00:07 - there's probably hundred
thousands, tens of thousands,
00:10 - millions of things that I've
missed that I should cover
00:13 - that I could get to that
I don't even know about
00:15 - that I will hear from you.
00:16 - And so I look forward to hearing
all about in the comments
00:18 - and hopefully
returning and making
00:19 - more videos that continue these
projects and this discussion.
00:23 - But before I go, at
least in this first round
00:26 - of what I'm making right now,
I'm gonna show you one thing.
00:28 - How to deploy your
project to a server.
00:30 - Put it out in the world so that
people could access and use it.
00:33 - There's an inherent problem
with me even making this video,
00:35 - because there's no
one way to do this.
00:37 - I mean, you could
build your own server,
00:39 - get your own internet
connection, get an IP address,
00:42 - create your own web
server on a Raspberry Pi
00:44 - even, put it somewhere out
in the forest wirelessly.
00:47 - Who knows?
00:48 - Attach it to a space station.
00:49 - But what I want to
look for here at least,
00:52 - I want to look at
least two scenarios
00:54 - of using a commercial
hosting service that
00:57 - allows you to deploy your node
code and have it run somewhere.
01:00 - And we'll give you a URL
so that you can actually
01:02 - see it in the browser.
01:03 - And the two services I want to
show you are Glitch and Heroku.
01:07 - Glitch, as it says
on their website,
01:09 - is the friendly
community where you'll
01:10 - find the app of your dreams.
01:12 - I love Glitch.
01:13 - It's an amazing code
editor in the browser
01:16 - that you can write node
code, client JavaScript.
01:19 - You can build all sorts of apps.
01:20 - You can share them.
01:21 - You can remix them.
01:22 - It's colorful.
01:22 - It's friendly.
01:23 - You can ask for help.
01:24 - There's so much there in Glitch.
01:25 - And honestly, I could imagine
a version of these tutorials
01:28 - where I just started
with the first day
01:30 - opening up Glitch and
building the project there.
01:32 - But since I've already
built the project,
01:34 - I'm going to show you how to
import it right into glitch
01:36 - and run it there.
01:37 - After that, I'm
going to show you
01:39 - another service called Heroku.
01:41 - It's a cloud platform that lets
you deploy web applications.
01:44 - It has a pretty reasonable
free tier that I can get up
01:46 - and running with easily.
01:48 - This is not sponsored content.
01:50 - There are lots of other
servers that I've used.
01:52 - Amazon Web Services,
DigitalOcean
01:54 - are just a couple to name a few.
01:55 - And I'm happy to come back and
show some other ones in a video
01:58 - as well if that might
be something useful.
02:00 - Or leave in the comments
what type of cloud server
02:03 - you like to deploy
your applications on.
02:04 - There's also this thing
called serverless programming.
02:07 - We'll come back to
that another time.
02:09 - Let's start off
here with Glitch.
02:10 - So here I am logged
into my Glitch account.
02:12 - My Glitch account is actually
linked to my GitHub account,
02:14 - although you don't
need to GitHub account
02:15 - to sign up and start
working with Glitch.
02:17 - I could make a new project,
and I could actually
02:19 - make a blank project.
02:21 - Hello express.
02:22 - This would have been
a good place for me
02:23 - to start when I was back in the
day I didn't have anything yet
02:25 - and I could just make a
new simple express app
02:27 - and build on top of that.
02:28 - But I'm going to do something
a little bit different.
02:31 - I'm going to use this
clone from Git Repo.
02:33 - Since I've already gone
through all the motions
02:35 - of writing my code
locally on the computer
02:37 - and then pushing it to
GitHub, I could just
02:39 - grab it and put it here.
02:41 - But before I do that, I
better make one more change.
02:44 - There's something that I
missed that's rather important.
02:46 - So in my code, I have hard
coded in here the port 3000.
02:53 - That's the port that
I've arbitrarily
02:54 - choosing to run and test the
stuff locally on this computer.
02:58 - But any type of web
hosting platform
03:00 - is probably going to generate
a port automatically.
03:04 - And there are some standard
ports for hosting up a website.
03:07 - So I actually want to pull that
from the environment variable.
03:10 - And this will be maybe
an environment variable
03:12 - that I don't actually
set but that already
03:14 - comes with the platform.
03:16 - So not necessarily something
that I put in here,
03:18 - but something that's just
going to be present whenever
03:20 - I'm on that platform itself.
03:22 - So let me go back
to the code, and let
03:24 - me add a const port equals
process dot env dot port.
03:29 - Now here's the thing.
03:30 - Now when I run this-- and I'm
going to put this port here,
03:33 - and I'm going to just change
the string to starting server at
03:36 - and then I'm just
going to say port.
03:40 - So this is some changes
I made to the code.
03:42 - OK, so here's the thing.
03:44 - This now, if I go and
try to run this locally.
03:50 - Boom.
03:50 - It doesn't have a port number.
03:52 - Or do I actually
have another error?
03:54 - Oh, that's a different error.
03:55 - I've got some syntax error.
03:57 - Let me fix that.
03:57 - Always getting syntax errors.
03:59 - Oh, I don't know.
03:59 - I lost my curly brackets.
04:00 - I'm not sure what I did here.
04:01 - There we go.
04:02 - Yes.
04:03 - Listen at that port and
start the ser-- then
04:05 - I log, starting the
server at that port.
04:07 - Sorry about that.
04:07 - Let's try that again.
04:10 - Starting server at undefined.
04:12 - So I don't even know how would
I possibly-- there's no port.
04:15 - I can't access the server.
04:17 - So this is where I
could do something nice.
04:19 - I could say, if there is
no port in an environment
04:21 - variable or 3000.
04:24 - So now if I run the server
again, it's starting at 3000.
04:27 - I can go back and look at
the project running locally
04:31 - at port 3000.
04:34 - And here it is.
04:34 - OK.
04:35 - But I needed to do
this, because I want now
04:38 - want Glitch to take
care of the port for me.
04:42 - I don't want to be
in charge of that.
04:43 - Now, since I'm going to be
getting the code from GitHub
04:46 - onto Glitch, I need to make
sure I take that change
04:49 - that I just made locally
and push it onto GitHub.
04:54 - So I'm going to add and
I'm gonna commit port
04:57 - from environment variable.
05:01 - And then I'm gonna say Git
push origin master, which
05:04 - sends it up to GitHub itself.
05:06 - This is getting a
little bit confusing,
05:08 - so let's make a quick diagram
just to understand the pieces.
05:11 - So I've got my laptop here.
05:13 - And so I've been writing
all the code here,
05:15 - the server and the client.
05:16 - Now what I've done is I have
now taken all that code,
05:20 - and I have put it onto GitHub.
05:23 - And these are now linked.
05:24 - I can always push, which
is sending code this way,
05:28 - or I can pull, which is
sending code this way.
05:31 - So this is really the
thing that I've set up.
05:33 - But I want to add a
third component here.
05:36 - So that third component, I'm
going to add Glitch as one.
05:40 - I'm also going to
show you, I'm also
05:41 - eventually going to add Heroku.
05:43 - Now, the difference
with Glitch and Heroku
05:45 - is this is actually
a code editor.
05:47 - So once I get the
code from GitHub
05:50 - and place it onto
Glitch, this is
05:52 - kind of a connection that
doesn't need to persist.
05:54 - And I can just--
it's just there.
05:56 - I can work on it.
05:57 - I just want a quick way of
getting this stuff on Glitch.
05:59 - I could have uploaded
my files or copy paste
06:01 - or been working there all along.
06:02 - But something
different will happen
06:04 - once I put it on
Heroku, which I will
06:05 - keep all of these things sort
of linked so I can continue
06:08 - to do the development
here on my laptop
06:10 - and push those changes through.
06:12 - So let's come back to Glitch
and let's look at-- click
06:14 - on this button Clone
From a Git Repo.
06:16 - And then I'm going to
go over to my repo.
06:19 - I'm gonna copy the URL.
06:20 - And I'm going to--
whoop, I'm going
06:21 - to press that button
again, and I'm
06:23 - going to go over
here and paste it in.
06:25 - So I am grabbing all
the code from coding
06:28 - train slash the weather here.
06:30 - And I'm gonna hit OK, and I'm
gonna wait for a little bit.
06:37 - And look at that.
06:39 - Look at this.
06:40 - Everything is there.
06:41 - Public check ins, public logs,
public index, public sketch,
06:45 - public style, Git ignore,
index, package, ooh,
06:48 - environment sample.
06:50 - Aha.
06:50 - So remember, I need my API key.
06:52 - So before I even try to run
this, what I'm going to do now
06:55 - is I'm going to hit Rename.
06:58 - And I'm gonna change
this to just dot env.
07:00 - So now you can see
it's got a key there.
07:03 - Glitch knows.
07:04 - Glitch really knows that dot
env files are secret files.
07:07 - So if someone chooses
to remix this project
07:09 - or based on it, if
I'm sharing this,
07:11 - no one will be able to
see the API key in there.
07:13 - I'm going to go and I'm
going to go back to my code
07:16 - where I have my dot env
file, grab this API key,
07:19 - paste it in here,
hit Save and then
07:23 - I'm going to click
on this Show button.
07:25 - And so now I can choose to show
in a new window or right next
07:27 - the code.
07:28 - Let's just look at it
right next the code.
07:30 - There it is.
07:31 - There's my project.
07:33 - Now let's click on Show
and go in a new window
07:36 - and look at this.
07:37 - If you go to coding dash
the dash weather dash here
07:40 - dot glitch dot me,
you have the project.
07:43 - And I can go back here
and I can start saying,
07:46 - hey, let's go to
Berlin and check in,
07:49 - and let's go to London
and check in, and let's go
07:52 - to San Francisco and check in.
07:54 - Let's view check ins.
07:55 - And all of those
check ins are here.
07:57 - And in fact, I
don't know what this
07:59 - is going to look like
now when you go to it.
08:01 - I assume I'm going to leave
this here as is and lots
08:03 - of other people
will have gone there
08:05 - and added their check ins.
08:06 - So we can see all
of that, and you'll
08:07 - see that if you go to
that URL right now.
08:10 - And to be clear, remember,
this is a code editor.
08:13 - So I can start changing stuff.
08:15 - I can go to this
index and HTML page
08:17 - and I can say the
weather is here.
08:20 - And you can see that
immediately updated.
08:22 - I could change
something in the server.
08:24 - I don't know.
08:25 - I'm afraid to change
things in the server.
08:27 - But I could start working
on the server code.
08:28 - It's all very, very small here.
08:30 - I could change that.
08:31 - And stuff would change that
the server would rerun itself
08:34 - automatically.
08:34 - So again, I would love to come
back and revisit more videos
08:37 - about how Glitch works itself.
08:38 - Now that this
project is there, I
08:41 - would encourage you
to go to the URL,
08:42 - it'll be in the
video's description,
08:44 - and click Remix Project.
08:45 - You don't even have to
do any of this stuff,
08:47 - because once I have
it deployed on Glitch,
08:49 - other people can get
the code and make
08:51 - their own version of it.
08:52 - So I'll include
this as an example
08:54 - that you can start with.
08:55 - And I probably
shouldn't mention that.
08:57 - I should have
mentioned that earlier.
08:58 - Oh well.
08:59 - Let's try one more
deployment, just so we can
09:01 - see how another system works.
09:03 - So now I'm going to show Heroku.
09:05 - Heroku has its own CLI, which
stands for a Command Line
09:08 - Interface.
09:09 - So you can actually do things
and deploy projects just
09:12 - from your terminal
application itself.
09:15 - So you're going to need to
first install the Heroku CLI.
09:18 - I've done that already.
09:19 - But then you can download
and install for Mac OS
09:21 - and you can download and
install for Windows or Ubuntu,
09:23 - whatever your
operating system is.
09:25 - You'll know that you
have the CLI installed
09:27 - if you can type Heroku
into the command line
09:29 - and see it doesn't say, I
don't know what that is.
09:31 - So one of the things I'm going
to do is type in Heroku log in.
09:34 - So I've already signed
up for a Heroku account.
09:36 - So you'll have to have done that
if you're going to follow along
09:39 - with these instructions.
09:41 - It's going to ask
me to press any key.
09:44 - It's going to open
up the browser.
09:45 - It's going to ask me to log in.
09:47 - I'm already logged in.
09:48 - I've already logged in.
09:49 - We can go back to the
terminal, and we can
09:51 - see that I've logged in now.
09:53 - Once I'm logged in in terminal,
I need to create a new app.
09:56 - So I can go to my Heroku
dashboard at this URL,
09:59 - and then I can just click here
and say New, Create New App.
10:03 - So I'm going to create an
app called the weather here.
10:07 - The weather here is available.
10:09 - I'm going to hit Create App.
10:12 - And then look at this.
10:13 - This is so perfect.
10:14 - It's kind of given me
everything I need to do.
10:16 - I need to do Heroku log in,
which I've already done.
10:19 - I've already created
a Git repository,
10:20 - so I don't need to
worry about any of this.
10:22 - But now I just need to
add Heroku as a remote.
10:27 - So I'm going to go
back to terminal here
10:29 - and I'm gonna say git remote
dash v. So this is listing me
10:34 - the current remotes.
10:35 - And the only current
remote is called origin,
10:37 - and it's at github.com.
10:39 - I want to add another remote
by copying and pasting
10:42 - this command right here.
10:44 - Gonna paste that in.
10:46 - OK, I've got another remote.
10:47 - If I say git remote
dash v, we can see, aha,
10:50 - I have the Heroku remote
and the origin remote.
10:53 - What's next?
10:55 - Now I'm going to
say, actually, if I
10:59 - made any changes of the code,
I would need to do git add
11:02 - and git commit.
11:03 - But all I need to
do is now deploy it
11:05 - to deploy it to Heroku is
say git push Heroku master.
11:08 - I'm sure I've
forgotten something.
11:09 - Let's see what happens.
11:12 - It's going to run through
a bunch of things.
11:14 - Building the project.
11:16 - And it's deployed.
11:17 - So I can click on this and
open it in the browser.
11:21 - And look, there it is.
11:23 - Huh.
11:24 - So it's working.
11:25 - It's deployed, but I
don't see temperature.
11:28 - If I go to View
Check Ins, there's
11:30 - nothing added to the database.
11:31 - So something's not working.
11:33 - It's deployed, but
it's not working.
11:35 - Aha.
11:36 - Do you remember?
11:37 - I remember.
11:38 - So the thing that I missed
is, once again, the API key.
11:41 - So this environment file
did not make it to Heroku.
11:45 - And actually, in this
case with Heroku,
11:46 - I don't need a dot env file.
11:48 - I don't actually even need
that NPM package dot env,
11:51 - because the Heroku command
line interface lets me set
11:54 - environment variables directly.
11:56 - So I can go back to the terminal
and I can type Heroku config.
11:59 - And Heroku config is
going to show me, ah,
12:01 - all of my environment variables,
of which there are none.
12:04 - So I can now say
Heroku config colon set
12:07 - API underscore key equals,
go back to my code,
12:10 - grab this, paste
that in, hit Enter.
12:14 - It's setting the API key and
even restarting the app for me.
12:18 - So nice of it to do that for me.
12:21 - Let's just check
Heroku config again.
12:22 - You can see that's my
environment variable.
12:25 - It's not found anywhere
other than here.
12:27 - It's saved secretly.
12:29 - And I can hit Refresh.
12:34 - And there we go.
12:37 - Now I've got the temperature.
12:39 - Once again, I can
go to Mountain View.
12:41 - I can hit Refresh to check in.
12:43 - I can go to San Francisco.
12:45 - I can check in again.
12:46 - Ooh, I can go to Sao Paolo.
12:49 - I can check in again.
12:50 - I can view all my check ins.
12:52 - And there they are.
12:54 - Everything is here and
the app is working.
12:57 - I kind of can't believe
this actually worked.
13:00 - And in many ways, I'm done with
the series and I'm not done.
13:03 - That's the thing I
already discussed.
13:04 - But there is some important
stuff I need to talk about.
13:08 - Number one, where's
the database again?
13:11 - Look at these three
check ins here.
13:13 - And I'm at
the-weather-here.herokuapp.com.
13:16 - Let me now go to codingtrain
the weather here.glitch.me.
13:23 - And let's look at
those check ins.
13:25 - One, two, three, four.
13:26 - There's like seven of them.
13:28 - Over here on the Heroku
one, there's four of them.
13:31 - They're not sharing a database.
13:33 - This is very important.
13:34 - Remember, the server is
the holder of the database.
13:39 - So you wouldn't want to deploy
this to multiple places.
13:41 - I'm just kind of showing
you how that works.
13:43 - But that database
is something that
13:45 - is created from the
server side itself.
13:48 - And it's different than I could
be running this local here.
13:50 - I'm not running the
server right now.
13:52 - But I could still say
node index dot js.
13:54 - And I've got whatever data I
happen to have here locally.
13:57 - So I could take that database
dot db file and pass it around,
14:01 - but that's not what
I'm doing here.
14:03 - So ultimately, once--
what I think of
14:06 - is I would have a sort of local
database for testing purposes.
14:09 - And once I've deployed it, that
database will persist forever.
14:11 - Of course, I might want to
wipe it for whatever reason.
14:14 - And again, I'm just sort
of tinkering around here.
14:16 - But where the database
lives, where the app lives,
14:18 - is quite important.
14:20 - There's also the
question, if I wanted
14:21 - to continue to work on
this if I'm on Glitch,
14:24 - Glitch is a whole
code editor itself.
14:26 - So I can kind of continue
and play and work there.
14:29 - But if I wanted to make a change
on Heroku, how would I do that?
14:33 - So to do that, I've got to
now go through multiple steps.
14:37 - I first would come
here to my local code.
14:41 - And just to make the
simplest change possible,
14:43 - I'm just going to change
and say the weather is here.
14:48 - Just as the header.
14:50 - Then I would have to
go back to my terminal.
14:53 - I've got to commit that.
14:59 - Making a change to
demonstrate deploy to Heroku.
15:05 - I'm going to make that change.
15:07 - And then I'm going to say
git push Heroku master.
15:11 - And this will now automatically
rebuild and restart the app.
15:16 - Heroku knows to do
that automatically
15:18 - when you try to send
it revised code.
15:20 - But it only can
[INAUDIBLE] revised code
15:22 - if it's been committed to Git.
15:24 - I can go back to the browser.
15:26 - I'm on Heroku.
15:27 - I can click on Check In.
15:28 - And you can see,
aha, is is there now.
15:30 - I've added is.
15:31 - Now, interestingly enough,
if I go here onto GitHub
15:35 - and I go into public
index dot HTML,
15:41 - it still just says
the weather here.
15:44 - Let's return to this
simple diagram for a second
15:46 - to think about this.
15:47 - So I'm working on the code.
15:49 - This is my local
dev environment.
15:51 - Then I can push my
code up to GitHub
15:54 - really just as a way of
backing it up or releasing
15:57 - it open source or collaborating
with other people who might
15:59 - want to work on it as well.
16:00 - I can pull changes from GitHub
if other people are sharing
16:03 - and implementing things.
16:04 - But that's kind of beyond the
scope of what I'm doing here.
16:07 - But now I've added Heroku.
16:09 - So what's important to
realize, unlike with Glitch
16:11 - when I kind of from Glitch
grabbed the code from GitHub,
16:15 - I'm actually also pushing
the code here to Heroku.
16:19 - So this is where
I'm working on it.
16:20 - When I push it to Heroku,
it rebuilds the server.
16:23 - So this is important.
16:24 - That's a deployment thing.
16:26 - So as I'm developing
it, I might just
16:28 - test it locally, push to
GitHub to publish the code,
16:32 - and then when I'm ready
actually push it to Heroku.
16:34 - And I can have a development
server and a deployment server,
16:37 - and I can kind of go grab
a lot of rabbit holes
16:39 - there to have a much
more complex workflow.
16:41 - But it's important to realize
that GitHub and Heroku are
16:44 - never talking to each
other themselves.
16:47 - I am just working on my code
here, sending it to GitHub,
16:50 - sending it to Heroku.
16:51 - So to finish this off, I'm going
to say git push origin master.
16:56 - And that's sending it to GitHub.
16:59 - And if I go here, we
can see that it now
17:02 - has the weather is here also.
17:04 - Everything is in
sync, and I have
17:06 - my project deployed
to the weather
17:10 - here dot Heroku dot app.
17:12 - And I'll remind you that
if you want to go here,
17:14 - you can-- a base project
for the git cloning.
17:17 - So I gotta clean this up
and edit this description.
17:19 - But you can go here to
this particular URL.
17:23 - And this is where now you
can also find the project,
17:25 - remix it, take a
look at the code,
17:27 - and have it already running
online in the browser itself
17:30 - just through Glitch.
17:31 - Thank you so much for
watching this whole course.
17:33 - Did you really watch
the whole course?
17:35 - If so, I'm quite amazed.
17:36 - I mean, maybe this
isn't the end.
17:37 - Maybe in the future,
there will actually
17:38 - be some videos that follow this.
17:40 - But right now, this is
where I'm finishing up.
17:42 - By watching this course, you've
hopefully added something new
17:44 - to your toolbox.
17:45 - Even just from the
client side, you've
17:46 - learned how to work
with the fetch wipe API,
17:49 - loading a CSV file, graphing it.
17:51 - Hopefully you've also
learned something
17:52 - about how the basics
of JavaScript,
17:55 - knowing how JavaScript
objects works,
17:57 - leads you to understand
how JSON data, data
18:00 - in JSON, format JavaScript
Object Notation, works.
18:02 - And you can make a call
to an external API,
18:06 - get information, and
use that information,
18:08 - repurpose it in a
web page itself.
18:10 - Then more importantly,
hopefully now you've
18:13 - realized that server side
programming is something
18:16 - that you can add
to your toolbox.
18:17 - You can use it to save
data to a database.
18:20 - You can use it to hide API keys.
18:22 - There is so much
more that you can
18:23 - do with server side
programming in terms
18:25 - of being able to have multiple
applications communicate
18:28 - to each other
across the network.
18:30 - So I hope this is just
the beginning for you.
18:32 - Let me know what
kind of questions
18:34 - you have in the comments.
18:35 - If you make a project,
if you've made one
18:37 - and you've deployed it,
go to thecodingtrain.com
18:40 - where I'll have a page that
you can share URLs to projects
18:43 - that you've made and deployed.
18:45 - And in particular, if you
found a web service, a web
18:48 - hosting service, that you
like to deploy your project,
18:50 - I would love to hear
about it as well.
18:52 - So thanks so much for watching.
18:53 - Hope you enjoyed this
whole set of videos,
18:55 - and I'll see you in
future Coding Train stuff.
18:58 - Goodbye.
18:58 - [BLOWS WHISTLE]
19:00 - [MUSIC PLAYING]

Cleaned transcript:

Welcome to another working with data and APIs video. I have one more thing to demonstrate to you. I mean, the truth of the matter is there's probably hundred thousands, tens of thousands, millions of things that I've missed that I should cover that I could get to that I don't even know about that I will hear from you. And so I look forward to hearing all about in the comments and hopefully returning and making more videos that continue these projects and this discussion. But before I go, at least in this first round of what I'm making right now, I'm gonna show you one thing. How to deploy your project to a server. Put it out in the world so that people could access and use it. There's an inherent problem with me even making this video, because there's no one way to do this. I mean, you could build your own server, get your own internet connection, get an IP address, create your own web server on a Raspberry Pi even, put it somewhere out in the forest wirelessly. Who knows? Attach it to a space station. But what I want to look for here at least, I want to look at least two scenarios of using a commercial hosting service that allows you to deploy your node code and have it run somewhere. And we'll give you a URL so that you can actually see it in the browser. And the two services I want to show you are Glitch and Heroku. Glitch, as it says on their website, is the friendly community where you'll find the app of your dreams. I love Glitch. It's an amazing code editor in the browser that you can write node code, client JavaScript. You can build all sorts of apps. You can share them. You can remix them. It's colorful. It's friendly. You can ask for help. There's so much there in Glitch. And honestly, I could imagine a version of these tutorials where I just started with the first day opening up Glitch and building the project there. But since I've already built the project, I'm going to show you how to import it right into glitch and run it there. After that, I'm going to show you another service called Heroku. It's a cloud platform that lets you deploy web applications. It has a pretty reasonable free tier that I can get up and running with easily. This is not sponsored content. There are lots of other servers that I've used. Amazon Web Services, DigitalOcean are just a couple to name a few. And I'm happy to come back and show some other ones in a video as well if that might be something useful. Or leave in the comments what type of cloud server you like to deploy your applications on. There's also this thing called serverless programming. We'll come back to that another time. Let's start off here with Glitch. So here I am logged into my Glitch account. My Glitch account is actually linked to my GitHub account, although you don't need to GitHub account to sign up and start working with Glitch. I could make a new project, and I could actually make a blank project. Hello express. This would have been a good place for me to start when I was back in the day I didn't have anything yet and I could just make a new simple express app and build on top of that. But I'm going to do something a little bit different. I'm going to use this clone from Git Repo. Since I've already gone through all the motions of writing my code locally on the computer and then pushing it to GitHub, I could just grab it and put it here. But before I do that, I better make one more change. There's something that I missed that's rather important. So in my code, I have hard coded in here the port 3000. That's the port that I've arbitrarily choosing to run and test the stuff locally on this computer. But any type of web hosting platform is probably going to generate a port automatically. And there are some standard ports for hosting up a website. So I actually want to pull that from the environment variable. And this will be maybe an environment variable that I don't actually set but that already comes with the platform. So not necessarily something that I put in here, but something that's just going to be present whenever I'm on that platform itself. So let me go back to the code, and let me add a const port equals process dot env dot port. Now here's the thing. Now when I run this and I'm going to put this port here, and I'm going to just change the string to starting server at and then I'm just going to say port. So this is some changes I made to the code. OK, so here's the thing. This now, if I go and try to run this locally. Boom. It doesn't have a port number. Or do I actually have another error? Oh, that's a different error. I've got some syntax error. Let me fix that. Always getting syntax errors. Oh, I don't know. I lost my curly brackets. I'm not sure what I did here. There we go. Yes. Listen at that port and start the ser then I log, starting the server at that port. Sorry about that. Let's try that again. Starting server at undefined. So I don't even know how would I possibly there's no port. I can't access the server. So this is where I could do something nice. I could say, if there is no port in an environment variable or 3000. So now if I run the server again, it's starting at 3000. I can go back and look at the project running locally at port 3000. And here it is. OK. But I needed to do this, because I want now want Glitch to take care of the port for me. I don't want to be in charge of that. Now, since I'm going to be getting the code from GitHub onto Glitch, I need to make sure I take that change that I just made locally and push it onto GitHub. So I'm going to add and I'm gonna commit port from environment variable. And then I'm gonna say Git push origin master, which sends it up to GitHub itself. This is getting a little bit confusing, so let's make a quick diagram just to understand the pieces. So I've got my laptop here. And so I've been writing all the code here, the server and the client. Now what I've done is I have now taken all that code, and I have put it onto GitHub. And these are now linked. I can always push, which is sending code this way, or I can pull, which is sending code this way. So this is really the thing that I've set up. But I want to add a third component here. So that third component, I'm going to add Glitch as one. I'm also going to show you, I'm also eventually going to add Heroku. Now, the difference with Glitch and Heroku is this is actually a code editor. So once I get the code from GitHub and place it onto Glitch, this is kind of a connection that doesn't need to persist. And I can just it's just there. I can work on it. I just want a quick way of getting this stuff on Glitch. I could have uploaded my files or copy paste or been working there all along. But something different will happen once I put it on Heroku, which I will keep all of these things sort of linked so I can continue to do the development here on my laptop and push those changes through. So let's come back to Glitch and let's look at click on this button Clone From a Git Repo. And then I'm going to go over to my repo. I'm gonna copy the URL. And I'm going to whoop, I'm going to press that button again, and I'm going to go over here and paste it in. So I am grabbing all the code from coding train slash the weather here. And I'm gonna hit OK, and I'm gonna wait for a little bit. And look at that. Look at this. Everything is there. Public check ins, public logs, public index, public sketch, public style, Git ignore, index, package, ooh, environment sample. Aha. So remember, I need my API key. So before I even try to run this, what I'm going to do now is I'm going to hit Rename. And I'm gonna change this to just dot env. So now you can see it's got a key there. Glitch knows. Glitch really knows that dot env files are secret files. So if someone chooses to remix this project or based on it, if I'm sharing this, no one will be able to see the API key in there. I'm going to go and I'm going to go back to my code where I have my dot env file, grab this API key, paste it in here, hit Save and then I'm going to click on this Show button. And so now I can choose to show in a new window or right next the code. Let's just look at it right next the code. There it is. There's my project. Now let's click on Show and go in a new window and look at this. If you go to coding dash the dash weather dash here dot glitch dot me, you have the project. And I can go back here and I can start saying, hey, let's go to Berlin and check in, and let's go to London and check in, and let's go to San Francisco and check in. Let's view check ins. And all of those check ins are here. And in fact, I don't know what this is going to look like now when you go to it. I assume I'm going to leave this here as is and lots of other people will have gone there and added their check ins. So we can see all of that, and you'll see that if you go to that URL right now. And to be clear, remember, this is a code editor. So I can start changing stuff. I can go to this index and HTML page and I can say the weather is here. And you can see that immediately updated. I could change something in the server. I don't know. I'm afraid to change things in the server. But I could start working on the server code. It's all very, very small here. I could change that. And stuff would change that the server would rerun itself automatically. So again, I would love to come back and revisit more videos about how Glitch works itself. Now that this project is there, I would encourage you to go to the URL, it'll be in the video's description, and click Remix Project. You don't even have to do any of this stuff, because once I have it deployed on Glitch, other people can get the code and make their own version of it. So I'll include this as an example that you can start with. And I probably shouldn't mention that. I should have mentioned that earlier. Oh well. Let's try one more deployment, just so we can see how another system works. So now I'm going to show Heroku. Heroku has its own CLI, which stands for a Command Line Interface. So you can actually do things and deploy projects just from your terminal application itself. So you're going to need to first install the Heroku CLI. I've done that already. But then you can download and install for Mac OS and you can download and install for Windows or Ubuntu, whatever your operating system is. You'll know that you have the CLI installed if you can type Heroku into the command line and see it doesn't say, I don't know what that is. So one of the things I'm going to do is type in Heroku log in. So I've already signed up for a Heroku account. So you'll have to have done that if you're going to follow along with these instructions. It's going to ask me to press any key. It's going to open up the browser. It's going to ask me to log in. I'm already logged in. I've already logged in. We can go back to the terminal, and we can see that I've logged in now. Once I'm logged in in terminal, I need to create a new app. So I can go to my Heroku dashboard at this URL, and then I can just click here and say New, Create New App. So I'm going to create an app called the weather here. The weather here is available. I'm going to hit Create App. And then look at this. This is so perfect. It's kind of given me everything I need to do. I need to do Heroku log in, which I've already done. I've already created a Git repository, so I don't need to worry about any of this. But now I just need to add Heroku as a remote. So I'm going to go back to terminal here and I'm gonna say git remote dash v. So this is listing me the current remotes. And the only current remote is called origin, and it's at github.com. I want to add another remote by copying and pasting this command right here. Gonna paste that in. OK, I've got another remote. If I say git remote dash v, we can see, aha, I have the Heroku remote and the origin remote. What's next? Now I'm going to say, actually, if I made any changes of the code, I would need to do git add and git commit. But all I need to do is now deploy it to deploy it to Heroku is say git push Heroku master. I'm sure I've forgotten something. Let's see what happens. It's going to run through a bunch of things. Building the project. And it's deployed. So I can click on this and open it in the browser. And look, there it is. Huh. So it's working. It's deployed, but I don't see temperature. If I go to View Check Ins, there's nothing added to the database. So something's not working. It's deployed, but it's not working. Aha. Do you remember? I remember. So the thing that I missed is, once again, the API key. So this environment file did not make it to Heroku. And actually, in this case with Heroku, I don't need a dot env file. I don't actually even need that NPM package dot env, because the Heroku command line interface lets me set environment variables directly. So I can go back to the terminal and I can type Heroku config. And Heroku config is going to show me, ah, all of my environment variables, of which there are none. So I can now say Heroku config colon set API underscore key equals, go back to my code, grab this, paste that in, hit Enter. It's setting the API key and even restarting the app for me. So nice of it to do that for me. Let's just check Heroku config again. You can see that's my environment variable. It's not found anywhere other than here. It's saved secretly. And I can hit Refresh. And there we go. Now I've got the temperature. Once again, I can go to Mountain View. I can hit Refresh to check in. I can go to San Francisco. I can check in again. Ooh, I can go to Sao Paolo. I can check in again. I can view all my check ins. And there they are. Everything is here and the app is working. I kind of can't believe this actually worked. And in many ways, I'm done with the series and I'm not done. That's the thing I already discussed. But there is some important stuff I need to talk about. Number one, where's the database again? Look at these three check ins here. And I'm at theweatherhere.herokuapp.com. Let me now go to codingtrain the weather here.glitch.me. And let's look at those check ins. One, two, three, four. There's like seven of them. Over here on the Heroku one, there's four of them. They're not sharing a database. This is very important. Remember, the server is the holder of the database. So you wouldn't want to deploy this to multiple places. I'm just kind of showing you how that works. But that database is something that is created from the server side itself. And it's different than I could be running this local here. I'm not running the server right now. But I could still say node index dot js. And I've got whatever data I happen to have here locally. So I could take that database dot db file and pass it around, but that's not what I'm doing here. So ultimately, once what I think of is I would have a sort of local database for testing purposes. And once I've deployed it, that database will persist forever. Of course, I might want to wipe it for whatever reason. And again, I'm just sort of tinkering around here. But where the database lives, where the app lives, is quite important. There's also the question, if I wanted to continue to work on this if I'm on Glitch, Glitch is a whole code editor itself. So I can kind of continue and play and work there. But if I wanted to make a change on Heroku, how would I do that? So to do that, I've got to now go through multiple steps. I first would come here to my local code. And just to make the simplest change possible, I'm just going to change and say the weather is here. Just as the header. Then I would have to go back to my terminal. I've got to commit that. Making a change to demonstrate deploy to Heroku. I'm going to make that change. And then I'm going to say git push Heroku master. And this will now automatically rebuild and restart the app. Heroku knows to do that automatically when you try to send it revised code. But it only can [INAUDIBLE] revised code if it's been committed to Git. I can go back to the browser. I'm on Heroku. I can click on Check In. And you can see, aha, is is there now. I've added is. Now, interestingly enough, if I go here onto GitHub and I go into public index dot HTML, it still just says the weather here. Let's return to this simple diagram for a second to think about this. So I'm working on the code. This is my local dev environment. Then I can push my code up to GitHub really just as a way of backing it up or releasing it open source or collaborating with other people who might want to work on it as well. I can pull changes from GitHub if other people are sharing and implementing things. But that's kind of beyond the scope of what I'm doing here. But now I've added Heroku. So what's important to realize, unlike with Glitch when I kind of from Glitch grabbed the code from GitHub, I'm actually also pushing the code here to Heroku. So this is where I'm working on it. When I push it to Heroku, it rebuilds the server. So this is important. That's a deployment thing. So as I'm developing it, I might just test it locally, push to GitHub to publish the code, and then when I'm ready actually push it to Heroku. And I can have a development server and a deployment server, and I can kind of go grab a lot of rabbit holes there to have a much more complex workflow. But it's important to realize that GitHub and Heroku are never talking to each other themselves. I am just working on my code here, sending it to GitHub, sending it to Heroku. So to finish this off, I'm going to say git push origin master. And that's sending it to GitHub. And if I go here, we can see that it now has the weather is here also. Everything is in sync, and I have my project deployed to the weather here dot Heroku dot app. And I'll remind you that if you want to go here, you can a base project for the git cloning. So I gotta clean this up and edit this description. But you can go here to this particular URL. And this is where now you can also find the project, remix it, take a look at the code, and have it already running online in the browser itself just through Glitch. Thank you so much for watching this whole course. Did you really watch the whole course? If so, I'm quite amazed. I mean, maybe this isn't the end. Maybe in the future, there will actually be some videos that follow this. But right now, this is where I'm finishing up. By watching this course, you've hopefully added something new to your toolbox. Even just from the client side, you've learned how to work with the fetch wipe API, loading a CSV file, graphing it. Hopefully you've also learned something about how the basics of JavaScript, knowing how JavaScript objects works, leads you to understand how JSON data, data in JSON, format JavaScript Object Notation, works. And you can make a call to an external API, get information, and use that information, repurpose it in a web page itself. Then more importantly, hopefully now you've realized that server side programming is something that you can add to your toolbox. You can use it to save data to a database. You can use it to hide API keys. There is so much more that you can do with server side programming in terms of being able to have multiple applications communicate to each other across the network. So I hope this is just the beginning for you. Let me know what kind of questions you have in the comments. If you make a project, if you've made one and you've deployed it, go to thecodingtrain.com where I'll have a page that you can share URLs to projects that you've made and deployed. And in particular, if you found a web service, a web hosting service, that you like to deploy your project, I would love to hear about it as well. So thanks so much for watching. Hope you enjoyed this whole set of videos, and I'll see you in future Coding Train stuff. Goodbye. [BLOWS WHISTLE] [MUSIC PLAYING]
