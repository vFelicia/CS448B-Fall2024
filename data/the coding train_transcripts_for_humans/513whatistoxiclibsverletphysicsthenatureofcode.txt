With timestamps:

00:04 - hello toxic lives where are we what are
00:09 - we talking about why are we here we're
00:11 - here to talk about toxic lives first of
00:13 - all we should all just say thank you I'm
00:16 - so glad I live in a world where toxic
00:18 - lives exists exists it is an amazing
00:21 - suite of libraries for processing and in
00:24 - fact if you look at toxic lives which
00:27 - this is toxic libs sitting here in my
00:29 - libraries folder you can see that it is
00:30 - a whole bunch of libraries packaged into
00:33 - one audio utilities color utilities data
00:35 - utilities seem less utility is cool
00:37 - chorim berlin physics volume there's
00:39 - tons of stuff in toxic lives but we're
00:42 - where we are here in this world that we
00:45 - live in and where we're talking to each
00:47 - other through this a strange internet
00:49 - thing we're here to talk about physics
00:53 - engines and simulating physics and so
00:55 - we're only going to look at in this
00:57 - particular set of videos which I think
00:59 - will be about four we're going to look
01:00 - at the verlet physics engine of toxic
01:04 - lives first of all okay so there's a
01:07 - whole bunch of questions that you're
01:08 - you're probably asking yourself I know
01:10 - I'm asking myself a lot of questions
01:11 - number one what is early physics anyway
01:15 - number two didn't we just spend all this
01:18 - time working out a box 2d and that's a
01:22 - physics engine why do I need another
01:23 - physics engine so the truth of the
01:25 - matter is I don't know if any of us
01:27 - needs any physics engine at all in our
01:29 - life but since we're in a place where we
01:32 - decided we do need them we've really now
01:34 - come across kind of three choices we had
01:37 - the well we don't need a physics engine
01:39 - we're just gonna use processing and P
01:41 - vector and figure it all out ourselves
01:43 - we had the oh my god I really need
01:45 - complex collisions now I'm going to look
01:47 - at box 2d and now we have this third
01:50 - physics engine called toxic libs why
01:53 - would you need toxic libs over just with
01:55 - plain old P vector stuff we used to do
01:58 - over Bach CDs so um to start this
02:01 - discussion I guess so I have to say
02:04 - about this and I'm clearly not organized
02:05 - in my thoughts but I made a short list
02:07 - of some of the features that you might
02:10 - want in a physics engine and I want at
02:13 - least our
02:13 - this discussion by thinking through what
02:16 - are these features and what's available
02:18 - in box 2d and what is not available in
02:19 - toxic lips so let's make little columns
02:21 - here this is our box 2d column and this
02:24 - is our toxic column and let's put a
02:27 - check mark or an X depending on whether
02:29 - or not the library has that so box et
02:31 - clearly the reason we want box 2d the
02:33 - reason we love box it is because it has
02:34 - collision geometry check toxic lives
02:38 - does not have collision geometry
02:40 - although there are some tricky ways of
02:42 - getting around getting the feeling of
02:44 - collisions in a toxic libs sketch
02:47 - sometimes we want might we might want to
02:49 - generate a sketch that it has physics in
02:51 - it that's in 3d box 2d is only a 2d
02:54 - engine we cannot do anything in 3d but
02:56 - toxic libs we can do physics in both two
02:58 - dimensions or three dimensions one of
03:02 - the things we looked at a lot with our
03:04 - earlier examples we started the forces
03:06 - model is having a what is an attractive
03:08 - force what is a repulsive force those
03:10 - forces are not built into box 2d but
03:12 - they are built into toxic loops and one
03:14 - of the things that we're gonna see
03:15 - that's really amazing about toxic lives
03:18 - is you can create a body in the toxic
03:20 - lift world and just say it's an
03:21 - attractive body and everything is always
03:23 - just attracted to it that's very
03:25 - different than calculating a force
03:27 - looping through every object in the
03:28 - world checking its distance against that
03:30 - applying the force right we did all of
03:32 - that manually in our earlier examples
03:34 - toxic lives just allows you say that's
03:35 - attractive that's repulsive that's
03:37 - neither etc etc now one of the things
03:40 - we've started to see the value of in box
03:43 - 2d of having things that are connected
03:45 - with joints right what if we want two
03:47 - things to have a kind of springy
03:48 - connection what if we linked a whole
03:50 - bunch of those together we have this
03:51 - string or this blanket simulation there
03:53 - are lots of things we can do by creating
03:54 - these systems of connected elements
03:57 - toxic little okay so we can do both of
03:59 - these in box 2d and toxic libs
04:01 - but this is what toxic lips is really
04:03 - awesome at it has a whole set of spring
04:06 - classes with different constraints and
04:07 - different features the ladder you
04:09 - connect objects together what we're
04:11 - gonna call in toxic lubes particles and
04:12 - then there we saw in box 2d that there's
04:14 - lots of other joints revolute joint
04:17 - mouse joint gear joint pulley joined etc
04:19 - etc those are in boxy D but they are not
04:21 - in toxic lives so really I'm kind of
04:25 - missing another
04:27 - thing here though which is a big open
04:29 - question I mean you might say like okay
04:31 - well the only things that toxic lips has
04:33 - that box2d doesn't or this 3d physics
04:35 - and thus attraction and repulsion but
04:37 - one thing people are applauding in the
04:39 - hallway for something that's clearly not
04:40 - me one thing that I'm gonna just right
04:45 - served ease-of-use
04:47 - in parentheses designed for processing
04:52 - and in this case I would give box to
04:57 - take like a score on a one to ten of
05:00 - like I don't I don't want to be mean to
05:01 - boxing let's give it a six and let's
05:03 - give toxic lips a ten so toxic lips is
05:05 - just so easy to use in processing it's
05:08 - made for processing the world√≠s pixels
05:10 - it thinks of pixels up is up and down is
05:13 - down where's boxy you remember we had
05:14 - all those classes and converting and me
05:17 - this this coordinate system in that
05:19 - coordinate system so one of the great
05:20 - things about toxic lives we've been
05:22 - talking for five minutes already about
05:23 - it is that it is going to be very easy
05:26 - for us to use and it does Springs ooo so
05:29 - well so if you're walking through life
05:33 - and you're asking yourself the question
05:35 - I have a project and I want to make it
05:41 - what should I use again if you are
05:43 - really talking about collisions you
05:45 - should probably use box2d if you're in
05:47 - two dimensions if you're talking about
05:49 - all sorts of stuff that's connected with
05:51 - Springs and this network mesh of a force
05:54 - directed graph cool this is connected to
05:56 - that and it's springy and pulley and
05:58 - pushy and Acuras I should really edit
06:01 - this part blah blah blah with my magical
06:03 - editing engine that makes all these
06:04 - videos better and also like it's rid of
06:08 - the imperfections on my face but you
06:12 - should use toxic libs so toxic lips is
06:15 - really great what we're gonna see it's
06:17 - for particle simulations and particles
06:19 - that have connections as Springs what
06:21 - are some examples of this this is what I
06:23 - really should be getting to let's think
06:24 - about like so what are some classic
06:26 - examples of things that you could see in
06:28 - the toxic lips ver like physics engine
06:29 - here whoops
06:31 - so here is one that I think is a kind of
06:34 - classic example of a great use of toxic
06:37 - libs I'll just zoom in on this a little
06:38 - bit but you can see here we have
06:41 - mesh what is that mesh each one of those
06:43 - points in this mesh is a particle each
06:46 - particle is connected to another
06:47 - particle with a spring in this grid-like
06:49 - pattern and what happens there is we get
06:52 - this blanket and I'm now adding a
06:54 - repulsive force right which is built in
06:56 - I can repel it with the mouse and you
06:58 - can see look at this this kind of cloth
06:59 - imagine texturing images over that
07:01 - imagine allowing it to break apart
07:03 - imagine all sorts of things you can do
07:06 - by creating these types of connected
07:08 - systems another great example of just
07:10 - seeing having this kind of attraction
07:12 - repulsion for free this is one of the
07:14 - examples that comes with toxic libs as
07:16 - you can see each one of these particles
07:18 - is is hosting naturally but is repelled
07:22 - by every other particle and look what
07:24 - they're doing they're kind of piling up
07:25 - on each other and with this kind of
07:28 - simple repulsive behavior if I add an
07:29 - attraction behavior in here we can see
07:31 - we almost have this nice fluid like
07:33 - stimulation and this is very little code
07:35 - right we could do this without toxic
07:37 - lives but what toxic lives is is a nice
07:39 - place to say I can initialize all these
07:42 - objects I could give them attraction
07:44 - again the repulsion I can give them
07:45 - spring connections and then I can just
07:46 - let them go and this by the way would
07:48 - work in 3d and the other thing would
07:50 - work in 3d too so you can do all this in
07:52 - 3d with 3d geometry which is really very
07:55 - very exciting so the main thing we have
07:57 - to get to in this these videos which I'm
08:00 - going to start doing in the next one is
08:01 - the details of how to actually use toxic
08:03 - lips um I think there's one last point
08:06 - that maybe is worth making in this video
08:09 - that's now about 8 minutes long
08:10 - hopefully we can get this done before 10
08:12 - minutes snappy snappy is what the hell
08:16 - is this valid physics thing anyway like
08:19 - why is it called verlan physics deep
08:22 - breath okay so here's the thing all
08:25 - along in all of our examples we have
08:29 - been doing something secretly and we
08:32 - haven't bothered to say what we're doing
08:34 - we've been doing something called Euler
08:36 - integration all physics engines I think
08:40 - I think this is true oh I really thought
08:42 - of talking about but I'm gonna say this
08:43 - is true all physics engines need an
08:46 - integration method what is an
08:49 - integration method you say well first of
08:50 - all what is integration okay I think it
08:53 - has to do with something with
08:54 - calculus okay but there's also this
08:57 - thing called differentiation maybe
08:59 - you've saw this maybe someday at some
09:01 - part of your life or somewhere in the
09:02 - universe
09:02 - you took a calculus class and you saw
09:04 - something like DX over DT right the
09:08 - change in X over time that's what
09:12 - velocity is really in our world right we
09:15 - have this idea of velocity X right the
09:17 - change in X Y over time X Y is our
09:20 - position the change in X Y over time is
09:25 - our velocity now why did I bring this up
09:28 - because maybe DX over DT rings a bell is
09:31 - that's what differentiation is
09:33 - differentiation is taking the derivative
09:36 - of position is velocity the change in
09:39 - position over time taking the derivative
09:41 - of velocity is acceleration
09:44 - that's differentiation okay but why are
09:49 - we using integration well where does
09:52 - everything start in our physics engine
09:54 - the very first thing we calculate is a
09:56 - force with Newton's law we know that
09:59 - that force I'm going to fit myself over
10:02 - here that force goes into the
10:04 - acceleration that acceleration modifies
10:06 - velocity and velocity modifies position
10:09 - and then we draw the object at that
10:11 - position on the screen we're doing
10:14 - integration integration is the reverse
10:16 - of differentiation we're starting with a
10:18 - force and we want to know the object's
10:19 - new location its new position that is
10:23 - integration our method for integration
10:26 - is Koide it's called Euler it's fine
10:32 - sometimes there's just moments of
10:34 - awkwardness in these videos where I have
10:36 - to erase something or pause or get
10:37 - confused and like we just have to live
10:39 - with that it's just life I can't help it
10:41 - and you know when we have the
10:44 - crowdsource edits you won't have to
10:47 - listen to all this okay oiler
10:50 - integration what that's what we've been
10:52 - doing oiler integration is saying
10:54 - location and velocity velocity add
10:58 - acceleration perhaps at the other horror
11:01 - so it's fine
11:07 - okay so what's what's interesting about
11:09 - this is that this is incredibly simple
11:12 - we do this once per frame show a frame
11:15 - of animation do this integration show
11:18 - another frame of animation did this
11:19 - integration again right but this is
11:21 - totally not how the real world works
11:23 - right if I were to drop this eraser it
11:25 - doesn't like disappear and reappear here
11:26 - and a second later disappear and
11:28 - reappear here it moves continuously
11:29 - through time and space you know that's
11:31 - what calculus is for to figure out the
11:33 - mathematics of continuous time and space
11:35 - we can just approximate it by saying
11:37 - there's a time one thirtieth of a second
11:39 - we do it but you have to realize that
11:40 - this is very inaccurate so other physics
11:43 - engines box2d use is something called
11:45 - symplectic Euler integration I think you
11:49 - can look it up in the links below that
11:50 - I'll include there's also something
11:52 - called runge-kutta there are lots of
11:54 - other methods for getting from
11:56 - acceleration a force to the objects new
11:59 - position this was a very roundabout way
12:02 - I hopefully use toward this video
12:03 - several minutes ago of saying that
12:05 - verlan physics Berlet physics is an
12:08 - implementation of verlet integration
12:09 - Furley integration is another
12:11 - methodology and what's really
12:12 - interesting about verlan integration I
12:14 - will definitely include a link to the
12:15 - sort of seminal paper on Berlin
12:17 - Christian which explains it in more
12:18 - detail is that it is a integration
12:21 - method without velocity velocity does
12:24 - not exist and if you think about it do
12:26 - you really need velocity if you know the
12:28 - object's previous location and its
12:30 - current location you don't need to know
12:32 - its velocity because it's velocities
12:33 - consensually can be extrapolated from
12:35 - the difference between where it is now
12:36 - and where it was previously and so if
12:38 - you look at the verlet integration
12:40 - methodology the algorithm is you know
12:43 - similar to what we're doing in our
12:45 - update method but different in that it
12:47 - doesn't actually include velocity in the
12:48 - algorithm it just uses the previous
12:50 - location in the current location so you
12:52 - know if you want like an advanced
12:53 - exercise is kind of go dive into toxic
12:56 - Lib source take a look at how it works
13:00 - and try to like write your own little
13:01 - verlet physics engine kind of briefly
13:03 - but the point is that we don't need to
13:06 - we have toxic libs and one of the things
13:08 - about early physics which is really
13:09 - terrific it is very fast and it is very
13:12 - well suited for these systems of
13:14 - particles that are connected with
13:15 - Springs so I you know this video
13:19 - is it kind of went on for I think the
13:21 - important thing is to kind of get an
13:23 - overview of toxic libs if you're still
13:25 - watching I didn't really mention where
13:26 - you download it but that that should
13:28 - hopefully be obvious from various links
13:29 - but I will just briefly show you that so
13:33 - you can get toxic libs from toxic libs
13:35 - org which is the website here you just
13:38 - want to go to the download link one
13:39 - thing I should mention which is just
13:41 - kind of I'm doing my duty as a as a
13:43 - servant of processing 2.0 is that all
13:46 - libraries should really be installed
13:47 - through sketch import library add
13:50 - library see this sketch import library
13:52 - add library and now you're gonna see a
13:55 - list of all of these wonderful libraries
13:57 - that you can install and processing
13:59 - however toxic libs happens to be at the
14:01 - moment an exception to this because the
14:04 - library is if you look in the download
14:05 - page it's still from pre 2.0 it works in
14:07 - 2.0 but you will have to download it
14:09 - extract it and put it in your libraries
14:11 - folder and once you do that you will see
14:14 - there it is toxic lips complete to zero
14:17 - in your libraries folder so if you have
14:19 - trouble getting toxic libs downloaded
14:21 - installed I'll write a comment below and
14:24 - hopefully we'll get it sorted out for
14:26 - you so this um this video is done and in
14:30 - the next set of videos we're actually
14:31 - gonna look at the the actual
14:33 - implementation of toxic libs this was
14:35 - how to practice for removal out of
14:36 - practice I have actually made one of
14:37 - these in a couple weeks okay goodbye

Cleaned transcript:

hello toxic lives where are we what are we talking about why are we here we're here to talk about toxic lives first of all we should all just say thank you I'm so glad I live in a world where toxic lives exists exists it is an amazing suite of libraries for processing and in fact if you look at toxic lives which this is toxic libs sitting here in my libraries folder you can see that it is a whole bunch of libraries packaged into one audio utilities color utilities data utilities seem less utility is cool chorim berlin physics volume there's tons of stuff in toxic lives but we're where we are here in this world that we live in and where we're talking to each other through this a strange internet thing we're here to talk about physics engines and simulating physics and so we're only going to look at in this particular set of videos which I think will be about four we're going to look at the verlet physics engine of toxic lives first of all okay so there's a whole bunch of questions that you're you're probably asking yourself I know I'm asking myself a lot of questions number one what is early physics anyway number two didn't we just spend all this time working out a box 2d and that's a physics engine why do I need another physics engine so the truth of the matter is I don't know if any of us needs any physics engine at all in our life but since we're in a place where we decided we do need them we've really now come across kind of three choices we had the well we don't need a physics engine we're just gonna use processing and P vector and figure it all out ourselves we had the oh my god I really need complex collisions now I'm going to look at box 2d and now we have this third physics engine called toxic libs why would you need toxic libs over just with plain old P vector stuff we used to do over Bach CDs so um to start this discussion I guess so I have to say about this and I'm clearly not organized in my thoughts but I made a short list of some of the features that you might want in a physics engine and I want at least our this discussion by thinking through what are these features and what's available in box 2d and what is not available in toxic lips so let's make little columns here this is our box 2d column and this is our toxic column and let's put a check mark or an X depending on whether or not the library has that so box et clearly the reason we want box 2d the reason we love box it is because it has collision geometry check toxic lives does not have collision geometry although there are some tricky ways of getting around getting the feeling of collisions in a toxic libs sketch sometimes we want might we might want to generate a sketch that it has physics in it that's in 3d box 2d is only a 2d engine we cannot do anything in 3d but toxic libs we can do physics in both two dimensions or three dimensions one of the things we looked at a lot with our earlier examples we started the forces model is having a what is an attractive force what is a repulsive force those forces are not built into box 2d but they are built into toxic loops and one of the things that we're gonna see that's really amazing about toxic lives is you can create a body in the toxic lift world and just say it's an attractive body and everything is always just attracted to it that's very different than calculating a force looping through every object in the world checking its distance against that applying the force right we did all of that manually in our earlier examples toxic lives just allows you say that's attractive that's repulsive that's neither etc etc now one of the things we've started to see the value of in box 2d of having things that are connected with joints right what if we want two things to have a kind of springy connection what if we linked a whole bunch of those together we have this string or this blanket simulation there are lots of things we can do by creating these systems of connected elements toxic little okay so we can do both of these in box 2d and toxic libs but this is what toxic lips is really awesome at it has a whole set of spring classes with different constraints and different features the ladder you connect objects together what we're gonna call in toxic lubes particles and then there we saw in box 2d that there's lots of other joints revolute joint mouse joint gear joint pulley joined etc etc those are in boxy D but they are not in toxic lives so really I'm kind of missing another thing here though which is a big open question I mean you might say like okay well the only things that toxic lips has that box2d doesn't or this 3d physics and thus attraction and repulsion but one thing people are applauding in the hallway for something that's clearly not me one thing that I'm gonna just right served easeofuse in parentheses designed for processing and in this case I would give box to take like a score on a one to ten of like I don't I don't want to be mean to boxing let's give it a six and let's give toxic lips a ten so toxic lips is just so easy to use in processing it's made for processing the world√≠s pixels it thinks of pixels up is up and down is down where's boxy you remember we had all those classes and converting and me this this coordinate system in that coordinate system so one of the great things about toxic lives we've been talking for five minutes already about it is that it is going to be very easy for us to use and it does Springs ooo so well so if you're walking through life and you're asking yourself the question I have a project and I want to make it what should I use again if you are really talking about collisions you should probably use box2d if you're in two dimensions if you're talking about all sorts of stuff that's connected with Springs and this network mesh of a force directed graph cool this is connected to that and it's springy and pulley and pushy and Acuras I should really edit this part blah blah blah with my magical editing engine that makes all these videos better and also like it's rid of the imperfections on my face but you should use toxic libs so toxic lips is really great what we're gonna see it's for particle simulations and particles that have connections as Springs what are some examples of this this is what I really should be getting to let's think about like so what are some classic examples of things that you could see in the toxic lips ver like physics engine here whoops so here is one that I think is a kind of classic example of a great use of toxic libs I'll just zoom in on this a little bit but you can see here we have mesh what is that mesh each one of those points in this mesh is a particle each particle is connected to another particle with a spring in this gridlike pattern and what happens there is we get this blanket and I'm now adding a repulsive force right which is built in I can repel it with the mouse and you can see look at this this kind of cloth imagine texturing images over that imagine allowing it to break apart imagine all sorts of things you can do by creating these types of connected systems another great example of just seeing having this kind of attraction repulsion for free this is one of the examples that comes with toxic libs as you can see each one of these particles is is hosting naturally but is repelled by every other particle and look what they're doing they're kind of piling up on each other and with this kind of simple repulsive behavior if I add an attraction behavior in here we can see we almost have this nice fluid like stimulation and this is very little code right we could do this without toxic lives but what toxic lives is is a nice place to say I can initialize all these objects I could give them attraction again the repulsion I can give them spring connections and then I can just let them go and this by the way would work in 3d and the other thing would work in 3d too so you can do all this in 3d with 3d geometry which is really very very exciting so the main thing we have to get to in this these videos which I'm going to start doing in the next one is the details of how to actually use toxic lips um I think there's one last point that maybe is worth making in this video that's now about 8 minutes long hopefully we can get this done before 10 minutes snappy snappy is what the hell is this valid physics thing anyway like why is it called verlan physics deep breath okay so here's the thing all along in all of our examples we have been doing something secretly and we haven't bothered to say what we're doing we've been doing something called Euler integration all physics engines I think I think this is true oh I really thought of talking about but I'm gonna say this is true all physics engines need an integration method what is an integration method you say well first of all what is integration okay I think it has to do with something with calculus okay but there's also this thing called differentiation maybe you've saw this maybe someday at some part of your life or somewhere in the universe you took a calculus class and you saw something like DX over DT right the change in X over time that's what velocity is really in our world right we have this idea of velocity X right the change in X Y over time X Y is our position the change in X Y over time is our velocity now why did I bring this up because maybe DX over DT rings a bell is that's what differentiation is differentiation is taking the derivative of position is velocity the change in position over time taking the derivative of velocity is acceleration that's differentiation okay but why are we using integration well where does everything start in our physics engine the very first thing we calculate is a force with Newton's law we know that that force I'm going to fit myself over here that force goes into the acceleration that acceleration modifies velocity and velocity modifies position and then we draw the object at that position on the screen we're doing integration integration is the reverse of differentiation we're starting with a force and we want to know the object's new location its new position that is integration our method for integration is Koide it's called Euler it's fine sometimes there's just moments of awkwardness in these videos where I have to erase something or pause or get confused and like we just have to live with that it's just life I can't help it and you know when we have the crowdsource edits you won't have to listen to all this okay oiler integration what that's what we've been doing oiler integration is saying location and velocity velocity add acceleration perhaps at the other horror so it's fine okay so what's what's interesting about this is that this is incredibly simple we do this once per frame show a frame of animation do this integration show another frame of animation did this integration again right but this is totally not how the real world works right if I were to drop this eraser it doesn't like disappear and reappear here and a second later disappear and reappear here it moves continuously through time and space you know that's what calculus is for to figure out the mathematics of continuous time and space we can just approximate it by saying there's a time one thirtieth of a second we do it but you have to realize that this is very inaccurate so other physics engines box2d use is something called symplectic Euler integration I think you can look it up in the links below that I'll include there's also something called rungekutta there are lots of other methods for getting from acceleration a force to the objects new position this was a very roundabout way I hopefully use toward this video several minutes ago of saying that verlan physics Berlet physics is an implementation of verlet integration Furley integration is another methodology and what's really interesting about verlan integration I will definitely include a link to the sort of seminal paper on Berlin Christian which explains it in more detail is that it is a integration method without velocity velocity does not exist and if you think about it do you really need velocity if you know the object's previous location and its current location you don't need to know its velocity because it's velocities consensually can be extrapolated from the difference between where it is now and where it was previously and so if you look at the verlet integration methodology the algorithm is you know similar to what we're doing in our update method but different in that it doesn't actually include velocity in the algorithm it just uses the previous location in the current location so you know if you want like an advanced exercise is kind of go dive into toxic Lib source take a look at how it works and try to like write your own little verlet physics engine kind of briefly but the point is that we don't need to we have toxic libs and one of the things about early physics which is really terrific it is very fast and it is very well suited for these systems of particles that are connected with Springs so I you know this video is it kind of went on for I think the important thing is to kind of get an overview of toxic libs if you're still watching I didn't really mention where you download it but that that should hopefully be obvious from various links but I will just briefly show you that so you can get toxic libs from toxic libs org which is the website here you just want to go to the download link one thing I should mention which is just kind of I'm doing my duty as a as a servant of processing 2.0 is that all libraries should really be installed through sketch import library add library see this sketch import library add library and now you're gonna see a list of all of these wonderful libraries that you can install and processing however toxic libs happens to be at the moment an exception to this because the library is if you look in the download page it's still from pre 2.0 it works in 2.0 but you will have to download it extract it and put it in your libraries folder and once you do that you will see there it is toxic lips complete to zero in your libraries folder so if you have trouble getting toxic libs downloaded installed I'll write a comment below and hopefully we'll get it sorted out for you so this um this video is done and in the next set of videos we're actually gonna look at the the actual implementation of toxic libs this was how to practice for removal out of practice I have actually made one of these in a couple weeks okay goodbye
