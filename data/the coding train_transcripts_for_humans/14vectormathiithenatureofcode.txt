With timestamps:

00:01 - okay all right so we have about nine
00:05 - minutes here an appointment at 30 but I
00:07 - think this video can be accomplished in
00:09 - this period of time we just finished
00:11 - looking at the vector math operations
00:13 - add and multiply and in this video all
00:16 - we're going to look at is magnitude and
00:19 - normalize um maybe something extra but
00:22 - this is this is where we're starting
00:24 - okay so first of all again we're still
00:27 - at this moment with this time in place
00:29 - of just looking at these functions in a
00:31 - kind of abstract way once we can get
00:34 - through this list where it's going to be
00:35 - much more I think useful and interesting
00:37 - to actually apply these functions into a
00:39 - real practical example but I think it's
00:41 - worth looking at the math behind
00:42 - magnitude first so let's say we have
00:45 - this vector called V and we want to know
00:48 - its length now you might be asking
00:50 - yourself the question isn't that one of
00:52 - the properties of the vector a vector is
00:54 - something that has both magnitude length
00:57 - and direction well it's true but the P
01:00 - vector class if you remember if we were
01:02 - to actually look inside the guts of
01:05 - processing the bowels the depths the
01:09 - innards whatever we would see this P
01:12 - vector Java class and we would see what
01:14 - it actually is storing are the
01:16 - components of that vector this is
01:18 - something like what it looks like right
01:20 - we're storing the components of the
01:22 - vector the vector itself doesn't
01:24 - actually store its magnitude so if we
01:26 - need that vectors magnitude it needs to
01:29 - be calculated and it gets calculated
01:30 - through the magnitude function so how
01:33 - does that work well remember the
01:35 - components are an x and a y x and a y
01:40 - now look at this out of this vector we
01:44 - made a right triangle the components
01:46 - aren't x and a y we could call this H I
01:49 - don't know it'd be the hypotenuse of
01:51 - that triangle the magnitude of the
01:53 - vector first of all we often write
01:54 - notation wise the magnitude of a vector
01:57 - will look like this
01:58 - so this is what we're saying we want the
02:00 - length of that vector how do we get the
02:02 - length of that vector well if you
02:04 - remember the Pythagorean theorem that is
02:06 - the worst right triangle anybody has
02:08 - ever drew
02:08 - but a squared plus B squared equals C
02:13 - squared well solve for C C equals the
02:16 - square root of a squared plus B squared
02:19 - and in fact the magnitude of this vector
02:21 - is square root of x times X plus y times
02:27 - y right that's how we might write it in
02:28 - code and I know ass I need a little line
02:30 - here where this is this is actually only
02:32 - as far as you can see is about there but
02:34 - this is x times X plus y times y okay
02:41 - okay so that's how it works
02:44 - luckily for us all we need to do is call
02:48 - this mag function this is one of the
02:49 - reasons for using the P vector class in
02:51 - the first place because the magnitude of
02:54 - a vector something we want to know very
02:56 - very often and if every time everywhere
02:58 - in your program you had to remember to
02:59 - write square root this and square root
03:01 - that your code would get kind of balloon
03:03 - so the point of the vector class is to
03:05 - store these vector quantities and
03:08 - perform and have functions to enable
03:10 - these mathematical operations that we do
03:12 - over and over again add subtract and
03:14 - multiply magnitude normalized over and
03:16 - over again so we can just access them
03:18 - through a method so if we walk over here
03:21 - we can see before this was our this is
03:26 - where we left this little vector math
03:27 - example where we now we're making a
03:31 - vector between the center of the window
03:33 - and the mouse and then we shrunk its
03:35 - magnitude by 0.1 so it's 10% and that is
03:38 - where we left this example now we could
03:40 - do something like we could say hey let's
03:43 - draw a rectangle in the corner of the
03:46 - the screen which has a width
03:49 - okay so let's the point of what we're
03:52 - doing is we can get hat vectors lengths
03:54 - and we could store it in a variable now
03:56 - what would we do with that variable
03:57 - that's a nope that's an interesting
03:59 - question there are lots of times where
04:01 - the magnitude itself is useful if the
04:03 - magnitude of the velocity is greater
04:05 - than 10 you've going too fast and slow
04:07 - down there are lots of reasons why we
04:09 - might want to examine the magnitude of
04:11 - the vector here though I'm just going to
04:14 - use it to draw a rectangle and I'm gonna
04:17 - for dramatic effect color it red so we
04:20 - can see here
04:21 - look at that that was kind of exciting
04:23 - let's I don't know I want to just put it
04:27 - in the it's fine it's fine there
04:29 - let's move the mouse around you can see
04:31 - that rectangle is growing according to
04:33 - the size of that vector and if I don't
04:36 - want to shrink it by 10% any whole herd
04:38 - we can see that this is just
04:40 - representing the magnitude of the vector
04:42 - so again there is no this example isn't
04:45 - really doing anything it's just
04:46 - demonstrating that we could calculate a
04:48 - vector and use the quantities I'm sort
04:50 - of drawing arbitrary stuff I'm drawing a
04:52 - line I'm drawing this rectangle just to
04:54 - try to demonstrate here's the syntax
04:56 - here's how these methods work we're
04:58 - getting closer okay so interesting thing
05:01 - about magnitude I got four minutes left
05:07 - it isn't thinking about magnitude is we
05:09 - often want in our lives something we
05:14 - want in our lives is to just be normal
05:16 - sometimes actually most the time we
05:18 - don't want to be normal but actually
05:19 - what I'm talking about who knows what we
05:21 - want in our lives
05:22 - vectors sometimes we want our vectors
05:25 - forget about our lives I know nothing
05:27 - about what a good how to deal with much
05:29 - life but I do know something about
05:30 - vectors we said is one of our vectors to
05:32 - be normal and what do we mean by normal
05:34 - we want to deal with vectors that have a
05:38 - length of 1 a unit vector a normalized
05:42 - vector what does it mean to normalize
05:44 - something you can think of the word
05:45 - standardized in a way what it means to
05:48 - normalize a vector is to take any
05:50 - arbitrary vector look I can just draw
05:52 - arbitrary vectors if I want to normalize
05:54 - all these vectors I want them all to
05:56 - keep their direction but have a length
05:59 - of 1 so let's say this approximately
06:02 - represents one unit that much so this
06:05 - vector would be normalized would look
06:06 - like this this one would look like this
06:08 - this would look like this this would
06:09 - look like this
06:10 - this will look like this if I had a
06:11 - little tiny one and I want to normalize
06:12 - it it would look like this right no
06:14 - matter what its length is to normalize a
06:16 - vector is to take it and reduce it or
06:19 - grow it or just to the length of one how
06:22 - do we do that well if I have a P vector
06:25 - V which is some P vector I can say V dot
06:30 - normalize
06:33 - the interesting question though is what
06:36 - happens inside that method what is the
06:38 - process two questions here what is the
06:40 - mathematical process of normalizing a
06:42 - vector and then what's the point of
06:44 - doing that like how does that does how
06:47 - does that help anything how does that
06:48 - make anything better so let's first look
06:50 - at the mathematical process of
06:52 - normalizing the vector okay here is the
06:57 - mathematical process of normalizing the
06:59 - vector God okay let's make a vector and
07:03 - it's of length five and it has a
07:06 - component of length of four and another
07:09 - component length three and notice I made
07:11 - this a 3 4 5 triangle because we can
07:12 - kind of do that very quickly so how do
07:15 - we turn this vector into a vector of
07:18 - length 1 well how you take any number
07:20 - and turn a number into one I mean I
07:22 - could say hey I know 5 minus 4 that
07:24 - makes it 1 but that's not what we're
07:26 - looking for because if the lengths were
07:27 - 10 10 minus 4 is 6 how do you take any
07:30 - number and turn them into 1 for example
07:33 - and I'm going on too long with this how
07:35 - do I make the number 10 turning or 5 or
07:38 - negative 3 or 0.5 or 0.05 divided it by
07:41 - itself right do any of these we all get
07:45 - one so we can take a vector and divide
07:48 - it by its length that gives us a vector
07:52 - of love of length 1 and so if we divide
07:55 - the hypotenuse or the length of the
07:58 - vector by 5 we also need to divide the
08:00 - components by 5 so this vector of length
08:02 - 1 this side is 3/5 and this side is 4/5
08:06 - so that is the process if you look again
08:08 - into the guts of processing I probably
08:10 - should have this open but I'm just
08:12 - winging this stuff and I need to prepare
08:14 - but if we look into the processing
08:17 - source code we will see that to
08:19 - normalize a vector is to ask for its
08:21 - magnitude and then we would say the X
08:28 - component of that vector is equal to
08:30 - itself divided by magnitude and the Y
08:36 - component is equal to itself we
08:37 - normalize we find the light that we
08:39 - divide each side by slang that gives us
08:41 - a vector
08:42 - length one let's actually go and
08:44 - demonstrate that in our program looks
08:47 - kind of like I prepared for this okay so
08:49 - here we are back again where previously
08:52 - we asked for the vectors magnitude well
08:54 - one thing I so let's comment that out
08:57 - and now let's say Mouse dot normalize so
09:04 - I'm going to normalize that vector okay
09:09 - where is it a little what pixel vector
09:14 - tiny little one pixel vector that's the
09:16 - thing normalizing the vector makes it of
09:18 - length one which is incredibly useful
09:20 - from a mathematical standpoint not so
09:23 - useful visually because one pixel is not
09:24 - something you can really see so let's
09:27 - let's try to make it so we can see it
09:29 - well once I have it of length one why
09:30 - don't I just I don't know multiply it by
09:34 - 50 and now you can see ah it's length is
09:38 - 50 but it's always 50 it doesn't matter
09:40 - how far away I go its length is 50 the
09:44 - reason why normalizing a vector is so
09:48 - useful is once you have it length one
09:49 - it's easy to scale it to any arbitrary
09:52 - length so if you just figure out what
09:54 - we're going to see in a moment is what
09:55 - if we could just figure out the
09:56 - direction of a vector and not worry
09:58 - about its length we could just normalize
10:01 - the length one and scale it
10:02 - appropriately so this is very very
10:04 - common and there's lots of things I
10:06 - would like to do to this example but I
10:09 - think I've kind of gone on for too long
10:10 - be more useful to see this in a
10:12 - practical sense where we might normalize
10:14 - the vector I should briefly mention I
10:16 - think I'm back over here that there is a
10:19 - function called set mag and what set
10:23 - magnitude does is it normalizes and
10:25 - multiplies in one operation it says I
10:27 - want to set the magnitude to a certain
10:29 - length so first let me normalize it to 1
10:31 - and then multiply it to scale it and
10:32 - that in fact is what we've done over
10:34 - here I should just note that this could
10:36 - be simplified into one line of code by
10:39 - saying set mag 50 so these two lines of
10:43 - code are exactly equivalent to what that
10:45 - one line of code does but I think it's
10:47 - important to realize what normalization
10:49 - is for it's really what we've you
10:52 - normalize a vector it's something that
10:53 - only has direction the magnitude is no
10:55 - longer relevant and you can do all sorts
11:00 - okay a lot I have to go from the take a
11:04 - little break I'm gonna go back and we're
11:07 - actually done with this basic math stuff
11:08 - and we can we can look now we have these
11:10 - tools add subtract multiply magnitude
11:14 - normalized we can um we can actually
11:16 - start to build those into an example and
11:18 - we're gonna have a little mini physics
11:19 - engine in a moment yeah okay so see you
11:24 - let's see yeah okay

Cleaned transcript:

okay all right so we have about nine minutes here an appointment at 30 but I think this video can be accomplished in this period of time we just finished looking at the vector math operations add and multiply and in this video all we're going to look at is magnitude and normalize um maybe something extra but this is this is where we're starting okay so first of all again we're still at this moment with this time in place of just looking at these functions in a kind of abstract way once we can get through this list where it's going to be much more I think useful and interesting to actually apply these functions into a real practical example but I think it's worth looking at the math behind magnitude first so let's say we have this vector called V and we want to know its length now you might be asking yourself the question isn't that one of the properties of the vector a vector is something that has both magnitude length and direction well it's true but the P vector class if you remember if we were to actually look inside the guts of processing the bowels the depths the innards whatever we would see this P vector Java class and we would see what it actually is storing are the components of that vector this is something like what it looks like right we're storing the components of the vector the vector itself doesn't actually store its magnitude so if we need that vectors magnitude it needs to be calculated and it gets calculated through the magnitude function so how does that work well remember the components are an x and a y x and a y now look at this out of this vector we made a right triangle the components aren't x and a y we could call this H I don't know it'd be the hypotenuse of that triangle the magnitude of the vector first of all we often write notation wise the magnitude of a vector will look like this so this is what we're saying we want the length of that vector how do we get the length of that vector well if you remember the Pythagorean theorem that is the worst right triangle anybody has ever drew but a squared plus B squared equals C squared well solve for C C equals the square root of a squared plus B squared and in fact the magnitude of this vector is square root of x times X plus y times y right that's how we might write it in code and I know ass I need a little line here where this is this is actually only as far as you can see is about there but this is x times X plus y times y okay okay so that's how it works luckily for us all we need to do is call this mag function this is one of the reasons for using the P vector class in the first place because the magnitude of a vector something we want to know very very often and if every time everywhere in your program you had to remember to write square root this and square root that your code would get kind of balloon so the point of the vector class is to store these vector quantities and perform and have functions to enable these mathematical operations that we do over and over again add subtract and multiply magnitude normalized over and over again so we can just access them through a method so if we walk over here we can see before this was our this is where we left this little vector math example where we now we're making a vector between the center of the window and the mouse and then we shrunk its magnitude by 0.1 so it's 10% and that is where we left this example now we could do something like we could say hey let's draw a rectangle in the corner of the the screen which has a width okay so let's the point of what we're doing is we can get hat vectors lengths and we could store it in a variable now what would we do with that variable that's a nope that's an interesting question there are lots of times where the magnitude itself is useful if the magnitude of the velocity is greater than 10 you've going too fast and slow down there are lots of reasons why we might want to examine the magnitude of the vector here though I'm just going to use it to draw a rectangle and I'm gonna for dramatic effect color it red so we can see here look at that that was kind of exciting let's I don't know I want to just put it in the it's fine it's fine there let's move the mouse around you can see that rectangle is growing according to the size of that vector and if I don't want to shrink it by 10% any whole herd we can see that this is just representing the magnitude of the vector so again there is no this example isn't really doing anything it's just demonstrating that we could calculate a vector and use the quantities I'm sort of drawing arbitrary stuff I'm drawing a line I'm drawing this rectangle just to try to demonstrate here's the syntax here's how these methods work we're getting closer okay so interesting thing about magnitude I got four minutes left it isn't thinking about magnitude is we often want in our lives something we want in our lives is to just be normal sometimes actually most the time we don't want to be normal but actually what I'm talking about who knows what we want in our lives vectors sometimes we want our vectors forget about our lives I know nothing about what a good how to deal with much life but I do know something about vectors we said is one of our vectors to be normal and what do we mean by normal we want to deal with vectors that have a length of 1 a unit vector a normalized vector what does it mean to normalize something you can think of the word standardized in a way what it means to normalize a vector is to take any arbitrary vector look I can just draw arbitrary vectors if I want to normalize all these vectors I want them all to keep their direction but have a length of 1 so let's say this approximately represents one unit that much so this vector would be normalized would look like this this one would look like this this would look like this this would look like this this will look like this if I had a little tiny one and I want to normalize it it would look like this right no matter what its length is to normalize a vector is to take it and reduce it or grow it or just to the length of one how do we do that well if I have a P vector V which is some P vector I can say V dot normalize the interesting question though is what happens inside that method what is the process two questions here what is the mathematical process of normalizing a vector and then what's the point of doing that like how does that does how does that help anything how does that make anything better so let's first look at the mathematical process of normalizing the vector okay here is the mathematical process of normalizing the vector God okay let's make a vector and it's of length five and it has a component of length of four and another component length three and notice I made this a 3 4 5 triangle because we can kind of do that very quickly so how do we turn this vector into a vector of length 1 well how you take any number and turn a number into one I mean I could say hey I know 5 minus 4 that makes it 1 but that's not what we're looking for because if the lengths were 10 10 minus 4 is 6 how do you take any number and turn them into 1 for example and I'm going on too long with this how do I make the number 10 turning or 5 or negative 3 or 0.5 or 0.05 divided it by itself right do any of these we all get one so we can take a vector and divide it by its length that gives us a vector of love of length 1 and so if we divide the hypotenuse or the length of the vector by 5 we also need to divide the components by 5 so this vector of length 1 this side is 3/5 and this side is 4/5 so that is the process if you look again into the guts of processing I probably should have this open but I'm just winging this stuff and I need to prepare but if we look into the processing source code we will see that to normalize a vector is to ask for its magnitude and then we would say the X component of that vector is equal to itself divided by magnitude and the Y component is equal to itself we normalize we find the light that we divide each side by slang that gives us a vector length one let's actually go and demonstrate that in our program looks kind of like I prepared for this okay so here we are back again where previously we asked for the vectors magnitude well one thing I so let's comment that out and now let's say Mouse dot normalize so I'm going to normalize that vector okay where is it a little what pixel vector tiny little one pixel vector that's the thing normalizing the vector makes it of length one which is incredibly useful from a mathematical standpoint not so useful visually because one pixel is not something you can really see so let's let's try to make it so we can see it well once I have it of length one why don't I just I don't know multiply it by 50 and now you can see ah it's length is 50 but it's always 50 it doesn't matter how far away I go its length is 50 the reason why normalizing a vector is so useful is once you have it length one it's easy to scale it to any arbitrary length so if you just figure out what we're going to see in a moment is what if we could just figure out the direction of a vector and not worry about its length we could just normalize the length one and scale it appropriately so this is very very common and there's lots of things I would like to do to this example but I think I've kind of gone on for too long be more useful to see this in a practical sense where we might normalize the vector I should briefly mention I think I'm back over here that there is a function called set mag and what set magnitude does is it normalizes and multiplies in one operation it says I want to set the magnitude to a certain length so first let me normalize it to 1 and then multiply it to scale it and that in fact is what we've done over here I should just note that this could be simplified into one line of code by saying set mag 50 so these two lines of code are exactly equivalent to what that one line of code does but I think it's important to realize what normalization is for it's really what we've you normalize a vector it's something that only has direction the magnitude is no longer relevant and you can do all sorts okay a lot I have to go from the take a little break I'm gonna go back and we're actually done with this basic math stuff and we can we can look now we have these tools add subtract multiply magnitude normalized we can um we can actually start to build those into an example and we're gonna have a little mini physics engine in a moment yeah okay so see you let's see yeah okay
