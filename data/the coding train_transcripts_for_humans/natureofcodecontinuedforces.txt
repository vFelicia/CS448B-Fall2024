With timestamps:

00:01 - [Music]
00:22 - [Music]
00:54 - [Music]
01:06 - [Music]
02:03 - [Applause]
02:05 - [Music]
03:22 - [Music]
03:58 - [Music]
04:15 - [Music]
05:21 - [Music]
05:58 - check check 1 2 3 audio test hello
06:02 - coming to you live in just about 15
06:05 - seconds good morning happy Monday good
06:24 - Monday morning no no no no no no that's
06:27 - not my that's not my phrase I'm just
06:29 - it's no Lodge to mpj from fun fun fun
06:32 - fun fun fun there's three funds and the
06:35 - fun fun function okay here we are
06:40 - I don't know oh boy I don't know if
06:42 - anything is working here mess
06:45 - hi welcome it is me Dan on the coding
06:50 - train Oh live on a holiday because I was
06:54 - supposed to be here on Friday and I just
06:57 - couldn't get it together to be here for
06:58 - a number of different reasons that I
07:00 - won't get into and I thought I'll make
07:03 - it on Monday and it'll happen I'll make
07:05 - it on Monday and then I woke up talking
07:07 - thinking oh really I was gonna
07:08 - livestream today yeah so rushed out of
07:12 - bed threw on the same exact clothes that
07:15 - I was wearing the last time I live
07:16 - stream so that when these videos get
07:18 - edited no one will be the wiser
07:21 - and Here I am a special shout-out to E
07:24 - and O who I believe are maybe watching
07:26 - from home this morning just throwing me
07:30 - for a loop a little bit and also
07:34 - shout-out to our on button I can never
07:36 - get this right
07:37 - brilliant org the sponsor of today's
07:40 - livestream brilliant org which was also
07:43 - the sponsor of my guest spot on M PJs
07:46 - fun fun function which I remembered
07:47 - which will also add the same topic
07:49 - that's what I'm going to do today life
07:51 - is strange also in this room appeared a
07:55 - light that wasn't here the last time
07:58 - maybe can I get you a view of this light
08:01 - hold on a second here
08:03 - I'm gonna show you something rather
08:04 - strange a little little inside baseball
08:06 - here a little behind-the-scenes and will
08:10 - also shout out to all of you who are
08:11 - watching this on a television because
08:13 - apparently lots of people watch the
08:16 - coding trade on a television I have now
08:19 - learned brilliant org slash coding train
08:24 - you can sign up for free and do a fun
08:28 - puzzle a challenge there's a computer
08:29 - science course there's some other stuff
08:30 - I'll show you later but you can also if
08:33 - you're interested get a discount 20% off
08:36 - the premium a subscription okay let me
08:39 - look it's just much brighter in here
08:41 - right now
08:42 - so I'm not sure if I need to do
08:43 - something about the lighting but let me
08:46 - see if I can show you something yes okay
08:51 - this is my little roaming camera which I
08:55 - can point at me oh it's upside down but
08:57 - I can do this thing here there we go so
09:01 - look look look at the different in this
09:06 - thing about this camera that makes me
09:08 - look younger okay so I'm just going to
09:14 - show you is in this room here right up
09:17 - there this is a hole light on the
09:20 - ceiling that wasn't there the last time
09:23 - I was in this room I don't know where
09:25 - it's a mystery like why did it appear
09:27 - where did it come from these are usually
09:29 - the lights that I use you can see these
09:33 - are the lights that are on the wall
09:34 - all in addition to the camera but and
09:38 - over here but oddly enough there's a sex
09:42 - relate very strange okay we don't need
09:46 - this I don't know what I'm doing here
10:06 - much too much fun in here ah okay that's
10:09 - the floor what No ah
10:10 - okay turn this camera off it's revealing
10:13 - too much and there we go so I'm here
10:25 - live once again did I say that already
10:27 - I'm so tired but um let's be serious for
10:37 - a sec you know what you don't actually
10:38 - nevermind I think what we need to do is
10:42 - who know it's missing again I didn't
10:45 - bring my random number I didn't bring my
10:48 - ran few minutes to go get it
10:51 - oh and this is up again why is this here
10:54 - that's let me turn this off okay let's
11:01 - be serious for a moment everybody the
11:05 - purpose of today's livestream is for me
11:07 - to continue my set of tutorials for the
11:11 - nature of code 2020 a set of tutorials
11:14 - that follow along with a book that I
11:16 - wrote many years ago in 2012 was when it
11:18 - was published and the examples were made
11:20 - in processing Java and I'm redoing a set
11:22 - of video tutorials to go along with
11:23 - those examples in JavaScript so I will
11:25 - continue that today I will not be
11:30 - starting with the ceremonial reading of
11:32 - the random numbers when I take an
11:33 - intermission which I will do at
11:35 - approximately 11:30 I will go and get
11:37 - that random number book but now is a
11:43 - good time for me to highlight my most
11:47 - recent
11:47 - video that came out on the coding tray
11:49 - and the coating of Cabana hilbert curve
11:51 - challenge don't they look kind of like
11:53 - washed out maybe do I need to like deal
11:58 - with the lighting I don't know
12:01 - and it was it's this if I completely
12:07 - forgot how to livestream so I'm gonna go
12:11 - here and I'm going to go to the Cabana
12:16 - let's let's go to the Cabana
12:24 - so I really would like to make a lot
12:28 - more of these it certainly was this
12:32 - particular video was watched quite a bit
12:35 - more than my usual uploads so that was
12:38 - kind of nice to see I'm gonna start
12:48 - that happens
12:49 - [Music]
13:02 - [Music]
13:06 - check check one two three checking the
13:08 - mic check check hello welcome to oh the
13:20 - coding train with me your host dan
13:22 - Shipman it's a Monday morning this is a
13:24 - bit of an unusual time for me to
13:26 - livestream in fact it's a holiday here
13:28 - in the United States
13:30 - NYU is closed even today but I didn't
13:34 - miss my livestream on Friday so I am
13:36 - returning you could all see right
13:41 - through this right
13:43 - I missed my livestream on Friday so I'm
13:47 - returning today to continue my video
13:50 - tutorials on nature of code now I am I
13:52 - did point out in my dress rehearsal you
13:55 - watched that there was a little bit of
13:57 - an issue with the lighting but mister
14:01 - ugly in the chat is saying the light is
14:03 - looking fine maybe brighter than you're
14:05 - used to but looks good I look good thank
14:07 - you thank you
14:09 - that sweater makes me think your tie is
14:12 - hanging sideways yeah by the way I was
14:15 - rewatching the edited versions of the
14:18 - videos the nature of code videos well
14:21 - there's like four four of them that are
14:22 - ready I mean they're very lightly edited
14:24 - they're really just pulled out of the
14:26 - last live stream I shouldn't mention
14:28 - this actually it's gonna drive everybody
14:30 - crazy I'm not gonna mention there was
14:32 - something in the videos driving me
14:33 - completely insane oh I'll just mention
14:36 - it because you know you're only like 200
14:40 - ish people and there'll be a more people
14:43 - who will watch it but oh my hair was
14:46 - kind of like I'd be like hair like sort
14:48 - of like curled like a little couple
14:49 - pieces of hair like that kind of that's
14:52 - and I couldn't watch it so I don't know
14:55 - I've I have to redo all those videos
14:56 - just because of that but we'll see okay
15:03 - and let's see so before I get going with
15:06 - the nature of code stuff
15:10 - Simon's actually about the convolutional
15:13 - neural network videos those are done
15:15 - they're ready to go I am one of the
15:17 - things that I do is I use a service
15:18 - called 3-play media to caption
15:22 - everything and it takes a while for the
15:24 - captions to be ready I think these are
15:25 - longer they're just taking a while also
15:27 - I got to make the thumbnail oh that
15:29 - stuff so I just haven't gotten around to
15:30 - it but I appreciate you asking those
15:32 - will be out soon and I think though
15:38 - before uh uh before I move on to doing
15:44 - the nature of code stuff I would like to
15:46 - show these community contributions
15:47 - there's a lot of them which is very
15:49 - exciting and I don't have a system I
15:54 - really think that I look pale and weird
15:57 - matchy will color Greg actually I need
15:59 - to do a test
16:00 - I'm having some recording issues I have
16:02 - to also sneeze so I'm gonna mute my
16:03 - microphone
16:14 - very serious sneeze my sneezes you know
16:17 - I've said close to setting a world
16:20 - record at the sneeze Department I was
16:23 - coming over here because I was going to
16:29 - look for something that I've now
16:30 - forgotten anyway I would like to go
16:35 - through these community contributions so
16:37 - I I guess I'm just gonna click through
16:39 - all of them and try to not spend more
16:41 - than 20 to 30 seconds on any of them so
16:43 - we'll get through them I mean in just a
16:46 - little bit I will mention that in the
16:50 - discord we've been people have been
16:53 - sharing these so if you haven't joined
16:54 - the discord maybe somebody could post a
16:55 - link to the discord in in the chat here
17:01 - and Arnab is asking did it break your 10
17:03 - print contributions record I don't think
17:06 - so I think the I think if I go to coding
17:12 - challenges and I look for 10 print and I
17:14 - go to to the challenge I think this one
17:16 - I mean just eyeballing it this one looks
17:19 - like it certainly has more so no video I
17:22 - believe has more community contributions
17:24 - than the 10 print one but I think the
17:26 - helper curve is on its way so let's look
17:29 - at some of these I kind of want to do
17:33 - them in so David Snyder made this wheel
17:38 - thing let's let's we got to keep working
17:40 - on is a very long long term project
17:44 - because I like the idea of like doing
17:45 - them in random order okay but let's see
17:48 - so this one is translated to C sharp
17:50 - which is interesting I actually went to
17:52 - okay so I assume that this is just gonna
17:54 - give me the C sharp curve so I won't
17:56 - spend more time looking at that but
17:58 - thank you Clement
17:59 - and I recently went to a workshop on
18:03 - unity know about this unity thing I
18:08 - should really learn that it looks
18:10 - amazing so C sharp is in unity okay
18:15 - Hilbert and Z curve oh look at this by
18:19 - Kobo L so it looks like here let me make
18:23 - this a little smaller
18:24 - I can like play with the color
18:26 - that's fun I can switch to a different
18:29 - curve so there's also the Z curve which
18:31 - is another space-filling curve looks
18:32 - like that that is awesome
18:33 - random color and then I can adjust the
18:35 - order and I like how the thickness and I
18:40 - should probably make these darker so we
18:42 - can see it a little better I like how
18:45 - that the thickness of the stroke is tied
18:48 - to the order that's cool
18:50 - great work alright where are we oops
18:55 - now I'm sniffling him now I want to see
19:00 - Oh done in Haskell with five lines of
19:03 - code amazing and I suppose this is the
19:09 - result
19:10 - and I suppose we could see let's let's
19:12 - let's see if this is really five lines
19:14 - of code well I was like a lot of code to
19:16 - me I guess probably just in here this is
19:19 - the actual code cool I don't understand
19:25 - any of this
19:27 - but it looks really cool thank you for
19:30 - sharing that
19:30 - Nikita interpolation between orders oh
19:34 - okay I'm excited for this I am really
19:39 - excited for this
19:46 - yeah there we go this is what I was
19:48 - hoping to see really nice there's
19:56 - something about it that doesn't feel
19:57 - like it's coming from I mean it's yeah
20:00 - it's coming two corners kind of go that
20:02 - it's really cool I don't mean this is a
20:04 - critique it's a little bit different
20:06 - than the three blue one Brown where I
20:07 - feel like somehow it pulls out from the
20:09 - center if that makes any sense whereas
20:11 - this is like pulling out from the
20:12 - corners that is really cool I wanted to
20:16 - make a version of this myself but didn't
20:19 - get around to doing so great work K week
20:25 - Mon is pointing out that the Haskell one
20:29 - was refactored for making it easier to
20:32 - read okay
20:34 - driving a car oh I know zooms out sorry
20:37 - I'm gonna get to the driving a car going
20:39 - in order whoa that is also so cool I
20:45 - love this I love the fade in the zoom
20:49 - now is there there must be a way to get
20:52 - the the the one that you're kind of like
20:56 - zooming out a line there's like a
20:58 - crossfade between the one that was
20:59 - previously drawn in the next one when it
21:02 - finishes and he's barely noticeable but
21:06 - I feel like those there's must be a way
21:07 - to get those like aligned perfectly how
21:10 - far how long will this go for oh my god
21:13 - this is so awesome
21:18 - I hope I could I didn't actually haven't
21:23 - looked at these I saw some of them but
21:24 - this what I had not seen I guess it
21:26 - finished my sneeze no okay let's look
21:35 - that wasn't so beautiful I'm going to
21:37 - remove myself for a sec okay I think
22:21 - that one is you so cool okay let's go to
22:24 - driving a car this is wild
22:28 - okay no way it's when I didn't see
22:31 - already so I'm I'm acting this is acting
22:34 - but I was this excited when I saw her on
22:39 - woah this is much harder than I thought
22:45 - do I win a prize if I make it all the
22:47 - way oh look I could just go anywhere I
22:49 - want that's cool I like the idea of like
22:52 - constraining it or maybe using this as a
22:53 - path for my like AI cars that I never
22:56 - actually made a video about but that I
22:58 - built during a live stream cool this is
23:01 - awesome oh and that you know vectors and
23:04 - forces all ties together image rendering
23:08 - curve what is this this one's in
23:12 - processing so one thing I would say is
23:14 - when you if you make something that
23:19 - doesn't run in the browser one is if you
23:21 - could do like a blog post about it will
23:23 - you write a little bit and then maybe do
23:24 - a screen capture in the blog post that's
23:26 - really helpful to like just see your
23:28 - project instantly another option could
23:31 - be to add a readme file and then you can
23:33 - embed an image into the rimi file or
23:35 - even like a gif so I'm very happy to
23:37 - download this and take a quick peek at
23:38 - it but you know that's something that I
23:41 - would really suggest that you get in a
23:43 - habit of when you're building up a
23:44 - portfolio and a portfolio is maybe too
23:46 - strong going forward but just sharing
23:48 - your work on the Internet that the
23:51 - source code is great but if you can
23:53 - write a bit about your process and
23:55 - document it with some images that's
23:56 - always a wonderful thing to do so let's
23:59 - see though if I can make this happen
24:00 - really fast
24:16 - okay okay sure no yes fine whatever
24:20 - oh yes no aah oh my god help me
24:39 - cool so it's doing the Hilbert curve and
24:43 - using the pixels from a particular image
24:46 - that's wonderful thank you for sharing
24:48 - that
24:51 - um hilbert curve with p5.js beautiful we
25:02 - are seeing it happening here on code pen
25:04 - I always like to see other code editors
25:06 - that people are using now we're down to
25:09 - editable space-filling curve by Simon
25:12 - Tiger whoa okay look at this
25:16 - talk about self-documenting here's the
25:18 - p5.js sketch with a whole page
25:20 - describing everything that's going on oh
25:22 - my goodness Wow what is going on here so
25:28 - there's a seed there's a hilbert curve
25:30 - there's the Morton curve the z-order
25:31 - curve the piano curve the sierpinski
25:32 - triangle I don't know what's going on
25:36 - here I don't know how to operate this oh
25:38 - oh but I could oh I can like design my
25:41 - own and then it'll make it in here and
25:44 - then there's like a seed Oh was the seed
25:48 - do little boy what did I do I ruined it
25:51 - oh I see the configuration is maybe tied
25:58 - to a number so this is the seed oh I see
26:01 - this shows the hilbert curve and then
26:03 - maybe these show the rotations and then
26:07 - I can also do the grid size whoa oh my
26:09 - god this is wild Simon and these are the
26:14 - rotation instructions oh my goodness I'm
26:17 - gonna have to play with this more later
26:18 - really unpacked this great work image
26:25 - dithering with hilbert curve okay oh I
26:28 - can choose a file
26:31 - [Music]
26:36 - let me find a file here I've got a
26:43 - kitten image
26:47 - so I uploaded this kitten image let's
26:50 - increase the order there we go
26:53 - cute and now I can animate it nice work
27:02 - so this there's the dithering thing is
27:04 - really interesting because I did some
27:07 - quick experiments where I just pulled a
27:09 - pixel color from an image and just
27:12 - assign that to the particular line
27:14 - segment on the hilbert curve but the
27:18 - dithering process involves actually
27:22 - looking at pixels on the previous spot
27:26 - and the next spot along we hold for a
27:27 - curve are looking at the difference
27:28 - between the brightness and then coloring
27:30 - that way I'm gonna have to take a break
27:32 - and get some water or something I've
27:33 - really I think I'm like allergic to this
27:36 - new light let's see if I can get through
27:39 - all these though Hilbert's flower whoa
27:42 - that is wild
27:44 - this is some variation on the Hilbert's
27:46 - curve probably changing like random
27:49 - angles or something and it makes a nice
27:50 - flower pattern I love that thank you
27:52 - Brian new animated hilbert curve
27:55 - we've got more morphing yes this is what
27:59 - I mean by it sort of feeling like it's
28:01 - morphing from the center not the corners
28:04 - if that makes any sense so this is I
28:07 - love I love these animations and this
28:10 - one looks like it was done in Visual
28:11 - Basic so this is what I mean by you can
28:13 - record a gif and included as part of
28:15 - your github repo to help be able to see
28:17 - it real quick if it's not executable in
28:19 - the browser piano curve oh yes I wanted
28:23 - to see this this is from K week Mon and
28:28 - of toggle mode whoa I know what's going
28:32 - on here there's an order slider and I
28:37 - don't know what the toggling of the mode
28:39 - does but I like it thank you for this
28:43 - I'm gonna have to look at this more
28:44 - later as well
28:46 - hilbert curve SVG from L system so L
28:51 - system is another technique I do have
28:53 - some videos on it for how that you can
28:54 - generate a variety of different fractal
28:57 - patterns one of which is the hilbert
28:58 - curve I like that I can just select
29:00 - rainbow
29:01 - oh oh oh that's awesome and I guess this
29:04 - is rendering it as an SVG rather than
29:05 - canvas drawing we have got the Gosper
29:10 - oh look at that that is so cool I'm
29:16 - gonna have to do oh and then like the
29:18 - colors are cycling through it oh I'm
29:22 - gonna have to I'm gonna have to try
29:27 - doing something like this I can animate
29:30 - it oh and I'm animating it and the
29:32 - colors this is like the animation speed
29:36 - wild ok great work dragon curve oh we've
29:40 - got a lot of different curves from David
29:42 - Schneider now I'm having trouble seeing
29:43 - the difference between visually between
29:46 - that that the dragon curve oh maybe
29:48 - there's like an interface that I missed
29:50 - on this one oh hold right click tap and
29:56 - scroll to impress any key I see so this
29:58 - one will cycle through different curves
30:02 - cool I will play with that more later
30:04 - I'm just moving quickly now and hilbert
30:06 - curve translated in PI game alright
30:10 - let's take a look a little bit of Python
30:12 - here ooh okay
30:15 - lying intersection oh I love a good line
30:17 - intersection fun good oh there's a
30:19 - create vector function oh nice just like
30:21 - in p5 okay thank you for all these
30:26 - wonderful community contributions I am
30:29 - now going to move on to talking about
30:33 - vectors and nature of code again but I
30:35 - need to take just like two minutes I
30:37 - have a frog a literal frog in my throat
30:40 - and I will be right back so let me put
30:43 - on some music for you I'm just going to
30:44 - put the little intermission animation
30:46 - right back
30:50 - [Music]
31:10 - [Music]
31:44 - [Music]
31:55 - [Music]
32:16 - I'm back all right everyone
32:31 - [Music]
32:35 - there's a lot of people watching today
32:38 - I'm not sure why I guess it's maybe it's
32:40 - a holiday here in the US and a lot of
32:42 - you are at home and are available to
32:44 - watch kind of get myself situated here
32:54 - [Music]
33:26 - whoa what is going on
33:29 - [Music]
33:38 - oh this is because these are new I'm
33:42 - looking for where I left off George oh
33:44 - yeah February 7th there we go okay
34:18 - [Music]
34:31 - not here
34:35 - okay
34:39 - so I think I think where I left off and
34:46 - where I need to be today is adding the
34:53 - concepts of adding the concept of
34:57 - acceleration to this particular example
34:59 - and then I'm going to make an example
35:05 - where the object the Walker accelerates
35:10 - towards the mouse and then that will
35:15 - require me to look at a couple different
35:17 - things one is static versus non static
35:24 - functions as well as normal to
35:30 - normalized function so those are the
35:32 - main things that I want to look at here
35:35 - static versus non static normalized make
35:38 - an example where the Walker accelerates
35:40 - towards the mouse and then that will set
35:44 - me up for moving on to chapter 2 ok now
35:54 - before I apologize for this but last
35:57 - time I did my nature of codes session
36:00 - the separate backup recording failed so
36:07 - I just want to check to see if that is
36:11 - working oh of course I didn't even start
36:13 - it sorry I'm gonna just check let me
36:15 - just hit multi corner so I'm gonna
36:18 - record for a couple minutes and I will
36:23 - check that in a second
36:30 - so I think
36:43 - and I lost the chat here we go okay
37:00 - so let me go for a second to
37:18 - right here
37:28 - let's try this
37:36 - I do chapter to NOC underscore - yeah
37:43 - or actually underscore one
37:58 - yeah this is what I'm looking to do
38:09 - a quick little adjustment
38:19 - okay
38:21 - so this is ultimately to the example
38:26 - that I'm going to sort of build today
38:28 - and go through a lot of the pieces of
38:30 - this in terms of how vector subtraction
38:35 - works house what's the difference
38:38 - between a static function with p5 dot
38:40 - vector and and there should be let and
38:45 - also how normalized function works okay
38:51 - really not anticipate having this sort
38:54 - of difficulty today so many people
39:00 - watching all right everyone oh so I'm
39:12 - really concerned about the audio but I
39:14 - know it's complaining so I guess it's
39:16 - fine
39:26 - I feel off today
39:29 - I don't know why but maybe maybe things
39:31 - will start to sort of like kick in and
39:33 - feel less off in a moment
39:37 - and I'm like closing things and I don't
39:40 - want to close
39:44 - that's fine though
39:53 - come back to me
39:56 - there we go
40:02 - everything's going to be fine
40:06 - everything's going to be fine
40:10 - this is what was left in the last one
40:13 - now now let me just check and make sure
40:15 - the recording system is working I'm
40:18 - gonna hit stop on it and I'm gonna just
40:20 - quickly take a quick peek at it you know
40:24 - I apologize for doing this test test
40:29 - mute my mic here
41:24 - system appears to be working hey need a
41:31 - vacation okay let me get back to here
41:39 - when we get back to here let me get back
41:42 - to here and here we go well what's going
42:00 - on with this camera what happened to you
42:02 - my little friend someone was in here
42:06 - messing with this camera god
42:28 - and you see that okay looks pretty in
42:36 - focus so I will make that as a yes
42:53 - all right
42:58 - so
43:06 - some actual content is happening now 40
43:10 - minutes in welcome back to nature of
43:18 - code chapter 1 vectors and where I am
43:21 - leading to where this whole set of
43:24 - videos will eventually very shortly get
43:26 - to is building this particular example
43:30 - where as I move the mouse around this
43:33 - Walker object or a mover object or a
43:35 - particle object whatever I want to call
43:36 - it is accelerating towards the mouse
43:39 - almost as if it's attracted to the mouse
43:41 - and in chapter 2 I will actually look
43:44 - more formally at gravitational
43:46 - attraction and how that works but in
43:48 - order to get to building this example
43:50 - there's a couple bits well there's a
43:52 - very important bit that is oh well
43:55 - there's editing I have added in I forgot
44:07 - but before I get to building this
44:09 - example I want to take the time to cover
44:12 - something known as a static function
44:14 - because this idea of a static function
44:16 - is fundamental to how I'm going to work
44:20 - with p5 vectors in all of the examples
44:22 - and in the previous video I created this
44:31 - example that looked at what happens when
44:33 - you create a random vector a vector
44:36 - always of length 1 but with any given
44:39 - random direction
44:51 - all right so sometimes I see the chat
44:53 - out of the corner of my eye and I'd like
44:55 - it sends my mind in another direction
44:57 - and I lose my train of thought so let me
45:02 - just do that again this is the example I
45:08 - left off with in the previous video oh
45:10 - boy I got to fix my hair this is the
45:14 - example I left off with in the previous
45:16 - video where I was looking at what
45:18 - happens when you pick a random vector
45:20 - and not just oh right I know what I want
45:25 - to say this is the example from the
45:34 - previous video where this is the example
45:39 - for the previous video where I looked at
45:41 - picking a rock rock rock rock rock rock
45:52 - rock rock rock rock rock rock yes 375
46:01 - people are watching a lunatic on the
46:03 - internet talking about random vectors
46:05 - and clucking like a chicken and every
46:08 - once awhile I see the mic go all the way
46:10 - into the red and it just makes me very
46:13 - nervous what if the audio is just
46:15 - recording terribly right there seemed to
46:19 - be some interference high pitched low
46:20 - volume noise right right I saw that as
46:23 - well all right we're just gonna hope
46:27 - that everything's fine okay we go ed
46:31 - says he's finally lost it I would sit
46:33 - finally I think I think I think it's
46:35 - well-established that I've lost it years
46:37 - ago this is the example I made
46:43 - previously where I picked a random
46:45 - vector and so the vector has a random
46:47 - Direction always of length 1 and then
46:49 - I'm scaling it with some random value so
46:52 - reason why I'm highlighting this is
46:53 - right here the way I picked a random
46:56 - vector P 5 dot vector dot random 2d is a
46:58 - little strange and this is in fact an
47:01 - example of a
47:02 - attic function okay oh hello there it's
47:10 - me by the weight board
47:24 - let's establish something
47:36 - this is me creating a vector object the
47:41 - variable V now stores a vector object of
47:44 - type P v dot vector I can call functions
47:52 - on that object v dot v dot multiply
48:13 - this is no different than what I was
48:15 - doing in my example with the Walker I
48:17 - make a walker object I say Walker dot
48:20 - update Walker dot show I'm calling
48:22 - functions on the actual instance of the
48:24 - Walker itself that's what I'm doing here
48:30 - calling functions on the actual instance
48:33 - of the vector itself the actual vector
48:35 - object V which is a vector object a p5
48:38 - vector object this is how this is quite
48:48 - typical Twite I don't know what I'm
48:50 - saying here I know what I'm saying here
48:54 - but I'm saying it too many times don't
48:55 - need to say this many times this is
48:58 - conventionally how you've seen how this
49:01 - is conventionally how I've talked about
49:02 - and used object-oriented programming in
49:05 - my video tutorials most of them but
49:08 - there is another way maybe you've seen
49:16 - this before in other contexts
49:19 - programming in JavaScript for example
49:21 - have you ever seen something that looks
49:24 - like this math dot random
49:35 - there's a mouse cursor right there in a
49:38 - weird place
50:04 - this is the documentation page for the
50:07 - math dot random function is math an
50:10 - object and why does it have a capital
50:13 - capital letter this looks very different
50:15 - than Walker with a lowercase which I
50:19 - know is an object dot update but it's
50:21 - also something dot a function call all
50:30 - of this
50:39 - yeah it's a good point someone's talking
50:41 - about why it was named bolt is it a
50:43 - product or factor or scale I kind of
50:47 - agree with that actually we should
50:48 - change that I
51:09 - yeah
51:17 - math is not an object instance just like
51:27 - p5 dot vector is not an object instance
51:30 - p5 type vector is a class from which I
51:33 - can make vector objects math is also a
51:35 - class so this was a very long-winded way
51:38 - to say that a static function is one
51:44 - that is called on the class name itself
51:47 - p5 dot vector dot add for example this
51:54 - is the static version of the add
51:56 - function this is the IO regular
51:58 - non-static the object method itself add
52:01 - and so number one this is just me
52:04 - defining for you what it means to have a
52:06 - static function and in many cases static
52:10 - functions art will can I just do this
52:15 - whole thing over because I kind of like
52:18 - didn't really know where I was going or
52:20 - why I was here I didn't like come back
52:21 - to life right not that I don't know
52:24 - maybe I haven't come back to life yet
52:25 - but I really felt that you to come back
52:27 - to life and I feel like this video is
52:29 - now when it gets editors to be like 20
52:31 - minutes long
52:32 - you really just wanted to say something
52:33 - very simple which is like what a static
52:35 - function is or maybe I just need to get
52:42 - the random number book as some people
52:44 - are avoiding out
52:50 - [Music]
52:52 - no and people get very upset with me
52:54 - when I decided to get to start this
52:55 - whole thing over but I am I am I am you
53:01 - can't stop me
53:05 - trust me the world the people of the
53:09 - future who will be watching the nature
53:11 - of code video tutorials will thank you
53:13 - for suffering through me doing this
53:15 - twice because they will get to watch a
53:19 - like two minute video where I just
53:21 - quickly explain what a static function
53:22 - is rather than this 20 minutes or like
53:26 - choppy edited weird thing so you're
53:30 - doing a service think of well the good
53:32 - you're doing for the world right now
53:34 - static method and instance method and
53:37 - we're know very kindly as saying that I
53:38 - can start over which I appreciate
53:41 - okay
53:59 - hello it is I me not you but a person I
54:08 - should while I'm here I should check to
54:11 - make sure the recording thing is working
54:12 - I you says have you ever made a two
54:16 - minute long video no thank you Jason
54:23 - Jason writes the thinking out loud is a
54:25 - valuable lesson I appreciate that all
54:28 - right let's just
54:29 - I can eat humor me for like another
54:31 - little bit we are let's see here I gotta
54:43 - turn this off
55:28 - the recording system seems to be working
55:30 - okay so I'm gonna take that as a good
55:33 - sign and then as I lose viewer after
55:38 - viewer after viewer and we get the chat
55:44 - back here
55:53 - I think I'm not gonna go down the road
55:55 - of looking at the math dot random okay
56:04 - alright hello welcome to another chapter
56:10 - one video for a nature of code on
56:12 - vectors so I am building to something I
56:14 - am getting somewhere
56:16 - to a place where I'm going to make this
56:18 - example for you that looks at something
56:20 - called acceleration and in fact has this
56:22 - walker or mover or particle whatever you
56:24 - want to call it object accelerating
56:26 - towards the mouse but there are some key
56:29 - concepts that this video will required
56:31 - that I want to talk about first so one
56:33 - of well no not one of which there are
56:40 - some key concepts however that I want to
56:42 - talk about that doing this example
56:44 - requires so if I go back to where I just
56:47 - left off you know looking at how to pick
56:49 - a random vector using p5 dot vector
56:52 - random to D so this picks a random
56:54 - vector always of length 1 but any random
56:56 - direction and then I'm scaling it
56:58 - randomly we get this nice pattern but
57:00 - this here p5 dot vector random 2d might
57:04 - look a little strange to you and this is
57:06 - an example of a static function random
57:09 - 2d is a static function it's called on
57:12 - p5 dot vector rather than like this
57:14 - function multiply which is called on V
57:17 - the object itself
57:34 - let's look at this a bit more closely
57:56 - this is the conventional way that I have
57:59 - looked at object-oriented programming in
58:01 - most of my videos I make an object often
58:04 - I'm saying new something but p5 has this
58:06 - create vector function that makes the
58:08 - object for us minor a bit a subtle
58:11 - distant
58:16 - remember how I said I was going to redo
58:18 - this I wouldn't have any problems i got
58:21 - problems this is the conventional way
58:28 - that I have looked at and described
58:30 - object-oriented programming in most of
58:31 - my videos I have a variable V that I
58:34 - make an object now this this is a little
58:36 - bit strange
58:42 - [Music]
58:44 - no more starting over no more no more no
58:47 - no you are bad video tutorial person
58:51 - maker thingy and some days just aren't
58:56 - aren't my days the last time I did this
58:59 - it was went pretty well I thought
59:14 - this is the conventional way this is
59:19 - this is a conventional way that I have
59:21 - looked at object-oriented programming in
59:23 - most of my videos I make an object let V
59:25 - equals create vector now truthfully
59:27 - you'll more likely see something equals
59:30 - new something but in this case instead
59:33 - of saying new p5 dot vector do I really
59:36 - want to talk about this we need to I
59:37 - hate that I have this create vector
59:39 - thing which is just really throwing me
59:41 - off in this explanation cannot seem to
59:44 - manage to get gotta get that book of
59:50 - random numbers
60:01 - this this is the conventional way that I
60:04 - have looked at object-oriented
60:05 - programming in most of my videos I have
60:07 - this object V it's a p5 vector and then
60:10 - I'm calling a method on that object a
60:12 - function on that object this is what you
60:14 - would be referred to as an instance
60:16 - function or instance method the one
60:21 - thing that's a little bit unique here is
60:22 - that instead of saying new p5 dot vector
60:29 - I'm saying create vector and that's just
60:32 - something specific to p5 itself which
60:34 - has in it a create vector function to
60:37 - make the vector object but sure in most
60:39 - cases like this one right here I'll be
60:47 - making a new Walker object and then I'm
60:49 - calling instance methods Walker dot
60:51 - update Walker dot show those execute the
60:54 - code to run the functionality of this
60:56 - particular Walker object
61:12 - so the term I'm using is instance method
61:16 - or function a static method a static
61:23 - function is one that is not called
61:26 - specifically on an individual object
61:28 - itself but rather on the class as a
61:31 - whole
61:41 - so notice how I'm calling a function
61:43 - random 2d just like I'm calling a
61:46 - function add but instead of on a
61:48 - specific instance of a p5 vector object
61:50 - I'm calling it on the name of the class
61:53 - itself p5 dot vector that's because this
61:56 - bit of functionality isn't associated
61:59 - with a particular object I want to add
62:02 - something to this specific vector here
62:04 - but here I don't there's no actual
62:07 - specific vector I'm talking about I just
62:09 - want to make a new random vector so this
62:12 - this begs the question why is it done
62:14 - this way
62:31 - the story here is that this is really a
62:34 - decision that the creators are
62:36 - maintained errs of the p5 library have
62:37 - chosen there's no reason why there
62:39 - couldn't be just like there is a global
62:41 - create vector function that makes a
62:43 - empty vector or vector with zero zero in
62:46 - it there could be a create random 2d
62:48 - vector so this could be I could be
62:58 - sitting here in an alternate parallel
63:00 - universe saying this is the function to
63:02 - make a random 2d vector in p5 but in
63:12 - JavaScript it's quite common to collect
63:14 - a bunch of functions under a namespace
63:21 - but in JavaScript or you know in other
63:23 - programming languages as well it's quite
63:25 - common to want to collect a whole set of
63:27 - functions under a particular namespace
63:36 - for example maybe you've seen oh let me
63:39 - look here
63:59 - yes for example in JavaScript there is
64:06 - the math object oh it's an object yeah
64:10 - why JavaScript why why do you torture me
64:16 - I'm just gonna go to math dot random
64:24 - for example if you weren't using p5 and
64:26 - you wanted a random number in JavaScript
64:28 - you would call math dot random and in
64:31 - fact under the math class is it's a
64:47 - built-in object it says it's a built-in
64:49 - object it's so confusing for example if
64:56 - I was working in job I didn't watch the
65:02 - Bon Appetit YouTube channel so I haven't
65:06 - talked about to you about watching some
65:09 - they're like kind of amazing and I feel
65:12 - like we need to just adopt there I don't
65:15 - know editing style so anyway I'll come
65:18 - back to that not T I don't know if
65:19 - you're much skipped over this little rig
65:22 - like digression here when you're
65:23 - reviewing this but no all right an
65:28 - object is one way to implement
65:29 - namespaces I know I know I know object
65:32 - class it's also confusing
65:34 - all right so I'm gonna gloss over this
65:36 - and the gloss over is for example in
65:42 - JavaScript if I didn't have p5.js and I
65:44 - wanted a random number I would say math
65:47 - dot random and in fact there's a whole
65:49 - clips wrong way this way forward for
66:00 - example in JavaScript if it is a class
66:08 - says bimple for example in JavaScript if
66:15 - I wanted a random number and I didn't
66:17 - have p5.js I would call math dot random
66:20 - and there are a whole collection of
66:23 - static functions name spaced under the
66:27 - math thing object class oh the terms are
66:30 - so confusing math max math dot min math
66:33 - dot pal math dot random etc so
66:37 - p5.js is actually a bit of an anomaly in
66:40 - that there are all these global
66:42 - functions normally you wouldn't see that
66:44 - in a so-called proper JavaScript library
66:47 - I don't want this is my problem with
66:49 - explaining the static thing I can't help
66:51 - myself
66:52 - but go down all these like digressions
66:55 - and blah blah blah and it just really
66:56 - doesn't matter it's not yeah so yeah I'm
67:07 - gonna see Groundhog Day boy am I in a
67:10 - episode of Groundhog Day
67:11 - alright okay yeah yeah it's not a class
67:15 - I can't say class
67:25 - country-rock take me home for example in
67:40 - JavaScript if I wanted to pick a random
67:42 - number and I didn't have P 5 yes I would
67:44 - say math dot random and there are a
67:47 - whole collection of functions
67:49 - mathematical functions under the
67:51 - umbrella of math there namespaced under
67:54 - math are all static functions so in
68:06 - p5.js there are a lot of global
68:08 - functions which is a whole kind of other
68:09 - discussion why are there global
68:11 - functions at p5.js but I don't want to
68:13 - get into that right now
68:14 - but all of the vector functions are not
68:17 - part of the global p5 reference their
68:20 - own namespace under p5 vector so there
68:22 - are some times where I want to call a
68:24 - function that's operating on a vector
68:26 - and some other operations that I just
68:28 - want to call that relate to vectors that
68:30 - are called under the vector class itself
68:34 - some are static p5 dot vector dot the
68:38 - function name and some are instance v
68:41 - the instance of an object dot the
68:43 - function name yes I got through that
68:56 - now before I go on may be able to use
69:01 - this weird rag I'm not finished yet
69:05 - before I go on I want to look at a
69:08 - practical example of why I might want to
69:11 - use a static version of the instance but
69:17 - I'm not done yet one of the weirder
69:20 - things about working with p5 vector is
69:22 - there are both right this is an instance
69:24 - function and a static function random 2d
69:26 - but there also is a static function add
69:29 - so some of the functions have both
69:31 - instance and static versions of the same
69:34 - function so I want to look at a
69:35 - practical example of why I might want to
69:37 - use one versus the other
69:50 - it's a racer barely works exercise
69:59 - exercise to do this let's look at
70:07 - something very very to do this let's
70:12 - look at but to do this let's return to
70:17 - the world of scalar numbers just single
70:20 - values themselves let's say I have the
70:23 - variable X and it has the number 5 and
70:31 - I'll then I also have the number and
70:33 - we'll call it X speed just to go back to
70:36 - when we were doing this these kinds of
70:38 - motion algorithms without vectors X
70:40 - speed equals to it's so so normal that I
70:45 - might want to say x equals x plus X
70:48 - speed normal normal is the weird weird
70:51 - thing to say
71:00 - this is a case where we would write code
71:02 - all the time like this x equals x plus x
71:05 - feed we did this without a second
71:08 - thought I'm taking to adding it to five
71:11 - and putting that value back in X so if
71:13 - this were to draw loop X is five that
71:16 - it's seven then it's nine then it's 11
71:17 - etc we've now seen that the equivalent
71:22 - is if I have a position vector and I
71:31 - have a velocity vector
71:45 - I would say position dot add velocity
71:56 - this is the equivalent of this taking
71:59 - velocity adding it into position
72:02 - this is the equivalent of this taking
72:05 - velocity adding it into position and
72:06 - saving it into itself this is the
72:13 - equivalent of this but with vectors X
72:15 - changes by X speed position changes by
72:18 - velocity however what if instead of
72:23 - doing it this way I wanted to say let
72:34 - new x equals x plus X speed what if what
72:42 - I wanted to do was take the result of
72:44 - this operation and store it in another
72:46 - variable so X hasn't changed after I run
72:49 - this line of code X is still 5 I have
72:51 - the number 7 in this particular variable
72:54 - new X now in the case of a lot of now in
72:59 - most examples I don't want to do that I
73:01 - want X to change and keep saving the new
73:03 - value into itself incremental e but
73:05 - there are hard a lot of times where I
73:06 - want to do an operation not mess with
73:08 - those two variables and store it in a
73:09 - new result how do I do that with vectors
73:25 - so your instinct might be okay maybe I'm
73:29 - going to have a new pause and I would
73:35 - set that equal to pause and velocity I
73:40 - mean this this makes up a lot it's not
73:42 - correct it makes sort of logical sense
73:44 - but by its nature an instance method
73:47 - that receives another vector changes the
73:50 - object it's acting upon this is where
73:53 - the static version of ad comes in if you
73:56 - want to add two vectors together but not
73:59 - mess with those vectors you can use the
74:01 - static version of the ad function
74:14 - it's a bit wordy and the code looks a
74:16 - little awkward but it works let new paws
74:20 - equal p5 dot vector dot ad
74:35 - got ad position comma philosophy did
74:43 - that fit poet fit there you go
74:45 - so if I want to add two vectors together
74:47 - and get the result in a new vector I
74:50 - just need to call the static version of
74:52 - ad which is namespaced stored under the
74:55 - p5 vector class itself so while this is
75:07 - very common in our physics algorithms
75:10 - position changes by velocity in a moment
75:12 - we'll see velocity changes by
75:13 - acceleration there are certain times
75:16 - where I want to do an operation like
75:17 - this and there are more examples of that
75:19 - than just ad as well I know right
75:33 - wouldn't it be nice if we could overload
75:34 - somebody told me there's a way to
75:36 - overload silence okay let's take a
75:38 - little DUT now let me try to like finish
75:40 - this off and then let's take a little
75:41 - digression operate operator overloading
75:44 - I'm I'm doing the terrible thing here
75:47 - which is I'm like looking at my messages
75:54 - okay which I shouldn't be doing well
75:58 - okay
76:24 - and this is in fact is exactly what's
76:28 - demonstrated on the p5 reference you can
76:31 - see here V equals create vector V dot ad
76:34 - it actually changes its V's components
76:37 - themselves versus having V 1 and V 2 and
76:40 - then saying p5 dot vector add V 1 and V
76:43 - 2 and putting that in a new vector V 3
76:45 - so hopefully now this video gives you a
76:49 - bit of a sense of what the difference
76:50 - between a static method is and an
76:52 - instance method and by the way I'm just
76:54 - for better or worse kind of using the
76:56 - word method and function interchangeably
76:58 - technically speaking a method is a
77:01 - function that's part of a class in an
77:03 - object and a function as well a function
77:06 - that exists maybe on its own but I'm a
77:08 - little bit loosey-goosey with it stuff
77:11 - and so but so I'm using them
77:13 - interchangeably but hope the point of
77:15 - this video was to give you a sense of
77:16 - what static functions are and instance
77:18 - functions static methods or instance
77:21 - methods and now as we move forward and
77:24 - start to work with more vector
77:27 - operations in future videos and examples
77:29 - you'll have a sense of why I might be
77:31 - picking one versus the other
77:33 - in different cases and this is going to
77:34 - come up in exactly the next example I'm
77:37 - gonna demonstrate that's working with an
77:39 - acceleration vector alright so maybe
77:42 - you've decided forget about this this is
77:46 - where I draw the line this static method
77:47 - stuff drew drove me crazy I'm out and
77:50 - out but if you're not if you want to
77:52 - keep going nature of good I'll see you
77:54 - in the next video bye
78:00 - okay so give me a second here
78:05 - somebody told me is
78:18 - all right so it's there I was told that
78:22 - there's a way to use value of so I have
78:32 - to look into this that maybe if I use
78:34 - value of that I can overload the
78:38 - operators so but how would I do that can
78:47 - I turn the vector into a single number
78:49 - that I could then add and then like turn
78:52 - it back no don't go into operation of
79:00 - overload I have a meeting in two hours
79:02 - right over I guess I don't want to look
79:06 - at this right now but yeah I guess you
79:10 - can do so you can do object overloading
79:13 - in Java Script with this value of
79:15 - function but he needs to be a single
79:17 - value so there's no way could I do some
79:20 - kind of crazy bit op like operation
79:24 - fitbit operation to like trick it into
79:26 - having like two values I don't think so
79:28 - so I don't think that's gonna work but
79:34 - that was interesting interesting
79:36 - suggestion all right everybody I am
79:41 - going to take a break and I am going to
79:44 - go get my random number book and when I
79:47 - come back with my random number book I
79:49 - will read some random numbers and all
79:52 - will be well in the universe but before
79:56 - I do that let me tell you about today's
79:59 - sponsor of brilliant org I have talked
80:03 - about billion org on a number of
80:05 - occasions it's a website myself quite
80:08 - enjoy it because I'm a person who likes
80:10 - interactive puzzles and learning new
80:12 - things and math and science and logic
80:14 - and computers stuff and there's much
80:17 - more there I'm brilliant at or even just
80:19 - those topics but it's a it's an
80:21 - interactive lifelong learning website
80:22 - you can sign up for free just go to
80:24 - brilliant org slash coding train and
80:26 - there's lots of stuff you can do for
80:27 - free I just enjoy for free there are
80:30 - certain course
80:31 - different things that get unlocked if
80:35 - you want a premium account a core whole
80:38 - course on computer science fundamentals
80:40 - that you can see here that I am showing
80:43 - you and so there what I really like
80:52 - about these courses that has like all
80:53 - this like drag-and-drop functionality
80:54 - and pseudocode so you can really like
80:56 - think about how programs work and how
80:59 - they're structured you don't actually
81:00 - have to just write the code yourselves
81:02 - you could do a lot of this just through
81:04 - pseudocode and interactivity without
81:06 - getting bogged down in the syntax but
81:10 - what is kind of amazing and I think is
81:12 - this video that I'm playing to you is
81:13 - gonna switch to it in a second what I
81:14 - didn't know is that brilliant is
81:16 - actually built-in I don't use a lot of
81:18 - Python I'm like a you know what Java
81:20 - Script a weirdo but look at this
81:23 - brilliant is actually built Python into
81:25 - the browser so you can write and execute
81:27 - the algorithms you've learned using
81:29 - Python syntax so if you want something
81:32 - and that I that complements your
81:33 - learning you know maybe watching a
81:36 - lunatic on the internet like me talk
81:39 - about programming and like saying the
81:41 - same things over and over and over again
81:42 - is what you enjoy great but another way
81:46 - of learning is through reading and
81:48 - interactivity and a website like
81:49 - brilliant org so one of the things that
81:51 - I love about brilliant really my
81:54 - favorite part of the website is and if I
81:57 - go to it these daily challenges
81:59 - oh we're dime not logged into my logged
82:02 - into a different account then I thought
82:05 - that I was that's fine I have a premium
82:06 - account but maybe I'm not logged into
82:08 - that right now
82:08 - and so let's do this I like card things
82:15 - let's do this one and let's see if we
82:21 - can sort this out I'm gonna take this
82:22 - banner off so we can see it sometimes
82:24 - it's intuitive to reason logically when
82:26 - we are thinking about real-world
82:27 - situations we have common sense and
82:29 - experience to help us out
82:32 - consider police searching or spy they
82:34 - know the following if a person is a spy
82:35 - they'll have a recording device at the
82:37 - event which people should the police
82:39 - search in order to find the spy well the
82:43 - people with the
82:45 - courting device but that doesn't
82:48 - automatically mean oh so there's like a
82:49 - trick here
82:50 - let's keep behind so you can read this
82:52 - explanation look at it but let's look at
82:53 - the challenge the cards below have
82:55 - colored hearts numbers or letters
82:57 - printed on them on either side how many
83:01 - cards need to be turned over to test
83:03 - whether the following assertion is true
83:05 - I think I know the answer to this I
83:07 - looked at it earlier it didn't actually
83:09 - click on it but I did look at it earlier
83:11 - cuz I I like this one so I'm gonna let
83:14 - you think about it for a second I'm
83:17 - gonna see what the chat is saying and
83:24 - let's see if a card has a blue heart on
83:27 - one side then it has a number on the
83:28 - other side is that true or false so
83:31 - obviously if I could just check all four
83:32 - of them I would know because if it were
83:37 - true this would have a number on it and
83:39 - this would have a blue heart on it let
83:42 - me see if I can zoom in here this one
83:46 - would have a number on the other side
83:47 - that one we have a blue heart that would
83:48 - not have a blue heart and that would not
83:50 - have a blue heart so if I wanna can I
83:54 - check to see if it's false
83:58 - right how many cars gonna be turn over
84:00 - to test whether fall falling is true is
84:04 - there one of these I don't need to check
84:06 - right so for example I thought this the
84:09 - one with the two doesn't matter because
84:11 - this is only saying this is the trick
84:15 - right it's only saying if the if it has
84:20 - a blue heart on one side has a number on
84:21 - the other side that doesn't mean that
84:22 - you could have a number on the other
84:23 - side even if it doesn't have a blue
84:25 - heart on the other side so the two is
84:26 - irrelevant but if either of those well
84:30 - if the blue heart and the blue heart
84:32 - doesn't even matter oh no no it does so
84:35 - I have to check the blue heart one to
84:37 - see if it has a number on the other side
84:38 - and then the other two I have to check
84:41 - to make sure they don't have a blue
84:42 - heart because they have the blue heart
84:44 - on the other side they don't have a
84:45 - number on this side then that can't be
84:46 - true so the answer should be three once
84:54 - again
84:54 - have my one-day streak nice
84:58 - I'd have to look into which why I'm like
85:00 - logged in to the wrong account here did
85:02 - you get that right but I also have to
85:06 - check this one I kind of want to be able
85:08 - to click these so this would be a fun
85:10 - little if I had some time I would make
85:11 - like a p5.js version of this which you
85:14 - could do and when you click on them and
85:15 - it flips them over umm this reminds me
85:18 - of the Monty Hall problem the what spot
85:21 - the bazaar prize behind the door and do
85:23 - you want to switch doors dad I should
85:24 - really talk about in a video I love that
85:26 - problem it's a sort of classic problem
85:28 - with Bayesian probability I would be
85:30 - shocked if there's nothing Bayesian on
85:32 - this website there we go I can
85:34 - definitely find some Bayesian stuff here
85:36 - so you can learn about that so again I
85:39 - encourage you to check out
85:41 - brilliant out org slash coding training
85:43 - you can sign up there for free let's
85:44 - people lets them know that you found it
85:46 - through the coding train which is a nice
85:47 - friendly thing to do one way to support
85:50 - the coding train support support
85:54 - whatever you want to do is a-okay with
85:56 - me that's one option and then of course
85:58 - if you really love premium if you love
86:01 - plate and want the premium subscription
86:03 - to unlock all the courses if you go
86:05 - through that link to get a 20% discount
86:06 - the first 200 people will get a 20%
86:08 - discount okay I'm gonna take a break
86:11 - when I come back I am going to do one
86:15 - more example I am going to build that
86:17 - example that involves accelerating this
86:20 - this one here I'm gonna look at how to
86:24 - how to have an object a mover object
86:27 - accelerate towards the mouse and I'm
86:29 - going to play with that in a variety of
86:30 - different ways and talk about the math
86:33 - behind this and that will wrap up
86:35 - chapter 1 on vectors okay so I will see
86:41 - you in about five minutes we go find the
86:42 - red number book get some more water and
86:45 - kind of reset my brain
86:51 - [Music]
87:17 - [Music]
87:50 - [Music]
88:02 - [Music]
88:32 - [Music]
88:58 - [Applause]
89:00 - [Music]
90:17 - [Music]
90:53 - [Music]
91:11 - [Music]
92:11 - and we're back and it is time for the
92:18 - ceremonial reading of the random reverse
92:23 - ah oh boy I lost like a hundred people
92:29 - come back I have the random number book
92:32 - everybody return to the live stream by
92:37 - the way the this page which is page 318
92:40 - and you know what I think would be good
92:43 - this would be a good time this would be
92:45 - a good use of the overhead camera keep
92:50 - me honest here
92:58 - well now I want to flip it I'm gonna
93:00 - have to sneeze again this is where
93:01 - everything went wrong in the first place
93:03 - quick
93:17 - acting now I know I had this flipped
93:28 - no whoo that was a real sneeze and I'm
93:36 - thinking maybe I'm allergic to the
93:37 - random numbers that couldn't be no oh
93:39 - that would be such a disaster this page
93:42 - page 318 to 319 I always open to sixty
93:57 - four thousand five hundred and fifty
93:59 - eight two thousand seven hundred eighty
94:03 - one ninety eight thousand 1821
94:06 - eighty-three thousand six hundred ninety
94:08 - seven thirty six thousand no no no
94:18 - thirty four thousand six
94:21 - five thousand eight hundred fifty nine
94:30 - thousand nine hundred forty-four in two
94:33 - thousand nine hundred and twenty five
94:36 - you know we've got no new members today
94:38 - because whenever I get a new member you
94:40 - know I need a button hold on I need hold
94:51 - on a second
94:52 - we're gonna do something exciting here
94:56 - do I not have it let me just create not
95:01 - a scene a source over overhead and now
95:12 - that's the scene no the scene is green
95:15 - and the source is over and now I think
95:21 - if I hit close we will I can press this
95:27 - button there we go I have a button now
95:30 - which does it I love my stream deck hit
95:35 - me up Elgato actually already sorry the
95:44 - response okay um we've I need another 30
95:51 - seconds of this break
95:54 - [Music]
96:20 - [Music]
96:52 - [Music]
97:05 - [Music]
97:17 - [Music]
97:20 - let's just take a quick minute I just
97:23 - want to look because we're getting close
97:25 - we're getting close to where I really
97:27 - need my copy of a million random digits
97:32 - with 100,000 normal deviates I want
97:37 - original prints how do I find like on
97:42 - eBay maybe let's go to like oh this is
97:51 - very Bashan not bad I'm not logged in or
97:54 - anything am I
97:55 - so let's see a million random digits
97:59 - with 100,000 normal deviates here this
98:04 - is this is what I'm looking for
98:09 - 1955 but see this is a problem for me at
98:16 - least a few dozen missing pages several
98:20 - pages I don't mind the pencil marks tape
98:22 - on the spine I don't mean that 1955 is
98:26 - good but missing pages missing pages is
98:34 - an issue for me I feel like I need money
98:39 - is no object here I will spend all of my
98:42 - coding train riches on an original print
98:46 - of this book I mean I guess within
98:51 - reason
98:55 - I really wants me to login thanks for
98:57 - like just popping up stuff that I don't
98:59 - want you to pop up you know is there
99:08 - another one not even know this is this
99:15 - is as close as I'm gonna get so the
99:31 - missing pages are chosen at random Thank
99:35 - You Yaya good to know our money is spent
99:39 - responsibly yes you could give you joy
99:41 - now your money
99:43 - remember trip money will go to my
99:46 - finding an original for there's gotta be
99:47 - one right all right
99:53 - Internet help me out help me out find me
99:57 - somebody selling one without missing
99:59 - pages I will buy it I will purchase it
100:01 - and I must be authenticated somehow
100:14 - all right we will now move on to this is
100:24 - done this is this one and this is now
100:33 - this one
100:45 - did I cover this did I make this change
100:49 - in that video
100:52 - do you mind humoring let me just check
100:56 - something okay hold on what I'm doing
101:04 - right now that you can't see is I'm
101:05 - logging into my dashboard for the coding
101:12 - train and I am pulling up the current
101:15 - edit I'm going to I am pulling up the
101:22 - current edit of NOC vector3 so this was
101:26 - the so there's vector two of you on
101:30 - YouTube and so what I'm looking for and
101:47 - you can see my screen again so these are
101:50 - the unlisted edited versions of the
101:53 - videos that will eventually soon come
101:55 - out with me reading saved clothes you
101:57 - don't wear the same shirt I don't think
101:58 - I have the same undershirt on like this
102:01 - is the current undershirt that I'm
102:03 - wearing
102:03 - I don't know what it is if anyone can
102:05 - deduce what it is in those videos I will
102:08 - show you the part about my hair that's
102:09 - bothering me but this was number two
102:12 - where I go through this stuff and then
102:18 - where do I end okay so I left this off
102:28 - with negative one comma one there and
102:31 - then this one this is where I'm talking
102:37 - about the whole random stuff function
102:40 - like random 2d would you after that okay
102:45 - sorry I don't think oh I do so I did
102:48 - this in this video okay okay
102:51 - got it got it okay so I know where I
102:55 - last left off
102:58 - and I did leave off with it here but
103:02 - I've already duplicated this so I can
103:04 - move on and I think I'll change this to
103:11 - mover
103:22 - and mover mover mover and movers not to
103:34 - find because I'm just a mover here okay
103:37 - there we go okay all right
103:54 - so in this video do I want to do a
104:01 - separate video that just talks about
104:03 - normalize and set mag I think that I do
104:09 - I mean I could talk about it in the
104:17 - context of this example I think it might
104:21 - be nice to have it as its own standalone
104:22 - thing so I could point people to it and
104:24 - they want to know what normalizes
104:40 - oh I am so close to getting to making
104:44 - this example where an object accelerates
104:47 - towards the mouth and where I last left
104:50 - off
104:50 - I had this Walker object which I have
104:52 - now renamed to a mover object and every
104:55 - time I run this sketch it picks a random
104:57 - velocity and moves according to that
104:59 - velocity in the in the canvas so all I
105:02 - need to do to add to this is an
105:04 - acceleration but there's a bit more
105:07 - vector math that I would like to talk
105:09 - about that is also required for this let
105:17 - me erase this whiteboard
106:01 - and random vectors
106:20 - oh I know what I'm gonna do oh oh oh
106:23 - never mind never mind got it got it got
106:25 - it got it got it everybody whoo got it
106:27 - got it got it
106:27 - oh I'm excited all right I know what I'm
106:30 - gonna do I thought you thought did we
106:43 - think I am so close so close to getting
106:51 - to this example where I am going to have
106:54 - a mover object or walker or particle
106:56 - whatever I'm calling it just like maybe
107:07 - like turn one of these lights off
107:16 - better worse thing you have to turn the
107:20 - lights on
107:32 - I'm recording this right yes
107:46 - I know maybe I've like ruined the way
107:49 - that I do this so it takes me so long
107:53 - now hi this is another video in the
108:03 - nature of code series chapter one on
108:04 - vectors and I really thought that I was
108:06 - going to get to this example but I want
108:08 - to do one more video looking at what it
108:12 - means to normalize a vector so this is
108:15 - going to be fundamental to how I create
108:18 - this example where this particular mover
108:22 - object is accelerating towards the mouse
108:24 - wherever I move the mouse there it goes
108:26 - it's going to sort of follow the mouse
108:28 - and I can sort play with a bunch of
108:29 - parameters in this system I'm getting
108:30 - there so let me return back to this
108:33 - example where I picked a random vector
108:37 - every cycle through draw and then then
108:41 - moat then scaled it by a random amount
108:43 - and I'm drawing it onto the canvas
108:55 - there's not a really a good reason why I
108:58 - keep doing this over and over again I
108:59 - just sometimes I just have a like uh-oh
109:02 - people returned you've come back hi all
109:07 - right all right no more monkeying around
109:09 - here no more fooling around
109:11 - I got you serious serious serious time
109:17 - hello welcome to another video in nature
109:20 - of code chapter 1 vectors series I
109:23 - really thought that in this video I was
109:25 - gonna start making this example I almost
109:27 - have arrived there where this mover
109:29 - object is accelerating towards the mouse
109:30 - but there's a particular math function
109:33 - that I'm going to need for this example
109:35 - that I want to cover in a separate video
109:37 - and that's the normalized function I
109:38 - want to look at how I deal with and
109:41 - calculate the magnitude of a vector how
109:43 - I normalize a vector what does that even
109:45 - mean and the way that I'm going to do
109:48 - this is look at creating a vector
109:49 - between the mouse and the center of the
109:53 - canvas itself so let me talk about what
109:56 - it look Oh
109:59 - goodbye whiteboard no signal
110:08 - come back come back there you go
110:14 - so let's look at this scenario that that
110:17 - I'm working with here I have a p5 canvas
110:25 - I'm going to have an object at some
110:29 - location let's just assume right now
110:31 - that it's at the center of the window
110:34 - the canvas and then the mouse is going
110:36 - to be somewhere that's the
110:41 - weirdest-looking mouse arrow ever
110:54 - Oh much better much better much better
110:57 - and the mouse is going to be somewhere
111:09 - what if what I want is a vector that
111:12 - represents the difference between the
111:14 - center and the mouse
111:15 - I want a vector that points from this
111:18 - location to this location how would I
111:20 - get that vector
111:34 - let's think about it for a moment
111:35 - without vectors say this is the location
111:42 - 400 comma 10th and this here's the
111:46 - location 200 comma 200 not exactly to
111:54 - scale
112:07 - and let's say this is the location 300
112:09 - comma 200 what I'm looking for are what
112:15 - are the x and y components of this
112:16 - vector x and y well I could say that
112:20 - this is 100 right because it's 400 minus
112:23 - 300 400 minus 300 that's the x value and
112:29 - then the Y value is 200 minus 10 so that
112:34 - Y length 200 minus 10 is 190 so this
112:39 - vector has the components wait what
112:42 - I did not draw this anywhere remotely
112:52 - close to scale yes because if this were
112:56 - actually 600 why let me start this over
113:12 - I'm gonna finish this I'm getting
113:15 - through this the scenario I want to look
113:22 - at is as follows I have a canvas and I
113:29 - have some mover on the canvas a particle
113:31 - somewhere let's just position it in the
113:33 - center let's say this is 600 by 400 it's
113:36 - not exactly drawn to scale but close
113:38 - enough so this is 300 comma 200 then I
113:41 - have the mouse I'm moving my mouse
113:43 - around somewhere and let's say I have
113:44 - the mouse over here try to draw a mouse
113:47 - arrows and we'll call this location 580
113:58 - comma 20 what I'm looking to do is
114:04 - figure out how do I calculate if I know
114:07 - this position in this possession a
114:09 - vector that points from one to the other
114:11 - if I want this particular particle to
114:14 - accelerate towards the mouse how do I
114:18 - calculate this particular vector
114:27 - call it V well when I say calculate the
114:37 - vector what I'm really looking for is
114:38 - the X component and the y component so V
114:43 - dot X equals what 580 minus 300
114:49 - so 580 minus 300 that's 280 V dot y
114:54 - equals 200 minus 20 this length is 180
115:00 - so this vector is 280 comma 180
115:18 - what mathematical operation did I just
115:20 - do here I have two vectors really I have
115:24 - this vector which I'll call position and
115:27 - I have this vector which I'll call Mouse
115:30 - what I did is I said Mouse - position
115:34 - gives me V V equals
115:45 - wait I'm doing the next video all of a
115:47 - sudden this is so weird
115:49 - what's wrong with me I just wanted to
115:51 - talk about normalize it I guess this is
115:57 - this gonna be what its gonna be v equals
116:03 - Mouse - position let's confirm that this
116:11 - is the case I'm going to take this
116:14 - vector Mouse which looks like this
116:16 - remember when I add vectors I put them
116:18 - end to end so this vector mouse +
116:21 - position would be this right this would
116:26 - be mouse + position but I want to say
116:29 - Mouse - position so ought to do is
116:32 - reverse this vector and then this if
116:37 - this is sorry position and this vector
116:41 - is Mouse this vector is V now oh whoa
116:47 - whoa whoa whoa whoa no no no not right
116:52 - not right not right
117:07 - let's confirm through a vector diagram
117:09 - that this really works I want to take
117:12 - the vector Mouse oh no no I was doing it
117:17 - right I was doing it right Mouse -
117:22 - position I was right I'm just looking at
117:31 - the chat all right I guess I have to do
117:35 - this again now let's confirm that this
117:40 - let's confirm through a diagram that the
117:43 - subtract operation is really what I want
117:45 - here so if I take this vector mouse and
117:48 - draw it down here and I'm gonna this
117:51 - approximate right if I were to take
117:54 - mouse plus position I would put them end
117:57 - to end position like this so this is
118:00 - position oh and I'm going off the I went
118:08 - out of your point of view but I really
118:11 - can get this thank you let's confirm
118:34 - that subtract is really the operation
118:36 - I'm looking for here by looking at the
118:39 - dot by diagramming this let's confirm
118:44 - that this really works the subtract
118:45 - operation by diagramming this so if I
118:47 - take this mouse vector that's pointing
118:50 - from zero to this location 580 comma 200
118:53 - and I kind of draw that down here it's
118:55 - exactly exactly right but I just sort of
118:57 - duplicate this here if I were to add if
118:59 - I were to say plus position I put these
119:02 - vectors end to end so I would take this
119:04 - vector and put it like over here I'm
119:05 - about to go out of your range of view so
119:08 - I'll just draw it a little bit shorter
119:09 - but this is the idea Mouse plus position
119:12 - would give me this vector mouse plus
119:16 - position
119:16 - but I want to say mouse - position so
119:19 - that's taking this position vector and
119:22 - put pointing it in the opposite
119:24 - direction this is - position so Mouse -
119:31 - position is this vector V right here and
119:35 - you can see that matches up with that so
119:39 - this is how it works so if I want a
119:41 - vector that points from one position to
119:44 - another position in 2d space from point
119:47 - A to point B I just say B - a well and
119:57 - this camera has now gone off
120:16 - let's put that into this example here
120:29 - right hold on
120:37 - so this example is drawing random
120:40 - vectors that emanate from the center
120:41 - let's try that that that math operation
120:44 - so I'm going to get actually get rid of
120:45 - all fifths and I'm going to say position
120:48 - equals create vector the Center 200 200
120:52 - Mouse equals create vector mouse X Mouse
120:57 - y and then V is and to do this
121:03 - subtraction to do this subtraction
121:06 - mouth- position and stored in a new
121:09 - vector
121:09 - I need a static function that's what the
121:13 - previous video is about so I could say
121:16 - p5 vector dot subtract Mouse - position
121:30 - and actually let me put the translate
121:32 - back because I want to draw everything
121:34 - relative to the center and we should see
121:40 - now oh look at that I still have the
121:43 - funny background thing which I'll keep
121:44 - so no matter where I move the mouse I
121:47 - now have a vector that points from the
121:49 - center to where the mouse is now
121:50 - ultimately this looks like this
121:52 - visualization could be accomplished very
121:54 - simply line 200 200 Club of Mouse X
121:57 - Mouse Y but what I'm driving at here is
122:00 - what I'm working with vectors allows me
122:03 - to do a variety of operations that I
122:05 - wouldn't be able to do now certainly
122:15 - this visualization could have been
122:16 - created just by calling the line
122:18 - function and saying line 0 200 200 mouse
122:21 - X bounce Y but the reason why I'm doing
122:23 - it this way through vector subtraction
122:25 - is to show you about the normalized
122:29 - function and what kind of power that
122:31 - unlocks
123:00 - so let's say I have a variety of vectors
123:03 - all with arbitrary magnitudes and
123:05 - directions these are my vectors that I'm
123:12 - drawing up here five of them the process
123:15 - of normalization means take any given
123:22 - vector and maintain its direction
123:33 - the process of normalization means take
123:37 - any given vector maintain its direction
123:39 - and make a unit vector of length one
123:42 - pointing in that same direction so if I
123:44 - had a vector that was sure than one so
123:48 - if I had a vector of length shorter than
123:50 - one I would increase that length to one
123:52 - if I had a vector of length greater than
123:54 - one
123:54 - I would decrease it down to one shrink
123:56 - it down to one I should have made a
123:59 - really tiny one and like these vectors
124:07 - on the drew oh wait the camera went off
124:19 - what's going on ah why are these cameras
124:23 - overheating it's not the coating train
124:27 - if the cameras don't turn off it's not
124:29 - the coating train if there's one thing
124:39 - in life I know to be true it's that the
124:44 - cameras on the coating train always turn
124:50 - [Applause]
124:53 - no it's kind of amazing
124:56 - all right I think that it's time to
124:59 - break out the Voronoi fan it's not a
125:05 - Voronoi [ __ ]
125:06 - it's a Vornado I'm going to turn this
125:09 - fan on point it at this camera the only
125:21 - thing I know when the cameras go I
125:26 - didn't bother to see clearly
125:32 - [Music]
125:55 - okay everybody where was I
126:02 - no idea where I was I know that I want
126:05 - to draw a bunch of vectors Oh continuity
126:11 - it's a thing let's say that I have a
126:20 - collection of vectors let me draw five
126:21 - of them all random directions all
126:26 - varying lengths those are my five
126:29 - vectors the process of normalization
126:34 - which is executed with the normalized
126:37 - function in p5.js is to take any vector
126:40 - of any length in any direction and make
126:43 - it into a unit vector a unit vector is
126:49 - one where the magnitude the length is
126:51 - one so let's just establish that this is
126:56 - approximately length one in terms of
126:59 - this arbitrary two dimensional space I'm
127:01 - working with so this vector normalized
127:03 - would be this vector this vector
127:05 - normalized would be this vector this
127:08 - vector always less than one so
127:10 - normalizing it would actually be to grow
127:11 - it would be this vector this vector
127:13 - would be this vector and this vector
127:15 - would be this vector now of course I
127:17 - haven't drawn these exactly right but
127:18 - this is the idea all of these are
127:20 - normalized versions of these and the
127:23 - reason why the term normalized is use is
127:25 - create some standardization normal
127:28 - normalization no no no it doesn't make
127:31 - any sense
127:34 - and you could think of the term
127:36 - normalized as making all these vectors
127:38 - into a normal vector normal being a well
127:41 - a normal vector is length 1 otherwise
127:42 - it's some wacky crazy and saying vector
127:45 - with a much longer length it's some it's
127:47 - basically having a standard by the way
127:50 - in vector notation a vector is typically
127:53 - written like vector V with an arrow on
127:55 - top the unit vector is often written as
127:57 - vector V with the hat or carrot on top
128:00 - so this would be a unit vector V or any
128:03 - given vector V so if I come back to this
128:12 - example here one of the things we could
128:14 - look at is I could say V dot normalize
128:17 - what does that do well it makes the
128:23 - vector length one so I could just keep
128:24 - zooming in to this I'm drawing something
128:26 - of pixel length 100 nothing left do I
128:42 - want to go back to here
128:53 - alright actually let me return back over
128:55 - here
129:12 - so how does the math for normalized work
129:15 - luckily for us we could just call
129:16 - normalize in p5 but this is a moment for
129:18 - us to take a little time to look at the
129:20 - math for that well before we can look at
129:30 - the math or normalize we actually should
129:32 - look for the math at another function
129:34 - called mag and mag is a function that
129:37 - returns the magnitude of a vector so it
129:40 - returns the scalar length of any given
129:44 - vector that magnitude itself so one
129:49 - thing that I could do here that could be
129:51 - interesting is let's draw the background
129:58 - again in draw and oh let's sorry
130:13 - so one thing that I could do here that
130:15 - could demonstrate this is let me take
130:17 - the background and draw it in draw run
130:20 - this again oh and I guess I will make
130:22 - this much brighter all right so now I've
130:25 - just got this line pointing to the mouse
130:34 - and I'm going to ask for the magnitude
130:39 - so that the Mac that is now getting the
130:42 - magnitude of that and I actually let's
130:44 - just console.log it so you can see this
130:52 - console.log down here is giving me the
130:55 - magnitude of the vector itself as I move
130:58 - the mouse closer to the center and you
131:00 - can see it's always a positive number
131:02 - because it's the length of it no matter
131:04 - what direction it's pointing in I could
131:12 - try something interesting like I could
131:13 - say oh let's make the background color
131:15 - associated with the magnitude so now you
131:17 - can see like the closer the mouse gets
131:19 - to the center the brighter the bet the
131:21 - brighter the background is sort of an
131:24 - interesting interaction that you could
131:26 - play with
131:37 - and the reason why this magnitude value
131:41 - is so important is it plays a
131:43 - fundamental role in how a vector is
131:45 - normalized
131:59 - so let's say I take this vector and this
132:04 - is the magnitude M and this is the X
132:07 - component and the y component well
132:09 - another way I could draw this diagram is
132:13 - like this a right triangle with a B and
132:16 - C and if you've ever seen this kind of
132:19 - diagram in a geometry class or some
132:22 - other air and if you've ever seen this
132:26 - kind of diagram in a geometry context
132:28 - you might have seen it paired with
132:29 - something called the Pythagorean theorem
132:31 - the Pythagorean theorem states that a
132:34 - squared plus B squared equals C squared
132:37 - or C equals the square root of a squared
132:42 - plus B squared and in fact that is
132:44 - exactly how the magnitude is calculated
132:47 - so when magnitude the mag function is
132:50 - called on v2 on a vector V mag it takes
132:54 - the square root of the X component
132:56 - squared plus the Y component squared and
132:58 - that gives you that magnitude
133:23 - oops
133:26 - I'm looking for
133:32 - oh yeah well that's like you know
133:33 - there's some weird stuff going on with
133:34 - this mag squared thing I was going to
133:36 - show the p5 source code but yeah
133:55 - but look I guess I won't show that right
133:57 - now let's so I'll pull this up when I
133:59 - get to normalise let's see what
134:00 - normalize so now
134:19 - now that I understand how magnitude is
134:21 - calculated I'm ready to look at how
134:24 - normalization works
134:37 - and once again I'll use the fact that a
134:40 - 3 4 5 triangle is a nice let's use the 3
134:50 - 4 5 triangle as our starting point so
134:52 - let's say have a vector its components
134:56 - are 4 & 3 we know that the magnitude now
135:01 - equals the square root of 4 squared plus
135:05 - 3 squared which is 16 plus 9 which is 25
135:09 - the square root of which is 5 so the
135:12 - magnitude is 5 you can see how this math
135:15 - for calculating the magnitude now works
135:17 - out if I wanted to normalize this vector
135:23 - that means I want to shrink this length
135:25 - which is 5 down to 1 so it turns out
135:29 - that all if I'm scaling the magnitude
135:32 - this if I'm scaling a vector by its
135:34 - length I can just so that's 5 divided by
135:37 - 5 is 1 I can also just take the
135:40 - components and scale them divide them by
135:43 - the magnitude itself as well so this
135:45 - actually becomes 3/5 and 4/5 well sorry
135:58 - so it turns out if I'm taking a vector
136:01 - and normalizing its length down to one
136:03 - or or up to one five divided by five is
136:06 - one I can actually just take the
136:07 - components the x and y components and
136:10 - divide by the magnitude so this length
136:12 - right here is actually three-fifths and
136:14 - this length right here is actually four
136:16 - ffice and that's how you normalize a
136:18 - vector by dividing it by its magnitude
136:20 - Oh
136:22 - so the coding garden raid going on
136:26 - welcome coding garden what makes me so
136:36 - happy about this is that means that
136:38 - people were watching the coding garden
136:40 - not this nonsense
136:41 - so welcome I'm sure whatever was going
136:44 - on there was was really well organized
136:46 - and thought out and just full of like
136:49 - incredible educational material and fun
136:52 - as opposed to my complete nonsense all
136:57 - right
137:16 - so removing this background a little
137:19 - digression I can now actually normalize
137:29 - V by saying V dot divide div for divide
137:34 - a vector by its magnitude so if I do
137:37 - that oh wait a second well there is you
137:40 - can see no matter where I put the mouse
137:42 - I have this next vector of length one
137:44 - but maybe what I should do is then scale
137:48 - it up by something like 50 multiplying
137:50 - it and look at this so now look at this
137:54 - no matter where the mouse is I am done
137:57 - this process of take the vector that
138:00 - points all the way let me use the
138:01 - whiteboard so now I have this multi-step
138:08 - process to make a vector that points at
138:11 - a given direction with a fixed length
138:29 - I have a vector it's of some arbitrary
138:34 - length let's say the magnitude is 100 I
138:38 - calculate that magnitude I divide it by
138:42 - that magnitude to normalize it now I
138:45 - have that same vector with the magnitude
138:47 - is 1 so of length 1 a unit vector and
138:50 - then I multiply it by some arbitrary
138:52 - amount like 50 and I get this vector so
138:57 - no matter what happens this it one would
139:01 - try that again
139:02 - I didn't understand what I was doing I
139:06 - think I do now so it's a multi-step
139:14 - process I have some some vector that
139:17 - I've calculated call it V and the first
139:19 - thing I do is I call vMac which gives me
139:23 - the magnitude maybe it's 100 so the
139:25 - length is 100 then what I want to do is
139:28 - normalize the vector I want the vector
139:30 - to be that same vector but of length 1
139:33 - so I can say V dot divided by that
139:37 - magnitude or 100 that takes this vector
139:39 - and shrinks it down to here then I want
139:42 - to scale it up by some amount like 50
139:47 - and that will then scale it back up to a
139:49 - higher length of 50 so this is my
139:52 - multi-step process with but this is with
139:56 - all of this math and in fact instead of
139:59 - calculating the magnitude and dividing
140:01 - by the magnitude I can just instead call
140:05 - it's such a common operation I could
140:08 - just instead call V dot normalize so V
140:11 - dot normalized is the act of taking any
140:13 - vector and shrinking it to length 1 I
140:15 - did a terrible job of drawing these in
140:17 - the same direction but hopefully you get
140:18 - the idea so now I can simplify this by
140:23 - commenting these out and just changing
140:25 - this to V dot normalize and we've got
140:31 - the same exact result but guess what
140:34 - VDOT normalised VDOT multiply times 50
140:38 - is also such a common operation like I
140:40 - want this vector in this direction but I
140:43 - just want it to be this magnitude that
140:46 - in fact I can even take these and just
140:50 - call V dot set mag 50 so this function V
140:55 - dot set the magnitude of a vector is the
140:57 - process of normalizing it down to length
140:59 - 1 and then scaling it to a particular
141:01 - magnitude you know in this case
141:03 - arbitrarily 50 and the process of
141:06 - normalizing is calculating the magnitude
141:07 - and dividing by that magnitude and we
141:11 - should see this is the same result
141:26 - incidentally it's worth pointing out
141:28 - that I can actually go and confirm this
141:30 - by looking in the p5 source code itself
141:33 - so this is the source code for the p5
141:35 - vector object itself and there's a
141:37 - normalized function which what does it
141:38 - do it calculates the magnitude and as
141:41 - long as the magnitude isn't 0 right
141:42 - because you can't divide by 0 then it
141:45 - multiplies by 1 divided by length which
141:47 - is the same as dividing by length so
141:49 - that is the normalized function I could
141:59 - even look at the set magnitude function
142:01 - and see that it's au normalize the
142:03 - vector and then multiply it by some
142:05 - quantity N and in fact you can see here
142:07 - that's something that I'm not doing is
142:09 - chaining so a lot of these math
142:11 - operations on vectors can be chained
142:13 - meaning I can say normalize multiply dot
142:17 - normalized dot multiply whoops so
142:31 - and by that I mean these two operations
142:34 - vo Malloy's V multiplied could be
142:37 - written as V dot normalize dot
142:40 - multiplied 50 so once again we now see
142:44 - there are so many different ways to do
142:45 - the same exact thing but hopefully this
142:48 - is giving you a better picture of what
142:51 - vector math operations do how they work
142:54 - and how you might choose between static
142:56 - functions versus instance functions and
142:59 - how you might manipulate vectors by
143:01 - using these mathematical operations
143:14 - and so I think we're finally ready to
143:19 - move on to the penultimate no it's not
143:22 - the penultimate it feels a bit so I
143:27 - think this truly is the penultimate
143:29 - video in the chapter on vectors because
143:32 - we're now ready to take this idea of
143:35 - calculating a vector that points to the
143:37 - mouse and apply it as an acceleration to
143:41 - an object and see what happens okay so
143:51 - that's coming in the next video see you
143:53 - there oh my god it's almost 1 o'clock I
144:04 - gotta finish this off though ok
144:18 - all right tech tutorials asks who is
144:23 - coding garden ah if you don't know about
144:25 - the coding garden wonderful then you
144:27 - have you have a whole life ahead of you
144:29 - of discovering something totally awesome
144:31 - Cody Gard is another YouTube channel run
144:33 - by CJ CJ and I are actually planning a
144:36 - collaboration we're about discord bots I
144:39 - think coming up maybe you maybe
144:40 - Wednesday February 26 we'll see he has
144:42 - to be confirmed and it's got great CJ
144:46 - has a lot of really nice complimentary
144:48 - videos that deal with much more like
144:50 - full stack web development so and thank
144:52 - you K week bond for posting a link to it
144:54 - okay
145:11 - Oh
145:16 - alright alright folks home stretch home
145:19 - stretch home stretch it's a lot of work
145:24 - to make these video tutorials but some
145:26 - point I felt like this was just like a
145:28 - hobby or an easy like thing and it's
145:30 - become like much more of a source of I
145:34 - don't want to say stress but like it's
145:36 - this it's work its work in a good way in
145:39 - a good way that's a good thing to also
145:41 - just try to balance everything I don't
145:43 - know thank you all for being very
145:48 - supportive and kind and a lot of people
145:50 - support this channel in so many
145:52 - different kinds of ways and I really
145:53 - appreciate it
145:54 - okay alright
146:03 - Wow there was a lot of people watching
146:05 - coding garden because viewership is up
146:08 - hello I think I think we need a moment
146:17 - there's a really interesting
146:18 - conversation going on in the chat about
146:20 - divide by zero
146:32 - afraid to play that
146:35 - [Music]
146:41 - [Music]
146:44 - eighty-four thousand two hundred
146:47 - thirteen eighty three thousand and four
146:51 - two hundred and fifty
146:55 - seventy-three thousand and eight hundred
146:57 - [Music]
146:59 - 28900 77 2934
147:04 - seventy seven thousand eight hundred
147:06 - sixty two forty nine thousand four
147:09 - hundred eighty nine seventy three
147:12 - thousand five hundred ninety three
147:14 - thirty-nine thousand nine hundred and
147:17 - thirty-three
147:20 - [Music]
147:44 - it's so nice to be just free to be as
147:48 - weird as you want okay careful what you
147:55 - wish for John gelatos because coming up
147:58 - if I could just get a copy a copy of
148:02 - that original print of random digits
148:06 - then I think I'm gonna definitely need
148:09 - to do like a very long long long video
148:13 - of reading random numbers okay
148:17 - oh it's Ken hailey watching and Ren
148:19 - redhead and dev just names I recognize
148:21 - thank you for tuning in
148:24 - very birth okay this is it we're moving
148:29 - on let me just check my phone here no
148:32 - emergency messages could really use some
148:37 - more water but I think I can make it
148:39 - through all right we have arrived
148:46 - we have reached the end we who's we I
148:48 - don't know who he is it's me I'm just me
148:50 - here nobody else just me we we're all
148:53 - together but you're just like people on
148:55 - the internet that I can't see it's weird
148:56 - to say we I'm very obsessed with what
148:59 - pronouns are the right pronouns to use
149:00 - and I don't mean I mean first of all
149:03 - using people's preferred pronouns it's a
149:06 - very important meaningful thing and
149:07 - that's not what I'm talking about here
149:09 - what I'm talking about is whether I
149:12 - should say we is a weird thing when
149:14 - you're doing a tutorial the main camera
149:17 - is autofocusing yeah I know hopefully
149:19 - that's not so distracting and horrible
149:21 - but I now have decided that autofocus is
149:25 - a better solution for than the manual
149:32 - focus because it's better overall but is
149:35 - that like causing like such a major
149:37 - problem I don't think it's doing it that
149:38 - often just when I move around a lot but
149:44 - that is sort of an interesting gift okay
149:50 - hi MIT student Matthias you should
149:54 - definitely be working
149:55 - I hope you don't have class today
149:59 - there's no NYU class today oh boy
150:02 - everybody left all right
150:31 - we have now reached what I think cuz you
150:35 - know I could change my mind maybe
150:36 - different moment is the final forces and
151:34 - all that acceleration stuff okay I think
151:36 - what I need to do is now take my Voronoi
151:38 - fan and point it over here I'm just
151:45 - think if I can get the MIT student to
151:47 - start studying again
151:48 - come on MIT student go and study don't
151:51 - this is Tara this is this melting your
151:54 - brain kids don't watch the tube it's
152:05 - here okay
152:11 - here we are I think this really is the
152:15 - last video in chapter 1 on vectors I'm
152:17 - going to add one more detail to this
152:20 - example of the random Walker which is no
152:23 - longer called a walker I'm now calling
152:25 - it a mover and if where I last left off
152:29 - with this example is every time I click
152:30 - the mouse the mover picks a new random
152:33 - velocity that can be seen here in the
152:36 - constructor P v dot vector dot random 2d
152:38 - now you know that's a static function
152:40 - because I made a whole video about that
152:41 - and then that velocity every frame is
152:44 - added to the position and the mover is
152:46 - drawn as an ellipse at that position so
152:49 - I want to add one more concept to this
152:52 - video and that is the concept of
152:54 - acceleration acceleration oops sorry
153:17 - acceleration is the coop acceleration
153:24 - will act as the building block for all
153:27 - of the examples I'm going to show you in
153:29 - Chapter two because of Newton's second
153:32 - law force equals mass times acceleration
153:36 - so acceleration plays a key role in any
153:40 - kind of physics engine or physics
153:42 - simulation but right now we're not going
153:44 - to worry about the sort of physics
153:46 - aspect of this and just add the idea of
153:48 - acceleration so if position changes
153:52 - according to a velocity vector the
153:56 - velocity changes according to
153:59 - acceleration how do I draw this
154:13 - our mover object currently has a
154:15 - position and a velocity and we've
154:18 - established that the position is a
154:20 - vector to describes relative to the
154:22 - origin where that that where that object
154:24 - is in two-dimensional space then the
154:29 - velocity vector is a vector that
154:33 - describes where it should be
154:36 - I'm add one thing that really throws me
154:39 - off is I'm mirrored over here when I
154:41 - look at this and then over here I have
154:43 - like these different monitors that are
154:44 - showing me what I'm recording and they
154:46 - it's throwing me off right now the
154:56 - velocity describes the velocity is just
155:03 - the velocity describes how the position
155:05 - changes over time so on a frame-by-frame
155:08 - animation a the position is here then
155:11 - the velocity is added to the position
155:14 - and its new position is here and if it's
155:16 - velocity to remains constant it would
155:18 - keep just moving like this as velocity
155:20 - where we applied applied apply however
155:22 - acceleration is can be described as the
155:28 - rib however acceleration can be
155:39 - described as the change in velocity over
155:42 - time so if this object this mover were
155:46 - to accelerate maybe you in the sort of
155:48 - typical way you might think about that
155:50 - acceleration is it's getting faster so
155:52 - we could imagine it that way right first
155:54 - its velocity is this then its like this
155:57 - then it's like this so it's accelerating
156:00 - and moving large or larger steps each
156:03 - frame but acceleration just means the
156:06 - change in velocity and remember velocity
156:08 - is a vector so that could mean it's
156:10 - changing its direction or its magnitude
156:12 - could be slowing down that's an
156:13 - acceleration speeding up turning all of
156:16 - those combined together that's an
156:18 - acceleration is just another vector and
156:20 - it goes into our what I'm calling the
156:23 - motion 101 Albert
156:28 - and that motion 101 algorithm is has and
156:38 - that motion 101 algorithm can be found
156:41 - in the update function I'm stepping and
156:48 - that motion 101 algorithm can be found
156:51 - right here in the update function add
156:53 - the velocity to the position this
156:55 - stopped position not add velocity and
156:57 - right before that this dot velocity add
156:59 - this acceleration so now there we go
157:05 - well why isn't it accelerating it's not
157:09 - accelerating it's not changing its
157:10 - magnitude or direction because the
157:12 - acceleration is zero
157:14 - so let's give it something let's give it
157:18 - a random vector whoo
157:23 - so now you can see that it's kind of
157:25 - speeding up now its acceleration here is
157:28 - constant so even though it gets an
157:30 - arbitrary velocity
157:43 - mmm
157:57 - now the acceleration here is constant
158:00 - and it's almost as if there's this like
158:01 - big fan right in the center that's just
158:03 - pointing in a direction and sort of
158:05 - blows the mover off in a direction you
158:07 - can see that it's turns ever so slightly
158:09 - this is most likely because whatever
158:10 - velocity it picks is not the same
158:12 - directions as acceleration to
158:14 - demonstrate what's happening here a bit
158:16 - more clearly I might do something like
158:19 - set the magnitude of the acceleration to
158:22 - something much smaller so I'm still
158:24 - picking a random unit vector in some
158:26 - direction but then setting the magnitude
158:28 - to point zero point zero point zero one
158:30 - and you can see now it's kind of turning
158:33 - around and I and I could also go back
158:37 - just putting the background and set up
158:39 - that might help us sort of see the path
158:43 - that it's taking and we got the here we
158:47 - got a kind of an acceleration in a
158:48 - different direction from the initial
158:50 - velocity
159:00 - I could also
159:10 - I could also reset the acceleration to
159:13 - something random every time an update
159:14 - let me take this and put it here take
159:18 - this off run it again
159:20 - and now you can see whoa it's just kind
159:23 - of this is almost like the random walk
159:24 - again now the acceleration is
159:26 - accumulative and it's picking it
159:28 - randomly so if it starts to pick it
159:30 - randomly in the same direction and with
159:31 - a high magnitude a few times oh no it's
159:35 - the magnitudes phone so this is
159:41 - something kind of resembling the
159:43 - original random walk but if you have to
159:45 - hit let's see what do I want to say here
159:53 - so this is something kind of resembling
159:55 - that original random walk but the
159:57 - acceleration is cumulative it's
159:59 - accumulating into the velocity so if
160:02 - it's picking it in the same direction
160:03 - randomly a few times in a row it's gonna
160:05 - build up enough sort of speed and sort
160:07 - of fly off in that direction I could by
160:09 - the way so I want to mention this now
160:22 - hmm kind of now there is another useful
160:30 - vector function that I haven't mentioned
160:32 - to you that's kind of similar to the
160:34 - normalize function that I could use here
160:37 - and it's the limit function what limit
160:39 - does
160:55 - what limit does because what limit does
161:04 - is take any vector and cap its magnitude
161:10 - at a certain amount so if I say limit v
161:13 - and this vector has a magnitude of 15
161:17 - but we'll take that vector and shrink it
161:20 - down set its magnitude to 5 the
161:22 - difference between limit and say set
161:24 - magnitude are normalized is if it's less
161:26 - than 5 it's not going to raise it up to
161:29 - 5 it's going to leave it at say 2
162:41 - okay am i back I'm not sure what just
162:43 - happened there
162:46 - when did that happen I think just when I
162:49 - came over here yeah
162:59 - I'm just gonna go back
163:10 - okay not sure where that was a limit so
163:17 - back in the code what I can say is uh
163:19 - any after I apply the acceleration let's
163:22 - make sure the velocity doesn't get too
163:24 - large and I can say limit I don't know
163:26 - I'll just gonna say limit it to two so
163:28 - it's a pretty strict limit there and
163:29 - then if I run the sketch what this this
163:33 - is now really looking much more like
163:34 - that random walk before but I am using
163:38 - the concepts of acceleration and
163:40 - velocity and so now this would allow me
163:44 - to do a lot more stuff with the random
163:46 - walk and that's going to come as I get
163:48 - to more stuff and more and more of these
163:50 - examples in Chapter two but ultimately
163:53 - what I want to show you here is what
163:56 - happens when I calculate a very specific
163:58 - acceleration like one that points
164:00 - towards the mouse location still I might
164:08 - say like you could pause the video here
164:09 - and try all sorts of other algorithms
164:12 - for calculating acceleration what if you
164:14 - used Perlin noise for the acceleration
164:16 - or what if you had the acceleration
164:18 - based on some vector that's based on
164:20 - some some other type of data that's
164:23 - coming into your system
164:40 - but for this particular example I can
164:43 - return to everything that I did in the
164:46 - previous video which is I have the
164:48 - position I have the mouse and now I just
164:54 - want to do that same exact math
164:56 - operation mouse - position set the
164:59 - magnitude to something fixed and apply
165:01 - that as the acceleration let's see what
165:05 - happens
165:17 - Oh No
165:20 - Oh
165:29 - create a vector at the mouse location
165:37 - shoot me uh give myself some more space
165:41 - here
165:47 - oops it's the redo
166:05 - and start by creating a vector at the
166:07 - mouse location
166:18 - and I'm going to set the acceleration to
166:20 - the the result of subtracting the mouse
166:23 - - this object's position then I'm going
166:28 - to set the magnitude of that to 0.1 and
166:32 - I'm picking that arbitrarily
166:47 - now I have a three-step process
166:50 - calculate the acceleration apply the
166:52 - acceleration to the velocity limit the
166:54 - velocity then apply the velocity to the
166:56 - position let's take out the limit just
166:58 - for right now maybe we don't need it the
167:09 - result is something like an elliptical
167:11 - orbit because the object is be
167:15 - accelerating towards the mouse
167:25 - amazingly we get this result that's
167:28 - something like an elliptical orbit you
167:30 - would think the object would just be
167:31 - going straight towards the mouse why is
167:41 - that so if this is the mouse right here
167:50 - and this is the object and it's going in
167:52 - this direction basically I'm taking this
167:55 - and applying it as the acceleration so
167:58 - if I take this acceleration vector and
168:00 - apply it to the velocity velocity plus
168:04 - acceleration equals the new velocity
168:06 - which is this and then add so that it's
168:09 - over here then this is the vector I add
168:13 - to it so we take this velocity at
168:17 - acceleration and now this is the new
168:20 - velocity see how I'm ending up in this
168:22 - path now depending on the relative
168:25 - strength of the acceleration then I
168:29 - might be sucked into like where I'm it
168:32 - would be these what I'm being attracted
168:34 - to much more quickly or I might spiral
168:36 - around it and we can experiment with
168:38 - that as a variable so for example what
168:42 - if I said instead of point one set
168:44 - magnitude to five well you can see now
168:47 - it's really going out of control
168:49 - so maybe this is where I want to limit
168:51 - the velocity and you can see now I've
168:56 - done that it can't move very fast but
168:58 - it's going to really that acceleration
169:00 - is super strong it's going to like move
169:03 - right to it and in fact it's actually
169:04 - going to stop at it because it's you
169:07 - know if you gets past it's gonna tell it
169:08 - to slow down and go back in the other
169:10 - direction and maybe I want to limit this
169:12 - and set this here you know there's so
169:15 - many different ways I don't know what
169:16 - I'm trying to do here but you can see I
169:17 - can get very different kinds of
169:19 - qualities of how this object follows the
169:22 - mouse based on this model by playing
169:24 - with what the velocities limit is and
169:26 - what the strength of the acceleration is
169:28 - as well
169:46 - now how I play with these parameters and
169:49 - how I set the acceleration and how I
169:51 - have multiple factors in an object world
169:55 - that could affect its acceleration
169:56 - what if it's attracted to the mouse but
169:59 - there's also a force from the edge
170:00 - keeping it within the room
170:11 - now how I play with these values how I
170:14 - calculate the acceleration how I think
170:16 - of this object in a world where multiple
170:18 - factors can affect its acceleration
170:20 - maybe it's attracted to the mouse but it
170:22 - also there's like a wind force kind of
170:25 - blowing it across the window there's so
170:27 - many other ways that I might experiment
170:31 - with this way everyone is discussing
170:40 - auto safety yeah
170:49 - now how I actually calculate the
170:52 - acceleration and how I think about this
170:55 - particular mover object in a world that
170:58 - a lot of different things could affect
171:00 - its acceleration that's really where I'm
171:02 - going and that's really the model of
171:04 - forces so there's really this idea of a
171:06 - force right there's this force that's
171:08 - pulling the object towards the mouse but
171:12 - what if there were other forces what if
171:14 - there's forces that are coming from the
171:16 - walls of the canvas so to speak the
171:18 - edges what if there was just like this
171:20 - wind force or gravity or other types of
171:23 - things friction force so this is where
171:26 - I'm going in Chapter two I am going to
171:29 - calculate a variety of different force
171:31 - vectors and put them all into the
171:33 - objects acceleration but right now I
171:35 - think you have something you could
171:36 - really play with as an exercise how
171:39 - could you now you have something you
171:45 - could really play with as an exercise
171:47 - can you create a world can you create a
171:51 - simulation with an object moving around
171:53 - the canvas that all of its motion
171:56 - emanates from its acceleration what are
171:59 - other ways you could calculate the
172:01 - acceleration to create some type of
172:03 - dynamic motion
172:17 - I'm [ __ ] and so this really wraps up
172:20 - this and so this really wraps up this
172:24 - section on vectors I'm sure I missed a
172:26 - zillion things I can't talk anymore I'm
172:30 - so done and so this wraps up this
172:35 - section on vectors I'm sure I missed so
172:37 - many things about vectors and there's
172:39 - many more math upper up math operations
172:42 - with vectors and other things to think
172:44 - about and consider and hopefully I'll
172:45 - continue to touch on those as I go on
172:47 - and on to more and more examples if you
172:50 - make something share it with me at the
172:52 - coding trade calm in the comments here
172:54 - if you have questions you can also ask
172:55 - them to join the discord to ask your
172:57 - questions there and I will be back in
172:59 - section two to talk about Newton's laws
173:02 - of motion and forces all right Thank You
173:09 - Danielle for your encouraging words all
173:14 - right I think that I'm done for today
173:22 - I'm gonna it's saved
173:25 - so nobody freaks out this is kind of fun
173:35 - and yeah let's talk about schedule for a
173:41 - second so ideally I would like to I
173:48 - really I'm only through chapter one
173:50 - right now
173:52 - oops not the coding train comm so so
174:01 - here's where we are I am through now
174:05 - chapter one I didn't really make the
174:09 - videos for the introduction but I have
174:11 - enough stuff that I've previously made
174:13 - which is basically that topic that I
174:15 - will I know I didn't do anything for
174:17 - Valentine's Day sorry Carson that that I
174:22 - think I've got the playlist set for
174:26 - introduction in vectors so I would like
174:30 - to buy
174:31 - I may be through all of this stuff it's
174:33 - gonna take me longer I think but so I'm
174:37 - gonna be here once a week I'm gonna try
174:39 - to do Thursday's sometimes in the
174:41 - morning sometimes in the afternoon I'm
174:42 - really gonna try to move to Thursdays as
174:43 - my live stream day so stay tuned for a
174:46 - date this Thursday this week I have to
174:50 - look at my calendar which I can look
174:52 - over here I can actually tell you
174:53 - whether it's gonna be morning and
174:54 - afternoon right now people want to know
174:59 - I'm gonna look at this other computer
175:01 - which has my calendar on it and I need
175:06 - to switch Google accounts today is the
175:11 - 17th Oh Oh morning Thursday morning so
175:16 - this third I'm putting this in my
175:17 - calendar well I'll do that later so and
175:21 - then the 27th will be in the afternoon
175:23 - so I am going to attempt now starting
175:26 - this week ah
175:27 - I'm like trying to switch screens here
175:30 - to live-streaming every Thursday I don't
175:33 - not a regular time every Thursday but
175:36 - basically either 9:30 or like 1:30 those
175:40 - would be the two times 9:30 or 1:30
175:43 - Eastern with some wiggle room there once
175:47 - per week if I'm being honest here I am
175:50 - probably only gonna get three live
175:52 - streams per month is it is it even March
175:55 - yet no it's February so I'll have one
175:57 - next week I don't know how many I ended
175:58 - up getting in February is it a leap year
176:02 - somebody tell me so and then hopefully
176:07 - once I get to June June is busting out
176:10 - all over
176:11 - I will have a very free month in June
176:14 - and whatever I don't get to you know
176:17 - keep me honest about this remind me
176:18 - about this I'm saying it now to try to
176:19 - put this out there in the universe I'm
176:21 - gonna just do a lot of extra live
176:22 - streams in June to get through
176:23 - everything that I don't get through the
176:26 - tricky thing is here by going through
176:28 - this I'm leaving other things undone I
176:30 - haven't made a coding challenge video
176:32 - since I can remember I really want to
176:34 - make more of these coding in the Cabana
176:36 - videos
176:36 - get that hilbert curve one but I got to
176:38 - do another one how to spin the wheel for
176:40 - the next coating of the Cabana topic so
176:43 - many things I'm struggling to find the
176:45 - time for everything but I am doing my
176:47 - best so that's what I've got going right
176:50 - now feedback and comments and everything
176:54 - is always welcome it is indeed a leap
176:57 - year says K week mon whoa volume is so
177:02 - loud I will take a few questions before
177:07 - I go it is a leap year
177:13 - press Z and X that means I'm not this
177:17 - one say I'm advertising this which I'm
177:18 - not by the way let me mention this I
177:28 - haven't put out a call for this or
177:30 - anything although I may but I guess
177:34 - unofficially without like I haven't
177:36 - really thought this through yet exactly
177:38 - what I'm looking for if you are someone
177:40 - who is interested in doing like a
177:43 - freelance job and your skills are node
177:48 - and CSS which is a weird set of skills I
177:53 - am looking for your help because I am
177:57 - looking for help with the build engine
178:00 - of the nature of code book
178:04 - Joey Lee has been doing a lot of work
178:07 - and help on this with me and you'll
178:09 - you'll see his name pop up quite a bit
178:11 - in the repo and all the issues but
178:14 - basically I I want to keep the book
178:17 - updating going along with doing the
178:19 - videos and there's a lot of open issues
178:21 - and there's a lot of bugs with the PDF
178:24 - rendering generation of the book itself
178:26 - so if that's something you're interested
178:28 - in I don't know I don't know join the
178:33 - discord and maybe I can have a way of
178:36 - people getting in touch to express their
178:38 - interest in there but I'm actually even
178:42 - alcohol books boxes so I know there's a
178:45 - lot of people already in the community
178:46 - who volunteer and do a lot of work
178:49 - Kotick train stuff and I appreciate that
178:51 - I'm always conflicted about how to
178:52 - manage sort of goodwill and spirit of
178:55 - collaborative open source as well as
178:57 - valuing people's work and paying people
178:58 - for a work and I'm always struggling
179:00 - with that balance but I believe this to
179:02 - me is a job that I particularly just
179:06 - need specific help with so I think it
179:07 - makes sense to for this to be paid work
179:09 - also it the book is not something that
179:12 - I'm getting rich off of but I do when
179:13 - when I have the new edition out it will
179:15 - be sold so there is some income that's
179:17 - generated from it so I do I can try to
179:19 - fit that in Florida Florida is asking
179:21 - which is the discord so the discord huh
179:26 - yeah no so Kay let me cover the bill let
179:29 - me mention this latex thing so first of
179:31 - all the discord is pls somebody post it
179:34 - into the chat there is a I think I can
179:36 - open it up here let me open up the
179:41 - discord because I have a separate
179:43 - account that I created just want to turn
179:45 - it on to safe mode or whatever how do I
179:48 - do that again where I go to settings in
179:52 - streamer mode enable streamer mode okay
179:57 - I'll just look at these and go here and
180:01 - go to schedule all right so if you
180:08 - haven't seen the discord this is what
180:09 - the discord looks like there's a channel
180:12 - where I post updates about when I'm
180:14 - going to livestream so you know I know
180:16 - that I don't do a good job of having a
180:18 - regular schedule but if you want updates
180:20 - about that you can join the discord if
180:23 - you join the discord just to mention you
180:26 - will need to read the full all aboard
180:30 - code of conduct and reply with an emoji
180:34 - before you have posting permissions but
180:36 - there's various channels and it's a
180:37 - place where you can also get help on a
180:39 - variety of topics and that sort of stuff
180:42 - so if you're not in the discord but
180:43 - you're part of this community please
180:44 - join the discord and AH K week - do you
180:50 - need latex help so
180:53 - um this was a discussion currently the
180:57 - PDF generation of the nature of codebook
181:00 - is done with something called prick
181:03 - prints XML and prints XML converts us
181:08 - exactly this converts HTML to PDF so I'm
181:11 - not opposed to a different engine to do
181:14 - this same exact task but I want I do not
181:18 - want to write the book in latex I'm
181:20 - writing the book in HTML
181:22 - this way I can I have a build process
181:25 - that can easily generate the website as
181:27 - well as the PDF book itself and it's one
181:32 - HTML document that generates both and so
181:35 - I if there is a way to have latex be
181:38 - part of this equation I'm not opposed to
181:40 - that but at the moment this is the best
181:43 - solution I think and also this is using
181:47 - I mentioned this constantly but the
181:50 - engine that is also doing this is is
181:52 - this gonna come up no magic book project
181:55 - I think yes it's using this this project
182:00 - called the magic book is kind of the
182:01 - node app that runs prints XML and does
182:05 - other sort of build stuff to build a
182:06 - website as well I know that a lot of new
182:10 - out of modern publishing web friendly
182:14 - HTML CSS friendly publishing frameworks
182:17 - and applications and websites have come
182:18 - out so maybe this is something I should
182:20 - revisit but at the moment this is what I
182:23 - am doing okay let's see if there's any
182:26 - other questions
182:28 - [Music]
182:32 - Philip asks what's the difference
182:34 - between the old and new book um quickly
182:38 - JavaScript instead of processing and
182:40 - then bug fixes little minor updates to
182:44 - make the examples a little more clear
182:45 - based on feedback and then hopefully a
182:49 - major rewrite of the neural network
182:51 - chapter and a new chapter on neural
182:53 - evolution those are the sort of key
182:55 - changes joy fav'rite i am new in
183:00 - programming what would be your best
183:02 - advice to get me to learn fast
183:05 - so first I might say don't worry about
183:08 - learning fast take your time learning
183:11 - fast it's like hard to learn fast
183:12 - programming is hard it's it's a you know
183:14 - I've been doing this for a lot of years
183:16 - and it takes a really long time so you
183:19 - can be frustrating it can make you feel
183:21 - unhappy by like having this expectation
183:23 - that you're gonna learn it fast that
183:25 - said finding a community that you can
183:29 - learn with I whether it's an online
183:32 - community or a real life in meetup
183:34 - community that to me I always think is
183:36 - really really helpful
183:37 - and I can recommend communities like you
183:39 - know communities in art spaces like in
183:41 - New York school for product computation
183:42 - is a wonderful place it's not like a
183:44 - learn to code place specifically but
183:47 - that's one that I would really recommend
183:48 - there places like the recurse Center in
183:52 - New York a lot of them have special
183:54 - kinds of scholarship programs that you
183:56 - can apply for but yes so that's that's
184:01 - what what we know in your local
184:02 - community is there a group that is
184:05 - meeting on a regular basis where people
184:07 - are learning together that's that I
184:08 - think is a really wonderful thing you
184:10 - can do plus I don't know I have some
184:12 - YouTube videos maybe they help
184:15 - [Music]
184:19 - you know I don't want to give that the
184:22 - print version will be out when it comes
184:23 - out
184:24 - my goal was at the end of 2018 how well
184:27 - am i doing on that call then it was the
184:30 - end of 2019 so I could say into 2020
184:33 - we'll see
184:35 - [Music]
184:40 - Thank You Zack bear for your nice
184:42 - comment about how the videos inspire you
184:45 - I have been asked you like Python do you
184:48 - recommend it yes I like Python yes I
184:51 - recommend it
184:54 - hello to Bosnia interference on the mic
185:02 - was it happening a lot this whole time
185:07 - somebody didn't mention it I thought it
185:09 - wasn't a big deal because I didn't see
185:10 - it a lot do you ever try to VR headset I
185:17 - have tried to be our headset my eyesight
185:25 - is terrible and we got a viewer from
185:33 - India Aloha to India and Brazil people
185:37 - are now saying where they're from by the
185:39 - way my favorite thing about the discord
185:42 - is the pets Channel
185:46 - this is like the greatest thing ever and
185:49 - this by the way boggle no but I don't
185:52 - think boggle got adopted yet so I am
185:55 - currently now fostering my family's
185:58 - fostering these puppies that were
186:01 - rescued from Kentucky a stray stray was
186:05 - rescued also but the mother has already
186:06 - been adopted there four of them left
186:08 - they'll be at the contact muddy paws
186:11 - search for muddy paws on the internet if
186:14 - you're interested in your New York area
186:15 - and would like to adopt a puppy
186:19 - [Music]
186:25 - all right everybody I will see you
186:28 - Thursday Thursday I'll be back on
186:31 - Thursday Thursday
186:33 - see you Thursday
186:35 - I always forget this
186:51 - [Music]
187:21 - [Music]
187:39 - I'm gonna do this this dot this dot this
187:42 - dot this dot song never forget the Vista
187:45 - miss somebody
187:46 - [Music]
187:57 - I'm gonna say once again coordinates
188:08 - [Music]
188:13 - coordinates
188:19 - [Music]
188:28 - and auto-tune and the internet will fix
188:31 - that
188:33 - [Music]
188:56 - [Music]
189:01 - so this is random this is noise Perley
189:04 - noise that is in the core random
189:06 - algorithm the actual random algorithm
189:08 - itself those numbers aren't related at
189:11 - all you pick like I'm picking random
189:13 - numbers between zero and ten nine two
189:15 - seven six one nine four eight nine two
189:20 - one three I pick 9/11 family but with
189:23 - curly noise I might pick numbers like
189:24 - this two three four three four five six
189:28 - five four five six seven five six seven
189:32 - five six seven eight nine eight seven
189:35 - six this is like Perlin noise
189:37 - performance apart
189:38 - [Music]
189:43 - for eighty nine two one three five one
189:46 - two three four three four five six five
189:50 - he was like gurgling noise performance
189:52 - apart with curly noise I might pick
190:00 - numbers like this three four three four
190:03 - five
190:08 - by purling noise that is totally noise
190:10 - so this is Hurley noise that is Hurley
190:12 - no this is this is Hurley noise that
190:13 - it's Hurley no so this is Hurley noise
190:15 - that is her Perlin noise so this is
190:35 - Hurley but with pearly noise I might
190:41 - pick numbers like this
190:42 - [Music]
190:57 - this is like Perlin noise performance
191:00 - part unicorns and rainbows and cupcakes
191:03 - what else is there yes kids thank you
191:08 - very much
191:09 - kittens and rainbows and cupcakes notice
191:11 - that look what I get I really lose my
191:14 - mind
191:18 - [Music]
192:31 - I feel just sort of like a nice feeling
192:35 - of relaxation everything's gonna be okay
192:37 - today dream is not broken it has not
192:40 - frozen this isn't this is a wonderful
192:42 - thing okay we're gonna do it I'm really
192:45 - getting to something I need my sound
192:54 - I forgot
193:09 - [Music]
193:16 - all sorts of text generation analysis
193:19 - states that I will use continuously over
193:22 - and over again
193:23 - [Music]
193:41 - [Music]

Cleaned transcript:

check check 1 2 3 audio test hello coming to you live in just about 15 seconds good morning happy Monday good Monday morning no no no no no no that's not my that's not my phrase I'm just it's no Lodge to mpj from fun fun fun fun fun fun there's three funds and the fun fun function okay here we are I don't know oh boy I don't know if anything is working here mess hi welcome it is me Dan on the coding train Oh live on a holiday because I was supposed to be here on Friday and I just couldn't get it together to be here for a number of different reasons that I won't get into and I thought I'll make it on Monday and it'll happen I'll make it on Monday and then I woke up talking thinking oh really I was gonna livestream today yeah so rushed out of bed threw on the same exact clothes that I was wearing the last time I live stream so that when these videos get edited no one will be the wiser and Here I am a special shoutout to E and O who I believe are maybe watching from home this morning just throwing me for a loop a little bit and also shoutout to our on button I can never get this right brilliant org the sponsor of today's livestream brilliant org which was also the sponsor of my guest spot on M PJs fun fun function which I remembered which will also add the same topic that's what I'm going to do today life is strange also in this room appeared a light that wasn't here the last time maybe can I get you a view of this light hold on a second here I'm gonna show you something rather strange a little little inside baseball here a little behindthescenes and will also shout out to all of you who are watching this on a television because apparently lots of people watch the coding trade on a television I have now learned brilliant org slash coding train you can sign up for free and do a fun puzzle a challenge there's a computer science course there's some other stuff I'll show you later but you can also if you're interested get a discount 20% off the premium a subscription okay let me look it's just much brighter in here right now so I'm not sure if I need to do something about the lighting but let me see if I can show you something yes okay this is my little roaming camera which I can point at me oh it's upside down but I can do this thing here there we go so look look look at the different in this thing about this camera that makes me look younger okay so I'm just going to show you is in this room here right up there this is a hole light on the ceiling that wasn't there the last time I was in this room I don't know where it's a mystery like why did it appear where did it come from these are usually the lights that I use you can see these are the lights that are on the wall all in addition to the camera but and over here but oddly enough there's a sex relate very strange okay we don't need this I don't know what I'm doing here much too much fun in here ah okay that's the floor what No ah okay turn this camera off it's revealing too much and there we go so I'm here live once again did I say that already I'm so tired but um let's be serious for a sec you know what you don't actually nevermind I think what we need to do is who know it's missing again I didn't bring my random number I didn't bring my ran few minutes to go get it oh and this is up again why is this here that's let me turn this off okay let's be serious for a moment everybody the purpose of today's livestream is for me to continue my set of tutorials for the nature of code 2020 a set of tutorials that follow along with a book that I wrote many years ago in 2012 was when it was published and the examples were made in processing Java and I'm redoing a set of video tutorials to go along with those examples in JavaScript so I will continue that today I will not be starting with the ceremonial reading of the random numbers when I take an intermission which I will do at approximately 1130 I will go and get that random number book but now is a good time for me to highlight my most recent video that came out on the coding tray and the coating of Cabana hilbert curve challenge don't they look kind of like washed out maybe do I need to like deal with the lighting I don't know and it was it's this if I completely forgot how to livestream so I'm gonna go here and I'm going to go to the Cabana let's let's go to the Cabana so I really would like to make a lot more of these it certainly was this particular video was watched quite a bit more than my usual uploads so that was kind of nice to see I'm gonna start that happens check check one two three checking the mic check check hello welcome to oh the coding train with me your host dan Shipman it's a Monday morning this is a bit of an unusual time for me to livestream in fact it's a holiday here in the United States NYU is closed even today but I didn't miss my livestream on Friday so I am returning you could all see right through this right I missed my livestream on Friday so I'm returning today to continue my video tutorials on nature of code now I am I did point out in my dress rehearsal you watched that there was a little bit of an issue with the lighting but mister ugly in the chat is saying the light is looking fine maybe brighter than you're used to but looks good I look good thank you thank you that sweater makes me think your tie is hanging sideways yeah by the way I was rewatching the edited versions of the videos the nature of code videos well there's like four four of them that are ready I mean they're very lightly edited they're really just pulled out of the last live stream I shouldn't mention this actually it's gonna drive everybody crazy I'm not gonna mention there was something in the videos driving me completely insane oh I'll just mention it because you know you're only like 200 ish people and there'll be a more people who will watch it but oh my hair was kind of like I'd be like hair like sort of like curled like a little couple pieces of hair like that kind of that's and I couldn't watch it so I don't know I've I have to redo all those videos just because of that but we'll see okay and let's see so before I get going with the nature of code stuff Simon's actually about the convolutional neural network videos those are done they're ready to go I am one of the things that I do is I use a service called 3play media to caption everything and it takes a while for the captions to be ready I think these are longer they're just taking a while also I got to make the thumbnail oh that stuff so I just haven't gotten around to it but I appreciate you asking those will be out soon and I think though before uh uh before I move on to doing the nature of code stuff I would like to show these community contributions there's a lot of them which is very exciting and I don't have a system I really think that I look pale and weird matchy will color Greg actually I need to do a test I'm having some recording issues I have to also sneeze so I'm gonna mute my microphone very serious sneeze my sneezes you know I've said close to setting a world record at the sneeze Department I was coming over here because I was going to look for something that I've now forgotten anyway I would like to go through these community contributions so I I guess I'm just gonna click through all of them and try to not spend more than 20 to 30 seconds on any of them so we'll get through them I mean in just a little bit I will mention that in the discord we've been people have been sharing these so if you haven't joined the discord maybe somebody could post a link to the discord in in the chat here and Arnab is asking did it break your 10 print contributions record I don't think so I think the I think if I go to coding challenges and I look for 10 print and I go to to the challenge I think this one I mean just eyeballing it this one looks like it certainly has more so no video I believe has more community contributions than the 10 print one but I think the helper curve is on its way so let's look at some of these I kind of want to do them in so David Snyder made this wheel thing let's let's we got to keep working on is a very long long term project because I like the idea of like doing them in random order okay but let's see so this one is translated to C sharp which is interesting I actually went to okay so I assume that this is just gonna give me the C sharp curve so I won't spend more time looking at that but thank you Clement and I recently went to a workshop on unity know about this unity thing I should really learn that it looks amazing so C sharp is in unity okay Hilbert and Z curve oh look at this by Kobo L so it looks like here let me make this a little smaller I can like play with the color that's fun I can switch to a different curve so there's also the Z curve which is another spacefilling curve looks like that that is awesome random color and then I can adjust the order and I like how the thickness and I should probably make these darker so we can see it a little better I like how that the thickness of the stroke is tied to the order that's cool great work alright where are we oops now I'm sniffling him now I want to see Oh done in Haskell with five lines of code amazing and I suppose this is the result and I suppose we could see let's let's let's see if this is really five lines of code well I was like a lot of code to me I guess probably just in here this is the actual code cool I don't understand any of this but it looks really cool thank you for sharing that Nikita interpolation between orders oh okay I'm excited for this I am really excited for this yeah there we go this is what I was hoping to see really nice there's something about it that doesn't feel like it's coming from I mean it's yeah it's coming two corners kind of go that it's really cool I don't mean this is a critique it's a little bit different than the three blue one Brown where I feel like somehow it pulls out from the center if that makes any sense whereas this is like pulling out from the corners that is really cool I wanted to make a version of this myself but didn't get around to doing so great work K week Mon is pointing out that the Haskell one was refactored for making it easier to read okay driving a car oh I know zooms out sorry I'm gonna get to the driving a car going in order whoa that is also so cool I love this I love the fade in the zoom now is there there must be a way to get the the the one that you're kind of like zooming out a line there's like a crossfade between the one that was previously drawn in the next one when it finishes and he's barely noticeable but I feel like those there's must be a way to get those like aligned perfectly how far how long will this go for oh my god this is so awesome I hope I could I didn't actually haven't looked at these I saw some of them but this what I had not seen I guess it finished my sneeze no okay let's look that wasn't so beautiful I'm going to remove myself for a sec okay I think that one is you so cool okay let's go to driving a car this is wild okay no way it's when I didn't see already so I'm I'm acting this is acting but I was this excited when I saw her on woah this is much harder than I thought do I win a prize if I make it all the way oh look I could just go anywhere I want that's cool I like the idea of like constraining it or maybe using this as a path for my like AI cars that I never actually made a video about but that I built during a live stream cool this is awesome oh and that you know vectors and forces all ties together image rendering curve what is this this one's in processing so one thing I would say is when you if you make something that doesn't run in the browser one is if you could do like a blog post about it will you write a little bit and then maybe do a screen capture in the blog post that's really helpful to like just see your project instantly another option could be to add a readme file and then you can embed an image into the rimi file or even like a gif so I'm very happy to download this and take a quick peek at it but you know that's something that I would really suggest that you get in a habit of when you're building up a portfolio and a portfolio is maybe too strong going forward but just sharing your work on the Internet that the source code is great but if you can write a bit about your process and document it with some images that's always a wonderful thing to do so let's see though if I can make this happen really fast okay okay sure no yes fine whatever oh yes no aah oh my god help me cool so it's doing the Hilbert curve and using the pixels from a particular image that's wonderful thank you for sharing that um hilbert curve with p5.js beautiful we are seeing it happening here on code pen I always like to see other code editors that people are using now we're down to editable spacefilling curve by Simon Tiger whoa okay look at this talk about selfdocumenting here's the p5.js sketch with a whole page describing everything that's going on oh my goodness Wow what is going on here so there's a seed there's a hilbert curve there's the Morton curve the zorder curve the piano curve the sierpinski triangle I don't know what's going on here I don't know how to operate this oh oh but I could oh I can like design my own and then it'll make it in here and then there's like a seed Oh was the seed do little boy what did I do I ruined it oh I see the configuration is maybe tied to a number so this is the seed oh I see this shows the hilbert curve and then maybe these show the rotations and then I can also do the grid size whoa oh my god this is wild Simon and these are the rotation instructions oh my goodness I'm gonna have to play with this more later really unpacked this great work image dithering with hilbert curve okay oh I can choose a file let me find a file here I've got a kitten image so I uploaded this kitten image let's increase the order there we go cute and now I can animate it nice work so this there's the dithering thing is really interesting because I did some quick experiments where I just pulled a pixel color from an image and just assign that to the particular line segment on the hilbert curve but the dithering process involves actually looking at pixels on the previous spot and the next spot along we hold for a curve are looking at the difference between the brightness and then coloring that way I'm gonna have to take a break and get some water or something I've really I think I'm like allergic to this new light let's see if I can get through all these though Hilbert's flower whoa that is wild this is some variation on the Hilbert's curve probably changing like random angles or something and it makes a nice flower pattern I love that thank you Brian new animated hilbert curve we've got more morphing yes this is what I mean by it sort of feeling like it's morphing from the center not the corners if that makes any sense so this is I love I love these animations and this one looks like it was done in Visual Basic so this is what I mean by you can record a gif and included as part of your github repo to help be able to see it real quick if it's not executable in the browser piano curve oh yes I wanted to see this this is from K week Mon and of toggle mode whoa I know what's going on here there's an order slider and I don't know what the toggling of the mode does but I like it thank you for this I'm gonna have to look at this more later as well hilbert curve SVG from L system so L system is another technique I do have some videos on it for how that you can generate a variety of different fractal patterns one of which is the hilbert curve I like that I can just select rainbow oh oh oh that's awesome and I guess this is rendering it as an SVG rather than canvas drawing we have got the Gosper oh look at that that is so cool I'm gonna have to do oh and then like the colors are cycling through it oh I'm gonna have to I'm gonna have to try doing something like this I can animate it oh and I'm animating it and the colors this is like the animation speed wild ok great work dragon curve oh we've got a lot of different curves from David Schneider now I'm having trouble seeing the difference between visually between that that the dragon curve oh maybe there's like an interface that I missed on this one oh hold right click tap and scroll to impress any key I see so this one will cycle through different curves cool I will play with that more later I'm just moving quickly now and hilbert curve translated in PI game alright let's take a look a little bit of Python here ooh okay lying intersection oh I love a good line intersection fun good oh there's a create vector function oh nice just like in p5 okay thank you for all these wonderful community contributions I am now going to move on to talking about vectors and nature of code again but I need to take just like two minutes I have a frog a literal frog in my throat and I will be right back so let me put on some music for you I'm just going to put the little intermission animation right back I'm back all right everyone there's a lot of people watching today I'm not sure why I guess it's maybe it's a holiday here in the US and a lot of you are at home and are available to watch kind of get myself situated here whoa what is going on oh this is because these are new I'm looking for where I left off George oh yeah February 7th there we go okay not here okay so I think I think where I left off and where I need to be today is adding the concepts of adding the concept of acceleration to this particular example and then I'm going to make an example where the object the Walker accelerates towards the mouse and then that will require me to look at a couple different things one is static versus non static functions as well as normal to normalized function so those are the main things that I want to look at here static versus non static normalized make an example where the Walker accelerates towards the mouse and then that will set me up for moving on to chapter 2 ok now before I apologize for this but last time I did my nature of codes session the separate backup recording failed so I just want to check to see if that is working oh of course I didn't even start it sorry I'm gonna just check let me just hit multi corner so I'm gonna record for a couple minutes and I will check that in a second so I think and I lost the chat here we go okay so let me go for a second to right here let's try this I do chapter to NOC underscore yeah or actually underscore one yeah this is what I'm looking to do a quick little adjustment okay so this is ultimately to the example that I'm going to sort of build today and go through a lot of the pieces of this in terms of how vector subtraction works house what's the difference between a static function with p5 dot vector and and there should be let and also how normalized function works okay really not anticipate having this sort of difficulty today so many people watching all right everyone oh so I'm really concerned about the audio but I know it's complaining so I guess it's fine I feel off today I don't know why but maybe maybe things will start to sort of like kick in and feel less off in a moment and I'm like closing things and I don't want to close that's fine though come back to me there we go everything's going to be fine everything's going to be fine this is what was left in the last one now now let me just check and make sure the recording system is working I'm gonna hit stop on it and I'm gonna just quickly take a quick peek at it you know I apologize for doing this test test mute my mic here system appears to be working hey need a vacation okay let me get back to here when we get back to here let me get back to here and here we go well what's going on with this camera what happened to you my little friend someone was in here messing with this camera god and you see that okay looks pretty in focus so I will make that as a yes all right so some actual content is happening now 40 minutes in welcome back to nature of code chapter 1 vectors and where I am leading to where this whole set of videos will eventually very shortly get to is building this particular example where as I move the mouse around this Walker object or a mover object or a particle object whatever I want to call it is accelerating towards the mouse almost as if it's attracted to the mouse and in chapter 2 I will actually look more formally at gravitational attraction and how that works but in order to get to building this example there's a couple bits well there's a very important bit that is oh well there's editing I have added in I forgot but before I get to building this example I want to take the time to cover something known as a static function because this idea of a static function is fundamental to how I'm going to work with p5 vectors in all of the examples and in the previous video I created this example that looked at what happens when you create a random vector a vector always of length 1 but with any given random direction all right so sometimes I see the chat out of the corner of my eye and I'd like it sends my mind in another direction and I lose my train of thought so let me just do that again this is the example I left off with in the previous video oh boy I got to fix my hair this is the example I left off with in the previous video where I was looking at what happens when you pick a random vector and not just oh right I know what I want to say this is the example from the previous video where this is the example for the previous video where I looked at picking a rock rock rock rock rock rock rock rock rock rock rock rock yes 375 people are watching a lunatic on the internet talking about random vectors and clucking like a chicken and every once awhile I see the mic go all the way into the red and it just makes me very nervous what if the audio is just recording terribly right there seemed to be some interference high pitched low volume noise right right I saw that as well all right we're just gonna hope that everything's fine okay we go ed says he's finally lost it I would sit finally I think I think I think it's wellestablished that I've lost it years ago this is the example I made previously where I picked a random vector and so the vector has a random Direction always of length 1 and then I'm scaling it with some random value so reason why I'm highlighting this is right here the way I picked a random vector P 5 dot vector dot random 2d is a little strange and this is in fact an example of a attic function okay oh hello there it's me by the weight board let's establish something this is me creating a vector object the variable V now stores a vector object of type P v dot vector I can call functions on that object v dot v dot multiply this is no different than what I was doing in my example with the Walker I make a walker object I say Walker dot update Walker dot show I'm calling functions on the actual instance of the Walker itself that's what I'm doing here calling functions on the actual instance of the vector itself the actual vector object V which is a vector object a p5 vector object this is how this is quite typical Twite I don't know what I'm saying here I know what I'm saying here but I'm saying it too many times don't need to say this many times this is conventionally how you've seen how this is conventionally how I've talked about and used objectoriented programming in my video tutorials most of them but there is another way maybe you've seen this before in other contexts programming in JavaScript for example have you ever seen something that looks like this math dot random there's a mouse cursor right there in a weird place this is the documentation page for the math dot random function is math an object and why does it have a capital capital letter this looks very different than Walker with a lowercase which I know is an object dot update but it's also something dot a function call all of this yeah it's a good point someone's talking about why it was named bolt is it a product or factor or scale I kind of agree with that actually we should change that I yeah math is not an object instance just like p5 dot vector is not an object instance p5 type vector is a class from which I can make vector objects math is also a class so this was a very longwinded way to say that a static function is one that is called on the class name itself p5 dot vector dot add for example this is the static version of the add function this is the IO regular nonstatic the object method itself add and so number one this is just me defining for you what it means to have a static function and in many cases static functions art will can I just do this whole thing over because I kind of like didn't really know where I was going or why I was here I didn't like come back to life right not that I don't know maybe I haven't come back to life yet but I really felt that you to come back to life and I feel like this video is now when it gets editors to be like 20 minutes long you really just wanted to say something very simple which is like what a static function is or maybe I just need to get the random number book as some people are avoiding out no and people get very upset with me when I decided to get to start this whole thing over but I am I am I am you can't stop me trust me the world the people of the future who will be watching the nature of code video tutorials will thank you for suffering through me doing this twice because they will get to watch a like two minute video where I just quickly explain what a static function is rather than this 20 minutes or like choppy edited weird thing so you're doing a service think of well the good you're doing for the world right now static method and instance method and we're know very kindly as saying that I can start over which I appreciate okay hello it is I me not you but a person I should while I'm here I should check to make sure the recording thing is working I you says have you ever made a two minute long video no thank you Jason Jason writes the thinking out loud is a valuable lesson I appreciate that all right let's just I can eat humor me for like another little bit we are let's see here I gotta turn this off the recording system seems to be working okay so I'm gonna take that as a good sign and then as I lose viewer after viewer after viewer and we get the chat back here I think I'm not gonna go down the road of looking at the math dot random okay alright hello welcome to another chapter one video for a nature of code on vectors so I am building to something I am getting somewhere to a place where I'm going to make this example for you that looks at something called acceleration and in fact has this walker or mover or particle whatever you want to call it object accelerating towards the mouse but there are some key concepts that this video will required that I want to talk about first so one of well no not one of which there are some key concepts however that I want to talk about that doing this example requires so if I go back to where I just left off you know looking at how to pick a random vector using p5 dot vector random to D so this picks a random vector always of length 1 but any random direction and then I'm scaling it randomly we get this nice pattern but this here p5 dot vector random 2d might look a little strange to you and this is an example of a static function random 2d is a static function it's called on p5 dot vector rather than like this function multiply which is called on V the object itself let's look at this a bit more closely this is the conventional way that I have looked at objectoriented programming in most of my videos I make an object often I'm saying new something but p5 has this create vector function that makes the object for us minor a bit a subtle distant remember how I said I was going to redo this I wouldn't have any problems i got problems this is the conventional way that I have looked at and described objectoriented programming in most of my videos I have a variable V that I make an object now this this is a little bit strange no more starting over no more no more no no you are bad video tutorial person maker thingy and some days just aren't aren't my days the last time I did this it was went pretty well I thought this is the conventional way this is this is a conventional way that I have looked at objectoriented programming in most of my videos I make an object let V equals create vector now truthfully you'll more likely see something equals new something but in this case instead of saying new p5 dot vector do I really want to talk about this we need to I hate that I have this create vector thing which is just really throwing me off in this explanation cannot seem to manage to get gotta get that book of random numbers this this is the conventional way that I have looked at objectoriented programming in most of my videos I have this object V it's a p5 vector and then I'm calling a method on that object a function on that object this is what you would be referred to as an instance function or instance method the one thing that's a little bit unique here is that instead of saying new p5 dot vector I'm saying create vector and that's just something specific to p5 itself which has in it a create vector function to make the vector object but sure in most cases like this one right here I'll be making a new Walker object and then I'm calling instance methods Walker dot update Walker dot show those execute the code to run the functionality of this particular Walker object so the term I'm using is instance method or function a static method a static function is one that is not called specifically on an individual object itself but rather on the class as a whole so notice how I'm calling a function random 2d just like I'm calling a function add but instead of on a specific instance of a p5 vector object I'm calling it on the name of the class itself p5 dot vector that's because this bit of functionality isn't associated with a particular object I want to add something to this specific vector here but here I don't there's no actual specific vector I'm talking about I just want to make a new random vector so this this begs the question why is it done this way the story here is that this is really a decision that the creators are maintained errs of the p5 library have chosen there's no reason why there couldn't be just like there is a global create vector function that makes a empty vector or vector with zero zero in it there could be a create random 2d vector so this could be I could be sitting here in an alternate parallel universe saying this is the function to make a random 2d vector in p5 but in JavaScript it's quite common to collect a bunch of functions under a namespace but in JavaScript or you know in other programming languages as well it's quite common to want to collect a whole set of functions under a particular namespace for example maybe you've seen oh let me look here yes for example in JavaScript there is the math object oh it's an object yeah why JavaScript why why do you torture me I'm just gonna go to math dot random for example if you weren't using p5 and you wanted a random number in JavaScript you would call math dot random and in fact under the math class is it's a builtin object it says it's a builtin object it's so confusing for example if I was working in job I didn't watch the Bon Appetit YouTube channel so I haven't talked about to you about watching some they're like kind of amazing and I feel like we need to just adopt there I don't know editing style so anyway I'll come back to that not T I don't know if you're much skipped over this little rig like digression here when you're reviewing this but no all right an object is one way to implement namespaces I know I know I know object class it's also confusing all right so I'm gonna gloss over this and the gloss over is for example in JavaScript if I didn't have p5.js and I wanted a random number I would say math dot random and in fact there's a whole clips wrong way this way forward for example in JavaScript if it is a class says bimple for example in JavaScript if I wanted a random number and I didn't have p5.js I would call math dot random and there are a whole collection of static functions name spaced under the math thing object class oh the terms are so confusing math max math dot min math dot pal math dot random etc so p5.js is actually a bit of an anomaly in that there are all these global functions normally you wouldn't see that in a socalled proper JavaScript library I don't want this is my problem with explaining the static thing I can't help myself but go down all these like digressions and blah blah blah and it just really doesn't matter it's not yeah so yeah I'm gonna see Groundhog Day boy am I in a episode of Groundhog Day alright okay yeah yeah it's not a class I can't say class countryrock take me home for example in JavaScript if I wanted to pick a random number and I didn't have P 5 yes I would say math dot random and there are a whole collection of functions mathematical functions under the umbrella of math there namespaced under math are all static functions so in p5.js there are a lot of global functions which is a whole kind of other discussion why are there global functions at p5.js but I don't want to get into that right now but all of the vector functions are not part of the global p5 reference their own namespace under p5 vector so there are some times where I want to call a function that's operating on a vector and some other operations that I just want to call that relate to vectors that are called under the vector class itself some are static p5 dot vector dot the function name and some are instance v the instance of an object dot the function name yes I got through that now before I go on may be able to use this weird rag I'm not finished yet before I go on I want to look at a practical example of why I might want to use a static version of the instance but I'm not done yet one of the weirder things about working with p5 vector is there are both right this is an instance function and a static function random 2d but there also is a static function add so some of the functions have both instance and static versions of the same function so I want to look at a practical example of why I might want to use one versus the other it's a racer barely works exercise exercise to do this let's look at something very very to do this let's look at but to do this let's return to the world of scalar numbers just single values themselves let's say I have the variable X and it has the number 5 and I'll then I also have the number and we'll call it X speed just to go back to when we were doing this these kinds of motion algorithms without vectors X speed equals to it's so so normal that I might want to say x equals x plus X speed normal normal is the weird weird thing to say this is a case where we would write code all the time like this x equals x plus x feed we did this without a second thought I'm taking to adding it to five and putting that value back in X so if this were to draw loop X is five that it's seven then it's nine then it's 11 etc we've now seen that the equivalent is if I have a position vector and I have a velocity vector I would say position dot add velocity this is the equivalent of this taking velocity adding it into position this is the equivalent of this taking velocity adding it into position and saving it into itself this is the equivalent of this but with vectors X changes by X speed position changes by velocity however what if instead of doing it this way I wanted to say let new x equals x plus X speed what if what I wanted to do was take the result of this operation and store it in another variable so X hasn't changed after I run this line of code X is still 5 I have the number 7 in this particular variable new X now in the case of a lot of now in most examples I don't want to do that I want X to change and keep saving the new value into itself incremental e but there are hard a lot of times where I want to do an operation not mess with those two variables and store it in a new result how do I do that with vectors so your instinct might be okay maybe I'm going to have a new pause and I would set that equal to pause and velocity I mean this this makes up a lot it's not correct it makes sort of logical sense but by its nature an instance method that receives another vector changes the object it's acting upon this is where the static version of ad comes in if you want to add two vectors together but not mess with those vectors you can use the static version of the ad function it's a bit wordy and the code looks a little awkward but it works let new paws equal p5 dot vector dot ad got ad position comma philosophy did that fit poet fit there you go so if I want to add two vectors together and get the result in a new vector I just need to call the static version of ad which is namespaced stored under the p5 vector class itself so while this is very common in our physics algorithms position changes by velocity in a moment we'll see velocity changes by acceleration there are certain times where I want to do an operation like this and there are more examples of that than just ad as well I know right wouldn't it be nice if we could overload somebody told me there's a way to overload silence okay let's take a little DUT now let me try to like finish this off and then let's take a little digression operate operator overloading I'm I'm doing the terrible thing here which is I'm like looking at my messages okay which I shouldn't be doing well okay and this is in fact is exactly what's demonstrated on the p5 reference you can see here V equals create vector V dot ad it actually changes its V's components themselves versus having V 1 and V 2 and then saying p5 dot vector add V 1 and V 2 and putting that in a new vector V 3 so hopefully now this video gives you a bit of a sense of what the difference between a static method is and an instance method and by the way I'm just for better or worse kind of using the word method and function interchangeably technically speaking a method is a function that's part of a class in an object and a function as well a function that exists maybe on its own but I'm a little bit looseygoosey with it stuff and so but so I'm using them interchangeably but hope the point of this video was to give you a sense of what static functions are and instance functions static methods or instance methods and now as we move forward and start to work with more vector operations in future videos and examples you'll have a sense of why I might be picking one versus the other in different cases and this is going to come up in exactly the next example I'm gonna demonstrate that's working with an acceleration vector alright so maybe you've decided forget about this this is where I draw the line this static method stuff drew drove me crazy I'm out and out but if you're not if you want to keep going nature of good I'll see you in the next video bye okay so give me a second here somebody told me is all right so it's there I was told that there's a way to use value of so I have to look into this that maybe if I use value of that I can overload the operators so but how would I do that can I turn the vector into a single number that I could then add and then like turn it back no don't go into operation of overload I have a meeting in two hours right over I guess I don't want to look at this right now but yeah I guess you can do so you can do object overloading in Java Script with this value of function but he needs to be a single value so there's no way could I do some kind of crazy bit op like operation fitbit operation to like trick it into having like two values I don't think so so I don't think that's gonna work but that was interesting interesting suggestion all right everybody I am going to take a break and I am going to go get my random number book and when I come back with my random number book I will read some random numbers and all will be well in the universe but before I do that let me tell you about today's sponsor of brilliant org I have talked about billion org on a number of occasions it's a website myself quite enjoy it because I'm a person who likes interactive puzzles and learning new things and math and science and logic and computers stuff and there's much more there I'm brilliant at or even just those topics but it's a it's an interactive lifelong learning website you can sign up for free just go to brilliant org slash coding train and there's lots of stuff you can do for free I just enjoy for free there are certain course different things that get unlocked if you want a premium account a core whole course on computer science fundamentals that you can see here that I am showing you and so there what I really like about these courses that has like all this like draganddrop functionality and pseudocode so you can really like think about how programs work and how they're structured you don't actually have to just write the code yourselves you could do a lot of this just through pseudocode and interactivity without getting bogged down in the syntax but what is kind of amazing and I think is this video that I'm playing to you is gonna switch to it in a second what I didn't know is that brilliant is actually builtin I don't use a lot of Python I'm like a you know what Java Script a weirdo but look at this brilliant is actually built Python into the browser so you can write and execute the algorithms you've learned using Python syntax so if you want something and that I that complements your learning you know maybe watching a lunatic on the internet like me talk about programming and like saying the same things over and over and over again is what you enjoy great but another way of learning is through reading and interactivity and a website like brilliant org so one of the things that I love about brilliant really my favorite part of the website is and if I go to it these daily challenges oh we're dime not logged into my logged into a different account then I thought that I was that's fine I have a premium account but maybe I'm not logged into that right now and so let's do this I like card things let's do this one and let's see if we can sort this out I'm gonna take this banner off so we can see it sometimes it's intuitive to reason logically when we are thinking about realworld situations we have common sense and experience to help us out consider police searching or spy they know the following if a person is a spy they'll have a recording device at the event which people should the police search in order to find the spy well the people with the courting device but that doesn't automatically mean oh so there's like a trick here let's keep behind so you can read this explanation look at it but let's look at the challenge the cards below have colored hearts numbers or letters printed on them on either side how many cards need to be turned over to test whether the following assertion is true I think I know the answer to this I looked at it earlier it didn't actually click on it but I did look at it earlier cuz I I like this one so I'm gonna let you think about it for a second I'm gonna see what the chat is saying and let's see if a card has a blue heart on one side then it has a number on the other side is that true or false so obviously if I could just check all four of them I would know because if it were true this would have a number on it and this would have a blue heart on it let me see if I can zoom in here this one would have a number on the other side that one we have a blue heart that would not have a blue heart and that would not have a blue heart so if I wanna can I check to see if it's false right how many cars gonna be turn over to test whether fall falling is true is there one of these I don't need to check right so for example I thought this the one with the two doesn't matter because this is only saying this is the trick right it's only saying if the if it has a blue heart on one side has a number on the other side that doesn't mean that you could have a number on the other side even if it doesn't have a blue heart on the other side so the two is irrelevant but if either of those well if the blue heart and the blue heart doesn't even matter oh no no it does so I have to check the blue heart one to see if it has a number on the other side and then the other two I have to check to make sure they don't have a blue heart because they have the blue heart on the other side they don't have a number on this side then that can't be true so the answer should be three once again have my oneday streak nice I'd have to look into which why I'm like logged in to the wrong account here did you get that right but I also have to check this one I kind of want to be able to click these so this would be a fun little if I had some time I would make like a p5.js version of this which you could do and when you click on them and it flips them over umm this reminds me of the Monty Hall problem the what spot the bazaar prize behind the door and do you want to switch doors dad I should really talk about in a video I love that problem it's a sort of classic problem with Bayesian probability I would be shocked if there's nothing Bayesian on this website there we go I can definitely find some Bayesian stuff here so you can learn about that so again I encourage you to check out brilliant out org slash coding training you can sign up there for free let's people lets them know that you found it through the coding train which is a nice friendly thing to do one way to support the coding train support support whatever you want to do is aokay with me that's one option and then of course if you really love premium if you love plate and want the premium subscription to unlock all the courses if you go through that link to get a 20% discount the first 200 people will get a 20% discount okay I'm gonna take a break when I come back I am going to do one more example I am going to build that example that involves accelerating this this one here I'm gonna look at how to how to have an object a mover object accelerate towards the mouse and I'm going to play with that in a variety of different ways and talk about the math behind this and that will wrap up chapter 1 on vectors okay so I will see you in about five minutes we go find the red number book get some more water and kind of reset my brain and we're back and it is time for the ceremonial reading of the random reverse ah oh boy I lost like a hundred people come back I have the random number book everybody return to the live stream by the way the this page which is page 318 and you know what I think would be good this would be a good time this would be a good use of the overhead camera keep me honest here well now I want to flip it I'm gonna have to sneeze again this is where everything went wrong in the first place quick acting now I know I had this flipped no whoo that was a real sneeze and I'm thinking maybe I'm allergic to the random numbers that couldn't be no oh that would be such a disaster this page page 318 to 319 I always open to sixty four thousand five hundred and fifty eight two thousand seven hundred eighty one ninety eight thousand 1821 eightythree thousand six hundred ninety seven thirty six thousand no no no thirty four thousand six five thousand eight hundred fifty nine thousand nine hundred fortyfour in two thousand nine hundred and twenty five you know we've got no new members today because whenever I get a new member you know I need a button hold on I need hold on a second we're gonna do something exciting here do I not have it let me just create not a scene a source over overhead and now that's the scene no the scene is green and the source is over and now I think if I hit close we will I can press this button there we go I have a button now which does it I love my stream deck hit me up Elgato actually already sorry the response okay um we've I need another 30 seconds of this break let's just take a quick minute I just want to look because we're getting close we're getting close to where I really need my copy of a million random digits with 100,000 normal deviates I want original prints how do I find like on eBay maybe let's go to like oh this is very Bashan not bad I'm not logged in or anything am I so let's see a million random digits with 100,000 normal deviates here this is this is what I'm looking for 1955 but see this is a problem for me at least a few dozen missing pages several pages I don't mind the pencil marks tape on the spine I don't mean that 1955 is good but missing pages missing pages is an issue for me I feel like I need money is no object here I will spend all of my coding train riches on an original print of this book I mean I guess within reason I really wants me to login thanks for like just popping up stuff that I don't want you to pop up you know is there another one not even know this is this is as close as I'm gonna get so the missing pages are chosen at random Thank You Yaya good to know our money is spent responsibly yes you could give you joy now your money remember trip money will go to my finding an original for there's gotta be one right all right Internet help me out help me out find me somebody selling one without missing pages I will buy it I will purchase it and I must be authenticated somehow all right we will now move on to this is done this is this one and this is now this one did I cover this did I make this change in that video do you mind humoring let me just check something okay hold on what I'm doing right now that you can't see is I'm logging into my dashboard for the coding train and I am pulling up the current edit I'm going to I am pulling up the current edit of NOC vector3 so this was the so there's vector two of you on YouTube and so what I'm looking for and you can see my screen again so these are the unlisted edited versions of the videos that will eventually soon come out with me reading saved clothes you don't wear the same shirt I don't think I have the same undershirt on like this is the current undershirt that I'm wearing I don't know what it is if anyone can deduce what it is in those videos I will show you the part about my hair that's bothering me but this was number two where I go through this stuff and then where do I end okay so I left this off with negative one comma one there and then this one this is where I'm talking about the whole random stuff function like random 2d would you after that okay sorry I don't think oh I do so I did this in this video okay okay got it got it okay so I know where I last left off and I did leave off with it here but I've already duplicated this so I can move on and I think I'll change this to mover and mover mover mover and movers not to find because I'm just a mover here okay there we go okay all right so in this video do I want to do a separate video that just talks about normalize and set mag I think that I do I mean I could talk about it in the context of this example I think it might be nice to have it as its own standalone thing so I could point people to it and they want to know what normalizes oh I am so close to getting to making this example where an object accelerates towards the mouth and where I last left off I had this Walker object which I have now renamed to a mover object and every time I run this sketch it picks a random velocity and moves according to that velocity in the in the canvas so all I need to do to add to this is an acceleration but there's a bit more vector math that I would like to talk about that is also required for this let me erase this whiteboard and random vectors oh I know what I'm gonna do oh oh oh never mind never mind got it got it got it got it got it everybody whoo got it got it got it oh I'm excited all right I know what I'm gonna do I thought you thought did we think I am so close so close to getting to this example where I am going to have a mover object or walker or particle whatever I'm calling it just like maybe like turn one of these lights off better worse thing you have to turn the lights on I'm recording this right yes I know maybe I've like ruined the way that I do this so it takes me so long now hi this is another video in the nature of code series chapter one on vectors and I really thought that I was going to get to this example but I want to do one more video looking at what it means to normalize a vector so this is going to be fundamental to how I create this example where this particular mover object is accelerating towards the mouse wherever I move the mouse there it goes it's going to sort of follow the mouse and I can sort play with a bunch of parameters in this system I'm getting there so let me return back to this example where I picked a random vector every cycle through draw and then then moat then scaled it by a random amount and I'm drawing it onto the canvas there's not a really a good reason why I keep doing this over and over again I just sometimes I just have a like uhoh people returned you've come back hi all right all right no more monkeying around here no more fooling around I got you serious serious serious time hello welcome to another video in nature of code chapter 1 vectors series I really thought that in this video I was gonna start making this example I almost have arrived there where this mover object is accelerating towards the mouse but there's a particular math function that I'm going to need for this example that I want to cover in a separate video and that's the normalized function I want to look at how I deal with and calculate the magnitude of a vector how I normalize a vector what does that even mean and the way that I'm going to do this is look at creating a vector between the mouse and the center of the canvas itself so let me talk about what it look Oh goodbye whiteboard no signal come back come back there you go so let's look at this scenario that that I'm working with here I have a p5 canvas I'm going to have an object at some location let's just assume right now that it's at the center of the window the canvas and then the mouse is going to be somewhere that's the weirdestlooking mouse arrow ever Oh much better much better much better and the mouse is going to be somewhere what if what I want is a vector that represents the difference between the center and the mouse I want a vector that points from this location to this location how would I get that vector let's think about it for a moment without vectors say this is the location 400 comma 10th and this here's the location 200 comma 200 not exactly to scale and let's say this is the location 300 comma 200 what I'm looking for are what are the x and y components of this vector x and y well I could say that this is 100 right because it's 400 minus 300 400 minus 300 that's the x value and then the Y value is 200 minus 10 so that Y length 200 minus 10 is 190 so this vector has the components wait what I did not draw this anywhere remotely close to scale yes because if this were actually 600 why let me start this over I'm gonna finish this I'm getting through this the scenario I want to look at is as follows I have a canvas and I have some mover on the canvas a particle somewhere let's just position it in the center let's say this is 600 by 400 it's not exactly drawn to scale but close enough so this is 300 comma 200 then I have the mouse I'm moving my mouse around somewhere and let's say I have the mouse over here try to draw a mouse arrows and we'll call this location 580 comma 20 what I'm looking to do is figure out how do I calculate if I know this position in this possession a vector that points from one to the other if I want this particular particle to accelerate towards the mouse how do I calculate this particular vector call it V well when I say calculate the vector what I'm really looking for is the X component and the y component so V dot X equals what 580 minus 300 so 580 minus 300 that's 280 V dot y equals 200 minus 20 this length is 180 so this vector is 280 comma 180 what mathematical operation did I just do here I have two vectors really I have this vector which I'll call position and I have this vector which I'll call Mouse what I did is I said Mouse position gives me V V equals wait I'm doing the next video all of a sudden this is so weird what's wrong with me I just wanted to talk about normalize it I guess this is this gonna be what its gonna be v equals Mouse position let's confirm that this is the case I'm going to take this vector Mouse which looks like this remember when I add vectors I put them end to end so this vector mouse + position would be this right this would be mouse + position but I want to say Mouse position so ought to do is reverse this vector and then this if this is sorry position and this vector is Mouse this vector is V now oh whoa whoa whoa whoa whoa no no no not right not right not right let's confirm through a vector diagram that this really works I want to take the vector Mouse oh no no I was doing it right I was doing it right Mouse position I was right I'm just looking at the chat all right I guess I have to do this again now let's confirm that this let's confirm through a diagram that the subtract operation is really what I want here so if I take this vector mouse and draw it down here and I'm gonna this approximate right if I were to take mouse plus position I would put them end to end position like this so this is position oh and I'm going off the I went out of your point of view but I really can get this thank you let's confirm that subtract is really the operation I'm looking for here by looking at the dot by diagramming this let's confirm that this really works the subtract operation by diagramming this so if I take this mouse vector that's pointing from zero to this location 580 comma 200 and I kind of draw that down here it's exactly exactly right but I just sort of duplicate this here if I were to add if I were to say plus position I put these vectors end to end so I would take this vector and put it like over here I'm about to go out of your range of view so I'll just draw it a little bit shorter but this is the idea Mouse plus position would give me this vector mouse plus position but I want to say mouse position so that's taking this position vector and put pointing it in the opposite direction this is position so Mouse position is this vector V right here and you can see that matches up with that so this is how it works so if I want a vector that points from one position to another position in 2d space from point A to point B I just say B a well and this camera has now gone off let's put that into this example here right hold on so this example is drawing random vectors that emanate from the center let's try that that that math operation so I'm going to get actually get rid of all fifths and I'm going to say position equals create vector the Center 200 200 Mouse equals create vector mouse X Mouse y and then V is and to do this subtraction to do this subtraction mouth position and stored in a new vector I need a static function that's what the previous video is about so I could say p5 vector dot subtract Mouse position and actually let me put the translate back because I want to draw everything relative to the center and we should see now oh look at that I still have the funny background thing which I'll keep so no matter where I move the mouse I now have a vector that points from the center to where the mouse is now ultimately this looks like this visualization could be accomplished very simply line 200 200 Club of Mouse X Mouse Y but what I'm driving at here is what I'm working with vectors allows me to do a variety of operations that I wouldn't be able to do now certainly this visualization could have been created just by calling the line function and saying line 0 200 200 mouse X bounce Y but the reason why I'm doing it this way through vector subtraction is to show you about the normalized function and what kind of power that unlocks so let's say I have a variety of vectors all with arbitrary magnitudes and directions these are my vectors that I'm drawing up here five of them the process of normalization means take any given vector and maintain its direction the process of normalization means take any given vector maintain its direction and make a unit vector of length one pointing in that same direction so if I had a vector that was sure than one so if I had a vector of length shorter than one I would increase that length to one if I had a vector of length greater than one I would decrease it down to one shrink it down to one I should have made a really tiny one and like these vectors on the drew oh wait the camera went off what's going on ah why are these cameras overheating it's not the coating train if the cameras don't turn off it's not the coating train if there's one thing in life I know to be true it's that the cameras on the coating train always turn no it's kind of amazing all right I think that it's time to break out the Voronoi fan it's not a Voronoi [ __ ] it's a Vornado I'm going to turn this fan on point it at this camera the only thing I know when the cameras go I didn't bother to see clearly okay everybody where was I no idea where I was I know that I want to draw a bunch of vectors Oh continuity it's a thing let's say that I have a collection of vectors let me draw five of them all random directions all varying lengths those are my five vectors the process of normalization which is executed with the normalized function in p5.js is to take any vector of any length in any direction and make it into a unit vector a unit vector is one where the magnitude the length is one so let's just establish that this is approximately length one in terms of this arbitrary two dimensional space I'm working with so this vector normalized would be this vector this vector normalized would be this vector this vector always less than one so normalizing it would actually be to grow it would be this vector this vector would be this vector and this vector would be this vector now of course I haven't drawn these exactly right but this is the idea all of these are normalized versions of these and the reason why the term normalized is use is create some standardization normal normalization no no no it doesn't make any sense and you could think of the term normalized as making all these vectors into a normal vector normal being a well a normal vector is length 1 otherwise it's some wacky crazy and saying vector with a much longer length it's some it's basically having a standard by the way in vector notation a vector is typically written like vector V with an arrow on top the unit vector is often written as vector V with the hat or carrot on top so this would be a unit vector V or any given vector V so if I come back to this example here one of the things we could look at is I could say V dot normalize what does that do well it makes the vector length one so I could just keep zooming in to this I'm drawing something of pixel length 100 nothing left do I want to go back to here alright actually let me return back over here so how does the math for normalized work luckily for us we could just call normalize in p5 but this is a moment for us to take a little time to look at the math for that well before we can look at the math or normalize we actually should look for the math at another function called mag and mag is a function that returns the magnitude of a vector so it returns the scalar length of any given vector that magnitude itself so one thing that I could do here that could be interesting is let's draw the background again in draw and oh let's sorry so one thing that I could do here that could demonstrate this is let me take the background and draw it in draw run this again oh and I guess I will make this much brighter all right so now I've just got this line pointing to the mouse and I'm going to ask for the magnitude so that the Mac that is now getting the magnitude of that and I actually let's just console.log it so you can see this console.log down here is giving me the magnitude of the vector itself as I move the mouse closer to the center and you can see it's always a positive number because it's the length of it no matter what direction it's pointing in I could try something interesting like I could say oh let's make the background color associated with the magnitude so now you can see like the closer the mouse gets to the center the brighter the bet the brighter the background is sort of an interesting interaction that you could play with and the reason why this magnitude value is so important is it plays a fundamental role in how a vector is normalized so let's say I take this vector and this is the magnitude M and this is the X component and the y component well another way I could draw this diagram is like this a right triangle with a B and C and if you've ever seen this kind of diagram in a geometry class or some other air and if you've ever seen this kind of diagram in a geometry context you might have seen it paired with something called the Pythagorean theorem the Pythagorean theorem states that a squared plus B squared equals C squared or C equals the square root of a squared plus B squared and in fact that is exactly how the magnitude is calculated so when magnitude the mag function is called on v2 on a vector V mag it takes the square root of the X component squared plus the Y component squared and that gives you that magnitude oops I'm looking for oh yeah well that's like you know there's some weird stuff going on with this mag squared thing I was going to show the p5 source code but yeah but look I guess I won't show that right now let's so I'll pull this up when I get to normalise let's see what normalize so now now that I understand how magnitude is calculated I'm ready to look at how normalization works and once again I'll use the fact that a 3 4 5 triangle is a nice let's use the 3 4 5 triangle as our starting point so let's say have a vector its components are 4 & 3 we know that the magnitude now equals the square root of 4 squared plus 3 squared which is 16 plus 9 which is 25 the square root of which is 5 so the magnitude is 5 you can see how this math for calculating the magnitude now works out if I wanted to normalize this vector that means I want to shrink this length which is 5 down to 1 so it turns out that all if I'm scaling the magnitude this if I'm scaling a vector by its length I can just so that's 5 divided by 5 is 1 I can also just take the components and scale them divide them by the magnitude itself as well so this actually becomes 3/5 and 4/5 well sorry so it turns out if I'm taking a vector and normalizing its length down to one or or up to one five divided by five is one I can actually just take the components the x and y components and divide by the magnitude so this length right here is actually threefifths and this length right here is actually four ffice and that's how you normalize a vector by dividing it by its magnitude Oh so the coding garden raid going on welcome coding garden what makes me so happy about this is that means that people were watching the coding garden not this nonsense so welcome I'm sure whatever was going on there was was really well organized and thought out and just full of like incredible educational material and fun as opposed to my complete nonsense all right so removing this background a little digression I can now actually normalize V by saying V dot divide div for divide a vector by its magnitude so if I do that oh wait a second well there is you can see no matter where I put the mouse I have this next vector of length one but maybe what I should do is then scale it up by something like 50 multiplying it and look at this so now look at this no matter where the mouse is I am done this process of take the vector that points all the way let me use the whiteboard so now I have this multistep process to make a vector that points at a given direction with a fixed length I have a vector it's of some arbitrary length let's say the magnitude is 100 I calculate that magnitude I divide it by that magnitude to normalize it now I have that same vector with the magnitude is 1 so of length 1 a unit vector and then I multiply it by some arbitrary amount like 50 and I get this vector so no matter what happens this it one would try that again I didn't understand what I was doing I think I do now so it's a multistep process I have some some vector that I've calculated call it V and the first thing I do is I call vMac which gives me the magnitude maybe it's 100 so the length is 100 then what I want to do is normalize the vector I want the vector to be that same vector but of length 1 so I can say V dot divided by that magnitude or 100 that takes this vector and shrinks it down to here then I want to scale it up by some amount like 50 and that will then scale it back up to a higher length of 50 so this is my multistep process with but this is with all of this math and in fact instead of calculating the magnitude and dividing by the magnitude I can just instead call it's such a common operation I could just instead call V dot normalize so V dot normalized is the act of taking any vector and shrinking it to length 1 I did a terrible job of drawing these in the same direction but hopefully you get the idea so now I can simplify this by commenting these out and just changing this to V dot normalize and we've got the same exact result but guess what VDOT normalised VDOT multiply times 50 is also such a common operation like I want this vector in this direction but I just want it to be this magnitude that in fact I can even take these and just call V dot set mag 50 so this function V dot set the magnitude of a vector is the process of normalizing it down to length 1 and then scaling it to a particular magnitude you know in this case arbitrarily 50 and the process of normalizing is calculating the magnitude and dividing by that magnitude and we should see this is the same result incidentally it's worth pointing out that I can actually go and confirm this by looking in the p5 source code itself so this is the source code for the p5 vector object itself and there's a normalized function which what does it do it calculates the magnitude and as long as the magnitude isn't 0 right because you can't divide by 0 then it multiplies by 1 divided by length which is the same as dividing by length so that is the normalized function I could even look at the set magnitude function and see that it's au normalize the vector and then multiply it by some quantity N and in fact you can see here that's something that I'm not doing is chaining so a lot of these math operations on vectors can be chained meaning I can say normalize multiply dot normalized dot multiply whoops so and by that I mean these two operations vo Malloy's V multiplied could be written as V dot normalize dot multiplied 50 so once again we now see there are so many different ways to do the same exact thing but hopefully this is giving you a better picture of what vector math operations do how they work and how you might choose between static functions versus instance functions and how you might manipulate vectors by using these mathematical operations and so I think we're finally ready to move on to the penultimate no it's not the penultimate it feels a bit so I think this truly is the penultimate video in the chapter on vectors because we're now ready to take this idea of calculating a vector that points to the mouse and apply it as an acceleration to an object and see what happens okay so that's coming in the next video see you there oh my god it's almost 1 o'clock I gotta finish this off though ok all right tech tutorials asks who is coding garden ah if you don't know about the coding garden wonderful then you have you have a whole life ahead of you of discovering something totally awesome Cody Gard is another YouTube channel run by CJ CJ and I are actually planning a collaboration we're about discord bots I think coming up maybe you maybe Wednesday February 26 we'll see he has to be confirmed and it's got great CJ has a lot of really nice complimentary videos that deal with much more like full stack web development so and thank you K week bond for posting a link to it okay Oh alright alright folks home stretch home stretch home stretch it's a lot of work to make these video tutorials but some point I felt like this was just like a hobby or an easy like thing and it's become like much more of a source of I don't want to say stress but like it's this it's work its work in a good way in a good way that's a good thing to also just try to balance everything I don't know thank you all for being very supportive and kind and a lot of people support this channel in so many different kinds of ways and I really appreciate it okay alright Wow there was a lot of people watching coding garden because viewership is up hello I think I think we need a moment there's a really interesting conversation going on in the chat about divide by zero afraid to play that eightyfour thousand two hundred thirteen eighty three thousand and four two hundred and fifty seventythree thousand and eight hundred 28900 77 2934 seventy seven thousand eight hundred sixty two forty nine thousand four hundred eighty nine seventy three thousand five hundred ninety three thirtynine thousand nine hundred and thirtythree it's so nice to be just free to be as weird as you want okay careful what you wish for John gelatos because coming up if I could just get a copy a copy of that original print of random digits then I think I'm gonna definitely need to do like a very long long long video of reading random numbers okay oh it's Ken hailey watching and Ren redhead and dev just names I recognize thank you for tuning in very birth okay this is it we're moving on let me just check my phone here no emergency messages could really use some more water but I think I can make it through all right we have arrived we have reached the end we who's we I don't know who he is it's me I'm just me here nobody else just me we we're all together but you're just like people on the internet that I can't see it's weird to say we I'm very obsessed with what pronouns are the right pronouns to use and I don't mean I mean first of all using people's preferred pronouns it's a very important meaningful thing and that's not what I'm talking about here what I'm talking about is whether I should say we is a weird thing when you're doing a tutorial the main camera is autofocusing yeah I know hopefully that's not so distracting and horrible but I now have decided that autofocus is a better solution for than the manual focus because it's better overall but is that like causing like such a major problem I don't think it's doing it that often just when I move around a lot but that is sort of an interesting gift okay hi MIT student Matthias you should definitely be working I hope you don't have class today there's no NYU class today oh boy everybody left all right we have now reached what I think cuz you know I could change my mind maybe different moment is the final forces and all that acceleration stuff okay I think what I need to do is now take my Voronoi fan and point it over here I'm just think if I can get the MIT student to start studying again come on MIT student go and study don't this is Tara this is this melting your brain kids don't watch the tube it's here okay here we are I think this really is the last video in chapter 1 on vectors I'm going to add one more detail to this example of the random Walker which is no longer called a walker I'm now calling it a mover and if where I last left off with this example is every time I click the mouse the mover picks a new random velocity that can be seen here in the constructor P v dot vector dot random 2d now you know that's a static function because I made a whole video about that and then that velocity every frame is added to the position and the mover is drawn as an ellipse at that position so I want to add one more concept to this video and that is the concept of acceleration acceleration oops sorry acceleration is the coop acceleration will act as the building block for all of the examples I'm going to show you in Chapter two because of Newton's second law force equals mass times acceleration so acceleration plays a key role in any kind of physics engine or physics simulation but right now we're not going to worry about the sort of physics aspect of this and just add the idea of acceleration so if position changes according to a velocity vector the velocity changes according to acceleration how do I draw this our mover object currently has a position and a velocity and we've established that the position is a vector to describes relative to the origin where that that where that object is in twodimensional space then the velocity vector is a vector that describes where it should be I'm add one thing that really throws me off is I'm mirrored over here when I look at this and then over here I have like these different monitors that are showing me what I'm recording and they it's throwing me off right now the velocity describes the velocity is just the velocity describes how the position changes over time so on a framebyframe animation a the position is here then the velocity is added to the position and its new position is here and if it's velocity to remains constant it would keep just moving like this as velocity where we applied applied apply however acceleration is can be described as the rib however acceleration can be described as the change in velocity over time so if this object this mover were to accelerate maybe you in the sort of typical way you might think about that acceleration is it's getting faster so we could imagine it that way right first its velocity is this then its like this then it's like this so it's accelerating and moving large or larger steps each frame but acceleration just means the change in velocity and remember velocity is a vector so that could mean it's changing its direction or its magnitude could be slowing down that's an acceleration speeding up turning all of those combined together that's an acceleration is just another vector and it goes into our what I'm calling the motion 101 Albert and that motion 101 algorithm is has and that motion 101 algorithm can be found in the update function I'm stepping and that motion 101 algorithm can be found right here in the update function add the velocity to the position this stopped position not add velocity and right before that this dot velocity add this acceleration so now there we go well why isn't it accelerating it's not accelerating it's not changing its magnitude or direction because the acceleration is zero so let's give it something let's give it a random vector whoo so now you can see that it's kind of speeding up now its acceleration here is constant so even though it gets an arbitrary velocity mmm now the acceleration here is constant and it's almost as if there's this like big fan right in the center that's just pointing in a direction and sort of blows the mover off in a direction you can see that it's turns ever so slightly this is most likely because whatever velocity it picks is not the same directions as acceleration to demonstrate what's happening here a bit more clearly I might do something like set the magnitude of the acceleration to something much smaller so I'm still picking a random unit vector in some direction but then setting the magnitude to point zero point zero point zero one and you can see now it's kind of turning around and I and I could also go back just putting the background and set up that might help us sort of see the path that it's taking and we got the here we got a kind of an acceleration in a different direction from the initial velocity I could also I could also reset the acceleration to something random every time an update let me take this and put it here take this off run it again and now you can see whoa it's just kind of this is almost like the random walk again now the acceleration is accumulative and it's picking it randomly so if it starts to pick it randomly in the same direction and with a high magnitude a few times oh no it's the magnitudes phone so this is something kind of resembling the original random walk but if you have to hit let's see what do I want to say here so this is something kind of resembling that original random walk but the acceleration is cumulative it's accumulating into the velocity so if it's picking it in the same direction randomly a few times in a row it's gonna build up enough sort of speed and sort of fly off in that direction I could by the way so I want to mention this now hmm kind of now there is another useful vector function that I haven't mentioned to you that's kind of similar to the normalize function that I could use here and it's the limit function what limit does what limit does because what limit does is take any vector and cap its magnitude at a certain amount so if I say limit v and this vector has a magnitude of 15 but we'll take that vector and shrink it down set its magnitude to 5 the difference between limit and say set magnitude are normalized is if it's less than 5 it's not going to raise it up to 5 it's going to leave it at say 2 okay am i back I'm not sure what just happened there when did that happen I think just when I came over here yeah I'm just gonna go back okay not sure where that was a limit so back in the code what I can say is uh any after I apply the acceleration let's make sure the velocity doesn't get too large and I can say limit I don't know I'll just gonna say limit it to two so it's a pretty strict limit there and then if I run the sketch what this this is now really looking much more like that random walk before but I am using the concepts of acceleration and velocity and so now this would allow me to do a lot more stuff with the random walk and that's going to come as I get to more stuff and more and more of these examples in Chapter two but ultimately what I want to show you here is what happens when I calculate a very specific acceleration like one that points towards the mouse location still I might say like you could pause the video here and try all sorts of other algorithms for calculating acceleration what if you used Perlin noise for the acceleration or what if you had the acceleration based on some vector that's based on some some other type of data that's coming into your system but for this particular example I can return to everything that I did in the previous video which is I have the position I have the mouse and now I just want to do that same exact math operation mouse position set the magnitude to something fixed and apply that as the acceleration let's see what happens Oh No Oh create a vector at the mouse location shoot me uh give myself some more space here oops it's the redo and start by creating a vector at the mouse location and I'm going to set the acceleration to the the result of subtracting the mouse this object's position then I'm going to set the magnitude of that to 0.1 and I'm picking that arbitrarily now I have a threestep process calculate the acceleration apply the acceleration to the velocity limit the velocity then apply the velocity to the position let's take out the limit just for right now maybe we don't need it the result is something like an elliptical orbit because the object is be accelerating towards the mouse amazingly we get this result that's something like an elliptical orbit you would think the object would just be going straight towards the mouse why is that so if this is the mouse right here and this is the object and it's going in this direction basically I'm taking this and applying it as the acceleration so if I take this acceleration vector and apply it to the velocity velocity plus acceleration equals the new velocity which is this and then add so that it's over here then this is the vector I add to it so we take this velocity at acceleration and now this is the new velocity see how I'm ending up in this path now depending on the relative strength of the acceleration then I might be sucked into like where I'm it would be these what I'm being attracted to much more quickly or I might spiral around it and we can experiment with that as a variable so for example what if I said instead of point one set magnitude to five well you can see now it's really going out of control so maybe this is where I want to limit the velocity and you can see now I've done that it can't move very fast but it's going to really that acceleration is super strong it's going to like move right to it and in fact it's actually going to stop at it because it's you know if you gets past it's gonna tell it to slow down and go back in the other direction and maybe I want to limit this and set this here you know there's so many different ways I don't know what I'm trying to do here but you can see I can get very different kinds of qualities of how this object follows the mouse based on this model by playing with what the velocities limit is and what the strength of the acceleration is as well now how I play with these parameters and how I set the acceleration and how I have multiple factors in an object world that could affect its acceleration what if it's attracted to the mouse but there's also a force from the edge keeping it within the room now how I play with these values how I calculate the acceleration how I think of this object in a world where multiple factors can affect its acceleration maybe it's attracted to the mouse but it also there's like a wind force kind of blowing it across the window there's so many other ways that I might experiment with this way everyone is discussing auto safety yeah now how I actually calculate the acceleration and how I think about this particular mover object in a world that a lot of different things could affect its acceleration that's really where I'm going and that's really the model of forces so there's really this idea of a force right there's this force that's pulling the object towards the mouse but what if there were other forces what if there's forces that are coming from the walls of the canvas so to speak the edges what if there was just like this wind force or gravity or other types of things friction force so this is where I'm going in Chapter two I am going to calculate a variety of different force vectors and put them all into the objects acceleration but right now I think you have something you could really play with as an exercise how could you now you have something you could really play with as an exercise can you create a world can you create a simulation with an object moving around the canvas that all of its motion emanates from its acceleration what are other ways you could calculate the acceleration to create some type of dynamic motion I'm [ __ ] and so this really wraps up this and so this really wraps up this section on vectors I'm sure I missed a zillion things I can't talk anymore I'm so done and so this wraps up this section on vectors I'm sure I missed so many things about vectors and there's many more math upper up math operations with vectors and other things to think about and consider and hopefully I'll continue to touch on those as I go on and on to more and more examples if you make something share it with me at the coding trade calm in the comments here if you have questions you can also ask them to join the discord to ask your questions there and I will be back in section two to talk about Newton's laws of motion and forces all right Thank You Danielle for your encouraging words all right I think that I'm done for today I'm gonna it's saved so nobody freaks out this is kind of fun and yeah let's talk about schedule for a second so ideally I would like to I really I'm only through chapter one right now oops not the coding train comm so so here's where we are I am through now chapter one I didn't really make the videos for the introduction but I have enough stuff that I've previously made which is basically that topic that I will I know I didn't do anything for Valentine's Day sorry Carson that that I think I've got the playlist set for introduction in vectors so I would like to buy I may be through all of this stuff it's gonna take me longer I think but so I'm gonna be here once a week I'm gonna try to do Thursday's sometimes in the morning sometimes in the afternoon I'm really gonna try to move to Thursdays as my live stream day so stay tuned for a date this Thursday this week I have to look at my calendar which I can look over here I can actually tell you whether it's gonna be morning and afternoon right now people want to know I'm gonna look at this other computer which has my calendar on it and I need to switch Google accounts today is the 17th Oh Oh morning Thursday morning so this third I'm putting this in my calendar well I'll do that later so and then the 27th will be in the afternoon so I am going to attempt now starting this week ah I'm like trying to switch screens here to livestreaming every Thursday I don't not a regular time every Thursday but basically either 930 or like 130 those would be the two times 930 or 130 Eastern with some wiggle room there once per week if I'm being honest here I am probably only gonna get three live streams per month is it is it even March yet no it's February so I'll have one next week I don't know how many I ended up getting in February is it a leap year somebody tell me so and then hopefully once I get to June June is busting out all over I will have a very free month in June and whatever I don't get to you know keep me honest about this remind me about this I'm saying it now to try to put this out there in the universe I'm gonna just do a lot of extra live streams in June to get through everything that I don't get through the tricky thing is here by going through this I'm leaving other things undone I haven't made a coding challenge video since I can remember I really want to make more of these coding in the Cabana videos get that hilbert curve one but I got to do another one how to spin the wheel for the next coating of the Cabana topic so many things I'm struggling to find the time for everything but I am doing my best so that's what I've got going right now feedback and comments and everything is always welcome it is indeed a leap year says K week mon whoa volume is so loud I will take a few questions before I go it is a leap year press Z and X that means I'm not this one say I'm advertising this which I'm not by the way let me mention this I haven't put out a call for this or anything although I may but I guess unofficially without like I haven't really thought this through yet exactly what I'm looking for if you are someone who is interested in doing like a freelance job and your skills are node and CSS which is a weird set of skills I am looking for your help because I am looking for help with the build engine of the nature of code book Joey Lee has been doing a lot of work and help on this with me and you'll you'll see his name pop up quite a bit in the repo and all the issues but basically I I want to keep the book updating going along with doing the videos and there's a lot of open issues and there's a lot of bugs with the PDF rendering generation of the book itself so if that's something you're interested in I don't know I don't know join the discord and maybe I can have a way of people getting in touch to express their interest in there but I'm actually even alcohol books boxes so I know there's a lot of people already in the community who volunteer and do a lot of work Kotick train stuff and I appreciate that I'm always conflicted about how to manage sort of goodwill and spirit of collaborative open source as well as valuing people's work and paying people for a work and I'm always struggling with that balance but I believe this to me is a job that I particularly just need specific help with so I think it makes sense to for this to be paid work also it the book is not something that I'm getting rich off of but I do when when I have the new edition out it will be sold so there is some income that's generated from it so I do I can try to fit that in Florida Florida is asking which is the discord so the discord huh yeah no so Kay let me cover the bill let me mention this latex thing so first of all the discord is pls somebody post it into the chat there is a I think I can open it up here let me open up the discord because I have a separate account that I created just want to turn it on to safe mode or whatever how do I do that again where I go to settings in streamer mode enable streamer mode okay I'll just look at these and go here and go to schedule all right so if you haven't seen the discord this is what the discord looks like there's a channel where I post updates about when I'm going to livestream so you know I know that I don't do a good job of having a regular schedule but if you want updates about that you can join the discord if you join the discord just to mention you will need to read the full all aboard code of conduct and reply with an emoji before you have posting permissions but there's various channels and it's a place where you can also get help on a variety of topics and that sort of stuff so if you're not in the discord but you're part of this community please join the discord and AH K week do you need latex help so um this was a discussion currently the PDF generation of the nature of codebook is done with something called prick prints XML and prints XML converts us exactly this converts HTML to PDF so I'm not opposed to a different engine to do this same exact task but I want I do not want to write the book in latex I'm writing the book in HTML this way I can I have a build process that can easily generate the website as well as the PDF book itself and it's one HTML document that generates both and so I if there is a way to have latex be part of this equation I'm not opposed to that but at the moment this is the best solution I think and also this is using I mentioned this constantly but the engine that is also doing this is is this gonna come up no magic book project I think yes it's using this this project called the magic book is kind of the node app that runs prints XML and does other sort of build stuff to build a website as well I know that a lot of new out of modern publishing web friendly HTML CSS friendly publishing frameworks and applications and websites have come out so maybe this is something I should revisit but at the moment this is what I am doing okay let's see if there's any other questions Philip asks what's the difference between the old and new book um quickly JavaScript instead of processing and then bug fixes little minor updates to make the examples a little more clear based on feedback and then hopefully a major rewrite of the neural network chapter and a new chapter on neural evolution those are the sort of key changes joy fav'rite i am new in programming what would be your best advice to get me to learn fast so first I might say don't worry about learning fast take your time learning fast it's like hard to learn fast programming is hard it's it's a you know I've been doing this for a lot of years and it takes a really long time so you can be frustrating it can make you feel unhappy by like having this expectation that you're gonna learn it fast that said finding a community that you can learn with I whether it's an online community or a real life in meetup community that to me I always think is really really helpful and I can recommend communities like you know communities in art spaces like in New York school for product computation is a wonderful place it's not like a learn to code place specifically but that's one that I would really recommend there places like the recurse Center in New York a lot of them have special kinds of scholarship programs that you can apply for but yes so that's that's what what we know in your local community is there a group that is meeting on a regular basis where people are learning together that's that I think is a really wonderful thing you can do plus I don't know I have some YouTube videos maybe they help you know I don't want to give that the print version will be out when it comes out my goal was at the end of 2018 how well am i doing on that call then it was the end of 2019 so I could say into 2020 we'll see Thank You Zack bear for your nice comment about how the videos inspire you I have been asked you like Python do you recommend it yes I like Python yes I recommend it hello to Bosnia interference on the mic was it happening a lot this whole time somebody didn't mention it I thought it wasn't a big deal because I didn't see it a lot do you ever try to VR headset I have tried to be our headset my eyesight is terrible and we got a viewer from India Aloha to India and Brazil people are now saying where they're from by the way my favorite thing about the discord is the pets Channel this is like the greatest thing ever and this by the way boggle no but I don't think boggle got adopted yet so I am currently now fostering my family's fostering these puppies that were rescued from Kentucky a stray stray was rescued also but the mother has already been adopted there four of them left they'll be at the contact muddy paws search for muddy paws on the internet if you're interested in your New York area and would like to adopt a puppy all right everybody I will see you Thursday Thursday I'll be back on Thursday Thursday see you Thursday I always forget this I'm gonna do this this dot this dot this dot this dot song never forget the Vista miss somebody I'm gonna say once again coordinates coordinates and autotune and the internet will fix that so this is random this is noise Perley noise that is in the core random algorithm the actual random algorithm itself those numbers aren't related at all you pick like I'm picking random numbers between zero and ten nine two seven six one nine four eight nine two one three I pick 9/11 family but with curly noise I might pick numbers like this two three four three four five six five four five six seven five six seven five six seven eight nine eight seven six this is like Perlin noise performance apart for eighty nine two one three five one two three four three four five six five he was like gurgling noise performance apart with curly noise I might pick numbers like this three four three four five by purling noise that is totally noise so this is Hurley noise that is Hurley no this is this is Hurley noise that it's Hurley no so this is Hurley noise that is her Perlin noise so this is Hurley but with pearly noise I might pick numbers like this this is like Perlin noise performance part unicorns and rainbows and cupcakes what else is there yes kids thank you very much kittens and rainbows and cupcakes notice that look what I get I really lose my mind I feel just sort of like a nice feeling of relaxation everything's gonna be okay today dream is not broken it has not frozen this isn't this is a wonderful thing okay we're gonna do it I'm really getting to something I need my sound I forgot all sorts of text generation analysis states that I will use continuously over and over again
