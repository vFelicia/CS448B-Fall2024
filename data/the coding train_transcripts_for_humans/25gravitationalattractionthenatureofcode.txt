With timestamps:

00:00 - [CHIME]
00:01 - It is time for Newton's law
of universal gravitation.
00:06 - So this is the final example
that I will be demonstrating
00:09 - as part of chapter 2,
although the concept of forces
00:12 - and how they are applied
permeate throughout the rest
00:15 - of the videos that
I intend to make.
00:17 - But I'm going to
wrap up this chapter
00:18 - by looking at the equation
for universal gravitation
00:22 - that looks exactly
like this and trying
00:24 - to see can I take this
equation and implement it
00:27 - in a P5JS sketch.
00:29 - Here's the same formula with a
diagram in the Nature of Code
00:32 - book itself.
00:33 - So the idea of this law is
that everybody, every particle,
00:37 - every thing in the universe
attracts every other thing
00:41 - with a force that's proportional
to the masses of those bodies
00:45 - and inversely proportional
to how far apart they are.
00:48 - So the farther apart they
are, the weaker the force.
00:51 - The closer they are,
the stronger the force.
00:53 - I did something in the first
example in the series very
00:57 - similar where I
took a mover object
00:59 - and created a vector that
pointed from that mover
01:01 - object to the mouse
itself and set that vector
01:05 - as the acceleration
of the object.
01:07 - So this was like attraction but
I wasn't thinking about math.
01:10 - And I wasn't thinking
about distance.
01:11 - Let me diagram what I
want to do in this video.
01:14 - So I'm going to simplify
things and have this concept
01:17 - of an attractor object.
01:19 - So the attractor object isn't
a real body in the universe.
01:22 - It's a fixed entity that
attracts things to it,
01:26 - but it cannot move.
01:27 - And it cannot experience
forces itself.
01:29 - Then I'm going to have the
mover object with some given
01:32 - velocity.
01:33 - And the mover object
is going to experience
01:36 - a force, a gravitational force,
that pulls it to the attractor.
01:41 - And that force,
which is a vector,
01:44 - is going to be equal to the mass
of one object times the mass
01:48 - of the other object divided
by the distance squared.
01:51 - And I put this in
the wrong order
01:52 - but also times G, which is
the universal gravitational
01:56 - constant.
02:00 - Now there's a very
real number that
02:03 - is this value in the
universe as we know it.
02:06 - But for us in our
pretend P5 canvas,
02:09 - if I draw like a
box around this,
02:11 - the G is just a way
for us to kind of tune
02:14 - the world to have stronger
gravitational attraction
02:18 - or weaker attraction forces.
02:19 - And in a way, I
could think of this G
02:22 - as a property of the
attractor itself.
02:24 - Maybe different attractors
have different constants,
02:27 - although, to some extent, that
is taken care of by the mass.
02:30 - So I need everything
that's in this formula--
02:34 - I need to figure out
where is it here.
02:36 - So the mass of one
object, well, it
02:38 - would be the mass of
this mover object.
02:40 - The mass of the
other object would
02:41 - be the mass of the attractor.
02:43 - So to some extent,
the mass in G,
02:45 - I could conflate these
into one constant.
02:47 - But I'll keep them
separate for now.
02:48 - Distance is the distance between
the centers of both objects.
02:54 - Remember when I'm calculating
a force, I need two things.
02:58 - I need direction and
I need magnitude.
03:01 - So this is really all
of these numbers are
03:03 - talking about the magnitude.
03:04 - How strong is that force?
03:06 - How long is this arrow
that I'm drawing here?
03:09 - The direction is
just a vector that
03:12 - points from the object being
attracted to the attractor.
03:16 - And so that I can
get-- if you remember
03:18 - I've done this a bunch of
times now-- with subtraction.
03:22 - So the sub function
for subtraction
03:24 - I can take the position of the
attractor minus the position
03:27 - of the mover and that gives me
a vector that points this way.
03:30 - Set its magnitude to the
result of this formula.
03:33 - And voila, I have
gravitational attraction.
03:36 - So coming back to
this example, I
03:38 - am going to now get rid of
this acceleration calculation.
03:43 - And when I run the sketch,
I should just see this mover
03:46 - not moving at all.
03:48 - And in the main JavaScript file
where I have set up a draw,
03:50 - I want to add an attractor.
03:55 - So I'll create an
attractor that also
03:57 - gets an xy position and a mass.
04:00 - I'll say
attractor.attract(mover)
04:05 - and attractor.show.
04:08 - Now I might have just
confused you for a second
04:10 - there because you might
be thinking, wait,
04:12 - did I miss something?
04:13 - Did you write an
attractor class?
04:15 - And is this just going
to work right now?
04:17 - Definitely not.
04:18 - Like when I run this,
it's going to be like,
04:19 - I have no idea what that is.
04:21 - So this is the way
that I work sometimes.
04:22 - And I was a little bit of flawed
in making this tutorial video
04:24 - because this is probably an
example that I've written many,
04:26 - many times.
04:27 - So I had it just sort of
right in my mind at the ready.
04:29 - But sometimes it can be
helpful to sort of sketch out
04:34 - how it is you imagine
writing the code
04:36 - to operate an object
before writing the class,
04:39 - because now I have the
instructions for what
04:41 - it is I need to write.
04:42 - I need to make a class
called attractor.
04:45 - The constructor takes
three arguments.
04:47 - It needs to have
a show function.
04:48 - And it also needs to have
an attract function that
04:50 - receives a mover object.
04:52 - So all of these things
are now at things
04:54 - that I can write into
the attractor class.
04:58 - I've already created another
JavaScript file, attractor.js,
05:01 - which is empty.
05:03 - So I'll put class
attractor in there,
05:05 - then write the constructor,
which if you remember
05:09 - required three arguments,
an x, y, and a mass.
05:12 - The x y I'll use for position.
05:14 - The m I'll use for mass.
05:16 - Let me write a show function
just to draw it as a circle.
05:22 - I'm now realizing I should
calculate a radius based
05:25 - on mass the same way that I
did in the previous examples
05:29 - with the mover.
05:30 - So I'm just going to grab this
code, which takes the mass,
05:33 - takes the square root,
and multiplies by 10.
05:35 - I'll use the same convention.
05:38 - So let's leave out the
attract function for a moment.
05:42 - Comment that out.
05:43 - Move the mover to like a
little higher up in the canvas.
05:47 - Run it.
05:48 - And what do I have now?
05:49 - Attractor is not defined.
05:51 - Ooh.
05:53 - I can never seem to remember
to add the script tag when
05:55 - I have a new JavaScript file.
06:00 - And here we go.
06:00 - All right.
06:01 - Now I have the
mover not yet moving
06:03 - because no force
has been activated
06:05 - and the attractor
just in the canvas.
06:08 - So the next step is for me to
write this attract function
06:12 - and implement the formula.
06:13 - Before I do so, little
let me address something.
06:15 - Why did I choose to say
attractor.attract(mover)?
06:22 - I could have called a function
on mover instead of attractor,
06:25 - or I could have written
a new function that
06:26 - takes the two arguments,
the mover and attractor,
06:28 - or I could just work
out the code in here.
06:30 - So I'm making a somewhat
arbitrary choice.
06:32 - But to me, it feels
conceptually consistent to have
06:36 - the attractor object itself
have the functionality
06:40 - to create a force that
attracts the mover object.
06:43 - But if you want to try
to redo it and reorganize
06:46 - your code in another
way, I would really
06:47 - encourage you to do that
and share it with me.
06:49 - Now I did make a
sort of small error
06:51 - here or inconsistency
whereas that I'm
06:53 - saying I'm calculating
a vector but all
06:56 - of the variables and aspects
of the formula that I'm
06:58 - working with here are just
calculating a scalar value,
07:00 - the magnitude of that vector.
07:02 - So let me be a little bit
more clear about this diagram.
07:09 - If I have these two bodies
each with a mass map,
07:11 - this one being the attractor
but that doesn't really
07:13 - matter so much, and I think
of this vector pointing
07:16 - from object one to
object two as a vector r,
07:20 - then the distance is
really the magnitude
07:23 - of that vector squared.
07:26 - And then the direction
is the unit vector r--
07:30 - which I don't really
have a lot of room here--
07:35 - which I could write as
r with the hat on it.
07:37 - So now this formula
is more accurate.
07:39 - And all I need to
do is calculate
07:41 - both-- in my code is
calculate both this unit
07:44 - vector and this equation,
put them together, and apply
07:48 - that force.
07:49 - And I'm going to do all of
this in a new function called
07:51 - attract.
07:52 - That's part of the attractor.
07:55 - So let me first
get this vector r.
07:57 - And I'll call it direction.
08:00 - It is this position minus
the mover's position.
08:04 - We need to say subtract.
08:06 - The distance is the
magnitude of that vector.
08:09 - And actually, I'm going
to want distance squared.
08:11 - So let's make this distance
squared is magnitude squared.
08:14 - Going to make up
just for right now
08:16 - a universal gravitational
constant of 1.
08:19 - So I could really
just ignore it,
08:21 - but let's keep the
variable in there
08:22 - and just set it equal to 1.
08:23 - And I'm going to use the
word strength to calculate
08:25 - the magnitude of that force,
which is this.mass times
08:33 - mover.mass--
08:34 - I'm making myself
more room here--
08:36 - divided by distance squared
and also G times that.
08:41 - So this right here is
exactly the same formula
08:45 - that I have right over here.
08:49 - And I just want to
take this vector r
08:51 - and set its magnitude
to the result of this.
08:54 - Just to be consistent,
I'm actually
08:56 - going to rename this
from direction to force.
08:58 - I'm going to use this
variable to be the force.
09:01 - And then I'll say force.set
magnitude to that strength.
09:05 - And then
mover.applyforce(force).
09:09 - And we can see I have
all the steps here.
09:12 - Get a vector that points from
the mover to the attractor.
09:15 - Calculate all of
the elements to get
09:17 - the magnitude of that vector.
09:18 - Put it in this
variable strength.
09:20 - And then set the magnitude
of that vector to strength
09:22 - and apply the force.
09:23 - I don't know.
09:24 - Let's run this.
09:24 - Is it going to work?
09:25 - I think so.
09:28 - I'm not seeing anything.
09:30 - OK.
09:30 - One thing would be to actually
call the function attract.
09:35 - Stength is not defined.
09:39 - All right.
09:39 - That must be a mistake
that you've all noticed.
09:41 - Strength with an R. Oh
wait, I is moving just ever
09:50 - so slightly and slowly.
09:55 - This is where having G
can really come in handy.
09:59 - Let's make G 5.
10:04 - And let's make G 50.
10:07 - So I can scale
the force relative
10:11 - to that universal
gravitational constant.
10:16 - But there's actually
something else
10:17 - going on here that I think
that I would like to fudge.
10:20 - Well, I really would love to
stay so true to this formula.
10:25 - You are a wonderful formula.
10:26 - And I want to stay
true to that formula.
10:29 - Give me a little bit
of wiggle room here,
10:30 - because this is this
made up P5 world.
10:33 - It's pixels.
10:35 - And there's a lot of
aspects to the feeling
10:38 - that I want to create and how
it's actually going to behave
10:40 - with this literal formula.
10:41 - And one of the-- a big element
here that's playing a role here
10:45 - is this distance squared.
10:47 - So you think about it,
the amount of pixels
10:49 - apart that these could be could
very easily be 200 pixels.
10:53 - And if they're 200
pixels apart, that's
10:56 - going to be dividing
by 40,000, which
10:59 - is going to make the
strength of the force
11:01 - very, very, very small.
11:02 - So I could increase
the mass of everything.
11:04 - I could increase
G. But ultimately,
11:07 - something that I might just
do is constrain the distance
11:11 - that I'm using in the
calculation to a limit.
11:14 - So I'm always going
to, even if it's
11:17 - farther than 50 pixels away
maybe, just cap that at 50.
11:20 - On the other hand, when
they're really, really close,
11:25 - they could actually be in
the same spot, in which case
11:28 - the distance would
be zero, which
11:29 - doesn't make any sense in actual
reality but could happen here,
11:34 - or even if their distance is
something like 0.001 pixels
11:37 - apart, if I were to square
this to have distance
11:40 - squared and then
divide by it, it
11:42 - would make that
strength so strong
11:44 - that things could kind
of spiral out of control.
11:46 - So this is something that
you could really play with it
11:47 - and try a lot of
different scenarios.
11:49 - But for me right
now, I'm going to say
11:51 - that whatever that
distance is, I
11:53 - want to constrain
its range when I go
11:56 - and calculate the
force's magnitude.
11:58 - To do that, I'm just going to
use the P5 constrain function.
12:02 - And now I am getting
the magnitude squared,
12:05 - which I don't love.
12:06 - So I'm going to constrain it
between 25, which is 5 squared,
12:09 - and 50 squared, which is 2,500.
12:12 - Let's see what happens now.
12:18 - There's no science to what
I'm doing here, specifically
12:20 - because I'm violating the
actual rules of science,
12:23 - but this is something
that you might--
12:24 - these are parameters
that you may want
12:26 - to play with based on what it
is you really want your system
12:28 - to do.
12:29 - In this case, I think this
would be a better demonstration
12:31 - if I give that mover an
initial velocity so I
12:36 - am going to do that.
12:37 - I'll give it a random one just
so we can see different things.
12:44 - And it has a bit more of
the quality now of a body
12:50 - orbiting this attractor.
12:51 - One thing that might
actually make sense
12:53 - here is to get rid of
this multiplier of mass
12:56 - and actually just give
the objects bigger mass.
13:01 - So I'm going to give the
objects a mass of 50 each.
13:07 - Ooh.
13:09 - Yikes.
13:11 - And then let me just
multiply it by 2.
13:14 - All right.
13:14 - This is what I was
kind of looking to see.
13:17 - And actually, it would be
interesting to trace this-- one
13:19 - thing visually that I think
might be interesting to do
13:21 - is trace the pattern.
13:22 - And for that, I can
give the background
13:24 - quite a bit of alpha.
13:27 - And we can kind of see the
path that it's going in.
13:34 - And then even better, let
me make this an array.
13:37 - [MUSIC PLAYING]
13:44 - Now I'm making 10 mover objects.
13:46 - Oh, and I want to give them
each at a random location
13:50 - with a random mass.
13:52 - So I'm going to just put
10 out into the canvas.
13:54 - I'll make the attractor a
little bit bigger with mass.
13:57 - And then I have to loop
through them all in draw.
14:01 - Let me give a bit more pixel
space to work with here.
14:07 - And let's see what
this looks like.
14:09 - Whoa.
14:09 - What happened to the mover?
14:10 - Oh, no.
14:11 - OK.
14:12 - Let me put the
attractor in the middle.
14:17 - And I think I want to draw
the mover a different color
14:20 - to make it more obvious.
14:25 - I'm going to make this
constraint of the distance even
14:28 - smaller so it's still
weighted according to distance
14:33 - but it won't be as extreme.
14:36 - And let's see what this
take should look like.
14:38 - So now again, what
have I made here?
14:40 - I don't really know.
14:42 - But what I'm showing--
14:43 - and actually, sorry, I
want the initial velocities
14:46 - to be a bit stronger I think.
14:48 - We'll also make
this demonstration
14:49 - a little bit nicer.
14:54 - There we go.
14:55 - So this is what I was
more hoping to see.
14:57 - So what I'm looking
to do here is
14:59 - create a bunch of mover objects
that are orbiting and swirling
15:04 - around this one attractor.
15:06 - So this is what it looks
like without the trails.
15:08 - And you can see I've kind
of wrapped up this example
15:10 - that I wanted to make.
15:11 - And there's a lot that
you could play with here.
15:12 - Incidentally, this might
look very familiar to you.
15:15 - About three years ago,
I did a coding challenge
15:17 - called attraction and repulsion
where I made exactly this.
15:21 - The difference was I
took it a bit further.
15:23 - And this is something you might
think about trying on your own
15:25 - now with this as a
basis for your example
15:27 - is what if I were
to click the mouse
15:29 - and add multiple attractors.
15:31 - What if some of those weren't
actually attractors at all
15:33 - but repellers.
15:34 - How would I make
a repulsion force?
15:36 - It's actually pretty easy.
15:37 - Just multiply by negative
1 to reverse the direction.
15:40 - So I'm going to
actually do some of that
15:41 - in a follow up, which will be
the next video in your playlist
15:44 - here.
15:45 - But what I want to
look at more closely
15:48 - though that neither of--
15:49 - not this example or that
previous coding challenge
15:51 - addressed is what if I
want every mover object
15:55 - to exert a force on
every other mover object.
15:58 - What if going back to Newton's
law of universal attraction,
16:02 - every particle attracts
every other particle?
16:05 - So really there
should be a force.
16:07 - All of these should be
attracting every other one.
16:09 - And what does the
system look like
16:11 - if I have a lot of bodies
floating around all mutually
16:14 - attracting each other?
16:16 - So that's what I'm going to
focus on in the next video.
16:19 - It's a bit of an introduction
to a group behavior.
16:21 - I might need like a nested loop.
16:23 - We'll see.
16:24 - And that'll really
wrap up this chapter 2.
16:26 - [MUSIC PLAYING]

Cleaned transcript:

[CHIME] It is time for Newton's law of universal gravitation. So this is the final example that I will be demonstrating as part of chapter 2, although the concept of forces and how they are applied permeate throughout the rest of the videos that I intend to make. But I'm going to wrap up this chapter by looking at the equation for universal gravitation that looks exactly like this and trying to see can I take this equation and implement it in a P5JS sketch. Here's the same formula with a diagram in the Nature of Code book itself. So the idea of this law is that everybody, every particle, every thing in the universe attracts every other thing with a force that's proportional to the masses of those bodies and inversely proportional to how far apart they are. So the farther apart they are, the weaker the force. The closer they are, the stronger the force. I did something in the first example in the series very similar where I took a mover object and created a vector that pointed from that mover object to the mouse itself and set that vector as the acceleration of the object. So this was like attraction but I wasn't thinking about math. And I wasn't thinking about distance. Let me diagram what I want to do in this video. So I'm going to simplify things and have this concept of an attractor object. So the attractor object isn't a real body in the universe. It's a fixed entity that attracts things to it, but it cannot move. And it cannot experience forces itself. Then I'm going to have the mover object with some given velocity. And the mover object is going to experience a force, a gravitational force, that pulls it to the attractor. And that force, which is a vector, is going to be equal to the mass of one object times the mass of the other object divided by the distance squared. And I put this in the wrong order but also times G, which is the universal gravitational constant. Now there's a very real number that is this value in the universe as we know it. But for us in our pretend P5 canvas, if I draw like a box around this, the G is just a way for us to kind of tune the world to have stronger gravitational attraction or weaker attraction forces. And in a way, I could think of this G as a property of the attractor itself. Maybe different attractors have different constants, although, to some extent, that is taken care of by the mass. So I need everything that's in this formula I need to figure out where is it here. So the mass of one object, well, it would be the mass of this mover object. The mass of the other object would be the mass of the attractor. So to some extent, the mass in G, I could conflate these into one constant. But I'll keep them separate for now. Distance is the distance between the centers of both objects. Remember when I'm calculating a force, I need two things. I need direction and I need magnitude. So this is really all of these numbers are talking about the magnitude. How strong is that force? How long is this arrow that I'm drawing here? The direction is just a vector that points from the object being attracted to the attractor. And so that I can get if you remember I've done this a bunch of times now with subtraction. So the sub function for subtraction I can take the position of the attractor minus the position of the mover and that gives me a vector that points this way. Set its magnitude to the result of this formula. And voila, I have gravitational attraction. So coming back to this example, I am going to now get rid of this acceleration calculation. And when I run the sketch, I should just see this mover not moving at all. And in the main JavaScript file where I have set up a draw, I want to add an attractor. So I'll create an attractor that also gets an xy position and a mass. I'll say attractor.attract(mover) and attractor.show. Now I might have just confused you for a second there because you might be thinking, wait, did I miss something? Did you write an attractor class? And is this just going to work right now? Definitely not. Like when I run this, it's going to be like, I have no idea what that is. So this is the way that I work sometimes. And I was a little bit of flawed in making this tutorial video because this is probably an example that I've written many, many times. So I had it just sort of right in my mind at the ready. But sometimes it can be helpful to sort of sketch out how it is you imagine writing the code to operate an object before writing the class, because now I have the instructions for what it is I need to write. I need to make a class called attractor. The constructor takes three arguments. It needs to have a show function. And it also needs to have an attract function that receives a mover object. So all of these things are now at things that I can write into the attractor class. I've already created another JavaScript file, attractor.js, which is empty. So I'll put class attractor in there, then write the constructor, which if you remember required three arguments, an x, y, and a mass. The x y I'll use for position. The m I'll use for mass. Let me write a show function just to draw it as a circle. I'm now realizing I should calculate a radius based on mass the same way that I did in the previous examples with the mover. So I'm just going to grab this code, which takes the mass, takes the square root, and multiplies by 10. I'll use the same convention. So let's leave out the attract function for a moment. Comment that out. Move the mover to like a little higher up in the canvas. Run it. And what do I have now? Attractor is not defined. Ooh. I can never seem to remember to add the script tag when I have a new JavaScript file. And here we go. All right. Now I have the mover not yet moving because no force has been activated and the attractor just in the canvas. So the next step is for me to write this attract function and implement the formula. Before I do so, little let me address something. Why did I choose to say attractor.attract(mover)? I could have called a function on mover instead of attractor, or I could have written a new function that takes the two arguments, the mover and attractor, or I could just work out the code in here. So I'm making a somewhat arbitrary choice. But to me, it feels conceptually consistent to have the attractor object itself have the functionality to create a force that attracts the mover object. But if you want to try to redo it and reorganize your code in another way, I would really encourage you to do that and share it with me. Now I did make a sort of small error here or inconsistency whereas that I'm saying I'm calculating a vector but all of the variables and aspects of the formula that I'm working with here are just calculating a scalar value, the magnitude of that vector. So let me be a little bit more clear about this diagram. If I have these two bodies each with a mass map, this one being the attractor but that doesn't really matter so much, and I think of this vector pointing from object one to object two as a vector r, then the distance is really the magnitude of that vector squared. And then the direction is the unit vector r which I don't really have a lot of room here which I could write as r with the hat on it. So now this formula is more accurate. And all I need to do is calculate both in my code is calculate both this unit vector and this equation, put them together, and apply that force. And I'm going to do all of this in a new function called attract. That's part of the attractor. So let me first get this vector r. And I'll call it direction. It is this position minus the mover's position. We need to say subtract. The distance is the magnitude of that vector. And actually, I'm going to want distance squared. So let's make this distance squared is magnitude squared. Going to make up just for right now a universal gravitational constant of 1. So I could really just ignore it, but let's keep the variable in there and just set it equal to 1. And I'm going to use the word strength to calculate the magnitude of that force, which is this.mass times mover.mass I'm making myself more room here divided by distance squared and also G times that. So this right here is exactly the same formula that I have right over here. And I just want to take this vector r and set its magnitude to the result of this. Just to be consistent, I'm actually going to rename this from direction to force. I'm going to use this variable to be the force. And then I'll say force.set magnitude to that strength. And then mover.applyforce(force). And we can see I have all the steps here. Get a vector that points from the mover to the attractor. Calculate all of the elements to get the magnitude of that vector. Put it in this variable strength. And then set the magnitude of that vector to strength and apply the force. I don't know. Let's run this. Is it going to work? I think so. I'm not seeing anything. OK. One thing would be to actually call the function attract. Stength is not defined. All right. That must be a mistake that you've all noticed. Strength with an R. Oh wait, I is moving just ever so slightly and slowly. This is where having G can really come in handy. Let's make G 5. And let's make G 50. So I can scale the force relative to that universal gravitational constant. But there's actually something else going on here that I think that I would like to fudge. Well, I really would love to stay so true to this formula. You are a wonderful formula. And I want to stay true to that formula. Give me a little bit of wiggle room here, because this is this made up P5 world. It's pixels. And there's a lot of aspects to the feeling that I want to create and how it's actually going to behave with this literal formula. And one of the a big element here that's playing a role here is this distance squared. So you think about it, the amount of pixels apart that these could be could very easily be 200 pixels. And if they're 200 pixels apart, that's going to be dividing by 40,000, which is going to make the strength of the force very, very, very small. So I could increase the mass of everything. I could increase G. But ultimately, something that I might just do is constrain the distance that I'm using in the calculation to a limit. So I'm always going to, even if it's farther than 50 pixels away maybe, just cap that at 50. On the other hand, when they're really, really close, they could actually be in the same spot, in which case the distance would be zero, which doesn't make any sense in actual reality but could happen here, or even if their distance is something like 0.001 pixels apart, if I were to square this to have distance squared and then divide by it, it would make that strength so strong that things could kind of spiral out of control. So this is something that you could really play with it and try a lot of different scenarios. But for me right now, I'm going to say that whatever that distance is, I want to constrain its range when I go and calculate the force's magnitude. To do that, I'm just going to use the P5 constrain function. And now I am getting the magnitude squared, which I don't love. So I'm going to constrain it between 25, which is 5 squared, and 50 squared, which is 2,500. Let's see what happens now. There's no science to what I'm doing here, specifically because I'm violating the actual rules of science, but this is something that you might these are parameters that you may want to play with based on what it is you really want your system to do. In this case, I think this would be a better demonstration if I give that mover an initial velocity so I am going to do that. I'll give it a random one just so we can see different things. And it has a bit more of the quality now of a body orbiting this attractor. One thing that might actually make sense here is to get rid of this multiplier of mass and actually just give the objects bigger mass. So I'm going to give the objects a mass of 50 each. Ooh. Yikes. And then let me just multiply it by 2. All right. This is what I was kind of looking to see. And actually, it would be interesting to trace this one thing visually that I think might be interesting to do is trace the pattern. And for that, I can give the background quite a bit of alpha. And we can kind of see the path that it's going in. And then even better, let me make this an array. [MUSIC PLAYING] Now I'm making 10 mover objects. Oh, and I want to give them each at a random location with a random mass. So I'm going to just put 10 out into the canvas. I'll make the attractor a little bit bigger with mass. And then I have to loop through them all in draw. Let me give a bit more pixel space to work with here. And let's see what this looks like. Whoa. What happened to the mover? Oh, no. OK. Let me put the attractor in the middle. And I think I want to draw the mover a different color to make it more obvious. I'm going to make this constraint of the distance even smaller so it's still weighted according to distance but it won't be as extreme. And let's see what this take should look like. So now again, what have I made here? I don't really know. But what I'm showing and actually, sorry, I want the initial velocities to be a bit stronger I think. We'll also make this demonstration a little bit nicer. There we go. So this is what I was more hoping to see. So what I'm looking to do here is create a bunch of mover objects that are orbiting and swirling around this one attractor. So this is what it looks like without the trails. And you can see I've kind of wrapped up this example that I wanted to make. And there's a lot that you could play with here. Incidentally, this might look very familiar to you. About three years ago, I did a coding challenge called attraction and repulsion where I made exactly this. The difference was I took it a bit further. And this is something you might think about trying on your own now with this as a basis for your example is what if I were to click the mouse and add multiple attractors. What if some of those weren't actually attractors at all but repellers. How would I make a repulsion force? It's actually pretty easy. Just multiply by negative 1 to reverse the direction. So I'm going to actually do some of that in a follow up, which will be the next video in your playlist here. But what I want to look at more closely though that neither of not this example or that previous coding challenge addressed is what if I want every mover object to exert a force on every other mover object. What if going back to Newton's law of universal attraction, every particle attracts every other particle? So really there should be a force. All of these should be attracting every other one. And what does the system look like if I have a lot of bodies floating around all mutually attracting each other? So that's what I'm going to focus on in the next video. It's a bit of an introduction to a group behavior. I might need like a nested loop. We'll see. And that'll really wrap up this chapter 2. [MUSIC PLAYING]
