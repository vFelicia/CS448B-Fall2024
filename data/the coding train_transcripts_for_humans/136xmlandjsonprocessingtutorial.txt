With timestamps:

00:01 - okay in this video I want to look at
00:03 - getting data in a standardized format
00:06 - that we haven't seen before so we've
00:07 - seen raw text come into processing we
00:09 - chopped it up into words and we counted
00:11 - those words we've seen tabular data
00:12 - which is really wonderful is like oh I
00:14 - found all these numbers and I want I
00:15 - want to use these numbers and look at
00:17 - this they're just sitting right there
00:18 - separated by commas it's a very easy
00:21 - format I know how to parse it and I've
00:23 - got all these numbers so this is what
00:24 - we're hoping for in life that there's
00:26 - data that we want we found the data and
00:29 - it's in a standardized format meaning I
00:31 - can read this format in particular not
00:33 - me but a computer program can read this
00:35 - format very easily in the next video or
00:37 - some video after this one we'll look at
00:39 - data that comes in and anon you know
00:40 - just kind of SMS what do we do if I have
00:43 - to manually figure out like how is this
00:45 - data structured and organized and it's
00:46 - not really meant for me to parse there's
00:48 - still ways we can we can solve this
00:50 - problem but in this video we're going to
00:51 - live in a happy place where the data is
00:54 - either in XML and you see what I've
00:58 - written here
00:59 - extensible markup language I believe
01:01 - that stands for or JSON these are two
01:03 - formats I want to look at JavaScript
01:05 - object notation so these are standards
01:10 - that have been developed in order for
01:12 - applications to serve up data and this
01:14 - is what we think of as an API and
01:16 - application programming interface a
01:19 - interface for two different applications
01:21 - to talk to each other one might be a web
01:23 - server like the New York Times web
01:25 - server wants to talk to my processing
01:27 - sketch oh how exciting how do they talk
01:29 - to each other by sending data back and
01:31 - forth in some standardized way that they
01:33 - each know about XML JSON so one of the
01:37 - things we'll see is that ah we have this
01:40 - example with the table we made these
01:43 - bubbles that had an X and the wine
01:45 - diameter and a label we're going to see
01:47 - exactly these a these we're see exactly
01:51 - this example duplicate an XML and JSON
01:53 - but uh more likely what the scenario you
01:58 - might be in is the following and we go
02:01 - unfortunately wearing a green shirt
02:02 - today which I I need to attach the
02:04 - microphone to something but you can sort
02:06 - of see through me so this might be your
02:07 - scenario you found something online an
02:09 - API it's free I can get the data I want
02:12 - to vision
02:13 - whether information open weather map and
02:15 - if we read through this page we're going
02:19 - to find lots of documentation for how to
02:20 - get a particular piece of data I've I've
02:22 - already grabbed some for you
02:24 - this is now and you can see this is what
02:26 - we need to sort of start also getting
02:28 - used to this idea of query strings so
02:30 - looking here we see there's a URL you
02:33 - know google.com amazon.com open weather
02:36 - map API org and but what we're going to
02:39 - have to figure out in processing is how
02:41 - do we request the data with some
02:44 - specificity I don't just want all the
02:46 - weather of all of the world I want the
02:47 - weather in London I want the data to be
02:49 - an XML I want my units to be metric and
02:52 - I want maybe seven seven days worth of
02:54 - data I believe so we have to get used to
02:56 - this Q equals London and mode equals XML
02:58 - these name value pairs that make up a
03:02 - request to a particular API but we're
03:05 - going to see that in a little bit later
03:06 - but it's good to kind of get that into
03:08 - our minds right now and now you can
03:10 - start to see oh look here's data I have
03:13 - weather data it's in a location the name
03:15 - of that location is London the country
03:17 - is Great Britain here's my locate some
03:20 - more longitude and latitude and altitude
03:22 - and all sorts of other information so
03:24 - this looks there's something that's
03:26 - similar to a table here in that there's
03:28 - chunks of data in between these tags so
03:31 - the interesting thing about XML and also
03:33 - JSON is the data is stored in a tree
03:37 - structure which actually will give us a
03:38 - great deal more flexibility and power in
03:41 - terms of organizing our data than simply
03:44 - a table would so let's think about let's
03:48 - use whether I'm making this up on the
03:50 - fly hopefully it's going to be okay so
03:52 - let's say I'm asking for weather
03:54 - information and weather is the root of
03:57 - my tree and then maybe I have a location
04:00 - which is a child of the weather which is
04:03 - London and then maybe I have five
04:09 - children like Monday Tuesday Wednesday
04:12 - Thursday Friday and each one of those
04:15 - has a temperature and a high and a low
04:20 - like a current temperature a high and a
04:22 - low you could I've got it going on and
04:23 - on but you can see this is how you might
04:25 - think of the data this is a bit more
04:27 - flexible than just having to have a flat
04:29 - data
04:30 - there's only columns and rows here we
04:32 - can sort of think of a database of
04:34 - objects there might be another city
04:36 - that's coming in you know New York and
04:38 - that has a bunch of days of weather and
04:41 - each one of those days also has a
04:42 - temperature in high and low so this is
04:43 - how the data is structured in a tree now
04:45 - what is this actually look like
04:48 - so I want to pull up if you remember so
04:54 - I don't have all of this kind of just
04:55 - like ready to go on the fly here but I'm
04:57 - going to go into our examples and I'm
05:00 - going to look at wereld we have load
05:03 - save table this is an example we were
05:05 - looking at in the previous one of the
05:08 - previous videos and we have this table
05:10 - each one of these things has a label as
05:12 - an X Y in diameter and we can kind of
05:14 - imagine that that table is something
05:17 - that's quite a film quite comfortable
05:20 - for us to sort of think of this data in
05:22 - a table XY diameter name
05:24 - XY diameter name let's look at exactly
05:26 - this data in XML
05:28 - so let's come back here where was I had
05:34 - oh I was there I was there a second ago
05:37 - chapter 18 let's look at load save XML
05:41 - and I'm going to go into the data folder
05:44 - and we grab this piece of data and do I
05:47 - have sublime text somewhere no let's
05:49 - just open it in let's try that yeah and
05:53 - make a bigger bigger bigger come on here
05:58 - we go here's the data
05:59 - oh we move it to the side practice makes
06:03 - perfect right okay so you can see here
06:05 - there is a root node bubbles bubbles has
06:09 - four children a bubble a bubble a bubble
06:11 - a bubble each bubble has three children
06:14 - a position a diameter label a position
06:16 - in diameter later look the position has
06:17 - two attributes an x and y the diameter
06:20 - has a piece of content this label the
06:22 - label has a piece of content this sad so
06:25 - this you know this is how the data is
06:27 - structured if there is a tree each
06:31 - element of the tree has an open tag like
06:35 - weather and a close tag
06:39 - backslash whether each child then is
06:42 - inside of this particular node like the
06:45 - city might be London so city is a child
06:53 - now the city might actually have other
06:56 - children inside of here in which case I
06:58 - might put the end tag down here and then
06:59 - put some other children did the actual
07:01 - where the line breaks are don't actually
07:03 - matter that's just for us the human
07:04 - being to be able to see it so as we
07:06 - start to look at data online you're
07:08 - going to start you're going to find the
07:10 - data like this and it becomes detective
07:12 - work for you you have to figure out okay
07:14 - I whether is the route then their city
07:18 - and I want then the Tuesday a high
07:22 - temperature so what is the path to that
07:24 - it's the child of whether the child of
07:26 - the the first child of whether and the
07:29 - second child of that child and then the
07:31 - high attribute so if we go to an actual
07:34 - example where this happens like this is
07:41 - actually using Yahoo Yahoo weather
07:45 - instead of open weather map and I run
07:47 - this let's just run this to see that it
07:48 - works we can see here I'm getting
07:51 - today's high oh I'm not here I'm getting
07:54 - today's high is 72 degrees in this zip
07:57 - code which is the zip code I'm standing
07:58 - in right now and the forecast is partly
08:00 - cloudy how did I get that come back here
08:07 - we can look into the example you can say
08:10 - okay first of all this is kind of key
08:12 - look at this URL I have a URL which is
08:15 - requesting that XML weather data plus
08:18 - zip plus a variable P equals zip so
08:21 - let's just take this for a second and
08:23 - put this into the browser and you can
08:29 - see that's the URL I'm going to but
08:31 - there needs to be an argument P equals
08:34 - what I could get the weather in where I
08:38 - am right now one zero zero zero three
08:40 - that's if code and you can see here's
08:42 - all of that XML data coming in I could
08:45 - change this to
08:46 - nine oh two one oh and here's the
08:49 - weather in Beverly Hills California all
08:51 - that weather is coming in so while if
08:53 - I'm in the browser I'm just typing this
08:55 - stuff up into the URL query address area
08:58 - thing but in processing itself I need to
09:02 - form that URL as a string and I can
09:07 - concatenate two strings together with
09:08 - the plus operator so this is a very
09:10 - simplistic example if I were to pull up
09:13 - I have another example which is loading
09:15 - from New York Times you can see here
09:17 - there's a bit more stuff going on I'm
09:20 - searching for processing in the newest
09:25 - article I'm using an article search here
09:26 - there's a query there's a sort order I
09:28 - also need to have an API key so I have
09:30 - to form that URL how did I figure out
09:33 - how this URL is formed I'm simply doing
09:35 - that by going to New York Times website
09:40 - and reading through its documentation so
09:42 - there's no like catch-all scenario here
09:44 - I'm just kind of showing you all the
09:45 - bits and pieces but you will have to do
09:46 - that detective work yourself so back to
09:50 - this weather example how are we getting
09:53 - that stuff load XML so we saw load
09:58 - strings gives us a txt file load table
10:01 - we can load a CSV any type of tabular
10:05 - data and now we have load XML which is
10:07 - assuming that that whatever these the
10:10 - query is a file the URL worked what
10:12 - we're getting is XML data and now XML
10:16 - get child Channel item Y weather
10:19 - forecast get the integer for the high
10:21 - temperature get the string for the text
10:24 - so this is how I search into a
10:27 - particular piece of XML data and if I go
10:30 - if I go back to the browser and we're
10:33 - looking at this you can see okay what
10:36 - was it it was oops it was channel item Y
10:40 - weather forecast look at this channel is
10:45 - first I already forgot let me move this
10:50 - over to the side here
10:51 - oh this was going so well Channel item Y
10:55 - weather forecast okay channel item
10:59 - where's I
11:00 - somebody find me item there it is down
11:05 - at the bottom here item why weather
11:10 - condition is there a why weather
11:12 - forecast there it is
11:14 - why weather forecast and here that's the
11:18 - information that I wish for so I've got
11:20 - a botching this because you know belt
11:22 - I'll try to read you this video that's a
11:24 - voice but but you get the idea so you
11:28 - you load a URL you load it into load XML
11:31 - and you find that piece of data you're
11:33 - looking for in addition to our URL we
11:35 - could see here that sorry load save XML
11:38 - this particular example now I can run
11:41 - this example which is just loading in an
11:45 - XML data file this is the tabular data
11:48 - with bubbles and look at this here we go
11:50 - I want to get give me the position and
11:53 - give me the X and give me the Y then
11:54 - give me the diameter so this is the
11:56 - syntax much like how we look through a
11:59 - table
12:00 - we looked at every single row and every
12:03 - single column now we have to look at
12:05 - every single child and in each child let
12:08 - me pull out that x value let me put out
12:09 - that Y value and the same way that in
12:13 - table we could then save that table data
12:16 - back out we can also save XML data back
12:19 - out and you can see that's happening
12:20 - right here
12:21 - save XML data slash XML okay
12:24 - so it's kind of like a haphazard a very
12:29 - scattered description of XML and looking
12:31 - at a few scenarios here is now let's
12:35 - look think about JSON so JSON JavaScript
12:38 - object notation now if we'd been
12:40 - programming all along in JavaScript
12:41 - you'd be like yeah we're done javascript
12:43 - object notation is just the syntax of
12:45 - JavaScript and in JavaScript you can
12:47 - make an object like this I'm going to
12:49 - save our particle equals open curly
12:53 - bracket close curly bracket you know X
12:56 - is at 100 why is that 200 and the
13:02 - diameter is 52 so this is a line of code
13:07 - in JavaScript which is declaring an
13:10 - object literal an object literal
13:13 - a particle that has an excellent
13:15 - diameter and we've kind of seen this in
13:17 - processing class particle float X float
13:20 - Y float D so this is kind of like
13:22 - instead of a template this is just
13:24 - making the object itself what's
13:25 - interesting about JavaScript object
13:27 - notation is if you put this into a text
13:29 - file this is exactly the syntax for
13:32 - storing that data so if I come back over
13:34 - here and I were to go to let me find
13:41 - load save JSON and I'm going to open
13:45 - this JSON file we can see now
13:48 - oh I'm not over here I'm really screwing
13:51 - this up we can now see that this is that
13:55 - same data in JSON format there is
13:58 - something called bubbles what is that
14:01 - it's an array that square bracket means
14:02 - an array with a bunch of things in it
14:04 - each one of those things separated by
14:06 - commas has a position which itself is an
14:08 - object with an X and a Y and a diameter
14:10 - which has something in a label which is
14:12 - a string so this is now a standardized
14:14 - format for that particular data and if I
14:18 - look into the code we can see what's
14:22 - happening okay I need to load that JSON
14:24 - file what's in that JSON file an array
14:27 - of bubble objects for each array give me
14:29 - the give me the object in each one of
14:31 - those arrays and then give me the
14:34 - position give me the X give me the Y
14:37 - give me the diameter so you know I'm not
14:38 - going through like the the nitty-gritty
14:40 - details of this syntax I think that if
14:42 - you looked at all three of those
14:44 - examples next to each other and all
14:45 - three data formats you would start to
14:47 - see how are things organized columns and
14:50 - rows XML children JavaScript JSON arrays
14:55 - which is a list of things and JSON
14:56 - objects which is a collection of
14:58 - properties with a name like position and
15:01 - a value like 12 comma 13 and x and a y
15:05 - so this is how we're working with data
15:08 - and I think I'm kind of wrapping this up
15:11 - here but I think it might be useful just
15:12 - to see a JSON example so this by the way
15:17 - okay so here is that New York Times
15:19 - example which which goes to the New York
15:22 - Times API searches for the word
15:25 - processing sorts it by
15:28 - and then we get all of this JSON back so
15:30 - you can see here this is kind of a mess
15:32 - this is very while this is very easy for
15:34 - a computer program to read this is very
15:36 - hard for us to see one thing that you
15:38 - can do that I think is useful to see I'm
15:40 - going to take this copy paste it there's
15:42 - a site JSON for matter that I can just
15:45 - paste all this like garbled JavaScript
15:48 - of JSON in and I'm going to hit process
15:52 - and it formats it nicely for me so now
15:55 - if I look at this full screen I can
15:57 - start to like see like ah okay
15:59 - so where is that there's a response and
16:03 - it has some Doc's each has a URL oh
16:07 - there's a headline main Australia issues
16:10 - blanket visa honorable I should search
16:12 - for something different but you can see
16:15 - here's that headline and if I go into
16:17 - processing and go to this New York Times
16:22 - API example and I run this you can see
16:25 - ah I have that exact same headline now
16:28 - showing up and processing how did I do
16:29 - that and you can see here that what did
16:38 - I do I said okay I got all that JSON
16:40 - data then I look for the response then I
16:43 - looked for docs and then I looked for
16:47 - the first element index 0 and then I
16:50 - looked for the headline and then I
16:52 - looked for main so what we that
16:54 - detective work essentially that we did
16:56 - by figuring out that it's a response
16:59 - Docs then there's an array a the first
17:02 - one that I need headline that I need
17:03 - main that is mirrored here in the in
17:07 - this processing sketch by looking
17:09 - through all these pieces of JSON ok so I
17:11 - don't know how useful this was because
17:13 - it was kind of a smattering of lots of
17:15 - things and I like one video with both
17:16 - XML and JSON and but you can see so what
17:19 - I would say to you what's your exercise
17:20 - now find a data source online I will try
17:24 - to link to a whole bunch of examples of
17:25 - things see if you can pull that data
17:27 - into processing and try to just pull out
17:28 - a singular unit of information a
17:30 - temperature article headline and then
17:34 - you know once you've done that you might
17:35 - start looking for oh can I get larger
17:37 - amounts of day
17:38 - can I get how many times from the New
17:40 - York Times a certain word appears every
17:42 - year from you know 1950 to 2014 and draw
17:45 - a graph of that so so this is some
17:48 - beginning steps and I will say goodbye
17:52 - and I will hear from you someday when
17:55 - about this particular video goodbye

Cleaned transcript:

okay in this video I want to look at getting data in a standardized format that we haven't seen before so we've seen raw text come into processing we chopped it up into words and we counted those words we've seen tabular data which is really wonderful is like oh I found all these numbers and I want I want to use these numbers and look at this they're just sitting right there separated by commas it's a very easy format I know how to parse it and I've got all these numbers so this is what we're hoping for in life that there's data that we want we found the data and it's in a standardized format meaning I can read this format in particular not me but a computer program can read this format very easily in the next video or some video after this one we'll look at data that comes in and anon you know just kind of SMS what do we do if I have to manually figure out like how is this data structured and organized and it's not really meant for me to parse there's still ways we can we can solve this problem but in this video we're going to live in a happy place where the data is either in XML and you see what I've written here extensible markup language I believe that stands for or JSON these are two formats I want to look at JavaScript object notation so these are standards that have been developed in order for applications to serve up data and this is what we think of as an API and application programming interface a interface for two different applications to talk to each other one might be a web server like the New York Times web server wants to talk to my processing sketch oh how exciting how do they talk to each other by sending data back and forth in some standardized way that they each know about XML JSON so one of the things we'll see is that ah we have this example with the table we made these bubbles that had an X and the wine diameter and a label we're going to see exactly these a these we're see exactly this example duplicate an XML and JSON but uh more likely what the scenario you might be in is the following and we go unfortunately wearing a green shirt today which I I need to attach the microphone to something but you can sort of see through me so this might be your scenario you found something online an API it's free I can get the data I want to vision whether information open weather map and if we read through this page we're going to find lots of documentation for how to get a particular piece of data I've I've already grabbed some for you this is now and you can see this is what we need to sort of start also getting used to this idea of query strings so looking here we see there's a URL you know google.com amazon.com open weather map API org and but what we're going to have to figure out in processing is how do we request the data with some specificity I don't just want all the weather of all of the world I want the weather in London I want the data to be an XML I want my units to be metric and I want maybe seven seven days worth of data I believe so we have to get used to this Q equals London and mode equals XML these name value pairs that make up a request to a particular API but we're going to see that in a little bit later but it's good to kind of get that into our minds right now and now you can start to see oh look here's data I have weather data it's in a location the name of that location is London the country is Great Britain here's my locate some more longitude and latitude and altitude and all sorts of other information so this looks there's something that's similar to a table here in that there's chunks of data in between these tags so the interesting thing about XML and also JSON is the data is stored in a tree structure which actually will give us a great deal more flexibility and power in terms of organizing our data than simply a table would so let's think about let's use whether I'm making this up on the fly hopefully it's going to be okay so let's say I'm asking for weather information and weather is the root of my tree and then maybe I have a location which is a child of the weather which is London and then maybe I have five children like Monday Tuesday Wednesday Thursday Friday and each one of those has a temperature and a high and a low like a current temperature a high and a low you could I've got it going on and on but you can see this is how you might think of the data this is a bit more flexible than just having to have a flat data there's only columns and rows here we can sort of think of a database of objects there might be another city that's coming in you know New York and that has a bunch of days of weather and each one of those days also has a temperature in high and low so this is how the data is structured in a tree now what is this actually look like so I want to pull up if you remember so I don't have all of this kind of just like ready to go on the fly here but I'm going to go into our examples and I'm going to look at wereld we have load save table this is an example we were looking at in the previous one of the previous videos and we have this table each one of these things has a label as an X Y in diameter and we can kind of imagine that that table is something that's quite a film quite comfortable for us to sort of think of this data in a table XY diameter name XY diameter name let's look at exactly this data in XML so let's come back here where was I had oh I was there I was there a second ago chapter 18 let's look at load save XML and I'm going to go into the data folder and we grab this piece of data and do I have sublime text somewhere no let's just open it in let's try that yeah and make a bigger bigger bigger come on here we go here's the data oh we move it to the side practice makes perfect right okay so you can see here there is a root node bubbles bubbles has four children a bubble a bubble a bubble a bubble each bubble has three children a position a diameter label a position in diameter later look the position has two attributes an x and y the diameter has a piece of content this label the label has a piece of content this sad so this you know this is how the data is structured if there is a tree each element of the tree has an open tag like weather and a close tag backslash whether each child then is inside of this particular node like the city might be London so city is a child now the city might actually have other children inside of here in which case I might put the end tag down here and then put some other children did the actual where the line breaks are don't actually matter that's just for us the human being to be able to see it so as we start to look at data online you're going to start you're going to find the data like this and it becomes detective work for you you have to figure out okay I whether is the route then their city and I want then the Tuesday a high temperature so what is the path to that it's the child of whether the child of the the first child of whether and the second child of that child and then the high attribute so if we go to an actual example where this happens like this is actually using Yahoo Yahoo weather instead of open weather map and I run this let's just run this to see that it works we can see here I'm getting today's high oh I'm not here I'm getting today's high is 72 degrees in this zip code which is the zip code I'm standing in right now and the forecast is partly cloudy how did I get that come back here we can look into the example you can say okay first of all this is kind of key look at this URL I have a URL which is requesting that XML weather data plus zip plus a variable P equals zip so let's just take this for a second and put this into the browser and you can see that's the URL I'm going to but there needs to be an argument P equals what I could get the weather in where I am right now one zero zero zero three that's if code and you can see here's all of that XML data coming in I could change this to nine oh two one oh and here's the weather in Beverly Hills California all that weather is coming in so while if I'm in the browser I'm just typing this stuff up into the URL query address area thing but in processing itself I need to form that URL as a string and I can concatenate two strings together with the plus operator so this is a very simplistic example if I were to pull up I have another example which is loading from New York Times you can see here there's a bit more stuff going on I'm searching for processing in the newest article I'm using an article search here there's a query there's a sort order I also need to have an API key so I have to form that URL how did I figure out how this URL is formed I'm simply doing that by going to New York Times website and reading through its documentation so there's no like catchall scenario here I'm just kind of showing you all the bits and pieces but you will have to do that detective work yourself so back to this weather example how are we getting that stuff load XML so we saw load strings gives us a txt file load table we can load a CSV any type of tabular data and now we have load XML which is assuming that that whatever these the query is a file the URL worked what we're getting is XML data and now XML get child Channel item Y weather forecast get the integer for the high temperature get the string for the text so this is how I search into a particular piece of XML data and if I go if I go back to the browser and we're looking at this you can see okay what was it it was oops it was channel item Y weather forecast look at this channel is first I already forgot let me move this over to the side here oh this was going so well Channel item Y weather forecast okay channel item where's I somebody find me item there it is down at the bottom here item why weather condition is there a why weather forecast there it is why weather forecast and here that's the information that I wish for so I've got a botching this because you know belt I'll try to read you this video that's a voice but but you get the idea so you you load a URL you load it into load XML and you find that piece of data you're looking for in addition to our URL we could see here that sorry load save XML this particular example now I can run this example which is just loading in an XML data file this is the tabular data with bubbles and look at this here we go I want to get give me the position and give me the X and give me the Y then give me the diameter so this is the syntax much like how we look through a table we looked at every single row and every single column now we have to look at every single child and in each child let me pull out that x value let me put out that Y value and the same way that in table we could then save that table data back out we can also save XML data back out and you can see that's happening right here save XML data slash XML okay so it's kind of like a haphazard a very scattered description of XML and looking at a few scenarios here is now let's look think about JSON so JSON JavaScript object notation now if we'd been programming all along in JavaScript you'd be like yeah we're done javascript object notation is just the syntax of JavaScript and in JavaScript you can make an object like this I'm going to save our particle equals open curly bracket close curly bracket you know X is at 100 why is that 200 and the diameter is 52 so this is a line of code in JavaScript which is declaring an object literal an object literal a particle that has an excellent diameter and we've kind of seen this in processing class particle float X float Y float D so this is kind of like instead of a template this is just making the object itself what's interesting about JavaScript object notation is if you put this into a text file this is exactly the syntax for storing that data so if I come back over here and I were to go to let me find load save JSON and I'm going to open this JSON file we can see now oh I'm not over here I'm really screwing this up we can now see that this is that same data in JSON format there is something called bubbles what is that it's an array that square bracket means an array with a bunch of things in it each one of those things separated by commas has a position which itself is an object with an X and a Y and a diameter which has something in a label which is a string so this is now a standardized format for that particular data and if I look into the code we can see what's happening okay I need to load that JSON file what's in that JSON file an array of bubble objects for each array give me the give me the object in each one of those arrays and then give me the position give me the X give me the Y give me the diameter so you know I'm not going through like the the nittygritty details of this syntax I think that if you looked at all three of those examples next to each other and all three data formats you would start to see how are things organized columns and rows XML children JavaScript JSON arrays which is a list of things and JSON objects which is a collection of properties with a name like position and a value like 12 comma 13 and x and a y so this is how we're working with data and I think I'm kind of wrapping this up here but I think it might be useful just to see a JSON example so this by the way okay so here is that New York Times example which which goes to the New York Times API searches for the word processing sorts it by and then we get all of this JSON back so you can see here this is kind of a mess this is very while this is very easy for a computer program to read this is very hard for us to see one thing that you can do that I think is useful to see I'm going to take this copy paste it there's a site JSON for matter that I can just paste all this like garbled JavaScript of JSON in and I'm going to hit process and it formats it nicely for me so now if I look at this full screen I can start to like see like ah okay so where is that there's a response and it has some Doc's each has a URL oh there's a headline main Australia issues blanket visa honorable I should search for something different but you can see here's that headline and if I go into processing and go to this New York Times API example and I run this you can see ah I have that exact same headline now showing up and processing how did I do that and you can see here that what did I do I said okay I got all that JSON data then I look for the response then I looked for docs and then I looked for the first element index 0 and then I looked for the headline and then I looked for main so what we that detective work essentially that we did by figuring out that it's a response Docs then there's an array a the first one that I need headline that I need main that is mirrored here in the in this processing sketch by looking through all these pieces of JSON ok so I don't know how useful this was because it was kind of a smattering of lots of things and I like one video with both XML and JSON and but you can see so what I would say to you what's your exercise now find a data source online I will try to link to a whole bunch of examples of things see if you can pull that data into processing and try to just pull out a singular unit of information a temperature article headline and then you know once you've done that you might start looking for oh can I get larger amounts of day can I get how many times from the New York Times a certain word appears every year from you know 1950 to 2014 and draw a graph of that so so this is some beginning steps and I will say goodbye and I will hear from you someday when about this particular video goodbye
