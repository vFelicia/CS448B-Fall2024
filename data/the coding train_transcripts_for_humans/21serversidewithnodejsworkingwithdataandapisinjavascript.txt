With timestamps:

00:00 - [DING]
00:01 - Welcome back.
00:01 - It is time for Module 2.
00:03 - And in this module, I'm
going to do something
00:05 - quite exciting and
quite different
00:06 - than what I've done so far.
00:08 - Everything that I did
in the previous example,
00:11 - it was all client-side
JavaScript--
00:13 - drawing the map, graphing
the global temperature data,
00:18 - loading images and
displaying them
00:19 - on the web page with the
fetch function, all of that
00:21 - was done with
client-side JavaScript,
00:23 - meaning JavaScript written
into the HTML page itself.
00:27 - But there are a lot of
things that you, that I,
00:30 - that the people of the world
who were doing this programming
00:32 - thing want to do, working
with data and APIs,
00:36 - that you cannot do with
client-side JavaScript only.
00:39 - So in this module,
I'm going to show
00:41 - you server-side programming.
00:42 - And I'm going to use a
JavaScript runtime called
00:44 - Node.js which can be used
for server-side programming.
00:46 - Now, the details of what
server-side programming is,
00:48 - and how I'm going to
do it, that's to come.
00:50 - But this project that
I'm going to build,
00:53 - the fundamental
thing, the reason why
00:55 - we need node for this project
is for data persistence.
00:58 - I want to gather some data, and
save it, and get it back later.
01:02 - And this is not something
that you can easily
01:03 - do without writing a server.
01:05 - You could certainly use
somebody else's server.
01:07 - There's something
called database
01:08 - as a service, where I could
just be like, hey, you've
01:10 - got a server, can
I sign up for you?
01:12 - And take my data, and then
I'll ask for it back later.
01:14 - But I'm actually going
to create a server that's
01:16 - going to run on
this laptop here,
01:17 - and I'm in a save
the date data here.
01:19 - Now, at some point,
I'm also going
01:21 - to need to show you
how to get that server
01:22 - to run somewhere else
besides your own laptop,
01:24 - but that's a place to start.
01:26 - The project that I'm going
to build in this module
01:28 - is called the Data Selfie App.
01:30 - And the Data Selfie App
is an example project
01:31 - by Joey Lee who's
designer and researcher.
01:34 - He teaches a class
right here at NYU at ITP
01:37 - called Quant Humanists.
01:40 - It's about data
and self tracking.
01:42 - And so Joey has graciously
given permission
01:45 - to use, to build on
top of his examples,
01:47 - as part of this series.
01:49 - In this video's description
I'll link to Joey's website
01:51 - so you can learn
more about his work,
01:52 - as well as to the original
GitHub repo for the data selfie
01:55 - app so you can find all
of the code for the things
01:57 - that I'm going to show you.
01:58 - Now, in order follow
along with the code
02:00 - that I'm going to
write and demonstrate
02:01 - as I build this
project, you're going
02:02 - to need to download and install
some stuff that you might not
02:05 - have on your computer already.
02:06 - It's going to be confusing,
because you might
02:07 - be using Windows, or
you might be using Mac,
02:09 - and I'm using a Mac.
02:10 - And oi, what are we
going to solve this?
02:11 - All right.
02:12 - So let me give you a list
of the things you need
02:14 - and help you with some
resources to find those things.
02:16 - Number 1, you need
to install Node.js.
02:19 - That should be as easy as going
to nodejs.org and following
02:21 - the installation instructions
for your operating system.
02:24 - I do also have an entire
video about downloading
02:27 - and installing
node, and what note
02:28 - is, that I'll also
link you to if you
02:30 - want more background there.
02:32 - You're also going to want some
kind of console application,
02:36 - some command-line terminal
thing that you can open up
02:39 - and type commands in to run
Node stuff on your computer.
02:42 - I'm using iTerm, which is
an alternative to the Mac's
02:45 - built in terminal application.
02:47 - On Windows I hear
people like PowerShell,
02:49 - just the built-in
command thing--
02:52 - oh, and Git BASH.
02:52 - Git BASH is possibly
a good one too.
02:54 - I actually have a
whole workflow series
02:56 - where I go through all of these
bits and pieces of everything
02:58 - you need to have your
environment set up
03:00 - to follow along
with what I'm doing.
03:01 - So you can also just go
and find that series,
03:03 - watch that, and come back here.
03:05 - But all you need
is download Node,
03:07 - you need some kind of
shell command prompt thing,
03:10 - and you need a code editor.
03:11 - If you've got that,
you're ready to go.
03:12 - So before I get to coding and
building the actual project,
03:15 - let's just talk for a
second about, what is Node?
03:18 - Now, if you go to the Node
website, it says right there,
03:20 - Node.js is a JavaScript runtime
built on Chrome's V8 JavaScript
03:24 - engine.
03:25 - That is a mouthful.
03:26 - Let's try to understand
what that is.
03:28 - What do I mean by runtime?
03:29 - So normally, when I'm
typing JavaScript,
03:31 - I'm exevuting that
stuff in the browser.
03:34 - The JavaScript has no meaning
without the browser itself.
03:38 - Suddenly, with Node, I can
start to write JavaScript
03:41 - without the browser.
03:42 - It's its own runtime.
03:44 - The code runs on your computer.
03:46 - Let's look at what that means
more practically speaking.
03:49 - So here I am with my
command-line access
03:52 - where I can type in commands.
03:53 - So hopefully you're here.
03:54 - You've downloaded your
terminal app thingy,
03:56 - you've got it going, and
you've installed Node.
03:59 - If I now type in n-o-d-e,
node, and hit Enter,
04:02 - suddenly I have entered
the JavaScript runtime.
04:05 - This is very similar
to the developers
04:08 - console in the browser.
04:09 - But here, I can start typing
in some JavaScript stuff,
04:11 - like const x = 5, and
then I could say x + 2,
04:17 - and it's going to
give me the number 7.
04:18 - So we can see this
is a runtime--
04:20 - a place where I can write
JavaScript and run JavaScript.
04:24 - Now, this is not typically
how you would use Node.
04:26 - Typically, I wouldn't
just be writing
04:28 - a lot of code line-by-line
in my terminal itself.
04:32 - I would write a bunch
of JavaScript code
04:33 - in a JavaScript
file, then execute it
04:35 - through a Node command.
04:37 - So let's see how that works.
04:38 - So I actually have a
file called index.js.
04:41 - It's just a JavaScript file.
04:42 - And I could put something in
like console.log('hello');.
04:47 - And I could say const x = 5.
04:49 - And I could say something
like console.log(x + 2);,
04:55 - and let's see what happens.
04:57 - So now, if I go back
to the terminal,
05:01 - I can type node index.js.
05:04 - And this is me saying, hey,
execute the code line-by-line,
05:09 - in the order that it's written,
of what you find in that file.
05:12 - So I'm going to
do that right now.
05:15 - And there we go.
05:16 - So what is it that I want to
write and that index.js file.
05:18 - Clearly, console logging
a bunch of things,
05:20 - I can see that it works.
05:21 - But why am I using Node?
05:23 - The reason why I'm using Node is
that I want to create a server.
05:27 - A server is an application
that runs and listens.
05:30 - And what it listens
for is it listens
05:32 - for requests-- people who want
to connect to that server.
05:36 - So this server is going to
be the central repository
05:39 - of the data of my application.
05:41 - All of the different clients,
whether it's you on your phone,
05:44 - or so-and-so on their
laptop, or somebody else
05:46 - on their internet
connected toaster,
05:48 - can make a request to the
server and grab some data.
05:52 - So I could come back over
here and just start writing--
05:54 - I could Google "write a
web server with Node.js,"
05:57 - and I could find some code, and
I could start typing in there,
06:00 - and I could create that server.
06:01 - It's going to open up a
connection and start listening.
06:03 - However, one of the ways
that is very typical when
06:07 - working with Node is
to find a pacakge--
06:09 - a Node package-- that has
some of the functionality
06:12 - you're looking for,
install that package--
06:14 - it's like a library
or an add-on--
06:16 - and make use of
that functionality.
06:18 - And the Node package that I want
to use to create my web server
06:21 - is something called Express.
06:23 - Express is a pretty
minimal and very simple
06:26 - framework for
making web servers.
06:27 - And it has the
core functionality
06:29 - you need without a lot
of bells and whistles.
06:30 - So we can kind of get up and
running with it really quickly.
06:33 - So now, we have a node.
06:35 - We can write JavaScript code in
a thing and run it with Node.
06:39 - So in theory, we could
write some JavaScript
06:41 - code to make a server, but
we didn't need this package.
06:43 - How do we have access
to the Node package
06:46 - Express in our Node code?
06:48 - NPM stands for Node
Package Manager,
06:51 - and it's the thing that manages
all of our Node packages
06:53 - for us.
06:54 - You don't have to install that.
06:55 - In fact, when you installed
Node, you also installed NPM--
06:58 - Node Package Manager.
06:59 - If I want to use NPM with this
project, I need package.json.
07:04 - The good news for you is that
dot. json in package.json.
07:07 - You know what json is,
because we've worked with it.
07:09 - We have gotten data
in JSON format--
07:11 - JavaScript Object Notation,
before in previous examples.
07:15 - package.json is a
special kind of file.
07:17 - It's basically the configuration
file for your project.
07:19 - This is where all the meta
information about our project--
07:22 - what Node packages we're using,
what our project is called--
07:25 - and by project, I mean web
application-- all of that's
07:28 - going to be in package.json.
07:29 - To create the package.json
file, I could, if I want,
07:32 - just make a file called
package.json and type
07:34 - some stuff into it.
07:35 - But if I want to not make any
mistakes, if I want to be sure,
07:38 - there's a nice command-line
utility from NPM itself
07:41 - that will generate
the file for me.
07:43 - And that is npm init.
07:45 - So as long as I've
got Node installed,
07:46 - if I'm in the project
directory I can type npm in it,
07:49 - and it's going to
walk me through what
07:50 - I need in the Package.json not
07:52 - So one thing is I need a name.
07:53 - It's guessing, because the
folder's called module2,
07:56 - module two, that sounds good.
07:58 - I'll just hit Enter.
07:59 - Version number-- I'm not going
to worry about the version
08:01 - number.
08:01 - This is important if I'm
building an open source library
08:04 - and I need to really keep
track of version numbers.
08:06 - But I'm just kind of
tinkering around here.
08:08 - Description-- let
me add something.
08:09 - This is the Data
Selfie App by Joey Lee.
08:14 - Entry point,
index.js-- Yes that's
08:16 - the file that I want to put my
code in that I want to run when
08:21 - I want to run this project.
08:22 - Test command-- I'm not worrying
about testing right now.
08:24 - I'll refer you to some
other videos about that
08:27 - if you're interested.
08:27 - Gut repository-- I'm
not worrying about that.
08:29 - Keywords-- example, data
selfie, something like that.
08:35 - I think I could give some
keywords separated by commas.
08:37 - Author-- this is a tricky one,
because I'm basing my work
08:40 - off of Joey's work.
08:41 - I'll put my name in
there for right now,
08:42 - and I'll make sure that
everything is well documented
08:45 - of where it's
coming from as I go.
08:47 - License-- I'm going
to put in MIT.
08:50 - That's a very
permissive license.
08:51 - It basically lets you
do just about anything
08:53 - you want with the code.
08:56 - I'm using the same license
that Joey is using.
08:58 - And then, look at
this, it's giving me--
09:00 - this is the information that
is going in that package.json
09:04 - file.
09:05 - Does it look OK to me?
09:06 - It does, I'm going to type yes.
09:08 - So if I go back to my
code editor, I can see.
09:10 - There we go.
09:10 - Here's that package.json file.
09:12 - All the information
that's needed is in there.
09:14 - It's formatted correctly.
09:15 - I'm ready to go.
09:16 - But I'm not ready to go, right?
09:18 - The reason I was doing
this in the first place
09:20 - is that I'm trying
to get to the point
09:21 - where I can install the Node
package Express, the web
09:25 - framework I want to use
for creating my server.
09:28 - The reason why I need
this package.json
09:30 - file is in this
file is where I need
09:31 - to make reference to Express.
09:33 - I need to say Express
is a package that I'm
09:35 - using for my project.
09:36 - But I don't want to
edit this file directly,
09:38 - even though I could.
09:39 - What I want to do, instead,
is say npm install express.
09:45 - Say npm install
express, and run that.
09:49 - Once, I've run this, two
things are going to happen.
09:51 - Number one is we're going to see
Express pop-up in package.json
09:55 - as one of the dependencies.
09:56 - It is a dependency
of this project.
09:58 - My project depends on the
existence of the Express Node
10:01 - package, which I intend to
use quite a bit in this code.
10:03 - The other thing
that's happened is
10:06 - I have a new folder
called node_modules.
10:08 - And when I look
into this folder,
10:10 - oh, my God, there's
so much stuff in here.
10:12 - So this is the thing--
oh, look, there's express.
10:15 - I only said express.
10:16 - NPM installed express.
10:17 - I didn't say inherits
or fresh or http-errors.
10:20 - It is so happens that
most Node packages depend
10:23 - on other packages, and
the Node Package Manager
10:26 - is smart enough to know that
if I'm saying install express,
10:29 - it's going to go grab everything
else that it needs as well.
10:32 - So the nice thing is we don't
have to manage that folder.
10:35 - Everything that we
need will be in there.
10:37 - But don't be freaked
out if you see
10:39 - all sorts of other things
in there that you do
10:41 - think that you installed.
10:42 - They're coming along for the
ride with Express itself.
10:46 - I'm finally ready
to write some code.
10:48 - So in order to have access to
the express package, the Node
10:51 - package Express, I
need to use require.
10:53 - So I can say const express
= require('express').
10:56 - This is basically like
an import statement.
10:58 - Hey, you know that Node package
I installed called Express?
11:01 - Give me that thing, and put
it all in this variable called
11:04 - express.
11:04 - The reason why I
want to do that is I
11:06 - want to create a
web application.
11:07 - I'm going to call it app.
11:08 - And the way I'm going
to create that is just
11:10 - call the express function.
11:11 - So that whole library, the
whole Node package Express,
11:14 - basically comes in
as a big function
11:16 - that I can just execute
and put in a variable.
11:19 - The first thing that I
want to do in a web server,
11:21 - if I think back to my
silly little diagram--
11:23 - here's the web server,
it's listening, listening,
11:25 - anybody want to connect to me--
is I need to start listening.
11:28 - So now, I can listen.
11:29 - I could just actually
say app.listen().
11:32 - And when I want to
start listening,
11:34 - I need to also specify
something known as a port.
11:36 - Look at this, it's even
telling me right here
11:38 - in Node what I need.
11:39 - The port is a unique number.
11:40 - It's like a numeric address
at which I'm going to listen.
11:43 - So you could have
different servers running
11:45 - different ports, and
there are specific ports
11:47 - reserved for certain things.
11:48 - But that's beyond the scope
of what I'm doing right here.
11:50 - I'm just going to
pick some port that I
11:51 - know won't be used by
something else, like 3,000,
11:53 - and then I'm going to give a
callback function here which
11:56 - basically is just the
callback that happen
11:59 - once the server is listening.
12:00 - So I'll use my arrow
syntax and just say
12:02 - console.log to say
listening at 3,000.
12:07 - There are nicer ways
I could clean this up,
12:09 - but this is the idea--
12:10 - require Express, create the
app, and listen at a port.
12:15 - And there we go.
12:18 - I'm listening.
12:18 - I could connect.
12:19 - Should we connect?
12:20 - So I'd be very happy to accept
connections at port 3,000
12:24 - right now, but I need to
figure out why am I here,
12:27 - what am I listening for,
what kind of information
12:29 - an I going to send back.
12:30 - So let's make a list
of some of the things
12:31 - I want the server to do.
12:32 - And it's pretty
simple for this app.
12:34 - Number 1, I want
to serve web pages.
12:40 - In other words, right
now I'm just a server
12:42 - running locally on this
laptop at port 3,000,
12:44 - but if I were to deploy my
server to my website thingy
12:48 - url.com, and people type that
address into their browser,
12:52 - I want to send them the
HTML and JavaScript and CSS
12:56 - and all that stuff that I
have made for them to be
12:58 - able to see in their browser.
13:00 - So to simplify that let's just
serve one page index.html.
13:05 - So when I open up my web
browser or whatever content
13:08 - is in there, I should see.
13:09 - So that's number one.
13:11 - There's other things that I
want to do, of course, like I
13:12 - want to receive information
and save it in the database.
13:14 - And then I want to be to send
information from the database
13:17 - back out.
13:17 - But I'm going to get to
that stuff as I go further
13:20 - and build this project.
13:21 - Let's actually just
finish off this first part
13:24 - by serving a web page.
13:26 - So these are all the
files I have already.
13:28 - I have package.json.
13:29 - We know about that.
13:30 - That's the configuration
of my project.
13:32 - index.js, that's my server code.
13:34 - It gets confusing,
because I'm going to have
13:36 - server code and client code.
13:37 - We got to keep this
stuff straight.
13:39 - I have node_modules.
13:40 - That's all of the stuff
all the Node packages
13:42 - that I've installed.
13:43 - I don't need to look in there.
13:44 - There's also this
package-lock file.
13:46 - It's kind of an important file.
13:48 - It's auto-generated.
13:49 - You don't need to touch it.
13:49 - But it's basically keeping
track of the dependencies
13:52 - and versions of your packages.
13:53 - We can leave that aside.
13:55 - index.html-- that's the file
that I want to see when I go
14:00 - and try to make a connection.
14:02 - Right now, if I
go to the browser
14:04 - and try to access
local host, that's
14:08 - my server running locally on
this computer at port 3,000,
14:11 - I should see whatever the server
has and is able to give to me.
14:14 - So I hit Enter, and
it can't get anything,
14:17 - because there's nothing there.
14:18 - I need to give it
my index.html file.
14:21 - And the way that
I can do that is
14:23 - by using Express to
host static files.
14:26 - So what do I mean by that?
14:27 - First, let me type
it into the code.
14:29 - So I'm going to say app.use.
14:31 - I want to use express.static.
14:33 - And then what I need to give
here is a directory name--
14:37 - or I could give one file.
14:39 - I might be able
to say index.html.
14:40 - But better yet, I want
to make up a folder name.
14:43 - Now, I'm going to
call it public,
14:45 - because I'm going
to remind myself
14:46 - that anything that I
put in that directory
14:49 - is publicly accessible
from the URL,
14:53 - in this case which is
localhost colon 3,000.
14:55 - So I'm going to go
back to my finder,
14:57 - and I'm going to make a folder,
I'm going to call it public,
15:00 - and I'm going to put
index.html in there.
15:03 - So now, when I run this--
15:05 - I'm going to re-run my server
by saying node index.js.
15:10 - It's listening at port 3,000.
15:14 - I go back and I
refresh this page--
15:21 - it doesn't say
cannot get anymore.
15:22 - The problem is,
there's nothing there.
15:24 - Well, it might be nice for
me to actually add something
15:27 - to my index.html file.
15:30 - I could say Data Selfie
App, add a paragraph, Hello.
15:37 - And I could start
putting JavaScript
15:39 - in there and other things
that we've seen so far.
15:41 - And now, I'm going
to hit Refresh.
15:44 - And there we go.
15:46 - I am serving up my web page.
15:48 - Now, I haven't gotten that far.
15:49 - I'm not saying we've
gotten this far.
15:50 - But I'm really just
setting up the foundation.
15:52 - I'm building the
foundation for the house--
15:54 - this project that
I'm going to build.
15:56 - What have I done so far?
15:58 - I've installed Node.
15:59 - I've set up a project
with NPM init,
16:02 - configuring a package.json.
16:04 - I've written a little bit of
code inside an index.js file,
16:08 - using the Node module Express
to create a web server.
16:11 - And that web server has one
job-- it has only one job--
16:14 - it's to serve up any files
that are in the public folder.
16:18 - And the only file I have
there right now is index.html.
16:21 - If I wanted to be really
accurate about what's going on,
16:24 - I would type in index.html
into the address bar itself.
16:29 - And now when I hit Enter,
you'll see it's the same page.
16:32 - But I didn't have to
do that originally,
16:33 - because if you ever do a blank
path, index.html is assumed.
16:38 - If you're able to reproduce
exactly what I have here, just
16:40 - a basic Node server
with Express,
16:42 - serving up a single
index.html file,
16:45 - you're ready to move on
to the next video, where
16:47 - I'm going to start actually
adding some features
16:49 - and trying some
different ideas out.
16:50 - Before you go there, let me
suggest a couple exercises
16:53 - you could try.
16:53 - Number one, maybe try to
host more than one page.
16:56 - What if you have index.html
and something else dot html.
17:00 - Or two different directories--
how could you do that?
17:02 - Could you have subdirectories
inside of public,
17:04 - and how would you access them?
17:05 - Do you put links so you could go
back and forth between the two?
17:08 - That would be a good
thing to try out.
17:09 - I'll put some solutions
to that in the links
17:12 - to that the video's
description as well.
17:13 - You might also go
and grab something
17:15 - that you've made
previously, maybe
17:16 - one of the examples
from module 1,
17:19 - and put that JavaScript
and that HTML content
17:22 - in index.html Itself,
and see what happens.
17:24 - Because I have plenty
to do with the server,
17:28 - the whole thing
about this project
17:29 - is saving data to a database.
17:31 - And that's what I going
to do in the next video.
17:33 - I'm going to start to add
more stuff to the HTML page.
17:36 - And what I want to
demonstrate to you
17:38 - is how to use the
geolocation API.
17:40 - So if it's available, you have
to opt-in and give permission,
17:43 - you can capture, with this
API, the latitude and longitude
17:47 - of where your
computer or device is.
17:50 - Whether it's accurate or not
is an interesting question.
17:53 - And then, later, I'm
going to show you
17:55 - how to send that to the
server so that the server can
17:57 - save that along with a
timestamp and maybe keep track
18:00 - of your location over time.
18:01 - That's something that I'm
going to show you how to do.
18:03 - All right.
18:03 - So I'll see you the
next video, where we'll
18:04 - look at the geolocation API.
18:06 - [DING]
18:07 - [MUSIC PLAYING]

Cleaned transcript:

[DING] Welcome back. It is time for Module 2. And in this module, I'm going to do something quite exciting and quite different than what I've done so far. Everything that I did in the previous example, it was all clientside JavaScript drawing the map, graphing the global temperature data, loading images and displaying them on the web page with the fetch function, all of that was done with clientside JavaScript, meaning JavaScript written into the HTML page itself. But there are a lot of things that you, that I, that the people of the world who were doing this programming thing want to do, working with data and APIs, that you cannot do with clientside JavaScript only. So in this module, I'm going to show you serverside programming. And I'm going to use a JavaScript runtime called Node.js which can be used for serverside programming. Now, the details of what serverside programming is, and how I'm going to do it, that's to come. But this project that I'm going to build, the fundamental thing, the reason why we need node for this project is for data persistence. I want to gather some data, and save it, and get it back later. And this is not something that you can easily do without writing a server. You could certainly use somebody else's server. There's something called database as a service, where I could just be like, hey, you've got a server, can I sign up for you? And take my data, and then I'll ask for it back later. But I'm actually going to create a server that's going to run on this laptop here, and I'm in a save the date data here. Now, at some point, I'm also going to need to show you how to get that server to run somewhere else besides your own laptop, but that's a place to start. The project that I'm going to build in this module is called the Data Selfie App. And the Data Selfie App is an example project by Joey Lee who's designer and researcher. He teaches a class right here at NYU at ITP called Quant Humanists. It's about data and self tracking. And so Joey has graciously given permission to use, to build on top of his examples, as part of this series. In this video's description I'll link to Joey's website so you can learn more about his work, as well as to the original GitHub repo for the data selfie app so you can find all of the code for the things that I'm going to show you. Now, in order follow along with the code that I'm going to write and demonstrate as I build this project, you're going to need to download and install some stuff that you might not have on your computer already. It's going to be confusing, because you might be using Windows, or you might be using Mac, and I'm using a Mac. And oi, what are we going to solve this? All right. So let me give you a list of the things you need and help you with some resources to find those things. Number 1, you need to install Node.js. That should be as easy as going to nodejs.org and following the installation instructions for your operating system. I do also have an entire video about downloading and installing node, and what note is, that I'll also link you to if you want more background there. You're also going to want some kind of console application, some commandline terminal thing that you can open up and type commands in to run Node stuff on your computer. I'm using iTerm, which is an alternative to the Mac's built in terminal application. On Windows I hear people like PowerShell, just the builtin command thing oh, and Git BASH. Git BASH is possibly a good one too. I actually have a whole workflow series where I go through all of these bits and pieces of everything you need to have your environment set up to follow along with what I'm doing. So you can also just go and find that series, watch that, and come back here. But all you need is download Node, you need some kind of shell command prompt thing, and you need a code editor. If you've got that, you're ready to go. So before I get to coding and building the actual project, let's just talk for a second about, what is Node? Now, if you go to the Node website, it says right there, Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine. That is a mouthful. Let's try to understand what that is. What do I mean by runtime? So normally, when I'm typing JavaScript, I'm exevuting that stuff in the browser. The JavaScript has no meaning without the browser itself. Suddenly, with Node, I can start to write JavaScript without the browser. It's its own runtime. The code runs on your computer. Let's look at what that means more practically speaking. So here I am with my commandline access where I can type in commands. So hopefully you're here. You've downloaded your terminal app thingy, you've got it going, and you've installed Node. If I now type in node, node, and hit Enter, suddenly I have entered the JavaScript runtime. This is very similar to the developers console in the browser. But here, I can start typing in some JavaScript stuff, like const x = 5, and then I could say x + 2, and it's going to give me the number 7. So we can see this is a runtime a place where I can write JavaScript and run JavaScript. Now, this is not typically how you would use Node. Typically, I wouldn't just be writing a lot of code linebyline in my terminal itself. I would write a bunch of JavaScript code in a JavaScript file, then execute it through a Node command. So let's see how that works. So I actually have a file called index.js. It's just a JavaScript file. And I could put something in like console.log('hello');. And I could say const x = 5. And I could say something like console.log(x + 2);, and let's see what happens. So now, if I go back to the terminal, I can type node index.js. And this is me saying, hey, execute the code linebyline, in the order that it's written, of what you find in that file. So I'm going to do that right now. And there we go. So what is it that I want to write and that index.js file. Clearly, console logging a bunch of things, I can see that it works. But why am I using Node? The reason why I'm using Node is that I want to create a server. A server is an application that runs and listens. And what it listens for is it listens for requests people who want to connect to that server. So this server is going to be the central repository of the data of my application. All of the different clients, whether it's you on your phone, or soandso on their laptop, or somebody else on their internet connected toaster, can make a request to the server and grab some data. So I could come back over here and just start writing I could Google "write a web server with Node.js," and I could find some code, and I could start typing in there, and I could create that server. It's going to open up a connection and start listening. However, one of the ways that is very typical when working with Node is to find a pacakge a Node package that has some of the functionality you're looking for, install that package it's like a library or an addon and make use of that functionality. And the Node package that I want to use to create my web server is something called Express. Express is a pretty minimal and very simple framework for making web servers. And it has the core functionality you need without a lot of bells and whistles. So we can kind of get up and running with it really quickly. So now, we have a node. We can write JavaScript code in a thing and run it with Node. So in theory, we could write some JavaScript code to make a server, but we didn't need this package. How do we have access to the Node package Express in our Node code? NPM stands for Node Package Manager, and it's the thing that manages all of our Node packages for us. You don't have to install that. In fact, when you installed Node, you also installed NPM Node Package Manager. If I want to use NPM with this project, I need package.json. The good news for you is that dot. json in package.json. You know what json is, because we've worked with it. We have gotten data in JSON format JavaScript Object Notation, before in previous examples. package.json is a special kind of file. It's basically the configuration file for your project. This is where all the meta information about our project what Node packages we're using, what our project is called and by project, I mean web application all of that's going to be in package.json. To create the package.json file, I could, if I want, just make a file called package.json and type some stuff into it. But if I want to not make any mistakes, if I want to be sure, there's a nice commandline utility from NPM itself that will generate the file for me. And that is npm init. So as long as I've got Node installed, if I'm in the project directory I can type npm in it, and it's going to walk me through what I need in the Package.json not So one thing is I need a name. It's guessing, because the folder's called module2, module two, that sounds good. I'll just hit Enter. Version number I'm not going to worry about the version number. This is important if I'm building an open source library and I need to really keep track of version numbers. But I'm just kind of tinkering around here. Description let me add something. This is the Data Selfie App by Joey Lee. Entry point, index.js Yes that's the file that I want to put my code in that I want to run when I want to run this project. Test command I'm not worrying about testing right now. I'll refer you to some other videos about that if you're interested. Gut repository I'm not worrying about that. Keywords example, data selfie, something like that. I think I could give some keywords separated by commas. Author this is a tricky one, because I'm basing my work off of Joey's work. I'll put my name in there for right now, and I'll make sure that everything is well documented of where it's coming from as I go. License I'm going to put in MIT. That's a very permissive license. It basically lets you do just about anything you want with the code. I'm using the same license that Joey is using. And then, look at this, it's giving me this is the information that is going in that package.json file. Does it look OK to me? It does, I'm going to type yes. So if I go back to my code editor, I can see. There we go. Here's that package.json file. All the information that's needed is in there. It's formatted correctly. I'm ready to go. But I'm not ready to go, right? The reason I was doing this in the first place is that I'm trying to get to the point where I can install the Node package Express, the web framework I want to use for creating my server. The reason why I need this package.json file is in this file is where I need to make reference to Express. I need to say Express is a package that I'm using for my project. But I don't want to edit this file directly, even though I could. What I want to do, instead, is say npm install express. Say npm install express, and run that. Once, I've run this, two things are going to happen. Number one is we're going to see Express popup in package.json as one of the dependencies. It is a dependency of this project. My project depends on the existence of the Express Node package, which I intend to use quite a bit in this code. The other thing that's happened is I have a new folder called node_modules. And when I look into this folder, oh, my God, there's so much stuff in here. So this is the thing oh, look, there's express. I only said express. NPM installed express. I didn't say inherits or fresh or httperrors. It is so happens that most Node packages depend on other packages, and the Node Package Manager is smart enough to know that if I'm saying install express, it's going to go grab everything else that it needs as well. So the nice thing is we don't have to manage that folder. Everything that we need will be in there. But don't be freaked out if you see all sorts of other things in there that you do think that you installed. They're coming along for the ride with Express itself. I'm finally ready to write some code. So in order to have access to the express package, the Node package Express, I need to use require. So I can say const express = require('express'). This is basically like an import statement. Hey, you know that Node package I installed called Express? Give me that thing, and put it all in this variable called express. The reason why I want to do that is I want to create a web application. I'm going to call it app. And the way I'm going to create that is just call the express function. So that whole library, the whole Node package Express, basically comes in as a big function that I can just execute and put in a variable. The first thing that I want to do in a web server, if I think back to my silly little diagram here's the web server, it's listening, listening, anybody want to connect to me is I need to start listening. So now, I can listen. I could just actually say app.listen(). And when I want to start listening, I need to also specify something known as a port. Look at this, it's even telling me right here in Node what I need. The port is a unique number. It's like a numeric address at which I'm going to listen. So you could have different servers running different ports, and there are specific ports reserved for certain things. But that's beyond the scope of what I'm doing right here. I'm just going to pick some port that I know won't be used by something else, like 3,000, and then I'm going to give a callback function here which basically is just the callback that happen once the server is listening. So I'll use my arrow syntax and just say console.log to say listening at 3,000. There are nicer ways I could clean this up, but this is the idea require Express, create the app, and listen at a port. And there we go. I'm listening. I could connect. Should we connect? So I'd be very happy to accept connections at port 3,000 right now, but I need to figure out why am I here, what am I listening for, what kind of information an I going to send back. So let's make a list of some of the things I want the server to do. And it's pretty simple for this app. Number 1, I want to serve web pages. In other words, right now I'm just a server running locally on this laptop at port 3,000, but if I were to deploy my server to my website thingy url.com, and people type that address into their browser, I want to send them the HTML and JavaScript and CSS and all that stuff that I have made for them to be able to see in their browser. So to simplify that let's just serve one page index.html. So when I open up my web browser or whatever content is in there, I should see. So that's number one. There's other things that I want to do, of course, like I want to receive information and save it in the database. And then I want to be to send information from the database back out. But I'm going to get to that stuff as I go further and build this project. Let's actually just finish off this first part by serving a web page. So these are all the files I have already. I have package.json. We know about that. That's the configuration of my project. index.js, that's my server code. It gets confusing, because I'm going to have server code and client code. We got to keep this stuff straight. I have node_modules. That's all of the stuff all the Node packages that I've installed. I don't need to look in there. There's also this packagelock file. It's kind of an important file. It's autogenerated. You don't need to touch it. But it's basically keeping track of the dependencies and versions of your packages. We can leave that aside. index.html that's the file that I want to see when I go and try to make a connection. Right now, if I go to the browser and try to access local host, that's my server running locally on this computer at port 3,000, I should see whatever the server has and is able to give to me. So I hit Enter, and it can't get anything, because there's nothing there. I need to give it my index.html file. And the way that I can do that is by using Express to host static files. So what do I mean by that? First, let me type it into the code. So I'm going to say app.use. I want to use express.static. And then what I need to give here is a directory name or I could give one file. I might be able to say index.html. But better yet, I want to make up a folder name. Now, I'm going to call it public, because I'm going to remind myself that anything that I put in that directory is publicly accessible from the URL, in this case which is localhost colon 3,000. So I'm going to go back to my finder, and I'm going to make a folder, I'm going to call it public, and I'm going to put index.html in there. So now, when I run this I'm going to rerun my server by saying node index.js. It's listening at port 3,000. I go back and I refresh this page it doesn't say cannot get anymore. The problem is, there's nothing there. Well, it might be nice for me to actually add something to my index.html file. I could say Data Selfie App, add a paragraph, Hello. And I could start putting JavaScript in there and other things that we've seen so far. And now, I'm going to hit Refresh. And there we go. I am serving up my web page. Now, I haven't gotten that far. I'm not saying we've gotten this far. But I'm really just setting up the foundation. I'm building the foundation for the house this project that I'm going to build. What have I done so far? I've installed Node. I've set up a project with NPM init, configuring a package.json. I've written a little bit of code inside an index.js file, using the Node module Express to create a web server. And that web server has one job it has only one job it's to serve up any files that are in the public folder. And the only file I have there right now is index.html. If I wanted to be really accurate about what's going on, I would type in index.html into the address bar itself. And now when I hit Enter, you'll see it's the same page. But I didn't have to do that originally, because if you ever do a blank path, index.html is assumed. If you're able to reproduce exactly what I have here, just a basic Node server with Express, serving up a single index.html file, you're ready to move on to the next video, where I'm going to start actually adding some features and trying some different ideas out. Before you go there, let me suggest a couple exercises you could try. Number one, maybe try to host more than one page. What if you have index.html and something else dot html. Or two different directories how could you do that? Could you have subdirectories inside of public, and how would you access them? Do you put links so you could go back and forth between the two? That would be a good thing to try out. I'll put some solutions to that in the links to that the video's description as well. You might also go and grab something that you've made previously, maybe one of the examples from module 1, and put that JavaScript and that HTML content in index.html Itself, and see what happens. Because I have plenty to do with the server, the whole thing about this project is saving data to a database. And that's what I going to do in the next video. I'm going to start to add more stuff to the HTML page. And what I want to demonstrate to you is how to use the geolocation API. So if it's available, you have to optin and give permission, you can capture, with this API, the latitude and longitude of where your computer or device is. Whether it's accurate or not is an interesting question. And then, later, I'm going to show you how to send that to the server so that the server can save that along with a timestamp and maybe keep track of your location over time. That's something that I'm going to show you how to do. All right. So I'll see you the next video, where we'll look at the geolocation API. [DING] [MUSIC PLAYING]
