With timestamps:

00:00 - This video could have
been in chapter one
00:03 - of the Nature of Code playlist.
00:05 - Because it is about a specific
piece of vector mathematics,
00:08 - the dot product, and a concept
known as scalar projection.
00:13 - However, it is here in this
section of the Nature of Code,
00:17 - because I eventually want
to make this example.
00:21 - This is crowd path following,
a demonstration of one
00:25 - of the combined behaviors
in Craig Reynolds' Steering
00:28 - Behaviors for Autonomous
Characters paper from 1999.
00:31 - And in order to
make this example,
00:33 - I, first, just need to work out
path following itself with one
00:36 - little following the path.
00:37 - And in order to figure
out path following,
00:40 - I need to understand the
concept of scalar projection.
00:44 - Scalar projection is actually a
foundational concept for three
00:47 - of these behaviors,
containment, wall following,
00:50 - and path following.
00:51 - I hope I can eventually make
a video on each of those.
00:54 - They're all super
interesting on their own,
00:55 - but I'm going to focus just
on the concept of scale
00:57 - of projection and lead
it into path following.
01:02 - So what is scalar projection
in the first place?
01:04 - Scalar projection is
a concept that applies
01:07 - when you have two vectors.
01:11 - Here, I have vectors A and B.
01:14 - Projections are things I've
covered before, and, in fact,
01:18 - I did a whole video
on how to render
01:20 - 3D geometry in a 2D canvas
with the concept of projection.
01:24 - And here, we've actually
got a simpler scenario.
01:26 - Let's say, there's a
light source up here.
01:30 - You could imagine a shadow
being cast of the vector A
01:34 - onto the vector B.
This blue vector
01:39 - is then the vector
projection of A onto B.
01:43 - It's magnitude or its length
is the scalar projection.
01:49 - I may not have drawn this
perfectly, by the way,
01:51 - but this is a right angle here.
01:53 - This vector here pointing
up is known as the normal.
01:57 - It's the normal
to this vector B.
01:59 - It's perpendicular
at this point,
02:01 - so I'll get to why I want
this value in a moment.
02:05 - But let's just say,
right now, I want
02:06 - to know the scalar projection.
02:08 - What is the length
of this vector?
02:10 - How do I calculate that?
02:11 - Let's say, I make
this the angle theta.
02:15 - Well, if you recall
from chapter three,
02:18 - and trigonometry, I could
say that cosine of theta
02:23 - equals adjacent.
02:25 - Oh, look, the scalar projection.
02:27 - I'll call that SP divided by the
magnitude or length of vector
02:32 - A. I don't recall, whether I
specifically mentioned this,
02:35 - but you can refer to
a vectors magnitude
02:37 - with these two pipe or line--
02:40 - what do you call these?
02:41 - These little symbols
next to the A.
02:44 - Another way of writing
this is scalar projection
02:48 - equals the magnitude of vector
A times cosine of that angle.
02:55 - Do you remember?
02:56 - It was just about 45
minutes ago, but hopefully,
03:00 - just a few minutes for you.
03:01 - Because I've been trying to
figure this out for a while.
03:04 - I mentioned the product.
03:06 - Why did I mention the product?
03:08 - Again, what am I
trying to solve for?
03:10 - The scalar projection.
03:12 - I know the magnitude of vector
A. I made that vector up.
03:15 - I know the-- oh, I
don't know that angle.
03:18 - I'd have to figure
out that angle.
03:20 - How do I figure out the angle
between vector A and vector B?
03:24 - A ha, the dot product is
a mathematical operation
03:29 - between two vectors typically
referenced with a dot,
03:34 - and it's the key to unlocking
the angle between two vectors.
03:38 - Now, I could possibly go
and make a whole video
03:42 - just about how to calculate
the angle between two vectors,
03:45 - and key five actually has an
angle between function, which
03:49 - will just give you the angle
between two vectors using
03:51 - the dot product.
03:52 - But for our purposes
here, I think
03:55 - the thing that's most useful
is for me to define how it
03:58 - is you calculate the product.
04:00 - The product of A dot
B equals the magnitude
04:05 - of vector A times the
magnitude of vector B times
04:11 - cosine of the angle
between the vectors.
04:14 - I just want to note that
this looks really, really
04:18 - similar to this right here.
04:21 - The only thing that's different
is that the magnitude of B
04:25 - is missing from here.
04:26 - Well, that might just
may be a unit vector.
04:30 - Then its length
would be 1, so this
04:32 - is the dot product between A
and B, if B is a unit vector.
04:38 - The scalar projection equals
A dot B if B is a unit vector.
04:48 - Well, any vector, I could
just call normalize on.
04:53 - But, aren't you just
going in circles here?
04:55 - Because, now, if I calculate
this product between A and B,
04:58 - I mean, I've got the
magnitude of both vectors.
05:00 - But I don't have that angle.
05:02 - Well, guess what?
05:03 - There's an entire other
formula to calculate
05:07 - the dot product of two vectors
that doesn't involve the angle.
05:10 - It's equivalent you will
get the same result as this,
05:13 - but you don't need the angle.
05:15 - Therefore, you could
solve for the angle.
05:17 - Let me divide A and B
into its components.
05:24 - I can represent the
vector A as A sub X,
05:28 - sub Y. I can represent the
vector B as B sub X, B sub
05:32 - Y. The dot product
of A dot B also
05:35 - equals the X component of A
times the X component of B
05:42 - plus the Y component of A
times the Y component of B.
05:45 - And if I started with
these two vectors,
05:47 - I could just
normalize B and then
05:50 - compute the product this way.
05:51 - And I have the
scalar projection.
05:53 - If you want a little
exercise to yourself,
05:55 - you could also now
work out the math
05:57 - for how you would calculate
the angle between two vectors
06:00 - by knowing that these
two equations are
06:03 - equal to each other.
06:07 - Again, you don't need
to, because there's
06:08 - the P5 angle between
function that does that math.
06:11 - But you could.
06:12 - Let's see what this
looks like in code,
06:14 - so I'm going to start with
something that closely mirrors
06:17 - what I've drawn over here.
06:19 - I have two vectors,
A and B. And I've
06:21 - picked somewhat arbitrary
numbers for them,
06:23 - but I'm trying to match
the visual to what
06:25 - I have on the board
06:27 - I'm drawing each
vector as a line
06:29 - that emanates from an
arbitrary position, 100, 200,
06:32 - in the canvas.
06:33 - Now, what I'd like to do
is draw this blue vector.
06:36 - So first, let me try calculating
the scalar projection.
06:41 - So I've written a function,
the scalar projection
06:44 - of two vectors, A
and B, which equals
06:46 - the vector A dot the vector
B, if B is a unit vector.
06:51 - So I can say B dot normalize
return A dot B. Let's just take
06:58 - a look at this for a moment.
06:59 - It's A dot, dot B. We actually
have a function named dot.
07:03 - We get to write the dot
and have the word dot.
07:05 - It's so much dot.
07:07 - Now, let me call that
function with A and B. Now,
07:11 - I have to be careful here,
because this function is
07:15 - altering the vector B.
It's normalizing it,
07:19 - so is it better for me to make
a copy of it in the function
07:23 - or to call it with
making a copy here?
07:25 - I think I'll make a
copy in the function.
07:28 - Because that way,
whoever is calling
07:30 - the function doesn't
have to worry.
07:31 - The function will protect
you from yourself,
07:37 - so I'll write it
out as one line.
07:39 - Copy the vector, normalize
it, and then return A dot
07:42 - the copy of B.
07:43 - So that's the scalar
projection, but I kind of
07:47 - want to see just visually,
this vector projection.
07:51 - So what do I need to do?
07:52 - I could just take, oh, that
vector B, make a copy of it,
07:56 - and then said it's magnitude
to the scalar projection.
07:58 - Maybe I should
make that function
08:00 - be the vector projection.
08:07 - In other words, take the
vector B. Make a copy of it.
08:11 - Normalize it.
08:12 - Calculate A dot B to get this
scalar projection length,
08:17 - and then take that normalized
B. And set its length to that.
08:20 - Now, I've got this blue vector.
08:22 - Let's see if we got it right.
08:30 - Calculate the vector
projection of A and B,
08:33 - And then draw that,
as a line, emanating
08:36 - from that same position.
08:38 - Oh, let me make it blue.
08:39 - Drum roll, please.
08:41 - [DRUM ROLL]
08:43 - I see the blue line there,
but I've got an error.
08:46 - Oh, whoops.
08:47 - I forgot that I left this
function call down here.
08:50 - I kind of want to double
the thickness of everything
08:52 - to make it a little
easier for you to see.
08:55 - Let me also add a little point
here at the end, which I think
08:58 - would be useful to see.
09:00 - I'll show you why in a minute.
09:08 - There we go.
09:09 - I've tweaked it a little bit
and drawn all the elements
09:12 - I want to draw.
09:13 - If I have this vector
A and vector B,
09:16 - I can now find all of the points
that make up this full triangle
09:23 - here, this point that
I'm calling pause,
09:25 - the endpoint of this
vector, and now, this
09:28 - point here, which is the
endpoint of the vector
09:31 - projection.
09:32 - Why do I care so
much about this?
09:35 - I'm so afraid to erase this,
because it's all this stuff
09:38 - that I've worked out.
09:39 - But I need to draw
from a blank slate.
09:46 - In the next video, I want
to look at path following.
09:51 - Let's say, this line is my path.
09:53 - Of course, I could
eventually have a curved path
09:55 - or a bunch of line segments.
09:57 - But just for simplicity, let's
think of the path as a line.
10:00 - Then I've got a vehicle.
10:01 - Maybe that vehicle is
over here, and it's
10:04 - traveling with this velocity.
10:06 - Well, the path following
steering behavior
10:08 - is a multi-step process.
10:10 - Step number one is predict a
future location of the vehicle.
10:16 - I could say that it's over here.
10:17 - After a certain amount of
time, moving at this velocity,
10:20 - the vehicle will be over here.
10:22 - Then look at the distance
between this vehicle
10:25 - and the path.
10:27 - How do I define the distance
between this point and a line,
10:31 - right?
10:32 - Have you ever spent
the time, searching
10:33 - online for what is the distance
between a point and a line?
10:36 - I've done this so many times.
10:38 - Fortunately, I think I, finally,
have it for the most part,
10:40 - and the key is everything
we just worked out
10:42 - with scalar projection.
10:44 - Let me show you why.
10:46 - Well, I could consider
this path to be a vector.
10:49 - Call it B. I could
consider making
10:53 - a vector that points from
the beginning to this path
10:55 - to this point.
10:56 - Call that A.
10:58 - Well, the definition
of the distance
11:00 - between a point and a line
is find the normal vector
11:05 - at that line that
intersects the point, right?
11:08 - The normal being this
perpendicular vector,
11:11 - and at the end of
that normal vector
11:13 - is this point, which lies at the
scalar projection of A onto B.
11:21 - So any time I want to find
the distance between a point
11:25 - and a path, or a wall, or
an obstacle, in some sense,
11:30 - depending what the obstacle
is, I could look at this scalar
11:33 - projection to find the distance,
the normal from that surface
11:37 - to a particular point.
11:39 - So coming back to
here, let's say,
11:41 - I'm not starting with
vector A. Instead,
11:44 - I'm starting with this point,
and let me make that point,
11:48 - where the mouse is.
11:51 - Vector A is there for the mouse
point minus that position.
11:57 - I'm going to call B
path, and then I'm
12:01 - going to calculate the vector
A, right here, and draw.
12:07 - Now, I don't know if I
need to do anything more.
12:10 - Let's see if this
all just still works.
12:14 - Cannot read property
X of undefined.
12:17 - Well, I forgot I
used B everywhere.
12:18 - Let me change that to path.
12:21 - Oh, and this has to be dot.
12:23 - I always forget to write the
subtract for some reason.
12:29 - Look at this.
12:29 - As I move the mouse
around, I'm always
12:32 - finding the corresponding
point on the line,
12:34 - even if I go back here.
12:35 - I'm extending the line past.
12:37 - Oh, my goodness, so the idea of
the line segment is irrelevant.
12:42 - It will always find the scalar
projection to that vector.
12:45 - I want to just comment
out some of the things
12:47 - that I'm drawing to just get
back to the sort of scenario
12:50 - that we're going to see in
the next video for a moment.
12:55 - So now, we can see
without drawing
12:57 - all that extra
debugging information,
12:59 - I'm just finding
that projection point
13:01 - onto a line from another point
in the two dimensional space.
13:05 - OK, I hope you found
this useful and helped
13:08 - you understand the
concepts of both scalar
13:10 - projection and the dot product.
13:12 - There's, obviously,
missing details there,
13:14 - and I will add a bunch of links
to the video's description that
13:16 - go through both of these
mathematical concepts.
13:19 - But the code that
I've written here
13:21 - is everything that we need to
implement containment, wall
13:25 - following, and path following.
13:27 - So I'm going to go ahead,
and in the next video,
13:29 - work on path following.

Cleaned transcript:

This video could have been in chapter one of the Nature of Code playlist. Because it is about a specific piece of vector mathematics, the dot product, and a concept known as scalar projection. However, it is here in this section of the Nature of Code, because I eventually want to make this example. This is crowd path following, a demonstration of one of the combined behaviors in Craig Reynolds' Steering Behaviors for Autonomous Characters paper from 1999. And in order to make this example, I, first, just need to work out path following itself with one little following the path. And in order to figure out path following, I need to understand the concept of scalar projection. Scalar projection is actually a foundational concept for three of these behaviors, containment, wall following, and path following. I hope I can eventually make a video on each of those. They're all super interesting on their own, but I'm going to focus just on the concept of scale of projection and lead it into path following. So what is scalar projection in the first place? Scalar projection is a concept that applies when you have two vectors. Here, I have vectors A and B. Projections are things I've covered before, and, in fact, I did a whole video on how to render 3D geometry in a 2D canvas with the concept of projection. And here, we've actually got a simpler scenario. Let's say, there's a light source up here. You could imagine a shadow being cast of the vector A onto the vector B. This blue vector is then the vector projection of A onto B. It's magnitude or its length is the scalar projection. I may not have drawn this perfectly, by the way, but this is a right angle here. This vector here pointing up is known as the normal. It's the normal to this vector B. It's perpendicular at this point, so I'll get to why I want this value in a moment. But let's just say, right now, I want to know the scalar projection. What is the length of this vector? How do I calculate that? Let's say, I make this the angle theta. Well, if you recall from chapter three, and trigonometry, I could say that cosine of theta equals adjacent. Oh, look, the scalar projection. I'll call that SP divided by the magnitude or length of vector A. I don't recall, whether I specifically mentioned this, but you can refer to a vectors magnitude with these two pipe or line what do you call these? These little symbols next to the A. Another way of writing this is scalar projection equals the magnitude of vector A times cosine of that angle. Do you remember? It was just about 45 minutes ago, but hopefully, just a few minutes for you. Because I've been trying to figure this out for a while. I mentioned the product. Why did I mention the product? Again, what am I trying to solve for? The scalar projection. I know the magnitude of vector A. I made that vector up. I know the oh, I don't know that angle. I'd have to figure out that angle. How do I figure out the angle between vector A and vector B? A ha, the dot product is a mathematical operation between two vectors typically referenced with a dot, and it's the key to unlocking the angle between two vectors. Now, I could possibly go and make a whole video just about how to calculate the angle between two vectors, and key five actually has an angle between function, which will just give you the angle between two vectors using the dot product. But for our purposes here, I think the thing that's most useful is for me to define how it is you calculate the product. The product of A dot B equals the magnitude of vector A times the magnitude of vector B times cosine of the angle between the vectors. I just want to note that this looks really, really similar to this right here. The only thing that's different is that the magnitude of B is missing from here. Well, that might just may be a unit vector. Then its length would be 1, so this is the dot product between A and B, if B is a unit vector. The scalar projection equals A dot B if B is a unit vector. Well, any vector, I could just call normalize on. But, aren't you just going in circles here? Because, now, if I calculate this product between A and B, I mean, I've got the magnitude of both vectors. But I don't have that angle. Well, guess what? There's an entire other formula to calculate the dot product of two vectors that doesn't involve the angle. It's equivalent you will get the same result as this, but you don't need the angle. Therefore, you could solve for the angle. Let me divide A and B into its components. I can represent the vector A as A sub X, sub Y. I can represent the vector B as B sub X, B sub Y. The dot product of A dot B also equals the X component of A times the X component of B plus the Y component of A times the Y component of B. And if I started with these two vectors, I could just normalize B and then compute the product this way. And I have the scalar projection. If you want a little exercise to yourself, you could also now work out the math for how you would calculate the angle between two vectors by knowing that these two equations are equal to each other. Again, you don't need to, because there's the P5 angle between function that does that math. But you could. Let's see what this looks like in code, so I'm going to start with something that closely mirrors what I've drawn over here. I have two vectors, A and B. And I've picked somewhat arbitrary numbers for them, but I'm trying to match the visual to what I have on the board I'm drawing each vector as a line that emanates from an arbitrary position, 100, 200, in the canvas. Now, what I'd like to do is draw this blue vector. So first, let me try calculating the scalar projection. So I've written a function, the scalar projection of two vectors, A and B, which equals the vector A dot the vector B, if B is a unit vector. So I can say B dot normalize return A dot B. Let's just take a look at this for a moment. It's A dot, dot B. We actually have a function named dot. We get to write the dot and have the word dot. It's so much dot. Now, let me call that function with A and B. Now, I have to be careful here, because this function is altering the vector B. It's normalizing it, so is it better for me to make a copy of it in the function or to call it with making a copy here? I think I'll make a copy in the function. Because that way, whoever is calling the function doesn't have to worry. The function will protect you from yourself, so I'll write it out as one line. Copy the vector, normalize it, and then return A dot the copy of B. So that's the scalar projection, but I kind of want to see just visually, this vector projection. So what do I need to do? I could just take, oh, that vector B, make a copy of it, and then said it's magnitude to the scalar projection. Maybe I should make that function be the vector projection. In other words, take the vector B. Make a copy of it. Normalize it. Calculate A dot B to get this scalar projection length, and then take that normalized B. And set its length to that. Now, I've got this blue vector. Let's see if we got it right. Calculate the vector projection of A and B, And then draw that, as a line, emanating from that same position. Oh, let me make it blue. Drum roll, please. [DRUM ROLL] I see the blue line there, but I've got an error. Oh, whoops. I forgot that I left this function call down here. I kind of want to double the thickness of everything to make it a little easier for you to see. Let me also add a little point here at the end, which I think would be useful to see. I'll show you why in a minute. There we go. I've tweaked it a little bit and drawn all the elements I want to draw. If I have this vector A and vector B, I can now find all of the points that make up this full triangle here, this point that I'm calling pause, the endpoint of this vector, and now, this point here, which is the endpoint of the vector projection. Why do I care so much about this? I'm so afraid to erase this, because it's all this stuff that I've worked out. But I need to draw from a blank slate. In the next video, I want to look at path following. Let's say, this line is my path. Of course, I could eventually have a curved path or a bunch of line segments. But just for simplicity, let's think of the path as a line. Then I've got a vehicle. Maybe that vehicle is over here, and it's traveling with this velocity. Well, the path following steering behavior is a multistep process. Step number one is predict a future location of the vehicle. I could say that it's over here. After a certain amount of time, moving at this velocity, the vehicle will be over here. Then look at the distance between this vehicle and the path. How do I define the distance between this point and a line, right? Have you ever spent the time, searching online for what is the distance between a point and a line? I've done this so many times. Fortunately, I think I, finally, have it for the most part, and the key is everything we just worked out with scalar projection. Let me show you why. Well, I could consider this path to be a vector. Call it B. I could consider making a vector that points from the beginning to this path to this point. Call that A. Well, the definition of the distance between a point and a line is find the normal vector at that line that intersects the point, right? The normal being this perpendicular vector, and at the end of that normal vector is this point, which lies at the scalar projection of A onto B. So any time I want to find the distance between a point and a path, or a wall, or an obstacle, in some sense, depending what the obstacle is, I could look at this scalar projection to find the distance, the normal from that surface to a particular point. So coming back to here, let's say, I'm not starting with vector A. Instead, I'm starting with this point, and let me make that point, where the mouse is. Vector A is there for the mouse point minus that position. I'm going to call B path, and then I'm going to calculate the vector A, right here, and draw. Now, I don't know if I need to do anything more. Let's see if this all just still works. Cannot read property X of undefined. Well, I forgot I used B everywhere. Let me change that to path. Oh, and this has to be dot. I always forget to write the subtract for some reason. Look at this. As I move the mouse around, I'm always finding the corresponding point on the line, even if I go back here. I'm extending the line past. Oh, my goodness, so the idea of the line segment is irrelevant. It will always find the scalar projection to that vector. I want to just comment out some of the things that I'm drawing to just get back to the sort of scenario that we're going to see in the next video for a moment. So now, we can see without drawing all that extra debugging information, I'm just finding that projection point onto a line from another point in the two dimensional space. OK, I hope you found this useful and helped you understand the concepts of both scalar projection and the dot product. There's, obviously, missing details there, and I will add a bunch of links to the video's description that go through both of these mathematical concepts. But the code that I've written here is everything that we need to implement containment, wall following, and path following. So I'm going to go ahead, and in the next video, work on path following.
