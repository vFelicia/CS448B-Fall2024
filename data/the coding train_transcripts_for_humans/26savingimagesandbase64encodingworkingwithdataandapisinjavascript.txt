With timestamps:

00:00 - I am back to finish off the
data selfie app with one more
00:04 - feature, and that feature
is adding something else
00:07 - to the database-- namely,
an image from the webcam.
00:10 - So this is the
perfect opportunity,
00:11 - I'm very excited about this,
to use the p5.js library
00:15 - in this project.
00:16 - So actually it's kind of
strange this particular course,
00:19 - this playlist of videos,
isn't using p5.js,
00:21 - because it's a thing I
use basically everything
00:23 - all over my channel.
00:25 - But I wanted to take
this opportunity
00:26 - to take a little break
from that and then
00:28 - piece it back in where it can
make the biggest contribution.
00:31 - The p5.js Library was
created by Lauren McCarthy
00:34 - and is maintained by the
Processing Foundation.
00:36 - The Processing Foundation
is a non-profit mission
00:38 - to promote software literacy
within the visual arts
00:40 - and visual literacy within
technology related fields
00:43 - and to make those
fields accessible
00:45 - to diverse communities.
00:46 - So I'm going to use
that library to open up
00:49 - a connection to the webcam
to display the webcam's
00:52 - image on an HTML5
JavaScript canvas,
00:54 - and then to take the
data from that image
00:57 - and pass it to the database.
00:59 - So this is another
feature that I'm
01:00 - going to add here in the
client side JavaScript.
01:03 - The client side JavaScript
is doing the geolocation
01:06 - and it is now going to
call the p5 function Create
01:10 - Video to create that video.
01:13 - That video is going to be
viewed in the client's browser.
01:16 - But then when the Submit button
is, the data from that image
01:19 - will get sent to the server
and stored into the database.
01:22 - There are a variety of ways that
I can use the p5.js library.
01:25 - In fact, there's a
whole p5.js online web
01:27 - editor for making p5.js sketches
right there in the browser.
01:30 - But what I want to do here
is integrate p5.js library
01:33 - into this project that I'm
building that involves node
01:35 - and a bunch of other
pieces that you've been
01:37 - watching me do along the way.
01:38 - So the way that I'm
going to do that
01:40 - is navigate over to the
Getting Started page for p5.js.
01:43 - I'm going to look for this link
called p5.js CDN, or Content
01:47 - Delivery Network.
01:48 - A content delivery network
is a hosting service
01:50 - that will deliver you content.
01:52 - And the content that I
want is the p5.js library.
01:55 - So I could click here
and then I can grab--
01:58 - you can see as of the time this
writing the current version
02:00 - is 0.8.0.
02:02 - What I want to use is p5.min.js.
02:05 - When you see a
JavaScript library,
02:07 - there's often what's known
as a minified version
02:09 - and a non-minified version.
02:11 - So if I wanted to really peek
in and read the source code
02:13 - myself, I would get
the bigger p5.js file.
02:16 - But if I'm just
using the library,
02:17 - it's going to be a
smaller file size
02:19 - and make things
kind of snappier.
02:21 - So let me go and I can actually
just go here under Copy,
02:24 - and I can do Copy Script
Tag is what I want.
02:27 - And then if I come
here into my HTML file,
02:30 - I can go into the header.
02:31 - And right above title I'm
just going to paste it in.
02:34 - That you give me the script
tag for the p5.js library.
02:37 - Now interestingly
enough, you might
02:39 - notice on this page there's
a bunch of things listed.
02:41 - There's like p5.dom,
p5.sound, p5.dom.min.
02:44 - Well I already covered
the minified thing.
02:46 - But the p5 library has several
different components to it.
02:50 - So the core library that
you're pretty much always going
02:53 - to want is just p5.min.js.
02:56 - I also want to use
the dom library.
02:58 - That's where the functionality
for using the webcam is.
03:02 - And if I wanted to
integrate-- there's
03:03 - other functionality in there
too but that's the functionality
03:05 - I'm looking for.
03:06 - If I wanted to have
sound in my project
03:08 - I could also look at
the p5 sound library.
03:10 - And I'll link to
numerous p5.js tutorials
03:12 - that I have on this channel
in the video's description
03:14 - if you want to check those out.
03:15 - All right, so let me grab this.
03:17 - Copy Script Tag,
and there we go.
03:22 - Before we get started
with p5, I just
03:24 - want to point out that I've
added a little bit of code
03:26 - since the last video.
03:27 - Something very simple, but just
to make it a bit more usable.
03:30 - I added two links on the web
page between this data entry
03:33 - page, where I'm hitting
submit and adding a latitude
03:36 - longitude, and
then the list page
03:38 - which shows the things
that are in the database.
03:40 - I also changed these
to paragraph elements
03:42 - from divs so that
there's a little line
03:44 - break in between each.
03:45 - So now I can go back and forth
easily between these two pages
03:48 - and also see the entries from
the database with a little bit
03:52 - of formatting.
03:52 - Plenty still to do for
you, a creative person
03:54 - and possibly watching
these videos,
03:56 - thinking about how you want
to design this yourself.
03:58 - But a few small improvements so
that I can work with this a bit
04:00 - more easily in this
particular tutorial.
04:03 - Now I can finally
write some p5.js code.
04:05 - First thing that I'm going
to want to add to my sketch
04:07 - is a function called setup.
04:08 - This is a little bit of
an oddity about the way
04:10 - that p5 works that's a little
different than other JavaScript
04:13 - libraries.
04:13 - But p5 looks for a
function called setup
04:16 - in your global namespace,
meaning it's just right there,
04:19 - in this case in my script tag.
04:20 - Setup is the equivalent of
window on load or j queries'
04:24 - ready function.
04:26 - It's the function
that gets executed
04:28 - when everything-- when
the web page is loaded
04:31 - and everything is ready to go.
04:32 - So one thing that
I could do is I
04:33 - could take all of this
other stuff that I have--
04:37 - why not-- and just put
it in the setup function.
04:40 - So let's make sure that
adding the setup function,
04:42 - adding the p5 library and adding
the setup function still works.
04:45 - So I'll go to the
browser, and I'm just
04:47 - going to refresh my page.
04:49 - And it's taking a little
while to get the latitude
04:52 - and longitude.
04:53 - There it got it.
04:54 - You'll see that, whoa, there's
this blank space there.
04:57 - Why is there a
blank space there?
04:59 - Well, p5 will automatically
add a canvas to your page.
05:03 - So actually most of
p5 is set up to draw.
05:07 - So if I were to go
to the end of setup
05:09 - here and add
background 255, 0, 0--
05:16 - that's a red background--
and hit refresh,
05:18 - you can see, oh, look
there's a red canvas.
05:20 - Now the truth is
I don't actually
05:21 - need a canvas for this project.
05:23 - So I'm actually going to add a
line of code called no canvas.
05:28 - And then the thing
that I do need
05:30 - is I need that image
from the webcam.
05:32 - So I'm going to say const
video = createCapture(Video).
05:37 - And this just reminded me
that I've made a mistake
05:41 - and I said create video
here, which is a p5 function.
05:45 - That's for a local video
file like a movie file
05:48 - that you might load.
05:49 - So actually what I
want is create capture,
05:52 - I'm capturing from the
default video source
05:56 - of the computer, the webcam.
05:58 - Going back and
refreshing the page.
06:01 - First of all, it's asking me
if I want to allow this web
06:05 - application to use the camera.
06:06 - And this is very important.
06:08 - You can't just have a web
page open up somebody's webcam
06:11 - automatically.
06:11 - This is a huge security issue.
06:13 - And so there are lots of
privacy and security questions
06:16 - that you want to be
thoughtful about when
06:18 - building applications that
access a user's webcam.
06:22 - But here for what we're sort of
tinkering around and learning
06:24 - and practicing with I'm
happy with just allowing it.
06:27 - So I'm going to say Allow.
06:29 - And you can see
there it is, oh look.
06:31 - You can see that I am in
front of a green screen.
06:33 - There's me.
06:34 - Now it's quite large.
06:35 - I don't need it to be
that large on the page.
06:37 - So I'm going to say-- this
is part of p5 as well now--
06:40 - video size, and let's
just make it 320 by 240.
06:43 - So now I have a smaller video
image that's right there.
06:46 - Perfect.
06:47 - So what I want is when I hit
Submit, I'm going to go--
06:51 - I'm going to say happy--
06:54 - I want that image to also
get sent to the server.
06:57 - How do I do that?
06:58 - I'm realizing that the
code would probably
07:00 - flow a little nicer
if I move this
07:02 - to the beginning of
the setup function.
07:04 - Because ultimately
what I want to do
07:06 - is right here, when the
user presses the button,
07:10 - I'm grabbing the latitude
longitude and mood
07:12 - and posting that to the server.
07:14 - So I want to add one
more thing, which
07:16 - is the data for the image.
07:18 - Base64 encoding is a method
to take some binary data--
07:22 - in this case, the image,
all the colors of the pixels
07:25 - of the image--
07:26 - and convert it to ASCII data,
meaning a string of text.
07:30 - This isn't doing anything
to compress the image.
07:32 - It's just repackaging
the same data
07:34 - in a format that's incredibly
convenient to pass around.
07:38 - In other words, I need to send
the webcam image from here
07:41 - to the server.
07:42 - And a really easy way to do that
is by sending a string of text
07:45 - to the server.
07:46 - If I can turn the image
into a string of text then
07:48 - I've got a nice way to
post it to the server.
07:50 - In JavaScript the HTML canvas
API includes a function called
07:54 - toDataURL(), which
takes a canvas,
07:57 - presumably with pixels
of information in it,
08:00 - and converts that to the
base64 encoding of that image.
08:04 - In p5, the video element has
a canvas associated with it.
08:07 - So I can say constant image
= video.canvas.toDataURL().
08:15 - So this is taking
the video's canvas,
08:18 - converting it to
base64, and putting it
08:20 - in this variable image.
08:21 - And maybe what I'll
call this, I'll
08:23 - call this image 64
so I know that this
08:26 - is the base64
encoding of the image.
08:28 - The only thing is this
won't actually work.
08:30 - The video's canvas
element is not there
08:33 - by default. I need to
alert p5 to the fact
08:35 - that I want to use a canvas.
08:37 - And to do that I say
video.loadPixels.
08:41 - This means take
that video element,
08:44 - load the pixels onto a
canvas so that I can then
08:47 - convert it to base64.
08:49 - I can add that image then
as a property to the data
08:51 - that I'm posting.
08:52 - I can then go to the server.
08:54 - And if you recall, the post
to the API of the server
08:57 - just takes the body of that
request, the post request,
09:01 - and puts it right
into the database.
09:02 - So it's already done.
09:03 - It should already be there.
09:05 - Let's give this a try.
09:06 - I'm going to refresh the page.
09:09 - I had mango for
breakfast this morning,
09:11 - so I'm going to type in mango
and give myself a big OK sign.
09:17 - And that image, we
can see it's there.
09:18 - Look at all of this
text that's in there.
09:21 - This is the base64 encoding
of that raw pixel data.
09:25 - And now if I go
to the database, I
09:27 - can see that the latest entry
has that base64 encoding.
09:32 - Now we need to have a talk.
09:33 - This perhaps isn't
the best idea.
09:35 - Do I really want to
include all of the data
09:38 - for the image in the database.
09:40 - Is this going to be
the most efficient way
09:41 - to store this information?
09:43 - Almost definitely not.
09:45 - In fact, a more
traditional strategy
09:47 - might be to save that
image data to a file
09:51 - and then store the path to that
file in the database itself.
09:54 - But in terms of this quick
and dirty prototyping
09:56 - that I'm doing, this is a nice
way to get started with this.
09:59 - And I'll leave
that as an exercise
10:01 - to the viewer and
something that I
10:02 - will include as supplemental
code with this video--
10:05 - how to actually store this
to a file on the server
10:08 - and then the path in
the database itself.
10:10 - The only thing left
for me to do now
10:12 - is to add the image
to the page that
10:14 - lists all of the content
from the database itself.
10:17 - Now, I'm [INAUDIBLE]
what's in the database.
10:19 - You can see here this is
the most recent entry.
10:22 - And it includes the base64
image right there as a property
10:26 - that it's reading
from the database.
10:28 - So this is actually--
10:29 - I already have the
template for doing this.
10:31 - I just can head on over to
the HTML, the JavaScript
10:34 - code for creating all
those dom elements
10:36 - and I can make another one.
10:37 - Like I can say image =
document.createElement('img')
10:43 - for image.
10:44 - Then, unlike putting--
10:46 - I'm not putting text
content into that image.
10:48 - Instead I want to put the
base64 encoded data itself.
10:52 - And I can do that with
the source attribute.
10:54 - So I can say image.src = image--
11:00 - oh, no, sorry,
equals, what is it?
11:02 - item.image64.
11:06 - So that's the
base64 encoded data
11:09 - in the database item in the
image element source attribute.
11:14 - And then add that to the page
as well, right here, image.
11:19 - And if I go back and refresh,
we're getting errors.
11:22 - We see oh look, there's
that image there.
11:25 - But we're getting errors
because not all of the entries
11:27 - have images
associated with them.
11:29 - So one way--
11:30 - I could do some
like error handling
11:32 - and see if there
is an image or not.
11:33 - But let's actually just wipe
the database clean and make
11:37 - a few more entries
and see if this works.
11:39 - I'm going to and manually
delete the database like this,
11:43 - go back to the Enter page,
and make a bunch of entries.
11:48 - [MUSIC PLAYING]
11:52 - All right, I made four entries.
11:53 - There they are.
11:54 - You can see that they're
all entered in the database.
11:55 - I can go to the code and
see, like, look, here's
11:57 - the database file.
11:58 - Here's everything in there.
12:00 - And you go over to
list and see, here
12:01 - are my entries
into the database.
12:03 - And there they are.
12:04 - I now have the finished
data selfie app.
12:08 - This wraps up the data
selfie app module.
12:11 - I built the project now.
12:12 - It's a crude prototype, but a
working version of the idea.
12:16 - So I'm going to
add one more video.
12:17 - I'm going to come back
in a separate video
12:18 - and kind of offer you some
ideas, some exercise ideas,
12:21 - of things that you might
do to continue this.
12:23 - But also I'm going to show
you a few cleanup things
12:25 - that I think are worthwhile.
12:26 - For example, taking the
JavaScript out of the HTML file
12:30 - and putting it in a separate
file, where you would create--
12:32 - how you would create
a CSS file if you
12:34 - wanted to start thinking
about layout and design
12:36 - for your application.
12:37 - It's beyond the scope of what
I want to do in this series,
12:39 - but I'll at least give
you some pointers on how
12:41 - to get started with that.
12:42 - [MUSIC PLAYING]

Cleaned transcript:

I am back to finish off the data selfie app with one more feature, and that feature is adding something else to the database namely, an image from the webcam. So this is the perfect opportunity, I'm very excited about this, to use the p5.js library in this project. So actually it's kind of strange this particular course, this playlist of videos, isn't using p5.js, because it's a thing I use basically everything all over my channel. But I wanted to take this opportunity to take a little break from that and then piece it back in where it can make the biggest contribution. The p5.js Library was created by Lauren McCarthy and is maintained by the Processing Foundation. The Processing Foundation is a nonprofit mission to promote software literacy within the visual arts and visual literacy within technology related fields and to make those fields accessible to diverse communities. So I'm going to use that library to open up a connection to the webcam to display the webcam's image on an HTML5 JavaScript canvas, and then to take the data from that image and pass it to the database. So this is another feature that I'm going to add here in the client side JavaScript. The client side JavaScript is doing the geolocation and it is now going to call the p5 function Create Video to create that video. That video is going to be viewed in the client's browser. But then when the Submit button is, the data from that image will get sent to the server and stored into the database. There are a variety of ways that I can use the p5.js library. In fact, there's a whole p5.js online web editor for making p5.js sketches right there in the browser. But what I want to do here is integrate p5.js library into this project that I'm building that involves node and a bunch of other pieces that you've been watching me do along the way. So the way that I'm going to do that is navigate over to the Getting Started page for p5.js. I'm going to look for this link called p5.js CDN, or Content Delivery Network. A content delivery network is a hosting service that will deliver you content. And the content that I want is the p5.js library. So I could click here and then I can grab you can see as of the time this writing the current version is 0.8.0. What I want to use is p5.min.js. When you see a JavaScript library, there's often what's known as a minified version and a nonminified version. So if I wanted to really peek in and read the source code myself, I would get the bigger p5.js file. But if I'm just using the library, it's going to be a smaller file size and make things kind of snappier. So let me go and I can actually just go here under Copy, and I can do Copy Script Tag is what I want. And then if I come here into my HTML file, I can go into the header. And right above title I'm just going to paste it in. That you give me the script tag for the p5.js library. Now interestingly enough, you might notice on this page there's a bunch of things listed. There's like p5.dom, p5.sound, p5.dom.min. Well I already covered the minified thing. But the p5 library has several different components to it. So the core library that you're pretty much always going to want is just p5.min.js. I also want to use the dom library. That's where the functionality for using the webcam is. And if I wanted to integrate there's other functionality in there too but that's the functionality I'm looking for. If I wanted to have sound in my project I could also look at the p5 sound library. And I'll link to numerous p5.js tutorials that I have on this channel in the video's description if you want to check those out. All right, so let me grab this. Copy Script Tag, and there we go. Before we get started with p5, I just want to point out that I've added a little bit of code since the last video. Something very simple, but just to make it a bit more usable. I added two links on the web page between this data entry page, where I'm hitting submit and adding a latitude longitude, and then the list page which shows the things that are in the database. I also changed these to paragraph elements from divs so that there's a little line break in between each. So now I can go back and forth easily between these two pages and also see the entries from the database with a little bit of formatting. Plenty still to do for you, a creative person and possibly watching these videos, thinking about how you want to design this yourself. But a few small improvements so that I can work with this a bit more easily in this particular tutorial. Now I can finally write some p5.js code. First thing that I'm going to want to add to my sketch is a function called setup. This is a little bit of an oddity about the way that p5 works that's a little different than other JavaScript libraries. But p5 looks for a function called setup in your global namespace, meaning it's just right there, in this case in my script tag. Setup is the equivalent of window on load or j queries' ready function. It's the function that gets executed when everything when the web page is loaded and everything is ready to go. So one thing that I could do is I could take all of this other stuff that I have why not and just put it in the setup function. So let's make sure that adding the setup function, adding the p5 library and adding the setup function still works. So I'll go to the browser, and I'm just going to refresh my page. And it's taking a little while to get the latitude and longitude. There it got it. You'll see that, whoa, there's this blank space there. Why is there a blank space there? Well, p5 will automatically add a canvas to your page. So actually most of p5 is set up to draw. So if I were to go to the end of setup here and add background 255, 0, 0 that's a red background and hit refresh, you can see, oh, look there's a red canvas. Now the truth is I don't actually need a canvas for this project. So I'm actually going to add a line of code called no canvas. And then the thing that I do need is I need that image from the webcam. So I'm going to say const video = createCapture(Video). And this just reminded me that I've made a mistake and I said create video here, which is a p5 function. That's for a local video file like a movie file that you might load. So actually what I want is create capture, I'm capturing from the default video source of the computer, the webcam. Going back and refreshing the page. First of all, it's asking me if I want to allow this web application to use the camera. And this is very important. You can't just have a web page open up somebody's webcam automatically. This is a huge security issue. And so there are lots of privacy and security questions that you want to be thoughtful about when building applications that access a user's webcam. But here for what we're sort of tinkering around and learning and practicing with I'm happy with just allowing it. So I'm going to say Allow. And you can see there it is, oh look. You can see that I am in front of a green screen. There's me. Now it's quite large. I don't need it to be that large on the page. So I'm going to say this is part of p5 as well now video size, and let's just make it 320 by 240. So now I have a smaller video image that's right there. Perfect. So what I want is when I hit Submit, I'm going to go I'm going to say happy I want that image to also get sent to the server. How do I do that? I'm realizing that the code would probably flow a little nicer if I move this to the beginning of the setup function. Because ultimately what I want to do is right here, when the user presses the button, I'm grabbing the latitude longitude and mood and posting that to the server. So I want to add one more thing, which is the data for the image. Base64 encoding is a method to take some binary data in this case, the image, all the colors of the pixels of the image and convert it to ASCII data, meaning a string of text. This isn't doing anything to compress the image. It's just repackaging the same data in a format that's incredibly convenient to pass around. In other words, I need to send the webcam image from here to the server. And a really easy way to do that is by sending a string of text to the server. If I can turn the image into a string of text then I've got a nice way to post it to the server. In JavaScript the HTML canvas API includes a function called toDataURL(), which takes a canvas, presumably with pixels of information in it, and converts that to the base64 encoding of that image. In p5, the video element has a canvas associated with it. So I can say constant image = video.canvas.toDataURL(). So this is taking the video's canvas, converting it to base64, and putting it in this variable image. And maybe what I'll call this, I'll call this image 64 so I know that this is the base64 encoding of the image. The only thing is this won't actually work. The video's canvas element is not there by default. I need to alert p5 to the fact that I want to use a canvas. And to do that I say video.loadPixels. This means take that video element, load the pixels onto a canvas so that I can then convert it to base64. I can add that image then as a property to the data that I'm posting. I can then go to the server. And if you recall, the post to the API of the server just takes the body of that request, the post request, and puts it right into the database. So it's already done. It should already be there. Let's give this a try. I'm going to refresh the page. I had mango for breakfast this morning, so I'm going to type in mango and give myself a big OK sign. And that image, we can see it's there. Look at all of this text that's in there. This is the base64 encoding of that raw pixel data. And now if I go to the database, I can see that the latest entry has that base64 encoding. Now we need to have a talk. This perhaps isn't the best idea. Do I really want to include all of the data for the image in the database. Is this going to be the most efficient way to store this information? Almost definitely not. In fact, a more traditional strategy might be to save that image data to a file and then store the path to that file in the database itself. But in terms of this quick and dirty prototyping that I'm doing, this is a nice way to get started with this. And I'll leave that as an exercise to the viewer and something that I will include as supplemental code with this video how to actually store this to a file on the server and then the path in the database itself. The only thing left for me to do now is to add the image to the page that lists all of the content from the database itself. Now, I'm [INAUDIBLE] what's in the database. You can see here this is the most recent entry. And it includes the base64 image right there as a property that it's reading from the database. So this is actually I already have the template for doing this. I just can head on over to the HTML, the JavaScript code for creating all those dom elements and I can make another one. Like I can say image = document.createElement('img') for image. Then, unlike putting I'm not putting text content into that image. Instead I want to put the base64 encoded data itself. And I can do that with the source attribute. So I can say image.src = image oh, no, sorry, equals, what is it? item.image64. So that's the base64 encoded data in the database item in the image element source attribute. And then add that to the page as well, right here, image. And if I go back and refresh, we're getting errors. We see oh look, there's that image there. But we're getting errors because not all of the entries have images associated with them. So one way I could do some like error handling and see if there is an image or not. But let's actually just wipe the database clean and make a few more entries and see if this works. I'm going to and manually delete the database like this, go back to the Enter page, and make a bunch of entries. [MUSIC PLAYING] All right, I made four entries. There they are. You can see that they're all entered in the database. I can go to the code and see, like, look, here's the database file. Here's everything in there. And you go over to list and see, here are my entries into the database. And there they are. I now have the finished data selfie app. This wraps up the data selfie app module. I built the project now. It's a crude prototype, but a working version of the idea. So I'm going to add one more video. I'm going to come back in a separate video and kind of offer you some ideas, some exercise ideas, of things that you might do to continue this. But also I'm going to show you a few cleanup things that I think are worthwhile. For example, taking the JavaScript out of the HTML file and putting it in a separate file, where you would create how you would create a CSS file if you wanted to start thinking about layout and design for your application. It's beyond the scope of what I want to do in this series, but I'll at least give you some pointers on how to get started with that. [MUSIC PLAYING]
