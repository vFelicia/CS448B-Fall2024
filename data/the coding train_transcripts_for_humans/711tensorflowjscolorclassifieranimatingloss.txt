With timestamps:

00:00 - all right videos 7260 three of my making
00:06 - your own color classifier with previous
00:12 - video previously on making your own
00:14 - color classifier intensified yes I
00:15 - worked in the model dot fit function so
00:18 - I'm fitting the model according to my
00:20 - training data with these options now
00:22 - what I want to do is I want to be able
00:25 - to basically see an animation graphing
00:28 - the loss function while it's doing the
00:30 - training so right now I just get a
00:31 - report when it's done so there's a few
00:33 - steps that I want to take to do this the
00:35 - first step that I want to do is I
00:36 - actually want to move this into a
00:38 - separate function so I'm gonna just
00:40 - write a function I'm gonna just make it
00:42 - a global function called train nice
00:45 - train and I'm gonna put model that fit
00:50 - there then I'm gonna call train here
00:53 - so that's everyone and let's let's uh oh
00:55 - and I'm gonna put the options here in
00:57 - this function and I'm gonna just go back
00:59 - to 2d box and I'm gonna run this Oh X is
01:03 - not defined oh boy I did all sorts of
01:05 - goofy stuff here so let's let's make
01:07 - these global variables X's and Y's I'm
01:11 - gonna need to do again just could use
01:13 - some refactoring but now it's training
01:15 - and to me box done oh we can see the
01:20 - loss functions great but still I don't
01:21 - have an animation so what I want to do
01:23 - is I want this to be an asynchronous
01:26 - function I want this function to be an
01:30 - asynchronous function to happen and let
01:32 - things keep going and guess what I have
01:34 - a video series about I do that with the
01:37 - keyword async and then if I say 8th if I
01:45 - make a function async I can use the
01:47 - keyword await meaning this function will
01:50 - wait for model that fit to finish before
01:53 - it's done and it returns a promise by
01:55 - the way so I can actually take this now
01:59 - I could say return a weight and then I
02:05 - can put my then up here right because
02:08 - it's going to return that same a promise
02:12 - but it will happen
02:14 - a synchronously meaning it will the code
02:17 - up here will be allowed to move on while
02:20 - this is happening in the background in
02:21 - theory but I've got to do more here it's
02:27 - the same behavior hmm so why is it the
02:30 - same behavior well I've set myself up
02:32 - for success but I don't have success yet
02:34 - and the reason why is that tensorflow
02:38 - TAS he's using something called WebGL to
02:42 - do all of the calculations and it's
02:44 - ticking over basically your animation or
02:47 - drawing capabilities while you're
02:48 - fitting the model however tensorflow j/s
02:52 - comes with a function called next frame
02:57 - which returns a promise that resolves
03:00 - when a request animation frame has been
03:03 - completed it's simply a sugar method so
03:06 - that users can do the following a weight
03:08 - TF next frame so what I can actually do
03:11 - is kind of trigger the animation letting
03:14 - drew the draw loop go the p5.js
03:16 - draw loop is just using
03:17 - requestanimationframe itself by adding a
03:21 - weight TF next frame somehow in this
03:24 - async function so where do I add it so I
03:28 - have an idea I'm going to add something
03:32 - to this called callbacks so and I gotta
03:37 - spell callbacks correctly for this to
03:38 - work so let's go back to look at model
03:41 - dot fit model dot fit and we can see
03:46 - that oh look at this this is new as of
03:51 - like Alissa I was looking in the wrong
03:53 - place but last night when I was looking
03:54 - this up it wasn't actually here um these
03:59 - are optional callbacks that can be
04:01 - called during training for example on
04:03 - train begin on train end on epoch begin
04:07 - on epoch end on back begin on batch end
04:09 - so let's just let's add on train begin
04:13 - on train end just for real quick so I'm
04:16 - gonna say I'm gonna have a callback on
04:17 - train begin and this needs to be a
04:21 - function it's gonna my life's going to
04:23 - be easier if I just use this yes
04:26 - 6
04:27 - arrow notation and then I'm gonna have
04:32 - another callback called
04:34 - on train end and I'm gonna say training
04:39 - complete so I'm gonna just add these two
04:42 - callbacks so these are functions that
04:44 - are going to be executed during the
04:46 - training process let's see if I did that
04:49 - right training start and try to complete
04:54 - and I see the results wonderful let's
04:56 - try a different callback
04:59 - let's try on epoch end and on epoch and
05:06 - well it takes two arguments I'm looking
05:10 - over here on this computer because I
05:11 - have some notes there which I don't
05:13 - typically do but it's the documentation
05:16 - here doesn't actually if we look here
05:18 - it's not telling you what the arguments
05:21 - are for these callback functions but I I
05:24 - looked them up and so the arguments are
05:28 - the number of epochs so I can say num
05:30 - and then a log which is like a report so
05:34 - I'm gonna say num and logs and then what
05:38 - I can do so what I'm gonna do is I'm
05:40 - gonna do console I'm gonna write a
05:41 - function here with multiple lines of
05:44 - code I'm gonna say console.log epoch num
05:50 - and then I'm gonna say console log loss
05:54 - a logs dot loss loss so there's a
06:01 - property of loss that's in that logs
06:03 - object so these are the arguments do
06:05 - every time it finishes an epoch so I'm
06:08 - gonna now give it 10 epochs let's see
06:10 - what happens if I add that call back all
06:15 - right
06:17 - epoch zero epoch one epoch to epoch
06:20 - three epoch four look at that so I am
06:23 - now getting I'm getting a call back for
06:25 - every one of those individual epochs and
06:27 - we can see the loss going down and then
06:29 - of course we see all of the lost values
06:30 - when we're done if I want to draw
06:33 - something at the end of each epoch I
06:37 - want to allow the animation to proceed
06:39 - I can go and use that function TF next
06:44 - frame its whoops TF next frame which
06:52 - allows me to which allows me to sort of
06:55 - unlock the drawing thread and and let
07:00 - draw update itself so I'm gonna go and
07:02 - I'm gonna say a weight TF next frame
07:07 - right here at the end of each epoch and
07:11 - then this is also an async function so
07:15 - this now has to be an async function as
07:18 - well is that gonna allow me to do that I
07:22 - think so yes
07:23 - okay let's try this oh yeah look it's
07:33 - drawing now let's actually add an
07:37 - animation so let's do something like
07:39 - stroke 255 stroke wait for line a frame
07:45 - count modulus with 0 frame count modulus
07:49 - with height so I just want to draw a
07:51 - line that is that is moving across so
07:56 - for example if I don't bother calling
07:57 - this train function at all we can see
08:01 - here I have an animation that's running
08:05 - okay so now let's call the train
08:09 - function and see if that animation runs
08:12 - waiting waiting waiting waiting waiting
08:14 - waiting let's get to epoch zero I'll
08:17 - look at it so the animation is going but
08:20 - it's only able to draw once at the end
08:22 - of each epoch so while it's training if
08:26 - I want to let it unlock that drawing
08:29 - more often maybe a different callback
08:31 - would work better and in fact one
08:33 - something that tension voce s is doing
08:35 - behind the scenes and modeled fit sorry
08:42 - is in the callbacks right it's actually
08:47 - batching the data so I have 5600 data
08:51 - points it's actually
08:53 - running the gradient descent algorithm
08:55 - in batches that's what stochastic
08:57 - gradient descent means and there are
08:59 - also on batch begin on batch ends and I
09:01 - could sort of specify the batch size I'm
09:03 - letting it use a default so what I
09:05 - actually think that I want to use it's
09:07 - gonna be able to it does a batch pretty
09:09 - quickly a full epoch takes quite a bit
09:10 - of time so I can actually do on batch
09:13 - end what I'm going to do here is I'm
09:15 - gonna add one more callback on batch end
09:19 - and I'm gonna make this the async one so
09:25 - it also has a batch num number and a
09:27 - number of logs so it's the like epoch
09:30 - end but I'm gonna put the await next
09:35 - frame in there this one no longer sort
09:37 - needs to be an async function so this
09:40 - should unlock the animation much more
09:42 - quickly because it lets it draw every at
09:44 - the end of every batch so let's go to
09:47 - this now and we should see yeah look at
09:50 - this so the animation is running just
09:52 - fine and we should see now it got a
09:57 - little glitch there when I got to the
09:58 - end of epoch 0 let's see if it does that
10:01 - again no I don't know what so the first
10:03 - epoch they must have had to do some
10:04 - copying onto the GPU I'm not sure why
10:06 - but you can see that animation is no
10:08 - longer studying stuttering from epoch to
10:11 - epoch ok so now we have it trading the
10:16 - model with an animation going let's at
10:20 - least so what I really should do is
10:21 - graph the loss function and by the way I
10:23 - can look at the loss function at the end
10:25 - of each batch so I can get a much more
10:27 - quickly updated loss function so I'm
10:29 - gonna leave that as an exercise to the
10:30 - viewer but I'm gonna just what I'm gonna
10:33 - do is I'm gonna say let loss P and I'm
10:40 - gonna create a paragraph element again
10:41 - I'm not really being thoughtful about
10:43 - design and interface here loss so what
10:47 - I'm going to do here is it's just going
10:49 - to have a paragraph element that says
10:51 - loss in it and what I'm going to do is
10:55 - instead of logging the loss to the
10:58 - console I'm gonna say loss P dot HTML
11:02 - and this is using the p5.js dom library
11:04 - I give you this native JavaScript or
11:05 - jQuery
11:06 - going to put this loss information into
11:09 - that paragraph element so now I have an
11:14 - animation going and then as soon as I
11:17 - get to the end of the first epoch I have
11:18 - to talk for a bit here I see the loss
11:21 - function so now I'm training and getting
11:24 - a report of the loss function so for you
11:26 - I'm in the next video what I'm gonna add
11:28 - is inference or prediction I'm gonna
11:30 - allow the user with sliders to specify a
11:32 - color and have the label returned to me
11:35 - and what I would say to you is an
11:37 - exercise and see what happens if you can
11:38 - query the loss function with the batches
11:41 - and graph it over time and so you see
11:44 - that will be an exercise to you as the
11:46 - viewer and I'm gonna publish a github
11:48 - repo with this finished project so you
11:51 - can look for the Co this is very
11:52 - confusing but you can look for the code
11:54 - it'll be linked in the description in
11:55 - two different places there'll be the
11:57 - code that matches exactly this video and
11:59 - then there will be the code that's in a
12:01 - separate github repo that and somewhere
12:03 - in the future people will be
12:04 - contributing to that we'll have maybe
12:05 - the graph and other kind of designing
12:07 - things that people have from the
12:08 - community have added okay great so one
12:11 - more video to go I think and and then
12:14 - some other ancillary ones that I
12:15 - forgotten about but one more core video
12:17 - to this tutorial series which is adding
12:20 - the prediction and I will see you if
12:22 - you're really gonna watch all of these I
12:24 - will see you in the next video you can
12:26 - check the video description for the next
12:27 - video link
12:30 - [Music]
12:37 - you

Cleaned transcript:

all right videos 7260 three of my making your own color classifier with previous video previously on making your own color classifier intensified yes I worked in the model dot fit function so I'm fitting the model according to my training data with these options now what I want to do is I want to be able to basically see an animation graphing the loss function while it's doing the training so right now I just get a report when it's done so there's a few steps that I want to take to do this the first step that I want to do is I actually want to move this into a separate function so I'm gonna just write a function I'm gonna just make it a global function called train nice train and I'm gonna put model that fit there then I'm gonna call train here so that's everyone and let's let's uh oh and I'm gonna put the options here in this function and I'm gonna just go back to 2d box and I'm gonna run this Oh X is not defined oh boy I did all sorts of goofy stuff here so let's let's make these global variables X's and Y's I'm gonna need to do again just could use some refactoring but now it's training and to me box done oh we can see the loss functions great but still I don't have an animation so what I want to do is I want this to be an asynchronous function I want this function to be an asynchronous function to happen and let things keep going and guess what I have a video series about I do that with the keyword async and then if I say 8th if I make a function async I can use the keyword await meaning this function will wait for model that fit to finish before it's done and it returns a promise by the way so I can actually take this now I could say return a weight and then I can put my then up here right because it's going to return that same a promise but it will happen a synchronously meaning it will the code up here will be allowed to move on while this is happening in the background in theory but I've got to do more here it's the same behavior hmm so why is it the same behavior well I've set myself up for success but I don't have success yet and the reason why is that tensorflow TAS he's using something called WebGL to do all of the calculations and it's ticking over basically your animation or drawing capabilities while you're fitting the model however tensorflow j/s comes with a function called next frame which returns a promise that resolves when a request animation frame has been completed it's simply a sugar method so that users can do the following a weight TF next frame so what I can actually do is kind of trigger the animation letting drew the draw loop go the p5.js draw loop is just using requestanimationframe itself by adding a weight TF next frame somehow in this async function so where do I add it so I have an idea I'm going to add something to this called callbacks so and I gotta spell callbacks correctly for this to work so let's go back to look at model dot fit model dot fit and we can see that oh look at this this is new as of like Alissa I was looking in the wrong place but last night when I was looking this up it wasn't actually here um these are optional callbacks that can be called during training for example on train begin on train end on epoch begin on epoch end on back begin on batch end so let's just let's add on train begin on train end just for real quick so I'm gonna say I'm gonna have a callback on train begin and this needs to be a function it's gonna my life's going to be easier if I just use this yes 6 arrow notation and then I'm gonna have another callback called on train end and I'm gonna say training complete so I'm gonna just add these two callbacks so these are functions that are going to be executed during the training process let's see if I did that right training start and try to complete and I see the results wonderful let's try a different callback let's try on epoch end and on epoch and well it takes two arguments I'm looking over here on this computer because I have some notes there which I don't typically do but it's the documentation here doesn't actually if we look here it's not telling you what the arguments are for these callback functions but I I looked them up and so the arguments are the number of epochs so I can say num and then a log which is like a report so I'm gonna say num and logs and then what I can do so what I'm gonna do is I'm gonna do console I'm gonna write a function here with multiple lines of code I'm gonna say console.log epoch num and then I'm gonna say console log loss a logs dot loss loss so there's a property of loss that's in that logs object so these are the arguments do every time it finishes an epoch so I'm gonna now give it 10 epochs let's see what happens if I add that call back all right epoch zero epoch one epoch to epoch three epoch four look at that so I am now getting I'm getting a call back for every one of those individual epochs and we can see the loss going down and then of course we see all of the lost values when we're done if I want to draw something at the end of each epoch I want to allow the animation to proceed I can go and use that function TF next frame its whoops TF next frame which allows me to which allows me to sort of unlock the drawing thread and and let draw update itself so I'm gonna go and I'm gonna say a weight TF next frame right here at the end of each epoch and then this is also an async function so this now has to be an async function as well is that gonna allow me to do that I think so yes okay let's try this oh yeah look it's drawing now let's actually add an animation so let's do something like stroke 255 stroke wait for line a frame count modulus with 0 frame count modulus with height so I just want to draw a line that is that is moving across so for example if I don't bother calling this train function at all we can see here I have an animation that's running okay so now let's call the train function and see if that animation runs waiting waiting waiting waiting waiting waiting let's get to epoch zero I'll look at it so the animation is going but it's only able to draw once at the end of each epoch so while it's training if I want to let it unlock that drawing more often maybe a different callback would work better and in fact one something that tension voce s is doing behind the scenes and modeled fit sorry is in the callbacks right it's actually batching the data so I have 5600 data points it's actually running the gradient descent algorithm in batches that's what stochastic gradient descent means and there are also on batch begin on batch ends and I could sort of specify the batch size I'm letting it use a default so what I actually think that I want to use it's gonna be able to it does a batch pretty quickly a full epoch takes quite a bit of time so I can actually do on batch end what I'm going to do here is I'm gonna add one more callback on batch end and I'm gonna make this the async one so it also has a batch num number and a number of logs so it's the like epoch end but I'm gonna put the await next frame in there this one no longer sort needs to be an async function so this should unlock the animation much more quickly because it lets it draw every at the end of every batch so let's go to this now and we should see yeah look at this so the animation is running just fine and we should see now it got a little glitch there when I got to the end of epoch 0 let's see if it does that again no I don't know what so the first epoch they must have had to do some copying onto the GPU I'm not sure why but you can see that animation is no longer studying stuttering from epoch to epoch ok so now we have it trading the model with an animation going let's at least so what I really should do is graph the loss function and by the way I can look at the loss function at the end of each batch so I can get a much more quickly updated loss function so I'm gonna leave that as an exercise to the viewer but I'm gonna just what I'm gonna do is I'm gonna say let loss P and I'm gonna create a paragraph element again I'm not really being thoughtful about design and interface here loss so what I'm going to do here is it's just going to have a paragraph element that says loss in it and what I'm going to do is instead of logging the loss to the console I'm gonna say loss P dot HTML and this is using the p5.js dom library I give you this native JavaScript or jQuery going to put this loss information into that paragraph element so now I have an animation going and then as soon as I get to the end of the first epoch I have to talk for a bit here I see the loss function so now I'm training and getting a report of the loss function so for you I'm in the next video what I'm gonna add is inference or prediction I'm gonna allow the user with sliders to specify a color and have the label returned to me and what I would say to you is an exercise and see what happens if you can query the loss function with the batches and graph it over time and so you see that will be an exercise to you as the viewer and I'm gonna publish a github repo with this finished project so you can look for the Co this is very confusing but you can look for the code it'll be linked in the description in two different places there'll be the code that matches exactly this video and then there will be the code that's in a separate github repo that and somewhere in the future people will be contributing to that we'll have maybe the graph and other kind of designing things that people have from the community have added okay great so one more video to go I think and and then some other ancillary ones that I forgotten about but one more core video to this tutorial series which is adding the prediction and I will see you if you're really gonna watch all of these I will see you in the next video you can check the video description for the next video link you
